unsigned char *md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::FlyoverRenderable>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<HillshadeRenderable>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::setActive(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 32) = a2;
  if ((a2 & 1) == 0) {
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 472);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::setActive(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 32) = a2;
  if ((a2 & 1) == 0) {
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 472);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::setActive(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 32) = a2;
  if ((a2 & 1) == 0) {
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 472);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void md::PuckRenderLayer::setActive(md::PuckRenderLayer *this, int a2)
{
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  v4 = (id)GEOGetVectorKitVKDefaultLog_log;
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      __int16 v9 = 0;
      v6 = "Activate puck render layer";
      v7 = (uint8_t *)&v9;
LABEL_8:
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, v6, v7, 2u);
    }
  }
  else if (v5)
  {
    __int16 v8 = 0;
    v6 = "Deactivate puck render layer";
    v7 = (uint8_t *)&v8;
    goto LABEL_8;
  }

  *((unsigned char *)this + 32) = a2;
}

uint64_t md::SequentialGEOResourceDataRequester::downloadTileSize(md::SequentialGEOResourceDataRequester *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr, void, void))(*(void *)v2 + 32))(&v7, *((void *)this + 1), *((unsigned __int16 *)this + 12));
    if ((_BYTE)v7
      || (BOOL v5 = (unsigned __int16 *)*((void *)this + 6), v6 = (unsigned __int16 *)*((void *)this + 7), v5 == v6))
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int16 *)this + 12);
    }
    else
    {
      while (1)
      {
        uint64_t v3 = *v5;
        (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 32))(&v7);
        if ((_BYTE)v7) {
          break;
        }
        if (++v5 == v6) {
          goto LABEL_3;
        }
      }
    }
  }
  else
  {
    uint64_t v3 = *((unsigned __int16 *)this + 12);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3);
}

void md::CartographicMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4 = *(uint64_t **)(a2 + 1128);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = *v4;
  if (*v4 != v6)
  {
    uint64_t v7 = *v4;
    while (*(unsigned char *)v7 != 1)
    {
      v7 += 16;
      if (v7 == v6) {
        goto LABEL_13;
      }
    }
  }
  if (v7 == v6 || !*(void *)(v7 + 8))
  {
LABEL_13:
    BOOL v9 = 0;
  }
  else
  {
    uint64_t v8 = *v4;
    if (v5 != v6)
    {
      uint64_t v8 = *v4;
      while (*(unsigned char *)v8 != 24)
      {
        v8 += 16;
        if (v8 == v6) {
          goto LABEL_16;
        }
      }
    }
    if (v8 == v6) {
LABEL_16:
    }
      uint64_t v10 = 0;
    else {
      uint64_t v10 = *(void *)(v8 + 8);
    }
    BOOL v9 = v10 != 0;
  }
  uint64_t v11 = *v4;
  if (v5 != v6)
  {
    uint64_t v11 = *v4;
    while (*(unsigned char *)v11 != 1)
    {
      v11 += 16;
      if (v11 == v6)
      {
        LODWORD(v12) = 0;
        if (!v9) {
          goto LABEL_61;
        }
        goto LABEL_38;
      }
    }
  }
  if (v11 == v6)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      uint64_t v13 = *v4;
      if (v5 != v6)
      {
        uint64_t v13 = *v4;
        while (*(unsigned char *)v13 != 24)
        {
          v13 += 16;
          if (v13 == v6) {
            goto LABEL_36;
          }
        }
      }
      if (v13 == v6) {
LABEL_36:
      }
        uint64_t v12 = 0;
      else {
        uint64_t v12 = *(void *)(v13 + 8);
      }
      LODWORD(v12) = v12 == 0;
      if (!v9) {
        goto LABEL_61;
      }
      goto LABEL_38;
    }
  }
  if (!v9) {
    goto LABEL_61;
  }
LABEL_38:
  int8x8_t v14 = (int8x8_t)a3[1];
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      uint64_t v16 = 30;
      if (*(void *)&v14 <= 0x1EuLL) {
        uint64_t v16 = 0x1Eu % a3[1];
      }
    }
    else
    {
      uint64_t v16 = (v14.i8[0] - 1) & 0x1E;
    }
    v17 = *(uint64_t ***)(*a3 + 8 * v16);
    if (v17)
    {
      v18 = *v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          uint64_t v19 = *(void *)&v14 - 1;
          while (1)
          {
            uint64_t v21 = v18[1];
            if (v21 == 30)
            {
              if (*((unsigned char *)v18 + 16) == 30) {
                goto LABEL_59;
              }
            }
            else if ((v21 & v19) != v16)
            {
              goto LABEL_61;
            }
            v18 = (uint64_t *)*v18;
            if (!v18) {
              goto LABEL_61;
            }
          }
        }
        do
        {
          unint64_t v20 = v18[1];
          if (v20 == 30)
          {
            if (*((unsigned char *)v18 + 16) == 30)
            {
LABEL_59:
              if (*((unsigned char *)v18 + 17) == 2) {
                *((unsigned char *)v18 + 17) = 1;
              }
              break;
            }
          }
          else
          {
            if (v20 >= *(void *)&v14) {
              v20 %= *(void *)&v14;
            }
            if (v20 != v16) {
              break;
            }
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_61:
  if (v12)
  {
    int8x8_t v22 = (int8x8_t)a3[1];
    if (v22)
    {
      uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        uint64_t v24 = 26;
        if (*(void *)&v22 <= 0x1AuLL) {
          uint64_t v24 = 0x1Au % a3[1];
        }
      }
      else
      {
        uint64_t v24 = (v22.i32[0] - 1) & 0x1ALL;
      }
      v25 = *(uint64_t ***)(*a3 + 8 * v24);
      if (v25)
      {
        v26 = *v25;
        if (v26)
        {
          if (v23.u32[0] < 2uLL)
          {
            uint64_t v27 = *(void *)&v22 - 1;
            while (1)
            {
              uint64_t v29 = v26[1];
              if (v29 == 26)
              {
                if (*((unsigned char *)v26 + 16) == 26) {
                  goto LABEL_83;
                }
              }
              else if ((v29 & v27) != v24)
              {
                goto LABEL_85;
              }
              v26 = (uint64_t *)*v26;
              if (!v26) {
                goto LABEL_85;
              }
            }
          }
          do
          {
            unint64_t v28 = v26[1];
            if (v28 == 26)
            {
              if (*((unsigned char *)v26 + 16) == 26)
              {
LABEL_83:
                if (*((unsigned char *)v26 + 17) == 2) {
                  *((unsigned char *)v26 + 17) = 1;
                }
                break;
              }
            }
            else
            {
              if (v28 >= *(void *)&v22) {
                v28 %= *(void *)&v22;
              }
              if (v28 != v24) {
                break;
              }
            }
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
      }
    }
  }
LABEL_85:
  uint64_t v30 = v5;
  if (v5 != v6)
  {
    uint64_t v30 = v5;
    while (*(unsigned char *)v30)
    {
      v30 += 16;
      if (v30 == v6) {
        goto LABEL_115;
      }
    }
  }
  if (v30 != v6)
  {
    if (*(void *)(v30 + 8))
    {
      int8x8_t v31 = (int8x8_t)a3[1];
      if (v31)
      {
        uint8x8_t v32 = (uint8x8_t)vcnt_s8(v31);
        v32.i16[0] = vaddlv_u8(v32);
        if (v32.u32[0] > 1uLL)
        {
          uint64_t v33 = 27;
          if (*(void *)&v31 <= 0x1BuLL) {
            uint64_t v33 = 0x1Bu % a3[1];
          }
        }
        else
        {
          uint64_t v33 = (v31.i32[0] - 1) & 0x1BLL;
        }
        v34 = *(uint64_t ***)(*a3 + 8 * v33);
        if (v34)
        {
          v35 = *v34;
          if (v35)
          {
            if (v32.u32[0] < 2uLL)
            {
              uint64_t v36 = *(void *)&v31 - 1;
              while (1)
              {
                uint64_t v38 = v35[1];
                if (v38 == 27)
                {
                  if (*((unsigned char *)v35 + 16) == 27) {
                    goto LABEL_113;
                  }
                }
                else if ((v38 & v36) != v33)
                {
                  goto LABEL_115;
                }
                v35 = (uint64_t *)*v35;
                if (!v35) {
                  goto LABEL_115;
                }
              }
            }
            do
            {
              unint64_t v37 = v35[1];
              if (v37 == 27)
              {
                if (*((unsigned char *)v35 + 16) == 27)
                {
LABEL_113:
                  if (*((unsigned char *)v35 + 17) == 2) {
                    *((unsigned char *)v35 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v37 >= *(void *)&v31) {
                  v37 %= *(void *)&v31;
                }
                if (v37 != v33) {
                  break;
                }
              }
              v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
      }
    }
  }
LABEL_115:
  uint64_t v39 = v5;
  if (v5 != v6)
  {
    uint64_t v39 = v5;
    while (*(unsigned char *)v39 != 2)
    {
      v39 += 16;
      if (v39 == v6) {
        goto LABEL_145;
      }
    }
  }
  if (v39 != v6)
  {
    if (*(void *)(v39 + 8))
    {
      int8x8_t v40 = (int8x8_t)a3[1];
      if (v40)
      {
        uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          uint64_t v42 = 43;
          if (*(void *)&v40 <= 0x2BuLL) {
            uint64_t v42 = 0x2Bu % a3[1];
          }
        }
        else
        {
          uint64_t v42 = (v40.i32[0] - 1) & 0x2BLL;
        }
        v43 = *(uint64_t ***)(*a3 + 8 * v42);
        if (v43)
        {
          v44 = *v43;
          if (v44)
          {
            if (v41.u32[0] < 2uLL)
            {
              uint64_t v45 = *(void *)&v40 - 1;
              while (1)
              {
                uint64_t v47 = v44[1];
                if (v47 == 43)
                {
                  if (*((unsigned char *)v44 + 16) == 43) {
                    goto LABEL_143;
                  }
                }
                else if ((v47 & v45) != v42)
                {
                  goto LABEL_145;
                }
                v44 = (uint64_t *)*v44;
                if (!v44) {
                  goto LABEL_145;
                }
              }
            }
            do
            {
              unint64_t v46 = v44[1];
              if (v46 == 43)
              {
                if (*((unsigned char *)v44 + 16) == 43)
                {
LABEL_143:
                  if (*((unsigned char *)v44 + 17) == 2) {
                    *((unsigned char *)v44 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v46 >= *(void *)&v40) {
                  v46 %= *(void *)&v40;
                }
                if (v46 != v42) {
                  break;
                }
              }
              v44 = (uint64_t *)*v44;
            }
            while (v44);
          }
        }
      }
    }
  }
LABEL_145:
  uint64_t v48 = v5;
  if (v5 != v6)
  {
    uint64_t v48 = v5;
    while (*(unsigned char *)v48 != 5)
    {
      v48 += 16;
      if (v48 == v6) {
        goto LABEL_175;
      }
    }
  }
  if (v48 != v6)
  {
    if (*(void *)(v48 + 8))
    {
      int8x8_t v49 = (int8x8_t)a3[1];
      if (v49)
      {
        uint8x8_t v50 = (uint8x8_t)vcnt_s8(v49);
        v50.i16[0] = vaddlv_u8(v50);
        if (v50.u32[0] > 1uLL)
        {
          uint64_t v51 = 41;
          if (*(void *)&v49 <= 0x29uLL) {
            uint64_t v51 = 0x29u % a3[1];
          }
        }
        else
        {
          uint64_t v51 = (v49.i32[0] - 1) & 0x29;
        }
        v52 = *(uint64_t ***)(*a3 + 8 * v51);
        if (v52)
        {
          v53 = *v52;
          if (v53)
          {
            if (v50.u32[0] < 2uLL)
            {
              uint64_t v54 = *(void *)&v49 - 1;
              while (1)
              {
                uint64_t v56 = v53[1];
                if (v56 == 41)
                {
                  if (*((unsigned char *)v53 + 16) == 41) {
                    goto LABEL_173;
                  }
                }
                else if ((v56 & v54) != v51)
                {
                  goto LABEL_175;
                }
                v53 = (uint64_t *)*v53;
                if (!v53) {
                  goto LABEL_175;
                }
              }
            }
            do
            {
              unint64_t v55 = v53[1];
              if (v55 == 41)
              {
                if (*((unsigned char *)v53 + 16) == 41)
                {
LABEL_173:
                  if (*((unsigned char *)v53 + 17) == 2) {
                    *((unsigned char *)v53 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v55 >= *(void *)&v49) {
                  v55 %= *(void *)&v49;
                }
                if (v55 != v51) {
                  break;
                }
              }
              v53 = (uint64_t *)*v53;
            }
            while (v53);
          }
        }
      }
    }
  }
LABEL_175:
  if (v5 != v6)
  {
    while (*(unsigned char *)v5 != 5)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_204;
      }
    }
  }
  if (v5 != v6)
  {
    if (*(void *)(v5 + 8))
    {
      int8x8_t v57 = (int8x8_t)a3[1];
      if (v57)
      {
        uint8x8_t v58 = (uint8x8_t)vcnt_s8(v57);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] > 1uLL)
        {
          uint64_t v59 = 42;
          if (*(void *)&v57 <= 0x2AuLL) {
            uint64_t v59 = 0x2Au % a3[1];
          }
        }
        else
        {
          uint64_t v59 = (v57.i32[0] - 1) & 0x2ALL;
        }
        v60 = *(uint64_t ***)(*a3 + 8 * v59);
        if (v60)
        {
          v61 = *v60;
          if (v61)
          {
            if (v58.u32[0] < 2uLL)
            {
              uint64_t v62 = *(void *)&v57 - 1;
              while (1)
              {
                uint64_t v64 = v61[1];
                if (v64 == 42)
                {
                  if (*((unsigned char *)v61 + 16) == 42) {
                    goto LABEL_202;
                  }
                }
                else if ((v64 & v62) != v59)
                {
                  goto LABEL_204;
                }
                v61 = (uint64_t *)*v61;
                if (!v61) {
                  goto LABEL_204;
                }
              }
            }
            do
            {
              unint64_t v63 = v61[1];
              if (v63 == 42)
              {
                if (*((unsigned char *)v61 + 16) == 42)
                {
LABEL_202:
                  if (*((unsigned char *)v61 + 17) == 2) {
                    *((unsigned char *)v61 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v63 >= *(void *)&v57) {
                  v63 %= *(void *)&v57;
                }
                if (v63 != v59) {
                  break;
                }
              }
              v61 = (uint64_t *)*v61;
            }
            while (v61);
          }
        }
      }
    }
  }
LABEL_204:
  uint64_t v65 = *v4;
  uint64_t v66 = v4[1];
  uint64_t v67 = *v4;
  if (*v4 != v66)
  {
    uint64_t v67 = *v4;
    while (*(unsigned char *)v67 != 32)
    {
      v67 += 16;
      if (v67 == v66) {
        goto LABEL_234;
      }
    }
  }
  if (v67 != v66)
  {
    if (*(void *)(v67 + 8))
    {
      int8x8_t v68 = (int8x8_t)a3[1];
      if (v68)
      {
        uint8x8_t v69 = (uint8x8_t)vcnt_s8(v68);
        v69.i16[0] = vaddlv_u8(v69);
        if (v69.u32[0] > 1uLL)
        {
          uint64_t v70 = 14;
          if (*(void *)&v68 <= 0xEuLL) {
            uint64_t v70 = 0xEu % a3[1];
          }
        }
        else
        {
          uint64_t v70 = (v68.i8[0] - 1) & 0xE;
        }
        v71 = *(uint64_t ***)(*a3 + 8 * v70);
        if (v71)
        {
          v72 = *v71;
          if (v72)
          {
            if (v69.u32[0] < 2uLL)
            {
              uint64_t v73 = *(void *)&v68 - 1;
              while (1)
              {
                uint64_t v75 = v72[1];
                if (v75 == 14)
                {
                  if (*((unsigned char *)v72 + 16) == 14) {
                    goto LABEL_232;
                  }
                }
                else if ((v75 & v73) != v70)
                {
                  goto LABEL_234;
                }
                v72 = (uint64_t *)*v72;
                if (!v72) {
                  goto LABEL_234;
                }
              }
            }
            do
            {
              unint64_t v74 = v72[1];
              if (v74 == 14)
              {
                if (*((unsigned char *)v72 + 16) == 14)
                {
LABEL_232:
                  if (*((unsigned char *)v72 + 17) == 2) {
                    *((unsigned char *)v72 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v74 >= *(void *)&v68) {
                  v74 %= *(void *)&v68;
                }
                if (v74 != v70) {
                  break;
                }
              }
              v72 = (uint64_t *)*v72;
            }
            while (v72);
          }
        }
      }
    }
  }
LABEL_234:
  uint64_t v76 = v65;
  if (v65 != v66)
  {
    uint64_t v76 = v65;
    while (*(unsigned char *)v76 != 33)
    {
      v76 += 16;
      if (v76 == v66) {
        goto LABEL_264;
      }
    }
  }
  if (v76 != v66)
  {
    if (*(void *)(v76 + 8))
    {
      int8x8_t v77 = (int8x8_t)a3[1];
      if (v77)
      {
        uint8x8_t v78 = (uint8x8_t)vcnt_s8(v77);
        v78.i16[0] = vaddlv_u8(v78);
        if (v78.u32[0] > 1uLL)
        {
          uint64_t v79 = 25;
          if (*(void *)&v77 <= 0x19uLL) {
            uint64_t v79 = 0x19u % a3[1];
          }
        }
        else
        {
          uint64_t v79 = (v77.i32[0] - 1) & 0x19;
        }
        v80 = *(uint64_t ***)(*a3 + 8 * v79);
        if (v80)
        {
          v81 = *v80;
          if (v81)
          {
            if (v78.u32[0] < 2uLL)
            {
              uint64_t v82 = *(void *)&v77 - 1;
              while (1)
              {
                uint64_t v84 = v81[1];
                if (v84 == 25)
                {
                  if (*((unsigned char *)v81 + 16) == 25) {
                    goto LABEL_262;
                  }
                }
                else if ((v84 & v82) != v79)
                {
                  goto LABEL_264;
                }
                v81 = (uint64_t *)*v81;
                if (!v81) {
                  goto LABEL_264;
                }
              }
            }
            do
            {
              unint64_t v83 = v81[1];
              if (v83 == 25)
              {
                if (*((unsigned char *)v81 + 16) == 25)
                {
LABEL_262:
                  if (*((unsigned char *)v81 + 17) == 2) {
                    *((unsigned char *)v81 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v83 >= *(void *)&v77) {
                  v83 %= *(void *)&v77;
                }
                if (v83 != v79) {
                  break;
                }
              }
              v81 = (uint64_t *)*v81;
            }
            while (v81);
          }
        }
      }
    }
  }
LABEL_264:
  v85 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v86 = v85[2];
  if (!*(void *)&v86) {
    goto LABEL_284;
  }
  uint8x8_t v87 = (uint8x8_t)vcnt_s8(v86);
  v87.i16[0] = vaddlv_u8(v87);
  if (v87.u32[0] > 1uLL)
  {
    unint64_t v88 = 0xC74495586E0C32F6;
    if (*(void *)&v86 <= 0xC74495586E0C32F6) {
      unint64_t v88 = 0xC74495586E0C32F6 % *(void *)&v86;
    }
  }
  else
  {
    unint64_t v88 = (*(void *)&v86 - 1) & 0xC74495586E0C32F6;
  }
  v89 = *(void **)(*(void *)&v85[1] + 8 * v88);
  if (!v89 || (v90 = (void *)*v89) == 0)
  {
LABEL_284:
    uint64_t v94 = 0;
    goto LABEL_285;
  }
  if (v87.u32[0] < 2uLL)
  {
    uint64_t v91 = *(void *)&v86 - 1;
    while (1)
    {
      uint64_t v93 = v90[1];
      if (v93 == 0xC74495586E0C32F6)
      {
        if (v90[2] == 0xC74495586E0C32F6) {
          goto LABEL_317;
        }
      }
      else if ((v93 & v91) != v88)
      {
        goto LABEL_284;
      }
      v90 = (void *)*v90;
      if (!v90) {
        goto LABEL_284;
      }
    }
  }
  while (1)
  {
    unint64_t v92 = v90[1];
    if (v92 == 0xC74495586E0C32F6) {
      break;
    }
    if (v92 >= *(void *)&v86) {
      v92 %= *(void *)&v86;
    }
    if (v92 != v88) {
      goto LABEL_284;
    }
LABEL_274:
    v90 = (void *)*v90;
    if (!v90) {
      goto LABEL_284;
    }
  }
  if (v90[2] != 0xC74495586E0C32F6) {
    goto LABEL_274;
  }
LABEL_317:
  uint64_t v94 = v90[5];
LABEL_285:
  uint64_t v95 = v65;
  if (v65 != v66)
  {
    uint64_t v95 = v65;
    while (*(unsigned char *)v95 != 34)
    {
      v95 += 16;
      if (v95 == v66) {
        goto LABEL_292;
      }
    }
  }
  if (v95 == v66 || !*(void *)(v95 + 8))
  {
LABEL_292:
    if (!v94 || !*(unsigned char *)(v94 + 56) || !*(unsigned char *)(v94 + 392) || fabsf(*(float *)(v94 + 356)) <= 0.0001) {
      goto LABEL_320;
    }
  }
  int8x8_t v96 = (int8x8_t)a3[1];
  if (v96)
  {
    uint8x8_t v97 = (uint8x8_t)vcnt_s8(v96);
    v97.i16[0] = vaddlv_u8(v97);
    if (v97.u32[0] > 1uLL)
    {
      uint64_t v98 = 17;
      if (*(void *)&v96 <= 0x11uLL) {
        uint64_t v98 = 0x11u % a3[1];
      }
    }
    else
    {
      uint64_t v98 = (v96.i32[0] - 1) & 0x11;
    }
    v99 = *(uint64_t ***)(*a3 + 8 * v98);
    if (v99)
    {
      v100 = *v99;
      if (v100)
      {
        if (v97.u32[0] < 2uLL)
        {
          uint64_t v101 = *(void *)&v96 - 1;
          while (1)
          {
            uint64_t v103 = v100[1];
            if (v103 == 17)
            {
              if (*((unsigned char *)v100 + 16) == 17) {
                goto LABEL_318;
              }
            }
            else if ((v103 & v101) != v98)
            {
              goto LABEL_320;
            }
            v100 = (uint64_t *)*v100;
            if (!v100) {
              goto LABEL_320;
            }
          }
        }
        do
        {
          unint64_t v102 = v100[1];
          if (v102 == 17)
          {
            if (*((unsigned char *)v100 + 16) == 17)
            {
LABEL_318:
              if (*((unsigned char *)v100 + 17) == 2) {
                *((unsigned char *)v100 + 17) = 1;
              }
              break;
            }
          }
          else
          {
            if (v102 >= *(void *)&v96) {
              v102 %= *(void *)&v96;
            }
            if (v102 != v98) {
              break;
            }
          }
          v100 = (uint64_t *)*v100;
        }
        while (v100);
      }
    }
  }
LABEL_320:
  uint64_t v104 = v65;
  if (v65 != v66)
  {
    uint64_t v104 = v65;
    while (*(unsigned char *)v104 != 8)
    {
      v104 += 16;
      if (v104 == v66) {
        goto LABEL_328;
      }
    }
  }
  if (v104 != v66 && *(void *)(v104 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x15u);
    uint64_t v65 = *v4;
    uint64_t v66 = v4[1];
  }
LABEL_328:
  if (v65 != v66)
  {
    uint64_t v105 = v65;
    while (*(unsigned char *)v105 != 8)
    {
      v105 += 16;
      if (v105 == v66) {
        goto LABEL_336;
      }
    }
    if (v105 != v66 && *(void *)(v105 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x17u);
      uint64_t v65 = *v4;
      uint64_t v66 = v4[1];
    }
  }
LABEL_336:
  if (v65 != v66)
  {
    uint64_t v106 = v65;
    while (*(unsigned char *)v106 != 10)
    {
      v106 += 16;
      if (v106 == v66) {
        goto LABEL_344;
      }
    }
    if (v106 != v66 && *(void *)(v106 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0xCu);
      uint64_t v65 = *v4;
      uint64_t v66 = v4[1];
    }
  }
LABEL_344:
  if (v65 != v66)
  {
    uint64_t v107 = v65;
    while (*(unsigned char *)v107 != 10)
    {
      v107 += 16;
      if (v107 == v66) {
        goto LABEL_352;
      }
    }
    if (v107 != v66 && *(void *)(v107 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0xDu);
      uint64_t v65 = *v4;
      uint64_t v66 = v4[1];
    }
  }
LABEL_352:
  if (v65 != v66)
  {
    uint64_t v108 = v65;
    while (*(unsigned char *)v108 != 13)
    {
      v108 += 16;
      if (v108 == v66) {
        goto LABEL_360;
      }
    }
    if (v108 != v66 && *(void *)(v108 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x1Au);
      uint64_t v65 = *v4;
      uint64_t v66 = v4[1];
    }
  }
LABEL_360:
  if (v65 != v66)
  {
    uint64_t v109 = v65;
    while (*(unsigned char *)v109 != 13)
    {
      v109 += 16;
      if (v109 == v66) {
        goto LABEL_368;
      }
    }
    if (v109 != v66 && *(void *)(v109 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x1Eu);
      uint64_t v65 = *v4;
      uint64_t v66 = v4[1];
    }
  }
LABEL_368:
  if (v65 == v66) {
    goto LABEL_378;
  }
  uint64_t v110 = v65;
  while (*(unsigned char *)v110 != 14)
  {
    v110 += 16;
    if (v110 == v66) {
      goto LABEL_378;
    }
  }
  if (v110 != v66 && *(void *)(v110 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 8u);
    uint64_t v65 = *v4;
    uint64_t v66 = v4[1];
  }
LABEL_378:
  while (v65 != v66)
  {
    if (*(unsigned char *)v65 == 14)
    {
      if (v65 != v66 && *(void *)(v65 + 8)) {
        std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0xBu);
      }
      break;
    }
    v65 += 16;
  }
  uint64_t v111 = *v4;
  uint64_t v112 = v4[1];
  uint64_t v113 = *v4;
  if (*v4 != v112)
  {
    uint64_t v113 = *v4;
    while (*(unsigned char *)v113 != 14)
    {
      v113 += 16;
      if (v113 == v112) {
        goto LABEL_387;
      }
    }
  }
  if (v113 != v112 && *(void *)(v113 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 9u);
    uint64_t v111 = *v4;
    uint64_t v112 = v4[1];
  }
LABEL_387:
  if (v111 != v112)
  {
    uint64_t v114 = v111;
    while (*(unsigned char *)v114 != 14)
    {
      v114 += 16;
      if (v114 == v112) {
        goto LABEL_398;
      }
    }
    if (v114 != v112 && *(void *)(v114 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 7u);
      uint64_t v111 = *v4;
      uint64_t v112 = v4[1];
    }
  }
LABEL_398:
  if (v111 != v112)
  {
    uint64_t v115 = v111;
    while (*(unsigned char *)v115 != 15)
    {
      v115 += 16;
      if (v115 == v112) {
        goto LABEL_406;
      }
    }
    if (v115 != v112 && *(void *)(v115 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 2u);
      uint64_t v111 = *v4;
      uint64_t v112 = v4[1];
    }
  }
LABEL_406:
  if (v111 == v112) {
    goto LABEL_416;
  }
  uint64_t v116 = v111;
  while (*(unsigned char *)v116 != 16)
  {
    v116 += 16;
    if (v116 == v112) {
      goto LABEL_416;
    }
  }
  if (v116 != v112 && *(void *)(v116 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x13u);
    uint64_t v111 = *v4;
    uint64_t v112 = v4[1];
  }
LABEL_416:
  while (v111 != v112)
  {
    if (*(unsigned char *)v111 == 16)
    {
      if (v111 != v112 && *(void *)(v111 + 8))
      {
        std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x14u);
      }
      return;
    }
    v111 += 16;
  }
}

void md::DaVinciBaseMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4 = *(uint64_t **)(a2 + 1128);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = *v4;
  if (*v4 != v6)
  {
    uint64_t v7 = *v4;
    while (*(unsigned char *)v7 != 1)
    {
      v7 += 16;
      if (v7 == v6) {
        goto LABEL_38;
      }
    }
  }
  if (v7 == v6 || !*(void *)(v7 + 8)) {
    goto LABEL_38;
  }
  uint64_t v8 = *v4;
  if (v5 != v6)
  {
    uint64_t v8 = *v4;
    while (*(unsigned char *)v8 != 24)
    {
      v8 += 16;
      if (v8 == v6) {
        goto LABEL_38;
      }
    }
  }
  if (v8 != v6)
  {
    if (*(void *)(v8 + 8))
    {
      int8x8_t v9 = (int8x8_t)a3[1];
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          uint64_t v11 = 30;
          if (*(void *)&v9 <= 0x1EuLL) {
            uint64_t v11 = 0x1Eu % a3[1];
          }
        }
        else
        {
          uint64_t v11 = (v9.i8[0] - 1) & 0x1E;
        }
        uint64_t v12 = *(uint64_t ***)(*a3 + 8 * v11);
        if (v12)
        {
          uint64_t v13 = *v12;
          if (v13)
          {
            if (v10.u32[0] < 2uLL)
            {
              uint64_t v14 = *(void *)&v9 - 1;
              while (1)
              {
                uint64_t v16 = v13[1];
                if (v16 == 30)
                {
                  if (*((unsigned char *)v13 + 16) == 30) {
                    goto LABEL_36;
                  }
                }
                else if ((v16 & v14) != v11)
                {
                  goto LABEL_38;
                }
                uint64_t v13 = (uint64_t *)*v13;
                if (!v13) {
                  goto LABEL_38;
                }
              }
            }
            do
            {
              unint64_t v15 = v13[1];
              if (v15 == 30)
              {
                if (*((unsigned char *)v13 + 16) == 30)
                {
LABEL_36:
                  if (*((unsigned char *)v13 + 17) == 2) {
                    *((unsigned char *)v13 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v15 >= *(void *)&v9) {
                  v15 %= *(void *)&v9;
                }
                if (v15 != v11) {
                  break;
                }
              }
              uint64_t v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
        }
      }
    }
  }
LABEL_38:
  int8x8_t v17 = (int8x8_t)a3[1];
  if (v17)
  {
    uint8x8_t v18 = (uint8x8_t)vcnt_s8(v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      uint64_t v19 = 52;
      if (*(void *)&v17 <= 0x34uLL) {
        uint64_t v19 = 0x34u % a3[1];
      }
    }
    else
    {
      uint64_t v19 = (v17.i32[0] - 1) & 0x34;
    }
    unint64_t v20 = *(uint64_t ***)(*a3 + 8 * v19);
    if (v20)
    {
      uint64_t v21 = *v20;
      if (v21)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v21[1];
            if (v23 == 52)
            {
              if (*((unsigned char *)v21 + 16) == 52) {
                goto LABEL_59;
              }
            }
            else if ((v23 & (*(void *)&v17 - 1)) != v19)
            {
              goto LABEL_61;
            }
            uint64_t v21 = (uint64_t *)*v21;
            if (!v21) {
              goto LABEL_61;
            }
          }
        }
        do
        {
          unint64_t v22 = v21[1];
          if (v22 == 52)
          {
            if (*((unsigned char *)v21 + 16) == 52)
            {
LABEL_59:
              if (*((unsigned char *)v21 + 17) == 2) {
                *((unsigned char *)v21 + 17) = 1;
              }
              break;
            }
          }
          else
          {
            if (v22 >= *(void *)&v17) {
              v22 %= *(void *)&v17;
            }
            if (v22 != v19) {
              break;
            }
          }
          uint64_t v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_61:
  uint64_t v24 = v5;
  if (v5 != v6)
  {
    uint64_t v24 = v5;
    while (*(unsigned char *)v24 != 2)
    {
      v24 += 16;
      if (v24 == v6) {
        goto LABEL_70;
      }
    }
  }
  if (v24 != v6 && *(void *)(v24 + 8))
  {
    if (!*(void *)&v17) {
      goto LABEL_102;
    }
    goto LABEL_80;
  }
LABEL_70:
  uint64_t v25 = v5;
  if (v5 != v6)
  {
    uint64_t v25 = v5;
    while (*(unsigned char *)v25 != 4)
    {
      v25 += 16;
      if (v25 == v6) {
        goto LABEL_102;
      }
    }
  }
  if (v25 != v6 && *(void *)(v25 + 8) && *(void *)&v17 != 0)
  {
LABEL_80:
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(v17);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      uint64_t v28 = 46;
      if (*(void *)&v17 <= 0x2EuLL) {
        uint64_t v28 = 0x2Eu % v17.u8[0];
      }
    }
    else
    {
      uint64_t v28 = (v17.i32[0] - 1) & 0x2ELL;
    }
    uint64_t v29 = *(uint64_t ***)(*a3 + 8 * v28);
    if (v29)
    {
      uint64_t v30 = *v29;
      if (v30)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v32 = v30[1];
            if (v32 == 46)
            {
              if (*((unsigned char *)v30 + 16) == 46) {
                goto LABEL_100;
              }
            }
            else if ((v32 & (*(void *)&v17 - 1)) != v28)
            {
              goto LABEL_102;
            }
            uint64_t v30 = (uint64_t *)*v30;
            if (!v30) {
              goto LABEL_102;
            }
          }
        }
        do
        {
          unint64_t v31 = v30[1];
          if (v31 == 46)
          {
            if (*((unsigned char *)v30 + 16) == 46)
            {
LABEL_100:
              if (*((unsigned char *)v30 + 17) == 2) {
                *((unsigned char *)v30 + 17) = 1;
              }
              break;
            }
          }
          else
          {
            if (v31 >= *(void *)&v17) {
              v31 %= *(void *)&v17;
            }
            if (v31 != v28) {
              break;
            }
          }
          uint64_t v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
    }
  }
LABEL_102:
  uint64_t v33 = v5;
  if (v5 != v6)
  {
    uint64_t v33 = v5;
    while (*(unsigned char *)v33 != 5)
    {
      v33 += 16;
      if (v33 == v6) {
        goto LABEL_134;
      }
    }
  }
  if (v33 != v6 && *(void *)(v33 + 8) && *(void *)&v17 != 0)
  {
    uint8x8_t v35 = (uint8x8_t)vcnt_s8(v17);
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.u32[0] > 1uLL)
    {
      uint64_t v36 = 41;
      if (*(void *)&v17 <= 0x29uLL) {
        uint64_t v36 = 0x29u % v17.u8[0];
      }
    }
    else
    {
      uint64_t v36 = (v17.i32[0] - 1) & 0x29;
    }
    unint64_t v37 = *(uint64_t ***)(*a3 + 8 * v36);
    if (v37)
    {
      uint64_t v38 = *v37;
      if (v38)
      {
        if (v35.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v40 = v38[1];
            if (v40 == 41)
            {
              if (*((unsigned char *)v38 + 16) == 41) {
                goto LABEL_132;
              }
            }
            else if ((v40 & (*(void *)&v17 - 1)) != v36)
            {
              goto LABEL_134;
            }
            uint64_t v38 = (uint64_t *)*v38;
            if (!v38) {
              goto LABEL_134;
            }
          }
        }
        do
        {
          unint64_t v39 = v38[1];
          if (v39 == 41)
          {
            if (*((unsigned char *)v38 + 16) == 41)
            {
LABEL_132:
              if (*((unsigned char *)v38 + 17) == 2) {
                *((unsigned char *)v38 + 17) = 1;
              }
              break;
            }
          }
          else
          {
            if (v39 >= *(void *)&v17) {
              v39 %= *(void *)&v17;
            }
            if (v39 != v36) {
              break;
            }
          }
          uint64_t v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
    }
  }
LABEL_134:
  uint64_t v41 = v5;
  if (v5 != v6)
  {
    uint64_t v41 = v5;
    while (*(unsigned char *)v41 != 5)
    {
      v41 += 16;
      if (v41 == v6) {
        goto LABEL_166;
      }
    }
  }
  if (v41 != v6 && *(void *)(v41 + 8) && *(void *)&v17 != 0)
  {
    uint8x8_t v43 = (uint8x8_t)vcnt_s8(v17);
    v43.i16[0] = vaddlv_u8(v43);
    if (v43.u32[0] > 1uLL)
    {
      uint64_t v44 = 42;
      if (*(void *)&v17 <= 0x2AuLL) {
        uint64_t v44 = 0x2Au % v17.u8[0];
      }
    }
    else
    {
      uint64_t v44 = (v17.i32[0] - 1) & 0x2ALL;
    }
    uint64_t v45 = *(uint64_t ***)(*a3 + 8 * v44);
    if (v45)
    {
      unint64_t v46 = *v45;
      if (v46)
      {
        if (v43.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v48 = v46[1];
            if (v48 == 42)
            {
              if (*((unsigned char *)v46 + 16) == 42) {
                goto LABEL_164;
              }
            }
            else if ((v48 & (*(void *)&v17 - 1)) != v44)
            {
              goto LABEL_166;
            }
            unint64_t v46 = (uint64_t *)*v46;
            if (!v46) {
              goto LABEL_166;
            }
          }
        }
        do
        {
          unint64_t v47 = v46[1];
          if (v47 == 42)
          {
            if (*((unsigned char *)v46 + 16) == 42)
            {
LABEL_164:
              if (*((unsigned char *)v46 + 17) == 2) {
                *((unsigned char *)v46 + 17) = 1;
              }
              break;
            }
          }
          else
          {
            if (v47 >= *(void *)&v17) {
              v47 %= *(void *)&v17;
            }
            if (v47 != v44) {
              break;
            }
          }
          unint64_t v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
    }
  }
LABEL_166:
  if (v5 != v6)
  {
    while (*(unsigned char *)v5 != 33)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_197;
      }
    }
  }
  if (v5 != v6 && *(void *)(v5 + 8) && *(void *)&v17 != 0)
  {
    uint8x8_t v50 = (uint8x8_t)vcnt_s8(v17);
    v50.i16[0] = vaddlv_u8(v50);
    if (v50.u32[0] > 1uLL)
    {
      uint64_t v51 = 38;
      if (*(void *)&v17 <= 0x26uLL) {
        uint64_t v51 = 0x26u % v17.u8[0];
      }
    }
    else
    {
      uint64_t v51 = (v17.i32[0] - 1) & 0x26;
    }
    v52 = *(uint64_t ***)(*a3 + 8 * v51);
    if (v52)
    {
      v53 = *v52;
      if (v53)
      {
        if (v50.u32[0] < 2uLL)
        {
          uint64_t v54 = *(void *)&v17 - 1;
          while (1)
          {
            uint64_t v56 = v53[1];
            if (v56 == 38)
            {
              if (*((unsigned char *)v53 + 16) == 38) {
                goto LABEL_195;
              }
            }
            else if ((v56 & v54) != v51)
            {
              goto LABEL_197;
            }
            v53 = (uint64_t *)*v53;
            if (!v53) {
              goto LABEL_197;
            }
          }
        }
        do
        {
          unint64_t v55 = v53[1];
          if (v55 == 38)
          {
            if (*((unsigned char *)v53 + 16) == 38)
            {
LABEL_195:
              if (*((unsigned char *)v53 + 17) == 2) {
                *((unsigned char *)v53 + 17) = 1;
              }
              break;
            }
          }
          else
          {
            if (v55 >= *(void *)&v17) {
              v55 %= *(void *)&v17;
            }
            if (v55 != v51) {
              break;
            }
          }
          v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
    }
  }
LABEL_197:
  int8x8_t v57 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v58 = v57[2];
  if (!*(void *)&v58) {
    goto LABEL_217;
  }
  uint8x8_t v59 = (uint8x8_t)vcnt_s8(v58);
  v59.i16[0] = vaddlv_u8(v59);
  if (v59.u32[0] > 1uLL)
  {
    unint64_t v60 = 0xC74495586E0C32F6;
    if (*(void *)&v58 <= 0xC74495586E0C32F6) {
      unint64_t v60 = 0xC74495586E0C32F6 % *(void *)&v58;
    }
  }
  else
  {
    unint64_t v60 = (*(void *)&v58 - 1) & 0xC74495586E0C32F6;
  }
  v61 = *(void **)(*(void *)&v57[1] + 8 * v60);
  if (!v61 || (uint64_t v62 = (void *)*v61) == 0)
  {
LABEL_217:
    uint64_t v66 = 0;
    goto LABEL_218;
  }
  if (v59.u32[0] < 2uLL)
  {
    uint64_t v63 = *(void *)&v58 - 1;
    while (1)
    {
      uint64_t v65 = v62[1];
      if (v65 == 0xC74495586E0C32F6)
      {
        if (v62[2] == 0xC74495586E0C32F6) {
          goto LABEL_250;
        }
      }
      else if ((v65 & v63) != v60)
      {
        goto LABEL_217;
      }
      uint64_t v62 = (void *)*v62;
      if (!v62) {
        goto LABEL_217;
      }
    }
  }
  while (1)
  {
    unint64_t v64 = v62[1];
    if (v64 == 0xC74495586E0C32F6) {
      break;
    }
    if (v64 >= *(void *)&v58) {
      v64 %= *(void *)&v58;
    }
    if (v64 != v60) {
      goto LABEL_217;
    }
LABEL_207:
    uint64_t v62 = (void *)*v62;
    if (!v62) {
      goto LABEL_217;
    }
  }
  if (v62[2] != 0xC74495586E0C32F6) {
    goto LABEL_207;
  }
LABEL_250:
  uint64_t v66 = v62[5];
LABEL_218:
  uint64_t v67 = *v4;
  uint64_t v68 = v4[1];
  uint64_t v69 = *v4;
  if (*v4 != v68)
  {
    uint64_t v69 = *v4;
    while (*(unsigned char *)v69 != 34)
    {
      v69 += 16;
      if (v69 == v68) {
        goto LABEL_225;
      }
    }
  }
  if (v69 != v68 && *(void *)(v69 + 8))
  {
LABEL_229:
    int8x8_t v70 = (int8x8_t)a3[1];
    if (!*(void *)&v70) {
      goto LABEL_253;
    }
    uint8x8_t v71 = (uint8x8_t)vcnt_s8(v70);
    v71.i16[0] = vaddlv_u8(v71);
    if (v71.u32[0] > 1uLL)
    {
      uint64_t v72 = 37;
      if (*(void *)&v70 <= 0x25uLL) {
        uint64_t v72 = 0x25u % a3[1];
      }
    }
    else
    {
      uint64_t v72 = (v70.i32[0] - 1) & 0x25;
    }
    uint64_t v73 = *(uint64_t ***)(*a3 + 8 * v72);
    if (!v73) {
      goto LABEL_253;
    }
    unint64_t v74 = *v73;
    if (!v74) {
      goto LABEL_253;
    }
    if (v71.u32[0] < 2uLL)
    {
      uint64_t v75 = *(void *)&v70 - 1;
      while (1)
      {
        uint64_t v77 = v74[1];
        if (v77 == 37)
        {
          if (*((unsigned char *)v74 + 16) == 37) {
            goto LABEL_251;
          }
        }
        else if ((v77 & v75) != v72)
        {
          goto LABEL_253;
        }
        unint64_t v74 = (uint64_t *)*v74;
        if (!v74) {
          goto LABEL_253;
        }
      }
    }
    while (1)
    {
      unint64_t v76 = v74[1];
      if (v76 == 37)
      {
        if (*((unsigned char *)v74 + 16) == 37)
        {
LABEL_251:
          if (*((unsigned char *)v74 + 17) == 2) {
            *((unsigned char *)v74 + 17) = 1;
          }
          goto LABEL_253;
        }
      }
      else
      {
        if (v76 >= *(void *)&v70) {
          v76 %= *(void *)&v70;
        }
        if (v76 != v72) {
          goto LABEL_253;
        }
      }
      unint64_t v74 = (uint64_t *)*v74;
      if (!v74) {
        goto LABEL_253;
      }
    }
  }
LABEL_225:
  if (v66 && *(unsigned char *)(v66 + 56) && *(unsigned char *)(v66 + 392) && fabsf(*(float *)(v66 + 356)) > 0.0001) {
    goto LABEL_229;
  }
LABEL_253:
  uint64_t v78 = v67;
  if (v67 != v68)
  {
    uint64_t v78 = v67;
    while (*(unsigned char *)v78 != 13)
    {
      v78 += 16;
      if (v78 == v68) {
        goto LABEL_263;
      }
    }
  }
  if (v78 != v68 && *(void *)(v78 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x1Eu);
    uint64_t v67 = *v4;
    uint64_t v68 = v4[1];
  }
LABEL_263:
  while (v67 != v68)
  {
    if (*(unsigned char *)v67 == 10)
    {
      if (v67 != v68 && *(void *)(v67 + 8))
      {
        std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x1Du);
      }
      return;
    }
    v67 += 16;
  }
}

void md::DaVinciBaseMapEngineMode::applyMapDataTypeSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 1128);
  if (!v3) {
    goto LABEL_118;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    uint64_t v6 = v4;
    while (*(unsigned char *)v6 != 29)
    {
      v6 += 16;
      if (v6 == v5) {
        goto LABEL_10;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_10:
    uint64_t v7 = 0;
    if (v4 != v5)
    {
LABEL_11:
      while (*(unsigned char *)v4 != 22)
      {
        v4 += 16;
        if (v4 == v5) {
          goto LABEL_20;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v4 != v5) {
      goto LABEL_11;
    }
  }
  if (v4 == v5)
  {
LABEL_20:
    if (v7 == 3) {
      int v9 = 2;
    }
    else {
      int v9 = 4;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 8);
    if (v7 == 3) {
      int v9 = 2;
    }
    else {
      int v9 = 4;
    }
    if (v8) {
      int v9 = 7;
    }
  }
  int8x8_t v10 = (int8x8_t)a3[1];
  if (!*(void *)&v10) {
    goto LABEL_118;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  unint64_t v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    uint64_t v13 = 11;
    if (*(void *)&v10 <= 0xBuLL) {
      uint64_t v13 = 0xBu % a3[1];
    }
  }
  else
  {
    uint64_t v13 = (v10.i32[0] - 1) & 0xBLL;
  }
  uint64_t v14 = *(uint64_t ***)(*a3 + 8 * v13);
  if (!v14) {
    goto LABEL_48;
  }
  unint64_t v15 = *v14;
  if (!v15) {
    goto LABEL_48;
  }
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 11)
      {
        if (*((_WORD *)v15 + 8) == 11) {
          goto LABEL_44;
        }
      }
      else if ((v17 & (*(void *)&v10 - 1)) != v13)
      {
        goto LABEL_46;
      }
      unint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_46;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v16 == 11) {
      break;
    }
    if (v16 >= *(void *)&v10) {
      v16 %= *(void *)&v10;
    }
    if (v16 != v13) {
      goto LABEL_46;
    }
LABEL_33:
    unint64_t v15 = (uint64_t *)*v15;
    if (!v15) {
      goto LABEL_46;
    }
  }
  if (*((_WORD *)v15 + 8) != 11) {
    goto LABEL_33;
  }
LABEL_44:
  if (*((unsigned char *)v15 + 18) == 2)
  {
    *(_DWORD *)((char *)v15 + 18) = (v9 << 16) | 2;
    int8x8_t v10 = (int8x8_t)a3[1];
  }
LABEL_46:
  if (!*(void *)&v10) {
    goto LABEL_118;
  }
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v10);
  v18.i16[0] = vaddlv_u8(v18);
  unint64_t v12 = v18.u32[0];
LABEL_48:
  if (v12 > 1)
  {
    uint64_t v19 = 12;
    if (*(void *)&v10 <= 0xCuLL) {
      uint64_t v19 = 0xCu % v10.u8[0];
    }
  }
  else
  {
    uint64_t v19 = (v10.i8[0] - 1) & 0xC;
  }
  unint64_t v20 = *(uint64_t ***)(*a3 + 8 * v19);
  if (!v20) {
    goto LABEL_72;
  }
  uint64_t v21 = *v20;
  if (!v21) {
    goto LABEL_72;
  }
  if (v12 < 2)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 12)
      {
        if (*((_WORD *)v21 + 8) == 12) {
          goto LABEL_68;
        }
      }
      else if ((v23 & (*(void *)&v10 - 1)) != v19)
      {
        goto LABEL_70;
      }
      uint64_t v21 = (uint64_t *)*v21;
      if (!v21) {
        goto LABEL_70;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 12)
    {
      if (v22 >= *(void *)&v10) {
        v22 %= *(void *)&v10;
      }
      if (v22 != v19) {
        goto LABEL_70;
      }
      goto LABEL_57;
    }
    if (*((_WORD *)v21 + 8) != 12)
    {
LABEL_57:
      uint64_t v21 = (uint64_t *)*v21;
      if (!v21) {
        goto LABEL_70;
      }
      continue;
    }
    break;
  }
LABEL_68:
  if (*((unsigned char *)v21 + 18) == 2)
  {
    *(_DWORD *)((char *)v21 + 18) = (v9 << 16) | 2;
    int8x8_t v10 = (int8x8_t)a3[1];
  }
LABEL_70:
  if (!*(void *)&v10) {
    goto LABEL_118;
  }
  uint8x8_t v24 = (uint8x8_t)vcnt_s8(v10);
  v24.i16[0] = vaddlv_u8(v24);
  unint64_t v12 = v24.u32[0];
LABEL_72:
  if (v12 > 1)
  {
    uint64_t v25 = 71;
    if (*(void *)&v10 <= 0x47uLL) {
      uint64_t v25 = 0x47u % v10.u8[0];
    }
  }
  else
  {
    uint64_t v25 = (v10.i32[0] - 1) & 0x47;
  }
  v26 = *(uint64_t ***)(*a3 + 8 * v25);
  if (!v26) {
    goto LABEL_96;
  }
  uint8x8_t v27 = *v26;
  if (!v27) {
    goto LABEL_96;
  }
  if (v12 < 2)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 71)
      {
        if (*((_WORD *)v27 + 8) == 71) {
          goto LABEL_92;
        }
      }
      else if ((v29 & (*(void *)&v10 - 1)) != v25)
      {
        goto LABEL_94;
      }
      uint8x8_t v27 = (uint64_t *)*v27;
      if (!v27) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v28 = v27[1];
    if (v28 != 71)
    {
      if (v28 >= *(void *)&v10) {
        v28 %= *(void *)&v10;
      }
      if (v28 != v25) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (*((_WORD *)v27 + 8) != 71)
    {
LABEL_81:
      uint8x8_t v27 = (uint64_t *)*v27;
      if (!v27) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  if (*((unsigned char *)v27 + 18) == 2)
  {
    *(_DWORD *)((char *)v27 + 18) = (v9 << 16) | 2;
    int8x8_t v10 = (int8x8_t)a3[1];
  }
LABEL_94:
  if (!*(void *)&v10) {
    goto LABEL_118;
  }
  uint8x8_t v30 = (uint8x8_t)vcnt_s8(v10);
  v30.i16[0] = vaddlv_u8(v30);
  unint64_t v12 = v30.u32[0];
LABEL_96:
  if (v12 > 1)
  {
    uint64_t v31 = 72;
    if (*(void *)&v10 <= 0x48uLL) {
      uint64_t v31 = 0x48u % v10.u8[0];
    }
  }
  else
  {
    uint64_t v31 = (v10.i32[0] - 1) & 0x48;
  }
  uint64_t v32 = *(uint64_t ***)(*a3 + 8 * v31);
  if (v32)
  {
    uint64_t v33 = *v32;
    if (v33)
    {
      if (v12 < 2)
      {
        uint64_t v34 = *(void *)&v10 - 1;
        while (1)
        {
          uint64_t v36 = v33[1];
          if (v36 == 72)
          {
            if (*((_WORD *)v33 + 8) == 72) {
              goto LABEL_116;
            }
          }
          else if ((v36 & v34) != v31)
          {
            goto LABEL_118;
          }
          uint64_t v33 = (uint64_t *)*v33;
          if (!v33) {
            goto LABEL_118;
          }
        }
      }
      do
      {
        unint64_t v35 = v33[1];
        if (v35 == 72)
        {
          if (*((_WORD *)v33 + 8) == 72)
          {
LABEL_116:
            if (*((unsigned char *)v33 + 18) == 2) {
              *(_DWORD *)((char *)v33 + 18) = (v9 << 16) | 2;
            }
            break;
          }
        }
        else
        {
          if (v35 >= *(void *)&v10) {
            v35 %= *(void *)&v10;
          }
          if (v35 != v31) {
            break;
          }
        }
        uint64_t v33 = (uint64_t *)*v33;
      }
      while (v33);
    }
  }
LABEL_118:
  md::MapEngineMode::applyMapDataTypeSettings(a1, a2, a3);
}

uint64_t md::LabelRenderLayer::clearScene(md::LabelRenderLayer *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (md::LabelManager *)*((void *)this + 6);
  if (v2)
  {
    v4[0] = &unk_1EF56E5F8;
    v4[1] = v2;
    v4[2] = 0;
    uint64_t v5 = v4;
    md::LabelManager::queueCommand(v2, 19, 1, v4);
    if (v5 == v4)
    {
      (*(void (**)(void *))(v4[0] + 32))(v4);
    }
    else if (v5)
    {
      (*(void (**)(void))(*v5 + 40))();
    }
  }
  return md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::clear((uint64_t)this + 56);
}

void sub_1A19F161C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v13)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v7 = (void *)(a2 - 24);
      double v8 = *(double *)(a2 - 16);
      double v9 = *(double *)(a1 + 8);
      if (v8 == v9)
      {
        if (*(unsigned __int8 *)(a2 - 8) == *(unsigned __int8 *)(a1 + 16))
        {
          if (*v7 >= *(void *)a1) {
            return result;
          }
        }
        else if (!*(unsigned char *)(a2 - 8))
        {
          return result;
        }
      }
      else if (v8 >= v9)
      {
        return result;
      }
      long long v26 = *(_OWORD *)a1;
      uint64_t v27 = *(void *)(a1 + 16);
      char v28 = *(unsigned char *)(a2 - 8);
      *(_OWORD *)a1 = *(_OWORD *)v7;
      *(unsigned char *)(a1 + 16) = v28;
      *(unsigned char *)(a2 - 8) = v27;
      *(_OWORD *)uint64_t v7 = v26;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a1 + 24, a1 + 48, a3);
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (2)
  {
    double v15 = *(double *)(v11 + 8);
    double v16 = *(double *)(v10 + 8);
    if (v15 == v16)
    {
      int v17 = *(unsigned __int8 *)(v11 + 16);
      if (v17 == *(unsigned __int8 *)(v10 + 16))
      {
        if (*(void *)v11 >= *(void *)v10) {
          goto LABEL_10;
        }
      }
      else
      {
        if (!*(unsigned char *)(v11 + 16)) {
          goto LABEL_10;
        }
        int v17 = 1;
      }
    }
    else
    {
      if (v15 >= v16) {
        goto LABEL_10;
      }
      int v17 = *(unsigned __int8 *)(v11 + 16);
    }
    unint64_t v18 = *(void *)v11;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v10 + 16);
    uint64_t v14 = a1;
    if (v10 == a1) {
      goto LABEL_9;
    }
    uint64_t v19 = v12;
    if (!v17)
    {
      while (1)
      {
        uint64_t v23 = a1 + v19;
        uint8x8_t v24 = (unint64_t *)(a1 + v19 + 24);
        double v25 = *(double *)(a1 + v19 + 32);
        if (v15 == v25)
        {
          if (*(unsigned char *)(v23 + 40) || v18 >= *v24) {
            goto LABEL_33;
          }
        }
        else if (v15 >= v25)
        {
          goto LABEL_34;
        }
        v10 -= 24;
        *(_OWORD *)(v23 + 48) = *(_OWORD *)v24;
        *(unsigned char *)(v23 + 64) = *(unsigned char *)(a1 + v19 + 40);
        v19 -= 24;
        if (v19 == -48) {
          goto LABEL_8;
        }
      }
    }
    while (1)
    {
      uint64_t v20 = a1 + v19;
      uint64_t v21 = (unint64_t *)(a1 + v19 + 24);
      double v22 = *(double *)(a1 + v19 + 32);
      if (v15 != v22) {
        break;
      }
      if (v17 == *(unsigned __int8 *)(v20 + 40) && v18 >= *v21)
      {
LABEL_33:
        uint64_t v14 = v10;
        goto LABEL_9;
      }
LABEL_23:
      v10 -= 24;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)v21;
      *(unsigned char *)(v20 + 64) = *(unsigned char *)(a1 + v19 + 40);
      v19 -= 24;
      if (v19 == -48)
      {
LABEL_8:
        uint64_t v14 = a1;
        goto LABEL_9;
      }
    }
    if (v15 < v22) {
      goto LABEL_23;
    }
LABEL_34:
    uint64_t v14 = a1 + v19 + 48;
LABEL_9:
    *(void *)uint64_t v14 = v18;
    *(double *)(v14 + 8) = v15;
    *(unsigned char *)(v14 + 16) = v17;
    if (++v13 == 8) {
      return v11 + 24 == a2;
    }
LABEL_10:
    uint64_t v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a2, a3, a5);
  result.n128_u64[0] = *(void *)(a4 + 8);
  double v10 = *(double *)(a3 + 8);
  if (result.n128_f64[0] == v10)
  {
    if (*(unsigned __int8 *)(a4 + 16) == *(unsigned __int8 *)(a3 + 16))
    {
      if (*(void *)a4 >= *(void *)a3) {
        return result;
      }
    }
    else if (!*(unsigned char *)(a4 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v10)
  {
    return result;
  }
  __n128 result = *(__n128 *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  char v12 = *(unsigned char *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(unsigned char *)(a3 + 16) = v12;
  *(unsigned char *)(a4 + 16) = v11;
  *(__n128 *)a4 = result;
  result.n128_u64[0] = *(void *)(a3 + 8);
  double v13 = *(double *)(a2 + 8);
  if (result.n128_f64[0] == v13)
  {
    if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
    {
      if (*(void *)a3 >= *(void *)a2) {
        return result;
      }
    }
    else if (!*(unsigned char *)(a3 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v13)
  {
    return result;
  }
  __n128 result = *(__n128 *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  char v15 = *(unsigned char *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(unsigned char *)(a2 + 16) = v15;
  *(unsigned char *)(a3 + 16) = v14;
  *(__n128 *)a3 = result;
  result.n128_u64[0] = *(void *)(a2 + 8);
  double v16 = *(double *)(a1 + 8);
  if (result.n128_f64[0] == v16)
  {
    if (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(a1 + 16))
    {
      if (*(void *)a2 >= *(void *)a1) {
        return result;
      }
    }
    else if (!*(unsigned char *)(a2 + 16))
    {
      return result;
    }
LABEL_22:
    __n128 result = *(__n128 *)a1;
    uint64_t v17 = *(void *)(a1 + 16);
    char v18 = *(unsigned char *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = v18;
    *(unsigned char *)(a2 + 16) = v17;
    *(__n128 *)a2 = result;
    return result;
  }
  if (result.n128_f64[0] < v16) {
    goto LABEL_22;
  }
  return result;
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 result)
{
  result.n128_u64[0] = *(void *)(a2 + 8);
  double v4 = *(double *)(a1 + 8);
  if (result.n128_f64[0] != v4)
  {
    if (result.n128_f64[0] < v4) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  if (*(unsigned __int8 *)(a2 + 16) != *(unsigned __int8 *)(a1 + 16))
  {
    if (*(unsigned char *)(a2 + 16)) {
      goto LABEL_11;
    }
LABEL_6:
    double v5 = *(double *)(a3 + 8);
    if (v5 == result.n128_f64[0])
    {
      if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
      {
        if (*(void *)a3 >= *(void *)a2) {
          return result;
        }
      }
      else if (!*(unsigned char *)(a3 + 16))
      {
        return result;
      }
    }
    else if (v5 >= result.n128_f64[0])
    {
      return result;
    }
    __n128 result = *(__n128 *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    char v13 = *(unsigned char *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(unsigned char *)(a2 + 16) = v13;
    *(unsigned char *)(a3 + 16) = v12;
    *(__n128 *)a3 = result;
    result.n128_u64[0] = *(void *)(a2 + 8);
    double v14 = *(double *)(a1 + 8);
    if (result.n128_f64[0] == v14)
    {
      if (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(a1 + 16))
      {
        if (*(void *)a2 >= *(void *)a1) {
          return result;
        }
      }
      else if (!*(unsigned char *)(a2 + 16))
      {
        return result;
      }
    }
    else if (result.n128_f64[0] >= v14)
    {
      return result;
    }
    __n128 result = *(__n128 *)a1;
    uint64_t v16 = *(void *)(a1 + 16);
    char v17 = *(unsigned char *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = v17;
    *(unsigned char *)(a2 + 16) = v16;
    *(__n128 *)a2 = result;
    return result;
  }
  if (*(void *)a2 >= *(void *)a1) {
    goto LABEL_6;
  }
LABEL_11:
  double v6 = *(double *)(a3 + 8);
  if (v6 != result.n128_f64[0])
  {
    if (v6 >= result.n128_f64[0]) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (*(unsigned __int8 *)(a3 + 16) != *(unsigned __int8 *)(a2 + 16))
  {
    if (!*(unsigned char *)(a3 + 16)) {
      goto LABEL_16;
    }
LABEL_23:
    __n128 result = *(__n128 *)a1;
    uint64_t v10 = *(void *)(a1 + 16);
    char v11 = *(unsigned char *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(unsigned char *)(a1 + 16) = v11;
LABEL_35:
    *(unsigned char *)(a3 + 16) = v10;
    *(__n128 *)a3 = result;
    return result;
  }
  if (*(void *)a3 < *(void *)a2) {
    goto LABEL_23;
  }
LABEL_16:
  __n128 result = *(__n128 *)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v8;
  *(unsigned char *)(a2 + 16) = v7;
  *(__n128 *)a2 = result;
  result.n128_u64[0] = *(void *)(a3 + 8);
  double v9 = *(double *)(a2 + 8);
  if (result.n128_f64[0] != v9)
  {
    if (result.n128_f64[0] >= v9) {
      return result;
    }
    goto LABEL_34;
  }
  if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(void *)a3 < *(void *)a2) {
      goto LABEL_34;
    }
  }
  else if (*(unsigned char *)(a3 + 16))
  {
LABEL_34:
    __n128 result = *(__n128 *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
    char v15 = *(unsigned char *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(unsigned char *)(a2 + 16) = v15;
    goto LABEL_35;
  }
  return result;
}

void md::PassList::PassList(md::PassList *this, md::FrameGraphResourceRegistry *a2)
{
  *(void *)this = &unk_1EF553DD8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  operator new();
}

void sub_1A19F1DB4(_Unwind_Exception *a1)
{
  std::unique_ptr<ggl::RenderQueue>::~unique_ptr[abi:nn180100](v1);
  std::unique_ptr<md::FrameGraph>::~unique_ptr[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  double v4 = (void *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(v3);
  double v5 = (void *)gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(v3);
  double v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v61, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v59, v9, v4, v6, *(void *)(v9 + 32));
  if (v60 != v64)
  {
    char v11 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *char v11 = *v10;
      unint64_t v12 = *v10;
      unint64_t v13 = HIDWORD(*v10);
      unint64_t v14 = v12 >> 39;
      uint64_t v15 = v4[4];
      if (v12 >> 39 >= (v4[5] - v15) >> 3) {
        goto LABEL_17;
      }
      uint64_t v16 = *(void *)(v15 + 8 * v14);
      if (!v16) {
        goto LABEL_17;
      }
      unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F));
      uint64_t v19 = v4[7];
      uint64_t v18 = v4[8];
      if (v17 >= (v18 - v19) >> 3) {
        goto LABEL_17;
      }
      uint64_t v20 = v19 + 8 * v17;
      BOOL v21 = v20 != v18 && *(_DWORD *)(v20 + 4) == v13;
      if (v21) {
        double v22 = (md::FrameGraphBuilder **)(v4[10] + 8 * v17);
      }
      else {
LABEL_17:
      }
        double v22 = (md::FrameGraphBuilder **)v4[11];
      uint64_t v23 = v6[4];
      if (v14 < (v6[5] - v23) >> 3)
      {
        uint64_t v24 = *(void *)(v23 + 8 * v14);
        if (v24)
        {
          unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v12) & 0x7F));
          uint64_t v27 = v6[7];
          uint64_t v26 = v6[8];
          if (v25 < (v26 - v27) >> 3)
          {
            uint64_t v28 = v27 + 8 * v25;
            if (v28 != v26 && *(_DWORD *)(v28 + 4) == v13) {
              break;
            }
          }
        }
      }
      uint8x8_t v30 = (uint64_t *)v6[11];
      uint64_t v31 = *v22;
      if (*v22) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v32 = *v30;
      if (*v30)
      {
        if (*(unsigned char *)(v32 + 72)) {
          *(unsigned char *)(v32 + 72) = 0;
        }
        MEMORY[0x1A6239270]();
      }
      uint64_t v33 = *(void **)(a1 + 8);
      uint64_t v34 = *v11;
      uint64_t v66 = (void (**)(void **))&unk_1EF526888;
      uint64_t v67 = v34;
      uint64_t v73 = &v70;
      uint64_t v69 = (void **)&v66;
      int8x8_t v70 = &unk_1EF526888;
      uint64_t v71 = v34;
      int v74 = 1;
      ecs2::Runtime::queueCommand(v33, (uint64_t)&v70);
      if (v74 != -1) {
        ((void (*)(char *, void **))off_1EF5911E0[v74])(&v65, &v70);
      }
      int v74 = -1;
      if (v69 == (void **)&v66)
      {
        v66[4]((void **)&v66);
      }
      else if (v69)
      {
        (*((void (**)(void))*v69 + 5))();
      }
      unint64_t v35 = *(void **)(a1 + 8);
      uint64_t v36 = *v11;
      uint64_t v66 = (void (**)(void **))&unk_1EF5269A8;
      uint64_t v67 = v36;
      uint64_t v73 = &v70;
      uint64_t v69 = (void **)&v66;
      int8x8_t v70 = &unk_1EF5269A8;
      uint64_t v71 = v36;
      int v74 = 1;
      ecs2::Runtime::queueCommand(v35, (uint64_t)&v70);
      if (v74 != -1) {
        ((void (*)(char *, void **))off_1EF5911E0[v74])(&v65, &v70);
      }
      int v74 = -1;
      if (v69 == (void **)&v66)
      {
        v66[4]((void **)&v66);
      }
      else if (v69)
      {
        (*((void (**)(void))*v69 + 5))();
      }
      unint64_t v37 = *(void **)(a1 + 8);
      unint64_t v38 = HIDWORD(*v11);
      uint64_t v39 = *v11 << 32;
      uint64_t v66 = (void (**)(void **))&unk_1EF523708;
      uint64_t v67 = v39;
      int v68 = v38;
      uint64_t v73 = &v70;
      uint64_t v69 = (void **)&v66;
      int8x8_t v70 = &unk_1EF523708;
      uint64_t v71 = v39;
      int v72 = v38;
      int v74 = 0;
      ecs2::Runtime::queueCommand(v37, (uint64_t)&v70);
      if (v74 != -1) {
        ((void (*)(char *, void **))off_1EF58FA08[v74])(&v65, &v70);
      }
      int v74 = -1;
      uint64_t result = (uint64_t)v69;
      if (v69 == (void **)&v66)
      {
        uint64_t result = ((uint64_t (*)(void **))v66[4])((void **)&v66);
      }
      else if (v69)
      {
        uint64_t result = (*((uint64_t (**)(void))*v69 + 5))();
      }
      uint64_t v41 = v64;
      uint64_t v10 = *(unint64_t **)(v61 + 32);
      if (++v64 != v10)
      {
        uint64_t v42 = v62[4];
        unint64_t v43 = (v62[5] - v42) >> 3;
        uint64_t v44 = v41 + 2;
        while (1)
        {
          unint64_t v45 = *((unsigned int *)v44 - 1);
          unint64_t v46 = v45 >> 7;
          if (v45 >> 7 < v43)
          {
            uint64_t v47 = *(void *)(v42 + 8 * v46);
            if (v47)
            {
              unint64_t v48 = *(unsigned __int16 *)(v47 + 2 * (v45 & 0x7F));
              uint64_t v49 = v62[7];
              uint64_t result = v62[8];
              if (v48 < (result - v49) >> 3)
              {
                uint64_t v50 = v49 + 8 * v48;
                if (v50 != result && *(_DWORD *)(v50 + 4) == v45)
                {
                  uint64_t v52 = v63[4];
                  uint64_t result = v63[5] - v52;
                  if (v46 < result >> 3)
                  {
                    uint64_t v53 = *(void *)(v52 + 8 * v46);
                    if (v53)
                    {
                      unint64_t v54 = *(unsigned __int16 *)(v53 + 2 * (v45 & 0x7F));
                      uint64_t v56 = v63[7];
                      uint64_t v55 = v63[8];
                      uint64_t result = v55 - v56;
                      if (v54 < (v55 - v56) >> 3)
                      {
                        uint64_t v57 = v56 + 8 * v54;
                        if (v57 != v55 && *(_DWORD *)(v57 + 4) == v45) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v64 = v44;
          BOOL v21 = v44++ == v10;
          if (v21) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v44 - 1;
      }
LABEL_9:
      if (v60 == v10) {
        goto LABEL_73;
      }
    }
    uint8x8_t v30 = (uint64_t *)(v6[10] + 8 * v25);
    uint64_t v31 = *v22;
    if (!*v22) {
      goto LABEL_27;
    }
LABEL_26:
    md::FrameGraphBuilder::~FrameGraphBuilder(v31);
    MEMORY[0x1A6239270]();
    goto LABEL_27;
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  char v11 = (uint64_t *)result;
LABEL_73:
  *char v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void md::FrameGraphBuilder::~FrameGraphBuilder(md::FrameGraphBuilder *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 17);
    double v4 = (void *)*((void *)this + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      double v4 = (void *)*((void *)this + 16);
    }
    *((void *)this + 17) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)*((void *)this + 13);
  if (v7)
  {
    do
    {
      unint64_t v14 = (void *)*v7;
      uint64_t v15 = v7[3];
      v7[3] = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      operator delete(v7);
      uint64_t v7 = v14;
    }
    while (v14);
  }
  uint64_t v8 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 8);
  if (v9)
  {
    do
    {
      uint64_t v16 = (void *)*v9;
      unint64_t v17 = (void *)v9[4];
      if (v17)
      {
        v9[5] = v17;
        operator delete(v17);
      }
      operator delete(v9);
      uint64_t v9 = v16;
    }
    while (v16);
  }
  uint64_t v10 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v10) {
    operator delete(v10);
  }
  char v11 = (void *)*((void *)this + 3);
  if (v11)
  {
    unint64_t v12 = (void *)*((void *)this + 4);
    unint64_t v13 = (void *)*((void *)this + 3);
    if (v12 != v11)
    {
      do
      {
        uint64_t v19 = *--v12;
        uint64_t v18 = v19;
        *unint64_t v12 = 0;
        if (v19)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v18 + 72));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v18 + 48));
          MEMORY[0x1A6239270](v18, 0x1070C4044CBF76DLL);
        }
      }
      while (v12 != v11);
      unint64_t v13 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v11;
    operator delete(v13);
  }
  uint64_t v20 = *(void **)this;
  if (*(void *)this)
  {
    BOOL v21 = (void *)*((void *)this + 1);
    double v22 = *(void **)this;
    if (v21 != v20)
    {
      do
      {
        uint64_t v24 = *--v21;
        uint64_t v23 = v24;
        *BOOL v21 = 0;
        if (v24)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v23 + 112));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v23 + 88));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v23 + 64));
          if (*(char *)(v23 + 47) < 0) {
            operator delete(*(void **)(v23 + 24));
          }
          MEMORY[0x1A6239270](v23, 0x1032C4041C7693DLL);
        }
      }
      while (v21 != v20);
      double v22 = *(void **)this;
    }
    *((void *)this + 1) = v20;
    operator delete(v22);
  }
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)4>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::TileType>(v2);
  uint64_t v7 = gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  uint64_t v8 = gdc::Registry::storage<md::ls::PendingProcessingShadow>(v2);
  uint64_t v9 = gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::AssociationHandle>(v2);
  gdc::Registry::storage<md::ls::HasMeshHandle>(v2);
  gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::IndexRange>(v2);
  gdc::Registry::storage<md::ls::NormalsHandle>(v2);
  gdc::Registry::storage<md::ls::InstanceTransformHandle>(v2);
  gdc::Registry::storage<md::ls::UVsHandle>(v2);
  gdc::Registry::storage<md::ls::NeedsZBias>(v2);
  gdc::Registry::storage<md::ls::InstanceCount>(v2);
  gdc::Registry::storage<md::ls::ElevationHandle>(v2);
  gdc::Registry::storage<md::ls::IsMercator>(v2);
  gdc::Registry::storage<md::ls::PreserveHeight>(v2);
  gdc::Registry::storage<md::ls::SharedUniqueID>(v2);
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    uint64_t v10 = v3 + 32;
  }
  else {
    uint64_t v10 = v4 + 32;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v5 + 32;
  }
  unint64_t v27 = *(void *)(v6 + 64) - *(void *)(v6 + 56);
  if (v27 < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v6 + 32;
  }
  unint64_t v26 = *(void *)(v7 + 64) - *(void *)(v7 + 56);
  if (v26 < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v7 + 32;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v8 + 32;
  }
  if (*(void *)(v9 + 64) - *(void *)(v9 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v9 + 32;
  }
  v28[0] = v10;
  v28[1] = v3;
  v28[2] = v4;
  v28[3] = v5;
  v28[4] = v6;
  v28[5] = v7;
  v28[6] = v8;
  v28[7] = v9;
  unint64_t v12 = *(void **)(v10 + 24);
  char v11 = *(void **)(v10 + 32);
  uint64_t v29 = v12;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v28))
  {
    unint64_t v13 = v12 + 1;
    do
    {
      unint64_t v12 = v13;
      uint64_t v29 = v13;
      if (v13 == v11) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v28);
      unint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v16 = result;
  if (v17 != v12)
  {
    *uint64_t result = *v12;
    uint64_t v18 = **(void **)(a1 + 8);
    uint64_t v19 = *(void **)v18;
    uint64_t v20 = *(void **)(v18 + 8);
    if (v19 != v20)
    {
      while (*v19 != 0x41D4E9297E100630)
      {
        v19 += 5;
        if (v19 == v20) {
          goto LABEL_28;
        }
      }
    }
    if (v19 != v20)
    {
      BOOL v21 = (std::__shared_weak_count *)v19[4];
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v21->__on_zero_shared)(v21, 0x41D4E9297E100630);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
LABEL_28:
    double v22 = *(void **)(a1 + 8);
    uint64_t v23 = HIDWORD(*v16);
    uint64_t v24 = *v16 << 32;
    v31[0] = &unk_1EF524368;
    v31[1] = v24;
    LODWORD(v32) = v23;
    uint64_t v36 = v34;
    uint64_t v33 = v31;
    v34[0] = &unk_1EF524368;
    v34[1] = v24;
    LODWORD(v35) = v23;
    int v37 = 0;
    ecs2::Runtime::queueCommand(v22, (uint64_t)v34);
    if (v37 != -1) {
      ((void (*)(char *, void *))off_1EF591178[v37])(&v30, v34);
    }
    int v37 = -1;
    if (v33 == v31)
    {
      (*(void (**)(void *))(v31[0] + 32))(v31);
    }
    else if (v33)
    {
      (*(void (**)(void))(*v33 + 40))();
    }
    gdc::Registry::create(*(gdc::Registry **)(*(void *)(a1 + 8) + 8));
  }
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::IsMercator>(int8x8_t *a1)
{
  uint64_t v10 = 0x237F9D3BCC905318;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x237F9D3BCC905318;
    if (*(void *)&v1 <= 0x237F9D3BCC905318uLL) {
      uint64_t v3 = 0x237F9D3BCC905318uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x237F9D3BCC905318;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x237F9D3BCC905318)
      {
        if (v5[2] == 0x237F9D3BCC905318) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x237F9D3BCC905318) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x237F9D3BCC905318) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F5210(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x6C7EE74910D42096;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6C7EE74910D42096;
    if (*(void *)&v1 <= 0x6C7EE74910D42096uLL) {
      uint64_t v3 = 0x6C7EE74910D42096uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6C7EE74910D42096;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6C7EE74910D42096)
      {
        if (v5[2] == 0x6C7EE74910D42096) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6C7EE74910D42096) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6C7EE74910D42096) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F5480(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UVsHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xCBB77B1CBD05D7C5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCBB77B1CBD05D7C5;
    if (*(void *)&v1 <= 0xCBB77B1CBD05D7C5) {
      unint64_t v3 = 0xCBB77B1CBD05D7C5 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCBB77B1CBD05D7C5;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCBB77B1CBD05D7C5)
      {
        if (v5[2] == 0xCBB77B1CBD05D7C5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCBB77B1CBD05D7C5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCBB77B1CBD05D7C5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F56F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::InstanceTransformHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xAF179EFD8A4C83D4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xAF179EFD8A4C83D4;
    if (*(void *)&v1 <= 0xAF179EFD8A4C83D4) {
      unint64_t v3 = 0xAF179EFD8A4C83D4 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xAF179EFD8A4C83D4;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xAF179EFD8A4C83D4)
      {
        if (v5[2] == 0xAF179EFD8A4C83D4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xAF179EFD8A4C83D4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xAF179EFD8A4C83D4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F5960(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ElevationHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xD443D3DCBB78491ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD443D3DCBB78491ALL;
    if (*(void *)&v1 <= 0xD443D3DCBB78491ALL) {
      unint64_t v3 = 0xD443D3DCBB78491ALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD443D3DCBB78491ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD443D3DCBB78491ALL)
      {
        if (v5[2] == 0xD443D3DCBB78491ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD443D3DCBB78491ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD443D3DCBB78491ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F5BD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::NormalsHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x3218EFD67197A145;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3218EFD67197A145;
    if (*(void *)&v1 <= 0x3218EFD67197A145uLL) {
      uint64_t v3 = 0x3218EFD67197A145uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3218EFD67197A145;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3218EFD67197A145)
      {
        if (v5[2] == 0x3218EFD67197A145) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3218EFD67197A145) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3218EFD67197A145) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F5E40(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::AssociationHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x523816724122CCE2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x523816724122CCE2;
    if (*(void *)&v1 <= 0x523816724122CCE2uLL) {
      uint64_t v3 = 0x523816724122CCE2uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x523816724122CCE2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x523816724122CCE2)
      {
        if (v5[2] == 0x523816724122CCE2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x523816724122CCE2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x523816724122CCE2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F60B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MeshLayerTypeV>(int8x8_t *a1)
{
  unint64_t v10 = 0xECC498AF223943D5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xECC498AF223943D5;
    if (*(void *)&v1 <= 0xECC498AF223943D5) {
      unint64_t v3 = 0xECC498AF223943D5 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xECC498AF223943D5;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xECC498AF223943D5)
      {
        if (v5[2] == 0xECC498AF223943D5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xECC498AF223943D5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xECC498AF223943D5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F6320(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::NeedsZBias>(int8x8_t *a1)
{
  uint64_t v10 = 0x499CE17DBD9A1615;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x499CE17DBD9A1615;
    if (*(void *)&v1 <= 0x499CE17DBD9A1615uLL) {
      uint64_t v3 = 0x499CE17DBD9A1615uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x499CE17DBD9A1615;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x499CE17DBD9A1615)
      {
        if (v5[2] == 0x499CE17DBD9A1615) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x499CE17DBD9A1615) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x499CE17DBD9A1615) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19F6590(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void VKTrafficIncidentSetSubtitleBlock(void *a1)
{
  id v4 = a1;
  {
    operator new();
  }
  uint64_t v1 = (std::__shared_mutex_base *)blockMutex(void)::lock;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)blockMutex(void)::lock);
  uint64_t v2 = [v4 copy];
  uint64_t v3 = (void *)_subtitleBlock;
  _subtitleBlock = v2;

  std::__shared_mutex_base::unlock(v1);
}

void sub_1A19F6688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  MEMORY[0x1A6239270](v10, 0x1000C40B98A05D4);

  _Unwind_Resume(a1);
}

void sub_1A19F6790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19F67F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvmEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(void *)(a1 + 64) = a1 + 40;
      id v4 = *(uint64_t (**)(void))(**(void **)(a2 + 64) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 64) = result;
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
  }
  return result;
}

void sub_1A19F69D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_1EF57AA10;
  geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v2 + 1, v1);
  return v2;
}

void sub_1A19F6C4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v164 = 0;
  v165 = 0;
  unint64_t v166 = 0;
  {
    uint64_t v1 = a1;
    if (v152) {
      operator new();
    }
  }
  uint64_t v3 = mdm::Allocator::instance(void)::alloc;
  uint64_t v167 = mdm::Allocator::instance(void)::alloc;
  uint64_t v5 = (void **)v2[13];
  id v4 = (void **)v2[14];
  uint64_t v6 = *(void **)(v1 + 16);
  if (v5 != v4)
  {
    while (*v5 != v6)
    {
      if (++v5 == v4)
      {
        uint64_t v5 = (void **)v2[14];
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v159 = v2 + 10;
    if ((void *)v2[9] != v2 + 10)
    {
      unint64_t v7 = (void *)v2[9];
      uint64_t v157 = v1;
      while (1)
      {
        v162 = v7;
        uint64_t v8 = v7 + 14;
        uint64_t v9 = v7[14];
        if (!v9) {
          goto LABEL_169;
        }
        uint64_t v10 = *(void *)(v157 + 16);
        v158 = (md::LabelCustomFeatureProvider *)(v7 + 5);
        unsigned int v11 = *(unsigned __int8 *)(v10 + 9);
        uint64_t v14 = v10 + 12;
        int v12 = *(_DWORD *)(v10 + 12);
        int v13 = *(_DWORD *)(v14 + 4);
        uint64_t v15 = v8;
        do
        {
          unsigned int v19 = *(unsigned __int8 *)(v9 + 33);
          if (v19 == v11)
          {
            int v20 = *(_DWORD *)(v9 + 40);
            BOOL v21 = v20 < v13;
            if (v20 == v13) {
              BOOL v21 = *(_DWORD *)(v9 + 36) < v12;
            }
            BOOL v16 = v21;
          }
          else
          {
            BOOL v16 = v19 < v11;
          }
          BOOL v17 = !v16;
          if (v16) {
            uint64_t v18 = (uint64_t *)(v9 + 8);
          }
          else {
            uint64_t v18 = (uint64_t *)v9;
          }
          if (v17) {
            uint64_t v15 = (void *)v9;
          }
          uint64_t v9 = *v18;
        }
        while (*v18);
        if (v15 == v8) {
          goto LABEL_169;
        }
        unsigned int v22 = *((unsigned __int8 *)v15 + 33);
        if (v11 == v22)
        {
          int v23 = *((_DWORD *)v15 + 10);
          if (v13 == v23)
          {
            if (v12 >= *((_DWORD *)v15 + 9)) {
              goto LABEL_34;
            }
          }
          else if (v13 >= v23)
          {
LABEL_34:
            if (!*((unsigned char *)v15 + 176))
            {
              if (*((unsigned char *)v162 + 280))
              {
                uint64_t v24 = (md::LabelClusterProvider *)v162[34];
                v163 = v24;
                if (!*((unsigned char *)v24 + 128))
                {
                  md::LabelClusterProvider::initializeSourceAnnotations(v24);
                  unint64_t v25 = operator new(0x68uLL);
                  v25[1] = 0;
                  v25[2] = 0;
                  *unint64_t v25 = &unk_1EF580218;
                  v25[3] = &unk_1EF536320;
                  v25[4] = v163;
                  v25[6] = 0;
                  v25[7] = 0;
                  v25[5] = 0;
                  {
                    operator new();
                  }
                  v25[8] = mdm::Allocator::instance(void)::alloc;
                  v25[9] = 0;
                  v25[10] = 0;
                  v25[11] = 0;
                  {
                    operator new();
                  }
                  v25[12] = mdm::Allocator::instance(void)::alloc;
                  *((void *)v163 + 14) = v25 + 3;
                  unint64_t v26 = (std::__shared_weak_count *)*((void *)v163 + 15);
                  v156 = (char *)v163 + 112;
                  *((void *)v163 + 15) = v25;
                  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                    std::__shared_weak_count::__release_weak(v26);
                  }
                  uint64_t v27 = *((void *)v163 + 14);
                  uint64_t v153 = *((void *)v163 + 2);
                  obuint64_t j = *((id *)v163 + 7);
                  unsigned int v28 = [obj count];
                  uint64_t v29 = *(void *)(v27 + 16);
                  uint64_t v154 = 8 * v28;
                  unint64_t v155 = v28;
                  if (v28 > (unint64_t)((*(void *)(v27 + 32) - v29) >> 3))
                  {
                    uint64_t v30 = *(void *)(v27 + 24);
                    uint64_t v31 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v27 + 40) + 16))(*(void *)(v27 + 40), v154, 8);
                    uint64_t v32 = v30 - v29;
                    unint64_t v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v34 = v31 + 8 * v155;
                    uint64_t v35 = *(char **)(v27 + 16);
                    uint64_t v36 = *(char **)(v27 + 24);
                    if (v36 == v35)
                    {
                      *(void *)(v27 + 16) = v33;
                      *(void *)(v27 + 24) = v33;
                      uint64_t v43 = *(void *)(v27 + 32);
                      *(void *)(v27 + 32) = v34;
                    }
                    else
                    {
                      unint64_t v37 = v36 - v35 - 8;
                      if (v37 <= 0x77)
                      {
                        unint64_t v38 = v33;
                        goto LABEL_56;
                      }
                      BOOL v44 = (unint64_t)&v36[-(v37 & 0xFFFFFFFFFFFFFFF8) - 8] >= v33
                         || (v32 & 0xFFFFFFFFFFFFFFF8) - (v37 & 0xFFFFFFFFFFFFFFF8) + v31 - 8 >= (unint64_t)v36;
                      unint64_t v38 = v33;
                      if (!v44) {
                        goto LABEL_206;
                      }
                      uint64_t v45 = v32 >> 3;
                      uint64_t v46 = (v37 >> 3) + 1;
                      uint64_t v47 = (_OWORD *)(v31 + 8 * v45 - 16);
                      unint64_t v48 = v36 - 32;
                      uint64_t v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v51 = *(_OWORD *)v48;
                        long long v50 = *((_OWORD *)v48 + 1);
                        *(_OWORD *)unint64_t v48 = 0uLL;
                        *((_OWORD *)v48 + 1) = 0uLL;
                        v48 -= 32;
                        *(v47 - 1) = v51;
                        *uint64_t v47 = v50;
                        v47 -= 2;
                        v49 -= 4;
                      }
                      while (v49);
                      unint64_t v38 = v33 - 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
                      v36 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_206:
                        do
                        {
LABEL_56:
                          uint64_t v52 = *((void *)v36 - 1);
                          v36 -= 8;
                          *(void *)uint64_t v36 = 0;
                          *(void *)(v38 - 8) = v52;
                          v38 -= 8;
                        }
                        while (v36 != v35);
                      }
                      uint64_t v36 = *(char **)(v27 + 16);
                      uint64_t v53 = *(char **)(v27 + 24);
                      *(void *)(v27 + 16) = v38;
                      *(void *)(v27 + 24) = v33;
                      uint64_t v43 = *(void *)(v27 + 32);
                      *(void *)(v27 + 32) = v34;
                      while (v53 != v36)
                      {
                        uint64_t v55 = *((void *)v53 - 1);
                        v53 -= 8;
                        uint64_t v54 = v55;
                        *(void *)uint64_t v53 = 0;
                        if (v55) {
                          (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
                        }
                      }
                    }
                    if (v36) {
                      (*(void (**)(void, char *, uint64_t))(**(void **)(v27 + 40) + 40))(*(void *)(v27 + 40), v36, v43 - (void)v36);
                    }
                  }
                  v170 = 0;
                  v171 = 0;
                  v172 = 0;
                  {
                    operator new();
                  }
                  uint64_t v173 = mdm::Allocator::instance(void)::alloc;
                  if (v155)
                  {
                    v170 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                           + 16))(mdm::Allocator::instance(void)::alloc, v154, 8);
                    v171 = v170;
                    v172 = &v170[v155];
                  }
                  long long v183 = 0u;
                  long long v184 = 0u;
                  long long v181 = 0u;
                  long long v182 = 0u;
                  id obja = obj;
                  if ([obja countByEnumeratingWithState:&v181 objects:&v176 count:16])
                  {
                    objc_msgSend(**((id **)&v181 + 1), "feature", v153);
                    [(id)objc_claimAutoreleasedReturnValue() pointFeature];
                    operator new();
                  }

                  uint64_t v56 = *(void *)(v27 + 48);
                  if (v155 > (*(void *)(v27 + 64) - v56) >> 3)
                  {
                    uint64_t v57 = *(void *)(v27 + 56);
                    uint64_t v58 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v27 + 72) + 16))(*(void *)(v27 + 72), v154, 8);
                    uint64_t v59 = v57 - v56;
                    unint64_t v60 = v58 + ((v57 - v56) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v61 = v58 + 8 * v155;
                    uint64_t v62 = *(char **)(v27 + 48);
                    uint64_t v63 = *(char **)(v27 + 56);
                    if (v63 == v62)
                    {
                      *(void *)(v27 + 48) = v60;
                      *(void *)(v27 + 56) = v60;
                      uint64_t v66 = *(void *)(v27 + 64);
                      *(void *)(v27 + 64) = v61;
                    }
                    else
                    {
                      unint64_t v64 = v63 - v62 - 8;
                      if (v64 <= 0x77)
                      {
                        unint64_t v65 = v60;
                        goto LABEL_185;
                      }
                      BOOL v134 = (unint64_t)&v63[-(v64 & 0xFFFFFFFFFFFFFFF8) - 8] >= v60
                          || (v59 & 0xFFFFFFFFFFFFFFF8) - (v64 & 0xFFFFFFFFFFFFFFF8) + v58 - 8 >= (unint64_t)v63;
                      unint64_t v65 = v60;
                      if (!v134) {
                        goto LABEL_207;
                      }
                      uint64_t v135 = v59 >> 3;
                      uint64_t v136 = (v64 >> 3) + 1;
                      v137 = (_OWORD *)(v58 + 8 * v135 - 16);
                      v138 = v63 - 32;
                      uint64_t v139 = v136 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v141 = *(_OWORD *)v138;
                        long long v140 = *((_OWORD *)v138 + 1);
                        *(_OWORD *)v138 = 0uLL;
                        *((_OWORD *)v138 + 1) = 0uLL;
                        v138 -= 32;
                        *(v137 - 1) = v141;
                        _OWORD *v137 = v140;
                        v137 -= 2;
                        v139 -= 4;
                      }
                      while (v139);
                      unint64_t v65 = v60 - 8 * (v136 & 0x3FFFFFFFFFFFFFFCLL);
                      v63 -= 8 * (v136 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v136 != (v136 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_207:
                        do
                        {
LABEL_185:
                          uint64_t v142 = *((void *)v63 - 1);
                          v63 -= 8;
                          *(void *)uint64_t v63 = 0;
                          *(void *)(v65 - 8) = v142;
                          v65 -= 8;
                        }
                        while (v63 != v62);
                      }
                      uint64_t v63 = *(char **)(v27 + 48);
                      v143 = *(char **)(v27 + 56);
                      *(void *)(v27 + 48) = v65;
                      *(void *)(v27 + 56) = v60;
                      uint64_t v66 = *(void *)(v27 + 64);
                      *(void *)(v27 + 64) = v61;
                      while (v143 != v63)
                      {
                        uint64_t v145 = *((void *)v143 - 1);
                        v143 -= 8;
                        uint64_t v144 = v145;
                        *(void *)v143 = 0;
                        if (v145) {
                          (*(void (**)(uint64_t))(*(void *)v144 + 8))(v144);
                        }
                      }
                    }
                    if (v63) {
                      (*(void (**)(void, char *, uint64_t))(**(void **)(v27 + 72) + 40))(*(void *)(v27 + 72), v63, v66 - (void)v63);
                    }
                  }
                  double v67 = fminf(*(float *)(*(void *)(*(void *)(v153 + 336) + 136)+ 20 * *(unsigned __int8 *)(*(void *)(v153 + 336) + 158)+ 12), 2.0)* 20.0;
                  int v168 = 1102053376;
                  double v169 = v67;
                  v174[0] = &unk_1EF571F58;
                  v174[1] = (id)v27;
                  v175 = v174;
                  md::LabelClusterBuilder::createClusters((uint64_t)&v168, (uint64_t)&v170, (uint64_t)v174);
                  if (v175 == v174)
                  {
                    (*((void (**)(id *))v174[0] + 4))(v174);
                    int v68 = v170;
                    if (v170) {
                      goto LABEL_79;
                    }
                  }
                  else
                  {
                    if (v175) {
                      (*((void (**)(void))*v175 + 5))();
                    }
                    int v68 = v170;
                    if (v170) {
LABEL_79:
                    }
                      (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)v173 + 40))(v173, v68, (char *)v172 - (char *)v68);
                  }

                  uint64_t v69 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:(uint64_t)(*(void *)(*(void *)v156 + 56) - *(void *)(*(void *)v156 + 48)) >> 3];
                  objc_storeStrong((id *)v163 + 10, v69);
                  int8x8_t v70 = v163;
                  uint64_t v71 = (void *)*((void *)v163 + 14);
                  int v72 = (void *)v71[6];
                  uint64_t v73 = (void *)v71[7];
                  if (v72 != v73)
                  {
                    do
                    {
                      if (*(unsigned char *)(*v72 + 80) == 1)
                      {
                        unsigned int v74 = *(_DWORD *)(*v72 + 176);
                        if (v74 >= 0x63) {
                          uint64_t v75 = 99;
                        }
                        else {
                          uint64_t v75 = v74;
                        }
                        id v76 = *((id *)v70 + 4);
                        id v176 = 0;
                        *(void *)&long long v181 = 0;
                        [v76 getClusterImageTextForClusterFeatureCount:v75 text:&v176 locale:&v181];
                        id v77 = v176;
                        id v78 = (id)v181;

                        id v79 = *((id *)v163 + 4);
                        v170 = 0;
                        v174[0] = 0;
                        [v79 getClusterAnnotationTextForClusterFeatureCount:v75 text:&v170 locale:v174];
                        v80 = v170;
                        id v81 = v174[0];

                        uint64_t v82 = [[VKClusterFeatureAnnotation alloc] initWithClusterNode:*v72 clusterTree:v156 baseStyle:(char *)v163 + 96 imageText:v77 annotationText:v80 annotationLocale:v81];
                        uint64_t v83 = *v72;
                        uint64_t v84 = v82;
                        v85 = v84;
                        if (v84) {
                          int8x8_t v86 = v84;
                        }
                        uint8x8_t v87 = *(void **)(v83 + 128);
                        *(void *)(v83 + 128) = v85;

                        [v69 addObject:v85];
                        int8x8_t v70 = v163;
                      }
                      ++v72;
                    }
                    while (v72 != v73);
                    uint64_t v71 = *(void **)v156;
                  }
                  uint64_t v88 = v71[2];
                  for (uint64_t i = v71[3]; v88 != i; v88 += 8)
                  {
                    v90 = (*(void (**)(void))(**(void **)v88 + 88))();
                    uint64_t v91 = v90;
                    if (*(unsigned char *)(*(void *)v88 + 80))
                    {
                      unint64_t v92 = [v90 feature];
                      uint64_t v93 = *(void *)[v92 feature];
                      int v94 = *(_DWORD *)(*(void *)v88 + 8);
                      *(unsigned char *)(v93 + 112) = 1;
                      *(_DWORD *)(v93 + 76) = v94;
                    }
                    objc_msgSend(v69, "addObject:", v91, v153);
                  }
                  *((unsigned char *)v163 + 128) = 1;
                }
                uint64_t v42 = (NSArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
                long long v183 = 0u;
                long long v184 = 0u;
                long long v181 = 0u;
                long long v182 = 0u;
                id v95 = *((id *)v163 + 10);
                uint64_t v96 = [v95 countByEnumeratingWithState:&v181 objects:&v176 count:16];
                if (v96)
                {
                  uint64_t v97 = *(void *)v182;
                  do
                  {
                    for (uint64_t j = 0; j != v96; ++j)
                    {
                      if (*(void *)v182 != v97) {
                        objc_enumerationMutation(v95);
                      }
                      v99 = *(void **)(*((void *)&v181 + 1) + 8 * j);
                      v100 = objc_msgSend(v99, "feature", v153);
                      uint64_t v102 = [v100 pointFeature] + 192;
                      uint64_t v101 = *(md::LabelPoint **)v102;
                      if (*(void *)(v102 + 8) == *(void *)v102)
                      {
                        uint64_t v101 = (md::LabelPoint *)&md::LabelPoint::NullPoint(void)::kNullLabelPoint;
                        {
                          {
                            qword_1EB317748 = 0;
                            md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
                            *(_OWORD *)&qword_1EB317738 = 0u;
                            dword_1EB317750 = 2139095039;
                            word_1EB317754 = 256;
                            byte_1EB317756 = 1;
                          }
                          uint64_t v101 = (md::LabelPoint *)&md::LabelPoint::NullPoint(void)::kNullLabelPoint;
                        }
                      }
                      uint64_t v103 = (double *)md::LabelPoint::mercatorPoint(v101);
                      BOOL v104 = *v103 >= *((double *)v15 + 11) && *v103 < *((double *)v15 + 13);
                      if (v104
                        && ((double v105 = v103[1], v105 >= *((double *)v15 + 12))
                          ? (BOOL v106 = v105 < *((double *)v15 + 14))
                          : (BOOL v106 = 0),
                            v106))
                      {

                        [(NSArray *)v42 addObject:v99];
                      }
                      else
                      {
                      }
                    }
                    uint64_t v96 = [v95 countByEnumeratingWithState:&v181 objects:&v176 count:16];
                  }
                  while (v96);
                }
              }
              else
              {
                uint64_t v39 = v162[5];
                id v40 = (id)v162[11];
                uint64_t v41 = objc_msgSend(v40, "annotationsInMapRect:", *((double *)v15 + 7), *((double *)v15 + 8), *((double *)v15 + 9), *((double *)v15 + 10));
                md::LabelCustomFeatureSupport::filterAnnotations(v39, v41);
                uint64_t v42 = (NSArray *)objc_claimAutoreleasedReturnValue();
              }
              md::LabelCustomFeatureProvider::addAnnotationsToFeatureMap(v158, v42, 0);
              md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap(v158, (NSArray *)v15[20], 0);
              uint64_t v107 = [(NSArray *)v42 copy];
              uint64_t v108 = (void *)v15[20];
              v15[20] = v107;

              *((unsigned char *)v15 + 176) = 1;
            }
            long long v183 = 0u;
            long long v184 = 0u;
            long long v181 = 0u;
            long long v182 = 0u;
            id v109 = (id)v15[20];
            uint64_t v110 = [v109 countByEnumeratingWithState:&v181 objects:&v176 count:16];
            if (v110)
            {
              uint64_t v111 = *(void *)v182;
              uint64_t v112 = v162 + 31;
              do
              {
                uint64_t v113 = 0;
                do
                {
                  if (*(void *)v182 != v111) {
                    objc_enumerationMutation(v109);
                  }
                  id v114 = *(id *)(*((void *)&v181 + 1) + 8 * v113);
                  uint64_t v115 = v114;
                  uint64_t v116 = (void *)*v112;
                  if (*v112)
                  {
                    v117 = v162 + 31;
                    do
                    {
                      unint64_t v118 = v116[4];
                      BOOL v119 = v118 >= (unint64_t)v114;
                      if (v118 >= (unint64_t)v114) {
                        v120 = v116;
                      }
                      else {
                        v120 = v116 + 1;
                      }
                      if (v119) {
                        v117 = v116;
                      }
                      uint64_t v116 = (void *)*v120;
                    }
                    while (*v120);
                    if (v117 != v112 && (unint64_t)v114 >= v117[4])
                    {
                      uint64_t v121 = v117[5];
                      if (v121)
                      {
                        v122 = v165;
                        if ((unint64_t)v165 >= v166)
                        {
                          v124 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v164, (long long *)(v117 + 5));
                        }
                        else
                        {
                          if (v165)
                          {
                            void *v165 = v121;
                            uint64_t v123 = v117[6];
                            v122[1] = v123;
                            if (v123) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v123 + 8), 1uLL, memory_order_relaxed);
                            }
                          }
                          v124 = v122 + 2;
                        }
                        v165 = v124;
                        if (!*(_DWORD *)(v117[5] + 128))
                        {
                          v170 = 0;
                          v171 = 0;
                          v172 = 0;
                          {
                            operator new();
                          }
                          uint64_t v173 = mdm::Allocator::instance(void)::alloc;
                          v125 = v171;
                          if (v171 >= v172)
                          {
                            v127 = (uint64_t *)std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v170, (long long *)(v117 + 5));
                          }
                          else
                          {
                            if (v171)
                            {
                              uint64_t *v171 = v117[5];
                              uint64_t v126 = v117[6];
                              v125[1] = v126;
                              if (v126) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
                              }
                            }
                            v127 = v125 + 2;
                          }
                          v171 = v127;
                          md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(v162[6] + 296), &v170);
                          v128 = v170;
                          if (v170)
                          {
                            if (v127 != v170)
                            {
                              do
                              {
                                v129 = (std::__shared_weak_count *)*(v127 - 1);
                                if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                                  std::__shared_weak_count::__release_weak(v129);
                                }
                                v127 -= 2;
                              }
                              while (v127 != v128);
                              v127 = v170;
                            }
                            v171 = v128;
                            (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)v173 + 40))(v173, v127, (char *)v172 - (char *)v127);
                          }
                        }
                      }
                    }
                  }

                  ++v113;
                }
                while (v113 != v110);
                uint64_t v130 = [v109 countByEnumeratingWithState:&v181 objects:&v176 count:16];
                uint64_t v110 = v130;
              }
              while (v130);
            }
          }
        }
        else if (v11 >= v22)
        {
          goto LABEL_34;
        }
LABEL_169:
        v131 = v162;
        v132 = (void *)v162[1];
        if (v132)
        {
          do
          {
            v133 = v132;
            v132 = (void *)*v132;
          }
          while (v132);
        }
        else
        {
          do
          {
            v133 = (void *)v131[2];
            BOOL v17 = *v133 == (void)v131;
            v131 = v133;
          }
          while (!v17);
        }
        unint64_t v7 = v133;
        if (v133 == v159)
        {
          uint64_t v6 = *(void **)(v157 + 16);
          uint64_t v3 = v167;
          break;
        }
      }
    }
  }
  uint64_t v146 = v164;
  v147 = v165;
  id v176 = v6;
  uint64_t v177 = v164;
  unint64_t v148 = v166;
  v178 = v165;
  unint64_t v179 = v166;
  uint64_t v180 = v3;
  v165 = 0;
  unint64_t v166 = 0;
  uint64_t v164 = 0;
  *((void *)&v182 + 1) = 0;
  v149 = operator new(0x30uLL);
  void *v149 = &unk_1EF56F408;
  v149[1] = v6;
  v149[2] = v146;
  v149[3] = v147;
  v149[4] = v148;
  v149[5] = v3;
  v178 = 0;
  unint64_t v179 = 0;
  uint64_t v177 = 0;
  *((void *)&v182 + 1) = v149;
  md::LabelMapTile::queueCommand((uint64_t)v6, 4, &v181);
  uint64_t result = *((void *)&v182 + 1);
  if (*((long long **)&v182 + 1) == &v181) {
    return (*(uint64_t (**)(long long *))(v181 + 32))(&v181);
  }
  if (*((void *)&v182 + 1)) {
    return (*(uint64_t (**)(void))(**((void **)&v182 + 1) + 40))();
  }
  return result;
}

void sub_1A19F86DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::function<md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::~function(&a33);
  if (a29) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a32 + 40))(a32, a29, a31 - a29);
  }

  uint64_t v34 = a23;
  if (a23)
  {
    uint64_t v35 = a24;
    if (a24 != a23)
    {
      do
      {
        uint64_t v36 = *(std::__shared_weak_count **)(v35 - 8);
        if (v36)
        {
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v35 -= 16;
      }
      while (v35 != a23);
      uint64_t v34 = a23;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a26 + 40))(a26, v34, a25 - v34);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = __p[2];
  if (v2)
  {
    uint64_t v3 = __p[3];
    uint64_t v4 = __p[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = __p[2];
    }
    __p[3] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)__p[5] + 40))(__p[5], v4, __p[4] - v4);
  }
  operator delete(__p);
}

void *geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF55A098;
  a1[1] = 0;
  uint64_t v3 = (void *)MEMORY[0x1A6239EB0](*(void *)(a2 + 8));
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (void *)[v3 copy];
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = MEMORY[0x1A6239EB0](v5);
  unint64_t v7 = (void *)a1[1];
  a1[1] = v6;

  return a1;
}

void sub_1A19F8B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id md::LabelCustomFeatureSupport::filterAnnotations(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v20 = a2;
  objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v20, "count"));
  id v22 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 16) + 1672);
  BOOL v21 = v3;
  if (v3) {
    BOOL v4 = *(void *)&v3[34] != 0;
  }
  else {
    BOOL v4 = 0;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v5 = v20;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v24;
    if (v4)
    {
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v24 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          uint64_t v10 = [v9 feature];
          if ([v10 isPointFeature])
          {
            uint64_t v11 = [v10 venueID];
            uint64_t v12 = [v10 venueBuildingID];
            uint64_t v13 = [v10 venueLevelID];
            int v14 = [v10 venueFloorOrdinal];
            BOOL v15 = !v11 || v13 == 0;
            if (v15 || md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(v21, v12) == v14) {
              [v22 addObject:v9];
            }
          }
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v6);
    }
    else
    {
      do
      {
        for (uint64_t j = 0; j != v6; ++j)
        {
          if (*(void *)v24 != v7) {
            objc_enumerationMutation(v5);
          }
          BOOL v17 = *(void **)(*((void *)&v23 + 1) + 8 * j);
          uint64_t v18 = [v17 feature];
          if ([v18 isPointFeature]) {
            [v22 addObject:v17];
          }
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v6);
    }
  }

  return v22;
}

void sub_1A19F8D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t md::LabelPool::pruneCustomFeatureLabels(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 544);
  uint64_t v2 = (uint64_t *)(this + 552);
  if (v1 != (uint64_t *)(this + 552))
  {
    uint64_t v3 = this;
    do
    {
      BOOL v4 = (unsigned char *)v1[6];
      if (v4[820] || v4[1251] || (int v5 = atomic_load(v4 + 1297)) != 0)
      {
LABEL_8:
        uint64_t v6 = (uint64_t *)v1[1];
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (uint64_t *)v1[2];
            BOOL v8 = *v7 == (void)v1;
            uint64_t v1 = v7;
          }
          while (!v8);
        }
      }
      else
      {
        uint64_t v9 = v1[6];
        uint64_t v10 = *(uint64_t **)(v3 + 232);
        if (v10)
        {
          unint64_t v11 = *(void *)(*(void *)(v9 + 8) + 72);
          unsigned int v12 = *(_DWORD *)(v9 + 48);
          do
          {
            unint64_t v13 = v10[4];
            unsigned int v14 = *((_DWORD *)v10 + 10);
            BOOL v15 = v12 < v14;
            if (v11 != v13) {
              BOOL v15 = v11 < v13;
            }
            if (!v15)
            {
              BOOL v16 = v14 < v12;
              if (v11 == v13) {
                BOOL v17 = v16;
              }
              else {
                BOOL v17 = v13 < v11;
              }
              if (!v17) {
                goto LABEL_8;
              }
              ++v10;
            }
            uint64_t v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        atomic_store(0, (unsigned __int8 *)(v9 + 1242));
        unsigned __int8 v18 = atomic_load((unsigned __int8 *)(v9 + 1242));
        if ((v18 & 1) == 0) {
          *(void *)(v9 + 352) = 0;
        }
        unsigned int v19 = (uint64_t *)v1[1];
        id v20 = v1;
        if (v19)
        {
          do
          {
            uint64_t v7 = v19;
            unsigned int v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v7 = (uint64_t *)v20[2];
            BOOL v8 = *v7 == (void)v20;
            id v20 = v7;
          }
          while (!v8);
        }
        if (*(uint64_t **)(v3 + 544) == v1) {
          *(void *)(v3 + 544) = v7;
        }
        --*(void *)(v3 + 568);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 552), v1);
        BOOL v21 = (std::__shared_weak_count *)v1[7];
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        this = (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(v3 + 560) + 40))(*(void *)(v3 + 560), v1, 64);
      }
      uint64_t v1 = v7;
    }
    while (v7 != v2);
  }
  return this;
}

uint64_t std::__shared_ptr_emplace<md::Label>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void md::Label::~Label(md::Label *this)
{
  *(void *)this = &unk_1EF550AF0;
  *((void *)this + 5) = &unk_1EF550B48;
  if (*((unsigned char *)this + 483)) {
    *(unsigned char *)(*((void *)this + 57) + 285) = 1;
  }
  atomic_fetch_add(md::Label::_totalLabels, 0xFFFFFFFF);
  uint64_t v2 = *((void *)this + 154);
  *((void *)this + 154) = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1A6239270](v2, 0x20C40A4A59CD2);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 150);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = (md::LabelAnimator *)*((void *)this + 148);
  *((void *)this + 148) = 0;
  if (v5)
  {
    md::LabelAnimator::~LabelAnimator(v5);
    MEMORY[0x1A6239270]();
  }
  md::Label::{unnamed type#4}::~Label((void *)this + 105);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 89);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 87);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 87);
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  uint64_t v8 = *((void *)this + 85);
  *((void *)this + 85) = 0;
  if (v8) {
    MEMORY[0x1A6239270](v8, 0x1000C40C179455ELL);
  }
  uint64_t v9 = *((void *)this + 84);
  *((void *)this + 84) = 0;
  if (v9) {
    MEMORY[0x1A6239270](v9, 0x1000C4015B1EB14);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 48);
    if (!v11) {
      goto LABEL_29;
    }
  }
  else
  {
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 48);
    if (!v11) {
      goto LABEL_29;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_29:
  uint64_t v12 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  id v20 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    BOOL v21 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v21) {
      goto LABEL_51;
    }
  }
  else
  {
    BOOL v21 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v21) {
      goto LABEL_51;
    }
  }
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_51:
  *(void *)this = &unk_1EF554058;
  id v22 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

{
  uint64_t vars8;

  md::Label::~Label(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::PointLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *md::Label::{unnamed type#4}::~Label(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[32];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[24];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    BOOL v4 = (std::__shared_weak_count *)a1[22];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v4 = (std::__shared_weak_count *)a1[22];
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  uint64_t v5 = a1[20];
  a1[20] = 0;
  if (v5) {
    MEMORY[0x1A6239270](v5, 0x1000C40C179455ELL);
  }
  uint64_t v6 = a1[19];
  a1[19] = 0;
  if (v6) {
    MEMORY[0x1A6239270](v6, 0x1000C4015B1EB14);
  }
  return a1;
}

void md::LabelCollisionItem::~LabelCollisionItem(md::LabelCollisionItem *this)
{
}

void md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap(md::LabelCustomFeatureProvider *this, NSArray *a2, int a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  BOOL v4 = a2;
  uint64_t v5 = [(NSArray *)v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v23;
    uint64_t v7 = (char *)this + 208;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v22 + 1) + 8 * i);
        uint64_t v10 = v9;
        unint64_t v11 = *(void **)v7;
        if (*(void *)v7)
        {
          uint64_t v12 = (char *)this + 208;
          do
          {
            unint64_t v13 = v11[4];
            BOOL v14 = v13 >= (unint64_t)v9;
            if (v13 >= (unint64_t)v9) {
              uint64_t v15 = v11;
            }
            else {
              uint64_t v15 = v11 + 1;
            }
            if (v14) {
              uint64_t v12 = (char *)v11;
            }
            unint64_t v11 = (void *)*v15;
          }
          while (*v15);
          if (v12 != v7 && (unint64_t)v9 >= *((void *)v12 + 4))
          {
            int v16 = *((_DWORD *)v12 + 15);
            if (a3) {
              *((_DWORD *)v12 + 15) = --v16;
            }
            int v17 = *((_DWORD *)v12 + 14) - 1;
            *((_DWORD *)v12 + 14) = v17;
            if (v17 == v16)
            {
              uint64_t v18 = *((void *)v12 + 5);
              *(unsigned char *)(v18 + 144) = 0;
              int v19 = *(unsigned __int8 *)(v18 + 141);
              int v17 = v16;
              if (v19)
              {
                id v20 = (md::LabelManager *)*((void *)this + 1);
                v27[0] = &unk_1EF56F210;
                v27[1] = v20;
                uint64_t v28 = v27;
                md::LabelManager::queueCommand(v20, 61, 1, v27);
                if (v28 == v27)
                {
                  (*(void (**)(void *))(v27[0] + 32))(v27);
                }
                else if (v28)
                {
                  (*(void (**)(void))(*v28 + 40))();
                }
                int v17 = *((_DWORD *)v12 + 14);
              }
            }
            if (!v17)
            {
              (*(void (**)(void))(**((void **)v12 + 5) + 88))(*((void *)v12 + 5));
              std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::erase((uint64_t)this + 200, (uint64_t)v12);
            }
          }
        }
      }
      uint64_t v5 = [(NSArray *)v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v5);
  }
}

void sub_1A19F9918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::erase(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void **)(a2 + 8);
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      BOOL v4 = (void *)*v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = (void *)a2;
    do
    {
      uint64_t v5 = (void *)v6[2];
      BOOL v7 = *v5 == (void)v6;
      uint64_t v6 = v5;
    }
    while (!v7);
  }
  if (*(void *)a1 == a2) {
    *(void *)a1 = v5;
  }
  --*(void *)(a1 + 24);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)a2);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  id v9 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 40);
  return v9();
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    BOOL v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      BOOL v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 == v3)
  {
    void *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      BOOL v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      BOOL v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    BOOL v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      int v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_50;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      id v20 = (uint64_t *)v7[1];
      *BOOL v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14) {
        uint64_t result = v7;
      }
      BOOL v7 = *v14;
      int v16 = (void *)**v14;
      if (v16)
      {
LABEL_50:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    BOOL v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        BOOL v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *BOOL v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        int v16 = v7;
      }
      uint64_t v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      *uint64_t v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_26:
    BOOL v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    uint64_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_40:
      int v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      uint64_t v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        uint64_t v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_26;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    int v17 = v14[1];
    uint64_t v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *int v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    BOOL v7 = *(uint64_t **)(*v7 + 8);
    uint64_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_40;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_40;
  }
  int v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    uint64_t *v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    int v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  long long v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  *long long v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    BOOL v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      BOOL v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 == v3)
  {
    void *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      BOOL v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      BOOL v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      BOOL v7 = *(uint64_t **)v12;
    }
    int v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    id v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        id v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *id v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        int v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    BOOL v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    BOOL v13 = *(uint64_t **)(v12 + 8);
    BOOL v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *BOOL v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    BOOL v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  int v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    uint64_t *v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    int v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  long long v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *uint64_t v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t md::PointLabelFeature::resetCustomFeatureAnnotation(uint64_t this)
{
  return this;
}

void md::LabelClusterProvider::initializeSourceAnnotations(md::LabelClusterProvider *this)
{
  v44[16] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 129))
  {
    uint64_t v2 = *((void *)this + 1);
    id v3 = *((id *)this + 4);
    BOOL v4 = objc_msgSend(v3, "annotationsInMapRect:", *MEMORY[0x1E4F63F08], *(double *)(MEMORY[0x1E4F63F08] + 8), *(double *)(MEMORY[0x1E4F63F08] + 16), *(double *)(MEMORY[0x1E4F63F08] + 24));
    md::LabelCustomFeatureSupport::filterAnnotations(v2, v4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = v5;
    if (v5) {
      id v7 = v5;
    }
    int v8 = (void *)*((void *)this + 7);
    *((void *)this + 7) = v6;

    *((unsigned char *)this + 129) = 1;
    if (*((unsigned char *)this + 130) == 1)
    {
      uint64_t v9 = *(float **)(*(void *)(*(void *)(*((void *)this + 2) + 336) + 200) + 64);
      if (!v9) {
        operator new();
      }
      float v10 = *v9;
      if (*v9 >= 0.01)
      {
        float v39 = v9[1];
        uint64_t v11 = *(float **)(*((void *)this + 2) + 432);
        float v12 = v11[270];
        float v13 = v11[268];
        float v14 = v11[271];
        float v15 = v11[269];
        float v16 = v11[10];
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        id v17 = *((id *)this + 7);
        uint64_t v18 = [v17 countByEnumeratingWithState:&v40 objects:v44 count:16];
        if (v18)
        {
          uint64_t v19 = *(void *)v41;
          double v38 = (float)(fminf(v14 - v15, v12 - v13) / v16) * v10;
          do
          {
            for (uint64_t i = 0; i != v18; ++i)
            {
              if (*(void *)v41 != v19) {
                objc_enumerationMutation(v17);
              }
              BOOL v21 = objc_msgSend(*(id *)(*((void *)&v40 + 1) + 8 * i), "feature", *(void *)&v38);
              uint64_t v22 = [v21 pointFeature];

              id v23 = *(id *)(v22 + 240);
              uint64_t v24 = v23;
              if (v23)
              {
                [v23 southLat];
                double v26 = v25;
                [v24 westLng];
                double v28 = v27;
                long double v29 = tan(v26 * 0.00872664626 + 0.785398163);
                double v30 = log(v29);
                [v24 northLat];
                double v32 = v31;
                [v24 eastLng];
                double v34 = v33;
                long double v35 = tan(v32 * 0.00872664626 + 0.785398163);
                long double v36 = log(v35);
                float v37 = log2(v38 / (fmax((v34 - v28) * 0.00277777778, (v36 - v30) * 0.159154943) * 512.0));
                *(float *)(v22 + 80) = fmaxf(fminf(v39 + v37, 252.0), 0.0);
              }
            }
            uint64_t v18 = [v17 countByEnumeratingWithState:&v40 objects:v44 count:16];
          }
          while (v18);
        }
      }
    }
  }
}

void sub_1A19FA764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, ...)
{
  va_start(va, a14);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  if (a13 && !atomic_fetch_add(&a13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  if (a4)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a7 + 40))(a7, a4, a6 - a4);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t result = (void *)gdc::Registry::storage<md::ls::ShouldSkipRender>(a2);
  id v3 = result;
  if (result[29] && (BOOL v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      BOOL v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::RenderState>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::IndexRange>(v2);
  HasMesh = (void *)gdc::Registry::storage<md::ls::HasMeshHandle>(v2);
  uint64_t v7 = gdc::Registry::storage<md::ls::FunctionConstants>(v2);
  uint64_t v8 = (void *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  uint64_t v9 = (void *)gdc::Registry::storage<md::ls::InstanceCount>(v2);
  float v10 = (void *)gdc::Registry::storage<md::ls::StencilRefValueToUse>(v2);
  v122 = (void *)gdc::Registry::storage<md::ls::VisibilityTestResult>(v2);
  ShouldSkip = (void *)gdc::Registry::storage<md::ls::ShouldSkipRender>(v2);
  uint64_t v11 = gdc::Registry::storage<md::ls::RenderItemID>(v2);
  float v12 = (void *)v11;
  float v13 = (void *)(v11 + 32);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) < *(void *)(v11 + 64) - *(void *)(v11 + 56)) {
    float v13 = (void *)(v3 + 32);
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v13[4] - v13[3]) {
    float v13 = (void *)(v4 + 32);
  }
  if (v5[8] - v5[7] < v13[4] - v13[3]) {
    float v13 = v5 + 4;
  }
  if (HasMesh[8] - HasMesh[7] < v13[4] - v13[3]) {
    float v13 = HasMesh + 4;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < v13[4] - v13[3]) {
    float v13 = (void *)(v7 + 32);
  }
  v126[0] = v13;
  v126[1] = v11;
  v126[2] = v3;
  v126[3] = v4;
  v126[4] = v5;
  v126[5] = HasMesh;
  float v15 = (void *)v13[3];
  float v14 = (void *)v13[4];
  v126[6] = v7;
  v127 = v15;
  uint64_t v123 = v14;
  if (v14 == v15)
  {
    uint64_t v16 = a1;
  }
  else
  {
    uint64_t v16 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v126))
    {
      id v17 = v15 + 1;
      do
      {
        float v15 = v17;
        v127 = v17;
        if (v17 == v123) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v126);
        id v17 = v15 + 1;
      }
      while (!isValid);
    }
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v124 = (void *)result;
  if (v123 != v15)
  {
    BOOL v119 = HasMesh;
    v120 = v5;
    v117 = v9;
    unint64_t v118 = v8;
    uint64_t v115 = v12;
    uint64_t v116 = v10;
    do
    {
      void *v124 = *v15;
      unint64_t v20 = *v15;
      uint64_t v21 = HIDWORD(*v15);
      unint64_t v22 = *v15 >> 39;
      uint64_t v23 = v12[4];
      if (v22 < (v12[5] - v23) >> 3
        && (uint64_t v24 = *(void *)(v23 + 8 * v22)) != 0
        && (unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v27 = v12[7],
            uint64_t v26 = v12[8],
            v25 < (v26 - v27) >> 3)
        && ((uint64_t v28 = v27 + 8 * v25, v28 != v26) ? (v29 = *(_DWORD *)(v28 + 4) == v21) : (v29 = 0), v29))
      {
        uint64_t v30 = v12[11];
        uint64_t v31 = v12[10] + 24 * v25;
      }
      else
      {
        uint64_t v30 = v12[11];
        uint64_t v31 = v30;
      }
      if (v31 == v30) {
        double v32 = 0;
      }
      else {
        double v32 = (unint64_t *)v31;
      }
      uint64_t v33 = v8[4];
      if (v22 < (v8[5] - v33) >> 3
        && (uint64_t v34 = *(void *)(v33 + 8 * v22)) != 0
        && (unint64_t v35 = *(unsigned __int16 *)(v34 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v37 = v8[7],
            uint64_t v36 = v8[8],
            v35 < (v36 - v37) >> 3)
        && ((uint64_t v38 = v37 + 8 * v35, v38 != v36) ? (v39 = *(_DWORD *)(v38 + 4) == v21) : (v39 = 0), v39))
      {
        uint64_t v40 = v8[11];
        uint64_t v41 = v8[10] + 8 * v35;
      }
      else
      {
        uint64_t v40 = v8[11];
        uint64_t v41 = v40;
      }
      if (v41 == v40) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v41;
      }
      uint64_t v43 = v9[4];
      if (v22 < (v9[5] - v43) >> 3
        && (uint64_t v44 = *(void *)(v43 + 8 * v22)) != 0
        && (unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v47 = v9[7],
            uint64_t v46 = v9[8],
            v45 < (v46 - v47) >> 3)
        && ((uint64_t v48 = v47 + 8 * v45, v48 != v46) ? (v49 = *(_DWORD *)(v48 + 4) == v21) : (v49 = 0), v49))
      {
        uint64_t v50 = v9[11];
        uint64_t v51 = v9[10] + 8 * v45;
      }
      else
      {
        uint64_t v50 = v9[11];
        uint64_t v51 = v50;
      }
      if (v51 == v50) {
        uint64_t v52 = 0;
      }
      else {
        uint64_t v52 = (void *)v51;
      }
      uint64_t v53 = v10[4];
      if (v22 < (v10[5] - v53) >> 3
        && (uint64_t v54 = *(void *)(v53 + 8 * v22)) != 0
        && (unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v57 = v10[7],
            uint64_t v56 = v10[8],
            v55 < (v56 - v57) >> 3)
        && ((uint64_t v58 = v57 + 8 * v55, v58 != v56) ? (v59 = *(_DWORD *)(v58 + 4) == v21) : (v59 = 0), v59))
      {
        unint64_t v60 = v10[11];
        unint64_t v61 = v10[10] + v55;
      }
      else
      {
        unint64_t v60 = v10[11];
        unint64_t v61 = v60;
      }
      if (v61 == v60) {
        uint64_t v62 = 0;
      }
      else {
        uint64_t v62 = (unsigned __int8 *)v61;
      }
      uint64_t v63 = v5[4];
      v125 = v62;
      if (v22 < (v5[5] - v63) >> 3
        && (uint64_t v64 = *(void *)(v63 + 8 * v22)) != 0
        && (unint64_t v65 = *(unsigned __int16 *)(v64 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v67 = v5[7],
            uint64_t v66 = v5[8],
            v65 < (v66 - v67) >> 3)
        && ((uint64_t v68 = v67 + 8 * v65, v68 != v66) ? (v69 = *(_DWORD *)(v68 + 4) == v21) : (v69 = 0), v69))
      {
        uint64_t v70 = v5[11];
        uint64_t v71 = v5[10] + 16 * v65;
      }
      else
      {
        uint64_t v70 = v5[11];
        uint64_t v71 = v70;
      }
      if (v71 == v70) {
        int v72 = 0;
      }
      else {
        int v72 = (_OWORD *)v71;
      }
      uint64_t v73 = HasMesh[4];
      if (v22 < (HasMesh[5] - v73) >> 3
        && (uint64_t v74 = *(void *)(v73 + 8 * v22)) != 0
        && (unint64_t v75 = *(unsigned __int16 *)(v74 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v77 = HasMesh[7],
            uint64_t v76 = HasMesh[8],
            v75 < (v76 - v77) >> 3)
        && ((uint64_t v78 = v77 + 8 * v75, v78 != v76) ? (v79 = *(_DWORD *)(v78 + 4) == v21) : (v79 = 0), v79))
      {
        v80 = (void *)(HasMesh[10] + 8 * v75);
      }
      else
      {
        v80 = (void *)HasMesh[11];
      }
      uint64_t v81 = v122[4];
      if (v22 < (v122[5] - v81) >> 3
        && (uint64_t v82 = *(void *)(v81 + 8 * v22)) != 0
        && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v85 = v122[7],
            uint64_t v84 = v122[8],
            v83 < (v84 - v85) >> 3)
        && ((uint64_t v86 = v85 + 8 * v83, v86 != v84) ? (v87 = *(_DWORD *)(v86 + 4) == v21) : (v87 = 0), v87))
      {
        uint64_t v88 = (unsigned char *)v122[11];
        v89 = (unsigned char *)(v122[10] + v83);
      }
      else
      {
        uint64_t v88 = (unsigned char *)v122[11];
        v89 = v88;
      }
      if (v89 == v88) {
        v90 = 0;
      }
      else {
        v90 = v89;
      }
      uint64_t v91 = ShouldSkip[4];
      if (v22 < (ShouldSkip[5] - v91) >> 3
        && (uint64_t v92 = *(void *)(v91 + 8 * v22)) != 0
        && (unint64_t v93 = *(unsigned __int16 *)(v92 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v95 = ShouldSkip[7],
            uint64_t v94 = ShouldSkip[8],
            v93 < (v94 - v95) >> 3)
        && (uint64_t v96 = v95 + 8 * v93, v96 != v94)
        && *(_DWORD *)(v96 + 4) == v21)
      {
        unint64_t v97 = ShouldSkip[11];
        unint64_t v98 = ShouldSkip[10] + v93;
      }
      else
      {
        unint64_t v97 = ShouldSkip[11];
        unint64_t v98 = v97;
      }
      uint64_t v99 = **(void **)(v16 + 8);
      v100 = *(void **)v99;
      uint64_t v101 = *(void **)(v99 + 8);
      if (v100 != v101)
      {
        while (*v100 != 0x41D4E9297E100630)
        {
          v100 += 5;
          if (v100 == v101)
          {
            uint64_t v102 = v52;
            uint64_t v103 = (void *)v42;
            BOOL v104 = 0;
            if (v90) {
              goto LABEL_113;
            }
            goto LABEL_115;
          }
        }
      }
      uint64_t v102 = v52;
      uint64_t v103 = (void *)v42;
      if (v100 == v101)
      {
        BOOL v104 = 0;
        if (v90) {
          goto LABEL_113;
        }
      }
      else
      {
        BOOL v104 = (int8x8_t *)v100[3];
        double v105 = (std::__shared_weak_count *)v100[4];
        if (v105)
        {
          atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        uint64_t v16 = a1;
        if (v90)
        {
LABEL_113:
          BOOL v106 = *v90 != 0;
          goto LABEL_116;
        }
      }
LABEL_115:
      BOOL v106 = 1;
LABEL_116:
      uint64_t result = md::VKMRenderResourcesStore::getRenderItem(v104, *v32, v32[1]);
      *(_OWORD *)(result + 72) = *v72;
      *(void *)(result + 88) = 0;
      *(void *)(result + 96) = 1;
      *(void *)(result + 64) = *v80;
      *(void *)(result + 8) = v32[2];
      uint64_t v107 = v103;
      if (v125) {
        *(_DWORD *)(result + 40) = *v125;
      }
      float v12 = v115;
      float v10 = v116;
      if (v102) {
        *(void *)(result + 104) = *v102;
      }
      uint64_t v8 = v118;
      if (v107) {
        *(void *)(result + 48) = *v107;
      }
      BOOL v109 = (v98 == v97 || v98 == 0) && v106;
      uint64_t v5 = v120;
      uint64_t v9 = v117;
      if (v109)
      {
        uint64_t v110 = *(void **)(v16 + 8);
        uint64_t v111 = HIDWORD(*v124);
        uint64_t v112 = *v124 << 32;
        v129[0] = &unk_1EF521F20;
        v129[1] = v112;
        int v130 = v111;
        BOOL v134 = v132;
        v131 = v129;
        v132[0] = &unk_1EF521F20;
        v132[1] = v112;
        int v133 = v111;
        int v135 = 0;
        ecs2::Runtime::queueCommand(v110, (uint64_t)v132);
        if (v135 != -1) {
          ((void (*)(char *, void *))off_1EF590FF0[v135])(&v128, v132);
        }
        int v135 = -1;
        uint64_t result = (uint64_t)v131;
        if (v131 == v129)
        {
          uint64_t result = (*(uint64_t (**)(void *))(v129[0] + 32))(v129);
        }
        else if (v131)
        {
          uint64_t result = (*(uint64_t (**)(void))(*v131 + 40))();
        }
      }
      float v15 = v127;
      uint64_t v113 = *(void **)(v126[0] + 32);
      while (1)
      {
        v127 = ++v15;
        if (v15 == v113) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v126);
        if (result) {
          goto LABEL_21;
        }
      }
      float v15 = v113;
LABEL_21:
      HasMesh = v119;
    }
    while (v123 != v15);
  }
  void *v124 = 0xFFFFFFFF00000000;
  *(void *)(v16 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::VisibilityTestResult>(int8x8_t *a1)
{
  unint64_t v10 = 0x8D5EEF513BFB7EF4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8D5EEF513BFB7EF4;
    if (*(void *)&v1 <= 0x8D5EEF513BFB7EF4) {
      unint64_t v3 = 0x8D5EEF513BFB7EF4 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8D5EEF513BFB7EF4;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8D5EEF513BFB7EF4)
      {
        if (v5[2] == 0x8D5EEF513BFB7EF4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8D5EEF513BFB7EF4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8D5EEF513BFB7EF4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19FB3E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ShouldSkipRender>(int8x8_t *a1)
{
  uint64_t v10 = 0x22E5462B4C348FD9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x22E5462B4C348FD9;
    if (*(void *)&v1 <= 0x22E5462B4C348FD9uLL) {
      uint64_t v3 = 0x22E5462B4C348FD9uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x22E5462B4C348FD9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x22E5462B4C348FD9)
      {
        if (v5[2] == 0x22E5462B4C348FD9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x22E5462B4C348FD9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x22E5462B4C348FD9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19FB650(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StencilRefValueToUse>(int8x8_t *a1)
{
  unint64_t v10 = 0x9EC66CE0B60A2DFFLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9EC66CE0B60A2DFFLL;
    if (*(void *)&v1 <= 0x9EC66CE0B60A2DFFLL) {
      unint64_t v3 = 0x9EC66CE0B60A2DFFLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9EC66CE0B60A2DFFLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9EC66CE0B60A2DFFLL)
      {
        if (v5[2] == 0x9EC66CE0B60A2DFFLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9EC66CE0B60A2DFFLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9EC66CE0B60A2DFFLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19FB8C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19FBDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v15)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::IsMercator>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::IsOpaque>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  unint64_t v10 = (void *)v6;
  uint64_t v11 = (void *)(v6 + 32);
  if (v4[8] - v4[7] < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v11 = v4 + 4;
  }
  if (v5[8] - v5[7] >= v11[4] - v11[3]) {
    float v12 = v11;
  }
  else {
    float v12 = v5 + 4;
  }
  v83[0] = v12;
  v83[1] = v6;
  v83[2] = v4;
  v83[3] = v5;
  uint64_t v14 = (void *)v12[3];
  uint64_t v13 = (void *)v12[4];
  uint64_t v84 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83))
  {
    uint64_t v15 = v14 + 1;
    do
    {
      uint64_t v14 = v15;
      uint64_t v84 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83);
      uint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  id v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v10[4];
    if (v23 >= (v10[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v10[7];
    uint64_t v27 = v10[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v82 = 33 * v26;
      uint64_t v31 = v10[11];
      uint64_t v32 = v10[10] + v82;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v10[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v4[4], v23 < (v4[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v4[7], v37 = v4[8], v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      unint64_t v41 = v4[11];
      unint64_t v42 = v4[10] + v36;
    }
    else
    {
      unint64_t v41 = v4[11];
      unint64_t v42 = v41;
    }
    unint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v5[4];
    if (v23 < (v5[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v5[7];
        uint64_t v47 = v5[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    unint64_t v51 = v5[11];
    unint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      unint64_t v54 = 0;
    }
    else {
      unint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    uint64_t v56 = (void *)v12[4];
    unint64_t v20 = v14 + 1;
    uint64_t v84 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v10[4];
      uint64_t v59 = v10[7];
      uint64_t v58 = v10[8];
      uint64_t v60 = v4[4];
      uint64_t result = v4[7];
      uint64_t v61 = v4[8];
      uint64_t v62 = v5[4];
      uint64_t v64 = v5[7];
      uint64_t v63 = v5[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v10[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v4[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v5[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          unint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      uint64_t v56 = v20;
LABEL_14:
      uint64_t v84 = v20;
    }
    uint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  unint64_t v51 = v5[11];
  unint64_t v52 = v5[10] + v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsTransparent const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsTransparent const&>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::IsTransparent>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62) {
    goto LABEL_55;
  }
  float v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *float v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v6[7];
    uint64_t v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v56 = 33 * v18;
      uint64_t v23 = v6[11];
      uint64_t v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v6[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v4[7];
        uint64_t v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v4[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v62;
    uint64_t v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      uint64_t v39 = v60[4];
      unint64_t v40 = (v60[5] - v39) >> 3;
      unint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v60[7];
            uint64_t result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v61[4];
                uint64_t result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v61[7];
                    uint64_t v52 = v61[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v62 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v4[11];
  uint64_t v34 = v4[10] + 4 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  float v12 = (void *)result;
LABEL_56:
  *float v12 = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>>::~Model()
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19FC84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v15)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  IsNot = (void *)gdc::Registry::storage<md::ls::IsNotMercator>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (IsNot[8] - IsNot[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(IsNot + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, IsNot, *(void *)(v8 + 24));
  if (IsNot[8] - IsNot[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(IsNot + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, IsNot, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62) {
    goto LABEL_55;
  }
  float v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *float v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v6[7];
    uint64_t v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v56 = 33 * v18;
      uint64_t v23 = v6[11];
      uint64_t v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v6[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = IsNot[4];
    if (v15 < (IsNot[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = IsNot[7];
        uint64_t v29 = IsNot[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    unint64_t v33 = IsNot[11];
    unint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v62;
    uint64_t v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      uint64_t v39 = v60[4];
      unint64_t v40 = (v60[5] - v39) >> 3;
      unint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v60[7];
            uint64_t result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v61[4];
                uint64_t result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v61[7];
                    uint64_t v52 = v61[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v62 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11) {
      goto LABEL_56;
    }
  }
  unint64_t v33 = IsNot[11];
  unint64_t v34 = IsNot[10] + v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  float v12 = (void *)result;
LABEL_56:
  *float v12 = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::IsMercator>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62) {
    goto LABEL_55;
  }
  float v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *float v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v6[7];
    uint64_t v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v56 = 33 * v18;
      uint64_t v23 = v6[11];
      uint64_t v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v6[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v4[7];
        uint64_t v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    unint64_t v33 = v4[11];
    unint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v62;
    uint64_t v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      uint64_t v39 = v60[4];
      unint64_t v40 = (v60[5] - v39) >> 3;
      unint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v60[7];
            uint64_t result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v61[4];
                uint64_t result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v61[7];
                    uint64_t v52 = v61[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v62 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11) {
      goto LABEL_56;
    }
  }
  unint64_t v33 = v4[11];
  unint64_t v34 = v4[10] + v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  float v12 = (void *)result;
LABEL_56:
  *float v12 = 0xFFFFFFFF00000000;
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UseIdentityMatrix>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(void *)(v9 + 32));
  if (v44 == v48)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t result = *v11;
      unint64_t v12 = *v11;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), uint64_t v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 33 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      *(unsigned char *)(v23 + 32) = 1;
      uint64_t v24 = v48;
      uint64_t v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        uint64_t v25 = v46[4];
        unint64_t v26 = (v46[5] - v25) >> 3;
        uint64_t v27 = v24 + 2;
        while (1)
        {
          unint64_t v28 = *((unsigned int *)v27 - 1);
          unint64_t v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            uint64_t v30 = *(void *)(v25 + 8 * v29);
            if (v30)
            {
              unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              uint64_t v33 = v46[7];
              uint64_t v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                uint64_t v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == v28)
                {
                  uint64_t v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    uint64_t v37 = *(void *)(v36 + 8 * v29);
                    if (v37)
                    {
                      unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      uint64_t v39 = v47[7];
                      uint64_t v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        uint64_t v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == v28) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v48 = v27;
          BOOL v20 = v27++ == v11;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v66, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v64, v9, v6, v4, *(void *)(v9 + 32));
  if (v65 != v69)
  {
    uint64_t v11 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      unint64_t v13 = HIDWORD(*v10);
      unint64_t v14 = v12 >> 39;
      uint64_t v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * v14)) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v19 = v6[7],
            uint64_t v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((uint64_t v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == v13) : (v21 = 0), v21))
      {
        uint64_t v63 = 33 * v17;
        uint64_t v22 = v6[11];
        uint64_t v23 = v6[10] + v63;
      }
      else
      {
        uint64_t v22 = v6[11];
        uint64_t v23 = v22;
      }
      if (v23 == v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      uint64_t v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v14)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v29 = v4[7],
            uint64_t v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v13) : (v31 = 0), v31))
      {
        uint64_t v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        uint64_t v32 = (unint64_t *)v4[11];
      }
      uint64_t v33 = **(void **)(a1 + 8);
      uint64_t v34 = *(void **)v33;
      uint64_t v35 = *(void **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x41D4E9297E100630)
        {
          v34 += 5;
          if (v34 == v35) {
            goto LABEL_37;
          }
        }
      }
      if (v34 == v35)
      {
LABEL_37:
        uint64_t v37 = 0;
      }
      else
      {
        uint64_t v37 = (int8x8_t *)v34[3];
        uint64_t v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      uint64_t result = md::getCachedHandle<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,unsigned long,md::CachedKey<md::StyleEmissiveColorCacheKey>,std::hash<unsigned long>>(v37 + 330, *v32);
      uint64_t v70 = result;
      if (!result) {
        break;
      }
      int8x8_t v39 = v37[343];
      if (result >= (unint64_t)((uint64_t)(*(void *)&v37[344] - *(void *)&v39) >> 3)) {
        break;
      }
      uint64_t v40 = *(void *)(*(void *)&v39 + 8 * result);
      if (v40)
      {
        if (HIDWORD(result) != HIDWORD(v40)) {
          break;
        }
        int8x8_t v41 = v37[346];
        unint64_t v42 = (float *)(*(void *)&v41 + 24 * v40);
        if (v42 == (float *)v37[347] || *(void *)&v41 == 0) {
          break;
        }
        uint64_t v44 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>((uint64_t)&v37[335], result, &v70);
        ++v44[3];
        uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>(&v37[320], v42);
        if (!result) {
          break;
        }
        LOBYTE(v40) = *(void *)(result + 40) != 0;
      }
LABEL_49:
      *(unsigned char *)(v24 + 22) = v40;
      uint64_t v45 = v69;
      unint64_t v10 = *(unint64_t **)(v66 + 32);
      if (++v69 != v10)
      {
        uint64_t v46 = v67[4];
        unint64_t v47 = (v67[5] - v46) >> 3;
        uint64_t v48 = v45 + 2;
        while (1)
        {
          unint64_t v49 = *((unsigned int *)v48 - 1);
          unint64_t v50 = v49 >> 7;
          if (v49 >> 7 < v47)
          {
            uint64_t v51 = *(void *)(v46 + 8 * v50);
            if (v51)
            {
              unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (v49 & 0x7F));
              uint64_t v53 = v67[7];
              uint64_t result = v67[8];
              if (v52 < (result - v53) >> 3)
              {
                uint64_t v54 = v53 + 8 * v52;
                if (v54 != result && *(_DWORD *)(v54 + 4) == v49)
                {
                  uint64_t v56 = v68[4];
                  uint64_t result = v68[5] - v56;
                  if (v50 < result >> 3)
                  {
                    uint64_t v57 = *(void *)(v56 + 8 * v50);
                    if (v57)
                    {
                      unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * (v49 & 0x7F));
                      uint64_t v60 = v68[7];
                      uint64_t v59 = v68[8];
                      uint64_t result = v59 - v60;
                      if (v58 < (v59 - v60) >> 3)
                      {
                        uint64_t v61 = v60 + 8 * v58;
                        if (v61 != v59 && *(_DWORD *)(v61 + 4) == v49) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v69 = v48;
          BOOL v21 = v48++ == v10;
          if (v21) {
            goto LABEL_9;
          }
        }
        unint64_t v10 = v48 - 1;
      }
LABEL_9:
      if (v65 == v10) {
        goto LABEL_72;
      }
    }
    LOBYTE(v40) = 0;
    goto LABEL_49;
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v11 = (void *)result;
LABEL_72:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v60, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v58, v9, v6, v4, *(void *)(v9 + 32));
  if (v59 == v63)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = (void *)result;
  }
  else
  {
    uint64_t v11 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      unint64_t v13 = HIDWORD(*v10);
      unint64_t v14 = v12 >> 39;
      uint64_t v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * v14)) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v19 = v6[7],
            uint64_t v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((uint64_t v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == v13) : (v21 = 0), v21))
      {
        uint64_t v57 = 33 * v17;
        uint64_t v22 = v6[11];
        uint64_t v23 = v6[10] + v57;
      }
      else
      {
        uint64_t v22 = v6[11];
        uint64_t v23 = v22;
      }
      if (v23 == v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      uint64_t v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v14)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v29 = v4[7],
            uint64_t v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v13) : (v31 = 0), v31))
      {
        uint64_t v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        uint64_t v32 = (unint64_t *)v4[11];
      }
      uint64_t v33 = **(void **)(a1 + 8);
      uint64_t v34 = *(void **)v33;
      uint64_t v35 = *(void **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x41D4E9297E100630)
        {
          v34 += 5;
          if (v34 == v35) {
            goto LABEL_37;
          }
        }
      }
      if (v34 == v35)
      {
LABEL_37:
        uint64_t v36 = 0;
      }
      else
      {
        uint64_t v36 = v34[3];
        uint64_t v37 = (std::__shared_weak_count *)v34[4];
        if (v37)
        {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      uint64_t result = md::VKMRenderResourcesStore::getColorRampData(v36, *v32);
      if (result && *(unsigned char *)(result + 32) && *(void *)(result + 16)) {
        *(unsigned char *)(v24 + 5) = 1;
      }
      int8x8_t v39 = v63;
      unint64_t v10 = *(unint64_t **)(v60 + 32);
      if (++v63 != v10)
      {
        uint64_t v40 = v61[4];
        unint64_t v41 = (v61[5] - v40) >> 3;
        unint64_t v42 = v39 + 2;
        while (1)
        {
          unint64_t v43 = *((unsigned int *)v42 - 1);
          unint64_t v44 = v43 >> 7;
          if (v43 >> 7 < v41)
          {
            uint64_t v45 = *(void *)(v40 + 8 * v44);
            if (v45)
            {
              unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (v43 & 0x7F));
              uint64_t v47 = v61[7];
              uint64_t result = v61[8];
              if (v46 < (result - v47) >> 3)
              {
                uint64_t v48 = v47 + 8 * v46;
                if (v48 != result && *(_DWORD *)(v48 + 4) == v43)
                {
                  uint64_t v50 = v62[4];
                  uint64_t result = v62[5] - v50;
                  if (v44 < result >> 3)
                  {
                    uint64_t v51 = *(void *)(v50 + 8 * v44);
                    if (v51)
                    {
                      unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (v43 & 0x7F));
                      uint64_t v54 = v62[7];
                      uint64_t v53 = v62[8];
                      uint64_t result = v53 - v54;
                      if (v52 < (v53 - v54) >> 3)
                      {
                        uint64_t v55 = v54 + 8 * v52;
                        if (v55 != v53 && *(_DWORD *)(v55 + 4) == v43) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v63 = v42;
          BOOL v21 = v42++ == v10;
          if (v21) {
            goto LABEL_9;
          }
        }
        unint64_t v10 = v42 - 1;
      }
LABEL_9:
      ;
    }
    while (v59 != v10);
  }
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::NeedsZBias>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(void *)(v9 + 32));
  if (v44 == v48)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t result = *v11;
      unint64_t v12 = *v11;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), uint64_t v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 33 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      *(unsigned char *)(v23 + 7) = 1;
      uint64_t v24 = v48;
      uint64_t v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        uint64_t v25 = v46[4];
        unint64_t v26 = (v46[5] - v25) >> 3;
        unint64_t v27 = v24 + 2;
        while (1)
        {
          unint64_t v28 = *((unsigned int *)v27 - 1);
          unint64_t v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            uint64_t v30 = *(void *)(v25 + 8 * v29);
            if (v30)
            {
              unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              uint64_t v33 = v46[7];
              uint64_t v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                uint64_t v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == v28)
                {
                  uint64_t v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    uint64_t v37 = *(void *)(v36 + 8 * v29);
                    if (v37)
                    {
                      unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      uint64_t v39 = v47[7];
                      uint64_t v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        uint64_t v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == v28) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v48 = v27;
          BOOL v20 = v27++ == v11;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::FunctionConstants>(int8x8_t *a1)
{
  unint64_t v10 = 0xC62D89929260CB56;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC62D89929260CB56;
    if (*(void *)&v1 <= 0xC62D89929260CB56) {
      unint64_t v3 = 0xC62D89929260CB56 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC62D89929260CB56;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC62D89929260CB56)
      {
        if (v5[2] == 0xC62D89929260CB56) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC62D89929260CB56) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC62D89929260CB56) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19FDDC0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UseIdentityMatrix>(int8x8_t *a1)
{
  unint64_t v10 = 0x944162BB9DE8E7EBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x944162BB9DE8E7EBLL;
    if (*(void *)&v1 <= 0x944162BB9DE8E7EBLL) {
      unint64_t v3 = 0x944162BB9DE8E7EBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x944162BB9DE8E7EBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x944162BB9DE8E7EBLL)
      {
        if (v5[2] == 0x944162BB9DE8E7EBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x944162BB9DE8E7EBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x944162BB9DE8E7EBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19FE030(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsNotMercator>(int8x8_t *a1)
{
  unint64_t v10 = 0xB3266AFC8DD8D727;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB3266AFC8DD8D727;
    if (*(void *)&v1 <= 0xB3266AFC8DD8D727) {
      unint64_t v3 = 0xB3266AFC8DD8D727 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB3266AFC8DD8D727;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB3266AFC8DD8D727)
      {
        if (v5[2] == 0xB3266AFC8DD8D727) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB3266AFC8DD8D727) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB3266AFC8DD8D727) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19FE2A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>,std::allocator<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19FE42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(md::ls::PendingDeletion const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PendingDeletion const&>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&>>::~Model()
{
}

void *ecs2::Query<md::ls::PendingDeletion const&>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::PendingDeletion>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v4 = v3;
  uint64_t v6 = (unint64_t *)v3[7];
  uint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((uint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      uint64_t v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *uint64_t v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          unint64_t v33 = v4[11];
          unint64_t v34 = v4[10] + v27;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          unint64_t v33 = v4[11];
          unint64_t v34 = v33;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35) {
            goto LABEL_44;
          }
        }
        if (v34 == v33) {
          unint64_t v36 = 0;
        }
        else {
          unint64_t v36 = v34;
        }
        (*(void (**)(uint64_t, unint64_t))(*(void *)v35 + 48))(v35, v36);
        uint64_t v37 = v4[4];
        uint64_t v38 = v4[7];
        uint64_t v22 = (uint64_t *)v4[8];
        uint64_t v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          unint64_t v40 = *((unsigned int *)v39 + 1);
          uint64_t v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            uint64_t v42 = *(void *)(v37 + 8 * (v40 >> 7));
            uint64_t v41 = v4[8];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                uint64_t v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != v40) {
                  uint64_t v41 = v4[8];
                }
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            uint64_t v22 = v39 - 1;
            break;
          }
        }
        uint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    uint64_t v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      unint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        unint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          unint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            unint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              unint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        uint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>,std::allocator<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    uint64_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    unint64_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  uint64_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v9 = ***(uint64_t ****)(a1 + 8);
  if (v9 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v9 != 0x22D45F5AAD4BF408)
  {
    unint64_t v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0x22D45F5AAD4BF408);
    uint64_t v9 = v10 - 5;
  }
  unint64_t v12 = (uint64_t (***)(void))v9[3];
  uint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  uint64_t v14 = (**v12)(v12);
  unint64_t v15 = (void *)MEMORY[0x1A6239C40]();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 80))(v8, v14);
  *(void *)(a1 + 8) = 0;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v16 = (void *)(a1 + 8);
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::TileType>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  uint64_t v7 = gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  uint64_t v8 = gdc::Registry::storage<md::ls::PendingProcessing>(v2);
  gdc::Registry::storage<md::ls::HasMaterialRaster>(v2);
  gdc::Registry::storage<md::ls::AssociationHandle>(v2);
  gdc::Registry::storage<md::ls::HasMeshHandle>(v2);
  gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v2);
  gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(v2);
  gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ColorDataHandle>(v2);
  gdc::Registry::storage<md::ls::IndexRange>(v2);
  gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::NormalsHandle>(v2);
  gdc::Registry::storage<md::ls::InstanceTransformHandle>(v2);
  gdc::Registry::storage<md::ls::UVsHandle>(v2);
  gdc::Registry::storage<md::ls::ElevationHandle>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v2);
  gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(v2);
  gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(v2);
  gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(v2);
  gdc::Registry::storage<md::ls::NeedsClimateTint>(v2);
  gdc::Registry::storage<md::ls::CustomRenderState>(v2);
  gdc::Registry::storage<md::ls::ColorRampDataHandle>(v2);
  gdc::Registry::storage<md::ls::SharedUniqueID>(v2);
  gdc::Registry::storage<md::ls::IsOpaque>(v2);
  gdc::Registry::storage<md::ls::IsTransparent>(v2);
  gdc::Registry::storage<md::ls::NeedsZBias>(v2);
  gdc::Registry::storage<md::ls::PreserveHeight>(v2);
  gdc::Registry::storage<md::ls::InstanceCount>(v2);
  gdc::Registry::storage<md::ls::IsDecal>(v2);
  gdc::Registry::storage<md::ls::IsMaterial>(v2);
  gdc::Registry::storage<md::ls::IsMercator>(v2);
  gdc::Registry::storage<md::ls::ZIndex>(v2);
  gdc::Registry::storage<md::ls::DefaultZIndex>(v2);
  gdc::Registry::storage<md::ls::RenderableHash>(v2);
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    uint64_t v9 = v3 + 32;
  }
  else {
    uint64_t v9 = v4 + 32;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v5 + 32;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v6 + 32;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v7 + 32;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v8 + 32;
  }
  v17[0] = v9;
  v17[1] = v3;
  v17[2] = v4;
  v17[3] = v5;
  v17[4] = v6;
  v17[5] = v7;
  unint64_t v10 = *(void **)(v9 + 24);
  uint64_t v11 = *(void **)(v9 + 32);
  v17[6] = v8;
  unint64_t v18 = v10;
  if (v11 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v17))
  {
    unint64_t v12 = v10 + 1;
    do
    {
      unint64_t v10 = v12;
      unint64_t v18 = v12;
      if (v12 == v11) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v17);
      unint64_t v12 = v10 + 1;
    }
    while (!isValid);
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v15 != v10)
  {
    *uint64_t result = *v10;
    md::ita::CreateUnflattenedRenderItems::operator()((uint64_t)v16);
  }
  *uint64_t result = 0xFFFFFFFF00000000;
  *uint64_t v16 = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xEAA0B82FC49F7277;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEAA0B82FC49F7277;
    if (*(void *)&v1 <= 0xEAA0B82FC49F7277) {
      unint64_t v3 = 0xEAA0B82FC49F7277 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEAA0B82FC49F7277;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEAA0B82FC49F7277)
      {
        if (v5[2] == 0xEAA0B82FC49F7277) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEAA0B82FC49F7277) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEAA0B82FC49F7277) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A00658(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::InstanceCount>(int8x8_t *a1)
{
  unint64_t v10 = 0xE53EF176130D7769;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE53EF176130D7769;
    if (*(void *)&v1 <= 0xE53EF176130D7769) {
      unint64_t v3 = 0xE53EF176130D7769 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE53EF176130D7769;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE53EF176130D7769)
      {
        if (v5[2] == 0xE53EF176130D7769) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE53EF176130D7769) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE53EF176130D7769) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A008C8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IntendedSceneLayer>(int8x8_t *a1)
{
  unint64_t v10 = 0xEC2A00DC914732D7;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEC2A00DC914732D7;
    if (*(void *)&v1 <= 0xEC2A00DC914732D7) {
      unint64_t v3 = 0xEC2A00DC914732D7 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEC2A00DC914732D7;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEC2A00DC914732D7)
      {
        if (v5[2] == 0xEC2A00DC914732D7) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEC2A00DC914732D7) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEC2A00DC914732D7) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A00B38(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xDC66BF6D06F6D0BALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDC66BF6D06F6D0BALL;
    if (*(void *)&v1 <= 0xDC66BF6D06F6D0BALL) {
      unint64_t v3 = 0xDC66BF6D06F6D0BALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDC66BF6D06F6D0BALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDC66BF6D06F6D0BALL)
      {
        if (v5[2] == 0xDC66BF6D06F6D0BALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDC66BF6D06F6D0BALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDC66BF6D06F6D0BALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A00DA8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x65937AC5D2157F71;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x65937AC5D2157F71;
    if (*(void *)&v1 <= 0x65937AC5D2157F71uLL) {
      uint64_t v3 = 0x65937AC5D2157F71uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x65937AC5D2157F71;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x65937AC5D2157F71)
      {
        if (v5[2] == 0x65937AC5D2157F71) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x65937AC5D2157F71) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x65937AC5D2157F71) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A01018(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(int8x8_t *a1)
{
  unint64_t v10 = 0x985FB09D9DF9959FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x985FB09D9DF9959FLL;
    if (*(void *)&v1 <= 0x985FB09D9DF9959FLL) {
      unint64_t v3 = 0x985FB09D9DF9959FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x985FB09D9DF9959FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x985FB09D9DF9959FLL)
      {
        if (v5[2] == 0x985FB09D9DF9959FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x985FB09D9DF9959FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x985FB09D9DF9959FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A01288(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x32FFF5E924C6D657;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x32FFF5E924C6D657;
    if (*(void *)&v1 <= 0x32FFF5E924C6D657uLL) {
      uint64_t v3 = 0x32FFF5E924C6D657uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x32FFF5E924C6D657;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x32FFF5E924C6D657)
      {
        if (v5[2] == 0x32FFF5E924C6D657) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x32FFF5E924C6D657) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x32FFF5E924C6D657) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A014F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xCE03281732FA0019;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCE03281732FA0019;
    if (*(void *)&v1 <= 0xCE03281732FA0019) {
      unint64_t v3 = 0xCE03281732FA0019 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCE03281732FA0019;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCE03281732FA0019)
      {
        if (v5[2] == 0xCE03281732FA0019) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCE03281732FA0019) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCE03281732FA0019) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A01768(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(int8x8_t *a1)
{
  uint64_t v10 = 0x1D932F2BF291491;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1D932F2BF291491;
    if (*(void *)&v1 <= 0x1D932F2BF291491uLL) {
      uint64_t v3 = 0x1D932F2BF291491uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1D932F2BF291491;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1D932F2BF291491)
      {
        if (v5[2] == 0x1D932F2BF291491) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1D932F2BF291491) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1D932F2BF291491) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A019D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xA50DD2A5BD75DBD6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA50DD2A5BD75DBD6;
    if (*(void *)&v1 <= 0xA50DD2A5BD75DBD6) {
      unint64_t v3 = 0xA50DD2A5BD75DBD6 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA50DD2A5BD75DBD6;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA50DD2A5BD75DBD6)
      {
        if (v5[2] == 0xA50DD2A5BD75DBD6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA50DD2A5BD75DBD6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA50DD2A5BD75DBD6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A01C48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PendingProcessing>(int8x8_t *a1)
{
  uint64_t v10 = 0x75DBD6381F1903FFLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x75DBD6381F1903FFLL;
    if (*(void *)&v1 <= 0x75DBD6381F1903FFuLL) {
      uint64_t v3 = 0x75DBD6381F1903FFuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x75DBD6381F1903FFLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x75DBD6381F1903FFLL)
      {
        if (v5[2] == 0x75DBD6381F1903FFLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x75DBD6381F1903FFLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x75DBD6381F1903FFLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A01EB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::CustomRenderState>(int8x8_t *a1)
{
  unint64_t v10 = 0xA0C97F52893883B7;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA0C97F52893883B7;
    if (*(void *)&v1 <= 0xA0C97F52893883B7) {
      unint64_t v3 = 0xA0C97F52893883B7 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA0C97F52893883B7;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA0C97F52893883B7)
      {
        if (v5[2] == 0xA0C97F52893883B7) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA0C97F52893883B7) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA0C97F52893883B7) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A02128(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0x96F87A2692FE4013;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x96F87A2692FE4013;
    if (*(void *)&v1 <= 0x96F87A2692FE4013) {
      unint64_t v3 = 0x96F87A2692FE4013 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x96F87A2692FE4013;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x96F87A2692FE4013)
      {
        if (v5[2] == 0x96F87A2692FE4013) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x96F87A2692FE4013) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x96F87A2692FE4013) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A02398(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xDF0018B9242ADFDBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDF0018B9242ADFDBLL;
    if (*(void *)&v1 <= 0xDF0018B9242ADFDBLL) {
      unint64_t v3 = 0xDF0018B9242ADFDBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDF0018B9242ADFDBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDF0018B9242ADFDBLL)
      {
        if (v5[2] == 0xDF0018B9242ADFDBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDF0018B9242ADFDBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDF0018B9242ADFDBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A02608(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xD2D99CA7D5B116C8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD2D99CA7D5B116C8;
    if (*(void *)&v1 <= 0xD2D99CA7D5B116C8) {
      unint64_t v3 = 0xD2D99CA7D5B116C8 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD2D99CA7D5B116C8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD2D99CA7D5B116C8)
      {
        if (v5[2] == 0xD2D99CA7D5B116C8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD2D99CA7D5B116C8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD2D99CA7D5B116C8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A02878(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *md::World::updateForConfiguration(void *this, int8x8_t *a2)
{
  unint64_t v3 = this;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  int8x8_t v4 = a2[2];
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      uint64_t v6 = 0x20A1ED17D78F322BLL;
      if (*(void *)&v4 <= 0x20A1ED17D78F322BuLL) {
        uint64_t v6 = 0x20A1ED17D78F322BuLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v6 = (*(void *)&v4 - 1) & 0x20A1ED17D78F322BLL;
    }
    unint64_t v7 = *(void **)(*(void *)&a2[1] + 8 * v6);
    if (v7)
    {
      uint64_t v8 = (void *)*v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          uint64_t v9 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v11 = v8[1];
            if (v11 == 0x20A1ED17D78F322BLL)
            {
              if (v8[2] == 0x20A1ED17D78F322BLL) {
                goto LABEL_192;
              }
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_21;
            }
            uint64_t v8 = (void *)*v8;
            if (!v8) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v10 = v8[1];
          if (v10 == 0x20A1ED17D78F322BLL)
          {
            if (v8[2] == 0x20A1ED17D78F322BLL)
            {
LABEL_192:
              uint64_t v12 = v8[5];
              goto LABEL_22;
            }
          }
          else
          {
            if (v10 >= *(void *)&v4) {
              v10 %= *(void *)&v4;
            }
            if (v10 != v6) {
              break;
            }
          }
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_21:
  uint64_t v12 = 0;
LABEL_22:
  for (uint64_t i = 0; i != 15; ++i)
  {
    uint64_t v14 = (unsigned __int16 *)v3[4];
    unint64_t v15 = (unsigned __int16 *)v3[5];
    if (v14 != v15)
    {
      while (*v14 != word_1A2900380[i])
      {
        v14 += 8;
        if (v14 == v15) {
          goto LABEL_24;
        }
      }
    }
    if (v14 != v15)
    {
      uint64_t v16 = *((void *)v14 + 1);
      if (v16)
      {
        uint64_t v17 = *(unsigned __int8 *)(v12 + 216);
        v79[0] = &unk_1EF57D638;
        v79[1] = v12;
        v79[2] = v17;
        uint64_t v80 = v79;
        uint64_t v82 = v81;
        std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v79, (uint64_t)v81);
        std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v16 + 776));
        if (v82 == v81)
        {
          (*(void (**)(void *))(v81[0] + 32))(v81);
        }
        else if (v82)
        {
          (*(void (**)(void *))(*v82 + 40))(v82);
        }
        this = v80;
        if (v80 == v79)
        {
          this = (void *)(*(uint64_t (**)(void *))(v79[0] + 32))(v79);
        }
        else if (v80)
        {
          this = (void *)(*(uint64_t (**)(void *))(*v80 + 40))(v80);
        }
      }
    }
LABEL_24:
    ;
  }
  uint64_t v18 = v3[4];
  uint64_t v19 = v3[5];
  if (v18 != v19)
  {
    while (*(_WORD *)v18 != 16)
    {
      v18 += 16;
      if (v18 == v19) {
        goto LABEL_52;
      }
    }
  }
  if (v18 != v19)
  {
    uint64_t v20 = *(void *)(v18 + 8);
    if (v20)
    {
      uint64_t v21 = *(unsigned __int8 *)(v12 + 216);
      v77[0] = &unk_1EF57D638;
      v77[1] = v12;
      v77[2] = v21;
      uint64_t v78 = v77;
      uint64_t v82 = v81;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v77, (uint64_t)v81);
      std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v20 + 808));
      if (v82 == v81)
      {
        (*(void (**)(void *))(v81[0] + 32))(v81);
      }
      else if (v82)
      {
        (*(void (**)(void *))(*v82 + 40))(v82);
      }
      this = v78;
      if (v78 == v77)
      {
        this = (void *)(*(uint64_t (**)(void *))(v77[0] + 32))(v77);
      }
      else if (v78)
      {
        this = (void *)(*(uint64_t (**)(void *))(*v78 + 40))(v78);
      }
    }
  }
LABEL_52:
  uint64_t v22 = v3[4];
  uint64_t v23 = v3[5];
  if (v22 != v23)
  {
    while (*(_WORD *)v22 != 11)
    {
      v22 += 16;
      if (v22 == v23) {
        goto LABEL_66;
      }
    }
  }
  if (v22 != v23)
  {
    uint64_t v24 = *(void *)(v22 + 8);
    if (v24)
    {
      uint64_t v25 = *(unsigned __int8 *)(v12 + 216);
      v75[0] = &unk_1EF57D638;
      v75[1] = v12;
      v75[2] = v25;
      BOOL v76 = v75;
      uint64_t v82 = v81;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v75, (uint64_t)v81);
      std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v24 + 848));
      if (v82 == v81)
      {
        (*(void (**)(void *))(v81[0] + 32))(v81);
      }
      else if (v82)
      {
        (*(void (**)(void *))(*v82 + 40))(v82);
      }
      this = v76;
      if (v76 == v75)
      {
        this = (void *)(*(uint64_t (**)(void *))(v75[0] + 32))(v75);
      }
      else if (v76)
      {
        this = (void *)(*(uint64_t (**)(void))(*v76 + 40))();
      }
    }
  }
LABEL_66:
  uint64_t v26 = v3[4];
  uint64_t v27 = v3[5];
  if (v26 != v27)
  {
    while (*(_WORD *)v26 != 12)
    {
      v26 += 16;
      if (v26 == v27) {
        goto LABEL_80;
      }
    }
  }
  if (v26 != v27)
  {
    uint64_t v28 = *(void *)(v26 + 8);
    if (v28)
    {
      uint64_t v29 = *(unsigned __int8 *)(v12 + 216);
      v73[0] = &unk_1EF57D638;
      v73[1] = v12;
      v73[2] = v29;
      unint64_t v74 = v73;
      uint64_t v82 = v81;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v73, (uint64_t)v81);
      std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v28 + 848));
      if (v82 == v81)
      {
        (*(void (**)(void *))(v81[0] + 32))(v81);
      }
      else if (v82)
      {
        (*(void (**)(void *))(*v82 + 40))(v82);
      }
      this = v74;
      if (v74 == v73)
      {
        this = (void *)(*(uint64_t (**)(void *))(v73[0] + 32))(v73);
      }
      else if (v74)
      {
        this = (void *)(*(uint64_t (**)(void))(*v74 + 40))();
      }
    }
  }
LABEL_80:
  uint64_t v30 = v3[4];
  uint64_t v31 = v3[5];
  if (v30 != v31)
  {
    while (*(_WORD *)v30 != 71)
    {
      v30 += 16;
      if (v30 == v31) {
        goto LABEL_94;
      }
    }
  }
  if (v30 != v31)
  {
    uint64_t v32 = *(void *)(v30 + 8);
    if (v32)
    {
      uint64_t v33 = *(unsigned __int8 *)(v12 + 216);
      v71[0] = &unk_1EF57D638;
      v71[1] = v12;
      v71[2] = v33;
      int v72 = v71;
      uint64_t v82 = v81;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v71, (uint64_t)v81);
      std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v32 + 848));
      if (v82 == v81)
      {
        (*(void (**)(void *))(v81[0] + 32))(v81);
      }
      else if (v82)
      {
        (*(void (**)(void *))(*v82 + 40))(v82);
      }
      this = v72;
      if (v72 == v71)
      {
        this = (void *)(*(uint64_t (**)(void *))(v71[0] + 32))(v71);
      }
      else if (v72)
      {
        this = (void *)(*(uint64_t (**)(void))(*v72 + 40))();
      }
    }
  }
LABEL_94:
  uint64_t v34 = v3[4];
  uint64_t v35 = v3[5];
  if (v34 != v35)
  {
    while (*(_WORD *)v34 != 72)
    {
      v34 += 16;
      if (v34 == v35) {
        goto LABEL_108;
      }
    }
  }
  if (v34 != v35)
  {
    uint64_t v36 = *(void *)(v34 + 8);
    if (v36)
    {
      uint64_t v37 = *(unsigned __int8 *)(v12 + 216);
      v69[0] = &unk_1EF57D638;
      v69[1] = v12;
      v69[2] = v37;
      uint64_t v70 = v69;
      uint64_t v82 = v81;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v69, (uint64_t)v81);
      std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v36 + 848));
      if (v82 == v81)
      {
        (*(void (**)(void *))(v81[0] + 32))(v81);
      }
      else if (v82)
      {
        (*(void (**)(void *))(*v82 + 40))(v82);
      }
      this = v70;
      if (v70 == v69)
      {
        this = (void *)(*(uint64_t (**)(void *))(v69[0] + 32))(v69);
      }
      else if (v70)
      {
        this = (void *)(*(uint64_t (**)(void))(*v70 + 40))();
      }
    }
  }
LABEL_108:
  uint64_t v38 = v3[4];
  uint64_t v39 = v3[5];
  if (v38 != v39)
  {
    while (*(_WORD *)v38 != 81)
    {
      v38 += 16;
      if (v38 == v39) {
        goto LABEL_122;
      }
    }
  }
  if (v38 != v39)
  {
    uint64_t v40 = *(void *)(v38 + 8);
    if (v40)
    {
      uint64_t v41 = *(unsigned __int8 *)(v12 + 216);
      v67[0] = &unk_1EF57D638;
      v67[1] = v12;
      v67[2] = v41;
      uint64_t v68 = v67;
      uint64_t v82 = v81;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v67, (uint64_t)v81);
      std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v40 + 848));
      if (v82 == v81)
      {
        (*(void (**)(void *))(v81[0] + 32))(v81);
      }
      else if (v82)
      {
        (*(void (**)(void *))(*v82 + 40))(v82);
      }
      this = v68;
      if (v68 == v67)
      {
        this = (void *)(*(uint64_t (**)(void *))(v67[0] + 32))(v67);
      }
      else if (v68)
      {
        this = (void *)(*(uint64_t (**)(void))(*v68 + 40))();
      }
    }
  }
LABEL_122:
  uint64_t v42 = v3[4];
  uint64_t v43 = v3[5];
  if (v42 != v43)
  {
    while (*(_WORD *)v42 != 37)
    {
      v42 += 16;
      if (v42 == v43) {
        goto LABEL_136;
      }
    }
  }
  if (v42 != v43)
  {
    uint64_t v44 = *(void *)(v42 + 8);
    if (v44)
    {
      v65[0] = &unk_1EF57D638;
      v65[1] = v12;
      v65[2] = 2;
      uint64_t v66 = v65;
      uint64_t v82 = v81;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v65, (uint64_t)v81);
      std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v44 + 616));
      if (v82 == v81)
      {
        (*(void (**)(void *))(v81[0] + 32))(v81);
      }
      else if (v82)
      {
        (*(void (**)(void *))(*v82 + 40))(v82);
      }
      this = v66;
      if (v66 == v65)
      {
        this = (void *)(*(uint64_t (**)(void *))(v65[0] + 32))(v65);
      }
      else if (v66)
      {
        this = (void *)(*(uint64_t (**)(void))(*v66 + 40))();
      }
    }
  }
LABEL_136:
  uint64_t v45 = v3[4];
  uint64_t v46 = v3[5];
  if (v45 != v46)
  {
    while (*(_WORD *)v45 != 38)
    {
      v45 += 16;
      if (v45 == v46) {
        goto LABEL_149;
      }
    }
  }
  if (v45 == v46 || (uint64_t v47 = *(void *)(v45 + 8)) == 0)
  {
LABEL_149:
    int8x8_t v48 = a2[2];
    if (v48) {
      goto LABEL_150;
    }
LABEL_171:
    uint64_t v56 = 0;
    goto LABEL_172;
  }
  v63[0] = &unk_1EF57D638;
  v63[1] = v12;
  v63[2] = 2;
  uint64_t v64 = v63;
  uint64_t v82 = v81;
  std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v63, (uint64_t)v81);
  std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](v81, (void *)(v47 + 616));
  if (v82 == v81)
  {
    (*(void (**)(void *))(v81[0] + 32))(v81);
  }
  else if (v82)
  {
    (*(void (**)(void *))(*v82 + 40))(v82);
  }
  this = v64;
  if (v64 != v63)
  {
    if (v64) {
      this = (void *)(*(uint64_t (**)(void))(*v64 + 40))();
    }
    goto LABEL_149;
  }
  this = (void *)(*(uint64_t (**)(void *))(v63[0] + 32))(v63);
  int8x8_t v48 = a2[2];
  if (!*(void *)&v48) {
    goto LABEL_171;
  }
LABEL_150:
  uint8x8_t v49 = (uint8x8_t)vcnt_s8(v48);
  v49.i16[0] = vaddlv_u8(v49);
  if (v49.u32[0] > 1uLL)
  {
    uint64_t v50 = 0x2B7C4502BD3C99C6;
    if (*(void *)&v48 <= 0x2B7C4502BD3C99C6uLL) {
      uint64_t v50 = 0x2B7C4502BD3C99C6uLL % *(void *)&v48;
    }
  }
  else
  {
    uint64_t v50 = (*(void *)&v48 - 1) & 0x2B7C4502BD3C99C6;
  }
  uint64_t v51 = *(void **)(*(void *)&a2[1] + 8 * v50);
  if (!v51) {
    goto LABEL_171;
  }
  unint64_t v52 = (void *)*v51;
  if (!v52) {
    goto LABEL_171;
  }
  if (v49.u32[0] < 2uLL)
  {
    uint64_t v53 = *(void *)&v48 - 1;
    while (1)
    {
      uint64_t v55 = v52[1];
      if (v55 == 0x2B7C4502BD3C99C6)
      {
        if (v52[2] == 0x2B7C4502BD3C99C6) {
          goto LABEL_193;
        }
      }
      else if ((v55 & v53) != v50)
      {
        goto LABEL_171;
      }
      unint64_t v52 = (void *)*v52;
      if (!v52) {
        goto LABEL_171;
      }
    }
  }
  while (1)
  {
    unint64_t v54 = v52[1];
    if (v54 == 0x2B7C4502BD3C99C6) {
      break;
    }
    if (v54 >= *(void *)&v48) {
      v54 %= *(void *)&v48;
    }
    if (v54 != v50) {
      goto LABEL_171;
    }
LABEL_159:
    unint64_t v52 = (void *)*v52;
    if (!v52) {
      goto LABEL_171;
    }
  }
  if (v52[2] != 0x2B7C4502BD3C99C6) {
    goto LABEL_159;
  }
LABEL_193:
  uint64_t v56 = v52[5];
LABEL_172:
  *(void *)(v3[34] + 336) = v56;
  v3[39] = 0;
  uint64_t v57 = *(void *)(v3[3] + 56);
  uint64_t v58 = *(void *)(v57 + 32);
  uint64_t v59 = *(void *)(v57 + 40);
  if (v58 != v59)
  {
    while (*(_WORD *)v58 != 9)
    {
      v58 += 16;
      if (v58 == v59) {
        goto LABEL_180;
      }
    }
  }
  if (v58 != v59)
  {
    this = (*(void *(**)(void *__return_ptr))(**(void **)(v58 + 8) + 72))(v81);
    if (LOBYTE(v81[0]))
    {
      if (v3[39] < (unint64_t)HIDWORD(v81[0])) {
        v3[39] = HIDWORD(v81[0]);
      }
    }
  }
LABEL_180:
  uint64_t v60 = *(void *)(v57 + 32);
  uint64_t v61 = *(void *)(v57 + 40);
  if (v60 != v61)
  {
    while (*(_WORD *)v60 != 1)
    {
      v60 += 16;
      if (v60 == v61) {
        goto LABEL_188;
      }
    }
  }
  if (v60 == v61)
  {
LABEL_188:
    unint64_t v62 = v3[39];
  }
  else
  {
    this = (*(void *(**)(void *__return_ptr))(**(void **)(v60 + 8) + 72))(v81);
    unint64_t v62 = v3[39];
    if (LOBYTE(v81[0]) && v62 < HIDWORD(v81[0]))
    {
      v3[39] = HIDWORD(v81[0]);
      return this;
    }
  }
  if (!v62) {
    v3[39] = 256;
  }
  return this;
}

void *std::__function::__value_func<std::shared_ptr<md::LabelManager> ()(void)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    int8x8_t v4 = (void *)result[3];
    uint8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

__n128 std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D638;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

NSObject *___ZN3geo9TaskQueue5applyEmNSt3__18functionIFvmEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  int8x8_t v4 = *(NSObject **)(a1 + 32);
  if (v4) {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v7);
    __n128 result = *(NSObject **)(a1 + 32);
    if (result) {
      return dispatch_semaphore_signal(result);
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::operator()();
  }
  return result;
}

void std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (void (**)(id, void))MEMORY[0x1A6239EB0](*(void *)(a1 + 16));
  v3[2](v3, v2);
}

void sub_1A1A03B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A03FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 == v17)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
  }
  else if (a15)
  {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A04644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(md::ls::UniqueMaterialData const&)>::~function(va);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&>>::~Model()
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::DisconnectComponents>,std::allocator<ecs2::ForwardToExecute<md::ita::DisconnectComponents>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A04FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 == v21)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
  }
  else if (a15)
  {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_1A1A0536C()
{
}

void sub_1A1A05374()
{
}

void sub_1A1A0537C()
{
}

void sub_1A1A05384()
{
}

void sub_1A1A0538C()
{
}

BOOL ecs2::Query<md::ls::RequestReset const&>::Model<ecs2::RuntimeQuery<md::ls::RequestReset const&>>::empty(uint64_t a1)
{
  uint64_t v1 = (void *)gdc::Registry::storage<md::ls::RequestReset>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((unint64_t v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (uint64_t v8 = *(void *)(v6 + 8 * (v5 >> 7))) == 0
      || (unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((uint64_t v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == v5) : (v11 = 0), !v11))
    {
      unint64_t v12 = v4 >> 3;
      uint64_t v13 = v3 + 8;
      while (v13 != v2)
      {
        unint64_t v14 = *(unsigned int *)(v13 + 4);
        uint64_t v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          uint64_t v16 = *(void *)(v6 + 8 * (v14 >> 7));
          uint64_t v15 = v1[8];
          if (v16)
          {
            unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            uint64_t v15 = v1[8];
            if (v12 > v17)
            {
              uint64_t v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != v14) {
                uint64_t v15 = v1[8];
              }
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          uint64_t v3 = v13 - 8;
          return v2 == v3;
        }
      }
      uint64_t v3 = v1[8];
    }
  }
  return v2 == v3;
}

uint64_t gdc::Registry::storage<md::ls::RequestReset>(int8x8_t *a1)
{
  unint64_t v10 = 0xDACEFB85CDF2B135;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDACEFB85CDF2B135;
    if (*(void *)&v1 <= 0xDACEFB85CDF2B135) {
      unint64_t v3 = 0xDACEFB85CDF2B135 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDACEFB85CDF2B135;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDACEFB85CDF2B135)
      {
        if (v5[2] == 0xDACEFB85CDF2B135) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDACEFB85CDF2B135) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDACEFB85CDF2B135) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A056C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RequestReset const&>::Model<ecs2::RuntimeQuery<md::ls::RequestReset const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *unint64_t v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 24 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    BOOL v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      BOOL v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  unint64_t v12 = (void *)result;
LABEL_56:
  *unint64_t v12 = 0xFFFFFFFF00000000;
  return result;
}

void *ecs2::Query<md::ls::UniqueMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v4 = v3;
  uint64_t v6 = (unint64_t *)v3[7];
  unint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((unint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      uint64_t v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *uint64_t v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v4[10] + 24 * v27;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35) {
            goto LABEL_44;
          }
        }
        if (v34 == v33) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v34;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v36);
        uint64_t v37 = v4[4];
        uint64_t v38 = v4[7];
        BOOL v22 = (uint64_t *)v4[8];
        uint64_t v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          unint64_t v40 = *((unsigned int *)v39 + 1);
          uint64_t v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            uint64_t v42 = *(void *)(v37 + 8 * (v40 >> 7));
            uint64_t v41 = v4[8];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                uint64_t v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != v40) {
                  uint64_t v41 = v4[8];
                }
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            BOOL v22 = v39 - 1;
            break;
          }
        }
        uint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    uint64_t v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      unint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        unint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          unint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            unint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              unint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        uint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::UniqueMaterialData>(int8x8_t *a1)
{
  uint64_t v10 = 0x3209EBE3B62CF3D3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3209EBE3B62CF3D3;
    if (*(void *)&v1 <= 0x3209EBE3B62CF3D3uLL) {
      uint64_t v3 = 0x3209EBE3B62CF3D3uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3209EBE3B62CF3D3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3209EBE3B62CF3D3)
      {
        if (v5[2] == 0x3209EBE3B62CF3D3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3209EBE3B62CF3D3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3209EBE3B62CF3D3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A05EB4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PendingDeletion>(v3);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::TexturesToDisconnect>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  uint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *unint64_t v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      unint64_t v23 = v4[11];
      unint64_t v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      unint64_t v23 = v4[11];
      unint64_t v24 = v23;
    }
    unint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 24 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  unint64_t v12 = (void *)result;
LABEL_56:
  *unint64_t v12 = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PendingDeletion>(v3);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  uint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *unint64_t v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      unint64_t v23 = v4[11];
      unint64_t v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      unint64_t v23 = v4[11];
      unint64_t v24 = v23;
    }
    unint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  unint64_t v12 = (void *)result;
LABEL_56:
  *unint64_t v12 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::ColorRampDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xE103B5C60804137ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE103B5C60804137ELL;
    if (*(void *)&v1 <= 0xE103B5C60804137ELL) {
      unint64_t v3 = 0xE103B5C60804137ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE103B5C60804137ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE103B5C60804137ELL)
      {
        if (v5[2] == 0xE103B5C60804137ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE103B5C60804137ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE103B5C60804137ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A06708(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PendingDeletion>(int8x8_t *a1)
{
  uint64_t v10 = 0x34ACED59D994E35ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x34ACED59D994E35ELL;
    if (*(void *)&v1 <= 0x34ACED59D994E35EuLL) {
      uint64_t v3 = 0x34ACED59D994E35EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x34ACED59D994E35ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x34ACED59D994E35ELL)
      {
        if (v5[2] == 0x34ACED59D994E35ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x34ACED59D994E35ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x34ACED59D994E35ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A06978(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>>::~Model()
{
}

void *ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>>::each(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PendingDeletion>(v2);
  gdc::Registry::storageTuple<md::ls::PositionScaleInfoConstantDataHandle,md::ls::StyleRouteLineMaskConstantDataHandle,md::ls::StyleConstantHandle,md::ls::LandCoverSettingsConstantDataHandle,md::ls::StyleGroundOcclusionConstantDataHandle,md::ls::ColorRampDataHandle,md::ls::NormalsHandle,md::ls::UVsHandle,md::ls::ElevationHandle,md::ls::InstanceTransformHandle,md::ls::UniqueStyleEmissiveDataKeyHandle,md::ls::NeedsClimateTint>(v165, v2);
  uint64_t v4 = (void *)v165[5];
  uint64_t v6 = (void *)v165[6];
  unint64_t v5 = (void *)v165[7];
  unint64_t v7 = (void *)v165[8];
  uint64_t v8 = (void *)v165[9];
  uint64_t v9 = (void *)v165[10];
  uint64_t v10 = (void *)v165[11];
  unint64_t v12 = (unint64_t *)v3[7];
  uint64_t v11 = (uint64_t *)v3[8];
  uint64_t v13 = (char *)v11 - (char *)v12;
  if (v11 == (uint64_t *)v12
    || (unint64_t v14 = *((unsigned int *)v12 + 1), v15 = v3[4], v16 = (v3[5] - v15) >> 3, v14 >> 7 < v16)
    && (uint64_t v17 = *(void *)(v15 + 8 * (v14 >> 7))) != 0
    && (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (v14 & 0x7F)), v18 < v13 >> 3)
    && ((uint64_t v19 = (uint64_t *)&v12[v18], v19 != v11) ? (v20 = *((_DWORD *)v19 + 1) == v14) : (v20 = 0), v20))
  {
LABEL_19:
    if (v11 != (uint64_t *)v12)
    {
      uint64_t v162 = v165[1];
      uint64_t v163 = v165[0];
      uint64_t v160 = v165[3];
      uint64_t v161 = v165[2];
      uint64_t v159 = v165[4];
      uint64_t v27 = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      uint64_t v29 = (void *)v159;
      unint64_t v28 = (void *)v160;
      uint64_t v31 = (void *)v161;
      uint64_t v30 = (void *)v162;
      BOOL v32 = (void *)v163;
      v158 = (void *)v27;
      do
      {
        void *v158 = *v12;
        unint64_t v34 = *v12;
        unint64_t v35 = HIDWORD(*v12);
        unint64_t v36 = *v12 >> 39;
        uint64_t v37 = v3[4];
        if (v36 < (v3[5] - v37) >> 3
          && (uint64_t v38 = *(void *)(v37 + 8 * v36)) != 0
          && (unint64_t v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v41 = v3[7],
              uint64_t v40 = v3[8],
              v39 < (v40 - v41) >> 3)
          && ((uint64_t v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == v35) : (v43 = 0), v43))
        {
          unint64_t v44 = v3[11];
          unint64_t v45 = v3[10] + v39;
        }
        else
        {
          unint64_t v44 = v3[11];
          unint64_t v45 = v44;
        }
        if (v45 == v44) {
          unint64_t v46 = 0;
        }
        else {
          unint64_t v46 = v45;
        }
        uint64_t v47 = v32[4];
        if (v36 < (v32[5] - v47) >> 3
          && (uint64_t v48 = *(void *)(v47 + 8 * v36)) != 0
          && (unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v51 = v32[7],
              uint64_t v50 = v32[8],
              v49 < (v50 - v51) >> 3)
          && ((uint64_t v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == v35) : (v53 = 0), v53))
        {
          uint64_t v54 = v32[11];
          uint64_t v55 = v32[10] + 16 * v49;
        }
        else
        {
          uint64_t v54 = v32[11];
          uint64_t v55 = v54;
        }
        if (v55 == v54) {
          uint64_t v55 = 0;
        }
        uint64_t v56 = v30[4];
        if (v36 < (v30[5] - v56) >> 3
          && (uint64_t v57 = *(void *)(v56 + 8 * v36)) != 0
          && (unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v60 = v30[7],
              uint64_t v59 = v30[8],
              v58 < (v59 - v60) >> 3)
          && ((v61 = v60 + 8 * v58, v61 != v59) ? (BOOL v62 = *(_DWORD *)(v61 + 4) == v35) : (BOOL v62 = 0), v62))
        {
          uint64_t v63 = v30[11];
          uint64_t v64 = v30[10] + 8 * v58;
        }
        else
        {
          uint64_t v63 = v30[11];
          uint64_t v64 = v63;
        }
        if (v64 == v63) {
          uint64_t v64 = 0;
        }
        uint64_t v65 = v31[4];
        if (v36 < (v31[5] - v65) >> 3
          && (uint64_t v66 = *(void *)(v65 + 8 * v36)) != 0
          && (unint64_t v67 = *(unsigned __int16 *)(v66 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v69 = v31[7],
              uint64_t v68 = v31[8],
              v67 < (v68 - v69) >> 3)
          && ((uint64_t v70 = v69 + 8 * v67, v70 != v68) ? (v71 = *(_DWORD *)(v70 + 4) == v35) : (v71 = 0), v71))
        {
          uint64_t v72 = v31[11];
          uint64_t v73 = v31[10] + 8 * v67;
        }
        else
        {
          uint64_t v72 = v31[11];
          uint64_t v73 = v72;
        }
        if (v73 == v72) {
          uint64_t v73 = 0;
        }
        uint64_t v74 = v28[4];
        if (v36 < (v28[5] - v74) >> 3
          && (uint64_t v75 = *(void *)(v74 + 8 * v36)) != 0
          && (unint64_t v76 = *(unsigned __int16 *)(v75 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v78 = v28[7],
              uint64_t v77 = v28[8],
              v76 < (v77 - v78) >> 3)
          && ((uint64_t v79 = v78 + 8 * v76, v79 != v77) ? (v80 = *(_DWORD *)(v79 + 4) == v35) : (v80 = 0), v80))
        {
          uint64_t v81 = v28[11];
          uint64_t v82 = v28[10] + 8 * v76;
        }
        else
        {
          uint64_t v81 = v28[11];
          uint64_t v82 = v81;
        }
        if (v82 == v81) {
          uint64_t v82 = 0;
        }
        uint64_t v83 = v29[4];
        if (v36 < (v29[5] - v83) >> 3
          && (uint64_t v84 = *(void *)(v83 + 8 * v36)) != 0
          && (unint64_t v85 = *(unsigned __int16 *)(v84 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v87 = v29[7],
              uint64_t v86 = v29[8],
              v85 < (v86 - v87) >> 3)
          && ((uint64_t v88 = v87 + 8 * v85, v88 != v86) ? (v89 = *(_DWORD *)(v88 + 4) == v35) : (v89 = 0), v89))
        {
          uint64_t v90 = v29[11];
          uint64_t v91 = v29[10] + 8 * v85;
        }
        else
        {
          uint64_t v90 = v29[11];
          uint64_t v91 = v90;
        }
        if (v91 == v90) {
          uint64_t v91 = 0;
        }
        uint64_t v92 = v4[4];
        if (v36 < (v4[5] - v92) >> 3
          && (uint64_t v93 = *(void *)(v92 + 8 * v36)) != 0
          && (unint64_t v94 = *(unsigned __int16 *)(v93 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v95 = v4[7],
              uint64_t v96 = v4[8],
              v94 < (v96 - v95) >> 3)
          && (uint64_t v97 = v95 + 8 * v94, v97 != v96)
          && *(_DWORD *)(v97 + 4) == v35)
        {
          uint64_t v98 = v4[11];
          uint64_t v99 = v4[10] + 8 * v94;
        }
        else
        {
          uint64_t v98 = v4[11];
          uint64_t v99 = v98;
        }
        if (v99 == v98) {
          uint64_t v99 = 0;
        }
        uint64_t v100 = v6[4];
        if (v36 < (v6[5] - v100) >> 3
          && (uint64_t v101 = *(void *)(v100 + 8 * v36)) != 0
          && (unint64_t v102 = *(unsigned __int16 *)(v101 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v104 = v6[7],
              uint64_t v103 = v6[8],
              v102 < (v103 - v104) >> 3)
          && (uint64_t v105 = v104 + 8 * v102, v105 != v103)
          && *(_DWORD *)(v105 + 4) == v35)
        {
          uint64_t v106 = v6[11];
          uint64_t v107 = v6[10] + 8 * v102;
        }
        else
        {
          uint64_t v106 = v6[11];
          uint64_t v107 = v106;
        }
        if (v107 == v106) {
          uint64_t v107 = 0;
        }
        uint64_t v108 = v5[4];
        if (v36 < (v5[5] - v108) >> 3
          && (uint64_t v109 = *(void *)(v108 + 8 * v36)) != 0
          && (unint64_t v110 = *(unsigned __int16 *)(v109 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v112 = v5[7],
              uint64_t v111 = v5[8],
              v110 < (v111 - v112) >> 3)
          && (uint64_t v113 = v112 + 8 * v110, v113 != v111)
          && *(_DWORD *)(v113 + 4) == v35)
        {
          uint64_t v114 = v5[11];
          uint64_t v115 = v5[10] + 8 * v110;
        }
        else
        {
          uint64_t v114 = v5[11];
          uint64_t v115 = v114;
        }
        if (v115 == v114) {
          uint64_t v115 = 0;
        }
        uint64_t v116 = v7[4];
        if (v36 < (v7[5] - v116) >> 3
          && (uint64_t v117 = *(void *)(v116 + 8 * v36)) != 0
          && (unint64_t v118 = *(unsigned __int16 *)(v117 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v120 = v7[7],
              uint64_t v119 = v7[8],
              v118 < (v119 - v120) >> 3)
          && (uint64_t v121 = v120 + 8 * v118, v121 != v119)
          && *(_DWORD *)(v121 + 4) == v35)
        {
          uint64_t v122 = v7[11];
          uint64_t v123 = v7[10] + 8 * v118;
        }
        else
        {
          uint64_t v122 = v7[11];
          uint64_t v123 = v122;
        }
        if (v123 == v122) {
          uint64_t v123 = 0;
        }
        uint64_t v124 = v8[4];
        if (v36 < (v8[5] - v124) >> 3
          && (uint64_t v125 = *(void *)(v124 + 8 * v36)) != 0
          && (unint64_t v126 = *(unsigned __int16 *)(v125 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v128 = v8[7],
              uint64_t v127 = v8[8],
              v126 < (v127 - v128) >> 3)
          && (uint64_t v129 = v128 + 8 * v126, v129 != v127)
          && *(_DWORD *)(v129 + 4) == v35)
        {
          uint64_t v130 = v8[11];
          uint64_t v131 = v8[10] + 8 * v126;
        }
        else
        {
          uint64_t v130 = v8[11];
          uint64_t v131 = v130;
        }
        if (v131 == v130) {
          uint64_t v131 = 0;
        }
        uint64_t v132 = v9[4];
        if (v36 < (v9[5] - v132) >> 3
          && (uint64_t v133 = *(void *)(v132 + 8 * v36)) != 0
          && (unint64_t v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v136 = v9[7],
              uint64_t v135 = v9[8],
              v134 < (v135 - v136) >> 3)
          && (uint64_t v137 = v136 + 8 * v134, v137 != v135)
          && *(_DWORD *)(v137 + 4) == v35)
        {
          uint64_t v138 = v9[11];
          uint64_t v139 = v9[10] + 8 * v134;
        }
        else
        {
          uint64_t v138 = v9[11];
          uint64_t v139 = v138;
        }
        if (v139 == v138) {
          uint64_t v139 = 0;
        }
        uint64_t v140 = v10[4];
        if (v36 < (v10[5] - v140) >> 3
          && (uint64_t v141 = *(void *)(v140 + 8 * v36)) != 0
          && (unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * (HIDWORD(v34) & 0x7F)),
              uint64_t v143 = v10[7],
              uint64_t v144 = v10[8],
              v142 < (v144 - v143) >> 3)
          && (uint64_t v145 = v143 + 8 * v142, v145 != v144)
          && *(_DWORD *)(v145 + 4) == v35)
        {
          uint64_t v146 = v10[11];
          uint64_t v147 = v10[10] + 8 * v142;
        }
        else
        {
          uint64_t v146 = v10[11];
          uint64_t v147 = v146;
        }
        v165[0] = v55;
        if (v147 == v146) {
          uint64_t v148 = 0;
        }
        else {
          uint64_t v148 = v147;
        }
        uint64_t v175 = v73;
        uint64_t v176 = v64;
        uint64_t v173 = v91;
        uint64_t v174 = v82;
        uint64_t v171 = v107;
        uint64_t v172 = v99;
        uint64_t v169 = v123;
        uint64_t v170 = v115;
        uint64_t v167 = v139;
        uint64_t v168 = v131;
        uint64_t v166 = v148;
        uint64_t v149 = *(void *)(a2 + 24);
        if (!v149)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>>::~Model();
        }
        (*(void (**)(uint64_t, unint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v149 + 48))(v149, v46, v165, &v176, &v175, &v174, &v173, &v172, &v171, &v170, &v169, &v168, &v167, &v166);
        uint64_t v150 = v3[4];
        uint64_t v151 = v3[7];
        uint64_t v33 = (uint64_t *)v3[8];
        int v152 = (uint64_t *)(v12 + 1);
        uint64_t v30 = (void *)v162;
        BOOL v32 = (void *)v163;
        unint64_t v28 = (void *)v160;
        uint64_t v31 = (void *)v161;
        uint64_t v29 = (void *)v159;
        while (v152 != v33)
        {
          unint64_t v153 = *((unsigned int *)v152 + 1);
          uint64_t v154 = v3[8];
          if (v153 >> 7 < (v3[5] - v150) >> 3)
          {
            uint64_t v155 = *(void *)(v150 + 8 * (v153 >> 7));
            uint64_t v154 = v3[8];
            if (v155)
            {
              unint64_t v156 = *(unsigned __int16 *)(v155 + 2 * (v153 & 0x7F));
              uint64_t v154 = v3[8];
              if (((uint64_t)v33 - v151) >> 3 > v156)
              {
                uint64_t v154 = v151 + 8 * v156;
                if (*(_DWORD *)(v154 + 4) != v153) {
                  uint64_t v154 = v3[8];
                }
              }
            }
          }
          ++v152;
          if ((uint64_t *)v154 != v33)
          {
            uint64_t v33 = v152 - 1;
            break;
          }
        }
        unint64_t v12 = (unint64_t *)v33;
      }
      while (v11 != v33);
    }
  }
  else
  {
    unint64_t v21 = v13 >> 3;
    BOOL v22 = (uint64_t *)(v12 + 1);
    while (v22 != v11)
    {
      unint64_t v23 = *((unsigned int *)v22 + 1);
      unint64_t v24 = (uint64_t *)v3[8];
      if (v23 >> 7 < v16)
      {
        uint64_t v25 = *(void *)(v15 + 8 * (v23 >> 7));
        unint64_t v24 = (uint64_t *)v3[8];
        if (v25)
        {
          unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (v23 & 0x7F));
          unint64_t v24 = (uint64_t *)v3[8];
          if (v21 > v26)
          {
            unint64_t v24 = (uint64_t *)&v12[v26];
            if (*((_DWORD *)v24 + 1) != v23) {
              unint64_t v24 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v22;
      if (v24 != v11)
      {
        unint64_t v12 = (unint64_t *)(v22 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>>::~Model()
{
}

void *ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>>::each(uint64_t a1, uint64_t a2)
{
  gdc::Registry::access<gdc::ecs::Access<gdc::Read<md::ls::PendingDeletion const>,gdc::Write<md::ls::RenderableAlbedoTexture,md::ls::TextureHandleForType<Flyover::NightTexture>,md::ls::TextureHandleForType<Flyover::DiffuseTexture>,md::ls::UniqueMaterialAlbedoTexture,md::ls::UniqueMaterialEmissiveTexture,md::ls::UniqueMaterialDiffuseTexture>>>(v111, *(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint8x8_t v2 = (void *)v111[0];
  uint64_t v3 = (void *)v111[1];
  uint64_t v4 = (void *)v111[2];
  unint64_t v5 = (void *)v111[3];
  uint64_t v6 = (void *)v111[4];
  unint64_t v7 = (void *)v111[5];
  uint64_t v8 = (void *)v111[6];
  uint64_t v9 = v111[0] + 32;
  if (!v111[0]) {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(unint64_t **)(v9 + 24);
  uint64_t v10 = *(uint64_t **)(v9 + 32);
  uint64_t v109 = v9;
  if (v10 != (uint64_t *)v11)
  {
    unint64_t v12 = *((unsigned int *)v11 + 1);
    uint64_t v13 = *(void *)(v111[0] + 32);
    unint64_t v14 = (*(void *)(v111[0] + 40) - v13) >> 3;
    if (v12 >> 7 >= v14) {
      goto LABEL_11;
    }
    uint64_t v15 = *(void *)(v13 + 8 * (v12 >> 7));
    if (!v15) {
      goto LABEL_11;
    }
    unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * (v12 & 0x7F));
    uint64_t v18 = *(void *)(v111[0] + 56);
    uint64_t v17 = *(void *)(v111[0] + 64);
    if (v16 >= (v17 - v18) >> 3) {
      goto LABEL_11;
    }
    uint64_t v19 = v18 + 8 * v16;
    if (v19 == v17 || *(_DWORD *)(v19 + 4) != v12)
    {
LABEL_11:
      unint64_t v21 = (uint64_t *)(v11 + 1);
      while (1)
      {
        if (v21 == v10) {
          goto LABEL_116;
        }
        unint64_t v24 = *((unsigned int *)v21 + 1);
        if (v24 >> 7 >= v14)
        {
          uint64_t v22 = *(void *)(v111[0] + 64);
        }
        else
        {
          uint64_t v25 = *(void *)(v13 + 8 * (v24 >> 7));
          uint64_t v22 = *(void *)(v111[0] + 64);
          if (v25)
          {
            unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (v24 & 0x7F));
            uint64_t v27 = *(void *)(v111[0] + 56);
            if (v26 < (v22 - v27) >> 3)
            {
              uint64_t v28 = v27 + 8 * v26;
              if (*(_DWORD *)(v28 + 4) == v24) {
                uint64_t v23 = v28;
              }
              else {
                uint64_t v23 = *(void *)(v111[0] + 64);
              }
              goto LABEL_14;
            }
          }
        }
        uint64_t v23 = v22;
LABEL_14:
        ++v21;
        if (v23 != v22)
        {
          uint64_t v11 = (unint64_t *)(v21 - 1);
          break;
        }
      }
    }
  }
  if (v10 != (uint64_t *)v11)
  {
    uint64_t v29 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t v29 = *v11;
      unint64_t v31 = *v11;
      unint64_t v32 = HIDWORD(*v11);
      unint64_t v33 = *v11 >> 39;
      uint64_t v34 = v2[4];
      if (v33 < (v2[5] - v34) >> 3
        && (uint64_t v35 = *(void *)(v34 + 8 * v33)) != 0
        && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v31) & 0x7F)),
            uint64_t v38 = v2[7],
            uint64_t v37 = v2[8],
            v36 < (v37 - v38) >> 3)
        && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v32) : (v40 = 0), v40))
      {
        unint64_t v41 = v2[11];
        unint64_t v42 = v2[10] + v36;
      }
      else
      {
        unint64_t v41 = v2[11];
        unint64_t v42 = v41;
      }
      if (v42 == v41) {
        unint64_t v43 = 0;
      }
      else {
        unint64_t v43 = v42;
      }
      uint64_t v44 = v3[4];
      if (v33 < (v3[5] - v44) >> 3
        && (uint64_t v45 = *(void *)(v44 + 8 * v33)) != 0
        && (unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v31) & 0x7F)),
            uint64_t v48 = v3[7],
            uint64_t v47 = v3[8],
            v46 < (v47 - v48) >> 3)
        && ((uint64_t v49 = v48 + 8 * v46, v49 != v47) ? (v50 = *(_DWORD *)(v49 + 4) == v32) : (v50 = 0), v50))
      {
        uint64_t v51 = v3[11];
        uint64_t v52 = v3[10] + 24 * v46;
      }
      else
      {
        uint64_t v51 = v3[11];
        uint64_t v52 = v51;
      }
      if (v52 == v51) {
        uint64_t v52 = 0;
      }
      uint64_t v53 = v4[4];
      if (v33 < (v4[5] - v53) >> 3
        && (uint64_t v54 = *(void *)(v53 + 8 * v33)) != 0
        && (unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * (HIDWORD(v31) & 0x7F)),
            uint64_t v57 = v4[7],
            uint64_t v56 = v4[8],
            v55 < (v56 - v57) >> 3)
        && ((uint64_t v58 = v57 + 8 * v55, v58 != v56) ? (v59 = *(_DWORD *)(v58 + 4) == v32) : (v59 = 0), v59))
      {
        uint64_t v60 = v4[11];
        uint64_t v61 = v4[10] + 8 * v55;
      }
      else
      {
        uint64_t v60 = v4[11];
        uint64_t v61 = v60;
      }
      if (v61 == v60) {
        uint64_t v61 = 0;
      }
      uint64_t v62 = v5[4];
      if (v33 < (v5[5] - v62) >> 3
        && (uint64_t v63 = *(void *)(v62 + 8 * v33)) != 0
        && (unint64_t v64 = *(unsigned __int16 *)(v63 + 2 * (HIDWORD(v31) & 0x7F)),
            uint64_t v66 = v5[7],
            uint64_t v65 = v5[8],
            v64 < (v65 - v66) >> 3)
        && ((uint64_t v67 = v66 + 8 * v64, v67 != v65) ? (v68 = *(_DWORD *)(v67 + 4) == v32) : (v68 = 0), v68))
      {
        uint64_t v69 = v5[11];
        uint64_t v70 = v5[10] + 8 * v64;
      }
      else
      {
        uint64_t v69 = v5[11];
        uint64_t v70 = v69;
      }
      if (v70 == v69) {
        uint64_t v70 = 0;
      }
      uint64_t v71 = v6[4];
      if (v33 < (v6[5] - v71) >> 3
        && (uint64_t v72 = *(void *)(v71 + 8 * v33)) != 0
        && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v31) & 0x7F)),
            uint64_t v75 = v6[7],
            uint64_t v74 = v6[8],
            v73 < (v74 - v75) >> 3)
        && ((uint64_t v76 = v75 + 8 * v73, v76 != v74) ? (v77 = *(_DWORD *)(v76 + 4) == v32) : (v77 = 0), v77))
      {
        uint64_t v78 = v6[11];
        uint64_t v79 = v6[10] + 8 * v73;
      }
      else
      {
        uint64_t v78 = v6[11];
        uint64_t v79 = v78;
      }
      if (v79 == v78) {
        uint64_t v79 = 0;
      }
      uint64_t v80 = v7[4];
      if (v33 < (v7[5] - v80) >> 3
        && (uint64_t v81 = *(void *)(v80 + 8 * v33)) != 0
        && (unint64_t v82 = *(unsigned __int16 *)(v81 + 2 * (HIDWORD(v31) & 0x7F)),
            uint64_t v84 = v7[7],
            uint64_t v83 = v7[8],
            v82 < (v83 - v84) >> 3)
        && ((v85 = v84 + 8 * v82, v85 != v83) ? (BOOL v86 = *(_DWORD *)(v85 + 4) == v32) : (BOOL v86 = 0), v86))
      {
        uint64_t v87 = v7[11];
        uint64_t v88 = v7[10] + 8 * v82;
      }
      else
      {
        uint64_t v87 = v7[11];
        uint64_t v88 = v87;
      }
      if (v88 == v87) {
        uint64_t v88 = 0;
      }
      uint64_t v89 = v8[4];
      if (v33 < (v8[5] - v89) >> 3
        && (uint64_t v90 = *(void *)(v89 + 8 * v33)) != 0
        && (unint64_t v91 = *(unsigned __int16 *)(v90 + 2 * (HIDWORD(v31) & 0x7F)),
            uint64_t v93 = v8[7],
            uint64_t v92 = v8[8],
            v91 < (v92 - v93) >> 3)
        && (uint64_t v94 = v93 + 8 * v91, v94 != v92)
        && *(_DWORD *)(v94 + 4) == v32)
      {
        uint64_t v95 = v8[11];
        uint64_t v96 = v8[10] + 8 * v91;
      }
      else
      {
        uint64_t v95 = v8[11];
        uint64_t v96 = v95;
      }
      if (v96 == v95) {
        uint64_t v97 = 0;
      }
      else {
        uint64_t v97 = v96;
      }
      v111[0] = v52;
      uint64_t v116 = v61;
      uint64_t v114 = v79;
      uint64_t v115 = v70;
      uint64_t v112 = v97;
      uint64_t v113 = v88;
      uint64_t v98 = *(void *)(a2 + 24);
      if (!v98)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>>::~Model();
      }
      (*(void (**)(uint64_t, unint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v98 + 48))(v98, v43, v111, &v116, &v115, &v114, &v113, &v112);
      uint64_t v30 = *(uint64_t **)(v109 + 32);
      uint64_t v99 = (uint64_t *)(v11 + 1);
      while (v99 != v30)
      {
        unint64_t v102 = *((unsigned int *)v99 + 1);
        uint64_t v103 = v2[4];
        if (v102 >> 7 >= (v2[5] - v103) >> 3)
        {
          uint64_t v100 = v2[8];
        }
        else
        {
          uint64_t v104 = *(void *)(v103 + 8 * (v102 >> 7));
          uint64_t v100 = v2[8];
          if (v104)
          {
            unint64_t v105 = *(unsigned __int16 *)(v104 + 2 * (v102 & 0x7F));
            uint64_t v106 = v2[7];
            if (v105 < (v100 - v106) >> 3)
            {
              uint64_t v107 = v106 + 8 * v105;
              if (*(_DWORD *)(v107 + 4) == v102) {
                uint64_t v101 = v107;
              }
              else {
                uint64_t v101 = v2[8];
              }
              goto LABEL_102;
            }
          }
        }
        uint64_t v101 = v100;
LABEL_102:
        ++v99;
        if (v101 != v100)
        {
          uint64_t v30 = v99 - 1;
          break;
        }
      }
      uint64_t v11 = (unint64_t *)v30;
    }
    while (v10 != v30);
  }
LABEL_116:
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>::Model<ecs2::RuntimeQuery<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>>::~Model()
{
}

void *ecs2::Query<md::ls::RequestReset const&>::Model<ecs2::RuntimeQuery<md::ls::RequestReset const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::RequestReset>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v4 = v3;
  uint64_t v6 = (unint64_t *)v3[7];
  unint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((uint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      unint64_t v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *unint64_t v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          unint64_t v33 = v4[11];
          unint64_t v34 = v4[10] + v27;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          unint64_t v33 = v4[11];
          unint64_t v34 = v33;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35) {
            goto LABEL_44;
          }
        }
        if (v34 == v33) {
          unint64_t v36 = 0;
        }
        else {
          unint64_t v36 = v34;
        }
        (*(void (**)(uint64_t, unint64_t))(*(void *)v35 + 48))(v35, v36);
        uint64_t v37 = v4[4];
        uint64_t v38 = v4[7];
        uint64_t v22 = (uint64_t *)v4[8];
        uint64_t v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          unint64_t v40 = *((unsigned int *)v39 + 1);
          uint64_t v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            uint64_t v42 = *(void *)(v37 + 8 * (v40 >> 7));
            uint64_t v41 = v4[8];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                uint64_t v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != v40) {
                  uint64_t v41 = v4[8];
                }
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            uint64_t v22 = v39 - 1;
            break;
          }
        }
        uint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    unint64_t v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      uint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        uint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          uint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            uint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              uint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        uint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::TexturesToDisconnect>(int8x8_t *a1)
{
  unint64_t v10 = 0x9A2CF0F3E5B1FB4ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9A2CF0F3E5B1FB4ELL;
    if (*(void *)&v1 <= 0x9A2CF0F3E5B1FB4ELL) {
      unint64_t v3 = 0x9A2CF0F3E5B1FB4ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9A2CF0F3E5B1FB4ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9A2CF0F3E5B1FB4ELL)
      {
        if (v5[2] == 0x9A2CF0F3E5B1FB4ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9A2CF0F3E5B1FB4ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9A2CF0F3E5B1FB4ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A07B84(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0,std::allocator<md::ita::DisconnectComponents::operator()(ecs2::Query<md::ls::RequestReset const&>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableMaterialData *,md::ls::RampMaterialData *,md::ls::ColorDataHandle *,md::ls::UniqueMaterialVisibilityOptionsHandle *,md::ls::UniqueMaterialZIndexHandle *,md::ls::UniqueColorDataHandle *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::PositionScaleInfoConstantDataHandle *,md::ls::StyleRouteLineMaskConstantDataHandle *,md::ls::StyleConstantHandle *,md::ls::LandCoverSettingsConstantDataHandle *,md::ls::StyleGroundOcclusionConstantDataHandle *,md::ls::ColorRampDataHandle *,md::ls::NormalsHandle *,md::ls::UVsHandle *,md::ls::ElevationHandle *,md::ls::InstanceTransformHandle *,md::ls::UniqueStyleEmissiveDataKeyHandle *,md::ls::NeedsClimateTint *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::RenderableAlbedoTexture *,md::ls::TextureHandleForType<Flyover::NightTexture> *,md::ls::TextureHandleForType<Flyover::DiffuseTexture> *,md::ls::UniqueMaterialAlbedoTexture *,md::ls::UniqueMaterialEmissiveTexture *,md::ls::UniqueMaterialDiffuseTexture *>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::TexturesToDisconnect &>,ecs2::Query<md::ls::PendingDeletion const&,md::ls::ColorRampDataHandle&>)::$_0>,void ()(md::ls::RequestReset const&)>::operator()()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *(void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint8x8_t v2 = *v1;
  v4[0] = v0;
  int v5 = 2;
  ecs2::Runtime::queueCommand(v2, (uint64_t)v4);
  if (v5 != -1) {
    ((void (*)(char *, void *))off_1EF591450[v5])(&v3, v4);
  }
}

uint64_t std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::StyleManagerEvent)>::operator()(uint64_t result, unsigned char *a2)
{
  if (*a2 == 3) {
    **(unsigned char **)(result + 8) = 1;
  }
  return result;
}

void sub_1A1A07D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 GPUStartTime];
  atomic_store(v3, *(unint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48));
}

void sub_1A1A07E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_8(void *a1, void *a2)
{
  id v3 = a2;
  id v11 = v3;
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    [v3 GPUStartTime];
    atomic_store(v4, *(unint64_t **)(*(void *)(a1[6] + 8) + 48));
    id v3 = v11;
  }
  [v3 GPUEndTime];
  double v6 = v5;
  double v7 = COERCE_DOUBLE(atomic_load(*(unint64_t **)(*(void *)(a1[6] + 8) + 48)));
  uint64_t v8 = [v11 error];
  uint64_t v9 = v8;
  if (v8)
  {
    unint64_t v10 = [v8 domain];
    if (v10 == (void *)*MEMORY[0x1E4F35170]) {
      [v9 code];
    }
  }
  (*(void (**)(double))(a1[4] + 16))(v6 - v7);
}

void sub_1A1A07F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_6(void *a1, int a2, void *a3, double a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  uint64_t v9 = a1[6];
  uint64_t v8 = a1[7];
  atomic_store(2u, (unsigned int *)(v8 + 8));
  unsigned int v10 = atomic_load((unsigned int *)(v8 + 8));
  if (v10 == 2 && (uint64_t v11 = *(void *)(v8 + 56)) != 0)
  {
    *(void *)&long long block = *(void *)v8;
    double v25 = a4;
    int v24 = a2;
    (*(void (**)(uint64_t, long long *, double *, int *))(*(void *)v11 + 48))(v11, &block, &v25, &v24);
  }
  else
  {
    unsigned int v12 = atomic_load((unsigned int *)(v8 + 8));
    if (v12 == 1)
    {
      uint64_t v13 = *(void *)(v8 + 88);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      }
    }
  }
  atomic_store(1u, *(unsigned __int8 **)(a1[7] + 16));
  uint64_t v14 = *(void *)(*(void *)(v9 + 16) + 80);
  uint64_t v15 = *(void *)(*(void *)(a1[4] + 8) + 24);
  unint64_t v16 = *(NSObject **)(v14 + 272);
  *(void *)&long long block = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 3221225472;
  unint64_t v27 = ___ZN3ggl20MetalResourceManager22commandBufferCompletedEy_block_invoke;
  uint64_t v28 = &__block_descriptor_48_e5_v8__0l;
  uint64_t v29 = v14;
  uint64_t v30 = v15;
  dispatch_async(v16, &block);
  unint64_t v17 = *(uint64_t **)(*(void *)(a1[5] + 8) + 48);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  while (v18 != v19)
  {
    if (*(void *)(v18 + 24))
    {
      *(void *)&long long block = v7;
      uint64_t v20 = *(void *)(v18 + 24);
      if (!v20)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v20 + 48))(v20, &block);
    }
    v18 += 32;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v9 + 64));
  if (GEOGetGeoGLPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_5_53372);
  }
  unint64_t v21 = (id)GEOGetGeoGLPerformanceLog_log;
  uint64_t v22 = v21;
  os_signpost_id_t v23 = *(void *)(*(void *)(a1[4] + 8) + 24);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
  {
    LODWORD(block) = 134217984;
    *(double *)((char *)&block + 4) = a4 * 1000.0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v22, OS_SIGNPOST_INTERVAL_END, v23, "GPUFrame", "time=%f", (uint8_t *)&block, 0xCu);
  }
}

void sub_1A1A0825C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::operator()(uint64_t a1, unint64_t *a2, double *a3, int *a4)
{
  unint64_t v5 = *a2;
  double v6 = *a3;
  int v7 = *a4;
  uint64_t v8 = +[VKSharedResourcesManager sharedResourcesCreateIfNil:0 addResourceUser:0];
  uint64_t v9 = v8;
  if (v8) {
    [v8 frameDidComplete:*(void *)(a1 + 72)];
  }
  unsigned int v10 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v10)
  {
    uint64_t v11 = 0;
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 48);
    if (v13) {
      goto LABEL_8;
    }
LABEL_21:
    uint64_t v14 = 0;
    unint64_t v16 = *(std::__shared_weak_count **)(a1 + 64);
    if (v16) {
      goto LABEL_12;
    }
LABEL_22:
    unint64_t v17 = 0;
    unint64_t v21 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v21) {
      goto LABEL_35;
    }
    goto LABEL_23;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v10);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 24);
    if (v12) {
      gdc::Statistics::addSampleValue(v12, "GPU Frame-time", 0x4A6892FD0000000EuLL, v6 * 1000.0);
    }
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v13) {
    goto LABEL_21;
  }
LABEL_8:
  uint64_t v14 = std::__shared_weak_count::lock(v13);
  if (v14)
  {
    uint64_t v15 = *(unint64_t **)(a1 + 40);
    if (v15) {
      atomic_store(v5, v15);
    }
  }
  unint64_t v16 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v16) {
    goto LABEL_22;
  }
LABEL_12:
  unint64_t v17 = std::__shared_weak_count::lock(v16);
  if (!v17 || (uint64_t v18 = *(void *)(a1 + 56)) == 0)
  {
LABEL_18:
    unint64_t v21 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v21)
    {
LABEL_35:
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }

      return;
    }
LABEL_23:
    uint64_t v22 = std::__shared_weak_count::lock(v21);
    if (!v22) {
      goto LABEL_35;
    }
    os_signpost_id_t v23 = v22;
    int v24 = *(unsigned __int8 **)(a1 + 8);
    if (v24)
    {
      if (v7 == 1)
      {
        unsigned __int8 v25 = atomic_load(v24);
        if ((v25 & 1) == 0)
        {
          atomic_store(1u, v24);
          v30[0] = MEMORY[0x1E4F143A8];
          v30[1] = 3321888768;
          v30[2] = ___ZZN2md9MapEngine19_produceRenderQueueEvENK3__0clEmdN3ggl28RenderTransactionErrorStatusE_block_invoke;
          v30[3] = &__block_descriptor_48_ea8_32c56_ZTSNSt3__110shared_ptrIN2md9MapEngine13AnalyticsInfoEEE_e19___NSDictionary_8__0l;
          v30[4] = v24;
          uint64_t v31 = v22;
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          vkAnalyticsSendEventLazy(v30);
          uint64_t v26 = v31;
          if (!v31) {
            goto LABEL_33;
          }
LABEL_31:
          if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          goto LABEL_33;
        }
      }
      unsigned __int8 v27 = atomic_load(v24);
      if (v27)
      {
        atomic_store(0, v24);
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 3321888768;
        v28[2] = ___ZZN2md9MapEngine19_produceRenderQueueEvENK3__0clEmdN3ggl28RenderTransactionErrorStatusE_block_invoke_662;
        v28[3] = &__block_descriptor_48_ea8_32c56_ZTSNSt3__110shared_ptrIN2md9MapEngine13AnalyticsInfoEEE_e19___NSDictionary_8__0l;
        v28[4] = v24;
        uint64_t v29 = v22;
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        vkAnalyticsSendEventLazy(v28);
        uint64_t v26 = v29;
        if (v29) {
          goto LABEL_31;
        }
      }
    }
LABEL_33:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_35;
  }
  std::mutex::lock(*(std::mutex **)(a1 + 56));
  uint64_t v19 = *(void **)(v18 + 88);
  if (!v19)
  {
LABEL_17:
    std::mutex::unlock((std::mutex *)v18);
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v32 = v5;
    uint64_t v20 = v19[6];
    if (!v20) {
      break;
    }
    (*(void (**)(uint64_t, unint64_t *))(*(void *)v20 + 48))(v20, &v32);
    uint64_t v19 = (void *)*v19;
    if (!v19) {
      goto LABEL_17;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A1A0867C(_Unwind_Exception *a1)
{
  uint64_t v8 = *v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0>,void ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *a2;
  std::mutex::lock((std::mutex *)(v2 + 64));
  unint64_t v4 = *(uint64_t **)(v2 + 136);
  if (v4)
  {
    unint64_t v5 = (uint64_t *)(v2 + 136);
    double v6 = *(void **)(v2 + 136);
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 > v3;
      if (v7 <= v3) {
        uint64_t v9 = v6 + 1;
      }
      else {
        uint64_t v9 = v6;
      }
      if (v8) {
        unint64_t v5 = v6;
      }
      double v6 = (void *)*v9;
    }
    while (*v9);
    unsigned int v10 = (uint64_t *)(v2 + 136);
    uint64_t v11 = *(void **)(v2 + 136);
    do
    {
      unint64_t v12 = v11[4];
      BOOL v13 = v12 >= v3;
      if (v12 >= v3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = v11 + 1;
      }
      if (v13) {
        unsigned int v10 = v11;
      }
      uint64_t v11 = (void *)*v14;
    }
    while (*v14);
    if (v10 != (uint64_t *)(v2 + 136) && v10[4] <= v3)
    {
      uint64_t v15 = (uint64_t *)v10[1];
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        unint64_t v17 = v10;
        do
        {
          unint64_t v16 = (uint64_t *)v17[2];
          BOOL v18 = *v16 == (void)v17;
          unint64_t v17 = v16;
        }
        while (!v18);
      }
      if (*(uint64_t **)(v2 + 128) == v10) {
        *(void *)(v2 + 128) = v16;
      }
      --*(void *)(v2 + 144);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v4, v10);
      operator delete(v10);
    }
  }
  else
  {
    unint64_t v5 = (uint64_t *)(v2 + 136);
  }
  uint64_t v19 = *(uint64_t **)(v2 + 128);
  if (v19 != v5)
  {
    uint64_t v20 = (uint64_t **)(v2 + 160);
    do
    {
      uint64_t v22 = *v20;
      if (*v20)
      {
        unint64_t v23 = v19[4];
        do
        {
          unint64_t v24 = v22[4];
          if (v23 >= v24)
          {
            if (v24 >= v23)
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              unsigned __int8 v25 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                uint64_t v26 = v19[4];
                *(_DWORD *)buf = 134217984;
                uint64_t v51 = v26;
                _os_log_impl(&dword_1A1780000, v25, OS_LOG_TYPE_ERROR, "Received frame for orphaned framestamp %lu", buf, 0xCu);
              }

              unsigned __int8 v27 = *v20;
              if (*v20)
              {
                unint64_t v28 = v19[4];
                uint64_t v29 = (uint64_t *)(v2 + 160);
                uint64_t v30 = *v20;
                do
                {
                  unint64_t v31 = v30[4];
                  BOOL v32 = v31 >= v28;
                  if (v31 >= v28) {
                    unint64_t v33 = (uint64_t **)v30;
                  }
                  else {
                    unint64_t v33 = (uint64_t **)(v30 + 1);
                  }
                  if (v32) {
                    uint64_t v29 = v30;
                  }
                  uint64_t v30 = *v33;
                }
                while (*v33);
                if (v29 != (uint64_t *)v20 && v28 >= v29[4])
                {
                  unint64_t v34 = (uint64_t *)v29[1];
                  uint64_t v35 = v29;
                  if (v34)
                  {
                    do
                    {
                      unint64_t v36 = v34;
                      unint64_t v34 = (uint64_t *)*v34;
                    }
                    while (v34);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v36 = (uint64_t *)v35[2];
                      BOOL v18 = *v36 == (void)v35;
                      uint64_t v35 = v36;
                    }
                    while (!v18);
                  }
                  if (*(uint64_t **)(v2 + 152) == v29) {
                    *(void *)(v2 + 152) = v36;
                  }
                  --*(void *)(v2 + 168);
                  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v27, v29);
                  operator delete(v29);
                }
              }
              uint64_t v49 = (uint64_t *)v19[1];
              if (v49)
              {
                do
                {
                  uint64_t v48 = v49;
                  uint64_t v49 = (uint64_t *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  uint64_t v48 = (uint64_t *)v19[2];
                  BOOL v18 = *v48 == (void)v19;
                  uint64_t v19 = v48;
                }
                while (!v18);
              }
              goto LABEL_32;
            }
            ++v22;
          }
          uint64_t v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v37 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v38 = v19[4];
        *(_DWORD *)buf = 134217984;
        uint64_t v51 = v38;
        _os_log_impl(&dword_1A1780000, v37, OS_LOG_TYPE_DEBUG, "Dropped copy items for framestamp %lu", buf, 0xCu);
      }

      uint64_t v39 = *v20;
      unint64_t v40 = v19[4];
      uint64_t v41 = (uint64_t **)(v2 + 160);
      uint64_t v42 = (uint64_t **)(v2 + 160);
      if (*v20)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v42 = (uint64_t **)v39;
            unint64_t v43 = v39[4];
            if (v40 >= v43) {
              break;
            }
            uint64_t v39 = *v42;
            uint64_t v41 = v42;
            if (!*v42) {
              goto LABEL_68;
            }
          }
          if (v43 >= v40) {
            break;
          }
          uint64_t v39 = v42[1];
          if (!v39)
          {
            uint64_t v41 = v42 + 1;
            goto LABEL_68;
          }
        }
      }
      else
      {
LABEL_68:
        uint64_t v44 = (uint64_t *)operator new(0x28uLL);
        v44[4] = v40;
        uint64_t *v44 = 0;
        v44[1] = 0;
        v44[2] = (uint64_t)v42;
        *uint64_t v41 = v44;
        uint64_t v45 = **(void **)(v2 + 152);
        if (v45)
        {
          *(void *)(v2 + 152) = v45;
          uint64_t v44 = *v41;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v44);
        ++*(void *)(v2 + 168);
      }
      unint64_t v46 = (uint64_t *)v19[1];
      uint64_t v47 = v19;
      if (v46)
      {
        do
        {
          uint64_t v48 = v46;
          unint64_t v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          uint64_t v48 = (uint64_t *)v47[2];
          BOOL v18 = *v48 == (void)v47;
          uint64_t v47 = v48;
        }
        while (!v18);
      }
      if (*(uint64_t **)(v2 + 128) == v19) {
        *(void *)(v2 + 128) = v48;
      }
      unint64_t v21 = *(uint64_t **)(v2 + 136);
      --*(void *)(v2 + 144);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v21, v19);
      operator delete(v19);
LABEL_32:
      uint64_t v19 = v48;
    }
    while (v48 != v5);
  }
  std::mutex::unlock((std::mutex *)(v2 + 64));
}

void sub_1A1A08C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

void sub_1A1A08CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1A08D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1A08E98(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::onRenderTimerFired(double,std::function<void ()(void)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(md::MapEngine **)(a1 + 8);
  double v2 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - *(void *)(a1 + 16)) * 0.000001;
  gdc::Statistics::addSampleValue(*((void *)v1 + 143), "Frame-time", 0x77E34BC70000000AuLL, v2);
  gdc::Statistics::addHistogramValue(*((void *)v1 + 143), "Frame-time", 0x77E34BC70000000AuLL, v2, 1.0);
  if (v2 > 16.6666667)
  {
    gdc::Statistics::addSampleValue(*((void *)v1 + 143), "Frame-drops", 0xCDB00E350000000BLL, 1.0);
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    unint64_t v3 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v3))
    {
      int v11 = 134217984;
      double v12 = v2;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FrameDrop", "frameTime=%f", (uint8_t *)&v11, 0xCu);
    }
  }
  if (*((void *)v1 + 103))
  {
    uint64_t v4 = *((void *)v1 + 143);
    if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
      dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
    }
    unint64_t v5 = atomic_load((unint64_t *)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 24));
    gdc::Statistics::addSampleValue(v4, "Primitives", 0x4573984A0000000AuLL, (double)v5);
    uint64_t v6 = *((void *)v1 + 143);
    if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
      dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
    }
    unint64_t v7 = atomic_load((unint64_t *)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 16));
    gdc::Statistics::addSampleValue(v6, "Draw-calls", 0x38B3D7050000000AuLL, (double)v7);
  }
  md::MapEngine::updateRunLoopStatus(v1);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  BOOL v8 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v9 = v8;
  os_signpost_id_t v10 = *((void *)v1 + 152);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v11) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v9, OS_SIGNPOST_INTERVAL_END, v10, "Frame", "", (uint8_t *)&v11, 2u);
  }
}

void gdc::Statistics::addSampleValue(uint64_t a1, const void *a2, unint64_t a3, double a4)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v5 & 1) == 0) {
    return;
  }
  uint64_t v9 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  unint64_t v10 = HIDWORD(a3);
  unint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = HIDWORD(a3);
      if (v11 <= v10) {
        unint64_t v13 = v10 % v11;
      }
    }
    else
    {
      unint64_t v13 = (v11 - 1) & HIDWORD(a3);
    }
    uint64_t v14 = *(double ***)(*(void *)(a1 + 72) + 8 * v13);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = *((void *)v15 + 1);
            if (v17 == v10)
            {
              if (*((void *)v15 + 3) == a3 && !memcmp(*((const void **)v15 + 2), a2, a3)) {
                goto LABEL_25;
              }
            }
            else if ((v17 & (v11 - 1)) != v13)
            {
              goto LABEL_27;
            }
            uint64_t v15 = *(double **)v15;
            if (!v15) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (*((void *)v15 + 3) == a3 && !memcmp(*((const void **)v15 + 2), a2, a3))
            {
LABEL_25:
              unint64_t v18 = *((void *)v15 + 8);
              if (v18)
              {
                double v19 = fmax(v15[5], a4);
                v15[4] = fmin(v15[4], a4);
                v15[5] = v19;
                double v20 = (double)v18;
                double v21 = v15[6] + a4 / (double)v18;
                unint64_t v22 = v18 + 1;
                double v23 = v21 * v20 / (double)v22;
                double v24 = v15[7] + a4;
                v15[6] = v23;
                v15[7] = v24;
                *((void *)v15 + 8) = v22;
              }
              else
              {
                v15[4] = a4;
                v15[5] = a4;
                v15[6] = a4;
                v15[7] = a4;
                *((void *)v15 + 8) = 1;
              }
              goto LABEL_109;
            }
          }
          else
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
            if (v16 != v13) {
              break;
            }
          }
          uint64_t v15 = *(double **)v15;
        }
        while (v15);
      }
    }
LABEL_27:
    int64x2_t v62 = vdupq_lane_s64(*(uint64_t *)&a4, 0);
    uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      unint64_t v4 = HIDWORD(a3);
      if (v11 <= v10) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & HIDWORD(a3);
    }
    uint64_t v26 = *(uint64_t ****)(*(void *)(a1 + 72) + 8 * v4);
    if (v26)
    {
      unsigned __int8 v27 = *v26;
      if (*v26)
      {
        if (v25.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v29 = v27[1];
            if (v29 == (uint64_t *)v10)
            {
              if (v27[3] == (uint64_t *)a3 && !memcmp(v27[2], a2, a3)) {
                goto LABEL_109;
              }
            }
            else if (((unint64_t)v29 & (v11 - 1)) != v4)
            {
              goto LABEL_49;
            }
            unsigned __int8 v27 = (uint64_t **)*v27;
            if (!v27) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v28 = (unint64_t)v27[1];
          if (v28 == v10)
          {
            if (v27[3] == (uint64_t *)a3 && !memcmp(v27[2], a2, a3)) {
              goto LABEL_109;
            }
          }
          else
          {
            if (v28 >= v11) {
              v28 %= v11;
            }
            if (v28 != v4) {
              break;
            }
          }
          unsigned __int8 v27 = (uint64_t **)*v27;
        }
        while (v27);
      }
    }
  }
  else
  {
    int64x2_t v62 = vdupq_lane_s64(*(uint64_t *)&a4, 0);
  }
LABEL_49:
  uint64_t v30 = (int64x2_t *)operator new(0x48uLL);
  v30->i64[0] = 0;
  v30->i64[1] = v10;
  v30[1].i64[0] = (uint64_t)a2;
  v30[1].i64[1] = a3;
  v30[2] = v62;
  v30[3] = v62;
  v30[4].i64[0] = 1;
  float v31 = (float)(unint64_t)(*(void *)(a1 + 96) + 1);
  float v32 = *(float *)(a1 + 104);
  if (!v11 || (float)(v32 * (float)v11) < v31)
  {
    BOOL v33 = 1;
    if (v11 >= 3) {
      BOOL v33 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v11);
    unint64_t v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 80);
    }
    if (prime <= v11)
    {
      if (prime >= v11) {
        goto LABEL_86;
      }
      unint64_t v49 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
      if (v11 < 3 || (uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        unint64_t v49 = std::__next_prime(v49);
      }
      else
      {
        uint64_t v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2) {
          unint64_t v49 = v51;
        }
      }
      if (prime <= v49) {
        size_t prime = v49;
      }
      if (prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 80);
LABEL_86:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v11 <= v10) {
            unint64_t v4 = v10 % v11;
          }
          else {
            unint64_t v4 = v10;
          }
        }
        else
        {
          unint64_t v4 = (v11 - 1) & v10;
        }
        goto LABEL_99;
      }
      if (!prime)
      {
        uint64_t v60 = *(void **)(a1 + 72);
        *(void *)(a1 + 72) = 0;
        if (v60) {
          operator delete(v60);
        }
        unint64_t v11 = 0;
        *(void *)(a1 + 80) = 0;
        goto LABEL_86;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v37 = operator new(8 * prime);
    uint64_t v38 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v37;
    if (v38) {
      operator delete(v38);
    }
    uint64_t v39 = 0;
    *(void *)(a1 + 80) = prime;
    do
      *(void *)(*(void *)(a1 + 72) + 8 * v39++) = 0;
    while (prime != v39);
    uint64_t v41 = a1 + 88;
    unint64_t v40 = *(void **)(a1 + 88);
    if (!v40)
    {
LABEL_85:
      unint64_t v11 = prime;
      goto LABEL_86;
    }
    size_t v42 = v40[1];
    size_t v43 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v44 = v42 & v43;
      *(void *)(*(void *)(a1 + 72) + 8 * v44) = v41;
      for (uint64_t i = (void *)*v40; *v40; uint64_t i = (void *)*v40)
      {
        size_t v46 = i[1] & v43;
        if (v46 == v44)
        {
          unint64_t v40 = i;
        }
        else
        {
          uint64_t v47 = *(void *)(a1 + 72);
          if (*(void *)(v47 + 8 * v46))
          {
            *unint64_t v40 = *i;
            uint64_t v48 = 8 * v46;
            *uint64_t i = **(void **)(*(void *)(a1 + 72) + v48);
            **(void **)(*(void *)(a1 + 72) + v48) = i;
          }
          else
          {
            *(void *)(v47 + 8 * v46) = v40;
            unint64_t v40 = i;
            size_t v44 = v46;
          }
        }
      }
      goto LABEL_85;
    }
    if (v42 >= prime) {
      v42 %= prime;
    }
    *(void *)(*(void *)(a1 + 72) + 8 * v42) = v41;
    uint64_t v52 = (void *)*v40;
    if (!*v40) {
      goto LABEL_85;
    }
    while (1)
    {
      size_t v54 = v52[1];
      if (v54 >= prime) {
        v54 %= prime;
      }
      if (v54 != v42)
      {
        uint64_t v55 = *(void *)(a1 + 72);
        if (!*(void *)(v55 + 8 * v54))
        {
          *(void *)(v55 + 8 * v54) = v40;
          goto LABEL_90;
        }
        *unint64_t v40 = *v52;
        uint64_t v53 = 8 * v54;
        *uint64_t v52 = **(void **)(*(void *)(a1 + 72) + v53);
        **(void **)(*(void *)(a1 + 72) + v53) = v52;
        uint64_t v52 = v40;
      }
      size_t v54 = v42;
LABEL_90:
      unint64_t v40 = v52;
      uint64_t v52 = (void *)*v52;
      size_t v42 = v54;
      if (!v52) {
        goto LABEL_85;
      }
    }
  }
LABEL_99:
  uint64_t v56 = *(void *)(a1 + 72);
  uint64_t v57 = *(int64x2_t ***)(v56 + 8 * v4);
  if (v57)
  {
    v30->i64[0] = (uint64_t)*v57;
  }
  else
  {
    uint64_t v58 = *(void *)(a1 + 88);
    v30->i64[0] = v58;
    *(void *)(a1 + 88) = v30;
    *(void *)(v56 + 8 * v4) = a1 + 88;
    if (!v58) {
      goto LABEL_108;
    }
    unint64_t v59 = *(void *)(v58 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v59 >= v11) {
        v59 %= v11;
      }
    }
    else
    {
      v59 &= v11 - 1;
    }
    uint64_t v57 = (int64x2_t **)(*(void *)(a1 + 72) + 8 * v59);
  }
  *uint64_t v57 = v30;
LABEL_108:
  ++*(void *)(a1 + 96);
LABEL_109:
  std::mutex::unlock(v9);
}

void gdc::Statistics::addHistogramValue(uint64_t a1, const void *a2, unint64_t a3, double a4, double a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 153));
  if ((v5 & 1) == 0) {
    return;
  }
  uint64_t v9 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int8x8_t v10 = *(int8x8_t *)(a1 + 120);
  if (!*(void *)&v10) {
    goto LABEL_27;
  }
  unint64_t v11 = HIDWORD(a3);
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = HIDWORD(a3);
    if (*(void *)&v10 <= v11) {
      unint64_t v13 = v11 % *(void *)&v10;
    }
  }
  else
  {
    unint64_t v13 = (v10.i32[0] - 1) & HIDWORD(a3);
  }
  uint64_t v14 = *(uint64_t ****)(*(void *)(a1 + 112) + 8 * v13);
  if (!v14 || (uint64_t v15 = *v14) == 0)
  {
LABEL_27:
    double v19 = (double *)operator new(0x70uLL);
    *double v19 = 0.0;
    v19[1] = 0.0;
    *((void *)v19 + 2) = a2;
    *((void *)v19 + 3) = a3;
    v19[5] = a5;
    *((_OWORD *)v19 + 3) = 0u;
    *((void *)v19 + 4) = &unk_1EF558F50;
    *((_OWORD *)v19 + 4) = 0u;
    *((_DWORD *)v19 + 20) = 1065353216;
    *((unsigned char *)v19 + 88) = 0;
    v19[13] = 0.0;
    operator new();
  }
  if (v12.u32[0] < 2uLL)
  {
    uint64_t v16 = *(void *)&v10 - 1;
    while (1)
    {
      unint64_t v18 = v15[1];
      if (v18 == (uint64_t *)v11)
      {
        if (v15[3] == (uint64_t *)a3 && !memcmp(v15[2], a2, a3)) {
          goto LABEL_24;
        }
      }
      else if (((unint64_t)v18 & v16) != v13)
      {
        goto LABEL_27;
      }
      uint64_t v15 = (uint64_t **)*v15;
      if (!v15) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v17 = (unint64_t)v15[1];
    if (v17 == v11) {
      break;
    }
    if (v17 >= *(void *)&v10) {
      v17 %= *(void *)&v10;
    }
    if (v17 != v13) {
      goto LABEL_27;
    }
LABEL_12:
    uint64_t v15 = (uint64_t **)*v15;
    if (!v15) {
      goto LABEL_27;
    }
  }
  if (v15[3] != (uint64_t *)a3 || memcmp(v15[2], a2, a3)) {
    goto LABEL_12;
  }
LABEL_24:
  double v23 = 0;
  gdc::Histogram::addSample((uint64_t)(v15 + 4), (uint64_t)v22, a4);
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  std::mutex::unlock(v9);
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1>,void ()(NSError *)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_16;
  }
  if (GEOGetGeoGLDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
  }
  unsigned __int8 v5 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v11 = 138412290;
    id v12 = v3;
    _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_ERROR, "Frame completed with error:%@", (uint8_t *)&v11, 0xCu);
  }

  uint64_t v6 = [v3 domain];
  unint64_t v7 = v6;
  if (v6 != (void *)*MEMORY[0x1E4F35170])
  {

LABEL_16:
    atomic_store(0, (unsigned int *)(v4 + 420));
    goto LABEL_17;
  }
  BOOL v8 = [v3 code] == 4;

  if (!v8) {
    goto LABEL_16;
  }
  if (!*(unsigned char *)(v4 + 424)) {
    goto LABEL_16;
  }
  unsigned int v9 = atomic_load((unsigned int *)(v4 + 420));
  if (v9 >= *(_DWORD *)(v4 + 428)) {
    goto LABEL_16;
  }
  if (GEOGetGeoGLDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
  }
  int8x8_t v10 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "Marking to reset command queue", (uint8_t *)&v11, 2u);
  }

  atomic_store(1u, (unsigned __int8 *)(v4 + 417));
LABEL_17:
}

void sub_1A1A0A1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::operator()(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A1A0A28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  double v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = a1[2];
      if (v5)
      {
        (*(void (**)(void, void))(*(void *)v5 + 56))(a1[2], a1[1]);
        (*(void (**)(uint64_t, void))(*(void *)v5 + 32))(v5, a1[1]);
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void md::MapEngineCallbackGraphService::release(uint64_t a1, uint64_t a2)
{
  id v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 248);
  if (a2 >= (unint64_t)((*(void *)(a1 + 256) - v5) >> 3)
    || ((v6 = *(void *)(v5 + 8 * a2)) != 0 ? (BOOL v7 = HIDWORD(a2) == HIDWORD(v6)) : (BOOL v7 = 0),
        !v7 || (BOOL v8 = (uint64_t *)(*(void *)(a1 + 272) + 16 * v6), v8 == *(uint64_t **)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v4);
  }
  else
  {
    uint64_t v10 = *v8;
    unsigned int v9 = (std::__shared_weak_count *)v8[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v11 = v9;
    std::__shared_mutex_base::unlock_shared(v4);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 12), 0xFFFFFFFF);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1A1A0A4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1A0A568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_mutex_base *a11, char a12)
{
  if (a12) {
    std::__shared_mutex_base::unlock_shared(a11);
  }
  _Unwind_Resume(exception_object);
}

void md::SharedResourcesManager::FrameReferences::clear(std::__shared_mutex_base *this)
{
  std::__shared_mutex_base::lock(this);
  for (uint64_t i = *(void **)&this[1].__mut_.__m_.__opaque[8]; i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = i[2];
    id v4 = (std::__shared_weak_count *)i[3];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add((atomic_uint *volatile)(v3 + 24), 0xFFFFFFFF);
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)(v3 + 24), 0xFFFFFFFF);
    }
  }
  if (*(void *)&this[1].__mut_.__m_.__opaque[16])
  {
    uint64_t v5 = *(void **)&this[1].__mut_.__m_.__opaque[8];
    while (v5)
    {
      uint64_t v6 = v5;
      uint64_t v5 = (void *)*v5;
      BOOL v7 = (std::__shared_weak_count *)v6[3];
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      operator delete(v6);
    }
    *(void *)&this[1].__mut_.__m_.__opaque[8] = 0;
    uint64_t v8 = *(void *)this[1].__mut_.__m_.__opaque;
    if (v8)
    {
      for (uint64_t j = 0; j != v8; ++j)
        *(void *)(this[1].__mut_.__m_.__sig + 8 * j) = 0;
    }
    *(void *)&this[1].__mut_.__m_.__opaque[16] = 0;
  }
  std::__shared_mutex_base::unlock(this);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    double v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        unsigned int v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        double v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::VenueTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  BOOL v7 = *(void **)(a1 + 208);
  uint64_t v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  *uint64_t v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  void *v6 = 0;
  v6[1] = 0;
}

void md::MapEngine::runUpdatePhase(md::MapEngine *this, double a2, char a3)
{
  uint64_t v340 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = atomic_exchange((atomic_ullong *volatile)this + 174, 0);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v5 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v6 = v5;
  os_signpost_id_t v7 = *((void *)this + 152);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    uint64_t v8 = (id)GEOGetVectorKitPerformanceLog_log;
    BOOL v9 = os_signpost_enabled(v8);

    if (v9)
    {
      stringForLayoutReasonsMask(v336, v4);
      if ((SBYTE7(v337) & 0x80u) == 0) {
        long long v10 = v336;
      }
      else {
        long long v10 = *(uint8_t **)v336;
      }
    }
    else
    {
      memset(v336, 0, sizeof(v336));
      long long v10 = v336;
      *(void *)&long long v337 = 0;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "LayoutScene", "LayoutReasons:%s", buf, 0xCu);
    if (SBYTE7(v337) < 0) {
      operator delete(*(void **)v336);
    }
  }

  if (*((unsigned char *)this + 4360))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    int v11 = (id)GEOGetVectorKitVKDefaultLog_log;
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);

    if (v12)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v13 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *((void *)this + 175);
        stringForLayoutReasonsMask(v336, v4);
        uint64_t v15 = (SBYTE7(v337) & 0x80u) == 0 ? v336 : *(uint8_t **)v336;
        *(_DWORD *)buf = 134218242;
        *(void *)&uint8_t buf[4] = v14;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v15;
        _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_DEBUG, "LayoutNumber:%llu LayoutReasons:%s", buf, 0x16u);
        if (SBYTE7(v337) < 0) {
          operator delete(*(void **)v336);
        }
      }
    }
  }
  else
  {
    int v16 = (*(uint64_t (**)(void))(**((void **)this + 542) + 56))(*((void *)this + 542));
    int v17 = md::MapEngine::logLayoutReasonsHistory(this, 0x3CuLL) | v16 ^ 1;
    if (*((void *)this + 150)) {
      int v17 = 0;
    }
    uint64_t v18 = *((void *)this + 540);
    double v19 = (char *)this + 24 * v18;
    *((void *)v19 + 176) = *((void *)this + 175);
    *((double *)v19 + 177) = a2;
    *((void *)v19 + 178) = v4;
    uint64_t v20 = v18 + 1;
    uint64_t v21 = ((unint64_t)(v18 + 1) * (unsigned __int128)0xECF56BE69C8FDE3uLL) >> 64;
    uint64_t v22 = v20 - 121 * ((v21 + ((unint64_t)(v20 - v21) >> 1)) >> 6);
    *((void *)this + 540) = v22;
    if (*((void *)this + 539) == v22)
    {
      if (v22 == 120) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22 + 1;
      }
      *((void *)this + 539) = v23;
    }
    if (v17) {
      (*(void (**)(void, void, double))(**((void **)this + 542) + 24))(*((void *)this + 542), 0, 1.0);
    }
  }
  ++*((void *)this + 175);
  uint64_t v24 = *(void *)(*((void *)this + 1) + 8);
  v331[0] = &unk_1EF5795C0;
  v331[1] = this;
  v332 = v331;
  geo::TaskQueue::barrierSync(v24, v331);
  if (v332 == v331)
  {
    (*(void (**)(void *))(v331[0] + 32))(v331);
  }
  else if (v332)
  {
    (*(void (**)(void))(*v332 + 40))();
  }
  context = (void *)MEMORY[0x1A6239C40]();
  atomic_store(0, (unsigned __int8 *)this + 1179);
  if (!*((unsigned char *)this + 96) && !*((unsigned char *)this + 97))
  {
    if ((v4 & 0x180A) == 0) {
      goto LABEL_44;
    }
    uint64_t v46 = *((void *)this + 140);
    if (*(unsigned char *)(v46 + 104))
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v47 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        if (!*(unsigned char *)(v46 + 104)) {
          goto LABEL_236;
        }
        uint64_t v48 = *(void *)(v46 + 96);
        *(_DWORD *)v336 = 134217984;
        *(void *)&v336[4] = v48;
        _os_log_impl(&dword_1A1780000, v47, OS_LOG_TYPE_INFO, "[VLR] Apply _uponResetFrequency as logic frequency: %zu", v336, 0xCu);
      }

      if (*(unsigned char *)(v46 + 104))
      {
        *(void *)(v46 + 112) = *(void *)(v46 + 96);
        *(unsigned char *)(v46 + 104) = 0;
        goto LABEL_42;
      }
LABEL_236:
      std::__throw_bad_optional_access[abi:nn180100]();
      goto LABEL_237;
    }
  }
LABEL_42:
  md::LogicManager::resetFrequencyCounter(*((md::LogicManager **)this + 140));
  if (*((unsigned char *)this + 97)) {
    *((unsigned char *)this + 97) = 0;
  }
LABEL_44:
  (*(void (**)(void, double))(**((void **)this + 13) + 16))(*((void *)this + 13), a2);
  md::MapEngine::updateForConfigurationAndMode(this, a2);
  *((unsigned char *)this + 4544) = 1;
  *((unsigned char *)this + 4545) = *((unsigned char *)this + 4546);
  uint64_t v335 = 0;
  long long v334 = 0uLL;
  long long v25 = *((_OWORD *)this + 58);
  long long v26 = *((_OWORD *)this + 59);
  long long v27 = *((_OWORD *)this + 60);
  uint64_t v339 = *((void *)this + 122);
  long long v337 = v26;
  long long v338 = v27;
  *(_OWORD *)v336 = v25;
  uint64_t v28 = *((void *)this + 123);
  long long v29 = *((_OWORD *)this + 62);
  LODWORD(v26) = *((_DWORD *)this + 252);
  char v30 = *((unsigned char *)this + 1012);
  char v322 = *((unsigned char *)this + 1015);
  __int16 v321 = *(_WORD *)((char *)this + 1013);
  uint64_t v31 = **(void **)(*(void *)(*(void *)(*((void *)this + 109) + 24) + 16) + 136);
  unint64_t v32 = atomic_load(*((unint64_t **)this + 153));
  BOOL v33 = (md::LayoutContext *)*((void *)this + 135);
  unint64_t v34 = (uint64_t *)*((void *)v33 + 1);
  int8x8_t v35 = (int8x8_t)v34[1];
  int v304 = v26;
  unint64_t v302 = v32;
  uint64_t v303 = v31;
  long long v301 = v29;
  uint64_t v300 = v28;
  if (!*(void *)&v35)
  {
    float v39 = 0.0;
LABEL_48:
    float v305 = v39;
    goto LABEL_115;
  }
  uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
  v36.i16[0] = vaddlv_u8(v36);
  unint64_t v37 = v36.u32[0];
  if (v36.u32[0] > 1uLL)
  {
    float v305 = 0.0;
    uint64_t v38 = 0x1AF456233693CD46;
    if (*(void *)&v35 <= 0x1AF456233693CD46uLL) {
      uint64_t v38 = 0x1AF456233693CD46uLL % *(void *)&v35;
    }
  }
  else
  {
    float v305 = 0.0;
    uint64_t v38 = (*(void *)&v35 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v40 = *v34;
  uint64_t v41 = *(void **)(*v34 + 8 * v38);
  if (!v41) {
    goto LABEL_115;
  }
  size_t v42 = (void *)*v41;
  if (!*v41) {
    goto LABEL_115;
  }
  uint64_t v43 = *(void *)&v35 - 1;
  if (v36.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v44 = v42[1];
      if (v44 == 0x1AF456233693CD46)
      {
        if (v42[2] == 0x1AF456233693CD46) {
          goto LABEL_76;
        }
      }
      else if ((v44 & v43) != v38)
      {
        goto LABEL_115;
      }
      size_t v42 = (void *)*v42;
      if (!v42) {
        goto LABEL_115;
      }
    }
  }
  while (1)
  {
    unint64_t v45 = v42[1];
    if (v45 == 0x1AF456233693CD46) {
      break;
    }
    if (v45 >= *(void *)&v35) {
      v45 %= *(void *)&v35;
    }
    if (v45 != v38) {
      goto LABEL_115;
    }
LABEL_61:
    size_t v42 = (void *)*v42;
    if (!v42) {
      goto LABEL_115;
    }
  }
  if (v42[2] != 0x1AF456233693CD46) {
    goto LABEL_61;
  }
LABEL_76:
  uint64_t v49 = v42[5];
  if (*(void *)(v49 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v50 = *(void *)(v49 + 32);
    if (v50)
    {
      uint64_t v51 = (unsigned __int8 *)*((void *)v33 + 9);
      if (v51) {
        BOOL v52 = *v51 != 0;
      }
      else {
        BOOL v52 = 0;
      }
      if (v36.u32[0] > 1uLL)
      {
        unint64_t v53 = 0xE42D19AFCA302E68;
        if (*(void *)&v35 <= 0xE42D19AFCA302E68) {
          unint64_t v53 = 0xE42D19AFCA302E68 % *(void *)&v35;
        }
      }
      else
      {
        unint64_t v53 = v43 & 0xE42D19AFCA302E68;
      }
      size_t v54 = *(void **)(v40 + 8 * v53);
      float v55 = 0.0;
      if (v54)
      {
        uint64_t v56 = (void *)*v54;
        if (v56)
        {
          if (v37 < 2)
          {
            while (1)
            {
              uint64_t v57 = v56[1];
              if (v57 == 0xE42D19AFCA302E68)
              {
                if (v56[2] == 0xE42D19AFCA302E68) {
                  goto LABEL_101;
                }
              }
              else if ((v57 & v43) != v53)
              {
                goto LABEL_104;
              }
              uint64_t v56 = (void *)*v56;
              if (!v56) {
                goto LABEL_104;
              }
            }
          }
          do
          {
            unint64_t v58 = v56[1];
            if (v58 == 0xE42D19AFCA302E68)
            {
              if (v56[2] == 0xE42D19AFCA302E68)
              {
LABEL_101:
                uint64_t v59 = v56[5];
                if (*(void *)(v59 + 8) == 0xE42D19AFCA302E68)
                {
                  uint64_t v60 = *(void *)(v59 + 32);
                  if (v60) {
                    float v55 = *(float *)(v60 + 100);
                  }
                }
                break;
              }
            }
            else
            {
              if (v58 >= *(void *)&v35) {
                v58 %= *(void *)&v35;
              }
              if (v58 != v53) {
                break;
              }
            }
            uint64_t v56 = (void *)*v56;
          }
          while (v56);
        }
      }
LABEL_104:
      float v296 = v55;
      uint64_t v61 = md::LayoutContext::frameState(v33);
      int v62 = *(unsigned __int8 *)(v50 + 3784);
      uint64_t v63 = 5544;
      uint64_t v64 = 5536;
      if (v62 == 1) {
        uint64_t v64 = 5512;
      }
      uint64_t v65 = 5552;
      if (v62 == 1) {
        uint64_t v65 = 5528;
      }
      double v66 = *(double *)(v50 + v65);
      double v67 = *(double *)(v50 + v64);
      if (v62 == 1) {
        uint64_t v63 = 5520;
      }
      double v68 = *(double *)(v50 + v63);
      double v69 = *(double *)(v50 + 5208);
      double v70 = *(double *)(v50 + 5216);
      double v71 = v67 - *(double *)(v50 + 4288);
      double v72 = v68 - *(double *)(v50 + 4296);
      double v73 = v66 - *(double *)(v50 + 4304);
      double v74 = v52 ? sqrt(v71 * v71 + v72 * v72 + v73 * v73) : v71 * v69 + v72 * v70 + v73 * *(double *)(v50 + 5224);
      float v305 = 0.0;
      if (v74 >= *(double *)(v50 + 4760) && v74 <= *(double *)(v50 + 4768))
      {
        double v239 = *(double *)(v50 + 5240) * v74;
        if (*(unsigned char *)(v50 + 3784))
        {
          double v240 = *(double *)(v50 + 5224);
          if (*(unsigned char *)(v61 + 128) == 2)
          {
            float v241 = log2(v239);
            double v242 = *(double *)(v50 + 5576) + (float)(v296 - v241);
            double v243 = sqrt(v67 * v67 + v68 * v68 + v66 * v66);
            if (v243 <= 0.001)
            {
              double v245 = *(double *)(v50 + 5160);
              double v246 = *(double *)(v50 + 5168);
              double v247 = *(double *)(v50 + 5176);
            }
            else
            {
              double v244 = 1.0 / v243;
              double v245 = 1.0 / v243 * v67;
              double v246 = v244 * v68;
              double v247 = v244 * v66;
            }
            float v248 = v242;
          }
          else
          {
            float v251 = log2(v239 * 0.0000000249532021);
            double v252 = sqrt(v67 * v67 + v68 * v68 + v66 * v66);
            if (v252 <= 0.001)
            {
              double v245 = *(double *)(v50 + 5160);
              double v246 = *(double *)(v50 + 5168);
              double v247 = *(double *)(v50 + 5176);
            }
            else
            {
              double v253 = 1.0 / v252;
              double v245 = 1.0 / v252 * v67;
              double v246 = v253 * v68;
              double v247 = v253 * v66;
            }
            float v248 = v296 - v251;
          }
          double v250 = v245 * v69 + v246 * v70 + v247 * v240;
        }
        else
        {
          float v249 = log2(v239);
          float v248 = v296 - v249;
          double v250 = v73 / sqrt(v71 * v71 + v72 * v72 + v73 * v73);
        }
        if (!v52)
        {
          float v254 = v250 + 1.0;
          float v255 = fminf(fmaxf(v254, 0.0), 1.0);
          if (v255 > 0.8) {
            float v248 = fmaxf(log2f(fmaxf(1.0 - v255, 0.01)) + v248, 0.0);
          }
        }
        float v39 = fmaxf(v248, 0.0);
        goto LABEL_48;
      }
    }
  }
LABEL_115:
  uint64_t v75 = *((void *)this + 149);
  if (v75) {
    char v76 = *(unsigned char *)(v75 + 225);
  }
  else {
    char v76 = 0;
  }
  unsigned int v77 = atomic_load((unsigned int *)this + 228);
  uint64_t v78 = (char *)*((void *)this + 133);
  char v79 = *v78;
  *(_DWORD *)v319 = *(_DWORD *)(v78 + 1);
  *(_DWORD *)&v319[3] = *((_DWORD *)v78 + 1);
  *(_OWORD *)v318 = *(_OWORD *)(v78 + 8);
  *(void *)&v318[16] = *((void *)v78 + 3);
  long long v80 = *((_OWORD *)v78 + 2);
  uint64_t v82 = *((void *)v78 + 6);
  uint64_t v81 = *((void *)v78 + 7);
  uint64_t v83 = *((void *)v78 + 8);
  uint64_t v84 = *((void *)v78 + 9);
  long long v85 = *((_OWORD *)v78 + 5);
  long long v86 = *((_OWORD *)v78 + 6);
  long long v87 = *((_OWORD *)v78 + 7);
  uint64_t v335 = *((void *)v78 + 16);
  *(_OWORD *)&buf[16] = v86;
  long long v334 = v87;
  *(_OWORD *)buf = v85;
  int v88 = v78[336];
  if (v78[336]) {
    uint64_t v258 = *((void *)v78 + 43);
  }
  int v89 = v78[352];
  if (v78[352]) {
    uint64_t v259 = *((void *)v78 + 45);
  }
  long long v90 = *(_OWORD *)(v78 + 136);
  long long v91 = *(_OWORD *)(v78 + 152);
  long long v92 = *(_OWORD *)(v78 + 168);
  long long v93 = *(_OWORD *)(v78 + 184);
  long long v94 = *(_OWORD *)(v78 + 200);
  long long v95 = *(_OWORD *)(v78 + 216);
  long long v96 = *(_OWORD *)(v78 + 232);
  long long v97 = *(_OWORD *)(v78 + 248);
  long long v99 = *(_OWORD *)(v78 + 264);
  long long v98 = *(_OWORD *)(v78 + 280);
  long long v101 = *(_OWORD *)(v78 + 296);
  long long v100 = *(_OWORD *)(v78 + 312);
  char v102 = v78[328];
  long long v104 = *((_OWORD *)v78 + 23);
  long long v103 = *((_OWORD *)v78 + 24);
  uint64_t v106 = *((void *)v78 + 50);
  uint64_t v105 = *((void *)v78 + 51);
  uint64_t v108 = *((void *)v78 + 52);
  uint64_t v107 = *((void *)v78 + 53);
  long long v315 = *((_OWORD *)v78 + 27);
  int v316 = *((_DWORD *)v78 + 112);
  uint64_t v109 = *((void *)v78 + 57);
  long long v110 = *((_OWORD *)v78 + 29);
  uint64_t v111 = *((void *)v78 + 60);
  int v112 = *((_DWORD *)v78 + 122);
  int v113 = *((_DWORD *)v78 + 123);
  if (a3)
  {
    uint64_t v114 = 0;
  }
  else
  {
    long long v260 = *(_OWORD *)(v78 + 136);
    long long v262 = *(_OWORD *)(v78 + 152);
    long long v264 = *(_OWORD *)(v78 + 168);
    long long v266 = *(_OWORD *)(v78 + 184);
    long long v268 = *(_OWORD *)(v78 + 200);
    long long v270 = *(_OWORD *)(v78 + 216);
    long long v272 = *(_OWORD *)(v78 + 232);
    long long v274 = *(_OWORD *)(v78 + 248);
    long long v276 = *(_OWORD *)(v78 + 264);
    long long v278 = *(_OWORD *)(v78 + 280);
    long long v280 = v80;
    long long v282 = *(_OWORD *)(v78 + 296);
    uint64_t v284 = v82;
    long long v286 = *(_OWORD *)(v78 + 312);
    uint64_t v288 = v81;
    uint64_t v290 = v84;
    uint64_t v256 = v83;
    long long v292 = *((_OWORD *)v78 + 23);
    long long v294 = *((_OWORD *)v78 + 24);
    uint64_t v115 = *((void *)v78 + 50);
    uint64_t v116 = *((void *)v78 + 51);
    uint64_t v117 = *((void *)v78 + 52);
    uint64_t v118 = *((void *)v78 + 53);
    uint64_t v119 = *((void *)v78 + 57);
    long long v297 = *((_OWORD *)v78 + 29);
    uint64_t v120 = *((void *)v78 + 60);
    int v121 = *((_DWORD *)v78 + 122);
    int v122 = *((_DWORD *)v78 + 123);
    uint64_t v123 = +[VKSharedResourcesManager sharedResources];
    uint64_t v114 = [v123 globalFrameStamp];

    int v113 = v122;
    int v112 = v121;
    uint64_t v111 = v120;
    long long v103 = v294;
    long long v110 = v297;
    uint64_t v109 = v119;
    uint64_t v107 = v118;
    uint64_t v108 = v117;
    uint64_t v105 = v116;
    uint64_t v106 = v115;
    long long v104 = v292;
    uint64_t v81 = v288;
    uint64_t v84 = v290;
    uint64_t v83 = v256;
    long long v100 = v286;
    uint64_t v82 = v284;
    long long v80 = v280;
    long long v101 = v282;
    long long v99 = v276;
    long long v98 = v278;
    long long v96 = v272;
    long long v97 = v274;
    long long v94 = v268;
    long long v95 = v270;
    long long v92 = v264;
    long long v93 = v266;
    long long v90 = v260;
    long long v91 = v262;
  }
  *((_WORD *)this + 508) = 0;
  if (!*((void *)this + 131))
  {
    long long v261 = v90;
    long long v263 = v91;
    long long v265 = v92;
    long long v267 = v93;
    long long v269 = v94;
    long long v271 = v95;
    long long v273 = v96;
    long long v275 = v97;
    long long v277 = v99;
    long long v279 = v98;
    long long v281 = v80;
    long long v283 = v101;
    uint64_t v285 = v82;
    long long v287 = v100;
    uint64_t v289 = v81;
    uint64_t v291 = v84;
    long long v293 = v104;
    long long v295 = v103;
    uint64_t v124 = v106;
    uint64_t v125 = v105;
    uint64_t v126 = v108;
    uint64_t v257 = v107;
    uint64_t v127 = v109;
    long long v298 = v110;
    uint64_t v128 = v111;
    int v129 = v112;
    int v130 = v113;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(*((void *)this + 3) + 8) + 24))(&v323);
    uint64_t v131 = v323;
    uint64_t v323 = 0;
    uint64_t v132 = *((void *)this + 131);
    *((void *)this + 131) = v131;
    if (v132)
    {
      (*(void (**)(uint64_t))(*(void *)v132 + 8))(v132);
      if (v323)
      {
        uint64_t v133 = (*(uint64_t (**)(uint64_t))(*(void *)v323 + 24))(v323);
        uint64_t v134 = v323;
        uint64_t v323 = 0;
        uint64_t v324 = v134;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v133 + 48))(v133, &v324);
        uint64_t v135 = v324;
        uint64_t v324 = 0;
        if (v135) {
          (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
        }
        uint64_t v136 = v323;
        uint64_t v323 = 0;
        if (v136) {
          (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
        }
      }
    }
    int v113 = v130;
    int v112 = v129;
    uint64_t v111 = v128;
    long long v103 = v295;
    long long v110 = v298;
    uint64_t v109 = v127;
    uint64_t v107 = v257;
    uint64_t v108 = v126;
    uint64_t v105 = v125;
    uint64_t v106 = v124;
    long long v104 = v293;
    uint64_t v81 = v289;
    uint64_t v84 = v291;
    long long v100 = v287;
    uint64_t v82 = v285;
    long long v80 = v281;
    long long v101 = v283;
    long long v99 = v277;
    long long v98 = v279;
    long long v96 = v273;
    long long v97 = v275;
    long long v94 = v269;
    long long v95 = v271;
    long long v92 = v265;
    long long v93 = v267;
    long long v90 = v261;
    long long v91 = v263;
  }
  uint64_t v137 = *((void *)this + 135);
  uint64_t v138 = (_OWORD *)(v137 + 360);
  uint64_t v139 = (_OWORD *)(v137 + 96);
  if (*(unsigned char *)(v137 + 728))
  {
    long long v140 = v337;
    *uint64_t v139 = *(_OWORD *)v336;
    *(_OWORD *)(v137 + 112) = v140;
    *(_OWORD *)(v137 + 128) = v338;
    *(void *)(v137 + 144) = v339;
    *(void *)(v137 + 152) = v300;
    *(_OWORD *)(v137 + 160) = v301;
    *(_DWORD *)(v137 + 176) = v304;
    *(unsigned char *)(v137 + 180) = v30;
    *(_WORD *)(v137 + 181) = v321;
    *(unsigned char *)(v137 + 183) = v322;
    *(double *)(v137 + 184) = a2;
    *(void *)(v137 + 192) = v303;
    *(void *)(v137 + 200) = v302;
    *(float *)(v137 + 208) = v305;
    *(unsigned char *)(v137 + 212) = v76;
    *(unsigned char *)(v137 + 213) = a3;
    *(_WORD *)(v137 + 214) = v320;
    *(_DWORD *)(v137 + 216) = v77;
    *(unsigned char *)(v137 + 224) = v79;
    *(_DWORD *)(v137 + 225) = *(_DWORD *)v319;
    *(_DWORD *)(v137 + 228) = *(_DWORD *)&v319[3];
    *(_OWORD *)(v137 + 232) = *(_OWORD *)v318;
    *(void *)(v137 + 248) = *(void *)&v318[16];
    *(_OWORD *)(v137 + 256) = v80;
    *(void *)(v137 + 272) = v82;
    *(void *)(v137 + 280) = v81;
    *(void *)(v137 + 288) = v83;
    *(void *)(v137 + 296) = v84;
    long long v141 = *(_OWORD *)buf;
    long long v142 = *(_OWORD *)&buf[16];
    long long v143 = v334;
    *(void *)(v137 + 352) = v335;
    *(_OWORD *)(v137 + 320) = v142;
    *(_OWORD *)(v137 + 336) = v143;
    *(_OWORD *)(v137 + 304) = v141;
    _OWORD *v138 = v90;
    *(_OWORD *)(v137 + 376) = v91;
    *(_OWORD *)(v137 + 392) = v92;
    *(_OWORD *)(v137 + 408) = v93;
    *(_OWORD *)(v137 + 424) = v94;
    *(_OWORD *)(v137 + 440) = v95;
    *(_OWORD *)(v137 + 456) = v96;
    *(_OWORD *)(v137 + 472) = v97;
    *(_OWORD *)(v137 + 488) = v99;
    *(_OWORD *)(v137 + 504) = v98;
    *(_OWORD *)(v137 + 520) = v101;
    *(_OWORD *)(v137 + 536) = v100;
    *(unsigned char *)(v137 + 552) = v102;
    int v144 = *(unsigned __int8 *)(v137 + 560);
    if (v88)
    {
      *(void *)(v137 + 568) = v258;
      uint64_t v145 = v259;
      if (!v144)
      {
        char v146 = 1;
        goto LABEL_144;
      }
    }
    else
    {
      uint64_t v145 = v259;
      if (*(unsigned char *)(v137 + 560))
      {
        char v146 = 0;
LABEL_144:
        *(unsigned char *)(v137 + 560) = v146;
      }
    }
    int v149 = *(unsigned __int8 *)(v137 + 576);
    if (v89)
    {
      *(void *)(v137 + 584) = v145;
      if (!v149)
      {
        char v150 = 1;
        goto LABEL_150;
      }
    }
    else if (*(unsigned char *)(v137 + 576))
    {
      char v150 = 0;
LABEL_150:
      *(unsigned char *)(v137 + 576) = v150;
    }
    *(_OWORD *)(v137 + 592) = v104;
    *(_OWORD *)(v137 + 608) = v103;
    *(void *)(v137 + 624) = v106;
    *(void *)(v137 + 632) = v105;
    *(void *)(v137 + 640) = v108;
    *(void *)(v137 + 648) = v107;
    *(_OWORD *)(v137 + 656) = v315;
    *(_DWORD *)(v137 + 672) = v316;
    *(void *)(v137 + 680) = v109;
    *(_OWORD *)(v137 + 688) = v110;
    *(void *)(v137 + 704) = v111;
    *(_DWORD *)(v137 + 712) = v112;
    *(_DWORD *)(v137 + 716) = v113;
    *(void *)(v137 + 720) = v114;
  }
  else
  {
    long long v147 = v337;
    *uint64_t v139 = *(_OWORD *)v336;
    *(_OWORD *)(v137 + 112) = v147;
    *(_OWORD *)(v137 + 128) = v338;
    *(unsigned char *)(v137 + 144) = v339;
    *(void *)(v137 + 152) = v300;
    *(_OWORD *)(v137 + 160) = v301;
    *(_DWORD *)(v137 + 176) = v304;
    *(unsigned char *)(v137 + 180) = v30;
    *(double *)(v137 + 184) = a2;
    *(void *)(v137 + 192) = v303;
    *(void *)(v137 + 200) = v302;
    *(float *)(v137 + 208) = v305;
    *(unsigned char *)(v137 + 212) = v76;
    *(unsigned char *)(v137 + 213) = a3;
    *(_WORD *)(v137 + 214) = v320;
    *(_DWORD *)(v137 + 216) = v77;
    *(unsigned char *)(v137 + 224) = v79;
    *(void *)(v137 + 232) = *(void *)v318;
    *(_OWORD *)(v137 + 240) = *(_OWORD *)&v318[8];
    *(_OWORD *)(v137 + 256) = v80;
    *(void *)(v137 + 272) = v82;
    *(void *)(v137 + 280) = v81;
    *(void *)(v137 + 288) = v83;
    *(void *)(v137 + 296) = v84;
    *(void *)(v137 + 352) = v335;
    long long v148 = v334;
    *(_OWORD *)(v137 + 320) = *(_OWORD *)&buf[16];
    *(_OWORD *)(v137 + 336) = v148;
    *(_OWORD *)(v137 + 304) = *(_OWORD *)buf;
    _OWORD *v138 = v90;
    *(_OWORD *)(v137 + 376) = v91;
    *(_OWORD *)(v137 + 392) = v92;
    *(_OWORD *)(v137 + 408) = v93;
    *(_OWORD *)(v137 + 424) = v94;
    *(_OWORD *)(v137 + 440) = v95;
    *(_OWORD *)(v137 + 456) = v96;
    *(_OWORD *)(v137 + 472) = v97;
    *(_OWORD *)(v137 + 488) = v99;
    *(_OWORD *)(v137 + 504) = v98;
    *(_OWORD *)(v137 + 520) = v101;
    *(_OWORD *)(v137 + 536) = v100;
    *(unsigned char *)(v137 + 552) = v102;
    *(_DWORD *)(v137 + 556) = *(_DWORD *)&v317[3];
    *(_DWORD *)(v137 + 553) = *(_DWORD *)v317;
    *(unsigned char *)(v137 + 560) = 0;
    if (v88)
    {
      *(void *)(v137 + 568) = v258;
      *(unsigned char *)(v137 + 560) = 1;
    }
    *(unsigned char *)(v137 + 576) = 0;
    if (v89)
    {
      *(void *)(v137 + 584) = v259;
      *(unsigned char *)(v137 + 576) = 1;
    }
    *(_OWORD *)(v137 + 592) = v104;
    *(_OWORD *)(v137 + 608) = v103;
    *(void *)(v137 + 624) = v106;
    *(void *)(v137 + 632) = v105;
    *(void *)(v137 + 640) = v108;
    *(void *)(v137 + 648) = v107;
    *(_OWORD *)(v137 + 656) = v315;
    *(_DWORD *)(v137 + 672) = v316;
    *(void *)(v137 + 680) = v109;
    *(_OWORD *)(v137 + 688) = v110;
    *(void *)(v137 + 704) = v111;
    *(_DWORD *)(v137 + 712) = v112;
    *(_DWORD *)(v137 + 716) = v113;
    *(void *)(v137 + 720) = v114;
    *(unsigned char *)(v137 + 728) = 1;
  }
  id WeakRetained = objc_loadWeakRetained((id *)this + 106);
  BOOL v152 = WeakRetained == 0;

  if (!v152)
  {
    id v153 = objc_loadWeakRetained((id *)this + 106);
    [v153 willLayoutWithTimestamp:*((void *)this + 135) withContext:a2];

    uint64_t v155 = *((void *)this + 135);
    uint64_t v156 = *((void *)this + 133);
    long long v157 = *(_OWORD *)(v156 + 8);
    long long v158 = *(_OWORD *)(v156 + 24);
    long long v159 = *(_OWORD *)(v156 + 40);
    long long v160 = *(_OWORD *)(v156 + 56);
    uint64_t v161 = *(void *)(v156 + 72);
    long long v311 = *(_OWORD *)(v156 + 80);
    long long v312 = *(_OWORD *)(v156 + 96);
    long long v162 = *(_OWORD *)(v156 + 112);
    long long v313 = v162;
    uint64_t v314 = *(void *)(v156 + 128);
    int v163 = *(unsigned __int8 *)(v156 + 336);
    if (*(unsigned char *)(v156 + 336))
    {
      uint64_t v154 = *(void *)(v156 + 344);
      int v164 = *(unsigned __int8 *)(v156 + 352);
      if (*(unsigned char *)(v156 + 352)) {
        goto LABEL_155;
      }
    }
    else
    {
      int v164 = *(unsigned __int8 *)(v156 + 352);
      if (*(unsigned char *)(v156 + 352)) {
LABEL_155:
      }
        *(void *)&long long v162 = *(void *)(v156 + 360);
    }
    long long v165 = *(_OWORD *)(v156 + 136);
    long long v166 = *(_OWORD *)(v156 + 152);
    long long v167 = *(_OWORD *)(v156 + 168);
    long long v168 = *(_OWORD *)(v156 + 184);
    long long v169 = *(_OWORD *)(v156 + 200);
    long long v170 = *(_OWORD *)(v156 + 216);
    long long v171 = *(_OWORD *)(v156 + 232);
    long long v172 = *(_OWORD *)(v156 + 248);
    uint64_t v173 = *(void *)(v156 + 264);
    long long v174 = *(_OWORD *)(v156 + 272);
    long long v175 = *(_OWORD *)(v156 + 288);
    long long v176 = *(_OWORD *)(v156 + 304);
    uint64_t v177 = *(void *)(v156 + 320);
    char v178 = *(unsigned char *)(v156 + 328);
    long long v179 = *(_OWORD *)(v156 + 368);
    long long v180 = *(_OWORD *)(v156 + 384);
    long long v181 = *(_OWORD *)(v156 + 400);
    long long v182 = *(_OWORD *)(v156 + 416);
    long long v309 = *(_OWORD *)(v156 + 432);
    int v310 = *(_DWORD *)(v156 + 448);
    if (*(unsigned char *)(v155 + 728))
    {
      uint64_t v183 = *(void *)(v156 + 456);
      long long v184 = *(_OWORD *)(v156 + 464);
      uint64_t v185 = *(void *)(v156 + 480);
      uint64_t v186 = *(void *)(v156 + 488);
      *(unsigned char *)(v155 + 224) = *(unsigned char *)v156;
      *(_OWORD *)(v155 + 232) = v157;
      *(_OWORD *)(v155 + 248) = v158;
      *(_OWORD *)(v155 + 264) = v159;
      *(_OWORD *)(v155 + 280) = v160;
      *(void *)(v155 + 296) = v161;
      *(_OWORD *)(v155 + 304) = v311;
      *(_OWORD *)(v155 + 320) = v312;
      *(_OWORD *)(v155 + 336) = v313;
      *(void *)(v155 + 352) = v314;
      *(_OWORD *)(v155 + 360) = v165;
      *(_OWORD *)(v155 + 376) = v166;
      *(_OWORD *)(v155 + 392) = v167;
      *(_OWORD *)(v155 + 408) = v168;
      *(_OWORD *)(v155 + 424) = v169;
      *(_OWORD *)(v155 + 440) = v170;
      *(_OWORD *)(v155 + 456) = v171;
      *(_OWORD *)(v155 + 472) = v172;
      *(void *)(v155 + 488) = v173;
      *(_OWORD *)(v155 + 496) = v174;
      *(_OWORD *)(v155 + 512) = v175;
      *(_OWORD *)(v155 + 528) = v176;
      *(void *)(v155 + 544) = v177;
      *(unsigned char *)(v155 + 552) = v178;
      int v187 = *(unsigned __int8 *)(v155 + 560);
      if (v163)
      {
        *(void *)(v155 + 568) = v154;
        if (!v187)
        {
          char v188 = 1;
          goto LABEL_163;
        }
      }
      else if (*(unsigned char *)(v155 + 560))
      {
        char v188 = 0;
LABEL_163:
        *(unsigned char *)(v155 + 560) = v188;
      }
      int v189 = *(unsigned __int8 *)(v155 + 576);
      if (v164)
      {
        *(void *)(v155 + 584) = v162;
        if (!v189)
        {
          char v190 = 1;
          goto LABEL_169;
        }
      }
      else if (*(unsigned char *)(v155 + 576))
      {
        char v190 = 0;
LABEL_169:
        *(unsigned char *)(v155 + 576) = v190;
      }
      *(_OWORD *)(v155 + 592) = v179;
      *(_OWORD *)(v155 + 608) = v180;
      *(_OWORD *)(v155 + 624) = v181;
      *(_OWORD *)(v155 + 640) = v182;
      *(_OWORD *)(v155 + 656) = v309;
      *(_DWORD *)(v155 + 672) = v310;
      *(void *)(v155 + 680) = v183;
      *(_OWORD *)(v155 + 688) = v184;
      *(void *)(v155 + 704) = v185;
      *(void *)(v155 + 712) = v186;
    }
  }
  v329[0] = &unk_1EF579608;
  v329[1] = this;
  v330 = v329;
  v327[0] = &unk_1EF579650;
  v327[1] = this;
  v328 = v327;
  *((void *)&v337 + 1) = v336;
  *(void *)v336 = &unk_1EF579650;
  *(void *)&v336[8] = this;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v191 = (id)GEOGetVectorKitPerformanceLog_log;
  v192 = v191;
  os_signpost_id_t v193 = *((void *)this + 152);
  if (v193 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v191))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v192, OS_SIGNPOST_INTERVAL_BEGIN, v193, "RunLogicBefore", "", buf, 2u);
  }

  if (v328 == v327)
  {
    (*(void (**)(void *))(v327[0] + 32))(v327);
  }
  else if (v328)
  {
    (*(void (**)(void))(*v328 + 40))();
  }
  if (v330 == v329)
  {
    (*(void (**)(void *))(v329[0] + 32))(v329);
  }
  else if (v330)
  {
    (*(void (**)(void))(*v330 + 40))();
  }
  uint64_t v194 = *(void *)(*((void *)this + 1) + 8);
  v325[0] = &unk_1EF579698;
  v325[1] = this;
  v326 = v325;
  geo::TaskQueue::barrierSync(v194, v325);
  if (v326 == v325)
  {
    (*(void (**)(void *))(v325[0] + 32))(v325);
  }
  else if (v326)
  {
    (*(void (**)(void))(*v326 + 40))();
  }
  if (!*((void *)&v337 + 1))
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_237:
    __break(1u);
    return;
  }
  (*(void (**)(void))(**((void **)&v337 + 1) + 48))(*((void *)&v337 + 1));
  if (*((uint8_t **)&v337 + 1) == v336)
  {
    (*(void (**)(uint8_t *))(*(void *)v336 + 32))(v336);
  }
  else if (*((void *)&v337 + 1))
  {
    (*(void (**)(void))(**((void **)&v337 + 1) + 40))();
  }
  uint64_t v195 = *((void *)this + 151);
  if (*(_DWORD *)(v195 + 76))
  {
    if (*(unsigned char *)(v195 + 42))
    {
      BOOL v196 = 1;
      goto LABEL_197;
    }
LABEL_201:
    v336[0] = 13;
    md::MapEngine::setNeedsTick((uint64_t)this, v336);
  }
  else
  {
    int v197 = *(unsigned __int8 *)(v195 + 80);
    int v198 = *(unsigned __int8 *)(v195 + 86);
    BOOL v196 = v197 != v198;
    if (*(unsigned char *)(v195 + 42))
    {
LABEL_197:
      float64_t v308 = *(double *)(v195 + 24);
      long double v199 = tan(*(double *)(v195 + 16) * 0.5 + 0.785398163);
      long double v200 = log(v199);
      v201.f64[0] = v308;
      v201.f64[1] = v200;
      __asm { FMOV            V1.2D, #0.5 }
      *(float64x2_t *)v336 = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v201);
      md::DaVinciGroundMetaData::flagsForPoint(buf, *(const QuadTile **)v195, (double *)v336);
      char v207 = *(unsigned __int8 *)(v195 + 87) != buf[0] || v196;
      if (v207) {
        goto LABEL_201;
      }
    }
    else if (v197 != v198)
    {
      goto LABEL_201;
    }
  }
  (*(void (**)(void, void))(**((void **)this + 109) + 24))(*((void *)this + 109), *((void *)this + 135));
  uint64_t v208 = *((void *)this + 135);
  uint64_t v209 = *((void *)this + 136);
  v210 = (long long *)(v208 + 96);
  v211 = (_OWORD *)(v209 + 96);
  if (*(unsigned __int8 *)(v209 + 728) == *(unsigned __int8 *)(v208 + 728))
  {
    if (*(unsigned char *)(v209 + 728))
    {
      long long v212 = *v210;
      long long v213 = *(_OWORD *)(v208 + 112);
      long long v214 = *(_OWORD *)(v208 + 144);
      *(_OWORD *)(v209 + 128) = *(_OWORD *)(v208 + 128);
      *(_OWORD *)(v209 + 144) = v214;
      _OWORD *v211 = v212;
      *(_OWORD *)(v209 + 112) = v213;
      long long v215 = *(_OWORD *)(v208 + 160);
      long long v216 = *(_OWORD *)(v208 + 176);
      long long v217 = *(_OWORD *)(v208 + 192);
      *(_OWORD *)(v209 + 204) = *(_OWORD *)(v208 + 204);
      *(_OWORD *)(v209 + 176) = v216;
      *(_OWORD *)(v209 + 192) = v217;
      *(_OWORD *)(v209 + 160) = v215;
      gdc::Camera::operator=(v209 + 224, v208 + 224);
      *(void *)(v209 + 720) = *(void *)(v208 + 720);
    }
  }
  else if (*(unsigned char *)(v209 + 728))
  {
    if (*(unsigned char *)(v209 + 576)) {
      *(unsigned char *)(v209 + 576) = 0;
    }
    if (*(unsigned char *)(v209 + 560)) {
      *(unsigned char *)(v209 + 560) = 0;
    }
    *(unsigned char *)(v209 + 728) = 0;
  }
  else
  {
    long long v218 = *v210;
    long long v219 = *(_OWORD *)(v208 + 112);
    long long v220 = *(_OWORD *)(v208 + 128);
    *(unsigned char *)(v209 + 144) = *(unsigned char *)(v208 + 144);
    *(_OWORD *)(v209 + 112) = v219;
    *(_OWORD *)(v209 + 128) = v220;
    _OWORD *v211 = v218;
    *(void *)(v209 + 152) = *(void *)(v208 + 152);
    *(_OWORD *)(v209 + 160) = *(_OWORD *)(v208 + 160);
    int v221 = *(_DWORD *)(v208 + 176);
    *(unsigned char *)(v209 + 180) = *(unsigned char *)(v208 + 180);
    *(_DWORD *)(v209 + 176) = v221;
    long long v222 = *(_OWORD *)(v208 + 184);
    long long v223 = *(_OWORD *)(v208 + 200);
    *(_DWORD *)(v209 + 216) = *(_DWORD *)(v208 + 216);
    *(_OWORD *)(v209 + 200) = v223;
    *(_OWORD *)(v209 + 184) = v222;
    *(unsigned char *)(v209 + 224) = *(unsigned char *)(v208 + 224);
    *(void *)(v209 + 232) = *(void *)(v208 + 232);
    *(_OWORD *)(v209 + 240) = *(_OWORD *)(v208 + 240);
    *(_OWORD *)(v209 + 256) = *(_OWORD *)(v208 + 256);
    *(void *)(v209 + 272) = *(void *)(v208 + 272);
    *(void *)(v209 + 280) = *(void *)(v208 + 280);
    *(void *)(v209 + 288) = *(void *)(v208 + 288);
    *(void *)(v209 + 296) = *(void *)(v208 + 296);
    long long v224 = *(_OWORD *)(v208 + 304);
    long long v225 = *(_OWORD *)(v208 + 320);
    long long v226 = *(_OWORD *)(v208 + 336);
    *(void *)(v209 + 352) = *(void *)(v208 + 352);
    *(_OWORD *)(v209 + 320) = v225;
    *(_OWORD *)(v209 + 336) = v226;
    *(_OWORD *)(v209 + 304) = v224;
    long long v227 = *(_OWORD *)(v208 + 376);
    long long v228 = *(_OWORD *)(v208 + 392);
    long long v229 = *(_OWORD *)(v208 + 408);
    *(_OWORD *)(v209 + 424) = *(_OWORD *)(v208 + 424);
    *(_OWORD *)(v209 + 408) = v229;
    *(_OWORD *)(v209 + 392) = v228;
    *(_OWORD *)(v209 + 376) = v227;
    long long v230 = *(_OWORD *)(v208 + 440);
    long long v231 = *(_OWORD *)(v208 + 456);
    long long v232 = *(_OWORD *)(v208 + 472);
    *(_OWORD *)(v209 + 488) = *(_OWORD *)(v208 + 488);
    *(_OWORD *)(v209 + 472) = v232;
    *(_OWORD *)(v209 + 456) = v231;
    *(_OWORD *)(v209 + 440) = v230;
    long long v233 = *(_OWORD *)(v208 + 504);
    long long v234 = *(_OWORD *)(v208 + 520);
    long long v235 = *(_OWORD *)(v208 + 536);
    *(void *)(v209 + 552) = *(void *)(v208 + 552);
    *(_OWORD *)(v209 + 520) = v234;
    *(_OWORD *)(v209 + 536) = v235;
    *(_OWORD *)(v209 + 504) = v233;
    *(_OWORD *)(v209 + 360) = *(_OWORD *)(v208 + 360);
    *(unsigned char *)(v209 + 560) = 0;
    if (*(unsigned char *)(v208 + 560))
    {
      *(void *)(v209 + 568) = *(void *)(v208 + 568);
      *(unsigned char *)(v209 + 560) = 1;
    }
    *(unsigned char *)(v209 + 576) = 0;
    if (*(unsigned char *)(v208 + 576))
    {
      *(void *)(v209 + 584) = *(void *)(v208 + 584);
      *(unsigned char *)(v209 + 576) = 1;
    }
    *(_OWORD *)(v209 + 592) = *(_OWORD *)(v208 + 592);
    *(_OWORD *)(v209 + 608) = *(_OWORD *)(v208 + 608);
    long long v236 = *(_OWORD *)(v208 + 624);
    long long v237 = *(_OWORD *)(v208 + 640);
    long long v238 = *(_OWORD *)(v208 + 656);
    *(_DWORD *)(v209 + 672) = *(_DWORD *)(v208 + 672);
    *(_OWORD *)(v209 + 640) = v237;
    *(_OWORD *)(v209 + 656) = v238;
    *(_OWORD *)(v209 + 624) = v236;
    *(void *)(v209 + 680) = *(void *)(v208 + 680);
    *(void *)(v209 + 688) = *(void *)(v208 + 688);
    *(void *)(v209 + 696) = *(void *)(v208 + 696);
    *(_OWORD *)(v209 + 704) = *(_OWORD *)(v208 + 704);
    *(void *)(v209 + 720) = *(void *)(v208 + 720);
    *(unsigned char *)(v209 + 728) = 1;
  }
}

void sub_1A1A0C11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t geo::TaskQueue::barrierSync(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 56))
  {
    dispatch_sync(*(dispatch_queue_t *)(a1 + 40), &__block_literal_global_793);
    unint64_t v4 = *(id *)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3321888768;
    block[2] = ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_2;
    block[3] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
    uint64_t v5 = v20;
    uint64_t v6 = a2[3];
    if (v6)
    {
      if ((void *)v6 == a2)
      {
        uint64_t v21 = v20;
        (*(void (**)(void *, void *))(*a2 + 24))(a2, v20);
LABEL_12:
        dispatch_barrier_sync(v4, block);

        uint64_t result = (uint64_t)v21;
        if (v21 == v20)
        {
          uint64_t v11 = v20[0];
          return (*(uint64_t (**)(void *))(v11 + 32))(v5);
        }
        goto LABEL_23;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    uint64_t v21 = (void *)v6;
    goto LABEL_12;
  }
  int v7 = *(unsigned __int8 *)(a1 + 57);
  uint64_t v8 = *(id *)(a1 + 16);
  if (!v7)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3321888768;
    v13[2] = ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_2_2;
    v13[3] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
    uint64_t v5 = v14;
    uint64_t v12 = a2[3];
    if (v12)
    {
      if ((void *)v12 == a2)
      {
        uint64_t v15 = v14;
        (*(void (**)(void *, void *))(*a2 + 24))(a2, v14);
LABEL_22:
        dispatch_barrier_sync(v8, v13);

        uint64_t result = (uint64_t)v15;
        if (v15 == v14)
        {
          uint64_t v11 = v14[0];
          return (*(uint64_t (**)(void *))(v11 + 32))(v5);
        }
        goto LABEL_23;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    }
    uint64_t v15 = (void *)v12;
    goto LABEL_22;
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3321888768;
  v16[2] = ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_1;
  v16[3] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
  uint64_t v5 = v17;
  uint64_t v9 = a2[3];
  if (!v9)
  {
LABEL_10:
    uint64_t v18 = (void *)v9;
    goto LABEL_19;
  }
  if ((void *)v9 != a2)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    goto LABEL_10;
  }
  uint64_t v18 = v17;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v17);
LABEL_19:
  dispatch_async_and_wait(v8, v16);

  uint64_t result = (uint64_t)v18;
  if (v18 == v17)
  {
    uint64_t v11 = v17[0];
    return (*(uint64_t (**)(void *))(v11 + 32))(v5);
  }
LABEL_23:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1A1A0C578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<md::MapEngine::_postRender(double)::$_0,std::allocator<md::MapEngine::_postRender(double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  double v2 = (char *)operator new(0x28uLL);
  *(void *)double v2 = &unk_1EF579578;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic14runAfterLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56FF90;
}

uint64_t std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_1,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579770;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_3,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RunLogicBefore", "", v5, 2u);
  }
}

uint64_t md::CartographicRenderer::update(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 40);
  for (uint64_t i = *(uint64_t **)(result + 48); v2 != i; ++v2)
  {
    __n128 result = *v2;
    if (*v2)
    {
      if (*(unsigned char *)(result + 32)) {
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 72))(result, a2);
      }
    }
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::VenueRenderLayer::prepare(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
  if (a1[34] != a1[35]) {
    **(unsigned char **)(a2 + 736) = 1;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  double v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  uint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  long long v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    unint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    BOOL v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            uint64_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            size_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        BOOL v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint8x8_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        BOOL v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    uint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *uint64_t v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    uint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      BOOL v52 = v51;
      uint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *BOOL v52 = v55;
    *BOOL v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    uint64_t v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    unint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        uint64_t v59 = v58;
        unint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        uint64_t v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        long long v26 = v59;
      }
      while (!v60);
    }
    long long v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    uint64_t v61 = (void *)a1[34];
    for (uint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  uint64_t v84 = v63;
  long long v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    uint64_t v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          uint64_t v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)uint64_t v65 = *(void *)v63;
            v65 += 8;
            *(void *)uint64_t v63 = v68;
            goto LABEL_131;
          }
        }
        uint64_t v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    uint64_t v84 = v63;
    long long v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  double v69 = v84;
  if (v84 != v85)
  {
    double v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  double v73 = (void *)a1[37];
  double v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      double v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *double v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    double v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  uint64_t v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  char v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      int v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      int v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A1A0D388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    os_signpost_id_t v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::VenueRenderLayer::_updateStyles(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    do
    {
      os_signpost_id_t v4 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(*(void *)v3 + 384) + 48))(*(void *)(*(void *)v3 + 384));
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      if (*v4 != v6)
      {
        do
        {
          id v8 = *(id *)(v5 + 8);
          id v7 = v8;
          [v7 setNeedsTextureUpdate];

          v5 += 24;
        }
        while (v5 != v6);
      }
      v3 += 8;
    }
    while (v3 != a2);
  }
}

void sub_1A1A0D568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          unint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          double v66 = *(uint64_t **)(v15 + 32);
          if (v66)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              unint64_t v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            double v19 = *(void **)(v6 + 176);
            uint64_t v65 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              uint64_t v63 = (uint64_t **)(v6 + 232);
              uint64_t v64 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = (std::__shared_weak_count *)v19[5];
                uint64_t v71 = v21;
                double v72 = v20;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v69[0] = *(_WORD *)(v21 + 168);
                uint64_t v70 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v67, v66, (unsigned __int8 *)v69, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                long long v26 = *(char **)(v6 + 264);
                if (!v26)
                {
                  int8x8_t v27 = (char *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  unint64_t v28 = v27;
                  unint64_t v29 = v63;
                  while (1)
                  {
                    uint8x8_t v30 = *v29;
                    unint64_t v31 = v29;
                    if (!*v29) {
                      break;
                    }
                    while (1)
                    {
                      unint64_t v29 = (uint64_t **)v30;
                      unint64_t v32 = v30[4];
                      if ((unint64_t)v27 < v32) {
                        break;
                      }
                      if (v32 >= (unint64_t)v27) {
                        goto LABEL_42;
                      }
                      uint8x8_t v30 = v29[1];
                      if (!v30)
                      {
                        unint64_t v31 = v29 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  BOOL v33 = (uint64_t *)operator new(0x28uLL);
                  v33[4] = (uint64_t)v28;
                  *BOOL v33 = 0;
                  v33[1] = 0;
                  v33[2] = (uint64_t)v29;
                  *unint64_t v31 = v33;
                  uint64_t v34 = **(void **)(v6 + 224);
                  if (v34)
                  {
                    *(void *)(v6 + 224) = v34;
                    BOOL v33 = *v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v33);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  long long v26 = *(char **)(v6 + 264);
                  uint64_t v35 = 400 * *(void *)(v6 + 248) - 400;
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    uint8x8_t v36 = &v28[v35];
                    do
                    {
                      *(void *)uint8x8_t v36 = v26;
                      size_t v37 = v36 - 400;
                      long long v26 = v36;
                      uint8x8_t v36 = v37;
                    }
                    while (v37 >= v28);
                    long long v26 = v37 + 400;
                  }
                  *(void *)(v6 + 264) = v26;
                  uint64_t v21 = v71;
                  uint64_t v20 = v72;
                }
                *(void *)(v6 + 264) = *(void *)v26;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, (uint64_t)v20, v25, (v24 - 1) < 3u, &v67);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                *(void *)long long v26 = &unk_1EF513548;
                uint64_t v38 = v72;
                *((void *)v26 + 48) = v71;
                *((void *)v26 + 49) = v38;
                if (v38) {
                  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v40 = a3[1];
                unint64_t v39 = (unint64_t)a3[2];
                if ((unint64_t)v40 >= v39)
                {
                  size_t v42 = v5;
                  uint64_t v43 = *a3;
                  uint64_t v44 = (char *)v40 - (char *)*a3;
                  uint64_t v45 = v44 >> 3;
                  unint64_t v46 = (v44 >> 3) + 1;
                  if (v46 >> 61) {
                    abort();
                  }
                  uint64_t v47 = v39 - (void)v43;
                  if (v47 >> 2 > v46) {
                    unint64_t v46 = v47 >> 2;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    if (v48 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint8x8_t v49 = operator new(8 * v48);
                  }
                  else
                  {
                    uint8x8_t v49 = 0;
                  }
                  unint64_t v50 = (char **)&v49[8 * v45];
                  *unint64_t v50 = v26;
                  size_t v41 = v50 + 1;
                  if (v40 == v43)
                  {
                    uint64_t v43 = v40;
                  }
                  else
                  {
                    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
                    if (v51 < 0x58) {
                      goto LABEL_97;
                    }
                    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
                      goto LABEL_97;
                    }
                    uint64_t v52 = (v51 >> 3) + 1;
                    unint64_t v53 = &v49[8 * v45 - 16];
                    unint64_t v54 = (long long *)(v40 - 2);
                    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v56 = *v54;
                      *(v53 - 1) = *(v54 - 1);
                      _OWORD *v53 = v56;
                      v53 -= 2;
                      v54 -= 2;
                      v55 -= 4;
                    }
                    while (v55);
                    v50 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_97:
                      do
                      {
                        uint64_t v57 = *--v40;
                        *--unint64_t v50 = v57;
                      }
                      while (v40 != v43);
                      uint64_t v43 = *a3;
                    }
                  }
                  *a3 = v50;
                  a3[1] = v41;
                  a3[2] = (char **)&v49[8 * v48];
                  if (v43) {
                    operator delete(v43);
                  }
                  uint64_t v5 = v42;
                  uint64_t v6 = v64;
                }
                else
                {
                  *uint64_t v40 = v26;
                  size_t v41 = v40 + 1;
                }
                a3[1] = v41;
                unint64_t v58 = v68;
                if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                  uint64_t v59 = v72;
                  if (!v72)
                  {
LABEL_82:
                    BOOL v60 = (void *)v19[1];
                    if (!v60) {
                      goto LABEL_88;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  uint64_t v59 = v72;
                  if (!v72) {
                    goto LABEL_82;
                  }
                }
                if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  goto LABEL_82;
                }
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
                BOOL v60 = (void *)v19[1];
                if (!v60)
                {
                  do
                  {
LABEL_88:
                    uint64_t v61 = (void *)v19[2];
                    BOOL v62 = *v61 == (void)v19;
                    double v19 = v61;
                  }
                  while (!v62);
                  goto LABEL_29;
                }
                do
                {
LABEL_83:
                  uint64_t v61 = v60;
                  BOOL v60 = (void *)*v60;
                }
                while (v60);
LABEL_29:
                double v19 = v61;
              }
              while (v61 != v65);
            }
          }
        }
      }
    }
  }
}

void sub_1A1A0DB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        uint64_t v21 = a2;
        uint64_t v22 = result;
        uint64_t v20 = v2;
        double v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      id v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint8x8_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      uint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              unint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              unint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

void md::VenueRenderLayer::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void md::VenueRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4)
  {
    uint64_t v7 = 0;
    goto LABEL_48;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x4927EB92E562CC46;
    if (*(void *)&v4 <= 0x4927EB92E562CC46uLL) {
      uint64_t v6 = 0x4927EB92E562CC46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x4927EB92E562CC46;
  }
  uint64_t v8 = *v3;
  uint64_t v9 = *(void **)(v8 + 8 * v6);
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x4927EB92E562CC46)
      {
        if (v10[2] == 0x4927EB92E562CC46) {
          goto LABEL_23;
        }
      }
      else if ((v12 & (*(void *)&v4 - 1)) != v6)
      {
        goto LABEL_25;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == 0x4927EB92E562CC46) {
      break;
    }
    if (v11 >= *(void *)&v4) {
      v11 %= *(void *)&v4;
    }
    if (v11 != v6) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x4927EB92E562CC46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v13 = v10[5];
  if (*(void *)(v13 + 8) == 0x4927EB92E562CC46)
  {
    uint64_t v7 = *(void *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v14 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v14 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v14 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v15 = *(void **)(v8 + 8 * v14);
  if (!v15) {
    goto LABEL_48;
  }
  unint64_t v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_48;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v17 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v19 = v16[1];
      if (v19 == 0x1AF456233693CD46)
      {
        if (v16[2] == 0x1AF456233693CD46) {
          goto LABEL_46;
        }
      }
      else if ((v19 & v17) != v14)
      {
        goto LABEL_48;
      }
      unint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v18 = v16[1];
    if (v18 != 0x1AF456233693CD46)
    {
      if (v18 >= *(void *)&v4) {
        v18 %= *(void *)&v4;
      }
      if (v18 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v16[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      unint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v20 = v16[5];
  if (*(void *)(v20 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v21 = *(double **)(v20 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v21 = 0;
LABEL_49:
  uint64_t v22 = *a2;
  double v23 = a2[1];
  if (*a2 != v23)
  {
    do
    {
      uint64_t v24 = *v22;
      float v25 = v21[471] * v21[173] / (v21[171] * (*(double *)(*v22 + 72) - *(double *)(*v22 + 56)));
      *(float *)(v24 + 368) = v25;
      long long v26 = *(void **)(v24 + 216);
      unint64_t v27 = v26[1];
      if (v27) {
        unint64_t v28 = (float32x4_t *)v26[9];
      }
      else {
        unint64_t v28 = 0;
      }
      if (v7) {
        unint64_t v29 = (double *)(v7 + 144);
      }
      else {
        unint64_t v29 = v21 + 101;
      }
      gm::operator*<double,4,4,4>(v34[0].f64, v29, (double *)(v24 + 88));
      float32x4_t v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[6]), v34[7]);
      float32x4_t v31 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[4]), v34[5]);
      float32x4_t v32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[2]), v34[3]);
      *unint64_t v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[0]), v34[1]);
      v28[1] = v32;
      v28[2] = v31;
      v28[3] = v30;
      v28[4].i32[0] = *(_DWORD *)(v24 + 368);
      if (v27)
      {
        unint64_t v33 = v26[8];
        if (v33 <= v27) {
          unint64_t v33 = v27;
        }
        v26[7] = 0;
        v26[8] = v33;
      }
      ++v22;
    }
    while (v22 != v23);
  }
}

uint64_t md::MapEngine::logLayoutReasonsHistory(md::MapEngine *this, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 540);
  uint64_t v3 = *((void *)this + 541);
  BOOL v4 = __OFSUB__(v2, v3);
  uint64_t v5 = v2 - v3;
  if (v5 < 0 != v4) {
    unint64_t v6 = v5 + 121;
  }
  else {
    unint64_t v6 = v5;
  }
  BOOL v7 = v6 < a2 || v6 == 0;
  uint64_t v8 = !v7;
  if (!v7)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v10 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = v2 - 1;
      if (!v2) {
        uint64_t v11 = 120;
      }
      uint64_t v12 = (char *)this + 24 * v11;
      uint64_t v13 = *((void *)v12 + 176);
      stringForLayoutReasonsMask(__p, *((void *)v12 + 178));
      if (v17 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)buf = 134218498;
      unint64_t v19 = v6;
      __int16 v20 = 2048;
      uint64_t v21 = v13;
      __int16 v22 = 2080;
      double v23 = v14;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "Layouts:%lu LayoutNumber:%llu LastLayoutReasons:%s", buf, 0x20u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    *((void *)this + 541) = *((void *)this + 540);
  }
  return v8;
}

void sub_1A1A0E2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_4,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_4>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579698;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_1,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5795C0;
  a2[1] = v2;
  return result;
}

void md::AnimationManager::onTimerFired(md::AnimationManager *this, double a2)
{
  unint64_t v28 = 0;
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  BOOL v4 = (std::mutex *)((char *)this + 40);
  std::mutex::lock((std::mutex *)((char *)this + 40));
  uint64_t v5 = (uint64_t **)*((void *)this + 15);
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      BOOL v7 = v5[3];
      if ([v7 running])
      {
        uint64_t v8 = v5[3];
        char v9 = [v8 hasFrequency];

        if ((v9 & 1) == 0)
        {
          if ((unint64_t)v6 >= v30)
          {
            unint64_t v6 = std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>((void **)&v28, v5[3]);
          }
          else
          {
            *(void *)unint64_t v6 = &unk_1EF5593D8;
            *((void *)v6 + 1) = 0;
            uint64_t v10 = v5[3];
            uint64_t v11 = (void *)*((void *)v6 + 1);
            *((void *)v6 + 1) = v10;

            v6 += 24;
          }
          unint64_t v29 = v6;
        }
      }
      else
      {
      }
      uint64_t v5 = (uint64_t **)*v5;
    }
    while (v5);
  }
  else
  {
    unint64_t v6 = 0;
  }
  for (uint64_t i = (uint64_t **)*((void *)this + 20); i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v18 = i[3];
    if ([v18 running])
    {
      unint64_t v19 = i[3];
      char v20 = [v19 hasFrequency];

      if ((v20 & 1) == 0)
      {
        if ((unint64_t)v6 >= v30)
        {
          unint64_t v6 = std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>((void **)&v28, i[3]);
        }
        else
        {
          *(void *)unint64_t v6 = &unk_1EF5593D8;
          *((void *)v6 + 1) = 0;
          uint64_t v21 = i[3];
          __int16 v22 = (void *)*((void *)v6 + 1);
          *((void *)v6 + 1) = v21;

          v6 += 24;
        }
        unint64_t v29 = v6;
      }
    }
    else
    {
    }
  }
  std::mutex::unlock(v4);
  uint64_t v13 = v28;
  if (v28 == v6)
  {
    atomic_store(0, (unsigned __int8 *)this + 184);
    if (!v13) {
      return;
    }
    goto LABEL_33;
  }
  uint64_t v14 = (id *)v28;
  do
  {
    id v15 = v14[1];
    int v16 = [v15 running];

    if (v16)
    {
      id v17 = v14[1];
      [v17 onTimerFired:a2];
    }
    v14 += 3;
  }
  while (v14 != (id *)v6);
  atomic_store(0, (unsigned __int8 *)this + 184);
  if (v13)
  {
    if (v13 != v6)
    {
      double v23 = v6 - 24;
      uint64_t v24 = v23;
      float v25 = v23;
      do
      {
        long long v26 = *(void (***)(char *))v25;
        v25 -= 24;
        (*v26)(v24);
        v23 -= 24;
        BOOL v27 = v24 == v13;
        uint64_t v24 = v25;
      }
      while (!v27);
    }
LABEL_33:
    operator delete(v13);
  }
}

void sub_1A1A0E5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1A1A0E688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void geo::Pool<md::MapTileDataRenderable<md::VenueTileData>>::disposeElements(uint64_t a1)
{
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      BOOL v4 = &v29;
      uint64_t v5 = &v29;
      if (v29)
      {
        unint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            uint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            unint64_t v6 = *v5;
            BOOL v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          unint64_t v6 = v5[1];
          if (!v6)
          {
            BOOL v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        std::mutex *v4 = v8;
        if (*v28)
        {
          unint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        id v17 = (void (***)(void))(v16 + 400 * v15);
        unint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        unint64_t v19 = &v29;
        do
        {
          char v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          double v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            double v23 = (uint64_t **)v20;
            unint64_t v19 = (uint64_t **)v20;
          }
          unint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          char v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    uint64_t v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        float v25 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        float v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        uint64_t v10 = v25;
      }
      while (!v12);
    }
    uint64_t v10 = v25;
  }
  while (v25 != v11);
  uint64_t v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      long long v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          BOOL v27 = v26;
          long long v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          BOOL v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          uint64_t v10 = v27;
        }
        while (!v12);
      }
      uint64_t v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A1A0E91C(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<md::MapEngine::prune(md::PruneLevel)::$_0,std::allocator<md::MapEngine::prune(md::PruneLevel)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF579848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::clearScene(void)::$_0,std::allocator<md::MapEngine::clearScene(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579530;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::reset(void)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::reset(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F268;
}

void std::__function::__func<md::DrapingTaskScheduler::reset(void)::$_0,std::allocator<md::DrapingTaskScheduler::reset(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5750D8;
}

void std::__function::__func<md::OverlaysLogic::reset(void)::$_0,std::allocator<md::OverlaysLogic::reset(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570458;
}

long double gdc::ViewDataAccess::worldRayFromScreenNormalizedPoint(uint64_t a1, uint64_t a2, double *a3, double a4, double a5)
{
  gdc::ViewDataAccess::rigidTransformForFrame((double *)&v32, *(unsigned char *)a2, a3);
  double v10 = *(double *)(a2 + 368);
  double v9 = *(double *)(a2 + 376);
  double v11 = v9 * v10;
  if (v9 >= v10)
  {
    double v13 = *(double *)(a2 + 456);
    double v16 = v13;
    if (v10 >= v9) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (v11 <= 0.0) {
    double v12 = 1.0;
  }
  else {
    double v12 = v9 / v10;
  }
  double v13 = *(double *)(a2 + 456);
  long double v14 = tan(v13 * 0.5);
  long double v15 = atan(v12 * v14);
  double v16 = v15 + v15;
  if (v10 < v9)
  {
LABEL_8:
    if (v11 <= 0.0) {
      double v17 = 1.0;
    }
    else {
      double v17 = v10 / v9;
    }
    long double v18 = tan(v13 * 0.5);
    long double v19 = atan(v17 * v18);
    double v13 = v19 + v19;
  }
LABEL_12:
  double v20 = tan(v16 * 0.5);
  long double v21 = tan(v13 * 0.5) * a4;
  double v22 = 1.0 / sqrt(v21 * v21 + 1.0 + v20 * a5 * (v20 * a5));
  long double v23 = v22 * v21;
  double v24 = v22 * (v20 * a5);
  double v25 = -(v24 * v36 + v22 * v35) - (v24 * v36 + v22 * v35);
  long double v26 = v22 * v34 + v23 * v36 + v22 * v34 + v23 * v36;
  long double v27 = -(v23 * v35 - v24 * v34) - (v23 * v35 - v24 * v34);
  long double result = v23 + v25 * v37 + v27 * v35 - v26 * v36;
  long double v29 = v24 + v25 * v36 + v26 * v37 - v27 * v34;
  long double v30 = v27 * v37 + v26 * v34;
  double v31 = v22 + v25 * v35;
  *(_OWORD *)a1 = v32;
  *(void *)(a1 + 16) = v33;
  *(long double *)(a1 + 24) = result;
  *(long double *)(a1 + 32) = v29;
  *(long double *)(a1 + 40) = v30 - v31;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, void **a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = (void *)**a2;
  BOOL v4 = (void *)(*a2)[1];
  if (v3 != v4)
  {
    while (*v3 != 0x41D4E9297E100630)
    {
      v3 += 5;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = (md::VKMRenderResourcesStore *)v3[3];
    uint64_t v5 = (std::__shared_weak_count *)v3[4];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  unint64_t v7 = ***(uint64_t ****)(a1 + 8);
  if (v7 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v7 != 0x22D45F5AAD4BF408)
  {
    uint64_t v8 = v7 + 5;
    do
    {
      uint64_t v9 = *v8;
      v8 += 5;
    }
    while (v9 != 0x22D45F5AAD4BF408);
    unint64_t v7 = v8 - 5;
  }
  double v10 = (uint64_t (***)(void))v7[3];
  double v11 = (std::__shared_weak_count *)v7[4];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  uint64_t v12 = (**v10)(v10);
  double v13 = (const Camera *)(md::LayoutContext::frameState((md::LayoutContext *)v12) + 128);
  long double v14 = *(void **)(v12 + 8);
  int8x8_t v15 = (int8x8_t)v14[1];
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      uint64_t v17 = 0x1AF456233693CD46;
      if (*(void *)&v15 <= 0x1AF456233693CD46uLL) {
        uint64_t v17 = 0x1AF456233693CD46uLL % *(void *)&v15;
      }
    }
    else
    {
      uint64_t v17 = (*(void *)&v15 - 1) & 0x1AF456233693CD46;
    }
    long double v18 = *(void **)(*v14 + 8 * v17);
    if (v18)
    {
      long double v19 = (void *)*v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          uint64_t v20 = *(void *)&v15 - 1;
          while (1)
          {
            uint64_t v22 = v19[1];
            if (v22 == 0x1AF456233693CD46)
            {
              if (v19[2] == 0x1AF456233693CD46) {
                goto LABEL_38;
              }
            }
            else if ((v22 & v20) != v17)
            {
              goto LABEL_38;
            }
            long double v19 = (void *)*v19;
            if (!v19) {
              goto LABEL_38;
            }
          }
        }
        do
        {
          unint64_t v21 = v19[1];
          if (v21 == 0x1AF456233693CD46)
          {
            if (v19[2] == 0x1AF456233693CD46) {
              break;
            }
          }
          else
          {
            if (v21 >= *(void *)&v15) {
              v21 %= *(void *)&v15;
            }
            if (v21 != v17) {
              break;
            }
          }
          long double v19 = (void *)*v19;
        }
        while (v19);
      }
    }
  }
LABEL_38:
  gdc::CameraView::geocentricCameraView((gdc::CameraView *)&v78, v13);
  long double v23 = *(void **)(v12 + 8);
  unint64_t v24 = v23[1];
  if ((v24 & (v24 - 1)) != 0)
  {
    unint64_t v26 = 0xE42D19AFCA302E68;
    if (v24 <= 0xE42D19AFCA302E68) {
      unint64_t v26 = 0xE42D19AFCA302E68 % v24;
    }
    double v25 = *(void **)(*v23 + 8 * v26);
    do
    {
      do
        double v25 = (void *)*v25;
      while (v25[1] != 0xE42D19AFCA302E68);
    }
    while (v25[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    double v25 = *(void **)(*v23 + 8 * ((v24 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        double v25 = (void *)*v25;
      while (v25[1] != 0xE42D19AFCA302E68);
    }
    while (v25[2] != 0xE42D19AFCA302E68);
  }
  uint64_t v27 = *(unsigned __int8 *)(*(void *)(v25[5] + 32) + 72);
  unint64_t FlyoverSharedConstantDataHandle = md::VKMRenderResourcesStore::getFlyoverSharedConstantDataHandle(v6);
  uint64_t v29 = md::VKMRenderResourcesStore::getConstantData<ggl::FlyoverCommon::Shared>((uint64_t)v6, FlyoverSharedConstantDataHandle);
  uint64_t v30 = v29;
  unint64_t v31 = *(void *)(v29 + 8);
  if (v31) {
    uint64_t v32 = *(void *)(v29 + 72);
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v33 = *(void **)(v12 + 8);
  int8x8_t v34 = (int8x8_t)v33[1];
  if (!*(void *)&v34) {
    goto LABEL_74;
  }
  uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    uint64_t v36 = 0x1AF456233693CD46;
    if (*(void *)&v34 <= 0x1AF456233693CD46uLL) {
      uint64_t v36 = 0x1AF456233693CD46uLL % *(void *)&v34;
    }
  }
  else
  {
    uint64_t v36 = (*(void *)&v34 - 1) & 0x1AF456233693CD46;
  }
  double v37 = *(void **)(*v33 + 8 * v36);
  if (!v37) {
    goto LABEL_74;
  }
  uint64_t v38 = (void *)*v37;
  if (!v38) {
    goto LABEL_74;
  }
  if (v35.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v40 = v38[1];
      if (v40 == 0x1AF456233693CD46)
      {
        if (v38[2] == 0x1AF456233693CD46) {
          goto LABEL_72;
        }
      }
      else if ((v40 & (*(void *)&v34 - 1)) != v36)
      {
        goto LABEL_74;
      }
      uint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_74;
      }
    }
  }
  while (1)
  {
    unint64_t v39 = v38[1];
    if (v39 == 0x1AF456233693CD46) {
      break;
    }
    if (v39 >= *(void *)&v34) {
      v39 %= *(void *)&v34;
    }
    if (v39 != v36) {
      goto LABEL_74;
    }
LABEL_61:
    uint64_t v38 = (void *)*v38;
    if (!v38) {
      goto LABEL_74;
    }
  }
  if (v38[2] != 0x1AF456233693CD46) {
    goto LABEL_61;
  }
LABEL_72:
  uint64_t v41 = v38[5];
  if (*(void *)(v41 + 8) != 0x1AF456233693CD46)
  {
LABEL_74:
    uint64_t v42 = 0;
    goto LABEL_75;
  }
  uint64_t v42 = *(void *)(v41 + 32);
LABEL_75:
  *(float32x4_t *)uint64_t v32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v42 + 552)), *(float64x2_t *)(v42 + 568));
  *(float32x4_t *)(v32 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v42 + 584)), *(float64x2_t *)(v42 + 600));
  *(float32x4_t *)(v32 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v42 + 616)), *(float64x2_t *)(v42 + 632));
  *(float32x4_t *)(v32 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v42 + 648)), *(float64x2_t *)(v42 + 664));
  if (!*(void *)&v34) {
    goto LABEL_99;
  }
  uint8x8_t v43 = (uint8x8_t)vcnt_s8(v34);
  v43.i16[0] = vaddlv_u8(v43);
  if (v43.u32[0] > 1uLL)
  {
    uint64_t v44 = 0x41E8D6E445F4145;
    if (*(void *)&v34 <= 0x41E8D6E445F4145uLL) {
      uint64_t v44 = 0x41E8D6E445F4145uLL % *(void *)&v34;
    }
  }
  else
  {
    uint64_t v44 = (*(void *)&v34 - 1) & 0x41E8D6E445F4145;
  }
  uint64_t v45 = *(void **)(*v33 + 8 * v44);
  if (!v45) {
    goto LABEL_99;
  }
  unint64_t v46 = (void *)*v45;
  if (!v46) {
    goto LABEL_99;
  }
  if (v43.u32[0] < 2uLL)
  {
    uint64_t v47 = *(void *)&v34 - 1;
    while (1)
    {
      uint64_t v49 = v46[1];
      if (v49 == 0x41E8D6E445F4145)
      {
        if (v46[2] == 0x41E8D6E445F4145) {
          goto LABEL_96;
        }
      }
      else if ((v49 & v47) != v44)
      {
        goto LABEL_99;
      }
      unint64_t v46 = (void *)*v46;
      if (!v46) {
        goto LABEL_99;
      }
    }
  }
  while (2)
  {
    unint64_t v48 = v46[1];
    if (v48 != 0x41E8D6E445F4145)
    {
      if (v48 >= *(void *)&v34) {
        v48 %= *(void *)&v34;
      }
      if (v48 != v44) {
        goto LABEL_99;
      }
      goto LABEL_85;
    }
    if (v46[2] != 0x41E8D6E445F4145)
    {
LABEL_85:
      unint64_t v46 = (void *)*v46;
      if (!v46) {
        goto LABEL_99;
      }
      continue;
    }
    break;
  }
LABEL_96:
  uint64_t v50 = v46[5];
  if (*(void *)(v50 + 8) == 0x41E8D6E445F4145)
  {
    uint64_t v51 = *(void *)(v50 + 32);
    if (v51)
    {
      float v52 = *(double *)(v51 + 176);
      *(float32x2_t *)(v32 + 96) = vcvt_f32_f64(*(float64x2_t *)(v51 + 160));
      *(float *)(v32 + 104) = v52;
      int v53 = *(_DWORD *)(v51 + 424);
      goto LABEL_100;
    }
  }
LABEL_99:
  id v54 = objc_alloc_init(MEMORY[0x1E4F643C8]);
  double v80 = 0.0;
  double v81 = 0.0;
  double v79 = 0.0;
  [v54 calculateGeocentricDirectionForSunX:&v81 Y:&v80 Z:&v79];
  float v55 = v81;
  float v56 = v80;
  float v57 = v79;
  *(float *)(v32 + 96) = v55;
  *(float *)(v32 + 100) = v56;
  *(float *)(v32 + 104) = v57;

  int v53 = 0;
LABEL_100:
  BOOL v58 = *(double *)(v42 + 32) < 6378137.0 && v27 == 1;
  *(_DWORD *)(v32 + 112) = v53;
  float v59 = -1.0;
  if (!v58) {
    float v59 = 1.0;
  }
  if (**(unsigned char **)(v12 + 72)) {
    float v59 = 0.0;
  }
  *(float32x2_t *)(v32 + 64) = vmul_n_f32((float32x2_t)0x3F4CCCCD3F333333, v59);
  *(float *)(v32 + 72) = v59;
  long double v60 = *(double *)(v42 + 512);
  double v61 = *(double *)(v42 + 496) * *(double *)(v42 + 496) + *(double *)(v42 + 504) * *(double *)(v42 + 504);
  float v62 = sqrt(v61 + v60 * v60) + -6371008.77;
  float v63 = fmaxf(v62, 0.0);
  double v64 = sqrt(v61);
  double v65 = atan2(v60, v64 * 0.996647189);
  __double2 v66 = __sincos_stret(v65);
  double v67 = atan2(v60 + v66.__sinval * v66.__sinval * 42841.3115 * v66.__sinval, v64 + v66.__cosval * v66.__cosval * -42697.6727 * v66.__cosval);
  __double2 v68 = __sincos_stret(v67);
  float v69 = v64 / v68.__cosval - 6378137.0 / sqrt(v68.__sinval * v68.__sinval * -0.00669437999 + 1.0);
  float v70 = fmaxf(v69, 1.0);
  double v71 = v70;
  float v72 = sqrt((float)(v70 * v70) + v70 * 12742017.5);
  float v73 = v72 - v63;
  double v74 = fmax(v71, 0.0);
  if (v74 <= 8000.0) {
    double v75 = v74 * 0.000125;
  }
  else {
    double v75 = 1.0;
  }
  float v76 = v73 + (v75 * v75 * (v75 * 2.0 + -3.0) + 1.0) * (float)(v73 * -0.5);
  *(float *)(v32 + 80) = v63;
  *(float *)(v32 + 84) = v76;
  if (v31)
  {
    unint64_t v77 = *(void *)(v30 + 64);
    if (v77 <= v31) {
      unint64_t v77 = v31;
    }
    *(void *)(v30 + 56) = 0;
    *(void *)(v30 + 64) = v77;
  }
  *(void *)(a1 + 8) = 0;
}

void sub_1A1A0F324(_Unwind_Exception *a1)
{
  if (v3)
  {
    unint64_t v5 = *(void *)(v1 + 64);
    if (v5 <= v3) {
      unint64_t v5 = v3;
    }
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = v5;
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A0F83C(_Unwind_Exception *a1)
{
  std::function<void ()(md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&)>::~function((void *)(v2 - 88));
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::setupStyleConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _S8 = 1.0 / *(float *)(a4 + 40);
  if (*(unsigned __int8 *)(a3 + 24) == 255)
  {
    if (*(unsigned char *)(a4 + 5) && *(unsigned char *)(a4 + 4))
    {
      double v10 = *(double *)(a3 + 288);
      double v11 = *(double *)(a3 + 296);
      double v12 = *(double *)(a3 + 304);
      double v13 = *(double *)(a3 + 312);
      double v14 = v11 + v11;
      double v15 = (v11 + v11) * v11;
      double v16 = (v12 + v12) * v12;
      double v17 = v10 + v10;
      double v18 = (v10 + v10) * v11;
      double v19 = (v12 + v12) * v13;
      double v20 = v12 * (v10 + v10);
      double v21 = 1.0 - (v10 + v10) * v10;
      double v22 = v14 * v12;
      *(double *)&long long v49 = 1.0 - (v15 + v16);
      *((double *)&v49 + 1) = v19 + v18;
      double v52 = v18 - v19;
      double v53 = v21 - v16;
      double v56 = v13 * v14 + v20;
      double v57 = v22 - v13 * v17;
      double v50 = v20 - v13 * v14;
      double v54 = v13 * v17 + v22;
      double v58 = v21 - v15;
      uint64_t v51 = 0;
      uint64_t v55 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0x3FF0000000000000;
      uint64_t v61 = 0;
      gm::Matrix<double,4,4>::inverted<int,void>(v64.f64, (double *)&v49);
      double v23 = *(double *)(a4 + 80);
      double v24 = *(double *)(a4 + 88);
      double v25 = *(double *)(a4 + 96);
      double v26 = *(double *)(a4 + 104);
      _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, v23), v67, v24), v69, v25), v71, v26);
      _D1 = v65 * v23 + v68 * v24 + v70 * v25 + v72 * v26;
    }
    else
    {
      _Q0 = *(float64x2_t *)(a4 + 80);
      _D1 = *(double *)(a4 + 96);
    }
  }
  else
  {
    _Q0 = *(float64x2_t *)(a4 + 112);
    _D1 = *(double *)(a4 + 128);
  }
  __asm { FCVT            H9, D1 }
  _D1 = _Q0.f64[1];
  __asm
  {
    FCVT            H1, D1
    FCVT            H0, D0
  }
  WORD1(_Q0.f64[0]) = LOWORD(_D1);
  int v47 = LODWORD(_Q0.f64[0]);
  *(void *)&long long v49 = vcvtq_f32_f16(*(float16x4_t *)&_Q0.f64[0]).u64[0];
  __asm { FCVT            S0, H9 }
  *((void *)&v49 + 1) = __PAIR64__(LODWORD(_S8), _S0);
  int8x8_t v34 = (float *)(a1 + 368);
  uint8x8_t v35 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::find<md::DaVinciGroundRenderLayer::StyleCacheKey>((void *)(a1 + 368), (float *)&v49);
  if (v35)
  {
    uint64_t v36 = v35[4];
  }
  else
  {
    uint64_t v37 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::Style>>::pop(*(void *)(a1 + 1704));
    uint64_t v36 = v37;
    float64x2_t v64 = 0uLL;
    unint64_t v38 = *(void *)(v37 + 8);
    v39.f64[0] = 0.0;
    *(void *)&v39.f64[1] = v37;
    if (v38) {
      float64_t v40 = *(double *)(v37 + 72);
    }
    else {
      float64_t v40 = 0.0;
    }
    int v41 = v47;
    float64x2_t v48 = v39;
    float64x2_t v64 = v39;
    double v65 = 0.0;
    unint64_t v66 = v38;
    v67.f64[1] = v40;
    LOWORD(v67.f64[0]) = 1;
    __asm { FCVT            H0, S8 }
    **(_DWORD **)&float64_t v40 = v41;
    *(_WORD *)(*(void *)&v40 + 4) = _H9;
    *(_WORD *)(*(void *)&v40 + 6) = _H0;
    std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::StyleCacheKey,md::DaVinciGroundRenderLayer::StyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::Style> *&>(v34, (float *)&v49, &v49, v37);
    if (v38)
    {
      if (*(void *)&v48.f64[0] && *(unsigned char *)(*(void *)&v48.f64[1] + 17) != 2) {
        (*(void (**)(void))(**(void **)&v48.f64[0] + 64))();
      }
      unint64_t v43 = *(void *)(*(void *)&v48.f64[1] + 64);
      if (v43 <= v38) {
        unint64_t v43 = v38;
      }
      *(void *)(*(void *)&v48.f64[1] + 56) = 0;
      *(void *)(*(void *)&v48.f64[1] + 64) = v43;
    }
  }
  uint64_t v44 = *(void *)(a2 + 64);
  *(void *)(v44 + 80) = v36;
  *(void *)(v44 + 88) = 0;
  uint64_t v45 = *(void *)(a2 + 160);
  unint64_t v46 = *(std::__shared_weak_count **)(v45 + 88);
  *(void *)(v45 + 80) = 0;
  *(void *)(v45 + 88) = 0;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
}

void sub_1A1A0FB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void gdc::Tiled::setZBoundsInMeters(unsigned __int8 *a1, double *a2, double *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  int v6 = 1 << a1[1];
  double v7 = 1.0 / (double)v6;
  uint64_t v8 = *((int *)a1 + 2);
  double v9 = (double)(v6 + ~*((_DWORD *)a1 + 1));
  double v10 = *a2;
  double v11 = *a3;
  double v12 = v7 * (double)v8;
  double v13 = v7 * v9;
  *((double *)a1 + 54) = *a2;
  *((double *)a1 + 55) = v11;
  double v14 = (double *)(a1 + 304);
  *((double *)a1 + 38) = v7;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *((double *)a1 + 43) = v7;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((double *)a1 + 48) = v7;
  *((void *)a1 + 49) = 0;
  *((double *)a1 + 50) = v12;
  *((double *)a1 + 51) = v7 * v9;
  *((_OWORD *)a1 + 26) = xmmword_1A28FCCC0;
  *((double *)a1 + 16) = v12;
  *((double *)a1 + 17) = v7 * v9;
  *((double *)a1 + 18) = v10 * 0.0000000249532021;
  *((double *)a1 + 19) = v12 + v7;
  *((double *)a1 + 20) = v7 * v9 + v7;
  *((double *)a1 + 21) = v11 * 0.0000000249532021;
  double v15 = v7 + (double)v8 * v7;
  double v16 = v7 + v9 * v7;
  if (*a1 == 255)
  {
    double v52 = v12;
    double v53 = v13;
    double v54 = v15;
    double v55 = v16;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)buf, &v52, v10, v11);
    double v22 = *(double *)&buf[40];
    double v21 = *(double *)&buf[32];
    *((void *)a1 + 7) = *(void *)&buf[32];
    *((double *)a1 + 8) = v22;
    uint64_t v23 = *(void *)buf;
    uint64_t v24 = *(void *)&buf[8];
    *((void *)a1 + 3) = *(void *)buf;
    *((void *)a1 + 4) = v24;
    long long v25 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&buf[16];
    double v27 = *(double *)&buf[56];
    double v26 = *(double *)&buf[48];
    *((void *)a1 + 9) = *(void *)&buf[48];
    *((double *)a1 + 10) = v27;
    long long v28 = *(_OWORD *)&buf[64];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&buf[64];
    long long v29 = *(_OWORD *)&buf[80];
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&buf[80];
    double v30 = *(double *)&v69;
    *((void *)a1 + 15) = v69;
    memset(&buf[8], 0, 88);
    long long v69 = *((_OWORD *)a1 + 5);
    uint64_t v70 = *((void *)a1 + 12);
    uint64_t v71 = 0x3FF0000000000000;
    *(double *)buf = *(double *)&v29 - v27;
    *(double *)&buf[40] = *((double *)&v29 + 1) - *(double *)&v28;
    *(double *)&buf[80] = v30 - *((double *)&v28 + 1);
    double v31 = v21 + v21;
    double v32 = (v21 + v21) * v21;
    double v33 = (v22 + v22) * v22;
    double v34 = v21 * (*((double *)&v25 + 1) + *((double *)&v25 + 1));
    double v35 = v26 * (v22 + v22);
    double v36 = v22 * (*((double *)&v25 + 1) + *((double *)&v25 + 1));
    double v37 = v26 * v31;
    double v38 = v26 * v31 + v36;
    double v39 = 1.0 - (*((double *)&v25 + 1) + *((double *)&v25 + 1)) * *((double *)&v25 + 1);
    double v40 = v22 * v31;
    double v41 = v26 * (*((double *)&v25 + 1) + *((double *)&v25 + 1));
    double v52 = 1.0 - (v32 + v33);
    double v53 = v35 + v34;
    double v56 = v34 - v35;
    double v57 = v39 - v33;
    double v60 = v38;
    double v61 = v40 - v41;
    double v54 = v36 - v37;
    double v58 = v41 + v40;
    double v62 = v39 - v32;
    double v55 = 0.0;
    uint64_t v59 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = v23;
    uint64_t v65 = v24;
    uint64_t v66 = v25;
    uint64_t v67 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)v51, &v52, (double *)buf);
    long long v42 = v51[1];
    *((_OWORD *)a1 + 11) = v51[0];
    *((_OWORD *)a1 + 12) = v42;
    long long v43 = v51[3];
    *((_OWORD *)a1 + 13) = v51[2];
    *((_OWORD *)a1 + 14) = v43;
    long long v44 = v51[5];
    *((_OWORD *)a1 + 15) = v51[4];
    *((_OWORD *)a1 + 16) = v44;
    long long v17 = v51[7];
    *((_OWORD *)a1 + 17) = v51[6];
  }
  else
  {
    double v52 = v12;
    double v53 = v13;
    double v54 = v15;
    double v55 = v16;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)buf, &v52, v10, v11);
    long long v17 = xmmword_1A28FCCC0;
    long long v18 = *(_OWORD *)&buf[48];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)&buf[32];
    long long v19 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 40) = v19;
    *(_OWORD *)(a1 + 72) = v18;
    long long v20 = *(_OWORD *)&buf[80];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&buf[64];
    *(_OWORD *)(a1 + 104) = v20;
    *((void *)a1 + 15) = v69;
    *((void *)a1 + 22) = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *((void *)a1 + 27) = 0x3FF0000000000000;
    *((_OWORD *)a1 + 14) = 0u;
    *((_OWORD *)a1 + 15) = 0u;
    *((void *)a1 + 32) = 0x3FF0000000000000;
    *((void *)a1 + 33) = 0;
    *((void *)a1 + 34) = 0;
    *((void *)a1 + 35) = 0;
  }
  *((_OWORD *)a1 + 18) = v17;
  if (gm::Matrix<double,4,4>::determinant<int,void>(v14) == 0.0)
  {
    if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_55048);
    }
    uint64_t v45 = GEOGetGeoDisplayCoreDefaultLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDefaultLog::log, OS_LOG_TYPE_ERROR))
    {
      int v47 = *((_DWORD *)a1 + 1);
      int v46 = *((_DWORD *)a1 + 2);
      int v48 = a1[1];
      double v49 = *a2;
      double v50 = *a3;
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)&uint8_t buf[4] = v46;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v47;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v48;
      *(_WORD *)&buf[20] = 2048;
      *(double *)&buf[22] = v49;
      *(_WORD *)&buf[30] = 2048;
      *(double *)&unsigned char buf[32] = v50;
      *(_WORD *)&buf[40] = 2080;
      *(void *)&buf[42] = "_transformData.mercatorMatrix.determinant() != 0";
      *(_WORD *)&buf[50] = 2080;
      *(void *)&buf[52] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoDisplayCore/GeoDisplayCore/Tiled.cpp";
      *(_WORD *)&buf[60] = 1024;
      *(_DWORD *)&buf[62] = 89;
      _os_log_impl(&dword_1A1780000, v45, OS_LOG_TYPE_ERROR, "Tile (x:%d y:%d level:%d) does not have an invertable matrix with zbounds min:%f max:%f: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x42u);
    }
  }
}

uint64_t gdc::CameraView::geocentricCameraView(gdc::CameraView *this, const Camera *a2)
{
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v18, (double *)a2 + 1);
  double v4 = *((double *)a2 + 46);
  double v5 = *((double *)a2 + 47);
  v16[0] = (int)v4;
  v16[1] = (int)v5;
  float v6 = *((float *)a2 + 122);
  float v7 = *((float *)a2 + 123);
  if (v5 >= v4)
  {
    double v13 = *((double *)a2 + 57);
  }
  else
  {
    double v8 = v5 * v4;
    double v9 = v5 / v4;
    if (v8 <= 0.0) {
      double v10 = 1.0;
    }
    else {
      double v10 = v9;
    }
    long double v11 = tan(*((double *)a2 + 57) * 0.5);
    long double v12 = atan(v11 * v10);
    double v13 = v12 + v12;
  }
  double v15 = v13;
  gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView((uint64_t)v17, (uint64_t)v18, v16, &v15, v6, v7, 1.0, *((double *)a2 + 58), *((double *)a2 + 59), *((double *)a2 + 60));
  return gdc::CameraView::CameraView((uint64_t)this, (uint64_t)a2, (uint64_t)v17);
}

double gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(double *a1, double *a2)
{
  double v4 = a2[1];
  double v5 = a2[2];
  __double2 v6 = __sincos_stret(*a2);
  double v7 = 6378137.0 / sqrt(v6.__sinval * v6.__sinval * -0.00669437999 + 1.0);
  double v8 = (v7 + v5) * v6.__cosval;
  __double2 v9 = __sincos_stret(v4);
  double v10 = (v5 + v7 * 0.99330562) * v6.__sinval;
  __double2 v11 = __sincos_stret(v4 + 0.00001);
  double v12 = 1.0 / sqrt(v8 * v9.__cosval * (v8 * v9.__cosval) + v8 * v9.__sinval * (v8 * v9.__sinval) + v10 * v10);
  double v13 = v12 * (v8 * v9.__cosval);
  double v14 = v12 * (v8 * v9.__sinval);
  double v15 = v12 * v10;
  double v16 = -(v8 * v9.__cosval - v8 * v11.__cosval);
  double v17 = -(v8 * v9.__sinval - v8 * v11.__sinval);
  double v18 = 1.0 / sqrt(v16 * v16 + v17 * v17);
  double v19 = v18 * v16;
  double v20 = v18 * v17;
  double v21 = -(v20 * v15);
  double v22 = v19 * v15;
  double v23 = -(v19 * v14 - v13 * v20);
  double v24 = -(v23 * v14 - v19 * v15 * v15);
  double v25 = -(v21 * v15 - v23 * v13);
  double v26 = -(v19 * v15 * v13 - v21 * v14);
  double v27 = v24 + v22 + v15;
  if (v27 <= 0.0)
  {
    if (v24 <= v22 || v24 <= v15)
    {
      BOOL v31 = v22 <= v15;
      double v32 = sqrt(v15 + 1.0 - (v24 + v22));
      double v33 = 1.0 / (v32 + v32);
      double v34 = (v26 + v13) * v33;
      double v35 = v23 + v14;
      double v36 = v35 * v33;
      double v37 = v32 * 0.5;
      double v38 = (v25 - v21) * v33;
      double v39 = sqrt(v22 + 1.0 - (v15 + v24));
      double v40 = v25 + v21;
      double v41 = 1.0 / (v39 + v39);
      double v42 = v40 * v41;
      double v43 = v39 * 0.5;
      double v44 = v35 * v41;
      double v45 = (v13 - v26) * v41;
      if (v31) {
        double v46 = v34;
      }
      else {
        double v46 = v42;
      }
      if (v31) {
        double v47 = v36;
      }
      else {
        double v47 = v43;
      }
      double v68 = v47;
      double v69 = v46;
      if (v31) {
        double v48 = v37;
      }
      else {
        double v48 = v44;
      }
      double v66 = v48;
      if (v31) {
        double v29 = v38;
      }
      else {
        double v29 = v45;
      }
    }
    else
    {
      double v49 = sqrt(1.0 - (v15 + v22) + v24);
      double v68 = (v25 + v21) * (1.0 / (v49 + v49));
      double v69 = v49 * 0.5;
      double v66 = (v26 + v13) * (1.0 / (v49 + v49));
      double v29 = (v23 - v14) * (1.0 / (v49 + v49));
    }
  }
  else
  {
    double v28 = 0.5 / sqrt(v27 + 1.0);
    double v68 = v28 * (v13 - v26);
    double v69 = v28 * (v23 - v14);
    double v66 = v28 * (v25 - v21);
    double v29 = 0.25 / v28;
  }
  double v67 = v29;
  double v50 = a2[5];
  __double2 v51 = __sincos_stret(a2[4] * 0.5);
  __double2 v52 = __sincos_stret(v50 * 0.5);
  double v53 = a2[6];
  __double2 v54 = __sincos_stret((v53 + v50) * 0.5);
  __double2 v55 = __sincos_stret((v50 - v53) * 0.5);
  double v56 = v51.__sinval * v52.__cosval * v67
      + v51.__cosval * v52.__cosval * v69
      + v51.__cosval * v52.__sinval * v68
      - v51.__sinval * v52.__sinval * v66;
  double v57 = v51.__sinval * v52.__sinval * v67
      + v51.__cosval * v52.__cosval * v68
      + v51.__sinval * v52.__cosval * v66
      - v51.__cosval * v52.__sinval * v69;
  double v58 = v51.__cosval * v52.__sinval * v67
      + v51.__sinval * v52.__sinval * v69
      + v51.__cosval * v52.__cosval * v66
      - v51.__sinval * v52.__cosval * v68;
  double v59 = -(v51.__sinval * v52.__sinval * v68
        + v51.__cosval * v52.__sinval * v66
        + v51.__sinval * v52.__cosval * v69
        - v51.__cosval * v52.__cosval * v67);
  double v60 = v56 * -2.0 * v59;
  double v61 = -(v56 * -2.0 * v58 - (v57 + v57) * v59);
  double v62 = v60 + (v57 + v57) * v58;
  double v63 = -(v56 * -2.0 * v56 + 1.0 - (v57 + v57) * v57);
  double v64 = a2[3];
  *a1 = v8 * v9.__cosval + v61 * v64;
  a1[1] = v8 * v9.__sinval + v62 * v64;
  a1[2] = v10 - v63 * v64;
  a1[3] = v55.__cosval * v51.__sinval * v67
        + v54.__cosval * v51.__cosval * v69
        + v54.__sinval * v51.__cosval * v68
        - v55.__sinval * v51.__sinval * v66;
  double result = -(v55.__sinval * v51.__sinval * v68
           + v54.__sinval * v51.__cosval * v66
           + v55.__cosval * v51.__sinval * v69
           - v54.__cosval * v51.__cosval * v67);
  a1[4] = v55.__sinval * v51.__sinval * v67
        + v54.__cosval * v51.__cosval * v68
        + v55.__cosval * v51.__sinval * v66
        - v54.__sinval * v51.__cosval * v69;
  a1[5] = v54.__sinval * v51.__cosval * v67
        + v55.__sinval * v51.__sinval * v69
        + v54.__cosval * v51.__cosval * v66
        - v55.__cosval * v51.__sinval * v68;
  a1[6] = result;
  return result;
}

uint64_t gdc::CameraView::CameraView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  long long v8 = *(_OWORD *)(a2 + 152);
  long long v9 = *(_OWORD *)(a2 + 168);
  long long v10 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  long long v11 = *(_OWORD *)(a2 + 216);
  long long v12 = *(_OWORD *)(a2 + 232);
  long long v13 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v13;
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  long long v14 = *(_OWORD *)(a2 + 280);
  long long v15 = *(_OWORD *)(a2 + 296);
  long long v16 = *(_OWORD *)(a2 + 312);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 312) = v16;
  *(_OWORD *)(a1 + 280) = v14;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 336) = 0;
  if (*(unsigned char *)(a2 + 336))
  {
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(unsigned char *)(a1 + 336) = 1;
  }
  double v17 = (float64x2_t *)(a1 + 1000);
  *(unsigned char *)(a1 + 352) = 0;
  if (*(unsigned char *)(a2 + 352))
  {
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(unsigned char *)(a1 + 352) = 1;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  long long v18 = *(_OWORD *)(a2 + 400);
  long long v19 = *(_OWORD *)(a2 + 416);
  long long v20 = *(_OWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 416) = v19;
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 400) = v18;
  *(void *)&long long v19 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = v19;
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  geo::View<double>::View(a1 + 496, (long long *)a3, (double *)(a3 + 56), (long long *)(a3 + 184), (_WORD *)(a3 + 456), *(_DWORD *)(a3 + 460), *(double *)(a3 + 440));
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a3 + 464);
  *(void *)(a1 + 976) = *(void *)(a3 + 480);
  double v21 = *(double *)(a3 + 440);
  double v23 = *(double *)(a3 + 312);
  double v22 = *(double *)(a3 + 320);
  double v25 = *(double *)(a3 + 344);
  double v24 = *(double *)(a3 + 352);
  double v27 = *(double *)(a3 + 376);
  double v26 = *(double *)(a3 + 384);
  double v28 = *(double *)(a3 + 328);
  double v29 = *(double *)(a3 + 336);
  double v30 = *(double *)(a3 + 360);
  double v31 = *(double *)(a3 + 368);
  double v32 = *(double *)(a3 + 392);
  double v33 = *(double *)(a3 + 400);
  double v34 = v28 - v29 * v21;
  double v35 = v30 - v31 * v21;
  v36.f64[0] = v32 - v33 * v21;
  double v38 = *(double *)(a3 + 408);
  double v37 = *(double *)(a3 + 416);
  double v39 = *(double *)(a3 + 424);
  double v40 = *(double *)(a3 + 432);
  double v41 = v29 + v23;
  double v42 = v31 + v25;
  v43.f64[0] = v33 + v27;
  v43.f64[1] = v40 + v38;
  double v44 = v29 - v23;
  double v45 = v31 - v25;
  v46.f64[0] = v33 - v27;
  v46.f64[1] = v40 - v38;
  double v47 = v29 + v22;
  double v48 = v31 + v24;
  v49.f64[0] = v33 + v26;
  v49.f64[1] = v40 + v37;
  double v50 = v29 - v22;
  double v51 = v31 - v24;
  v52.f64[0] = v33 - v26;
  v52.f64[1] = v40 - v37;
  v36.f64[1] = v39 - v40 * v21;
  double v53 = v29 - v28;
  double v54 = v31 - v30;
  v55.f64[0] = v33 - v32;
  double v56 = 1.0 / sqrt(v34 * v34 + v35 * v35 + v36.f64[0] * v36.f64[0]);
  v55.f64[1] = v40 - v39;
  *(double *)(a1 + 984) = v56 * v34;
  *(double *)(a1 + 992) = v56 * v35;
  *double v17 = vmulq_n_f64(v36, v56);
  double v57 = 1.0 / sqrt(v53 * v53 + v54 * v54 + v55.f64[0] * v55.f64[0]);
  *(double *)(a1 + 1016) = v57 * v53;
  *(double *)(a1 + 1024) = v57 * v54;
  *(float64x2_t *)(a1 + 1032) = vmulq_n_f64(v55, v57);
  double v58 = 1.0 / sqrt(v47 * v47 + v48 * v48 + v49.f64[0] * v49.f64[0]);
  *(double *)(a1 + 1048) = v58 * v47;
  *(double *)(a1 + 1056) = v58 * v48;
  *(float64x2_t *)(a1 + 1064) = vmulq_n_f64(v49, v58);
  double v59 = 1.0 / sqrt(v50 * v50 + v51 * v51 + v52.f64[0] * v52.f64[0]);
  *(double *)(a1 + 1080) = v59 * v50;
  *(double *)(a1 + 1088) = v59 * v51;
  *(float64x2_t *)(a1 + 1096) = vmulq_n_f64(v52, v59);
  double v60 = 1.0 / sqrt(v41 * v41 + v42 * v42 + v43.f64[0] * v43.f64[0]);
  *(double *)(a1 + 1112) = v60 * v41;
  *(double *)(a1 + 1120) = v60 * v42;
  *(float64x2_t *)(a1 + 1128) = vmulq_n_f64(v43, v60);
  double v61 = 1.0 / sqrt(v44 * v44 + v45 * v45 + v46.f64[0] * v46.f64[0]);
  *(double *)(a1 + 1144) = v61 * v44;
  *(double *)(a1 + 1152) = v61 * v45;
  *(float64x2_t *)(a1 + 1160) = vmulq_n_f64(v46, v61);
  geo::Frustum<double>::calculateCorners((double *)(a1 + 984), (double *)(a3 + 312), v21);
  return a1;
}

double geo::Frustum<double>::calculateCorners(double *a1, double *a2, double a3)
{
  gm::Matrix<double,4,4>::inverted<int,void>(&v48, a2);
  double v5 = v48;
  double v6 = v49;
  double v8 = v52;
  double v7 = v53;
  double v9 = v52 + v48;
  double v10 = v56;
  double v11 = v57;
  double v12 = v60;
  double v13 = v61;
  double v14 = v60 + v56 * a3;
  double v15 = v53 + v49;
  double v16 = v61 + v57 * a3;
  double v17 = v50;
  double v18 = v51;
  double v19 = v54;
  double v20 = v55;
  double v21 = v54 + v50;
  double v23 = v58;
  double v22 = v59;
  double v24 = v62;
  double v25 = v63;
  double v26 = v62 + v58 * a3;
  double v27 = v55 + v51;
  double v28 = v63 + v59 * a3;
  double v29 = 1.0 / (v28 - (v55 + v51));
  double v30 = v29 * (v14 - (v52 + v48));
  double v31 = v29 * (v16 - (v53 + v49));
  double v32 = v29 * (v26 - (v54 + v50));
  a1[24] = v30;
  a1[25] = v31;
  double v33 = v12 + v10;
  double v34 = v13 + v11;
  double v35 = v25 + v22;
  double v36 = 1.0 / (v25 + v22 - v27);
  a1[26] = v32;
  a1[27] = v36 * (v33 - v9);
  a1[28] = v36 * (v34 - v15);
  a1[29] = v36 * (v24 + v23 - v21);
  double v37 = 1.0 / (v28 + v20 - v18);
  a1[30] = v37 * (v14 + v8 - v5);
  a1[31] = v37 * (v16 + v7 - v6);
  double v38 = 1.0 / (v35 + v20 - v18);
  a1[32] = v37 * (v26 + v19 - v17);
  a1[33] = v38 * (v33 + v8 - v5);
  a1[34] = v38 * (v34 + v7 - v6);
  a1[35] = v38 * (v24 + v23 + v19 - v17);
  double v39 = v5 - v8;
  double v40 = v6 - v7;
  double v41 = v17 - v19;
  double v42 = v18 - v20;
  double v43 = 1.0 / (v28 + v18 - v20);
  a1[36] = v43 * (v14 + v39);
  a1[37] = v43 * (v16 + v40);
  double v44 = 1.0 / (v35 + v42);
  a1[38] = v43 * (v26 + v41);
  a1[39] = v44 * (v33 + v39);
  a1[40] = v44 * (v34 + v40);
  a1[41] = v44 * (v24 + v23 + v41);
  double v45 = 1.0 / (v28 + v27);
  a1[42] = v45 * (v14 + v9);
  a1[43] = v45 * (v16 + v15);
  double v46 = 1.0 / (v35 + v27);
  a1[44] = v45 * (v26 + v21);
  a1[45] = v46 * (v33 + v9);
  double result = v46 * (v24 + v23 + v21);
  a1[46] = v46 * (v34 + v15);
  a1[47] = result;
  return result;
}

double gm::Matrix<double,4,4>::inverted<int,void>(double *a1, double *a2)
{
  double v4 = gm::Matrix<double,4,4>::determinant<int,void>(a2);
  double v5 = a2[14];
  double v6 = a2[15];
  double v8 = a2[8];
  double v7 = a2[9];
  double v9 = a2[10];
  double v10 = a2[11];
  double v12 = a2[12];
  double v11 = a2[13];
  double v13 = a2[6];
  double v14 = a2[7];
  double v16 = a2[4];
  double v15 = a2[5];
  double v17 = 1.0 / v4;
  double v18 = a2[2];
  double v19 = a2[3];
  double v20 = *a2;
  double v21 = a2[1];
  *a1 = (v13 * v11 * v10 + (v5 * v7 - v9 * v11) * v14 + v15 * v9 * v6 - (v6 * (v13 * v7) + v15 * v5 * v10)) * v17;
  a1[1] = (v19 * (v9 * v11 - v5 * v7) + v18 * v7 * v6 + v21 * v5 * v10 - (v18 * v11 * v10 + v21 * v9 * v6)) * v17;
  a1[2] = (v19 * (v15 * v5 - v13 * v11) + v18 * v11 * v14 + v21 * v13 * v6 - (v18 * v15 * v6 + v21 * v5 * v14)) * v17;
  a1[3] = (v19 * (v13 * v7 - v15 * v9) + v18 * v15 * v10 + v21 * v9 * v14 - (v18 * v7 * v14 + v21 * v13 * v10)) * v17;
  a1[4] = ((v12 * v9 - v8 * v5) * v14 + (v8 * v13 - v16 * v9) * v6 + (v16 * v5 - v12 * v13) * v10) * v17;
  a1[5] = (v12 * v18 * v10 + (v8 * v5 - v12 * v9) * v19 + v20 * v9 * v6 - (v8 * v18 * v6 + v20 * v5 * v10)) * v17;
  a1[6] = ((v12 * v13 - v16 * v5) * v19 + (v16 * v18 - v20 * v13) * v6 + (v20 * v5 - v12 * v18) * v14) * v17;
  a1[7] = (v8 * v18 * v14 + (v16 * v9 - v8 * v13) * v19 + v20 * v13 * v10 - (v16 * v18 * v10 + v20 * v9 * v14)) * v17;
  double v22 = v8 * v11 - v12 * v7;
  double v23 = v12 * v15;
  double v24 = v16 * v11;
  double v25 = v8 * v15;
  double v26 = v16 * v7;
  double v27 = (v12 * v15 * v10 + v22 * v14 + v16 * v7 * v6 - (v8 * v15 * v6 + v16 * v11 * v10)) * v17;
  double v28 = v12 * v7 - v8 * v11;
  double v29 = v12 * v21;
  double v30 = v20 * v11;
  double v31 = v8 * v21;
  double v32 = v20 * v7;
  a1[8] = v27;
  a1[9] = (v28 * v19 + (v31 - v32) * v6 + (v30 - v29) * v10) * v17;
  double v33 = v16 * v21;
  double v34 = v20 * v15;
  a1[10] = (v29 * v14 + (v24 - v23) * v19 + v34 * v6 - (v33 * v6 + v30 * v14)) * v17;
  a1[11] = ((v25 - v26) * v19 + (v33 - v34) * v10 + (v32 - v31) * v14) * v17;
  a1[12] = (v28 * v13 + (v25 - v26) * v5 + (v24 - v23) * v9) * v17;
  a1[13] = (v29 * v9 + v22 * v18 + v32 * v5 - (v31 * v5 + v30 * v9)) * v17;
  double v35 = ((v23 - v24) * v18 + (v33 - v34) * v5 + (v30 - v29) * v13) * v17;
  double result = (v31 * v13 + (v26 - v25) * v18 + v34 * v9 - (v33 * v9 + v32 * v13)) * v17;
  a1[14] = v35;
  a1[15] = result;
  return result;
}

double gm::Matrix<double,4,4>::determinant<int,void>(double *a1)
{
  double v2 = a1[8];
  double v1 = a1[9];
  double v3 = a1[12];
  double v4 = a1[13];
  double v5 = a1[6];
  double v6 = a1[7];
  double v8 = a1[4];
  double v7 = a1[5];
  double v9 = a1[14];
  double v10 = a1[15];
  double v11 = a1[10];
  double v12 = a1[11];
  double v13 = a1[2];
  double v14 = a1[1];
  return ((v1 * v3 - v4 * v2) * v5 + (v7 * v2 - v8 * v1) * v9 + (v8 * v4 - v7 * v3) * v11) * a1[3]
       + (v14 * v8 * v9 + v13 * (v7 * v3) + *a1 * v4 * v5) * v12
       + (v13 * (v8 * v1) + v14 * v2 * v5 + *a1 * v7 * v11) * v10
       + (v13 * (v4 * v2) + v14 * v3 * v11 + *a1 * v1 * v9) * v6
       - (v10 * v13 * (v7 * v2)
        + v6 * v13 * (v1 * v3)
        + v12 * v9 * (*a1 * v7)
        + (v13 * (v8 * v4) + v14 * v3 * v5) * v12
        + (v14 * v2 * v9 + *a1 * v4 * v11) * v6
        + (v14 * v8 * v11 + *a1 * v1 * v5) * v10);
}

void *std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::find<md::DaVinciGroundRenderLayer::StyleCacheKey>(void *a1, float *a2)
{
  float v2 = a2[1];
  float v3 = a2[2];
  float v4 = a2[3];
  unint64_t v5 = *(unsigned int *)a2 - 0x61C8864680B583EBLL;
  if (*a2 == 0.0) {
    unint64_t v5 = 0x9E3779B97F4A7C15;
  }
  uint64_t v6 = LODWORD(v2) - 0x61C8864680B583EBLL;
  if (v2 == 0.0) {
    uint64_t v6 = 0x9E3779B97F4A7C15;
  }
  uint64_t v7 = LODWORD(v3) - 0x61C8864680B583EBLL;
  if (v3 == 0.0) {
    uint64_t v7 = 0x9E3779B97F4A7C15;
  }
  uint64_t v8 = LODWORD(v4) - 0x61C8864680B583EBLL;
  if (v4 == 0.0) {
    uint64_t v8 = 0x9E3779B97F4A7C15;
  }
  int8x8_t v9 = (int8x8_t)a1[1];
  if (!*(void *)&v9) {
    return 0;
  }
  unint64_t v10 = (v7 + ((((v5 >> 2) + (v5 << 6) + v6) ^ v5) << 6) + ((((v5 >> 2) + (v5 << 6) + v6) ^ v5) >> 2)) ^ ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
  unint64_t v11 = (v8 + (v10 << 6) + (v10 >> 2)) ^ v10;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v9);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = v11;
    if (v11 >= *(void *)&v9) {
      unint64_t v13 = v11 % *(void *)&v9;
    }
  }
  else
  {
    unint64_t v13 = v11 & (*(void *)&v9 - 1);
  }
  double v14 = *(void **)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  double result = (void *)*v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      uint64_t v16 = *(void *)&v9 - 1;
      while (1)
      {
        uint64_t v20 = result[1];
        if (v20 == v11)
        {
          if (result[2] == *(void *)a2 && result[3] == *((void *)a2 + 1)) {
            return result;
          }
        }
        else if ((v20 & v16) != v13)
        {
          return 0;
        }
        double result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v18 = result[1];
      if (v18 == v11)
      {
        if (result[2] == *(void *)a2 && result[3] == *((void *)a2 + 1)) {
          return result;
        }
      }
      else
      {
        if (v18 >= *(void *)&v9) {
          v18 %= *(void *)&v9;
        }
        if (v18 != v13) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::StyleCacheKey,md::DaVinciGroundRenderLayer::StyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::Style> *&>(float *a1, float *a2, _OWORD *a3, uint64_t a4)
{
  float v8 = a2[1];
  float v9 = a2[2];
  float v10 = a2[3];
  uint64_t v11 = 0x9E3779B97F4A7C15;
  unint64_t v12 = *(unsigned int *)a2 - 0x61C8864680B583EBLL;
  if (*a2 == 0.0) {
    unint64_t v12 = 0x9E3779B97F4A7C15;
  }
  uint64_t v13 = LODWORD(v8) - 0x61C8864680B583EBLL;
  if (v8 == 0.0) {
    uint64_t v13 = 0x9E3779B97F4A7C15;
  }
  unint64_t v14 = ((v12 >> 2) + (v12 << 6) + v13) ^ v12;
  uint64_t v15 = LODWORD(v9) - 0x61C8864680B583EBLL;
  if (v9 == 0.0) {
    uint64_t v15 = 0x9E3779B97F4A7C15;
  }
  unint64_t v16 = (v15 + (v14 << 6) + (v14 >> 2)) ^ v14;
  if (v10 != 0.0) {
    uint64_t v11 = LODWORD(v10) - 0x61C8864680B583EBLL;
  }
  unint64_t v17 = (v11 + (v16 << 6) + (v16 >> 2)) ^ v16;
  unint64_t v18 = *((void *)a1 + 1);
  if (v18)
  {
    uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      unint64_t v4 = (v11 + (v16 << 6) + (v16 >> 2)) ^ v16;
      if (v17 >= v18) {
        unint64_t v4 = v17 % v18;
      }
    }
    else
    {
      unint64_t v4 = v17 & (v18 - 1);
    }
    uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
    if (v20)
    {
      double v21 = (void *)*v20;
      if (v21)
      {
        if (v19.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v25 = v21[1];
            if (v25 == v17)
            {
              if (v21[2] == *(void *)a2 && v21[3] == *((void *)a2 + 1)) {
                return;
              }
            }
            else if ((v25 & (v18 - 1)) != v4)
            {
              goto LABEL_36;
            }
            double v21 = (void *)*v21;
            if (!v21) {
              goto LABEL_36;
            }
          }
        }
        do
        {
          unint64_t v23 = v21[1];
          if (v23 == v17)
          {
            if (v21[2] == *(void *)a2 && v21[3] == *((void *)a2 + 1)) {
              return;
            }
          }
          else
          {
            if (v23 >= v18) {
              v23 %= v18;
            }
            if (v23 != v4) {
              break;
            }
          }
          double v21 = (void *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_36:
  double v26 = operator new(0x28uLL);
  void *v26 = 0;
  v26[1] = v17;
  *((_OWORD *)v26 + 1) = *a3;
  v26[4] = a4;
  float v27 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v28 = a1[8];
  if (!v18 || (float)(v28 * (float)v18) < v27)
  {
    BOOL v29 = 1;
    if (v18 >= 3) {
      BOOL v29 = (v18 & (v18 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v18);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v18 = *((void *)a1 + 1);
    }
    if (prime <= v18)
    {
      if (prime >= v18) {
        goto LABEL_73;
      }
      unint64_t v44 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v18 < 3 || (uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        unint64_t v44 = std::__next_prime(v44);
      }
      else
      {
        uint64_t v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2) {
          unint64_t v44 = v46;
        }
      }
      if (prime <= v44) {
        size_t prime = v44;
      }
      if (prime >= v18)
      {
        unint64_t v18 = *((void *)a1 + 1);
LABEL_73:
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v17 >= v18) {
            unint64_t v4 = v17 % v18;
          }
          else {
            unint64_t v4 = v17;
          }
        }
        else
        {
          unint64_t v4 = (v18 - 1) & v17;
        }
        goto LABEL_86;
      }
      if (!prime)
      {
        double v53 = *(void **)a1;
        *(void *)a1 = 0;
        if (v53) {
          operator delete(v53);
        }
        unint64_t v18 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_73;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    double v33 = operator new(8 * prime);
    double v34 = *(void **)a1;
    *(void *)a1 = v33;
    if (v34) {
      operator delete(v34);
    }
    uint64_t v35 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v35++) = 0;
    while (prime != v35);
    double v37 = (uint64_t *)(a1 + 4);
    double v36 = (void *)*((void *)a1 + 2);
    if (!v36)
    {
LABEL_72:
      unint64_t v18 = prime;
      goto LABEL_73;
    }
    size_t v38 = v36[1];
    size_t v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v40 = v38 & v39;
      *(void *)(*(void *)a1 + 8 * v40) = v37;
      for (uint64_t i = (void *)*v36; *v36; uint64_t i = (void *)*v36)
      {
        size_t v42 = i[1] & v39;
        if (v42 == v40)
        {
          double v36 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v42))
        {
          *double v36 = *i;
          uint64_t v43 = 8 * v42;
          *uint64_t i = **(void **)(*(void *)a1 + v43);
          **(void **)(*(void *)a1 + v43) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v42) = v36;
          double v36 = i;
          size_t v40 = v42;
        }
      }
      goto LABEL_72;
    }
    if (v38 >= prime) {
      v38 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v38) = v37;
    double v47 = (void *)*v36;
    if (!*v36) {
      goto LABEL_72;
    }
    while (1)
    {
      size_t v49 = v47[1];
      if (v49 >= prime) {
        v49 %= prime;
      }
      if (v49 != v38)
      {
        if (!*(void *)(*(void *)a1 + 8 * v49))
        {
          *(void *)(*(void *)a1 + 8 * v49) = v36;
          goto LABEL_77;
        }
        *double v36 = *v47;
        uint64_t v48 = 8 * v49;
        *double v47 = **(void **)(*(void *)a1 + v48);
        **(void **)(*(void *)a1 + v48) = v47;
        double v47 = v36;
      }
      size_t v49 = v38;
LABEL_77:
      double v36 = v47;
      double v47 = (void *)*v47;
      size_t v38 = v49;
      if (!v47) {
        goto LABEL_72;
      }
    }
  }
LABEL_86:
  double v50 = *(void **)a1;
  double v51 = *(void **)(*(void *)a1 + 8 * v4);
  if (v51)
  {
    void *v26 = *v51;
LABEL_94:
    *double v51 = v26;
    goto LABEL_95;
  }
  void *v26 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v26;
  v50[v4] = a1 + 4;
  if (*v26)
  {
    unint64_t v52 = *(void *)(*v26 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v52 >= v18) {
        v52 %= v18;
      }
    }
    else
    {
      v52 &= v18 - 1;
    }
    double v51 = (void *)(*(void *)a1 + 8 * v52);
    goto LABEL_94;
  }
LABEL_95:
  ++*((void *)a1 + 3);
}

void sub_1A1A11378(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::Style>>::pop(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)a1)
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    unint64_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v14 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = ((uint64_t)v4 - v16) >> 3;
      unint64_t v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v18 = v14 - v16;
      if (v18 >> 2 > v8) {
        unint64_t v8 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        uint64_t v20 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        unint64_t v12 = (uint64_t *)(v20 + 8 * v17);
        unint64_t v8 = v20 + v19;
        if (v20) {
          *unint64_t v12 = v3;
        }
      }
      else
      {
        unint64_t v12 = (uint64_t *)(8 * v17);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v30) {
        goto LABEL_48;
      }
      unint64_t v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v32 = (v31 >> 3) + 1;
        uint64_t v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        double v34 = v12 - 2;
        uint64_t v35 = (long long *)(v21 - 16);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)double v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v39 = *(void *)(v33 - 8);
        v33 -= 8;
        *--unint64_t v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 8);
    *(void *)(a1 + 8) = v2 - 8;
    unint64_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v9 = v5 - v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        unint64_t v12 = (uint64_t *)(v11 + 8 * v7);
        unint64_t v8 = v11 + v10;
        if (v11) {
          *unint64_t v12 = v3;
        }
      }
      else
      {
        unint64_t v12 = (uint64_t *)(8 * v7);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v22) {
        goto LABEL_48;
      }
      unint64_t v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        double v26 = v12 - 2;
        float v27 = (long long *)(v21 - 16);
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)double v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v38 = *(void *)(v25 - 8);
        v25 -= 8;
        *--unint64_t v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      uint64_t v21 = *(void *)(a1 + 32);
LABEL_48:
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v15;
      uint64_t v40 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v8;
      if (v21) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v21, v40 - v21);
      }
      goto LABEL_50;
    }
  }
  if (v4) {
    uint64_t *v4 = v3;
  }
  uint64_t v15 = v4 + 1;
LABEL_50:
  *(void *)(a1 + 40) = v15;
  uint64_t v43 = v3;
  uint64_t v41 = *(void *)(a1 + 120);
  if (!v41) {
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v43);
  return v3;
}

void ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::ModelTransformData>(v3);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::GlobeMatrix>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(v3);
  uint64_t v10 = (void *)v6;
  uint64_t v11 = (void *)(v6 + 32);
  if (v4[8] - v4[7] < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v11 = v4 + 4;
  }
  if (v5[8] - v5[7] >= v11[4] - v11[3]) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v5 + 4;
  }
  v82[0] = v12;
  v82[1] = v6;
  void v82[2] = v4;
  v82[3] = v5;
  unint64_t v14 = (void *)v12[3];
  uint64_t v13 = (void *)v12[4];
  long long v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    uint64_t v15 = v14 + 1;
    do
    {
      unint64_t v14 = v15;
      long long v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      uint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  uint64_t v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v10[4];
    if (v23 >= (v10[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v10[7];
    uint64_t v27 = v10[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v31 = v10[11];
      uint64_t v32 = v10[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v10[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v4[4], v23 < (v4[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v4[7], v37 = v4[8], v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      uint64_t v41 = v4[11];
      uint64_t v42 = v4[10] + 48 * v36;
    }
    else
    {
      uint64_t v41 = v4[11];
      uint64_t v42 = v41;
    }
    uint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v5[4];
    if (v23 < (v5[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v5[7];
        uint64_t v47 = v5[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    uint64_t v51 = v5[11];
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    double v56 = (void *)v12[4];
    uint64_t v20 = v14 + 1;
    long long v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v10[4];
      uint64_t v59 = v10[7];
      uint64_t v58 = v10[8];
      uint64_t v60 = v4[4];
      uint64_t result = v4[7];
      uint64_t v61 = v4[8];
      uint64_t v62 = v5[4];
      uint64_t v64 = v5[7];
      uint64_t v63 = v5[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v10[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v4[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v5[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          uint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      double v56 = v20;
LABEL_14:
      long long v83 = v20;
    }
    unint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  uint64_t v51 = v5[11];
  uint64_t v52 = v5[10] + 8 * v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::GlobeMatrix>(int8x8_t *a1)
{
  uint64_t v10 = 0x67D8808361DF5DBFLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x67D8808361DF5DBFLL;
    if (*(void *)&v1 <= 0x67D8808361DF5DBFuLL) {
      uint64_t v3 = 0x67D8808361DF5DBFuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x67D8808361DF5DBFLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x67D8808361DF5DBFLL)
      {
        if (v5[2] == 0x67D8808361DF5DBFLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x67D8808361DF5DBFLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x67D8808361DF5DBFLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A11CE8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint8x8_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  unint64_t v7 = (void *)v6;
  uint64_t v8 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v8 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  uint64_t v120 = v8;
  int v121 = v3;
  int v122 = (void *)v4;
  uint64_t v123 = (void *)v5;
  uint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  uint64_t v124 = (void *)v6;
  uint64_t v125 = v9;
  if (v10 == v9)
  {
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v120))
    {
      unint64_t v12 = v9 + 1;
      do
      {
        uint64_t v9 = v12;
        uint64_t v125 = v12;
        if (v12 == v10) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v120);
        unint64_t v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  uint64_t v119 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *uint64_t v119 = *v9;
    unint64_t v15 = *v9;
    uint64_t v16 = HIDWORD(*v9);
    unint64_t v17 = *v9 >> 39;
    uint64_t v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
      && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
    {
      uint64_t v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      uint64_t v25 = (unint64_t *)v3[11];
    }
    uint64_t v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
      && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v7[10] + 8 * v28;
    }
    else
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v33;
    }
    if (v34 == v33) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = (unint64_t *)v34;
    }
    uint64_t v36 = **(void **)(v11 + 8);
    uint64_t v37 = *(void **)v36;
    uint64_t v38 = *(void **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38) {
          goto LABEL_46;
        }
      }
    }
    if (v37 == v38)
    {
LABEL_46:
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v39 = (void *)v37[3];
      BOOL v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    unint64_t v41 = *v25;
    unint64_t v126 = v41;
    uint64_t v42 = v39[581];
    if (v41 >= (unint64_t)((v39[582] - v42) >> 3)
      || ((uint64_t v43 = *(void *)(v42 + 8 * v41)) != 0 ? (v44 = HIDWORD(v41) == HIDWORD(v43)) : (v44 = 0),
          !v44
       || ((uint64_t v62 = v39[584], v63 = (uint64_t *)(v62 + 24 * v43), v63 != (uint64_t *)v39[585])
         ? (BOOL v64 = v62 == 0)
         : (BOOL v64 = 1),
           v64)))
    {
      uint64_t v45 = 0;
    }
    else
    {
      unint64_t v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>> const&>,std::tuple<>>((uint64_t)(v39 + 568), v41, &v126);
      ++v65[3];
      uint64_t v45 = *v63;
    }
    uint64_t v46 = (uint64_t)(v39 + 37);
    unint64_t v47 = *v35;
    unint64_t v48 = *v35;
    uint64_t v49 = v39[50];
    unint64_t v50 = (v39[51] - v49) >> 3;
    if (v48 < v50
      && (uint64_t v51 = *(void *)(v49 + 8 * v48)) != 0
      && HIDWORD(v47) == HIDWORD(v51)
      && ((uint64_t v52 = v39[53], v52 + 16 * v51 != v39[54]) ? (v53 = v52 == 0) : (v53 = 1), !v53))
    {
      uint64_t v66 = *(void *)(v49 + 8 * v48);
      uint64_t v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v47, v35);
      ++v67[3];
      uint64_t v68 = v52 + 16 * v66;
      uint64_t v11 = a1;
      uint64_t v54 = *(void **)(v68 + 8);
      unint64_t v47 = *v35;
      uint64_t v49 = v39[50];
      unint64_t v48 = *v35;
      if (v48 >= (v39[51] - v49) >> 3) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v54 = 0;
      if (v48 >= v50) {
        goto LABEL_78;
      }
    }
    uint64_t v55 = *(void *)(v49 + 8 * v48);
    if (v55 && HIDWORD(v47) == HIDWORD(v55))
    {
      uint64_t v56 = v39[53];
      uint64_t v57 = (void **)v39[54];
      uint64_t v58 = (void **)(v56 + 16 * v55);
      if (v58 != v57 && v56 != 0)
      {
        uint64_t v60 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v46, v47, v35);
        ++v60[3];
        uint64_t v61 = *v58;
        if (!v45) {
          goto LABEL_126;
        }
        goto LABEL_79;
      }
    }
LABEL_78:
    uint64_t v61 = 0;
    if (!v45) {
      goto LABEL_126;
    }
LABEL_79:
    {
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
    unint64_t v69 = v54[1];
    if (v69)
    {
      unint64_t v70 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index;
      uint8x8_t v71 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        uint64_t v72 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index;
        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index >= v69) {
          uint64_t v72 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index % v69;
        }
      }
      else
      {
        uint64_t v72 = (v69 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index;
      }
      uint64_t v73 = *(void **)(*v54 + 8 * v72);
      if (v73)
      {
        unint64_t v74 = (void *)*v73;
        if (v74)
        {
          if (v71.u32[0] < 2uLL)
          {
            unint64_t v75 = v69 - 1;
            while (1)
            {
              uint64_t v77 = v74[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index == v77)
              {
                if (v74[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index) {
                  goto LABEL_101;
                }
              }
              else if ((v77 & v75) != v72)
              {
                goto LABEL_126;
              }
              unint64_t v74 = (void *)*v74;
              if (!v74) {
                goto LABEL_126;
              }
            }
          }
          do
          {
            unint64_t v76 = v74[1];
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index == v76)
            {
              if (v74[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index)
              {
LABEL_101:
                {
                  if (v117)
                  {
                    md::typeToIntMap(v117);
                    uint64_t v11 = a1;
                  }
                }
                if (!qword_1E957F030) {
                  goto LABEL_166;
                }
                uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                v78.i16[0] = vaddlv_u8(v78);
                if (v78.u32[0] > 1uLL)
                {
                  unint64_t v79 = v70;
                  if (v70 >= qword_1E957F030) {
                    unint64_t v79 = v70 % qword_1E957F030;
                  }
                }
                else
                {
                  unint64_t v79 = (qword_1E957F030 - 1) & v70;
                }
                uint64_t v80 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v79);
                if (!v80 || (double v81 = *v80) == 0) {
LABEL_166:
                }
                  abort();
                if (v78.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    long long v83 = v81[1];
                    if ((uint64_t *)v70 == v83)
                    {
                      if (v81[2] == (uint64_t *)v70) {
                        goto LABEL_122;
                      }
                    }
                    else if (((unint64_t)v83 & (qword_1E957F030 - 1)) != v79)
                    {
                      goto LABEL_166;
                    }
                    double v81 = (uint64_t **)*v81;
                    if (!v81) {
                      goto LABEL_166;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v82 = (unint64_t)v81[1];
                  if (v70 == v82)
                  {
                    if (v81[2] == (uint64_t *)v70)
                    {
LABEL_122:
                      uint64_t v84 = *((int *)v81 + 6);
                      uint64_t v85 = *((int *)v81 + 7);
                      if (v84 != -1) {
                        ggl::PipelineSetup::setConstantData(v61, v84, v45, 1);
                      }
                      if (v85 != -1) {
                        ggl::PipelineSetup::setConstantData(v61, v85, v45, 2);
                      }
                      goto LABEL_126;
                    }
                  }
                  else
                  {
                    if (v82 >= qword_1E957F030) {
                      v82 %= (unint64_t)qword_1E957F030;
                    }
                    if (v82 != v79) {
                      goto LABEL_166;
                    }
                  }
                  double v81 = (uint64_t **)*v81;
                  if (!v81) {
                    goto LABEL_166;
                  }
                }
              }
            }
            else
            {
              if (v76 >= v69) {
                v76 %= v69;
              }
              if (v76 != v72) {
                break;
              }
            }
            unint64_t v74 = (void *)*v74;
          }
          while (v74);
        }
      }
    }
LABEL_126:
    uint64_t v9 = (void *)v120[4];
    unint64_t v14 = v125 + 1;
    uint64_t v125 = v14;
    if (v14 != v9)
    {
      uint64_t v86 = v121[4];
      while (1)
      {
        unint64_t v87 = *((unsigned int *)v14 + 1);
        unint64_t v88 = v87 >> 7;
        if (v87 >> 7 < (v121[5] - v86) >> 3)
        {
          uint64_t v89 = *(void *)(v86 + 8 * v88);
          if (v89)
          {
            uint64_t v90 = v87 & 0x7F;
            unint64_t v91 = *(unsigned __int16 *)(v89 + 2 * v90);
            uint64_t v93 = v121[7];
            uint64_t v92 = v121[8];
            if (v91 < (v92 - v93) >> 3)
            {
              uint64_t v94 = v93 + 8 * v91;
              if (v94 != v92 && *(_DWORD *)(v94 + 4) == v87)
              {
                uint64_t v96 = v122[4];
                if (v88 < (v122[5] - v96) >> 3)
                {
                  uint64_t v97 = *(void *)(v96 + 8 * v88);
                  if (v97)
                  {
                    unint64_t v98 = *(unsigned __int16 *)(v97 + 2 * v90);
                    uint64_t v100 = v122[7];
                    uint64_t v99 = v122[8];
                    if (v98 < (v99 - v100) >> 3)
                    {
                      uint64_t v101 = v100 + 8 * v98;
                      if (v101 != v99 && *(_DWORD *)(v101 + 4) == v87)
                      {
                        uint64_t v103 = v123[4];
                        if (v88 < (v123[5] - v103) >> 3)
                        {
                          uint64_t v104 = *(void *)(v103 + 8 * v88);
                          if (v104)
                          {
                            unint64_t v105 = *(unsigned __int16 *)(v104 + 2 * v90);
                            uint64_t v107 = v123[7];
                            uint64_t v106 = v123[8];
                            if (v105 < (v106 - v107) >> 3)
                            {
                              uint64_t v108 = v107 + 8 * v105;
                              if (v108 != v106 && *(_DWORD *)(v108 + 4) == v87)
                              {
                                uint64_t v110 = v124[4];
                                if (v88 < (v124[5] - v110) >> 3)
                                {
                                  uint64_t v111 = *(void *)(v110 + 8 * v88);
                                  if (v111)
                                  {
                                    unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v90);
                                    uint64_t v113 = v124[7];
                                    uint64_t v114 = v124[8];
                                    if (v112 < (v114 - v113) >> 3)
                                    {
                                      uint64_t v115 = v113 + 8 * v112;
                                      if (*(_DWORD *)(v115 + 4) == v87 && v115 != v114) {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          unint64_t v14 = v9;
          goto LABEL_17;
        }
      }
      uint64_t v9 = v14;
LABEL_17:
      uint64_t v125 = v14;
    }
  }
  *uint64_t v119 = 0xFFFFFFFF00000000;
  *(void *)(v11 + 8) = 0;
}

void sub_1A1A12524(_Unwind_Exception *a1)
{
}

uint64_t gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x7D9191A7B57B7B35;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7D9191A7B57B7B35;
    if (*(void *)&v1 <= 0x7D9191A7B57B7B35uLL) {
      uint64_t v3 = 0x7D9191A7B57B7B35uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7D9191A7B57B7B35;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7D9191A7B57B7B35)
      {
        if (v5[2] == 0x7D9191A7B57B7B35) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7D9191A7B57B7B35) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7D9191A7B57B7B35) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A12778(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x48075849379D7E1DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x48075849379D7E1DLL;
    if (*(void *)&v1 <= 0x48075849379D7E1DuLL) {
      uint64_t v3 = 0x48075849379D7E1DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x48075849379D7E1DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x48075849379D7E1DLL)
      {
        if (v5[2] == 0x48075849379D7E1DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x48075849379D7E1DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x48075849379D7E1DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A129E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getFlyoverSharedConstantDataHandle(md::VKMRenderResourcesStore *this)
{
  if (!*((void *)this + 1325)) {
    operator new();
  }
  return *((void *)this + 1325);
}

void sub_1A1A132C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operator delete(v9);
  md::components::Material::~Material((md::components::Material *)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getConstantData<ggl::FlyoverCommon::Shared>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 4216);
  if (a2 >= (unint64_t)((*(void *)(a1 + 4224) - v3) >> 3)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8 * a2);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = a2;
  if (HIDWORD(a2) != HIDWORD(v4)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 4240);
  uint64_t v8 = v7 + 24 * v4;
  if (v8 == *(void *)(a1 + 4248) || v7 == 0) {
    return 0;
  }
  uint64_t v11 = (uint64_t *)(a1 + 4152);
  unint64_t v12 = *(void *)(a1 + 4160);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v2 = a2;
      if (v12 <= a2) {
        unint64_t v2 = a2 % v12;
      }
    }
    else
    {
      unint64_t v2 = (v12 - 1) & a2;
    }
    unint64_t v14 = *(void ***)(*v11 + 8 * v2);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2) {
                goto LABEL_69;
              }
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_31;
            }
            unint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2) {
              goto LABEL_69;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v2) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  unint64_t v15 = operator new(0x30uLL);
  *unint64_t v15 = 0;
  v15[1] = v5;
  v15[2] = v5;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 4176) + 1);
  float v19 = *(float *)(a1 + 4184);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    unint64_t v5 = v2;
  }
  else
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 4160);
    }
    if (prime > v12) {
      goto LABEL_44;
    }
    if (prime < v12)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 4176) / *(float *)(a1 + 4184));
      if (v12 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v12) {
LABEL_44:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 4152, prime);
    }
    unint64_t v12 = *(void *)(a1 + 4160);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v5) {
        v5 %= v12;
      }
    }
    else
    {
      v5 &= v12 - 1;
    }
  }
  uint64_t v27 = *v11;
  unint64_t v28 = *(void **)(*v11 + 8 * v5);
  if (v28)
  {
    *unint64_t v15 = *v28;
  }
  else
  {
    *unint64_t v15 = *(void *)(a1 + 4168);
    *(void *)(a1 + 4168) = v15;
    *(void *)(v27 + 8 * v5) = a1 + 4168;
    if (!*v15) {
      goto LABEL_68;
    }
    unint64_t v29 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12) {
        v29 %= v12;
      }
    }
    else
    {
      v29 &= v12 - 1;
    }
    unint64_t v28 = (void *)(*v11 + 8 * v29);
  }
  *unint64_t v28 = v15;
LABEL_68:
  ++*(void *)(a1 + 4176);
LABEL_69:
  ++v15[3];
  return *(void *)v8;
}

void sub_1A1A1365C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double gdc::ViewDataAccess::rigidTransformForFrame(double *a1, unsigned __int8 a2, double *a3)
{
  if (a2 - 1 >= 2)
  {
    if (a2 == 3)
    {
      return gdc::CameraFrame<geo::Radians,double>::toRigidTransformEcefNoOffset((uint64_t)a1, a3);
    }
    else
    {
      double v6 = a3[4];
      double v7 = a3[5];
      double v8 = a3[6];
      double v17 = *a3;
      __double2 v9 = __sincos_stret((v7 - v8) * 0.5);
      __double2 v10 = __sincos_stret(v6 * 0.5);
      __double2 v11 = __sincos_stret((v8 + v7) * 0.5);
      double v13 = a3[1];
      double v12 = a3[2];
      long double v14 = tan(v17 * 0.5 + 0.785398163);
      long double v15 = log(v14);
      double v16 = a3[3] * 0.0000000249532021;
      *a1 = v13 * 0.159154943
          + 0.5
          + -(v9.__cosval * v10.__sinval * -2.0 * (v11.__sinval * v10.__cosval)
            - (v9.__sinval * v10.__sinval + v9.__sinval * v10.__sinval) * (v11.__cosval * v10.__cosval))
          * v16;
      a1[1] = v15 * 0.159154943
            + 0.5
            + (v9.__cosval * v10.__sinval * -2.0 * (v11.__cosval * v10.__cosval)
             + (v9.__sinval * v10.__sinval + v9.__sinval * v10.__sinval) * (v11.__sinval * v10.__cosval))
            * v16;
      double result = v12 * 0.0000000249532021
             - -(v9.__cosval * v10.__sinval * -2.0 * (v9.__cosval * v10.__sinval)
               + 1.0
               - (v9.__sinval * v10.__sinval + v9.__sinval * v10.__sinval) * (v9.__sinval * v10.__sinval))
             * v16;
      a1[2] = result;
      a1[3] = v9.__cosval * v10.__sinval;
      a1[4] = v9.__sinval * v10.__sinval;
      a1[5] = v11.__sinval * v10.__cosval;
      a1[6] = v11.__cosval * v10.__cosval;
    }
  }
  else
  {
    return gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(a1, a3);
  }
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25>,ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::operator()()
{
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  double result = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)4>>(a2);
  uint64_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v11[0] = v6;
      v11[1] = v7;
      uint64_t v10 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v10, v11);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)4>>(v9);
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)4>>(int8x8_t *a1)
{
  unint64_t v10 = 0xBDB1DC42A0C30FD6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBDB1DC42A0C30FD6;
    if (*(void *)&v1 <= 0xBDB1DC42A0C30FD6) {
      unint64_t v3 = 0xBDB1DC42A0C30FD6 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBDB1DC42A0C30FD6;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBDB1DC42A0C30FD6)
      {
        if (v5[2] == 0xBDB1DC42A0C30FD6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBDB1DC42A0C30FD6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBDB1DC42A0C30FD6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A13B8C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  double result = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(a2);
  unint64_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v11[0] = v6;
      v11[1] = v7;
      uint64_t v10 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v10, v11);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(v9);
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF5773E2F171FA967;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF5773E2F171FA967;
    if (*(void *)&v1 <= 0xF5773E2F171FA967) {
      unint64_t v3 = 0xF5773E2F171FA967 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF5773E2F171FA967;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF5773E2F171FA967)
      {
        if (v5[2] == 0xF5773E2F171FA967) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF5773E2F171FA967) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF5773E2F171FA967) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A13EB4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::FontGlyphCache::doPopulateQuads(uint64_t a1, uint64_t *a2, int a3, uint64_t **a4, uint64_t a5, int a6, float a7, float a8, float a9, double a10, float a11)
{
  __double2 v11 = (unint64_t *)a2;
  if (a7 <= 0.0 || a8 <= 0.0)
  {
    uint64_t v36 = *a2;
    uint64_t v37 = a2[1];
    if (v37 == *a2) {
      goto LABEL_37;
    }
    while (1)
    {
      uint64_t v38 = *(std::__shared_weak_count **)(v37 - 64);
      if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
        uint64_t v39 = *(std::__shared_weak_count **)(v37 - 80);
        if (v39)
        {
LABEL_23:
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      else
      {
        uint64_t v39 = *(std::__shared_weak_count **)(v37 - 80);
        if (v39) {
          goto LABEL_23;
        }
      }
      v37 -= 88;
      if (v37 == v36) {
        goto LABEL_37;
      }
    }
  }
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)*a4 + 125);
  if ((v13 & 1) == 0 || (*a4)[7] == (*a4)[8])
  {
    uint64_t v36 = *a2;
    uint64_t v40 = a2[1];
    if (v40 != *a2)
    {
      do
      {
        unint64_t v41 = *(std::__shared_weak_count **)(v40 - 64);
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          uint64_t v42 = *(std::__shared_weak_count **)(v40 - 80);
          if (v42)
          {
LABEL_33:
            if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
        }
        else
        {
          uint64_t v42 = *(std::__shared_weak_count **)(v40 - 80);
          if (v42) {
            goto LABEL_33;
          }
        }
        v40 -= 88;
      }
      while (v40 != v36);
    }
LABEL_37:
    v11[1] = v36;
    return;
  }
  int v19 = a3;
  uint64_t v21 = **a4;
  int v189 = *(unsigned __int8 *)(v21 + 132);
  int v190 = *(unsigned __int8 *)(v21 + 131);
  int v187 = *a4;
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v187[8] - v187[7]) >> 3);
  uint64_t v23 = *a2;
  uint64_t v24 = a2[1];
  unint64_t v25 = 0x2E8BA2E8BA2E8BA3 * ((v24 - *a2) >> 3);
  unint64_t v26 = v22 - v25;
  if (v22 <= v25)
  {
    if (v22 < v25)
    {
      for (unint64_t i = v23 - 0x5555555555555538 * ((v187[8] - v187[7]) >> 3); v24 != i; v24 -= 88)
      {
        BOOL v44 = *(std::__shared_weak_count **)(v24 - 64);
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        uint64_t v45 = *(std::__shared_weak_count **)(v24 - 80);
        if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v11[1] = i;
    }
  }
  else
  {
    uint64_t v27 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((v27 - v24) >> 3) >= v26)
    {
      uint64_t v46 = v24 + 88 * v26;
      uint64_t v47 = -8 * ((v24 - *a2) >> 3) - 0x5555555555555538 * ((v187[8] - v187[7]) >> 3);
      do
      {
        if (v24)
        {
          *(_OWORD *)(v24 + 48) = 0uLL;
          *(_OWORD *)(v24 + 64) = 0uLL;
          *(void *)(v24 + 80) = 0;
          *(_OWORD *)(v24 + 16) = 0uLL;
          *(_OWORD *)(v24 + 32) = 0uLL;
          *(_OWORD *)uint64_t v24 = 0uLL;
          *(_DWORD *)(v24 + 72) = 1065353216;
          *(void *)(v24 + 76) = 0;
          *(unsigned char *)(v24 + 84) = 0;
        }
        v24 += 88;
        v47 -= 88;
      }
      while (v47);
      a2[1] = v46;
    }
    else
    {
      if (v22 > 0x2E8BA2E8BA2E8BALL) {
        abort();
      }
      unint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((v27 - v23) >> 3);
      uint64_t v30 = 2 * v29;
      if (2 * v29 <= v22) {
        uint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v187[8] - v187[7]) >> 3);
      }
      if (v29 >= 0x1745D1745D1745DLL) {
        uint64_t v31 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        uint64_t v31 = v30;
      }
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 88 * v31, 8);
      unint64_t v33 = v32 + 88 * v25;
      uint64_t v34 = 88 * v22 - 88 * v25;
      unint64_t v35 = v33;
      do
      {
        if (v35)
        {
          *(_OWORD *)(v35 + 48) = 0uLL;
          *(_OWORD *)(v35 + 64) = 0uLL;
          *(void *)(v35 + 80) = 0;
          *(_OWORD *)(v35 + 16) = 0uLL;
          *(_OWORD *)(v35 + 32) = 0uLL;
          *(_OWORD *)unint64_t v35 = 0uLL;
          *(_DWORD *)(v35 + 72) = 1065353216;
          *(void *)(v35 + 76) = 0;
          *(unsigned char *)(v35 + 84) = 0;
        }
        v35 += 88;
        v34 -= 88;
      }
      while (v34);
      uint64_t v48 = v32 + 88 * v31;
      unint64_t v50 = *v11;
      unint64_t v49 = v11[1];
      int v19 = a3;
      if (v49 == *v11)
      {
        int64x2_t v55 = vdupq_n_s64(v49);
      }
      else
      {
        do
        {
          long long v51 = *(_OWORD *)(v49 - 88);
          v49 -= 88;
          *(_OWORD *)(v33 - 88) = v51;
          v33 -= 88;
          *(void *)unint64_t v49 = 0;
          *(void *)(v49 + 8) = 0;
          *(_OWORD *)(v33 + 16) = *(_OWORD *)(v49 + 16);
          *(void *)(v49 + 16) = 0;
          *(void *)(v49 + 24) = 0;
          long long v52 = *(_OWORD *)(v49 + 32);
          long long v53 = *(_OWORD *)(v49 + 48);
          long long v54 = *(_OWORD *)(v49 + 64);
          *(void *)(v33 + 77) = *(void *)(v49 + 77);
          *(_OWORD *)(v33 + 48) = v53;
          *(_OWORD *)(v33 + 64) = v54;
          *(_OWORD *)(v33 + 32) = v52;
        }
        while (v49 != v50);
        int64x2_t v55 = *(int64x2_t *)v11;
      }
      *__double2 v11 = v33;
      v11[1] = v32 + 88 * v22;
      unint64_t v56 = v11[2];
      void v11[2] = v48;
      uint64_t v57 = v55.i64[1];
      for (uint64_t j = v55.i64[0]; v57 != j; v57 -= 88)
      {
        uint64_t v59 = *(std::__shared_weak_count **)(v57 - 64);
        if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
        uint64_t v60 = *(std::__shared_weak_count **)(v57 - 80);
        if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if (j) {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v11[3] + 40))(v11[3], j, v56 - j);
      }
    }
  }
  unsigned __int16 v200 = 0;
  uint64_t v61 = v187;
  uint64_t v62 = v187[7];
  if (v187[8] != v62)
  {
    unsigned int v63 = 0;
    unint64_t v64 = 0;
    double v65 = a11;
    v191 = (void *)(a1 + 32);
    long long v182 = (void *)(a1 + 112);
    uint64_t v183 = (uint64_t *)(a1 + 56);
    uint64_t v186 = v11;
    int v184 = v19;
    unsigned int v185 = a5;
LABEL_74:
    uint64_t v67 = *(CGFont **)(v62 + 24 * v64 + 8);
    LOWORD(bboxes.origin.x) = 32;
    CGFontGetGlyphsForUnichars();
    cf = v67;
    int UnitsPerEm = CGFontGetUnitsPerEm(v67);
    uint64_t v69 = v61[8];
    uint64_t v62 = v61[7];
    unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v62) >> 3);
    if (v64 >= v66) {
      goto LABEL_73;
    }
    double v188 = 1.0 / (float)((float)UnitsPerEm * (float)(1.0 / a8));
    uint64_t v70 = v61[7];
    while (1)
    {
      uint64_t v62 = v70;
      uint64_t v71 = v70 + 24 * v64;
      if (*(CGFont **)(v71 + 8) != cf)
      {
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v70) >> 3);
LABEL_73:
        if (v64 >= v66) {
          return;
        }
        goto LABEL_74;
      }
      if (!v190) {
        break;
      }
      if (v64) {
        goto LABEL_85;
      }
LABEL_86:
      float v72 = (float)v63 * a9;
      unint64_t v193 = *v11;
      uint64_t v194 = (unint64_t *)(*v11 + 88 * v64);
      if (*(unsigned char *)(v70 + 24 * v64 + 16)) {
        float v73 = a7 * 0.83;
      }
      else {
        float v73 = a7;
      }
      if ((a5 & 1) != 0 || !*v194 || !*(unsigned char *)(*v194 + 61))
      {
        CGGlyph glyphs = 0;
        CGGlyph glyphs = *(_WORD *)v71;
        *(_DWORD *)&v197[20] = 0;
        int v198 = 0;
        *(void *)int v197 = cf;
        *(float *)&v197[8] = a8;
        *(void *)&v197[12] = glyphs;
        uint8x8_t v78 = std::__hash_table<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::__unordered_map_hasher<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::hash<GlyphCacheKey>,std::equal_to<GlyphCacheKey>,true>,std::__unordered_map_equal<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::equal_to<GlyphCacheKey>,std::hash<GlyphCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,mdm::Allocator>>::find<GlyphCacheKey>(v191, (float *)v197);
        unsigned int v192 = v63;
        if (v78)
        {
          ++*(_DWORD *)(a1 + 144);
          uint64_t v79 = *((void *)v78 + 4);
          unint64_t v80 = *(void *)(v79 + 32);
          uint64_t v81 = *(void *)(v79 + 40);
          if (v81) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&v197[16] = v80;
          int v198 = (std::__shared_weak_count *)v81;
          atomic_store(*(_DWORD *)(a1 + 160), (unsigned int *)(v80 + 52));
          unint64_t v82 = *(uint64_t **)(a1 + 8);
          long long v83 = (uint64_t *)*((void *)v78 + 4);
          if (v82 != v83)
          {
            uint64_t v84 = (uint64_t *)v83[1];
            if (v84 != v82)
            {
              uint64_t v85 = *v83;
              *(void *)(v85 + 8) = v84;
              *(void *)v83[1] = v85;
              uint64_t v86 = *v82;
              *(void *)(v86 + 8) = v83;
              *long long v83 = v86;
              *unint64_t v82 = (uint64_t)v83;
              v83[1] = (uint64_t)v82;
            }
          }
          if (v19) {
            goto LABEL_101;
          }
LABEL_284:
          if (v81) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v173 = (std::__shared_weak_count *)v194[1];
          *uint64_t v194 = v80;
          v194[1] = v81;
          if (v173 && !atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
          long long v174 = (float *)(v193 + 88 * v64);
          v174[20] = v73;
          long long v175 = (double *)(v61[11] + 16 * v64);
          float v176 = v72 + *v175 * a10;
          float v177 = v175[1] * v65;
          v174[8] = v176;
          v174[9] = v177;
          unsigned int v63 = v192;
          goto LABEL_290;
        }
        ++*(_DWORD *)(a1 + 148);
        int v89 = *(unsigned __int8 *)(a1 + 164);
        if (v89)
        {
            operator new();
          uint64_t v91 = mdm::Allocator::instance(void)::alloc;
          uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 144, 8);
          *(void *)uint64_t v81 = &unk_1EF57FBF8;
          *(void *)(v81 + 8) = 0;
          *(void *)(v81 + 16) = 0;
          *(void *)(v81 + 24) = v91;
          unint64_t v80 = v81 + 32;
          *(_OWORD *)(v81 + 72) = 0u;
          *(_OWORD *)(v81 + 88) = 0u;
          *(_OWORD *)(v81 + 104) = 0u;
          *(_OWORD *)(v81 + 120) = 0u;
          *(_OWORD *)(v81 + 56) = 0u;
          *(void *)(v81 + 128) = 0;
          *(void *)(v81 + 136) = 0;
          *(void *)(v81 + 40) = &unk_1EF5590B8;
          *(void *)(v81 + 48) = 0;
          *(void *)(v81 + 80) = 0;
          *(void *)(v81 + 86) = 0;
          *(void *)(v81 + 32) = &unk_1EF5338B8;
          *(_OWORD *)(v81 + 96) = 0u;
          *(_OWORD *)(v81 + 112) = 0u;
          *(_DWORD *)(v81 + 136) = 1065353216;
          *(unsigned char *)(v81 + 141) = 0;
        }
        else
        {
            operator new();
          uint64_t v92 = mdm::Allocator::instance(void)::alloc;
          uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 96, 8);
          *(void *)uint64_t v81 = &unk_1EF582A58;
          *(void *)(v81 + 8) = 0;
          *(void *)(v81 + 16) = 0;
          *(void *)(v81 + 24) = v92;
          unint64_t v80 = v81 + 32;
          *(_OWORD *)(v81 + 72) = 0u;
          *(void *)(v81 + 80) = 0;
          *(void *)(v81 + 88) = 0;
          *(_OWORD *)(v81 + 56) = 0u;
          *(void *)(v81 + 32) = &unk_1EF553F80;
          *(void *)(v81 + 40) = &unk_1EF5590B8;
          *(void *)(v81 + 48) = 0;
          *(void *)(v81 + 86) = 0;
        }
        *(void *)&v197[16] = v80;
        int v198 = (std::__shared_weak_count *)v81;
        uint64_t v93 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 48, 8);
        *(void *)uint64_t v93 = 0;
        *(void *)(v93 + 8) = 0;
        __n128 v99 = *(__n128 *)v197;
        *(_OWORD *)(v93 + 16) = *(_OWORD *)v197;
        *(void *)(v93 + 32) = v80;
        *(void *)(v93 + 40) = v81;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
        *(void *)uint64_t v93 = a1;
        uint64_t v94 = *(uint64_t **)(a1 + 8);
        *(void *)(v93 + 8) = v94;
        *uint64_t v94 = v93;
        uint64_t v95 = *(void *)(a1 + 16) + 1;
        *(void *)(a1 + 8) = v93;
        *(void *)(a1 + 16) = v95;
        unint64_t v96 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)v197) + 8) ^ HIDWORD(*(void *)v197));
        unint64_t v97 = 0x9DDFEA08EB382D69 * (HIDWORD(*(void *)v197) ^ (v96 >> 47) ^ v96);
        unint64_t v98 = v97 ^ (v97 >> 47);
        v99.n128_u32[0] = *(_DWORD *)&v197[8];
        uint64_t v100 = *(unsigned int *)&v197[8] - 0x61C8864680B583EBLL;
        if (*(float *)&v197[8] == 0.0) {
          uint64_t v100 = 0x9E3779B97F4A7C15;
        }
        unint64_t v101 = (v100 + 0x77FA823ACE0B5A40 * v98 + ((0x9DDFEA08EB382D69 * v98) >> 2)) ^ (0x9DDFEA08EB382D69 * v98);
        unint64_t v102 = (*(unsigned __int16 *)&v197[12] - 0x61C8864680B583EBLL + (v101 << 6) + (v101 >> 2)) ^ v101;
        unint64_t v103 = *(void *)(a1 + 40);
        if (v103)
        {
          uint8x8_t v104 = (uint8x8_t)vcnt_s8((int8x8_t)v103);
          v104.i16[0] = vaddlv_u8(v104);
          if (v104.u32[0] > 1uLL)
          {
            a5 = (*(unsigned __int16 *)&v197[12] - 0x61C8864680B583EBLL + (v101 << 6) + (v101 >> 2)) ^ v101;
            if (v102 >= v103) {
              a5 = v102 % v103;
            }
          }
          else
          {
            a5 = v102 & (v103 - 1);
          }
          unint64_t v105 = *(float ***)(*v191 + 8 * a5);
          if (v105)
          {
            uint64_t v106 = *v105;
            if (v106)
            {
              if (v104.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v108 = *((void *)v106 + 1);
                  if (v108 == v102)
                  {
                    if (*((void *)v106 + 2) == *(void *)v197
                      && v106[6] == *(float *)&v197[8]
                      && *((unsigned __int16 *)v106 + 14) == *(unsigned __int16 *)&v197[12])
                    {
                      goto LABEL_198;
                    }
                  }
                  else if ((v108 & (v103 - 1)) != a5)
                  {
                    goto LABEL_139;
                  }
                  uint64_t v106 = *(float **)v106;
                  if (!v106) {
                    goto LABEL_139;
                  }
                }
              }
              do
              {
                unint64_t v107 = *((void *)v106 + 1);
                if (v107 == v102)
                {
                  if (*((void *)v106 + 2) == *(void *)v197
                    && v106[6] == *(float *)&v197[8]
                    && *((unsigned __int16 *)v106 + 14) == *(unsigned __int16 *)&v197[12])
                  {
                    goto LABEL_198;
                  }
                }
                else
                {
                  if (v107 >= v103) {
                    v107 %= v103;
                  }
                  if (v107 != a5) {
                    break;
                  }
                }
                uint64_t v106 = *(float **)v106;
              }
              while (v106);
            }
          }
        }
LABEL_139:
        uint64_t v109 = (*(uint64_t (**)(void, uint64_t, uint64_t, __n128))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), 40, 8, v99);
        *(void *)uint64_t v109 = 0;
        *(void *)(v109 + 8) = v102;
        __n128 v99 = *(__n128 *)v197;
        *(_OWORD *)(v109 + 16) = *(_OWORD *)v197;
        *(void *)(v109 + 32) = v93;
        v99.n128_f32[0] = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
        float v110 = *(float *)(a1 + 80);
        if (!v103 || (float)(v110 * (float)v103) < v99.n128_f32[0])
        {
          BOOL v111 = (v103 & (v103 - 1)) != 0;
          if (v103 < 3) {
            BOOL v111 = 1;
          }
          unint64_t v112 = v111 | (2 * v103);
          v99.n128_f32[0] = v99.n128_f32[0] / v110;
          unint64_t v113 = vcvtps_u32_f32(v99.n128_f32[0]);
          if (v112 <= v113) {
            size_t prime = v113;
          }
          else {
            size_t prime = v112;
          }
          if (prime == 1)
          {
            size_t prime = 2;
            uint64_t v115 = (uint64_t *)(a1 + 32);
          }
          else
          {
            uint64_t v115 = (uint64_t *)(a1 + 32);
            if ((prime & (prime - 1)) != 0) {
              size_t prime = std::__next_prime(prime);
            }
          }
          unint64_t v103 = *(void *)(a1 + 40);
          if (prime > v103)
          {
LABEL_151:
            uint64_t v116 = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), 8 * prime, 8);
            uint64_t v117 = *v115;
            *uint64_t v115 = v116;
            if (v117) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v117, 8 * *(void *)(a1 + 40));
            }
            uint64_t v118 = 0;
            *(void *)(a1 + 40) = prime;
            do
              *(void *)(*v115 + 8 * v118++) = 0;
            while (prime != v118);
            uint64_t v119 = (void *)*v183;
            if (!*v183) {
              goto LABEL_174;
            }
            size_t v120 = v119[1];
            size_t v121 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              size_t v122 = v120 & v121;
              *(void *)(*v115 + 8 * v122) = v183;
              for (k = (void *)*v119; *v119; k = (void *)*v119)
              {
                size_t v124 = k[1] & v121;
                if (v124 == v122)
                {
                  uint64_t v119 = k;
                }
                else if (*(void *)(*v115 + 8 * v124))
                {
                  *uint64_t v119 = *k;
                  uint64_t v125 = 8 * v124;
                  void *k = **(void **)(*v115 + v125);
                  **(void **)(*v115 + v125) = k;
                }
                else
                {
                  *(void *)(*v115 + 8 * v124) = v119;
                  uint64_t v119 = k;
                  size_t v122 = v124;
                }
              }
              goto LABEL_174;
            }
            if (v120 >= prime) {
              v120 %= prime;
            }
            *(void *)(*v115 + 8 * v120) = v183;
            uint64_t v128 = (void *)*v119;
            if (!*v119)
            {
LABEL_174:
              unint64_t v103 = prime;
              goto LABEL_175;
            }
            while (2)
            {
              size_t v130 = v128[1];
              if (v130 >= prime) {
                v130 %= prime;
              }
              if (v130 != v120)
              {
                if (!*(void *)(*v115 + 8 * v130))
                {
                  *(void *)(*v115 + 8 * v130) = v119;
LABEL_179:
                  uint64_t v119 = v128;
                  uint64_t v128 = (void *)*v128;
                  size_t v120 = v130;
                  if (!v128) {
                    goto LABEL_174;
                  }
                  continue;
                }
                *uint64_t v119 = *v128;
                uint64_t v129 = 8 * v130;
                void *v128 = **(void **)(*v115 + v129);
                **(void **)(*v115 + v129) = v128;
                uint64_t v128 = v119;
              }
              break;
            }
            size_t v130 = v120;
            goto LABEL_179;
          }
          if (prime < v103)
          {
            unint64_t v126 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
            if (v103 < 3
              || (v99.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v103),
                  v99.n128_u16[0] = vaddlv_u8((uint8x8_t)v99.n128_u64[0]),
                  v99.n128_u32[0] > 1uLL))
            {
              unint64_t v126 = std::__next_prime(v126);
            }
            else
            {
              uint64_t v127 = 1 << -(char)__clz(v126 - 1);
              if (v126 >= 2) {
                unint64_t v126 = v127;
              }
            }
            if (prime <= v126) {
              size_t prime = v126;
            }
            if (prime >= v103)
            {
              unint64_t v103 = *(void *)(a1 + 40);
            }
            else
            {
              if (prime) {
                goto LABEL_151;
              }
              uint64_t v179 = *v115;
              *uint64_t v115 = 0;
              if (v179) {
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v179, 8 * *(void *)(a1 + 40));
              }
              unint64_t v103 = 0;
              *(void *)(a1 + 40) = 0;
            }
          }
LABEL_175:
          if ((v103 & (v103 - 1)) != 0)
          {
            if (v102 >= v103) {
              a5 = v102 % v103;
            }
            else {
              a5 = v102;
            }
          }
          else
          {
            a5 = (v103 - 1) & v102;
          }
        }
        uint64_t v131 = *(uint64_t **)(*v191 + 8 * a5);
        if (v131)
        {
          *(void *)uint64_t v109 = *v131;
          goto LABEL_196;
        }
        *(void *)uint64_t v109 = *v183;
        *uint64_t v183 = v109;
        *(void *)(*v191 + 8 * a5) = v183;
        if (*(void *)v109)
        {
          unint64_t v132 = *(void *)(*(void *)v109 + 8);
          if ((v103 & (v103 - 1)) != 0)
          {
            uint64_t v133 = (void *)(a1 + 32);
            if (v132 >= v103) {
              v132 %= v103;
            }
          }
          else
          {
            v132 &= v103 - 1;
            uint64_t v133 = (void *)(a1 + 32);
          }
          uint64_t v131 = (uint64_t *)(*v133 + 8 * v132);
LABEL_196:
          uint64_t *v131 = v109;
        }
        ++*(void *)(a1 + 72);
        uint64_t v93 = *(void *)(a1 + 8);
LABEL_198:
        unint64_t v134 = 0x9DDFEA08EB382D69 * (((8 * v80) + 8) ^ HIDWORD(v80));
        unint64_t v135 = 0x9DDFEA08EB382D69 * (HIDWORD(v80) ^ (v134 >> 47) ^ v134);
        unint64_t v136 = v135 ^ (v135 >> 47);
        unint64_t v137 = 0x9DDFEA08EB382D69 * v136;
        unint64_t v138 = *(void *)(a1 + 96);
        if (v138)
        {
          v99.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v138);
          v99.n128_u16[0] = vaddlv_u8((uint8x8_t)v99.n128_u64[0]);
          if (v99.n128_u32[0] > 1uLL)
          {
            unint64_t v102 = 0x9DDFEA08EB382D69 * v136;
            if (v137 >= v138) {
              unint64_t v102 = v137 % v138;
            }
          }
          else
          {
            unint64_t v102 = v137 & (v138 - 1);
          }
          uint64_t v139 = *(void **)(*(void *)(a1 + 88) + 8 * v102);
          if (v139)
          {
            long long v140 = (void *)*v139;
            if (v140)
            {
              if (v99.n128_u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v142 = v140[1];
                  if (v142 == v137)
                  {
                    if (v140[2] == v80) {
                      goto LABEL_277;
                    }
                  }
                  else if ((v142 & (v138 - 1)) != v102)
                  {
                    goto LABEL_218;
                  }
                  long long v140 = (void *)*v140;
                  if (!v140) {
                    goto LABEL_218;
                  }
                }
              }
              do
              {
                unint64_t v141 = v140[1];
                if (v141 == v137)
                {
                  if (v140[2] == v80) {
                    goto LABEL_277;
                  }
                }
                else
                {
                  if (v141 >= v138) {
                    v141 %= v138;
                  }
                  if (v141 != v102) {
                    break;
                  }
                }
                long long v140 = (void *)*v140;
              }
              while (v140);
            }
          }
        }
LABEL_218:
        long long v143 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t, __n128))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), 32, 8, v99);
        void *v143 = 0;
        v143[1] = v137;
        v143[2] = v80;
        v143[3] = v93;
        float v144 = (float)(unint64_t)(*(void *)(a1 + 128) + 1);
        float v145 = *(float *)(a1 + 136);
        if (!v138 || (float)(v145 * (float)v138) < v144)
        {
          BOOL v146 = (v138 & (v138 - 1)) != 0;
          if (v138 < 3) {
            BOOL v146 = 1;
          }
          unint64_t v147 = v146 | (2 * v138);
          unint64_t v148 = vcvtps_u32_f32(v144 / v145);
          if (v147 <= v148) {
            size_t v149 = v148;
          }
          else {
            size_t v149 = v147;
          }
          if (v149 == 1)
          {
            size_t v149 = 2;
          }
          else if ((v149 & (v149 - 1)) != 0)
          {
            size_t v149 = std::__next_prime(v149);
          }
          unint64_t v138 = *(void *)(a1 + 96);
          if (v149 > v138)
          {
LABEL_230:
            uint64_t v150 = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104), 8 * v149, 8);
            uint64_t v151 = *(void *)(a1 + 88);
            *(void *)(a1 + 88) = v150;
            if (v151) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), v151, 8 * *(void *)(a1 + 96));
            }
            uint64_t v152 = 0;
            *(void *)(a1 + 96) = v149;
            do
              *(void *)(*(void *)(a1 + 88) + 8 * v152++) = 0;
            while (v149 != v152);
            id v153 = (void *)*v182;
            if (!*v182) {
              goto LABEL_253;
            }
            size_t v154 = v153[1];
            size_t v155 = v149 - 1;
            if ((v149 & (v149 - 1)) == 0)
            {
              size_t v156 = v154 & v155;
              *(void *)(*(void *)(a1 + 88) + 8 * v156) = v182;
              for (m = (void *)*v153; *v153; m = (void *)*v153)
              {
                size_t v158 = m[1] & v155;
                if (v158 == v156)
                {
                  id v153 = m;
                }
                else
                {
                  uint64_t v159 = *(void *)(a1 + 88);
                  if (*(void *)(v159 + 8 * v158))
                  {
                    *id v153 = *m;
                    uint64_t v160 = 8 * v158;
                    void *m = **(void **)(*(void *)(a1 + 88) + v160);
                    **(void **)(*(void *)(a1 + 88) + v160) = m;
                  }
                  else
                  {
                    *(void *)(v159 + 8 * v158) = v153;
                    id v153 = m;
                    size_t v156 = v158;
                  }
                }
              }
              goto LABEL_253;
            }
            if (v154 >= v149) {
              v154 %= v149;
            }
            *(void *)(*(void *)(a1 + 88) + 8 * v154) = v182;
            int v164 = (void *)*v153;
            if (!*v153)
            {
LABEL_253:
              unint64_t v138 = v149;
              goto LABEL_254;
            }
            while (2)
            {
              size_t v166 = v164[1];
              if (v166 >= v149) {
                v166 %= v149;
              }
              if (v166 != v154)
              {
                uint64_t v167 = *(void *)(a1 + 88);
                if (!*(void *)(v167 + 8 * v166))
                {
                  *(void *)(v167 + 8 * v166) = v153;
LABEL_258:
                  id v153 = v164;
                  int v164 = (void *)*v164;
                  size_t v154 = v166;
                  if (!v164) {
                    goto LABEL_253;
                  }
                  continue;
                }
                *id v153 = *v164;
                uint64_t v165 = 8 * v166;
                *int v164 = **(void **)(*(void *)(a1 + 88) + v165);
                **(void **)(*(void *)(a1 + 88) + v165) = v164;
                int v164 = v153;
              }
              break;
            }
            size_t v166 = v154;
            goto LABEL_258;
          }
          if (v149 < v138)
          {
            unint64_t v161 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 128) / *(float *)(a1 + 136));
            if (v138 < 3
              || (uint8x8_t v162 = (uint8x8_t)vcnt_s8((int8x8_t)v138), v162.i16[0] = vaddlv_u8(v162), v162.u32[0] > 1uLL))
            {
              unint64_t v161 = std::__next_prime(v161);
            }
            else
            {
              uint64_t v163 = 1 << -(char)__clz(v161 - 1);
              if (v161 >= 2) {
                unint64_t v161 = v163;
              }
            }
            if (v149 <= v161) {
              size_t v149 = v161;
            }
            if (v149 >= v138)
            {
              unint64_t v138 = *(void *)(a1 + 96);
            }
            else
            {
              if (v149) {
                goto LABEL_230;
              }
              uint64_t v180 = *(void *)(a1 + 88);
              *(void *)(a1 + 88) = 0;
              if (v180) {
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), v180, 8 * *(void *)(a1 + 96));
              }
              unint64_t v138 = 0;
              *(void *)(a1 + 96) = 0;
            }
          }
LABEL_254:
          if ((v138 & (v138 - 1)) != 0)
          {
            if (v137 >= v138) {
              unint64_t v102 = v137 % v138;
            }
            else {
              unint64_t v102 = v137;
            }
          }
          else
          {
            unint64_t v102 = (v138 - 1) & v137;
          }
        }
        long long v168 = *(void **)(*(void *)(a1 + 88) + 8 * v102);
        if (v168)
        {
          void *v143 = *v168;
          goto LABEL_275;
        }
        void *v143 = *(void *)(a1 + 112);
        *(void *)(a1 + 112) = v143;
        *(void *)(*(void *)(a1 + 88) + 8 * v102) = v182;
        if (*v143)
        {
          unint64_t v169 = *(void *)(*v143 + 8);
          if ((v138 & (v138 - 1)) != 0)
          {
            if (v169 >= v138) {
              v169 %= v138;
            }
          }
          else
          {
            v169 &= v138 - 1;
          }
          long long v168 = (void *)(*(void *)(a1 + 88) + 8 * v169);
LABEL_275:
          *long long v168 = v143;
        }
        ++*(void *)(a1 + 128);
LABEL_277:
        ++*(_DWORD *)(a1 + 152);
        atomic_store(*(_DWORD *)(a1 + 160), (unsigned int *)(v80 + 52));
        *(_WORD *)(v80 + 56) = glyphs;
        long long v170 = *(const void **)(v80 + 16);
        if (cf) {
          CFRetain(cf);
        }
        *(void *)(v80 + 16) = cf;
        if (v170) {
          CFRelease(v170);
        }
        *(float *)(v80 + 48) = a8;
        uint64_t v171 = v62 + 24 * v64;
        *(unsigned char *)(v80 + 60) = *(unsigned char *)(v171 + 17);
        *(unsigned char *)(v80 + 59) = *(unsigned char *)(v171 + 18);
        __double2 v11 = v186;
        uint64_t v61 = v187;
        int v19 = v184;
        a5 = v185;
        if (glyphs == v200) {
          *(unsigned char *)(v80 + 58) = 1;
        }
        CGFontGetGlyphBBoxes(cf, &glyphs, 1uLL, &bboxes);
        float32x2_t v172 = vcvt_f32_f64(vmulq_n_f64(vaddq_f64((float64x2_t)bboxes.size, (float64x2_t)bboxes.origin), v188));
        *(float32x2_t *)(v80 + 32) = vcvt_f32_f64(vmulq_n_f64((float64x2_t)bboxes.origin, v188));
        *(float32x2_t *)(v80 + 40) = v172;
        *(unsigned char *)(v80 + 61) = 1;
        if (!v184) {
          goto LABEL_284;
        }
LABEL_101:
        if (v81) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v87 = v193 + 88 * v64;
        *(void *)(v87 + 16) = v80;
        unint64_t v88 = *(std::__shared_weak_count **)(v87 + 24);
        *(void *)(v87 + 24) = v81;
        unsigned int v63 = v192;
        if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
LABEL_290:
        char v178 = v198;
        if (v198 && !atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
        uint64_t v70 = v61[7];
        uint64_t v69 = v61[8];
        goto LABEL_77;
      }
      if (a6)
      {
        unint64_t v74 = (float *)(v193 + 88 * v64);
        v74[20] = v73;
        unint64_t v75 = (double *)(v61[11] + 16 * v64);
        float v76 = v72 + *v75 * a10;
        float v77 = v75[1] * v65;
        v74[8] = v76;
        v74[9] = v77;
      }
LABEL_77:
      ++v64;
      unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v70) >> 3);
      if (v64 >= v66)
      {
        uint64_t v62 = v70;
        goto LABEL_73;
      }
    }
    if (!v189 || !v64 || !*(unsigned char *)(v70 + 24 * v64 + 19)) {
      goto LABEL_86;
    }
LABEL_85:
    ++v63;
    goto LABEL_86;
  }
}

void sub_1A1A156E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

float *std::__hash_table<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::__unordered_map_hasher<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::hash<GlyphCacheKey>,std::equal_to<GlyphCacheKey>,true>,std::__unordered_map_equal<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::equal_to<GlyphCacheKey>,std::hash<GlyphCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,mdm::Allocator>>::find<GlyphCacheKey>(void *a1, float *a2)
{
  float v2 = a2[2];
  if (v2 == 0.0) {
    uint64_t v3 = 0x9E3779B97F4A7C15;
  }
  else {
    uint64_t v3 = LODWORD(v2) - 0x61C8864680B583EBLL;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = HIDWORD(*(void *)a2);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *(void *)a2 + 8) ^ v6);
  unint64_t v8 = (0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47);
  unint64_t v9 = (v3 + 0x77FA823ACE0B5A40 * v8 + ((0x9DDFEA08EB382D69 * v8) >> 2)) ^ (0x9DDFEA08EB382D69 * v8);
  uint64_t v10 = *((unsigned __int16 *)a2 + 6);
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v13 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    if (v11 >= *(void *)&v4) {
      uint64_t v13 = v11 % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v13 = v11 & (*(void *)&v4 - 1);
  }
  long double v14 = *(float ***)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  double result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      uint64_t v16 = *(void *)&v4 - 1;
      while (1)
      {
        uint64_t v18 = *((void *)result + 1);
        if (v18 == v11)
        {
          if (*((void *)result + 2) == v5 && result[6] == v2 && *((unsigned __int16 *)result + 14) == v10) {
            return result;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        double result = *(float **)result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v17 = *((void *)result + 1);
      if (v17 == v11)
      {
        if (*((void *)result + 2) == v5 && result[6] == v2 && *((unsigned __int16 *)result + 14) == v10) {
          return result;
        }
      }
      else
      {
        if (v17 >= *(void *)&v4) {
          v17 %= *(void *)&v4;
        }
        if (v17 != v13) {
          return 0;
        }
      }
      double result = *(float **)result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A15D64(_Unwind_Exception *a1)
{
  std::function<void ()(md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &)>::~function((void *)(v2 - 72));
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::NeedsTileRenderableDataHandleUpdate &,md::ls::TileRenderableDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::TileMatrix>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(v3);
  uint64_t v10 = (void *)v6;
  unint64_t v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7]) {
    unint64_t v11 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= v11[4] - v11[3]) {
    uint64_t v12 = (uint64_t)v11;
  }
  else {
    uint64_t v12 = v6 + 32;
  }
  v82[0] = v12;
  v82[1] = v4;
  void v82[2] = v5;
  v82[3] = v6;
  long double v14 = *(void **)(v12 + 24);
  uint64_t v13 = *(void **)(v12 + 32);
  long long v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    long double v15 = v14 + 1;
    do
    {
      long double v14 = v15;
      long long v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      long double v15 = v14 + 1;
    }
    while (!isValid);
  }
  unint64_t v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  int v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *int v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v4[7];
    uint64_t v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v31 = v4[11];
      uint64_t v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v4[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v5[10] + 32 * v36;
    }
    else
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v41;
    }
    uint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v10[7];
        uint64_t v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    uint64_t v51 = v10[11];
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    unint64_t v56 = *(void **)(v12 + 32);
    BOOL v20 = v14 + 1;
    long long v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v4[4];
      uint64_t v59 = v4[7];
      uint64_t v58 = v4[8];
      uint64_t v60 = v5[4];
      uint64_t result = v5[7];
      uint64_t v61 = v5[8];
      uint64_t v62 = v10[4];
      uint64_t v64 = v10[7];
      uint64_t v63 = v10[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          BOOL v20 = v56;
          goto LABEL_14;
        }
      }
      unint64_t v56 = v20;
LABEL_14:
      long long v83 = v20;
    }
    long double v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  uint64_t v51 = v10[11];
  uint64_t v52 = v10[10] + 8 * v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  int v19 = (void *)result;
LABEL_83:
  *int v19 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::TileMatrix>(int8x8_t *a1)
{
  unint64_t v10 = 0xBCC33905201D8160;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBCC33905201D8160;
    if (*(void *)&v1 <= 0xBCC33905201D8160) {
      unint64_t v3 = 0xBCC33905201D8160 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBCC33905201D8160;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBCC33905201D8160)
      {
        if (v5[2] == 0xBCC33905201D8160) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBCC33905201D8160) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBCC33905201D8160) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A163A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::NeedsTileRenderableDataHandleUpdate>(int8x8_t *a1)
{
  unint64_t v10 = 0xF37331D7CF44CB11;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF37331D7CF44CB11;
    if (*(void *)&v1 <= 0xF37331D7CF44CB11) {
      unint64_t v3 = 0xF37331D7CF44CB11 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF37331D7CF44CB11;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF37331D7CF44CB11)
      {
        if (v5[2] == 0xF37331D7CF44CB11) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF37331D7CF44CB11) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF37331D7CF44CB11) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A16618(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D918;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D8D0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D888;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D840;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D7F8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D7B0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D768;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D720;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D6D8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D690;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D648;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D600;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D5B8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D570;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D528;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D498;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D450;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D378;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D258;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D210;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D1C8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D180;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D060;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D018;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CFD0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CF88;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CF40;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CEF8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CEB0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CE20;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CD90;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CD48;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CD00;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CCB8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CC28;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CBE0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CB98;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CB50;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CB08;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CAC0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CA78;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CA30;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C9E8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>,std::allocator<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C9A0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C910;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C8C8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C880;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C838;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C7F0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C7A8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C760;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C5F8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C5B0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C568;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C520;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C4D8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C370;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C328;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C058;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C010;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BFC8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BF80;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>,std::allocator<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BEA8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BE18;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BD88;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BD40;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BCF8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BB00;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BAB8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BA70;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BA28;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B9E0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B998;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B950;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B908;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B7E8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B7A0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B758;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B6C8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B680;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B638;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B5F0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B5A8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B560;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B3B0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B368;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B320;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B2D8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B248;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B1B8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B170;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B128;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B0E0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B098;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B050;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AF78;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AF30;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>,std::allocator<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AEA0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AD38;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AAB0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A9D8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A948;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A798;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A750;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A708;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileViewData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileViewData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A630;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::TransferPipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::TransferPipelines>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A5E8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStates>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStates>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A5A0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A438;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PushRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::PushRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A318;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelines>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A240;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupMeshRendererLayout>,std::allocator<ecs2::ForwardToExecute<CleanupMeshRendererLayout>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A048;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t ggl::FragmentedPool<ggl::DaVinci::GroundPipelineSetup>::pop(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)a1)
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    int8x8_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v14 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = ((uint64_t)v4 - v16) >> 3;
      unint64_t v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v18 = v14 - v16;
      if (v18 >> 2 > v8) {
        unint64_t v8 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        uint64_t v20 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v20 + 8 * v17);
        unint64_t v8 = v20 + v19;
        if (v20) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v17);
      }
      long double v15 = v12 + 1;
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v30) {
        goto LABEL_48;
      }
      unint64_t v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v32 = (v31 >> 3) + 1;
        uint64_t v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v34 = v12 - 2;
        uint64_t v35 = (long long *)(v21 - 16);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)uint64_t v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v39 = *(void *)(v33 - 8);
        v33 -= 8;
        *--uint64_t v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 8);
    *(void *)(a1 + 8) = v2 - 8;
    int8x8_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v9 = v5 - v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v11 + 8 * v7);
        unint64_t v8 = v11 + v10;
        if (v11) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v7);
      }
      long double v15 = v12 + 1;
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v22) {
        goto LABEL_48;
      }
      unint64_t v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v26 = v12 - 2;
        uint64_t v27 = (long long *)(v21 - 16);
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)unint64_t v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v38 = *(void *)(v25 - 8);
        v25 -= 8;
        *--uint64_t v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      uint64_t v21 = *(void *)(a1 + 32);
LABEL_48:
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v15;
      uint64_t v40 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v8;
      if (v21) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v21, v40 - v21);
      }
      goto LABEL_50;
    }
  }
  if (v4) {
    uint64_t *v4 = v3;
  }
  long double v15 = v4 + 1;
LABEL_50:
  *(void *)(a1 + 40) = v15;
  uint64_t v43 = v3;
  uint64_t v41 = *(void *)(a1 + 120);
  if (!v41) {
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v43);
  return v3;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::GroundPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1A17CEC(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  char v163 = a5 | a6;
  v31.i64[1] = (a5 | a6);
  *(__int32 *)((char *)&v31.i32[2] + 1) = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  int8x16_t v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9E0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  int8x16_t v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC6E0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  int8x16_t v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9D0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  int8x16_t v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9C0);
  int8x16_t v37 = vceqzq_s8(v31);
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  int32x4_t v39 = vmovl_high_s16(v38);
  int16x8_t v40 = vmovl_high_s8(v37);
  int32x4_t v41 = vmovl_high_s16(v40);
  int32x4_t v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA60, (int8x16_t)v32);
  int8x16_t v45 = vceqzq_s8((int8x16_t)v30);
  int16x8_t v46 = vmovl_high_s8(v45);
  int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  int8x16_t v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA70, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA80, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  int32x4_t v52 = vmovl_high_s16(v46);
  int8x16_t v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_1A28FCA50, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA90, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  int32x4_t v55 = vmovl_high_s16(v48);
  int8x16_t v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_1A28FCA40, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAA0, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  int8x16_t v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_1A28FCA30, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  int8x16_t v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9B0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAB0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  int8x16_t v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_1A28FCA20, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  int8x16_t v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9A0);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAC0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  int8x16_t v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_1A28FCA10, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  int8x16_t v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC990);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAD0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  int8x16_t v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_1A28FCA00, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  int8x16_t v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC980);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAE0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  int64x2_t v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_1A28FC9F0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  unint64_t v71 = v70.i64[0];
  uint64_t v73 = (uint64_t **)(a2 + 104);
  float v72 = *(void **)(a2 + 104);
  if (!v72) {
    goto LABEL_12;
  }
  unint64_t v74 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v75 = v72[4];
    BOOL v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0]) {
      float v77 = v72;
    }
    else {
      float v77 = v72 + 1;
    }
    if (v76) {
      unint64_t v74 = (uint64_t **)v72;
    }
    float v72 = (void *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    unint64_t v161 = v74[6];
    a1[1] = (std::__shared_weak_count *)v161;
    if (v161) {
      atomic_fetch_add_explicit(v161 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    int64x2_t v164 = v70;
    uint64_t v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589518;
    unint64_t v79 = v78 + 1;
    long long v167 = *(_OWORD *)(a2 + 16);
    long long v168 = *(_OWORD *)(a2 + 32);
    {
      if (v162)
      {
        {
          if (v162)
          {
            {
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1EB318618 = 1;
            }
            ggl::DaVinci::GroundPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            {
              ggl::DaVinci::pipelineDataGroundPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              unk_1E9588BD0 = ggl::DaVinci::Normals::reflection(void)::reflection;
              qword_1E9588BD8 = (uint64_t)ggl::DaVinci::UVs::reflection(void)::reflection;
              unk_1E9588BE0 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1E957F4D0 = (uint64_t)&ggl::DaVinci::pipelineDataGroundPipelineDeviceStructs(void)::ref;
            *(void *)algn_1E957F4D8 = 4;
            {
              ggl::DaVinci::pipelineDataGroundPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(void *)algn_1E9588BF8 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1E9588C00 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1E9588C08 = ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
              qword_1E9588C10 = (uint64_t)ggl::DaVinci::PlanarParameters::reflection(void)::reflection;
              unk_1E9588C18 = ggl::DaVinci::Style::reflection(void)::reflection;
              qword_1E9588C20 = (uint64_t)ggl::DaVinci::StyleSunMatrix::reflection(void)::reflection;
              unk_1E9588C28 = ggl::DaVinci::StyleTransitionToFlat::reflection(void)::reflection;
              qword_1E9588C30 = (uint64_t)ggl::DaVinci::GroundAtmosphere::reflection(void)::reflection;
              unk_1E9588C38 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              qword_1E9588C40 = (uint64_t)ggl::DaVinci::StyleCameraLighting::reflection(void)::reflection;
              unk_1E9588C48 = ggl::Tile::Clipping::reflection(void)::reflection;
              qword_1E9588C50 = (uint64_t)ggl::Lighting::LightSpecularConfiguration::reflection(void)::reflection;
              unk_1E9588C58 = ggl::DaVinci::RenderTargetSize::reflection(void)::reflection;
              qword_1E9588C60 = (uint64_t)ggl::DaVinci::LightingDebugOptions::reflection(void)::reflection;
              unk_1E9588C68 = ggl::DaVinci::ColorCorrectionFactor::reflection(void)::reflection;
              qword_1E9588C70 = (uint64_t)ggl::DaVinci::ElevatedStroke::reflection(void)::reflection;
              unk_1E9588C78 = ggl::DaVinci::LandCoverSettings::reflection(void)::reflection;
              qword_1E9588C80 = (uint64_t)ggl::DaVinci::StyleShadow::reflection(void)::reflection;
              unk_1E9588C88 = ggl::DaVinci::StyleEmissiveColor::reflection(void)::reflection;
              qword_1E9588C90 = (uint64_t)ggl::DaVinci::StyleGroundOcclusion::reflection(void)::reflection;
              unk_1E9588C98 = ggl::DaVinci::MaterialStyle::reflection(void)::reflection;
              qword_1E9588CA0 = (uint64_t)ggl::DaVinci::GradientParameters::reflection(void)::reflection;
              unk_1E9588CA8 = ggl::DaVinci::GradientParameters::reflection(void)::reflection;
              qword_1E9588CB0 = (uint64_t)ggl::DaVinci::StyleBlend::reflection(void)::reflection;
              unk_1E9588CB8 = ggl::DaVinci::RasterOverlay::reflection(void)::reflection;
              qword_1E9588CC0 = (uint64_t)ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
              unk_1E9588CC8 = ggl::DaVinci::StyleSSAO::reflection(void)::reflection;
              qword_1E9588CD0 = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
              unk_1E9588CD8 = ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
            }
            qword_1E957F4E0 = (uint64_t)&ggl::DaVinci::pipelineDataGroundPipelineConstantStructs(void)::ref;
            unk_1E957F4E8 = xmmword_1A28FF470;
          }
        }
        ggl::DaVinci::GroundPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GroundPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciGroundShader::typedReflection(v162);
        qword_1E9588938 = (uint64_t)&ggl::DaVinciGroundShader::typedReflection(void)::ref;
        {
          ggl::DaVinci::pipelineStateGroundPipelineAttributeStructBinding(void)::attr = 0;
          *(void *)algn_1E95893E8 = 0;
          qword_1E95893F0 = (uint64_t)"";
          dword_1E95893F8 = 0;
          qword_1E9589400 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineAttributeBinding_0(void)::attr;
          unk_1E9589408 = 2;
        }
        qword_1E9588940 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineAttributeStructBinding(void)::attr;
        *(void *)algn_1E9588948 = 1;
        qword_1E9588950 = 0;
        unk_1E9588958 = 13;
        {
          ggl::DaVinci::pipelineStateGroundPipelineDeviceStructBinding(void)::ref = 0;
          unk_1E9588D70 = 0;
          qword_1E9588D78 = (uint64_t)"instanceTransform";
          dword_1E9588D80 = 2;
          qword_1E9588D88 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceInstanceTransformBinding(void)::reflection;
          *(_OWORD *)algn_1E9588D90 = xmmword_1A28FC760;
          qword_1E9588DA0 = 1;
          unk_1E9588DA8 = "normals";
          dword_1E9588DB0 = 2;
          qword_1E9588DB8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceNormalsBinding(void)::reflection;
          unk_1E9588DC0 = xmmword_1A28FE150;
          qword_1E9588DD0 = 2;
          unk_1E9588DD8 = "uvs";
          dword_1E9588DE0 = 2;
          qword_1E9588DE8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceUvsBinding(void)::reflection;
          *(_OWORD *)algn_1E9588DF0 = xmmword_1A28FF480;
          qword_1E9588E00 = 3;
          unk_1E9588E08 = "elevations";
          dword_1E9588E10 = 2;
          qword_1E9588E18 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceElevationsBinding(void)::reflection;
          unk_1E9588E20 = 0;
        }
        qword_1E9588960 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceStructBinding(void)::ref;
        *(void *)algn_1E9588968 = 4;
        {
          ggl::DaVinci::pipelineStateGroundPipelineConstantStructBinding(void)::ref = 0;
          *(void *)algn_1E9588E48 = 0;
          qword_1E9588E50 = (uint64_t)"view";
          dword_1E9588E58 = 3;
          qword_1E9588E60 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantViewBinding(void)::reflection;
          unk_1E9588E68 = xmmword_1A28FCEB0;
          qword_1E9588E78 = 1;
          unk_1E9588E80 = "transform";
          dword_1E9588E88 = 3;
          qword_1E9588E90 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantTransformBinding(void)::reflection;
          unk_1E9588E98 = xmmword_1A28FCF70;
          qword_1E9588EA8 = 2;
          unk_1E9588EB0 = "shadow";
          dword_1E9588EB8 = 3;
          qword_1E9588EC0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantShadowBinding(void)::reflection;
          unk_1E9588EC8 = xmmword_1A28FC950;
          qword_1E9588ED8 = 3;
          unk_1E9588EE0 = "lightConfigAmbient";
          dword_1E9588EE8 = 3;
          qword_1E9588EF0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantLightConfigAmbientBinding(void)::reflection;
          unk_1E9588EF8 = xmmword_1A28FD5F0;
          qword_1E9588F08 = 4;
          unk_1E9588F10 = "planarParameters";
          dword_1E9588F18 = 3;
          qword_1E9588F20 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantPlanarParametersBinding(void)::reflection;
          unk_1E9588F28 = xmmword_1A28FCF80;
          qword_1E9588F38 = 5;
          unk_1E9588F40 = "style";
          dword_1E9588F48 = 3;
          qword_1E9588F50 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStyleBinding(void)::reflection;
          xmmword_1E9588F58 = xmmword_1A28FF490;
          qword_1E9588F68 = 6;
          unk_1E9588F70 = "sunMatrix";
          dword_1E9588F78 = 3;
          qword_1E9588F80 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantSunMatrixBinding(void)::reflection;
          xmmword_1E9588F88 = xmmword_1A28FE160;
          qword_1E9588F98 = 7;
          unk_1E9588FA0 = "transition";
          dword_1E9588FA8 = 3;
          qword_1E9588FB0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantTransitionBinding(void)::reflection;
          xmmword_1E9588FB8 = xmmword_1A28FF4A0;
          qword_1E9588FC8 = 8;
          unk_1E9588FD0 = "atmosphereParameters";
          dword_1E9588FD8 = 3;
          qword_1E9588FE0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantAtmosphereParametersBinding(void)::reflection;
          xmmword_1E9588FE8 = xmmword_1A28FF4B0;
          qword_1E9588FF8 = 9;
          unk_1E9589000 = "positionScaleInfo";
          dword_1E9589008 = 3;
          qword_1E9589010 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantPositionScaleInfoBinding(void)::reflection;
          xmmword_1E9589018 = xmmword_1A28FF4C0;
          qword_1E9589028 = 10;
          unk_1E9589030 = "cameraLightingStyle";
          dword_1E9589038 = 3;
          qword_1E9589040 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantCameraLightingStyleBinding(void)::reflection;
          xmmword_1E9589048 = xmmword_1A28FF4D0;
          qword_1E9589058 = 11;
          qword_1E9589060 = (uint64_t)"tileClipping";
          dword_1E9589068 = 3;
          qword_1E9589070 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantTileClippingBinding(void)::reflection;
          xmmword_1E9589078 = xmmword_1A28FF4E0;
          qword_1E9589088 = 12;
          qword_1E9589090 = (uint64_t)"lightConfig";
          dword_1E9589098 = 3;
          qword_1E95890A0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantLightConfigBinding(void)::reflection;
          xmmword_1E95890A8 = xmmword_1A28FF4F0;
          qword_1E95890B8 = 13;
          qword_1E95890C0 = (uint64_t)"rtSize";
          dword_1E95890C8 = 3;
          qword_1E95890D0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantRtSizeBinding(void)::reflection;
          xmmword_1E95890D8 = xmmword_1A28FF500;
          qword_1E95890E8 = 14;
          qword_1E95890F0 = (uint64_t)"lightingDebugOptions";
          dword_1E95890F8 = 3;
          qword_1E9589100 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantLightingDebugOptionsBinding(void)::reflection;
          xmmword_1E9589108 = xmmword_1A28FF510;
          qword_1E9589118 = 15;
          qword_1E9589120 = (uint64_t)"colorFactors";
          dword_1E9589128 = 3;
          qword_1E9589130 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantColorFactorsBinding(void)::reflection;
          xmmword_1E9589138 = xmmword_1A28FF520;
          qword_1E9589148 = 16;
          qword_1E9589150 = (uint64_t)"elevatedStroke";
          dword_1E9589158 = 3;
          qword_1E9589160 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantElevatedStrokeBinding(void)::reflection;
          xmmword_1E9589168 = xmmword_1A28FF530;
          qword_1E9589178 = 17;
          qword_1E9589180 = (uint64_t)"landCoverSettings";
          dword_1E9589188 = 3;
          qword_1E9589190 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantLandCoverSettingsBinding(void)::reflection;
          xmmword_1E9589198 = xmmword_1A28FF540;
          qword_1E95891A8 = 18;
          qword_1E95891B0 = (uint64_t)"shadowStyle";
          dword_1E95891B8 = 3;
          qword_1E95891C0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantShadowStyleBinding(void)::reflection;
          xmmword_1E95891C8 = xmmword_1A28FF550;
          qword_1E95891D8 = 19;
          qword_1E95891E0 = (uint64_t)"emissiveStyle";
          dword_1E95891E8 = 3;
          qword_1E95891F0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantEmissiveStyleBinding(void)::reflection;
          xmmword_1E95891F8 = xmmword_1A28FF560;
          qword_1E9589208 = 20;
          qword_1E9589210 = (uint64_t)"groundOcclusionStyle";
          dword_1E9589218 = 3;
          qword_1E9589220 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantGroundOcclusionStyleBinding(void)::reflection;
          xmmword_1E9589228 = xmmword_1A28FF570;
          qword_1E9589238 = 21;
          qword_1E9589240 = (uint64_t)"materialStyle";
          dword_1E9589248 = 3;
          qword_1E9589250 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantMaterialStyleBinding(void)::reflection;
          xmmword_1E9589258 = xmmword_1A28FF580;
          qword_1E9589268 = 22;
          qword_1E9589270 = (uint64_t)"gradient1Parameters";
          dword_1E9589278 = 3;
          qword_1E9589280 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantGradient1ParametersBinding(void)::reflection;
          xmmword_1E9589288 = xmmword_1A28FF590;
          qword_1E9589298 = 23;
          qword_1E95892A0 = (uint64_t)"gradient2Parameters";
          dword_1E95892A8 = 3;
          qword_1E95892B0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantGradient2ParametersBinding(void)::reflection;
          xmmword_1E95892B8 = xmmword_1A28FF5A0;
          qword_1E95892C8 = 24;
          qword_1E95892D0 = (uint64_t)"styleBlend";
          dword_1E95892D8 = 3;
          qword_1E95892E0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStyleBlendBinding(void)::reflection;
          xmmword_1E95892E8 = xmmword_1A28FF5B0;
          qword_1E95892F8 = 25;
          qword_1E9589300 = (uint64_t)"rasterOverlay";
          dword_1E9589308 = 3;
          qword_1E9589310 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantRasterOverlayBinding(void)::reflection;
          xmmword_1E9589318 = xmmword_1A28FF5C0;
          qword_1E9589328 = 26;
          qword_1E9589330 = (uint64_t)"srgbBlendStyle";
          dword_1E9589338 = 3;
          qword_1E9589340 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantSrgbBlendStyleBinding(void)::reflection;
          xmmword_1E9589348 = xmmword_1A28FF5D0;
          qword_1E9589358 = 27;
          qword_1E9589360 = (uint64_t)"styleSSAO";
          dword_1E9589368 = 3;
          qword_1E9589370 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStyleSSAOBinding(void)::reflection;
          xmmword_1E9589378 = xmmword_1A28FF5E0;
          qword_1E9589388 = 28;
          qword_1E9589390 = (uint64_t)"styleColor";
          dword_1E9589398 = 3;
          qword_1E95893A0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStyleColorBinding(void)::reflection;
          xmmword_1E95893A8 = xmmword_1A28FF5F0;
          qword_1E95893B8 = 29;
          qword_1E95893C0 = (uint64_t)"routeLineMaskStyle";
          dword_1E95893C8 = 3;
          qword_1E95893D0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantRouteLineMaskStyleBinding(void)::reflection;
          qword_1E95893D8 = 1;
        }
        qword_1E9588970 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStructBinding(void)::ref;
        *(void *)algn_1E9588978 = 30;
      }
    }
    int64x2_t v80 = v164;
    v80.i8[13] = a13;
    uint64_t v81 = *(std::__shared_weak_count_vtbl **)a2;
    unint64_t v82 = *(std::__shared_weak_count **)(a2 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[14] = a14;
    *(_OWORD *)unint64_t v169 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v169[12] = *(_OWORD *)(a2 + 60);
    long long v83 = *(_OWORD *)(a2 + 76);
    char v84 = *(unsigned char *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::GroundPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v81;
    v78[3].__shared_owners_ = (uint64_t)v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v167;
    *(_OWORD *)&v78[12].__shared_owners_ = v168;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v169[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v169;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v83;
    BYTE4(v78[5].__shared_owners_) = v84;
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int64x2_t v165 = v80;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      int64x2_t v80 = v165;
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v80;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v163;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    int8x16_t v85 = *(int8x16_t *)&v78[14].__shared_owners_;
    int8x16_t v86 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    int16x8_t v87 = vmovl_high_s8(v86);
    int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
    v89.i64[0] = v88.u32[0];
    v89.i64[1] = v88.u32[1];
    int8x16_t v90 = v89;
    int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v89.i64[0] = v92.u32[0];
    v89.i64[1] = v92.u32[1];
    int8x16_t v93 = v89;
    int32x4_t v94 = vmovl_high_s16(v87);
    int32x4_t v95 = vmovl_high_s16(v91);
    v89.i64[0] = v95.u32[2];
    v89.i64[1] = v95.u32[3];
    int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
    v89.i64[0] = v94.u32[0];
    v89.i64[1] = v94.u32[1];
    int8x16_t v97 = v89;
    v89.i64[0] = v95.u32[0];
    v89.i64[1] = v95.u32[1];
    int8x16_t v98 = v89;
    v89.i64[0] = v88.u32[2];
    v89.i64[1] = v88.u32[3];
    int8x16_t v99 = v89;
    v89.i64[0] = v92.u32[2];
    v89.i64[1] = v92.u32[3];
    int8x16_t v100 = v89;
    v89.i64[0] = v94.u32[2];
    v89.i64[1] = v94.u32[3];
    int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v89);
    int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v100);
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF560FB8;
    LOBYTE(v78[15].__vftable) = a24;
    BYTE1(v78[15].__vftable) = a25;
    BYTE2(v78[15].__vftable) = a26;
    BYTE3(v78[15].__vftable) = a27;
    WORD2(v78[15].__vftable) = a28;
    HIWORD(v78[15].__vftable) = a29;
    int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v97);
    int8x16_t v104 = vceqzq_s8(v85);
    int16x8_t v105 = vmovl_high_s8(v104);
    int32x4_t v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v89.i64[0] = v106.u32[0];
    v89.i64[1] = v106.u32[1];
    int8x16_t v107 = v89;
    int16x8_t v108 = vmovl_s8(*(int8x8_t *)v104.i8);
    int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v89.i64[0] = v109.u32[0];
    v89.i64[1] = v109.u32[1];
    int8x16_t v110 = v89;
    int32x4_t v111 = vmovl_high_s16(v105);
    v89.i64[0] = v111.u32[0];
    v89.i64[1] = v111.u32[1];
    int8x16_t v112 = v89;
    int32x4_t v113 = vmovl_high_s16(v108);
    v89.i64[0] = v113.u32[0];
    v89.i64[1] = v113.u32[1];
    int8x16_t v114 = v89;
    v89.i64[0] = v106.u32[2];
    v89.i64[1] = v106.u32[3];
    int8x16_t v115 = v89;
    v89.i64[0] = v109.u32[2];
    v89.i64[1] = v109.u32[3];
    int8x16_t v116 = v89;
    v89.i64[0] = v111.u32[2];
    v89.i64[1] = v111.u32[3];
    int8x16_t v117 = v89;
    v89.i64[0] = v113.u32[2];
    v89.i64[1] = v113.u32[3];
    int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v117);
    int8x16_t v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v107), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
    int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v110), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
    int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v112), v103);
    int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v114), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v98));
    int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v99));
    int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v116), v102);
    int8x16_t v125 = vorrq_s8(v118, v101);
    int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v96);
    int8x16_t v127 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    int16x8_t v128 = vmovl_s8(*(int8x8_t *)v127.i8);
    int32x4_t v129 = vmovl_high_s16(v128);
    v89.i64[0] = v129.i32[2];
    v89.i64[1] = v129.i32[3];
    int8x16_t v130 = v89;
    int16x8_t v131 = vmovl_high_s8(v127);
    int32x4_t v132 = vmovl_high_s16(v131);
    v89.i64[0] = v132.i32[2];
    v89.i64[1] = v132.i32[3];
    int8x16_t v133 = v89;
    int32x4_t v134 = vmovl_s16(*(int16x4_t *)v128.i8);
    v89.i64[0] = v134.i32[2];
    v89.i64[1] = v134.i32[3];
    int8x16_t v135 = v89;
    int32x4_t v136 = vmovl_s16(*(int16x4_t *)v131.i8);
    v89.i64[0] = v136.i32[2];
    v89.i64[1] = v136.i32[3];
    int8x16_t v137 = v89;
    v89.i64[0] = v129.i32[0];
    v89.i64[1] = v129.i32[1];
    int8x16_t v138 = v89;
    v89.i64[0] = v132.i32[0];
    v89.i64[1] = v132.i32[1];
    int8x16_t v139 = v89;
    v89.i64[0] = v134.i32[0];
    v89.i64[1] = v134.i32[1];
    int8x16_t v140 = v89;
    v89.i64[0] = v136.i32[0];
    v89.i64[1] = v136.i32[1];
    int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
    int8x16_t v142 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    int16x8_t v143 = vmovl_high_s8(v142);
    int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
    v89.i64[0] = v144.i32[0];
    v89.i64[1] = v144.i32[1];
    int8x16_t v145 = v89;
    int16x8_t v146 = vmovl_s8(*(int8x8_t *)v142.i8);
    int32x4_t v147 = vmovl_s16(*(int16x4_t *)v146.i8);
    v89.i64[0] = v147.i32[0];
    v89.i64[1] = v147.i32[1];
    int8x16_t v148 = v89;
    int32x4_t v149 = vmovl_high_s16(v143);
    v89.i64[0] = v149.i32[0];
    v89.i64[1] = v149.i32[1];
    int8x16_t v150 = v89;
    int32x4_t v151 = vmovl_high_s16(v146);
    v89.i64[0] = v151.i32[0];
    v89.i64[1] = v151.i32[1];
    int8x16_t v152 = v89;
    v89.i64[0] = v144.i32[2];
    v89.i64[1] = v144.i32[3];
    int8x16_t v153 = v89;
    v89.i64[0] = v147.i32[2];
    v89.i64[1] = v147.i32[3];
    int8x16_t v154 = v89;
    v89.i64[0] = v149.i32[2];
    v89.i64[1] = v149.i32[3];
    int8x16_t v155 = v89;
    v89.i64[0] = v151.i32[2];
    v89.i64[1] = v151.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v148), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140)), v120), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v145), v141), v119)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v152), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v138)), v122), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v150),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v139)),
                                                    v121))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v154), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v135)), v124), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v153), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v137)), v123)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v130)), v126), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v155),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v133)),
                                                    v125)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v79;
    a1[1] = v78;
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v156 = *v73;
    long long v157 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          long long v157 = (uint64_t **)v156;
          unint64_t v158 = v156[4];
          if (v71 >= v158) {
            break;
          }
          size_t v156 = *v157;
          uint64_t v73 = v157;
          if (!*v157) {
            goto LABEL_27;
          }
        }
        if (v158 >= v71) {
          break;
        }
        size_t v156 = v157[1];
        if (!v156)
        {
          uint64_t v73 = v157 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_27:
      uint64_t v159 = (uint64_t *)operator new(0x38uLL);
      v159[4] = v71;
      v159[5] = (uint64_t)v79;
      v159[6] = (uint64_t)v78;
      uint64_t *v159 = 0;
      v159[1] = 0;
      v159[2] = (uint64_t)v157;
      *uint64_t v73 = v159;
      uint64_t v160 = **(void **)(a2 + 96);
      if (v160)
      {
        *(void *)(a2 + 96) = v160;
        uint64_t v159 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v159);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A1A1927C(_Unwind_Exception *a1)
{
  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void *ggl::OcclusionLine::OcclusionLinePipelineSetup::OcclusionLinePipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF55B188;
  uint64_t v7 = (uint64_t *)a1[8];
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t *v7 = *a4;
  v7[1] = 0;
  uint64_t v10 = (void *)a1[20];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)v10[1];
  *uint64_t v10 = v8;
  v10[1] = v9;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

void *ggl::Grid::GridPipelineSetup::GridPipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF5604E0;
  uint64_t v13 = (uint64_t *)a1[8];
  uint64_t v14 = *a4;
  uint64_t v15 = a4[1];
  *uint64_t v13 = *a4;
  v13[1] = 0;
  uint64_t v16 = (void *)a1[20];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)v16[1];
  *uint64_t v16 = v14;
  v16[1] = v15;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = a1[8];
  uint64_t v19 = *a5;
  uint64_t v20 = a5[1];
  *(void *)(v18 + 16) = *a5;
  *(void *)(v18 + 24) = 0;
  uint64_t v21 = a1[20];
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v21 + 24);
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = a1[8];
  uint64_t v24 = *a6;
  uint64_t v25 = a6[1];
  *(void *)(v23 + 32) = *a6;
  *(void *)(v23 + 40) = 0;
  uint64_t v26 = a1[20];
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v26 + 40);
  *(void *)(v26 + 32) = v24;
  *(void *)(v26 + 40) = v25;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = a1[8];
  uint64_t v29 = *a7;
  uint64_t v30 = a7[1];
  *(void *)(v28 + 48) = *a7;
  *(void *)(v28 + 56) = 0;
  uint64_t v31 = a1[20];
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  int64x2_t v32 = *(std::__shared_weak_count **)(v31 + 56);
  *(void *)(v31 + 48) = v29;
  *(void *)(v31 + 56) = v30;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  return a1;
}

void *ggl::PipelineSetup::PipelineSetup(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1EF55B1D8;
  a1[1] = **(void **)(a2 + 40);
  a1[2] = a2;
  a1[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v4 = (uint64_t)(a1 + 4);
  a1[6] = 0;
  {
    uint64_t v4 = (uint64_t)(a1 + 4);
    if (v45) {
      operator new();
    }
  }
  uint64_t v5 = ggl::Allocator::instance(void)::alloc;
  a1[8] = 0;
  a1[7] = v5;
  a1[9] = 0;
  a1[10] = 0;
  {
    uint64_t v46 = v4;
    uint64_t v4 = v46;
    if (v47) {
      operator new();
    }
  }
  uint64_t v6 = ggl::Allocator::instance(void)::alloc;
  a1[12] = 0;
  a1[11] = v6;
  a1[13] = 0;
  a1[14] = 0;
  {
    uint64_t v48 = v4;
    uint64_t v4 = v48;
    if (v49) {
      operator new();
    }
  }
  uint64_t v7 = ggl::Allocator::instance(void)::alloc;
  a1[16] = 0;
  a1[15] = v7;
  a1[17] = 0;
  a1[18] = 0;
  {
    uint64_t v50 = v4;
    uint64_t v4 = v50;
    if (v51) {
      operator new();
    }
  }
  uint64_t v8 = ggl::Allocator::instance(void)::alloc;
  a1[20] = 0;
  a1[19] = v8;
  a1[21] = 0;
  a1[22] = 0;
  {
    uint64_t v54 = v4;
    uint64_t v4 = v54;
    if (v52) {
      operator new();
    }
  }
  uint64_t v9 = ggl::Allocator::instance(void)::alloc;
  a1[24] = 0;
  a1[23] = v9;
  a1[25] = 0;
  a1[26] = 0;
  {
    uint64_t v55 = v4;
    uint64_t v4 = v55;
    if (v53) {
      operator new();
    }
  }
  a1[27] = ggl::Allocator::instance(void)::alloc;
  a1[28] = 0;
  uint64_t v10 = (void *)a1[1];
  unint64_t v11 = v10[2];
  long long v56 = 0uLL;
  uint64_t v12 = a1[4];
  unint64_t v13 = (a1[5] - v12) >> 4;
  if (v11 <= v13)
  {
    if (v11 < v13) {
      a1[5] = v12 + 16 * v11;
    }
  }
  else
  {
    std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append(v4, v11 - v13, &v56);
    uint64_t v10 = (void *)a1[1];
  }
  unint64_t v14 = v10[4];
  long long v56 = 0uLL;
  uint64_t v15 = a1[8];
  unint64_t v16 = (a1[9] - v15) >> 4;
  if (v14 <= v16)
  {
    if (v14 < v16) {
      a1[9] = v15 + 16 * v14;
    }
  }
  else
  {
    std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append((uint64_t)(a1 + 8), v14 - v16, &v56);
    uint64_t v10 = (void *)a1[1];
  }
  unint64_t v17 = v10[5];
  *(void *)&long long v56 = 0;
  uint64_t v18 = a1[12];
  unint64_t v19 = (a1[13] - v18) >> 3;
  if (v17 <= v19)
  {
    if (v17 < v19) {
      a1[13] = v18 + 8 * v17;
    }
  }
  else
  {
    std::vector<ggl::Texture *,geo::StdAllocator<ggl::Texture *,ggl::Allocator>>::__append((uint64_t)(a1 + 12), v17 - v19, &v56);
  }
  unint64_t v20 = (uint64_t)(a1[5] - a1[4]) >> 4;
  long long v56 = 0uLL;
  uint64_t v21 = a1[16];
  uint64_t v22 = a1[17];
  unint64_t v23 = (v22 - v21) >> 4;
  unint64_t v24 = v20 - v23;
  if (v20 <= v23)
  {
    if (v20 < v23)
    {
      uint64_t v25 = v21 + 16 * v20;
      if (v22 == v25)
      {
        a1[17] = v25;
      }
      else
      {
        do
        {
          uint64_t v26 = *(std::__shared_weak_count **)(v22 - 8);
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v26->__on_zero_shared)(v26, v24);
            std::__shared_weak_count::__release_weak(v26);
          }
          v22 -= 16;
        }
        while (v22 != v25);
        uint64_t v27 = (std::__shared_weak_count *)*((void *)&v56 + 1);
        a1[17] = v25;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v27->__on_zero_shared)(v27, v24);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append((uint64_t)(a1 + 16), v24, &v56);
  }
  unint64_t v28 = (uint64_t)(a1[9] - a1[8]) >> 4;
  long long v56 = 0uLL;
  uint64_t v29 = a1[20];
  uint64_t v30 = a1[21];
  unint64_t v31 = (v30 - v29) >> 4;
  unint64_t v32 = v28 - v31;
  if (v28 <= v31)
  {
    if (v28 < v31)
    {
      uint64_t v33 = v29 + 16 * v28;
      if (v30 == v33)
      {
        a1[21] = v33;
      }
      else
      {
        do
        {
          int8x16_t v34 = *(std::__shared_weak_count **)(v30 - 8);
          if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v34->__on_zero_shared)(v34, v32);
            std::__shared_weak_count::__release_weak(v34);
          }
          v30 -= 16;
        }
        while (v30 != v33);
        int8x16_t v35 = (std::__shared_weak_count *)*((void *)&v56 + 1);
        a1[21] = v33;
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v35->__on_zero_shared)(v35, v32);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append((uint64_t)(a1 + 20), v32, &v56);
  }
  unint64_t v36 = (uint64_t)(a1[9] - a1[8]) >> 4;
  long long v56 = 0uLL;
  uint64_t v37 = a1[24];
  uint64_t v38 = a1[25];
  unint64_t v39 = (v38 - v37) >> 4;
  unint64_t v40 = v36 - v39;
  if (v36 <= v39)
  {
    if (v36 < v39)
    {
      uint64_t v41 = v37 + 16 * v36;
      if (v38 == v41)
      {
        a1[25] = v41;
      }
      else
      {
        do
        {
          int32x4_t v42 = *(std::__shared_weak_count **)(v38 - 8);
          if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v42->__on_zero_shared)(v42, v40);
            std::__shared_weak_count::__release_weak(v42);
          }
          v38 -= 16;
        }
        while (v38 != v41);
        int32x4_t v43 = (std::__shared_weak_count *)*((void *)&v56 + 1);
        a1[25] = v41;
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v43->__on_zero_shared)(v43, v40);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append((uint64_t)(a1 + 24), v40, &v56);
  }
  return a1;
}

uint64_t std::vector<ggl::Texture *,geo::StdAllocator<ggl::Texture *,ggl::Allocator>>::__append(uint64_t result, unint64_t a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void **)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  if (a2 <= (v7 - (uint64_t)v6) >> 3)
  {
    if (a2)
    {
      uint64_t v13 = 8 * a2;
      unint64_t v14 = &v6[a2];
      do
      {
        if (v6) {
          void *v6 = *a3;
        }
        ++v6;
        v13 -= 8;
      }
      while (v13);
      uint64_t v6 = v14;
    }
    *(void *)(result + 8) = v6;
  }
  else
  {
    uint64_t v8 = (uint64_t)v6 - *(void *)result;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v7 - *(void *)result;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v12, 8);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v15 = (void *)(result + 8 * v9);
    uint64_t v16 = 8 * a2;
    unint64_t v17 = &v15[a2];
    uint64_t v18 = v15;
    do
    {
      if (v18) {
        void *v18 = *a3;
      }
      ++v18;
      v16 -= 8;
    }
    while (v16);
    uint64_t v19 = result + 8 * v12;
    uint64_t v21 = *(void *)v5;
    uint64_t v20 = *(void *)(v5 + 8);
    if (v20 != *(void *)v5)
    {
      unint64_t v22 = v20 - *(void *)v5 - 8;
      if (v22 < 0x58) {
        goto LABEL_38;
      }
      if ((unint64_t)(v20 - (v8 + result)) < 0x20) {
        goto LABEL_38;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      unint64_t v24 = (_OWORD *)(result + 8 * v9 - 16);
      uint64_t v25 = (long long *)(v20 - 16);
      uint64_t result = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *unint64_t v24 = v26;
        v24 -= 2;
        v25 -= 2;
        result -= 4;
      }
      while (result);
      v15 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v20 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          uint64_t v27 = *(void *)(v20 - 8);
          v20 -= 8;
          *--uint64_t v15 = v27;
        }
        while (v20 != v21);
      }
      uint64_t v20 = *(void *)v5;
    }
    *(void *)uint64_t v5 = v15;
    *(void *)(v5 + 8) = v17;
    *(void *)(v5 + 16) = v19;
    if (v20)
    {
      unint64_t v28 = *(uint64_t (**)(void))(**(void **)(v5 + 24) + 40);
      return v28();
    }
  }
  return result;
}

void ggl::DaVinciGroundShader::typedReflection(ggl::DaVinciGroundShader *this)
{
  {
    if (v1)
    {
      ggl::DaVinciGroundShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundShader";
      ggl::daVinciGroundShaderVertexFunctionDescriptor(v1);
      qword_1EB32BB40 = (uint64_t)&ggl::daVinciGroundShaderVertexFunctionDescriptor(void)::ref;
      uint64_t v2 = (ggl *)ggl::crc32::compute<26ul>("DaVinciGroundShaderVertex");
      dword_1EB32BB48 = (int)v2;
      ggl::daVinciGroundShaderFragmentFunctionDescriptor(v2);
      qword_1EB32BB50 = (uint64_t)&ggl::daVinciGroundShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB32BB58 = ggl::crc32::compute<28ul>("DaVinciGroundShaderFragment");
      qword_1EB32BB60 = (uint64_t)ggl::daVinciGroundShaderShaderConstants(void)::ref;
      unk_1EB32BB68 = 30;
      qword_1EB32BB70 = (uint64_t)ggl::daVinciGroundShaderShaderTextures(void)::ref;
      unk_1EB32BB78 = 13;
      qword_1EB32BB80 = (uint64_t)ggl::daVinciGroundShaderShaderSamplers(void)::ref;
      unk_1EB32BB88 = 13;
    }
  }
}

void ggl::daVinciGroundShaderFragmentFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciGroundShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DaVinciGroundShaderFragment");
    *(_DWORD *)algn_1EB32C2FC = 1;
    qword_1EB32C300 = (uint64_t)"DaVinciGroundShader";
    unk_1EB32C308 = 0;
    qword_1EB32C310 = 0;
    unk_1EB32C318 = &ggl::daVinciGroundShaderFragShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C320 = 21;
    unk_1EB32C328 = &ggl::daVinciGroundShaderFragShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C330 = 0;
    unk_1EB32C338 = &ggl::daVinciGroundShaderFragShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C340 = 12;
    unk_1EB32C348 = &ggl::daVinciGroundShaderFragShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C358 = 0;
    unk_1EB32C360 = 0;
    qword_1EB32C350 = 12;
  }
}

void ggl::daVinciGroundShaderVertexFunctionDescriptor(ggl *this)
{
  {
    ggl::daVinciGroundShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("DaVinciGroundShaderVertex");
    *(_DWORD *)algn_1EB32C044 = 0;
    qword_1EB32C048 = (uint64_t)"DaVinciGroundShader";
    unk_1EB32C050 = ggl::daVinciGroundShaderVertShaderFunctionAttributes(void)::ref;
    qword_1EB32C058 = 5;
    unk_1EB32C060 = &ggl::daVinciGroundShaderVertShaderFunctionConstantMapping(void)::ref;
    qword_1EB32C068 = 12;
    unk_1EB32C070 = &ggl::daVinciGroundShaderVertShaderFunctionBufferMapping(void)::ref;
    qword_1EB32C078 = 4;
    unk_1EB32C080 = &ggl::daVinciGroundShaderVertShaderFunctionTextureMapping(void)::ref;
    qword_1EB32C088 = 1;
    unk_1EB32C090 = &ggl::daVinciGroundShaderVertShaderFunctionSamplerMapping(void)::ref;
    qword_1EB32C0A0 = 0;
    unk_1EB32C0A8 = 0;
    qword_1EB32C098 = 1;
  }
}

BOOL geo::codec::MaterialSheet::decodeMaterial(geo::codec::MaterialSheet *this, geo::ibitstream *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v282 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  unint64_t v6 = v5 + 2;
  int v7 = *((unsigned __int8 *)a2 + 24);
  BOOL v8 = *((unsigned char *)a2 + 24) != 0;
  unint64_t v9 = v5 + 3;
  if (!*((unsigned char *)a2 + 24)) {
    unint64_t v9 = v5 + 2;
  }
  if (v4 < v9) {
    return 0;
  }
  uint64_t v12 = *(void *)a2;
  if (*((unsigned char *)a2 + 24))
  {
    char v13 = 8 - v7;
    int v14 = 0xFFFF << (8 - v7);
    uint64_t v15 = v5 + 1;
    int v16 = v5 + 1 >= v4 ? 0 : *(unsigned __int8 *)(v12 + v15);
    unsigned int v17 = ((v16 & v14) >> v13) | ((((1 << (8 - v7)) - 1) & *(unsigned char *)(v12 + v5)) << v7);
    *((void *)a2 + 2) = v15;
    int v19 = *(unsigned __int8 *)(v12 + v15);
    int v20 = v6 >= v4 ? 0 : *(unsigned __int8 *)(v12 + v6);
    unsigned int v18 = ((v20 & v14) >> v13) | ((((1 << (8 - v7)) + 255) & v19) << v7);
  }
  else
  {
    unsigned int v17 = *(unsigned __int16 *)(v12 + v5);
    unsigned int v18 = v17 >> 8;
  }
  *((void *)a2 + 2) = v6;
  __int16 v21 = v17 | (unsigned __int16)((_WORD)v18 << 8);
  *(_WORD *)this = v21;
  unint64_t v22 = v5 + 4;
  if (v4 < v5 + 4 + v8) {
    return 0;
  }
  if (v7)
  {
    char v25 = 8 - v7;
    int v26 = 0xFFFF << (8 - v7);
    unsigned __int8 v27 = *(unsigned char *)(v12 + v6);
    unint64_t v28 = v5 + 3;
    if (v28 >= v4) {
      int v29 = 0;
    }
    else {
      int v29 = *(unsigned __int8 *)(v12 + v28);
    }
    *((void *)a2 + 2) = v28;
    int v32 = *(unsigned __int8 *)(v12 + v28);
    if (v22 >= v4) {
      int v33 = 0;
    }
    else {
      int v33 = *(unsigned __int8 *)(v12 + v22);
    }
    *((void *)a2 + 2) = v22;
    unsigned int v31 = (((v29 & v26) >> v25) | ((((1 << (8 - v7)) - 1) & v27) << v7)) | ((((v33 & v26) >> v25) | ((((1 << (8 - v7)) + 255) & v32) << v7)) << 8);
    double v242 = this;
    if ((((v29 & v26) >> v25) | ((((1 << (8 - v7)) - 1) & v27) << v7)) | (unsigned __int16)(((unsigned __int16)((v33 & v26) >> v25) | (unsigned __int16)(((unsigned __int16)((1 << (8 - v7)) + 255) & (unsigned __int16)v32) << v7)) << 8)) {
      goto LABEL_26;
    }
  }
  else
  {
    unsigned int v30 = *(unsigned __int16 *)(v12 + v6);
    *((void *)a2 + 2) = v22;
    unsigned int v31 = v30 | (v30 >> 8 << 8);
    double v242 = this;
    if ((_WORD)v31)
    {
LABEL_26:
      int v34 = 0;
      int8x16_t v35 = (char *)this + 56;
      double v240 = (char *)this + 464;
      while (1)
      {
        unint64_t v36 = *((void *)a2 + 1);
        uint64_t v37 = *((void *)a2 + 2);
        unint64_t v38 = v37 + 2;
        if (!*((unsigned char *)a2 + 24)) {
          unint64_t v38 = v37 + 1;
        }
        if (v36 < v38) {
          return 0;
        }
        unint64_t v39 = v37 + 1;
        unsigned int v40 = *(unsigned __int8 *)(*(void *)a2 + v37);
        if (*((unsigned char *)a2 + 24))
        {
          if (v39 >= v36) {
            int v41 = 0;
          }
          else {
            int v41 = *(unsigned __int8 *)(*(void *)a2 + v39);
          }
          unsigned int v40 = ((v41 & (0xFFFF << (8 - *((unsigned char *)a2 + 24)))) >> (8 - *((unsigned char *)a2 + 24))) | ((((1 << (8 - *((unsigned char *)a2 + 24))) - 1) & v40) << *((unsigned char *)a2 + 24));
        }
        *((void *)a2 + 2) = v39;
        if (a3 < 0x15)
        {
          uint64_t v42 = 0;
          if (v40 < 0xAu) {
            goto LABEL_42;
          }
        }
        else
        {
          geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)buf);
          if (!buf[0]) {
            return 0;
          }
          uint64_t v42 = *(void *)&buf[8];
          if (v40 < 0xAu)
          {
LABEL_42:
            int v43 = *((unsigned __int8 *)a2 + 24);
            BOOL v44 = *((unsigned char *)a2 + 24) != 0;
            unint64_t v45 = *((void *)a2 + 1);
            uint64_t v46 = *((void *)a2 + 2);
            unint64_t v47 = v46 + 2;
            if (!*((unsigned char *)a2 + 24)) {
              unint64_t v47 = v46 + 1;
            }
            if (v45 < v47) {
              return 0;
            }
            unint64_t v48 = v46 + 1;
            uint64_t v49 = *(void *)a2;
            unsigned int v50 = *(unsigned __int8 *)(*(void *)a2 + v46);
            if (*((unsigned char *)a2 + 24))
            {
              if (v48 >= v45) {
                int v51 = 0;
              }
              else {
                int v51 = *(unsigned __int8 *)(v49 + v48);
              }
              int v54 = 0xFFFF << (8 - v43);
              unsigned int v50 = ((v51 & v54) >> (8 - v43)) | ((((1 << (8 - v43)) + 255) & v50) << v43);
              *((void *)a2 + 2) = v48;
              LOBYTE(__p) = v50;
              unint64_t v52 = v46 + 2;
              if (v45 < v46 + 2 + v44) {
                return 0;
              }
              if (v52 >= v45) {
                int v55 = 0;
              }
              else {
                int v55 = *(unsigned __int8 *)(v49 + v52);
              }
              char v53 = ((v55 & v54) >> (8 - v43)) | ((((1 << (8 - v43)) - 1) & *(unsigned char *)(v49 + v48)) << v43);
              *((void *)a2 + 2) = v52;
              if (v53) {
                goto LABEL_58;
              }
LABEL_50:
              *(_WORD *)buf = 6144;
              if (!geo::codec::MaterialSheet::decodeProperty(a2, v40, (unsigned __int8 *)&__p, (unsigned __int16 *)buf, (uint64_t)v35))return 0; {
            }
              }
            else
            {
              *((void *)a2 + 2) = v48;
              LOBYTE(__p) = v50;
              unint64_t v52 = v46 + 2;
              if (v45 < v46 + 2 + v44) {
                return 0;
              }
              char v53 = *(unsigned char *)(v49 + v48);
              *((void *)a2 + 2) = v52;
              if (!v53) {
                goto LABEL_50;
              }
LABEL_58:
              unint64_t v56 = v46 + 3;
              if (v45 < v56 + v44) {
                return 0;
              }
              unsigned int v57 = *(unsigned __int8 *)(v49 + v52);
              if (v43)
              {
                if (v56 >= v45) {
                  int v58 = 0;
                }
                else {
                  int v58 = *(unsigned __int8 *)(v49 + v56);
                }
                unsigned int v57 = (((v58 & (0xFFFF << (8 - v43))) >> (8 - v43)) | ((((1 << (8 - v43)) - 1) & v57) << v43));
              }
              *((void *)a2 + 2) = v56;
              if (v57)
              {
                int v59 = 0;
                do
                {
                  char v60 = *((unsigned char *)a2 + 24);
                  BOOL v61 = v60 != 0;
                  unint64_t v63 = *((void *)a2 + 1);
                  uint64_t v62 = *((void *)a2 + 2);
                  unint64_t v64 = v62 + 2;
                  if (!v60) {
                    unint64_t v64 = v62 + 1;
                  }
                  if (v63 < v64) {
                    return 0;
                  }
                  unint64_t v65 = v62 + 1;
                  uint64_t v66 = *(void *)a2;
                  unsigned int v67 = *(unsigned __int8 *)(*(void *)a2 + v62);
                  if (*((unsigned char *)a2 + 24))
                  {
                    if (v65 >= v63) {
                      int v68 = 0;
                    }
                    else {
                      int v68 = *(unsigned __int8 *)(v66 + v65);
                    }
                    *((void *)a2 + 2) = v65;
                    unint64_t v69 = v62 + 2;
                    if (v63 < v69 + v61) {
                      return 0;
                    }
                    if (v69 >= v63) {
                      int v71 = 0;
                    }
                    else {
                      int v71 = *(unsigned __int8 *)(v66 + v69);
                    }
                    int v72 = 0xFFFF << (8 - v60);
                    unsigned int v67 = ((v68 & v72) >> (8 - v60)) | ((((1 << (8 - v60)) + 255) & v67) << v60);
                    unsigned int v70 = ((v71 & v72) >> (8 - v60)) | ((((1 << (8 - v60)) - 1) & *(unsigned char *)(v66 + v65)) << v60);
                  }
                  else
                  {
                    *((void *)a2 + 2) = v65;
                    unint64_t v69 = v62 + 2;
                    if (v63 < v69 + v61) {
                      return 0;
                    }
                    LOBYTE(v70) = *(unsigned char *)(v66 + v65);
                  }
                  *((void *)a2 + 2) = v69;
                  buf[0] = v67;
                  buf[1] = v70;
                  if (!geo::codec::MaterialSheet::decodeProperty(a2, v40, (unsigned __int8 *)&__p, (unsigned __int16 *)buf, (uint64_t)v35))return 0; {
                }
                  }
                while (++v59 < v57);
              }
            }
            std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,unsigned char &,unsigned char &>((uint64_t)v240, v50, v50, v53);
            goto LABEL_28;
          }
        }
        *((void *)a2 + 2) += v42;
LABEL_28:
        this = v242;
        if ((unsigned __int16)++v34 >= (unsigned __int16)v31)
        {
          __int16 v21 = *(_WORD *)v242;
          unint64_t v22 = *((void *)a2 + 2);
          break;
        }
      }
    }
  }
  *((_WORD *)this + 252) = v21;
  unint64_t v73 = v22 + 2;
  int v74 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24)) {
    unint64_t v75 = v22 + 3;
  }
  else {
    unint64_t v75 = v22 + 2;
  }
  unint64_t v76 = *((void *)a2 + 1);
  if (v76 < v75) {
    return 0;
  }
  uint64_t v77 = *(void *)a2;
  if (*((unsigned char *)a2 + 24))
  {
    char v78 = 8 - v74;
    int v79 = (1 << (8 - v74)) + 255;
    int v80 = 0xFFFF << (8 - v74);
    int v81 = *(unsigned __int8 *)(v77 + v22);
    unint64_t v82 = v22 + 1;
    if (v82 >= v76) {
      int v83 = 0;
    }
    else {
      int v83 = *(unsigned __int8 *)(v77 + v82);
    }
    unsigned int v86 = ((v83 & v80) >> v78) | ((v79 & v81) << v74);
    *((void *)a2 + 2) = v82;
    unsigned int v84 = *(unsigned __int8 *)(v77 + v82);
    if (v73 >= v76) {
      int v87 = 0;
    }
    else {
      int v87 = *(unsigned __int8 *)(v77 + v73);
    }
    unsigned int v85 = ((v87 & v80) >> v78) | ((v79 & v84) << v74);
    LOBYTE(v84) = v86;
  }
  else
  {
    unsigned int v84 = *(unsigned __int16 *)(v77 + v22);
    unsigned int v85 = v84 >> 8;
  }
  *((void *)a2 + 2) = v73;
  unsigned __int16 v88 = v84 | (unsigned __int16)((_WORD)v85 << 8);
  if (v88)
  {
    int v89 = 0;
    long long v237 = (geo::codec::MaterialSheet::Material **)((char *)this + 8);
    long long v236 = (char **)((char *)this + 32);
    unsigned __int16 v239 = v88;
    while (1)
    {
      int v241 = v89;
      memset(buf, 0, sizeof(buf));
      *(_OWORD *)&v252[1] = 0u;
      long long v253 = 0u;
      LODWORD(v252[0]) = 1065353216;
      int v254 = 1065353216;
      long long v255 = 0u;
      long long v256 = 0u;
      int v257 = 1065353216;
      long long v258 = 0u;
      long long v259 = 0u;
      int v260 = 1065353216;
      long long v261 = 0u;
      long long v262 = 0u;
      int v263 = 1065353216;
      long long v264 = 0u;
      long long v265 = 0u;
      int v266 = 1065353216;
      long long v267 = 0u;
      long long v268 = 0u;
      int v269 = 1065353216;
      long long v270 = 0u;
      long long v271 = 0u;
      int v272 = 1065353216;
      long long v273 = 0u;
      long long v274 = 0u;
      int v275 = 1065353216;
      long long v276 = 0u;
      long long v277 = 0u;
      int v278 = 1065353216;
      __int16 v279 = 0;
      memset(v280, 0, 36);
      v280[9] = 1065353216;
      __int16 v281 = *(_WORD *)this;
      int v90 = *((unsigned __int8 *)a2 + 24);
      unint64_t v91 = *((void *)a2 + 1);
      uint64_t v92 = *((void *)a2 + 2);
      if (a3 < 0x13)
      {
        unint64_t v93 = *((void *)a2 + 2);
        goto LABEL_113;
      }
      unint64_t v93 = v92 + 2;
      unint64_t v94 = v92 + 3;
      if (!*((unsigned char *)a2 + 24)) {
        unint64_t v94 = v92 + 2;
      }
      if (v91 < v94)
      {
        geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)buf);
        return 0;
      }
      uint64_t v95 = *(void *)a2;
      if (*((unsigned char *)a2 + 24)) {
        break;
      }
      unsigned int v100 = *(unsigned __int16 *)(v95 + v92);
      __int16 v101 = v100;
      LODWORD(v95) = v100 >> 8;
LABEL_112:
      *((void *)a2 + 2) = v93;
      __int16 v279 = v101 | ((_WORD)v95 << 8);
LABEL_113:
      __p = 0;
      float v249 = 0;
      double v250 = 0;
      unint64_t v103 = v93 + 2;
      unint64_t v104 = v93 + 3;
      if (!v90) {
        unint64_t v104 = v93 + 2;
      }
      if (v91 < v104) {
        goto LABEL_116;
      }
      uint64_t v107 = *(void *)a2;
      if (!v90)
      {
        unsigned int v112 = *(unsigned __int16 *)(v107 + v93);
        *((void *)a2 + 2) = v103;
        uint64_t v113 = v112 | (v112 >> 8 << 8);
        if (!v113) {
          goto LABEL_123;
        }
        goto LABEL_130;
      }
      unint64_t v108 = v93 + 1;
      if (v93 + 1 >= v91)
      {
        int v109 = 0;
        int v110 = *(unsigned __int8 *)(v107 + v93);
        *((void *)a2 + 2) = v108;
        if (v103 >= v91)
        {
LABEL_121:
          int v111 = 0;
          goto LABEL_129;
        }
      }
      else
      {
        int v109 = *(unsigned __int8 *)(v107 + v108);
        int v110 = *(unsigned __int8 *)(v107 + v93);
        *((void *)a2 + 2) = v108;
        if (v103 >= v91) {
          goto LABEL_121;
        }
      }
      int v111 = *(unsigned __int8 *)(v107 + v103);
LABEL_129:
      int v117 = 0xFFFF << (8 - v90);
      int v118 = (((v111 & v117) >> (8 - v90)) | ((((1 << (8 - v90)) - 1) & *(unsigned char *)(v107 + v108)) << v90));
      *((void *)a2 + 2) = v103;
      uint64_t v113 = (((v109 & v117) >> (8 - v90)) | ((((1 << (8 - v90)) + 255) & v110) << v90)) | (v118 << 8);
      if (!v113)
      {
LABEL_123:
        int8x16_t v114 = 0;
        unint64_t v115 = v103 + 2;
        unint64_t v116 = v103 + 3;
        if (!v90) {
          unint64_t v116 = v103 + 2;
        }
        if (v91 >= v116)
        {
LABEL_175:
          uint64_t v155 = *(void *)a2;
          if (v90)
          {
            unint64_t v156 = v103 + 1;
            if (v103 + 1 >= v91) {
              int v157 = 0;
            }
            else {
              int v157 = *(unsigned __int8 *)(v155 + v156);
            }
            int v161 = *(unsigned __int8 *)(v155 + v103);
            *((void *)a2 + 2) = v156;
            if (v115 >= v91) {
              int v162 = 0;
            }
            else {
              int v162 = *(unsigned __int8 *)(v155 + v115);
            }
            int v163 = 0xFFFF << (8 - v90);
            int v159 = (((v157 & v163) >> (8 - v90)) | ((((1 << (8 - v90)) + 255) & v161) << v90));
            unsigned int v160 = (((v162 & v163) >> (8 - v90)) | ((((1 << (8 - v90)) - 1) & *(unsigned char *)(v155 + v156)) << v90));
          }
          else
          {
            unsigned int v158 = *(unsigned __int16 *)(v155 + v103);
            int v159 = *(_WORD *)(v155 + v103);
            unsigned int v160 = v158 >> 8;
          }
          *((void *)a2 + 2) = v115;
          unsigned int v164 = v159 | (v160 << 8);
          if (v164)
          {
            for (int i = 0; v164 > (unsigned __int16)i; ++i)
            {
              while (1)
              {
                unint64_t v166 = *((void *)a2 + 1);
                uint64_t v167 = *((void *)a2 + 2);
                unint64_t v168 = v167 + 2;
                if (!*((unsigned char *)a2 + 24)) {
                  unint64_t v168 = v167 + 1;
                }
                if (v166 < v168) {
                  goto LABEL_116;
                }
                unint64_t v169 = v167 + 1;
                unsigned int v170 = *(unsigned __int8 *)(*(void *)a2 + v167);
                if (*((unsigned char *)a2 + 24))
                {
                  if (v169 >= v166) {
                    int v171 = 0;
                  }
                  else {
                    int v171 = *(unsigned __int8 *)(*(void *)a2 + v169);
                  }
                  unsigned int v170 = ((v171 & (0xFFFF << (8 - *((unsigned char *)a2 + 24)))) >> (8 - *((unsigned char *)a2 + 24))) | ((((1 << (8 - *((unsigned char *)a2 + 24))) - 1) & v170) << *((unsigned char *)a2 + 24));
                }
                *((void *)a2 + 2) = v169;
                if (a3 >= 0x15) {
                  break;
                }
                uint64_t v172 = 0;
                if (v170 < 0xAu) {
                  goto LABEL_200;
                }
LABEL_186:
                *((void *)a2 + 2) += v172;
                if (v164 <= (unsigned __int16)++i) {
                  goto LABEL_241;
                }
              }
              geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)v245);
              if (!LOBYTE(v245[0])) {
                goto LABEL_116;
              }
              uint64_t v172 = v247;
              if (v170 >= 0xAu) {
                goto LABEL_186;
              }
LABEL_200:
              int v173 = *((unsigned __int8 *)a2 + 24);
              BOOL v174 = *((unsigned char *)a2 + 24) != 0;
              unint64_t v175 = *((void *)a2 + 1);
              uint64_t v176 = *((void *)a2 + 2);
              unint64_t v177 = v176 + 2;
              if (!*((unsigned char *)a2 + 24)) {
                unint64_t v177 = v176 + 1;
              }
              if (v175 < v177) {
                goto LABEL_116;
              }
              unint64_t v178 = v176 + 1;
              uint64_t v179 = *(void *)a2;
              unsigned int v180 = *(unsigned __int8 *)(*(void *)a2 + v176);
              if (*((unsigned char *)a2 + 24))
              {
                if (v178 >= v175) {
                  int v181 = 0;
                }
                else {
                  int v181 = *(unsigned __int8 *)(v179 + v178);
                }
                int v184 = 0xFFFF << (8 - v173);
                unsigned int v180 = ((v181 & v184) >> (8 - v173)) | ((((1 << (8 - v173)) + 255) & v180) << v173);
                *((void *)a2 + 2) = v178;
                unsigned __int8 v244 = v180;
                unint64_t v182 = v176 + 2;
                if (v175 < v176 + 2 + v174) {
                  goto LABEL_246;
                }
                if (v182 >= v175) {
                  int v185 = 0;
                }
                else {
                  int v185 = *(unsigned __int8 *)(v179 + v182);
                }
                char v183 = ((v185 & v184) >> (8 - v173)) | ((((1 << (8 - v173)) - 1) & *(unsigned char *)(v179 + v178)) << v173);
                *((void *)a2 + 2) = v182;
                if (!v183)
                {
LABEL_208:
                  v245[0] = 6144;
                  if (!geo::codec::MaterialSheet::decodeProperty(a2, v170, &v244, v245, (uint64_t)buf)) {
                    goto LABEL_246;
                  }
                  goto LABEL_240;
                }
              }
              else
              {
                *((void *)a2 + 2) = v178;
                unsigned __int8 v244 = v180;
                unint64_t v182 = v176 + 2;
                if (v175 < v176 + 2 + v174) {
                  goto LABEL_246;
                }
                char v183 = *(unsigned char *)(v179 + v178);
                *((void *)a2 + 2) = v182;
                if (!v183) {
                  goto LABEL_208;
                }
              }
              unint64_t v186 = v176 + 3;
              if (v175 < v186 + v174) {
                goto LABEL_246;
              }
              unsigned int v187 = *(unsigned __int8 *)(v179 + v182);
              if (v173)
              {
                if (v186 >= v175) {
                  int v188 = 0;
                }
                else {
                  int v188 = *(unsigned __int8 *)(v179 + v186);
                }
                unsigned int v187 = (((v188 & (0xFFFF << (8 - v173))) >> (8 - v173)) | ((((1 << (8 - v173)) - 1) & v187) << v173));
              }
              *((void *)a2 + 2) = v186;
              if (v187)
              {
                int v189 = 0;
                do
                {
                  char v190 = *((unsigned char *)a2 + 24);
                  BOOL v191 = v190 != 0;
                  unint64_t v193 = *((void *)a2 + 1);
                  uint64_t v192 = *((void *)a2 + 2);
                  unint64_t v194 = v192 + 2;
                  if (!v190) {
                    unint64_t v194 = v192 + 1;
                  }
                  if (v193 < v194) {
                    goto LABEL_246;
                  }
                  unint64_t v195 = v192 + 1;
                  uint64_t v196 = *(void *)a2;
                  unsigned int v197 = *(unsigned __int8 *)(*(void *)a2 + v192);
                  if (*((unsigned char *)a2 + 24))
                  {
                    if (v195 >= v193) {
                      int v198 = 0;
                    }
                    else {
                      int v198 = *(unsigned __int8 *)(v196 + v195);
                    }
                    *((void *)a2 + 2) = v195;
                    unint64_t v199 = v192 + 2;
                    if (v193 < v199 + v191) {
                      goto LABEL_246;
                    }
                    if (v199 >= v193) {
                      int v201 = 0;
                    }
                    else {
                      int v201 = *(unsigned __int8 *)(v196 + v199);
                    }
                    int v202 = 0xFFFF << (8 - v190);
                    unsigned int v197 = ((v198 & v202) >> (8 - v190)) | ((((1 << (8 - v190)) + 255) & v197) << v190);
                    unsigned int v200 = ((v201 & v202) >> (8 - v190)) | ((((1 << (8 - v190)) - 1) & *(unsigned char *)(v196 + v195)) << v190);
                  }
                  else
                  {
                    *((void *)a2 + 2) = v195;
                    unint64_t v199 = v192 + 2;
                    if (v193 < v199 + v191) {
                      goto LABEL_246;
                    }
                    LOBYTE(v200) = *(unsigned char *)(v196 + v195);
                  }
                  *((void *)a2 + 2) = v199;
                  LOBYTE(v245[0]) = v197;
                  HIBYTE(v245[0]) = v200;
                  if (!geo::codec::MaterialSheet::decodeProperty(a2, v170, &v244, v245, (uint64_t)buf)) {
                    goto LABEL_246;
                  }
                }
                while (++v189 < v187);
              }
LABEL_240:
              std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,unsigned char &,unsigned char &>((uint64_t)&v280[1], v180, v180, v183);
              this = v242;
            }
          }
LABEL_241:
          if (a3 < 0x14)
          {
LABEL_244:
            unint64_t v203 = *((void *)this + 2);
            if (v203 >= *((void *)this + 3))
            {
              v204 = std::vector<geo::codec::MaterialSheet::Material>::__push_back_slow_path<geo::codec::MaterialSheet::Material const&>(v237, (const geo::codec::MaterialSheet::Material *)buf);
            }
            else
            {
              geo::codec::MaterialSheet::Material::Material(*((geo::codec::MaterialSheet::Material **)this + 2), (const geo::codec::MaterialSheet::Material *)buf);
              v204 = (char *)(v203 + 456);
              *((void *)this + 2) = v203 + 456;
            }
            *((void *)this + 2) = v204;
            v205 = (void *)*((void *)this + 5);
            if ((unint64_t)v205 >= *((void *)this + 6))
            {
              v210 = std::vector<std::vector<std::pair<unsigned short,unsigned int>>>::__push_back_slow_path<std::vector<std::pair<unsigned short,unsigned int>> const&>(v236, __p, (uint64_t)v114);
            }
            else
            {
              void *v205 = 0;
              v205[1] = 0;
              v205[2] = 0;
              v206 = __p;
              int64_t v207 = (char *)v114 - (unsigned char *)__p;
              if (v207)
              {
                if (v207 < 0) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v208 = (char *)operator new(v207);
                void *v205 = v208;
                v205[1] = v208;
                v205[2] = &v208[8 * (v207 >> 3)];
                size_t v209 = v207 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v208, v206, v209);
                v205[1] = &v208[v209];
              }
              v210 = (char *)(v205 + 3);
              *((void *)this + 5) = v205 + 3;
            }
            *((void *)this + 5) = v210;
            char v105 = 1;
            int32x4_t v106 = __p;
            if (__p) {
              goto LABEL_247;
            }
            goto LABEL_248;
          }
          geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)v245);
          if (LOBYTE(v245[0]))
          {
            v280[0] = v247;
            goto LABEL_244;
          }
        }
LABEL_116:
        char v105 = 0;
        int32x4_t v106 = __p;
        if (__p) {
          goto LABEL_247;
        }
        goto LABEL_248;
      }
LABEL_130:
      int8x16_t v114 = (unint64_t *)operator new(8 * v113);
      int v119 = 0;
      __p = v114;
      float v249 = v114;
      double v250 = &v114[v113];
      while (1)
      {
        unint64_t v121 = *((void *)a2 + 1);
        uint64_t v120 = *((void *)a2 + 2);
        unint64_t v122 = v120 + 2;
        char v123 = *((unsigned char *)a2 + 24);
        unint64_t v124 = v120 + 3;
        if (!v123) {
          unint64_t v124 = v120 + 2;
        }
        if (v121 < v124) {
          break;
        }
        uint64_t v125 = *(void *)a2;
        if (*((unsigned char *)a2 + 24))
        {
          uint64_t v126 = v120 + 1;
          if (v120 + 1 >= v121)
          {
            int v127 = 0;
            unsigned __int8 v128 = *(unsigned char *)(v125 + v120);
            *((void *)a2 + 2) = v126;
            if (v122 < v121) {
              goto LABEL_141;
            }
LABEL_138:
            int v129 = 0;
          }
          else
          {
            int v127 = *(unsigned __int8 *)(v125 + v126);
            unsigned __int8 v128 = *(unsigned char *)(v125 + v120);
            *((void *)a2 + 2) = v126;
            if (v122 >= v121) {
              goto LABEL_138;
            }
LABEL_141:
            int v129 = *(unsigned __int8 *)(v125 + v122);
          }
          int v132 = 0xFFFF << (8 - v123);
          int v130 = (((v127 & v132) >> (8 - v123)) | ((((1 << (8 - v123)) - 1) & v128) << v123));
          int v131 = (((v129 & v132) >> (8 - v123)) | ((((1 << (8 - v123)) - 1) & *(unsigned char *)(v125 + v126)) << v123));
          goto LABEL_143;
        }
        int v130 = *(_WORD *)(v125 + v120);
        int v131 = HIBYTE(*(unsigned __int16 *)(v125 + v120));
LABEL_143:
        *((void *)a2 + 2) = v122;
        geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)v245);
        if (!LOBYTE(v245[0])) {
          break;
        }
        uint64_t v133 = v130 | (v131 << 8);
        uint64_t v134 = v246;
        if (v114 < v250)
        {
          *v114++ = v133 | ((unint64_t)v246 << 32);
          float v249 = v114;
          if (v113 <= (unsigned __int16)++v119) {
            goto LABEL_172;
          }
        }
        else
        {
          int8x16_t v135 = (unint64_t *)__p;
          int64_t v136 = (char *)v114 - (unsigned char *)__p;
          uint64_t v137 = ((char *)v114 - (unsigned char *)__p) >> 3;
          unint64_t v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v139 = (char *)v250 - (unsigned char *)__p;
          if (((char *)v250 - (unsigned char *)__p) >> 2 > v138) {
            unint64_t v138 = v139 >> 2;
          }
          if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v140 = v138;
          }
          if (v140)
          {
            if (v140 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int8x16_t v141 = operator new(8 * v140);
          }
          else
          {
            int8x16_t v141 = 0;
          }
          int8x16_t v142 = (unint64_t *)&v141[8 * v137];
          *int8x16_t v142 = v133 | (v134 << 32);
          int16x8_t v143 = v142 + 1;
          if (v114 == v135)
          {
            __p = &v141[8 * v137];
            float v249 = v142 + 1;
            double v250 = (unint64_t *)&v141[8 * v140];
            goto LABEL_163;
          }
          unint64_t v144 = (char *)v114 - (char *)v135 - 8;
          if (v144 < 0x168
            || (unint64_t v147 = ((char *)(v114 - 1) - (char *)v135) & 0xFFFFFFFFFFFFFFF8,
                &v141[v136 - 8 - v147] > &v141[v136 - 8])
            || (unint64_t *)((char *)v114 - v147 - 8) > v114 - 1
            || (unint64_t)((char *)v114 - v141 - v136) < 0x20)
          {
            int8x16_t v145 = v114;
          }
          else
          {
            uint64_t v148 = (v144 >> 3) + 1;
            uint64_t v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
            int8x16_t v145 = &v114[v149 / 0xFFFFFFFFFFFFFFF8];
            int8x16_t v142 = (unint64_t *)((char *)v142 - v149);
            int8x16_t v150 = &v141[8 * v137 - 16];
            int32x4_t v151 = v114 - 2;
            uint64_t v152 = v148 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v153 = *(_OWORD *)v151;
              *(v150 - 1) = *((_OWORD *)v151 - 1);
              *int8x16_t v150 = v153;
              v150 -= 2;
              v151 -= 4;
              v152 -= 4;
            }
            while (v152);
            if (v148 == (v148 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_159;
            }
          }
          do
          {
            unint64_t v146 = *--v145;
            *--int8x16_t v142 = v146;
          }
          while (v145 != v135);
LABEL_159:
          int8x16_t v114 = (unint64_t *)__p;
          __p = v142;
          float v249 = v143;
          double v250 = (unint64_t *)&v141[8 * v140];
          if (v114)
          {
LABEL_163:
            operator delete(v114);
            int8x16_t v114 = v143;
            float v249 = v143;
            if (v113 <= (unsigned __int16)++v119)
            {
LABEL_172:
              int v90 = *((unsigned __int8 *)a2 + 24);
              unint64_t v91 = *((void *)a2 + 1);
              unint64_t v103 = *((void *)a2 + 2);
              this = v242;
              unint64_t v115 = v103 + 2;
              unint64_t v154 = v103 + 3;
              if (!*((unsigned char *)a2 + 24)) {
                unint64_t v154 = v103 + 2;
              }
              if (v91 >= v154) {
                goto LABEL_175;
              }
              goto LABEL_116;
            }
          }
          else
          {
            int8x16_t v114 = v143;
            float v249 = v143;
            if (v113 <= (unsigned __int16)++v119) {
              goto LABEL_172;
            }
          }
        }
      }
LABEL_246:
      char v105 = 0;
      this = v242;
      int32x4_t v106 = __p;
      if (!__p) {
        goto LABEL_248;
      }
LABEL_247:
      operator delete(v106);
LABEL_248:
      geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)buf);
      if ((v105 & 1) == 0) {
        return 0;
      }
      int v89 = v241 + 1;
      if ((unsigned __int16)(v241 + 1) >= v239)
      {
        int v74 = *((unsigned __int8 *)a2 + 24);
        unint64_t v76 = *((void *)a2 + 1);
        unint64_t v73 = *((void *)a2 + 2);
        goto LABEL_260;
      }
    }
    uint64_t v96 = v92 + 1;
    if (v92 + 1 >= v91)
    {
      int v97 = 0;
      int v98 = *(unsigned __int8 *)(v95 + v92);
      *((void *)a2 + 2) = v96;
      if (v93 >= v91) {
        goto LABEL_106;
      }
    }
    else
    {
      int v97 = *(unsigned __int8 *)(v95 + v96);
      int v98 = *(unsigned __int8 *)(v95 + v92);
      *((void *)a2 + 2) = v96;
      if (v93 >= v91)
      {
LABEL_106:
        int v99 = 0;
LABEL_111:
        int v102 = 0xFFFF << (8 - v90);
        __int16 v101 = (((v97 & v102) >> (8 - v90)) | ((((1 << (8 - v90)) + 255) & v98) << v90));
        LOWORD(v95) = (((v99 & v102) >> (8 - v90)) | ((((1 << (8 - v90)) - 1) & *(unsigned char *)(v95 + v96)) << v90));
        goto LABEL_112;
      }
    }
    int v99 = *(unsigned __int8 *)(v95 + v93);
    goto LABEL_111;
  }
LABEL_260:
  unint64_t v211 = v73 + 2;
  if (!v74) {
    unint64_t v211 = v73 + 1;
  }
  if (v76 < v211) {
    return 0;
  }
  unint64_t v212 = v73 + 1;
  unsigned int v213 = *(unsigned __int8 *)(*(void *)a2 + v73);
  if (v74)
  {
    if (v212 >= v76) {
      int v214 = 0;
    }
    else {
      int v214 = *(unsigned __int8 *)(*(void *)a2 + v212);
    }
    unsigned int v213 = ((v214 & (0xFFFF << (8 - v74))) >> (8 - v74)) | ((((1 << (8 - v74)) - 1) & v213) << v74);
  }
  *((void *)a2 + 2) = v212;
  std::vector<geo::codec::MaterialTexture,geo::StdAllocator<geo::codec::MaterialTexture,geo::codec::Allocator>>::resize((uint64_t)this + 512, v213);
  uint64_t v215 = *((void *)this + 64);
  uint64_t v216 = *((void *)v242 + 65);
  if (v215 == v216) {
    return 1;
  }
  if (a3 <= 0x13)
  {
    while (1)
    {
      geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)buf);
      if (!buf[0]) {
        return 0;
      }
      uint64_t v230 = *(void *)&buf[8];
      BOOL v23 = *(void *)&buf[8] != 0;
      if (!*(void *)&buf[8]) {
        return v23;
      }
      uint64_t v232 = *((void *)a2 + 2);
      if (*(void *)&buf[8] > *((void *)a2 + 1)
                              - ((v232 + ((unint64_t)*((unsigned __int8 *)a2 + 24) >> 3)) & 0x1FFFFFFFFFFFFFFFLL))
        break;
      std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((unint64_t *)v215, (char *)(*(void *)a2 + v232), (char *)(*(void *)a2 + v232 + *(void *)&buf[8]), *(unint64_t *)&buf[8]);
      *((void *)a2 + 2) += v230;
      v215 += 40;
      if (v215 == v216) {
        return v23;
      }
    }
LABEL_298:
    if (qword_1EB34D650 == -1)
    {
      long long v233 = _MergedGlobals_6;
      if (!os_log_type_enabled((os_log_t)_MergedGlobals_6, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&qword_1EB34D650, &__block_literal_global_4);
      long long v233 = _MergedGlobals_6;
      if (!os_log_type_enabled((os_log_t)_MergedGlobals_6, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    uint64_t v234 = *((void *)a2 + 1);
    uint64_t v235 = *((unsigned __int8 *)a2 + 24) + 8 * *((void *)a2 + 2);
    *(_DWORD *)buf = 134218752;
    *(void *)&uint8_t buf[4] = a4;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v234;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&buf[24] = v235;
    LOWORD(v252[0]) = 2048;
    *(void *)((char *)v252 + 2) = v230;
    _os_log_impl(&dword_1A1780000, v233, OS_LOG_TYPE_ERROR, "Texture size overflows the buffer for MaterialID = %llu, binary size = %zu, current bit offset = %llu, raw texture size = %llu", buf, 0x2Au);
    return 0;
  }
  BOOL v23 = 1;
  while (1)
  {
    geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)buf);
    if (!buf[0]) {
      return 0;
    }
    *(_DWORD *)(v215 + 36) = *(_DWORD *)&buf[4];
    char v217 = *((unsigned char *)a2 + 24);
    BOOL v218 = v217 != 0;
    unint64_t v219 = *((void *)a2 + 1);
    uint64_t v220 = *((void *)a2 + 2);
    unint64_t v221 = v220 + 2;
    if (!v217) {
      unint64_t v221 = v220 + 1;
    }
    if (v219 < v221) {
      return 0;
    }
    unint64_t v222 = v220 + 1;
    uint64_t v223 = *(void *)a2;
    unsigned __int8 v224 = *(unsigned char *)(*(void *)a2 + v220);
    if (*((unsigned char *)a2 + 24))
    {
      if (v222 >= v219) {
        int v225 = 0;
      }
      else {
        int v225 = *(unsigned __int8 *)(v223 + v222);
      }
      int v228 = 0xFFFF << (8 - v217);
      *((void *)a2 + 2) = v222;
      *(unsigned char *)(v215 + 32) = ((v225 & v228) >> (8 - v217)) | ((((1 << (8 - v217)) - 1) & v224) << v217);
      unint64_t v226 = v220 + 2;
      if (v219 < v226 + v218) {
        return 0;
      }
      if (v226 >= v219) {
        int v229 = 0;
      }
      else {
        int v229 = *(unsigned __int8 *)(v223 + v226);
      }
      unsigned int v227 = ((v229 & v228) >> (8 - v217)) | ((((1 << (8 - v217)) + 255) & *(unsigned __int8 *)(v223 + v222)) << v217);
    }
    else
    {
      *((void *)a2 + 2) = v222;
      *(unsigned char *)(v215 + 32) = v224;
      unint64_t v226 = v220 + 2;
      if (v219 < v226 + v218) {
        return 0;
      }
      LOBYTE(v227) = *(unsigned char *)(v223 + v222);
    }
    *((void *)a2 + 2) = v226;
    *(unsigned char *)(v215 + 33) = v227;
    geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)buf);
    if (!buf[0]) {
      return 0;
    }
    uint64_t v230 = *(void *)&buf[8];
    if (!*(void *)&buf[8]) {
      return 0;
    }
    uint64_t v231 = *((void *)a2 + 2);
    if (*(void *)&buf[8] > *((void *)a2 + 1)
                            - ((v231 + ((unint64_t)*((unsigned __int8 *)a2 + 24) >> 3)) & 0x1FFFFFFFFFFFFFFFLL))
      goto LABEL_298;
    std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((unint64_t *)v215, (char *)(*(void *)a2 + v231), (char *)(*(void *)a2 + v231 + *(void *)&buf[8]), *(unint64_t *)&buf[8]);
    *((void *)a2 + 2) += v230;
    v215 += 40;
    if (v215 == v216) {
      return v23;
    }
  }
}

void sub_1A1A1B750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  int8x16_t v35 = *(void **)v33;
  if (*(void *)v33)
  {
    *(void *)(v33 + 8) = v35;
    operator delete(v35);
  }
  *(void *)(a26 + 40) = v33;
  if (__p) {
    operator delete(__p);
  }
  geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)&a33);
  _Unwind_Resume(a1);
}

BOOL geo::codec::MaterialSheet::decodeProperty(geo::ibitstream *this, char a2, unsigned __int8 *a3, unsigned __int16 *a4, uint64_t a5)
{
  int v7 = a4;
  switch(a2)
  {
    case 0:
      int v10 = *((unsigned __int8 *)this + 24);
      BOOL v11 = *((unsigned char *)this + 24) != 0;
      unint64_t v12 = *((void *)this + 1);
      uint64_t v13 = *((void *)this + 2);
      unint64_t v14 = v13 + 2;
      if (!*((unsigned char *)this + 24)) {
        unint64_t v14 = v13 + 1;
      }
      if (v12 < v14) {
        return 0;
      }
      unint64_t v15 = v13 + 1;
      uint64_t v16 = *(void *)this;
      unsigned int v17 = *(unsigned __int8 *)(*(void *)this + v13);
      if (*((unsigned char *)this + 24))
      {
        if (v15 >= v12) {
          int v18 = 0;
        }
        else {
          int v18 = *(unsigned __int8 *)(v16 + v15);
        }
        unsigned int v17 = ((v18 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) - 1) & v17) << v10);
      }
      *((void *)this + 2) = v15;
      unint64_t v100 = v13 + 2;
      if (v12 < v13 + 2 + v11) {
        return 0;
      }
      unsigned int v101 = *(unsigned __int8 *)(v16 + v15);
      if (v10)
      {
        if (v100 >= v12) {
          int v102 = 0;
        }
        else {
          int v102 = *(unsigned __int8 *)(v16 + v100);
        }
        unsigned int v101 = ((v102 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) - 1) & v101) << v10);
      }
      *((void *)this + 2) = v100;
      unint64_t v305 = v13 + 3;
      if (v12 < v305 + v11) {
        return 0;
      }
      unsigned int v306 = *(unsigned __int8 *)(v16 + v100);
      if (v10)
      {
        if (v305 >= v12) {
          int v307 = 0;
        }
        else {
          int v307 = *(unsigned __int8 *)(v16 + v305);
        }
        unsigned int v306 = ((v307 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) - 1) & v306) << v10);
      }
      *((void *)this + 2) = v305;
      geo::ibitstream::readByte((uint64_t)this, &v501);
      if (!(_BYTE)v501) {
        return 0;
      }
      *(float *)&unsigned int v354 = (float)v306;
      float v355 = *(float *)&v354 * 0.0039216;
      LOBYTE(v354) = BYTE1(v501);
      float v356 = (float)v354 * 0.0039216;
      v357 = (void **)std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a5, *a3, a3);
      LOWORD(v501) = *v7;
      *((float *)&v501 + 1) = (float)v17 * 0.0039216;
      *(float *)&v502 = (float)v101 * 0.0039216;
      *((float *)&v502 + 1) = v355;
      *(float *)&unint64_t v503 = v356;
      std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>::push_back[abi:ne180100](v357 + 3, (uint64_t)&v501);
      return 1;
    case 1:
      unint64_t v19 = *((void *)this + 1);
      uint64_t v20 = *((void *)this + 2);
      unint64_t v21 = v20 + 2;
      if (!*((unsigned char *)this + 24)) {
        unint64_t v21 = v20 + 1;
      }
      if (v19 < v21) {
        return 0;
      }
      unint64_t v22 = v20 + 1;
      unsigned int v23 = *(unsigned __int8 *)(*(void *)this + v20);
      if (*((unsigned char *)this + 24))
      {
        if (v22 >= v19) {
          int v24 = 0;
        }
        else {
          int v24 = *(unsigned __int8 *)(*(void *)this + v22);
        }
        unsigned int v23 = ((v24 & (0xFFFF << (8 - *((unsigned char *)this + 24)))) >> (8 - *((unsigned char *)this + 24))) | ((((1 << (8 - *((unsigned char *)this + 24))) - 1) & v23) << *((unsigned char *)this + 24));
      }
      *((void *)this + 2) = v22;
      unint64_t v103 = (uint64_t *)(a5 + 120);
      unint64_t v104 = *a3;
      unint64_t v105 = *(void *)(a5 + 128);
      if (!v105) {
        goto LABEL_148;
      }
      uint8x8_t v106 = (uint8x8_t)vcnt_s8((int8x8_t)v105);
      v106.i16[0] = vaddlv_u8(v106);
      if (v106.u32[0] > 1uLL)
      {
        unint64_t v5 = *a3;
        if (v105 <= v104) {
          unint64_t v5 = v104 % v105;
        }
      }
      else
      {
        unint64_t v5 = (v105 - 1) & v104;
      }
      uint64_t v125 = *(void ***)(*v103 + 8 * v5);
      if (!v125) {
        goto LABEL_148;
      }
      unsigned int v85 = *v125;
      if (!*v125) {
        goto LABEL_148;
      }
      if (v106.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v127 = v85[1];
          if (v127 == v104)
          {
            if (*((unsigned __int8 *)v85 + 16) == v104) {
              goto LABEL_720;
            }
          }
          else if ((v127 & (v105 - 1)) != v5)
          {
            goto LABEL_148;
          }
          unsigned int v85 = (void *)*v85;
          if (!v85) {
            goto LABEL_148;
          }
        }
      }
      while (2)
      {
        unint64_t v126 = v85[1];
        if (v126 == v104)
        {
          if (*((unsigned __int8 *)v85 + 16) == v104) {
            goto LABEL_720;
          }
        }
        else
        {
          if (v126 >= v105) {
            v126 %= v105;
          }
          if (v126 != v5)
          {
LABEL_148:
            unsigned __int8 v128 = (void *)(a5 + 136);
            unsigned int v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 136);
            void *v85 = 0;
            v85[1] = v104;
            *((unsigned char *)v85 + 16) = v104;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            float v129 = (float)(unint64_t)(*(void *)(a5 + 144) + 1);
            float v130 = *(float *)(a5 + 152);
            if (v105 && (float)(v130 * (float)v105) >= v129)
            {
              unint64_t v104 = v5;
            }
            else
            {
              BOOL v131 = 1;
              if (v105 >= 3) {
                BOOL v131 = (v105 & (v105 - 1)) != 0;
              }
              unint64_t v132 = v131 | (2 * v105);
              unint64_t v133 = vcvtps_u32_f32(v129 / v130);
              if (v132 <= v133) {
                size_t prime = v133;
              }
              else {
                size_t prime = v132;
              }
              if (prime == 1)
              {
                size_t prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                size_t prime = std::__next_prime(prime);
                unint64_t v105 = *(void *)(a5 + 128);
              }
              if (prime > v105) {
                goto LABEL_484;
              }
              if (prime < v105)
              {
                unint64_t v293 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 144) / *(float *)(a5 + 152));
                if (v105 < 3
                  || (uint8x8_t v294 = (uint8x8_t)vcnt_s8((int8x8_t)v105), v294.i16[0] = vaddlv_u8(v294), v294.u32[0] > 1uLL))
                {
                  unint64_t v293 = std::__next_prime(v293);
                }
                else
                {
                  uint64_t v295 = 1 << -(char)__clz(v293 - 1);
                  if (v293 >= 2) {
                    unint64_t v293 = v295;
                  }
                }
                if (prime <= v293) {
                  size_t prime = v293;
                }
                if (prime < v105) {
LABEL_484:
                }
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 120, prime);
              }
              unint64_t v105 = *(void *)(a5 + 128);
              if ((v105 & (v105 - 1)) != 0)
              {
                if (v105 <= v104) {
                  v104 %= v105;
                }
              }
              else
              {
                unint64_t v104 = (v105 - 1) & v104;
              }
            }
            uint64_t v385 = *v103;
            v386 = *(void **)(*v103 + 8 * v104);
            if (v386)
            {
              void *v85 = *v386;
            }
            else
            {
              void *v85 = *v128;
              void *v128 = v85;
              *(void *)(v385 + 8 * v104) = v128;
              if (!*v85) {
                goto LABEL_719;
              }
              unint64_t v387 = *(void *)(*v85 + 8);
              if ((v105 & (v105 - 1)) != 0)
              {
                if (v387 >= v105) {
                  v387 %= v105;
                }
              }
              else
              {
                v387 &= v105 - 1;
              }
              v386 = (void *)(*v103 + 8 * v387);
            }
            void *v386 = v85;
LABEL_719:
            ++*(void *)(a5 + 144);
LABEL_720:
            unsigned __int16 v388 = *v7;
            unint64_t v390 = v85[4];
            unint64_t v389 = v85[5];
            if (v390 < v389)
            {
              *(_WORD *)unint64_t v390 = v388;
              *(unsigned char *)(v390 + 2) = v23;
              v366 = (char *)(v390 + 3);
              goto LABEL_919;
            }
            v391 = v85 + 3;
            uint64_t v392 = v85[3];
            unint64_t v393 = 0xAAAAAAAAAAAAAAABLL * (v390 - v392) + 1;
            if (v393 >= 0x5555555555555556) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v394 = 0xAAAAAAAAAAAAAAABLL * (v389 - v392);
            if (2 * v394 > v393) {
              unint64_t v393 = 2 * v394;
            }
            if (v394 >= 0x2AAAAAAAAAAAAAAALL) {
              unint64_t v395 = 0x5555555555555555;
            }
            else {
              unint64_t v395 = v393;
            }
            if (!v395)
            {
              v396 = 0;
              goto LABEL_732;
            }
            if (v395 < 0x5555555555555556)
            {
              v396 = (char *)operator new(3 * v395);
LABEL_732:
              v397 = &v396[v390 - v392];
              v398 = &v396[3 * v395];
              *(_WORD *)v397 = v388;
              v397[2] = v23;
              v366 = v397 + 3;
              if (v390 == v392) {
                goto LABEL_768;
              }
              do
              {
                __int16 v399 = *(_WORD *)(v390 - 3);
                v390 -= 3;
                char v400 = *(unsigned char *)(v390 + 2);
                *(_WORD *)(v397 - 3) = v399;
                v397 -= 3;
                v397[2] = v400;
              }
              while (v390 != v392);
              goto LABEL_767;
            }
LABEL_964:
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
        }
        unsigned int v85 = (void *)*v85;
        if (!v85) {
          goto LABEL_148;
        }
        continue;
      }
    case 2:
      unint64_t v25 = *((void *)this + 1);
      uint64_t v26 = *((void *)this + 2);
      unint64_t v27 = v26 + 4;
      char v28 = *((unsigned char *)this + 24);
      unint64_t v29 = v26 + 5;
      if (!v28) {
        unint64_t v29 = v26 + 4;
      }
      if (v25 < v29) {
        return 0;
      }
      uint64_t v30 = *(void *)this;
      if (*((unsigned char *)this + 24))
      {
        char v31 = 8 - v28;
        int v32 = (1 << (8 - v28)) + 255;
        int v33 = 0xFFFF << (8 - v28);
        uint64_t v34 = v26 + 1;
        if (v26 + 1 >= v25) {
          int v35 = 0;
        }
        else {
          int v35 = *(unsigned __int8 *)(v30 + v34);
        }
        int v107 = (((1 << (8 - v28)) - 1) & *(unsigned char *)(v30 + v26));
        unsigned int v108 = v35 & v33;
        *((void *)this + 2) = v34;
        int v109 = *(unsigned __int8 *)(v30 + v34);
        uint64_t v110 = v26 + 2;
        if (v26 + 2 >= v25) {
          int v111 = 0;
        }
        else {
          int v111 = *(unsigned __int8 *)(v30 + v110);
        }
        int v135 = v107 << v28;
        unsigned int v96 = v108 >> v31;
        int v136 = (v32 & v109) << v28;
        unsigned int v137 = (v111 & v33) >> v31;
        *((void *)this + 2) = v110;
        unint64_t v138 = v26 + 3;
        int v139 = *(unsigned __int8 *)(v30 + v110);
        if (v138 >= v25) {
          int v140 = 0;
        }
        else {
          int v140 = *(unsigned __int8 *)(v30 + v138);
        }
        LOBYTE(v96) = v96 | v135;
        LOBYTE(v97) = v137 | v136;
        unsigned int v98 = ((v140 & v33) >> v31) | ((v32 & v139) << v28);
        *((void *)this + 2) = v138;
        int v151 = *(unsigned __int8 *)(v30 + v138);
        uint64_t v95 = v7;
        if (v27 >= v25) {
          int v152 = 0;
        }
        else {
          int v152 = *(unsigned __int8 *)(v30 + v27);
        }
        unsigned int v99 = ((v152 & v33) >> v31) | ((v32 & v151) << v28);
      }
      else
      {
        uint64_t v95 = a4;
        unsigned int v96 = *(_DWORD *)(v30 + v26);
        unsigned int v97 = v96 >> 8;
        unsigned int v98 = HIWORD(v96);
        unsigned int v99 = HIBYTE(v96);
      }
      *((void *)this + 2) = v27;
      long long v153 = (uint64_t *)(a5 + 160);
      unint64_t v154 = *a3;
      unint64_t v155 = *(void *)(a5 + 168);
      char v499 = v96;
      unsigned int v498 = v99;
      if (!v155) {
        goto LABEL_214;
      }
      uint8x8_t v156 = (uint8x8_t)vcnt_s8((int8x8_t)v155);
      v156.i16[0] = vaddlv_u8(v156);
      if (v156.u32[0] > 1uLL)
      {
        unint64_t v5 = *a3;
        if (v155 <= v154) {
          unint64_t v5 = v154 % v155;
        }
      }
      else
      {
        unint64_t v5 = (v155 - 1) & v154;
      }
      int v157 = *(void ***)(*v153 + 8 * v5);
      if (!v157) {
        goto LABEL_214;
      }
      unsigned int v85 = *v157;
      if (!*v157) {
        goto LABEL_214;
      }
      if (v156.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v159 = v85[1];
          if (v159 == v154)
          {
            if (*((unsigned __int8 *)v85 + 16) == v154) {
              goto LABEL_788;
            }
          }
          else if ((v159 & (v155 - 1)) != v5)
          {
            goto LABEL_214;
          }
          unsigned int v85 = (void *)*v85;
          if (!v85) {
            goto LABEL_214;
          }
        }
      }
      while (2)
      {
        unint64_t v158 = v85[1];
        if (v158 == v154)
        {
          if (*((unsigned __int8 *)v85 + 16) == v154) {
            goto LABEL_788;
          }
        }
        else
        {
          if (v158 >= v155) {
            v158 %= v155;
          }
          if (v158 != v5)
          {
LABEL_214:
            unsigned int v160 = (void *)(a5 + 176);
            unsigned int v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 176);
            void *v85 = 0;
            v85[1] = v154;
            *((unsigned char *)v85 + 16) = v154;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            float v161 = (float)(unint64_t)(*(void *)(a5 + 184) + 1);
            float v162 = *(float *)(a5 + 192);
            if (v155 && (float)(v162 * (float)v155) >= v161)
            {
              unint64_t v154 = v5;
            }
            else
            {
              BOOL v163 = 1;
              if (v155 >= 3) {
                BOOL v163 = (v155 & (v155 - 1)) != 0;
              }
              unint64_t v164 = v163 | (2 * v155);
              unint64_t v165 = vcvtps_u32_f32(v161 / v162);
              if (v164 <= v165) {
                size_t v166 = v165;
              }
              else {
                size_t v166 = v164;
              }
              if (v166 == 1)
              {
                size_t v166 = 2;
              }
              else if ((v166 & (v166 - 1)) != 0)
              {
                size_t v166 = std::__next_prime(v166);
                unint64_t v155 = *(void *)(a5 + 168);
              }
              if (v166 > v155) {
                goto LABEL_492;
              }
              if (v166 < v155)
              {
                unint64_t v299 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 184) / *(float *)(a5 + 192));
                if (v155 < 3
                  || (uint8x8_t v300 = (uint8x8_t)vcnt_s8((int8x8_t)v155), v300.i16[0] = vaddlv_u8(v300), v300.u32[0] > 1uLL))
                {
                  unint64_t v299 = std::__next_prime(v299);
                }
                else
                {
                  uint64_t v301 = 1 << -(char)__clz(v299 - 1);
                  if (v299 >= 2) {
                    unint64_t v299 = v301;
                  }
                }
                if (v166 <= v299) {
                  size_t v166 = v299;
                }
                if (v166 < v155) {
LABEL_492:
                }
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 160, v166);
              }
              unint64_t v155 = *(void *)(a5 + 168);
              if ((v155 & (v155 - 1)) != 0)
              {
                if (v155 <= v154) {
                  v154 %= v155;
                }
              }
              else
              {
                unint64_t v154 = (v155 - 1) & v154;
              }
            }
            uint64_t v414 = *v153;
            v415 = *(void **)(*v153 + 8 * v154);
            if (v415)
            {
              void *v85 = *v415;
              LOBYTE(v96) = v499;
              unsigned int v99 = v498;
            }
            else
            {
              void *v85 = *v160;
              *unsigned int v160 = v85;
              *(void *)(v414 + 8 * v154) = v160;
              LOBYTE(v96) = v499;
              unsigned int v99 = v498;
              if (!*v85)
              {
LABEL_787:
                ++*(void *)(a5 + 184);
LABEL_788:
                uint64_t v417 = (v99 << 24) | (v98 << 16) | (v97 << 8) | v96;
                uint64_t v418 = *v95;
                v365 = (char *)v85[4];
                unint64_t v419 = v85[5];
                if ((unint64_t)v365 < v419)
                {
                  *(void *)v365 = v418 | (v417 << 32);
                  v366 = v365 + 8;
                  goto LABEL_919;
                }
                v367 = (void **)(v85 + 3);
                v420 = (unsigned char *)v85[3];
                uint64_t v421 = (v365 - v420) >> 3;
                unint64_t v422 = v421 + 1;
                if ((unint64_t)(v421 + 1) >> 61) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v423 = v419 - (void)v420;
                if (v423 >> 2 > v422) {
                  unint64_t v422 = v423 >> 2;
                }
                if ((unint64_t)v423 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v424 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v424 = v422;
                }
                if (v424)
                {
                  if (v424 >> 61) {
                    goto LABEL_964;
                  }
                  v425 = (char *)operator new(8 * v424);
                }
                else
                {
                  v425 = 0;
                }
                v374 = &v425[8 * v421];
                v375 = &v425[8 * v424];
                *(void *)v374 = v418 | (v417 << 32);
                v366 = v374 + 8;
                if (v365 != v420)
                {
                  unint64_t v426 = v365 - v420 - 8;
                  if (v426 < 0x58) {
                    goto LABEL_973;
                  }
                  if ((unint64_t)(v420 - v425) < 0x20) {
                    goto LABEL_973;
                  }
                  uint64_t v427 = (v426 >> 3) + 1;
                  uint64_t v428 = 8 * (v427 & 0x3FFFFFFFFFFFFFFCLL);
                  v429 = &v365[-v428];
                  v374 -= v428;
                  v430 = &v425[8 * v421 - 16];
                  v431 = v365 - 16;
                  uint64_t v432 = v427 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v433 = *(_OWORD *)v431;
                    *((_OWORD *)v430 - 1) = *((_OWORD *)v431 - 1);
                    *(_OWORD *)v430 = v433;
                    v430 -= 32;
                    v431 -= 32;
                    v432 -= 4;
                  }
                  while (v432);
                  v365 = v429;
                  if (v427 != (v427 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_973:
                    do
                    {
                      uint64_t v434 = *((void *)v365 - 1);
                      v365 -= 8;
                      *((void *)v374 - 1) = v434;
                      v374 -= 8;
                    }
                    while (v365 != v420);
                  }
LABEL_807:
                  v365 = (char *)*v367;
                  goto LABEL_808;
                }
                goto LABEL_808;
              }
              unint64_t v416 = *(void *)(*v85 + 8);
              if ((v155 & (v155 - 1)) != 0)
              {
                if (v416 >= v155) {
                  v416 %= v155;
                }
              }
              else
              {
                v416 &= v155 - 1;
              }
              v415 = (void *)(*v153 + 8 * v416);
            }
            void *v415 = v85;
            goto LABEL_787;
          }
        }
        unsigned int v85 = (void *)*v85;
        if (!v85) {
          goto LABEL_214;
        }
        continue;
      }
    case 3:
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501) {
        return 0;
      }
      int v36 = HIDWORD(v501);
      uint64_t v37 = (uint64_t *)(a5 + 80);
      unint64_t v38 = *a3;
      unint64_t v39 = *(void *)(a5 + 88);
      if (!v39) {
        goto LABEL_81;
      }
      uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        unint64_t v5 = *a3;
        if (v39 <= v38) {
          unint64_t v5 = v38 % v39;
        }
      }
      else
      {
        unint64_t v5 = (v39 - 1) & v38;
      }
      unsigned int v84 = *(void ***)(*v37 + 8 * v5);
      if (!v84) {
        goto LABEL_81;
      }
      unsigned int v85 = *v84;
      if (!*v84) {
        goto LABEL_81;
      }
      if (v40.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v87 = v85[1];
          if (v87 == v38)
          {
            if (*((unsigned __int8 *)v85 + 16) == v38) {
              goto LABEL_672;
            }
          }
          else if ((v87 & (v39 - 1)) != v5)
          {
            goto LABEL_81;
          }
          unsigned int v85 = (void *)*v85;
          if (!v85) {
            goto LABEL_81;
          }
        }
      }
      while (2)
      {
        unint64_t v86 = v85[1];
        if (v86 == v38)
        {
          if (*((unsigned __int8 *)v85 + 16) == v38) {
            goto LABEL_672;
          }
        }
        else
        {
          if (v86 >= v39) {
            v86 %= v39;
          }
          if (v86 != v5)
          {
LABEL_81:
            unsigned __int16 v88 = (void *)(a5 + 96);
            unsigned int v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 96);
            void *v85 = 0;
            v85[1] = v38;
            *((unsigned char *)v85 + 16) = v38;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            float v89 = (float)(unint64_t)(*(void *)(a5 + 104) + 1);
            float v90 = *(float *)(a5 + 112);
            if (v39 && (float)(v90 * (float)v39) >= v89)
            {
              unint64_t v38 = v5;
            }
            else
            {
              BOOL v91 = 1;
              if (v39 >= 3) {
                BOOL v91 = (v39 & (v39 - 1)) != 0;
              }
              unint64_t v92 = v91 | (2 * v39);
              unint64_t v93 = vcvtps_u32_f32(v89 / v90);
              if (v92 <= v93) {
                size_t v94 = v93;
              }
              else {
                size_t v94 = v92;
              }
              if (v94 == 1)
              {
                size_t v94 = 2;
              }
              else if ((v94 & (v94 - 1)) != 0)
              {
                size_t v94 = std::__next_prime(v94);
                unint64_t v39 = *(void *)(a5 + 88);
              }
              if (v94 > v39) {
                goto LABEL_227;
              }
              if (v94 < v39)
              {
                unint64_t v167 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 104) / *(float *)(a5 + 112));
                if (v39 < 3
                  || (uint8x8_t v168 = (uint8x8_t)vcnt_s8((int8x8_t)v39), v168.i16[0] = vaddlv_u8(v168), v168.u32[0] > 1uLL))
                {
                  unint64_t v167 = std::__next_prime(v167);
                }
                else
                {
                  uint64_t v169 = 1 << -(char)__clz(v167 - 1);
                  if (v167 >= 2) {
                    unint64_t v167 = v169;
                  }
                }
                if (v94 <= v167) {
                  size_t v94 = v167;
                }
                if (v94 < v39) {
LABEL_227:
                }
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 80, v94);
              }
              unint64_t v39 = *(void *)(a5 + 88);
              if ((v39 & (v39 - 1)) != 0)
              {
                if (v39 <= v38) {
                  v38 %= v39;
                }
              }
              else
              {
                unint64_t v38 = (v39 - 1) & v38;
              }
            }
            uint64_t v360 = *v37;
            v361 = *(void **)(*v37 + 8 * v38);
            if (v361)
            {
              void *v85 = *v361;
            }
            else
            {
              void *v85 = *v88;
              *unsigned __int16 v88 = v85;
              *(void *)(v360 + 8 * v38) = v88;
              if (!*v85)
              {
LABEL_671:
                ++*(void *)(a5 + 104);
LABEL_672:
                int v363 = *v7;
                v365 = (char *)v85[4];
                unint64_t v364 = v85[5];
                if ((unint64_t)v365 < v364)
                {
                  *(_DWORD *)v365 = v363;
                  *((_DWORD *)v365 + 1) = v36;
                  v366 = v365 + 8;
LABEL_919:
                  v85[4] = v366;
                  return 1;
                }
                v367 = (void **)(v85 + 3);
                v368 = (unsigned char *)v85[3];
                uint64_t v369 = (v365 - v368) >> 3;
                unint64_t v370 = v369 + 1;
                if ((unint64_t)(v369 + 1) >> 61) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v371 = v364 - (void)v368;
                if (v371 >> 2 > v370) {
                  unint64_t v370 = v371 >> 2;
                }
                if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v372 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v372 = v370;
                }
                if (v372)
                {
                  if (v372 >> 61) {
                    goto LABEL_964;
                  }
                  v373 = (char *)operator new(8 * v372);
                }
                else
                {
                  v373 = 0;
                }
                v374 = &v373[8 * v369];
                v375 = &v373[8 * v372];
                *(_DWORD *)v374 = v363;
                *((_DWORD *)v374 + 1) = v36;
                v366 = v374 + 8;
                if (v365 != v368)
                {
                  unint64_t v376 = v365 - v368 - 8;
                  if (v376 < 0x58) {
                    goto LABEL_974;
                  }
                  if ((unint64_t)(v368 - v373) < 0x20) {
                    goto LABEL_974;
                  }
                  uint64_t v377 = (v376 >> 3) + 1;
                  uint64_t v378 = 8 * (v377 & 0x3FFFFFFFFFFFFFFCLL);
                  v379 = &v365[-v378];
                  v374 -= v378;
                  v380 = &v373[8 * v369 - 16];
                  v381 = v365 - 16;
                  uint64_t v382 = v377 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v383 = *(_OWORD *)v381;
                    *((_OWORD *)v380 - 1) = *((_OWORD *)v381 - 1);
                    *(_OWORD *)v380 = v383;
                    v380 -= 32;
                    v381 -= 32;
                    v382 -= 4;
                  }
                  while (v382);
                  v365 = v379;
                  if (v377 != (v377 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_974:
                    do
                    {
                      uint64_t v384 = *((void *)v365 - 1);
                      v365 -= 8;
                      *((void *)v374 - 1) = v384;
                      v374 -= 8;
                    }
                    while (v365 != v368);
                  }
                  goto LABEL_807;
                }
LABEL_808:
                v85[3] = v374;
                v85[4] = v366;
                v85[5] = v375;
                if (!v365) {
                  goto LABEL_919;
                }
                v435 = v365;
LABEL_918:
                operator delete(v435);
                goto LABEL_919;
              }
              unint64_t v362 = *(void *)(*v85 + 8);
              if ((v39 & (v39 - 1)) != 0)
              {
                if (v362 >= v39) {
                  v362 %= v39;
                }
              }
              else
              {
                v362 &= v39 - 1;
              }
              v361 = (void *)(*v37 + 8 * v362);
            }
            void *v361 = v85;
            goto LABEL_671;
          }
        }
        unsigned int v85 = (void *)*v85;
        if (!v85) {
          goto LABEL_81;
        }
        continue;
      }
    case 4:
      unint64_t v41 = *((void *)this + 1);
      uint64_t v42 = *((void *)this + 2);
      unint64_t v43 = v42 + 2;
      if (!*((unsigned char *)this + 24)) {
        unint64_t v43 = v42 + 1;
      }
      if (v41 < v43) {
        return 0;
      }
      unint64_t v44 = v42 + 1;
      int v45 = *(unsigned __int8 *)(*(void *)this + v42);
      if (*((unsigned char *)this + 24))
      {
        if (v44 >= v41) {
          int v46 = 0;
        }
        else {
          int v46 = *(unsigned __int8 *)(*(void *)this + v44);
        }
        int v45 = (((v46 & (0xFFFF << (8 - *((unsigned char *)this + 24)))) >> (8
                                                                                                 - *((unsigned char *)this + 24))) | ((((1 << (8 - *((unsigned char *)this + 24))) - 1) & v45) << *((unsigned char *)this + 24)));
      }
      *((void *)this + 2) = v44;
      unsigned int v112 = (uint64_t *)(a5 + 200);
      unint64_t v113 = *a3;
      unint64_t v114 = *(void *)(a5 + 208);
      if (!v114) {
        goto LABEL_178;
      }
      uint8x8_t v115 = (uint8x8_t)vcnt_s8((int8x8_t)v114);
      v115.i16[0] = vaddlv_u8(v115);
      if (v115.u32[0] > 1uLL)
      {
        unint64_t v5 = *a3;
        if (v114 <= v113) {
          unint64_t v5 = v113 % v114;
        }
      }
      else
      {
        unint64_t v5 = (v114 - 1) & v113;
      }
      int8x16_t v141 = *(void ***)(*v112 + 8 * v5);
      if (!v141) {
        goto LABEL_178;
      }
      unsigned int v85 = *v141;
      if (!*v141) {
        goto LABEL_178;
      }
      if (v115.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v143 = v85[1];
          if (v143 == v113)
          {
            if (*((unsigned __int8 *)v85 + 16) == v113) {
              goto LABEL_753;
            }
          }
          else if ((v143 & (v114 - 1)) != v5)
          {
            goto LABEL_178;
          }
          unsigned int v85 = (void *)*v85;
          if (!v85) {
            goto LABEL_178;
          }
        }
      }
      while (2)
      {
        unint64_t v142 = v85[1];
        if (v142 == v113)
        {
          if (*((unsigned __int8 *)v85 + 16) == v113) {
            goto LABEL_753;
          }
        }
        else
        {
          if (v142 >= v114) {
            v142 %= v114;
          }
          if (v142 != v5)
          {
LABEL_178:
            unint64_t v144 = (void *)(a5 + 216);
            unsigned int v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 216);
            void *v85 = 0;
            v85[1] = v113;
            *((unsigned char *)v85 + 16) = v113;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            float v145 = (float)(unint64_t)(*(void *)(a5 + 224) + 1);
            float v146 = *(float *)(a5 + 232);
            if (v114 && (float)(v146 * (float)v114) >= v145)
            {
              unint64_t v113 = v5;
            }
            else
            {
              BOOL v147 = 1;
              if (v114 >= 3) {
                BOOL v147 = (v114 & (v114 - 1)) != 0;
              }
              unint64_t v148 = v147 | (2 * v114);
              unint64_t v149 = vcvtps_u32_f32(v145 / v146);
              if (v148 <= v149) {
                size_t v150 = v149;
              }
              else {
                size_t v150 = v148;
              }
              if (v150 == 1)
              {
                size_t v150 = 2;
              }
              else if ((v150 & (v150 - 1)) != 0)
              {
                size_t v150 = std::__next_prime(v150);
                unint64_t v114 = *(void *)(a5 + 208);
              }
              if (v150 > v114) {
                goto LABEL_488;
              }
              if (v150 < v114)
              {
                unint64_t v296 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 224) / *(float *)(a5 + 232));
                if (v114 < 3
                  || (uint8x8_t v297 = (uint8x8_t)vcnt_s8((int8x8_t)v114), v297.i16[0] = vaddlv_u8(v297), v297.u32[0] > 1uLL))
                {
                  unint64_t v296 = std::__next_prime(v296);
                }
                else
                {
                  uint64_t v298 = 1 << -(char)__clz(v296 - 1);
                  if (v296 >= 2) {
                    unint64_t v296 = v298;
                  }
                }
                if (v150 <= v296) {
                  size_t v150 = v296;
                }
                if (v150 < v114) {
LABEL_488:
                }
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 200, v150);
              }
              unint64_t v114 = *(void *)(a5 + 208);
              if ((v114 & (v114 - 1)) != 0)
              {
                if (v114 <= v113) {
                  v113 %= v114;
                }
              }
              else
              {
                unint64_t v113 = (v114 - 1) & v113;
              }
            }
            uint64_t v401 = *v112;
            v402 = *(void **)(*v112 + 8 * v113);
            if (v402)
            {
              void *v85 = *v402;
            }
            else
            {
              void *v85 = *v144;
              *unint64_t v144 = v85;
              *(void *)(v401 + 8 * v113) = v144;
              if (!*v85)
              {
LABEL_752:
                ++*(void *)(a5 + 224);
LABEL_753:
                BOOL v404 = v45 != 0;
                unsigned __int16 v405 = *v7;
                unint64_t v390 = v85[4];
                unint64_t v406 = v85[5];
                if (v390 < v406)
                {
                  *(_WORD *)unint64_t v390 = v405;
                  *(unsigned char *)(v390 + 2) = v404;
                  v366 = (char *)(v390 + 3);
                  goto LABEL_919;
                }
                v391 = v85 + 3;
                uint64_t v407 = v85[3];
                unint64_t v408 = 0xAAAAAAAAAAAAAAABLL * (v390 - v407) + 1;
                if (v408 >= 0x5555555555555556) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v409 = 0xAAAAAAAAAAAAAAABLL * (v406 - v407);
                if (2 * v409 > v408) {
                  unint64_t v408 = 2 * v409;
                }
                if (v409 >= 0x2AAAAAAAAAAAAAAALL) {
                  unint64_t v410 = 0x5555555555555555;
                }
                else {
                  unint64_t v410 = v408;
                }
                if (v410)
                {
                  if (v410 >= 0x5555555555555556) {
                    goto LABEL_964;
                  }
                  v411 = (char *)operator new(3 * v410);
                }
                else
                {
                  v411 = 0;
                }
                v397 = &v411[v390 - v407];
                v398 = &v411[3 * v410];
                *(_WORD *)v397 = v405;
                v397[2] = v404;
                v366 = v397 + 3;
                if (v390 == v407) {
                  goto LABEL_768;
                }
                do
                {
                  __int16 v412 = *(_WORD *)(v390 - 3);
                  v390 -= 3;
                  char v413 = *(unsigned char *)(v390 + 2);
                  *(_WORD *)(v397 - 3) = v412;
                  v397 -= 3;
                  v397[2] = v413;
                }
                while (v390 != v407);
LABEL_767:
                unint64_t v390 = *v391;
LABEL_768:
                v85[3] = v397;
                v85[4] = v366;
                v85[5] = v398;
                if (!v390) {
                  goto LABEL_919;
                }
LABEL_917:
                v435 = (void *)v390;
                goto LABEL_918;
              }
              unint64_t v403 = *(void *)(*v85 + 8);
              if ((v114 & (v114 - 1)) != 0)
              {
                if (v403 >= v114) {
                  v403 %= v114;
                }
              }
              else
              {
                v403 &= v114 - 1;
              }
              v402 = (void *)(*v112 + 8 * v403);
            }
            void *v402 = v85;
            goto LABEL_752;
          }
        }
        unsigned int v85 = (void *)*v85;
        if (!v85) {
          goto LABEL_178;
        }
        continue;
      }
    case 5:
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501) {
        return 0;
      }
      uint64_t v47 = HIDWORD(v501);
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501) {
        return 0;
      }
      uint64_t v48 = HIDWORD(v501);
      uint64_t v49 = (uint64_t *)(a5 + 240);
      unint64_t v50 = *a3;
      unint64_t v51 = *(void *)(a5 + 248);
      if (!v51) {
        goto LABEL_471;
      }
      uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        unint64_t v5 = *a3;
        if (v51 <= v50) {
          unint64_t v5 = v50 % v51;
        }
      }
      else
      {
        unint64_t v5 = (v51 - 1) & v50;
      }
      long long v283 = *(void ***)(*v49 + 8 * v5);
      if (!v283) {
        goto LABEL_471;
      }
      unsigned int v85 = *v283;
      if (!*v283) {
        goto LABEL_471;
      }
      if (v52.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v285 = v85[1];
          if (v285 == v50)
          {
            if (*((unsigned __int8 *)v85 + 16) == v50) {
              goto LABEL_828;
            }
          }
          else if ((v285 & (v51 - 1)) != v5)
          {
            goto LABEL_471;
          }
          unsigned int v85 = (void *)*v85;
          if (!v85) {
            goto LABEL_471;
          }
        }
      }
      while (2)
      {
        unint64_t v284 = v85[1];
        if (v284 == v50)
        {
          if (*((unsigned __int8 *)v85 + 16) == v50) {
            goto LABEL_828;
          }
        }
        else
        {
          if (v284 >= v51) {
            v284 %= v51;
          }
          if (v284 != v5)
          {
LABEL_471:
            long long v286 = (void *)(a5 + 256);
            unsigned int v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 256);
            void *v85 = 0;
            v85[1] = v50;
            *((unsigned char *)v85 + 16) = v50;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            float v287 = (float)(unint64_t)(*(void *)(a5 + 264) + 1);
            float v288 = *(float *)(a5 + 272);
            if (v51 && (float)(v288 * (float)v51) >= v287)
            {
              unint64_t v50 = v5;
            }
            else
            {
              BOOL v289 = 1;
              if (v51 >= 3) {
                BOOL v289 = (v51 & (v51 - 1)) != 0;
              }
              unint64_t v290 = v289 | (2 * v51);
              unint64_t v291 = vcvtps_u32_f32(v287 / v288);
              if (v290 <= v291) {
                size_t v292 = v291;
              }
              else {
                size_t v292 = v290;
              }
              if (v292 == 1)
              {
                size_t v292 = 2;
              }
              else if ((v292 & (v292 - 1)) != 0)
              {
                size_t v292 = std::__next_prime(v292);
                unint64_t v51 = *(void *)(a5 + 248);
              }
              if (v292 > v51) {
                goto LABEL_515;
              }
              if (v292 < v51)
              {
                unint64_t v302 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 264) / *(float *)(a5 + 272));
                if (v51 < 3
                  || (uint8x8_t v303 = (uint8x8_t)vcnt_s8((int8x8_t)v51), v303.i16[0] = vaddlv_u8(v303), v303.u32[0] > 1uLL))
                {
                  unint64_t v302 = std::__next_prime(v302);
                }
                else
                {
                  uint64_t v304 = 1 << -(char)__clz(v302 - 1);
                  if (v302 >= 2) {
                    unint64_t v302 = v304;
                  }
                }
                if (v292 <= v302) {
                  size_t v292 = v302;
                }
                if (v292 < v51) {
LABEL_515:
                }
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 240, v292);
              }
              unint64_t v51 = *(void *)(a5 + 248);
              if ((v51 & (v51 - 1)) != 0)
              {
                if (v51 <= v50) {
                  v50 %= v51;
                }
              }
              else
              {
                unint64_t v50 = (v51 - 1) & v50;
              }
            }
            uint64_t v436 = *v49;
            v437 = *(void **)(*v49 + 8 * v50);
            if (v437)
            {
              void *v85 = *v437;
            }
            else
            {
              void *v85 = *v286;
              *long long v286 = v85;
              *(void *)(v436 + 8 * v50) = v286;
              if (!*v85)
              {
LABEL_827:
                ++*(void *)(a5 + 264);
LABEL_828:
                unsigned __int16 v439 = *v7;
                unint64_t v390 = v85[4];
                unint64_t v440 = v85[5];
                if (v390 < v440)
                {
                  *(_WORD *)unint64_t v390 = v439;
                  *(void *)(v390 + 4) = v47 | (v48 << 32);
                  v366 = (char *)(v390 + 12);
                  goto LABEL_919;
                }
                v441 = v85 + 3;
                uint64_t v442 = v85[3];
                unint64_t v443 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v390 - v442) >> 2) + 1;
                if (v443 > 0x1555555555555555) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v444 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v440 - v442) >> 2);
                if (2 * v444 > v443) {
                  unint64_t v443 = 2 * v444;
                }
                if (v444 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v445 = 0x1555555555555555;
                }
                else {
                  unint64_t v445 = v443;
                }
                if (v445)
                {
                  if (v445 > 0x1555555555555555) {
                    goto LABEL_964;
                  }
                  v446 = (char *)operator new(12 * v445);
                }
                else
                {
                  v446 = 0;
                }
                v447 = &v446[4 * ((uint64_t)(v390 - v442) >> 2)];
                v448 = &v446[12 * v445];
                *(_WORD *)v447 = v439;
                *(void *)(v447 + 4) = v47 | (v48 << 32);
                v366 = v447 + 12;
                if (v390 != v442)
                {
                  do
                  {
                    uint64_t v449 = *(void *)(v390 - 12);
                    v390 -= 12;
                    int v450 = *(_DWORD *)(v390 + 8);
                    *(void *)(v447 - 12) = v449;
                    v447 -= 12;
                    *((_DWORD *)v447 + 2) = v450;
                  }
                  while (v390 != v442);
LABEL_915:
                  unint64_t v390 = *v441;
                  goto LABEL_916;
                }
                goto LABEL_916;
              }
              unint64_t v438 = *(void *)(*v85 + 8);
              if ((v51 & (v51 - 1)) != 0)
              {
                if (v438 >= v51) {
                  v438 %= v51;
                }
              }
              else
              {
                v438 &= v51 - 1;
              }
              v437 = (void *)(*v49 + 8 * v438);
            }
            void *v437 = v85;
            goto LABEL_827;
          }
        }
        unsigned int v85 = (void *)*v85;
        if (!v85) {
          goto LABEL_471;
        }
        continue;
      }
    case 6:
      *(_OWORD *)v507 = 0u;
      *(_OWORD *)v508 = 0u;
      float v509 = 1.0;
      unint64_t v54 = *((void *)this + 1);
      uint64_t v53 = *((void *)this + 2);
      unint64_t v55 = v53 + 2;
      if (!*((unsigned char *)this + 24)) {
        unint64_t v55 = v53 + 1;
      }
      if (v54 < v55) {
        goto LABEL_38;
      }
      unint64_t v78 = v53 + 1;
      unsigned int v79 = *(unsigned __int8 *)(*(void *)this + v53);
      if (*((unsigned char *)this + 24))
      {
        if (v78 >= v54) {
          int v80 = 0;
        }
        else {
          int v80 = *(unsigned __int8 *)(*(void *)this + v78);
        }
        unsigned int v79 = (((v80 & (0xFFFF << (8 - *((unsigned char *)this + 24)))) >> (8
                                                                                                 - *((unsigned char *)this + 24))) | ((((1 << (8 - *((unsigned char *)this + 24))) - 1) & v79) << *((unsigned char *)this + 24)));
      }
      *((void *)this + 2) = v78;
      unint64_t v119 = v79;
      if (v79 == 1)
      {
        size_t v120 = 2;
LABEL_237:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>((uint64_t)v507, v120);
        goto LABEL_238;
      }
      if ((v79 & (v79 - 1)) != 0)
      {
        size_t v120 = std::__next_prime(v79);
        unint64_t v121 = v507[1];
      }
      else
      {
        unint64_t v121 = 0;
        size_t v120 = v79;
      }
      if (v120 > (unint64_t)v121) {
        goto LABEL_237;
      }
      if (v120 < (unint64_t)v121)
      {
        unint64_t v277 = vcvtps_u32_f32((float)(unint64_t)v508[1] / v509);
        if ((unint64_t)v121 < 3
          || (uint8x8_t v278 = (uint8x8_t)vcnt_s8((int8x8_t)v121), v278.i16[0] = vaddlv_u8(v278), v278.u32[0] > 1uLL))
        {
          unint64_t v277 = std::__next_prime(v277);
        }
        else
        {
          uint64_t v279 = 1 << -(char)__clz(v277 - 1);
          if (v277 >= 2) {
            unint64_t v277 = v279;
          }
        }
        if (v120 <= v277) {
          size_t v120 = v277;
        }
        if (v120 < (unint64_t)v121) {
          goto LABEL_237;
        }
      }
LABEL_238:
      if (!v119)
      {
LABEL_338:
        unint64_t v221 = (uint64_t *)(a5 + 280);
        unint64_t v222 = *a3;
        unint64_t v223 = *(void *)(a5 + 288);
        if (v223)
        {
          uint8x8_t v224 = (uint8x8_t)vcnt_s8((int8x8_t)v223);
          v224.i16[0] = vaddlv_u8(v224);
          if (v224.u32[0] > 1uLL)
          {
            unint64_t v119 = *a3;
            if (v223 <= v222) {
              unint64_t v119 = v222 % v223;
            }
          }
          else
          {
            unint64_t v119 = (v223 - 1) & v222;
          }
          long long v334 = *(void ***)(*v221 + 8 * v119);
          if (v334)
          {
            uint64_t v335 = (unsigned __int8 *)*v334;
            if (*v334)
            {
              if (v224.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v337 = *((void *)v335 + 1);
                  if (v337 == v222)
                  {
                    if (v335[16] == v222) {
                      goto LABEL_938;
                    }
                  }
                  else if ((v337 & (v223 - 1)) != v119)
                  {
                    goto LABEL_607;
                  }
                  uint64_t v335 = *(unsigned __int8 **)v335;
                  if (!v335) {
                    goto LABEL_607;
                  }
                }
              }
              do
              {
                unint64_t v336 = *((void *)v335 + 1);
                if (v336 == v222)
                {
                  if (v335[16] == v222) {
                    goto LABEL_938;
                  }
                }
                else
                {
                  if (v336 >= v223) {
                    v336 %= v223;
                  }
                  if (v336 != v119) {
                    break;
                  }
                }
                uint64_t v335 = *(unsigned __int8 **)v335;
              }
              while (v335);
            }
          }
        }
LABEL_607:
        uint64_t v335 = (unsigned __int8 *)operator new(0x30uLL);
        long long v338 = (void *)(a5 + 296);
        v501 = v335;
        v502 = (void *)(a5 + 296);
        *(void *)uint64_t v335 = 0;
        *((void *)v335 + 1) = v222;
        v335[16] = v222;
        *((void *)v335 + 4) = 0;
        *((void *)v335 + 5) = 0;
        *((void *)v335 + 3) = 0;
        LOBYTE(v503) = 1;
        float v339 = (float)(unint64_t)(*(void *)(a5 + 304) + 1);
        float v340 = *(float *)(a5 + 312);
        if (v223 && (float)(v340 * (float)v223) >= v339)
        {
          unint64_t v222 = v119;
        }
        else
        {
          BOOL v341 = 1;
          if (v223 >= 3) {
            BOOL v341 = (v223 & (v223 - 1)) != 0;
          }
          unint64_t v342 = v341 | (2 * v223);
          unint64_t v343 = vcvtps_u32_f32(v339 / v340);
          if (v342 <= v343) {
            size_t v344 = v343;
          }
          else {
            size_t v344 = v342;
          }
          if (v344 == 1)
          {
            size_t v344 = 2;
          }
          else if ((v344 & (v344 - 1)) != 0)
          {
            size_t v344 = std::__next_prime(v344);
            unint64_t v223 = *(void *)(a5 + 288);
          }
          if (v344 > v223) {
            goto LABEL_640;
          }
          if (v344 < v223)
          {
            unint64_t v351 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 304) / *(float *)(a5 + 312));
            if (v223 < 3
              || (uint8x8_t v352 = (uint8x8_t)vcnt_s8((int8x8_t)v223), v352.i16[0] = vaddlv_u8(v352), v352.u32[0] > 1uLL))
            {
              unint64_t v351 = std::__next_prime(v351);
            }
            else
            {
              uint64_t v353 = 1 << -(char)__clz(v351 - 1);
              if (v351 >= 2) {
                unint64_t v351 = v353;
              }
            }
            if (v344 <= v351) {
              size_t v344 = v351;
            }
            if (v344 < v223) {
LABEL_640:
            }
              std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 280, v344);
          }
          unint64_t v223 = *(void *)(a5 + 288);
          if ((v223 & (v223 - 1)) != 0)
          {
            if (v223 <= v222) {
              v222 %= v223;
            }
          }
          else
          {
            unint64_t v222 = (v223 - 1) & v222;
          }
        }
        uint64_t v479 = *v221;
        v480 = *(void **)(*v221 + 8 * v222);
        if (v480)
        {
          *(void *)uint64_t v335 = *v480;
        }
        else
        {
          *(void *)uint64_t v335 = *v338;
          *long long v338 = v335;
          *(void *)(v479 + 8 * v222) = v338;
          if (!*(void *)v335)
          {
LABEL_937:
            ++*(void *)(a5 + 304);
LABEL_938:
            LOWORD(v501) = *v7;
            v482 = v507[0];
            unint64_t v483 = (unint64_t)v507[1];
            v507[0] = 0;
            v507[1] = 0;
            v502 = v482;
            unint64_t v503 = v483;
            __p = v508[0];
            v505 = v508[1];
            float v506 = v509;
            if (v508[1])
            {
              unint64_t v484 = *((void *)v508[0] + 1);
              if ((v483 & (v483 - 1)) != 0)
              {
                if (v484 >= v483) {
                  v484 %= v483;
                }
              }
              else
              {
                v484 &= v483 - 1;
              }
              *((void *)v482 + v484) = &__p;
              v508[0] = 0;
              v508[1] = 0;
            }
            unint64_t v485 = *((void *)v335 + 4);
            if (v485 >= *((void *)v335 + 5))
            {
              v491 = std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__push_back_slow_path<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>((void **)v335 + 3, (uint64_t)&v501);
            }
            else
            {
              *(_WORD *)unint64_t v485 = (_WORD)v501;
              v486 = v502;
              v502 = 0;
              *(void *)(v485 + 8) = v486;
              *(void *)(v485 + 16) = v503;
              unint64_t v503 = 0;
              v487 = __p;
              *(void *)(v485 + 24) = __p;
              v488 = v505;
              *(void *)(v485 + 32) = v505;
              *(float *)(v485 + 40) = v506;
              if (v488)
              {
                unint64_t v489 = v487[1];
                unint64_t v490 = *(void *)(v485 + 16);
                if ((v490 & (v490 - 1)) != 0)
                {
                  if (v489 >= v490) {
                    v489 %= v490;
                  }
                }
                else
                {
                  v489 &= v490 - 1;
                }
                v486[v489] = v485 + 24;
                __p = 0;
                v505 = 0;
              }
              v491 = (char *)(v485 + 48);
            }
            *((void *)v335 + 4) = v491;
            v492 = __p;
            if (__p)
            {
              do
              {
                v493 = (void *)*v492;
                operator delete(v492);
                v492 = v493;
              }
              while (v493);
            }
            v494 = v502;
            v502 = 0;
            if (v494) {
              operator delete(v494);
            }
            char v56 = 1;
            unsigned int v57 = v508[0];
            if (v508[0]) {
              goto LABEL_958;
            }
            goto LABEL_959;
          }
          unint64_t v481 = *(void *)(*(void *)v335 + 8);
          if ((v223 & (v223 - 1)) != 0)
          {
            if (v481 >= v223) {
              v481 %= v223;
            }
          }
          else
          {
            v481 &= v223 - 1;
          }
          v480 = (void *)(*v221 + 8 * v481);
        }
        void *v480 = v335;
        goto LABEL_937;
      }
      unsigned int v170 = 0;
      unsigned int v500 = v119;
      while (1)
      {
        geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
        if (!(_BYTE)v501) {
          break;
        }
        char v171 = *((unsigned char *)this + 24);
        BOOL v172 = v171 != 0;
        unint64_t v173 = *((void *)this + 1);
        uint64_t v174 = *((void *)this + 2);
        unint64_t v175 = v174 + 2;
        if (!v171) {
          unint64_t v175 = v174 + 1;
        }
        if (v173 < v175) {
          break;
        }
        float v176 = *((float *)&v501 + 1);
        unint64_t v177 = v174 + 1;
        uint64_t v178 = *(void *)this;
        unsigned int v179 = *(unsigned __int8 *)(*(void *)this + v174);
        if (*((unsigned char *)this + 24))
        {
          if (v177 >= v173) {
            int v180 = 0;
          }
          else {
            int v180 = *(unsigned __int8 *)(v178 + v177);
          }
          *((void *)this + 2) = v177;
          unint64_t v187 = v174 + 2;
          if (v173 < v174 + 2 + v172) {
            break;
          }
          int v188 = v187 >= v173 ? 0 : *(unsigned __int8 *)(v178 + v187);
          int v189 = *(unsigned __int8 *)(v178 + v177);
          *((void *)this + 2) = v187;
          unint64_t v190 = v174 + 3;
          if (v173 < v174 + 3 + v172) {
            break;
          }
          int v191 = v190 >= v173 ? 0 : *(unsigned __int8 *)(v178 + v190);
          int v192 = *(unsigned __int8 *)(v178 + v187);
          *((void *)this + 2) = v190;
          unint64_t v185 = v174 + 4;
          if (v173 < v185 + v172) {
            break;
          }
          if (v185 >= v173) {
            int v193 = 0;
          }
          else {
            int v193 = *(unsigned __int8 *)(v178 + v185);
          }
          int v194 = (1 << (8 - v171)) + 255;
          int v195 = 0xFFFF << (8 - v171);
          unsigned int v179 = ((v180 & v195) >> (8 - v171)) | ((v194 & v179) << v171);
          unsigned int v182 = ((v188 & v195) >> (8 - v171)) | ((v194 & v189) << v171);
          unint64_t v184 = ((v191 & v195) >> (8 - v171)) | ((v194 & v192) << v171);
          unsigned int v186 = ((v193 & v195) >> (8 - v171)) | ((((1 << (8 - v171)) - 1) & *(unsigned char *)(v178 + v190)) << v171);
        }
        else
        {
          *((void *)this + 2) = v177;
          uint64_t v181 = v174 + 2;
          if (v173 < v174 + 2 + v172) {
            break;
          }
          LOBYTE(v182) = *(unsigned char *)(v178 + v177);
          *((void *)this + 2) = v181;
          uint64_t v183 = v174 + 3;
          if (v173 < v174 + 3 + v172) {
            break;
          }
          unint64_t v184 = *(unsigned __int8 *)(v178 + v181);
          *((void *)this + 2) = v183;
          unint64_t v185 = v174 + 4;
          if (v173 < v185 + v172) {
            break;
          }
          LOBYTE(v186) = *(unsigned char *)(v178 + v183);
        }
        *((void *)this + 2) = v185;
        float v196 = (float)v179;
        if ((float)(v196 * 0.0039216) >= 0.04045)
        {
          float v197 = powf((float)(v196 * 0.0037171) + 0.052133, 2.4);
          float v198 = (float)v182;
          if ((float)(v198 * 0.0039216) >= 0.04045)
          {
LABEL_267:
            float v199 = powf((float)(v198 * 0.0037171) + 0.052133, 2.4);
            goto LABEL_270;
          }
        }
        else
        {
          float v197 = v196 * 0.00030353;
          float v198 = (float)v182;
          if ((float)(v198 * 0.0039216) >= 0.04045) {
            goto LABEL_267;
          }
        }
        float v199 = v198 * 0.00030353;
LABEL_270:
        float v200 = (float)v184;
        unint64_t v119 = (unint64_t)v7;
        if ((float)(v200 * 0.0039216) >= 0.04045)
        {
          float v201 = powf((float)(v200 * 0.0037171) + 0.052133, 2.4);
          if (v176 == 0.0) {
            unint64_t v202 = 0;
          }
          else {
            unint64_t v202 = LODWORD(v176);
          }
          unint64_t v203 = (unint64_t)v507[1];
          if (!v507[1]) {
            goto LABEL_299;
          }
        }
        else
        {
          float v201 = v200 * 0.00030353;
          if (v176 == 0.0) {
            unint64_t v202 = 0;
          }
          else {
            unint64_t v202 = LODWORD(v176);
          }
          unint64_t v203 = (unint64_t)v507[1];
          if (!v507[1]) {
            goto LABEL_299;
          }
        }
        uint8x8_t v204 = (uint8x8_t)vcnt_s8((int8x8_t)v203);
        v204.i16[0] = vaddlv_u8(v204);
        if (v204.u32[0] > 1uLL)
        {
          unint64_t v184 = v202;
          if (v202 >= v203) {
            unint64_t v184 = v202 % v203;
          }
        }
        else
        {
          unint64_t v184 = (v203 - 1) & v202;
        }
        v205 = (float **)*((void *)v507[0] + v184);
        if (v205)
        {
          v206 = *v205;
          if (v206)
          {
            if (v204.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v208 = *((void *)v206 + 1);
                if (v208 == v202)
                {
                  if (v206[4] == v176) {
                    goto LABEL_337;
                  }
                }
                else if ((v208 & (v203 - 1)) != v184)
                {
                  goto LABEL_299;
                }
                v206 = *(float **)v206;
                if (!v206) {
                  goto LABEL_299;
                }
              }
            }
            do
            {
              unint64_t v207 = *((void *)v206 + 1);
              if (v207 == v202)
              {
                if (v206[4] == v176) {
                  goto LABEL_337;
                }
              }
              else
              {
                if (v207 >= v203) {
                  v207 %= v203;
                }
                if (v207 != v184) {
                  break;
                }
              }
              v206 = *(float **)v206;
            }
            while (v206);
          }
        }
LABEL_299:
        size_t v209 = (float *)operator new(0x28uLL);
        *(void *)size_t v209 = 0;
        *((void *)v209 + 1) = v202;
        v209[4] = v176;
        v209[5] = v197;
        v209[6] = v199;
        v209[7] = v201;
        v209[8] = (float)v186 * 0.0039216;
        float v210 = (float)((unint64_t)v508[1] + 1);
        if (!v203 || (float)(v509 * (float)v203) < v210)
        {
          BOOL v211 = (v203 & (v203 - 1)) != 0;
          if (v203 < 3) {
            BOOL v211 = 1;
          }
          unint64_t v212 = v211 | (2 * v203);
          unint64_t v213 = vcvtps_u32_f32(v210 / v509);
          if (v212 <= v213) {
            size_t v214 = v213;
          }
          else {
            size_t v214 = v212;
          }
          if (v214 == 1)
          {
            size_t v214 = 2;
          }
          else if ((v214 & (v214 - 1)) != 0)
          {
            size_t v214 = std::__next_prime(v214);
            unint64_t v203 = (unint64_t)v507[1];
          }
          if (v214 > v203) {
            goto LABEL_311;
          }
          if (v214 < v203)
          {
            unint64_t v215 = vcvtps_u32_f32((float)(unint64_t)v508[1] / v509);
            if (v203 < 3
              || (uint8x8_t v216 = (uint8x8_t)vcnt_s8((int8x8_t)v203), v216.i16[0] = vaddlv_u8(v216), v216.u32[0] > 1uLL))
            {
              unint64_t v215 = std::__next_prime(v215);
            }
            else
            {
              uint64_t v217 = 1 << -(char)__clz(v215 - 1);
              if (v215 >= 2) {
                unint64_t v215 = v217;
              }
            }
            if (v214 <= v215) {
              size_t v214 = v215;
            }
            if (v214 < v203) {
LABEL_311:
            }
              std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>((uint64_t)v507, v214);
          }
          unint64_t v203 = (unint64_t)v507[1];
          if (((unint64_t)v507[1] & ((unint64_t)v507[1] - 1)) != 0)
          {
            if ((void *)v202 >= v507[1]) {
              unint64_t v184 = v202 % (unint64_t)v507[1];
            }
            else {
              unint64_t v184 = v202;
            }
          }
          else
          {
            unint64_t v184 = (LODWORD(v507[1]) - 1) & v202;
          }
        }
        BOOL v218 = v507[0];
        unint64_t v219 = (float **)*((void *)v507[0] + v184);
        if (v219)
        {
          *(void *)size_t v209 = *v219;
        }
        else
        {
          *(void **)size_t v209 = v508[0];
          v508[0] = v209;
          v218[v184] = v508;
          if (!*(void *)v209) {
            goto LABEL_336;
          }
          unint64_t v220 = *(void *)(*(void *)v209 + 8);
          if ((v203 & (v203 - 1)) != 0)
          {
            if (v220 >= v203) {
              v220 %= v203;
            }
          }
          else
          {
            v220 &= v203 - 1;
          }
          unint64_t v219 = (float **)((char *)v507[0] + 8 * v220);
        }
        *unint64_t v219 = v209;
LABEL_336:
        ++v508[1];
LABEL_337:
        ++v170;
        int v7 = (unsigned __int16 *)v119;
        if (v170 >= v500) {
          goto LABEL_338;
        }
      }
LABEL_38:
      char v56 = 0;
      unsigned int v57 = v508[0];
      if (!v508[0]) {
        goto LABEL_959;
      }
      do
      {
LABEL_958:
        v495 = (void *)*v57;
        operator delete(v57);
        unsigned int v57 = v495;
      }
      while (v495);
LABEL_959:
      v496 = v507[0];
      v507[0] = 0;
      if (v496) {
        operator delete(v496);
      }
      return (v56 & 1) != 0;
    case 7:
      int v58 = *((unsigned __int8 *)this + 24);
      BOOL v59 = *((unsigned char *)this + 24) != 0;
      unint64_t v60 = *((void *)this + 1);
      uint64_t v61 = *((void *)this + 2);
      unint64_t v62 = v61 + 2;
      if (!*((unsigned char *)this + 24)) {
        unint64_t v62 = v61 + 1;
      }
      if (v60 < v62) {
        return 0;
      }
      unint64_t v63 = v61 + 1;
      uint64_t v64 = *(void *)this;
      unsigned int v65 = *(unsigned __int8 *)(*(void *)this + v61);
      if (*((unsigned char *)this + 24))
      {
        if (v63 >= v60) {
          int v66 = 0;
        }
        else {
          int v66 = *(unsigned __int8 *)(v64 + v63);
        }
        unsigned int v65 = ((v66 & (0xFFFF << (8 - v58))) >> (8 - v58)) | ((((1 << (8 - v58)) - 1) & v65) << v58);
      }
      *((void *)this + 2) = v63;
      unint64_t v116 = v61 + 2;
      if (v60 < v61 + 2 + v59) {
        return 0;
      }
      unsigned int v117 = *(unsigned __int8 *)(v64 + v63);
      if (v58)
      {
        if (v116 >= v60) {
          int v118 = 0;
        }
        else {
          int v118 = *(unsigned __int8 *)(v64 + v116);
        }
        unsigned int v117 = ((v118 & (0xFFFF << (8 - v58))) >> (8 - v58)) | ((((1 << (8 - v58)) - 1) & v117) << v58);
      }
      *((void *)this + 2) = v116;
      unint64_t v308 = v61 + 3;
      if (v60 < v308 + v59) {
        return 0;
      }
      float v309 = (float)v65 * 0.0039216;
      float v310 = (float)v117 * 0.0039216;
      unsigned int v311 = *(unsigned __int8 *)(v64 + v116);
      if (v58)
      {
        if (v308 >= v60) {
          int v312 = 0;
        }
        else {
          int v312 = *(unsigned __int8 *)(v64 + v308);
        }
        unsigned int v311 = ((v312 & (0xFFFF << (8 - v58))) >> (8 - v58)) | ((((1 << (8 - v58)) - 1) & v311) << v58);
      }
      *((void *)this + 2) = v308;
      *(float *)&unsigned int v358 = (float)v311 * 0.0039216;
      v359 = (void **)std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a5 + 40, *a3, a3);
      LOWORD(v501) = *v7;
      *((float *)&v501 + 1) = v309;
      v502 = (void *)__PAIR64__(v358, LODWORD(v310));
      std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>::push_back[abi:ne180100](v359 + 3, (uint64_t)&v501);
      return 1;
    case 8:
      *(_OWORD *)v507 = 0u;
      *(_OWORD *)v508 = 0u;
      float v509 = 1.0;
      unint64_t v68 = *((void *)this + 1);
      uint64_t v67 = *((void *)this + 2);
      unint64_t v69 = v67 + 2;
      if (!*((unsigned char *)this + 24)) {
        unint64_t v69 = v67 + 1;
      }
      if (v68 < v69) {
        goto LABEL_49;
      }
      unint64_t v81 = v67 + 1;
      unsigned int v82 = *(unsigned __int8 *)(*(void *)this + v67);
      if (*((unsigned char *)this + 24))
      {
        if (v81 >= v68) {
          int v83 = 0;
        }
        else {
          int v83 = *(unsigned __int8 *)(*(void *)this + v81);
        }
        unsigned int v82 = (((v83 & (0xFFFF << (8 - *((unsigned char *)this + 24)))) >> (8
                                                                                                 - *((unsigned char *)this + 24))) | ((((1 << (8 - *((unsigned char *)this + 24))) - 1) & v82) << *((unsigned char *)this + 24)));
      }
      *((void *)this + 2) = v81;
      unint64_t v122 = v82;
      if (v82 == 1)
      {
        size_t v123 = 2;
LABEL_343:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>((uint64_t)v507, v123);
        goto LABEL_344;
      }
      if ((v82 & (v82 - 1)) != 0)
      {
        size_t v123 = std::__next_prime(v82);
        unint64_t v124 = v507[1];
      }
      else
      {
        unint64_t v124 = 0;
        size_t v123 = v82;
      }
      if (v123 > (unint64_t)v124) {
        goto LABEL_343;
      }
      if (v123 < (unint64_t)v124)
      {
        unint64_t v280 = vcvtps_u32_f32((float)(unint64_t)v508[1] / v509);
        if ((unint64_t)v124 < 3
          || (uint8x8_t v281 = (uint8x8_t)vcnt_s8((int8x8_t)v124), v281.i16[0] = vaddlv_u8(v281), v281.u32[0] > 1uLL))
        {
          unint64_t v280 = std::__next_prime(v280);
        }
        else
        {
          uint64_t v282 = 1 << -(char)__clz(v280 - 1);
          if (v280 >= 2) {
            unint64_t v280 = v282;
          }
        }
        if (v123 <= v280) {
          size_t v123 = v280;
        }
        if (v123 < (unint64_t)v124) {
          goto LABEL_343;
        }
      }
LABEL_344:
      if (v122)
      {
        unsigned int v225 = 0;
        uint64_t v226 = 1025879765;
        do
        {
          geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
          if (!(_BYTE)v501) {
            goto LABEL_49;
          }
          char v227 = *((unsigned char *)this + 24);
          BOOL v228 = v227 != 0;
          unint64_t v229 = *((void *)this + 1);
          uint64_t v230 = *((void *)this + 2);
          unint64_t v231 = v230 + 2;
          if (!v227) {
            unint64_t v231 = v230 + 1;
          }
          if (v229 < v231)
          {
LABEL_49:
            char v56 = 0;
            unsigned int v70 = v508[0];
            if (!v508[0]) {
              goto LABEL_959;
            }
            goto LABEL_881;
          }
          float v232 = *((float *)&v501 + 1);
          unint64_t v233 = v230 + 1;
          uint64_t v234 = *(void *)this;
          unsigned int v235 = *(unsigned __int8 *)(*(void *)this + v230);
          if (*((unsigned char *)this + 24))
          {
            if (v233 >= v229) {
              int v236 = 0;
            }
            else {
              int v236 = *(unsigned __int8 *)(v234 + v233);
            }
            *((void *)this + 2) = v233;
            unint64_t v241 = v230 + 2;
            if (v229 < v230 + 2 + v228) {
              goto LABEL_49;
            }
            int v242 = v241 >= v229 ? 0 : *(unsigned __int8 *)(v234 + v241);
            int v243 = *(unsigned __int8 *)(v234 + v233);
            *((void *)this + 2) = v241;
            unint64_t v239 = v230 + 3;
            if (v229 < v239 + v228) {
              goto LABEL_49;
            }
            if (v239 >= v229) {
              int v244 = 0;
            }
            else {
              int v244 = *(unsigned __int8 *)(v234 + v239);
            }
            int v245 = (1 << (8 - v227)) + 255;
            int v246 = 0xFFFF << (8 - v227);
            unsigned int v235 = ((v236 & v246) >> (8 - v227)) | ((v245 & v235) << v227);
            unsigned int v238 = ((v242 & v246) >> (8 - v227)) | ((v245 & v243) << v227);
            unsigned int v240 = ((v244 & v246) >> (8 - v227)) | ((((1 << (8 - v227)) - 1) & *(unsigned char *)(v234 + v241)) << v227);
          }
          else
          {
            *((void *)this + 2) = v233;
            uint64_t v237 = v230 + 2;
            if (v229 < v230 + 2 + v228) {
              goto LABEL_49;
            }
            LOBYTE(v238) = *(unsigned char *)(v234 + v233);
            *((void *)this + 2) = v237;
            unint64_t v239 = v230 + 3;
            if (v229 < v239 + v228) {
              goto LABEL_49;
            }
            LOBYTE(v240) = *(unsigned char *)(v234 + v237);
          }
          *((void *)this + 2) = v239;
          float v247 = (float)v235;
          if ((float)(v247 * 0.0039216) >= 0.04045)
          {
            float v248 = powf((float)(v247 * 0.0037171) + 0.052133, 2.4);
            float v249 = (float)v238;
            if ((float)(v249 * 0.0039216) >= 0.04045)
            {
LABEL_368:
              float v250 = powf((float)(v249 * 0.0037171) + 0.052133, 2.4);
              goto LABEL_371;
            }
          }
          else
          {
            float v248 = v247 * 0.00030353;
            float v249 = (float)v238;
            if ((float)(v249 * 0.0039216) >= 0.04045) {
              goto LABEL_368;
            }
          }
          float v250 = v249 * 0.00030353;
LABEL_371:
          float v251 = (float)v240;
          double v252 = v7;
          if ((float)(v251 * 0.0039216) >= 0.04045)
          {
            float v253 = powf((float)(v251 * 0.0037171) + 0.052133, 2.4);
            if (v232 == 0.0) {
              unint64_t v254 = 0;
            }
            else {
              unint64_t v254 = LODWORD(v232);
            }
            unint64_t v255 = (unint64_t)v507[1];
            if (!v507[1]) {
              goto LABEL_400;
            }
          }
          else
          {
            float v253 = v251 * 0.00030353;
            if (v232 == 0.0) {
              unint64_t v254 = 0;
            }
            else {
              unint64_t v254 = LODWORD(v232);
            }
            unint64_t v255 = (unint64_t)v507[1];
            if (!v507[1]) {
              goto LABEL_400;
            }
          }
          uint8x8_t v256 = (uint8x8_t)vcnt_s8((int8x8_t)v255);
          v256.i16[0] = vaddlv_u8(v256);
          if (v256.u32[0] > 1uLL)
          {
            uint64_t v226 = v254;
            if (v254 >= v255) {
              uint64_t v226 = v254 % v255;
            }
          }
          else
          {
            uint64_t v226 = (v255 - 1) & v254;
          }
          int v257 = (float **)*((void *)v507[0] + v226);
          if (v257)
          {
            long long v258 = *v257;
            if (v258)
            {
              if (v256.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v260 = *((void *)v258 + 1);
                  if (v260 == v254)
                  {
                    if (v258[4] == v232) {
                      goto LABEL_438;
                    }
                  }
                  else if ((v260 & (v255 - 1)) != v226)
                  {
                    goto LABEL_400;
                  }
                  long long v258 = *(float **)v258;
                  if (!v258) {
                    goto LABEL_400;
                  }
                }
              }
              do
              {
                unint64_t v259 = *((void *)v258 + 1);
                if (v259 == v254)
                {
                  if (v258[4] == v232) {
                    goto LABEL_438;
                  }
                }
                else
                {
                  if (v259 >= v255) {
                    v259 %= v255;
                  }
                  if (v259 != v226) {
                    break;
                  }
                }
                long long v258 = *(float **)v258;
              }
              while (v258);
            }
          }
LABEL_400:
          long long v261 = (float *)operator new(0x20uLL);
          *(void *)long long v261 = 0;
          *((void *)v261 + 1) = v254;
          v261[4] = v232;
          v261[5] = v248;
          v261[6] = v250;
          v261[7] = v253;
          float v262 = (float)((unint64_t)v508[1] + 1);
          if (!v255 || (float)(v509 * (float)v255) < v262)
          {
            BOOL v263 = (v255 & (v255 - 1)) != 0;
            if (v255 < 3) {
              BOOL v263 = 1;
            }
            unint64_t v264 = v263 | (2 * v255);
            unint64_t v265 = vcvtps_u32_f32(v262 / v509);
            if (v264 <= v265) {
              size_t v266 = v265;
            }
            else {
              size_t v266 = v264;
            }
            if (v266 == 1)
            {
              size_t v266 = 2;
            }
            else if ((v266 & (v266 - 1)) != 0)
            {
              size_t v266 = std::__next_prime(v266);
              unint64_t v255 = (unint64_t)v507[1];
            }
            if (v266 > v255) {
              goto LABEL_412;
            }
            if (v266 < v255)
            {
              unint64_t v267 = vcvtps_u32_f32((float)(unint64_t)v508[1] / v509);
              if (v255 < 3
                || (uint8x8_t v268 = (uint8x8_t)vcnt_s8((int8x8_t)v255), v268.i16[0] = vaddlv_u8(v268), v268.u32[0] > 1uLL))
              {
                unint64_t v267 = std::__next_prime(v267);
              }
              else
              {
                uint64_t v269 = 1 << -(char)__clz(v267 - 1);
                if (v267 >= 2) {
                  unint64_t v267 = v269;
                }
              }
              if (v266 <= v267) {
                size_t v266 = v267;
              }
              if (v266 < v255) {
LABEL_412:
              }
                std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>((uint64_t)v507, v266);
            }
            unint64_t v255 = (unint64_t)v507[1];
            if (((unint64_t)v507[1] & ((unint64_t)v507[1] - 1)) != 0)
            {
              if ((void *)v254 >= v507[1]) {
                uint64_t v226 = v254 % (unint64_t)v507[1];
              }
              else {
                uint64_t v226 = v254;
              }
            }
            else
            {
              uint64_t v226 = (LODWORD(v507[1]) - 1) & v254;
            }
          }
          long long v270 = v507[0];
          long long v271 = (float **)*((void *)v507[0] + v226);
          if (v271)
          {
            *(void *)long long v261 = *v271;
          }
          else
          {
            *(void **)long long v261 = v508[0];
            v508[0] = v261;
            v270[v226] = v508;
            if (!*(void *)v261) {
              goto LABEL_437;
            }
            unint64_t v272 = *(void *)(*(void *)v261 + 8);
            if ((v255 & (v255 - 1)) != 0)
            {
              if (v272 >= v255) {
                v272 %= v255;
              }
            }
            else
            {
              v272 &= v255 - 1;
            }
            long long v271 = (float **)((char *)v507[0] + 8 * v272);
          }
          *long long v271 = v261;
LABEL_437:
          ++v508[1];
LABEL_438:
          ++v225;
          int v7 = v252;
          uint64_t v226 = 1025879765;
        }
        while (v225 < v122);
      }
      long long v273 = (uint64_t *)(a5 + 320);
      unint64_t v274 = *a3;
      unint64_t v275 = *(void *)(a5 + 328);
      if (v275)
      {
        uint8x8_t v276 = (uint8x8_t)vcnt_s8((int8x8_t)v275);
        v276.i16[0] = vaddlv_u8(v276);
        if (v276.u32[0] > 1uLL)
        {
          unint64_t v122 = *a3;
          if (v275 <= v274) {
            unint64_t v122 = v274 % v275;
          }
        }
        else
        {
          unint64_t v122 = (v275 - 1) & v274;
        }
        long long v313 = *(void ***)(*v273 + 8 * v122);
        if (v313)
        {
          uint64_t v314 = (unsigned __int8 *)*v313;
          if (*v313)
          {
            if (v276.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v316 = *((void *)v314 + 1);
                if (v316 == v274)
                {
                  if (v314[16] == v274) {
                    goto LABEL_861;
                  }
                }
                else if ((v316 & (v275 - 1)) != v122)
                {
                  goto LABEL_553;
                }
                uint64_t v314 = *(unsigned __int8 **)v314;
                if (!v314) {
                  goto LABEL_553;
                }
              }
            }
            do
            {
              unint64_t v315 = *((void *)v314 + 1);
              if (v315 == v274)
              {
                if (v314[16] == v274) {
                  goto LABEL_861;
                }
              }
              else
              {
                if (v315 >= v275) {
                  v315 %= v275;
                }
                if (v315 != v122) {
                  break;
                }
              }
              uint64_t v314 = *(unsigned __int8 **)v314;
            }
            while (v314);
          }
        }
      }
LABEL_553:
      uint64_t v314 = (unsigned __int8 *)operator new(0x30uLL);
      v317 = (void *)(a5 + 336);
      v501 = v314;
      v502 = (void *)(a5 + 336);
      *(void *)uint64_t v314 = 0;
      *((void *)v314 + 1) = v274;
      v314[16] = v274;
      *((void *)v314 + 4) = 0;
      *((void *)v314 + 5) = 0;
      *((void *)v314 + 3) = 0;
      LOBYTE(v503) = 1;
      float v318 = (float)(unint64_t)(*(void *)(a5 + 344) + 1);
      float v319 = *(float *)(a5 + 352);
      if (v275 && (float)(v319 * (float)v275) >= v318)
      {
        unint64_t v274 = v122;
      }
      else
      {
        BOOL v320 = 1;
        if (v275 >= 3) {
          BOOL v320 = (v275 & (v275 - 1)) != 0;
        }
        unint64_t v321 = v320 | (2 * v275);
        unint64_t v322 = vcvtps_u32_f32(v318 / v319);
        if (v321 <= v322) {
          size_t v323 = v322;
        }
        else {
          size_t v323 = v321;
        }
        if (v323 == 1)
        {
          size_t v323 = 2;
        }
        else if ((v323 & (v323 - 1)) != 0)
        {
          size_t v323 = std::__next_prime(v323);
          unint64_t v275 = *(void *)(a5 + 328);
        }
        if (v323 > v275) {
          goto LABEL_620;
        }
        if (v323 < v275)
        {
          unint64_t v345 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 344) / *(float *)(a5 + 352));
          if (v275 < 3
            || (uint8x8_t v346 = (uint8x8_t)vcnt_s8((int8x8_t)v275), v346.i16[0] = vaddlv_u8(v346), v346.u32[0] > 1uLL))
          {
            unint64_t v345 = std::__next_prime(v345);
          }
          else
          {
            uint64_t v347 = 1 << -(char)__clz(v345 - 1);
            if (v345 >= 2) {
              unint64_t v345 = v347;
            }
          }
          if (v323 <= v345) {
            size_t v323 = v345;
          }
          if (v323 < v275) {
LABEL_620:
          }
            std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 320, v323);
        }
        unint64_t v275 = *(void *)(a5 + 328);
        if ((v275 & (v275 - 1)) != 0)
        {
          if (v275 <= v274) {
            v274 %= v275;
          }
        }
        else
        {
          unint64_t v274 = (v275 - 1) & v274;
        }
      }
      uint64_t v451 = *v273;
      v452 = *(void **)(*v273 + 8 * v274);
      if (v452)
      {
        *(void *)uint64_t v314 = *v452;
      }
      else
      {
        *(void *)uint64_t v314 = *v317;
        void *v317 = v314;
        *(void *)(v451 + 8 * v274) = v317;
        if (!*(void *)v314) {
          goto LABEL_860;
        }
        unint64_t v453 = *(void *)(*(void *)v314 + 8);
        if ((v275 & (v275 - 1)) != 0)
        {
          if (v453 >= v275) {
            v453 %= v275;
          }
        }
        else
        {
          v453 &= v275 - 1;
        }
        v452 = (void *)(*v273 + 8 * v453);
      }
      void *v452 = v314;
LABEL_860:
      ++*(void *)(a5 + 344);
LABEL_861:
      LOWORD(v501) = *v7;
      v454 = v507[0];
      unint64_t v455 = (unint64_t)v507[1];
      v507[0] = 0;
      v507[1] = 0;
      v502 = v454;
      unint64_t v503 = v455;
      __p = v508[0];
      v505 = v508[1];
      float v506 = v509;
      if (v508[1])
      {
        unint64_t v456 = *((void *)v508[0] + 1);
        if ((v455 & (v455 - 1)) != 0)
        {
          if (v456 >= v455) {
            v456 %= v455;
          }
        }
        else
        {
          v456 &= v455 - 1;
        }
        *((void *)v454 + v456) = &__p;
        v508[0] = 0;
        v508[1] = 0;
      }
      unint64_t v457 = *((void *)v314 + 4);
      if (v457 >= *((void *)v314 + 5))
      {
        v463 = std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__push_back_slow_path<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>((void **)v314 + 3, (uint64_t)&v501);
      }
      else
      {
        *(_WORD *)unint64_t v457 = (_WORD)v501;
        v458 = v502;
        v502 = 0;
        *(void *)(v457 + 8) = v458;
        *(void *)(v457 + 16) = v503;
        unint64_t v503 = 0;
        v459 = __p;
        *(void *)(v457 + 24) = __p;
        v460 = v505;
        *(void *)(v457 + 32) = v505;
        *(float *)(v457 + 40) = v506;
        if (v460)
        {
          unint64_t v461 = v459[1];
          unint64_t v462 = *(void *)(v457 + 16);
          if ((v462 & (v462 - 1)) != 0)
          {
            if (v461 >= v462) {
              v461 %= v462;
            }
          }
          else
          {
            v461 &= v462 - 1;
          }
          v458[v461] = v457 + 24;
          __p = 0;
          v505 = 0;
        }
        v463 = (char *)(v457 + 48);
      }
      *((void *)v314 + 4) = v463;
      v464 = __p;
      if (__p)
      {
        do
        {
          v465 = (void *)*v464;
          operator delete(v464);
          v464 = v465;
        }
        while (v465);
      }
      v466 = v502;
      v502 = 0;
      if (v466) {
        operator delete(v466);
      }
      char v56 = 1;
      unsigned int v70 = v508[0];
      if (!v508[0]) {
        goto LABEL_959;
      }
      do
      {
LABEL_881:
        v467 = (void *)*v70;
        operator delete(v70);
        unsigned int v70 = v467;
      }
      while (v467);
      goto LABEL_959;
    case 9:
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501) {
        return 0;
      }
      int v71 = HIDWORD(v501);
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501) {
        return 0;
      }
      int v72 = HIDWORD(v501);
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501) {
        return 0;
      }
      int v73 = HIDWORD(v501);
      int v74 = (uint64_t *)(a5 + 360);
      unint64_t v75 = *a3;
      unint64_t v76 = *(void *)(a5 + 368);
      if (!v76) {
        goto LABEL_580;
      }
      uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v76);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        unint64_t v5 = *a3;
        if (v76 <= v75) {
          unint64_t v5 = v75 % v76;
        }
      }
      else
      {
        unint64_t v5 = (v76 - 1) & v75;
      }
      uint64_t v324 = *(void ***)(*v74 + 8 * v5);
      if (!v324) {
        goto LABEL_580;
      }
      unsigned int v85 = *v324;
      if (!*v324) {
        goto LABEL_580;
      }
      if (v77.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v326 = v85[1];
          if (v326 == v75)
          {
            if (*((unsigned __int8 *)v85 + 16) == v75) {
              goto LABEL_901;
            }
          }
          else if ((v326 & (v76 - 1)) != v5)
          {
            goto LABEL_580;
          }
          unsigned int v85 = (void *)*v85;
          if (!v85) {
            goto LABEL_580;
          }
        }
      }
      while (2)
      {
        unint64_t v325 = v85[1];
        if (v325 == v75)
        {
          if (*((unsigned __int8 *)v85 + 16) == v75) {
            goto LABEL_901;
          }
        }
        else
        {
          if (v325 >= v76) {
            v325 %= v76;
          }
          if (v325 != v5)
          {
LABEL_580:
            v327 = (void *)(a5 + 376);
            unsigned int v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 376);
            void *v85 = 0;
            v85[1] = v75;
            *((unsigned char *)v85 + 16) = v75;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            float v328 = (float)(unint64_t)(*(void *)(a5 + 384) + 1);
            float v329 = *(float *)(a5 + 392);
            if (v76 && (float)(v329 * (float)v76) >= v328)
            {
              unint64_t v75 = v5;
            }
            else
            {
              BOOL v330 = 1;
              if (v76 >= 3) {
                BOOL v330 = (v76 & (v76 - 1)) != 0;
              }
              unint64_t v331 = v330 | (2 * v76);
              unint64_t v332 = vcvtps_u32_f32(v328 / v329);
              if (v331 <= v332) {
                size_t v333 = v332;
              }
              else {
                size_t v333 = v331;
              }
              if (v333 == 1)
              {
                size_t v333 = 2;
              }
              else if ((v333 & (v333 - 1)) != 0)
              {
                size_t v333 = std::__next_prime(v333);
                unint64_t v76 = *(void *)(a5 + 368);
              }
              if (v333 > v76) {
                goto LABEL_630;
              }
              if (v333 < v76)
              {
                unint64_t v348 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 384) / *(float *)(a5 + 392));
                if (v76 < 3
                  || (uint8x8_t v349 = (uint8x8_t)vcnt_s8((int8x8_t)v76), v349.i16[0] = vaddlv_u8(v349), v349.u32[0] > 1uLL))
                {
                  unint64_t v348 = std::__next_prime(v348);
                }
                else
                {
                  uint64_t v350 = 1 << -(char)__clz(v348 - 1);
                  if (v348 >= 2) {
                    unint64_t v348 = v350;
                  }
                }
                if (v333 <= v348) {
                  size_t v333 = v348;
                }
                if (v333 < v76) {
LABEL_630:
                }
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 360, v333);
              }
              unint64_t v76 = *(void *)(a5 + 368);
              if ((v76 & (v76 - 1)) != 0)
              {
                if (v76 <= v75) {
                  v75 %= v76;
                }
              }
              else
              {
                unint64_t v75 = (v76 - 1) & v75;
              }
            }
            uint64_t v468 = *v74;
            v469 = *(void **)(*v74 + 8 * v75);
            if (v469)
            {
              void *v85 = *v469;
            }
            else
            {
              void *v85 = *v327;
              void *v327 = v85;
              *(void *)(v468 + 8 * v75) = v327;
              if (!*v85)
              {
LABEL_900:
                ++*(void *)(a5 + 384);
LABEL_901:
                unsigned __int16 v471 = *v7;
                unint64_t v390 = v85[4];
                unint64_t v472 = v85[5];
                if (v390 < v472)
                {
                  *(_WORD *)unint64_t v390 = v471;
                  *(_DWORD *)(v390 + 4) = v71;
                  *(_DWORD *)(v390 + 8) = v72;
                  v366 = (char *)(v390 + 16);
                  *(_DWORD *)(v390 + 12) = v73;
                  goto LABEL_919;
                }
                v441 = v85 + 3;
                uint64_t v473 = v85[3];
                uint64_t v474 = (uint64_t)(v390 - v473) >> 4;
                unint64_t v475 = v474 + 1;
                if ((unint64_t)(v474 + 1) >> 60) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v476 = v472 - v473;
                if (v476 >> 3 > v475) {
                  unint64_t v475 = v476 >> 3;
                }
                if ((unint64_t)v476 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v477 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v477 = v475;
                }
                if (v477)
                {
                  if (v477 >> 60) {
                    goto LABEL_964;
                  }
                  v478 = (char *)operator new(16 * v477);
                }
                else
                {
                  v478 = 0;
                }
                v447 = &v478[16 * v474];
                *(_WORD *)v447 = v471;
                v448 = &v478[16 * v477];
                *((_DWORD *)v447 + 1) = v71;
                *((_DWORD *)v447 + 2) = v72;
                *((_DWORD *)v447 + 3) = v73;
                v366 = v447 + 16;
                if (v390 != v473)
                {
                  do
                  {
                    *((_OWORD *)v447 - 1) = *(_OWORD *)(v390 - 16);
                    v447 -= 16;
                    v390 -= 16;
                  }
                  while (v390 != v473);
                  goto LABEL_915;
                }
LABEL_916:
                v85[3] = v447;
                v85[4] = v366;
                v85[5] = v448;
                if (!v390) {
                  goto LABEL_919;
                }
                goto LABEL_917;
              }
              unint64_t v470 = *(void *)(*v85 + 8);
              if ((v76 & (v76 - 1)) != 0)
              {
                if (v470 >= v76) {
                  v470 %= v76;
                }
              }
              else
              {
                v470 &= v76 - 1;
              }
              v469 = (void *)(*v74 + 8 * v470);
            }
            void *v469 = v85;
            goto LABEL_900;
          }
        }
        unsigned int v85 = (void *)*v85;
        if (!v85) {
          goto LABEL_580;
        }
        continue;
      }
    default:
      return 0;
  }
}

void sub_1A1A1EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A1A1EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A1A1EAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A1A1EAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A1A1EAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  operator delete(v17);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1A1A1EB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  operator delete(v17);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1A1A1EBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A1EBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_WORD *)unint64_t v5 = *(_WORD *)a2;
    *(_OWORD *)(v5 + 4) = *(_OWORD *)(a2 + 4);
    uint64_t v6 = v5 + 20;
LABEL_3:
    a1[1] = v6;
    return;
  }
  uint64_t v7 = (char *)*a1;
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v7) >> 2);
  if (2 * v10 > v9) {
    unint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x666666666666666) {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 > 0xCCCCCCCCCCCCCCCLL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v12 = (char *)operator new(20 * v11);
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v13 = &v12[20 * v8];
  *(_WORD *)uint64_t v13 = *(_WORD *)a2;
  *(_OWORD *)(v13 + 4) = *(_OWORD *)(a2 + 4);
  uint64_t v6 = v13 + 20;
  if (v5 != v7)
  {
    do
    {
      __int16 v14 = *((_WORD *)v5 - 10);
      v5 -= 20;
      *((_WORD *)v13 - 10) = v14;
      v13 -= 20;
      *(_OWORD *)(v13 + 4) = *(_OWORD *)(v5 + 4);
    }
    while (v5 != v7);
    unint64_t v5 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v6;
  a1[2] = &v12[20 * v11];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v6;
}

void std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_WORD *)unint64_t v5 = *(_WORD *)a2;
    uint64_t v6 = *(void *)(a2 + 4);
    *((_DWORD *)v5 + 3) = *(_DWORD *)(a2 + 12);
    *(void *)(v5 + 4) = v6;
    uint64_t v7 = v5 + 16;
LABEL_3:
    a1[1] = v7;
    return;
  }
  unint64_t v8 = (char *)*a1;
  uint64_t v9 = (v5 - (unsigned char *)*a1) >> 4;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  __int16 v14 = &v13[16 * v9];
  *(_WORD *)__int16 v14 = *(_WORD *)a2;
  *(void *)(v14 + 4) = *(void *)(a2 + 4);
  *((_DWORD *)v14 + 3) = *(_DWORD *)(a2 + 12);
  uint64_t v7 = v14 + 16;
  if (v5 != v8)
  {
    do
    {
      __int16 v15 = *((_WORD *)v5 - 8);
      v5 -= 16;
      *((_WORD *)v14 - 8) = v15;
      v14 -= 16;
      uint64_t v16 = *(void *)(v5 + 4);
      *((_DWORD *)v14 + 3) = *((_DWORD *)v5 + 3);
      *(void *)(v14 + 4) = v16;
    }
    while (v5 != v8);
    unint64_t v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[16 * v12];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v7;
}

uint64_t geo::ibitstream::readByte@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = *(void *)(this + 8);
  uint64_t v2 = *(void *)(this + 16);
  unint64_t v4 = v2 + 2;
  if (!*(unsigned char *)(this + 24)) {
    unint64_t v4 = v2 + 1;
  }
  if (v3 >= v4)
  {
    unint64_t v5 = v2 + 1;
    unsigned int v6 = *(unsigned __int8 *)(*(void *)this + v2);
    if (*(unsigned char *)(this + 24))
    {
      if (v5 >= v3) {
        int v7 = 0;
      }
      else {
        int v7 = *(unsigned __int8 *)(*(void *)this + v5);
      }
      unsigned int v6 = ((v7 & (0xFFFF << (8 - *(unsigned char *)(this + 24)))) >> (8 - *(unsigned char *)(this + 24))) | ((((1 << (8 - *(unsigned char *)(this + 24))) - 1) & v6) << *(unsigned char *)(this + 24));
    }
    *(void *)(this + 16) = v5;
    *a2 = 1;
    a2[1] = v6;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

char *std::vector<std::vector<std::pair<unsigned short,unsigned int>>>::__push_back_slow_path<std::vector<std::pair<unsigned short,unsigned int>> const&>(char **a1, const void *a2, uint64_t a3)
{
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(24 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v12 = &v11[24 * v6];
  uint64_t v13 = &v11[24 * v10];
  *((void *)v12 + 1) = 0;
  *((void *)&v25 + 1) = v13;
  *((void *)v12 + 2) = 0;
  *(void *)unint64_t v12 = 0;
  int64_t v14 = a3 - (void)a2;
  if (v14)
  {
    if (v14 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    __int16 v15 = (char *)operator new(v14);
    *(void *)unint64_t v12 = v15;
    *((void *)v12 + 2) = &v15[8 * (v14 >> 3)];
    size_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v15, a2, v16);
    *((void *)v12 + 1) = &v15[v16];
  }
  unsigned int v17 = v12 + 24;
  *(void *)&long long v25 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      int v18 = v12;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      long long v19 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((void *)v18 - 1) = *((void *)v4 + 2);
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    while (v4 != v5);
    unint64_t v4 = *a1;
    uint64_t v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    unsigned int v17 = (char *)v25;
    if (v20 != v4)
    {
      unint64_t v21 = v20;
      do
      {
        unsigned int v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        unint64_t v22 = v23;
        if (v23)
        {
          *((void *)v20 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v20 = v21;
      }
      while (v21 != v4);
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v17;
}

void sub_1A1A1F0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<std::pair<unsigned short,unsigned int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<geo::codec::MaterialTexture,geo::StdAllocator<geo::codec::MaterialTexture,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *(void *)result) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return result;
    }
    uint64_t v21 = v4 + 40 * a2;
    if (v5 != v21)
    {
      uint64_t v22 = *(void *)(result + 8);
      do
      {
        uint64_t v24 = *(void *)(v22 - 40);
        v22 -= 40;
        uint64_t v23 = v24;
        if (v24)
        {
          *(void *)(v5 - 32) = v23;
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 - 16) + 40))(*(void *)(v5 - 16), v23, *(void *)(v5 - 24) - v23);
        }
        uint64_t v5 = v22;
      }
      while (v22 != v21);
    }
LABEL_23:
    *(void *)(v3 + 8) = v21;
    return result;
  }
  uint64_t v8 = *(void *)(result + 16);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3) >= v7)
  {
    uint64_t v21 = v5 + 40 * v7;
    uint64_t v25 = 40 * a2 - 8 * ((v5 - *(void *)result) >> 3);
    do
    {
      if (v5)
      {
        *(void *)(v5 + 32) = 0;
        *(_OWORD *)uint64_t v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        uint64_t result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        *(void *)(v5 + 24) = result;
        *(_WORD *)(v5 + 32) = 512;
        *(_DWORD *)(v5 + 36) = 0;
      }
      v5 += 40;
      v25 -= 40;
    }
    while (v25);
    goto LABEL_23;
  }
  if (a2 > 0x666666666666666) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x333333333333333) {
    uint64_t v11 = 0x666666666666666;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = 40 * v11;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 40 * v11, 8);
  uint64_t v13 = result;
  uint64_t v14 = 40 * v6;
  unint64_t v15 = result + 40 * v6;
  uint64_t v16 = result + v12;
  uint64_t v17 = 40 * a2;
  uint64_t v18 = result + v17;
  do
  {
    uint64_t v20 = v13 + v14;
    if (v13 + v14)
    {
      *(void *)(v20 + 32) = 0;
      *(_OWORD *)uint64_t v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      uint64_t result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
      uint64_t v19 = v13 + v14;
      *(void *)(v19 + 24) = result;
      *(_WORD *)(v19 + 32) = 512;
      *(_DWORD *)(v19 + 36) = 0;
    }
    v17 -= 40;
    v13 += 40;
  }
  while (v14 != v17);
  uint64_t v26 = *(void *)v3;
  uint64_t v27 = *(void *)(v3 + 8);
  if (v27 == *(void *)v3)
  {
    *(void *)uint64_t v3 = v15;
    *(void *)(v3 + 8) = v18;
    uint64_t v32 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v16;
  }
  else
  {
    uint64_t v28 = 0;
    do
    {
      uint64_t v29 = v15 + v28;
      uint64_t v30 = v27 + v28;
      *(void *)(v29 - 40) = 0;
      *(void *)(v29 - 32) = 0;
      *(void *)(v29 - 24) = 0;
      *(void *)(v29 - 16) = *(void *)(v27 + v28 - 16);
      *(_OWORD *)(v29 - 40) = *(_OWORD *)(v27 + v28 - 40);
      *(void *)(v29 - 24) = *(void *)(v27 + v28 - 24);
      *(void *)(v30 - 40) = 0;
      *(void *)(v30 - 32) = 0;
      *(void *)(v30 - 24) = 0;
      *(void *)(v29 - 8) = *(void *)(v27 + v28 - 8);
      v28 -= 40;
    }
    while (v27 + v28 != v26);
    uint64_t v27 = *(void *)v3;
    uint64_t v31 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = v15 + v28;
    *(void *)(v3 + 8) = v18;
    uint64_t v32 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v16;
    if (v31 != v27)
    {
      uint64_t v33 = v31;
      do
      {
        uint64_t v35 = *(void *)(v33 - 40);
        v33 -= 40;
        uint64_t v34 = v35;
        if (v35)
        {
          *(void *)(v31 - 32) = v34;
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v31 - 16) + 40))(*(void *)(v31 - 16), v34, *(void *)(v31 - 24) - v34);
        }
        uint64_t v31 = v33;
      }
      while (v33 != v27);
    }
  }
  if (v27) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v27, v32 - v27);
  }
  return result;
}

char *std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__push_back_slow_path<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v5 = 0x555555555555555;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x555555555555555) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 48 * v5;
  uint64_t v8 = (char *)operator new(48 * v5);
  unint64_t v9 = &v8[48 * v3];
  *(_WORD *)unint64_t v9 = *(_WORD *)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  unint64_t v11 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v9 + 1) = v10;
  *((void *)v9 + 2) = v11;
  uint64_t v12 = *(void *)(a2 + 24);
  *((void *)v9 + 3) = v12;
  uint64_t v13 = *(void *)(a2 + 32);
  *((void *)v9 + 4) = v13;
  *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 + 40);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    unint64_t v15 = v11 - 1;
    unint64_t v16 = v14 % v11;
    if (v14 < v11) {
      unint64_t v16 = v14;
    }
    uint64_t v17 = v14 & v15;
    if ((v11 & v15) != 0) {
      unint64_t v18 = v16;
    }
    else {
      unint64_t v18 = v17;
    }
    *(void *)(v10 + 8 * v18) = v9 + 24;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
  }
  uint64_t v19 = &v8[v7];
  uint64_t v20 = v9 + 48;
  uint64_t v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  if (v22 == *a1)
  {
    *a1 = v9;
    a1[1] = v20;
    a1[2] = v19;
  }
  else
  {
    uint64_t v23 = 0;
    do
    {
      uint64_t v25 = &v9[v23];
      uint64_t v26 = &v22[v23];
      *((_WORD *)v25 - 24) = *(_WORD *)&v22[v23 - 48];
      uint64_t v27 = *(void *)&v22[v23 - 40];
      *((void *)v26 - 5) = 0;
      *((void *)v25 - 5) = v27;
      *((void *)v25 - 4) = *(void *)&v22[v23 - 32];
      *((void *)v26 - 4) = 0;
      uint64_t v28 = *(void *)&v22[v23 - 24];
      *(void *)&v9[v23 - 24] = v28;
      uint64_t v29 = *(void *)&v22[v23 - 16];
      *((void *)v25 - 2) = v29;
      *((_DWORD *)v25 - 2) = *(_DWORD *)&v22[v23 - 8];
      if (v29)
      {
        unint64_t v24 = *(void *)(v28 + 8);
        unint64_t v30 = *((void *)v25 - 4);
        if ((v30 & (v30 - 1)) != 0)
        {
          if (v24 >= v30) {
            v24 %= v30;
          }
        }
        else
        {
          v24 &= v30 - 1;
        }
        *(void *)(v27 + 8 * v24) = &v9[v23 - 24];
        *(void *)&v22[v23 - 24] = 0;
        *(void *)&v22[v23 - 16] = 0;
      }
      v23 -= 48;
    }
    while (&v22[v23] != v21);
    uint64_t v22 = (char *)*a1;
    uint64_t v31 = (char *)a1[1];
    *a1 = &v9[v23];
    a1[1] = v20;
    a1[2] = v19;
    while (v31 != v22)
    {
      uint64_t v32 = (void *)*((void *)v31 - 3);
      if (v32)
      {
        do
        {
          uint64_t v33 = (void *)*v32;
          operator delete(v32);
          uint64_t v32 = v33;
        }
        while (v33);
      }
      uint64_t v34 = (void *)*((void *)v31 - 5);
      *((void *)v31 - 5) = 0;
      if (v34) {
        operator delete(v34);
      }
      v31 -= 48;
    }
  }
  if (v22) {
    operator delete(v22);
  }
  return v20;
}

unint64_t *std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(unint64_t *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v6 = __src;
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (unsigned char *)*result;
  if (v8 - *result >= a4)
  {
    uint64_t v12 = (unsigned char *)result[1];
    size_t v13 = v12 - v9;
    if (v12 - v9 >= a4)
    {
      size_t v17 = a3 - __src;
      if (v17) {
        uint64_t result = (unint64_t *)memmove((void *)*result, __src, v17);
      }
      v7[1] = &v9[v17];
    }
    else
    {
      unint64_t v14 = &__src[v13];
      if (v12 != v9)
      {
        uint64_t result = (unint64_t *)memmove((void *)*result, __src, v13);
        unint64_t v9 = (unsigned char *)v7[1];
      }
      unint64_t v15 = v9;
      if (v14 != a3)
      {
        unint64_t v15 = v9;
        unint64_t v16 = v9;
        do
        {
          if (v16) {
            *unint64_t v16 = *v14;
          }
          ++v14;
          ++v16;
          ++v15;
        }
        while (v14 != a3);
      }
      v7[1] = v15;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = (unint64_t)v9;
      (*(void (**)(unint64_t, unsigned char *))(*(void *)result[3] + 40))(result[3], v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_29;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    uint64_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if (v11 < 0) {
LABEL_29:
    }
      std::vector<double>::__throw_length_error[abi:ne180100]();
    uint64_t result = (unint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v7[3] + 16))(v7[3], v11, 1);
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    while (v6 != a3)
    {
      if (result) {
        *(unsigned char *)uint64_t result = *v6;
      }
      ++v6;
      uint64_t result = (unint64_t *)((char *)result + 1);
    }
    v7[1] = result;
  }
  return result;
}

uint64_t md::RegistryManager::visitActiveCollectors<md::MeshRenderableLogic,CollectorKey>(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      size_t v17 = v16;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v16);
    }
    else
    {
      size_t v17 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
    }
  }
  else
  {
    size_t v17 = 0;
  }
  for (int i = *(void **)(a1 + 56); i; int i = (void *)*i)
  {
    uint64_t v10 = i[3];
    uint64_t v11 = i[4];
    if (v10 != v11)
    {
      while (*(void *)v10 != a2 || *(_DWORD *)(v10 + 8) != a3)
      {
        v10 += 24;
        if (v10 == v11) {
          goto LABEL_10;
        }
      }
    }
    if (v10 != v11)
    {
      uint64_t v13 = i[2];
      uint64_t v14 = *(void *)(v10 + 16);
      uint64_t v15 = v13;
      if (!v17)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      (*(void (**)(void *, uint64_t *, uint64_t *))(*v17 + 48))(v17, &v15, &v14);
    }
LABEL_10:
    ;
  }
  uint64_t result = (uint64_t)v17;
  if (v17 == v16) {
    return (*(uint64_t (**)(void *))(v16[0] + 32))(v16);
  }
  if (v17) {
    return (*(uint64_t (**)(void))(*v17 + 40))();
  }
  return result;
}

void sub_1A1A1FA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0,std::allocator<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0>,void ()(gdc::Registry *,gdc::EntityCollector *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(*a3 + 40) - *(void *)(*a3 + 32);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    unint64_t v6 = *(void *)(v5 + 120);
    if (v6 <= *(int *)(a1 + 8))
    {
      uint64_t v7 = *a2;
      *(void *)(v5 + 120) = v6 + (v4 >> 3);
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v11 = v3;
      uint64_t v12 = v7;
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v9 + 48))(v9, &v12, &v11);
        *(void *)(v3 + 40) = *(void *)(v3 + 32);
      }
      else
      {
        std::__throw_bad_function_call[abi:nn180100]();
        std::__function::__func<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0,std::allocator<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0>,void ()(gdc::Registry *,gdc::EntityCollector *)>::destroy_deallocate(v10);
      }
    }
    else
    {
      *(unsigned char *)(v5 + 128) = 1;
    }
  }
}

__n128 std::__function::__func<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0,std::allocator<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0>,void ()(gdc::Registry *,gdc::EntityCollector *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF574AF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(gdc::Registry *,gdc::EntityCollector *)>::operator()(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = (uint64_t (*)(void *, void, void))a1[1];
  uint64_t v5 = (void *)(a1[3] + (v3 >> 1));
  if (v3) {
    uint64_t v4 = *(uint64_t (**)(void *, void, void))(*v5 + v4);
  }
  return v4(v5, *a2, *a3);
}

void md::MeshRenderableLogic::processMaterialEnteringCollector(md::MeshRenderableLogic *this, int8x8_t *a2, gdc::EntityCollector *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = a2[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0xCA93DB2C2ACE8387;
    if (*(void *)&v5 <= 0xCA93DB2C2ACE8387) {
      unint64_t v7 = 0xCA93DB2C2ACE8387 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0xCA93DB2C2ACE8387;
  }
  uint64_t v8 = *(void **)(*(void *)a2 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0xCA93DB2C2ACE8387)
      {
        if (v9[2] == 0xCA93DB2C2ACE8387) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0xCA93DB2C2ACE8387) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0xCA93DB2C2ACE8387) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0xCA93DB2C2ACE8387)
  {
    uint64_t v14 = *(unsigned __int16 **)(v13 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v14 = 0;
LABEL_25:
  uint64_t v15 = (unint64_t *)*((void *)a3 + 4);
  for (int i = (unint64_t *)*((void *)a3 + 5); v15 != i; ++v15)
  {
    unint64_t v17 = *v15;
    uint64_t v18 = (unsigned char *)gdc::Registry::get<md::components::MeshInstance,md::components::Material>(a2, *v15);
    if (v19) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      buildMaterialKey(a2, v17, v18, v19, (uint64_t)buf);
      if (v30)
      {
        md::RenderBatchManager::process((uint64_t)v14, (size_t)buf, v17);
        if (v30)
        {
          if (v29 != -1) {
            ((void (*)(char *, uint8_t *))*(&off_1EF58FC48 + v29))(&v24, buf);
          }
        }
      }
    }
  }
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_13147);
  }
  uint64_t v21 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = (uint64_t)(*((void *)a3 + 5) - *((void *)a3 + 4)) >> 3;
    int v23 = *v14;
    *(_DWORD *)buf = 134218240;
    uint64_t v26 = v22;
    __int16 v27 = 1024;
    int v28 = v23;
    _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_DEBUG, "Processed %zu material updates for BatchManager(id:%d)", buf, 0x12u);
  }
}

void sub_1A1A1FE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a43)
  {
    uint64_t v46 = *(unsigned int *)(v44 + 224);
    if (v46 != -1)
    {
      (*(void (**)(char *, char *))(v43 + 8 * v46))(&a13, &a14);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::realistic::RouteRenderLayer::RouteModelPipelineStates::~RouteModelPipelineStates(md::realistic::RouteRenderLayer::RouteModelPipelineStates *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v5) {
      return;
    }
  }
  else
  {
    int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v5) {
      return;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, md::realistic::RouteRenderLayer::RouteModelPipelineStates *a2)
{
  std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)a2 + 152);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 14);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 11);
    if (!v4) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 11);
    if (!v4) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_7:
  md::realistic::RouteRenderLayer::RouteModelPipelineStates::~RouteModelPipelineStates(a2);
}

uint64_t gdc::Registry::get<md::components::MeshInstance,md::components::Material>(int8x8_t *a1, unint64_t a2)
{
  uint64_t v4 = (void *)gdc::Registry::storage<md::components::MeshInstance>(a1);
  uint64_t v5 = v4[4];
  if (a2 >> 39 < (v4[5] - v5) >> 3
    && (uint64_t v6 = *(void *)(v5 + 8 * (a2 >> 39))) != 0
    && (v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F)), v9 = v4[7], uint64_t v8 = v4[8], v7 < (v8 - v9) >> 3)
    && ((uint64_t v10 = v9 + 8 * v7, v10 != v8) ? (v11 = *(_DWORD *)(v10 + 4) == HIDWORD(a2)) : (v11 = 0), v11))
  {
    uint64_t v12 = v4[11];
    uint64_t v13 = v4[10] + 112 * v7;
  }
  else
  {
    uint64_t v12 = v4[11];
    uint64_t v13 = v12;
  }
  gdc::Registry::storage<md::components::Material>(a1);
  if (v13 == v12) {
    return 0;
  }
  else {
    return v13;
  }
}

void md::RenderBatchManager::process(uint64_t a1, size_t prime, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = (void **)(a1 + 168);
  unint64_t v7 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((void *)(a1 + 168), a3);
  if (!v7) {
    goto LABEL_22;
  }
  uint64_t v8 = (int8x8_t *)v7[3];
  if (!v8) {
    goto LABEL_22;
  }
  uint64_t v9 = *(unsigned int *)(prime + 224);
  __int32 v10 = v8[28].i32[0];
  BOOL v12 = v10 == v9 && v10 != -1;
  if (v9 == -1 || !v12)
  {
    BOOL v14 = v10 == -1;
    if (v9 == -1) {
      char v15 = v14;
    }
    else {
      char v15 = v12;
    }
    if (v15) {
      goto LABEL_22;
    }
  }
  else
  {
    v175[0] = &v178;
    char v16 = ((uint64_t (*)(void *, size_t, int8x8_t *))off_1EF58FCB8[v9])(v175, prime, v8);
    if ((v16 & 1) == 0) {
      goto LABEL_22;
    }
  }
  if (md::RenderBatch::remove(v8, v3)) {
    *(unsigned char *)(a1 + 80) = 1;
  }
LABEL_22:
  unint64_t v17 = (void **)(a1 + 128);
  uint64_t v18 = std::__hash_table<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::__unordered_map_hasher<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::__unordered_map_equal<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::allocator<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>>>::find<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>((void *)(a1 + 128), prime);
  if (v18) {
    goto LABEL_182;
  }
  uint64_t v19 = *(char **)(a1 + 72);
  if (!v19)
  {
    BOOL v20 = (char *)malloc_type_malloc(*(void *)(a1 + 64), 0x160B39uLL);
    uint64_t v21 = v20;
    int v23 = (uint64_t **)(a1 + 40);
    uint64_t v22 = *(uint64_t **)(a1 + 40);
    if (v22)
    {
      while (1)
      {
        while (1)
        {
          char v24 = (uint64_t **)v22;
          unint64_t v25 = v22[4];
          if ((unint64_t)v20 >= v25) {
            break;
          }
          uint64_t v22 = *v24;
          int v23 = v24;
          if (!*v24) {
            goto LABEL_31;
          }
        }
        if (v25 >= (unint64_t)v20) {
          break;
        }
        uint64_t v22 = v24[1];
        if (!v22)
        {
          int v23 = v24 + 1;
          goto LABEL_31;
        }
      }
    }
    else
    {
      char v24 = (uint64_t **)(a1 + 40);
LABEL_31:
      uint64_t v26 = (uint64_t *)operator new(0x28uLL);
      v26[4] = (uint64_t)v21;
      uint64_t *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v24;
      *int v23 = v26;
      uint64_t v27 = **(void **)(a1 + 32);
      if (v27)
      {
        *(void *)(a1 + 32) = v27;
        int v28 = *v23;
      }
      else
      {
        int v28 = v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v28);
      ++*(void *)(a1 + 48);
    }
    uint64_t v19 = *(char **)(a1 + 72);
    uint64_t v29 = 384 * *(void *)(a1 + 56) - 384;
    if ((v29 & 0x8000000000000000) == 0)
    {
      char v30 = &v21[v29];
      do
      {
        *(void *)char v30 = v19;
        uint64_t v31 = v30 - 384;
        uint64_t v19 = v30;
        char v30 = v31;
      }
      while (v31 >= v21);
      uint64_t v19 = v31 + 384;
    }
    *(void *)(a1 + 72) = v19;
  }
  *(void *)(a1 + 72) = *(void *)v19;
  *uint64_t v19 = 0;
  *((_DWORD *)v19 + 56) = -1;
  uint64_t v32 = *(unsigned int *)(prime + 224);
  if (v32 != -1)
  {
    ((void (*)(char *, char *, size_t))off_1EF590A08[v32])(&v178, v19, prime);
    *((_DWORD *)v19 + 56) = v32;
  }
  *((void *)v19 + 29) = atomic_fetch_add(&md::RenderBatch::nextId(void)::next, 1uLL) + 1;
  *((_OWORD *)v19 + 15) = 0u;
  *((_OWORD *)v19 + 16) = 0u;
  *((_DWORD *)v19 + 68) = 1065353216;
  *((void *)v19 + 35) = 0;
  v19[288] = 0;
  v19[312] = 0;
  v19[360] = 0;
  v19[368] = 0;
  *((void *)v19 + 47) = 0;
  *((_OWORD *)v19 + 20) = 0u;
  *((_OWORD *)v19 + 21) = 0u;
  v19[352] = 0;
  unint64_t v34 = *(void *)(a1 + 16);
  unint64_t v33 = *(void *)(a1 + 24);
  if (v34 >= v33)
  {
    int v36 = *(unsigned char **)(a1 + 8);
    int64_t v37 = v34 - (void)v36;
    uint64_t v38 = (uint64_t)(v34 - (void)v36) >> 3;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61) {
      abort();
    }
    uint64_t v40 = v33 - (void)v36;
    if (v40 >> 2 > v39) {
      unint64_t v39 = v40 >> 2;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      if (v41 >> 61) {
        goto LABEL_380;
      }
      uint64_t v42 = operator new(8 * v41);
      int64_t v37 = v34 - (void)v36;
    }
    else
    {
      uint64_t v42 = 0;
    }
    uint64_t v43 = (char **)&v42[8 * v38];
    uint64_t v44 = &v42[8 * v41];
    *uint64_t v43 = v19;
    uint64_t v35 = v43 + 1;
    if ((unsigned char *)v34 == v36)
    {
      int v36 = (unsigned char *)v34;
    }
    else
    {
      unint64_t v45 = v34 - (void)v36 - 8;
      if (v45 < 0x58) {
        goto LABEL_384;
      }
      if (v34 - (unint64_t)v42 - v37 < 0x20) {
        goto LABEL_384;
      }
      uint64_t v46 = (v45 >> 3) + 1;
      uint64_t v47 = &v42[8 * v38 - 16];
      uint64_t v48 = (long long *)(v34 - 16);
      uint64_t v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v50 = *v48;
        *(v47 - 1) = *(v48 - 1);
        *uint64_t v47 = v50;
        v47 -= 2;
        v48 -= 2;
        v49 -= 4;
      }
      while (v49);
      v43 -= v46 & 0x3FFFFFFFFFFFFFFCLL;
      v34 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_384:
        do
        {
          unint64_t v51 = *(char **)(v34 - 8);
          v34 -= 8;
          *--uint64_t v43 = v51;
        }
        while ((unsigned char *)v34 != v36);
        int v36 = *(unsigned char **)(a1 + 8);
      }
    }
    *(void *)(a1 + 8) = v43;
    *(void *)(a1 + 16) = v35;
    *(void *)(a1 + 24) = v44;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *(void *)unint64_t v34 = v19;
    v34 += 8;
    uint64_t v35 = (void *)v34;
  }
  *(void *)(a1 + 16) = v35;
  uint64_t v52 = *(unsigned int *)(prime + 224);
  uint64_t v174 = v35;
  if (v52 == -1)
  {
    uint64_t v53 = 299792458;
LABEL_69:
    uint64_t v54 = -1;
    goto LABEL_70;
  }
  uint64_t v53 = ((uint64_t (*)(void *, size_t))off_1EF58FCE8[v52])(v175, prime);
  uint64_t v54 = *(unsigned int *)(prime + 224);
  if (v54 == -1) {
    goto LABEL_69;
  }
LABEL_70:
  uint64_t v55 = __ROR8__(v54 + 16, 16);
  unint64_t v56 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v55 ^ ((0x9DDFEA08EB382D69 * (v55 ^ v53)) >> 47) ^ (0x9DDFEA08EB382D69 * (v55 ^ v53)))) ^ ((0x9DDFEA08EB382D69 * (v55 ^ ((0x9DDFEA08EB382D69 * (v55 ^ v53)) >> 47) ^ (0x9DDFEA08EB382D69 * (v55 ^ v53)))) >> 47))) ^ v54;
  unint64_t v57 = *(void *)(a1 + 136);
  if (v57)
  {
    uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
    v58.i16[0] = vaddlv_u8(v58);
    if (v58.u32[0] > 1uLL)
    {
      unint64_t v34 = v56;
      if (v56 >= v57) {
        unint64_t v34 = v56 % v57;
      }
    }
    else
    {
      unint64_t v34 = v56 & (v57 - 1);
    }
    BOOL v59 = (uint64_t ***)*((void *)*v17 + v34);
    if (v59)
    {
      uint64_t v18 = *v59;
      if (*v59)
      {
        if (v58.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v60 = v18[1];
            if (v60 == (uint64_t *)v56)
            {
              uint64_t v61 = *((unsigned int *)v18 + 60);
              int v62 = *(_DWORD *)(prime + 224);
              BOOL v64 = v62 == v61 && v62 != -1;
              if (v61 == -1 || !v64)
              {
                BOOL v65 = v62 == -1;
                if (v61 == -1) {
                  BOOL v66 = v65;
                }
                else {
                  BOOL v66 = v64;
                }
                if (v66) {
                  goto LABEL_182;
                }
              }
              else
              {
                v175[0] = &v178;
                if (((uint64_t (*)(void *, uint64_t **, size_t))off_1EF58FD00[v61])(v175, v18 + 2, prime)) {
                  goto LABEL_182;
                }
              }
            }
            else if (((unint64_t)v60 & (v57 - 1)) != v34)
            {
              goto LABEL_122;
            }
            uint64_t v18 = (uint64_t **)*v18;
            if (!v18) {
              goto LABEL_122;
            }
          }
        }
        do
        {
          unint64_t v67 = (unint64_t)v18[1];
          if (v67 == v56)
          {
            uint64_t v68 = *((unsigned int *)v18 + 60);
            int v69 = *(_DWORD *)(prime + 224);
            BOOL v71 = v69 == v68 && v69 != -1;
            if (v68 == -1 || !v71)
            {
              BOOL v73 = v69 == -1;
              if (v68 == -1) {
                char v74 = v73;
              }
              else {
                char v74 = v71;
              }
              if (v74) {
                goto LABEL_182;
              }
            }
            else
            {
              v175[0] = &v178;
              char v75 = ((uint64_t (*)(void *, uint64_t **, size_t))off_1EF58FD00[v68])(v175, v18 + 2, prime);
              if (v75) {
                goto LABEL_182;
              }
            }
          }
          else
          {
            if (v67 >= v57) {
              v67 %= v57;
            }
            if (v67 != v34) {
              break;
            }
          }
          uint64_t v18 = (uint64_t **)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_122:
  unint64_t v76 = operator new(0x100uLL);
  v175[0] = v76;
  v175[1] = a1 + 144;
  BOOL v172 = (void *)v56;
  unint64_t v173 = (void *)(a1 + 144);
  char v176 = 0;
  *unint64_t v76 = 0;
  v76[1] = v56;
  *((unsigned char *)v76 + 16) = 0;
  *((_DWORD *)v76 + 60) = -1;
  uint64_t v77 = *(unsigned int *)(prime + 224);
  if (v77 != -1)
  {
    ((void (*)(char *, void *, size_t))off_1EF58FD30[v77])(&v177, v76 + 2, prime);
    *((_DWORD *)v76 + 60) = v77;
  }
  v76[31] = *(v174 - 1);
  char v176 = 1;
  float v78 = (float)(unint64_t)(*(void *)(a1 + 152) + 1);
  float v79 = *(float *)(a1 + 160);
  if (v57 && (float)(v79 * (float)v57) >= v78) {
    goto LABEL_173;
  }
  BOOL v80 = 1;
  if (v57 >= 3) {
    BOOL v80 = (v57 & (v57 - 1)) != 0;
  }
  unint64_t v81 = v80 | (2 * v57);
  unint64_t v82 = vcvtps_u32_f32(v78 / v79);
  if (v81 <= v82) {
    size_t prime = v82;
  }
  else {
    size_t prime = v81;
  }
  if (prime == 1)
  {
    size_t prime = 2;
    unint64_t v34 = (unint64_t)v172;
  }
  else
  {
    unint64_t v34 = (unint64_t)v172;
    if ((prime & (prime - 1)) != 0) {
      size_t prime = std::__next_prime(prime);
    }
  }
  unint64_t v57 = *(void *)(a1 + 136);
  if (prime > v57)
  {
LABEL_136:
    if (prime >> 61) {
      goto LABEL_380;
    }
    int v83 = operator new(8 * prime);
    unsigned int v84 = *v17;
    *unint64_t v17 = v83;
    if (v84) {
      operator delete(v84);
    }
    uint64_t v85 = 0;
    *(void *)(a1 + 136) = prime;
    do
      *((void *)*v17 + v85++) = 0;
    while (prime != v85);
    unint64_t v86 = (void *)*v173;
    if (!*v173) {
      goto LABEL_160;
    }
    size_t v87 = v86[1];
    size_t v88 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v89 = v87 & v88;
      *((void *)*v17 + v89) = v173;
      for (int i = (void *)*v86; *v86; int i = (void *)*v86)
      {
        size_t v91 = i[1] & v88;
        if (v91 == v89)
        {
          unint64_t v86 = i;
        }
        else if (*((void *)*v17 + v91))
        {
          *unint64_t v86 = *i;
          uint64_t v92 = 8 * v91;
          *int i = **(void **)((char *)*v17 + v92);
          **(void **)((char *)*v17 + v92) = i;
        }
        else
        {
          *((void *)*v17 + v91) = v86;
          unint64_t v86 = i;
          size_t v89 = v91;
        }
      }
LABEL_160:
      unint64_t v57 = prime;
      goto LABEL_161;
    }
    if (v87 >= prime) {
      v87 %= prime;
    }
    *((void *)*v17 + v87) = v173;
    unsigned int v96 = (void *)*v86;
    if (!*v86) {
      goto LABEL_160;
    }
    while (1)
    {
      size_t v98 = v96[1];
      if (v98 >= prime) {
        v98 %= prime;
      }
      if (v98 != v87)
      {
        if (!*((void *)*v17 + v98))
        {
          *((void *)*v17 + v98) = v86;
          goto LABEL_165;
        }
        *unint64_t v86 = *v96;
        uint64_t v97 = 8 * v98;
        *unsigned int v96 = **(void **)((char *)*v17 + v97);
        **(void **)((char *)*v17 + v97) = v96;
        unsigned int v96 = v86;
      }
      size_t v98 = v87;
LABEL_165:
      unint64_t v86 = v96;
      unsigned int v96 = (void *)*v96;
      size_t v87 = v98;
      if (!v96) {
        goto LABEL_160;
      }
    }
  }
  if (prime >= v57) {
    goto LABEL_161;
  }
  unint64_t v93 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
  if (v57 < 3 || (uint8x8_t v94 = (uint8x8_t)vcnt_s8((int8x8_t)v57), v94.i16[0] = vaddlv_u8(v94), v94.u32[0] > 1uLL))
  {
    unint64_t v93 = std::__next_prime(v93);
  }
  else
  {
    uint64_t v95 = 1 << -(char)__clz(v93 - 1);
    if (v93 >= 2) {
      unint64_t v93 = v95;
    }
  }
  if (prime <= v93) {
    size_t prime = v93;
  }
  if (prime < v57)
  {
    if (!prime)
    {
      char v171 = *v17;
      *unint64_t v17 = 0;
      if (v171) {
        operator delete(v171);
      }
      unint64_t v57 = 0;
      *(void *)(a1 + 136) = 0;
      goto LABEL_161;
    }
    goto LABEL_136;
  }
  unint64_t v57 = *(void *)(a1 + 136);
LABEL_161:
  if ((v57 & (v57 - 1)) != 0)
  {
    if (v34 >= v57) {
      v34 %= v57;
    }
  }
  else
  {
    v34 &= v57 - 1;
  }
LABEL_173:
  unsigned int v99 = (void *)*((void *)*v17 + v34);
  if (v99)
  {
    *(void *)v175[0] = *v99;
    void *v99 = v175[0];
  }
  else
  {
    *(void *)v175[0] = *v173;
    *unint64_t v173 = v175[0];
    *((void *)*v17 + v34) = v173;
    if (*(void *)v175[0])
    {
      unint64_t v100 = *(void *)(*(void *)v175[0] + 8);
      if ((v57 & (v57 - 1)) != 0)
      {
        if (v100 >= v57) {
          v100 %= v57;
        }
      }
      else
      {
        v100 &= v57 - 1;
      }
      *((void *)*v17 + v100) = v175[0];
    }
  }
  uint64_t v18 = (uint64_t **)v175[0];
  ++*(void *)(a1 + 152);
LABEL_182:
  unsigned int v101 = v18[31];
  unint64_t v102 = v101[31];
  if (v102)
  {
    uint8x8_t v103 = (uint8x8_t)vcnt_s8((int8x8_t)v102);
    v103.i16[0] = vaddlv_u8(v103);
    if (v103.u32[0] > 1uLL)
    {
      size_t prime = v3;
      if (v102 <= v3) {
        size_t prime = v3 % v102;
      }
    }
    else
    {
      size_t prime = (v102 - 1) & v3;
    }
    unint64_t v104 = *(uint64_t ***)(v101[30] + 8 * prime);
    if (v104)
    {
      unint64_t v105 = *v104;
      if (v105)
      {
        if (v103.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v107 = v105[1];
            if (v107 == v3)
            {
              if (__PAIR64__(*((unsigned __int16 *)v105 + 9), *((unsigned __int16 *)v105 + 8)) == __PAIR64__(WORD1(v3), (unsigned __int16)v3)&& *((_DWORD *)v105 + 5) == HIDWORD(v3))
              {
                goto LABEL_277;
              }
            }
            else if ((v107 & (v102 - 1)) != prime)
            {
              goto LABEL_206;
            }
            unint64_t v105 = (uint64_t *)*v105;
            if (!v105) {
              goto LABEL_206;
            }
          }
        }
        do
        {
          unint64_t v106 = v105[1];
          if (v106 == v3)
          {
            if (__PAIR64__(*((unsigned __int16 *)v105 + 9), *((unsigned __int16 *)v105 + 8)) == __PAIR64__(WORD1(v3), (unsigned __int16)v3)&& *((_DWORD *)v105 + 5) == HIDWORD(v3))
            {
              goto LABEL_277;
            }
          }
          else
          {
            if (v106 >= v102) {
              v106 %= v102;
            }
            if (v106 != prime) {
              break;
            }
          }
          unint64_t v105 = (uint64_t *)*v105;
        }
        while (v105);
      }
    }
  }
LABEL_206:
  unsigned int v108 = operator new(0x18uLL);
  *unsigned int v108 = 0;
  v108[1] = v3;
  v108[2] = v3;
  float v109 = (float)(unint64_t)(v101[33] + 1);
  float v110 = *((float *)v101 + 68);
  if (!v102 || (float)(v110 * (float)v102) < v109)
  {
    BOOL v111 = 1;
    if (v102 >= 3) {
      BOOL v111 = (v102 & (v102 - 1)) != 0;
    }
    unint64_t v112 = v111 | (2 * v102);
    unint64_t v113 = vcvtps_u32_f32(v109 / v110);
    if (v112 <= v113) {
      size_t v114 = v113;
    }
    else {
      size_t v114 = v112;
    }
    if (v114 == 1)
    {
      size_t v114 = 2;
    }
    else if ((v114 & (v114 - 1)) != 0)
    {
      size_t v114 = std::__next_prime(v114);
      unint64_t v102 = v101[31];
    }
    if (v114 <= v102)
    {
      if (v114 >= v102) {
        goto LABEL_258;
      }
      unint64_t v127 = vcvtps_u32_f32((float)(unint64_t)v101[33] / *((float *)v101 + 68));
      if (v102 < 3 || (uint8x8_t v128 = (uint8x8_t)vcnt_s8((int8x8_t)v102), v128.i16[0] = vaddlv_u8(v128), v128.u32[0] > 1uLL))
      {
        unint64_t v127 = std::__next_prime(v127);
      }
      else
      {
        uint64_t v129 = 1 << -(char)__clz(v127 - 1);
        if (v127 >= 2) {
          unint64_t v127 = v129;
        }
      }
      if (v114 <= v127) {
        size_t v114 = v127;
      }
      if (v114 >= v102) {
        goto LABEL_258;
      }
      if (!v114)
      {
        uint64_t v134 = (void *)v101[30];
        v101[30] = 0;
        if (v134) {
          operator delete(v134);
        }
        v101[31] = 0;
        goto LABEL_258;
      }
    }
    if (v114 >> 61) {
      goto LABEL_380;
    }
    uint8x8_t v115 = operator new(8 * v114);
    unint64_t v116 = (void *)v101[30];
    v101[30] = (uint64_t)v115;
    if (v116) {
      operator delete(v116);
    }
    uint64_t v117 = 0;
    v101[31] = v114;
    do
      *(void *)(v101[30] + 8 * v117++) = 0;
    while (v114 != v117);
    int v118 = (void *)v101[32];
    if (!v118) {
      goto LABEL_258;
    }
    unint64_t v119 = v101 + 32;
    size_t v120 = v118[1];
    size_t v121 = v114 - 1;
    if ((v114 & (v114 - 1)) == 0)
    {
      size_t v122 = v120 & v121;
      *(void *)(v101[30] + 8 * v122) = v119;
      while (1)
      {
        size_t v123 = (void *)*v118;
        if (!*v118) {
          break;
        }
        size_t v124 = v123[1] & v121;
        if (v124 == v122)
        {
          int v118 = (void *)*v118;
        }
        else
        {
          uint64_t v125 = v101[30];
          if (*(void *)(v125 + 8 * v124))
          {
            *int v118 = *v123;
            uint64_t v126 = 8 * v124;
            *size_t v123 = **(void **)(v101[30] + v126);
            **(void **)(v101[30] + v126) = v123;
          }
          else
          {
            *(void *)(v125 + 8 * v124) = v118;
            int v118 = v123;
            size_t v122 = v124;
          }
        }
      }
LABEL_258:
      unint64_t v102 = v101[31];
      if ((v102 & (v102 - 1)) != 0)
      {
        if (v102 <= v3) {
          size_t prime = v3 % v102;
        }
        else {
          size_t prime = v3;
        }
      }
      else
      {
        size_t prime = (v102 - 1) & v3;
      }
      goto LABEL_263;
    }
    if (v120 >= v114) {
      v120 %= v114;
    }
    *(void *)(v101[30] + 8 * v120) = v119;
    float v130 = (void *)*v118;
    if (!*v118) {
      goto LABEL_258;
    }
    while (1)
    {
      size_t v132 = v130[1];
      if (v132 >= v114) {
        v132 %= v114;
      }
      if (v132 != v120)
      {
        uint64_t v133 = v101[30];
        if (!*(void *)(v133 + 8 * v132))
        {
          *(void *)(v133 + 8 * v132) = v118;
          goto LABEL_244;
        }
        *int v118 = *v130;
        uint64_t v131 = 8 * v132;
        *float v130 = **(void **)(v101[30] + v131);
        **(void **)(v101[30] + v131) = v130;
        float v130 = v118;
      }
      size_t v132 = v120;
LABEL_244:
      int v118 = v130;
      float v130 = (void *)*v130;
      size_t v120 = v132;
      if (!v130) {
        goto LABEL_258;
      }
    }
  }
LABEL_263:
  uint64_t v135 = v101[30];
  int v136 = *(void **)(v135 + 8 * prime);
  if (v136)
  {
    *unsigned int v108 = *v136;
LABEL_271:
    *int v136 = v108;
    goto LABEL_272;
  }
  *unsigned int v108 = v101[32];
  v101[32] = (uint64_t)v108;
  *(void *)(v135 + 8 * prime) = v101 + 32;
  if (*v108)
  {
    unint64_t v137 = *(void *)(*v108 + 8);
    if ((v102 & (v102 - 1)) != 0)
    {
      if (v137 >= v102) {
        v137 %= v102;
      }
    }
    else
    {
      v137 &= v102 - 1;
    }
    int v136 = (void *)(v101[30] + 8 * v137);
    goto LABEL_271;
  }
LABEL_272:
  ++v101[33];
  if (!*((unsigned char *)v101 + 352))
  {
    *((unsigned char *)v101 + 352) = 1;
    if (*((unsigned char *)v101 + 368)) {
      *((unsigned char *)v101 + 368) = 0;
    }
    ++v101[47];
  }
  *(unsigned char *)(a1 + 80) = 1;
LABEL_277:
  unint64_t v138 = *(void *)(a1 + 176);
  if (v138)
  {
    uint8x8_t v139 = (uint8x8_t)vcnt_s8((int8x8_t)v138);
    v139.i16[0] = vaddlv_u8(v139);
    if (v139.u32[0] > 1uLL)
    {
      size_t prime = v3;
      if (v138 <= v3) {
        size_t prime = v3 % v138;
      }
    }
    else
    {
      size_t prime = (v138 - 1) & v3;
    }
    int v140 = (void **)*((void *)*v6 + prime);
    if (v140)
    {
      int8x16_t v141 = *v140;
      if (*v140)
      {
        if (v139.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v143 = v141[1];
            if (v143 == v3)
            {
              if (__PAIR64__(*((unsigned __int16 *)v141 + 9), *((unsigned __int16 *)v141 + 8)) == __PAIR64__(WORD1(v3), (unsigned __int16)v3)&& *((_DWORD *)v141 + 5) == HIDWORD(v3))
              {
                goto LABEL_361;
              }
            }
            else if ((v143 & (v138 - 1)) != prime)
            {
              goto LABEL_301;
            }
            int8x16_t v141 = (void *)*v141;
            if (!v141) {
              goto LABEL_301;
            }
          }
        }
        do
        {
          unint64_t v142 = v141[1];
          if (v142 == v3)
          {
            if (__PAIR64__(*((unsigned __int16 *)v141 + 9), *((unsigned __int16 *)v141 + 8)) == __PAIR64__(WORD1(v3), (unsigned __int16)v3)&& *((_DWORD *)v141 + 5) == HIDWORD(v3))
            {
              goto LABEL_361;
            }
          }
          else
          {
            if (v142 >= v138) {
              v142 %= v138;
            }
            if (v142 != prime) {
              break;
            }
          }
          int8x16_t v141 = (void *)*v141;
        }
        while (v141);
      }
    }
  }
LABEL_301:
  int8x16_t v141 = operator new(0x20uLL);
  *int8x16_t v141 = 0;
  v141[1] = v3;
  v141[2] = v3;
  v141[3] = 0;
  float v144 = (float)(unint64_t)(*(void *)(a1 + 192) + 1);
  float v145 = *(float *)(a1 + 200);
  if (v138 && (float)(v145 * (float)v138) >= v144)
  {
    unint64_t v3 = prime;
    goto LABEL_351;
  }
  BOOL v146 = 1;
  if (v138 >= 3) {
    BOOL v146 = (v138 & (v138 - 1)) != 0;
  }
  unint64_t v147 = v146 | (2 * v138);
  unint64_t v148 = vcvtps_u32_f32(v144 / v145);
  if (v147 <= v148) {
    size_t v149 = v148;
  }
  else {
    size_t v149 = v147;
  }
  if (v149 == 1)
  {
    size_t v149 = 2;
  }
  else if ((v149 & (v149 - 1)) != 0)
  {
    size_t v149 = std::__next_prime(v149);
    unint64_t v138 = *(void *)(a1 + 176);
  }
  if (v149 > v138) {
    goto LABEL_314;
  }
  if (v149 >= v138) {
    goto LABEL_339;
  }
  unint64_t v161 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 192) / *(float *)(a1 + 200));
  if (v138 < 3 || (uint8x8_t v162 = (uint8x8_t)vcnt_s8((int8x8_t)v138), v162.i16[0] = vaddlv_u8(v162), v162.u32[0] > 1uLL))
  {
    unint64_t v161 = std::__next_prime(v161);
  }
  else
  {
    uint64_t v163 = 1 << -(char)__clz(v161 - 1);
    if (v161 >= 2) {
      unint64_t v161 = v163;
    }
  }
  if (v149 <= v161) {
    size_t v149 = v161;
  }
  if (v149 < v138)
  {
    if (!v149)
    {
      unsigned int v170 = *v6;
      char *v6 = 0;
      if (v170) {
        operator delete(v170);
      }
      unint64_t v138 = 0;
      *(void *)(a1 + 176) = 0;
      goto LABEL_339;
    }
LABEL_314:
    if (!(v149 >> 61))
    {
      size_t v150 = operator new(8 * v149);
      int v151 = *v6;
      char *v6 = v150;
      if (v151) {
        operator delete(v151);
      }
      uint64_t v152 = 0;
      *(void *)(a1 + 176) = v149;
      do
        *((void *)*v6 + v152++) = 0;
      while (v149 != v152);
      uint64_t v154 = a1 + 184;
      long long v153 = *(void **)(a1 + 184);
      if (!v153) {
        goto LABEL_338;
      }
      size_t v155 = v153[1];
      size_t v156 = v149 - 1;
      if ((v149 & (v149 - 1)) == 0)
      {
        size_t v157 = v155 & v156;
        *((void *)*v6 + v157) = v154;
        for (uint64_t j = (void *)*v153; *v153; uint64_t j = (void *)*v153)
        {
          size_t v159 = j[1] & v156;
          if (v159 == v157)
          {
            long long v153 = j;
          }
          else if (*((void *)*v6 + v159))
          {
            *long long v153 = *j;
            uint64_t v160 = 8 * v159;
            *uint64_t j = **(void **)((char *)*v6 + v160);
            **(void **)((char *)*v6 + v160) = j;
          }
          else
          {
            *((void *)*v6 + v159) = v153;
            long long v153 = j;
            size_t v157 = v159;
          }
        }
LABEL_338:
        unint64_t v138 = v149;
        goto LABEL_339;
      }
      if (v155 >= v149) {
        v155 %= v149;
      }
      *((void *)*v6 + v155) = v154;
      unint64_t v164 = (void *)*v153;
      if (!*v153) {
        goto LABEL_338;
      }
      while (1)
      {
        size_t v166 = v164[1];
        if (v166 >= v149) {
          v166 %= v149;
        }
        if (v166 != v155)
        {
          if (!*((void *)*v6 + v166))
          {
            *((void *)*v6 + v166) = v153;
            goto LABEL_343;
          }
          *long long v153 = *v164;
          uint64_t v165 = 8 * v166;
          *unint64_t v164 = **(void **)((char *)*v6 + v165);
          **(void **)((char *)*v6 + v165) = v164;
          unint64_t v164 = v153;
        }
        size_t v166 = v155;
LABEL_343:
        long long v153 = v164;
        unint64_t v164 = (void *)*v164;
        size_t v155 = v166;
        if (!v164) {
          goto LABEL_338;
        }
      }
    }
LABEL_380:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v138 = *(void *)(a1 + 176);
LABEL_339:
  if ((v138 & (v138 - 1)) != 0)
  {
    if (v138 <= v3) {
      v3 %= v138;
    }
  }
  else
  {
    v3 &= v138 - 1;
  }
LABEL_351:
  unint64_t v167 = *v6;
  uint8x8_t v168 = (void *)*((void *)*v6 + v3);
  if (v168)
  {
    *int8x16_t v141 = *v168;
LABEL_359:
    *uint8x8_t v168 = v141;
    goto LABEL_360;
  }
  *int8x16_t v141 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v141;
  v167[v3] = a1 + 184;
  if (*v141)
  {
    unint64_t v169 = *(void *)(*v141 + 8);
    if ((v138 & (v138 - 1)) != 0)
    {
      if (v169 >= v138) {
        v169 %= v138;
      }
    }
    else
    {
      v169 &= v138 - 1;
    }
    uint8x8_t v168 = (char *)*v6 + 8 * v169;
    goto LABEL_359;
  }
LABEL_360:
  ++*(void *)(a1 + 192);
LABEL_361:
  v141[3] = v101;
}

void sub_1A1A213C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1A21410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 224);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))*(&off_1EF5909F0 + v15))(&a13, v13);
  }
  *(_DWORD *)(v13 + 224) = -1;
  _Unwind_Resume(exception_object);
}

void sub_1A1A21448(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a3 + 24);
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)(a2 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a3 + 40);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a2 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a3 + 56);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a2 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a3 + 64);
  *(void *)(a2 + 70) = *(void *)(a3 + 70);
  *(void *)(a2 + 64) = v7;
  uint64_t v8 = *(void *)(a3 + 88);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(void *)(a2 + 88) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a3 + 104);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a2 + 104) = v9;
  uint64_t v10 = *(void *)(a3 + 112);
  *(void *)(a2 + 112) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v11 = *(_WORD *)(a3 + 120);
  char v12 = *(unsigned char *)(a3 + 122);
  *(unsigned char *)(a2 + 124) = 0;
  *(unsigned char *)(a2 + 122) = v12;
  *(_WORD *)(a2 + 120) = v11;
  *(unsigned char *)(a2 + 140) = 0;
  if (*(unsigned char *)(a3 + 140))
  {
    *(_OWORD *)(a2 + 124) = *(_OWORD *)(a3 + 124);
    *(unsigned char *)(a2 + 140) = 1;
  }
  *(void *)(a2 + 144) = *(void *)(a3 + 144);
  *(unsigned char *)(a2 + 152) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  if (*(unsigned char *)(a3 + 208))
  {
    uint64_t v13 = *(void *)(a3 + 160);
    *(void *)(a2 + 152) = *(void *)(a3 + 152);
    *(void *)(a2 + 160) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 168) = *(unsigned char *)(a3 + 168);
    uint64_t v14 = *(void *)(a3 + 184);
    *(void *)(a2 + 176) = *(void *)(a3 + 176);
    *(void *)(a2 + 184) = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *(void *)(a3 + 200);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(void *)(a2 + 200) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 208) = 1;
  }
  __int16 v16 = *(_WORD *)(a3 + 216);
  *(unsigned char *)(a2 + 218) = *(unsigned char *)(a3 + 218);
  *(_WORD *)(a2 + 216) = v16;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::__unordered_map_hasher<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::__unordered_map_equal<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::allocator<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>>>::find<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>(void *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 224);
  if (v4 == -1)
  {
    uint64_t v5 = 299792458;
  }
  else
  {
    uint64_t v5 = ((uint64_t (*)(char *, uint64_t))off_1EF58FCE8[v4])(&v31, a2);
    uint64_t v6 = *(unsigned int *)(a2 + 224);
    if (v6 != -1)
    {
      int8x8_t v7 = (int8x8_t)a1[1];
      if (!*(void *)&v7) {
        return 0;
      }
      goto LABEL_7;
    }
  }
  uint64_t v6 = -1;
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
LABEL_7:
  uint64_t v8 = __ROR8__(v6 + 16, 16);
  unint64_t v9 = (0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v5)))) >> 47))) ^ v6;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v7);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = v9;
    if (v9 >= *(void *)&v7) {
      unint64_t v11 = v9 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = v9 & (*(void *)&v7 - 1);
  }
  char v12 = *(uint64_t ****)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v7 - 1;
      while (1)
      {
        uint64_t v15 = v13[1];
        if (v15 == (uint64_t *)v9)
        {
          uint64_t v16 = *((unsigned int *)v13 + 60);
          int v17 = *(_DWORD *)(a2 + 224);
          BOOL v19 = v17 == v16 && v17 != -1;
          if (v16 == -1 || !v19)
          {
            BOOL v20 = v17 == -1;
            if (v16 == -1) {
              BOOL v21 = v20;
            }
            else {
              BOOL v21 = v19;
            }
            if (v21) {
              return v13;
            }
          }
          else
          {
            unint64_t v33 = &v32;
            if (((uint64_t (*)(char **, uint64_t **, uint64_t))off_1EF58FD00[v16])(&v33, v13 + 2, a2)) {
              return v13;
            }
          }
        }
        else if (((unint64_t)v15 & v14) != v11)
        {
          return 0;
        }
        uint64_t v13 = (uint64_t **)*v13;
        if (!v13) {
          return v13;
        }
      }
    }
    do
    {
      unint64_t v22 = (unint64_t)v13[1];
      if (v22 == v9)
      {
        uint64_t v23 = *((unsigned int *)v13 + 60);
        int v24 = *(_DWORD *)(a2 + 224);
        BOOL v26 = v24 == v23 && v24 != -1;
        if (v23 == -1 || !v26)
        {
          BOOL v28 = v24 == -1;
          if (v23 == -1) {
            char v29 = v28;
          }
          else {
            char v29 = v26;
          }
          if (v29) {
            return v13;
          }
        }
        else
        {
          unint64_t v33 = &v32;
          if (((uint64_t (*)(char **, uint64_t **, uint64_t))off_1EF58FD00[v23])(&v33, v13 + 2, a2)) {
            return v13;
          }
        }
      }
      else
      {
        if (v22 >= *(void *)&v7) {
          v22 %= *(void *)&v7;
        }
        if (v22 != v11) {
          return 0;
        }
      }
      uint64_t v13 = (uint64_t **)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNKS_4hashINS_7variantIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEEEclB8nn180100ERKSC_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJS9_SA_SB_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::hash<md::BaseRenderBatchKey<ggl::VertexData>>::operator()(a2);
  unint64_t v4 = (((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      + *(void *)(a2 + 80)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  unint64_t v5 = (*(void *)(a2 + 96) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  unint64_t v6 = (*(unsigned __int8 *)(a2 + 120) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v7 = (*(void *)(a2 + 104) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  unint64_t v8 = (*(unsigned __int8 *)(a2 + 121) + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  unint64_t v9 = (*(unsigned __int8 *)(a2 + 122) + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  if (*(unsigned char *)(a2 + 217)) {
    unsigned __int8 v10 = *(unsigned char *)(a2 + 216);
  }
  else {
    unsigned __int8 v10 = 0;
  }
  unint64_t v11 = ((v9 << 6) + v10 + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  return ((*(unsigned __int8 *)(a2 + 218) | (v11 << 6)) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
}

uint64_t std::hash<md::BaseRenderBatchKey<ggl::VertexData>>::operator()(uint64_t a1)
{
  unint64_t v1 = (*(unsigned __int8 *)(a1 + 73)
      + ((*(void *)a1 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(*(void *)a1 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*(void *)a1 - 0x61C8864680B583EBLL);
  unint64_t v2 = ((*(unsigned __int8 *)(a1 + 74) | (v1 << 6)) + (v1 >> 2) - 0x61C8864680B583EBLL) ^ v1;
  unint64_t v3 = (*(void *)(a1 + 64) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583EBLL) ^ v2;
  unint64_t v4 = ((*(unsigned __int8 *)(a1 + 72) | (v3 << 6)) + (v3 >> 2) - 0x61C8864680B583EBLL) ^ v3;
  unint64_t v5 = ((*(unsigned __int8 *)(a1 + 75) | (v4 << 6)) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  unint64_t v6 = ((*(unsigned __int8 *)(a1 + 76) | (v5 << 6)) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v7 = (*(unsigned __int8 *)(a1 + 77) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8) {
    v7 ^= v8 - 0x61C8864680B583EBLL + (v7 << 6) + (v7 >> 2);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    v7 ^= (v7 << 6) - 0x61C8864680B583EBLL + (v7 >> 2) + v9;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    return ((v7 << 6) - 0x61C8864680B583EBLL + (v7 >> 2) + v10) ^ v7;
  }
  else {
    return v7;
  }
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 224);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Au, 282);
      operator new();
    }
    operator new();
  }
  unint64_t v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorIZZN2md21DaVinciGroundSettings31_parsePropertyValuesInZoomBlockEN2gm5RangeIhEEP12NSDictionaryEUb_E3__1EEJRNS0_6__baseILNS0_6_TraitE1EJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISN_EEEENSK_INSM_INSA_6MatrixIfLi3ELi1EEEEENSO_IST_EEEEEEEEEEDcT_DpT0_(uint64_t *a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (((*(uint64_t (**)(void))(*(void *)*a2 + 16))() & 1) == 0) {
    operator new();
  }
  if (v6)
  {
    (*(void (**)(void, uint64_t, uint64_t, int *))(*(void *)*a2 + 8))(*a2, v3 + 24, v3 + 25, &v7);
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(v3 + 32);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: Type mismatch for key: %@", buf, 0xCu);
    }
  }
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 96);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      operator new();
    }
    operator new();
  }
  int v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

void getMaterialFromCodec(void *a1, int8x8_t *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  __int8 v177 = a2[56].i8[0];
  void v175[2] = a3;
  char v176 = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = a2[50].i32[1];
  uint64_t v9 = (std::__shared_weak_count *)a5[1];
  v175[0] = *a5;
  v175[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gms::createMaterial<ggl::Texture2D>(a1, a3, a4, &v177, v8, v175);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v176;
  if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    int8x8_t v11 = a2[2];
    if (v11)
    {
LABEL_13:
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)&v11 + 24);
        uint64_t v13 = *(void *)(*(void *)&v11 + 32);
        unint64_t v169 = (int8x8_t *)v11;
        if (v12 != v13) {
          break;
        }
LABEL_12:
        int8x8_t v11 = *v169;
        if (!*(void *)v169) {
          goto LABEL_53;
        }
      }
      unint64_t v14 = *(unsigned __int8 *)(*(void *)&v11 + 16);
LABEL_18:
      float v16 = *(float *)(v12 + 4);
      float v17 = *(float *)(v12 + 8);
      float v19 = *(float *)(v12 + 12);
      int v18 = *(_DWORD *)(v12 + 16);
      if (v16 >= 0.04045) {
        float v20 = powf((float)(v16 * 0.94787) + 0.052133, 2.4);
      }
      else {
        float v20 = v16 * 0.077399;
      }
      if (v17 >= 0.04045) {
        float v21 = powf((float)(v17 * 0.94787) + 0.052133, 2.4);
      }
      else {
        float v21 = v17 * 0.077399;
      }
      if (v19 >= 0.04045) {
        float v22 = powf((float)(v19 * 0.94787) + 0.052133, 2.4);
      }
      else {
        float v22 = v19 * 0.077399;
      }
      float v171 = v20;
      float v172 = v21;
      float v173 = v22;
      int v174 = v18;
      int8x8_t v23 = a2[52];
      if (!*(void *)&v23) {
        goto LABEL_343;
      }
      uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        unint64_t v25 = v14;
        if (*(void *)&v23 <= v14) {
          unint64_t v25 = v14 % *(void *)&v23;
        }
      }
      else
      {
        unint64_t v25 = (v23.i32[0] - 1) & v14;
      }
      BOOL v26 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v25);
      if (!v26 || (uint64_t v27 = *v26) == 0) {
LABEL_343:
      }
        abort();
      BOOL v28 = (void *)*a1;
      if (v24.u32[0] < 2uLL)
      {
        uint64_t v29 = *(void *)&v23 - 1;
        while (1)
        {
          char v31 = v27[1];
          if (v31 == (uint64_t *)v14)
          {
            if (*((unsigned __int8 *)v27 + 16) == v14) {
              goto LABEL_47;
            }
          }
          else if (((unint64_t)v31 & v29) != v25)
          {
            goto LABEL_343;
          }
          uint64_t v27 = (uint64_t **)*v27;
          if (!v27) {
            goto LABEL_343;
          }
        }
      }
      while (1)
      {
        unint64_t v30 = (unint64_t)v27[1];
        if (v30 == v14)
        {
          if (*((unsigned __int8 *)v27 + 16) == v14)
          {
LABEL_47:
            switch(v14)
            {
              case 0x17:
                uint64_t v15 = (void (**)(void))(*v28 + 544);
LABEL_16:
                (*v15)();
                break;
              case 8:
                uint64_t v15 = (void (**)(void))(*v28 + 184);
                goto LABEL_16;
              case 7:
                uint64_t v15 = (void (**)(void))(*v28 + 160);
                goto LABEL_16;
            }
            v12 += 20;
            if (v12 == v13) {
              goto LABEL_12;
            }
            goto LABEL_18;
          }
        }
        else
        {
          if (v30 >= *(void *)&v23) {
            v30 %= *(void *)&v23;
          }
          if (v30 != v25) {
            goto LABEL_343;
          }
        }
        uint64_t v27 = (uint64_t **)*v27;
        if (!v27) {
          goto LABEL_343;
        }
      }
    }
  }
  else
  {
    int8x8_t v11 = a2[2];
    if (v11) {
      goto LABEL_13;
    }
  }
LABEL_53:
  int8x8_t v32 = a2[7];
  if (v32)
  {
    while (1)
    {
      unint64_t v33 = *(float **)(*(void *)&v32 + 24);
      unint64_t v34 = *(float **)(*(void *)&v32 + 32);
      unsigned int v170 = (int8x8_t *)v32;
      if (v33 != v34) {
        break;
      }
LABEL_55:
      int8x8_t v32 = *v170;
      if (!*(void *)v170) {
        goto LABEL_95;
      }
    }
    unint64_t v35 = *(unsigned __int8 *)(*(void *)&v32 + 16);
LABEL_61:
    float v37 = v33[1];
    float v38 = v33[2];
    float v39 = v33[3];
    if (v37 >= 0.04045) {
      float v40 = powf((float)(v37 * 0.94787) + 0.052133, 2.4);
    }
    else {
      float v40 = v37 * 0.077399;
    }
    if (v38 >= 0.04045) {
      float v41 = powf((float)(v38 * 0.94787) + 0.052133, 2.4);
    }
    else {
      float v41 = v38 * 0.077399;
    }
    if (v39 >= 0.04045) {
      float v42 = powf((float)(v39 * 0.94787) + 0.052133, 2.4);
    }
    else {
      float v42 = v39 * 0.077399;
    }
    float v171 = v40;
    float v172 = v41;
    float v173 = v42;
    int8x8_t v43 = a2[52];
    if (!*(void *)&v43) {
      goto LABEL_344;
    }
    uint8x8_t v44 = (uint8x8_t)vcnt_s8(v43);
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      unint64_t v45 = v35;
      if (*(void *)&v43 <= v35) {
        unint64_t v45 = v35 % *(void *)&v43;
      }
    }
    else
    {
      unint64_t v45 = (v43.i32[0] - 1) & v35;
    }
    uint64_t v46 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v45);
    if (!v46 || (uint64_t v47 = *v46) == 0) {
LABEL_344:
    }
      abort();
    uint64_t v48 = (void *)*a1;
    if (v44.u32[0] < 2uLL)
    {
      uint64_t v49 = *(void *)&v43 - 1;
      while (1)
      {
        unint64_t v51 = v47[1];
        if (v51 == (uint64_t *)v35)
        {
          if (*((unsigned __int8 *)v47 + 16) == v35) {
            goto LABEL_90;
          }
        }
        else if (((unint64_t)v51 & v49) != v45)
        {
          goto LABEL_344;
        }
        uint64_t v47 = (uint64_t **)*v47;
        if (!v47) {
          goto LABEL_344;
        }
      }
    }
    while (1)
    {
      unint64_t v50 = (unint64_t)v47[1];
      if (v50 == v35)
      {
        if (*((unsigned __int8 *)v47 + 16) == v35)
        {
LABEL_90:
          switch(v35)
          {
            case 0x1D:
              int v36 = (void (**)(void))(*v48 + 688);
LABEL_59:
              (*v36)();
              break;
            case 0x1C:
              int v36 = (void (**)(void))(*v48 + 664);
              goto LABEL_59;
            case 0x1B:
              int v36 = (void (**)(void))(*v48 + 640);
              goto LABEL_59;
          }
          v33 += 4;
          if (v33 == v34) {
            goto LABEL_55;
          }
          goto LABEL_61;
        }
      }
      else
      {
        if (v50 >= *(void *)&v43) {
          v50 %= *(void *)&v43;
        }
        if (v50 != v45) {
          goto LABEL_344;
        }
      }
      uint64_t v47 = (uint64_t **)*v47;
      if (!v47) {
        goto LABEL_344;
      }
    }
  }
LABEL_95:
  int8x8_t v52 = a2[12];
  if (!*(void *)&v52) {
    goto LABEL_96;
  }
  while (2)
  {
    uint64_t v55 = *(unsigned char **)(*(void *)&v52 + 24);
    uint64_t v54 = *(unsigned char **)(*(void *)&v52 + 32);
    int64_t v56 = v54 - v55;
    if (v54 == v55) {
      goto LABEL_99;
    }
    if (v56 < 0) {
      abort();
    }
    unint64_t v57 = *(unsigned __int8 *)(*(void *)&v52 + 16);
    uint8x8_t v58 = (char *)operator new(v54 - v55);
    size_t v59 = v56 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v58, v55, v59);
    if (!v59) {
      goto LABEL_98;
    }
    unint64_t v60 = &v58[v59];
    uint64_t v61 = v58;
    while (2)
    {
      int8x8_t v63 = a2[52];
      if (!*(void *)&v63) {
        goto LABEL_351;
      }
      uint8x8_t v64 = (uint8x8_t)vcnt_s8(v63);
      v64.i16[0] = vaddlv_u8(v64);
      if (v64.u32[0] > 1uLL)
      {
        unint64_t v65 = v57;
        if (*(void *)&v63 <= v57) {
          unint64_t v65 = v57 % *(void *)&v63;
        }
      }
      else
      {
        unint64_t v65 = (v63.i32[0] - 1) & v57;
      }
      BOOL v66 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v65);
      if (!v66 || (unint64_t v67 = *v66) == 0) {
LABEL_351:
      }
        abort();
      uint64_t v68 = (void *)*a1;
      if (v64.u32[0] < 2uLL)
      {
        uint64_t v69 = *(void *)&v63 - 1;
        while (1)
        {
          BOOL v71 = v67[1];
          if (v71 == (uint64_t *)v57)
          {
            if (*((unsigned __int8 *)v67 + 16) == v57) {
              goto LABEL_127;
            }
          }
          else if (((unint64_t)v71 & v69) != v65)
          {
            goto LABEL_351;
          }
          unint64_t v67 = (uint64_t **)*v67;
          if (!v67) {
            goto LABEL_351;
          }
        }
      }
      while (1)
      {
        unint64_t v70 = (unint64_t)v67[1];
        if (v70 == v57) {
          break;
        }
        if (v70 >= *(void *)&v63) {
          v70 %= *(void *)&v63;
        }
        if (v70 != v65) {
          goto LABEL_351;
        }
LABEL_117:
        unint64_t v67 = (uint64_t **)*v67;
        if (!v67) {
          goto LABEL_351;
        }
      }
      if (*((unsigned __int8 *)v67 + 16) != v57) {
        goto LABEL_117;
      }
LABEL_127:
      switch((int)v57)
      {
        case 5:
          int v62 = (void (**)(void))(*v68 + 112);
          goto LABEL_105;
        case 6:
          int v62 = (void (**)(void))(*v68 + 136);
          goto LABEL_105;
        case 10:
          int v62 = (void (**)(void))(*v68 + 232);
          goto LABEL_105;
        case 14:
          int v62 = (void (**)(void))(*v68 + 328);
          goto LABEL_105;
        case 15:
          int v62 = (void (**)(void))(*v68 + 352);
          goto LABEL_105;
        case 18:
          int v62 = (void (**)(void))(*v68 + 424);
          goto LABEL_105;
        case 19:
          int v62 = (void (**)(void))(*v68 + 448);
          goto LABEL_105;
        case 26:
          int v62 = (void (**)(void))(*v68 + 616);
          goto LABEL_105;
        case 35:
          int v62 = (void (**)(void))(*v68 + 832);
LABEL_105:
          (*v62)();
          break;
        default:
          break;
      }
      v61 += 8;
      if (v61 != v60) {
        continue;
      }
      break;
    }
LABEL_98:
    operator delete(v58);
LABEL_99:
    int8x8_t v52 = **(int8x8_t **)&v52;
    if (v52) {
      continue;
    }
    break;
  }
LABEL_96:
  int8x8_t v53 = a2[17];
  if (!*(void *)&v53) {
    goto LABEL_169;
  }
  while (2)
  {
    BOOL v73 = *(unsigned char **)(*(void *)&v53 + 24);
    int v72 = *(unsigned char **)(*(void *)&v53 + 32);
    size_t v74 = v72 - v73;
    if (v72 == v73) {
      goto LABEL_137;
    }
    if (0xAAAAAAAAAAAAAAABLL * v74 >= 0x5555555555555556) {
      abort();
    }
    unint64_t v75 = *(unsigned __int8 *)(*(void *)&v53 + 16);
    unint64_t v76 = (char *)operator new(v74);
    size_t v77 = 3 * ((v74 - 3) / 3) + 3;
    memcpy(v76, v73, v77);
    if (!v77) {
      goto LABEL_136;
    }
    float v78 = &v76[v77];
    float v79 = v76;
    while (2)
    {
      int8x8_t v81 = a2[52];
      if (!*(void *)&v81) {
        goto LABEL_352;
      }
      uint8x8_t v82 = (uint8x8_t)vcnt_s8(v81);
      v82.i16[0] = vaddlv_u8(v82);
      if (v82.u32[0] > 1uLL)
      {
        unint64_t v83 = v75;
        if (*(void *)&v81 <= v75) {
          unint64_t v83 = v75 % *(void *)&v81;
        }
      }
      else
      {
        unint64_t v83 = (v81.i32[0] - 1) & v75;
      }
      unsigned int v84 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v83);
      if (!v84 || (uint64_t v85 = *v84) == 0) {
LABEL_352:
      }
        abort();
      unint64_t v86 = (void *)*a1;
      if (v82.u32[0] < 2uLL)
      {
        uint64_t v87 = *(void *)&v81 - 1;
        while (1)
        {
          size_t v89 = v85[1];
          if (v89 == (uint64_t *)v75)
          {
            if (*((unsigned __int8 *)v85 + 16) == v75) {
              goto LABEL_165;
            }
          }
          else if (((unint64_t)v89 & v87) != v83)
          {
            goto LABEL_352;
          }
          uint64_t v85 = (uint64_t **)*v85;
          if (!v85) {
            goto LABEL_352;
          }
        }
      }
      while (2)
      {
        unint64_t v88 = (unint64_t)v85[1];
        if (v88 != v75)
        {
          if (v88 >= *(void *)&v81) {
            v88 %= *(void *)&v81;
          }
          if (v88 != v83) {
            goto LABEL_352;
          }
          goto LABEL_155;
        }
        if (*((unsigned __int8 *)v85 + 16) != v75)
        {
LABEL_155:
          uint64_t v85 = (uint64_t **)*v85;
          if (!v85) {
            goto LABEL_352;
          }
          continue;
        }
        break;
      }
LABEL_165:
      switch((int)v75)
      {
        case 1:
          BOOL v80 = (void (**)(void))(*v86 + 16);
          goto LABEL_143;
        case 2:
          BOOL v80 = (void (**)(void))(*v86 + 40);
          goto LABEL_143;
        case 3:
          BOOL v80 = (void (**)(void))(*v86 + 64);
          goto LABEL_143;
        case 4:
          BOOL v80 = (void (**)(void))(*v86 + 88);
LABEL_143:
          (*v80)();
          break;
        default:
          break;
      }
      v79 += 3;
      if (v79 != v78) {
        continue;
      }
      break;
    }
LABEL_136:
    operator delete(v76);
LABEL_137:
    int8x8_t v53 = **(int8x8_t **)&v53;
    if (v53) {
      continue;
    }
    break;
  }
LABEL_169:
  int8x8_t v90 = a2[27];
  if (!*(void *)&v90) {
    goto LABEL_170;
  }
  while (2)
  {
    uint64_t v96 = *(void *)(*(void *)&v90 + 24);
    uint64_t v97 = *(void *)(*(void *)&v90 + 32);
    if (v96 == v97) {
      goto LABEL_176;
    }
    unint64_t v98 = *(unsigned __int8 *)(*(void *)&v90 + 16);
    while (2)
    {
      int8x8_t v100 = a2[52];
      if (!*(void *)&v100) {
        goto LABEL_345;
      }
      uint8x8_t v101 = (uint8x8_t)vcnt_s8(v100);
      v101.i16[0] = vaddlv_u8(v101);
      if (v101.u32[0] > 1uLL)
      {
        unint64_t v102 = v98;
        if (*(void *)&v100 <= v98) {
          unint64_t v102 = v98 % *(void *)&v100;
        }
      }
      else
      {
        unint64_t v102 = (v100.i32[0] - 1) & v98;
      }
      uint8x8_t v103 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v102);
      if (!v103 || (unint64_t v104 = *v103) == 0) {
LABEL_345:
      }
        abort();
      unint64_t v105 = (void *)*a1;
      if (v101.u32[0] < 2uLL)
      {
        uint64_t v106 = *(void *)&v100 - 1;
        while (1)
        {
          unsigned int v108 = v104[1];
          if (v108 == (uint64_t *)v98)
          {
            if (*((unsigned __int8 *)v104 + 16) == v98) {
              goto LABEL_202;
            }
          }
          else if (((unint64_t)v108 & v106) != v102)
          {
            goto LABEL_345;
          }
          unint64_t v104 = (uint64_t **)*v104;
          if (!v104) {
            goto LABEL_345;
          }
        }
      }
      while (2)
      {
        unint64_t v107 = (unint64_t)v104[1];
        if (v107 != v98)
        {
          if (v107 >= *(void *)&v100) {
            v107 %= *(void *)&v100;
          }
          if (v107 != v102) {
            goto LABEL_345;
          }
          goto LABEL_192;
        }
        if (*((unsigned __int8 *)v104 + 16) != v98)
        {
LABEL_192:
          unint64_t v104 = (uint64_t **)*v104;
          if (!v104) {
            goto LABEL_345;
          }
          continue;
        }
        break;
      }
LABEL_202:
      switch((int)v98)
      {
        case 11:
          unsigned int v99 = (void (**)(void))(*v105 + 256);
          goto LABEL_180;
        case 16:
          unsigned int v99 = (void (**)(void))(*v105 + 376);
          goto LABEL_180;
        case 20:
          unsigned int v99 = (void (**)(void))(*v105 + 472);
          goto LABEL_180;
        case 24:
          unsigned int v99 = (void (**)(void))(*v105 + 568);
          goto LABEL_180;
        case 25:
          unsigned int v99 = (void (**)(void))(*v105 + 592);
LABEL_180:
          (*v99)();
          break;
        default:
          break;
      }
      v96 += 3;
      if (v96 != v97) {
        continue;
      }
      break;
    }
LABEL_176:
    int8x8_t v90 = **(int8x8_t **)&v90;
    if (v90) {
      continue;
    }
    break;
  }
LABEL_170:
  int8x8_t v91 = a2[32];
  if (!*(void *)&v91) {
    goto LABEL_171;
  }
  while (2)
  {
    uint64_t v109 = *(void *)(*(void *)&v91 + 24);
    uint64_t v110 = *(void *)(*(void *)&v91 + 32);
    if (v109 == v110) {
      goto LABEL_207;
    }
    unint64_t v111 = *(unsigned __int8 *)(*(void *)&v91 + 16);
    while (2)
    {
      int8x8_t v113 = a2[52];
      if (!*(void *)&v113) {
        goto LABEL_346;
      }
      uint8x8_t v114 = (uint8x8_t)vcnt_s8(v113);
      v114.i16[0] = vaddlv_u8(v114);
      if (v114.u32[0] > 1uLL)
      {
        unint64_t v115 = v111;
        if (*(void *)&v113 <= v111) {
          unint64_t v115 = v111 % *(void *)&v113;
        }
      }
      else
      {
        unint64_t v115 = (v113.i32[0] - 1) & v111;
      }
      unint64_t v116 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v115);
      if (!v116 || (uint64_t v117 = *v116) == 0) {
LABEL_346:
      }
        abort();
      int v118 = (void *)*a1;
      if (v114.u32[0] < 2uLL)
      {
        uint64_t v119 = *(void *)&v113 - 1;
        while (1)
        {
          size_t v121 = v117[1];
          if (v121 == (uint64_t *)v111)
          {
            if (*((unsigned __int8 *)v117 + 16) == v111) {
              goto LABEL_233;
            }
          }
          else if (((unint64_t)v121 & v119) != v115)
          {
            goto LABEL_346;
          }
          uint64_t v117 = (uint64_t **)*v117;
          if (!v117) {
            goto LABEL_346;
          }
        }
      }
      while (2)
      {
        unint64_t v120 = (unint64_t)v117[1];
        if (v120 != v111)
        {
          if (v120 >= *(void *)&v113) {
            v120 %= *(void *)&v113;
          }
          if (v120 != v115) {
            goto LABEL_346;
          }
          goto LABEL_223;
        }
        if (*((unsigned __int8 *)v117 + 16) != v111)
        {
LABEL_223:
          uint64_t v117 = (uint64_t **)*v117;
          if (!v117) {
            goto LABEL_346;
          }
          continue;
        }
        break;
      }
LABEL_233:
      switch((int)v111)
      {
        case 12:
          unint64_t v112 = (void (**)(void))(*v118 + 280);
          goto LABEL_211;
        case 13:
          unint64_t v112 = (void (**)(void))(*v118 + 304);
          goto LABEL_211;
        case 21:
          unint64_t v112 = (void (**)(void))(*v118 + 496);
          goto LABEL_211;
        case 22:
          unint64_t v112 = (void (**)(void))(*v118 + 520);
LABEL_211:
          (*v112)();
          break;
        default:
          break;
      }
      v109 += 12;
      if (v109 != v110) {
        continue;
      }
      break;
    }
LABEL_207:
    int8x8_t v91 = **(int8x8_t **)&v91;
    if (v91) {
      continue;
    }
    break;
  }
LABEL_171:
  int8x8_t v92 = a2[22];
  if (!*(void *)&v92) {
    goto LABEL_172;
  }
  while (2)
  {
    uint64_t v122 = *(void *)(*(void *)&v92 + 24);
    uint64_t v123 = *(void *)(*(void *)&v92 + 32);
    if (v122 == v123) {
      goto LABEL_237;
    }
    unint64_t v124 = *(unsigned __int8 *)(*(void *)&v92 + 16);
    while (2)
    {
      uint64_t v125 = (void *)*a1;
      float v171 = *(float *)(v122 + 4);
      int8x8_t v126 = a2[52];
      if (!*(void *)&v126) {
        goto LABEL_347;
      }
      uint8x8_t v127 = (uint8x8_t)vcnt_s8(v126);
      v127.i16[0] = vaddlv_u8(v127);
      if (v127.u32[0] > 1uLL)
      {
        unint64_t v128 = v124;
        if (*(void *)&v126 <= v124) {
          unint64_t v128 = v124 % *(void *)&v126;
        }
      }
      else
      {
        unint64_t v128 = (v126.i32[0] - 1) & v124;
      }
      uint64_t v129 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v128);
      if (!v129 || (float v130 = *v129) == 0) {
LABEL_347:
      }
        abort();
      if (v127.u32[0] < 2uLL)
      {
        uint64_t v131 = *(void *)&v126 - 1;
        while (1)
        {
          uint64_t v133 = v130[1];
          if (v133 == (uint64_t *)v124)
          {
            if (*((unsigned __int8 *)v130 + 16) == v124) {
              goto LABEL_261;
            }
          }
          else if (((unint64_t)v133 & v131) != v128)
          {
            goto LABEL_347;
          }
          float v130 = (uint64_t **)*v130;
          if (!v130) {
            goto LABEL_347;
          }
        }
      }
      while (2)
      {
        unint64_t v132 = (unint64_t)v130[1];
        if (v132 != v124)
        {
          if (v132 >= *(void *)&v126) {
            v132 %= *(void *)&v126;
          }
          if (v132 != v128) {
            goto LABEL_347;
          }
          goto LABEL_251;
        }
        if (*((unsigned __int8 *)v130 + 16) != v124)
        {
LABEL_251:
          float v130 = (uint64_t **)*v130;
          if (!v130) {
            goto LABEL_347;
          }
          continue;
        }
        break;
      }
LABEL_261:
      if (v124 == 9) {
        (*(void (**)(void *, uint64_t, uint64_t, float *, void))(*v125 + 208))(v125, v122, v122 + 1, &v171, *((unsigned __int8 *)v130 + 17));
      }
      v122 += 8;
      if (v122 != v123) {
        continue;
      }
      break;
    }
LABEL_237:
    int8x8_t v92 = **(int8x8_t **)&v92;
    if (v92) {
      continue;
    }
    break;
  }
LABEL_172:
  int8x8_t v93 = a2[37];
  if (v93)
  {
LABEL_264:
    uint64_t v134 = *(void *)(*(void *)&v93 + 24);
    uint64_t v135 = *(void *)(*(void *)&v93 + 32);
    if (v134 == v135) {
      goto LABEL_263;
    }
    unint64_t v136 = *(unsigned __int8 *)(*(void *)&v93 + 16);
    while (1)
    {
      int8x8_t v137 = a2[52];
      if (!*(void *)&v137) {
        goto LABEL_348;
      }
      uint8x8_t v138 = (uint8x8_t)vcnt_s8(v137);
      v138.i16[0] = vaddlv_u8(v138);
      if (v138.u32[0] > 1uLL)
      {
        unint64_t v139 = v136;
        if (*(void *)&v137 <= v136) {
          unint64_t v139 = v136 % *(void *)&v137;
        }
      }
      else
      {
        unint64_t v139 = (v137.i32[0] - 1) & v136;
      }
      int v140 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v139);
      if (!v140 || (int8x16_t v141 = *v140) == 0) {
LABEL_348:
      }
        abort();
      if (v138.u32[0] < 2uLL)
      {
        uint64_t v142 = *(void *)&v137 - 1;
        while (1)
        {
          float v144 = v141[1];
          if (v144 == (uint64_t *)v136)
          {
            if (*((unsigned __int8 *)v141 + 16) == v136) {
              goto LABEL_286;
            }
          }
          else if (((unint64_t)v144 & v142) != v139)
          {
            goto LABEL_348;
          }
          int8x16_t v141 = (uint64_t **)*v141;
          if (!v141) {
            goto LABEL_348;
          }
        }
      }
      while (1)
      {
        unint64_t v143 = (unint64_t)v141[1];
        if (v143 == v136) {
          break;
        }
        if (v143 >= *(void *)&v137) {
          v143 %= *(void *)&v137;
        }
        if (v143 != v139) {
          goto LABEL_348;
        }
LABEL_276:
        int8x16_t v141 = (uint64_t **)*v141;
        if (!v141) {
          goto LABEL_348;
        }
      }
      if (*((unsigned __int8 *)v141 + 16) != v136) {
        goto LABEL_276;
      }
LABEL_286:
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(*(void *)*a1 + 400))(*a1, v134, v134 + 1, v134 + 8, *((unsigned __int8 *)v141 + 17));
      v134 += 48;
      if (v134 == v135)
      {
LABEL_263:
        int8x8_t v93 = **(int8x8_t **)&v93;
        if (!*(void *)&v93) {
          break;
        }
        goto LABEL_264;
      }
    }
  }
  for (int8x8_t i = a2[42]; i; int8x8_t i = **(int8x8_t **)&i)
  {
    uint64_t v145 = *(void *)(*(void *)&i + 24);
    uint64_t v146 = *(void *)(*(void *)&i + 32);
    if (v145 == v146) {
      continue;
    }
    unint64_t v147 = *(unsigned __int8 *)(*(void *)&i + 16);
    do
    {
      int8x8_t v148 = a2[52];
      if (!*(void *)&v148) {
        goto LABEL_349;
      }
      uint8x8_t v149 = (uint8x8_t)vcnt_s8(v148);
      v149.i16[0] = vaddlv_u8(v149);
      if (v149.u32[0] > 1uLL)
      {
        unint64_t v150 = v147;
        if (*(void *)&v148 <= v147) {
          unint64_t v150 = v147 % *(void *)&v148;
        }
      }
      else
      {
        unint64_t v150 = (v148.i32[0] - 1) & v147;
      }
      int v151 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v150);
      if (!v151 || (uint64_t v152 = *v151) == 0) {
LABEL_349:
      }
        abort();
      if (v149.u32[0] < 2uLL)
      {
        uint64_t v153 = *(void *)&v148 - 1;
        while (1)
        {
          size_t v155 = v152[1];
          if (v155 == (uint64_t *)v147)
          {
            if (*((unsigned __int8 *)v152 + 16) == v147) {
              goto LABEL_311;
            }
          }
          else if (((unint64_t)v155 & v153) != v150)
          {
            goto LABEL_349;
          }
          uint64_t v152 = (uint64_t **)*v152;
          if (!v152) {
            goto LABEL_349;
          }
        }
      }
      while (1)
      {
        unint64_t v154 = (unint64_t)v152[1];
        if (v154 == v147) {
          break;
        }
        if (v154 >= *(void *)&v148) {
          v154 %= *(void *)&v148;
        }
        if (v154 != v150) {
          goto LABEL_349;
        }
LABEL_301:
        uint64_t v152 = (uint64_t **)*v152;
        if (!v152) {
          goto LABEL_349;
        }
      }
      if (*((unsigned __int8 *)v152 + 16) != v147) {
        goto LABEL_301;
      }
LABEL_311:
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(*(void *)*a1 + 712))(*a1, v145, v145 + 1, v145 + 8, *((unsigned __int8 *)v152 + 17));
      v145 += 48;
    }
    while (v145 != v146);
  }
  int8x8_t v95 = a2[47];
  if (!*(void *)&v95) {
    return;
  }
  while (2)
  {
    uint64_t v156 = *(void *)(*(void *)&v95 + 24);
    uint64_t v157 = *(void *)(*(void *)&v95 + 32);
    if (v156 == v157) {
      goto LABEL_313;
    }
    unint64_t v158 = *(unsigned __int8 *)(*(void *)&v95 + 16);
    while (2)
    {
      int8x8_t v160 = a2[52];
      if (!*(void *)&v160) {
        goto LABEL_350;
      }
      uint8x8_t v161 = (uint8x8_t)vcnt_s8(v160);
      v161.i16[0] = vaddlv_u8(v161);
      if (v161.u32[0] > 1uLL)
      {
        unint64_t v162 = v158;
        if (*(void *)&v160 <= v158) {
          unint64_t v162 = v158 % *(void *)&v160;
        }
      }
      else
      {
        unint64_t v162 = (v160.i32[0] - 1) & v158;
      }
      uint64_t v163 = *(uint64_t ****)(*(void *)&a2[51] + 8 * v162);
      if (!v163 || (unint64_t v164 = *v163) == 0) {
LABEL_350:
      }
        abort();
      uint64_t v165 = (void *)*a1;
      if (v161.u32[0] < 2uLL)
      {
        uint64_t v166 = *(void *)&v160 - 1;
        while (1)
        {
          uint8x8_t v168 = v164[1];
          if (v168 == (uint64_t *)v158)
          {
            if (*((unsigned __int8 *)v164 + 16) == v158) {
              goto LABEL_339;
            }
          }
          else if (((unint64_t)v168 & v166) != v162)
          {
            goto LABEL_350;
          }
          unint64_t v164 = (uint64_t **)*v164;
          if (!v164) {
            goto LABEL_350;
          }
        }
      }
      while (2)
      {
        unint64_t v167 = (unint64_t)v164[1];
        if (v167 != v158)
        {
          if (v167 >= *(void *)&v160) {
            v167 %= *(void *)&v160;
          }
          if (v167 != v162) {
            goto LABEL_350;
          }
          goto LABEL_329;
        }
        if (*((unsigned __int8 *)v164 + 16) != v158)
        {
LABEL_329:
          unint64_t v164 = (uint64_t **)*v164;
          if (!v164) {
            goto LABEL_350;
          }
          continue;
        }
        break;
      }
LABEL_339:
      switch((int)v158)
      {
        case 31:
          size_t v159 = (void (**)(void))(*v165 + 736);
          goto LABEL_317;
        case 32:
          size_t v159 = (void (**)(void))(*v165 + 760);
          goto LABEL_317;
        case 33:
          size_t v159 = (void (**)(void))(*v165 + 784);
          goto LABEL_317;
        case 34:
          size_t v159 = (void (**)(void))(*v165 + 808);
LABEL_317:
          (*v159)();
          break;
        default:
          break;
      }
      v156 += 16;
      if (v156 != v157) {
        continue;
      }
      break;
    }
LABEL_313:
    int8x8_t v95 = **(int8x8_t **)&v95;
    if (v95) {
      continue;
    }
    break;
  }
}

void sub_1A1A23658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A1A23674(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *gms::ZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, _OWORD *a4)
{
  uint64_t v5 = result;
  unsigned int v6 = *a2;
  unsigned int v7 = *a3;
  __int16 v8 = v6 | ((_WORD)v7 << 8);
  if (result[7])
  {
    uint64_t v9 = (uint64_t *)result[5];
    uint64_t v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      float v16 = (void *)result[5];
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = (uint64_t *)result[5];
      do
      {
        uint64_t v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            unint64_t v14 = (uint64_t **)v13;
            uint64_t v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            unint64_t v14 = (uint64_t **)v12[2];
            BOOL v15 = *v14 == v12;
            uint64_t v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        uint64_t v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      float v16 = (void *)result[5];
      do
      {
        unint64_t v17 = v11 >> 1;
        int v18 = v16;
        if (v11 != 1)
        {
          uint64_t v20 = v11 >> 1;
          float v21 = v16;
          do
          {
            int8x8_t v23 = (void *)v21[1];
            if (v23)
            {
              do
              {
                int v18 = v23;
                int8x8_t v23 = (void *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                int v18 = (void *)v21[2];
                BOOL v15 = *v18 == (void)v21;
                float v21 = v18;
              }
              while (!v15);
            }
            float v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 29) < v7)
        {
          float v19 = (void *)v18[1];
          if (v19)
          {
            do
            {
              float v16 = v19;
              float v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              float v16 = (void *)v18[2];
              BOOL v15 = *v16 == (void)v18;
              int v18 = v16;
            }
            while (!v15);
          }
          unint64_t v17 = v11 + ~v17;
        }
        unint64_t v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 28) >= v7)
    {
      if (v16 == v9) {
        goto LABEL_46;
      }
      uint64_t v27 = *v16;
      if (*v16)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = *(void *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = v16[2];
          BOOL v15 = *(void *)v28 == (void)v16;
          float v16 = (void *)v28;
        }
        while (v15);
      }
      if (v6 >= *(unsigned __int8 *)(v28 + 29))
      {
LABEL_46:
        uint64_t v29 = *v10;
        unint64_t v25 = (uint64_t **)(result + 6);
        if (!*v10) {
          goto LABEL_53;
        }
        while (1)
        {
          while (1)
          {
            unint64_t v25 = (uint64_t **)v29;
            unsigned int v30 = *((unsigned __int8 *)v29 + 29);
            if (v7 >= v30) {
              break;
            }
            uint64_t v29 = *v25;
            uint64_t v10 = v25;
            if (!*v25) {
              goto LABEL_53;
            }
          }
          if (v30 >= v7) {
            break;
          }
          uint64_t v29 = v25[1];
          if (!v29) {
            goto LABEL_52;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = (uint64_t **)(result + 6);
    uint64_t v24 = result[6];
    if (!v24)
    {
      unint64_t v25 = (uint64_t **)(result + 6);
LABEL_53:
      char v31 = operator new(0x30uLL);
      v31[14] = v8;
      *((_OWORD *)v31 + 2) = *a4;
      *(void *)char v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = v25;
      *uint64_t v10 = (uint64_t *)v31;
      uint64_t v32 = *(void *)v5[5];
      if (v32)
      {
        v5[5] = v32;
        unint64_t v33 = *v10;
      }
      else
      {
        unint64_t v33 = (uint64_t *)v31;
      }
      __n128 result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[6], v33);
      ++v5[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        unint64_t v25 = (uint64_t **)v24;
        unsigned int v26 = *(unsigned __int8 *)(v24 + 29);
        if (v7 >= v26) {
          break;
        }
        uint64_t v24 = (uint64_t)*v25;
        uint64_t v10 = v25;
        if (!*v25) {
          goto LABEL_53;
        }
      }
      if (v26 >= v7) {
        break;
      }
      uint64_t v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        uint64_t v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t *gms::ZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5 = result;
  unsigned int v6 = *a2;
  unsigned int v7 = *a3;
  __int16 v8 = v6 | ((_WORD)v7 << 8);
  if (result[7])
  {
    uint64_t v9 = (uint64_t *)result[5];
    uint64_t v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      float v16 = (void *)result[5];
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = (uint64_t *)result[5];
      do
      {
        uint64_t v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            unint64_t v14 = (uint64_t **)v13;
            uint64_t v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            unint64_t v14 = (uint64_t **)v12[2];
            BOOL v15 = *v14 == v12;
            uint64_t v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        uint64_t v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      float v16 = (void *)result[5];
      do
      {
        unint64_t v17 = v11 >> 1;
        int v18 = v16;
        if (v11 != 1)
        {
          uint64_t v20 = v11 >> 1;
          float v21 = v16;
          do
          {
            int8x8_t v23 = (void *)v21[1];
            if (v23)
            {
              do
              {
                int v18 = v23;
                int8x8_t v23 = (void *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                int v18 = (void *)v21[2];
                BOOL v15 = *v18 == (void)v21;
                float v21 = v18;
              }
              while (!v15);
            }
            float v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 29) < v7)
        {
          float v19 = (void *)v18[1];
          if (v19)
          {
            do
            {
              float v16 = v19;
              float v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              float v16 = (void *)v18[2];
              BOOL v15 = *v16 == (void)v18;
              int v18 = v16;
            }
            while (!v15);
          }
          unint64_t v17 = v11 + ~v17;
        }
        unint64_t v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 28) >= v7)
    {
      if (v16 == v9) {
        goto LABEL_46;
      }
      uint64_t v27 = *v16;
      if (*v16)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = *(void *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = v16[2];
          BOOL v15 = *(void *)v28 == (void)v16;
          float v16 = (void *)v28;
        }
        while (v15);
      }
      if (v6 >= *(unsigned __int8 *)(v28 + 29))
      {
LABEL_46:
        uint64_t v29 = *v10;
        unint64_t v25 = (uint64_t **)(result + 6);
        if (!*v10) {
          goto LABEL_53;
        }
        while (1)
        {
          while (1)
          {
            unint64_t v25 = (uint64_t **)v29;
            unsigned int v30 = *((unsigned __int8 *)v29 + 29);
            if (v7 >= v30) {
              break;
            }
            uint64_t v29 = *v25;
            uint64_t v10 = v25;
            if (!*v25) {
              goto LABEL_53;
            }
          }
          if (v30 >= v7) {
            break;
          }
          uint64_t v29 = v25[1];
          if (!v29) {
            goto LABEL_52;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = (uint64_t **)(result + 6);
    uint64_t v24 = result[6];
    if (!v24)
    {
      unint64_t v25 = (uint64_t **)(result + 6);
LABEL_53:
      char v31 = operator new(0x30uLL);
      v31[14] = v8;
      *((void *)v31 + 4) = *(void *)a4;
      *((_DWORD *)v31 + 10) = *(_DWORD *)(a4 + 8);
      *(void *)char v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = v25;
      *uint64_t v10 = (uint64_t *)v31;
      uint64_t v32 = *(void *)v5[5];
      if (v32)
      {
        v5[5] = v32;
        unint64_t v33 = *v10;
      }
      else
      {
        unint64_t v33 = (uint64_t *)v31;
      }
      __n128 result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[6], v33);
      ++v5[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        unint64_t v25 = (uint64_t **)v24;
        unsigned int v26 = *(unsigned __int8 *)(v24 + 29);
        if (v7 >= v26) {
          break;
        }
        uint64_t v24 = (uint64_t)*v25;
        uint64_t v10 = v25;
        if (!*v25) {
          goto LABEL_53;
        }
      }
      if (v26 >= v7) {
        break;
      }
      uint64_t v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        uint64_t v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addAlbedoFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 232);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Bu, 283);
      operator new();
    }
    operator new();
  }
  unsigned int v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 112);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      operator new();
    }
    operator new();
  }
  unsigned int v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

void std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>(float *a1, unsigned __int8 a2, __int16 a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2) {
                return;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = operator new(0x18uLL);
  *uint64_t v13 = 0;
  v13[1] = v6;
  *((_WORD *)v13 + 8) = a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        float v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v20 = operator new(8 * prime);
    float v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    uint64_t v24 = (uint64_t *)(a1 + 4);
    int8x8_t v23 = (void *)*((void *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (int8x8_t i = (void *)*v23; *v23; int8x8_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          int8x8_t v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          *int8x8_t v23 = *i;
          uint64_t v30 = 8 * v29;
          *int8x8_t i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          int8x8_t v23 = i;
          size_t v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    unint64_t v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *int8x8_t v23 = *v34;
        uint64_t v35 = 8 * v36;
        *unint64_t v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        unint64_t v34 = v23;
      }
      size_t v36 = v25;
LABEL_63:
      int8x8_t v23 = v34;
      unint64_t v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  float v37 = *(void **)a1;
  float v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    *uint64_t v13 = *v38;
LABEL_80:
    *float v38 = v13;
    goto LABEL_81;
  }
  *uint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    unint64_t v39 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    float v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_1A1A24374(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void gms::createMaterial<ggl::Texture2D>(void *a1, uint64_t a2, std::__shared_weak_count *a3, unsigned char *a4, int a5, uint64_t *a6)
{
  switch(*a4)
  {
    case 2:
      unint64_t v17 = operator new(0x120uLL);
      uint64_t v13 = v17;
      v17[1] = 0;
      v17[2] = 0;
      *unint64_t v17 = &unk_1EF58A078;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *a6;
      float v15 = (std::__shared_weak_count *)a6[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v16 = (char *)(v17 + 3);
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      void v17[3] = &unk_1EF566C48;
      *((_OWORD *)v17 + 2) = 0u;
      *((_OWORD *)v17 + 3) = 0u;
      *((_DWORD *)v17 + 16) = 1065353216;
      v17[9] = a2;
      v17[10] = a3;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v17 + 22) = a5;
      *((unsigned char *)v17 + 92) = *a4;
      v17[12] = v18;
      v17[13] = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
      v13[3] = &unk_1EF5635A0;
      *((_OWORD *)v13 + 7) = 0u;
      *((_OWORD *)v13 + 8) = 0u;
      *((_OWORD *)v13 + 9) = 0u;
      *((_OWORD *)v13 + 10) = 0u;
      *((_OWORD *)v13 + 11) = 0u;
      *((_OWORD *)v13 + 12) = 0u;
      *((_OWORD *)v13 + 13) = 0u;
      *((_OWORD *)v13 + 14) = 0u;
      *((_OWORD *)v13 + 15) = 0u;
      *((_OWORD *)v13 + 16) = 0u;
      *((_OWORD *)v13 + 17) = 0u;
      if (v15) {
        goto LABEL_109;
      }
      goto LABEL_110;
    case 3:
      float v19 = operator new(0xD0uLL);
      uint64_t v13 = v19;
      v19[1] = 0;
      v19[2] = 0;
      *float v19 = &unk_1EF58A158;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = *a6;
      float v15 = (std::__shared_weak_count *)a6[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v16 = (char *)(v19 + 3);
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v19[3] = &unk_1EF566C48;
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
      *((_DWORD *)v19 + 16) = 1065353216;
      v19[9] = a2;
      v19[10] = a3;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v19 + 22) = a5;
      *((unsigned char *)v19 + 92) = *a4;
      v19[12] = v20;
      v19[13] = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
      v13[3] = &unk_1EF564688;
      *((_OWORD *)v13 + 7) = 0u;
      *((_OWORD *)v13 + 8) = 0u;
      *((_OWORD *)v13 + 9) = 0u;
      *((_OWORD *)v13 + 10) = 0u;
      *((_OWORD *)v13 + 11) = 0u;
      *((_OWORD *)v13 + 12) = 0u;
      if (!v15) {
        goto LABEL_110;
      }
      goto LABEL_109;
    case 4:
      float v21 = operator new(0xC8uLL);
      uint64_t v13 = v21;
      v21[1] = 0;
      v21[2] = 0;
      *float v21 = &unk_1EF58A238;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = *a6;
      float v15 = (std::__shared_weak_count *)a6[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v16 = (char *)(v21 + 3);
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v21[3] = &unk_1EF566C48;
      *((_OWORD *)v21 + 2) = 0u;
      *((_OWORD *)v21 + 3) = 0u;
      *((_DWORD *)v21 + 16) = 1065353216;
      v21[9] = a2;
      v21[10] = a3;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v21 + 22) = a5;
      *((unsigned char *)v21 + 92) = *a4;
      v21[12] = v22;
      v21[13] = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
      v13[3] = &unk_1EF565738;
      *((_OWORD *)v13 + 7) = 0u;
      *((_OWORD *)v13 + 8) = 0u;
      *((_OWORD *)v13 + 9) = 0u;
      *((_OWORD *)v13 + 10) = 0u;
      *((_OWORD *)v13 + 11) = 0u;
      v13[24] = 0;
      if (!v15) {
        goto LABEL_110;
      }
      goto LABEL_109;
    case 5:
      int8x8_t v23 = operator new(0x100uLL);
      uint64_t v13 = v23;
      v23[1] = 0;
      v23[2] = 0;
      *int8x8_t v23 = &unk_1EF58A2A8;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = *a6;
      float v15 = (std::__shared_weak_count *)a6[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v16 = (char *)(v23 + 3);
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v23[3] = &unk_1EF566C48;
      *((_OWORD *)v23 + 2) = 0u;
      *((_OWORD *)v23 + 3) = 0u;
      *((_DWORD *)v23 + 16) = 1065353216;
      v23[9] = a2;
      v23[10] = a3;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v23 + 22) = a5;
      *((unsigned char *)v23 + 92) = *a4;
      v23[12] = v24;
      v23[13] = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
      v13[3] = &unk_1EF5663F0;
      *((_OWORD *)v13 + 7) = 0u;
      *((_OWORD *)v13 + 8) = 0u;
      *((_OWORD *)v13 + 9) = 0u;
      *((_OWORD *)v13 + 10) = 0u;
      *((_OWORD *)v13 + 11) = 0u;
      *((_OWORD *)v13 + 12) = 0u;
      *((_OWORD *)v13 + 13) = 0u;
      *((_OWORD *)v13 + 14) = 0u;
      *((_OWORD *)v13 + 15) = 0u;
      if (!v15) {
        goto LABEL_110;
      }
      goto LABEL_109;
    case 6:
      size_t v25 = operator new(0xA8uLL);
      uint64_t v13 = v25;
      v25[1] = 0;
      v25[2] = 0;
      *size_t v25 = &unk_1EF58A200;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = *a6;
      float v15 = (std::__shared_weak_count *)a6[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v16 = (char *)(v25 + 3);
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v25[3] = &unk_1EF566C48;
      *((_OWORD *)v25 + 2) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      *((_DWORD *)v25 + 16) = 1065353216;
      v25[9] = a2;
      v25[10] = a3;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v25 + 22) = a5;
      *((unsigned char *)v25 + 92) = *a4;
      v25[12] = v26;
      v25[13] = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
      v13[3] = &unk_1EF5653D0;
      *((_OWORD *)v13 + 7) = 0u;
      *((_OWORD *)v13 + 8) = 0u;
      *((_OWORD *)v13 + 9) = 0u;
      v13[20] = 0;
      if (v15) {
        goto LABEL_109;
      }
      goto LABEL_110;
    default:
      uint64_t v12 = operator new(0x140uLL);
      uint64_t v13 = v12;
      v12[1] = 0;
      v12[2] = 0;
      *uint64_t v12 = &unk_1EF58A120;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *a6;
      float v15 = (std::__shared_weak_count *)a6[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v16 = (char *)(v12 + 3);
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v12[3] = &unk_1EF566C48;
      *((_OWORD *)v12 + 2) = 0u;
      *((_OWORD *)v12 + 3) = 0u;
      *((_DWORD *)v12 + 16) = 1065353216;
      v12[9] = a2;
      v12[10] = a3;
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v12 + 22) = a5;
      *((unsigned char *)v12 + 92) = *a4;
      v12[12] = v14;
      v12[13] = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
      v13[3] = &unk_1EF564320;
      *((_OWORD *)v13 + 7) = 0u;
      *((_OWORD *)v13 + 8) = 0u;
      *((_OWORD *)v13 + 9) = 0u;
      *((_OWORD *)v13 + 10) = 0u;
      *((_OWORD *)v13 + 11) = 0u;
      *((_OWORD *)v13 + 12) = 0u;
      *((_OWORD *)v13 + 13) = 0u;
      *((_OWORD *)v13 + 14) = 0u;
      *((_OWORD *)v13 + 15) = 0u;
      *((_OWORD *)v13 + 16) = 0u;
      *((_OWORD *)v13 + 17) = 0u;
      *((_OWORD *)v13 + 18) = 0u;
      *((_OWORD *)v13 + 19) = 0u;
      if (!v15) {
        goto LABEL_110;
      }
LABEL_109:
      if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_110:
        if (!a3) {
          goto LABEL_114;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        if (!a3) {
          goto LABEL_114;
        }
      }
      if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
LABEL_114:
      *a1 = v16;
      a1[1] = v13;
      return;
  }
}

uint64_t *gms::ZoomablePropertyStore<gm::Matrix<float,3,1>>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v4 = result;
  unsigned int v5 = *a2;
  unsigned int v6 = *a3;
  __int16 v7 = (_WORD)v6 << 8;
  *(void *)&v33[2] = *(void *)a4;
  *(_DWORD *)&v33[10] = *(_DWORD *)(a4 + 8);
  if (result[7])
  {
    uint8x8_t v8 = (uint64_t *)result[5];
    uint64_t v9 = (uint64_t **)(result + 6);
    if (v8 == result + 6)
    {
      float v15 = (void *)result[5];
    }
    else
    {
      unint64_t v10 = 0;
      unint64_t v11 = (uint64_t *)result[5];
      do
      {
        uint64_t v12 = (uint64_t *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = (uint64_t **)v12;
            uint64_t v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (uint64_t **)v11[2];
            BOOL v14 = *v13 == v11;
            unint64_t v11 = (uint64_t *)v13;
          }
          while (!v14);
        }
        ++v10;
        unint64_t v11 = (uint64_t *)v13;
      }
      while (v13 != v9);
      float v15 = (void *)result[5];
      do
      {
        unint64_t v16 = v10 >> 1;
        unint64_t v17 = v15;
        if (v10 != 1)
        {
          uint64_t v19 = v10 >> 1;
          uint64_t v20 = v15;
          do
          {
            uint64_t v22 = (void *)v20[1];
            if (v22)
            {
              do
              {
                unint64_t v17 = v22;
                uint64_t v22 = (void *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                unint64_t v17 = (void *)v20[2];
                BOOL v14 = *v17 == (void)v20;
                uint64_t v20 = v17;
              }
              while (!v14);
            }
            uint64_t v20 = v17;
          }
          while (v19-- > 1);
        }
        if (*((unsigned __int8 *)v17 + 29) < v6)
        {
          uint64_t v18 = (void *)v17[1];
          if (v18)
          {
            do
            {
              float v15 = v18;
              uint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              float v15 = (void *)v17[2];
              BOOL v14 = *v15 == (void)v17;
              unint64_t v17 = v15;
            }
            while (!v14);
          }
          unint64_t v16 = v10 + ~v16;
        }
        unint64_t v10 = v16;
      }
      while (v16);
    }
    if (v15 == v9 || *((unsigned __int8 *)v15 + 28) >= v6)
    {
      if (v15 == v8) {
        goto LABEL_46;
      }
      uint64_t v26 = *v15;
      if (*v15)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = *(void *)(v26 + 8);
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = v15[2];
          BOOL v14 = *(void *)v27 == (void)v15;
          float v15 = (void *)v27;
        }
        while (v14);
      }
      if (v5 >= *(unsigned __int8 *)(v27 + 29))
      {
LABEL_46:
        uint64_t v28 = *v9;
        uint64_t v24 = (uint64_t **)(result + 6);
        if (!*v9) {
          goto LABEL_53;
        }
        while (1)
        {
          while (1)
          {
            uint64_t v24 = (uint64_t **)v28;
            unsigned int v29 = *((unsigned __int8 *)v28 + 29);
            if (v6 >= v29) {
              break;
            }
            uint64_t v28 = *v24;
            uint64_t v9 = v24;
            if (!*v24) {
              goto LABEL_53;
            }
          }
          if (v29 >= v6) {
            break;
          }
          uint64_t v28 = v24[1];
          if (!v28) {
            goto LABEL_52;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v9 = (uint64_t **)(result + 6);
    uint64_t v23 = result[6];
    if (!v23)
    {
      uint64_t v24 = (uint64_t **)(result + 6);
LABEL_53:
      uint64_t v30 = (char *)operator new(0x30uLL);
      *((_WORD *)v30 + 14) = v7 | v5;
      *(void *)(v30 + 30) = *(void *)v33;
      *(void *)(v30 + 36) = *(void *)&v33[6];
      *(void *)uint64_t v30 = 0;
      *((void *)v30 + 1) = 0;
      *((void *)v30 + 2) = v24;
      *uint64_t v9 = (uint64_t *)v30;
      uint64_t v31 = *(void *)v4[5];
      if (v31)
      {
        v4[5] = v31;
        uint8x8_t v32 = *v9;
      }
      else
      {
        uint8x8_t v32 = (uint64_t *)v30;
      }
      __n128 result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v32);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v24 = (uint64_t **)v23;
        unsigned int v25 = *(unsigned __int8 *)(v23 + 29);
        if (v6 >= v25) {
          break;
        }
        uint64_t v23 = (uint64_t)*v24;
        uint64_t v9 = v24;
        if (!*v24) {
          goto LABEL_53;
        }
      }
      if (v25 >= v6) {
        break;
      }
      uint64_t v23 = (uint64_t)v24[1];
      if (!v23)
      {
LABEL_52:
        uint64_t v9 = v24 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addAlbedoFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 168);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Bu, 283);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::NonZoomablePropertyStore<unsigned int>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  int v4 = *a4;
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(_DWORD *)(result + 12) = v4;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addZIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 120);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 9u, 265);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addColdAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 264);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x20u, 288);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addWetAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 272);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x21u, 289);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addHotAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 256);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Fu, 287);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addDryAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 280);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x22u, 290);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, long long *a4)
{
  long long v4 = *a4;
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(_OWORD *)(result + 12) = v4;
  return result;
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  int v5 = *((_DWORD *)a4 + 2);
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(_DWORD *)(result + 20) = v5;
  *(void *)(result + 12) = v4;
  return result;
}

uint64_t gms::ZoomablePropertyStore<gm::Matrix<float,3,1>>::zoomable()
{
  return 1;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addVisibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 136);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xBu, 267);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addGradientMaskFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 248);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Du, 285);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addGradientMaskFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 208);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x17u, 279);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addColorRampRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 224);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Eu, 286);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addColorRamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 176);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x11u, 273);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::NonZoomablePropertyStore<BOOL>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, char *a4)
{
  char v4 = *a4;
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(unsigned char *)(result + 9) = v4;
  return result;
}

uint64_t *gms::ZoomablePropertyStore<BOOL>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4)
{
  char v4 = result;
  unsigned int v5 = *a2;
  unsigned int v6 = *a3;
  __int16 v7 = (_WORD)v6 << 8;
  char v8 = *a4;
  if (result[7])
  {
    uint64_t v9 = (uint64_t *)result[5];
    unint64_t v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      unint64_t v16 = (void *)result[5];
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = (uint64_t *)result[5];
      do
      {
        uint64_t v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            BOOL v14 = (uint64_t **)v13;
            uint64_t v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            BOOL v14 = (uint64_t **)v12[2];
            BOOL v15 = *v14 == v12;
            uint64_t v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        uint64_t v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      unint64_t v16 = (void *)result[5];
      do
      {
        unint64_t v17 = v11 >> 1;
        uint64_t v18 = v16;
        if (v11 != 1)
        {
          uint64_t v20 = v11 >> 1;
          float v21 = v16;
          do
          {
            uint64_t v23 = (void *)v21[1];
            if (v23)
            {
              do
              {
                uint64_t v18 = v23;
                uint64_t v23 = (void *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v18 = (void *)v21[2];
                BOOL v15 = *v18 == (void)v21;
                float v21 = v18;
              }
              while (!v15);
            }
            float v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 26) < v6)
        {
          uint64_t v19 = (void *)v18[1];
          if (v19)
          {
            do
            {
              unint64_t v16 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              unint64_t v16 = (void *)v18[2];
              BOOL v15 = *v16 == (void)v18;
              uint64_t v18 = v16;
            }
            while (!v15);
          }
          unint64_t v17 = v11 + ~v17;
        }
        unint64_t v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 25) >= v6)
    {
      if (v16 == v9) {
        goto LABEL_46;
      }
      uint64_t v27 = *v16;
      if (*v16)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = *(void *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = v16[2];
          BOOL v15 = *(void *)v28 == (void)v16;
          unint64_t v16 = (void *)v28;
        }
        while (v15);
      }
      if (v5 >= *(unsigned __int8 *)(v28 + 26))
      {
LABEL_46:
        unsigned int v29 = *v10;
        unsigned int v25 = (uint64_t **)(result + 6);
        if (!*v10) {
          goto LABEL_53;
        }
        while (1)
        {
          while (1)
          {
            unsigned int v25 = (uint64_t **)v29;
            unsigned int v30 = *((unsigned __int8 *)v29 + 26);
            if (v6 >= v30) {
              break;
            }
            unsigned int v29 = *v25;
            unint64_t v10 = v25;
            if (!*v25) {
              goto LABEL_53;
            }
          }
          if (v30 >= v6) {
            break;
          }
          unsigned int v29 = v25[1];
          if (!v29) {
            goto LABEL_52;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = (uint64_t **)(result + 6);
    uint64_t v24 = result[6];
    if (!v24)
    {
      unsigned int v25 = (uint64_t **)(result + 6);
LABEL_53:
      uint64_t v31 = (char *)operator new(0x20uLL);
      *(_WORD *)(v31 + 25) = v7 | v5;
      v31[27] = v8;
      *(void *)uint64_t v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = v25;
      *unint64_t v10 = (uint64_t *)v31;
      uint64_t v32 = *(void *)v4[5];
      if (v32)
      {
        v4[5] = v32;
        uint64_t v33 = *v10;
      }
      else
      {
        uint64_t v33 = (uint64_t *)v31;
      }
      __n128 result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v33);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        unsigned int v25 = (uint64_t **)v24;
        unsigned int v26 = *(unsigned __int8 *)(v24 + 26);
        if (v6 >= v26) {
          break;
        }
        uint64_t v24 = (uint64_t)*v25;
        unint64_t v10 = v25;
        if (!*v25) {
          goto LABEL_53;
        }
      }
      if (v26 >= v6) {
        break;
      }
      uint64_t v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        unint64_t v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,3,1>>::zoomable()
{
  return 0;
}

void gms::NonZoomablePropertyStore<gm::Matrix<float,3,1>>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(void *)a1 = &unk_1EF565D08;
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  JUMPOUT(0x1A6239270);
}

void gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::addProperty(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  __int16 v37 = *a2 | (*a3 << 8);
  std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map((uint64_t)&v38, a4);
  if (!a1[7]) {
    goto LABEL_39;
  }
  unsigned int v5 = (void *)a1[5];
  unsigned int v6 = a1 + 6;
  if (v5 == a1 + 6)
  {
    uint64_t v12 = (void *)a1[5];
  }
  else
  {
    unint64_t v7 = 0;
    char v8 = (void *)a1[5];
    do
    {
      uint64_t v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          unint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          char v8 = v10;
        }
        while (!v11);
      }
      ++v7;
      char v8 = v10;
    }
    while (v10 != v6);
    uint64_t v12 = (void *)a1[5];
    do
    {
      unint64_t v13 = v7 >> 1;
      BOOL v14 = v12;
      if (v7 != 1)
      {
        uint64_t v16 = v7 >> 1;
        unint64_t v17 = v12;
        do
        {
          uint64_t v19 = (void *)v17[1];
          if (v19)
          {
            do
            {
              BOOL v14 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              BOOL v14 = (void *)v17[2];
              BOOL v11 = *v14 == (void)v17;
              unint64_t v17 = v14;
            }
            while (!v11);
          }
          unint64_t v17 = v14;
        }
        while (v16-- > 1);
      }
      if (*((unsigned __int8 *)v14 + 33) < HIBYTE(v37))
      {
        BOOL v15 = (void *)v14[1];
        if (v15)
        {
          do
          {
            uint64_t v12 = v15;
            BOOL v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v12 = (void *)v14[2];
            BOOL v11 = *v12 == (void)v14;
            BOOL v14 = v12;
          }
          while (!v11);
        }
        unint64_t v13 = v7 + ~v13;
      }
      unint64_t v7 = v13;
    }
    while (v13);
  }
  if (v12 == v6 || *((unsigned __int8 *)v12 + 32) >= HIBYTE(v37))
  {
    if (v12 == v5) {
      goto LABEL_39;
    }
    uint64_t v20 = *v12;
    if (*v12)
    {
      do
      {
        uint64_t v21 = v20;
        uint64_t v20 = *(void *)(v20 + 8);
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v21 = v12[2];
        BOOL v11 = *(void *)v21 == (void)v12;
        uint64_t v12 = (void *)v21;
      }
      while (v11);
    }
    if (v37 >= *(unsigned __int8 *)(v21 + 33))
    {
LABEL_39:
      uint64_t v23 = (uint64_t **)(a1 + 6);
      uint64_t v22 = (uint64_t *)a1[6];
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v24 = (uint64_t **)v22;
            unsigned int v25 = *((unsigned __int8 *)v22 + 33);
            if (HIBYTE(v37) >= v25) {
              break;
            }
            uint64_t v22 = *v24;
            uint64_t v23 = v24;
            if (!*v24) {
              goto LABEL_47;
            }
          }
          if (v25 >= HIBYTE(v37)) {
            break;
          }
          uint64_t v22 = v24[1];
          if (!v22)
          {
            uint64_t v23 = v24 + 1;
            goto LABEL_47;
          }
        }
      }
      else
      {
        uint64_t v24 = (uint64_t **)(a1 + 6);
LABEL_47:
        unsigned int v26 = (uint64_t *)operator new(0x50uLL);
        uint64_t v27 = v26;
        unsigned int v29 = __p;
        uint64_t v28 = v41;
        v26[7] = (uint64_t)__p;
        *((_WORD *)v26 + 16) = v37;
        unsigned int v30 = v38;
        unint64_t v31 = v39;
        float v38 = 0;
        unint64_t v39 = 0;
        v26[5] = (uint64_t)v30;
        v26[6] = v31;
        v26[8] = v28;
        *((_DWORD *)v26 + 18) = v42;
        if (v28)
        {
          unint64_t v32 = v29[1];
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v32 >= v31) {
              v32 %= v31;
            }
          }
          else
          {
            v32 &= v31 - 1;
          }
          v30[v32] = v26 + 7;
          __p = 0;
          uint64_t v41 = 0;
        }
        uint64_t *v26 = 0;
        v26[1] = 0;
        v26[2] = (uint64_t)v24;
        *uint64_t v23 = v26;
        uint64_t v33 = *(void *)a1[5];
        if (v33)
        {
          a1[5] = v33;
          uint64_t v27 = *v23;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[6], v27);
        ++a1[7];
      }
    }
  }
  unint64_t v34 = __p;
  if (__p)
  {
    do
    {
      uint64_t v35 = (void *)*v34;
      operator delete(v34);
      unint64_t v34 = v35;
    }
    while (v35);
  }
  size_t v36 = v38;
  float v38 = 0;
  if (v36) {
    operator delete(v36);
  }
}

void sub_1A1A26580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::addProperty(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  __int16 v37 = *a2 | (*a3 << 8);
  std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map((uint64_t)&v38, a4);
  if (!a1[7]) {
    goto LABEL_39;
  }
  unsigned int v5 = (void *)a1[5];
  unsigned int v6 = a1 + 6;
  if (v5 == a1 + 6)
  {
    uint64_t v12 = (void *)a1[5];
  }
  else
  {
    unint64_t v7 = 0;
    char v8 = (void *)a1[5];
    do
    {
      uint64_t v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          unint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          char v8 = v10;
        }
        while (!v11);
      }
      ++v7;
      char v8 = v10;
    }
    while (v10 != v6);
    uint64_t v12 = (void *)a1[5];
    do
    {
      unint64_t v13 = v7 >> 1;
      BOOL v14 = v12;
      if (v7 != 1)
      {
        uint64_t v16 = v7 >> 1;
        unint64_t v17 = v12;
        do
        {
          uint64_t v19 = (void *)v17[1];
          if (v19)
          {
            do
            {
              BOOL v14 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              BOOL v14 = (void *)v17[2];
              BOOL v11 = *v14 == (void)v17;
              unint64_t v17 = v14;
            }
            while (!v11);
          }
          unint64_t v17 = v14;
        }
        while (v16-- > 1);
      }
      if (*((unsigned __int8 *)v14 + 33) < HIBYTE(v37))
      {
        BOOL v15 = (void *)v14[1];
        if (v15)
        {
          do
          {
            uint64_t v12 = v15;
            BOOL v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v12 = (void *)v14[2];
            BOOL v11 = *v12 == (void)v14;
            BOOL v14 = v12;
          }
          while (!v11);
        }
        unint64_t v13 = v7 + ~v13;
      }
      unint64_t v7 = v13;
    }
    while (v13);
  }
  if (v12 == v6 || *((unsigned __int8 *)v12 + 32) >= HIBYTE(v37))
  {
    if (v12 == v5) {
      goto LABEL_39;
    }
    uint64_t v20 = *v12;
    if (*v12)
    {
      do
      {
        uint64_t v21 = v20;
        uint64_t v20 = *(void *)(v20 + 8);
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v21 = v12[2];
        BOOL v11 = *(void *)v21 == (void)v12;
        uint64_t v12 = (void *)v21;
      }
      while (v11);
    }
    if (v37 >= *(unsigned __int8 *)(v21 + 33))
    {
LABEL_39:
      uint64_t v23 = (uint64_t **)(a1 + 6);
      uint64_t v22 = (uint64_t *)a1[6];
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v24 = (uint64_t **)v22;
            unsigned int v25 = *((unsigned __int8 *)v22 + 33);
            if (HIBYTE(v37) >= v25) {
              break;
            }
            uint64_t v22 = *v24;
            uint64_t v23 = v24;
            if (!*v24) {
              goto LABEL_47;
            }
          }
          if (v25 >= HIBYTE(v37)) {
            break;
          }
          uint64_t v22 = v24[1];
          if (!v22)
          {
            uint64_t v23 = v24 + 1;
            goto LABEL_47;
          }
        }
      }
      else
      {
        uint64_t v24 = (uint64_t **)(a1 + 6);
LABEL_47:
        unsigned int v26 = (uint64_t *)operator new(0x50uLL);
        uint64_t v27 = v26;
        unsigned int v29 = __p;
        uint64_t v28 = v41;
        v26[7] = (uint64_t)__p;
        *((_WORD *)v26 + 16) = v37;
        unsigned int v30 = v38;
        unint64_t v31 = v39;
        float v38 = 0;
        unint64_t v39 = 0;
        v26[5] = (uint64_t)v30;
        v26[6] = v31;
        v26[8] = v28;
        *((_DWORD *)v26 + 18) = v42;
        if (v28)
        {
          unint64_t v32 = v29[1];
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v32 >= v31) {
              v32 %= v31;
            }
          }
          else
          {
            v32 &= v31 - 1;
          }
          v30[v32] = v26 + 7;
          __p = 0;
          uint64_t v41 = 0;
        }
        uint64_t *v26 = 0;
        v26[1] = 0;
        v26[2] = (uint64_t)v24;
        *uint64_t v23 = v26;
        uint64_t v33 = *(void *)a1[5];
        if (v33)
        {
          a1[5] = v33;
          uint64_t v27 = *v23;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[6], v27);
        ++a1[7];
      }
    }
  }
  unint64_t v34 = __p;
  if (__p)
  {
    do
    {
      uint64_t v35 = (void *)*v34;
      operator delete(v34);
      unint64_t v34 = v35;
    }
    while (v35);
  }
  size_t v36 = v38;
  float v38 = 0;
  if (v36) {
    operator delete(v36);
  }
}

void sub_1A1A26874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addZIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 9u, 265);
      operator new();
    }
    operator new();
  }
  unint64_t v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

void gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::addProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map((uint64_t)&__p, a4);
  char v37 = 1;
  unsigned int v5 = __p;
  unint64_t v6 = v33;
  __p = 0;
  unint64_t v33 = 0;
  float v38 = v5;
  unint64_t v39 = v6;
  unint64_t v7 = v34;
  float v40 = v34;
  uint64_t v41 = v35;
  int v42 = v36;
  if (v35)
  {
    unint64_t v8 = v34[1];
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v8 >= v6) {
        v8 %= v6;
      }
    }
    else
    {
      v8 &= v6 - 1;
    }
    *((void *)v5 + v8) = &v40;
    unint64_t v34 = 0;
    uint64_t v35 = 0;
  }
  else if (v34)
  {
    do
    {
      uint64_t v9 = (void *)*v7;
      operator delete(v7);
      unint64_t v7 = v9;
    }
    while (v9);
  }
  unint64_t v10 = __p;
  __p = 0;
  if (v10) {
    operator delete(v10);
  }
  if (v37)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      if (*(void *)(a1 + 40))
      {
        BOOL v11 = *(void **)(a1 + 32);
        if (v11)
        {
          do
          {
            uint64_t v12 = (void *)*v11;
            operator delete(v11);
            BOOL v11 = v12;
          }
          while (v12);
        }
        *(void *)(a1 + 32) = 0;
        uint64_t v13 = *(void *)(a1 + 24);
        if (v13)
        {
          for (uint64_t i = 0; i != v13; ++i)
            *(void *)(*(void *)(a1 + 16) + 8 * i) = 0;
        }
        *(void *)(a1 + 40) = 0;
      }
      BOOL v15 = v38;
      float v38 = 0;
      uint64_t v16 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v15;
      if (v16) {
        operator delete(v16);
      }
      unint64_t v17 = v39;
      uint64_t v18 = v40;
      *(void *)(a1 + 32) = v40;
      *(void *)(a1 + 24) = v17;
      unint64_t v39 = 0;
      uint64_t v19 = v41;
      *(void *)(a1 + 40) = v41;
      *(_DWORD *)(a1 + 48) = v42;
      if (v19)
      {
        unint64_t v20 = v18[1];
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v20 >= v17) {
            v20 %= v17;
          }
        }
        else
        {
          v20 &= v17 - 1;
        }
        *(void *)(*(void *)(a1 + 16) + 8 * v20) = a1 + 32;
        float v40 = 0;
        uint64_t v41 = 0;
      }
      if (!v37) {
        return;
      }
LABEL_45:
      unsigned int v29 = v40;
      if (v40)
      {
        do
        {
          unsigned int v30 = (void *)*v29;
          operator delete(v29);
          unsigned int v29 = v30;
        }
        while (v30);
      }
      unint64_t v31 = v38;
      float v38 = 0;
      if (v31) {
        operator delete(v31);
      }
      return;
    }
    uint64_t v24 = v38;
    unint64_t v25 = v39;
    unsigned int v26 = v40;
    uint64_t v27 = v41;
    *(void *)(a1 + 32) = v40;
    float v38 = 0;
    unint64_t v39 = 0;
    *(void *)(a1 + 16) = v24;
    *(void *)(a1 + 24) = v25;
    *(void *)(a1 + 40) = v27;
    *(_DWORD *)(a1 + 48) = v42;
    if (v27)
    {
      unint64_t v28 = v26[1];
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v28 >= v25) {
          v28 %= v25;
        }
      }
      else
      {
        v28 &= v25 - 1;
      }
      v24[v28] = a1 + 32;
      float v40 = 0;
      uint64_t v41 = 0;
    }
    *(unsigned char *)(a1 + 8) = 1;
    if (v37) {
      goto LABEL_45;
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v21 = *(void **)(a1 + 32);
    if (v21)
    {
      do
      {
        uint64_t v22 = (void *)*v21;
        operator delete(v21);
        uint64_t v21 = v22;
      }
      while (v22);
    }
    uint64_t v23 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v23) {
      operator delete(v23);
    }
    *(unsigned char *)(a1 + 8) = 0;
    if (v37) {
      goto LABEL_45;
    }
  }
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 144);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      operator new();
    }
    operator new();
  }
  unint64_t v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,2,1>>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)(result + 12) = v4;
  return result;
}

uint64_t *gms::ZoomablePropertyStore<unsigned char>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4)
{
  uint64_t v4 = result;
  unsigned int v5 = *a2;
  unsigned int v6 = *a3;
  __int16 v7 = (_WORD)v6 << 8;
  char v8 = *a4;
  if (result[7])
  {
    uint64_t v9 = (uint64_t *)result[5];
    unint64_t v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      uint64_t v16 = (void *)result[5];
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = (uint64_t *)result[5];
      do
      {
        uint64_t v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            BOOL v14 = (uint64_t **)v13;
            uint64_t v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            BOOL v14 = (uint64_t **)v12[2];
            BOOL v15 = *v14 == v12;
            uint64_t v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        uint64_t v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      uint64_t v16 = (void *)result[5];
      do
      {
        unint64_t v17 = v11 >> 1;
        uint64_t v18 = v16;
        if (v11 != 1)
        {
          uint64_t v20 = v11 >> 1;
          uint64_t v21 = v16;
          do
          {
            uint64_t v23 = (void *)v21[1];
            if (v23)
            {
              do
              {
                uint64_t v18 = v23;
                uint64_t v23 = (void *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v18 = (void *)v21[2];
                BOOL v15 = *v18 == (void)v21;
                uint64_t v21 = v18;
              }
              while (!v15);
            }
            uint64_t v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 26) < v6)
        {
          uint64_t v19 = (void *)v18[1];
          if (v19)
          {
            do
            {
              uint64_t v16 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v16 = (void *)v18[2];
              BOOL v15 = *v16 == (void)v18;
              uint64_t v18 = v16;
            }
            while (!v15);
          }
          unint64_t v17 = v11 + ~v17;
        }
        unint64_t v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 25) >= v6)
    {
      if (v16 == v9) {
        goto LABEL_46;
      }
      uint64_t v27 = *v16;
      if (*v16)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = *(void *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = v16[2];
          BOOL v15 = *(void *)v28 == (void)v16;
          uint64_t v16 = (void *)v28;
        }
        while (v15);
      }
      if (v5 >= *(unsigned __int8 *)(v28 + 26))
      {
LABEL_46:
        unsigned int v29 = *v10;
        unint64_t v25 = (uint64_t **)(result + 6);
        if (!*v10) {
          goto LABEL_53;
        }
        while (1)
        {
          while (1)
          {
            unint64_t v25 = (uint64_t **)v29;
            unsigned int v30 = *((unsigned __int8 *)v29 + 26);
            if (v6 >= v30) {
              break;
            }
            unsigned int v29 = *v25;
            unint64_t v10 = v25;
            if (!*v25) {
              goto LABEL_53;
            }
          }
          if (v30 >= v6) {
            break;
          }
          unsigned int v29 = v25[1];
          if (!v29) {
            goto LABEL_52;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = (uint64_t **)(result + 6);
    uint64_t v24 = result[6];
    if (!v24)
    {
      unint64_t v25 = (uint64_t **)(result + 6);
LABEL_53:
      unint64_t v31 = (char *)operator new(0x20uLL);
      *(_WORD *)(v31 + 25) = v7 | v5;
      v31[27] = v8;
      *(void *)unint64_t v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = v25;
      *unint64_t v10 = (uint64_t *)v31;
      uint64_t v32 = *(void *)v4[5];
      if (v32)
      {
        v4[5] = v32;
        unint64_t v33 = *v10;
      }
      else
      {
        unint64_t v33 = (uint64_t *)v31;
      }
      __n128 result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v33);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        unint64_t v25 = (uint64_t **)v24;
        unsigned int v26 = *(unsigned __int8 *)(v24 + 26);
        if (v6 >= v26) {
          break;
        }
        uint64_t v24 = (uint64_t)*v25;
        unint64_t v10 = v25;
        if (!*v25) {
          goto LABEL_53;
        }
      }
      if (v26 >= v6) {
        break;
      }
      uint64_t v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        unint64_t v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addZIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 104);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 9u, 265);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addTiling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 120);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xCu, 268);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addAlbedo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 88);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 1u, 257);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addGradientMaskFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 176);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Du, 285);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addGradientMaskFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 144);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x17u, 279);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addMetallicFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 128);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 6u, 262);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addCastShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 168);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x10u, 272);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

uint64_t gms::NonZoomablePropertyStore<float>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  int v4 = *a4;
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(_DWORD *)(result + 12) = v4;
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addVisibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 112);
  if (!v6)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xBu, 267);
      operator new();
    }
    operator new();
  }
  __int16 v7 = *(uint64_t (**)(void))(*(void *)v6 + 8);
  return v7();
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>,std::allocator<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  int v4 = (void *)gdc::Registry::storage<md::ls::PreviousResourceStamp>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::PassCount>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::FrameGraphBuilder>(v3);
  __int16 v7 = (void *)v6;
  char v8 = (void *)(v6 + 32);
  if (v4[8] - v4[7] < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    char v8 = v4 + 4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v8[4] - v8[3]) {
    char v8 = (void *)(v5 + 32);
  }
  size_t v74 = v8;
  unint64_t v75 = (void *)v6;
  unint64_t v76 = v4;
  size_t v77 = (void *)v5;
  uint64_t v9 = (void *)v8[3];
  unint64_t v10 = (void *)v8[4];
  float v78 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v74))
  {
    unint64_t v11 = v9 + 1;
    do
    {
      uint64_t v9 = v11;
      float v78 = v11;
      if (v11 == v10) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v74);
      unint64_t v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    __n128 result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    __n128 result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    int v72 = v10;
    BOOL v73 = result;
    do
    {
      while (1)
      {
        *__n128 result = *v9;
        unint64_t v14 = *v9;
        uint64_t v15 = HIDWORD(*v9);
        unint64_t v16 = *v9 >> 39;
        uint64_t v17 = v7[4];
        if (v16 < (v7[5] - v17) >> 3
          && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
          && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
              uint64_t v21 = v7[7],
              uint64_t v20 = v7[8],
              v19 < (v20 - v21) >> 3)
          && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
        {
          uint64_t v24 = (md::FrameGraphBuilder **)(v7[10] + 8 * v19);
        }
        else
        {
          uint64_t v24 = (md::FrameGraphBuilder **)v7[11];
        }
        uint64_t v25 = v4[4];
        if (v16 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
        {
          uint64_t v32 = (uint64_t *)(v4[10] + 8 * v27);
        }
        else
        {
          uint64_t v32 = (uint64_t *)v4[11];
        }
        unint64_t v33 = ***(uint64_t ****)(a1 + 8);
        if (v33 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v33 != 0xD369A4D92C8FFE6CLL)
        {
          unint64_t v34 = v33 + 5;
          do
          {
            uint64_t v35 = *v34;
            v34 += 5;
          }
          while (v35 != 0xD369A4D92C8FFE6CLL);
          unint64_t v33 = v34 - 5;
        }
        uint64_t v36 = v33[3];
        char v37 = (std::__shared_weak_count *)v33[4];
        if (v37)
        {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 8))(v36);
        if (v38)
        {
          unint64_t v39 = (md::PassList *)v38;
          float v40 = ***(uint64_t ****)(a1 + 8);
          if (v40 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v40 != 0xC94DD89A7B09BE9CLL)
          {
            uint64_t v41 = v40 + 5;
            do
            {
              uint64_t v42 = *v41;
              v41 += 5;
            }
            while (v42 != 0xC94DD89A7B09BE9CLL);
            float v40 = v41 - 5;
          }
          uint64_t v44 = v40[3];
          uint64_t v43 = (std::__shared_weak_count *)v40[4];
          if (v43)
          {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          (*(void (**)(uint64_t))(*(void *)v44 + 88))(v44);
          unint64_t v10 = v72;
          if (v45)
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            uint64_t v46 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              BOOL v80 = "service<md::RenderLayerProvider>()->getAllCommandBuffers().empty()";
              __int16 v81 = 2080;
              uint8x8_t v82 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/BuildFrameGraphModule.mm";
              __int16 v83 = 1024;
              int v84 = 248;
              _os_log_impl(&dword_1A1780000, v46, OS_LOG_TYPE_ERROR, "Ensure we cleared weak pointers to command buffers before: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
          }
          md::PassList::updateGraphState(v39, *v24, *v32);
        }
        uint64_t v9 = (void *)v74[4];
        uint64_t v47 = v78 + 1;
        float v78 = v47;
        if (v47 != v9) {
          break;
        }
        __n128 result = v73;
        if (v10 == v9) {
          goto LABEL_86;
        }
      }
      uint64_t v48 = v75[4];
      __n128 result = v73;
      do
      {
        unint64_t v49 = *((unsigned int *)v47 + 1);
        unint64_t v50 = v49 >> 7;
        if (v49 >> 7 < (v75[5] - v48) >> 3)
        {
          uint64_t v51 = *(void *)(v48 + 8 * v50);
          if (v51)
          {
            uint64_t v52 = v49 & 0x7F;
            unint64_t v53 = *(unsigned __int16 *)(v51 + 2 * v52);
            uint64_t v54 = v75[7];
            uint64_t v55 = v75[8];
            if (v53 < (v55 - v54) >> 3)
            {
              uint64_t v56 = v54 + 8 * v53;
              if (v56 != v55 && *(_DWORD *)(v56 + 4) == v49)
              {
                uint64_t v58 = v76[4];
                if (v50 < (v76[5] - v58) >> 3)
                {
                  uint64_t v59 = *(void *)(v58 + 8 * v50);
                  if (v59)
                  {
                    unint64_t v60 = *(unsigned __int16 *)(v59 + 2 * v52);
                    uint64_t v61 = v76[7];
                    uint64_t v62 = v76[8];
                    if (v60 < (v62 - v61) >> 3)
                    {
                      uint64_t v63 = v61 + 8 * v60;
                      if (v63 != v62 && *(_DWORD *)(v63 + 4) == v49)
                      {
                        uint64_t v65 = v77[4];
                        if (v50 < (v77[5] - v65) >> 3)
                        {
                          uint64_t v66 = *(void *)(v65 + 8 * v50);
                          if (v66)
                          {
                            unint64_t v67 = *(unsigned __int16 *)(v66 + 2 * v52);
                            uint64_t v69 = v77[7];
                            uint64_t v68 = v77[8];
                            if (v67 < (v68 - v69) >> 3)
                            {
                              uint64_t v70 = v69 + 8 * v67;
                              if (*(_DWORD *)(v70 + 4) == v49 && v70 != v68)
                              {
                                uint64_t v9 = v47;
                                goto LABEL_81;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v47;
      }
      while (v47 != v9);
      uint64_t v47 = v9;
LABEL_81:
      float v78 = v47;
    }
    while (v10 != v9);
  }
LABEL_86:
  *__n128 result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t md::RenderLayerProviderWrapper::getAllCommandBuffers(md::RenderLayerProviderWrapper *this)
{
  return *(void *)(*((void *)this + 1) + 48);
}

uint64_t gdc::Registry::storage<md::ls::PreviousResourceStamp>(int8x8_t *a1)
{
  unint64_t v10 = 0xE0E0BD7780EC271BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE0E0BD7780EC271BLL;
    if (*(void *)&v1 <= 0xE0E0BD7780EC271BLL) {
      unint64_t v3 = 0xE0E0BD7780EC271BLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE0E0BD7780EC271BLL;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE0E0BD7780EC271BLL)
      {
        if (v5[2] == 0xE0E0BD7780EC271BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE0E0BD7780EC271BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE0E0BD7780EC271BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A28354(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint8x8_t v2 = *(int8x8_t **)(a2 + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::FrameBufferDesc>(v2);
  int v4 = (void *)gdc::Registry::storage<md::ls::PassSSAOConfiguration>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PassMapEngineCapabilities>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(v2);
  uint64_t v7 = gdc::Registry::storage<md::ls::PassCount>(v2);
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) >= v6[8] - v6[7]) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = (void *)v7;
  }
  if (v3[8] - v3[7] >= v8[8] - v8[7]) {
    uint64_t v9 = v8 + 4;
  }
  else {
    uint64_t v9 = v3 + 4;
  }
  if (v4[8] - v4[7] >= v9[4] - v9[3]) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v4 + 4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v10[4] - v10[3]) {
    unint64_t v10 = (void *)(v5 + 32);
  }
  unint64_t v11 = (void *)v10[3];
  unint64_t v98 = v10;
  unsigned int v99 = v6;
  int8x8_t v100 = (void *)v7;
  uint8x8_t v101 = v3;
  unint64_t v102 = v4;
  uint8x8_t v103 = (void *)v5;
  unint64_t v104 = v11;
  uint64_t v12 = (void *)v10[4];
  if (v12 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v98))
  {
    uint64_t v13 = v11 + 1;
    do
    {
      unint64_t v11 = v13;
      unint64_t v104 = v13;
      if (v13 == v12) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v98);
      uint64_t v13 = v11 + 1;
    }
    while (!isValid);
  }
  uint64_t v15 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v96 = v16;
  while (v96 != v11)
  {
    *uint64_t v15 = *v11;
    unint64_t v18 = *v11;
    uint64_t v19 = HIDWORD(*v11);
    unint64_t v20 = *v11 >> 39;
    uint64_t v21 = v6[4];
    if (v20 < (v6[5] - v21) >> 3
      && (uint64_t v22 = *(void *)(v21 + 8 * v20)) != 0
      && (unint64_t v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)), v25 = v6[7], v24 = v6[8], v23 < (v24 - v25) >> 3)
      && ((v26 = v25 + 8 * v23, v26 != v24) ? (BOOL v27 = *(_DWORD *)(v26 + 4) == v19) : (BOOL v27 = 0), v27))
    {
      uint64_t v28 = (uint64_t *)(v6[10] + 8 * v23);
    }
    else
    {
      uint64_t v28 = (uint64_t *)v6[11];
    }
    uint64_t v29 = v3[4];
    if (v20 < (v3[5] - v29) >> 3
      && (uint64_t v30 = *(void *)(v29 + 8 * v20)) != 0
      && (unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)), v33 = v3[7], v32 = v3[8], v31 < (v32 - v33) >> 3)
      && ((v34 = v33 + 8 * v31, v34 != v32) ? (BOOL v35 = *(_DWORD *)(v34 + 4) == v19) : (BOOL v35 = 0), v35))
    {
      uint64_t v36 = v3[11];
      uint64_t v37 = v3[10] + 8 * v31;
    }
    else
    {
      uint64_t v36 = v3[11];
      uint64_t v37 = v36;
    }
    if (v37 == v36) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = (int32x2_t *)v37;
    }
    uint64_t v39 = v4[4];
    if (v20 < (v4[5] - v39) >> 3
      && (uint64_t v40 = *(void *)(v39 + 8 * v20)) != 0
      && (unint64_t v41 = *(unsigned __int16 *)(v40 + 2 * (HIDWORD(v18) & 0x7F)), v43 = v4[7], v42 = v4[8], v41 < (v42 - v43) >> 3)
      && ((v44 = v43 + 8 * v41, v44 != v42) ? (BOOL v45 = *(_DWORD *)(v44 + 4) == v19) : (BOOL v45 = 0), v45))
    {
      uint64_t v46 = v4[11];
      uint64_t v47 = v4[10] + 12 * v41;
    }
    else
    {
      uint64_t v46 = v4[11];
      uint64_t v47 = v46;
    }
    if (v47 == v46) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = v47;
    }
    unint64_t v49 = ***(uint64_t ****)(a1 + 8);
    if (v49 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v49 != 0xD369A4D92C8FFE6CLL)
    {
      unint64_t v50 = v49 + 5;
      do
      {
        uint64_t v51 = *v50;
        v50 += 5;
      }
      while (v51 != 0xD369A4D92C8FFE6CLL);
      unint64_t v49 = v50 - 5;
    }
    uint64_t v52 = v49[3];
    unint64_t v53 = (std::__shared_weak_count *)v49[4];
    if (v53)
    {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 8))(v52);
    if (v54)
    {
      char v56 = *(unsigned char *)(v48 + 10);
      uint64_t v55 = (unsigned char *)(v48 + 10);
      md::StandardPassList::_buildSSAOFrameGraph(v54, v56, (float *)(v55 - 6), (uint64_t)(v55 - 1), v38, *v28);
      if (*v55)
      {
        unint64_t v57 = *(void **)(a1 + 8);
        uint64_t v58 = HIDWORD(*v15);
        uint64_t v59 = *v15 << 32;
        v106[0] = &unk_1EF522E98;
        v106[1] = v59;
        int v107 = v58;
        unint64_t v111 = v109;
        unsigned int v108 = v106;
        v109[0] = &unk_1EF522E98;
        v109[1] = v59;
        int v110 = v58;
        int v112 = 0;
        ecs2::Runtime::queueCommand(v57, (uint64_t)v109);
        if (v112 != -1) {
          ((void (*)(char *, void *))off_1EF5911E0[v112])(&v105, v109);
        }
        int v112 = -1;
        if (v108 == v106)
        {
          (*(void (**)(void *))(v106[0] + 32))(v106);
        }
        else if (v108)
        {
          (*(void (**)(void))(*v108 + 40))();
        }
      }
    }
    unint64_t v11 = (void *)v98[4];
    uint64_t v17 = v104 + 1;
    unint64_t v104 = v17;
    if (v17 != v11)
    {
      uint64_t v60 = v99[4];
      while (1)
      {
        unint64_t v61 = *((unsigned int *)v17 + 1);
        unint64_t v62 = v61 >> 7;
        if (v61 >> 7 < (v99[5] - v60) >> 3)
        {
          uint64_t v63 = *(void *)(v60 + 8 * v62);
          if (v63)
          {
            uint64_t v64 = v61 & 0x7F;
            unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
            uint64_t v67 = v99[7];
            uint64_t v66 = v99[8];
            if (v65 < (v66 - v67) >> 3)
            {
              uint64_t v68 = v67 + 8 * v65;
              if (v68 != v66 && *(_DWORD *)(v68 + 4) == v61)
              {
                uint64_t v70 = v100[4];
                if (v62 < (v100[5] - v70) >> 3)
                {
                  uint64_t v71 = *(void *)(v70 + 8 * v62);
                  if (v71)
                  {
                    unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                    uint64_t v74 = v100[7];
                    uint64_t v73 = v100[8];
                    if (v72 < (v73 - v74) >> 3)
                    {
                      uint64_t v75 = v74 + 8 * v72;
                      if (v75 != v73 && *(_DWORD *)(v75 + 4) == v61)
                      {
                        uint64_t v77 = v101[4];
                        if (v62 < (v101[5] - v77) >> 3)
                        {
                          uint64_t v78 = *(void *)(v77 + 8 * v62);
                          if (v78)
                          {
                            unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                            uint64_t v81 = v101[7];
                            uint64_t v80 = v101[8];
                            if (v79 < (v80 - v81) >> 3)
                            {
                              uint64_t v82 = v81 + 8 * v79;
                              if (v82 != v80 && *(_DWORD *)(v82 + 4) == v61)
                              {
                                uint64_t v84 = v102[4];
                                if (v62 < (v102[5] - v84) >> 3)
                                {
                                  uint64_t v85 = *(void *)(v84 + 8 * v62);
                                  if (v85)
                                  {
                                    unint64_t v86 = *(unsigned __int16 *)(v85 + 2 * v64);
                                    uint64_t v88 = v102[7];
                                    uint64_t v87 = v102[8];
                                    if (v86 < (v87 - v88) >> 3)
                                    {
                                      uint64_t v89 = v88 + 8 * v86;
                                      if (v89 != v87 && *(_DWORD *)(v89 + 4) == v61)
                                      {
                                        uint64_t v90 = v103[4];
                                        if (v62 < (v103[5] - v90) >> 3)
                                        {
                                          uint64_t v91 = *(void *)(v90 + 8 * v62);
                                          if (v91)
                                          {
                                            unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * v64);
                                            uint64_t v93 = v103[7];
                                            uint64_t v94 = v103[8];
                                            if (v92 < (v94 - v93) >> 3)
                                            {
                                              uint64_t v95 = v93 + 8 * v92;
                                              if (*(_DWORD *)(v95 + 4) == v61 && v95 != v94) {
                                                break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v17 == v11)
        {
          uint64_t v17 = v11;
          goto LABEL_20;
        }
      }
      unint64_t v11 = v17;
LABEL_20:
      unint64_t v104 = v17;
    }
  }
  *uint64_t v15 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

uint64_t gdc::Registry::storage<md::ls::PassMapEngineCapabilities>(int8x8_t *a1)
{
  unint64_t v10 = 0xC5E1935BF25B6EDALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC5E1935BF25B6EDALL;
    if (*(void *)&v1 <= 0xC5E1935BF25B6EDALL) {
      unint64_t v3 = 0xC5E1935BF25B6EDALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC5E1935BF25B6EDALL;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC5E1935BF25B6EDALL)
      {
        if (v5[2] == 0xC5E1935BF25B6EDALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC5E1935BF25B6EDALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC5E1935BF25B6EDALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A28C7C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassSSAOConfiguration>(int8x8_t *a1)
{
  uint64_t v10 = 0x73C8822C1D168C4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x73C8822C1D168C4;
    if (*(void *)&v1 <= 0x73C8822C1D168C4uLL) {
      uint64_t v3 = 0x73C8822C1D168C4uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x73C8822C1D168C4;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x73C8822C1D168C4)
      {
        if (v5[2] == 0x73C8822C1D168C4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x73C8822C1D168C4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x73C8822C1D168C4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A28EEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint8x8_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::FrameBufferDesc>(v2);
  int v4 = (void *)gdc::Registry::storage<md::ls::PassRoutelineMaskConfiguration>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PassDeviceCapabilities>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(v2);
  uint64_t v7 = gdc::Registry::storage<md::ls::PassCount>(v2);
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) >= v6[8] - v6[7]) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = (void *)v7;
  }
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= v8[8] - v8[7]) {
    uint64_t v9 = (uint64_t)(v8 + 4);
  }
  else {
    uint64_t v9 = v3 + 32;
  }
  if (v4[8] - v4[7] >= *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = v4 + 4;
  }
  if (v5[8] - v5[7] < v10[4] - v10[3]) {
    uint64_t v10 = v5 + 4;
  }
  unint64_t v11 = (void *)v10[3];
  unint64_t v104 = v10;
  char v105 = v6;
  uint64_t v106 = (void *)v7;
  int v107 = (void *)v3;
  uint8x8_t v101 = (void *)v3;
  unsigned int v108 = v4;
  uint64_t v109 = v5;
  int v110 = v11;
  uint64_t v12 = (void *)v10[4];
  if (v12 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v104))
  {
    uint64_t v13 = v11 + 1;
    do
    {
      unint64_t v11 = v13;
      int v110 = v13;
      if (v13 == v12) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v104);
      uint64_t v13 = v11 + 1;
    }
    while (!isValid);
  }
  unint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  unint64_t v102 = (void *)result;
  int8x8_t v100 = v16;
  while (v100 != v11)
  {
    *unint64_t v102 = *v11;
    unint64_t v18 = *v11;
    uint64_t v19 = HIDWORD(*v11);
    unint64_t v20 = *v11 >> 39;
    uint64_t v21 = v6[4];
    if (v20 < (v6[5] - v21) >> 3
      && (uint64_t v22 = *(void *)(v21 + 8 * v20)) != 0
      && (unint64_t v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)), v25 = v6[7], v24 = v6[8], v23 < (v24 - v25) >> 3)
      && ((v26 = v25 + 8 * v23, v26 != v24) ? (BOOL v27 = *(_DWORD *)(v26 + 4) == v19) : (BOOL v27 = 0), v27))
    {
      uint64_t v28 = (uint64_t *)(v6[10] + 8 * v23);
    }
    else
    {
      uint64_t v28 = (uint64_t *)v6[11];
    }
    uint64_t v29 = v101[4];
    if (v20 < (v101[5] - v29) >> 3
      && (uint64_t v30 = *(void *)(v29 + 8 * v20)) != 0
      && (unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)),
          uint64_t v33 = v101[7],
          uint64_t v32 = v101[8],
          v31 < (v32 - v33) >> 3)
      && ((v34 = v33 + 8 * v31, v34 != v32) ? (BOOL v35 = *(_DWORD *)(v34 + 4) == v19) : (BOOL v35 = 0), v35))
    {
      uint64_t v36 = v101[11];
      uint64_t v37 = v101[10] + 8 * v31;
    }
    else
    {
      uint64_t v36 = v101[11];
      uint64_t v37 = v36;
    }
    if (v37 == v36) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v37;
    }
    uint64_t v39 = v4[4];
    if (v20 < (v4[5] - v39) >> 3
      && (uint64_t v40 = *(void *)(v39 + 8 * v20)) != 0
      && (unint64_t v41 = *(unsigned __int16 *)(v40 + 2 * (HIDWORD(v18) & 0x7F)), v43 = v4[7], v42 = v4[8], v41 < (v42 - v43) >> 3)
      && ((v44 = v43 + 8 * v41, v44 != v42) ? (BOOL v45 = *(_DWORD *)(v44 + 4) == v19) : (BOOL v45 = 0), v45))
    {
      uint64_t v46 = v4[11];
      uint64_t v47 = v4[10] + 8 * v41;
    }
    else
    {
      uint64_t v46 = v4[11];
      uint64_t v47 = v46;
    }
    if (v47 == v46) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = v47;
    }
    uint64_t v49 = v5[4];
    if (v20 < (v5[5] - v49) >> 3
      && (uint64_t v50 = *(void *)(v49 + 8 * v20)) != 0
      && (unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (HIDWORD(v18) & 0x7F)), v53 = v5[7], v52 = v5[8], v51 < (v52 - v53) >> 3)
      && ((uint64_t v54 = v53 + 8 * v51, v54 != v52) ? (v55 = *(_DWORD *)(v54 + 4) == v19) : (v55 = 0), v55))
    {
      uint64_t v56 = v5[11];
      uint64_t v57 = v5[10] + v51;
    }
    else
    {
      uint64_t v56 = v5[11];
      uint64_t v57 = v56;
    }
    if (v57 == v56) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = v57;
    }
    uint64_t v59 = ***(uint64_t ****)(a1 + 8);
    if (v59 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v59 != 0xD369A4D92C8FFE6CLL)
    {
      uint64_t v60 = v59 + 5;
      do
      {
        uint64_t v61 = *v60;
        v60 += 5;
      }
      while (v61 != 0xD369A4D92C8FFE6CLL);
      uint64_t v59 = v60 - 5;
    }
    uint64_t v63 = v59[3];
    unint64_t v62 = (std::__shared_weak_count *)v59[4];
    if (v62)
    {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 8))(v63);
    if (result)
    {
      unint64_t result = md::StandardPassList::_buildRouteLineMaskFrameGraph(result, *(unsigned char *)(v48 + 4), (int *)v48, v58, v38, *v28);
      if (*(unsigned char *)(v48 + 4))
      {
        uint64_t v64 = *(void **)(a1 + 8);
        uint64_t v65 = HIDWORD(*v102);
        uint64_t v66 = *v102 << 32;
        v112[0] = &unk_1EF523CF0;
        v112[1] = v66;
        int v113 = v65;
        uint8x8_t v114 = v112;
        uint64_t v117 = v115;
        v115[0] = &unk_1EF523CF0;
        v115[1] = v66;
        int v116 = v65;
        int v118 = 0;
        ecs2::Runtime::queueCommand(v64, (uint64_t)v115);
        if (v118 != -1) {
          ((void (*)(char *, void *))off_1EF5911E0[v118])(&v111, v115);
        }
        int v118 = -1;
        unint64_t result = (unint64_t)v114;
        if (v114 == v112)
        {
          unint64_t result = (*(uint64_t (**)(void *))(v112[0] + 32))(v112);
        }
        else if (v114)
        {
          unint64_t result = (*(uint64_t (**)(void))(*v114 + 40))();
        }
      }
    }
    unint64_t v11 = (void *)v104[4];
    uint64_t v17 = v110 + 1;
    int v110 = v17;
    if (v17 != v11)
    {
      uint64_t v67 = v105[4];
      while (1)
      {
        unint64_t v68 = *((unsigned int *)v17 + 1);
        unint64_t v69 = v68 >> 7;
        if (v68 >> 7 < (v105[5] - v67) >> 3)
        {
          uint64_t v70 = *(void *)(v67 + 8 * v69);
          if (v70)
          {
            unint64_t result = v68 & 0x7F;
            unint64_t v71 = *(unsigned __int16 *)(v70 + 2 * result);
            uint64_t v73 = v105[7];
            uint64_t v72 = v105[8];
            if (v71 < (v72 - v73) >> 3)
            {
              uint64_t v74 = v73 + 8 * v71;
              if (v74 != v72 && *(_DWORD *)(v74 + 4) == v68)
              {
                uint64_t v76 = v106[4];
                if (v69 < (v106[5] - v76) >> 3)
                {
                  uint64_t v77 = *(void *)(v76 + 8 * v69);
                  if (v77)
                  {
                    unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * result);
                    uint64_t v80 = v106[7];
                    uint64_t v79 = v106[8];
                    if (v78 < (v79 - v80) >> 3)
                    {
                      uint64_t v81 = v80 + 8 * v78;
                      if (v81 != v79 && *(_DWORD *)(v81 + 4) == v68)
                      {
                        uint64_t v83 = v107[4];
                        if (v69 < (v107[5] - v83) >> 3)
                        {
                          uint64_t v84 = *(void *)(v83 + 8 * v69);
                          if (v84)
                          {
                            unint64_t v85 = *(unsigned __int16 *)(v84 + 2 * result);
                            uint64_t v87 = v107[7];
                            uint64_t v86 = v107[8];
                            if (v85 < (v86 - v87) >> 3)
                            {
                              uint64_t v88 = v87 + 8 * v85;
                              if (v88 != v86 && *(_DWORD *)(v88 + 4) == v68)
                              {
                                uint64_t v90 = v108[4];
                                if (v69 < (v108[5] - v90) >> 3)
                                {
                                  uint64_t v91 = *(void *)(v90 + 8 * v69);
                                  if (v91)
                                  {
                                    unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * result);
                                    uint64_t v94 = v108[7];
                                    uint64_t v93 = v108[8];
                                    if (v92 < (v93 - v94) >> 3)
                                    {
                                      uint64_t v95 = v94 + 8 * v92;
                                      if (v95 != v93 && *(_DWORD *)(v95 + 4) == v68)
                                      {
                                        uint64_t v96 = v109[4];
                                        if (v69 < (v109[5] - v96) >> 3)
                                        {
                                          uint64_t v97 = *(void *)(v96 + 8 * v69);
                                          if (v97)
                                          {
                                            unint64_t result = *(unsigned __int16 *)(v97 + 2 * result);
                                            uint64_t v98 = v109[7];
                                            uint64_t v99 = v109[8];
                                            if (result < (v99 - v98) >> 3)
                                            {
                                              unint64_t result = v98 + 8 * result;
                                              if (*(_DWORD *)(result + 4) == v68 && result != v99) {
                                                break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v17 == v11)
        {
          uint64_t v17 = v11;
          goto LABEL_20;
        }
      }
      unint64_t v11 = v17;
LABEL_20:
      int v110 = v17;
    }
  }
  *unint64_t v102 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::PassDeviceCapabilities>(int8x8_t *a1)
{
  uint64_t v10 = 0x6738F9098C50E08CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6738F9098C50E08CLL;
    if (*(void *)&v1 <= 0x6738F9098C50E08CuLL) {
      uint64_t v3 = 0x6738F9098C50E08CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6738F9098C50E08CLL;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6738F9098C50E08CLL)
      {
        if (v5[2] == 0x6738F9098C50E08CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6738F9098C50E08CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6738F9098C50E08CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A29884(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FrameBufferDesc>(int8x8_t *a1)
{
  unint64_t v10 = 0xD7B05696AE714D71;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD7B05696AE714D71;
    if (*(void *)&v1 <= 0xD7B05696AE714D71) {
      unint64_t v3 = 0xD7B05696AE714D71 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD7B05696AE714D71;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD7B05696AE714D71)
      {
        if (v5[2] == 0xD7B05696AE714D71) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD7B05696AE714D71) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD7B05696AE714D71) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A29AF4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[7] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  unint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  uint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  uint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  uint64_t v22 = (void *)a1[3];
  uint64_t v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3) {
    return 0;
  }
  uint64_t v24 = *(void *)(v23 + 8 * v3);
  if (!v24) {
    return 0;
  }
  unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  uint64_t v28 = v22 + 7;
  uint64_t v26 = v22[7];
  uint64_t v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3) {
    return 0;
  }
  uint64_t v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != v2) {
    return 0;
  }
  unint64_t v31 = (void *)a1[4];
  uint64_t v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3) {
    return 0;
  }
  uint64_t v33 = *(void *)(v32 + 8 * v3);
  if (!v33) {
    return 0;
  }
  unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  uint64_t v37 = v31 + 7;
  uint64_t v35 = v31[7];
  uint64_t v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3) {
    return 0;
  }
  uint64_t v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != v2) {
    return 0;
  }
  unint64_t v41 = (void *)a1[5];
  uint64_t v42 = v41[4];
  if (v3 < (v41[5] - v42) >> 3 && (uint64_t v43 = *(void *)(v42 + 8 * v3)) != 0)
  {
    unint64_t v44 = *(unsigned __int16 *)(v43 + 2 * v6);
    uint64_t v47 = v41 + 7;
    uint64_t v46 = v41[7];
    uint64_t v45 = v47[1];
    if (v44 < (v45 - v46) >> 3)
    {
      uint64_t v48 = v46 + 8 * v44;
      if (*(_DWORD *)(v48 + 4) == v2) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = v45;
      }
      return v49 != v45;
    }
  }
  else
  {
    uint64_t v45 = v41[8];
  }
  uint64_t v49 = v45;
  return v49 != v45;
}

uint64_t gdc::Registry::storage<md::ls::PassRoutelineMaskConfiguration>(int8x8_t *a1)
{
  unint64_t v10 = 0xCDD99CCED5CBB5CBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCDD99CCED5CBB5CBLL;
    if (*(void *)&v1 <= 0xCDD99CCED5CBB5CBLL) {
      unint64_t v3 = 0xCDD99CCED5CBB5CBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCDD99CCED5CBB5CBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCDD99CCED5CBB5CBLL)
      {
        if (v5[2] == 0xCDD99CCED5CBB5CBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCDD99CCED5CBB5CBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCDD99CCED5CBB5CBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A29EE4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  v115[5] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint8x8_t v2 = *(int8x8_t **)(a2 + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PassDeviceCapabilities>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PassSSAODescriptor>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::PassShadowDescriptor>(v2);
  unint64_t v102 = (void *)gdc::Registry::storage<md::ls::PassRouteLineDescriptor>(v2);
  uint64_t v7 = gdc::Registry::storage<md::ls::FrameGraphBuilder>(v2);
  uint64_t v8 = gdc::Registry::storage<md::ls::PassCount>(v2);
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) >= *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v3[8] - v3[7] >= *(void *)(v9 + 64) - *(void *)(v9 + 56)) {
    unint64_t v10 = (void *)(v9 + 32);
  }
  else {
    unint64_t v10 = v3 + 4;
  }
  if (v4[8] - v4[7] >= v10[4] - v10[3]) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = v4 + 4;
  }
  uint64_t v12 = (void *)v11[3];
  uint64_t v106 = v11;
  int v107 = (void *)v7;
  unsigned int v108 = (void *)v8;
  uint64_t v109 = v3;
  int v110 = v4;
  char v111 = v12;
  uint64_t v13 = (void *)v11[4];
  if (v13 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v106))
  {
    uint64_t v14 = v12 + 1;
    do
    {
      uint64_t v12 = v14;
      char v111 = v14;
      if (v14 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v106);
      uint64_t v14 = v12 + 1;
    }
    while (!isValid);
  }
  unint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint8x8_t v103 = (void *)result;
  uint8x8_t v101 = v17;
  if (v17 != v12)
  {
    uint64_t v97 = v6;
    uint64_t v98 = v5;
    uint64_t v99 = v4;
    int8x8_t v100 = v3;
    do
    {
      *uint8x8_t v103 = *v12;
      unint64_t v18 = *v12;
      uint64_t v19 = HIDWORD(*v12);
      unint64_t v20 = *v12 >> 39;
      uint64_t v21 = v3[4];
      if (v20 < (v3[5] - v21) >> 3
        && (uint64_t v22 = *(void *)(v21 + 8 * v20)) != 0
        && (unint64_t v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)),
            uint64_t v25 = v3[7],
            uint64_t v24 = v3[8],
            v23 < (v24 - v25) >> 3)
        && ((v26 = v25 + 8 * v23, v26 != v24) ? (BOOL v27 = *(_DWORD *)(v26 + 4) == v19) : (BOOL v27 = 0), v27))
      {
        uint64_t v28 = v3[10] + 8 * v23;
      }
      else
      {
        uint64_t v28 = v3[11];
      }
      char v105 = (void *)v28;
      uint64_t v29 = v4[4];
      if (v20 < (v4[5] - v29) >> 3
        && (uint64_t v30 = *(void *)(v29 + 8 * v20)) != 0
        && (unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)),
            uint64_t v33 = v4[7],
            uint64_t v32 = v4[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (BOOL v35 = *(_DWORD *)(v34 + 4) == v19) : (BOOL v35 = 0), v35))
      {
        uint64_t v36 = (unsigned char *)(v4[10] + v31);
      }
      else
      {
        uint64_t v36 = (unsigned char *)v4[11];
      }
      uint64_t v37 = v5[4];
      if (v20 < (v5[5] - v37) >> 3
        && (uint64_t v38 = *(void *)(v37 + 8 * v20)) != 0
        && (unint64_t v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v18) & 0x7F)),
            uint64_t v41 = v5[7],
            uint64_t v40 = v5[8],
            v39 < (v40 - v41) >> 3)
        && ((uint64_t v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == v19) : (v43 = 0), v43))
      {
        unint64_t v44 = v5[11];
        unint64_t v45 = v5[10] + v39;
      }
      else
      {
        unint64_t v44 = v5[11];
        unint64_t v45 = v44;
      }
      uint64_t v46 = v6[4];
      if (v20 < (v6[5] - v46) >> 3
        && (uint64_t v47 = *(void *)(v46 + 8 * v20)) != 0
        && (unint64_t v48 = *(unsigned __int16 *)(v47 + 2 * (HIDWORD(v18) & 0x7F)),
            uint64_t v50 = v6[7],
            uint64_t v49 = v6[8],
            v48 < (v49 - v50) >> 3)
        && ((uint64_t v51 = v50 + 8 * v48, v51 != v49) ? (v52 = *(_DWORD *)(v51 + 4) == v19) : (v52 = 0), v52))
      {
        unint64_t v53 = v6[11];
        unint64_t v54 = v6[10] + v48;
      }
      else
      {
        unint64_t v53 = v6[11];
        unint64_t v54 = v53;
      }
      uint64_t v55 = v102[4];
      if (v20 < (v102[5] - v55) >> 3
        && (uint64_t v56 = *(void *)(v55 + 8 * v20)) != 0
        && (unint64_t v57 = *(unsigned __int16 *)(v56 + 2 * (HIDWORD(v18) & 0x7F)),
            uint64_t v59 = v102[7],
            uint64_t v58 = v102[8],
            v57 < (v58 - v59) >> 3)
        && ((uint64_t v60 = v59 + 8 * v57, v60 != v58) ? (v61 = *(_DWORD *)(v60 + 4) == v19) : (v61 = 0), v61))
      {
        unint64_t v62 = v102[11];
        unint64_t v63 = v102[10] + v57;
      }
      else
      {
        unint64_t v62 = v102[11];
        unint64_t v63 = v62;
      }
      uint64_t v64 = ***(uint64_t ****)(a1 + 8);
      if (v64 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v64 != 0xD369A4D92C8FFE6CLL)
      {
        uint64_t v65 = v64 + 5;
        do
        {
          uint64_t v66 = *v65;
          v65 += 5;
        }
        while (v66 != 0xD369A4D92C8FFE6CLL);
        uint64_t v64 = v65 - 5;
      }
      uint64_t v67 = v64[3];
      unint64_t v68 = (std::__shared_weak_count *)v64[4];
      if (v68)
      {
        atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v67 + 8))(v67);
      unint64_t v69 = result;
      if (result) {
        BOOL v70 = *v36 == 0;
      }
      else {
        BOOL v70 = 1;
      }
      if (!v70)
      {
        BOOL v72 = v45 != v44 && v45 != 0;
        BOOL v74 = v54 != v53 && v54 != 0;
        BOOL v114 = v72;
        BOOL v113 = v74;
        BOOL v76 = v63 != v62 && v63 != 0;
        BOOL v112 = v76;
        v115[0] = *v105;
        uint64_t v77 = operator new(0x30uLL);
        *uint64_t v77 = &unk_1EF572DB0;
        v77[1] = &v113;
        v77[2] = v69;
        void v77[3] = &v114;
        v77[4] = &v112;
        v77[5] = v115;
        v115[4] = v77;
        md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>();
      }
      uint64_t v12 = (void *)v106[4];
      unint64_t v78 = v111 + 1;
      char v111 = v78;
      if (v78 == v12)
      {
        uint64_t v4 = v99;
        unint64_t v3 = v100;
        uint64_t v6 = v97;
        uint64_t v5 = v98;
      }
      else
      {
        uint64_t v79 = v107[4];
        uint64_t v4 = v99;
        unint64_t v3 = v100;
        uint64_t v6 = v97;
        uint64_t v5 = v98;
        do
        {
          unint64_t v80 = *((unsigned int *)v78 + 1);
          unint64_t v81 = v80 >> 7;
          if (v80 >> 7 < (v107[5] - v79) >> 3)
          {
            unint64_t result = *(void *)(v79 + 8 * v81);
            if (result)
            {
              uint64_t v82 = v80 & 0x7F;
              unint64_t result = *(unsigned __int16 *)(result + 2 * v82);
              uint64_t v84 = v107[7];
              uint64_t v83 = v107[8];
              if (result < (v83 - v84) >> 3)
              {
                unint64_t result = v84 + 8 * result;
                if (result != v83 && *(_DWORD *)(result + 4) == v80)
                {
                  unint64_t result = v108[4];
                  if (v81 < (uint64_t)(v108[5] - result) >> 3)
                  {
                    unint64_t result = *(void *)(result + 8 * v81);
                    if (result)
                    {
                      unint64_t result = *(unsigned __int16 *)(result + 2 * v82);
                      uint64_t v87 = v108[7];
                      uint64_t v86 = v108[8];
                      if (result < (v86 - v87) >> 3)
                      {
                        unint64_t result = v87 + 8 * result;
                        if (result != v86 && *(_DWORD *)(result + 4) == v80)
                        {
                          unint64_t result = v109[4];
                          if (v81 < (uint64_t)(v109[5] - result) >> 3)
                          {
                            unint64_t result = *(void *)(result + 8 * v81);
                            if (result)
                            {
                              unint64_t result = *(unsigned __int16 *)(result + 2 * v82);
                              uint64_t v90 = v109[7];
                              uint64_t v89 = v109[8];
                              if (result < (v89 - v90) >> 3)
                              {
                                unint64_t result = v90 + 8 * result;
                                if (result != v89 && *(_DWORD *)(result + 4) == v80)
                                {
                                  unint64_t result = v110[4];
                                  if (v81 < (uint64_t)(v110[5] - result) >> 3)
                                  {
                                    uint64_t v92 = *(void *)(result + 8 * v81);
                                    if (v92)
                                    {
                                      unint64_t v93 = *(unsigned __int16 *)(v92 + 2 * v82);
                                      unint64_t result = v110[7];
                                      uint64_t v94 = v110[8];
                                      if (v93 < (uint64_t)(v94 - result) >> 3)
                                      {
                                        unint64_t v95 = result + 8 * v93;
                                        unint64_t result = *(unsigned int *)(v95 + 4);
                                        if (result == v80 && v95 != v94)
                                        {
                                          uint64_t v12 = v78;
                                          goto LABEL_126;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v78;
        }
        while (v78 != v12);
        unint64_t v78 = v12;
LABEL_126:
        char v111 = v78;
      }
    }
    while (v101 != v12);
  }
  *uint8x8_t v103 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A1A2A658(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 104);
  if (v3 == v1 - 128)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 128) + 32))(v1 - 128);
    _Unwind_Resume(exception_object);
  }
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::ls::PassCount>(int8x8_t *a1)
{
  uint64_t v10 = 0x256170776297ADC7;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x256170776297ADC7;
    if (*(void *)&v1 <= 0x256170776297ADC7uLL) {
      uint64_t v3 = 0x256170776297ADC7uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x256170776297ADC7;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x256170776297ADC7)
      {
        if (v5[2] == 0x256170776297ADC7) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x256170776297ADC7) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x256170776297ADC7) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A2A914(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(int8x8_t *a1)
{
  uint64_t v10 = 0x2CF7C0CBD63AB273;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2CF7C0CBD63AB273;
    if (*(void *)&v1 <= 0x2CF7C0CBD63AB273uLL) {
      uint64_t v3 = 0x2CF7C0CBD63AB273uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2CF7C0CBD63AB273;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2CF7C0CBD63AB273)
      {
        if (v5[2] == 0x2CF7C0CBD63AB273) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2CF7C0CBD63AB273) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2CF7C0CBD63AB273) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A2AB84(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PassSSAOConfiguration>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::PassMapEngineCapabilities>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::FrameGraphBuilder>(v3);
  unint64_t v7 = (void *)v6;
  uint64_t v8 = (void *)(v6 + 32);
  if (v4[8] - v4[7] < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v8 = v4 + 4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  uint64_t v66 = v8;
  uint64_t v67 = (void *)v6;
  unint64_t v68 = v4;
  unint64_t v69 = (void *)v5;
  uint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  BOOL v70 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v66))
  {
    uint64_t v11 = v9 + 1;
    do
    {
      uint64_t v9 = v11;
      BOOL v70 = v11;
      if (v11 == v10) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v66);
      uint64_t v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v13 = (void *)result;
  }
  else
  {
    uint64_t v13 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t v13 = *v9;
      unint64_t v15 = *v9;
      uint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v7[4];
      if (v17 < (v7[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v7[7],
            uint64_t v21 = v7[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v25 = (md::FrameGraphBuilder **)(v7[10] + 8 * v20);
      }
      else
      {
        uint64_t v25 = (md::FrameGraphBuilder **)v7[11];
      }
      uint64_t v26 = v4[4];
      if (v17 < (v4[5] - v26) >> 3
        && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
        && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v30 = v4[7],
            uint64_t v29 = v4[8],
            v28 < (v29 - v30) >> 3)
        && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
      {
        uint64_t v33 = v4[11];
        uint64_t v34 = v4[10] + 12 * v28;
      }
      else
      {
        uint64_t v33 = v4[11];
        uint64_t v34 = v33;
      }
      if (v34 == v33) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v34;
      }
      uint64_t v36 = ***(uint64_t ****)(a1 + 8);
      if (v36 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v36 != 0xD369A4D92C8FFE6CLL)
      {
        uint64_t v37 = v36 + 5;
        do
        {
          uint64_t v38 = *v37;
          v37 += 5;
        }
        while (v38 != 0xD369A4D92C8FFE6CLL);
        uint64_t v36 = v37 - 5;
      }
      uint64_t v39 = v36[3];
      uint64_t v40 = (std::__shared_weak_count *)v36[4];
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 8))(v39);
      if (result)
      {
        uint64_t v42 = *v25;
        float v43 = *(float *)v35;
        if (!*(unsigned char *)(v35 + 10)) {
          float v43 = 1.0;
        }
        float v71 = v43;
        uint64_t result = md::StandardPassList::_buildSSAODOFCommonFrameGraph(result, (const BOOL *)(v35 + 10), 0, &v71, v42);
      }
      uint64_t v9 = (void *)v66[4];
      uint64_t v14 = v70 + 1;
      BOOL v70 = v14;
      if (v14 != v9)
      {
        uint64_t v44 = v67[4];
        while (1)
        {
          unint64_t v45 = *((unsigned int *)v14 + 1);
          unint64_t v46 = v45 >> 7;
          if (v45 >> 7 < (v67[5] - v44) >> 3)
          {
            uint64_t v47 = *(void *)(v44 + 8 * v46);
            if (v47)
            {
              uint64_t v48 = v45 & 0x7F;
              unint64_t v49 = *(unsigned __int16 *)(v47 + 2 * v48);
              uint64_t v50 = v67[7];
              uint64_t result = v67[8];
              if (v49 < (result - v50) >> 3)
              {
                uint64_t v51 = v50 + 8 * v49;
                if (v51 != result && *(_DWORD *)(v51 + 4) == v45)
                {
                  uint64_t v53 = v68[4];
                  uint64_t result = v68[5] - v53;
                  if (v46 < result >> 3)
                  {
                    uint64_t v54 = *(void *)(v53 + 8 * v46);
                    if (v54)
                    {
                      unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * v48);
                      uint64_t v56 = v68[7];
                      uint64_t result = v68[8];
                      if (v55 < (result - v56) >> 3)
                      {
                        uint64_t v57 = v56 + 8 * v55;
                        if (v57 != result && *(_DWORD *)(v57 + 4) == v45)
                        {
                          uint64_t v59 = v69[4];
                          uint64_t result = v69[5] - v59;
                          if (v46 < result >> 3)
                          {
                            uint64_t v60 = *(void *)(v59 + 8 * v46);
                            if (v60)
                            {
                              unint64_t v61 = *(unsigned __int16 *)(v60 + 2 * v48);
                              uint64_t v63 = v69[7];
                              uint64_t v62 = v69[8];
                              uint64_t result = v62 - v63;
                              if (v61 < (v62 - v63) >> 3)
                              {
                                uint64_t v64 = v63 + 8 * v61;
                                if (*(_DWORD *)(v64 + 4) == v45 && v64 != v62) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v9)
          {
            uint64_t v14 = v9;
            goto LABEL_13;
          }
        }
        uint64_t v9 = v14;
LABEL_13:
        BOOL v70 = v14;
      }
    }
    while (v10 != v9);
  }
  *uint64_t v13 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t RendererPassListProviderWrapper::standardPassList(RendererPassListProviderWrapper *this)
{
  int v1 = *((unsigned __int8 *)this + 17);
  if (v1 == 3 || v1 == 0) {
    return *(void *)(*((void *)this + 1) + 24);
  }
  else {
    return 0;
  }
}

uint64_t gdc::Registry::storage<md::ls::FrameGraphBuilder>(int8x8_t *a1)
{
  unint64_t v10 = 0x9792F5BB2E6066F1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9792F5BB2E6066F1;
    if (*(void *)&v1 <= 0x9792F5BB2E6066F1) {
      unint64_t v3 = 0x9792F5BB2E6066F1 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9792F5BB2E6066F1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9792F5BB2E6066F1)
      {
        if (v5[2] == 0x9792F5BB2E6066F1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9792F5BB2E6066F1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9792F5BB2E6066F1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A2B22C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[6] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  unint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  uint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  uint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  uint64_t v22 = (void *)a1[3];
  uint64_t v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3) {
    return 0;
  }
  uint64_t v24 = *(void *)(v23 + 8 * v3);
  if (!v24) {
    return 0;
  }
  unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  unint64_t v28 = v22 + 7;
  uint64_t v26 = v22[7];
  uint64_t v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3) {
    return 0;
  }
  uint64_t v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != v2) {
    return 0;
  }
  BOOL v32 = (void *)a1[4];
  uint64_t v33 = v32[4];
  if (v3 < (v32[5] - v33) >> 3 && (uint64_t v34 = *(void *)(v33 + 8 * v3)) != 0)
  {
    unint64_t v35 = *(unsigned __int16 *)(v34 + 2 * v6);
    uint64_t v38 = v32 + 7;
    uint64_t v37 = v32[7];
    uint64_t v36 = v38[1];
    if (v35 < (v36 - v37) >> 3)
    {
      uint64_t v39 = v37 + 8 * v35;
      if (*(_DWORD *)(v39 + 4) == v2) {
        uint64_t v40 = v39;
      }
      else {
        uint64_t v40 = v36;
      }
      return v40 != v36;
    }
  }
  else
  {
    uint64_t v36 = v32[8];
  }
  uint64_t v40 = v36;
  return v40 != v36;
}

uint64_t gdc::Registry::storage<md::ls::PassRouteLineDescriptor>(int8x8_t *a1)
{
  uint64_t v10 = 0x6D136A48B3800686;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6D136A48B3800686;
    if (*(void *)&v1 <= 0x6D136A48B3800686uLL) {
      uint64_t v3 = 0x6D136A48B3800686uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6D136A48B3800686;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6D136A48B3800686)
      {
        if (v5[2] == 0x6D136A48B3800686) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6D136A48B3800686) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6D136A48B3800686) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A2B5D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassShadowDescriptor>(int8x8_t *a1)
{
  uint64_t v10 = 0x73F7A94D4E0637DDLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x73F7A94D4E0637DDLL;
    if (*(void *)&v1 <= 0x73F7A94D4E0637DDuLL) {
      uint64_t v3 = 0x73F7A94D4E0637DDuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x73F7A94D4E0637DDLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x73F7A94D4E0637DDLL)
      {
        if (v5[2] == 0x73F7A94D4E0637DDLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x73F7A94D4E0637DDLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x73F7A94D4E0637DDLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A2B848(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassSSAODescriptor>(int8x8_t *a1)
{
  unint64_t v10 = 0x937D85B25618F8B3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x937D85B25618F8B3;
    if (*(void *)&v1 <= 0x937D85B25618F8B3) {
      unint64_t v3 = 0x937D85B25618F8B3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x937D85B25618F8B3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x937D85B25618F8B3)
      {
        if (v5[2] == 0x937D85B25618F8B3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x937D85B25618F8B3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x937D85B25618F8B3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A2BAB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::StandardPassList::_buildSSAODOFCommonFrameGraph(uint64_t this, const BOOL *a2, const BOOL *a3, const float *a4, md::FrameGraphBuilder *a5)
{
  uint64_t v5 = this;
  v34[4] = *MEMORY[0x1E4F143B8];
  if (*a2 | a3)
  {
    int v9 = *(_DWORD *)a4;
    v22[0] = 1;
    int v23 = 0;
    int v24 = v9;
    int v25 = 0;
    int v26 = v9;
    uint64_t v27 = 0x100000015;
    char v28 = 0;
    char v29 = 0;
    BOOL v30 = a3 == 0;
    uint64_t v31 = 0x100000001;
    char v32 = 1;
    *(void *)(this + 104) = md::FrameGraphBuilder::createResource((uint64_t)a5, (uint64_t)v22, "DV Scene Depth", 0x138BE2490000000EuLL, 0);
    if (*a2)
    {
      int v10 = *(_DWORD *)a4;
      v11[0] = 1;
      int v12 = 0;
      int v13 = v10;
      int v14 = 0;
      int v15 = v10;
      uint64_t v16 = 0x100000003;
      char v17 = 0;
      char v18 = 0;
      uint64_t v19 = 0;
      int v20 = 1;
      char v21 = 0;
      *(void *)(v5 + 168) = md::FrameGraphBuilder::createResource((uint64_t)a5, (uint64_t)v11, "DV Linear Depth", 0xA193D4A20000000FLL, 0);
      v34[0] = &unk_1EF572D20;
      v34[1] = v5;
      v34[3] = v34;
      md::FrameGraphBuilder::addRenderPass<md::DaVinciShadowCommandBufferIdInfo>();
    }
    *(void *)(v5 + 168) = 0;
    v33[0] = &unk_1EF572D68;
    v33[1] = v5;
    v33[3] = v33;
    md::FrameGraphBuilder::addRenderPass<md::DaVinciShadowCommandBufferIdInfo>();
  }
  *(void *)(this + 104) = 0;
  *(void *)(this + 168) = 0;
  return this;
}

void sub_1A1A2BD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::function<void ()(md::FrameGraphRenderPassBuilder &)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::StandardPassList::_buildRouteLineMaskFrameGraph(uint64_t a1, char a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v7 = *a3;
    v10[0] = 1;
    int v11 = 0;
    int v12 = v7;
    int v13 = 0;
    int v14 = v7;
    uint64_t v15 = 0x100000008;
    char v16 = 0;
    char v17 = 0;
    uint64_t v18 = 0x100000000;
    int v19 = 1;
    char v20 = 0;
    *(void *)(a1 + 160) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v10, "DV RouteMask", 0x43A17EC40000000CuLL, 0);
    if (!*(void *)(a1 + 200)) {
      operator new();
    }
    uint64_t v21 = *(void *)(a1 + 160);
    operator new();
  }
  *(void *)(a1 + 160) = 0;
  uint64_t result = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (result)
  {
    int v9 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v9();
  }
  return result;
}

void sub_1A1A2C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::function<void ()(md::FrameGraphRenderPassBuilder &)>::~function(va);
  _Unwind_Resume(a1);
}

double md::StandardPassList::_buildSSAOFrameGraph(uint64_t a1, char a2, float *a3, uint64_t a4, int32x2_t *a5, uint64_t a6)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    float v10 = *a3;
    v45[0] = 1;
    int v46 = 0;
    float v47 = v10;
    int v48 = 0;
    float v49 = v10;
    uint64_t v50 = 0x100000003;
    char v51 = 0;
    char v52 = 0;
    uint64_t v53 = 0;
    int v54 = 1;
    char v55 = 0;
    v34[0] = 1;
    int v35 = 0;
    float v36 = v10;
    int v37 = 0;
    float v38 = v10;
    uint64_t v39 = 0x100000002;
    char v40 = 0;
    char v41 = 0;
    uint64_t v42 = 0;
    int v43 = 1;
    char v44 = 0;
    v25[0] = 1;
    uint64_t v26 = 0x3F80000000000000;
    uint64_t v27 = 0x3F80000000000000;
    uint64_t v28 = 0x100000002;
    char v29 = 0;
    char v30 = 0;
    uint64_t v31 = 0;
    int v32 = 1;
    char v33 = 0;
    v14[0] = 1;
    int v15 = 0;
    float v16 = v10;
    int v17 = 0;
    float v18 = v10;
    uint64_t v19 = 0x100000002;
    char v20 = 0;
    char v21 = 0;
    uint64_t v22 = 0x100000000;
    int v23 = 1;
    char v24 = 0;
    *(void *)(a1 + 144) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v45, "DV Low Res Linear Depth", 0x78CE7E6100000017uLL, 0);
    *(void *)(a1 + 120) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v34, "DV SSAO Color", 0xF0BDF590000000DuLL, 0);
    *(void *)(a1 + 128) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v34, "DV SSAO Blur", 0x46B001E00000000CuLL, 0);
    *(void *)(a1 + 136) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v14, "DV SSAO Blur 2", 0x35F3E2170000000EuLL, 0);
    *(void *)(a1 + 152) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v25, "DV Rescale Color", 0x800F7D0400000010, 0);
    if (*(void *)(a1 + 48))
    {
      int32x2_t v11 = vcvt_s32_f32(vmul_n_f32(vcvt_f32_s32(*a5), *a3));
      uint64_t v12 = *(void *)(a1 + 64);
      if (v12)
      {
        if (*(void *)(v12 + 80) == *(void *)&v11)
        {
          uint64_t v56 = *(void *)(a1 + 120);
          operator new();
        }
      }
      operator new();
    }
    operator new();
  }
  *(void *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return result;
}

void sub_1A1A2CC38(_Unwind_Exception *a1)
{
  std::function<void ()(md::FrameGraphRenderPassBuilder &)>::~function((void *)(v1 - 232));
  _Unwind_Resume(a1);
}

void md::ViewTransform::setCoordinateSpaceEtc(unsigned __int8 *a1, unsigned __int8 a2, float64x2_t *a3, uint64_t a4)
{
  uint64_t v6 = a1 + 1592;
  *a1 = a2;
  gdc::CameraView::operator=((uint64_t)(a1 + 8), a4);
  double v7 = *((double *)a1 + 66);
  double v8 = *((double *)a1 + 67);
  double v9 = *((double *)a1 + 68);
  double v10 = *((double *)a1 + 69);
  double v11 = *((double *)a1 + 65);
  double v13 = *((double *)a1 + 63);
  double v12 = *((double *)a1 + 64);
  double v14 = -(v11 * v8 - v12 * v9) - (v11 * v8 - v12 * v9);
  double v15 = -(v13 * v9 - v11 * v7) - (v13 * v9 - v11 * v7);
  double v16 = -(v12 * v7 - v13 * v8) - (v12 * v7 - v13 * v8);
  double v17 = -(v16 * v7 - (-(v12 - v14 * v9) - v15 * v10));
  double v18 = -(v13 + v14 * v10 + v15 * v9 - v16 * v8);
  double v19 = -(v11 + v14 * v8 + v16 * v10 - v15 * v7);
  double v20 = v8 * -2.0;
  double v21 = -(v8 * (v8 * -2.0));
  double v22 = 1.0 - (v21 - v9 * (v9 * -2.0));
  double v23 = v7 * -2.0;
  double v24 = -(v8 * (v7 * -2.0));
  double v25 = v9 * -2.0 * v10;
  double v26 = v24 - v25;
  double v27 = -(v9 * (v7 * -2.0));
  double v28 = v10 * v20;
  double v29 = v10 * v20 - v9 * (v7 * -2.0);
  double v30 = v25 + v24;
  double v31 = v7 * -2.0 * v7 + 1.0;
  double v32 = v31 - -(v9 * (v9 * -2.0));
  double v33 = -(v9 * v20);
  double v34 = v10 * v23;
  *((double *)a1 + 183) = v22;
  *((double *)a1 + 184) = v30;
  *((double *)a1 + 185) = v27 - v28;
  *((void *)a1 + 186) = 0;
  *((double *)a1 + 187) = v26;
  *((double *)a1 + 188) = v32;
  *((double *)a1 + 189) = v34 + v33;
  *((void *)a1 + 190) = 0;
  *((double *)a1 + 191) = v29;
  *((double *)a1 + 192) = v33 - v34;
  *((double *)a1 + 193) = v31 - v21;
  *((void *)a1 + 194) = 0;
  *((double *)a1 + 195) = v18;
  *((double *)a1 + 196) = v17;
  *((double *)a1 + 197) = v19;
  *((void *)a1 + 198) = 0x3FF0000000000000;
  uint64_t v87 = 0;
  long long v85 = 0u;
  *(_OWORD *)&v89[16] = 0u;
  *(_OWORD *)uint64_t v89 = 0u;
  long long v86 = 0u;
  long long v84 = 0u;
  long long v83 = 0u;
  uint64_t v88 = 0x3FF0000000000000;
  uint64_t v90 = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v40 = vmulq_f64(*a3, _Q1);
  *(float64_t *)&long long v85 = v40.f64[1];
  float64_t v82 = v40.f64[0];
  *(float64x2_t *)&v89[8] = v40;
  gm::operator*<double,4,4,4>((double *)v81, &v82, (double *)a1 + 102);
  long long v41 = v81[1];
  *(_OWORD *)uint64_t v6 = v81[0];
  *((_OWORD *)v6 + 1) = v41;
  long long v42 = v81[3];
  *((_OWORD *)v6 + 2) = v81[2];
  *((_OWORD *)v6 + 3) = v42;
  long long v43 = v81[5];
  *((_OWORD *)v6 + 4) = v81[4];
  *((_OWORD *)v6 + 5) = v43;
  long long v44 = v81[7];
  *((_OWORD *)v6 + 6) = v81[6];
  *((_OWORD *)v6 + 7) = v44;
  *(void *)&long long v44 = *((void *)a1 + 67);
  double v45 = *((double *)a1 + 68);
  double v46 = *((double *)a1 + 66);
  double v47 = *((double *)a1 + 69);
  double v48 = (v46 + v46) * v47;
  double v49 = (v46 + v46) * v46;
  *((double *)a1 + 172) = (v46 + v46) * *(double *)&v44 + v47 * (v45 * -2.0);
  *((double *)a1 + 173) = v45 * -2.0 * v45 + 1.0 - v49;
  *((double *)a1 + 174) = v48 - v45 * -2.0 * *(double *)&v44;
  double v50 = *(double *)&v44 * -2.0;
  double v51 = v47 * (*(double *)&v44 * -2.0);
  double v52 = -1.0 - *(double *)&v44 * -2.0 * *(double *)&v44;
  *((double *)a1 + 175) = -(v52 + (v45 + v45) * v45);
  *((double *)a1 + 176) = -(v46 * (*(double *)&v44 * -2.0) - v47 * (v45 + v45));
  *((double *)a1 + 177) = v51 + (v45 + v45) * v46;
  double v53 = v51 - (v46 + v46) * v45;
  double v54 = v48 + v50 * v45;
  double v55 = v52 + v49;
  *((double *)a1 + 178) = v53;
  *((double *)a1 + 179) = v54;
  *((double *)a1 + 180) = v52 + v49;
  int v56 = *a1;
  double v57 = 0.0;
  double v58 = 0.0;
  double v59 = -1.0;
  if (v56 == 1)
  {
    double v60 = *((double *)a1 + 63);
    double v61 = *((double *)a1 + 64);
    double v62 = *((double *)a1 + 65);
    double v63 = 1.0 / sqrt(v60 * v60 + v61 * v61 + v62 * v62);
    double v57 = -(v60 * v63);
    double v58 = -(v61 * v63);
    double v59 = -(v62 * v63);
  }
  float v64 = acos(fmin(fmax(v53 * v57 + v54 * v58 + v55 * v59, -1.0), 1.0)) * 57.2957795;
  *((float *)a1 + 362) = v64;
  double v66 = *((double *)a1 + 47);
  double v65 = *((double *)a1 + 48);
  if (v65 >= v66)
  {
    double v72 = *((double *)a1 + 58);
  }
  else
  {
    double v67 = v65 * v66;
    double v68 = v65 / v66;
    if (v67 <= 0.0) {
      double v69 = 1.0;
    }
    else {
      double v69 = v68;
    }
    long double v70 = tan(*((double *)a1 + 58) * 0.5);
    long double v71 = atan(v69 * v70);
    double v72 = v71 + v71;
  }
  double v73 = tan(v72 * 0.5) * ((a3->f64[0] + a3->f64[0]) * *((double *)a1 + 122)) / (*((double *)a1 + 122) * a3->f64[1]);
  *((double *)a1 + 182) = v73;
  if (!v56)
  {
    double v74 = *((double *)a1 + 65);
    double v75 = v74 + *((double *)a1 + 4) * -0.0000000249532021;
    if (v75 <= 0.0)
    {
      BOOL v80 = 0;
    }
    else
    {
      float64x2_t v76 = *(float64x2_t *)(a1 + 504);
      float64x2_t v77 = *((float64x2_t *)a1 + 89);
      a1[1720] = v55 < 0.0;
      if (v55 >= 0.0) {
        return;
      }
      double v78 = -v75 / v55;
      *((double *)a1 + 222) = v78;
      *((float64x2_t *)v6 + 10) = vmlaq_n_f64(v76, v77, v78);
      *((double *)a1 + 221) = v74 + v78 * v55;
      float v79 = v73 * v78;
      *((double *)a1 + 223) = (float)(v79 * v79);
      BOOL v80 = v76.f64[0] > v79;
      if (v76.f64[0] >= (float)(1.0 - v79)) {
        BOOL v80 = 0;
      }
    }
    a1[1720] = v80;
  }
}

double gdc::CameraView::operator=(uint64_t a1, uint64_t a2)
{
  gdc::Camera::operator=(a1, a2);
  *(void *)(v3 + 520) = *(void *)(a2 + 520);
  *(void *)(v3 + 528) = *(void *)(a2 + 528);
  *(void *)(v3 + 536) = *(void *)(a2 + 536);
  *(void *)(v3 + 544) = *(void *)(a2 + 544);
  *(void *)(v3 + 496) = *(void *)(a2 + 496);
  *(void *)(v3 + 504) = *(void *)(a2 + 504);
  *(void *)(v3 + 512) = *(void *)(a2 + 512);
  *(void *)(v3 + 552) = *(void *)(a2 + 552);
  *(void *)(v3 + 560) = *(void *)(a2 + 560);
  *(void *)(v3 + 568) = *(void *)(a2 + 568);
  *(void *)(v3 + 576) = *(void *)(a2 + 576);
  *(void *)(v3 + 584) = *(void *)(a2 + 584);
  *(void *)(v3 + 592) = *(void *)(a2 + 592);
  *(void *)(v3 + 600) = *(void *)(a2 + 600);
  *(void *)(v3 + 608) = *(void *)(a2 + 608);
  *(void *)(v3 + 616) = *(void *)(a2 + 616);
  *(void *)(v3 + 624) = *(void *)(a2 + 624);
  *(void *)(v3 + 632) = *(void *)(a2 + 632);
  *(void *)(v3 + 640) = *(void *)(a2 + 640);
  *(void *)(v3 + 648) = *(void *)(a2 + 648);
  *(void *)(v3 + 656) = *(void *)(a2 + 656);
  *(void *)(v3 + 664) = *(void *)(a2 + 664);
  *(void *)(v3 + 672) = *(void *)(a2 + 672);
  *(void *)(v3 + 680) = *(void *)(a2 + 680);
  *(void *)(v3 + 688) = *(void *)(a2 + 688);
  *(void *)(v3 + 696) = *(void *)(a2 + 696);
  *(void *)(v3 + 704) = *(void *)(a2 + 704);
  *(void *)(v3 + 712) = *(void *)(a2 + 712);
  *(void *)(v3 + 720) = *(void *)(a2 + 720);
  *(void *)(v3 + 728) = *(void *)(a2 + 728);
  *(void *)(v3 + 736) = *(void *)(a2 + 736);
  *(void *)(v3 + 744) = *(void *)(a2 + 744);
  *(void *)(v3 + 752) = *(void *)(a2 + 752);
  *(void *)(v3 + 760) = *(void *)(a2 + 760);
  *(void *)(v3 + 768) = *(void *)(a2 + 768);
  *(void *)(v3 + 776) = *(void *)(a2 + 776);
  *(void *)(v3 + 784) = *(void *)(a2 + 784);
  *(void *)(v3 + 792) = *(void *)(a2 + 792);
  *(void *)(v3 + 800) = *(void *)(a2 + 800);
  *(void *)(v3 + 808) = *(void *)(a2 + 808);
  *(void *)(v3 + 816) = *(void *)(a2 + 816);
  *(void *)(v3 + 824) = *(void *)(a2 + 824);
  *(void *)(v3 + 832) = *(void *)(a2 + 832);
  *(void *)(v3 + 840) = *(void *)(a2 + 840);
  *(void *)(v3 + 848) = *(void *)(a2 + 848);
  *(void *)(v3 + 856) = *(void *)(a2 + 856);
  *(void *)(v3 + 864) = *(void *)(a2 + 864);
  *(void *)(v3 + 872) = *(void *)(a2 + 872);
  *(void *)(v3 + 880) = *(void *)(a2 + 880);
  *(void *)(v3 + 888) = *(void *)(a2 + 888);
  *(void *)(v3 + 896) = *(void *)(a2 + 896);
  *(void *)(v3 + 904) = *(void *)(a2 + 904);
  *(void *)(v3 + 912) = *(void *)(a2 + 912);
  *(void *)(v3 + 920) = *(void *)(a2 + 920);
  *(void *)(v3 + 928) = *(void *)(a2 + 928);
  long long v4 = *(_OWORD *)(a2 + 936);
  *(void *)(v3 + 952) = *(void *)(a2 + 952);
  *(_OWORD *)(v3 + 936) = v4;
  long long v5 = *(_OWORD *)(a2 + 960);
  *(void *)(v3 + 976) = *(void *)(a2 + 976);
  *(_OWORD *)(v3 + 960) = v5;
  *(void *)(v3 + 984) = *(void *)(a2 + 984);
  *(void *)(v3 + 992) = *(void *)(a2 + 992);
  *(void *)(v3 + 1000) = *(void *)(a2 + 1000);
  *(void *)(v3 + 1008) = *(void *)(a2 + 1008);
  *(void *)(v3 + 1016) = *(void *)(a2 + 1016);
  *(void *)(v3 + 1024) = *(void *)(a2 + 1024);
  *(void *)(v3 + 1032) = *(void *)(a2 + 1032);
  *(void *)(v3 + 1040) = *(void *)(a2 + 1040);
  *(void *)(v3 + 1048) = *(void *)(a2 + 1048);
  *(void *)(v3 + 1056) = *(void *)(a2 + 1056);
  *(void *)(v3 + 1064) = *(void *)(a2 + 1064);
  *(void *)(v3 + 1072) = *(void *)(a2 + 1072);
  *(void *)(v3 + 1080) = *(void *)(a2 + 1080);
  *(void *)(v3 + 1088) = *(void *)(a2 + 1088);
  *(void *)(v3 + 1096) = *(void *)(a2 + 1096);
  *(void *)(v3 + 1104) = *(void *)(a2 + 1104);
  *(void *)(v3 + 1112) = *(void *)(a2 + 1112);
  *(void *)(v3 + 1120) = *(void *)(a2 + 1120);
  *(void *)(v3 + 1128) = *(void *)(a2 + 1128);
  *(void *)(v3 + 1136) = *(void *)(a2 + 1136);
  *(void *)(v3 + 1144) = *(void *)(a2 + 1144);
  *(void *)(v3 + 1152) = *(void *)(a2 + 1152);
  *(void *)(v3 + 1160) = *(void *)(a2 + 1160);
  *(void *)(v3 + 1168) = *(void *)(a2 + 1168);
  *(void *)(v3 + 1176) = *(void *)(a2 + 1176);
  *(void *)(v3 + 1184) = *(void *)(a2 + 1184);
  *(void *)(v3 + 1192) = *(void *)(a2 + 1192);
  *(void *)(v3 + 1200) = *(void *)(a2 + 1200);
  *(void *)(v3 + 1208) = *(void *)(a2 + 1208);
  *(void *)(v3 + 1216) = *(void *)(a2 + 1216);
  *(void *)(v3 + 1224) = *(void *)(a2 + 1224);
  *(void *)(v3 + 1232) = *(void *)(a2 + 1232);
  *(void *)(v3 + 1240) = *(void *)(a2 + 1240);
  *(void *)(v3 + 1248) = *(void *)(a2 + 1248);
  *(void *)(v3 + 1256) = *(void *)(a2 + 1256);
  *(void *)(v3 + 1264) = *(void *)(a2 + 1264);
  *(void *)(v3 + 1272) = *(void *)(a2 + 1272);
  *(void *)(v3 + 1280) = *(void *)(a2 + 1280);
  *(void *)(v3 + 1288) = *(void *)(a2 + 1288);
  *(void *)(v3 + 1296) = *(void *)(a2 + 1296);
  *(void *)(v3 + 1304) = *(void *)(a2 + 1304);
  *(void *)(v3 + 1312) = *(void *)(a2 + 1312);
  *(void *)(v3 + 1320) = *(void *)(a2 + 1320);
  *(void *)(v3 + 1328) = *(void *)(a2 + 1328);
  *(void *)(v3 + 1336) = *(void *)(a2 + 1336);
  *(void *)(v3 + 1344) = *(void *)(a2 + 1344);
  *(void *)(v3 + 1352) = *(void *)(a2 + 1352);
  double result = *(double *)(a2 + 1360);
  *(double *)(v3 + 1360) = result;
  return result;
}

float gdc::Camera::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  int v8 = *(unsigned __int8 *)(a1 + 336);
  if (*(unsigned char *)(a2 + 336))
  {
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    if (!v8) {
      *(unsigned char *)(a1 + 336) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 336))
  {
    *(unsigned char *)(a1 + 336) = 0;
  }
  int v9 = *(unsigned __int8 *)(a1 + 352);
  if (*(unsigned char *)(a2 + 352))
  {
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    if (!v9) {
      *(unsigned char *)(a1 + 352) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 352))
  {
    *(unsigned char *)(a1 + 352) = 0;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  long long v10 = *(_OWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = v10;
  long long v11 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v11;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  float result = *(float *)(a2 + 492);
  *(float *)(a1 + 492) = result;
  return result;
}

void md::LabelFeaturePool::addPointFeatures(std::mutex *a1, unint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t **a6, int a7, char a8)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v104 = *a5;
  unint64_t v115 = 0;
  int v116 = 0;
  uint64_t v117 = 0;
  {
    operator new();
  }
  double v13 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  uint64_t v118 = mdm::Allocator::instance(void)::alloc;
  unint64_t v115 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
  uint64_t v117 = v115 + 768;
  char v105 = 0;
  unint64_t v14 = 0;
  opaque = a1[7].__m_.__opaque;
  BOOL v112 = (uint64_t *)(a6 + 1);
  uint64_t v106 = a6;
  uint64_t v109 = (float *)&a1[5].__m_.__opaque[16];
  unint64_t v108 = a4;
  int v107 = a7;
  int v110 = a1;
  while (1)
  {
    int v116 = v115;
    double v15 = a1;
    std::mutex::lock(a1);
    unint64_t v16 = a4;
    if (v105) {
      goto LABEL_6;
    }
    double v17 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(opaque, *a2);
    if (!v17) {
      break;
    }
    char v105 = v17 + 3;
LABEL_6:
    double v19 = v115;
    double v18 = v116;
    if (0xAAAAAAAAAAAAAAABLL * ((v116 - v115) >> 3) <= 0x1F && v14 < a4)
    {
      while (a7 == 17)
      {
        uint64_t v22 = a3[3];
        if (v22)
        {
          unint64_t v23 = *(unsigned __int8 *)(v22 + 33);
          if (*(unsigned char *)(v22 + 33))
          {
            double v24 = *(_DWORD **)v22;
            if (*v24 != 79)
            {
              unint64_t v25 = 0;
              double v59 = v24 + 2;
              while (v23 - 1 != v25)
              {
                int v60 = *v59;
                v59 += 2;
                ++v25;
                if (v60 == 79)
                {
                  if (v25 >= v23) {
                    goto LABEL_14;
                  }
                  goto LABEL_23;
                }
              }
              goto LABEL_14;
            }
            unint64_t v25 = 0;
LABEL_23:
            if (LOWORD(v24[2 * v25 + 1]) == 1) {
              break;
            }
          }
        }
LABEL_14:
        ++v14;
        a3 += 28;
        if (0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 3) > 0x1F || v14 >= v16) {
          goto LABEL_11;
        }
      }
      if (md::DebugStreamingPOIFeatureID) {
        BOOL v26 = md::DebugStreamingPOIFeatureID == a3[5];
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        if (GEOGetVectorKitStreamingPOILog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_61);
        }
        double v27 = (id)GEOGetVectorKitStreamingPOILog_log;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          md::HighlightHelper::debugTileToString(&v119, (const QuadTile *)(a5 + 1));
          double v28 = &v119;
          if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            double v28 = (std::string *)v119.__r_.__value_.__r.__words[0];
          }
          uint64_t v29 = a5[4];
          uint64_t v30 = a5[5];
          int v31 = *((unsigned __int8 *)a5 + 90);
          uint64_t v32 = a3[22];
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = v28;
          __int16 v121 = 2048;
          uint64_t v122 = v29;
          __int16 v123 = 2048;
          uint64_t v124 = v30;
          __int16 v125 = 1024;
          int v126 = v31;
          __int16 v127 = 2048;
          uint64_t v128 = v32;
          _os_log_impl(&dword_1A1780000, v27, OS_LOG_TYPE_DEBUG, "LabelFeaturePool::addPointFeature tile=(%s) geo[%p] label[%p] isPreTile=%i version=%llu", buf, 0x30u);
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v119.__r_.__value_.__l.__data_);
          }
        }
      }
      {
        operator new();
      }
      double v33 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v13 + 91) + 16))(*((void *)v13 + 91), 104, 8);
      double v34 = v13;
      *double v33 = 1;
      md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk((uint64_t)(v33 + 1), a3, a8);
      *(void *)buf = v33;
      int v35 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(v109, (uint64_t)buf, (void **)buf);
      *((unsigned char *)a5 + 89) = v36;
      if (v36)
      {
        {
          operator new();
        }
        uint64_t v37 = *((void *)v13 + 91);
        float v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 16))(v37, 704, 8);
        if (a7 == 17)
        {
          *float v38 = &unk_1EF581600;
          v38[1] = 0;
          v38[2] = 0;
          v38[3] = v37;
          uint64_t v39 = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeature *)(v38 + 4), (GeoCodecsPointFeature *)a3, (const md::LabelFeatureCreationParams *)a5);
          v38[4] = &unk_1EF541B98;
        }
        else
        {
          *float v38 = &unk_1EF580448;
          v38[1] = 0;
          v38[2] = 0;
          v38[3] = v37;
          uint64_t v39 = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeature *)(v38 + 4), (GeoCodecsPointFeature *)a3, (const md::LabelFeatureCreationParams *)a5);
        }
        if (*(void *)buf) {
          uint64_t v44 = *(void *)buf + 8;
        }
        else {
          uint64_t v44 = 0;
        }
        double v45 = *(std::__shared_weak_count **)(v44 + 16);
        *(void *)(v44 + 8) = v39;
        *(void *)(v44 + 16) = v38;
        if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        if (*(void *)buf) {
          uint64_t v46 = *(void *)buf + 8;
        }
        else {
          uint64_t v46 = 0;
        }
        uint64_t v47 = *(void *)(v46 + 8);
        *(void *)(v47 + 152) = v46;
        uint64_t v48 = *(void *)&v15[10].__m_.__opaque[24] + 1;
        *(void *)&v15[10].__m_.__opaque[24] = v48;
        *(void *)(v47 + 72) = v48;
        *(unsigned char *)(v47 + 147) = a8;
        atomic_load((unsigned __int8 *)(*a5 + 3394));
        (*(void (**)(void))(*(void *)v47 + 528))();
        uint64_t v43 = *(void *)buf;
        if (*(void *)buf) {
          uint64_t v49 = *(void *)buf + 8;
        }
        else {
          uint64_t v49 = 0;
        }
        unint64_t v50 = (*(uint64_t (**)(void))(**(void **)(v49 + 8) + 160))(*(void *)(v49 + 8));
        int8x8_t v51 = *(int8x8_t *)v15[8].__m_.__opaque;
        if (v51)
        {
          uint8x8_t v52 = (uint8x8_t)vcnt_s8(v51);
          v52.i16[0] = vaddlv_u8(v52);
          if (v52.u32[0] > 1uLL)
          {
            unint64_t v53 = v50;
            if (v50 >= *(void *)&v51) {
              unint64_t v53 = v50 % *(void *)&v51;
            }
          }
          else
          {
            unint64_t v53 = (*(void *)&v51 - 1) & v50;
          }
          double v54 = *(void **)(v15[8].__m_.__sig + 8 * v53);
          if (v54)
          {
            double v55 = (void *)*v54;
            if (v55)
            {
              if (v52.u32[0] < 2uLL)
              {
                uint64_t v56 = *(void *)&v51 - 1;
                while (1)
                {
                  uint64_t v58 = v55[1];
                  if (v58 == v50)
                  {
                    if (v55[2] == v50) {
                      goto LABEL_91;
                    }
                  }
                  else if ((v58 & v56) != v53)
                  {
                    goto LABEL_92;
                  }
                  double v55 = (void *)*v55;
                  if (!v55) {
                    goto LABEL_92;
                  }
                }
              }
              do
              {
                unint64_t v57 = v55[1];
                if (v57 == v50)
                {
                  if (v55[2] == v50)
                  {
LABEL_91:
                    md::PointLabelFeature::setPOIUpdateRemoveVersion(*(md::PointLabelFeature **)(v49 + 8), v55[3]);
                    break;
                  }
                }
                else
                {
                  if (v57 >= *(void *)&v51) {
                    v57 %= *(void *)&v51;
                  }
                  if (v57 != v53) {
                    break;
                  }
                }
                double v55 = (void *)*v55;
              }
              while (v55);
            }
          }
        }
      }
      else
      {
        float64x2_t v40 = v35;
        long long v41 = (void *)v35[2];
        if (v41) {
          ++*v41;
        }
        BOOL v26 = (*v33)-- == 1;
        if (v26)
        {
          md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v33 + 1));
          {
            operator new();
          }
          (*(void (**)(void, void, uint64_t))(**((void **)v13 + 91) + 40))(*((void *)v13 + 91), *(void *)buf, 104);
          long long v41 = (void *)v40[2];
        }
        *(void *)buf = v41;
        if (v41) {
          long long v42 = v41 + 1;
        }
        else {
          long long v42 = 0;
        }
        md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(v42, a3);
        uint64_t v43 = *(void *)buf;
      }
LABEL_92:
      uint64_t v61 = v43 + 8;
      if (!v43) {
        uint64_t v61 = 0;
      }
      md::PointLabelFeature::addPointFeature(*(md::PointLabelFeature **)(v61 + 8), (GeoCodecsPointFeature *)a3, (const md::LabelFeatureCreationParams *)a5);
      std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((unint64_t)(v105 + 35), *(uint64_t *)buf, (void **)buf);
      double v62 = *(void **)buf;
      uint64_t v63 = *(void *)buf + 8;
      if (*(void *)buf) {
        uint64_t v64 = *(void *)buf + 8;
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v65 = *(void *)(v64 + 8);
      double v66 = *(std::__shared_weak_count **)(v64 + 16);
      BOOL v114 = v66;
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v62 && (BOOL v26 = *v62 == 1, --*v62, v26))
      {
        md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk(v63);
        {
          operator new();
        }
        (*(void (**)(void, void, uint64_t))(**((void **)v13 + 91) + 40))(*((void *)v13 + 91), *(void *)buf, 104);
        double v67 = a5;
        if (v66) {
LABEL_102:
        }
          atomic_fetch_add_explicit(&v66->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        double v67 = a5;
        if (v66) {
          goto LABEL_102;
        }
      }
      double v68 = v112;
      while (1)
      {
        double v69 = (uint64_t *)*v68;
        long double v70 = v68;
        if (!*v68) {
          break;
        }
        while (1)
        {
          double v68 = v69;
          unint64_t v71 = v69[5];
          if ((unint64_t)v66 < v71) {
            break;
          }
          if (v71 >= (unint64_t)v66)
          {
            double v15 = v110;
            double v13 = v34;
            if (v66) {
              std::__shared_weak_count::__release_weak(v66);
            }
            if (!*((unsigned char *)v67 + 89)) {
              goto LABEL_167;
            }
            goto LABEL_132;
          }
          double v69 = (uint64_t *)v68[1];
          if (!v69)
          {
            long double v70 = v68 + 1;
            goto LABEL_109;
          }
        }
      }
LABEL_109:
      uint64_t v72 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v106[2] + 16))(v106[2], 48, 8);
      *(void *)(v72 + 32) = v65;
      *(void *)(v72 + 40) = v66;
      *(void *)uint64_t v72 = 0;
      *(void *)(v72 + 8) = 0;
      *(void *)(v72 + 16) = v68;
      *long double v70 = v72;
      double v73 = (uint64_t *)**v106;
      if (v73)
      {
        *uint64_t v106 = v73;
        uint64_t v72 = *v70;
      }
      uint64_t v74 = *v112;
      BOOL v26 = v72 == *v112;
      *(unsigned char *)(v72 + 24) = v26;
      double v15 = v110;
      double v13 = v34;
      if (!v26)
      {
        do
        {
          double v75 = *(uint64_t **)(v72 + 16);
          if (*((unsigned char *)v75 + 24)) {
            break;
          }
          uint64_t v76 = v75[2];
          float64x2_t v77 = *(uint64_t **)v76;
          if (*(uint64_t **)v76 == v75)
          {
            uint64_t v80 = *(void *)(v76 + 8);
            if (!v80 || (v81 = *(unsigned __int8 *)(v80 + 24), double v78 = (unsigned char *)(v80 + 24), v81))
            {
              if (*v75 == v72)
              {
                float64_t v82 = *(uint64_t ***)(v72 + 16);
              }
              else
              {
                float64_t v82 = (uint64_t **)v75[1];
                long long v83 = *v82;
                v75[1] = (uint64_t)*v82;
                if (v83)
                {
                  v83[2] = (uint64_t)v75;
                  uint64_t v76 = v75[2];
                }
                void v82[2] = (uint64_t *)v76;
                *(void *)(v75[2] + 8 * (*(void *)v75[2] != (void)v75)) = v82;
                *float64_t v82 = v75;
                v75[2] = (uint64_t)v82;
                uint64_t v76 = (uint64_t)v82[2];
                double v75 = *(uint64_t **)v76;
              }
              *((unsigned char *)v82 + 24) = 1;
              *(unsigned char *)(v76 + 24) = 0;
              uint64_t v101 = v75[1];
              *(void *)uint64_t v76 = v101;
              if (v101) {
                *(void *)(v101 + 16) = v76;
              }
              v75[2] = *(void *)(v76 + 16);
              *(void *)(*(void *)(v76 + 16) + 8 * (**(void **)(v76 + 16) != v76)) = v75;
              v75[1] = v76;
              goto LABEL_165;
            }
          }
          else if (!v77 || (v79 = *((unsigned __int8 *)v77 + 24), double v78 = v77 + 3, v79))
          {
            if (*v75 == v72)
            {
              uint64_t v99 = *(void *)(v72 + 8);
              *double v75 = v99;
              if (v99)
              {
                *(void *)(v99 + 16) = v75;
                uint64_t v76 = v75[2];
              }
              *(void *)(v72 + 16) = v76;
              *(void *)(v75[2] + 8 * (*(void *)v75[2] != (void)v75)) = v72;
              *(void *)(v72 + 8) = v75;
              v75[2] = v72;
              uint64_t v76 = *(void *)(v72 + 16);
            }
            else
            {
              uint64_t v72 = *(void *)(v72 + 16);
            }
            *(unsigned char *)(v72 + 24) = 1;
            *(unsigned char *)(v76 + 24) = 0;
            double v75 = *(uint64_t **)(v76 + 8);
            uint64_t v100 = *v75;
            *(void *)(v76 + 8) = *v75;
            if (v100) {
              *(void *)(v100 + 16) = v76;
            }
            v75[2] = *(void *)(v76 + 16);
            *(void *)(*(void *)(v76 + 16) + 8 * (**(void **)(v76 + 16) != v76)) = v75;
            *double v75 = v76;
LABEL_165:
            *(void *)(v76 + 16) = v75;
            break;
          }
          *((unsigned char *)v75 + 24) = 1;
          uint64_t v72 = v76;
          *(unsigned char *)(v76 + 24) = v76 == v74;
          *double v78 = 1;
        }
        while (v76 != v74);
      }
      v106[3] = (uint64_t *)((char *)v106[3] + 1);
      if (*((unsigned char *)v67 + 89))
      {
LABEL_132:
        long long v84 = v116;
        if (v116 >= v117)
        {
          unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((v116 - v115) >> 3);
          unint64_t v87 = v86 + 1;
          if (v86 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v117 - v115) >> 3) > v87) {
            unint64_t v87 = 0x5555555555555556 * ((v117 - v115) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v117 - v115) >> 3) >= 0x555555555555555) {
            uint64_t v88 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            uint64_t v88 = v87;
          }
          if (v88)
          {
            uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v118 + 16))(v118, 24 * v88, 8);
            uint64_t v90 = (char *)(v89 + 24 * v86);
            uint64_t v91 = (char *)(v89 + 24 * v88);
            if (v89)
            {
              *(void *)uint64_t v90 = v65;
              unint64_t v92 = v89 + 24 * v86;
              *(void *)(v92 + 8) = 0;
              *(void *)(v92 + 16) = 0;
            }
          }
          else
          {
            uint64_t v91 = 0;
            uint64_t v90 = (char *)(8 * ((v116 - v115) >> 3));
          }
          uint64_t v94 = v115;
          unint64_t v93 = v116;
          unint64_t v95 = v90;
          if (v116 != v115)
          {
            do
            {
              long long v96 = *(_OWORD *)(v93 - 24);
              *((void *)v95 - 1) = *((void *)v93 - 1);
              *(_OWORD *)(v95 - 24) = v96;
              v95 -= 24;
              v93 -= 24;
            }
            while (v93 != v94);
            unint64_t v93 = v115;
          }
          long long v85 = v90 + 24;
          unint64_t v115 = v95;
          int v116 = v90 + 24;
          uint64_t v97 = v117;
          uint64_t v117 = v91;
          if (v93) {
            (*(void (**)(uint64_t, char *, int64_t))(*(void *)v118 + 40))(v118, v93, v97 - v93);
          }
        }
        else
        {
          if (v116)
          {
            *((void *)v116 + 1) = 0;
            *((void *)v84 + 2) = 0;
            *(void *)long long v84 = v65;
          }
          long long v85 = v84 + 24;
        }
        int v116 = v85;
        double v15 = v110;
        uint64_t v98 = v114;
        if (v114)
        {
LABEL_168:
          if (!atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
      }
      else
      {
LABEL_167:
        uint64_t v98 = v66;
        if (v66) {
          goto LABEL_168;
        }
      }
      double v19 = v115;
      double v18 = v116;
      a7 = v107;
      unint64_t v16 = v108;
      goto LABEL_14;
    }
LABEL_11:
    a4 = v16;
    md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v104 + 296), &v115, 1u, 1, *(void *)(*(void *)(v104 + 152) + 32));
    a1 = v15;
    std::mutex::unlock(v15);
    if (v14 >= v16) {
      goto LABEL_179;
    }
  }
  std::mutex::unlock(a1);
LABEL_179:
  if (v115)
  {
    int v116 = v115;
    (*(void (**)(uint64_t, char *, int64_t))(*(void *)v118 + 40))(v118, v115, v117 - v115);
  }
}

void sub_1A1A2E4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (!a28) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a31 + 40))(a31, a28, a30 - a28);
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(float *a1, uint64_t a2, void **a3)
{
  if (*(void *)a2) {
    uint64_t v7 = *(void *)a2 + 8;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(*(void **)(v7 + 56), *(unsigned char *)(v7 + 88));
  unint64_t v9 = v8;
  unint64_t v10 = *((void *)a1 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    double v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v9)
        {
          uint64_t v17 = i[2];
          if (v17) {
            uint64_t v18 = v17 + 8;
          }
          else {
            uint64_t v18 = 0;
          }
          int v19 = *(unsigned __int8 *)(v18 + 88);
          int v20 = *(unsigned __int8 *)(*(void *)a2 + 96);
          int v15 = v19 - v20;
          if (v19 != v20) {
            goto LABEL_14;
          }
          double v21 = *(uint64_t **)(v18 + 56);
          uint64_t v22 = v21[5];
          if (!v22) {
            uint64_t v22 = v21[6];
          }
          unint64_t v23 = *(uint64_t **)(*(void *)a2 + 64);
          uint64_t v24 = v23[5];
          if (v24)
          {
            if (v22 != v24) {
              continue;
            }
          }
          else if (v22 != v23[6])
          {
            continue;
          }
          if (v21[15] == v23[15] && v21[16] == v23[16] && v21[17] == v23[17] && v21[18] == v23[18])
          {
            if (v22) {
              return i;
            }
            int v15 = geo::codec::featureStyleAttributesCompare(v21 + 3, v23 + 3);
LABEL_14:
            if (!v15) {
              return i;
            }
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 4) + 16))(*((void *)a1 + 4), 24, 8);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = 0;
  unint64_t v25 = *a3;
  i[2] = *a3;
  if (v25) {
    ++*v25;
  }
  float v26 = (float)(unint64_t)(*((void *)a1 + 5) + 1);
  float v27 = a1[12];
  if (!v10 || (float)(v27 * (float)v10) < v26)
  {
    BOOL v28 = 1;
    if (v10 >= 3) {
      BOOL v28 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v10);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v10 = *((void *)a1 + 1);
    if (prime <= v10)
    {
      if (prime >= v10) {
        goto LABEL_77;
      }
      unint64_t v43 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v10 < 3 || (uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        unint64_t v43 = std::__next_prime(v43);
      }
      else
      {
        uint64_t v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2) {
          unint64_t v43 = v45;
        }
      }
      if (prime <= v43) {
        size_t prime = v43;
      }
      if (prime >= v10)
      {
        unint64_t v10 = *((void *)a1 + 1);
LABEL_77:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10) {
            unint64_t v3 = v9 % v10;
          }
          else {
            unint64_t v3 = v9;
          }
        }
        else
        {
          unint64_t v3 = (v10 - 1) & v9;
        }
        goto LABEL_90;
      }
      if (!prime)
      {
        uint64_t v52 = *(void *)a1;
        *(void *)a1 = 0;
        if (v52) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 2) + 40))(*((void *)a1 + 2), v52, 8 * *((void *)a1 + 1));
        }
        unint64_t v10 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_77;
      }
    }
    uint64_t v32 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((void **)a1 + 2) + 16))(*((void *)a1 + 2), 8 * prime, 8);
    uint64_t v33 = *(void *)a1;
    *(void *)a1 = v32;
    if (v33) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 2) + 40))(*((void *)a1 + 2), v33, 8 * *((void *)a1 + 1));
    }
    uint64_t v34 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v34++) = 0;
    while (prime != v34);
    char v36 = (uint64_t *)(a1 + 6);
    int v35 = (void *)*((void *)a1 + 3);
    if (!v35)
    {
LABEL_76:
      unint64_t v10 = prime;
      goto LABEL_77;
    }
    size_t v37 = v35[1];
    size_t v38 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v39 = v37 & v38;
      *(void *)(*(void *)a1 + 8 * v39) = v36;
      for (uint64_t j = (void *)*v35; *v35; uint64_t j = (void *)*v35)
      {
        size_t v41 = j[1] & v38;
        if (v41 == v39)
        {
          int v35 = j;
        }
        else if (*(void *)(*(void *)a1 + 8 * v41))
        {
          void *v35 = *j;
          uint64_t v42 = 8 * v41;
          *uint64_t j = **(void **)(*(void *)a1 + v42);
          **(void **)(*(void *)a1 + v42) = j;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v41) = v35;
          int v35 = j;
          size_t v39 = v41;
        }
      }
      goto LABEL_76;
    }
    if (v37 >= prime) {
      v37 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v37) = v36;
    uint64_t v46 = (void *)*v35;
    if (!*v35) {
      goto LABEL_76;
    }
    while (1)
    {
      size_t v48 = v46[1];
      if (v48 >= prime) {
        v48 %= prime;
      }
      if (v48 != v37)
      {
        if (!*(void *)(*(void *)a1 + 8 * v48))
        {
          *(void *)(*(void *)a1 + 8 * v48) = v35;
          goto LABEL_81;
        }
        void *v35 = *v46;
        uint64_t v47 = 8 * v48;
        *uint64_t v46 = **(void **)(*(void *)a1 + v47);
        **(void **)(*(void *)a1 + v47) = v46;
        uint64_t v46 = v35;
      }
      size_t v48 = v37;
LABEL_81:
      int v35 = v46;
      uint64_t v46 = (void *)*v46;
      size_t v37 = v48;
      if (!v46) {
        goto LABEL_76;
      }
    }
  }
LABEL_90:
  uint64_t v49 = *(void **)(*(void *)a1 + 8 * v3);
  if (v49)
  {
    *uint64_t i = *v49;
LABEL_98:
    *uint64_t v49 = i;
    goto LABEL_99;
  }
  *uint64_t i = *((void *)a1 + 3);
  *((void *)a1 + 3) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 6;
  if (*i)
  {
    unint64_t v50 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v50 >= v10) {
        v50 %= v10;
      }
    }
    else
    {
      v50 &= v10 - 1;
    }
    uint64_t v49 = (void *)(*(void *)a1 + 8 * v50);
    goto LABEL_98;
  }
LABEL_99:
  ++*((void *)a1 + 5);
  return i;
}

void sub_1A1A2EBE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(unint64_t result, uint64_t a2, void **a3)
{
  unint64_t v5 = result;
  uint64_t v6 = a2 + 8;
  if (!a2) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  unint64_t v8 = *(void *)(v7 + 72);
  unint64_t v9 = *(void *)(result + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = *(void *)(v7 + 72);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint8x8_t v11 = *(void **)(*(void *)result + 8 * v3);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v12[1];
            if (v18 == v8)
            {
              uint64_t v16 = v12[2];
              if (v16) {
                uint64_t v17 = v16 + 8;
              }
              else {
                uint64_t v17 = 0;
              }
              if (*(void *)(*(void *)(v17 + 8) + 72) == v8) {
                return result;
              }
            }
            else if ((v18 & (v9 - 1)) != v3)
            {
              goto LABEL_30;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_30;
            }
          }
        }
        do
        {
          unint64_t v15 = v12[1];
          if (v15 == v8)
          {
            uint64_t v13 = v12[2];
            if (v13) {
              uint64_t v14 = v13 + 8;
            }
            else {
              uint64_t v14 = 0;
            }
            if (*(void *)(*(void *)(v14 + 8) + 72) == v8) {
              return result;
            }
          }
          else
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_30:
  float result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 32) + 16))(*(void *)(result + 32), 24, 8);
  unint64_t v19 = result;
  *(void *)float result = 0;
  *(void *)(result + 8) = v8;
  *(void *)(result + 16) = 0;
  int v20 = *a3;
  *(void *)(result + 16) = *a3;
  if (v20) {
    ++*v20;
  }
  float v21 = (float)(unint64_t)(*(void *)(v5 + 40) + 1);
  float v22 = *(float *)(v5 + 48);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    if (v26 == 1)
    {
      size_t v26 = 2;
    }
    else if ((v26 & (v26 - 1)) != 0)
    {
      float result = std::__next_prime(v26);
      size_t v26 = result;
    }
    unint64_t v9 = *(void *)(v5 + 8);
    if (v26 <= v9)
    {
      if (v26 >= v9) {
        goto LABEL_68;
      }
      float result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (v9 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        float result = std::__next_prime(result);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(result - 1);
        if (result >= 2) {
          float result = v38;
        }
      }
      if (v26 <= result) {
        size_t v26 = result;
      }
      if (v26 >= v9)
      {
        unint64_t v9 = *(void *)(v5 + 8);
LABEL_68:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_81;
      }
      if (!v26)
      {
        uint64_t v44 = *(void *)v5;
        *(void *)unint64_t v5 = 0;
        if (v44) {
          float result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 16) + 40))(*(void *)(v5 + 16), v44, 8 * *(void *)(v5 + 8));
        }
        unint64_t v9 = 0;
        *(void *)(v5 + 8) = 0;
        goto LABEL_68;
      }
    }
    float result = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(v5 + 16) + 16))(*(void *)(v5 + 16), 8 * v26, 8);
    uint64_t v27 = *(void *)v5;
    *(void *)unint64_t v5 = result;
    if (v27) {
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 16) + 40))(*(void *)(v5 + 16), v27, 8 * *(void *)(v5 + 8));
    }
    uint64_t v28 = 0;
    *(void *)(v5 + 8) = v26;
    do
      *(void *)(*(void *)v5 + 8 * v28++) = 0;
    while (v26 != v28);
    unint64_t v30 = v5 + 24;
    unint64_t v29 = *(void **)(v5 + 24);
    if (!v29)
    {
LABEL_67:
      unint64_t v9 = v26;
      goto LABEL_68;
    }
    size_t v31 = v29[1];
    size_t v32 = v26 - 1;
    if ((v26 & (v26 - 1)) == 0)
    {
      size_t v33 = v31 & v32;
      *(void *)(*(void *)v5 + 8 * v33) = v30;
      for (uint64_t i = (void *)*v29; *v29; uint64_t i = (void *)*v29)
      {
        size_t v35 = i[1] & v32;
        if (v35 == v33)
        {
          unint64_t v29 = i;
        }
        else if (*(void *)(*(void *)v5 + 8 * v35))
        {
          *unint64_t v29 = *i;
          uint64_t v36 = 8 * v35;
          *uint64_t i = **(void **)(*(void *)v5 + v36);
          **(void **)(*(void *)v5 + v36) = i;
        }
        else
        {
          *(void *)(*(void *)v5 + 8 * v35) = v29;
          unint64_t v29 = i;
          size_t v33 = v35;
        }
      }
      goto LABEL_67;
    }
    if (v31 >= v26) {
      v31 %= v26;
    }
    *(void *)(*(void *)v5 + 8 * v31) = v30;
    size_t v39 = (void *)*v29;
    if (!*v29) {
      goto LABEL_67;
    }
    while (1)
    {
      size_t v41 = v39[1];
      if (v41 >= v26) {
        v41 %= v26;
      }
      if (v41 != v31)
      {
        if (!*(void *)(*(void *)v5 + 8 * v41))
        {
          *(void *)(*(void *)v5 + 8 * v41) = v29;
          goto LABEL_72;
        }
        *unint64_t v29 = *v39;
        uint64_t v40 = 8 * v41;
        *size_t v39 = **(void **)(*(void *)v5 + v40);
        **(void **)(*(void *)v5 + v40) = v39;
        size_t v39 = v29;
      }
      size_t v41 = v31;
LABEL_72:
      unint64_t v29 = v39;
      size_t v39 = (void *)*v39;
      size_t v31 = v41;
      if (!v39) {
        goto LABEL_67;
      }
    }
  }
LABEL_81:
  uint64_t v42 = *(unint64_t **)(*(void *)v5 + 8 * v3);
  if (v42)
  {
    *(void *)unint64_t v19 = *v42;
LABEL_89:
    *uint64_t v42 = v19;
    goto LABEL_90;
  }
  *(void *)unint64_t v19 = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = v19;
  *(void *)(*(void *)v5 + 8 * v3) = v5 + 24;
  if (*(void *)v19)
  {
    unint64_t v43 = *(void *)(*(void *)v19 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9) {
        v43 %= v9;
      }
    }
    else
    {
      v43 &= v9 - 1;
    }
    uint64_t v42 = (unint64_t *)(*(void *)v5 + 8 * v43);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(v5 + 40);
  return result;
}

void sub_1A1A2F13C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(void *a1, unsigned __int8 a2)
{
  uint64_t v3 = a1[5];
  uint64_t v4 = v3;
  if (!v3) {
    uint64_t v4 = a1[6];
  }
  unint64_t v5 = ((((unint64_t)a2 >> 2) | ((unint64_t)a2 << 6)) + v4 - 0x61C8864680B583EBLL) ^ a2;
  uint64_t v6 = a1[15];
  uint64_t v7 = a1[16];
  BOOL v8 = v6 == 0;
  uint64_t v9 = (v6 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2)) ^ v5;
  if (!v8) {
    unint64_t v5 = v9;
  }
  if (v7) {
    v5 ^= v7 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2);
  }
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[18];
  BOOL v8 = v10 == 0;
  uint64_t v12 = (v10 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2)) ^ v5;
  if (!v8) {
    unint64_t v5 = v12;
  }
  if (v11) {
    unint64_t result = (v11 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2)) ^ v5;
  }
  else {
    unint64_t result = v5;
  }
  if (!v3 && !a1[6])
  {
    uint64_t v14 = a1[3];
    if (v14)
    {
      unint64_t v15 = (*(char *)(v14 + 34) - 0x61C8864680B57FA7) ^ 0x11;
      uint64_t v16 = *(unsigned __int8 *)(v14 + 33);
      if (*(unsigned char *)(v14 + 33))
      {
        uint64_t v17 = (int *)(*(void *)v14 + 4);
        do
        {
          unint64_t v18 = ((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *(v17 - 1)) ^ v15;
          unint64_t v15 = (*v17 - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      uint64_t v19 = *(unsigned __int8 *)(v14 + 32);
      if (*(unsigned char *)(v14 + 32))
      {
        int v20 = (uint64_t *)(*(void *)(v14 + 24) + 4);
        do
        {
          unint64_t v21 = ((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *((unsigned int *)v20 - 1)) ^ v15;
          uint64_t v22 = *v20;
          int v20 = (uint64_t *)((char *)v20 + 12);
          unint64_t v15 = (v22 - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
          --v19;
        }
        while (v19);
      }
      result ^= (result << 6) - 0x61C8864680B583EBLL + (result >> 2) + v15;
    }
  }
  return result;
}

md::PointLabelFeature *md::PointLabelFeature::PointLabelFeature(md::PointLabelFeature *this, GeoCodecsPointFeature *a2, const md::LabelFeatureCreationParams *a3)
{
  labelPointFromGeoPointFeature((uint64_t)v43, (uint64_t)a2, (uint64_t)a3);
  md::PointLabelFeatureBase::PointLabelFeatureBase((uint64_t)this, (const md::LabelPoint *)v43);
  *(void *)this = &unk_1EF537458;
  *((void *)this + 31) = 850045863;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 40) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 297) = 0u;
  uint64_t v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v6 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v37) {
      operator new();
    }
  }
  uint64_t v7 = *((void *)v6 + 91);
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = v7;
  *((_DWORD *)this + 92) = 1132396544;
  *((void *)this + 47) = *((void *)a2 + 6);
  *((void *)this + 48) = *((void *)a2 + 10);
  *((unsigned char *)this + 392) = *(unsigned char *)(*(void *)(*(void *)a3 + 232) + 17) ^ 1;
  *((unsigned char *)this + 400) = 0;
  *((unsigned char *)this + 404) = 0;
  *((unsigned char *)this + 408) = 0;
  *((_WORD *)this + 206) = 0;
  *((_DWORD *)this + 104) = 0;
  *((void *)this + 58) = 0;
  *(_DWORD *)((char *)this + 393) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 53) = 0;
  *((unsigned char *)this + 448) = 0;
  {
    uint64_t v6 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v38) {
      operator new();
    }
  }
  *((void *)this + 59) = *((void *)v6 + 91);
  *((void *)this + 60) = 0;
  *((void *)this + 57) = (char *)this + 464;
  *((_DWORD *)this + 122) = 1;
  *((void *)this + 62) = *((void *)a2 + 5);
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 65) = &unk_1EF55A018;
  *((void *)this + 66) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 70) = 0;
  *((void *)this + 68) = 0;
  {
    size_t v39 = v6;
    uint64_t v6 = v39;
    if (v40) {
      operator new();
    }
  }
  *((void *)this + 71) = *((void *)v6 + 91);
  *((void *)this + 72) = 0;
  *((void *)this + 74) = 0;
  *((void *)this + 73) = 0;
  {
    size_t v41 = v6;
    uint64_t v6 = v41;
    if (v42) {
      operator new();
    }
  }
  *((void *)this + 75) = *((void *)v6 + 91);
  long long v8 = *(_OWORD *)((char *)a2 + 120);
  *((_OWORD *)this + 38) = v8;
  *((_OWORD *)this + 39) = *(_OWORD *)((char *)a2 + 136);
  *((_WORD *)this + 320) = *((_WORD *)a2 + 76);
  *((unsigned char *)this + 642) = 0;
  *((unsigned char *)this + 646) = *((unsigned char *)a2 + 156);
  *((unsigned char *)this + 647) = *((unsigned char *)a2 + 211);
  *((unsigned char *)this + 649) = 1;
  *(_OWORD *)((char *)this + 650) = 0u;
  *((void *)this + 83) = 0;
  if (*((unsigned char *)a2 + 216))
  {
    *((unsigned char *)this + 642) = 1;
    *((_WORD *)this + 322) = *((_WORD *)a2 + 77);
  }
  float v9 = *((float *)a2 + 41);
  if (v9 == 0.0) {
    float v9 = 254.0;
  }
  *((float *)this + 92) = v9;
  float v10 = *((float *)a2 + 17);
  *((float *)this + 88) = v10;
  float v11 = *((float *)a2 + 40);
  if (v11 == 101.0) {
    float v12 = v10;
  }
  else {
    float v12 = *((float *)a2 + 40);
  }
  if (v11 == 100.0) {
    float v12 = 253.0;
  }
  *((float *)this + 89) = v12;
  float v13 = *((float *)a2 + 42);
  if (v13 == 101.0) {
    float v14 = v10;
  }
  else {
    float v14 = *((float *)a2 + 42);
  }
  if (v13 == 100.0) {
    float v15 = 253.0;
  }
  else {
    float v15 = v14;
  }
  *((float *)this + 90) = v15;
  float v16 = *((float *)a2 + 43);
  if (v16 != 101.0) {
    float v10 = *((float *)a2 + 43);
  }
  if (v16 == 100.0) {
    float v10 = 253.0;
  }
  *((float *)this + 91) = v10;
  *((unsigned char *)this + 648) = (void)v8 != 0;
  *((unsigned char *)this + 650) = *((unsigned char *)a2 + 207) != 0;
  uint64_t v17 = *((void *)a2 + 3);
  uint64_t v18 = *((void *)a2 + 4);
  if (!v18)
  {
    *((void *)this + 82) = v17;
    *((void *)this + 83) = 0;
    if (v17) {
      goto LABEL_30;
    }
LABEL_35:
    LOBYTE(v20) = 0;
LABEL_37:
    int v26 = 0;
    *((unsigned char *)this + 652) = 0;
    goto LABEL_54;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 83);
  *((void *)this + 82) = v17;
  *((void *)this + 83) = v18;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v17 = *((void *)this + 82);
  }
  if (!v17) {
    goto LABEL_35;
  }
LABEL_30:
  unint64_t v20 = *(unsigned __int8 *)(v17 + 33);
  if (!*(unsigned char *)(v17 + 33))
  {
    LODWORD(v17) = 0;
    goto LABEL_37;
  }
  uint64_t v17 = *(void *)v17;
  int v21 = *(_DWORD *)v17;
  if (*(_DWORD *)v17 == 6)
  {
    unint64_t v22 = 0;
LABEL_33:
    LOWORD(v24) = *(_DWORD *)(v17 + 8 * v22 + 4);
    int v23 = v24 & 0xFF00;
    int v24 = v24;
    char v25 = 1;
  }
  else
  {
    unint64_t v22 = 0;
    uint64_t v27 = (int *)(v17 + 8);
    while (v20 - 1 != v22)
    {
      int v28 = *v27;
      v27 += 2;
      ++v22;
      if (v28 == 6)
      {
        if (v22 < v20) {
          goto LABEL_33;
        }
        break;
      }
    }
    int v24 = 0;
    char v25 = 0;
    int v23 = 0;
  }
  if ((v23 | v24) == 0x1BE) {
    char v29 = v25;
  }
  else {
    char v29 = 0;
  }
  *((unsigned char *)this + 652) = v29;
  if (v21 == 79)
  {
    unint64_t v30 = 0;
LABEL_48:
    LOWORD(v17) = *(_DWORD *)(v17 + 8 * v30 + 4);
    int v26 = v17 & 0xFF00;
    LODWORD(v17) = v17;
    LOBYTE(v20) = 1;
  }
  else
  {
    unint64_t v30 = 0;
    size_t v31 = (int *)(v17 + 8);
    while (v20 - 1 != v30)
    {
      int v32 = *v31;
      v31 += 2;
      ++v30;
      if (v32 == 79)
      {
        if (v30 < v20) {
          goto LABEL_48;
        }
        break;
      }
    }
    LODWORD(v17) = 0;
    LOBYTE(v20) = 0;
    int v26 = 0;
  }
LABEL_54:
  if ((v26 | v17) == 1) {
    char v33 = v20;
  }
  else {
    char v33 = 0;
  }
  *((unsigned char *)this + 651) = v33;
  if (md::DebugStreamingPOIFeatureID) {
    BOOL v34 = md::DebugStreamingPOIFeatureID == *((void *)this + 62);
  }
  else {
    BOOL v34 = 0;
  }
  if (v34)
  {
    if (GEOGetVectorKitStreamingPOILog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_61);
    }
    size_t v35 = (id)GEOGetVectorKitStreamingPOILog_log;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl(&dword_1A1780000, v35, OS_LOG_TYPE_DEBUG, "PointLabelFeature::PointLabelFeature", v43, 2u);
    }
  }
  return this;
}

void labelPointFromGeoPointFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 8);
  if (v5 == 255)
  {
    double v13 = *(double *)(a3 + 64);
    double v14 = *(double *)(a3 + 48);
    if (v13 >= v14 && (double v15 = *(double *)(a3 + 72), v16 = *(double *)(a3 + 56), v15 >= v16))
    {
      double v17 = v14 + (v13 - v14) * *(float *)(a2 + 88);
      double v18 = v16 + (v15 - v16) * *(float *)(a2 + 92);
      if (*(unsigned char *)(a2 + 212)) {
        goto LABEL_7;
      }
    }
    else
    {
      memset_pattern16(&v20, &unk_1A28FFCE0, 0x10uLL);
      double v17 = *(double *)&v20;
      double v18 = v21;
      if (*(unsigned char *)(a2 + 212))
      {
LABEL_7:
        int v19 = *(_DWORD *)(a2 + 96);
LABEL_12:
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(double *)(a1 + 24) = v17;
        *(double *)(a1 + 32) = v18;
        *(_DWORD *)(a1 + 40) = v19;
        *(_WORD *)(a1 + 44) = 256;
        *(unsigned char *)(a1 + 46) = 1;
        return;
      }
    }
    int v19 = 2139095039;
    goto LABEL_12;
  }
  int32x2_t v20 = vrev64_s32(*(int32x2_t *)(a3 + 12));
  int v6 = *(unsigned __int8 *)(a3 + 9);
  LOBYTE(v21) = *(unsigned char *)(a3 + 9);
  BYTE1(v21) = v5;
  double v7 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v20, *(float *)(a2 + 88), *(float *)(a2 + 92))
     * 6378137.0;
  double v9 = v8 * 6378137.0;
  double v11 = v10 * 6356752.31;
  if (*(unsigned char *)(a2 + 212)) {
    float v12 = sqrt(ldexp(2.0943951, -2 * v6) * 4.0538689e13) * *(float *)(a2 + 96);
  }
  else {
    float v12 = 3.4028e38;
  }
  *(double *)a1 = v7;
  *(double *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(float *)(a1 + 40) = v12;
  *(_WORD *)(a1 + 44) = 1;
  *(unsigned char *)(a1 + 46) = 0;
}

uint64_t md::PointLabelFeature::setMzrOverrideMode(uint64_t result, unsigned __int8 a2)
{
  return result;
}

uint64_t md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk(uint64_t a1, uint64_t *a2, char a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  int v6 = (uint64_t *)(a1 + 24);
  *(void *)a1 = &unk_1EF537230;
  *(void *)(a1 + 40) = 0;
  double v7 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    double v7 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v13) {
      operator new();
    }
  }
  *(void *)(a1 + 48) = *((void *)v7 + 91);
  double v8 = (std::__shared_weak_count *)a2[1];
  if (v8 && (double v8 = std::__shared_weak_count::lock(v8)) != 0) {
    double v9 = (uint64_t *)*a2;
  }
  else {
    double v9 = 0;
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = a3;
  double v10 = *(uint64_t ***)(a1 + 32);
  if ((unint64_t)v10 >= *(void *)(a1 + 40))
  {
    uint64_t v11 = std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>> const&>(v6, a1 + 56);
  }
  else
  {
    if (v10)
    {
      *double v10 = a2;
      v10[1] = v9;
      __int16 v10[2] = (uint64_t *)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v11 = (uint64_t)(v10 + 3);
  }
  *(void *)(a1 + 32) = v11;
  return a1;
}

void sub_1A1A2FBE8(_Unwind_Exception *a1)
{
  md::components::Material::~Material(v3);
  std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::~vector[abi:nn180100](v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  unint64_t result = (void *)gdc::Registry::storage<md::ls::RenderablePendingProcessing>(a2);
  uint64_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderablePendingProcessing>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::MeshRenderablePositionScaleInfo>(v3);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = v6 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= *(void *)(v9 + 64) - *(void *)(v9 + 56)) {
    uint64_t v8 = v9 + 32;
  }
  double v10 = *(uint64_t **)(v8 + 24);
  uint64_t v60 = v8;
  uint64_t v61 = (void *)v4;
  double v62 = (void *)v5;
  uint64_t v63 = (void *)v6;
  uint64_t v64 = v10;
  uint64_t v11 = *(uint64_t **)(v8 + 32);
  if (v11 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v60))
  {
    float v12 = v10 + 1;
    do
    {
      double v10 = v12;
      uint64_t v64 = v12;
      if (v12 == v11) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v60);
      float v12 = v10 + 1;
    }
    while (!isValid);
  }
  if (v11 == v10)
  {
    double v14 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    double v14 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *double v14 = *v10;
      unint64_t v16 = *v10;
      unint64_t v17 = (unint64_t)*v10 >> 39;
      uint64_t v18 = v7[4];
      if (v17 < (v7[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v22 = v7[7],
            uint64_t v21 = v7[8],
            v20 < (v21 - v22) >> 3)
        && ((unint64_t v23 = HIDWORD(v16), v24 = v22 + 8 * v20, v24 != v21)
          ? (BOOL v25 = *(_DWORD *)(v24 + 4) == v23)
          : (BOOL v25 = 0),
            v25))
      {
        uint64_t v26 = v7[11];
        uint64_t v27 = v7[10] + 4 * v20;
      }
      else
      {
        uint64_t v26 = v7[11];
        uint64_t v27 = v26;
      }
      if (v27 == v26) {
        int v28 = 0;
      }
      else {
        int v28 = (float *)v27;
      }
      uint64_t v29 = **(void **)(a1 + 8);
      unint64_t v30 = *(void **)v29;
      size_t v31 = *(void **)(v29 + 8);
      if (v30 != v31)
      {
        while (*v30 != 0x41D4E9297E100630)
        {
          v30 += 5;
          if (v30 == v31) {
            goto LABEL_35;
          }
        }
      }
      if (v30 == v31)
      {
LABEL_35:
        uint64_t v33 = 0;
      }
      else
      {
        uint64_t v33 = v30[3];
        int v32 = (std::__shared_weak_count *)v30[4];
        if (v32)
        {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      if (*v28 >= 0.0)
      {
        v65[0] = 0;
        v65[1] = 0;
        double v66 = 0;
        unint64_t v34 = geo::packed_array<md::ConstantDataStorage<ggl::Tile::PositionScaleInfo>,geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>::push_back((void *)(v33 + 5664), (uint64_t)v65);
        int64x2_t v67 = vdupq_n_s64(1uLL);
        char v68 = 0;
        std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>> const&,md::Counter>(v33 + 5624, v34, v34, (uint64_t)&v67);
        size_t v35 = v66;
        if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
        v67.i64[0] = v34;
        operator new();
      }
      if (!*(void *)(v33 + 10568)) {
        operator new();
      }
      v67.i64[0] = *(void *)(v33 + 10568);
      v67.i8[8] = 1;
      ecs2::addComponent<md::ls::PositionScaleInfoConstantDataHandle>(*(void **)(a1 + 8), *v14, (uint64_t)&v67);
      double v10 = *(uint64_t **)(v60 + 32);
      double v15 = v64 + 1;
      uint64_t v64 = v15;
      if (v15 != v10)
      {
        uint64_t v36 = v61[4];
        while (1)
        {
          unint64_t v37 = *((unsigned int *)v15 + 1);
          unint64_t v38 = v37 >> 7;
          if (v37 >> 7 < (v61[5] - v36) >> 3)
          {
            uint64_t v39 = *(void *)(v36 + 8 * v38);
            if (v39)
            {
              uint64_t v40 = v37 & 0x7F;
              unint64_t v41 = *(unsigned __int16 *)(v39 + 2 * v40);
              uint64_t v43 = v61[7];
              uint64_t v42 = v61[8];
              if (v41 < (v42 - v43) >> 3)
              {
                uint64_t v44 = v43 + 8 * v41;
                if (v44 != v42 && *(_DWORD *)(v44 + 4) == v37)
                {
                  uint64_t v46 = v62[4];
                  if (v38 < (v62[5] - v46) >> 3)
                  {
                    uint64_t v47 = *(void *)(v46 + 8 * v38);
                    if (v47)
                    {
                      unint64_t v48 = *(unsigned __int16 *)(v47 + 2 * v40);
                      uint64_t v50 = v62[7];
                      uint64_t v49 = v62[8];
                      if (v48 < (v49 - v50) >> 3)
                      {
                        uint64_t v51 = v50 + 8 * v48;
                        if (v51 != v49 && *(_DWORD *)(v51 + 4) == v37)
                        {
                          uint64_t v53 = v63[4];
                          if (v38 < (v63[5] - v53) >> 3)
                          {
                            uint64_t v54 = *(void *)(v53 + 8 * v38);
                            if (v54)
                            {
                              unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * v40);
                              uint64_t v57 = v63[7];
                              uint64_t v56 = v63[8];
                              if (v55 < (v56 - v57) >> 3)
                              {
                                uint64_t v58 = v57 + 8 * v55;
                                if (*(_DWORD *)(v58 + 4) == v37 && v58 != v56) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v15 == v10)
          {
            double v15 = v10;
            goto LABEL_14;
          }
        }
        double v10 = v15;
LABEL_14:
        uint64_t v64 = v15;
      }
    }
    while (v11 != v10);
  }
  *double v14 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A1A30768(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A1A307AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24)
  {
    if (!atomic_fetch_add(&a24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderablePendingProcessing>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(v3);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = v6 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= *(void *)(v9 + 64) - *(void *)(v9 + 56)) {
    uint64_t v8 = v9 + 32;
  }
  double v10 = *(void **)(v8 + 24);
  uint64_t v214 = v8;
  unint64_t v215 = (void *)v4;
  uint8x8_t v216 = (void *)v5;
  uint64_t v217 = (void *)v6;
  BOOL v218 = v10;
  unint64_t v213 = *(void **)(v8 + 32);
  if (v213 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v214))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      double v10 = v11;
      BOOL v218 = v11;
      if (v11 == v213) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v214);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v213 != v10)
  {
    int v13 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    BOOL v211 = v7;
    uint64_t v212 = v2;
    float v210 = v13;
    while (1)
    {
      *int v13 = *v10;
      unint64_t v15 = *v10;
      unint64_t v16 = *v10 >> 39;
      uint64_t v17 = v7[4];
      if (v16 < (v7[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v21 = v7[7],
            uint64_t v20 = v7[8],
            v19 < (v20 - v21) >> 3)
        && ((unint64_t v22 = HIDWORD(v15), v23 = v21 + 8 * v19, v23 != v20)
          ? (BOOL v24 = *(_DWORD *)(v23 + 4) == v22)
          : (BOOL v24 = 0),
            v24))
      {
        uint64_t v25 = v7[11];
        uint64_t v26 = v7[10] + 2 * v19;
      }
      else
      {
        uint64_t v25 = v7[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = (unsigned __int8 *)v26;
      }
      uint64_t v28 = **(void **)(v2 + 8);
      uint64_t v29 = *(void **)v28;
      unint64_t v30 = *(void **)(v28 + 8);
      if (v29 != v30)
      {
        while (*v29 != 0x41D4E9297E100630)
        {
          v29 += 5;
          if (v29 == v30) {
            goto LABEL_35;
          }
        }
      }
      if (v29 == v30)
      {
LABEL_35:
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v32 = v29[3];
        size_t v31 = (std::__shared_weak_count *)v29[4];
        if (v31)
        {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
      unint64_t v33 = *v27;
      int8x8_t v34 = *(int8x8_t *)(v32 + 3160);
      if (!*(void *)&v34) {
        goto LABEL_60;
      }
      uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
      v35.i16[0] = vaddlv_u8(v35);
      if (v35.u32[0] > 1uLL)
      {
        unint64_t v36 = *v27;
        if (*(void *)&v34 <= v33) {
          unint64_t v36 = v33 % *(void *)&v34;
        }
      }
      else
      {
        unint64_t v36 = (v34.i32[0] - 1) & v33;
      }
      unint64_t v37 = *(uint64_t ****)(*(void *)(v32 + 3152) + 8 * v36);
      if (!v37 || (unint64_t v38 = *v37) == 0)
      {
LABEL_60:
        uint64_t v46 = *(void *)(v32 + 3024);
        if (*(void *)(v32 + 3016) != v46)
        {
          uint64_t v47 = *(void *)(v46 - 8);
          *(void *)(v32 + 3024) = v46 - 8;
          *(_DWORD *)(*(void *)(v32 + 3040) + 8 * v47) = -1431655765
                                                         * ((*(void *)(v32 + 3072) - *(void *)(v32 + 3064)) >> 3);
          *(_DWORD *)(*(void *)(v32 + 3040) + 8 * v47 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(v32 + 3040) + 8 * v47 + 4) << 32)
                                                              + 0x100000000) >> 32;
          unint64_t v48 = v47 | ((unint64_t)*(unsigned int *)(*(void *)(v32 + 3040) + 8 * v47 + 4) << 32);
          goto LABEL_85;
        }
        uint64_t v49 = (-1431655765 * ((*(void *)(v32 + 3072) - *(void *)(v32 + 3064)) >> 3)) | 0x100000000;
        uint64_t v50 = *(uint64_t **)(v32 + 3048);
        unint64_t v51 = *(void *)(v32 + 3056);
        if ((unint64_t)v50 >= v51)
        {
          uint64_t v53 = *(char **)(v32 + 3040);
          uint64_t v54 = ((char *)v50 - v53) >> 3;
          unint64_t v55 = v54 + 1;
          if (!((unint64_t)(v54 + 1) >> 61))
          {
            uint64_t v56 = v51 - (void)v53;
            if (v56 >> 2 > v55) {
              unint64_t v55 = v56 >> 2;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              if (v57 >> 61) {
                goto LABEL_392;
              }
              uint64_t v58 = (char *)operator new(8 * v57);
            }
            else
            {
              uint64_t v58 = 0;
            }
            double v59 = (uint64_t *)&v58[8 * v54];
            *double v59 = v49;
            uint64_t v52 = v59 + 1;
            if (v50 != (uint64_t *)v53)
            {
              unint64_t v60 = (char *)v50 - v53 - 8;
              if (v60 < 0x58) {
                goto LABEL_396;
              }
              if ((unint64_t)(v53 - v58) < 0x20) {
                goto LABEL_396;
              }
              uint64_t v61 = (v60 >> 3) + 1;
              double v62 = &v58[8 * v54 - 16];
              uint64_t v63 = v50 - 2;
              uint64_t v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v65 = *(_OWORD *)v63;
                *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
                *(_OWORD *)double v62 = v65;
                v62 -= 32;
                v63 -= 4;
                v64 -= 4;
              }
              while (v64);
              v59 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
              v50 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
              if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_396:
                do
                {
                  uint64_t v66 = *--v50;
                  *--double v59 = v66;
                }
                while (v50 != (uint64_t *)v53);
              }
              uint64_t v50 = *(uint64_t **)(v32 + 3040);
            }
            *(void *)(v32 + 3040) = v59;
            *(void *)(v32 + 3048) = v52;
            *(void *)(v32 + 3056) = &v58[8 * v57];
            if (v50) {
              operator delete(v50);
            }
            goto LABEL_84;
          }
        }
        else
        {
          *uint64_t v50 = v49;
          uint64_t v52 = v50 + 1;
LABEL_84:
          *(void *)(v32 + 3048) = v52;
          unint64_t v48 = *(v52 - 1);
LABEL_85:
          int64x2_t v67 = *(void **)(v32 + 3072);
          unint64_t v68 = *(void *)(v32 + 3080);
          if ((unint64_t)v67 < v68)
          {
            *int64x2_t v67 = 0;
            v67[1] = 0;
            double v69 = v67 + 3;
            v67[2] = 0;
            goto LABEL_105;
          }
          long double v70 = *(void **)(v32 + 3064);
          unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * (v67 - v70) + 1;
          if (v71 <= 0xAAAAAAAAAAAAAAALL)
          {
            unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (void)v70) >> 3);
            if (2 * v72 > v71) {
              unint64_t v71 = 2 * v72;
            }
            if (v72 >= 0x555555555555555) {
              unint64_t v73 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_392;
            }
            uint64_t v74 = (char *)operator new(24 * v73);
            double v75 = &v74[8 * (v67 - v70)];
            uint64_t v76 = &v74[24 * v73];
            *(void *)double v75 = 0;
            *((void *)v75 + 1) = 0;
            *((void *)v75 + 2) = 0;
            double v69 = v75 + 24;
            if (v67 == v70)
            {
              *(void *)(v32 + 3064) = v75;
              *(void *)(v32 + 3072) = v69;
              *(void *)(v32 + 3080) = v76;
            }
            else
            {
              do
              {
                long long v77 = *(_OWORD *)(v67 - 3);
                v67 -= 3;
                *(_OWORD *)(v75 - 24) = v77;
                v75 -= 24;
                *((void *)v75 + 2) = v67[2];
                v67[1] = 0;
                v67[2] = 0;
              }
              while (v67 != v70);
              int64x2_t v67 = *(void **)(v32 + 3064);
              double v78 = *(void **)(v32 + 3072);
              *(void *)(v32 + 3064) = v75;
              *(void *)(v32 + 3072) = v69;
              *(void *)(v32 + 3080) = v76;
              while (v78 != v67)
              {
                int v79 = (std::__shared_weak_count *)*(v78 - 1);
                if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
                v78 -= 3;
              }
            }
            if (v67) {
              operator delete(v67);
            }
LABEL_105:
            *(void *)(v32 + 3072) = v69;
            uint64_t v80 = *(char **)(v32 + 3096);
            unint64_t v81 = *(void *)(v32 + 3104);
            if ((unint64_t)v80 < v81)
            {
              *(void *)uint64_t v80 = v48;
              uint64_t v82 = (uint64_t)(v80 + 8);
              goto LABEL_126;
            }
            long long v83 = *(char **)(v32 + 3088);
            uint64_t v84 = (v80 - v83) >> 3;
            unint64_t v85 = v84 + 1;
            if (!((unint64_t)(v84 + 1) >> 61))
            {
              uint64_t v86 = v81 - (void)v83;
              if (v86 >> 2 > v85) {
                unint64_t v85 = v86 >> 2;
              }
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v87 = v85;
              }
              if (v87)
              {
                if (!(v87 >> 61))
                {
                  uint64_t v88 = operator new(8 * v87);
                  goto LABEL_117;
                }
LABEL_392:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v88 = 0;
LABEL_117:
              uint64_t v89 = &v88[8 * v84];
              void *v89 = v48;
              uint64_t v82 = (uint64_t)(v89 + 1);
              if (v80 != v83)
              {
                unint64_t v90 = v80 - v83 - 8;
                if (v90 < 0x58) {
                  goto LABEL_397;
                }
                if ((unint64_t)(v83 - v88) < 0x20) {
                  goto LABEL_397;
                }
                uint64_t v91 = (v90 >> 3) + 1;
                unint64_t v92 = &v88[8 * v84 - 16];
                unint64_t v93 = v80 - 16;
                uint64_t v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v95 = *(_OWORD *)v93;
                  *(v92 - 1) = *((_OWORD *)v93 - 1);
                  *unint64_t v92 = v95;
                  v92 -= 2;
                  v93 -= 32;
                  v94 -= 4;
                }
                while (v94);
                v89 -= v91 & 0x3FFFFFFFFFFFFFFCLL;
                v80 -= 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_397:
                  do
                  {
                    uint64_t v96 = *((void *)v80 - 1);
                    v80 -= 8;
                    *--uint64_t v89 = v96;
                  }
                  while (v80 != v83);
                }
              }
              *(void *)(v32 + 3088) = v89;
              *(void *)(v32 + 3096) = v82;
              *(void *)(v32 + 3104) = &v88[8 * v87];
              if (v83) {
                operator delete(v83);
              }
LABEL_126:
              *(void *)(v32 + 3096) = v82;
              uint64_t v97 = (uint64_t *)(v32 + 2976);
              unint64_t v98 = *(void *)(v32 + 2984);
              if (v98)
              {
                uint8x8_t v99 = (uint8x8_t)vcnt_s8((int8x8_t)v98);
                v99.i16[0] = vaddlv_u8(v99);
                if (v99.u32[0] > 1uLL)
                {
                  uint64_t v82 = v48;
                  if (v48 >= v98) {
                    uint64_t v82 = v48 % v98;
                  }
                }
                else
                {
                  uint64_t v82 = (v98 - 1) & v48;
                }
                uint64_t v100 = *(void **)(*v97 + 8 * v82);
                if (v100)
                {
                  uint64_t v101 = (void *)*v100;
                  if (v101)
                  {
                    if (v99.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v103 = v101[1];
                        if (v103 == v48)
                        {
                          if (v101[2] == v48) {
                            goto LABEL_184;
                          }
                        }
                        else if ((v103 & (v98 - 1)) != v82)
                        {
                          goto LABEL_146;
                        }
                        uint64_t v101 = (void *)*v101;
                        if (!v101) {
                          goto LABEL_146;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v102 = v101[1];
                      if (v102 == v48)
                      {
                        if (v101[2] == v48) {
                          goto LABEL_184;
                        }
                      }
                      else
                      {
                        if (v102 >= v98) {
                          v102 %= v98;
                        }
                        if (v102 != v82) {
                          break;
                        }
                      }
                      uint64_t v101 = (void *)*v101;
                    }
                    while (v101);
                  }
                }
              }
LABEL_146:
              uint64_t v104 = (char *)operator new(0x30uLL);
              *(void *)uint64_t v104 = 0;
              *((void *)v104 + 1) = v48;
              *((void *)v104 + 2) = v48;
              *(int64x2_t *)(v104 + 24) = vdupq_n_s64(1uLL);
              v104[40] = 0;
              float v105 = (float)(unint64_t)(*(void *)(v32 + 3000) + 1);
              float v106 = *(float *)(v32 + 3008);
              if ((((float)(v106 * (float)v98) >= v105) & ~(v98 == 0)) == 0)
              {
                BOOL v107 = v98 < 3 || (v98 & (v98 - 1)) != 0;
                unint64_t v108 = v107 | (2 * v98);
                unint64_t v109 = vcvtps_u32_f32(v105 / v106);
                if (v108 <= v109) {
                  size_t prime = v109;
                }
                else {
                  size_t prime = v108;
                }
                if (prime == 1)
                {
                  size_t prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  size_t prime = std::__next_prime(prime);
                  unint64_t v98 = *(void *)(v32 + 2984);
                }
                if (prime > v98) {
                  goto LABEL_158;
                }
                if (prime < v98)
                {
                  unint64_t v111 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 3000) / *(float *)(v32 + 3008));
                  if (v98 < 3
                    || (uint8x8_t v112 = (uint8x8_t)vcnt_s8((int8x8_t)v98), v112.i16[0] = vaddlv_u8(v112), v112.u32[0] > 1uLL))
                  {
                    unint64_t v111 = std::__next_prime(v111);
                  }
                  else
                  {
                    uint64_t v113 = 1 << -(char)__clz(v111 - 1);
                    if (v111 >= 2) {
                      unint64_t v111 = v113;
                    }
                  }
                  if (prime <= v111) {
                    size_t prime = v111;
                  }
                  if (prime < v98) {
LABEL_158:
                  }
                    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v32 + 2976, prime);
                }
                unint64_t v98 = *(void *)(v32 + 2984);
                if ((v98 & (v98 - 1)) != 0)
                {
                  if (v48 >= v98) {
                    uint64_t v82 = v48 % v98;
                  }
                  else {
                    uint64_t v82 = v48;
                  }
                }
                else
                {
                  uint64_t v82 = (v98 - 1) & v48;
                }
              }
              uint64_t v114 = *v97;
              unint64_t v115 = *(void **)(*v97 + 8 * v82);
              if (v115)
              {
                *(void *)uint64_t v104 = *v115;
                goto LABEL_182;
              }
              *(void *)uint64_t v104 = *(void *)(v32 + 2992);
              *(void *)(v32 + 2992) = v104;
              *(void *)(v114 + 8 * v82) = v32 + 2992;
              if (*(void *)v104)
              {
                unint64_t v116 = *(void *)(*(void *)v104 + 8);
                if ((v98 & (v98 - 1)) != 0)
                {
                  if (v116 >= v98) {
                    v116 %= v98;
                  }
                }
                else
                {
                  v116 &= v98 - 1;
                }
                unint64_t v115 = (void *)(*v97 + 8 * v116);
LABEL_182:
                *unint64_t v115 = v104;
              }
              ++*(void *)(v32 + 3000);
LABEL_184:
              unint64_t v117 = *(void *)(v32 + 3160);
              if (v117)
              {
                uint8x8_t v118 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
                v118.i16[0] = vaddlv_u8(v118);
                if (v118.u32[0] > 1uLL)
                {
                  uint64_t v82 = v33;
                  if (v117 <= v33) {
                    uint64_t v82 = v33 % v117;
                  }
                }
                else
                {
                  uint64_t v82 = (v117 - 1) & v33;
                }
                std::string v119 = *(void ***)(*(void *)(v32 + 3152) + 8 * v82);
                if (v119)
                {
                  unint64_t v120 = *v119;
                  if (*v119)
                  {
                    if (v118.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v122 = v120[1];
                        if (v122 == v33)
                        {
                          if (*((unsigned __int8 *)v120 + 16) == v33) {
                            goto LABEL_270;
                          }
                        }
                        else if ((v122 & (v117 - 1)) != v82)
                        {
                          goto LABEL_204;
                        }
                        unint64_t v120 = (void *)*v120;
                        if (!v120) {
                          goto LABEL_204;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v121 = v120[1];
                      if (v121 == v33)
                      {
                        if (*((unsigned __int8 *)v120 + 16) == v33) {
                          goto LABEL_270;
                        }
                      }
                      else
                      {
                        if (v121 >= v117) {
                          v121 %= v117;
                        }
                        if (v121 != v82) {
                          break;
                        }
                      }
                      unint64_t v120 = (void *)*v120;
                    }
                    while (v120);
                  }
                }
              }
LABEL_204:
              unint64_t v120 = operator new(0x20uLL);
              void *v120 = 0;
              v120[1] = v33;
              *((unsigned char *)v120 + 16) = v33;
              v120[3] = 0;
              float v123 = (float)(unint64_t)(*(void *)(v32 + 3176) + 1);
              float v124 = *(float *)(v32 + 3184);
              if ((((float)(v124 * (float)v117) >= v123) & ~(v117 == 0)) == 0)
              {
                BOOL v125 = (v117 & (v117 - 1)) != 0;
                if (v117 < 3) {
                  BOOL v125 = 1;
                }
                unint64_t v126 = v125 | (2 * v117);
                unint64_t v127 = vcvtps_u32_f32(v123 / v124);
                if (v126 <= v127) {
                  size_t v128 = v127;
                }
                else {
                  size_t v128 = v126;
                }
                if (v128 == 1)
                {
                  size_t v128 = 2;
                }
                else if ((v128 & (v128 - 1)) != 0)
                {
                  size_t v128 = std::__next_prime(v128);
                  unint64_t v117 = *(void *)(v32 + 3160);
                }
                if (v128 <= v117)
                {
                  if (v128 < v117)
                  {
                    unint64_t v141 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 3176) / *(float *)(v32 + 3184));
                    if (v117 < 3
                      || (uint8x8_t v142 = (uint8x8_t)vcnt_s8((int8x8_t)v117), v142.i16[0] = vaddlv_u8(v142), v142.u32[0] > 1uLL))
                    {
                      unint64_t v141 = std::__next_prime(v141);
                    }
                    else
                    {
                      uint64_t v143 = 1 << -(char)__clz(v141 - 1);
                      if (v141 >= 2) {
                        unint64_t v141 = v143;
                      }
                    }
                    if (v128 <= v141) {
                      size_t v128 = v141;
                    }
                    if (v128 < v117)
                    {
                      if (v128) {
                        goto LABEL_215;
                      }
                      int8x8_t v148 = *(void **)(v32 + 3152);
                      *(void *)(v32 + 3152) = 0;
                      if (v148) {
                        operator delete(v148);
                      }
                      *(void *)(v32 + 3160) = 0;
                    }
                  }
                  goto LABEL_255;
                }
LABEL_215:
                if (v128 >> 61) {
                  goto LABEL_392;
                }
                uint64_t v129 = operator new(8 * v128);
                float v130 = *(void **)(v32 + 3152);
                *(void *)(v32 + 3152) = v129;
                if (v130) {
                  operator delete(v130);
                }
                uint64_t v131 = 0;
                *(void *)(v32 + 3160) = v128;
                do
                  *(void *)(*(void *)(v32 + 3152) + 8 * v131++) = 0;
                while (v128 != v131);
                unint64_t v132 = *(void **)(v32 + 3168);
                if (!v132) {
                  goto LABEL_255;
                }
                uint64_t v133 = v32 + 3168;
                size_t v134 = v132[1];
                size_t v135 = v128 - 1;
                if ((v128 & (v128 - 1)) == 0)
                {
                  size_t v136 = v134 & v135;
                  *(void *)(*(void *)(v32 + 3152) + 8 * v136) = v133;
                  while (1)
                  {
                    int8x8_t v137 = (void *)*v132;
                    if (!*v132) {
                      break;
                    }
                    size_t v138 = v137[1] & v135;
                    if (v138 == v136)
                    {
                      unint64_t v132 = (void *)*v132;
                    }
                    else
                    {
                      uint64_t v139 = *(void *)(v32 + 3152);
                      if (*(void *)(v139 + 8 * v138))
                      {
                        void *v132 = *v137;
                        uint64_t v140 = 8 * v138;
                        void *v137 = **(void **)(*(void *)(v32 + 3152) + v140);
                        **(void **)(*(void *)(v32 + 3152) + v140) = v137;
                      }
                      else
                      {
                        *(void *)(v139 + 8 * v138) = v132;
                        unint64_t v132 = v137;
                        size_t v136 = v138;
                      }
                    }
                  }
                  goto LABEL_255;
                }
                if (v134 >= v128) {
                  v134 %= v128;
                }
                *(void *)(*(void *)(v32 + 3152) + 8 * v134) = v133;
                float v144 = (void *)*v132;
                if (!*v132)
                {
LABEL_255:
                  unint64_t v117 = *(void *)(v32 + 3160);
                  if ((v117 & (v117 - 1)) != 0)
                  {
                    if (v117 <= v33) {
                      uint64_t v82 = v33 % v117;
                    }
                    else {
                      uint64_t v82 = v33;
                    }
                  }
                  else
                  {
                    uint64_t v82 = (v117 - 1) & v33;
                  }
                  goto LABEL_260;
                }
                while (2)
                {
                  size_t v146 = v144[1];
                  if (v146 >= v128) {
                    v146 %= v128;
                  }
                  if (v146 != v134)
                  {
                    uint64_t v147 = *(void *)(v32 + 3152);
                    if (!*(void *)(v147 + 8 * v146))
                    {
                      *(void *)(v147 + 8 * v146) = v132;
LABEL_241:
                      unint64_t v132 = v144;
                      float v144 = (void *)*v144;
                      size_t v134 = v146;
                      if (!v144) {
                        goto LABEL_255;
                      }
                      continue;
                    }
                    void *v132 = *v144;
                    uint64_t v145 = 8 * v146;
                    *float v144 = **(void **)(*(void *)(v32 + 3152) + v145);
                    **(void **)(*(void *)(v32 + 3152) + v145) = v144;
                    float v144 = v132;
                  }
                  break;
                }
                size_t v146 = v134;
                goto LABEL_241;
              }
LABEL_260:
              uint64_t v149 = *(void *)(v32 + 3152);
              unint64_t v150 = *(void **)(v149 + 8 * v82);
              if (v150)
              {
                void *v120 = *v150;
                goto LABEL_268;
              }
              void *v120 = *(void *)(v32 + 3168);
              *(void *)(v32 + 3168) = v120;
              *(void *)(v149 + 8 * v82) = v32 + 3168;
              if (*v120)
              {
                unint64_t v151 = *(void *)(*v120 + 8);
                if ((v117 & (v117 - 1)) != 0)
                {
                  if (v151 >= v117) {
                    v151 %= v117;
                  }
                }
                else
                {
                  v151 &= v117 - 1;
                }
                unint64_t v150 = (void *)(*(void *)(v32 + 3152) + 8 * v151);
LABEL_268:
                *unint64_t v150 = v120;
              }
              ++*(void *)(v32 + 3176);
LABEL_270:
              v120[3] = v48;
              unint64_t v152 = *(void *)(v32 + 3200);
              if (v152)
              {
                uint8x8_t v153 = (uint8x8_t)vcnt_s8((int8x8_t)v152);
                v153.i16[0] = vaddlv_u8(v153);
                if (v153.u32[0] > 1uLL)
                {
                  uint64_t v82 = v48;
                  if (v48 >= v152) {
                    uint64_t v82 = v48 % v152;
                  }
                }
                else
                {
                  uint64_t v82 = (v152 - 1) & v48;
                }
                unint64_t v154 = *(void ***)(*(void *)(v32 + 3192) + 8 * v82);
                if (v154)
                {
                  size_t v155 = *v154;
                  if (*v154)
                  {
                    if (v153.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v157 = v155[1];
                        if (v157 == v48)
                        {
                          if (v155[2] == v48) {
                            goto LABEL_356;
                          }
                        }
                        else if ((v157 & (v152 - 1)) != v82)
                        {
                          goto LABEL_290;
                        }
                        size_t v155 = (void *)*v155;
                        if (!v155) {
                          goto LABEL_290;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v156 = v155[1];
                      if (v156 == v48)
                      {
                        if (v155[2] == v48) {
                          goto LABEL_356;
                        }
                      }
                      else
                      {
                        if (v156 >= v152) {
                          v156 %= v152;
                        }
                        if (v156 != v82) {
                          break;
                        }
                      }
                      size_t v155 = (void *)*v155;
                    }
                    while (v155);
                  }
                }
              }
LABEL_290:
              size_t v155 = operator new(0x20uLL);
              *size_t v155 = 0;
              v155[1] = v48;
              v155[2] = v48;
              *((unsigned char *)v155 + 24) = 0;
              float v158 = (float)(unint64_t)(*(void *)(v32 + 3216) + 1);
              float v159 = *(float *)(v32 + 3224);
              if ((((float)(v159 * (float)v152) >= v158) & ~(v152 == 0)) == 0)
              {
                BOOL v160 = (v152 & (v152 - 1)) != 0;
                if (v152 < 3) {
                  BOOL v160 = 1;
                }
                unint64_t v161 = v160 | (2 * v152);
                unint64_t v162 = vcvtps_u32_f32(v158 / v159);
                if (v161 <= v162) {
                  size_t v163 = v162;
                }
                else {
                  size_t v163 = v161;
                }
                if (v163 == 1)
                {
                  size_t v163 = 2;
                }
                else if ((v163 & (v163 - 1)) != 0)
                {
                  size_t v163 = std::__next_prime(v163);
                  unint64_t v152 = *(void *)(v32 + 3200);
                }
                if (v163 <= v152)
                {
                  if (v163 < v152)
                  {
                    unint64_t v176 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 3216) / *(float *)(v32 + 3224));
                    if (v152 < 3
                      || (uint8x8_t v177 = (uint8x8_t)vcnt_s8((int8x8_t)v152), v177.i16[0] = vaddlv_u8(v177), v177.u32[0] > 1uLL))
                    {
                      unint64_t v176 = std::__next_prime(v176);
                    }
                    else
                    {
                      uint64_t v178 = 1 << -(char)__clz(v176 - 1);
                      if (v176 >= 2) {
                        unint64_t v176 = v178;
                      }
                    }
                    if (v163 <= v176) {
                      size_t v163 = v176;
                    }
                    if (v163 < v152)
                    {
                      if (v163) {
                        goto LABEL_301;
                      }
                      uint64_t v183 = *(void **)(v32 + 3192);
                      *(void *)(v32 + 3192) = 0;
                      if (v183) {
                        operator delete(v183);
                      }
                      *(void *)(v32 + 3200) = 0;
                    }
                  }
                  goto LABEL_341;
                }
LABEL_301:
                if (v163 >> 61) {
                  goto LABEL_392;
                }
                unint64_t v164 = operator new(8 * v163);
                uint64_t v165 = *(void **)(v32 + 3192);
                *(void *)(v32 + 3192) = v164;
                if (v165) {
                  operator delete(v165);
                }
                uint64_t v166 = 0;
                *(void *)(v32 + 3200) = v163;
                do
                  *(void *)(*(void *)(v32 + 3192) + 8 * v166++) = 0;
                while (v163 != v166);
                unint64_t v167 = *(void **)(v32 + 3208);
                if (!v167) {
                  goto LABEL_341;
                }
                uint64_t v168 = v32 + 3208;
                size_t v169 = v167[1];
                size_t v170 = v163 - 1;
                if ((v163 & (v163 - 1)) == 0)
                {
                  size_t v171 = v169 & v170;
                  *(void *)(*(void *)(v32 + 3192) + 8 * v171) = v168;
                  while (1)
                  {
                    float v172 = (void *)*v167;
                    if (!*v167) {
                      break;
                    }
                    size_t v173 = v172[1] & v170;
                    if (v173 == v171)
                    {
                      unint64_t v167 = (void *)*v167;
                    }
                    else
                    {
                      uint64_t v174 = *(void *)(v32 + 3192);
                      if (*(void *)(v174 + 8 * v173))
                      {
                        *unint64_t v167 = *v172;
                        uint64_t v175 = 8 * v173;
                        void *v172 = **(void **)(*(void *)(v32 + 3192) + v175);
                        **(void **)(*(void *)(v32 + 3192) + v175) = v172;
                      }
                      else
                      {
                        *(void *)(v174 + 8 * v173) = v167;
                        unint64_t v167 = v172;
                        size_t v171 = v173;
                      }
                    }
                  }
                  goto LABEL_341;
                }
                if (v169 >= v163) {
                  v169 %= v163;
                }
                *(void *)(*(void *)(v32 + 3192) + 8 * v169) = v168;
                unsigned int v179 = (void *)*v167;
                if (!*v167)
                {
LABEL_341:
                  unint64_t v152 = *(void *)(v32 + 3200);
                  if ((v152 & (v152 - 1)) != 0)
                  {
                    if (v48 >= v152) {
                      uint64_t v82 = v48 % v152;
                    }
                    else {
                      uint64_t v82 = v48;
                    }
                  }
                  else
                  {
                    uint64_t v82 = (v152 - 1) & v48;
                  }
                  goto LABEL_346;
                }
                while (2)
                {
                  size_t v181 = v179[1];
                  if (v181 >= v163) {
                    v181 %= v163;
                  }
                  if (v181 != v169)
                  {
                    uint64_t v182 = *(void *)(v32 + 3192);
                    if (!*(void *)(v182 + 8 * v181))
                    {
                      *(void *)(v182 + 8 * v181) = v167;
LABEL_327:
                      unint64_t v167 = v179;
                      unsigned int v179 = (void *)*v179;
                      size_t v169 = v181;
                      if (!v179) {
                        goto LABEL_341;
                      }
                      continue;
                    }
                    *unint64_t v167 = *v179;
                    uint64_t v180 = 8 * v181;
                    *unsigned int v179 = **(void **)(*(void *)(v32 + 3192) + v180);
                    **(void **)(*(void *)(v32 + 3192) + v180) = v179;
                    unsigned int v179 = v167;
                  }
                  break;
                }
                size_t v181 = v169;
                goto LABEL_327;
              }
LABEL_346:
              uint64_t v184 = *(void *)(v32 + 3192);
              unint64_t v185 = *(void **)(v184 + 8 * v82);
              if (v185)
              {
                *size_t v155 = *v185;
                goto LABEL_354;
              }
              *size_t v155 = *(void *)(v32 + 3208);
              *(void *)(v32 + 3208) = v155;
              *(void *)(v184 + 8 * v82) = v32 + 3208;
              if (*v155)
              {
                unint64_t v186 = *(void *)(*v155 + 8);
                if ((v152 & (v152 - 1)) != 0)
                {
                  if (v186 >= v152) {
                    v186 %= v152;
                  }
                }
                else
                {
                  v186 &= v152 - 1;
                }
                unint64_t v185 = (void *)(*(void *)(v32 + 3192) + 8 * v186);
LABEL_354:
                *unint64_t v185 = v155;
              }
              ++*(void *)(v32 + 3216);
LABEL_356:
              *((unsigned char *)v155 + 24) = v33;
              unint64_t v223 = (uint64_t (**)())v48;
              operator new();
            }
          }
        }
        abort();
      }
      if (v35.u32[0] < 2uLL)
      {
        uint64_t v39 = *(void *)&v34 - 1;
        while (1)
        {
          uint64_t v40 = v38[1];
          if (v40 == (uint64_t *)v33)
          {
            if (*((unsigned __int8 *)v38 + 16) == v33) {
              goto LABEL_58;
            }
          }
          else if (((unint64_t)v40 & v39) != v36)
          {
            goto LABEL_60;
          }
          unint64_t v38 = (uint64_t **)*v38;
          if (!v38) {
            goto LABEL_60;
          }
        }
      }
      while (1)
      {
        unint64_t v41 = (unint64_t)v38[1];
        if (v41 == v33) {
          break;
        }
        if (v41 >= *(void *)&v34) {
          v41 %= *(void *)&v34;
        }
        if (v41 != v36) {
          goto LABEL_60;
        }
LABEL_51:
        unint64_t v38 = (uint64_t **)*v38;
        if (!v38) {
          goto LABEL_60;
        }
      }
      if (*((unsigned __int8 *)v38 + 16) != v33) {
        goto LABEL_51;
      }
LABEL_58:
      unint64_t v42 = (unint64_t)v38[3];
      if (!v42) {
        goto LABEL_60;
      }
      unint64_t v223 = (uint64_t (**)())v38[3];
      uint64_t v43 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>> const&>,std::tuple<>>(v32 + 2976, v42, &v223);
      ++v43[4];
      uint64_t v2 = v212;
      uint64_t v44 = *(void **)(v212 + 8);
      int v13 = v210;
      uint64_t v45 = *v210;
      unint64_t v220 = &off_1EF525D48;
      *(void *)&long long v221 = v42;
      *((void *)&v221 + 1) = v45;
      unint64_t v222 = &v220;
      unsigned int v225 = &v223;
      unint64_t v223 = &off_1EF525D48;
      long long v224 = v221;
      int v226 = 0;
      ecs2::Runtime::queueCommand(v44, (uint64_t)&v223);
      if (v226 != -1) {
        ((void (*)(char *, uint64_t (***)()))off_1EF591178[v226])(&v219, &v223);
      }
      int v226 = -1;
      uint64_t result = (uint64_t)v222;
      uint64_t v7 = v211;
      if (v222 == &v220)
      {
        uint64_t result = ((uint64_t (*)(uint64_t (***)()))v220[4])(&v220);
      }
      else if (v222)
      {
        uint64_t result = (*v222)[5]();
      }
      double v10 = *(void **)(v214 + 32);
      double v14 = v218 + 1;
      BOOL v218 = v14;
      if (v14 != v10)
      {
        uint64_t v188 = v215[4];
        while (1)
        {
          unint64_t v189 = *((unsigned int *)v14 + 1);
          unint64_t v190 = v189 >> 7;
          if (v189 >> 7 < (v215[5] - v188) >> 3)
          {
            uint64_t v191 = *(void *)(v188 + 8 * v190);
            if (v191)
            {
              uint64_t v192 = v189 & 0x7F;
              unint64_t v193 = *(unsigned __int16 *)(v191 + 2 * v192);
              uint64_t v194 = v215[7];
              uint64_t result = v215[8];
              if (v193 < (result - v194) >> 3)
              {
                uint64_t v195 = v194 + 8 * v193;
                if (v195 != result && *(_DWORD *)(v195 + 4) == v189)
                {
                  uint64_t v197 = v216[4];
                  uint64_t result = v216[5] - v197;
                  if (v190 < result >> 3)
                  {
                    uint64_t v198 = *(void *)(v197 + 8 * v190);
                    if (v198)
                    {
                      unint64_t v199 = *(unsigned __int16 *)(v198 + 2 * v192);
                      uint64_t v200 = v216[7];
                      uint64_t result = v216[8];
                      if (v199 < (result - v200) >> 3)
                      {
                        uint64_t v201 = v200 + 8 * v199;
                        if (v201 != result && *(_DWORD *)(v201 + 4) == v189)
                        {
                          uint64_t v203 = v217[4];
                          uint64_t result = v217[5] - v203;
                          if (v190 < result >> 3)
                          {
                            uint64_t v204 = *(void *)(v203 + 8 * v190);
                            if (v204)
                            {
                              unint64_t v205 = *(unsigned __int16 *)(v204 + 2 * v192);
                              uint64_t v207 = v217[7];
                              uint64_t v206 = v217[8];
                              uint64_t result = v206 - v207;
                              if (v205 < (v206 - v207) >> 3)
                              {
                                uint64_t v208 = v207 + 8 * v205;
                                if (*(_DWORD *)(v208 + 4) == v189 && v208 != v206) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v10)
          {
            double v14 = v10;
            goto LABEL_14;
          }
        }
        double v10 = v14;
LABEL_14:
        BOOL v218 = v14;
      }
      if (v213 == v10) {
        goto LABEL_391;
      }
    }
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  int v13 = (void *)result;
LABEL_391:
  *int v13 = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A1A321F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderablePendingProcessing>(int8x8_t *a1)
{
  uint64_t v10 = 0x1BBF568133D71FB7;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1BBF568133D71FB7;
    if (*(void *)&v1 <= 0x1BBF568133D71FB7uLL) {
      uint64_t v3 = 0x1BBF568133D71FB7uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1BBF568133D71FB7;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1BBF568133D71FB7)
      {
        if (v5[2] == 0x1BBF568133D71FB7) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1BBF568133D71FB7) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1BBF568133D71FB7) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A32484(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MeshRenderablePositionScaleInfo>(int8x8_t *a1)
{
  unint64_t v10 = 0xEE00EAF3B9AFA033;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEE00EAF3B9AFA033;
    if (*(void *)&v1 <= 0xEE00EAF3B9AFA033) {
      unint64_t v3 = 0xEE00EAF3B9AFA033 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEE00EAF3B9AFA033;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEE00EAF3B9AFA033)
      {
        if (v5[2] == 0xEE00EAF3B9AFA033) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEE00EAF3B9AFA033) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEE00EAF3B9AFA033) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A326F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A32DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::function<void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  _Unwind_Resume(a1);
}

md::TerrainDebugOptions *md::TerrainDebugOptions::TerrainDebugOptions(md::TerrainDebugOptions *this, VKDebugSettings *a2)
{
  unint64_t v3 = a2;
  *(_DWORD *)this = 16842752;
  *((unsigned char *)this + 4) = 1;
  *(_WORD *)this = [(VKDebugSettings *)v3 daVinciDebugRasterStyleAttribute];
  *((unsigned char *)this + 2) = [(VKDebugSettings *)v3 daVinciAridityGroundTintingEnabled];
  *((unsigned char *)this + 3) = [(VKDebugSettings *)v3 daVinciTemperatureGroundTintingEnabled];
  *((unsigned char *)this + 4) = [(VKDebugSettings *)v3 daVinciMaterialRastersEnabled];

  return this;
}

void sub_1A1A32E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::InView>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v2);
  HasMaterial = (void *)gdc::Registry::storage<md::ls::HasMaterialRaster>(v2);
  unint64_t v7 = (void *)gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(v2);
  uint64_t v8 = (void *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v2);
  v119[0] = (uint64_t)v3;
  v119[1] = (uint64_t)v4;
  v119[2] = (uint64_t)v5;
  v119[3] = (uint64_t)HasMaterial;
  v119[4] = (uint64_t)v7;
  v119[5] = (uint64_t)v8;
  gdc::RegistryQueryView<gdc::All<md::ls::InView const,md::ls::MeshRenderableID const,md::ls::RenderableMaterialData const,md::ls::ColorRampDataHandle>,gdc::Any<md::ls::HasMaterialRaster const,md::ls::MaterialRasterMaxIndex const>,gdc::None<>>::begin(v117, v119);
  uint64_t v9 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    uint64_t v9 = v4 + 4;
  }
  if (v5[8] - v5[7] < v9[4] - v9[3]) {
    uint64_t v9 = v5 + 4;
  }
  if (v8[8] - v8[7] < v9[4] - v9[3]) {
    uint64_t v9 = v8 + 4;
  }
  unint64_t v10 = v118;
  unint64_t v115 = (unint64_t *)v9[4];
  if (v115 == v118)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = (void *)result;
LABEL_120:
    *uint64_t v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v11 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    float v12 = (void *)v117[1];
    int v13 = (void *)v117[2];
    uint64_t v113 = (void *)v117[3];
    uint64_t v114 = v117[0];
    uint8x8_t v112 = (void *)v117[4];
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v15 = *v10;
      unint64_t v16 = HIDWORD(*v10);
      unint64_t v17 = *v10 >> 39;
      uint64_t v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v3[7],
            uint64_t v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 4 * v20;
      }
      else
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      uint64_t v38 = v5[4];
      if (v17 < (v5[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v5[10] + 32 * v40;
      }
      else
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v45;
      }
      if (v46 == v45) {
        uint64_t v47 = 0;
      }
      else {
        uint64_t v47 = v46;
      }
      uint64_t v48 = v8[4];
      if (v17 < (v8[5] - v48) >> 3
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v8[7],
            uint64_t v51 = v8[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (BOOL v54 = *(_DWORD *)(v53 + 4) == v16) : (BOOL v54 = 0), v54))
      {
        uint64_t v55 = v8[11];
        uint64_t v56 = v8[10] + 8 * v50;
      }
      else
      {
        uint64_t v55 = v8[11];
        uint64_t v56 = v55;
      }
      if (v56 == v55) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = v56;
      }
      uint64_t v58 = HasMaterial[4];
      if (v17 < (HasMaterial[5] - v58) >> 3
        && (uint64_t v59 = *(void *)(v58 + 8 * v17)) != 0
        && (unint64_t v60 = *(unsigned __int16 *)(v59 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v62 = HasMaterial[7],
            uint64_t v61 = HasMaterial[8],
            v60 < (v61 - v62) >> 3)
        && ((uint64_t v63 = v62 + 8 * v60, v63 != v61) ? (v64 = *(_DWORD *)(v63 + 4) == v16) : (v64 = 0), v64))
      {
        uint64_t v65 = HasMaterial[11];
        uint64_t v66 = HasMaterial[10] + 8 * v60;
      }
      else
      {
        uint64_t v65 = HasMaterial[11];
        uint64_t v66 = v65;
      }
      if (v66 == v65) {
        uint64_t v66 = 0;
      }
      if ((uint64_t v67 = v7[4], v17 < (v7[5] - v67) >> 3)
        && (uint64_t v68 = *(void *)(v67 + 8 * v17)) != 0
        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v71 = v7[7],
            uint64_t v70 = v7[8],
            v69 < (v70 - v71) >> 3)
        && ((v72 = v71 + 8 * v69, v72 != v70) ? (BOOL v73 = *(_DWORD *)(v72 + 4) == v16) : (BOOL v73 = 0), v73))
      {
        uint64_t v74 = v7[11];
        uint64_t v75 = v7[10] + 2 * v69;
      }
      else
      {
        uint64_t v74 = v7[11];
        uint64_t v75 = v74;
      }
      uint64_t v76 = v75 == v74 ? 0 : v75;
      uint64_t v120 = v76;
      uint64_t v121 = v66;
      uint64_t v77 = *(void *)(a2 + 24);
      if (!v77) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v77 + 48))(v77, v27, v37, v47, v57, &v121, &v120);
      int v79 = *(unint64_t **)(v114 + 32);
      double v14 = v10 + 1;
      uint8x8_t v118 = v10 + 1;
      if (v10 + 1 != v79)
      {
        uint64_t v80 = v12[4];
        while (1)
        {
          unint64_t v81 = *((unsigned int *)v14 + 1);
          unint64_t v82 = v81 >> 7;
          if (v81 >> 7 < (v12[5] - v80) >> 3)
          {
            uint64_t v83 = *(void *)(v80 + 8 * v82);
            if (v83)
            {
              uint64_t v84 = v81 & 0x7F;
              unint64_t v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              uint64_t v87 = v12[7];
              uint64_t v86 = v12[8];
              uint64_t result = v86 - v87;
              if (v85 < (v86 - v87) >> 3)
              {
                uint64_t v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == v81)
                {
                  uint64_t v90 = v13[4];
                  if (v82 < (v13[5] - v90) >> 3)
                  {
                    uint64_t v91 = *(void *)(v90 + 8 * v82);
                    if (v91)
                    {
                      unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      uint64_t v94 = v13[7];
                      uint64_t v93 = v13[8];
                      uint64_t result = v93 - v94;
                      if (v92 < (v93 - v94) >> 3)
                      {
                        uint64_t v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == v81)
                        {
                          uint64_t v97 = v113[4];
                          if (v82 < (v113[5] - v97) >> 3)
                          {
                            uint64_t v98 = *(void *)(v97 + 8 * v82);
                            if (v98)
                            {
                              unint64_t v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              uint64_t v101 = v113[7];
                              uint64_t v100 = v113[8];
                              uint64_t result = v100 - v101;
                              if (v99 < (v100 - v101) >> 3)
                              {
                                uint64_t v102 = v101 + 8 * v99;
                                if (v102 != v100 && *(_DWORD *)(v102 + 4) == v81)
                                {
                                  uint64_t v104 = v112[4];
                                  if (v82 < (v112[5] - v104) >> 3)
                                  {
                                    uint64_t v105 = *(void *)(v104 + 8 * v82);
                                    if (v105)
                                    {
                                      unint64_t v106 = *(unsigned __int16 *)(v105 + 2 * v84);
                                      uint64_t v108 = v112[7];
                                      uint64_t v107 = v112[8];
                                      if (v106 < (v107 - v108) >> 3)
                                      {
                                        uint64_t v109 = v108 + 8 * v106;
                                        if (*(_DWORD *)(v109 + 4) == v81 && v109 != v107) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v79)
          {
            double v14 = v79;
            goto LABEL_10;
          }
        }
        int v79 = v14;
LABEL_10:
        uint8x8_t v118 = v14;
      }
      unint64_t v10 = v79;
      if (v115 == v79) {
        goto LABEL_120;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::HasMaterialRaster>(v111);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::HasMaterialRaster>(int8x8_t *a1)
{
  unint64_t v10 = 0x9D7520A01DC69D83;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9D7520A01DC69D83;
    if (*(void *)&v1 <= 0x9D7520A01DC69D83) {
      unint64_t v3 = 0x9D7520A01DC69D83 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9D7520A01DC69D83;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9D7520A01DC69D83)
      {
        if (v5[2] == 0x9D7520A01DC69D83) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9D7520A01DC69D83) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9D7520A01DC69D83) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A3366C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(int8x8_t *a1)
{
  uint64_t v10 = 0x7A5110AF346E0C7FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7A5110AF346E0C7FLL;
    if (*(void *)&v1 <= 0x7A5110AF346E0C7FuLL) {
      uint64_t v3 = 0x7A5110AF346E0C7FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7A5110AF346E0C7FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7A5110AF346E0C7FLL)
      {
        if (v5[2] == 0x7A5110AF346E0C7FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7A5110AF346E0C7FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7A5110AF346E0C7FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A338DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::InView const,md::ls::MeshRenderableID const,md::ls::RenderableMaterialData const,md::ls::ColorRampDataHandle>,gdc::Any<md::ls::HasMaterialRaster const,md::ls::MaterialRasterMaxIndex const>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  uint64_t v7 = *a2 + 32;
  if (!*a2) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v4 + 32;
  if (!v4) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v5 + 32;
  if (!v5) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v6 + 32;
  if (!v6) {
    uint64_t v10 = 0;
  }
  uint64_t result = *(void *)(v7 + 24);
  if (*(void *)(v8 + 32) - *(void *)(v8 + 24) < (unint64_t)(*(void *)(v7 + 32) - result)) {
    uint64_t v7 = v8;
  }
  if (*(void *)(v9 + 32) - *(void *)(v9 + 24) < *(void *)(v7 + 32) - *(void *)(v7 + 24)) {
    uint64_t v7 = v9;
  }
  if (*(void *)(v10 + 32) - *(void *)(v10 + 24) < *(void *)(v7 + 32) - *(void *)(v7 + 24)) {
    uint64_t v7 = v10;
  }
  *a1 = v7;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  uint64_t v13 = *(void *)(v7 + 24);
  uint64_t v12 = *(void *)(v7 + 32);
  a1[6] = v13;
  if (v12 != v13)
  {
    uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      uint64_t v14 = v13 + 8;
      do
      {
        a1[6] = v14;
        if (v14 == v12) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v14 += 8;
      }
      while (!result);
    }
  }
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A33EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::TileBounds>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::TileMatrix>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v3);
  uint64_t v10 = (void *)v6;
  uint64_t v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7]) {
    uint64_t v11 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= v11[4] - v11[3]) {
    uint64_t v12 = (uint64_t)v11;
  }
  else {
    uint64_t v12 = v6 + 32;
  }
  v82[0] = v12;
  v82[1] = v4;
  void v82[2] = v5;
  v82[3] = v6;
  uint64_t v14 = *(void **)(v12 + 24);
  uint64_t v13 = *(void **)(v12 + 32);
  uint64_t v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    unint64_t v15 = v14 + 1;
    do
    {
      uint64_t v14 = v15;
      uint64_t v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      unint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  unint64_t v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v4[7];
    uint64_t v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v31 = v4[11];
      uint64_t v32 = v4[10] + 32 * v26;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v4[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v5[10] + 8 * v36;
    }
    else
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v41;
    }
    uint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v10[7];
        uint64_t v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    uint64_t v51 = v10[11];
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    uint64_t v56 = *(void **)(v12 + 32);
    unint64_t v20 = v14 + 1;
    uint64_t v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v4[4];
      uint64_t v59 = v4[7];
      uint64_t v58 = v4[8];
      uint64_t v60 = v5[4];
      uint64_t result = v5[7];
      uint64_t v61 = v5[8];
      uint64_t v62 = v10[4];
      uint64_t v64 = v10[7];
      uint64_t v63 = v10[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          unint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      uint64_t v56 = v20;
LABEL_14:
      uint64_t v83 = v20;
    }
    uint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  uint64_t v51 = v10[11];
  uint64_t v52 = v10[10] + 8 * v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::TileBounds>(int8x8_t *a1)
{
  uint64_t v10 = 0x34AE67B339EEC99CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x34AE67B339EEC99CLL;
    if (*(void *)&v1 <= 0x34AE67B339EEC99CuLL) {
      uint64_t v3 = 0x34AE67B339EEC99CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x34AE67B339EEC99CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x34AE67B339EEC99CLL)
      {
        if (v5[2] == 0x34AE67B339EEC99CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x34AE67B339EEC99CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x34AE67B339EEC99CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A344F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A34898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>>::~Model()
{
}

unint64_t *ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  *(void *)&long long v123 = gdc::Registry::storage<md::ls::EnteringView>(v2);
  *((void *)&v123 + 1) = gdc::Registry::storage<md::ls::SupportsDepthPrePass>(v2);
  *(void *)&long long v124 = gdc::Registry::storage<md::ls::RenderablesCount>(v2);
  *((void *)&v124 + 1) = gdc::Registry::storage<md::ls::AssociationTileHandle>(v2);
  *(void *)&long long v125 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v2);
  *((void *)&v125 + 1) = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v2);
  *(void *)&long long v126 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v2);
  *((void *)&v126 + 1) = gdc::Registry::storage<md::ls::TileMatrix>(v2);
  *(void *)&long long v127 = gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(v2);
  *((void *)&v127 + 1) = gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(v2);
  gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v121, &v123);
  long long v115 = v124;
  long long v117 = v123;
  v128[0] = v123;
  v128[1] = v124;
  long long v112 = v126;
  long long v113 = v125;
  v128[2] = v125;
  v128[3] = v126;
  long long v118 = v127;
  v128[4] = v127;
  uint64_t v3 = *(unint64_t **)(gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle> const*>(v128)
                            + 32);
  uint64_t v4 = v122;
  std::string v119 = v3;
  if (v3 == v122)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_121:
    *uint64_t result = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v5 = (void *)*((void *)&v118 + 1);
    uint64_t v6 = (void *)v118;
    unint64_t v7 = (void *)v113;
    uint64_t v8 = (void *)v115;
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v114 = v121[0];
    unint64_t v116 = result;
    while (1)
    {
      *uint64_t result = *v4;
      unint64_t v10 = *v4;
      unint64_t v11 = HIDWORD(*v4);
      unint64_t v12 = *v4 >> 39;
      uint64_t v13 = *(void *)(v117 + 32);
      if (v12 < (*(void *)(v117 + 40) - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * v12)) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v17 = *(void *)(v117 + 56),
            uint64_t v16 = *(void *)(v117 + 64),
            v15 < (v16 - v17) >> 3)
        && ((v18 = v17 + 8 * v15, v18 != v16) ? (BOOL v19 = *(_DWORD *)(v18 + 4) == v11) : (BOOL v19 = 0), v19))
      {
        unint64_t v20 = *(void *)(v117 + 88);
        unint64_t v21 = *(void *)(v117 + 80) + v15;
      }
      else
      {
        unint64_t v20 = *(void *)(v117 + 88);
        unint64_t v21 = v20;
      }
      if (v21 == v20) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v21;
      }
      uint64_t v23 = *(void *)(*((void *)&v117 + 1) + 32);
      if (v12 < (*(void *)(*((void *)&v117 + 1) + 40) - v23) >> 3
        && (uint64_t v24 = *(void *)(v23 + 8 * v12)) != 0
        && (unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v27 = *(void *)(*((void *)&v117 + 1) + 56),
            uint64_t v26 = *(void *)(*((void *)&v117 + 1) + 64),
            v25 < (v26 - v27) >> 3)
        && ((uint64_t v28 = v27 + 8 * v25, v28 != v26) ? (v29 = *(_DWORD *)(v28 + 4) == v11) : (v29 = 0), v29))
      {
        unint64_t v30 = *(void *)(*((void *)&v117 + 1) + 88);
        unint64_t v31 = *(void *)(*((void *)&v117 + 1) + 80) + v25;
      }
      else
      {
        unint64_t v30 = *(void *)(*((void *)&v117 + 1) + 88);
        unint64_t v31 = v30;
      }
      if (v31 == v30) {
        unint64_t v32 = 0;
      }
      else {
        unint64_t v32 = v31;
      }
      uint64_t v33 = v8[4];
      if (v12 < (v8[5] - v33) >> 3
        && (uint64_t v34 = *(void *)(v33 + 8 * v12)) != 0
        && (unint64_t v35 = *(unsigned __int16 *)(v34 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v37 = v8[7],
            uint64_t v36 = v8[8],
            v35 < (v36 - v37) >> 3)
        && ((uint64_t v38 = v37 + 8 * v35, v38 != v36) ? (v39 = *(_DWORD *)(v38 + 4) == v11) : (v39 = 0), v39))
      {
        uint64_t v40 = v8[11];
        uint64_t v41 = v8[10] + 32 * v35;
      }
      else
      {
        uint64_t v40 = v8[11];
        uint64_t v41 = v40;
      }
      if (v41 == v40) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v41;
      }
      uint64_t v43 = *(void *)(*((void *)&v115 + 1) + 32);
      if (v12 < (*(void *)(*((void *)&v115 + 1) + 40) - v43) >> 3
        && (uint64_t v44 = *(void *)(v43 + 8 * v12)) != 0
        && (unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v47 = *(void *)(*((void *)&v115 + 1) + 56),
            uint64_t v46 = *(void *)(*((void *)&v115 + 1) + 64),
            v45 < (v46 - v47) >> 3)
        && ((uint64_t v48 = v47 + 8 * v45, v48 != v46) ? (v49 = *(_DWORD *)(v48 + 4) == v11) : (v49 = 0), v49))
      {
        uint64_t v50 = *(void *)(*((void *)&v115 + 1) + 88);
        uint64_t v51 = *(void *)(*((void *)&v115 + 1) + 80) + 8 * v45;
      }
      else
      {
        uint64_t v50 = *(void *)(*((void *)&v115 + 1) + 88);
        uint64_t v51 = v50;
      }
      if (v51 == v50) {
        uint64_t v52 = 0;
      }
      else {
        uint64_t v52 = v51;
      }
      uint64_t v53 = v7[4];
      if (v12 < (v7[5] - v53) >> 3
        && (uint64_t v54 = *(void *)(v53 + 8 * v12)) != 0
        && (unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v57 = v7[7],
            uint64_t v56 = v7[8],
            v55 < (v56 - v57) >> 3)
        && ((uint64_t v58 = v57 + 8 * v55, v58 != v56) ? (v59 = *(_DWORD *)(v58 + 4) == v11) : (v59 = 0), v59))
      {
        uint64_t v60 = v7[11];
        uint64_t v61 = v7[10] + 8 * v55;
      }
      else
      {
        uint64_t v60 = v7[11];
        uint64_t v61 = v60;
      }
      if (v61 == v60) {
        uint64_t v62 = 0;
      }
      else {
        uint64_t v62 = v61;
      }
      uint64_t v63 = *(void *)(*((void *)&v113 + 1) + 32);
      if (v12 < (*(void *)(*((void *)&v113 + 1) + 40) - v63) >> 3
        && (uint64_t v64 = *(void *)(v63 + 8 * v12)) != 0
        && (unint64_t v65 = *(unsigned __int16 *)(v64 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v67 = *(void *)(*((void *)&v113 + 1) + 56),
            uint64_t v66 = *(void *)(*((void *)&v113 + 1) + 64),
            v65 < (v66 - v67) >> 3)
        && ((uint64_t v68 = v67 + 8 * v65, v68 != v66) ? (v69 = *(_DWORD *)(v68 + 4) == v11) : (v69 = 0), v69))
      {
        uint64_t v70 = *(void *)(*((void *)&v113 + 1) + 88);
        uint64_t v71 = *(void *)(*((void *)&v113 + 1) + 80) + 8 * v65;
      }
      else
      {
        uint64_t v70 = *(void *)(*((void *)&v113 + 1) + 88);
        uint64_t v71 = v70;
      }
      if (v71 == v70) {
        uint64_t v72 = 0;
      }
      else {
        uint64_t v72 = v71;
      }
      uint64_t v73 = *(void *)(v112 + 32);
      if (v12 < (*(void *)(v112 + 40) - v73) >> 3
        && (uint64_t v74 = *(void *)(v73 + 8 * v12)) != 0
        && (unint64_t v75 = *(unsigned __int16 *)(v74 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v77 = *(void *)(v112 + 56),
            uint64_t v76 = *(void *)(v112 + 64),
            v75 < (v76 - v77) >> 3)
        && (uint64_t v78 = v77 + 8 * v75, v78 != v76)
        && *(_DWORD *)(v78 + 4) == v11)
      {
        uint64_t v79 = *(void *)(v112 + 88);
        uint64_t v80 = *(void *)(v112 + 80) + 8 * v75;
      }
      else
      {
        uint64_t v79 = *(void *)(v112 + 88);
        uint64_t v80 = v79;
      }
      if (v80 == v79) {
        uint64_t v81 = 0;
      }
      else {
        uint64_t v81 = v80;
      }
      uint64_t v82 = *(void *)(*((void *)&v112 + 1) + 32);
      if (v12 < (*(void *)(*((void *)&v112 + 1) + 40) - v82) >> 3
        && (uint64_t v83 = *(void *)(v82 + 8 * v12)) != 0
        && (unint64_t v84 = *(unsigned __int16 *)(v83 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v86 = *(void *)(*((void *)&v112 + 1) + 56),
            uint64_t v85 = *(void *)(*((void *)&v112 + 1) + 64),
            v84 < (v85 - v86) >> 3)
        && (uint64_t v87 = v86 + 8 * v84, v87 != v85)
        && *(_DWORD *)(v87 + 4) == v11)
      {
        uint64_t v88 = *(void *)(*((void *)&v112 + 1) + 88);
        uint64_t v89 = *(void *)(*((void *)&v112 + 1) + 80) + 8 * v84;
      }
      else
      {
        uint64_t v88 = *(void *)(*((void *)&v112 + 1) + 88);
        uint64_t v89 = v88;
      }
      if (v89 == v88) {
        uint64_t v89 = 0;
      }
      uint64_t v90 = v6[4];
      if (v12 < (v6[5] - v90) >> 3
        && (uint64_t v91 = *(void *)(v90 + 8 * v12)) != 0
        && (unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v94 = v6[7],
            uint64_t v93 = v6[8],
            v92 < (v93 - v94) >> 3)
        && (uint64_t v95 = v94 + 8 * v92, v95 != v93)
        && *(_DWORD *)(v95 + 4) == v11)
      {
        uint64_t v96 = v6[11];
        uint64_t v97 = v6[10] + 8 * v92;
      }
      else
      {
        uint64_t v96 = v6[11];
        uint64_t v97 = v96;
      }
      if (v97 == v96) {
        uint64_t v97 = 0;
      }
      uint64_t v98 = v5[4];
      if (v12 < (v5[5] - v98) >> 3
        && (uint64_t v99 = *(void *)(v98 + 8 * v12)) != 0
        && (unint64_t v100 = *(unsigned __int16 *)(v99 + 2 * (HIDWORD(v10) & 0x7F)),
            uint64_t v102 = v5[7],
            uint64_t v101 = v5[8],
            v100 < (v101 - v102) >> 3)
        && (uint64_t v103 = v102 + 8 * v100, v103 != v101)
        && *(_DWORD *)(v103 + 4) == v11)
      {
        uint64_t v104 = v5[11];
        uint64_t v105 = v5[10] + 8 * v100;
      }
      else
      {
        uint64_t v104 = v5[11];
        uint64_t v105 = v104;
      }
      uint64_t v106 = *(void *)(a2 + 24);
      if (!v106) {
        break;
      }
      uint64_t v107 = v5;
      if (v105 == v104) {
        uint64_t v108 = 0;
      }
      else {
        uint64_t v108 = v105;
      }
      (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v106 + 48))(v106, v22, v32, v42, v52, v62, v72, v81, v89, v97, v108);
      uint64_t v109 = *(unint64_t **)(v114 + 32);
      while (1)
      {
        uint64_t v122 = ++v4;
        if (v4 == v109) {
          break;
        }
        if (gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v121)) {
          goto LABEL_4;
        }
      }
      uint64_t v4 = v109;
LABEL_4:
      uint64_t v5 = v107;
      uint64_t v6 = (void *)v118;
      uint64_t result = v116;
      if (v119 == v4) {
        goto LABEL_121;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (unint64_t *)gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v110, v111);
  }
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v16 = a2[9];
  v17[0] = *a2;
  uint64_t v3 = v17[0];
  v17[1] = v4;
  v17[2] = v5;
  void v17[3] = v6;
  v17[4] = v7;
  v17[5] = v8;
  v17[6] = v9;
  v17[7] = v10;
  void v17[8] = v11;
  v17[9] = v16;
  uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle> const*>(v17);
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v16;
  uint64_t v14 = *(void *)(result + 24);
  uint64_t v13 = *(void *)(result + 32);
  a1[12] = v14;
  if (v13 != v14)
  {
    uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      uint64_t v15 = v14 + 8;
      do
      {
        a1[12] = v15;
        if (v15 == v13) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v15 += 8;
      }
      while (!result);
    }
  }
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle> const*>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1) {
    uint64_t v2 = *a1 + 32;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v1) {
    uint64_t v3 = v1 + 32;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  if (v4) {
    uint64_t v6 = v4 + 32;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5) {
    uint64_t v7 = v5 + 32;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  if (v8) {
    uint64_t v10 = v8 + 32;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v9) {
    uint64_t v11 = v9 + 32;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  if (v12) {
    uint64_t v14 = v12 + 32;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13) {
    uint64_t v15 = v13 + 32;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v17 = a1[8];
  uint64_t v16 = a1[9];
  uint64_t v18 = v17 + 32;
  if (!v17) {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v16 + 32;
  if (!v16) {
    uint64_t v19 = 0;
  }
  if (*(void *)(v3 + 32) - *(void *)(v3 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v3;
  }
  if (*(void *)(v6 + 32) - *(void *)(v6 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v6;
  }
  if (*(void *)(v7 + 32) - *(void *)(v7 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v7;
  }
  if (*(void *)(v10 + 32) - *(void *)(v10 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v10;
  }
  if (*(void *)(v11 + 32) - *(void *)(v11 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v11;
  }
  if (*(void *)(v14 + 32) - *(void *)(v14 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v14;
  }
  if (*(void *)(v15 + 32) - *(void *)(v15 + 24) >= *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v15 = v2;
  }
  if (*(void *)(v18 + 32) - *(void *)(v18 + 24) >= *(void *)(v15 + 32) - *(void *)(v15 + 24)) {
    uint64_t v18 = v15;
  }
  if (*(void *)(v19 + 32) - *(void *)(v19 + 24) >= *(void *)(v18 + 32) - *(void *)(v18 + 24)) {
    return v18;
  }
  else {
    return v19;
  }
}

uint64_t gdc::Registry::storage<md::ls::SupportsDepthPrePass>(int8x8_t *a1)
{
  uint64_t v10 = 0x33C5934AE646F3E2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x33C5934AE646F3E2;
    if (*(void *)&v1 <= 0x33C5934AE646F3E2uLL) {
      uint64_t v3 = 0x33C5934AE646F3E2uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x33C5934AE646F3E2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x33C5934AE646F3E2)
      {
        if (v5[2] == 0x33C5934AE646F3E2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x33C5934AE646F3E2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x33C5934AE646F3E2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A35378(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::AssociationTileHandle,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>,md::ls::TileUnitsPerMeter,md::ls::MapDataTypeV,md::ls::TileViewConstantDataHandle,md::ls::TileMatrix,md::ls::TileRenderableDataHandle,md::ls::RenderablesCount,md::ls::TileTransformConstantDataHandle,md::ls::TransferStyleAttributeRasterSet,md::ls::TileClippingConstantDataHandle,md::ls::TileShadowConstantDataHandle,md::ls::TilePrepassShadowConstantDataHandle,md::ls::TilePrepassConstantDataHandle,md::ls::TileStyleCameraConstantDataHandle>(uint64_t *a1, int8x8_t *a2)
{
  uint64_t v21 = gdc::Registry::storage<md::ls::RegisterHandle>(a2);
  uint64_t v20 = gdc::Registry::storage<md::ls::EnteringView>(a2);
  uint64_t v19 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(a2);
  uint64_t v18 = gdc::Registry::storage<md::ls::AssociationTileHandle>(a2);
  uint64_t v17 = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(a2);
  uint64_t v16 = gdc::Registry::storage<md::ls::TileUnitsPerMeter>(a2);
  uint64_t v15 = gdc::Registry::storage<md::ls::MapDataTypeV>(a2);
  uint64_t v14 = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(a2);
  uint64_t v13 = gdc::Registry::storage<md::ls::TileMatrix>(a2);
  uint64_t v4 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(a2);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderablesCount>(a2);
  uint64_t v6 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(a2);
  uint64_t v7 = gdc::Registry::storage<md::ls::TransferStyleAttributeRasterSet>(a2);
  uint64_t v8 = gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>(a2);
  uint64_t v9 = gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(a2);
  uint64_t v10 = gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(a2);
  uint64_t v11 = gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(a2);
  uint64_t result = gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(a2);
  *a1 = v21;
  a1[1] = v20;
  a1[2] = v19;
  a1[3] = v18;
  a1[4] = v17;
  a1[5] = v16;
  a1[6] = v15;
  a1[7] = v14;
  a1[8] = v13;
  a1[9] = v4;
  a1[10] = v5;
  a1[11] = v6;
  a1[12] = v7;
  a1[13] = v8;
  a1[14] = v9;
  a1[15] = v10;
  a1[16] = v11;
  a1[17] = result;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xD270E8E58701C515;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD270E8E58701C515;
    if (*(void *)&v1 <= 0xD270E8E58701C515) {
      unint64_t v3 = 0xD270E8E58701C515 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD270E8E58701C515;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD270E8E58701C515)
      {
        if (v5[2] == 0xD270E8E58701C515) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD270E8E58701C515) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD270E8E58701C515) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A35750(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x414BF8D9069621AELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x414BF8D9069621AELL;
    if (*(void *)&v1 <= 0x414BF8D9069621AEuLL) {
      uint64_t v3 = 0x414BF8D9069621AEuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x414BF8D9069621AELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x414BF8D9069621AELL)
      {
        if (v5[2] == 0x414BF8D9069621AELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x414BF8D9069621AELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x414BF8D9069621AELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A359C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileRenderableDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xCF1A54FDD9A1F93FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCF1A54FDD9A1F93FLL;
    if (*(void *)&v1 <= 0xCF1A54FDD9A1F93FLL) {
      unint64_t v3 = 0xCF1A54FDD9A1F93FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCF1A54FDD9A1F93FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCF1A54FDD9A1F93FLL)
      {
        if (v5[2] == 0xCF1A54FDD9A1F93FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCF1A54FDD9A1F93FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCF1A54FDD9A1F93FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A35C30(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::AssociationTileHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x24B7D588576BB14ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x24B7D588576BB14ELL;
    if (*(void *)&v1 <= 0x24B7D588576BB14EuLL) {
      uint64_t v3 = 0x24B7D588576BB14EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x24B7D588576BB14ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x24B7D588576BB14ELL)
      {
        if (v5[2] == 0x24B7D588576BB14ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x24B7D588576BB14ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x24B7D588576BB14ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A35EA0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderablesCount>(int8x8_t *a1)
{
  uint64_t v10 = 0x684A78DCF1B284C1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x684A78DCF1B284C1;
    if (*(void *)&v1 <= 0x684A78DCF1B284C1uLL) {
      uint64_t v3 = 0x684A78DCF1B284C1uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x684A78DCF1B284C1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x684A78DCF1B284C1)
      {
        if (v5[2] == 0x684A78DCF1B284C1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x684A78DCF1B284C1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x684A78DCF1B284C1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A36110(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xB4E92DEB291A7B99;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB4E92DEB291A7B99;
    if (*(void *)&v1 <= 0xB4E92DEB291A7B99) {
      unint64_t v3 = 0xB4E92DEB291A7B99 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB4E92DEB291A7B99;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB4E92DEB291A7B99)
      {
        if (v5[2] == 0xB4E92DEB291A7B99) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB4E92DEB291A7B99) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB4E92DEB291A7B99) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A36380(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0x80A8239313E99C5FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x80A8239313E99C5FLL;
    if (*(void *)&v1 <= 0x80A8239313E99C5FLL) {
      unint64_t v3 = 0x80A8239313E99C5FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x80A8239313E99C5FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x80A8239313E99C5FLL)
      {
        if (v5[2] == 0x80A8239313E99C5FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x80A8239313E99C5FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x80A8239313E99C5FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A365F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xCAC3230B44CECEB9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCAC3230B44CECEB9;
    if (*(void *)&v1 <= 0xCAC3230B44CECEB9) {
      unint64_t v3 = 0xCAC3230B44CECEB9 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCAC3230B44CECEB9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCAC3230B44CECEB9)
      {
        if (v5[2] == 0xCAC3230B44CECEB9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCAC3230B44CECEB9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCAC3230B44CECEB9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A36860(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x33C39664142A0949;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x33C39664142A0949;
    if (*(void *)&v1 <= 0x33C39664142A0949uLL) {
      uint64_t v3 = 0x33C39664142A0949uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x33C39664142A0949;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x33C39664142A0949)
      {
        if (v5[2] == 0x33C39664142A0949) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x33C39664142A0949) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x33C39664142A0949) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A36AD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xF2296D6406C155CBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF2296D6406C155CBLL;
    if (*(void *)&v1 <= 0xF2296D6406C155CBLL) {
      unint64_t v3 = 0xF2296D6406C155CBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF2296D6406C155CBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF2296D6406C155CBLL)
      {
        if (v5[2] == 0xF2296D6406C155CBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF2296D6406C155CBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF2296D6406C155CBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A36D40(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(int8x8_t *a1)
{
  unint64_t v10 = 0xC0EF30C6D6B08313;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC0EF30C6D6B08313;
    if (*(void *)&v1 <= 0xC0EF30C6D6B08313) {
      unint64_t v3 = 0xC0EF30C6D6B08313 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC0EF30C6D6B08313;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC0EF30C6D6B08313)
      {
        if (v5[2] == 0xC0EF30C6D6B08313) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC0EF30C6D6B08313) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC0EF30C6D6B08313) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A36FB0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RegisterHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x41650A8095FBA956;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x41650A8095FBA956;
    if (*(void *)&v1 <= 0x41650A8095FBA956uLL) {
      uint64_t v3 = 0x41650A8095FBA956uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x41650A8095FBA956;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x41650A8095FBA956)
      {
        if (v5[2] == 0x41650A8095FBA956) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x41650A8095FBA956) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x41650A8095FBA956) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A37220(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MapDataTypeV>(int8x8_t *a1)
{
  uint64_t v10 = 0x52DA3EA752368C9DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x52DA3EA752368C9DLL;
    if (*(void *)&v1 <= 0x52DA3EA752368C9DuLL) {
      uint64_t v3 = 0x52DA3EA752368C9DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x52DA3EA752368C9DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x52DA3EA752368C9DLL)
      {
        if (v5[2] == 0x52DA3EA752368C9DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x52DA3EA752368C9DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x52DA3EA752368C9DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A37490(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TransferStyleAttributeRasterSet>(int8x8_t *a1)
{
  uint64_t v10 = 0x6CC93B0E0603EFDCLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6CC93B0E0603EFDCLL;
    if (*(void *)&v1 <= 0x6CC93B0E0603EFDCuLL) {
      uint64_t v3 = 0x6CC93B0E0603EFDCuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6CC93B0E0603EFDCLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6CC93B0E0603EFDCLL)
      {
        if (v5[2] == 0x6CC93B0E0603EFDCLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6CC93B0E0603EFDCLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6CC93B0E0603EFDCLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A37700(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileUnitsPerMeter>(int8x8_t *a1)
{
  unint64_t v10 = 0xE2FCA37BA4379744;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE2FCA37BA4379744;
    if (*(void *)&v1 <= 0xE2FCA37BA4379744) {
      unint64_t v3 = 0xE2FCA37BA4379744 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE2FCA37BA4379744;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE2FCA37BA4379744)
      {
        if (v5[2] == 0xE2FCA37BA4379744) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE2FCA37BA4379744) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE2FCA37BA4379744) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A37970(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::PolygonLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  unint64_t v7 = a3[1];
  v35[0] = &unk_1EF56F648;
  v35[1] = a2;
  v33[0] = &unk_1EF56F690;
  v33[1] = a2;
  uint64_t v34 = v33;
  uint64_t v38 = v37;
  uint64_t v36 = v35;
  v37[0] = &unk_1EF56F690;
  v37[1] = a2;
  _ZNSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__0NS_9allocatorISK_EEFvvEEclEv((uint64_t)v35);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  if (v36 == v35)
  {
    (*(void (**)(void *))(v35[0] + 32))(v35);
  }
  else if (v36)
  {
    (*(void (**)(void))(*v36 + 40))();
  }
  float v8 = *(double *)(a1 + 152);
  *(float *)a4 = v8;
  uint64_t v9 = *v7;
  {
    uint64_t v32 = v9;
    uint64_t v9 = v32;
    if (v31)
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
      uint64_t v9 = v32;
    }
  }
  unint64_t v10 = *(_WORD **)(v9 + 48);
  uint64_t v11 = *(_WORD **)(v9 + 56);
  if (v10 == v11)
  {
    uint64_t v12 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    uint64_t v12 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    uint64_t v13 = *(_WORD **)(v9 + 48);
    while (*v13 != 65)
    {
      v13 += 16;
      if (v13 == v11) {
        goto LABEL_22;
      }
    }
    if (v13 == v11)
    {
      uint64_t v12 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v10 != 65)
      {
        v10 += 16;
        if (v10 == v11)
        {
          unint64_t v10 = *(_WORD **)(v9 + 56);
          break;
        }
      }
      uint64_t v12 = (uint64_t *)(v10 + 4);
    }
  }
LABEL_22:
  uint64_t v14 = v12[2];
  uint64_t v15 = *v6;
  uint64_t v16 = v6[1];
  if (*v6 != v16)
  {
    while (*(unsigned char *)v15 != 34)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_34;
      }
    }
  }
  if (v15 == v16
    || (*(unsigned char *)(a1 + 232) ? (BOOL v17 = v14 == 0) : (BOOL v17 = 1), v17 ? (v18 = 0) : (v18 = 1), !*(void *)(v15 + 8)))
  {
LABEL_34:
    char v18 = 0;
  }
  *(unsigned char *)(a4 + 4) = v18;
  uint64_t v19 = *v7;
  {
    qword_1EB3176C0 = 0;
    qword_1EB3176B8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
  }
  uint64_t v20 = *(_WORD **)(v19 + 48);
  uint64_t v21 = *(_WORD **)(v19 + 56);
  unint64_t v22 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v20 != v21)
  {
    uint64_t v23 = *(_WORD **)(v19 + 48);
    while (*v23 != 64)
    {
      v23 += 16;
      if (v23 == v21) {
        goto LABEL_47;
      }
    }
    if (v23 == v21)
    {
      unint64_t v22 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v20 != 64)
      {
        v20 += 16;
        if (v20 == v21)
        {
          uint64_t v20 = *(_WORD **)(v19 + 56);
          break;
        }
      }
      unint64_t v22 = (uint64_t *)(v20 + 4);
    }
  }
LABEL_47:
  uint64_t v24 = v22[2];
  uint64_t v25 = *v6;
  uint64_t v26 = v6[1];
  if (*v6 != v26)
  {
    while (*(unsigned char *)v25 != 32)
    {
      v25 += 16;
      if (v25 == v26) {
        goto LABEL_53;
      }
    }
  }
  if (v25 == v26) {
LABEL_53:
  }
    BOOL v27 = 0;
  else {
    BOOL v27 = *(void *)(v25 + 8) != 0;
  }
  if (v24) {
    BOOL v28 = v27;
  }
  else {
    BOOL v28 = 0;
  }
  *(unsigned char *)(a4 + 5) = v28;
  uint64_t v29 = *(void *)(a1 + 120);
  *(unsigned char *)(a4 + 16) = *(unsigned char *)(a1 + 128);
  *(void *)(a4 + 8) = v29;
  if (!v38)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v38 + 48))(v38);
  uint64_t result = (uint64_t)v38;
  if (v38 == v37) {
    return (*(uint64_t (**)(void *))(v37[0] + 32))(v37);
  }
  if (v38) {
    return (*(uint64_t (**)(void))(*v38 + 40))();
  }
  return result;
}

void sub_1A1A37E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21 == v21)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
  }
  else if (a21)
  {
    (*(void (**)(void))(*(void *)a21 + 40))();
  }
  std::function<void ()(void)>::~function(&a10);
  std::function<void ()(void)>::~function(&a14);
  _Unwind_Resume(a1);
}

void sub_1A1A37EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  if (a21 == &a18)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
    _Unwind_Resume(exception_object);
  }
  if (a21) {
    (*(void (**)(void))(*a21 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__1NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PolygonLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__0NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PolygonLogic", "", v5, 2u);
  }
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A384C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 == v17)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
  }
  else if (a15)
  {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData &>>::~Model()
{
}

void *ecs2::Query<md::ls::UniqueMaterialData &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData &>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  os_signpost_id_t v4 = v3;
  uint64_t v6 = (unint64_t *)v3[7];
  uint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((uint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      uint64_t v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *uint64_t v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v4[10] + 24 * v27;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35) {
            goto LABEL_44;
          }
        }
        if (v34 == v33) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v34;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v36);
        uint64_t v37 = v4[4];
        uint64_t v38 = v4[7];
        unint64_t v22 = (uint64_t *)v4[8];
        uint64_t v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          unint64_t v40 = *((unsigned int *)v39 + 1);
          uint64_t v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            uint64_t v42 = *(void *)(v37 + 8 * (v40 >> 7));
            uint64_t v41 = v4[8];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                uint64_t v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != v40) {
                  uint64_t v41 = v4[8];
                }
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            unint64_t v22 = v39 - 1;
            break;
          }
        }
        uint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    uint64_t v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      char v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        char v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          char v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            char v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              char v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        uint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::SupportsRebuildingRenderables const&,md::ls::EnteringView const&,md::ls::AssociationTileHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  os_signpost_id_t v4 = (void *)gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::EnteringView>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::AssociationTileHandle>(v3);
  unint64_t v10 = (void *)v6;
  uint64_t v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7]) {
    uint64_t v11 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= v11[4] - v11[3]) {
    uint64_t v12 = (uint64_t)v11;
  }
  else {
    uint64_t v12 = v6 + 32;
  }
  v82[0] = v12;
  v82[1] = v4;
  void v82[2] = v5;
  v82[3] = v6;
  BOOL v14 = *(void **)(v12 + 24);
  uint64_t v13 = *(void **)(v12 + 32);
  uint64_t v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    unint64_t v15 = v14 + 1;
    do
    {
      BOOL v14 = v15;
      uint64_t v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      unint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  unint64_t v17 = &ecs2::Runtime::_localEntity;
  char v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v4[7];
    uint64_t v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      unint64_t v31 = v4[11];
      unint64_t v32 = v4[10] + v26;
    }
    else
    {
LABEL_23:
      unint64_t v31 = v4[11];
      unint64_t v32 = v31;
    }
    unint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      unint64_t v41 = v5[11];
      unint64_t v42 = v5[10] + v36;
    }
    else
    {
      unint64_t v41 = v5[11];
      unint64_t v42 = v41;
    }
    unint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v10[7];
        uint64_t v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    uint64_t v51 = v10[11];
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    uint64_t v56 = *(void **)(v12 + 32);
    unint64_t v20 = v14 + 1;
    uint64_t v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v4[4];
      uint64_t v59 = v4[7];
      uint64_t v58 = v4[8];
      uint64_t v60 = v5[4];
      uint64_t result = v5[7];
      uint64_t v61 = v5[8];
      uint64_t v62 = v10[4];
      uint64_t v64 = v10[7];
      uint64_t v63 = v10[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          unint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      uint64_t v56 = v20;
LABEL_14:
      uint64_t v83 = v20;
    }
    BOOL v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  uint64_t v51 = v10[11];
  uint64_t v52 = v10[10] + 8 * v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::EnteringView>(int8x8_t *a1)
{
  unint64_t v10 = 0xE0AB1B46607846E6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE0AB1B46607846E6;
    if (*(void *)&v1 <= 0xE0AB1B46607846E6) {
      unint64_t v3 = 0xE0AB1B46607846E6 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE0AB1B46607846E6;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE0AB1B46607846E6)
      {
        if (v5[2] == 0xE0AB1B46607846E6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE0AB1B46607846E6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE0AB1B46607846E6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A38E88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SupportsRebuildingRenderables>(int8x8_t *a1)
{
  unint64_t v10 = 0xD853A1C6BA9D5FEDLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD853A1C6BA9D5FEDLL;
    if (*(void *)&v1 <= 0xD853A1C6BA9D5FEDLL) {
      unint64_t v3 = 0xD853A1C6BA9D5FEDLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD853A1C6BA9D5FEDLL;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD853A1C6BA9D5FEDLL)
      {
        if (v5[2] == 0xD853A1C6BA9D5FEDLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD853A1C6BA9D5FEDLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD853A1C6BA9D5FEDLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A390F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = a2 - v3;
  if (a2 <= v3)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    unint64_t v6 = v5 << 6;
    if (v5 << 6 < v4 || v3 > (v5 << 6) - v4)
    {
      __dst = 0;
      long long v18 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        abort();
      }
      unint64_t v8 = v5 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v6 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve((uint64_t)&__dst, v9);
      unint64_t v10 = *(void **)a1;
      uint64_t v11 = *(void *)(a1 + 8);
      *(void *)&long long v18 = v11 + v4;
      uint64_t v12 = (char *)__dst;
      if (v11 < 1)
      {
        LODWORD(v15) = 0;
        BOOL v14 = (char *)__dst;
      }
      else
      {
        unint64_t v13 = (unint64_t)v11 >> 6;
        if ((unint64_t)v11 >= 0x40) {
          memmove(__dst, v10, 8 * v13);
        }
        BOOL v14 = &v12[8 * v13];
        uint64_t v15 = v11 & 0x3F;
        if (v15) {
          *(void *)BOOL v14 = *(void *)v14 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v15) | *((void *)v10 + v13) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
        }
        unint64_t v10 = *(void **)a1;
      }
      *(void *)a1 = v12;
      *(_OWORD *)(a1 + 8) = v18;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      BOOL v14 = (char *)(*(void *)a1 + 8 * (v3 >> 6));
      uint64_t v15 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (v4)
    {
      if (v15)
      {
        if ((64 - v15) >= v4) {
          unint64_t v16 = v4;
        }
        else {
          unint64_t v16 = (64 - v15);
        }
        *(void *)v14 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v15 - v16)) & (-1 << v15));
        v14 += 8;
        v4 -= v16;
      }
      if (v4 >= 0x40) {
        bzero(v14, 8 * (v4 >> 6));
      }
      if ((v4 & 0x3F) != 0) {
        *(void *)&v14[8 * (v4 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v4 & 0x3F));
      }
    }
  }
}

void sub_1A1A392F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void md::GeoResourceProvider::dataForResourceName(uint64_t *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = [MEMORY[0x1E4F64908] sharedManager];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  unint64_t v6 = [NSString stringWithUTF8String:v5];
  unint64_t v7 = [v4 dataForResourceWithName:v6 fallbackBundle:0 fallbackNameHandler:&__block_literal_global_31397];

  if (v7 && [v7 length]) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }

  id v9 = v8;
  unint64_t v10 = (const void *)[v9 bytes];
  id v16 = v9;
  uint64_t v11 = [v16 bytes];
  uint64_t v12 = [v16 length];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  size_t v13 = v11 + v12 - (void)v10;
  if (v13)
  {
    if ((v13 & 0x8000000000000000) != 0) {
      abort();
    }
    BOOL v14 = (char *)operator new(v13);
    *a2 = v14;
    uint64_t v15 = &v14[v13];
    a2[2] = &v14[v13];
    memcpy(v14, v10, v13);
    a2[1] = v15;
  }
}

void sub_1A1A39448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::DaVinciMaterialResourceDecoder::decode(const gdc::RawResourceSourceData *a1@<X2>, void *a2@<X8>)
{
  if (*(void *)a1)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a1 + 32))(*(void *)a1);
    unint64_t v7 = (geo::codec::Allocator *)(*(uint64_t (**)(void))(**(void **)a1 + 24))();
    v51[0] = v6;
    v51[1] = v7;
    v51[2] = 0;
    char v52 = 0;
    __int16 v9 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    int v15 = 1065353216;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    int v18 = 1065353216;
    int v21 = 1065353216;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v26 = 0u;
    long long v25 = 0u;
    int v24 = 1065353216;
    int v27 = 1065353216;
    long long v28 = 0u;
    long long v29 = 0u;
    int v30 = 1065353216;
    long long v31 = 0u;
    long long v32 = 0u;
    int v33 = 1065353216;
    long long v34 = 0u;
    long long v35 = 0u;
    int v36 = 1065353216;
    long long v37 = 0u;
    long long v38 = 0u;
    int v39 = 1065353216;
    long long v40 = 0u;
    long long v41 = 0u;
    int v42 = 1065353216;
    __int16 v43 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    int v46 = 0;
    int v47 = 1065353216;
    uint64_t v49 = 0;
    long long v48 = 0u;
    uint64_t v50 = geo::codec::Allocator::instance(v7);
    if (geo::codec::MaterialSheet::decodeExternalMaterial((geo::codec::MaterialSheet *)&v9, (geo::ibitstream *)v51)) {
      md::DaVinciMaterialResourceDecoder::translateFromCodec((md::DaVinciMaterialResourceDecoder *)&v8, (geo::codec::MaterialSheet *)&v9);
    }
    *a2 = 0;
    a2[1] = 0;
    geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)&v9);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1A1A396C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

BOOL geo::codec::MaterialSheet::decodeExternalMaterial(geo::codec::MaterialSheet *this, geo::ibitstream *a2)
{
  long long v10 = 0;
  long long v11 = 0;
  uint64_t v12 = 0;
  __p = 0;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  BOOL Bytes = geo::ibitstream::readBytes((uint64_t *)a2, (uint64_t)&__p, 4uLL);
  uint64_t v5 = __p;
  if (Bytes)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v10, (char *)__p, (char *)v14, v14 - (void)__p);
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = v10;
    if (*(unsigned char *)v10 != 68)
    {
      BOOL v8 = 0;
      goto LABEL_18;
    }
    if (*((unsigned char *)v10 + 1) == 118 && *((unsigned char *)v10 + 2) == 77 && *((unsigned char *)v10 + 3) == 116)
    {
      geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)&__p);
      if ((_BYTE)__p)
      {
        unsigned int v7 = HIDWORD(__p);
        if (HIDWORD(__p) >= 0x13)
        {
          geo::ibitstream::readUInt64((uint64_t *)a2, (uint64_t)&__p);
          if ((_BYTE)__p)
          {
            BOOL v8 = geo::codec::MaterialSheet::decodeMaterial(this, a2, v7, v14);
            goto LABEL_15;
          }
        }
      }
    }
  }
  else if (__p)
  {
    unint64_t v14 = (unint64_t)__p;
    operator delete(__p);
  }
  BOOL v8 = 0;
LABEL_15:
  uint64_t v6 = v10;
  if (!v10) {
    return v8;
  }
LABEL_18:
  long long v11 = v6;
  operator delete(v6);
  return v8;
}

void sub_1A1A39828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *geo::ibitstream::readUInt32@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  int v13 = 0;
  unint64_t v2 = this[1];
  uint64_t v3 = this[2];
  char v4 = *((unsigned char *)this + 24);
  unint64_t v5 = v3 + 5;
  if (!v4) {
    unint64_t v5 = v3 + 4;
  }
  if (v2 >= v5)
  {
    uint64_t v6 = *this;
    if (*((unsigned char *)this + 24))
    {
      uint64_t v7 = 0;
      uint64_t v8 = v6 + v3;
      uint64_t v9 = v3 + 1;
      do
      {
        if (v9 + v7 >= v2) {
          int v10 = 0;
        }
        else {
          int v10 = *(unsigned __int8 *)(v8 + v7 + 1);
        }
        unsigned int v11 = ((v10 & (0xFFFF << (8 - v4))) >> (8 - v4)) | ((((1 << (8 - v4)) + 255) & *(unsigned __int8 *)(v8 + v7)) << v4);
        this[2] = v9 + v7;
        *((unsigned char *)&v13 + v7++) = v11;
      }
      while (v7 != 4);
      int v12 = v13;
    }
    else
    {
      int v12 = *(_DWORD *)(v6 + v3);
      this[2] = v3 + 4;
    }
    *(unsigned char *)a2 = 1;
    *(_DWORD *)(a2 + 4) = v12;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return this;
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      std::vector<double>::__throw_length_error[abi:ne180100]();
    uint64_t result = operator new(v11);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memcpy(result, __src, v12);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  int v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  uint64_t v15 = &__src[v14];
  if (v13 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    uint64_t result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

BOOL geo::ibitstream::readBytes(uint64_t *a1, uint64_t a2, size_t __n)
{
  size_t v3 = __n;
  uint64_t v7 = *(char **)a2;
  uint64_t v6 = *(char **)(a2 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
  size_t v9 = __n - v8;
  if (__n > v8)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10 - (uint64_t)v6 >= v9)
    {
      bzero(*(void **)(a2 + 8), __n - v8);
      *(void *)(a2 + 8) = &v6[v9];
      goto LABEL_31;
    }
    if ((__n & 0x8000000000000000) != 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= __n) {
      uint64_t v12 = __n;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    size_t v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[v8];
    long long v16 = &v14[v13];
    bzero(&v14[v8], v9);
    if (v6 == v7) {
      goto LABEL_29;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_21;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      int v18 = v6 - 16;
      long long v19 = &v14[v6 - 16 - v7];
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)long long v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_28;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_21:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        long long v22 = &v6[-v17 - 8];
        long long v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_26:
    long long v26 = v15 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_28:
    uint64_t v6 = v7;
    uint64_t v15 = v14;
LABEL_29:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = &v14[v3];
    *(void *)(a2 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_31;
  }
  if (__n < v8) {
    *(void *)(a2 + 8) = &v7[__n];
  }
LABEL_31:
  unint64_t v29 = a1[1];
  uint64_t v28 = a1[2];
  if (*((unsigned char *)a1 + 24)) {
    unint64_t v30 = v28 + v3 + 1;
  }
  else {
    unint64_t v30 = v28 + v3;
  }
  if (v29 >= v30)
  {
    long long v31 = *(char **)a2;
    if (*((unsigned char *)a1 + 24))
    {
      for (; v3; --v3)
      {
        uint64_t v35 = a1[2];
        uint64_t v36 = v35 + 1;
        uint64_t v37 = *a1;
        if (v35 + 1 < (unint64_t)a1[1]) {
          unsigned int v32 = *(unsigned __int8 *)(v37 + v36);
        }
        else {
          unsigned int v32 = 0;
        }
        unsigned __int8 v33 = *(unsigned char *)(v37 + v35);
        char v34 = *((unsigned char *)a1 + 24);
        a1[2] = v36;
        *v31++ = ((((1 << (8 - v34)) - 1) & v33) << v34) | (((0xFFFF << (8 - v34)) & v32) >> (8 - v34));
      }
    }
    else
    {
      memcpy(v31, (const void *)(*a1 + v28), v3);
      a1[2] += v3;
    }
  }
  return v29 >= v30;
}

uint64_t *geo::ibitstream::readUInt64@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = this[1];
  uint64_t v3 = this[2];
  unint64_t v4 = v3 + 8;
  char v5 = *((unsigned char *)this + 24);
  unint64_t v6 = v3 + 9;
  if (!v5) {
    unint64_t v6 = v3 + 8;
  }
  if (v2 < v6)
  {
    *(unsigned char *)a2 = 0;
    return this;
  }
  uint64_t v7 = *this;
  if (*((unsigned char *)this + 24))
  {
    char v8 = 8 - v5;
    uint64_t v9 = v3 + 1;
    if (v3 + 1 >= v2)
    {
      int v10 = 0;
      int v11 = *(unsigned __int8 *)(v7 + v3);
      this[2] = v9;
      uint64_t v12 = v3 + 2;
      if (v3 + 2 >= v2) {
        goto LABEL_8;
      }
    }
    else
    {
      int v10 = *(unsigned __int8 *)(v7 + v9);
      int v11 = *(unsigned __int8 *)(v7 + v3);
      this[2] = v9;
      uint64_t v12 = v3 + 2;
      if (v3 + 2 >= v2)
      {
LABEL_8:
        int v13 = 0;
LABEL_12:
        int v22 = *(unsigned __int8 *)(v7 + v9);
        this[2] = v12;
        uint64_t v23 = v3 + 3;
        if (v3 + 3 >= v2) {
          int v24 = 0;
        }
        else {
          int v24 = *(unsigned __int8 *)(v7 + v23);
        }
        int v25 = (1 << v8) + 255;
        int v26 = *(unsigned __int8 *)(v7 + v12);
        int v27 = 0xFFFF << v8;
        this[2] = v23;
        int v28 = *(unsigned __int8 *)(v7 + v23);
        uint64_t v29 = v3 + 4;
        if (v3 + 4 >= v2) {
          int v30 = 0;
        }
        else {
          int v30 = *(unsigned __int8 *)(v7 + v29);
        }
        char v31 = 8 - v5;
        int v32 = v25 & v11;
        unsigned int v33 = v10 & v27;
        int v34 = v25 & v22;
        unsigned int v35 = v13 & v27;
        int v36 = v25 & v26;
        unsigned int v37 = v24 & v27;
        int v38 = v25 & v28;
        unsigned int v39 = v30 & v27;
        this[2] = v29;
        int v40 = *(unsigned __int8 *)(v7 + v29);
        uint64_t v41 = v3 + 5;
        if (v3 + 5 >= v2) {
          int v42 = 0;
        }
        else {
          int v42 = *(unsigned __int8 *)(v7 + v41);
        }
        LODWORD(v15) = v32 << v5;
        LODWORD(v16) = v33 >> v31;
        int v43 = v34 << v5;
        LODWORD(v18) = v35 >> v31;
        int v44 = v36 << v5;
        unsigned int v45 = v37 >> v31;
        unsigned int v46 = v39 >> v31;
        int v47 = (v25 & v40) << v5;
        this[2] = v41;
        uint64_t v48 = v3 + 6;
        int v49 = *(unsigned __int8 *)(v7 + v41);
        if (v3 + 6 >= v2) {
          int v50 = 0;
        }
        else {
          int v50 = *(unsigned __int8 *)(v7 + v48);
        }
        LOBYTE(v14) = v16 | v15;
        LOBYTE(v15) = v18 | v43;
        LOBYTE(v16) = v45 | v44;
        LODWORD(v17) = v46 | (v38 << v5);
        LOBYTE(v18) = ((v42 & v27) >> v31) | v47;
        LODWORD(v19) = ((v50 & v27) >> v31) | ((v25 & v49) << v5);
        this[2] = v48;
        int v51 = *(unsigned __int8 *)(v7 + v48);
        uint64_t v52 = v3 + 7;
        if (v3 + 7 >= v2) {
          int v53 = 0;
        }
        else {
          int v53 = *(unsigned __int8 *)(v7 + v52);
        }
        LODWORD(v20) = ((v53 & v27) >> v31) | ((v25 & v51) << v5);
        this[2] = v52;
        int v54 = *(unsigned __int8 *)(v7 + v52);
        if (v4 >= v2) {
          int v55 = 0;
        }
        else {
          int v55 = *(unsigned __int8 *)(v7 + v4);
        }
        unint64_t v21 = ((v55 & v27) >> v31) | ((v25 & v54) << v5);
        goto LABEL_31;
      }
    }
    int v13 = *(unsigned __int8 *)(v7 + v12);
    goto LABEL_12;
  }
  unint64_t v14 = *(void *)(v7 + v3);
  unint64_t v15 = v14 >> 8;
  unint64_t v16 = v14 >> 16;
  unint64_t v17 = v14 >> 24;
  unint64_t v18 = HIDWORD(v14);
  unint64_t v19 = v14 >> 40;
  unint64_t v20 = HIWORD(v14);
  unint64_t v21 = HIBYTE(v14);
LABEL_31:
  this[2] = v4;
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = (v21 << 56) | ((unint64_t)v20 << 48) | ((unint64_t)v19 << 40) | ((unint64_t)v18 << 32) | (v17 << 24) | ((unint64_t)v16 << 16) | ((unint64_t)v15 << 8) | v14;
  return this;
}

uint64_t gdc::DataObject::bytes(id *this)
{
  id v1 = this[2];
  return [v1 bytes];
}

{
  id v1;
  uint64_t vars8;

  id v1 = this[2];
  return [v1 bytes];
}

void md::DaVinciMaterialResourceDecoder::translateFromCodec(md::DaVinciMaterialResourceDecoder *this, geo::codec::MaterialSheet *a2)
{
}

void sub_1A1A3B844(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 176);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 160);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 144);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 128);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 - 112));
  _Unwind_Resume(a1);
}

void gms::LinearResolver::addMaterial(void *a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *a2;
  __int16 v6 = *((_WORD *)a2 + 4);
  LOWORD(v26) = v6;
  __int16 v7 = *((_WORD *)a2 + 5);
  HIWORD(v26) = v7;
  __int16 v8 = *((_WORD *)a2 + 6);
  __int16 v27 = v8;
  char v9 = *((unsigned char *)a2 + 14);
  char v10 = *((unsigned char *)a2 + 15);
  *a2 = 0;
  *(uint64_t *)((char *)a2 + 7) = 0;
  *((unsigned char *)a2 + 15) = 1;
  uint64_t v12 = (void *)a1[2];
  unint64_t v11 = a1[3];
  if ((unint64_t)v12 >= v11)
  {
    unint64_t v14 = (void *)a1[1];
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    if (0x5555555555555556 * ((uint64_t)(v11 - (void)v14) >> 3) > v15) {
      unint64_t v15 = 0x5555555555555556 * ((uint64_t)(v11 - (void)v14) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3) >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v17 = (gss::Allocator *)operator new(24 * v16);
    unint64_t v18 = (char *)v17 + 8 * (v12 - v14);
    *(void *)unint64_t v18 = v5;
    *((_DWORD *)v18 + 2) = v26;
    *((_WORD *)v18 + 6) = v27;
    unint64_t v19 = (char *)v17 + 24 * v16;
    v18[14] = v9;
    v18[15] = v10;
    *((_DWORD *)v18 + 4) = a3;
    int v13 = v18 + 24;
    if (v12 == v14)
    {
      a1[1] = v18;
      a1[2] = v13;
      a1[3] = v19;
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        unint64_t v21 = &v18[v20 * 8];
        int v22 = &v12[v20];
        *((void *)v21 - 3) = v12[v20 - 3];
        uint64_t v23 = v12[v20 - 2];
        *((_DWORD *)v21 - 4) = v23;
        *(_WORD *)&v18[v20 * 8 - 12] = WORD2(v23);
        *((_WORD *)v21 - 5) = *((_WORD *)&v12[v20 - 1] - 1);
        *(void *)((char *)v22 - 17) = 0;
        *(v22 - 3) = 0;
        *((unsigned char *)v22 - 9) = 1;
        *((_DWORD *)v21 - 2) = v12[v20 - 1];
        v20 -= 3;
      }
      while (&v12[v20] != v14);
      uint64_t v12 = (void *)a1[1];
      int v24 = (void *)a1[2];
      a1[1] = &v18[v20 * 8];
      a1[2] = v13;
      a1[3] = v19;
      while (v24 != v12)
      {
        if (!*((unsigned char *)v24 - 10) && *(v24 - 3))
        {
          uint64_t v25 = gss::Allocator::instance(v17);
          unint64_t v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v25 + 40))(v25, *(v24 - 3), *((unsigned __int16 *)v24 - 6));
          *(v24 - 3) = 0;
        }
        v24 -= 3;
      }
    }
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *uint64_t v12 = v5;
    *((_WORD *)v12 + 4) = v6;
    *((_WORD *)v12 + 5) = v7;
    *((_WORD *)v12 + 6) = v8;
    *((unsigned char *)v12 + 14) = v9;
    *((unsigned char *)v12 + 15) = v10;
    int v13 = v12 + 3;
    *((_DWORD *)v12 + 4) = a3;
  }
  a1[2] = v13;
}

void sub_1A1A3BCA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  _Unwind_Resume(a1);
}

__n128 *std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(uint64_t a1, __n128 a2)
{
  unint64_t v2 = *(__n128 **)a1;
  uint64_t v3 = *(__n128 **)(a1 + 8);
  uint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v7 = *(void *)(a1 + 16) - (void)v2;
  if (v7 >> 3 > v5) {
    unint64_t v5 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v5 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v8 = 16 * v5;
  char v9 = (char *)operator new(16 * v5);
  char v10 = (__n128 *)&v9[16 * v4];
  *char v10 = a2;
  if (a2.n128_u64[1])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a2.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    unint64_t v2 = *(__n128 **)a1;
    uint64_t v3 = *(__n128 **)(a1 + 8);
  }
  unint64_t v11 = &v9[v8];
  uint64_t v12 = v10 + 1;
  if (v3 == v2)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      __n128 v13 = v3[-1];
      --v3;
      v10[-1] = v13;
      --v10;
      v3->n128_u64[0] = 0;
      v3->n128_u64[1] = 0;
    }
    while (v3 != v2);
    unint64_t v2 = *(__n128 **)a1;
    unint64_t v14 = *(__n128 **)(a1 + 8);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    for (*(void *)(a1 + 16) = v11; v14 != v2; --v14)
    {
      unint64_t v15 = (std::__shared_weak_count *)v14[-1].n128_u64[1];
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

uint64_t std::__shared_ptr_emplace<ggl::SamplerState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ggl::SamplerState::~SamplerState(ggl::SamplerState *this)
{
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

void gms::MaterialSheet<ggl::Texture2D>::_init()
{
}

void sub_1A1A3C20C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A1A3C254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<gms::MaterialSheet<ggl::Texture2D>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void md::GEOVectorTileResourceDecoder::decode(id *this@<X0>, const gdc::ResourceKey *a2@<X1>, const gdc::RawResourceSourceData *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a3 + 16)) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)a3;
  id v9 = *(id *)(*(void *)a3 + 16);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v11 = *(id *)(v8 + 16);
  }
  else
  {
    long long v18 = *(_OWORD *)*((void *)a3 + 4);
    id v12 = this[2];
    id v13 = *(id *)(v8 + 16);
    id v11 = [v12 decodeTile:v13 forKey:&v18];

    if (([v11 isMemberOfClass:objc_opt_class()] & 1) == 0)
    {
      *a4 = 0;
      a4[1] = 0;

      return;
    }
  }
  if (!v11)
  {
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  [v11 vectorTilePtr];
  unint64_t v14 = operator new(0xB8uLL);
  v14[1] = 0;
  __int16 v14[2] = 0;
  *unint64_t v14 = &unk_1EF581210;
  uint64_t v15 = gdc::Resource::Resource((uint64_t)(v14 + 3), (uint64_t)a2);
  uint64_t v16 = *((void *)&v18 + 1);
  v14[21] = v18;
  v14[22] = v16;
  if (v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    unint64_t v17 = (std::__shared_weak_count *)*((void *)&v18 + 1);
    *a4 = v15;
    a4[1] = (uint64_t)v14;
    if (v17)
    {
      if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    *a4 = v15;
    a4[1] = (uint64_t)v14;
  }
}

void sub_1A1A3C458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void md::RegionalResourceSetDecoder::decode(const gdc::RawResourceSourceData *a1@<X2>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a1 + 16)) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)a1;
  id v7 = *(id *)(*(void *)a1 + 16);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v9 = *(id *)(v6 + 16);
    goto LABEL_6;
  }
  id v10 = objc_alloc_init(MEMORY[0x1E4F648F8]);
  v12[0] = *(_OWORD *)*((void *)a1 + 4);
  id v11 = *(id *)(v6 + 16);
  id v9 = [v10 decodeTile:v11 forKey:v12];

  if ([v9 isMemberOfClass:objc_opt_class()])
  {

LABEL_6:
    if (v9) {
      operator new();
    }
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_1A1A3C728(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v2 + 8);
  if (v6 != *(void **)(v2 + 24)) {
    free(v6);
  }

  MEMORY[0x1A6239270](v2, 0x1090C40010BC676);
  _Unwind_Resume(a1);
}

uint64_t gdc::Resource::Resource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)(a1 + 40);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = 32;
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = *(char **)(a2 + 16);
  unint64_t v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40) {
      size_t v8 = 64;
    }
    else {
      size_t v8 = v6 - v5;
    }
    uint64_t v4 = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    id v9 = *(char **)(a1 + 8);
    id v10 = *(char **)(a1 + 16);
    if (v9 == v10) {
      goto LABEL_21;
    }
    unint64_t v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      id v12 = v4;
      goto LABEL_20;
    }
    id v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20) {
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v14 = (long long *)(v9 + 16);
      uint64_t v15 = v4 + 16;
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *uint64_t v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13) {
        goto LABEL_21;
      }
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        id v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    id v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (uint64_t *)&v9[v13];
    unint64_t v21 = &v4[v13];
    do
    {
      uint64_t v22 = *v20++;
      *(void *)unint64_t v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18) {
      goto LABEL_21;
    }
    v9 += v18;
    do
    {
LABEL_20:
      char v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 32) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      uint64_t v25 = v4;
      goto LABEL_38;
    }
    if ((unint64_t)(v4 - v5) < 0x20)
    {
      uint64_t v25 = v4;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      unint64_t v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      int v26 = (long long *)(v5 + 16);
      __int16 v27 = v4 + 16;
      unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *__int16 v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24) {
        goto LABEL_39;
      }
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        uint64_t v25 = &v4[v24];
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    unint64_t v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    int v32 = (uint64_t *)&v5[v24];
    unsigned int v33 = &v4[v24];
    do
    {
      uint64_t v34 = *v32++;
      *(void *)unsigned int v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30) {
      goto LABEL_39;
    }
    v5 += v30;
    do
    {
LABEL_38:
      char v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    uint64_t v4 = *(char **)(a1 + 16);
  }
  *(void *)(a1 + 16) = &v4[v7];
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 120) = 0;
  return a1;
}

void gms::TextureStore<ggl::Texture2D>::addTexture(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v6 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)a1);
  if (v6) {
    geo::read_write_lock::logFailure(v6, (uint64_t)"write lock", v7);
  }
  size_t v8 = *(__n128 **)(a1 + 208);
  if ((unint64_t)v8 >= *(void *)(a1 + 216))
  {
    id v10 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 200, *a2);
  }
  else
  {
    unint64_t v9 = a2->n128_u64[1];
    v8->n128_u64[0] = a2->n128_u64[0];
    v8->n128_u64[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    id v10 = v8 + 1;
  }
  *(void *)(a1 + 208) = v10;
  unint64_t v11 = *(void *)(a1 + 232);
  uint64_t v12 = *(void *)(a1 + 240);
  if (v11 == v12 << 6)
  {
    if ((uint64_t)(v11 + 1) < 0) {
      abort();
    }
    unint64_t v13 = v12 << 7;
    if (v13 <= (v11 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v11 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve(a1 + 224, v14);
    unint64_t v11 = *(void *)(a1 + 232);
  }
  *(void *)(a1 + 232) = v11 + 1;
  uint64_t v15 = *(void *)(a1 + 224);
  unint64_t v16 = v11 >> 6;
  uint64_t v17 = 1 << v11;
  if (a3) {
    uint64_t v18 = *(void *)(v15 + 8 * v16) | v17;
  }
  else {
    uint64_t v18 = *(void *)(v15 + 8 * v16) & ~v17;
  }
  *(void *)(v15 + 8 * v16) = v18;
  unint64_t v19 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  if (v19)
  {
    geo::read_write_lock::logFailure(v19, (uint64_t)"unlock", v20);
  }
}

void sub_1A1A3CB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v3 = ((a2 - 1) >> 6) + 1;
    uint64_t v4 = (uint64_t *)operator new(8 * v3);
    unint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    int v7 = v6 & 0x3F;
    unint64_t v8 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v8 = 0;
    }
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v9 = 0;
      int v10 = 0;
      unint64_t v11 = &v5[v6 >> 6];
      uint64_t v12 = v4;
      unint64_t v13 = v5;
      do
      {
        uint64_t v14 = 1 << v9;
        if ((*v13 >> v10)) {
          uint64_t v15 = *v12 | v14;
        }
        else {
          uint64_t v15 = *v12 & ~v14;
        }
        *uint64_t v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
        v12 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
      }
      while (v10 != v7 || v13 != v11);
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

unint64_t astcTextureSize(int a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = 0;
  switch(a1)
  {
    case 28:
    case 44:
      double v5 = (double)a2;
      double v6 = 0.25;
      goto LABEL_20;
    case 29:
    case 45:
      double v7 = (double)a2;
      double v8 = 0.2;
      goto LABEL_6;
    case 30:
    case 46:
      double v5 = (double)a2;
      double v6 = 0.2;
      goto LABEL_20;
    case 31:
    case 47:
      double v7 = (double)a2;
      double v8 = 0.166666667;
LABEL_6:
      unint64_t v9 = vcvtpd_u64_f64(v7 * v8);
      double v10 = (double)a3;
      double v6 = 0.25;
      goto LABEL_21;
    case 32:
    case 48:
      double v5 = (double)a2;
      uint64_t v11 = 0x3FC5555555555555;
      goto LABEL_19;
    case 33:
    case 49:
      double v12 = (double)a2;
      double v13 = 0.125;
      goto LABEL_12;
    case 34:
    case 50:
      double v14 = (double)a2;
      double v15 = 0.125;
      goto LABEL_14;
    case 35:
    case 51:
      double v5 = (double)a2;
      double v6 = 0.125;
      goto LABEL_20;
    case 36:
    case 52:
      double v12 = (double)a2;
      double v13 = 0.1;
LABEL_12:
      unint64_t v9 = vcvtpd_u64_f64(v12 * v13);
      double v10 = (double)a3;
      double v6 = 0.2;
      goto LABEL_21;
    case 37:
    case 53:
      double v14 = (double)a2;
      double v15 = 0.1;
LABEL_14:
      unint64_t v9 = vcvtpd_u64_f64(v14 * v15);
      double v10 = (double)a3;
      double v6 = 0.166666667;
      goto LABEL_21;
    case 38:
    case 54:
      unint64_t v9 = vcvtpd_u64_f64((double)a2 * 0.1);
      double v10 = (double)a3;
      double v6 = 0.125;
      goto LABEL_21;
    case 39:
    case 55:
      double v5 = (double)a2;
      double v6 = 0.1;
      goto LABEL_20;
    case 40:
    case 56:
      unint64_t v9 = vcvtpd_u64_f64((double)a2 * 0.0833333333);
      double v10 = (double)a3;
      double v6 = 0.1;
      goto LABEL_21;
    case 41:
    case 57:
      double v5 = (double)a2;
      uint64_t v11 = 0x3FB5555555555555;
LABEL_19:
      double v6 = *(double *)&v11;
LABEL_20:
      unint64_t v9 = vcvtpd_u64_f64(v5 * v6);
      double v10 = (double)a3;
LABEL_21:
      unint64_t result = 16 * v9 * vcvtpd_u64_f64(v10 * v6);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 40;
  uint64_t result = *(void *)(a1 + 64);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t md::StandardMapEngineMode::StandardMapEngineMode(uint64_t a1, char a2, int a3, char a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = md::CartographicMapEngineMode::CartographicMapEngineMode(a1, a2);
  *(void *)uint64_t v7 = &unk_1EF540708;
  *(unsigned char *)(v7 + 568) = a4;
  *(void *)(v7 + 536) = 100;
  *(unsigned char *)(v7 + 49) = 1;
  *(_DWORD *)(v7 + 52) = 21;
  double v8 = (uint64_t *)(v7 + 384);
  LOWORD(v53) = 2560;
  *((void *)&v53 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(v7 + 384), (unsigned __int8 *)&v53);
  LOWORD(v53) = 5386;
  *((void *)&v53 + 1) = 0x3FD657184AE74487;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert(v8, (unsigned __int8 *)&v53);
  LOWORD(v53) = 2560;
  *((void *)&v53 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v53);
  LOWORD(v53) = 5386;
  *((void *)&v53 + 1) = 0x3FE0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v53);
  LOWORD(v53) = 768;
  *((void *)&v53 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  LOWORD(v53) = 3843;
  *((void *)&v53 + 1) = 0x3FE38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  LOWORD(v53) = 4111;
  *((void *)&v53 + 1) = 0x3FF0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  LOWORD(v53) = 4624;
  *((void *)&v53 + 1) = 0x3FF38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  LOWORD(v53) = 5650;
  *((void *)&v53 + 1) = 0x3FF4F1A6C638D03FLL;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  if (a3)
  {
    unint64_t v9 = +[VKDebugSettings sharedSettings];
    if ([v9 daVinciCameraController])
    {
      double v10 = +[VKDebugSettings sharedSettings];
      int v11 = [v10 daVinciCameraControllerForceMercatorZoom];

      if (v11) {
        char v12 = 2;
      }
      else {
        char v12 = 1;
      }
    }
    else
    {

      char v12 = 2;
    }
    double v14 = (void *)(a1 + 128);
    uint64_t v13 = *(void *)(a1 + 128);
    *(unsigned char *)(a1 + 224) = v12;
    *(unsigned char *)(a1 + 225) = 5;
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          double v15 = (void *)v13;
          unsigned int v16 = *(unsigned __int16 *)(v13 + 26);
          if (v16 < 9) {
            break;
          }
          uint64_t v13 = *v15;
          double v14 = v15;
          if (!*v15) {
            goto LABEL_15;
          }
        }
        if (v16 == 8) {
          break;
        }
        uint64_t v13 = v15[1];
        if (!v13)
        {
          double v14 = v15 + 1;
          goto LABEL_15;
        }
      }
    }
    else
    {
      double v15 = (void *)(a1 + 128);
LABEL_15:
      uint64_t v17 = operator new(0x20uLL);
      v17[13] = 8;
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = v15;
      *double v14 = v17;
      uint64_t v18 = **(void **)(a1 + 120);
      if (v18)
      {
        *(void *)(a1 + 120) = v18;
        uint64_t v17 = (_WORD *)*v14;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), (uint64_t *)v17);
      ++*(void *)(a1 + 136);
    }
  }
  else
  {
    *(_WORD *)(a1 + 224) = 0;
  }
  LOBYTE(v53) = 0;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0, &v53)+ 17) = 0;
  LOBYTE(v53) = 2;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 2u, &v53)+ 17) = 0;
  LOBYTE(v53) = 51;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x33u, &v53)+ 17) = 0;
  LOBYTE(v53) = 12;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xCu, &v53)+ 17) = 0;
  LOBYTE(v53) = 16;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x10u, &v53)+ 17) = 0;
  LOBYTE(v53) = 21;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x15u, &v53)+ 17) = 0;
  LOBYTE(v53) = 31;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Fu, &v53)+ 17) = 0;
  LOBYTE(v53) = 32;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x20u, &v53)+ 17) = 0;
  LOBYTE(v53) = 28;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Cu, &v53)+ 17) = 0;
  LOBYTE(v53) = 24;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x18u, &v53)+ 17) = 0;
  if (a3)
  {
    LOBYTE(v53) = 1;
    unint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 1u, &v53);
  }
  else
  {
    LOBYTE(v53) = 3;
    unint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 3u, &v53);
  }
  *((unsigned char *)v19 + 17) = 0;
  LOBYTE(v53) = 23;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x17u, &v53)+ 17) = 1;
  LOBYTE(v53) = 13;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xDu, &v53)+ 17) = 1;
  LOBYTE(v53) = 15;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xFu, &v53)+ 17) = 1;
  LOBYTE(v53) = 44;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x2Cu, &v53)+ 17) = 1;
  LOBYTE(v53) = 40;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x28u, &v53)+ 17) = 1;
  LOBYTE(v53) = 18;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x12u, &v53)+ 17) = 1;
  LOBYTE(v53) = 26;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Au, &v53)+ 17) = 2;
  LOBYTE(v53) = 30;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Eu, &v53)+ 17) = 2;
  LOBYTE(v53) = 41;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x29u, &v53)+ 17) = 2;
  LOBYTE(v53) = 42;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x2Au, &v53)+ 17) = 2;
  LOBYTE(v53) = 27;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Bu, &v53)+ 17) = 2;
  LOBYTE(v53) = 14;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xEu, &v53)+ 17) = 2;
  LOBYTE(v53) = 17;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x11u, &v53)+ 17) = 2;
  LOBYTE(v53) = 25;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x19u, &v53)+ 17) = 2;
  uint64_t v20 = a1 + 232;
  *(void *)&long long v47 = 0xEA624BC935BAF297;
  *((void *)&v47 + 1) = "md::mun::MuninLogic]";
  uint64_t v48 = 19;
  *(void *)&long long v43 = 0x8EA84A1BD3791AFALL;
  *((void *)&v43 + 1) = "md::mun::MuninContext]";
  *(void *)&long long v44 = 21;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 3;
  long long v56 = xmmword_1E5A97EB0;
  long long v57 = unk_1E5A97EC0;
  *(void *)&long long v58 = 20;
  long long v54 = xmmword_1E5A97E90;
  long long v55 = unk_1E5A97EA0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 1, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0xEC9B77B4222D22FFLL;
  *((void *)&v47 + 1) = "md::VenueLogic]";
  uint64_t v48 = 14;
  *(void *)&long long v43 = 0x4927EB92E562CC46;
  *((void *)&v43 + 1) = "md::VenueLogicContext]";
  *(void *)&long long v44 = 21;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 3;
  long long v56 = xmmword_1E5A971A8;
  long long v57 = unk_1E5A971B8;
  *(void *)&long long v58 = 16;
  long long v54 = xmmword_1E5A97188;
  long long v55 = unk_1E5A97198;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 1, (uint64_t)&v53, (uint64_t)&v50);
  unint64_t v50 = 0x79FE0BD9535D5C4DLL;
  int v51 = "md::AnchorLogic]";
  uint64_t v52 = 15;
  *(void *)&long long v53 = &v54;
  *(void *)&long long v47 = 0x63B6FE00C0848868;
  *((void *)&v47 + 1) = "md::AnchorContext]";
  uint64_t v48 = 17;
  char v49 = 1;
  *((void *)&v53 + 1) = 2;
  long long v54 = xmmword_1E5A97998;
  long long v55 = unk_1E5A979A8;
  long long v56 = xmmword_1E5A979B8;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A98030;
  *(void *)&long long v45 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(void *)&long long v47 = 0x85B8F2BE93EDF996;
  *((void *)&v47 + 1) = "md::AssetLogic]";
  uint64_t v48 = 14;
  *(void *)&long long v43 = 0x88B81689974D86F3;
  *((void *)&v43 + 1) = "md::AssetContext]";
  *(void *)&long long v44 = 16;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A97E18;
  *(void *)&long long v55 = 29;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x582FBDD84553E215;
  *((void *)&v47 + 1) = "md::AssetInjectionLogic]";
  uint64_t v48 = 23;
  *(void *)&long long v43 = 0xD77FB76AFC10A710;
  *((void *)&v43 + 1) = "md::AssetInjectionContext]";
  *(void *)&long long v44 = 25;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A97E00;
  *(void *)&long long v55 = 16;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x8E629317B3523E63;
  *((void *)&v47 + 1) = "md::CameraLogic]";
  uint64_t v48 = 15;
  *(void *)&long long v43 = 0x1AF456233693CD46;
  *((void *)&v43 + 1) = "md::CameraContext]";
  *(void *)&long long v44 = 17;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A979C8;
  *(void *)&long long v55 = 20;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  unint64_t v50 = 0x17767EADC5B287BLL;
  int v51 = "md::ElevationLogic]";
  uint64_t v52 = 18;
  *(void *)&long long v53 = &v54;
  *(void *)&long long v47 = 0x8BD499FBD96FBB9ELL;
  *((void *)&v47 + 1) = "md::ElevationContext]";
  uint64_t v48 = 20;
  char v49 = 1;
  *((void *)&v53 + 1) = 2;
  long long v54 = xmmword_1E5A97A70;
  long long v55 = unk_1E5A97A80;
  long long v56 = xmmword_1E5A97A90;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A97AA0;
  *(void *)&long long v45 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(void *)&long long v43 = 0x701C95861FC50076;
  *((void *)&v43 + 1) = "md::GeometryLogic]";
  *(void *)&long long v44 = 17;
  *(void *)&long long v53 = 0x3070CB6B3C7F21D3;
  *((void *)&v53 + 1) = "md::GeometryContext]";
  *(void *)&long long v54 = 19;
  BYTE8(v54) = 1;
  *(void *)&long long v47 = &v48;
  *((void *)&v47 + 1) = 0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  unint64_t v50 = 0x4AC7AB7561675F6;
  int v51 = "md::GridLogic]";
  uint64_t v52 = 13;
  *(void *)&long long v47 = 0x336A901A15BB7353;
  *((void *)&v47 + 1) = "md::GridContext]";
  uint64_t v48 = 15;
  char v49 = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A97DD0;
  *(void *)&long long v55 = 21;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A97CE0;
  *(void *)&long long v45 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(void *)&long long v47 = 0xC74495586E0C32F6;
  *((void *)&v47 + 1) = "md::HikingLogic]";
  uint64_t v48 = 15;
  *(void *)&long long v43 = 0x92F3DC114CADB853;
  *((void *)&v43 + 1) = "md::HikingContext]";
  *(void *)&long long v44 = 17;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 5;
  long long v58 = xmmword_1E5A96D48;
  long long v59 = *(_OWORD *)&off_1E5A96D58;
  long long v60 = xmmword_1E5A96D68;
  *(void *)&long long v61 = 21;
  long long v54 = xmmword_1E5A96D08;
  long long v55 = unk_1E5A96D18;
  long long v56 = xmmword_1E5A96D28;
  long long v57 = unk_1E5A96D38;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  unint64_t v50 = 0x8B855FB229857EA1;
  int v51 = "md::IdentifiedResourceLogic]";
  uint64_t v52 = 27;
  *(void *)&long long v53 = &v54;
  *(void *)&long long v47 = 0x12B1E486D3040E2CLL;
  *((void *)&v47 + 1) = "md::IdentifiedResourceContext]";
  uint64_t v48 = 29;
  char v49 = 1;
  *((void *)&v53 + 1) = 4;
  long long v56 = xmmword_1E5A97C40;
  long long v57 = unk_1E5A97C50;
  long long v58 = xmmword_1E5A97C60;
  long long v59 = *(_OWORD *)&off_1E5A97C70;
  long long v54 = xmmword_1E5A97C20;
  long long v55 = unk_1E5A97C30;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A97C80;
  *(void *)&long long v45 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  unint64_t v50 = 0x20A1ED17D78F322BLL;
  int v51 = "md::LabelsLogic]";
  uint64_t v52 = 15;
  *(void *)&long long v53 = &v54;
  *(void *)&long long v47 = 0xA588623CD4116DAELL;
  *((void *)&v47 + 1) = "md::LabelsContext]";
  uint64_t v48 = 17;
  char v49 = 1;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A97DD0;
  *(void *)&long long v55 = 21;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A97DE8;
  *(void *)&long long v45 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(void *)&long long v47 = 0x7B0BD282CA8076EELL;
  *((void *)&v47 + 1) = "md::HillshadeLogic]";
  uint64_t v48 = 18;
  *(void *)&long long v43 = 0xE719E07499A88BEBLL;
  *((void *)&v43 + 1) = "md::HillshadeContext]";
  *(void *)&long long v44 = 20;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 2;
  long long v54 = xmmword_1E5A909A0;
  long long v55 = unk_1E5A909B0;
  long long v56 = xmmword_1E5A909C0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x91E65CD7F1A7A7FALL;
  *((void *)&v47 + 1) = "md::LightingLogic]";
  uint64_t v48 = 17;
  *(void *)&long long v43 = 0x41E8D6E445F4145;
  *((void *)&v43 + 1) = "md::LightingLogicContext]";
  *(void *)&long long v44 = 24;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 4;
  long long v56 = xmmword_1E5A96DA0;
  long long v57 = unk_1E5A96DB0;
  long long v58 = xmmword_1E5A96DC0;
  long long v59 = *(_OWORD *)&off_1E5A96DD0;
  long long v54 = xmmword_1E5A96D80;
  long long v55 = unk_1E5A96D90;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  unint64_t v50 = 0x653D1F33EF15EF04;
  int v51 = "md::LoadingStatusLogic]";
  uint64_t v52 = 22;
  *(void *)&long long v53 = &v54;
  *(void *)&long long v47 = 0x90B6813830DCB581;
  *((void *)&v47 + 1) = "md::LoadingStatusContext]";
  uint64_t v48 = 24;
  char v49 = 1;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A97E00;
  *(void *)&long long v55 = 16;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A97E18;
  *(void *)&long long v45 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(void *)&long long v47 = 0xBDB8C71631E0AA6CLL;
  *((void *)&v47 + 1) = "md::MapZoomLevelStyleLogic]";
  uint64_t v48 = 26;
  *(void *)&long long v43 = 0xF0AA2DB42EB710AFLL;
  *((void *)&v43 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(void *)&long long v44 = 33;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 2;
  long long v54 = xmmword_1E5A97A40;
  long long v55 = unk_1E5A97A50;
  long long v56 = xmmword_1E5A97A60;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0xA1851987210F8D55;
  *((void *)&v47 + 1) = "md::MaterialLogic]";
  uint64_t v48 = 17;
  *(void *)&long long v43 = 0xD2404CDD1F9A6950;
  *((void *)&v43 + 1) = "md::MaterialContext]";
  *(void *)&long long v44 = 19;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 5;
  long long v58 = xmmword_1E5A96E20;
  long long v59 = *(_OWORD *)&off_1E5A96E30;
  long long v60 = xmmword_1E5A96E40;
  *(void *)&long long v61 = 21;
  long long v54 = xmmword_1E5A96DE0;
  long long v55 = unk_1E5A96DF0;
  long long v56 = xmmword_1E5A96E00;
  long long v57 = unk_1E5A96E10;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x88BE5DF80D25DA79;
  *((void *)&v47 + 1) = "md::MeshRenderableLogic]";
  uint64_t v48 = 23;
  *(void *)&long long v43 = 0xF014CCE28176CA44;
  *((void *)&v43 + 1) = "md::MeshRenderableContext]";
  *(void *)&long long v44 = 25;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 9;
  long long v64 = xmmword_1E5A96F88;
  long long v65 = *(_OWORD *)&off_1E5A96F98;
  long long v66 = xmmword_1E5A96FA8;
  uint64_t v67 = 15;
  long long v60 = xmmword_1E5A96F48;
  long long v61 = unk_1E5A96F58;
  long long v62 = xmmword_1E5A96F68;
  long long v63 = unk_1E5A96F78;
  long long v56 = xmmword_1E5A96F08;
  long long v57 = unk_1E5A96F18;
  long long v58 = xmmword_1E5A96F28;
  long long v59 = *(_OWORD *)&off_1E5A96F38;
  long long v54 = xmmword_1E5A96EE8;
  long long v55 = unk_1E5A96EF8;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  unint64_t v50 = 0xBEC1A12372CEEC00;
  int v51 = "md::NavigationLogic]";
  uint64_t v52 = 19;
  *(void *)&long long v53 = &v54;
  *(void *)&long long v47 = 0x1B8B241A8D896A1DLL;
  *((void *)&v47 + 1) = "md::NavigationContext]";
  uint64_t v48 = 21;
  char v49 = 1;
  *((void *)&v53 + 1) = 3;
  long long v56 = xmmword_1E5A97A00;
  long long v57 = unk_1E5A97A10;
  *(void *)&long long v58 = 17;
  long long v54 = xmmword_1E5A979E0;
  long long v55 = unk_1E5A979F0;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A97A28;
  *(void *)&long long v45 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  unint64_t v50 = 0x7173CF8D2BE8FE53;
  int v51 = "md::RouteLineLogic]";
  uint64_t v52 = 18;
  *(void *)&long long v53 = &v54;
  *(void *)&long long v47 = 0x8E4587A431F9C696;
  *((void *)&v47 + 1) = "md::RouteLineContext]";
  uint64_t v48 = 20;
  char v49 = 1;
  *((void *)&v53 + 1) = 4;
  long long v56 = xmmword_1E5A97AD8;
  long long v57 = unk_1E5A97AE8;
  long long v58 = xmmword_1E5A97AF8;
  long long v59 = *(_OWORD *)&off_1E5A97B08;
  long long v54 = xmmword_1E5A97AB8;
  long long v55 = unk_1E5A97AC8;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 2;
  long long v44 = xmmword_1E5A97B18;
  long long v45 = unk_1E5A97B28;
  long long v46 = xmmword_1E5A97B38;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(void *)&long long v47 = 0x1FCDF994595CDE24;
  *((void *)&v47 + 1) = "md::PuckLocationAnimationTracingLogic]";
  uint64_t v48 = 37;
  *(void *)&long long v43 = 0xA81ACD73F9C92AA1;
  *((void *)&v43 + 1) = "md::PuckLocationAnimationTracingContext]";
  *(void *)&long long v44 = 39;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A98030;
  *(void *)&long long v55 = 21;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x87668FB4D087F775;
  *((void *)&v47 + 1) = "md::OverlaysLogic]";
  uint64_t v48 = 17;
  *(void *)&long long v43 = 0xADE8F13E6C18D970;
  *((void *)&v43 + 1) = "md::OverlaysContext]";
  *(void *)&long long v44 = 19;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 4;
  long long v56 = xmmword_1E5A97E50;
  long long v57 = unk_1E5A97E60;
  long long v58 = xmmword_1E5A97E70;
  long long v59 = *(_OWORD *)&off_1E5A97E80;
  long long v54 = xmmword_1E5A97E30;
  long long v55 = unk_1E5A97E40;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x3B36D43422893971;
  *((void *)&v47 + 1) = "md::DrapingLogic]";
  uint64_t v48 = 16;
  *(void *)&long long v43 = 0x1B9039CBDAB12E5CLL;
  *((void *)&v43 + 1) = "md::DrapingContext]";
  *(void *)&long long v44 = 18;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 4;
  long long v56 = xmmword_1E5A96E78;
  long long v57 = unk_1E5A96E88;
  long long v58 = xmmword_1E5A96E98;
  long long v59 = *(_OWORD *)&off_1E5A96EA8;
  long long v54 = xmmword_1E5A96E58;
  long long v55 = unk_1E5A96E68;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0xDEBD99099DA2C65BLL;
  *((void *)&v47 + 1) = "md::RegistryLogic]";
  uint64_t v48 = 17;
  *(void *)&long long v43 = 0xFBD83FDA8879FF7ELL;
  *((void *)&v43 + 1) = "md::RegistryContext]";
  *(void *)&long long v44 = 19;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A97E00;
  *(void *)&long long v55 = 16;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x8B45D3D7944796A2;
  *((void *)&v47 + 1) = "md::PendingRegistryLogic]";
  uint64_t v48 = 24;
  *(void *)&long long v43 = 0xA8300AA8F44B09FFLL;
  *((void *)&v43 + 1) = "md::PendingRegistryContext]";
  *(void *)&long long v44 = 26;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A97DB8;
  *(void *)&long long v55 = 23;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x3C2657D301A7BCF4;
  *((void *)&v47 + 1) = "md::PolygonLogic]";
  uint64_t v48 = 16;
  *(void *)&long long v43 = 0x401D4CCE847AB1D1;
  *((void *)&v43 + 1) = "md::PolygonContext]";
  *(void *)&long long v44 = 18;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 2;
  long long v54 = xmmword_1E5A96EB8;
  long long v55 = unk_1E5A96EC8;
  long long v56 = xmmword_1E5A96ED8;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v43 = 0x5CBBA028798243FLL;
  *((void *)&v43 + 1) = "md::RouteOverlayLogic]";
  *(void *)&long long v44 = 21;
  *(void *)&long long v53 = 0x13043386C0978CC2;
  *((void *)&v53 + 1) = "md::RouteOverlayContext]";
  *(void *)&long long v54 = 23;
  BYTE8(v54) = 1;
  *(void *)&long long v47 = &v48;
  *((void *)&v47 + 1) = 0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(void *)&long long v43 = 0x90C2E4CBBB63E301;
  *((void *)&v43 + 1) = "md::LayerDataLogic]";
  *(void *)&long long v44 = 18;
  *(void *)&long long v53 = 0x7851AF310F49C988;
  *((void *)&v53 + 1) = "md::LayerDataLogicContext]";
  *(void *)&long long v54 = 25;
  BYTE8(v54) = 1;
  *(void *)&long long v47 = &v48;
  *((void *)&v47 + 1) = 0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(void *)&long long v47 = 0xAF46DE79C836B0D8;
  *((void *)&v47 + 1) = "md::TileSelectionLogic]";
  uint64_t v48 = 22;
  *(void *)&long long v43 = 0x64780CBD71DF7CF5;
  *((void *)&v43 + 1) = "md::TileSelectionContext]";
  *(void *)&long long v44 = 24;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 3;
  long long v56 = xmmword_1E5A97CB8;
  long long v57 = unk_1E5A97CC8;
  *(void *)&long long v58 = 21;
  long long v54 = xmmword_1E5A97C98;
  long long v55 = unk_1E5A97CA8;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  uint64_t v21 = 0xCBF29CE484222325;
  uint64_t v22 = 0x26u;
  do
    uint64_t v21 = 0x100000001B3 * (v21 ^ aStdStringViewG_928[v22++]);
  while (v22 != 368);
  unint64_t v50 = v21;
  int v51 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  uint64_t v52 = 330;
  *(void *)&long long v47 = 0x8677AD8BA9352C1DLL;
  *((void *)&v47 + 1) = "md::ResolvedTileSelectionContext]";
  uint64_t v48 = 32;
  char v49 = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 1;
  long long v54 = xmmword_1E5A97CE0;
  *(void *)&long long v55 = 24;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A97CF8;
  *(void *)&long long v45 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(void *)&long long v47 = 0x87BA2765F9E38E05;
  *((void *)&v47 + 1) = "md::PendingSceneLogic]";
  uint64_t v48 = 21;
  *(void *)&long long v43 = 0x9F2276D081C2CB20;
  *((void *)&v43 + 1) = "md::PendingSceneContext]";
  *(void *)&long long v44 = 23;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 5;
  long long v58 = xmmword_1E5A97D50;
  long long v59 = *(_OWORD *)&off_1E5A97D60;
  long long v60 = xmmword_1E5A97D70;
  *(void *)&long long v61 = 25;
  long long v54 = xmmword_1E5A97D10;
  long long v55 = unk_1E5A97D20;
  long long v56 = xmmword_1E5A97D30;
  long long v57 = unk_1E5A97D40;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  unint64_t v50 = 0x2B7C4502BD3C99C6;
  int v51 = "md::ResolvedSceneLogic]";
  uint64_t v52 = 22;
  *(void *)&long long v53 = &v54;
  *(void *)&long long v47 = 0x99BED48DEFBBD82BLL;
  *((void *)&v47 + 1) = "md::SceneContext]";
  uint64_t v48 = 16;
  char v49 = 1;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 1;
  long long v44 = xmmword_1E5A97DB8;
  *(void *)&long long v45 = 23;
  *((void *)&v53 + 1) = 2;
  long long v54 = xmmword_1E5A97D88;
  long long v55 = unk_1E5A97D98;
  long long v56 = xmmword_1E5A97DA8;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, &v50, &v47, 0, (uint64_t)&v43, (uint64_t)&v53);
  *(void *)&long long v47 = 0x1F3242C85D9F2F62;
  *((void *)&v47 + 1) = "md::SceneQueryLogic]";
  uint64_t v48 = 19;
  *(void *)&long long v43 = 0xDFC317497CF9A4BFLL;
  *((void *)&v43 + 1) = "md::SceneQueryContext]";
  *(void *)&long long v44 = 21;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 5;
  long long v58 = xmmword_1E5A97060;
  long long v59 = *(_OWORD *)&off_1E5A97070;
  long long v60 = xmmword_1E5A97080;
  *(void *)&long long v61 = 19;
  long long v54 = xmmword_1E5A97020;
  long long v55 = unk_1E5A97030;
  long long v56 = xmmword_1E5A97040;
  long long v57 = unk_1E5A97050;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v43 = 0xD2443A61CED86C69;
  *((void *)&v43 + 1) = "md::SettingsLogic]";
  *(void *)&long long v44 = 17;
  *(void *)&long long v53 = 0xC97B9E962ADF4AD4;
  *((void *)&v53 + 1) = "md::SettingsContext]";
  *(void *)&long long v54 = 19;
  BYTE8(v54) = 1;
  *(void *)&long long v47 = &v48;
  *((void *)&v47 + 1) = 0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(void *)&long long v43 = 0x3F812BA5755E8568;
  *((void *)&v43 + 1) = "md::SharedResourcesLogic]";
  *(void *)&long long v44 = 24;
  *(void *)&long long v53 = 0xA60DDA5A69582425;
  *((void *)&v53 + 1) = "md::SharedResourcesContext]";
  *(void *)&long long v54 = 26;
  BYTE8(v54) = 1;
  *(void *)&long long v47 = &v48;
  *((void *)&v47 + 1) = 0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(void *)&long long v47 = 0xDAD5CEE0DC5FF509;
  *((void *)&v47 + 1) = "md::SkyLogic]";
  uint64_t v48 = 12;
  *(void *)&long long v43 = 0x7C7EC6C7C111B0D0;
  *((void *)&v43 + 1) = "md::SkyLogicContext]";
  *(void *)&long long v44 = 19;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 2;
  long long v54 = xmmword_1E5A97A40;
  long long v55 = unk_1E5A97A50;
  long long v56 = xmmword_1E5A97A60;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v43 = 0x2FED70A4459DFCA1;
  *((void *)&v43 + 1) = "md::StyleLogic]";
  *(void *)&long long v44 = 14;
  *(void *)&long long v53 = 0xE42D19AFCA302E68;
  *((void *)&v53 + 1) = "md::StyleLogicContext]";
  *(void *)&long long v54 = 21;
  BYTE8(v54) = 1;
  *(void *)&long long v47 = &v48;
  *((void *)&v47 + 1) = 0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(void *)&long long v47 = 0x33D44727E59BE9E9;
  *((void *)&v47 + 1) = "md::PuckLogic]";
  uint64_t v48 = 13;
  *(void *)&long long v43 = 0x9AEE7E062376E454;
  *((void *)&v43 + 1) = "md::PuckContext]";
  *(void *)&long long v44 = 15;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 9;
  long long v64 = xmmword_1E5A97BE8;
  long long v65 = *(_OWORD *)&off_1E5A97BF8;
  long long v66 = xmmword_1E5A97C08;
  uint64_t v67 = 24;
  long long v60 = xmmword_1E5A97BA8;
  long long v61 = unk_1E5A97BB8;
  long long v62 = xmmword_1E5A97BC8;
  long long v63 = unk_1E5A97BD8;
  long long v56 = xmmword_1E5A97B68;
  long long v57 = unk_1E5A97B78;
  long long v58 = xmmword_1E5A97B88;
  long long v59 = *(_OWORD *)&off_1E5A97B98;
  long long v54 = xmmword_1E5A97B48;
  long long v55 = unk_1E5A97B58;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v43 = 0x6139471CB89383CBLL;
  *((void *)&v43 + 1) = "md::NonTiledAssetLogic]";
  *(void *)&long long v44 = 22;
  *(void *)&long long v53 = 0x932EE29454ABDC4ELL;
  *((void *)&v53 + 1) = "md::NonTiledAssetContext]";
  *(void *)&long long v54 = 24;
  BYTE8(v54) = 1;
  *(void *)&long long v47 = &v48;
  *((void *)&v47 + 1) = 0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(void *)&long long v47 = 0x738A703709805788;
  *((void *)&v47 + 1) = "md::LocalNorthLogic]";
  uint64_t v48 = 19;
  *(void *)&long long v43 = 0xC81F81A7CB7767BBLL;
  *((void *)&v43 + 1) = "md::LocalNorthLogicContext]";
  *(void *)&long long v44 = 26;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 3;
  long long v56 = xmmword_1E5A970B8;
  long long v57 = unk_1E5A970C8;
  *(void *)&long long v58 = 17;
  long long v54 = xmmword_1E5A97098;
  long long v55 = unk_1E5A970A8;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v47 = 0x652FEFC5C602CC21;
  *((void *)&v47 + 1) = "md::StandardLogic]";
  uint64_t v48 = 17;
  *(void *)&long long v43 = 0xFFA06A69D924B0E8;
  *((void *)&v43 + 1) = "md::StandardLogicContext]";
  *(void *)&long long v44 = 24;
  BYTE8(v44) = 1;
  *(void *)&long long v53 = &v54;
  *((void *)&v53 + 1) = 2;
  long long v54 = xmmword_1E5A970E0;
  long long v55 = unk_1E5A970F0;
  long long v56 = xmmword_1E5A97100;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(void *)&long long v43 = 0x41948F4CADE567A1;
  *((void *)&v43 + 1) = "md::DebugDrawLogic]";
  *(void *)&long long v44 = 18;
  *(void *)&long long v53 = 0x3619066E3FB5F2CLL;
  *((void *)&v53 + 1) = "md::DebugDrawContext]";
  *(void *)&long long v54 = 20;
  BYTE8(v54) = 1;
  *(void *)&long long v47 = &v48;
  *((void *)&v47 + 1) = 0;
  unint64_t v50 = (unint64_t)&v52;
  int v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  if (*(unsigned char *)(a1 + 568))
  {
    *(void *)&long long v47 = 0xF1FE4046E5C81374;
    *((void *)&v47 + 1) = "md::CollectMapDataLogic<md::MapDataType::DaVinciBuildings>]";
    uint64_t v48 = 58;
    *(void *)&long long v43 = 0x5B0BFF71B88387C7;
    *((void *)&v43 + 1) = "md::CollectMapDataContext<md::MapDataType::DaVinciBuildings>]";
    *(void *)&long long v44 = 60;
    BYTE8(v44) = 1;
    *(void *)&long long v53 = &v54;
    *((void *)&v53 + 1) = 1;
    long long v54 = xmmword_1E5A97E00;
    *(void *)&long long v55 = 16;
    unint64_t v50 = (unint64_t)&v52;
    int v51 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
    *(void *)&long long v47 = 0xB4DD094975FB84EALL;
    *((void *)&v47 + 1) = "md::CollectMapDataLogic<md::MapDataType::InjectedFeatures>]";
    uint64_t v48 = 58;
    *(void *)&long long v43 = 0x5A88E3C88DA0DCA1;
    *((void *)&v43 + 1) = "md::CollectMapDataContext<md::MapDataType::InjectedFeatures>]";
    *(void *)&long long v44 = 60;
    BYTE8(v44) = 1;
    *(void *)&long long v53 = &v54;
    *((void *)&v53 + 1) = 1;
    long long v54 = xmmword_1E5A97E00;
    *(void *)&long long v55 = 16;
    unint64_t v50 = (unint64_t)&v52;
    int v51 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
    unint64_t v50 = 0x20B829C32C58D309;
    int v51 = "md::CollectRenderablesLogic<md::MapDataType::DaVinciBuildings, md::DaVinciGroundRenderable>]";
    uint64_t v52 = 91;
    *(void *)&long long v53 = &v54;
    *(void *)&long long v47 = 0xF5BDE3F396AD5C40;
    *((void *)&v47 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciBuildings>]";
    uint64_t v48 = 69;
    char v49 = 1;
    *((void *)&v53 + 1) = 1;
    long long v54 = xmmword_1E5A97158;
    *(void *)&long long v55 = 19;
    *(void *)&long long v43 = &v44;
    *((void *)&v43 + 1) = 1;
    long long v44 = xmmword_1E5A97140;
    *(void *)&long long v45 = 60;
    gdc::LogicExecutionGraphBuilder::addLogic(v20, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
    unint64_t v50 = 0x13C9C3CF7E2D459BLL;
    int v51 = "md::CollectRenderablesLogic<md::MapDataType::InjectedFeatures, md::DaVinciGroundRenderable>]";
    uint64_t v52 = 91;
    *(void *)&long long v53 = &v54;
    *(void *)&long long v47 = 0x552ACF95227023D6;
    *((void *)&v47 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::InjectedFeatures>]";
    uint64_t v48 = 69;
    char v49 = 1;
    *((void *)&v53 + 1) = 1;
    long long v54 = xmmword_1E5A97158;
    *(void *)&long long v55 = 19;
    *(void *)&long long v43 = &v44;
    *((void *)&v43 + 1) = 1;
    long long v44 = xmmword_1E5A97170;
    *(void *)&long long v45 = 60;
    gdc::LogicExecutionGraphBuilder::addLogic(v20, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  }
  LOWORD(v53) = 1;
  if (a3) {
    __int16 v23 = 1;
  }
  else {
    __int16 v23 = 3;
  }
  WORD1(v53) = a3;
  if (a3) {
    __int16 v24 = 7;
  }
  else {
    __int16 v24 = 2;
  }
  WORD2(v53) = 2;
  if (a3) {
    __int16 v25 = 1;
  }
  else {
    __int16 v25 = 4;
  }
  WORD3(v53) = a3;
  WORD4(v53) = 4;
  WORD5(v53) = a3;
  WORD6(v53) = 67;
  HIWORD(v53) = a3;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 1u, &v53)+ 18) = a3 << 16;
  int v26 = WORD3(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v53), (_WORD *)&v53 + 2)+ 18) = v26 << 16;
  int v27 = WORD5(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v53), (_WORD *)&v53 + 4)+ 18) = v27 << 16;
  int v28 = HIWORD(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v53), (_WORD *)&v53 + 6)+ 18) = v28 << 16;
  LOWORD(v53) = 18;
  WORD1(v53) = a3;
  WORD2(v53) = 19;
  WORD3(v53) = a3;
  WORD4(v53) = 28;
  WORD5(v53) = a3;
  WORD6(v53) = 27;
  HIWORD(v53) = a3;
  LOWORD(v54) = 15;
  WORD1(v54) = a3;
  WORD2(v54) = 41;
  WORD3(v54) = a3;
  WORD4(v54) = 42;
  WORD5(v54) = a3;
  WORD6(v54) = 55;
  HIWORD(v54) = a3;
  LOWORD(v55) = 56;
  WORD1(v55) = a3;
  WORD2(v55) = 62;
  WORD3(v55) = a3;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x12u, &v53)+ 18) = (a3 << 16) | 1;
  int v29 = WORD3(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v53), (_WORD *)&v53 + 2)+ 18) = (v29 << 16) | 1;
  int v30 = WORD5(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v53), (_WORD *)&v53 + 4)+ 18) = (v30 << 16) | 1;
  int v31 = HIWORD(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v53), (_WORD *)&v53 + 6)+ 18) = (v31 << 16) | 1;
  int v32 = WORD1(v54);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v54, &v54)+ 18) = (v32 << 16) | 1;
  int v33 = WORD3(v54);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v54), (_WORD *)&v54 + 2)+ 18) = (v33 << 16) | 1;
  int v34 = WORD5(v54);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v54), (_WORD *)&v54 + 4)+ 18) = (v34 << 16) | 1;
  int v35 = HIWORD(v54);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v54), (_WORD *)&v54 + 6)+ 18) = (v35 << 16) | 1;
  int v36 = WORD1(v55);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v55, &v55)+ 18) = (v36 << 16) | 1;
  int v37 = WORD3(v55);
  uint64_t v38 = 0;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v55), (_WORD *)&v55 + 2)+ 18) = (v37 << 16) | 1;
  LOWORD(v53) = 6;
  if (a3) {
    __int16 v39 = 6;
  }
  else {
    __int16 v39 = 3;
  }
  WORD1(v53) = v39;
  WORD2(v53) = 26;
  WORD3(v53) = a3;
  WORD4(v53) = 66;
  WORD5(v53) = a3;
  WORD6(v53) = 73;
  HIWORD(v53) = a3;
  LOWORD(v54) = 14;
  WORD1(v54) = a3;
  WORD2(v54) = 54;
  WORD3(v54) = a3;
  WORD4(v54) = 11;
  WORD5(v54) = v24;
  WORD6(v54) = 12;
  HIWORD(v54) = v24;
  LOWORD(v55) = 71;
  WORD1(v55) = v24;
  WORD2(v55) = 72;
  WORD3(v55) = v24;
  WORD4(v55) = 40;
  WORD5(v55) = a3;
  WORD6(v55) = 35;
  HIWORD(v55) = v23;
  LOWORD(v56) = 51;
  WORD1(v56) = v25;
  WORD2(v56) = 20;
  WORD3(v56) = a3;
  WORD4(v56) = 24;
  WORD5(v56) = a3;
  WORD6(v56) = 64;
  HIWORD(v56) = a3;
  LOWORD(v57) = 65;
  WORD1(v57) = a3;
  WORD2(v57) = 69;
  WORD3(v57) = a3;
  WORD4(v57) = 68;
  WORD5(v57) = a3;
  WORD6(v57) = 70;
  HIWORD(v57) = a3;
  LOWORD(v58) = 74;
  WORD1(v58) = a3;
  do
  {
    int v40 = *(unsigned __int16 *)((char *)&v53 + v38 + 2);
    uint64_t v41 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, *(_WORD *)((char *)&v53 + v38), (long long *)((char *)&v53 + v38));
    v38 += 4;
    *(_DWORD *)((char *)v41 + 18) = (v40 << 16) | 2;
  }
  while (v38 != 84);
  return a1;
}

void sub_1A1A3F358(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1EF5463F0;
  if (*((unsigned char *)v1 + 548)) {
    *((unsigned char *)v1 + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void gdc::LogicExecutionGraphBuilder::addLogic(uint64_t a1, unint64_t *a2, long long *a3, char a4, uint64_t a5, uint64_t a6)
{
  char v12 = (float *)(a1 + 24);
  int8x8_t v13 = *(int8x8_t *)(a1 + 32);
  if (v13)
  {
    unint64_t v14 = *a2;
    uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v16 = *a2;
      if (v14 >= *(void *)&v13) {
        unint64_t v16 = v14 % *(void *)&v13;
      }
    }
    else
    {
      unint64_t v16 = (*(void *)&v13 - 1) & v14;
    }
    uint64_t v17 = *(void **)(*(void *)v12 + 8 * v16);
    if (v17)
    {
      uint64_t v18 = (void *)*v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          uint64_t v19 = *(void *)&v13 - 1;
          while (1)
          {
            uint64_t v21 = v18[1];
            if (v14 == v21)
            {
              if (v18[2] == v14) {
                return;
              }
            }
            else if ((v21 & v19) != v16)
            {
              goto LABEL_21;
            }
            uint64_t v18 = (void *)*v18;
            if (!v18) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v20 = v18[1];
          if (v14 == v20)
          {
            if (v18[2] == v14) {
              return;
            }
          }
          else
          {
            if (v20 >= *(void *)&v13) {
              v20 %= *(void *)&v13;
            }
            if (v20 != v16) {
              break;
            }
          }
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_21:
  long long v70 = *(_OWORD *)a2;
  unint64_t v71 = a2[2];
  uint64_t v22 = *(void *)(a1 + 136);
  if (v22)
  {
    long long v76 = *(_OWORD *)a2;
    *(void *)&long long v77 = a2[2];
    (*(void (**)(void **__return_ptr))(*(void *)v22 + 48))(__p);
    long long v72 = v70;
    *(void *)&long long v73 = v71;
    BYTE8(v73) = a4;
    if (SBYTE7(v75) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v72 = *(_OWORD *)a2;
    *(void *)&long long v73 = a2[2];
    BYTE8(v73) = a4;
  }
  long long v68 = v72;
  long long v69 = v73;
  __int16 v23 = *(uint64_t ***)(a1 + 8);
  if (v23)
  {
    unsigned __int8 v24 = BYTE8(v69);
    while (1)
    {
      unint64_t v25 = (unint64_t)v23[4];
      unsigned int v26 = *((unsigned __int8 *)v23 + 56);
      BOOL v27 = BYTE8(v69) < v26;
      if ((void)v72 != v25) {
        BOOL v27 = (unint64_t)v72 < v25;
      }
      if (!v27)
      {
        BOOL v28 = v26 < BYTE8(v69);
        if ((void)v72 == v25) {
          BOOL v29 = v28;
        }
        else {
          BOOL v29 = v25 < (unint64_t)v72;
        }
        if (!v29) {
          goto LABEL_39;
        }
        ++v23;
      }
      __int16 v23 = (uint64_t **)*v23;
      if (!v23) {
        goto LABEL_38;
      }
    }
  }
  unsigned __int8 v24 = BYTE8(v69);
LABEL_38:
  std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::__emplace_unique_key_args<gdc::LogicExecutionNode,gdc::LogicExecutionNode&,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>((uint64_t *)a1, v72, v24, &v68, 0, 0);
LABEL_39:
  std::__hash_table<gdc::TypeInfo,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,std::allocator<gdc::TypeInfo>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo const&>(v12, *a2, (uint64_t)a2);
  if (*((unsigned char *)a3 + 24))
  {
    unint64_t v30 = *(void *)a3;
    long long v67 = *(long long *)((char *)a3 + 8);
    uint64_t v31 = *(void *)(a1 + 136);
    if (v31)
    {
      long long v76 = *a3;
      *(void *)&long long v77 = *((void *)a3 + 2);
      (*(void (**)(void **__return_ptr))(*(void *)v31 + 48))(__p);
    }
    else
    {
      BYTE7(v75) = 0;
      LOBYTE(__p[0]) = 0;
    }
    int v33 = (uint64_t **)(a1 + 72);
    int v32 = *(char **)(a1 + 72);
    if (v32)
    {
      while (1)
      {
        while (1)
        {
          int v34 = v32;
          unint64_t v35 = *((void *)v32 + 4);
          if (v30 >= v35) {
            break;
          }
          int v32 = *(char **)v34;
          int v33 = (uint64_t **)v34;
          if (!*(void *)v34) {
            goto LABEL_50;
          }
        }
        if (v35 >= v30) {
          break;
        }
        int v32 = (char *)*((void *)v34 + 1);
        if (!v32)
        {
          int v33 = (uint64_t **)(v34 + 8);
          goto LABEL_50;
        }
      }
    }
    else
    {
      int v34 = (char *)(a1 + 72);
LABEL_50:
      int v36 = v34;
      int v34 = (char *)operator new(0x50uLL);
      *((void *)v34 + 4) = v30;
      *(_OWORD *)(v34 + 40) = v67;
      *((void *)v34 + 8) = 0;
      *((void *)v34 + 9) = 0;
      *((void *)v34 + 7) = 0;
      *(void *)int v34 = 0;
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = v36;
      *int v33 = (uint64_t *)v34;
      uint64_t v37 = **(void **)(a1 + 64);
      uint64_t v38 = (uint64_t *)v34;
      if (v37)
      {
        *(void *)(a1 + 64) = v37;
        uint64_t v38 = *v33;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v38);
      ++*(void *)(a1 + 80);
    }
    int v40 = (char *)*((void *)v34 + 8);
    unint64_t v39 = *((void *)v34 + 9);
    if ((unint64_t)v40 >= v39)
    {
      long long v43 = (char *)*((void *)v34 + 7);
      uint64_t v44 = (v40 - v43) >> 5;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 59) {
        goto LABEL_108;
      }
      uint64_t v46 = v39 - (void)v43;
      if (v46 >> 4 > v45) {
        unint64_t v45 = v46 >> 4;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v47 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        if (v47 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v48 = (char *)operator new(32 * v47);
      }
      else
      {
        uint64_t v48 = 0;
      }
      char v49 = &v48[32 * v44];
      long long v50 = v73;
      *(_OWORD *)char v49 = v72;
      *((_OWORD *)v49 + 1) = v50;
      int v42 = v49 + 32;
      if (v40 != v43)
      {
        do
        {
          long long v51 = *((_OWORD *)v40 - 2);
          *(_OWORD *)(v49 - 23) = *(_OWORD *)(v40 - 23);
          *((_OWORD *)v49 - 2) = v51;
          v49 -= 32;
          v40 -= 32;
        }
        while (v40 != v43);
        int v40 = (char *)*((void *)v34 + 7);
      }
      *((void *)v34 + 7) = v49;
      *((void *)v34 + 8) = v42;
      *((void *)v34 + 9) = &v48[32 * v47];
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      long long v41 = v73;
      *(_OWORD *)int v40 = v72;
      *((_OWORD *)v40 + 1) = v41;
      int v42 = v40 + 32;
    }
    *((void *)v34 + 8) = v42;
    if (SBYTE7(v75) < 0) {
      operator delete(__p[0]);
    }
    if (*((unsigned char *)a3 + 24))
    {
      uint64_t v52 = *(void **)(a1 + 96);
      if (v52)
      {
        unint64_t v53 = *(void *)a3;
        long long v54 = (uint64_t *)(a1 + 96);
        do
        {
          unint64_t v55 = v52[4];
          BOOL v56 = v55 >= v53;
          if (v55 >= v53) {
            long long v57 = v52;
          }
          else {
            long long v57 = v52 + 1;
          }
          if (v56) {
            long long v54 = v52;
          }
          uint64_t v52 = (void *)*v57;
        }
        while (*v57);
        if (v54 != (uint64_t *)(a1 + 96) && v53 >= v54[4])
        {
          uint64_t v58 = v54[7];
          uint64_t v59 = v54[8];
          if (v58 != v59)
          {
            int v60 = BYTE8(v73);
            do
            {
              if (*(unsigned char *)(v58 + 32) == 1 || (!*(unsigned char *)(v58 + 32) ? (BOOL v61 = v60 == 0) : (BOOL v61 = 0), v61))
              {
                long long v76 = *(_OWORD *)v58;
                long long v77 = *(_OWORD *)(v58 + 16);
                *(_OWORD *)__p = v72;
                long long v75 = v73;
                geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::addEdge((uint64_t *)a1, (unint64_t *)&v76, (unint64_t *)__p);
              }
              else
              {
                *(unsigned char *)(a1 + 144) = 1;
              }
              v58 += 40;
            }
            while (v58 != v59);
          }
          long long v62 = (uint64_t *)v54[1];
          if (v62)
          {
            do
            {
              long long v63 = v62;
              long long v62 = (uint64_t *)*v62;
            }
            while (v62);
          }
          else
          {
            long long v64 = v54;
            do
            {
              long long v63 = (uint64_t *)v64[2];
              BOOL v61 = *v63 == (void)v64;
              long long v64 = v63;
            }
            while (!v61);
          }
          if (*(uint64_t **)(a1 + 88) == v54) {
            *(void *)(a1 + 88) = v63;
          }
          long long v65 = *(uint64_t **)(a1 + 96);
          --*(void *)(a1 + 104);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v65, v54);
          long long v66 = (void *)v54[7];
          if (v66)
          {
            v54[8] = (uint64_t)v66;
            operator delete(v66);
          }
          operator delete(v54);
        }
      }
      goto LABEL_105;
    }
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_108:
    abort();
  }
LABEL_105:
  gdc::LogicExecutionGraphBuilder::processDependentTypes(a1, &v72, *(void **)a5, *(void *)(a5 + 8), 0);
  gdc::LogicExecutionGraphBuilder::processDependentTypes(a1, &v72, *(void **)a6, *(void *)(a6 + 8), 1);
}

void std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)a2;
  size_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v4 = *(const void **)(a1 + 8);
  if (v3 >= 0x17)
  {
    uint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v5 = v3 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v7 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *uint64_t v2 = v7;
    uint64_t v2 = v7;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v3;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v2, v4, v3);
LABEL_9:
  *((unsigned char *)v2 + v3) = 0;
}

void geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::addEdge(uint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v7 = (uint64_t ***)(a1 + 1);
  uint64_t v6 = (unsigned __int8 *)a1[1];
  double v8 = (uint64_t **)(a1 + 1);
  unint64_t v9 = (unsigned __int8 *)(a1 + 1);
  if (v6)
  {
    unint64_t v10 = *a2;
    unsigned int v11 = *((unsigned __int8 *)a2 + 24);
    while (1)
    {
      while (1)
      {
        unint64_t v9 = v6;
        unint64_t v12 = *((void *)v6 + 4);
        unsigned int v13 = v9[56];
        BOOL v14 = v11 < v13;
        if (v10 != v12) {
          BOOL v14 = v10 < v12;
        }
        if (!v14) {
          break;
        }
        uint64_t v6 = *(unsigned __int8 **)v9;
        double v8 = (uint64_t **)v9;
        if (!*(void *)v9) {
          goto LABEL_13;
        }
      }
      BOOL v15 = v13 < v11;
      int v16 = v10 == v12 ? v15 : v12 < v10;
      if (v16 != 1) {
        break;
      }
      uint64_t v6 = (unsigned __int8 *)*((void *)v9 + 1);
      if (!v6)
      {
        double v8 = (uint64_t **)(v9 + 8);
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    uint64_t v17 = v9;
    unint64_t v9 = (unsigned __int8 *)operator new(0x58uLL);
    long long v18 = *((_OWORD *)a2 + 1);
    *((_OWORD *)v9 + 2) = *(_OWORD *)a2;
    *((_OWORD *)v9 + 3) = v18;
    *((void *)v9 + 9) = 0;
    *((void *)v9 + 10) = 0;
    *((void *)v9 + 8) = 0;
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v17;
    *double v8 = (uint64_t *)v9;
    uint64_t v19 = *(void *)*a1;
    unint64_t v20 = (uint64_t *)v9;
    if (v19)
    {
      *a1 = v19;
      unint64_t v20 = *v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v20);
    ++a1[2];
  }
  uint64_t v22 = (unint64_t *)*((void *)v9 + 8);
  uint64_t v21 = (char *)*((void *)v9 + 9);
  uint64_t v23 = (uint64_t)(v9 + 64);
  if (v22 != (unint64_t *)v21)
  {
    unint64_t v24 = *a3;
    unsigned int v25 = *((unsigned __int8 *)a3 + 24);
    while (1)
    {
      unint64_t v26 = *v22;
      unsigned int v27 = *((unsigned __int8 *)v22 + 24);
      BOOL v28 = v25 < v27;
      if (v24 != *v22) {
        BOOL v28 = v24 < *v22;
      }
      if (v28) {
        break;
      }
      BOOL v29 = v25 >= v27;
      BOOL v30 = v27 >= v25;
      BOOL v31 = v26 >= v24;
      BOOL v32 = v24 == v26;
      BOOL v33 = v24 >= v26;
      if (v32)
      {
        BOOL v34 = v30;
      }
      else
      {
        BOOL v29 = v33;
        BOOL v34 = v31;
      }
      if (v29 && v34) {
        break;
      }
      v22 += 4;
      if (v22 == (unint64_t *)v21) {
        goto LABEL_46;
      }
    }
  }
  if (v22 == (unint64_t *)v21)
  {
LABEL_46:
    std::vector<gdc::LogicExecutionNode>::insert(v23, v21, a3);
    unint64_t v35 = *a3;
    long long v41 = *v7;
    if (*v7) {
      goto LABEL_34;
    }
    goto LABEL_47;
  }
  unint64_t v35 = *a3;
  unsigned int v36 = *((unsigned __int8 *)v22 + 24);
  unsigned int v37 = *((unsigned __int8 *)a3 + 24);
  BOOL v38 = v36 >= v37;
  BOOL v39 = v37 >= v36;
  BOOL v40 = *v22 >= *a3;
  if (*v22 == *a3) {
    BOOL v40 = v38;
  }
  else {
    BOOL v39 = *a3 >= *v22;
  }
  if (!v40)
  {
    uint64_t v21 = (char *)v22;
    goto LABEL_46;
  }
  uint64_t v21 = (char *)v22;
  if (!v39) {
    goto LABEL_46;
  }
  long long v41 = *v7;
  if (*v7)
  {
LABEL_34:
    unsigned int v42 = *((unsigned __int8 *)a3 + 24);
    while (1)
    {
      unint64_t v43 = (unint64_t)v41[4];
      unsigned int v44 = *((unsigned __int8 *)v41 + 56);
      BOOL v45 = v42 < v44;
      if (v35 != v43) {
        BOOL v45 = v35 < v43;
      }
      if (!v45)
      {
        BOOL v46 = v44 < v42;
        if (v35 == v43) {
          BOOL v47 = v46;
        }
        else {
          BOOL v47 = v43 < v35;
        }
        if (!v47) {
          return;
        }
        ++v41;
      }
      long long v41 = (uint64_t **)*v41;
      if (!v41) {
        goto LABEL_48;
      }
    }
  }
LABEL_47:
  LOBYTE(v42) = *((unsigned char *)a3 + 24);
LABEL_48:
  std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::__emplace_unique_key_args<gdc::LogicExecutionNode,gdc::LogicExecutionNode&,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>(a1, v35, v42, a3, 0, 0);
}

void gdc::LogicExecutionGraphBuilder::processDependentTypes(uint64_t a1, _OWORD *a2, void *a3, uint64_t a4, int a5)
{
  if (a4)
  {
    uint64_t v5 = a3;
    double v8 = (void *)(a1 + 72);
    unsigned int v44 = &a3[3 * a4];
    unint64_t v9 = (uint64_t **)(a1 + 96);
    do
    {
      unint64_t v10 = (long long *)(v5 + 1);
      unint64_t v11 = *v5;
      unint64_t v12 = (void *)*v8;
      if (!*v8) {
        goto LABEL_21;
      }
      unsigned int v13 = v8;
      do
      {
        unint64_t v14 = v12[4];
        BOOL v15 = v14 >= v11;
        if (v14 >= v11) {
          int v16 = v12;
        }
        else {
          int v16 = v12 + 1;
        }
        if (v15) {
          unsigned int v13 = v12;
        }
        unint64_t v12 = (void *)*v16;
      }
      while (*v16);
      if (v13 == v8 || v11 < v13[4] || (uint64_t v17 = v13[7], v17 == v13[8]))
      {
LABEL_21:
        long long v46 = *v10;
        uint64_t v20 = *(void *)(a1 + 136);
        if (v20)
        {
          *(void *)char v49 = *v5;
          *(_OWORD *)&v49[8] = *v10;
          (*(void (**)(void **__return_ptr))(*(void *)v20 + 48))(__p);
        }
        else
        {
          BYTE7(v48) = 0;
          LOBYTE(__p[0]) = 0;
        }
        uint64_t v21 = *v9;
        uint64_t v22 = v9;
        uint64_t v23 = (char *)v9;
        if (*v9)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v23 = (char *)v21;
              unint64_t v24 = v21[4];
              if (v11 >= v24) {
                break;
              }
              uint64_t v21 = *(uint64_t **)v23;
              uint64_t v22 = (uint64_t **)v23;
              if (!*(void *)v23) {
                goto LABEL_31;
              }
            }
            if (v24 >= v11) {
              break;
            }
            uint64_t v21 = (uint64_t *)*((void *)v23 + 1);
            if (!v21)
            {
              uint64_t v22 = (uint64_t **)(v23 + 8);
              goto LABEL_31;
            }
          }
        }
        else
        {
LABEL_31:
          unsigned int v25 = v23;
          uint64_t v23 = (char *)operator new(0x50uLL);
          *((void *)v23 + 4) = v11;
          *(_OWORD *)(v23 + 40) = v46;
          *((void *)v23 + 8) = 0;
          *((void *)v23 + 9) = 0;
          *((void *)v23 + 7) = 0;
          *(void *)uint64_t v23 = 0;
          *((void *)v23 + 1) = 0;
          *((void *)v23 + 2) = v25;
          *uint64_t v22 = (uint64_t *)v23;
          uint64_t v26 = **(void **)(a1 + 88);
          unsigned int v27 = (uint64_t *)v23;
          if (v26)
          {
            *(void *)(a1 + 88) = v26;
            unsigned int v27 = *v22;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 96), v27);
          ++*(void *)(a1 + 104);
        }
        BOOL v29 = (char *)*((void *)v23 + 8);
        unint64_t v28 = *((void *)v23 + 9);
        if ((unint64_t)v29 >= v28)
        {
          BOOL v32 = (char *)*((void *)v23 + 7);
          unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - v32) >> 3) + 1;
          if (v33 > 0x666666666666666) {
            abort();
          }
          unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - (void)v32) >> 3);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x333333333333333) {
            unint64_t v35 = 0x666666666666666;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v36 = 40 * v35;
          unsigned int v37 = (char *)operator new(40 * v35);
          long long v38 = a2[1];
          BOOL v39 = &v37[8 * ((v29 - v32) >> 3)];
          *(_OWORD *)BOOL v39 = *a2;
          *((_OWORD *)v39 + 1) = v38;
          v39[32] = a5;
          if (v29 == v32)
          {
            long long v41 = &v37[8 * ((v29 - v32) >> 3)];
          }
          else
          {
            BOOL v40 = &v37[8 * ((v29 - v32) >> 3)];
            do
            {
              long long v41 = v40 - 40;
              long long v42 = *(_OWORD *)(v29 - 40);
              long long v43 = *(_OWORD *)(v29 - 24);
              *((void *)v40 - 1) = *((void *)v29 - 1);
              *(_OWORD *)(v40 - 24) = v43;
              *(_OWORD *)(v40 - 40) = v42;
              v29 -= 40;
              v40 -= 40;
            }
            while (v29 != v32);
          }
          BOOL v31 = v39 + 40;
          *((void *)v23 + 7) = v41;
          *((void *)v23 + 8) = v39 + 40;
          *((void *)v23 + 9) = &v37[v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          long long v30 = a2[1];
          *(_OWORD *)BOOL v29 = *a2;
          *((_OWORD *)v29 + 1) = v30;
          v29[32] = a5;
          BOOL v31 = v29 + 40;
        }
        *((void *)v23 + 8) = v31;
        if (SBYTE7(v48) < 0) {
          operator delete(__p[0]);
        }
      }
      else if (a5 != 1 && (a5 || *(unsigned char *)(v17 + 24)))
      {
        *(unsigned char *)(a1 + 144) = 1;
      }
      else
      {
        long long v18 = a2[1];
        *(_OWORD *)char v49 = *a2;
        *(_OWORD *)&v49[16] = v18;
        long long v19 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)__p = *(_OWORD *)v17;
        long long v48 = v19;
        geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::addEdge((uint64_t *)a1, (unint64_t *)v49, (unint64_t *)__p);
      }
      v5 += 3;
    }
    while (v5 != v44);
  }
}

uint64_t *std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::__emplace_unique_key_args<gdc::LogicExecutionNode,gdc::LogicExecutionNode&,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>(uint64_t *result, unint64_t a2, unsigned __int8 a3, _OWORD *a4, const void *a5, uint64_t a6)
{
  unint64_t v9 = result;
  unint64_t v11 = result + 1;
  uint64_t v10 = result[1];
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v12 = (uint64_t *)v10;
        unint64_t v13 = *(void *)(v10 + 32);
        unsigned int v14 = *((unsigned __int8 *)v12 + 56);
        BOOL v15 = v14 > a3;
        if (v13 != a2) {
          BOOL v15 = v13 > a2;
        }
        if (!v15) {
          break;
        }
        uint64_t v10 = *v12;
        unint64_t v11 = v12;
        if (!*v12) {
          goto LABEL_13;
        }
      }
      BOOL v16 = v14 < a3;
      BOOL v17 = v13 == a2;
      BOOL v18 = v13 < a2;
      if (v17) {
        BOOL v18 = v16;
      }
      if (!v18) {
        break;
      }
      uint64_t v10 = v12[1];
      if (!v10)
      {
        unint64_t v11 = v12 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    unint64_t v12 = result + 1;
LABEL_13:
    long long v19 = operator new(0x58uLL);
    long long v20 = a4[1];
    v19[2] = *a4;
    v19[3] = v20;
    *((void *)v19 + 9) = 0;
    *((void *)v19 + 10) = 0;
    *((void *)v19 + 8) = 0;
    int64_t v21 = a6 - (void)a5;
    if (v21)
    {
      if (v21 < 0) {
        abort();
      }
      uint64_t v22 = (char *)operator new(v21);
      *((void *)v19 + 8) = v22;
      uint64_t v23 = &v22[32 * (v21 >> 5)];
      *((void *)v19 + 10) = v23;
      memcpy(v22, a5, v21 - 7);
      *((void *)v19 + 9) = v23;
    }
    *(void *)long long v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = v12;
    *unint64_t v11 = (uint64_t)v19;
    uint64_t v24 = *(void *)*v9;
    if (v24)
    {
      *unint64_t v9 = v24;
      long long v19 = (_OWORD *)*v11;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v9[1], (uint64_t *)v19);
    ++v9[2];
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  *((unsigned char *)v10 + 18) = 1;
  *((_WORD *)v10 + 10) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_34;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t v10 = *v23;
LABEL_58:
    *uint64_t v23 = v10;
    goto LABEL_59;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A1A40414(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 a2, unsigned char *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  *((unsigned char *)v10 + 17) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_34;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t v10 = *v23;
LABEL_58:
    *uint64_t v23 = v10;
    goto LABEL_59;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A1A406F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert(uint64_t *result, unsigned __int8 *a2)
{
  unint64_t v3 = result;
  if (result[2])
  {
    uint64_t v4 = (uint64_t **)(result + 1);
    if ((uint64_t *)*result == result + 1)
    {
      uint64_t v10 = (uint64_t **)*result;
    }
    else
    {
      unint64_t v5 = 0;
      unint64_t v6 = (uint64_t *)*result;
      do
      {
        unint64_t v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            uint8x8_t v8 = (uint64_t **)v7;
            unint64_t v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint8x8_t v8 = (uint64_t **)v6[2];
            BOOL v9 = *v8 == v6;
            unint64_t v6 = (uint64_t *)v8;
          }
          while (!v9);
        }
        ++v5;
        unint64_t v6 = (uint64_t *)v8;
      }
      while (v8 != v4);
      uint64_t v10 = (uint64_t **)*result;
      do
      {
        unint64_t v11 = v5 >> 1;
        uint64_t v12 = (uint64_t *)v10;
        if (v5 != 1)
        {
          uint64_t v14 = v5 >> 1;
          BOOL v15 = v10;
          do
          {
            unint64_t v17 = v15[1];
            if (v17)
            {
              do
              {
                uint64_t v12 = v17;
                unint64_t v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                uint64_t v12 = v15[2];
                BOOL v9 = *v12 == (void)v15;
                BOOL v15 = (uint64_t **)v12;
              }
              while (!v9);
            }
            BOOL v15 = (uint64_t **)v12;
          }
          while (v14-- > 1);
        }
        if (*((unsigned __int8 *)v12 + 33) < a2[1])
        {
          float v13 = (uint64_t *)v12[1];
          if (v13)
          {
            do
            {
              uint64_t v10 = (uint64_t **)v13;
              float v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v10 = (uint64_t **)v12[2];
              BOOL v9 = *v10 == v12;
              uint64_t v12 = (uint64_t *)v10;
            }
            while (!v9);
          }
          unint64_t v11 = v5 + ~v11;
        }
        unint64_t v5 = v11;
      }
      while (v11);
    }
    if (v10 != v4 && *((unsigned __int8 *)v10 + 32) < a2[1]) {
      return result;
    }
    if (v10 != (uint64_t **)*result)
    {
      uint64_t v22 = *v10;
      if (*v10)
      {
        do
        {
          uint64_t v23 = v22;
          uint64_t v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = v10[2];
          BOOL v9 = *v23 == (void)v10;
          uint64_t v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*a2 < *((unsigned __int8 *)v23 + 33)) {
        return result;
      }
    }
    unint64_t v24 = *v4;
    uint8x8_t v20 = (uint64_t **)(result + 1);
    if (*v4)
    {
      unsigned int v25 = a2[1];
      while (1)
      {
        while (1)
        {
          uint8x8_t v20 = (uint64_t **)v24;
          unsigned int v26 = *((unsigned __int8 *)v24 + 33);
          if (v25 >= v26) {
            break;
          }
          unint64_t v24 = *v20;
          uint64_t v4 = v20;
          if (!*v20) {
            goto LABEL_54;
          }
        }
        if (v26 >= v25) {
          return result;
        }
        unint64_t v24 = v20[1];
        if (!v24) {
          goto LABEL_52;
        }
      }
    }
LABEL_54:
    unsigned int v27 = operator new(0x30uLL);
    v27[16] = *(_WORD *)a2;
    *((void *)v27 + 5) = *((void *)a2 + 1);
    *(void *)unsigned int v27 = 0;
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = v20;
    const void *v4 = (uint64_t *)v27;
    uint64_t v28 = *(void *)*v3;
    if (v28)
    {
      uint64_t *v3 = v28;
      BOOL v29 = *v4;
    }
    else
    {
      BOOL v29 = (uint64_t *)v27;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[1], v29);
    ++v3[2];
    return result;
  }
  uint64_t v4 = (uint64_t **)(result + 1);
  uint64_t v18 = result[1];
  if (!v18)
  {
    uint8x8_t v20 = (uint64_t **)(result + 1);
    goto LABEL_54;
  }
  unsigned int v19 = a2[1];
  while (1)
  {
    while (1)
    {
      uint8x8_t v20 = (uint64_t **)v18;
      unsigned int v21 = *(unsigned __int8 *)(v18 + 33);
      if (v19 >= v21) {
        break;
      }
      uint64_t v18 = (uint64_t)*v20;
      uint64_t v4 = v20;
      if (!*v20) {
        goto LABEL_54;
      }
    }
    if (v21 >= v19) {
      return result;
    }
    uint64_t v18 = (uint64_t)v20[1];
    if (!v18)
    {
LABEL_52:
      uint64_t v4 = v20 + 1;
      goto LABEL_54;
    }
  }
}

uint64_t md::CartographicMapEngineMode::CartographicMapEngineMode(uint64_t a1, char a2)
{
  uint64_t v3 = md::MapEngineMode::MapEngineMode(a1, a2);
  *(void *)uint64_t v3 = &unk_1EF5463F0;
  *(void *)(v3 + 536) = 0;
  *(unsigned char *)(v3 + 544) = 0;
  *(unsigned char *)(v3 + 548) = 0;
  *(unsigned char *)(v3 + 225) = 0;
  uint64_t v4 = [MEMORY[0x1E4F64860] sharedPlatform];
  int v5 = [v4 isInternalInstall];

  if (v5)
  {
    v14[0] = 0x3A3A2962B4F0D965;
    v14[1] = (unint64_t)"md::DisplayLinkVerificationLogic]";
    __int16 v14[2] = 32;
    *(void *)&long long v11 = 0x42BE82C40F9A8F80;
    *((void *)&v11 + 1) = "md::DisplayLinkVerificationContext]";
    uint64_t v12 = 34;
    char v13 = 1;
    v10[0] = &v11;
    v10[1] = 0;
    v7[0] = &v8;
    v7[1] = 1;
    long long v8 = xmmword_1E5A96CC0;
    uint64_t v9 = 17;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, v14, &v11, 0, (uint64_t)v10, (uint64_t)v7);
  }
  return a1;
}

void sub_1A1A40AB4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  if (*((unsigned char *)v1 + 548)) {
    *((unsigned char *)v1 + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

uint64_t md::MapEngineMode::MapEngineMode(uint64_t a1, char a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EF532458;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 48) = a2;
  *(unsigned char *)(a1 + 49) = 1;
  *(_DWORD *)(a1 + 52) = 21;
  *(void *)(a1 + 56) = 0x3FE0C152382D7365;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_WORD *)(a1 + 224) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = a1 + 328;
  uint64_t v3 = (void *)(a1 + 344);
  *(void *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 384) = a1 + 392;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = a1 + 416;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 432) = a1 + 440;
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  v6[0] = &unk_1EF56FC78;
  uint64_t v9 = v8;
  unint64_t v7 = v6;
  v8[0] = &unk_1EF56FC78;
  if ((void *)(a1 + 344) == v8
    || (std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::__clone((uint64_t)v8, v3), (*(void (**)(void *))(*v9 + 32))(v9), uint64_t v9 = *(void **)(a1 + 368), v4 = v9, *(void *)(a1 + 368) = v3, v4 == v8))
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return a1;
}

void std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56FC78;
}

NSObject *___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEP16dispatch_group_s_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2 && !*(unsigned char *)(a1 + 64)) {
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 40) + 32));
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 24);
    if (!v4)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::operator()();
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    atomic_store(1u, (unsigned __int8 *)(*(void *)(a1 + 40) + 33));
  }
  int v5 = *(NSObject **)(a1 + 56);
  if (v5 && *(unsigned char *)(a1 + 64)) {
    dispatch_group_leave(v5);
  }
  uint64_t result = *(NSObject **)(a1 + 32);
  if (result)
  {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  os_signpost_id_t v3 = *(void *)(a1 + 8);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "LayerDataDecodeDispatched", "", buf, 2u);
    }
  }
  gdc::LayerDataSource::updateLayerData(v2, *(void *)(a1 + 168), a1 + 24, (uint64_t *)(a1 + 136), *(void *)(a1 + 160), *(unsigned char *)(a1 + 176));
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  os_signpost_id_t v5 = *(void *)(a1 + 8);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v6 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v6, OS_SIGNPOST_INTERVAL_END, v5, "LayerDataDecodeDispatched", "", v10, 2u);
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
    }
  }
  os_signpost_id_t v7 = *(void *)(a1 + 8);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v8 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v8, OS_SIGNPOST_INTERVAL_END, v7, "LayerDataDecode", "", v9, 2u);
    }
  }
}

void gdc::LayerDataSource::updateLayerData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 112))(&v84, a1, a3, a4, a5);
  std::mutex::lock((std::mutex *)(a1 + 480));
  double v14 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) * 0.000000001;
  unint64_t v15 = *(void *)(a1 + 576);
  if (v15)
  {
    *(double *)(a1 + 544) = fmin(*(double *)(a1 + 544), v14);
    *(double *)(a1 + 552) = fmax(*(double *)(a1 + 552), v14);
    double v16 = (double)v15;
    double v17 = *(double *)(a1 + 560) + v14 / (double)v15;
    unint64_t v18 = v15 + 1;
    *(double *)(a1 + 560) = v17 * v16 / (double)v18;
    double v14 = *(double *)(a1 + 568) + v14;
  }
  else
  {
    *(double *)(a1 + 544) = v14;
    *(double *)(a1 + 552) = v14;
    *(double *)(a1 + 560) = v14;
    unint64_t v18 = 1;
  }
  *(double *)(a1 + 568) = v14;
  *(void *)(a1 + 576) = v18;
  std::mutex::unlock((std::mutex *)(a1 + 480));
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  unsigned int v19 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (!os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_11;
  }
  p_p = &__p;
  gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)a3);
  uint8x8_t v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__p
      : (std::string *)__p.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315394;
  uint64_t v94 = v20;
  __int16 v95 = 2048;
  uint64_t v96 = a5;
  _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_DEBUG, "Created Layer Data: %s @ Time: %lld", buf, 0x16u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v21 = v84;
    if (v84) {
      goto LABEL_12;
    }
  }
  else
  {
LABEL_11:
    uint64_t v21 = v84;
    if (v84)
    {
LABEL_12:
      uint64_t v22 = *a4;
      uint64_t v23 = a4[1];
      if (*a4 == v23)
      {
LABEL_74:
        *(void *)(v21 + 128) = a2;
        *(unsigned char *)(v21 + 160) = a6;
        uint64_t v54 = *(void *)(a1 + 16);
        unint64_t v34 = (std::mutex *)(v54 + 80);
        std::mutex::lock((std::mutex *)(v54 + 80));
        unint64_t v55 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(v54 + 144, (unsigned __int8 *)a3, a3);
        uint64_t v57 = v84;
        BOOL v56 = v85;
        if (v85) {
          atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v58 = (std::__shared_weak_count *)v55[17];
        v55[16] = v57;
        v55[17] = v56;
        if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
        uint64_t v59 = *(void *)(v54 + 272);
        if (v59) {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v59 + 48))(v59, &v84);
        }
        goto LABEL_127;
      }
      uint64_t v24 = 0;
      while (1)
      {
        unsigned int v25 = *(void **)(v22 + 24);
        if (v25) {
          break;
        }
LABEL_14:
        v22 += 48;
        if (v22 == v23)
        {
          if (v24 > 0)
          {
            *(void *)(v21 + 152) = v24;
            uint64_t v29 = v24 - a5;
            if (v24 <= a5)
            {
              long long v30 = (std::mutex *)(a1 + 376);
              std::mutex::lock((std::mutex *)(a1 + 376));
              uint64_t v53 = *(void *)(a1 + 464);
              if (v53) {
                (*(void (**)(uint64_t))(*(void *)v53 + 48))(v53);
              }
            }
            else
            {
              long long v30 = (std::mutex *)(a1 + 304);
              std::mutex::lock((std::mutex *)(a1 + 304));
              (*(void (**)(void, void, double))(**(void **)(a1 + 368) + 24))(*(void *)(a1 + 368), 0, (double)v29 * 0.001);
            }
            std::mutex::unlock(v30);
            uint64_t v21 = v84;
          }
          goto LABEL_74;
        }
      }
      while (1)
      {
        uint64_t v26 = v25[14];
        uint64_t v27 = *(void *)(v26 + 112);
        if (v27 < 1)
        {
          uint64_t v28 = 0;
          if (v24)
          {
LABEL_23:
            if (v28 < 1 || v28 >= v24) {
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v28 = *(void *)(v26 + 96) + v27;
          if (v24) {
            goto LABEL_23;
          }
        }
        uint64_t v24 = v28;
LABEL_18:
        unsigned int v25 = (void *)*v25;
        if (!v25) {
          goto LABEL_14;
        }
      }
    }
  }
  if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_55048);
  }
  BOOL v31 = GEOGetGeoDisplayCoreDefaultLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDefaultLog::log, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 128))(&__p, a1, a3);
    BOOL v32 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    uint64_t v94 = v32;
    _os_log_impl(&dword_1A1780000, v31, OS_LOG_TYPE_ERROR, "Failed to create layer data for key: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v33 = *(void *)(a1 + 16);
  unint64_t v34 = (std::mutex *)(v33 + 80);
  std::mutex::lock((std::mutex *)(v33 + 80));
  __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&__p.__r_.__value_.__l.__size_, a3 + 8);
  unsigned __int8 v90 = 0;
  if (*(unsigned char *)(a3 + 96))
  {
    int v91 = *(_DWORD *)(a3 + 100);
    int v35 = 1;
    unsigned __int8 v90 = 1;
  }
  else
  {
    int v35 = 0;
  }
  uint64_t v36 = (uint64_t *)(v33 + 184);
  unint64_t v37 = *(void *)(a3 + 104);
  *(void *)&long long v92 = v37;
  *((void *)&v92 + 1) = a2;
  unint64_t v38 = *(void *)(v33 + 192);
  if (v38)
  {
    uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
    v39.i16[0] = vaddlv_u8(v39);
    if (v39.u32[0] > 1uLL)
    {
      p_p = (std::string *)v37;
      if (v37 >= v38) {
        p_p = (std::string *)(v37 % v38);
      }
    }
    else
    {
      p_p = (std::string *)((v38 - 1) & v37);
    }
    BOOL v40 = *(uint64_t ****)(*v36 + 8 * (void)p_p);
    if (v40)
    {
      long long v41 = *v40;
      if (*v40)
      {
        int v42 = __p.__r_.__value_.__s.__data_[0];
        int v43 = LOWORD(__p.__r_.__value_.__r.__words[1]);
        unsigned int v44 = v89;
        BOOL v45 = (const void *)__p.__r_.__value_.__r.__words[2];
        size_t v46 = v87 - __p.__r_.__value_.__r.__words[2];
        if (v39.u32[0] >= 2uLL)
        {
          while (1)
          {
            unint64_t v47 = (unint64_t)v41[1];
            if (v47 == v37)
            {
              if (*((unsigned __int8 *)v41 + 16) == v42 && *((unsigned __int16 *)v41 + 12) == v43 && v41[12] == v44)
              {
                long long v48 = v41[4];
                if ((char *)v41[5] - (char *)v48 == v46)
                {
                  size_t v80 = v46;
                  uint64_t v82 = v45;
                  int v78 = v43;
                  long long v76 = v44;
                  int v49 = memcmp(v48, v45, v46);
                  size_t v46 = v80;
                  BOOL v45 = v82;
                  unsigned int v44 = v76;
                  int v43 = v78;
                  if (!v49) {
                    goto LABEL_123;
                  }
                }
              }
            }
            else
            {
              if (v47 >= v38) {
                v47 %= v38;
              }
              if ((std::string *)v47 != p_p) {
                goto LABEL_82;
              }
            }
            long long v41 = (uint64_t **)*v41;
            if (!v41) {
              goto LABEL_82;
            }
          }
        }
        do
        {
          long long v50 = v41[1];
          if (v50 == (uint64_t *)v37)
          {
            if (*((unsigned __int8 *)v41 + 16) == v42 && *((unsigned __int16 *)v41 + 12) == v43 && v41[12] == v44)
            {
              long long v51 = v41[4];
              if ((char *)v41[5] - (char *)v51 == v46)
              {
                size_t v81 = v46;
                uint64_t v83 = v45;
                int v79 = v43;
                long long v77 = v44;
                int v52 = memcmp(v51, v45, v46);
                size_t v46 = v81;
                BOOL v45 = v83;
                unsigned int v44 = v77;
                int v43 = v79;
                if (!v52) {
                  goto LABEL_123;
                }
              }
            }
          }
          else if ((std::string *)((unint64_t)v50 & (v38 - 1)) != p_p)
          {
            break;
          }
          long long v41 = (uint64_t **)*v41;
        }
        while (v41);
        uint64_t v36 = (uint64_t *)(v33 + 184);
      }
    }
  }
LABEL_82:
  int v60 = (char *)operator new(0x88uLL);
  *(void *)int v60 = 0;
  *((void *)v60 + 1) = v37;
  v60[16] = __p.__r_.__value_.__s.__data_[0];
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v60 + 24), (uint64_t)&__p.__r_.__value_.__l.__size_);
  v60[112] = 0;
  if (v90)
  {
    *((_DWORD *)v60 + 29) = v91;
    v60[112] = 1;
  }
  *(_OWORD *)(v60 + 120) = v92;
  float v61 = (float)(unint64_t)(*(void *)(v33 + 208) + 1);
  float v62 = *(float *)(v33 + 216);
  if (!v38 || (float)(v62 * (float)v38) < v61)
  {
    BOOL v63 = 1;
    if (v38 >= 3) {
      BOOL v63 = (v38 & (v38 - 1)) != 0;
    }
    unint64_t v64 = v63 | (2 * v38);
    unint64_t v65 = vcvtps_u32_f32(v61 / v62);
    if (v64 <= v65) {
      size_t prime = v65;
    }
    else {
      size_t prime = v64;
    }
    uint64_t v67 = (uint64_t)v36;
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v68 = *(int8x8_t *)(v33 + 192);
    if (prime > *(void *)&v68) {
      goto LABEL_96;
    }
    if (prime < *(void *)&v68)
    {
      unint64_t v69 = vcvtps_u32_f32((float)*(unint64_t *)(v33 + 208) / *(float *)(v33 + 216));
      if (*(void *)&v68 < 3uLL || (uint8x8_t v70 = (uint8x8_t)vcnt_s8(v68), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
      {
        unint64_t v69 = std::__next_prime(v69);
      }
      else
      {
        uint64_t v71 = 1 << -(char)__clz(v69 - 1);
        if (v69 >= 2) {
          unint64_t v69 = v71;
        }
      }
      if (prime <= v69) {
        size_t prime = v69;
      }
      if (prime < *(void *)&v68) {
LABEL_96:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v67, prime);
    }
    unint64_t v38 = *(void *)(v33 + 192);
    if ((v38 & (v38 - 1)) != 0)
    {
      if (v37 >= v38) {
        p_p = (std::string *)(v37 % v38);
      }
      else {
        p_p = (std::string *)v37;
      }
    }
    else
    {
      p_p = (std::string *)((v38 - 1) & v37);
    }
    uint64_t v36 = (uint64_t *)v67;
  }
  uint64_t v72 = *v36;
  long long v73 = *(void **)(*v36 + 8 * (void)p_p);
  if (v73)
  {
    *(void *)int v60 = *v73;
  }
  else
  {
    *(void *)int v60 = *(void *)(v33 + 200);
    *(void *)(v33 + 200) = v60;
    *(void *)(v72 + 8 * (void)p_p) = v33 + 200;
    if (!*(void *)v60) {
      goto LABEL_122;
    }
    unint64_t v74 = *(void *)(*(void *)v60 + 8);
    if ((v38 & (v38 - 1)) != 0)
    {
      if (v74 >= v38) {
        v74 %= v38;
      }
    }
    else
    {
      v74 &= v38 - 1;
    }
    long long v73 = (void *)(*v36 + 8 * v74);
  }
  *long long v73 = v60;
LABEL_122:
  ++*(void *)(v33 + 208);
  int v35 = v90;
LABEL_123:
  if (v35) {
    unsigned __int8 v90 = 0;
  }
  if (__p.__r_.__value_.__r.__words[2] != v88) {
    free((void *)__p.__r_.__value_.__r.__words[2]);
  }
LABEL_127:
  std::mutex::unlock(v34);
  long long v75 = v85;
  if (v85)
  {
    if (!atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *((void *)a2 + 13);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *((void *)a2 + 13);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        int v11 = *a2;
        int v12 = *((unsigned __int16 *)a2 + 4);
        uint64_t v13 = *((void *)a2 + 10);
        double v14 = (const void *)*((void *)a2 + 2);
        size_t v15 = *((void *)a2 + 3) - (void)v14;
        if (v8.u32[0] < 2uLL)
        {
          __s2 = (void *)*((void *)a2 + 2);
          while (1)
          {
            uint64_t v19 = v10[1];
            if (v19 == v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                uint8x8_t v20 = (const void *)v10[4];
                if (v10[5] - (void)v20 == v15)
                {
                  uint64_t v39 = v13;
                  int v21 = memcmp(v20, __s2, v15);
                  uint64_t v13 = v39;
                  if (!v21) {
                    return v10;
                  }
                }
              }
            }
            else if ((v19 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              double v17 = (const void *)v10[4];
              if (v10[5] - (void)v17 == v15)
              {
                uint64_t v38 = v13;
                int v18 = memcmp(v17, v14, v15);
                uint64_t v13 = v38;
                if (!v18) {
                  return v10;
                }
              }
            }
          }
          else
          {
            if (v16 >= v7) {
              v16 %= v7;
            }
            if (v16 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  uint64_t v10 = operator new(0x90uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *(unsigned char *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v10 + 3), a3 + 8);
  *((unsigned char *)v10 + 112) = 0;
  if (*(unsigned char *)(a3 + 96))
  {
    *((_DWORD *)v10 + 29) = *(_DWORD *)(a3 + 100);
    *((unsigned char *)v10 + 112) = 1;
  }
  uint64_t v22 = *(void *)(a3 + 104);
  uint8_t v10[16] = 0;
  v10[17] = 0;
  v10[15] = v22;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v7 || (float)(v24 * (float)v7) < v23)
  {
    BOOL v25 = 1;
    if (v7 >= 3) {
      BOOL v25 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v7);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_55;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_55:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v33 = *(void *)a1;
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *uint64_t v10 = *v34;
LABEL_69:
    *unint64_t v34 = v10;
    goto LABEL_70;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v33 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v35 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v35 >= v7) {
        v35 %= v7;
      }
    }
    else
    {
      v35 &= v7 - 1;
    }
    unint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v10;
}

void std::__function::__func<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0,std::allocator<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0>,void ()(std::shared_ptr<gdc::LayerData> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 376));
  uint64_t v2 = *(void *)(v1 + 464);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  std::mutex::unlock((std::mutex *)(v1 + 376));
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = **(void **)(*(void *)(a1 + 8) + 120);
  if (v1)
  {
    char v2 = 3;
    md::MapEngine::setNeedsTick(v1, &v2);
  }
}

void md::MapEngine::setNeedsTick(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 1182))
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 1179));
    atomic_fetch_or((atomic_ullong *volatile)(a1 + 1392), 1 << *a2);
    if ((atomic_exchange((atomic_uchar *volatile)(a1 + 1180), 1u) & 1) == 0)
    {
      uint64_t v2 = *(void *)(a1 + 120);
      unint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v4 = **(NSObject ***)(a1 + 8);
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3321888768;
      v5[2] = ___ZN2md9MapEngine12setNeedsTickERKNS_15NeedsLayoutInfoE_block_invoke;
      v5[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__18weak_ptrIN2md17RunLoopControllerEEE_e5_v8__0l;
      v5[4] = v2;
      unint64_t v6 = v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_async(v4, v5);
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v3) {
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void gdc::Timer::start(gdc::Timer *this, double a2, int a3)
{
  unint64_t v6 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((void *)this + 10))
  {
    *((unsigned char *)this + 96) = 1;
    *((CFAbsoluteTime *)this + 11) = CFAbsoluteTimeGetCurrent() + a2;
    double v7 = -1.0;
    if (a3) {
      double v7 = a2;
    }
    *((double *)this + 1) = v7;
    uint8x8_t v8 = *((void *)this + 10);
    if (a3) {
      uint64_t v9 = (unint64_t)(a2 * 1000000000.0);
    }
    else {
      uint64_t v9 = -1;
    }
    dispatch_time_t v10 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
    dispatch_source_set_timer(v8, v10, v9, 0xF4240uLL);
  }
  std::mutex::unlock(v6);
}

void md::DaVinciMaterialLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 36)
    {
      v5 += 48;
      if (v5 == v6) {
        goto LABEL_11;
      }
    }
  }
  if (v5 == v6 || *(void *)(v5 + 32) != 1)
  {
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v9 = *(void **)(v7 + 112);
  uint8x8_t v8 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v8)
  {
LABEL_12:
    uint64_t v39 = 0;
    char v38 = 1;
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v39 = v8;
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  char v38 = 0;
LABEL_13:
  dispatch_time_t v10 = (void *)v9[20];
  int v11 = (void *)v9[21];
  uint64_t v12 = v9[18];
  if (v10 == v11 || !*(void *)(v12 + 16))
  {
    char v32 = 0;
    goto LABEL_55;
  }
  while (1)
  {
    double v14 = (void *)v9[18];
    uint64_t v15 = v14[2];
    if (!v15) {
      goto LABEL_18;
    }
    unint64_t v16 = (char *)v14[5];
    double v17 = (char *)v14[6];
    if (v16 == v17) {
      goto LABEL_18;
    }
    int v18 = v16;
    while (*(void *)v18 != *v10)
    {
      v18 += 16;
      if (v18 == v17)
      {
        int v18 = v17;
        break;
      }
    }
    if (v18 == v17) {
      goto LABEL_18;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v15 + 16))(v15, (unint64_t)(v18 - v16) >> 4);
    if (!v19) {
      goto LABEL_18;
    }
    uint64_t v20 = *(unsigned __int16 *)(v19 + 10);
    if (*(_WORD *)(v19 + 10))
    {
      int v21 = *(char **)v19;
      if (*(unsigned char *)(v19 + 15))
      {
        if (v20 >= 0x1E)
        {
          unint64_t v26 = *(char **)v19;
          unint64_t v27 = *(unsigned __int16 *)(v19 + 10);
          do
          {
            unint64_t v28 = v27 >> 1;
            int8x8_t v29 = (unsigned int *)&v26[4 * (v27 >> 1)];
            unsigned int v31 = *v29;
            unint64_t v30 = (char *)(v29 + 1);
            v27 += ~(v27 >> 1);
            if (v31 < 0x10059) {
              unint64_t v26 = v30;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
          if (v26 == &v21[4 * v20] || *(_DWORD *)v26 != 65625) {
            goto LABEL_18;
          }
          unint64_t v13 = (unint64_t)(v26 - v21) >> 2;
        }
        else
        {
          uint64_t v22 = 0;
          while (1)
          {
            unsigned int v23 = *(_DWORD *)&v21[4 * v22];
            if (v23 >= 0x10059) {
              break;
            }
            if (v20 == ++v22) {
              goto LABEL_18;
            }
          }
          LOWORD(v13) = v23 == 65625 ? v22 : *(_WORD *)(v19 + 10);
        }
      }
      else
      {
        uint64_t v24 = 4 * v20;
        BOOL v25 = *(char **)v19;
        while (*(_DWORD *)v25 != 65625)
        {
          v25 += 4;
          v24 -= 4;
          if (!v24)
          {
            BOOL v25 = &v21[4 * v20];
            break;
          }
        }
        unint64_t v13 = (unint64_t)(v25 - v21) >> 2;
      }
    }
    else
    {
      LOWORD(v13) = 0;
    }
    if (v20 != (unsigned __int16)v13) {
      break;
    }
LABEL_18:
    v10 += 2;
    if (v10 == v11)
    {
      char v32 = 0;
      goto LABEL_54;
    }
  }
  char v32 = 1;
LABEL_54:
  uint64_t v12 = v9[18];
LABEL_55:
  uint64_t v33 = v9[24];
  unint64_t v34 = (std::__shared_weak_count *)v9[19];
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v9[23];
  uint64_t v36 = operator new(0xE8uLL);
  v36[1] = 0;
  v36[2] = 0;
  *uint64_t v36 = &unk_1EF57F990;
  unint64_t v37 = (char *)(v36 + 3);
  v36[3] = &unk_1EF558F70;
  *((_DWORD *)v36 + 8) = atomic_fetch_add(gdc::LayerData::nextId(void)::idGenerator, 1u) + 1;
  *((unsigned char *)v36 + 40) = *(unsigned char *)a1;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v36 + 6), a1 + 8);
  *((unsigned char *)v36 + 136) = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    *((_DWORD *)v36 + 35) = *(_DWORD *)(a1 + 100);
    *((unsigned char *)v36 + 136) = 1;
  }
  v36[18] = *(void *)(a1 + 104);
  v36[19] = 0;
  *((unsigned char *)v36 + 184) = 1;
  v36[21] = 0;
  v36[22] = 0;
  v36[20] = 0;
  v36[3] = &unk_1EF5316F8;
  v36[24] = v33;
  v36[25] = v12;
  v36[26] = v34;
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    v36[27] = v35;
    *((unsigned char *)v36 + 224) = v32;
    *a3 = v37;
    a3[1] = v36;
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  else
  {
    v36[27] = v35;
    *((unsigned char *)v36 + 224) = v32;
    *a3 = v37;
    a3[1] = v36;
  }
  if ((v38 & 1) == 0 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
}

uint64_t gms::LinearResolver::attributesForIndex(gms::LinearResolver *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v2) >> 3);
  uint64_t v4 = v2 + 24 * a2;
  if (v3 <= a2) {
    return 0;
  }
  else {
    return v4;
  }
}

void md::DaVinciCenterLineRoadsLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  BOOL v40 = 0;
  unint64_t v41 = 0;
  uint64_t v9 = (unsigned __int16 *)*a3;
  uint8x8_t v8 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v8)
  {
    while (*(unsigned __int16 *)(a1 + 584) != *v9)
    {
      v9 += 24;
      if (v9 == v8) {
        goto LABEL_16;
      }
    }
  }
  if (v9 != v8)
  {
    std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&v39, *((void *)v9 + 4));
    for (uint64_t i = (void *)*((void *)v9 + 3); i; uint64_t i = (void *)*i)
    {
      uint64_t v11 = i[14];
      uint64_t v12 = (std::__shared_weak_count *)i[15];
      uint64_t v44 = v11;
      BOOL v45 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = v40;
      if ((unint64_t)v40 < v41)
      {
        *(void *)BOOL v40 = v11;
        *((void *)v13 + 1) = v12;
        BOOL v40 = v13 + 16;
      }
      else
      {
        double v14 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>((char **)&v39, (uint64_t)&v44);
        uint64_t v15 = v45;
        BOOL v40 = v14;
        if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
LABEL_16:
  int v16 = *(unsigned __int16 *)(a1 + 32);
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  if (v39 == v40) {
    double v17 = *(int **)(a2 + 16);
  }
  else {
    double v17 = (int *)(*(void *)(*(void *)v39 + 8) + 8);
  }
  int v18 = *v17;
  uint64_t v19 = *(atomic_uchar **)(a1 + 824);
  if (v19)
  {
    md::ElevationRequestUpdater::getDsmResource(&v36, v19, a3);
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }
  sp_mut = std::__get_sp_mut((const void *)(a1 + 752));
  std::__sp_mut::lock(sp_mut);
  uint64_t v21 = *(void *)(a1 + 760);
  *(void *)&long long v35 = *(void *)(a1 + 752);
  *((void *)&v35 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)(a1 + 816), memory_order_acquire);
  unsigned int v23 = operator new(0x378uLL);
  v23[1] = 0;
  v23[2] = 0;
  *unsigned int v23 = &unk_1EF582518;
  int v24 = *(unsigned __int8 *)(a1 + 776);
  long long v43 = v35;
  BOOL v25 = *(void **)(a1 + 768);
  uint64_t v26 = *(void *)(a1 + 808);
  if (!v26)
  {
    uint64_t v27 = 0;
    goto LABEL_28;
  }
  if (v26 != a1 + 784)
  {
    uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v26 + 16))(*(void *)(a1 + 808));
LABEL_28:
    size_t v46 = (uint64_t *)v27;
    goto LABEL_30;
  }
  size_t v46 = &v44;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)(a1 + 784) + 24))(a1 + 784, &v44);
LABEL_30:
  int v28 = v18 & 0xF0;
  int8x8_t v29 = (std::__shared_weak_count *)v37;
  v42[0] = v36;
  v42[1] = v37;
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  md::DaVinciCenterLineRoadsTileData::DaVinciCenterLineRoadsTileData((uint64_t)(v23 + 3), v16, a2, (uint64_t)__p, (uint64_t)&v39, v28 != 0, v24 != 0, (uint64_t *)&v43, v25, (uint64_t)&v44, explicit & 1, v42);
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (v46 == &v44)
  {
    (*(void (**)(uint64_t *))(v44 + 32))(&v44);
    unint64_t v30 = (std::__shared_weak_count *)*((void *)&v43 + 1);
    if (!*((void *)&v43 + 1)) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v46) {
    (*(void (**)(uint64_t *))(*v46 + 40))(v46);
  }
  unint64_t v30 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1))
  {
LABEL_41:
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
LABEL_43:
  *a4 = v23 + 3;
  a4[1] = v23;
  unsigned int v31 = (std::__shared_weak_count *)v37;
  if (v37 && !atomic_fetch_add((atomic_ullong *volatile)(v37 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  char v32 = (char *)v39;
  if (v39)
  {
    uint64_t v33 = v40;
    if (v40 != v39)
    {
      do
      {
        unint64_t v34 = (std::__shared_weak_count *)*((void *)v33 - 1);
        if (v34)
        {
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      char v32 = (char *)v39;
    }
    operator delete(v32);
  }
}

void sub_1A1A42BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
}

void gdc::LayerDataSource::populateLoadMetadataListFromMap(uint64_t a1, uint64_t a2, void **a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(void **)(v4 + 24);
      if (v5)
      {
        uint64_t v6 = (char *)a3[1];
        do
        {
          uint64_t v9 = v5[14];
          long long v22 = *(_OWORD *)(v9 + 120);
          uint64_t v23 = *(void *)(v9 + 136);
          unint64_t v10 = (unint64_t)a3[2];
          if ((unint64_t)v6 < v10)
          {
            long long v7 = *(_OWORD *)(v9 + 120);
            *((void *)v6 + 2) = *(void *)(v9 + 136);
            *(_OWORD *)uint64_t v6 = v7;
            uint8x8_t v8 = v6 + 24;
          }
          else
          {
            uint64_t v11 = (char *)*a3;
            unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*a3) >> 3);
            unint64_t v13 = v12 + 1;
            if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v11) >> 3);
            if (2 * v14 > v13) {
              unint64_t v13 = 2 * v14;
            }
            if (v14 >= 0x555555555555555) {
              unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v15 = v13;
            }
            if (v15)
            {
              if (v15 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              int v16 = (char *)operator new(24 * v15);
            }
            else
            {
              int v16 = 0;
            }
            double v17 = &v16[24 * v12];
            *(_OWORD *)double v17 = v22;
            *((void *)v17 + 2) = v23;
            int v18 = v17;
            if (v6 != v11)
            {
              do
              {
                long long v19 = *(_OWORD *)(v6 - 24);
                *((void *)v18 - 1) = *((void *)v6 - 1);
                *(_OWORD *)(v18 - 24) = v19;
                v18 -= 24;
                v6 -= 24;
              }
              while (v6 != v11);
              uint64_t v6 = (char *)*a3;
            }
            uint64_t v20 = &v16[24 * v15];
            uint8x8_t v8 = v17 + 24;
            *a3 = v18;
            a3[1] = v17 + 24;
            a3[2] = v20;
            if (v6) {
              operator delete(v6);
            }
          }
          a3[1] = v8;
          uint64_t v5 = (void *)*v5;
          uint64_t v6 = v8;
        }
        while (v5);
      }
      v4 += 48;
    }
    while (v4 != a2);
  }
}

uint64_t std::__function::__func<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType),std::allocator<BOOL (*)(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>,BOOL ()(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5910E0;
  a2[1] = v2;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2md37DaVinciCenterLineRoadsLayerDataSourceC1ENS2_11MapDataTypeEtPN3gdc14LayerDataStoreERNS5_23ResourceStatusContainerEP17VKSharedResourcesPN3geo9TaskQueueEbONS_10unique_ptrINS2_23ElevationRequestUpdaterENS_14default_deleteISG_EEEENS_8functionIFbRKNS2_21GEOVectorTileResourceERK20GeoCodecsRoadFeatureS4_EEEEd_UlSO_SR_S4_E_NS_9allocatorISU_EESS_E7__cloneEPNS0_6__baseISS_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF58F568;
}

void std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v4 = *(char **)(a1 + 8);
    uint64_t v5 = 16 * a2;
    uint64_t v6 = (char *)operator new(16 * a2);
    long long v7 = &v6[v5];
    uint8x8_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
      }
      while (v4 != v2);
      uint64_t v2 = *(char **)a1;
      uint64_t v11 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      for (*(void *)(a1 + 16) = v7; v11 != v2; v11 -= 16)
      {
        unint64_t v12 = (std::__shared_weak_count *)*((void *)v11 - 1);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void md::SelectedLabelLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  memset(__p, 0, sizeof(__p));
  uint8x8_t v8 = (unsigned __int16 *)*a3;
  uint64_t v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9) {
        goto LABEL_12;
      }
    }
  }
  if (v8 == v9 || *((void *)v8 + 4) != 1)
  {
LABEL_12:
    uint64_t v12 = 0;
LABEL_13:
    uint64_t v36 = v12;
    uint64_t v37 = 0;
    if (v12) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v10 = *((void *)v8 + 3);
  uint64_t v12 = *(void *)(v10 + 112);
  uint64_t v11 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v11) {
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v36 = v12;
  uint64_t v37 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = v36;
    if (v36) {
      goto LABEL_14;
    }
LABEL_10:
    unint64_t v13 = (char *)operator new(0x2F8uLL);
    *(_OWORD *)(v13 + 8) = 0u;
    *(void *)unint64_t v13 = &unk_1EF57FC30;
    long long v33 = 0u;
    *a4 = md::LabelLayerData::LabelLayerData((void *)v13 + 3, a2, &v33, (uint64_t)__p);
    a4[1] = v13;
    unint64_t v14 = v37;
    if (!v37) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  uint64_t v12 = v36;
  if (!v36) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v34 = 0;
  long long v35 = 0;
  unint64_t v15 = *(std::__shared_weak_count **)(a1 + 816);
  if (!v15)
  {
    int v16 = 0;
    goto LABEL_24;
  }
  int v16 = std::__shared_weak_count::lock(v15);
  long long v35 = v16;
  if (!v16 || (uint64_t v34 = *(void *)(a1 + 808)) == 0)
  {
LABEL_24:
    *a4 = 0;
    a4[1] = 0;
    if (v16) {
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  double v17 = *(int32x2_t **)(a2 + 16);
  __int32 v18 = v17[1].i32[0];
  LOBYTE(v33) = -1;
  BYTE1(v33) = v18;
  *(int32x2_t *)((char *)&v33 + 4) = vrev64_s32(*v17);
  unsigned int v31 = 0;
  char v32 = 0;
  long long v19 = *(std::__shared_weak_count **)(*(void *)(v12 + 8) + 16);
  if (v19)
  {
    std::mutex::lock((std::mutex *)(a1 + 824));
    uint64_t v20 = *(float **)(a1 + 888);
    if (!v20 || v19 != *(std::__shared_weak_count **)v20)
    {
      *a4 = 0;
      a4[1] = 0;
      std::mutex::unlock((std::mutex *)(a1 + 824));
      goto LABEL_38;
    }
    long long v19 = *(std::__shared_weak_count **)(a1 + 896);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v31 = v20;
    char v32 = v19;
    std::mutex::unlock((std::mutex *)(a1 + 824));
  }
  else
  {
    uint64_t v20 = 0;
  }
  unsigned __int8 v21 = md::LabelLayerDataSource::toLabelTileType(*(unsigned __int16 *)(a1 + 32));
  long long v22 = (char *)operator new(0x170uLL);
  uint64_t v23 = (std::__shared_weak_count *)v22;
  uint64_t v24 = v12 + 144;
  *((void *)v22 + 1) = 0;
  BOOL v25 = (atomic_ullong *)(v22 + 8);
  *((void *)v22 + 2) = 0;
  *(void *)long long v22 = &unk_1EF582AC8;
  uint64_t v26 = v22 + 24;
  v39[0] = v20;
  v39[1] = (float *)v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::LabelTile::LabelTile((unsigned __int8 *)v22 + 24, (uint64_t)&v33, v24, v21, &v34, 0, v39, 0);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v30[0] = v26;
  v30[1] = v23;
  uint64_t v27 = operator new(0x2F8uLL);
  v27[1] = 0;
  v27[2] = 0;
  *uint64_t v27 = &unk_1EF57FC30;
  *a4 = md::LabelLayerData::LabelLayerData(v27 + 3, a2, v30, (uint64_t)__p);
  a4[1] = v27;
  if (!atomic_fetch_add(v25, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  int v28 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_38:
  int v16 = v35;
  if (v35)
  {
LABEL_39:
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      unint64_t v14 = v37;
      if (!v37) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
  }
LABEL_40:
  unint64_t v14 = v37;
  if (!v37) {
    goto LABEL_42;
  }
LABEL_41:
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    int8x8_t v29 = __p[0];
    if (!__p[0]) {
      return;
    }
    goto LABEL_43;
  }
LABEL_42:
  int8x8_t v29 = __p[0];
  if (!__p[0]) {
    return;
  }
LABEL_43:
  operator delete(v29);
}

void sub_1A1A433FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a18);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *md::LabelLayerData::LabelLayerData(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (*a3)
  {
    uint64_t v6 = *(uint64_t **)(*a3 + 24);
    long long v7 = (std::__shared_weak_count *)v6[1];
    uint64_t v10 = *v6;
    uint64_t v11 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v7 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  md::MapTileData::MapTileData((uint64_t)a1, a2, a4, &v10, 1);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *a1 = &unk_1EF533EA0;
  a1[79] = &unk_1EF533EE0;
  a1[90] = *a3;
  uint64_t v8 = a3[1];
  a1[91] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1A1A435E8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::LabelLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (unsigned __int16 *)*a3;
  uint64_t v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9) {
        goto LABEL_10;
      }
    }
  }
  if (v8 == v9 || *((void *)v8 + 4) != 1)
  {
LABEL_10:
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  uint64_t v10 = *((void *)v8 + 3);
  uint64_t v11 = *(void *)(v10 + 112);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
  {
LABEL_11:
    uint64_t v30 = v11;
    unsigned int v31 = 0;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = v11;
  unsigned int v31 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_12:
  uint64_t v28 = 0;
  int8x8_t v29 = 0;
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 816);
  if (v13)
  {
    unint64_t v14 = std::__shared_weak_count::lock(v13);
    int8x8_t v29 = v14;
    if (v14)
    {
      uint64_t v28 = *(void *)(a1 + 808);
      if (v28)
      {
        memset(__p, 0, sizeof(__p));
        gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
        unint64_t v15 = *(int32x2_t **)(a2 + 16);
        __int32 v16 = v15[1].i32[0];
        v25[0] = v15[1].i32[1];
        v25[1] = v16;
        int32x2_t v26 = vrev64_s32(*v15);
        uint64_t v17 = v30;
        int v18 = *(unsigned __int16 *)(a1 + 32);
        long long v19 = (std::__shared_weak_count *)operator new(0x170uLL);
        unsigned __int8 v20 = md::LabelLayerDataSource::toLabelTileType(v18);
        *(_OWORD *)&v19->__shared_owners_ = 0u;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582AC8;
        long long v32 = 0u;
        md::LabelTile::LabelTile((unsigned __int8 *)&v19[1], (uint64_t)v25, v17 + 144, v20, &v28, 0, (float **)&v32, 0);
        v24[0] = v21;
        v24[1] = v19;
        long long v22 = operator new(0x2F8uLL);
        v22[1] = 0;
        __int16 v22[2] = 0;
        *long long v22 = &unk_1EF57FC30;
        *a4 = md::LabelLayerData::LabelLayerData(v22 + 3, a2, v24, (uint64_t)__p);
        a4[1] = v22;
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        if (__p[0]) {
          operator delete(__p[0]);
        }
        unint64_t v14 = v29;
        if (!v29) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  *a4 = 0;
  a4[1] = 0;
  if (!v14) {
    goto LABEL_24;
  }
LABEL_23:
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    uint64_t v23 = v31;
    if (!v31) {
      return;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v23 = v31;
  if (!v31) {
    return;
  }
LABEL_25:
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1A1A43944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t md::LabelLayerDataSource::toLabelTileType(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 13:
      uint64_t result = 1;
      break;
    case 19:
      uint64_t result = 3;
      break;
    case 20:
      uint64_t result = 2;
      break;
    case 21:
      uint64_t result = 9;
      break;
    case 22:
      uint64_t result = 10;
      break;
    case 23:
      uint64_t result = 11;
      break;
    case 24:
      uint64_t result = 12;
      break;
    case 25:
      uint64_t result = 5;
      break;
    case 26:
      uint64_t result = 6;
      break;
    case 66:
      uint64_t result = 13;
      break;
    case 69:
      uint64_t result = 16;
      break;
    case 73:
      uint64_t result = 14;
      break;
    case 74:
      uint64_t result = 17;
      break;
    case 80:
      uint64_t result = 15;
      break;
    default:
      return result;
  }
  return result;
}

void md::InjectedFeaturesLayerDataSource::createLayerData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  memset(v8, 0, sizeof(v8));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v8);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 584));
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *(void *)(a1 + 592);
  uint64_t v6 = *(void *)(a1 + 584);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  operator new();
}

void sub_1A1A43D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  if (a33 != -1) {
    ((void (*)(uint64_t, char *))off_1EF58F7E8[a33])(v33 - 49, &a21);
  }
  a33 = -1;
  if (a11 != a13) {
    free(a11);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33 - 120);
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100]((gdc::Registry **)(v33 - 104));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33 - 96);
  long long v35 = *(void **)(v33 - 80);
  if (v35) {
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void md::RegistryManager::addRegistry(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1) {
    dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_9556);
  }
  uint64_t v6 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int16 *)(*a3 + 40);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v24 = 0;
    v25[0] = __p;
    v25[1] = __p;
    uint64_t v8 = *(unsigned int *)(a2 + 96);
    if (v8 == -1)
    {
      std::__throw_bad_variant_access[abi:nn180100]();
      __break(1u);
      return;
    }
    int32x2_t v26 = v25;
    ((void (*)(void **, uint64_t))off_1EF58FA68[v8])(&v26, a2);
    uint64_t v9 = __p;
    if (v24 < 0) {
      uint64_t v9 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67109378;
    int v28 = v7;
    __int16 v29 = 2080;
    uint64_t v30 = v9;
    _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_DEBUG, "Queuing incoming registry:%d for key:%s", buf, 0x12u);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
  }

  std::mutex::lock((std::mutex *)(a1 + 80));
  uint64_t v11 = (void **)(a1 + 216);
  uint64_t v10 = *(char **)(a1 + 216);
  if (!v10)
  {
    uint64_t v12 = (void **)(a1 + 216);
    goto LABEL_31;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v12 = (void **)v10;
      unint64_t v13 = v10 + 32;
      unint64_t v14 = *((unsigned int *)v10 + 32);
      unint64_t v15 = *(unsigned int *)(a2 + 96);
      if (v14 == -1)
      {
        if (v15 == 0xFFFFFFFF) {
          goto LABEL_28;
        }
        goto LABEL_14;
      }
      if (v15 != 0xFFFFFFFF && v15 >= v14) {
        break;
      }
LABEL_23:
      uint64_t v10 = (char *)*v12;
      uint64_t v11 = v12;
      if (!*v12) {
        goto LABEL_31;
      }
    }
    if (v15 > v14) {
      break;
    }
    __p[0] = buf;
    if (((uint64_t (*)(void **, uint64_t, char *))off_1EF58FAA8[v15])(__p, a2, v13)) {
      goto LABEL_23;
    }
    unint64_t v15 = *(unsigned int *)(a2 + 96);
    if (v15 == 0xFFFFFFFF) {
      goto LABEL_28;
    }
LABEL_14:
    unint64_t v14 = *((unsigned int *)v12 + 32);
    if (v14 != -1) {
      break;
    }
LABEL_11:
    uint64_t v11 = v12 + 1;
    uint64_t v10 = (char *)v12[1];
    if (!v10) {
      goto LABEL_31;
    }
  }
  if (v14 < v15) {
    goto LABEL_11;
  }
  if (v14 <= v15)
  {
    __p[0] = buf;
    if (((unsigned int (*)(void **, char *, uint64_t))off_1EF58FAA8[v14])(__p, v13, a2)) {
      goto LABEL_11;
    }
  }
LABEL_28:
  uint64_t v17 = (char *)*v11;
  if (!*v11)
  {
LABEL_31:
    uint64_t v17 = (char *)operator new(0x90uLL);
    v17[32] = 0;
    *((_DWORD *)v17 + 32) = -1;
    uint64_t v18 = *(unsigned int *)(a2 + 96);
    if (v18 != -1)
    {
      ((void (*)(uint8_t *, char *, uint64_t))off_1EF58FA88[v18])(buf, v17 + 32, a2);
      *((_DWORD *)v17 + 32) = v18;
    }
    *((void *)v17 + 17) = 0;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v12;
    *uint64_t v11 = v17;
    uint64_t v19 = **(void **)(a1 + 208);
    unsigned __int8 v20 = (uint64_t *)v17;
    if (v19)
    {
      *(void *)(a1 + 208) = v19;
      unsigned __int8 v20 = (uint64_t *)*v11;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), v20);
    ++*(void *)(a1 + 224);
  }
  uint64_t v21 = *a3;
  *a3 = 0;
  long long v22 = (gdc::Registry *)*((void *)v17 + 17);
  *((void *)v17 + 17) = v21;
  if (v22)
  {
    gdc::Registry::~Registry(v22);
    MEMORY[0x1A6239270]();
  }
  std::mutex::unlock((std::mutex *)(a1 + 80));
}

void sub_1A1A44160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v18 = v15[32];
  if (v18 != -1) {
    ((void (*)(void **, uint64_t))off_1EF58FA78[v18])(&__p, v16);
  }
  operator delete(v15);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(_DWORD *)a2 >= *(_DWORD *)a3;
  if (*(_DWORD *)a2 == *(_DWORD *)a3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
    unsigned int v5 = *(unsigned __int16 *)(a3 + 8);
    BOOL v3 = v4 >= v5;
    if (v4 == v5) {
      return gdc::GenericKey::operator<(*(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 + 16), *(void *)(a3 + 24));
    }
  }
  return !v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return gdc::LayerDataKey::LayerDataKey((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

void md::DaVinciElevationRasterLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  int v7 = (unsigned __int16 *)*a3;
  uint64_t v8 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v8)
  {
    while (*v7 != *(unsigned __int16 *)(a1 + 584))
    {
      v7 += 24;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
  }
  if (v7 == v8 || *((void *)v7 + 4) != 1)
  {
LABEL_10:
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v9 = *((void *)v7 + 3);
  uint64_t v10 = *(void *)(v9 + 112);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (!v11)
  {
LABEL_11:
    uint64_t v36 = v10;
    uint64_t v37 = 0;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_12:
  uint64_t v12 = v36;
  unint64_t v13 = (_DWORD *)geo::codec::VectorTile::elevationRasterPng(*(geo::codec::VectorTile **)(v36 + 144));
  unsigned int v14 = geo::codec::VectorTile::elevationRasterByteCount(*(geo::codec::VectorTile **)(v36 + 144));
  v34[0] = 0;
  v34[1] = 0;
  uint64_t v35 = 0;
  size_t v32 = 0;
  size_t v33 = 0;
  if (md::ElevationRaster::decodePngElevationRaster(v13, v14, (char **)v34, &v33, &v32))
  {
    uint64_t v29 = a2;
    unint64_t v15 = *(int32x2_t **)(a2 + 16);
    int32x2_t v16 = *v15;
    __int32 v18 = v15[1].i32[0];
    __int32 v17 = v15[1].i32[1];
    int v19 = geo::codec::VectorTile::maxElevationInMeters(*(geo::codec::VectorTile **)(v12 + 144));
    int v20 = geo::codec::VectorTile::minElevationInMeters(*(geo::codec::VectorTile **)(v12 + 144));
    char v21 = geo::codec::VectorTile::zResolutionBits(*(geo::codec::VectorTile **)(v12 + 144));
    __int16 v22 = geo::codec::VectorTile::minElevationInMeters(*(geo::codec::VectorTile **)(v12 + 144));
    uint64_t v23 = (std::__shared_weak_count *)operator new(0x88uLL);
    v23[1].std::__shared_count = *(std::__shared_count *)v34;
    v23->__shared_owners_ = 0;
    v23->__shared_weak_owners_ = 0;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FE98;
    size_t v25 = v32;
    size_t v24 = v33;
    v23[1].__shared_weak_owners_ = v35;
    v34[0] = 0;
    v34[1] = 0;
    uint64_t v35 = 0;
    LOBYTE(v23[2].__vftable) = 16;
    v23[2].__shared_owners_ = v24;
    v23[2].__shared_weak_owners_ = v25;
    *(float *)&v23[3].__vftable = (float)(v19 - v20) / (float)(1 << (v21 - 1));
    WORD2(v23[3].__vftable) = v22;
    LOBYTE(v23[3].__shared_owners_) = v17;
    BYTE1(v23[3].__shared_owners_) = v18;
    *(int32x2_t *)((char *)&v23[3].__shared_owners_ + 4) = vrev64_s32(v16);
    LOWORD(v23[4].__shared_owners_) = 0;
    v23[4].__shared_weak_owners_ = 0;
    v23[5].__vftable = 0;
    LOBYTE(v23[5].__shared_owners_) = 0;
    __p[3] = &v23[1];
    uint64_t v31 = v23;
    memset(__p, 0, 24);
    gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
    v16.i32[0] = geo::codec::VectorTile::tileSizeInMeters(*(geo::codec::VectorTile **)(v12 + 144));
    int32x2_t v26 = operator new(0x300uLL);
    v26[1] = 0;
    v26[2] = 0;
    void *v26 = &unk_1EF581478;
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    v38[0] = 0;
    v38[1] = 0;
    md::MapTileData::MapTileData((uint64_t)(v26 + 3), v29, (uint64_t)__p, v38, 1);
    v26[3] = &unk_1EF536C68;
    v26[82] = &unk_1EF536CD0;
    v26[3] = &unk_1EF541330;
    v26[82] = &unk_1EF541398;
    v26[93] = v23 + 1;
    v26[94] = v23;
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    *((_DWORD *)v26 + 190) = v16.i32[0];
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    *a4 = v26 + 3;
    a4[1] = v26;
    if (__p[0]) {
      operator delete(__p[0]);
    }
    uint64_t v27 = v31;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if (v34[0]) {
    operator delete(v34[0]);
  }
  int v28 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
}

void sub_1A1A44658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::VectorTile::minElevationInMeters(geo::codec::VectorTile *this)
{
  return *((__int16 *)this + 1433);
}

uint64_t geo::codec::VectorTile::maxElevationInMeters(geo::codec::VectorTile *this)
{
  return *((__int16 *)this + 1432);
}

float geo::codec::VectorTile::tileSizeInMeters(geo::codec::VectorTile *this)
{
  return *((float *)this + 717);
}

uint64_t geo::codec::VectorTile::zResolutionBits(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1436);
}

uint64_t geo::codec::VectorTile::elevationRasterByteCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 719);
}

uint64_t geo::codec::VectorTile::elevationRasterPng(geo::codec::VectorTile *this)
{
  return *((void *)this + 360);
}

BOOL md::ElevationRaster::decodePngElevationRaster(_DWORD *data, size_t size, char **a3, size_t *a4, size_t *a5)
{
  BOOL v5 = 0;
  if (data && size)
  {
    if (*data != 1196314761 || data[1] != 169478669) {
      return 0;
    }
    if (md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::onceToken != -1) {
      dispatch_once(&md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::onceToken, &__block_literal_global_38889);
    }
    uint64_t v11 = CGDataProviderCreateWithData(0, data, size, 0);
    if (!v11) {
      return 0;
    }
    uint64_t v12 = v11;
    CGImageSourceRef v13 = CGImageSourceCreateWithDataProvider(v11, (CFDictionaryRef)md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::options);
    CGDataProviderRelease(v12);
    if (!v13) {
      return 0;
    }
    if (!CGImageSourceGetCount(v13))
    {
      CFRelease(v13);
      return 0;
    }
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v13, 0, (CFDictionaryRef)md::ElevationRaster::decodePngElevationRaster(unsigned char const*,unsigned long,std::vector<unsigned char> &,unsigned long &,unsigned long &)::options);
    CFRelease(v13);
    if (ImageAtIndex)
    {
      CGImageGetImageProvider();
      ColorSpace = CGImageGetColorSpace(ImageAtIndex);
      *a4 = CGImageGetWidth(ImageAtIndex);
      *a5 = CGImageGetHeight(ImageAtIndex);
      size_t BytesPerRow = CGImageGetBytesPerRow(ImageAtIndex);
      size_t BitsPerComponent = CGImageGetBitsPerComponent(ImageAtIndex);
      if (CGColorSpaceGetNumberOfComponents(ColorSpace) == 1
        && (CGImageGetBitmapInfo(ImageAtIndex),
            uint64_t v18 = CGImageProviderCopyImageBlockSetWithOptions(),
            CGImageBlockSetGetPixelSize(),
            v18))
      {
        if (CGImageBlockSetGetCount() == 1 && CGImageBlockSetGetImageBlock())
        {
          int v19 = (char *)CGImageBlockGetData();
          if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelIndexed)
          {
            BaseColorSpace = CGColorSpaceGetBaseColorSpace(ColorSpace);
            CGColorSpaceGetNumberOfComponents(BaseColorSpace);
            CGColorSpaceGetColorTableCount(ColorSpace);
            operator new[]();
          }
          uint64_t v22 = CGImageBlockGetBytesPerRow();
          std::vector<unsigned char>::resize((uint64_t)a3, *a5 * BytesPerRow);
          uint64_t v23 = *a3;
          size_t v24 = *a5;
          if (v22 == BytesPerRow)
          {
            memcpy(v23, v19, v24 * BytesPerRow);
          }
          else if (v24)
          {
            size_t v25 = 0;
            unsigned int v26 = 1;
            do
            {
              memcpy(&v23[v25 * BytesPerRow], &v19[v25 * v22], BytesPerRow);
              size_t v25 = v26++;
            }
            while (*a5 > v25);
          }
          BOOL v5 = ((BitsPerComponent - 8) & 0xFFFFFFFFFFFFFFF7) == 0;
        }
        else
        {
          BOOL v5 = 0;
        }
        CGImageBlockSetRelease();
      }
      else
      {
        BOOL v5 = 0;
      }
      CGImageRelease(ImageAtIndex);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void std::vector<unsigned char>::resize(uint64_t a1, unint64_t a2)
{
  BOOL v5 = *(char **)a1;
  unsigned int v4 = *(char **)(a1 + 8);
  unint64_t v6 = (unint64_t)&v4[-*(void *)a1];
  size_t v7 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 - (uint64_t)v4 >= v7)
    {
      bzero(*(void **)(a1 + 8), a2 - v6);
      *(void *)(a1 + 8) = &v4[v7];
      return;
    }
    if ((a2 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v9 = v8 - (void)v5;
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t v12 = (char *)operator new(v11);
    CGImageSourceRef v13 = &v12[v6];
    unsigned int v14 = &v12[v11];
    unint64_t v15 = &v12[a2];
    bzero(&v12[v6], v7);
    if (v4 == v5) {
      goto LABEL_29;
    }
    if (v6 < 8 || (unint64_t)(v5 - v12) < 0x20) {
      goto LABEL_26;
    }
    if (v6 >= 0x20)
    {
      unint64_t v16 = v6 & 0xFFFFFFFFFFFFFFE0;
      __int32 v17 = v4 - 16;
      uint64_t v18 = &v12[v4 - 16 - v5];
      unint64_t v19 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)uint64_t v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v6 == v16) {
        goto LABEL_28;
      }
      if ((v6 & 0x18) == 0)
      {
        v13 -= v16;
        v4 -= v16;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v21 = v16 - (v6 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = &v4[-v16 - 8];
    uint64_t v23 = (char *)(v22 - v5);
    do
    {
      uint64_t v24 = *(void *)v22;
      v22 -= 8;
      *(void *)&v23[(void)v12] = v24;
      v23 -= 8;
      v21 += 8;
    }
    while (v21);
    if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_28;
    }
    v13 -= v6 & 0xFFFFFFFFFFFFFFF8;
    v4 -= v6 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
    size_t v25 = v13 - 1;
    do
    {
      char v26 = *--v4;
      *v25-- = v26;
    }
    while (v4 != v5);
LABEL_28:
    unsigned int v4 = v5;
    CGImageSourceRef v13 = v12;
LABEL_29:
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (v4)
    {
      operator delete(v4);
    }
    return;
  }
  if (a2 < v6) {
    *(void *)(a1 + 8) = &v5[a2];
  }
}

{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  long long v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t vars8;

  BOOL v5 = *(char **)a1;
  unsigned int v4 = *(char **)(a1 + 8);
  unint64_t v6 = (unint64_t)&v4[-*(void *)a1];
  size_t v7 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 - (uint64_t)v4 >= v7)
    {
      bzero(*(void **)(a1 + 8), a2 - v6);
      *(void *)(a1 + 8) = &v4[v7];
      return;
    }
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v8 - (void)v5;
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t v12 = (char *)operator new(v11);
    CGImageSourceRef v13 = &v12[v6];
    unsigned int v14 = &v12[v11];
    unint64_t v15 = &v12[a2];
    bzero(&v12[v6], v7);
    if (v4 == v5) {
      goto LABEL_29;
    }
    if (v6 >= 8 && (unint64_t)(v5 - v12) >= 0x20)
    {
      if (v6 < 0x20)
      {
        unint64_t v16 = 0;
        goto LABEL_21;
      }
      unint64_t v16 = v6 & 0xFFFFFFFFFFFFFFE0;
      __int32 v17 = v4 - 16;
      uint64_t v18 = &v12[v4 - 16 - v5];
      unint64_t v19 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)uint64_t v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v6 == v16) {
        goto LABEL_28;
      }
      if ((v6 & 0x18) != 0)
      {
LABEL_21:
        v13 -= v6 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v21 = &v4[-v16 - 8];
        uint64_t v22 = (char *)(v21 - v5);
        uint64_t v23 = v16 - (v6 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v24 = *(void *)v21;
          v21 -= 8;
          *(void *)&v22[(void)v12] = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        v4 -= v6 & 0xFFFFFFFFFFFFFFF8;
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
      v13 -= v16;
      v4 -= v16;
    }
LABEL_26:
    size_t v25 = v13 - 1;
    do
    {
      char v26 = *--v4;
      *v25-- = v26;
    }
    while (v4 != v5);
LABEL_28:
    unsigned int v4 = v5;
    CGImageSourceRef v13 = v12;
LABEL_29:
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (v4)
    {
      operator delete(v4);
    }
    return;
  }
  if (a2 < v6) {
    *(void *)(a1 + 8) = &v5[a2];
  }
}

void md::MuninAvailabilityDaVinciLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 30)
    {
      v5 += 48;
      if (v5 == v6) {
        goto LABEL_10;
      }
    }
  }
  if (v5 == v6 || *(void *)(v5 + 32) != 1)
  {
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v8 = *(void *)(v7 + 112);
  unint64_t v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9)
  {
LABEL_11:
    uint64_t v11 = v8;
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_12:
  uint64_t v10 = operator new(0x310uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *uint64_t v10 = &unk_1EF5812F0;
  *a3 = md::MuninAvailabilityData::MuninAvailabilityData((uint64_t)(v10 + 3), a1, (uint64_t *)(v11 + 144));
  a3[1] = (uint64_t)v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A1A44FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3gdc18LayerDataKeyIdPairEN2md19NonTiledRegistryKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void grl::TextLayerRenderer::~TextLayerRenderer(grl::TextLayerRenderer *this)
{
  grl::TextLayerRenderer::~TextLayerRenderer(this);
  JUMPOUT(0x1A6239270);
}

{
  const void *v2;
  const void *v3;
  uint64_t v4;

  *(void *)this = &unk_1EF5670F0;
  *((void *)this + 42) = &unk_1EF559338;
  uint64_t v2 = (const void *)*((void *)this + 43);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 39) = &unk_1EF559338;
  BOOL v3 = (const void *)*((void *)this + 40);
  if (v3) {
    CFRelease(v3);
  }
  if (*((unsigned char *)this + 200))
  {
    (**((void (***)(char *))this + 26))((char *)this + 208);
    *((unsigned char *)this + 200) = 0;
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  unsigned int v4 = *((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 40))(*((void *)this + 5), v4, *((void *)this + 4) - v4);
  }
}

void md::mun::MuninLogic::runBeforeLayout(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  v84[0] = &unk_1EF578A38;
  v84[1] = a2;
  v82[0] = &unk_1EF578A80;
  v82[1] = a2;
  uint64_t v83 = v82;
  uint64_t v87 = v86;
  uint64_t v85 = v84;
  v86[0] = &unk_1EF578A80;
  v86[1] = a2;
  _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEEclEv((uint64_t)v84);
  if (v83 == v82)
  {
    (*(void (**)(void *))(v82[0] + 32))(v82);
  }
  else if (v83)
  {
    (*(void (**)(void))(*v83 + 40))();
  }
  if (v85 == v84)
  {
    (*(void (**)(void *))(v84[0] + 32))(v84);
  }
  else if (v85)
  {
    (*(void (**)(void))(*v85 + 40))();
  }
  uint64_t v6 = **a3;
  uint64_t v7 = *(unsigned __int16 **)(v6 + 112);
  uint64_t v8 = *(unsigned __int16 **)(v6 + 120);
  if (v7 != v8)
  {
    int v9 = *(unsigned __int16 *)(v6 + 282);
    while (*v7 != v9)
    {
      v7 += 56;
      if (v7 == v8)
      {
        uint64_t v7 = v8;
        break;
      }
    }
  }
  uint64_t v10 = a3[1];
  uint64_t v11 = *((void *)v7 + 13);
  if (v11)
  {
    uint64_t v12 = a3[2];
    uint64_t v13 = *(void *)(a1 + 160);
    for (uint64_t i = *(void *)(a1 + 168); i != v13; i -= 16)
    {
      unint64_t v15 = *(std::__shared_weak_count **)(i - 8);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    *(void *)(a1 + 168) = v13;
    if (*(unsigned char *)v12)
    {
      gdc::LayerDataCollector::data((gdc::LayerDataCollector *)v81, *(unsigned __int16 **)(v11 + 24), *(unsigned __int16 **)(v11 + 32), 63);
      long long v16 = *(_OWORD *)v81;
      uint64_t v17 = *(void *)&v81[16];
      while (1)
      {
        uint64_t v18 = v16;
        if ((void)v16 == v17) {
          goto LABEL_54;
        }
        unint64_t v19 = *(void *)(v16 + 112);
        long long v20 = *(std::__shared_weak_count **)(v16 + 120);
        v80.n128_u64[0] = v19;
        v80.n128_u64[1] = (unint64_t)v20;
        if (v20)
        {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v21 = *(__n128 **)(a1 + 168);
          if ((unint64_t)v21 < *(void *)(a1 + 176))
          {
            v21->n128_u64[0] = v19;
            v21->n128_u64[1] = (unint64_t)v20;
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v22 = v21 + 1;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v23 = *(__n128 **)(a1 + 168);
          if ((unint64_t)v23 < *(void *)(a1 + 176))
          {
            v23->n128_u64[0] = v19;
            v23->n128_u64[1] = 0;
            uint64_t v22 = v23 + 1;
            goto LABEL_31;
          }
        }
        uint64_t v76 = *((void *)&v16 + 1);
        unint64_t v72 = v80.n128_u64[0];
        uint64_t v22 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 160, v80);
        long long v20 = (std::__shared_weak_count *)v80.n128_u64[1];
        *((void *)&v16 + 1) = v76;
LABEL_31:
        *(void *)(a1 + 168) = v22;
        if (v20)
        {
          if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v77 = *((void *)&v16 + 1);
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
            *((void *)&v16 + 1) = v77;
          }
        }
        uint64_t v24 = v18 + 144;
        if (v18 + 144 != *((void *)&v16 + 1))
        {
          while (!*(void *)(v24 + 112))
          {
            v24 += 144;
            if (v24 == *((void *)&v16 + 1))
            {
              uint64_t v24 = *((void *)&v16 + 1);
              break;
            }
          }
        }
        *(void *)&long long v16 = v24;
      }
    }
    gdc::LayerDataCollector::data((gdc::LayerDataCollector *)v81, *(unsigned __int16 **)(v11 + 24), *(unsigned __int16 **)(v11 + 32), 40);
    long long v25 = *(_OWORD *)v81;
    uint64_t v26 = *(void *)&v81[16];
    while (1)
    {
      uint64_t v27 = v25;
      if ((void)v25 == v26) {
        break;
      }
      unint64_t v28 = *(void *)(v25 + 112);
      uint64_t v29 = *(std::__shared_weak_count **)(v25 + 120);
      v80.n128_u64[0] = v28;
      v80.n128_u64[1] = (unint64_t)v29;
      if (v29)
      {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v30 = *(__n128 **)(a1 + 168);
        if ((unint64_t)v30 >= *(void *)(a1 + 176)) {
          goto LABEL_46;
        }
        v30->n128_u64[0] = v28;
        v30->n128_u64[1] = (unint64_t)v29;
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v31 = v30 + 1;
      }
      else
      {
        size_t v32 = *(__n128 **)(a1 + 168);
        if ((unint64_t)v32 >= *(void *)(a1 + 176))
        {
LABEL_46:
          uint64_t v78 = *((void *)&v25 + 1);
          unint64_t v72 = v80.n128_u64[0];
          uint64_t v31 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 160, v80);
          uint64_t v29 = (std::__shared_weak_count *)v80.n128_u64[1];
          *((void *)&v25 + 1) = v78;
          goto LABEL_47;
        }
        v32->n128_u64[0] = v28;
        v32->n128_u64[1] = 0;
        uint64_t v31 = v32 + 1;
      }
LABEL_47:
      *(void *)(a1 + 168) = v31;
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v79 = *((void *)&v25 + 1);
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        *((void *)&v25 + 1) = v79;
      }
      uint64_t v33 = v27 + 144;
      if (v27 + 144 != *((void *)&v25 + 1))
      {
        while (!*(void *)(v33 + 112))
        {
          v33 += 144;
          if (v33 == *((void *)&v25 + 1))
          {
            uint64_t v33 = *((void *)&v25 + 1);
            break;
          }
        }
      }
      *(void *)&long long v25 = v33;
    }
  }
LABEL_54:
  uint64_t v34 = +[VKDebugSettings sharedSettings];
  uint64_t v35 = v34;
  if (!*(unsigned char *)(a1 + 184) || [v34 muninAvailabilityOverride] || (uint64_t v39 = a2[11]) == 0)
  {
    BOOL v36 = [v35 muninAvailabilityOverride] == 2;
    goto LABEL_57;
  }
  BOOL v40 = *(float64x2_t **)(v39 + 16);
  uint64_t v41 = md::LayoutContext::frameState((md::LayoutContext *)a2);
  int32x2_t v42 = (int32x2_t)0x3F0000003F000000;
  __asm { FMOV            V3.2D, #0.5 }
  if (!(_NF ^ _VF | _ZF) && *(double *)(v41 + 496) > 0.0)
  {
    v48.f64[1] = *(float64_t *)(v41 + 496);
    v48.f64[0] = *(float64_t *)(v41 + 504);
    float64x2_t v49 = vaddq_f64(v48, v48);
    *(float32x2_t *)&v48.f64[0] = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)(v41 + 560)), v49));
    float64x2_t v50 = vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)(v41 + 568)), v49)));
    float64x2_t v51 = vcvtq_f64_f32(*(float32x2_t *)&v48.f64[0]);
    *(void *)&v52.f64[0] = *(_OWORD *)&vaddq_f64(vsubq_f64(_Q3, v51), v50);
    v52.f64[1] = vsubq_f64(vaddq_f64(v51, _Q3), v50).f64[1];
    int32x2_t v42 = (int32x2_t)vcvt_f32_f64(v52);
  }
  float64x2_t v74 = _Q3;
  float32_t v53 = 1.0 - *(float *)v42.i32;
  v54.i32[0] = vdup_lane_s32(v42, 1).u32[0];
  v54.f32[1] = v53;
  md::MapDataAccess::groundCoordinateForScreenPoint((uint64_t)&v80, a2[11], (uint64_t)(v10 + 1), 0, vmulq_f64(v40[23], vcvtq_f64_f32(v54)));
  unint64_t v73 = v80.n128_u64[1];
  long double v55 = tan(v80.n128_f64[0] * 0.5 + 0.785398163);
  long double v56 = log(v55);
  *(void *)&v57.f64[0] = v73;
  v57.f64[1] = v56;
  float64x2_t v58 = vmlaq_f64(v74, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v57);
  uint64_t v59 = *(uint64_t **)(a1 + 160);
  int v60 = *(uint64_t **)(a1 + 168);
  if (roundf(fmaxf(*((float *)v10 + 770) + *((float *)v10 + 768), 1.0)) >= 14.0)
  {
    if (v59 == v60) {
      goto LABEL_93;
    }
    char v66 = 0;
    int v67 = 0;
    double v68 = v58.f64[1];
    double v69 = 1.79769313e308;
    float64x2_t v75 = v58;
    do
    {
      md::MuninAvailabilityData::nearestAvailableRoadPoint((uint64_t)v81, *v59, v58.f64[0], v68);
      if (v81[0])
      {
        float64x2_t v71 = vsubq_f64(v75, *(float64x2_t *)&v81[8]);
        if (vaddvq_f64(vmulq_f64(v71, v71)) >= v69) {
          double v70 = 0.0;
        }
        else {
          double v70 = 1.0;
        }
        v58.f64[0] = v75.f64[0];
        if (v69 <= v70)
        {
          double v70 = v69;
        }
        else
        {
          if (!v67) {
            char v66 = 1;
          }
          int v67 = 1;
        }
      }
      else
      {
        double v70 = v69;
        v58.f64[0] = v75.f64[0];
      }
      v59 += 2;
      double v69 = v70;
    }
    while (v59 != v60);
    BOOL v36 = v66 != 0;
LABEL_57:
    uint64_t v37 = 2 * v36;
    goto LABEL_58;
  }
  if (v59 == v60)
  {
LABEL_93:
    uint64_t v37 = 0;
    goto LABEL_58;
  }
  uint64_t v37 = 1;
  while (1)
  {
    uint64_t v61 = *v59;
    int v62 = 1 << *(unsigned char *)(*v59 + 169);
    double v63 = -1.0 / (double)v62;
    float v64 = (v58.f64[0] + v63 * (double)*(int *)(*v59 + 176)) * (double)v62;
    if (*(float *)(*v59 + 744) <= v64 && *(float *)(v61 + 752) > v64)
    {
      float v65 = (v58.f64[1] + v63 * (double)(v62 + ~*(_DWORD *)(v61 + 172))) * (double)v62;
      if (*(float *)(v61 + 748) <= v65 && *(float *)(v61 + 756) > v65) {
        break;
      }
    }
    v59 += 2;
    if (v59 == v60) {
      goto LABEL_93;
    }
  }
LABEL_58:
  if (v37 != *(void *)(a1 + 152))
  {
    *(void *)(a1 + 152) = v37;
    *(void *)size_t v81 = v37;
    uint64_t v38 = *(void *)(a1 + 144);
    if (!v38)
    {
LABEL_95:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v38 + 48))(v38, v81);
  }

  if (!v87) {
    goto LABEL_95;
  }
  (*(void (**)(void *))(*v87 + 48))(v87);
  if (v87 == v86)
  {
    (*(void (**)(void *))(v86[0] + 32))(v86);
  }
  else if (v87)
  {
    (*(void (**)(void))(*v87 + 40))();
  }
}

void sub_1A1A459EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a29);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__1NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  BOOL v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MuninLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  BOOL v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MuninLogic", "", v5, 2u);
  }
}

__n128 gdc::LayerDataCollector::data(gdc::LayerDataCollector *this, unsigned __int16 *a2, unsigned __int16 *a3, int a4)
{
  if (a2 == a3) {
    goto LABEL_34;
  }
  os_signpost_id_t v4 = a2;
  while (*v4 != a4)
  {
    v4 += 16;
    if (v4 == a3) {
      goto LABEL_34;
    }
  }
  if (v4 == a3)
  {
LABEL_34:
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v12 = v18;
    uint64_t v13 = (__n128 *)v19;
    v18[0] = 0;
    v18[1] = 0;
  }
  else
  {
    uint64_t v5 = a2;
    while (*v5 != a4)
    {
      v5 += 16;
      if (v5 == a3)
      {
        uint64_t v5 = a3;
        break;
      }
    }
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = a2;
    while (*v7 != a4)
    {
      v7 += 16;
      if (v7 == a3)
      {
        uint64_t v7 = a3;
        break;
      }
    }
    uint64_t v8 = *((void *)v7 + 2);
    v17[0] = v6;
    v17[1] = v8;
    if (v6 != v8)
    {
      while (!*(void *)(v6 + 112))
      {
        v6 += 144;
        if (v6 == v8)
        {
          uint64_t v6 = v8;
          break;
        }
      }
      v17[0] = v6;
    }
    int v9 = a2;
    while (*v9 != a4)
    {
      v9 += 16;
      if (v9 == a3)
      {
        int v9 = a3;
        break;
      }
    }
    uint64_t v10 = *((void *)v9 + 2);
    while (*a2 != a4)
    {
      a2 += 16;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
    uint64_t v11 = *((void *)a2 + 2);
    v16[0] = v10;
    v16[1] = v11;
    if (v10 != v11)
    {
      while (!*(void *)(v10 + 112))
      {
        v10 += 144;
        if (v10 == v11)
        {
          uint64_t v10 = v11;
          break;
        }
      }
      v16[0] = v10;
    }
    uint64_t v12 = v16;
    uint64_t v13 = (__n128 *)v17;
  }
  __n128 result = *v13;
  long long v15 = *(_OWORD *)v12;
  *(__n128 *)this = *v13;
  *((_OWORD *)this + 1) = v15;
  return result;
}

void md::MapDataAccess::groundCoordinateForScreenPoint(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, float64x2_t a5)
{
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(double *)(v7 + 376) * *(double *)(v7 + 368) == 0.0)
  {
    *(int64x2_t *)a1 = vdupq_n_s64(0xC00921FB54442D18);
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    float64x2_t v10 = vsubq_f64(a5, vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(*(float64x2_t *)(v7 + 368), vcvtq_f64_f32(*(float32x2_t *)(v7 + 488))))));
    float64x2_t v11 = vdivq_f64(vaddq_f64(v10, v10), *(float64x2_t *)(v7 + 368));
    gdc::ViewDataAccess::worldRayFromScreenNormalizedPoint((uint64_t)&v28, v7, (double *)a3, v11.f64[0] + -1.0, 1.0 - v11.f64[1]);
    int v12 = *(unsigned __int8 *)(a2 + 9);
    if ((v12 - 1) < 2)
    {
      md::MapDataAccess::_globeGroundCoordinateForScreenPoint(a1, (unsigned __int8 *)a2, (double *)a3, v28.f64, a4);
    }
    else if (v12 == 3)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(void *)(a1 + 16) = *(void *)(a3 + 16);
    }
    else if (!*(unsigned char *)(a2 + 9))
    {
      if (fabs(v31) <= 2.22044605e-16)
      {
        _Q1 = v28;
        double v15 = v29;
      }
      else
      {
        double v13 = -(v29 + *(double *)(a3 + 16) * -0.0000000249532021) / v31;
        _Q1 = vmlaq_n_f64(v28, v30, v13);
        double v15 = v29 + v13 * v31;
      }
      double v16 = v15 * 40075017.0;
      _D8 = 0x401921FB54442D18;
      long double v18 = 6.28318531 * _Q1.f64[0];
      __asm { FMLA            D0, D8, V1.D[1]; __x }
      long double v24 = exp(_D0);
      long double v25 = atan(v24) * 2.0 + -1.57079633;
      long double v26 = fmod(v18, 6.28318531);
      long double v27 = fmod(v26 + 6.28318531, 6.28318531);
      *(long double *)a1 = v25;
      *(long double *)(a1 + 8) = v27 + -3.14159265;
      *(double *)(a1 + 16) = v16;
    }
  }
}

void md::MapDataAccess::_globeGroundCoordinateForScreenPoint(uint64_t a1, unsigned __int8 *a2, double *a3, double *a4, unsigned char *a5)
{
  double v10 = a3[1];
  double v11 = a3[2];
  __double2 v12 = __sincos_stret(*a3);
  double v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  __double2 v14 = __sincos_stret(v10);
  double v15 = (v13 + v11) * v12.__cosval * v14.__cosval * ((v13 + v11) * v12.__cosval * v14.__cosval)
      + (v13 + v11) * v12.__cosval * v14.__sinval * ((v13 + v11) * v12.__cosval * v14.__sinval)
      + (v11 + v13 * 0.99330562) * v12.__sinval * ((v11 + v13 * 0.99330562) * v12.__sinval);
  double v48 = 0.0;
  double v16 = *a4;
  double v17 = a4[1];
  double v18 = a4[2];
  double v19 = a4[3];
  double v20 = a4[4];
  double v21 = a4[5];
  double v22 = v19 * v19 + v20 * v20 + v21 * v21;
  double v23 = v19 * *a4 + v20 * v17 + v21 * v18;
  double v24 = v23 + v23;
  double v25 = (v15 - (v16 * v16 + v17 * v17 + v18 * v18)) * (4.0 * v22) + v24 * v24;
  if (v25 < 0.0)
  {
LABEL_2:
    int v26 = 0;
    if (!a5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  double v28 = sqrt(v25);
  double v29 = (v28 + v24) * -0.5 / v22;
  double v30 = (v28 - v24) * 0.5 / v22;
  if (v29 >= 0.0)
  {
    double v48 = v29;
    double v31 = (double *)&v47;
  }
  else
  {
    if (v30 < 0.0) {
      goto LABEL_2;
    }
    double v31 = &v48;
  }
  *double v31 = v30;
  int v26 = 1;
  if (a5) {
LABEL_3:
  }
    *a5 = v26;
LABEL_4:
  if (v26)
  {
    double v27 = v48;
  }
  else
  {
    double v32 = sqrt((a3[3] + cos(3.14159265 - a3[4]) * -12756274.0) * a3[3] + 4.06806316e13);
    double v27 = sqrt((v32 + 6378137.0) * (v32 + -6378137.0));
  }
  long double v33 = v16 + v19 * v27;
  long double v34 = v17 + v20 * v27;
  long double v35 = v18 + v21 * v27;
  double v36 = sqrt(v33 * v33 + v34 * v34);
  double v37 = atan2(v35, v36 * 0.996647189);
  long double v38 = atan2(v34, v33);
  __double2 v39 = __sincos_stret(v37);
  long double v40 = atan2(v35 + v39.__sinval * v39.__sinval * 42841.3115 * v39.__sinval, v36 + v39.__cosval * v39.__cosval * -42697.6727 * v39.__cosval);
  long double v41 = sin(v40);
  double v42 = -6378137.0 / sqrt(v41 * v41 * -0.00669437999 + 1.0);
  long double v43 = cos(v40);
  *(long double *)a1 = v40;
  *(long double *)(a1 + 8) = v38;
  *(long double *)(a1 + 16) = v36 / v43 + v42;
  md::MapDataAccess::heightAtCoordinate(a2, (_OWORD *)a1);
  if (v45) {
    uint64_t v46 = v44;
  }
  else {
    uint64_t v46 = 0;
  }
  *(void *)(a1 + 16) = v46;
}

double md::MapDataAccess::heightAtCoordinate(unsigned __int8 *a1, _OWORD *a2)
{
  unsigned int v2 = a1[8];
  double result = 0.0;
  if (v2 > 6 || ((1 << v2) & 0xD) != 0) {
    return result;
  }
  if (((1 << v2) & 0x70) == 0)
  {
    double v27 = 0.0;
    uint64_t v8 = *(void *)a1;
    if (!*(unsigned char *)(*(void *)a1 + 1241))
    {
      uint64_t v17 = *(void *)(*(void *)(v8 + 896) + 264);
      *(_OWORD *)int v26 = *a2;
      int v18 = altitude::IntersectorHeight::heightAtLatLon(*(void *)(v17 + 712), v26, &v27, 0xEu);
      double result = v27;
      if (v18) {
        return 0.0;
      }
      return result;
    }
    int v9 = *(int8x8_t **)(v8 + 1120);
    int8x8_t v10 = v9[2];
    if (!*(void *)&v10) {
      return result;
    }
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v12 = 0x17767EADC5B287BLL;
      if (*(void *)&v10 <= 0x17767EADC5B287BuLL) {
        uint64_t v12 = 0x17767EADC5B287BuLL % *(void *)&v10;
      }
    }
    else
    {
      uint64_t v12 = (*(void *)&v10 - 1) & 0x17767EADC5B287BLL;
    }
    double v20 = *(void **)(*(void *)&v9[1] + 8 * v12);
    if (!v20) {
      return result;
    }
    double v21 = (void *)*v20;
    if (!v21) {
      return result;
    }
    if (v11.u32[0] < 2uLL)
    {
      uint64_t v22 = *(void *)&v10 - 1;
      while (1)
      {
        uint64_t v24 = v21[1];
        if (v24 == 0x17767EADC5B287BLL)
        {
          if (v21[2] == 0x17767EADC5B287BLL) {
            goto LABEL_55;
          }
        }
        else if ((v24 & v22) != v12)
        {
          return result;
        }
        double v21 = (void *)*v21;
        if (!v21) {
          return result;
        }
      }
    }
    while (1)
    {
      unint64_t v23 = v21[1];
      if (v23 == 0x17767EADC5B287BLL)
      {
        if (v21[2] == 0x17767EADC5B287BLL)
        {
LABEL_55:
          uint64_t v25 = v21[5];
          if (v25 && *(unsigned char *)(v25 + 56)) {
            return COERCE_DOUBLE(md::ElevationLogic::heightAtCoordinate((void *)v25, (uint64_t)a2));
          }
          return result;
        }
      }
      else
      {
        if (v23 >= *(void *)&v10) {
          v23 %= *(void *)&v10;
        }
        if (v23 != v12) {
          return result;
        }
      }
      double v21 = (void *)*v21;
      if (!v21) {
        return result;
      }
    }
  }
  os_signpost_id_t v4 = *(int8x8_t **)(*(void *)a1 + 1120);
  int8x8_t v5 = v4[2];
  if (v5)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      uint64_t v7 = 0x17767EADC5B287BLL;
      if (*(void *)&v5 <= 0x17767EADC5B287BuLL) {
        uint64_t v7 = 0x17767EADC5B287BuLL % *(void *)&v5;
      }
    }
    else
    {
      uint64_t v7 = (*(void *)&v5 - 1) & 0x17767EADC5B287BLL;
    }
    double v13 = *(void **)(*(void *)&v4[1] + 8 * v7);
    if (v13)
    {
      __double2 v14 = (void *)*v13;
      if (*v13)
      {
        if (v6.u32[0] < 2uLL)
        {
          uint64_t v15 = *(void *)&v5 - 1;
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == 0x17767EADC5B287BLL)
            {
              if (v14[2] == 0x17767EADC5B287BLL) {
                goto LABEL_51;
              }
            }
            else if ((v16 & v15) != v7)
            {
              return result;
            }
            __double2 v14 = (void *)*v14;
            if (!v14) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v19 = v14[1];
          if (v19 == 0x17767EADC5B287BLL)
          {
            if (v14[2] == 0x17767EADC5B287BLL)
            {
LABEL_51:
              uint64_t v25 = v14[5];
              if (!v25 || !*(unsigned char *)(v25 + 56) || !*(unsigned char *)(*(void *)(v25 + 160) + 80)) {
                return result;
              }
              return COERCE_DOUBLE(md::ElevationLogic::heightAtCoordinate((void *)v25, (uint64_t)a2));
            }
          }
          else
          {
            if (v19 >= *(void *)&v5) {
              v19 %= *(void *)&v5;
            }
            if (v19 != v7) {
              return result;
            }
          }
          __double2 v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

unint64_t md::ElevationLogic::heightAtCoordinate(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[34];
  if (!v2) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1[20] + 80)) {
    goto LABEL_3;
  }
  uint64_t v19 = a1[35];
  double v20 = *(uint64_t **)(v19 + 1128);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  if (v21 != v22)
  {
    while (*(unsigned char *)v21 != 20)
    {
      v21 += 16;
      if (v21 == v22) {
        goto LABEL_14;
      }
    }
  }
  if (v21 == v22 || ((unsigned int v23 = *(_DWORD *)(v21 + 8) - 2, *(unsigned char *)(v19 + 1241)) ? (v24 = v23 > 2) : (v24 = 1), v24))
  {
LABEL_14:
    uint64_t v18 = 0;
    unint64_t v17 = 0;
  }
  else
  {
LABEL_3:
    long long v26 = *(_OWORD *)(a2 + 8);
    long double v3 = tan(*(double *)a2 * 0.5 + 0.785398163);
    long double v4 = log(v3);
    *(void *)&v5.f64[0] = v26;
    v5.f64[1] = v4;
    float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v27 = vmlaq_f64(_Q2, v6, v5);
    uint64_t v28 = *((void *)&v26 + 1);
    uint64_t Elevation = md::World::getElevation(v2, &v27, v6.f64[0], *(double *)&v26, v27.f64[0], *(double *)&v26, v12, v13, v14, v15);
    unint64_t v17 = Elevation & 0xFFFFFFFFFFFFFF00;
    uint64_t v18 = Elevation;
  }
  return v17 | v18;
}

uint64_t md::World::getElevation(uint64_t a1, float64x2_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  if (*(unsigned char *)(a1 + 377))
  {
    if (v11 != v12)
    {
      while (*(_WORD *)v11 != 77)
      {
        v11 += 16;
        if (v11 == v12) {
          goto LABEL_34;
        }
      }
    }
    double v13 = 0.0;
    if (v11 != v12)
    {
      double v14 = *(void **)(v11 + 8);
      if (v14)
      {
        float v15 = (void *)v14[1];
        if (v15 != v14)
        {
          unsigned __int8 v16 = 0;
          BOOL v17 = 0;
          do
          {
            uint64_t v19 = (void *)v15[16];
            uint64_t v18 = (std::__shared_weak_count *)v15[17];
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v20 = v19[90];
            if ((v20 || (uint64_t v20 = v19[92]) != 0) && *(unsigned __int8 *)(v20 + 57) > v16)
            {
              if ((*(unsigned int (**)(void *, float64x2_t *))(*v19 + 48))(v19, a2))
              {
                uint64_t v21 = (*(uint64_t (**)(void *, float64x2_t *, uint64_t))(*v19 + 56))(v19, a2, 1);
                if (BYTE4(v21))
                {
                  uint64_t v22 = v19[90];
                  if (v22 || (uint64_t v22 = v19[92]) != 0) {
                    unsigned __int8 v16 = *(unsigned char *)(v22 + 57);
                  }
                  else {
                    unsigned __int8 v16 = 0;
                  }
                  if (v17 != BYTE4(v21))
                  {
                    BOOL v17 = !v17;
                    if (v17) {
                      double v13 = *(float *)&v21;
                    }
                    if (!v18) {
                      goto LABEL_10;
                    }
LABEL_24:
                    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                      std::__shared_weak_count::__release_weak(v18);
                    }
                    goto LABEL_10;
                  }
                  BOOL v17 = 1;
                  double v13 = *(float *)&v21;
                }
              }
            }
            if (v18) {
              goto LABEL_24;
            }
LABEL_10:
            float v15 = (void *)v15[1];
          }
          while (v15 != v14);
        }
      }
    }
  }
  else
  {
    if (v11 != v12)
    {
      while (*(_WORD *)v11 != 43)
      {
        v11 += 16;
        if (v11 == v12)
        {
LABEL_34:
          double v13 = 0.0;
          return *(void *)&v13;
        }
      }
    }
    double v13 = 0.0;
    if (v11 != v12)
    {
      unsigned int v23 = *(void **)(v11 + 8);
      if (v23)
      {
        BOOL v24 = (void *)v23[1];
        if (v24 != v23)
        {
          unsigned __int8 v25 = 0;
          do
          {
            uint64_t v26 = v24[16];
            float64x2_t v27 = (std::__shared_weak_count *)v24[17];
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v28 = *(void *)(v26 + 720);
            double v29 = *(std::__shared_weak_count **)(v26 + 728);
            if (v29) {
              atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v28)
            {
              if (*(void *)v28 != *(void *)(v28 + 8))
              {
                unsigned int v30 = *(unsigned __int8 *)(v28 + 57);
                double v31 = (double)(1 << v30);
                v32.i64[0] = *(int *)(v28 + 64);
                v32.i64[1] = (1 << v30) + ~*(_DWORD *)(v28 + 60);
                float64x2_t v33 = vmlsq_lane_f64(*a2, vcvtq_f64_s64(v32), 1.0 / v31, 0);
                float64x2_t v34 = vmulq_n_f64(v33, v31);
                float32x4_t v35 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34), v34);
                LODWORD(v34.f64[0]) = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_1A28FD160, v35)).u32[0];
                double v36 = COERCE_DOUBLE(vmovn_s32(vcgeq_f32(v35, (float32x4_t)xmmword_1A28FD160)));
                HIDWORD(v34.f64[0]) = HIDWORD(v36);
                if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v34.f64[0], 0xFuLL))) & 1) != 0
                  && v30 > v25)
                {
                  unint64_t v37 = md::ElevationRaster::elevationInMetersAtWorldPoint(v28, 1u, a2->f64[0], a2->f64[1], v36, 0.00781250185, v33.f64[0], a8, a9, a10);
                  if (HIDWORD(v37)) {
                    double v13 = *(float *)&v37;
                  }
                  else {
                    double v13 = 0.0;
                  }
                  unsigned __int8 v25 = v30;
                }
              }
            }
            if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
            if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
            BOOL v24 = (void *)v24[1];
          }
          while (v24 != v23);
        }
      }
    }
  }
  return *(void *)&v13;
}

void sub_1A1A46A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::ElevationRaster::elevationInMetersAtWorldPoint(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t v19 = *(void *)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    LOBYTE(v20) = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    return v43 & 0x100000000 | LOBYTE(v20) | v44;
  }
  LOBYTE(v20) = 0;
  int v21 = 1 << *(unsigned char *)(a1 + 57);
  double v22 = (double)v21;
  double v23 = -1.0 / (double)v21;
  float v24 = (a3 + v23 * (double)*(int *)(a1 + 64)) * (double)v21;
  unsigned int v25 = 1.0;
  if (v24 < 0.0 || v24 > 1.0)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    return v43 & 0x100000000 | LOBYTE(v20) | v44;
  }
  double v27 = (double)(v21 + ~*(_DWORD *)(a1 + 60));
  float v28 = (a4 + v23 * v27) * v22;
  BOOL v29 = v28 >= 0.0 && v28 <= 1.0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (v29)
  {
    unint64_t v31 = *(void *)(a1 + 32);
    unint64_t v30 = *(void *)(a1 + 40);
    *(float *)&double v22 = (float)(v31 - 1);
    *(float *)&double v23 = (float)(v30 - 1);
    float v32 = *(float *)&v22 * v24;
    float v33 = (float)(1.0 - v28) * *(float *)&v23;
    unint64_t v34 = a2;
    switch(a2)
    {
      case 0u:
        int v35 = llroundf(v32);
        int v36 = llroundf(v33);
        int v37 = v31 - 1;
        if ((int)v31 - 1 >= v35) {
          int v37 = v35;
        }
        if (v35 >= 0) {
          int v38 = v37;
        }
        else {
          int v38 = 0;
        }
        int v39 = v30 - 1;
        if ((int)v30 - 1 >= v36) {
          int v39 = v36;
        }
        if (v36 >= 0) {
          int v40 = v39;
        }
        else {
          int v40 = 0;
        }
        unint64_t v41 = v31 * v40 + v38;
        if (*(unsigned char *)(a1 + 24) == 8) {
          LOBYTE(v33) = *(unsigned char *)(v19 + v41);
        }
        else {
          LOWORD(v33) = *(_WORD *)(v19 + 2 * v41);
        }
        float v117 = (float)*(__int16 *)(a1 + 52) + (float)((float)LODWORD(v33) * *(float *)(a1 + 48));
        goto LABEL_152;
      case 2u:
        int v45 = (int)v32;
        int v46 = (int)v33;
        int v47 = *(unsigned __int8 *)(a1 + 24);
        int v48 = v31 - 1;
        int v49 = v30 - 1;
        float v50 = *(float *)(a1 + 48);
        __int16 v51 = *(_WORD *)(a1 + 52);
        if ((int)v31 - 1 >= (int)v32) {
          int v52 = (int)v32;
        }
        else {
          int v52 = v31 - 1;
        }
        if (v45 < 0) {
          int v52 = 0;
        }
        if (v49 >= v46) {
          int v53 = (int)v33;
        }
        else {
          int v53 = v30 - 1;
        }
        if (v46 < 0) {
          int v53 = 0;
        }
        unint64_t v54 = v31 * v53;
        unint64_t v55 = v54 + v52;
        if (v48 >= v45 + 1) {
          int v56 = v45 + 1;
        }
        else {
          int v56 = v31 - 1;
        }
        if (v45 < -1) {
          int v56 = 0;
        }
        unint64_t v57 = v54 + v56;
        int v58 = v45 + 2;
        if (v48 < v45 + 2) {
          int v58 = v31 - 1;
        }
        if (v45 < -2) {
          int v58 = 0;
        }
        unint64_t v59 = v54 + v58;
        if (v48 >= v45 + 3) {
          int v48 = v45 + 3;
        }
        if (v45 < -3) {
          int v48 = 0;
        }
        unint64_t v60 = v54 + v48;
        if (v49 >= v46 + 1) {
          int v61 = v46 + 1;
        }
        else {
          int v61 = v49;
        }
        if (v46 < -1) {
          int v61 = 0;
        }
        unint64_t v62 = v31 * v61;
        unint64_t v63 = v62 + v52;
        unint64_t v64 = v62 + v56;
        unint64_t v65 = v62 + v58;
        if (v47 == 8)
        {
          LOBYTE(v23) = *(unsigned char *)(v19 + v55);
          *(float *)&double v23 = (float)LODWORD(v23);
          LOBYTE(v25) = *(unsigned char *)(v19 + v57);
          float v66 = (float)v25;
          LOBYTE(v27) = *(unsigned char *)(v19 + v59);
          *(float *)&double v27 = (float)LODWORD(v27);
          LOBYTE(a9) = *(unsigned char *)(v19 + v60);
          *(float *)&a9 = (float)LODWORD(a9);
          LOBYTE(a10) = *(unsigned char *)(v19 + v63);
          float v67 = (float)LODWORD(a10);
          LOBYTE(v10) = *(unsigned char *)(v19 + v64);
          float v68 = (float)v10;
          LOBYTE(v11) = *(unsigned char *)(v19 + v65);
          LOBYTE(v12) = *(unsigned char *)(v19 + v62 + v48);
          float v69 = (float)v11;
          float v70 = (float)v12;
          int v71 = v46 + 2;
          if (v49 < v46 + 2) {
            int v71 = v49;
          }
          if (v46 < -2) {
            int v71 = 0;
          }
          unint64_t v72 = v31 * v71;
          LOBYTE(v13) = *(unsigned char *)(v19 + v72 + v52);
          float v73 = (float)v13;
          LOBYTE(v14) = *(unsigned char *)(v19 + v72 + v56);
          float v74 = (float)v14;
          LOBYTE(v15) = *(unsigned char *)(v19 + v72 + v58);
          float v75 = (float)v15;
          LOBYTE(v16) = *(unsigned char *)(v19 + v72 + v48);
          float v76 = (float)v16;
          if (v49 >= v46 + 3) {
            int v49 = v46 + 3;
          }
          if (v46 < -3) {
            int v49 = 0;
          }
          unint64_t v77 = v31 * v49;
          LOBYTE(v17) = *(unsigned char *)(v19 + v77 + v52);
          float v78 = (float)v17;
          LOBYTE(v17) = *(unsigned char *)(v19 + v77 + v56);
          LOBYTE(v18) = *(unsigned char *)(v19 + v77 + v58);
          float v79 = (float)v17;
          float v80 = (float)v18;
          LOBYTE(v17) = *(unsigned char *)(v19 + v77 + v48);
        }
        else
        {
          LOWORD(v23) = *(_WORD *)(v19 + 2 * v55);
          *(float *)&double v23 = (float)LODWORD(v23);
          LOWORD(v25) = *(_WORD *)(v19 + 2 * v57);
          float v66 = (float)v25;
          LOWORD(v27) = *(_WORD *)(v19 + 2 * v59);
          *(float *)&double v27 = (float)LODWORD(v27);
          LOWORD(a9) = *(_WORD *)(v19 + 2 * v60);
          *(float *)&a9 = (float)LODWORD(a9);
          LOWORD(a10) = *(_WORD *)(v19 + 2 * v63);
          float v67 = (float)LODWORD(a10);
          LOWORD(v10) = *(_WORD *)(v19 + 2 * v64);
          float v68 = (float)v10;
          LOWORD(v11) = *(_WORD *)(v19 + 2 * v65);
          LOWORD(v12) = *(_WORD *)(v19 + 2 * (v62 + v48));
          float v69 = (float)v11;
          float v70 = (float)v12;
          int v118 = v46 + 2;
          if (v49 < v46 + 2) {
            int v118 = v49;
          }
          if (v46 < -2) {
            int v118 = 0;
          }
          unint64_t v119 = v31 * v118;
          LOWORD(v13) = *(_WORD *)(v19 + 2 * (v119 + v52));
          float v73 = (float)v13;
          LOWORD(v14) = *(_WORD *)(v19 + 2 * (v119 + v56));
          float v74 = (float)v14;
          LOWORD(v15) = *(_WORD *)(v19 + 2 * (v119 + v58));
          float v75 = (float)v15;
          LOWORD(v16) = *(_WORD *)(v19 + 2 * (v119 + v48));
          float v76 = (float)v16;
          if (v49 >= v46 + 3) {
            int v49 = v46 + 3;
          }
          if (v46 < -3) {
            int v49 = 0;
          }
          unint64_t v120 = v31 * v49;
          LOWORD(v17) = *(_WORD *)(v19 + 2 * (v120 + v52));
          float v78 = (float)v17;
          LOWORD(v17) = *(_WORD *)(v19 + 2 * (v120 + v56));
          LOWORD(v18) = *(_WORD *)(v19 + 2 * (v120 + v58));
          float v79 = (float)v17;
          float v80 = (float)v18;
          LOWORD(v17) = *(_WORD *)(v19 + 2 * (v120 + v48));
        }
        float v121 = (float)v51;
        float v122 = v50 * v80;
        float v123 = v50 * v79;
        float v124 = v50 * v78;
        float v125 = v50 * *(float *)&v23;
        float v126 = (float)(v50 * *(float *)&v23) + v121;
        float v127 = v50 * v66;
        float v128 = v127 + v121;
        float v129 = v50 * *(float *)&v27;
        float v130 = v129 + v121;
        float v131 = v50 * *(float *)&a9;
        float v132 = v50 * v67;
        float v133 = v50 * v68;
        float v134 = v50 * v69;
        float v135 = v50 * v70;
        float v136 = v50 * v73;
        float v137 = v50 * v74;
        float v138 = v50 * v75;
        float v139 = v50 * v76;
        float v140 = v50 * (float)v17;
        float v141 = v32 - (float)v45;
        float v142 = v129 - v125;
        float v143 = v127 - v129;
        float v144 = v131 - v125;
        float v145 = (float)((float)((float)(v128 * -5.0) + (float)(v130 * 4.0)) + (float)(v126 * 2.0)) - (float)(v131 + v121);
        float v146 = v133 + v121;
        float v147 = v142 + (float)((float)(v145 + (float)((float)(v144 + (float)(v143 * 3.0)) * v141)) * v141);
        float v148 = (float)(v134 - v132)
             + (float)((float)((float)((float)((float)((float)((float)(v133 + v121) * -5.0)
                                                     + (float)((float)(v134 + v121) * 4.0))
                                             + (float)((float)(v132 + v121) * 2.0))
                                     - (float)(v135 + v121))
                             + (float)((float)((float)(v135 - v132) + (float)((float)(v133 - v134) * 3.0)) * v141))
                     * v141);
        float v149 = (float)(v138 - v136)
             + (float)((float)((float)((float)((float)((float)((float)(v137 + v121) * -5.0)
                                                     + (float)((float)(v138 + v121) * 4.0))
                                             + (float)((float)(v136 + v121) * 2.0))
                                     - (float)(v139 + v121))
                             + (float)((float)((float)(v139 - v136) + (float)((float)(v137 - v138) * 3.0)) * v141))
                     * v141);
        float v150 = (float)(v122 - v124)
             + (float)((float)((float)((float)((float)((float)((float)(v123 + v121) * -5.0)
                                                     + (float)((float)(v122 + v121) * 4.0))
                                             + (float)((float)(v124 + v121) * 2.0))
                                     - (float)(v140 + v121))
                             + (float)((float)((float)(v140 - v124) + (float)((float)(v123 - v122) * 3.0)) * v141))
                     * v141);
        float v151 = v141 * 0.5;
        float v152 = v128 + (float)(v151 * v147);
        float v153 = v146 + (float)(v151 * v148);
        float v117 = v153
             + (float)((float)((float)(v33 - (float)v46) * 0.5)
                     * (float)((float)((float)((float)(v137 + v121) + (float)(v151 * v149)) - v152)
                             + (float)((float)((float)((float)((float)((float)(v153 * -5.0)
                                                                     + (float)((float)((float)(v137 + v121)
                                                                                     + (float)(v151 * v149))
                                                                             * 4.0))
                                                             + (float)(v152 * 2.0))
                                                     - (float)((float)(v123 + v121) + (float)(v151 * v150)))
                                             + (float)((float)((float)((float)((float)(v123 + v121)
                                                                             + (float)(v151 * v150))
                                                                     - v152)
                                                             + (float)((float)(v153
                                                                             - (float)((float)(v137 + v121)
                                                                                     + (float)(v151 * v149)))
                                                                     * 3.0))
                                                     * (float)(v33 - (float)v46)))
                                     * (float)(v33 - (float)v46))));
LABEL_152:
        float v20 = v117;
        uint64_t v43 = 0x100000000;
        goto LABEL_153;
      case 3u:
        unsigned int v81 = 0;
        __int16 v82 = 0;
        int v83 = 0;
        LODWORD(v34) = llroundf(v33);
        unsigned int v84 = llroundf(v32) - 8;
        int v85 = (__int16)(v34 - 8);
        int v86 = (__int16)(v34 - 4);
        BOOL v88 = v85 >= 0 && v30 > (unsigned __int16)(v34 - 8);
        int v89 = v30 - 1;
        if ((int)v30 - 1 >= v85) {
          int v90 = (__int16)(v34 - 8);
        }
        else {
          int v90 = v30 - 1;
        }
        int v91 = (__int16)v34;
        BOOL v93 = v86 >= 0 && v30 > (unsigned __int16)(v34 - 4);
        if (v89 < v86) {
          int v86 = v30 - 1;
        }
        unsigned __int16 v94 = v34 + 4;
        int v95 = (__int16)(v34 + 4);
        BOOL v97 = (v34 & 0x8000u) == 0 && v30 > v34;
        if (v89 >= v91) {
          int v98 = v91;
        }
        else {
          int v98 = v30 - 1;
        }
        unint64_t v99 = v31 * v90;
        unint64_t v100 = v31 * v86;
        unint64_t v101 = v31 * v98;
        BOOL v103 = v95 >= 0 && v30 > v94;
        if (v89 >= v95) {
          int v89 = v95;
        }
        unint64_t v104 = v31 * v89;
        float v105 = 0.0;
        break;
      default:
        uint64_t v42 = md::ElevationRaster::bilinearSample((uint64_t *)a1, v32, v33, v22, v23, 1.0, v27, a9, a10);
        float v20 = *(float *)&v42;
        uint64_t v43 = v42 & 0x100000000;
        goto LABEL_153;
    }
    while (1)
    {
      unsigned __int16 v106 = v84 + v82;
      if ((v106 & 0x8000) != 0) {
        goto LABEL_101;
      }
      int v107 = v106;
      if ((int)v31 - 1 < v106) {
        int v107 = v31 - 1;
      }
      if (v31 <= v106) {
        goto LABEL_101;
      }
      uint64_t v108 = v81 >> 2;
      if (v88)
      {
        unint64_t v109 = v99 + v107;
        if (*(unsigned char *)(a1 + 24) == 8)
        {
          unsigned int v110 = *(unsigned __int8 *)(v19 + v109);
          if (!*(unsigned char *)(a1 + 80) || v110 != 255) {
            goto LABEL_113;
          }
        }
        else
        {
          unsigned int v110 = *(unsigned __int16 *)(v19 + 2 * v109);
          if (!*(unsigned char *)(a1 + 80) || v110 != 0xFFFF)
          {
LABEL_113:
            LOWORD(v23) = *(_WORD *)(a1 + 52);
            *(void *)&double v23 = vmovl_s16(*(int16x4_t *)&v23).u64[0];
            *(float *)&double v23 = (float)SLODWORD(v23);
            float v105 = v105
                 + (float)(gaussianLookup4x4[4 * v108]
                         * (float)(*(float *)&v23 + (float)(*(float *)(a1 + 48) * (float)v110)));
            ++v83;
          }
        }
      }
      if (!v93) {
        goto LABEL_122;
      }
      unint64_t v111 = v100 + v107;
      if (*(unsigned char *)(a1 + 24) == 8)
      {
        unsigned int v112 = *(unsigned __int8 *)(v19 + v111);
        if (!*(unsigned char *)(a1 + 80) || v112 != 255) {
          goto LABEL_121;
        }
      }
      else
      {
        unsigned int v112 = *(unsigned __int16 *)(v19 + 2 * v111);
        if (!*(unsigned char *)(a1 + 80) || v112 != 0xFFFF)
        {
LABEL_121:
          LOWORD(v23) = *(_WORD *)(a1 + 52);
          *(void *)&double v23 = vmovl_s16(*(int16x4_t *)&v23).u64[0];
          *(float *)&double v23 = (float)SLODWORD(v23);
          float v105 = v105
               + (float)(gaussianLookup4x4[4 * v108 + 1]
                       * (float)(*(float *)&v23 + (float)(*(float *)(a1 + 48) * (float)v112)));
          ++v83;
        }
      }
LABEL_122:
      if (!v97) {
        goto LABEL_130;
      }
      unint64_t v113 = v101 + v107;
      if (*(unsigned char *)(a1 + 24) == 8)
      {
        unsigned int v114 = *(unsigned __int8 *)(v19 + v113);
        if (!*(unsigned char *)(a1 + 80) || v114 != 255) {
          goto LABEL_129;
        }
      }
      else
      {
        unsigned int v114 = *(unsigned __int16 *)(v19 + 2 * v113);
        if (!*(unsigned char *)(a1 + 80) || v114 != 0xFFFF)
        {
LABEL_129:
          LOWORD(v23) = *(_WORD *)(a1 + 52);
          *(void *)&double v23 = vmovl_s16(*(int16x4_t *)&v23).u64[0];
          *(float *)&double v23 = (float)SLODWORD(v23);
          float v105 = v105
               + (float)(gaussianLookup4x4[4 * v108 + 2]
                       * (float)(*(float *)&v23 + (float)(*(float *)(a1 + 48) * (float)v114)));
          ++v83;
        }
      }
LABEL_130:
      if (v103)
      {
        unint64_t v115 = v104 + v107;
        if (*(unsigned char *)(a1 + 24) == 8)
        {
          unsigned int v116 = *(unsigned __int8 *)(v19 + v115);
          if (*(unsigned char *)(a1 + 80) && v116 == 255) {
            goto LABEL_101;
          }
        }
        else
        {
          unsigned int v116 = *(unsigned __int16 *)(v19 + 2 * v115);
          if (*(unsigned char *)(a1 + 80) && v116 == 0xFFFF) {
            goto LABEL_101;
          }
        }
        LOWORD(v23) = *(_WORD *)(a1 + 52);
        *(void *)&double v23 = vmovl_s16(*(int16x4_t *)&v23).u64[0];
        *(float *)&double v23 = (float)SLODWORD(v23);
        float v105 = v105
             + (float)(gaussianLookup4x4[4 * v108 + 3]
                     * (float)(*(float *)&v23 + (float)(*(float *)(a1 + 48) * (float)v116)));
        ++v83;
      }
LABEL_101:
      __int16 v82 = v81 + 4;
      unsigned int v81 = (unsigned __int16)(v81 + 4);
      if (v81 >= 0x10)
      {
        if ((_WORD)v83)
        {
          float v20 = v105 / (float)(unsigned __int16)v83;
          uint64_t v43 = 0x100000000;
        }
        else
        {
          float v20 = 0.0;
          uint64_t v43 = 0;
        }
LABEL_153:
        uint64_t v44 = LODWORD(v20) & 0xFFFFFF00;
        return v43 & 0x100000000 | LOBYTE(v20) | v44;
      }
    }
  }
  return v43 & 0x100000000 | LOBYTE(v20) | v44;
}

uint64_t md::ElevationRaster::bilinearSample(uint64_t *a1, float a2, float a3, double a4, double a5, float a6, double a7, double a8, float a9)
{
  int v9 = (int)a2;
  int v10 = (int)a3;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[4];
  int v13 = v12 - 1;
  int v14 = *((_DWORD *)a1 + 10) - 1;
  if (*((unsigned char *)a1 + 24) == 8)
  {
    if (*((unsigned char *)a1 + 80))
    {
      if (v14 >= v10) {
        int v15 = (int)a3;
      }
      else {
        int v15 = *((_DWORD *)a1 + 10) - 1;
      }
      if (v10 < 0) {
        int v15 = 0;
      }
      uint64_t v16 = v12 * v15;
      if (v13 >= v9) {
        int v17 = (int)a2;
      }
      else {
        int v17 = v12 - 1;
      }
      if (v9 < 0) {
        int v17 = 0;
      }
      uint64_t v18 = v17;
      unsigned int v19 = *(unsigned __int8 *)(v11 + v16 + v17);
      if (v19 == 255) {
        return 0;
      }
      if (v13 >= v9 + 1) {
        int v13 = v9 + 1;
      }
      if (v9 < -1) {
        int v13 = 0;
      }
      uint64_t v20 = v13;
      unsigned int v21 = *(unsigned __int8 *)(v11 + v16 + v13);
      if (v21 == 255) {
        return 0;
      }
      if (v14 >= v10 + 1) {
        int v14 = v10 + 1;
      }
      if (v10 < -1) {
        int v14 = 0;
      }
      uint64_t v22 = v12 * v14;
      unsigned int v23 = *(unsigned __int8 *)(v11 + v22 + v18);
      if (v23 == 255) {
        return 0;
      }
      unsigned int v24 = *(unsigned __int8 *)(v11 + v22 + v20);
      if (v24 == 255) {
        return 0;
      }
      goto LABEL_49;
    }
    float v31 = *((float *)a1 + 12);
    LOWORD(a4) = *((_WORD *)a1 + 26);
    LODWORD(a4) = vmovl_s16(*(int16x4_t *)&a4).u32[0];
    float v32 = (float)SLODWORD(a4);
    if (v13 >= v9) {
      int v36 = (int)a2;
    }
    else {
      int v36 = v12 - 1;
    }
    if (v9 < 0) {
      int v36 = 0;
    }
    if (v14 >= v10) {
      int v37 = (int)a3;
    }
    else {
      int v37 = *((_DWORD *)a1 + 10) - 1;
    }
    if (v10 < 0) {
      int v37 = 0;
    }
    uint64_t v38 = v12 * v37;
    LOBYTE(a4) = *(unsigned char *)(v11 + v38 + v36);
    *(float *)&a4 = v32 + (float)(v31 * (float)LODWORD(a4));
    if (v13 >= v9 + 1) {
      int v13 = v9 + 1;
    }
    if (v9 < -1) {
      int v13 = 0;
    }
    LOBYTE(a5) = *(unsigned char *)(v11 + v38 + v13);
    *(float *)&a5 = v32 + (float)(v31 * (float)LODWORD(a5));
    if (v14 >= v10 + 1) {
      int v14 = v10 + 1;
    }
    if (v10 < -1) {
      int v14 = 0;
    }
    uint64_t v39 = v12 * v14;
    LOBYTE(a6) = *(unsigned char *)(v11 + v39 + v36);
    float v33 = v32 + (float)(v31 * (float)LODWORD(a6));
    LOBYTE(a9) = *(unsigned char *)(v11 + v39 + v13);
LABEL_89:
    float v34 = (float)LODWORD(a9);
    goto LABEL_90;
  }
  if (!*((unsigned char *)a1 + 80))
  {
    float v31 = *((float *)a1 + 12);
    LOWORD(a4) = *((_WORD *)a1 + 26);
    LODWORD(a4) = vmovl_s16(*(int16x4_t *)&a4).u32[0];
    float v32 = (float)SLODWORD(a4);
    if (v13 >= v9) {
      int v40 = (int)a2;
    }
    else {
      int v40 = v12 - 1;
    }
    if (v9 < 0) {
      int v40 = 0;
    }
    if (v14 >= v10) {
      int v41 = (int)a3;
    }
    else {
      int v41 = *((_DWORD *)a1 + 10) - 1;
    }
    if (v10 < 0) {
      int v41 = 0;
    }
    uint64_t v42 = v12 * v41;
    LOWORD(a4) = *(_WORD *)(v11 + 2 * (v42 + v40));
    *(float *)&a4 = v32 + (float)(v31 * (float)LODWORD(a4));
    if (v13 >= v9 + 1) {
      int v13 = v9 + 1;
    }
    if (v9 < -1) {
      int v13 = 0;
    }
    LOWORD(a5) = *(_WORD *)(v11 + 2 * (v42 + v13));
    *(float *)&a5 = v32 + (float)(v31 * (float)LODWORD(a5));
    if (v14 >= v10 + 1) {
      int v14 = v10 + 1;
    }
    if (v10 < -1) {
      int v14 = 0;
    }
    uint64_t v43 = v12 * v14;
    LOWORD(a6) = *(_WORD *)(v11 + 2 * (v43 + v40));
    float v33 = v32 + (float)(v31 * (float)LODWORD(a6));
    LOWORD(a9) = *(_WORD *)(v11 + 2 * (v43 + v13));
    goto LABEL_89;
  }
  if (v14 >= v10) {
    int v25 = (int)a3;
  }
  else {
    int v25 = *((_DWORD *)a1 + 10) - 1;
  }
  if (v10 < 0) {
    int v25 = 0;
  }
  uint64_t v26 = v12 * v25;
  if (v13 >= v9) {
    int v27 = (int)a2;
  }
  else {
    int v27 = v12 - 1;
  }
  if (v9 < 0) {
    int v27 = 0;
  }
  uint64_t v28 = v27;
  unsigned int v19 = *(unsigned __int16 *)(v11 + 2 * (v26 + v27));
  if (v19 == 0xFFFF) {
    return 0;
  }
  if (v13 >= v9 + 1) {
    int v13 = v9 + 1;
  }
  if (v9 < -1) {
    int v13 = 0;
  }
  uint64_t v29 = v13;
  unsigned int v21 = *(unsigned __int16 *)(v11 + 2 * (v26 + v13));
  if (v21 == 0xFFFF) {
    return 0;
  }
  if (v14 >= v10 + 1) {
    int v14 = v10 + 1;
  }
  if (v10 < -1) {
    int v14 = 0;
  }
  uint64_t v30 = v12 * v14;
  unsigned int v23 = *(unsigned __int16 *)(v11 + 2 * (v30 + v28));
  if (v23 == 0xFFFF) {
    return 0;
  }
  unsigned int v24 = *(unsigned __int16 *)(v11 + 2 * (v30 + v29));
  if (v24 == 0xFFFF) {
    return 0;
  }
LABEL_49:
  float v31 = *((float *)a1 + 12);
  LOWORD(a5) = *((_WORD *)a1 + 26);
  float v32 = (float)vmovl_s16(*(int16x4_t *)&a5).i32[0];
  *(float *)&a4 = v32 + (float)(v31 * (float)v19);
  *(float *)&a5 = v32 + (float)(v31 * (float)v21);
  float v33 = v32 + (float)(v31 * (float)v23);
  float v34 = (float)v24;
LABEL_90:
  float v44 = a2 - (float)v9;
  return COERCE_UNSIGNED_INT((float)((float)(*(float *)&a4 * (float)(1.0 - v44)) + (float)(*(float *)&a5 * v44))+ (float)((float)(a3 - (float)v10)* (float)((float)((float)(v33 * (float)(1.0 - v44)) + (float)((float)(v32 + (float)(v31 * v34)) * v44))- (float)((float)(*(float *)&a4 * (float)(1.0 - v44)) + (float)(*(float *)&a5 * v44))))) | 0x100000000;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_24>,void ()(VKMuninAvailability)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long double v4 = *(void **)(v3 + 1104);
  if (v4)
  {
    float64x2_t v5 = *a2;
    objc_initWeak(&location, v4);
    float64x2_t v6 = **(void ***)(v3 + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZZN2md9MapEngineC1Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditTokenENK4__24clE19VKMuninAvailability_block_invoke;
    block[3] = &unk_1E5A92CC0;
    uint64_t v7 = v6;
    objc_copyWeak(v9, &location);
    v9[1] = v5;
    dispatch_async(v7, block);

    objc_destroyWeak(v9);
    objc_destroyWeak(&location);
  }
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x92F3DC114CADB853)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x92F3DC114CADB853)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x92F3DC114CADB853)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_117;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v4 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  int v9 = *(void **)(a2 + 8 * v4);
  if (!v9) {
    goto LABEL_25;
  }
  int v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v10[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      int v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == 0x1AF456233693CD46) {
      break;
    }
    if (v11 >= a3) {
      v11 %= a3;
    }
    if (v11 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    int v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v13 = v10[5];
  if (*(void *)(v13 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v7 = *(void *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v14 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v14 = 0x99BED48DEFBBD82BLL % a3;
    }
  }
  else
  {
    unint64_t v14 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v15 = *(void **)(a2 + 8 * v14);
  if (!v15) {
    goto LABEL_48;
  }
  uint64_t v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v18 = v16[1];
      if (v18 == 0x99BED48DEFBBD82BLL)
      {
        if (v16[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_46;
        }
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v16[1];
    if (v17 != 0x99BED48DEFBBD82BLL)
    {
      if (v17 >= a3) {
        v17 %= a3;
      }
      if (v17 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v16[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v19 = v16[5];
  if (*(void *)(v19 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v6 = *(void *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v20 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v20 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v20 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  unsigned int v21 = *(void **)(a2 + 8 * v20);
  if (!v21) {
    goto LABEL_71;
  }
  uint64_t v22 = (void *)*v21;
  if (!v22) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v24 = v22[1];
      if (v24 == 0xE42D19AFCA302E68)
      {
        if (v22[2] == 0xE42D19AFCA302E68) {
          goto LABEL_69;
        }
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      uint64_t v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v23 = v22[1];
    if (v23 != 0xE42D19AFCA302E68)
    {
      if (v23 >= a3) {
        v23 %= a3;
      }
      if (v23 != v20) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v22[2] != 0xE42D19AFCA302E68)
    {
LABEL_58:
      uint64_t v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v25 = v22[5];
  if (*(void *)(v25 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v8 = *(void *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v26 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4) {
      unint64_t v26 = 0xC97B9E962ADF4AD4 % a3;
    }
  }
  else
  {
    unint64_t v26 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  int v27 = *(void **)(a2 + 8 * v26);
  if (!v27) {
    goto LABEL_94;
  }
  uint64_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      if (v30 == 0xC97B9E962ADF4AD4)
      {
        if (v28[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_92;
        }
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v29 = v28[1];
    if (v29 != 0xC97B9E962ADF4AD4)
    {
      if (v29 >= a3) {
        v29 %= a3;
      }
      if (v29 != v26) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (v28[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_81:
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  uint64_t v31 = v28[5];
  if (*(void *)(v31 + 8) == 0xC97B9E962ADF4AD4)
  {
    uint64_t v5 = *(void *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v32 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL) {
      uint64_t v32 = 0x1B8B241A8D896A1DLL % a3;
    }
  }
  else
  {
    uint64_t v32 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  float v33 = *(void **)(a2 + 8 * v32);
  if (!v33) {
    goto LABEL_117;
  }
  float v34 = (void *)*v33;
  if (!v34) {
    goto LABEL_117;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v36 = v34[1];
      if (v36 == 0x1B8B241A8D896A1DLL)
      {
        if (v34[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_115;
        }
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      float v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_117;
      }
    }
  }
  while (1)
  {
    unint64_t v35 = v34[1];
    if (v35 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v35 >= a3) {
      v35 %= a3;
    }
    if (v35 != v32) {
      goto LABEL_117;
    }
LABEL_104:
    float v34 = (void *)*v34;
    if (!v34) {
      goto LABEL_117;
    }
  }
  if (v34[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_104;
  }
LABEL_115:
  uint64_t v37 = v34[5];
  if (*(void *)(v37 + 8) != 0x1B8B241A8D896A1DLL)
  {
LABEL_117:
    uint64_t v38 = 0;
    goto LABEL_118;
  }
  uint64_t v38 = *(void *)(v37 + 32);
LABEL_118:
  *double result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

uint64_t md::HikingLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, unsigned char *a4)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  v88[0] = &unk_1EF56D878;
  v88[1] = a2;
  v86[0] = &unk_1EF56D8C0;
  v86[1] = a2;
  uint64_t v87 = v86;
  int v91 = v90;
  int v89 = v88;
  v90[0] = &unk_1EF56D8C0;
  v90[1] = a2;
  _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEEclEv((uint64_t)v88);
  if (v87 == v86)
  {
    (*(void (**)(void *))(v86[0] + 32))(v86);
  }
  else if (v87)
  {
    (*(void (**)(void))(*v87 + 40))();
  }
  if (v89 == v88)
  {
    (*(void (**)(void *))(v88[0] + 32))(v88);
  }
  else if (v89)
  {
    (*(void (**)(void))(*v89 + 40))();
  }
  uint64_t v8 = *a3;
  int v9 = (uint64_t *)a3[3];
  uint64_t v10 = (uint64_t)(*(double *)(md::LayoutContext::frameState(a2) + 88) * 1000.0);
  int v11 = *(unsigned __int8 *)(a1 + 338);
  if (*(unsigned char *)(a1 + 338)) {
    int v11 = v10 - *(void *)(a1 + 160) > 100;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    BOOL v12 = v10 - *(void *)(a1 + 168) > 1000;
    int v13 = *(unsigned __int8 *)(a1 + 280);
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  BOOL v12 = 0;
  int v13 = *(unsigned __int8 *)(a1 + 280);
  if (v11)
  {
LABEL_13:
    long long v81 = *(_OWORD *)(v8 + 16);
    long double v14 = tan(*(double *)(v8 + 8) * 0.5 + 0.785398163);
    long double v15 = log(v14);
    *(void *)&v16.f64[0] = v81;
    v16.f64[1] = v15;
    __asm { FMOV            V1.2D, #0.5 }
    *(float64x2_t *)buf = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v16);
    *(void *)(a1 + 176) = md::HikingLogic::_doesLocationIntersectWithParkRegion((double *)buf, 1, 1, (uint64_t)a3);
    *(unsigned char *)(a1 + 184) = v22;
    *(void *)(a1 + 192) = md::HikingLogic::_doesLocationIntersectWithParkRegion((double *)buf, 1, 2, (uint64_t)a3);
    *(unsigned char *)(a1 + 200) = v23;
    *a4 = *(unsigned char *)(a1 + 184);
    a4[1] = v23 != 0;
    *(void *)(a1 + 160) = v10;
  }
LABEL_14:
  uint64_t v80 = v8;
  __int16 v82 = a4;
  if (v12)
  {
    if (!*(unsigned char *)(a1 + 224)) {
      goto LABEL_123;
    }
    unint64_t doesLocationIntersectWithParkRegion = md::HikingLogic::_doesLocationIntersectWithParkRegion((double *)(a1 + 208), 2, 1, (uint64_t)a3);
    uint64_t v26 = v25;
    if (v25)
    {
      uint64_t v27 = *(void *)(a1 + 256);
      if (v27)
      {
        *(void *)buf = doesLocationIntersectWithParkRegion;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v27 + 48))(v27, buf);
      }
    }
    if (*(unsigned char *)(a1 + 224)) {
      *(unsigned char *)(a1 + 224) = 0;
    }
    *(void *)(a1 + 168) = v10;
    if (GEOGetVectorKitHikingLogicLog(void)::onceToken[0] != -1) {
      dispatch_once(GEOGetVectorKitHikingLogicLog(void)::onceToken, &__block_literal_global_11);
    }
    uint64_t v28 = GEOGetVectorKitHikingLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHikingLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v29 = "YES";
      if (v26)
      {
        unint64_t v30 = doesLocationIntersectWithParkRegion;
      }
      else
      {
        unint64_t v29 = "NO";
        unint64_t v30 = 0;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v29;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v30;
      _os_log_impl(&dword_1A1780000, v28, OS_LOG_TYPE_DEBUG, "Requested Location In ToolTip Region: %s feature id: %llu", buf, 0x16u);
    }
  }
  if (!v13) {
    goto LABEL_40;
  }
  if (!*(unsigned char *)(a1 + 280))
  {
LABEL_123:
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_126;
  }
  *(_OWORD *)buf = *(_OWORD *)(a1 + 264);
  md::HikingLogic::_doesLocationIntersectWithParkRegion((double *)buf, 4, 1, (uint64_t)a3);
  char v32 = v31;
  uint64_t v33 = *(void *)(a1 + 312);
  if (v33)
  {
    long long v83 = *(_OWORD *)buf;
    LOBYTE(v92) = v31 != 0;
    (*(void (**)(uint64_t, long long *, long long *))(*(void *)v33 + 48))(v33, &v83, &v92);
  }
  if (*(unsigned char *)(a1 + 280)) {
    *(unsigned char *)(a1 + 280) = 0;
  }
  if (GEOGetVectorKitHikingLogicLog(void)::onceToken[0] != -1) {
    dispatch_once(GEOGetVectorKitHikingLogicLog(void)::onceToken, &__block_literal_global_11);
  }
  float v34 = GEOGetVectorKitHikingLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitHikingLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v35 = "YES";
    if (!v32) {
      unint64_t v35 = "NO";
    }
    LODWORD(v92) = 136315138;
    *(void *)((char *)&v92 + 4) = v35;
    _os_log_impl(&dword_1A1780000, v34, OS_LOG_TYPE_DEBUG, "Requested Location In Contextual Region: %s", (uint8_t *)&v92, 0xCu);
  }
LABEL_40:
  if (*(unsigned char *)(a1 + 328))
  {
    int v36 = 2;
    uint64_t v37 = a4;
  }
  else
  {
    uint64_t v37 = a4;
    if (*(unsigned char *)(a1 + 338))
    {
      int v36 = *(unsigned __int8 *)(a1 + 184);
    }
    else
    {
      uint64_t v38 = *v9;
      uint64_t v39 = v9[1];
      if (*v9 != v39)
      {
        while (*(unsigned char *)v38 != 34)
        {
          v38 += 16;
          if (v38 == v39) {
            goto LABEL_53;
          }
        }
      }
      if (v38 == v39 || !*(void *)(v38 + 8)) {
LABEL_53:
      }
        int v36 = 3;
      else {
        int v36 = 4;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 337) || v36 != *(unsigned __int8 *)(a1 + 336))
  {
    int v40 = v36 | 0x100;
    *(_WORD *)(a1 + 336) = v36 | 0x100;
    int v41 = *(void ***)(a1 + 144);
    uint64_t v43 = (char *)v41[1];
    unint64_t v42 = (unint64_t)v41[2];
    if ((unint64_t)v43 < v42)
    {
      *(void *)uint64_t v43 = &unk_1EF51E4A0;
      *((_DWORD *)v43 + 2) = v40;
      *((_DWORD *)v43 + 3) = 1053609165;
      *((void *)v43 + 3) = v43;
      float v44 = v43 + 32;
LABEL_86:
      v41[1] = v44;
      goto LABEL_87;
    }
    int v45 = (char *)*v41;
    uint64_t v46 = (v43 - (unsigned char *)*v41) >> 5;
    unint64_t v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 59) {
      abort();
    }
    uint64_t v48 = v42 - (void)v45;
    if (v48 >> 4 > v47) {
      unint64_t v47 = v48 >> 4;
    }
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v49 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v47;
    }
    if (v49)
    {
      if (v49 >> 59) {
        goto LABEL_127;
      }
      float v50 = (char *)operator new(32 * v49);
    }
    else
    {
      float v50 = 0;
    }
    __int16 v51 = &v50[32 * v46];
    int v52 = &v50[32 * v49];
    *(void *)__int16 v51 = &unk_1EF51E4A0;
    *((_DWORD *)v51 + 2) = v40;
    *((_DWORD *)v51 + 3) = 1053609165;
    *((void *)v51 + 3) = v51;
    float v44 = v51 + 32;
    if (v43 == v45)
    {
      *int v41 = v51;
      v41[1] = v44;
      v41[2] = v52;
    }
    else
    {
      uint64_t v53 = 0;
      do
      {
        unint64_t v54 = &v51[v53];
        unint64_t v55 = &v43[v53];
        int v56 = *(char **)&v43[v53 - 8];
        if (v56)
        {
          if (v55 - 32 == v56)
          {
            *((void *)v54 - 1) = v54 - 32;
            (*(void (**)(char *))(*((void *)v55 - 4) + 24))(v55 - 32);
          }
          else
          {
            *((void *)v54 - 1) = v56;
            *((void *)v55 - 1) = 0;
          }
        }
        else
        {
          *((void *)v54 - 1) = 0;
        }
        v53 -= 32;
      }
      while (&v43[v53] != v45);
      uint64_t v43 = (char *)*v41;
      unint64_t v57 = (char *)v41[1];
      *int v41 = &v51[v53];
      v41[1] = v44;
      v41[2] = v52;
      if (v57 == v43)
      {
        uint64_t v37 = v82;
        if (!v43) {
          goto LABEL_86;
        }
        goto LABEL_85;
      }
      int v58 = v57 - 32;
      unint64_t v59 = v57 - 32;
      uint64_t v37 = v82;
      do
      {
        unint64_t v60 = (char *)*((void *)v59 + 3);
        if (v59 == v60)
        {
          (*(void (**)(char *))(*(void *)v59 + 32))(v59);
        }
        else if (v60)
        {
          (*(void (**)(char *))(*(void *)v60 + 40))(v60);
        }
        v58 -= 32;
        _ZF = v59 == v43;
        v59 -= 32;
      }
      while (!_ZF);
    }
    if (!v43) {
      goto LABEL_86;
    }
LABEL_85:
    operator delete(v43);
    goto LABEL_86;
  }
LABEL_87:
  uint64_t v61 = *v9;
  uint64_t v62 = v9[1];
  if (*v9 != v62)
  {
    while (*(unsigned char *)v61 != 34)
    {
      v61 += 16;
      if (v61 == v62) {
        goto LABEL_98;
      }
    }
  }
  if (v61 == v62)
  {
LABEL_98:
    *(_DWORD *)(a1 + 348) = 0;
    float v65 = 0.0;
  }
  else
  {
    uint64_t v63 = *(void *)(v61 + 8);
    float v64 = 1.0;
    float v65 = 0.0;
    if (!v63) {
      float v64 = 0.0;
    }
    *(float *)(a1 + 348) = v64;
    if (v63)
    {
      float v66 = *(float *)(a1 + 340);
      float v65 = 1.0;
      if (v66 > 0.0)
      {
        float v65 = v64;
        if (*(double *)(v80 + 40) * 57.2957795 > v66)
        {
          float v65 = *(float *)(a1 + 344);
          *(float *)(a1 + 348) = v65;
        }
      }
    }
  }
  if (vabds_f32(*(float *)(a1 + 352), v65) > 0.0001)
  {
    *(float *)(a1 + 352) = v65;
    int v67 = *(unsigned __int8 *)(a1 + 392);
    float v68 = *(float *)(a1 + 356);
    float v69 = (void **)(a1 + 368);
    float v70 = *(void **)(a1 + 368);
    if (v70)
    {
      [v70 pause];
      int v71 = *v69;
      if (*v69)
      {
        *float v69 = 0;
      }
      v37[8] = 0;
    }
    if (*(void *)(a1 + 384) && v67 && (float v72 = vabds_f32(v65, v68), v72 > 0.001))
    {
      float v73 = [[VKTimedAnimation alloc] initWithDuration:(float)(v72 * 0.45)];
      if (v68 >= v65) {
        float v74 = &__block_literal_global_4;
      }
      else {
        float v74 = &__block_literal_global_15063;
      }
      float v75 = (void *)MEMORY[0x1A6239EB0](v74);
      [(VKTimedAnimation *)v73 setTimingFunction:VKAnimationCurveLinear];
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_3;
      unint64_t v99 = &unk_1E5A908E8;
      uint64_t v101 = a1;
      float v102 = v68;
      float v103 = v65;
      id v76 = v75;
      id v100 = v76;
      [(VKTimedAnimation *)v73 setStepHandler:buf];
      *(void *)&long long v92 = MEMORY[0x1E4F143A8];
      *((void *)&v92 + 1) = 3221225472;
      BOOL v93 = ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_4;
      unsigned __int16 v94 = &__block_descriptor_52_e8_v12__0B8l;
      float v97 = v65;
      uint64_t v95 = a1;
      uint64_t v96 = v37;
      [(VKAnimation *)v73 setCompletionHandler:&v92];
      if (md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 384), &v73->super))
      {
        unint64_t v77 = v73;
        unsigned int v84 = &unk_1EF5593D8;
        int v85 = v77;
        objc_storeStrong((id *)(a1 + 368), v73);
        float v78 = v85;
        int v85 = 0;

        unsigned int v84 = &unk_1EF5593D8;
        v37[8] = 1;
      }
    }
    else
    {
      *(float *)(a1 + 356) = v65;
    }
  }
  *((_DWORD *)v37 + 1) = *(_DWORD *)(a1 + 356);
  if (!v91)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_126:
    __break(1u);
LABEL_127:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  (*(void (**)(void *))(*v91 + 48))(v91);
  uint64_t result = (uint64_t)v91;
  if (v91 == v90) {
    return (*(uint64_t (**)(void *))(v90[0] + 32))(v90);
  }
  if (v91) {
    return (*(uint64_t (**)(void))(*v91 + 40))();
  }
  return result;
}

void sub_1A1A48888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a27);
  _Unwind_Resume(a1);
}

void sub_1A1A488E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30 == v30)
  {
    (*(void (**)(uint64_t *))(a27 + 32))(&a27);
  }
  else if (a30)
  {
    (*(void (**)(void))(*(void *)a30 + 40))();
  }
  std::function<void ()(void)>::~function(&a19);
  std::function<void ()(void)>::~function(&a23);
  _Unwind_Resume(a1);
}

void sub_1A1A48960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30)
{
  if (a30 == &a27)
  {
    (*(void (**)(uint64_t *))(a27 + 32))(&a27);
    _Unwind_Resume(exception_object);
  }
  if (a30)
  {
    (*(void (**)(void))(*a30 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__1NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "HikingLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HikingLogic", "", v5, 2u);
  }
}

void md::NonTiledAssetLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 + 120 != a4)
  {
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 152);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((void *)a4, *(char **)(a1 + 136));
  }
  if (a4 + 40 != a1 + 160)
  {
    *(_DWORD *)(a4 + 72) = *(_DWORD *)(a1 + 192);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((void *)(a4 + 40), *(char **)(a1 + 176));
  }
  if (a4 + 80 != a1 + 200)
  {
    *(_DWORD *)(a4 + 112) = *(_DWORD *)(a1 + 232);
    uint64_t v6 = *(char **)(a1 + 216);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((void *)(a4 + 80), v6);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>(void *a1, char *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_5;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  uint64_t v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      if (v6 != a2)
      {
        unint64_t v17 = (void **)(v6 + 16);
        char v18 = a2[39];
        if (v6[39] < 0)
        {
          if (v18 >= 0) {
            long double v14 = a2 + 16;
          }
          else {
            long double v14 = (void *)*((void *)a2 + 2);
          }
          if (v18 >= 0) {
            size_t v15 = a2[39];
          }
          else {
            size_t v15 = *((void *)a2 + 3);
          }
          std::string::__assign_no_alias<false>(v17, v14, v15);
        }
        else if (a2[39] < 0)
        {
          std::string::__assign_no_alias<true>(v17, *((void **)a2 + 2), *((void *)a2 + 3));
        }
        else
        {
          long long v19 = *((_OWORD *)a2 + 1);
          *((void *)v6 + 4) = *((void *)a2 + 4);
          *(_OWORD *)unint64_t v17 = v19;
        }
      }
      *((void *)v6 + 5) = *((void *)a2 + 5);
      float64x2_t v16 = *(char **)v6;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = *(char **)a2;
      uint64_t v6 = v16;
      if (!v16) {
        goto LABEL_5;
      }
    }
    do
    {
      unint64_t v20 = *(char **)v6;
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      uint64_t v6 = v20;
    }
    while (v20);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      uint64_t v7 = (char *)operator new(0x30uLL);
      uint64_t v8 = (uint64_t)v7;
      int v9 = (uint64_t *)(v7 + 16);
      *(void *)uint64_t v7 = 0;
      *((void *)v7 + 1) = 0;
      if (a2[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v10 = *((_OWORD *)a2 + 1);
        *((void *)v7 + 4) = *((void *)a2 + 4);
        *(_OWORD *)int v9 = v10;
      }
      *(void *)(v8 + 40) = *((void *)a2 + 5);
      int v11 = *(char *)(v8 + 39);
      if (v11 >= 0) {
        BOOL v12 = v9;
      }
      else {
        BOOL v12 = *(uint64_t **)(v8 + 16);
      }
      if (v11 >= 0) {
        unint64_t v13 = *(unsigned __int8 *)(v8 + 39);
      }
      else {
        unint64_t v13 = *(void *)(v8 + 24);
      }
      *(void *)(v8 + 8) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v12, v13);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi((uint64_t)a1, v8);
      a2 = *(char **)a2;
    }
  }
}

void sub_1A1A48D74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (void *)(a2 + 16);
  int v5 = *(char *)(a2 + 39);
  if (v5 >= 0) {
    uint64_t v6 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v6 = *(uint64_t **)(a2 + 16);
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 39);
  }
  else {
    unint64_t v7 = *(void *)(a2 + 24);
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v6, v7);
  *(v4 - 1) = v8;
  unint64_t v9 = *(void *)(a1 + 8);
  float v10 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v11 = *(float *)(a1 + 32);
  unint64_t v97 = v8;
  uint64_t v95 = v2;
  if (!v9 || (float)(v11 * (float)v9) < v10)
  {
    BOOL v93 = v4;
    BOOL v12 = 1;
    if (v9 >= 3) {
      BOOL v12 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v13 = v12 | (2 * v9);
    unint64_t v14 = vcvtps_u32_f32(v10 / v11);
    if (v13 <= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v13;
    }
    if (v15 == 1)
    {
      size_t v15 = 2;
    }
    else if ((v15 & (v15 - 1)) != 0)
    {
      size_t prime = std::__next_prime(v15);
      unint64_t v8 = v97;
      size_t v15 = prime;
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (v15 > v9) {
      goto LABEL_19;
    }
    if (v15 >= v9) {
      goto LABEL_101;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
      unint64_t v8 = v97;
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (v15 <= v24) {
      size_t v15 = v24;
    }
    if (v15 >= v9)
    {
      unint64_t v9 = *(void *)(a1 + 8);
LABEL_101:
      uint64_t v4 = v93;
    }
    else
    {
      if (v15)
      {
LABEL_19:
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v17 = operator new(8 * v15);
        char v18 = *(void **)a1;
        *(void *)a1 = v17;
        if (v18) {
          operator delete(v18);
        }
        uint64_t v19 = 0;
        *(void *)(a1 + 8) = v15;
        do
          *(void *)(*(void *)a1 + 8 * v19++) = 0;
        while (v15 != v19);
        unint64_t v20 = *(uint64_t ***)(a1 + 16);
        unint64_t v8 = v97;
        if (!v20) {
          goto LABEL_90;
        }
        size_t v21 = (size_t)v20[1];
        uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v22.i16[0] = vaddlv_u8(v22);
        unint64_t v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          if (v21 >= v15) {
            v21 %= v15;
          }
        }
        else
        {
          v21 &= v15 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v21) = a1 + 16;
        uint64_t v27 = *v20;
        if (!*v20)
        {
LABEL_90:
          unint64_t v9 = v15;
          goto LABEL_101;
        }
        unint64_t v94 = v22.u32[0];
        while (1)
        {
          size_t v28 = v27[1];
          if (v23 > 1)
          {
            if (v28 >= v15) {
              v28 %= v15;
            }
          }
          else
          {
            v28 &= v15 - 1;
          }
          if (v28 == v21)
          {
            unint64_t v20 = (uint64_t **)v27;
          }
          else
          {
            if (*(void *)(*(void *)a1 + 8 * v28))
            {
              uint64_t v29 = (uint64_t *)*v27;
              size_t v96 = v21;
              if (*v27)
              {
                size_t v30 = v27[3];
                if (*((char *)v27 + 39) >= 0) {
                  uint64_t v31 = *((unsigned __int8 *)v27 + 39);
                }
                else {
                  uint64_t v31 = v27[3];
                }
                if ((*((unsigned char *)v27 + 39) & 0x80) == 0)
                {
                  if (*((unsigned char *)v27 + 39))
                  {
                    char v32 = (uint64_t *)*v27;
                    uint64_t v33 = v27;
LABEL_52:
                    uint64_t v29 = v32;
                    uint64_t v34 = *((unsigned __int8 *)v32 + 39);
                    int v35 = (char)v34;
                    if ((v34 & 0x80u) != 0) {
                      uint64_t v34 = v29[3];
                    }
                    if (v31 == v34)
                    {
                      if (v35 >= 0) {
                        int v36 = (unsigned __int8 *)(v29 + 2);
                      }
                      else {
                        int v36 = (unsigned __int8 *)v29[2];
                      }
                      uint64_t v37 = (unsigned __int8 *)(v27 + 2);
                      uint64_t v38 = *((unsigned __int8 *)v27 + 39);
                      while (*v37 == *v36)
                      {
                        ++v37;
                        ++v36;
                        if (!--v38)
                        {
                          char v32 = (uint64_t *)*v29;
                          uint64_t v33 = v29;
                          uint64_t v29 = 0;
                          if (v32) {
                            goto LABEL_52;
                          }
                          goto LABEL_78;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v48 = *((unsigned __int8 *)v29 + 39);
                    if ((v48 & 0x80u) != 0) {
                      uint64_t v48 = v29[3];
                    }
                    uint64_t v33 = v27;
                    if (v48 == *((unsigned __int8 *)v27 + 39))
                    {
                      do
                      {
                        uint64_t v33 = v29;
                        uint64_t v29 = (uint64_t *)*v29;
                        if (!v29) {
                          break;
                        }
                        uint64_t v49 = *((unsigned __int8 *)v29 + 39);
                        if ((v49 & 0x80u) != 0) {
                          uint64_t v49 = v29[3];
                        }
                      }
                      while (v31 == v49);
                    }
                  }
                  goto LABEL_78;
                }
                BOOL v39 = *((char *)v29 + 39) < 0;
                uint64_t v40 = *((unsigned __int8 *)v29 + 39);
                if ((v40 & 0x80u) != 0) {
                  uint64_t v40 = v29[3];
                }
                if (v31 == v40)
                {
                  int v41 = (const void *)v27[2];
                  uint64_t v33 = v27;
                  while (1)
                  {
                    unint64_t v42 = v29;
                    int v45 = (const void *)v29[2];
                    uint64_t v43 = v29 + 2;
                    float v44 = v45;
                    if (v39) {
                      uint64_t v46 = v44;
                    }
                    else {
                      uint64_t v46 = v43;
                    }
                    if (memcmp(v41, v46, v30))
                    {
                      uint64_t v29 = v42;
                      goto LABEL_89;
                    }
                    uint64_t v29 = (uint64_t *)*v42;
                    if (!*v42) {
                      break;
                    }
                    BOOL v39 = *((char *)v29 + 39) < 0;
                    uint64_t v47 = *((unsigned __int8 *)v29 + 39);
                    if ((v47 & 0x80u) != 0) {
                      uint64_t v47 = v29[3];
                    }
                    uint64_t v33 = v42;
                    unint64_t v8 = v97;
                    if (v31 != v47) {
                      goto LABEL_78;
                    }
                  }
                  uint64_t v33 = v42;
LABEL_89:
                  unint64_t v8 = v97;
                  goto LABEL_78;
                }
              }
              uint64_t v33 = v27;
LABEL_78:
              *unint64_t v20 = v29;
              *uint64_t v33 = **(void **)(*(void *)a1 + 8 * v28);
              **(void **)(*(void *)a1 + 8 * v28) = v27;
              size_t v21 = v96;
              unint64_t v23 = v94;
              goto LABEL_38;
            }
            *(void *)(*(void *)a1 + 8 * v28) = v20;
            unint64_t v20 = (uint64_t **)v27;
            size_t v21 = v28;
          }
LABEL_38:
          uint64_t v27 = *v20;
          if (!*v20)
          {
            unint64_t v9 = v15;
            uint64_t v2 = v95;
            goto LABEL_101;
          }
        }
      }
      float v50 = *(void **)a1;
      *(void *)a1 = 0;
      uint64_t v4 = v93;
      if (v50)
      {
        operator delete(v50);
        unint64_t v8 = v97;
      }
      unint64_t v9 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
  uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v51.i16[0] = vaddlv_u8(v51);
  unint64_t v52 = v51.u32[0];
  if (v51.u32[0] > 1uLL)
  {
    unint64_t v53 = v8;
    if (v9 <= v8) {
      unint64_t v53 = v8 % v9;
    }
  }
  else
  {
    unint64_t v53 = (v9 - 1) & v8;
  }
  unint64_t v54 = *(uint64_t **)(*(void *)a1 + 8 * v53);
  if (v54)
  {
    char v55 = *((unsigned char *)v2 + 39);
    if (v55 >= 0) {
      uint64_t v56 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v56 = v2[3];
    }
    if (v55 < 0) {
      uint64_t v4 = (void *)v2[2];
    }
    if (v51.u32[0] >= 2uLL)
    {
      int v77 = 0;
      do
      {
        unint64_t v60 = v54;
        unint64_t v54 = (uint64_t *)*v54;
        if (!v54) {
          break;
        }
        unint64_t v80 = v54[1];
        unint64_t v81 = v80;
        if (v80 >= v9) {
          unint64_t v81 = v80 % v9;
        }
        if (v81 != v53) {
          break;
        }
        if (v80 == v8
          && ((uint64_t v82 = *((unsigned __int8 *)v54 + 39), (v82 & 0x80u) == 0)
            ? (uint64_t v83 = *((unsigned __int8 *)v54 + 39))
            : (uint64_t v83 = v54[3]),
              v83 == v56))
        {
          unsigned int v84 = (const void **)(v54 + 2);
          if ((v82 & 0x80) != 0)
          {
            int v92 = memcmp(*v84, v4, v54[3]);
            unint64_t v8 = v97;
            BOOL v78 = v92 == 0;
          }
          else if (*((unsigned char *)v54 + 39))
          {
            uint64_t v85 = v82 - 1;
            int v86 = (unsigned __int8 *)v4;
            do
            {
              int v88 = *(unsigned __int8 *)v84;
              unsigned int v84 = (const void **)((char *)v84 + 1);
              int v87 = v88;
              int v90 = *v86++;
              int v89 = v90;
              BOOL v71 = v85-- != 0;
              char v91 = v71;
              BOOL v73 = v87 == v89;
              BOOL v78 = v87 == v89;
            }
            while (v73 && (v91 & 1) != 0);
          }
          else
          {
            BOOL v78 = 1;
          }
        }
        else
        {
          BOOL v78 = 0;
        }
        int v79 = v77 & !v78;
        v77 |= v78;
      }
      while (v79 != 1);
    }
    else
    {
      int v57 = 0;
      do
      {
        unint64_t v60 = v54;
        unint64_t v54 = (uint64_t *)*v54;
        if (!v54) {
          break;
        }
        uint64_t v61 = v54[1];
        if ((v61 & (v9 - 1)) != v53) {
          break;
        }
        if (v61 == v8
          && ((uint64_t v62 = *((unsigned __int8 *)v54 + 39), (v62 & 0x80u) == 0)
            ? (uint64_t v63 = *((unsigned __int8 *)v54 + 39))
            : (uint64_t v63 = v54[3]),
              v63 == v56))
        {
          float v64 = (const void **)(v54 + 2);
          if ((v62 & 0x80) != 0)
          {
            int v74 = memcmp(*v64, v4, v54[3]);
            unint64_t v8 = v97;
            BOOL v58 = v74 == 0;
          }
          else if (*((unsigned char *)v54 + 39))
          {
            uint64_t v65 = v62 - 1;
            float v66 = (unsigned __int8 *)v4;
            do
            {
              int v68 = *(unsigned __int8 *)v64;
              float v64 = (const void **)((char *)v64 + 1);
              int v67 = v68;
              int v70 = *v66++;
              int v69 = v70;
              BOOL v71 = v65-- != 0;
              char v72 = v71;
              BOOL v73 = v67 == v69;
              BOOL v58 = v67 == v69;
            }
            while (v73 && (v72 & 1) != 0);
          }
          else
          {
            BOOL v58 = 1;
          }
        }
        else
        {
          BOOL v58 = 0;
        }
        char v59 = v57 & !v58;
        v57 |= v58;
      }
      while ((v59 & 1) == 0);
    }
  }
  else
  {
    unint64_t v60 = 0;
  }
  unint64_t v75 = v95[1];
  if (v52 > 1)
  {
    if (v75 >= v9) {
      v75 %= v9;
    }
  }
  else
  {
    v75 &= v9 - 1;
  }
  if (!v60)
  {
    *uint64_t v95 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v95;
    *(void *)(*(void *)a1 + 8 * v75) = a1 + 16;
    if (!*v95) {
      goto LABEL_178;
    }
    unint64_t v76 = *(void *)(*v95 + 8);
    if (v52 > 1)
    {
      if (v76 >= v9) {
        v76 %= v9;
      }
    }
    else
    {
      v76 &= v9 - 1;
    }
LABEL_177:
    *(void *)(*(void *)a1 + 8 * v76) = v95;
    goto LABEL_178;
  }
  *uint64_t v95 = *v60;
  *unint64_t v60 = v95;
  if (*v95)
  {
    unint64_t v76 = *(void *)(*v95 + 8);
    if (v52 > 1)
    {
      if (v76 >= v9) {
        v76 %= v9;
      }
    }
    else
    {
      v76 &= v9 - 1;
    }
    if (v76 != v75) {
      goto LABEL_177;
    }
  }
LABEL_178:
  ++*(void *)(a1 + 24);
}

uint64_t md::RegistryLogic::runBeforeLayoutAtVariableRate(uint64_t a1, os_signpost_id_t *a2, uint64_t **a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  v53[0] = &unk_1EF570578;
  v53[1] = a2;
  v51[0] = &unk_1EF5705C0;
  v51[1] = a2;
  unint64_t v52 = v51;
  uint64_t v56 = v55;
  unint64_t v54 = v53;
  v55[0] = &unk_1EF5705C0;
  v55[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__0NS_9allocatorISJ_EEFvvEEclEv((uint64_t)v53);
  if (v52 == v51)
  {
    (*(void (**)(void *))(v51[0] + 32))(v51);
  }
  else if (v52)
  {
    (*(void (**)(void))(*v52 + 40))();
  }
  if (v54 == v53)
  {
    (*(void (**)(void *))(v53[0] + 32))(v53);
  }
  else if (v54)
  {
    (*(void (**)(void))(*v54 + 40))();
  }
  md::RegistryManager::update(*(void **)(a1 + 120), *(void *)(a1 + 120) + 696, *a3, v6[10]);
  *a4 = *(void *)(a1 + 120);
  unint64_t v8 = +[VKDebugSettings sharedSettings];
  int v9 = [v8 isLogicConsoleEnabled:0xDEBD99099DA2C65BLL];

  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 120);
    float v11 = *(unsigned __int16 **)(v10 + 456);
    float v50 = *(unsigned __int16 **)(v10 + 464);
    if (v11 != v50)
    {
      uint64_t v49 = v6;
      do
      {
        uint64_t v13 = *v11;
        double v14 = *(double *)(md::LayoutContext::frameState((md::LayoutContext *)v6) + 88);
        size_t v15 = (uint64_t **)(a1 + 144);
        while (1)
        {
          float64x2_t v16 = *v15;
          unint64_t v17 = v15;
          if (!*v15) {
            break;
          }
          while (1)
          {
            size_t v15 = (uint64_t **)v16;
            double v18 = *((double *)v16 + 4);
            if (v14 < v18) {
              break;
            }
            if (v18 >= v14)
            {
              uint64_t v19 = (double *)v16;
              goto LABEL_24;
            }
            float64x2_t v16 = (uint64_t *)v16[1];
            if (!v16)
            {
              unint64_t v17 = v15 + 1;
              goto LABEL_20;
            }
          }
        }
LABEL_20:
        uint64_t v19 = (double *)operator new(0x40uLL);
        v19[4] = v14;
        v19[6] = 0.0;
        v19[7] = 0.0;
        v19[5] = 0.0;
        *uint64_t v19 = 0.0;
        v19[1] = 0.0;
        *((void *)v19 + 2) = v15;
        *unint64_t v17 = (uint64_t *)v19;
        uint64_t v20 = **(void **)(a1 + 136);
        size_t v21 = (uint64_t *)v19;
        if (v20)
        {
          *(void *)(a1 + 136) = v20;
          size_t v21 = *v17;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 144), v21);
        ++*(void *)(a1 + 152);
LABEL_24:
        unint64_t v23 = (char *)*((void *)v19 + 6);
        unint64_t v22 = *((void *)v19 + 7);
        if ((unint64_t)v23 < v22)
        {
          *(void *)unint64_t v23 = v13;
          BOOL v12 = v23 + 8;
        }
        else
        {
          unint64_t v24 = (char *)*((void *)v19 + 5);
          uint64_t v25 = (v23 - v24) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            abort();
          }
          uint64_t v27 = v22 - (void)v24;
          if (v27 >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            if (v28 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v29 = operator new(8 * v28);
          }
          else
          {
            uint64_t v29 = 0;
          }
          size_t v30 = &v29[8 * v25];
          *size_t v30 = v13;
          BOOL v12 = v30 + 1;
          if (v23 != v24)
          {
            unint64_t v31 = v23 - 8 - v24;
            if (v31 < 0x58) {
              goto LABEL_76;
            }
            if ((unint64_t)(v24 - v29) < 0x20) {
              goto LABEL_76;
            }
            uint64_t v32 = (v31 >> 3) + 1;
            uint64_t v33 = &v29[8 * v25 - 16];
            uint64_t v34 = v23 - 16;
            uint64_t v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v36 = *(_OWORD *)v34;
              *(v33 - 1) = *((_OWORD *)v34 - 1);
              *uint64_t v33 = v36;
              v33 -= 2;
              v34 -= 32;
              v35 -= 4;
            }
            while (v35);
            v30 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
            v23 -= 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
            if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_76:
              do
              {
                uint64_t v37 = *((void *)v23 - 1);
                v23 -= 8;
                *--size_t v30 = v37;
              }
              while (v23 != v24);
            }
          }
          *((void *)v19 + 5) = v30;
          *((void *)v19 + 6) = v12;
          *((void *)v19 + 7) = &v29[8 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        *((void *)v19 + 6) = v12;
        ++v11;
        uint64_t v6 = v49;
      }
      while (v11 != v50);
    }
    uint64_t v40 = *(void **)(a1 + 136);
    if (v40 != (void *)(a1 + 144))
    {
      do
      {
        uint64_t v41 = md::LayoutContext::frameState((md::LayoutContext *)v6);
        unint64_t v42 = (void *)v40[1];
        if (*(double *)(v41 + 88) - *((double *)v40 + 4) <= 30.0)
        {
          if (v42)
          {
            do
            {
              float v44 = v42;
              unint64_t v42 = (void *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              float v44 = (void *)v40[2];
              BOOL v45 = *v44 == (void)v40;
              uint64_t v40 = v44;
            }
            while (!v45);
          }
        }
        else
        {
          uint64_t v43 = v40;
          if (v42)
          {
            do
            {
              float v44 = v42;
              unint64_t v42 = (void *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              float v44 = (void *)v43[2];
              BOOL v45 = *v44 == (void)v43;
              uint64_t v43 = v44;
            }
            while (!v45);
          }
          if (*(void **)(a1 + 136) == v40) {
            *(void *)(a1 + 136) = v44;
          }
          uint64_t v46 = *(uint64_t **)(a1 + 144);
          --*(void *)(a1 + 152);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v46, v40);
          uint64_t v47 = (void *)v40[5];
          if (v47)
          {
            v40[6] = v47;
            operator delete(v47);
          }
          operator delete(v40);
        }
        uint64_t v40 = v44;
      }
      while (v44 != (void *)(a1 + 144));
    }
  }
  else
  {
    BOOL v39 = *(void **)(a1 + 144);
    uint64_t v38 = (void *)(a1 + 144);
    std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(v39);
    *(v38 - 1) = v38;
    *uint64_t v38 = 0;
    v38[1] = 0;
  }
  if (!v56)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v56 + 48))(v56);
  uint64_t result = (uint64_t)v56;
  if (v56 == v55) {
    return (*(uint64_t (**)(void *))(v55[0] + 32))(v55);
  }
  if (v56) {
    return (*(uint64_t (**)(void))(*v56 + 40))();
  }
  return result;
}

void sub_1A1A49A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__1NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RegistryLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md13RegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15RegistryContextEE3__0NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RegistryLogic", "", v5, 2u);
  }
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC81F81A7CB7767BBLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC81F81A7CB7767BBLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v4 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  unint64_t v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0xE42D19AFCA302E68)
      {
        if (v8[2] == 0xE42D19AFCA302E68) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0xE42D19AFCA302E68) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v12 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v12 = 0x99BED48DEFBBD82BLL % a3;
    }
  }
  else
  {
    unint64_t v12 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  double v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x99BED48DEFBBD82BLL)
      {
        if (v14[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      double v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0x99BED48DEFBBD82BLL)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      double v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v18 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v18 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v18 = (a3 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  uint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0x1AF456233693CD46) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    uint64_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0x1AF456233693CD46) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0x1AF456233693CD46)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  *uint64_t result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t md::LocalNorthLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  v103[0] = &unk_1EF5710B8;
  v103[1] = a2;
  uint64_t v104 = v103;
  v101[0] = &unk_1EF571100;
  v101[1] = a2;
  float v102 = v101;
  unsigned __int16 v106 = v105;
  v105[0] = &unk_1EF571100;
  v105[1] = a2;
  _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v103);
  if (v102 == v101)
  {
    (*(void (**)(void *))(v101[0] + 32))(v101);
  }
  else if (v102)
  {
    (*(void (**)(void))(*v102 + 40))();
  }
  if (v104 == v103)
  {
    (*(void (**)(void *))(v103[0] + 32))(v103);
  }
  else if (v104)
  {
    (*(void (**)(void))(*v104 + 40))();
  }
  char v93 = 0;
  unint64_t v8 = *a3;
  if (!*((unsigned char *)*a3 + 82)) {
    goto LABEL_123;
  }
  uint64_t v10 = a3[1];
  unint64_t v9 = a3[2];
  v99[0] = &unk_1EF571148;
  v99[1] = &v93;
  id v100 = v99;
  uint64_t v11 = (unsigned char *)v8[6];
  unint64_t v12 = (unsigned char *)v8[7];
  if (v11 == v12) {
    goto LABEL_16;
  }
  do
  {
    LOBYTE(v94) = *v11;
    if (!v100)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_156;
    }
    (*(void (**)(void *, long long *))(*v100 + 48))(v100, &v94);
    ++v11;
  }
  while (v11 != v12);
  if (v100 == v99)
  {
LABEL_16:
    (*(void (**)(void *))(v99[0] + 32))(v99);
    goto LABEL_17;
  }
  if (v100) {
    (*(void (**)(void))(*v100 + 40))();
  }
LABEL_17:
  double v13 = *((double *)v9 + 2);
  long double v14 = tan(*((double *)v9 + 1) * 0.5 + 0.785398163);
  v7.n128_f64[0] = log(v14);
  uint64_t v16 = *v10;
  {
    unint64_t v86 = v7.n128_u64[0];
    v7.n128_u64[0] = v86;
    if (v15)
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
      v7.n128_u64[0] = v86;
    }
  }
  uint64_t v17 = *(_WORD **)(v16 + 48);
  uint64_t v18 = *(_WORD **)(v16 + 56);
  uint64_t v19 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v17 != v18)
  {
    uint64_t v20 = *(_WORD **)(v16 + 48);
    while (*v20 != 29)
    {
      v20 += 16;
      if (v20 == v18) {
        goto LABEL_29;
      }
    }
    if (v20 == v18)
    {
      uint64_t v19 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v17 != 29)
      {
        v17 += 16;
        if (v17 == v18)
        {
          uint64_t v17 = *(_WORD **)(v16 + 56);
          break;
        }
      }
      uint64_t v19 = (uint64_t *)(v17 + 4);
    }
  }
LABEL_29:
  int v87 = a4;
  uint64_t v88 = a1;
  double v21 = v13 * 0.159154943 + 0.5;
  double v22 = v7.n128_f64[0] * 0.159154943 + 0.5;
  uint64_t v25 = (uint64_t *)*v19;
  uint64_t v24 = v19 + 1;
  uint64_t v23 = v25;
  if (v25 != v24)
  {
    unsigned int v26 = 0;
    int v27 = -1;
    while (1)
    {
      uint64_t v28 = v23[4];
      uint64_t v29 = (std::__shared_weak_count *)v23[5];
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v28)
      {
        unsigned int v30 = *(unsigned __int8 *)(v28 + 169);
        if (v26 < v30)
        {
          double v31 = 1.0 / (double)(1 << v30);
          double v32 = v31 * (double)*(int *)(v28 + 176);
          if (v21 >= v32)
          {
            double v33 = v31 * (double)((1 << v30) + ~*(_DWORD *)(v28 + 172));
            BOOL v34 = v21 >= v32 + v31 || v22 < v33;
            if (!v34 && v22 < v33 + v31)
            {
              int v27 = *(_DWORD *)(v28 + 716);
              unsigned int v26 = *(unsigned __int8 *)(v28 + 169);
            }
          }
        }
      }
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        long long v36 = (uint64_t *)v23[1];
        if (!v36)
        {
          do
          {
LABEL_52:
            uint64_t v37 = (uint64_t *)v23[2];
            BOOL v56 = *v37 == (void)v23;
            uint64_t v23 = v37;
          }
          while (!v56);
          goto LABEL_31;
        }
      }
      else
      {
        long long v36 = (uint64_t *)v23[1];
        if (!v36) {
          goto LABEL_52;
        }
      }
      do
      {
        uint64_t v37 = v36;
        long long v36 = (uint64_t *)*v36;
      }
      while (v36);
LABEL_31:
      uint64_t v23 = v37;
      if (v37 == v24) {
        goto LABEL_56;
      }
    }
  }
  unsigned int v26 = 0;
  int v27 = -1;
LABEL_56:
  uint64_t v38 = *v10;
  {
    if (v15)
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
  }
  BOOL v39 = *(_WORD **)(v38 + 48);
  uint64_t v40 = *(_WORD **)(v38 + 56);
  uint64_t v41 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v39 != v40)
  {
    unint64_t v42 = *(_WORD **)(v38 + 48);
    while (*v42 != 28)
    {
      v42 += 16;
      if (v42 == v40) {
        goto LABEL_68;
      }
    }
    if (v42 == v40)
    {
      uint64_t v41 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v39 != 28)
      {
        v39 += 16;
        if (v39 == v40)
        {
          BOOL v39 = *(_WORD **)(v38 + 56);
          break;
        }
      }
      uint64_t v41 = (uint64_t *)(v39 + 4);
    }
  }
LABEL_68:
  BOOL v45 = (uint64_t *)*v41;
  float v44 = v41 + 1;
  uint64_t v43 = v45;
  if (v45 != v44)
  {
    while (2)
    {
      uint64_t v46 = v43[4];
      uint64_t v47 = (std::__shared_weak_count *)v43[5];
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v46)
      {
        unsigned int v48 = *(unsigned __int8 *)(v46 + 169);
        if (v26 < v48)
        {
          double v49 = 1.0 / (double)(1 << v48);
          double v50 = v49 * (double)*(int *)(v46 + 176);
          if (v21 >= v50)
          {
            double v51 = v49 * (double)((1 << v48) + ~*(_DWORD *)(v46 + 172));
            BOOL v52 = v21 >= v50 + v49 || v22 < v51;
            if (!v52 && v22 < v51 + v49)
            {
              int v27 = *(_DWORD *)(v46 + 716);
              unsigned int v26 = *(unsigned __int8 *)(v46 + 169);
            }
          }
        }
      }
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        unint64_t v54 = (uint64_t *)v43[1];
        if (v54) {
          goto LABEL_88;
        }
      }
      else
      {
        unint64_t v54 = (uint64_t *)v43[1];
        if (v54)
        {
          do
          {
LABEL_88:
            char v55 = v54;
            unint64_t v54 = (uint64_t *)*v54;
          }
          while (v54);
          goto LABEL_70;
        }
      }
      do
      {
        char v55 = (uint64_t *)v43[2];
        BOOL v56 = *v55 == (void)v43;
        uint64_t v43 = v55;
      }
      while (!v56);
LABEL_70:
      uint64_t v43 = v55;
      if (v55 == v44) {
        break;
      }
      continue;
    }
  }
  BOOL v56 = v27 == *(_DWORD *)(v88 + 168) && v93 == 0;
  if (!v56)
  {
    *(_DWORD *)(v88 + 168) = v27;
    uint64_t v57 = gss::Allocator::instance(v15);
    uint64_t v92 = v57;
    BOOL v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57 + 16))(v57, 16, 4);
    char v59 = v58;
    v90.n128_u64[0] = (unint64_t)v58;
    char v91 = v58 + 2;
    if (v58) {
      *BOOL v58 = 0xF00000005;
    }
    v58[1] = ((unint64_t)(unsigned __int16)v27 << 32) | 0x29;
    v90.n128_u64[1] = (unint64_t)(v58 + 2);
    gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v94, (uint64_t)&v90);
    if ((long long *)(v88 + 120) != &v94) {
      std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)(v88 + 120), v94, *((void **)&v94 + 1), (uint64_t)(*((void *)&v94 + 1) - v94) >> 3);
    }
    if ((void)v94)
    {
      *((void *)&v94 + 1) = v94;
      (*(void (**)(uint64_t, void, void))(*(void *)v96 + 40))(v96, v94, v95 - v94);
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v57 + 40))(v57, v59, 16);
    uint64_t v60 = *v8;
    if (*v8)
    {
      *(void *)((char *)&v94 + 7) = 0;
      *(void *)&long long v94 = 0;
      HIBYTE(v94) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v90, v60, (gss::FeatureAttributeSet *)(v88 + 120), (gss::QueryOverrides *)&v94);
      __n128 v7 = v90;
      uint64_t v61 = *(std::__shared_weak_count **)(v88 + 160);
      __n128 v90 = 0uLL;
      *(__n128 *)(v88 + 152) = v7;
      if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
      uint64_t v62 = (std::__shared_weak_count *)v90.n128_u64[1];
      if (v90.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v90.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  uint64_t v63 = *(void *)(v88 + 152);
  double v64 = 0.0;
  if (!v63)
  {
    float v66 = v87;
    goto LABEL_120;
  }
  uint64_t v65 = *(std::__shared_weak_count **)(v63 + 16);
  float v66 = v87;
  if (!v65) {
    goto LABEL_120;
  }
  int v67 = std::__shared_weak_count::lock(v65);
  if (!v67) {
    goto LABEL_120;
  }
  int v68 = v67;
  if (!*(void *)(v63 + 8))
  {
    if (atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_120;
    }
    LOBYTE(v73) = 0;
    goto LABEL_135;
  }
  int v69 = *(std::__shared_weak_count **)(v63 + 16);
  if (v69 && (int v70 = std::__shared_weak_count::lock(v69)) != 0)
  {
    BOOL v71 = v70;
    unsigned __int8 v72 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(v63 + 8) + 16) + 2786));
    int v73 = v72 & 1;
    if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  else
  {
    unsigned __int8 v76 = atomic_load((unsigned __int8 *)(MEMORY[0x10] + 2786));
    int v73 = v76 & 1;
  }
  if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_135:
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
    if (v73) {
      goto LABEL_136;
    }
    goto LABEL_120;
  }
  if (v73)
  {
LABEL_136:
    uint64_t v77 = *(void *)(v88 + 152);
    BOOL v78 = *(std::__shared_weak_count **)(v88 + 160);
    v90.n128_u64[0] = v77;
    v90.n128_u64[1] = (unint64_t)v78;
    if (v78) {
      atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)&v94, v77, (uint64_t)v78);
    if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    if (v97)
    {
      uint64_t v79 = *(void *)(v94 + 24);
      unint64_t v80 = *(float **)v79;
      if (*(void *)v79
        && (float v81 = *v80, LODWORD(v80) = *v80 == 1.0, *(unsigned char *)(v79 + 10))
        && (v81 != 0.0 ? (BOOL v82 = v81 == 1.0) : (BOOL v82 = 1), !v82)
        || (unsigned int v83 = *(unsigned __int8 *)(v79 + v80 + 11), v81 = 0.0, v83 == 2))
      {
        v90.n128_u8[0] = 1;
        char v98 = 1;
        unsigned int v84 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v79, 0x10Au, 0, &v90);
        float v85 = *v84
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v79, 0x10Au, 1u, &v98)- *v84)* v81);
      }
      else
      {
        float v85 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v94 + 24), 0x10Au, v83, 0);
      }
      double v64 = v85;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v94);
  }
LABEL_120:
  v7.n128_u64[0] = *v66;
  if (*(double *)v66 != v64)
  {
    *(double *)float v66 = v64;
    uint64_t v74 = *(void *)(v88 + 200);
    if (v74)
    {
      double v89 = v64;
      (*(void (**)(uint64_t, double *, double))(*(void *)v74 + 48))(v74, &v89, v7.n128_f64[0]);
    }
  }
LABEL_123:
  if (!v106)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_156:
    __break(1u);
  }
  (*(void (**)(void *, __n128))(*v106 + 48))(v106, v7);
  uint64_t result = (uint64_t)v106;
  if (v106 == v105) {
    return (*(uint64_t (**)(void *))(v105[0] + 32))(v105);
  }
  if (v106) {
    return (*(uint64_t (**)(void))(*v106 + 40))();
  }
  return result;
}

void sub_1A1A4AD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v5 - 160));
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LocalNorthLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LocalNorthLogic", "", v5, 2u);
  }
}

uint64_t _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEEclEOSO_(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (v2 == 5 || v2 == 0) {
    **(unsigned char **)(result + 8) = 1;
  }
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_23>,void ()(geo::Unit<geo::DegreeUnitDescription,double>)>::operator()(uint64_t a1, double *a2)
{
  double v2 = *a2;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 8) + 848));
  [WeakRetained didUpdateVerticalYawTo:v2];
}

void sub_1A1A4B0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1A4B16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A4B480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>>::each(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  os_signpost_id_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueRenderArrayID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::SharedUniqueID>(v3);
  uint64_t v6 = v5;
  __n128 v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  uint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *unint64_t v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 24 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  unint64_t v12 = (void *)result;
LABEL_56:
  *unint64_t v12 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::UniqueRenderArrayID>(int8x8_t *a1)
{
  uint64_t v10 = 0x4F0CC5B74BC3AC16;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4F0CC5B74BC3AC16;
    if (*(void *)&v1 <= 0x4F0CC5B74BC3AC16uLL) {
      uint64_t v3 = 0x4F0CC5B74BC3AC16uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4F0CC5B74BC3AC16;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4F0CC5B74BC3AC16)
      {
        if (v5[2] == 0x4F0CC5B74BC3AC16) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4F0CC5B74BC3AC16) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4F0CC5B74BC3AC16) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A4B9F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      operator new();
    }
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    abort();
  }
  return a2;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  uint64_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    unint64_t v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_1A1A4C444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:nn180100]((void **)(v9 + 136));
  unint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:nn180100](v12);
  std::locale v16 = *(void **)(v9 + 64);
  if (v16)
  {
    *(void *)(v9 + 72) = v16;
    operator delete(v16);
  }
  std::string v17 = *v13;
  if (*v13)
  {
    *(void *)(v9 + 48) = v17;
    operator delete(v17);
  }
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v5 = *(unsigned char **)(a1 + 48);
    unint64_t v12 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12) {
        goto LABEL_22;
      }
      uint64_t v6 = *(unsigned char **)(a1 + 40);
      unint64_t v13 = v5 - v6;
      uint64_t v14 = v5 - v6 + 1;
      if (v14 >= 0)
      {
        unint64_t v15 = v12 - (void)v6;
        if (2 * v15 > v14) {
          uint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v16 = v14;
        }
        if (v16) {
          uint64_t v11 = operator new(v16);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v18 = (char *)v11 + v13;
        uint64_t v19 = (char *)v11 + v16;
        *((unsigned char *)v11 + v13) = v2;
        uint64_t v17 = (uint64_t)v11 + v13 + 1;
        if (v5 == v6) {
          goto LABEL_49;
        }
        if (v13 >= 8 && (unint64_t)(v6 - (unsigned char *)v11) >= 0x20)
        {
          if (v13 >= 0x20)
          {
            unint64_t v25 = v13 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v35 = (long long *)(v5 - 16);
            uint64_t v36 = (char *)v11 + v5 - 16 - v6;
            unint64_t v37 = v13 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v38 = *v35;
              *(v36 - 1) = *(v35 - 1);
              *uint64_t v36 = v38;
              v36 -= 2;
              v35 -= 2;
              v37 -= 32;
            }
            while (v37);
            if (v13 == v25) {
              goto LABEL_73;
            }
            if ((v13 & 0x18) == 0)
            {
              v18 -= v25;
              v5 -= v25;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v25 = 0;
          }
          unint64_t v39 = v25 - (v13 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v40 = &v5[-v25 - 8];
          uint64_t v41 = (char *)(v40 - v6);
          do
          {
            uint64_t v42 = *(void *)v40;
            v40 -= 8;
            *(void *)&v41[(void)v11] = v42;
            v41 -= 8;
            v39 += 8;
          }
          while (v39);
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_73;
          }
          v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
          v5 -= v13 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_80:
        uint64_t v53 = v18 - 1;
        do
        {
          char v54 = *--v5;
          *v53-- = v54;
        }
        while (v5 != v6);
        goto LABEL_86;
      }
LABEL_90:
      abort();
    }
    if ((unint64_t)v5 < v12) {
      goto LABEL_22;
    }
    uint64_t v6 = *(unsigned char **)(a1 + 40);
    unint64_t v21 = v5 - v6;
    uint64_t v22 = v5 - v6 + 1;
    if (v22 < 0) {
      goto LABEL_90;
    }
    unint64_t v23 = v12 - (void)v6;
    if (2 * v23 > v22) {
      uint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v24 = v22;
    }
    if (v24) {
      uint64_t v11 = operator new(v24);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v18 = (char *)v11 + v21;
    uint64_t v19 = (char *)v11 + v24;
    *((unsigned char *)v11 + v21) = v2;
    uint64_t v17 = (uint64_t)v11 + v21 + 1;
    if (v5 == v6) {
      goto LABEL_49;
    }
    if (v21 >= 8 && (unint64_t)(v6 - (unsigned char *)v11) >= 0x20)
    {
      if (v21 >= 0x20)
      {
        unint64_t v26 = v21 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v43 = (long long *)(v5 - 16);
        uint64_t v44 = (char *)v11 + v5 - 16 - v6;
        unint64_t v45 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          _OWORD *v44 = v46;
          v44 -= 2;
          v43 -= 2;
          v45 -= 32;
        }
        while (v45);
        if (v21 == v26) {
          goto LABEL_73;
        }
        if ((v21 & 0x18) == 0)
        {
          v18 -= v26;
          v5 -= v26;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v26 = 0;
      }
      unint64_t v47 = v26 - (v21 & 0xFFFFFFFFFFFFFFF8);
      unsigned int v48 = &v5[-v26 - 8];
      uint64_t v49 = (char *)(v48 - v6);
      do
      {
        uint64_t v50 = *(void *)v48;
        v48 -= 8;
        *(void *)&v49[(void)v11] = v50;
        v49 -= 8;
        v47 += 8;
      }
      while (v47);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_73;
      }
      v18 -= v21 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v21 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_84:
    char v55 = v18 - 1;
    do
    {
      char v56 = *--v5;
      *v55-- = v56;
    }
    while (v5 != v6);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *uint64_t v5 = v2;
    uint64_t v17 = (uint64_t)(v5 + 1);
    goto LABEL_89;
  }
  uint64_t v6 = *(unsigned char **)(a1 + 40);
  unint64_t v7 = v5 - v6;
  uint64_t v8 = v5 - v6 + 1;
  if (v8 < 0) {
    goto LABEL_90;
  }
  unint64_t v9 = v4 - (void)v6;
  if (2 * v9 > v8) {
    uint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v10 = v8;
  }
  if (v10) {
    uint64_t v11 = operator new(v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (char *)v11 + v7;
  uint64_t v19 = (char *)v11 + v10;
  *((unsigned char *)v11 + v7) = v2;
  uint64_t v17 = (uint64_t)v11 + v7 + 1;
  if (v5 == v6)
  {
LABEL_49:
    uint64_t v11 = v18;
    goto LABEL_87;
  }
  if (v7 < 8 || (unint64_t)(v6 - (unsigned char *)v11) < 0x20) {
    goto LABEL_75;
  }
  if (v7 < 0x20)
  {
    unint64_t v20 = 0;
    goto LABEL_54;
  }
  unint64_t v20 = v7 & 0xFFFFFFFFFFFFFFE0;
  uint64_t v27 = (long long *)(v5 - 16);
  unint64_t v28 = (char *)v11 + v5 - 16 - v6;
  unint64_t v29 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v30 = *v27;
    *(v28 - 1) = *(v27 - 1);
    *unint64_t v28 = v30;
    v28 -= 2;
    v27 -= 2;
    v29 -= 32;
  }
  while (v29);
  if (v7 == v20) {
    goto LABEL_73;
  }
  if ((v7 & 0x18) != 0)
  {
LABEL_54:
    unint64_t v31 = v20 - (v7 & 0xFFFFFFFFFFFFFFF8);
    double v32 = &v5[-v20 - 8];
    uint64_t v33 = (char *)(v32 - v6);
    do
    {
      uint64_t v34 = *(void *)v32;
      v32 -= 8;
      *(void *)&v33[(void)v11] = v34;
      v33 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFF8))
    {
      v18 -= v7 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v7 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_75;
    }
LABEL_73:
    uint64_t v5 = v6;
    goto LABEL_87;
  }
  v18 -= v20;
  v5 -= v20;
LABEL_75:
  unint64_t v51 = v18 - 1;
  do
  {
    char v52 = *--v5;
    *v51-- = v52;
  }
  while (v5 != v6);
LABEL_86:
  uint64_t v5 = *(unsigned char **)(a1 + 40);
LABEL_87:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v19;
  if (v5) {
    operator delete(v5);
  }
LABEL_89:
  *(void *)(a1 + 48) = v17;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = a2;
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v6, a3);
    if (v6 != v7) {
      continue;
    }
    end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    size_t v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1);
    if (v10 == v7) {
      break;
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (v6 != v7);
  if (v7 == a2) {
    operator new();
  }
  if (v7 != a3)
  {
    if (*v7 == 124)
    {
      uint64_t v11 = v7 + 1;
      unint64_t v12 = v7 + 1;
      while (1)
      {
        unint64_t v13 = v12;
        unint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v12, a3);
        if (v12 == v13)
        {
          uint64_t v14 = a1->__end_;
          unsigned int v15 = a1->__marked_count_;
          size_t v16 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1);
          if (v16 == v13)
          {
LABEL_15:
            if (v13 == v11) {
              operator new();
            }
            operator new();
          }
          std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v16, a3, v14, v15 + 1, a1->__marked_count_ + 1);
        }
        if (v12 == v13) {
          goto LABEL_15;
        }
      }
    }
    return v7;
  }
  return a3;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (uint64_t)v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v18 = a2[1];
        if (v18 == 66) {
          operator new();
        }
        if (v18 == 98) {
          operator new();
        }
      }
    }
    else if (v6 == 94)
    {
      operator new();
    }
    return (uint64_t)v3;
  }
  if (v6 == 36) {
    operator new();
  }
  BOOL v8 = v6 == 40;
  unint64_t v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return (uint64_t)v3;
  }
  BOOL v8 = *v7 == 63;
  unint64_t v9 = a2 + 2;
  if (!v8 || v9 == a3) {
    return (uint64_t)v3;
  }
  int v11 = *v9;
  if (v11 == 33)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100]((uint64_t)&v20);
    v20.__flags_ = a1->__flags_;
    unint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v20, v3 + 3, a3);
    unsigned int marked_count = v20.__marked_count_;
    unsigned int v14 = a1->__marked_count_;
    unsigned int v15 = a1;
    BOOL v16 = 1;
    goto LABEL_26;
  }
  if (v11 != 61) {
    return (uint64_t)v3;
  }
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100]((uint64_t)&v20);
  v20.__flags_ = a1->__flags_;
  unint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v20, v3 + 3, a3);
  unsigned int marked_count = v20.__marked_count_;
  unsigned int v14 = a1->__marked_count_;
  unsigned int v15 = a1;
  BOOL v16 = 0;
LABEL_26:
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(v15, &v20, v16, v14);
  a1->__marked_count_ += marked_count;
  if (v12 != a3 && *v12 == 41)
  {
    uint64_t v3 = v12 + 1;
    std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v20.__traits_.__loc_);
    return (uint64_t)v3;
  }
  uint64_t v19 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(v19);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3) {
    return;
  }
  int v5 = *a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return;
    case '(':
      if (a2 + 1 == a3) {
        goto LABEL_48;
      }
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        BOOL v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
        if (v8 == a3 || *v8 != 41) {
          goto LABEL_48;
        }
LABEL_26:
        --*p_open_count;
        return;
      }
      if ((this->__flags_ & 2) == 0) {
        operator new();
      }
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      unint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
      if (v12 != a3 && *v12 == 41)
      {
        if ((this->__flags_ & 2) == 0) {
          operator new();
        }
        goto LABEL_26;
      }
LABEL_48:
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_49:
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_50:
      unsigned int v15 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(v15, v16, v17, v18, v19, v20);
      return;
    case '*':
    case '+':
    case '?':
    case '{':
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      goto LABEL_48;
    case '.':
      operator new();
    case '[':
      std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
      return;
    case '\\':
      if (v5 != 92) {
        return;
      }
      unint64_t v9 = a2 + 1;
      if (a2 + 1 == a3) {
        goto LABEL_50;
      }
      int v10 = *v9;
      unsigned int v11 = v10 - 48;
      if (v10 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v11);
        return;
      }
      if ((v10 - 49) > 8) {
        goto LABEL_39;
      }
      unint64_t v13 = a2 + 2;
      if (a2 + 2 == a3)
      {
        unint64_t v13 = a3;
        goto LABEL_37;
      }
      while (1)
      {
        int v14 = *v13;
        if ((v14 - 48) > 9) {
          break;
        }
        if (v11 >= 0x19999999) {
          goto LABEL_49;
        }
        ++v13;
        unsigned int v11 = v14 + 10 * v11 - 48;
        if (v13 == a3)
        {
          unint64_t v13 = a3;
          break;
        }
      }
      if (!v11) {
        goto LABEL_49;
      }
LABEL_37:
      if (v11 > this->__marked_count_) {
        goto LABEL_49;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v11);
      if (v13 == v9)
      {
LABEL_39:
        switch(*v9)
        {
          case 'D':
            operator new();
          case 'S':
            operator new();
          case 'W':
            operator new();
          case 'd':
            operator new();
          case 's':
            operator new();
          case 'w':
            operator new();
          default:
            std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, (unsigned __int8 *)a2 + 1, (unsigned __int8 *)a3, 0);
            break;
        }
      }
      return;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
      return;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(std::basic_regex<char> *this, char *a2, char *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  if (a2 == a3) {
    return;
  }
  unsigned __int32 v6 = this->__flags_ & 0x1F0;
  int v7 = *a2;
  if (v7 <= 62)
  {
    if (v7 == 42)
    {
      int v18 = a2 + 1;
      if (v6) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = v18 == a3;
      }
      if (!v19 && *v18 == 63) {
        operator new();
      }
      operator new();
    }
    if (v7 == 43)
    {
      BOOL v8 = a2 + 1;
      if (!v6 && v8 != a3 && *v8 == 63) {
        operator new();
      }
      operator new();
    }
    return;
  }
  if (v7 == 63)
  {
    size_t v20 = a2 + 1;
    if (v6) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = v20 == a3;
    }
    if (!v21 && *v20 == 63) {
      operator new();
    }
    operator new();
  }
  if (v7 == 123)
  {
    unint64_t v9 = (unsigned __int8 *)(a2 + 1);
    if (a2 + 1 != a3)
    {
      int v10 = *v9;
      if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
      {
        int v11 = v10 - 48;
        unint64_t v12 = (unsigned __int8 *)(a2 + 2);
        if (a2 + 2 == a3)
        {
LABEL_19:
          unint64_t v12 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            int v13 = *v12;
            if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
              break;
            }
            if (v11 >= 214748364) {
              goto LABEL_70;
            }
            int v11 = v13 + 10 * v11 - 48;
            if (++v12 == (unsigned __int8 *)a3) {
              goto LABEL_19;
            }
          }
        }
        if (v12 != v9)
        {
          if (v12 == (unsigned __int8 *)a3)
          {
LABEL_71:
            unint64_t v29 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
            std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(v29, v30, v31, v32);
            return;
          }
          int v14 = (char)*v12;
          if (v14 == 44)
          {
            uint64_t v22 = (char *)(v12 + 1);
            if (v12 + 1 != (unsigned __int8 *)a3)
            {
              int v23 = *v22;
              if (v23 == 125)
              {
                size_t v24 = (char *)(v12 + 2);
                if (!v6 && v24 != a3 && *v24 == 63) {
                  std::basic_regex<char,std::regex_traits<char>>::__push_nongreedy_inf_repeat[abi:nn180100]();
                }
                operator new();
              }
              if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38) {
                goto LABEL_71;
              }
              int v25 = v23 - 48;
              unint64_t v26 = (char *)(v12 + 2);
              if (v26 == a3)
              {
LABEL_58:
                unint64_t v26 = a3;
              }
              else
              {
                while (1)
                {
                  int v27 = *v26;
                  if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
                    break;
                  }
                  if (v25 >= 214748364) {
                    goto LABEL_70;
                  }
                  int v25 = v27 + 10 * v25 - 48;
                  if (++v26 == a3) {
                    goto LABEL_58;
                  }
                }
              }
              if (v26 == v22 || v26 == a3 || *v26 != 125) {
                goto LABEL_71;
              }
              if (v25 >= v11)
              {
                unint64_t v28 = v26 + 1;
                if (v6 || v28 == a3 || *v28 != 63) {
                  operator new();
                }
                size_t v16 = v11;
                size_t v17 = v25;
                __mexp_begin = __mexp_begin;
                __mexp_end = __mexp_end;
                goto LABEL_67;
              }
            }
          }
          else if (v14 == 125)
          {
            unsigned int v15 = (char *)(v12 + 1);
            if (v6 || v15 == a3 || *v15 != 63) {
              operator new();
            }
            size_t v16 = v11;
            __mexp_begin = __mexp_begin;
            __mexp_end = __mexp_end;
            size_t v17 = v11;
LABEL_67:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, v16, v17, __s, __mexp_begin, __mexp_end, 0);
            return;
          }
        }
      }
    }
LABEL_70:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    goto LABEL_71;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    switch((char)v5)
    {
      case '0':
        if (!a4)
        {
          std::basic_regex<char>::value_type v6 = 0;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return;
      case 'c':
        if (v4 + 1 == a3) {
          goto LABEL_81;
        }
        unsigned __int8 v7 = v4[1];
        if (((v7 & 0xDF) - 65) > 0x19u) {
          goto LABEL_81;
        }
        std::basic_regex<char>::value_type v8 = v7 & 0x1F;
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(unsigned char *)a4 = v8;
          *((unsigned char *)a4 + 1) = 0;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
        }
        return;
      case 'f':
        if (!a4)
        {
          std::basic_regex<char>::value_type v6 = 12;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return;
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v6 = 10;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v6 = 13;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v6 = 9;
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return;
      case 'u':
        if (v4 + 1 == a3) {
          goto LABEL_81;
        }
        int v9 = v4[1];
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
          goto LABEL_81;
        }
        v4 += 2;
        if (v4 == a3) {
          goto LABEL_81;
        }
        int v10 = *v4;
        if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38 && (v10 | 0x20u) - 97 >= 6) {
          goto LABEL_81;
        }
        goto LABEL_38;
      case 'v':
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(_WORD *)a4 = 11;
        }
        else
        {
          std::basic_regex<char>::value_type v6 = 11;
LABEL_64:
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        }
        return;
      case 'x':
LABEL_38:
        if (v4 + 1 == a3) {
          goto LABEL_81;
        }
        unsigned __int8 v11 = v4[1];
        char v12 = -48;
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
          goto LABEL_43;
        }
        v11 |= 0x20u;
        if ((v11 - 97) >= 6u) {
          goto LABEL_81;
        }
        char v12 = -87;
LABEL_43:
        if (v4 + 2 == a3) {
          goto LABEL_81;
        }
        unsigned __int8 v13 = v4[2];
        char v14 = -48;
        if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
          goto LABEL_48;
        }
        v13 |= 0x20u;
        if ((v13 - 97) >= 6u)
        {
LABEL_81:
          size_t v16 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
          std::basic_regex<char,std::regex_traits<char>>::__push_char(v16, v17);
        }
        else
        {
          char v14 = -87;
LABEL_48:
          std::basic_regex<char>::value_type v15 = v14 + v13 + 16 * (v12 + v11);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            *(unsigned char *)a4 = v15;
            *((unsigned char *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
          }
        }
        break;
      default:
        if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
          goto LABEL_81;
        }
        if (!a4) {
          goto LABEL_64;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return;
    }
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1A1A4EA6C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  unint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  MEMORY[0x1A6239270](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3)
  {
    uint64_t v5 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    md::LightingLogic::writeLogicContext(v5);
  }
  else
  {
    switch(*a2)
    {
      case 'D':
        *(_DWORD *)(a5 + 164) |= 0x400u;
        break;
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'c':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_7;
      case 'S':
        *(_DWORD *)(a5 + 164) |= 0x4000u;
        break;
      case 'W':
        *(_DWORD *)(a5 + 164) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:nn180100](a5);
        break;
      case 'b':
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        break;
      case 'd':
        *(_DWORD *)(a5 + 160) |= 0x400u;
        break;
      case 's':
        *(_DWORD *)(a5 + 160) |= 0x4000u;
        break;
      case 'w':
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](a5, 95);
        break;
      default:
        if (*a2)
        {
LABEL_7:
          std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
        }
        else
        {
          if (*(char *)(a4 + 23) < 0)
          {
            *(void *)(a4 + 8) = 1;
            a4 = *(void *)a4;
          }
          else
          {
            *(unsigned char *)(a4 + 23) = 1;
          }
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 1) = 0;
        }
        break;
    }
  }
}

void md::LightingLogic::writeLogicContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, double *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v662 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 141)) {
    _ZF = *a5 == 0;
  }
  else {
    _ZF = 0;
  }
  if (_ZF) {
    return;
  }
  *(void *)&v626.f64[0] = a5;
  float v13 = *(float *)(a2 + 3076);
  float v14 = *(float *)(a2 + 3080);
  std::basic_regex<char>::value_type v15 = +[VKDebugSettings sharedSettings];
  int v16 = [v15 lightingEnableAmbient];
  int v613 = [v15 lightingEnableLight1];
  char v17 = [v15 lightingOverrideAmbient];
  char v623 = [v15 lightingOverrideLight1];
  [v15 overrideLight1Azimuth];
  float v19 = v18;
  [v15 overrideLight1Altitude];
  float v21 = v20;
  [v15 overrideAmbient];
  unsigned int v616 = v22;
  [v15 overrideAmbient];
  unsigned int v610 = v23;
  [v15 overrideAmbient];
  unsigned int v608 = v24;
  [v15 overrideLight1];
  unsigned int v604 = v25;
  [v15 overrideLight1];
  unsigned int v602 = v26;
  int v612 = v16;
  [v15 overrideLight1];
  id v601 = v27;
  uint64_t v28 = *(void *)(a1 + 176);
  unint64_t v29 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)v628 = v28;
  *(void *)&v628[8] = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::ScenePropertyID>::QueryableLocker(v639, v28, (uint64_t)v29);
  float v30 = v14 + v13;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  float v31 = fmaxf(v30, 1.0);
  float32x4_t v614 = (float32x4_t)xmmword_1A28FE5F0;
  if (!v640)
  {
    float32x4_t v619 = (float32x4_t)xmmword_1A28FE5E0;
    float32x4_t v611 = (float32x4_t)xmmword_1A28FE600;
    goto LABEL_46;
  }
  __asm { FMOV            V2.4S, #1.0 }
  uint64_t v36 = v639[0];
  if ((v17 & 1) == 0)
  {
    uint64_t v38 = *(void *)(v639[0] + 24);
    unint64_t v39 = *(float **)v38;
    __int32 v622 = _Q2.i32[3];
    if (*(void *)v38 && (float v40 = *v39, LODWORD(v39) = *v39 == 1.0, *(unsigned char *)(v38 + 10)) && v40 != 0.0 && v40 != 1.0
      || (unsigned int v41 = *(unsigned __int8 *)(v38 + v39 + 11), v41 == 2))
    {
      if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v38, 0xFu, 0)) {
        goto LABEL_23;
      }
      unsigned int v41 = 1;
    }
    if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v38, 0xFu, v41))
    {
      float32x4_t v611 = (float32x4_t)xmmword_1A28FE600;
LABEL_25:
      _Q2.i32[3] = v622;
      if (v623) {
        goto LABEL_13;
      }
LABEL_26:
      uint64_t v42 = *(void *)(v36 + 24);
      unint64_t v43 = *(float **)v42;
      if (*(void *)v42 && (float v44 = *v43, LODWORD(v43) = *v43 == 1.0, *(unsigned char *)(v42 + 10)) && v44 != 0.0 && v44 != 1.0
        || (unsigned int v45 = *(unsigned __int8 *)(v42 + v43 + 11), v45 == 2))
      {
        if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(void *)(v36 + 24), 0x10u, 0))
        {
LABEL_34:
          gss::RenderStyle<gss::ScenePropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v628, v42, 0x10u, fminf(fmaxf(v31, 0.0), 23.0));
          _Q2 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v628)), (float32x4_t)vdupq_n_s32(0x37800080u));
          uint64_t v36 = v639[0];
          goto LABEL_36;
        }
        unsigned int v45 = 1;
      }
      if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v42, 0x10u, v45))
      {
        _Q2 = (float32x4_t)xmmword_1A28FE5E0;
        goto LABEL_36;
      }
      goto LABEL_34;
    }
LABEL_23:
    gss::RenderStyle<gss::ScenePropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v628, v38, 0xFu, fminf(fmaxf(v31, 0.0), 23.0));
    float32x4_t v611 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v628)), (float32x4_t)vdupq_n_s32(0x37800080u));
    uint64_t v36 = v639[0];
    goto LABEL_25;
  }
  v37.i64[0] = __PAIR64__(v610, v616);
  v37.i64[1] = __PAIR64__(_Q2.u32[3], v608);
  float32x4_t v611 = v37;
  if ((v623 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_13:
  _Q2.i64[0] = __PAIR64__(v602, v604);
  _Q2.i32[2] = (int)v601;
LABEL_36:
  uint64_t v46 = *(void *)(v36 + 24);
  unint64_t v47 = *(float **)v46;
  float32x4_t v619 = _Q2;
  if (*(void *)v46 && (float v48 = *v47, LODWORD(v47) = *v47 == 1.0, *(unsigned char *)(v46 + 10)) && v48 != 0.0 && v48 != 1.0
    || (unsigned int v49 = *(unsigned __int8 *)(v46 + v47 + 11), v49 == 2))
  {
    if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v46, 0x13u, 0)) {
      goto LABEL_44;
    }
    unsigned int v49 = 1;
  }
  if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v46, 0x13u, v49))
  {
LABEL_44:
    gss::RenderStyle<gss::ScenePropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v628, v46, 0x13u, fminf(fmaxf(v31, 0.0), 23.0));
    LOWORD(v50) = *(_WORD *)v628;
    v51.i32[0] = *(_DWORD *)&v628[2];
    v51.i16[2] = *(_WORD *)&v628[6];
    float v52 = (float)v50 * 0.000015259;
    float32x4_t v614 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v51)), (float32x4_t)vdupq_n_s32(0x37800080u));
    int v53 = *(unsigned __int8 *)(a1 + 141);
    if (!*(unsigned char *)(a1 + 141)) {
      goto LABEL_57;
    }
    goto LABEL_47;
  }
LABEL_46:
  float v52 = 0.23333;
  int v53 = *(unsigned __int8 *)(a1 + 141);
  if (!*(unsigned char *)(a1 + 141))
  {
LABEL_57:
    LOBYTE(v61) = 2 * (v53 != 0);
    char v617 = v61;
    goto LABEL_70;
  }
LABEL_47:
  if (!v640) {
    goto LABEL_57;
  }
  uint64_t v54 = *(void *)(v639[0] + 24);
  char v55 = *(float **)v54;
  if (*(void *)v54 && (float v56 = *v55, LODWORD(v55) = *v55 == 1.0, *(unsigned char *)(v54 + 10)) && v56 != 0.0 && v56 != 1.0
    || (v57 = *(unsigned __int8 *)(v54 + v55 + 11), float v56 = 0.0, v57 == 2))
  {
    v628[0] = 1;
    LOBYTE(v654) = 1;
    uint64_t v58 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(v54, 0, 0, v628);
    uint64_t v59 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(v54, 0, 1u, &v654);
    if (v56 >= 1.0) {
      uint64_t v60 = (int *)v59;
    }
    else {
      uint64_t v60 = (int *)v58;
    }
    int v61 = *v60;
  }
  else
  {
    int v61 = *(_DWORD *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(*(void *)(v639[0] + 24), 0, v57, 0);
  }
  uint64_t v62 = *(void *)(v639[0] + 24);
  uint64_t v63 = *(float **)v62;
  if (*(void *)v62 && (float v64 = *v63, LODWORD(v63) = *v63 == 1.0, *(unsigned char *)(v62 + 10)) && v64 != 0.0 && v64 != 1.0
    || (v65 = *(unsigned __int8 *)(v62 + v63 + 11), float v64 = 0.0, v65 == 2))
  {
    v628[0] = 1;
    LOBYTE(v654) = 1;
    uint64_t v66 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(v62, 6u, 0, v628);
    uint64_t v67 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(v62, 6u, 1u, &v654);
    if (v64 >= 1.0) {
      int v68 = (int *)v67;
    }
    else {
      int v68 = (int *)v66;
    }
    int v69 = *v68;
  }
  else
  {
    int v69 = *(_DWORD *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(*(void *)(v639[0] + 24), 6u, v65, 0);
  }
  char v617 = v69;
LABEL_70:
  double v70 = 0.0;
  double v71 = 0.0;
  if ((_BYTE)v61) {
    goto LABEL_85;
  }
  id v601 = objc_alloc(MEMORY[0x1E4F645D8]);
  double v72 = *a6;
  double v73 = a6[1];
  double v74 = *(double *)(a2 + 16);
  v605 = +[VKDebugSettings sharedSettings];
  v609 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v603 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  unint64_t v75 = (id *)(a1 + 152);
  if (!*(void *)(a1 + 152))
  {
    unsigned __int8 v76 = [MEMORY[0x1E4F1C9A8] currentCalendar];
    uint64_t v77 = (void *)[v76 copy];
    *(void *)v628 = &unk_1EF559398;
    *(void *)&v628[8] = v77;
    objc_storeStrong((id *)(a1 + 152), v77);
    id v78 = v77;
    uint64_t v79 = *(void **)&v628[8];
    *(void *)&v628[8] = 0;

    *(void *)v628 = &unk_1EF559398;
  }
  if ([v605 lightingCameraLocalTime])
  {
    uint64_t v80 = (uint64_t)(v74 * 13750.9871);
    if (*(void *)(a1 + 168) != v80)
    {
      id v81 = *v75;
      BOOL v82 = [MEMORY[0x1E4F1CAF0] timeZoneForSecondsFromGMT:(uint64_t)(v74 * 13750.9871)];
      [v81 setTimeZone:v82];

      *(void *)(a1 + 168) = v80;
    }
  }
  else
  {
    unsigned int v83 = [*v75 timeZone];
    unsigned int v84 = [MEMORY[0x1E4F1CAF0] systemTimeZone];
    char v85 = [v83 isEqual:v84];

    if ((v85 & 1) == 0)
    {
      id v86 = *v75;
      int v87 = [MEMORY[0x1E4F1CAF0] systemTimeZone];
      [v86 setTimeZone:v87];
    }
  }
  if ([v609 BOOLForKey:@"__LightingStopTime"])
  {
    uint64_t v88 = [*v75 dateBySettingHour:0 minute:0 second:0 ofDate:v603 options:0];
    uint64_t v89 = [v609 integerForKey:@"__LightingStopTimeHour"];
    uint64_t v90 = [v609 integerForKey:@"__LightingStopTimeMinute"];
    uint64_t v91 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeInterval:v88 sinceDate:(double)v89 * 3600.0 + (double)v90 * 60.0];
  }
  else
  {
    if (![v605 lightingAccelerateTime])
    {
      char v93 = v603;
      goto LABEL_84;
    }
    uint64_t v88 = [*v75 dateBySettingHour:0 minute:0 second:0 ofDate:v603 options:0];
    [v603 timeIntervalSinceDate:v88];
    uint64_t v91 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeInterval:v88 sinceDate:v92 * 3600.0];
  }
  char v93 = (void *)v91;

LABEL_84:
  long long v94 = objc_msgSend(v601, "initWithLocation:date:body:", v93, 0, v72, v73);

  [v94 azimuth];
  double v96 = v95;
  [v94 altitude];
  double v98 = v97;

  double v71 = v96 * 0.0174532925;
  double v70 = v98 * 0.0174532925;
LABEL_85:
  v635[0] = 0;
  if (!v640) {
    goto LABEL_125;
  }
  unint64_t v99 = *(gss **)(v639[0] + 24);
  id v100 = *(float **)v99;
  if (!*(void *)v99)
  {
    BOOL v102 = 0;
    goto LABEL_92;
  }
  float v101 = *v100;
  BOOL v102 = *v100 == 1.0;
  if (!*((unsigned char *)v99 + 10) || v101 == 0.0 || v101 == 1.0)
  {
LABEL_92:
    unsigned int v103 = *((unsigned __int8 *)v99 + v102 + 11);
    if (v103 != 2) {
      goto LABEL_95;
    }
  }
  if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(void *)(v639[0] + 24), 0x48u, 0)) {
    goto LABEL_96;
  }
  unsigned int v103 = 1;
LABEL_95:
  if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd((uint64_t)v99, 0x48u, v103))
  {
    int v106 = 1;
    if (!*(unsigned char *)(a1 + 141)) {
      goto LABEL_125;
    }
    goto LABEL_122;
  }
LABEL_96:
  if (v100)
  {
    float v104 = *v100;
    BOOL v105 = *v100 == 1.0;
    if (*((unsigned char *)v99 + 10) && v104 != 0.0 && v104 != 1.0)
    {
LABEL_105:
      v643[0] = 1;
      LOBYTE(v642) = 1;
      uint64_t v108 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<std::string>(v99, 0, v643);
      unint64_t v109 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<std::string>(v99, 1u, &v642);
      if (v104 >= 1.0) {
        unsigned int v110 = v109;
      }
      else {
        unsigned int v110 = v108;
      }
      if ((*((char *)v110 + 23) & 0x80000000) == 0)
      {
        long long v111 = *(_OWORD *)v110;
        uint64_t v112 = v110[2];
LABEL_112:
        *(void *)&v628[16] = v112;
        *(_OWORD *)v628 = v111;
        goto LABEL_115;
      }
      std::string::__init_copy_ctor_external((std::string *)v628, (const std::string::value_type *)*v110, v110[1]);
      goto LABEL_115;
    }
  }
  else
  {
    BOOL v105 = 0;
  }
  unsigned int v107 = *((unsigned __int8 *)v99 + v105 + 11);
  float v104 = 0.0;
  if (v107 == 2) {
    goto LABEL_105;
  }
  unint64_t v113 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<std::string>(v99, v107, 0);
  if ((*((char *)v113 + 23) & 0x80000000) == 0)
  {
    long long v111 = *(_OWORD *)v113;
    uint64_t v112 = v113[2];
    goto LABEL_112;
  }
  std::string::__init_copy_ctor_external((std::string *)v628, (const std::string::value_type *)*v113, v113[1]);
LABEL_115:
  *(void *)&long long v654 = *(void *)&v628[8];
  unsigned int v114 = *(void **)v628;
  *(void *)((char *)&v654 + 7) = *(void *)&v628[15];
  char v115 = v628[23];
  memset(v628, 0, 24);
  if (v635[0])
  {
    if (v638 < 0)
    {
      operator delete(__p);
      std::string __p = v114;
      *(void *)v637 = v654;
      *(void *)&v637[7] = *(void *)((char *)&v654 + 7);
      char v638 = v115;
      if ((v628[23] & 0x80000000) != 0) {
        operator delete(*(void **)v628);
      }
    }
    else
    {
      std::string __p = v114;
      *(void *)v637 = v654;
      *(void *)&v637[7] = *(void *)((char *)&v654 + 7);
      char v638 = v115;
    }
  }
  else
  {
    std::string __p = v114;
    *(void *)v637 = v654;
    *(void *)&v637[7] = *(void *)((char *)&v654 + 7);
    char v638 = v115;
    v635[0] = 1;
  }
  int v106 = v640;
  if (!*(unsigned char *)(a1 + 141)) {
    goto LABEL_125;
  }
LABEL_122:
  if (v106)
  {
    if (v623)
    {
      double v71 = v19 * 0.0174532925;
      double v116 = v21 * 0.0174532925;
    }
    else
    {
      uint64_t v243 = *(void *)(v639[0] + 24);
      float v244 = fminf(fmaxf(v31, 0.0), 23.0);
      int v245 = *(float **)v243;
      if (*(void *)v243
        && (float v246 = *v245, LODWORD(v245) = *v245 == 1.0, *(unsigned char *)(v243 + 10))
        && v246 != 0.0
        && v246 != 1.0
        || (v247 = *(unsigned __int8 *)(v243 + v245 + 11), float v246 = 0.0, v247 == 2))
      {
        v628[0] = 1;
        LOBYTE(v654) = 1;
        unsigned int v248 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v243, 0, v628, v244);
        unsigned int v249 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v243, 1u, (BOOL *)&v654, v244);
        if (v246 >= 1.0) {
          unsigned int v250 = v249;
        }
        else {
          unsigned int v250 = v248;
        }
      }
      else
      {
        unsigned int v250 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<unsigned int>(*(void *)(v639[0] + 24), v247, 0, v244);
      }
      if (v61 == 2)
      {
        double v251 = 3.14159265 - *(double *)(a2 + 48);
      }
      else
      {
        double v251 = 0.0;
        if (!(_BYTE)v61) {
          double v251 = v71;
        }
      }
      uint64_t v252 = *(void *)(v639[0] + 24);
      float v253 = *(float **)v252;
      if (*(void *)v252
        && (float v254 = *v253, LODWORD(v253) = *v253 == 1.0, *(unsigned char *)(v252 + 10))
        && v254 != 0.0
        && v254 != 1.0
        || (v255 = *(unsigned __int8 *)(v252 + v253 + 11), float v254 = 0.0, v255 == 2))
      {
        v628[0] = 1;
        LOBYTE(v654) = 1;
        int v256 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(v252, 9u, 0, v628, v244);
        int v257 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(v252, 9u, 1u, (BOOL *)&v654, v244);
        if (v254 >= 1.0) {
          int v258 = v257;
        }
        else {
          int v258 = v256;
        }
      }
      else
      {
        int v258 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(*(void *)(v639[0] + 24), 9u, v255, 0, v244);
      }
      uint64_t v259 = *(void *)(v639[0] + 24);
      unint64_t v260 = *(float **)v259;
      if (*(void *)v259
        && (float v261 = *v260, LODWORD(v260) = *v260 == 1.0, *(unsigned char *)(v259 + 10))
        && v261 != 0.0
        && v261 != 1.0
        || (v262 = *(unsigned __int8 *)(v259 + v260 + 11), float v261 = 0.0, v262 == 2))
      {
        v628[0] = 1;
        LOBYTE(v654) = 1;
        int v263 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(v259, 0xCu, 0, v628, v244);
        int v264 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(v259, 0xCu, 1u, (BOOL *)&v654, v244);
        if (v261 < 1.0) {
          int v264 = v263;
        }
      }
      else
      {
        int v264 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(*(void *)(v639[0] + 24), 0xCu, v262, 0, v244);
      }
      double v265 = 1.57079633;
      if (v617 == 2)
      {
        double v265 = 1.57079633 - *(double *)(a2 + 40);
      }
      else
      {
        if (!v617) {
          double v265 = v70;
        }
        if (v617 == 1) {
          double v265 = 0.0;
        }
      }
      double v71 = v251 + (double)v250 * 0.0174532925;
      double v116 = fmax(v265 + (double)v258 * 0.0174532925, (double)v264 * 0.0174532925);
    }
    goto LABEL_141;
  }
LABEL_125:
  if (v61 == 2)
  {
    double v71 = 3.14159265 - *(double *)(a2 + 48);
  }
  else if ((_BYTE)v61)
  {
    double v71 = 0.0;
  }
  double v117 = 0.0;
  if (*(unsigned char *)(a1 + 141)) {
    double v118 = 0.0;
  }
  else {
    double v118 = v70;
  }
  double v119 = 1.57079633;
  if (v617 == 2)
  {
    double v117 = 1.57079633 - *(double *)(a2 + 40);
  }
  else
  {
    if (!v617) {
      double v119 = v70;
    }
    if (v617 != 1) {
      double v117 = v119;
    }
  }
  double v116 = fmax(v117, v118);
LABEL_141:
  float v120 = v116 + -0.1;
  float v121 = fmaxf(v120, 0.0);
  float v122 = v121 * 10.0;
  BOOL v123 = v121 <= 0.1;
  float v124 = 1.0;
  if (v123) {
    float v124 = v122;
  }
  float v624 = v124;
  __double2 v125 = __sincos_stret(v116);
  _D8 = v125.__sinval;
  __double2 v127 = __sincos_stret(v71);
  _D12 = v125.__cosval * v127.__sinval;
  _D15 = v125.__cosval * v127.__cosval;
  *(double *)(a7 + 80) = v71;
  *(double *)(a7 + 88) = v116;
  *(double *)(a7 + 48) = v125.__cosval * v127.__sinval;
  *(double *)(a7 + 56) = v125.__cosval * v127.__cosval;
  *(double *)(a7 + 64) = v125.__sinval;
  *(void *)(a7 + 72) = 0;
  if (**(void **)&v626.f64[0])
  {
    float v130 = *(void **)a7;
    unint64_t v131 = *(void *)(*(void *)a7 + 8);
    if (v131) {
      uint64_t v132 = v130[9];
    }
    else {
      uint64_t v132 = 0;
    }
    float v133 = *(void **)(a7 + 16);
    unint64_t v134 = v133[1];
    if (v134) {
      float v135 = (float16x4_t *)v133[9];
    }
    else {
      float v135 = 0;
    }
    float v136 = *(void **)(a7 + 32);
    unint64_t v137 = v136[1];
    if (v137) {
      uint64_t v138 = v136[9];
    }
    else {
      uint64_t v138 = 0;
    }
    __asm
    {
      FCVT            H1, D12
      FCVT            H2, D15
    }
    *(_WORD *)uint64_t v132 = _H1;
    __asm { FCVT            H3, D8 }
    *(_WORD *)(v132 + 2) = _H2;
    *(_WORD *)(v132 + 4) = _H3;
    _H0 = 0;
    *(_WORD *)(v132 + 6) = 0;
    *(_WORD *)uint64_t v138 = _H1;
    *(_WORD *)(v138 + 2) = _H2;
    *(_WORD *)(v138 + 4) = _H3;
    *(_WORD *)(v138 + 6) = 0;
    if (v613)
    {
      _D0 = vcvt_f16_f32(vmulq_n_f32(v619, v624));
      *float v135 = _D0;
      *(float16x4_t *)(v132 + 16) = _D0;
      *(float *)_D0.i32 = v624 * v52;
      __asm { FCVT            H0, S0 }
      float16x4_t v144 = vcvt_f16_f32(vmulq_n_f32(v614, v624));
    }
    else
    {
      *(void *)(v132 + 16) = 0;
      *float v135 = 0;
      float16x4_t v144 = 0;
    }
    *(_WORD *)(v132 + 8) = _H0;
    *(_WORD *)(v132 + 14) = v144.i16[2];
    *(_DWORD *)(v132 + 10) = v144.i32[0];
    *(_WORD *)(v138 + 8) = _H0;
    *(_DWORD *)(v138 + 10) = v144.i32[0];
    *(_WORD *)(v138 + 14) = v144.i16[2];
    float16x4_t v145 = vcvt_f16_f32(v611);
    if (!v612) {
      float16x4_t v145 = 0;
    }
    *(float16x4_t *)(v132 + 24) = v145;
    v135[1] = v145;
    if (v137)
    {
      unint64_t v146 = v136[8];
      if (v146 <= v137) {
        unint64_t v146 = v137;
      }
      v136[7] = 0;
      v136[8] = v146;
    }
    if (v135 && v134)
    {
      if (v133[8] > v134) {
        unint64_t v134 = v133[8];
      }
      v133[7] = 0;
      v133[8] = v134;
    }
    if (v131)
    {
      if (v130[8] > v131) {
        unint64_t v131 = v130[8];
      }
      v130[7] = 0;
      v130[8] = v131;
    }
  }
  float v625 = v31;
  __double2 v147 = __sincos_stret(v71 * 0.5 + 1.57079633);
  __double2 v148 = __sincos_stret(v116 * 0.5);
  double v149 = -(v147.__cosval * v148.__cosval * 0.707106781 - v148.__sinval * v147.__cosval * 0.707106781);
  double v150 = -(v148.__sinval * v147.__sinval * 0.707106781 - v147.__sinval * v148.__cosval * 0.707106781);
  double v151 = v148.__sinval * v147.__sinval * 0.707106781 + v147.__sinval * v148.__cosval * 0.707106781;
  double v152 = v148.__sinval * v147.__cosval * 0.707106781 + v147.__cosval * v148.__cosval * 0.707106781;
  double v153 = v150 + v150;
  double v154 = (v150 + v150) * v150;
  double v155 = (v151 + v151) * v151;
  double v156 = v149 + v149;
  double v157 = (v149 + v149) * v150;
  double v158 = (v151 + v151) * v152;
  double v159 = (v149 + v149) * v151;
  double v160 = 1.0 - (v149 + v149) * v149;
  double v161 = v153 * v151;
  *(double *)v628 = 1.0 - (v155 + v154);
  *(double *)&v628[8] = v158 + v157;
  v629.f64[0] = v157 - v158;
  v629.f64[1] = v160 - v155;
  v631.f64[0] = v153 * v152 + v159;
  v631.f64[1] = v161 - v156 * v152;
  *(double *)&v628[16] = v159 - v153 * v152;
  *(double *)&long long v630 = v156 * v152 + v161;
  *(double *)&long long v632 = v160 - v154;
  *(void *)&v628[24] = 0;
  *((void *)&v630 + 1) = 0;
  *((void *)&v632 + 1) = 0;
  float64x2_t v633 = 0uLL;
  *(void *)&long long v634 = 0;
  *((void *)&v634 + 1) = 0x3FF0000000000000;
  *(double *)(a7 + 128) = _D12;
  *(double *)(a7 + 136) = _D15;
  *(double *)(a7 + 144) = v125.__sinval;
  *(void *)(a7 + 152) = 0;
  geo::optional<std::string>::operator=(a7 + 96, (uint64_t)v635);
  if (*(unsigned __int8 *)(a2 + 3776) - 1 > 2)
  {
    *(_OWORD *)(a7 + 160) = *(_OWORD *)(a7 + 128);
    double v217 = *(double *)(a7 + 144);
    uint64_t v213 = *(void *)(a7 + 152);
  }
  else
  {
    double v162 = *(double *)(a2 + 16);
    long double v163 = tan(*(double *)(a2 + 8) * 0.5 + 0.785398163);
    long double v164 = log(v163);
    long double v165 = exp(floor(v164 * 325.949323 + 1024.0) * 0.00306796158 + -3.14005867);
    double v166 = atan(v165) * 2.0 + -1.57079633;
    long double v167 = fmod(floor(v162 * 325.949323 + 1024.0) * 0.00306796158 + 0.00153398079, 6.28318531);
    double v168 = fmod(v167 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v169 = __sincos_stret(v166);
    double v170 = 6378137.0 / sqrt(v169.__sinval * v169.__sinval * -0.00669437999 + 1.0);
    __double2 v171 = __sincos_stret(v168);
    long double v172 = v171.__cosval * (v170 * v169.__cosval);
    long double v173 = v171.__sinval * (v170 * v169.__cosval);
    long double v174 = v169.__sinval * 0.99330562 * v170;
    double v175 = sqrt(v172 * v172 + v173 * v173);
    double v176 = atan2(v174, v175 * 0.996647189);
    double v177 = atan2(v173, v172);
    __double2 v178 = __sincos_stret(v176);
    long double v179 = atan2(v174 + v178.__sinval * v178.__sinval * 42841.3115 * v178.__sinval, v175 + v178.__cosval * v178.__cosval * -42697.6727 * v178.__cosval);
    __double2 v180 = __sincos_stret(v179 * 0.5);
    double sinval = v180.__sinval;
    double v182 = (sinval + sinval) * v180.__cosval;
    double v183 = 1.0 - (sinval + sinval) * sinval;
    __double2 v184 = __sincos_stret(v177 * 0.5);
    double v185 = v184.__sinval / sqrt(v182 * v182 + v183 * v183);
    double v186 = v185 * v182;
    double v187 = v185 * v183;
    double v188 = -(v184.__cosval * v180.__sinval);
    double v189 = -(v187 * v180.__sinval - v186 * v180.__cosval);
    double v190 = v186 * v180.__sinval + v187 * v180.__cosval;
    double v191 = v188 - v190 + v189 + v180.__cosval * v184.__cosval;
    double v192 = v190 + v180.__cosval * v184.__cosval - v184.__cosval * v180.__sinval - v189;
    double v193 = v189 + v180.__cosval * v184.__cosval - v188 + v190;
    double v194 = v193 * 0.5;
    double v195 = (v180.__cosval * v184.__cosval - (v189 - v184.__cosval * v180.__sinval + v190)) * 0.5;
    double v196 = v192 * 0.5 * v192;
    double v197 = v193 * 0.5 * v193;
    double v620 = 1.0 - (v197 + v196);
    double v198 = v192 * 0.5 * v191;
    double v199 = v195 * v193;
    double v200 = v198 - v199;
    double v201 = v195 * v192;
    *(double *)&unint64_t v202 = v195 * v192 + v194 * v191;
    double v203 = v199 + v198;
    double v204 = 1.0 - v191 * v191 * 0.5;
    double v205 = v204 - v197;
    *(double *)v643 = v620;
    *(double *)&v643[8] = v200;
    double v206 = v195 * v191;
    double v207 = v194 * v192 - v206;
    double v208 = v194 * v191 - v201;
    double v209 = v206 + v194 * v192;
    *(_OWORD *)&v643[16] = v202;
    double v644 = v203;
    double v645 = v204 - v197;
    double v646 = v207;
    uint64_t v647 = 0;
    double v210 = v204 - v196;
    double v648 = v208;
    double v649 = v209;
    double v650 = v204 - v196;
    long long v651 = 0u;
    long long v652 = 0u;
    uint64_t v653 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)&v654, (double *)v628, (double *)v643);
    *(_OWORD *)v628 = v654;
    *(_OWORD *)&v628[16] = v655;
    float64x2_t v629 = v656;
    long long v630 = v657;
    float64x2_t v631 = v658;
    long long v632 = v659;
    float64x2_t v633 = v660;
    long long v634 = v661;
    double v211 = *(double *)(a7 + 128);
    double v212 = *(double *)(a7 + 136);
    double v214 = *(double *)(a7 + 144);
    uint64_t v213 = *(void *)(a7 + 152);
    double v215 = v211 * v620 + v212 * v200 + v214 * *(double *)&v202;
    double v216 = v211 * v203 + v212 * v205 + v214 * v207;
    double v217 = v211 * v208 + v212 * v209 + v214 * v210;
    *(double *)(a7 + 160) = v215;
    *(double *)(a7 + 168) = v216;
  }
  float v218 = v625;
  *(double *)(a7 + 176) = v217;
  *(void *)(a7 + 184) = v213;
  float v219 = 0.0;
  if (!*(unsigned char *)(a1 + 140)) {
    float v219 = fmin(fmax(fabs(sqrt(*(double *)(a2 + 496) * *(double *)(a2 + 496)+ *(double *)(a2 + 504) * *(double *)(a2 + 504)+ *(double *)(a2 + 512) * *(double *)(a2 + 512))+ -6378137.0)* 0.000000666666667+ -4.66666667, 0.0), 1.0);
  }
  *(float *)(a7 + 424) = v219;
  if (!**(void **)&v626.f64[0]) {
    goto LABEL_545;
  }
  if (!*(unsigned char *)(a1 + 120))
  {
    *(_DWORD *)(a7 + 192) = 0;
    [v15 daVinciGroundAmbientOcclusionRadius];
    float v236 = v235;
    [v15 daVinciGroundAmbientOcclusionIntensity];
    float v238 = v237;
    if (!v640 || ([v15 daVinciLightingStylesOverrideEnabled] & 1) != 0) {
      goto LABEL_424;
    }
    uint64_t v239 = *(void *)(v639[0] + 24);
    unsigned int v240 = *(float **)v239;
    if (*(void *)v239)
    {
      float v241 = *v240;
      BOOL v242 = *v240 == 1.0;
      if (*(unsigned char *)(v239 + 10) && v241 != 0.0 && v241 != 1.0)
      {
LABEL_364:
        if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(void *)(v639[0] + 24), 0x51u, 0)) {
          goto LABEL_367;
        }
        unsigned int v459 = 1;
LABEL_366:
        if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v239, 0x51u, v459)) {
          goto LABEL_376;
        }
LABEL_367:
        float v460 = fminf(fmaxf(v625, 0.0), 23.0);
        if (v240)
        {
          float v461 = *v240;
          BOOL v462 = *v240 == 1.0;
          if (*(unsigned char *)(v239 + 10) && v461 != 0.0 && v461 != 1.0) {
            goto LABEL_374;
          }
        }
        else
        {
          BOOL v462 = 0;
        }
        int v463 = *(unsigned __int8 *)(v239 + v462 + 11);
        float v461 = 0.0;
        if (v463 != 2)
        {
          gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v239, 0x51u, v463, 0, v460);
          float v236 = v467;
LABEL_376:
          *(float *)(a7 + 196) = v236;
          uint64_t v468 = *(void *)(v639[0] + 24);
          v469 = *(float **)v468;
          if (*(void *)v468)
          {
            float v470 = *v469;
            BOOL v471 = *v469 == 1.0;
            if (*(unsigned char *)(v468 + 10) && v470 != 0.0 && v470 != 1.0)
            {
LABEL_383:
              if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(void *)(v639[0] + 24), 0x52u, 0)) {
                goto LABEL_386;
              }
              unsigned int v472 = 1;
LABEL_385:
              if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v468, 0x52u, v472)) {
                goto LABEL_425;
              }
LABEL_386:
              float v473 = fminf(fmaxf(v625, 0.0), 23.0);
              if (v469)
              {
                float v474 = *v469;
                BOOL v475 = *v469 == 1.0;
                if (*(unsigned char *)(v468 + 10) && v474 != 0.0 && v474 != 1.0) {
                  goto LABEL_393;
                }
              }
              else
              {
                BOOL v475 = 0;
              }
              int v476 = *(unsigned __int8 *)(v468 + v475 + 11);
              float v474 = 0.0;
              if (v476 != 2) {
                goto LABEL_592;
              }
LABEL_393:
              LOBYTE(v654) = 1;
              v643[0] = 1;
              gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v468, 0x52u, 0, (BOOL *)&v654, v473);
              float v478 = v477;
              gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v468, 0x52u, 1, v643, v473);
LABEL_591:
              float v238 = v478 + (float)((float)(v479 - v478) * v474);
              goto LABEL_425;
            }
          }
          else
          {
            BOOL v471 = 0;
          }
          unsigned int v472 = *(unsigned __int8 *)(v468 + v471 + 11);
          if (v472 != 2) {
            goto LABEL_385;
          }
          goto LABEL_383;
        }
LABEL_374:
        LOBYTE(v654) = 1;
        v643[0] = 1;
        gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v239, 0x51u, 0, (BOOL *)&v654, v460);
        float v465 = v464;
        gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v239, 0x51u, 1, v643, v460);
        float v236 = v465 + (float)((float)(v466 - v465) * v461);
        goto LABEL_376;
      }
    }
    else
    {
      BOOL v242 = 0;
    }
    unsigned int v459 = *(unsigned __int8 *)(v239 + v242 + 11);
    if (v459 != 2) {
      goto LABEL_366;
    }
    goto LABEL_364;
  }
  double v220 = *(double *)(a2 + 32);
  unsigned int v221 = *(unsigned __int8 *)(a2 + 3776) - 1;
  if (v221 >= 3)
  {
    double v222 = *(double *)(a2 + 8);
    long double v223 = cos(v222 + v222) * -559.82 + 111132.92;
    long double v224 = v223 + cos(v222 * 4.0) * 1.175;
    long double v225 = v224 + cos(v222 * 6.0) * -0.0023;
    double v226 = v222 * 0.5;
    long double v227 = tan(v222 * 0.5 + 0.78103484);
    double v228 = log(v227);
    long double v229 = tan(v226 + 0.789761487);
    double v220 = fabs((log(v229) - v228) * 0.159154943) * v220 / v225;
  }
  double v641 = -1.79769313e308;
  double v642 = 1.79769313e308;
  *(void *)&long long v654 = a2;
  *((void *)&v654 + 1) = v628;
  *(void *)&long long v655 = &v642;
  *((void *)&v655 + 1) = &v641;
  uint64_t v230 = *a4;
  {
    qword_1EB3176C0 = 0;
    qword_1EB3176B8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
  }
  unint64_t v231 = *(_WORD **)(v230 + 48);
  float v232 = *(_WORD **)(v230 + 56);
  if (v231 == v232)
  {
    unint64_t v233 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    unint64_t v233 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    uint64_t v234 = *(_WORD **)(v230 + 48);
    while (*v234 != 33)
    {
      v234 += 16;
      if (v234 == v232) {
        goto LABEL_238;
      }
    }
    if (v234 == v232)
    {
      unint64_t v233 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v231 != 33)
      {
        v231 += 16;
        if (v231 == v232)
        {
          unint64_t v231 = *(_WORD **)(v230 + 56);
          break;
        }
      }
      unint64_t v233 = (uint64_t *)(v231 + 4);
    }
  }
LABEL_238:
  uint64_t v268 = *v233;
  size_t v266 = v233 + 1;
  unint64_t v267 = (void *)v268;
  if ((uint64_t *)v268 != v266)
  {
    do
    {
      md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)const::$_0::operator()((uint64_t)&v654, v267[4], (std::__shared_weak_count *)v267[5]);
      unint64_t v274 = (uint64_t *)v267[1];
      if (v274)
      {
        do
        {
          unint64_t v275 = v274;
          unint64_t v274 = (uint64_t *)*v274;
        }
        while (v274);
      }
      else
      {
        do
        {
          unint64_t v275 = (uint64_t *)v267[2];
          _ZF = *v275 == (void)v267;
          unint64_t v267 = v275;
        }
        while (!_ZF);
      }
      unint64_t v267 = v275;
    }
    while (v275 != v266);
  }
  uint64_t v269 = *a4;
  {
    qword_1EB3176C0 = 0;
    qword_1EB3176B8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
  }
  long long v270 = *(_WORD **)(v269 + 48);
  long long v271 = *(_WORD **)(v269 + 56);
  unint64_t v272 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v270 != v271)
  {
    long long v273 = *(_WORD **)(v269 + 48);
    while (*v273 != 54)
    {
      v273 += 16;
      if (v273 == v271) {
        goto LABEL_258;
      }
    }
    if (v273 == v271)
    {
      unint64_t v272 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v270 != 54)
      {
        v270 += 16;
        if (v270 == v271)
        {
          long long v270 = *(_WORD **)(v269 + 56);
          break;
        }
      }
      unint64_t v272 = (uint64_t *)(v270 + 4);
    }
  }
LABEL_258:
  uint64_t v278 = *v272;
  uint8x8_t v276 = v272 + 1;
  unint64_t v277 = (void *)v278;
  if ((uint64_t *)v278 != v276)
  {
    do
    {
      md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)const::$_0::operator()((uint64_t)&v654, v277[4], (std::__shared_weak_count *)v277[5]);
      BOOL v289 = (uint64_t *)v277[1];
      if (v289)
      {
        do
        {
          unint64_t v290 = v289;
          BOOL v289 = (uint64_t *)*v289;
        }
        while (v289);
      }
      else
      {
        do
        {
          unint64_t v290 = (uint64_t *)v277[2];
          _ZF = *v290 == (void)v277;
          unint64_t v277 = v290;
        }
        while (!_ZF);
      }
      unint64_t v277 = v290;
    }
    while (v290 != v276);
  }
  double v279 = *(double *)(a2 + 496);
  double v280 = *(double *)(a2 + 504);
  double v281 = *(double *)(a2 + 512);
  double v282 = v279 + *(double *)(a2 + 3088) * v220;
  double v283 = v280 + *(double *)(a2 + 3096) * v220;
  double v284 = v281 + *(double *)(a2 + 3104) * v220;
  if (v221 >= 3)
  {
    double v288 = 1.0;
    double v286 = 0.0;
    double v287 = 0.0;
  }
  else
  {
    double v285 = 1.0 / sqrt(v282 * v282 + v283 * v283 + v284 * v284);
    double v286 = v285 * v282;
    double v287 = v285 * v283;
    double v288 = v285 * v284;
  }
  double v291 = *(double *)(a2 + 1200);
  double v292 = v291 - v279;
  double v293 = *(double *)(a2 + 1208);
  double v294 = v293 - v280;
  double v295 = *(double *)(a2 + 1216);
  double v296 = v295 - v281;
  double v297 = (v291 - v279) * v286 + (v293 - v280) * v287 + (v295 - v281) * v288;
  if (fabs(v297) <= 2.22044605e-16)
  {
    double v370 = *(double *)(a2 + 1176);
    double v371 = *(double *)(a2 + 1184);
    double v372 = *(double *)(a2 + 1192);
    float64x2_t v373 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v370), v629, v371), v631, v372);
    v374.f64[1] = *(float64_t *)&v643[8];
    v374.f64[0] = *(double *)&v634 + *(double *)&v628[16] * v370 + *(double *)&v630 * v371 + *(double *)&v632 * v372;
    float64x2_t v375 = (float64x2_t)vextq_s8((int8x16_t)v373, (int8x16_t)v373, 8uLL);
    v373.f64[1] = v375.f64[1];
    v373.f64[0] = *(float64_t *)v643;
    v376.i64[1] = *(void *)&v375.f64[1];
    v376.i64[0] = *(void *)&v374.f64[0];
    float64x2_t v377 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v373, v374), v376, *(int8x16_t *)v643);
    v375.f64[1] = v374.f64[0];
    int8x16_t v378 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v291), v629, v293), v631, v295);
    v379.f64[1] = v377.f64[1];
    v379.f64[0] = *(double *)&v634 + *(double *)&v628[16] * v291 + *(double *)&v630 * v293 + *(double *)&v632 * v295;
    v374.f64[0] = v379.f64[0];
    float64x2_t v380 = (float64x2_t)vextq_s8(v378, v378, 8uLL);
    v381.f64[1] = v380.f64[1];
    v381.f64[0] = v377.f64[0];
    int8x16_t v382 = (int8x16_t)vcgtq_f64(v381, v379);
    v381.f64[1] = v380.f64[1];
    v381.f64[0] = v374.f64[0];
    int8x16_t v383 = vbslq_s8(v382, (int8x16_t)v381, (int8x16_t)v377);
    v380.f64[1] = v374.f64[0];
    float64x2_t v384 = vmaxnmq_f64(vmaxnmq_f64(*(float64x2_t *)&v643[16], v375), v380);
    v377.f64[0] = *(float64_t *)(a2 + 1224);
    v380.f64[0] = *(float64_t *)(a2 + 1232);
    v381.f64[0] = *(float64_t *)(a2 + 1240);
    int8x16_t v385 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v377.f64[0]), v629, v380.f64[0]), v631, v381.f64[0]);
    *(void *)&v377.f64[1] = v383.i64[1];
    v377.f64[0] = *(double *)&v634
                + *(double *)&v628[16] * v377.f64[0]
                + *(double *)&v630 * v380.f64[0]
                + *(double *)&v632 * v381.f64[0];
    v374.f64[0] = v377.f64[0];
    float64x2_t v386 = (float64x2_t)vextq_s8(v385, v385, 8uLL);
    v381.f64[1] = v386.f64[1];
    *(void *)&v381.f64[0] = v383.i64[0];
    float64x2_t v387 = (float64x2_t)vcgtq_f64(v381, v377);
    v381.f64[1] = v386.f64[1];
    v381.f64[0] = v374.f64[0];
    int8x16_t v388 = vbslq_s8((int8x16_t)v387, (int8x16_t)v381, v383);
    v386.f64[1] = v374.f64[0];
    float64x2_t v389 = vmaxnmq_f64(v384, v386);
    v387.f64[0] = *(float64_t *)(a2 + 1248);
    v386.f64[0] = *(float64_t *)(a2 + 1256);
    v381.f64[0] = *(float64_t *)(a2 + 1264);
    int8x16_t v390 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v387.f64[0]), v629, v386.f64[0]), v631, v381.f64[0]);
    *(void *)&v387.f64[1] = v388.i64[1];
    v387.f64[0] = *(double *)&v634
                + *(double *)&v628[16] * v387.f64[0]
                + *(double *)&v630 * v386.f64[0]
                + *(double *)&v632 * v381.f64[0];
    float64x2_t v391 = (float64x2_t)vextq_s8(v390, v390, 8uLL);
    v381.f64[1] = v391.f64[1];
    *(void *)&v381.f64[0] = v388.i64[0];
    v390.i64[1] = *(void *)&v391.f64[1];
    v390.i64[0] = *(void *)&v387.f64[0];
    int8x16_t v392 = vbslq_s8((int8x16_t)vcgtq_f64(v381, v387), v390, v388);
    v391.f64[1] = v387.f64[0];
    float64x2_t v393 = vmaxnmq_f64(v389, v391);
    v387.f64[0] = *(float64_t *)(a2 + 1272);
    v391.f64[0] = *(float64_t *)(a2 + 1280);
    v381.f64[0] = *(float64_t *)(a2 + 1288);
    int8x16_t v394 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v387.f64[0]), v629, v391.f64[0]), v631, v381.f64[0]);
    *(void *)&v387.f64[1] = v392.i64[1];
    v387.f64[0] = *(double *)&v634
                + *(double *)&v628[16] * v387.f64[0]
                + *(double *)&v630 * v391.f64[0]
                + *(double *)&v632 * v381.f64[0];
    v374.f64[0] = v387.f64[0];
    float64x2_t v395 = (float64x2_t)vextq_s8(v394, v394, 8uLL);
    v381.f64[1] = v395.f64[1];
    *(void *)&v381.f64[0] = v392.i64[0];
    float64x2_t v396 = (float64x2_t)vcgtq_f64(v381, v387);
    v381.f64[1] = v395.f64[1];
    v381.f64[0] = v374.f64[0];
    int8x16_t v397 = vbslq_s8((int8x16_t)v396, (int8x16_t)v381, v392);
    v395.f64[1] = v374.f64[0];
    float64x2_t v398 = vmaxnmq_f64(v393, v395);
    v396.f64[0] = *(float64_t *)(a2 + 1296);
    v395.f64[0] = *(float64_t *)(a2 + 1304);
    v381.f64[0] = *(float64_t *)(a2 + 1312);
    float64x2_t v399 = vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v396.f64[0]), v629, v395.f64[0]);
    *(void *)&v396.f64[1] = v397.i64[1];
    v396.f64[0] = *(double *)&v634
                + *(double *)&v628[16] * v396.f64[0]
                + *(double *)&v630 * v395.f64[0]
                + *(double *)&v632 * v381.f64[0];
    v374.f64[0] = v396.f64[0];
    int8x16_t v400 = (int8x16_t)vmlaq_n_f64(v399, v631, v381.f64[0]);
    float64x2_t v401 = (float64x2_t)vextq_s8(v400, v400, 8uLL);
    v381.f64[1] = v401.f64[1];
    *(void *)&v381.f64[0] = v397.i64[0];
    float64x2_t v402 = (float64x2_t)vcgtq_f64(v381, v396);
    v381.f64[1] = v401.f64[1];
    v381.f64[0] = v374.f64[0];
    int8x16_t v403 = vbslq_s8((int8x16_t)v402, (int8x16_t)v381, v397);
    v401.f64[1] = v374.f64[0];
    float64x2_t v404 = vmaxnmq_f64(v398, v401);
    v402.f64[0] = *(float64_t *)(a2 + 1320);
    v401.f64[0] = *(float64_t *)(a2 + 1328);
    v381.f64[0] = *(float64_t *)(a2 + 1336);
    int8x16_t v405 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v402.f64[0]), v629, v401.f64[0]), v631, v381.f64[0]);
    *(void *)&v402.f64[1] = v403.i64[1];
    v402.f64[0] = *(double *)&v634
                + *(double *)&v628[16] * v402.f64[0]
                + *(double *)&v630 * v401.f64[0]
                + *(double *)&v632 * v381.f64[0];
    v374.f64[0] = v402.f64[0];
    float64x2_t v406 = (float64x2_t)vextq_s8(v405, v405, 8uLL);
    v381.f64[1] = v406.f64[1];
    *(void *)&v381.f64[0] = v403.i64[0];
    int8x16_t v407 = (int8x16_t)vcgtq_f64(v381, v402);
    v381.f64[1] = v406.f64[1];
    v381.f64[0] = v374.f64[0];
    v406.f64[1] = v374.f64[0];
    int8x16_t v408 = vbslq_s8(v407, (int8x16_t)v381, v403);
    float64x2_t v409 = vmaxnmq_f64(v404, v406);
    v407.i64[0] = *(void *)(a2 + 1344);
    v406.f64[0] = *(float64_t *)(a2 + 1352);
    v381.f64[0] = *(float64_t *)(a2 + 1360);
    float64x2_t v410 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, *(double *)v407.i64), v629, v406.f64[0]), v631, v381.f64[0]);
    *(void *)&v411.f64[1] = v408.i64[1];
    v411.f64[0] = *(double *)&v634
                + *(double *)&v628[16] * *(double *)v407.i64
                + *(double *)&v630 * v406.f64[0]
                + *(double *)&v632 * v381.f64[0];
    float64x2_t v412 = (float64x2_t)vextq_s8((int8x16_t)v410, (int8x16_t)v410, 8uLL);
    v410.f64[1] = v412.f64[1];
    *(void *)&v410.f64[0] = v408.i64[0];
    int8x16_t v413 = (int8x16_t)vcgtq_f64(v410, v411);
    v411.f64[1] = v412.f64[1];
    v412.f64[1] = v411.f64[0];
    int8x16_t v368 = vbslq_s8(v413, (int8x16_t)v411, v408);
    *(int8x16_t *)v643 = v368;
    *(float64x2_t *)&v643[16] = vmaxnmq_f64(v409, v412);
    double v369 = *(double *)&v643[24];
    float64x2_t v367 = (float64x2_t)vextq_s8(v368, *(int8x16_t *)&v643[16], 8uLL);
  }
  else
  {
    double v298 = (v286 * v282 + v287 * v283 + v288 * v284 - (v286 * v279 + v287 * v280 + v288 * v281)) / v297;
    double v299 = *(double *)(a2 + 1296) - v279;
    double v300 = *(double *)(a2 + 1304) - v280;
    double v301 = *(double *)(a2 + 1312) - v281;
    double v302 = *(double *)(a2 + 1248) - v279;
    double v303 = *(double *)(a2 + 1256) - v280;
    double v304 = *(double *)(a2 + 1264) - v281;
    double v305 = *(double *)(a2 + 1344) - v279;
    double v306 = *(double *)(a2 + 1352) - v280;
    double v307 = *(double *)(a2 + 1360) - v281;
    double v308 = v279 + v298 * v292;
    double v309 = v280 + v298 * v294;
    double v310 = v281 + v298 * v296;
    double v311 = v279 + v299 * v298;
    double v312 = v280 + v300 * v298;
    double v627 = v281 + v301 * v298;
    double v313 = v279 + v302 * v298;
    double v314 = v280 + v303 * v298;
    double v621 = v281 + v304 * v298;
    double v315 = v279 + v305 * v298;
    double v316 = v280 + v306 * v298;
    double v618 = v281 + v307 * v298;
    double v317 = sqrt(v292 * v292 + v294 * v294 + v296 * v296);
    double v318 = v220 * (v317 + v317) / *(double *)(a2 + 976);
    double v319 = v318 / v317;
    double v320 = v279 + v319 * v292;
    double v321 = v280 + v319 * v294;
    double v322 = v281 + v319 * v296;
    double v323 = v318 / sqrt(v299 * v299 + v300 * v300 + v301 * v301);
    double v324 = v279 + v323 * v299;
    double v325 = v280 + v323 * v300;
    double v326 = v281 + v323 * v301;
    double v327 = v318 / sqrt(v302 * v302 + v303 * v303 + v304 * v304);
    double v328 = v279 + v327 * v302;
    double v329 = v280 + v327 * v303;
    double v330 = v281 + v327 * v304;
    double v331 = v318 / sqrt(v305 * v305 + v306 * v306 + v307 * v307);
    double v332 = v279 + v331 * v305;
    double v333 = v280 + v331 * v306;
    double v334 = v281 + v331 * v307;
    float64x2_t v335 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v308), v629, v309), v631, v310);
    double v336 = *(double *)&v634 + *(double *)&v628[16] * v308 + *(double *)&v630 * v309 + *(double *)&v632 * v310;
    float64x2_t v337 = vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v313), v629, v314);
    double v338 = *(double *)&v634 + *(double *)&v628[16] * v313 + *(double *)&v630 * v314;
    float v218 = v625;
    float64x2_t v339 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v311), v629, v312), v631, v627);
    double v340 = *(double *)&v634 + *(double *)&v628[16] * v311 + *(double *)&v630 * v312 + *(double *)&v632 * v627;
    float64x2_t v341 = vmlaq_n_f64(v337, v631, v621);
    double v342 = v338 + *(double *)&v632 * v621;
    float64x2_t v343 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v315), v629, v316), v631, v618);
    double v344 = *(double *)&v634 + *(double *)&v628[16] * v315 + *(double *)&v630 * v316 + *(double *)&v632 * v618;
    float64x2_t v345 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v320), v629, v321), v631, v322);
    double v346 = *(double *)&v634 + *(double *)&v628[16] * v320 + *(double *)&v630 * v321 + *(double *)&v632 * v322;
    float64x2_t v347 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v324), v629, v325), v631, v326);
    double v348 = *(double *)&v634 + *(double *)&v628[16] * v324 + *(double *)&v630 * v325 + *(double *)&v632 * v326;
    float64x2_t v349 = vminnmq_f64(v345, vminnmq_f64(v343, vminnmq_f64(v341, vminnmq_f64(v339, vminnmq_f64(v335, (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL))))));
    double v350 = *(double *)&v634 + *(double *)&v628[16] * v328 + *(double *)&v630 * v329 + *(double *)&v632 * v330;
    float64x2_t v351 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v328), v629, v329), v631, v330);
    v352.f64[1] = v349.f64[1];
    v352.f64[0] = v336;
    double v353 = *(double *)&v634 + *(double *)&v628[16] * v332 + *(double *)&v630 * v333 + *(double *)&v632 * v334;
    float64x2_t v354 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v633, *(float64x2_t *)v628, v332), v629, v333), v631, v334);
    double v355 = -1.79769313e308;
    v356.f64[1] = v347.f64[1];
    v356.f64[0] = -1.79769313e308;
    int64x2_t v357 = vcgtq_f64(v352, v356);
    signed __int32 v358 = vmovn_s64(vcgtq_f64(v349, v347)).u32[0];
    *(int32x2_t *)v357.i8 = vmovn_s64(v357);
    __int32 v359 = v357.i32[1];
    float64x2_t v360 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v335, (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL)), v339), v341), v343), v345);
    __int8 v361 = v357.i8[0];
    double v362 = fmin(v336, 1.79769313e308);
    if (v361) {
      double v355 = v336;
    }
    double v363 = fmax(fmax(fmax(v355, v340), v342), v344);
    double v364 = fmin(v346, fmin(v344, fmin(v342, fmin(v340, v362))));
    v365.i64[0] = v358;
    v365.i64[1] = v359;
    double v366 = fmax(fmax(fmax(v363, v346), v348), v350);
    float64x2_t v367 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v360, v347), v351), v354);
    float64x2_t v626 = vminnmq_f64(v354, vminnmq_f64(v351, (float64x2_t)vbslq_s8(v365, (int8x16_t)v347, (int8x16_t)v349)));
    *(double *)v368.i64 = fmin(v353, fmin(v350, fmin(v348, v364)));
    double v369 = fmax(v366, v353);
    *(float64x2_t *)&v643[8] = v367;
    *(void *)v643 = v368.i64[0];
    *(double *)&v643[24] = v369;
  }
  if (v642 < *(double *)v368.i64)
  {
    *(double *)v643 = v642;
    *(double *)v368.i64 = v642;
  }
  if (v641 > v369)
  {
    *(double *)&v643[24] = v641;
    double v369 = v641;
  }
  int v414 = *(unsigned __int8 *)(a1 + 288);
  *(unsigned char *)(a1 + 288) = 1;
  float v415 = *(float *)(a3 + 20) * *(float *)(a3 + 16);
  float v416 = floorf(fmaxf(*(float *)(a2 + 3080) + *(float *)(a2 + 3076), 1.0));
  if (*(float *)(a1 + 256) != v416) {
    goto LABEL_418;
  }
  if (!v414) {
    goto LABEL_418;
  }
  if (vabds_f32(*(float *)(a1 + 260), v415) > 0.01) {
    goto LABEL_418;
  }
  v417.f64[0] = *(float64_t *)(a1 + 208);
  if (v626.f64[0] < v417.f64[0]) {
    goto LABEL_418;
  }
  if (v626.f64[1] < *(double *)(a1 + 216)) {
    goto LABEL_418;
  }
  double v418 = *(double *)(a1 + 224);
  if (*(double *)v368.i64 < v418) {
    goto LABEL_418;
  }
  v419.f64[0] = *(float64_t *)(a1 + 232);
  if (v367.f64[0] > v419.f64[0]) {
    goto LABEL_418;
  }
  if (v367.f64[1] > *(double *)(a1 + 240)) {
    goto LABEL_418;
  }
  double v420 = *(double *)(a1 + 248);
  if (v369 > v420) {
    goto LABEL_418;
  }
  v419.f64[1] = *(float64_t *)(a1 + 240);
  v417.f64[1] = *(float64_t *)(a1 + 216);
  int32x2_t v421 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3FE6666660000000uLL), vabsq_f64(vdivq_f64(vmaxnmq_f64(vsubq_f64(v367, v626), (float64x2_t)0), vmaxnmq_f64(vsubq_f64(v419, v417), (float64x2_t)0)))));
  if ((v421.i8[0] & 1) != 0
    || (v421.i8[4] & 1) != 0
    || fabs(fmax(v369 - *(double *)v368.i64, 0.0) / fmax(v420 - v418, 0.0)) < 0.699999988)
  {
    goto LABEL_418;
  }
  *(void *)&long long v655 = 0;
  unint64_t v422 = &md::kMapDataTypesWithRegistries;
  *((void *)&v654 + 1) = 0;
  *(void *)&long long v654 = (char *)&v654 + 8;
  do
  {
    int v423 = (unsigned __int16)*v422;
    uint64_t v424 = *a4;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    v425 = *(unsigned __int16 **)(v424 + 48);
    unint64_t v426 = *(unsigned __int16 **)(v424 + 56);
    if (v425 == v426) {
      goto LABEL_303;
    }
    uint64_t v427 = *(unsigned __int16 **)(v424 + 48);
    while (*v427 != v423)
    {
      v427 += 16;
      if (v427 == v426) {
        goto LABEL_303;
      }
    }
    if (v427 == v426)
    {
LABEL_303:
      uint64_t v428 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v425 != v423)
      {
        v425 += 16;
        if (v425 == v426)
        {
          v425 = *(unsigned __int16 **)(v424 + 56);
          break;
        }
      }
      uint64_t v428 = (uint64_t *)(v425 + 4);
    }
    uint64_t v431 = *v428;
    v429 = v428 + 1;
    v430 = (void *)v431;
    if ((uint64_t *)v431 != v429)
    {
      do
      {
        uint64_t v432 = operator new(0x28uLL);
        unsigned int v433 = *(_DWORD *)(v430[4] + 8);
        *((_DWORD *)v432 + 7) = v433;
        int v434 = *((char *)v430 + 48);
        *((unsigned char *)v432 + 32) = *((unsigned char *)v430 + 48);
        uint64_t v435 = *((void *)&v654 + 1);
        uint64_t v436 = (void *)&v654 + 1;
        v437 = (void *)&v654 + 1;
        if (*((void *)&v654 + 1))
        {
          while (1)
          {
            while (1)
            {
              v437 = (void *)v435;
              int v438 = *(unsigned __int8 *)(v435 + 32);
              int v439 = (char)v438;
              unsigned int v440 = *(_DWORD *)(v435 + 28);
              if (!(v438 == v434 ? v433 < v440 : v434 < (char)v438)) {
                break;
              }
              uint64_t v435 = *v437;
              uint64_t v436 = v437;
              if (!*v437) {
                goto LABEL_320;
              }
            }
            BOOL v442 = v440 < v433;
            int v443 = v434 == v439 ? v442 : v439 < v434;
            if (v443 != 1) {
              break;
            }
            uint64_t v435 = v437[1];
            if (!v435)
            {
              uint64_t v436 = v437 + 1;
              goto LABEL_320;
            }
          }
          operator delete(v432);
          v454 = (uint64_t *)v430[1];
          if (!v454)
          {
            do
            {
LABEL_355:
              v458 = (uint64_t *)v430[2];
              _ZF = *v458 == (void)v430;
              v430 = v458;
            }
            while (!_ZF);
            goto LABEL_306;
          }
        }
        else
        {
LABEL_320:
          *uint64_t v432 = 0;
          v432[1] = 0;
          v432[2] = v437;
          *uint64_t v436 = v432;
          if (*(void *)v654)
          {
            *(void *)&long long v654 = *(void *)v654;
            uint64_t v432 = (void *)*v436;
          }
          unint64_t v444 = (uint64_t *)*((void *)&v654 + 1);
          _ZF = v432 == *((void **)&v654 + 1);
          *((unsigned char *)v432 + 24) = v432 == *((void **)&v654 + 1);
          if (!_ZF)
          {
            do
            {
              uint64_t v445 = v432[2];
              if (*(unsigned char *)(v445 + 24)) {
                break;
              }
              v446 = *(uint64_t **)(v445 + 16);
              uint64_t v447 = *v446;
              if (*v446 == v445)
              {
                uint64_t v450 = v446[1];
                if (!v450 || (int v451 = *(unsigned __int8 *)(v450 + 24), v448 = (unsigned char *)(v450 + 24), v451))
                {
                  if (*(void **)v445 == v432)
                  {
                    v452 = (uint64_t *)v432[2];
                  }
                  else
                  {
                    v452 = *(uint64_t **)(v445 + 8);
                    uint64_t v453 = *v452;
                    *(void *)(v445 + 8) = *v452;
                    if (v453)
                    {
                      *(void *)(v453 + 16) = v445;
                      v446 = *(uint64_t **)(v445 + 16);
                    }
                    v452[2] = (uint64_t)v446;
                    *(void *)(*(void *)(v445 + 16) + 8 * (**(void **)(v445 + 16) != v445)) = v452;
                    uint64_t *v452 = v445;
                    *(void *)(v445 + 16) = v452;
                    v446 = (uint64_t *)v452[2];
                    uint64_t v445 = *v446;
                  }
                  *((unsigned char *)v452 + 24) = 1;
                  *((unsigned char *)v446 + 24) = 0;
                  uint64_t v457 = *(void *)(v445 + 8);
                  uint64_t *v446 = v457;
                  if (v457) {
                    *(void *)(v457 + 16) = v446;
                  }
                  *(void *)(v445 + 16) = v446[2];
                  *(void *)(v446[2] + 8 * (*(void *)v446[2] != (void)v446)) = v445;
                  *(void *)(v445 + 8) = v446;
                  goto LABEL_351;
                }
              }
              else if (!v447 || (int v449 = *(unsigned __int8 *)(v447 + 24), v448 = (unsigned char *)(v447 + 24), v449))
              {
                if (*(void **)v445 == v432)
                {
                  uint64_t v455 = v432[1];
                  *(void *)uint64_t v445 = v455;
                  if (v455)
                  {
                    *(void *)(v455 + 16) = v445;
                    v446 = *(uint64_t **)(v445 + 16);
                  }
                  v432[2] = v446;
                  *(void *)(*(void *)(v445 + 16) + 8 * (**(void **)(v445 + 16) != v445)) = v432;
                  v432[1] = v445;
                  *(void *)(v445 + 16) = v432;
                  v446 = (uint64_t *)v432[2];
                }
                else
                {
                  uint64_t v432 = (void *)v432[2];
                }
                *((unsigned char *)v432 + 24) = 1;
                *((unsigned char *)v446 + 24) = 0;
                uint64_t v445 = v446[1];
                unint64_t v456 = *(void **)v445;
                v446[1] = *(void *)v445;
                if (v456) {
                  v456[2] = v446;
                }
                *(void *)(v445 + 16) = v446[2];
                *(void *)(v446[2] + 8 * (*(void *)v446[2] != (void)v446)) = v445;
                *(void *)uint64_t v445 = v446;
LABEL_351:
                v446[2] = v445;
                break;
              }
              *(unsigned char *)(v445 + 24) = 1;
              uint64_t v432 = v446;
              *((unsigned char *)v446 + 24) = v446 == v444;
              unsigned char *v448 = 1;
            }
            while (v446 != v444);
          }
          *(void *)&long long v655 = v655 + 1;
          v454 = (uint64_t *)v430[1];
          if (!v454) {
            goto LABEL_355;
          }
        }
        do
        {
          v458 = v454;
          v454 = (uint64_t *)*v454;
        }
        while (v454);
LABEL_306:
        v430 = v458;
      }
      while (v458 != v429);
    }
    ++v422;
  }
  while (v422 != (__int16 *)&unk_1A29620BA);
  v480 = (uint64_t **)(a1 + 264);
  if ((void)v655 == *(void *)(a1 + 280))
  {
    unint64_t v481 = (void *)v654;
    if ((long long *)v654 == (long long *)((char *)&v654 + 8))
    {
LABEL_593:
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)&v654 + 1));
      v497.f64[0] = *(float64_t *)(a1 + 208);
      char v488 = 1;
      goto LABEL_421;
    }
    v482 = *v480;
    while (*((unsigned __int8 *)v481 + 32) == *((unsigned __int8 *)v482 + 32)
         && *((_DWORD *)v481 + 7) == *((_DWORD *)v482 + 7))
    {
      unint64_t v484 = (void *)v481[1];
      unint64_t v485 = v481;
      if (v484)
      {
        do
        {
          unint64_t v481 = v484;
          unint64_t v484 = (void *)*v484;
        }
        while (v484);
      }
      else
      {
        do
        {
          unint64_t v481 = (void *)v485[2];
          _ZF = *v481 == (void)v485;
          unint64_t v485 = v481;
        }
        while (!_ZF);
      }
      v486 = (uint64_t *)v482[1];
      if (v486)
      {
        do
        {
          v487 = v486;
          v486 = (uint64_t *)*v486;
        }
        while (v486);
      }
      else
      {
        do
        {
          v487 = (uint64_t *)v482[2];
          _ZF = *v487 == (void)v482;
          v482 = v487;
        }
        while (!_ZF);
      }
      v482 = v487;
      if (v481 == (void *)((char *)&v654 + 8)) {
        goto LABEL_593;
      }
    }
  }
  if (v480 != (uint64_t **)&v654) {
    std::__tree<md::LayerDataIdentWithWorld>::__assign_multi<std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long>>(v480, (void *)v654, (void *)&v654 + 1);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)&v654 + 1));
  double v369 = *(double *)&v643[24];
  v368.i64[0] = *(void *)v643;
LABEL_418:
  char v488 = 0;
  double v489 = v369 - *(double *)v368.i64;
  double v490 = *(double *)v368.i64 + v489 * 0.5;
  double v491 = v489 * 0.550000012;
  _NF = v489 < 0.0;
  double v492 = 0.0;
  if (!_NF) {
    double v492 = v491;
  }
  float64x2_t v493 = vsubq_f64(*(float64x2_t *)&v643[8], v626);
  __asm { FMOV            V4.2D, #0.5 }
  float64x2_t v495 = vmlaq_f64(v626, _Q4, v493);
  float64x2_t v496 = (float64x2_t)vbicq_s8((int8x16_t)vmulq_f64(v493, (float64x2_t)vdupq_n_s64(0x3FE19999A0000000uLL)), (int8x16_t)vcltzq_f64(v493));
  float64x2_t v497 = vsubq_f64(v495, v496);
  *(float64x2_t *)(a1 + 208) = v497;
  *(double *)(a1 + 224) = v490 - v492;
  *(float64x2_t *)(a1 + 232) = vaddq_f64(v496, v495);
  *(double *)(a1 + 248) = v492 + v490;
  *(float *)(a1 + 256) = v416;
  *(float *)(a1 + 260) = v415;
LABEL_421:
  *(float64_t *)(a7 + 248) = v497.f64[0];
  *(void *)(a7 + 256) = *(void *)(a1 + 216);
  *(void *)(a7 + 264) = *(void *)(a1 + 224);
  *(void *)(a7 + 272) = *(void *)(a1 + 232);
  *(void *)(a7 + 280) = *(void *)(a1 + 240);
  *(void *)(a7 + 288) = *(void *)(a1 + 248);
  *(unsigned char *)(a7 + 228) = v488;
  *(void *)(a7 + 232) = *(void *)(a8 + 64);
  *(unsigned char *)(a7 + 240) = *(unsigned char *)(a8 + 72);
  long long v498 = *(_OWORD *)&v628[16];
  *(_OWORD *)(a7 + 296) = *(_OWORD *)v628;
  *(_OWORD *)(a7 + 312) = v498;
  long long v499 = v630;
  *(float64x2_t *)(a7 + 328) = v629;
  *(_OWORD *)(a7 + 344) = v499;
  long long v500 = v632;
  *(float64x2_t *)(a7 + 360) = v631;
  *(_OWORD *)(a7 + 376) = v500;
  long long v501 = v634;
  *(float64x2_t *)(a7 + 392) = v633;
  *(_OWORD *)(a7 + 408) = v501;
  objc_msgSend(v15, "daVinciShadowIntensity", v601);
  float v503 = v502;
  [v15 daVinciGroundAmbientOcclusionRadius];
  float v236 = v504;
  [v15 daVinciGroundAmbientOcclusionIntensity];
  float v238 = v505;
  if (!v640 || ([v15 daVinciLightingStylesOverrideEnabled] & 1) != 0)
  {
    *(float *)(a7 + 192) = v503;
LABEL_424:
    *(float *)(a7 + 196) = v236;
    goto LABEL_425;
  }
  uint64_t v511 = *(void *)(v639[0] + 24);
  v512 = *(float **)v511;
  if (!*(void *)v511)
  {
    BOOL v514 = 0;
    goto LABEL_474;
  }
  float v513 = *v512;
  BOOL v514 = *v512 == 1.0;
  if (!*(unsigned char *)(v511 + 10) || v513 == 0.0 || v513 == 1.0)
  {
LABEL_474:
    unsigned int v540 = *(unsigned __int8 *)(v511 + v514 + 11);
    if (v540 != 2) {
      goto LABEL_477;
    }
  }
  if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(void *)(v639[0] + 24), 0x50u, 0)) {
    goto LABEL_478;
  }
  unsigned int v540 = 1;
LABEL_477:
  if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v511, 0x50u, v540)) {
    goto LABEL_554;
  }
LABEL_478:
  float v541 = fminf(fmaxf(v218, 0.0), 23.0);
  if (v512)
  {
    float v542 = *v512;
    BOOL v543 = *v512 == 1.0;
    if (*(unsigned char *)(v511 + 10) && v542 != 0.0 && v542 != 1.0) {
      goto LABEL_552;
    }
  }
  else
  {
    BOOL v543 = 0;
  }
  int v576 = *(unsigned __int8 *)(v511 + v543 + 11);
  float v542 = 0.0;
  if (v576 == 2)
  {
LABEL_552:
    LOBYTE(v654) = 1;
    LOBYTE(v642) = 1;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v511, 0x50u, 0, (BOOL *)&v654, v541);
    float v578 = v577;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v511, 0x50u, 1, (BOOL *)&v642, v541);
    float v503 = v578 + (float)((float)(v579 - v578) * v542);
    goto LABEL_554;
  }
  gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v511, 0x50u, v576, 0, v541);
  float v503 = v580;
LABEL_554:
  *(float *)(a7 + 192) = v503;
  uint64_t v581 = *(void *)(v639[0] + 24);
  v582 = *(float **)v581;
  if (!*(void *)v581)
  {
    BOOL v584 = 0;
    goto LABEL_560;
  }
  float v583 = *v582;
  BOOL v584 = *v582 == 1.0;
  if (!*(unsigned char *)(v581 + 10) || v583 == 0.0 || v583 == 1.0)
  {
LABEL_560:
    unsigned int v585 = *(unsigned __int8 *)(v581 + v584 + 11);
    if (v585 != 2) {
      goto LABEL_563;
    }
  }
  if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(void *)(v639[0] + 24), 0x51u, 0)) {
    goto LABEL_564;
  }
  unsigned int v585 = 1;
LABEL_563:
  if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v581, 0x51u, v585)) {
    goto LABEL_573;
  }
LABEL_564:
  float v586 = fminf(fmaxf(v218, 0.0), 23.0);
  if (v582)
  {
    float v587 = *v582;
    BOOL v588 = *v582 == 1.0;
    if (*(unsigned char *)(v581 + 10) && v587 != 0.0 && v587 != 1.0) {
      goto LABEL_571;
    }
  }
  else
  {
    BOOL v588 = 0;
  }
  int v589 = *(unsigned __int8 *)(v581 + v588 + 11);
  float v587 = 0.0;
  if (v589 == 2)
  {
LABEL_571:
    LOBYTE(v654) = 1;
    LOBYTE(v642) = 1;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v581, 0x51u, 0, (BOOL *)&v654, v586);
    float v591 = v590;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v581, 0x51u, 1, (BOOL *)&v642, v586);
    float v236 = v591 + (float)((float)(v592 - v591) * v587);
    goto LABEL_573;
  }
  gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v581, 0x51u, v589, 0, v586);
  float v236 = v593;
LABEL_573:
  *(float *)(a7 + 196) = v236;
  uint64_t v468 = *(void *)(v639[0] + 24);
  v594 = *(float **)v468;
  if (*(void *)v468)
  {
    float v595 = *v594;
    BOOL v596 = *v594 == 1.0;
    if (*(unsigned char *)(v468 + 10) && v595 != 0.0 && v595 != 1.0) {
      goto LABEL_580;
    }
  }
  else
  {
    BOOL v596 = 0;
  }
  unsigned int v597 = *(unsigned __int8 *)(v468 + v596 + 11);
  if (v597 != 2) {
    goto LABEL_582;
  }
LABEL_580:
  if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(void *)(v639[0] + 24), 0x52u, 0) & 1) == 0)
  {
    unsigned int v597 = 1;
LABEL_582:
    if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v468, 0x52u, v597)) {
      goto LABEL_425;
    }
  }
  float v473 = fminf(fmaxf(v218, 0.0), 23.0);
  if (v594)
  {
    float v474 = *v594;
    BOOL v598 = *v594 == 1.0;
    if (*(unsigned char *)(v468 + 10) && v474 != 0.0 && v474 != 1.0) {
      goto LABEL_590;
    }
  }
  else
  {
    BOOL v598 = 0;
  }
  int v476 = *(unsigned __int8 *)(v468 + v598 + 11);
  float v474 = 0.0;
  if (v476 == 2)
  {
LABEL_590:
    LOBYTE(v654) = 1;
    LOBYTE(v642) = 1;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v468, 0x52u, 0, (BOOL *)&v654, v473);
    float v478 = v599;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v468, 0x52u, 1, (BOOL *)&v642, v473);
    goto LABEL_591;
  }
LABEL_592:
  gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v468, 0x52u, v476, 0, v473);
  float v238 = v600;
LABEL_425:
  *(float *)(a7 + 200) = v238;
  *(unsigned char *)(a7 + 224) = *(unsigned char *)(a1 + 120);
  BOOL v507 = *(float *)(a7 + 192) > 0.0 && *(unsigned char *)(a1 + 136) == 0;
  *(unsigned char *)(a7 + 225) = v507;
  if (*(unsigned char *)(a7 + 227))
  {
    BOOL v508 = 0;
  }
  else
  {
    int v509 = [v15 daVinciGroundAmbientOcclusionEnabled];
    if (*(float *)(a7 + 200) > 0.0) {
      int v510 = v509;
    }
    else {
      int v510 = 0;
    }
    BOOL v508 = v510 == 1 && *(float *)(a7 + 196) > 0.0;
    float v218 = v625;
  }
  *(unsigned char *)(a7 + 226) = v508;
  uint64_t v515 = *(void *)(a1 + 192);
  v516 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)v643 = v515;
  *(void *)&v643[8] = v516;
  if (v516) {
    atomic_fetch_add_explicit(&v516->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)&v654, v515, (uint64_t)v516);
  if (v516 && !atomic_fetch_add(&v516->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
    std::__shared_weak_count::__release_weak(v516);
  }
  *(void *)(a7 + 204) = 0x3F8000003F000000;
  *(_WORD *)(a7 + 216) = 0;
  *(_DWORD *)(a7 + 212) = 0;
  v517 = +[VKDebugSettings sharedSettings];
  [v517 ssaoMaxIntensity];
  *(_DWORD *)(a7 + 220) = v518;

  v519 = +[VKDebugSettings sharedSettings];
  [v519 ssaoOverrideIntensity];
  *(_DWORD *)(a7 + 204) = v520;

  v521 = +[VKDebugSettings sharedSettings];
  [v521 ssaoOverrideRadius];
  *(_DWORD *)(a7 + 208) = v522;

  float v523 = 0.0;
  if (LOBYTE(v656.f64[0]))
  {
    v524 = +[VKDebugSettings sharedSettings];
    char v525 = [v524 ssaoOverrideOn];

    if ((v525 & 1) == 0)
    {
      unint64_t v526 = *(void *)(v654 + 24);
      if ((int)v218 >= 0x17) {
        unsigned int v527 = 23;
      }
      else {
        unsigned int v527 = (int)v218;
      }
      v528 = *(float **)v526;
      if (*(void *)v526)
      {
        float v529 = *v528;
        BOOL v530 = *v528 == 1.0;
        if (*(unsigned char *)(v526 + 10) && v529 != 0.0 && v529 != 1.0)
        {
LABEL_462:
          if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v654 + 24), 0x1C8u, v527, 0)) {
            goto LABEL_465;
          }
          unsigned int v531 = 1;
LABEL_464:
          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v526, 0x1C8u, v527, v531)) {
            goto LABEL_485;
          }
LABEL_465:
          float v532 = fminf(fmaxf(v218, 0.0), 23.0);
          if (v528)
          {
            float v533 = *v528;
            BOOL v534 = *v528 == 1.0;
            if (*(unsigned char *)(v526 + 10) && v533 != 0.0 && v533 != 1.0) {
              goto LABEL_472;
            }
          }
          else
          {
            BOOL v534 = 0;
          }
          unsigned int v535 = *(unsigned __int8 *)(v526 + v534 + 11);
          float v533 = 0.0;
          if (v535 != 2)
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1C8u, v535, 0, v532);
            goto LABEL_484;
          }
LABEL_472:
          v643[0] = 1;
          LOBYTE(v642) = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1C8u, 0, v643, v532);
          float v537 = v536;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1C8u, 1u, (BOOL *)&v642, v532);
          float v539 = v537 + (float)((float)(v538 - v537) * v533);
LABEL_484:
          *(float *)(a7 + 204) = v539;
          unint64_t v526 = *(void *)(v654 + 24);
          v528 = *(float **)v526;
LABEL_485:
          if (v528)
          {
            float v544 = *v528;
            BOOL v545 = *v528 == 1.0;
            if (*(unsigned char *)(v526 + 10) && v544 != 0.0 && v544 != 1.0)
            {
LABEL_492:
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v526, 0x1CAu, v527, 0)) {
                goto LABEL_495;
              }
              unsigned int v546 = 1;
LABEL_494:
              if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v526, 0x1CAu, v527, v546)) {
                goto LABEL_505;
              }
LABEL_495:
              float v547 = fminf(fmaxf(v218, 0.0), 23.0);
              if (v528)
              {
                float v548 = *v528;
                BOOL v549 = *v528 == 1.0;
                if (*(unsigned char *)(v526 + 10) && v548 != 0.0 && v548 != 1.0) {
                  goto LABEL_502;
                }
              }
              else
              {
                BOOL v549 = 0;
              }
              unsigned int v550 = *(unsigned __int8 *)(v526 + v549 + 11);
              float v548 = 0.0;
              if (v550 != 2)
              {
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1CAu, v550, 0, v547);
                goto LABEL_504;
              }
LABEL_502:
              v643[0] = 1;
              LOBYTE(v642) = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1CAu, 0, v643, v547);
              float v552 = v551;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1CAu, 1u, (BOOL *)&v642, v547);
              float v554 = v552 + (float)((float)(v553 - v552) * v548);
LABEL_504:
              *(float *)(a7 + 208) = v554;
              unint64_t v526 = *(void *)(v654 + 24);
              v528 = *(float **)v526;
LABEL_505:
              if (v528)
              {
                float v555 = *v528;
                BOOL v556 = *v528 == 1.0;
                if (*(unsigned char *)(v526 + 10) && v555 != 0.0 && v555 != 1.0)
                {
LABEL_512:
                  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v526, 0x1CBu, v527, 0))
                  {
LABEL_515:
                    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v643, v526, 0x1CBu, 2u, fminf(fmaxf(v218, 0.0), 23.0));
                    float16x4_t v558 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v643)), (float32x4_t)vdupq_n_s32(0x37800080u)));
                    *(_WORD *)(a7 + 216) = v558.i16[2];
                    *(_DWORD *)(a7 + 212) = v558.i32[0];
                    unint64_t v526 = *(void *)(v654 + 24);
                    v528 = *(float **)v526;
LABEL_516:
                    if (v528)
                    {
                      float v559 = *v528;
                      BOOL v560 = *v528 == 1.0;
                      if (*(unsigned char *)(v526 + 10) && v559 != 0.0 && v559 != 1.0)
                      {
LABEL_523:
                        if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v526, 0x1C9u, v527, 0)) {
                          goto LABEL_526;
                        }
                        unsigned int v561 = 1;
LABEL_525:
                        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v526, 0x1C9u, v527, v561))goto LABEL_534; {
LABEL_526:
                        }
                        float v562 = fminf(fmaxf(v218, 0.0), 23.0);
                        if (v528)
                        {
                          float v563 = *v528;
                          BOOL v564 = *v528 == 1.0;
                          if (*(unsigned char *)(v526 + 10) && v563 != 0.0 && v563 != 1.0)
                          {
LABEL_533:
                            v643[0] = 1;
                            LOBYTE(v642) = 1;
                            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1C9u, 0, v643, v562);
                            float v567 = v566;
                            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1C9u, 1u, (BOOL *)&v642, v562);
                            float v523 = v567 + (float)((float)(v568 - v567) * v563);
                            goto LABEL_534;
                          }
                        }
                        else
                        {
                          BOOL v564 = 0;
                        }
                        unsigned int v565 = *(unsigned __int8 *)(v526 + v564 + 11);
                        float v563 = 0.0;
                        if (v565 != 2)
                        {
                          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v526, 0x1C9u, v565, 0, v562);
                          float v523 = v575;
                          if (*(unsigned char *)(a1 + 120)) {
                            goto LABEL_535;
                          }
LABEL_543:
                          *(unsigned char *)(a7 + 227) = 0;
                          *(_WORD *)(a1 + 137) = 0;
                          goto LABEL_544;
                        }
                        goto LABEL_533;
                      }
                    }
                    else
                    {
                      BOOL v560 = 0;
                    }
                    unsigned int v561 = *(unsigned __int8 *)(v526 + v560 + 11);
                    if (v561 != 2) {
                      goto LABEL_525;
                    }
                    goto LABEL_523;
                  }
                  unsigned int v557 = 1;
LABEL_514:
                  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v526, 0x1CBu, v527, v557))goto LABEL_516; {
                  goto LABEL_515;
                  }
                }
              }
              else
              {
                BOOL v556 = 0;
              }
              unsigned int v557 = *(unsigned __int8 *)(v526 + v556 + 11);
              if (v557 != 2) {
                goto LABEL_514;
              }
              goto LABEL_512;
            }
          }
          else
          {
            BOOL v545 = 0;
          }
          unsigned int v546 = *(unsigned __int8 *)(v526 + v545 + 11);
          if (v546 != 2) {
            goto LABEL_494;
          }
          goto LABEL_492;
        }
      }
      else
      {
        BOOL v530 = 0;
      }
      unsigned int v531 = *(unsigned __int8 *)(v526 + v530 + 11);
      if (v531 != 2) {
        goto LABEL_464;
      }
      goto LABEL_462;
    }
  }
LABEL_534:
  if (!*(unsigned char *)(a1 + 120)) {
    goto LABEL_543;
  }
LABEL_535:
  if (!*(unsigned char *)(a1 + 393) || !*(unsigned char *)(a1 + 139)) {
    goto LABEL_543;
  }
  if (LOBYTE(v656.f64[0]))
  {
    *(unsigned char *)(a7 + 227) = 0;
    *(_WORD *)(a1 + 137) = 1;
    v569 = (unsigned char *)(a1 + 138);
    goto LABEL_540;
  }
  v570 = +[VKDebugSettings sharedSettings];
  int v571 = [v570 ssaoOverrideOn];

  *(unsigned char *)(a7 + 227) = 0;
  *(unsigned char *)(a1 + 138) = 0;
  v569 = (unsigned char *)(a1 + 138);
  *(v569 - 1) = v571;
  if (v571)
  {
LABEL_540:
    float v572 = *(double *)(a2 + 40);
    float v573 = fminf(v572 * 12.732, 1.0);
    float v574 = *(float *)(a7 + 204)
         + (float)((float)-(float)((float)(1.0 - v573) - (float)(v523 * (float)(1.0 - v573))) * *(float *)(a7 + 204));
    *(float *)(a7 + 204) = v574;
    if (v574 > 0.01)
    {
      *(unsigned char *)(a7 + 227) = 1;
      unsigned char *v569 = 1;
    }
  }
LABEL_544:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v654);
LABEL_545:
  if (v635[0])
  {
    if (v638 < 0) {
      operator delete(__p);
    }
  }
  gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)v639);
}

void sub_1A1A51F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)STACK[0x238]);
  if (a52)
  {
    if (a58 < 0) {
      operator delete(__p);
    }
  }
  gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)&a59);

  _Unwind_Resume(a1);
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 16 * a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = *(unsigned __int8 ****)(v3 + 72);
  if (!v4 || (uint64_t v5 = *v4, (v6 = *((unsigned __int16 *)*v4 + 5)) == 0))
  {
LABEL_28:
    uint64_t v18 = a1 + 16 * a3;
    uint64_t v19 = *(unsigned __int16 *)(v18 + 56);
    if (*(_WORD *)(v18 + 56))
    {
      uint64_t v20 = *(void *)(v18 + 48);
      uint64_t v21 = v20 + 8 * v19;
      while (1)
      {
        unsigned int v23 = *(unsigned __int8 ****)(*(void *)v20 + 72);
        if (v23)
        {
          unsigned int v24 = *v23;
          uint64_t v25 = *((unsigned __int16 *)*v23 + 5);
          if (!v25)
          {
            unsigned __int16 v22 = 0;
            goto LABEL_31;
          }
          unsigned int v26 = *v24;
          if (!*((unsigned char *)v24 + 15))
          {
            uint64_t v35 = v25;
            int v27 = *v24;
            while (*v27 != a2)
            {
              ++v27;
              if (!--v35)
              {
                LOWORD(v27) = (_WORD)v26 + v25;
                break;
              }
            }
LABEL_52:
            unsigned __int16 v22 = (_WORD)v27 - (_WORD)v26;
LABEL_31:
            if (v25 != v22) {
              return 1;
            }
            goto LABEL_32;
          }
          int v27 = *v24;
          unint64_t v28 = v25;
          if (v25 < 0x1E)
          {
            uint64_t v29 = 0;
            while (1)
            {
              unsigned int v30 = v26[v29];
              if (v30 >= a2) {
                break;
              }
              if (v25 == ++v29) {
                goto LABEL_32;
              }
            }
            if (v30 == a2) {
              unsigned __int16 v22 = v29;
            }
            else {
              unsigned __int16 v22 = v25;
            }
            goto LABEL_31;
          }
          do
          {
            unint64_t v31 = v28 >> 1;
            double v32 = &v27[v28 >> 1];
            unsigned int v34 = *v32;
            uint64_t v33 = v32 + 1;
            v28 += ~(v28 >> 1);
            if (v34 < a2) {
              int v27 = v33;
            }
            else {
              unint64_t v28 = v31;
            }
          }
          while (v28);
          if (v27 != &v26[v25] && *v27 == a2) {
            goto LABEL_52;
          }
        }
LABEL_32:
        v20 += 8;
        if (v20 == v21) {
          return 0;
        }
      }
    }
    return 0;
  }
  unsigned __int8 v7 = *v5;
  if (!*((unsigned char *)v5 + 15))
  {
    uint64_t v10 = v6;
    unsigned __int8 v11 = *v5;
    while (*v11 != a2)
    {
      ++v11;
      if (!--v10)
      {
        LOWORD(v11) = (_WORD)v7 + v6;
        break;
      }
    }
LABEL_22:
    if (v6 == (unsigned __int16)((_WORD)v11 - (_WORD)v7)) {
      goto LABEL_28;
    }
    return 1;
  }
  if (v6 >= 0x1E)
  {
    unsigned __int8 v11 = *v5;
    unint64_t v12 = v6;
    do
    {
      unint64_t v13 = v12 >> 1;
      float v14 = &v11[v12 >> 1];
      unsigned int v16 = *v14;
      std::basic_regex<char>::value_type v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v16 < a2) {
        unsigned __int8 v11 = v15;
      }
      else {
        unint64_t v12 = v13;
      }
    }
    while (v12);
    if (v11 == &v7[v6] || *v11 != a2) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  uint64_t v8 = 0;
  while (1)
  {
    unsigned int v9 = v7[v8];
    if (v9 >= a2) {
      break;
    }
    if (v6 == ++v8) {
      goto LABEL_28;
    }
  }
  if (v9 == a2) {
    unsigned __int16 v17 = v8;
  }
  else {
    unsigned __int16 v17 = v6;
  }
  if (v6 == v17) {
    goto LABEL_28;
  }
  return 1;
}

int *gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>(int *result, unsigned int a2, int a3, BOOL *a4, float a5)
{
  LODWORD(v7) = (int)a5;
  if ((int)a5 >= 0x17) {
    uint64_t v8 = 23;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v7 >= 0x16) {
    uint64_t v7 = 22;
  }
  else {
    uint64_t v7 = v7;
  }
  unsigned int v9 = &result[4 * a3];
  uint64_t v12 = *((void *)v9 + 2);
  unsigned __int8 v11 = v9 + 4;
  uint64_t v10 = v12;
  if (!v12)
  {
    if (a4) {
      *a4 = 0;
    }
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
  uint64_t v13 = v7 + 1;
  float v14 = &result[4 * a3];
  uint64_t v15 = *((unsigned __int16 *)v14 + 28);
  if (!*((_WORD *)v14 + 28))
  {
    unsigned __int8 v73 = 1;
    unsigned __int8 v72 = 1;
LABEL_121:
    gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(*(int **)(v10 + 72), a2, v8, &v73);
LABEL_122:
    uint64_t result = gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(*(int **)(*(void *)v11 + 72), a2, v13, &v72);
    if (a4) {
LABEL_123:
    }
      *a4 = (v73 | v72) != 0;
    return result;
  }
  char v16 = 0;
  unsigned __int16 v17 = (uint64_t *)*((void *)v14 + 6);
  uint64_t v18 = &v17[v15];
  while (2)
  {
    LOBYTE(v19) = 0;
    while (1)
    {
      uint64_t v21 = *v17;
      if (v19)
      {
        int v19 = 1;
        if (v16) {
          goto LABEL_85;
        }
        goto LABEL_62;
      }
      unsigned __int16 v22 = *(uint64_t **)(v21 + 72);
      if (!v22) {
        goto LABEL_33;
      }
      unsigned int v23 = *((unsigned __int8 *)v22 + v8 + 16);
      uint64_t v24 = *v22;
      uint64_t v25 = (unsigned __int8 **)(v24 + 80 * v23);
      unint64_t v26 = *((unsigned __int16 *)v25 + 5);
      if (!*((_WORD *)v25 + 5))
      {
        uint64_t result = 0;
LABEL_33:
        int v19 = 0;
        if (v16) {
          goto LABEL_85;
        }
        goto LABEL_62;
      }
      uint64_t result = (int *)*v25;
      if (!*((unsigned char *)v25 + 15))
      {
        uint64_t v35 = *((unsigned __int16 *)v25 + 5);
        int v27 = *v25;
        while (*v27 != a2)
        {
          ++v27;
          if (!--v35)
          {
            LODWORD(v27) = result + v26;
            break;
          }
        }
LABEL_39:
        uint64_t result = (int *)(v27 - result);
        if (v26 == (unsigned __int16)result) {
          goto LABEL_33;
        }
        goto LABEL_40;
      }
      int v27 = *v25;
      unint64_t v28 = v26;
      if (v26 >= 0x1E)
      {
        do
        {
          unint64_t v31 = v28 >> 1;
          double v32 = &v27[v28 >> 1];
          unsigned int v34 = *v32;
          uint64_t v33 = v32 + 1;
          v28 += ~(v28 >> 1);
          if (v34 < a2) {
            int v27 = v33;
          }
          else {
            unint64_t v28 = v31;
          }
        }
        while (v28);
        if (v27 == (unsigned __int8 *)((char *)result + v26) || *v27 != a2) {
          goto LABEL_33;
        }
        goto LABEL_39;
      }
      uint64_t v29 = 0;
      while (1)
      {
        unsigned int v30 = *((unsigned __int8 *)result + v29);
        if (v30 >= a2) {
          break;
        }
        if (v26 == ++v29) {
          goto LABEL_33;
        }
      }
      if (v30 == a2) {
        uint64_t result = (int *)v29;
      }
      else {
        uint64_t result = (int *)v26;
      }
      if (v26 == (unsigned __int16)result) {
        goto LABEL_33;
      }
LABEL_40:
      uint64_t v36 = v24 + 80 * v23;
      uint64_t result = (int *)*(unsigned __int16 *)(v36 + 42);
      if (*(_WORD *)(v36 + 42))
      {
        uint64_t v37 = v24 + 80 * v23;
        uint64_t v38 = *(void *)(v37 + 32);
        if (*(unsigned char *)(v37 + 47))
        {
          unint64_t v39 = *(unsigned __int8 **)(v37 + 32);
          unint64_t v40 = (unint64_t)result;
          if (result >= 0x1E)
          {
            do
            {
              unint64_t v43 = (int *)(v40 >> 1);
              float v44 = &v39[v40 >> 1];
              unsigned int v46 = *v44;
              unsigned int v45 = v44 + 1;
              v40 += ~(v40 >> 1);
              if (v46 < a2) {
                unint64_t v39 = v45;
              }
              else {
                unint64_t v40 = (unint64_t)v43;
              }
            }
            while (v40);
          }
          else
          {
            unsigned int v41 = 0;
            do
            {
              unsigned int v42 = *((unsigned __int8 *)v41 + v38);
              if (v42 >= a2) {
                break;
              }
              unsigned int v41 = (int *)((char *)v41 + 1);
            }
            while (result != v41);
          }
        }
        else
        {
          unint64_t v47 = result;
          float v48 = *(unsigned __int8 **)(v37 + 32);
          do
          {
            if (*v48 == a2) {
              break;
            }
            ++v48;
            unint64_t v47 = (int *)((char *)v47 - 1);
          }
          while (v47);
        }
      }
      int v19 = 1;
      if (v16)
      {
LABEL_85:
        if (v19) {
          goto LABEL_125;
        }
        goto LABEL_112;
      }
LABEL_62:
      unsigned int v49 = *(uint64_t **)(v21 + 72);
      if (!v49) {
        goto LABEL_13;
      }
      unsigned int v50 = *((unsigned __int8 *)v49 + v13 + 16);
      uint64_t v51 = *v49;
      uint64_t result = (int *)(v51 + 80 * v50);
      float v52 = (int *)*((unsigned __int16 *)result + 5);
      if (!*((_WORD *)result + 5))
      {
        unsigned __int16 v20 = 0;
        goto LABEL_12;
      }
      uint64_t v53 = *(void *)result;
      if (!*((unsigned char *)result + 15))
      {
        uint64_t v60 = *((unsigned __int16 *)result + 5);
        uint64_t result = *(int **)result;
        while (*(unsigned __int8 *)result != a2)
        {
          uint64_t result = (int *)((char *)result + 1);
          if (!--v60)
          {
            uint64_t result = (int *)((char *)v52 + v53);
            break;
          }
        }
LABEL_81:
        unsigned __int16 v20 = (_WORD)result - v53;
        goto LABEL_12;
      }
      uint64_t result = *(int **)result;
      uint64_t v54 = v52;
      if (v52 >= 0x1E)
      {
        do
        {
          float v56 = (int *)((unint64_t)v54 >> 1);
          unsigned int v57 = (unsigned __int8 *)result + ((unint64_t)v54 >> 1);
          unsigned int v59 = *v57;
          uint64_t v58 = (int *)(v57 + 1);
          uint64_t v54 = (int *)((char *)v54 + ~((unint64_t)v54 >> 1));
          if (v59 < a2) {
            uint64_t result = v58;
          }
          else {
            uint64_t v54 = v56;
          }
        }
        while (v54);
        if (result == (int *)((char *)v52 + v53) || *(unsigned __int8 *)result != a2) {
          goto LABEL_13;
        }
        goto LABEL_81;
      }
      uint64_t result = 0;
      while (1)
      {
        unsigned int v55 = *((unsigned __int8 *)result + v53);
        if (v55 >= a2) {
          break;
        }
        uint64_t result = (int *)((char *)result + 1);
        if (v52 == result) {
          goto LABEL_13;
        }
      }
      unsigned __int16 v20 = v55 == a2 ? (unsigned __int16)result : (unsigned __int16)v52;
LABEL_12:
      if (v52 != v20) {
        break;
      }
LABEL_13:
      char v16 = 0;
      if (++v17 == v18)
      {
        unsigned __int8 v73 = 1;
        unsigned __int8 v72 = 1;
        if ((v19 & 1) == 0) {
          goto LABEL_121;
        }
        goto LABEL_122;
      }
    }
    uint64_t v61 = v51 + 80 * v50;
    uint64_t v62 = (int *)*(unsigned __int16 *)(v61 + 42);
    if (*(_WORD *)(v61 + 42))
    {
      uint64_t v63 = v51 + 80 * v50;
      uint64_t v64 = *(void *)(v63 + 32);
      if (!*(unsigned char *)(v63 + 47))
      {
        double v71 = v62;
        uint64_t result = *(int **)(v63 + 32);
        while (*(unsigned __int8 *)result != a2)
        {
          uint64_t result = (int *)((char *)result + 1);
          double v71 = (int *)((char *)v71 - 1);
          if (!v71)
          {
            LODWORD(result) = v64 + v62;
            goto LABEL_107;
          }
        }
        goto LABEL_107;
      }
      uint64_t result = *(int **)(v63 + 32);
      unsigned int v65 = v62;
      if (v62 < 0x1E)
      {
        uint64_t result = 0;
        while (1)
        {
          unsigned int v66 = *((unsigned __int8 *)result + v64);
          if (v66 >= a2) {
            break;
          }
          uint64_t result = (int *)((char *)result + 1);
          if (v62 == result) {
            goto LABEL_101;
          }
        }
        if (v66 == a2) {
          uint64_t result = (int *)result;
        }
        else {
          uint64_t result = (int *)v62;
        }
LABEL_111:
        if (v19) {
          goto LABEL_125;
        }
        goto LABEL_112;
      }
      do
      {
        uint64_t v67 = (int *)((unint64_t)v65 >> 1);
        int v68 = (unsigned __int8 *)result + ((unint64_t)v65 >> 1);
        unsigned int v70 = *v68;
        int v69 = (int *)(v68 + 1);
        unsigned int v65 = (int *)((char *)v65 + ~((unint64_t)v65 >> 1));
        if (v70 < a2) {
          uint64_t result = v69;
        }
        else {
          unsigned int v65 = v67;
        }
      }
      while (v65);
      if (result != (int *)((char *)v62 + v64))
      {
        if (*(unsigned __int8 *)result != a2) {
          goto LABEL_111;
        }
LABEL_107:
        uint64_t result = (int *)(result - v64);
        goto LABEL_111;
      }
    }
LABEL_101:
    if (v19)
    {
LABEL_125:
      unsigned __int8 v73 = 1;
      unsigned __int8 v72 = 1;
      if (a4) {
        goto LABEL_123;
      }
      return result;
    }
LABEL_112:
    ++v17;
    char v16 = 1;
    if (v17 != v18) {
      continue;
    }
    break;
  }
  unsigned __int8 v73 = 1;
  unsigned __int8 v72 = 1;
  uint64_t result = gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(*(int **)(v10 + 72), a2, v8, &v73);
  if (a4) {
    goto LABEL_123;
  }
  return result;
}

unint64_t gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, BOOL *a5, float a6)
{
  unsigned __int8 v11 = (void *)result;
  unsigned int v12 = (int)a6;
  if ((int)a6 >= 0x17) {
    uint64_t v13 = 23;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v12 >= 0x16) {
    uint64_t v14 = 22;
  }
  else {
    uint64_t v14 = v12;
  }
  uint64_t v15 = a2 + 16 * a4;
  uint64_t v18 = *(void *)(v15 + 16);
  unsigned __int16 v17 = (uint64_t *)(v15 + 16);
  uint64_t v16 = v18;
  if (!v18)
  {
    if (a5) {
      *a5 = 0;
    }
    uint64_t result = (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>();
    *unsigned __int8 v11 = *(void *)result;
    return result;
  }
  uint64_t v20 = v14 + 1;
  uint64_t v21 = a2 + 16 * a4;
  uint64_t v22 = *(unsigned __int16 *)(v21 + 56);
  uint64_t v88 = (unint64_t *)result;
  char v23 = 0;
  if (!*(_WORD *)(v21 + 56))
  {
    unsigned __int8 v90 = 1;
    unsigned __int8 v89 = 1;
    goto LABEL_128;
  }
  uint64_t v24 = *(uint64_t **)(v21 + 48);
  uint64_t v25 = &v24[v22];
LABEL_10:
  LOBYTE(v26) = 0;
  do
  {
    uint64_t v28 = *v24;
    if (v26)
    {
      int v26 = 1;
      if (v23) {
        goto LABEL_92;
      }
      goto LABEL_69;
    }
    uint64_t v29 = *(uint64_t **)(v28 + 72);
    if (!v29
      || (unsigned int v30 = *((unsigned __int8 *)v29 + v13 + 16),
          uint64_t v31 = *v29,
          uint64_t result = v31 + 80 * v30,
          double v32 = (unsigned __int8 *)*(unsigned __int16 *)(result + 10),
          !*(_WORD *)(result + 10)))
    {
LABEL_31:
      int v26 = 0;
      if (v23) {
        goto LABEL_92;
      }
      goto LABEL_69;
    }
    uint64_t v33 = *(void *)result;
    if (!*(unsigned char *)(result + 15))
    {
      uint64_t v40 = *(unsigned __int16 *)(result + 10);
      uint64_t result = *(void *)result;
      while (*(unsigned __int8 *)result != a3)
      {
        ++result;
        if (!--v40)
        {
          uint64_t result = (unint64_t)&v32[v33];
          break;
        }
      }
LABEL_37:
      if (v32 == (unsigned __int16)(result - v33)) {
        goto LABEL_31;
      }
      goto LABEL_38;
    }
    uint64_t result = *(void *)result;
    unsigned int v34 = v32;
    if (v32 >= 0x1E)
    {
      do
      {
        uint64_t v36 = (unsigned __int8 *)((unint64_t)v34 >> 1);
        uint64_t v37 = (unsigned __int8 *)(result + ((unint64_t)v34 >> 1));
        unsigned int v39 = *v37;
        uint64_t v38 = v37 + 1;
        v34 += ~((unint64_t)v34 >> 1);
        if (v39 < a3) {
          uint64_t result = (unint64_t)v38;
        }
        else {
          unsigned int v34 = v36;
        }
      }
      while (v34);
      if ((unsigned __int8 *)result == &v32[v33] || *(unsigned __int8 *)result != a3) {
        goto LABEL_31;
      }
      goto LABEL_37;
    }
    uint64_t result = 0;
    while (1)
    {
      unsigned int v35 = *(unsigned __int8 *)(v33 + result);
      if (v35 >= a3) {
        break;
      }
      if (v32 == (unsigned __int8 *)++result) {
        goto LABEL_31;
      }
    }
    if (v35 == a3) {
      unsigned __int16 v52 = result;
    }
    else {
      unsigned __int16 v52 = (unsigned __int16)v32;
    }
    if (v32 == v52) {
      goto LABEL_31;
    }
LABEL_38:
    uint64_t v41 = v31 + 80 * v30;
    unsigned int v42 = (unsigned __int8 *)*(unsigned __int16 *)(v41 + 58);
    if (!*(_WORD *)(v41 + 58)) {
      goto LABEL_52;
    }
    uint64_t v43 = v31 + 80 * v30;
    uint64_t v44 = *(void *)(v43 + 48);
    if (!*(unsigned char *)(v43 + 63))
    {
      uint64_t v53 = v42;
      uint64_t result = *(void *)(v43 + 48);
      while (*(unsigned __int8 *)result != a3)
      {
        ++result;
        if (!--v53)
        {
          LODWORD(result) = v44 + v42;
          break;
        }
      }
LABEL_62:
      uint64_t result = (result - v44);
LABEL_66:
      uint64_t v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      if (v42 != (unsigned __int16)result) {
        uint64_t v51 = (__int16 *)(v44 + *(unsigned __int16 *)(v31 + 80 * v30 + 56) + 8 * (unsigned __int16)result);
      }
      goto LABEL_68;
    }
    uint64_t result = *(void *)(v43 + 48);
    unsigned int v45 = v42;
    if (v42 < 0x1E)
    {
      uint64_t result = 0;
      while (1)
      {
        unsigned int v46 = *(unsigned __int8 *)(v44 + result);
        if (v46 >= a3) {
          break;
        }
        if (v42 == (unsigned __int8 *)++result) {
          goto LABEL_52;
        }
      }
      if (v46 == a3) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v42;
      }
      goto LABEL_66;
    }
    do
    {
      unint64_t v47 = (unsigned __int8 *)((unint64_t)v45 >> 1);
      float v48 = (unsigned __int8 *)(result + ((unint64_t)v45 >> 1));
      unsigned int v50 = *v48;
      unsigned int v49 = v48 + 1;
      v45 += ~((unint64_t)v45 >> 1);
      if (v50 < a3) {
        uint64_t result = (unint64_t)v49;
      }
      else {
        unsigned int v45 = v47;
      }
    }
    while (v45);
    if ((unsigned __int8 *)result == &v42[v44])
    {
LABEL_52:
      uint64_t v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      goto LABEL_68;
    }
    uint64_t v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    if (*(unsigned __int8 *)result == a3) {
      goto LABEL_62;
    }
LABEL_68:
    LOWORD(v11) = *v51;
    unsigned __int16 v6 = v51[1];
    unsigned __int16 v7 = v51[2];
    int v26 = 1;
    unsigned __int16 v8 = v51[3];
    if (v23)
    {
LABEL_92:
      if (v26) {
        goto LABEL_135;
      }
LABEL_120:
      ++v24;
      char v23 = 1;
      if (v24 != v25) {
        goto LABEL_10;
      }
      unsigned __int8 v90 = 1;
      unsigned __int8 v89 = 1;
      goto LABEL_128;
    }
LABEL_69:
    uint64_t v54 = *(uint64_t **)(v28 + 72);
    if (v54)
    {
      unsigned int v55 = *((unsigned __int8 *)v54 + v20 + 16);
      uint64_t v56 = *v54;
      uint64_t result = v56 + 80 * v55;
      unsigned int v57 = (unsigned __int8 *)*(unsigned __int16 *)(result + 10);
      if (!*(_WORD *)(result + 10))
      {
        unsigned __int16 v27 = 0;
        goto LABEL_12;
      }
      unint64_t v58 = *(void *)result;
      if (!*(unsigned char *)(result + 15))
      {
        uint64_t v65 = *(unsigned __int16 *)(result + 10);
        uint64_t result = *(void *)result;
        while (*(unsigned __int8 *)result != a3)
        {
          ++result;
          if (!--v65)
          {
            uint64_t result = (unint64_t)&v57[v58];
            break;
          }
        }
LABEL_88:
        unsigned __int16 v27 = result - v58;
LABEL_12:
        if (v57 == v27) {
          goto LABEL_13;
        }
        uint64_t v66 = v56 + 80 * v55;
        uint64_t v67 = (unsigned __int8 *)*(unsigned __int16 *)(v66 + 58);
        if (*(_WORD *)(v66 + 58))
        {
          uint64_t v68 = v56 + 80 * v55;
          uint64_t v69 = *(void *)(v68 + 48);
          if (!*(unsigned char *)(v68 + 63))
          {
            uint64_t v77 = v67;
            uint64_t result = *(void *)(v68 + 48);
            while (*(unsigned __int8 *)result != a3)
            {
              ++result;
              if (!--v77)
              {
                LODWORD(result) = v69 + v67;
                goto LABEL_113;
              }
            }
            goto LABEL_113;
          }
          uint64_t result = *(void *)(v68 + 48);
          unsigned int v70 = v67;
          if (v67 < 0x1E)
          {
            uint64_t result = 0;
            while (1)
            {
              unsigned int v71 = *(unsigned __int8 *)(v69 + result);
              if (v71 >= a3) {
                break;
              }
              if (v67 == (unsigned __int8 *)++result) {
                goto LABEL_108;
              }
            }
            if (v71 == a3) {
              uint64_t result = result;
            }
            else {
              uint64_t result = v67;
            }
LABEL_117:
            unsigned __int8 v76 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            if (v67 != (unsigned __int16)result) {
              unsigned __int8 v76 = (__int16 *)(v69 + *(unsigned __int16 *)(v56 + 80 * v55 + 56) + 8 * (unsigned __int16)result);
            }
LABEL_119:
            __int16 v86 = v76[1];
            __int16 v87 = *v76;
            __int16 v84 = v76[3];
            __int16 v85 = v76[2];
            if (v26)
            {
LABEL_135:
              unsigned __int8 v90 = 1;
              unsigned __int8 v89 = 1;
              goto LABEL_129;
            }
            goto LABEL_120;
          }
          do
          {
            unsigned __int8 v72 = (unsigned __int8 *)((unint64_t)v70 >> 1);
            unsigned __int8 v73 = (unsigned __int8 *)(result + ((unint64_t)v70 >> 1));
            unsigned int v75 = *v73;
            double v74 = v73 + 1;
            v70 += ~((unint64_t)v70 >> 1);
            if (v75 < a3) {
              uint64_t result = (unint64_t)v74;
            }
            else {
              unsigned int v70 = v72;
            }
          }
          while (v70);
          if ((unsigned __int8 *)result != &v67[v69])
          {
            unsigned __int8 v76 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            if (*(unsigned __int8 *)result != a3) {
              goto LABEL_119;
            }
LABEL_113:
            uint64_t result = (result - v69);
            goto LABEL_117;
          }
        }
LABEL_108:
        unsigned __int8 v76 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        goto LABEL_119;
      }
      uint64_t result = *(void *)result;
      unsigned int v59 = v57;
      if (v57 < 0x1E)
      {
        uint64_t result = 0;
        while (1)
        {
          unsigned int v60 = *(unsigned __int8 *)(v58 + result);
          if (v60 >= a3) {
            break;
          }
          if (v57 == (unsigned __int8 *)++result) {
            goto LABEL_13;
          }
        }
        if (v60 == a3) {
          unsigned __int16 v27 = result;
        }
        else {
          unsigned __int16 v27 = (unsigned __int16)v57;
        }
        goto LABEL_12;
      }
      do
      {
        uint64_t v61 = (unsigned __int8 *)((unint64_t)v59 >> 1);
        uint64_t v62 = (unsigned __int8 *)(result + ((unint64_t)v59 >> 1));
        unsigned int v64 = *v62;
        uint64_t v63 = v62 + 1;
        v59 += ~((unint64_t)v59 >> 1);
        if (v64 < a3) {
          uint64_t result = (unint64_t)v63;
        }
        else {
          unsigned int v59 = v61;
        }
      }
      while (v59);
      if ((unsigned __int8 *)result != &v57[v58] && *(unsigned __int8 *)result == a3) {
        goto LABEL_88;
      }
    }
LABEL_13:
    char v23 = 0;
    ++v24;
  }
  while (v24 != v25);
  unsigned __int8 v90 = 1;
  unsigned __int8 v89 = 1;
  if (v26) {
    goto LABEL_132;
  }
  char v23 = 0;
LABEL_128:
  uint64_t result = (unint64_t)gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(*(__int16 **)(v16 + 72), a3, v13, &v90);
  LOWORD(v11) = *(_WORD *)result;
  unsigned __int16 v6 = *(_WORD *)(result + 2);
  unsigned __int16 v7 = *(_WORD *)(result + 4);
  unsigned __int16 v8 = *(_WORD *)(result + 6);
  if (v23)
  {
LABEL_129:
    id v78 = v88;
    unsigned __int16 v80 = v86;
    unsigned __int16 v79 = v87;
    unsigned __int16 v82 = v84;
    unsigned __int16 v81 = v85;
    if (!a5) {
      goto LABEL_134;
    }
LABEL_133:
    *a5 = (v90 | v89) != 0;
    goto LABEL_134;
  }
  uint64_t v16 = *v17;
LABEL_132:
  uint64_t result = (unint64_t)gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(*(__int16 **)(v16 + 72), a3, v20, &v89);
  unsigned __int16 v79 = *(_WORD *)result;
  unsigned __int16 v80 = *(_WORD *)(result + 2);
  unsigned __int16 v81 = *(_WORD *)(result + 4);
  unsigned __int16 v82 = *(_WORD *)(result + 6);
  id v78 = v88;
  if (a5) {
    goto LABEL_133;
  }
LABEL_134:
  float v83 = a6 - (float)v13;
  *id v78 = ((unint64_t)(int)(float)((float)((float)((float)v8 * 0.000015259)
                                                             + (float)((float)-(float)((float)((float)v8 * 0.000015259)
                                                                                     - (float)((float)v82 * 0.000015259))
                                                                     * v83))
                                                     * 65535.0) << 48) | ((unint64_t)(int)(float)((float)((float)((float)v7 * 0.000015259) + (float)((float)-(float)((float)((float)v7 * 0.000015259) - (float)((float)v81 * 0.000015259)) * v83)) * 65535.0) << 32) | ((unint64_t)(int)(float)((float)((float)((float)v6 * 0.000015259) + (float)((float)-(float)((float)((float)v6 * 0.000015259) - (float)((float)v80 * 0.000015259)) * v83)) * 65535.0) << 16) | (int)(float)((float)((float)((float)(unsigned __int16)v11 * 0.000015259) + (float)((float)-(float)((float)((float)(unsigned __int16)v11 * 0.000015259) - (float)((float)v79 * 0.000015259)) * v83)) * 65535.0);
  return result;
}

unint64_t gss::RenderStyle<gss::ScenePropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t *a1, uint64_t a2, unsigned int a3, float a4)
{
  unsigned __int16 v8 = *(float **)a2;
  if (*(void *)a2
    && (float v9 = *v8, LODWORD(v8) = *v8 == 1.0, *(unsigned char *)(a2 + 10))
    && (v9 != 0.0 ? (BOOL v10 = v9 == 1.0) : (BOOL v10 = 1), !v10)
    || (v11 = *(unsigned __int8 *)(a2 + v8 + 11), float v9 = 0.0, v11 == 2))
  {
    float v26 = v9;
    char v30 = 1;
    char v29 = 1;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)v28, a2, a3, 0, (BOOL *)&v30, a4);
    unint64_t result = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)v27, a2, a3, 1u, (BOOL *)&v29, a4);
    LOWORD(v13) = v28[0];
    LOWORD(v14) = v28[1];
    float32x2_t v15 = (float32x2_t)vdup_n_s32(0x37800080u);
    LOWORD(v16) = v27[0];
    LOWORD(v17) = v27[1];
    uint64_t v18 = (int)(float)((float)((float)((float)v13 * 0.000015259)
                                           + (float)((float)-(float)((float)((float)v13 * 0.000015259)
                                                                   - (float)((float)v16 * 0.000015259))
                                                   * v26))
                                   * 65535.0);
    uint64_t v19 = (int)(float)((float)((float)((float)v14 * 0.000015259)
                                           + (float)((float)-(float)((float)((float)v14 * 0.000015259)
                                                                   - (float)((float)v17 * 0.000015259))
                                                   * v26))
                                   * 65535.0);
    v20.i32[0] = v28[2];
    v20.i32[1] = v28[3];
    float32x2_t v21 = vmul_f32(vcvt_f32_u32(v20), v15);
    v22.i32[0] = v27[2];
    v22.i32[1] = v27[3];
    int32x2_t v23 = vcvt_s32_f32(vmul_f32(vmla_n_f32(v21, vmla_f32(vneg_f32(v21), v15, vcvt_f32_u32(v22)), v26), (float32x2_t)vdup_n_s32(0x477FFF00u)));
    v24.i64[0] = v23.u32[0];
    v24.i64[1] = v23.u32[1];
    int64x2_t v25 = (int64x2_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FD120);
    *a1 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v25, 1), (int8x16_t)v25).u64[0] | (v19 << 16) | v18;
  }
  else
  {
    return gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)a1, a2, a3, v11, 0, a4);
  }
  return result;
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(uint64_t a1, unsigned int a2, unsigned int a3, BOOL *a4, float a5)
{
  LODWORD(v7) = (int)a5;
  if ((int)a5 >= 0x17) {
    uint64_t v8 = 23;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v7 >= 0x16) {
    uint64_t v7 = 22;
  }
  else {
    uint64_t v7 = v7;
  }
  uint64_t v9 = a1 + 16 * a3;
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v11 = v9 + 16;
  uint64_t v10 = v12;
  if (!v12)
  {
    if (a4) {
      *a4 = 0;
    }
    return *(unsigned int *)gss::defaultValueForKey<gss::ScenePropertyID,int>(a2);
  }
  uint64_t v14 = v7 + 1;
  uint64_t v15 = a1 + 16 * a3;
  uint64_t v16 = *(unsigned __int16 *)(v15 + 56);
  if (!*(_WORD *)(v15 + 56))
  {
    unsigned __int8 v84 = 1;
    unsigned __int8 v83 = 1;
LABEL_128:
    unsigned int v19 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(v10 + 72), a2, v8, &v84);
LABEL_129:
    unsigned int v18 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(*(void *)v11 + 72), a2, v14, &v83);
    if (a4) {
LABEL_130:
    }
      *a4 = (v84 | v83) != 0;
    goto LABEL_131;
  }
  char v17 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  uint32x2_t v20 = *(uint64_t **)(v15 + 48);
  float32x2_t v21 = &v20[v16];
  while (2)
  {
    LOBYTE(v22) = 0;
    while (1)
    {
      uint64_t v24 = *v20;
      if (v22)
      {
        int v22 = 1;
        if (v17) {
          goto LABEL_91;
        }
        goto LABEL_68;
      }
      int64x2_t v25 = *(uint64_t **)(v24 + 72);
      if (!v25
        || (unsigned int v26 = *((unsigned __int8 *)v25 + v8 + 16),
            uint64_t v27 = *v25,
            uint64_t v28 = (unsigned __int8 **)(v27 + 80 * v26),
            unint64_t v29 = *((unsigned __int16 *)v28 + 5),
            !*((_WORD *)v28 + 5)))
      {
LABEL_31:
        int v22 = 0;
        if (v17) {
          goto LABEL_91;
        }
        goto LABEL_68;
      }
      uint64_t v30 = (uint64_t)*v28;
      if (!*((unsigned char *)v28 + 15))
      {
        uint64_t v39 = *((unsigned __int16 *)v28 + 5);
        uint64_t v31 = *v28;
        while (*v31 != a2)
        {
          ++v31;
          if (!--v39)
          {
            LOWORD(v31) = v30 + v29;
            break;
          }
        }
LABEL_37:
        if (v29 == (unsigned __int16)((_WORD)v31 - v30)) {
          goto LABEL_31;
        }
        goto LABEL_38;
      }
      uint64_t v31 = *v28;
      unint64_t v32 = v29;
      if (v29 >= 0x1E)
      {
        do
        {
          unint64_t v35 = v32 >> 1;
          uint64_t v36 = &v31[v32 >> 1];
          unsigned int v38 = *v36;
          uint64_t v37 = v36 + 1;
          v32 += ~(v32 >> 1);
          if (v38 < a2) {
            uint64_t v31 = v37;
          }
          else {
            unint64_t v32 = v35;
          }
        }
        while (v32);
        if (v31 == (unsigned __int8 *)(v30 + v29) || *v31 != a2) {
          goto LABEL_31;
        }
        goto LABEL_37;
      }
      uint64_t v33 = 0;
      while (1)
      {
        unsigned int v34 = *(unsigned __int8 *)(v30 + v33);
        if (v34 >= a2) {
          break;
        }
        if (v29 == ++v33) {
          goto LABEL_31;
        }
      }
      if (v34 == a2) {
        unsigned __int16 v52 = v33;
      }
      else {
        unsigned __int16 v52 = v29;
      }
      if (v29 == v52) {
        goto LABEL_31;
      }
LABEL_38:
      uint64_t v40 = v27 + 80 * v26;
      uint64_t v41 = (unsigned __int8 *)*(unsigned __int16 *)(v40 + 42);
      if (!*(_WORD *)(v40 + 42)) {
        goto LABEL_52;
      }
      uint64_t v42 = v27 + 80 * v26;
      uint64_t v43 = *(void *)(v42 + 32);
      if (!*(unsigned char *)(v42 + 47))
      {
        uint64_t v53 = v41;
        uint64_t v44 = *(unsigned __int8 **)(v42 + 32);
        while (*v44 != a2)
        {
          ++v44;
          if (!--v53)
          {
            LOWORD(v44) = v43 + (_WORD)v41;
            break;
          }
        }
LABEL_62:
        LOWORD(v44) = (_WORD)v44 - v43;
LABEL_65:
        uint64_t v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if (v41 != (unsigned __int16)v44) {
          uint64_t v51 = (int *)(v43 + *(unsigned __int16 *)(v27 + 80 * v26 + 40) + 4 * (unsigned __int16)v44);
        }
        goto LABEL_67;
      }
      uint64_t v44 = *(unsigned __int8 **)(v42 + 32);
      unsigned int v45 = v41;
      if (v41 < 0x1E)
      {
        uint64_t v44 = 0;
        while (1)
        {
          unsigned int v46 = v44[v43];
          if (v46 >= a2) {
            break;
          }
          if (v41 == ++v44) {
            goto LABEL_52;
          }
        }
        if (v46 != a2) {
          LOWORD(v44) = (_WORD)v41;
        }
        goto LABEL_65;
      }
      do
      {
        unint64_t v47 = (unsigned __int8 *)((unint64_t)v45 >> 1);
        float v48 = &v44[(unint64_t)v45 >> 1];
        unsigned int v50 = *v48;
        unsigned int v49 = v48 + 1;
        v45 += ~((unint64_t)v45 >> 1);
        if (v50 < a2) {
          uint64_t v44 = v49;
        }
        else {
          unsigned int v45 = v47;
        }
      }
      while (v45);
      if (v44 == &v41[v43])
      {
LABEL_52:
        uint64_t v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        goto LABEL_67;
      }
      uint64_t v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      if (*v44 == a2) {
        goto LABEL_62;
      }
LABEL_67:
      unsigned int v19 = *v51;
      int v22 = 1;
      if (v17)
      {
LABEL_91:
        if (v22) {
          goto LABEL_134;
        }
        goto LABEL_119;
      }
LABEL_68:
      uint64_t v54 = *(uint64_t **)(v24 + 72);
      if (!v54) {
        goto LABEL_13;
      }
      unsigned int v55 = *((unsigned __int8 *)v54 + v14 + 16);
      uint64_t v56 = *v54;
      unsigned int v57 = (unsigned __int8 **)(v56 + 80 * v55);
      unint64_t v58 = *((unsigned __int16 *)v57 + 5);
      if (!*((_WORD *)v57 + 5))
      {
        unsigned __int16 v23 = 0;
        goto LABEL_12;
      }
      uint64_t v59 = (uint64_t)*v57;
      if (!*((unsigned char *)v57 + 15))
      {
        uint64_t v68 = *((unsigned __int16 *)v57 + 5);
        unsigned int v60 = *v57;
        while (*v60 != a2)
        {
          ++v60;
          if (!--v68)
          {
            LOWORD(v60) = v59 + v58;
            break;
          }
        }
LABEL_87:
        unsigned __int16 v23 = (_WORD)v60 - v59;
        goto LABEL_12;
      }
      unsigned int v60 = *v57;
      unint64_t v61 = v58;
      if (v58 >= 0x1E)
      {
        do
        {
          unint64_t v64 = v61 >> 1;
          uint64_t v65 = &v60[v61 >> 1];
          unsigned int v67 = *v65;
          uint64_t v66 = v65 + 1;
          v61 += ~(v61 >> 1);
          if (v67 < a2) {
            unsigned int v60 = v66;
          }
          else {
            unint64_t v61 = v64;
          }
        }
        while (v61);
        if (v60 == (unsigned __int8 *)(v59 + v58) || *v60 != a2) {
          goto LABEL_13;
        }
        goto LABEL_87;
      }
      unint64_t v62 = 0;
      while (1)
      {
        unsigned int v63 = *(unsigned __int8 *)(v59 + v62);
        if (v63 >= a2) {
          break;
        }
        if (v58 == ++v62) {
          goto LABEL_13;
        }
      }
      unsigned __int16 v23 = v63 == a2 ? v62 : v58;
LABEL_12:
      if (v58 != v23) {
        break;
      }
LABEL_13:
      char v17 = 0;
      if (++v20 == v21)
      {
        unsigned __int8 v84 = 1;
        unsigned __int8 v83 = 1;
        if ((v22 & 1) == 0) {
          goto LABEL_128;
        }
        goto LABEL_129;
      }
    }
    uint64_t v69 = v56 + 80 * v55;
    unsigned int v70 = (unsigned __int8 *)*(unsigned __int16 *)(v69 + 42);
    if (*(_WORD *)(v69 + 42))
    {
      uint64_t v71 = v56 + 80 * v55;
      uint64_t v72 = *(void *)(v71 + 32);
      if (!*(unsigned char *)(v71 + 47))
      {
        unsigned __int16 v81 = v70;
        unsigned __int8 v73 = *(unsigned __int8 **)(v71 + 32);
        while (*v73 != a2)
        {
          ++v73;
          if (!--v81)
          {
            LOWORD(v73) = v72 + (_WORD)v70;
            goto LABEL_113;
          }
        }
        goto LABEL_113;
      }
      unsigned __int8 v73 = *(unsigned __int8 **)(v71 + 32);
      double v74 = v70;
      if (v70 < 0x1E)
      {
        unsigned __int8 v73 = 0;
        while (1)
        {
          unsigned int v75 = v73[v72];
          if (v75 >= a2) {
            break;
          }
          if (v70 == ++v73) {
            goto LABEL_107;
          }
        }
        if (v75 != a2) {
          LOWORD(v73) = (_WORD)v70;
        }
LABEL_116:
        unsigned __int16 v80 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if (v70 != (unsigned __int16)v73) {
          unsigned __int16 v80 = (int *)(v72 + *(unsigned __int16 *)(v56 + 80 * v55 + 40) + 4 * (unsigned __int16)v73);
        }
LABEL_118:
        unsigned int v18 = *v80;
        if (v22) {
          goto LABEL_134;
        }
        goto LABEL_119;
      }
      do
      {
        unsigned __int8 v76 = (unsigned __int8 *)((unint64_t)v74 >> 1);
        uint64_t v77 = &v73[(unint64_t)v74 >> 1];
        unsigned int v79 = *v77;
        id v78 = v77 + 1;
        v74 += ~((unint64_t)v74 >> 1);
        if (v79 < a2) {
          unsigned __int8 v73 = v78;
        }
        else {
          double v74 = v76;
        }
      }
      while (v74);
      if (v73 != &v70[v72])
      {
        unsigned __int16 v80 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if (*v73 != a2) {
          goto LABEL_118;
        }
LABEL_113:
        LOWORD(v73) = (_WORD)v73 - v72;
        goto LABEL_116;
      }
    }
LABEL_107:
    unsigned int v18 = gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    if (v22)
    {
LABEL_134:
      unsigned __int8 v84 = 1;
      unsigned __int8 v83 = 1;
      if (a4) {
        goto LABEL_130;
      }
      goto LABEL_131;
    }
LABEL_119:
    ++v20;
    char v17 = 1;
    if (v20 != v21) {
      continue;
    }
    break;
  }
  unsigned __int8 v84 = 1;
  unsigned __int8 v83 = 1;
  unsigned int v19 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(v10 + 72), a2, v8, &v84);
  if (a4) {
    goto LABEL_130;
  }
LABEL_131:
  if ((float)(a5 - (float)v8) >= 1.0) {
    return v18;
  }
  else {
    return v19;
  }
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(uint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(a2);
  }
  uint64_t v5 = result + 16 * a3;
  uint64_t v6 = *(unsigned __int16 *)(v5 + 56);
  if (*(_WORD *)(v5 + 56))
  {
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v8 = v7 + 8 * v6;
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 ****)(*(void *)v7 + 72);
      if (!v10) {
        goto LABEL_6;
      }
      uint64_t v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        unsigned __int16 v9 = 0;
        goto LABEL_5;
      }
      uint64_t v13 = (uint64_t)*v11;
      if (!*((unsigned char *)v11 + 15)) {
        break;
      }
      uint64_t v14 = *v11;
      unint64_t v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          unint64_t v18 = v15 >> 1;
          unsigned int v19 = &v14[v15 >> 1];
          unsigned int v21 = *v19;
          uint32x2_t v20 = v19 + 1;
          unint64_t result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2) {
            uint64_t v14 = v20;
          }
          else {
            unint64_t v15 = v18;
          }
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2) {
          goto LABEL_6;
        }
        goto LABEL_26;
      }
      uint64_t v16 = 0;
      while (1)
      {
        unsigned int v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2) {
          break;
        }
        if (v12 == ++v16) {
          goto LABEL_6;
        }
      }
      if (v17 == a2) {
        unsigned __int16 v9 = v16;
      }
      else {
        unsigned __int16 v9 = *((_WORD *)v11 + 5);
      }
LABEL_5:
      if (v12 != v9)
      {
        uint64_t v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
        if (!*((_WORD *)v11 + 21)) {
          return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        unint64_t v29 = v11[4];
        if (*((unsigned char *)v11 + 47))
        {
          if (v28 < 0x1E)
          {
            uint64_t v30 = 0;
            unint64_t result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v31 = v30[(void)v29];
              if (v31 >= a2) {
                break;
              }
              if (v28 == ++v30) {
                return result;
              }
            }
            if (v31 != a2) {
              LOWORD(v30) = *((_WORD *)v11 + 21);
            }
            if (v28 > (unsigned __int16)v30) {
              return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
            }
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          uint64_t v30 = v11[4];
          unint64_t v44 = *((unsigned __int16 *)v11 + 21);
          do
          {
            unint64_t v45 = v44 >> 1;
            unsigned int v46 = &v30[v44 >> 1];
            unsigned int v48 = *v46;
            unint64_t v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2) {
              uint64_t v30 = v47;
            }
            else {
              unint64_t v44 = v45;
            }
          }
          while (v44);
          if (v30 == &v28[(void)v29] || *v30 != a2) {
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v42 = *((unsigned __int16 *)v11 + 21);
          uint64_t v30 = v11[4];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30) {
          return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
        }
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8) {
        goto LABEL_30;
      }
    }
    uint64_t v22 = *((unsigned __int16 *)v11 + 5);
    uint64_t v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    unsigned __int16 v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  unsigned __int16 v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23) {
    goto LABEL_61;
  }
  uint64_t v11 = *v23;
  uint64_t v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5)) {
    goto LABEL_61;
  }
  uint64_t v25 = (uint64_t)*v11;
  if (!*((unsigned char *)v11 + 15))
  {
    uint64_t v32 = *((unsigned __int16 *)v11 + 5);
    uint64_t v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if (v24 != (unsigned __int16)((_WORD)v33 - v25)) {
      goto LABEL_68;
    }
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    uint64_t v33 = *v11;
    unint64_t v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = &v33[v34 >> 1];
      unsigned int v38 = *v36;
      uint64_t v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2) {
        uint64_t v33 = v37;
      }
      else {
        unint64_t v34 = v35;
      }
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2) {
      goto LABEL_60;
    }
LABEL_61:
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(a2);
  }
  uint64_t v26 = 0;
  while (1)
  {
    unsigned int v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2) {
      break;
    }
    if (v24 == ++v26) {
      goto LABEL_61;
    }
  }
  if (v27 == a2) {
    unsigned __int16 v39 = v26;
  }
  else {
    unsigned __int16 v39 = *((_WORD *)v11 + 5);
  }
  if (v24 == v39) {
    goto LABEL_61;
  }
LABEL_68:
  uint64_t v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21)) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  unint64_t v29 = v11[4];
  if (*((unsigned char *)v11 + 47))
  {
    if (v40 < 0x1E)
    {
      uint64_t v30 = 0;
      unint64_t result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v41 = v30[(void)v29];
        if (v41 >= a2) {
          break;
        }
        if (v40 == ++v30) {
          return result;
        }
      }
      if (v41 != a2) {
        LOWORD(v30) = *((_WORD *)v11 + 21);
      }
      if (v40 == (unsigned __int16)v30) {
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
      goto LABEL_109;
    }
    uint64_t v30 = v11[4];
    unint64_t v49 = *((unsigned __int16 *)v11 + 21);
    do
    {
      unint64_t v50 = v49 >> 1;
      uint64_t v51 = &v30[v49 >> 1];
      unsigned int v53 = *v51;
      unsigned __int16 v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2) {
        uint64_t v30 = v52;
      }
      else {
        unint64_t v49 = v50;
      }
    }
    while (v49);
    if (v30 == &v40[(void)v29] || *v30 != a2) {
      return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v43 = *((unsigned __int16 *)v11 + 21);
    uint64_t v30 = v11[4];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if (v40 == (unsigned __int16)v30) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_109:
  if (v40 > (unsigned __int16)v30) {
    return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
  }
  return result;
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<unsigned int>(uint64_t a1, unsigned int a2, BOOL *a3, float a4)
{
  unsigned int v5 = (int)a4;
  if ((int)a4 >= 0x17) {
    uint64_t v6 = 23;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 >= 0x16) {
    uint64_t v7 = 22;
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v8 = a1 + 16 * a2;
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v9 = v11;
  if (!v11)
  {
    if (a3) {
      *a3 = 0;
    }
    return *(unsigned int *)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(3u);
  }
  uint64_t v13 = v7 + 1;
  uint64_t v14 = a1 + 16 * a2;
  uint64_t v15 = *(unsigned __int16 *)(v14 + 56);
  if (!*(_WORD *)(v14 + 56))
  {
    unsigned __int8 v83 = 1;
    unsigned __int8 v82 = 1;
LABEL_128:
    unsigned int v18 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v9 + 72), 3u, v6, &v83);
LABEL_129:
    unsigned int v17 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(*(void *)v10 + 72), 3u, v13, &v82);
    if (a3) {
LABEL_130:
    }
      *a3 = (v83 | v82) != 0;
    goto LABEL_131;
  }
  char v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = *(uint64_t **)(v14 + 48);
  uint32x2_t v20 = &v19[v15];
  while (2)
  {
    LOBYTE(v21) = 0;
    while (1)
    {
      uint64_t v23 = *v19;
      if (v21)
      {
        int v21 = 1;
        if (v16) {
          goto LABEL_91;
        }
        goto LABEL_68;
      }
      uint64_t v24 = *(uint64_t **)(v23 + 72);
      if (!v24
        || (unsigned int v25 = *((unsigned __int8 *)v24 + v6 + 16),
            uint64_t v26 = *v24,
            uint64_t v27 = v26 + 80 * v25,
            unint64_t v28 = *(unsigned __int16 *)(v27 + 10),
            !*(_WORD *)(v27 + 10)))
      {
LABEL_31:
        int v21 = 0;
        if (v16) {
          goto LABEL_91;
        }
        goto LABEL_68;
      }
      unint64_t v29 = *(unsigned __int8 **)v27;
      if (!*(unsigned char *)(v27 + 15))
      {
        uint64_t v38 = *(unsigned __int16 *)(v27 + 10);
        uint64_t v30 = *(unsigned __int8 **)v27;
        while (*v30 != 3)
        {
          ++v30;
          if (!--v38)
          {
            LOWORD(v30) = (_WORD)v29 + v28;
            break;
          }
        }
LABEL_37:
        if (v28 == (unsigned __int16)((_WORD)v30 - (_WORD)v29)) {
          goto LABEL_31;
        }
        goto LABEL_38;
      }
      uint64_t v30 = *(unsigned __int8 **)v27;
      unint64_t v31 = v28;
      if (v28 >= 0x1E)
      {
        do
        {
          unint64_t v34 = v31 >> 1;
          unint64_t v35 = &v30[v31 >> 1];
          unsigned int v37 = *v35;
          uint64_t v36 = v35 + 1;
          v31 += ~(v31 >> 1);
          if (v37 < 3) {
            uint64_t v30 = v36;
          }
          else {
            unint64_t v31 = v34;
          }
        }
        while (v31);
        if (v30 == &v29[v28] || *v30 != 3) {
          goto LABEL_31;
        }
        goto LABEL_37;
      }
      uint64_t v32 = 0;
      while (1)
      {
        unsigned int v33 = v29[v32];
        if (v33 >= 3) {
          break;
        }
        if (v28 == ++v32) {
          goto LABEL_31;
        }
      }
      if (v33 == 3) {
        unsigned __int16 v51 = v32;
      }
      else {
        unsigned __int16 v51 = v28;
      }
      if (v28 == v51) {
        goto LABEL_31;
      }
LABEL_38:
      uint64_t v39 = v26 + 80 * v25;
      uint64_t v40 = (unsigned __int8 *)*(unsigned __int16 *)(v39 + 42);
      if (!*(_WORD *)(v39 + 42)) {
        goto LABEL_52;
      }
      uint64_t v41 = v26 + 80 * v25;
      uint64_t v42 = *(void *)(v41 + 32);
      if (!*(unsigned char *)(v41 + 47))
      {
        unsigned __int16 v52 = v40;
        uint64_t v43 = *(unsigned __int8 **)(v41 + 32);
        while (*v43 != 3)
        {
          ++v43;
          if (!--v52)
          {
            LOWORD(v43) = v42 + (_WORD)v40;
            break;
          }
        }
LABEL_62:
        LOWORD(v43) = (_WORD)v43 - v42;
LABEL_65:
        unint64_t v50 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if (v40 != (unsigned __int16)v43) {
          unint64_t v50 = (int *)(v42 + *(unsigned __int16 *)(v26 + 80 * v25 + 40) + 4 * (unsigned __int16)v43);
        }
        goto LABEL_67;
      }
      uint64_t v43 = *(unsigned __int8 **)(v41 + 32);
      unint64_t v44 = (unint64_t)v40;
      if (v40 < 0x1E)
      {
        uint64_t v43 = 0;
        while (1)
        {
          unsigned int v45 = v43[v42];
          if (v45 >= 3) {
            break;
          }
          if (v40 == ++v43) {
            goto LABEL_52;
          }
        }
        if (v45 != 3) {
          LOWORD(v43) = (_WORD)v40;
        }
        goto LABEL_65;
      }
      do
      {
        unsigned int v46 = (unsigned char *)(v44 >> 1);
        unint64_t v47 = &v43[v44 >> 1];
        unsigned int v49 = *v47;
        unsigned int v48 = v47 + 1;
        v44 += ~(v44 >> 1);
        if (v49 < 3) {
          uint64_t v43 = v48;
        }
        else {
          unint64_t v44 = (unint64_t)v46;
        }
      }
      while (v44);
      if (v43 == &v40[v42])
      {
LABEL_52:
        unint64_t v50 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        goto LABEL_67;
      }
      unint64_t v50 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      if (*v43 == 3) {
        goto LABEL_62;
      }
LABEL_67:
      unsigned int v18 = *v50;
      int v21 = 1;
      if (v16)
      {
LABEL_91:
        if (v21) {
          goto LABEL_134;
        }
        goto LABEL_119;
      }
LABEL_68:
      unsigned int v53 = *(uint64_t **)(v23 + 72);
      if (!v53) {
        goto LABEL_13;
      }
      unsigned int v54 = *((unsigned __int8 *)v53 + v13 + 16);
      uint64_t v55 = *v53;
      uint64_t v56 = v55 + 80 * v54;
      unint64_t v57 = *(unsigned __int16 *)(v56 + 10);
      if (!*(_WORD *)(v56 + 10))
      {
        unsigned __int16 v22 = 0;
        goto LABEL_12;
      }
      unint64_t v58 = *(unsigned __int8 **)v56;
      if (!*(unsigned char *)(v56 + 15))
      {
        uint64_t v67 = *(unsigned __int16 *)(v56 + 10);
        uint64_t v59 = *(unsigned __int8 **)v56;
        while (*v59 != 3)
        {
          ++v59;
          if (!--v67)
          {
            LOWORD(v59) = (_WORD)v58 + v57;
            break;
          }
        }
LABEL_87:
        unsigned __int16 v22 = (_WORD)v59 - (_WORD)v58;
        goto LABEL_12;
      }
      uint64_t v59 = *(unsigned __int8 **)v56;
      unint64_t v60 = v57;
      if (v57 >= 0x1E)
      {
        do
        {
          unint64_t v63 = v60 >> 1;
          unint64_t v64 = &v59[v60 >> 1];
          unsigned int v66 = *v64;
          uint64_t v65 = v64 + 1;
          v60 += ~(v60 >> 1);
          if (v66 < 3) {
            uint64_t v59 = v65;
          }
          else {
            unint64_t v60 = v63;
          }
        }
        while (v60);
        if (v59 == &v58[v57] || *v59 != 3) {
          goto LABEL_13;
        }
        goto LABEL_87;
      }
      unint64_t v61 = 0;
      while (1)
      {
        unsigned int v62 = v58[v61];
        if (v62 >= 3) {
          break;
        }
        if (v57 == ++v61) {
          goto LABEL_13;
        }
      }
      unsigned __int16 v22 = v62 == 3 ? v61 : v57;
LABEL_12:
      if (v57 != v22) {
        break;
      }
LABEL_13:
      char v16 = 0;
      if (++v19 == v20)
      {
        unsigned __int8 v83 = 1;
        unsigned __int8 v82 = 1;
        if ((v21 & 1) == 0) {
          goto LABEL_128;
        }
        goto LABEL_129;
      }
    }
    uint64_t v68 = v55 + 80 * v54;
    uint64_t v69 = (unsigned __int8 *)*(unsigned __int16 *)(v68 + 42);
    if (*(_WORD *)(v68 + 42))
    {
      uint64_t v70 = v55 + 80 * v54;
      uint64_t v71 = *(void *)(v70 + 32);
      if (!*(unsigned char *)(v70 + 47))
      {
        unsigned __int16 v80 = v69;
        uint64_t v72 = *(unsigned __int8 **)(v70 + 32);
        while (*v72 != 3)
        {
          ++v72;
          if (!--v80)
          {
            LOWORD(v72) = v71 + (_WORD)v69;
            goto LABEL_113;
          }
        }
        goto LABEL_113;
      }
      uint64_t v72 = *(unsigned __int8 **)(v70 + 32);
      unint64_t v73 = (unint64_t)v69;
      if (v69 < 0x1E)
      {
        uint64_t v72 = 0;
        while (1)
        {
          unsigned int v74 = v72[v71];
          if (v74 >= 3) {
            break;
          }
          if (v69 == ++v72) {
            goto LABEL_107;
          }
        }
        if (v74 != 3) {
          LOWORD(v72) = (_WORD)v69;
        }
LABEL_116:
        unsigned int v79 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if (v69 != (unsigned __int16)v72) {
          unsigned int v79 = (int *)(v71 + *(unsigned __int16 *)(v55 + 80 * v54 + 40) + 4 * (unsigned __int16)v72);
        }
LABEL_118:
        unsigned int v17 = *v79;
        if (v21) {
          goto LABEL_134;
        }
        goto LABEL_119;
      }
      do
      {
        unsigned int v75 = (unsigned char *)(v73 >> 1);
        unsigned __int8 v76 = &v72[v73 >> 1];
        unsigned int v78 = *v76;
        uint64_t v77 = v76 + 1;
        v73 += ~(v73 >> 1);
        if (v78 < 3) {
          uint64_t v72 = v77;
        }
        else {
          unint64_t v73 = (unint64_t)v75;
        }
      }
      while (v73);
      if (v72 != &v69[v71])
      {
        unsigned int v79 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if (*v72 != 3) {
          goto LABEL_118;
        }
LABEL_113:
        LOWORD(v72) = (_WORD)v72 - v71;
        goto LABEL_116;
      }
    }
LABEL_107:
    unsigned int v17 = gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    if (v21)
    {
LABEL_134:
      unsigned __int8 v83 = 1;
      unsigned __int8 v82 = 1;
      if (a3) {
        goto LABEL_130;
      }
      goto LABEL_131;
    }
LABEL_119:
    ++v19;
    char v16 = 1;
    if (v19 != v20) {
      continue;
    }
    break;
  }
  unsigned __int8 v83 = 1;
  unsigned __int8 v82 = 1;
  unsigned int v18 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v9 + 72), 3u, v6, &v83);
  if (a3) {
    goto LABEL_130;
  }
LABEL_131:
  if ((float)(a4 - (float)v6) >= 1.0) {
    return v17;
  }
  else {
    return v18;
  }
}

void *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<std::string>(gss *a1, unsigned int a2, unsigned char *a3)
{
  uint64_t v3 = *((void *)a1 + 2 * a2 + 2);
  if (!v3)
  {
    if (a3) {
      *a3 = 0;
    }
    return gss::defaultValueForKey<gss::ScenePropertyID,std::string>();
  }
  uint64_t v4 = (char *)a1 + 16 * a2;
  uint64_t v5 = *((unsigned __int16 *)v4 + 28);
  if (!*((_WORD *)v4 + 28))
  {
LABEL_30:
    unsigned __int16 v22 = *(uint64_t **)(v3 + 72);
    if (v22)
    {
      uint64_t v23 = *v22;
      uint64_t v24 = *(unsigned __int16 *)(v23 + 10);
      if (*(_WORD *)(v23 + 10))
      {
        unsigned int v25 = *(unsigned __int8 **)v23;
        if (!*(unsigned char *)(v23 + 15))
        {
          uint64_t v32 = *(unsigned __int16 *)(v23 + 10);
          unsigned int v33 = *(unsigned __int8 **)v23;
          while (*v33 != 72)
          {
            ++v33;
            if (!--v32)
            {
              LOWORD(v33) = (_WORD)v25 + v24;
              break;
            }
          }
LABEL_60:
          if (v24 != (unsigned __int16)((_WORD)v33 - (_WORD)v25)) {
            goto LABEL_68;
          }
          goto LABEL_61;
        }
        if (v24 < 0x1E)
        {
          uint64_t v26 = 0;
          while (1)
          {
            unsigned int v27 = v25[v26];
            if (v27 >= 0x48) {
              break;
            }
            if (v24 == ++v26) {
              goto LABEL_61;
            }
          }
          if (v27 == 72) {
            unsigned __int16 v40 = v26;
          }
          else {
            unsigned __int16 v40 = *(_WORD *)(v23 + 10);
          }
          if (v24 != v40)
          {
LABEL_68:
            uint64_t v41 = *(unsigned __int16 *)(v23 + 74);
            if (!*(_WORD *)(v23 + 74)) {
              return gss::PropertySetDefaultStringValue(a1);
            }
            uint64_t v42 = *(void *)(v23 + 64);
            if (*(unsigned char *)(v23 + 79))
            {
              if (v41 < 0x1E)
              {
                uint64_t v43 = 0;
                while (1)
                {
                  unsigned int v44 = *(unsigned __int8 *)(v42 + v43);
                  if (v44 >= 0x48) {
                    break;
                  }
                  if (v41 == ++v43) {
                    return gss::PropertySetDefaultStringValue(a1);
                  }
                }
                if (v44 == 72) {
                  unsigned __int16 v58 = v43;
                }
                else {
                  unsigned __int16 v58 = *(_WORD *)(v23 + 74);
                }
                if (v41 == v58) {
                  return gss::PropertySetDefaultStringValue(a1);
                }
                return *(void **)(*(void *)(v23 + 64) + *(unsigned __int16 *)(v23 + 72) + 16 * v58 + 8);
              }
              unint64_t v47 = *(unsigned __int8 **)(v23 + 64);
              unint64_t v53 = *(unsigned __int16 *)(v23 + 74);
              do
              {
                unint64_t v54 = v53 >> 1;
                uint64_t v55 = &v47[v53 >> 1];
                unsigned int v57 = *v55;
                uint64_t v56 = v55 + 1;
                v53 += ~(v53 >> 1);
                if (v57 < 0x48) {
                  unint64_t v47 = v56;
                }
                else {
                  unint64_t v53 = v54;
                }
              }
              while (v53);
              if (v47 == (unsigned __int8 *)(v42 + v41) || *v47 != 72) {
                return gss::PropertySetDefaultStringValue(a1);
              }
            }
            else
            {
              uint64_t v46 = *(unsigned __int16 *)(v23 + 74);
              unint64_t v47 = *(unsigned __int8 **)(v23 + 64);
              while (*v47 != 72)
              {
                ++v47;
                if (!--v46)
                {
                  LOWORD(v47) = v42 + v41;
                  break;
                }
              }
            }
            unsigned __int16 v58 = (_WORD)v47 - v42;
            if (v41 == v58) {
              return gss::PropertySetDefaultStringValue(a1);
            }
            return *(void **)(*(void *)(v23 + 64) + *(unsigned __int16 *)(v23 + 72) + 16 * v58 + 8);
          }
          goto LABEL_61;
        }
        unsigned int v33 = *(unsigned __int8 **)v23;
        unint64_t v34 = *(unsigned __int16 *)(v23 + 10);
        do
        {
          unint64_t v35 = v34 >> 1;
          uint64_t v36 = &v33[v34 >> 1];
          unsigned int v38 = *v36;
          unsigned int v37 = v36 + 1;
          v34 += ~(v34 >> 1);
          if (v38 < 0x48) {
            unsigned int v33 = v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
        if (v33 != &v25[v24] && *v33 == 72) {
          goto LABEL_60;
        }
      }
    }
LABEL_61:
    if (a3) {
      *a3 = 0;
    }
    return gss::defaultValueForKey<gss::ScenePropertyID,std::string>();
  }
  uint64_t v6 = *((void *)v4 + 6);
  uint64_t v7 = v6 + 8 * v5;
  while (1)
  {
    uint64_t v9 = *(uint64_t **)(*(void *)v6 + 72);
    if (!v9) {
      goto LABEL_6;
    }
    uint64_t v10 = *v9;
    uint64_t v11 = *(unsigned __int16 *)(v10 + 10);
    if (!*(_WORD *)(v10 + 10))
    {
      unsigned __int16 v8 = 0;
      goto LABEL_5;
    }
    uint64_t v12 = *(unsigned __int8 **)v10;
    if (!*(unsigned char *)(v10 + 15))
    {
      uint64_t v21 = *(unsigned __int16 *)(v10 + 10);
      uint64_t v13 = *(unsigned __int8 **)v10;
      while (*v13 != 72)
      {
        ++v13;
        if (!--v21)
        {
          LOWORD(v13) = (_WORD)v12 + v11;
          break;
        }
      }
LABEL_26:
      unsigned __int16 v8 = (_WORD)v13 - (_WORD)v12;
      goto LABEL_5;
    }
    uint64_t v13 = *(unsigned __int8 **)v10;
    unint64_t v14 = *(unsigned __int16 *)(v10 + 10);
    if (v11 >= 0x1E)
    {
      do
      {
        unint64_t v17 = v14 >> 1;
        unsigned int v18 = &v13[v14 >> 1];
        unsigned int v20 = *v18;
        unsigned int v19 = v18 + 1;
        a1 = (gss *)v20;
        v14 += ~(v14 >> 1);
        if (v20 < 0x48) {
          uint64_t v13 = v19;
        }
        else {
          unint64_t v14 = v17;
        }
      }
      while (v14);
      if (v13 == &v12[v11] || *v13 != 72) {
        goto LABEL_6;
      }
      goto LABEL_26;
    }
    uint64_t v15 = 0;
    while (1)
    {
      unsigned int v16 = v12[v15];
      if (v16 >= 0x48) {
        break;
      }
      if (v11 == ++v15) {
        goto LABEL_6;
      }
    }
    unsigned __int16 v8 = v16 == 72 ? v15 : *(_WORD *)(v10 + 10);
LABEL_5:
    if (v11 != v8) {
      break;
    }
LABEL_6:
    v6 += 8;
    if (v6 == v7) {
      goto LABEL_30;
    }
  }
  unint64_t v28 = (unsigned __int8 *)*(unsigned __int16 *)(v10 + 74);
  if (!*(_WORD *)(v10 + 74)) {
    return gss::PropertySetDefaultStringValue(a1);
  }
  uint64_t v29 = *(void *)(v10 + 64);
  if (!*(unsigned char *)(v10 + 79))
  {
    uint64_t v45 = *(unsigned __int16 *)(v10 + 74);
    uint64_t v30 = *(unsigned __int8 **)(v10 + 64);
    while (*v30 != 72)
    {
      ++v30;
      if (!--v45)
      {
        LOWORD(v30) = v29 + (_WORD)v28;
        break;
      }
    }
LABEL_91:
    LOWORD(v30) = (_WORD)v30 - v29;
    if (v28 != (unsigned __int16)v30) {
      return *(void **)(v29 + *(unsigned __int16 *)(v10 + 72) + 16 * (unsigned __int16)v30 + 8);
    }
    return gss::PropertySetDefaultStringValue(a1);
  }
  if (v28 >= 0x1E)
  {
    uint64_t v30 = *(unsigned __int8 **)(v10 + 64);
    unint64_t v48 = *(unsigned __int16 *)(v10 + 74);
    do
    {
      unint64_t v49 = v48 >> 1;
      unint64_t v50 = &v30[v48 >> 1];
      unsigned int v52 = *v50;
      unsigned __int16 v51 = v50 + 1;
      v48 += ~(v48 >> 1);
      if (v52 < 0x48) {
        uint64_t v30 = v51;
      }
      else {
        unint64_t v48 = v49;
      }
    }
    while (v48);
    if (v30 == &v28[v29] || *v30 != 72) {
      return gss::PropertySetDefaultStringValue(a1);
    }
    goto LABEL_91;
  }
  uint64_t v30 = 0;
  while (1)
  {
    unsigned int v31 = v30[v29];
    if (v31 >= 0x48) {
      break;
    }
    if (v28 == ++v30) {
      return gss::PropertySetDefaultStringValue(a1);
    }
  }
  if (v31 != 72) {
    LOWORD(v30) = *(_WORD *)(v10 + 74);
  }
  if (v28 != (unsigned __int16)v30) {
    return *(void **)(v29 + *(unsigned __int16 *)(v10 + 72) + 16 * (unsigned __int16)v30 + 8);
  }
  return gss::PropertySetDefaultStringValue(a1);
}

uint64_t gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    (*(void (**)(void))(**(void **)a1 + 56))();
  }
  char v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1A1A5451C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t geo::optional<std::string>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    if (*(unsigned char *)a1)
    {
      if (a1 != a2)
      {
        uint64_t v3 = (void **)(a1 + 8);
        size_t v4 = *(unsigned __int8 *)(a2 + 31);
        if (*(char *)(a1 + 31) < 0)
        {
          size_t v8 = *(void *)(a2 + 16);
          if ((v4 & 0x80u) == 0) {
            uint64_t v9 = (void *)(a2 + 8);
          }
          else {
            uint64_t v9 = *(void **)(a2 + 8);
          }
          if ((v4 & 0x80u) == 0) {
            size_t v10 = v4;
          }
          else {
            size_t v10 = v8;
          }
          std::string::__assign_no_alias<false>(v3, v9, v10);
        }
        else if ((v4 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v3, *(void **)(a2 + 8), *(void *)(a2 + 16));
        }
        else
        {
          long long v5 = *(_OWORD *)(a2 + 8);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(_OWORD *)uint64_t v3 = v5;
        }
      }
    }
    else
    {
      uint64_t v6 = (std::string *)(a1 + 8);
      if (*(char *)(a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
      }
      else
      {
        long long v7 = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      *(unsigned char *)a1 = 1;
    }
  }
  else if (*(unsigned char *)a1)
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void gss::Queryable<gss::ScenePropertyID>::unlock(uint64_t a1)
{
  uint64_t v1 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
  if (v1)
  {
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
  }
}

void std::__tree<md::LayerDataIdentWithWorld>::__assign_multi<std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  size_t v4 = a2;
  if (a1[2])
  {
    uint64_t v6 = (uint64_t **)*a1;
    size_t v8 = a1 + 1;
    long long v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    void v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    uint64_t v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      size_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *size_t v10 = 0;
          while (1)
          {
            unsigned __int16 v40 = (void *)v10[1];
            if (!v40) {
              break;
            }
            do
            {
              size_t v10 = v40;
              unsigned __int16 v40 = (void *)*v40;
            }
            while (v40);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              size_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v4;
        do
        {
          uint64_t v9 = v10;
          int v14 = *((_DWORD *)v13 + 7);
          *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
          *((_DWORD *)v12 + 7) = v14;
          uint64_t v15 = *v8;
          unsigned int v16 = a1 + 1;
          unint64_t v17 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                unsigned int v16 = v15;
                int v18 = *((char *)v15 + 32);
                if (!(*((unsigned __int8 *)v12 + 32) == v18
                     ? *((_DWORD *)v12 + 7) < *((_DWORD *)v15 + 7)
                     : *((char *)v12 + 32) < v18))
                  break;
                uint64_t v15 = (uint64_t *)*v15;
                unint64_t v17 = (uint64_t **)v16;
                if (!*v16) {
                  goto LABEL_23;
                }
              }
              uint64_t v15 = (uint64_t *)v15[1];
            }
            while (v15);
            unint64_t v17 = (uint64_t **)(v16 + 1);
          }
LABEL_23:
          *uint64_t v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *unint64_t v17 = v12;
          unsigned int v20 = (uint64_t *)**a1;
          if (v20)
          {
            *a1 = v20;
            uint64_t v12 = *v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            size_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v23 = (void *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *size_t v10 = 0;
                while (1)
                {
                  uint64_t v24 = (void *)v10[1];
                  if (!v24) {
                    break;
                  }
                  do
                  {
                    size_t v10 = v24;
                    uint64_t v24 = (void *)*v24;
                  }
                  while (v24);
                }
              }
              else
              {
                for (v10[1] = 0; v23; uint64_t v23 = (void *)v10[1])
                {
                  do
                  {
                    size_t v10 = v23;
                    uint64_t v23 = (void *)*v23;
                  }
                  while (v23);
                }
              }
            }
          }
          else
          {
            size_t v10 = 0;
          }
          uint64_t v21 = (void *)v13[1];
          if (v21)
          {
            do
            {
              size_t v4 = v21;
              uint64_t v21 = (void *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              size_t v4 = (void *)v13[2];
              BOOL v22 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v22);
          }
          if (!v9) {
            break;
          }
          uint64_t v12 = v9;
          uint64_t v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
      if (v10)
      {
        for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
          size_t v10 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    uint64_t v26 = a1 + 1;
    do
    {
      unsigned int v27 = (uint64_t *)operator new(0x28uLL);
      unint64_t v28 = v27;
      uint64_t v29 = *(void *)((char *)v4 + 28);
      *(uint64_t *)((char *)v27 + 28) = v29;
      uint64_t v30 = *v26;
      uint64_t v31 = (uint64_t)(a1 + 1);
      uint64_t v32 = a1 + 1;
      if (*v26)
      {
        do
        {
          while (1)
          {
            uint64_t v31 = (uint64_t)v30;
            int v33 = *((char *)v30 + 32);
            int v34 = v33;
            BOOL v35 = v33 > SBYTE4(v29);
            int v36 = v34 == BYTE4(v29) ? *(_DWORD *)(v31 + 28) > v29 : v35;
            if (v36 != 1) {
              break;
            }
            uint64_t v30 = *(uint64_t **)v31;
            uint64_t v32 = (uint64_t **)v31;
            if (!*(void *)v31) {
              goto LABEL_62;
            }
          }
          uint64_t v30 = *(uint64_t **)(v31 + 8);
        }
        while (v30);
        uint64_t v32 = (uint64_t **)(v31 + 8);
      }
LABEL_62:
      *unsigned int v27 = 0;
      v27[1] = 0;
      v27[2] = v31;
      *uint64_t v32 = v27;
      unsigned int v37 = (uint64_t *)**a1;
      if (v37)
      {
        *a1 = v37;
        unint64_t v28 = *v32;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v28);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      unsigned int v38 = (void *)v4[1];
      if (v38)
      {
        do
        {
          uint64_t v39 = v38;
          unsigned int v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = (void *)v4[2];
          BOOL v22 = *v39 == (void)v4;
          size_t v4 = v39;
        }
        while (!v22);
      }
      size_t v4 = v39;
    }
    while (v39 != a3);
  }
}

void ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_2(uint64_t a1)
{
  if (GEOGetGeoGLPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_5_53372);
  }
  char v2 = (id)GEOGetGeoGLPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GPUFrameScheduled", "", buf, 2u);
  }

  if (GEOGetGeoGLPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_5_53372);
  }
  long long v5 = (id)GEOGetGeoGLPerformanceLog_log;
  uint64_t v6 = v5;
  os_signpost_id_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)size_t v8 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "GPUFrame", "", v8, 2u);
  }
}

void md::LabelCustomFeatureSupport::addDataSourceInternal(uint64_t a1, void *a2)
{
  id v36 = a2;
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), 288, 8);
  v37[0] = v3;
  v37[1] = a1 + 88;
  char v38 = 0;
  id v4 = v36;
  *(void *)(v3 + 32) = v4;
  id v5 = v4;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = *(void *)(a1 + 16);
  *(void *)(v3 + 56) = &unk_1EF559D38;
  *(void *)(v3 + 64) = 0;
  id v6 = v5;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 80) = &unk_1EF55A038;
  *(void *)(v3 + 88) = v6;
  {
    operator new();
  }
  *(void *)(v3 + 120) = mdm::Allocator::instance(void)::alloc;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 104) = v3 + 112;
  *(void *)(v3 + 136) = &unk_1EF559E58;
  *(void *)(v3 + 144) = 0;
  *(unsigned char *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = &unk_1EF55A018;
  *(void *)(v3 + 176) = 0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(void *)(v3 + 224) = 0;
  {
    operator new();
  }
  uint64_t v7 = mdm::Allocator::instance(void)::alloc;
  *(void *)(v3 + 248) = 0;
  *(void *)(v3 + 232) = v7;
  {
    operator new();
  }
  uint64_t v8 = mdm::Allocator::instance(void)::alloc;
  *(void *)(v3 + 264) = 0;
  *(void *)(v3 + 272) = 0;
  *(void *)(v3 + 256) = v8;
  *(void *)(v3 + 240) = v3 + 248;
  *(_DWORD *)(v3 + 279) = 0;
  uint64_t v9 = [[VKCustomFeatureDataSourceObserverThunk alloc] initWithDataSource:v6 observer:v3 + 40];
  size_t v10 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v9;

  int v11 = [v6 isClusteringEnabled];
  *(unsigned char *)(v3 + 280) = v11;
  if (v11) {
    operator new();
  }
  *(unsigned char *)(v3 + 282) = objc_msgSend(v6, "sceneState", v33, v34, v35);
  int v12 = [v6 sceneID];
  *(unsigned char *)(v3 + 281) = v12;
  uint64_t v13 = (char *)operator new(0x88uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)uint64_t v13 = &unk_1EF57F798;
  *((void *)v13 + 3) = *(void *)(v3 + 48);
  int v14 = *(unsigned __int8 *)(v3 + 282);
  char v15 = *(unsigned char *)(v3 + 280);
  v13[32] = 0;
  *(_OWORD *)(v13 + 40) = xmmword_1A28FCDA0;
  *((void *)v13 + 7) = EaseLinear;
  *((void *)v13 + 8) = EaseLinear;
  *((_DWORD *)v13 + 18) = 0;
  v13[76] = 0;
  v13[77] = v15;
  *(void *)(v13 + 78) = 0;
  *(void *)(v13 + 94) = 0;
  *(void *)(v13 + 86) = 0;
  *(_DWORD *)(v13 + 101) = 0;
  *(void *)(v13 + 108) = 0;
  *(void *)(v13 + 124) = 0;
  *(void *)(v13 + 116) = 0;
  *((_DWORD *)v13 + 33) = 0;
  v13[78] = atomic_fetch_add(md::LabelScene::LabelScene(md::LabelManager *,VKLabelSceneID,VKLabelSceneState,BOOL)::nextSceneTag, 1u)+ 1;
  md::LabelScene::setSceneID((uint64_t)(v13 + 24), v12, 1);
  if (v14)
  {
    *((_DWORD *)v13 + 10) = 1065353216;
    (*((void (**)(float))v13 + 7))(1.0);
    char v17 = 2;
  }
  else
  {
    *((_DWORD *)v13 + 10) = 0;
    (*((void (**)(double))v13 + 8))(0.0);
    char v17 = 0;
  }
  *((_DWORD *)v13 + 11) = v16;
  v13[76] = v17;
  atomic_store(v14 != 0, (unsigned __int8 *)v13 + 79);
  int v18 = *(std::__shared_weak_count **)(v3 + 200);
  *(void *)(v3 + 192) = v13 + 24;
  *(void *)(v3 + 200) = v13;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }

  unsigned int v19 = (uint64_t *)(a1 + 80);
  unsigned int v20 = *(uint64_t **)(a1 + 80);
  if (v20)
  {
    unint64_t v21 = *(void *)(v3 + 32);
    while (1)
    {
      while (1)
      {
        BOOL v22 = v20;
        unint64_t v23 = v20[4];
        if (v21 >= v23) {
          break;
        }
        unsigned int v20 = (uint64_t *)*v20;
        unsigned int v19 = v22;
        if (!*v22) {
          goto LABEL_20;
        }
      }
      if (v23 >= v21) {
        break;
      }
      unsigned int v20 = (uint64_t *)v20[1];
      if (!v20)
      {
        unsigned int v19 = v22 + 1;
        goto LABEL_20;
      }
    }
    if (v3)
    {
      md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider((md::LabelCustomFeatureProvider *)(v3 + 40));

      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), v3, 288);
    }
  }
  else
  {
    BOOL v22 = (uint64_t *)(a1 + 80);
LABEL_20:
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = v22;
    *unsigned int v19 = v3;
    uint64_t v24 = **(void **)(a1 + 72);
    if (v24)
    {
      *(void *)(a1 + 72) = v24;
      uint64_t v3 = *v19;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), (uint64_t *)v3);
    unsigned int v25 = *(md::LabelMapTile ***)(a1 + 104);
    ++*(void *)(a1 + 96);
    uint64_t v26 = *(md::LabelMapTile ***)(a1 + 112);
    if (v25 != v26)
    {
      char v27 = 0;
      do
      {
        unint64_t v28 = *v25;
        md::LabelCustomFeatureProvider::addTile((uint64_t *)(v37[0] + 40), *v25);
        md::LabelCustomFeatureSupport::populateLabelFeaturesInTile((md::LabelCustomFeatureSupport *)a1, *((md::LabelMapTile **)v28 + 9), *((std::__shared_weak_count **)v28 + 10));
        v27 |= *((unsigned char *)v28 + 120) != 0;
        ++v25;
      }
      while (v25 != v26);
      if (v27)
      {
        uint64_t v29 = *(void *)(a1 + 16);
        unsigned __int8 v30 = atomic_load((unsigned __int8 *)(v29 + 3058));
        if (v30)
        {
          uint64_t v31 = *(void *)(v29 + 136);
          if (v31)
          {
            uint64_t v32 = *(void *)(v31 + 56);
            if (v32)
            {
              v37[0] = *(void *)(a1 + 16);
              LOBYTE(v39) = 9;
              (*(void (**)(uint64_t, void *, long long *))(*(void *)v32 + 48))(v32, v37, &v39);
            }
          }
        }
      }
    }
    *(unsigned char *)(a1 + 232) = 1;
  }
}

void sub_1A1A554A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

float md::LabelScene::setSceneID(uint64_t a1, int a2, int a3)
{
  if (*(unsigned __int8 *)(a1 + 8) != a2 || a3 != 0)
  {
    *(unsigned char *)(a1 + 8) = a2;
    *(unsigned char *)(a1 + 80) = 0;
    id v5 = *(char **)(a1 + 56);
    *(void *)(a1 + 64) = v5;
    if (a2 == 4)
    {
      *(unsigned char *)(a1 + 80) = 1;
      *(_DWORD *)(a1 + 48) = 1067869798;
      unint64_t v10 = *(void *)(a1 + 72);
      if ((unint64_t)v5 >= v10)
      {
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v5) >> 2);
        unint64_t v28 = 0x999999999999999ALL * ((uint64_t)(v10 - (void)v5) >> 2);
        if (v28 <= 1) {
          unint64_t v28 = 1;
        }
        if (v27 >= 0x666666666666666) {
          unint64_t v29 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29 > 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_85;
        }
        uint64_t v30 = 5 * v29;
        uint64_t v31 = operator new(20 * v29);
        uint64_t v32 = (char *)&v31[v30];
        *(void *)uint64_t v31 = 0;
        void v31[2] = 1053609165;
        *((unsigned char *)v31 + 12) = 1;
        *((unsigned char *)v31 + 16) = 0;
        uint64_t v9 = (char *)(v31 + 5);
        *(void *)(a1 + 56) = v31;
        *(void *)(a1 + 64) = v31 + 5;
        *(void *)(a1 + 72) = v32;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(void *)id v5 = 0;
        *((_DWORD *)v5 + 2) = 1053609165;
        v5[12] = 1;
        uint64_t v9 = v5 + 20;
        uint8_t v5[16] = 0;
      }
      *(void *)(a1 + 64) = v9;
      int v18 = *(_DWORD *)(a1 + 48);
      unint64_t v33 = *(void *)(a1 + 72);
      if ((unint64_t)v9 < v33)
      {
        int v20 = 1061997773;
        goto LABEL_43;
      }
      unsigned int v44 = *(char **)(a1 + 56);
      unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v44) >> 2) + 1;
      if (v45 <= 0xCCCCCCCCCCCCCCCLL)
      {
        unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - (void)v44) >> 2);
        if (2 * v46 > v45) {
          unint64_t v45 = 2 * v46;
        }
        if (v46 >= 0x666666666666666) {
          unint64_t v47 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          if (v47 > 0xCCCCCCCCCCCCCCCLL) {
            goto LABEL_85;
          }
          unint64_t v48 = (char *)operator new(20 * v47);
        }
        else
        {
          unint64_t v48 = 0;
        }
        unint64_t v49 = &v48[4 * ((v9 - v44) >> 2)];
        unint64_t v50 = &v48[20 * v47];
        *(_DWORD *)unint64_t v49 = 1061997773;
        *((_DWORD *)v49 + 1) = v18;
        v49[8] = 0;
        v49[12] = 0;
        v49[16] = 1;
        uint64_t v7 = v49 + 20;
        if (v9 != v44)
        {
          do
          {
            long long v52 = *(_OWORD *)(v9 - 20);
            *(v49 - 4) = *(v9 - 4);
            *(_OWORD *)(v49 - 20) = v52;
            v49 -= 20;
            v9 -= 20;
          }
          while (v9 != v44);
LABEL_78:
          uint64_t v9 = *(char **)(a1 + 56);
          *(void *)(a1 + 56) = v49;
          *(void *)(a1 + 64) = v7;
          *(void *)(a1 + 72) = v50;
          if (!v9) {
            goto LABEL_83;
          }
          goto LABEL_81;
        }
LABEL_80:
        *(void *)(a1 + 56) = v49;
        *(void *)(a1 + 64) = v7;
        *(void *)(a1 + 72) = v50;
LABEL_81:
        char v38 = v9;
        goto LABEL_82;
      }
    }
    else
    {
      if (a2 != 3)
      {
        if (a2 == 1)
        {
          *(_DWORD *)(a1 + 48) = 1061997773;
          *(unsigned char *)(a1 + 80) = 1;
          unint64_t v6 = *(void *)(a1 + 72);
          if ((unint64_t)v5 < v6)
          {
            *(void *)id v5 = 0x3F4CCCCD00000000;
            v5[8] = 0;
            v5[12] = 0;
            uint8_t v5[16] = 1;
            uint64_t v7 = v5 + 20;
LABEL_83:
            *(void *)(a1 + 64) = v7;
            float v53 = *(float *)(a1 + 48);
            *(void *)(a1 + 32) = EaseLinear;
            float result = fmaxf(v53, 0.000001);
            *(float *)(a1 + 24) = result;
            *(void *)(a1 + 40) = EaseConstantOne;
            *(_DWORD *)(a1 + 28) = 897988541;
            return result;
          }
          unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 2);
          unint64_t v22 = 0x999999999999999ALL * ((uint64_t)(v6 - (void)v5) >> 2);
          if (v22 <= 1) {
            unint64_t v22 = 1;
          }
          if (v21 >= 0x666666666666666) {
            unint64_t v23 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23 <= 0xCCCCCCCCCCCCCCCLL)
          {
            uint64_t v24 = 20 * v23;
            unsigned int v25 = (char *)operator new(20 * v23);
            uint64_t v26 = &v25[v24];
            *(void *)unsigned int v25 = 0x3F4CCCCD00000000;
            v25[8] = 0;
            v25[12] = 0;
            v25[16] = 1;
LABEL_51:
            uint64_t v7 = v25 + 20;
            *(void *)(a1 + 56) = v25;
            *(void *)(a1 + 64) = v25 + 20;
            *(void *)(a1 + 72) = v26;
            if (!v5) {
              goto LABEL_83;
            }
            char v38 = v5;
LABEL_82:
            operator delete(v38);
            goto LABEL_83;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 48) = 1036831949;
          unint64_t v11 = *(void *)(a1 + 72);
          if ((unint64_t)v5 < v11)
          {
            v5[8] = 0;
            *(void *)id v5 = 0;
            v5[12] = 0;
            uint64_t v7 = v5 + 20;
            uint8_t v5[16] = 0;
            goto LABEL_83;
          }
          unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (void)v5) >> 2);
          uint64_t v35 = 2 * v34;
          if (2 * v34 <= 1) {
            uint64_t v35 = 1;
          }
          if (v34 >= 0x666666666666666) {
            unint64_t v36 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36 <= 0xCCCCCCCCCCCCCCCLL)
          {
            uint64_t v37 = 20 * v36;
            unsigned int v25 = (char *)operator new(20 * v36);
            *(void *)unsigned int v25 = 0;
            uint64_t v26 = &v25[v37];
            v25[8] = 0;
            v25[12] = 0;
            v25[16] = 0;
            goto LABEL_51;
          }
        }
LABEL_85:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      *(unsigned char *)(a1 + 80) = 1;
      *(_DWORD *)(a1 + 48) = 1065353216;
      unint64_t v8 = *(void *)(a1 + 72);
      if ((unint64_t)v5 >= v8)
      {
        unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)v5) >> 2);
        uint64_t v13 = 2 * v12;
        if (2 * v12 <= 1) {
          uint64_t v13 = 1;
        }
        if (v12 >= 0x666666666666666) {
          unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14 > 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_85;
        }
        uint64_t v15 = 20 * v14;
        int v16 = (char *)operator new(20 * v14);
        *(void *)int v16 = 0;
        char v17 = &v16[v15];
        v16[8] = 0;
        v16[12] = 0;
        v16[16] = 0;
        uint64_t v9 = v16 + 20;
        *(void *)(a1 + 56) = v16;
        *(void *)(a1 + 64) = v16 + 20;
        *(void *)(a1 + 72) = v17;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        v5[8] = 0;
        *(void *)id v5 = 0;
        v5[12] = 0;
        uint64_t v9 = v5 + 20;
        uint8_t v5[16] = 0;
      }
      *(void *)(a1 + 64) = v9;
      int v18 = *(_DWORD *)(a1 + 48);
      unint64_t v19 = *(void *)(a1 + 72);
      if ((unint64_t)v9 < v19)
      {
        int v20 = 1056964608;
LABEL_43:
        *(_DWORD *)uint64_t v9 = v20;
        *((_DWORD *)v9 + 1) = v18;
        v9[8] = 0;
        v9[12] = 0;
        uint64_t v7 = v9 + 20;
        uint8_t v9[16] = 1;
        goto LABEL_83;
      }
      long long v39 = *(char **)(a1 + 56);
      unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v39) >> 2) + 1;
      if (v40 <= 0xCCCCCCCCCCCCCCCLL)
      {
        unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (void)v39) >> 2);
        if (2 * v41 > v40) {
          unint64_t v40 = 2 * v41;
        }
        if (v41 >= 0x666666666666666) {
          unint64_t v42 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          if (v42 > 0xCCCCCCCCCCCCCCCLL) {
            goto LABEL_85;
          }
          uint64_t v43 = (char *)operator new(20 * v42);
        }
        else
        {
          uint64_t v43 = 0;
        }
        unint64_t v49 = &v43[4 * ((v9 - v39) >> 2)];
        unint64_t v50 = &v43[20 * v42];
        *(_DWORD *)unint64_t v49 = 1056964608;
        *((_DWORD *)v49 + 1) = v18;
        v49[8] = 0;
        v49[12] = 0;
        v49[16] = 1;
        uint64_t v7 = v49 + 20;
        if (v9 != v39)
        {
          do
          {
            long long v51 = *(_OWORD *)(v9 - 20);
            *(v49 - 4) = *(v9 - 4);
            *(_OWORD *)(v49 - 20) = v51;
            v49 -= 20;
            v9 -= 20;
          }
          while (v9 != v39);
          goto LABEL_78;
        }
        goto LABEL_80;
      }
    }
    abort();
  }
  return result;
}

void sub_1A1A55E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void geo::codec::copyFeatureStyleAttributes(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      id v5 = (char *)operator new(0x40uLL);
      unint64_t v6 = v5;
      uint64_t v7 = *(const void **)(v3 + 24);
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *(void *)id v5 = &unk_1EF57F6B8;
      uint64_t v8 = *(unsigned __int8 *)(v3 + 32);
      *((void *)v5 + 3) = *(void *)v4;
      uint64_t v9 = v5 + 24;
      uint64_t v10 = *(void *)(v3 + 16);
      *((void *)v5 + 4) = v4;
      *((void *)v5 + 5) = v10;
      if (v10)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        uint64_t v4 = *(void *)(v3 + 8);
      }
      *((void *)v5 + 6) = 0;
      v5[56] = 0;
      *(_WORD *)(v5 + 57) = *(unsigned __int8 *)(v4 + 33);
      if (v7 && v8)
      {
        unint64_t v11 = malloc_type_malloc(12 * v8, 0x10000403E1C8BA9uLL);
        *((void *)v6 + 6) = v11;
        if (v11)
        {
          v6[56] = v8;
          memcpy(v11, v7, 12 * v8);
        }
      }
    }
    else
    {
      unint64_t v6 = (char *)operator new(0x40uLL);
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)unint64_t v6 = &unk_1EF57F6B8;
      uint64_t v9 = v6 + 24;
      FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v6 + 24), (const FeatureStyleAttributes *)v3);
    }
    *a2 = v9;
    a2[1] = v6;
    v6[58] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1A1A55FC4(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (!atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      std::__shared_weak_count::~__shared_weak_count(v1);
      operator delete(v4);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_1A1A560C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1A56198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1A563A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A1A56B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,pthread_rwlock_t *a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  MEMORY[0x1A6239270](v33, 0x1030C406D3438E8);
  geo::write_lock_guard::~write_lock_guard(&a25);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a26);

  _Unwind_Resume(a1);
}

BOOL NSStringMapComparison::operator()(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 8)) {
    return 0;
  }
  id v4 = *(id *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    id v6 = *(id *)(a1 + 8);
    BOOL v7 = [v6 compare:v5] == -1;
  }
  else
  {
    BOOL v7 = 1;
  }

  return v7;
}

void sub_1A1A56C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::shared_ptr<gss::ClientStyleState<gss::PropertyID>>::shared_ptr[abi:nn180100]<gss::ClientStyleState<gss::PropertyID>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A1A56D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<gss::ClientStyleState<gss::PropertyID>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A1A57128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  BOOL v7 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)va, v7);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)va3);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_1A1A57D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a30);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v32 - 168);
  uint64_t v34 = *(void *)(v32 - 152);
  if (v34)
  {
    *(void *)(v32 - 144) = v34;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v32 - 128) + 40))(*(void *)(v32 - 128), v34, *(void *)(v32 - 136) - v34);
  }
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v32 - 120));

  _Unwind_Resume(a1);
}

void sub_1A1A5804C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::PropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

uint64_t gss::StylesheetQuery<gss::PropertyID>::~StylesheetQuery(uint64_t a1)
{
  *(void *)a1 = &unk_1EF567378;
  char v2 = *(std::__shared_weak_count **)(a1 + 312);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 296);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (!*(unsigned char *)(a1 + 286) && *(void *)(a1 + 272))
  {
    uint64_t v4 = gss::Allocator::instance((gss::Allocator *)v3);
    (*(void (**)(uint64_t, void, void))(*(void *)v4 + 40))(v4, *(void *)(a1 + 272), *(unsigned __int16 *)(a1 + 284));
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 240);
  if (v5)
  {
    *(void *)(a1 + 248) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 264) + 40))(*(void *)(a1 + 264), v5, *(void *)(a1 + 256) - v5);
  }
  *(void *)a1 = &unk_1EF5674D0;
  id v6 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if (v6) {
    geo::read_write_lock::logFailure(v6, (uint64_t)"destruction", v7);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v8) {
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  return a1;
}

void std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  if (!*(unsigned char *)(a1 + 76) && *(void *)v2) {
    operator delete(*(void **)v2);
  }
  *(void *)(v2 + 5) = 0;
  *(void *)uint64_t v2 = 0;
  uint64_t v3 = (void **)(a1 + 48);
  if (!*(unsigned char *)(a1 + 60) && *v3) {
    operator delete(*v3);
  }
  *(void *)(a1 + 53) = 0;
  std::__shared_weak_count *v3 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  JUMPOUT(0x1A6239270);
}

uint64_t grl::IconManager::identifierForName(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  float v5 = ceilf(a3);
  std::string::basic_string[abi:nn180100]<0>(__p, "Default");
  float v15 = v5;
  grl::IconManager::retrieveResourcePack(buf, a1, (float *)__p, 2);
  id v6 = *(grl::Allocator **)buf;
  BOOL v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v6) {
    grl::IconManager::loadGlobalResourcePack((uint64_t)buf, a1);
  }
  uint64_t v8 = grl::codec::IconMapPack::identifierForName(v6, a2);
  if (v8)
  {
    uint64_t v9 = v8;
    if (!v7) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
  }
  uint64_t v11 = GEOGetGeoResourceLibIconManagerLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v5;
    _os_log_impl(&dword_1A1780000, v11, OS_LOG_TYPE_ERROR, "Failed to find ID for Icon Name\nName: %s - Content Scale: %f", buf, 0x16u);
  }
  uint64_t v9 = 0;
  if (v7) {
LABEL_8:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_9:
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

uint64_t grl::codec::IconMapPack::identifierForName(grl::Allocator *a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (char *)a2;
  }
  else {
    uint64_t v4 = *(char **)a2;
  }
  if (v3 >= 0) {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  uint64_t v11 = grl::Allocator::instance(a1);
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>::__init_with_size[abi:nn180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((uint64_t)v9, v4, &v4[v5], v5);
  id v6 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>((void *)a1 + 12, (uint64_t)v9);
  if (v6) {
    uint64_t v7 = *((unsigned int *)v6 + 12);
  }
  else {
    uint64_t v7 = 0;
  }
  if (SHIBYTE(v10) < 0) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v11 + 40))(v11, v9[0], v10 & 0x7FFFFFFFFFFFFFFFLL);
  }
  return v7;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v17, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = (uint64_t)(a1 + 6);
    do
    {
      unint64_t v15 = *((void *)v13 + 1);
      if (v8 == v15)
      {
        if (std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>::operator()[abi:nn180100](v14, v13 + 16, v2))return v13; {
      }
        }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v7) {
            v15 %= *(void *)&v7;
          }
        }
        else
        {
          v15 &= *(void *)&v7 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      uint64_t v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>::operator()[abi:nn180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    int v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t gss::uint8Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v28 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 == 8)
  {
    unint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    unint64_t v14 = v13 + 2;
    if (!*(unsigned char *)(a1 + 24)) {
      unint64_t v14 = v13 + 1;
    }
    if (v12 >= v14)
    {
      unint64_t v25 = v13 + 1;
      unsigned int v26 = *(unsigned __int8 *)(*(void *)a1 + v13);
      if (*(unsigned char *)(a1 + 24))
      {
        if (v25 >= v12) {
          int v27 = 0;
        }
        else {
          int v27 = *(unsigned __int8 *)(*(void *)a1 + v25);
        }
        unsigned int v26 = ((v27 & (0xFFFF << (8 - *(unsigned char *)(a1 + 24)))) >> (8 - *(unsigned char *)(a1 + 24))) | ((((1 << (8 - *(unsigned char *)(a1 + 24))) - 1) & v26) << *(unsigned char *)(a1 + 24));
      }
      *(void *)(a1 + 16) = v25;
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(unsigned char *)geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 16, &v28) = v26;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v31 = 1024;
      int v32 = 141;
      __int16 v33 = 2082;
      uint64_t v34 = "Could not read uint8.";
      _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    char v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read uint8.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    int v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v31 = 1024;
      int v32 = 140;
      __int16 v33 = 2082;
      uint64_t v34 = "Found uint8 property with strange number of bits.";
      _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    unint64_t v22 = (void *)std::ostream::operator<<();
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found uint8 property with strange number of bits.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::BOOLDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v25 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 == 1)
  {
    uint8_t v11 = v10;
    geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v24);
    if (v24[0])
    {
      char v12 = v24[4];
      buf[0] = v11;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(unsigned char *)geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 16, &v25) = v12;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    uint64_t v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v27 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v28 = 1024;
      int v29 = 47;
      __int16 v30 = 2082;
      __int16 v31 = "Could not read BOOLean property.";
      _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    uint64_t v21 = (void *)std::ostream::operator<<();
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read BOOLean property.", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v27 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v28 = 1024;
      int v29 = 46;
      __int16 v30 = 2082;
      __int16 v31 = "Found BOOLean property with strange bit count.";
      _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    uint64_t v16 = (void *)std::ostream::operator<<();
    char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found BOOLean property with strange bit count.", 46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = *a2;
  unsigned int v4 = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)a1, *a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = v3;
    v7[1] = 0;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a1, v7, (unsigned __int8 *)&v8);
    uint64_t v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    uint64_t v5 = v4;
  }
  return *(void *)a1 + *(unsigned __int16 *)(a1 + 8) + v5;
}

void ___ZN2md21DaVinciGroundSettings31_parsePropertyValuesInZoomBlockEN2gm5RangeIhEEP12NSDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 32);
  uint64_t v22 = 0;
  if (!md::DaVinciGroundSettings::_parsePropertyKeyAndType(v5, (int *)&v22 + 1, &v22)) {
    goto LABEL_25;
  }
  unint64_t v8 = v7[1];
  if (!v8) {
    goto LABEL_25;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = SHIDWORD(v22);
    if (v8 <= SHIDWORD(v22)) {
      unint64_t v10 = SHIDWORD(v22) % v8;
    }
  }
  else
  {
    unint64_t v10 = (v8 - 1) & SHIDWORD(v22);
  }
  uint8_t v11 = *(uint64_t ***)(*v7 + 8 * v10);
  if (!v11 || (char v12 = *v11) == 0)
  {
LABEL_25:

    return;
  }
  if (v9.u32[0] < 2uLL)
  {
    unint64_t v13 = v8 - 1;
    while (1)
    {
      uint64_t v15 = v12[1];
      if (v15 == SHIDWORD(v22))
      {
        if (*((_DWORD *)v12 + 4) == HIDWORD(v22)) {
          goto LABEL_23;
        }
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_25;
      }
      char v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v12[1];
    if (v14 == SHIDWORD(v22)) {
      break;
    }
    if (v14 >= v8) {
      v14 %= v8;
    }
    if (v14 != v10) {
      goto LABEL_25;
    }
LABEL_12:
    char v12 = (uint64_t *)*v12;
    if (!v12) {
      goto LABEL_25;
    }
  }
  if (*((_DWORD *)v12 + 4) != HIDWORD(v22)) {
    goto LABEL_12;
  }
LABEL_23:
  int v17 = v22;
  uint64_t v18 = v12 + 3;
  id v19 = v6;
  __int16 v20 = *(_WORD *)(a1 + 40);
  id v21 = v5;
  uint64_t v16 = *((unsigned int *)v12 + 8);
  if (v16 != -1)
  {
    unint64_t v23 = &v17;
    ((void (*)(int **, uint64_t *))off_1EF58FC18[v16])(&v23, v12 + 3);

    goto LABEL_25;
  }
  std::__throw_bad_variant_access[abi:nn180100]();
  __break(1u);
}

void sub_1A1A594A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciGroundSettings::_parsePropertyKeyAndType(void *a1, int *a2, _DWORD *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unint64_t v45 = a1;
  id v5 = v45;
  id v6 = (const char *)[(md::_anonymous_namespace_ *)v5 UTF8String];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    *(void *)&long long v49 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    BYTE7(v49) = v7;
    p_dst = &__dst;
    if (!v7) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v6, v8);
LABEL_9:
  *((unsigned char *)p_dst + v8) = 0;
  int v12 = SBYTE7(v49);
  unint64_t v13 = (void *)__dst;
  if ((SBYTE7(v49) & 0x80u) == 0) {
    unint64_t v14 = (uint64_t *)&__dst;
  }
  else {
    unint64_t v14 = (uint64_t *)__dst;
  }
  if ((SBYTE7(v49) & 0x80u) == 0) {
    unint64_t v15 = BYTE7(v49);
  }
  else {
    unint64_t v15 = *((void *)&__dst + 1);
  }
  unint64_t v16 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v14, v15);
  unint64_t v46 = a3;
  unint64_t v47 = v5;
  {
    unint64_t v18 = v16;
                                         + 8));
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      unint64_t v20 = v16;
    }
    else
    {
    }
    if (v21)
    {
      uint64_t v22 = *v21;
      if (*v21)
      {
        unint64_t v23 = a2;
        if (v19.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v33 = v22[1];
            if (v18 == v33)
            {
              uint64_t v34 = *((unsigned __int8 *)v22 + 39);
              if ((v34 & 0x80u) == 0) {
                uint64_t v35 = *((unsigned __int8 *)v22 + 39);
              }
              else {
                uint64_t v35 = v22[3];
              }
              if (v35 == v15)
              {
                if ((v34 & 0x80) != 0)
                {
                  unint64_t v16 = memcmp((const void *)v22[2], v14, v22[3]);
                  if (!v16) {
                    goto LABEL_64;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v22 + 39)) {
                    goto LABEL_64;
                  }
                  uint64_t v36 = 0;
                  while (*((unsigned __int8 *)v22 + v36 + 16) == *((unsigned __int8 *)v14 + v36))
                  {
                    if (v34 == ++v36) {
                      goto LABEL_64;
                    }
                  }
                }
              }
            }
            else if ((v33 & v24) != v20)
            {
              goto LABEL_25;
            }
            unsigned __int8 v25 = 0;
            uint64_t v22 = (uint64_t *)*v22;
            if (!v22) {
              goto LABEL_26;
            }
          }
        }
        while (1)
        {
          unint64_t v29 = v22[1];
          if (v18 == v29)
          {
            uint64_t v30 = *((unsigned __int8 *)v22 + 39);
            if ((v30 & 0x80u) == 0) {
              uint64_t v31 = *((unsigned __int8 *)v22 + 39);
            }
            else {
              uint64_t v31 = v22[3];
            }
            if (v31 == v15)
            {
              if ((v30 & 0x80) != 0)
              {
                unint64_t v16 = memcmp((const void *)v22[2], v14, v22[3]);
                if (!v16)
                {
LABEL_64:
                  unsigned __int8 v25 = v22;
                  goto LABEL_26;
                }
              }
              else
              {
                if (!*((unsigned char *)v22 + 39)) {
                  goto LABEL_64;
                }
                uint64_t v32 = 0;
                while (*((unsigned __int8 *)v22 + v32 + 16) == *((unsigned __int8 *)v14 + v32))
                {
                  if (v30 == ++v32) {
                    goto LABEL_64;
                  }
                }
              }
            }
          }
          else
          {
            if (v29 >= v17) {
              v29 %= v17;
            }
            if (v29 != v20) {
              goto LABEL_25;
            }
          }
          unsigned __int8 v25 = 0;
          uint64_t v22 = (uint64_t *)*v22;
          if (!v22) {
            goto LABEL_26;
          }
        }
      }
    }
  }
  unint64_t v23 = a2;
LABEL_25:
  unsigned __int8 v25 = 0;
LABEL_26:
  if (v12 < 0) {
    operator delete(v13);
  }
  if (!v25)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v37 = v47;
    char v38 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst) = 138412290;
      *(void *)((char *)&__dst + 4) = v47;
      _os_log_impl(&dword_1A1780000, v38, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: Uknown property name %@ ...ignoring", (uint8_t *)&__dst, 0xCu);
    }

LABEL_92:
    uint64_t v43 = 0;
    goto LABEL_93;
  }
  *unint64_t v23 = *((_DWORD *)v25 + 10);
  {
    long long __dst = xmmword_1A2961DA0;
    long long v49 = unk_1A2961DB0;
    uint64_t v50 = 4;
    std::unordered_map<md::DaVinciGroundSettings::Property,md::DaVinciGroundSettings::PropertyType>::unordered_map((int *)&__dst, 5);
  }
  {
    unint64_t v26 = *v23;
                                         + 8));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v28 = *v23;
    }
    else
    {
    }
    uint64_t v37 = v47;
    if (v40)
    {
      long long v39 = *v40;
      if (*v40)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v42 = v39[1];
            if (v42 == v26)
            {
              if (*((_DWORD *)v39 + 4) == v26) {
                goto LABEL_89;
              }
            }
                            - 1)) != v28)
            {
              goto LABEL_88;
            }
            long long v39 = (uint64_t *)*v39;
            if (!v39) {
              goto LABEL_89;
            }
          }
        }
        do
        {
          unint64_t v41 = v39[1];
          if (v41 == v26)
          {
            if (*((_DWORD *)v39 + 4) == v26) {
              break;
            }
          }
          else
          {
            if (v41 != v28) {
              goto LABEL_88;
            }
          }
          long long v39 = (uint64_t *)*v39;
        }
        while (v39);
      }
    }
    else
    {
LABEL_88:
      long long v39 = 0;
    }
  }
  else
  {
    long long v39 = 0;
    uint64_t v37 = v47;
  }
LABEL_89:
  {
    long long __dst = xmmword_1A2961DA0;
    long long v49 = unk_1A2961DB0;
    uint64_t v50 = 4;
    std::unordered_map<md::DaVinciGroundSettings::Property,md::DaVinciGroundSettings::PropertyType>::unordered_map((int *)&__dst, 5);
  }
  if (!v39) {
    goto LABEL_92;
  }
  *unint64_t v46 = *((_DWORD *)v39 + 5);
  uint64_t v43 = 1;
LABEL_93:

  return v43;
}

void sub_1A1A59A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void md::anonymous namespace'::_stringToProperty(md::_anonymous_namespace_ *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:nn180100]<0>(v9, "veryHotHSVAdjustment");
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v9;
    uint64_t v12 = v10;
    v9[1] = 0;
    uint64_t v10 = 0;
    v9[0] = 0;
    int v13 = 0;
    std::string::basic_string[abi:nn180100]<0>(v7, "arcticHSVAdjustment");
    long long v14 = *(_OWORD *)v7;
    uint64_t v15 = v8;
    v7[1] = 0;
    uint64_t v8 = 0;
    v7[0] = 0;
    int v16 = 1;
    std::string::basic_string[abi:nn180100]<0>(v5, "veryDryHSVAdjustment");
    long long v17 = *(_OWORD *)v5;
    uint64_t v18 = v6;
    v5[1] = 0;
    uint64_t v6 = 0;
    v5[0] = 0;
    int v19 = 2;
    std::string::basic_string[abi:nn180100]<0>(v3, "veryWetHSVAdjustment");
    long long v20 = *(_OWORD *)v3;
    uint64_t v21 = v4;
    v3[1] = 0;
    uint64_t v4 = 0;
    v3[0] = 0;
    int v22 = 3;
    std::string::basic_string[abi:nn180100]<0>(v1, "groundElevationScale");
    long long __p = *(_OWORD *)v1;
    uint64_t v24 = v2;
    v1[1] = 0;
    uint64_t v2 = 0;
    v1[0] = 0;
    int v25 = 4;
    std::unordered_map<std::string,md::DaVinciGroundSettings::Property>::unordered_map((long long *)v11, 5);
    if (SHIBYTE(v24) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v18) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete((void *)v20);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
LABEL_17:
    operator delete((void *)v17);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v12) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete((void *)v14);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v2) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(v11[0]);
    if ((SHIBYTE(v2) & 0x80000000) == 0)
    {
LABEL_10:
      if ((SHIBYTE(v4) & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
LABEL_20:
    operator delete(v1[0]);
    if ((SHIBYTE(v4) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v6) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_22;
    }
LABEL_21:
    operator delete(v3[0]);
    if ((SHIBYTE(v6) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_23;
    }
LABEL_22:
    operator delete(v5[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v10) & 0x80000000) == 0)
      {
LABEL_14:
        return;
      }
LABEL_24:
      operator delete(v9[0]);
      goto LABEL_14;
    }
LABEL_23:
    operator delete(v7[0]);
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
}

void sub_1A1A59D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (a72 < 0)
  {
    operator delete(a68);
    if ((a66 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a59 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a66 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
LABEL_13:
  operator delete(a40);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
LABEL_7:
  operator delete(__p);
LABEL_14:
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_16:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a39 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_23:
    _Unwind_Resume(a1);
  }
LABEL_22:
  operator delete(a34);
  goto LABEL_23;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorIZZN2md21DaVinciGroundSettings31_parsePropertyValuesInZoomBlockEN2gm5RangeIhEEP12NSDictionaryEUb_E3__1EEJRNS0_6__baseILNS0_6_TraitE1EJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISN_EEEENSK_INSM_INSA_6MatrixIfLi3ELi1EEEEENSO_IST_EEEEEEEEEEDcT_DpT0_(uint64_t *a1, void *a2)
{
  *(void *)&buf_4[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (((*(uint64_t (**)(void))(*(void *)*a2 + 16))() & 1) == 0) {
    operator new();
  }
  id v4 = *(id *)(v3 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v4 floatValue];
    LOBYTE(buf) = 1;
    buf_4[0] = v5;

    (*(void (**)(void, uint64_t, uint64_t, _DWORD *))(*(void *)*a2 + 8))(*a2, v3 + 24, v3 + 25, buf_4);
  }
  else
  {

    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v6 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(v3 + 32);
      int buf = 138412290;
      *(void *)buf_4 = v7;
      _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: Type mismatch for key: %@", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_1A1A5A128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *gms::ZoomablePropertyStore<float>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  id v4 = result;
  unsigned int v5 = *a2;
  unsigned int v6 = *a3;
  int v7 = v5 | (v6 << 8);
  int v8 = *a4;
  if (result[7])
  {
    uint8x8_t v9 = (uint64_t *)result[5];
    uint64_t v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      int v16 = (void *)result[5];
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = (uint64_t *)result[5];
      do
      {
        int v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            long long v14 = (uint64_t **)v13;
            int v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            long long v14 = (uint64_t **)v12[2];
            BOOL v15 = *v14 == v12;
            uint64_t v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        uint64_t v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      int v16 = (void *)result[5];
      do
      {
        unint64_t v17 = v11 >> 1;
        uint64_t v18 = v16;
        if (v11 != 1)
        {
          uint64_t v20 = v11 >> 1;
          uint64_t v21 = v16;
          do
          {
            unint64_t v23 = (void *)v21[1];
            if (v23)
            {
              do
              {
                uint64_t v18 = v23;
                unint64_t v23 = (void *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v18 = (void *)v21[2];
                BOOL v15 = *v18 == (void)v21;
                uint64_t v21 = v18;
              }
              while (!v15);
            }
            uint64_t v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 29) < v6)
        {
          int v19 = (void *)v18[1];
          if (v19)
          {
            do
            {
              int v16 = v19;
              int v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              int v16 = (void *)v18[2];
              BOOL v15 = *v16 == (void)v18;
              uint64_t v18 = v16;
            }
            while (!v15);
          }
          unint64_t v17 = v11 + ~v17;
        }
        unint64_t v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 28) >= v6)
    {
      if (v16 == v9) {
        goto LABEL_46;
      }
      uint64_t v27 = *v16;
      if (*v16)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = *(void *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = v16[2];
          BOOL v15 = *(void *)v28 == (void)v16;
          int v16 = (void *)v28;
        }
        while (v15);
      }
      if (v5 >= *(unsigned __int8 *)(v28 + 29))
      {
LABEL_46:
        unint64_t v29 = *v10;
        int v25 = (uint64_t **)(result + 6);
        if (!*v10) {
          goto LABEL_53;
        }
        while (1)
        {
          while (1)
          {
            int v25 = (uint64_t **)v29;
            unsigned int v30 = *((unsigned __int8 *)v29 + 29);
            if (v6 >= v30) {
              break;
            }
            unint64_t v29 = *v25;
            uint64_t v10 = v25;
            if (!*v25) {
              goto LABEL_53;
            }
          }
          if (v30 >= v6) {
            break;
          }
          unint64_t v29 = v25[1];
          if (!v29) {
            goto LABEL_52;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = (uint64_t **)(result + 6);
    uint64_t v24 = result[6];
    if (!v24)
    {
      int v25 = (uint64_t **)(result + 6);
LABEL_53:
      uint64_t v31 = operator new(0x28uLL);
      v31[7] = v7;
      v31[8] = v8;
      *(void *)uint64_t v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = v25;
      *uint64_t v10 = (uint64_t *)v31;
      uint64_t v32 = *(void *)v4[5];
      if (v32)
      {
        v4[5] = v32;
        uint64_t v33 = *v10;
      }
      else
      {
        uint64_t v33 = (uint64_t *)v31;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v33);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        int v25 = (uint64_t **)v24;
        unsigned int v26 = *(unsigned __int8 *)(v24 + 29);
        if (v6 >= v26) {
          break;
        }
        uint64_t v24 = (uint64_t)*v25;
        uint64_t v10 = v25;
        if (!*v25) {
          goto LABEL_53;
        }
      }
      if (v26 >= v6) {
        break;
      }
      uint64_t v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        uint64_t v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t gms::ZoomablePropertyStore<float>::zoomable()
{
  return 1;
}

void md::anonymous namespace'::_readPropertyValueFromObject<gm::Matrix<float,3,1>>(uint64_t a1, void *a2)
{
  id v14 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v14;
    if ([v5 count] == 3)
    {
      unsigned int v6 = [v5 objectAtIndex:0];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      if (isKindOfClass)
      {
        [v6 floatValue];
        int v2 = v8;
      }

      uint8x8_t v9 = [v5 objectAtIndex:1];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v9 floatValue];
        int v3 = v10;
      }
      else
      {
        char isKindOfClass = 0;
      }

      unint64_t v11 = [v5 objectAtIndex:2];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v11 floatValue];
        int v13 = v12;

        if (isKindOfClass)
        {
          *(unsigned char *)a1 = 1;
          *(_DWORD *)(a1 + 4) = v2;
          *(_DWORD *)(a1 + 8) = v3;
          *(_DWORD *)(a1 + 12) = v13;

          goto LABEL_14;
        }
      }
      else
      {
      }
    }
  }
  *(unsigned char *)a1 = 0;
LABEL_14:
}

void sub_1A1A5A548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISB_EEEENS8_INSA_IN2gm6MatrixIfLi3ELi1EEEEENSC_ISI_EEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSE_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EF58FBE8[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v7();
  }
  return result;
}

void std::unordered_map<std::string,md::DaVinciGroundSettings::Property>::unordered_map(long long *a1, uint64_t a2)
{
  *(_OWORD *)&qword_1E9581958 = 0u;
  dword_1E9581968 = 1065353216;
  if (!a2) {
    return;
  }
  int v3 = a1;
  uint64_t v4 = 0;
  uint64_t v56 = &a1[2 * a2];
  uint64_t v5 = (void *)&unk_1E9581000;
  do
  {
    int v6 = *((char *)v3 + 23);
    int v7 = *(const std::string::value_type **)v3;
    if (v6 >= 0) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = *(uint64_t **)v3;
    }
    if (v6 >= 0) {
      unint64_t v9 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      unint64_t v9 = *((void *)v3 + 1);
    }
    unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
    unint64_t v11 = v10;
    unint64_t v12 = v5[298];
    if (v12)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        unint64_t v2 = v10;
        if (v10 >= v12) {
          unint64_t v2 = v10 % v12;
        }
      }
      else
      {
        unint64_t v2 = (v12 - 1) & v10;
      }
      if (v14)
      {
        BOOL v15 = *v14;
        if (*v14)
        {
          if (v13.u32[0] < 2uLL)
          {
            unint64_t v16 = v12 - 1;
            while (1)
            {
              uint64_t v22 = v15[1];
              if (v22 == v11)
              {
                uint64_t v23 = *((unsigned __int8 *)v15 + 39);
                if ((v23 & 0x80u) == 0) {
                  uint64_t v24 = *((unsigned __int8 *)v15 + 39);
                }
                else {
                  uint64_t v24 = v15[3];
                }
                if (v24 == v9)
                {
                  int v25 = (const void **)(v15 + 2);
                  if ((v23 & 0x80) != 0)
                  {
                    unint64_t v55 = v16;
                    int v27 = memcmp(*v25, v8, v15[3]);
                    unint64_t v16 = v55;
                    if (!v27) {
                      goto LABEL_52;
                    }
                  }
                  else
                  {
                    if (!*((unsigned char *)v15 + 39)) {
                      goto LABEL_52;
                    }
                    unsigned int v26 = v8;
                    while (*(unsigned __int8 *)v25 == *(unsigned __int8 *)v26)
                    {
                      int v25 = (const void **)((char *)v25 + 1);
                      unsigned int v26 = (uint64_t *)((char *)v26 + 1);
                      if (!--v23) {
                        goto LABEL_52;
                      }
                    }
                  }
                }
              }
              else if ((v22 & v16) != v2)
              {
                goto LABEL_53;
              }
              BOOL v15 = (uint64_t *)*v15;
              if (!v15) {
                goto LABEL_53;
              }
            }
          }
          do
          {
            unint64_t v17 = v15[1];
            if (v17 == v11)
            {
              uint64_t v18 = *((unsigned __int8 *)v15 + 39);
              if ((v18 & 0x80u) == 0) {
                uint64_t v19 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v19 = v15[3];
              }
              if (v19 == v9)
              {
                uint64_t v20 = (const void **)(v15 + 2);
                if ((v18 & 0x80) != 0)
                {
                  if (!memcmp(*v20, v8, v15[3]))
                  {
LABEL_52:
                    uint64_t v5 = (void *)&unk_1E9581000;
                    goto LABEL_5;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    goto LABEL_52;
                  }
                  uint64_t v21 = v8;
                  while (*(unsigned __int8 *)v20 == *(unsigned __int8 *)v21)
                  {
                    uint64_t v20 = (const void **)((char *)v20 + 1);
                    uint64_t v21 = (uint64_t *)((char *)v21 + 1);
                    if (!--v18) {
                      goto LABEL_52;
                    }
                  }
                }
              }
            }
            else
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
              if (v17 != v2) {
                break;
              }
            }
            BOOL v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
      }
LABEL_53:
      uint64_t v5 = &unk_1E9581000;
    }
    uint64_t v28 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v28 = 0;
    *((void *)v28 + 1) = v11;
    unint64_t v29 = (std::string *)(v28 + 16);
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v29, v7, *((void *)v3 + 1));
      uint64_t v4 = qword_1E9581960;
    }
    else
    {
      long long v30 = *v3;
      *((void *)v28 + 4) = *((void *)v3 + 2);
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
    }
    *((_DWORD *)v28 + 10) = *((_DWORD *)v3 + 6);
    float v31 = (float)(unint64_t)(v4 + 1);
    if (!v12 || (float)(*(float *)&dword_1E9581968 * (float)v12) < v31)
    {
      BOOL v32 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3) {
        BOOL v32 = 1;
      }
      unint64_t v33 = v32 | (2 * v12);
      unint64_t v34 = vcvtps_u32_f32(v31 / *(float *)&dword_1E9581968);
      if (v33 <= v34) {
        size_t prime = v34;
      }
      else {
        size_t prime = v33;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
      }
      unint64_t v12 = v5[298];
      if (prime <= v12)
      {
        if (prime >= v12) {
          goto LABEL_94;
        }
        unint64_t v46 = vcvtps_u32_f32((float)(unint64_t)qword_1E9581960 / *(float *)&dword_1E9581968);
        if (v12 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
        {
          unint64_t v46 = std::__next_prime(v46);
        }
        else
        {
          uint64_t v48 = 1 << -(char)__clz(v46 - 1);
          if (v46 >= 2) {
            unint64_t v46 = v48;
          }
        }
        if (prime <= v46) {
          size_t prime = v46;
        }
        if (prime >= v12)
        {
          unint64_t v12 = v5[298];
LABEL_94:
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v11 >= v12) {
              unint64_t v2 = v11 % v12;
            }
            else {
              unint64_t v2 = v11;
            }
          }
          else
          {
            unint64_t v2 = (v12 - 1) & v11;
          }
          goto LABEL_107;
        }
        if (!prime)
        {
          if (v54) {
            operator delete(v54);
          }
          unint64_t v12 = 0;
          v5[298] = 0;
          goto LABEL_94;
        }
      }
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v36 = operator new(8 * prime);
      if (v37) {
        operator delete(v37);
      }
      uint64_t v38 = 0;
      v5[298] = prime;
      do
      while (prime != v38);
      long long v39 = (void **)qword_1E9581958;
      if (!qword_1E9581958)
      {
LABEL_93:
        unint64_t v12 = prime;
        goto LABEL_94;
      }
      size_t v40 = *(void *)(qword_1E9581958 + 8);
      size_t v41 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v42 = v40 & v41;
        for (uint64_t i = *v39; *v39; uint64_t i = *v39)
        {
          size_t v44 = i[1] & v41;
          if (v44 == v42)
          {
            long long v39 = (void **)i;
          }
          {
            *long long v39 = (void *)*i;
            uint64_t v45 = 8 * v44;
          }
          else
          {
            long long v39 = (void **)i;
            size_t v42 = v44;
          }
        }
        goto LABEL_93;
      }
      if (v40 >= prime) {
        v40 %= prime;
      }
      long long v49 = *v39;
      if (!*v39) {
        goto LABEL_93;
      }
      while (1)
      {
        size_t v51 = v49[1];
        if (v51 >= prime) {
          v51 %= prime;
        }
        if (v51 != v40)
        {
          {
            goto LABEL_98;
          }
          *long long v39 = (void *)*v49;
          uint64_t v50 = 8 * v51;
          long long v49 = v39;
        }
        size_t v51 = v40;
LABEL_98:
        long long v39 = (void **)v49;
        long long v49 = (void *)*v49;
        size_t v40 = v51;
        if (!v49) {
          goto LABEL_93;
        }
      }
    }
LABEL_107:
    if (v52)
    {
      *(void *)uint64_t v28 = *v52;
      *long long v52 = v28;
    }
    else
    {
      *(void *)uint64_t v28 = qword_1E9581958;
      qword_1E9581958 = (uint64_t)v28;
      if (*(void *)v28)
      {
        unint64_t v53 = *(void *)(*(void *)v28 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v53 >= v12) {
            v53 %= v12;
          }
        }
        else
        {
          v53 &= v12 - 1;
        }
      }
    }
    uint64_t v4 = ++qword_1E9581960;
LABEL_5:
    v3 += 2;
  }
  while (v3 != v56);
}

uint64_t gms::NonZoomablePropertyStore<float>::zoomable()
{
  return 0;
}

void gms::NonZoomablePropertyStore<float>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(void *)a1 = &unk_1EF565E58;
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  JUMPOUT(0x1A6239270);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISB_EEEENS8_INSA_IN2gm6MatrixIfLi3ELi1EEEEENSC_ISI_EEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSE_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EF58FBE8[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v7();
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISB_EEEENS8_INSA_IN2gm6MatrixIfLi3ELi1EEEEENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSE_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A5B17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>>::~Model()
{
}

void *ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>>::each(uint64_t a1, uint64_t a2)
{
  int v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::DefaultZIndex>(v3);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::ZIndex>(v3);
  uint64_t v8 = (unint64_t *)v4[7];
  int v7 = (uint64_t *)v4[8];
  uint64_t v9 = (char *)v7 - (char *)v8;
  if (v7 != (uint64_t *)v8)
  {
    if ((unint64_t v10 = *((unsigned int *)v8 + 1), v11 = v4[4], v12 = (v4[5] - v11) >> 3, v10 >> 7 >= v12)
      || (uint64_t v13 = *(void *)(v11 + 8 * (v10 >> 7))) == 0
      || (unint64_t v14 = *(unsigned __int16 *)(v13 + 2 * (v10 & 0x7F)), v14 >= v9 >> 3)
      || ((BOOL v15 = (uint64_t *)&v8[v14], v15 != v7) ? (v16 = *((_DWORD *)v15 + 1) == v10) : (v16 = 0), !v16))
    {
      unint64_t v17 = v9 >> 3;
      uint64_t v18 = (uint64_t *)(v8 + 1);
      while (v18 != v7)
      {
        unint64_t v19 = *((unsigned int *)v18 + 1);
        uint64_t v20 = (uint64_t *)v4[8];
        if (v19 >> 7 < v12)
        {
          uint64_t v21 = *(void *)(v11 + 8 * (v19 >> 7));
          uint64_t v20 = (uint64_t *)v4[8];
          if (v21)
          {
            unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (v19 & 0x7F));
            uint64_t v20 = (uint64_t *)v4[8];
            if (v17 > v22)
            {
              uint64_t v20 = (uint64_t *)&v8[v22];
              if (*((_DWORD *)v20 + 1) != v19) {
                uint64_t v20 = (uint64_t *)v4[8];
              }
            }
          }
        }
        ++v18;
        if (v20 != v7)
        {
          uint64_t v8 = (unint64_t *)(v18 - 1);
          goto LABEL_19;
        }
      }
      goto LABEL_68;
    }
  }
LABEL_19:
  if (v7 == (uint64_t *)v8)
  {
LABEL_68:
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    *uint64_t result = 0xFFFFFFFF00000000;
    return result;
  }
  uint64_t v23 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v23 = *v8;
    unint64_t v25 = *v8;
    unint64_t v26 = HIDWORD(*v8);
    unint64_t v27 = *v8 >> 39;
    uint64_t v28 = v4[4];
    if (v27 < (v4[5] - v28) >> 3
      && (uint64_t v29 = *(void *)(v28 + 8 * v27)) != 0
      && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v25) & 0x7F)), v32 = v4[7], v31 = v4[8], v30 < (v31 - v32) >> 3)
      && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v26) : (v34 = 0), v34))
    {
      uint64_t v35 = v4[11];
      uint64_t v36 = v4[10] + 24 * v30;
    }
    else
    {
      uint64_t v35 = v4[11];
      uint64_t v36 = v35;
    }
    if (v36 == v35) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = v36;
    }
    uint64_t v38 = v5[4];
    if (v27 < (v5[5] - v38) >> 3
      && (uint64_t v39 = *(void *)(v38 + 8 * v27)) != 0
      && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v25) & 0x7F)), v42 = v5[7], v41 = v5[8], v40 < (v41 - v42) >> 3)
      && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v26) : (v44 = 0), v44))
    {
      unint64_t v45 = v5[11];
      unint64_t v46 = v5[10] + v40;
    }
    else
    {
      unint64_t v45 = v5[11];
      unint64_t v46 = v45;
    }
    if (v46 == v45) {
      unint64_t v46 = 0;
    }
    if ((uint64_t v47 = v6[4], v27 < (v6[5] - v47) >> 3)
      && (uint64_t v48 = *(void *)(v47 + 8 * v27)) != 0
      && (unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v25) & 0x7F)), v51 = v6[7], v50 = v6[8], v49 < (v50 - v51) >> 3)
      && ((uint64_t v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == v26) : (v53 = 0), v53))
    {
      uint64_t v54 = v6[11];
      uint64_t v55 = v6[10] + 8 * v49;
    }
    else
    {
      uint64_t v54 = v6[11];
      uint64_t v55 = v54;
    }
    uint64_t v56 = v55 == v54 ? 0 : v55;
    uint64_t v67 = v56;
    unint64_t v68 = v46;
    uint64_t v57 = *(void *)(a2 + 24);
    if (!v57) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *))(*(void *)v57 + 48))(v57, v37, &v68, &v67);
    uint64_t v58 = v4[4];
    uint64_t v59 = v4[7];
    uint64_t v24 = (uint64_t *)v4[8];
    unint64_t v60 = (uint64_t *)(v8 + 1);
    while (v60 != v24)
    {
      unint64_t v61 = *((unsigned int *)v60 + 1);
      uint64_t v62 = v4[8];
      if (v61 >> 7 < (v4[5] - v58) >> 3)
      {
        uint64_t v63 = *(void *)(v58 + 8 * (v61 >> 7));
        uint64_t v62 = v4[8];
        if (v63)
        {
          unint64_t v64 = *(unsigned __int16 *)(v63 + 2 * (v61 & 0x7F));
          uint64_t v62 = v4[8];
          if (((uint64_t)v24 - v59) >> 3 > v64)
          {
            uint64_t v62 = v59 + 8 * v64;
            if (*(_DWORD *)(v62 + 4) != v61) {
              uint64_t v62 = v4[8];
            }
          }
        }
      }
      ++v60;
      if ((uint64_t *)v62 != v24)
      {
        uint64_t v24 = v60 - 1;
        break;
      }
    }
    uint64_t v8 = (unint64_t *)v24;
    if (v7 == v24) {
      goto LABEL_68;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (void *)gdc::Registry::storage<md::ls::ZIndex>(v66);
}

uint64_t gdc::Registry::storage<md::ls::ZIndex>(int8x8_t *a1)
{
  unint64_t v10 = 0xE115FCB3272B65A3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE115FCB3272B65A3;
    if (*(void *)&v1 <= 0xE115FCB3272B65A3) {
      unint64_t v3 = 0xE115FCB3272B65A3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE115FCB3272B65A3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE115FCB3272B65A3)
      {
        if (v5[2] == 0xE115FCB3272B65A3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE115FCB3272B65A3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE115FCB3272B65A3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A5B780(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::DefaultZIndex>(int8x8_t *a1)
{
  uint64_t v10 = 0x58D7FF1BC7A42F8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x58D7FF1BC7A42F8;
    if (*(void *)&v1 <= 0x58D7FF1BC7A42F8uLL) {
      uint64_t v3 = 0x58D7FF1BC7A42F8uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x58D7FF1BC7A42F8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x58D7FF1BC7A42F8)
      {
        if (v5[2] == 0x58D7FF1BC7A42F8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x58D7FF1BC7A42F8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x58D7FF1BC7A42F8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A5B9F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x336A901A15BB7353)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::GridLogic::runBeforeLayout(uint64_t a1, uint64_t a2, void *a3, float32x4_t *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  v32[0] = &unk_1EF520C48;
  v32[1] = a2;
  uint64_t v33 = v32;
  v30[0] = &unk_1EF520C90;
  v30[1] = a2;
  uint64_t v31 = v30;
  uint64_t v35 = v34;
  v34[0] = &unk_1EF520C90;
  v34[1] = a2;
  std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::operator()((uint64_t)v32);
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
  }
  else if (v31)
  {
    (*(void (**)(void))(*v31 + 40))();
  }
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void))(*v33 + 40))();
  }
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (*(unsigned char *)(*a3 + 82))
  {
    v28[0] = &unk_1EF520CD8;
    v28[1] = a1;
    v28[2] = v8;
    uint64_t v29 = v28;
    uint64_t v9 = *(unsigned char **)(v8 + 48);
    uint64_t v10 = *(unsigned char **)(v8 + 56);
    if (v9 == v10) {
      goto LABEL_16;
    }
    do
    {
      LOBYTE(v26[0]) = *v9;
      if (!v29) {
        goto LABEL_65;
      }
      (*(void (**)(void *, uint64_t *))(*v29 + 48))(v29, v26);
      ++v9;
    }
    while (v9 != v10);
    if (v29 == v28)
    {
LABEL_16:
      (*(void (**)(void *))(v28[0] + 32))(v28);
    }
    else if (v29)
    {
      (*(void (**)(void))(*v29 + 40))();
    }
  }
  else
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  a4[2].i8[0] = *(unsigned char *)(a1 + 136);
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v12 = *(void *)(a1 + 168);
    if (!v12) {
      goto LABEL_65;
    }
    __int8 v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
  }
  else
  {
    __int8 v13 = 0;
  }
  a4[3].i8[8] = v13;
  if (*(unsigned char *)(a1 + 216))
  {
    uint64_t v14 = *(void *)(a1 + 208);
    if (v14)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 48))(v14);
      goto LABEL_28;
    }
LABEL_65:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_68;
  }
  __int32 v15 = 0;
LABEL_28:
  a4[3].i32[3] = v15;
  uint64_t v16 = *(void *)(a1 + 120);
  unint64_t v17 = *(std::__shared_weak_count **)(a1 + 128);
  v25.i64[0] = v16;
  v25.i64[1] = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v26, v16, (uint64_t)v17);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v27) {
      goto LABEL_33;
    }
  }
  else if (v27)
  {
LABEL_33:
    gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&v25, 0x5Cu, 2, *(void *)(v26[0] + 24));
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x37800080u);
    *a4 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v25.f32)), v24);
    gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&v25, 0xEFu, 2, *(void *)(v26[0] + 24));
    float32x4_t v18 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v25.f32)), v24);
    goto LABEL_39;
  }
  unsigned int v19 = *(_DWORD *)(v8 + 88);
  int v20 = *(unsigned __int8 *)(v8 + 72);
  int v21 = *(unsigned __int8 *)(v8 + 92);
  md::GridLogic::defaultBackgroundColor((long long *)&v25, v19, v20, v21);
  float32x4_t v18 = v25;
  *a4 = v25;
  if (v19 <= 0xB)
  {
    if (((1 << v19) & 0xC9E) != 0)
    {
      {
        geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::GridLogic::_defaultSatelliteStrokeColor(void)::_defaultSatelliteStrokeLinearColor, (uint64_t)&kDefaultSatelliteStrokeColor);
      }
      float32x4_t v18 = (float32x4_t)md::GridLogic::_defaultSatelliteStrokeColor(void)::_defaultSatelliteStrokeLinearColor;
      goto LABEL_39;
    }
    if (((1 << v19) & 0x261) == 0)
    {
      {
        goto LABEL_59;
      }
      geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::GridLogic::_defaultMutedStrokeColor(void)::_defaultMutedStrokeLinearColor, (uint64_t)&kDefaultMutedStrokeColor);
LABEL_75:
LABEL_59:
      float32x4_t v18 = (float32x4_t)md::GridLogic::_defaultMutedStrokeColor(void)::_defaultMutedStrokeLinearColor;
      goto LABEL_39;
    }
    if (v20 == 1)
    {
      {
        md::GridLogic::_defaultStandardDarkStrokeColor(void)::_defaultStandardDarkStrokeLinearColor = xmmword_1A28FF7B0;
      }
      float32x4_t v18 = (float32x4_t)md::GridLogic::_defaultStandardDarkStrokeColor(void)::_defaultStandardDarkStrokeLinearColor;
    }
    else
    {
      if (v20) {
        goto LABEL_39;
      }
      if (v21 == 2)
      {
        {
          md::GridLogic::_defaultExploreStrokeColor(void)::_defaultExploreStrokeLinearColor = xmmword_1A28FF7C0;
        }
        float32x4_t v18 = (float32x4_t)md::GridLogic::_defaultExploreStrokeColor(void)::_defaultExploreStrokeLinearColor;
      }
      else
      {
        if (v21 != 1)
        {
          if (v21) {
            goto LABEL_39;
          }
          {
            goto LABEL_59;
          }
          md::GridLogic::_defaultMutedStrokeColor(void)::_defaultMutedStrokeLinearColor = xmmword_1A28FF7C0;
          goto LABEL_75;
        }
        {
          md::GridLogic::_defaultDrivingStrokeColor(void)::_defaultDrivingStrokeLinearColor = xmmword_1A28FF7C0;
        }
        float32x4_t v18 = (float32x4_t)md::GridLogic::_defaultDrivingStrokeColor(void)::_defaultDrivingStrokeLinearColor;
      }
    }
  }
LABEL_39:
  a4[1] = v18;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v26);
  if (v7)
  {
    uint64_t v22 = *(void *)(v7 + 136);
    a4[3].i8[0] = *(unsigned char *)(v7 + 144);
    a4[2].i64[1] = v22;
  }
  if (!v35)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_68:
    __break(1u);
  }
  (*(void (**)(void *))(*v35 + 48))(v35);
  uint64_t result = (uint64_t)v35;
  if (v35 == v34) {
    return (*(uint64_t (**)(void *))(v34[0] + 32))(v34);
  }
  if (v35) {
    return (*(uint64_t (**)(void *))(*v35 + 40))(v35);
  }
  return result;
}

void sub_1A1A5C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v5 - 104));
  _Unwind_Resume(a1);
}

unint64_t gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey(unint64_t *a1, unsigned int a2, int a3, unint64_t a4)
{
  if (a3 == 2)
  {
    uint64_t v7 = *(void *)a4;
    if (*(void *)a4)
    {
      float v8 = *(float *)v7;
      LODWORD(v7) = *(float *)v7 == 1.0;
      if (*(unsigned char *)(a4 + 10))
      {
        if (v8 != 0.0 && v8 != 1.0) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v7 = v7;
  }
  else
  {
    uint64_t v7 = 1;
  }
  unsigned int v10 = *(unsigned __int8 *)(a4 + v7 + 11);
  float v8 = 0.0;
  if (v10 != 2)
  {
    unint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a4, a2, v10, 0);
    unint64_t v26 = *(void *)result;
    goto LABEL_14;
  }
LABEL_12:
  float v27 = v8;
  char v29 = 1;
  char v28 = 1;
  uint64_t v11 = (_WORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a4, a2, 0, &v29);
  unint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a4, a2, 1u, &v28);
  LOWORD(v13) = *v11;
  LOWORD(v14) = v11[1];
  float32x2_t v15 = (float32x2_t)vdup_n_s32(0x37800080u);
  LOWORD(v16) = *(_WORD *)result;
  LOWORD(v17) = *(_WORD *)(result + 2);
  uint64_t v18 = (int)(float)((float)((float)((float)v13 * 0.000015259)
                                         + (float)((float)-(float)((float)((float)v13 * 0.000015259)
                                                                 - (float)((float)v16 * 0.000015259))
                                                 * v27))
                                 * 65535.0);
  uint64_t v19 = (int)(float)((float)((float)((float)v14 * 0.000015259)
                                         + (float)((float)-(float)((float)((float)v14 * 0.000015259)
                                                                 - (float)((float)v17 * 0.000015259))
                                                 * v27))
                                 * 65535.0);
  v20.i32[0] = (unsigned __int16)v11[2];
  v20.i32[1] = (unsigned __int16)v11[3];
  float32x2_t v21 = vmul_f32(vcvt_f32_u32(v20), v15);
  v22.i32[0] = *(unsigned __int16 *)(result + 4);
  v22.i32[1] = *(unsigned __int16 *)(result + 6);
  int32x2_t v23 = vcvt_s32_f32(vmul_f32(vmla_n_f32(v21, vmla_f32(vneg_f32(v21), v15, vcvt_f32_u32(v22)), v27), (float32x2_t)vdup_n_s32(0x477FFF00u)));
  v24.i64[0] = v23.u32[0];
  v24.i64[1] = v23.u32[1];
  int64x2_t v25 = (int64x2_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FD120);
  unint64_t v26 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v25, 1), (int8x16_t)v25).u64[0] | (v19 << 16) | v18;
LABEL_14:
  *a1 = v26;
  return result;
}

unint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKey<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2);
  }
  uint64_t v5 = (uint64_t *)(result + 16 * a3);
  uint64_t v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_31:
    uint64x2_t v24 = *(unsigned __int16 ****)(v4 + 72);
    if (v24)
    {
      uint64_t v11 = *v24;
      uint64_t v25 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        LOWORD(v33) = 0;
        goto LABEL_66;
      }
      uint64_t v26 = (uint64_t)*v11;
      if (!*((unsigned char *)v11 + 15))
      {
        uint64_t v34 = 2 * v25;
        uint64_t v35 = *v11;
        while (*v35 != a2)
        {
          ++v35;
          v34 -= 2;
          if (!v34)
          {
            uint64_t v35 = (unsigned __int16 *)(v26 + 2 * v25);
            break;
          }
        }
        unint64_t v33 = ((unint64_t)v35 - v26) >> 1;
LABEL_66:
        if (v25 != (unsigned __int16)v33)
        {
          uint64_t v42 = *((unsigned __int16 *)v11 + 29);
          if (!*((_WORD *)v11 + 29)) {
            return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          }
          unint64_t v30 = v11[6];
          if (*((unsigned char *)v11 + 63))
          {
            if (v42 >= 0x1E)
            {
              uint64_t v54 = v11[6];
              unint64_t v55 = *((unsigned __int16 *)v11 + 29);
              do
              {
                unint64_t v56 = v55 >> 1;
                uint64_t v57 = &v54[v55 >> 1];
                unsigned int v59 = *v57;
                uint64_t v58 = v57 + 1;
                v55 += ~(v55 >> 1);
                if (v59 < a2) {
                  uint64_t v54 = v58;
                }
                else {
                  unint64_t v55 = v56;
                }
              }
              while (v55);
              if (v54 == &v30[v42] || *v54 != a2) {
                return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              }
              unint64_t v31 = (unint64_t)((char *)v54 - (char *)v30) >> 1;
            }
            else
            {
              unint64_t v31 = 0;
              unint64_t result = (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              while (1)
              {
                unsigned int v43 = v30[v31];
                if (v43 >= a2) {
                  break;
                }
                if (v42 == ++v31) {
                  return result;
                }
              }
              if (v43 != a2) {
                LOWORD(v31) = *((_WORD *)v11 + 29);
              }
            }
          }
          else
          {
            uint64_t v46 = 2 * v42;
            uint64_t v47 = v11[6];
            while (*v47 != a2)
            {
              ++v47;
              v46 -= 2;
              if (!v46)
              {
                uint64_t v47 = &v30[v42];
                break;
              }
            }
            unint64_t v31 = (unint64_t)((char *)v47 - (char *)v30) >> 1;
          }
          if (v42 == (unsigned __int16)v31) {
            return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          }
          if (v42 <= (unsigned __int16)v31) {
            return result;
          }
          return (unint64_t)&v30[4 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 28);
        }
        goto LABEL_67;
      }
      if (v25 < 0x1E)
      {
        uint64_t v27 = 0;
        while (1)
        {
          unsigned int v28 = *(unsigned __int16 *)(v26 + 2 * v27);
          if (v28 >= a2) {
            break;
          }
          if (v25 == ++v27) {
            goto LABEL_67;
          }
        }
        if (v28 == a2) {
          LOWORD(v33) = v27;
        }
        else {
          LOWORD(v33) = *((_WORD *)v11 + 5);
        }
        goto LABEL_66;
      }
      uint64_t v36 = *v11;
      unint64_t v37 = *((unsigned __int16 *)v11 + 5);
      do
      {
        unint64_t v38 = v37 >> 1;
        uint64_t v39 = &v36[v37 >> 1];
        unsigned int v41 = *v39;
        unint64_t v40 = v39 + 1;
        v37 += ~(v37 >> 1);
        if (v41 < a2) {
          uint64_t v36 = v40;
        }
        else {
          unint64_t v37 = v38;
        }
      }
      while (v37);
      if (v36 != (unsigned __int16 *)(v26 + 2 * v25) && *v36 == a2)
      {
        unint64_t v33 = ((unint64_t)v36 - v26) >> 1;
        goto LABEL_66;
      }
    }
LABEL_67:
    if (a4) {
      *a4 = 0;
    }
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2);
  }
  uint64_t v7 = v5[6];
  uint64_t v8 = v7 + 8 * v6;
  while (1)
  {
    unsigned int v10 = *(unsigned __int16 ****)(*(void *)v7 + 72);
    if (v10)
    {
      uint64_t v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (*((_WORD *)v11 + 5))
      {
        uint64_t v13 = (uint64_t)*v11;
        if (*((unsigned char *)v11 + 15))
        {
          if (v12 >= 0x1E)
          {
            uint64_t v18 = *v11;
            unint64_t v19 = *((unsigned __int16 *)v11 + 5);
            do
            {
              unint64_t v20 = v19 >> 1;
              float32x2_t v21 = &v18[v19 >> 1];
              unsigned int v23 = *v21;
              uint32x2_t v22 = v21 + 1;
              unint64_t result = v23;
              v19 += ~(v19 >> 1);
              if (v23 < a2) {
                uint64_t v18 = v22;
              }
              else {
                unint64_t v19 = v20;
              }
            }
            while (v19);
            if (v18 == (unsigned __int16 *)(v13 + 2 * v12) || *v18 != a2) {
              goto LABEL_6;
            }
            unint64_t v9 = ((unint64_t)v18 - v13) >> 1;
          }
          else
          {
            uint64_t v14 = 0;
            while (1)
            {
              unsigned int v15 = *(unsigned __int16 *)(v13 + 2 * v14);
              if (v15 >= a2) {
                break;
              }
              if (v12 == ++v14) {
                goto LABEL_6;
              }
            }
            LOWORD(v9) = v15 == a2 ? v14 : *((_WORD *)v11 + 5);
          }
        }
        else
        {
          uint64_t v16 = 2 * v12;
          unsigned int v17 = *v11;
          while (*v17 != a2)
          {
            ++v17;
            v16 -= 2;
            if (!v16)
            {
              unsigned int v17 = (unsigned __int16 *)(v13 + 2 * v12);
              break;
            }
          }
          unint64_t v9 = ((unint64_t)v17 - v13) >> 1;
        }
      }
      else
      {
        LOWORD(v9) = 0;
      }
      if (v12 != (unsigned __int16)v9) {
        break;
      }
    }
LABEL_6:
    v7 += 8;
    if (v7 == v8) {
      goto LABEL_31;
    }
  }
  uint64_t v29 = *((unsigned __int16 *)v11 + 29);
  if (!*((_WORD *)v11 + 29)) {
    return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  unint64_t v30 = v11[6];
  if (!*((unsigned char *)v11 + 63))
  {
    uint64_t v44 = 2 * v29;
    unint64_t v45 = v11[6];
    while (*v45 != a2)
    {
      ++v45;
      v44 -= 2;
      if (!v44)
      {
        unint64_t v45 = &v30[v29];
        break;
      }
    }
    unint64_t v31 = (unint64_t)((char *)v45 - (char *)v30) >> 1;
LABEL_105:
    if (v29 <= (unsigned __int16)v31) {
      return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    }
    return (unint64_t)&v30[4 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 28);
  }
  if (v29 < 0x1E)
  {
    unint64_t v31 = 0;
    unint64_t result = (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      unsigned int v32 = v30[v31];
      if (v32 >= a2) {
        break;
      }
      if (v29 == ++v31) {
        return result;
      }
    }
    if (v32 != a2) {
      LOWORD(v31) = *((_WORD *)v11 + 29);
    }
    goto LABEL_105;
  }
  uint64_t v48 = v11[6];
  unint64_t v49 = *((unsigned __int16 *)v11 + 29);
  do
  {
    unint64_t v50 = v49 >> 1;
    uint64_t v51 = &v48[v49 >> 1];
    unsigned int v53 = *v51;
    uint64_t v52 = v51 + 1;
    v49 += ~(v49 >> 1);
    if (v53 < a2) {
      uint64_t v48 = v52;
    }
    else {
      unint64_t v49 = v50;
    }
  }
  while (v49);
  if (v48 != &v30[v29] && *v48 == a2)
  {
    unint64_t v31 = (unint64_t)((char *)v48 - (char *)v30) >> 1;
    goto LABEL_105;
  }
  return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GridLogic", "", v5, 2u);
  }
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GridLogic", "", v5, 2u);
  }
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2>,void ()(md::StyleManagerEvent)>::operator()(gss::Allocator *a1, unsigned __int8 *a2)
{
  if ((*a2 | 4) == 4)
  {
    uint8x8_t v2 = (uint64_t *)*((void *)a1 + 2);
    if (*v2)
    {
      uint64_t v3 = *((void *)a1 + 1);
      uint64_t v4 = gss::Allocator::instance(a1);
      uint64_t v14 = v4;
      uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 8, 4);
      uint64_t v6 = v5;
      *(void *)&long long v12 = v5;
      uint64_t v13 = v5 + 1;
      if (v5) {
        *uint64_t v5 = 0x800000005;
      }
      *((void *)&v12 + 1) = v5 + 1;
      gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)v15, (uint64_t)&v12);
      if (v6) {
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 40))(v4, v6, 8);
      }
      uint64_t v7 = *v2;
      *(void *)((char *)&v12 + 7) = 0;
      *(void *)&long long v12 = 0;
      HIBYTE(v12) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v11, v7, (gss::FeatureAttributeSet *)v15, (gss::QueryOverrides *)&v12);
      long long v8 = v11;
      unint64_t v9 = *(std::__shared_weak_count **)(v3 + 128);
      long long v11 = 0uLL;
      *(_OWORD *)(v3 + 120) = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      unsigned int v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
      if (*((void *)&v11 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v15[0])
      {
        v15[1] = v15[0];
        (*(void (**)(uint64_t, void, void))(*(void *)v16 + 40))(v16, v15[0], v15[2] - v15[0]);
      }
    }
  }
}

void sub_1A1A5CC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a18 + 40))(a18);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<CleanupMeshRendererLayout>,std::allocator<ecs2::ForwardToExecute<CleanupMeshRendererLayout>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A5DA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::CommandBufferDescriptionCreation const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void md::MaterialResourceStore::reset(md::MaterialResourceStore *this)
{
  double v155 = 0;
  double v156 = 0;
  uint64_t v157 = 0;
  double v152 = 0;
  double v153 = 0;
  uint64_t v154 = 0;
  md::accumulate<geo::handle<md::MaterialIDStorage>>((void *)this + 2, (uint64_t)&v155);
  md::accumulate<geo::handle<md::MaterialIDStorage>>((void *)this + 7, (uint64_t)&v152);
  uint64_t v2 = v155;
  uint64_t v3 = v156;
  if (v155 != v156)
  {
    uint64_t v4 = v155;
    do
    {
      unint64_t v5 = *v4;
      uint64_t v6 = *((void *)this + 15);
      if (v5 < (*((void *)this + 16) - v6) >> 3)
      {
        uint64_t v7 = *(void *)(v6 + 8 * v5);
        BOOL v8 = v7 && HIDWORD(*v4) == HIDWORD(v7);
        if (v8 && *((void *)this + 18) + 8 * v7 != *((void *)this + 19))
        {
          uint64_t v9 = *(void *)(*((void *)this + 21) + 8 * v7);
          __p[0] = (void *)(v9 | ((unint64_t)*(unsigned int *)(v6 + 8 * v9 + 4) << 32));
          geo::packed_array<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>>::erase((uint64_t)this + 96, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 24, *v4);
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
  unsigned int v10 = v152;
  long long v11 = v153;
  if (v152 != v153)
  {
    long long v12 = v152;
    do
    {
      unint64_t v13 = *v12;
      uint64_t v14 = *((void *)this + 15);
      if (v13 < (*((void *)this + 16) - v14) >> 3)
      {
        uint64_t v15 = *(void *)(v14 + 8 * v13);
        BOOL v16 = v15 && HIDWORD(*v12) == HIDWORD(v15);
        if (v16 && *((void *)this + 18) + 8 * v15 != *((void *)this + 19))
        {
          uint64_t v17 = *(void *)(*((void *)this + 21) + 8 * v15);
          __p[0] = (void *)(v17 | ((unint64_t)*(unsigned int *)(v14 + 8 * v17 + 4) << 32));
          geo::packed_array<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>>::erase((uint64_t)this + 96, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 24, *v12);
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  if (v2 != v3)
  {
    int8x8_t v18 = *(int8x8_t *)((char *)this + 280);
    if (v18)
    {
      unint64_t v19 = v2;
LABEL_26:
      unint64_t v20 = *v19;
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(v18);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        unint64_t v22 = *v19;
        if (v20 >= *(void *)&v18) {
          unint64_t v22 = v20 % *(void *)&v18;
        }
      }
      else
      {
        unint64_t v22 = (*(void *)&v18 - 1) & v20;
      }
      unsigned int v23 = *(void **)(*((void *)this + 34) + 8 * v22);
      if (v23)
      {
        uint64x2_t v24 = (void *)*v23;
        if (*v23)
        {
          if (v21.u32[0] < 2uLL)
          {
            uint64_t v25 = *(void *)&v18 - 1;
            while (1)
            {
              uint64_t v27 = v24[1];
              if (v27 == v20)
              {
                if (v24[2] == v20) {
                  goto LABEL_46;
                }
              }
              else if ((v27 & v25) != v22)
              {
                goto LABEL_51;
              }
              uint64x2_t v24 = (void *)*v24;
              if (!v24) {
                goto LABEL_51;
              }
            }
          }
          do
          {
            unint64_t v26 = v24[1];
            if (v26 == v20)
            {
              if (v24[2] == v20)
              {
LABEL_46:
                unsigned int v28 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)this + 29, v24 + 3);
                if (v28)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 29, v28);
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  unint64_t v20 = v24[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 34, v20);
                break;
              }
            }
            else
            {
              if (v26 >= *(void *)&v18) {
                v26 %= *(void *)&v18;
              }
              if (v26 != v22) {
                break;
              }
            }
            uint64x2_t v24 = (void *)*v24;
          }
          while (v24);
        }
      }
LABEL_51:
      while (++v19 != v3)
      {
        int8x8_t v18 = *(int8x8_t *)((char *)this + 280);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
  }
  if (v10 != v11)
  {
    int8x8_t v29 = *(int8x8_t *)((char *)this + 280);
    if (v29)
    {
      unint64_t v30 = v10;
LABEL_57:
      unint64_t v31 = *v30;
      uint8x8_t v32 = (uint8x8_t)vcnt_s8(v29);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        unint64_t v33 = *v30;
        if (v31 >= *(void *)&v29) {
          unint64_t v33 = v31 % *(void *)&v29;
        }
      }
      else
      {
        unint64_t v33 = (*(void *)&v29 - 1) & v31;
      }
      uint64_t v34 = *(void **)(*((void *)this + 34) + 8 * v33);
      if (v34)
      {
        uint64_t v35 = (void *)*v34;
        if (*v34)
        {
          if (v32.u32[0] < 2uLL)
          {
            uint64_t v36 = *(void *)&v29 - 1;
            while (1)
            {
              uint64_t v38 = v35[1];
              if (v38 == v31)
              {
                if (v35[2] == v31) {
                  goto LABEL_77;
                }
              }
              else if ((v38 & v36) != v33)
              {
                goto LABEL_82;
              }
              uint64_t v35 = (void *)*v35;
              if (!v35) {
                goto LABEL_82;
              }
            }
          }
          do
          {
            unint64_t v37 = v35[1];
            if (v37 == v31)
            {
              if (v35[2] == v31)
              {
LABEL_77:
                uint64_t v39 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)this + 29, v35 + 3);
                if (v39)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 29, v39);
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  unint64_t v31 = v35[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 34, v31);
                break;
              }
            }
            else
            {
              if (v37 >= *(void *)&v29) {
                v37 %= *(void *)&v29;
              }
              if (v37 != v33) {
                break;
              }
            }
            uint64_t v35 = (void *)*v35;
          }
          while (v35);
        }
      }
LABEL_82:
      while (++v30 != v11)
      {
        int8x8_t v29 = *(int8x8_t *)((char *)this + 280);
        if (v29) {
          goto LABEL_57;
        }
      }
    }
  }
  if (v10) {
    operator delete(v10);
  }
  if (v2) {
    operator delete(v2);
  }
  double v155 = 0;
  double v156 = 0;
  uint64_t v157 = 0;
  double v152 = 0;
  double v153 = 0;
  uint64_t v154 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 39, (uint64_t)&v155);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 44, (uint64_t)&v152);
  unint64_t v40 = v155;
  unsigned int v41 = v156;
  if (v155 != v156)
  {
    uint64_t v42 = v155;
    do
    {
      unint64_t v43 = *v42;
      uint64_t v44 = *((void *)this + 52);
      if (v43 < (*((void *)this + 53) - v44) >> 3)
      {
        uint64_t v45 = *(void *)(v44 + 8 * v43);
        BOOL v46 = v45 && HIDWORD(*v42) == HIDWORD(v45);
        if (v46 && *((void *)this + 55) + 3 * v45 != *((void *)this + 56))
        {
          __p[0] = (void *)(*(void *)(*((void *)this + 58) + 8 * v45) | ((unint64_t)*(unsigned int *)(v44 + 8 * *(void *)(*((void *)this + 58) + 8 * v45) + 4) << 32));
          geo::packed_array<md::ls::MaterialVisibilityOptions,geo::handle<md::ls::MaterialVisibilityOptions>>::erase((uint64_t)this + 392, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::__unordered_map_hasher<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::__unordered_map_equal<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>>>::__erase_unique<geo::handle<md::ls::MaterialVisibilityOptions>>((uint64_t *)this + 61, *v42);
        }
      }
      ++v42;
    }
    while (v42 != v41);
  }
  uint64_t v47 = v152;
  uint64_t v48 = v153;
  if (v152 != v153)
  {
    unint64_t v49 = v152;
    do
    {
      unint64_t v50 = *v49;
      uint64_t v51 = *((void *)this + 52);
      if (v50 < (*((void *)this + 53) - v51) >> 3)
      {
        uint64_t v52 = *(void *)(v51 + 8 * v50);
        BOOL v53 = v52 && HIDWORD(*v49) == HIDWORD(v52);
        if (v53 && *((void *)this + 55) + 3 * v52 != *((void *)this + 56))
        {
          __p[0] = (void *)(*(void *)(*((void *)this + 58) + 8 * v52) | ((unint64_t)*(unsigned int *)(v51 + 8 * *(void *)(*((void *)this + 58) + 8 * v52) + 4) << 32));
          geo::packed_array<md::ls::MaterialVisibilityOptions,geo::handle<md::ls::MaterialVisibilityOptions>>::erase((uint64_t)this + 392, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::__unordered_map_hasher<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::__unordered_map_equal<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>>>::__erase_unique<geo::handle<md::ls::MaterialVisibilityOptions>>((uint64_t *)this + 61, *v49);
        }
      }
      ++v49;
    }
    while (v49 != v48);
  }
  if (v40 != v41)
  {
    int8x8_t v54 = *(int8x8_t *)((char *)this + 576);
    if (v54)
    {
      unint64_t v55 = v40;
LABEL_114:
      unint64_t v56 = *v55;
      uint8x8_t v57 = (uint8x8_t)vcnt_s8(v54);
      v57.i16[0] = vaddlv_u8(v57);
      if (v57.u32[0] > 1uLL)
      {
        unint64_t v58 = *v55;
        if (v56 >= *(void *)&v54) {
          unint64_t v58 = v56 % *(void *)&v54;
        }
      }
      else
      {
        unint64_t v58 = (*(void *)&v54 - 1) & v56;
      }
      unsigned int v59 = *(void **)(*((void *)this + 71) + 8 * v58);
      if (v59)
      {
        unint64_t v60 = (void *)*v59;
        if (*v59)
        {
          if (v57.u32[0] < 2uLL)
          {
            uint64_t v61 = *(void *)&v54 - 1;
            while (1)
            {
              uint64_t v63 = v60[1];
              if (v63 == v56)
              {
                if (v60[2] == v56) {
                  goto LABEL_134;
                }
              }
              else if ((v63 & v61) != v58)
              {
                goto LABEL_139;
              }
              unint64_t v60 = (void *)*v60;
              if (!v60) {
                goto LABEL_139;
              }
            }
          }
          do
          {
            unint64_t v62 = v60[1];
            if (v62 == v56)
            {
              if (v60[2] == v56)
              {
LABEL_134:
                unint64_t v64 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)this + 66, v60 + 3);
                if (v64)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 66, v64);
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  unint64_t v56 = v60[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 71, v56);
                break;
              }
            }
            else
            {
              if (v62 >= *(void *)&v54) {
                v62 %= *(void *)&v54;
              }
              if (v62 != v58) {
                break;
              }
            }
            unint64_t v60 = (void *)*v60;
          }
          while (v60);
        }
      }
LABEL_139:
      while (++v55 != v41)
      {
        int8x8_t v54 = *(int8x8_t *)((char *)this + 576);
        if (v54) {
          goto LABEL_114;
        }
      }
    }
  }
  if (v47 != v48)
  {
    int8x8_t v65 = *(int8x8_t *)((char *)this + 576);
    if (v65)
    {
      unsigned int v66 = v47;
LABEL_145:
      unint64_t v67 = *v66;
      uint8x8_t v68 = (uint8x8_t)vcnt_s8(v65);
      v68.i16[0] = vaddlv_u8(v68);
      if (v68.u32[0] > 1uLL)
      {
        unint64_t v69 = *v66;
        if (v67 >= *(void *)&v65) {
          unint64_t v69 = v67 % *(void *)&v65;
        }
      }
      else
      {
        unint64_t v69 = (*(void *)&v65 - 1) & v67;
      }
      uint64_t v70 = *(void **)(*((void *)this + 71) + 8 * v69);
      if (v70)
      {
        uint64_t v71 = (void *)*v70;
        if (*v70)
        {
          if (v68.u32[0] < 2uLL)
          {
            uint64_t v72 = *(void *)&v65 - 1;
            while (1)
            {
              uint64_t v74 = v71[1];
              if (v74 == v67)
              {
                if (v71[2] == v67) {
                  goto LABEL_165;
                }
              }
              else if ((v74 & v72) != v69)
              {
                goto LABEL_170;
              }
              uint64_t v71 = (void *)*v71;
              if (!v71) {
                goto LABEL_170;
              }
            }
          }
          do
          {
            unint64_t v73 = v71[1];
            if (v73 == v67)
            {
              if (v71[2] == v67)
              {
LABEL_165:
                unsigned int v75 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)this + 66, v71 + 3);
                if (v75)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 66, v75);
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  unint64_t v67 = v71[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 71, v67);
                break;
              }
            }
            else
            {
              if (v73 >= *(void *)&v65) {
                v73 %= *(void *)&v65;
              }
              if (v73 != v69) {
                break;
              }
            }
            uint64_t v71 = (void *)*v71;
          }
          while (v71);
        }
      }
LABEL_170:
      while (++v66 != v48)
      {
        int8x8_t v65 = *(int8x8_t *)((char *)this + 576);
        if (v65) {
          goto LABEL_145;
        }
      }
    }
  }
  if (v47) {
    operator delete(v47);
  }
  if (v40) {
    operator delete(v40);
  }
  double v155 = 0;
  double v156 = 0;
  uint64_t v157 = 0;
  double v152 = 0;
  double v153 = 0;
  uint64_t v154 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 76, (uint64_t)&v155);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 81, (uint64_t)&v152);
  unsigned __int8 v76 = v155;
  uint64_t v77 = v156;
  if (v155 != v156)
  {
    unsigned int v78 = v155;
    do
    {
      unint64_t v79 = *v78;
      uint64_t v80 = *((void *)this + 89);
      if (v79 < (*((void *)this + 90) - v80) >> 3)
      {
        uint64_t v81 = *(void *)(v80 + 8 * v79);
        BOOL v82 = v81 && HIDWORD(*v78) == HIDWORD(v81);
        if (v82 && *((void *)this + 92) + 8 * v81 != *((void *)this + 93))
        {
          uint64_t v83 = *(void *)(*((void *)this + 95) + 8 * v81);
          __p[0] = (void *)(v83 | ((unint64_t)*(unsigned int *)(v80 + 8 * v83 + 4) << 32));
          geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase((uint64_t)this + 688, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::__unordered_map_hasher<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>>>::__erase_unique<geo::handle<md::ls::ZIndex>>((uint64_t *)this + 98, *v78);
        }
      }
      ++v78;
    }
    while (v78 != v77);
  }
  unsigned __int8 v84 = v152;
  __int16 v85 = v153;
  if (v152 != v153)
  {
    __int16 v86 = v152;
    do
    {
      unint64_t v87 = *v86;
      uint64_t v88 = *((void *)this + 89);
      if (v87 < (*((void *)this + 90) - v88) >> 3)
      {
        uint64_t v89 = *(void *)(v88 + 8 * v87);
        BOOL v90 = v89 && HIDWORD(*v86) == HIDWORD(v89);
        if (v90 && *((void *)this + 92) + 8 * v89 != *((void *)this + 93))
        {
          uint64_t v91 = *(void *)(*((void *)this + 95) + 8 * v89);
          __p[0] = (void *)(v91 | ((unint64_t)*(unsigned int *)(v88 + 8 * v91 + 4) << 32));
          geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase((uint64_t)this + 688, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::__unordered_map_hasher<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>>>::__erase_unique<geo::handle<md::ls::ZIndex>>((uint64_t *)this + 98, *v86);
        }
      }
      ++v86;
    }
    while (v86 != v85);
  }
  if (v76 != v77)
  {
    int8x8_t v92 = *(int8x8_t *)((char *)this + 872);
    if (v92)
    {
      char v93 = v76;
LABEL_202:
      unint64_t v94 = *v93;
      uint8x8_t v95 = (uint8x8_t)vcnt_s8(v92);
      v95.i16[0] = vaddlv_u8(v95);
      if (v95.u32[0] > 1uLL)
      {
        unint64_t v96 = *v93;
        if (v94 >= *(void *)&v92) {
          unint64_t v96 = v94 % *(void *)&v92;
        }
      }
      else
      {
        unint64_t v96 = (*(void *)&v92 - 1) & v94;
      }
      double v97 = *(void **)(*((void *)this + 108) + 8 * v96);
      if (v97)
      {
        double v98 = (void *)*v97;
        if (*v97)
        {
          if (v95.u32[0] < 2uLL)
          {
            uint64_t v99 = *(void *)&v92 - 1;
            while (1)
            {
              uint64_t v101 = v98[1];
              if (v101 == v94)
              {
                if (v98[2] == v94) {
                  goto LABEL_222;
                }
              }
              else if ((v101 & v99) != v96)
              {
                goto LABEL_227;
              }
              double v98 = (void *)*v98;
              if (!v98) {
                goto LABEL_227;
              }
            }
          }
          do
          {
            unint64_t v100 = v98[1];
            if (v100 == v94)
            {
              if (v98[2] == v94)
              {
LABEL_222:
                BOOL v102 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)this + 103, v98 + 3);
                if (v102)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 103, v102);
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  unint64_t v94 = v98[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 108, v94);
                break;
              }
            }
            else
            {
              if (v100 >= *(void *)&v92) {
                v100 %= *(void *)&v92;
              }
              if (v100 != v96) {
                break;
              }
            }
            double v98 = (void *)*v98;
          }
          while (v98);
        }
      }
LABEL_227:
      while (++v93 != v77)
      {
        int8x8_t v92 = *(int8x8_t *)((char *)this + 872);
        if (v92) {
          goto LABEL_202;
        }
      }
    }
  }
  if (v84 != v85)
  {
    int8x8_t v103 = *(int8x8_t *)((char *)this + 872);
    if (v103)
    {
      float v104 = v84;
LABEL_233:
      unint64_t v105 = *v104;
      uint8x8_t v106 = (uint8x8_t)vcnt_s8(v103);
      v106.i16[0] = vaddlv_u8(v106);
      if (v106.u32[0] > 1uLL)
      {
        unint64_t v107 = *v104;
        if (v105 >= *(void *)&v103) {
          unint64_t v107 = v105 % *(void *)&v103;
        }
      }
      else
      {
        unint64_t v107 = (*(void *)&v103 - 1) & v105;
      }
      uint64_t v108 = *(void **)(*((void *)this + 108) + 8 * v107);
      if (v108)
      {
        unint64_t v109 = (void *)*v108;
        if (*v108)
        {
          if (v106.u32[0] < 2uLL)
          {
            uint64_t v110 = *(void *)&v103 - 1;
            while (1)
            {
              uint64_t v112 = v109[1];
              if (v112 == v105)
              {
                if (v109[2] == v105) {
                  goto LABEL_253;
                }
              }
              else if ((v112 & v110) != v107)
              {
                goto LABEL_258;
              }
              unint64_t v109 = (void *)*v109;
              if (!v109) {
                goto LABEL_258;
              }
            }
          }
          do
          {
            unint64_t v111 = v109[1];
            if (v111 == v105)
            {
              if (v109[2] == v105)
              {
LABEL_253:
                unint64_t v113 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)this + 103, v109 + 3);
                if (v113)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 103, v113);
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  unint64_t v105 = v109[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 108, v105);
                break;
              }
            }
            else
            {
              if (v111 >= *(void *)&v103) {
                v111 %= *(void *)&v103;
              }
              if (v111 != v107) {
                break;
              }
            }
            unint64_t v109 = (void *)*v109;
          }
          while (v109);
        }
      }
LABEL_258:
      while (++v104 != v85)
      {
        int8x8_t v103 = *(int8x8_t *)((char *)this + 872);
        if (v103) {
          goto LABEL_233;
        }
      }
    }
  }
  if (v84) {
    operator delete(v84);
  }
  if (v76) {
    operator delete(v76);
  }
  double v155 = 0;
  double v156 = 0;
  uint64_t v157 = 0;
  double v152 = 0;
  double v153 = 0;
  uint64_t v154 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 113, (uint64_t)&v155);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 118, (uint64_t)&v152);
  unsigned int v114 = v155;
  char v115 = v156;
  if (v155 != v156)
  {
    double v116 = v155;
    do
    {
      unint64_t v117 = *v116;
      uint64_t v118 = *((void *)this + 126);
      if (v117 < (*((void *)this + 127) - v118) >> 3)
      {
        uint64_t v119 = *(void *)(v118 + 8 * v117);
        BOOL v120 = v119 && HIDWORD(*v116) == HIDWORD(v119);
        if (v120 && *((void *)this + 129) + 20 * v119 != *((void *)this + 130))
        {
          uint64_t v121 = *(void *)(*((void *)this + 132) + 8 * v119);
          __p[0] = (void *)(v121 | ((unint64_t)*(unsigned int *)(v118 + 8 * v121 + 4) << 32));
          geo::packed_array<md::ls::ColorData,geo::handle<md::ls::ColorData>>::erase((uint64_t)this + 984, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::__unordered_map_hasher<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>>>::__erase_unique<geo::handle<md::ls::ColorData>>((uint64_t *)this + 135, *v116);
        }
      }
      ++v116;
    }
    while (v116 != v115);
  }
  float v122 = v152;
  BOOL v123 = v153;
  if (v152 != v153)
  {
    float v124 = v152;
    do
    {
      unint64_t v125 = *v124;
      uint64_t v126 = *((void *)this + 126);
      if (v125 < (*((void *)this + 127) - v126) >> 3)
      {
        uint64_t v127 = *(void *)(v126 + 8 * v125);
        BOOL v128 = v127 && HIDWORD(*v124) == HIDWORD(v127);
        if (v128 && *((void *)this + 129) + 20 * v127 != *((void *)this + 130))
        {
          uint64_t v129 = *(void *)(*((void *)this + 132) + 8 * v127);
          __p[0] = (void *)(v129 | ((unint64_t)*(unsigned int *)(v126 + 8 * v129 + 4) << 32));
          geo::packed_array<md::ls::ColorData,geo::handle<md::ls::ColorData>>::erase((uint64_t)this + 984, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::__unordered_map_hasher<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>>>::__erase_unique<geo::handle<md::ls::ColorData>>((uint64_t *)this + 135, *v124);
        }
      }
      ++v124;
    }
    while (v124 != v123);
  }
  if (v114 != v115)
  {
    int8x8_t v130 = *(int8x8_t *)((char *)this + 1168);
    if (v130)
    {
      unint64_t v131 = v114;
LABEL_290:
      unint64_t v132 = *v131;
      uint8x8_t v133 = (uint8x8_t)vcnt_s8(v130);
      v133.i16[0] = vaddlv_u8(v133);
      if (v133.u32[0] > 1uLL)
      {
        unint64_t v134 = *v131;
        if (v132 >= *(void *)&v130) {
          unint64_t v134 = v132 % *(void *)&v130;
        }
      }
      else
      {
        unint64_t v134 = (*(void *)&v130 - 1) & v132;
      }
      float v135 = *(void **)(*((void *)this + 145) + 8 * v134);
      if (v135)
      {
        float v136 = (void *)*v135;
        if (*v135)
        {
          if (v133.u32[0] < 2uLL)
          {
            uint64_t v137 = *(void *)&v130 - 1;
            while (1)
            {
              uint64_t v139 = v136[1];
              if (v139 == v132)
              {
                if (v136[2] == v132) {
                  goto LABEL_310;
                }
              }
              else if ((v139 & v137) != v134)
              {
                goto LABEL_315;
              }
              float v136 = (void *)*v136;
              if (!v136) {
                goto LABEL_315;
              }
            }
          }
          do
          {
            unint64_t v138 = v136[1];
            if (v138 == v132)
            {
              if (v136[2] == v132)
              {
LABEL_310:
                float v140 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)this + 140, v136 + 3);
                if (v140)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 140, v140);
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  unint64_t v132 = v136[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 145, v132);
                break;
              }
            }
            else
            {
              if (v138 >= *(void *)&v130) {
                v138 %= *(void *)&v130;
              }
              if (v138 != v134) {
                break;
              }
            }
            float v136 = (void *)*v136;
          }
          while (v136);
        }
      }
LABEL_315:
      while (++v131 != v115)
      {
        int8x8_t v130 = *(int8x8_t *)((char *)this + 1168);
        if (v130) {
          goto LABEL_290;
        }
      }
    }
  }
  if (v122 != v123)
  {
    int8x8_t v141 = *(int8x8_t *)((char *)this + 1168);
    if (v141)
    {
      float v142 = v122;
LABEL_321:
      unint64_t v143 = *v142;
      uint8x8_t v144 = (uint8x8_t)vcnt_s8(v141);
      v144.i16[0] = vaddlv_u8(v144);
      if (v144.u32[0] > 1uLL)
      {
        unint64_t v145 = *v142;
        if (v143 >= *(void *)&v141) {
          unint64_t v145 = v143 % *(void *)&v141;
        }
      }
      else
      {
        unint64_t v145 = (*(void *)&v141 - 1) & v143;
      }
      unint64_t v146 = *(void **)(*((void *)this + 145) + 8 * v145);
      if (v146)
      {
        __double2 v147 = (void *)*v146;
        if (*v146)
        {
          if (v144.u32[0] < 2uLL)
          {
            uint64_t v148 = *(void *)&v141 - 1;
            while (1)
            {
              uint64_t v150 = v147[1];
              if (v150 == v143)
              {
                if (v147[2] == v143) {
                  goto LABEL_341;
                }
              }
              else if ((v150 & v148) != v145)
              {
                goto LABEL_346;
              }
              __double2 v147 = (void *)*v147;
              if (!v147) {
                goto LABEL_346;
              }
            }
          }
          do
          {
            unint64_t v149 = v147[1];
            if (v149 == v143)
            {
              if (v147[2] == v143)
              {
LABEL_341:
                double v151 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)this + 140, v147 + 3);
                if (v151)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 140, v151);
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  unint64_t v143 = v147[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 145, v143);
                break;
              }
            }
            else
            {
              if (v149 >= *(void *)&v141) {
                v149 %= *(void *)&v141;
              }
              if (v149 != v145) {
                break;
              }
            }
            __double2 v147 = (void *)*v147;
          }
          while (v147);
        }
      }
LABEL_346:
      while (++v142 != v123)
      {
        int8x8_t v141 = *(int8x8_t *)((char *)this + 1168);
        if (v141) {
          goto LABEL_321;
        }
      }
    }
  }
  if (v122) {
    operator delete(v122);
  }
  if (v114)
  {
    operator delete(v114);
  }
}

void md::accumulate<geo::handle<md::ls::ColorData>>(void *a1, uint64_t a2)
{
  uint64_t v3 = (char *)(a1 + 2);
  uint64_t v2 = (char *)a1[2];
  if (v2)
  {
    do
    {
      while (v2[40] || *(_OWORD *)(v2 + 24) != 0)
      {
        *((void *)v2 + 3) = 0;
        uint64_t v2 = *(char **)v2;
        if (!v2) {
          return;
        }
      }
      *((void *)v2 + 3) = 0;
      *((void *)v2 + 4) = 0;
      uint64_t v7 = *(void **)(a2 + 8);
      unint64_t v6 = *(void *)(a2 + 16);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = *(unsigned char **)a2;
        uint64_t v10 = (uint64_t)v7 - *(void *)a2;
        uint64_t v11 = v10 >> 3;
        unint64_t v12 = (v10 >> 3) + 1;
        if (v12 >> 61) {
          abort();
        }
        uint64_t v13 = v6 - (void)v9;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v15 = operator new(8 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        BOOL v16 = &v15[8 * v11];
        *BOOL v16 = *((void *)v2 + 2);
        BOOL v8 = v16 + 1;
        if (v7 == (void *)v9)
        {
          uint64_t v9 = v7;
        }
        else
        {
          unint64_t v17 = (char *)(v7 - 1) - v9;
          if (v17 < 0x58) {
            goto LABEL_61;
          }
          if ((unint64_t)((char *)v7 - &v15[v10]) < 0x20) {
            goto LABEL_61;
          }
          uint64_t v18 = (v17 >> 3) + 1;
          unint64_t v19 = &v15[8 * v11 - 16];
          unint64_t v20 = (long long *)(v7 - 2);
          uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v22 = *v20;
            *(v19 - 1) = *(v20 - 1);
            *unint64_t v19 = v22;
            v19 -= 2;
            v20 -= 2;
            v21 -= 4;
          }
          while (v21);
          v16 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
          v7 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
          if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_61:
            do
            {
              uint64_t v23 = *--v7;
              *--BOOL v16 = v23;
            }
            while (v7 != (void *)v9);
            uint64_t v9 = *(unsigned char **)a2;
          }
        }
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 16) = &v15[8 * v14];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        void *v7 = *((void *)v2 + 2);
        BOOL v8 = v7 + 1;
      }
      *(void *)(a2 + 8) = v8;
      int8x8_t v24 = (int8x8_t)a1[1];
      unint64_t v26 = *(char **)v2;
      unint64_t v25 = *((void *)v2 + 1);
      uint8x8_t v27 = (uint8x8_t)vcnt_s8(v24);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        if (v25 >= *(void *)&v24) {
          v25 %= *(void *)&v24;
        }
      }
      else
      {
        v25 &= *(void *)&v24 - 1;
      }
      unsigned int v28 = *(char **)(*a1 + 8 * v25);
      do
      {
        int8x8_t v29 = v28;
        unsigned int v28 = *(char **)v28;
      }
      while (v28 != v2);
      if (v29 == v3) {
        goto LABEL_62;
      }
      unint64_t v30 = *((void *)v29 + 1);
      if (v27.u32[0] > 1uLL)
      {
        if (v30 >= *(void *)&v24) {
          v30 %= *(void *)&v24;
        }
      }
      else
      {
        v30 &= *(void *)&v24 - 1;
      }
      uint64_t v31 = *(void *)v2;
      if (v30 != v25)
      {
LABEL_62:
        if (v26)
        {
          unint64_t v32 = *((void *)v26 + 1);
          if (v27.u32[0] > 1uLL)
          {
            if (v32 >= *(void *)&v24) {
              v32 %= *(void *)&v24;
            }
          }
          else
          {
            v32 &= *(void *)&v24 - 1;
          }
          uint64_t v31 = *(void *)v2;
          if (v32 == v25)
          {
LABEL_49:
            unint64_t v33 = *(void *)(v31 + 8);
            if (v27.u32[0] > 1uLL)
            {
              if (v33 >= *(void *)&v24) {
                v33 %= *(void *)&v24;
              }
            }
            else
            {
              v33 &= *(void *)&v24 - 1;
            }
            if (v33 != v25)
            {
              *(void *)(*a1 + 8 * v33) = v29;
              uint64_t v31 = *(void *)v2;
            }
            goto LABEL_55;
          }
        }
        *(void *)(*a1 + 8 * v25) = 0;
        uint64_t v31 = *(void *)v2;
      }
      if (v31) {
        goto LABEL_49;
      }
LABEL_55:
      *(void *)int8x8_t v29 = v31;
      --a1[3];
      operator delete(v2);
      uint64_t v2 = v26;
    }
    while (v26);
  }
}

void md::accumulate<geo::handle<md::MaterialIDStorage>>(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2)
  {
    do
    {
      while (*((unsigned char *)v2 + 40) || *(_OWORD *)(v2 + 3) != 0)
      {
        v2[3] = 0;
        uint64_t v2 = (uint64_t *)*v2;
        if (!v2) {
          return;
        }
      }
      v2[3] = 0;
      v2[4] = 0;
      unint64_t v6 = *(void **)(a2 + 8);
      unint64_t v5 = *(void *)(a2 + 16);
      if ((unint64_t)v6 >= v5)
      {
        BOOL v8 = *(unsigned char **)a2;
        uint64_t v9 = (uint64_t)v6 - *(void *)a2;
        uint64_t v10 = v9 >> 3;
        unint64_t v11 = (v9 >> 3) + 1;
        if (v11 >> 61) {
          abort();
        }
        uint64_t v12 = v5 - (void)v8;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v14 = operator new(8 * v13);
        }
        else
        {
          unint64_t v14 = 0;
        }
        uint64_t v15 = &v14[8 * v10];
        *uint64_t v15 = v2[2];
        uint64_t v7 = v15 + 1;
        if (v6 == (void *)v8)
        {
          BOOL v8 = v6;
        }
        else
        {
          unint64_t v16 = (char *)(v6 - 1) - v8;
          if (v16 < 0x58) {
            goto LABEL_37;
          }
          if ((unint64_t)((char *)v6 - &v14[v9]) < 0x20) {
            goto LABEL_37;
          }
          uint64_t v17 = (v16 >> 3) + 1;
          uint64_t v18 = &v14[8 * v10 - 16];
          unint64_t v19 = (long long *)(v6 - 2);
          uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v21 = *v19;
            *(v18 - 1) = *(v19 - 1);
            _OWORD *v18 = v21;
            v18 -= 2;
            v19 -= 2;
            v20 -= 4;
          }
          while (v20);
          v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
          v6 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
          if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_37:
            do
            {
              uint64_t v22 = *--v6;
              *--uint64_t v15 = v22;
            }
            while (v6 != (void *)v8);
            BOOL v8 = *(unsigned char **)a2;
          }
        }
        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v7;
        *(void *)(a2 + 16) = &v14[8 * v13];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        void *v6 = v2[2];
        uint64_t v7 = v6 + 1;
      }
      *(void *)(a2 + 8) = v7;
      uint64_t v23 = (uint64_t *)*v2;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a1, v2);
      if (__p) {
        operator delete(__p);
      }
      uint64_t v2 = v23;
    }
    while (v23);
  }
}

void ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>::Model<ecs2::RuntimeQuery<md::ls::CommandBufferDescriptionCreation const&>>::~Model()
{
}

void *ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>::Model<ecs2::RuntimeQuery<md::ls::CommandBufferDescriptionCreation const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(*(int8x8_t **)(*(void *)(a1 + 8)
                                                                                               + 8));
  uint64_t v4 = v3;
  unint64_t v6 = (unint64_t *)v3[7];
  unint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((unint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      long long v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *long long v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v4[10] + 3 * v27;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35) {
            goto LABEL_44;
          }
        }
        if (v34 == v33) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v34;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v36);
        uint64_t v37 = v4[4];
        uint64_t v38 = v4[7];
        uint64_t v22 = (uint64_t *)v4[8];
        uint64_t v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          unint64_t v40 = *((unsigned int *)v39 + 1);
          uint64_t v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            uint64_t v42 = *(void *)(v37 + 8 * (v40 >> 7));
            uint64_t v41 = v4[8];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                uint64_t v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != v40) {
                  uint64_t v41 = v4[8];
                }
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            uint64_t v22 = v39 - 1;
            break;
          }
        }
        unint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    unint64_t v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      uint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        uint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          uint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            uint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              uint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        unint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  unint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *unint64_t result = 0xFFFFFFFF00000000;
  return result;
}

void md::VKMRenderResourcesStore::resetV2(md::VKMRenderResourcesStore *this)
{
  if (*((void *)this + 106))
  {
    uint64_t v2 = (void *)*((void *)this + 105);
    if (v2)
    {
      do
      {
        unint64_t v17 = (void *)*v2;
        uint64_t v18 = (void *)v2[5];
        if (v18)
        {
          do
          {
            uint64_t v19 = (void *)*v18;
            operator delete(v18);
            uint64_t v18 = v19;
          }
          while (v19);
        }
        unint64_t v20 = (void *)v2[3];
        v2[3] = 0;
        if (v20) {
          operator delete(v20);
        }
        operator delete(v2);
        uint64_t v2 = v17;
      }
      while (v17);
    }
    *((void *)this + 105) = 0;
    uint64_t v3 = *((void *)this + 104);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 103) + 8 * i) = 0;
    }
    *((void *)this + 106) = 0;
  }
  if (*((void *)this + 1331))
  {
    unint64_t v5 = (void *)*((void *)this + 1330);
    if (v5)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        operator delete(v5);
        unint64_t v5 = v6;
      }
      while (v6);
    }
    *((void *)this + 1330) = 0;
    uint64_t v7 = *((void *)this + 1329);
    if (v7)
    {
      for (uint64_t j = 0; j != v7; ++j)
        *(void *)(*((void *)this + 1328) + 8 * j) = 0;
    }
    *((void *)this + 1331) = 0;
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1131, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1136, (uint64_t)&v1033);
  uint64_t v9 = __p;
  unint64_t v10 = v1037;
  if (__p != v1037)
  {
    uint64_t v11 = __p;
    do
    {
      unint64_t v12 = *v11;
      uint64_t v13 = *((void *)this + 1144);
      if (v12 < (*((void *)this + 1145) - v13) >> 3)
      {
        uint64_t v14 = *(void *)(v13 + 8 * v12);
        BOOL v15 = v14 && HIDWORD(*v11) == HIDWORD(v14);
        if (v15 && *((void *)this + 1147) + ((unint64_t)v14 << 7) != *((void *)this + 1148))
        {
          uint64_t v16 = *(void *)(*((void *)this + 1150) + 8 * v14);
          unint64_t v1030 = v16 | ((unint64_t)*(unsigned int *)(v13 + 8 * v16 + 4) << 32);
          geo::packed_array<md::GlobeMatrixStorage,geo::handle<md::GlobeMatrix>>::erase((uint64_t)this + 9128, &v1030);
        }
      }
      ++v11;
    }
    while (v11 != v10);
  }
  long long v21 = v1033;
  uint64_t v22 = v1034;
  if (v1033 != v1034)
  {
    unint64_t v23 = v1033;
    do
    {
      unint64_t v24 = *v23;
      uint64_t v25 = *((void *)this + 1144);
      if (v24 < (*((void *)this + 1145) - v25) >> 3)
      {
        uint64_t v26 = *(void *)(v25 + 8 * v24);
        BOOL v27 = v26 && HIDWORD(*v23) == HIDWORD(v26);
        if (v27 && *((void *)this + 1147) + ((unint64_t)v26 << 7) != *((void *)this + 1148))
        {
          uint64_t v28 = *(void *)(*((void *)this + 1150) + 8 * v26);
          unint64_t v1030 = v28 | ((unint64_t)*(unsigned int *)(v25 + 8 * v28 + 4) << 32);
          geo::packed_array<md::GlobeMatrixStorage,geo::handle<md::GlobeMatrix>>::erase((uint64_t)this + 9128, &v1030);
        }
      }
      ++v23;
    }
    while (v23 != v22);
  }
  if (v21) {
    operator delete(v21);
  }
  if (v9) {
    operator delete(v9);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::MaterialIDStorage>>((void *)this + 1263, (uint64_t)&__p);
  md::accumulate<geo::handle<md::MaterialIDStorage>>((void *)this + 1268, (uint64_t)&v1033);
  uint64_t v29 = __p;
  unint64_t v30 = v1037;
  if (__p != v1037)
  {
    uint64_t v31 = __p;
    do
    {
      unint64_t v32 = *v31;
      uint64_t v33 = *((void *)this + 1276);
      if (v32 < (*((void *)this + 1277) - v33) >> 3)
      {
        uint64_t v34 = *(void *)(v33 + 8 * v32);
        BOOL v35 = v34 && HIDWORD(*v31) == HIDWORD(v34);
        if (v35 && *((void *)this + 1279) + 56 * v34 != *((void *)this + 1280))
        {
          uint64_t v36 = *(void *)(*((void *)this + 1282) + 8 * v34);
          unint64_t v1030 = v36 | ((unint64_t)*(unsigned int *)(v33 + 8 * v36 + 4) << 32);
          geo::packed_array<md::AssociationItemStorage,geo::handle<md::AssociationItem>>::erase((uint64_t)this + 10184, &v1030);
        }
      }
      ++v31;
    }
    while (v31 != v30);
  }
  uint64_t v37 = v1033;
  uint64_t v38 = v1034;
  if (v1033 != v1034)
  {
    uint64_t v39 = v1033;
    do
    {
      unint64_t v40 = *v39;
      uint64_t v41 = *((void *)this + 1276);
      if (v40 < (*((void *)this + 1277) - v41) >> 3)
      {
        uint64_t v42 = *(void *)(v41 + 8 * v40);
        BOOL v43 = v42 && HIDWORD(*v39) == HIDWORD(v42);
        if (v43 && *((void *)this + 1279) + 56 * v42 != *((void *)this + 1280))
        {
          uint64_t v44 = *(void *)(*((void *)this + 1282) + 8 * v42);
          unint64_t v1030 = v44 | ((unint64_t)*(unsigned int *)(v41 + 8 * v44 + 4) << 32);
          geo::packed_array<md::AssociationItemStorage,geo::handle<md::AssociationItem>>::erase((uint64_t)this + 10184, &v1030);
        }
      }
      ++v39;
    }
    while (v39 != v38);
  }
  if (v37) {
    operator delete(v37);
  }
  if (v29) {
    operator delete(v29);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1153, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1158, (uint64_t)&v1033);
  uint64_t v45 = __p;
  BOOL v46 = v1037;
  if (__p != v1037)
  {
    uint64_t v47 = __p;
    do
    {
      unint64_t v48 = *v47;
      uint64_t v49 = *((void *)this + 1166);
      if (v48 < (*((void *)this + 1167) - v49) >> 3)
      {
        uint64_t v50 = *(void *)(v49 + 8 * v48);
        BOOL v51 = v50 && HIDWORD(*v47) == HIDWORD(v50);
        if (v51 && *((void *)this + 1169) + ((unint64_t)v50 << 8) != *((void *)this + 1170))
        {
          uint64_t v52 = *(void *)(*((void *)this + 1172) + 8 * v50);
          unint64_t v1030 = v52 | ((unint64_t)*(unsigned int *)(v49 + 8 * v52 + 4) << 32);
          geo::packed_array<md::TileMatrixStorage,geo::handle<md::TileMatrix>>::erase((uint64_t)this + 9304, &v1030);
        }
      }
      ++v47;
    }
    while (v47 != v46);
  }
  BOOL v53 = v1033;
  int8x8_t v54 = v1034;
  if (v1033 != v1034)
  {
    unint64_t v55 = v1033;
    do
    {
      unint64_t v56 = *v55;
      uint64_t v57 = *((void *)this + 1166);
      if (v56 < (*((void *)this + 1167) - v57) >> 3)
      {
        uint64_t v58 = *(void *)(v57 + 8 * v56);
        BOOL v59 = v58 && HIDWORD(*v55) == HIDWORD(v58);
        if (v59 && *((void *)this + 1169) + ((unint64_t)v58 << 8) != *((void *)this + 1170))
        {
          uint64_t v60 = *(void *)(*((void *)this + 1172) + 8 * v58);
          unint64_t v1030 = v60 | ((unint64_t)*(unsigned int *)(v57 + 8 * v60 + 4) << 32);
          geo::packed_array<md::TileMatrixStorage,geo::handle<md::TileMatrix>>::erase((uint64_t)this + 9304, &v1030);
        }
      }
      ++v55;
    }
    while (v55 != v54);
  }
  if (v53) {
    operator delete(v53);
  }
  if (v45) {
    operator delete(v45);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1175, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1180, (uint64_t)&v1033);
  uint64_t v61 = __p;
  unint64_t v62 = v1037;
  if (__p != v1037)
  {
    uint64_t v63 = __p;
    do
    {
      unint64_t v64 = *v63;
      uint64_t v65 = *((void *)this + 1188);
      if (v64 < (*((void *)this + 1189) - v65) >> 3)
      {
        uint64_t v66 = *(void *)(v65 + 8 * v64);
        BOOL v67 = v66 && HIDWORD(*v63) == HIDWORD(v66);
        if (v67 && *((void *)this + 1191) + 280 * v66 != *((void *)this + 1192))
        {
          uint64_t v68 = *(void *)(*((void *)this + 1194) + 8 * v66);
          unint64_t v1030 = v68 | ((unint64_t)*(unsigned int *)(v65 + 8 * v68 + 4) << 32);
          geo::packed_array<md::RenderableDataStorage,geo::handle<md::RenderableDataItem>>::erase((uint64_t)this + 9480, &v1030);
        }
      }
      ++v63;
    }
    while (v63 != v62);
  }
  unint64_t v69 = v1033;
  uint64_t v70 = v1034;
  if (v1033 != v1034)
  {
    uint64_t v71 = v1033;
    do
    {
      unint64_t v72 = *v71;
      uint64_t v73 = *((void *)this + 1188);
      if (v72 < (*((void *)this + 1189) - v73) >> 3)
      {
        uint64_t v74 = *(void *)(v73 + 8 * v72);
        BOOL v75 = v74 && HIDWORD(*v71) == HIDWORD(v74);
        if (v75 && *((void *)this + 1191) + 280 * v74 != *((void *)this + 1192))
        {
          uint64_t v76 = *(void *)(*((void *)this + 1194) + 8 * v74);
          unint64_t v1030 = v76 | ((unint64_t)*(unsigned int *)(v73 + 8 * v76 + 4) << 32);
          geo::packed_array<md::RenderableDataStorage,geo::handle<md::RenderableDataItem>>::erase((uint64_t)this + 9480, &v1030);
        }
      }
      ++v71;
    }
    while (v71 != v70);
  }
  if (v69) {
    operator delete(v69);
  }
  if (v61) {
    operator delete(v61);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1197, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1202, (uint64_t)&v1033);
  uint64_t v77 = __p;
  unsigned int v78 = v1037;
  if (__p != v1037)
  {
    unint64_t v79 = __p;
    do
    {
      unint64_t v80 = *v79;
      uint64_t v81 = *((void *)this + 1210);
      if (v80 < (*((void *)this + 1211) - v81) >> 3)
      {
        uint64_t v82 = *(void *)(v81 + 8 * v80);
        BOOL v83 = v82 && HIDWORD(*v79) == HIDWORD(v82);
        if (v83 && *((void *)this + 1213) + 40 * v82 != *((void *)this + 1214))
        {
          uint64_t v84 = *(void *)(*((void *)this + 1216) + 8 * v82);
          unint64_t v1030 = v84 | ((unint64_t)*(unsigned int *)(v81 + 8 * v84 + 4) << 32);
          geo::packed_array<md::ColorRampDataStorage,geo::handle<md::ColorRampData>>::erase((uint64_t)this + 9656, &v1030);
        }
      }
      ++v79;
    }
    while (v79 != v78);
  }
  __int16 v85 = v1033;
  __int16 v86 = v1034;
  if (v1033 != v1034)
  {
    unint64_t v87 = v1033;
    do
    {
      unint64_t v88 = *v87;
      uint64_t v89 = *((void *)this + 1210);
      if (v88 < (*((void *)this + 1211) - v89) >> 3)
      {
        uint64_t v90 = *(void *)(v89 + 8 * v88);
        BOOL v91 = v90 && HIDWORD(*v87) == HIDWORD(v90);
        if (v91 && *((void *)this + 1213) + 40 * v90 != *((void *)this + 1214))
        {
          uint64_t v92 = *(void *)(*((void *)this + 1216) + 8 * v90);
          unint64_t v1030 = v92 | ((unint64_t)*(unsigned int *)(v89 + 8 * v92 + 4) << 32);
          geo::packed_array<md::ColorRampDataStorage,geo::handle<md::ColorRampData>>::erase((uint64_t)this + 9656, &v1030);
        }
      }
      ++v87;
    }
    while (v87 != v86);
  }
  if (v85) {
    operator delete(v85);
  }
  if (v77) {
    operator delete(v77);
  }
  for (uint64_t k = *((void *)this + 57); k != *((void *)this + 56); *((void *)this + 48) = v94)
  {
    uint64_t v96 = *(void *)(k - 8);
    k -= 8;
    uint64_t v95 = v96;
    uint64_t v97 = *((void *)this + 50);
    unint64_t v98 = *((void *)this + 51) - v97;
    uint64_t v99 = v97 + 8 * v96;
    unint64_t v100 = (unint64_t)*(unsigned int *)(v99 + 4) << 32;
    *(_DWORD *)(v99 + 4) = (v100 + 0x100000000) >> 32;
    *(void *)(*((void *)this + 50) + 8 * v96) = v100 & 0xFFFFFFFF00000000 | (v98 >> 3);
    BOOL v102 = (char *)*((void *)this + 48);
    unint64_t v101 = *((void *)this + 49);
    if ((unint64_t)v102 < v101)
    {
      *(void *)BOOL v102 = v95;
      unint64_t v94 = v102 + 8;
    }
    else
    {
      int8x8_t v103 = (char *)*((void *)this + 47);
      uint64_t v104 = (v102 - v103) >> 3;
      unint64_t v105 = v104 + 1;
      if ((unint64_t)(v104 + 1) >> 61) {
LABEL_2012:
      }
        abort();
      uint64_t v106 = v101 - (void)v103;
      if (v106 >> 2 > v105) {
        unint64_t v105 = v106 >> 2;
      }
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v107 = v105;
      }
      if (v107)
      {
        if (v107 >> 61) {
LABEL_2013:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        uint64_t v108 = operator new(8 * v107);
      }
      else
      {
        uint64_t v108 = 0;
      }
      unint64_t v109 = &v108[8 * v104];
      *unint64_t v109 = v95;
      unint64_t v94 = v109 + 1;
      if (v102 != v103)
      {
        unint64_t v110 = v102 - 8 - v103;
        if (v110 < 0x58) {
          goto LABEL_2016;
        }
        if ((unint64_t)(v103 - v108) < 0x20) {
          goto LABEL_2016;
        }
        uint64_t v111 = (v110 >> 3) + 1;
        uint64_t v112 = &v108[8 * v104 - 16];
        unint64_t v113 = v102 - 16;
        uint64_t v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v115 = *(_OWORD *)v113;
          *(v112 - 1) = *((_OWORD *)v113 - 1);
          *uint64_t v112 = v115;
          v112 -= 2;
          v113 -= 32;
          v114 -= 4;
        }
        while (v114);
        v109 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
        v102 -= 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
        if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_2016:
          do
          {
            uint64_t v116 = *((void *)v102 - 1);
            v102 -= 8;
            *--unint64_t v109 = v116;
          }
          while (v102 != v103);
        }
      }
      *((void *)this + 47) = v109;
      *((void *)this + 48) = v94;
      *((void *)this + 49) = &v108[8 * v107];
      if (v103) {
        operator delete(v103);
      }
    }
  }
  *((void *)this + 57) = k;
  *((void *)this + 54) = *((void *)this + 53);
  if (*((void *)this + 40))
  {
    unint64_t v117 = (void *)*((void *)this + 39);
    if (v117)
    {
      do
      {
        uint64_t v118 = (void *)*v117;
        operator delete(v117);
        unint64_t v117 = v118;
      }
      while (v118);
    }
    *((void *)this + 39) = 0;
    uint64_t v119 = *((void *)this + 38);
    if (v119)
    {
      for (uint64_t m = 0; m != v119; ++m)
        *(void *)(*((void *)this + 37) + 8 * m) = 0;
    }
    *((void *)this + 40) = 0;
  }
  if (*((void *)this + 45))
  {
    uint64_t v121 = (void *)*((void *)this + 44);
    if (v121)
    {
      do
      {
        float v122 = (void *)*v121;
        operator delete(v121);
        uint64_t v121 = v122;
      }
      while (v122);
    }
    *((void *)this + 44) = 0;
    uint64_t v123 = *((void *)this + 43);
    if (v123)
    {
      for (uint64_t n = 0; n != v123; ++n)
        *(void *)(*((void *)this + 42) + 8 * n) = 0;
    }
    *((void *)this + 45) = 0;
  }
  for (iuint64_t i = *((void *)this + 79); ii != *((void *)this + 78); *((void *)this + 70) = v126)
  {
    uint64_t v128 = *(void *)(ii - 8);
    ii -= 8;
    uint64_t v127 = v128;
    uint64_t v129 = *((void *)this + 72);
    unint64_t v130 = *((void *)this + 73) - v129;
    uint64_t v131 = v129 + 8 * v128;
    unint64_t v132 = (unint64_t)*(unsigned int *)(v131 + 4) << 32;
    *(_DWORD *)(v131 + 4) = (v132 + 0x100000000) >> 32;
    *(void *)(*((void *)this + 72) + 8 * v128) = v132 & 0xFFFFFFFF00000000 | (v130 >> 3);
    uint8x8_t v133 = (char *)*((void *)this + 70);
    unint64_t v134 = *((void *)this + 71);
    if ((unint64_t)v133 < v134)
    {
      *(void *)uint8x8_t v133 = v127;
      uint64_t v126 = v133 + 8;
    }
    else
    {
      float v135 = (char *)*((void *)this + 69);
      uint64_t v136 = (v133 - v135) >> 3;
      unint64_t v137 = v136 + 1;
      if ((unint64_t)(v136 + 1) >> 61) {
        goto LABEL_2012;
      }
      uint64_t v138 = v134 - (void)v135;
      if (v138 >> 2 > v137) {
        unint64_t v137 = v138 >> 2;
      }
      if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v139 = v137;
      }
      if (v139)
      {
        if (v139 >> 61) {
          goto LABEL_2013;
        }
        float v140 = operator new(8 * v139);
      }
      else
      {
        float v140 = 0;
      }
      int8x8_t v141 = &v140[8 * v136];
      *int8x8_t v141 = v127;
      uint64_t v126 = v141 + 1;
      if (v133 != v135)
      {
        unint64_t v142 = v133 - 8 - v135;
        if (v142 < 0x58) {
          goto LABEL_2017;
        }
        if ((unint64_t)(v135 - v140) < 0x20) {
          goto LABEL_2017;
        }
        uint64_t v143 = (v142 >> 3) + 1;
        uint8x8_t v144 = &v140[8 * v136 - 16];
        unint64_t v145 = v133 - 16;
        uint64_t v146 = v143 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v147 = *(_OWORD *)v145;
          *(v144 - 1) = *((_OWORD *)v145 - 1);
          *uint8x8_t v144 = v147;
          v144 -= 2;
          v145 -= 32;
          v146 -= 4;
        }
        while (v146);
        v141 -= v143 & 0x3FFFFFFFFFFFFFFCLL;
        v133 -= 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
        if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_2017:
          do
          {
            uint64_t v148 = *((void *)v133 - 1);
            v133 -= 8;
            *--int8x8_t v141 = v148;
          }
          while (v133 != v135);
        }
      }
      *((void *)this + 69) = v141;
      *((void *)this + 70) = v126;
      *((void *)this + 71) = &v140[8 * v139];
      if (v135) {
        operator delete(v135);
      }
    }
  }
  *((void *)this + 79) = ii;
  uint64_t v149 = *((void *)this + 76);
  for (juint64_t j = *((void *)this + 75); v149 != jj; v149 -= 16)
  {
    double v151 = *(std::__shared_weak_count **)(v149 - 8);
    if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  *((void *)this + 76) = jj;
  if (*((void *)this + 62))
  {
    double v152 = (void *)*((void *)this + 61);
    if (v152)
    {
      do
      {
        double v153 = (void *)*v152;
        operator delete(v152);
        double v152 = v153;
      }
      while (v153);
    }
    *((void *)this + 61) = 0;
    uint64_t v154 = *((void *)this + 60);
    if (v154)
    {
      for (kuint64_t k = 0; kk != v154; ++kk)
        *(void *)(*((void *)this + 59) + 8 * kk) = 0;
    }
    *((void *)this + 62) = 0;
  }
  if (*((void *)this + 67))
  {
    double v156 = (void *)*((void *)this + 66);
    if (v156)
    {
      do
      {
        uint64_t v157 = (void *)*v156;
        operator delete(v156);
        double v156 = v157;
      }
      while (v157);
    }
    *((void *)this + 66) = 0;
    uint64_t v158 = *((void *)this + 65);
    if (v158)
    {
      for (muint64_t m = 0; mm != v158; ++mm)
        *(void *)(*((void *)this + 64) + 8 * mm) = 0;
    }
    *((void *)this + 67) = 0;
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 81, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 86, (uint64_t)&v1033);
  double v160 = __p;
  double v161 = v1037;
  if (__p != v1037)
  {
    double v162 = __p;
    do
    {
      unint64_t v163 = *v162;
      uint64_t v164 = *((void *)this + 94);
      if (v163 < (*((void *)this + 95) - v164) >> 3)
      {
        uint64_t v165 = *(void *)(v164 + 8 * v163);
        BOOL v166 = v165 && HIDWORD(*v162) == HIDWORD(v165);
        if (v166 && *((void *)this + 97) + 8 * v165 != *((void *)this + 98))
        {
          uint64_t v167 = *(void *)(*((void *)this + 100) + 8 * v165);
          unint64_t v1030 = v167 | ((unint64_t)*(unsigned int *)(v164 + 8 * v167 + 4) << 32);
          geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase((uint64_t)this + 728, &v1030);
        }
      }
      ++v162;
    }
    while (v162 != v161);
  }
  double v168 = v1033;
  __double2 v169 = v1034;
  if (v1033 != v1034)
  {
    double v170 = v1033;
    do
    {
      unint64_t v171 = *v170;
      uint64_t v172 = *((void *)this + 94);
      if (v171 < (*((void *)this + 95) - v172) >> 3)
      {
        uint64_t v173 = *(void *)(v172 + 8 * v171);
        BOOL v174 = v173 && HIDWORD(*v170) == HIDWORD(v173);
        if (v174 && *((void *)this + 97) + 8 * v173 != *((void *)this + 98))
        {
          uint64_t v175 = *(void *)(*((void *)this + 100) + 8 * v173);
          unint64_t v1030 = v175 | ((unint64_t)*(unsigned int *)(v172 + 8 * v175 + 4) << 32);
          geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase((uint64_t)this + 728, &v1030);
        }
      }
      ++v170;
    }
    while (v170 != v169);
  }
  if (v168) {
    operator delete(v168);
  }
  if (v160) {
    operator delete(v160);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 367, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 372, (uint64_t)&v1033);
  double v176 = (unint64_t *)__p;
  double v177 = v1037;
  if (__p != v1037)
  {
    __double2 v178 = (unint64_t *)__p;
    do
    {
      unint64_t v179 = *v178;
      uint64_t v180 = *((void *)this + 380);
      if (v179 < (*((void *)this + 381) - v180) >> 3)
      {
        uint64_t v181 = *(void *)(v180 + 8 * v179);
        BOOL v182 = v181 && HIDWORD(*v178) == HIDWORD(v181);
        if (v182 && *((void *)this + 383) + 24 * v181 != *((void *)this + 384))
        {
          uint64_t v183 = *(void *)(*((void *)this + 386) + 8 * v181);
          unint64_t v1030 = v183 | ((unint64_t)*(unsigned int *)(v180 + 8 * v183 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3016, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 389, *v178);
        }
      }
      ++v178;
    }
    while (v178 != v177);
  }
  __double2 v184 = v1033;
  double v185 = v1034;
  if (v1033 != v1034)
  {
    double v186 = v1033;
    do
    {
      unint64_t v187 = *v186;
      uint64_t v188 = *((void *)this + 380);
      if (v187 < (*((void *)this + 381) - v188) >> 3)
      {
        uint64_t v189 = *(void *)(v188 + 8 * v187);
        BOOL v190 = v189 && HIDWORD(*v186) == HIDWORD(v189);
        if (v190 && *((void *)this + 383) + 24 * v189 != *((void *)this + 384))
        {
          uint64_t v191 = *(void *)(*((void *)this + 386) + 8 * v189);
          unint64_t v1030 = v191 | ((unint64_t)*(unsigned int *)(v188 + 8 * v191 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3016, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 389, *v186);
        }
      }
      ++v186;
    }
    while (v186 != v185);
  }
  if (v176 != v177)
  {
    int8x8_t v192 = *(int8x8_t *)((char *)this + 3200);
    if (v192)
    {
      double v193 = v176;
LABEL_282:
      unint64_t v194 = *v193;
      uint8x8_t v195 = (uint8x8_t)vcnt_s8(v192);
      v195.i16[0] = vaddlv_u8(v195);
      if (v195.u32[0] > 1uLL)
      {
        unint64_t v196 = *v193;
        if (v194 >= *(void *)&v192) {
          unint64_t v196 = v194 % *(void *)&v192;
        }
      }
      else
      {
        unint64_t v196 = (*(void *)&v192 - 1) & v194;
      }
      double v197 = *(uint64_t ***)(*((void *)this + 399) + 8 * v196);
      if (v197)
      {
        double v198 = *v197;
        if (*v197)
        {
          if (v195.u32[0] < 2uLL)
          {
            uint64_t v199 = *(void *)&v192 - 1;
            while (1)
            {
              uint64_t v201 = v198[1];
              if (v201 == v194)
              {
                if (v198[2] == v194) {
                  goto LABEL_302;
                }
              }
              else if ((v201 & v199) != v196)
              {
                goto LABEL_303;
              }
              double v198 = (uint64_t *)*v198;
              if (!v198) {
                goto LABEL_303;
              }
            }
          }
          do
          {
            unint64_t v200 = v198[1];
            if (v200 == v194)
            {
              if (v198[2] == v194)
              {
LABEL_302:
                std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>((uint64_t *)this + 394, *((unsigned char *)v198 + 24));
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 399, v198[2]);
                break;
              }
            }
            else
            {
              if (v200 >= *(void *)&v192) {
                v200 %= *(void *)&v192;
              }
              if (v200 != v196) {
                break;
              }
            }
            double v198 = (uint64_t *)*v198;
          }
          while (v198);
        }
      }
LABEL_303:
      while (++v193 != v177)
      {
        int8x8_t v192 = *(int8x8_t *)((char *)this + 3200);
        if (v192) {
          goto LABEL_282;
        }
      }
    }
  }
  if (v184 != v185)
  {
    int8x8_t v202 = *(int8x8_t *)((char *)this + 3200);
    if (v202)
    {
      double v203 = v184;
LABEL_309:
      unint64_t v204 = *v203;
      uint8x8_t v205 = (uint8x8_t)vcnt_s8(v202);
      v205.i16[0] = vaddlv_u8(v205);
      if (v205.u32[0] > 1uLL)
      {
        unint64_t v206 = *v203;
        if (v204 >= *(void *)&v202) {
          unint64_t v206 = v204 % *(void *)&v202;
        }
      }
      else
      {
        unint64_t v206 = (*(void *)&v202 - 1) & v204;
      }
      double v207 = *(uint64_t ***)(*((void *)this + 399) + 8 * v206);
      if (v207)
      {
        double v208 = *v207;
        if (*v207)
        {
          if (v205.u32[0] < 2uLL)
          {
            uint64_t v209 = *(void *)&v202 - 1;
            while (1)
            {
              uint64_t v211 = v208[1];
              if (v211 == v204)
              {
                if (v208[2] == v204) {
                  goto LABEL_329;
                }
              }
              else if ((v211 & v209) != v206)
              {
                goto LABEL_330;
              }
              double v208 = (uint64_t *)*v208;
              if (!v208) {
                goto LABEL_330;
              }
            }
          }
          do
          {
            unint64_t v210 = v208[1];
            if (v210 == v204)
            {
              if (v208[2] == v204)
              {
LABEL_329:
                std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>((uint64_t *)this + 394, *((unsigned char *)v208 + 24));
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 399, v208[2]);
                break;
              }
            }
            else
            {
              if (v210 >= *(void *)&v202) {
                v210 %= *(void *)&v202;
              }
              if (v210 != v206) {
                break;
              }
            }
            double v208 = (uint64_t *)*v208;
          }
          while (v208);
        }
      }
LABEL_330:
      while (++v203 != v185)
      {
        int8x8_t v202 = *(int8x8_t *)((char *)this + 3200);
        if (v202) {
          goto LABEL_309;
        }
      }
    }
  }
  if (v184) {
    operator delete(v184);
  }
  if (v176) {
    operator delete(v176);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1065, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1070, (uint64_t)&v1033);
  double v212 = __p;
  uint64_t v213 = v1037;
  if (__p != v1037)
  {
    double v214 = __p;
    do
    {
      unint64_t v215 = *v214;
      uint64_t v216 = *((void *)this + 1078);
      if (v215 < (*((void *)this + 1079) - v216) >> 3)
      {
        uint64_t v217 = *(void *)(v216 + 8 * v215);
        BOOL v218 = v217 && HIDWORD(*v214) == HIDWORD(v217);
        if (v218 && *((void *)this + 1081) + v217 != *((void *)this + 1082))
        {
          uint64_t v219 = *(void *)(*((void *)this + 1084) + 8 * v217);
          unint64_t v1030 = v219 | ((unint64_t)*(unsigned int *)(v216 + 8 * v219 + 4) << 32);
          geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase((uint64_t)this + 8600, &v1030);
        }
      }
      ++v214;
    }
    while (v214 != v213);
  }
  double v220 = v1033;
  unsigned int v221 = v1034;
  if (v1033 != v1034)
  {
    double v222 = v1033;
    do
    {
      unint64_t v223 = *v222;
      uint64_t v224 = *((void *)this + 1078);
      if (v223 < (*((void *)this + 1079) - v224) >> 3)
      {
        uint64_t v225 = *(void *)(v224 + 8 * v223);
        BOOL v226 = v225 && HIDWORD(*v222) == HIDWORD(v225);
        if (v226 && *((void *)this + 1081) + v225 != *((void *)this + 1082))
        {
          uint64_t v227 = *(void *)(*((void *)this + 1084) + 8 * v225);
          unint64_t v1030 = v227 | ((unint64_t)*(unsigned int *)(v224 + 8 * v227 + 4) << 32);
          geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase((uint64_t)this + 8600, &v1030);
        }
      }
      ++v222;
    }
    while (v222 != v221);
  }
  if (v220) {
    operator delete(v220);
  }
  if (v212) {
    operator delete(v212);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1087, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1092, (uint64_t)&v1033);
  double v228 = __p;
  long double v229 = v1037;
  if (__p != v1037)
  {
    uint64_t v230 = __p;
    do
    {
      unint64_t v231 = *v230;
      uint64_t v232 = *((void *)this + 1100);
      if (v231 < (*((void *)this + 1101) - v232) >> 3)
      {
        uint64_t v233 = *(void *)(v232 + 8 * v231);
        BOOL v234 = v233 && HIDWORD(*v230) == HIDWORD(v233);
        if (v234 && *((void *)this + 1103) + v233 != *((void *)this + 1104))
        {
          uint64_t v235 = *(void *)(*((void *)this + 1106) + 8 * v233);
          unint64_t v1030 = v235 | ((unint64_t)*(unsigned int *)(v232 + 8 * v235 + 4) << 32);
          geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase((uint64_t)this + 8776, &v1030);
        }
      }
      ++v230;
    }
    while (v230 != v229);
  }
  float v236 = v1033;
  float v237 = v1034;
  if (v1033 != v1034)
  {
    float v238 = v1033;
    do
    {
      unint64_t v239 = *v238;
      uint64_t v240 = *((void *)this + 1100);
      if (v239 < (*((void *)this + 1101) - v240) >> 3)
      {
        uint64_t v241 = *(void *)(v240 + 8 * v239);
        BOOL v242 = v241 && HIDWORD(*v238) == HIDWORD(v241);
        if (v242 && *((void *)this + 1103) + v241 != *((void *)this + 1104))
        {
          uint64_t v243 = *(void *)(*((void *)this + 1106) + 8 * v241);
          unint64_t v1030 = v243 | ((unint64_t)*(unsigned int *)(v240 + 8 * v243 + 4) << 32);
          geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase((uint64_t)this + 8776, &v1030);
        }
      }
      ++v238;
    }
    while (v238 != v237);
  }
  if (v236) {
    operator delete(v236);
  }
  if (v228) {
    operator delete(v228);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1109, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1114, (uint64_t)&v1033);
  float v244 = __p;
  int v245 = v1037;
  if (__p != v1037)
  {
    float v246 = __p;
    do
    {
      unint64_t v247 = *v246;
      uint64_t v248 = *((void *)this + 1122);
      if (v247 < (*((void *)this + 1123) - v248) >> 3)
      {
        uint64_t v249 = *(void *)(v248 + 8 * v247);
        BOOL v250 = v249 && HIDWORD(*v246) == HIDWORD(v249);
        if (v250 && *((void *)this + 1125) + 2 * v249 != *((void *)this + 1126))
        {
          uint64_t v251 = *(void *)(*((void *)this + 1128) + 8 * v249);
          unint64_t v1030 = v251 | ((unint64_t)*(unsigned int *)(v248 + 8 * v251 + 4) << 32);
          geo::packed_array<md::MapDataTypeStorage,geo::handle<md::MapDataType>>::erase((uint64_t)this + 8952, &v1030);
        }
      }
      ++v246;
    }
    while (v246 != v245);
  }
  uint64_t v252 = v1033;
  float v253 = v1034;
  if (v1033 != v1034)
  {
    float v254 = v1033;
    do
    {
      unint64_t v255 = *v254;
      uint64_t v256 = *((void *)this + 1122);
      if (v255 < (*((void *)this + 1123) - v256) >> 3)
      {
        uint64_t v257 = *(void *)(v256 + 8 * v255);
        BOOL v258 = v257 && HIDWORD(*v254) == HIDWORD(v257);
        if (v258 && *((void *)this + 1125) + 2 * v257 != *((void *)this + 1126))
        {
          uint64_t v259 = *(void *)(*((void *)this + 1128) + 8 * v257);
          unint64_t v1030 = v259 | ((unint64_t)*(unsigned int *)(v256 + 8 * v259 + 4) << 32);
          geo::packed_array<md::MapDataTypeStorage,geo::handle<md::MapDataType>>::erase((uint64_t)this + 8952, &v1030);
        }
      }
      ++v254;
    }
    while (v254 != v253);
  }
  if (v252) {
    operator delete(v252);
  }
  if (v244) {
    operator delete(v244);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 404, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 409, (uint64_t)&v1033);
  unint64_t v260 = __p;
  float v261 = v1037;
  if (__p != v1037)
  {
    unsigned int v262 = __p;
    do
    {
      unint64_t v263 = *v262;
      uint64_t v264 = *((void *)this + 417);
      if (v263 < (*((void *)this + 418) - v264) >> 3)
      {
        uint64_t v265 = *(void *)(v264 + 8 * v263);
        BOOL v266 = v265 && HIDWORD(*v262) == HIDWORD(v265);
        if (v266 && *((void *)this + 420) + 24 * v265 != *((void *)this + 421))
        {
          uint64_t v267 = *(void *)(*((void *)this + 423) + 8 * v265);
          unint64_t v1030 = v267 | ((unint64_t)*(unsigned int *)(v264 + 8 * v267 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3312, &v1030);
        }
      }
      ++v262;
    }
    while (v262 != v261);
  }
  uint64_t v268 = v1033;
  uint64_t v269 = v1034;
  if (v1033 != v1034)
  {
    long long v270 = v1033;
    do
    {
      unint64_t v271 = *v270;
      uint64_t v272 = *((void *)this + 417);
      if (v271 < (*((void *)this + 418) - v272) >> 3)
      {
        uint64_t v273 = *(void *)(v272 + 8 * v271);
        BOOL v274 = v273 && HIDWORD(*v270) == HIDWORD(v273);
        if (v274 && *((void *)this + 420) + 24 * v273 != *((void *)this + 421))
        {
          uint64_t v275 = *(void *)(*((void *)this + 423) + 8 * v273);
          unint64_t v1030 = v275 | ((unint64_t)*(unsigned int *)(v272 + 8 * v275 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3312, &v1030);
        }
      }
      ++v270;
    }
    while (v270 != v269);
  }
  if (v268) {
    operator delete(v268);
  }
  if (v260) {
    operator delete(v260);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 426, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 431, (uint64_t)&v1033);
  uint8x8_t v276 = __p;
  unint64_t v277 = v1037;
  if (__p != v1037)
  {
    uint64_t v278 = __p;
    do
    {
      unint64_t v279 = *v278;
      uint64_t v280 = *((void *)this + 439);
      if (v279 < (*((void *)this + 440) - v280) >> 3)
      {
        uint64_t v281 = *(void *)(v280 + 8 * v279);
        BOOL v282 = v281 && HIDWORD(*v278) == HIDWORD(v281);
        if (v282 && *((void *)this + 442) + 24 * v281 != *((void *)this + 443))
        {
          uint64_t v283 = *(void *)(*((void *)this + 445) + 8 * v281);
          unint64_t v1030 = v283 | ((unint64_t)*(unsigned int *)(v280 + 8 * v283 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3488, &v1030);
        }
      }
      ++v278;
    }
    while (v278 != v277);
  }
  double v284 = v1033;
  double v285 = v1034;
  if (v1033 != v1034)
  {
    double v286 = v1033;
    do
    {
      unint64_t v287 = *v286;
      uint64_t v288 = *((void *)this + 439);
      if (v287 < (*((void *)this + 440) - v288) >> 3)
      {
        uint64_t v289 = *(void *)(v288 + 8 * v287);
        BOOL v290 = v289 && HIDWORD(*v286) == HIDWORD(v289);
        if (v290 && *((void *)this + 442) + 24 * v289 != *((void *)this + 443))
        {
          uint64_t v291 = *(void *)(*((void *)this + 445) + 8 * v289);
          unint64_t v1030 = v291 | ((unint64_t)*(unsigned int *)(v288 + 8 * v291 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3488, &v1030);
        }
      }
      ++v286;
    }
    while (v286 != v285);
  }
  if (v284) {
    operator delete(v284);
  }
  if (v276) {
    operator delete(v276);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 448, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 453, (uint64_t)&v1033);
  double v292 = __p;
  double v293 = v1037;
  if (__p != v1037)
  {
    double v294 = __p;
    do
    {
      unint64_t v295 = *v294;
      uint64_t v296 = *((void *)this + 461);
      if (v295 < (*((void *)this + 462) - v296) >> 3)
      {
        uint64_t v297 = *(void *)(v296 + 8 * v295);
        BOOL v298 = v297 && HIDWORD(*v294) == HIDWORD(v297);
        if (v298 && *((void *)this + 464) + 24 * v297 != *((void *)this + 465))
        {
          uint64_t v299 = *(void *)(*((void *)this + 467) + 8 * v297);
          unint64_t v1030 = v299 | ((unint64_t)*(unsigned int *)(v296 + 8 * v299 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3664, &v1030);
        }
      }
      ++v294;
    }
    while (v294 != v293);
  }
  double v300 = v1033;
  double v301 = v1034;
  if (v1033 != v1034)
  {
    double v302 = v1033;
    do
    {
      unint64_t v303 = *v302;
      uint64_t v304 = *((void *)this + 461);
      if (v303 < (*((void *)this + 462) - v304) >> 3)
      {
        uint64_t v305 = *(void *)(v304 + 8 * v303);
        BOOL v306 = v305 && HIDWORD(*v302) == HIDWORD(v305);
        if (v306 && *((void *)this + 464) + 24 * v305 != *((void *)this + 465))
        {
          uint64_t v307 = *(void *)(*((void *)this + 467) + 8 * v305);
          unint64_t v1030 = v307 | ((unint64_t)*(unsigned int *)(v304 + 8 * v307 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3664, &v1030);
        }
      }
      ++v302;
    }
    while (v302 != v301);
  }
  if (v300) {
    operator delete(v300);
  }
  if (v292) {
    operator delete(v292);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 470, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 475, (uint64_t)&v1033);
  double v308 = __p;
  double v309 = v1037;
  if (__p != v1037)
  {
    double v310 = __p;
    do
    {
      unint64_t v311 = *v310;
      uint64_t v312 = *((void *)this + 483);
      if (v311 < (*((void *)this + 484) - v312) >> 3)
      {
        uint64_t v313 = *(void *)(v312 + 8 * v311);
        BOOL v314 = v313 && HIDWORD(*v310) == HIDWORD(v313);
        if (v314 && *((void *)this + 486) + 24 * v313 != *((void *)this + 487))
        {
          uint64_t v315 = *(void *)(*((void *)this + 489) + 8 * v313);
          unint64_t v1030 = v315 | ((unint64_t)*(unsigned int *)(v312 + 8 * v315 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3840, &v1030);
        }
      }
      ++v310;
    }
    while (v310 != v309);
  }
  double v316 = v1033;
  double v317 = v1034;
  if (v1033 != v1034)
  {
    double v318 = v1033;
    do
    {
      unint64_t v319 = *v318;
      uint64_t v320 = *((void *)this + 483);
      if (v319 < (*((void *)this + 484) - v320) >> 3)
      {
        uint64_t v321 = *(void *)(v320 + 8 * v319);
        BOOL v322 = v321 && HIDWORD(*v318) == HIDWORD(v321);
        if (v322 && *((void *)this + 486) + 24 * v321 != *((void *)this + 487))
        {
          uint64_t v323 = *(void *)(*((void *)this + 489) + 8 * v321);
          unint64_t v1030 = v323 | ((unint64_t)*(unsigned int *)(v320 + 8 * v323 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3840, &v1030);
        }
      }
      ++v318;
    }
    while (v318 != v317);
  }
  if (v316) {
    operator delete(v316);
  }
  if (v308) {
    operator delete(v308);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 492, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 497, (uint64_t)&v1033);
  double v324 = __p;
  double v325 = v1037;
  if (__p != v1037)
  {
    double v326 = __p;
    do
    {
      unint64_t v327 = *v326;
      uint64_t v328 = *((void *)this + 505);
      if (v327 < (*((void *)this + 506) - v328) >> 3)
      {
        uint64_t v329 = *(void *)(v328 + 8 * v327);
        BOOL v330 = v329 && HIDWORD(*v326) == HIDWORD(v329);
        if (v330 && *((void *)this + 508) + 24 * v329 != *((void *)this + 509))
        {
          uint64_t v331 = *(void *)(*((void *)this + 511) + 8 * v329);
          unint64_t v1030 = v331 | ((unint64_t)*(unsigned int *)(v328 + 8 * v331 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4016, &v1030);
        }
      }
      ++v326;
    }
    while (v326 != v325);
  }
  double v332 = v1033;
  double v333 = v1034;
  if (v1033 != v1034)
  {
    double v334 = v1033;
    do
    {
      unint64_t v335 = *v334;
      uint64_t v336 = *((void *)this + 505);
      if (v335 < (*((void *)this + 506) - v336) >> 3)
      {
        uint64_t v337 = *(void *)(v336 + 8 * v335);
        BOOL v338 = v337 && HIDWORD(*v334) == HIDWORD(v337);
        if (v338 && *((void *)this + 508) + 24 * v337 != *((void *)this + 509))
        {
          uint64_t v339 = *(void *)(*((void *)this + 511) + 8 * v337);
          unint64_t v1030 = v339 | ((unint64_t)*(unsigned int *)(v336 + 8 * v339 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4016, &v1030);
        }
      }
      ++v334;
    }
    while (v334 != v333);
  }
  if (v332) {
    operator delete(v332);
  }
  if (v324) {
    operator delete(v324);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 293, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 298, (uint64_t)&v1030);
  double v340 = v1033;
  float64x2_t v341 = v1034;
  if (v1033 != v1034)
  {
    double v342 = v1033;
    do
    {
      unint64_t v343 = *v342;
      uint64_t v344 = *((void *)this + 306);
      if (v343 < (*((void *)this + 307) - v344) >> 3)
      {
        uint64_t v345 = *(void *)(v344 + 8 * v343);
        BOOL v346 = v345 && HIDWORD(*v342) == HIDWORD(v345);
        if (v346 && *((void *)this + 309) + 24 * v345 != *((void *)this + 310))
        {
          uint64_t v347 = *(void *)(*((void *)this + 312) + 8 * v345);
          long long __p = (void *)(v347 | ((unint64_t)*(unsigned int *)(v344 + 8 * v347 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 2424, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 315, *v342);
        }
      }
      ++v342;
    }
    while (v342 != v341);
  }
  double v348 = (unint64_t *)v1030;
  float64x2_t v349 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    double v350 = (unint64_t *)v1030;
    do
    {
      unint64_t v351 = *v350;
      uint64_t v352 = *((void *)this + 306);
      if (v351 < (*((void *)this + 307) - v352) >> 3)
      {
        uint64_t v353 = *(void *)(v352 + 8 * v351);
        BOOL v354 = v353 && HIDWORD(*v350) == HIDWORD(v353);
        if (v354 && *((void *)this + 309) + 24 * v353 != *((void *)this + 310))
        {
          uint64_t v355 = *(void *)(*((void *)this + 312) + 8 * v353);
          long long __p = (void *)(v355 | ((unint64_t)*(unsigned int *)(v352 + 8 * v355 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 2424, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 315, *v350);
        }
      }
      ++v350;
    }
    while (v350 != v349);
  }
  if (v340 != v341)
  {
    int8x8_t v356 = *(int8x8_t *)((char *)this + 2608);
    if (v356)
    {
      int64x2_t v357 = v340;
LABEL_570:
      unint64_t v358 = *v357;
      uint8x8_t v359 = (uint8x8_t)vcnt_s8(v356);
      v359.i16[0] = vaddlv_u8(v359);
      if (v359.u32[0] > 1uLL)
      {
        unint64_t v360 = *v357;
        if (v358 >= *(void *)&v356) {
          unint64_t v360 = v358 % *(void *)&v356;
        }
      }
      else
      {
        unint64_t v360 = (*(void *)&v356 - 1) & v358;
      }
      __int8 v361 = *(float ***)(*((void *)this + 325) + 8 * v360);
      if (v361)
      {
        double v362 = *v361;
        if (*v361)
        {
          if (v359.u32[0] < 2uLL)
          {
            uint64_t v363 = *(void *)&v356 - 1;
            while (1)
            {
              uint64_t v365 = *((void *)v362 + 1);
              if (v365 == v358)
              {
                if (*((void *)v362 + 2) == v358) {
                  goto LABEL_590;
                }
              }
              else if ((v365 & v363) != v360)
              {
                goto LABEL_595;
              }
              double v362 = *(float **)v362;
              if (!v362) {
                goto LABEL_595;
              }
            }
          }
          do
          {
            unint64_t v364 = *((void *)v362 + 1);
            if (v364 == v358)
            {
              if (*((void *)v362 + 2) == v358)
              {
LABEL_590:
                double v366 = std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>((void *)this + 320, v362 + 6);
                if (v366)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 320, v366);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v358 = *((void *)v362 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 325, v358);
                break;
              }
            }
            else
            {
              if (v364 >= *(void *)&v356) {
                v364 %= *(void *)&v356;
              }
              if (v364 != v360) {
                break;
              }
            }
            double v362 = *(float **)v362;
          }
          while (v362);
        }
      }
LABEL_595:
      while (++v357 != v341)
      {
        int8x8_t v356 = *(int8x8_t *)((char *)this + 2608);
        if (v356) {
          goto LABEL_570;
        }
      }
    }
  }
  if (v348 != v349)
  {
    int8x8_t v367 = *(int8x8_t *)((char *)this + 2608);
    if (v367)
    {
      int8x16_t v368 = v348;
LABEL_601:
      unint64_t v369 = *v368;
      uint8x8_t v370 = (uint8x8_t)vcnt_s8(v367);
      v370.i16[0] = vaddlv_u8(v370);
      if (v370.u32[0] > 1uLL)
      {
        unint64_t v371 = *v368;
        if (v369 >= *(void *)&v367) {
          unint64_t v371 = v369 % *(void *)&v367;
        }
      }
      else
      {
        unint64_t v371 = (*(void *)&v367 - 1) & v369;
      }
      double v372 = *(float ***)(*((void *)this + 325) + 8 * v371);
      if (v372)
      {
        float64x2_t v373 = *v372;
        if (*v372)
        {
          if (v370.u32[0] < 2uLL)
          {
            uint64_t v374 = *(void *)&v367 - 1;
            while (1)
            {
              uint64_t v376 = *((void *)v373 + 1);
              if (v376 == v369)
              {
                if (*((void *)v373 + 2) == v369) {
                  goto LABEL_621;
                }
              }
              else if ((v376 & v374) != v371)
              {
                goto LABEL_626;
              }
              float64x2_t v373 = *(float **)v373;
              if (!v373) {
                goto LABEL_626;
              }
            }
          }
          do
          {
            unint64_t v375 = *((void *)v373 + 1);
            if (v375 == v369)
            {
              if (*((void *)v373 + 2) == v369)
              {
LABEL_621:
                float64x2_t v377 = std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>((void *)this + 320, v373 + 6);
                if (v377)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 320, v377);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v369 = *((void *)v373 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 325, v369);
                break;
              }
            }
            else
            {
              if (v375 >= *(void *)&v367) {
                v375 %= *(void *)&v367;
              }
              if (v375 != v371) {
                break;
              }
            }
            float64x2_t v373 = *(float **)v373;
          }
          while (v373);
        }
      }
LABEL_626:
      while (++v368 != v349)
      {
        int8x8_t v367 = *(int8x8_t *)((char *)this + 2608);
        if (v367) {
          goto LABEL_601;
        }
      }
    }
  }
  if (v348) {
    operator delete(v348);
  }
  if (v340) {
    operator delete(v340);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 330, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 335, (uint64_t)&v1033);
  int8x16_t v378 = (unint64_t *)__p;
  float64x2_t v379 = v1037;
  if (__p != v1037)
  {
    float64x2_t v380 = (unint64_t *)__p;
    do
    {
      unint64_t v381 = *v380;
      uint64_t v382 = *((void *)this + 343);
      if (v381 < (*((void *)this + 344) - v382) >> 3)
      {
        uint64_t v383 = *(void *)(v382 + 8 * v381);
        BOOL v384 = v383 && HIDWORD(*v380) == HIDWORD(v383);
        if (v384 && *((void *)this + 346) + 24 * v383 != *((void *)this + 347))
        {
          uint64_t v385 = *(void *)(*((void *)this + 349) + 8 * v383);
          unint64_t v1030 = v385 | ((unint64_t)*(unsigned int *)(v382 + 8 * v385 + 4) << 32);
          geo::packed_array<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>::erase((uint64_t)this + 2720, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>((uint64_t *)this + 352, *v380);
        }
      }
      ++v380;
    }
    while (v380 != v379);
  }
  float64x2_t v386 = v1033;
  float64x2_t v387 = v1034;
  if (v1033 != v1034)
  {
    int8x16_t v388 = v1033;
    do
    {
      unint64_t v389 = *v388;
      uint64_t v390 = *((void *)this + 343);
      if (v389 < (*((void *)this + 344) - v390) >> 3)
      {
        uint64_t v391 = *(void *)(v390 + 8 * v389);
        BOOL v392 = v391 && HIDWORD(*v388) == HIDWORD(v391);
        if (v392 && *((void *)this + 346) + 24 * v391 != *((void *)this + 347))
        {
          uint64_t v393 = *(void *)(*((void *)this + 349) + 8 * v391);
          unint64_t v1030 = v393 | ((unint64_t)*(unsigned int *)(v390 + 8 * v393 + 4) << 32);
          geo::packed_array<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>::erase((uint64_t)this + 2720, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>((uint64_t *)this + 352, *v388);
        }
      }
      ++v388;
    }
    while (v388 != v387);
  }
  if (v378 != v379)
  {
    int8x8_t v394 = *(int8x8_t *)((char *)this + 2904);
    if (v394)
    {
      float64x2_t v395 = v378;
LABEL_658:
      unint64_t v396 = *v395;
      uint8x8_t v397 = (uint8x8_t)vcnt_s8(v394);
      v397.i16[0] = vaddlv_u8(v397);
      if (v397.u32[0] > 1uLL)
      {
        unint64_t v398 = *v395;
        if (v396 >= *(void *)&v394) {
          unint64_t v398 = v396 % *(void *)&v394;
        }
      }
      else
      {
        unint64_t v398 = (*(void *)&v394 - 1) & v396;
      }
      float64x2_t v399 = *(void **)(*((void *)this + 362) + 8 * v398);
      if (v399)
      {
        int8x16_t v400 = (void *)*v399;
        if (*v399)
        {
          if (v397.u32[0] < 2uLL)
          {
            uint64_t v401 = *(void *)&v394 - 1;
            while (1)
            {
              uint64_t v403 = v400[1];
              if (v403 == v396)
              {
                if (v400[2] == v396) {
                  goto LABEL_678;
                }
              }
              else if ((v403 & v401) != v398)
              {
                goto LABEL_679;
              }
              int8x16_t v400 = (void *)*v400;
              if (!v400) {
                goto LABEL_679;
              }
            }
          }
          do
          {
            unint64_t v402 = v400[1];
            if (v402 == v396)
            {
              if (v400[2] == v396)
              {
LABEL_678:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 357, v400[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 362, v400[2]);
                break;
              }
            }
            else
            {
              if (v402 >= *(void *)&v394) {
                v402 %= *(void *)&v394;
              }
              if (v402 != v398) {
                break;
              }
            }
            int8x16_t v400 = (void *)*v400;
          }
          while (v400);
        }
      }
LABEL_679:
      while (++v395 != v379)
      {
        int8x8_t v394 = *(int8x8_t *)((char *)this + 2904);
        if (v394) {
          goto LABEL_658;
        }
      }
    }
  }
  if (v386 != v387)
  {
    int8x8_t v404 = *(int8x8_t *)((char *)this + 2904);
    if (v404)
    {
      int8x16_t v405 = v386;
LABEL_685:
      unint64_t v406 = *v405;
      uint8x8_t v407 = (uint8x8_t)vcnt_s8(v404);
      v407.i16[0] = vaddlv_u8(v407);
      if (v407.u32[0] > 1uLL)
      {
        unint64_t v408 = *v405;
        if (v406 >= *(void *)&v404) {
          unint64_t v408 = v406 % *(void *)&v404;
        }
      }
      else
      {
        unint64_t v408 = (*(void *)&v404 - 1) & v406;
      }
      float64x2_t v409 = *(void **)(*((void *)this + 362) + 8 * v408);
      if (v409)
      {
        float64x2_t v410 = (void *)*v409;
        if (*v409)
        {
          if (v407.u32[0] < 2uLL)
          {
            uint64_t v411 = *(void *)&v404 - 1;
            while (1)
            {
              uint64_t v413 = v410[1];
              if (v413 == v406)
              {
                if (v410[2] == v406) {
                  goto LABEL_705;
                }
              }
              else if ((v413 & v411) != v408)
              {
                goto LABEL_706;
              }
              float64x2_t v410 = (void *)*v410;
              if (!v410) {
                goto LABEL_706;
              }
            }
          }
          do
          {
            unint64_t v412 = v410[1];
            if (v412 == v406)
            {
              if (v410[2] == v406)
              {
LABEL_705:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 357, v410[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 362, v410[2]);
                break;
              }
            }
            else
            {
              if (v412 >= *(void *)&v404) {
                v412 %= *(void *)&v404;
              }
              if (v412 != v408) {
                break;
              }
            }
            float64x2_t v410 = (void *)*v410;
          }
          while (v410);
        }
      }
LABEL_706:
      while (++v405 != v387)
      {
        int8x8_t v404 = *(int8x8_t *)((char *)this + 2904);
        if (v404) {
          goto LABEL_685;
        }
      }
    }
  }
  if (v386) {
    operator delete(v386);
  }
  if (v378) {
    operator delete(v378);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 676, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 681, (uint64_t)&v1033);
  int v414 = __p;
  float v415 = v1037;
  if (__p != v1037)
  {
    float v416 = __p;
    do
    {
      unint64_t v417 = *v416;
      uint64_t v418 = *((void *)this + 689);
      if (v417 < (*((void *)this + 690) - v418) >> 3)
      {
        uint64_t v419 = *(void *)(v418 + 8 * v417);
        BOOL v420 = v419 && HIDWORD(*v416) == HIDWORD(v419);
        if (v420 && *((void *)this + 692) + 24 * v419 != *((void *)this + 693))
        {
          uint64_t v421 = *(void *)(*((void *)this + 695) + 8 * v419);
          unint64_t v1030 = v421 | ((unint64_t)*(unsigned int *)(v418 + 8 * v421 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5488, &v1030);
        }
      }
      ++v416;
    }
    while (v416 != v415);
  }
  unint64_t v422 = v1033;
  int v423 = v1034;
  if (v1033 != v1034)
  {
    uint64_t v424 = v1033;
    do
    {
      unint64_t v425 = *v424;
      uint64_t v426 = *((void *)this + 689);
      if (v425 < (*((void *)this + 690) - v426) >> 3)
      {
        uint64_t v427 = *(void *)(v426 + 8 * v425);
        BOOL v428 = v427 && HIDWORD(*v424) == HIDWORD(v427);
        if (v428 && *((void *)this + 692) + 24 * v427 != *((void *)this + 693))
        {
          uint64_t v429 = *(void *)(*((void *)this + 695) + 8 * v427);
          unint64_t v1030 = v429 | ((unint64_t)*(unsigned int *)(v426 + 8 * v429 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5488, &v1030);
        }
      }
      ++v424;
    }
    while (v424 != v423);
  }
  if (v422) {
    operator delete(v422);
  }
  if (v414) {
    operator delete(v414);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 145, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 150, (uint64_t)&v1030);
  v430 = v1033;
  uint64_t v431 = v1034;
  if (v1033 != v1034)
  {
    uint64_t v432 = v1033;
    do
    {
      unint64_t v433 = *v432;
      uint64_t v434 = *((void *)this + 158);
      if (v433 < (*((void *)this + 159) - v434) >> 3)
      {
        uint64_t v435 = *(void *)(v434 + 8 * v433);
        BOOL v436 = v435 && HIDWORD(*v432) == HIDWORD(v435);
        if (v436 && *((void *)this + 161) + 24 * v435 != *((void *)this + 162))
        {
          uint64_t v437 = *(void *)(*((void *)this + 164) + 8 * v435);
          long long __p = (void *)(v437 | ((unint64_t)*(unsigned int *)(v434 + 8 * v437 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 1240, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 167, *v432);
        }
      }
      ++v432;
    }
    while (v432 != v431);
  }
  int v438 = (unint64_t *)v1030;
  int v439 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    unsigned int v440 = (unint64_t *)v1030;
    do
    {
      unint64_t v441 = *v440;
      uint64_t v442 = *((void *)this + 158);
      if (v441 < (*((void *)this + 159) - v442) >> 3)
      {
        uint64_t v443 = *(void *)(v442 + 8 * v441);
        BOOL v444 = v443 && HIDWORD(*v440) == HIDWORD(v443);
        if (v444 && *((void *)this + 161) + 24 * v443 != *((void *)this + 162))
        {
          uint64_t v445 = *(void *)(*((void *)this + 164) + 8 * v443);
          long long __p = (void *)(v445 | ((unint64_t)*(unsigned int *)(v442 + 8 * v445 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 1240, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 167, *v440);
        }
      }
      ++v440;
    }
    while (v440 != v439);
  }
  if (v430 != v431)
  {
    int8x8_t v446 = *(int8x8_t *)((char *)this + 1424);
    if (v446)
    {
      uint64_t v447 = v430;
LABEL_764:
      unint64_t v448 = *v447;
      uint8x8_t v449 = (uint8x8_t)vcnt_s8(v446);
      v449.i16[0] = vaddlv_u8(v449);
      if (v449.u32[0] > 1uLL)
      {
        unint64_t v450 = *v447;
        if (v448 >= *(void *)&v446) {
          unint64_t v450 = v448 % *(void *)&v446;
        }
      }
      else
      {
        unint64_t v450 = (*(void *)&v446 - 1) & v448;
      }
      int v451 = *(float ***)(*((void *)this + 177) + 8 * v450);
      if (v451)
      {
        v452 = *v451;
        if (*v451)
        {
          if (v449.u32[0] < 2uLL)
          {
            uint64_t v453 = *(void *)&v446 - 1;
            while (1)
            {
              uint64_t v455 = *((void *)v452 + 1);
              if (v455 == v448)
              {
                if (*((void *)v452 + 2) == v448) {
                  goto LABEL_784;
                }
              }
              else if ((v455 & v453) != v450)
              {
                goto LABEL_789;
              }
              v452 = *(float **)v452;
              if (!v452) {
                goto LABEL_789;
              }
            }
          }
          do
          {
            unint64_t v454 = *((void *)v452 + 1);
            if (v454 == v448)
            {
              if (*((void *)v452 + 2) == v448)
              {
LABEL_784:
                unint64_t v456 = std::__hash_table<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::__unordered_map_hasher<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,md::StyleCacheKeyHasher,std::equal_to<md::StyleCacheKey>,true>,std::__unordered_map_equal<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<md::StyleCacheKey>,md::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>>>::find<md::StyleCacheKey>((void *)this + 172, v452 + 6);
                if (v456)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 172, v456);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v448 = *((void *)v452 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 177, v448);
                break;
              }
            }
            else
            {
              if (v454 >= *(void *)&v446) {
                v454 %= *(void *)&v446;
              }
              if (v454 != v450) {
                break;
              }
            }
            v452 = *(float **)v452;
          }
          while (v452);
        }
      }
LABEL_789:
      while (++v447 != v431)
      {
        int8x8_t v446 = *(int8x8_t *)((char *)this + 1424);
        if (v446) {
          goto LABEL_764;
        }
      }
    }
  }
  if (v438 != v439)
  {
    int8x8_t v457 = *(int8x8_t *)((char *)this + 1424);
    if (v457)
    {
      v458 = v438;
LABEL_795:
      unint64_t v459 = *v458;
      uint8x8_t v460 = (uint8x8_t)vcnt_s8(v457);
      v460.i16[0] = vaddlv_u8(v460);
      if (v460.u32[0] > 1uLL)
      {
        unint64_t v461 = *v458;
        if (v459 >= *(void *)&v457) {
          unint64_t v461 = v459 % *(void *)&v457;
        }
      }
      else
      {
        unint64_t v461 = (*(void *)&v457 - 1) & v459;
      }
      BOOL v462 = *(float ***)(*((void *)this + 177) + 8 * v461);
      if (v462)
      {
        int v463 = *v462;
        if (*v462)
        {
          if (v460.u32[0] < 2uLL)
          {
            uint64_t v464 = *(void *)&v457 - 1;
            while (1)
            {
              uint64_t v466 = *((void *)v463 + 1);
              if (v466 == v459)
              {
                if (*((void *)v463 + 2) == v459) {
                  goto LABEL_815;
                }
              }
              else if ((v466 & v464) != v461)
              {
                goto LABEL_820;
              }
              int v463 = *(float **)v463;
              if (!v463) {
                goto LABEL_820;
              }
            }
          }
          do
          {
            unint64_t v465 = *((void *)v463 + 1);
            if (v465 == v459)
            {
              if (*((void *)v463 + 2) == v459)
              {
LABEL_815:
                float v467 = std::__hash_table<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::__unordered_map_hasher<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,md::StyleCacheKeyHasher,std::equal_to<md::StyleCacheKey>,true>,std::__unordered_map_equal<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<md::StyleCacheKey>,md::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>>>::find<md::StyleCacheKey>((void *)this + 172, v463 + 6);
                if (v467)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 172, v467);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v459 = *((void *)v463 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 177, v459);
                break;
              }
            }
            else
            {
              if (v465 >= *(void *)&v457) {
                v465 %= *(void *)&v457;
              }
              if (v465 != v461) {
                break;
              }
            }
            int v463 = *(float **)v463;
          }
          while (v463);
        }
      }
LABEL_820:
      while (++v458 != v439)
      {
        int8x8_t v457 = *(int8x8_t *)((char *)this + 1424);
        if (v457) {
          goto LABEL_795;
        }
      }
    }
  }
  if (v438) {
    operator delete(v438);
  }
  if (v430) {
    operator delete(v430);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 182, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 187, (uint64_t)&v1033);
  uint64_t v468 = (unint64_t *)__p;
  v469 = v1037;
  if (__p != v1037)
  {
    float v470 = (unint64_t *)__p;
    do
    {
      unint64_t v471 = *v470;
      uint64_t v472 = *((void *)this + 195);
      if (v471 < (*((void *)this + 196) - v472) >> 3)
      {
        uint64_t v473 = *(void *)(v472 + 8 * v471);
        BOOL v474 = v473 && HIDWORD(*v470) == HIDWORD(v473);
        if (v474 && *((void *)this + 198) + 20 * v473 != *((void *)this + 199))
        {
          uint64_t v475 = *(void *)(*((void *)this + 201) + 8 * v473);
          unint64_t v1030 = v475 | ((unint64_t)*(unsigned int *)(v472 + 8 * v475 + 4) << 32);
          geo::packed_array<md::CachedKey<md::StyleCacheKey>,geo::handle<md::CachedKey<md::StyleCacheKey>>>::erase((uint64_t)this + 1536, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleCacheKey>>>((uint64_t *)this + 204, *v470);
        }
      }
      ++v470;
    }
    while (v470 != v469);
  }
  int v476 = v1033;
  float v477 = v1034;
  if (v1033 != v1034)
  {
    float v478 = v1033;
    do
    {
      unint64_t v479 = *v478;
      uint64_t v480 = *((void *)this + 195);
      if (v479 < (*((void *)this + 196) - v480) >> 3)
      {
        uint64_t v481 = *(void *)(v480 + 8 * v479);
        BOOL v482 = v481 && HIDWORD(*v478) == HIDWORD(v481);
        if (v482 && *((void *)this + 198) + 20 * v481 != *((void *)this + 199))
        {
          uint64_t v483 = *(void *)(*((void *)this + 201) + 8 * v481);
          unint64_t v1030 = v483 | ((unint64_t)*(unsigned int *)(v480 + 8 * v483 + 4) << 32);
          geo::packed_array<md::CachedKey<md::StyleCacheKey>,geo::handle<md::CachedKey<md::StyleCacheKey>>>::erase((uint64_t)this + 1536, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleCacheKey>>>((uint64_t *)this + 204, *v478);
        }
      }
      ++v478;
    }
    while (v478 != v477);
  }
  if (v468 != v469)
  {
    int8x8_t v484 = *(int8x8_t *)((char *)this + 1720);
    if (v484)
    {
      unint64_t v485 = v468;
LABEL_852:
      unint64_t v486 = *v485;
      uint8x8_t v487 = (uint8x8_t)vcnt_s8(v484);
      v487.i16[0] = vaddlv_u8(v487);
      if (v487.u32[0] > 1uLL)
      {
        unint64_t v488 = *v485;
        if (v486 >= *(void *)&v484) {
          unint64_t v488 = v486 % *(void *)&v484;
        }
      }
      else
      {
        unint64_t v488 = (*(void *)&v484 - 1) & v486;
      }
      double v489 = *(void **)(*((void *)this + 214) + 8 * v488);
      if (v489)
      {
        double v490 = (void *)*v489;
        if (*v489)
        {
          if (v487.u32[0] < 2uLL)
          {
            uint64_t v491 = *(void *)&v484 - 1;
            while (1)
            {
              uint64_t v493 = v490[1];
              if (v493 == v486)
              {
                if (v490[2] == v486) {
                  goto LABEL_872;
                }
              }
              else if ((v493 & v491) != v488)
              {
                goto LABEL_873;
              }
              double v490 = (void *)*v490;
              if (!v490) {
                goto LABEL_873;
              }
            }
          }
          do
          {
            unint64_t v492 = v490[1];
            if (v492 == v486)
            {
              if (v490[2] == v486)
              {
LABEL_872:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 209, v490[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 214, v490[2]);
                break;
              }
            }
            else
            {
              if (v492 >= *(void *)&v484) {
                v492 %= *(void *)&v484;
              }
              if (v492 != v488) {
                break;
              }
            }
            double v490 = (void *)*v490;
          }
          while (v490);
        }
      }
LABEL_873:
      while (++v485 != v469)
      {
        int8x8_t v484 = *(int8x8_t *)((char *)this + 1720);
        if (v484) {
          goto LABEL_852;
        }
      }
    }
  }
  if (v476 != v477)
  {
    int8x8_t v494 = *(int8x8_t *)((char *)this + 1720);
    if (v494)
    {
      float64x2_t v495 = v476;
LABEL_879:
      unint64_t v496 = *v495;
      uint8x8_t v497 = (uint8x8_t)vcnt_s8(v494);
      v497.i16[0] = vaddlv_u8(v497);
      if (v497.u32[0] > 1uLL)
      {
        unint64_t v498 = *v495;
        if (v496 >= *(void *)&v494) {
          unint64_t v498 = v496 % *(void *)&v494;
        }
      }
      else
      {
        unint64_t v498 = (*(void *)&v494 - 1) & v496;
      }
      long long v499 = *(void **)(*((void *)this + 214) + 8 * v498);
      if (v499)
      {
        long long v500 = (void *)*v499;
        if (*v499)
        {
          if (v497.u32[0] < 2uLL)
          {
            uint64_t v501 = *(void *)&v494 - 1;
            while (1)
            {
              uint64_t v503 = v500[1];
              if (v503 == v496)
              {
                if (v500[2] == v496) {
                  goto LABEL_899;
                }
              }
              else if ((v503 & v501) != v498)
              {
                goto LABEL_900;
              }
              long long v500 = (void *)*v500;
              if (!v500) {
                goto LABEL_900;
              }
            }
          }
          do
          {
            unint64_t v502 = v500[1];
            if (v502 == v496)
            {
              if (v500[2] == v496)
              {
LABEL_899:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 209, v500[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 214, v500[2]);
                break;
              }
            }
            else
            {
              if (v502 >= *(void *)&v494) {
                v502 %= *(void *)&v494;
              }
              if (v502 != v498) {
                break;
              }
            }
            long long v500 = (void *)*v500;
          }
          while (v500);
        }
      }
LABEL_900:
      while (++v495 != v477)
      {
        int8x8_t v494 = *(int8x8_t *)((char *)this + 1720);
        if (v494) {
          goto LABEL_879;
        }
      }
    }
  }
  if (v476) {
    operator delete(v476);
  }
  if (v468) {
    operator delete(v468);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 784, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 789, (uint64_t)&v1030);
  float v504 = v1033;
  float v505 = v1034;
  if (v1033 != v1034)
  {
    float v506 = v1033;
    do
    {
      unint64_t v507 = *v506;
      uint64_t v508 = *((void *)this + 797);
      if (v507 < (*((void *)this + 798) - v508) >> 3)
      {
        uint64_t v509 = *(void *)(v508 + 8 * v507);
        BOOL v510 = v509 && HIDWORD(*v506) == HIDWORD(v509);
        if (v510 && *((void *)this + 800) + 24 * v509 != *((void *)this + 801))
        {
          uint64_t v511 = *(void *)(*((void *)this + 803) + 8 * v509);
          long long __p = (void *)(v511 | ((unint64_t)*(unsigned int *)(v508 + 8 * v511 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6352, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 806, *v506);
        }
      }
      ++v506;
    }
    while (v506 != v505);
  }
  v512 = (unint64_t *)v1030;
  float v513 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    BOOL v514 = (unint64_t *)v1030;
    do
    {
      unint64_t v515 = *v514;
      uint64_t v516 = *((void *)this + 797);
      if (v515 < (*((void *)this + 798) - v516) >> 3)
      {
        uint64_t v517 = *(void *)(v516 + 8 * v515);
        BOOL v518 = v517 && HIDWORD(*v514) == HIDWORD(v517);
        if (v518 && *((void *)this + 800) + 24 * v517 != *((void *)this + 801))
        {
          uint64_t v519 = *(void *)(*((void *)this + 803) + 8 * v517);
          long long __p = (void *)(v519 | ((unint64_t)*(unsigned int *)(v516 + 8 * v519 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6352, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 806, *v514);
        }
      }
      ++v514;
    }
    while (v514 != v513);
  }
  if (v504 != v505)
  {
    int8x8_t v520 = *(int8x8_t *)((char *)this + 6536);
    if (v520)
    {
      v521 = v504;
LABEL_932:
      unint64_t v522 = *v521;
      uint8x8_t v523 = (uint8x8_t)vcnt_s8(v520);
      v523.i16[0] = vaddlv_u8(v523);
      if (v523.u32[0] > 1uLL)
      {
        unint64_t v524 = *v521;
        if (v522 >= *(void *)&v520) {
          unint64_t v524 = v522 % *(void *)&v520;
        }
      }
      else
      {
        unint64_t v524 = (*(void *)&v520 - 1) & v522;
      }
      char v525 = *(void **)(*((void *)this + 816) + 8 * v524);
      if (v525)
      {
        unint64_t v526 = (void *)*v525;
        if (*v525)
        {
          if (v523.u32[0] < 2uLL)
          {
            uint64_t v527 = *(void *)&v520 - 1;
            while (1)
            {
              uint64_t v529 = v526[1];
              if (v529 == v522)
              {
                if (v526[2] == v522) {
                  goto LABEL_952;
                }
              }
              else if ((v529 & v527) != v524)
              {
                goto LABEL_956;
              }
              unint64_t v526 = (void *)*v526;
              if (!v526) {
                goto LABEL_956;
              }
            }
          }
          do
          {
            unint64_t v528 = v526[1];
            if (v528 == v522)
            {
              if (v526[2] == v522)
              {
LABEL_952:
                BOOL v530 = (void *)std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((void *)this + 811, (uint64_t)(v526 + 3));
                if (v530)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 811, v530);
                  if (__p) {
                    operator delete(__p);
                  }
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 816, v526[2]);
                break;
              }
            }
            else
            {
              if (v528 >= *(void *)&v520) {
                v528 %= *(void *)&v520;
              }
              if (v528 != v524) {
                break;
              }
            }
            unint64_t v526 = (void *)*v526;
          }
          while (v526);
        }
      }
LABEL_956:
      while (++v521 != v505)
      {
        int8x8_t v520 = *(int8x8_t *)((char *)this + 6536);
        if (v520) {
          goto LABEL_932;
        }
      }
    }
  }
  if (v512 != v513)
  {
    int8x8_t v531 = *(int8x8_t *)((char *)this + 6536);
    if (v531)
    {
      float v532 = v512;
LABEL_962:
      unint64_t v533 = *v532;
      uint8x8_t v534 = (uint8x8_t)vcnt_s8(v531);
      v534.i16[0] = vaddlv_u8(v534);
      if (v534.u32[0] > 1uLL)
      {
        unint64_t v535 = *v532;
        if (v533 >= *(void *)&v531) {
          unint64_t v535 = v533 % *(void *)&v531;
        }
      }
      else
      {
        unint64_t v535 = (*(void *)&v531 - 1) & v533;
      }
      float v536 = *(void **)(*((void *)this + 816) + 8 * v535);
      if (v536)
      {
        float v537 = (void *)*v536;
        if (*v536)
        {
          if (v534.u32[0] < 2uLL)
          {
            uint64_t v538 = *(void *)&v531 - 1;
            while (1)
            {
              uint64_t v540 = v537[1];
              if (v540 == v533)
              {
                if (v537[2] == v533) {
                  goto LABEL_982;
                }
              }
              else if ((v540 & v538) != v535)
              {
                goto LABEL_986;
              }
              float v537 = (void *)*v537;
              if (!v537) {
                goto LABEL_986;
              }
            }
          }
          do
          {
            unint64_t v539 = v537[1];
            if (v539 == v533)
            {
              if (v537[2] == v533)
              {
LABEL_982:
                float v541 = (void *)std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((void *)this + 811, (uint64_t)(v537 + 3));
                if (v541)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 811, v541);
                  if (__p) {
                    operator delete(__p);
                  }
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 816, v537[2]);
                break;
              }
            }
            else
            {
              if (v539 >= *(void *)&v531) {
                v539 %= *(void *)&v531;
              }
              if (v539 != v535) {
                break;
              }
            }
            float v537 = (void *)*v537;
          }
          while (v537);
        }
      }
LABEL_986:
      while (++v532 != v513)
      {
        int8x8_t v531 = *(int8x8_t *)((char *)this + 6536);
        if (v531) {
          goto LABEL_962;
        }
      }
    }
  }
  if (v512) {
    operator delete(v512);
  }
  if (v504) {
    operator delete(v504);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 698, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 703, (uint64_t)&v1033);
  float v542 = __p;
  BOOL v543 = v1037;
  if (__p != v1037)
  {
    float v544 = (unint64_t *)__p;
    do
    {
      unint64_t v545 = *v544;
      uint64_t v546 = *((void *)this + 711);
      if (v545 < (*((void *)this + 712) - v546) >> 3)
      {
        uint64_t v547 = *(void *)(v546 + 8 * v545);
        BOOL v548 = v547 && HIDWORD(*v544) == HIDWORD(v547);
        if (v548 && *((void *)this + 714) + 24 * v547 != *((void *)this + 715))
        {
          uint64_t v549 = *(void *)(*((void *)this + 717) + 8 * v547);
          unint64_t v1030 = v549 | ((unint64_t)*(unsigned int *)(v546 + 8 * v549 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5664, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 720, *v544);
        }
      }
      ++v544;
    }
    while (v544 != v543);
  }
  unsigned int v550 = v1033;
  float v551 = v1034;
  if (v1033 != v1034)
  {
    float v552 = v1033;
    do
    {
      unint64_t v553 = *v552;
      uint64_t v554 = *((void *)this + 711);
      if (v553 < (*((void *)this + 712) - v554) >> 3)
      {
        uint64_t v555 = *(void *)(v554 + 8 * v553);
        BOOL v556 = v555 && HIDWORD(*v552) == HIDWORD(v555);
        if (v556 && *((void *)this + 714) + 24 * v555 != *((void *)this + 715))
        {
          uint64_t v557 = *(void *)(*((void *)this + 717) + 8 * v555);
          unint64_t v1030 = v557 | ((unint64_t)*(unsigned int *)(v554 + 8 * v557 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5664, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 720, *v552);
        }
      }
      ++v552;
    }
    while (v552 != v551);
  }
  if (v550) {
    operator delete(v550);
  }
  if (v542) {
    operator delete(v542);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 991, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 996, (uint64_t)&v1030);
  float16x4_t v558 = v1033;
  float v559 = v1034;
  if (v1033 != v1034)
  {
    BOOL v560 = v1033;
    do
    {
      unint64_t v561 = *v560;
      uint64_t v562 = *((void *)this + 1004);
      if (v561 < (*((void *)this + 1005) - v562) >> 3)
      {
        uint64_t v563 = *(void *)(v562 + 8 * v561);
        BOOL v564 = v563 && HIDWORD(*v560) == HIDWORD(v563);
        if (v564 && *((void *)this + 1007) + 24 * v563 != *((void *)this + 1008))
        {
          uint64_t v565 = *(void *)(*((void *)this + 1010) + 8 * v563);
          long long __p = (void *)(v565 | ((unint64_t)*(unsigned int *)(v562 + 8 * v565 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 8008, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 1013, *v560);
        }
      }
      ++v560;
    }
    while (v560 != v559);
  }
  float v566 = (unint64_t *)v1030;
  float v567 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    float v568 = (unint64_t *)v1030;
    do
    {
      unint64_t v569 = *v568;
      uint64_t v570 = *((void *)this + 1004);
      if (v569 < (*((void *)this + 1005) - v570) >> 3)
      {
        uint64_t v571 = *(void *)(v570 + 8 * v569);
        BOOL v572 = v571 && HIDWORD(*v568) == HIDWORD(v571);
        if (v572 && *((void *)this + 1007) + 24 * v571 != *((void *)this + 1008))
        {
          uint64_t v573 = *(void *)(*((void *)this + 1010) + 8 * v571);
          long long __p = (void *)(v573 | ((unint64_t)*(unsigned int *)(v570 + 8 * v573 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 8008, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 1013, *v568);
        }
      }
      ++v568;
    }
    while (v568 != v567);
  }
  if (v558 != v559)
  {
    int8x8_t v574 = *(int8x8_t *)((char *)this + 0x2000);
    if (v574)
    {
      float v575 = v558;
LABEL_1044:
      unint64_t v576 = *v575;
      uint8x8_t v577 = (uint8x8_t)vcnt_s8(v574);
      v577.i16[0] = vaddlv_u8(v577);
      if (v577.u32[0] > 1uLL)
      {
        unint64_t v578 = *v575;
        if (v576 >= *(void *)&v574) {
          unint64_t v578 = v576 % *(void *)&v574;
        }
      }
      else
      {
        unint64_t v578 = (*(void *)&v574 - 1) & v576;
      }
      float v579 = *(float ***)(*((void *)this + 1023) + 8 * v578);
      if (v579)
      {
        float v580 = *v579;
        if (*v579)
        {
          if (v577.u32[0] < 2uLL)
          {
            uint64_t v581 = *(void *)&v574 - 1;
            while (1)
            {
              uint64_t v583 = *((void *)v580 + 1);
              if (v583 == v576)
              {
                if (*((void *)v580 + 2) == v576) {
                  goto LABEL_1064;
                }
              }
              else if ((v583 & v581) != v578)
              {
                goto LABEL_1069;
              }
              float v580 = *(float **)v580;
              if (!v580) {
                goto LABEL_1069;
              }
            }
          }
          do
          {
            unint64_t v582 = *((void *)v580 + 1);
            if (v582 == v576)
            {
              if (*((void *)v580 + 2) == v576)
              {
LABEL_1064:
                BOOL v584 = std::__hash_table<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::__unordered_map_hasher<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,md::ColorCorrectionKeyHasher,std::equal_to<md::ColorCorrectionKey>,true>,std::__unordered_map_equal<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<md::ColorCorrectionKey>,md::ColorCorrectionKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>>>::find<md::ColorCorrectionKey>((void *)this + 1018, v580 + 6);
                if (v584)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 1018, v584);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v576 = *((void *)v580 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 1023, v576);
                break;
              }
            }
            else
            {
              if (v582 >= *(void *)&v574) {
                v582 %= *(void *)&v574;
              }
              if (v582 != v578) {
                break;
              }
            }
            float v580 = *(float **)v580;
          }
          while (v580);
        }
      }
LABEL_1069:
      while (++v575 != v559)
      {
        int8x8_t v574 = *(int8x8_t *)((char *)this + 0x2000);
        if (v574) {
          goto LABEL_1044;
        }
      }
    }
  }
  if (v566 != v567)
  {
    int8x8_t v585 = *(int8x8_t *)((char *)this + 0x2000);
    if (v585)
    {
      float v586 = v566;
LABEL_1075:
      unint64_t v587 = *v586;
      uint8x8_t v588 = (uint8x8_t)vcnt_s8(v585);
      v588.i16[0] = vaddlv_u8(v588);
      if (v588.u32[0] > 1uLL)
      {
        unint64_t v589 = *v586;
        if (v587 >= *(void *)&v585) {
          unint64_t v589 = v587 % *(void *)&v585;
        }
      }
      else
      {
        unint64_t v589 = (*(void *)&v585 - 1) & v587;
      }
      float v590 = *(float ***)(*((void *)this + 1023) + 8 * v589);
      if (v590)
      {
        float v591 = *v590;
        if (*v590)
        {
          if (v588.u32[0] < 2uLL)
          {
            uint64_t v592 = *(void *)&v585 - 1;
            while (1)
            {
              uint64_t v594 = *((void *)v591 + 1);
              if (v594 == v587)
              {
                if (*((void *)v591 + 2) == v587) {
                  goto LABEL_1095;
                }
              }
              else if ((v594 & v592) != v589)
              {
                goto LABEL_1100;
              }
              float v591 = *(float **)v591;
              if (!v591) {
                goto LABEL_1100;
              }
            }
          }
          do
          {
            unint64_t v593 = *((void *)v591 + 1);
            if (v593 == v587)
            {
              if (*((void *)v591 + 2) == v587)
              {
LABEL_1095:
                float v595 = std::__hash_table<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::__unordered_map_hasher<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,md::ColorCorrectionKeyHasher,std::equal_to<md::ColorCorrectionKey>,true>,std::__unordered_map_equal<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<md::ColorCorrectionKey>,md::ColorCorrectionKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>>>::find<md::ColorCorrectionKey>((void *)this + 1018, v591 + 6);
                if (v595)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 1018, v595);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v587 = *((void *)v591 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 1023, v587);
                break;
              }
            }
            else
            {
              if (v593 >= *(void *)&v585) {
                v593 %= *(void *)&v585;
              }
              if (v593 != v589) {
                break;
              }
            }
            float v591 = *(float **)v591;
          }
          while (v591);
        }
      }
LABEL_1100:
      while (++v586 != v567)
      {
        int8x8_t v585 = *(int8x8_t *)((char *)this + 0x2000);
        if (v585) {
          goto LABEL_1075;
        }
      }
    }
  }
  if (v566) {
    operator delete(v566);
  }
  if (v558) {
    operator delete(v558);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1028, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 1033, (uint64_t)&v1030);
  BOOL v596 = v1033;
  unsigned int v597 = v1034;
  if (v1033 != v1034)
  {
    BOOL v598 = v1033;
    do
    {
      unint64_t v599 = *v598;
      uint64_t v600 = *((void *)this + 1041);
      if (v599 < (*((void *)this + 1042) - v600) >> 3)
      {
        uint64_t v601 = *(void *)(v600 + 8 * v599);
        BOOL v602 = v601 && HIDWORD(*v598) == HIDWORD(v601);
        if (v602 && *((void *)this + 1044) + 24 * v601 != *((void *)this + 1045))
        {
          uint64_t v603 = *(void *)(*((void *)this + 1047) + 8 * v601);
          long long __p = (void *)(v603 | ((unint64_t)*(unsigned int *)(v600 + 8 * v603 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 8304, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 1050, *v598);
        }
      }
      ++v598;
    }
    while (v598 != v597);
  }
  unsigned int v604 = (unint64_t *)v1030;
  v605 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    v606 = (unint64_t *)v1030;
    do
    {
      unint64_t v607 = *v606;
      uint64_t v608 = *((void *)this + 1041);
      if (v607 < (*((void *)this + 1042) - v608) >> 3)
      {
        uint64_t v609 = *(void *)(v608 + 8 * v607);
        BOOL v610 = v609 && HIDWORD(*v606) == HIDWORD(v609);
        if (v610 && *((void *)this + 1044) + 24 * v609 != *((void *)this + 1045))
        {
          uint64_t v611 = *(void *)(*((void *)this + 1047) + 8 * v609);
          long long __p = (void *)(v611 | ((unint64_t)*(unsigned int *)(v608 + 8 * v611 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 8304, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 1050, *v606);
        }
      }
      ++v606;
    }
    while (v606 != v605);
  }
  if (v596 != v597)
  {
    int8x8_t v612 = *(int8x8_t *)((char *)this + 8488);
    if (v612)
    {
      int v613 = v596;
LABEL_1132:
      unint64_t v614 = *v613;
      uint8x8_t v615 = (uint8x8_t)vcnt_s8(v612);
      v615.i16[0] = vaddlv_u8(v615);
      if (v615.u32[0] > 1uLL)
      {
        unint64_t v616 = *v613;
        if (v614 >= *(void *)&v612) {
          unint64_t v616 = v614 % *(void *)&v612;
        }
      }
      else
      {
        unint64_t v616 = (*(void *)&v612 - 1) & v614;
      }
      char v617 = *(float ***)(*((void *)this + 1060) + 8 * v616);
      if (v617)
      {
        double v618 = *v617;
        if (*v617)
        {
          if (v615.u32[0] < 2uLL)
          {
            uint64_t v619 = *(void *)&v612 - 1;
            while (1)
            {
              uint64_t v621 = *((void *)v618 + 1);
              if (v621 == v614)
              {
                if (*((void *)v618 + 2) == v614) {
                  goto LABEL_1152;
                }
              }
              else if ((v621 & v619) != v616)
              {
                goto LABEL_1157;
              }
              double v618 = *(float **)v618;
              if (!v618) {
                goto LABEL_1157;
              }
            }
          }
          do
          {
            unint64_t v620 = *((void *)v618 + 1);
            if (v620 == v614)
            {
              if (*((void *)v618 + 2) == v614)
              {
LABEL_1152:
                __int32 v622 = std::__hash_table<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::__unordered_map_hasher<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,md::StyleSSAOKeyHasher,std::equal_to<md::StyleSSAOKey>,true>,std::__unordered_map_equal<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<md::StyleSSAOKey>,md::StyleSSAOKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>>>::find<md::StyleSSAOKey>((void *)this + 1055, v618 + 6);
                if (v622)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 1055, v622);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v614 = *((void *)v618 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 1060, v614);
                break;
              }
            }
            else
            {
              if (v620 >= *(void *)&v612) {
                v620 %= *(void *)&v612;
              }
              if (v620 != v616) {
                break;
              }
            }
            double v618 = *(float **)v618;
          }
          while (v618);
        }
      }
LABEL_1157:
      while (++v613 != v597)
      {
        int8x8_t v612 = *(int8x8_t *)((char *)this + 8488);
        if (v612) {
          goto LABEL_1132;
        }
      }
    }
  }
  if (v604 != v605)
  {
    int8x8_t v623 = *(int8x8_t *)((char *)this + 8488);
    if (v623)
    {
      float v624 = v604;
LABEL_1163:
      unint64_t v625 = *v624;
      uint8x8_t v626 = (uint8x8_t)vcnt_s8(v623);
      v626.i16[0] = vaddlv_u8(v626);
      if (v626.u32[0] > 1uLL)
      {
        unint64_t v627 = *v624;
        if (v625 >= *(void *)&v623) {
          unint64_t v627 = v625 % *(void *)&v623;
        }
      }
      else
      {
        unint64_t v627 = (*(void *)&v623 - 1) & v625;
      }
      v628 = *(float ***)(*((void *)this + 1060) + 8 * v627);
      if (v628)
      {
        float64x2_t v629 = *v628;
        if (*v628)
        {
          if (v626.u32[0] < 2uLL)
          {
            uint64_t v630 = *(void *)&v623 - 1;
            while (1)
            {
              uint64_t v632 = *((void *)v629 + 1);
              if (v632 == v625)
              {
                if (*((void *)v629 + 2) == v625) {
                  goto LABEL_1183;
                }
              }
              else if ((v632 & v630) != v627)
              {
                goto LABEL_1188;
              }
              float64x2_t v629 = *(float **)v629;
              if (!v629) {
                goto LABEL_1188;
              }
            }
          }
          do
          {
            unint64_t v631 = *((void *)v629 + 1);
            if (v631 == v625)
            {
              if (*((void *)v629 + 2) == v625)
              {
LABEL_1183:
                float64x2_t v633 = std::__hash_table<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::__unordered_map_hasher<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,md::StyleSSAOKeyHasher,std::equal_to<md::StyleSSAOKey>,true>,std::__unordered_map_equal<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<md::StyleSSAOKey>,md::StyleSSAOKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>>>::find<md::StyleSSAOKey>((void *)this + 1055, v629 + 6);
                if (v633)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 1055, v633);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v625 = *((void *)v629 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 1060, v625);
                break;
              }
            }
            else
            {
              if (v631 >= *(void *)&v623) {
                v631 %= *(void *)&v623;
              }
              if (v631 != v627) {
                break;
              }
            }
            float64x2_t v629 = *(float **)v629;
          }
          while (v629);
        }
      }
LABEL_1188:
      while (++v624 != v605)
      {
        int8x8_t v623 = *(int8x8_t *)((char *)this + 8488);
        if (v623) {
          goto LABEL_1163;
        }
      }
    }
  }
  if (v604) {
    operator delete(v604);
  }
  if (v596) {
    operator delete(v596);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 514, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 519, (uint64_t)&v1033);
  long long v634 = __p;
  v635 = v1037;
  if (__p != v1037)
  {
    v636 = (unint64_t *)__p;
    do
    {
      unint64_t v637 = *v636;
      uint64_t v638 = *((void *)this + 527);
      if (v637 < (*((void *)this + 528) - v638) >> 3)
      {
        uint64_t v639 = *(void *)(v638 + 8 * v637);
        BOOL v640 = v639 && HIDWORD(*v636) == HIDWORD(v639);
        if (v640 && *((void *)this + 530) + 24 * v639 != *((void *)this + 531))
        {
          uint64_t v641 = *(void *)(*((void *)this + 533) + 8 * v639);
          unint64_t v1030 = v641 | ((unint64_t)*(unsigned int *)(v638 + 8 * v641 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4192, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 536, *v636);
        }
      }
      ++v636;
    }
    while (v636 != v635);
  }
  double v642 = v1033;
  v643 = v1034;
  if (v1033 != v1034)
  {
    double v644 = v1033;
    do
    {
      unint64_t v645 = *v644;
      uint64_t v646 = *((void *)this + 527);
      if (v645 < (*((void *)this + 528) - v646) >> 3)
      {
        uint64_t v647 = *(void *)(v646 + 8 * v645);
        BOOL v648 = v647 && HIDWORD(*v644) == HIDWORD(v647);
        if (v648 && *((void *)this + 530) + 24 * v647 != *((void *)this + 531))
        {
          uint64_t v649 = *(void *)(*((void *)this + 533) + 8 * v647);
          unint64_t v1030 = v649 | ((unint64_t)*(unsigned int *)(v646 + 8 * v649 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4192, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 536, *v644);
        }
      }
      ++v644;
    }
    while (v644 != v643);
  }
  if (v642) {
    operator delete(v642);
  }
  if (v634) {
    operator delete(v634);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 541, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 546, (uint64_t)&v1033);
  double v650 = __p;
  long long v651 = v1037;
  if (__p != v1037)
  {
    long long v652 = (unint64_t *)__p;
    do
    {
      unint64_t v653 = *v652;
      uint64_t v654 = *((void *)this + 554);
      if (v653 < (*((void *)this + 555) - v654) >> 3)
      {
        uint64_t v655 = *(void *)(v654 + 8 * v653);
        BOOL v656 = v655 && HIDWORD(*v652) == HIDWORD(v655);
        if (v656 && *((void *)this + 557) + 24 * v655 != *((void *)this + 558))
        {
          uint64_t v657 = *(void *)(*((void *)this + 560) + 8 * v655);
          unint64_t v1030 = v657 | ((unint64_t)*(unsigned int *)(v654 + 8 * v657 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4408, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 563, *v652);
        }
      }
      ++v652;
    }
    while (v652 != v651);
  }
  float64x2_t v658 = v1033;
  long long v659 = v1034;
  if (v1033 != v1034)
  {
    float64x2_t v660 = v1033;
    do
    {
      unint64_t v661 = *v660;
      uint64_t v662 = *((void *)this + 554);
      if (v661 < (*((void *)this + 555) - v662) >> 3)
      {
        uint64_t v663 = *(void *)(v662 + 8 * v661);
        BOOL v664 = v663 && HIDWORD(*v660) == HIDWORD(v663);
        if (v664 && *((void *)this + 557) + 24 * v663 != *((void *)this + 558))
        {
          uint64_t v665 = *(void *)(*((void *)this + 560) + 8 * v663);
          unint64_t v1030 = v665 | ((unint64_t)*(unsigned int *)(v662 + 8 * v665 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4408, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 563, *v660);
        }
      }
      ++v660;
    }
    while (v660 != v659);
  }
  if (v658) {
    operator delete(v658);
  }
  if (v650) {
    operator delete(v650);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 568, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 573, (uint64_t)&v1033);
  v666 = __p;
  v667 = v1037;
  if (__p != v1037)
  {
    v668 = (unint64_t *)__p;
    do
    {
      unint64_t v669 = *v668;
      uint64_t v670 = *((void *)this + 581);
      if (v669 < (*((void *)this + 582) - v670) >> 3)
      {
        uint64_t v671 = *(void *)(v670 + 8 * v669);
        BOOL v672 = v671 && HIDWORD(*v668) == HIDWORD(v671);
        if (v672 && *((void *)this + 584) + 24 * v671 != *((void *)this + 585))
        {
          uint64_t v673 = *(void *)(*((void *)this + 587) + 8 * v671);
          unint64_t v1030 = v673 | ((unint64_t)*(unsigned int *)(v670 + 8 * v673 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4624, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 590, *v668);
        }
      }
      ++v668;
    }
    while (v668 != v667);
  }
  v674 = v1033;
  v675 = v1034;
  if (v1033 != v1034)
  {
    v676 = v1033;
    do
    {
      unint64_t v677 = *v676;
      uint64_t v678 = *((void *)this + 581);
      if (v677 < (*((void *)this + 582) - v678) >> 3)
      {
        uint64_t v679 = *(void *)(v678 + 8 * v677);
        BOOL v680 = v679 && HIDWORD(*v676) == HIDWORD(v679);
        if (v680 && *((void *)this + 584) + 24 * v679 != *((void *)this + 585))
        {
          uint64_t v681 = *(void *)(*((void *)this + 587) + 8 * v679);
          unint64_t v1030 = v681 | ((unint64_t)*(unsigned int *)(v678 + 8 * v681 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4624, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 590, *v676);
        }
      }
      ++v676;
    }
    while (v676 != v675);
  }
  if (v674) {
    operator delete(v674);
  }
  if (v666) {
    operator delete(v666);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 595, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 600, (uint64_t)&v1033);
  v682 = __p;
  v683 = v1037;
  if (__p != v1037)
  {
    v684 = (unint64_t *)__p;
    do
    {
      unint64_t v685 = *v684;
      uint64_t v686 = *((void *)this + 608);
      if (v685 < (*((void *)this + 609) - v686) >> 3)
      {
        uint64_t v687 = *(void *)(v686 + 8 * v685);
        BOOL v688 = v687 && HIDWORD(*v684) == HIDWORD(v687);
        if (v688 && *((void *)this + 611) + 24 * v687 != *((void *)this + 612))
        {
          uint64_t v689 = *(void *)(*((void *)this + 614) + 8 * v687);
          unint64_t v1030 = v689 | ((unint64_t)*(unsigned int *)(v686 + 8 * v689 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4840, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 617, *v684);
        }
      }
      ++v684;
    }
    while (v684 != v683);
  }
  v690 = v1033;
  v691 = v1034;
  if (v1033 != v1034)
  {
    v692 = v1033;
    do
    {
      unint64_t v693 = *v692;
      uint64_t v694 = *((void *)this + 608);
      if (v693 < (*((void *)this + 609) - v694) >> 3)
      {
        uint64_t v695 = *(void *)(v694 + 8 * v693);
        BOOL v696 = v695 && HIDWORD(*v692) == HIDWORD(v695);
        if (v696 && *((void *)this + 611) + 24 * v695 != *((void *)this + 612))
        {
          uint64_t v697 = *(void *)(*((void *)this + 614) + 8 * v695);
          unint64_t v1030 = v697 | ((unint64_t)*(unsigned int *)(v694 + 8 * v697 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4840, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 617, *v692);
        }
      }
      ++v692;
    }
    while (v692 != v691);
  }
  if (v690) {
    operator delete(v690);
  }
  if (v682) {
    operator delete(v682);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 622, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 627, (uint64_t)&v1033);
  v698 = __p;
  v699 = v1037;
  if (__p != v1037)
  {
    v700 = (unint64_t *)__p;
    do
    {
      unint64_t v701 = *v700;
      uint64_t v702 = *((void *)this + 635);
      if (v701 < (*((void *)this + 636) - v702) >> 3)
      {
        uint64_t v703 = *(void *)(v702 + 8 * v701);
        BOOL v704 = v703 && HIDWORD(*v700) == HIDWORD(v703);
        if (v704 && *((void *)this + 638) + 24 * v703 != *((void *)this + 639))
        {
          uint64_t v705 = *(void *)(*((void *)this + 641) + 8 * v703);
          unint64_t v1030 = v705 | ((unint64_t)*(unsigned int *)(v702 + 8 * v705 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5056, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 644, *v700);
        }
      }
      ++v700;
    }
    while (v700 != v699);
  }
  v706 = v1033;
  v707 = v1034;
  if (v1033 != v1034)
  {
    v708 = v1033;
    do
    {
      unint64_t v709 = *v708;
      uint64_t v710 = *((void *)this + 635);
      if (v709 < (*((void *)this + 636) - v710) >> 3)
      {
        uint64_t v711 = *(void *)(v710 + 8 * v709);
        BOOL v712 = v711 && HIDWORD(*v708) == HIDWORD(v711);
        if (v712 && *((void *)this + 638) + 24 * v711 != *((void *)this + 639))
        {
          uint64_t v713 = *(void *)(*((void *)this + 641) + 8 * v711);
          unint64_t v1030 = v713 | ((unint64_t)*(unsigned int *)(v710 + 8 * v713 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5056, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 644, *v708);
        }
      }
      ++v708;
    }
    while (v708 != v707);
  }
  if (v706) {
    operator delete(v706);
  }
  if (v698) {
    operator delete(v698);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 649, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 654, (uint64_t)&v1033);
  v714 = __p;
  v715 = v1037;
  if (__p != v1037)
  {
    v716 = (unint64_t *)__p;
    do
    {
      unint64_t v717 = *v716;
      uint64_t v718 = *((void *)this + 662);
      if (v717 < (*((void *)this + 663) - v718) >> 3)
      {
        uint64_t v719 = *(void *)(v718 + 8 * v717);
        BOOL v720 = v719 && HIDWORD(*v716) == HIDWORD(v719);
        if (v720 && *((void *)this + 665) + 24 * v719 != *((void *)this + 666))
        {
          uint64_t v721 = *(void *)(*((void *)this + 668) + 8 * v719);
          unint64_t v1030 = v721 | ((unint64_t)*(unsigned int *)(v718 + 8 * v721 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5272, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 671, *v716);
        }
      }
      ++v716;
    }
    while (v716 != v715);
  }
  v722 = v1033;
  v723 = v1034;
  if (v1033 != v1034)
  {
    v724 = v1033;
    do
    {
      unint64_t v725 = *v724;
      uint64_t v726 = *((void *)this + 662);
      if (v725 < (*((void *)this + 663) - v726) >> 3)
      {
        uint64_t v727 = *(void *)(v726 + 8 * v725);
        BOOL v728 = v727 && HIDWORD(*v724) == HIDWORD(v727);
        if (v728 && *((void *)this + 665) + 24 * v727 != *((void *)this + 666))
        {
          uint64_t v729 = *(void *)(*((void *)this + 668) + 8 * v727);
          unint64_t v1030 = v729 | ((unint64_t)*(unsigned int *)(v726 + 8 * v729 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5272, &v1030);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 671, *v724);
        }
      }
      ++v724;
    }
    while (v724 != v723);
  }
  if (v722) {
    operator delete(v722);
  }
  if (v714) {
    operator delete(v714);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 725, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 730, (uint64_t)&v1033);
  v730 = __p;
  v731 = v1037;
  if (__p != v1037)
  {
    v732 = __p;
    do
    {
      unint64_t v733 = *v732;
      uint64_t v734 = *((void *)this + 738);
      if (v733 < (*((void *)this + 739) - v734) >> 3)
      {
        uint64_t v735 = *(void *)(v734 + 8 * v733);
        BOOL v736 = v735 && HIDWORD(*v732) == HIDWORD(v735);
        if (v736 && *((void *)this + 741) + 24 * v735 != *((void *)this + 742))
        {
          uint64_t v737 = *(void *)(*((void *)this + 744) + 8 * v735);
          unint64_t v1030 = v737 | ((unint64_t)*(unsigned int *)(v734 + 8 * v737 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5880, &v1030);
        }
      }
      ++v732;
    }
    while (v732 != v731);
  }
  v738 = v1033;
  v739 = v1034;
  if (v1033 != v1034)
  {
    v740 = v1033;
    do
    {
      unint64_t v741 = *v740;
      uint64_t v742 = *((void *)this + 738);
      if (v741 < (*((void *)this + 739) - v742) >> 3)
      {
        uint64_t v743 = *(void *)(v742 + 8 * v741);
        BOOL v744 = v743 && HIDWORD(*v740) == HIDWORD(v743);
        if (v744 && *((void *)this + 741) + 24 * v743 != *((void *)this + 742))
        {
          uint64_t v745 = *(void *)(*((void *)this + 744) + 8 * v743);
          unint64_t v1030 = v745 | ((unint64_t)*(unsigned int *)(v742 + 8 * v745 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5880, &v1030);
        }
      }
      ++v740;
    }
    while (v740 != v739);
  }
  if (v738) {
    operator delete(v738);
  }
  if (v730) {
    operator delete(v730);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 219, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 224, (uint64_t)&v1030);
  v746 = v1033;
  v747 = v1034;
  if (v1033 != v1034)
  {
    v748 = v1033;
    do
    {
      unint64_t v749 = *v748;
      uint64_t v750 = *((void *)this + 232);
      if (v749 < (*((void *)this + 233) - v750) >> 3)
      {
        uint64_t v751 = *(void *)(v750 + 8 * v749);
        BOOL v752 = v751 && HIDWORD(*v748) == HIDWORD(v751);
        if (v752 && *((void *)this + 235) + 24 * v751 != *((void *)this + 236))
        {
          uint64_t v753 = *(void *)(*((void *)this + 238) + 8 * v751);
          long long __p = (void *)(v753 | ((unint64_t)*(unsigned int *)(v750 + 8 * v753 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 1832, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 241, *v748);
        }
      }
      ++v748;
    }
    while (v748 != v747);
  }
  v754 = (unint64_t *)v1030;
  v755 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    v756 = (unint64_t *)v1030;
    do
    {
      unint64_t v757 = *v756;
      uint64_t v758 = *((void *)this + 232);
      if (v757 < (*((void *)this + 233) - v758) >> 3)
      {
        uint64_t v759 = *(void *)(v758 + 8 * v757);
        BOOL v760 = v759 && HIDWORD(*v756) == HIDWORD(v759);
        if (v760 && *((void *)this + 235) + 24 * v759 != *((void *)this + 236))
        {
          uint64_t v761 = *(void *)(*((void *)this + 238) + 8 * v759);
          long long __p = (void *)(v761 | ((unint64_t)*(unsigned int *)(v758 + 8 * v761 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 1832, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 241, *v756);
        }
      }
      ++v756;
    }
    while (v756 != v755);
  }
  if (v746 != v747)
  {
    int8x8_t v762 = *(int8x8_t *)((char *)this + 2016);
    if (v762)
    {
      v763 = v746;
LABEL_1402:
      unint64_t v764 = *v763;
      uint8x8_t v765 = (uint8x8_t)vcnt_s8(v762);
      v765.i16[0] = vaddlv_u8(v765);
      if (v765.u32[0] > 1uLL)
      {
        unint64_t v766 = *v763;
        if (v764 >= *(void *)&v762) {
          unint64_t v766 = v764 % *(void *)&v762;
        }
      }
      else
      {
        unint64_t v766 = (*(void *)&v762 - 1) & v764;
      }
      v767 = *(void **)(*((void *)this + 251) + 8 * v766);
      if (v767)
      {
        v768 = (void *)*v767;
        if (*v767)
        {
          if (v765.u32[0] < 2uLL)
          {
            uint64_t v769 = *(void *)&v762 - 1;
            while (1)
            {
              uint64_t v771 = v768[1];
              if (v771 == v764)
              {
                if (v768[2] == v764) {
                  goto LABEL_1422;
                }
              }
              else if ((v771 & v769) != v766)
              {
                goto LABEL_1426;
              }
              v768 = (void *)*v768;
              if (!v768) {
                goto LABEL_1426;
              }
            }
          }
          do
          {
            unint64_t v770 = v768[1];
            if (v770 == v764)
            {
              if (v768[2] == v764)
              {
LABEL_1422:
                v772 = (void *)std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((void *)this + 246, (uint64_t)(v768 + 3));
                if (v772)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 246, v772);
                  if (__p) {
                    operator delete(__p);
                  }
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 251, v768[2]);
                break;
              }
            }
            else
            {
              if (v770 >= *(void *)&v762) {
                v770 %= *(void *)&v762;
              }
              if (v770 != v766) {
                break;
              }
            }
            v768 = (void *)*v768;
          }
          while (v768);
        }
      }
LABEL_1426:
      while (++v763 != v747)
      {
        int8x8_t v762 = *(int8x8_t *)((char *)this + 2016);
        if (v762) {
          goto LABEL_1402;
        }
      }
    }
  }
  if (v754 != v755)
  {
    int8x8_t v773 = *(int8x8_t *)((char *)this + 2016);
    if (v773)
    {
      v774 = v754;
LABEL_1432:
      unint64_t v775 = *v774;
      uint8x8_t v776 = (uint8x8_t)vcnt_s8(v773);
      v776.i16[0] = vaddlv_u8(v776);
      if (v776.u32[0] > 1uLL)
      {
        unint64_t v777 = *v774;
        if (v775 >= *(void *)&v773) {
          unint64_t v777 = v775 % *(void *)&v773;
        }
      }
      else
      {
        unint64_t v777 = (*(void *)&v773 - 1) & v775;
      }
      v778 = *(void **)(*((void *)this + 251) + 8 * v777);
      if (v778)
      {
        v779 = (void *)*v778;
        if (*v778)
        {
          if (v776.u32[0] < 2uLL)
          {
            uint64_t v780 = *(void *)&v773 - 1;
            while (1)
            {
              uint64_t v782 = v779[1];
              if (v782 == v775)
              {
                if (v779[2] == v775) {
                  goto LABEL_1452;
                }
              }
              else if ((v782 & v780) != v777)
              {
                goto LABEL_1456;
              }
              v779 = (void *)*v779;
              if (!v779) {
                goto LABEL_1456;
              }
            }
          }
          do
          {
            unint64_t v781 = v779[1];
            if (v781 == v775)
            {
              if (v779[2] == v775)
              {
LABEL_1452:
                v783 = (void *)std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((void *)this + 246, (uint64_t)(v779 + 3));
                if (v783)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 246, v783);
                  if (__p) {
                    operator delete(__p);
                  }
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 251, v779[2]);
                break;
              }
            }
            else
            {
              if (v781 >= *(void *)&v773) {
                v781 %= *(void *)&v773;
              }
              if (v781 != v777) {
                break;
              }
            }
            v779 = (void *)*v779;
          }
          while (v779);
        }
      }
LABEL_1456:
      while (++v774 != v755)
      {
        int8x8_t v773 = *(int8x8_t *)((char *)this + 2016);
        if (v773) {
          goto LABEL_1432;
        }
      }
    }
  }
  if (v754) {
    operator delete(v754);
  }
  if (v746) {
    operator delete(v746);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 256, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 261, (uint64_t)&v1033);
  v788 = (unint64_t *)__p;
  v789 = v1037;
  if (__p != v1037)
  {
    v790 = (unint64_t *)__p;
    do
    {
      unint64_t v791 = *v790;
      uint64_t v792 = *((void *)this + 269);
      if (v791 < (*((void *)this + 270) - v792) >> 3)
      {
        uint64_t v793 = *(void *)(v792 + 8 * v791);
        BOOL v794 = v793 && HIDWORD(*v790) == HIDWORD(v793);
        if (v794 && *((void *)this + 272) + 24 * v793 != *((void *)this + 273))
        {
          uint64_t v795 = *(void *)(*((void *)this + 275) + 8 * v793);
          unint64_t v1030 = v795 | ((unint64_t)*(unsigned int *)(v792 + 8 * v795 + 4) << 32);
          geo::packed_array<md::CachedKey<md::ColorStyleCacheKey>,geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>::erase((uint64_t)this + 2128, &v1030, v784, v785, v786, v787);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>((uint64_t *)this + 278, *v790);
        }
      }
      ++v790;
    }
    while (v790 != v789);
  }
  v796 = v1033;
  v797 = v1034;
  if (v1033 != v1034)
  {
    v798 = v1033;
    do
    {
      unint64_t v799 = *v798;
      uint64_t v800 = *((void *)this + 269);
      if (v799 < (*((void *)this + 270) - v800) >> 3)
      {
        uint64_t v801 = *(void *)(v800 + 8 * v799);
        BOOL v802 = v801 && HIDWORD(*v798) == HIDWORD(v801);
        if (v802 && *((void *)this + 272) + 24 * v801 != *((void *)this + 273))
        {
          uint64_t v803 = *(void *)(*((void *)this + 275) + 8 * v801);
          unint64_t v1030 = v803 | ((unint64_t)*(unsigned int *)(v800 + 8 * v803 + 4) << 32);
          geo::packed_array<md::CachedKey<md::ColorStyleCacheKey>,geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>::erase((uint64_t)this + 2128, &v1030, v784, v785, v786, v787);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>((uint64_t *)this + 278, *v798);
        }
      }
      ++v798;
    }
    while (v798 != v797);
  }
  if (v788 != v789)
  {
    int8x8_t v804 = *(int8x8_t *)((char *)this + 2312);
    if (v804)
    {
      v805 = v788;
LABEL_1488:
      unint64_t v806 = *v805;
      uint8x8_t v807 = (uint8x8_t)vcnt_s8(v804);
      v807.i16[0] = vaddlv_u8(v807);
      if (v807.u32[0] > 1uLL)
      {
        unint64_t v808 = *v805;
        if (v806 >= *(void *)&v804) {
          unint64_t v808 = v806 % *(void *)&v804;
        }
      }
      else
      {
        unint64_t v808 = (*(void *)&v804 - 1) & v806;
      }
      v809 = *(void **)(*((void *)this + 288) + 8 * v808);
      if (v809)
      {
        v810 = (void *)*v809;
        if (*v809)
        {
          if (v807.u32[0] < 2uLL)
          {
            uint64_t v811 = *(void *)&v804 - 1;
            while (1)
            {
              uint64_t v813 = v810[1];
              if (v813 == v806)
              {
                if (v810[2] == v806) {
                  goto LABEL_1508;
                }
              }
              else if ((v813 & v811) != v808)
              {
                goto LABEL_1509;
              }
              v810 = (void *)*v810;
              if (!v810) {
                goto LABEL_1509;
              }
            }
          }
          do
          {
            unint64_t v812 = v810[1];
            if (v812 == v806)
            {
              if (v810[2] == v806)
              {
LABEL_1508:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 283, v810[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 288, v810[2]);
                break;
              }
            }
            else
            {
              if (v812 >= *(void *)&v804) {
                v812 %= *(void *)&v804;
              }
              if (v812 != v808) {
                break;
              }
            }
            v810 = (void *)*v810;
          }
          while (v810);
        }
      }
LABEL_1509:
      while (++v805 != v789)
      {
        int8x8_t v804 = *(int8x8_t *)((char *)this + 2312);
        if (v804) {
          goto LABEL_1488;
        }
      }
    }
  }
  if (v796 != v797)
  {
    int8x8_t v814 = *(int8x8_t *)((char *)this + 2312);
    if (v814)
    {
      v815 = v796;
LABEL_1515:
      unint64_t v816 = *v815;
      uint8x8_t v817 = (uint8x8_t)vcnt_s8(v814);
      v817.i16[0] = vaddlv_u8(v817);
      if (v817.u32[0] > 1uLL)
      {
        unint64_t v818 = *v815;
        if (v816 >= *(void *)&v814) {
          unint64_t v818 = v816 % *(void *)&v814;
        }
      }
      else
      {
        unint64_t v818 = (*(void *)&v814 - 1) & v816;
      }
      v819 = *(void **)(*((void *)this + 288) + 8 * v818);
      if (v819)
      {
        v820 = (void *)*v819;
        if (*v819)
        {
          if (v817.u32[0] < 2uLL)
          {
            uint64_t v821 = *(void *)&v814 - 1;
            while (1)
            {
              uint64_t v823 = v820[1];
              if (v823 == v816)
              {
                if (v820[2] == v816) {
                  goto LABEL_1535;
                }
              }
              else if ((v823 & v821) != v818)
              {
                goto LABEL_1536;
              }
              v820 = (void *)*v820;
              if (!v820) {
                goto LABEL_1536;
              }
            }
          }
          do
          {
            unint64_t v822 = v820[1];
            if (v822 == v816)
            {
              if (v820[2] == v816)
              {
LABEL_1535:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 283, v820[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 288, v820[2]);
                break;
              }
            }
            else
            {
              if (v822 >= *(void *)&v814) {
                v822 %= *(void *)&v814;
              }
              if (v822 != v818) {
                break;
              }
            }
            v820 = (void *)*v820;
          }
          while (v820);
        }
      }
LABEL_1536:
      while (++v815 != v797)
      {
        int8x8_t v814 = *(int8x8_t *)((char *)this + 2312);
        if (v814) {
          goto LABEL_1515;
        }
      }
    }
  }
  if (v796) {
    operator delete(v796);
  }
  if (v788) {
    operator delete(v788);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 747, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 752, (uint64_t)&v1030);
  v824 = v1033;
  v825 = v1034;
  if (v1033 != v1034)
  {
    v826 = v1033;
    do
    {
      unint64_t v827 = *v826;
      uint64_t v828 = *((void *)this + 760);
      if (v827 < (*((void *)this + 761) - v828) >> 3)
      {
        uint64_t v829 = *(void *)(v828 + 8 * v827);
        BOOL v830 = v829 && HIDWORD(*v826) == HIDWORD(v829);
        if (v830 && *((void *)this + 763) + 24 * v829 != *((void *)this + 764))
        {
          uint64_t v831 = *(void *)(*((void *)this + 766) + 8 * v829);
          long long __p = (void *)(v831 | ((unint64_t)*(unsigned int *)(v828 + 8 * v831 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6056, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 769, *v826);
        }
      }
      ++v826;
    }
    while (v826 != v825);
  }
  v832 = (unint64_t *)v1030;
  v833 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    v834 = (unint64_t *)v1030;
    do
    {
      unint64_t v835 = *v834;
      uint64_t v836 = *((void *)this + 760);
      if (v835 < (*((void *)this + 761) - v836) >> 3)
      {
        uint64_t v837 = *(void *)(v836 + 8 * v835);
        BOOL v838 = v837 && HIDWORD(*v834) == HIDWORD(v837);
        if (v838 && *((void *)this + 763) + 24 * v837 != *((void *)this + 764))
        {
          uint64_t v839 = *(void *)(*((void *)this + 766) + 8 * v837);
          long long __p = (void *)(v839 | ((unint64_t)*(unsigned int *)(v836 + 8 * v839 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6056, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 769, *v834);
        }
      }
      ++v834;
    }
    while (v834 != v833);
  }
  if (v824 != v825)
  {
    int8x8_t v840 = *(int8x8_t *)((char *)this + 6240);
    if (v840)
    {
      v841 = v824;
LABEL_1568:
      unint64_t v842 = *v841;
      uint8x8_t v843 = (uint8x8_t)vcnt_s8(v840);
      v843.i16[0] = vaddlv_u8(v843);
      if (v843.u32[0] > 1uLL)
      {
        unint64_t v844 = *v841;
        if (v842 >= *(void *)&v840) {
          unint64_t v844 = v842 % *(void *)&v840;
        }
      }
      else
      {
        unint64_t v844 = (*(void *)&v840 - 1) & v842;
      }
      v845 = *(float ***)(*((void *)this + 779) + 8 * v844);
      if (v845)
      {
        v846 = *v845;
        if (*v845)
        {
          if (v843.u32[0] < 2uLL)
          {
            uint64_t v847 = *(void *)&v840 - 1;
            while (1)
            {
              uint64_t v849 = *((void *)v846 + 1);
              if (v849 == v842)
              {
                if (*((void *)v846 + 2) == v842) {
                  goto LABEL_1588;
                }
              }
              else if ((v849 & v847) != v844)
              {
                goto LABEL_1593;
              }
              v846 = *(float **)v846;
              if (!v846) {
                goto LABEL_1593;
              }
            }
          }
          do
          {
            unint64_t v848 = *((void *)v846 + 1);
            if (v848 == v842)
            {
              if (*((void *)v846 + 2) == v842)
              {
LABEL_1588:
                v850 = std::__hash_table<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::__unordered_map_hasher<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,md::PlanarParametersCacheKeyHasher,std::equal_to<md::PlanarParametersCacheKey>,true>,std::__unordered_map_equal<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<md::PlanarParametersCacheKey>,md::PlanarParametersCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>>>::find<md::PlanarParametersCacheKey>((void *)this + 774, v846 + 6);
                if (v850)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 774, v850);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v842 = *((void *)v846 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 779, v842);
                break;
              }
            }
            else
            {
              if (v848 >= *(void *)&v840) {
                v848 %= *(void *)&v840;
              }
              if (v848 != v844) {
                break;
              }
            }
            v846 = *(float **)v846;
          }
          while (v846);
        }
      }
LABEL_1593:
      while (++v841 != v825)
      {
        int8x8_t v840 = *(int8x8_t *)((char *)this + 6240);
        if (v840) {
          goto LABEL_1568;
        }
      }
    }
  }
  if (v832 != v833)
  {
    int8x8_t v851 = *(int8x8_t *)((char *)this + 6240);
    if (v851)
    {
      v852 = v832;
LABEL_1599:
      unint64_t v853 = *v852;
      uint8x8_t v854 = (uint8x8_t)vcnt_s8(v851);
      v854.i16[0] = vaddlv_u8(v854);
      if (v854.u32[0] > 1uLL)
      {
        unint64_t v855 = *v852;
        if (v853 >= *(void *)&v851) {
          unint64_t v855 = v853 % *(void *)&v851;
        }
      }
      else
      {
        unint64_t v855 = (*(void *)&v851 - 1) & v853;
      }
      v856 = *(float ***)(*((void *)this + 779) + 8 * v855);
      if (v856)
      {
        v857 = *v856;
        if (*v856)
        {
          if (v854.u32[0] < 2uLL)
          {
            uint64_t v858 = *(void *)&v851 - 1;
            while (1)
            {
              uint64_t v860 = *((void *)v857 + 1);
              if (v860 == v853)
              {
                if (*((void *)v857 + 2) == v853) {
                  goto LABEL_1619;
                }
              }
              else if ((v860 & v858) != v855)
              {
                goto LABEL_1624;
              }
              v857 = *(float **)v857;
              if (!v857) {
                goto LABEL_1624;
              }
            }
          }
          do
          {
            unint64_t v859 = *((void *)v857 + 1);
            if (v859 == v853)
            {
              if (*((void *)v857 + 2) == v853)
              {
LABEL_1619:
                v861 = std::__hash_table<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::__unordered_map_hasher<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,md::PlanarParametersCacheKeyHasher,std::equal_to<md::PlanarParametersCacheKey>,true>,std::__unordered_map_equal<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<md::PlanarParametersCacheKey>,md::PlanarParametersCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>>>::find<md::PlanarParametersCacheKey>((void *)this + 774, v857 + 6);
                if (v861)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 774, v861);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v853 = *((void *)v857 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 779, v853);
                break;
              }
            }
            else
            {
              if (v859 >= *(void *)&v851) {
                v859 %= *(void *)&v851;
              }
              if (v859 != v855) {
                break;
              }
            }
            v857 = *(float **)v857;
          }
          while (v857);
        }
      }
LABEL_1624:
      while (++v852 != v833)
      {
        int8x8_t v851 = *(int8x8_t *)((char *)this + 6240);
        if (v851) {
          goto LABEL_1599;
        }
      }
    }
  }
  if (v832) {
    operator delete(v832);
  }
  if (v824) {
    operator delete(v824);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 821, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 826, (uint64_t)&v1030);
  v862 = v1033;
  v863 = v1034;
  if (v1033 != v1034)
  {
    v864 = v1033;
    do
    {
      unint64_t v865 = *v864;
      uint64_t v866 = *((void *)this + 834);
      if (v865 < (*((void *)this + 835) - v866) >> 3)
      {
        uint64_t v867 = *(void *)(v866 + 8 * v865);
        BOOL v868 = v867 && HIDWORD(*v864) == HIDWORD(v867);
        if (v868 && *((void *)this + 837) + 24 * v867 != *((void *)this + 838))
        {
          uint64_t v869 = *(void *)(*((void *)this + 840) + 8 * v867);
          long long __p = (void *)(v869 | ((unint64_t)*(unsigned int *)(v866 + 8 * v869 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6648, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 843, *v864);
        }
      }
      ++v864;
    }
    while (v864 != v863);
  }
  v870 = (unint64_t *)v1030;
  v871 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    v872 = (unint64_t *)v1030;
    do
    {
      unint64_t v873 = *v872;
      uint64_t v874 = *((void *)this + 834);
      if (v873 < (*((void *)this + 835) - v874) >> 3)
      {
        uint64_t v875 = *(void *)(v874 + 8 * v873);
        BOOL v876 = v875 && HIDWORD(*v872) == HIDWORD(v875);
        if (v876 && *((void *)this + 837) + 24 * v875 != *((void *)this + 838))
        {
          uint64_t v877 = *(void *)(*((void *)this + 840) + 8 * v875);
          long long __p = (void *)(v877 | ((unint64_t)*(unsigned int *)(v874 + 8 * v877 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6648, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 843, *v872);
        }
      }
      ++v872;
    }
    while (v872 != v871);
  }
  if (v862 != v863)
  {
    int8x8_t v878 = *(int8x8_t *)((char *)this + 6832);
    if (v878)
    {
      v879 = v862;
LABEL_1656:
      unint64_t v880 = *v879;
      uint8x8_t v881 = (uint8x8_t)vcnt_s8(v878);
      v881.i16[0] = vaddlv_u8(v881);
      if (v881.u32[0] > 1uLL)
      {
        unint64_t v882 = *v879;
        if (v880 >= *(void *)&v878) {
          unint64_t v882 = v880 % *(void *)&v878;
        }
      }
      else
      {
        unint64_t v882 = (*(void *)&v878 - 1) & v880;
      }
      v883 = *(float ***)(*((void *)this + 853) + 8 * v882);
      if (v883)
      {
        v884 = *v883;
        if (*v883)
        {
          if (v881.u32[0] < 2uLL)
          {
            uint64_t v885 = *(void *)&v878 - 1;
            while (1)
            {
              uint64_t v887 = *((void *)v884 + 1);
              if (v887 == v880)
              {
                if (*((void *)v884 + 2) == v880) {
                  goto LABEL_1676;
                }
              }
              else if ((v887 & v885) != v882)
              {
                goto LABEL_1681;
              }
              v884 = *(float **)v884;
              if (!v884) {
                goto LABEL_1681;
              }
            }
          }
          do
          {
            unint64_t v886 = *((void *)v884 + 1);
            if (v886 == v880)
            {
              if (*((void *)v884 + 2) == v880)
              {
LABEL_1676:
                v888 = std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>((void *)this + 848, v884 + 6);
                if (v888)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 848, v888);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v880 = *((void *)v884 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 853, v880);
                break;
              }
            }
            else
            {
              if (v886 >= *(void *)&v878) {
                v886 %= *(void *)&v878;
              }
              if (v886 != v882) {
                break;
              }
            }
            v884 = *(float **)v884;
          }
          while (v884);
        }
      }
LABEL_1681:
      while (++v879 != v863)
      {
        int8x8_t v878 = *(int8x8_t *)((char *)this + 6832);
        if (v878) {
          goto LABEL_1656;
        }
      }
    }
  }
  if (v870 != v871)
  {
    int8x8_t v889 = *(int8x8_t *)((char *)this + 6832);
    if (v889)
    {
      v890 = v870;
LABEL_1687:
      unint64_t v891 = *v890;
      uint8x8_t v892 = (uint8x8_t)vcnt_s8(v889);
      v892.i16[0] = vaddlv_u8(v892);
      if (v892.u32[0] > 1uLL)
      {
        unint64_t v893 = *v890;
        if (v891 >= *(void *)&v889) {
          unint64_t v893 = v891 % *(void *)&v889;
        }
      }
      else
      {
        unint64_t v893 = (*(void *)&v889 - 1) & v891;
      }
      v894 = *(float ***)(*((void *)this + 853) + 8 * v893);
      if (v894)
      {
        v895 = *v894;
        if (*v894)
        {
          if (v892.u32[0] < 2uLL)
          {
            uint64_t v896 = *(void *)&v889 - 1;
            while (1)
            {
              uint64_t v898 = *((void *)v895 + 1);
              if (v898 == v891)
              {
                if (*((void *)v895 + 2) == v891) {
                  goto LABEL_1707;
                }
              }
              else if ((v898 & v896) != v893)
              {
                goto LABEL_1712;
              }
              v895 = *(float **)v895;
              if (!v895) {
                goto LABEL_1712;
              }
            }
          }
          do
          {
            unint64_t v897 = *((void *)v895 + 1);
            if (v897 == v891)
            {
              if (*((void *)v895 + 2) == v891)
              {
LABEL_1707:
                v899 = std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>((void *)this + 848, v895 + 6);
                if (v899)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 848, v899);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v891 = *((void *)v895 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 853, v891);
                break;
              }
            }
            else
            {
              if (v897 >= *(void *)&v889) {
                v897 %= *(void *)&v889;
              }
              if (v897 != v893) {
                break;
              }
            }
            v895 = *(float **)v895;
          }
          while (v895);
        }
      }
LABEL_1712:
      while (++v890 != v871)
      {
        int8x8_t v889 = *(int8x8_t *)((char *)this + 6832);
        if (v889) {
          goto LABEL_1687;
        }
      }
    }
  }
  if (v870) {
    operator delete(v870);
  }
  if (v862) {
    operator delete(v862);
  }
  long long __p = 0;
  v1037 = 0;
  uint64_t v1038 = 0;
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 858, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 863, (uint64_t)&v1033);
  v900 = __p;
  v901 = v1037;
  if (__p != v1037)
  {
    v902 = __p;
    do
    {
      unint64_t v903 = *v902;
      uint64_t v904 = *((void *)this + 871);
      if (v903 < (*((void *)this + 872) - v904) >> 3)
      {
        uint64_t v905 = *(void *)(v904 + 8 * v903);
        BOOL v906 = v905 && HIDWORD(*v902) == HIDWORD(v905);
        if (v906 && *((void *)this + 874) + 24 * v905 != *((void *)this + 875))
        {
          uint64_t v907 = *(void *)(*((void *)this + 877) + 8 * v905);
          unint64_t v1030 = v907 | ((unint64_t)*(unsigned int *)(v904 + 8 * v907 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6944, &v1030);
        }
      }
      ++v902;
    }
    while (v902 != v901);
  }
  v908 = v1033;
  v909 = v1034;
  if (v1033 != v1034)
  {
    v910 = v1033;
    do
    {
      unint64_t v911 = *v910;
      uint64_t v912 = *((void *)this + 871);
      if (v911 < (*((void *)this + 872) - v912) >> 3)
      {
        uint64_t v913 = *(void *)(v912 + 8 * v911);
        BOOL v914 = v913 && HIDWORD(*v910) == HIDWORD(v913);
        if (v914 && *((void *)this + 874) + 24 * v913 != *((void *)this + 875))
        {
          uint64_t v915 = *(void *)(*((void *)this + 877) + 8 * v913);
          unint64_t v1030 = v915 | ((unint64_t)*(unsigned int *)(v912 + 8 * v915 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6944, &v1030);
        }
      }
      ++v910;
    }
    while (v910 != v909);
  }
  if (v908) {
    operator delete(v908);
  }
  if (v900) {
    operator delete(v900);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 880, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 885, (uint64_t)&v1030);
  v916 = v1033;
  v917 = v1034;
  if (v1033 != v1034)
  {
    v918 = v1033;
    do
    {
      unint64_t v919 = *v918;
      uint64_t v920 = *((void *)this + 893);
      if (v919 < (*((void *)this + 894) - v920) >> 3)
      {
        uint64_t v921 = *(void *)(v920 + 8 * v919);
        BOOL v922 = v921 && HIDWORD(*v918) == HIDWORD(v921);
        if (v922 && *((void *)this + 896) + 24 * v921 != *((void *)this + 897))
        {
          uint64_t v923 = *(void *)(*((void *)this + 899) + 8 * v921);
          long long __p = (void *)(v923 | ((unint64_t)*(unsigned int *)(v920 + 8 * v923 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7120, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 902, *v918);
        }
      }
      ++v918;
    }
    while (v918 != v917);
  }
  v924 = (unint64_t *)v1030;
  v925 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    v926 = (unint64_t *)v1030;
    do
    {
      unint64_t v927 = *v926;
      uint64_t v928 = *((void *)this + 893);
      if (v927 < (*((void *)this + 894) - v928) >> 3)
      {
        uint64_t v929 = *(void *)(v928 + 8 * v927);
        BOOL v930 = v929 && HIDWORD(*v926) == HIDWORD(v929);
        if (v930 && *((void *)this + 896) + 24 * v929 != *((void *)this + 897))
        {
          uint64_t v931 = *(void *)(*((void *)this + 899) + 8 * v929);
          long long __p = (void *)(v931 | ((unint64_t)*(unsigned int *)(v928 + 8 * v931 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7120, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 902, *v926);
        }
      }
      ++v926;
    }
    while (v926 != v925);
  }
  if (v916 != v917)
  {
    int8x8_t v932 = *(int8x8_t *)((char *)this + 7304);
    if (v932)
    {
      v933 = v916;
LABEL_1770:
      unint64_t v934 = *v933;
      uint8x8_t v935 = (uint8x8_t)vcnt_s8(v932);
      v935.i16[0] = vaddlv_u8(v935);
      if (v935.u32[0] > 1uLL)
      {
        unint64_t v936 = *v933;
        if (v934 >= *(void *)&v932) {
          unint64_t v936 = v934 % *(void *)&v932;
        }
      }
      else
      {
        unint64_t v936 = (*(void *)&v932 - 1) & v934;
      }
      v937 = *(uint64_t ***)(*((void *)this + 912) + 8 * v936);
      if (v937)
      {
        v938 = *v937;
        if (*v937)
        {
          if (v935.u32[0] < 2uLL)
          {
            uint64_t v939 = *(void *)&v932 - 1;
            while (1)
            {
              uint64_t v941 = v938[1];
              if (v941 == v934)
              {
                if (v938[2] == v934) {
                  goto LABEL_1790;
                }
              }
              else if ((v941 & v939) != v936)
              {
                goto LABEL_1795;
              }
              v938 = (uint64_t *)*v938;
              if (!v938) {
                goto LABEL_1795;
              }
            }
          }
          do
          {
            unint64_t v940 = v938[1];
            if (v940 == v934)
            {
              if (v938[2] == v934)
              {
LABEL_1790:
                v942 = std::__hash_table<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::__unordered_map_hasher<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,md::StyleGroundOcclusionCacheKeyHasher,std::equal_to<md::StyleGroundOcclusionCacheKey>,true>,std::__unordered_map_equal<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<md::StyleGroundOcclusionCacheKey>,md::StyleGroundOcclusionCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>>>::find<md::StyleGroundOcclusionCacheKey>((void *)this + 907, *((_DWORD *)v938 + 6), *((_DWORD *)v938 + 7));
                if (v942)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 907, v942);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v934 = v938[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 912, v934);
                break;
              }
            }
            else
            {
              if (v940 >= *(void *)&v932) {
                v940 %= *(void *)&v932;
              }
              if (v940 != v936) {
                break;
              }
            }
            v938 = (uint64_t *)*v938;
          }
          while (v938);
        }
      }
LABEL_1795:
      while (++v933 != v917)
      {
        int8x8_t v932 = *(int8x8_t *)((char *)this + 7304);
        if (v932) {
          goto LABEL_1770;
        }
      }
    }
  }
  if (v924 != v925)
  {
    int8x8_t v943 = *(int8x8_t *)((char *)this + 7304);
    if (v943)
    {
      v944 = v924;
LABEL_1801:
      unint64_t v945 = *v944;
      uint8x8_t v946 = (uint8x8_t)vcnt_s8(v943);
      v946.i16[0] = vaddlv_u8(v946);
      if (v946.u32[0] > 1uLL)
      {
        unint64_t v947 = *v944;
        if (v945 >= *(void *)&v943) {
          unint64_t v947 = v945 % *(void *)&v943;
        }
      }
      else
      {
        unint64_t v947 = (*(void *)&v943 - 1) & v945;
      }
      v948 = *(uint64_t ***)(*((void *)this + 912) + 8 * v947);
      if (v948)
      {
        v949 = *v948;
        if (*v948)
        {
          if (v946.u32[0] < 2uLL)
          {
            uint64_t v950 = *(void *)&v943 - 1;
            while (1)
            {
              uint64_t v952 = v949[1];
              if (v952 == v945)
              {
                if (v949[2] == v945) {
                  goto LABEL_1821;
                }
              }
              else if ((v952 & v950) != v947)
              {
                goto LABEL_1826;
              }
              v949 = (uint64_t *)*v949;
              if (!v949) {
                goto LABEL_1826;
              }
            }
          }
          do
          {
            unint64_t v951 = v949[1];
            if (v951 == v945)
            {
              if (v949[2] == v945)
              {
LABEL_1821:
                v953 = std::__hash_table<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::__unordered_map_hasher<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,md::StyleGroundOcclusionCacheKeyHasher,std::equal_to<md::StyleGroundOcclusionCacheKey>,true>,std::__unordered_map_equal<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<md::StyleGroundOcclusionCacheKey>,md::StyleGroundOcclusionCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>>>::find<md::StyleGroundOcclusionCacheKey>((void *)this + 907, *((_DWORD *)v949 + 6), *((_DWORD *)v949 + 7));
                if (v953)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 907, v953);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v945 = v949[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 912, v945);
                break;
              }
            }
            else
            {
              if (v951 >= *(void *)&v943) {
                v951 %= *(void *)&v943;
              }
              if (v951 != v947) {
                break;
              }
            }
            v949 = (uint64_t *)*v949;
          }
          while (v949);
        }
      }
LABEL_1826:
      while (++v944 != v925)
      {
        int8x8_t v943 = *(int8x8_t *)((char *)this + 7304);
        if (v943) {
          goto LABEL_1801;
        }
      }
    }
  }
  if (v924) {
    operator delete(v924);
  }
  if (v916) {
    operator delete(v916);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 917, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 922, (uint64_t)&v1030);
  v954 = v1033;
  v955 = v1034;
  if (v1033 != v1034)
  {
    v956 = v1033;
    do
    {
      unint64_t v957 = *v956;
      uint64_t v958 = *((void *)this + 930);
      if (v957 < (*((void *)this + 931) - v958) >> 3)
      {
        uint64_t v959 = *(void *)(v958 + 8 * v957);
        BOOL v960 = v959 && HIDWORD(*v956) == HIDWORD(v959);
        if (v960 && *((void *)this + 933) + 24 * v959 != *((void *)this + 934))
        {
          uint64_t v961 = *(void *)(*((void *)this + 936) + 8 * v959);
          long long __p = (void *)(v961 | ((unint64_t)*(unsigned int *)(v958 + 8 * v961 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7416, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 939, *v956);
        }
      }
      ++v956;
    }
    while (v956 != v955);
  }
  v962 = (unint64_t *)v1030;
  v963 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    v964 = (unint64_t *)v1030;
    do
    {
      unint64_t v965 = *v964;
      uint64_t v966 = *((void *)this + 930);
      if (v965 < (*((void *)this + 931) - v966) >> 3)
      {
        uint64_t v967 = *(void *)(v966 + 8 * v965);
        BOOL v968 = v967 && HIDWORD(*v964) == HIDWORD(v967);
        if (v968 && *((void *)this + 933) + 24 * v967 != *((void *)this + 934))
        {
          uint64_t v969 = *(void *)(*((void *)this + 936) + 8 * v967);
          long long __p = (void *)(v969 | ((unint64_t)*(unsigned int *)(v966 + 8 * v969 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7416, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 939, *v964);
        }
      }
      ++v964;
    }
    while (v964 != v963);
  }
  if (v954 != v955)
  {
    int8x8_t v970 = *(int8x8_t *)((char *)this + 7600);
    if (v970)
    {
      v971 = v954;
LABEL_1858:
      unint64_t v972 = *v971;
      uint8x8_t v973 = (uint8x8_t)vcnt_s8(v970);
      v973.i16[0] = vaddlv_u8(v973);
      if (v973.u32[0] > 1uLL)
      {
        unint64_t v974 = *v971;
        if (v972 >= *(void *)&v970) {
          unint64_t v974 = v972 % *(void *)&v970;
        }
      }
      else
      {
        unint64_t v974 = (*(void *)&v970 - 1) & v972;
      }
      v975 = *(float ***)(*((void *)this + 949) + 8 * v974);
      if (v975)
      {
        v976 = *v975;
        if (*v975)
        {
          if (v973.u32[0] < 2uLL)
          {
            uint64_t v977 = *(void *)&v970 - 1;
            while (1)
            {
              uint64_t v979 = *((void *)v976 + 1);
              if (v979 == v972)
              {
                if (*((void *)v976 + 2) == v972) {
                  goto LABEL_1878;
                }
              }
              else if ((v979 & v977) != v974)
              {
                goto LABEL_1883;
              }
              v976 = *(float **)v976;
              if (!v976) {
                goto LABEL_1883;
              }
            }
          }
          do
          {
            unint64_t v978 = *((void *)v976 + 1);
            if (v978 == v972)
            {
              if (*((void *)v976 + 2) == v972)
              {
LABEL_1878:
                v980 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((void *)this + 944, v976[6], v976[7]);
                if (v980)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 944, v980);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v972 = *((void *)v976 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 949, v972);
                break;
              }
            }
            else
            {
              if (v978 >= *(void *)&v970) {
                v978 %= *(void *)&v970;
              }
              if (v978 != v974) {
                break;
              }
            }
            v976 = *(float **)v976;
          }
          while (v976);
        }
      }
LABEL_1883:
      while (++v971 != v955)
      {
        int8x8_t v970 = *(int8x8_t *)((char *)this + 7600);
        if (v970) {
          goto LABEL_1858;
        }
      }
    }
  }
  if (v962 != v963)
  {
    int8x8_t v981 = *(int8x8_t *)((char *)this + 7600);
    if (v981)
    {
      v982 = v962;
LABEL_1889:
      unint64_t v983 = *v982;
      uint8x8_t v984 = (uint8x8_t)vcnt_s8(v981);
      v984.i16[0] = vaddlv_u8(v984);
      if (v984.u32[0] > 1uLL)
      {
        unint64_t v985 = *v982;
        if (v983 >= *(void *)&v981) {
          unint64_t v985 = v983 % *(void *)&v981;
        }
      }
      else
      {
        unint64_t v985 = (*(void *)&v981 - 1) & v983;
      }
      v986 = *(float ***)(*((void *)this + 949) + 8 * v985);
      if (v986)
      {
        v987 = *v986;
        if (*v986)
        {
          if (v984.u32[0] < 2uLL)
          {
            uint64_t v988 = *(void *)&v981 - 1;
            while (1)
            {
              uint64_t v990 = *((void *)v987 + 1);
              if (v990 == v983)
              {
                if (*((void *)v987 + 2) == v983) {
                  goto LABEL_1909;
                }
              }
              else if ((v990 & v988) != v985)
              {
                goto LABEL_1914;
              }
              v987 = *(float **)v987;
              if (!v987) {
                goto LABEL_1914;
              }
            }
          }
          do
          {
            unint64_t v989 = *((void *)v987 + 1);
            if (v989 == v983)
            {
              if (*((void *)v987 + 2) == v983)
              {
LABEL_1909:
                v991 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((void *)this + 944, v987[6], v987[7]);
                if (v991)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 944, v991);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v983 = *((void *)v987 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 949, v983);
                break;
              }
            }
            else
            {
              if (v989 >= *(void *)&v981) {
                v989 %= *(void *)&v981;
              }
              if (v989 != v985) {
                break;
              }
            }
            v987 = *(float **)v987;
          }
          while (v987);
        }
      }
LABEL_1914:
      while (++v982 != v963)
      {
        int8x8_t v981 = *(int8x8_t *)((char *)this + 7600);
        if (v981) {
          goto LABEL_1889;
        }
      }
    }
  }
  if (v962) {
    operator delete(v962);
  }
  if (v954) {
    operator delete(v954);
  }
  v1033 = 0;
  v1034 = 0;
  uint64_t v1035 = 0;
  unint64_t v1030 = 0;
  v1031 = 0;
  uint64_t v1032 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 954, (uint64_t)&v1033);
  md::accumulate<geo::handle<md::ls::ColorData>>((void *)this + 959, (uint64_t)&v1030);
  v992 = v1033;
  v993 = v1034;
  if (v1033 != v1034)
  {
    v994 = v1033;
    do
    {
      unint64_t v995 = *v994;
      uint64_t v996 = *((void *)this + 967);
      if (v995 < (*((void *)this + 968) - v996) >> 3)
      {
        uint64_t v997 = *(void *)(v996 + 8 * v995);
        BOOL v998 = v997 && HIDWORD(*v994) == HIDWORD(v997);
        if (v998 && *((void *)this + 970) + 24 * v997 != *((void *)this + 971))
        {
          uint64_t v999 = *(void *)(*((void *)this + 973) + 8 * v997);
          long long __p = (void *)(v999 | ((unint64_t)*(unsigned int *)(v996 + 8 * v999 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7712, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 976, *v994);
        }
      }
      ++v994;
    }
    while (v994 != v993);
  }
  v1000 = (unint64_t *)v1030;
  v1001 = v1031;
  if ((unint64_t *)v1030 != v1031)
  {
    v1002 = (unint64_t *)v1030;
    do
    {
      unint64_t v1003 = *v1002;
      uint64_t v1004 = *((void *)this + 967);
      if (v1003 < (*((void *)this + 968) - v1004) >> 3)
      {
        uint64_t v1005 = *(void *)(v1004 + 8 * v1003);
        BOOL v1006 = v1005 && HIDWORD(*v1002) == HIDWORD(v1005);
        if (v1006 && *((void *)this + 970) + 24 * v1005 != *((void *)this + 971))
        {
          uint64_t v1007 = *(void *)(*((void *)this + 973) + 8 * v1005);
          long long __p = (void *)(v1007 | ((unint64_t)*(unsigned int *)(v1004 + 8 * v1007 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7712, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 976, *v1002);
        }
      }
      ++v1002;
    }
    while (v1002 != v1001);
  }
  if (v992 != v993)
  {
    int8x8_t v1008 = *(int8x8_t *)((char *)this + 7896);
    if (v1008)
    {
      v1009 = v992;
LABEL_1946:
      unint64_t v1010 = *v1009;
      uint8x8_t v1011 = (uint8x8_t)vcnt_s8(v1008);
      v1011.i16[0] = vaddlv_u8(v1011);
      if (v1011.u32[0] > 1uLL)
      {
        unint64_t v1012 = *v1009;
        if (v1010 >= *(void *)&v1008) {
          unint64_t v1012 = v1010 % *(void *)&v1008;
        }
      }
      else
      {
        unint64_t v1012 = (*(void *)&v1008 - 1) & v1010;
      }
      v1013 = *(float ***)(*((void *)this + 986) + 8 * v1012);
      if (v1013)
      {
        v1014 = *v1013;
        if (*v1013)
        {
          if (v1011.u32[0] < 2uLL)
          {
            uint64_t v1015 = *(void *)&v1008 - 1;
            while (1)
            {
              uint64_t v1017 = *((void *)v1014 + 1);
              if (v1017 == v1010)
              {
                if (*((void *)v1014 + 2) == v1010) {
                  goto LABEL_1966;
                }
              }
              else if ((v1017 & v1015) != v1012)
              {
                goto LABEL_1971;
              }
              v1014 = *(float **)v1014;
              if (!v1014) {
                goto LABEL_1971;
              }
            }
          }
          do
          {
            unint64_t v1016 = *((void *)v1014 + 1);
            if (v1016 == v1010)
            {
              if (*((void *)v1014 + 2) == v1010)
              {
LABEL_1966:
                v1018 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((void *)this + 981, v1014[6], v1014[7]);
                if (v1018)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 981, v1018);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v1010 = *((void *)v1014 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 986, v1010);
                break;
              }
            }
            else
            {
              if (v1016 >= *(void *)&v1008) {
                v1016 %= *(void *)&v1008;
              }
              if (v1016 != v1012) {
                break;
              }
            }
            v1014 = *(float **)v1014;
          }
          while (v1014);
        }
      }
LABEL_1971:
      while (++v1009 != v993)
      {
        int8x8_t v1008 = *(int8x8_t *)((char *)this + 7896);
        if (v1008) {
          goto LABEL_1946;
        }
      }
    }
  }
  if (v1000 != v1001)
  {
    int8x8_t v1019 = *(int8x8_t *)((char *)this + 7896);
    if (v1019)
    {
      v1020 = v1000;
LABEL_1977:
      unint64_t v1021 = *v1020;
      uint8x8_t v1022 = (uint8x8_t)vcnt_s8(v1019);
      v1022.i16[0] = vaddlv_u8(v1022);
      if (v1022.u32[0] > 1uLL)
      {
        unint64_t v1023 = *v1020;
        if (v1021 >= *(void *)&v1019) {
          unint64_t v1023 = v1021 % *(void *)&v1019;
        }
      }
      else
      {
        unint64_t v1023 = (*(void *)&v1019 - 1) & v1021;
      }
      v1024 = *(float ***)(*((void *)this + 986) + 8 * v1023);
      if (v1024)
      {
        v1025 = *v1024;
        if (*v1024)
        {
          if (v1022.u32[0] < 2uLL)
          {
            uint64_t v1026 = *(void *)&v1019 - 1;
            while (1)
            {
              uint64_t v1028 = *((void *)v1025 + 1);
              if (v1028 == v1021)
              {
                if (*((void *)v1025 + 2) == v1021) {
                  goto LABEL_1997;
                }
              }
              else if ((v1028 & v1026) != v1023)
              {
                goto LABEL_2002;
              }
              v1025 = *(float **)v1025;
              if (!v1025) {
                goto LABEL_2002;
              }
            }
          }
          do
          {
            unint64_t v1027 = *((void *)v1025 + 1);
            if (v1027 == v1021)
            {
              if (*((void *)v1025 + 2) == v1021)
              {
LABEL_1997:
                v1029 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((void *)this + 981, v1025[6], v1025[7]);
                if (v1029)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)this + 981, v1029);
                  if (__p) {
                    operator delete(__p);
                  }
                  unint64_t v1021 = *((void *)v1025 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 986, v1021);
                break;
              }
            }
            else
            {
              if (v1027 >= *(void *)&v1019) {
                v1027 %= *(void *)&v1019;
              }
              if (v1027 != v1023) {
                break;
              }
            }
            v1025 = *(float **)v1025;
          }
          while (v1025);
        }
      }
LABEL_2002:
      while (++v1020 != v1001)
      {
        int8x8_t v1019 = *(int8x8_t *)((char *)this + 7896);
        if (v1019) {
          goto LABEL_1977;
        }
      }
    }
  }
  if (v1000) {
    operator delete(v1000);
  }
  if (v992)
  {
    operator delete(v992);
  }
}

void sub_1A1A65AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1A65DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::LineLabelFeature::LineLabelFeature(uint64_t a1, char a2, char a3)
{
  *(void *)a1 = &unk_1EF5313F8;
  *(void *)(a1 + 8) = 850045863;
  long long v6 = 0uLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  {
    long long v6 = 0uLL;
    if (v13) {
      operator new();
    }
  }
  *(void *)(a1 + 120) = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 128) = 0x100000000;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 168) = v6;
  {
    operator new();
  }
  *(void *)(a1 + 184) = mdm::Allocator::instance(void)::alloc;
  *(void *)a1 = &unk_1EF536478;
  {
    operator new();
  }
  uint64_t v7 = mdm::Allocator::instance(void)::alloc;
  unint64_t v8 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 328, 8);
  v8->__shared_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FC68;
  v8[1].__shared_owners_ = 0;
  p_shared_owners = &v8[1].__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v8[1].__shared_weak_owners_ = 0;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v8[5].__shared_owners_ = 0;
  v8[5].__shared_weak_owners_ = 0;
  v8[5].__vftable = 0;
  *(_OWORD *)&v8[2].__shared_owners_ = 0u;
  v8[3].std::__shared_count = 0u;
  *(_OWORD *)&v8[3].__shared_weak_owners_ = 0u;
  *(std::__shared_count *)((char *)&v8[4].std::__shared_count + 1) = 0u;
  {
    p_shared_owners = &v8[1].__shared_owners_;
    if (v14) {
      operator new();
    }
  }
  v8[6].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
  LOBYTE(v8[6].__shared_owners_) = a3;
  BYTE1(v8[6].__shared_owners_) = a2;
  BYTE2(v8[6].__shared_owners_) = 0;
  v8[7].__vftable = 0;
  v8[7].__shared_owners_ = 0;
  v8[6].__shared_weak_owners_ = 0;
  {
    BOOL v15 = p_shared_owners;
    p_shared_owners = v15;
    if (v16) {
      operator new();
    }
  }
  v8[7].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
  v8[8].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  HIDWORD(v8[11].__shared_weak_owners_) = 0;
  *(_OWORD *)&v8[8].__shared_owners_ = 0u;
  v8[9].std::__shared_count = 0u;
  *(_OWORD *)&v8[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[10].__shared_owners_ = 0u;
  LOBYTE(v8[11].__shared_weak_owners_) = 0;
  v8[11].std::__shared_count = 0u;
  v8[12].std::__shared_count = (std::__shared_count)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)&v8[12].__shared_weak_owners_ = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  LOWORD(v8[13].__shared_owners_) = 0;
  BYTE2(v8[13].__shared_owners_) = 0;
  if (BYTE1(v8[6].__shared_owners_) == 3) {
    LOBYTE(v8[13].__shared_owners_) = 1;
  }
  if (LOBYTE(v8[6].__shared_owners_) == 6) {
    BYTE1(v8[13].__shared_owners_) = 1;
  }
  atomic_store(0xFEu, (unsigned __int8 *)&v8[10].__shared_weak_owners_);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[10].__shared_weak_owners_ + 1);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[10].__shared_weak_owners_ + 2);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[10].__shared_weak_owners_ + 3);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[10].__shared_weak_owners_ + 4);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[10].__shared_weak_owners_ + 5);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[10].__shared_weak_owners_ + 6);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[10].__shared_weak_owners_ + 7);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11]);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__vftable + 1);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__vftable + 2);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__vftable + 3);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__vftable + 4);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__vftable + 5);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__vftable + 6);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__vftable + 7);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__shared_owners_);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__shared_owners_ + 1);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__shared_owners_ + 2);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__shared_owners_ + 3);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__shared_owners_ + 4);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__shared_owners_ + 5);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__shared_owners_ + 6);
  atomic_store(0xFEu, (unsigned __int8 *)&v8[11].__shared_owners_ + 7);
  *(void *)(a1 + 192) = p_shared_owners;
  *(void *)(a1 + 200) = v8;
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_16;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)&v8[1].__shared_owners_;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = (uint64_t)&v8[1].__shared_owners_;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_16:
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 240) = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 256) = 1;
  *(unsigned char *)(a1 + 264) = a3;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 296) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(a1 + 304) = -1;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 328) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 336) = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 320) = a1 + 328;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 376) = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  {
    operator new();
  }
  uint64_t v11 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 408) = v11;
  *(_WORD *)(a1 + 432) = 0;
  return a1;
}

void sub_1A1A66590(_Unwind_Exception *a1)
{
  md::LabelFeature::~LabelFeature(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1A66904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 == v17)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
  }
  else if (a15)
  {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>>::~Model()
{
}

void ecs2::Query<md::ls::FlyoverSharedConstants const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverSharedConstants const&>>::~Model()
{
}

void *ecs2::Query<md::ls::FlyoverSharedConstants const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverSharedConstants const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FlyoverSharedConstants>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v4 = v3;
  long long v6 = (unint64_t *)v3[7];
  unint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((int v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      long long v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *long long v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v4[10] + 8 * v27;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35) {
            goto LABEL_44;
          }
        }
        if (v34 == v33) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v34;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v36);
        uint64_t v37 = v4[4];
        uint64_t v38 = v4[7];
        uint64_t v22 = (uint64_t *)v4[8];
        uint64_t v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          unint64_t v40 = *((unsigned int *)v39 + 1);
          uint64_t v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            uint64_t v42 = *(void *)(v37 + 8 * (v40 >> 7));
            uint64_t v41 = v4[8];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                uint64_t v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != v40) {
                  uint64_t v41 = v4[8];
                }
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            uint64_t v22 = v39 - 1;
            break;
          }
        }
        long long v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    uint64_t v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      uint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        uint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          uint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            uint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              uint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        long long v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  unint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *unint64_t result = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::FlyoverSharedConstants>(int8x8_t *a1)
{
  unint64_t v10 = 0xE57F1B6EAAE9263ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE57F1B6EAAE9263ALL;
    if (*(void *)&v1 <= 0xE57F1B6EAAE9263ALL) {
      unint64_t v3 = 0xE57F1B6EAAE9263ALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE57F1B6EAAE9263ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE57F1B6EAAE9263ALL)
      {
        if (v5[2] == 0xE57F1B6EAAE9263ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE57F1B6EAAE9263ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE57F1B6EAAE9263ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1A66F0C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  unint64_t result = (void *)gdc::Registry::storage<md::ls::MaterialPendingProcessing>(a2);
  unint64_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint8x8_t v2 = *(int8x8_t **)(a2 + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint64_t v7 = (void *)(v5 + 32);
  }
  uint64_t v111 = v7;
  uint64_t v112 = v3;
  unint64_t v113 = (void *)v4;
  uint64_t v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  long long v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        long long v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    unint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v110 = result;
    while (1)
    {
      *unint64_t result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        unint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        unint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (void *)v36[3];
        uint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        BOOL v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        uint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          unint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        unint64_t v94 = 0;
      }
      else
      {
        char v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        unint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[380];
      if (v55 < (unint64_t)((v38[381] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[383];
          __int16 v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[384] && v84 != 0)
          {
            unint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>> const&>,std::tuple<>>((uint64_t)(v38 + 372), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index;
                }
                uint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  uint64_t v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        uint64_t v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          BOOL v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (int8x8_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              unint64_t v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              int8x8_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            int8x8_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      uint64_t v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      BOOL v59 = v115 + 1;
      long long v115 = v59;
      if (v59 == v8)
      {
        unint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        unint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        BOOL v59 = v8;
LABEL_97:
        long long v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  unint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  *unint64_t result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}