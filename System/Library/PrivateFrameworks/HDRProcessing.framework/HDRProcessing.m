void cubicSplineInterp(double a1, float a2, double a3, double a4, float a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x263EF8340];
  if ((float)(a5 - a2) == 0.0)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        v5 = logInstanceID;
      }
      else {
        v5 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        v6 = 134217984;
        v7 = WORD1(v5);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx WARNING: cubicSplineInterp: delta == 0", (uint8_t *)&v6, 0xCu);
      }
      prevLogInstanceID = v5;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] WARNING: cubicSplineInterp: delta == 0", (uint8_t *)&v6, 2u);
    }
  }
}

void calcCubicSplineParam(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  float v7 = a5 - a2;
  *(float *)a1 = a3;
  if (v7 == 0.0)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v8 = logInstanceID;
      }
      else {
        uint64_t v8 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 134217984;
        uint64_t v11 = WORD1(v8);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx WARNING: calcCubicSplineParam: delta == 0", (uint8_t *)&v10, 0xCu);
      }
      prevLogInstanceID = v8;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] WARNING: calcCubicSplineParam: delta == 0", (uint8_t *)&v10, 2u);
    }
  }
  else
  {
    float v9 = (float)((float)((float)(a3 - a6) + (float)(a3 - a6)) + (float)((float)(a4 + a7) * v7))
       / (float)(v7 * (float)(v7 * v7));
    *(float *)(a1 + 12) = v9;
    *(float *)(a1 + 4) = a4;
    *(float *)(a1 + 8) = (float)((float)(a7 - a4) + (float)((float)(v7 * (float)(v9 * -3.0)) * v7)) / (float)(v7 + v7);
  }
}

float calcCubicSpline(float *a1, float a2, float a3)
{
  float v3 = a2 - a3;
  return (float)((float)(*a1 + (float)(a1[1] * v3)) + (float)((float)(v3 * a1[2]) * v3))
       + (float)((float)(v3 * (float)(v3 * a1[3])) * v3);
}

float calcLineParam(float *a1, float *a2, float a3, float a4, float a5)
{
  *a1 = a5;
  float result = a4 - (float)(a3 * a5);
  *a2 = result;
  return result;
}

float calcLine(float a1, float a2, float a3)
{
  return a3 + (float)(a2 * a1);
}

uint64_t DumpVDbl(FILE *a1, const char *a2, int a3, uint64_t a4)
{
  uint64_t result = fprintf(a1, "\n%s\n", a2);
  if (a3 < 6)
  {
    if (a3 < 1) {
      return result;
    }
  }
  else
  {
    fwrite("idx\n", 4uLL, 1uLL, a1);
  }
  int v8 = 0;
  do
  {
    if (a3 >= 6) {
      fprintf(a1, "%3d", v8);
    }
    if (v8 < a3)
    {
      uint64_t v9 = 0;
      do
      {
        fprintf(a1, "\t%0.7lf", *(float *)(a4 + 4 * v8 + 4 * v9));
        int v10 = v9 + 1;
        if (v9 > 3) {
          break;
        }
        uint64_t v11 = v8 + 1 + v9++;
      }
      while (v11 < a3);
      v8 += v10;
    }
    uint64_t result = fputc(10, a1);
  }
  while (v8 < a3);
  return result;
}

size_t DumpVDblMatlab(FILE *a1, const char *a2, int a3, uint64_t a4)
{
  fprintf(a1, "\n%s = [...\n", a2);
  if (a3 >= 1)
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = 0;
      uint64_t v9 = v7;
      uint64_t v10 = a4 + 4 * v7;
      do
      {
        unsigned int v11 = v8;
        fprintf(a1, "%0.7lf, ", *(float *)(v10 + 4 * v8++));
      }
      while (v11 <= 3 && v8 + v9 < a3);
      fwrite("...\n", 4uLL, 1uLL, a1);
      int v7 = v9 + v8;
    }
    while ((int)v9 + (int)v8 < a3);
  }
  return fwrite("];\n", 3uLL, 1uLL, a1);
}

uint64_t DumpM33Dbl(FILE *a1, const char *a2, float *a3)
{
  return fprintf(a1, "\t%4.7lf %4.7lf %4.7lf\n", a3[6], a3[7], a3[8]);
}

uint64_t DumpM33DblMatlab(FILE *a1, const char *a2, float *a3)
{
  fprintf(a1, "\n%s = [...\n", a2);
  fprintf(a1, "\t%4.7lf, %4.7lf, %4.7lf\n;...", *a3, a3[1], a3[2]);
  fprintf(a1, "\t%4.7lf, %4.7lf, %4.7lf\n;...", a3[3], a3[4], a3[5]);
  return fprintf(a1, "\t%4.7lf, %4.7lf, %4.7lf]\n;", a3[6], a3[7], a3[8]);
}

BOOL hasHdr10TonemapConfigChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(float *)(a2 + 20) == *(float *)(a1 + 36)
    && *(float *)(a2 + 28) == *(float *)(a1 + 44)
    && *(float *)(a2 + 24) == *(float *)(a1 + 40)
    && *(float *)(a2 + 32) == *(float *)(a1 + 48)
    && *(float *)(a2 + 36) == *(float *)(a1 + 52)
    && *(float *)(a2 + 44) == *(float *)(a1 + 60)
    && *(float *)(a2 + 48) == *(float *)(a1 + 64)
    && *(float *)(a2 + 52) == *(float *)(a1 + 68)
    && *(float *)(a2 + 60) == *(float *)(a1 + 76)
    && *(float *)(a2 + 64) == *(float *)(a1 + 80)
    && *(float *)(a2 + 68) == *(float *)(a1 + 84)
    && *(float *)(a2 + 76) == *(float *)(a1 + 92)
    && *(float *)(a2 + 80) == *(float *)(a1 + 96))
  {
    int v4 = *(_DWORD *)(a2 + 84);
    if (v4 == *(_DWORD *)(a1 + 100))
    {
      switch(v4)
      {
        case 0:
          uint64_t v5 = *(unsigned __int16 *)(a2 + 88);
          if (v5 != *(unsigned __int16 *)(a1 + 104)) {
            return 1;
          }
          if (!*(_WORD *)(a2 + 88)) {
            goto LABEL_42;
          }
          v6 = (float *)(a2 + 92);
          int v7 = (float *)(a1 + 108);
          while (*v6 == *v7 && v6[6] == v7[6] && v6[12] == v7[12])
          {
            ++v6;
            ++v7;
            if (!--v5) {
              goto LABEL_42;
            }
          }
          return 1;
        case 1:
          uint64_t v8 = *(unsigned __int16 *)(a2 + 88);
          if (v8 != *(unsigned __int16 *)(a1 + 104)) {
            return 1;
          }
          if (!*(_WORD *)(a2 + 88)) {
            goto LABEL_42;
          }
          uint64_t v9 = 0;
          uint64_t v10 = (float *)(a1 + 192);
          unsigned int v11 = (float *)(a2 + 176);
          break;
        case 2:
          if (*(float *)(a2 + 88) != *(float *)(a1 + 104)
            || *(float *)(a2 + 92) != *(float *)(a1 + 108)
            || *(float *)(a2 + 96) != *(float *)(a1 + 112)
            || *(float *)(a2 + 100) != *(float *)(a1 + 116))
          {
            return 1;
          }
          goto LABEL_42;
        case 4:
          if (memcmp((const void *)(a1 + 104), (const void *)(a2 + 88), 0x54uLL)) {
            return 1;
          }
          goto LABEL_42;
        default:
          goto LABEL_42;
      }
      while (1)
      {
        uint64_t v12 = a2 + 4 * v9;
        uint64_t v13 = a1 + 4 * v9;
        if (*(float *)(v12 + 92) != *(float *)(v13 + 108)) {
          break;
        }
        if (*(float *)(v12 + 116) != *(float *)(v13 + 132)) {
          break;
        }
        uint64_t v14 = *(unsigned __int16 *)(a2 + 2 * v9 + 164);
        if (v14 != *(unsigned __int16 *)(a1 + 2 * v9 + 180)) {
          break;
        }
        if (*(_WORD *)(a2 + 2 * v9 + 164))
        {
          v15 = v11;
          v16 = v10;
          while (*v15 == *v16)
          {
            ++v16;
            ++v15;
            if (!--v14) {
              goto LABEL_34;
            }
          }
          return 1;
        }
LABEL_34:
        ++v9;
        v10 += 14;
        v11 += 14;
        if (v9 == v8)
        {
LABEL_42:
          uint64_t v17 = *(unsigned __int16 *)(a3 + 2);
          if (v17 != *(unsigned __int16 *)(a1 + 1438)) {
            return 1;
          }
          if (*(_WORD *)(a3 + 2))
          {
            v18 = (float *)(a1 + 1440);
            v19 = (float *)(a3 + 16);
            while (*(v19 - 3) == *v18 && *v19 == v18[3] && v19[3] == v18[6])
            {
              ++v18;
              ++v19;
              if (!--v17) {
                goto LABEL_49;
              }
            }
            return 1;
          }
LABEL_49:
          uint64_t v20 = *(unsigned __int16 *)(a4 + 2);
          if (v20 != *(unsigned __int16 *)(a1 + 1562)) {
            return 1;
          }
          if (*(_WORD *)(a4 + 2))
          {
            v21 = (float *)(a1 + 1564);
            v22 = (float *)(a4 + 16);
            while (*(v22 - 3) == *v21 && *v22 == v21[3] && v22[3] == v21[6])
            {
              ++v21;
              ++v22;
              if (!--v20) {
                goto LABEL_56;
              }
            }
            return 1;
          }
LABEL_56:
          if (*(float *)(a4 + 40) != *(float *)(a1 + 1600)) {
            return 1;
          }
          return *(float *)(a4 + 44) != *(float *)(a1 + 1604);
        }
      }
    }
  }
  return 1;
}

__n128 updateHdr10TonemapConfig(uint64_t a1, const void *a2, long long *a3, uint64_t a4)
{
  memcpy((void *)(a1 + 16), a2, 0x58CuLL);
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[3];
  *(_OWORD *)(a1 + 1468) = a3[2];
  *(_OWORD *)(a1 + 1484) = v9;
  *(_OWORD *)(a1 + 1436) = v7;
  *(_OWORD *)(a1 + 1452) = v8;
  long long v10 = a3[4];
  long long v11 = a3[5];
  long long v12 = a3[6];
  *(_OWORD *)(a1 + 1544) = *(long long *)((char *)a3 + 108);
  *(_OWORD *)(a1 + 1516) = v11;
  *(_OWORD *)(a1 + 1532) = v12;
  *(_OWORD *)(a1 + 1500) = v10;
  uint64_t v13 = *(void *)(a4 + 128);
  long long v14 = *(_OWORD *)(a4 + 112);
  long long v15 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a1 + 1656) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a1 + 1672) = v14;
  *(void *)(a1 + 1688) = v13;
  *(_OWORD *)(a1 + 1640) = v15;
  *(_OWORD *)(a1 + 1560) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 48);
  long long v17 = *(_OWORD *)(a4 + 64);
  long long v19 = *(_OWORD *)(a4 + 16);
  long long v18 = *(_OWORD *)(a4 + 32);
  *(__n128 *)(a1 + 1608) = result;
  *(_OWORD *)(a1 + 1624) = v17;
  *(_OWORD *)(a1 + 1576) = v19;
  *(_OWORD *)(a1 + 1592) = v18;
  return result;
}

BOOL hasHlgTonemapConfigChanged(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2[71] != *(float *)(a1 + 1720)
      || a2[72] != *(float *)a1
      || a2[53] != *(float *)(a1 + 8)
      || a2[58] != *(float *)(a1 + 4)
      || *(unsigned __int8 *)(a3 + 1424) != *(unsigned __int8 *)(a1 + 1724)
      || *(unsigned char *)(a3 + 1424) && hasHdr10TonemapConfigChanged(a1, a3 + 4, a4, a5);
}

double updateHlgTonemapConfig(uint64_t a1, _DWORD *a2, uint64_t a3, long long *a4, uint64_t a5)
{
  int v5 = a2[72];
  *(_DWORD *)(a1 + 8) = a2[53];
  int v6 = a2[58];
  *(_DWORD *)a1 = v5;
  *(_DWORD *)(a1 + 4) = v6;
  LODWORD(result) = a2[71];
  *(_DWORD *)(a1 + 1720) = LODWORD(result);
  *(unsigned char *)(a1 + 1724) = *(unsigned char *)(a3 + 1424);
  if (*(unsigned char *)(a3 + 1424)) {
    *(void *)&double result = updateHdr10TonemapConfig(a1, (const void *)(a3 + 4), a4, a5).n128_u64[0];
  }
  return result;
}

BOOL hasDoviTonemapConfigChanged(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a2 + 468) != *(_DWORD *)(a1 + 1716)
    || *(float *)(a2 + 144) != *(float *)(a1 + 1720)
    || *(float *)(a2 + 148) != *(float *)(a1 + 1724)
    || *(float *)(a2 + 152) != *(float *)(a1 + 1728)
    || *(float *)(a2 + 156) != *(float *)(a1 + 1732)
    || *(float *)(a2 + 236) != *(float *)(a1 + 1736)
    || *(float *)(a2 + 240) != *(float *)(a1 + 1740)
    || *(float *)(a2 + 244) != *(float *)(a1 + 1744)
    || *(float *)(a2 + 248) != *(float *)(a1 + 1748)
    || *(float *)(a2 + 232) != *(float *)(a1 + 4)
    || *(float *)(a2 + 288) != *(float *)a1
    || *(float *)(a2 + 212) != *(float *)(a1 + 8)
    || *(float *)(a2 + 252) != *(float *)(a1 + 1752)
    || (a3 & 1) == 0
    && (*(float *)(a2 + 256) != *(float *)(a1 + 1756)
     || *(float *)(a2 + 260) != *(float *)(a1 + 1760)
     || *(float *)(a2 + 264) != *(float *)(a1 + 1764)
     || *(float *)(a2 + 268) != *(float *)(a1 + 1768)
     || *(float *)(a2 + 272) != *(float *)(a1 + 1772)))
  {
    return 1;
  }
  if (*(float *)(a2 + 496) != *(float *)(a1 + 12)) {
    return 1;
  }
  uint64_t v6 = *(unsigned __int16 *)(a4 + 2);
  if (v6 != *(unsigned __int16 *)(a1 + 1438)) {
    return 1;
  }
  if (*(_WORD *)(a4 + 2))
  {
    long long v7 = (float *)(a1 + 1440);
    long long v8 = (float *)(a4 + 16);
    while (*(v8 - 3) == *v7 && *v8 == v7[3] && v8[3] == v7[6])
    {
      ++v7;
      ++v8;
      if (!--v6) {
        goto LABEL_24;
      }
    }
    return 1;
  }
LABEL_24:
  uint64_t v9 = *(unsigned __int16 *)(a5 + 2);
  if (v9 != *(unsigned __int16 *)(a1 + 1562)) {
    return 1;
  }
  if (*(_WORD *)(a5 + 2))
  {
    long long v10 = (float *)(a1 + 1564);
    long long v11 = (float *)(a5 + 16);
    while (*(v11 - 3) == *v10 && *v11 == v10[3] && v11[3] == v10[6])
    {
      ++v10;
      ++v11;
      if (!--v9) {
        goto LABEL_31;
      }
    }
    return 1;
  }
LABEL_31:
  if (*(float *)(a5 + 40) != *(float *)(a1 + 1600)) {
    return 1;
  }
  return *(float *)(a5 + 44) != *(float *)(a1 + 1604);
}

__n128 updateDoViTonemapConfig(uint64_t a1, _DWORD *a2, char a3, long long *a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 1716) = a2[117];
  int v5 = a2[58];
  *(_DWORD *)a1 = a2[72];
  *(_DWORD *)(a1 + 4) = v5;
  int v6 = a2[124];
  *(_DWORD *)(a1 + 8) = a2[53];
  *(_DWORD *)(a1 + 12) = v6;
  *(_DWORD *)(a1 + 1720) = a2[36];
  *(_DWORD *)(a1 + 1724) = a2[37];
  *(_DWORD *)(a1 + 1728) = a2[38];
  *(_DWORD *)(a1 + 1732) = a2[39];
  *(_DWORD *)(a1 + 1736) = a2[59];
  *(_DWORD *)(a1 + 1740) = a2[60];
  *(_DWORD *)(a1 + 1744) = a2[61];
  *(_DWORD *)(a1 + 1748) = a2[62];
  if ((a3 & 1) == 0)
  {
    *(_DWORD *)(a1 + 1756) = a2[64];
    *(_DWORD *)(a1 + 1760) = a2[65];
    *(_DWORD *)(a1 + 1764) = a2[66];
    *(_DWORD *)(a1 + 1768) = a2[67];
    *(_DWORD *)(a1 + 1772) = a2[68];
  }
  *(_DWORD *)(a1 + 1752) = a2[63];
  long long v7 = *a4;
  long long v8 = a4[1];
  long long v9 = a4[3];
  *(_OWORD *)(a1 + 1468) = a4[2];
  *(_OWORD *)(a1 + 1484) = v9;
  *(_OWORD *)(a1 + 1436) = v7;
  *(_OWORD *)(a1 + 1452) = v8;
  long long v10 = a4[4];
  long long v11 = a4[5];
  long long v12 = a4[6];
  *(_OWORD *)(a1 + 1544) = *(long long *)((char *)a4 + 108);
  *(_OWORD *)(a1 + 1516) = v11;
  *(_OWORD *)(a1 + 1532) = v12;
  *(_OWORD *)(a1 + 1500) = v10;
  long long v13 = *(_OWORD *)(a5 + 64);
  long long v15 = *(_OWORD *)(a5 + 16);
  long long v14 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 1608) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 1624) = v13;
  *(_OWORD *)(a1 + 1576) = v15;
  *(_OWORD *)(a1 + 1592) = v14;
  long long v17 = *(_OWORD *)(a5 + 96);
  long long v16 = *(_OWORD *)(a5 + 112);
  long long v18 = *(_OWORD *)(a5 + 80);
  *(void *)(a1 + 1688) = *(void *)(a5 + 128);
  *(_OWORD *)(a1 + 1656) = v17;
  *(_OWORD *)(a1 + 1672) = v16;
  *(_OWORD *)(a1 + 1640) = v18;
  __n128 result = *(__n128 *)a5;
  *(_OWORD *)(a1 + 1560) = *(_OWORD *)a5;
  return result;
}

void setTextureDescriptorOptions(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    id v4 = v3;
    [v3 setUsage:3];
    [v4 setStorageMode:0];
    [v4 setProtectionOptions:a2];
    id v3 = v4;
    if (a2)
    {
      [v4 setStorageMode:2];
      id v3 = v4;
    }
  }
}

uint64_t HDRProcessorGetTypeID()
{
  if (_MergedGlobals_2 != -1) {
    dispatch_once(&_MergedGlobals_2, &__block_literal_global);
  }
  return qword_26ABE1DB0;
}

uint64_t __HDRProcessorGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_26ABE1DB0 = result;
  return result;
}

uint64_t HDRProcessorCreate(_DWORD *a1, CFErrorRef *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (_MergedGlobals_2 != -1) {
    dispatch_once(&_MergedGlobals_2, &__block_literal_global);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    a1[9] = 0;
    *(void *)(Instance + 16) = HDRProcessorImplCreate(a1, a2);
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v5 = logInstanceID;
      }
      else {
        uint64_t v5 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 134218498;
        long long v8 = (const char *)WORD1(v5);
        __int16 v9 = 2080;
        long long v10 = "HDRProcessorRef  _Nullable HDRProcessorCreate(HDRConfigurationParameters * _Nonnull, CFErrorRef * _Nonnull)";
        __int16 v11 = 2048;
        uint64_t v12 = Instance;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx  %s : newprocessor=%p\n", (uint8_t *)&v7, 0x20u);
      }
      prevLogInstanceID = v5;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      long long v8 = "HDRProcessorRef  _Nullable HDRProcessorCreate(HDRConfigurationParameters * _Nonnull, CFErrorRef * _Nonnull)";
      __int16 v9 = 2048;
      long long v10 = (const char *)Instance;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54]  %s : newprocessor=%p\n", (uint8_t *)&v7, 0x16u);
    }
  }
  return Instance;
}

uint64_t HDRProcessFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = -17006;
  if (a1 && a2 && a4 && a5)
  {
    if (a6)
    {
      objc_msgSend(*(id *)(a1 + 16), "processFrameWithLayer0:layer1:output:metadata:commandbuffer:callback:", a2, a3, a4);
      return -17000;
    }
  }
  return result;
}

void __HDRProcessorHDRProcessorFinalize(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  HDRProcessorImplRelease(*(void **)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v2 = logInstanceID;
    }
    else {
      uint64_t v2 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 134218498;
      id v4 = (const char *)WORD1(v2);
      __int16 v5 = 2080;
      int v6 = "void __HDRProcessorHDRProcessorFinalize(CFTypeRef)";
      __int16 v7 = 2048;
      uint64_t v8 = a1;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx    %s : processor=%p\n", (uint8_t *)&v3, 0x20u);
    }
    prevLogInstanceID = v2;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    id v4 = "void __HDRProcessorHDRProcessorFinalize(CFTypeRef)";
    __int16 v5 = 2048;
    int v6 = (const char *)a1;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54]    %s : processor=%p\n", (uint8_t *)&v3, 0x16u);
  }
}

BOOL __HDRProcessorEqual(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t __HDRProcessorHash(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFStringRef __HDRProcessorCopyFormattingDesc(void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"[%p]", a1[2]);
}

CFStringRef __HDRProcessorCopyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFAllocatorRef v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<HDRProcessor %p [%p]>{obj = %p}", a1, v3, a1[2]);
}

uint64_t debugMSRStages()
{
  return 0;
}

uint64_t debugDISPStages()
{
  return 0;
}

uint64_t debugGetDmVersion()
{
  return 0;
}

char *getColorSpaceName(int a1)
{
  return colorSpaceName[a1];
}

char *getContentTypeName(int a1)
{
  return contentTypeName[a1];
}

char *getContentProfileName(int a1)
{
  return contentProfileName[a1];
}

char *getDisplayTypeName(int a1)
{
  return displayTypeName[a1];
}

char *getProcessingTypeName(int a1)
{
  return processingTypeName[a1];
}

char *getOperationName(int a1)
{
  return operationName[a1];
}

char *getConvertTypeName(int a1)
{
  return convertTypeName[a1];
}

char *getUsageName(int a1)
{
  return usageName[a1];
}

const char *debugGetColorPrimaryString(int a1)
{
  v1 = "2020";
  CFAllocatorRef v2 = "Unknown";
  if (a1 == 12) {
    CFAllocatorRef v2 = "P3";
  }
  if (a1 != 9) {
    v1 = v2;
  }
  if (a1 == 1) {
    return "709";
  }
  else {
    return v1;
  }
}

const char *debugGetMatrixCoeffsString(int a1)
{
  if (a1 <= 11)
  {
    if (a1 == 1) {
      return "709";
    }
    if (a1 == 9) {
      return "2020";
    }
  }
  else
  {
    switch(a1)
    {
      case 248:
        return "IPT";
      case 14:
        return "ICtCp";
      case 12:
        return "P3";
    }
  }
  return "Unknown";
}

const char *debugGetTransferFunctionName(int a1)
{
  if (a1 > 15)
  {
    if (a1 != 16)
    {
      if (a1 == 18) {
        return "HLG";
      }
      return "Linear";
    }
    return "PQ";
  }
  else
  {
    if (a1 != 1)
    {
      if (a1 == 13) {
        return "sRGB";
      }
      return "Linear";
    }
    return "709";
  }
}

void sub_22224FC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22224FE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222501A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222251A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222251C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222251CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222251DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

HDRProcessor *HDRProcessorImplCreate(_DWORD *a1, CFErrorRef *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = [[HDRProcessor alloc] initWithConfig:a1];
  if (v4)
  {
    syslog(27, "HDR Processor : Processor Instance Created. (%dx%d) Target Nits = %d\n", *a1, a1[1], a1[3]);
    __int16 v5 = v4;
  }
  else
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v6 = logInstanceID;
      }
      else {
        uint64_t v6 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218242;
        uint64_t v9 = (const char *)WORD1(v6);
        __int16 v10 = 2080;
        __int16 v11 = "void *HDRProcessorImplCreate(HDRConfigurationParameters *, CFErrorRef *)";
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s : Failed to create HDRProcessorImpl\n", buf, 0x16u);
      }
      prevLogInstanceID = v6;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v9 = "void *HDRProcessorImplCreate(HDRConfigurationParameters *, CFErrorRef *)";
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s : Failed to create HDRProcessorImpl\n", buf, 0xCu);
    }
    syslog(27, "HDR Processor : Failed to create Processor\n");
    *a2 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"HDRProcessor", -17005, 0);
  }

  return v4;
}

void sub_2222523F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HDRProcessorImplRelease(void *a1)
{
  syslog(27, "HDR Processor : Processor Instance Release\n");
}

uint64_t HDRProcessorImplProcessFrame(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return -17000;
}

void sub_2222524BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222252574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222526C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222252984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_222252B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222252CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222252EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222253634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222253AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22225411C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222254578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void __clang_call_terminate(void *a1)
{
}

void sub_222254814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222254954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_222254C48(_Unwind_Exception *exception_object)
{
}

void sub_2222550A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222255330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222555B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222559EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222257CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_222257F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222581B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float getFloatFromDictionayForKey(NSDictionary *a1, NSString *a2, float a3)
{
  CFAllocatorRef v4 = [(NSDictionary *)a1 valueForKey:a2];
  __int16 v5 = v4;
  if (v4)
  {
    [v4 floatValue];
    if (v6 != 0.0) {
      a3 = v6;
    }
  }

  return a3;
}

void sub_222258228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22225839C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222259208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getIntFromDictionayForKey(NSDictionary *a1, NSString *a2, uint64_t a3)
{
  CFAllocatorRef v4 = [(NSDictionary *)a1 valueForKey:a2];
  __int16 v5 = v4;
  if (v4) {
    a3 = [v4 intValue];
  }

  return a3;
}

void sub_2222592C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t extractInputColorPrimaries(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v3 = a1[1];
  if (a2 == 2)
  {
    if (v3 != 9)
    {
      LOWORD(v4) = 9;
LABEL_4:
      a1[1] = v4;
    }
  }
  else
  {
    BOOL v5 = v3 > 0xC;
    int v6 = (1 << v3) & 0x1202;
    if (v5 || v6 == 0)
    {
      a1[1] = 1;
      Config = GetConfig((HDRConfig *)a1);
      if (Config)
      {
        __int16 v10 = GetConfig((HDRConfig *)Config);
        if (*((_DWORD *)v10 + 1719))
        {
          if ((v10[3436] & 0x80) != 0)
          {
            __int16 v11 = GetConfig((HDRConfig *)v10);
            if (v11)
            {
              uint64_t v12 = GetConfig((HDRConfig *)v11);
              int v4 = *(_DWORD *)HDRConfig::GetConfigEntryValue((uint64_t)v12, 0x4Eu, 0);
            }
            else
            {
              LOWORD(v4) = 0;
            }
            goto LABEL_4;
          }
        }
      }
    }
  }
  return a1[1];
}

_DWORD *floatCopyWithCount(_DWORD *result, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v4 = *(_DWORD *)a2++;
      *result++ = v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_22225AAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef createPixelBufferPool(int a1, int a2, int a3)
{
  int v19 = a2;
  int v20 = a1;
  int valuePtr = a3;
  CVPixelBufferPoolRef poolOut = 0;
  int v15 = 1024;
  int v16 = 16;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (result)
  {
    BOOL v5 = result;
    CFNumberRef v6 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
    if (!v6) {
      goto LABEL_6;
    }
    CFNumberRef v7 = v6;
    CFDictionarySetValue(v5, (const void *)*MEMORY[0x263F04180], v6);
    CFRelease(v7);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFNumberRef v9 = CFNumberCreate(v3, kCFNumberIntType, &v15);
    CFDictionarySetValue(v5, (const void *)*MEMORY[0x263F0ED58], v9);
    CFRelease(v9);
    CFDictionaryAddValue(v5, (const void *)*MEMORY[0x263F04130], Mutable);
    CFRelease(Mutable);
    CFNumberRef v10 = CFNumberCreate(v3, kCFNumberIntType, &v20);
    if (!v10) {
      goto LABEL_6;
    }
    CFNumberRef v11 = v10;
    CFDictionarySetValue(v5, (const void *)*MEMORY[0x263F04240], v10);
    CFRelease(v11);
    CFNumberRef v12 = CFNumberCreate(v3, kCFNumberIntType, &v19);
    if (v12)
    {
      CFNumberRef v13 = v12;
      CFDictionarySetValue(v5, (const void *)*MEMORY[0x263F04118], v12);
      CFRelease(v13);
      CFNumberRef v14 = CFNumberCreate(v3, kCFNumberIntType, &v16);
      CFDictionarySetValue(v5, (const void *)*MEMORY[0x263F04198], v14);
      CFRelease(v14);
      CVPixelBufferPoolCreate(v3, 0, v5, &poolOut);
      CFRelease(v5);
      return poolOut;
    }
    else
    {
LABEL_6:
      CFRelease(v5);
      return 0;
    }
  }
  return result;
}

void sub_22225B384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22225BA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EDRMetaData_RBSP::EDRMetaData_RBSP(EDRMetaData_RBSP *this)
{
  var168 = this->var168;
  this->var1 = 0;
  *(void *)&this->var2 = 0;
  var163 = this->var163;
  this->var4 = 0;
  var133 = this->var133;
  this->var6 = 0;
  this->var7 = 0;
  this->var5 = 0;
  *(void *)&this->var10 = 0;
  *(char **)((char *)&this->var12 + 4) = 0;
  *(char **)((char *)&this->var11 + 4) = 0;
  *(char **)((char *)&this->var13 + 4) = (char *)0xFFFFFFFF00000000;
  this->var0 = (void **)&unk_26D4AD648;
  this->var18 = 0;
  *(_WORD *)&this->var19 = 0;
  this->var15 = 0;
  this->var16 = 0;
  this->var17 = 0;
  *(void *)&this->var22 = 0;
  *(void *)&this->var24 = 0;
  this->var21 = 0;
  *(void *)&this->var31 = 0;
  *(void *)&this->var29 = 0;
  this->var33 = 0;
  *(void *)&this->var34 = 0x200000002;
  *(void *)&this->var52 = 0;
  *(_OWORD *)&this->var36 = 0u;
  *(_OWORD *)&this->var40 = 0u;
  *(_OWORD *)&this->var44 = 0u;
  *(_OWORD *)&this->var47 = 0u;
  this->var54 = -1;
  *(void *)&this->var55 = 0;
  *(void *)&this->var57 = 0;
  *(void *)&this->var60[1] = 0x100000001;
  var132 = this->var132;
  *(_OWORD *)this->var59 = xmmword_2222D0C90;
  bzero(&this->var61, 0x63884uLL);
  this->var132[8] = 0;
  *(_OWORD *)var132 = xmmword_2222D0DEC;
  *(_OWORD *)&this->var132[4] = unk_2222D0DFC;
  *(void *)var133 = 0x201F9FA000000000;
  var133[2] = 538943392;
  this->var134[8] = 15705;
  *(_OWORD *)this->var134 = xmmword_2222D0E10;
  *(_OWORD *)&this->var134[4] = unk_2222D0E20;
  *((_OWORD *)var133 + 3) = xmmword_2222D0CA0;
  *((_OWORD *)var133 + 4) = xmmword_2222D0CB0;
  *((void *)var133 + 10) = 0xE700000003ELL;
  var133[22] = 42;
  *(_OWORD *)&this->var156[4].var11[1] = 0u;
  *(_OWORD *)&this->var156[3].var12[4] = 0u;
  *(_OWORD *)&this->var156[4].var7 = 0u;
  *(_OWORD *)&this->var156[3].var0 = 0u;
  *(_OWORD *)&this->var156[3].var8 = 0u;
  *(_OWORD *)&this->var156[2].var1 = 0u;
  *(_OWORD *)&this->var156[2].var9 = 0u;
  *(_OWORD *)&this->var156[1].var2 = 0u;
  *(_OWORD *)&this->var156[1].var10 = 0u;
  *(_OWORD *)&this->var156[0].var3 = 0u;
  *(_OWORD *)this->var156[0].var11 = 0u;
  *(_OWORD *)&this->var153.var0 = 0u;
  *(_OWORD *)&this->var155.var0 = 0u;
  *(_OWORD *)&this->var151[6].var4 = 0u;
  *(_OWORD *)&this->var151[7].var4 = 0u;
  *(_OWORD *)&this->var151[4].var4 = 0u;
  *(_OWORD *)&this->var151[5].var4 = 0u;
  *(_OWORD *)&this->var151[2].var4 = 0u;
  *(_OWORD *)&this->var151[3].var4 = 0u;
  *(_OWORD *)&this->var151[0].var4 = 0u;
  *(_OWORD *)&this->var151[1].var4 = 0u;
  *(_OWORD *)&this->var146 = 0u;
  *(_OWORD *)&this->var150.var0 = 0u;
  *(_WORD *)&this->var161.var5 = 0;
  *(_OWORD *)&this->var159.var0 = 0u;
  *(_OWORD *)&this->var158[3].var6 = 0u;
  *(_OWORD *)&this->var158[2].var12 = 0u;
  *(_OWORD *)&this->var158[2].var4 = 0u;
  *(_OWORD *)&this->var158[1].var10 = 0u;
  *(_OWORD *)&this->var158[1].var2 = 0u;
  *(_OWORD *)&this->var158[0].var8 = 0u;
  *(_OWORD *)&this->var158[0].var0 = 0u;
  *(_OWORD *)&this->var157.var3 = 0u;
  this->var162[8] = 0;
  *(_OWORD *)this->var162 = xmmword_2222D0DEC;
  *(_OWORD *)&this->var162[4] = unk_2222D0DFC;
  *(void *)var163 = 0x201F9FA000000000;
  var163[2] = 538943392;
  this->var164[8] = 15705;
  *(_OWORD *)this->var164 = xmmword_2222D0E10;
  *(_OWORD *)&this->var164[4] = unk_2222D0E20;
  memcpy(this->var165, &unk_2222D0E34, sizeof(this->var165));
  *(void *)&this->var166[2][16] = 0;
  *(_OWORD *)&this->var166[2][4] = xmmword_2222D1018;
  *(_OWORD *)&this->var166[2][8] = unk_2222D1028;
  *(_OWORD *)&this->var166[2][12] = xmmword_2222D1038;
  *(_OWORD *)&this->var166[1][6] = xmmword_2222D0FD8;
  *(_OWORD *)&this->var166[1][10] = unk_2222D0FE8;
  *(_OWORD *)&this->var166[1][14] = xmmword_2222D0FF8;
  *(_OWORD *)&this->var166[2][0] = unk_2222D1008;
  *(_OWORD *)&this->var166[0][8] = xmmword_2222D0F98;
  *(_OWORD *)&this->var166[0][12] = unk_2222D0FA8;
  *(_OWORD *)&this->var166[0][16] = xmmword_2222D0FB8;
  *(_OWORD *)&this->var166[1][2] = unk_2222D0FC8;
  *(_OWORD *)&this->var166[0][0] = xmmword_2222D0F78;
  *(_OWORD *)&this->var166[0][4] = unk_2222D0F88;
  *(_OWORD *)&this->var167[0][0][1][7] = xmmword_2222D1090;
  *(_OWORD *)&this->var167[0][0][2][2] = unk_2222D10A0;
  *(_OWORD *)&this->var167[0][0][2][5] = unk_2222D10AC;
  *(_OWORD *)&this->var167[0][0][0][0] = xmmword_2222D1050;
  *(_OWORD *)&this->var167[0][0][0][4] = unk_2222D1060;
  *(_OWORD *)&this->var167[0][0][0][8] = xmmword_2222D1070;
  *(_OWORD *)&this->var167[0][0][1][3] = unk_2222D1080;
  *(void *)var168 = 0x300000007;
  var168[2] = 3;
}

void HDR10PlusMetaData_RBSP::HDR10PlusMetaData_RBSP(HDR10PlusMetaData_RBSP *this)
{
  this->var1 = 0;
  *(void *)&this->var2 = 0;
  this->var4 = 0;
  this->var6 = 0;
  this->var7 = 0;
  this->var5 = 0;
  *(void *)&this->var10 = 0;
  *(char **)((char *)&this->var12 + 4) = 0;
  *(char **)((char *)&this->var11 + 4) = 0;
  *(char **)((char *)&this->var13 + 4) = (char *)0xFFFFFFFF00000000;
  this->var0 = (void **)&unk_26D4AD710;
  *(_WORD *)&this->var15 = 4;
  this->var17 = -75;
  *(_DWORD *)&this->var18 = 65596;
  *(_WORD *)&this->var20 = 260;
  this->var22 = 1;
  this->var23 = 0;
  this->var24 = 0;
  *(void *)this->var25 = 0;
  *(void *)&this->var25[2] = 0;
  *(_WORD *)&this->var27 = 9;
  *(void *)&this->var28[1] = 0;
  *(_OWORD *)this->var29 = 0u;
  *(_OWORD *)&this->var29[4] = 0u;
  *(_OWORD *)((char *)&this->var29[7] + 1) = 0u;
  *(_DWORD *)((char *)&this->var36[7] + 1) = 0;
  *(void *)this->var36 = 0;
  *(void *)&this->var36[4] = 0;
  *(void *)this->var38 = 0x5F5A4B32190A0501;
  this->var38[8] = 99;
}

double deriveSrcRect(void *a1, int16x4_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, int32x4_t a7, float a8, int32x4_t a9, double a10, int32x4_t a11)
{
  *(float32x2_t *)a9.i8 = vcvt_f32_s32((int32x2_t)__PAIR64__(a6, a5));
  a11.i64[0] = __PAIR64__(a4, a3);
  *(float *)&a7.i32[1] = a8;
  *(int16x4_t *)a7.i8 = vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(*a2), vzip1q_s32(a11, a11))), (float32x4_t)vzip1q_s32(a7, a7)), (float32x4_t)vzip1q_s32(a9, a9))));
  *a1 = a7.i64[0];
  return *(double *)a7.i64;
}

float createVerticesFromRect(float *a1, __int16 *a2, int a3, int a4, __int16 *a5, int a6, int a7)
{
  float v7 = 2.0 / (double)a3;
  float v8 = 2.0 / (double)a4;
  float v9 = 1.0 / (double)a6;
  float v10 = 1.0 / (double)a7;
  float v11 = (float)((float)*a2 * v7) + -1.0;
  float v12 = (float)((float)a2[2] * v8) + -1.0;
  float v13 = (float)*a5;
  *a1 = v11;
  a1[1] = v12;
  float v14 = v9 * v13;
  float v15 = v10 * (float)a5[2];
  a1[2] = v14;
  a1[3] = v15;
  float result = (float)((float)a2[1] * v7) + -1.0;
  a1[4] = result;
  a1[5] = v12;
  float v17 = v9 * (float)a5[1];
  a1[6] = v17;
  a1[7] = v15;
  float v18 = (float)((float)a2[3] * v8) + -1.0;
  a1[8] = v11;
  a1[9] = v18;
  float v19 = v10 * (float)a5[3];
  a1[10] = v14;
  a1[11] = v19;
  a1[12] = result;
  a1[13] = v18;
  a1[14] = v17;
  a1[15] = v19;
  return result;
}

BOOL createHDRRect(_WORD *a1, int a2, int a3, int a4, int a5)
{
  BOOL v6 = a2 < a3 && a4 < a5;
  if (v6)
  {
    *a1 = a2;
    a1[1] = a3;
    a1[2] = a4;
    a1[3] = a5;
  }
  return v6;
}

uint64_t createHDRRectFromHDRRegion(_WORD *a1, int *a2)
{
  int v2 = *a2;
  int v3 = a2[1];
  *a1 = *a2;
  int v4 = a2[3];
  a1[1] = a2[2] + v2;
  a1[2] = v3;
  a1[3] = v4 + v3;
  return 1;
}

__int16 *validHDRRect(__int16 *result)
{
  if (result) {
    return (__int16 *)((*result & 0x80000000) == 0
  }
                    && (result[1] & 0x80000000) == 0
                    && (result[2] & 0x80000000) == 0
                    && (result[3] & 0x80000000) == 0
                    && (unsigned __int16)*result < (unsigned __int16)result[1]
                    && (unsigned __int16)result[2] < (unsigned __int16)result[3]);
  return result;
}

BOOL sameHDRRect(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_22225C0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22225C1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22225CB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_22225CF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22225D178(_Unwind_Exception *exception_object)
{
}

void sub_22225D780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_22225D9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22225DA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22226075C(_Unwind_Exception *exception_object)
{
}

void sub_222260888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222609B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222260AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222260B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222260C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22226140C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222262C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222262DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222262E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float getStaticToneCurves(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float *a9, float *a10, float *a11, float *a12)
{
  float v18 = a4;
  float v19 = a3;
  float v22 = sqrtf((float)(a3 + a4) / (float)(a1 + a2));
  if (v22 <= 1.0) {
    float v23 = v22;
  }
  else {
    float v23 = 1.0;
  }
  float v24 = sqrtf(5.3923 / log2f(a8));
  float v25 = (float)(sqrtf(1.0 / v23) * v24) / 0.33333;
  *a9 = v25;
  float v26 = (float)((float)((float)((float)(a5 - a1) + (float)(a5 - a1)) / (float)(a2 - a1)) * a5)
      * (float)((float)(1.0 - v23) * v24);
  if ((float)(a6 - v26) > v19) {
    float v19 = a6 - v26;
  }
  if ((float)(a7 - v26) < v18) {
    float v18 = a7 - v26;
  }
  float v27 = a5 - v26;
  if (v27 <= v18) {
    float v28 = v27;
  }
  else {
    float v28 = v18;
  }
  if (v27 >= v19) {
    float v29 = v28;
  }
  else {
    float v29 = v19;
  }
  float v30 = powf(a6, v25);
  float v31 = powf(a5, v25);
  float v32 = powf(a7, v25);
  float v33 = powf(v19, 3.0);
  float v34 = powf(v29, 3.0);
  float v35 = powf(v18, 3.0);
  float v36 = (float)((float)((float)(v32 - v30) * (float)(v31 * v34)) + (float)((float)(v32 * v35) * (float)(v30 - v31)))
      + (float)((float)(v30 * v33) * (float)(v31 - v32));
  *a10 = (float)((float)((float)((float)((float)(v30 * v32) * (float)(v35 - v33)) * v34)
                       + (float)((float)((float)(v31 * v32) * (float)(v34 - v35)) * v33))
               + (float)((float)((float)(v30 * v31) * (float)(v33 - v34)) * v35))
       / v36;
  *a11 = (float)((float)((float)((float)-(float)((float)(v32 * v35) - (float)(v30 * v33)) * v34)
                       + (float)((float)-(float)((float)(v31 * v34) - (float)(v32 * v35)) * v33))
               + (float)((float)-(float)((float)(v30 * v33) - (float)(v31 * v34)) * v35))
       / v36;
  float result = (float)((float)((float)((float)(v32 - v31) * v33) - (float)((float)(v32 - v30) * v34))
                 + (float)((float)(v31 - v30) * v35))
         / v36;
  *a12 = result;
  return result;
}

float clampSDRMaxBrigtness(float result, float a2, float a3, unsigned __int8 a4)
{
  if ((int)result > (int)a2)
  {
    ++_MergedGlobals_4;
    float result = a2;
  }
  if (((result == 0.0) & a4) != 0) {
    float result = a2;
  }
  if ((int)result <= 99)
  {
    ++qword_26ABE1E00;
    return a3;
  }
  return result;
}

void sub_2222641F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

float iosurface_get_edrfactor(__IOSurface *a1)
{
  return 1.0;
}

void sub_2222643BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222265DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_2222664EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222266598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222266720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double *SortAscend(double *result, int32x2_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v4 = 0;
      int v5 = 0;
      double v6 = *result;
      float v7 = a2;
      do
      {
        float v8 = &result[v4];
        double v9 = v8[1];
        if (v6 <= v9)
        {
          double v6 = v8[1];
        }
        else
        {
          result[v4] = v9;
          v8[1] = v6;
          *float v7 = vrev64_s32(*v7);
          int v5 = 1;
        }
        ++v4;
        float v7 = (int32x2_t *)((char *)v7 + 4);
      }
      while (v3 != v4);
      if (v3 < 2) {
        break;
      }
      --v3;
    }
    while (v5);
  }
  return result;
}

double *SortDescend(double *result, int32x2_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v4 = 0;
      int v5 = 0;
      double v6 = *result;
      float v7 = a2;
      do
      {
        float v8 = &result[v4];
        double v9 = v8[1];
        if (v6 >= v9)
        {
          double v6 = v8[1];
        }
        else
        {
          result[v4] = v9;
          v8[1] = v6;
          *float v7 = vrev64_s32(*v7);
          int v5 = 1;
        }
        ++v4;
        float v7 = (int32x2_t *)((char *)v7 + 4);
      }
      while (v3 != v4);
      if (v3 < 2) {
        break;
      }
      --v3;
    }
    while (v5);
  }
  return result;
}

uint64_t GetPrimaries(unsigned int a1, _OWORD *a2)
{
  if (a1 > 0x12) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = (_OWORD *)((char *)&V8PrimartTbl + 32 * a1);
  *a2 = *v3;
  a2[1] = v3[1];
  return 26;
}

char *GetPrimariesPtr(unsigned int a1)
{
  if (a1 <= 0x12) {
    return (char *)&V8PrimartTbl + 32 * a1;
  }
  else {
    return 0;
  }
}

void BuildDisplayIdxTbl()
{
  for (uint64_t i = 0; i != 140; i += 20)
    DisplayIdxTbl[*(unsigned __int16 *)((char *)&DisplayTbl + i)] = (char *)&DisplayTbl + i;
}

uint64_t GetDisplay(unsigned int a1)
{
  if (a1 > 0x31) {
    return 0;
  }
  uint64_t result = DisplayIdxTbl[a1];
  if (!result) {
    return 0;
  }
  return result;
}

unsigned char *MemCpyByte(unsigned char *result, char *a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    do
    {
      char v4 = *a2++;
      *result++ = v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t AssignM33I2I(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    for (uint64_t j = 0; j != 6; j += 2)
      *(_WORD *)(a2 + j) = *(_WORD *)(result + j);
    a2 += 6;
    result += 6;
  }
  return result;
}

uint64_t GetXyz2LmsM33(uint64_t a1)
{
  for (uint64_t i = 0; i != 36; ++i)
    *(unsigned char *)(a1 + i) = m33Xyz2LmsFxp[i];
  return 28;
}

uint64_t GetLms2IctcpDmM33(uint64_t a1)
{
  for (uint64_t i = 0; i != 18; i += 6)
  {
    uint64_t v2 = a1 + i;
    *(_DWORD *)uint64_t v2 = *(_DWORD *)((char *)&m33Lms2IctcpDmFxp + i);
    *(_WORD *)(v2 + 4) = *(_WORD *)((char *)&m33Lms2IctcpDmFxp + i + 4);
  }
  return 12;
}

uint64_t GetCtM33(uint64_t result, _DWORD *a2, char a3)
{
  int v3 = (1 << a3) - 2 * result;
  *a2 = v3;
  a2[1] = result;
  a2[2] = result;
  a2[3] = result;
  a2[4] = v3;
  a2[5] = result;
  a2[6] = result;
  a2[7] = result;
  a2[8] = v3;
  return result;
}

void Xyz2IctcpDm(void *a1, _DWORD *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = (107438129 * *a1 + 189943091 * v3 - 21691083 * v4) >> 28;
  uint64_t v6 = (-60746434 * *a1 + 312812022 * v3 + 12267708 * v4) >> 28;
  uint64_t v7 = (246484133 * v4) >> 28;
  uint64_t v8 = 10485 * v6;
  uint64_t v9 = 10485 * v7 + 241174 * v5;
  BOOL v10 = __OFADD__(v9, 10485 * v6);
  uint64_t v12 = v9 + 10485 * v6;
  char v11 = (v12 < 0) ^ v10;
  uint64_t v13 = v12 >> 18;
  v5 *= 10485;
  uint64_t v14 = v5 + 10485 * v7 + 241174 * v6;
  uint64_t v15 = v5 + 241174 * v7 + v8;
  if (v11) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v13;
  }
  if (v14 >= 0) {
    uint64_t v17 = v14 >> 18;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v15 >= 0) {
    uint64_t v18 = v15 >> 18;
  }
  else {
    uint64_t v18 = 0;
  }
  float v19 = (float)v16 * 0.0000038147;
  if (v19 >= 0.0)
  {
    float v22 = powf(v19 * 0.0001, 0.1593);
    float v21 = powf((float)((float)(v22 * 18.852) + 0.83594) / (float)((float)(v22 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v20 = powf(v19 * -0.0001, 0.1593);
    float v21 = 0.0000014619 - powf((float)((float)(v20 * 18.852) + 0.83594) / (float)((float)(v20 * 18.688) + 1.0), 78.844);
  }
  float v23 = (float)v17 * 0.0000038147;
  if (v23 >= 0.0)
  {
    float v26 = powf(v23 * 0.0001, 0.1593);
    float v25 = powf((float)((float)(v26 * 18.852) + 0.83594) / (float)((float)(v26 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v24 = powf(v23 * -0.0001, 0.1593);
    float v25 = 0.0000014619 - powf((float)((float)(v24 * 18.852) + 0.83594) / (float)((float)(v24 * 18.688) + 1.0), 78.844);
  }
  float v27 = (float)v18 * 0.0000038147;
  if (v27 >= 0.0)
  {
    float v30 = powf(v27 * 0.0001, 0.1593);
    float v29 = powf((float)((float)(v30 * 18.852) + 0.83594) / (float)((float)(v30 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v28 = powf(v27 * -0.0001, 0.1593);
    float v29 = 0.0000014619 - powf((float)((float)(v28 * 18.852) + 0.83594) / (float)((float)(v28 * 18.688) + 1.0), 78.844);
  }
  signed int v31 = vcvts_n_s32_f32(v25, 0x12uLL);
  signed int v32 = vcvts_n_s32_f32(v21, 0x12uLL);
  uint64_t v33 = (int)vcvts_n_s32_f32(v29, 0x12uLL);
  *a2 = (unint64_t)(v31 + (uint64_t)v32) >> 1;
  a2[1] = (unint64_t)(0xFFFFFFFE56ALL * v31 + 3305 * v32 + 3501 * v33) >> 12;
  a2[2] = (unint64_t)(0xFFFFFFFBC12 * v31 + 17933 * v32 + 0xFFFFFFFFDE1 * v33) >> 12;
}

uint64_t sint_abs(uint64_t result)
{
  if (result == 0x80000000) {
    unsigned int v1 = 0x7FFFFFFF;
  }
  else {
    unsigned int v1 = -(int)result;
  }
  if ((int)result >= 0) {
    return result;
  }
  else {
    return v1;
  }
}

uint64_t Adjust64M33ScaleTo16M33Rounded(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v5 = a1;
  int Int64M33Precision = FindInt64M33Precision(a1);
  if (Int64M33Precision <= 15)
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      for (uint64_t j = 0; j != 3; ++j)
      {
        uint64_t v19 = *(void *)(v5 + 8 * j);
        if (v19 >= 0x7FFF) {
          uint64_t v19 = 0x7FFFLL;
        }
        if (v19 <= -32768) {
          LOWORD(v19) = 0x8000;
        }
        *(_WORD *)(a3 + 2 * j) = v19;
      }
      a3 += 6;
      v5 += 24;
    }
  }
  else
  {
    uint64_t v7 = 0;
    __int16 v8 = Int64M33Precision - 15;
    int v9 = (1 << (Int64M33Precision - 15)) + 1;
    int v10 = v9 >> 1;
    uint64_t v11 = (uint64_t)v9 >> 1;
    uint64_t v12 = -(uint64_t)v10;
    do
    {
      for (uint64_t k = 0; k != 3; ++k)
      {
        uint64_t v14 = *(void *)(v5 + 8 * k);
        if (v14 <= 0) {
          uint64_t v15 = v12;
        }
        else {
          uint64_t v15 = v11;
        }
        uint64_t v16 = (v15 + v14) >> v8;
        if (v16 >= 0x7FFF) {
          uint64_t v16 = 0x7FFFLL;
        }
        if (v16 <= -32768) {
          LOWORD(v16) = 0x8000;
        }
        *(_WORD *)(a3 + 2 * k) = v16;
      }
      ++v7;
      a3 += 6;
      v5 += 24;
    }
    while (v7 != 3);
    a2 -= v8;
  }
  return a2;
}

uint64_t FindInt64M33Precision(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  do
  {
    for (uint64_t i = 0; i != 24; i += 8)
    {
      uint64_t v4 = *(void *)(a1 + i);
      if (v4 == 0x8000000000000000) {
        uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v5 = -v4;
      }
      if (v4 < 0) {
        uint64_t v4 = v5;
      }
      if (v4 > v2) {
        uint64_t v2 = v4;
      }
    }
    ++v1;
    a1 += 24;
  }
  while (v1 != 3);
  unint64_t v6 = -1;
  do
    ++v6;
  while (v6 <= 0x3F && 1 << v6 < v2);
  return (__int16)v6;
}

uint64_t APPLY_CT2RIGHT(uint64_t a1, __int16 a2, int a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v10 = *MEMORY[0x263EF8340];
  do
  {
    *(void *)&v9[8 * v4 + 72] = (*(__int16 *)(a1 + 2 * v4 + 6)
                                 + *(__int16 *)(a1 + 2 * v4)
                                 + *(__int16 *)(a1 + 2 * v4 + 12))
                                * (uint64_t)a3;
    ++v4;
  }
  while (v4 != 3);
  uint64_t v5 = 0;
  unint64_t v6 = v9;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
      *(void *)&v6[8 * i] = *(void *)&v9[8 * i + 72] + *(__int16 *)(a1 + 2 * i) * (uint64_t)(-3 * a3 + 0x8000);
    ++v5;
    v6 += 24;
    a1 += 6;
  }
  while (v5 != 3);
  return Adjust64M33ScaleTo16M33Rounded((uint64_t)v9, a2 + 15, a4);
}

uint64_t GetRgb2XyzM33ByPrims(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  uint64_t v9 = (a4 - a6) * (uint64_t)((int)result - a5) - (a2 - a6) * (uint64_t)(a3 - a5);
  if ((v9 & 0x3FFFFFFFC000000) == 0)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (a8) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  uint64_t v10 = (int)(v9 >> 26);
  uint64_t v11 = ((a4 - a6) * (uint64_t)(a7 - a5) - (a3 - a5) * (uint64_t)(a8 - a6)) / v10;
  uint64_t v12 = (((int)result - a5) * (uint64_t)(a8 - a6) - (a2 - a6) * (uint64_t)(a7 - a5)) / v10;
  if (!a8) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v13 = v12 + v11;
  uint64_t v14 = (v11 << 26) / a8;
  uint64_t v15 = (v12 << 26) / a8;
  uint64_t v16 = (0x10000000000000 - (v13 << 26)) / a8;
LABEL_6:
  *a9 = (unint64_t)(v14 * (int)result) >> 26;
  a9[1] = (unint64_t)(v15 * a3) >> 26;
  a9[2] = (unint64_t)(v16 * a5) >> 26;
  a9[3] = (unint64_t)(v14 * a2) >> 26;
  a9[4] = (unint64_t)(v15 * a4) >> 26;
  a9[5] = (unint64_t)(v16 * a6) >> 26;
  a9[6] = (unint64_t)(v14 * (0x4000000 - ((int)result + a2))) >> 26;
  a9[7] = (unint64_t)(v15 * (0x4000000 - (a3 + a4))) >> 26;
  a9[8] = (unint64_t)(v16 * (0x4000000 - (a5 + a6))) >> 26;
  return result;
}

uint64_t GetRgb2XyzM33ByV8Prims(int *a1, _DWORD *a2)
{
  return GetRgb2XyzM33ByPrims(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t GetRgb2LmsByPrimsM33Fxp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  GetRgb2XyzM33ByPrims(a1, a2, a3, a4, a5, a6, a7, a8, v29);
  uint64_t v10 = 0;
  uint64_t v11 = (uint64_t *)v30;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = &m33Xyz2LmsFxp[12 * v10];
    int v14 = *(_DWORD *)v13;
    int v15 = *((_DWORD *)v13 + 1);
    int v16 = *((_DWORD *)v13 + 2);
    uint64_t v17 = v11;
    do
    {
      *v17++ = ((int)v29[v12] * (uint64_t)v14 + (int)v29[v12 + 3] * (uint64_t)v15 + (int)v29[v12 + 6] * (uint64_t)v16) >> 23;
      ++v12;
    }
    while (v12 != 3);
    ++v10;
    v11 += 3;
  }
  while (v10 != 3);
  int Int64M33Precision = FindInt64M33Precision((uint64_t)v30);
  if (Int64M33Precision <= 15)
  {
    uint64_t v24 = 0;
    float v25 = v30;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v27 = *(void *)&v25[8 * i];
        if (v27 >= 0x7FFF) {
          uint64_t v27 = 0x7FFFLL;
        }
        if (v27 <= -32768) {
          LOWORD(v27) = 0x8000;
        }
        *(_WORD *)(a9 + 2 * i) = v27;
      }
      ++v24;
      a9 += 6;
      v25 += 24;
    }
    while (v24 != 3);
    return 31;
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = v30;
    do
    {
      for (uint64_t j = 0; j != 3; ++j)
      {
        uint64_t v22 = *(uint64_t *)&v20[8 * j] >> (Int64M33Precision - 15);
        if (v22 >= 0x7FFF) {
          uint64_t v22 = 0x7FFFLL;
        }
        if (v22 <= -32768) {
          LOWORD(v22) = 0x8000;
        }
        *(_WORD *)(a9 + 2 * j) = v22;
      }
      ++v19;
      a9 += 6;
      v20 += 24;
    }
    while (v19 != 3);
    return (__int16)(46 - Int64M33Precision);
  }
}

uint64_t GetRgb2LmsByV8PrimsM33Fxp(int *a1, uint64_t a2)
{
  return GetRgb2LmsByPrimsM33Fxp(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

void sub_222268938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222268AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *EDRMetaData_RBSP::setRBSP(EDRMetaData_RBSP *this, unsigned __int8 *a2, size_t a3)
{
  commonRBSP::setRBSP((commonRBSP *)this, a2, a3);
  uint64_t result = (char *)malloc_type_malloc(a3, 0xA0ACBE3FuLL);
  this->var11 = result;
  this->var12 = result;
  this->var13 = &result[a3];
  return result;
}

__n128 EDRMetaData_RBSP::copy_dm_data(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 268);
  *(void *)(a2 + 4) = *(void *)(a1 + 407988);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 407996);
  uint64_t v2 = (_DWORD *)(a2 + 64);
  uint64_t v3 = (int *)(a1 + 408048);
  uint64_t v4 = 9;
  do
  {
    *(v2 - 12) = *(v3 - 12);
    int v5 = *v3++;
    *v2++ = v5;
    --v4;
  }
  while (v4);
  for (uint64_t i = 0; i != 12; i += 4)
    *(_DWORD *)(a2 + 52 + i) = *(_DWORD *)(a1 + 408036 + i);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 408084);
  *(_OWORD *)(a2 + 116) = *(_OWORD *)(a1 + 408100);
  *(void *)(a2 + 148) = *(void *)(a1 + 408132);
  *(_OWORD *)(a2 + 132) = *(_OWORD *)(a1 + 408116);
  *(void *)(a2 + 156) = *(void *)(a1 + 408144);
  long long v7 = *(_OWORD *)(a1 + 408152);
  long long v8 = *(_OWORD *)(a1 + 408168);
  long long v9 = *(_OWORD *)(a1 + 408184);
  *(_OWORD *)(a2 + 212) = *(_OWORD *)(a1 + 408200);
  *(_OWORD *)(a2 + 196) = v9;
  *(_OWORD *)(a2 + 180) = v8;
  *(_OWORD *)(a2 + 164) = v7;
  long long v10 = *(_OWORD *)(a1 + 408216);
  long long v11 = *(_OWORD *)(a1 + 408232);
  long long v12 = *(_OWORD *)(a1 + 408264);
  *(_OWORD *)(a2 + 260) = *(_OWORD *)(a1 + 408248);
  *(_OWORD *)(a2 + 276) = v12;
  *(_OWORD *)(a2 + 244) = v11;
  *(_OWORD *)(a2 + 228) = v10;
  *(void *)(a2 + 292) = *(void *)(a1 + 408280);
  int v13 = *(_DWORD *)(a1 + 408288);
  *(_WORD *)(a2 + 304) = *(_WORD *)(a1 + 408292);
  *(_DWORD *)(a2 + 300) = v13;
  uint64_t v14 = *(void *)(a1 + 408294);
  *(_WORD *)(a2 + 314) = *(_WORD *)(a1 + 408302);
  *(void *)(a2 + 306) = v14;
  uint64_t v15 = *(void *)(a1 + 408304);
  *(_WORD *)(a2 + 324) = *(_WORD *)(a1 + 408312);
  *(void *)(a2 + 316) = v15;
  long long v16 = *(_OWORD *)(a1 + 408410);
  long long v18 = *(_OWORD *)(a1 + 408362);
  long long v17 = *(_OWORD *)(a1 + 408378);
  *(_OWORD *)(a2 + 406) = *(_OWORD *)(a1 + 408394);
  *(_OWORD *)(a2 + 422) = v16;
  *(_OWORD *)(a2 + 374) = v18;
  *(_OWORD *)(a2 + 390) = v17;
  long long v20 = *(_OWORD *)(a1 + 408442);
  long long v19 = *(_OWORD *)(a1 + 408458);
  long long v21 = *(_OWORD *)(a1 + 408426);
  *(_OWORD *)(a2 + 480) = *(_OWORD *)(a1 + 408468);
  *(_OWORD *)(a2 + 454) = v20;
  *(_OWORD *)(a2 + 470) = v19;
  *(_OWORD *)(a2 + 438) = v21;
  long long v22 = *(_OWORD *)(a1 + 408314);
  long long v23 = *(_OWORD *)(a1 + 408346);
  *(_OWORD *)(a2 + 342) = *(_OWORD *)(a1 + 408330);
  *(_OWORD *)(a2 + 358) = v23;
  *(_OWORD *)(a2 + 326) = v22;
  long long v24 = *(_OWORD *)(a1 + 408484);
  *(void *)(a2 + 510) = *(void *)(a1 + 408498);
  *(_OWORD *)(a2 + 496) = v24;
  long long v25 = *(_OWORD *)(a1 + 408602);
  long long v27 = *(_OWORD *)(a1 + 408554);
  long long v26 = *(_OWORD *)(a1 + 408570);
  *(_OWORD *)(a2 + 598) = *(_OWORD *)(a1 + 408586);
  *(_OWORD *)(a2 + 614) = v25;
  *(_OWORD *)(a2 + 566) = v27;
  *(_OWORD *)(a2 + 582) = v26;
  __n128 result = *(__n128 *)(a1 + 408506);
  long long v29 = *(_OWORD *)(a1 + 408538);
  *(_OWORD *)(a2 + 534) = *(_OWORD *)(a1 + 408522);
  *(_OWORD *)(a2 + 550) = v29;
  *(__n128 *)(a2 + 518) = result;
  LODWORD(v15) = *(_DWORD *)(a1 + 408618);
  *(_WORD *)(a2 + 634) = *(_WORD *)(a1 + 408622);
  *(_DWORD *)(a2 + 630) = v15;
  *(_DWORD *)(a2 + 636) = *(_DWORD *)(a1 + 408624);
  *(void *)(a2 + 640) = *(void *)(a1 + 408628);
  return result;
}

unsigned int *EDRMetaData_RBSP::copy_rpu_data(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a2 + 20152);
  *(void *)a2 = *(void *)(a1 + 228);
  *(void *)(a2 + 12) = *(void *)(a1 + 184);
  uint64_t v5 = (*(_DWORD *)(a1 + 792) + 1);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a2 + 24) = v5;
  int v6 = *(_DWORD *)(a1 + 796);
  uint64_t v7 = (v6 + 1);
  BOOL v8 = v6 == -1;
  int v9 = *(_DWORD *)(a1 + 800);
  *(_DWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 32) = v9;
  int v10 = *(_DWORD *)(a1 + 252);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 236) + 8;
  int v11 = *(_DWORD *)(a1 + 208);
  int v12 = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(a2 + 36) = v10;
  *(_DWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 44) = v12;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 340) + 2;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 344) + 2;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 348) + 2;
  long long v13 = *(_OWORD *)(a1 + 460);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 476);
  *(_OWORD *)(a2 + 60) = v13;
  long long v14 = *(_OWORD *)(a1 + 492);
  long long v15 = *(_OWORD *)(a1 + 508);
  long long v16 = *(_OWORD *)(a1 + 524);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 540);
  *(_OWORD *)(a2 + 124) = v16;
  *(_OWORD *)(a2 + 108) = v15;
  *(_OWORD *)(a2 + 92) = v14;
  long long v17 = *(_OWORD *)(a1 + 556);
  long long v18 = *(_OWORD *)(a1 + 572);
  long long v19 = *(_OWORD *)(a1 + 588);
  *(_OWORD *)(a2 + 204) = *(_OWORD *)(a1 + 604);
  *(_OWORD *)(a2 + 188) = v19;
  *(_OWORD *)(a2 + 172) = v18;
  *(_OWORD *)(a2 + 156) = v17;
  long long v20 = *(_OWORD *)(a1 + 620);
  long long v21 = *(_OWORD *)(a1 + 636);
  long long v22 = *(_OWORD *)(a1 + 652);
  *(void *)(a2 + 268) = *(void *)(a1 + 668);
  *(_OWORD *)(a2 + 252) = v22;
  *(_OWORD *)(a2 + 236) = v21;
  *(_OWORD *)(a2 + 220) = v20;
  long long v23 = *(_OWORD *)(a1 + 804);
  long long v24 = *(_OWORD *)(a1 + 836);
  *(_OWORD *)(a2 + 292) = *(_OWORD *)(a1 + 820);
  *(_OWORD *)(a2 + 308) = v24;
  *(_OWORD *)(a2 + 276) = v23;
  long long v25 = *(_OWORD *)(a1 + 852);
  long long v26 = *(_OWORD *)(a1 + 868);
  long long v27 = *(_OWORD *)(a1 + 884);
  *(_OWORD *)(a2 + 368) = *(_OWORD *)(a1 + 896);
  *(_OWORD *)(a2 + 340) = v26;
  *(_OWORD *)(a2 + 356) = v27;
  *(_OWORD *)(a2 + 324) = v25;
  long long v29 = *(_OWORD *)(a1 + 2056);
  long long v28 = *(_OWORD *)(a1 + 2072);
  long long v30 = *(_OWORD *)(a1 + 2040);
  *(_OWORD *)(a2 + 476) = *(_OWORD *)(a1 + 2084);
  *(_OWORD *)(a2 + 448) = v29;
  *(_OWORD *)(a2 + 464) = v28;
  *(_OWORD *)(a2 + 432) = v30;
  long long v31 = *(_OWORD *)(a1 + 1992);
  long long v32 = *(_OWORD *)(a1 + 2024);
  *(_OWORD *)(a2 + 400) = *(_OWORD *)(a1 + 2008);
  *(_OWORD *)(a2 + 416) = v32;
  *(_OWORD *)(a2 + 384) = v31;
  long long v34 = *(_OWORD *)(a1 + 2164);
  long long v33 = *(_OWORD *)(a1 + 2180);
  long long v35 = *(_OWORD *)(a1 + 2148);
  *(_OWORD *)(a2 + 584) = *(_OWORD *)(a1 + 2192);
  *(_OWORD *)(a2 + 556) = v34;
  *(_OWORD *)(a2 + 572) = v33;
  *(_OWORD *)(a2 + 540) = v35;
  long long v36 = *(_OWORD *)(a1 + 2100);
  long long v37 = *(_OWORD *)(a1 + 2132);
  *(_OWORD *)(a2 + 508) = *(_OWORD *)(a1 + 2116);
  *(_OWORD *)(a2 + 524) = v37;
  *(_OWORD *)(a2 + 492) = v36;
  long long v38 = *(_OWORD *)(a1 + 2208);
  long long v39 = *(_OWORD *)(a1 + 2240);
  *(_OWORD *)(a2 + 616) = *(_OWORD *)(a1 + 2224);
  *(_OWORD *)(a2 + 632) = v39;
  *(_OWORD *)(a2 + 600) = v38;
  long long v40 = *(_OWORD *)(a1 + 2256);
  long long v41 = *(_OWORD *)(a1 + 2272);
  long long v42 = *(_OWORD *)(a1 + 2288);
  *(_OWORD *)(a2 + 692) = *(_OWORD *)(a1 + 2300);
  *(_OWORD *)(a2 + 664) = v41;
  *(_OWORD *)(a2 + 680) = v42;
  *(_OWORD *)(a2 + 648) = v40;
  long long v43 = *(_OWORD *)(a1 + 2316);
  long long v44 = *(_OWORD *)(a1 + 2348);
  *(_OWORD *)(a2 + 724) = *(_OWORD *)(a1 + 2332);
  *(_OWORD *)(a2 + 740) = v44;
  *(_OWORD *)(a2 + 708) = v43;
  long long v45 = *(_OWORD *)(a1 + 2364);
  long long v46 = *(_OWORD *)(a1 + 2380);
  long long v47 = *(_OWORD *)(a1 + 2396);
  *(_OWORD *)(a2 + 800) = *(_OWORD *)(a1 + 2408);
  *(_OWORD *)(a2 + 772) = v46;
  *(_OWORD *)(a2 + 788) = v47;
  *(_OWORD *)(a2 + 756) = v45;
  v186 = (int *)(a2 + 816);
  memcpy((void *)(a2 + 816), (const void *)(a1 + 2424), 0x144uLL);
  memcpy((void *)(a2 + 1140), (const void *)(a1 + 2748), 0x144uLL);
  long long v48 = *(_OWORD *)(a1 + 3072);
  long long v49 = *(_OWORD *)(a1 + 3088);
  *(_OWORD *)(a2 + 3440) = *(_OWORD *)(a1 + 3104);
  *(_OWORD *)(a2 + 3424) = v49;
  *(_OWORD *)(a2 + 3408) = v48;
  long long v50 = *(_OWORD *)(a1 + 3120);
  long long v51 = *(_OWORD *)(a1 + 3136);
  long long v52 = *(_OWORD *)(a1 + 3152);
  *(_OWORD *)(a2 + 3500) = *(_OWORD *)(a1 + 3164);
  *(_OWORD *)(a2 + 3488) = v52;
  *(_OWORD *)(a2 + 3472) = v51;
  *(_OWORD *)(a2 + 3456) = v50;
  long long v54 = *(_OWORD *)(a1 + 3244);
  long long v53 = *(_OWORD *)(a1 + 3260);
  long long v55 = *(_OWORD *)(a1 + 3228);
  *(_OWORD *)(a2 + 3608) = *(_OWORD *)(a1 + 3272);
  *(_OWORD *)(a2 + 3580) = v54;
  *(_OWORD *)(a2 + 3596) = v53;
  *(_OWORD *)(a2 + 3564) = v55;
  long long v56 = *(_OWORD *)(a1 + 3212);
  long long v57 = *(_OWORD *)(a1 + 3180);
  *(_OWORD *)(a2 + 3532) = *(_OWORD *)(a1 + 3196);
  *(_OWORD *)(a2 + 3548) = v56;
  *(_OWORD *)(a2 + 3516) = v57;
  long long v58 = *(_OWORD *)(a1 + 3320);
  long long v59 = *(_OWORD *)(a1 + 3288);
  *(_OWORD *)(a2 + 3640) = *(_OWORD *)(a1 + 3304);
  *(_OWORD *)(a2 + 3656) = v58;
  *(_OWORD *)(a2 + 3624) = v59;
  long long v61 = *(_OWORD *)(a1 + 3352);
  long long v60 = *(_OWORD *)(a1 + 3368);
  long long v62 = *(_OWORD *)(a1 + 3336);
  *(_OWORD *)(a2 + 3716) = *(_OWORD *)(a1 + 3380);
  *(_OWORD *)(a2 + 3688) = v61;
  *(_OWORD *)(a2 + 3704) = v60;
  *(_OWORD *)(a2 + 3672) = v62;
  memcpy((void *)(a2 + 3732), (const void *)(a1 + 3396), 0xBD0uLL);
  memcpy((void *)(a2 + 6756), (const void *)(a1 + 6420), 0xBD0uLL);
  memcpy((void *)(a2 + 18856), (const void *)(a1 + 9444), 0x288uLL);
  memcpy((void *)(a2 + 19504), (const void *)(a1 + 10092), 0x144uLL);
  memcpy((void *)(a2 + 21824), (const void *)(a1 + 10740), 0x30000uLL);
  __n128 result = (unsigned int *)memcpy((void *)(a2 + 218432), (const void *)(a1 + 207348), 0x30000uLL);
  int v64 = *(_DWORD *)(a1 + 708);
  *uint64_t v4 = *(_DWORD *)(a1 + 260);
  v4[1] = v64;
  uint64_t v65 = (*(_DWORD *)(a1 + 712) + 2);
  v4[2] = v65;
  int v66 = *(_DWORD *)(a1 + 784);
  long long v67 = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a2 + 20164) = *(_OWORD *)(a1 + 752);
  *(_OWORD *)(a2 + 20180) = v67;
  *(_DWORD *)(a2 + 20196) = v66;
  long long v69 = *(_OWORD *)(a1 + 406808);
  long long v68 = *(_OWORD *)(a1 + 406824);
  long long v70 = *(_OWORD *)(a1 + 406792);
  *(_OWORD *)(a2 + 20292) = *(_OWORD *)(a1 + 406836);
  *(_OWORD *)(a2 + 20264) = v69;
  *(_OWORD *)(a2 + 20280) = v68;
  *(_OWORD *)(a2 + 20248) = v70;
  long long v71 = *(_OWORD *)(a1 + 406744);
  long long v72 = *(_OWORD *)(a1 + 406776);
  *(_OWORD *)(a2 + 20216) = *(_OWORD *)(a1 + 406760);
  *(_OWORD *)(a2 + 20232) = v72;
  *(_OWORD *)(a2 + 20200) = v71;
  long long v74 = *(_OWORD *)(a1 + 406916);
  long long v73 = *(_OWORD *)(a1 + 406932);
  long long v75 = *(_OWORD *)(a1 + 406900);
  *(_OWORD *)(a2 + 20400) = *(_OWORD *)(a1 + 406944);
  *(_OWORD *)(a2 + 20372) = v74;
  *(_OWORD *)(a2 + 20388) = v73;
  *(_OWORD *)(a2 + 20356) = v75;
  long long v76 = *(_OWORD *)(a1 + 406852);
  long long v77 = *(_OWORD *)(a1 + 406884);
  *(_OWORD *)(a2 + 20324) = *(_OWORD *)(a1 + 406868);
  *(_OWORD *)(a2 + 20340) = v77;
  *(_OWORD *)(a2 + 20308) = v76;
  long long v78 = *(_OWORD *)(a1 + 407008);
  long long v79 = *(_OWORD *)(a1 + 407024);
  long long v80 = *(_OWORD *)(a1 + 407040);
  *(_OWORD *)(a2 + 20508) = *(_OWORD *)(a1 + 407052);
  *(_OWORD *)(a2 + 20496) = v80;
  *(_OWORD *)(a2 + 20480) = v79;
  *(_OWORD *)(a2 + 20464) = v78;
  long long v82 = *(_OWORD *)(a1 + 406960);
  long long v81 = *(_OWORD *)(a1 + 406976);
  *(_OWORD *)(a2 + 20448) = *(_OWORD *)(a1 + 406992);
  *(_OWORD *)(a2 + 20416) = v82;
  *(_OWORD *)(a2 + 20432) = v81;
  long long v83 = *(_OWORD *)(a1 + 407116);
  long long v84 = *(_OWORD *)(a1 + 407132);
  long long v85 = *(_OWORD *)(a1 + 407148);
  *(_OWORD *)(a2 + 20836) = *(_OWORD *)(a1 + 407160);
  *(_OWORD *)(a2 + 20808) = v84;
  *(_OWORD *)(a2 + 20824) = v85;
  *(_OWORD *)(a2 + 20792) = v83;
  long long v86 = *(_OWORD *)(a1 + 407068);
  long long v87 = *(_OWORD *)(a1 + 407100);
  *(_OWORD *)(a2 + 20760) = *(_OWORD *)(a1 + 407084);
  *(_OWORD *)(a2 + 20776) = v87;
  *(_OWORD *)(a2 + 20744) = v86;
  long long v88 = *(_OWORD *)(a1 + 407224);
  long long v89 = *(_OWORD *)(a1 + 407240);
  long long v90 = *(_OWORD *)(a1 + 407256);
  *(_OWORD *)(a2 + 20944) = *(_OWORD *)(a1 + 407268);
  *(_OWORD *)(a2 + 20916) = v89;
  *(_OWORD *)(a2 + 20932) = v90;
  *(_OWORD *)(a2 + 20900) = v88;
  long long v91 = *(_OWORD *)(a1 + 407176);
  long long v92 = *(_OWORD *)(a1 + 407208);
  *(_OWORD *)(a2 + 20868) = *(_OWORD *)(a1 + 407192);
  *(_OWORD *)(a2 + 20884) = v92;
  *(_OWORD *)(a2 + 20852) = v91;
  long long v93 = *(_OWORD *)(a1 + 407332);
  long long v94 = *(_OWORD *)(a1 + 407348);
  long long v95 = *(_OWORD *)(a1 + 407364);
  *(_OWORD *)(a2 + 21268) = *(_OWORD *)(a1 + 407376);
  *(_OWORD *)(a2 + 21240) = v94;
  *(_OWORD *)(a2 + 21256) = v95;
  *(_OWORD *)(a2 + 21224) = v93;
  long long v96 = *(_OWORD *)(a1 + 407284);
  long long v97 = *(_OWORD *)(a1 + 407316);
  *(_OWORD *)(a2 + 21192) = *(_OWORD *)(a1 + 407300);
  *(_OWORD *)(a2 + 21208) = v97;
  *(_OWORD *)(a2 + 21176) = v96;
  long long v98 = *(_OWORD *)(a1 + 407440);
  long long v99 = *(_OWORD *)(a1 + 407456);
  long long v100 = *(_OWORD *)(a1 + 407472);
  *(_OWORD *)(a2 + 21376) = *(_OWORD *)(a1 + 407484);
  *(_OWORD *)(a2 + 21348) = v99;
  *(_OWORD *)(a2 + 21364) = v100;
  *(_OWORD *)(a2 + 21332) = v98;
  long long v101 = *(_OWORD *)(a1 + 407392);
  long long v102 = *(_OWORD *)(a1 + 407424);
  *(_OWORD *)(a2 + 21300) = *(_OWORD *)(a1 + 407408);
  *(_OWORD *)(a2 + 21316) = v102;
  *(_OWORD *)(a2 + 21284) = v101;
  long long v103 = *(_OWORD *)(a1 + 407548);
  long long v104 = *(_OWORD *)(a1 + 407564);
  long long v105 = *(_OWORD *)(a1 + 407580);
  *(_OWORD *)(a2 + 21700) = *(_OWORD *)(a1 + 407592);
  *(_OWORD *)(a2 + 21672) = v104;
  *(_OWORD *)(a2 + 21688) = v105;
  *(_OWORD *)(a2 + 21656) = v103;
  long long v106 = *(_OWORD *)(a1 + 407500);
  long long v107 = *(_OWORD *)(a1 + 407532);
  *(_OWORD *)(a2 + 21624) = *(_OWORD *)(a1 + 407516);
  *(_OWORD *)(a2 + 21640) = v107;
  *(_OWORD *)(a2 + 21608) = v106;
  long long v108 = *(_OWORD *)(a1 + 407656);
  long long v109 = *(_OWORD *)(a1 + 407672);
  long long v110 = *(_OWORD *)(a1 + 407688);
  *(_OWORD *)(a2 + 21808) = *(_OWORD *)(a1 + 407700);
  *(_OWORD *)(a2 + 21780) = v109;
  *(_OWORD *)(a2 + 21796) = v110;
  *(_OWORD *)(a2 + 21764) = v108;
  long long v111 = *(_OWORD *)(a1 + 407608);
  long long v112 = *(_OWORD *)(a1 + 407640);
  *(_OWORD *)(a2 + 21732) = *(_OWORD *)(a1 + 407624);
  *(_OWORD *)(a2 + 21748) = v112;
  *(_OWORD *)(a2 + 21716) = v111;
  if (!v8)
  {
    uint64_t v113 = 0;
    float v114 = (float)(1 << v12);
    uint64_t v184 = v7;
    v185 = (unsigned int *)(a2 + 2760);
    v115 = (uint64_t *)(a2 + 1464);
    do
    {
      if (v5)
      {
        uint64_t v116 = 0;
        __n128 result = v185;
        v117 = v186;
        v118 = v115;
        do
        {
          uint64_t v119 = 0;
          v120 = v117;
          v121 = v118;
          v122 = result;
          do
          {
            uint64_t v123 = *(unsigned int *)(a2 + 4 * v119 + 48);
            if (v123)
            {
              uint64_t v124 = 0;
              v125 = v120;
              v126 = v121;
              v127 = (float *)v122;
              do
              {
                int v128 = *(_DWORD *)(a2 + 108 * v113 + 108 * v116 + 36 * v119 + 4 * v124 + 384);
                if ((v128 + 1) > 1) {
                  uint64_t v129 = (v128 + 1);
                }
                else {
                  uint64_t v129 = 1;
                }
                v130 = v125;
                v131 = v126;
                v132 = v127;
                do
                {
                  uint64_t v133 = *v130;
                  uint64_t v134 = v130[81];
                  *v131++ = (v133 << v12) | v134;
                  *v132++ = (float)((float)v134 / v114) + (float)(int)v133;
                  ++v130;
                  --v129;
                }
                while (v129);
                ++v124;
                v127 += 6;
                v126 += 6;
                v125 += 3;
              }
              while (v124 != v123);
            }
            ++v119;
            v122 += 54;
            v121 += 54;
            v120 += 27;
          }
          while (v119 != 3);
          ++v116;
          result += 162;
          v118 += 162;
          v117 += 81;
        }
        while (v116 != v5);
      }
      ++v113;
      v185 += 162;
      v115 += 162;
      v186 += 81;
    }
    while (v113 != v184);
    uint64_t v135 = 0;
    v136 = (float *)(a2 + 15832);
    v137 = (unsigned int *)(a2 + 3624);
    v138 = (uint64_t *)(a2 + 9784);
    do
    {
      if (v5)
      {
        uint64_t v139 = 0;
        v140 = v138;
        v141 = v137;
        v142 = v136;
        do
        {
          __n128 result = 0;
          v143 = v140;
          v144 = v141;
          v145 = v142;
          do
          {
            uint64_t v146 = *(unsigned int *)(a2 + 4 * (void)result + 48);
            v147 = v143;
            v148 = v144;
            v149 = v145;
            if (v146)
            {
              do
              {
                uint64_t v150 = (uint64_t)(int)*(v148 - 27) << v12;
                unsigned int v151 = *v148++;
                uint64_t v152 = v150 | v151;
                uint64_t *v147 = v152;
                v147 += 28;
                float *v149 = (float)v152 / v114;
                v149 += 28;
                --v146;
              }
              while (v146);
            }
            __n128 result = (unsigned int *)((char *)result + 1);
            v145 += 252;
            v144 += 9;
            v143 += 252;
          }
          while (result != (unsigned int *)3);
          ++v139;
          v142 += 756;
          v141 += 27;
          v140 += 756;
        }
        while (v139 != v5);
      }
      ++v135;
      v136 += 756;
      v137 += 27;
      v138 += 756;
    }
    while (v135 != v184);
    uint64_t v153 = 0;
    uint64_t v154 = a2 + 9840;
    v155 = (unsigned int *)a2;
    do
    {
      if (v5)
      {
        uint64_t v156 = 0;
        uint64_t v157 = v154;
        __n128 result = v155;
        do
        {
          uint64_t v158 = 0;
          uint64_t v159 = v157;
          v160 = result;
          do
          {
            uint64_t v161 = *(unsigned int *)(a2 + 4 * v158 + 48);
            if (v161)
            {
              uint64_t v162 = 0;
              uint64_t v163 = v159;
              v164 = v160;
              do
              {
                int v165 = *(_DWORD *)(a2 + 108 * v153 + 108 * v156 + 36 * v158 + 4 * v162 + 3408);
                if (v165)
                {
                  if ((v165 + 1) > 2) {
                    uint64_t v166 = (v165 + 1);
                  }
                  else {
                    uint64_t v166 = 2;
                  }
                  uint64_t v167 = v163;
                  v168 = v164;
                  uint64_t v169 = 1;
                  do
                  {
                    uint64_t v170 = 0;
                    v171 = v168;
                    do
                    {
                      uint64_t v172 = ((uint64_t)(int)v171[940] << v12) | v171[1696];
                      *(void *)(v167 + v170) = v172;
                      *((float *)v171 + 3965) = (float)v172 / v114;
                      v170 += 8;
                      ++v171;
                    }
                    while (v170 != 56);
                    ++v169;
                    v168 += 7;
                    v167 += 56;
                  }
                  while (v169 != v166);
                }
                ++v162;
                v164 += 28;
                v163 += 224;
              }
              while (v162 != v161);
            }
            ++v158;
            v160 += 252;
            v159 += 2016;
          }
          while (v158 != 3);
          ++v156;
          result += 756;
          v157 += 6048;
        }
        while (v156 != v5);
      }
      ++v153;
      v155 += 756;
      v154 += 6048;
    }
    while (v153 != v184);
    uint64_t v173 = 0;
    v174 = (unint64_t *)(a2 + 20528);
    v175 = (unsigned int *)(a2 + 20308);
    do
    {
      if (v5)
      {
        uint64_t v176 = 0;
        v177 = v175;
        v178 = v174;
        do
        {
          uint64_t v179 = 0;
          v180 = v177;
          v181 = v178;
          do
          {
            __n128 result = v180;
            v182 = v181;
            uint64_t v183 = v65;
            if (v65)
            {
              do
              {
                v182[108] = ((unint64_t)result[217] << v12) | result[244];
                v182[54] = ((unint64_t)result[109] << v12) | result[136];
                unint64_t *v182 = ((unint64_t)*result << v12) | result[27];
                v182 += 3;
                result += 3;
                --v183;
              }
              while (v183);
            }
            ++v179;
            ++v181;
            ++v180;
          }
          while (v179 != 3);
          ++v176;
          v178 += 27;
          v177 += 27;
        }
        while (v176 != v5);
      }
      ++v173;
      v174 += 27;
      v175 += 27;
    }
    while (v173 != v184);
  }
  return result;
}

uint64_t EDRMetaData_RBSP::parse_rpu_data(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  bzero(a2, 0x65548uLL);
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 406512) = 0u;
  *(_OWORD *)(a1 + 406484) = 0u;
  *(_OWORD *)(a1 + 406500) = 0u;
  *(_OWORD *)(a1 + 406452) = 0u;
  *(_OWORD *)(a1 + 406468) = 0u;
  *(_OWORD *)(a1 + 406420) = 0u;
  *(_OWORD *)(a1 + 406436) = 0u;
  *(_OWORD *)(a1 + 406636) = 0u;
  *(_OWORD *)(a1 + 406652) = 0u;
  *(_OWORD *)(a1 + 406668) = 0u;
  *(_OWORD *)(a1 + 406684) = 0u;
  *(_OWORD *)(a1 + 406700) = 0u;
  *(_OWORD *)(a1 + 406716) = 0u;
  *(_OWORD *)(a1 + 406728) = 0u;
  *(_DWORD *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 403956) = 0u;
  *(_OWORD *)(a1 + 405016) = 0u;
  *(_OWORD *)(a1 + 405032) = 0u;
  uint64_t v6 = EDRMetaData_RBSP::rpu_data_header((EDRMetaData_RBSP *)a1);
  if (v6) {
    goto LABEL_34;
  }
  if (*(_DWORD *)(a1 + 148)) {
    goto LABEL_39;
  }
  uint64_t v6 = EDRMetaData_RBSP::vdr_rpu_data_payload((EDRMetaData_RBSP *)a1);
  if (v6) {
    goto LABEL_34;
  }
  if (*(_DWORD *)(a1 + 148))
  {
LABEL_39:
    if (!*(void *)(a1 + 96))
    {
      memcpy((void *)(a1 + 2424), (const void *)(a1 + 408720), 0x144uLL);
      *(void *)(a1 + 340) = *(void *)(a1 + 409368);
      *(_DWORD *)(a1 + 348) = *(_DWORD *)(a1 + 409376);
      long long v7 = *(_OWORD *)(a1 + 409220);
      *(_OWORD *)(a1 + 620) = *(_OWORD *)(a1 + 409204);
      *(_OWORD *)(a1 + 636) = v7;
      *(_OWORD *)(a1 + 652) = *(_OWORD *)(a1 + 409236);
      *(void *)(a1 + 668) = *(void *)(a1 + 409252);
      long long v8 = *(_OWORD *)(a1 + 409156);
      *(_OWORD *)(a1 + 556) = *(_OWORD *)(a1 + 409140);
      *(_OWORD *)(a1 + 572) = v8;
      long long v9 = *(_OWORD *)(a1 + 409188);
      *(_OWORD *)(a1 + 588) = *(_OWORD *)(a1 + 409172);
      *(_OWORD *)(a1 + 604) = v9;
      long long v10 = *(_OWORD *)(a1 + 409092);
      *(_OWORD *)(a1 + 492) = *(_OWORD *)(a1 + 409076);
      *(_OWORD *)(a1 + 508) = v10;
      long long v11 = *(_OWORD *)(a1 + 409124);
      *(_OWORD *)(a1 + 524) = *(_OWORD *)(a1 + 409108);
      *(_OWORD *)(a1 + 540) = v11;
      long long v12 = *(_OWORD *)(a1 + 409060);
      *(_OWORD *)(a1 + 460) = *(_OWORD *)(a1 + 409044);
      *(_OWORD *)(a1 + 476) = v12;
      long long v13 = *(_OWORD *)(a1 + 409340);
      *(_OWORD *)(a1 + 2056) = *(_OWORD *)(a1 + 409324);
      *(_OWORD *)(a1 + 2072) = v13;
      *(_OWORD *)(a1 + 2084) = *(_OWORD *)(a1 + 409352);
      long long v14 = *(_OWORD *)(a1 + 409276);
      *(_OWORD *)(a1 + 1992) = *(_OWORD *)(a1 + 409260);
      *(_OWORD *)(a1 + 2008) = v14;
      long long v15 = *(_OWORD *)(a1 + 409308);
      *(_OWORD *)(a1 + 2024) = *(_OWORD *)(a1 + 409292);
      *(_OWORD *)(a1 + 2040) = v15;
    }
  }
  if (*(_DWORD *)(a1 + 256) == 1)
  {
    if (!*(void *)(a1 + 96))
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v16 = logInstanceID;
        }
        else {
          uint64_t v16 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 134218242;
          long long v24 = (const char *)WORD1(v16);
          __int16 v25 = 2080;
          long long v26 = "parse_rpu_data";
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: EDRMetaData_RBSP error reserved_zero_3bits=1, first frame, bail!\n", (uint8_t *)&v23, 0x16u);
        }
        prevLogInstanceID = v16;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315138;
        long long v24 = "parse_rpu_data";
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: EDRMetaData_RBSP error reserved_zero_3bits=1, first frame, bail!\n", (uint8_t *)&v23, 0xCu);
      }
      uint64_t v6 = *(unsigned int *)(a1 + 88);
      goto LABEL_34;
    }
    goto LABEL_23;
  }
  EDRMetaData_RBSP::vdr_dm_set_default((EDRMetaData_RBSP *)a1);
  if (!*(_DWORD *)(a1 + 268) || (uint64_t v17 = EDRMetaData_RBSP::vdr_dm_data_payload((EDRMetaData_RBSP *)a1), !v17))
  {
LABEL_23:
    EDRMetaData_RBSP::copy_rpu_data(a1, (uint64_t)a2);
    if (a3) {
      EDRMetaData_RBSP::copy_dm_data(a1, a3);
    }
    uint64_t v6 = 0;
    ++*(void *)(a1 + 96);
    goto LABEL_34;
  }
  uint64_t v6 = v17;
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v18 = logInstanceID;
    }
    else {
      uint64_t v18 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 134218242;
      long long v24 = (const char *)WORD1(v18);
      __int16 v25 = 2080;
      long long v26 = "parse_rpu_data";
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: EDRMetaData_RBSP error in vdr_dm_data_payload, bail!\n", (uint8_t *)&v23, 0x16u);
    }
    prevLogInstanceID = v18;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 136315138;
    long long v24 = "parse_rpu_data";
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: EDRMetaData_RBSP error in vdr_dm_data_payload, bail!\n", (uint8_t *)&v23, 0xCu);
  }
LABEL_34:
  long long v21 = *(void **)(a1 + 64);
  long long v20 = (void *)(a1 + 64);
  long long v19 = v21;
  if (v21)
  {
    free(v19);
    *long long v20 = 0;
    v20[1] = 0;
    v20[2] = 0;
  }
  return v6;
}

uint64_t EDRMetaData_RBSP::rpu_data_header(EDRMetaData_RBSP *this)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  int var1_high = HIBYTE(this->var1);
  commonRBSP::flush_bits((uint64_t *)this, 8);
  if (var1_high != 25)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v18 = logInstanceID;
      }
      else {
        uint64_t v18 = prevLogInstanceID;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      int v83 = 134218498;
      long long v84 = (const char *)WORD1(v18);
      __int16 v85 = 2080;
      *(void *)long long v86 = "rpu_data_header";
      *(_WORD *)&v86[8] = 1024;
      *(_DWORD *)long long v87 = var1_high;
      long long v19 = &_os_log_internal;
      long long v20 = " [1.419.54] #%04llx %s: EDRMetaData_RBSP error nal_unit_type = %d, bail!\n";
      goto LABEL_31;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return this->var14;
    }
    int v83 = 136315394;
    long long v84 = "rpu_data_header";
    __int16 v85 = 1024;
    *(_DWORD *)long long v86 = var1_high;
    long long v22 = &_os_log_internal;
    int v23 = " [1.419.54] %s: EDRMetaData_RBSP error nal_unit_type = %d, bail!\n";
    goto LABEL_93;
  }
  unint64_t v3 = this->var1 >> 58;
  commonRBSP::flush_bits((uint64_t *)this, 6);
  this->var22 = v3;
  if (v3 != 2)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v18 = logInstanceID;
      }
      else {
        uint64_t v18 = prevLogInstanceID;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      int v83 = 134218498;
      long long v84 = (const char *)WORD1(v18);
      __int16 v85 = 2080;
      *(void *)long long v86 = "rpu_data_header";
      *(_WORD *)&v86[8] = 1024;
      *(_DWORD *)long long v87 = v3;
      long long v19 = &_os_log_internal;
      long long v20 = " [1.419.54] #%04llx %s: EDRMetaData_RBSP error rpu_type = %d, bail!\n";
      goto LABEL_31;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return this->var14;
    }
    int v83 = 136315394;
    long long v84 = "rpu_data_header";
    __int16 v85 = 1024;
    *(_DWORD *)long long v86 = v3;
    long long v22 = &_os_log_internal;
    int v23 = " [1.419.54] %s: EDRMetaData_RBSP error rpu_type = %d, bail!\n";
LABEL_93:
    uint32_t v58 = 18;
    goto LABEL_94;
  }
  unint64_t v4 = this->var1 >> 53;
  commonRBSP::flush_bits((uint64_t *)this, 11);
  this->var25 = v4;
  this->var26 = v4 >> 8;
  this->var27 = v4 >> 4;
  this->var28 = v4 & 0xF;
  unint64_t v5 = this->var1 >> 60;
  commonRBSP::flush_bits((uint64_t *)this, 4);
  this->var29 = v5;
  unint64_t v6 = this->var1 >> 60;
  commonRBSP::flush_bits((uint64_t *)this, 4);
  this->unsigned int var30 = v6;
  unint64_t var1 = this->var1;
  commonRBSP::flush_bits((uint64_t *)this, 1);
  this->var31 = var1 >> 63;
  if ((var1 & 0x8000000000000000) != 0)
  {
    if (this->var32 == 2 && !this->var33) {
      this->var36 = commonRBSP::ue_v((commonRBSP *)this);
    }
    unint64_t v8 = this->var1 >> 63;
    commonRBSP::flush_bits((uint64_t *)this, 1);
    this->var37 = v8;
    unint64_t v9 = this->var1 >> 62;
    commonRBSP::flush_bits((uint64_t *)this, 2);
    this->var38 = v9;
    if (!v9)
    {
      this->var39 = commonRBSP::ue_v((commonRBSP *)this);
      if (this->var37) {
        this->var40 = commonRBSP::ue_v((commonRBSP *)this);
      }
    }
    unint64_t v10 = this->var1 >> 62;
    commonRBSP::flush_bits((uint64_t *)this, 2);
    this->var41 = v10;
    unint64_t v11 = this->var1 >> 63;
    commonRBSP::flush_bits((uint64_t *)this, 1);
    this->var42 = v11;
    if ((this->var25 & 0x700) == 0)
    {
      unsigned int v51 = commonRBSP::ue_v((commonRBSP *)this);
      if (v51 >= 6) {
        unsigned int v52 = 6;
      }
      else {
        unsigned int v52 = v51;
      }
      this->unsigned int var43 = v52;
      this->var44 = commonRBSP::ue_v((commonRBSP *)this);
      this->var45 = commonRBSP::ue_v((commonRBSP *)this);
      unint64_t v53 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 1);
      this->var46 = v53 >> 63;
      if ((v53 & 0x8000000000000000) != 0)
      {
        unint64_t v54 = this->var1;
        commonRBSP::flush_bits((uint64_t *)this, 1);
        this->var47 = v54 >> 63;
        if (!this->var38 && (v54 & 0x8000000000000000) != 0) {
          this->var48 = commonRBSP::ue_v((commonRBSP *)this);
        }
      }
      unint64_t v55 = this->var1 >> 61;
      commonRBSP::flush_bits((uint64_t *)this, 3);
      this->var50 = v55;
      unint64_t v56 = this->var1 >> 63;
      commonRBSP::flush_bits((uint64_t *)this, 1);
      this->var49 = v56;
      unint64_t v57 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 1);
      this->var51 = v57 >> 63;
      if ((v57 & 0x8000000000000000) == 0 && !this->var38 && this->var37) {
        this->var52 = commonRBSP::ue_v((commonRBSP *)this);
      }
    }
  }
  unint64_t v12 = this->var1 >> 63;
  commonRBSP::flush_bits((uint64_t *)this, 1);
  this->var53 = v12;
  unint64_t v13 = this->var1;
  commonRBSP::flush_bits((uint64_t *)this, 1);
  this->var23 = v13 >> 63;
  unsigned int v14 = commonRBSP::ue_v((commonRBSP *)this);
  unsigned int v15 = v14;
  if ((v13 & 0x8000000000000000) != 0)
  {
    uint64_t result = 0;
    this->var54 = v15;
  }
  else
  {
    this->var55 = v14;
    this->var56 = commonRBSP::ue_v((commonRBSP *)this);
    unsigned int v16 = commonRBSP::ue_v((commonRBSP *)this);
    unsigned int v17 = v16;
    this->uint64_t var57 = v16;
    if (v16 >= 3)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v18 = logInstanceID;
        }
        else {
          uint64_t v18 = prevLogInstanceID;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_33;
        }
        int v83 = 134218498;
        long long v84 = (const char *)WORD1(v18);
        __int16 v85 = 2080;
        *(void *)long long v86 = "rpu_data_header";
        *(_WORD *)&v86[8] = 1024;
        *(_DWORD *)long long v87 = v17;
        long long v19 = &_os_log_internal;
        long long v20 = " [1.419.54] #%04llx %s: ERROR: Out of bound! mapping_chroma_format_idc = %d, bail!\n";
LABEL_31:
        uint32_t v21 = 28;
LABEL_32:
        _os_log_impl(&dword_22224D000, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v83, v21);
        goto LABEL_33;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return this->var14;
      }
      int v83 = 136315394;
      long long v84 = "rpu_data_header";
      __int16 v85 = 1024;
      *(_DWORD *)long long v86 = v17;
      long long v22 = &_os_log_internal;
      int v23 = " [1.419.54] %s: ERROR: Out of bound! mapping_chroma_format_idc = %d, bail!\n";
      goto LABEL_93;
    }
    unsigned int var33 = this->var33;
    if ((this->var25 & 0x700) == 0 && (BOOL v26 = v16 == var33, var33 = v16, !v26) || this->var32 != var33)
    {
      unint64_t v27 = this->var1 >> 60;
      commonRBSP::flush_bits((uint64_t *)this, 4);
      this->var58 = v27;
      if (v27 == 14)
      {
        uint64_t var57 = this->var57;
        if (this->var34 != this->var59[var57])
        {
          unint64_t v29 = this->var1 >> 62;
          commonRBSP::flush_bits((uint64_t *)this, 2);
          this->var61 = v29;
          uint64_t var57 = this->var57;
        }
        if (this->var35 != this->var60[var57])
        {
          unint64_t v30 = this->var1 >> 62;
          commonRBSP::flush_bits((uint64_t *)this, 2);
          this->var62 = v30;
        }
        LODWORD(v27) = this->var58;
      }
      if (v27 == 15 && !this->var33 && this->var32 == 2)
      {
        unint64_t v31 = this->var1 >> 61;
        commonRBSP::flush_bits((uint64_t *)this, 3);
        this->var63 = v31;
        unint64_t v32 = this->var1 >> 61;
        commonRBSP::flush_bits((uint64_t *)this, 3);
        this->var64 = v32;
        if (this->var36 != 1)
        {
          unint64_t v33 = this->var1 >> 61;
          commonRBSP::flush_bits((uint64_t *)this, 3);
          this->var65 = v33;
          unint64_t v34 = this->var1 >> 61;
          commonRBSP::flush_bits((uint64_t *)this, 3);
          this->var66 = v34;
        }
      }
    }
    uint64_t v35 = 0;
    long long v36 = this->var68;
    do
    {
      unsigned int v37 = commonRBSP::ue_v((commonRBSP *)this);
      long long v38 = (char *)this + 4 * v35;
      *((_DWORD *)v38 + 85) = v37;
      if (v35) {
        unsigned int v39 = 3;
      }
      else {
        unsigned int v39 = 7;
      }
      if (v37 > v39)
      {
        unsigned int v48 = v37;
        if (!enableLogInstance)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return this->var14;
          }
          unsigned int var30 = this->var30;
          int v83 = 136315906;
          long long v84 = "rpu_data_header";
          __int16 v85 = 1024;
          *(_DWORD *)long long v86 = var30;
          *(_WORD *)&v86[4] = 1024;
          *(_DWORD *)&v86[6] = v35;
          *(_WORD *)long long v87 = 1024;
          *(_DWORD *)&v87[2] = v48;
          long long v22 = &_os_log_internal;
          int v23 = " [1.419.54] %s: ERROR: Out of bound! vdr_rpu_level = %d, num_pivots_minus2[%d] = %d, bail!\n";
          uint32_t v58 = 30;
          goto LABEL_94;
        }
        if (logInstanceID) {
          uint64_t v49 = logInstanceID;
        }
        else {
          uint64_t v49 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v50 = this->var30;
          int v83 = 134219010;
          long long v84 = (const char *)WORD1(v49);
          __int16 v85 = 2080;
          *(void *)long long v86 = "rpu_data_header";
          *(_WORD *)&v86[8] = 1024;
          *(_DWORD *)long long v87 = v50;
          *(_WORD *)&v87[4] = 1024;
          unsigned int v88 = v35;
          __int16 v89 = 1024;
          unsigned int v90 = v48;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: ERROR: Out of bound! vdr_rpu_level = %d, num_pivots_minus2[%d] = %d, bail!\n", (uint8_t *)&v83, 0x28u);
        }
        prevLogInstanceID = v49;
        return this->var14;
      }
      unint64_t v40 = 0;
      long long v41 = v38 + 340;
      do
      {
        unsigned int var43 = this->var43;
        unsigned int v43 = HIDWORD(this->var1) >> (24 - var43);
        commonRBSP::flush_bits((uint64_t *)this, var43 + 8);
        (*v36)[v40++] = v43;
      }
      while (v40 < (*v41 + 2));
      ++v35;
      ++v36;
    }
    while (v35 != 3);
    if ((this->var25 & 0x700) == 0 && this->var46)
    {
      unint64_t v60 = this->var1 >> 61;
      commonRBSP::flush_bits((uint64_t *)this, 3);
      this->var70 = v60;
      if (v60)
      {
        for (uint64_t i = 680; i != 692; i += 4)
        {
          unint64_t v62 = this->var1 >> 61;
          commonRBSP::flush_bits((uint64_t *)this, 3);
          *(_DWORD *)((char *)&this->var0 + i) = v62;
        }
      }
      unint64_t v63 = this->var1 >> 61;
      commonRBSP::flush_bits((uint64_t *)this, 3);
      this->var72 = v63;
      if (v63)
      {
        for (uint64_t j = 696; j != 708; j += 4)
        {
          unint64_t v65 = this->var1 >> 61;
          commonRBSP::flush_bits((uint64_t *)this, 3);
          *(_DWORD *)((char *)&this->var0 + j) = v65;
        }
      }
    }
    if ((this->var25 & 0x700) == 0 && !this->var51)
    {
      unint64_t v69 = this->var1 >> 61;
      commonRBSP::flush_bits((uint64_t *)this, 3);
      this->var74 = v69;
      if (this->var57 == 2)
      {
        unsigned int v70 = commonRBSP::ue_v((commonRBSP *)this);
        this->uint64_t var75 = v70;
        if (v70 > 7)
        {
          unsigned int v71 = v70;
          if (!enableLogInstance)
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return this->var14;
            }
            unsigned int v82 = this->var30;
            int v83 = 136315650;
            long long v84 = "rpu_data_header";
            __int16 v85 = 1024;
            *(_DWORD *)long long v86 = v82;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v71;
            long long v22 = &_os_log_internal;
            int v23 = " [1.419.54] %s: EDRMetaData_RBSP error vdr_rpu_level = %d, nlq_num_pivots_minus2 = %d, bail!\n";
            goto LABEL_130;
          }
          if (logInstanceID) {
            uint64_t v18 = logInstanceID;
          }
          else {
            uint64_t v18 = prevLogInstanceID;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v72 = this->var30;
            int v83 = 134218754;
            long long v84 = (const char *)WORD1(v18);
            __int16 v85 = 2080;
            *(void *)long long v86 = "rpu_data_header";
            *(_WORD *)&v86[8] = 1024;
            *(_DWORD *)long long v87 = v72;
            *(_WORD *)&v87[4] = 1024;
            unsigned int v88 = v71;
            long long v19 = &_os_log_internal;
            long long v20 = " [1.419.54] #%04llx %s: EDRMetaData_RBSP error vdr_rpu_level = %d, nlq_num_pivots_minus2 = %d, bail!\n";
            goto LABEL_113;
          }
LABEL_33:
          prevLogInstanceID = v18;
          return this->var14;
        }
      }
      else
      {
        this->uint64_t var75 = 0;
      }
      unint64_t v78 = 0;
      do
      {
        unsigned int v79 = this->var43;
        unsigned int v80 = HIDWORD(this->var1) >> (24 - v79);
        commonRBSP::flush_bits((uint64_t *)this, v79 + 8);
        this->var76[v78++] = v80;
      }
      while (v78 < this->var75 + 2);
      if (this->var57 != this->var32)
      {
        unint64_t v81 = this->var1 >> 61;
        commonRBSP::flush_bits((uint64_t *)this, 3);
        this->var78 = v81;
      }
    }
    this->unsigned int var79 = commonRBSP::ue_v((commonRBSP *)this);
    unsigned int v44 = commonRBSP::ue_v((commonRBSP *)this);
    this->var80 = v44;
    unsigned int var79 = this->var79;
    if (var79)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v46 = logInstanceID;
        }
        else {
          uint64_t v46 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v47 = this->var30;
          int v83 = 134218754;
          long long v84 = (const char *)WORD1(v46);
          __int16 v85 = 2080;
          *(void *)long long v86 = "rpu_data_header";
          *(_WORD *)&v86[8] = 1024;
          *(_DWORD *)long long v87 = v47;
          *(_WORD *)&v87[4] = 1024;
          unsigned int v88 = var79;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: EDRMetaData_RBSP error vdr_rpu_level = %d, num_x_partitions_minus1 = %d, bail!\n", (uint8_t *)&v83, 0x22u);
        }
        prevLogInstanceID = v46;
        return this->var14;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return this->var14;
      }
      unsigned int v68 = this->var30;
      int v83 = 136315650;
      long long v84 = "rpu_data_header";
      __int16 v85 = 1024;
      *(_DWORD *)long long v86 = v68;
      *(_WORD *)&v86[4] = 1024;
      *(_DWORD *)&v86[6] = var79;
      long long v22 = &_os_log_internal;
      int v23 = " [1.419.54] %s: EDRMetaData_RBSP error vdr_rpu_level = %d, num_x_partitions_minus1 = %d, bail!\n";
LABEL_130:
      uint32_t v58 = 24;
LABEL_94:
      _os_log_impl(&dword_22224D000, v22, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v83, v58);
      return this->var14;
    }
    unsigned int v66 = v44;
    if (v44)
    {
      if (!enableLogInstance)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return this->var14;
        }
        unsigned int v77 = this->var30;
        int v83 = 136315650;
        long long v84 = "rpu_data_header";
        __int16 v85 = 1024;
        *(_DWORD *)long long v86 = v77;
        *(_WORD *)&v86[4] = 1024;
        *(_DWORD *)&v86[6] = v66;
        long long v22 = &_os_log_internal;
        int v23 = " [1.419.54] %s: EDRMetaData_RBSP error vdr_rpu_level = %d, num_y_partitions_minus1 = %d, bail!\n";
        goto LABEL_130;
      }
      if (logInstanceID) {
        uint64_t v18 = logInstanceID;
      }
      else {
        uint64_t v18 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v67 = this->var30;
        int v83 = 134218754;
        long long v84 = (const char *)WORD1(v18);
        __int16 v85 = 2080;
        *(void *)long long v86 = "rpu_data_header";
        *(_WORD *)&v86[8] = 1024;
        *(_DWORD *)long long v87 = v67;
        *(_WORD *)&v87[4] = 1024;
        unsigned int v88 = v66;
        long long v19 = &_os_log_internal;
        long long v20 = " [1.419.54] #%04llx %s: EDRMetaData_RBSP error vdr_rpu_level = %d, num_y_partitions_minus1 = %d, bail!\n";
LABEL_113:
        uint32_t v21 = 34;
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    EDRMetaData_RBSP::assign_pivot_values(this);
    unsigned int v73 = this->var76[0];
    this->var77[0] = v73;
    uint64_t var75 = this->var75;
    if (var75 > 0xFFFFFFFD)
    {
      return 0;
    }
    else
    {
      uint64_t v75 = var75 + 1;
      long long v76 = &this->var77[1];
      uint64_t result = 0;
      do
      {
        v73 += *(v76 - 9);
        *v76++ = v73;
        --v75;
      }
      while (v75);
    }
  }
  return result;
}

uint64_t EDRMetaData_RBSP::vdr_rpu_data_payload(EDRMetaData_RBSP *this)
{
  unsigned int v2 = 0;
  while (2)
  {
    unsigned int v3 = 0;
    do
    {
      if (EDRMetaData_RBSP::rpu_data_mapping(this, v2, v3)) {
        return this->var14;
      }
      unsigned int var25 = this->var25;
      unsigned int var33 = this->var33;
      if ((var25 & 0x700) == 0 && this->var57 != var33 || this->var32 != var33)
      {
        EDRMetaData_RBSP::rpu_data_chroma_resampling(this, v2, v3);
        unsigned int var25 = this->var25;
      }
      if ((var25 & 0x700) == 0 && this->var47)
      {
        EDRMetaData_RBSP::rpu_data_spatial_resampling(this, v2, v3);
        unsigned int var25 = this->var25;
      }
      if ((var25 & 0x700) == 0 && !this->var51)
      {
        if (EDRMetaData_RBSP::rpu_data_nlq(this, v2, v3)) {
          return this->var14;
        }
        if (this->var57 != this->var32) {
          EDRMetaData_RBSP::rpu_data_el_chroma_resampling(this, v2, v3);
        }
      }
      ++v3;
    }
    while (v3 <= this->var79);
    if (++v2 <= this->var80) {
      continue;
    }
    break;
  }
  return 0;
}

EDRMetaData_RBSP *EDRMetaData_RBSP::vdr_dm_set_default(EDRMetaData_RBSP *this)
{
  uint64_t v1 = 0;
  long long v2 = *(_OWORD *)&this->var162[4];
  *(_OWORD *)this->var132 = *(_OWORD *)this->var162;
  *(_OWORD *)&this->var132[4] = v2;
  this->var132[8] = this->var162[8];
  *(void *)this->var133 = *(void *)this->var163;
  this->var133[2] = this->var163[2];
  long long v3 = *(_OWORD *)&this->var164[4];
  *(_OWORD *)this->var134 = *(_OWORD *)this->var164;
  *(_OWORD *)&this->var134[4] = v3;
  this->var134[8] = this->var164[8];
  *(void *)&this->var129 = 0;
  this->var131 = 0;
  *(_OWORD *)&this->var135 = xmmword_2222D0CA0;
  *(_OWORD *)&this->var139 = xmmword_2222D0CB0;
  *(_OWORD *)&this->var143 = xmmword_2222D1790;
  this->var150.var0 = 0;
  do
    this->var151[v1++].var0 = 0;
  while (v1 != 8);
  this->var152.var0 = 0;
  this->var153.var0 = 0;
  this->var154.var0 = 0;
  var156 = this->var156;
  uint64_t v5 = 5;
  *(void *)&long long v6 = 0x800080008000800;
  *((void *)&v6 + 1) = 0x800080008000800;
  this->var155.var0 = 0;
  do
  {
    *(_DWORD *)&var156->var0 = 0;
    var156->var2 = 0;
    *(_OWORD *)&var156->var3 = v6;
    *(void *)var156->var11 = 0x8080808080808080;
    *(_DWORD *)&var156->var12[2] = -2139062144;
    ++var156;
    --v5;
  }
  while (v5);
  uint64_t v7 = 0;
  this->var157.var0 = 0;
  do
    this->var158[v7++].var0 = 0;
  while (v7 != 4);
  this->var159.var0 = 0;
  this->var160.var0 = 0;
  this->var161.var0 = 0;
  return this;
}

uint64_t EDRMetaData_RBSP::vdr_dm_data_payload(EDRMetaData_RBSP *this)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  p_var129 = &this->var129;
  this->var129 = commonRBSP::ue_v((commonRBSP *)this);
  p_var129[1] = commonRBSP::ue_v((commonRBSP *)this);
  uint64_t v3 = 0;
  p_var129[2] = commonRBSP::ue_v((commonRBSP *)this);
  do
  {
    int var1_high = SHIWORD(this->var1);
    commonRBSP::flush_bits((uint64_t *)this, 16);
    this->var132[v3++] = var1_high;
  }
  while (v3 != 9);
  for (uint64_t i = 0; i != 3; ++i)
  {
    unsigned int v6 = HIDWORD(this->var1);
    commonRBSP::flush_bits((uint64_t *)this, 32);
    this->var133[i] = v6;
  }
  for (uint64_t j = 0; j != 9; ++j)
  {
    int v8 = SHIWORD(this->var1);
    commonRBSP::flush_bits((uint64_t *)this, 16);
    this->var134[j] = v8;
  }
  unsigned int v9 = HIWORD(this->var1);
  commonRBSP::flush_bits((uint64_t *)this, 16);
  p_var129[24] = v9;
  unsigned int v10 = HIWORD(this->var1);
  commonRBSP::flush_bits((uint64_t *)this, 16);
  p_var129[25] = v10;
  unsigned int v11 = HIWORD(this->var1);
  commonRBSP::flush_bits((uint64_t *)this, 16);
  p_var129[26] = v11;
  unsigned int v12 = HIDWORD(this->var1);
  commonRBSP::flush_bits((uint64_t *)this, 32);
  p_var129[27] = v12;
  unint64_t v13 = this->var1 >> 59;
  commonRBSP::flush_bits((uint64_t *)this, 5);
  p_var129[28] = v13;
  if ((v13 - 17) < 0xFFFFFFF7)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v14 = logInstanceID;
      }
      else {
        uint64_t v14 = prevLogInstanceID;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
      int v54 = 134218498;
      unint64_t v55 = (const char *)WORD1(v14);
      __int16 v56 = 2080;
      unint64_t v57 = "vdr_dm_data_payload";
      __int16 v58 = 1024;
      int v59 = v13;
      unsigned int v15 = &_os_log_internal;
      unsigned int v16 = " [1.419.54] #%04llx %s: EDRMetaData_RBSP error signal_bit_depth = %d, bail!\n";
LABEL_21:
      _os_log_impl(&dword_22224D000, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v54, 0x1Cu);
LABEL_22:
      prevLogInstanceID = v14;
      return this->var14;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return this->var14;
    }
    int v54 = 136315394;
    unint64_t v55 = "vdr_dm_data_payload";
    __int16 v56 = 1024;
    LODWORD(v57) = v13;
    unint64_t v27 = &_os_log_internal;
    long long v28 = " [1.419.54] %s: EDRMetaData_RBSP error signal_bit_depth = %d, bail!\n";
    goto LABEL_38;
  }
  unint64_t v17 = this->var1 >> 62;
  commonRBSP::flush_bits((uint64_t *)this, 2);
  p_var129[29] = v17;
  unint64_t v18 = this->var1 >> 62;
  commonRBSP::flush_bits((uint64_t *)this, 2);
  p_var129[30] = v18;
  unint64_t v19 = this->var1 >> 62;
  commonRBSP::flush_bits((uint64_t *)this, 2);
  p_var129[31] = v19;
  unint64_t v20 = this->var1 >> 52;
  commonRBSP::flush_bits((uint64_t *)this, 12);
  p_var129[32] = v20;
  unint64_t v21 = this->var1 >> 52;
  commonRBSP::flush_bits((uint64_t *)this, 12);
  p_var129[33] = v21;
  unint64_t v22 = this->var1 >> 54;
  commonRBSP::flush_bits((uint64_t *)this, 10);
  p_var129[34] = v22;
  unsigned int v23 = commonRBSP::ue_v((commonRBSP *)this);
  unsigned int v24 = v23;
  p_var129[35] = v23;
  if (v23 >= 0xFF)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v14 = logInstanceID;
      }
      else {
        uint64_t v14 = prevLogInstanceID;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
      int v54 = 134218498;
      unint64_t v55 = (const char *)WORD1(v14);
      __int16 v56 = 2080;
      unint64_t v57 = "vdr_dm_data_payload";
      __int16 v58 = 1024;
      int v59 = v24;
      unsigned int v15 = &_os_log_internal;
      unsigned int v16 = " [1.419.54] #%04llx %s: EDRMetaData_RBSP error num_ext_blocks = %d > 254, bail!\n";
      goto LABEL_21;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return this->var14;
    }
    int v54 = 136315394;
    unint64_t v55 = "vdr_dm_data_payload";
    __int16 v56 = 1024;
    LODWORD(v57) = v24;
    unint64_t v27 = &_os_log_internal;
    long long v28 = " [1.419.54] %s: EDRMetaData_RBSP error num_ext_blocks = %d > 254, bail!\n";
LABEL_38:
    _os_log_impl(&dword_22224D000, v27, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v54, 0x12u);
    return this->var14;
  }
  *((void *)p_var129 + 18) = 0;
  p_var129[38] = 0;
  if (!v23 || (commonRBSP::flush_bits((uint64_t *)this, this->var2 & 7), !p_var129[35]))
  {
    unsigned int v26 = 0;
LABEL_32:
    this->var16 = this->var1;
    int var2 = this->var2;
    this->int var17 = var2;
    this->var18 = this->var5;
    this->var19 = this->var9;
    this->var20 = this->var8;
    this->var21 = this->var12;
    commonRBSP::flush_bits((uint64_t *)this, var2 & 7);
    var11 = this->var11;
    unint64_t v31 = (char *)(this->var12 - var11 + this->var2 / -8 - 5);
    if ((char *)(this->var12 - var11 + this->var2 / -8) == (char *)5)
    {
      unsigned int v33 = -1;
    }
    else
    {
      unint64_t v32 = (unsigned __int8 *)(var11 + 1);
      unsigned int v33 = -1;
      do
      {
        int v34 = *v32++;
        unsigned int v33 = crc32_lut[v34 ^ HIBYTE(v33)] ^ (v33 << 8);
        --v31;
      }
      while (v31);
    }
    unsigned int v36 = HIDWORD(this->var1);
    commonRBSP::flush_bits((uint64_t *)this, 32);
    this->var24 = v36;
    if (v33 == v36) {
      goto LABEL_69;
    }
    this->unint64_t var1 = this->var16;
    int var17 = this->var17;
    this->int var2 = var17;
    var18 = this->var18;
    this->var5 = var18;
    this->var9 = this->var19;
    this->var8 = this->var20;
    this->var12 = this->var21;
    int v39 = LODWORD(this->var6) - var18;
    int v41 = var17 + 7;
    BOOL v40 = var17 < -7;
    int v42 = var17 + 14;
    if (!v40) {
      int v42 = v41;
    }
    if (v39 + (v42 >> 3) < 6) {
      goto LABEL_69;
    }
    int v43 = commonRBSP::ue_v((commonRBSP *)this);
    if (!v43) {
      goto LABEL_69;
    }
    int v44 = v43;
    commonRBSP::flush_bits((uint64_t *)this, this->var2 & 7);
    unsigned int v46 = v44 + v26;
    while (EDRMetaData_RBSP::ext_content_adaptive_metadata(this, v45, 1))
    {
      ++v26;
      if (!--v44)
      {
        unsigned int v26 = v46;
        goto LABEL_69;
      }
    }
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v47 = logInstanceID;
      }
      else {
        uint64_t v47 = prevLogInstanceID;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_65;
      }
      int v54 = 134218242;
      unint64_t v55 = (const char *)WORD1(v47);
      __int16 v56 = 2080;
      unint64_t v57 = "vdr_dm_data_payload";
      unsigned int v48 = &_os_log_internal;
      uint64_t v49 = " [1.419.54] #%04llx %s: EDRMetaData_RBSP error in ext_content_adaptive_metadata, EXT_BLOCK_PAYLOAD2, bail!\n";
LABEL_64:
      _os_log_impl(&dword_22224D000, v48, OS_LOG_TYPE_DEFAULT, v49, (uint8_t *)&v54, 0x16u);
LABEL_65:
      prevLogInstanceID = v47;
      goto LABEL_69;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_69;
    }
    int v54 = 136315138;
    unint64_t v55 = "vdr_dm_data_payload";
    unsigned int v50 = &_os_log_internal;
    unsigned int v51 = " [1.419.54] %s: EDRMetaData_RBSP error in ext_content_adaptive_metadata, EXT_BLOCK_PAYLOAD2, bail!\n";
LABEL_68:
    _os_log_impl(&dword_22224D000, v50, OS_LOG_TYPE_DEFAULT, v51, (uint8_t *)&v54, 0xCu);
    goto LABEL_69;
  }
  unsigned int v26 = 0;
  while (EDRMetaData_RBSP::ext_content_adaptive_metadata(this, v25, 0))
  {
    if (++v26 >= p_var129[35]) {
      goto LABEL_32;
    }
  }
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v47 = logInstanceID;
    }
    else {
      uint64_t v47 = prevLogInstanceID;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_65;
    }
    int v54 = 134218242;
    unint64_t v55 = (const char *)WORD1(v47);
    __int16 v56 = 2080;
    unint64_t v57 = "vdr_dm_data_payload";
    unsigned int v48 = &_os_log_internal;
    uint64_t v49 = " [1.419.54] #%04llx %s: EDRMetaData_RBSP error in ext_content_adaptive_metadata, EXT_BLOCK_PAYLOAD, bail!\n";
    goto LABEL_64;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v54 = 136315138;
    unint64_t v55 = "vdr_dm_data_payload";
    unsigned int v50 = &_os_log_internal;
    unsigned int v51 = " [1.419.54] %s: EDRMetaData_RBSP error in ext_content_adaptive_metadata, EXT_BLOCK_PAYLOAD, bail!\n";
    goto LABEL_68;
  }
LABEL_69:
  int v52 = p_var129[33];
  if (!v52)
  {
    int v52 = 3696;
    p_var129[33] = 3696;
  }
  int v53 = p_var129[32];
  if (!v53)
  {
    int v53 = 62;
    p_var129[32] = 62;
  }
  if (!*((_WORD *)p_var129 + 78))
  {
    *((_WORD *)p_var129 + 78) = 1;
    *((_WORD *)p_var129 + 79) = v53;
    *((_WORD *)p_var129 + 80) = v52;
    *((_WORD *)p_var129 + 81) = (v53 + v52) >> 1;
    ++v26;
  }
  uint64_t result = 0;
  p_var129[35] = v26;
  return result;
}

uint64_t set_dm_data_for_hdr10(uint64_t result)
{
  uint64_t v1 = 0;
  *(_OWORD *)(result + 16) = xmmword_2222D17A0;
  *(_OWORD *)(result + 32) = xmmword_2222D17B0;
  *(_DWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 64) = xmmword_2222D17C0;
  *(_OWORD *)(result + 80) = xmmword_2222D17D0;
  *(void *)(result + 96) = 0xFFFF00007CB3;
  *(_DWORD *)(result + 116) = 12;
  *(void *)(result + 132) = 0xC070000003ELL;
  *(_DWORD *)(result + 144) = 0;
  *(_WORD *)(result + 156) = 0;
  do
  {
    *(_WORD *)(result + 164 + v1) = 0;
    v1 += 16;
  }
  while (v1 != 128);
  uint64_t v2 = 0;
  *(_WORD *)(result + 292) = 0;
  *(_WORD *)(result + 300) = 0;
  *(_WORD *)(result + 306) = 0;
  *(_WORD *)(result + 316) = 0;
  do
  {
    *(_WORD *)(result + 326 + v2) = 0;
    v2 += 34;
  }
  while (v2 != 170);
  uint64_t v3 = 0;
  *(_WORD *)(result + 496) = 0;
  do
  {
    *(_WORD *)(result + 518 + v3) = 0;
    v3 += 28;
  }
  while (v3 != 112);
  *(_WORD *)(result + 630) = 0;
  *(_WORD *)(result + 636) = 0;
  *(_WORD *)(result + 640) = 0;
  *(_DWORD *)(result + 148) = 0;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

double EDRMetaData_RBSP::set_rpu_data_forHDRx(EDRMetaData_RBSP *a1, char *a2, uint64_t a3, int a4)
{
  bzero(a2, 0x65548uLL);
  EDRMetaData_RBSP::vdr_dm_set_default(a1);
  *(_DWORD *)a2 = 2;
  *((void *)a2 + 6) = 0x200000002;
  *((_DWORD *)a2 + 14) = 2;
  uint64_t v8 = 60;
  *(void *)&double result = 0x3FF00000000;
  do
  {
    *(void *)&a2[v8] = 0x3FF00000000;
    v8 += 72;
  }
  while (v8 != 276);
  if (a3)
  {
    bzero((void *)a3, 0x290uLL);
    *(void *)&double result = EDRMetaData_RBSP::copy_dm_data((uint64_t)a1, a3).n128_u64[0];
    if (a4 == 5)
    {
      set_dm_data_for_hdr10(a3);
      *(_DWORD *)(a3 + 120) = 0;
      *(void *)&double result = 0xC060000003ELL;
      *(void *)(a3 + 132) = 0xC060000003ELL;
      *(_DWORD *)(a3 + 144) = 1;
      *(_DWORD *)(a3 + 156) = -131071;
      *(_WORD *)(a3 + 160) = -2;
    }
    else if (a4 == 10 || a4 == 8)
    {
      *(_DWORD *)(a3 + 120) = 0;
      *(_DWORD *)(a3 + 144) = 1;
      *(void *)&double result = 0xE700000003ELL;
      *(void *)(a3 + 132) = 0xE700000003ELL;
      *(_DWORD *)(a3 + 156) = -65535;
      *(_WORD *)(a3 + 160) = -1;
      *(_DWORD *)a2 = 0;
    }
  }
  return result;
}

EDRMetaData_RBSP *EDRMetaData_RBSP::assign_pivot_values(EDRMetaData_RBSP *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = &this->var69[0][1];
  uint64_t v3 = &this->var68[0][1];
  do
  {
    unsigned int v4 = this->var68[v1][0];
    this->var69[v1][0] = v4;
    uint64_t v5 = (char *)this + 4 * v1;
    if (*((_DWORD *)v5 + 85) <= 0xFFFFFFFD)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v5 + 340;
      do
      {
        v4 += v3[v6];
        v2[v6] = v4;
        unint64_t v8 = v6 + 2;
        ++v6;
      }
      while (v8 < (*v7 + 2));
    }
    ++v1;
    v2 += 18;
    v3 += 9;
  }
  while (v1 != 3);
  return this;
}

EDRMetaData_RBSP *EDRMetaData_RBSP::assign_nlq_pivot_values(EDRMetaData_RBSP *this)
{
  unsigned int v1 = this->var76[0];
  this->var77[0] = v1;
  uint64_t var75 = this->var75;
  if (var75 <= 0xFFFFFFFD)
  {
    uint64_t v3 = var75 + 1;
    unsigned int v4 = &this->var77[1];
    do
    {
      v1 += *(v4 - 9);
      *v4++ = v1;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t EDRMetaData_RBSP::rpu_data_mapping(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = this;
  uint64_t v4 = 0;
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v64 = a2 + a2 * this->var79 + a3;
  uint64_t v5 = a2;
  uint64_t v7 = this->var101[a2][a3];
  uint64_t v60 = this->var98;
  var99 = this->var99;
  var97 = this->var97;
  while (1)
  {
    long long v61 = v7;
    unint64_t v8 = (char *)v3 + 4 * v4;
    if (*((_DWORD *)v8 + 85) != -1) {
      break;
    }
LABEL_29:
    ++v4;
    uint64_t v7 = v61 + 1;
    if (v4 == 3) {
      return 0;
    }
  }
  uint64_t v9 = 0;
  unint64_t v65 = v8 + 340;
  while (1)
  {
    uint64_t v10 = v4;
    unsigned int v11 = v3;
    unsigned int v12 = commonRBSP::ue_v((commonRBSP *)v3);
    unsigned int v13 = v12;
    v11->var82[v5][a3][v10][v9] = v12;
    if (v12 >= 4) {
      break;
    }
    uint64_t v3 = v11;
    LODWORD(v4) = v10;
    unsigned int v66 = v12;
    uint64_t v14 = &v11->var83[v12][v5][a3][v10][v9];
    if (*v14)
    {
      uint64_t v15 = v5;
      unint64_t var1 = v11->var1;
      commonRBSP::flush_bits((uint64_t *)v11, 1);
      uint64_t v3 = v11;
      uint64_t v4 = v10;
      uint64_t v17 = v15;
      unint64_t v18 = &v11->var84[v15][a3][v10][v9];
      unsigned int *v18 = var1 >> 63;
      if ((var1 & 0x8000000000000000) != 0)
      {
        uint64_t v5 = v17;
        unsigned int v22 = v66;
        if (*v14 < 2) {
          goto LABEL_16;
        }
        unsigned int v23 = commonRBSP::ue_v((commonRBSP *)v11);
        uint64_t v3 = v11;
        uint64_t v4 = v10;
        v11->var85[v5][a3][v10][v9] = v23;
        unsigned int v21 = v64 + ~v23;
LABEL_14:
        v3->var86[v22][v4][v9] = v21;
        goto LABEL_15;
      }
      uint64_t v5 = v17;
    }
    else
    {
      unint64_t v18 = &v11->var84[v5][a3][v10][v9];
      unsigned int *v18 = 0;
    }
    uint64_t result = EDRMetaData_RBSP::rpu_data_mapping_param(v3, a2, a3, v4, v9);
    if (result) {
      return result;
    }
    unsigned int v20 = (*v14)++;
    unsigned int v21 = v64;
    unsigned int v22 = v66;
    uint64_t v4 = v10;
    uint64_t v3 = v11;
    if (!v20) {
      goto LABEL_14;
    }
LABEL_15:
    if (*v18)
    {
LABEL_16:
      unsigned int v24 = v3->var86[v22][v4][v9];
      unsigned int v25 = v3->var79 + 1;
      unsigned int v26 = v24 / v25;
      unsigned int v27 = v24 % v25;
      if (v13 == 2)
      {
        uint64_t v32 = (uint64_t)v60[v5][a3][v4][v9];
        uint64_t v33 = (uint64_t)v60[v26][v27][v4][v9];
        long long v34 = *(_OWORD *)v33;
        *(void *)(v32 + 16) = *(void *)(v33 + 16);
        *(_OWORD *)uint64_t v32 = v34;
        uint64_t v35 = (uint64_t)var99[v26][v27][v4][v9];
        long long v36 = *(_OWORD *)v35;
        uint64_t v37 = (uint64_t)var99[v5][a3][v4][v9];
        *(void *)(v37 + 16) = *(void *)(v35 + 16);
        *(_OWORD *)uint64_t v37 = v36;
      }
      else if (v13 == 1)
      {
        v3->var93[v5][a3][v4][v9] = v3->var93[v26][v27][v4][v9];
        v3->var94[v5][a3][v4][v9] = v3->var94[v26][v27][v4][v9];
        v3->var95[v5][a3][v4][v9] = v3->var95[v26][v27][v4][v9];
        uint64_t v38 = 1008 * v4 + 112 * v9;
        int v39 = (_OWORD *)((char *)v3->var96[a3][v5][0][0][0] + v38);
        BOOL v40 = (long long *)((char *)v3->var96[v27][v26][0][0][0] + v38);
        long long v41 = *v40;
        long long v42 = v40[2];
        v39[1] = v40[1];
        v39[2] = v42;
        *int v39 = v41;
        long long v43 = v40[3];
        long long v44 = v40[4];
        long long v45 = v40[6];
        v39[5] = v40[5];
        v39[6] = v45;
        v39[3] = v43;
        v39[4] = v44;
        unsigned int v46 = (_OWORD *)((char *)var97[a3][v5][0][0][0] + v38);
        uint64_t v47 = (long long *)((char *)var97[v27][v26] + v38);
        long long v48 = v47[6];
        long long v50 = v47[3];
        long long v49 = v47[4];
        v46[5] = v47[5];
        v46[6] = v48;
        v46[3] = v50;
        v46[4] = v49;
        long long v51 = *v47;
        long long v52 = v47[2];
        v46[1] = v47[1];
        v46[2] = v52;
        *unsigned int v46 = v51;
      }
      else if (v13)
      {
        uint64_t v53 = (uint64_t)v3 + 72 * v4 + 4 * v9;
        unint64_t v54 = *(unsigned int *)(v53 + 460);
        unint64_t v55 = (unsigned int *)(v53 + 464);
        for (unint64_t i = *(unsigned int *)(v53 + 464); v54 < i; unint64_t i = *v55)
        {
          (*v61)[v54] = v3->var101[v26][v27][v4][v54];
          ++v54;
        }
        if (v9 == *v65 && !v3->var38)
        {
          v3->var100[v5][a3][v4][i] = 0;
          unint64_t i = *v55;
        }
        v3->var101[v5][a3][v4][i] = v3->var101[v26][v27][v4][i];
      }
      else
      {
        v3->var87[v5][a3][v4][v9] = v3->var87[v26][v27][v4][v9];
        v3->var88[v5][a3][v4][v9] = v3->var88[v26][v27][v4][v9];
        v3->var89[v5][a3][v4][v9] = v3->var89[v26][v27][v4][v9];
        v3->var90[v5][a3][v4][v9] = v3->var90[v26][v27][v4][v9];
        uint64_t v28 = (uint64_t)v3->var91[v26][v27][v4][v9];
        uint64_t v29 = (uint64_t)v3->var91[v5][a3][v4][v9];
        *(void *)uint64_t v29 = *(void *)v28;
        *(_DWORD *)(v29 + 8) = *(_DWORD *)(v28 + 8);
        uint64_t v30 = (uint64_t)v3->var92[v26][v27][v4][v9];
        uint64_t v31 = (uint64_t)v3->var92[v5][a3][v4][v9];
        *(void *)uint64_t v31 = *(void *)v30;
        *(_DWORD *)(v31 + 8) = *(_DWORD *)(v30 + 8);
      }
    }
    if (++v9 >= (unint64_t)(*v65 + 1)) {
      goto LABEL_29;
    }
  }
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v57 = logInstanceID;
    }
    else {
      uint64_t v57 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218498;
      unsigned int v68 = (const char *)WORD1(v57);
      __int16 v69 = 2080;
      unsigned int v70 = "rpu_data_mapping";
      __int16 v71 = 1024;
      unsigned int v72 = v13;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: EDRMetaData_RBSP error map_idc = %d, bail!\n", buf, 0x1Cu);
    }
    prevLogInstanceID = v57;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v68 = "rpu_data_mapping";
    __int16 v69 = 1024;
    LODWORD(v70) = v13;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: EDRMetaData_RBSP error map_idc = %d, bail!\n", buf, 0x12u);
  }
  return v11->var14;
}

void EDRMetaData_RBSP::rpu_data_chroma_resampling(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    unsigned int var58 = this->var58;
    if (var58 == 14)
    {
      uint64_t var57 = this->var57;
      if (this->var34 != this->var59[var57])
      {
        EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_1D_exp(this, a2, a3, v6, 1u);
        uint64_t var57 = this->var57;
      }
      if (this->var35 != this->var60[var57]) {
        EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_1D_exp(this, a2, a3, v6, 0);
      }
    }
    else if (var58 == 15 && !this->var33 && this->var32 == 2)
    {
      EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_2D_exp(this, a2, a3, v6);
    }
    char v7 = 0;
    unsigned int v6 = 1;
  }
  while ((v8 & 1) != 0);
}

EDRMetaData_RBSP *EDRMetaData_RBSP::rpu_data_spatial_resampling(EDRMetaData_RBSP *this, int a2, int a3)
{
  if (!(a3 | a2))
  {
    uint64_t v3 = this;
    if (this->var71[0] == 7 || this->var73[0] == 7)
    {
      char v4 = 0;
      uint64_t v5 = 1;
      do
      {
        char v6 = v4;
        if (v3->var38) {
          int v7 = 32;
        }
        else {
          int v7 = v3->var45 + 8;
        }
        unsigned int v8 = HIDWORD(v3->var1) >> -(char)v7;
        this = (EDRMetaData_RBSP *)commonRBSP::flush_bits((uint64_t *)v3, v7);
        v3->var112[v5] = v8;
        char v4 = 1;
        uint64_t v5 = 2;
      }
      while ((v6 & 1) == 0);
      if (v3->var71[0] == 7)
      {
        for (unsigned int i = 0; i != 3; ++i)
          this = EDRMetaData_RBSP::rpu_data_spatial_resampling_filter_exp(v3, i, 0, 1u);
      }
      if (v3->var73[0] == 7)
      {
        for (unsigned int j = 0; j != 3; ++j)
        {
          if (v3->var72 == 1) {
            unsigned int v11 = 2;
          }
          else {
            unsigned int v11 = 1;
          }
          this = EDRMetaData_RBSP::rpu_data_spatial_resampling_filter_exp(v3, j, 1u, v11);
        }
      }
    }
  }
  return this;
}

uint64_t EDRMetaData_RBSP::rpu_data_nlq(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (this->var75 != -1)
  {
    unint64_t v6 = 0;
    unsigned int v7 = a2 + a2 * this->var79 + a3;
    uint64_t v8 = 108 * a2 + 108 * a3 + 406312;
    uint64_t v9 = 406636;
LABEL_3:
    uint64_t v10 = 0;
    uint64_t v22 = v9;
    uint64_t v23 = v8;
    *(void *)unsigned int v26 = v6;
    while (1)
    {
      unsigned int v11 = (_DWORD *)((char *)this + v8);
      if (!*(_DWORD *)((char *)&this->var16 + v8 + 4)) {
        break;
      }
      unint64_t var1 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 1);
      *unsigned int v11 = var1 >> 63;
      if ((var1 & 0x8000000000000000) == 0)
      {
        unsigned int v13 = (unsigned int *)((char *)this + v8);
        unint64_t v6 = *(void *)v26;
        goto LABEL_8;
      }
      unint64_t v6 = *(void *)v26;
      if (v11[27] < 2u) {
        goto LABEL_17;
      }
      unsigned int v16 = commonRBSP::ue_v((commonRBSP *)this);
      if (!v7)
      {
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v21 = logInstanceID;
          }
          else {
            uint64_t v21 = prevLogInstanceID;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134219010;
            uint64_t v28 = (const char *)WORD1(v21);
            __int16 v29 = 2080;
            *(void *)uint64_t v30 = "rpu_data_nlq";
            *(_WORD *)&v30[8] = 1024;
            *(_DWORD *)uint64_t v31 = 0;
            *(_WORD *)&v31[4] = 1024;
            unsigned int v32 = a2;
            __int16 v33 = 1024;
            unsigned int v34 = a3;
            _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: ERROR: Out of bound! curr_part_idx = %d, y = %d, x = %d, bail!\n", buf, 0x28u);
          }
          prevLogInstanceID = v21;
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          uint64_t v28 = "rpu_data_nlq";
          __int16 v29 = 1024;
          *(_DWORD *)uint64_t v30 = 0;
          *(_WORD *)&v30[4] = 1024;
          *(_DWORD *)&v30[6] = a2;
          *(_WORD *)uint64_t v31 = 1024;
          *(_DWORD *)&v31[2] = a3;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: ERROR: Out of bound! curr_part_idx = %d, y = %d, x = %d, bail!\n", buf, 0x1Eu);
        }
        return this->var14;
      }
      unsigned int v17 = v7 - 1;
      if (v16 < v7 - 1) {
        unsigned int v17 = v16;
      }
      *(unsigned int *)((char *)&this->var40 + v8) = v17;
      unsigned int v15 = v7 + ~v17;
      unsigned int v13 = (unsigned int *)((char *)this + v8);
LABEL_15:
      *(_DWORD *)((char *)&this->var0 + v9) = v15;
LABEL_16:
      if (*v13)
      {
LABEL_17:
        unint64_t v18 = (_DWORD *)((char *)this
                       + 108 * (*(_DWORD *)((char *)&this->var0 + v9) / (this->var79 + 1))
                       + 108 * (*(_DWORD *)((char *)&this->var0 + v9) % (this->var79 + 1))
                       + 12 * v6
                       + 4 * v10);
        unint64_t v19 = (_DWORD *)((char *)this + v8);
        v19[108] = v18[101686];
        v19[135] = v18[101713];
        v19[162] = v18[101740];
        v19[189] = v18[101767];
        v19[216] = v18[101794];
        v19[243] = v18[101821];
        v19[270] = v18[101848];
        v19[297] = v18[101875];
        v19[324] = v18[101902];
      }
      ++v10;
      v8 += 4;
      v9 += 4;
      if (v10 == 3)
      {
        ++v6;
        uint64_t v8 = v23 + 12;
        uint64_t v9 = v22 + 12;
        if (v6 < this->var75 + 1) {
          goto LABEL_3;
        }
        return 0;
      }
    }
    unsigned int v13 = &this->var115[a2][a3][v6][v10];
    *(_DWORD *)((char *)&this->var0 + v8) = 0;
LABEL_8:
    EDRMetaData_RBSP::rpu_data_nlq_param(this, a2, a3, v6, v10);
    int v14 = v11[27];
    v11[27] = v14 + 1;
    unsigned int v15 = v7;
    if (v14) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  return 0;
}

EDRMetaData_RBSP *EDRMetaData_RBSP::rpu_data_el_chroma_resampling(EDRMetaData_RBSP *this, int a2, int a3)
{
  if (!(a3 | a2))
  {
    uint64_t v3 = this;
    if (this->var78 == 7)
    {
      uint64_t v4 = 0;
      var128 = this->var128;
      char v5 = 1;
      do
      {
        uint64_t v6 = 0;
        char v17 = v5;
        unsigned int v7 = var128[v4];
        char v8 = 1;
        do
        {
          uint64_t v9 = 0;
          char v10 = v8;
          unsigned int v11 = v7[v6];
          do
          {
            if (v3->var38)
            {
              int var1_high = HIDWORD(v3->var1);
              this = (EDRMetaData_RBSP *)commonRBSP::flush_bits((uint64_t *)v3, 32);
            }
            else
            {
              unsigned int var52 = v3->var52;
              int v14 = HIDWORD(v3->var1);
              char v15 = 20 - var52;
              this = (EDRMetaData_RBSP *)commonRBSP::flush_bits((uint64_t *)v3, var52 + 12);
              int var1_high = ((-1 << v15) & v14) >> v15;
            }
            v11[v9++] = var1_high;
          }
          while (v9 != 17);
          char v8 = 0;
          uint64_t v6 = 1;
        }
        while ((v10 & 1) != 0);
        char v5 = 0;
        uint64_t v4 = 1;
      }
      while ((v17 & 1) != 0);
    }
  }
  return this;
}

uint64_t EDRMetaData_RBSP::rpu_data_mapping_param(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v9 = a4;
  uint64_t v10 = a5;
  unsigned int v11 = this->var82[a2][a3][a4][a5];
  if (v11)
  {
    if (v11 != 1)
    {
      if (v11 == 2)
      {
        uint64_t v12 = 0;
        unsigned int v13 = this->var98[a2][a3][a4][a5];
        do
        {
          if (this->var38
            || (int v14 = commonRBSP::ue_v((commonRBSP *)this),
                v13[v12] = (-((v14 & 1) == 0) ^ ((v14 + 1) >> 1)) + ((v14 & 1) == 0),
                this->var38))
          {
            unsigned int var39 = 32;
          }
          else
          {
            unsigned int var39 = this->var39;
          }
          int v16 = HIDWORD(this->var1) >> -(char)var39;
          commonRBSP::flush_bits((uint64_t *)this, var39);
          v13[v12 + 162] = v16;
          ++v12;
        }
        while (v12 != 5);
        return 0;
      }
      unint64_t v24 = (unint64_t)this->var69[a4];
      unint64_t v22 = *(unsigned int *)(v24 + 4 * a5);
      uint64_t v23 = (unsigned int *)(v24 + 4 * (a5 + 1));
      LODWORD(v24) = *v23;
      if (v22 < *v23)
      {
        unsigned int v25 = &this->var101[a3][a2][(unint64_t)a4][v22];
        do
        {
          if (this->var38 || (*(v25 - 49152) = commonRBSP::ue_v((commonRBSP *)this), this->var38)) {
            unsigned int v26 = 32;
          }
          else {
            unsigned int v26 = this->var39;
          }
          unsigned int v27 = HIDWORD(this->var1) >> -(char)v26;
          commonRBSP::flush_bits((uint64_t *)this, v26);
          *v25++ = v27;
          ++v22;
          unint64_t v24 = *v23;
        }
        while (v22 < v24);
      }
      unsigned int var38 = this->var38;
      if (this->var67[v9] == a5)
      {
        if (!var38)
        {
          this->var100[a2][a3][v9][v24] = 0;
LABEL_63:
          unsigned int v48 = this->var39;
          goto LABEL_64;
        }
      }
      else if (!var38)
      {
        goto LABEL_63;
      }
      unsigned int v48 = 32;
LABEL_64:
      unsigned int v49 = HIDWORD(this->var1) >> -(char)v48;
      commonRBSP::flush_bits((uint64_t *)this, v48);
      uint64_t result = 0;
      this->var101[a2][a3][v9][*v23] = v49;
      return result;
    }
    unint64_t v20 = this->var1 >> 62;
    commonRBSP::flush_bits((uint64_t *)this, 2);
    if (v20 != 3)
    {
      this->var93[a2][a3][v9][v10] = v20 + 1;
      if (this->var38
        || (int v35 = commonRBSP::ue_v((commonRBSP *)this),
            this->var94[a2][a3][v9][v10] = (-((v35 & 1) == 0) ^ ((v35 + 1) >> 1))
                                                       + ((v35 & 1) == 0),
            this->var38))
      {
        unsigned int v36 = 32;
      }
      else
      {
        unsigned int v36 = this->var39;
      }
      unsigned int v37 = HIDWORD(this->var1) >> -(char)v36;
      commonRBSP::flush_bits((uint64_t *)this, v36);
      this->var95[a2][a3][v9][v10] = v37;
      unint64_t v38 = v20 + 1;
      uint64_t v39 = 3024 * a2 + 3024 * a3 + 1008 * v9 + 112 * v10 + 3424;
      uint64_t v40 = 1;
      do
      {
        uint64_t v41 = 0;
        long long v42 = (char *)this + v39;
        do
        {
          if (this->var38
            || (int v43 = commonRBSP::ue_v((commonRBSP *)this),
                *(_DWORD *)&v42[v41] = (-((v43 & 1) == 0) ^ ((v43 + 1) >> 1)) + ((v43 & 1) == 0),
                this->var38))
          {
            unsigned int v44 = 32;
          }
          else
          {
            unsigned int v44 = this->var39;
          }
          int v45 = HIDWORD(this->var1) >> -(char)v44;
          commonRBSP::flush_bits((uint64_t *)this, v44);
          *(_DWORD *)&v42[v41 + 3024] = v45;
          v41 += 4;
        }
        while (v41 != 28);
        v39 += 28;
      }
      while (v40++ != v38);
      return 0;
    }
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v21 = logInstanceID;
      }
      else {
        uint64_t v21 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v56 = 134218498;
        uint64_t v57 = (const char *)WORD1(v21);
        __int16 v58 = 2080;
        int v59 = "rpu_data_mapping_param";
        __int16 v60 = 1024;
        int v61 = 3;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: ERROR: Out of bound! mmr_order_minus1 = %d, bail!\n", (uint8_t *)&v56, 0x1Cu);
      }
      prevLogInstanceID = v21;
      return this->var14;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v56 = 136315394;
      uint64_t v57 = "rpu_data_mapping_param";
      __int16 v58 = 1024;
      LODWORD(v59) = 3;
      long long v50 = &_os_log_internal;
      long long v51 = " [1.419.54] %s: ERROR: Out of bound! mmr_order_minus1 = %d, bail!\n";
      goto LABEL_69;
    }
    return this->var14;
  }
  unsigned int v17 = commonRBSP::ue_v((commonRBSP *)this);
  unsigned int v18 = v17;
  if (v17 >= 2)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v19 = logInstanceID;
      }
      else {
        uint64_t v19 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v56 = 134218498;
        uint64_t v57 = (const char *)WORD1(v19);
        __int16 v58 = 2080;
        int v59 = "rpu_data_mapping_param";
        __int16 v60 = 1024;
        int v61 = v18;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: ERROR: Out of bound! poly_order_minus1 = %d, bail!\n", (uint8_t *)&v56, 0x1Cu);
      }
      prevLogInstanceID = v19;
      return this->var14;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v56 = 136315394;
      uint64_t v57 = "rpu_data_mapping_param";
      __int16 v58 = 1024;
      LODWORD(v59) = v18;
      long long v50 = &_os_log_internal;
      long long v51 = " [1.419.54] %s: ERROR: Out of bound! poly_order_minus1 = %d, bail!\n";
LABEL_69:
      _os_log_impl(&dword_22224D000, v50, OS_LOG_TYPE_DEFAULT, v51, (uint8_t *)&v56, 0x12u);
    }
    return this->var14;
  }
  this->var87[a2][a3][v9][v10] = v17 + 1;
  if (v17
    || (unint64_t var1 = this->var1,
        commonRBSP::flush_bits((uint64_t *)this, 1),
        this->var88[a2][a3][v9][v10] = var1 >> 63,
        (var1 & 0x8000000000000000) == 0))
  {
    uint64_t v30 = v18 + 2;
    uint64_t v31 = this->var91[a3][a2][v9][v10];
    do
    {
      if (this->var38
        || (int v32 = commonRBSP::ue_v((commonRBSP *)this),
            *uint64_t v31 = (-((v32 & 1) == 0) ^ ((v32 + 1) >> 1)) + ((v32 & 1) == 0),
            this->var38))
      {
        unsigned int v33 = 32;
      }
      else
      {
        unsigned int v33 = this->var39;
      }
      int v34 = HIDWORD(this->var1) >> -(char)v33;
      commonRBSP::flush_bits((uint64_t *)this, v33);
      v31[81] = v34;
      ++v31;
      --v30;
    }
    while (v30);
    return 0;
  }
  if (this->var38 || (this->var89[a2][a3][v9][v10] = commonRBSP::ue_v((commonRBSP *)this), this->var38)) {
    unsigned int v52 = 32;
  }
  else {
    unsigned int v52 = this->var39;
  }
  unsigned int v53 = HIDWORD(this->var1) >> -(char)v52;
  commonRBSP::flush_bits((uint64_t *)this, v52);
  this->var90[a2][a3][v9][v10] = v53;
  if (this->var67[v9] == a5)
  {
    if (this->var38) {
      goto LABEL_78;
    }
    this->var89[a2][a3][v9][a5 + 1] = commonRBSP::ue_v((commonRBSP *)this);
  }
  if (!this->var38)
  {
    unsigned int v54 = this->var39;
    goto LABEL_81;
  }
LABEL_78:
  unsigned int v54 = 32;
LABEL_81:
  unsigned int v55 = HIDWORD(this->var1) >> -(char)v54;
  commonRBSP::flush_bits((uint64_t *)this, v54);
  uint64_t result = 0;
  this->var90[a2][a3][v9][a5 + 1] = v55;
  return result;
}

__n128 EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_2D_exp(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v43 = a2 + a2 * this->var79 + a3;
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  unsigned int v11 = &this->var102[a2][a3][a4];
  uint64_t v44 = a2;
  if (!*v11)
  {
    unsigned int v13 = &this->var104[a2][a3][a4];
    *unsigned int v13 = 0;
    goto LABEL_6;
  }
  unint64_t var1 = this->var1;
  commonRBSP::flush_bits((uint64_t *)this, 1);
  unsigned int v13 = &this->var104[v8][v9][v10];
  *unsigned int v13 = var1 >> 63;
  if ((var1 & 0x8000000000000000) == 0)
  {
LABEL_6:
    EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_2D_exp_coef(this, a2, a3, a4, 0);
    if (this->var36 != 1) {
      EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_2D_exp_coef(this, a2, a3, a4, 1u);
    }
    if ((*v11)++)
    {
LABEL_11:
      if (!*v13) {
        return result;
      }
      goto LABEL_12;
    }
    unsigned int v16 = v43;
LABEL_10:
    this->var103[v10] = v16;
    goto LABEL_11;
  }
  if (*v11 >= 2)
  {
    unsigned int v14 = commonRBSP::ue_v((commonRBSP *)this);
    this->var105[v44][v9][v10] = v14;
    unsigned int v16 = v43 + ~v14;
    goto LABEL_10;
  }
LABEL_12:
  unsigned int v18 = this->var106[(unint64_t)(this->var103[v10] % (this->var79 + 1))][(unint64_t)(this->var103[v10]
                                                                                                 / (this->var79 + 1))][v10];
  long long v19 = *(_OWORD *)&(*v18)[1][4];
  long long v21 = *(_OWORD *)v18;
  long long v20 = *(_OWORD *)&(*v18)[0][4];
  unint64_t v22 = this->var106[v9][v44][v10];
  *(_OWORD *)&(*v22)[1][0] = *(_OWORD *)&(*v18)[1][0];
  *(_OWORD *)&(*v22)[1][4] = v19;
  *(_OWORD *)unint64_t v22 = v21;
  *(_OWORD *)&(*v22)[0][4] = v20;
  long long v23 = *(_OWORD *)&(*v18)[3][4];
  long long v25 = *(_OWORD *)&(*v18)[2][0];
  long long v24 = *(_OWORD *)&(*v18)[2][4];
  *(_OWORD *)&(*v22)[3][0] = *(_OWORD *)&(*v18)[3][0];
  *(_OWORD *)&(*v22)[3][4] = v23;
  *(_OWORD *)&(*v22)[2][0] = v25;
  *(_OWORD *)&(*v22)[2][4] = v24;
  long long v26 = *(_OWORD *)&(*v18)[5][4];
  long long v28 = *(_OWORD *)&(*v18)[4][0];
  long long v27 = *(_OWORD *)&(*v18)[4][4];
  *(_OWORD *)&(*v22)[5][0] = *(_OWORD *)&(*v18)[5][0];
  *(_OWORD *)&(*v22)[5][4] = v26;
  *(_OWORD *)&(*v22)[4][0] = v28;
  *(_OWORD *)&(*v22)[4][4] = v27;
  long long v29 = *(_OWORD *)&(*v18)[7][4];
  long long v31 = *(_OWORD *)&(*v18)[6][0];
  long long v30 = *(_OWORD *)&(*v18)[6][4];
  *(_OWORD *)&(*v22)[7][0] = *(_OWORD *)&(*v18)[7][0];
  *(_OWORD *)&(*v22)[7][4] = v29;
  *(_OWORD *)&(*v22)[6][0] = v31;
  *(_OWORD *)&(*v22)[6][4] = v30;
  long long v32 = *(_OWORD *)&(*v18)[8][0];
  long long v33 = *(_OWORD *)&(*v18)[8][4];
  long long v34 = *(_OWORD *)&(*v18)[9][4];
  *(_OWORD *)&(*v22)[9][0] = *(_OWORD *)&(*v18)[9][0];
  *(_OWORD *)&(*v22)[9][4] = v34;
  *(_OWORD *)&(*v22)[8][0] = v32;
  *(_OWORD *)&(*v22)[8][4] = v33;
  long long v35 = *(_OWORD *)&(*v18)[10][0];
  long long v36 = *(_OWORD *)&(*v18)[10][4];
  long long v37 = *(_OWORD *)&(*v18)[11][4];
  *(_OWORD *)&(*v22)[11][0] = *(_OWORD *)&(*v18)[11][0];
  *(_OWORD *)&(*v22)[11][4] = v37;
  *(_OWORD *)&(*v22)[10][0] = v35;
  *(_OWORD *)&(*v22)[10][4] = v36;
  long long v38 = *(_OWORD *)&(*v18)[12][0];
  long long v39 = *(_OWORD *)&(*v18)[12][4];
  long long v40 = *(_OWORD *)&(*v18)[13][4];
  *(_OWORD *)&(*v22)[13][0] = *(_OWORD *)&(*v18)[13][0];
  *(_OWORD *)&(*v22)[13][4] = v40;
  *(_OWORD *)&(*v22)[12][0] = v38;
  *(_OWORD *)&(*v22)[12][4] = v39;
  __n128 result = *(__n128 *)&(*v18)[14][0];
  long long v41 = *(_OWORD *)&(*v18)[14][4];
  long long v42 = *(_OWORD *)&(*v18)[15][4];
  *(_OWORD *)&(*v22)[15][0] = *(_OWORD *)&(*v18)[15][0];
  *(_OWORD *)&(*v22)[15][4] = v42;
  *(__n128 *)&(*v22)[14][0] = result;
  *(_OWORD *)&(*v22)[14][4] = v41;
  return result;
}

__n128 EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_1D_exp(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v9 = a2 + a2 * this->var79 + a3;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  unsigned int v14 = &this->var107[a2][a3][a4][a5];
  uint64_t v27 = a2;
  if (!*v14)
  {
    unsigned int v16 = &this->var109[a2][a3][a4][a5];
    unsigned int *v16 = 0;
LABEL_5:
    EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_1D_exp_coef(this, a2, a3, a4, a5);
    if ((*v14)++) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  unsigned int v25 = a5;
  unsigned int v26 = a2 + a2 * this->var79 + a3;
  unint64_t var1 = this->var1;
  commonRBSP::flush_bits((uint64_t *)this, 1);
  unsigned int v16 = &this->var109[v10][v11][v12][v13];
  unsigned int *v16 = var1 >> 63;
  if ((var1 & 0x8000000000000000) == 0)
  {
    a5 = v25;
    unsigned int v9 = v26;
    goto LABEL_5;
  }
  if (*v14 >= 2)
  {
    unsigned int v19 = commonRBSP::ue_v((commonRBSP *)this);
    this->var110[v27][v11][v12][v13] = v19;
    unsigned int v9 = v26 + ~v19;
LABEL_9:
    this->var108[v12][v13] = v9;
LABEL_10:
    if (!*v16) {
      return result;
    }
  }
  unsigned int v20 = this->var108[v12][v13];
  long long v21 = this->var111[v20 / (this->var79 + 1)][v20 % (this->var79 + 1)][v12][v13];
  long long v22 = *((_OWORD *)v21 + 1);
  __n128 result = *((__n128 *)v21 + 2);
  long long v23 = *(_OWORD *)v21;
  long long v24 = this->var111[v27][v11][v12][v13];
  *(_OWORD *)long long v24 = v23;
  *((_OWORD *)v24 + 1) = v22;
  *((__n128 *)v24 + 2) = result;
  return result;
}

EDRMetaData_RBSP *EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_2D_exp_coef(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 324;
  if (a5 == 1) {
    uint64_t v5 = 332;
  }
  int v6 = *(_DWORD *)((char *)&this->var0 + v5);
  uint64_t v17 = (v6 + 1);
  if (v6 != -1)
  {
    unsigned int v7 = this;
    uint64_t v8 = 0;
    uint64_t v9 = 328;
    if (a5 == 1) {
      uint64_t v9 = 336;
    }
    uint64_t v10 = (*(_DWORD *)((char *)&this->var0 + v9) + 1);
    unint64_t v11 = ((unint64_t)a3 << 10)
        + ((unint64_t)a2 << 10)
        + ((unint64_t)a4 << 9)
        + ((unint64_t)a5 << 8)
        + 403992;
    do
    {
      unint64_t v12 = v11;
      uint64_t v13 = v10;
      if (v10)
      {
        do
        {
          unsigned int var40 = v7->var40;
          int var1_high = HIDWORD(v7->var1);
          char v16 = 24 - var40;
          this = (EDRMetaData_RBSP *)commonRBSP::flush_bits((uint64_t *)v7, var40 + 8);
          *(_DWORD *)((char *)&v7->var0 + v12) = ((-1 << v16) & var1_high) >> v16;
          v12 += 4;
          --v13;
        }
        while (v13);
      }
      ++v8;
      v11 += 32;
    }
    while (v8 != v17);
  }
  return this;
}

EDRMetaData_RBSP *EDRMetaData_RBSP::rpu_data_chroma_resampling_filter_1D_exp_coef(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 316;
  if (!a5) {
    uint64_t v5 = 320;
  }
  int v6 = 2 * *(_DWORD *)((char *)&this->var0 + v5);
  uint64_t v7 = (v6 + 4);
  if (v6 != -4)
  {
    uint64_t v8 = this;
    uint64_t v9 = 192 * a2 + 192 * a3 + 96 * a4 + 48 * a5 + 405080;
    do
    {
      if (v8->var38)
      {
        int var1_high = HIDWORD(v8->var1);
        this = (EDRMetaData_RBSP *)commonRBSP::flush_bits((uint64_t *)v8, 32);
      }
      else
      {
        unsigned int var40 = v8->var40;
        int v12 = HIDWORD(v8->var1);
        char v13 = 25 - var40;
        this = (EDRMetaData_RBSP *)commonRBSP::flush_bits((uint64_t *)v8, var40 + 7);
        int var1_high = ((-1 << v13) & v12) >> v13;
      }
      *(_DWORD *)((char *)&v8->var0 + v9) = var1_high;
      v9 += 4;
      --v7;
    }
    while (v7);
  }
  return this;
}

EDRMetaData_RBSP *EDRMetaData_RBSP::rpu_data_spatial_resampling_filter_exp(EDRMetaData_RBSP *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a3) {
    uint64_t v4 = 6;
  }
  else {
    uint64_t v4 = 8;
  }
  if (a4)
  {
    uint64_t v5 = this;
    uint64_t v6 = 0;
    uint64_t v7 = a4;
    uint64_t v8 = (char *)this->var113[(unint64_t)a3] + 32 * a2;
    do
    {
      uint64_t v9 = v8;
      uint64_t v10 = v4;
      do
      {
        if (!v5->var38)
        {
          int v11 = commonRBSP::ue_v((commonRBSP *)v5);
          *uint64_t v9 = (-((v11 & 1) == 0) ^ ((v11 + 1) >> 1)) + ((v11 & 1) == 0);
        }
        unsigned int var48 = v5->var48;
        int v13 = HIDWORD(v5->var1) >> (26 - var48);
        this = (EDRMetaData_RBSP *)commonRBSP::flush_bits((uint64_t *)v5, var48 + 6);
        v9[128] = v13;
        ++v9;
        --v10;
      }
      while (v10);
      ++v6;
      v8 += 128;
    }
    while (v6 != v7);
  }
  return this;
}

uint64_t *EDRMetaData_RBSP::rpu_data_nlq_param(EDRMetaData_RBSP *this, int a2, int a3, unsigned int a4, unsigned int a5)
{
  unsigned int var44 = this->var44;
  unsigned int v11 = HIDWORD(this->var1) >> (24 - var44);
  commonRBSP::flush_bits((uint64_t *)this, var44 + 8);
  uint64_t v12 = a5;
  this->var119[a2][a3][a4][a5] = v11;
  if (this->var38 || (this->var120[a2][a3][a4][a5] = commonRBSP::ue_v((commonRBSP *)this), this->var38)) {
    unsigned int var39 = 32;
  }
  else {
    unsigned int var39 = this->var39;
  }
  unsigned int v14 = HIDWORD(this->var1) >> -(char)var39;
  __n128 result = commonRBSP::flush_bits((uint64_t *)this, var39);
  this->var121[a2][a3][a4][v12] = v14;
  unsigned int var74 = this->var74;
  if (var74 == 1)
  {
    unsigned int v21 = this->var44;
    int v22 = HIDWORD(this->var1) >> (24 - v21);
    commonRBSP::flush_bits((uint64_t *)this, v21 + 8);
    long long v23 = (char *)this + 108 * a2 + 108 * a3 + 12 * a4 + 4 * v12;
    *((_DWORD *)v23 + 101875) = v22;
    __n128 result = (uint64_t *)commonRBSP::ue_v((commonRBSP *)this);
    *((_DWORD *)v23 + 101902) = result;
  }
  else if (!var74)
  {
    if (this->var38 || (this->var122[a2][a3][a4][v12] = commonRBSP::ue_v((commonRBSP *)this), this->var38)) {
      unsigned int v17 = 32;
    }
    else {
      unsigned int v17 = this->var39;
    }
    unsigned int v18 = HIDWORD(this->var1) >> -(char)v17;
    commonRBSP::flush_bits((uint64_t *)this, v17);
    this->var123[a2][a3][a4][v12] = v18;
    if (this->var38 || (this->var124[a2][a3][a4][v12] = commonRBSP::ue_v((commonRBSP *)this), this->var38)) {
      unsigned int v19 = 32;
    }
    else {
      unsigned int v19 = this->var39;
    }
    unsigned int v20 = HIDWORD(this->var1) >> -(char)v19;
    __n128 result = commonRBSP::flush_bits((uint64_t *)this, v19);
    this->var125[a2][a3][a4][v12] = v20;
  }
  return result;
}

uint64_t EDRMetaData_RBSP::ext_content_adaptive_metadata(EDRMetaData_RBSP *this, unsigned int a2, int a3)
{
  unsigned int v5 = commonRBSP::ue_v((commonRBSP *)this);
  unint64_t var1_high = HIBYTE(this->var1);
  commonRBSP::flush_bits((uint64_t *)this, 8);
  if (!EDRMetaData_RBSP::is_valid_ext_block(this, v5, var1_high, a3)) {
    return 0;
  }
  unsigned int v7 = 0;
  unsigned int v8 = 8 * v5;
  int v9 = var1_high - 1;
  p_var147 = &this->var147;
  uint64_t v11 = 0;
  switch(v9)
  {
    case 0:
      uint64_t v11 = 1;
      this->var150.var0 = 1;
      unint64_t v12 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      this->var150.unint64_t var1 = v12;
      unint64_t v13 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      this->var150.int var2 = v13;
      unint64_t v14 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      this->var150.var3 = v14;
      goto LABEL_12;
    case 1:
      unint64_t var1 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      unint64_t v21 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      unint64_t v22 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      unint64_t v23 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      unint64_t v24 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      unint64_t v25 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      int64_t v26 = this->var1;
      commonRBSP::flush_bits((uint64_t *)this, 13);
      uint64_t v27 = (int)*p_var147;
      unsigned int *p_var147 = v27 + 1;
      uint64_t v11 = 1;
      if ((int)v27 <= 7)
      {
        long long v28 = &this->var151[v27];
        v28->var0 = 1;
        v28->unint64_t var1 = var1 >> 52;
        v28->int var2 = v21 >> 52;
        v28->var3 = v22 >> 52;
        v28->var4 = v23 >> 52;
        v28->var5 = v24 >> 52;
        v28->var6 = v25 >> 52;
        v28->var7 = v26 >> 51;
      }
      unsigned int v7 = 85;
      goto LABEL_65;
    case 2:
      uint64_t v11 = 1;
      this->var152.var0 = 1;
      unint64_t v29 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      this->var152.unint64_t var1 = v29;
      unint64_t v30 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      this->var152.int var2 = v30;
      unint64_t v31 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      this->var152.var3 = v31;
LABEL_12:
      unsigned int v7 = 36;
      goto LABEL_65;
    case 3:
      uint64_t v11 = 1;
      this->var153.var0 = 1;
      unint64_t v32 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      this->var153.unint64_t var1 = v32;
      unint64_t v33 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      this->var153.int var2 = v33;
      unsigned int v7 = 24;
      goto LABEL_65;
    case 4:
      uint64_t v11 = 1;
      this->var154.var0 = 1;
      unint64_t v34 = this->var1 >> 51;
      commonRBSP::flush_bits((uint64_t *)this, 13);
      this->var154.unint64_t var1 = v34;
      unint64_t v35 = this->var1 >> 51;
      commonRBSP::flush_bits((uint64_t *)this, 13);
      this->var154.int var2 = v35;
      unint64_t v36 = this->var1 >> 51;
      commonRBSP::flush_bits((uint64_t *)this, 13);
      this->var154.var3 = v36;
      unint64_t v37 = this->var1 >> 51;
      commonRBSP::flush_bits((uint64_t *)this, 13);
      this->var154.var4 = v37;
      unsigned int v7 = 52;
      goto LABEL_65;
    case 5:
      uint64_t v11 = 1;
      this->var155.var0 = 1;
      unsigned __int16 v61 = HIWORD(this->var1);
      commonRBSP::flush_bits((uint64_t *)this, 16);
      this->var155.unint64_t var1 = v61;
      unsigned __int16 v62 = HIWORD(this->var1);
      commonRBSP::flush_bits((uint64_t *)this, 16);
      this->var155.int var2 = v62;
      unsigned __int16 v63 = HIWORD(this->var1);
      commonRBSP::flush_bits((uint64_t *)this, 16);
      this->var155.var3 = v63;
      unsigned __int16 v64 = HIWORD(this->var1);
      commonRBSP::flush_bits((uint64_t *)this, 16);
      this->var155.var4 = v64;
      unsigned int v7 = 64;
      goto LABEL_65;
    case 6:
      goto LABEL_65;
    case 7:
      signed int var148 = this->var148;
      this->signed int var148 = var148 + 1;
      unsigned int v66 = (char *)this + 34 * var148;
      if (var148 >= 5) {
        unsigned int v67 = &v105;
      }
      else {
        unsigned int v67 = v66 + 408314;
      }
      long long v101 = v67;
      *(_WORD *)unsigned int v67 = 1;
      unsigned int v68 = (uint64_t *)(v66 + 408316);
      if (var148 >= 5) {
        unsigned int v68 = &v106;
      }
      *(_WORD *)unsigned int v68 = v5;
      char v69 = HIBYTE(this->var1);
      if (var148 >= 5) {
        unsigned int v70 = (char *)&v106 + 2;
      }
      else {
        unsigned int v70 = v66 + 408318;
      }
      if (var148 >= 5) {
        __int16 v71 = (_WORD *)&v106 + 2;
      }
      else {
        __int16 v71 = v66 + 408320;
      }
      if (var148 >= 5) {
        unsigned int v72 = (_WORD *)&v106 + 3;
      }
      else {
        unsigned int v72 = v66 + 408322;
      }
      if (var148 >= 5) {
        uint64_t v73 = &v107;
      }
      else {
        uint64_t v73 = (uint64_t *)(v66 + 408324);
      }
      if (var148 >= 5) {
        long long v74 = (_WORD *)&v107 + 1;
      }
      else {
        long long v74 = v66 + 408326;
      }
      if (var148 >= 5) {
        uint64_t v75 = (char *)&v107 + 4;
      }
      else {
        uint64_t v75 = v66 + 408328;
      }
      long long v76 = v66 + 408330;
      if (var148 >= 5) {
        long long v76 = (char *)&v107 + 6;
      }
      long long v102 = v75;
      long long v104 = v76;
      commonRBSP::flush_bits((uint64_t *)this, 8);
      *unsigned int v70 = v69;
      unint64_t v77 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      *__int16 v71 = v77;
      unint64_t v78 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      *unsigned int v72 = v78;
      unint64_t v79 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      *(_WORD *)uint64_t v73 = v79;
      unint64_t v80 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      *long long v74 = v80;
      unint64_t v81 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      *long long v102 = v81;
      unint64_t v82 = this->var1 >> 52;
      commonRBSP::flush_bits((uint64_t *)this, 12);
      *long long v104 = v82;
      if (v5 < 0xB)
      {
        unsigned int v7 = 80;
      }
      else
      {
        unint64_t v83 = this->var1 >> 52;
        commonRBSP::flush_bits((uint64_t *)this, 12);
        p_var9 = &this->var156[var148].var9;
        if (var148 >= 5) {
          p_var9 = (unsigned __int16 *)&v108;
        }
        unsigned __int16 *p_var9 = v83;
        if (v5 >= 0xD)
        {
          unint64_t v85 = this->var1 >> 52;
          commonRBSP::flush_bits((uint64_t *)this, 12);
          p_var10 = &this->var156[var148].var10;
          if (var148 >= 5) {
            p_var10 = (unsigned __int16 *)&v108 + 1;
          }
          unsigned __int16 *p_var10 = v85;
          unsigned int v8 = 8 * v5;
          if (v5 == 13)
          {
            unsigned int v7 = 104;
          }
          else
          {
            for (uint64_t i = 0; i != 6; ++i)
            {
              char v98 = HIBYTE(this->var1);
              commonRBSP::flush_bits((uint64_t *)this, 8);
              v101[i + 22] = v98;
            }
            if (v5 < 0x14)
            {
              unsigned int v7 = 152;
            }
            else
            {
              for (uint64_t j = 0; j != 6; ++j)
              {
                char v100 = HIBYTE(this->var1);
                commonRBSP::flush_bits((uint64_t *)this, 8);
                v101[j + 28] = v100;
              }
              unsigned int v7 = 200;
            }
          }
LABEL_64:
          uint64_t v11 = 1;
          goto LABEL_65;
        }
        unsigned int v7 = 92;
      }
      unsigned int v8 = 8 * v5;
      goto LABEL_64;
    case 8:
      uint64_t v11 = 1;
      this->var157.var0 = 1;
      this->var157.unint64_t var1 = v5;
      unint64_t v38 = HIBYTE(this->var1);
      unsigned int v7 = 8;
      commonRBSP::flush_bits((uint64_t *)this, 8);
      this->var157.int var2 = v38;
      if (v38 >= 0x13)
      {
        signed __int16 v39 = HIWORD(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 16);
        this->var157.var3 = v39;
        signed __int16 v40 = HIWORD(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 16);
        this->var157.var4 = v40;
        signed __int16 v41 = HIWORD(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 16);
        this->var157.var5 = v41;
        signed __int16 v42 = HIWORD(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 16);
        this->var157.var6 = v42;
        signed __int16 v43 = HIWORD(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 16);
        this->var157.var7 = v43;
        signed __int16 v44 = HIWORD(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 16);
        this->var157.var8 = v44;
        signed __int16 v45 = HIWORD(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 16);
        this->var157.var9 = v45;
        signed __int16 v46 = HIWORD(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 16);
        this->var157.var10 = v46;
        uint64_t v11 = 1;
        unsigned int v7 = 136;
      }
      goto LABEL_65;
    case 9:
      signed int var149 = this->var149;
      this->signed int var149 = var149 + 1;
      if (var149 > 3)
      {
        commonRBSP::flush_bits((uint64_t *)this, 8);
        commonRBSP::flush_bits((uint64_t *)this, 12);
        commonRBSP::flush_bits((uint64_t *)this, 12);
        unsigned int v93 = HIBYTE(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 8);
        if (v93 > 0x12)
        {
          commonRBSP::flush_bits((uint64_t *)this, 16);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          goto LABEL_58;
        }
        uint64_t v11 = 1;
      }
      else
      {
        unsigned int v48 = &this->var158[var149];
        uint64_t v11 = 1;
        v48->var0 = 1;
        v48->unint64_t var1 = v5;
        unsigned __int8 v49 = HIBYTE(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 8);
        this->var158[var149].int var2 = v49;
        unint64_t v50 = this->var1 >> 52;
        commonRBSP::flush_bits((uint64_t *)this, 12);
        this->var158[var149].var3 = v50;
        unint64_t v51 = this->var1 >> 52;
        commonRBSP::flush_bits((uint64_t *)this, 12);
        this->var158[var149].var4 = v51;
        unint64_t v52 = HIBYTE(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 8);
        this->var158[var149].var5 = v52;
        if (v52 > 0x12)
        {
          signed __int16 v53 = HIWORD(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          this->var158[var149].var6 = v53;
          signed __int16 v54 = HIWORD(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          this->var158[var149].var7 = v54;
          signed __int16 v55 = HIWORD(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          this->var158[var149].var8 = v55;
          signed __int16 v56 = HIWORD(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          this->var158[var149].var9 = v56;
          signed __int16 v57 = HIWORD(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          this->var158[var149].var10 = v57;
          signed __int16 v58 = HIWORD(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          this->var158[var149].var11 = v58;
          signed __int16 v59 = HIWORD(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          this->var158[var149].var12 = v59;
          signed __int16 v60 = HIWORD(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 16);
          this->var158[var149].var13 = v60;
LABEL_58:
          uint64_t v11 = 1;
          unsigned int v7 = 168;
          goto LABEL_65;
        }
      }
      unsigned int v7 = 40;
LABEL_65:
      unsigned int v94 = v7 - v8;
      if (v7 < v8)
      {
        do
          commonRBSP::flush_bits((uint64_t *)this, 1);
        while (!__CFADD__(v94++, 1));
      }
      return v11;
    case 10:
      uint64_t v11 = 1;
      this->var159.var0 = 1;
      unsigned __int8 v87 = HIBYTE(this->var1);
      commonRBSP::flush_bits((uint64_t *)this, 8);
      this->var159.unint64_t var1 = v87;
      unsigned __int8 v88 = HIBYTE(this->var1);
      commonRBSP::flush_bits((uint64_t *)this, 8);
      this->var159.int var2 = v88;
      unsigned __int8 v89 = HIBYTE(this->var1);
      commonRBSP::flush_bits((uint64_t *)this, 8);
      this->var159.var3 = v89;
      unsigned __int8 v90 = HIBYTE(this->var1);
      commonRBSP::flush_bits((uint64_t *)this, 8);
      this->var159.var4 = v90;
      unsigned int v7 = 32;
      goto LABEL_65;
    default:
      if (this == -407878)
      {
        uint64_t v11 = 1;
        this->var160.var0 = 1;
        unsigned __int8 v91 = HIBYTE(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 8);
        this->var160.unint64_t var1 = v91;
        unsigned __int8 v92 = HIBYTE(this->var1);
        commonRBSP::flush_bits((uint64_t *)this, 8);
        this->var160.int var2 = v92;
        unsigned int v7 = 16;
      }
      else
      {
        uint64_t v11 = 0;
        if (this == -407877)
        {
          uint64_t v11 = 1;
          this->var161.var0 = 1;
          unsigned __int8 v15 = HIBYTE(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 8);
          this->var161.unint64_t var1 = v15;
          unsigned __int8 v16 = HIBYTE(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 8);
          this->var161.int var2 = v16;
          unsigned __int8 v17 = HIBYTE(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 8);
          this->var161.var3 = v17;
          unsigned __int8 v18 = HIBYTE(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 8);
          this->var161.var4 = v18;
          unsigned __int8 v19 = HIBYTE(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 8);
          this->var161.var5 = v19;
          unsigned __int8 v20 = HIBYTE(this->var1);
          commonRBSP::flush_bits((uint64_t *)this, 8);
          this->var161.var6 = v20;
          unsigned int v7 = 48;
        }
      }
      goto LABEL_65;
  }
}

EDRMetaData_RBSP *EDRMetaData_RBSP::save_state(EDRMetaData_RBSP *this)
{
  this->var16 = this->var1;
  this->int var17 = this->var2;
  this->var18 = this->var5;
  this->var19 = this->var9;
  this->var20 = this->var8;
  this->var21 = this->var12;
  return this;
}

uint64_t EDRMetaData_RBSP::cal_rpu_crc32(EDRMetaData_RBSP *this)
{
  var11 = this->var11;
  uint64_t v2 = (char *)(this->var12 - var11 + this->var2 / -8 - 5);
  if ((char *)(this->var12 - var11 + this->var2 / -8) == (char *)5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = (unsigned __int8 *)(var11 + 1);
  LODWORD(result) = -1;
  do
  {
    int v5 = *v3++;
    uint64_t result = (crc32_lut[v5 ^ BYTE3(result)] ^ (result << 8));
    --v2;
  }
  while (v2);
  return result;
}

EDRMetaData_RBSP *EDRMetaData_RBSP::restore_state(EDRMetaData_RBSP *this)
{
  this->unint64_t var1 = this->var16;
  this->int var2 = this->var17;
  this->var5 = this->var18;
  this->var9 = this->var19;
  this->var8 = this->var20;
  this->var12 = this->var21;
  return this;
}

uint64_t EDRMetaData_RBSP::ext_blocks_vdr_dm_data_payload2(EDRMetaData_RBSP *this)
{
  int var2 = this->var2;
  BOOL v3 = __OFADD__(var2, 7);
  int v4 = var2 + 7;
  BOOL v2 = var2 + 7 < 0;
  int v5 = var2 + 14;
  if (v2 == v3) {
    int v5 = v4;
  }
  if (LODWORD(this->var6) - LODWORD(this->var5) + (v5 >> 3) < 6) {
    return 0;
  }
  else {
    return commonRBSP::ue_v((commonRBSP *)this);
  }
}

uint64_t EDRMetaData_RBSP::is_valid_ext_block(EDRMetaData_RBSP *this, unsigned int a2, int a3, int a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 1;
  }
  int var2 = this->var2;
  int v7 = var2 + 7;
  BOOL v6 = var2 < -7;
  int v8 = var2 + 14;
  if (!v6) {
    int v8 = v7;
  }
  unsigned int v9 = LODWORD(this->var6) - LODWORD(this->var5) + (v8 >> 3);
  if (v9 >= a2)
  {
    uint64_t result = 0;
    switch(a3)
    {
      case 1:
      case 3:
        BOOL v12 = a2 == 5;
        goto LABEL_32;
      case 2:
        BOOL v12 = a2 == 11;
        goto LABEL_32;
      case 4:
        BOOL v12 = a2 == 3;
        goto LABEL_32;
      case 5:
        BOOL v12 = a2 == 7;
        goto LABEL_32;
      case 6:
        BOOL v12 = a2 == 8;
        goto LABEL_32;
      case 7:
        return result;
      case 8:
        if (a2 >= 0x1A) {
          return 0;
        }
        else {
          return (0x2083400u >> a2) & 1;
        }
      case 9:
        BOOL v12 = (a2 & 0xFFFFFFEF) == 1;
        goto LABEL_32;
      case 10:
        BOOL v12 = (a2 & 0xFFFFFFEF) == 5;
        goto LABEL_32;
      case 11:
        BOOL v12 = a2 == 4;
LABEL_32:
        uint64_t result = v12;
        break;
      default:
        BOOL v14 = a2 == 6;
        if (a3 != 255) {
          BOOL v14 = 0;
        }
        if (a3 == 254) {
          uint64_t result = a2 == 2;
        }
        else {
          uint64_t result = v14;
        }
        break;
    }
  }
  else if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v10 = logInstanceID;
    }
    else {
      uint64_t v10 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 134218754;
      unsigned __int8 v16 = (const char *)WORD1(v10);
      __int16 v17 = 2080;
      *(void *)unsigned __int8 v18 = "is_valid_ext_block";
      *(_WORD *)&v18[8] = 1024;
      unsigned int v19 = v9;
      __int16 v20 = 1024;
      unsigned int v21 = a2;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: remaining_bytes[%u] < length[%u], bail!\n", (uint8_t *)&v15, 0x22u);
    }
    uint64_t result = 0;
    prevLogInstanceID = v10;
  }
  else
  {
    BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v13)
    {
      int v15 = 136315650;
      unsigned __int8 v16 = "is_valid_ext_block";
      __int16 v17 = 1024;
      *(_DWORD *)unsigned __int8 v18 = v9;
      *(_WORD *)&v18[4] = 1024;
      *(_DWORD *)&v18[6] = a2;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: remaining_bytes[%u] < length[%u], bail!\n", (uint8_t *)&v15, 0x18u);
      return 0;
    }
  }
  return result;
}

uint64_t EDRMetaData_RBSP::get_remaining_bytes(EDRMetaData_RBSP *this)
{
  int var2 = this->var2;
  int v3 = var2 + 7;
  BOOL v2 = var2 < -7;
  int v4 = var2 + 14;
  if (!v2) {
    int v4 = v3;
  }
  return (LODWORD(this->var6) - LODWORD(this->var5) + (v4 >> 3));
}

uint64_t getFactorial(signed int a1)
{
  if (a1 < 2) {
    return 1;
  }
  int v1 = 0;
  uint32x4_t v2 = (uint32x4_t)vdupq_n_s32(a1 - 2);
  int32x4_t v3 = vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_2222D1800);
  v4.i64[0] = 0x100000001;
  v4.i64[1] = 0x100000001;
  v5.i64[0] = 0x300000003;
  v5.i64[1] = 0x300000003;
  do
  {
    int8x16_t v6 = (int8x16_t)v4;
    int32x4_t v4 = vmulq_s32(v3, v4);
    v1 += 4;
    int32x4_t v3 = vaddq_s32(v3, v5);
  }
  while (((a1 + 2) & 0xFFFFFFFC) != v1);
  int8x16_t v7 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v1 - 4), (int8x16_t)xmmword_2222D1810), v2), v6, (int8x16_t)v4);
  *(int32x2_t *)v7.i8 = vmul_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  return (v7.i32[0] * v7.i32[1]);
}

uint64_t getBernsteinCoeff(signed int a1, signed int a2)
{
  if (a1 < 2)
  {
    int v9 = 1;
  }
  else
  {
    int v2 = 0;
    uint32x4_t v3 = (uint32x4_t)vdupq_n_s32(a1 - 2);
    int32x4_t v4 = vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_2222D1800);
    v5.i64[0] = 0x100000001;
    v5.i64[1] = 0x100000001;
    v6.i64[0] = 0x300000003;
    v6.i64[1] = 0x300000003;
    do
    {
      int8x16_t v7 = (int8x16_t)v5;
      int32x4_t v5 = vmulq_s32(v4, v5);
      v2 += 4;
      int32x4_t v4 = vaddq_s32(v4, v6);
    }
    while (((a1 + 2) & 0xFFFFFFFC) != v2);
    int8x16_t v8 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v2 - 4), (int8x16_t)xmmword_2222D1810), v3), v7, (int8x16_t)v5);
    *(int32x2_t *)v8.i8 = vmul_s32(*(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
    int v9 = v8.i32[0] * v8.i32[1];
  }
  if (a2 < 2)
  {
    int v17 = 1;
  }
  else
  {
    int v10 = 0;
    uint32x4_t v11 = (uint32x4_t)vdupq_n_s32(a2 - 2);
    int32x4_t v12 = vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_2222D1800);
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    v14.i64[0] = 0x300000003;
    v14.i64[1] = 0x300000003;
    do
    {
      int8x16_t v15 = (int8x16_t)v13;
      int32x4_t v13 = vmulq_s32(v12, v13);
      v10 += 4;
      int32x4_t v12 = vaddq_s32(v12, v14);
    }
    while (((a2 + 2) & 0xFFFFFFFC) != v10);
    int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v10 - 4), (int8x16_t)xmmword_2222D1810), v11), v15, (int8x16_t)v13);
    *(int32x2_t *)v16.i8 = vmul_s32(*(int32x2_t *)v16.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
    int v17 = v16.i32[0] * v16.i32[1];
  }
  unsigned int v18 = a1 - a2;
  if (a1 - a2 < 2)
  {
    int v26 = 1;
  }
  else
  {
    int v19 = 0;
    uint32x4_t v20 = (uint32x4_t)vdupq_n_s32(a1 - a2 - 2);
    int32x4_t v21 = vaddq_s32(vdupq_n_s32(v18), (int32x4_t)xmmword_2222D1800);
    v22.i64[0] = 0x100000001;
    v22.i64[1] = 0x100000001;
    v23.i64[0] = 0x300000003;
    v23.i64[1] = 0x300000003;
    do
    {
      int8x16_t v24 = (int8x16_t)v22;
      int32x4_t v22 = vmulq_s32(v21, v22);
      v19 += 4;
      int32x4_t v21 = vaddq_s32(v21, v23);
    }
    while (((v18 + 2) & 0xFFFFFFFC) != v19);
    int8x16_t v25 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v19 - 4), (int8x16_t)xmmword_2222D1810), v20), v24, (int8x16_t)v22);
    *(int32x2_t *)v25.i8 = vmul_s32(*(int32x2_t *)v25.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
    int v26 = v25.i32[0] * v25.i32[1];
  }
  return (v9 / (v26 * v17));
}

void BezierCurve(float *a1, int a2, float *a3, float *a4, int a5, float *a6, float *a7)
{
}

float BezierCurvePolyCoeff(float *a1, float *a2, unsigned int a3, signed int a4, float *a5, float *a6)
{
  *a1 = 0.0;
  *a2 = 0.0;
  if ((a3 & 0x80000000) == 0)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a3 + 1;
    unsigned int v12 = a3 + 4;
    v13.i64[0] = 0x300000003;
    v13.i64[1] = 0x300000003;
    unsigned int v14 = a3;
    int v15 = 2;
    do
    {
      if (v14 >= 2) {
        int v16 = 2;
      }
      else {
        int v16 = v14;
      }
      signed int v17 = a3 - v10;
      if (a3 - v10 >= 2) {
        int v18 = 2;
      }
      else {
        int v18 = a3 - v10;
      }
      if (v10 < 2)
      {
        int v25 = 1;
      }
      else
      {
        int v19 = 0;
        uint32x4_t v20 = (uint32x4_t)vdupq_n_s32((int)v10 - 2);
        int32x4_t v21 = vaddq_s32(vdupq_n_s32(v10), (int32x4_t)xmmword_2222D1800);
        v22.i64[0] = 0x100000001;
        v22.i64[1] = 0x100000001;
        do
        {
          int8x16_t v23 = (int8x16_t)v22;
          int32x4_t v22 = vmulq_s32(v21, v22);
          v19 += 4;
          int32x4_t v21 = vaddq_s32(v21, v13);
        }
        while ((v15 & 0xFFFFFFFC) != v19);
        int8x16_t v24 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v19 - 4), (int8x16_t)xmmword_2222D1810), v20), v23, (int8x16_t)v22);
        *(int32x2_t *)v24.i8 = vmul_s32(*(int32x2_t *)v24.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
        int v25 = v24.i32[0] * v24.i32[1];
      }
      if (v17 < 2)
      {
        int v33 = 1;
      }
      else
      {
        int v26 = 0;
        unsigned int v27 = (v12 - v16) & 0xFFFFFFFC;
        uint32x4_t v28 = (uint32x4_t)vdupq_n_s32((int)v11 - (int)v10 - v18 - 1);
        int32x4_t v29 = vaddq_s32(vdupq_n_s32(v17), (int32x4_t)xmmword_2222D1800);
        v30.i64[0] = 0x100000001;
        v30.i64[1] = 0x100000001;
        do
        {
          int8x16_t v31 = (int8x16_t)v30;
          int32x4_t v30 = vmulq_s32(v29, v30);
          v26 += 4;
          int32x4_t v29 = vaddq_s32(v29, v13);
        }
        while (v27 != v26);
        int8x16_t v32 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v26 - 4), (int8x16_t)xmmword_2222D1810), v28), v31, (int8x16_t)v30);
        *(int32x2_t *)v32.i8 = vmul_s32(*(int32x2_t *)v32.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
        int v33 = v32.i32[0] * v32.i32[1];
      }
      float v34 = (float)(v33 * v25);
      float v35 = powf(-1.0, (float)(int)(v10 + a3));
      *a1 = *a1 + (float)((float)(v35 * a5[v10]) / v34);
      float v36 = (float)(v35 * a6[v10++]) / v34;
      *a2 = *a2 + v36;
      ++v15;
      --v12;
      --v14;
      v13.i64[0] = 0x300000003;
      v13.i64[1] = 0x300000003;
    }
    while (v10 != v11);
  }
  if (a4 < 2)
  {
    int v44 = 1;
  }
  else
  {
    int v37 = 0;
    uint32x4_t v38 = (uint32x4_t)vdupq_n_s32(a4 - 2);
    int32x4_t v39 = vaddq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2222D1800);
    v40.i64[0] = 0x100000001;
    v40.i64[1] = 0x100000001;
    v41.i64[0] = 0x300000003;
    v41.i64[1] = 0x300000003;
    do
    {
      int8x16_t v42 = (int8x16_t)v40;
      int32x4_t v40 = vmulq_s32(v39, v40);
      v37 += 4;
      int32x4_t v39 = vaddq_s32(v39, v41);
    }
    while (((a4 + 2) & 0xFFFFFFFC) != v37);
    int8x16_t v43 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v37 - 4), (int8x16_t)xmmword_2222D1810), v38), v42, (int8x16_t)v40);
    *(int32x2_t *)v43.i8 = vmul_s32(*(int32x2_t *)v43.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
    int v44 = v43.i32[0] * v43.i32[1];
  }
  unsigned int v45 = a4 - a3;
  if ((int)(a4 - a3) < 2)
  {
    int v53 = 1;
  }
  else
  {
    int v46 = 0;
    uint32x4_t v47 = (uint32x4_t)vdupq_n_s32(v45 - 2);
    int32x4_t v48 = vaddq_s32(vdupq_n_s32(v45), (int32x4_t)xmmword_2222D1800);
    v49.i64[0] = 0x100000001;
    v49.i64[1] = 0x100000001;
    v50.i64[0] = 0x300000003;
    v50.i64[1] = 0x300000003;
    do
    {
      int8x16_t v51 = (int8x16_t)v49;
      int32x4_t v49 = vmulq_s32(v48, v49);
      v46 += 4;
      int32x4_t v48 = vaddq_s32(v48, v50);
    }
    while (((v45 + 2) & 0xFFFFFFFC) != v46);
    int8x16_t v52 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v46 - 4), (int8x16_t)xmmword_2222D1810), v47), v51, (int8x16_t)v49);
    *(int32x2_t *)v52.i8 = vmul_s32(*(int32x2_t *)v52.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
    int v53 = v52.i32[0] * v52.i32[1];
  }
  int v54 = v44 / v53;
  *a1 = *a1 * (float)v54;
  float result = *a2 * (float)v54;
  *a2 = result;
  return result;
}

float BezierCurvePolyCoeff(float *a1, unsigned int a2, signed int a3, float *a4)
{
  *a1 = 0.0;
  if ((a2 & 0x80000000) != 0)
  {
    float v11 = 0.0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 1;
    unsigned int v10 = a2 + 4;
    float v11 = 0.0;
    v12.i64[0] = 0x300000003;
    v12.i64[1] = 0x300000003;
    unsigned int v13 = a2;
    int v14 = 2;
    do
    {
      if (v13 >= 2) {
        int v15 = 2;
      }
      else {
        int v15 = v13;
      }
      signed int v16 = a2 - v8;
      if (a2 - v8 >= 2) {
        int v17 = 2;
      }
      else {
        int v17 = a2 - v8;
      }
      if (v8 < 2)
      {
        int v24 = 1;
      }
      else
      {
        int v18 = 0;
        uint32x4_t v19 = (uint32x4_t)vdupq_n_s32((int)v8 - 2);
        int32x4_t v20 = vaddq_s32(vdupq_n_s32(v8), (int32x4_t)xmmword_2222D1800);
        v21.i64[0] = 0x100000001;
        v21.i64[1] = 0x100000001;
        do
        {
          int8x16_t v22 = (int8x16_t)v21;
          int32x4_t v21 = vmulq_s32(v20, v21);
          v18 += 4;
          int32x4_t v20 = vaddq_s32(v20, v12);
        }
        while ((v14 & 0xFFFFFFFC) != v18);
        int8x16_t v23 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v18 - 4), (int8x16_t)xmmword_2222D1810), v19), v22, (int8x16_t)v21);
        *(int32x2_t *)v23.i8 = vmul_s32(*(int32x2_t *)v23.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
        int v24 = v23.i32[0] * v23.i32[1];
      }
      if (v16 < 2)
      {
        int v32 = 1;
      }
      else
      {
        int v25 = 0;
        unsigned int v26 = (v10 - v15) & 0xFFFFFFFC;
        uint32x4_t v27 = (uint32x4_t)vdupq_n_s32((int)v9 - (int)v8 - v17 - 1);
        int32x4_t v28 = vaddq_s32(vdupq_n_s32(v16), (int32x4_t)xmmword_2222D1800);
        v29.i64[0] = 0x100000001;
        v29.i64[1] = 0x100000001;
        do
        {
          int8x16_t v30 = (int8x16_t)v29;
          int32x4_t v29 = vmulq_s32(v28, v29);
          v25 += 4;
          int32x4_t v28 = vaddq_s32(v28, v12);
        }
        while (v26 != v25);
        int8x16_t v31 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v25 - 4), (int8x16_t)xmmword_2222D1810), v27), v30, (int8x16_t)v29);
        *(int32x2_t *)v31.i8 = vmul_s32(*(int32x2_t *)v31.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
        int v32 = v31.i32[0] * v31.i32[1];
      }
      float v33 = (float)(powf(-1.0, (float)(int)(v8 + a2)) * a4[v8]) / (float)(v32 * v24);
      ++v8;
      float v11 = v11 + v33;
      *a1 = v11;
      ++v14;
      --v10;
      --v13;
      v12.i64[0] = 0x300000003;
      v12.i64[1] = 0x300000003;
    }
    while (v8 != v9);
  }
  if (a3 < 2)
  {
    int v41 = 1;
  }
  else
  {
    int v34 = 0;
    uint32x4_t v35 = (uint32x4_t)vdupq_n_s32(a3 - 2);
    int32x4_t v36 = vaddq_s32(vdupq_n_s32(a3), (int32x4_t)xmmword_2222D1800);
    v37.i64[0] = 0x100000001;
    v37.i64[1] = 0x100000001;
    v38.i64[0] = 0x300000003;
    v38.i64[1] = 0x300000003;
    do
    {
      int8x16_t v39 = (int8x16_t)v37;
      int32x4_t v37 = vmulq_s32(v36, v37);
      v34 += 4;
      int32x4_t v36 = vaddq_s32(v36, v38);
    }
    while (((a3 + 2) & 0xFFFFFFFC) != v34);
    int8x16_t v40 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v34 - 4), (int8x16_t)xmmword_2222D1810), v35), v39, (int8x16_t)v37);
    *(int32x2_t *)v40.i8 = vmul_s32(*(int32x2_t *)v40.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
    int v41 = v40.i32[0] * v40.i32[1];
  }
  unsigned int v42 = a3 - a2;
  if ((int)(a3 - a2) < 2)
  {
    int v50 = 1;
  }
  else
  {
    int v43 = 0;
    uint32x4_t v44 = (uint32x4_t)vdupq_n_s32(a3 - a2 - 2);
    int32x4_t v45 = vaddq_s32(vdupq_n_s32(v42), (int32x4_t)xmmword_2222D1800);
    v46.i64[0] = 0x100000001;
    v46.i64[1] = 0x100000001;
    v47.i64[0] = 0x300000003;
    v47.i64[1] = 0x300000003;
    do
    {
      int8x16_t v48 = (int8x16_t)v46;
      int32x4_t v46 = vmulq_s32(v45, v46);
      v43 += 4;
      int32x4_t v45 = vaddq_s32(v45, v47);
    }
    while (((v42 + 2) & 0xFFFFFFFC) != v43);
    int8x16_t v49 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v43 - 4), (int8x16_t)xmmword_2222D1810), v44), v48, (int8x16_t)v46);
    *(int32x2_t *)v49.i8 = vmul_s32(*(int32x2_t *)v49.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
    int v50 = v49.i32[0] * v49.i32[1];
  }
  float result = v11 * (float)(v41 / v50);
  *a1 = result;
  return result;
}

void getBezierCurvePolyCoeff(float *a1, float *a2, signed int a3, float *a4, float *a5)
{
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (a3 + 1);
    do
      BezierCurvePolyCoeff(a1++, a2++, v10++, a3, a4, a5);
    while (v11 != v10);
  }
}

void getBezierCurvePolyCoeff(float *a1, signed int a2, float *a3)
{
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (a2 + 1);
    do
      BezierCurvePolyCoeff(a1++, v6++, a2, a3);
    while (v7 != v6);
  }
}

void BezierCurvePoly(float *a1, int a2, float *a3, float *a4, int a5, float *a6, float *a7)
{
}

void BezierCurvePoly(float *a1, int a2, float *a3, int a4, float *a5)
{
}

uint64_t convertTonemapCurveS_C_Bezier_abs(uint64_t result, float a2)
{
  for (uint64_t i = 0; i != 24; i += 4)
    *(float *)(result + i + 368) = *(float *)(result + i + 4) * a2;
  return result;
}

unsigned __int16 *getBezierAnchors(unsigned __int16 *result)
{
  unint64_t v1 = *result;
  if (v1 >= 2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (v1 - 1);
    int32x4_t v4 = (float *)(result + 198);
    int32x4_t v5 = (float *)(result + 44);
    do
    {
      uint64_t v6 = &result[2 * v2 + 14];
      uint64_t v7 = &result[30 * v2 + 196];
      *(_DWORD *)uint64_t v7 = *(_DWORD *)v6;
      unint64_t v8 = &result[v2++];
      uint64_t v9 = &result[2 * v2 + 14];
      unint64_t v10 = v8[38];
      *(_DWORD *)&v7[2 * v10] = *(_DWORD *)v9;
      if (v10 >= 2)
      {
        uint64_t v11 = (v10 - 1);
        int32x4_t v12 = v5;
        unsigned int v13 = v4;
        do
        {
          float v14 = *v12++;
          *v13++ = *(float *)v6 + (float)(v14 * (float)(*(float *)v9 - *(float *)v6));
          --v11;
        }
        while (v11);
      }
      v4 += 15;
      v5 += 14;
    }
    while (v2 != v3);
  }
  return result;
}

float *convertBezierToPoly(float *result)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(unsigned __int16 *)result >= 2u)
  {
    unint64_t v1 = result;
    uint64_t v2 = 0;
    signed int v3 = *(unsigned __int16 *)result;
    int32x4_t v4 = result + 173;
    int32x4_t v5 = result + 98;
    uint64_t v6 = *(unsigned __int16 *)result + 1;
    uint64_t v7 = result + 173;
    do
      BezierCurvePolyCoeff(v7++, v2++, v3, v5);
    while (v6 != v2);
    float v8 = v1[92];
    v10[0] = -v8;
    float v9 = v1[93];
    v10[1] = 1.0;
    PolyGeneric2PolyStd(v10, 2, v9 - v8, *(unsigned __int16 *)v1, v4, v1 + 248);
  }
  return result;
}

void sub_22226F764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22226F7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22226FBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22226FCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222271D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_22227263C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_222272A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222274894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_2222754A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);

  _Unwind_Resume(a1);
}

void sub_222275780(_Unwind_Exception *exception_object)
{
}

void sub_222275830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222759BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t setupPolynomialTables(int *a1, uint64_t a2)
{
  int v4 = 0;
  int v5 = *a1 + 8;
  do
  {
    uint64_t result = createPolynomialTableForComponent(a1, v4, a2 + 2 * (v4 << v5));
    ++v4;
  }
  while (v4 != 3);
  return result;
}

uint64_t setupDequantizeTables(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  int v5 = *(_DWORD *)(a1 + 4) + 8;
  do
  {
    uint64_t result = createNlqTableForComponent(a1, v4, a2 + 4 * (v4 << v5));
    ++v4;
  }
  while (v4 != 3);
  return result;
}

void sub_222276BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222277080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222277180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222277290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222773F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222277588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222277708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t createMMRCoefficients(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(float *)(a2 + 40) = (float)*(uint64_t *)(result + 11800);
  int v2 = *(_DWORD *)(result + 3444);
  if (v2)
  {
    if ((v2 + 1) > 2) {
      uint64_t v3 = (v2 + 1);
    }
    else {
      uint64_t v3 = 2;
    }
    uint64_t v4 = result + 11856;
    uint64_t v5 = 1;
    int v6 = 1;
    do
    {
      uint64_t v7 = 0;
      int v8 = v6;
      uint64_t v9 = a2 + 40 + 4 * v6;
      do
      {
        *(float *)(v9 + 4 * v7) = (float)*(uint64_t *)(v4 + 8 * v7);
        ++v7;
      }
      while (v7 != 7);
      ++v5;
      int v6 = v8 + 7;
      v4 += 56;
    }
    while (v5 != v3);
  }
  *(float *)(a2 + 128) = (float)*(uint64_t *)(result + 13816);
  int v10 = *(_DWORD *)(result + 3480);
  if (v10)
  {
    if ((v10 + 1) > 2) {
      uint64_t v11 = (v10 + 1);
    }
    else {
      uint64_t v11 = 2;
    }
    uint64_t v12 = result + 13872;
    uint64_t v13 = 1;
    int v14 = 1;
    do
    {
      uint64_t v15 = 0;
      int v16 = v14;
      uint64_t v17 = a2 + 128 + 4 * v14;
      do
      {
        *(float *)(v17 + 4 * v15) = (float)*(uint64_t *)(v12 + 8 * v15);
        ++v15;
      }
      while (v15 != 7);
      ++v13;
      int v14 = v16 + 7;
      v12 += 56;
    }
    while (v13 != v11);
  }
  return result;
}

float setupNlqParameters(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = a1[1];
  int v4 = a1[11];
  *(float *)(a2 + 216) = 1.0 / (float)(1 << (v4 - v3 - 13));
  char v5 = 3 - v3;
  int v6 = a1 + 5050;
  do
  {
    int v7 = (v6[244] << v4) | v6[271];
    int v8 = (v6[136] << v4) | v6[163];
    uint64_t v9 = (uint64_t)(int)((v6[27] << v4) | v6[54]) << v5;
    unsigned int v10 = *v6++;
    uint64_t v11 = (float *)(a2 + 232 + v2);
    *(v11 - 1) = (float)v8;
    *uint64_t v11 = (float)v9;
    float result = (float)v10;
    *(v11 - 3) = (float)v10;
    *(v11 - 2) = (float)v7;
    v2 += 16;
  }
  while (v2 != 48);
  return result;
}

void sub_222277AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222277C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222277D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222277E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222278034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2222781C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222278380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222278478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222278704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2222787FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222278910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_222278A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222278B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222278C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_222278E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222278FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222279138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t createPolynomialTableForComponent(int *a1, int a2, uint64_t a3)
{
  unsigned int v3 = 0;
  int v4 = *a1;
  char v5 = *a1 + 8;
  int v6 = &a1[18 * a2];
  unsigned int v7 = v6[15];
  int v8 = a1[2];
  char v9 = 16 - v8;
  unint64_t v10 = ~(-1 << v8);
  unint64_t v11 = (a1[a2 + 12] - 1);
  uint64_t v12 = a1 + 366;
  int v13 = a1[5038];
  uint64_t result = (a1[11] + 4);
  do
  {
    LODWORD(v15) = v7;
    if (v3 >= v7)
    {
      LODWORD(v15) = v6[v11 + 15];
      if (v3 < v15) {
        LODWORD(v15) = v3;
      }
    }
    uint64_t v16 = 16;
    while (v16 - v11 != 16)
    {
      unsigned int v17 = v6[v16++];
      if (v17 > v15)
      {
        unint64_t v18 = v16 - 17;
        int v19 = v18;
        goto LABEL_10;
      }
    }
    unint64_t v18 = v11;
    int v19 = v11;
LABEL_10:
    int v20 = v19 - (v18 >= v11);
    if (v4) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = (4 * v15);
    }
    uint64_t v21 = ((*(void *)&v12[108 * a2 + 4 + 12 * v20] * v15 + (*(void *)&v12[108 * a2 + 2 + 12 * v20] << 10)) * v15
         + (*(void *)&v12[108 * a2 + 12 * v20] << 20)) >> result;
    if (v21 >= 0xFFFF) {
      uint64_t v21 = 0xFFFFLL;
    }
    unint64_t v22 = v21 & ~(v21 >> 63);
    unint64_t v23 = v22 >> v9;
    if (v22 >> v9 >= v10) {
      LOWORD(v23) = v10;
    }
    if (v13 == 1) {
      LOWORD(v22) = v23;
    }
    *(_WORD *)(a3 + 2 * v3++) = v22;
  }
  while (!(v3 >> v5));
  return result;
}

uint64_t createMmrTableForComponent(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v5 = (_DWORD *)(result + 1008 * a2 + 15832);
  *a5 = *v5;
  uint64_t v6 = 1;
  unint64_t v7 = 7;
  uint64_t v8 = 0x700000000;
  do
  {
    a5[v6] = *(_DWORD *)((char *)&v5[7
                                   * ((((v6
                                                        + 6
                                                        - ((unsigned __int16)(37 * (v6 + 6)) >> 8)) >> 1)
                                     + ((37 * (v6 + 6)) >> 8)) >> 2)]
                       + ((uint64_t)(v8 - 0x700000000 * (v7 / 7)) >> 30));
    ++v6;
    v8 += 0x100000000;
    ++v7;
  }
  while (v6 != 22);
  uint64_t v9 = 0;
  unint64_t v10 = (_DWORD *)(result + 60);
  do
  {
    *(_WORD *)(a3 + 2 * v9) = *v10;
    *(_WORD *)(a4 + 2 * v9) = v10[*(_DWORD *)(result + 4 * v9 + 48) - 1];
    ++v9;
    v10 += 18;
  }
  while (v9 != 3);
  return result;
}

uint64_t createNlqTableForComponent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 0;
  int v4 = *(_DWORD *)(a1 + 4);
  char v5 = v4 + 8;
  int v6 = *(_DWORD *)(a1 + 44);
  unint64_t v7 = (unsigned int *)(a1 + 4 * a2);
  uint64_t v8 = v7[5050];
  uint64_t v9 = (int)((v7[5294] << v6) | v7[5321]);
  int v10 = (v7[5186] << v6) | v7[5213];
  uint64_t v11 = (int)((v7[5077] << v6) | v7[5104]);
  char v12 = 2 - v4;
  uint64_t v13 = v11 << (3 - v4);
  uint64_t v14 = v9 << (3 - v4);
  char v15 = v6 - v4 - 13;
  int v16 = -2 * v8;
  uint64_t result = -(int)v8;
  do
  {
    if (v8 == v3)
    {
      LODWORD(v18) = 0;
    }
    else
    {
      if ((int)v3 - (int)v8 < 0) {
        int v19 = v16 + 1;
      }
      else {
        int v19 = v16 - 1;
      }
      int v20 = v19 << v12;
      if ((int)v3 - (int)v8 >= 0) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = -1;
      }
      uint64_t v22 = v14 * v21 + v10 * (uint64_t)v20;
      if (v22 <= -v13) {
        uint64_t v23 = -v13;
      }
      else {
        uint64_t v23 = v22;
      }
      if (v22 <= v13) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = v13;
      }
      uint64_t v18 = v24 >> v15;
    }
    *(_DWORD *)(a3 + 4 * v3++) = v18;
    v16 += 2;
  }
  while (!(v3 >> v5));
  return result;
}

void sub_222279EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222279F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AdaptiveTM;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_22227A450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22227A628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22227A898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_22227ABC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  for (uLong result = ~crc; *(void *)&len; --*(void *)&len)
  {
    int v4 = *buf++;
    uLong result = (crc32_lut[v4 ^ BYTE3(result)] ^ (result << 8));
  }
  return result;
}

void sub_22227B9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int *FindChromaDist(int *result, unsigned int a2, int a3)
{
  v14[3] = *MEMORY[0x263EF8340];
  if (result)
  {
    GetRgb2XyzM33ByV8Prims(result, v10);
    v14[0] = (uint64_t)(v10[0] * (unint64_t)a2) >> 26;
    v14[1] = (uint64_t)(v10[3] * (unint64_t)a2) >> 26;
    v14[2] = (uint64_t)(v10[6] * (unint64_t)a2) >> 26;
    Xyz2IctcpDm(v14, &v11);
    int v5 = v12;
    int v6 = a3 - v11;
    if (a3 - v11 == 0x80000000) {
      int v7 = 0x7FFFFFFF;
    }
    else {
      int v7 = v11 - a3;
    }
    if (v6 < 0) {
      int v6 = v7;
    }
    if (v12 == 0x80000000) {
      int v8 = 0x7FFFFFFF;
    }
    else {
      int v8 = -v12;
    }
    if (v12 < 0) {
      int v5 = v8;
    }
    if (v13 == 0x80000000) {
      int v9 = 0x7FFFFFFF;
    }
    else {
      int v9 = -v13;
    }
    if (v13 >= 0) {
      int v9 = v13;
    }
    return (int *)(v5 + v9 + v6);
  }
  return result;
}

float *ClampL8(float *result)
{
  float v1 = 0.0;
  float v2 = 2.0;
  float v3 = result[1];
  if (*result <= 2.0) {
    float v4 = *result;
  }
  else {
    float v4 = 2.0;
  }
  if (*result >= 0.0) {
    float v5 = v4;
  }
  else {
    float v5 = 0.0;
  }
  float v6 = 1.0;
  if (v3 <= 1.0) {
    float v6 = result[1];
  }
  if (v3 >= -1.0) {
    float v7 = v6;
  }
  else {
    float v7 = -1.0;
  }
  *uLong result = v5;
  result[1] = v7;
  float v8 = result[2];
  if (v8 <= 2.0) {
    float v2 = result[2];
  }
  if (v8 >= 0.0) {
    float v1 = v2;
  }
  result[2] = v1;
  float v9 = result[4];
  float v10 = 1.5;
  if (v9 <= 1.5) {
    float v10 = result[4];
  }
  if (v9 >= 0.5) {
    float v11 = v10;
  }
  else {
    float v11 = 0.5;
  }
  result[4] = v11;
  float v12 = result[6];
  float v13 = -0.5;
  if (v12 >= -0.5)
  {
    float v13 = 0.5;
    if (v12 <= 0.5) {
      float v13 = result[6];
    }
  }
  result[6] = v13;
  return result;
}

uint64_t InterpChromaTrim8(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v8 = 0;
  LOWORD(a4) = *(_WORD *)(result + 12);
  double v9 = (double)*(unint64_t *)&a4;
  LOWORD(a5) = *(_WORD *)(a2 + 12);
  *(double *)&unint64_t v10 = (double)*(unint64_t *)&a5 - v9;
  double v11 = v9 + *(double *)&v10 * a3;
  LOWORD(v10) = *(_WORD *)(result + 14);
  LOWORD(a6) = *(_WORD *)(a2 + 14);
  double v12 = (double)v10 + ((double)*(unint64_t *)&a6 - (double)v10) * a3;
  *(float *)&double v11 = v11;
  *(float *)&double v12 = v12;
  a8[3] = LODWORD(v11);
  a8[4] = LODWORD(v12);
  float v13 = a8 + 8;
  uint64_t v14 = a2 + 28;
  uint64_t v15 = result + 28;
  do
  {
    LOBYTE(v11) = *(unsigned char *)(v15 + v8 - 6);
    double v16 = (double)*(unint64_t *)&v11;
    LOBYTE(v12) = *(unsigned char *)(v14 + v8 - 6);
    *(double *)&unint64_t v17 = (double)*(unint64_t *)&v12 - v16;
    double v18 = v16 + *(double *)&v17 * a3;
    *(float *)&double v18 = v18;
    *float v13 = LODWORD(v18);
    LOBYTE(v18) = *(unsigned char *)(v15 + v8);
    double v19 = (double)*(unint64_t *)&v18;
    LOBYTE(v17) = *(unsigned char *)(v14 + v8);
    double v12 = (double)v17 - v19;
    double v11 = v19 + v12 * a3;
    *(float *)&double v11 = v11;
    v13[6] = LODWORD(v11);
    ++v8;
    ++v13;
  }
  while (v8 != 6);
  return result;
}

float InterpLumaTrim8(_WORD *a1, _WORD *a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8)
{
  LOWORD(a4) = a1[3];
  double v8 = (double)*(unint64_t *)&a4;
  LOWORD(a5) = a2[3];
  *(double *)&unint64_t v9 = (double)*(unint64_t *)&a5 - v8;
  double v10 = v8 + *(double *)&v9 * a3;
  *(float *)&double v10 = v10;
  LOWORD(v9) = a1[4];
  double v11 = (double)v9;
  LOWORD(a6) = a2[4];
  *(double *)&unint64_t v12 = (double)*(unint64_t *)&a6 - v11;
  double v13 = v11 + *(double *)&v12 * a3;
  *(float *)&double v13 = v13;
  *(_DWORD *)a8 = LODWORD(v10);
  *(_DWORD *)(a8 + 4) = LODWORD(v13);
  LOWORD(v10) = a1[5];
  double v14 = (double)*(unint64_t *)&v10;
  LOWORD(v13) = a2[5];
  *(double *)&unint64_t v15 = (double)*(unint64_t *)&v13 - v14;
  double v16 = v14 + *(double *)&v15 * a3;
  *(float *)&double v16 = v16;
  *(_DWORD *)(a8 + 8) = LODWORD(v16);
  LOWORD(v16) = a1[8];
  double v17 = (double)*(unint64_t *)&v16;
  LOWORD(v15) = a2[8];
  *(double *)&unint64_t v18 = (double)v15 - v17;
  double v19 = v17 + *(double *)&v18 * a3;
  LOWORD(v18) = a1[9];
  LOWORD(v12) = a2[9];
  double v20 = (double)v18 + ((double)v12 - (double)v18) * a3;
  *(float *)&double v19 = v19;
  *(float *)&double v20 = v20;
  *(_DWORD *)(a8 + 20) = LODWORD(v19);
  *(_DWORD *)(a8 + 24) = LODWORD(v20);
  LOWORD(v19) = a1[10];
  LOWORD(v20) = a2[10];
  float result = (double)*(unint64_t *)&v19
         + ((double)*(unint64_t *)&v20 - (double)*(unint64_t *)&v19) * a3;
  *(float *)(a8 + 28) = result;
  return result;
}

float InterpChromaTrim2(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8)
{
  LOWORD(a4) = *(_WORD *)(a1 + 10);
  double v8 = (double)*(unint64_t *)&a4;
  LOWORD(a5) = *(_WORD *)(a2 + 10);
  *(double *)&unint64_t v9 = (double)*(unint64_t *)&a5 - v8;
  double v10 = v8 + *(double *)&v9 * a3;
  LOWORD(v9) = *(_WORD *)(a1 + 12);
  LOWORD(a6) = *(_WORD *)(a2 + 12);
  *(float *)&double v10 = v10;
  float result = (double)v9 + ((double)*(unint64_t *)&a6 - (double)v9) * a3;
  *(_DWORD *)(a8 + 12) = LODWORD(v10);
  *(float *)(a8 + 16) = result;
  return result;
}

float InterpLumaTrim2(_WORD *a1, _WORD *a2, _WORD *a3, uint64_t a4, double a5)
{
  double v6 = a5;
  double v21 = 0.0;
  double v22 = 0.0;
  double v19 = 0.0;
  if (a1 == a3)
  {
    LOWORD(a5) = a1[2];
    *(double *)&unint64_t v11 = (double)*(unint64_t *)&a5 / 1096.0;
    double v12 = *(double *)&v11 + 0.5;
    LOWORD(v11) = a1[3];
    double v10 = (double)v11 * 0.000244140625 + -0.5;
    double v21 = v10;
    double v22 = v12;
  }
  else
  {
    double v10 = SlopeOffsetL2ToL8(a1, &v22, &v21, a5);
  }
  if (a2 == a1)
  {
    double v14 = v21;
    double v13 = v22;
  }
  else if (a2 == a3)
  {
    LOWORD(v10) = a3[2];
    unint64_t v15 = 0.5;
    double v13 = (double)*(unint64_t *)&v10 / 1096.0 + 0.5;
    LOWORD(v15) = a3[3];
    double v14 = (double)v15 * 0.000244140625 + -0.5;
  }
  else
  {
    double v20 = 0.0;
    SlopeOffsetL2ToL8(a2, &v20, &v19, v10);
    double v14 = v19;
    double v13 = v20;
  }
  double v16 = v22 + (v13 - v22) * v6;
  *(float *)&double v16 = v16;
  double v17 = v21 + (v14 - v21) * v6;
  *(float *)&double v17 = v17;
  *(_DWORD *)a4 = LODWORD(v16);
  *(_DWORD *)(a4 + 4) = LODWORD(v17);
  LOWORD(v16) = a1[4];
  LOWORD(v17) = a2[4];
  *(float *)&double v16 = (double)*(unint64_t *)&v16
                 + ((double)*(unint64_t *)&v17 - (double)*(unint64_t *)&v16) * v6;
  *(_DWORD *)(a4 + 8) = LODWORD(v16);
  float result = (double)(__int16)a1[7] + ((double)(__int16)a2[7] - (double)(__int16)a1[7]) * v6;
  *(float *)(a4 + 20) = result;
  return result;
}

void RgbLinear2Itp(float a1, float a2, float a3, const float (*a4)[3], const float (*a5)[3], float *a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!a4) {
    goto LABEL_6;
  }
  uint64_t v8 = 0;
  unint64_t v9 = (float *)&(*a4)[2];
  do
  {
    float v10 = (float)(*(v9 - 1) * a2) + (float)(*(v9 - 2) * a1);
    float v11 = *v9;
    v9 += 3;
    *(float *)((char *)&v25 + v8) = v10 + (float)(v11 * a3);
    v8 += 4;
  }
  while (v8 != 12);
  a1 = v25;
  if (v25 >= 0.0)
  {
    float v12 = powf(v25 * 0.0001, 0.1593);
    float v13 = powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
  }
  else
  {
LABEL_6:
    float v14 = powf(a1 * -0.0001, 0.1593);
    float v13 = 0.0000014619 - powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
  }
  if (v26 >= 0.0)
  {
    float v17 = powf(v26 * 0.0001, 0.1593);
    float v16 = powf((float)((float)(v17 * 18.852) + 0.83594) / (float)((float)(v17 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v15 = powf(v26 * -0.0001, 0.1593);
    float v16 = 0.0000014619 - powf((float)((float)(v15 * 18.852) + 0.83594) / (float)((float)(v15 * 18.688) + 1.0), 78.844);
  }
  if (v27 >= 0.0)
  {
    float v20 = powf(v27 * 0.0001, 0.1593);
    float v19 = powf((float)((float)(v20 * 18.852) + 0.83594) / (float)((float)(v20 * 18.688) + 1.0), 78.844);
    if (!a5) {
      return;
    }
  }
  else
  {
    float v18 = powf(v27 * -0.0001, 0.1593);
    float v19 = 0.0000014619 - powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
    if (!a5) {
      return;
    }
  }
  if (a6)
  {
    uint64_t v21 = 0;
    double v22 = (float *)&(*a5)[2];
    do
    {
      float v23 = (float)(*(v22 - 1) * v16) + (float)(*(v22 - 2) * v13);
      float v24 = *v22;
      v22 += 3;
      a6[v21++] = v23 + (float)(v24 * v19);
    }
    while (v21 != 3);
  }
}

float deriveTmidPq(double a1, float a2, double a3, double a4, float a5)
{
  float v5 = a5;
  float v6 = *(float *)&a4;
  float v7 = *(float *)&a3;
  float v8 = a2;
  float v9 = *(float *)&a1;
  float v10 = *(float *)&a4 + 0.1;
  float v11 = (float)(a5 - *(float *)&a4) + (float)(a5 - *(float *)&a4);
  if (a2 > *(float *)&a4) {
    a2 = *(float *)&a4;
  }
  if (*(float *)&a3 >= a5) {
    a5 = *(float *)&a3;
  }
  if ((float)(*(float *)&a4 + 0.02) > v10) {
    *(float *)&a3 = *(float *)&a4 + 0.1;
  }
  else {
    *(float *)&a3 = *(float *)&a4 + 0.02;
  }
  if ((float)(v5 + -0.1) < v10) {
    float v12 = *(float *)&a4 + 0.1;
  }
  else {
    float v12 = v5 + -0.1;
  }
  float v13 = (float)(v10 - *(float *)&a3) / (float)(v10 - a2);
  float v14 = fminf(v13 * 3.0, 1.0);
  float v15 = fminf((float)((float)(v12 - v10) / (float)(a5 - v10)) * 3.0, 1.0);
  if (v11 > v14) {
    float v11 = v14;
  }
  if (v11 > v15) {
    float v11 = v15;
  }
  if (v10 >= v9)
  {
    float v16 = v13 * v13;
    if (v16 > v14) {
      *(float *)&a4 = v14;
    }
    else {
      *(float *)&a4 = v16;
    }
    *(float *)&a1 = v9;
    a5 = v10;
  }
  else
  {
    *(float *)&a1 = v9;
    a2 = *(float *)&a4 + 0.1;
    *(float *)&a3 = *(float *)&a4 + 0.1;
    *(float *)&a4 = v11;
  }
  cubicSplineInterp(a1, a2, a3, a4, a5);
  if ((float)(v5 - v17) <= (float)(v7 - v9)) {
    float v18 = v17;
  }
  else {
    float v18 = v5 - (float)(v7 - v9);
  }
  if ((float)(v17 - v6) > (float)(v9 - v8)) {
    float v17 = (float)(v9 - v8) + v6;
  }
  if (v18 >= v9) {
    float v18 = v9;
  }
  if (v17 <= v9) {
    float v17 = v9;
  }
  return (float)(v18 + v17) - v9;
}

double SlopeOffsetL2ToL8(_WORD *a1, double *a2, double *a3, double a4)
{
  LOWORD(a4) = a1[2];
  unint64_t v6 = 0x3F30000000000000;
  *(double *)&unint64_t v7 = (double)*(unint64_t *)&a4 * 0.000244140625;
  double v8 = *(double *)&v7 + 0.5;
  LOWORD(v7) = a1[3];
  *(double *)&unint64_t v9 = (double)v7 * 0.000244140625;
  double v10 = *(double *)&v9 + -0.5;
  LOWORD(v9) = a1[4];
  LOWORD(v6) = a1[1];
  long double v11 = (double)v6 / 4095.0 + -61.0;
  long double v12 = 1.0 / pow(v11, 1.0 / ((double)v9 * 0.000244140625 + 0.5));
  double v13 = v11 * (v8 * v12);
  *a2 = v13;
  double result = v13 * 61.0 / v11 + v10 * v12;
  *a3 = result;
  return result;
}

uint64_t commonRBSP::setRBSP(commonRBSP *this, unsigned __int8 *a2, uint64_t a3)
{
  *((void *)this + 5) = &a2[a3];
  *((void *)this + 6) = a2;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 5) = a3;
  *((_DWORD *)this + 6) = 0;
  uint64_t v7 = 0;
  *((void *)this + 1) = (*(uint64_t (**)(commonRBSP *))(*(void *)this + 8))(this) << 32;
  float v5 = &a2[HIDWORD(v7)];
  uint64_t result = (*(uint64_t (**)(commonRBSP *, unsigned __int8 *, char *, uint64_t *))(*(void *)this + 8))(this, v5, (char *)&v7 + 4, &v7);
  *((void *)this + 1) |= result;
  *((void *)this + 4) = &v5[HIDWORD(v7)];
  *((_DWORD *)this + 4) = 8 * v7;
  return result;
}

void commonRBSP::freeRBSP(commonRBSP *this)
{
  float v2 = (void *)((char *)this + 64);
  float v1 = (void *)*((void *)this + 8);
  if (v1)
  {
    free(v1);
    *float v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
}

uint64_t commonRBSP::get_next_uint32(commonRBSP *this, unsigned __int8 *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4 = *((void *)this + 5) - (void)a2;
  if (v4 <= 0)
  {
    *a4 = 0;
    *a3 = 0;
    *((_WORD *)this + 28) = -1;
    return 0xFFFFFFFFLL;
  }
  if (v4 == 1)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 255;
    int v8 = 255;
    int v9 = 255;
LABEL_9:
    int v11 = 255;
LABEL_10:
    int v12 = 255;
    goto LABEL_11;
  }
  int v9 = a2[1];
  if ((unint64_t)v4 < 3)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 255;
    int v8 = 255;
    goto LABEL_9;
  }
  int v8 = a2[2];
  if (v4 == 3)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 255;
    goto LABEL_9;
  }
  int v11 = a2[3];
  if ((unint64_t)v4 < 5)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 255;
    goto LABEL_10;
  }
  int v7 = a2[4];
  if (v4 == 5)
  {
    int v5 = 0;
    int v12 = 255;
  }
  else
  {
    int v12 = a2[5];
    int v5 = 1;
  }
  int v6 = 1;
LABEL_11:
  int v13 = *a2;
  if (!*((_WORD *)this + 28) && v13 == 3 && !v8 && !v11 && v7 == 3)
  {
    int v7 = 0;
    goto LABEL_38;
  }
  if (*((unsigned __int8 *)this + 57) | v13) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v9 == 3;
  }
  int v15 = v14;
  if (v15 == 1 && v8 == 0 && v11 == 0 && v7 == 3)
  {
    int v7 = 0;
  }
  else
  {
    if (*((unsigned char *)this + 56))
    {
      if (v15)
      {
        int v13 = 0;
LABEL_80:
        unsigned int v27 = v4 - 1;
        if (v6) {
          unsigned int v27 = 4;
        }
        *a4 = v27;
        *a3 = v27 + 1;
        switch(v4)
        {
          case 1:
            unsigned __int8 v20 = -1;
            *((unsigned char *)this + 56) = -1;
            break;
          case 2:
            *((unsigned char *)this + 56) = *a2;
            unsigned __int8 v20 = a2[1];
            break;
          case 3:
            *((unsigned char *)this + 56) = a2[1];
            unsigned __int8 v20 = a2[2];
            break;
          case 4:
            *((unsigned char *)this + 56) = a2[2];
            unsigned __int8 v20 = a2[3];
            break;
          default:
            *((unsigned char *)this + 56) = a2[3];
            unsigned __int8 v20 = a2[4];
            break;
        }
        int v12 = v7;
        goto LABEL_90;
      }
      goto LABEL_66;
    }
    if (*((unsigned char *)this + 57)) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v13 == 3;
    }
    int v22 = v21;
    if (v22 != 1 || v9 != 0 || v8 != 0 || v11 != 3)
    {
      if (v22) {
        int v26 = v9;
      }
      else {
        int v26 = 0;
      }
      if ((v22 | v15))
      {
        int v13 = v26;
        goto LABEL_80;
      }
LABEL_66:
      if (*a2 || v9 || v8 != 3)
      {
        if (v9 || v8 || v11 != 3)
        {
          int v31 = 4;
          if (v4 < 4) {
            int v31 = *((_DWORD *)this + 10) - a2;
          }
          *a4 = v31;
          *a3 = v31;
          switch(v4)
          {
            case 3:
              *((unsigned char *)this + 56) = a2[1];
              unsigned __int8 v20 = a2[2];
              break;
            case 2:
              *((unsigned char *)this + 56) = *a2;
              unsigned __int8 v20 = a2[1];
              break;
            case 1:
              *((unsigned char *)this + 56) = -1;
              unsigned __int8 v20 = *a2;
              break;
            default:
              *((unsigned char *)this + 56) = a2[2];
              unsigned __int8 v20 = a2[3];
              break;
          }
          int v12 = v11;
          int v11 = v8;
          int v8 = v9;
          goto LABEL_90;
        }
        int v8 = 0;
        int v11 = 0;
      }
      else
      {
        int v13 = 0;
        int v8 = 0;
      }
      goto LABEL_80;
    }
  }
  int v9 = 0;
LABEL_38:
  unsigned int v19 = v4 - 2;
  if (v5) {
    unsigned int v19 = 4;
  }
  *a4 = v19;
  *a3 = v19 + 2;
  if ((unint64_t)(v4 - 1) >= 3)
  {
    if (v4 == 4)
    {
      int v8 = 0;
      *((unsigned char *)this + 56) = a2[2];
      unsigned __int8 v20 = a2[3];
    }
    else
    {
      int v8 = 0;
      if (v4 == 5)
      {
        *((unsigned char *)this + 56) = a2[3];
        unsigned __int8 v20 = a2[4];
      }
      else
      {
        *((unsigned char *)this + 56) = a2[4];
        unsigned __int8 v20 = a2[5];
      }
    }
  }
  else
  {
    int v8 = 0;
    unsigned __int8 v20 = -1;
    *((unsigned char *)this + 56) = -1;
  }
  int v11 = v7;
  int v13 = v9;
LABEL_90:
  *((unsigned char *)this + 57) = v20;
  uint64_t v10 = v12 | (((v8 << 8) | (v13 << 16) | v11) << 8);
  if (*((void *)this + 8))
  {
    uint64_t v28 = (unsigned char *)*((void *)this + 9);
    unint64_t v29 = *((void *)this + 10);
    if ((unint64_t)v28 < v29)
    {
      *((void *)this + 9) = v28 + 1;
      *uint64_t v28 = v13;
      uint64_t v28 = (unsigned char *)*((void *)this + 9);
      unint64_t v29 = *((void *)this + 10);
    }
    if ((unint64_t)v28 < v29)
    {
      *((void *)this + 9) = v28 + 1;
      *uint64_t v28 = v8;
      uint64_t v28 = (unsigned char *)*((void *)this + 9);
      unint64_t v29 = *((void *)this + 10);
    }
    if ((unint64_t)v28 < v29)
    {
      *((void *)this + 9) = v28 + 1;
      *uint64_t v28 = v11;
      uint64_t v28 = (unsigned char *)*((void *)this + 9);
      unint64_t v29 = *((void *)this + 10);
    }
    if ((unint64_t)v28 < v29)
    {
      *((void *)this + 9) = v28 + 1;
      *uint64_t v28 = v12;
    }
  }
  return v10;
}

uint64_t *commonRBSP::flush_bits(uint64_t *this, int a2)
{
  uint64_t v2 = (uint64_t)this;
  *((_DWORD *)this + 6) += a2;
  int v3 = *((_DWORD *)this + 4);
  int v4 = a2 - v3;
  if (a2 <= v3)
  {
    this[1] <<= a2;
  }
  else
  {
    uint64_t v6 = *this;
    unint64_t v5 = this[1];
    unint64_t v7 = v5 >> -(char)v3;
    uint64_t v8 = v5 << v3;
    if (v3 >= 0) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = v7;
    }
    uint64_t v10 = 0;
    this = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t *))(v6 + 8))(this, this[4], (char *)&v10 + 4, &v10);
    *(void *)(v2 + 32) += HIDWORD(v10);
    int v3 = 8 * v10;
    *(void *)(v2 + 8) = (v9 | this) << v4;
    a2 = v4;
  }
  *(_DWORD *)(v2 + 16) = v3 - a2;
  return this;
}

uint64_t commonRBSP::u_v(commonRBSP *this, int a2)
{
  uint64_t v2 = (*((_DWORD *)this + 3) >> -(char)a2);
  commonRBSP::flush_bits((uint64_t *)this, a2);
  return v2;
}

uint64_t commonRBSP::ue_v(commonRBSP *this)
{
  unint64_t v2 = *((void *)this + 1);
  if ((v2 & 0x8000000000000000) != 0)
  {
    commonRBSP::flush_bits((uint64_t *)this, 1);
    return 0;
  }
  else
  {
    unint64_t v3 = HIDWORD(v2);
    int v4 = -32;
    do
    {
      LODWORD(v3) = 2 * v3;
      int v5 = v4 + 1;
      if ((v3 & 0x80000000) != 0) {
        break;
      }
      unsigned int v6 = v4 + 32;
      ++v4;
    }
    while (v6 < 0x1E);
    commonRBSP::flush_bits((uint64_t *)this, v5 + 33);
    int v7 = *((_DWORD *)this + 3) >> -(char)v5;
    commonRBSP::flush_bits((uint64_t *)this, v5 + 32);
    return (v7 + ~(-2 << (v5 + 31)));
  }
}

uint64_t commonRBSP::se_v(commonRBSP *this)
{
  int v1 = commonRBSP::ue_v(this);
  return (-((v1 & 1) == 0) ^ ((v1 + 1) >> 1)) + ((v1 & 1) == 0);
}

uint64_t commonRBSP::i_v(commonRBSP *this, int a2)
{
  char v2 = a2;
  int v3 = *((_DWORD *)this + 3);
  commonRBSP::flush_bits((uint64_t *)this, a2);
  return (((-1 << -v2) & v3) >> -v2);
}

uint64_t *commonRBSP::byte_align(commonRBSP *this)
{
  return commonRBSP::flush_bits((uint64_t *)this, *((_DWORD *)this + 4) & 7);
}

uint64_t *commonRBSP::byte_alignment(commonRBSP *this)
{
  commonRBSP::flush_bits((uint64_t *)this, 1);
  int v2 = *((_DWORD *)this + 4) & 7;
  return commonRBSP::flush_bits((uint64_t *)this, v2);
}

uint64_t *commonRBSP::rbsp_trailing_bits(commonRBSP *this)
{
  commonRBSP::flush_bits((uint64_t *)this, 1);
  int v2 = *((_DWORD *)this + 4) & 7;
  return commonRBSP::flush_bits((uint64_t *)this, v2);
}

uint64_t getFourCCforType(uint64_t a1)
{
  if (getFourCCforType_onceToken != -1) {
    dispatch_once(&getFourCCforType_onceToken, &__block_literal_global_1);
  }
  if ((int)a1 <= 645428787)
  {
    if ((int)a1 > 645149298)
    {
      if ((int)a1 > 645280823)
      {
        if ((int)a1 <= 645424687)
        {
          if ((int)a1 > 645346400)
          {
            switch(a1)
            {
              case 0x26773461:
                return 1999908961;
              case 0x26783273:
                return 2016567667;
              case 0x26783473:
                unsigned __int16 v2 = 24947;
                return v2 | 0x78340000u;
            }
            return a1;
          }
          if (a1 != 645280824)
          {
            if (a1 == 645346162) {
              return 1999843442;
            }
            return a1;
          }
          int v10 = 1983013176;
          return (v10 + 0x20000);
        }
        if ((int)a1 > 645424691)
        {
          if (a1 != 645424692)
          {
            if (a1 != 645428784)
            {
              int v7 = 645428786;
              goto LABEL_100;
            }
            return 1882468912;
          }
          goto LABEL_130;
        }
        if (a1 != 645424688)
        {
          int v4 = 645424690;
LABEL_118:
          if (a1 != v4) {
            return a1;
          }
          return 1885745714;
        }
        return 1885745712;
      }
      if ((int)a1 > 645162547)
      {
        if ((int)a1 <= 645166641)
        {
          if (a1 == 645162548) {
            return 1886676532;
          }
          if (a1 == 645166640) {
            return 1886680624;
          }
          return a1;
        }
        if (a1 != 645166642)
        {
          if (a1 == 645166644) {
            return 1886680628;
          }
          if (a1 == 645280312) {
            return 1983013176;
          }
          return a1;
        }
        unsigned __int16 v14 = 30258;
        return v14 | 0x70740000u;
      }
      if ((int)a1 <= 645162543)
      {
        if (a1 == 645149299) {
          return 1949458803;
        }
        if (a1 != 645149811) {
          return a1;
        }
        int v10 = 1949458803;
        return (v10 + 0x20000);
      }
      if (a1 == 645162544)
      {
        unsigned __int16 v14 = 26160;
        return v14 | 0x70740000u;
      }
      if (a1 != 645162546) {
        return a1;
      }
      int v5 = 1886676528;
      return v5 | 2u;
    }
    if ((int)a1 <= 644624753)
    {
      if ((int)a1 > 641234481)
      {
        if ((int)a1 > 641877824)
        {
          switch(a1)
          {
            case 0x26424741:
              return 1111970369;
            case 0x26526841:
              return 1380411457;
            case 0x26623338:
              return 1647534392;
          }
          return a1;
        }
        if (a1 != 641234482)
        {
          if (a1 != 641234484) {
            return a1;
          }
LABEL_97:
          int v11 = 875836518;
          return v11 | 0x10u;
        }
        return 875704950;
      }
      if ((int)a1 <= 641230387)
      {
        if (a1 != 641230384)
        {
          int v9 = 641230386;
          goto LABEL_114;
        }
        return 875704422;
      }
      if (a1 != 641230388)
      {
        if (a1 != 641234480) {
          return a1;
        }
        goto LABEL_125;
      }
      return 875836518;
    }
    if ((int)a1 <= 645097009)
    {
      if ((int)a1 <= 645084274)
      {
        if (a1 == 644624754) {
          return 1815162994;
        }
        if (a1 == 645083763) {
          return 1932681587;
        }
        return a1;
      }
      if (a1 != 645084275)
      {
        if (a1 == 645097008) {
          return 1936077360;
        }
        return a1;
      }
      int v10 = 1932681587;
      return (v10 + 0x20000);
    }
    if ((int)a1 > 645101103)
    {
      if (a1 != 645101104)
      {
        if (a1 == 645101106) {
          return 1937125938;
        }
        if (a1 != 645101108) {
          return a1;
        }
        int v6 = 1937125938;
        return (v6 + 514);
      }
      int v15 = 1936077360;
      return v15 | 0x100000u;
    }
    if (a1 == 645097010)
    {
      int v5 = 1936077360;
      return v5 | 2u;
    }
    if (a1 != 645097012) {
      return a1;
    }
    int v12 = 1936077360;
    return (v12 + 516);
  }
  if ((int)a1 <= 1530426931)
  {
    if ((int)a1 > 796419635)
    {
      if ((int)a1 > 1530422831)
      {
        if ((int)a1 <= 1530422835)
        {
          if (a1 != 1530422832)
          {
            int v9 = 1530422834;
LABEL_114:
            if (a1 == v9) {
              return 875704934;
            }
            return a1;
          }
          return 875704422;
        }
        if (a1 != 1530422836)
        {
          if (a1 != 1530426928)
          {
            if (a1 != 1530426930) {
              return a1;
            }
            return 875704950;
          }
LABEL_125:
          int v11 = 875704422;
          return v11 | 0x10u;
        }
        return 875836518;
      }
      if ((int)a1 > 796423729)
      {
        if (a1 != 796423730)
        {
          int v8 = 796423732;
LABEL_144:
          if (a1 != v8) {
            return a1;
          }
          goto LABEL_145;
        }
LABEL_147:
        int v5 = 1882468912;
        return v5 | 2u;
      }
      if (a1 != 796419636)
      {
        if (a1 != 796423728) {
          return a1;
        }
        return 1882468912;
      }
LABEL_130:
      int v6 = 1885745714;
      return (v6 + 514);
    }
    if ((int)a1 > 762869295)
    {
      if ((int)a1 <= 762869299)
      {
        if (a1 != 762869296)
        {
          int v7 = 762869298;
LABEL_100:
          if (a1 != v7) {
            return a1;
          }
          goto LABEL_147;
        }
        return 1882468912;
      }
      if (a1 != 762869300)
      {
        if (a1 != 796419632)
        {
          int v4 = 796419634;
          goto LABEL_118;
        }
        return 1885745712;
      }
      goto LABEL_145;
    }
    if ((int)a1 <= 762865201)
    {
      if (a1 != 645428788)
      {
        int v3 = 762865200;
        goto LABEL_70;
      }
LABEL_145:
      int v12 = 1882468912;
      return (v12 + 516);
    }
    if (a1 != 762865202)
    {
      int v13 = 762865204;
LABEL_129:
      if (a1 != v13) {
        return a1;
      }
      goto LABEL_130;
    }
    return 1885745714;
  }
  if ((int)a1 <= 1534617139)
  {
    if ((int)a1 > 1534359087)
    {
      if ((int)a1 > 1534359091)
      {
        if (a1 == 1534359092)
        {
          int v6 = 1953903154;
          return (v6 + 514);
        }
        if (a1 == 1534617136) {
          return 2019963440;
        }
        if (a1 != 1534617138) {
          return a1;
        }
        int v5 = 2019963440;
        return v5 | 2u;
      }
      if (a1 != 1534359088)
      {
        if (a1 == 1534359090) {
          return 1953903154;
        }
        return a1;
      }
      int v15 = 1952854576;
      return v15 | 0x100000u;
    }
    if ((int)a1 <= 1534354993)
    {
      if (a1 != 1530426932)
      {
        if (a1 == 1534354992) {
          return 1952854576;
        }
        return a1;
      }
      goto LABEL_97;
    }
    if (a1 == 1534354994)
    {
      int v5 = 1952854576;
      return v5 | 2u;
    }
    if (a1 != 1534354996) {
      return a1;
    }
    int v12 = 1952854576;
    return (v12 + 516);
  }
  if ((int)a1 > 2088265265)
  {
    if ((int)a1 > 2088269359)
    {
      if (a1 == 2088269360) {
        return 1882468912;
      }
      if (a1 != 2088269362)
      {
        int v8 = 2088269364;
        goto LABEL_144;
      }
      goto LABEL_147;
    }
    if (a1 != 2088265266)
    {
      int v13 = 2088265268;
      goto LABEL_129;
    }
    return 1885745714;
  }
  if ((int)a1 > 1534621233)
  {
    if (a1 == 1534621234)
    {
      int v5 = 2016686640;
      return v5 | 2u;
    }
    if (a1 == 1534621236)
    {
      int v12 = 2016686640;
      return (v12 + 516);
    }
    int v3 = 2088265264;
LABEL_70:
    if (a1 != v3) {
      return a1;
    }
    return 1885745712;
  }
  if (a1 == 1534617140)
  {
    int v12 = 2019963440;
    return (v12 + 516);
  }
  if (a1 == 1534621232)
  {
    unsigned __int16 v2 = 12848;
    return v2 | 0x78340000u;
  }
  return a1;
}

uint64_t isFormatYUV(int a1)
{
  uint64_t result = 0;
  if (a1 > 1815162993)
  {
    if (a1 > 1999843441)
    {
      if (a1 == 1999843442) {
        return result;
      }
      int v3 = 1999908961;
    }
    else
    {
      if (a1 == 1815162994) {
        return result;
      }
      int v3 = 1919365992;
    }
  }
  else if (a1 > 1380411456)
  {
    if (a1 == 1380411457) {
      return result;
    }
    int v3 = 1647534392;
  }
  else
  {
    if (a1 == 1111970369) {
      return result;
    }
    int v3 = 1378955371;
  }
  if (a1 != v3) {
    return 1;
  }
  return result;
}

BOOL isFormatFixedPoint(int a1)
{
  return a1 != 1919365992 && a1 != 1380411457;
}

uint64_t isSupportedMSRColorConversion(int a1, int a2)
{
  if (a1 <= 1936077361)
  {
    if (a1 > 1882469427)
    {
      if (a1 > 1919365991)
      {
        if (a1 <= 1932681586)
        {
          if (a1 == 1919365992) {
            goto LABEL_68;
          }
          int v3 = 1932550515;
        }
        else
        {
          if (a1 == 1932681587 || a1 == 1932812659) {
            goto LABEL_68;
          }
          int v3 = 1936077360;
        }
      }
      else
      {
        if (a1 <= 1885746227)
        {
          if (a1 == 1882469428 || a1 == 1885745712) {
            goto LABEL_68;
          }
          unsigned __int16 v4 = 12850;
        }
        else
        {
          if ((a1 - 1886680624) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0) {
            goto LABEL_68;
          }
          unsigned __int16 v4 = 13364;
        }
        int v3 = v4 | 0x70660000;
      }
    }
    else if (a1 > 1378955370)
    {
      if (a1 > 1815162993)
      {
        if (a1 == 1815162994 || a1 == 1882468912) {
          goto LABEL_68;
        }
        int v3 = 1882468914;
      }
      else
      {
        if (a1 == 1378955371 || a1 == 1380411457) {
          goto LABEL_68;
        }
        int v3 = 1647534392;
      }
    }
    else if (a1 > 875704949)
    {
      if (a1 == 875704950 || a1 == 875836518) {
        goto LABEL_68;
      }
      int v3 = 875836534;
    }
    else
    {
      if (a1 == 875704422 || a1 == 875704438) {
        goto LABEL_68;
      }
      int v3 = 875704934;
    }
  }
  else if (a1 <= 1983013175)
  {
    if (a1 > 1949458802)
    {
      if (a1 > 1953903153)
      {
        if (a1 == 1953903154 || a1 == 1953903668) {
          goto LABEL_68;
        }
        int v3 = 1982882104;
      }
      else
      {
        if (a1 == 1949458803 || a1 == 1949589875) {
          goto LABEL_68;
        }
        int v3 = 1953903152;
      }
    }
    else if (a1 > 1937125937)
    {
      if (a1 == 1937125938 || a1 == 1937126452) {
        goto LABEL_68;
      }
      int v3 = 1949327731;
    }
    else
    {
      if (a1 == 1936077362 || a1 == 1936077876) {
        goto LABEL_68;
      }
      int v3 = 1937125936;
    }
  }
  else if (a1 <= 2016686639)
  {
    if (a1 > 1999908960)
    {
      if (a1 == 1999908961 || a1 == 2016436595) {
        goto LABEL_68;
      }
      int v3 = 2016567667;
    }
    else
    {
      if (a1 == 1983013176 || a1 == 1983144248) {
        goto LABEL_68;
      }
      int v3 = 1999843442;
    }
  }
  else if (a1 <= 2016698738)
  {
    if (a1 == 2016686640 || a1 == 2016686642) {
      goto LABEL_68;
    }
    int v3 = 2016687156;
  }
  else
  {
    if (a1 > 2019963441)
    {
      if (a1 == 2019963956) {
        goto LABEL_68;
      }
      unsigned __int16 v2 = 12850;
    }
    else
    {
      if (a1 == 2016698739) {
        goto LABEL_68;
      }
      unsigned __int16 v2 = 12848;
    }
    int v3 = v2 | 0x78660000;
  }
  if (a1 != v3) {
    return 0;
  }
LABEL_68:
  uint64_t result = 1;
  if (a2 <= 1937125935)
  {
    if (a2 <= 1886680623)
    {
      if (a2 > 1647534391)
      {
        if (a2 > 1882468911)
        {
          if (a2 == 1882468912) {
            return result;
          }
          int v6 = 1885745712;
        }
        else
        {
          if (a2 == 1647534392) {
            return result;
          }
          int v6 = 1815162994;
        }
      }
      else if (a2 > 1378955370)
      {
        if (a2 == 1378955371) {
          return result;
        }
        int v6 = 1380411457;
      }
      else
      {
        if (a2 == 875704422) {
          return result;
        }
        int v6 = 875704438;
      }
    }
    else if (a2 > 1932681586)
    {
      if (a2 <= 1936077359)
      {
        if (a2 == 1932681587) {
          return result;
        }
        int v6 = 1932812659;
      }
      else
      {
        if (a2 == 1936077360 || a2 == 1936077362) {
          return result;
        }
        int v6 = 1936077876;
      }
    }
    else
    {
      if ((a2 - 1886680624) <= 4 && ((1 << (a2 - 48)) & 0x15) != 0 || a2 == 1919365992) {
        return result;
      }
      int v6 = 1932550515;
    }
LABEL_118:
    if (a2 == v6) {
      return result;
    }
    return 0;
  }
  if (a2 <= 1982882103)
  {
    if (a2 <= 1949458802)
    {
      if (a2 > 1937126451)
      {
        if (a2 == 1937126452) {
          return result;
        }
        int v6 = 1949327731;
      }
      else
      {
        if (a2 == 1937125936) {
          return result;
        }
        int v6 = 1937125938;
      }
    }
    else if (a2 <= 1953903151)
    {
      if (a2 == 1949458803) {
        return result;
      }
      int v6 = 1949589875;
    }
    else
    {
      if (a2 == 1953903152 || a2 == 1953903154) {
        return result;
      }
      int v6 = 1953903668;
    }
    goto LABEL_118;
  }
  if (a2 > 2016436594)
  {
    if (a2 <= 2016686639)
    {
      if (a2 == 2016436595) {
        return result;
      }
      int v6 = 2016567667;
    }
    else
    {
      if (a2 == 2016686640 || a2 == 2016698739) {
        return result;
      }
      int v6 = 2019963440;
    }
    goto LABEL_118;
  }
  if (a2 <= 1983144247)
  {
    if (a2 == 1982882104) {
      return result;
    }
    int v6 = 1983013176;
    goto LABEL_118;
  }
  if (a2 != 1983144248 && a2 != 1999843442)
  {
    int v6 = 1999908961;
    goto LABEL_118;
  }
  return result;
}

uint64_t isSupportedMSRInputFormat(unsigned int a1, int8x16_t a2)
{
  *(int32x2_t *)a2.i8 = vdup_n_s32(a1);
  int8x8_t v2 = vand_s8(*(int8x8_t *)a2.i8, (int8x8_t)0xFFFFFFEFF7FFFFFFLL);
  *(int8x8_t *)a2.i8 = vand_s8(*(int8x8_t *)a2.i8, (int8x8_t)0xFFFDFFFFFFFFFFFDLL);
  v3.i64[0] = v2.u32[0];
  v3.i64[1] = v2.u32[1];
  int32x4_t v4 = v3;
  v4.i32[3] = a1;
  int32x4_t v5 = vdupq_laneq_s32(v4, 3);
  int32x4_t v6 = (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL);
  v4.i32[1] = v2.i32[0];
  int32x4_t v7 = (int32x4_t)vextq_s8((int8x16_t)v5, a2, 4uLL);
  int32x4_t v8 = vzip1q_s32(v5, (int32x4_t)a2);
  int16x8_t v9 = (int16x8_t)vceqq_s32(v5, (int32x4_t)xmmword_2222D2010);
  int16x8_t v10 = (int16x8_t)vceqq_s32(v5, (int32x4_t)xmmword_2222D2020);
  int16x8_t v11 = (int16x8_t)vceqq_s32(v5, (int32x4_t)xmmword_2222D2040);
  v5.i32[3] = v2.i32[1];
  int8x16_t v12 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v7, (int32x4_t)xmmword_2222D1FE0), (int16x8_t)vceqq_s32(v8, (int32x4_t)xmmword_2222D1FD0));
  int32x4_t v13 = vdupq_lane_s32((int32x2_t)__PAIR64__(a2.u32[1], a1), 0);
  v13.i32[1] = a2.i32[1];
  uint8x16_t v14 = (uint8x16_t)vorrq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v4, (int32x4_t)xmmword_2222D2030), v11), (int8x16_t)vuzp1q_s16(v10, v9)), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v6, (int32x4_t)xmmword_2222D2000), (int16x8_t)vceqq_s32(v5, (int32x4_t)xmmword_2222D1FF0)), v12));
  v14.i8[0] = vmaxvq_u8(v14);
  uint8x8_t v15 = (uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32((int32x4_t)vdupq_lane_s64(__SPAIR64__(a2.u32[1], a1), 0), (int32x4_t)xmmword_2222D2050), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_2222D2060)));
  v15.i8[0] = vmaxv_u8(v15);
  return (v14.i32[0] | v15.i32[0]) & 1;
}

uint64_t isSupportedMSROutputFormat(unsigned int a1)
{
  int32x4_t v1 = vdupq_n_s32(a1);
  *(int32x2_t *)v2.i8 = vdup_n_s32(a1 & 0xFFFFFFFD);
  v3.i32[0] = a1 & 0xFFFFFFFD;
  v3.i32[1] = a1;
  int8x8_t v4 = vand_s8(*(int8x8_t *)v1.i8, (int8x8_t)0xFFFDFFFFFFFFFDEFLL);
  v3.i64[1] = __PAIR64__(a1, a1 & 0xFFFFFFFD);
  v5.i32[0] = a1 & 0xFFFFFFFD;
  v5.i32[1] = a1;
  v5.u64[1] = (unint64_t)v4;
  int32x4_t v6 = (int32x4_t)vextq_s8(v5, (int8x16_t)vuzp2q_s32((int32x4_t)v5, (int32x4_t)v5), 0xCuLL);
  v2.i64[1] = v1.i64[0];
  v5.i32[0] = a1;
  v5.i32[3] = a1;
  int8x16_t v7 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v3, (int32x4_t)xmmword_2222D2080), (int16x8_t)vceqq_s32(v6, (int32x4_t)xmmword_2222D2070));
  int8x16_t v8 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v1, (int32x4_t)xmmword_2222D20A0), (int16x8_t)vceqq_s32((int32x4_t)v5, (int32x4_t)xmmword_2222D2090));
  int8x16_t v9 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v1, (int32x4_t)xmmword_2222D1240), (int16x8_t)vceqq_s32(v1, (int32x4_t)xmmword_2222D20B0));
  __int32 v10 = v4.i32[1];
  int8x16_t v11 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v2, (int32x4_t)xmmword_2222D20C0), (int16x8_t)vceqq_s32(v3, (int32x4_t)xmmword_2222D20D0));
  BOOL v12 = v10 == 1949327731;
  BOOL v14 = a1 == 1949589875 || v10 == 1932550515;
  uint8x16_t v15 = (uint8x16_t)vorrq_s8(vuzp1q_s8(v11, v9), vuzp1q_s8(v8, v7));
  v15.i8[0] = vmaxvq_u8(v15);
  __int32 v16 = v15.i32[0] | v12;
  BOOL v18 = a1 == 1932812659 || a1 == 875836518;
  return (v16 | (v14 || v18)) & 1;
}

uint64_t isSupportedGPUInputFormat(int a1, char a2)
{
  uint64_t result = 1;
  if (a1 <= 1952854577)
  {
    if (a1 > 1936077359)
    {
      if (a1 <= 1937125935)
      {
        if (a1 == 1936077360 || a1 == 1936077362)
        {
LABEL_35:
          if (a2) {
            return result;
          }
          return 0;
        }
        int v4 = 1936077876;
      }
      else if (a1 > 1937126451)
      {
        if (a1 == 1937126452) {
          goto LABEL_35;
        }
        int v4 = 1952854576;
      }
      else
      {
        if (a1 == 1937125936) {
          goto LABEL_35;
        }
        int v4 = 1937125938;
      }
      goto LABEL_34;
    }
    if (a1 <= 1380411456)
    {
      if (a1 == 846624121 || a1 == 875704422) {
        return result;
      }
      int v5 = 875704438;
      goto LABEL_39;
    }
    if (a1 == 1380411457 || a1 == 1815162994) {
      return result;
    }
    int v4 = 1882468912;
LABEL_34:
    if (a1 == v4) {
      goto LABEL_35;
    }
    return 0;
  }
  if (a1 > 2016686639)
  {
    if (a1 <= 2019963439)
    {
      if (a1 == 2016686640 || a1 == 2016686642) {
        return result;
      }
      int v5 = 2016687156;
    }
    else if (a1 > 2019963955)
    {
      if (a1 == 2019963956) {
        return result;
      }
      int v5 = 2033463606;
    }
    else
    {
      if (a1 == 2019963440) {
        return result;
      }
      int v5 = 2019963442;
    }
    goto LABEL_39;
  }
  if (a1 <= 1953903153)
  {
    if (a1 == 1952854578 || a1 == 1952855092) {
      return result;
    }
    int v4 = 1953903152;
    goto LABEL_34;
  }
  if (a1 == 1953903154 || a1 == 1953903668) {
    return result;
  }
  int v5 = 1983000886;
LABEL_39:
  if (a1 != v5) {
    return 0;
  }
  return result;
}

uint64_t isSupportedGPUOutputFormat(int a1, char a2)
{
  uint64_t result = 1;
  if (a1 != 1380411457 && a1 != 1815162994 && (a1 != 1919365992 || (a2 & 1) == 0)) {
    return 0;
  }
  return result;
}

uint64_t getBitDepthFromSurfaceFormat(int a1)
{
  uint64_t v1 = 8;
  if (a1 <= 1936077361)
  {
    if (a1 > 1815162993)
    {
      if (a1 > 1885745713)
      {
        if (a1 <= 1932681586)
        {
          if (a1 != 1885745714 && a1 != 1885746228)
          {
            int v2 = 1932550515;
            goto LABEL_58;
          }
          return 10;
        }
        if (a1 == 1932681587 || a1 == 1932812659) {
          return 16;
        }
        unsigned __int16 v6 = 12848;
        goto LABEL_51;
      }
      if (a1 <= 1882468913)
      {
        if (a1 == 1815162994) {
          return 10;
        }
        int v5 = 1882468912;
      }
      else
      {
        if (a1 == 1882468914 || a1 == 1882469428) {
          return 10;
        }
        int v5 = 1885745712;
      }
LABEL_64:
      if (a1 != v5) {
        return 12;
      }
      return 10;
    }
    if (a1 <= 875836533)
    {
      if (a1 <= 875704933)
      {
        if (a1 == 875704422) {
          return v1;
        }
        int v4 = 875704438;
      }
      else
      {
        if (a1 == 875704934 || a1 == 875704950) {
          return v1;
        }
        int v4 = 875836518;
      }
      goto LABEL_54;
    }
    if (a1 <= 1378955370)
    {
      if (a1 == 875836534) {
        return v1;
      }
      int v4 = 1111970369;
LABEL_54:
      if (a1 != v4) {
        return 12;
      }
      return v1;
    }
    if (a1 == 1378955371) {
      return 10;
    }
    if (a1 != 1380411457)
    {
      int v5 = 1647534392;
      goto LABEL_64;
    }
    return 16;
  }
  if (a1 > 1999908960)
  {
    if (a1 <= 2016687155)
    {
      if (a1 <= 2016567666)
      {
        if (a1 == 1999908961) {
          return 10;
        }
        int v5 = 2016436595;
      }
      else
      {
        if (a1 == 2016567667 || a1 == 2016686640) {
          return 10;
        }
        int v5 = 2016686642;
      }
      goto LABEL_64;
    }
    if (a1 > 2019963441)
    {
      if (a1 == 2019963442) {
        return 10;
      }
      if (a1 == 2033463606) {
        return 16;
      }
      unsigned __int16 v3 = 13364;
    }
    else
    {
      if (a1 == 2016687156 || a1 == 2016698739) {
        return 10;
      }
      unsigned __int16 v3 = 12848;
    }
    int v5 = v3 | 0x78660000;
    goto LABEL_64;
  }
  if (a1 <= 1982882103)
  {
    if (a1 <= 1937125935)
    {
      if (a1 != 1936077362)
      {
        unsigned __int16 v6 = 13364;
LABEL_51:
        int v2 = v6 | 0x73660000;
        goto LABEL_58;
      }
      return 16;
    }
    if (a1 == 1937125936 || a1 == 1937125938) {
      return 16;
    }
    int v2 = 1937126452;
LABEL_58:
    if (a1 == v2) {
      return 16;
    }
    return 12;
  }
  if (a1 <= 1983013175)
  {
    if (a1 == 1982882104) {
      return v1;
    }
    int v2 = 1983000886;
    goto LABEL_58;
  }
  if (a1 != 1983013176 && a1 != 1983144248)
  {
    int v5 = 1999843442;
    goto LABEL_64;
  }
  return v1;
}

uint64_t getChromaFormatFromSurfaceFormat(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1937125937)
  {
    if (a1 > 1882469427)
    {
      if (a1 > 1919365991)
      {
        if (a1 > 1932812658)
        {
          if (a1 == 1932812659) {
            return 2;
          }
          if (a1 != 1936077362)
          {
            int v4 = 1936077876;
            goto LABEL_55;
          }
          return 1;
        }
        if (a1 == 1919365992) {
          return 2;
        }
        int v3 = 1932681587;
      }
      else
      {
        if (a1 > 1885746227)
        {
          if (a1 == 1885746228) {
            return 2;
          }
          if (a1 != 1886680626)
          {
            int v4 = 1886680628;
            goto LABEL_55;
          }
          return 1;
        }
        if (a1 == 1882469428) {
          return 2;
        }
        int v3 = 1885745714;
      }
    }
    else if (a1 > 1378955370)
    {
      if (a1 <= 1647534391)
      {
        if (a1 == 1378955371) {
          return 2;
        }
        int v4 = 1380411457;
        goto LABEL_55;
      }
      if (a1 == 1647534392 || a1 == 1815162994) {
        return 2;
      }
      int v3 = 1882468914;
    }
    else
    {
      if (a1 > 875836517)
      {
        if (a1 == 875836518 || a1 == 875836534) {
          return 2;
        }
        int v4 = 1111970369;
        goto LABEL_55;
      }
      if (a1 == 875704934) {
        return 1;
      }
      int v3 = 875704950;
    }
    goto LABEL_59;
  }
  if (a1 <= 1983144247)
  {
    if (a1 > 1953903667)
    {
      if (a1 <= 1983000879)
      {
        if (a1 == 1953903668) {
          return 2;
        }
        int v4 = 1953969204;
        goto LABEL_55;
      }
      if (a1 == 1983000880 || a1 == 1983000886) {
        return 1;
      }
      int v3 = 1983013176;
    }
    else
    {
      if (a1 <= 1949458802)
      {
        if (a1 != 1937125938)
        {
          int v4 = 1937126452;
          goto LABEL_55;
        }
        return 1;
      }
      if (a1 == 1949458803) {
        return 1;
      }
      if (a1 == 1949589875) {
        return 2;
      }
      int v3 = 1953903154;
    }
LABEL_59:
    if (a1 != v3) {
      return result;
    }
    return 1;
  }
  if (a1 > 2016687155)
  {
    if (a1 <= 2019963955)
    {
      if (a1 != 2016687156 && a1 != 2016698739)
      {
        int v3 = 2019963442;
        goto LABEL_59;
      }
      return 2;
    }
    if (a1 == 2019963956 || a1 == 2021078128) {
      return 2;
    }
    int v4 = 2033463606;
LABEL_55:
    if (a1 != v4) {
      return result;
    }
    return 2;
  }
  if (a1 <= 1999908960)
  {
    if (a1 == 1983144248) {
      return 2;
    }
    int v4 = 1999843442;
    goto LABEL_55;
  }
  if (a1 == 1999908961) {
    return 2;
  }
  if (a1 != 2016567667)
  {
    int v3 = 2016686642;
    goto LABEL_59;
  }
  return 1;
}

uint64_t isFullRangeFromSurfaceFormat(int a1)
{
  if (!isFormatYUV(a1)) {
    return 1;
  }
  uint64_t result = 0;
  if (a1 <= 1936077361)
  {
    if (a1 <= 1885745711)
    {
      if (a1 != 875704422 && a1 != 875704934)
      {
        int v4 = 875836518;
        goto LABEL_25;
      }
    }
    else if (a1 > 1885746227)
    {
      if (a1 != 1885746228)
      {
        unsigned __int16 v3 = 12848;
        goto LABEL_21;
      }
    }
    else if (a1 != 1885745712)
    {
      int v4 = 1885745714;
      goto LABEL_25;
    }
  }
  else
  {
    if (a1 > 1952855091)
    {
      if (a1 > 2019963441)
      {
        if (a1 == 2019963956) {
          return 1;
        }
        unsigned __int16 v5 = 12850;
      }
      else
      {
        if (a1 == 1952855092) {
          return 1;
        }
        unsigned __int16 v5 = 12848;
      }
      int v4 = v5 | 0x78660000;
LABEL_25:
      if (a1 != v4) {
        return result;
      }
      return 1;
    }
    if (a1 > 1952854575)
    {
      if (a1 != 1952854576)
      {
        int v4 = 1952854578;
        goto LABEL_25;
      }
    }
    else if (a1 != 1936077362)
    {
      unsigned __int16 v3 = 13364;
LABEL_21:
      int v4 = v3 | 0x73660000;
      goto LABEL_25;
    }
  }
  return 1;
}

__n128 MrCacheUpdateSrc(uint64_t a1, int a2, int a3, int a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  *(unsigned char *)(a5 + 1100) = 0;
  float v9 = a6;
  *(float *)(a5 + 1072) = v9;
  float v10 = a7;
  *(float *)(a5 + 1076) = v10;
  float v11 = a8;
  *(float *)(a5 + 1080) = v11;
  float v12 = a9;
  *(float *)(a5 + 1084) = v12;
  *(_DWORD *)(a5 + 1088) = a2;
  *(_DWORD *)(a5 + 1092) = a3;
  *(_DWORD *)(a5 + 1096) = a4;
  long long v13 = *(_OWORD *)(a1 + 16);
  long long v14 = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 48);
  *(_OWORD *)a5 = v13;
  *(_OWORD *)(a5 + 16) = v14;
  uint64_t v15 = *(void *)(a1 + 52);
  *(_DWORD *)(a5 + 44) = *(_DWORD *)(a1 + 60);
  *(void *)(a5 + 36) = v15;
  long long v16 = *(_OWORD *)(a1 + 64);
  long long v17 = *(_OWORD *)(a1 + 80);
  *(_DWORD *)(a5 + 80) = *(_DWORD *)(a1 + 96);
  *(_OWORD *)(a5 + 48) = v16;
  *(_OWORD *)(a5 + 64) = v17;
  *(void *)&long long v16 = *(void *)(a1 + 132);
  *((void *)&v16 + 1) = *(void *)(a1 + 144);
  *(_OWORD *)(a5 + 84) = v16;
  *(_DWORD *)(a5 + 100) = *(_DWORD *)(a1 + 152);
  *(void *)(a5 + 104) = *(void *)(a1 + 156);
  long long v18 = *(_OWORD *)(a1 + 164);
  long long v19 = *(_OWORD *)(a1 + 180);
  long long v20 = *(_OWORD *)(a1 + 212);
  *(_OWORD *)(a5 + 144) = *(_OWORD *)(a1 + 196);
  *(_OWORD *)(a5 + 160) = v20;
  *(_OWORD *)(a5 + 112) = v18;
  *(_OWORD *)(a5 + 128) = v19;
  long long v21 = *(_OWORD *)(a1 + 228);
  long long v22 = *(_OWORD *)(a1 + 244);
  long long v23 = *(_OWORD *)(a1 + 276);
  *(_OWORD *)(a5 + 208) = *(_OWORD *)(a1 + 260);
  *(_OWORD *)(a5 + 224) = v23;
  *(_OWORD *)(a5 + 176) = v21;
  *(_OWORD *)(a5 + 192) = v22;
  *(void *)(a5 + 240) = *(void *)(a1 + 292);
  LODWORD(v15) = *(_DWORD *)(a1 + 300);
  *(_WORD *)(a5 + 252) = *(_WORD *)(a1 + 304);
  *(_DWORD *)(a5 + 248) = v15;
  long long v24 = *(_OWORD *)(a1 + 422);
  long long v26 = *(_OWORD *)(a1 + 374);
  long long v25 = *(_OWORD *)(a1 + 390);
  *(_OWORD *)(a5 + 334) = *(_OWORD *)(a1 + 406);
  *(_OWORD *)(a5 + 350) = v24;
  *(_OWORD *)(a5 + 302) = v26;
  *(_OWORD *)(a5 + 318) = v25;
  long long v28 = *(_OWORD *)(a1 + 454);
  long long v27 = *(_OWORD *)(a1 + 470);
  long long v29 = *(_OWORD *)(a1 + 438);
  *(_OWORD *)(a5 + 408) = *(_OWORD *)(a1 + 480);
  *(_OWORD *)(a5 + 382) = v28;
  *(_OWORD *)(a5 + 398) = v27;
  *(_OWORD *)(a5 + 366) = v29;
  long long v30 = *(_OWORD *)(a1 + 326);
  long long v31 = *(_OWORD *)(a1 + 358);
  *(_OWORD *)(a5 + 270) = *(_OWORD *)(a1 + 342);
  *(_OWORD *)(a5 + 286) = v31;
  *(_OWORD *)(a5 + 254) = v30;
  long long v32 = *(_OWORD *)(a1 + 518);
  long long v33 = *(_OWORD *)(a1 + 550);
  *(_OWORD *)(a5 + 440) = *(_OWORD *)(a1 + 534);
  *(_OWORD *)(a5 + 456) = v33;
  *(_OWORD *)(a5 + 424) = v32;
  __n128 result = *(__n128 *)(a1 + 566);
  long long v35 = *(_OWORD *)(a1 + 582);
  long long v36 = *(_OWORD *)(a1 + 614);
  *(_OWORD *)(a5 + 504) = *(_OWORD *)(a1 + 598);
  *(_OWORD *)(a5 + 520) = v36;
  *(__n128 *)(a5 + 472) = result;
  *(_OWORD *)(a5 + 488) = v35;
  return result;
}

__n128 MrCacheUpdateTgt(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 568) = *(_DWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 536) = v2;
  *(_OWORD *)(a2 + 552) = v3;
  uint64_t v4 = *(void *)(a1 + 52);
  *(_DWORD *)(a2 + 580) = *(_DWORD *)(a1 + 60);
  *(void *)(a2 + 572) = v4;
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 80);
  *(_DWORD *)(a2 + 616) = *(_DWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 584) = v5;
  *(_OWORD *)(a2 + 600) = v6;
  *(void *)&long long v5 = *(void *)(a1 + 132);
  *((void *)&v5 + 1) = *(void *)(a1 + 144);
  *(_OWORD *)(a2 + 620) = v5;
  *(_DWORD *)(a2 + 636) = *(_DWORD *)(a1 + 152);
  *(void *)(a2 + 640) = *(void *)(a1 + 156);
  long long v7 = *(_OWORD *)(a1 + 164);
  long long v8 = *(_OWORD *)(a1 + 180);
  long long v9 = *(_OWORD *)(a1 + 212);
  *(_OWORD *)(a2 + 680) = *(_OWORD *)(a1 + 196);
  *(_OWORD *)(a2 + 696) = v9;
  *(_OWORD *)(a2 + 648) = v7;
  *(_OWORD *)(a2 + 664) = v8;
  long long v10 = *(_OWORD *)(a1 + 228);
  long long v11 = *(_OWORD *)(a1 + 244);
  long long v12 = *(_OWORD *)(a1 + 276);
  *(_OWORD *)(a2 + 744) = *(_OWORD *)(a1 + 260);
  *(_OWORD *)(a2 + 760) = v12;
  *(_OWORD *)(a2 + 712) = v10;
  *(_OWORD *)(a2 + 728) = v11;
  *(void *)(a2 + 776) = *(void *)(a1 + 292);
  int v13 = *(_DWORD *)(a1 + 300);
  *(_WORD *)(a2 + 788) = *(_WORD *)(a1 + 304);
  *(_DWORD *)(a2 + 784) = v13;
  long long v14 = *(_OWORD *)(a1 + 422);
  long long v16 = *(_OWORD *)(a1 + 374);
  long long v15 = *(_OWORD *)(a1 + 390);
  *(_OWORD *)(a2 + 870) = *(_OWORD *)(a1 + 406);
  *(_OWORD *)(a2 + 886) = v14;
  *(_OWORD *)(a2 + 838) = v16;
  *(_OWORD *)(a2 + 854) = v15;
  long long v18 = *(_OWORD *)(a1 + 454);
  long long v17 = *(_OWORD *)(a1 + 470);
  long long v19 = *(_OWORD *)(a1 + 438);
  *(_OWORD *)(a2 + 944) = *(_OWORD *)(a1 + 480);
  *(_OWORD *)(a2 + 918) = v18;
  *(_OWORD *)(a2 + 934) = v17;
  *(_OWORD *)(a2 + 902) = v19;
  long long v20 = *(_OWORD *)(a1 + 326);
  long long v21 = *(_OWORD *)(a1 + 358);
  *(_OWORD *)(a2 + 806) = *(_OWORD *)(a1 + 342);
  *(_OWORD *)(a2 + 822) = v21;
  *(_OWORD *)(a2 + 790) = v20;
  long long v22 = *(_OWORD *)(a1 + 518);
  long long v23 = *(_OWORD *)(a1 + 550);
  *(_OWORD *)(a2 + 976) = *(_OWORD *)(a1 + 534);
  *(_OWORD *)(a2 + 992) = v23;
  *(_OWORD *)(a2 + 960) = v22;
  __n128 result = *(__n128 *)(a1 + 566);
  long long v25 = *(_OWORD *)(a1 + 582);
  long long v26 = *(_OWORD *)(a1 + 598);
  *(_OWORD *)(a2 + 1056) = *(_OWORD *)(a1 + 614);
  *(_OWORD *)(a2 + 1040) = v26;
  *(__n128 *)(a2 + 1008) = result;
  *(_OWORD *)(a2 + 1024) = v25;
  *(unsigned char *)(a2 + 1100) = 1;
  return result;
}

__n128 MrCacheReadTgt(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 536);
  long long v3 = *(_OWORD *)(a2 + 552);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 572);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 580);
  *(void *)(a1 + 52) = v4;
  long long v5 = *(_OWORD *)(a2 + 584);
  long long v6 = *(_OWORD *)(a2 + 600);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 132) = *(void *)(a2 + 620);
  *(void *)(a1 + 144) = *(void *)(a2 + 628);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 636);
  *(void *)(a1 + 156) = *(void *)(a2 + 640);
  long long v7 = *(_OWORD *)(a2 + 648);
  long long v8 = *(_OWORD *)(a2 + 664);
  long long v9 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 196) = v9;
  *(_OWORD *)(a1 + 180) = v8;
  *(_OWORD *)(a1 + 164) = v7;
  long long v10 = *(_OWORD *)(a2 + 712);
  long long v11 = *(_OWORD *)(a2 + 728);
  long long v12 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 260) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 276) = v12;
  *(_OWORD *)(a1 + 244) = v11;
  *(_OWORD *)(a1 + 228) = v10;
  *(void *)(a1 + 292) = *(void *)(a2 + 776);
  int v13 = *(_DWORD *)(a2 + 784);
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 788);
  *(_DWORD *)(a1 + 300) = v13;
  long long v14 = *(_OWORD *)(a2 + 886);
  long long v16 = *(_OWORD *)(a2 + 838);
  long long v15 = *(_OWORD *)(a2 + 854);
  *(_OWORD *)(a1 + 406) = *(_OWORD *)(a2 + 870);
  *(_OWORD *)(a1 + 422) = v14;
  *(_OWORD *)(a1 + 374) = v16;
  *(_OWORD *)(a1 + 390) = v15;
  long long v18 = *(_OWORD *)(a2 + 918);
  long long v17 = *(_OWORD *)(a2 + 934);
  long long v19 = *(_OWORD *)(a2 + 902);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 454) = v18;
  *(_OWORD *)(a1 + 470) = v17;
  *(_OWORD *)(a1 + 438) = v19;
  long long v20 = *(_OWORD *)(a2 + 790);
  long long v21 = *(_OWORD *)(a2 + 822);
  *(_OWORD *)(a1 + 342) = *(_OWORD *)(a2 + 806);
  *(_OWORD *)(a1 + 358) = v21;
  *(_OWORD *)(a1 + 326) = v20;
  long long v22 = *(_OWORD *)(a2 + 960);
  long long v23 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 534) = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 550) = v23;
  *(_OWORD *)(a1 + 518) = v22;
  __n128 result = *(__n128 *)(a2 + 1008);
  long long v25 = *(_OWORD *)(a2 + 1024);
  long long v26 = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 598) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 614) = v26;
  *(__n128 *)(a1 + 566) = result;
  *(_OWORD *)(a1 + 582) = v25;
  return result;
}

uint64_t MrCacheIsHit(uint64_t a1, int a2, int a3, int a4, char *__s1, unsigned char *a6, double a7, double a8, double a9, double a10)
{
  *a6 = 0;
  if (!__s1[1100]
    || *((float *)__s1 + 268) != a7
    || *((float *)__s1 + 269) != a8
    || *((float *)__s1 + 270) != a9
    || *((float *)__s1 + 271) != a10
    || *((_DWORD *)__s1 + 272) != a2
    || *((_DWORD *)__s1 + 273) != a3
    || *((_DWORD *)__s1 + 274) != a4
    || *((_DWORD *)__s1 + 21) != *(_DWORD *)(a1 + 132)
    || *((_DWORD *)__s1 + 22) != *(_DWORD *)(a1 + 136)
    || *((_DWORD *)__s1 + 23) != *(_DWORD *)(a1 + 144)
    || *((_DWORD *)__s1 + 24) != *(_DWORD *)(a1 + 148)
    || *((_DWORD *)__s1 + 25) != *(_DWORD *)(a1 + 152)
    || memcmp(__s1, (const void *)(a1 + 16), 0x24uLL))
  {
    return 0;
  }
  BOOL v10 = *(void *)(__s1 + 36) == *(void *)(a1 + 52)
     && *((_DWORD *)__s1 + 11) == (unint64_t)*(unsigned int *)(a1 + 60);
  if (!v10
    || memcmp(__s1 + 48, (const void *)(a1 + 64), 0x24uLL)
    || *((void *)__s1 + 13) != *(void *)(a1 + 156)
    || memcmp(__s1 + 112, (const void *)(a1 + 164), 0x80uLL)
    || *((void *)__s1 + 30) != *(void *)(a1 + 292)
    || memcmp(__s1 + 254, (const void *)(a1 + 326), 0xAAuLL)
    || memcmp(__s1 + 424, (const void *)(a1 + 518), 0x70uLL))
  {
    return 0;
  }
  BOOL v11 = *((_DWORD *)__s1 + 62) == *(_DWORD *)(a1 + 300)
     && *((unsigned __int16 *)__s1 + 126) == *(unsigned __int16 *)(a1 + 304);
  uint64_t result = 1;
  if (!v11)
  {
    *a6 = 1;
    return 0;
  }
  return result;
}

void sub_2222846EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void HDRConfig::HDRConfig(HDRConfig *this)
{
  *((unsigned char *)this + 2) = 0;
  bzero((char *)this + 4, 0x5804uLL);
}

{
  *((unsigned char *)this + 2) = 0;
  bzero((char *)this + 4, 0x5804uLL);
}

uint64_t HDRConfig::initHDRConfig(HDRConfig *this)
{
  *(_WORD *)this = 0;
  return HDRConfig::CreateAllConfigEntries(this);
}

uint64_t HDRConfig::CreateAllConfigEntries(HDRConfig *this)
{
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  *(void *)&long long v533 = @"readDefaultsWriteEnabled";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t Config = GetConfig();
    HDRConfig::UpdateConfigEntry(Config, 0, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v2 = GetConfig();
    HDRConfig::UpdateConfigEntry(v2, 0, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 1;
  if (GetConfig())
  {
    uint64_t v3 = GetConfig();
    HDRConfig::UpdateConfigEntry(v3, 0, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 2;
  *(void *)&long long v533 = @"enableccdump";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v4 = GetConfig();
    HDRConfig::UpdateConfigEntry(v4, 2u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v5 = GetConfig();
    HDRConfig::UpdateConfigEntry(v5, 2u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 1;
  if (GetConfig())
  {
    uint64_t v6 = GetConfig();
    HDRConfig::UpdateConfigEntry(v6, 2u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 3;
  *(void *)&long long v533 = @"enableConfigDump";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v7 = GetConfig();
    HDRConfig::UpdateConfigEntry(v7, 3u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v8 = GetConfig();
    HDRConfig::UpdateConfigEntry(v8, 3u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 1;
  if (GetConfig())
  {
    uint64_t v9 = GetConfig();
    HDRConfig::UpdateConfigEntry(v9, 3u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 1;
  *(void *)&long long v533 = @"logLevel";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v10 = GetConfig();
    HDRConfig::UpdateConfigEntry(v10, 1u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v11 = GetConfig();
    HDRConfig::UpdateConfigEntry(v11, 1u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 1;
  if (GetConfig())
  {
    uint64_t v12 = GetConfig();
    HDRConfig::UpdateConfigEntry(v12, 1u, 0x40u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v532) = 1;
  if (GetConfig())
  {
    uint64_t v13 = GetConfig();
    HDRConfig::UpdateConfigEntry(v13, 1u, 2u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 4;
  if (GetConfig())
  {
    uint64_t v14 = GetConfig();
    HDRConfig::UpdateConfigEntry(v14, 1u, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 4;
  *(void *)&long long v533 = @"forceLLDOVI";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v15 = GetConfig();
    HDRConfig::UpdateConfigEntry(v15, 4u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v16 = GetConfig();
    HDRConfig::UpdateConfigEntry(v16, 4u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 1;
  if (GetConfig())
  {
    uint64_t v17 = GetConfig();
    HDRConfig::UpdateConfigEntry(v17, 4u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 5;
  *(void *)&long long v533 = @"forceReferenceDisplay";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v18 = GetConfig();
    HDRConfig::UpdateConfigEntry(v18, 5u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v19 = GetConfig();
    HDRConfig::UpdateConfigEntry(v19, 5u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 1;
  if (GetConfig())
  {
    uint64_t v20 = GetConfig();
    HDRConfig::UpdateConfigEntry(v20, 5u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 6;
  long long v534 = 0u;
  *(void *)&long long v533 = @"forceSDRTV";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v21 = GetConfig();
    HDRConfig::UpdateConfigEntry(v21, 6u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v22 = GetConfig();
    HDRConfig::UpdateConfigEntry(v22, 6u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 1;
  if (GetConfig())
  {
    uint64_t v23 = GetConfig();
    HDRConfig::UpdateConfigEntry(v23, 6u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 7;
  *(void *)&long long v533 = @"allowDM4";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v24 = GetConfig();
    HDRConfig::UpdateConfigEntry(v24, 7u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v25 = GetConfig();
    HDRConfig::UpdateConfigEntry(v25, 7u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v26 = GetConfig();
    HDRConfig::UpdateConfigEntry(v26, 7u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 8;
  *(void *)&long long v533 = @"debugDM4DisableConf";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v27 = GetConfig();
    HDRConfig::UpdateConfigEntry(v27, 8u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v28 = GetConfig();
    HDRConfig::UpdateConfigEntry(v28, 8u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v29 = GetConfig();
    HDRConfig::UpdateConfigEntry(v29, 8u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 9;
  long long v534 = 0u;
  *(void *)&long long v533 = @"debugDM4DisableTrim";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v30 = GetConfig();
    HDRConfig::UpdateConfigEntry(v30, 9u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v31 = GetConfig();
    HDRConfig::UpdateConfigEntry(v31, 9u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v32 = GetConfig();
    HDRConfig::UpdateConfigEntry(v32, 9u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 10;
  *(void *)&long long v533 = @"debugDMVersion";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v33 = GetConfig();
    HDRConfig::UpdateConfigEntry(v33, 0xAu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v34 = GetConfig();
    HDRConfig::UpdateConfigEntry(v34, 0xAu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 11;
  long long v534 = 0u;
  *(void *)&long long v533 = @"debugHistogramData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v35 = GetConfig();
    HDRConfig::UpdateConfigEntry(v35, 0xBu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v36 = GetConfig();
    HDRConfig::UpdateConfigEntry(v36, 0xBu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v37 = GetConfig();
    HDRConfig::UpdateConfigEntry(v37, 0xBu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 12;
  *(void *)&long long v533 = @"debugMSRStages";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v38 = GetConfig();
    HDRConfig::UpdateConfigEntry(v38, 0xCu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v39 = GetConfig();
    HDRConfig::UpdateConfigEntry(v39, 0xCu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 73;
  *(void *)&long long v533 = @"debugDISPStages";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v40 = GetConfig();
    HDRConfig::UpdateConfigEntry(v40, 0x49u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v41 = GetConfig();
    HDRConfig::UpdateConfigEntry(v41, 0x49u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 13;
  long long v534 = 0u;
  *(void *)&long long v533 = @"disableX86DM40Shader";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v42 = GetConfig();
    HDRConfig::UpdateConfigEntry(v42, 0xDu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v43 = GetConfig();
    HDRConfig::UpdateConfigEntry(v43, 0xDu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v44 = GetConfig();
    HDRConfig::UpdateConfigEntry(v44, 0xDu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 14;
  long long v534 = 0u;
  *(void *)&long long v533 = @"disableX86SDRMix";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v45 = GetConfig();
    HDRConfig::UpdateConfigEntry(v45, 0xEu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v46 = GetConfig();
    HDRConfig::UpdateConfigEntry(v46, 0xEu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v47 = GetConfig();
    HDRConfig::UpdateConfigEntry(v47, 0xEu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 15;
  *(void *)&long long v533 = @"doviTmPresetType";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v48 = GetConfig();
    HDRConfig::UpdateConfigEntry(v48, 0xFu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 2;
  if (GetConfig())
  {
    uint64_t v49 = GetConfig();
    HDRConfig::UpdateConfigEntry(v49, 0xFu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v50 = GetConfig();
    HDRConfig::UpdateConfigEntry(v50, 0xFu, 0x40u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v51 = GetConfig();
    HDRConfig::UpdateConfigEntry(v51, 0xFu, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 9;
  if (GetConfig())
  {
    uint64_t v52 = GetConfig();
    HDRConfig::UpdateConfigEntry(v52, 0xFu, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 16;
  long long v534 = 0u;
  *(void *)&long long v533 = @"dumpDm4Config";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v53 = GetConfig();
    HDRConfig::UpdateConfigEntry(v53, 0x10u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v54 = GetConfig();
    HDRConfig::UpdateConfigEntry(v54, 0x10u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v55 = GetConfig();
    HDRConfig::UpdateConfigEntry(v55, 0x10u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 17;
  long long v534 = 0u;
  *(void *)&long long v533 = @"dumpInputData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v56 = GetConfig();
    HDRConfig::UpdateConfigEntry(v56, 0x11u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v57 = GetConfig();
    HDRConfig::UpdateConfigEntry(v57, 0x11u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v58 = GetConfig();
    HDRConfig::UpdateConfigEntry(v58, 0x11u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 18;
  long long v534 = 0u;
  *(void *)&long long v533 = @"dumpLUTData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v59 = GetConfig();
    HDRConfig::UpdateConfigEntry(v59, 0x12u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v60 = GetConfig();
    HDRConfig::UpdateConfigEntry(v60, 0x12u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v61 = GetConfig();
    HDRConfig::UpdateConfigEntry(v61, 0x12u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 19;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableAdaptiveHeadroom";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v62 = GetConfig();
    HDRConfig::UpdateConfigEntry(v62, 0x13u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v63 = GetConfig();
    HDRConfig::UpdateConfigEntry(v63, 0x13u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v64 = GetConfig();
    HDRConfig::UpdateConfigEntry(v64, 0x13u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 20;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableCCMemoryPool";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v65 = GetConfig();
    HDRConfig::UpdateConfigEntry(v65, 0x14u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v66 = GetConfig();
    HDRConfig::UpdateConfigEntry(v66, 0x14u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v67 = GetConfig();
    HDRConfig::UpdateConfigEntry(v67, 0x14u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 21;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableCCMemoryPoolDump";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v68 = GetConfig();
    HDRConfig::UpdateConfigEntry(v68, 0x15u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v69 = GetConfig();
    HDRConfig::UpdateConfigEntry(v69, 0x15u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v70 = GetConfig();
    HDRConfig::UpdateConfigEntry(v70, 0x15u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 22;
  *(void *)&long long v533 = @"enableDovi50toHDR10TVMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v71 = GetConfig();
    HDRConfig::UpdateConfigEntry(v71, 0x16u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1;
  if (GetConfig())
  {
    uint64_t v72 = GetConfig();
    HDRConfig::UpdateConfigEntry(v72, 0x16u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v73 = GetConfig();
    HDRConfig::UpdateConfigEntry(v73, 0x16u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 25;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableDumpMetadataPacket";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v74 = GetConfig();
    HDRConfig::UpdateConfigEntry(v74, 0x19u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v75 = GetConfig();
    HDRConfig::UpdateConfigEntry(v75, 0x19u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v76 = GetConfig();
    HDRConfig::UpdateConfigEntry(v76, 0x19u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 26;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableDumpMetadataPayload";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v77 = GetConfig();
    HDRConfig::UpdateConfigEntry(v77, 0x1Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v78 = GetConfig();
    HDRConfig::UpdateConfigEntry(v78, 0x1Au, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v79 = GetConfig();
    HDRConfig::UpdateConfigEntry(v79, 0x1Au, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 27;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableDumpMetadataPayloadIPT";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v80 = GetConfig();
    HDRConfig::UpdateConfigEntry(v80, 0x1Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v81 = GetConfig();
    HDRConfig::UpdateConfigEntry(v81, 0x1Bu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v82 = GetConfig();
    HDRConfig::UpdateConfigEntry(v82, 0x1Bu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 28;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableHLGTmWithDM4";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v83 = GetConfig();
    HDRConfig::UpdateConfigEntry(v83, 0x1Cu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v84 = GetConfig();
    HDRConfig::UpdateConfigEntry(v84, 0x1Cu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v85 = GetConfig();
    HDRConfig::UpdateConfigEntry(v85, 0x1Cu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 29;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableHistBasedToneMapping";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v86 = GetConfig();
    HDRConfig::UpdateConfigEntry(v86, 0x1Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v87 = GetConfig();
    HDRConfig::UpdateConfigEntry(v87, 0x1Du, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v88 = GetConfig();
    HDRConfig::UpdateConfigEntry(v88, 0x1Du, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 30;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableHistTMForHLGBrightAdapt";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v89 = GetConfig();
    HDRConfig::UpdateConfigEntry(v89, 0x1Eu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v90 = GetConfig();
    HDRConfig::UpdateConfigEntry(v90, 0x1Eu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v91 = GetConfig();
    HDRConfig::UpdateConfigEntry(v91, 0x1Eu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 31;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableContentAdaptedHeadroom";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v92 = GetConfig();
    HDRConfig::UpdateConfigEntry(v92, 0x1Fu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v93 = GetConfig();
    HDRConfig::UpdateConfigEntry(v93, 0x1Fu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v94 = GetConfig();
    HDRConfig::UpdateConfigEntry(v94, 0x1Fu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 32;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableHistTMforNonDrmDimAdaptedContentOnMac";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v95 = GetConfig();
    HDRConfig::UpdateConfigEntry(v95, 0x20u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v96 = GetConfig();
    HDRConfig::UpdateConfigEntry(v96, 0x20u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v97 = GetConfig();
    HDRConfig::UpdateConfigEntry(v97, 0x20u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 33;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableHistTMforNonDrmDimAdaptedHlgOnIOS";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v98 = GetConfig();
    HDRConfig::UpdateConfigEntry(v98, 0x21u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v99 = GetConfig();
    HDRConfig::UpdateConfigEntry(v99, 0x21u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v100 = GetConfig();
    HDRConfig::UpdateConfigEntry(v100, 0x21u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 34;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableLogInstance";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v101 = GetConfig();
    HDRConfig::UpdateConfigEntry(v101, 0x22u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v102 = GetConfig();
    HDRConfig::UpdateConfigEntry(v102, 0x22u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v103 = GetConfig();
    HDRConfig::UpdateConfigEntry(v103, 0x22u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 35;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enablePtvMode";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v104 = GetConfig();
    HDRConfig::UpdateConfigEntry(v104, 0x23u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v105 = GetConfig();
    HDRConfig::UpdateConfigEntry(v105, 0x23u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v106 = GetConfig();
    HDRConfig::UpdateConfigEntry(v106, 0x23u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 36;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableUnequalSpacingLUT";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v107 = GetConfig();
    HDRConfig::UpdateConfigEntry(v107, 0x24u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v108 = GetConfig();
    HDRConfig::UpdateConfigEntry(v108, 0x24u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v109 = GetConfig();
    HDRConfig::UpdateConfigEntry(v109, 0x24u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 37;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableAdaptiveTM";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v110 = GetConfig();
    HDRConfig::UpdateConfigEntry(v110, 0x25u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v111 = GetConfig();
    HDRConfig::UpdateConfigEntry(v111, 0x25u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v112 = GetConfig();
    HDRConfig::UpdateConfigEntry(v112, 0x25u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 38;
  *(void *)&long long v533 = @"averagePixelThreshold";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v113 = GetConfig();
    HDRConfig::UpdateConfigEntry(v113, 0x26u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v114 = GetConfig();
    HDRConfig::UpdateConfigEntry(v114, 0x26u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v115 = GetConfig();
    HDRConfig::UpdateConfigEntry(v115, 0x26u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x4059000000000000;
  if (GetConfig())
  {
    uint64_t v116 = GetConfig();
    HDRConfig::UpdateConfigEntry(v116, 0x26u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 39;
  *(void *)&long long v533 = @"apceFactor";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v117 = GetConfig();
    HDRConfig::UpdateConfigEntry(v117, 0x27u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v118 = GetConfig();
    HDRConfig::UpdateConfigEntry(v118, 0x27u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v119 = GetConfig();
    HDRConfig::UpdateConfigEntry(v119, 0x27u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x4059000000000000;
  if (GetConfig())
  {
    uint64_t v120 = GetConfig();
    HDRConfig::UpdateConfigEntry(v120, 0x27u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 40;
  *(void *)&long long v533 = @"sustainLuminance";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v121 = GetConfig();
    HDRConfig::UpdateConfigEntry(v121, 0x28u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v122 = GetConfig();
    HDRConfig::UpdateConfigEntry(v122, 0x28u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v123 = GetConfig();
    HDRConfig::UpdateConfigEntry(v123, 0x28u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x3FF0000000000000;
  if (GetConfig())
  {
    uint64_t v124 = GetConfig();
    HDRConfig::UpdateConfigEntry(v124, 0x28u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 41;
  *(void *)&long long v533 = @"atmLogFrequency";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v125 = GetConfig();
    HDRConfig::UpdateConfigEntry(v125, 0x29u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1000;
  if (GetConfig())
  {
    uint64_t v126 = GetConfig();
    HDRConfig::UpdateConfigEntry(v126, 0x29u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v127 = GetConfig();
    HDRConfig::UpdateConfigEntry(v127, 0x29u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 42;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableHwOOTF";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v128 = GetConfig();
    HDRConfig::UpdateConfigEntry(v128, 0x2Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v129 = GetConfig();
    HDRConfig::UpdateConfigEntry(v129, 0x2Au, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v130 = GetConfig();
    HDRConfig::UpdateConfigEntry(v130, 0x2Au, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 43;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableHwOotfForHLG";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v131 = GetConfig();
    HDRConfig::UpdateConfigEntry(v131, 0x2Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v132 = GetConfig();
    HDRConfig::UpdateConfigEntry(v132, 0x2Bu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v133 = GetConfig();
    HDRConfig::UpdateConfigEntry(v133, 0x2Bu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 44;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableHwOotfForDolby84";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v134 = GetConfig();
    HDRConfig::UpdateConfigEntry(v134, 0x2Cu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v135 = GetConfig();
    HDRConfig::UpdateConfigEntry(v135, 0x2Cu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v136 = GetConfig();
    HDRConfig::UpdateConfigEntry(v136, 0x2Cu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 45;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableFp16Regamma";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v137 = GetConfig();
    HDRConfig::UpdateConfigEntry(v137, 0x2Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v138 = GetConfig();
    HDRConfig::UpdateConfigEntry(v138, 0x2Du, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v139 = GetConfig();
    HDRConfig::UpdateConfigEntry(v139, 0x2Du, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 46;
  long long v534 = 0u;
  *(void *)&long long v533 = @"forcePassThrough";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v140 = GetConfig();
    HDRConfig::UpdateConfigEntry(v140, 0x2Eu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v141 = GetConfig();
    HDRConfig::UpdateConfigEntry(v141, 0x2Eu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v142 = GetConfig();
    HDRConfig::UpdateConfigEntry(v142, 0x2Eu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 47;
  long long v534 = 0u;
  *(void *)&long long v533 = @"forceUpdateAllLuts";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v143 = GetConfig();
    HDRConfig::UpdateConfigEntry(v143, 0x2Fu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v144 = GetConfig();
    HDRConfig::UpdateConfigEntry(v144, 0x2Fu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v145 = GetConfig();
    HDRConfig::UpdateConfigEntry(v145, 0x2Fu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 48;
  long long v534 = 0u;
  *(void *)&long long v533 = @"forceX86SminToDefaultDoVi84";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v146 = GetConfig();
    HDRConfig::UpdateConfigEntry(v146, 0x30u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v147 = GetConfig();
    HDRConfig::UpdateConfigEntry(v147, 0x30u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v148 = GetConfig();
    HDRConfig::UpdateConfigEntry(v148, 0x30u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 49;
  long long v534 = 0u;
  *(void *)&long long v533 = @"force_to_create_lut";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v149 = GetConfig();
    HDRConfig::UpdateConfigEntry(v149, 0x31u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v150 = GetConfig();
    HDRConfig::UpdateConfigEntry(v150, 0x31u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v151 = GetConfig();
    HDRConfig::UpdateConfigEntry(v151, 0x31u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 50;
  *(void *)&long long v533 = @"hdr10TmPresetType";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v152 = GetConfig();
    HDRConfig::UpdateConfigEntry(v152, 0x32u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 4;
  if (GetConfig())
  {
    uint64_t v153 = GetConfig();
    HDRConfig::UpdateConfigEntry(v153, 0x32u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v154 = GetConfig();
    HDRConfig::UpdateConfigEntry(v154, 0x32u, 0x40u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v155 = GetConfig();
    HDRConfig::UpdateConfigEntry(v155, 0x32u, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 7;
  if (GetConfig())
  {
    uint64_t v156 = GetConfig();
    HDRConfig::UpdateConfigEntry(v156, 0x32u, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 51;
  long long v534 = 0u;
  *(void *)&long long v533 = @"histMinMaxBinCenter";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v157 = GetConfig();
    HDRConfig::UpdateConfigEntry(v157, 0x33u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v158 = GetConfig();
    HDRConfig::UpdateConfigEntry(v158, 0x33u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v159 = GetConfig();
    HDRConfig::UpdateConfigEntry(v159, 0x33u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 52;
  long long v534 = 0u;
  *(void *)&long long v533 = @"histPrintData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v160 = GetConfig();
    HDRConfig::UpdateConfigEntry(v160, 0x34u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v161 = GetConfig();
    HDRConfig::UpdateConfigEntry(v161, 0x34u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v162 = GetConfig();
    HDRConfig::UpdateConfigEntry(v162, 0x34u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 53;
  *(void *)&long long v533 = @"hlgOOTFMixingMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v163 = GetConfig();
    HDRConfig::UpdateConfigEntry(v163, 0x35u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1;
  if (GetConfig())
  {
    uint64_t v164 = GetConfig();
    HDRConfig::UpdateConfigEntry(v164, 0x35u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v165 = GetConfig();
    HDRConfig::UpdateConfigEntry(v165, 0x35u, 0x40u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v166 = GetConfig();
    HDRConfig::UpdateConfigEntry(v166, 0x35u, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 2;
  if (GetConfig())
  {
    uint64_t v167 = GetConfig();
    HDRConfig::UpdateConfigEntry(v167, 0x35u, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 54;
  *(void *)&long long v533 = @"hlgTmPresetType";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v168 = GetConfig();
    HDRConfig::UpdateConfigEntry(v168, 0x36u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 3;
  if (GetConfig())
  {
    uint64_t v169 = GetConfig();
    HDRConfig::UpdateConfigEntry(v169, 0x36u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v170 = GetConfig();
    HDRConfig::UpdateConfigEntry(v170, 0x36u, 0x40u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v171 = GetConfig();
    HDRConfig::UpdateConfigEntry(v171, 0x36u, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 13;
  if (GetConfig())
  {
    uint64_t v172 = GetConfig();
    HDRConfig::UpdateConfigEntry(v172, 0x36u, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 55;
  long long v534 = 0u;
  *(void *)&long long v533 = @"limitHDR10TmaxTo1000Nits";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v173 = GetConfig();
    HDRConfig::UpdateConfigEntry(v173, 0x37u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v174 = GetConfig();
    HDRConfig::UpdateConfigEntry(v174, 0x37u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v175 = GetConfig();
    HDRConfig::UpdateConfigEntry(v175, 0x37u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 56;
  long long v534 = 0u;
  *(void *)&long long v533 = @"limitHLGTmaxTo1000Nits";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v176 = GetConfig();
    HDRConfig::UpdateConfigEntry(v176, 0x38u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v177 = GetConfig();
    HDRConfig::UpdateConfigEntry(v177, 0x38u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v178 = GetConfig();
    HDRConfig::UpdateConfigEntry(v178, 0x38u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 57;
  long long v534 = 0u;
  *(void *)&long long v533 = @"measureShaderTime";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v179 = GetConfig();
    HDRConfig::UpdateConfigEntry(v179, 0x39u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v180 = GetConfig();
    HDRConfig::UpdateConfigEntry(v180, 0x39u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v181 = GetConfig();
    HDRConfig::UpdateConfigEntry(v181, 0x39u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 58;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mmrEnable";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v182 = GetConfig();
    HDRConfig::UpdateConfigEntry(v182, 0x3Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v183 = GetConfig();
    HDRConfig::UpdateConfigEntry(v183, 0x3Au, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 59;
  *(void *)&long long v533 = @"overrideDoVi81";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v184 = GetConfig();
    HDRConfig::UpdateConfigEntry(v184, 0x3Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v185 = GetConfig();
    HDRConfig::UpdateConfigEntry(v185, 0x3Bu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v186 = GetConfig();
    HDRConfig::UpdateConfigEntry(v186, 0x3Bu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 60;
  *(void *)&long long v533 = @"pqOverrideMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v187 = GetConfig();
    HDRConfig::UpdateConfigEntry(v187, 0x3Cu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v188 = GetConfig();
    HDRConfig::UpdateConfigEntry(v188, 0x3Cu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v189 = GetConfig();
    HDRConfig::UpdateConfigEntry(v189, 0x3Cu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 61;
  long long v534 = 0u;
  *(void *)&long long v533 = @"printDMData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v190 = GetConfig();
    HDRConfig::UpdateConfigEntry(v190, 0x3Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v191 = GetConfig();
    HDRConfig::UpdateConfigEntry(v191, 0x3Du, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v192 = GetConfig();
    HDRConfig::UpdateConfigEntry(v192, 0x3Du, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 62;
  long long v534 = 0u;
  *(void *)&long long v533 = @"printRPUData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v193 = GetConfig();
    HDRConfig::UpdateConfigEntry(v193, 0x3Eu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v194 = GetConfig();
    HDRConfig::UpdateConfigEntry(v194, 0x3Eu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v195 = GetConfig();
    HDRConfig::UpdateConfigEntry(v195, 0x3Eu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 63;
  long long v534 = 0u;
  *(void *)&long long v533 = @"printOutputMetaData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v196 = GetConfig();
    HDRConfig::UpdateConfigEntry(v196, 0x3Fu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v197 = GetConfig();
    HDRConfig::UpdateConfigEntry(v197, 0x3Fu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v198 = GetConfig();
    HDRConfig::UpdateConfigEntry(v198, 0x3Fu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 64;
  long long v534 = 0u;
  *(void *)&long long v533 = @"printHDR10PlusMetaData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v199 = GetConfig();
    HDRConfig::UpdateConfigEntry(v199, 0x40u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v200 = GetConfig();
    HDRConfig::UpdateConfigEntry(v200, 0x40u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v201 = GetConfig();
    HDRConfig::UpdateConfigEntry(v201, 0x40u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 65;
  long long v534 = 0u;
  *(void *)&long long v533 = @"checkHDR10PlusMetaData";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v202 = GetConfig();
    HDRConfig::UpdateConfigEntry(v202, 0x41u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v203 = GetConfig();
    HDRConfig::UpdateConfigEntry(v203, 0x41u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v204 = GetConfig();
    HDRConfig::UpdateConfigEntry(v204, 0x41u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 66;
  long long v534 = 0u;
  *(void *)&long long v533 = @"SDRDisplay100OOTF";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v205 = GetConfig();
    HDRConfig::UpdateConfigEntry(v205, 0x42u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v206 = GetConfig();
    HDRConfig::UpdateConfigEntry(v206, 0x42u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v207 = GetConfig();
    HDRConfig::UpdateConfigEntry(v207, 0x42u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 67;
  long long v534 = 0u;
  *(void *)&long long v533 = @"TMOOTFSeparate";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v208 = GetConfig();
    HDRConfig::UpdateConfigEntry(v208, 0x43u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v209 = GetConfig();
    HDRConfig::UpdateConfigEntry(v209, 0x43u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v210 = GetConfig();
    HDRConfig::UpdateConfigEntry(v210, 0x43u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 68;
  long long v534 = 0u;
  *(void *)&long long v533 = @"treatDolby84AsProf";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v211 = GetConfig();
    HDRConfig::UpdateConfigEntry(v211, 0x44u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v212 = GetConfig();
    HDRConfig::UpdateConfigEntry(v212, 0x44u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v213 = GetConfig();
    HDRConfig::UpdateConfigEntry(v213, 0x44u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 69;
  long long v534 = 0u;
  *(void *)&long long v533 = @"x86LinearScalingTable8_4";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v214 = GetConfig();
    HDRConfig::UpdateConfigEntry(v214, 0x45u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v215 = GetConfig();
    HDRConfig::UpdateConfigEntry(v215, 0x45u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v216 = GetConfig();
    HDRConfig::UpdateConfigEntry(v216, 0x45u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 70;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableMesopicCrushForDM3";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v217 = GetConfig();
    HDRConfig::UpdateConfigEntry(v217, 0x46u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v218 = GetConfig();
    HDRConfig::UpdateConfigEntry(v218, 0x46u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v219 = GetConfig();
    HDRConfig::UpdateConfigEntry(v219, 0x46u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 71;
  long long v534 = 0u;
  *(void *)&long long v533 = @"useDM4TmForDM3DoVi84Bright";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v220 = GetConfig();
    HDRConfig::UpdateConfigEntry(v220, 0x47u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v221 = GetConfig();
    HDRConfig::UpdateConfigEntry(v221, 0x47u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v222 = GetConfig();
    HDRConfig::UpdateConfigEntry(v222, 0x47u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 23;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableGpuTmRefMode";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v223 = GetConfig();
    HDRConfig::UpdateConfigEntry(v223, 0x17u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v224 = GetConfig();
    HDRConfig::UpdateConfigEntry(v224, 0x17u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v225 = GetConfig();
    HDRConfig::UpdateConfigEntry(v225, 0x17u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 24;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableGpuTmMatchMSR";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v226 = GetConfig();
    HDRConfig::UpdateConfigEntry(v226, 0x18u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v227 = GetConfig();
    HDRConfig::UpdateConfigEntry(v227, 0x18u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v228 = GetConfig();
    HDRConfig::UpdateConfigEntry(v228, 0x18u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 72;
  long long v534 = 0u;
  *(void *)&long long v533 = @"allowHLGOOTFOver1000Nits";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v229 = GetConfig();
    HDRConfig::UpdateConfigEntry(v229, 0x48u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v230 = GetConfig();
    HDRConfig::UpdateConfigEntry(v230, 0x48u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v231 = GetConfig();
    HDRConfig::UpdateConfigEntry(v231, 0x48u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 74;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableParametricTM";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v232 = GetConfig();
    HDRConfig::UpdateConfigEntry(v232, 0x4Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v233 = GetConfig();
    HDRConfig::UpdateConfigEntry(v233, 0x4Au, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v234 = GetConfig();
    HDRConfig::UpdateConfigEntry(v234, 0x4Au, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 75;
  long long v534 = 0u;
  *(void *)&long long v533 = @"validateParametric";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v235 = GetConfig();
    HDRConfig::UpdateConfigEntry(v235, 0x4Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v236 = GetConfig();
    HDRConfig::UpdateConfigEntry(v236, 0x4Bu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v237 = GetConfig();
    HDRConfig::UpdateConfigEntry(v237, 0x4Bu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 76;
  long long v534 = 0u;
  *(void *)&long long v533 = @"resetScheduledFrames";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v238 = GetConfig();
    HDRConfig::UpdateConfigEntry(v238, 0x4Cu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v239 = GetConfig();
    HDRConfig::UpdateConfigEntry(v239, 0x4Cu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v240 = GetConfig();
    HDRConfig::UpdateConfigEntry(v240, 0x4Cu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 77;
  long long v534 = 0u;
  *(void *)&long long v533 = @"edrScaleTMLUT";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v241 = GetConfig();
    HDRConfig::UpdateConfigEntry(v241, 0x4Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v242 = GetConfig();
    HDRConfig::UpdateConfigEntry(v242, 0x4Du, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v243 = GetConfig();
    HDRConfig::UpdateConfigEntry(v243, 0x4Du, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 78;
  *(void *)&long long v533 = @"sourceColourPrimaries";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v244 = GetConfig();
    HDRConfig::UpdateConfigEntry(v244, 0x4Eu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v245 = GetConfig();
    HDRConfig::UpdateConfigEntry(v245, 0x4Eu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v246 = GetConfig();
    HDRConfig::UpdateConfigEntry(v246, 0x4Eu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 79;
  *(void *)&long long v533 = @"targetColourPrimaries";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v247 = GetConfig();
    HDRConfig::UpdateConfigEntry(v247, 0x4Fu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v248 = GetConfig();
    HDRConfig::UpdateConfigEntry(v248, 0x4Fu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v249 = GetConfig();
    HDRConfig::UpdateConfigEntry(v249, 0x4Fu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 80;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableB0403OutClip";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v250 = GetConfig();
    HDRConfig::UpdateConfigEntry(v250, 0x50u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v251 = GetConfig();
    HDRConfig::UpdateConfigEntry(v251, 0x50u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v252 = GetConfig();
    HDRConfig::UpdateConfigEntry(v252, 0x50u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 81;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81Force";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v253 = GetConfig();
    HDRConfig::UpdateConfigEntry(v253, 0x51u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v254 = GetConfig();
    HDRConfig::UpdateConfigEntry(v254, 0x51u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v255 = GetConfig();
    HDRConfig::UpdateConfigEntry(v255, 0x51u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 82;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81EnableCache";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v256 = GetConfig();
    HDRConfig::UpdateConfigEntry(v256, 0x52u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v257 = GetConfig();
    HDRConfig::UpdateConfigEntry(v257, 0x52u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v258 = GetConfig();
    HDRConfig::UpdateConfigEntry(v258, 0x52u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 83;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81FallBackToHDR10";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v259 = GetConfig();
    HDRConfig::UpdateConfigEntry(v259, 0x53u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v260 = GetConfig();
    HDRConfig::UpdateConfigEntry(v260, 0x53u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v261 = GetConfig();
    HDRConfig::UpdateConfigEntry(v261, 0x53u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 84;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81UseTVTmax";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v262 = GetConfig();
    HDRConfig::UpdateConfigEntry(v262, 0x54u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v263 = GetConfig();
    HDRConfig::UpdateConfigEntry(v263, 0x54u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v264 = GetConfig();
    HDRConfig::UpdateConfigEntry(v264, 0x54u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 85;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81EnableL4";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v265 = GetConfig();
    HDRConfig::UpdateConfigEntry(v265, 0x55u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v266 = GetConfig();
    HDRConfig::UpdateConfigEntry(v266, 0x55u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v267 = GetConfig();
    HDRConfig::UpdateConfigEntry(v267, 0x55u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 86;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81EnableFastL4";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v268 = GetConfig();
    HDRConfig::UpdateConfigEntry(v268, 0x56u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v269 = GetConfig();
    HDRConfig::UpdateConfigEntry(v269, 0x56u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v270 = GetConfig();
    HDRConfig::UpdateConfigEntry(v270, 0x56u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 87;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81UseFixedTargets";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v271 = GetConfig();
    HDRConfig::UpdateConfigEntry(v271, 0x57u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v272 = GetConfig();
    HDRConfig::UpdateConfigEntry(v272, 0x57u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v273 = GetConfig();
    HDRConfig::UpdateConfigEntry(v273, 0x57u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 88;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81UseFixedTmin";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v274 = GetConfig();
    HDRConfig::UpdateConfigEntry(v274, 0x58u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v275 = GetConfig();
    HDRConfig::UpdateConfigEntry(v275, 0x58u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v276 = GetConfig();
    HDRConfig::UpdateConfigEntry(v276, 0x58u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 89;
  long long v534 = 0u;
  *(void *)&long long v533 = @"mr81UseFixedTPrimaries";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v277 = GetConfig();
    HDRConfig::UpdateConfigEntry(v277, 0x59u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v278 = GetConfig();
    HDRConfig::UpdateConfigEntry(v278, 0x59u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v279 = GetConfig();
    HDRConfig::UpdateConfigEntry(v279, 0x59u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 90;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableDoVi20Conformance";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v280 = GetConfig();
    HDRConfig::UpdateConfigEntry(v280, 0x5Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v281 = GetConfig();
    HDRConfig::UpdateConfigEntry(v281, 0x5Au, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v282 = GetConfig();
    HDRConfig::UpdateConfigEntry(v282, 0x5Au, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 91;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableAmbientAdaptation";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v283 = GetConfig();
    HDRConfig::UpdateConfigEntry(v283, 0x5Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v284 = GetConfig();
    HDRConfig::UpdateConfigEntry(v284, 0x5Bu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v285 = GetConfig();
    HDRConfig::UpdateConfigEntry(v285, 0x5Bu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 92;
  *(void *)&long long v533 = @"htmCmaxNitsScaler";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v286 = GetConfig();
    HDRConfig::UpdateConfigEntry(v286, 0x5Cu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1070616229;
  if (GetConfig())
  {
    uint64_t v287 = GetConfig();
    HDRConfig::UpdateConfigEntry(v287, 0x5Cu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v288 = GetConfig();
    HDRConfig::UpdateConfigEntry(v288, 0x5Cu, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v289 = GetConfig();
    HDRConfig::UpdateConfigEntry(v289, 0x5Cu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 94;
  long long v534 = 0u;
  *(void *)&long long v533 = @"hdr10PlusEnable";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v290 = GetConfig();
    HDRConfig::UpdateConfigEntry(v290, 0x5Eu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v291 = GetConfig();
    HDRConfig::UpdateConfigEntry(v291, 0x5Eu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v292 = GetConfig();
    HDRConfig::UpdateConfigEntry(v292, 0x5Eu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 95;
  long long v534 = 0u;
  *(void *)&long long v533 = @"hdr10PlusUseBezierCurve";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v293 = GetConfig();
    HDRConfig::UpdateConfigEntry(v293, 0x5Fu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v294 = GetConfig();
    HDRConfig::UpdateConfigEntry(v294, 0x5Fu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v295 = GetConfig();
    HDRConfig::UpdateConfigEntry(v295, 0x5Fu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 96;
  long long v534 = 0u;
  *(void *)&long long v533 = @"hdr10PlusAdjustB1";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v296 = GetConfig();
    HDRConfig::UpdateConfigEntry(v296, 0x60u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v297 = GetConfig();
    HDRConfig::UpdateConfigEntry(v297, 0x60u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v298 = GetConfig();
    HDRConfig::UpdateConfigEntry(v298, 0x60u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 97;
  *(void *)&long long v533 = @"adjustL2TrimGain";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v299 = GetConfig();
    HDRConfig::UpdateConfigEntry(v299, 0x61u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1055286886;
  if (GetConfig())
  {
    uint64_t v300 = GetConfig();
    HDRConfig::UpdateConfigEntry(v300, 0x61u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v301 = GetConfig();
    HDRConfig::UpdateConfigEntry(v301, 0x61u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 98;
  *(void *)&long long v533 = @"adjustUiScaleFactor";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v302 = GetConfig();
    HDRConfig::UpdateConfigEntry(v302, 0x62u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = -1;
  if (GetConfig())
  {
    uint64_t v303 = GetConfig();
    HDRConfig::UpdateConfigEntry(v303, 0x62u, 0x200u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 99;
  *(void *)&long long v533 = @"ambAdaptationRatio";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v304 = GetConfig();
    HDRConfig::UpdateConfigEntry(v304, 0x63u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1028442804;
  if (GetConfig())
  {
    uint64_t v305 = GetConfig();
    HDRConfig::UpdateConfigEntry(v305, 0x63u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x4197D78400000000;
  if (GetConfig())
  {
    uint64_t v306 = GetConfig();
    HDRConfig::UpdateConfigEntry(v306, 0x63u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 100;
  *(void *)&long long v533 = @"AmbientLightInNits";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v307 = GetConfig();
    HDRConfig::UpdateConfigEntry(v307, 0x64u, 0x7Fu, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 101;
  *(void *)&long long v533 = @"ambientViewingEnvironmentType";
  *((void *)&v533 + 1) = 1;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v308 = GetConfig();
    HDRConfig::UpdateConfigEntry(v308, 0x65u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = -1;
  if (GetConfig())
  {
    uint64_t v309 = GetConfig();
    HDRConfig::UpdateConfigEntry(v309, 0x65u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v310 = GetConfig();
    HDRConfig::UpdateConfigEntry(v310, 0x65u, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 1;
  if (GetConfig())
  {
    uint64_t v311 = GetConfig();
    HDRConfig::UpdateConfigEntry(v311, 0x65u, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 102;
  *(void *)&long long v533 = @"displayType";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v312 = GetConfig();
    HDRConfig::UpdateConfigEntry(v312, 0x66u, 0x7Fu, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 103;
  long long v534 = 0u;
  *(void *)&long long v533 = @"doviExtraPTTrimPower";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v313 = GetConfig();
    HDRConfig::UpdateConfigEntry(v313, 0x67u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1061158912;
  if (GetConfig())
  {
    uint64_t v314 = GetConfig();
    HDRConfig::UpdateConfigEntry(v314, 0x67u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v315 = GetConfig();
    HDRConfig::UpdateConfigEntry(v315, 0x67u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 104;
  *(void *)&long long v533 = @"DPCGain";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v316 = GetConfig();
    HDRConfig::UpdateConfigEntry(v316, 0x68u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1065353216;
  if (GetConfig())
  {
    uint64_t v317 = GetConfig();
    HDRConfig::UpdateConfigEntry(v317, 0x68u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v318 = GetConfig();
    HDRConfig::UpdateConfigEntry(v318, 0x68u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 105;
  *(void *)&long long v533 = @"DPCMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v319 = GetConfig();
    HDRConfig::UpdateConfigEntry(v319, 0x69u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v320 = GetConfig();
    HDRConfig::UpdateConfigEntry(v320, 0x69u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v321 = GetConfig();
    HDRConfig::UpdateConfigEntry(v321, 0x69u, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 2;
  if (GetConfig())
  {
    uint64_t v322 = GetConfig();
    HDRConfig::UpdateConfigEntry(v322, 0x69u, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 106;
  *(void *)&long long v533 = @"edrRangeType";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v323 = GetConfig();
    HDRConfig::UpdateConfigEntry(v323, 0x6Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v324 = GetConfig();
    HDRConfig::UpdateConfigEntry(v324, 0x6Au, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v325 = GetConfig();
    HDRConfig::UpdateConfigEntry(v325, 0x6Au, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 2;
  if (GetConfig())
  {
    uint64_t v326 = GetConfig();
    HDRConfig::UpdateConfigEntry(v326, 0x6Au, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 107;
  *(void *)&long long v533 = @"EDRFactor";
  *((void *)&v533 + 1) = 4;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v327 = GetConfig();
    HDRConfig::UpdateConfigEntry(v327, 0x6Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v328 = GetConfig();
    HDRConfig::UpdateConfigEntry(v328, 0x6Bu, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x412E848000000000;
  if (GetConfig())
  {
    uint64_t v329 = GetConfig();
    HDRConfig::UpdateConfigEntry(v329, 0x6Bu, 0x1000u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v532) = 2;
  if (GetConfig())
  {
    uint64_t v330 = GetConfig();
    HDRConfig::UpdateConfigEntry(v330, 0x6Bu, 2u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v331 = GetConfig();
    HDRConfig::UpdateConfigEntry(v331, 0x6Bu, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  *(void *)&long long v536 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  *((void *)&v536 + 1) = 0x3FF0000000000000;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v332 = GetConfig();
    HDRConfig::UpdateConfigEntry(v332, 0x6Bu, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 108;
  *(void *)&long long v533 = @"edrGPNits";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v333 = GetConfig();
    HDRConfig::UpdateConfigEntry(v333, 0x6Cu, 0x7Fu, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v334 = GetConfig();
    HDRConfig::UpdateConfigEntry(v334, 0x6Cu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 109;
  *(void *)&long long v533 = @"HDRrefNitsReferenceDisplay";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v335 = GetConfig();
    HDRConfig::UpdateConfigEntry(v335, 0x6Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1153957888;
  if (GetConfig())
  {
    uint64_t v336 = GetConfig();
    HDRConfig::UpdateConfigEntry(v336, 0x6Du, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v337 = GetConfig();
    HDRConfig::UpdateConfigEntry(v337, 0x6Du, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 110;
  *(void *)&long long v533 = @"HDRrefNitsXROSDisplay";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v338 = GetConfig();
    HDRConfig::UpdateConfigEntry(v338, 0x6Eu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1133903872;
  if (GetConfig())
  {
    uint64_t v339 = GetConfig();
    HDRConfig::UpdateConfigEntry(v339, 0x6Eu, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v340 = GetConfig();
    HDRConfig::UpdateConfigEntry(v340, 0x6Eu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 123;
  *(void *)&long long v533 = @"SDRrefNitsReferenceDisplay";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v341 = GetConfig();
    HDRConfig::UpdateConfigEntry(v341, 0x7Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1120403456;
  if (GetConfig())
  {
    uint64_t v342 = GetConfig();
    HDRConfig::UpdateConfigEntry(v342, 0x7Bu, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v343 = GetConfig();
    HDRConfig::UpdateConfigEntry(v343, 0x7Bu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 124;
  *(void *)&long long v533 = @"SDRRefNitsInternalPanel";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v344 = GetConfig();
    HDRConfig::UpdateConfigEntry(v344, 0x7Cu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1125515264;
  if (GetConfig())
  {
    uint64_t v345 = GetConfig();
    HDRConfig::UpdateConfigEntry(v345, 0x7Cu, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v346 = GetConfig();
    HDRConfig::UpdateConfigEntry(v346, 0x7Cu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 125;
  *(void *)&long long v533 = @"SDRrefNitsXROSDisplay";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v347 = GetConfig();
    HDRConfig::UpdateConfigEntry(v347, 0x7Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1120403456;
  if (GetConfig())
  {
    uint64_t v348 = GetConfig();
    HDRConfig::UpdateConfigEntry(v348, 0x7Du, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v349 = GetConfig();
    HDRConfig::UpdateConfigEntry(v349, 0x7Du, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 111;
  *(void *)&long long v533 = @"HLGOOTFMixingStartTdivNits";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v350 = GetConfig();
    HDRConfig::UpdateConfigEntry(v350, 0x6Fu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1132068864;
  if (GetConfig())
  {
    uint64_t v351 = GetConfig();
    HDRConfig::UpdateConfigEntry(v351, 0x6Fu, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x4059000000000000;
  if (GetConfig())
  {
    uint64_t v352 = GetConfig();
    HDRConfig::UpdateConfigEntry(v352, 0x6Fu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 112;
  *(void *)&long long v533 = @"HeadroomLimit";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v353 = GetConfig();
    HDRConfig::UpdateConfigEntry(v353, 0x70u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1086324736;
  if (GetConfig())
  {
    uint64_t v354 = GetConfig();
    HDRConfig::UpdateConfigEntry(v354, 0x70u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v355 = GetConfig();
    HDRConfig::UpdateConfigEntry(v355, 0x70u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 113;
  *(void *)&long long v533 = @"HeadroomLimitMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v356 = GetConfig();
    HDRConfig::UpdateConfigEntry(v356, 0x71u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1;
  if (GetConfig())
  {
    uint64_t v357 = GetConfig();
    HDRConfig::UpdateConfigEntry(v357, 0x71u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v358 = GetConfig();
    HDRConfig::UpdateConfigEntry(v358, 0x71u, 0x400u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 1;
  if (GetConfig())
  {
    uint64_t v359 = GetConfig();
    HDRConfig::UpdateConfigEntry(v359, 0x71u, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 114;
  *(void *)&long long v533 = @"AdaptiveHeadroomLowLimit";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v360 = GetConfig();
    HDRConfig::UpdateConfigEntry(v360, 0x72u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1065353216;
  if (GetConfig())
  {
    uint64_t v361 = GetConfig();
    HDRConfig::UpdateConfigEntry(v361, 0x72u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v362 = GetConfig();
    HDRConfig::UpdateConfigEntry(v362, 0x72u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 115;
  *(void *)&long long v533 = @"maxEDRValue";
  *((void *)&v533 + 1) = 4;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v363 = GetConfig();
    HDRConfig::UpdateConfigEntry(v363, 0x73u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v364 = GetConfig();
    HDRConfig::UpdateConfigEntry(v364, 0x73u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x412E848000000000;
  if (GetConfig())
  {
    uint64_t v365 = GetConfig();
    HDRConfig::UpdateConfigEntry(v365, 0x73u, 0x1000u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0;
  long long v536 = 0x3FF0000000000000uLL;
  if (GetConfig())
  {
    uint64_t v366 = GetConfig();
    HDRConfig::UpdateConfigEntry(v366, 0x73u, 0x400u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 116;
  *(void *)&long long v533 = @"pqValueC0";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v367 = GetConfig();
    HDRConfig::UpdateConfigEntry(v367, 0x74u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v368 = GetConfig();
    HDRConfig::UpdateConfigEntry(v368, 0x74u, 0x200u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 117;
  *(void *)&long long v533 = @"pqValueC1";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v369 = GetConfig();
    HDRConfig::UpdateConfigEntry(v369, 0x75u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v370 = GetConfig();
    HDRConfig::UpdateConfigEntry(v370, 0x75u, 0x200u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 118;
  *(void *)&long long v533 = @"pqValueC2";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v371 = GetConfig();
    HDRConfig::UpdateConfigEntry(v371, 0x76u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v372 = GetConfig();
    HDRConfig::UpdateConfigEntry(v372, 0x76u, 0x200u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 119;
  *(void *)&long long v533 = @"processingType";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v373 = GetConfig();
    HDRConfig::UpdateConfigEntry(v373, 0x77u, 0x7Fu, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 120;
  *(void *)&long long v533 = @"sdrMaxBrightnessInNits";
  *((void *)&v533 + 1) = 1;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v374 = GetConfig();
    HDRConfig::UpdateConfigEntry(v374, 0x78u, 0x7Fu, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 121;
  *(void *)&long long v533 = @"hdrMaxBrightnessInNits";
  *((void *)&v533 + 1) = 1;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v375 = GetConfig();
    HDRConfig::UpdateConfigEntry(v375, 0x79u, 0x7Fu, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 122;
  *(void *)&long long v533 = @"sdrMidRatio";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v376 = GetConfig();
    HDRConfig::UpdateConfigEntry(v376, 0x7Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1058642330;
  if (GetConfig())
  {
    uint64_t v377 = GetConfig();
    HDRConfig::UpdateConfigEntry(v377, 0x7Au, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v378 = GetConfig();
    HDRConfig::UpdateConfigEntry(v378, 0x7Au, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 126;
  *(void *)&long long v533 = @"targetDisplayContrastRatio";
  *((void *)&v533 + 1) = 4;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v379 = GetConfig();
    HDRConfig::UpdateConfigEntry(v379, 0x7Eu, 0x7Fu, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x4197D78400000000;
  if (GetConfig())
  {
    uint64_t v380 = GetConfig();
    HDRConfig::UpdateConfigEntry(v380, 0x7Eu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 127;
  *(void *)&long long v533 = @"targetDisplayReflectionRatio";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v381 = GetConfig();
    HDRConfig::UpdateConfigEntry(v381, 0x7Fu, 0x7Fu, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v382 = GetConfig();
    HDRConfig::UpdateConfigEntry(v382, 0x7Fu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 128;
  *(void *)&long long v533 = @"targetMaxLinear";
  *((void *)&v533 + 1) = 4;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v383 = GetConfig();
    HDRConfig::UpdateConfigEntry(v383, 0x80u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v384 = GetConfig();
    HDRConfig::UpdateConfigEntry(v384, 0x80u, 0x200u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 129;
  *(void *)&long long v533 = @"targetMinLinear";
  *((void *)&v533 + 1) = 4;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v385 = GetConfig();
    HDRConfig::UpdateConfigEntry(v385, 0x81u, 0x7Fu, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 130;
  *(void *)&long long v533 = @"adjMaxEDRValue";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v386 = GetConfig();
    HDRConfig::UpdateConfigEntry(v386, 0x82u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v387 = GetConfig();
    HDRConfig::UpdateConfigEntry(v387, 0x82u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v388 = GetConfig();
    HDRConfig::UpdateConfigEntry(v388, 0x82u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 131;
  *(void *)&long long v533 = @"adjustDM4CmidCmax";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v389 = GetConfig();
    HDRConfig::UpdateConfigEntry(v389, 0x83u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 2;
  if (GetConfig())
  {
    uint64_t v390 = GetConfig();
    HDRConfig::UpdateConfigEntry(v390, 0x83u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v391 = GetConfig();
    HDRConfig::UpdateConfigEntry(v391, 0x83u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 132;
  long long v534 = 0u;
  *(void *)&long long v533 = @"adjustDM4CmaxAlpha";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v392 = GetConfig();
    HDRConfig::UpdateConfigEntry(v392, 0x84u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1056964608;
  if (GetConfig())
  {
    uint64_t v393 = GetConfig();
    HDRConfig::UpdateConfigEntry(v393, 0x84u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v394 = GetConfig();
    HDRConfig::UpdateConfigEntry(v394, 0x84u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v395 = GetConfig();
    HDRConfig::UpdateConfigEntry(v395, 0x84u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 133;
  *(void *)&long long v533 = @"adjustSmaxPQLowerBound";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v396 = GetConfig();
    HDRConfig::UpdateConfigEntry(v396, 0x85u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1060320051;
  if (GetConfig())
  {
    uint64_t v397 = GetConfig();
    HDRConfig::UpdateConfigEntry(v397, 0x85u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v398 = GetConfig();
    HDRConfig::UpdateConfigEntry(v398, 0x85u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 134;
  *(void *)&long long v533 = @"HistToneMappingMidAlpha";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v399 = GetConfig();
    HDRConfig::UpdateConfigEntry(v399, 0x86u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1059481190;
  if (GetConfig())
  {
    uint64_t v400 = GetConfig();
    HDRConfig::UpdateConfigEntry(v400, 0x86u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v401 = GetConfig();
    HDRConfig::UpdateConfigEntry(v401, 0x86u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 135;
  *(void *)&long long v533 = @"linearStretchMode";
  *((void *)&v533 + 1) = 1;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v402 = GetConfig();
    HDRConfig::UpdateConfigEntry(v402, 0x87u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 2;
  if (GetConfig())
  {
    uint64_t v403 = GetConfig();
    HDRConfig::UpdateConfigEntry(v403, 0x87u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v404 = GetConfig();
    HDRConfig::UpdateConfigEntry(v404, 0x87u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 136;
  long long v534 = 0u;
  *(void *)&long long v533 = @"ambAPLUpFactor";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v405 = GetConfig();
    HDRConfig::UpdateConfigEntry(v405, 0x88u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1061158912;
  if (GetConfig())
  {
    uint64_t v406 = GetConfig();
    HDRConfig::UpdateConfigEntry(v406, 0x88u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v407 = GetConfig();
    HDRConfig::UpdateConfigEntry(v407, 0x88u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 137;
  *(void *)&long long v533 = @"ambAPLLowFactor";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v408 = GetConfig();
    HDRConfig::UpdateConfigEntry(v408, 0x89u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1045220557;
  if (GetConfig())
  {
    uint64_t v409 = GetConfig();
    HDRConfig::UpdateConfigEntry(v409, 0x89u, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v410 = GetConfig();
    HDRConfig::UpdateConfigEntry(v410, 0x89u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 93;
  *(void *)&long long v533 = @"contentAdaptedHeadroomMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v411 = GetConfig();
    HDRConfig::UpdateConfigEntry(v411, 0x5Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 2;
  if (GetConfig())
  {
    uint64_t v412 = GetConfig();
    HDRConfig::UpdateConfigEntry(v412, 0x5Du, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v413 = GetConfig();
    HDRConfig::UpdateConfigEntry(v413, 0x5Du, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 138;
  long long v534 = 0u;
  *(void *)&long long v533 = @"ambAPLContrastRatio";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v414 = GetConfig();
    HDRConfig::UpdateConfigEntry(v414, 0x8Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1065353216;
  if (GetConfig())
  {
    uint64_t v415 = GetConfig();
    HDRConfig::UpdateConfigEntry(v415, 0x8Au, 0x200u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v416 = GetConfig();
    HDRConfig::UpdateConfigEntry(v416, 0x8Au, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 139;
  *(void *)&long long v533 = @"hdr10PlusHistBasedTmMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v417 = GetConfig();
    HDRConfig::UpdateConfigEntry(v417, 0x8Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 12;
  if (GetConfig())
  {
    uint64_t v418 = GetConfig();
    HDRConfig::UpdateConfigEntry(v418, 0x8Bu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v419 = GetConfig();
    HDRConfig::UpdateConfigEntry(v419, 0x8Bu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 140;
  *(void *)&long long v533 = @"hdr10PlusProfileBMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v420 = GetConfig();
    HDRConfig::UpdateConfigEntry(v420, 0x8Cu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 2;
  if (GetConfig())
  {
    uint64_t v421 = GetConfig();
    HDRConfig::UpdateConfigEntry(v421, 0x8Cu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v422 = GetConfig();
    HDRConfig::UpdateConfigEntry(v422, 0x8Cu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 141;
  *(void *)&long long v533 = @"hdr10PlusAdjustCmax";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v423 = GetConfig();
    HDRConfig::UpdateConfigEntry(v423, 0x8Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v424 = GetConfig();
    HDRConfig::UpdateConfigEntry(v424, 0x8Du, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v425 = GetConfig();
    HDRConfig::UpdateConfigEntry(v425, 0x8Du, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 142;
  *(void *)&long long v533 = @"hdr10PlusAdjustCmid";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v426 = GetConfig();
    HDRConfig::UpdateConfigEntry(v426, 0x8Eu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 3;
  if (GetConfig())
  {
    uint64_t v427 = GetConfig();
    HDRConfig::UpdateConfigEntry(v427, 0x8Eu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v428 = GetConfig();
    HDRConfig::UpdateConfigEntry(v428, 0x8Eu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 143;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableAdaptiveNormDSlopeLower";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v429 = GetConfig();
    HDRConfig::UpdateConfigEntry(v429, 0x8Fu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v430 = GetConfig();
    HDRConfig::UpdateConfigEntry(v430, 0x8Fu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v431 = GetConfig();
    HDRConfig::UpdateConfigEntry(v431, 0x8Fu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 144;
  *(void *)&long long v533 = @"normDSlopeLower";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v432 = GetConfig();
    HDRConfig::UpdateConfigEntry(v432, 0x90u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1046898278;
  if (GetConfig())
  {
    uint64_t v433 = GetConfig();
    HDRConfig::UpdateConfigEntry(v433, 0x90u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v434 = GetConfig();
    HDRConfig::UpdateConfigEntry(v434, 0x90u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v435 = GetConfig();
    HDRConfig::UpdateConfigEntry(v435, 0x90u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 147;
  *(void *)&long long v533 = @"normDSlopeUpper";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v436 = GetConfig();
    HDRConfig::UpdateConfigEntry(v436, 0x93u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = -1082130432;
  if (GetConfig())
  {
    uint64_t v437 = GetConfig();
    HDRConfig::UpdateConfigEntry(v437, 0x93u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v438 = GetConfig();
    HDRConfig::UpdateConfigEntry(v438, 0x93u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v439 = GetConfig();
    HDRConfig::UpdateConfigEntry(v439, 0x93u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 148;
  *(void *)&long long v533 = @"edrTmidBaseMinGain";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v440 = GetConfig();
    HDRConfig::UpdateConfigEntry(v440, 0x94u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1063675494;
  if (GetConfig())
  {
    uint64_t v441 = GetConfig();
    HDRConfig::UpdateConfigEntry(v441, 0x94u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v442 = GetConfig();
    HDRConfig::UpdateConfigEntry(v442, 0x94u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v443 = GetConfig();
    HDRConfig::UpdateConfigEntry(v443, 0x94u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 149;
  *(void *)&long long v533 = @"edrTmidBaseMaxGain";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v444 = GetConfig();
    HDRConfig::UpdateConfigEntry(v444, 0x95u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1065353216;
  if (GetConfig())
  {
    uint64_t v445 = GetConfig();
    HDRConfig::UpdateConfigEntry(v445, 0x95u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v446 = GetConfig();
    HDRConfig::UpdateConfigEntry(v446, 0x95u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v447 = GetConfig();
    HDRConfig::UpdateConfigEntry(v447, 0x95u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 150;
  *(void *)&long long v533 = @"maxAmbReflectedNits";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v448 = GetConfig();
    HDRConfig::UpdateConfigEntry(v448, 0x96u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1036831949;
  if (GetConfig())
  {
    uint64_t v449 = GetConfig();
    HDRConfig::UpdateConfigEntry(v449, 0x96u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v450 = GetConfig();
    HDRConfig::UpdateConfigEntry(v450, 0x96u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v451 = GetConfig();
    HDRConfig::UpdateConfigEntry(v451, 0x96u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 151;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableAmbientBasedEdrTmidBaseMinGain";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v452 = GetConfig();
    HDRConfig::UpdateConfigEntry(v452, 0x97u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v453 = GetConfig();
    HDRConfig::UpdateConfigEntry(v453, 0x97u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v454 = GetConfig();
    HDRConfig::UpdateConfigEntry(v454, 0x97u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 152;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableAdaptiveEdrTmidBaseGain";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v455 = GetConfig();
    HDRConfig::UpdateConfigEntry(v455, 0x98u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v456 = GetConfig();
    HDRConfig::UpdateConfigEntry(v456, 0x98u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v457 = GetConfig();
    HDRConfig::UpdateConfigEntry(v457, 0x98u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 153;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableAdaptiveEdrTmax";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v458 = GetConfig();
    HDRConfig::UpdateConfigEntry(v458, 0x99u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v459 = GetConfig();
    HDRConfig::UpdateConfigEntry(v459, 0x99u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v460 = GetConfig();
    HDRConfig::UpdateConfigEntry(v460, 0x99u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 154;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableAdaptiveEdrMidSlope";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v461 = GetConfig();
    HDRConfig::UpdateConfigEntry(v461, 0x9Au, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v462 = GetConfig();
    HDRConfig::UpdateConfigEntry(v462, 0x9Au, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v463 = GetConfig();
    HDRConfig::UpdateConfigEntry(v463, 0x9Au, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 145;
  *(void *)&long long v533 = @"normDSlopeLowerLo";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v464 = GetConfig();
    HDRConfig::UpdateConfigEntry(v464, 0x91u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1045220557;
  if (GetConfig())
  {
    uint64_t v465 = GetConfig();
    HDRConfig::UpdateConfigEntry(v465, 0x91u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v466 = GetConfig();
    HDRConfig::UpdateConfigEntry(v466, 0x91u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v467 = GetConfig();
    HDRConfig::UpdateConfigEntry(v467, 0x91u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 146;
  *(void *)&long long v533 = @"normDSlopeLowerHi";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v468 = GetConfig();
    HDRConfig::UpdateConfigEntry(v468, 0x92u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1056964608;
  if (GetConfig())
  {
    uint64_t v469 = GetConfig();
    HDRConfig::UpdateConfigEntry(v469, 0x92u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 2;
  if (GetConfig())
  {
    uint64_t v470 = GetConfig();
    HDRConfig::UpdateConfigEntry(v470, 0x92u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v471 = GetConfig();
    HDRConfig::UpdateConfigEntry(v471, 0x92u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 155;
  *(void *)&long long v533 = @"sceneMilliLux";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v472 = GetConfig();
    HDRConfig::UpdateConfigEntry(v472, 0x9Bu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v473 = GetConfig();
    HDRConfig::UpdateConfigEntry(v473, 0x9Bu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v474 = GetConfig();
    HDRConfig::UpdateConfigEntry(v474, 0x9Bu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 156;
  *(void *)&long long v533 = @"enableSceneLuxAdaptation";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v475 = GetConfig();
    HDRConfig::UpdateConfigEntry(v475, 0x9Cu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v476 = GetConfig();
    HDRConfig::UpdateConfigEntry(v476, 0x9Cu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v477 = GetConfig();
    HDRConfig::UpdateConfigEntry(v477, 0x9Cu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 157;
  *(void *)&long long v533 = @"sceneLuxAdaptationMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v478 = GetConfig();
    HDRConfig::UpdateConfigEntry(v478, 0x9Du, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 2;
  if (GetConfig())
  {
    uint64_t v479 = GetConfig();
    HDRConfig::UpdateConfigEntry(v479, 0x9Du, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v480 = GetConfig();
    HDRConfig::UpdateConfigEntry(v480, 0x9Du, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 158;
  *(void *)&long long v533 = @"enableSceneLuxB2DITPMLModel";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v481 = GetConfig();
    HDRConfig::UpdateConfigEntry(v481, 0x9Eu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v482 = GetConfig();
    HDRConfig::UpdateConfigEntry(v482, 0x9Eu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v483 = GetConfig();
    HDRConfig::UpdateConfigEntry(v483, 0x9Eu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 159;
  long long v534 = 0u;
  *(void *)&long long v533 = @"sceneLuxLB";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v484 = GetConfig();
    HDRConfig::UpdateConfigEntry(v484, 0x9Fu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1092616192;
  if (GetConfig())
  {
    uint64_t v485 = GetConfig();
    HDRConfig::UpdateConfigEntry(v485, 0x9Fu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v486 = GetConfig();
    HDRConfig::UpdateConfigEntry(v486, 0x9Fu, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v487 = GetConfig();
    HDRConfig::UpdateConfigEntry(v487, 0x9Fu, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 160;
  *(void *)&long long v533 = @"sceneLuxAdaptationMidLB";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v488 = GetConfig();
    HDRConfig::UpdateConfigEntry(v488, 0xA0u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1050253722;
  if (GetConfig())
  {
    uint64_t v489 = GetConfig();
    HDRConfig::UpdateConfigEntry(v489, 0xA0u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v490 = GetConfig();
    HDRConfig::UpdateConfigEntry(v490, 0xA0u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v491 = GetConfig();
    HDRConfig::UpdateConfigEntry(v491, 0xA0u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 161;
  *(void *)&long long v533 = @"dm4TmMode";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v492 = GetConfig();
    HDRConfig::UpdateConfigEntry(v492, 0xA1u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v493 = GetConfig();
    HDRConfig::UpdateConfigEntry(v493, 0xA1u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v494 = GetConfig();
    HDRConfig::UpdateConfigEntry(v494, 0xA1u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 162;
  *(void *)&long long v533 = @"enableAmveStrength";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v495 = GetConfig();
    HDRConfig::UpdateConfigEntry(v495, 0xA2u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v496 = GetConfig();
    HDRConfig::UpdateConfigEntry(v496, 0xA2u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v497 = GetConfig();
    HDRConfig::UpdateConfigEntry(v497, 0xA2u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 163;
  long long v534 = 0u;
  *(void *)&long long v533 = @"amveStrengthValue";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v498 = GetConfig();
    HDRConfig::UpdateConfigEntry(v498, 0xA3u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1065353216;
  if (GetConfig())
  {
    uint64_t v499 = GetConfig();
    HDRConfig::UpdateConfigEntry(v499, 0xA3u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v500 = GetConfig();
    HDRConfig::UpdateConfigEntry(v500, 0xA3u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v501 = GetConfig();
    HDRConfig::UpdateConfigEntry(v501, 0xA3u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 164;
  *(void *)&long long v533 = @"amveStrengthSourceSDRpeakNits";
  *((void *)&v533 + 1) = 3;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v502 = GetConfig();
    HDRConfig::UpdateConfigEntry(v502, 0xA4u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1128988672;
  if (GetConfig())
  {
    uint64_t v503 = GetConfig();
    HDRConfig::UpdateConfigEntry(v503, 0xA4u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 3;
  if (GetConfig())
  {
    uint64_t v504 = GetConfig();
    HDRConfig::UpdateConfigEntry(v504, 0xA4u, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  uint64_t v537 = 0x40C3880000000000;
  if (GetConfig())
  {
    uint64_t v505 = GetConfig();
    HDRConfig::UpdateConfigEntry(v505, 0xA4u, 0x1000u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 165;
  *(void *)&long long v533 = @"ccdumpStart";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v506 = GetConfig();
    HDRConfig::UpdateConfigEntry(v506, 0xA5u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v507 = GetConfig();
    HDRConfig::UpdateConfigEntry(v507, 0xA5u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 4;
  if (GetConfig())
  {
    uint64_t v508 = GetConfig();
    HDRConfig::UpdateConfigEntry(v508, 0xA5u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 166;
  *(void *)&long long v533 = @"ccdumpNumber";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v509 = GetConfig();
    HDRConfig::UpdateConfigEntry(v509, 0xA6u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 1;
  if (GetConfig())
  {
    uint64_t v510 = GetConfig();
    HDRConfig::UpdateConfigEntry(v510, 0xA6u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 4;
  if (GetConfig())
  {
    uint64_t v511 = GetConfig();
    HDRConfig::UpdateConfigEntry(v511, 0xA6u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 167;
  *(void *)&long long v533 = @"ccdumpNext";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v512 = GetConfig();
    HDRConfig::UpdateConfigEntry(v512, 0xA7u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v513 = GetConfig();
    HDRConfig::UpdateConfigEntry(v513, 0xA7u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 4;
  if (GetConfig())
  {
    uint64_t v514 = GetConfig();
    HDRConfig::UpdateConfigEntry(v514, 0xA7u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 168;
  long long v534 = 0u;
  *(void *)&long long v533 = @"ccdumpUseShortName";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v515 = GetConfig();
    HDRConfig::UpdateConfigEntry(v515, 0xA8u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  BYTE8(v535) = 1;
  if (GetConfig())
  {
    uint64_t v516 = GetConfig();
    HDRConfig::UpdateConfigEntry(v516, 0xA8u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 4;
  if (GetConfig())
  {
    uint64_t v517 = GetConfig();
    HDRConfig::UpdateConfigEntry(v517, 0xA8u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 170;
  *(void *)&long long v533 = @"configDumpLevel";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v518 = GetConfig();
    HDRConfig::UpdateConfigEntry(v518, 0xAAu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v535) = 3;
  if (GetConfig())
  {
    uint64_t v519 = GetConfig();
    HDRConfig::UpdateConfigEntry(v519, 0xAAu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 4;
  if (GetConfig())
  {
    uint64_t v520 = GetConfig();
    HDRConfig::UpdateConfigEntry(v520, 0xAAu, 0x40u, (uint64_t)&v532);
  }
  long long v535 = 0u;
  long long v536 = 0u;
  uint64_t v537 = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  DWORD2(v536) = 4;
  if (GetConfig())
  {
    uint64_t v521 = GetConfig();
    HDRConfig::UpdateConfigEntry(v521, 0xAAu, 0x800u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 171;
  *(void *)&long long v533 = @"configDumpStyle";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v522 = GetConfig();
    HDRConfig::UpdateConfigEntry(v522, 0xABu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v523 = GetConfig();
    HDRConfig::UpdateConfigEntry(v523, 0xABu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 4;
  if (GetConfig())
  {
    uint64_t v524 = GetConfig();
    HDRConfig::UpdateConfigEntry(v524, 0xABu, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v534 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 169;
  *(void *)&long long v533 = @"configDumpFlag";
  *((void *)&v533 + 1) = 2;
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v525 = GetConfig();
    HDRConfig::UpdateConfigEntry(v525, 0xA9u, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v526 = GetConfig();
    HDRConfig::UpdateConfigEntry(v526, 0xA9u, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 4;
  if (GetConfig())
  {
    uint64_t v527 = GetConfig();
    HDRConfig::UpdateConfigEntry(v527, 0xA9u, 0x40u, (uint64_t)&v532);
  }
  long long v532 = 0u;
  *((void *)&v533 + 1) = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  DWORD1(v532) = 1;
  HIDWORD(v532) = 172;
  long long v534 = 0u;
  *(void *)&long long v533 = @"enableCapabilityQueryBasedMSR";
  LODWORD(v534) = 3;
  uint64_t v537 = 0;
  if (GetConfig())
  {
    uint64_t v528 = GetConfig();
    HDRConfig::UpdateConfigEntry(v528, 0xACu, 0x7Fu, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  if (GetConfig())
  {
    uint64_t v529 = GetConfig();
    HDRConfig::UpdateConfigEntry(v529, 0xACu, 0x200u, (uint64_t)&v532);
  }
  uint64_t v537 = 0;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v532 = 0u;
  LODWORD(v534) = 4;
  if (GetConfig())
  {
    uint64_t v530 = GetConfig();
    HDRConfig::UpdateConfigEntry(v530, 0xACu, 0x40u, (uint64_t)&v532);
  }
  return 1;
}

__int16 *GetConfig(HDRConfig *a1)
{
  {
    if (a1)
    {
      byte_26ABE1E5A = 0;
      bzero(&unk_26ABE1E5C, 0x5804uLL);
    }
  }
  uint64_t v1 = (__int16 *)GetConfig(void)::config;
  if (!GetConfig(void)::config)
  {
    uint64_t v1 = &GetConfig(void)::s_config;
    GetConfig(void)::config = (uint64_t)&GetConfig(void)::s_config;
    GetConfig(void)::s_config = 0;
    HDRConfig::CreateAllConfigEntries(a1);
  }
  return v1;
}

uint64_t HDRConfig::UpdateConfigEntry(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 88 * a2;
  *(_DWORD *)(v7 + 8) |= a3;
  uint64_t v27 = (void *)(v7 + 88);
  uint64_t v8 = (void *)(v7 + 80);
  uint64_t v9 = (void *)(v7 + 72);
  uint64_t v10 = (void *)(v7 + 64);
  uint64_t v11 = (void *)(v7 + 56);
  uint64_t v12 = (void *)(v7 + 48);
  uint64_t v13 = (_DWORD *)(v7 + 40);
  uint64_t v14 = (_DWORD *)(v7 + 36);
  uint64_t v32 = (void *)(v7 + 24);
  uint64_t v33 = (_DWORD *)(v7 + 32);
  uint64_t v30 = (_DWORD *)(v7 + 16);
  uint64_t v31 = (_DWORD *)(v7 + 20);
  uint64_t v29 = (_DWORD *)(v7 + 12);
  char v15 = 1;
  do
  {
    if ((a3 >> v6))
    {
      switch(v6)
      {
        case 0:
          int v16 = *(_DWORD *)(a4 + 4);
          uint64_t v17 = v29;
          goto LABEL_16;
        case 1:
          int v16 = *(_DWORD *)(a4 + 8);
          uint64_t v17 = v30;
          goto LABEL_16;
        case 2:
          int v16 = *(_DWORD *)(a4 + 12);
          uint64_t v17 = v31;
          goto LABEL_16;
        case 3:
          *uint64_t v32 = *(void *)(a4 + 16);
          break;
        case 4:
          int v16 = *(_DWORD *)(a4 + 24);
          uint64_t v17 = v33;
LABEL_16:
          *uint64_t v17 = v16;
          break;
        case 5:
          *uint64_t v14 = *(_DWORD *)(a4 + 28);
          break;
        case 6:
          *uint64_t v13 = *(_DWORD *)(a4 + 32);
          break;
        case 7:
          *uint64_t v12 = *(void *)(a4 + 40);
          break;
        case 8:
          *uint64_t v11 = *(void *)(a4 + 48);
          break;
        case 9:
          *uint64_t v10 = *(void *)(a4 + 56);
          break;
        case 10:
          *uint64_t v9 = *(void *)(a4 + 64);
          break;
        case 11:
          *uint64_t v8 = *(void *)(a4 + 72);
          break;
        case 12:
          *uint64_t v27 = *(void *)(a4 + 80);
          return v15 & 1;
        default:
          if (enableLogInstance)
          {
            uint64_t v28 = v14;
            uint64_t v18 = v13;
            uint64_t v19 = v12;
            uint64_t v20 = v11;
            uint64_t v21 = v10;
            uint64_t v22 = v9;
            uint64_t v23 = v8;
            if (logInstanceID) {
              uint64_t v24 = logInstanceID;
            }
            else {
              uint64_t v24 = prevLogInstanceID;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              uint64_t v35 = WORD1(v24);
              _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 544\n", buf, 0xCu);
            }
            char v15 = 0;
            prevLogInstanceID = v24;
            uint64_t v8 = v23;
            uint64_t v9 = v22;
            uint64_t v10 = v21;
            uint64_t v11 = v20;
            uint64_t v12 = v19;
            uint64_t v13 = v18;
            uint64_t v14 = v28;
          }
          else
          {
            BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
            char v15 = 0;
            if (v25)
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 544\n", buf, 2u);
              char v15 = 0;
            }
          }
          break;
      }
    }
    ++v6;
  }
  while (v6 != 13);
  return v15 & 1;
}

uint64_t HDRConfig::ReadConfigEntry(uint64_t a1, unsigned int a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 1)) {
    return 1;
  }
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v4 = logInstanceID;
    }
    else {
      uint64_t v4 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 88 * a2 + 24);
      *(_DWORD *)buf = 134218242;
      uint64_t v51 = WORD1(v4);
      __int16 v52 = 2112;
      uint64_t v53 = v5;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Warning: Attempting to read defaults writes in release builds! key = \"%@\"\n", buf, 0x16u);
    }
    prevLogInstanceID = v4;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 88 * a2 + 24);
    *(_DWORD *)buf = 138412290;
    uint64_t v51 = v7;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Warning: Attempting to read defaults writes in release builds! key = \"%@\"\n", buf, 0xCu);
  }
  uint64_t v8 = a1 + 88 * a2;
  if (!*(_DWORD *)(v8 + 12)) {
    return 0;
  }
  unsigned int v9 = a2;
  uint64_t v10 = (unsigned int *)(v8 + 8);
  Boolean keyExistsAndHasValidFormat = 0;
  switch(*(_DWORD *)(a1 + 88 * v9 + 32))
  {
    case 0:
      int AppIntegerValue = CFPreferencesGetAppIntegerValue(*(CFStringRef *)(a1 + 88 * v9 + 24), @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat)
      {
        *(unsigned char *)(a1 + 88 * v9 + 48) = AppIntegerValue != 0;
        goto LABEL_135;
      }
      unsigned int v14 = *v10;
      goto LABEL_53;
    case 1:
      unsigned int v13 = CFPreferencesGetAppIntegerValue(*(CFStringRef *)(a1 + 88 * v9 + 24), @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
      unsigned int v14 = *v10;
      if (!keyExistsAndHasValidFormat) {
        goto LABEL_53;
      }
      if ((v14 & 0x400) == 0) {
        goto LABEL_58;
      }
      uint64_t v15 = a1 + 88 * v9;
      int v16 = *(_DWORD *)(v15 + 16);
      int v17 = *(_DWORD *)(v15 + 72);
      if (v16)
      {
        if (v17 > (int)v13) {
          unsigned int v13 = v17;
        }
LABEL_58:
        BOOL v18 = 1;
        if ((v14 & 0x800) == 0) {
          goto LABEL_116;
        }
      }
      else
      {
        if (v17 > (int)v13)
        {
          if ((v14 & 0x800) == 0) {
            goto LABEL_117;
          }
          BOOL v18 = 0;
          unsigned int v19 = *(_DWORD *)(a1 + 88 * v9 + 80);
          goto LABEL_60;
        }
        BOOL v18 = (v16 & 2) == 0 || v17 != v13;
        if ((v14 & 0x800) == 0) {
          goto LABEL_116;
        }
      }
      uint64_t v39 = a1 + 88 * v9;
      int v16 = *(_DWORD *)(v39 + 16);
      unsigned int v19 = *(_DWORD *)(v39 + 80);
      if (v16)
      {
        if ((int)v19 < (int)v13) {
          unsigned int v13 = v19;
        }
        goto LABEL_116;
      }
LABEL_60:
      if ((int)v13 <= (int)v19) {
        goto LABEL_67;
      }
      goto LABEL_117;
    case 2:
      unsigned int v13 = CFPreferencesGetAppIntegerValue(*(CFStringRef *)(a1 + 88 * v9 + 24), @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
      unsigned int v14 = *v10;
      if (!keyExistsAndHasValidFormat) {
        goto LABEL_53;
      }
      if ((v14 & 0x400) == 0) {
        goto LABEL_64;
      }
      uint64_t v20 = a1 + 88 * v9;
      int v16 = *(_DWORD *)(v20 + 16);
      unsigned int v21 = *(_DWORD *)(v20 + 72);
      if (v16)
      {
        if (v21 > v13) {
          unsigned int v13 = v21;
        }
LABEL_64:
        BOOL v18 = 1;
        if ((v14 & 0x800) == 0) {
          goto LABEL_116;
        }
      }
      else
      {
        if (v21 > v13)
        {
          if ((v14 & 0x800) == 0) {
            goto LABEL_117;
          }
          BOOL v18 = 0;
          unsigned int v19 = *(_DWORD *)(a1 + 88 * v9 + 80);
          goto LABEL_66;
        }
        BOOL v18 = (v16 & 2) == 0 || v21 != v13;
        if ((v14 & 0x800) == 0) {
          goto LABEL_116;
        }
      }
      uint64_t v40 = a1 + 88 * v9;
      int v16 = *(_DWORD *)(v40 + 16);
      unsigned int v19 = *(_DWORD *)(v40 + 80);
      if (v16)
      {
        if (v19 < v13) {
          unsigned int v13 = v19;
        }
        goto LABEL_116;
      }
LABEL_66:
      if (v13 > v19) {
        goto LABEL_117;
      }
LABEL_67:
      if ((v16 & 4) != 0 && v13 == v19) {
        BOOL v18 = 0;
      }
LABEL_116:
      if (v18) {
        goto LABEL_120;
      }
LABEL_117:
      if ((v14 & 0x200) != 0) {
        unsigned int v13 = *(_DWORD *)(a1 + 88 * v9 + 64);
      }
      else {
        unsigned int v13 = 0;
      }
LABEL_120:
      *(_DWORD *)(a1 + 88 * v9 + 48) = v13;
      goto LABEL_135;
    case 3:
      int v22 = CFPreferencesGetAppIntegerValue(*(CFStringRef *)(a1 + 88 * v9 + 24), @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
      unsigned int v14 = *v10;
      if (!keyExistsAndHasValidFormat) {
        goto LABEL_53;
      }
      float v23 = 1.0;
      if ((v14 & 0x1000) != 0) {
        float v23 = *(double *)(a1 + 88 * v9 + 88);
      }
      float v24 = (float)v22 / v23;
      if ((v14 & 0x400) == 0) {
        goto LABEL_75;
      }
      uint64_t v25 = a1 + 88 * v9;
      int v26 = *(_DWORD *)(v25 + 16);
      float v27 = *(float *)(v25 + 72);
      if (v26)
      {
        if (v27 > v24) {
          float v24 = *(float *)(v25 + 72);
        }
LABEL_75:
        char v28 = 1;
        if ((v14 & 0x800) == 0) {
          goto LABEL_124;
        }
      }
      else
      {
        if (v24 < v27)
        {
          if ((v14 & 0x800) == 0) {
            goto LABEL_125;
          }
          char v28 = 0;
          float v29 = *(float *)(a1 + 88 * v9 + 80);
          goto LABEL_77;
        }
        char v28 = (*(_DWORD *)(v25 + 16) & 2) == 0;
        if (v24 != v27) {
          char v28 = 1;
        }
        if ((v14 & 0x800) == 0) {
          goto LABEL_124;
        }
      }
      uint64_t v42 = a1 + 88 * v9;
      int v26 = *(_DWORD *)(v42 + 16);
      float v29 = *(float *)(v42 + 80);
      if (v26)
      {
        if (v29 < v24) {
          float v24 = *(float *)(v42 + 80);
        }
        goto LABEL_124;
      }
LABEL_77:
      if (v24 > v29) {
        goto LABEL_125;
      }
      BOOL v43 = (v26 & 4) == 0;
      if (v24 != v29) {
        BOOL v43 = 1;
      }
      v28 &= v43;
LABEL_124:
      if (v28) {
        goto LABEL_127;
      }
LABEL_125:
      float v24 = 0.0;
      if ((v14 & 0x200) != 0) {
        float v24 = *(float *)(a1 + 88 * v9 + 64);
      }
LABEL_127:
      *(float *)(a1 + 88 * v9 + 48) = v24;
      goto LABEL_135;
    case 4:
      int v30 = CFPreferencesGetAppIntegerValue(*(CFStringRef *)(a1 + 88 * v9 + 24), @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
      unsigned int v14 = *v10;
      if (!keyExistsAndHasValidFormat)
      {
LABEL_53:
        uint64_t result = 1;
        goto LABEL_138;
      }
      double v31 = 1.0;
      if ((v14 & 0x1000) != 0) {
        double v31 = *(double *)(a1 + 88 * v9 + 88);
      }
      double v32 = (double)v30 / v31;
      if ((v14 & 0x400) == 0) {
        goto LABEL_83;
      }
      uint64_t v33 = a1 + 88 * v9;
      int v34 = *(_DWORD *)(v33 + 16);
      double v35 = *(double *)(v33 + 72);
      if (v34)
      {
        if (v35 > v32) {
          double v32 = *(double *)(v33 + 72);
        }
LABEL_83:
        char v36 = 1;
        if ((v14 & 0x800) == 0) {
          goto LABEL_131;
        }
      }
      else
      {
        if (v32 < v35)
        {
          if ((v14 & 0x800) == 0) {
            goto LABEL_132;
          }
          char v36 = 0;
          double v37 = *(double *)(a1 + 88 * v9 + 80);
          goto LABEL_85;
        }
        char v36 = (*(_DWORD *)(v33 + 16) & 2) == 0;
        if (v32 != v35) {
          char v36 = 1;
        }
        if ((v14 & 0x800) == 0) {
          goto LABEL_131;
        }
      }
      uint64_t v44 = a1 + 88 * v9;
      int v34 = *(_DWORD *)(v44 + 16);
      double v37 = *(double *)(v44 + 80);
      if (v34)
      {
        if (v37 < v32) {
          double v32 = *(double *)(v44 + 80);
        }
        goto LABEL_131;
      }
LABEL_85:
      if (v32 > v37) {
        goto LABEL_132;
      }
      BOOL v45 = (v34 & 4) == 0;
      if (v32 != v37) {
        BOOL v45 = 1;
      }
      v36 &= v45;
LABEL_131:
      if (v36) {
        goto LABEL_134;
      }
LABEL_132:
      double v32 = 0.0;
      if ((v14 & 0x200) != 0) {
        double v32 = *(double *)(a1 + 88 * v9 + 64);
      }
LABEL_134:
      *(double *)(a1 + 88 * v9 + 48) = v32;
LABEL_135:
      uint64_t result = 1;
LABEL_136:
      unsigned int v14 = *v10;
      if (keyExistsAndHasValidFormat)
      {
        unsigned int v48 = v14 | 0x80;
        goto LABEL_139;
      }
LABEL_138:
      unsigned int v48 = v14 & 0xFFFFFF7F;
LABEL_139:
      *uint64_t v10 = v48;
      break;
    default:
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v12 = logInstanceID;
        }
        else {
          uint64_t v12 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v51 = WORD1(v12);
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 827\n", buf, 0xCu);
        }
        uint64_t result = 0;
        prevLogInstanceID = v12;
      }
      else
      {
        BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v38)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 827\n", buf, 2u);
          uint64_t result = 0;
        }
      }
      goto LABEL_136;
  }
  return result;
}

uint64_t HDRConfig::ReadAllConfigEntries(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  char v5 = 0;
  for (uint64_t i = (_DWORD *)(a1 + 36); ; i += 22)
  {
    if (!*(i - 6)) {
      goto LABEL_9;
    }
    int v7 = (*(unsigned char *)(i - 7) & 0x20) != 0 ? *i : 1;
    if (v7 != a2) {
      goto LABEL_9;
    }
    if (!HDRConfig::ReadConfigEntry(a1, v4)) {
      break;
    }
    char v5 = 1;
LABEL_9:
    if (++v4 == 173) {
      return v5 & 1;
    }
  }
  char v5 = 0;
  return v5 & 1;
}

uint64_t HDRConfig::InvalidateConfigEntry(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 88 * a2 + 12)) {
    *(_DWORD *)(a1 + 88 * a2 + 8) &= ~0x80u;
  }
  return 1;
}

uint64_t HDRConfig::InvalidateAllConfigEntries(HDRConfig *this)
{
  char v1 = 0;
  uint64_t v2 = -15224;
  do
  {
    if (*(_DWORD *)((char *)this + v2 + 15236))
    {
      *(_DWORD *)((char *)this + v2 + 15232) &= ~0x80u;
      char v1 = 1;
    }
    v2 += 88;
  }
  while (v2);
  return v1 & 1;
}

BOOL HDRConfig::isConfigEntryValueAvailable(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v3 = a1 + 88 * a2;
  if (!*(_DWORD *)(v3 + 12)) {
    return 0;
  }
  char v5 = (_DWORD *)(v3 + 8);
  if (a3) {
    HDRConfig::ReadConfigEntry(a1, a2);
  }
  return (*v5 & 0x80) != 0 || (a3 & 2) == 0 && (*v5 & 0x200) != 0;
}

uint64_t HDRConfig::GetConfigEntryValue(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 88 * a2;
  if (!*(_DWORD *)(v3 + 12)) {
    return 0;
  }
  int v7 = (_DWORD *)(v3 + 8);
  if (a3) {
    HDRConfig::ReadConfigEntry(a1, a2);
  }
  if ((*v7 & 0x80) != 0) {
    return a1 + 88 * a2 + 48;
  }
  if ((a3 & 2) == 0 && (*v7 & 0x200) != 0) {
    return a1 + 88 * a2 + 64;
  }
  if (!enableLogInstance)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 88 * a2 + 24);
      int v12 = 136315650;
      unsigned int v13 = "HDRConfigValue *HDRConfig::GetConfigEntryValue(HDRConfigID, uint32_t)";
      __int16 v14 = 1024;
      *(_DWORD *)uint64_t v15 = 920;
      *(_WORD *)&v15[4] = 2112;
      *(void *)&v15[6] = v11;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54]  %s:%d: ERROR: Neither value nor defaults value is available! Key = \"%@\".\n", (uint8_t *)&v12, 0x1Cu);
    }
    return 0;
  }
  if (logInstanceID) {
    uint64_t v9 = logInstanceID;
  }
  else {
    uint64_t v9 = prevLogInstanceID;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 88 * a2 + 24);
    int v12 = 134218754;
    unsigned int v13 = (const char *)WORD1(v9);
    __int16 v14 = 2080;
    *(void *)uint64_t v15 = "HDRConfigValue *HDRConfig::GetConfigEntryValue(HDRConfigID, uint32_t)";
    *(_WORD *)&v15[8] = 1024;
    *(_DWORD *)&v15[10] = 920;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx  %s:%d: ERROR: Neither value nor defaults value is available! Key = \"%@\".\n", (uint8_t *)&v12, 0x26u);
  }
  uint64_t result = 0;
  prevLogInstanceID = v9;
  return result;
}

uint64_t HDRConfig::LogConfigEntry(uint64_t a1, unsigned int a2, unsigned int a3, int a4, char a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 88 * a2;
  int v7 = *(_DWORD *)(v5 + 12);
  int v6 = (_DWORD *)(v5 + 12);
  if (!v7) {
    return 1;
  }
  int v8 = *(v6 - 1);
  if ((v8 & 0x40) == 0) {
    goto LABEL_3;
  }
  uint64_t v16 = a1 + 88 * a2;
  unsigned int v18 = *(_DWORD *)(v16 + 40);
  uint64_t v17 = (int *)(v16 + 40);
  BOOL v19 = v18 <= a3;
  BOOL v20 = v18 == a3;
  if ((a5 & 2) == 0) {
    BOOL v19 = v20;
  }
  if ((a5 & 4) == 0 && v19)
  {
    if ((v8 & 0x280) == 0) {
      goto LABEL_3;
    }
LABEL_12:
    if (a5)
    {
      if ((v8 & 0x80) != 0)
      {
        switch(*(_DWORD *)(a1 + 88 * a2 + 32))
        {
          case 0:
            snprintf(__str, 0x40uLL, "%s");
            goto LABEL_28;
          case 1:
            snprintf(__str, 0x40uLL, "%d");
            goto LABEL_28;
          case 2:
            snprintf(__str, 0x40uLL, "%u");
            goto LABEL_28;
          case 3:
          case 4:
            snprintf(__str, 0x40uLL, "%f");
            goto LABEL_28;
          default:
            strcpy(__str, "N/A");
            if (enableLogInstance)
            {
              if (logInstanceID) {
                uint64_t v21 = logInstanceID;
              }
              else {
                uint64_t v21 = prevLogInstanceID;
              }
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                uint64_t v54 = WORD1(v21);
                _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 970\n", buf, 0xCu);
              }
              uint64_t v22 = v21;
              int v9 = 0;
              prevLogInstanceID = v22;
            }
            else
            {
              int v9 = 0;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 970\n", buf, 2u);
                int v9 = 0;
              }
            }
            break;
        }
      }
      else
      {
        strcpy(__str, "N/A");
LABEL_28:
        int v9 = 1;
      }
      if ((*((unsigned char *)v6 - 3) & 2) != 0)
      {
        switch(*(_DWORD *)(a1 + 88 * a2 + 32))
        {
          case 0:
            snprintf((char *)buf, 0x40uLL, "%s");
            break;
          case 1:
            snprintf((char *)buf, 0x40uLL, "%d");
            break;
          case 2:
            snprintf((char *)buf, 0x40uLL, "%u");
            break;
          case 3:
          case 4:
            snprintf((char *)buf, 0x40uLL, "%f");
            break;
          default:
            strcpy((char *)buf, "N/A");
            if (enableLogInstance)
            {
              if (logInstanceID) {
                uint64_t v23 = logInstanceID;
              }
              else {
                uint64_t v23 = prevLogInstanceID;
              }
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t v51 = 134217984;
                uint64_t v52 = WORD1(v23);
                _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 997\n", v51, 0xCu);
              }
              uint64_t v24 = v23;
              int v9 = 0;
              prevLogInstanceID = v24;
            }
            else
            {
              int v9 = 0;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v51 = 0;
                _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 997\n", v51, 2u);
                int v9 = 0;
              }
            }
            break;
        }
      }
      else
      {
        strcpy((char *)buf, "N/A");
      }
    }
    else
    {
      int v9 = 1;
    }
    if (*v6 && (*(_WORD *)(v6 - 1) & 0x280) != 0 && HDRConfig::GetConfigEntryValue(a1, a2, 0))
    {
      switch(*(_DWORD *)(a1 + 88 * a2 + 32))
      {
        case 0:
          snprintf((char *)v51, 0x40uLL, "%s");
          break;
        case 1:
          snprintf((char *)v51, 0x40uLL, "%d");
          break;
        case 2:
          snprintf((char *)v51, 0x40uLL, "%u");
          break;
        case 3:
        case 4:
          snprintf((char *)v51, 0x40uLL, "%f");
          break;
        default:
          strcpy((char *)v51, "N/A");
          if (enableLogInstance)
          {
            if (logInstanceID) {
              uint64_t v25 = logInstanceID;
            }
            else {
              uint64_t v25 = prevLogInstanceID;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v49 = 134217984;
              *(void *)uint64_t v50 = WORD1(v25);
              _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 1030\n", v49, 0xCu);
            }
            int v9 = 0;
            prevLogInstanceID = v25;
          }
          else
          {
            int v9 = 0;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v49 = 0;
              _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 1030\n", v49, 2u);
              int v9 = 0;
            }
          }
          break;
      }
    }
    else
    {
      strcpy((char *)v51, "N/A");
    }
    if (a4 != 1)
    {
      if (a5)
      {
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v27 = logInstanceID;
          }
          else {
            uint64_t v27 = prevLogInstanceID;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_133;
          }
          uint64_t v32 = *(void *)(a1 + 88 * a2 + 24);
          *(_DWORD *)uint64_t v49 = 134219010;
          *(void *)uint64_t v50 = WORD1(v27);
          *(_WORD *)&v50[8] = 2112;
          *(void *)&v50[10] = v32;
          *(_WORD *)&v50[18] = 2080;
          *(void *)&v50[20] = v51;
          *(_WORD *)&v50[28] = 2080;
          *(void *)&v50[30] = __str;
          *(_WORD *)&v50[38] = 2080;
          *(void *)&v50[40] = buf;
          float v29 = &_os_log_internal;
          int v30 = " [1.419.54] #%04llx  %30@: %-12s    (value=%s, default=%s)\n";
          uint32_t v31 = 52;
          goto LABEL_132;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v38 = *(void *)(a1 + 88 * a2 + 24);
          *(_DWORD *)uint64_t v49 = 138413058;
          *(void *)uint64_t v50 = v38;
          *(_WORD *)&v50[8] = 2080;
          *(void *)&v50[10] = v51;
          *(_WORD *)&v50[18] = 2080;
          *(void *)&v50[20] = __str;
          *(_WORD *)&v50[28] = 2080;
          *(void *)&v50[30] = buf;
          double v35 = &_os_log_internal;
          char v36 = " [1.419.54]  %30@: %-12s    (value=%s, default=%s)\n";
          uint32_t v37 = 42;
          goto LABEL_136;
        }
      }
      else
      {
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v27 = logInstanceID;
          }
          else {
            uint64_t v27 = prevLogInstanceID;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_133;
          }
LABEL_74:
          uint64_t v28 = *(void *)(a1 + 88 * a2 + 24);
          *(_DWORD *)uint64_t v49 = 134218498;
          *(void *)uint64_t v50 = WORD1(v27);
          *(_WORD *)&v50[8] = 2112;
          *(void *)&v50[10] = v28;
          *(_WORD *)&v50[18] = 2080;
          *(void *)&v50[20] = v51;
          float v29 = &_os_log_internal;
          int v30 = " [1.419.54] #%04llx  %30@: %-12s\n";
          uint32_t v31 = 32;
LABEL_132:
          _os_log_impl(&dword_22224D000, v29, OS_LOG_TYPE_DEFAULT, v30, v49, v31);
LABEL_133:
          prevLogInstanceID = v27;
          goto LABEL_137;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_92;
        }
      }
      goto LABEL_137;
    }
    int v26 = enableLogInstance;
    if (*(unsigned char *)(a1 + 2))
    {
      if ((a5 & 1) == 0) {
        goto LABEL_62;
      }
      goto LABEL_126;
    }
    if ((a5 & 1) == 0)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v33 = logInstanceID;
        }
        else {
          uint64_t v33 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v49 = 134218498;
          *(void *)uint64_t v50 = WORD1(v33);
          *(_WORD *)&v50[8] = 2080;
          *(void *)&v50[10] = "Name";
          *(_WORD *)&v50[18] = 2080;
          *(void *)&v50[20] = "Effective";
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx  %30s %12s\n", v49, 0x20u);
        }
        prevLogInstanceID = v33;
      }
      else
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
LABEL_110:
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_125;
          }
          *(_WORD *)uint64_t v49 = 0;
          BOOL v43 = &_os_log_internal;
          uint64_t v44 = " [1.419.54] --------------------------------------------------------\n";
          goto LABEL_124;
        }
        *(_DWORD *)uint64_t v49 = 136315394;
        *(void *)uint64_t v50 = "Name";
        *(_WORD *)&v50[8] = 2080;
        *(void *)&v50[10] = "Effective";
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54]  %30s %12s\n", v49, 0x16u);
      }
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v40 = logInstanceID;
        }
        else {
          uint64_t v40 = prevLogInstanceID;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_121;
        }
        *(_DWORD *)uint64_t v49 = 134217984;
        *(void *)uint64_t v50 = WORD1(v40);
        uint64_t v41 = &_os_log_internal;
        uint64_t v42 = " [1.419.54] #%04llx --------------------------------------------------------\n";
LABEL_120:
        _os_log_impl(&dword_22224D000, v41, OS_LOG_TYPE_DEFAULT, v42, v49, 0xCu);
LABEL_121:
        prevLogInstanceID = v40;
        goto LABEL_125;
      }
      goto LABEL_110;
    }
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v39 = logInstanceID;
      }
      else {
        uint64_t v39 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v49 = 134219266;
        *(void *)uint64_t v50 = WORD1(v39);
        *(_WORD *)&v50[8] = 2080;
        *(void *)&v50[10] = "Level";
        *(_WORD *)&v50[18] = 2080;
        *(void *)&v50[20] = "Name";
        *(_WORD *)&v50[28] = 2080;
        *(void *)&v50[30] = "Effective";
        *(_WORD *)&v50[38] = 2080;
        *(void *)&v50[40] = "Value";
        *(_WORD *)&v50[48] = 2080;
        *(void *)&v50[50] = "Default";
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx  %8s %30s %12s %12s %12s\n", v49, 0x3Eu);
      }
      prevLogInstanceID = v39;
    }
    else
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
LABEL_122:
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_125;
        }
        *(_WORD *)uint64_t v49 = 0;
        BOOL v43 = &_os_log_internal;
        uint64_t v44 = " [1.419.54] -----------------------------------------------------------------------------------\n";
LABEL_124:
        _os_log_impl(&dword_22224D000, v43, OS_LOG_TYPE_DEFAULT, v44, v49, 2u);
LABEL_125:
        *(unsigned char *)(a1 + 2) = 1;
        int v26 = enableLogInstance;
        if ((a5 & 1) == 0)
        {
LABEL_62:
          if (v26)
          {
            if (logInstanceID) {
              uint64_t v27 = logInstanceID;
            }
            else {
              uint64_t v27 = prevLogInstanceID;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_133;
            }
            goto LABEL_74;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
LABEL_92:
            uint64_t v34 = *(void *)(a1 + 88 * a2 + 24);
            *(_DWORD *)uint64_t v49 = 138412546;
            *(void *)uint64_t v50 = v34;
            *(_WORD *)&v50[8] = 2080;
            *(void *)&v50[10] = v51;
            double v35 = &_os_log_internal;
            char v36 = " [1.419.54]  %30@: %-12s\n";
            uint32_t v37 = 22;
            goto LABEL_136;
          }
LABEL_137:
          ++*(_DWORD *)(a1 + 4);
          return v9 != 0;
        }
LABEL_126:
        if (v26)
        {
          if (logInstanceID) {
            uint64_t v27 = logInstanceID;
          }
          else {
            uint64_t v27 = prevLogInstanceID;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_133;
          }
          int v45 = *v17;
          uint64_t v46 = *(void *)(a1 + 88 * a2 + 24);
          *(_DWORD *)uint64_t v49 = 134219266;
          *(void *)uint64_t v50 = WORD1(v27);
          *(_WORD *)&v50[8] = 1024;
          *(_DWORD *)&v50[10] = v45;
          *(_WORD *)&v50[14] = 2112;
          *(void *)&v50[16] = v46;
          *(_WORD *)&v50[24] = 2080;
          *(void *)&v50[26] = v51;
          *(_WORD *)&v50[34] = 2080;
          *(void *)&v50[36] = __str;
          *(_WORD *)&v50[44] = 2080;
          *(void *)&v50[46] = buf;
          float v29 = &_os_log_internal;
          int v30 = " [1.419.54] #%04llx  %8d %30@ %12s %12s %12s\n";
          uint32_t v31 = 58;
          goto LABEL_132;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_137;
        }
        int v47 = *v17;
        uint64_t v48 = *(void *)(a1 + 88 * a2 + 24);
        *(_DWORD *)uint64_t v49 = 67110146;
        *(_DWORD *)uint64_t v50 = v47;
        *(_WORD *)&v50[4] = 2112;
        *(void *)&v50[6] = v48;
        *(_WORD *)&v50[14] = 2080;
        *(void *)&v50[16] = v51;
        *(_WORD *)&v50[24] = 2080;
        *(void *)&v50[26] = __str;
        *(_WORD *)&v50[34] = 2080;
        *(void *)&v50[36] = buf;
        double v35 = &_os_log_internal;
        char v36 = " [1.419.54]  %8d %30@ %12s %12s %12s\n";
        uint32_t v37 = 48;
LABEL_136:
        _os_log_impl(&dword_22224D000, v35, OS_LOG_TYPE_DEFAULT, v36, v49, v37);
        goto LABEL_137;
      }
      *(_DWORD *)uint64_t v49 = 136316162;
      *(void *)uint64_t v50 = "Level";
      *(_WORD *)&v50[8] = 2080;
      *(void *)&v50[10] = "Name";
      *(_WORD *)&v50[18] = 2080;
      *(void *)&v50[20] = "Effective";
      *(_WORD *)&v50[28] = 2080;
      *(void *)&v50[30] = "Value";
      *(_WORD *)&v50[38] = 2080;
      *(void *)&v50[40] = "Default";
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54]  %8s %30s %12s %12s %12s\n", v49, 0x34u);
    }
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v40 = logInstanceID;
      }
      else {
        uint64_t v40 = prevLogInstanceID;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_121;
      }
      *(_DWORD *)uint64_t v49 = 134217984;
      *(void *)uint64_t v50 = WORD1(v40);
      uint64_t v41 = &_os_log_internal;
      uint64_t v42 = " [1.419.54] #%04llx -----------------------------------------------------------------------------------\n";
      goto LABEL_120;
    }
    goto LABEL_122;
  }
  if (v19) {
    goto LABEL_12;
  }
LABEL_3:
  int v9 = 1;
  return v9 != 0;
}

BOOL HDRConfig::LogAllConfigEntries(uint64_t a1, unsigned int a2, int a3, char a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  if ((a4 & 2) != 0)
  {
    unint64_t v12 = 0;
    BOOL v11 = 0;
    uint64_t v13 = 12;
    do
    {
      if (*(_DWORD *)(a1 + v13) && !HDRConfig::LogConfigEntry(a1, v12, a2, a3, a4)) {
        break;
      }
      BOOL v11 = v12 > 0xAB;
      v13 += 88;
      ++v12;
    }
    while (v12 != 173);
  }
  else
  {
    unsigned int v8 = 0;
    while (2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 12;
      do
      {
        if (*(_DWORD *)(a1 + v10) && !HDRConfig::LogConfigEntry(a1, v9, v8, a3, a4))
        {
          BOOL v11 = 0;
          goto LABEL_15;
        }
        ++v9;
        v10 += 88;
      }
      while (v9 != 173);
      if (++v8 <= a2) {
        continue;
      }
      break;
    }
    BOOL v11 = 1;
  }
LABEL_15:
  if (!*(_DWORD *)(a1 + 4))
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v14 = logInstanceID;
      }
      else {
        uint64_t v14 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 134217984;
        uint64_t v22 = WORD1(v14);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx      No entries to dump!\n", (uint8_t *)&v21, 0xCu);
      }
      prevLogInstanceID = v14;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54]      No entries to dump!\n", (uint8_t *)&v21, 2u);
    }
  }
  if (*(unsigned char *)(a1 + 2))
  {
    if (a4)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v15 = logInstanceID;
        }
        else {
          uint64_t v15 = prevLogInstanceID;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_40;
        }
        int v21 = 134217984;
        uint64_t v22 = WORD1(v15);
        uint64_t v16 = &_os_log_internal;
        uint64_t v17 = " [1.419.54] #%04llx -----------------------------------------------------------------------------------\n";
        goto LABEL_39;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v11;
      }
      LOWORD(v21) = 0;
      unsigned int v18 = &_os_log_internal;
      BOOL v19 = " [1.419.54] -----------------------------------------------------------------------------------\n";
    }
    else
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v15 = logInstanceID;
        }
        else {
          uint64_t v15 = prevLogInstanceID;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_40;
        }
        int v21 = 134217984;
        uint64_t v22 = WORD1(v15);
        uint64_t v16 = &_os_log_internal;
        uint64_t v17 = " [1.419.54] #%04llx --------------------------------------------------------\n";
LABEL_39:
        _os_log_impl(&dword_22224D000, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v21, 0xCu);
LABEL_40:
        prevLogInstanceID = v15;
        return v11;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return v11;
      }
      LOWORD(v21) = 0;
      unsigned int v18 = &_os_log_internal;
      BOOL v19 = " [1.419.54] --------------------------------------------------------\n";
    }
    _os_log_impl(&dword_22224D000, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v21, 2u);
  }
  return v11;
}

void DumpAllConfigs(HDRConfig *a1)
{
  int v1 = (int)a1;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t Config = GetConfig(a1);
  if (!Config) {
    return;
  }
  uint64_t v3 = GetConfig((HDRConfig *)Config);
  ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v3, 3u, 0);
  if (!*(unsigned char *)ConfigEntryValue) {
    return;
  }
  uint64_t v5 = (HDRConfig *)GetConfig(ConfigEntryValue);
  if (v5)
  {
    int v6 = GetConfig(v5);
    uint64_t v5 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v6, 0xAAu, 0);
    unsigned int v7 = *(_DWORD *)v5;
  }
  else
  {
    unsigned int v7 = 0;
  }
  unsigned int v8 = (HDRConfig *)GetConfig(v5);
  if (v8)
  {
    uint64_t v9 = GetConfig(v8);
    unsigned int v8 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v9, 0xABu, 0);
    int v10 = *(_DWORD *)v8;
  }
  else
  {
    int v10 = 0;
  }
  BOOL v11 = GetConfig(v8);
  if (v11)
  {
    unint64_t v12 = GetConfig((HDRConfig *)v11);
    int v13 = *(_DWORD *)HDRConfig::GetConfigEntryValue((uint64_t)v12, 0xA9u, 0);
  }
  else
  {
    int v13 = 0;
  }
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v14 = logInstanceID;
    }
    else {
      uint64_t v14 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 134217984;
      *(void *)uint64_t v23 = WORD1(v14);
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx \n", (uint8_t *)&v22, 0xCu);
    }
    prevLogInstanceID = v14;
  }
  else
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    LOWORD(v22) = 0;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] \n", (uint8_t *)&v22, 2u);
  }
  if (!enableLogInstance)
  {
LABEL_32:
    BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      unsigned int v18 = "unknown";
      int v22 = 67110146;
      *(_DWORD *)uint64_t v23 = v1;
      if (!v10) {
        unsigned int v18 = "list";
      }
      *(_WORD *)&v23[4] = 1024;
      *(_WORD *)uint64_t v24 = 2080;
      *(_DWORD *)&v23[6] = v10;
      if (v10 == 1) {
        unsigned int v18 = "table";
      }
      *(void *)&v24[2] = v18;
      __int16 v25 = 1024;
      *(_DWORD *)int v26 = v7;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = v13;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] HDRConfig: Frame #%d: configDumpStyle = %d (%s), configDumpLevel = %d, configDumpFlag = %d\n", (uint8_t *)&v22, 0x24u);
    }
    goto LABEL_38;
  }
  if (logInstanceID) {
    uint64_t v15 = logInstanceID;
  }
  else {
    uint64_t v15 = prevLogInstanceID;
  }
  BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    int v22 = 134219266;
    *(void *)uint64_t v23 = WORD1(v15);
    uint64_t v17 = "list";
    *(_WORD *)&v23[8] = 1024;
    *(_DWORD *)uint64_t v24 = v1;
    if (v10) {
      uint64_t v17 = "unknown";
    }
    *(_WORD *)&v24[4] = 1024;
    if (v10 == 1) {
      uint64_t v17 = "table";
    }
    *(_DWORD *)&v24[6] = v10;
    __int16 v25 = 2080;
    *(void *)int v26 = v17;
    *(_WORD *)&v26[8] = 1024;
    unsigned int v27 = v7;
    __int16 v28 = 1024;
    int v29 = v13;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx HDRConfig: Frame #%d: configDumpStyle = %d (%s), configDumpLevel = %d, configDumpFlag = %d\n", (uint8_t *)&v22, 0x2Eu);
  }
  prevLogInstanceID = v15;
LABEL_38:
  BOOL v19 = GetConfig((HDRConfig *)v16);
  if (v19)
  {
    BOOL v20 = GetConfig((HDRConfig *)v19);
    HDRConfig::LogAllConfigEntries((uint64_t)v20, v7, v10, v13);
  }
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v21 = logInstanceID;
    }
    else {
      uint64_t v21 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 134217984;
      *(void *)uint64_t v23 = WORD1(v21);
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx \n", (uint8_t *)&v22, 0xCu);
    }
    prevLogInstanceID = v21;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22) = 0;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] \n", (uint8_t *)&v22, 2u);
  }
}

void UpdateConfigFromDefaultsWrite(HDRConfig *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t Config = GetConfig(a1);
  if (!Config)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v3 = logInstanceID;
      }
      else {
        uint64_t v3 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 134217984;
        uint64_t v5 = WORD1(v3);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"config\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 1142\n", (uint8_t *)&v4, 0xCu);
      }
      prevLogInstanceID = v3;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v4) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"config\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Config/HDRConfig.cpp\" at line 1142\n", (uint8_t *)&v4, 2u);
    }
  }
  DumpAllConfigs(a1);
  *(unsigned char *)uint64_t Config = 1;
}

void sub_22228F4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float getBWResult(float a1, float a2, float a3, float a4, float a5)
{
  float v9 = powf(a1, 3.0);
  float v10 = fmaxf((float)(v9 - a3) / (float)(a4 - (float)(a5 * v9)), 0.0);
  return powf(v10, 1.0 / a2);
}

uint64_t getScalingFactorByTable(float *a1, int a2, float a3, float a4)
{
  if (a2 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    uint64_t v4 = 0;
    while (a1[v4] <= a4)
    {
      if (a2 == ++v4)
      {
        LODWORD(v4) = a2;
        break;
      }
    }
  }
  if (v4 == a2) {
    return (a2 - 1);
  }
  else {
    return v4;
  }
}

float getToneCurveParameters(float a1, float a2, float a3, float a4, float a5, float *a6, float *a7, float *a8, float *a9, float a10, float a11)
{
  float v16 = a3 - a1;
  float v17 = sqrtf((float)(a5 - a4) / v16);
  if (v17 > 1.0) {
    float v17 = 1.0;
  }
  float v18 = (float)(sqrtf(1.0 / v17) + a11) / 0.33333;
  *a6 = v18;
  float v19 = (float)((float)((float)((float)(a2 - a1) + (float)(a2 - a1)) / v16) * a2) * (float)(1.0 - v17);
  if ((float)(a1 - v19) >= a4) {
    float v20 = a1 - v19;
  }
  else {
    float v20 = a4;
  }
  if ((float)(a3 - v19) >= a5) {
    float v21 = a5;
  }
  else {
    float v21 = a3 - v19;
  }
  float v22 = (float)(a2 - v19) + a10;
  float v23 = powf(a1, v18);
  float v24 = powf(a2, v18);
  float v25 = powf(a3, v18);
  float v26 = powf(v20, 3.0);
  float v27 = powf(v22, 3.0);
  float v28 = powf(v21, 3.0);
  float v29 = (float)((float)((float)(v24 * v27) * (float)(v25 - v23)) + (float)((float)(v25 * v28) * (float)(v23 - v24)))
      + (float)((float)(v23 * v26) * (float)(v24 - v25));
  *a7 = (float)((float)((float)(v27 * (float)((float)(v23 * v25) * (float)(v28 - v26)))
                      + (float)((float)((float)(v24 * v25) * (float)(v27 - v28)) * v26))
              + (float)((float)((float)(v23 * v24) * (float)(v26 - v27)) * v28))
      / v29;
  *a8 = (float)((float)((float)(v27 * (float)-(float)((float)(v25 * v28) - (float)(v23 * v26)))
                      + (float)((float)-(float)((float)(v24 * v27) - (float)(v25 * v28)) * v26))
              + (float)((float)-(float)((float)(v23 * v26) - (float)(v24 * v27)) * v28))
      / v29;
  float result = (float)((float)((float)((float)(v25 - v24) * v26) - (float)((float)(v25 - v23) * v27))
                 + (float)((float)(v24 - v23) * v28))
         / v29;
  *a9 = result;
  return result;
}

void generateHeadroomCurve(uint64_t a1, int a2, uint64_t a3, float *a4)
{
  if (a2 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = a1 + v7;
    do
    {
      float v9 = *a4;
      float v10 = a4[1];
      float v11 = a4[2];
      float v12 = a4[3];
      float v13 = powf(*(float *)(a1 + v6), 3.0);
      float v14 = powf(fmaxf((float)(v13 - a4[5]) / (float)(a4[6] - (float)(a4[7] * v13)), 0.0), 1.0 / a4[4]);
      *(float *)(a1 + v6) = v14;
      float v15 = 1.0;
      if (v14 != 0.0) {
        float v15 = powf(fmaxf((float)(v13 - v10) / (float)(v11 - (float)(v12 * v13)), 0.0), 1.0 / v9) / v14;
      }
      *(float *)(v8 + v6) = v15;
      v6 += 4;
    }
    while (v7 != v6);
  }
}

float check1DLut(int a1, float *a2, float a3)
{
  if (a1 < 1) {
    return a2[1];
  }
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  while (*v4 <= a3)
  {
    ++v3;
    v4 += 2;
    if (a1 == v3)
    {
      LODWORD(v3) = a1;
      break;
    }
  }
  if (!v3) {
    return a2[1];
  }
  if (v3 == a1) {
    return a2[2 * a1 - 1];
  }
  float v6 = (float)(a3 - a2[2 * v3 - 2]) / (float)(a2[(2 * v3)] - a2[2 * v3 - 2]);
  return (float)(v6 * a2[(2 * v3) | 1]) + (float)((float)(1.0 - v6) * a2[2 * (int)v3 - 1]);
}

float adjustMidTone(float a1, float a2, const float *a3, const float *a4, int a5, int a6, const float *a7)
{
  int v7 = a6;
  int v8 = a5;
  if (a5 > 0)
  {
    uint64_t v9 = 0;
    while (a3[v9] < a1)
    {
      if (a5 == ++v9) {
        goto LABEL_7;
      }
    }
    int v8 = v9;
  }
LABEL_7:
  if (a6 <= 0)
  {
LABEL_11:
    if (!v8)
    {
LABEL_17:
      if (!v7) {
        return *a7;
      }
      if (v7 == a6)
      {
        int v11 = (a6 - 1) * a5;
        return a7[v11];
      }
      int v19 = (int)(float)a5;
      uint64_t v20 = v7 - 1;
      float v21 = a7[v7 * v19];
      float v22 = a7[(int)v20 * v19];
      float v23 = a4[v20];
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v10 = 0;
    while (a4[v10] < a2)
    {
      if (a6 == ++v10) {
        goto LABEL_11;
      }
    }
    int v7 = v10;
    if (!v8) {
      goto LABEL_17;
    }
  }
  if (v8 != a5)
  {
    if (v7)
    {
      int v12 = (int)(float)a5;
      uint64_t v13 = v8 - 1;
      float v14 = a1 - a3[v13];
      float v15 = a3[v8] - a1;
      float v16 = v14 + v15;
      if (v7 != a6)
      {
        uint64_t v33 = v7 - 1;
        float v34 = (float)((float)(v14 * a7[(int)v33 * v12 + v8]) + (float)(a7[(int)v33 * v12 + (int)v13] * v15)) / v16;
        float v35 = (float)((float)(v14 * a7[v7 * v12 + v8]) + (float)(a7[v7 * v12 + (int)v13] * v15)) / v16;
        float v36 = a4[v7] - a2;
        float v37 = a2 - a4[v33];
        float v31 = (float)(v35 * v37) + (float)(v34 * v36);
        float v32 = v36 + v37;
        return v31 / v32;
      }
      float v17 = (float)(v14 * a7[v8 + (a6 - 1) * v12]) + (float)(a7[(int)v13 + (a6 - 1) * v12] * v15);
    }
    else
    {
      uint64_t v24 = 4 * v8 - 4;
      float v25 = a1 - *(const float *)((char *)a3 + v24);
      float v26 = a3[v8] - a1;
      float v17 = (float)(a7[v8] * v25) + (float)(*(const float *)((char *)a7 + v24) * v26);
      float v16 = v25 + v26;
    }
    return v17 / v16;
  }
  if (!v7)
  {
    int v11 = a5 - 1;
    return a7[v11];
  }
  if (v7 == a6)
  {
    int v11 = a5 + (a6 - 1) * a5 - 1;
    return a7[v11];
  }
  int v27 = (int)(float)a5;
  uint64_t v28 = v7 - 1;
  float v21 = a7[a5 - 1 + v7 * v27];
  float v22 = a7[a5 - 1 + (int)v28 * v27];
  float v23 = a4[v28];
LABEL_30:
  float v29 = a2 - v23;
  float v30 = a4[v7] - a2;
  float v31 = (float)(v21 * v29) + (float)(v22 * v30);
  float v32 = v29 + v30;
  return v31 / v32;
}

float adjustMidToneLCD(float a1, float a2)
{
  return (float)((float)((float)((float)((float)(a2 * -0.04464) + -0.04914) + (float)(a1 * -0.1213))
                       + (float)((float)(a2 * 0.05207) * a2))
               + (float)((float)(a2 * 0.1136) * a1))
       + (float)((float)(a1 * 0.5078) * a1);
}

float adjustSaturation(float a1)
{
  return 0.95;
}

float L2PqNorm(float a1)
{
  float v1 = powf(a1 / 10000.0, 0.1593);
  float v2 = (v1 * 18.8515625 + 0.8359375) / (v1 * 18.6875 + 1.0);
  float v3 = powf(v2, 78.844);
  float v4 = 1.0;
  if (v3 <= 1.0) {
    float v4 = v3;
  }
  BOOL v5 = v3 < 0.0;
  float result = 0.0;
  if (!v5) {
    return v4;
  }
  return result;
}

float calculateHeadroomForInternalCapturesInternalOrRefDisplay(uint64_t a1, float *a2, int a3, void *a4, float a5)
{
  uint64_t v9 = a4;
  uint64_t Config = (HDRConfig *)GetConfig(v9);
  if (Config)
  {
    int v11 = GetConfig(Config);
    uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v11, 0x71u, 0);
    if (*(_DWORD *)Config == 1)
    {
      uint64_t Config = (HDRConfig *)GetConfig(Config);
      if (Config)
      {
        int v12 = GetConfig(Config);
        uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v12, 0x70u, 0);
        float v13 = *(float *)Config;
      }
      else
      {
        float v13 = 0.0;
      }
      if (v13 <= a5 && v13 >= 1.0) {
        a5 = v13;
      }
    }
  }
  if (*(unsigned char *)(a1 + 492)) {
    uint64_t v15 = 3;
  }
  else {
    uint64_t v15 = 2;
  }
  ConfigEntryValue = (HDRConfig *)GetConfig(Config);
  if (ConfigEntryValue)
  {
    ConfigEntryValue = (HDRConfig *)GetConfig(ConfigEntryValue);
    if (*((_DWORD *)ConfigEntryValue + 2049))
    {
      if ((*((unsigned char *)ConfigEntryValue + 0x2000) & 0x80) != 0)
      {
        ConfigEntryValue = (HDRConfig *)GetConfig(ConfigEntryValue);
        if (ConfigEntryValue)
        {
          float v17 = GetConfig(ConfigEntryValue);
          ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v17, 0x5Du, 0);
          uint64_t v15 = *(unsigned int *)ConfigEntryValue;
        }
        else
        {
          uint64_t v15 = 0;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 492))
  {
    float v18 = GetConfig(ConfigEntryValue);
    if (v18)
    {
      int v19 = GetConfig((HDRConfig *)v18);
      uint64_t v20 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v19, 0x1Fu, 0);
      if (*(unsigned char *)v20)
      {
        if (a3 == 4)
        {
          float v21 = a2[36];
          float v22 = a2[34];
        }
        else
        {
          float v31 = GetConfig(v20);
          float v21 = 0.75;
          float v22 = 0.4;
          if (v31)
          {
            float v32 = GetConfig((HDRConfig *)v31);
            if (*(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v32, 0x1Du, 0))
            {
              if ([(HDRConfig *)v9 isDataValid])
              {
                [(HDRConfig *)v9 maxVal];
                float v21 = v33;
                [(HDRConfig *)v9 avgVal];
                float v22 = v34;
              }
            }
          }
        }
        if (*(float *)&overrideCmaxNits >= 0.0)
        {
          float v35 = powf(*(float *)&overrideCmaxNits * 0.0001, 0.1593);
          float v21 = powf((float)((float)(v35 * 18.852) + 0.83594) / (float)((float)(v35 * 18.688) + 1.0), 78.844);
        }
        float v36 = a5 * 100.0;
        if (*(float *)&overrideCmidNits >= 0.0)
        {
          float v37 = powf(*(float *)&overrideCmidNits * 0.0001, 0.1593);
          float v22 = powf((float)((float)(v37 * 18.852) + 0.83594) / (float)((float)(v37 * 18.688) + 1.0), 78.844);
        }
        calculateContentAdaptiveHeadroom((HDRConfig *)v15, v22, v21, a2[6], v36, 100.0);
LABEL_50:
        a5 = v38;
      }
    }
  }
  else
  {
    float v23 = (HDRConfig *)GetConfig(ConfigEntryValue);
    if (v23)
    {
      uint64_t v24 = GetConfig(v23);
      float v23 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v24, 0x7Cu, 0);
      float v25 = *(float *)v23;
    }
    else
    {
      float v25 = 0.0;
    }
    float v26 = GetConfig(v23);
    if (v26)
    {
      int v27 = GetConfig((HDRConfig *)v26);
      uint64_t v28 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v27, 0x1Fu, 0);
      if (*(unsigned char *)v28)
      {
        if (a3 == 4)
        {
          float v29 = a2[36];
          float v30 = a2[34];
        }
        else
        {
          uint64_t v39 = GetConfig(v28);
          float v29 = 0.75;
          float v30 = 0.4;
          if (v39)
          {
            uint64_t v40 = GetConfig((HDRConfig *)v39);
            if (*(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v40, 0x1Du, 0))
            {
              if ([(HDRConfig *)v9 isDataValid])
              {
                [(HDRConfig *)v9 maxVal];
                float v29 = v41;
                [(HDRConfig *)v9 avgVal];
                float v30 = v42;
              }
            }
          }
        }
        if (*(float *)&overrideCmaxNits >= 0.0)
        {
          float v43 = powf(*(float *)&overrideCmaxNits * 0.0001, 0.1593);
          float v29 = powf((float)((float)(v43 * 18.852) + 0.83594) / (float)((float)(v43 * 18.688) + 1.0), 78.844);
        }
        float v44 = a5 * v25;
        if (*(float *)&overrideCmidNits >= 0.0)
        {
          float v45 = powf(*(float *)&overrideCmidNits * 0.0001, 0.1593);
          float v30 = powf((float)((float)(v45 * 18.852) + 0.83594) / (float)((float)(v45 * 18.688) + 1.0), 78.844);
        }
        calculateContentAdaptiveHeadroom((HDRConfig *)v15, v30, v29, a2[6], v44, v25);
        goto LABEL_50;
      }
    }
  }

  return a5;
}

void sub_22228FFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void adjustL2TrimToAvoidOverflow(float a1, float a2, float a3, float a4, float a5, HDRConfig *a6, float *a7, float *a8)
{
  *(float *)a6 = a2;
  *a7 = a3;
  *a8 = a4;
  if (a1 < a5 && a5 > 0.41928)
  {
    float v16 = (float)(a1 + -0.41928) / (float)(a5 + -0.41928);
    if (v16 <= 1.0) {
      float v17 = (float)(a1 + -0.41928) / (float)(a5 + -0.41928);
    }
    else {
      float v17 = 1.0;
    }
    float v18 = 0.0;
    if (v16 >= 0.0) {
      float v19 = v17;
    }
    else {
      float v19 = 0.0;
    }
    uint64_t Config = GetConfig(a6);
    if (Config)
    {
      float v21 = GetConfig((HDRConfig *)Config);
      float v18 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v21, 0x61u, 0);
    }
    float v22 = powf(a3 + (float)(a5 * a2), a4) - a5;
    if (v22 > 0.0) {
      *(float *)a6 = (float)(powf((float)(v22 * (float)(v19 + (float)((float)(1.0 - v19) * v18))) + a1, 1.0 / *a8) - *a7)
    }
                   / a1;
  }
}

uint64_t interpolate(int a1, int a2, int a3, uint64_t a4, int a5)
{
  if (a3 != a2) {
    return (int)(float)((float)(int)a4
  }
                                    + (float)((float)(a5 - a4) * (float)((float)(a1 - a2) / (float)(a3 - a2))));
  return a4;
}

uint64_t findL2MinTargetInPQ12Bit(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = 3696;
  do
  {
    if (*(_WORD *)(a1 + v2))
    {
      if ((int)result >= *(unsigned __int16 *)(a1 + v2 + 2)) {
        uint64_t result = *(unsigned __int16 *)(a1 + v2 + 2);
      }
      else {
        uint64_t result = result;
      }
    }
    v2 += 16;
  }
  while (v2 != 128);
  return result;
}

uint64_t createTrimSet(uint64_t result, uint64_t a2, int *a3, float a4)
{
  uint64_t v4 = 0;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 136);
  int v6 = 3696;
  do
  {
    if (*(_WORD *)(a2 + v4 + 164) && v6 >= *(unsigned __int16 *)(a2 + v4 + 166)) {
      int v6 = *(unsigned __int16 *)(a2 + v4 + 166);
    }
    v4 += 16;
  }
  while (v4 != 128);
  uint64_t v7 = 0;
  __int16 v8 = 0;
  LOWORD(v9) = 0;
  if (v6 >= v5) {
    int v6 = *(unsigned __int16 *)(a2 + 136);
  }
  int v10 = vcvts_n_s32_f32(a4, 0xCuLL);
  *a3 = v6;
  if (v6 <= v10) {
    int v6 = v10;
  }
  unsigned __int16 v11 = 3696;
  if (v10 <= 3696) {
    unsigned int v12 = v6;
  }
  else {
    unsigned int v12 = 3696;
  }
  uint16x4_t v13 = (uint16x4_t)0x80008000800;
  unsigned __int16 v14 = 62;
  unsigned __int16 v15 = 2048;
  LOWORD(v16) = 2048;
  uint16x4_t v17 = (uint16x4_t)0x80008000800;
  do
  {
    if (*(_WORD *)(a2 + v7 + 164))
    {
      unsigned int v18 = *(unsigned __int16 *)(a2 + v7 + 166);
      if (v12 >= v18)
      {
        if (v18 > v14)
        {
          uint16x4_t v17 = *(uint16x4_t *)(a2 + v7 + 168);
          LOWORD(v16) = *(_WORD *)(a2 + v7 + 176);
          LOWORD(v9) = *(_WORD *)(a2 + v7 + 178);
          unsigned __int16 v14 = *(_WORD *)(a2 + v7 + 166);
        }
      }
      else if (v18 < v11)
      {
        uint16x4_t v13 = *(uint16x4_t *)(a2 + v7 + 168);
        unsigned __int16 v15 = *(_WORD *)(a2 + v7 + 176);
        __int16 v8 = *(_WORD *)(a2 + v7 + 178);
        unsigned __int16 v11 = *(_WORD *)(a2 + v7 + 166);
      }
    }
    v7 += 16;
  }
  while (v7 != 128);
  unsigned int v19 = (float)((float)(int)v5 * 0.25);
  if (v5 <= v12)
  {
    if (v19 > (float)((float)v14 * 0.25))
    {
      LOWORD(v9) = 0;
      uint16x4_t v17 = (uint16x4_t)0x80008000800;
      LOWORD(v16) = 2048;
      unsigned __int16 v14 = v5;
    }
  }
  else if (v19 < (float)((float)v11 * 0.25))
  {
    __int16 v8 = 0;
    uint16x4_t v13 = (uint16x4_t)0x80008000800;
    unsigned __int16 v15 = 2048;
    unsigned __int16 v11 = v5;
  }
  *(_WORD *)uint64_t result = 1;
  *(_WORD *)(result + 2) = v12;
  if (v14 != v11)
  {
    float v20 = (float)(int)(v12 - v14) / (float)(v11 - v14);
    uint16x4_t v17 = (uint16x4_t)vmovn_s32(vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_u32(vmovl_u16(v17)), vcvtq_f32_s32((int32x4_t)vsubl_u16(v13, v17)), v20)));
    int v16 = (int)(float)((float)(unsigned __int16)v16 + (float)((float)(v15 - (unsigned __int16)v16) * v20));
    int v9 = (int)(float)((float)(__int16)v9 + (float)((float)(v8 - (__int16)v9) * v20));
  }
  *(uint16x4_t *)(result + 4) = v17;
  *(_WORD *)(result + 12) = v16;
  *(_WORD *)(result + 14) = v9;
  return result;
}

const char *getFullRangeFlag(int a1)
{
  float v1 = "N/A";
  if (a1 == 2) {
    float v1 = "1";
  }
  if (a1) {
    return v1;
  }
  else {
    return "0";
  }
}

void *getRGB2YMatrix(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 60);
  uint64_t v2 = &RGB2020toHLGY_coeff;
  if (v1 == 12) {
    uint64_t v2 = &RGBP3toHLGY_coeff;
  }
  if (v1 == 1) {
    return &RGB709toHLGY_coeff;
  }
  else {
    return v2;
  }
}

long long *getLMStoRGBMatrixForColorPrimary(uint64_t a1)
{
  int v1 = &LMStoRGB_coeff_2020;
  int v2 = *(_DWORD *)(a1 + 60);
  if (v2 != 9) {
    int v1 = (uint64_t *)&LMStoRGB_coeff_P3;
  }
  if (v2 == 1) {
    return &LMStoRGB_coeff_709;
  }
  else {
    return (long long *)v1;
  }
}

long long *getLMStoRGBMatrixForUITargetColorPrimary(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1 == *MEMORY[0x263F03F08]) {
    return &LMStoRGB_coeff_709;
  }
  uint64_t result = &LMStoRGB_coeff_P3;
  if (v1 != *MEMORY[0x263F03F20] && v1 == *MEMORY[0x263F03F00]) {
    return (long long *)&LMStoRGB_coeff_2020;
  }
  return result;
}

uint64_t *getRGBtoLMSMatrixForUITargetColorPrimary(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1 == *MEMORY[0x263F03F08]) {
    return &R709_Rgb2LMS;
  }
  uint64_t result = &P3_Rgb2LMS;
  if (v1 != *MEMORY[0x263F03F20] && v1 == *MEMORY[0x263F03F00]) {
    return (uint64_t *)&R2020_Rgb2LMS;
  }
  return result;
}

uint64_t getUITargetColorPrimary(uint64_t a1)
{
  if (*MEMORY[0x263F03F08] == a1) {
    return 1;
  }
  uint64_t result = 12;
  if (*MEMORY[0x263F03F20] != a1)
  {
    if (*MEMORY[0x263F03F00] == a1) {
      return 9;
    }
    else {
      return 12;
    }
  }
  return result;
}

uint64_t getDefaultRGBtoYUVMatrixCoeffs(uint64_t a1, int a2)
{
  if (*MEMORY[0x263F03F08] == a1) {
    return 1;
  }
  if (*MEMORY[0x263F03F20] == a1)
  {
    if (a2) {
      return 12;
    }
    else {
      return 1;
    }
  }
  else if (*MEMORY[0x263F03F00] == a1)
  {
    return 9;
  }
  else
  {
    return 1;
  }
}

void *getRGBtoYUVMatrixForUITargetColorPrimary(uint64_t a1, int a2)
{
  int BitDepthFromSurfaceFormat = getBitDepthFromSurfaceFormat(*(_DWORD *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *MEMORY[0x263F03F08];
  if (BitDepthFromSurfaceFormat == 10)
  {
    uint64_t result = &R709_Rgb2YuvNarrow_10bit;
    if (v5 == v6) {
      return result;
    }
    if (v5 != *MEMORY[0x263F03F20])
    {
      uint64_t v8 = *MEMORY[0x263F03F00];
      int v9 = &R2020_Rgb2YuvNarrow_10bit;
      goto LABEL_8;
    }
    int v10 = &P3_Rgb2YuvNarrow_10bit;
  }
  else
  {
    uint64_t result = &R709_Rgb2YuvNarrow;
    if (v5 == v6) {
      return result;
    }
    if (v5 != *MEMORY[0x263F03F20])
    {
      uint64_t v8 = *MEMORY[0x263F03F00];
      int v9 = &R2020_Rgb2YuvNarrow;
LABEL_8:
      if (v5 == v8) {
        return v9;
      }
      return result;
    }
    int v10 = &P3_Rgb2YuvNarrow;
  }
  if (a2) {
    return v10;
  }
  return result;
}

long long *getRGBtoRGBMatrixForUITargetColorPrimary(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 60);
  if (v2 == 12)
  {
    uint64_t v5 = *(void *)(a2 + 88);
    if (v5 != *MEMORY[0x263F03F20])
    {
      if (v5 != *MEMORY[0x263F03F08])
      {
        if (v5 == *MEMORY[0x263F03F00]) {
          return (long long *)&RGBP3toRGB2020_coeff;
        }
        return &RGBtoRGBIdentity_coeff;
      }
      return (long long *)&RGBP3toRGB709_coeff;
    }
    return &RGBtoRGBIdentity_coeff;
  }
  if (v2 == 9)
  {
    uint64_t v6 = *(void *)(a2 + 88);
    if (v6 != *MEMORY[0x263F03F00])
    {
      if (v6 == *MEMORY[0x263F03F08]) {
        return (long long *)&RGB2020toRGB709_coeff;
      }
      if (v6 == *MEMORY[0x263F03F20]) {
        return (long long *)&RGB2020toRGBP3_coeff;
      }
    }
    return &RGBtoRGBIdentity_coeff;
  }
  if (v2 != 1) {
    return &RGBtoRGBIdentity_coeff;
  }
  uint64_t v3 = *(void *)(a2 + 88);
  if (v3 == *MEMORY[0x263F03F08]) {
    return &RGBtoRGBIdentity_coeff;
  }
  if (v3 != *MEMORY[0x263F03F20])
  {
    if (v3 == *MEMORY[0x263F03F00]) {
      return (long long *)&RGB709toRGB2020_coeff;
    }
    return &RGBtoRGBIdentity_coeff;
  }
  return (long long *)&RGB709toRGBP3_coeff;
}

uint64_t setupOutputScale(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  double v6 = *(double *)a2;
  if (*(unsigned char *)(a2 + 64) && *(double *)(a2 + 56) > *(float *)(a2 + 24) && *(_DWORD *)a3 == 3) {
    double v6 = *(double *)(a2 + 56);
  }
  unsigned int v7 = *(_DWORD *)(a3 + 40);
  if (v7 <= 8)
  {
    int v8 = 1 << v7;
    if ((v8 & 0x58) != 0)
    {
      if (!*(unsigned char *)(a3 + 181) || *(_DWORD *)(a3 + 8))
      {
        double v9 = *(float *)(result + 324) / v6;
LABEL_12:
        float v10 = v9;
        *(float *)(v5 + 196) = v10;
        return result;
      }
LABEL_11:
      double v9 = *(float *)(a2 + 28) / v6 * (float)(*(float *)(a2 + 32) * *(float *)(v5 + 324));
      goto LABEL_12;
    }
    if ((v8 & 0x120) != 0) {
      goto LABEL_11;
    }
  }
  uint64_t result = IsGpuOnlySystem();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)GetConfig((HDRConfig *)result);
    if (result)
    {
      uint64_t Config = GetConfig((HDRConfig *)result);
      uint64_t result = HDRConfig::GetConfigEntryValue((uint64_t)Config, 0x18u, 0);
      if (*(unsigned char *)result)
      {
        if (!*(_DWORD *)(a3 + 8) && *(_DWORD *)(a3 + 40) == 7) {
          goto LABEL_11;
        }
      }
    }
  }
  *(_DWORD *)(v5 + 196) = 1065353216;
  return result;
}

float create_s2tratio(float a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  float v8 = (float)(a3 + a4) * 0.5;
  float v9 = (float)(a6 + a7) * 0.5;
  float v10 = 0.0;
  if (v9 >= v8)
  {
    float v11 = (float)(a1 + a2) * 0.5;
    float v10 = v11 - v8;
    if (v9 <= v11 && v10 > 0.0 && v9 >= v8)
    {
      float v13 = (float)(v9 - v8) / v10;
      long double v14 = v13;
      if (v13 >= 0.5) {
        double v15 = pow(v14 + -1.0, 5.0) * 16.0 + 1.0;
      }
      else {
        double v15 = pow(v14, 5.0) * 16.0;
      }
      float v16 = v15;
      float v10 = v10 * v16;
    }
  }
  float v17 = fmax(v10, 0.0);
  return v17 * a5;
}

uint64_t getProcessingType(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    BOOL v3 = 0;
    if (v2 == 1)
    {
      int v4 = *(_DWORD *)(a1 + 40);
      BOOL v5 = v4 == 2;
    }
    else
    {
      BOOL v5 = 0;
      int v4 = *(_DWORD *)(a1 + 40);
    }
  }
  else
  {
    BOOL v5 = 0;
    int v4 = *(_DWORD *)(a1 + 40);
    BOOL v3 = v4 == 2;
  }
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 1) {
    uint64_t v7 = 4 * (*(_DWORD *)(a1 + 176) == 18);
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)(a1 + 12) == 4)
  {
    uint64_t v8 = 5;
  }
  else if (*(unsigned char *)(a2 + 152))
  {
    if (!v3)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v10 = logInstanceID;
        }
        else {
          uint64_t v10 = prevLogInstanceID;
        }
        a1 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (a1)
        {
          int v16 = 134217984;
          uint64_t v17 = WORD1(v10);
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"isGPUtoHDR10TV\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 1294\n", (uint8_t *)&v16, 0xCu);
        }
        prevLogInstanceID = v10;
      }
      else
      {
        a1 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (a1)
        {
          LOWORD(v16) = 0;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"isGPUtoHDR10TV\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 1294\n", (uint8_t *)&v16, 2u);
        }
      }
    }
    uint64_t v8 = 3;
  }
  else if (v6 == 3)
  {
    uint64_t v8 = 2;
  }
  else if (v6 != 2 {
         || ((v4 - 3) < 6 ? (v9 = 1) : (v9 = v5), (uint64_t v8 = 1, (v9 & 1) == 0) && !*(unsigned char *)(a1 + 180)))
  }
  {
    uint64_t v8 = v7;
  }
  uint64_t Config = GetConfig((HDRConfig *)a1);
  if (Config)
  {
    unsigned int v12 = GetConfig((HDRConfig *)Config);
    if (*((_DWORD *)v12 + 2621))
    {
      if ((v12[5240] & 0x80) != 0)
      {
        float v13 = GetConfig((HDRConfig *)v12);
        if (v13)
        {
          long double v14 = GetConfig((HDRConfig *)v13);
          return *(unsigned int *)HDRConfig::GetConfigEntryValue((uint64_t)v14, 0x77u, 0);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v8;
}

BOOL isDoViHigherThan1000ToHDR10TV1000(uint64_t a1, double *a2, _DWORD *a3)
{
  if (*a3 != 1) {
    return 0;
  }
  double v3 = fabs(*a2 + -1000.0);
  BOOL v6 = a3[17] == 16 && (*(_DWORD *)(a1 + 136) - 3085) < 0xFFFFFFF6 && a3[10] == 2;
  return v3 < 4.0 && v6;
}

uint64_t convertMetaDataToPayLoad(uint64_t a1, char *a2)
{
  bzero(a2, 0x25FuLL);
  int v4 = *(_DWORD *)(a1 + 4);
  int v5 = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 12);
  *((_WORD *)a2 + 1) = bswap32(*(unsigned __int16 *)(a1 + 16)) >> 16;
  *((_WORD *)a2 + 2) = bswap32(*(unsigned __int16 *)(a1 + 20)) >> 16;
  *((_WORD *)a2 + 3) = bswap32(*(unsigned __int16 *)(a1 + 24)) >> 16;
  *((_WORD *)a2 + 4) = bswap32(*(unsigned __int16 *)(a1 + 28)) >> 16;
  *((_WORD *)a2 + 5) = bswap32(*(unsigned __int16 *)(a1 + 32)) >> 16;
  *((_WORD *)a2 + 6) = bswap32(*(unsigned __int16 *)(a1 + 36)) >> 16;
  *((_WORD *)a2 + 7) = bswap32(*(unsigned __int16 *)(a1 + 40)) >> 16;
  *((_WORD *)a2 + 8) = bswap32(*(unsigned __int16 *)(a1 + 44)) >> 16;
  *((_WORD *)a2 + 9) = bswap32(*(unsigned __int16 *)(a1 + 48)) >> 16;
  *((_DWORD *)a2 + 5) = bswap32(*(_DWORD *)(a1 + 52));
  *((_DWORD *)a2 + 6) = bswap32(*(_DWORD *)(a1 + 56));
  *((_DWORD *)a2 + 7) = bswap32(*(_DWORD *)(a1 + 60));
  *((_WORD *)a2 + 16) = bswap32(*(unsigned __int16 *)(a1 + 64)) >> 16;
  *((_WORD *)a2 + 17) = bswap32(*(unsigned __int16 *)(a1 + 68)) >> 16;
  *((_WORD *)a2 + 18) = bswap32(*(unsigned __int16 *)(a1 + 72)) >> 16;
  *((_WORD *)a2 + 19) = bswap32(*(unsigned __int16 *)(a1 + 76)) >> 16;
  *((_WORD *)a2 + 20) = bswap32(*(unsigned __int16 *)(a1 + 80)) >> 16;
  *((_WORD *)a2 + 21) = bswap32(*(unsigned __int16 *)(a1 + 84)) >> 16;
  *((_WORD *)a2 + 22) = bswap32(*(unsigned __int16 *)(a1 + 88)) >> 16;
  *((_WORD *)a2 + 23) = bswap32(*(unsigned __int16 *)(a1 + 92)) >> 16;
  *((_WORD *)a2 + 24) = bswap32(*(unsigned __int16 *)(a1 + 96)) >> 16;
  *((_WORD *)a2 + 25) = bswap32(*(unsigned __int16 *)(a1 + 100)) >> 16;
  *((_WORD *)a2 + 26) = bswap32(*(unsigned __int16 *)(a1 + 104)) >> 16;
  *((_WORD *)a2 + 27) = bswap32(*(unsigned __int16 *)(a1 + 108)) >> 16;
  int32x4_t v7 = *(int32x4_t *)(a1 + 112);
  *(int16x4_t *)v8.i8 = vmovn_s32(v7);
  *a2 = v5 | (16 * v4);
  a2[1] = v6;
  a2[56] = v7.i8[3];
  a2[57] = v7.i8[2];
  a2[58] = v7.i8[1];
  *(_DWORD *)(a2 + 59) = vmovn_s16(v8).u32[0];
  a2[63] = *(_DWORD *)(a1 + 128);
  *((_WORD *)a2 + 32) = bswap32(*(unsigned __int16 *)(a1 + 132)) >> 16;
  *((_WORD *)a2 + 33) = bswap32(*(unsigned __int16 *)(a1 + 136)) >> 16;
  *((_WORD *)a2 + 34) = bswap32(*(unsigned __int16 *)(a1 + 140)) >> 16;
  a2[70] = *(_DWORD *)(a1 + 144);
  if (*(_WORD *)(a1 + 156))
  {
    *(_DWORD *)(a2 + 71) = 100663296;
    a2[75] = 1;
    *((_WORD *)a2 + 38) = bswap32(*(unsigned __int16 *)(a1 + 158)) >> 16;
    *((_WORD *)a2 + 39) = bswap32(*(unsigned __int16 *)(a1 + 160)) >> 16;
    *((_WORD *)a2 + 40) = bswap32(*(unsigned __int16 *)(a1 + 162)) >> 16;
    uint64_t result = 82;
  }
  else
  {
    uint64_t result = 71;
  }
  uint64_t v10 = 0;
  float v11 = a2 + 82;
  uint64_t v12 = a1 + 164;
  do
  {
    if (*(_WORD *)(v12 + v10))
    {
      *(_DWORD *)float v11 = 234881024;
      v11[4] = 2;
      *(_WORD *)(v11 + 5) = bswap32(*(unsigned __int16 *)(v12 + v10 + 2)) >> 16;
      *(_WORD *)(v11 + 7) = bswap32(*(unsigned __int16 *)(v12 + v10 + 4)) >> 16;
      *(_WORD *)(v11 + 9) = bswap32(*(unsigned __int16 *)(v12 + v10 + 6)) >> 16;
      *(_WORD *)(v11 + 11) = bswap32(*(unsigned __int16 *)(v12 + v10 + 8)) >> 16;
      *(_WORD *)(v11 + 13) = bswap32(*(unsigned __int16 *)(v12 + v10 + 10)) >> 16;
      *(_WORD *)(v11 + 15) = bswap32(*(unsigned __int16 *)(v12 + v10 + 12)) >> 16;
      *(_WORD *)(v11 + 17) = bswap32(*(unsigned __int16 *)(v12 + v10 + 14)) >> 16;
      uint64_t result = (result + 19);
      v11 += 19;
    }
    v10 += 16;
  }
  while (v10 != 128);
  if (*(_WORD *)(a1 + 292))
  {
    *(_DWORD *)float v11 = 100663296;
    v11[4] = 3;
    *(_WORD *)(v11 + 5) = bswap32(*(unsigned __int16 *)(a1 + 294)) >> 16;
    *(_WORD *)(v11 + 7) = bswap32(*(unsigned __int16 *)(a1 + 296)) >> 16;
    *(_WORD *)(v11 + 9) = bswap32(*(unsigned __int16 *)(a1 + 298)) >> 16;
    uint64_t result = (result + 11);
    v11 += 11;
  }
  if (*(_WORD *)(a1 + 300))
  {
    *(_DWORD *)float v11 = 0x4000000;
    v11[4] = 4;
    *(_WORD *)(v11 + 5) = bswap32(*(unsigned __int16 *)(a1 + 302)) >> 16;
    *(_WORD *)(v11 + 7) = bswap32(*(unsigned __int16 *)(a1 + 304)) >> 16;
    uint64_t result = (result + 9);
    v11 += 9;
  }
  uint64_t v13 = 0;
  uint64_t v14 = a1 + 348;
  uint64_t v15 = a1 + 354;
  do
  {
    if (!*(_WORD *)(a1 + 34 * v13 + 326)) {
      goto LABEL_45;
    }
    unsigned int v16 = *(unsigned __int16 *)(a1 + 34 * v13 + 328);
    BOOL v17 = v16 > 0xA;
    if (v16 <= 0xA) {
      int v18 = 13;
    }
    else {
      int v18 = 15;
    }
    if (v16 == 13) {
      BOOL v17 = 1;
    }
    BOOL v19 = v16 == 13;
    if (v16 == 13) {
      int v18 = 17;
    }
    if (v16 <= 0xD)
    {
      int v20 = v18;
    }
    else
    {
      BOOL v17 = 1;
      BOOL v19 = 1;
      int v20 = 23;
    }
    int v21 = v16 > 0x13 || v17;
    if (v16 <= 0x13)
    {
      BOOL v22 = v16 > 0xD;
    }
    else
    {
      BOOL v19 = 1;
      BOOL v22 = 1;
    }
    if (v16 <= 0x13) {
      unsigned int v23 = v20;
    }
    else {
      unsigned int v23 = 29;
    }
    *(_WORD *)float v11 = 0;
    v11[2] = 0;
    v11[3] = v23;
    v11[4] = 8;
    uint64_t v24 = a1 + 34 * v13;
    v11[5] = *(unsigned char *)(v24 + 330);
    *((_WORD *)v11 + 3) = bswap32(*(unsigned __int16 *)(v24 + 332)) >> 16;
    *((_WORD *)v11 + 4) = bswap32(*(unsigned __int16 *)(v24 + 334)) >> 16;
    *((_WORD *)v11 + 5) = bswap32(*(unsigned __int16 *)(v24 + 336)) >> 16;
    *((_WORD *)v11 + 6) = bswap32(*(unsigned __int16 *)(v24 + 338)) >> 16;
    *((_WORD *)v11 + 7) = bswap32(*(unsigned __int16 *)(v24 + 340)) >> 16;
    *((_WORD *)v11 + 8) = bswap32(*(unsigned __int16 *)(v24 + 342)) >> 16;
    if (v21)
    {
      *((_WORD *)v11 + 9) = bswap32(*(unsigned __int16 *)(a1 + 34 * v13 + 344)) >> 16;
      if (!v19)
      {
LABEL_35:
        if (v22) {
          goto LABEL_39;
        }
        goto LABEL_41;
      }
    }
    else if (!v19)
    {
      goto LABEL_35;
    }
    *((_WORD *)v11 + 10) = bswap32(*(unsigned __int16 *)(a1 + 34 * v13 + 346)) >> 16;
    if (v22)
    {
LABEL_39:
      for (uint64_t i = 0; i != 6; ++i)
        v11[i + 22] = *(unsigned char *)(v14 + i);
    }
LABEL_41:
    if (v16 >= 0x14)
    {
      for (uint64_t j = 0; j != 6; ++j)
        v11[j + 28] = *(unsigned char *)(v15 + j);
    }
    uint64_t result = result + v23 + 5;
    v11 += v23 + 5;
LABEL_45:
    ++v13;
    v14 += 34;
    v15 += 34;
  }
  while (v13 != 5);
  if (*(_WORD *)(a1 + 496))
  {
    unsigned int v27 = *(unsigned __int8 *)(a1 + 500);
    if (v27 <= 0x12) {
      unsigned int v28 = 1;
    }
    else {
      unsigned int v28 = 17;
    }
    *(_WORD *)float v11 = 0;
    v11[2] = 0;
    v11[3] = v28;
    v11[4] = 9;
    v11[5] = v27;
    if (v27 >= 0x13)
    {
      *((_WORD *)v11 + 3) = bswap32(*(unsigned __int16 *)(a1 + 502)) >> 16;
      *((_WORD *)v11 + 4) = bswap32(*(unsigned __int16 *)(a1 + 504)) >> 16;
      *((_WORD *)v11 + 5) = bswap32(*(unsigned __int16 *)(a1 + 506)) >> 16;
      *((_WORD *)v11 + 6) = bswap32(*(unsigned __int16 *)(a1 + 508)) >> 16;
      *((_WORD *)v11 + 7) = bswap32(*(unsigned __int16 *)(a1 + 510)) >> 16;
      *((_WORD *)v11 + 8) = bswap32(*(unsigned __int16 *)(a1 + 512)) >> 16;
      *((_WORD *)v11 + 9) = bswap32(*(unsigned __int16 *)(a1 + 514)) >> 16;
      *((_WORD *)v11 + 10) = bswap32(*(unsigned __int16 *)(a1 + 516)) >> 16;
    }
    uint64_t result = result + v28 + 5;
    v11 += v28 + 5;
  }
  for (uint64_t k = 0; k != 112; k += 28)
  {
    uint64_t v30 = a1 + k;
    if (*(_WORD *)(a1 + k + 518))
    {
      unsigned int v31 = *(unsigned __int8 *)(v30 + 528);
      if (v31 <= 0x12) {
        unsigned int v32 = 6;
      }
      else {
        unsigned int v32 = 22;
      }
      *(_WORD *)float v11 = 0;
      v11[2] = 0;
      v11[3] = v32;
      v11[4] = 10;
      v11[5] = *(unsigned char *)(v30 + 522);
      *((_WORD *)v11 + 3) = bswap32(*(unsigned __int16 *)(v30 + 524)) >> 16;
      __int16 v33 = *(_WORD *)(v30 + 526);
      v11[8] = HIBYTE(v33);
      v11[9] = v33;
      v11[10] = v31;
      if (v31 >= 0x13)
      {
        *(_WORD *)(v11 + 11) = bswap32(*(unsigned __int16 *)(a1 + k + 530)) >> 16;
        *(_WORD *)(v11 + 13) = bswap32(*(unsigned __int16 *)(a1 + k + 532)) >> 16;
        *(_WORD *)(v11 + 15) = bswap32(*(unsigned __int16 *)(a1 + k + 534)) >> 16;
        *(_WORD *)(v11 + 17) = bswap32(*(unsigned __int16 *)(a1 + k + 536)) >> 16;
        *(_WORD *)(v11 + 19) = bswap32(*(unsigned __int16 *)(a1 + k + 538)) >> 16;
        *(_WORD *)(v11 + 21) = bswap32(*(unsigned __int16 *)(a1 + k + 540)) >> 16;
        *(_WORD *)(v11 + 23) = bswap32(*(unsigned __int16 *)(a1 + k + 542)) >> 16;
        *(_WORD *)(v11 + 25) = bswap32(*(unsigned __int16 *)(a1 + k + 544)) >> 16;
      }
      uint64_t result = result + v32 + 5;
      v11 += v32 + 5;
    }
  }
  if (*(_WORD *)(a1 + 630))
  {
    *(_DWORD *)float v11 = 0x4000000;
    v11[4] = 11;
    *(_DWORD *)(v11 + 5) = *(_DWORD *)(a1 + 632);
    uint64_t result = (result + 9);
    v11 += 9;
  }
  if (*(_WORD *)(a1 + 636))
  {
    *(_DWORD *)float v11 = 0x2000000;
    v11[4] = -2;
    *(_WORD *)(v11 + 5) = *(_WORD *)(a1 + 638);
    uint64_t result = (result + 7);
    v11 += 7;
  }
  if (*(_WORD *)(a1 + 640))
  {
    *(_DWORD *)float v11 = 100663296;
    v11[4] = -1;
    *(_DWORD *)(v11 + 5) = *(_DWORD *)(a1 + 642);
    *(_WORD *)(v11 + 9) = *(_WORD *)(a1 + 646);
    uint64_t result = (result + 11);
    v11 += 11;
  }
  if (*(_WORD *)(a1 + 306))
  {
    *(_DWORD *)float v11 = 0x8000000;
    v11[4] = 5;
    *(_WORD *)(v11 + 5) = bswap32(*(unsigned __int16 *)(a1 + 308)) >> 16;
    *(_WORD *)(v11 + 7) = bswap32(*(unsigned __int16 *)(a1 + 310)) >> 16;
    *(_WORD *)(v11 + 9) = bswap32(*(unsigned __int16 *)(a1 + 312)) >> 16;
    *(_WORD *)(v11 + 11) = bswap32(*(unsigned __int16 *)(a1 + 314)) >> 16;
    uint64_t result = (result + 13);
    v11 += 13;
  }
  if (*(_WORD *)(a1 + 316))
  {
    *(_DWORD *)float v11 = 0x8000000;
    v11[4] = 6;
    *(_WORD *)(v11 + 9) = bswap32(*(unsigned __int16 *)(a1 + 322)) >> 16;
    *(_WORD *)(v11 + 11) = bswap32(*(unsigned __int16 *)(a1 + 324)) >> 16;
    *(_WORD *)(v11 + 5) = bswap32(*(unsigned __int16 *)(a1 + 318)) >> 16;
    *(_WORD *)(v11 + 7) = bswap32(*(unsigned __int16 *)(a1 + 320)) >> 16;
    return (result + 13);
  }
  return result;
}

void metaDataReduceL2(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 648);
  double v3 = (_OWORD *)(a1 + 164);
  qsort((void *)(a1 + 164), *(unsigned int *)(a1 + 148), 0x10uLL, (int (__cdecl *)(const void *, const void *))compareL2);
  if (v2 <= *(unsigned __int16 *)(a1 + 166))
  {
    uint64_t v11 = *(unsigned int *)(a1 + 148);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 144) - v11 + 1;
    if (v11 >= 2)
    {
      uint64_t v12 = v11 - 1;
      uint64_t v13 = (_WORD *)(a1 + 180);
      do
      {
        *uint64_t v13 = 0;
        v13 += 8;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 148);
    uint64_t v5 = (v4 - 1);
    if (v2 >= *(unsigned __int16 *)(a1 + 16 * v5 + 166))
    {
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 144) - v4 + 1;
      *double v3 = *(_OWORD *)(a1 + 16 * v5 + 164);
      if (v4 >= 2)
      {
        uint64_t v14 = v4 - 1;
        uint64_t v15 = (_WORD *)(a1 + 180);
        do
        {
          _WORD *v15 = 0;
          v15 += 8;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      if (v4 < 2) {
        return;
      }
      uint64_t v6 = 0;
      uint64_t v7 = a1 + 180;
      uint64_t v8 = v4 - 1;
      uint64_t v9 = v4 - 1;
      while (1)
      {
        unsigned int v10 = *(unsigned __int16 *)(v7 + 2);
        if (v10 == v2) {
          break;
        }
        if (v10 > v2)
        {
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 144) - v4 + 2;
          *double v3 = *(_OWORD *)(a1 + (v6 >> 28) + 164);
          *(_OWORD *)(a1 + 180) = *(_OWORD *)v7;
          if (v4 < 3)
          {
            int v17 = 2;
          }
          else
          {
            uint64_t v18 = v4 - 2;
            BOOL v19 = (_WORD *)(a1 + 196);
            int v17 = 2;
            do
            {
              _WORD *v19 = 0;
              v19 += 8;
              --v18;
            }
            while (v18);
          }
          goto LABEL_20;
        }
        v6 += 0x100000000;
        v7 += 16;
        if (!--v9) {
          return;
        }
      }
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 144) - v4 + 1;
      *double v3 = *(_OWORD *)v7;
      unsigned int v16 = (_WORD *)(a1 + 180);
      do
      {
        _WORD *v16 = 0;
        v16 += 8;
        --v8;
      }
      while (v8);
    }
  }
  int v17 = 1;
LABEL_20:
  *(_DWORD *)(a1 + 148) = v17;
}

uint64_t compareL2(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return a1[1] - a2[1];
}

void setDisplayManagementPayload(uint64_t a1, __IOSurface *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unsigned int v3 = convertMetaDataToPayLoad(a1, (char *)bytes);
  CFDataRef v4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, v3);
  IOSurfaceSetValue(a2, @"DolbyVisionHDMIData", v4);
  CFRelease(v4);
}

void attachBackwardDisplayManagementMetaDataToBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, long long *a5, __IOSurface *a6, double a7, float32x4_t a8, float32x4_t a9)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  if (a4[3] != 4)
  {
    *(float *)&v80[3] = 1.0 / *(float *)(a2 + 196);
    *(_OWORD *)bytes = *(_OWORD *)(a2 + 144);
    uint64_t v15 = *(void *)(a3 + 88);
    if (v15 == *MEMORY[0x263F03F08])
    {
      unsigned int v16 = &R709_Rgb2LMS;
    }
    else
    {
      unsigned int v16 = &P3_Rgb2LMS;
      if (v15 != *MEMORY[0x263F03F20] && v15 == *MEMORY[0x263F03F00]) {
        unsigned int v16 = (uint64_t *)&R2020_Rgb2LMS;
      }
    }
    int v93 = 0;
    v17.i32[3] = 0;
    memset(v92, 0, sizeof(v92));
    int v18 = a4[15];
    switch(v18)
    {
      case 1:
        BOOL v19 = &LMStoRGB_coeff_709;
        break;
      case 0xFFFF:
        BOOL v19 = v92;
        *(float32x2_t *)v17.f32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 64));
        v17.f32[2] = (float)*(int *)(a1 + 72);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 76));
        a8.f32[2] = (float)*(int *)(a1 + 84);
        *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 88));
        a9.f32[2] = (float)*(int *)(a1 + 96);
        float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x38800000u);
        v95.columns[0] = (simd_float3)vmulq_f32(v17, v20);
        v95.columns[1] = (simd_float3)vmulq_f32(a8, v20);
        v95.columns[2] = (simd_float3)vmulq_f32(a9, v20);
        simd_float3x3 v96 = __invert_f3(v95);
        uint64_t v21 = 0;
        BOOL v22 = (_DWORD *)((unint64_t)v92 | 0xC);
        do
        {
          simd_float3 v51 = v96.columns[0];
          *(v22 - 3) = *(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
          simd_float3 v50 = v96.columns[1];
          _DWORD *v22 = *(_DWORD *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
          simd_float3 v49 = v96.columns[2];
          v22[3] = *(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21++ & 3)));
          ++v22;
        }
        while (v21 != 3);
        break;
      case 9:
        BOOL v19 = (long long *)&LMStoRGB_coeff_2020;
        break;
      default:
        BOOL v19 = &LMStoRGB_coeff_P3;
        break;
    }
    uint64_t v60 = *(void *)v19;
    int v23 = *((_DWORD *)v19 + 2);
    uint64_t v62 = *(void *)((char *)v19 + 12);
    uint64_t v64 = *((void *)v19 + 3);
    int v24 = *((_DWORD *)v19 + 8);
    int v63 = *((_DWORD *)v19 + 5);
    int v65 = v24;
    int v25 = *((_DWORD *)v16 + 2);
    uint64_t v54 = *v16;
    int v26 = *((_DWORD *)v16 + 5);
    int v55 = v25;
    int v57 = v26;
    uint64_t v56 = *(uint64_t *)((char *)v16 + 12);
    uint64_t v58 = v16[3];
    int v27 = *((_DWORD *)v16 + 8);
    int v61 = v23;
    int v59 = v27;
    uint64_t v66 = 0x3ECCCCCD3ECCCCCDLL;
    int v67 = 1045220557;
    int v69 = 1053474947;
    unint64_t v68 = 0xC09B3B64408E8F5CLL;
    uint64_t v70 = 0x3EB6E2EB3F4E3BCDLL;
    int v71 = -1080764767;
    int v73 = 1045571297;
    uint64_t v72 = 0x3DC7D2383F800000;
    unint64_t v74 = 0xBDE938133F800000;
    int v75 = 1040738836;
    int v77 = -1087551366;
    float v28 = 1.0 / *(float *)(a2 + 112);
    v97.columns[0] = (simd_float3)vmulq_n_f32(*(float32x4_t *)(a2 + 16), v28);
    v97.columns[1] = (simd_float3)vmulq_n_f32(*(float32x4_t *)(a2 + 32), v28);
    v97.columns[2] = (simd_float3)vmulq_n_f32(*(float32x4_t *)(a2 + 48), v28);
    uint64_t v76 = 0x3D05976C3F800000;
    simd_float3x3 v98 = __invert_f3(v97);
    uint64_t v29 = 0;
    uint64_t v30 = v78;
    do
    {
      simd_float3 v48 = v98.columns[0];
      *uint64_t v30 = *(_DWORD *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v29 & 3)));
      simd_float3 v47 = v98.columns[1];
      v30[3] = *(_DWORD *)((unint64_t)&v47 & 0xFFFFFFFFFFFFFFF3 | (4 * (v29 & 3)));
      simd_float3 v46 = v98.columns[2];
      v30[6] = *(_DWORD *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * (v29++ & 3)));
      ++v30;
    }
    while (v29 != 3);
    *(void *)&v78[36] = 0x4500000043800000;
    int v31 = *a4;
    int v79 = 1157627904;
    v80[4] = v31;
    int v83 = a4[38];
    double v32 = *(double *)(a3 + 8);
    unsigned int v33 = *(double *)(a3 + 16);
    unsigned int v84 = v33;
    float v85 = 0.005;
    if (v32 > 0.00005)
    {
      float v34 = v32;
      float v85 = v34;
    }
    int v35 = *(_DWORD *)(a3 + 148);
    int v89 = v35;
    char v91 = *((unsigned char *)a4 + 180);
    if (v31 == 1 && a4[10] == 2 && v35)
    {
      unsigned int v81 = a4[37];
      unsigned int v36 = *(float *)(a2 + 280);
    }
    else
    {
      unsigned int v36 = a4[37];
      unsigned int v81 = v36;
    }
    uint64_t v37 = 0;
    unsigned int v82 = v36;
    long long v38 = *(_OWORD *)(a2 + 384);
    do
    {
      long long v45 = v38;
      v80[v37] = *(_DWORD *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v37 & 3)));
      ++v37;
    }
    while (v37 != 3);
    long long v86 = *a5;
    uint64_t v87 = *((void *)a5 + 2);
    int v88 = *((_DWORD *)a5 + 6);
    if (*(_WORD *)(a1 + 316))
    {
      LODWORD(v87) = 10000 * *(unsigned __int16 *)(a1 + 318);
      HIDWORD(v87) = 10000 * *(unsigned __int16 *)(a1 + 320);
      __int16 v39 = *(_WORD *)(a1 + 322);
      if (!v39) {
        __int16 v39 = 4000;
      }
      LOWORD(v88) = v39;
      __int16 v40 = *(_WORD *)(a1 + 324);
      if (!v40) {
        __int16 v40 = 1000;
      }
      HIWORD(v88) = v40;
    }
    char v90 = v90 & 0xFE | *(unsigned char *)(a3 + 152) & 1;
    unsigned int v41 = a4[10];
    if (v41 <= 6 && ((1 << v41) & 0x47) != 0)
    {
      float valuePtr = (float)v33;
      CFAllocatorRef v42 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFNumberRef v43 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberFloat32Type, &valuePtr);
      IOSurfaceSetValue(a6, (CFStringRef)*MEMORY[0x263F0EDB0], v43);
      CFRelease(v43);
    }
    else
    {
      CFAllocatorRef v42 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    }
    CFDataRef v44 = CFDataCreate(v42, bytes, 288);
    IOSurfaceSetValue(a6, @"DolbyVisionBackwardDMParameter", v44);
    CFRelease(v44);
    setDisplayManagementPayload(a1, a6);
  }
}

float HLG2L(float a1)
{
  if (a1 <= 0.5) {
    return (float)(a1 * a1) / 3.0;
  }
  else {
    return (float)(expf((float)(a1 + -0.55991) / 0.17883) + 0.28467) / 12.0;
  }
}

float HLG2L_double(float a1)
{
  if (a1 <= 0.5) {
    return (float)(a1 * a1) / 3.0;
  }
  else {
    return (exp((a1 + -0.55991073) / 0.17883277) + 0.28466892) / 12.0;
  }
}

void setPQ2LBufferFP16(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    double v5 = 1.0 / (double)(a2 - 1);
    do
    {
      float v6 = v5 * (double)v4;
      BOOL v7 = v6 < 0.00000073096;
      if (v6 < 0.00000073096) {
        float v6 = -(float)(v6 + -0.0000014619);
      }
      float v8 = flt_2222D1868[v7];
      float v9 = powf(v6, 0.012683);
      float v10 = fmax((float)((float)(v9 + -0.83594) / (float)((float)(v9 * -18.688) + 18.852)), 0.0);
      _S0 = v8 * powf(v10, 6.2774);
      __asm { FCVT            H0, S0 }
      *(_WORD *)(a1 + 2 * v4++) = LOWORD(_S0);
    }
    while (a2 > v4);
  }
}

void setPQ2LBuffer(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    double v5 = 1.0 / (double)(a2 - 1);
    do
    {
      float v6 = v5 * (double)v4;
      BOOL v7 = v6 < 0.00000073096;
      if (v6 < 0.00000073096) {
        float v6 = -(float)(v6 + -0.0000014619);
      }
      float v8 = flt_2222D1868[v7];
      float v9 = powf(v6, 0.012683);
      float v10 = fmax((float)((float)(v9 + -0.83594) / (float)((float)(v9 * -18.688) + 18.852)), 0.0);
      *(float *)(a1 + 4 * v4++) = v8 * powf(v10, 6.2774);
    }
    while (a2 > v4);
  }
}

void setHLG2LBuffer(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    double v5 = 1.0 / (double)(a2 - 1);
    do
    {
      float v6 = v5 * (double)v4;
      if (v6 <= 0.5) {
        float v7 = (float)(v6 * v6) / 3.0;
      }
      else {
        float v7 = (exp((v6 + -0.55991073) / 0.17883277) + 0.28466892) / 12.0;
      }
      *(float *)(a1 + 4 * v4++) = v7;
    }
    while (a2 > v4);
  }
}

uint64_t setLinearBuffer(uint64_t result, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    do
    {
      float v3 = 1.0 / (double)(a2 - 1);
      *(float *)(result + 4 * v2) = v3 * (float)v2;
      ++v2;
    }
    while (a2 > v2);
  }
  return result;
}

void setL2PQBuffer(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unsigned int v6 = a2 >> 1;
  if (a2 >= 2)
  {
    uint64_t v7 = 0;
    if (v6 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v6;
    }
    do
    {
      float v9 = (float)(a3 / (float)(v6 - 1)) * (float)v7;
      if (v9 >= 0.0)
      {
        float v12 = powf(v9 * 0.0001, 0.1593);
        float v11 = powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v10 = powf(v9 * -0.0001, 0.1593);
        float v11 = 0.0000014619
            - powf((float)((float)(v10 * 18.852) + 0.83594) / (float)((float)(v10 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a1 + 4 * v7++) = v11;
    }
    while (v8 != v7);
  }
  unint64_t v13 = v6;
  if (v6 < a2)
  {
    unsigned int v14 = 1;
    do
    {
      float v15 = a3 + (float)((float)v14 * (float)((float)(a4 - a3) / (float)(v6 - 1)));
      if (v15 >= 0.0)
      {
        float v18 = powf(v15 * 0.0001, 0.1593);
        float v17 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v16 = powf(v15 * -0.0001, 0.1593);
        float v17 = 0.0000014619
            - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a1 + 4 * v13) = v17;
      unint64_t v13 = v6 + v14++;
    }
    while (v13 < a2);
  }
}

void getSat2FactorForI(int a1, unint64_t a2, float *a3, int *a4)
{
  float v6 = ((double)a1 + (double)a1) / (double)a2;
  float v7 = a3[63];
  float v8 = a3[64];
  float v9 = a3[65];
  float v10 = a3[66];
  float v11 = v10 + (float)((float)((float)(v8 * v6) * v6) - (float)(v9 * v6));
  if (a3[68] < v11) {
    float v11 = a3[68];
  }
  float v12 = a3[67];
  if (v12 < v11) {
    float v12 = v11;
  }
  float v13 = 1.0 - (float)(v7 * powf(v6, v12));
  int v14 = *a4;
  if (v13 >= (float)(1.0 - (float)((float)(v7 * v6) * a3[69])))
  {
    if (!v14) {
      return;
    }
  }
  else if (!v14)
  {
    *a4 = 1;
  }
  if (v6 > 0.3539)
  {
    float v15 = v9 * -0.3539 + v8 * 0.3539 * 0.3539 + v10;
    powf(0.3539, v15);
  }
}

float getSat2FactorForI_llDovi(int a1, unint64_t a2, uint64_t a3)
{
  return 1.0 - (float)((float)(*(float *)(a3 + 252) * (float)a1) / (float)a2);
}

float getSat2FactorForPT(int a1, unint64_t a2, uint64_t a3, _DWORD *a4)
{
  float v4 = ((double)a1 + (double)a1) / (double)a2;
  if (*a4) {
    double v5 = v4 / -6.0 + 1.04;
  }
  else {
    double v5 = 1.0 - (float)(*(float *)(a3 + 252) * v4);
  }
  float result = v5;
  if (result < 0.6) {
    return 0.6;
  }
  return result;
}

float getSat2FactorForPT_llDovi(int a1, unint64_t a2, uint64_t a3)
{
  return 1.0 - (float)((float)(*(float *)(a3 + 252) * (float)a1) / (float)a2);
}

float getSat2FactorForPT_Dovi84(int a1, unint64_t a2, uint64_t a3)
{
  return (float)((float)(*(float *)(a3 + 252) * (float)a1) / (float)a2) + 1.0;
}

void setSat2FactorTable(uint64_t a1, unint64_t a2, float *a3, int a4)
{
  int v20 = 0;
  if (a2)
  {
    unsigned int v8 = 0;
    int v9 = 0;
    double v10 = (double)a2;
    float v11 = (float)a2;
    unsigned int v12 = 1;
    do
    {
      int v13 = v12 - 1;
      if (a4)
      {
        int v14 = 2 * v9;
        *(float *)(a1 + 4 * v8) = 1.0 - (float)((float)(a3[63] * (float)v13) / v11);
        float v15 = 1.0 - (float)((float)(a3[63] * (float)v13) / v11);
      }
      else
      {
        getSat2FactorForI(v12 - 1, a2, a3, &v20);
        *(_DWORD *)(a1 + 4 * v8) = v16;
        float v17 = ((double)v13 + (double)v13) / v10;
        if (v20) {
          double v18 = v17 / -6.0 + 1.04;
        }
        else {
          double v18 = 1.0 - (float)(a3[63] * v17);
        }
        float v15 = v18;
        if (v15 < 0.6) {
          float v15 = 0.6;
        }
        int v14 = v8;
      }
      *(float *)(a1 + 4 * (v14 | 1u)) = v15;
      ++v9;
      unint64_t v19 = v12++;
      v8 += 2;
    }
    while (v19 < a2);
  }
}

float getInverseScalingFactor(float *a1, float a2)
{
  float v3 = 1.0;
  if (a2 != 0.0)
  {
    float v5 = powf(a2, 3.0);
    float v3 = powf(fmaxf((float)(v5 - a1[1]) / (float)(a1[2] - (float)(a1[3] * v5)), 0.0), 1.0 / *a1) / a2;
  }
  return fminf(fmaxf(v3, 0.5), 2.0);
}

void setInverseScalingFactorTable(uint64_t a1, unint64_t a2, float *a3)
{
  float v6 = powf(a3[2] / a3[3], 0.33333);
  if (a2)
  {
    uint64_t v7 = 0;
    float v8 = fminf(v6, 1.0);
    do
    {
      float v9 = 1.0 / (double)(a2 - 1) * (double)v7;
      float v10 = fminf(v9, v8);
      float v11 = 1.0;
      if (v10 != 0.0)
      {
        float v12 = powf(v10, 3.0);
        float v11 = powf(fmaxf((float)(v12 - a3[1]) / (float)(a3[2] - (float)(a3[3] * v12)), 0.0), 1.0 / *a3) / v10;
      }
      *(float *)(a1 + 4 * v7++) = fminf(fmaxf(v11, 0.5), 2.0);
    }
    while (a2 > v7);
  }
}

void GetRelative_YUV_TM(float *a1, unint64_t a2, float a3, float a4, char a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (a5)
  {
    float v8 = logf(a4 + 1.062);
    float v9 = logf(a3 + 12.265);
    uint64_t v10 = 0;
    float v11 = (v8 + -0.44573) / 3.7296;
    float v12 = (v9 + -4.72086) / 3.79878;
    if (v12 <= 1.0) {
      float v13 = v12;
    }
    else {
      float v13 = 1.0;
    }
    BOOL v14 = v12 < 0.0;
    float v15 = 0.0;
    if (!v14) {
      float v15 = v13;
    }
    float v16 = 1.0 - v15;
    do
    {
      *(float *)&v37[v10 * 4 + 132] = (float)(v15
                                            * (float)GetRelative_YUV_TM(float *,unsigned long,float,float,BOOL)::tmap_b12[v10])
                                    + (float)((float)GetRelative_YUV_TM(float *,unsigned long,float,float,BOOL)::tmap_b11[v10]
                                            * v16);
      *(float *)&v37[v10 * 4] = (float)(v15
                                      * (float)GetRelative_YUV_TM(float *,unsigned long,float,float,BOOL)::tmap_b22[v10])
                              + (float)((float)GetRelative_YUV_TM(float *,unsigned long,float,float,BOOL)::tmap_b21[v10]
                                      * v16);
      ++v10;
    }
    while (v10 != 33);
    uint64_t v17 = 0;
    if (v11 <= 1.0) {
      float v18 = (v8 + -0.44573) / 3.7296;
    }
    else {
      float v18 = 1.0;
    }
    if (v11 < 0.0) {
      float v18 = 0.0;
    }
    do
    {
      a1[v17] = (float)((float)(v18 * *(float *)&v37[v17 * 4])
                      + (float)(*(float *)&v37[v17 * 4 + 132] * (float)(1.0 - v18)))
              / 4095.0;
      ++v17;
    }
    while (v17 != 33);
  }
  else
  {
    double v19 = a3;
    float v20 = log(a3 + 1531.5734);
    double v21 = a4;
    float v22 = log(a4 + 1.0001);
    float v23 = v22 * 6.5753 / v20 + sqrtf(v20) * 3.6185 + -9.134 + sqrtf(v22) * 0.064768 + v22 * -0.63664;
    float v24 = log(v19 + 705.0095);
    float v25 = log(v21 + 4.2652);
    float v26 = sqrtf(v24) * -0.70331 + 1.4379 + sqrtf(v25) * 0.30074 + v25 * 0.17345 + v25 * -1.1976 / v24;
    *(float *)&double v19 = log(v19 + 147.5841);
    long double v27 = log(v21 + 13.2092);
    uint64_t v28 = 0;
    *(float *)&long double v27 = v27;
    float v29 = *(float *)&v27 * 1.3535 / *(float *)&v19
        + sqrtf(*(float *)&v19) * 0.5241
        + -0.33629
        + sqrtf(*(float *)&v27) * -1.173
        + *(float *)&v27 * 0.12624;
    do
    {
      *(float *)&v37[v28 + 132] = (float)((float)(v26
                                                * (float)*(int *)((char *)&GetRelative_SDR_DOLBY(float *,unsigned long,float,float)::tmap_bases
                                                                + v28
                                                                + 132))
                                        + (float)((float)*(int *)((char *)&GetRelative_SDR_DOLBY(float *,unsigned long,float,float)::tmap_bases
                                                                + v28)
                                                * v23))
                                + (float)((float)*(int *)((char *)&GetRelative_SDR_DOLBY(float *,unsigned long,float,float)::tmap_bases
                                                        + v28
                                                        + 264)
                                        * v29);
      v28 += 4;
    }
    while (v28 != 132);
    float v30 = powf(a3 / 10000.0, 0.1593);
    float v31 = (v30 * 18.8515625 + 0.8359375) / (v30 * 18.6875 + 1.0);
    float v32 = powf(v31, 78.844);
    uint64_t v33 = 0;
    float v34 = 1.0;
    if (v32 <= 1.0) {
      float v34 = v32;
    }
    BOOL v14 = v32 < 0.0;
    float v35 = 0.0;
    if (!v14) {
      float v35 = v34;
    }
    float v36 = v38;
    do
    {
      a1[v33] = (float)(v35 * *(float *)&v37[v33 * 4 + 132]) / v36;
      ++v33;
    }
    while (v33 != 33);
  }
}

void GetRelative_SDR_DOLBY(float *a1, float a2, float a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  double v6 = a2;
  float v7 = log(a2 + 1531.5734);
  double v8 = a3;
  float v9 = log(a3 + 1.0001);
  float v10 = v9 * 6.5753 / v7 + sqrtf(v7) * 3.6185 + -9.134 + sqrtf(v9) * 0.064768 + v9 * -0.63664;
  float v11 = log(v6 + 705.0095);
  float v12 = log(v8 + 4.2652);
  float v13 = sqrtf(v11) * -0.70331 + 1.4379 + sqrtf(v12) * 0.30074 + v12 * 0.17345 + v12 * -1.1976 / v11;
  *(float *)&double v6 = log(v6 + 147.5841);
  long double v14 = log(v8 + 13.2092);
  uint64_t v15 = 0;
  *(float *)&long double v14 = v14;
  float v16 = *(float *)&v14 * 1.3535 / *(float *)&v6
      + sqrtf(*(float *)&v6) * 0.5241
      + -0.33629
      + sqrtf(*(float *)&v14) * -1.173
      + *(float *)&v14 * 0.12624;
  do
  {
    *(float *)&v25[v15] = (float)((float)(v13
                                        * (float)*(int *)((char *)&GetRelative_SDR_DOLBY(float *,unsigned long,float,float)::tmap_bases
                                                        + v15
                                                        + 132))
                                + (float)((float)*(int *)((char *)&GetRelative_SDR_DOLBY(float *,unsigned long,float,float)::tmap_bases
                                                        + v15)
                                        * v10))
                        + (float)((float)*(int *)((char *)&GetRelative_SDR_DOLBY(float *,unsigned long,float,float)::tmap_bases
                                                + v15
                                                + 264)
                                * v16);
    v15 += 4;
  }
  while (v15 != 132);
  float v17 = powf(a2 / 10000.0, 0.1593);
  float v18 = (v17 * 18.8515625 + 0.8359375) / (v17 * 18.6875 + 1.0);
  float v19 = powf(v18, 78.844);
  uint64_t v20 = 0;
  float v21 = 1.0;
  if (v19 <= 1.0) {
    float v21 = v19;
  }
  BOOL v22 = v19 < 0.0;
  float v23 = 0.0;
  if (!v22) {
    float v23 = v21;
  }
  float v24 = v26;
  do
  {
    a1[v20] = (float)(v23 * *(float *)&v25[v20 * 4]) / v24;
    ++v20;
  }
  while (v20 != 33);
}

float linearInterpolation(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = a3;
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 == a2)
  {
    if (a3 != a4)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v6 = logInstanceID;
        }
        else {
          uint64_t v6 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 134217984;
          uint64_t v9 = WORD1(v6);
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"y1 == y2\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 2369\n", (uint8_t *)&v8, 0xCu);
        }
        prevLogInstanceID = v6;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v8) = 0;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"y1 == y2\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 2369\n", (uint8_t *)&v8, 2u);
      }
    }
  }
  else
  {
    return (a4 - a3) * (a5 - a1) / (a2 - a1) + a3;
  }
  return v5;
}

float getSourceOffset(int a1, float a2)
{
  return (double)getSourceOffset(int,float)::offsets[a1] * 0.000244140625 * a2 + 1.0 - a2;
}

void GetToneMap_SDR_DOLBY(float *a1, unint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long double v14 = (float *)malloc_type_malloc(0x84uLL, 0x100004052888210uLL);
  uint64_t v15 = (float *)malloc_type_malloc(0x84uLL, 0x100004052888210uLL);
  float v16 = v15;
  if (!v14 || !v15)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v17 = logInstanceID;
      }
      else {
        uint64_t v17 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = 134217984;
        uint64_t v29 = WORD1(v17);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"bufferT && bufferS\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 2396\n", (uint8_t *)&v28, 0xCu);
      }
      prevLogInstanceID = v17;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v28) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"bufferT && bufferS\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 2396\n", (uint8_t *)&v28, 2u);
    }
  }
  GetRelative_SDR_DOLBY(v14, a3, a4);
  GetRelative_SDR_DOLBY(v16, a5, a6);
  if (a2)
  {
    LODWORD(v18) = 0;
    float v19 = v16[32] / (float)(a2 - 1);
    double v20 = a7;
    do
    {
      uint64_t v21 = 0;
      float v22 = v19 * (float)v18;
      uint64_t v23 = 0xFFFFFFFF00000000;
      while (v22 > v16[v21])
      {
        ++v21;
        v23 += 0x100000000;
        if (v21 == 33) {
          goto LABEL_20;
        }
      }
      if (v21)
      {
        if (v21 == 33)
        {
LABEL_20:
          float v24 = v14[32];
          goto LABEL_23;
        }
        float v24 = linearInterpolation(*(float *)((char *)v16 + (v23 >> 30)), v16[v21], *(float *)((char *)v14 + (v23 >> 30)), v14[v21], v22);
      }
      else
      {
        float v24 = *v14;
      }
LABEL_23:
      a1[(2 * v18)] = v24;
      float v25 = ((float)(v24 + (float)((float)-v19 * (float)v18)) + 1.0) * v20;
      a1[(2 * v18) | 1] = v25;
      unint64_t v18 = (v18 + 1);
    }
    while (v18 < a2);
    if (a2 >= 2)
    {
      unsigned int v26 = 1;
      int v27 = 2;
      do
      {
        a1[v27] = a1[v27] / (float)(v19 * (float)v26++);
        v27 += 2;
      }
      while (v26 < a2);
    }
  }
  *a1 = a1[2];
  free(v14);
  free(v16);
}

void setScalingTable_SDRtoHDR(float *a1, unint64_t a2, float a3, float a4, float a5)
{
}

void GetToneMap_YUV_TM(_DWORD *a1, unint64_t a2, char a3, int a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v18 = (float *)malloc_type_malloc(0x84uLL, 0x100004052888210uLL);
  float v19 = (float *)malloc_type_malloc(0x84uLL, 0x100004052888210uLL);
  uint64_t v21 = v19;
  if (!v18 || !v19)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v22 = logInstanceID;
      }
      else {
        uint64_t v22 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = 134217984;
        uint64_t v42 = WORD1(v22);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"bufferT && bufferS\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 2444\n", (uint8_t *)&v41, 0xCu);
      }
      prevLogInstanceID = v22;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v41) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"bufferT && bufferS\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 2444\n", (uint8_t *)&v41, 2u);
    }
  }
  GetRelative_YUV_TM(v18, v20, a5, a6, a4);
  GetRelative_YUV_TM(v21, v23, a7, a8, a4);
  if (a2)
  {
    LODWORD(v24) = 0;
    float v25 = v21[32] / (float)(a2 - 1);
    double v26 = a9;
    do
    {
      uint64_t v27 = 0;
      float v28 = v25 * (float)v24;
      uint64_t v29 = 0xFFFFFFFF00000000;
      while (v28 > v21[v27])
      {
        ++v27;
        v29 += 0x100000000;
        if (v27 == 33) {
          goto LABEL_20;
        }
      }
      if (v27)
      {
        if (v27 == 33)
        {
LABEL_20:
          float v30 = v18[32];
          goto LABEL_23;
        }
        float v30 = linearInterpolation(*(float *)((char *)v21 + (v29 >> 30)), v21[v27], *(float *)((char *)v18 + (v29 >> 30)), v18[v27], v28);
      }
      else
      {
        float v30 = *v18;
      }
LABEL_23:
      *(float *)&a1[(2 * v24)] = v30;
      float v31 = ((float)(v30 + (float)((float)-v25 * (float)v24)) + 1.0) * v26;
      *(float *)&a1[(2 * v24) | 1] = v31;
      unint64_t v24 = (v24 + 1);
    }
    while (v24 < a2);
    if (a2 >= 2)
    {
      unsigned int v32 = 1;
      unsigned int v33 = 2;
      do
      {
        *(float *)&a1[v33] = *(float *)&a1[v33] / (float)(v25 * (float)v32++);
        v33 += 2;
      }
      while (v32 < a2);
    }
  }
  *a1 = a1[2];
  if (a3)
  {
    if (a4)
    {
      if (a2)
      {
        int v34 = 0;
        unsigned int v35 = 1;
        do
        {
          *(float32x2_t *)&a1[v34] = vmul_f32(*(float32x2_t *)&a1[v34], (float32x2_t)0x45600000455B0000);
          unint64_t v36 = v35++;
          v34 += 2;
        }
        while (v36 < a2);
      }
    }
    else if (a2)
    {
      int v37 = 0;
      unsigned int v38 = 1;
      float32x2_t v39 = (float32x2_t)vdup_n_s32(0x457FF000u);
      do
      {
        *(float32x2_t *)&a1[v37] = vmul_f32(*(float32x2_t *)&a1[v37], v39);
        unint64_t v40 = v38++;
        v37 += 2;
      }
      while (v40 < a2);
    }
  }
  free(v18);
  free(v21);
}

BOOL hasTrim(float *a1)
{
  return fabs(a1[59] + -1.0) >= 0.000001 || fabsf(a1[60]) >= 0.000001 || fabs(a1[61] + -1.0) >= 0.000001;
}

BOOL hasTrimSaturation(uint64_t a1)
{
  return fabsf(*(float *)(a1 + 248) + -1.0) >= 0.000001;
}

BOOL hasTrimOffsetGT0(uint64_t a1)
{
  return *(float *)(a1 + 240) >= 0.000001;
}

void dovi_getScalingFactor(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  float v12 = a1;
  if (a7)
  {
    BOOL v13 = a1 < 0.00000073096;
    float v14 = -(float)(a1 + -0.0000014619);
    if (a1 >= 0.00000073096) {
      float v14 = a1;
    }
    float v15 = flt_2222D1868[v13];
    float v16 = powf(v14, 0.012683);
    float v17 = fmax((float)((float)(v16 + -0.83594) / (float)((float)(v16 * -18.688) + 18.852)), 0.0);
    float v18 = powf(v17, 6.2774);
    float v19 = powf((float)(v15 * v18) / 1000.0, *(float *)(a3 + 284) + 1.0) * 1000.0;
    if (v19 >= 0.0)
    {
      float v21 = powf(v19 * 0.0001, 0.1593);
      float v12 = powf((float)((float)(v21 * 18.852) + 0.83594) / (float)((float)(v21 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v20 = powf(v19 * -0.0001, 0.1593);
      float v12 = 0.0000014619 - powf((float)((float)(v20 * 18.852) + 0.83594) / (float)((float)(v20 * 18.688) + 1.0), 78.844);
    }
  }
  float v22 = v12;
  if (*(unsigned char *)a4)
  {
    float v23 = powf(v12, *(float *)(a3 + 144));
    float v24 = fmax((float)((float)(*(float *)(a3 + 148) + (float)(*(float *)(a3 + 152) * v23))/ (float)((float)(*(float *)(a3 + 156) * v23) + 1.0)), 0.0);
    float v22 = powf(v24, 0.33333);
    if (hasTrim((float *)a3))
    {
      float v25 = fmax((float)(*(float *)(a3 + 240) + (float)(v22 * *(float *)(a3 + 236))), 0.0);
      float v22 = powf(v25, *(float *)(a3 + 244));
    }
    if (*(unsigned char *)(a3 + 481)) {
      float v22 = applyLinearStretchInPQ(v22, *(float *)(a4 + 124), *(float *)(a4 + 120));
    }
  }
  *(float *)&double v26 = applyEdrAdaptationCurveS(a5, v22);
  applyAmbAdaptationCurveS_C(a6, v26);
}

float dovi_getScalingFactorForPT(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  float v13 = a1;
  if (a7)
  {
    BOOL v14 = a1 < 0.00000073096;
    float v15 = -(float)(a1 + -0.0000014619);
    if (a1 >= 0.00000073096) {
      float v15 = a1;
    }
    float v16 = flt_2222D1868[v14];
    float v17 = powf(v15, 0.012683);
    float v18 = fmax((float)((float)(v17 + -0.83594) / (float)((float)(v17 * -18.688) + 18.852)), 0.0);
    float v19 = powf(v18, 6.2774);
    float v20 = powf((float)(v16 * v19) / 1000.0, *(float *)(a3 + 284) + 1.0) * 1000.0;
    if (v20 >= 0.0)
    {
      float v22 = powf(v20 * 0.0001, 0.1593);
      float v13 = powf((float)((float)(v22 * 18.852) + 0.83594) / (float)((float)(v22 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v21 = powf(v20 * -0.0001, 0.1593);
      float v13 = 0.0000014619 - powf((float)((float)(v21 * 18.852) + 0.83594) / (float)((float)(v21 * 18.688) + 1.0), 78.844);
    }
  }
  float v23 = v13;
  if (*(unsigned char *)a4)
  {
    float v24 = powf(v13, *(float *)(a3 + 144));
    float v25 = fmax((float)((float)(*(float *)(a3 + 148) + (float)(*(float *)(a3 + 152) * v24))/ (float)((float)(*(float *)(a3 + 156) * v24) + 1.0)), 0.0);
    float v26 = powf(v25, 0.33333);
    if (hasTrim((float *)a3))
    {
      float v27 = fmax((float)(*(float *)(a3 + 240) + (float)(v26 * *(float *)(a3 + 236))), 0.0);
      float v26 = powf(v27, *(float *)(a3 + 244));
    }
    float v28 = *(float *)(a4 + 140);
    float v23 = powf(v26, v28);
    if (v28 <= 0.0) {
      float v23 = v26;
    }
    if (*(unsigned char *)(a3 + 481)) {
      float v23 = applyLinearStretchInPQ(v23, *(float *)(a4 + 124), *(float *)(a4 + 120));
    }
  }
  *(float *)&double v29 = applyEdrAdaptationCurveS(a5, v23);
  double v30 = applyAmbAdaptationCurveS_C(a6, v29);
  if (a7)
  {
    float v31 = *(float *)&v30 / v13;
    if (v13 == 0.0) {
      float v31 = 1.0;
    }
    float v32 = fmaxf(v31, 0.5);
    if (*(unsigned char *)(a3 + 480)) {
      float v31 = v32;
    }
    float v33 = (float)(v13 * fminf(v31, 2.0)) / a1;
  }
  else
  {
    float v34 = *(float *)&v30 / a1;
    if (a1 == 0.0) {
      float v34 = 1.0;
    }
    float v35 = fmaxf(v34, 0.5);
    if (*(unsigned char *)(a3 + 480)) {
      float v34 = v35;
    }
    float v33 = fminf(v34, 2.0);
  }
  return 1.0 - (float)(v13 - (float)(v33 * a1));
}

void dovi_setScalingFactorTableS_C_deprecated(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    unint64_t v14 = 0;
    unsigned int v15 = 1;
    do
    {
      dovi_getScalingFactor(*(float *)(a2 + 4 * v14), a1, a4, a5, a6, a7, 0);
      *(_DWORD *)(a1 + 4 * v14) = v16;
      unint64_t v14 = v15++;
    }
    while (v14 < a3);
  }
}

float hlg_getScalingFactor(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8)
{
  id v14 = a8;
  float v15 = *(float *)(a4 + 1436);
  if (v15 >= 0.0)
  {
    float v18 = powf(v15 * 0.0001, 0.1593);
    float v17 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v16 = powf(v15 * -0.0001, 0.1593);
    float v17 = 0.0000014619 - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
  }
  int v19 = *(_DWORD *)(a4 + 1400);
  float v20 = v17 * hlg_applyTonemapCurveS(a4, a3, v14, a1);
  if (a7 != -1 && *(unsigned char *)(a4 + 1424)) {
    float v20 = applyEdrAdaptationCurveS(a5, v20);
  }
  if (*(unsigned char *)(a3 + 481))
  {
    if (v19 == 3)
    {
      float v21 = *(float *)(a4 + 1396);
      if (v21 != 1.0) {
        float v20 = *(float *)(a4 + 1392) + (float)((float)(v20 - *(float *)(a4 + 1392)) * v21);
      }
    }
    else if (v19 == 2)
    {
      float v20 = applyLinearStretchInPQ(v20, *(float *)(a4 + 1388), *(float *)(a4 + 1384));
    }
  }
  if (a7 == -1 || !*(unsigned char *)(a4 + 1424))
  {
    BOOL v23 = v20 < 0.00000073096;
    if (v20 < 0.00000073096) {
      float v20 = -(float)(v20 + -0.0000014619);
    }
    float v24 = flt_2222D1868[v23];
    float v25 = powf(v20, 0.012683);
    float v26 = fmax((float)((float)(v25 + -0.83594) / (float)((float)(v25 * -18.688) + 18.852)), 0.0);
    float v22 = v24 * powf(v26, 6.2774);
  }
  else
  {
    float v22 = applyAmbAdaptationCurveS(a6, v20);
  }
  float v27 = 1.0;
  if (a1 > 0.0) {
    float v27 = (float)(v22 / v15) / a1;
  }

  return v27;
}

void sub_222294E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void hlg_setScalingFactorTable(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, void *a9)
{
  id v17 = a9;
  id v20 = v17;
  if (a3)
  {
    unint64_t v18 = 0;
    unsigned int v19 = 1;
    do
    {
      *(float *)(a1 + 4 * v18) = hlg_getScalingFactor(*(float *)(a2 + 4 * v18), (uint64_t)v17, a4, a5, a6, a7, a8, v20);
      unint64_t v18 = v19++;
    }
    while (v18 < a3);
  }
}

void sub_222294EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void hlg_setScalingFactorTable_C(uint64_t a1, float *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, void *a9)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v16 = a9;
  id v17 = (void *)v16;
  if (a3 > 0x400)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v24 = logInstanceID;
      }
      else {
        uint64_t v24 = prevLogInstanceID;
      }
      uint64_t v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      if (v16)
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v32 = WORD1(v24);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 3149\n", buf, 0xCu);
      }
      prevLogInstanceID = v24;
    }
    else
    {
      uint64_t v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      if (v16)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 3149\n", buf, 2u);
      }
    }
    _MergedGlobals_5 = 0;
    goto LABEL_25;
  }
  if (_MergedGlobals_5 != 1 || qword_26ABE1E10 != a3)
  {
    int v29 = a8;
    if (a3)
    {
      unsigned int v19 = hlg_setScalingFactorTable_C::HLG2L_cache;
      id v20 = a2;
      unint64_t v21 = a3;
      do
      {
        float v22 = *v20;
        if (*v20 <= 0.5) {
          float v23 = (float)(v22 * v22) / 3.0;
        }
        else {
          float v23 = (exp((v22 + -0.55991073) / 0.17883277) + 0.28466892) / 12.0;
        }
        *v19++ = v23;
        ++v20;
        --v21;
      }
      while (v21);
    }
    qword_26ABE1E10 = a3;
    _MergedGlobals_5 = 1;
    a8 = v29;
  }
  if (a3)
  {
LABEL_25:
    unint64_t v25 = 0;
    unsigned int v26 = 1;
    do
    {
      if (_MergedGlobals_5 == 1)
      {
        float v27 = hlg_setScalingFactorTable_C::HLG2L_cache[v25];
      }
      else
      {
        float v28 = a2[v25];
        if (v28 <= 0.5) {
          float v27 = (float)(v28 * v28) / 3.0;
        }
        else {
          float v27 = (exp((v28 + -0.55991073) / 0.17883277) + 0.28466892) / 12.0;
        }
      }
      *(float *)(a1 + 4 * v25) = hlg_getScalingFactor(v27, v16, a4, a5, a6, a7, a8, v17);
      unint64_t v25 = v26++;
    }
    while (v25 < a3);
  }
}

void sub_222295200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void hdr10_setupTmPreset(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  BOOL v4 = *(_DWORD *)(a2 + 8) == 1 && *(_DWORD *)(a2 + 40) == 2;
  int v5 = 0;
  if ((*(unsigned char *)(a3 + 152) & 2) == 0 && !v4)
  {
    int v6 = *(_DWORD *)(a2 + 40) - 6;
    if (v6 > 2) {
      int v5 = 7;
    }
    else {
      int v5 = dword_2222D3378[v6];
    }
  }
  *a4 = v5;
}

void hdr10_setupTmParams(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v10 = a3 + 340;
  id v188 = a4;
  id v11 = a6;
  *(_DWORD *)(a3 + 224) = -1;
  float v12 = *(float *)(a3 + 24);
  float v13 = 1.0 / *(float *)(a3 + 28);
  float v14 = *(float *)(a3 + 188);
  *(_DWORD *)(a3 + 240) = *(_DWORD *)(a3 + 184);
  *(float *)(a3 + 244) = v13;
  *(float *)(a3 + 248) = v12;
  float v15 = *(float *)(a3 + 36);
  float v16 = 15916.0;
  if ((float)(v15 + -5.093) <= 15916.0) {
    float v16 = v15 + -5.093;
  }
  if ((float)(v15 + -5.093) < 0.0) {
    float v16 = 0.0;
  }
  float v17 = *(float *)(a3 + 192);
  *(float *)(a3 + 256) = *(float *)(a3 + 196) * (float)(v14 * v16);
  float v18 = fmaxf(*(float *)(a2 + 152), 0.0);
  *(float *)(a3 + 260) = v18;
  unsigned int v19 = *(_DWORD *)(a2 + 148);
  float v20 = (float)v19;
  if (!v19) {
    float v20 = 1000.0;
  }
  *(float *)(a3 + 264) = v20;
  double v21 = v17;
  double v22 = *(double *)a3;
  double v23 = *(double *)a3 * v21;
  *(float *)&double v21 = fmax(v23, 0.0);
  *(_DWORD *)(a3 + 272) = LODWORD(v21);
  *(_DWORD *)(a3 + 268) = LODWORD(v21);
  *(float *)&double v21 = v22;
  *(_DWORD *)(a3 + 276) = LODWORD(v21);
  *(float *)(a3 + 280) = fminf(*(float *)(a1 + 280), 4000.0);
  *(float *)(a3 + 288) = v18;
  *(float *)(a3 + 292) = v20;
  *(_DWORD *)(a3 + 296) = *(_DWORD *)(a3 + 208);
  *(_DWORD *)(a3 + 300) = 1092616192;
  if (v15 >= 0.0)
  {
    float v26 = powf(v15 * 0.0001, 0.1593);
    float v25 = powf((float)((float)(v26 * 18.852) + 0.83594) / (float)((float)(v26 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v24 = powf(v15 * -0.0001, 0.1593);
    float v25 = 0.0000014619 - powf((float)((float)(v24 * 18.852) + 0.83594) / (float)((float)(v24 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 304) = v25;
  float v27 = powf(v12 / 10000.0, 0.1593);
  float v28 = (v27 * 18.8515625 + 0.8359375) / (v27 * 18.6875 + 1.0);
  float v30 = powf(v28, 78.844);
  float v31 = 1.0;
  if (v30 <= 1.0) {
    float v31 = v30;
  }
  BOOL v32 = v30 < 0.0;
  float v33 = 0.0;
  if (!v32) {
    float v33 = v31;
  }
  *(float *)(a3 + 308) = v33;
  float v34 = v23;
  *(float *)(a3 + 284) = v34;
  *(unsigned char *)(a3 + 411) = 0;
  if (!*(unsigned char *)(v10 + 4016) || (int v35 = *(_DWORD *)(a3 + 220)) == 0 || v35 == 6)
  {
    setupHistogramBasedToneMapping(a1, a3, a3 + 220, v11, 8, 0, 1, 13, 5);
    goto LABEL_96;
  }
  int v36 = *(unsigned __int8 *)(v10 + 3988);
  uint64_t Config = (HDRConfig *)GetConfig(v29);
  if (Config)
  {
    unsigned int v38 = GetConfig(Config);
    uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v38, 0x5Fu, 0);
    if (v36) {
      BOOL v39 = *(unsigned char *)Config == 0;
    }
    else {
      BOOL v39 = 1;
    }
    int v40 = !v39;
    int v187 = v40;
  }
  else
  {
    int v187 = 0;
  }
  ConfigEntryValue = (HDRConfig *)GetConfig(Config);
  if (ConfigEntryValue)
  {
    uint64_t v42 = GetConfig(ConfigEntryValue);
    ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v42, 0x8Bu, 0);
    int v173 = *(_DWORD *)ConfigEntryValue;
  }
  else
  {
    int v173 = 0;
  }
  uint64_t v43 = (HDRConfig *)GetConfig(ConfigEntryValue);
  if (v43)
  {
    CFDataRef v44 = GetConfig(v43);
    uint64_t v43 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v44, 0x8Du, 0);
    int v175 = *(_DWORD *)v43;
  }
  else
  {
    int v175 = 0;
  }
  long long v45 = GetConfig(v43);
  if (v45)
  {
    simd_float3 v47 = GetConfig((HDRConfig *)v45);
    int v48 = *(_DWORD *)HDRConfig::GetConfigEntryValue((uint64_t)v47, 0x8Eu, 0);
  }
  else
  {
    int v48 = 0;
  }
  LODWORD(v46) = *(_DWORD *)(a3 + 4296);
  *(double *)&unint64_t v49 = (double)v46 / 10.0;
  float v50 = *(double *)&v49;
  LODWORD(v49) = *(_DWORD *)(a3 + 4324);
  *(double *)&unint64_t v51 = (double)v49 / 10.0;
  float v52 = *(double *)&v51;
  LODWORD(v51) = *(_DWORD *)(a3 + 4320);
  *(double *)&unint64_t v53 = (double)v51 / 10.0;
  float v54 = *(double *)&v53;
  LODWORD(v53) = *(_DWORD *)(a3 + 4312);
  *(double *)&unint64_t v55 = (double)v53 / 10.0;
  *(float *)&unsigned int v56 = *(double *)&v55;
  LODWORD(v55) = *(_DWORD *)(a3 + 4308);
  double v57 = (double)v55 / 10.0;
  *(float *)&double v57 = v57;
  float v185 = *(float *)&v57;
  LODWORD(v57) = *(_DWORD *)(a3 + 4304);
  double v58 = (double)*(unint64_t *)&v57 / 10.0;
  *(float *)&double v58 = v58;
  unint64_t v179 = __PAIR64__(v56, LODWORD(v58));
  LODWORD(v58) = *(_DWORD *)(a3 + 4292);
  *(double *)&unint64_t v59 = (double)*(unint64_t *)&v58 / 10.0;
  *(float *)&unint64_t v59 = *(double *)&v59;
  float v177 = *(float *)&v59;
  LODWORD(v59) = *(_DWORD *)(a3 + 4276);
  unint64_t v171 = v59;
  float v172 = v50;
  float v60 = powf(v50 * 0.0001, 0.1593);
  float v170 = powf((float)((float)(v60 * 18.852) + 0.83594) / (float)((float)(v60 * 18.688) + 1.0), 78.844);
  float v61 = powf(v52 * 0.0001, 0.1593);
  float v178 = powf((float)((float)(v61 * 18.852) + 0.83594) / (float)((float)(v61 * 18.688) + 1.0), 78.844);
  float v62 = powf(v54 * 0.0001, 0.1593);
  float v169 = powf((float)((float)(v62 * 18.852) + 0.83594) / (float)((float)(v62 * 18.688) + 1.0), 78.844);
  float v63 = powf(*((float *)&v179 + 1) * 0.0001, 0.1593);
  float v184 = powf((float)((float)(v63 * 18.852) + 0.83594) / (float)((float)(v63 * 18.688) + 1.0), 78.844);
  float v64 = powf(v185 * 0.0001, 0.1593);
  float v183 = powf((float)((float)(v64 * 18.852) + 0.83594) / (float)((float)(v64 * 18.688) + 1.0), 78.844);
  float v65 = powf(*(float *)&v179 * 0.0001, 0.1593);
  float v182 = powf((float)((float)(v65 * 18.852) + 0.83594) / (float)((float)(v65 * 18.688) + 1.0), 78.844);
  float v66 = powf(v177 * 0.0001, 0.1593);
  float v174 = powf((float)((float)(v66 * 18.852) + 0.83594) / (float)((float)(v66 * 18.688) + 1.0), 78.844);
  if (v187)
  {
    float v67 = v185;
  }
  else
  {
    switch(v175)
    {
      case 3:
        float v68 = v178 * 0.6 + v170 * 0.3 + v169 * 0.1;
        BOOL v69 = v68 < 0.00000073096;
        if (v68 < 0.00000073096) {
          float v68 = -(float)(v68 + -0.0000014619);
        }
        float v70 = flt_2222D1868[v69];
        float v71 = powf(v68, 0.012683);
        float v72 = fmax((float)((float)(v71 + -0.83594) / (float)((float)(v71 * -18.688) + 18.852)), 0.0);
        float v52 = v70 * powf(v72, 6.2774);
        break;
      case 2:
        float v52 = v52 * 0.5 + v172 * 0.3 + v54 * 0.2;
        break;
      case 1:
        float v52 = v172;
        break;
    }
    float v67 = v185;
  }
  if (v48 == 3)
  {
    float v74 = v183 * 0.5 + v184 * 0.2 + v182 * 0.3;
    BOOL v75 = v74 < 0.00000073096;
    if (v74 < 0.00000073096) {
      float v74 = -(float)(v74 + -0.0000014619);
    }
    float v76 = flt_2222D1868[v75];
    float v77 = powf(v74, 0.012683);
    float v78 = fmax((float)((float)(v77 + -0.83594) / (float)((float)(v77 * -18.688) + 18.852)), 0.0);
    float v67 = v76 * powf(v78, 6.2774);
    goto LABEL_57;
  }
  if (v48 == 2)
  {
    double v73 = v67 * 0.5 + *((float *)&v179 + 1) * 0.2 + *(float *)&v179 * 0.3;
    goto LABEL_56;
  }
  if (v48 != 1)
  {
    double v73 = (double)v171 / 10.0;
LABEL_56:
    float v67 = v73;
  }
LABEL_57:
  if (v52 >= 0.0)
  {
    float v81 = powf(v52 * 0.0001, 0.1593);
    float v80 = powf((float)((float)(v81 * 18.852) + 0.83594) / (float)((float)(v81 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v79 = powf(v52 * -0.0001, 0.1593);
    float v80 = 0.0000014619 - powf((float)((float)(v79 * 18.852) + 0.83594) / (float)((float)(v79 * 18.688) + 1.0), 78.844);
  }
  if (v67 >= 0.0)
  {
    float v84 = powf(v67 * 0.0001, 0.1593);
    float v83 = powf((float)((float)(v84 * 18.852) + 0.83594) / (float)((float)(v84 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v82 = powf(v67 * -0.0001, 0.1593);
    float v83 = 0.0000014619 - powf((float)((float)(v82 * 18.852) + 0.83594) / (float)((float)(v82 * 18.688) + 1.0), 78.844);
  }
  float v85 = *(float *)(a3 + 260);
  if (v85 >= 0.0)
  {
    float v88 = powf(v85 * 0.0001, 0.1593);
    float v87 = powf((float)((float)(v88 * 18.852) + 0.83594) / (float)((float)(v88 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v86 = powf(v85 * -0.0001, 0.1593);
    float v87 = 0.0000014619 - powf((float)((float)(v86 * 18.852) + 0.83594) / (float)((float)(v86 * 18.688) + 1.0), 78.844);
  }
  float v89 = fmax(fmin(v83, 0.9997558), 0.0);
  double v90 = v87;
  if (v89 + -0.000244200244 <= v90) {
    double v90 = v89 + -0.000244200244;
  }
  float v91 = fmax(v90, 0.0);
  float v186 = v91;
  double v92 = v89 + 0.000244200244;
  double v93 = fmin(v80, 1.0);
  if (v92 < v93) {
    double v92 = v93;
  }
  float v94 = v92;
  if (v94 >= 0.00000073096)
  {
    float v95 = 10000.0;
  }
  else
  {
    float v94 = -(float)(v94 + -0.0000014619);
    float v95 = -10000.0;
  }
  float v180 = v95;
  float v96 = powf(v94, 0.012683);
  float v97 = fmax((float)((float)(v96 + -0.83594) / (float)((float)(v96 * -18.688) + 18.852)), 0.0);
  float v181 = v180 * powf(v97, 6.2774);
  *(float *)(a3 + 292) = v181;
  float v98 = -(float)(v89 + -0.0000014619);
  if (v89 < 0.00000073096)
  {
    float v99 = -10000.0;
  }
  else
  {
    float v98 = v89;
    float v99 = 10000.0;
  }
  float v176 = v99;
  float v100 = powf(v98, 0.012683);
  float v101 = fmax((float)((float)(v100 + -0.83594) / (float)((float)(v100 * -18.688) + 18.852)), 0.0);
  *(float *)(a3 + 300) = v176 * powf(v101, 6.2774);
  float v102 = -(float)(v186 + -0.0000014619);
  if (v186 < 0.00000073096)
  {
    float v103 = -10000.0;
  }
  else
  {
    float v102 = v186;
    float v103 = 10000.0;
  }
  float v104 = powf(v102, 0.012683);
  float v105 = fmax((float)((float)(v104 + -0.83594) / (float)((float)(v104 * -18.688) + 18.852)), 0.0);
  *(float *)(a3 + 288) = v103 * powf(v105, 6.2774);
  LODWORD(v106) = *(_DWORD *)(a3 + 296);
  if (*(float *)&v106 < v181) {
    *(float *)&unint64_t v106 = v181;
  }
  *(_DWORD *)(a3 + 296) = v106;
  if (v187)
  {
    *(unsigned char *)(a3 + 409) = 0;
    *(_DWORD *)(a3 + 220) = 13;
    LOWORD(v106) = *(_WORD *)(a3 + 4330);
    double v107 = 4095.0;
    double v108 = (double)v106 / 4095.0;
    *(float *)&double v108 = v108;
    *(_DWORD *)(a3 + 412) = LODWORD(v108);
    LOWORD(v108) = *(_WORD *)(a3 + 4332);
    *(float *)&double v108 = (double)*(unint64_t *)&v108 / 4095.0;
    *(_DWORD *)(a3 + 416) = LODWORD(v108);
    uint64_t v109 = *(unsigned __int8 *)(v10 + 3994);
    *(_DWORD *)(a3 + 420) = v109;
    float v110 = v174;
    if (v109)
    {
      uint64_t v111 = 0;
      uint64_t v112 = a3 + 4336;
      do
      {
        LOWORD(v107) = *(_WORD *)(v112 + 2 * v111);
        double v107 = (double)*(unint64_t *)&v107 / 1023.0;
        *(float *)&double v107 = v107;
        *(_DWORD *)(v112 + 4 * v111++ - 3912) = LODWORD(v107);
      }
      while (v109 != v111);
    }
    else
    {
      uint64_t v109 = 0;
    }
    *(_DWORD *)(a3 + 4 * v109 + 424) = 1065353216;
    *(float *)(a3 + 464) = (float)*(unsigned int *)(a3 + 4260);
  }
  else
  {
    float v110 = v174;
    if (v173 == 10)
    {
      *(unsigned char *)(a3 + 409) = 0;
      *(_DWORD *)(a3 + 220) = 10;
    }
    else
    {
      *(unsigned char *)(a3 + 409) = 1;
      *(_DWORD *)(a3 + 220) = v173;
    }
  }
  *(_DWORD *)(a3 + 236) = 13;
  *(_DWORD *)(a3 + 252) = 5;
  *(_DWORD *)(a3 + 404) = 5;
  *(float *)(a3 + 372) = v110;
  *(float *)(a3 + 376) = v182;
  *(float *)(a3 + 380) = v183;
  *(_OWORD *)uint64_t v10 = xmmword_2222D2360;
  *(float *)(a3 + 384) = v184;
  *(_DWORD *)(a3 + 356) = 1065349861;
  *(float *)(a3 + 388) = v178;
  if (overrideAmbAdaptationMode <= 6) {
    *(_DWORD *)(a3 + 252) = overrideAmbAdaptationMode;
  }
  if (overrideEdrAdaptationMode <= 0x13) {
    *(_DWORD *)(a3 + 236) = overrideEdrAdaptationMode;
  }
  *(unsigned char *)(a3 + 411) = 1;
LABEL_96:
  int v113 = overrideCminNits;
  if (*(float *)&overrideCminNits < 0.0) {
    int v113 = *(_DWORD *)(a3 + 288);
  }
  *(_DWORD *)(a3 + 288) = v113;
  int v114 = overrideCmaxNits;
  if (*(float *)&overrideCmaxNits < 0.0) {
    int v114 = *(_DWORD *)(a3 + 292);
  }
  *(_DWORD *)(a3 + 292) = v114;
  int v115 = overrideCmidNits;
  if (*(float *)&overrideCmidNits < 0.0) {
    int v115 = *(_DWORD *)(a3 + 300);
  }
  *(_DWORD *)(a3 + 300) = v115;
  int v116 = *(_DWORD *)(a3 + 220);
  switch(v116)
  {
    case 7:
      int v117 = 2;
      break;
    case 12:
      int v117 = 4;
      break;
    case 8:
      int v117 = 3;
      break;
    default:
      goto LABEL_109;
  }
  *(_DWORD *)(a3 + 232) = v117;
LABEL_109:
  *(unsigned char *)(a3 + 408) = 1;
  hdr10_calculateTonemapCurveParamS(a3 + 220, a1, v188, a3 + 468);
  hdr10_generateEdrAdaptationDataS(a3 + 220, a3 + 468, a1, v188, a3 + 3776);
  calculateEdrAdaptationParamS((float *)(a3 + 3776), a3 + 3936);
  hdr10_generateAmbAdaptationDataS(a3 + 220, a3 + 468, a3 + 3776, a3 + 3936, a1, v188, a3 + 4060);
  calculateAmbAdaptationParamS((float *)(a3 + 4060), a3 + 4104);
  uint64_t v118 = (long long *)(a1 + 336);
  *(_DWORD *)(a3 + 212) = *(_DWORD *)(a3 + 500);
  int v119 = *(_DWORD *)(a2 + 60);
  if (v119 == 1)
  {
    uint64_t v128 = 0;
    long long v130 = *v118;
    long long v129 = *(_OWORD *)(a1 + 352);
    long long v131 = *(_OWORD *)(a1 + 368);
    do
    {
      uint64_t v132 = (int *)((char *)&RGB709toRGBP3_coeff + 4 * v128);
      int v133 = *v132;
      long long v202 = v130;
      *(_DWORD *)((unint64_t)&v202 & 0xFFFFFFFFFFFFFFF3 | (4 * (v128 & 3))) = v133;
      long long v130 = v202;
      *(_DWORD *)(a1 + 344) = DWORD2(v202);
      *(void *)uint64_t v118 = v130;
      int v134 = v132[3];
      long long v204 = v129;
      *(_DWORD *)((unint64_t)&v204 & 0xFFFFFFFFFFFFFFF3 | (4 * (v128 & 3))) = v134;
      long long v129 = v204;
      *(_DWORD *)(a1 + 360) = DWORD2(v204);
      *(void *)(a1 + 352) = v129;
      int v135 = v132[6];
      long long v203 = v131;
      *(_DWORD *)((unint64_t)&v203 & 0xFFFFFFFFFFFFFFF3 | (4 * (v128 & 3))) = v135;
      long long v131 = v203;
      *(_DWORD *)(a1 + 376) = DWORD2(v203);
      *(void *)(a1 + 368) = v131;
      ++v128;
    }
    while (v128 != 3);
  }
  else if (v119 == 9)
  {
    uint64_t v120 = 0;
    long long v122 = *v118;
    long long v121 = *(_OWORD *)(a1 + 352);
    long long v123 = *(_OWORD *)(a1 + 368);
    do
    {
      uint64_t v124 = (int *)((char *)&RGB2020toRGBP3_coeff + 4 * v120);
      int v125 = *v124;
      long long v205 = v122;
      *(_DWORD *)((unint64_t)&v205 & 0xFFFFFFFFFFFFFFF3 | (4 * (v120 & 3))) = v125;
      long long v122 = v205;
      *(_DWORD *)(a1 + 344) = DWORD2(v205);
      *(void *)uint64_t v118 = v122;
      int v126 = v124[3];
      long long v207 = v121;
      *(_DWORD *)((unint64_t)&v207 & 0xFFFFFFFFFFFFFFF3 | (4 * (v120 & 3))) = v126;
      long long v121 = v207;
      *(_DWORD *)(a1 + 360) = DWORD2(v207);
      *(void *)(a1 + 352) = v121;
      int v127 = v124[6];
      long long v206 = v123;
      *(_DWORD *)((unint64_t)&v206 & 0xFFFFFFFFFFFFFFF3 | (4 * (v120 & 3))) = v127;
      long long v123 = v206;
      *(_DWORD *)(a1 + 376) = DWORD2(v206);
      *(void *)(a1 + 368) = v123;
      ++v120;
    }
    while (v120 != 3);
  }
  else
  {
    uint64_t v136 = 0;
    long long v138 = *v118;
    long long v137 = *(_OWORD *)(a1 + 352);
    long long v139 = *(_OWORD *)(a1 + 368);
    do
    {
      uint64_t v140 = (int *)&RGBtoRGBIdentity_coeff + v136;
      int v141 = *v140;
      long long v199 = v138;
      *(_DWORD *)((unint64_t)&v199 & 0xFFFFFFFFFFFFFFF3 | (4 * (v136 & 3))) = v141;
      long long v138 = v199;
      *(_DWORD *)(a1 + 344) = DWORD2(v199);
      *(void *)uint64_t v118 = v138;
      int v142 = v140[3];
      long long v201 = v137;
      *(_DWORD *)((unint64_t)&v201 & 0xFFFFFFFFFFFFFFF3 | (4 * (v136 & 3))) = v142;
      long long v137 = v201;
      *(_DWORD *)(a1 + 360) = DWORD2(v201);
      *(void *)(a1 + 352) = v137;
      int v143 = v140[6];
      long long v200 = v139;
      *(_DWORD *)((unint64_t)&v200 & 0xFFFFFFFFFFFFFFF3 | (4 * (v136 & 3))) = v143;
      long long v139 = v200;
      *(_DWORD *)(a1 + 376) = DWORD2(v200);
      *(void *)(a1 + 368) = v139;
      ++v136;
    }
    while (v136 != 3);
  }
  uint64_t v144 = 0;
  long long v145 = *(_OWORD *)(a1 + 384);
  do
  {
    int v146 = RGBP3toHLGY_coeff[v144];
    long long v198 = v145;
    *(_DWORD *)((unint64_t)&v198 & 0xFFFFFFFFFFFFFFF3 | (4 * (v144 & 3))) = v146;
    long long v145 = v198;
    *(_DWORD *)(a1 + 392) = DWORD2(v198);
    *(void *)(a1 + 384) = v145;
    ++v144;
  }
  while (v144 != 3);
  uint64_t v147 = *(void *)(a3 + 88);
  if (v147 == *MEMORY[0x263F03F08])
  {
    uint64_t v156 = 0;
    long long v158 = *(_OWORD *)(a1 + 400);
    long long v157 = *(_OWORD *)(a1 + 416);
    long long v159 = *(_OWORD *)(a1 + 432);
    do
    {
      uint64_t v160 = (int *)((char *)&RGBP3toRGB709_coeff + 4 * v156);
      int v161 = *v160;
      long long v189 = v158;
      *(_DWORD *)((unint64_t)&v189 & 0xFFFFFFFFFFFFFFF3 | (4 * (v156 & 3))) = v161;
      long long v158 = v189;
      *(_DWORD *)(a1 + 408) = DWORD2(v189);
      *(void *)(a1 + 400) = v158;
      int v162 = v160[3];
      long long v191 = v157;
      *(_DWORD *)((unint64_t)&v191 & 0xFFFFFFFFFFFFFFF3 | (4 * (v156 & 3))) = v162;
      long long v157 = v191;
      *(_DWORD *)(a1 + 424) = DWORD2(v191);
      *(void *)(a1 + 416) = v157;
      int v163 = v160[6];
      long long v190 = v159;
      *(_DWORD *)((unint64_t)&v190 & 0xFFFFFFFFFFFFFFF3 | (4 * (v156 & 3))) = v163;
      long long v159 = v190;
      *(_DWORD *)(a1 + 440) = DWORD2(v190);
      *(void *)(a1 + 432) = v159;
      ++v156;
    }
    while (v156 != 3);
  }
  else
  {
    long long v149 = *(_OWORD *)(a1 + 400);
    long long v148 = *(_OWORD *)(a1 + 416);
    long long v150 = *(_OWORD *)(a1 + 432);
    if (v147 == *MEMORY[0x263F03F00])
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v165 = (int *)((char *)&RGBP3toRGB2020_coeff + 4 * i);
        int v166 = *v165;
        long long v192 = v149;
        *(_DWORD *)((unint64_t)&v192 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) = v166;
        long long v149 = v192;
        *(_DWORD *)(a1 + 408) = DWORD2(v192);
        *(void *)(a1 + 400) = v149;
        int v167 = v165[3];
        long long v194 = v148;
        *(_DWORD *)((unint64_t)&v194 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) = v167;
        long long v148 = v194;
        *(_DWORD *)(a1 + 424) = DWORD2(v194);
        *(void *)(a1 + 416) = v148;
        int v168 = v165[6];
        long long v193 = v150;
        *(_DWORD *)((unint64_t)&v193 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) = v168;
        long long v150 = v193;
        *(_DWORD *)(a1 + 440) = DWORD2(v193);
        *(void *)(a1 + 432) = v150;
      }
    }
    else
    {
      for (uint64_t j = 0; j != 3; ++j)
      {
        uint64_t v152 = (int *)&RGBtoRGBIdentity_coeff + j;
        int v153 = *v152;
        long long v195 = v149;
        *(_DWORD *)((unint64_t)&v195 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) = v153;
        long long v149 = v195;
        *(_DWORD *)(a1 + 408) = DWORD2(v195);
        *(void *)(a1 + 400) = v149;
        int v154 = v152[3];
        long long v197 = v148;
        *(_DWORD *)((unint64_t)&v197 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) = v154;
        long long v148 = v197;
        *(_DWORD *)(a1 + 424) = DWORD2(v197);
        *(void *)(a1 + 416) = v148;
        int v155 = v152[6];
        long long v196 = v150;
        *(_DWORD *)((unint64_t)&v196 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) = v155;
        long long v150 = v196;
        *(_DWORD *)(a1 + 440) = DWORD2(v196);
        *(void *)(a1 + 432) = v150;
      }
    }
  }
}

void sub_2222963B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void setupHistogramBasedToneMapping(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6, BOOL a7, int a8, int a9)
{
  uint64_t Config = a4;
  float v17 = Config;
  if (*(_DWORD *)(a3 + 104) != 2 || *(unsigned char *)(a2 + 65) || *(_DWORD *)(a3 + 108))
  {
    BOOL v18 = 1;
  }
  else
  {
    uint64_t Config = (HDRConfig *)GetConfig(Config);
    if (Config)
    {
      double v23 = GetConfig(Config);
      uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v23, 0x21u, 0);
      BOOL v18 = *(unsigned char *)Config != 0;
    }
    else
    {
      BOOL v18 = 0;
    }
  }
  unsigned int v19 = GetConfig(Config);
  if (!v19) {
    goto LABEL_175;
  }
  float v20 = GetConfig((HDRConfig *)v19);
  ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v20, 0x1Du, 0);
  if (!*(unsigned char *)ConfigEntryValue || (*(unsigned char *)(a2 + 152) & 2) != 0) {
    goto LABEL_175;
  }
  int v22 = *(_DWORD *)(a3 + 104);
  if (v22 == 2)
  {
    if (*(_DWORD *)(a3 + 4) != 5 && *(_DWORD *)(a2 + 176) != 12) {
      goto LABEL_175;
    }
    if (*(_DWORD *)(a3 + 108) == 1)
    {
      float v24 = GetConfig(ConfigEntryValue);
      if (!v24) {
        goto LABEL_175;
      }
      float v25 = GetConfig((HDRConfig *)v24);
      int v26 = *(unsigned __int8 *)HDRConfig::GetConfigEntryValue((uint64_t)v25, 0x1Eu, 0);
      BOOL v27 = !v17 || v26 == 0;
      if (v27 || !v18) {
        goto LABEL_175;
      }
LABEL_30:
      float v30 = (HDRConfig *)[(HDRConfig *)v17 isDataValid];
      if (!v30) {
        goto LABEL_175;
      }
      float v31 = GetConfig(v30);
      if (v31)
      {
        BOOL v32 = GetConfig((HDRConfig *)v31);
        if (*(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v32, 0, 0))
        {
          Boolean keyExistsAndHasValidFormat = 1;
          CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"hdr10DefaultHistBasedTmMode", @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
          if ((unint64_t)(AppIntegerValue - 7) >= 6) {
            int v34 = 8;
          }
          else {
            int v34 = AppIntegerValue;
          }
          if (keyExistsAndHasValidFormat) {
            a5 = v34;
          }
          int v35 = CFPreferencesGetAppIntegerValue(@"hdr10ApplyStatsLegalizationMode", @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
          if (keyExistsAndHasValidFormat) {
            a6 = v35;
          }
          CFIndex v36 = CFPreferencesGetAppIntegerValue(@"htmUsePercentilesForStats", @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
          int v37 = keyExistsAndHasValidFormat;
          CFIndex v38 = CFPreferencesGetAppIntegerValue(@"overrideEdrAdaptationMode", @"com.apple.hdrprocessing", &keyExistsAndHasValidFormat);
          if (v37) {
            a7 = v36 != 0;
          }
          if ((unint64_t)(v38 + 1) >= 0x16) {
            int v39 = -1;
          }
          else {
            int v39 = v38;
          }
          if (keyExistsAndHasValidFormat) {
            a8 = v39;
          }
        }
      }
      if (a5 != -1) {
        *(_DWORD *)a3 = a5;
      }
      if (a8 != -1) {
        *(_DWORD *)(a3 + 16) = a8;
      }
      if (a9 != -1) {
        *(_DWORD *)(a3 + 32) = a9;
      }
      if (a7)
      {
        uint64_t v40 = [(HDRConfig *)v17 prctVal];
        float v41 = *(float *)(v40 + 4 * (int)([(HDRConfig *)v17 numPrct] - 1));
        float v42 = *(float *)(a3 + 40);
        if (v42 < 0.0)
        {
          float v43 = powf(v42 * -0.0001, 0.1593);
          float v44 = 0.0000014619
              - powf((float)((float)(v43 * 18.852) + 0.83594) / (float)((float)(v43 * 18.688) + 1.0), 78.844);
          goto LABEL_60;
        }
        float v47 = powf(v42 * 0.0001, 0.1593);
        float v46 = powf((float)((float)(v47 * 18.852) + 0.83594) / (float)((float)(v47 * 18.688) + 1.0), 78.844);
      }
      else
      {
        [(HDRConfig *)v17 maxVal];
        float v41 = v45;
        [(HDRConfig *)v17 minVal];
      }
      float v44 = v46;
LABEL_60:
      [(HDRConfig *)v17 avgVal];
      float v49 = v48;
      switch(a6)
      {
        case 0:
          float v50 = fmax(fmin(v48, 0.9997558), 0.0);
          float v128 = v50;
          double v51 = v50;
          double v52 = v51 + -0.000244200244;
          if (v51 + -0.000244200244 > v44) {
            double v52 = v44;
          }
          float v53 = fmax(v52, 0.0);
          float v127 = v53;
          double v54 = v51 + 0.000244200244;
          double v55 = fmin(v41, 1.0);
          if (v54 < v55) {
            double v54 = v55;
          }
          float v41 = v54;
          goto LABEL_160;
        case 1:
          float v56 = *(float *)(a3 + 44);
          if (v56 >= 0.0)
          {
            float v68 = powf(v56 * 0.0001, 0.1593);
            float v58 = powf((float)((float)(v68 * 18.852) + 0.83594) / (float)((float)(v68 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v57 = powf(v56 * -0.0001, 0.1593);
            float v58 = 0.0000014619
                - powf((float)((float)(v57 * 18.852) + 0.83594) / (float)((float)(v57 * 18.688) + 1.0), 78.844);
          }
          float v69 = *(float *)(a3 + 40);
          if (v69 >= 0.0)
          {
            float v83 = powf(v69 * 0.0001, 0.1593);
            float v71 = powf((float)((float)(v83 * 18.852) + 0.83594) / (float)((float)(v83 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v70 = powf(v69 * -0.0001, 0.1593);
            float v71 = 0.0000014619
                - powf((float)((float)(v70 * 18.852) + 0.83594) / (float)((float)(v70 * 18.688) + 1.0), 78.844);
          }
          if (v44 >= v58) {
            float v84 = v58;
          }
          else {
            float v84 = v44;
          }
          if (v71 >= v84) {
            float v85 = v71;
          }
          else {
            float v85 = v84;
          }
          if (v41 >= v58) {
            float v86 = v58;
          }
          else {
            float v86 = v41;
          }
          if (v71 >= v86) {
            float v41 = v71;
          }
          else {
            float v41 = v86;
          }
          if (v49 >= v41) {
            float v87 = v41;
          }
          else {
            float v87 = v49;
          }
          if (v85 >= v87) {
            float v87 = v85;
          }
          float v127 = v85;
          float v128 = v87;
          goto LABEL_160;
        case 2:
          float v59 = *(float *)(a3 + 44);
          if (v59 >= 0.0)
          {
            float v72 = powf(v59 * 0.0001, 0.1593);
            float v61 = powf((float)((float)(v72 * 18.852) + 0.83594) / (float)((float)(v72 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v60 = powf(v59 * -0.0001, 0.1593);
            float v61 = 0.0000014619
                - powf((float)((float)(v60 * 18.852) + 0.83594) / (float)((float)(v60 * 18.688) + 1.0), 78.844);
          }
          float v73 = *(float *)(a3 + 40);
          if (v73 >= 0.0)
          {
            float v88 = powf(v73 * 0.0001, 0.1593);
            float v75 = powf((float)((float)(v88 * 18.852) + 0.83594) / (float)((float)(v88 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v74 = powf(v73 * -0.0001, 0.1593);
            float v75 = 0.0000014619
                - powf((float)((float)(v74 * 18.852) + 0.83594) / (float)((float)(v74 * 18.688) + 1.0), 78.844);
          }
          if (v41 >= v61) {
            float v89 = v61;
          }
          else {
            float v89 = v41;
          }
          if (v75 >= v89) {
            float v41 = v75;
          }
          else {
            float v41 = v89;
          }
          double v90 = v41 + -0.000244200244;
          if (v90 > v49) {
            double v90 = v49;
          }
          if (v90 <= v75) {
            float v91 = v75;
          }
          else {
            float v91 = v90;
          }
          float v128 = v91;
          double v92 = v91 + -0.000244200244;
          if (v92 > v44) {
            double v92 = v44;
          }
          if (v92 > v75) {
            float v75 = v92;
          }
          goto LABEL_159;
        case 3:
          float v62 = *(float *)(a3 + 44);
          if (v62 >= 0.0)
          {
            float v76 = powf(v62 * 0.0001, 0.1593);
            float v64 = powf((float)((float)(v76 * 18.852) + 0.83594) / (float)((float)(v76 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v63 = powf(v62 * -0.0001, 0.1593);
            float v64 = 0.0000014619
                - powf((float)((float)(v63 * 18.852) + 0.83594) / (float)((float)(v63 * 18.688) + 1.0), 78.844);
          }
          float v77 = *(float *)(a3 + 40);
          if (v77 >= 0.0)
          {
            float v93 = powf(v77 * 0.0001, 0.1593);
            float v79 = powf((float)((float)(v93 * 18.852) + 0.83594) / (float)((float)(v93 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v78 = powf(v77 * -0.0001, 0.1593);
            float v79 = 0.0000014619
                - powf((float)((float)(v78 * 18.852) + 0.83594) / (float)((float)(v78 * 18.688) + 1.0), 78.844);
          }
          float v94 = *(float *)(a3 + 56);
          if (v94 >= 0.0)
          {
            float v99 = powf(v94 * 0.0001, 0.1593);
            float v96 = powf((float)((float)(v99 * 18.852) + 0.83594) / (float)((float)(v99 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v95 = powf(v94 * -0.0001, 0.1593);
            float v96 = 0.0000014619
                - powf((float)((float)(v95 * 18.852) + 0.83594) / (float)((float)(v95 * 18.688) + 1.0), 78.844);
          }
          if (v41 >= v64) {
            float v100 = v64;
          }
          else {
            float v100 = v41;
          }
          if (v79 >= v100) {
            float v41 = v79;
          }
          else {
            float v41 = v100;
          }
          goto LABEL_147;
        case 4:
          float v65 = *(float *)(a3 + 44);
          if (v65 >= 0.0)
          {
            float v80 = powf(v65 * 0.0001, 0.1593);
            float v67 = powf((float)((float)(v80 * 18.852) + 0.83594) / (float)((float)(v80 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v66 = powf(v65 * -0.0001, 0.1593);
            float v67 = 0.0000014619
                - powf((float)((float)(v66 * 18.852) + 0.83594) / (float)((float)(v66 * 18.688) + 1.0), 78.844);
          }
          float v81 = *(float *)(a3 + 40);
          if (v81 >= 0.0)
          {
            float v97 = powf(v81 * 0.0001, 0.1593);
            float v79 = powf((float)((float)(v97 * 18.852) + 0.83594) / (float)((float)(v97 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v82 = powf(v81 * -0.0001, 0.1593);
            float v79 = 0.0000014619
                - powf((float)((float)(v82 * 18.852) + 0.83594) / (float)((float)(v82 * 18.688) + 1.0), 78.844);
          }
          if (*(unsigned char *)(a1 + 481))
          {
            float v98 = *(float *)(a3 + 60);
          }
          else
          {
            float v98 = *(float *)(a3 + 56);
            float v101 = 40.0;
            if (v98 <= 40.0) {
              goto LABEL_140;
            }
          }
          if (v98 < 0.0)
          {
            float v102 = powf(v98 * -0.0001, 0.1593);
            float v96 = 0.0000014619
                - powf((float)((float)(v102 * 18.852) + 0.83594) / (float)((float)(v102 * 18.688) + 1.0), 78.844);
            goto LABEL_141;
          }
          float v101 = v98;
LABEL_140:
          float v103 = powf(v101 * 0.0001, 0.1593);
          float v96 = powf((float)((float)(v103 * 18.852) + 0.83594) / (float)((float)(v103 * 18.688) + 1.0), 78.844);
LABEL_141:
          if (v41 >= v67) {
            float v104 = v67;
          }
          else {
            float v104 = v41;
          }
          if (v96 >= v104) {
            float v41 = v96;
          }
          else {
            float v41 = v104;
          }
LABEL_147:
          double v105 = v41 + -0.000244200244;
          if (v105 > v49) {
            double v105 = v49;
          }
          if (v105 <= v79) {
            float v106 = v79;
          }
          else {
            float v106 = v105;
          }
          float v128 = v106;
          double v107 = v106 + -0.000244200244;
          double v108 = v96 + -0.000244200244;
          if (v107 < v108) {
            double v108 = v107;
          }
          if (v108 > v44) {
            double v108 = v44;
          }
          if (v108 <= v79)
          {
            float v75 = v79;
          }
          else
          {
            float v109 = v108;
            float v75 = v109;
          }
LABEL_159:
          float v127 = v75;
LABEL_160:
          float v110 = -(float)(v41 + -0.0000014619);
          if (v41 < 0.00000073096)
          {
            float v111 = -10000.0;
          }
          else
          {
            float v110 = v41;
            float v111 = 10000.0;
          }
          float v125 = v111;
          float v112 = powf(v110, 0.012683);
          float v113 = fmax((float)((float)(v112 + -0.83594) / (float)((float)(v112 * -18.688) + 18.852)), 0.0);
          float v126 = v125 * powf(v113, 6.2774);
          *(float *)(a3 + 72) = v126;
          float v114 = -(float)(v128 + -0.0000014619);
          if (v128 < 0.00000073096)
          {
            float v115 = -10000.0;
          }
          else
          {
            float v114 = v128;
            float v115 = 10000.0;
          }
          float v129 = v115;
          float v116 = powf(v114, 0.012683);
          float v117 = fmax((float)((float)(v116 + -0.83594) / (float)((float)(v116 * -18.688) + 18.852)), 0.0);
          *(float *)(a3 + 80) = v129 * powf(v117, 6.2774);
          float v118 = -(float)(v127 + -0.0000014619);
          if (v127 < 0.00000073096)
          {
            float v119 = -10000.0;
          }
          else
          {
            float v118 = v127;
            float v119 = 10000.0;
          }
          float v120 = powf(v118, 0.012683);
          float v121 = fmax((float)((float)(v120 + -0.83594) / (float)((float)(v120 * -18.688) + 18.852)), 0.0);
          *(float *)(a3 + 68) = v119 * powf(v121, 6.2774);
          float v122 = *(float *)(a3 + 76);
          if (v122 < v126) {
            float v122 = v126;
          }
          *(float *)(a3 + 76) = v122;
          uint64_t v123 = 0;
          *(_DWORD *)(a3 + 184) = [(HDRConfig *)v17 numPrct];
          while (v123 < (int)[(HDRConfig *)v17 numPrct])
          {
            uint64_t v124 = a3 + 4 * v123;
            *(_DWORD *)(v124 + 120) = *(_DWORD *)([(HDRConfig *)v17 pcntVal] + 4 * v123);
            *(_DWORD *)(v124 + 152) = *(_DWORD *)([(HDRConfig *)v17 prctVal] + 4 * v123++);
          }
          *(unsigned char *)(a3 + 189) = 1;
          break;
        default:
          float v127 = v44;
          float v128 = v48;
          goto LABEL_160;
      }
      goto LABEL_175;
    }
  }
  else if (v22 == 1 && (!*(_DWORD *)a3 || *(_DWORD *)a3 == 6))
  {
    goto LABEL_175;
  }
  char v29 = !v18;
  if (!v17) {
    char v29 = 1;
  }
  if ((v29 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_175:
  if (overrideAmbAdaptationMode <= 6) {
    *(_DWORD *)(a3 + 32) = overrideAmbAdaptationMode;
  }
  if (overrideEdrAdaptationMode <= 0x13) {
    *(_DWORD *)(a3 + 16) = overrideEdrAdaptationMode;
  }
}

void sub_2222971BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void dovi_setupTmPreset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(a3 + 152) & 2) != 0)
  {
    *(_DWORD *)(a4 + 8) = 0;
  }
  else
  {
    if (*(_DWORD *)(a2 + 40) == 7) {
      int v4 = 4;
    }
    else {
      int v4 = 5;
    }
    *(_DWORD *)(a4 + 8) = v4;
  }
}

void dovi_setupTmParams(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8, uint64_t a9, int a10, void *a11)
{
  id v69 = a11;
  unsigned int v18 = *(_DWORD *)(a2 + 40);
  BOOL v19 = v18 > 7;
  int v20 = (1 << v18) & 0xB8;
  if (v19 || v20 == 0)
  {
    if (a10 && *(_DWORD *)(a1 + 468) == 3) {
      *(_DWORD *)(a3 + 232) = 3;
    }
    *(_DWORD *)(a3 + 236) = 0;
    *(_DWORD *)(a3 + 252) = 0;
  }
  float v65 = a6;
  *(void *)(a3 + 220) = -1;
  int v22 = *(_DWORD *)(a3 + 24);
  float v23 = 1.0 / *(float *)(a3 + 28);
  float v24 = *(float *)(a3 + 188);
  *(_DWORD *)(a3 + 240) = *(_DWORD *)(a3 + 184);
  *(float *)(a3 + 244) = v23;
  *(_DWORD *)(a3 + 248) = v22;
  float v66 = *(float *)(a3 + 36);
  float v25 = 15916.0;
  if ((float)(v66 + -5.093) <= 15916.0) {
    float v25 = v66 + -5.093;
  }
  float v26 = 0.0;
  if ((float)(v66 + -5.093) >= 0.0) {
    float v26 = v25;
  }
  *(float *)(a3 + 256) = *(float *)(a3 + 196) * (float)(v24 * v26);
  float v27 = -(float)(a4 + -0.0000014619);
  if (a4 >= 0.00000073096) {
    float v27 = a4;
  }
  float v28 = 10000.0;
  if (a4 >= 0.00000073096) {
    float v29 = 10000.0;
  }
  else {
    float v29 = -10000.0;
  }
  float v30 = powf(v27, 0.012683);
  float v31 = fmax((float)((float)(v30 + -0.83594) / (float)((float)(v30 * -18.688) + 18.852)), 0.0);
  *(float *)(a3 + 260) = v29 * powf(v31, 6.2774);
  float v32 = -(float)(a5 + -0.0000014619);
  if (a5 < 0.00000073096)
  {
    float v33 = -10000.0;
  }
  else
  {
    float v32 = a5;
    float v33 = 10000.0;
  }
  float v68 = v33;
  float v34 = powf(v32, 0.012683);
  float v35 = fmax((float)((float)(v34 + -0.83594) / (float)((float)(v34 * -18.688) + 18.852)), 0.0);
  *(float *)(a3 + 264) = v68 * powf(v35, 6.2774);
  float v36 = -(float)(v65 + -0.0000014619);
  if (v65 < 0.00000073096) {
    float v28 = -10000.0;
  }
  else {
    float v36 = v65;
  }
  float v37 = powf(v36, 0.012683);
  float v38 = fmax((float)((float)(v37 + -0.83594) / (float)((float)(v37 * -18.688) + 18.852)), 0.0);
  float v39 = v28 * powf(v38, 6.2774);
  *(float *)(a3 + 272) = v39;
  *(float *)(a3 + 268) = v39;
  if (*(unsigned char *)(a1 + 481))
  {
    float v40 = *(double *)a3;
    float v41 = *(float *)(a1 + 280);
  }
  else
  {
    float v42 = -(float)(a7 + -0.0000014619);
    if (a7 >= 0.00000073096) {
      float v42 = a7;
    }
    float v43 = flt_2222D1868[a7 < 0.00000073096];
    float v44 = powf(v42, 0.012683);
    float v45 = fmax((float)((float)(v44 + -0.83594) / (float)((float)(v44 * -18.688) + 18.852)), 0.0);
    float v40 = v43 * powf(v45, 6.2774);
    float v41 = v40;
  }
  *(float *)(a3 + 276) = v40;
  *(float *)(a3 + 280) = v41;
  float32x2_t v46 = *(float32x2_t *)(a3 + 140);
  int8x8_t v47 = (int8x8_t)vcge_f32(v46, (float32x2_t)vdup_n_s32(0x354436E8u));
  int8x8_t v48 = vbsl_s8(v47, (int8x8_t)v46, (int8x8_t)vneg_f32(vadd_f32(v46, (float32x2_t)vdup_n_s32(0xB5C436E8))));
  float v61 = *(float *)v48.i32;
  float32x2_t v49 = (float32x2_t)vbsl_s8(v47, (int8x8_t)vdup_n_s32(0x461C4000u), (int8x8_t)vdup_n_s32(0xC61C4000));
  float v63 = powf(*(float *)&v48.i32[1], 0.012683);
  v50.f32[0] = powf(v61, 0.012683);
  v50.f32[1] = v63;
  float32x2_t v51 = vcvt_f32_f64(vmaxnmq_f64(vcvtq_f64_f32(vdiv_f32(vadd_f32(v50, (float32x2_t)vdup_n_s32(0xBF560000)), vmla_f32((float32x2_t)vdup_n_s32(0x4196D000u), (float32x2_t)vdup_n_s32(0xC1958000), v50))), (float64x2_t)0));
  float v62 = v51.f32[0];
  float v64 = powf(v51.f32[1], 6.2774);
  v52.f32[0] = powf(v62, 6.2774);
  v52.f32[1] = v64;
  *(float32x2_t *)(a3 + 288) = vmul_f32(v49, v52);
  *(_DWORD *)(a3 + 296) = 1176256512;
  float v53 = *(float *)(a3 + 136);
  if (v53 >= 0.00000073096)
  {
    float v54 = 10000.0;
  }
  else
  {
    float v53 = -(float)(v53 + -0.0000014619);
    float v54 = -10000.0;
  }
  float v55 = powf(v53, 0.012683);
  float v56 = fmax((float)((float)(v55 + -0.83594) / (float)((float)(v55 * -18.688) + 18.852)), 0.0);
  *(float *)(a3 + 300) = v54 * powf(v56, 6.2774);
  if (v66 >= 0.0)
  {
    float v59 = powf(v66 * 0.0001, 0.1593);
    float v58 = powf((float)((float)(v59 * 18.852) + 0.83594) / (float)((float)(v59 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v57 = powf(v66 * -0.0001, 0.1593);
    float v58 = 0.0000014619 - powf((float)((float)(v57 * 18.852) + 0.83594) / (float)((float)(v57 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 304) = v58;
  *(float *)(a3 + 308) = a8;
  *(unsigned char *)(a3 + 408) = 0;
  dovi_calculateTonemapCurveParamS(a3 + 220, a1, a3 + 3484);
  dovi_generateEdrAdaptationDataS(a3 + 220, a3 + 3484, a1, a3 + 3776, v69);
  calculateEdrAdaptationParamS((float *)(a3 + 3776), a3 + 3936);
  dovi_generateAmbAdaptationDataS(a3 + 220, a3 + 3484, a3 + 3776, a3 + 3936, a1, a3 + 4060);
  calculateAmbAdaptationParamS((float *)(a3 + 4060), a3 + 4104);
  *(_DWORD *)(a3 + 212) = *(_DWORD *)(a3 + 3520);
}

void sub_2222977B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  _Unwind_Resume(a1);
}

void hlg_setupTmPreset(HDRConfig *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a2 + 8);
  if (!v5)
  {
    BOOL v10 = 0;
    BOOL v9 = 0;
    unsigned int v8 = *(_DWORD *)(a2 + 40);
    BOOL v6 = v8 == 0;
    BOOL v7 = v8 == 2;
    if ((*(unsigned char *)(a3 + 152) & 2) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    int v11 = 1;
    goto LABEL_9;
  }
  if (v5 != 1 && v5 != 2)
  {
    BOOL v10 = 0;
    BOOL v9 = 0;
    BOOL v6 = 0;
    BOOL v7 = 0;
    unsigned int v8 = *(_DWORD *)(a2 + 40);
    if ((*(unsigned char *)(a3 + 152) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  BOOL v6 = 0;
  BOOL v7 = 0;
  unsigned int v8 = *(_DWORD *)(a2 + 40);
  BOOL v9 = v8 == 0;
  BOOL v10 = v8 == 2;
  if ((*(unsigned char *)(a3 + 152) & 2) != 0) {
    goto LABEL_8;
  }
LABEL_5:
  if (v6 || v7 && !*(unsigned char *)(a2 + 180))
  {
    *(_DWORD *)(a4 + 4) = 0;
    return;
  }
  if (v8 - 3 >= 3 && !*(unsigned char *)(a2 + 180) && v8 != 7)
  {
    if (v10)
    {
      int v11 = 6;
    }
    else if (v9)
    {
      int v11 = 10;
    }
    else
    {
      if (v8 > 8 || ((1 << v8) & 0x142) == 0)
      {
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v15 = logInstanceID;
          }
          else {
            uint64_t v15 = prevLogInstanceID;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v16 = 134217984;
            uint64_t v17 = WORD1(v15);
            _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 3860\n", (uint8_t *)&v16, 0xCu);
          }
          prevLogInstanceID = v15;
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v16) = 0;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 3860\n", (uint8_t *)&v16, 2u);
        }
        return;
      }
      int v11 = 5;
    }
LABEL_9:
    *(_DWORD *)(a4 + 4) = v11;
    return;
  }
  int v12 = *(_DWORD *)(a3 + 328);
  if (v12 == 1)
  {
    int v11 = 3;
    goto LABEL_9;
  }
  if (!v12)
  {
    uint64_t Config = GetConfig(a1);
    if (Config
      && (float v14 = GetConfig((HDRConfig *)Config), *(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v14, 0x48u, 0)))
    {
      int v11 = 12;
    }
    else
    {
      int v11 = 11;
    }
    goto LABEL_9;
  }
}

void sub_222298C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, id a18)
{
  _Unwind_Resume(a1);
}

void dovi84_setupTmPreset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(a3 + 152) & 2) != 0)
  {
    int v5 = 0;
  }
  else
  {
    int v4 = *(_DWORD *)(a3 + 328);
    if (v4)
    {
      if (v4 != 1) {
        return;
      }
      int v5 = 7;
    }
    else
    {
      int v5 = 6;
    }
  }
  *(_DWORD *)(a4 + 8) = v5;
}

void sub_22229942C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  _Unwind_Resume(a1);
}

void restoreDefaults(uint64_t Config, uint64_t a2, uint64_t a3)
{
  int v5 = (unsigned char *)Config;
  uint64_t v30 = *MEMORY[0x263EF8340];
  unsigned int v6 = *(_DWORD *)(a2 + 40);
  int v7 = *(_DWORD *)a2;
  BOOL v8 = *(_DWORD *)a2 == 1 && *(_DWORD *)(a2 + 176) == 16;
  BOOL v9 = (v6 & 0xFFFFFFFE) != 4;
  BOOL v10 = *(unsigned char *)(a3 + 76) == 0;
  int v11 = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a3 + 328) = v11;
  *(_DWORD *)(Config + 496) = *(_DWORD *)(a3 + 160);
  BOOL v12 = !v10 || (v6 & 0xFFFFFFFE) != 4;
  if (v10) {
    BOOL v9 = 1;
  }
  float v13 = 0.00030136;
  if (v9) {
    float v13 = 0.0;
  }
  if (!v12) {
    float v13 = 0.00013675;
  }
  *(float *)(a3 + 192) = v13;
  *(_DWORD *)(a3 + 196) = 1020591604;
  *(_DWORD *)(a3 + 208) = 1176256512;
  *(_DWORD *)(a3 + 236) = 1;
  *(_DWORD *)(a3 + 184) = 1063675494;
  *(_DWORD *)(a3 + 252) = 3;
  *(unsigned char *)(a3 + 409) = 0;
  int v14 = *(_DWORD *)(a3 + 324);
  int v15 = 1028442804;
  if (v14)
  {
    if (v14 == 4)
    {
      if (v11 != 1) {
        goto LABEL_25;
      }
    }
    else if (v14 != 2 || v11 != 1)
    {
      if ((v14 - 3) >= 0xFFFFFFFE)
      {
        if (unequalLUTSupport)
        {
          uint64_t Config = (uint64_t)GetConfig((HDRConfig *)Config);
          if (Config)
          {
            int v16 = GetConfig((HDRConfig *)Config);
            uint64_t Config = HDRConfig::GetConfigEntryValue((uint64_t)v16, 0x24u, 0);
            if (*(unsigned char *)Config) {
              int v15 = 1017370378;
            }
          }
        }
      }
      goto LABEL_25;
    }
    int v15 = 981668463;
  }
LABEL_25:
  *(_DWORD *)(a3 + 188) = v15;
  if (v6 - 3 > 2)
  {
    if ((v6 == 8 || v6 == 6) && (v7 == 2 || v8 && !*(unsigned char *)(a3 + 216)))
    {
      *(void *)(a3 + 200) = 0x3F80000000000001;
      goto LABEL_56;
    }
    if (v6 == 7)
    {
      if ((*(unsigned char *)(a3 + 152) & 2) != 0) {
        goto LABEL_54;
      }
    }
    else if ((v6 < 3 || v6 == 8 || v6 == 6) && (*(_DWORD *)(a2 + 156) - 1) <= 1)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v18 = logInstanceID;
        }
        else {
          uint64_t v18 = prevLogInstanceID;
        }
        uint64_t Config = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (Config)
        {
          int v28 = 134217984;
          uint64_t v29 = WORD1(v18);
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"hdrCtrl->displayPipelineCompensationType != kDisplayPipelineCompensationTypeNoneHeadrooomDependent && hdrCtrl->displayPipelineCompensationType != kDisplayPipelineCompensationTypeHeadroomDependent\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 4538\n", (uint8_t *)&v28, 0xCu);
        }
        prevLogInstanceID = v18;
      }
      else
      {
        uint64_t Config = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        if (Config)
        {
          LOWORD(v28) = 0;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"hdrCtrl->displayPipelineCompensationType != kDisplayPipelineCompensationTypeNoneHeadrooomDependent && hdrCtrl->displayPipelineCompensationType != kDisplayPipelineCompensationTypeHeadroomDependent\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/DolbyVisionDisplayManagement.mm\" at line 4538\n", (uint8_t *)&v28, 2u);
        }
      }
    }
    *(_DWORD *)(a3 + 204) = 1065353216;
    int v17 = *(_DWORD *)(a2 + 156);
    if (v17 == 2 || v17 == 1) {
      goto LABEL_55;
    }
LABEL_54:
    *(void *)(a3 + 200) = 0;
    goto LABEL_56;
  }
  *(_DWORD *)(a3 + 204) = 1065353216;
  int v17 = *(_DWORD *)(a2 + 156);
  if (v17 == 2 || v17 == 1) {
    goto LABEL_55;
  }
  if (!v17) {
    goto LABEL_54;
  }
  int v17 = 1;
LABEL_55:
  *(_DWORD *)(a3 + 200) = v17;
LABEL_56:
  int v19 = *(_DWORD *)(a3 + 324);
  if (v19 == 4)
  {
    if ((*(unsigned char *)(a3 + 152) & 2) != 0)
    {
      int v23 = 0;
    }
    else
    {
      int v22 = *(_DWORD *)(a3 + 328);
      if (v22)
      {
        if (v22 != 1) {
          goto LABEL_81;
        }
        int v23 = 7;
      }
      else
      {
        int v23 = 6;
      }
    }
  }
  else
  {
    int v20 = (int *)(a3 + 172);
    if (v19 == 2)
    {
      hlg_setupTmPreset((HDRConfig *)Config, a2, a3, (uint64_t)v20);
      goto LABEL_81;
    }
    if (v19 == 1)
    {
      BOOL v21 = *(_DWORD *)(a2 + 8) == 1 && *(_DWORD *)(a2 + 40) == 2;
      int v24 = 0;
      if ((*(unsigned char *)(a3 + 152) & 2) == 0 && !v21)
      {
        unsigned int v25 = *(_DWORD *)(a2 + 40) - 6;
        if (v25 > 2) {
          int v24 = 7;
        }
        else {
          int v24 = dword_2222D3378[v25];
        }
      }
      *int v20 = v24;
      goto LABEL_81;
    }
    if ((*(unsigned char *)(a3 + 152) & 2) != 0)
    {
      *(_DWORD *)(a3 + 180) = 0;
      goto LABEL_81;
    }
    if (*(_DWORD *)(a2 + 40) == 7) {
      int v23 = 4;
    }
    else {
      int v23 = 5;
    }
  }
  *(_DWORD *)(a3 + 180) = v23;
LABEL_81:
  *(void *)(a3 + 220) = 0x500000001;
  *(_DWORD *)(a3 + 232) = 2;
  *(void *)(a3 + 312) = 0x42C800003F400000;
  if ((v6 > 7 || ((1 << v6) & 0xB8) == 0) && !*(unsigned char *)(a2 + 180)) {
    goto LABEL_90;
  }
  int v26 = *(_DWORD *)(a3 + 324);
  if (v26 != 4 && v26 != 2) {
    goto LABEL_90;
  }
  *(_DWORD *)(a3 + 228) = 1;
  int v27 = *(_DWORD *)(a3 + 328);
  if (v27 == 1)
  {
    *(_DWORD *)(a3 + 228) = 2;
    goto LABEL_91;
  }
  if (!v27) {
LABEL_90:
  }
    *(_DWORD *)(a3 + 228) = 0;
LABEL_91:
  *(void *)(a3 + 3817) = 0;
  *(void *)(a3 + 3812) = 0;
  *(_OWORD *)(a3 + 3828) = xmmword_2222D2370;
  *(_DWORD *)(a3 + 320) = 1120403456;
  v5[480] = 1;
  if (v5[481])
  {
    *(_DWORD *)(a3 + 4256) = 1;
    if (v6 == 7 && !*(_DWORD *)(a2 + 156) && *(_DWORD *)(a3 + 104) == 16) {
      *(_DWORD *)(a3 + 4256) = 0;
    }
    v5[480] = 0;
  }
  if (*(unsigned char *)(a2 + 180)) {
    v5[480] = 0;
  }
  v5[483] = 0;
  v5[492] = 0;
}

uint64_t overrideDefaults(HDRConfig *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    restoreDefaults((uint64_t)a1, a2, a3);
  }
  uint64_t Config = (uint64_t)GetConfig(a1);
  if (Config)
  {
    uint64_t Config = (uint64_t)GetConfig((HDRConfig *)Config);
    if (*(_DWORD *)(Config + 11100))
    {
      if ((*(unsigned char *)(Config + 11096) & 0x80) != 0)
      {
        uint64_t Config = (uint64_t)GetConfig((HDRConfig *)Config);
        if (Config)
        {
          unsigned int v6 = GetConfig((HDRConfig *)Config);
          uint64_t Config = HDRConfig::GetConfigEntryValue((uint64_t)v6, 0x7Eu, 0);
          double v7 = *(double *)Config;
        }
        else
        {
          double v7 = 0.0;
        }
        float v8 = v7;
        *(float *)(a3 + 192) = v8;
      }
    }
  }
  uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)Config);
  if (ConfigEntryValue)
  {
    uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
    if (*(_DWORD *)(ConfigEntryValue + 11188))
    {
      if ((*(unsigned char *)(ConfigEntryValue + 11184) & 0x80) != 0)
      {
        uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
        if (ConfigEntryValue)
        {
          BOOL v10 = GetConfig((HDRConfig *)ConfigEntryValue);
          uint64_t ConfigEntryValue = HDRConfig::GetConfigEntryValue((uint64_t)v10, 0x7Fu, 0);
          double v11 = *(double *)ConfigEntryValue;
        }
        else
        {
          double v11 = 0.0;
        }
        float v12 = v11;
        *(float *)(a3 + 196) = v12;
      }
    }
  }
  uint64_t v13 = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
  if (v13)
  {
    uint64_t v13 = (uint64_t)GetConfig((HDRConfig *)v13);
    if (*(_DWORD *)(v13 + 8724))
    {
      if ((*(unsigned char *)(v13 + 8720) & 0x80) != 0)
      {
        uint64_t v13 = (uint64_t)GetConfig((HDRConfig *)v13);
        if (v13)
        {
          int v14 = GetConfig((HDRConfig *)v13);
          uint64_t v13 = HDRConfig::GetConfigEntryValue((uint64_t)v14, 0x63u, 0);
          int v15 = *(_DWORD *)v13;
        }
        else
        {
          int v15 = 0;
        }
        *(_DWORD *)(a3 + 188) = v15;
      }
    }
  }
  uint64_t v16 = (uint64_t)GetConfig((HDRConfig *)v13);
  if (v16)
  {
    uint64_t v16 = (uint64_t)GetConfig((HDRConfig *)v16);
    if (*(_DWORD *)(v16 + 9252))
    {
      if ((*(unsigned char *)(v16 + 9248) & 0x80) != 0)
      {
        uint64_t v16 = (uint64_t)GetConfig((HDRConfig *)v16);
        if (v16)
        {
          int v17 = GetConfig((HDRConfig *)v16);
          uint64_t v16 = HDRConfig::GetConfigEntryValue((uint64_t)v17, 0x69u, 0);
          int v18 = *(_DWORD *)v16;
        }
        else
        {
          int v18 = 0;
        }
        *(_DWORD *)(a3 + 200) = v18;
      }
    }
  }
  uint64_t v19 = (uint64_t)GetConfig((HDRConfig *)v16);
  if (v19)
  {
    uint64_t v19 = (uint64_t)GetConfig((HDRConfig *)v19);
    if (*(_DWORD *)(v19 + 9164))
    {
      if ((*(unsigned char *)(v19 + 9160) & 0x80) != 0)
      {
        uint64_t v19 = (uint64_t)GetConfig((HDRConfig *)v19);
        if (v19)
        {
          int v20 = GetConfig((HDRConfig *)v19);
          uint64_t v19 = HDRConfig::GetConfigEntryValue((uint64_t)v20, 0x68u, 0);
          int v21 = *(_DWORD *)v19;
        }
        else
        {
          int v21 = 0;
        }
        *(_DWORD *)(a3 + 204) = v21;
      }
    }
  }
  uint64_t v22 = (uint64_t)GetConfig((HDRConfig *)v19);
  if (v22)
  {
    uint64_t v22 = (uint64_t)GetConfig((HDRConfig *)v22);
    if (*(_DWORD *)(v22 + 4412))
    {
      if ((*(unsigned char *)(v22 + 4408) & 0x80) != 0 && (*(unsigned char *)(a3 + 152) & 2) == 0)
      {
        uint64_t v22 = (uint64_t)GetConfig((HDRConfig *)v22);
        if (v22)
        {
          int v23 = GetConfig((HDRConfig *)v22);
          uint64_t v22 = HDRConfig::GetConfigEntryValue((uint64_t)v23, 0x32u, 0);
          int v24 = *(_DWORD *)v22;
        }
        else
        {
          int v24 = 0;
        }
        *(_DWORD *)(a3 + 172) = v24;
      }
    }
  }
  uint64_t v25 = (uint64_t)GetConfig((HDRConfig *)v22);
  if (v25)
  {
    uint64_t v25 = (uint64_t)GetConfig((HDRConfig *)v25);
    if (*(_DWORD *)(v25 + 4764))
    {
      if ((*(unsigned char *)(v25 + 4760) & 0x80) != 0 && (*(unsigned char *)(a3 + 152) & 2) == 0)
      {
        uint64_t v25 = (uint64_t)GetConfig((HDRConfig *)v25);
        if (v25)
        {
          int v26 = GetConfig((HDRConfig *)v25);
          uint64_t v25 = HDRConfig::GetConfigEntryValue((uint64_t)v26, 0x36u, 0);
          int v27 = *(_DWORD *)v25;
        }
        else
        {
          int v27 = 0;
        }
        *(_DWORD *)(a3 + 176) = v27;
      }
    }
  }
  uint64_t v28 = (uint64_t)GetConfig((HDRConfig *)v25);
  if (v28)
  {
    uint64_t v28 = (uint64_t)GetConfig((HDRConfig *)v28);
    if (*(_DWORD *)(v28 + 1332))
    {
      if ((*(unsigned char *)(v28 + 1328) & 0x80) != 0 && (*(unsigned char *)(a3 + 152) & 2) == 0)
      {
        uint64_t v28 = (uint64_t)GetConfig((HDRConfig *)v28);
        if (v28)
        {
          uint64_t v29 = GetConfig((HDRConfig *)v28);
          uint64_t v28 = HDRConfig::GetConfigEntryValue((uint64_t)v29, 0xFu, 0);
          int v30 = *(_DWORD *)v28;
        }
        else
        {
          int v30 = 0;
        }
        *(_DWORD *)(a3 + 180) = v30;
      }
    }
  }
  uint64_t result = (uint64_t)GetConfig((HDRConfig *)v28);
  if (result)
  {
    uint64_t result = (uint64_t)GetConfig((HDRConfig *)result);
    if (*(_DWORD *)(result + 4676))
    {
      if ((*(unsigned char *)(result + 4672) & 0x80) != 0)
      {
        uint64_t result = (uint64_t)GetConfig((HDRConfig *)result);
        if (result)
        {
          float v32 = GetConfig((HDRConfig *)result);
          uint64_t result = HDRConfig::GetConfigEntryValue((uint64_t)v32, 0x35u, 0);
          int v33 = *(_DWORD *)result;
        }
        else
        {
          int v33 = 0;
        }
        *(_DWORD *)(a3 + 228) = v33;
      }
    }
  }
  return result;
}

void setSRGBDegammaBuffer(uint64_t a1, uint64_t a2, unint64_t a3, float a4, float a5)
{
  if (a3)
  {
    uint64_t v9 = 0;
    float v10 = 100.0 / a5;
    do
    {
      float v11 = *(float *)(a2 + 4 * v9);
      float v12 = v10;
      if (v11 < 1.0)
      {
        float v13 = v11 * a4;
        if ((float)(v11 * a4) >= 0.03928) {
          float v12 = powf((float)(v13 * 0.94787) + 0.052133, 2.4);
        }
        else {
          float v12 = v13 * 0.077399;
        }
      }
      *(float *)(a1 + 4 * v9++) = v12;
    }
    while (a3 > v9);
  }
}

void sub_222299E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222299F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22229A0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22229A234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t isHighHeadroomDisplay()
{
  return 0;
}

void sub_22229A618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22229A80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22229CE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Unwind_Resume(a1);
}

void adjustPeakWhiteBasedOnContent(uint64_t a1, uint64_t a2, int *a3, int a4, float *a5, float *a6, float *a7, float *a8, float a9, float *a10, void *a11)
{
  uint64_t Config = a11;
  unsigned int v20 = a3[10];
  float v53 = Config;
  if (a4 == 4 || a4 == 2)
  {
    if (a3[43] == 1)
    {
      if (v20 > 7 || ((1 << v20) & 0x98) == 0)
      {
        BOOL v21 = 0;
        float v23 = 100000.0;
      }
      else
      {
        float v23 = calculateHeadroomForInternalCapturesInternalOrRefDisplay(a1, (float *)a2, a4, Config, 100000.0);
        BOOL v21 = 0;
      }
      goto LABEL_23;
    }
    goto LABEL_12;
  }
  if (a4 || a3[43])
  {
LABEL_12:
    BOOL v21 = 0;
    goto LABEL_13;
  }
  BOOL v21 = *(_DWORD *)(a1 + 468) == 4;
LABEL_13:
  uint64_t Config = GetConfig((HDRConfig *)Config);
  float v23 = 100000.0;
  if (Config)
  {
    int v24 = GetConfig((HDRConfig *)Config);
    uint64_t Config = (unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v24, 0x13u, 0);
    if (*Config)
    {
      if (v20 <= 7 && ((1 << v20) & 0x98) != 0)
      {
        float v25 = *(float *)(a2 + 24);
        uint64_t ConfigEntryValue = (HDRConfig *)GetConfig((HDRConfig *)Config);
        float v27 = 0.0;
        float v28 = 0.0;
        if (ConfigEntryValue)
        {
          uint64_t v29 = GetConfig(ConfigEntryValue);
          uint64_t ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v29, 0x6Du, 0);
          float v28 = *(float *)ConfigEntryValue;
        }
        int v30 = GetConfig(ConfigEntryValue);
        if (v30)
        {
          float v31 = GetConfig((HDRConfig *)v30);
          float v27 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v31, 0x7Bu, 0);
        }
        float v23 = calculateAdaptiveHeadroom(v25, v28, v27);
      }
    }
  }
LABEL_23:
  float v32 = (HDRConfig *)GetConfig((HDRConfig *)Config);
  if (v32)
  {
    int v33 = GetConfig(v32);
    float v32 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v33, 0x82u, 0);
    float v34 = *(float *)v32;
  }
  else
  {
    float v34 = 0.0;
  }
  if (v34 <= 0.0) {
    float v35 = v23;
  }
  else {
    float v35 = v34;
  }
  float v36 = *(float *)(a2 + 28);
  float v37 = *(double *)a2;
  if (v36 < v35) {
    float v35 = *(float *)(a2 + 28);
  }
  *a8 = v35;
  *a10 = (float)(v35 * v37) / v36;
  *a7 = 1.0;
  if ((*(unsigned char *)(a2 + 152) & 2) != 0)
  {
    *a5 = a9;
    *a8 = v36;
    *a10 = a9;
    goto LABEL_57;
  }
  *a5 = v37;
  if (*a8 != v36)
  {
    float v37 = *a10;
    *a5 = *a10;
  }
  int v38 = *a3;
  if (*a3 == 3)
  {
    if (v37 <= a9) {
      goto LABEL_52;
    }
    float v40 = GetConfig(v32);
    if (!v40) {
      goto LABEL_52;
    }
    float v41 = GetConfig((HDRConfig *)v40);
    if (!*(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v41, 0x38u, 0) || *(_DWORD *)(a2 + 176) == 12) {
      goto LABEL_52;
    }
LABEL_51:
    *a5 = a9;
    goto LABEL_52;
  }
  if (v38 == 2)
  {
    if (v37 <= a9) {
      goto LABEL_52;
    }
    float v42 = GetConfig(v32);
    if (!v42) {
      goto LABEL_52;
    }
    float v43 = GetConfig((HDRConfig *)v42);
    if (!*(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v43, 0x37u, 0)) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (v38 == 1)
  {
    char v39 = v37 <= a9 || v21;
    if ((v39 & 1) == 0) {
      goto LABEL_51;
    }
  }
LABEL_52:
  if (!*(unsigned char *)(a1 + 481))
  {
LABEL_55:
    float v45 = fmin(*a5 / 40.0, 1.0);
    *a7 = v45;
    goto LABEL_56;
  }
  int v44 = *(_DWORD *)(a2 + 4256);
  if (v44 != 1)
  {
    if (v44) {
      goto LABEL_57;
    }
    goto LABEL_55;
  }
LABEL_56:
  *a5 = fmaxf(*a5, 40.0);
LABEL_57:
  float v46 = powf(*a5 / 10000.0, 0.1593);
  float v47 = (v46 * 18.8515625 + 0.8359375) / (v46 * 18.6875 + 1.0);
  float v48 = powf(v47, 78.844);
  float v49 = 1.0;
  if (v48 <= 1.0) {
    float v49 = v48;
  }
  BOOL v50 = v48 < 0.0;
  float v51 = 0.0;
  if (!v50) {
    float v51 = v49;
  }
  *a6 = v51;
}

void sub_22229D1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22229E210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float PqNorm2LX_Pos(float a1)
{
  float v1 = powf(a1, 0.012683);
  float v2 = fmax((float)((float)(v1 + -0.83594) / (float)((float)(v1 * -18.688) + 18.852)), 0.0);
  return powf(v2, 6.2774) * 10000.0;
}

float PQ2L(float a1)
{
  BOOL v1 = a1 < 0.00000073096;
  if (a1 < 0.00000073096) {
    a1 = -(float)(a1 + -0.0000014619);
  }
  float v2 = flt_2222D1868[v1];
  float v3 = powf(a1, 0.012683);
  float v4 = fmax((float)((float)(v3 + -0.83594) / (float)((float)(v3 * -18.688) + 18.852)), 0.0);
  return v2 * powf(v4, 6.2774);
}

float PQ12Bit2LinFloat(int a1)
{
  if (a1 == 3079) {
    return 1000.0;
  }
  float v2 = (float)a1 / 4095.0;
  BOOL v3 = v2 < 0.00000073096;
  if (v2 < 0.00000073096) {
    float v2 = -(float)(v2 + -0.0000014619);
  }
  float v4 = flt_2222D1868[v3];
  float v5 = powf(v2, 0.012683);
  float v6 = fmax((float)((float)(v5 + -0.83594) / (float)((float)(v5 * -18.688) + 18.852)), 0.0);
  return v4 * powf(v6, 6.2774);
}

float L2PqNormX(float a1)
{
  float v1 = powf(a1 * 0.0001, 0.1593);
  float v2 = (float)((float)(v1 * 18.852) + 0.83594) / (float)((float)(v1 * 18.688) + 1.0);
  return powf(v2, 78.844);
}

float L2PQ(float a1)
{
  if (a1 >= 0.0)
  {
    float v3 = powf(a1 * 0.0001, 0.1593);
    float v4 = (float)((float)(v3 * 18.852) + 0.83594) / (float)((float)(v3 * 18.688) + 1.0);
    return powf(v4, 78.844);
  }
  else
  {
    float v1 = powf(a1 * -0.0001, 0.1593);
    return 0.0000014619 - powf((float)((float)(v1 * 18.852) + 0.83594) / (float)((float)(v1 * 18.688) + 1.0), 78.844);
  }
}

uint64_t PQIn12Bit(float a1)
{
  if (a1 >= 0.0)
  {
    float v3 = powf(a1 * 0.0001, 0.1593);
    float v2 = powf((float)((float)(v3 * 18.852) + 0.83594) / (float)((float)(v3 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v1 = powf(a1 * -0.0001, 0.1593);
    float v2 = 0.0000014619 - powf((float)((float)(v1 * 18.852) + 0.83594) / (float)((float)(v1 * 18.688) + 1.0), 78.844);
  }
  return (int)(v2 * 4095.0 + 0.5);
}

float PqNorm2LX_Pos_FloatComp(float a1)
{
  float v1 = pow(a1, 0.0126833133);
  float v2 = fmax((float)((float)(v1 + -0.83594) / (float)((float)(v1 * -18.688) + 18.852)), 0.0);
  return powf(v2, 6.2774) * 10000.0;
}

float PQ2L_FloatComp(float a1)
{
  BOOL v1 = a1 < 0.00000073096;
  if (a1 < 0.00000073096) {
    a1 = -(float)(a1 + -0.0000014619);
  }
  float v2 = flt_2222D1868[v1];
  float v3 = pow(a1, 0.0126833133);
  float v4 = fmax((float)((float)(v3 + -0.83594) / (float)((float)(v3 * -18.688) + 18.852)), 0.0);
  return v2 * powf(v4, 6.2774);
}

float PQ12Bit2LinDouble(int a1)
{
  float v1 = (float)a1 / 4095.0;
  BOOL v2 = v1 < 0.00000073096;
  if (v1 < 0.00000073096) {
    float v1 = -(float)(v1 + -0.0000014619);
  }
  float v3 = flt_2222D1868[v2];
  float v4 = pow(v1, 0.0126833133);
  float v5 = fmax((float)((float)(v4 + -0.83594) / (float)((float)(v4 * -18.688) + 18.852)), 0.0);
  return v3 * powf(v5, 6.2774);
}

float L2PqNormX_FloatComp(float a1)
{
  float v1 = powf(a1 * 0.0001, 0.1593);
  float v2 = (float)((float)(v1 * 18.852) + 0.83594) / (float)((float)(v1 * 18.688) + 1.0);
  return powf(v2, 78.844);
}

float L2PQ_FloatComp(float a1)
{
  if (a1 >= 0.0)
  {
    float v3 = powf(a1 * 0.0001, 0.1593);
    float v4 = (float)((float)(v3 * 18.852) + 0.83594) / (float)((float)(v3 * 18.688) + 1.0);
    return powf(v4, 78.844);
  }
  else
  {
    float v1 = powf(a1 * -0.0001, 0.1593);
    return 0.0000014619 - powf((float)((float)(v1 * 18.852) + 0.83594) / (float)((float)(v1 * 18.688) + 1.0), 78.844);
  }
}

uint64_t PQIn12Bit_FloatComp(float a1)
{
  if (a1 >= 0.0)
  {
    float v3 = powf(a1 * 0.0001, 0.1593);
    float v2 = powf((float)((float)(v3 * 18.852) + 0.83594) / (float)((float)(v3 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v1 = powf(a1 * -0.0001, 0.1593);
    float v2 = 0.0000014619 - powf((float)((float)(v1 * 18.852) + 0.83594) / (float)((float)(v1 * 18.688) + 1.0), 78.844);
  }
  return (int)(v2 * 4095.0 + 0.5);
}

float degamma_srgb(float a1)
{
  if (a1 >= 0.03928) {
    return powf((float)(a1 * 0.94787) + 0.052133, 2.4);
  }
  else {
    return a1 * 0.077399;
  }
}

float engamma_srgb(float a1)
{
  double v1 = a1;
  if (v1 >= 0.00304025)
  {
    float v3 = v1 * 1.13712;
    return powf(v3, 0.41667) + -0.055;
  }
  else
  {
    return v1 * 12.92;
  }
}

float getHLGGamma(float a1, float a2)
{
  long double v4 = (float)(a1 / 1000.0);
  if (a1 <= 400.0 || a1 >= 2000.0)
  {
    long double v6 = log2(v4);
    double v5 = pow(1.11099994, v6) * 1.20000005 + -1.0;
  }
  else
  {
    double v5 = log10(v4) * 0.419999987 + 1.20000005 + -1.0;
  }
  float v7 = v5;
  if (a2 > 5.0) {
    return v7 + log10((float)(a2 / 5.0)) * -0.076;
  }
  return v7;
}

void power(float a1, float a2)
{
}

float spl_norm(float a1, float a2, float a3)
{
  return (float)((float)((float)((float)(a1 * a1) * 3.0) + (float)((float)((float)(a1 * a1) * a1) * -2.0))
               + (float)((float)((float)((float)((float)(a1 * a1) * a1) + (float)((float)(a1 * a1) * -2.0)) + a1) * a2))
       + (float)((float)((float)((float)(a1 * a1) * a1) - (float)(a1 * a1)) * a3);
}

float spl_apply(int a1, float *a2, float *a3, uint64_t a4, float a5)
{
  if (*a2 > a5) {
    return *a3;
  }
  if (a1 < 2) {
    return a3[a1 - 1];
  }
  uint64_t v6 = 0;
  float v7 = (float *)(a4 + 4);
  float v8 = a3 + 1;
  uint64_t v9 = a1 - 1;
  for (uint64_t i = a2 + 1; *i <= a5; ++i)
  {
    v6 += 0x100000000;
    ++v7;
    ++v8;
    if (!--v9) {
      return a3[a1 - 1];
    }
  }
  float v5 = *v8;
  float v12 = *(float *)((char *)a3 + (v6 >> 30));
  if (*v8 == v12) {
    return v5;
  }
  uint64_t v13 = v6 >> 32;
  float v14 = a2[v13];
  float v15 = *i - v14;
  float v16 = (float)(a5 - v14) / v15;
  return v12
       + (float)((float)(v5 - v12)
               * (float)((float)((float)((float)((float)(v16 * v16) * 3.0)
                                       + (float)((float)(v16 * (float)(v16 * v16)) * -2.0))
                               + (float)((float)(v16
                                               + (float)((float)(v16 * (float)(v16 * v16))
                                                       + (float)((float)(v16 * v16) * -2.0)))
                                       * (float)(*(float *)(a4 + 4 * v13) * (float)(v15 / (float)(v5 - v12)))))
                       + (float)((float)((float)(v16 * (float)(v16 * v16)) - (float)(v16 * v16))
                               * (float)(*v7 * (float)(v15 / (float)(v5 - v12))))));
}

float spl_apply_with_linear_extension(int a1, float *a2, float *a3, float *a4, float a5)
{
  if (*a2 > a5) {
    return *a3 + (float)((float)(a5 - *a2) * *a4);
  }
  if (a1 < 2) {
    return a3[a1 - 1] + (float)((float)(a5 - a2[a1 - 1]) * a4[a1 - 1]);
  }
  uint64_t v6 = 0;
  float v7 = a4 + 1;
  float v8 = a3 + 1;
  uint64_t v9 = a1 - 1;
  for (uint64_t i = a2 + 1; *i <= a5; ++i)
  {
    v6 += 0x100000000;
    ++v7;
    ++v8;
    if (!--v9) {
      return a3[a1 - 1] + (float)((float)(a5 - a2[a1 - 1]) * a4[a1 - 1]);
    }
  }
  float v11 = *(float *)((char *)a3 + (v6 >> 30));
  if (*v8 == v11) {
    return *v8;
  }
  uint64_t v12 = v6 >> 32;
  float v13 = a2[v12];
  float v14 = *i - v13;
  float v15 = (float)(a5 - v13) / v14;
  return v11
       + (float)((float)(*v8 - v11)
               * (float)((float)((float)((float)((float)(v15 * v15) * 3.0)
                                       + (float)((float)(v15 * (float)(v15 * v15)) * -2.0))
                               + (float)((float)(v15
                                               + (float)((float)(v15 * (float)(v15 * v15))
                                                       + (float)((float)(v15 * v15) * -2.0)))
                                       * (float)(a4[v12] * (float)(v14 / (float)(*v8 - v11)))))
                       + (float)((float)((float)(v15 * (float)(v15 * v15)) - (float)(v15 * v15))
                               * (float)(*v7 * (float)(v14 / (float)(*v8 - v11))))));
}

void spl_calculate(float a1, int a2, const float *a3, const float (*a4)[2], const float (*a5)[4])
{
  if (*a3 < a1 && a3[a2 - 1] >= a1)
  {
    uint64_t v5 = (a2 - 1) & ~((a2 - 1) >> 31);
    uint64_t v6 = (float *)&(*a5)[-4];
    float v7 = (float *)(a3 + 1);
    while (v5)
    {
      float v8 = *v7++;
      v6 += 4;
      --v5;
      if (v8 >= a1)
      {
        if ((a2 & 0x80000000) == 0)
        {
          uint64_t v9 = 0;
          float v10 = a1 - *(v7 - 2);
          uint64_t v11 = (a2 + 1);
          float v12 = 0.0;
          do
          {
            float v13 = *v6++;
            float v12 = v12 + (float)(v13 * powf(v10, (float)(int)v9++));
          }
          while (v11 != v9);
        }
        return;
      }
    }
  }
}

void poly_apply(float a1, int a2, const float *a3, const float (*a4)[2], const float (*a5)[4])
{
  if (*a3 < a1 && a3[a2 - 1] >= a1)
  {
    uint64_t v6 = (a2 - 1) & ~((a2 - 1) >> 31);
    float v7 = (float *)&(*a5)[-4];
    float v8 = (float *)(a3 + 1);
    while (v6)
    {
      float v9 = *v8++;
      v7 += 4;
      --v6;
      if (v9 >= a1)
      {
        if ((a2 & 0x80000000) == 0)
        {
          uint64_t v10 = 0;
          uint64_t v11 = (a2 + 1);
          float v12 = 0.0;
          do
          {
            float v13 = *v7++;
            float v12 = v12 + (float)(v13 * powf(a1, (float)(int)v10++));
          }
          while (v11 != v10);
        }
        return;
      }
    }
  }
}

float ebz_norm(unsigned int a1, float *a2, float a3)
{
  *(void *)&v25[52] = *MEMORY[0x263EF8340];
  float v24 = a3;
  uint64_t v3 = a1 - 2;
  v23[v3] = 1.0 - a3;
  if (a1 >= 3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = &v23[a1];
    float v6 = *(v5 - 2);
    float v7 = v5 - 3;
    float v8 = (float *)v25;
    float v9 = a3;
    do
    {
      float v9 = v9 * a3;
      *v8++ = v9;
      float v6 = (float)(1.0 - a3) * v6;
      *v7-- = v6;
      --v4;
    }
    while (v4);
  }
  float v10 = *(float *)&v25[4 * v3 - 4] * a3;
  if (a1 >= 2)
  {
    uint64_t v11 = a1 - 1;
    float v12 = (int *)((char *)&EBZ_COEFFS + 56 * a1 - 56);
    float v13 = v23;
    float v14 = &v24;
    do
    {
      int v15 = *v12++;
      float v16 = (float)v15;
      float v17 = *v14++;
      float v18 = v17;
      float v19 = *v13++;
      float v20 = (float)(v18 * v16) * v19;
      float v21 = *a2++;
      float v10 = v10 + (float)(v20 * v21);
      --v11;
    }
    while (v11);
  }
  return fmaxf(fminf(v10, 1.0), 0.0);
}

float ebz_prime(unsigned int a1, uint64_t a2, float a3)
{
  *(void *)&v20[52] = *MEMORY[0x263EF8340];
  float v3 = 1.0;
  float v4 = 1.0 - a3;
  int v19 = 1065353216;
  uint64_t v5 = a1 - 2;
  v18[v5] = 1.0;
  if (a1 >= 3)
  {
    uint64_t v6 = v5;
    float v7 = &v18[a1];
    float v8 = *(v7 - 2);
    float v9 = v7 - 3;
    float v10 = (float *)v20;
    do
    {
      float v3 = v3 * a3;
      *v10++ = v3;
      float v8 = v4 * v8;
      *v9-- = v8;
      --v6;
    }
    while (v6);
  }
  if (a1 <= 1)
  {
    float v12 = (float)a1;
    float v13 = -(float)a1;
    double v16 = 0.0;
  }
  else
  {
    uint64_t v11 = 0;
    float v12 = (float)a1;
    float v13 = -(float)a1;
    float v14 = 0.0;
    do
    {
      float v15 = (float)((float)(*(float *)&v20[4 * v11 - 4] * (float)EBZ_COEFFS[14 * a1 - 14 + v11]) * v18[v11])
          * *(float *)(a2 + 4 * v11);
      float v14 = v14 + (float)(v15 * (float)((float)(int)++v11 + (float)(v13 * a3)));
    }
    while (a1 - 1 != v11);
    double v16 = v14;
  }
  return v16 + 1.0 / v4 * (float)(*(float *)&v20[4 * v5 - 4] * a3) * (float)(v12 + (float)(v13 * a3));
}

float piecewiseLinearInterp(float *a1, float *a2, unsigned int a3, float a4)
{
  if (*a1 > a4) {
    return *a2;
  }
  if (a3 < 2) {
    return a2[a3 - 1];
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2 + 1;
  uint64_t v7 = a3 - 1;
  for (uint64_t i = a1 + 1; *i <= a4; ++i)
  {
    v5 += 0x100000000;
    ++v6;
    if (!--v7) {
      return a2[a3 - 1];
    }
  }
  return *(float *)((char *)a2 + (v5 >> 30))
       + (float)((float)((float)(a4 - *(float *)((char *)a1 + (v5 >> 30)))
                       * (float)(*v6 - *(float *)((char *)a2 + (v5 >> 30))))
               / (float)(*i - *(float *)((char *)a1 + (v5 >> 30))));
}

float applyLinearStretchInPQ(float result, float a2, float a3)
{
  if (a2 != 1.0)
  {
    BOOL v5 = result < 0.00000073096;
    if (result < 0.00000073096) {
      uint64_t result = -(float)(result + -0.0000014619);
    }
    float v6 = flt_2222D1868[v5];
    float v7 = powf(result, 0.012683);
    float v8 = fmax((float)((float)(v7 + -0.83594) / (float)((float)(v7 * -18.688) + 18.852)), 0.0);
    float v9 = a3 + (float)((float)((float)(v6 * powf(v8, 6.2774)) - a3) * a2);
    if (v9 >= 0.0)
    {
      float v11 = powf(v9 * 0.0001, 0.1593);
      float v12 = (float)((float)(v11 * 18.852) + 0.83594) / (float)((float)(v11 * 18.688) + 1.0);
      return powf(v12, 78.844);
    }
    else
    {
      float v10 = powf(v9 * -0.0001, 0.1593);
      return 0.0000014619
           - powf((float)((float)(v10 * 18.852) + 0.83594) / (float)((float)(v10 * 18.688) + 1.0), 78.844);
    }
  }
  return result;
}

float applyNonlinearStretchInPQ(float result, float a2, float a3)
{
  float v3 = a3 + (float)((float)(result - a3) * a2);
  if (a2 != 1.0) {
    return v3;
  }
  return result;
}

void calculateEdrAdaptationParamS(float *a1, uint64_t a2)
{
  float v3 = *a1;
  float v4 = a1[2];
  float v5 = a1[3];
  float v7 = a1[4];
  float v6 = a1[5];
  float v9 = a1[6];
  float v8 = a1[7];
  int v10 = *((_DWORD *)a1 + 17);
  float v11 = a1[8];
  float v12 = a1[9];
  float v14 = a1[10];
  float v13 = a1[11];
  int v15 = *((unsigned __int8 *)a1 + 48);
  float v16 = a1[13];
  float v17 = a1[14];
  float v19 = a1[15];
  float v18 = a1[16];
  float v20 = a1[18];
  float v21 = a1[19];
  float v22 = a1[20];
  float v23 = a1[21];
  float v25 = a1[22];
  float v24 = a1[23];
  float v27 = a1[25];
  float v26 = a1[26];
  *(unsigned char *)a2 = 1;
  *(unsigned char *)(a2 + 40) = *((unsigned char *)a1 + 132);
  switch(LODWORD(v3))
  {
    case 2:
      *(_WORD *)(a2 + 2) = 3;
      float v29 = v9 * v8;
      if ((float)(v9 * v8) >= v7) {
        float v29 = v7;
      }
      if (v5 >= v29) {
        float v29 = v5;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v29;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      float v30 = v9 * v11;
      if ((float)(v9 * v11) >= v7) {
        float v30 = v7;
      }
      if (v5 >= v30) {
        float v31 = v5;
      }
      else {
        float v31 = v30;
      }
      *(float *)(a2 + 20) = v31;
      *(float *)(a2 + 24) = v7;
      float v32 = 1.0;
      float v33 = 1.0;
      if (v29 != v5) {
        float v33 = (float)((float)((float)(v31 - v5) / (float)(v29 - v5)) + 1.0) * 0.5;
      }
      if (v7 != v29) {
        float v32 = (float)(v7 - v31) / (float)(v7 - v29);
      }
      *(_DWORD *)(a2 + 28) = 1065353216;
      float v34 = (float)(1.0 / v33) * (float)(v32 * v32);
      goto LABEL_580;
    case 3:
      *(_WORD *)(a2 + 2) = 3;
      float v35 = v5 + (float)((float)(v8 - v5) * v9);
      if (v35 >= v7) {
        float v35 = v7;
      }
      if (v5 >= v35) {
        float v36 = v5;
      }
      else {
        float v36 = v35;
      }
      if (v15)
      {
        float v462 = v12;
        float v465 = v5;
        if (v6 <= v11)
        {
          float v385 = (float)(v11 - v6) / (float)(v7 - v6);
          float v386 = v7;
          float v387 = v11;
          float v388 = v14;
          float v389 = v8;
          float v390 = powf(v385, v16);
          float v43 = v389;
          float v12 = v462;
          float v5 = v465;
          float v14 = v388;
          float v44 = v387;
          float v7 = v386;
          float v17 = v390;
        }
        else
        {
          float v37 = (float)(v6 - v11) / (float)(v6 - v5);
          float v38 = v7;
          float v39 = v11;
          float v40 = v14;
          float v41 = v8;
          float v42 = powf(v37, v16);
          float v43 = v41;
          float v12 = v462;
          float v5 = v465;
          float v14 = v40;
          float v44 = v39;
          float v7 = v38;
          float v19 = v42;
        }
        float v350 = v36 + (float)((float)((float)(v44 - v43) * (float)(v19 * v17)) * v9);
      }
      else
      {
        float v350 = v5 + (float)((float)((float)(v36 + (float)((float)(v11 - v8) * v9)) - v5) * v18);
      }
      if (v350 >= v7) {
        float v350 = v7;
      }
      if (v5 >= v350) {
        float v350 = v5;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v36;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      *(float *)(a2 + 20) = v350;
      *(float *)(a2 + 24) = v7;
      float v391 = v7 / v7;
      float v392 = 1.0;
      if (v7 == 0.0) {
        float v391 = 1.0;
      }
      float v393 = 1.0;
      if (v36 != v5) {
        float v393 = (float)(v350 - v5) / (float)(v36 - v5);
      }
      if (v7 != v36) {
        float v392 = (float)(v7 - v350) / (float)(v7 - v36);
      }
      if (v36 <= v350)
      {
        float v397 = v393 - v391;
        float v396 = v391 + (float)((float)(v393 - v391) * v12);
        float v395 = v391 + (float)(v397 * v14);
        float v111 = (float)(1.0 / v395) * (float)(v392 * v392);
      }
      else
      {
        float v394 = v392 - v391;
        float v111 = v391 + (float)((float)(v392 - v391) * v13);
        float v395 = v391 + (float)(v394 * v14);
        float v396 = (float)(v393 * v393) * (float)(1.0 / v395);
      }
      *(float *)(a2 + 28) = v396;
      *(float *)(a2 + 32) = v395;
      goto LABEL_466;
    case 4:
      *(_WORD *)(a2 + 2) = 3;
      float v45 = v5 + (float)((float)(v8 - v5) * v9);
      if (v45 >= v7) {
        float v45 = v7;
      }
      if (v5 >= v45) {
        float v46 = v5;
      }
      else {
        float v46 = v45;
      }
      if (v15)
      {
        float v466 = v5;
        if (v6 <= v11)
        {
          float v398 = (float)(v11 - v6) / (float)(v7 - v6);
          float v399 = v7;
          float v400 = v11;
          float v401 = v14;
          float v402 = v12;
          float v403 = v8;
          float v404 = powf(v398, v16);
          float v54 = v403;
          float v12 = v402;
          float v14 = v401;
          float v55 = v400;
          float v7 = v399;
          float v5 = v466;
          float v17 = v404;
        }
        else
        {
          float v47 = (float)(v6 - v11) / (float)(v6 - v5);
          float v48 = v7;
          float v49 = v11;
          float v50 = v14;
          float v51 = v12;
          float v52 = v8;
          float v53 = powf(v47, v16);
          float v54 = v52;
          float v12 = v51;
          float v14 = v50;
          float v55 = v49;
          float v7 = v48;
          float v5 = v466;
          float v19 = v53;
        }
        float v351 = v46 + (float)((float)((float)(v55 - v54) * (float)(v19 * v17)) * v9);
      }
      else
      {
        float v351 = v5 + (float)((float)((float)(v46 + (float)((float)(v11 - v8) * v9)) - v5) * v18);
      }
      if (v351 >= v7) {
        float v351 = v7;
      }
      if (v5 >= v351) {
        float v405 = v5;
      }
      else {
        float v405 = v351;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v46;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      *(float *)(a2 + 20) = v405;
      *(float *)(a2 + 24) = v7;
      float v406 = v7 / v7;
      float v407 = 1.0;
      if (v7 == 0.0) {
        float v406 = 1.0;
      }
      float v408 = 1.0;
      if (v46 != v5) {
        float v408 = (float)(v405 - v5) / (float)(v46 - v5);
      }
      if (v7 != v46) {
        float v407 = (float)(v7 - v405) / (float)(v7 - v46);
      }
      float v409 = v408 - v406;
      if (v46 <= v405)
      {
        float v411 = v406 + (float)(v409 * v12);
        float v84 = v406 + (float)(v409 * v14);
        float v410 = 1.0 / v84;
      }
      else
      {
        float v84 = v406 + (float)(v409 * v14);
        float v410 = 1.0 / v84;
        float v411 = (float)(v408 * v408) * (float)(1.0 / v84);
      }
      float v344 = (float)(v407 * v407) * v410;
      *(float *)(a2 + 28) = v411;
      goto LABEL_525;
    case 5:
      float v56 = v12;
      float v57 = v14;
      *(_WORD *)(a2 + 2) = 3;
      float v58 = v5;
      float v59 = v7;
      float v60 = v8;
      float v61 = v7 * piecewiseLinearInterp(adjLUTs_xs, (float *)&adjLUTs_ys[40 * v10], 0xAu, v11);
      float v62 = v58 + (float)((float)(v60 - v58) * v9);
      if (v62 >= v59) {
        float v62 = v59;
      }
      if (v58 >= v62) {
        float v62 = v58;
      }
      float v63 = v62 + (float)((float)(v61 - v60) * v9);
      if (v63 >= v59) {
        float v63 = v59;
      }
      if (v58 >= v63) {
        float v63 = v58;
      }
      *(float *)(a2 + 4) = v58;
      *(float *)(a2 + 8) = v62;
      *(float *)(a2 + 12) = v59;
      *(float *)(a2 + 16) = v58;
      *(float *)(a2 + 20) = v63;
      *(float *)(a2 + 24) = v59;
      float v64 = v59 / v59;
      float v65 = 1.0;
      if (v59 == 0.0) {
        float v64 = 1.0;
      }
      float v66 = 1.0;
      if (v62 != v58) {
        float v66 = (float)(v63 - v58) / (float)(v62 - v58);
      }
      if (v59 != v62) {
        float v65 = (float)(v59 - v63) / (float)(v59 - v62);
      }
      float v67 = v66 - v64;
      BOOL v68 = v62 > v63;
      float v69 = v64 + (float)((float)(v66 - v64) * v57);
      float v70 = (float)(v66 * v66) * (float)(1.0 / v69);
      float v71 = v64 + (float)(v67 * v56);
      if (v68) {
        float v71 = v70;
      }
      float v72 = (float)(v65 * v65) * (float)(1.0 / v69);
      *(float *)(a2 + 28) = v71;
      goto LABEL_449;
    case 6:
      *(_WORD *)(a2 + 2) = 3;
      float v73 = (float)(v11 - v6) / v6;
      float v74 = fabsf(v73);
      if (v73 >= 0.0) {
        float v75 = v21;
      }
      else {
        float v75 = v20;
      }
      float v76 = v8
          + (float)((float)-(float)(v8
                                  - (float)(v11
                                          * (float)(v23
                                                  + (float)((float)((float)((float)(v11 / v7) - v22) * (float)(v24 - v23))
                                                          / (float)(v25 - v22)))))
                  * (float)(v74 * v75));
      float v77 = v5 + (float)((float)(v8 - v5) * v9);
      if (v77 >= v7) {
        float v77 = v7;
      }
      if (v5 >= v77) {
        float v77 = v5;
      }
      float v78 = v5 + (float)((float)(v76 - v5) * v9);
      if (v78 >= v7) {
        float v78 = v7;
      }
      if (v5 >= v78) {
        float v79 = v5;
      }
      else {
        float v79 = v78;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v77;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      *(float *)(a2 + 20) = v79;
      *(float *)(a2 + 24) = v7;
      float v80 = v7 / v7;
      float v81 = 1.0;
      if (v7 == 0.0) {
        float v80 = 1.0;
      }
      float v82 = 1.0;
      if (v77 != v5) {
        float v82 = (float)(v79 - v5) / (float)(v77 - v5);
      }
      if (v7 != v77) {
        float v81 = (float)(v7 - v79) / (float)(v7 - v77);
      }
      float v83 = v82 - v80;
      if (v77 <= v79)
      {
        float v86 = v80 + (float)(v83 * v12);
        float v84 = v80 + (float)(v83 * v14);
        float v85 = 1.0 / v84;
      }
      else
      {
        float v84 = v80 + (float)(v83 * v14);
        float v85 = 1.0 / v84;
        float v86 = (float)(v82 * v82) * (float)(1.0 / v84);
      }
      float v344 = (float)(v81 * v81) * v85;
      *(float *)(a2 + 28) = v86;
      goto LABEL_525;
    case 7:
      *(_WORD *)(a2 + 2) = 3;
      float v87 = (float)(v11 - v6) / v6;
      float v88 = fabsf(v87);
      if (v87 >= 0.0) {
        float v89 = v21;
      }
      else {
        float v89 = v20;
      }
      float v90 = v8
          + (float)((float)-(float)(v8
                                  - (float)(v11
                                          * (float)(v23
                                                  + (float)((float)((float)((float)(v11 / v7) - v22) * (float)(v24 - v23))
                                                          / (float)(v25 - v22)))))
                  * (float)(v88 * v89));
      float v91 = v5 + (float)((float)(v8 - v5) * v9);
      if (v91 >= v7) {
        float v91 = v7;
      }
      if (v5 >= v91) {
        float v91 = v5;
      }
      float v92 = v5 + (float)((float)(v90 - v5) * v9);
      if (v92 >= v7) {
        float v92 = v7;
      }
      if (v5 >= v92) {
        float v92 = v5;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v91;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      *(float *)(a2 + 20) = v92;
      *(float *)(a2 + 24) = v7;
      float v93 = v7 / v7;
      float v94 = 1.0;
      if (v7 == 0.0) {
        float v93 = 1.0;
      }
      float v95 = 1.0;
      if (v91 != v5) {
        float v95 = (float)(v92 - v5) / (float)(v91 - v5);
      }
      if (v7 != v91) {
        float v94 = (float)(v7 - v92) / (float)(v7 - v91);
      }
      float v96 = v95 - v93;
      if (v91 <= v92)
      {
        float v98 = v93 + (float)(v96 * v12);
        float v33 = v93 + (float)(v96 * v14);
        float v34 = (float)(1.0 / v33) * (float)(v94 * v94);
      }
      else
      {
        float v97 = v93 + (float)(v96 * v14);
        *(float *)(a2 + 16) = v27 + (float)((float)(v5 - v27) * v26);
        *(float *)(a2 + 20) = v27 + (float)((float)(v92 - v27) * v26);
        *(float *)(a2 + 24) = v27 + (float)((float)(v7 - v27) * v26);
        float v98 = v26 * (float)((float)(v95 * v95) * (float)(1.0 / v97));
        float v33 = v26 * v97;
        float v34 = v26 * (float)((float)(1.0 / v97) * (float)(v94 * v94));
      }
      *(float *)(a2 + 28) = v98;
      goto LABEL_580;
    case 8:
      *(_WORD *)(a2 + 2) = 3;
      if (v8 >= v7) {
        float v99 = v7;
      }
      else {
        float v99 = v8;
      }
      if (v5 >= v99) {
        float v100 = v5;
      }
      else {
        float v100 = v99;
      }
      if (v11 <= v8)
      {
        float v101 = v5;
        float v102 = v7;
        float v103 = v8;
        float v104 = powf(v11 / v8, 2.2);
        float v7 = v102;
        float v5 = v101;
        float v8 = v103 * v104;
      }
      if (v8 >= v7) {
        float v105 = v7;
      }
      else {
        float v105 = v8;
      }
      if (v5 >= v105) {
        float v105 = v5;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v100;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      *(float *)(a2 + 20) = v105;
      *(float *)(a2 + 24) = v7;
      float v106 = v7 / v7;
      if (v7 == 0.0) {
        float v106 = 1.0;
      }
      float v107 = (float)(v105 - v5) / (float)(v100 - v5);
      if (v100 == v5) {
        float v107 = 1.0;
      }
      float v108 = (float)(v7 - v105) / (float)(v7 - v100);
      if (v7 == v100) {
        float v108 = 1.0;
      }
      float v109 = (float)(1.0 / v106) * (float)(v107 * v107);
      if (v100 <= v105) {
        float v110 = v106;
      }
      else {
        float v110 = v109;
      }
      float v111 = (float)(1.0 / v106) * (float)(v108 * v108);
      *(float *)(a2 + 28) = v110;
      *(float *)(a2 + 32) = v106;
LABEL_466:
      *(float *)(a2 + 36) = v111;
      return;
    case 9:
      *(_WORD *)(a2 + 2) = 3;
      float v112 = 1.0;
      float v113 = fmaxf(fminf(v11 / v4, 1.0), 0.0);
      float v114 = v113 * 1.2 + (float)(1.0 - v113) * 0.75;
      float v115 = v11 * v114;
      if (v115 > v8) {
        float v116 = v8;
      }
      else {
        float v116 = v115;
      }
      if (v8 >= v7) {
        float v117 = v7;
      }
      else {
        float v117 = v8;
      }
      if (v5 >= v117) {
        float v117 = v5;
      }
      if (v116 >= v7) {
        float v116 = v7;
      }
      if (v5 >= v116) {
        float v118 = v5;
      }
      else {
        float v118 = v116;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v117;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      *(float *)(a2 + 20) = v118;
      *(float *)(a2 + 24) = v7;
      float v119 = v7 / v7;
      if (v7 == 0.0) {
        float v119 = 1.0;
      }
      float v120 = 1.0;
      if (v117 != v5) {
        float v120 = (float)(v118 - v5) / (float)(v117 - v5);
      }
      if (v7 == v117) {
        goto LABEL_409;
      }
      float v121 = v7 - v118;
      float v122 = v7 - v117;
      goto LABEL_408;
    case 0xA:
      float v123 = v8;
      float v124 = v11;
      float v125 = v7;
      float v126 = v5;
      *(_WORD *)(a2 + 2) = 3;
      uint64_t Config = GetConfig((HDRConfig *)a1);
      if (Config)
      {
        float v128 = GetConfig((HDRConfig *)Config);
        float v129 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v128, 0x6Fu, 0);
        if (v129 < 0.0)
        {
          float v130 = powf(v129 * -0.0001, 0.1593);
          float v131 = 0.0000014619
               - powf((float)((float)(v130 * 18.852) + 0.83594) / (float)((float)(v130 * 18.688) + 1.0), 78.844);
          goto LABEL_392;
        }
      }
      else
      {
        float v129 = 0.0;
      }
      float v352 = powf(v129 * 0.0001, 0.1593);
      float v131 = powf((float)((float)(v352 * 18.852) + 0.83594) / (float)((float)(v352 * 18.688) + 1.0), 78.844);
LABEL_392:
      float v353 = v124 / v131;
      float v112 = 1.0;
      float v354 = fmaxf(fminf(v353, 1.0), 0.0);
      float v355 = v354 + (float)(1.0 - v354) * 0.6;
      float v356 = v123 * v355;
      if (v123 >= v125) {
        float v117 = v125;
      }
      else {
        float v117 = v123;
      }
      if (v126 >= v117) {
        float v117 = v126;
      }
      if (v356 >= v125) {
        float v356 = v125;
      }
      if (v126 >= v356) {
        float v118 = v126;
      }
      else {
        float v118 = v356;
      }
      *(float *)(a2 + 4) = v126;
      *(float *)(a2 + 8) = v117;
      *(float *)(a2 + 12) = v125;
      *(float *)(a2 + 16) = v126;
      *(float *)(a2 + 20) = v118;
      *(float *)(a2 + 24) = v125;
      float v119 = v125 / v125;
      if (v125 == 0.0) {
        float v119 = 1.0;
      }
      float v120 = 1.0;
      if (v117 != v126) {
        float v120 = (float)(v118 - v126) / (float)(v117 - v126);
      }
      if (v125 != v117)
      {
        float v121 = v125 - v118;
        float v122 = v125 - v117;
LABEL_408:
        float v112 = v121 / v122;
      }
LABEL_409:
      float v357 = v119 + (float)(v120 - v119) * 0.0;
      BOOL v68 = v117 > v118;
      float v358 = v119;
      if (v68) {
        float v358 = (float)(v120 * v120) * (float)(1.0 / v357);
      }
      float v359 = v119 + (float)(v112 - v119);
      *(float *)(a2 + 28) = v358;
      *(float *)(a2 + 32) = v357;
LABEL_446:
      *(float *)(a2 + 36) = v359;
      return;
    case 0xB:
      float v456 = v25;
      float v457 = v8;
      float v463 = v12;
      float v458 = v14;
      float v132 = v7;
      float v133 = v5;
      *(_WORD *)(a2 + 2) = 3;
      float v134 = -(float)(v11 + -0.0000014619);
      float v460 = v11;
      if (v11 >= 0.00000073096) {
        float v134 = v11;
      }
      float v135 = flt_2222D1868[v11 < 0.00000073096];
      float v136 = powf(v134, 0.012683);
      float v137 = fmax((float)((float)(v136 + -0.83594) / (float)((float)(v136 * -18.688) + 18.852)), 0.0);
      float v138 = v135 * powf(v137, 6.2774);
      uint64_t v140 = GetConfig(v139);
      if (v140)
      {
        int v141 = GetConfig((HDRConfig *)v140);
        float v142 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v141, 0x7Au, 0);
      }
      else
      {
        float v142 = 0.0;
      }
      float v360 = v138 * v142;
      if (v360 >= 0.0)
      {
        float v363 = powf(v360 * 0.0001, 0.1593);
        float v362 = powf((float)((float)(v363 * 18.852) + 0.83594) / (float)((float)(v363 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v361 = powf(v360 * -0.0001, 0.1593);
        float v362 = 0.0000014619
             - powf((float)((float)(v361 * 18.852) + 0.83594) / (float)((float)(v361 * 18.688) + 1.0), 78.844);
      }
      float v364 = (float)(v362 - v6) / v6;
      float v365 = fabsf(v364);
      BOOL v366 = v364 < 0.0;
      float v367 = -1.5;
      if (v366) {
        float v367 = 0.5;
      }
      float v368 = v457
           + (float)((float)-(float)(v457
                                   - (float)(v362
                                           * (float)(v23
                                                   + (float)((float)((float)((float)(v460 / v132) - v22)
                                                                   * (float)(v24 - v23))
                                                           / (float)(v456 - v22)))))
                   * (float)(v365 * v367));
      if (v457 <= v132) {
        float v369 = v457;
      }
      else {
        float v369 = v132;
      }
      if (v457 >= v133) {
        float v370 = v369;
      }
      else {
        float v370 = v133;
      }
      if (v368 <= v132) {
        float v371 = v368;
      }
      else {
        float v371 = v132;
      }
      if (v368 >= v133) {
        float v372 = v371;
      }
      else {
        float v372 = v133;
      }
      *(float *)(a2 + 4) = v133;
      *(float *)(a2 + 8) = v370;
      *(float *)(a2 + 12) = v132;
      *(float *)(a2 + 16) = v133;
      *(float *)(a2 + 20) = v372;
      *(float *)(a2 + 24) = v132;
      float v373 = 1.0;
      if (v132 == 0.0) {
        float v374 = 1.0;
      }
      else {
        float v374 = v132 / v132;
      }
      float v375 = 1.0;
      if (v370 != v133) {
        float v375 = (float)(v372 - v133) / (float)(v370 - v133);
      }
      if (v132 != v370) {
        float v373 = (float)(v132 - v372) / (float)(v132 - v370);
      }
      float v376 = v375 - v374;
      if (v370 <= v372)
      {
        float v379 = v374 + (float)(v376 * v463);
        float v377 = v374 + (float)(v376 * v458);
        float v378 = 1.0 / v377;
      }
      else
      {
        float v377 = v374 + (float)(v376 * v458);
        float v378 = 1.0 / v377;
        float v379 = (float)(v375 * v375) * (float)(1.0 / v377);
      }
      float v380 = (float)(v373 * v373) * v378;
      double v381 = v375 * 3.0;
      BOOL v68 = v381 <= v379;
      float v382 = v381;
      if (!v68) {
        float v382 = v379;
      }
      *(float *)(a2 + 28) = v382;
      *(float *)(a2 + 32) = v377;
      double v383 = v373 * 3.0;
      if (v383 <= v380)
      {
        float v384 = v383;
        float v359 = v384;
      }
      else
      {
        float v359 = v380;
      }
      goto LABEL_446;
    case 0xC:
      float v143 = v11;
      float v144 = v7;
      float v145 = v5;
      int v146 = GetConfig((HDRConfig *)a1);
      if (!v146
        || (uint64_t v147 = GetConfig((HDRConfig *)v146),
            uint64_t ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v147, 0, 0),
            !*(unsigned char *)ConfigEntryValue)
        || (long long v149 = GetConfig(ConfigEntryValue)) == 0
        || (long long v150 = GetConfig((HDRConfig *)v149), !*((_DWORD *)v150 + 2379))
        || (v150[4756] & 0x80) == 0)
      {
        float v151 = 250.0;
LABEL_144:
        float v152 = a1[7];
        *(_WORD *)(a2 + 2) = 3;
LABEL_145:
        float v153 = powf(v151 * 0.0001, 0.1593);
        float v154 = powf((float)((float)(v153 * 18.852) + 0.83594) / (float)((float)(v153 * 18.688) + 1.0), 78.844);
        goto LABEL_146;
      }
      uint64_t v444 = GetConfig((HDRConfig *)v150);
      if (!v444)
      {
        float v151 = 0.0;
        goto LABEL_144;
      }
      uint64_t v445 = GetConfig((HDRConfig *)v444);
      float v151 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v445, 0x6Cu, 0);
      float v152 = a1[7];
      *(_WORD *)(a2 + 2) = 3;
      if (v151 >= 0.0) {
        goto LABEL_145;
      }
      float v446 = powf(v151 * -0.0001, 0.1593);
      float v154 = 0.0000014619
           - powf((float)((float)(v446 * 18.852) + 0.83594) / (float)((float)(v446 * 18.688) + 1.0), 78.844);
LABEL_146:
      float v155 = v143 / v154;
      float v156 = 1.0;
      float v157 = fminf(v155, 1.0);
      float v158 = (float)((float)(v157 * 0.35) + 0.65) + -1.0;
      float v159 = 0.0;
      BOOL v68 = v157 <= 0.0;
      float v160 = -0.35;
      if (!v68) {
        float v160 = v158;
      }
      float v161 = v152
           * (float)((float)(v160 * (float)((float)((float)((float)(1.0 - (float)(v143 / v144)) + -0.1) / 0.4) + 0.0))
                   + 1.0);
      if (v152 >= v144) {
        float v162 = v144;
      }
      else {
        float v162 = v152;
      }
      if (v145 >= v162) {
        float v162 = v145;
      }
      if (v161 >= v144) {
        float v161 = v144;
      }
      if (v145 >= v161) {
        float v161 = v145;
      }
      *(float *)(a2 + 4) = v145;
      *(float *)(a2 + 8) = v162;
      *(float *)(a2 + 12) = v144;
      *(float *)(a2 + 16) = v145;
      *(float *)(a2 + 20) = v161;
      *(float *)(a2 + 24) = v144;
      if (v162 != v145) {
        float v159 = (float)((float)(v161 - v145) / (float)(v162 - v145)) + -1.0;
      }
      if (v144 == v162) {
        goto LABEL_500;
      }
      float v163 = v144 - v161;
      float v164 = v144 - v162;
      goto LABEL_499;
    case 0xD:
      float v165 = a1[28];
      float v166 = a1[29];
      float v167 = a1[30];
      float v168 = a1[32];
      float v169 = a1[34];
      float v170 = a1[35];
      float v172 = a1[36];
      float v171 = a1[37];
      float v173 = a1[38];
      int v174 = *((unsigned __int8 *)a1 + 156);
      int v175 = *((unsigned __int8 *)a1 + 157);
      int v176 = *((unsigned __int8 *)a1 + 158);
      int v177 = *((unsigned __int8 *)a1 + 159);
      *(_WORD *)(a2 + 2) = 3;
      float v178 = v165 / v166;
      float v179 = (float)(v11 - v6) / v6;
      if (v170 <= 0.0) {
        float v170 = fmax(fmin(v178 * -0.45 + 0.5615, 0.6), 0.2);
      }
      if (v179 >= 0.0) {
        float v169 = v170;
      }
      float v180 = v179 * v169;
      float v181 = 1.0;
      uint64_t v182 = 4;
      if (v179 < 0.0) {
        uint64_t v182 = 31;
      }
      float v183 = a1[v182];
      if (v174)
      {
        float v184 = 0.0;
        if (v173 > 0.0)
        {
          float v461 = v171;
          float v467 = v5;
          if (v168 >= 0.0)
          {
            float v425 = powf(v168 * 0.0001, 0.1593);
            float v186 = powf((float)((float)(v425 * 18.852) + 0.83594) / (float)((float)(v425 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v185 = powf(v168 * -0.0001, 0.1593);
            float v186 = 0.0000014619
                 - powf((float)((float)(v185 * 18.852) + 0.83594) / (float)((float)(v185 * 18.688) + 1.0), 78.844);
          }
          float v459 = v186;
          if (v173 >= 0.0)
          {
            float v428 = powf(v173 * 0.0001, 0.1593);
            float v427 = powf((float)((float)(v428 * 18.852) + 0.83594) / (float)((float)(v428 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v426 = powf(v173 * -0.0001, 0.1593);
            float v427 = 0.0000014619
                 - powf((float)((float)(v426 * 18.852) + 0.83594) / (float)((float)(v426 * 18.688) + 1.0), 78.844);
          }
          float v171 = v461;
          float v184 = fmaxf(fminf(v459 / v427, 1.0), 0.0);
          float v178 = v165 / v166;
          float v5 = v467;
        }
        float v172 = (float)(v172 * (float)(1.0 - v184)) + (float)(v184 * v171);
      }
      if (v175) {
        float v181 = (float)(v183 - v167) / (float)(v183 - v5);
      }
      float v429 = 1.0;
      float v430 = fmax(fmin(1.0 - (float)((float)(v183 - v167) / (float)(v166 - v165)), 1.0), 0.0);
      if (v176) {
        float v431 = v430;
      }
      else {
        float v431 = 1.0;
      }
      if (v167 >= v183) {
        float v432 = v183;
      }
      else {
        float v432 = v167;
      }
      if (v5 >= v432) {
        float v432 = v5;
      }
      float v433 = (float)(v171 * v181) + (1.0 - v181) * v172;
      float v434 = v432 - v5;
      float v435 = v5 + (float)((float)((float)(v5 + (float)((float)(v432 - v5) * v433)) - v5) * (float)(v180 + 1.0));
      if (v435 >= v183) {
        float v435 = v183;
      }
      if (v5 >= v435) {
        float v435 = v5;
      }
      float v436 = v5 + (float)(v434 * 0.5);
      if (v436 >= v183) {
        float v436 = v183;
      }
      if (v5 >= v436) {
        float v436 = v5;
      }
      float v437 = v5 + (float)(v434 * 2.0);
      if (v437 >= v183) {
        float v437 = v183;
      }
      if (v5 >= v437) {
        float v437 = v5;
      }
      float v438 = v183 + (float)((float)(v432 - v183) * 2.0);
      if (v438 >= v183) {
        float v438 = v183;
      }
      if (v5 >= v438) {
        float v438 = v5;
      }
      float v439 = v183 + (float)((float)(v432 - v183) * 0.5);
      if (v439 >= v183) {
        float v439 = v183;
      }
      if (v5 >= v439) {
        float v439 = v5;
      }
      if (v436 < v438) {
        float v436 = v438;
      }
      if (v437 < v439) {
        float v439 = v437;
      }
      if (v435 >= v439) {
        float v435 = v439;
      }
      if (v436 >= v435) {
        float v440 = v436;
      }
      else {
        float v440 = v435;
      }
      float v441 = (float)(v183 - v432) + v440;
      if (v441 >= v183) {
        float v441 = v183;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v432;
      *(float *)(a2 + 12) = v183;
      *(float *)(a2 + 16) = v5;
      float v442 = (float)(v183 * v431) + (float)((float)(1.0 - v431) * v441);
      *(float *)(a2 + 20) = v440;
      *(float *)(a2 + 24) = v442;
      float v443 = 1.0;
      if (v432 != v5) {
        float v443 = (float)(v440 - v5) / v434;
      }
      if (v183 != v432) {
        float v429 = (float)(v442 - v440) / (float)(v183 - v432);
      }
      float v33 = 1.0;
      if (v177) {
        float v33 = (float)(v178 * v429) + (1.0 - v178) * v443;
      }
      float v34 = (float)(v429 * v429) * (float)(1.0 / v33);
      *(float *)(a2 + 28) = (float)(v443 * v443) * (float)(1.0 / v33);
LABEL_580:
      *(float *)(a2 + 32) = v33;
      *(float *)(a2 + 36) = v34;
      return;
    case 0xE:
      float v187 = v11;
      float v464 = v7;
      float v468 = v5;
      float v188 = a1[28];
      float v189 = a1[29];
      long long v190 = GetConfig((HDRConfig *)a1);
      if (!v190
        || (long long v191 = GetConfig((HDRConfig *)v190),
            long long v192 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v191, 0, 0),
            !*(unsigned char *)v192)
        || (long long v193 = GetConfig(v192)) == 0
        || (long long v194 = GetConfig((HDRConfig *)v193), !*((_DWORD *)v194 + 2379))
        || (v194[4756] & 0x80) == 0)
      {
        float v195 = 250.0;
        goto LABEL_177;
      }
      uint64_t v447 = GetConfig((HDRConfig *)v194);
      if (!v447)
      {
        float v195 = 0.0;
        goto LABEL_177;
      }
      uint64_t v448 = GetConfig((HDRConfig *)v447);
      float v195 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v448, 0x6Cu, 0);
      if (v195 >= 0.0)
      {
LABEL_177:
        float v196 = powf(v195 * 0.0001, 0.1593);
        float v198 = powf((float)((float)(v196 * 18.852) + 0.83594) / (float)((float)(v196 * 18.688) + 1.0), 78.844);
        char v199 = 0;
        goto LABEL_178;
      }
      float v449 = powf(v195 * -0.0001, 0.1593);
      float v198 = 0.0000014619
           - powf((float)((float)(v449 * 18.852) + 0.83594) / (float)((float)(v449 * 18.688) + 1.0), 78.844);
      char v199 = 1;
LABEL_178:
      float v200 = a1[7];
      *(_WORD *)(a2 + 2) = 3;
      if (v187 >= 0.5)
      {
        if (v199)
        {
          float v345 = powf(v195 * -0.0001, 0.1593);
          float v346 = powf((float)((float)(v345 * 18.852) + 0.83594) / (float)((float)(v345 * 18.688) + 1.0), 78.844);
          float v209 = v187;
          float v347 = 0.0000014619 - v346;
        }
        else
        {
          float v412 = powf(v195 * 0.0001, 0.1593);
          float v347 = powf((float)((float)(v412 * 18.852) + 0.83594) / (float)((float)(v412 * 18.688) + 1.0), 78.844);
          float v209 = v187;
        }
        float v211 = v464;
        float v212 = v468;
        float v210 = (float)((float)(v209 / v347) * 0.35) + 0.65;
      }
      else
      {
        float v201 = (float)((float)(0.1882 / v198) * 0.35) + 0.65;
        float v202 = (float)((float)(0.5 / v198) * 0.35) + 0.65;
        long long v203 = GetConfig(v197);
        float v204 = 0.0;
        if (v203)
        {
          long long v205 = GetConfig((HDRConfig *)v203);
          float v204 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v205, 0x85u, 0);
        }
        if (v189 >= v204) {
          float v204 = v189;
        }
        float v206 = v204 - v188;
        float v207 = v206 + -0.13;
        if (v206 > 0.22) {
          float v207 = 0.09;
        }
        if (v206 >= 0.13) {
          float v208 = v207;
        }
        else {
          float v208 = 0.0;
        }
        float v209 = v187;
        float v210 = (float)((float)((float)((float)(v201 + -1.0) * v208) / 0.09) + 1.0)
             + (float)((float)((float)(v187 + -0.1882)
                             * (float)(v202 - (float)((float)((float)((float)(v201 + -1.0) * v208) / 0.09) + 1.0)))
                     / 0.3118);
        float v211 = v464;
        float v212 = v468;
      }
      float v156 = 1.0;
      float v159 = 0.0;
      float v413 = v200
           * (float)((float)((float)(v210 + -1.0)
                           * (float)((float)((float)((float)(1.0 - (float)(v209 / v211)) + -0.1) / 0.4) + 0.0))
                   + 1.0);
      if (v200 >= v211) {
        float v414 = v211;
      }
      else {
        float v414 = v200;
      }
      if (v212 >= v414) {
        float v414 = v212;
      }
      if (v413 >= v211) {
        float v413 = v211;
      }
      if (v212 >= v413) {
        float v413 = v212;
      }
      *(float *)(a2 + 4) = v212;
      *(float *)(a2 + 8) = v414;
      *(float *)(a2 + 12) = v211;
      *(float *)(a2 + 16) = v212;
      *(float *)(a2 + 20) = v413;
      *(float *)(a2 + 24) = v211;
      if (v414 != v212) {
        float v159 = (float)((float)(v413 - v212) / (float)(v414 - v212)) + -1.0;
      }
      if (v211 != v414)
      {
        float v163 = v211 - v413;
        float v164 = v211 - v414;
LABEL_499:
        float v156 = v163 / v164;
      }
LABEL_500:
      float v415 = 1.0;
      float v84 = (float)(v159 * 0.5) + 1.0;
      float v416 = (float)((float)(1.0 / v84) * (float)(v156 * v156)) + -1.0;
      float v417 = 0.0;
      goto LABEL_524;
    case 0xF:
      float v213 = v11;
      float v214 = v7;
      float v215 = v5;
      float v216 = a1[28];
      float v217 = a1[29];
      float v218 = a1[30];
      uint64_t v219 = GetConfig((HDRConfig *)a1);
      if (!v219
        || (uint64_t v220 = GetConfig((HDRConfig *)v219),
            uint64_t v221 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v220, 0, 0),
            !*(unsigned char *)v221)
        || (uint64_t v222 = GetConfig(v221)) == 0
        || (uint64_t v223 = GetConfig((HDRConfig *)v222), !*((_DWORD *)v223 + 2379))
        || (v223[4756] & 0x80) == 0)
      {
        float v224 = 250.0;
        goto LABEL_195;
      }
      uint64_t v450 = GetConfig((HDRConfig *)v223);
      if (!v450)
      {
        float v224 = 0.0;
        goto LABEL_195;
      }
      uint64_t v451 = GetConfig((HDRConfig *)v450);
      float v224 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v451, 0x6Cu, 0);
      if (v224 >= 0.0)
      {
LABEL_195:
        float v225 = powf(v224 * 0.0001, 0.1593);
        float v227 = powf((float)((float)(v225 * 18.852) + 0.83594) / (float)((float)(v225 * 18.688) + 1.0), 78.844);
        goto LABEL_196;
      }
      float v452 = powf(v224 * -0.0001, 0.1593);
      float v227 = 0.0000014619
           - powf((float)((float)(v452 * 18.852) + 0.83594) / (float)((float)(v452 * 18.688) + 1.0), 78.844);
LABEL_196:
      *(_WORD *)(a2 + 2) = 3;
      float v228 = v213;
      if (v213 >= 0.5)
      {
        float v348 = (float)(v213 / v227) * 0.35;
        float v349 = 0.65;
      }
      else
      {
        float v229 = (float)((float)(0.5 / v227) * 0.35) + 0.65;
        uint64_t v230 = GetConfig(v226);
        if (v230)
        {
          uint64_t v231 = GetConfig((HDRConfig *)v230);
          float v232 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v231, 0x85u, 0);
        }
        else
        {
          float v232 = 0.0;
        }
        float v228 = v213;
        if (v217 >= v232) {
          float v232 = v217;
        }
        float v418 = v232 - v216;
        float v419 = (float)((float)((float)(v418 + -0.13) * -0.25) / 0.17) + 0.95;
        if (v418 > 0.3) {
          float v419 = 0.7;
        }
        if (v418 >= 0.13) {
          float v348 = v419;
        }
        else {
          float v348 = 0.95;
        }
        float v349 = (float)((float)(v213 + -0.3327) * (float)(v229 - v348)) / 0.1673;
      }
      float v420 = v348 + v349;
      float v421 = 1.0;
      float v422 = 0.0;
      float v423 = v218
           * (float)((float)((float)(v420 + -1.0)
                           * (float)((float)((float)((float)(1.0 - (float)(v228 / v214)) + -0.1) / 0.4) + 0.0))
                   + 1.0);
      if (v218 >= v214) {
        float v424 = v214;
      }
      else {
        float v424 = v218;
      }
      if (v215 >= v424) {
        float v424 = v215;
      }
      if (v423 >= v214) {
        float v423 = v214;
      }
      if (v215 >= v423) {
        float v423 = v215;
      }
      *(float *)(a2 + 4) = v215;
      *(float *)(a2 + 8) = v424;
      *(float *)(a2 + 12) = v214;
      *(float *)(a2 + 16) = v215;
      *(float *)(a2 + 20) = v423;
      *(float *)(a2 + 24) = v214;
      if (v424 != v215) {
        float v422 = (float)((float)(v423 - v215) / (float)(v424 - v215)) + -1.0;
      }
      if (v214 != v424) {
        float v421 = (float)(v214 - v423) / (float)(v214 - v424);
      }
      float v415 = 1.0;
      float v84 = (float)(v422 * 0.5) + 1.0;
      float v416 = (float)((float)(1.0 / v84) * (float)(v421 * v421)) + -1.0;
      float v417 = 0.8;
LABEL_524:
      float v344 = v415 + (float)(v416 * v417);
      *(float *)(a2 + 28) = v84;
LABEL_525:
      *(float *)(a2 + 32) = v84;
      *(float *)(a2 + 36) = v344;
      return;
    case 0x10:
      float v233 = v11;
      float v234 = v7;
      float v235 = v5;
      uint64_t v236 = GetConfig((HDRConfig *)a1);
      if (!v236
        || (uint64_t v237 = GetConfig((HDRConfig *)v236),
            uint64_t v238 = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v237, 0, 0),
            !*(unsigned char *)v238)
        || (uint64_t v239 = GetConfig(v238)) == 0
        || (uint64_t v240 = GetConfig((HDRConfig *)v239), !*((_DWORD *)v240 + 2379))
        || (v240[4756] & 0x80) == 0)
      {
        float v241 = 250.0;
LABEL_205:
        float v242 = a1[7];
        *(_WORD *)(a2 + 2) = 3;
LABEL_206:
        float v243 = powf(v241 * 0.0001, 0.1593);
        float v244 = powf((float)((float)(v243 * 18.852) + 0.83594) / (float)((float)(v243 * 18.688) + 1.0), 78.844);
        goto LABEL_207;
      }
      uint64_t v453 = GetConfig((HDRConfig *)v240);
      if (!v453)
      {
        float v241 = 0.0;
        goto LABEL_205;
      }
      uint64_t v454 = GetConfig((HDRConfig *)v453);
      float v241 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v454, 0x6Cu, 0);
      float v242 = a1[7];
      *(_WORD *)(a2 + 2) = 3;
      if (v241 >= 0.0) {
        goto LABEL_206;
      }
      float v455 = powf(v241 * -0.0001, 0.1593);
      float v244 = 0.0000014619
           - powf((float)((float)(v455 * 18.852) + 0.83594) / (float)((float)(v455 * 18.688) + 1.0), 78.844);
LABEL_207:
      float v245 = v233 / v244;
      float v246 = 1.0;
      float v247 = fminf(v245, 1.0);
      float v248 = (float)((float)(v247 * 0.2) + 0.8) + -1.0;
      BOOL v68 = v247 <= 0.0;
      float v249 = -0.2;
      if (!v68) {
        float v249 = v248;
      }
      float v250 = v242
           * (float)((float)(v249 * (float)((float)((float)((float)(1.0 - (float)(v233 / v234)) + -0.1) / 0.4) + 0.0))
                   + 1.0);
      if (v242 >= v234) {
        float v251 = v234;
      }
      else {
        float v251 = v242;
      }
      if (v235 >= v251) {
        float v251 = v235;
      }
      if (v250 >= v234) {
        float v250 = v234;
      }
      if (v235 >= v250) {
        float v250 = v235;
      }
      *(float *)(a2 + 4) = v235;
      *(float *)(a2 + 8) = v251;
      *(float *)(a2 + 12) = v234;
      *(float *)(a2 + 16) = v235;
      *(float *)(a2 + 20) = v250;
      *(float *)(a2 + 24) = v234;
      float v252 = 1.0;
      if (v251 != v235) {
        float v252 = (float)(v250 - v235) / (float)(v251 - v235);
      }
      if (v234 != v251) {
        float v246 = (float)(v234 - v250) / (float)(v234 - v251);
      }
      float v253 = (float)((float)(v252 + -1.0) * 0.5) + 1.0;
      float v254 = (float)((float)(v252 * v252) + -1.0) + 1.0;
      float v255 = (float)((float)((float)((float)(1.0 / v254) * (float)(v246 * v246)) + -1.0) * 0.0) + 1.0;
LABEL_271:
      *(float *)(a2 + 28) = v253;
LABEL_380:
      *(float *)(a2 + 32) = v254;
      *(float *)(a2 + 36) = v255;
      return;
    case 0x11:
      float v256 = a1[28];
      float v257 = a1[29];
      float v258 = a1[30];
      float v259 = a1[34];
      float v260 = a1[36];
      float v261 = a1[37];
      int v262 = *((unsigned __int8 *)a1 + 159);
      int v263 = *((unsigned __int8 *)a1 + 158);
      *(_WORD *)(a2 + 2) = 3;
      float v264 = v256 / v257;
      float v265 = (float)(v11 - v6) / v6;
      if (v265 >= 0.0) {
        float v259 = (float)((float)(v256 / v257) * -0.4) + 0.6;
      }
      float v266 = v265 * v259;
      float v267 = 1.0;
      float v268 = v266 + 1.0;
      float v269 = fmax(fmin(1.0 - (float)((float)(v7 - v258) / (float)(v257 - v256)), 1.0), 0.0);
      if (v263) {
        float v270 = v269;
      }
      else {
        float v270 = 1.0;
      }
      if (v258 >= v7) {
        float v271 = v7;
      }
      else {
        float v271 = v258;
      }
      if (v5 >= v271) {
        float v271 = v5;
      }
      float v272 = (float)((float)((float)(v7 - v258) / (float)(v7 - v5)) * v261)
           + (1.0 - (float)((float)(v7 - v258) / (float)(v7 - v5))) * v260;
      float v273 = v271 - v5;
      float v274 = v5 + (float)((float)((float)(v5 + (float)((float)(v271 - v5) * v272)) - v5) * v268);
      if (v274 >= v7) {
        float v274 = v7;
      }
      if (v5 >= v274) {
        float v274 = v5;
      }
      float v275 = v5 + (float)(v273 * 0.5);
      if (v275 >= v7) {
        float v275 = v7;
      }
      if (v5 >= v275) {
        float v275 = v5;
      }
      float v276 = v5 + (float)(v273 * 2.0);
      if (v276 >= v7) {
        float v276 = v7;
      }
      if (v5 >= v276) {
        float v276 = v5;
      }
      float v277 = v7 + (float)((float)(v271 - v7) * 2.0);
      if (v277 >= v7) {
        float v277 = v7;
      }
      if (v5 >= v277) {
        float v277 = v5;
      }
      float v278 = v7 + (float)((float)(v271 - v7) * 0.5);
      if (v278 >= v7) {
        float v278 = v7;
      }
      if (v5 >= v278) {
        float v278 = v5;
      }
      if (v275 < v277) {
        float v275 = v277;
      }
      if (v276 < v278) {
        float v278 = v276;
      }
      if (v274 >= v278) {
        float v274 = v278;
      }
      if (v275 >= v274) {
        float v279 = v275;
      }
      else {
        float v279 = v274;
      }
      float v280 = (float)(v7 - v271) + v279;
      if (v280 >= v7) {
        float v280 = v7;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v271;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      float v281 = (float)(v7 * v270) + (float)((float)(1.0 - v270) * v280);
      *(float *)(a2 + 20) = v279;
      *(float *)(a2 + 24) = v281;
      float v282 = 1.0;
      if (v271 != v5) {
        float v282 = (float)(v279 - v5) / v273;
      }
      if (v7 != v271) {
        float v267 = (float)(v281 - v279) / (float)(v7 - v271);
      }
      float v254 = 1.0;
      if (v262) {
        float v254 = (float)(v264 * v267) + (1.0 - v264) * v282;
      }
      float v253 = (float)(v282 * v282) * (float)(1.0 / v254);
      float v255 = (float)(v267 * v267) * (float)(1.0 / v254);
      goto LABEL_271;
    case 0x12:
      float v283 = a1[28];
      float v284 = a1[29];
      float v285 = a1[30];
      float v286 = a1[36];
      float v287 = a1[37];
      int v288 = *((unsigned __int8 *)a1 + 159);
      int v289 = *((unsigned __int8 *)a1 + 158);
      *(_WORD *)(a2 + 2) = 3;
      float v290 = v283 / v284;
      float v291 = fminf((float)(v11 - v6) / v6, 0.4);
      float v292 = (float)((float)(v283 / v284) * -0.45) + 0.5;
      if (v292 <= 0.5) {
        float v293 = (float)((float)(v283 / v284) * -0.45) + 0.5;
      }
      else {
        float v293 = 0.5;
      }
      if (v292 >= 0.1) {
        float v294 = v293;
      }
      else {
        float v294 = 0.1;
      }
      float v295 = (float)(v290 * -0.58) + 0.52;
      float v296 = 0.3;
      if (v295 <= 0.3) {
        float v296 = (float)(v290 * -0.58) + 0.52;
      }
      if (v295 >= 0.1) {
        float v297 = v296;
      }
      else {
        float v297 = 0.1;
      }
      if (v291 < 0.0) {
        float v294 = v297;
      }
      float v298 = v291 * v294;
      float v72 = 1.0;
      float v299 = v298 + 1.0;
      float v300 = fmax(fmin(1.0 - (float)((float)(v7 - v285) / (float)(v284 - v283)), 1.0), 0.0);
      if (v289) {
        float v301 = v300;
      }
      else {
        float v301 = 1.0;
      }
      if (v285 >= v7) {
        float v302 = v7;
      }
      else {
        float v302 = v285;
      }
      if (v5 >= v302) {
        float v302 = v5;
      }
      float v303 = (float)((float)((float)(v7 - v285) / (float)(v7 - v5)) * v287)
           + (1.0 - (float)((float)(v7 - v285) / (float)(v7 - v5))) * v286;
      float v304 = v302 - v5;
      float v305 = v5 + (float)((float)((float)(v5 + (float)((float)(v302 - v5) * v303)) - v5) * v299);
      if (v305 >= v7) {
        float v305 = v7;
      }
      if (v5 >= v305) {
        float v305 = v5;
      }
      float v306 = v5 + (float)(v304 * 0.5);
      if (v306 >= v7) {
        float v306 = v7;
      }
      if (v5 >= v306) {
        float v306 = v5;
      }
      float v307 = v5 + (float)(v304 * 2.0);
      if (v307 >= v7) {
        float v307 = v7;
      }
      if (v5 >= v307) {
        float v307 = v5;
      }
      float v308 = v7 + (float)((float)(v302 - v7) * 2.0);
      if (v308 >= v7) {
        float v308 = v7;
      }
      if (v5 >= v308) {
        float v308 = v5;
      }
      float v309 = v7 + (float)((float)(v302 - v7) * 0.5);
      if (v309 >= v7) {
        float v309 = v7;
      }
      if (v5 >= v309) {
        float v309 = v5;
      }
      if (v306 < v308) {
        float v306 = v308;
      }
      if (v307 < v309) {
        float v309 = v307;
      }
      if (v305 < v309) {
        float v309 = v305;
      }
      if (v306 >= v309) {
        float v310 = v306;
      }
      else {
        float v310 = v309;
      }
      float v311 = (float)(v7 - v302) + v310;
      if (v311 >= v7) {
        float v311 = v7;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v302;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      float v312 = (float)(v7 * v301) + (float)((float)(1.0 - v301) * v311);
      *(float *)(a2 + 20) = v310;
      *(float *)(a2 + 24) = v312;
      float v313 = 1.0;
      if (v302 != v5) {
        float v313 = (float)(v310 - v5) / v304;
      }
      if (v7 != v302) {
        float v72 = (float)(v312 - v310) / (float)(v7 - v302);
      }
      if (v288) {
        float v69 = (float)((float)(v290 * v72) * 0.82) + (1.0 - v290) * v313;
      }
      else {
        float v69 = 1.0;
      }
      *(float *)(a2 + 28) = v313;
LABEL_449:
      *(float *)(a2 + 32) = v69;
      *(float *)(a2 + 36) = v72;
      return;
    case 0x13:
      float v314 = a1[28];
      float v315 = a1[29];
      float v316 = a1[30];
      float v317 = a1[34];
      float v318 = a1[35];
      float v319 = a1[36];
      float v320 = a1[37];
      int v321 = *((unsigned __int8 *)a1 + 157);
      int v322 = *((unsigned __int8 *)a1 + 158);
      int v323 = *((unsigned __int8 *)a1 + 159);
      *(_WORD *)(a2 + 2) = 3;
      float v324 = v314 / v315;
      float v325 = (float)(v11 - v6) / v6;
      if (v318 <= 0.0) {
        float v318 = fmax(fmin(v324 * -0.45 + 0.5615, 0.6), 0.2);
      }
      if (v325 >= 0.0) {
        float v317 = v318;
      }
      float v326 = v325 * v317;
      float v327 = 1.0;
      float v328 = v326 + 1.0;
      float v329 = 1.0;
      if (v321) {
        float v329 = (float)(v7 - v316) / (float)(v7 - v5);
      }
      float v330 = fmax(fmin(1.0 - (float)((float)(v7 - v316) / (float)(v315 - v314)), 1.0), 0.0);
      if (v322) {
        float v331 = v330;
      }
      else {
        float v331 = 1.0;
      }
      if (v316 >= v7) {
        float v316 = v7;
      }
      if (v5 >= v316) {
        float v316 = v5;
      }
      float v332 = (float)(v320 * v329) + (1.0 - v329) * v319;
      float v333 = v316 - v5;
      float v334 = v5 + (float)((float)((float)(v5 + (float)((float)(v316 - v5) * v332)) - v5) * v328);
      if (v334 >= v7) {
        float v334 = v7;
      }
      if (v5 >= v334) {
        float v334 = v5;
      }
      float v335 = v5 + (float)(v333 * 0.5);
      if (v335 >= v7) {
        float v335 = v7;
      }
      if (v5 >= v335) {
        float v335 = v5;
      }
      float v336 = v5 + (float)(v333 * 2.0);
      if (v336 >= v7) {
        float v336 = v7;
      }
      if (v5 >= v336) {
        float v336 = v5;
      }
      float v337 = v7 + (float)((float)(v316 - v7) * 2.0);
      if (v337 >= v7) {
        float v337 = v7;
      }
      if (v5 >= v337) {
        float v337 = v5;
      }
      float v338 = v7 + (float)((float)(v316 - v7) * 0.5);
      if (v338 >= v7) {
        float v338 = v7;
      }
      if (v5 >= v338) {
        float v338 = v5;
      }
      if (v335 < v337) {
        float v335 = v337;
      }
      if (v336 < v338) {
        float v338 = v336;
      }
      if (v334 >= v338) {
        float v334 = v338;
      }
      if (v335 >= v334) {
        float v334 = v335;
      }
      float v339 = v7 - v316;
      float v340 = (float)(v7 - v316) + v334;
      if (v340 >= v7) {
        float v340 = v7;
      }
      *(float *)(a2 + 4) = v5;
      *(float *)(a2 + 8) = v316;
      *(float *)(a2 + 12) = v7;
      *(float *)(a2 + 16) = v5;
      float v341 = (float)(v7 * v331) + (float)((float)(1.0 - v331) * v340);
      *(float *)(a2 + 20) = v334;
      *(float *)(a2 + 24) = v341;
      if (v316 != v5) {
        float v327 = (float)(v334 - v5) / v333;
      }
      float v254 = 1.0;
      BOOL v342 = v7 == v316;
      float v343 = 1.0;
      if (!v342) {
        float v343 = (float)(v341 - v334) / v339;
      }
      if (v323) {
        float v254 = (float)(v324 * v343) + (1.0 - v324) * v327;
      }
      float v255 = (float)(v343 * v343) * (float)(1.0 / v254);
      *(float *)(a2 + 28) = (float)(v327 * v327) * (float)(1.0 / v254);
      goto LABEL_380;
    default:
      *(unsigned char *)a2 = 0;
      *(_WORD *)(a2 + 2) = 3;
      *(_OWORD *)(a2 + 4) = xmmword_2222D34E0;
      *(_OWORD *)(a2 + 20) = xmmword_2222D34F0;
      *(_DWORD *)(a2 + 36) = 1065353216;
      return;
  }
}

float applyEdrAdaptationCurveS(uint64_t a1, float a2)
{
  float v2 = a2;
  if (*(unsigned char *)a1)
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    int v5 = *(unsigned __int16 *)(a1 + 2);
    float v6 = (float *)(a1 + 4);
    float v7 = (float *)(a1 + 16);
    float v8 = (float *)(a1 + 28);
    if (v4) {
      float v9 = spl_apply_with_linear_extension(v5, v6, v7, v8, a2);
    }
    else {
      float v9 = spl_apply(v5, v6, v7, (uint64_t)v8, a2);
    }
    float v2 = v9;
  }
  uint64_t Config = GetConfig((HDRConfig *)a1);
  if (Config)
  {
    float v11 = GetConfig((HDRConfig *)Config);
    HDRConfig::GetConfigEntryValue((uint64_t)v11, 0x4Bu, 0);
  }
  return v2;
}

void calculateAmbAdaptationParamS(float *a1, uint64_t a2)
{
  float v3 = *a1;
  float v4 = a1[1];
  float v5 = a1[2];
  float v6 = a1[3];
  float v7 = a1[4];
  float v9 = a1[5];
  float v8 = a1[6];
  float v10 = a1[8];
  *(unsigned char *)a2 = 1;
  *(unsigned char *)(a2 + 48) = *((unsigned char *)a1 + 36);
  switch(LODWORD(v3))
  {
    case 2:
      float v11 = v4 * v7;
      *(_WORD *)(a2 + 2) = 3;
      *(float *)(a2 + 4) = v9;
      if ((float)(v4 * v7) >= 0.0)
      {
        float v25 = powf(v11 * 0.0001, 0.1593);
        float v13 = powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v12 = powf(v11 * -0.0001, 0.1593);
        float v13 = 0.0000014619
            - powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a2 + 8) = v13;
      *(float *)(a2 + 12) = v8;
      float v26 = v5 + v6;
      if ((float)(v5 + v6) >= 0.0)
      {
        float v42 = powf(v26 * 0.0001, 0.1593);
        float v28 = powf((float)((float)(v42 * 18.852) + 0.83594) / (float)((float)(v42 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v27 = powf(v26 * -0.0001, 0.1593);
        float v28 = 0.0000014619
            - powf((float)((float)(v27 * 18.852) + 0.83594) / (float)((float)(v27 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a2 + 16) = v28;
      float v43 = v5 + v11;
      if ((float)(v5 + v11) >= 0.0)
      {
        float v74 = powf(v43 * 0.0001, 0.1593);
        float v45 = powf((float)((float)(v74 * 18.852) + 0.83594) / (float)((float)(v74 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v44 = powf(v43 * -0.0001, 0.1593);
        float v45 = 0.0000014619
            - powf((float)((float)(v44 * 18.852) + 0.83594) / (float)((float)(v44 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a2 + 20) = v45;
      float v75 = v5 + v7;
      if ((float)(v5 + v7) >= 0.0)
      {
        float v78 = powf(v75 * 0.0001, 0.1593);
        float v77 = powf((float)((float)(v78 * 18.852) + 0.83594) / (float)((float)(v78 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v76 = powf(v75 * -0.0001, 0.1593);
        float v77 = 0.0000014619
            - powf((float)((float)(v76 * 18.852) + 0.83594) / (float)((float)(v76 * 18.688) + 1.0), 78.844);
      }
      float v79 = (float)(v45 - v28) / (float)(v13 - v9);
      *(float *)(a2 + 24) = v77;
      *(float *)(a2 + 28) = (float)(1.0 / v79) * (float)(v79 * v79);
      *(float *)(a2 + 32) = v79;
      *(float *)(a2 + 36) = (float)(1.0 / v79)
                          * (float)((float)((float)(v77 - v45) / (float)(v8 - v13))
                                  * (float)((float)(v77 - v45) / (float)(v8 - v13)));
      float v80 = (float)(v5 - (float)(v5 + v10)) / (float)(v7 - v10);
      *(float *)(a2 + 40) = v80;
      float v14 = (float)(v5 + v10) - (float)(v80 * v10);
      break;
    case 3:
      *(_WORD *)(a2 + 2) = 3;
      *(float *)(a2 + 4) = v9;
      *(float *)(a2 + 8) = (float)(v9 + v8) * 0.5;
      *(float *)(a2 + 12) = v8;
      float v15 = v5 + v6;
      if ((float)(v5 + v6) >= 0.0)
      {
        float v29 = powf(v15 * 0.0001, 0.1593);
        float v17 = powf((float)((float)(v29 * 18.852) + 0.83594) / (float)((float)(v29 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v16 = powf(v15 * -0.0001, 0.1593);
        float v17 = 0.0000014619
            - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a2 + 16) = v17;
      float v30 = v5 + v7;
      if ((float)(v5 + v7) >= 0.0)
      {
        float v46 = powf(v30 * 0.0001, 0.1593);
        float v32 = powf((float)((float)(v46 * 18.852) + 0.83594) / (float)((float)(v46 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v31 = powf(v30 * -0.0001, 0.1593);
        float v32 = 0.0000014619
            - powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a2 + 20) = (float)(v17 + v32) * 0.5;
      *(float *)(a2 + 24) = v32;
      float v47 = (float)(v32 - v17) / (float)(v8 - v9);
      *(float *)(a2 + 28) = v47;
      *(float *)(a2 + 32) = v47;
      float v48 = (float)(v5 - (float)(v5 + v10)) / (float)(v7 - v10);
      *(float *)(a2 + 36) = v47;
      *(float *)(a2 + 40) = v48;
      float v14 = (float)(v5 + v10) - (float)(v48 * v10);
      break;
    case 4:
      *(_WORD *)(a2 + 2) = 3;
      *(float *)(a2 + 4) = v9;
      *(float *)(a2 + 12) = v8;
      float v18 = v5 + v6;
      if ((float)(v5 + v6) >= 0.0)
      {
        float v33 = powf(v18 * 0.0001, 0.1593);
        float v20 = powf((float)((float)(v33 * 18.852) + 0.83594) / (float)((float)(v33 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v19 = powf(v18 * -0.0001, 0.1593);
        float v20 = 0.0000014619
            - powf((float)((float)(v19 * 18.852) + 0.83594) / (float)((float)(v19 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a2 + 16) = v20;
      float v34 = v5 + v7;
      if ((float)(v5 + v7) >= 0.0)
      {
        float v49 = powf(v34 * 0.0001, 0.1593);
        float v36 = powf((float)((float)(v49 * 18.852) + 0.83594) / (float)((float)(v49 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v35 = powf(v34 * -0.0001, 0.1593);
        float v36 = 0.0000014619
            - powf((float)((float)(v35 * 18.852) + 0.83594) / (float)((float)(v35 * 18.688) + 1.0), 78.844);
      }
      float v50 = v9 + (float)((float)(v8 - v9) * 0.5);
      float v51 = v20 + (float)((float)(v36 - v20) * 0.5);
      if (v20 >= v51) {
        float v51 = v20;
      }
      float v52 = v20 + (float)((float)(v8 - v9) * 0.5);
      if (v52 >= v36) {
        float v52 = v36;
      }
      float v53 = v51 + (float)((float)(v52 - v51) * 2.5);
      *(float *)(a2 + 8) = v50;
      *(float *)(a2 + 20) = v53;
      *(float *)(a2 + 24) = v36;
      float v54 = 1.0;
      float v55 = 1.0;
      if (v50 != v9) {
        float v55 = (float)(v53 - v20) / (float)(v50 - v9);
      }
      if (v8 != v50) {
        float v54 = (float)(v36 - v53) / (float)(v8 - v50);
      }
      float v56 = (float)(v55 + -1.0) + 1.0;
      float v57 = (float)(1.0 / v56) * (float)(v54 * v54);
      *(float *)(a2 + 28) = (float)((float)(v55 * v55) * (float)(1.0 / v56)) * 0.75;
      *(float *)(a2 + 32) = v56;
      float v58 = (float)(v5 - (float)(v5 + v10)) / (float)(v7 - v10);
      *(float *)(a2 + 36) = v57;
      *(float *)(a2 + 40) = v58;
      float v14 = (float)(v5 + v10) - (float)(v58 * v10);
      break;
    case 5:
      float v21 = a1[10];
      float v22 = v5 + v6;
      if ((float)(v5 + v6) >= 0.0)
      {
        float v37 = powf(v22 * 0.0001, 0.1593);
        float v24 = powf((float)((float)(v37 * 18.852) + 0.83594) / (float)((float)(v37 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v23 = powf(v22 * -0.0001, 0.1593);
        float v24 = 0.0000014619
            - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
      }
      float v38 = v5 + v7;
      float v101 = v24;
      if ((float)(v5 + v7) >= 0.0)
      {
        float v59 = powf(v38 * 0.0001, 0.1593);
        float v41 = powf((float)((float)(v59 * 18.852) + 0.83594) / (float)((float)(v59 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v39 = powf(v38 * -0.0001, 0.1593);
        float v41 = 0.0000014619
            - powf((float)((float)(v39 * 18.852) + 0.83594) / (float)((float)(v39 * 18.688) + 1.0), 78.844);
      }
      float v100 = v41;
      uint64_t Config = (HDRConfig *)GetConfig(v40);
      float v61 = 0.0;
      float v62 = 0.0;
      if (Config)
      {
        float v63 = GetConfig(Config);
        uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v63, 0x88u, 0);
        float v62 = *(float *)Config;
      }
      uint64_t ConfigEntryValue = (HDRConfig *)GetConfig(Config);
      if (ConfigEntryValue)
      {
        float v65 = GetConfig(ConfigEntryValue);
        uint64_t ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v65, 0x89u, 0);
        float v61 = *(float *)ConfigEntryValue;
      }
      float v66 = v9 + (float)(v62 * (float)(v8 - v9));
      float v67 = v9 + (float)(v61 * (float)(v8 - v9));
      float v68 = 1.0;
      float v69 = 1.0;
      if (v66 != v67) {
        float v69 = fmax(fmin((float)((float)(v21 - v67) / (float)(v66 - v67)), 1.0), 0.0);
      }
      float v70 = fmax(fmin((float)((float)(v100 - v101) / (float)(v8 - v9)), 1.0), 0.0);
      if (v9 != v8) {
        float v68 = v70;
      }
      float v97 = v68;
      float v71 = GetConfig(ConfigEntryValue);
      float v98 = v7;
      float v99 = v10;
      if (v71)
      {
        float v72 = GetConfig((HDRConfig *)v71);
        float v73 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v72, 0x8Au, 0);
      }
      else
      {
        float v73 = 0.0;
      }
      float v96 = v73;
      if (v21 >= (float)((float)(v9 + v8) * 0.5)) {
        float v21 = (float)(v9 + v8) * 0.5;
      }
      float v81 = -(float)(v21 + -0.0000014619);
      if (v21 >= 0.00000073096) {
        float v81 = v21;
      }
      float v82 = flt_2222D1868[v21 < 0.00000073096];
      float v83 = powf(v81, 0.012683);
      float v84 = fmax((float)((float)(v83 + -0.83594) / (float)((float)(v83 * -18.688) + 18.852)), 0.0);
      float v85 = v5 + (float)(v82 * powf(v84, 6.2774));
      if (v85 >= 0.0)
      {
        float v88 = powf(v85 * 0.0001, 0.1593);
        float v87 = powf((float)((float)(v88 * 18.852) + 0.83594) / (float)((float)(v88 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v86 = powf(v85 * -0.0001, 0.1593);
        float v87 = 0.0000014619
            - powf((float)((float)(v86 * 18.852) + 0.83594) / (float)((float)(v86 * 18.688) + 1.0), 78.844);
      }
      float v89 = v101 + (float)((float)((float)(v21 - v9) * v97) * v96);
      if (v87 >= v89) {
        float v89 = v87;
      }
      float v90 = 1.0;
      float v91 = (float)((float)(1.0 - v69) * v89) + (float)(v69 * v87);
      float v92 = 1.0;
      if (v9 != v21) {
        float v92 = (float)(v91 - v101) / (float)(v21 - v9);
      }
      if (v21 != v8) {
        float v90 = (float)(v100 - v91) / (float)(v8 - v21);
      }
      float v93 = pow(v92, 3.0);
      float v94 = v93 + (float)((float)(v92 - v93) * v69);
      *(_WORD *)(a2 + 2) = 3;
      *(float *)(a2 + 4) = v9;
      *(float *)(a2 + 8) = v21;
      *(float *)(a2 + 12) = v8;
      *(float *)(a2 + 16) = v101;
      *(float *)(a2 + 20) = v91;
      *(float *)(a2 + 24) = v100;
      *(float *)(a2 + 28) = v94;
      *(float *)(a2 + 32) = v90 + (float)((float)((float)((float)(v94 + v90) * 0.5) - v90) * v69);
      float v95 = (float)(v5 - (float)(v5 + v99)) / (float)(v98 - v99);
      *(float *)(a2 + 36) = v90;
      *(float *)(a2 + 40) = v95;
      float v14 = (float)(v5 + v99) - (float)(v95 * v99);
      break;
    case 6:
      *(unsigned char *)a2 = 0;
      *(_WORD *)(a2 + 2) = 3;
      *(_OWORD *)(a2 + 4) = xmmword_2222D34E0;
      *(_OWORD *)(a2 + 20) = xmmword_2222D34F0;
      *(void *)(a2 + 36) = 1065353216;
      float v14 = 0.0;
      break;
    default:
      *(unsigned char *)a2 = 0;
      *(_WORD *)(a2 + 2) = 3;
      *(_OWORD *)(a2 + 4) = xmmword_2222D34E0;
      *(_OWORD *)(a2 + 20) = xmmword_2222D34F0;
      *(_DWORD *)(a2 + 36) = 1065353216;
      *(float *)(a2 + 40) = (float)-v10 / (float)(v7 - v10);
      float v14 = (float)(v7 * v10) / (float)(v7 - v10);
      break;
  }
  *(float *)(a2 + 44) = v14;
}

float applyAmbAdaptationCurveS(uint64_t a1, float a2)
{
  if (*(unsigned char *)a1)
  {
    int v4 = *(unsigned __int16 *)(a1 + 2);
    float v5 = (float *)(a1 + 4);
    float v6 = (float *)(a1 + 16);
    float v7 = (float *)(a1 + 28);
    if (*(unsigned char *)(a1 + 48)) {
      float v9 = spl_apply_with_linear_extension(v4, v5, v6, v7, a2);
    }
    else {
      float v9 = spl_apply(v4, v5, v6, (uint64_t)v7, a2);
    }
    float v16 = v9;
    uint64_t Config = GetConfig(v8);
    if (Config)
    {
      float v18 = GetConfig((HDRConfig *)Config);
      HDRConfig::GetConfigEntryValue((uint64_t)v18, 0x4Bu, 0);
    }
    float v19 = -(float)(v16 + -0.0000014619);
    if (v16 < 0.00000073096)
    {
      float v20 = -10000.0;
    }
    else
    {
      float v19 = v16;
      float v20 = 10000.0;
    }
    float v30 = v20;
    float v21 = powf(v19, 0.012683);
    float v22 = fmax((float)((float)(v21 + -0.83594) / (float)((float)(v21 * -18.688) + 18.852)), 0.0);
    float v23 = powf(v22, 6.2774);
    float v29 = *(float *)(a1 + 40);
    float v31 = v30 * v23;
    float v24 = -(float)(a2 + -0.0000014619);
    if (a2 < 0.00000073096)
    {
      float v25 = -10000.0;
    }
    else
    {
      float v24 = a2;
      float v25 = 10000.0;
    }
    float v26 = powf(v24, 0.012683);
    float v27 = fmax((float)((float)(v26 + -0.83594) / (float)((float)(v26 * -18.688) + 18.852)), 0.0);
    float v15 = v31 - (float)(*(float *)(a1 + 44) + (float)(v29 * (float)(v25 * powf(v27, 6.2774))));
  }
  else
  {
    float v10 = -(float)(a2 + -0.0000014619);
    if (a2 >= 0.00000073096) {
      float v10 = a2;
    }
    float v11 = flt_2222D1868[a2 < 0.00000073096];
    float v12 = powf(v10, 0.012683);
    float v13 = fmax((float)((float)(v12 + -0.83594) / (float)((float)(v12 * -18.688) + 18.852)), 0.0);
    float v14 = powf(v13, 6.2774);
    float v15 = (float)(v11 * v14) - (float)(*(float *)(a1 + 44) + (float)(*(float *)(a1 + 40) * (float)(v11 * v14)));
  }
  return fmaxf(v15, 0.0);
}

double applyAmbAdaptationCurveS_C(uint64_t a1, double result)
{
  if (*(unsigned char *)a1)
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    int v4 = *(unsigned __int16 *)(a1 + 2);
    float v5 = (float *)(a1 + 4);
    float v6 = (float *)(a1 + 16);
    float v7 = (float *)(a1 + 28);
    float v38 = *(float *)&result;
    if (v3) {
      float v9 = spl_apply_with_linear_extension(v4, v5, v6, v7, *(float *)&result);
    }
    else {
      float v9 = spl_apply(v4, v5, v6, (uint64_t)v7, *(float *)&result);
    }
    float v18 = v9;
    uint64_t Config = GetConfig(v8);
    if (Config)
    {
      float v20 = GetConfig((HDRConfig *)Config);
      HDRConfig::GetConfigEntryValue((uint64_t)v20, 0x4Bu, 0);
    }
    float v21 = -(float)(v18 + -0.0000014619);
    if (v18 < 0.00000073096)
    {
      float v22 = -10000.0;
    }
    else
    {
      float v21 = v18;
      float v22 = 10000.0;
    }
    float v36 = v22;
    float v23 = powf(v21, 0.012683);
    float v24 = fmax((float)((float)(v23 + -0.83594) / (float)((float)(v23 * -18.688) + 18.852)), 0.0);
    float v25 = powf(v24, 6.2774);
    float v35 = *(float *)(a1 + 40);
    float v37 = v36 * v25;
    float v26 = -(float)(v38 + -0.0000014619);
    if (v38 < 0.00000073096)
    {
      float v27 = -10000.0;
    }
    else
    {
      float v26 = v38;
      float v27 = 10000.0;
    }
    float v28 = powf(v26, 0.012683);
    float v29 = fmax((float)((float)(v28 + -0.83594) / (float)((float)(v28 * -18.688) + 18.852)), 0.0);
    float v17 = v37 - (float)(*(float *)(a1 + 44) + (float)(v35 * (float)(v27 * powf(v29, 6.2774))));
  }
  else
  {
    float v10 = *(float *)(a1 + 40);
    if (v10 == 0.0) {
      return result;
    }
    float v11 = *(float *)(a1 + 44);
    if (v11 == 0.0) {
      return result;
    }
    BOOL v12 = *(float *)&result < 0.00000073096;
    if (*(float *)&result < 0.00000073096) {
      *(float *)&uint64_t result = -(float)(*(float *)&result + -0.0000014619);
    }
    float v13 = flt_2222D1868[v12];
    float v14 = powf(*(float *)&result, 0.012683);
    float v15 = fmax((float)((float)(v14 + -0.83594) / (float)((float)(v14 * -18.688) + 18.852)), 0.0);
    float v16 = powf(v15, 6.2774);
    float v17 = (float)(v13 * v16) - (float)(v11 + (float)(v10 * (float)(v13 * v16)));
  }
  float v30 = v17 * 0.0001;
  BOOL v31 = v17 <= 0.0;
  float v32 = 0.0;
  if (!v31) {
    float v32 = v30;
  }
  float v33 = powf(v32, 0.1593);
  float v34 = (float)((float)(v33 * 18.852) + 0.83594) / (float)((float)(v33 * 18.688) + 1.0);
  *(float *)&uint64_t result = powf(v34, 78.844);
  return result;
}

void calculateSceneLuxAdaptationParamS(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_DWORD *)a1 == 2)
  {
    predictSceneLuxAdaptationAnchorLinReg(a1);
  }
  else if (*(_DWORD *)a1 == 1)
  {
    id v24 = 0;
    int v4 = (void *)[objc_alloc(MEMORY[0x263F00DA8]) initWithShape:&unk_26D4B7488 dataType:65568 error:&v24];
    id v5 = v24;
    id v23 = 0;
    float v6 = (void *)[objc_alloc(MEMORY[0x263F00DA8]) initWithShape:&unk_26D4B74A0 dataType:65568 error:&v23];
    id v7 = v23;
    float v8 = *(float *)(a1 + 16);
    float v9 = [NSNumber numberWithDouble:*(float *)(a1 + 4)];
    [v4 setObject:v9 atIndexedSubscript:0];

    float v10 = [NSNumber numberWithDouble:*(float *)(a1 + 12)];
    [v4 setObject:v10 atIndexedSubscript:1];

    float v11 = [NSNumber numberWithDouble:*(float *)(a1 + 8)];
    [v4 setObject:v11 atIndexedSubscript:2];

    BOOL v12 = objc_msgSend(NSNumber, "numberWithDouble:", fminf(v8, 65495.0));
    [v4 setObject:v12 atIndexedSubscript:3];

    id v22 = v5;
    float v13 = objc_msgSend(v3, "predictionFromFeature_vector:error:", v4, &v22);
    id v14 = v22;

    float v15 = objc_msgSend(v13, "anchor_points");

    if (v15)
    {
      float v16 = [v15 objectAtIndexedSubscript:0];
      [v16 floatValue];
      *(_DWORD *)(a1 + 20) = v17;

      float v18 = [v15 objectAtIndexedSubscript:1];
      [v18 floatValue];
      *(_DWORD *)(a1 + 24) = v19;

      float v20 = [v15 objectAtIndexedSubscript:2];
      [v20 floatValue];
      *(_DWORD *)(a1 + 28) = v21;
    }
    else
    {
      *(void *)(a1 + 20) = 0x3F0000003E800000;
      *(_DWORD *)(a1 + 28) = 1061158912;
    }
  }
}

void sub_2222A36B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void predictSceneLuxAdaptationAnchorLinReg(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t Config = GetConfig((HDRConfig *)a1);
  if (Config)
  {
    id v3 = GetConfig((HDRConfig *)Config);
    float v4 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v3, 0x9Fu, 0);
  }
  else
  {
    float v4 = 0.0;
  }
  float v5 = *(float *)(a1 + 16);
  if (v5 >= v4)
  {
    float v4 = 250000.0;
    if (v5 <= 250000.0) {
      float v4 = *(float *)(a1 + 16);
    }
  }
  float v27 = log10f(v4);
  float v6 = *(float *)(a1 + 8);
  float v8 = GetConfig(v7);
  if (v8)
  {
    float v10 = GetConfig((HDRConfig *)v8);
    v9.i32[0] = *(_DWORD *)HDRConfig::GetConfigEntryValue((uint64_t)v10, 0xA0u, 0);
  }
  else
  {
    v9.i32[0] = 0;
  }
  char v11 = 0;
  if (v6 >= *(float *)v9.i32) {
    *(float *)v9.i32 = v6;
  }
  v28[0] = 1065353216;
  v28[1] = v9.i32[0];
  *(float *)&v28[2] = v27;
  float v12 = v27 * *(float *)v9.i32;
  v13.i64[0] = __PAIR64__(LODWORD(v27), v9.u32[0]);
  v13.i64[1] = __PAIR64__(LODWORD(v27), v9.u32[0]);
  *(float *)&v9.i32[1] = v27;
  *(float32x2_t *)v9.i8 = vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
  v28[5] = v9.i32[1];
  v28[3] = v9.i32[0];
  *(float *)&v28[4] = v12;
  float32x4_t v29 = vmulq_f32(v13, (float32x4_t)vzip1q_s32(v9, v9));
  *(_WORD *)(a1 + 32) = 3;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 40) = 0x3F4077BE3F02116DLL;
  uint64_t v14 = 1;
  do
  {
    uint64_t v15 = 0;
    char v16 = v11;
    int v17 = (float *)((char *)&unk_2222D3628 + 4 * v14);
    float v18 = 0.0;
    do
    {
      float v19 = *v17;
      v17 += 3;
      float v18 = v18 + (float)(*(float *)&v28[v15++] * v19);
    }
    while (v15 != 10);
    *(float *)(a1 + 4 * v14 + 72) = v18;
    char v11 = 1;
    uint64_t v14 = 2;
  }
  while ((v16 & 1) == 0);
  float v20 = *(float *)(a1 + 76);
  float v21 = *(float *)(a1 + 80);
  if (v20 <= 0.50808) {
    float v22 = *(float *)(a1 + 76);
  }
  else {
    float v22 = 0.50808;
  }
  if (v20 >= 0.12702) {
    float v23 = v22;
  }
  else {
    float v23 = 0.12702;
  }
  float v24 = 0.75183;
  if (v21 <= 0.75183) {
    float v24 = *(float *)(a1 + 80);
  }
  if (v21 < 0.37077) {
    float v24 = 0.37077;
  }
  if (v24 >= (float)(v23 + 0.24375)) {
    float v25 = v23 + 0.24375;
  }
  else {
    float v25 = v24;
  }
  *(float *)(a1 + 76) = v23;
  *(float *)(a1 + 80) = v25;
  memset_pattern16((void *)(a1 + 108), &unk_2222D3500, 0xCuLL);
  float v26 = (float)(v25 - v23) / 0.24375;
  *(float *)(a1 + 116) = v26;
  *(float *)(a1 + 108) = v23 / 0.50808;
  *(float *)(a1 + 112) = (float)((float)(v23 / 0.50808) + v26) * 0.5;
}

float calcSceneLuxAdaptationMixFactor(float a1)
{
  float v1 = fminf(a1, 10000.0);
  if (v1 >= 0.0)
  {
    float v4 = powf(v1 * 0.0001, 0.1593);
    float v3 = powf((float)((float)(v4 * 18.852) + 0.83594) / (float)((float)(v4 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v2 = powf(v1 * -0.0001, 0.1593);
    float v3 = 0.0000014619 - powf((float)((float)(v2 * 18.852) + 0.83594) / (float)((float)(v2 * 18.688) + 1.0), 78.844);
  }
  float v5 = v3 + -0.55;
  if (v3 > 0.65) {
    float v5 = 0.1;
  }
  BOOL v6 = v3 < 0.55;
  float result = 0.0;
  if (v6) {
    float v5 = 0.0;
  }
  float v8 = (float)(v5 * -10.0) + 1.0;
  if (v8 <= 1.0) {
    float v9 = v8;
  }
  else {
    float v9 = 1.0;
  }
  if (v8 >= 0.0) {
    return v9;
  }
  return result;
}

float applySceneLuxAdaptationS_C(uint64_t a1, float a2)
{
  float v3 = a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a1 == 2)
  {
    float v4 = spl_apply_with_linear_extension(*(unsigned __int16 *)(a1 + 32), (float *)(a1 + 36), (float *)(a1 + 72), (float *)(a1 + 108), a2);
    float v5 = 1.0;
    if (v4 <= 1.0) {
      float v5 = v4;
    }
    BOOL v6 = v4 < 0.0;
    a2 = 0.0;
    if (!v6) {
      a2 = v5;
    }
  }
  else if (*(_DWORD *)a1 == 1)
  {
    uint64_t v8 = *(void *)(a1 + 20);
    int v9 = *(_DWORD *)(a1 + 28);
    int v10 = 1065353216;
    a2 = ebz_norm(4u, (float *)&v8, a2);
  }
  return (float)((float)(1.0 - *(float *)(a1 + 144)) * v3) + (float)(*(float *)(a1 + 144) * a2);
}

float getReflectionNits(float a1, float a2, float a3)
{
  float v3 = a1 + -5.093;
  float v4 = 15916.0;
  if (v3 <= 15916.0) {
    float v4 = v3;
  }
  BOOL v5 = v3 < 0.0;
  float v6 = 0.0;
  if (!v5) {
    float v6 = v4;
  }
  return (float)(v6 * a2) * a3;
}

void calculateDpcParamS(float *a1, uint64_t a2)
{
  float v4 = *a1;
  if (*(_DWORD *)a1 == 2)
  {
    float v5 = 1.0 / a1[1];
    *(float *)a2 = v5;
    if (v5 > 0.0) {
      goto LABEL_5;
    }
LABEL_7:
    *(_DWORD *)(a2 + 4) = 1065353216;
    *(void *)(a2 + 8) = *((void *)a1 + 1);
    BOOL v6 = (LODWORD(v4) - 1) < 2;
    goto LABEL_8;
  }
  if (LODWORD(v4) != 1)
  {
    *(_DWORD *)a2 = 0;
    goto LABEL_7;
  }
  *(_DWORD *)a2 = 1065353216;
  float v5 = 1.0;
LABEL_5:
  *(float *)(a2 + 4) = 1.0 / powf(1.0 / v5, 0.45455);
  *(void *)(a2 + 8) = *((void *)a1 + 1);
  BOOL v6 = 1;
LABEL_8:
  *(unsigned char *)(a2 + 16) = v6;
}

float PQ_OETF(float a1)
{
  float v1 = pow(fmaxf(fminf(a1, 1.0), 0.0), 0.159301758);
  return pow((v1 * 18.8515625 + 0.8359375) / (v1 * 18.6875 + 1.0), 78.84375);
}

float PQ_EOTF(float a1)
{
  float v1 = pow(fmaxf(fminf(a1, 1.0), 0.0), 0.0126833135);
  return pow(fmax(v1 + -0.8359375, 0.0) / (v1 * -18.6875 + 18.8515625), 6.27739464);
}

float PQ_OETF_nits(float a1)
{
  float v1 = pow(fmaxf(fminf(a1 / 10000.0, 1.0), 0.0), 0.159301758);
  return pow((v1 * 18.8515625 + 0.8359375) / (v1 * 18.6875 + 1.0), 78.84375);
}

float PQ_EOTF_nits(float a1)
{
  float v1 = pow(fmaxf(fminf(a1, 1.0), 0.0), 0.0126833135);
  float v2 = pow(fmax(v1 + -0.8359375, 0.0) / (v1 * -18.6875 + 18.8515625), 6.27739464);
  return v2 * 10000.0;
}

float HLG_OETF(float a1)
{
  double v2 = fabsf(a1);
  if (v2 <= 0.0833333333) {
    double v3 = sqrt(v2 * 3.0);
  }
  else {
    double v3 = log(v2 * 12.0 + -0.28466892) * 0.17883277 + 0.55991073;
  }
  if (a1 < 0.0) {
    return -v3;
  }
  return v3;
}

float HLG_InverseOETF(float a1)
{
  float v2 = fabsf(a1);
  double v3 = v2;
  if (v2 <= 0.5)
  {
    double v4 = v3 * v3;
    double v5 = 3.0;
  }
  else
  {
    double v4 = exp((v3 + -0.55991073) / 0.17883277) + 0.28466892;
    double v5 = 12.0;
  }
  double v6 = v4 / v5;
  if (a1 < 0.0) {
    return -v6;
  }
  return v6;
}

float HLG_SystemGamma(float a1)
{
  float v2 = a1 / 1000.0;
  if (a1 <= 400.0 || a1 >= 2000.0)
  {
    float v4 = log2f(v2);
    return pow(1.111, v4) * 1.2;
  }
  else
  {
    return log10f(v2) * 0.42 + 1.2;
  }
}

float HLG_OOTF_1(float a1, float a2, float a3)
{
  float v6 = a2 / 1000.0;
  if (a2 <= 400.0 || a2 >= 2000.0)
  {
    float v8 = log2f(v6);
    double v7 = pow(1.111, v8) * 1.2;
  }
  else
  {
    double v7 = log10f(v6) * 0.42 + 1.2;
  }
  float v9 = v7;
  return a3 + (float)((float)(a2 - a3) * powf(a1, v9));
}

float HLG_InverseOOTF_1(float a1, float a2, float a3)
{
  float v6 = a2 / 1000.0;
  if (a2 <= 400.0 || a2 >= 2000.0)
  {
    float v8 = log2f(v6);
    double v7 = pow(1.111, v8) * 1.2;
  }
  else
  {
    double v7 = log10f(v6) * 0.42 + 1.2;
  }
  float v9 = v7;
  return powf((float)(a1 - a3) / (float)(a2 - a3), 1.0 / v9);
}

float unhash_f16(__int16 a1)
{
  return ATFMTLhalf2float(8 * (a1 & 0x1FFF)) * 0.00097656;
}

void updateL2PQTable(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2 != 1024)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v4 = logInstanceID;
      }
      else {
        uint64_t v4 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134217984;
        uint64_t v12 = WORD1(v4);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"tableSize == 1024\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/common_display_management_host.mm\" at line 2338\n", (uint8_t *)&v11, 0xCu);
      }
      prevLogInstanceID = v4;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"tableSize == 1024\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/common_display_management_host.mm\" at line 2338\n", (uint8_t *)&v11, 2u);
    }
  }
  for (uint64_t i = 0; i != 801; ++i)
  {
    float v6 = ATFMTLhalf2float(32 * (i & 0x7FF));
    float v7 = pow(fmaxf(fminf(v6 * 0.00097656, 1.0), 0.0), 0.159301758);
    float v8 = pow((v7 * 18.8515625 + 0.8359375) / (v7 * 18.6875 + 1.0), 78.84375);
    *(float *)(a1 + 4 * i) = fmaxf(fminf(v8, 1.0), 0.0);
  }
  if (a2 >= 0x322)
  {
    uint64_t v9 = 801;
    int v10 = 801;
    do
    {
      *(_DWORD *)(a1 + 4 * v9) = *(_DWORD *)(a1 + 4 * v9 - 4);
      uint64_t v9 = (unsigned __int16)++v10;
    }
    while ((unsigned __int16)v10 < a2);
  }
}

void histogram_HLG2PQ(float *a1, int a2, float *a3, float a4)
{
  if (a2 >= 1)
  {
    LODWORD(v6) = a2;
    float v8 = a4 / 1000.0;
    float v9 = log2f(a4 / 1000.0);
    double v10 = pow(1.111, v9);
    float v11 = log10f(v8);
    BOOL v12 = a4 >= 2000.0 || a4 <= 400.0;
    double v13 = v11 * 0.42 + 1.2;
    uint64_t v6 = v6;
    if (v12) {
      double v13 = v10 * 1.2;
    }
    float v14 = v13;
    do
    {
      float v15 = *a1;
      float v16 = fabsf(*a1);
      double v17 = v16;
      if (v16 <= 0.5)
      {
        double v18 = v17 * v17;
        double v19 = 3.0;
      }
      else
      {
        double v18 = exp((v17 + -0.55991073) / 0.17883277) + 0.28466892;
        double v19 = 12.0;
      }
      double v20 = v18 / v19;
      if (v15 < 0.0) {
        double v20 = -v20;
      }
      float v21 = v20;
      float v22 = (float)(a4 * powf(v21, v14)) + 0.0;
      if (v22 >= 0.0)
      {
        float v25 = powf(v22 * 0.0001, 0.1593);
        float v24 = powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v23 = powf(v22 * -0.0001, 0.1593);
        float v24 = 0.0000014619
            - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
      }
      *a3++ = v24;
      ++a1;
      --v6;
    }
    while (v6);
  }
}

uint64_t histogram_generate_percentiles(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a5 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    float v9 = 0.0;
    do
    {
      if (v8 < a3)
      {
        float v10 = *(float *)(a4 + 4 * v6);
        if (v9 < v10)
        {
          uint64_t v11 = a3 - 1 - v8;
          BOOL v12 = (float *)(result + 4 * v8);
          while (1)
          {
            float v9 = v9 + *v12;
            if (!v11) {
              break;
            }
            ++v8;
            --v11;
            ++v12;
            if (v9 >= v10)
            {
              int v7 = v8 - 1;
              goto LABEL_10;
            }
          }
          int v8 = a3;
          int v7 = a3 - 1;
        }
      }
LABEL_10:
      *(_DWORD *)(a6 + 4 * v6++) = *(_DWORD *)(a2 + 4 * v7);
    }
    while (v6 != a5);
  }
  return result;
}

float iirFilter(float a1, float a2, float a3)
{
  return (float)(a2 * a3) + (float)((float)(1.0 - a3) * a1);
}

float firFilter(float *a1, int a2)
{
  if (a2 < 1)
  {
    float v3 = 0.0;
  }
  else
  {
    uint64_t v2 = a2;
    float v3 = 0.0;
    do
    {
      float v4 = *a1++;
      float v3 = v3 + v4;
      --v2;
    }
    while (v2);
  }
  return v3 / (float)a2;
}

float calculateAdaptiveHeadroom(float a1, float a2, float a3)
{
  if (a1 >= 0.0)
  {
    float v8 = powf(a1 * 0.0001, 0.1593);
    float v7 = powf((float)((float)(v8 * 18.852) + 0.83594) / (float)((float)(v8 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v6 = powf(a1 * -0.0001, 0.1593);
    float v7 = 0.0000014619 - powf((float)((float)(v6 * 18.852) + 0.83594) / (float)((float)(v6 * 18.688) + 1.0), 78.844);
  }
  if (a3 >= 0.0)
  {
    float v11 = powf(a3 * 0.0001, 0.1593);
    float v10 = powf((float)((float)(v11 * 18.852) + 0.83594) / (float)((float)(v11 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v9 = powf(a3 * -0.0001, 0.1593);
    float v10 = 0.0000014619 - powf((float)((float)(v9 * 18.852) + 0.83594) / (float)((float)(v9 * 18.688) + 1.0), 78.844);
  }
  if (v10 > 0.0)
  {
    if (a2 >= 0.0)
    {
      float v14 = powf(a2 * 0.0001, 0.1593);
      float v13 = powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v12 = powf(a2 * -0.0001, 0.1593);
      float v13 = 0.0000014619 - powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
    }
    float v15 = (float)(v7 / v10) * v13;
    float v7 = 0.0;
    if (v15 >= 0.0)
    {
      float v7 = 1.0;
      if (v15 <= 1.0) {
        float v7 = v15;
      }
    }
  }
  float v16 = -(float)(v7 + -0.0000014619);
  if (v7 >= 0.00000073096) {
    float v16 = v7;
  }
  float v17 = flt_2222D1868[v7 < 0.00000073096];
  float v18 = powf(v16, 0.012683);
  float v19 = fmax((float)((float)(v18 + -0.83594) / (float)((float)(v18 * -18.688) + 18.852)), 0.0);
  return fmaxf((float)(v17 * powf(v19, 6.2774)) / a1, 1.0);
}

HDRConfig *calculateContentAdaptiveHeadroom(HDRConfig *a1, float a2, float a3, float a4, float a5, float a6)
{
  int v6 = (int)a1;
  uint64_t Config = (HDRConfig *)GetConfig(a1);
  if (Config)
  {
    float v13 = GetConfig(Config);
    uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v13, 0x85u, 0);
    float v14 = *(float *)Config;
  }
  else
  {
    float v14 = 0.0;
  }
  if (v14 <= a3) {
    float v14 = a3;
  }
  float v15 = v14 - a2;
  float v16 = a5 / a6;
  if ((float)(v14 - a2) > 0.0)
  {
    if (v6 == 3)
    {
      if (a6 >= 0.0)
      {
        float v28 = powf(a6 * 0.0001, 0.1593);
        float v23 = powf((float)((float)(v28 * 18.852) + 0.83594) / (float)((float)(v28 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v22 = powf(a6 * -0.0001, 0.1593);
        float v23 = 0.0000014619
            - powf((float)((float)(v22 * 18.852) + 0.83594) / (float)((float)(v22 * 18.688) + 1.0), 78.844);
      }
      float v60 = a4;
      if (a4 >= 0.0)
      {
        float v33 = powf(a4 * 0.0001, 0.1593);
        float v30 = powf((float)((float)(v33 * 18.852) + 0.83594) / (float)((float)(v33 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v29 = powf(a4 * -0.0001, 0.1593);
        float v30 = 0.0000014619
            - powf((float)((float)(v29 * 18.852) + 0.83594) / (float)((float)(v29 * 18.688) + 1.0), 78.844);
      }
      if (v30 <= v23) {
        float v34 = v30;
      }
      else {
        float v34 = v23;
      }
      if (v30 < 0.18821) {
        float v34 = 0.18821;
      }
      float v35 = (float)(0.18821 - v34) / (float)(0.18821 - v23);
      float v36 = (float)(v34 - v23) / (float)(0.18821 - v23);
      float v37 = (float)(v36 * 0.6) + (float)(v35 * 0.4);
      if (v15 <= v37) {
        float v37 = v15;
      }
      if (v15 >= (float)((float)(v36 * 0.3) + (float)(v35 * 0.2))) {
        float v38 = v37;
      }
      else {
        float v38 = (float)(v36 * 0.3) + (float)(v35 * 0.2);
      }
      if (a5 >= 0.0)
      {
        float v47 = powf(a5 * 0.0001, 0.1593);
        float v40 = powf((float)((float)(v47 * 18.852) + 0.83594) / (float)((float)(v47 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v39 = powf(a5 * -0.0001, 0.1593);
        float v40 = 0.0000014619
            - powf((float)((float)(v39 * 18.852) + 0.83594) / (float)((float)(v39 * 18.688) + 1.0), 78.844);
      }
      float v48 = v40 / v23;
      float v49 = (float)((float)((float)(0.4 - v38) + (float)(v38 + -0.2)) / 0.2) * v48;
      float v50 = (float)(0.6 - v38) + (float)((float)(v38 + -0.3) * 1.2185);
    }
    else
    {
      if (v6 != 2)
      {
        float v16 = a5 / a6;
        if (v6 != 1) {
          goto LABEL_64;
        }
        float v17 = *(float *)&histAdjustHeadroomReLUParamB + (float)(*(float *)&histAdjustHeadroomReLUParamA * v15);
        if (v17 <= 1.0) {
          float v18 = *(float *)&histAdjustHeadroomReLUParamB + (float)(*(float *)&histAdjustHeadroomReLUParamA * v15);
        }
        else {
          float v18 = 1.0;
        }
        if (v17 >= *(float *)&histAdjustHeadroomReLUParamC) {
          float v19 = v18;
        }
        else {
          float v19 = *(float *)&histAdjustHeadroomReLUParamC;
        }
        if (a5 >= 0.0)
        {
          float v26 = powf(a5 * 0.0001, 0.1593);
          float v21 = powf((float)((float)(v26 * 18.852) + 0.83594) / (float)((float)(v26 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v20 = powf(a5 * -0.0001, 0.1593);
          float v21 = 0.0000014619
              - powf((float)((float)(v20 * 18.852) + 0.83594) / (float)((float)(v20 * 18.688) + 1.0), 78.844);
        }
        float v27 = v19 * v21;
        goto LABEL_61;
      }
      if (a6 >= 0.0)
      {
        float v31 = powf(a6 * 0.0001, 0.1593);
        float v25 = powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v24 = powf(a6 * -0.0001, 0.1593);
        float v25 = 0.0000014619
            - powf((float)((float)(v24 * 18.852) + 0.83594) / (float)((float)(v24 * 18.688) + 1.0), 78.844);
      }
      float v60 = a4;
      if (a4 >= 0.0)
      {
        float v41 = powf(a4 * 0.0001, 0.1593);
        float v30 = powf((float)((float)(v41 * 18.852) + 0.83594) / (float)((float)(v41 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v32 = powf(a4 * -0.0001, 0.1593);
        float v30 = 0.0000014619
            - powf((float)((float)(v32 * 18.852) + 0.83594) / (float)((float)(v32 * 18.688) + 1.0), 78.844);
      }
      if (v30 <= v25) {
        float v42 = v30;
      }
      else {
        float v42 = v25;
      }
      if (v30 < 0.18821) {
        float v42 = 0.18821;
      }
      float v35 = (float)(0.18821 - v42) / (float)(0.18821 - v25);
      float v36 = (float)(v42 - v25) / (float)(0.18821 - v25);
      float v43 = (float)(v36 * 0.5) + (float)(v35 * 0.4);
      if (v15 <= v43) {
        float v43 = v15;
      }
      if (v15 >= (float)((float)(v36 * 0.2) + (float)(v35 * 0.2))) {
        float v44 = v43;
      }
      else {
        float v44 = (float)(v36 * 0.2) + (float)(v35 * 0.2);
      }
      if (a5 >= 0.0)
      {
        float v51 = powf(a5 * 0.0001, 0.1593);
        float v46 = powf((float)((float)(v51 * 18.852) + 0.83594) / (float)((float)(v51 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v45 = powf(a5 * -0.0001, 0.1593);
        float v46 = 0.0000014619
            - powf((float)((float)(v45 * 18.852) + 0.83594) / (float)((float)(v45 * 18.688) + 1.0), 78.844);
      }
      float v48 = v46 / v25;
      float v49 = (float)((float)((float)(v44 + -0.2) + (float)((float)(0.4 - v44) * 0.9)) / 0.2) * v48;
      float v50 = (float)((float)(v44 + -0.2) * 1.2389) + (float)((float)(0.5 - v44) * 0.9161);
    }
    float v27 = v30 * (float)((float)(v36 * (float)((float)(v50 / 0.3) * v48)) + (float)(v35 * v49));
    a6 = v60;
LABEL_61:
    BOOL v52 = v27 < 0.00000073096;
    if (v27 < 0.00000073096) {
      float v27 = -(float)(v27 + -0.0000014619);
    }
    float v53 = flt_2222D1868[v52];
    float v54 = powf(v27, 0.012683);
    float v55 = fmax((float)((float)(v54 + -0.83594) / (float)((float)(v54 * -18.688) + 18.852)), 0.0);
    float v16 = (float)(v53 * powf(v55, 6.2774)) / a6;
  }
LABEL_64:
  float result = (HDRConfig *)GetConfig(Config);
  if (result)
  {
    float v57 = GetConfig(result);
    float result = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v57, 0x72u, 0);
    float v58 = *(float *)result;
  }
  else
  {
    float v58 = 0.0;
  }
  if (v16 < v58)
  {
    float result = (HDRConfig *)GetConfig(result);
    if (result)
    {
      float v59 = GetConfig(result);
      return (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v59, 0x72u, 0);
    }
  }
  return result;
}

float adjustDovi84DM4Stats(HDRConfig *a1, float *a2, float *a3, float *a4, float a5, float a6)
{
  uint64_t Config = (HDRConfig *)GetConfig(a1);
  if (Config
    && (float v12 = GetConfig(Config),
        uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v12, 0x83u, 0),
        *(_DWORD *)Config == 1))
  {
    float v13 = fminf(a2[15] / *(float *)&DM4MidConvergeStartNits, 1.0);
  }
  else
  {
    float v14 = GetConfig(Config);
    float v13 = 1.0;
    if (!v14
      || (float v15 = GetConfig((HDRConfig *)v14),
          uint64_t ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v15, 0x83u, 0),
          *(_DWORD *)ConfigEntryValue != 2))
    {
      float v19 = 1.0;
      goto LABEL_10;
    }
    float v17 = GetConfig(ConfigEntryValue);
    if (v17)
    {
      float v18 = GetConfig((HDRConfig *)v17);
      float v19 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v18, 0x84u, 0);
      goto LABEL_10;
    }
  }
  float v19 = 0.0;
LABEL_10:
  float v20 = a2[24];
  if (v20 >= 0.0)
  {
    float v23 = powf(v20 * 0.0001, 0.1593);
    float v22 = powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v21 = powf(v20 * -0.0001, 0.1593);
    float v22 = 0.0000014619 - powf((float)((float)(v21 * 18.852) + 0.83594) / (float)((float)(v21 * 18.688) + 1.0), 78.844);
  }
  *a3 = (float)((float)(1.0 - v13) * v22) + (float)(v13 * a5);
  float v24 = a2[11];
  if (v24 >= 0.0)
  {
    float v27 = powf(v24 * 0.0001, 0.1593);
    float v26 = powf((float)((float)(v27 * 18.852) + 0.83594) / (float)((float)(v27 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v25 = powf(v24 * -0.0001, 0.1593);
    float v26 = 0.0000014619 - powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
  }
  if (v19 <= 1.0) {
    float v28 = v19;
  }
  else {
    float v28 = 1.0;
  }
  if (v19 < 0.0) {
    float v28 = 0.0;
  }
  float result = (float)((float)(1.0 - v28) * v26) + (float)(v28 * a6);
  *a4 = result;
  return result;
}

float computeHdr10TmLumaMixYMinRatio(uint64_t a1)
{
  float v1 = (float)((float)((float)(*(float *)(a1 + 76) + -0.41928) * 0.3) / 0.1072) + 0.1;
  float v2 = 0.4;
  if (v1 <= 0.4) {
    float v2 = (float)((float)((float)(*(float *)(a1 + 76) + -0.41928) * 0.3) / 0.1072) + 0.1;
  }
  if (v1 >= 0.1) {
    return v2;
  }
  else {
    return 0.1;
  }
}

void sub_2222A5E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222A5FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)HistBasedToneMapping;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2222A6CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double L2PqNormMR81(double a1)
{
  double v1 = a1 / 10000.0;
  BOOL v2 = a1 < 0.0;
  double v3 = 0.0;
  if (!v2) {
    double v3 = v1;
  }
  long double v4 = pow(v3, 0.159301758);
  double v5 = (v4 * 18.8515625 + 0.8359375) / (v4 * 18.6875 + 1.0);
  return pow(v5, 78.84375);
}

double CubicEaseMR81(double a1, double a2, double a3, double a4, double a5)
{
  if (a1 > a3) {
    double v5 = a3;
  }
  else {
    double v5 = a1;
  }
  if (a1 >= a2) {
    double v6 = v5;
  }
  else {
    double v6 = a2;
  }
  double v7 = (v6 - a2) / (a3 - a2);
  if (v7 <= 0.5) {
    double v8 = v7 * (v7 * (v7 * 4.0));
  }
  else {
    double v8 = (v7 + -1.0) * ((v7 + -1.0) * 4.0) * (v7 + -1.0) + 1.0;
  }
  return a4 + v8 * (a5 - a4);
}

long long *GetPrimariesPtrMR81(unsigned int a1)
{
  if (a1 <= 0x12) {
    return &V8PrimaryTblMR81[4 * (unint64_t)a1];
  }
  else {
    return 0;
  }
}

double GetRgb2XyzM33ByPrimsMR81(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9 = (a2 - a6) * (a5 - a7) - (a3 - a7) * (a4 - a6);
  double v10 = 0.0;
  double v11 = 0.0;
  if (v9 != 0.0)
  {
    double v12 = a8 - a6;
    double v10 = (v12 * (a5 - a7) - (a9 - a7) * (a4 - a6)) / v9;
    double v11 = (v12 * -(a3 - a7) + (a2 - a6) * (a9 - a7)) / v9;
  }
  double v13 = v10 / a9;
  BOOL v14 = a9 == 0.0;
  if (a9 == 0.0) {
    double v13 = 0.0;
  }
  double v15 = v11 / a9;
  if (a9 == 0.0) {
    double v15 = 0.0;
  }
  double v16 = (1.0 - v10 - v11) / a9;
  if (v14) {
    double v16 = 0.0;
  }
  *a1 = v13 * a2;
  a1[1] = v15 * a4;
  a1[2] = v16 * a6;
  a1[3] = v13 * a3;
  a1[4] = v15 * a5;
  a1[5] = v16 * a7;
  a1[6] = (1.0 - a2 - a3) * v13;
  a1[7] = (1.0 - a4 - a5) * v15;
  double result = (1.0 - a6 - a7) * v16;
  a1[8] = result;
  return result;
}

double hdrpMrToneCurve(int a1, double *a2, int a3, int a4, double *a5, double *a6, int a7, uint64_t a8)
{
  unsigned int v14 = *(_DWORD *)(a8 + 96 * a4 + 1024);
  if (*(int *)(a8 + 9168) >= 4)
  {
    if ((v14 & 0x10) == 0)
    {
      int v15 = (v14 >> 3) & 1;
      goto LABEL_10;
    }
LABEL_6:
    Dm4Tc(a1, a2, a3, a4, a6, (uint64_t)a5, a8);
    if (!a7) {
      return result;
    }
    goto LABEL_11;
  }
  if ((v14 & 4) != 0)
  {
    int v15 = 0;
  }
  else
  {
    if ((v14 & 8) == 0) {
      goto LABEL_6;
    }
    int v15 = 1;
  }
LABEL_10:
  Dm23Tc(a1, v15, a2, a3, a4, a6, (uint64_t)a5, a8);
  if (!a7) {
    return result;
  }
LABEL_11:
  if (a6) {
    int v17 = a3 + 3;
  }
  else {
    int v17 = a3;
  }
  if (v17)
  {
    double result = *a5;
    uint64_t v18 = v17 - 1;
    float v19 = (double *)(a8 + 16 * v17 + 8000);
    do
    {
      double v20 = *(v19 - 1);
      if (result >= v20)
      {
        double v20 = *v19;
        if (result <= *v19) {
          double v20 = result;
        }
      }
      *a5 = v20;
      int v21 = v18--;
      v19 -= 2;
      double result = v20;
    }
    while (v21);
  }
  return result;
}

void Dm4Tc(int a1, double *a2, int a3, int a4, double *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v201 = *MEMORY[0x263EF8340];
  uint64_t v188 = a7 + 8136;
  double v13 = (int *)(a7 + 1136);
  if (a1) {
    uint64_t v14 = 4192;
  }
  else {
    uint64_t v14 = 1136;
  }
  uint64_t v15 = a7 + 7936;
  *(_DWORD *)(a7 + 7936 + 4 * a4 + 1216) = 4;
  if (a1) {
    double v16 = (int *)(a7 + 4192);
  }
  else {
    double v16 = (int *)(a7 + 1136);
  }
  uint64_t v17 = a4;
  if (a1) {
    goto LABEL_100;
  }
  int v18 = *v13;
  float v187 = v16;
  if ((*v13 & 1) == 0)
  {
    uint64_t v184 = v14;
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v19 = logInstanceID;
      }
      else {
        uint64_t v19 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v200 = WORD1(v19);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: PrepareL8 MDSEXT_HAVE_LVL_L0 is false", buf, 0xCu);
      }
      prevLogInstanceID = v19;
      uint64_t v7 = a7;
    }
    else
    {
      BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t v14 = v184;
      if (!v20)
      {
LABEL_19:
        int v18 = *v13;
        goto LABEL_20;
      }
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: PrepareL8 MDSEXT_HAVE_LVL_L0 is false", buf, 2u);
    }
    uint64_t v14 = v184;
    goto LABEL_19;
  }
LABEL_20:
  if ((v18 & 0x100) == 0 || *(_DWORD *)(v7 + 8360)) {
    goto LABEL_87;
  }
  float v178 = a5;
  int v180 = a3;
  uint64_t v21 = v7 + 8376;
  uint64_t v193 = v7 + 8472;
  uint64_t v22 = *(unsigned int *)(v7 + 2040);
  uint64_t v185 = v14;
  if ((int)v22 >= 1)
  {
    uint64_t v23 = 0;
    long long v190 = (long long *)(v16 + 618);
    while (1)
    {
      unsigned int v24 = (int)*(double *)&v16[42 * v23 + 228];
      if (v24 <= 0x31)
      {
        uint64_t v25 = DisplayIdxTblDoViMR81[v24];
        if (v25) {
          break;
        }
      }
      uint64_t v29 = *(unsigned int *)(v7 + 3568);
      if ((int)v29 >= 1)
      {
        uint64_t v30 = 0;
        float v31 = v190;
        while (*((unsigned __int8 *)v31 - 32) != v24)
        {
          ++v30;
          v31 += 6;
          if (v29 == v30) {
            goto LABEL_43;
          }
        }
        if ((v30 & 0x80000000) == 0)
        {
          double v26 = *((double *)v31 - 3);
          *(double *)(v21 + 16 * v23 + 8) = v26;
          unint64_t v32 = *((unsigned __int8 *)v31 - 8);
          BOOL v33 = v32 > 0x12;
          float v28 = &V8PrimaryTblMR81[4 * v32];
          if (v33) {
            float v28 = v31;
          }
          goto LABEL_37;
        }
      }
LABEL_43:
      float v38 = (void *)(v21 + 16 * v23);
      *float v38 = 0;
      v38[1] = 0;
LABEL_44:
      if (++v23 == v22) {
        goto LABEL_45;
      }
    }
    double v26 = *(double *)(v25 + 24);
    *(double *)(v21 + 16 * v23 + 8) = v26;
    uint64_t v27 = *(unsigned int *)(v25 + 32);
    if (v27 <= 0x12) {
      float v28 = &V8PrimaryTblMR81[4 * v27];
    }
    else {
      float v28 = 0;
    }
LABEL_37:
    *(void *)(v193 + 8 * v23) = v28;
    double v34 = fmin(v26, 1.99205017);
    if (v26 >= 0.0) {
      double v35 = v34;
    }
    else {
      double v35 = 0.0;
    }
    long double v36 = pow(v35, 0.0126833135);
    double v37 = (v36 + -0.8359375) / (v36 * -18.6875 + 18.8515625);
    if (v37 < 0.0) {
      double v37 = 0.0;
    }
    *(long double *)(v21 + 16 * v23) = pow(v37, 6.27739464) * 10000.0;
    double v16 = v187;
    goto LABEL_44;
  }
LABEL_45:
  uint64_t v39 = v7 + 7936;
  uint64_t v40 = v7 + 7936 + 16 * (int)v22;
  *(void *)(v40 + 448) = *((void *)v16 + 28);
  double v41 = *((double *)v16 + 28);
  double v42 = fmin(v41, 1.99205017);
  if (v41 >= 0.0) {
    double v43 = v42;
  }
  else {
    double v43 = 0.0;
  }
  long double v44 = pow(v43, 0.0126833135);
  double v45 = (v44 + -0.8359375) / (v44 * -18.6875 + 18.8515625);
  if (v45 < 0.0) {
    double v45 = 0.0;
  }
  *(long double *)(v40 + 440) = pow(v45, 6.27739464) * 10000.0;
  uint64_t v7 = a7;
  *(void *)(v39 + 8 * (int)v22 + 536) = a7 + 7944;
  float v46 = (double *)(a7 + 8576);
  float v47 = (int32x2_t *)(a7 + 8528);
  if (!v22)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v49 = logInstanceID;
      }
      else {
        uint64_t v49 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v200 = WORD1(v49);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: BuildLumaXInfo trimNum=0", buf, 0xCu);
      }
      prevLogInstanceID = v49;
      uint64_t v7 = a7;
    }
    else
    {
      BOOL v50 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      float v47 = (int32x2_t *)(a7 + 8528);
      if (!v50)
      {
LABEL_63:
        *(_DWORD *)(v7 + 8520) = 0;
LABEL_64:
        int v48 = 0;
        uint64_t v51 = 0;
        do
        {
          double v52 = *(double *)(v21 + 16 * v51 + 8);
          v46[v48] = v52;
          if (v52 > 0.0)
          {
            double v53 = v52 * 1024.0;
            unsigned int v54 = (v53 + 1.0);
            unsigned int v55 = (v53 + 0.5);
            if (v48 < 1)
            {
LABEL_71:
              *((_DWORD *)v198 + v48) = v54;
              *(_DWORD *)&buf[4 * v48] = v55;
              v47->i32[v48] = v51;
              int v48 = *(_DWORD *)(v7 + 8520) + 1;
              *(_DWORD *)(v7 + 8520) = v48;
            }
            else
            {
              uint64_t v56 = v48;
              float v57 = v198;
              float v58 = buf;
              while (1)
              {
                int v59 = *(_DWORD *)v58;
                v58 += 4;
                if (v59 == v55 || *(_DWORD *)v57 == v54) {
                  break;
                }
                float v57 = (double *)((char *)v57 + 4);
                if (!--v56) {
                  goto LABEL_71;
                }
              }
            }
          }
          ++v51;
        }
        while (v51 != v22 + 1);
        goto LABEL_73;
      }
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: BuildLumaXInfo trimNum=0", buf, 2u);
    }
    float v47 = (int32x2_t *)(a7 + 8528);
    goto LABEL_63;
  }
  *(_DWORD *)(a7 + 8520) = 0;
  if ((v22 & 0x80000000) == 0) {
    goto LABEL_64;
  }
  int v48 = 0;
LABEL_73:
  uint64_t v60 = v17;
  *(_DWORD *)(v7 + 8520) = v48 - 1;
  SortAscend_0(v46, v47, v48 - 1);
  uint64_t v61 = *(unsigned int *)(v7 + 2040);
  long long v191 = (double *)(v7 + 8624);
  uint64_t v182 = (int32x2_t *)(v7 + 8552);
  *(_DWORD *)(v7 + 8524) = 0;
  if ((v61 & 0x80000000) != 0)
  {
    int v63 = 0;
  }
  else
  {
    int v62 = 0;
    int v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = v61 + 1;
    do
    {
      double v66 = *(double *)(v21 + 16 * v64 + 8);
      if (v66 > 0.0)
      {
        double ChromaDist = FindChromaDist(*(double **)(v193 + 8 * v64), *(double *)(v21 + 16 * v64), v66);
        v191[v62] = ChromaDist;
        double v68 = ChromaDist * 1024.0;
        unsigned int v69 = (v68 + 1.0);
        unsigned int v70 = (v68 + 0.5);
        if (v62 < 1)
        {
LABEL_81:
          *((_DWORD *)v198 + v62) = v69;
          *(_DWORD *)&buf[4 * v62] = v70;
          v182->i32[v62] = v64;
          int v62 = *(_DWORD *)(v7 + 8524) + 1;
          *(_DWORD *)(v7 + 8524) = v62;
        }
        else
        {
          uint64_t v71 = v62;
          float v72 = v198;
          float v73 = buf;
          while (1)
          {
            int v74 = *(_DWORD *)v73;
            v73 += 4;
            if (v74 == v70 || *(_DWORD *)v72 == v69) {
              break;
            }
            float v72 = (double *)((char *)v72 + 4);
            if (!--v71) {
              goto LABEL_81;
            }
          }
        }
        int v63 = v62;
      }
      ++v64;
    }
    while (v64 != v65);
  }
  *(_DWORD *)(v7 + 8524) = v63 - 1;
  SortAscend_0(v191, v182, v63 - 1);
  *(_DWORD *)(v7 + 8360) = 1;
  a3 = v180;
  a5 = v178;
  uint64_t v17 = v60;
  uint64_t v14 = v185;
  double v16 = v187;
LABEL_87:
  uint64_t v197 = 0;
  v198[0] = 0.0;
  uint64_t v196 = 0;
  int v75 = *(_DWORD *)(v7 + v14);
  if ((v75 & 1) == 0)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v76 = logInstanceID;
      }
      else {
        uint64_t v76 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v200 = WORD1(v76);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: InterpL8 MDSEXT_HAVE_LVL_L0 is false", buf, 0xCu);
      }
      prevLogInstanceID = v76;
      uint64_t v7 = a7;
      double v16 = v187;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: InterpL8 MDSEXT_HAVE_LVL_L0 is false", buf, 2u);
    }
    int v75 = *v16;
  }
  uint64_t v77 = v7 + 4 * v17;
  float v78 = (_DWORD *)(v77 + 8804);
  if ((v75 & 0x100) == 0)
  {
    *float v78 = 1;
LABEL_100:
    *(_DWORD *)(v7 + 8800) = 1;
LABEL_101:
    uint64_t v79 = *(void *)(v7 + 8368);
    goto LABEL_102;
  }
  uint64_t v177 = v17;
  float v179 = a5;
  int v181 = a3;
  uint64_t v183 = a6;
  uint64_t v186 = v15;
  uint64_t v134 = 0;
  float v135 = v16 + 224;
  uint64_t v79 = v7 + 168 * (int)v17 + 8816;
  uint64_t v136 = v7 + 96 * (int)v17;
  int v176 = (int *)(v77 + 8804);
  *float v78 = 0;
  long long v192 = (double *)(v136 + 944);
  float v195 = (double *)(v136 + 960);
  uint64_t v137 = v7;
  float v138 = (double *)(v7 + 16 * v17 + 8016);
  char v139 = 1;
  uint64_t v140 = v137 + 7936;
  do
  {
    char v141 = v139;
    if (v139)
    {
      double v142 = *v138;
      float v143 = &L8LumaTt;
      uint64_t v144 = 6;
    }
    else
    {
      double v142 = FindChromaDist(v195, *v192, *v138);
      float v143 = &L8ChromaTt;
      uint64_t v144 = 14;
    }
    BuildInterpInfo(v135, (double *)(v140 + 48 * v134 + 640), v140 + 24 * v134 + 592, *(_DWORD *)(v140 + 4 * v134 + 584), v198, &v197, &v196, v142);
    uint64_t v145 = v196;
    uint64_t v146 = v197;
    double v147 = v198[0];
    do
    {
      uint64_t v148 = *v143++;
      *(double *)(v79 + 8 * v148) = *(double *)(v146 + 8 * v148)
                                  + (*(double *)(v145 + 8 * v148) - *(double *)(v146 + 8 * v148)) * v147;
      --v144;
    }
    while (v144);
    char v139 = 0;
    uint64_t v134 = 1;
  }
  while ((v141 & 1) != 0);
  *(void *)uint64_t v79 = 0;
  double v149 = *(double *)(v79 + 16) + *(double *)(v79 + 16);
  *(double *)(v79 + 8) = *(double *)(v79 + 8) * 2.0 + -1.0;
  *(double *)(v79 + 16) = v149;
  *(double *)(v79 + 24) = *(double *)(v79 + 24) * 2.0 + -1.0;
  uint64_t v17 = v177;
  int v150 = *v176;
  uint64_t v7 = a7;
  *(_DWORD *)(a7 + 8800) = *v176;
  a6 = v183;
  uint64_t v15 = v186;
  a3 = v181;
  a5 = v179;
  double v16 = v187;
  if (v150) {
    goto LABEL_101;
  }
LABEL_102:
  double v80 = *((double *)v16 + 41);
  double v81 = *((double *)v16 + 43);
  double v82 = *((double *)v16 + 42) + *(double *)(v79 + 64);
  if ((*(unsigned char *)v16 & 8) != 0)
  {
    double v80 = v80 + *((double *)v16 + 44);
    double v82 = v82 + *((double *)v16 + 45);
    double v81 = v81 + *((double *)v16 + 46);
  }
  double v83 = fmin(v81, 0.9997558);
  if (v81 >= 0.000244200244) {
    double v84 = v83;
  }
  else {
    double v84 = 0.000244200244;
  }
  double v85 = v84 + -0.000244200244;
  if (v80 <= v84 + -0.000244200244) {
    double v85 = v80;
  }
  if (v80 >= 0.0) {
    double v86 = v85;
  }
  else {
    double v86 = 0.0;
  }
  double v87 = fmin(v82, 1.0);
  if (v82 >= v84 + 0.000244200244) {
    double v88 = v87;
  }
  else {
    double v88 = v84 + 0.000244200244;
  }
  uint64_t v89 = v7 + 16 * v17;
  double v90 = *(double *)(v89 + 8008);
  double v91 = *(double *)(v89 + 8016);
  double v92 = v90 + 0.1;
  double v93 = v91 - v90 + v91 - v90;
  if (v86 > v90) {
    double v94 = *(double *)(v89 + 8008);
  }
  else {
    double v94 = v86;
  }
  if (v88 < v91) {
    double v95 = *(double *)(v89 + 8016);
  }
  else {
    double v95 = v88;
  }
  double v96 = v90 + 0.02;
  if (v90 + 0.02 > v92) {
    double v96 = v90 + 0.1;
  }
  double v97 = v91 + -0.1;
  if (v91 + -0.1 < v92) {
    double v97 = v90 + 0.1;
  }
  double v98 = v92 - v94;
  double v99 = (v92 - v96) / (v92 - v94);
  double v100 = v97 - v92;
  double v101 = v95 - v92;
  double v102 = v100 / v101;
  double v103 = fmin(v99 * 3.0, 1.0);
  double v104 = fmin(v100 / v101 * 3.0, 1.0);
  if (v93 > v103) {
    double v93 = v103;
  }
  if (v93 > v104) {
    double v93 = v104;
  }
  double v105 = v99 * v99;
  if (v105 > v103) {
    double v105 = v103;
  }
  double v106 = (v84 - v94) / v98;
  double v107 = v96
       + (v106 * (v106 * v106) * -2.0 + v106 * v106 * 3.0) * (v92 - v96)
       + ((v106 * (v106 * v106) - v106 * v106) * v93 + (v106 + v106 * (v106 * v106) + v106 * v106 * -2.0) * v105) * v98;
  double v108 = v102 * v102;
  if (v102 * v102 > v104) {
    double v108 = v104;
  }
  double v109 = (v84 - v92) / v101;
  double v110 = v92
       + (v109 * (v109 * v109) * -2.0 + v109 * v109 * 3.0) * v100
       + ((v109 * (v109 * v109) - v109 * v109) * v108 + (v109 + v109 * (v109 * v109) + v109 * v109 * -2.0) * v93) * v101;
  if (v92 < v84) {
    double v111 = v110;
  }
  else {
    double v111 = v107;
  }
  double v112 = v88 - v84;
  if (v91 - v111 <= v88 - v84) {
    double v113 = v111;
  }
  else {
    double v113 = v91 - (v88 - v84);
  }
  double v114 = v84 - v86;
  if (v111 - v90 > v84 - v86) {
    double v111 = v90 + v84 - v86;
  }
  if (v113 >= v84) {
    double v113 = v84;
  }
  if (v111 <= v84) {
    double v111 = v84;
  }
  double v115 = v113 + v111 - v84;
  double v116 = v91 + -0.000244200244;
  if (v115 <= v91 + -0.000244200244) {
    double v116 = v115;
  }
  if (v115 >= v90 + 0.000244200244) {
    double v117 = v116;
  }
  else {
    double v117 = v90 + 0.000244200244;
  }
  if (v117 - v114 < v90) {
    double v118 = *(double *)(v89 + 8008);
  }
  else {
    double v118 = v117 - v114;
  }
  if (v112 + v117 > v91) {
    double v119 = *(double *)(v89 + 8016);
  }
  else {
    double v119 = v112 + v117;
  }
  *(double *)(v7 + 8136) = v86;
  *(double *)(v7 + 8144) = v84;
  *(double *)(v7 + 8152) = v88;
  *(double *)(v7 + 8160) = v118;
  *(double *)(v7 + 8168) = v117;
  *(double *)(v7 + 8176) = v119;
  CalSlopes(0, (double *)v188, *(double *)(v79 + 56));
  float64x2_t v120 = *(float64x2_t *)(v188 + 48);
  double v121 = *(double *)(v188 + 56);
  *(double *)(v7 + 8208) = 1.0 / v114 * (-2.0 * v120.f64[0] + (v118 - v117) * -3.0 * (1.0 / v114) - v121);
  *(double *)(v7 + 8216) = 1.0 / v114 * (1.0 / v114) * (v121 + v120.f64[0] + (v118 - v117 + v118 - v117) * (1.0 / v114));
  double v122 = *(double *)(v7 + 8200);
  *(double *)(v7 + 8224) = 1.0 / v112 * (vmuld_lane_f64(-2.0, v120, 1) + (v117 - v119) * -3.0 * (1.0 / v112) - v122);
  *(double *)(v7 + 8232) = 1.0 / v112 * (1.0 / v112) * (v122 + v121 + (v117 - v119 + v117 - v119) * (1.0 / v112));
  *(double *)(v7 + 8040) = v86;
  *(double *)(v7 + 8056) = v84;
  *(double *)(v7 + 8048) = v88;
  *(double *)(v7 + 8064) = v118;
  *(double *)(v7 + 8072) = v117;
  *(double *)(v7 + 8080) = v119;
  if (a5)
  {
    float64x2_t v194 = v120;
    float v123 = (double *)(v89 + 8008);
    TmDm4(a4, 0, v15, 0.0);
    double v125 = v124;
    double v126 = 1.0;
    TmDm4(a4, 0, v15, 1.0);
    if (*(double *)(v89 + 8016) <= v127) {
      double v127 = *(double *)(v89 + 8016);
    }
    if (*(double *)(v89 + 8016) >= v125) {
      double v128 = v127;
    }
    else {
      double v128 = v125;
    }
    if (*v123 > v128) {
      double v129 = v128;
    }
    else {
      double v129 = *v123;
    }
    if (*v123 >= v125) {
      double v125 = v129;
    }
    double v130 = v128 - v125;
    if (v128 - v125 == 0.0)
    {
      *a5 = 0.0;
      a5[1] = *(double *)(a7 + 8144);
    }
    else
    {
      if (v130 > 0.9) {
        double v132 = 1.0;
      }
      else {
        double v132 = v130 / 0.9;
      }
      if (v130 < 0.0) {
        double v132 = 0.0;
      }
      if (v132 <= 0.5) {
        double v133 = v132 * (v132 * (v132 * 4.0));
      }
      else {
        double v133 = (v132 + -1.0) * ((v132 + -1.0) * 4.0) * (v132 + -1.0) + 1.0;
      }
      double v151 = v125 + (v133 * -0.2 + 0.55) * v130;
      *(_OWORD *)(a7 + 8240) = *(_OWORD *)(a7 + 8160);
      *(void *)(a7 + 8256) = *(void *)(a7 + 8176);
      *(_OWORD *)(v188 + 128) = *(_OWORD *)v188;
      *(void *)(a7 + 8280) = *(void *)(a7 + 8152);
      __asm { FMOV            V1.2D, #1.0 }
      *(int8x16_t *)(a7 + 8288) = vbslq_s8((int8x16_t)vcgtq_f64(v194, (float64x2_t)vdupq_n_s64(0x3F30000000000000uLL)), (int8x16_t)vdivq_f64(_Q1, v194), (int8x16_t)vdupq_n_s64(0x40B0000000000000uLL));
      double v157 = 1.0 / v122;
      if (v122 <= 0.000244140625) {
        double v157 = 4096.0;
      }
      *(double *)(a7 + 8304) = v157;
      CalSlopes(1, (double *)(a7 + 8240), 0.0);
      double v158 = *(double *)(a7 + 8248);
      double v159 = *(double *)(a7 + 8272);
      double v160 = *(double *)(a7 + 8288);
      double v161 = *(double *)(a7 + 8296);
      double v162 = 1.0 / (v158 - *(double *)(a7 + 8240));
      double v163 = *(double *)(a7 + 8264) - v159;
      *(double *)(a7 + 8312) = v162 * (v160 * -2.0 + v163 * -3.0 * v162 - v161);
      *(double *)(a7 + 8320) = v162 * v162 * (v161 + v160 + (v163 + v163) * v162);
      double v164 = *(double *)(a7 + 8304);
      double v165 = 1.0 / (*(double *)(a7 + 8256) - v158);
      double v166 = v159 - *(double *)(a7 + 8280);
      *(double *)(a7 + 8328) = v165 * (v161 * -2.0 + v166 * -3.0 * v165 - v164);
      *(double *)(a7 + 8336) = v165 * v165 * (v164 + v161 + (v166 + v166) * v165);
      TmDm4(a4, 1u, v15, v125);
      *(void *)a5 = v167;
      TmDm4(a4, 1u, v15, v151);
      *((void *)a5 + 1) = v168;
      TmDm4(a4, 1u, v15, v128);
      double v126 = v169;
    }
    uint64_t v170 = 0;
    a5[2] = v126;
    uint64_t v131 = 3;
    do
    {
      TmDm4(a4, 0, v15, a5[v170]);
      *(void *)(a6 + v170 * 8) = v171;
      ++v170;
    }
    while (v170 != 3);
  }
  else
  {
    uint64_t v131 = 0;
  }
  if (a3 >= 1)
  {
    uint64_t v172 = a3;
    float v173 = (void *)(a6 + 8 * v131);
    do
    {
      double v174 = *a2++;
      TmDm4(a4, 0, v15, v174);
      *v173++ = v175;
      --v172;
    }
    while (v172);
  }
}

void Dm23Tc(int a1, int a2, double *a3, int a4, int a5, double *a6, uint64_t a7, uint64_t a8)
{
  int v12 = a4;
  uint64_t v107 = *MEMORY[0x263EF8340];
  uint64_t v14 = (int *)(a8 + 1136);
  if (a1) {
    uint64_t v15 = 4192;
  }
  else {
    uint64_t v15 = 1136;
  }
  if (a1) {
    double v16 = (double *)(a8 + 4192);
  }
  else {
    double v16 = (double *)(a8 + 1136);
  }
  uint64_t v17 = a5;
  if (a1)
  {
    int v18 = 1;
  }
  else
  {
    int v19 = *v14;
    int v103 = a2;
    if ((*v14 & 1) == 0)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v20 = logInstanceID;
        }
        else {
          uint64_t v20 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = WORD1(v20);
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: PrepareL2 MDSEXT_HAVE_LVL_L0 is false", buf, 0xCu);
        }
        prevLogInstanceID = v20;
        int v12 = a4;
        a2 = v103;
      }
      else
      {
        BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        a2 = v103;
        if (v21)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: PrepareL2 MDSEXT_HAVE_LVL_L0 is false", buf, 2u);
          a2 = v103;
        }
      }
      int v19 = *v14;
    }
    if ((v19 & 4) != 0 && !*(_DWORD *)(a8 + 8672))
    {
      *(_DWORD *)(a8 + 8688) = 0;
      int v22 = *(_DWORD *)(a8 + 1520);
      if (v22 < 0)
      {
        int v23 = 0;
      }
      else
      {
        int v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = a8 + 7936;
        do
        {
          double v26 = v16[7 * v24 + 49];
          if (v23 < 1)
          {
LABEL_28:
            *(double *)(v25 + 8 * v23 + 792) = v26;
            *(_DWORD *)(v25 + 4 * v23 + 756) = v24;
            int v23 = *(_DWORD *)(a8 + 8688) + 1;
            *(_DWORD *)(a8 + 8688) = v23;
            int v22 = *(_DWORD *)(a8 + 1520);
          }
          else
          {
            uint64_t v27 = v23;
            float v28 = (double *)(a8 + 8728);
            while (*v28 != v26)
            {
              ++v28;
              if (!--v27) {
                goto LABEL_28;
              }
            }
          }
        }
        while (v24++ < v22);
      }
      *(_DWORD *)(a8 + 8688) = v23 - 1;
      SortAscend_0((double *)(a8 + 8728), (int32x2_t *)(a8 + 8692), v23 - 1);
      *(_DWORD *)(a8 + 8672) = 1;
      a2 = v103;
    }
    int v30 = *(_DWORD *)(a8 + v15);
    if ((v30 & 1) == 0)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v31 = logInstanceID;
        }
        else {
          uint64_t v31 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = WORD1(v31);
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: InterpL2 MDSEXT_HAVE_LVL_L0 is false", buf, 0xCu);
        }
        prevLogInstanceID = v31;
        a2 = v103;
      }
      else
      {
        BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        a2 = v103;
        if (v32)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: InterpL2 MDSEXT_HAVE_LVL_L0 is false", buf, 2u);
          a2 = v103;
        }
      }
      int v30 = *(_DWORD *)v16;
    }
    if ((v30 & 4) != 0)
    {
      uint64_t v105 = 0;
      *(void *)buf = 0;
      uint64_t v104 = 0;
      BOOL v33 = (int *)(a8 + 7936 + 4 * v17 + 868);
      *BOOL v33 = 0;
      BuildInterpInfo((_DWORD *)v16 + 94, (double *)(a8 + 8728), a8 + 8692, *(_DWORD *)(a8 + 8688), (double *)buf, &v105, &v104, *(double *)(a8 + 7936 + 16 * v17 + 80));
      uint64_t v34 = 0;
      uint64_t v35 = v104;
      uint64_t v36 = v105;
      double v37 = *(double *)buf;
      do
      {
        *(double *)(a8 + 168 * (int)v17 + 8816 + v34) = *(double *)(v36 + v34)
                                                        + (*(double *)(v35 + v34) - *(double *)(v36 + v34)) * v37;
        v34 += 8;
      }
      while (v34 != 56);
      int v18 = *v33;
      a2 = v103;
    }
    else
    {
      int v18 = 1;
      *(_DWORD *)(a8 + 4 * v17 + 8804) = 1;
    }
  }
  uint64_t v38 = a8 + 7936;
  *(_DWORD *)(a8 + 8800) = v18;
  uint64_t v39 = (_DWORD *)(a8 + 4 * v17 + 9152);
  if (a2)
  {
    *uint64_t v39 = 3;
    double v40 = fmin(v16[41], 0.002930403);
    double v41 = fmax(v16[43], 0.2);
    double v42 = fmax(v16[42], 0.508078422);
    if (v41 > v42 + -0.000244200244) {
      double v41 = v42 + -0.000244200244;
    }
    double v43 = (v16[28] + v16[27]) * 0.5;
    uint64_t v44 = a8 + 16 * v17;
    double v45 = *(double *)(v44 + 8016);
    double v46 = v43 - (v45 + *(double *)(v44 + 8008)) * 0.5;
    *(double *)(a8 + 8088) = v46;
    double v47 = ((v41 - v43) * 3.0 + 1.0) * (v46 * 0.5);
    double v48 = *(double *)(a8 + 8096);
    double v49 = (v46 + 1.0) / v48;
    *(double *)(a8 + 8104) = v49;
    if (v40 - v47 < *(double *)(v44 + 8008)) {
      double v50 = *(double *)(v44 + 8008);
    }
    else {
      double v50 = v40 - v47;
    }
    if (v42 - v47 > v45) {
      double v51 = v45;
    }
    else {
      double v51 = v42 - v47;
    }
    double v52 = (v42 - v40) * 0.15;
    double v53 = v40 + v52;
    double v54 = v42 - v52;
    if (v41 <= v54) {
      double v54 = v41;
    }
    if (v41 >= v53) {
      double v55 = v54;
    }
    else {
      double v55 = v53;
    }
    double v56 = (v51 - v50) * 0.15;
    double v57 = v50 + v56;
    double v58 = v55 - v47;
    double v59 = v51 - v56;
    if (v58 <= v59) {
      double v59 = v58;
    }
    *(double *)(a8 + 8040) = v40;
    *(double *)(a8 + 8048) = v42;
    *(double *)(a8 + 8056) = v55;
    *(double *)(a8 + 8064) = v50;
    if (v58 >= v57) {
      double v60 = v59;
    }
    else {
      double v60 = v57;
    }
    *(double *)(a8 + 8080) = v51;
    *(double *)(a8 + 8072) = v60;
  }
  else
  {
    *uint64_t v39 = 2;
    double v40 = fmin(v16[41], 0.002930403);
    double v61 = fmax(v16[43], 0.2);
    double v62 = fmax(v16[42], 0.508078422);
    if (v61 > v62 + -0.000244200244) {
      double v61 = v62 + -0.000244200244;
    }
    double v63 = fmax(v62 * 0.25 + v40 * 0.75, 0.1);
    if (v61 >= v63)
    {
      double v63 = fmin(v62 * 0.75 + v40 * 0.25, 0.9);
      if (v61 <= v63) {
        double v63 = v61;
      }
    }
    if (v63 + -0.01 <= v40) {
      double v40 = v63 + -0.01;
    }
    if (v63 + -0.01 < 0.0) {
      double v40 = 0.0;
    }
    double v64 = fmin(v63 + 0.01, 1.0);
    if (v63 + 0.01 >= v62) {
      double v42 = v64;
    }
    else {
      double v42 = v62;
    }
    uint64_t v65 = a8 + 16 * v17;
    double v66 = *(double *)(v65 + 8016);
    double v67 = v16[27];
    double v68 = v16[28];
    double v69 = fmin(sqrt((*(double *)(v65 + 8008) + v66) / (v67 + v68)), 1.0);
    *(double *)(a8 + 8088) = v69;
    double v70 = (v63 - v67) * (v63 * (1.0 - v69)) / (v68 - v67);
    double v71 = v70 + v70;
    if (v40 - v71 < *(double *)(v65 + 8008)) {
      double v50 = *(double *)(v65 + 8008);
    }
    else {
      double v50 = v40 - v71;
    }
    if (v42 - v71 > v66) {
      double v51 = v66;
    }
    else {
      double v51 = v42 - v71;
    }
    double v72 = v63 - v71;
    if (v72 > v51) {
      double v73 = v51;
    }
    else {
      double v73 = v72;
    }
    if (v72 >= v50) {
      double v60 = v73;
    }
    else {
      double v60 = v50;
    }
    double v48 = *(double *)(a8 + 8096);
    double v49 = sqrt(1.0 / v69) / v48;
    *(double *)(a8 + 8104) = v49;
    *(double *)(a8 + 8040) = v40;
    double v55 = v71 + v60;
    *(double *)(a8 + 8056) = v71 + v60;
    *(double *)(a8 + 8048) = v42;
    *(double *)(a8 + 8064) = v50;
    *(double *)(a8 + 8072) = v60;
    *(double *)(a8 + 8080) = v51;
  }
  long double v74 = 1.0 / v48;
  double v75 = pow(v40, v49);
  double v76 = pow(v55, v49);
  double v77 = pow(v42, v49);
  double v78 = pow(v50, v74);
  double v79 = pow(v60, v74);
  long double v80 = pow(v51, v74);
  long double v81 = v79 * v76 * (v77 - v75) + v80 * v77 * (v75 - v76) + v78 * v75 * (v76 - v77);
  *(long double *)(a8 + 8112) = (v79 * ((v78 - v80) * -(v75 * v77))
                               + (v79 - v80) * (v77 * v76) * v78
                               + (v78 - v79) * (v76 * v75) * v80)
                              / v81;
  *(long double *)(a8 + 8120) = (v79 * -(v80 * v77 - v75 * v78)
                               - -(v80 * v77 - v76 * v79) * v78
                               - -(v79 * v76 - v75 * v78) * v80)
                              / v81;
  double v82 = ((v77 - v76) * v78 - (v77 - v75) * v79 + (v76 - v75) * v80) / v81;
  *(double *)(a8 + 8128) = v82;
  if (a6)
  {
    double v83 = 1.0;
    if (v82 < 0.0) {
      double v83 = fmin(pow(-1.0 / v82, 1.0 / v49) + -0.0009765625, 1.0);
    }
    double v84 = TmDm23(a5, 0, a8 + 7936, 0.0);
    double v85 = TmDm23(a5, 0, a8 + 7936, v83);
    uint64_t v86 = a8 + 16 * v17;
    double v87 = *(double *)(v86 + 8016);
    if (v87 <= v85) {
      double v85 = *(double *)(v86 + 8016);
    }
    if (v87 >= v84) {
      long double v88 = v85;
    }
    else {
      long double v88 = v84;
    }
    double v89 = *(double *)(v86 + 8008);
    if (v89 > v88) {
      double v90 = v88;
    }
    else {
      double v90 = *(double *)(v86 + 8008);
    }
    if (v89 >= v84) {
      long double v91 = v90;
    }
    else {
      long double v91 = v84;
    }
    double v92 = v88 - v91;
    double v93 = (v88 - v91) / 0.9;
    if (v88 - v91 > 0.9) {
      double v93 = 1.0;
    }
    if (v92 < 0.0) {
      double v93 = 0.0;
    }
    if (v93 <= 0.5) {
      double v94 = v93 * (v93 * (v93 * 4.0));
    }
    else {
      double v94 = (v93 + -1.0) * ((v93 + -1.0) * 4.0) * (v93 + -1.0) + 1.0;
    }
    long double v96 = v91 + (v94 * -0.2 + 0.55) * v92;
    *a6 = TmDm23(a5, 1, a8 + 7936, v91);
    a6[1] = TmDm23(a5, 1, a8 + 7936, v96);
    double v97 = TmDm23(a5, 1, a8 + 7936, v88);
    uint64_t v98 = 0;
    a6[2] = v97;
    uint64_t v95 = 3;
    do
    {
      *(double *)(a7 + v98 * 8) = TmDm23(a5, 0, v38, a6[v98]);
      ++v98;
    }
    while (v98 != 3);
  }
  else
  {
    uint64_t v95 = 0;
  }
  if (v12 >= 1)
  {
    uint64_t v99 = v12;
    double v100 = (double *)(a7 + 8 * v95);
    do
    {
      long double v101 = *a3++;
      *v100++ = TmDm23(a5, 0, v38, v101);
      --v99;
    }
    while (v99);
  }
}

void TmDm4(int a1, unsigned int a2, uint64_t a3, double a4)
{
  uint64_t v5 = a3 + 200;
  int v7 = *(_DWORD *)(a3 + 864);
  if (v7)
  {
    uint64_t v8 = *(void *)(a3 + 432);
    uint64_t v9 = a3 + 16 * a1;
    double v10 = *(double *)(v9 + 72);
    double v11 = *(double *)(v9 + 80) - v10;
  }
  else
  {
    uint64_t v8 = a3 + 168 * a1 + 880;
    uint64_t v12 = a3 + 16 * a1;
    double v10 = *(double *)(v12 + 72);
    double v11 = *(double *)(v12 + 80) - v10;
    if (a2 == 1)
    {
      double v13 = (a4 - v10) / v11;
      if (v13 <= 0.0)
      {
        double v14 = 0.0;
        if (v13 < 0.0) {
          double v14 = -pow(-v13, 1.0 / *(double *)(a3 + 168 * a1 + 904));
        }
      }
      else
      {
        double v14 = pow(v13, 1.0 / *(double *)(a3 + 168 * a1 + 904));
      }
      a4 = v10 + (v14 - *(double *)(v8 + 16)) / *(double *)(v8 + 8) * v11;
    }
  }
  double v15 = *(double *)(v5 + 104 * a2 + 8);
  if (a4 <= v15)
  {
    double v19 = a4 - *(double *)(v5 + 104 * a2);
    double v18 = *(double *)(v5 + 104 * a2 + 24) + *(double *)(v5 + 104 * a2 + 48) * v19;
    if (v19 > 0.0) {
      double v18 = v18
    }
          + v19 * (v19 * v19) * *(double *)(v5 + 104 * a2 + 80)
          + *(double *)(v5 + 104 * a2 + 72) * (v19 * v19);
  }
  else
  {
    double v16 = a4 - *(double *)(v5 + 104 * a2 + 16);
    if (v16 >= 0.0)
    {
      double v18 = *(double *)(v5 + 104 * a2 + 40) + *(double *)(v5 + 104 * a2 + 64) * v16;
    }
    else
    {
      double v17 = a4 - v15;
      double v18 = *(double *)(v5 + 104 * a2 + 32)
          + *(double *)(v5 + 104 * a2 + 56) * v17
          + *(double *)(v5 + 104 * a2 + 88) * (v17 * v17)
          + *(double *)(v5 + 104 * a2 + 96) * (v17 * (v17 * v17));
    }
  }
  if (!(v7 | a2))
  {
    double v20 = *(double *)(v8 + 16) + *(double *)(v8 + 8) * ((v18 - v10) / v11);
    if (v20 <= 0.0)
    {
      if (v20 < 0.0) {
        pow(-v20, *(long double *)(v8 + 24));
      }
    }
    else
    {
      pow(v20, *(long double *)(v8 + 24));
    }
  }
}

double *SortAscend_0(double *result, int32x2_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v4 = 0;
      int v5 = 0;
      double v6 = *result;
      int v7 = a2;
      do
      {
        uint64_t v8 = &result[v4];
        double v9 = v8[1];
        if (v6 <= v9)
        {
          double v6 = v8[1];
        }
        else
        {
          result[v4] = v9;
          v8[1] = v6;
          *int v7 = vrev64_s32(*v7);
          int v5 = 1;
        }
        ++v4;
        int v7 = (int32x2_t *)((char *)v7 + 4);
      }
      while (v3 != v4);
      if (v3 < 2) {
        break;
      }
      --v3;
    }
    while (v5);
  }
  return result;
}

double FindChromaDist(double *a1, double a2, double a3)
{
  v24[9] = *(double *)MEMORY[0x263EF8340];
  GetRgb2XyzM33ByPrimsMR81(v24, *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  double v4 = v24[1] * 0.0 + v24[0] * a2 + v24[2] * 0.0;
  double v5 = v24[4] * 0.0 + v24[3] * a2 + v24[5] * 0.0;
  double v6 = v24[7] * 0.0 + v24[6] * a2 + v24[8] * 0.0;
  double v7 = v5 * 0.707593156 + v4 * 0.40023822 + v6 * -0.0808055815;
  double v8 = v5 * 1.16531559 + v4 * -0.226298104 + v6 * 0.0457007745;
  double v9 = v5 * 0.0 + v4 * 0.0 + v6 * 0.918224951;
  double v10 = v8 * 0.04 + v7 * 0.92 + v9 * 0.04;
  double v11 = v8 * 0.92 + v7 * 0.04 + v9 * 0.04;
  double v23 = v8 * 0.04 + v7 * 0.04 + v9 * 0.92;
  double v12 = v10 / 10000.0;
  if (v10 < 0.0) {
    double v12 = 0.0;
  }
  long double v13 = pow(v12, 0.159301758);
  double v21 = pow((v13 * 18.8515625 + 0.8359375) / (v13 * 18.6875 + 1.0), 78.84375);
  double v14 = v11 / 10000.0;
  if (v11 < 0.0) {
    double v14 = 0.0;
  }
  long double v15 = pow(v14, 0.159301758);
  double v16 = pow((v15 * 18.8515625 + 0.8359375) / (v15 * 18.6875 + 1.0), 78.84375);
  double v17 = v23 / 10000.0;
  if (v23 < 0.0) {
    double v17 = 0.0;
  }
  long double v18 = pow(v17, 0.159301758);
  long double v19 = pow((v18 * 18.8515625 + 0.8359375) / (v18 * 18.6875 + 1.0), 78.84375);
  return fabs(v16 * -4.24560547 + v21 * 4.37817383 + v19 * -0.132568359)
       + fabs(v16 * -1.66174316 + v21 * 0.806884766 + v19 * 0.854858398)
       + vabdd_f64(a3, v16 * 0.5 + v21 * 0.5 + v19 * 0.0);
}

void BuildInterpInfo(_DWORD *a1, double *a2, uint64_t a3, int a4, double *a5, void *a6, void *a7, double a8)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a4 && *a2 <= a8)
  {
    int v17 = (a4 & ~(a4 >> 31)) + 1;
    long double v18 = a2 + 1;
    int v15 = -1;
    uint64_t v19 = a4 & ~(a4 >> 31);
    while (v19)
    {
      double v20 = *v18++;
      ++v15;
      --v19;
      if (v20 > a8)
      {
        int v17 = v15 + 1;
        goto LABEL_9;
      }
    }
    int v15 = a4 & ~(a4 >> 31);
LABEL_9:
    if (v17 <= a4) {
      int v16 = v17;
    }
    else {
      int v16 = v15;
    }
  }
  else
  {
    int v15 = 0;
    int v16 = 0;
  }
  if (*a1 != 8)
  {
    if (*a1 == 2)
    {
      int v21 = *(_DWORD *)(a3 + 4 * v15);
      int v22 = a1 + 4;
      int v23 = 56;
      goto LABEL_25;
    }
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v24 = logInstanceID;
      }
      else {
        uint64_t v24 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 134217984;
        uint64_t v27 = WORD1(v24);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: BuildInterpInfo TrimLevel must be 8", (uint8_t *)&v26, 0xCu);
      }
      prevLogInstanceID = v24;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v26) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: BuildInterpInfo TrimLevel must be 8", (uint8_t *)&v26, 2u);
    }
  }
  int v21 = *(_DWORD *)(a3 + 4 * v15);
  int v22 = a1 + 4;
  int v23 = 168;
LABEL_25:
  *a6 = (char *)v22 + v21 * (uint64_t)v23;
  *a7 = (char *)v22 + *(int *)(a3 + 4 * v16) * (uint64_t)v23;
  double v25 = 0.0;
  if (v15 != v16) {
    double v25 = (a8 - a2[v15]) / (a2[v16] - a2[v15]);
  }
  *a5 = v25;
}

uint64_t CalSlopes(uint64_t result, double *a2, double a3)
{
  double v3 = a2[4];
  double v4 = a2[1];
  double v5 = (v3 - a2[3]) / (v4 - *a2);
  double v6 = (a2[5] - v3) / (a2[2] - v4);
  double v7 = v5 * 3.0;
  double v8 = v6 * 3.0;
  double v9 = v5 * v5;
  if (v9 > v7) {
    double v9 = v7;
  }
  a2[6] = v9;
  if (result)
  {
    double v10 = a2[7];
    if (v7 > v8) {
      double v11 = v6 * 3.0;
    }
    else {
      double v11 = v7;
    }
    if (v10 > v11) {
      double v10 = v11;
    }
  }
  else
  {
    double v12 = v3 - v4 + 1.0 + a3;
    if (v7 > v8) {
      double v13 = v6 * 3.0;
    }
    else {
      double v13 = v7;
    }
    if (v12 <= v13) {
      double v13 = v12;
    }
    BOOL v14 = v12 <= 0.0;
    double v10 = 0.0;
    if (!v14) {
      double v10 = v13;
    }
  }
  a2[7] = v10;
  double v15 = v6 * v6;
  if (v6 * v6 > v8) {
    double v15 = v6 * 3.0;
  }
  a2[8] = v15;
  return result;
}

double TmDm23(int a1, int a2, uint64_t a3, long double a4)
{
  int v5 = *(_DWORD *)(a3 + 864);
  if (v5)
  {
    if (!a2)
    {
      double v6 = *(double **)(a3 + 744);
      goto LABEL_16;
    }
LABEL_8:
    if (a4 < 0.0) {
      a4 = 0.0;
    }
    long double v8 = pow(a4, 1.0 / *(double *)(a3 + 160));
    double v9 = (v8 - *(double *)(a3 + 176)) / (*(double *)(a3 + 184) - *(double *)(a3 + 192) * v8);
    if (v9 < 0.0) {
      double v9 = 0.0;
    }
    double v10 = 1.0 / *(double *)(a3 + 168);
    goto LABEL_13;
  }
  double v7 = (double *)(a3 + 168 * a1);
  double v6 = v7 + 110;
  if (a2)
  {
    if (a4 < 0.0) {
      a4 = 0.0;
    }
    a4 = (pow(a4, 1.0 / v7[113]) - v7[112]) / v7[111];
    goto LABEL_8;
  }
LABEL_16:
  if (a4 < 0.0) {
    a4 = 0.0;
  }
  long double v12 = pow(a4, *(long double *)(a3 + 168));
  double v13 = (*(double *)(a3 + 176) + *(double *)(a3 + 184) * v12) / (*(double *)(a3 + 192) * v12 + 1.0);
  if (v13 < 0.0) {
    double v13 = 0.0;
  }
  double result = pow(v13, *(long double *)(a3 + 160));
  if (!v5)
  {
    double v9 = v6[2] + v6[1] * result;
    if (v9 < 0.0) {
      double v9 = 0.0;
    }
    double v10 = v6[3];
LABEL_13:
    return pow(v9, v10);
  }
  return result;
}

float adjustMidTone_dup(float a1, float a2, const float *a3, const float *a4, int a5, int a6, const float *a7)
{
  int v7 = a6;
  int v8 = a5;
  if (a5 > 0)
  {
    uint64_t v9 = 0;
    while (a3[v9] < a1)
    {
      if (a5 == ++v9) {
        goto LABEL_7;
      }
    }
    int v8 = v9;
  }
LABEL_7:
  if (a6 <= 0)
  {
LABEL_11:
    if (!v8)
    {
LABEL_17:
      if (!v7) {
        return *a7;
      }
      if (v7 == a6)
      {
        int v11 = (a6 - 1) * a5;
        return a7[v11];
      }
      int v19 = (int)(float)a5;
      uint64_t v20 = v7 - 1;
      float v21 = a7[v7 * v19];
      float v22 = a7[(int)v20 * v19];
      float v23 = a4[v20];
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v10 = 0;
    while (a4[v10] < a2)
    {
      if (a6 == ++v10) {
        goto LABEL_11;
      }
    }
    int v7 = v10;
    if (!v8) {
      goto LABEL_17;
    }
  }
  if (v8 != a5)
  {
    if (v7)
    {
      int v12 = (int)(float)a5;
      uint64_t v13 = v8 - 1;
      float v14 = a1 - a3[v13];
      float v15 = a3[v8] - a1;
      float v16 = v14 + v15;
      if (v7 != a6)
      {
        uint64_t v33 = v7 - 1;
        float v34 = (float)((float)(v14 * a7[(int)v33 * v12 + v8]) + (float)(a7[(int)v33 * v12 + (int)v13] * v15)) / v16;
        float v35 = (float)((float)(v14 * a7[v7 * v12 + v8]) + (float)(a7[v7 * v12 + (int)v13] * v15)) / v16;
        float v36 = a4[v7] - a2;
        float v37 = a2 - a4[v33];
        float v31 = (float)(v35 * v37) + (float)(v34 * v36);
        float v32 = v36 + v37;
        return v31 / v32;
      }
      float v17 = (float)(v14 * a7[v8 + (a6 - 1) * v12]) + (float)(a7[(int)v13 + (a6 - 1) * v12] * v15);
    }
    else
    {
      uint64_t v24 = 4 * v8 - 4;
      float v25 = a1 - *(const float *)((char *)a3 + v24);
      float v26 = a3[v8] - a1;
      float v17 = (float)(a7[v8] * v25) + (float)(*(const float *)((char *)a7 + v24) * v26);
      float v16 = v25 + v26;
    }
    return v17 / v16;
  }
  if (!v7)
  {
    int v11 = a5 - 1;
    return a7[v11];
  }
  if (v7 == a6)
  {
    int v11 = a5 + (a6 - 1) * a5 - 1;
    return a7[v11];
  }
  int v27 = (int)(float)a5;
  uint64_t v28 = v7 - 1;
  float v21 = a7[a5 - 1 + v7 * v27];
  float v22 = a7[a5 - 1 + (int)v28 * v27];
  float v23 = a4[v28];
LABEL_30:
  float v29 = a2 - v23;
  float v30 = a4[v7] - a2;
  float v31 = (float)(v21 * v29) + (float)(v22 * v30);
  float v32 = v29 + v30;
  return v31 / v32;
}

void dovi_calculateTonemapCurveParamS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v290 = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(a1 + 12);
  int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 40);
  float v8 = *(float *)(a1 + 48);
  float32x2_t v287 = *(float32x2_t *)(a1 + 52);
  float v9 = *(float *)(a1 + 116);
  float v10 = fmaxf(v9, 40.0);
  if (*(unsigned char *)(a2 + 481)) {
    float v11 = *(float *)(a1 + 60);
  }
  else {
    float v11 = v10;
  }
  float v12 = *(float *)(a1 + 68);
  float v269 = *(float *)(a1 + 80);
  float v277 = *(float *)(a1 + 72);
  float v264 = *(float *)(a1 + 76);
  *(void *)float v280 = *(void *)(a1 + 40);
  float v13 = v280[0];
  if (*(float *)&v7 >= 0.0)
  {
    float v16 = powf(*(float *)&v7 * 0.0001, 0.1593);
    float v15 = powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v14 = powf(*(float *)&v7 * -0.0001, 0.1593);
    float v15 = 0.0000014619 - powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
  }
  if (v280[1] >= 0.0)
  {
    float v19 = powf(v280[1] * 0.0001, 0.1593);
    float v18 = powf((float)((float)(v19 * 18.852) + 0.83594) / (float)((float)(v19 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v17 = powf(v280[1] * -0.0001, 0.1593);
    float v18 = 0.0000014619 - powf((float)((float)(v17 * 18.852) + 0.83594) / (float)((float)(v17 * 18.688) + 1.0), 78.844);
  }
  float v263 = v18;
  if (v8 >= 0.0)
  {
    float v22 = powf(v8 * 0.0001, 0.1593);
    float v21 = powf((float)((float)(v22 * 18.852) + 0.83594) / (float)((float)(v22 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v20 = powf(v8 * -0.0001, 0.1593);
    float v21 = 0.0000014619 - powf((float)((float)(v20 * 18.852) + 0.83594) / (float)((float)(v20 * 18.688) + 1.0), 78.844);
  }
  if (v11 >= 0.0)
  {
    float v26 = powf(v11 * 0.0001, 0.1593);
    float v25 = powf((float)((float)(v26 * 18.852) + 0.83594) / (float)((float)(v26 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v23 = powf(v11 * -0.0001, 0.1593);
    float v25 = 0.0000014619 - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
  }
  float v262 = v25;
  float v283 = v11;
  int v27 = *(_DWORD *)(a1 + 8);
  *(unsigned char *)a3 = 1;
  float v28 = v287.f32[0];
  *(void *)&long long v29 = *(void *)v280;
  *((float32x2_t *)&v29 + 1) = v287;
  *(_OWORD *)(a3 + 4) = v29;
  *(float *)(a3 + 20) = v9;
  float v281 = v8;
  float v30 = v277;
  float v267 = v15;
  float v31 = v21;
  if (*(unsigned char *)(a1 + 188))
  {
    if (v13 >= v12) {
      float v32 = v13;
    }
    else {
      float v32 = v12;
    }
    float v33 = v287.f32[1];
    float v34 = v277;
    if (*(unsigned char *)(a1 + 189))
    {
      float v34 = v277;
      if (*(_DWORD *)(a1 + 104) == 1)
      {
        float v34 = v277;
        if (v283 < 1000.0)
        {
          float v34 = v277;
          if (!*(unsigned char *)(a1 + 191))
          {
            float v34 = v277;
            if (v283 >= v287.f32[1])
            {
              float v34 = v277;
              if (v277 <= v280[1])
              {
                uint64_t Config = GetConfig(v24);
                if (Config)
                {
                  float v36 = GetConfig((HDRConfig *)Config);
                  float v37 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v36, 0x5Cu, 0);
                }
                else
                {
                  float v37 = 0.0;
                }
                float v30 = v277;
                float v34 = v277 * v37;
                if (v34 >= v280[1]) {
                  float v34 = v280[1];
                }
                float v28 = v287.f32[0];
              }
            }
          }
        }
      }
    }
    if (v28 >= v32) {
      float v13 = v32;
    }
    else {
      float v13 = v28;
    }
    *(float *)(a3 + 24) = v13;
    if (v34 >= v283) {
      float v40 = v34;
    }
    else {
      float v40 = v283;
    }
    if (v40 >= v264) {
      float v38 = v40;
    }
    else {
      float v38 = v264;
    }
    *(float *)(a3 + 32) = v40;
    *(float *)(a3 + 36) = v38;
    *(float *)(a3 + 40) = v281;
    if (v287.f32[1] < v283) {
      float v33 = v283;
    }
    *(float *)(a3 + 48) = v283;
    *(float *)(a3 + 52) = v33;
    float v265 = v33;
    if (v30 <= v280[1])
    {
      float v9 = v283;
      float v30 = v40;
      float v12 = v13;
    }
    else
    {
      if (v9 <= v280[1])
      {
        float v9 = v283;
      }
      else
      {
        if (v9 >= v30) {
          float v9 = v30;
        }
        *(float *)(a3 + 48) = v9;
        if (v40 >= 0.0)
        {
          float v43 = powf(v40 * 0.0001, 0.1593);
          float v42 = powf((float)((float)(v43 * 18.852) + 0.83594) / (float)((float)(v43 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v41 = powf(v40 * -0.0001, 0.1593);
          float v42 = 0.0000014619
              - powf((float)((float)(v41 * 18.852) + 0.83594) / (float)((float)(v41 * 18.688) + 1.0), 78.844);
        }
        float v263 = v42;
        if (v9 >= 0.0)
        {
          float v46 = powf(v9 * 0.0001, 0.1593);
          float v45 = powf((float)((float)(v46 * 18.852) + 0.83594) / (float)((float)(v46 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v44 = powf(v9 * -0.0001, 0.1593);
          float v45 = 0.0000014619
              - powf((float)((float)(v44 * 18.852) + 0.83594) / (float)((float)(v44 * 18.688) + 1.0), 78.844);
        }
        float v262 = v45;
      }
      float v30 = v40;
      float v12 = v13;
    }
  }
  else
  {
    *(float *)(a3 + 24) = v13;
    if (v280[1] >= v264) {
      float v38 = v280[1];
    }
    else {
      float v38 = v264;
    }
    *(float *)(a3 + 32) = v280[1];
    *(float *)(a3 + 36) = v38;
    *(float *)(a3 + 40) = v8;
    float v39 = v287.f32[1];
    float v9 = v283;
    if (v287.f32[1] < v283) {
      float v39 = v283;
    }
    *(float *)(a3 + 48) = v283;
    *(float *)(a3 + 52) = v39;
    float v265 = v39;
    float v40 = v280[1];
  }
  float v47 = v30;
  if (v13 >= 0.0)
  {
    float v50 = powf(v13 * 0.0001, 0.1593);
    float v49 = powf((float)((float)(v50 * 18.852) + 0.83594) / (float)((float)(v50 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v48 = powf(v13 * -0.0001, 0.1593);
    float v49 = 0.0000014619 - powf((float)((float)(v48 * 18.852) + 0.83594) / (float)((float)(v48 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 56) = v49;
  float v51 = v12;
  if (v40 >= 0.0)
  {
    float v54 = powf(v40 * 0.0001, 0.1593);
    float v53 = powf((float)((float)(v54 * 18.852) + 0.83594) / (float)((float)(v54 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v52 = powf(v40 * -0.0001, 0.1593);
    float v53 = 0.0000014619 - powf((float)((float)(v52 * 18.852) + 0.83594) / (float)((float)(v52 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 64) = v53;
  if (v38 >= 0.0)
  {
    float v57 = powf(v38 * 0.0001, 0.1593);
    float v56 = powf((float)((float)(v57 * 18.852) + 0.83594) / (float)((float)(v57 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v55 = powf(v38 * -0.0001, 0.1593);
    float v56 = 0.0000014619 - powf((float)((float)(v55 * 18.852) + 0.83594) / (float)((float)(v55 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 68) = v56;
  if (v281 >= 0.0)
  {
    float v60 = powf(v281 * 0.0001, 0.1593);
    float v59 = powf((float)((float)(v60 * 18.852) + 0.83594) / (float)((float)(v60 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v58 = powf(v281 * -0.0001, 0.1593);
    float v59 = 0.0000014619 - powf((float)((float)(v58 * 18.852) + 0.83594) / (float)((float)(v58 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 72) = v59;
  if (v9 >= 0.0)
  {
    float v63 = powf(v9 * 0.0001, 0.1593);
    float v62 = powf((float)((float)(v63 * 18.852) + 0.83594) / (float)((float)(v63 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v61 = powf(v9 * -0.0001, 0.1593);
    float v62 = 0.0000014619 - powf((float)((float)(v61 * 18.852) + 0.83594) / (float)((float)(v61 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 80) = v62;
  if (v265 >= 0.0)
  {
    float v66 = powf(v265 * 0.0001, 0.1593);
    float v65 = powf((float)((float)(v66 * 18.852) + 0.83594) / (float)((float)(v66 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v64 = powf(v265 * -0.0001, 0.1593);
    float v65 = 0.0000014619 - powf((float)((float)(v64 * 18.852) + 0.83594) / (float)((float)(v64 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 84) = v65;
  float v67 = v31;
  if (v51 >= 0.0)
  {
    float v70 = powf(v51 * 0.0001, 0.1593);
    float v69 = powf((float)((float)(v70 * 18.852) + 0.83594) / (float)((float)(v70 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v68 = powf(v51 * -0.0001, 0.1593);
    float v69 = 0.0000014619 - powf((float)((float)(v68 * 18.852) + 0.83594) / (float)((float)(v68 * 18.688) + 1.0), 78.844);
  }
  if (v47 >= 0.0)
  {
    float v73 = powf(v47 * 0.0001, 0.1593);
    float v72 = powf((float)((float)(v73 * 18.852) + 0.83594) / (float)((float)(v73 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v71 = powf(v47 * -0.0001, 0.1593);
    float v72 = 0.0000014619 - powf((float)((float)(v71 * 18.852) + 0.83594) / (float)((float)(v71 * 18.688) + 1.0), 78.844);
  }
  float v74 = v267;
  if (v269 >= 0.0)
  {
    float v78 = powf(v269 * 0.0001, 0.1593);
    float v77 = powf((float)((float)(v78 * 18.852) + 0.83594) / (float)((float)(v78 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v75 = powf(v269 * -0.0001, 0.1593);
    float v77 = 0.0000014619 - powf((float)((float)(v75 * 18.852) + 0.83594) / (float)((float)(v75 * 18.688) + 1.0), 78.844);
  }
  float v270 = v77;
  float v266 = *(float *)(a1 + 84);
  float v257 = *(float *)(a1 + 88);
  double v79 = GetConfig(v76);
  if (v79)
  {
    long double v80 = GetConfig((HDRConfig *)v79);
    int v81 = *(_DWORD *)HDRConfig::GetConfigEntryValue((uint64_t)v80, 0x87u, 0);
  }
  else
  {
    int v81 = 0;
  }
  *(_DWORD *)(a3 + 136) = v81;
  if (*(unsigned char *)(a2 + 481))
  {
    *(float *)(a3 + 120) = v281;
    float v82 = *(float *)(a3 + 48);
    if (*(float *)(a1 + 116) >= v82) {
      float v83 = *(float *)(a3 + 48);
    }
    else {
      float v83 = *(float *)(a1 + 116);
    }
    if (v283 >= v82) {
      float v84 = *(float *)(a3 + 48);
    }
    else {
      float v84 = v283;
    }
    float v85 = fmax(fmin((float)((float)(v83 - v281) / (float)(v84 - v281)), 1.0), 0.0);
    *(float *)(a3 + 124) = v85;
    if (v281 >= 0.0)
    {
      float v91 = powf(v281 * 0.0001, 0.1593);
      float v87 = powf((float)((float)(v91 * 18.852) + 0.83594) / (float)((float)(v91 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v86 = powf(v281 * -0.0001, 0.1593);
      float v87 = 0.0000014619 - powf((float)((float)(v86 * 18.852) + 0.83594) / (float)((float)(v86 * 18.688) + 1.0), 78.844);
    }
    *(float *)(a3 + 128) = v87;
    if (v83 >= 0.0)
    {
      float v94 = powf(v83 * 0.0001, 0.1593);
      float v93 = powf((float)((float)(v94 * 18.852) + 0.83594) / (float)((float)(v94 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v92 = powf(v83 * -0.0001, 0.1593);
      float v93 = 0.0000014619 - powf((float)((float)(v92 * 18.852) + 0.83594) / (float)((float)(v92 * 18.688) + 1.0), 78.844);
    }
    float v95 = v72;
    if (v281 >= 0.0)
    {
      float v98 = powf(v281 * 0.0001, 0.1593);
      float v97 = powf((float)((float)(v98 * 18.852) + 0.83594) / (float)((float)(v98 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v96 = powf(v281 * -0.0001, 0.1593);
      float v97 = 0.0000014619 - powf((float)((float)(v96 * 18.852) + 0.83594) / (float)((float)(v96 * 18.688) + 1.0), 78.844);
    }
    if (v84 >= 0.0)
    {
      float v101 = powf(v84 * 0.0001, 0.1593);
      float v100 = powf((float)((float)(v101 * 18.852) + 0.83594) / (float)((float)(v101 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v99 = powf(v84 * -0.0001, 0.1593);
      float v100 = 0.0000014619
           - powf((float)((float)(v99 * 18.852) + 0.83594) / (float)((float)(v99 * 18.688) + 1.0), 78.844);
    }
    float v102 = v93 - v97;
    if (v281 >= 0.0)
    {
      float v106 = powf(v281 * 0.0001, 0.1593);
      float v105 = powf((float)((float)(v106 * 18.852) + 0.83594) / (float)((float)(v106 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v103 = powf(v281 * -0.0001, 0.1593);
      float v105 = 0.0000014619
           - powf((float)((float)(v103 * 18.852) + 0.83594) / (float)((float)(v103 * 18.688) + 1.0), 78.844);
    }
    float v72 = v95;
    float v107 = v102 / (float)(v100 - v105);
    float v74 = v267;
  }
  else
  {
    *(_DWORD *)(a3 + 120) = 0;
    *(_DWORD *)(a3 + 128) = 0;
    float v88 = fmax(fmin((float)(v287.f32[1] / v283), 1.0), 0.0);
    *(float *)(a3 + 124) = v88;
    if (v287.f32[1] >= 0.0)
    {
      float v108 = powf(v287.f32[1] * 0.0001, 0.1593);
      float v90 = powf((float)((float)(v108 * 18.852) + 0.83594) / (float)((float)(v108 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v89 = powf(v287.f32[1] * -0.0001, 0.1593);
      float v90 = 0.0000014619 - powf((float)((float)(v89 * 18.852) + 0.83594) / (float)((float)(v89 * 18.688) + 1.0), 78.844);
    }
    if (v283 >= 0.0)
    {
      float v111 = powf(v283 * 0.0001, 0.1593);
      float v110 = powf((float)((float)(v111 * 18.852) + 0.83594) / (float)((float)(v111 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v109 = powf(v283 * -0.0001, 0.1593);
      float v110 = 0.0000014619
           - powf((float)((float)(v109 * 18.852) + 0.83594) / (float)((float)(v109 * 18.688) + 1.0), 78.844);
    }
    float v107 = v90 / v110;
  }
  float v112 = fmax(fmin(v107, 1.0), 0.0);
  *(float *)(a3 + 132) = v112;
  switch(v6)
  {
    case 4:
      if (*(unsigned char *)(a1 + 188))
      {
        *(float *)(a3 + 56) = v69;
        *(float *)(a3 + 60) = v270;
        *(float *)(a3 + 64) = v72;
        float v127 = -(float)(v69 + -0.0000014619);
        if (v69 < 0.00000073096)
        {
          float v128 = -10000.0;
        }
        else
        {
          float v127 = v69;
          float v128 = 10000.0;
        }
        float v129 = powf(v127, 0.012683);
        float v130 = fmax((float)((float)(v129 + -0.83594) / (float)((float)(v129 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 24) = v128 * powf(v130, 6.2774);
        float v131 = -(float)(v270 + -0.0000014619);
        if (v270 < 0.00000073096)
        {
          float v132 = -10000.0;
        }
        else
        {
          float v131 = v270;
          float v132 = 10000.0;
        }
        float v272 = v132;
        float v133 = powf(v131, 0.012683);
        float v134 = fmax((float)((float)(v133 + -0.83594) / (float)((float)(v133 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 28) = v272 * powf(v134, 6.2774);
        float v135 = -(float)(v72 + -0.0000014619);
        if (v72 < 0.00000073096)
        {
          float v136 = -10000.0;
        }
        else
        {
          float v135 = v72;
          float v136 = 10000.0;
        }
        float v137 = powf(v135, 0.012683);
        float v138 = fmax((float)((float)(v137 + -0.83594) / (float)((float)(v137 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 32) = v136 * powf(v138, 6.2774);
      }
      break;
    case 3:
      float v139 = v262;
      if (v262 >= v263) {
        float v139 = v263;
      }
      float v140 = (float)(v74 + v263) * 0.5;
      float v141 = v140 - (float)((float)(v67 + v139) * 0.5);
      float v142 = (float)(v141 + 1.0) / 0.33333;
      *(float *)(a3 + 88) = v142;
      float v143 = (float)((float)(v141 * (float)((float)((float)(v270 - v140) * 3.0) + 1.0)) * 0.5) + 0.0;
      if (v67 < (float)(v69 - v143)) {
        float v67 = v69 - v143;
      }
      if ((float)(v72 - v143) >= v139) {
        float v144 = v139;
      }
      else {
        float v144 = v72 - v143;
      }
      double v145 = (float)(v72 - v69);
      float v146 = v69 + v145 * 0.85;
      float v147 = v69 + v145 * 0.15;
      if (v270 <= v146) {
        float v148 = v270;
      }
      else {
        float v148 = v146;
      }
      if (v148 <= v147) {
        float v149 = v147;
      }
      else {
        float v149 = v148;
      }
      double v150 = (float)(v144 - v67);
      float v151 = v67 + v150 * 0.85;
      float v152 = v67 + v150 * 0.15;
      float v153 = (float)(v149 - v143) + 0.0;
      if (v153 > v151) {
        float v153 = v151;
      }
      if (v153 <= v152) {
        float v154 = v152;
      }
      else {
        float v154 = v153;
      }
      float v284 = v154;
      if (*(unsigned char *)(a1 + 189))
      {
        float v155 = GetConfig(v104);
        float v156 = 0.65;
        if (v155)
        {
          double v157 = GetConfig((HDRConfig *)v155);
          if (*((_DWORD *)v157 + 2951))
          {
            if ((v157[5900] & 0x80) != 0)
            {
              double v158 = GetConfig((HDRConfig *)v157);
              if (v158)
              {
                double v159 = GetConfig((HDRConfig *)v158);
                float v156 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v159, 0x86u, 0);
              }
              else
              {
                float v156 = 0.0;
              }
            }
          }
        }
        float v206 = v154 - v149;
        if ((float)(v154 - v149) < 0.0) {
          float v206 = 0.0;
        }
        float v149 = v149 + (float)(v206 * v156);
        float v142 = *(float *)(a3 + 88);
      }
      float v207 = powf(v69, v142);
      float v278 = v69;
      float v208 = powf(v149, v142);
      float v209 = powf(v72, v142);
      float v210 = powf(v67, 3.0);
      float v275 = v67;
      float v211 = powf(v284, 3.0);
      float v212 = powf(v144, 3.0);
      float v213 = (float)((float)((float)(v209 - v207) * (float)(v211 * v208))
                   + (float)((float)(v212 * v209) * (float)(v207 - v208)))
           + (float)((float)(v210 * v207) * (float)(v208 - v209));
      *(float *)(a3 + 92) = (float)((float)((float)(v211 * (float)((float)(v212 - v210) * (float)(v207 * v209)))
                                          + (float)((float)((float)(v211 - v212) * (float)(v209 * v208)) * v210))
                                  + (float)((float)((float)(v210 - v211) * (float)(v207 * v208)) * v212))
                          / v213;
      *(float *)(a3 + 96) = (float)((float)((float)(v211 * (float)-(float)((float)(v212 * v209) - (float)(v207 * v210)))
                                          + (float)((float)-(float)((float)(v211 * v208) - (float)(v209 * v212)) * v210))
                                  + (float)((float)-(float)((float)(v210 * v207) - (float)(v208 * v211)) * v212))
                          / v213;
      *(float *)(a3 + 100) = (float)((float)((float)((float)(v209 - v208) * v210) - (float)((float)(v209 - v207) * v211))
                                   + (float)((float)(v208 - v207) * v212))
                           / v213;
      *(_DWORD *)(a3 + 104) = 0;
      if (*(unsigned char *)(a1 + 188))
      {
        *(float *)(a3 + 56) = v278;
        *(float *)(a3 + 60) = v149;
        *(float *)(a3 + 64) = v72;
        *(float *)(a3 + 72) = v275;
        *(float *)(a3 + 76) = v284;
        *(float *)(a3 + 80) = v144;
        float v214 = -(float)(v278 + -0.0000014619);
        if (v278 >= 0.00000073096) {
          float v214 = v278;
        }
        float v215 = 10000.0;
        float v216 = v72;
        float v205 = -10000.0;
        if (v278 < 0.00000073096) {
          float v215 = -10000.0;
        }
        float v259 = v215;
        float v217 = powf(v214, 0.012683);
        float v218 = fmax((float)((float)(v217 + -0.83594) / (float)((float)(v217 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 24) = v259 * powf(v218, 6.2774);
        float v219 = -(float)(v149 + -0.0000014619);
        if (v149 < 0.00000073096)
        {
          float v220 = -10000.0;
        }
        else
        {
          float v219 = v149;
          float v220 = 10000.0;
        }
        float v260 = v220;
        float v221 = powf(v219, 0.012683);
        float v222 = fmax((float)((float)(v221 + -0.83594) / (float)((float)(v221 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 28) = v260 * powf(v222, 6.2774);
        float v223 = -(float)(v216 + -0.0000014619);
        if (v216 < 0.00000073096)
        {
          float v224 = -10000.0;
        }
        else
        {
          float v223 = v216;
          float v224 = 10000.0;
        }
        float v261 = v224;
        float v225 = powf(v223, 0.012683);
        float v226 = fmax((float)((float)(v225 + -0.83594) / (float)((float)(v225 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 32) = v261 * powf(v226, 6.2774);
        float v227 = -(float)(v275 + -0.0000014619);
        if (v275 < 0.00000073096)
        {
          float v228 = -10000.0;
        }
        else
        {
          float v227 = v275;
          float v228 = 10000.0;
        }
        float v276 = v228;
        float v229 = powf(v227, 0.012683);
        float v230 = fmax((float)((float)(v229 + -0.83594) / (float)((float)(v229 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 40) = v276 * powf(v230, 6.2774);
        float v231 = -(float)(v284 + -0.0000014619);
        if (v284 < 0.00000073096)
        {
          float v232 = -10000.0;
        }
        else
        {
          float v231 = v284;
          float v232 = 10000.0;
        }
        float v286 = v232;
        float v233 = powf(v231, 0.012683);
        float v234 = fmax((float)((float)(v233 + -0.83594) / (float)((float)(v233 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 44) = v286 * powf(v234, 6.2774);
        float v204 = -(float)(v144 + -0.0000014619);
        if (v144 >= 0.00000073096)
        {
          float v204 = v144;
          float v205 = 10000.0;
        }
        goto LABEL_238;
      }
      break;
    case 2:
      float v113 = fminf(sqrtf((float)(v262 - v67) / (float)(v263 - v74)), 1.0);
      float v114 = sqrtf(1.0 / v113);
      float v115 = 1.0 - v113;
      float v116 = v114 / 0.33333;
      *(float *)(a3 + 88) = v114 / 0.33333;
      float v117 = v69 + (float)(v72 - v69) * 0.85;
      if (v270 <= v117) {
        float v118 = v270;
      }
      else {
        float v118 = v69 + (float)(v72 - v69) * 0.85;
      }
      float v119 = v115 * (float)(v118 * (float)((float)((float)(v118 - v74) + (float)(v118 - v74)) / (float)(v263 - v74)));
      if (v67 >= (float)(v69 - v119)) {
        float v120 = v67;
      }
      else {
        float v120 = v69 - v119;
      }
      if ((float)(v72 - v119) >= v262) {
        float v121 = v262;
      }
      else {
        float v121 = v72 - v119;
      }
      float v122 = v118 - v119;
      float v271 = v118;
      if (v5 == 1)
      {
        float v123 = GetConfig(v104);
        if (v123
          && (double v124 = GetConfig((HDRConfig *)v123), *(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v124, 0x44u, 0))
          || *(_DWORD *)(a1 + 104) != 4)
        {
          float v125 = v120;
          float v122 = fminf(v122, 0.5);
          double v126 = (const float *)&middata_3LED;
        }
        else
        {
          float v125 = v120;
          double v126 = (const float *)&middata_3LED_84;
        }
        float v163 = adjustMidTone_dup(v266, v257, AB_3LED, BR_3LED, 8, 9, v126) + 0.0;
        float v164 = adjustMidTone_dup(v266, v257, AB_3LED, BR_3LED, 8, 9, sat_3LED);
        float v165 = v122 + v163;
        float v282 = v164;
        if (v72 <= 0.001) {
          double v166 = 0.949999988;
        }
        else {
          double v166 = (float)(v271 / v72);
        }
        float v120 = v125;
        float v169 = v166 * 1.875 + -0.7937;
        float v170 = fmax(fmin(v169, 0.95), 0.8);
        float v171 = v121 * v170;
        if (v165 >= v171) {
          float v172 = v171;
        }
        else {
          float v172 = v165;
        }
        if (v125 >= v172) {
          float v172 = v125;
        }
        float v285 = v172;
        float v116 = *(float *)(a3 + 88);
        float v173 = v121;
        float v118 = v271;
      }
      else
      {
        if (v122 >= v67)
        {
          float v282 = 0.0;
          double v167 = v262 * 0.95;
          if (v167 >= v122)
          {
            float v285 = v122;
          }
          else
          {
            float v168 = v167;
            float v285 = v168;
          }
        }
        else
        {
          float v282 = 0.0;
          float v285 = v67;
        }
        float v173 = v121;
      }
      float v268 = v120;
      float v174 = powf(v69, v116);
      float v175 = powf(v118, v116);
      float v176 = powf(v72, v116);
      float v177 = powf(v120, 3.0);
      float v178 = v72;
      float v179 = v177;
      float v180 = v69;
      float v181 = powf(v285, 3.0);
      float v182 = powf(v173, 3.0);
      float v183 = (float)((float)((float)(v176 - v174) * (float)(v175 * v181))
                   + (float)((float)(v182 * v176) * (float)(v174 - v175)))
           + (float)((float)(v179 * v174) * (float)(v175 - v176));
      *(float *)(a3 + 92) = (float)((float)((float)(v181 * (float)((float)(v182 - v179) * (float)(v174 * v176)))
                                          + (float)((float)((float)(v175 * v176) * (float)(v181 - v182)) * v179))
                                  + (float)((float)((float)(v174 * v175) * (float)(v179 - v181)) * v182))
                          / v183;
      *(float *)(a3 + 96) = (float)((float)((float)(v181 * (float)-(float)((float)(v182 * v176) - (float)(v174 * v179)))
                                          + (float)((float)-(float)((float)(v175 * v181) - (float)(v176 * v182)) * v179))
                                  + (float)((float)-(float)((float)(v179 * v174) - (float)(v175 * v181)) * v182))
                          / v183;
      *(float *)(a3 + 100) = (float)((float)((float)((float)(v176 - v175) * v179) - (float)((float)(v176 - v174) * v181))
                                   + (float)((float)(v175 - v174) * v182))
                           / v183;
      *(float *)(a3 + 104) = v282;
      if (*(unsigned char *)(a1 + 188))
      {
        *(float *)(a3 + 56) = v180;
        *(float *)(a3 + 60) = v271;
        *(float *)(a3 + 64) = v178;
        *(float *)(a3 + 72) = v268;
        *(float *)(a3 + 76) = v285;
        *(float *)(a3 + 80) = v173;
        float v184 = -(float)(v180 + -0.0000014619);
        if (v180 >= 0.00000073096) {
          float v184 = v180;
        }
        float v185 = -10000.0;
        if (v180 >= 0.00000073096) {
          float v185 = 10000.0;
        }
        float v258 = v185;
        float v186 = powf(v184, 0.012683);
        float v187 = fmax((float)((float)(v186 + -0.83594) / (float)((float)(v186 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 24) = v258 * powf(v187, 6.2774);
        float v188 = -(float)(v271 + -0.0000014619);
        if (v271 < 0.00000073096)
        {
          float v189 = -10000.0;
        }
        else
        {
          float v188 = v271;
          float v189 = 10000.0;
        }
        float v273 = v189;
        float v190 = powf(v188, 0.012683);
        float v191 = fmax((float)((float)(v190 + -0.83594) / (float)((float)(v190 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 28) = v273 * powf(v191, 6.2774);
        float v192 = -(float)(v178 + -0.0000014619);
        if (v178 < 0.00000073096)
        {
          float v193 = -10000.0;
        }
        else
        {
          float v192 = v178;
          float v193 = 10000.0;
        }
        float v194 = powf(v192, 0.012683);
        float v195 = fmax((float)((float)(v194 + -0.83594) / (float)((float)(v194 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 32) = v193 * powf(v195, 6.2774);
        float v196 = -(float)(v268 + -0.0000014619);
        if (v268 < 0.00000073096)
        {
          float v197 = -10000.0;
        }
        else
        {
          float v196 = v268;
          float v197 = 10000.0;
        }
        float v274 = v197;
        float v198 = powf(v196, 0.012683);
        float v199 = fmax((float)((float)(v198 + -0.83594) / (float)((float)(v198 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 40) = v274 * powf(v199, 6.2774);
        float v200 = -(float)(v285 + -0.0000014619);
        if (v285 < 0.00000073096)
        {
          float v201 = -10000.0;
        }
        else
        {
          float v200 = v285;
          float v201 = 10000.0;
        }
        float v202 = powf(v200, 0.012683);
        float v203 = fmax((float)((float)(v202 + -0.83594) / (float)((float)(v202 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 44) = v201 * powf(v203, 6.2774);
        float v204 = -(float)(v173 + -0.0000014619);
        if (v173 < 0.00000073096)
        {
          float v205 = -10000.0;
        }
        else
        {
          float v204 = v173;
          float v205 = 10000.0;
        }
LABEL_238:
        float v235 = powf(v204, 0.012683);
        float v236 = fmax((float)((float)(v235 + -0.83594) / (float)((float)(v235 * -18.688) + 18.852)), 0.0);
        *(float *)(a3 + 48) = v205 * powf(v236, 6.2774);
      }
      break;
    default:
      *(unsigned char *)a3 = 0;
      *(_DWORD *)(a3 + 24) = 0;
      *(float *)(a3 + 32) = v280[1];
      *(void *)(a3 + 36) = 1176256512;
      *(float *)(a3 + 48) = v280[1];
      *(void *)(a3 + 52) = 1176256512;
      if (v280[1] >= 0.0)
      {
        float v162 = powf(v280[1] * 0.0001, 0.1593);
        float v161 = powf((float)((float)(v162 * 18.852) + 0.83594) / (float)((float)(v162 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v160 = powf(v280[1] * -0.0001, 0.1593);
        float v161 = 0.0000014619
             - powf((float)((float)(v160 * 18.852) + 0.83594) / (float)((float)(v160 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a3 + 64) = v161;
      *(void *)(a3 + 68) = 1065353216;
      *(float *)(a3 + 80) = v161;
      *(_OWORD *)(a3 + 84) = xmmword_2222D40E0;
      *(_DWORD *)(a3 + 100) = 0;
      *(_DWORD *)(a3 + 104) = 0;
      break;
  }
  float v237 = 1.0;
  if (v27 != 2)
  {
    if (v27 == 1)
    {
      float v238 = *(float *)(a1 + 96);
      if (v238 >= 0.0)
      {
        float v245 = powf(v238 * 0.0001, 0.1593);
        float v240 = powf((float)((float)(v245 * 18.852) + 0.83594) / (float)((float)(v245 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v239 = powf(v238 * -0.0001, 0.1593);
        float v240 = 0.0000014619
             - powf((float)((float)(v239 * 18.852) + 0.83594) / (float)((float)(v239 * 18.688) + 1.0), 78.844);
      }
      float v246 = vmuls_lane_f32(*(float *)(a1 + 24), v287, 1);
      if (v246 >= 0.0)
      {
        float v249 = powf(v246 * 0.0001, 0.1593);
        float v248 = powf((float)((float)(v249 * 18.852) + 0.83594) / (float)((float)(v249 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v247 = powf(v246 * -0.0001, 0.1593);
        float v248 = 0.0000014619
             - powf((float)((float)(v247 * 18.852) + 0.83594) / (float)((float)(v247 * 18.688) + 1.0), 78.844);
      }
      if (v287.f32[1] >= 0.0)
      {
        float v252 = powf(v287.f32[1] * 0.0001, 0.1593);
        float v251 = powf((float)((float)(v252 * 18.852) + 0.83594) / (float)((float)(v252 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v250 = powf(v287.f32[1] * -0.0001, 0.1593);
        float v251 = 0.0000014619
             - powf((float)((float)(v250 * 18.852) + 0.83594) / (float)((float)(v250 * 18.688) + 1.0), 78.844);
      }
      float v253 = dovi_applyTonemapCurveS_NoTrim(a2, a3, v240);
      float v254 = v248 - v251;
      float v255 = v253 - v251;
      goto LABEL_266;
    }
    goto LABEL_267;
  }
  float v241 = *(float *)(a1 + 28);
  float v242 = GetConfig(v104);
  if (v242)
  {
    float v243 = GetConfig((HDRConfig *)v242);
    float v244 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v243, 0x6Fu, 0);
    if (v244 >= 100.0) {
      goto LABEL_264;
    }
  }
  else
  {
    float v244 = 0.0;
  }
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v256 = logInstanceID;
    }
    else {
      uint64_t v256 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v289 = WORD1(v256);
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"overrideHLGOOTFMixingStartTdivNits >= 100.0f\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/dovi_display_management_host.mm\" at line 690\n", buf, 0xCu);
    }
    prevLogInstanceID = v256;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"overrideHLGOOTFMixingStartTdivNits >= 100.0f\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/dovi_display_management_host.mm\" at line 690\n", buf, 2u);
  }
LABEL_264:
  if (v287.f32[1] > v244)
  {
    float v254 = v241 - v287.f32[1];
    float v255 = v244 - v287.f32[1];
LABEL_266:
    float v237 = fmaxf(fminf(v254 / v255, 1.0), 0.0);
  }
LABEL_267:
  *(float *)(a3 + 116) = v237;
  *(_DWORD *)(a3 + 112) = *(_DWORD *)(a1 + 100);
}

float dovi_applyTonemapCurveS_NoTrim(uint64_t a1, uint64_t a2, float result)
{
  if (*(unsigned char *)a2)
  {
    float v5 = powf(result, *(float *)(a2 + 88));
    float v6 = fmax((float)((float)(*(float *)(a2 + 92) + (float)(*(float *)(a2 + 96) * v5))/ (float)((float)(*(float *)(a2 + 100) * v5) + 1.0)), 0.0);
    double result = powf(v6, 0.33333);
    int v7 = *(_DWORD *)(a2 + 136);
    if (*(unsigned char *)(a1 + 481))
    {
      if (v7 == 1)
      {
        float v17 = *(float *)(a2 + 132);
        if (v17 != 1.0) {
          return *(float *)(a2 + 128) + (float)((float)(result - *(float *)(a2 + 128)) * v17);
        }
      }
      else if (!v7)
      {
        float v9 = *(float *)(a2 + 120);
        float v8 = *(float *)(a2 + 124);
        return applyLinearStretchInPQ(result, v8, v9);
      }
    }
    else if (v7 == 1)
    {
      float v18 = *(float *)(a2 + 132);
      if (v18 != 1.0) {
        return result * v18;
      }
    }
    else if (!v7)
    {
      float v10 = *(float *)(a2 + 124);
      if (v10 != 1.0)
      {
        BOOL v11 = result < 0.00000073096;
        if (result < 0.00000073096) {
          double result = -(float)(result + -0.0000014619);
        }
        float v12 = flt_2222D1868[v11];
        float v13 = powf(result, 0.012683);
        float v14 = fmax((float)((float)(v13 + -0.83594) / (float)((float)(v13 * -18.688) + 18.852)), 0.0);
        float v15 = (float)(v12 * powf(v14, 6.2774)) * v10;
        if (v15 >= 0.0)
        {
          float v19 = powf(v15 * 0.0001, 0.1593);
          float v20 = (float)((float)(v19 * 18.852) + 0.83594) / (float)((float)(v19 * 18.688) + 1.0);
          return powf(v20, 78.844);
        }
        else
        {
          float v16 = powf(v15 * -0.0001, 0.1593);
          return 0.0000014619
               - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
        }
      }
    }
  }
  return result;
}

float dovi_applyTonemapCurveS(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  id v7 = a3;
  float v9 = v7;
  if (!*(unsigned char *)a2) {
    goto LABEL_24;
  }
  if (*(_DWORD *)(a1 + 468) == 4)
  {
    *(float *)&double v8 = a4;
    [v7 toneMapI:v8];
  }
  else
  {
    BOOL v11 = hasTrim((float *)a1);
    float v12 = powf(a4, *(float *)(a2 + 88));
    float v13 = fmax((float)((float)(*(float *)(a2 + 92) + (float)(*(float *)(a2 + 96) * v12))/ (float)((float)(*(float *)(a2 + 100) * v12) + 1.0)), 0.0);
    float v14 = powf(v13, 0.33333);
    a4 = v14;
    if (!v11) {
      goto LABEL_7;
    }
    float v15 = fmax((float)(*(float *)(a1 + 240) + (float)(v14 * *(float *)(a1 + 236))), 0.0);
    float v10 = powf(v15, *(float *)(a1 + 244));
  }
  a4 = v10;
LABEL_7:
  int v16 = *(_DWORD *)(a2 + 136);
  if (*(unsigned char *)(a1 + 481))
  {
    if (v16 == 1)
    {
      float v25 = *(float *)(a2 + 132);
      if (v25 != 1.0) {
        a4 = *(float *)(a2 + 128) + (float)((float)(a4 - *(float *)(a2 + 128)) * v25);
      }
    }
    else if (!v16)
    {
      float v17 = applyLinearStretchInPQ(a4, *(float *)(a2 + 124), *(float *)(a2 + 120));
LABEL_11:
      a4 = v17;
    }
  }
  else if (v16 == 1)
  {
    float v26 = *(float *)(a2 + 132);
    if (v26 != 1.0) {
      a4 = a4 * v26;
    }
  }
  else if (!v16)
  {
    float v18 = *(float *)(a2 + 124);
    if (v18 != 1.0)
    {
      float v19 = -(float)(a4 + -0.0000014619);
      if (a4 >= 0.00000073096) {
        float v19 = a4;
      }
      float v20 = flt_2222D1868[a4 < 0.00000073096];
      float v21 = powf(v19, 0.012683);
      float v22 = fmax((float)((float)(v21 + -0.83594) / (float)((float)(v21 * -18.688) + 18.852)), 0.0);
      float v23 = (float)(v20 * powf(v22, 6.2774)) * v18;
      if (v23 < 0.0)
      {
        float v24 = powf(v23 * -0.0001, 0.1593);
        a4 = 0.0000014619
           - powf((float)((float)(v24 * 18.852) + 0.83594) / (float)((float)(v24 * 18.688) + 1.0), 78.844);
        goto LABEL_24;
      }
      float v28 = powf(v23 * 0.0001, 0.1593);
      float v17 = powf((float)((float)(v28 * 18.852) + 0.83594) / (float)((float)(v28 * 18.688) + 1.0), 78.844);
      goto LABEL_11;
    }
  }
LABEL_24:

  return a4;
}

void sub_2222ACB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float dovi84_applyTonemapCurveS_C(float *a1, uint64_t a2, int a3, void *a4, float a5)
{
  id v9 = a4;
  float v10 = *(float *)(a2 + 20);
  float v11 = *(float *)(a2 + 112);
  float v12 = *(float *)(a2 + 116);
  BOOL v13 = hasTrim(a1);
  float v14 = a5;
  if (a3)
  {
    float v15 = -(float)(a5 + -0.0000014619);
    if (a5 >= 0.00000073096) {
      float v15 = a5;
    }
    float v16 = flt_2222D1868[a5 < 0.00000073096];
    float v17 = powf(v15, 0.012683);
    float v18 = fmax((float)((float)(v17 + -0.83594) / (float)((float)(v17 * -18.688) + 18.852)), 0.0);
    float v19 = (float)(v16 * powf(v18, 6.2774)) / 1000.0;
    float v20 = powf(fabsf(v19), *(float *)(a2 + 108));
    if (v19 < 0.0) {
      float v20 = -v20;
    }
    float v21 = *(float *)(a2 + 4) + (float)(v20 * (float)(1000.0 - *(float *)(a2 + 4)));
    if (v21 >= 0.0)
    {
      float v23 = powf(v21 * 0.0001, 0.1593);
      float v14 = powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v22 = powf(v21 * -0.0001, 0.1593);
      float v14 = 0.0000014619 - powf((float)((float)(v22 * 18.852) + 0.83594) / (float)((float)(v22 * 18.688) + 1.0), 78.844);
    }
  }
  float v24 = applySceneLuxAdaptationS_C(a2 + 144, v14);
  float v25 = dovi_applyTonemapCurveS((uint64_t)a1, a2, v9, v24);
  if (*(unsigned char *)a2 && !v13)
  {
    long double v26 = (float)(v11 / 1000.0);
    if (v11 <= 400.0 || v11 >= 2000.0)
    {
      long double v28 = log2(v26);
      double v27 = pow(1.11099994, v28) * 1.20000005 + -1.0;
    }
    else
    {
      double v27 = log10(v26) * 0.419999987 + 1.20000005 + -1.0;
    }
    float v29 = v27;
    float v30 = v29 + 1.0;
    float v31 = -(float)(a5 + -0.0000014619);
    if (a5 >= 0.00000073096) {
      float v31 = a5;
    }
    float v32 = flt_2222D1868[a5 < 0.00000073096];
    float v33 = powf(v31, 0.012683);
    float v34 = fmax((float)((float)(v33 + -0.83594) / (float)((float)(v33 * -18.688) + 18.852)), 0.0);
    float v35 = (float)(v32 * powf(v34, 6.2774)) / 1000.0;
    if ((a3 & 1) == 0)
    {
      float v36 = powf(fabsf(v35), 1.0 / *(float *)(a2 + 108));
      if (v35 < 0.0) {
        float v35 = -v36;
      }
      else {
        float v35 = v36;
      }
    }
    float v37 = powf(fabsf(v35), v30);
    if (v35 < 0.0) {
      float v37 = -v37;
    }
    float v38 = v10 * v37;
    if (v38 >= 0.0)
    {
      float v41 = powf(v38 * 0.0001, 0.1593);
      float v40 = powf((float)((float)(v41 * 18.852) + 0.83594) / (float)((float)(v41 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v39 = powf(v38 * -0.0001, 0.1593);
      float v40 = 0.0000014619 - powf((float)((float)(v39 * 18.852) + 0.83594) / (float)((float)(v39 * 18.688) + 1.0), 78.844);
    }
    float v25 = (float)((float)(1.0 - v12) * v40) + (float)(v12 * v25);
  }

  return v25;
}

void sub_2222ACF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float dovi84_applyTonemapCurveS_L(float *a1, uint64_t a2, int a3, int a4, char a5, void *a6, float a7)
{
  id v13 = a6;
  float v14 = *(float *)(a2 + 20);
  float v16 = *(float *)(a2 + 112);
  float v15 = *(float *)(a2 + 116);
  BOOL v17 = hasTrim(a1);
  if (a4)
  {
    float v18 = powf(fabsf(a7), *(float *)(a2 + 108));
    if (a7 < 0.0) {
      float v19 = -v18;
    }
    else {
      float v19 = v18;
    }
  }
  else
  {
    BOOL v20 = v17;
    float v21 = a7;
    if (a3)
    {
      float v21 = powf(fabsf(a7), *(float *)(a2 + 108));
      if (a7 < 0.0) {
        float v21 = -v21;
      }
    }
    float v22 = *(float *)(a2 + 4) + (float)(v21 * (float)(1000.0 - *(float *)(a2 + 4)));
    if (v22 >= 0.0)
    {
      float v25 = powf(v22 * 0.0001, 0.1593);
      float v24 = powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v23 = powf(v22 * -0.0001, 0.1593);
      float v24 = 0.0000014619 - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
    }
    float v19 = dovi_applyTonemapCurveS((uint64_t)a1, a2, v13, v24);
    if (*(unsigned char *)a2 && !v20 && (a5 & 1) == 0)
    {
      long double v26 = (float)(v16 / 1000.0);
      if (v16 <= 400.0 || v16 >= 2000.0)
      {
        long double v28 = log2(v26);
        double v27 = pow(1.11099994, v28) * 1.20000005 + -1.0;
      }
      else
      {
        double v27 = log10(v26) * 0.419999987 + 1.20000005 + -1.0;
      }
      float v29 = v27;
      float v30 = powf(fabsf(a7), v29 + 1.0);
      if (a7 < 0.0) {
        float v30 = -v30;
      }
      float v31 = v14 * v30;
      if (v31 >= 0.0)
      {
        float v34 = powf(v31 * 0.0001, 0.1593);
        float v33 = powf((float)((float)(v34 * 18.852) + 0.83594) / (float)((float)(v34 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v32 = powf(v31 * -0.0001, 0.1593);
        float v33 = 0.0000014619
            - powf((float)((float)(v32 * 18.852) + 0.83594) / (float)((float)(v32 * 18.688) + 1.0), 78.844);
      }
      float v19 = (float)((float)(1.0 - v15) * v33) + (float)(v15 * v19);
    }
  }

  return v19;
}

void sub_2222AD24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void dovi_generateEdrAdaptationDataS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v92 = a5;
  int v9 = *(_DWORD *)(a1 + 92);
  float v10 = *(float *)(a1 + 96);
  float v11 = *(float *)(a2 + 8);
  if (v11 >= 0.0)
  {
    float v14 = powf(v11 * 0.0001, 0.1593);
    float v13 = powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v12 = powf(v11 * -0.0001, 0.1593);
    float v13 = 0.0000014619 - powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
  }
  float v15 = *(float *)(a1 + 116);
  if (v15 >= 0.0)
  {
    float v18 = powf(v15 * 0.0001, 0.1593);
    float v17 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v16 = powf(v15 * -0.0001, 0.1593);
    float v17 = 0.0000014619 - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
  }
  float v19 = *(float *)(a2 + 64);
  float v20 = *(float *)(a2 + 72);
  float v21 = *(float *)(a2 + 80);
  float v22 = *(float *)(a2 + 16);
  if (v22 >= 0.0)
  {
    float v25 = powf(v22 * 0.0001, 0.1593);
    float v24 = powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v23 = powf(v22 * -0.0001, 0.1593);
    float v24 = 0.0000014619 - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
  }
  BOOL v26 = v17 < v21 && (*(_DWORD *)(a2 + 136) & 0xFFFFFFFE) == 2;
  *(_DWORD *)a4 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a4 + 4) = *(_DWORD *)(a1 + 24);
  *(float *)(a4 + 8) = v13;
  *(float *)(a4 + 12) = v20;
  *(float *)(a4 + 16) = v24;
  if (*(unsigned char *)(a3 + 481))
  {
    if (v26) {
      float v27 = v21;
    }
    else {
      float v27 = v17;
    }
    *(float *)(a4 + 16) = v27;
  }
  if (v10 >= 0.0)
  {
    float v30 = powf(v10 * 0.0001, 0.1593);
    float v29 = powf((float)((float)(v30 * 18.852) + 0.83594) / (float)((float)(v30 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v28 = powf(v10 * -0.0001, 0.1593);
    float v29 = 0.0000014619 - powf((float)((float)(v28 * 18.852) + 0.83594) / (float)((float)(v28 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 20) = v29;
  *(_DWORD *)(a4 + 24) = v9;
  *(float *)(a4 + 28) = dovi_applyTonemapCurveS(a3, a2, v92, v29);
  uint64_t v31 = 116;
  if (v26) {
    uint64_t v31 = 60;
  }
  float v32 = *(float *)(a1 + v31) / *(float *)(a1 + 112);
  if (v32 >= 0.0)
  {
    float v35 = powf(v32 * 0.0001, 0.1593);
    float v34 = powf((float)((float)(v35 * 18.852) + 0.83594) / (float)((float)(v35 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v33 = powf(v32 * -0.0001, 0.1593);
    float v34 = 0.0000014619 - powf((float)((float)(v33 * 18.852) + 0.83594) / (float)((float)(v33 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 32) = v34;
  *(_OWORD *)(a4 + 72) = xmmword_2222D40F0;
  HIDWORD(v36) = 1056964608;
  *(void *)(a4 + 88) = 0x3F0000003F800000;
  *(_DWORD *)(a4 + 96) = 1065353216;
  if ((*(_DWORD *)(a3 + 468) & 0xFFFFFFFE) == 2)
  {
    if (hasTrim((float *)a3))
    {
      float v37 = *(float *)(a3 + 236);
      float v38 = *(float *)(a3 + 240);
      float v39 = fmax((float)(v38 + (float)(*(float *)(a4 + 16) * v37)), 0.0);
      float v40 = *(float *)(a3 + 244);
      *(float *)(a4 + 16) = powf(v39, v40);
      float v41 = fmax((float)(v38 + (float)(*(float *)(a4 + 12) * v37)), 0.0);
      *(float *)(a4 + 12) = powf(v41, v40);
      float v42 = fmax((float)(v38 + (float)(v34 * v37)), 0.0);
      float v34 = powf(v42, v40);
      *(float *)(a4 + 32) = v34;
    }
  }
  else
  {
    *(float *)&double v36 = v21;
    [v92 applyL8Trim:v36];
    if (*(float *)&v43 < v21) {
      *(float *)&double v43 = v21;
    }
    *(_DWORD *)(a4 + 16) = LODWORD(v43);
    LODWORD(v43) = *(_DWORD *)(a4 + 12);
    [v92 applyL8Trim:v43];
    *(_DWORD *)(a4 + 12) = v44;
    float v34 = *(float *)(a4 + 32);
  }
  if (*(unsigned char *)(a3 + 481)) {
    float v45 = v24;
  }
  else {
    float v45 = v21;
  }
  float v46 = fminf((float)((float)((float)(v19 * v34) / *(float *)(a4 + 20)) - v20) / (float)(v45 - v20), 1.0);
  *(float *)(a4 + 100) = v20;
  *(float *)(a4 + 104) = v46;
  float v47 = *(float *)(a1 + 68);
  if (v47 >= 0.0)
  {
    float v50 = powf(v47 * 0.0001, 0.1593);
    float v49 = powf((float)((float)(v50 * 18.852) + 0.83594) / (float)((float)(v50 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v48 = powf(v47 * -0.0001, 0.1593);
    float v49 = 0.0000014619 - powf((float)((float)(v48 * 18.852) + 0.83594) / (float)((float)(v48 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 108) = v49;
  float v51 = *(float *)(a1 + 80);
  if (v51 >= 0.0)
  {
    float v54 = powf(v51 * 0.0001, 0.1593);
    float v53 = powf((float)((float)(v54 * 18.852) + 0.83594) / (float)((float)(v54 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v52 = powf(v51 * -0.0001, 0.1593);
    float v53 = 0.0000014619 - powf((float)((float)(v52 * 18.852) + 0.83594) / (float)((float)(v52 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 112) = v53;
  float v55 = *(float *)(a1 + 72);
  if (v55 >= 0.0)
  {
    float v58 = powf(v55 * 0.0001, 0.1593);
    float v57 = powf((float)((float)(v58 * 18.852) + 0.83594) / (float)((float)(v58 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v56 = powf(v55 * -0.0001, 0.1593);
    float v57 = 0.0000014619 - powf((float)((float)(v56 * 18.852) + 0.83594) / (float)((float)(v56 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 116) = v57;
  float v59 = v92;
  if (*(unsigned char *)(a1 + 188))
  {
    *(float *)(a4 + 12) = dovi_applyTonemapCurveS(a3, a2, v92, v49);
    float v53 = *(float *)(a4 + 112);
    float v59 = v92;
  }
  *(float *)(a4 + 120) = dovi_applyTonemapCurveS(a3, a2, v59, v53);
  float v60 = dovi_applyTonemapCurveS(a3, a2, v92, *(float *)(a4 + 116));
  int v61 = *(_DWORD *)(a1 + 36);
  *(float *)(a4 + 124) = v60;
  *(_DWORD *)(a4 + 128) = v61;
  *(unsigned char *)(a4 + 132) = *(unsigned char *)(a1 + 188);
  *(_OWORD *)(a4 + 136) = xmmword_2222D4100;
  *(_DWORD *)(a4 + 152) = 1036831949;
  *(_WORD *)(a4 + 156) = 257;
  *(unsigned char *)(a4 + 158) = *(_DWORD *)a4 != 17;
  *(unsigned char *)(a4 + 159) = 1;
  uint64_t Config = (uint64_t)GetConfig(v62);
  if (Config)
  {
    uint64_t Config = (uint64_t)GetConfig((HDRConfig *)Config);
    if (*(_DWORD *)(Config + 12684))
    {
      if ((*(unsigned char *)(Config + 12680) & 0x80) != 0)
      {
        uint64_t Config = (uint64_t)GetConfig((HDRConfig *)Config);
        if (Config)
        {
          float v64 = GetConfig((HDRConfig *)Config);
          uint64_t Config = HDRConfig::GetConfigEntryValue((uint64_t)v64, 0x90u, 0);
          int v65 = *(_DWORD *)Config;
        }
        else
        {
          int v65 = 0;
        }
        *(_DWORD *)(a4 + 136) = v65;
      }
    }
  }
  uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)Config);
  if (ConfigEntryValue)
  {
    uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
    if (*(_DWORD *)(ConfigEntryValue + 12948))
    {
      if ((*(unsigned char *)(ConfigEntryValue + 12944) & 0x80) != 0)
      {
        uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
        if (ConfigEntryValue)
        {
          float v67 = GetConfig((HDRConfig *)ConfigEntryValue);
          uint64_t ConfigEntryValue = HDRConfig::GetConfigEntryValue((uint64_t)v67, 0x93u, 0);
          int v68 = *(_DWORD *)ConfigEntryValue;
        }
        else
        {
          int v68 = 0;
        }
        *(_DWORD *)(a4 + 140) = v68;
      }
    }
  }
  uint64_t v69 = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
  if (v69)
  {
    uint64_t v69 = (uint64_t)GetConfig((HDRConfig *)v69);
    if (*(_DWORD *)(v69 + 13036))
    {
      if ((*(unsigned char *)(v69 + 13032) & 0x80) != 0)
      {
        uint64_t v69 = (uint64_t)GetConfig((HDRConfig *)v69);
        if (v69)
        {
          float v70 = GetConfig((HDRConfig *)v69);
          uint64_t v69 = HDRConfig::GetConfigEntryValue((uint64_t)v70, 0x94u, 0);
          int v71 = *(_DWORD *)v69;
        }
        else
        {
          int v71 = 0;
        }
        *(_DWORD *)(a4 + 144) = v71;
      }
    }
  }
  uint64_t v72 = (uint64_t)GetConfig((HDRConfig *)v69);
  if (v72)
  {
    uint64_t v72 = (uint64_t)GetConfig((HDRConfig *)v72);
    if (*(_DWORD *)(v72 + 13124))
    {
      if ((*(unsigned char *)(v72 + 13120) & 0x80) != 0)
      {
        uint64_t v72 = (uint64_t)GetConfig((HDRConfig *)v72);
        if (v72)
        {
          float v73 = GetConfig((HDRConfig *)v72);
          uint64_t v72 = HDRConfig::GetConfigEntryValue((uint64_t)v73, 0x95u, 0);
          int v74 = *(_DWORD *)v72;
        }
        else
        {
          int v74 = 0;
        }
        *(_DWORD *)(a4 + 148) = v74;
      }
    }
  }
  uint64_t v75 = (uint64_t)GetConfig((HDRConfig *)v72);
  if (v75)
  {
    uint64_t v75 = (uint64_t)GetConfig((HDRConfig *)v75);
    if (*(_DWORD *)(v75 + 13212))
    {
      if ((*(unsigned char *)(v75 + 13208) & 0x80) != 0)
      {
        uint64_t v75 = (uint64_t)GetConfig((HDRConfig *)v75);
        if (v75)
        {
          double v76 = GetConfig((HDRConfig *)v75);
          uint64_t v75 = HDRConfig::GetConfigEntryValue((uint64_t)v76, 0x96u, 0);
          int v77 = *(_DWORD *)v75;
        }
        else
        {
          int v77 = 0;
        }
        *(_DWORD *)(a4 + 152) = v77;
      }
    }
  }
  uint64_t v78 = (uint64_t)GetConfig((HDRConfig *)v75);
  if (v78)
  {
    uint64_t v78 = (uint64_t)GetConfig((HDRConfig *)v78);
    if (*(_DWORD *)(v78 + 13300))
    {
      if ((*(unsigned char *)(v78 + 13296) & 0x80) != 0)
      {
        uint64_t v78 = (uint64_t)GetConfig((HDRConfig *)v78);
        if (v78)
        {
          double v79 = GetConfig((HDRConfig *)v78);
          uint64_t v78 = HDRConfig::GetConfigEntryValue((uint64_t)v79, 0x97u, 0);
          BOOL v80 = *(unsigned char *)v78 != 0;
        }
        else
        {
          BOOL v80 = 0;
        }
        *(unsigned char *)(a4 + 156) = v80;
      }
    }
  }
  uint64_t v81 = (uint64_t)GetConfig((HDRConfig *)v78);
  if (v81)
  {
    uint64_t v81 = (uint64_t)GetConfig((HDRConfig *)v81);
    if (*(_DWORD *)(v81 + 13388))
    {
      if ((*(unsigned char *)(v81 + 13384) & 0x80) != 0)
      {
        uint64_t v81 = (uint64_t)GetConfig((HDRConfig *)v81);
        if (v81)
        {
          float v82 = GetConfig((HDRConfig *)v81);
          uint64_t v81 = HDRConfig::GetConfigEntryValue((uint64_t)v82, 0x98u, 0);
          BOOL v83 = *(unsigned char *)v81 != 0;
        }
        else
        {
          BOOL v83 = 0;
        }
        *(unsigned char *)(a4 + 157) = v83;
      }
    }
  }
  uint64_t v84 = (uint64_t)GetConfig((HDRConfig *)v81);
  if (v84)
  {
    uint64_t v84 = (uint64_t)GetConfig((HDRConfig *)v84);
    if (*(_DWORD *)(v84 + 13476))
    {
      if ((*(unsigned char *)(v84 + 13472) & 0x80) != 0)
      {
        uint64_t v84 = (uint64_t)GetConfig((HDRConfig *)v84);
        if (v84)
        {
          float v85 = GetConfig((HDRConfig *)v84);
          uint64_t v84 = HDRConfig::GetConfigEntryValue((uint64_t)v85, 0x99u, 0);
          BOOL v86 = *(unsigned char *)v84 != 0;
        }
        else
        {
          BOOL v86 = 0;
        }
        *(unsigned char *)(a4 + 158) = v86;
      }
    }
  }
  float v87 = GetConfig((HDRConfig *)v84);
  if (v87)
  {
    float v88 = GetConfig((HDRConfig *)v87);
    if (*((_DWORD *)v88 + 3391))
    {
      if ((v88[6780] & 0x80) != 0)
      {
        float v89 = GetConfig((HDRConfig *)v88);
        if (v89)
        {
          float v90 = GetConfig((HDRConfig *)v89);
          BOOL v91 = *(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v90, 0x9Au, 0) != 0;
        }
        else
        {
          BOOL v91 = 0;
        }
        *(unsigned char *)(a4 + 159) = v91;
      }
    }
  }
}

void sub_2222ADCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float applyL2Trim(float *a1, float a2)
{
  float v2 = fmax((float)(a1[60] + (float)(a2 * a1[59])), 0.0);
  return powf(v2, a1[61]);
}

void dovi84_generateEdrAdaptationDataS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v93 = a5;
  int v9 = *(_DWORD *)(a1 + 92);
  float v10 = *(float *)(a1 + 96);
  float v11 = *(float *)(a2 + 8);
  if (v11 >= 0.0)
  {
    float v14 = powf(v11 * 0.0001, 0.1593);
    float v13 = powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v12 = powf(v11 * -0.0001, 0.1593);
    float v13 = 0.0000014619 - powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
  }
  float v15 = *(float *)(a1 + 116);
  if (v15 >= 0.0)
  {
    float v18 = powf(v15 * 0.0001, 0.1593);
    float v17 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v16 = powf(v15 * -0.0001, 0.1593);
    float v17 = 0.0000014619 - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
  }
  float v19 = *(float *)(a2 + 64);
  float v20 = *(float *)(a2 + 72);
  float v21 = *(float *)(a2 + 80);
  float v22 = *(float *)(a2 + 16);
  if (v22 >= 0.0)
  {
    float v25 = powf(v22 * 0.0001, 0.1593);
    float v24 = powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v23 = powf(v22 * -0.0001, 0.1593);
    float v24 = 0.0000014619 - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
  }
  BOOL v26 = v17 < v21 && (*(_DWORD *)(a2 + 136) & 0xFFFFFFFE) == 2;
  *(_DWORD *)a4 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a4 + 4) = *(_DWORD *)(a1 + 24);
  *(float *)(a4 + 8) = v13;
  *(float *)(a4 + 12) = v20;
  *(float *)(a4 + 16) = v24;
  if (*(unsigned char *)(a3 + 481))
  {
    if (v26) {
      float v27 = v21;
    }
    else {
      float v27 = v17;
    }
    *(float *)(a4 + 16) = v27;
  }
  if (v10 >= 0.0)
  {
    float v30 = powf(v10 * 0.0001, 0.1593);
    float v29 = powf((float)((float)(v30 * 18.852) + 0.83594) / (float)((float)(v30 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v28 = powf(v10 * -0.0001, 0.1593);
    float v29 = 0.0000014619 - powf((float)((float)(v28 * 18.852) + 0.83594) / (float)((float)(v28 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 20) = v29;
  *(_DWORD *)(a4 + 24) = v9;
  *(float *)(a4 + 28) = dovi_applyTonemapCurveS(a3, a2, v93, v29);
  uint64_t v31 = 116;
  if (v26) {
    uint64_t v31 = 60;
  }
  float v32 = *(float *)(a1 + v31) / *(float *)(a1 + 112);
  if (v32 >= 0.0)
  {
    float v35 = powf(v32 * 0.0001, 0.1593);
    float v34 = powf((float)((float)(v35 * 18.852) + 0.83594) / (float)((float)(v35 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v33 = powf(v32 * -0.0001, 0.1593);
    float v34 = 0.0000014619 - powf((float)((float)(v33 * 18.852) + 0.83594) / (float)((float)(v33 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 32) = v34;
  *(_OWORD *)(a4 + 72) = xmmword_2222D40F0;
  HIDWORD(v36) = 1056964608;
  *(void *)(a4 + 88) = 0x3F0000003F800000;
  *(_DWORD *)(a4 + 96) = 1065353216;
  if ((*(_DWORD *)(a3 + 468) & 0xFFFFFFFE) == 2)
  {
    if (!hasTrim((float *)a3)) {
      goto LABEL_32;
    }
    float v37 = *(float *)(a3 + 236);
    float v38 = *(float *)(a3 + 240);
    float v39 = fmax((float)(v38 + (float)(*(float *)(a4 + 16) * v37)), 0.0);
    float v40 = *(float *)(a3 + 244);
    *(float *)(a4 + 16) = powf(v39, v40);
    float v41 = fmax((float)(v38 + (float)(*(float *)(a4 + 12) * v37)), 0.0);
    *(float *)(a4 + 12) = powf(v41, v40);
    float v42 = fmax((float)(v38 + (float)(v34 * v37)), 0.0);
    float v43 = powf(v42, v40);
  }
  else
  {
    LODWORD(v36) = *(_DWORD *)(a4 + 16);
    [v93 applyL8Trim:v36];
    *(_DWORD *)(a4 + 16) = v44;
    LODWORD(v45) = *(_DWORD *)(a4 + 12);
    [v93 applyL8Trim:v45];
    *(_DWORD *)(a4 + 12) = LODWORD(v46);
    float v34 = *(float *)(a4 + 32);
    if (*(unsigned char *)(a3 + 492)) {
      goto LABEL_32;
    }
    LODWORD(v46) = *(_DWORD *)(a4 + 32);
    [v93 applyL8Trim:v46];
  }
  float v34 = v43;
  *(float *)(a4 + 32) = v43;
LABEL_32:
  if (*(unsigned char *)(a3 + 481)) {
    float v47 = v24;
  }
  else {
    float v47 = v21;
  }
  float v48 = fminf((float)((float)((float)(v19 * v34) / *(float *)(a4 + 20)) - v20) / (float)(v47 - v20), 1.0);
  *(float *)(a4 + 100) = v20;
  *(float *)(a4 + 104) = v48;
  float v49 = *(float *)(a1 + 68);
  if (v49 >= 0.0)
  {
    float v52 = powf(v49 * 0.0001, 0.1593);
    float v51 = powf((float)((float)(v52 * 18.852) + 0.83594) / (float)((float)(v52 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v50 = powf(v49 * -0.0001, 0.1593);
    float v51 = 0.0000014619 - powf((float)((float)(v50 * 18.852) + 0.83594) / (float)((float)(v50 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 108) = v51;
  float v53 = *(float *)(a1 + 80);
  if (v53 >= 0.0)
  {
    float v56 = powf(v53 * 0.0001, 0.1593);
    float v55 = powf((float)((float)(v56 * 18.852) + 0.83594) / (float)((float)(v56 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v54 = powf(v53 * -0.0001, 0.1593);
    float v55 = 0.0000014619 - powf((float)((float)(v54 * 18.852) + 0.83594) / (float)((float)(v54 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 112) = v55;
  float v57 = *(float *)(a1 + 72);
  if (v57 >= 0.0)
  {
    float v60 = powf(v57 * 0.0001, 0.1593);
    float v59 = powf((float)((float)(v60 * 18.852) + 0.83594) / (float)((float)(v60 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v58 = powf(v57 * -0.0001, 0.1593);
    float v59 = 0.0000014619 - powf((float)((float)(v58 * 18.852) + 0.83594) / (float)((float)(v58 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 116) = v59;
  if (*(unsigned char *)(a1 + 188))
  {
    *(float *)(a4 + 12) = dovi_applyTonemapCurveS(a3, a2, v93, v51);
    float v55 = *(float *)(a4 + 112);
  }
  *(float *)(a4 + 120) = dovi_applyTonemapCurveS(a3, a2, v93, v55);
  float v62 = dovi_applyTonemapCurveS(a3, a2, v93, *(float *)(a4 + 116));
  int v63 = *(_DWORD *)(a1 + 36);
  *(float *)(a4 + 124) = v62;
  *(_DWORD *)(a4 + 128) = v63;
  *(unsigned char *)(a4 + 132) = *(unsigned char *)(a1 + 188);
  *(_OWORD *)(a4 + 136) = xmmword_2222D4100;
  *(_DWORD *)(a4 + 152) = 1036831949;
  *(_WORD *)(a4 + 156) = 257;
  *(unsigned char *)(a4 + 158) = *(_DWORD *)a4 != 17;
  *(unsigned char *)(a4 + 159) = 1;
  if (*(unsigned char *)(a3 + 492))
  {
    *(unsigned char *)(a4 + 156) = 0;
    *(_DWORD *)(a4 + 136) = 1046898278;
    *(unsigned char *)(a4 + 158) = 1;
  }
  uint64_t Config = (uint64_t)GetConfig(v61);
  if (Config)
  {
    uint64_t Config = (uint64_t)GetConfig((HDRConfig *)Config);
    if (*(_DWORD *)(Config + 12684))
    {
      if ((*(unsigned char *)(Config + 12680) & 0x80) != 0)
      {
        uint64_t Config = (uint64_t)GetConfig((HDRConfig *)Config);
        if (Config)
        {
          int v65 = GetConfig((HDRConfig *)Config);
          uint64_t Config = HDRConfig::GetConfigEntryValue((uint64_t)v65, 0x90u, 0);
          int v66 = *(_DWORD *)Config;
        }
        else
        {
          int v66 = 0;
        }
        *(_DWORD *)(a4 + 136) = v66;
      }
    }
  }
  uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)Config);
  if (ConfigEntryValue)
  {
    uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
    if (*(_DWORD *)(ConfigEntryValue + 12948))
    {
      if ((*(unsigned char *)(ConfigEntryValue + 12944) & 0x80) != 0)
      {
        uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
        if (ConfigEntryValue)
        {
          int v68 = GetConfig((HDRConfig *)ConfigEntryValue);
          uint64_t ConfigEntryValue = HDRConfig::GetConfigEntryValue((uint64_t)v68, 0x93u, 0);
          int v69 = *(_DWORD *)ConfigEntryValue;
        }
        else
        {
          int v69 = 0;
        }
        *(_DWORD *)(a4 + 140) = v69;
      }
    }
  }
  uint64_t v70 = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
  if (v70)
  {
    uint64_t v70 = (uint64_t)GetConfig((HDRConfig *)v70);
    if (*(_DWORD *)(v70 + 13036))
    {
      if ((*(unsigned char *)(v70 + 13032) & 0x80) != 0)
      {
        uint64_t v70 = (uint64_t)GetConfig((HDRConfig *)v70);
        if (v70)
        {
          int v71 = GetConfig((HDRConfig *)v70);
          uint64_t v70 = HDRConfig::GetConfigEntryValue((uint64_t)v71, 0x94u, 0);
          int v72 = *(_DWORD *)v70;
        }
        else
        {
          int v72 = 0;
        }
        *(_DWORD *)(a4 + 144) = v72;
      }
    }
  }
  uint64_t v73 = (uint64_t)GetConfig((HDRConfig *)v70);
  if (v73)
  {
    uint64_t v73 = (uint64_t)GetConfig((HDRConfig *)v73);
    if (*(_DWORD *)(v73 + 13124))
    {
      if ((*(unsigned char *)(v73 + 13120) & 0x80) != 0)
      {
        uint64_t v73 = (uint64_t)GetConfig((HDRConfig *)v73);
        if (v73)
        {
          int v74 = GetConfig((HDRConfig *)v73);
          uint64_t v73 = HDRConfig::GetConfigEntryValue((uint64_t)v74, 0x95u, 0);
          int v75 = *(_DWORD *)v73;
        }
        else
        {
          int v75 = 0;
        }
        *(_DWORD *)(a4 + 148) = v75;
      }
    }
  }
  uint64_t v76 = (uint64_t)GetConfig((HDRConfig *)v73);
  if (v76)
  {
    uint64_t v76 = (uint64_t)GetConfig((HDRConfig *)v76);
    if (*(_DWORD *)(v76 + 13212))
    {
      if ((*(unsigned char *)(v76 + 13208) & 0x80) != 0)
      {
        uint64_t v76 = (uint64_t)GetConfig((HDRConfig *)v76);
        if (v76)
        {
          int v77 = GetConfig((HDRConfig *)v76);
          uint64_t v76 = HDRConfig::GetConfigEntryValue((uint64_t)v77, 0x96u, 0);
          int v78 = *(_DWORD *)v76;
        }
        else
        {
          int v78 = 0;
        }
        *(_DWORD *)(a4 + 152) = v78;
      }
    }
  }
  uint64_t v79 = (uint64_t)GetConfig((HDRConfig *)v76);
  if (v79)
  {
    uint64_t v79 = (uint64_t)GetConfig((HDRConfig *)v79);
    if (*(_DWORD *)(v79 + 13300))
    {
      if ((*(unsigned char *)(v79 + 13296) & 0x80) != 0)
      {
        uint64_t v79 = (uint64_t)GetConfig((HDRConfig *)v79);
        if (v79)
        {
          BOOL v80 = GetConfig((HDRConfig *)v79);
          uint64_t v79 = HDRConfig::GetConfigEntryValue((uint64_t)v80, 0x97u, 0);
          BOOL v81 = *(unsigned char *)v79 != 0;
        }
        else
        {
          BOOL v81 = 0;
        }
        *(unsigned char *)(a4 + 156) = v81;
      }
    }
  }
  uint64_t v82 = (uint64_t)GetConfig((HDRConfig *)v79);
  if (v82)
  {
    uint64_t v82 = (uint64_t)GetConfig((HDRConfig *)v82);
    if (*(_DWORD *)(v82 + 13388))
    {
      if ((*(unsigned char *)(v82 + 13384) & 0x80) != 0)
      {
        uint64_t v82 = (uint64_t)GetConfig((HDRConfig *)v82);
        if (v82)
        {
          BOOL v83 = GetConfig((HDRConfig *)v82);
          uint64_t v82 = HDRConfig::GetConfigEntryValue((uint64_t)v83, 0x98u, 0);
          BOOL v84 = *(unsigned char *)v82 != 0;
        }
        else
        {
          BOOL v84 = 0;
        }
        *(unsigned char *)(a4 + 157) = v84;
      }
    }
  }
  uint64_t v85 = (uint64_t)GetConfig((HDRConfig *)v82);
  if (v85)
  {
    uint64_t v85 = (uint64_t)GetConfig((HDRConfig *)v85);
    if (*(_DWORD *)(v85 + 13476))
    {
      if ((*(unsigned char *)(v85 + 13472) & 0x80) != 0)
      {
        uint64_t v85 = (uint64_t)GetConfig((HDRConfig *)v85);
        if (v85)
        {
          BOOL v86 = GetConfig((HDRConfig *)v85);
          uint64_t v85 = HDRConfig::GetConfigEntryValue((uint64_t)v86, 0x99u, 0);
          BOOL v87 = *(unsigned char *)v85 != 0;
        }
        else
        {
          BOOL v87 = 0;
        }
        *(unsigned char *)(a4 + 158) = v87;
      }
    }
  }
  float v88 = GetConfig((HDRConfig *)v85);
  if (v88)
  {
    float v89 = GetConfig((HDRConfig *)v88);
    if (*((_DWORD *)v89 + 3391))
    {
      if ((v89[6780] & 0x80) != 0)
      {
        float v90 = GetConfig((HDRConfig *)v89);
        if (v90)
        {
          BOOL v91 = GetConfig((HDRConfig *)v90);
          BOOL v92 = *(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v91, 0x9Au, 0) != 0;
        }
        else
        {
          BOOL v92 = 0;
        }
        *(unsigned char *)(a4 + 159) = v92;
      }
    }
  }
}

void sub_2222AE868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void dovi_generateAmbAdaptationDataS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)a6 = *(_DWORD *)(a1 + 32);
  int v12 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a6 + 4) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a6 + 8) = v12;
  int v13 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a6 + 12) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a6 + 16) = v13;
  int v14 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a6 + 20) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a6 + 24) = v14;
  if (*(unsigned char *)(a5 + 481))
  {
    float v15 = *(float *)(a2 + 16);
    *(float *)(a6 + 16) = v15;
    if (v15 >= 0.0)
    {
      float v18 = powf(v15 * 0.0001, 0.1593);
      float v17 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v16 = powf(v15 * -0.0001, 0.1593);
      float v17 = 0.0000014619 - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
    }
    *(float *)(a6 + 24) = v17;
  }
  *(unsigned char *)(a6 + 36) = *(unsigned char *)(a1 + 188);
  float v19 = applyEdrAdaptationCurveS(a4, *(float *)(a3 + 120));
  if (*(unsigned char *)(a5 + 481))
  {
    int v20 = *(_DWORD *)(a2 + 136);
    if (v20 == 3)
    {
      float v21 = *(float *)(a2 + 132);
      if (v21 != 1.0) {
        float v19 = *(float *)(a2 + 128) + (float)((float)(v19 - *(float *)(a2 + 128)) * v21);
      }
    }
    else if (v20 == 2)
    {
      float v19 = applyLinearStretchInPQ(v19, *(float *)(a2 + 124), *(float *)(a2 + 120));
    }
  }
  *(float *)(a6 + 40) = v19;
  float v22 = *(float *)(a1 + 64);
  if (v22 >= *(float *)(a6 + 12)) {
    float v22 = *(float *)(a6 + 12);
  }
  *(float *)(a6 + 32) = v22;
}

void dovi84_generateAmbAdaptationDataS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)a6 = *(_DWORD *)(a1 + 32);
  float v12 = *(float *)(a1 + 36);
  *(_DWORD *)(a6 + 4) = *(_DWORD *)(a1 + 24);
  *(float *)(a6 + 8) = v12;
  float v13 = *(float *)(a2 + 52);
  if (*(_DWORD *)(a1 + 108) == 1)
  {
    if (v13 >= 0.0)
    {
      float v16 = powf(v13 * 0.0001, 0.1593);
      float v15 = powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v14 = powf(v13 * -0.0001, 0.1593);
      float v15 = 0.0000014619 - powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
    }
    float v17 = v15 * 0.25;
    BOOL v18 = v17 < 0.00000073096;
    if (v17 < 0.00000073096) {
      float v17 = -(float)(v17 + -0.0000014619);
    }
    float v19 = flt_2222D1868[v18];
    float v20 = powf(v17, 0.012683);
    float v21 = fmax((float)((float)(v20 + -0.83594) / (float)((float)(v20 * -18.688) + 18.852)), 0.0);
    float v22 = v19 * powf(v21, 6.2774);
    if (v12 < v22) {
      float v22 = v12;
    }
    *(float *)(a6 + 8) = v22;
  }
  *(_DWORD *)(a6 + 12) = *(_DWORD *)(a2 + 40);
  *(float *)(a6 + 16) = v13;
  int v23 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a6 + 20) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a6 + 24) = v23;
  if (*(unsigned char *)(a5 + 481))
  {
    float v24 = *(float *)(a2 + 16);
    *(float *)(a6 + 16) = v24;
    if (v24 >= 0.0)
    {
      float v27 = powf(v24 * 0.0001, 0.1593);
      float v26 = powf((float)((float)(v27 * 18.852) + 0.83594) / (float)((float)(v27 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v25 = powf(v24 * -0.0001, 0.1593);
      float v26 = 0.0000014619 - powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
    }
    *(float *)(a6 + 24) = v26;
  }
  *(unsigned char *)(a6 + 36) = *(unsigned char *)(a1 + 188);
  float v28 = applyEdrAdaptationCurveS(a4, *(float *)(a3 + 120));
  if (*(unsigned char *)(a5 + 481))
  {
    int v29 = *(_DWORD *)(a2 + 136);
    if (v29 == 3)
    {
      float v30 = *(float *)(a2 + 132);
      if (v30 != 1.0) {
        float v28 = *(float *)(a2 + 128) + (float)((float)(v28 - *(float *)(a2 + 128)) * v30);
      }
    }
    else if (v29 == 2)
    {
      float v28 = applyLinearStretchInPQ(v28, *(float *)(a2 + 124), *(float *)(a2 + 120));
    }
  }
  *(float *)(a6 + 40) = v28;
  float v31 = *(float *)(a1 + 64);
  if (v31 >= *(float *)(a6 + 12)) {
    float v31 = *(float *)(a6 + 12);
  }
  *(float *)(a6 + 32) = v31;
}

float dovi84_generateSceneLuxAdaptationDataS(uint64_t a1, uint64_t a2)
{
  uint64_t Config = GetConfig((HDRConfig *)a1);
  if (Config)
  {
    float v5 = GetConfig((HDRConfig *)Config);
    int v6 = *(_DWORD *)HDRConfig::GetConfigEntryValue((uint64_t)v5, 0x9Du, 0);
  }
  else
  {
    int v6 = 0;
  }
  *(_DWORD *)a2 = v6;
  *(int32x2_t *)(a2 + 4) = vrev64_s32(*(int32x2_t *)(a1 + 136));
  float result = *(float *)(a1 + 144);
  int v8 = *(_DWORD *)(a1 + 160);
  *(float *)(a2 + 12) = result;
  *(_DWORD *)(a2 + 16) = v8;
  return result;
}

float dovi_getScalingFactorS_C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, float a6)
{
  id v11 = a5;
  float v12 = dovi_applyTonemapCurveS(a1, a2, v11, a6);
  *(float *)&double v13 = applyEdrAdaptationCurveS(a3, v12);
  if (*(unsigned char *)(a1 + 481))
  {
    int v14 = *(_DWORD *)(a2 + 136);
    if (v14 == 3)
    {
      float v15 = *(float *)(a2 + 132);
      if (v15 != 1.0) {
        *(float *)&double v13 = *(float *)(a2 + 128) + (float)((float)(*(float *)&v13 - *(float *)(a2 + 128)) * v15);
      }
    }
    else if (v14 == 2)
    {
      *(float *)&double v13 = applyLinearStretchInPQ(*(float *)&v13, *(float *)(a2 + 124), *(float *)(a2 + 120));
    }
  }
  double v16 = applyAmbAdaptationCurveS_C(a4, v13);
  if (*(_DWORD *)(a1 + 468) == 4)
  {
    float v17 = 1.0;
    if (a6 != 0.0) {
      float v17 = a6;
    }
    float v18 = *(float *)&v16 / v17;
  }
  else
  {
    float v19 = *(float *)&v16 / a6;
    if (a6 == 0.0) {
      float v19 = 1.0;
    }
    float v20 = fmaxf(v19, 0.5);
    if (*(unsigned char *)(a1 + 480)) {
      float v19 = v20;
    }
    float v18 = fminf(v19, 2.0);
  }

  return v18;
}

void sub_2222AEE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float dovi_getScalingFactorForPTS_C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, float a6)
{
  id v11 = a5;
  float v12 = dovi_applyTonemapCurveS(a1, a2, v11, a6);
  if (*(_DWORD *)(a1 + 468) != 4)
  {
    float v13 = *(float *)(a2 + 140);
    if (v13 > 0.0) {
      float v12 = powf(v12, v13);
    }
  }
  *(float *)&double v14 = applyEdrAdaptationCurveS(a3, v12);
  if (*(unsigned char *)(a1 + 481))
  {
    int v15 = *(_DWORD *)(a2 + 136);
    if (v15 == 3)
    {
      float v16 = *(float *)(a2 + 132);
      if (v16 != 1.0) {
        *(float *)&double v14 = *(float *)(a2 + 128) + (float)((float)(*(float *)&v14 - *(float *)(a2 + 128)) * v16);
      }
    }
    else if (v15 == 2)
    {
      *(float *)&double v14 = applyLinearStretchInPQ(*(float *)&v14, *(float *)(a2 + 124), *(float *)(a2 + 120));
    }
  }
  double v17 = applyAmbAdaptationCurveS_C(a4, v14);
  LODWORD(v18) = LODWORD(v17);
  if (*(_DWORD *)(a1 + 468) == 4)
  {
    *(float *)&double v17 = a6;
    [v11 satMapI:v17 Adm:v18];
    float v20 = v19;
  }
  else
  {
    float v21 = *(float *)&v17 / a6;
    if (a6 == 0.0) {
      float v21 = 1.0;
    }
    float v22 = fmaxf(v21, 0.5);
    if (*(unsigned char *)(a1 + 480)) {
      float v21 = v22;
    }
    float v23 = fminf(v21, 2.0);
    if (*(unsigned char *)(a1 + 482)) {
      float v20 = (float)(1.0 - (float)(a6 - (float)(v23 * a6))) * getMesopicCrushForDM3(a1, v23 * a6);
    }
    else {
      float v20 = 1.0 - (float)(a6 - (float)(v23 * a6));
    }
  }

  return v20;
}

void sub_2222AEFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float getMesopicCrushForDM3(uint64_t a1, float a2)
{
  float v2 = *(float *)(a1 + 280);
  float v3 = 1.0;
  if (v2 >= 40.0)
  {
    float v3 = 0.0;
    if (v2 < 100.0) {
      float v3 = (float)((float)(v2 + -40.0) / -60.0) + 1.0;
    }
  }
  float v4 = 0.0;
  if (a2 >= 0.006105)
  {
    float v4 = 1.0;
    if (a2 < 0.21333) {
      float v4 = (float)((float)-(float)((float)((float)((float)(a2 + -0.006105) / -0.20722) + 1.0)
    }
                                 * (float)((float)((float)(a2 + -0.006105) / -0.20722) + 1.0))
                 * (float)((float)((float)(a2 + -0.006105) / -0.20722) + 1.0))
         + 1.0;
  }
  return (float)(1.0 - v3) + (float)(v4 * v3);
}

void dovi_setScalingFactorTableS_C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v19 = a8;
  if (a3)
  {
    unint64_t v15 = 0;
    unsigned int v16 = 1;
    do
    {
      *(float *)(a1 + 4 * v15) = dovi_getScalingFactorS_C(a4, a5, a6, a7, v19, *(float *)(a2 + 4 * v15));
      unint64_t v15 = v16++;
    }
    while (v15 < a3);
    if (*(unsigned char *)(a4 + 483))
    {
      uint64_t v17 = 0;
      uint64_t v18 = a1 + 4 * a3;
      do
      {
        *(float *)(v18 + 4 * v17) = dovi_getScalingFactorForPTS_C(a4, a5, a6, a7, v19, *(float *)(a2 + 4 * v17));
        ++v17;
      }
      while (v17 < a3);
    }
  }
}

void sub_2222AF1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float dovi84_getScalingFactorS_C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, float a7)
{
  id v13 = a6;
  float v14 = dovi84_applyTonemapCurveS_C((float *)a1, a2, a5, v13, a7);
  *(float *)&double v15 = applyEdrAdaptationCurveS(a3, v14);
  if (*(unsigned char *)(a1 + 481))
  {
    int v16 = *(_DWORD *)(a2 + 136);
    if (v16 == 3)
    {
      float v17 = *(float *)(a2 + 132);
      if (v17 != 1.0) {
        *(float *)&double v15 = *(float *)(a2 + 128) + (float)((float)(*(float *)&v15 - *(float *)(a2 + 128)) * v17);
      }
    }
    else if (v16 == 2)
    {
      *(float *)&double v15 = applyLinearStretchInPQ(*(float *)&v15, *(float *)(a2 + 124), *(float *)(a2 + 120));
    }
  }
  double v18 = applyAmbAdaptationCurveS_C(a4, v15);
  float v19 = *(float *)&v18;
  if (a7 == 0.0)
  {
    int v20 = *(_DWORD *)(a1 + 468);
    if (v20 == 4) {
      float v21 = *(float *)&v18;
    }
    else {
      float v21 = 1.0;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 468);
    float v21 = *(float *)&v18 / a7;
  }
  if (v20 <= 3 && *(float *)(a1 + 240) > 0.0)
  {
    float v22 = -(float)(a7 + -0.0000014619);
    if (a7 >= 0.00000073096) {
      float v22 = a7;
    }
    float v23 = flt_2222D1868[a7 < 0.00000073096];
    float v24 = powf(v22, 0.012683);
    float v25 = fmax((float)((float)(v24 + -0.83594) / (float)((float)(v24 * -18.688) + 18.852)), 0.0);
    float v26 = (float)(v23 * powf(v25, 6.2774)) / 1000.0;
    float v27 = powf(fabsf(v26), *(float *)(a1 + 284) + 1.0);
    if (v26 < 0.0) {
      float v27 = -v27;
    }
    float v28 = *(float *)(a2 + 4) + (float)(v27 * (float)(1000.0 - *(float *)(a2 + 4)));
    if (v28 >= 0.0)
    {
      float v31 = powf(v28 * 0.0001, 0.1593);
      float v30 = powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v29 = powf(v28 * -0.0001, 0.1593);
      float v30 = 0.0000014619 - powf((float)((float)(v29 * 18.852) + 0.83594) / (float)((float)(v29 * 18.688) + 1.0), 78.844);
    }
    float v21 = 1.0;
    if (a7 != 0.0)
    {
      float v32 = v19 / v30;
      if (v30 == 0.0) {
        float v32 = 1.0;
      }
      float v33 = fmin(v32, 2.0);
      float v21 = (float)(v30 * v33) / a7;
    }
  }

  return v21;
}

void sub_2222AF458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float dovi84_getScalingFactorForPTS_C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, float a7)
{
  id v13 = a6;
  float v14 = dovi84_applyTonemapCurveS_C((float *)a1, a2, a5, v13, a7);
  *(float *)&double v15 = applyEdrAdaptationCurveS(a3, v14);
  if (*(unsigned char *)(a1 + 481))
  {
    int v16 = *(_DWORD *)(a2 + 136);
    if (v16 == 3)
    {
      float v17 = *(float *)(a2 + 132);
      if (v17 != 1.0) {
        *(float *)&double v15 = *(float *)(a2 + 128) + (float)((float)(*(float *)&v15 - *(float *)(a2 + 128)) * v17);
      }
    }
    else if (v16 == 2)
    {
      *(float *)&double v15 = applyLinearStretchInPQ(*(float *)&v15, *(float *)(a2 + 124), *(float *)(a2 + 120));
    }
  }
  double v18 = applyAmbAdaptationCurveS_C(a4, v15);
  float v20 = *(float *)&v18;
  if (*(_DWORD *)(a1 + 468) == 4)
  {
    *(float *)&double v18 = a7;
    *(float *)&double v19 = v20;
    [v13 satMapI:v18 Adm:v19];
    float v22 = v21;
  }
  else
  {
    if (a7 == 0.0) {
      float v23 = 1.0;
    }
    else {
      float v23 = *(float *)&v18 / a7;
    }
    if (*(float *)(a1 + 240) > 0.0)
    {
      float v24 = -(float)(a7 + -0.0000014619);
      if (a7 >= 0.00000073096) {
        float v24 = a7;
      }
      float v25 = flt_2222D1868[a7 < 0.00000073096];
      float v26 = powf(v24, 0.012683);
      float v27 = fmax((float)((float)(v26 + -0.83594) / (float)((float)(v26 * -18.688) + 18.852)), 0.0);
      float v28 = (float)(v25 * powf(v27, 6.2774)) / 1000.0;
      float v29 = powf(fabsf(v28), *(float *)(a1 + 284) + 1.0);
      if (v28 < 0.0) {
        float v29 = -v29;
      }
      float v30 = *(float *)(a2 + 4) + (float)(v29 * (float)(1000.0 - *(float *)(a2 + 4)));
      if (v30 >= 0.0)
      {
        float v33 = powf(v30 * 0.0001, 0.1593);
        float v32 = powf((float)((float)(v33 * 18.852) + 0.83594) / (float)((float)(v33 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v31 = powf(v30 * -0.0001, 0.1593);
        float v32 = 0.0000014619
            - powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
      }
      float v23 = 1.0;
      if (a7 != 0.0)
      {
        float v34 = v20 / v32;
        if (v32 == 0.0) {
          float v34 = 1.0;
        }
        float v35 = fmin(v34, 2.0);
        float v23 = (float)(v32 * v35) / a7;
      }
    }
    float v36 = *(float *)(a2 + 64);
    float v37 = *(float *)(a2 + 56);
    BOOL v38 = v36 == v37;
    float v39 = fmax((float)((float)(a7 - v37) / (float)(v36 - v37)), 0.0);
    float v40 = fminf(v39, 1.0);
    if (v38) {
      float v41 = 1.0;
    }
    else {
      float v41 = v40;
    }
    float v22 = (float)((float)(1.0 - (float)(a7 - (float)(v23 * a7))) * v41) + (float)((float)(1.0 - v41) * powf(v23, 0.7));
  }

  return v22;
}

void sub_2222AF75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void dovi84_getScalingFactorS_C_base(HDRConfig *a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t Config = GetConfig(a1);
  if (Config)
  {
    id v13 = GetConfig((HDRConfig *)Config);
    float v14 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v13, 0xA4u, 0);
  }
  else
  {
    float v14 = 0.0;
  }
  float v15 = *(float *)(a8 + 24);
  if (a6)
  {
    float v16 = -(float)(a3 + -0.0000014619);
    if (a3 >= 0.00000073096) {
      float v16 = a3;
    }
    float v17 = flt_2222D1868[a3 < 0.00000073096];
    float v18 = powf(v16, 0.012683);
    float v19 = fmax((float)((float)(v18 + -0.83594) / (float)((float)(v18 * -18.688) + 18.852)), 0.0);
    float v20 = (float)(v17 * powf(v19, 6.2774)) / 1000.0;
    float v21 = powf(fabsf(v20), *(float *)(a2 + 108));
    if (v20 < 0.0) {
      float v21 = -v21;
    }
    float v22 = *(float *)(a2 + 4) + (float)(v21 * (float)(1000.0 - *(float *)(a2 + 4)));
    if (v22 >= 0.0)
    {
      float v24 = powf(v22 * 0.0001, 0.1593);
      a3 = powf((float)((float)(v24 * 18.852) + 0.83594) / (float)((float)(v24 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v23 = powf(v22 * -0.0001, 0.1593);
      a3 = 0.0000014619 - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
    }
  }
  float v25 = -(float)(a3 + -0.0000014619);
  if (a3 >= 0.00000073096) {
    float v25 = a3;
  }
  float v26 = flt_2222D1868[a3 < 0.00000073096];
  float v27 = powf(v25, 0.012683);
  float v28 = fmax((float)((float)(v27 + -0.83594) / (float)((float)(v27 * -18.688) + 18.852)), 0.0);
  float v29 = (float)(v15 / v14) * (float)(v26 * powf(v28, 6.2774));
  if (v29 >= 0.0)
  {
    float v31 = powf(v29 * 0.0001, 0.1593);
    powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v30 = powf(v29 * -0.0001, 0.1593);
    powf((float)((float)(v30 * 18.852) + 0.83594) / (float)((float)(v30 * 18.688) + 1.0), 78.844);
  }
}

float dovi84_getScalingFactorForPTS_C_base(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, int a6, void *a7, uint64_t a8)
{
  id v13 = a7;
  uint64_t Config = GetConfig(v13);
  if (Config)
  {
    float v15 = GetConfig((HDRConfig *)Config);
    float v16 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v15, 0xA4u, 0);
  }
  else
  {
    float v16 = 0.0;
  }
  float v17 = *(float *)(a8 + 24);
  if (a6)
  {
    float v18 = -(float)(a3 + -0.0000014619);
    if (a3 >= 0.00000073096) {
      float v18 = a3;
    }
    float v19 = flt_2222D1868[a3 < 0.00000073096];
    float v20 = powf(v18, 0.012683);
    float v21 = fmax((float)((float)(v20 + -0.83594) / (float)((float)(v20 * -18.688) + 18.852)), 0.0);
    float v22 = (float)(v19 * powf(v21, 6.2774)) / 1000.0;
    float v23 = powf(fabsf(v22), *(float *)(a2 + 108));
    if (v22 < 0.0) {
      float v23 = -v23;
    }
    float v24 = *(float *)(a2 + 4) + (float)(v23 * (float)(1000.0 - *(float *)(a2 + 4)));
    if (v24 >= 0.0)
    {
      float v26 = powf(v24 * 0.0001, 0.1593);
      a3 = powf((float)((float)(v26 * 18.852) + 0.83594) / (float)((float)(v26 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v25 = powf(v24 * -0.0001, 0.1593);
      a3 = 0.0000014619 - powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
    }
  }
  float v27 = -(float)(a3 + -0.0000014619);
  if (a3 >= 0.00000073096) {
    float v27 = a3;
  }
  float v28 = flt_2222D1868[a3 < 0.00000073096];
  float v29 = powf(v27, 0.012683);
  float v30 = fmax((float)((float)(v29 + -0.83594) / (float)((float)(v29 * -18.688) + 18.852)), 0.0);
  float v31 = (float)(v17 / v16) * (float)(v28 * powf(v30, 6.2774));
  if (v31 >= 0.0)
  {
    float v35 = powf(v31 * 0.0001, 0.1593);
    LODWORD(v34) = powf((float)((float)(v35 * 18.852) + 0.83594) / (float)((float)(v35 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v32 = powf(v31 * -0.0001, 0.1593);
    *(float *)&double v34 = 0.0000014619
                   - powf((float)((float)(v32 * 18.852) + 0.83594) / (float)((float)(v32 * 18.688) + 1.0), 78.844);
  }
  if (*(_DWORD *)(a1 + 468) == 4)
  {
    *(float *)&double v33 = a3;
    [(HDRConfig *)v13 satMapI:v33 Adm:v34];
    float v37 = v36;
  }
  else if (a3 == 0.0)
  {
    float v37 = 1.0;
  }
  else
  {
    float v37 = *(float *)&v34 / a3;
  }

  return v37;
}

void sub_2222AFDD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void dovi84_setScalingFactorTableS_C(uint64_t a1, uint64_t a2, unint64_t a3, HDRConfig *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, void *a9, uint64_t a10)
{
  id v33 = a9;
  [v33 debugParams];
  if (a3)
  {
    unint64_t v18 = 0;
    unsigned int v19 = 1;
    do
    {
      *(float *)(a1 + 4 * v18) = dovi84_getScalingFactorS_C((uint64_t)a4, a5, a6, a7, a8, v33, *(float *)(a2 + 4 * v18));
      unint64_t v18 = v19++;
    }
    while (v18 < a3);
    if (*((unsigned char *)a4 + 483))
    {
      uint64_t v23 = 0;
      do
      {
        *(float *)(a1 + 4 * a3 + 4 * v23) = dovi84_getScalingFactorForPTS_C((uint64_t)a4, a5, a6, a7, a8, v33, *(float *)(a2 + 4 * v23));
        ++v23;
      }
      while (v23 < a3);
    }
    if (*(unsigned char *)(a10 + 164))
    {
      unint64_t v24 = 0;
      float v25 = *(float *)(a10 + 168);
      double v26 = 1.0 - v25;
      unsigned int v27 = 1;
      do
      {
        dovi84_getScalingFactorS_C_base(a4, a5, *(float *)(a2 + 4 * v24), v20, v21, a8, v22, a10);
        float v29 = (float)(v25 * *(float *)(a1 + 4 * v24)) + v26 * v28;
        *(float *)(a1 + 4 * v24) = v29;
        unint64_t v24 = v27++;
      }
      while (v24 < a3);
      if (*((unsigned char *)a4 + 483))
      {
        uint64_t v30 = 0;
        uint64_t v31 = a1 + 4 * a3;
        do
        {
          float v32 = (float)(v25 * *(float *)(v31 + 4 * v30))
              + v26
              * dovi84_getScalingFactorForPTS_C_base((uint64_t)a4, a5, *(float *)(a2 + 4 * v30), v20, v21, a8, v33, a10);
          *(float *)(v31 + 4 * v30++) = v32;
        }
        while (v30 < a3);
      }
    }
  }
}

void sub_2222AFFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void dovi84_getScalingFactorS_L(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7, void *a8, float a9)
{
  char v9 = a6;
  float v12 = dovi84_applyTonemapCurveS_L(a1, a2, a5, a6, a7, a8, a9);
  if ((v9 & 1) == 0)
  {
    float v13 = applyEdrAdaptationCurveS(a3, v12);
    applyAmbAdaptationCurveS(a4, v13);
  }
}

void dovi84_setScalingFactorTableS_L(uint64_t a1, uint64_t a2, unint64_t a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, void *a10)
{
  uint64_t v31 = a10;
  uint64_t Config = (HDRConfig *)GetConfig(v31);
  if (Config)
  {
    unint64_t v18 = GetConfig(Config);
    uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v18, 0xEu, 0);
    char v19 = *(unsigned char *)Config != 0;
  }
  else
  {
    char v19 = 0;
  }
  uint64_t v20 = GetConfig(Config);
  if (v20 && (uint64_t v21 = GetConfig((HDRConfig *)v20), *(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v21, 0x45u, 0))
    || (a9 & 1) != 0)
  {
    if (a3)
    {
      unint64_t v27 = 0;
      unsigned int v28 = 1;
      do
      {
        dovi84_getScalingFactorS_L(a4, a5, a6, a7, a8, a9, v19, v31, *(float *)(a2 + 4 * v27));
        *(_DWORD *)(a1 + 4 * v27) = v29;
        unint64_t v27 = v28++;
      }
      while (v27 < a3);
    }
  }
  else
  {
    for (uint64_t i = 0; i != 801; ++i)
    {
      float v23 = ATFMTLhalf2float(32 * (i & 0x7FF));
      dovi84_getScalingFactorS_L(a4, a5, a6, a7, a8, 0, v19, v31, v23 * 0.00097656);
      *(_DWORD *)(a1 + 4 * i) = v24;
    }
    if (a3 >= 0x322)
    {
      uint64_t v25 = 801;
      int v26 = 801;
      do
      {
        *(_DWORD *)(a1 + 4 * v25) = *(_DWORD *)(a1 + 4 * v25 - 4);
        uint64_t v25 = (unsigned __int16)++v26;
      }
      while ((unsigned __int16)v26 < a3);
    }
  }
}

void sub_2222B0208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

HDRConfig *dovi_setupTmConfig(HDRConfig *Config, int a2, _DWORD *a3, uint64_t a4)
{
  switch((int)Config)
  {
    case 0:
      a3[3] = 0;
      a3[4] = 0;
      a3[8] = 0;
      break;
    case 1:
      *(void *)(a3 + 3) = 0x100000002;
      int v8 = 3;
      goto LABEL_29;
    case 2:
      *(int8x8_t *)(a3 + 3) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 4), 0x1FuLL)), (int8x8_t)0x1100000004, (int8x8_t)0x500000002);
      goto LABEL_10;
    case 3:
      if (a2 == 4) {
        int v9 = 4;
      }
      else {
        int v9 = 2;
      }
      a3[3] = v9;
      a3[4] = 10;
LABEL_10:
      a3[8] = 5;
      *(_DWORD *)(a4 + 68) = 0;
      break;
    case 4:
      *(int8x8_t *)(a3 + 3) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 4), 0x1FuLL)), (int8x8_t)0x1100000004, (int8x8_t)0xB00000002);
      a3[8] = 5;
      *(_DWORD *)(a4 + 68) = 3;
      break;
    case 5:
    case 6:
      int8x8_t v5 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 4), 0x1FuLL));
      int8x8_t v6 = (int8x8_t)0x600000002;
      int8x8_t v7 = (int8x8_t)0x1100000004;
      goto LABEL_25;
    case 7:
      if (a2 == 4) {
        int v10 = 4;
      }
      else {
        int v10 = 2;
      }
      a3[3] = v10;
      if (a2 == 4)
      {
        uint64_t Config = (HDRConfig *)GetConfig(Config);
        if (Config
          && (id v11 = GetConfig(Config),
              uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v11, 0x83u, 0),
              *(_DWORD *)Config == 1))
        {
          int v13 = 12;
        }
        else
        {
          int v13 = 15;
        }
      }
      else
      {
        int v13 = 10;
      }
      a3[4] = v13;
      goto LABEL_28;
    case 8:
      if (a2 == 4) {
        int v12 = 4;
      }
      else {
        int v12 = 2;
      }
      a3[3] = v12;
      a3[4] = 19;
      goto LABEL_28;
    case 9:
      int8x8_t v5 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 4), 0x1FuLL));
      int8x8_t v6 = (int8x8_t)0xA00000002;
      int8x8_t v7 = (int8x8_t)0x1000000004;
LABEL_25:
      *(int8x8_t *)(a3 + 3) = vbsl_s8(v5, v7, v6);
LABEL_28:
      int v8 = 5;
LABEL_29:
      a3[8] = v8;
      break;
    default:
      break;
  }
  if (overrideAmbAdaptationMode <= 6) {
    a3[8] = overrideAmbAdaptationMode;
  }
  if (overrideEdrAdaptationMode <= 0x13) {
    a3[4] = overrideEdrAdaptationMode;
  }
  float result = (HDRConfig *)GetConfig(Config);
  if (!result
    || (float v15 = GetConfig(result),
        float result = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v15, 0x5Bu, 0),
        !*(unsigned char *)result))
  {
    a3[8] = 0;
  }
  return result;
}

void hdr10_calculateTonemapCurveParamS(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v444 = *MEMORY[0x263EF8340];
  id v7 = a3;
  float v8 = *(float *)a1;
  int v9 = *(_DWORD *)(a1 + 16);
  float v11 = *(float *)(a1 + 20);
  float v10 = *(float *)(a1 + 24);
  float32x2_t v12 = *(float32x2_t *)(a1 + 40);
  float32x2_t v13 = *(float32x2_t *)(a1 + 52);
  float v14 = *(float *)(a1 + 116);
  float v15 = *(float *)(a1 + 60);
  float v16 = *(float *)(a1 + 48);
  float v17 = *(float *)(a1 + 76);
  *(unsigned char *)a4 = 1;
  *(float32x2_t *)&long long v18 = v12;
  float32x2_t v418 = v12;
  float32x2_t v420 = v13;
  *((float32x2_t *)&v18 + 1) = v13;
  *(_OWORD *)(a4 + 4) = v18;
  if (v12.f32[0] >= v16) {
    float v19 = v16;
  }
  else {
    float v19 = v12.f32[0];
  }
  *(float *)(a4 + 20) = v19;
  *(_DWORD *)(a4 + 28) = v12.i32[1];
  float v20 = v12.f32[1];
  if (v12.f32[1] >= v17) {
    float v21 = v12.f32[1];
  }
  else {
    float v21 = v17;
  }
  *(float *)(a4 + 32) = v21;
  *(float *)(a4 + 36) = v16;
  if (v14 >= v15) {
    float v22 = v14;
  }
  else {
    float v22 = v15;
  }
  *(float *)(a4 + 44) = v15;
  *(float *)(a4 + 48) = v22;
  if (v19 >= 0.0)
  {
    float v25 = powf(v19 * 0.0001, 0.1593);
    float v24 = powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v23 = powf(v19 * -0.0001, 0.1593);
    float v24 = 0.0000014619 - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 52) = v24;
  if (v20 >= 0.0)
  {
    float v28 = powf(v20 * 0.0001, 0.1593);
    float v27 = powf((float)((float)(v28 * 18.852) + 0.83594) / (float)((float)(v28 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v26 = powf(v20 * -0.0001, 0.1593);
    float v27 = 0.0000014619 - powf((float)((float)(v26 * 18.852) + 0.83594) / (float)((float)(v26 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 60) = v27;
  if (v21 >= 0.0)
  {
    float v31 = powf(v21 * 0.0001, 0.1593);
    float v30 = powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v29 = powf(v21 * -0.0001, 0.1593);
    float v30 = 0.0000014619 - powf((float)((float)(v29 * 18.852) + 0.83594) / (float)((float)(v29 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 64) = v30;
  if (v16 >= 0.0)
  {
    float v34 = powf(v16 * 0.0001, 0.1593);
    float v33 = powf((float)((float)(v34 * 18.852) + 0.83594) / (float)((float)(v34 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v32 = powf(v16 * -0.0001, 0.1593);
    float v33 = 0.0000014619 - powf((float)((float)(v32 * 18.852) + 0.83594) / (float)((float)(v32 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 68) = v33;
  if (v15 >= 0.0)
  {
    float v37 = powf(v15 * 0.0001, 0.1593);
    float v36 = powf((float)((float)(v37 * 18.852) + 0.83594) / (float)((float)(v37 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v35 = powf(v15 * -0.0001, 0.1593);
    float v36 = 0.0000014619 - powf((float)((float)(v35 * 18.852) + 0.83594) / (float)((float)(v35 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 76) = v36;
  if (v22 >= 0.0)
  {
    float v41 = powf(v22 * 0.0001, 0.1593);
    float v40 = powf((float)((float)(v41 * 18.852) + 0.83594) / (float)((float)(v41 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v38 = powf(v22 * -0.0001, 0.1593);
    float v40 = 0.0000014619 - powf((float)((float)(v38 * 18.852) + 0.83594) / (float)((float)(v38 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a4 + 80) = v40;
  uint64_t Config = (HDRConfig *)GetConfig(v39);
  if (Config)
  {
    float v43 = GetConfig(Config);
    uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v43, 0x87u, 0);
    int v44 = *(_DWORD *)Config;
  }
  else
  {
    int v44 = 0;
  }
  *(_DWORD *)(a4 + 1396) = v44;
  int v45 = *(unsigned __int8 *)(a2 + 481);
  if (*(unsigned char *)(a2 + 481))
  {
    *(float *)(a4 + 1380) = v16;
    float v46 = *(float *)(a4 + 44);
    if (*(float *)(a1 + 116) >= v46) {
      float v47 = *(float *)(a4 + 44);
    }
    else {
      float v47 = *(float *)(a1 + 116);
    }
    if (v15 >= v46) {
      float v48 = *(float *)(a4 + 44);
    }
    else {
      float v48 = v15;
    }
    float v49 = fmax(fmin((float)((float)(v47 - v16) / (float)(v48 - v16)), 1.0), 0.0);
    *(float *)(a4 + 1384) = v49;
    if (v16 >= 0.0)
    {
      float v53 = powf(v16 * 0.0001, 0.1593);
      float v51 = powf((float)((float)(v53 * 18.852) + 0.83594) / (float)((float)(v53 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v50 = powf(v16 * -0.0001, 0.1593);
      float v51 = 0.0000014619 - powf((float)((float)(v50 * 18.852) + 0.83594) / (float)((float)(v50 * 18.688) + 1.0), 78.844);
    }
    *(float *)(a4 + 1388) = v51;
    if (v47 >= 0.0)
    {
      float v56 = powf(v47 * 0.0001, 0.1593);
      float v55 = powf((float)((float)(v56 * 18.852) + 0.83594) / (float)((float)(v56 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v54 = powf(v47 * -0.0001, 0.1593);
      float v55 = 0.0000014619 - powf((float)((float)(v54 * 18.852) + 0.83594) / (float)((float)(v54 * 18.688) + 1.0), 78.844);
    }
    if (v16 >= 0.0)
    {
      float v59 = powf(v16 * 0.0001, 0.1593);
      float v58 = powf((float)((float)(v59 * 18.852) + 0.83594) / (float)((float)(v59 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v57 = powf(v16 * -0.0001, 0.1593);
      float v58 = 0.0000014619 - powf((float)((float)(v57 * 18.852) + 0.83594) / (float)((float)(v57 * 18.688) + 1.0), 78.844);
    }
    if (v48 >= 0.0)
    {
      float v62 = powf(v48 * 0.0001, 0.1593);
      float v61 = powf((float)((float)(v62 * 18.852) + 0.83594) / (float)((float)(v62 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v60 = powf(v48 * -0.0001, 0.1593);
      float v61 = 0.0000014619 - powf((float)((float)(v60 * 18.852) + 0.83594) / (float)((float)(v60 * 18.688) + 1.0), 78.844);
    }
    float v63 = v55 - v58;
    if (v16 >= 0.0)
    {
      float v66 = powf(v16 * 0.0001, 0.1593);
      float v65 = powf((float)((float)(v66 * 18.852) + 0.83594) / (float)((float)(v66 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v64 = powf(v16 * -0.0001, 0.1593);
      float v65 = 0.0000014619 - powf((float)((float)(v64 * 18.852) + 0.83594) / (float)((float)(v64 * 18.688) + 1.0), 78.844);
    }
    float v52 = fmax(fmin((float)(v63 / (float)(v61 - v65)), 1.0), 0.0);
  }
  else
  {
    *(_DWORD *)(a4 + 1380) = 0;
    *(void *)(a4 + 1384) = 1065353216;
    float v52 = 1.0;
  }
  *(float *)(a4 + 1392) = v52;
  switch(LODWORD(v8))
  {
    case 1:
      *(_DWORD *)(a4 + 84) = 1;
      *(_WORD *)(a4 + 88) = 4;
      float v67 = v10;
      float v69 = *(float *)(a4 + 60);
      float v68 = *(float *)(a4 + 64);
      float v70 = v69 / v68;
      float v72 = *(float *)(a4 + 76);
      float v71 = *(float *)(a4 + 80);
      float v73 = v67 * *(float *)(a4 + 48);
      float v74 = v72 / v71;
      if (v73 >= 0.0)
      {
        float v231 = powf(v73 * 0.0001, 0.1593);
        float v76 = powf((float)((float)(v231 * 18.852) + 0.83594) / (float)((float)(v231 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v75 = powf(v73 * -0.0001, 0.1593);
        float v76 = 0.0000014619
            - powf((float)((float)(v75 * 18.852) + 0.83594) / (float)((float)(v75 * 18.688) + 1.0), 78.844);
      }
      float v232 = v70 / v74;
      float v233 = v76 * 0.65;
      float v234 = (float)((float)(v233 + (float)(v233 * (float)(1.0 / (float)(v69 / v72)))) * 0.5)
           + (float)((float)(1.0
                           - (float)((float)((float)(1.0 - (float)(1.0 / (float)(v69 / v72))) / 0.74254)
                                   * (float)((float)(1.0 - (float)(1.0 / (float)(v69 / v72))) / 0.74254)))
                   * (float)(v233 - (float)((float)(v233 + (float)(v233 * (float)(1.0 / (float)(v69 / v72)))) * 0.5)));
      float v235 = *(float *)(a4 + 52) / v68;
      float v236 = v233 / v68;
      *(float *)(a4 + 92) = v235;
      *(float *)(a4 + 96) = v236;
      *(float *)(a4 + 100) = v70;
      *(_DWORD *)(a4 + 104) = 1065353216;
      float v237 = *(float *)(a4 + 68) / v71;
      float v238 = v234 / v71;
      *(float *)(a4 + 116) = v237;
      *(float *)(a4 + 120) = v234 / v71;
      *(float *)(a4 + 124) = v74;
      *(_DWORD *)(a4 + 128) = 1065353216;
      if (v236 <= (float)(v234 / v71))
      {
        float v239 = v70 / v74;
        if (v236 != 0.0) {
          float v239 = v238 / v236;
        }
      }
      else
      {
        float v239 = v70 / v74;
        if (v70 != v236) {
          float v239 = (float)(v74 - v238) / (float)(v70 - v236);
        }
      }
      if (v236 != v235) {
        float v232 = (float)(v238 - v237) / (float)(v236 - v235);
      }
      float v240 = 1.0;
      float v241 = 1.0;
      if (v70 != v236) {
        float v241 = (float)(v74 - v238) / (float)(v70 - v236);
      }
      if (v70 != 1.0) {
        float v240 = (float)(1.0 - v74) / (float)(1.0 - v70);
      }
      *(float *)(a4 + 140) = v232;
      *(float *)(a4 + 144) = v239;
      float v242 = (float)(1.0 / v239) * (float)(v241 * v241);
      float v243 = 1.0 / v242;
      float v244 = v240 * v240;
      goto LABEL_198;
    case 2:
      float v165 = v10;
      *(_DWORD *)(a4 + 84) = 1;
      *(_WORD *)(a4 + 88) = 4;
      float v166 = *(float *)(a4 + 60);
      float v167 = *(float *)(a4 + 64);
      float v168 = *(float *)(a4 + 76);
      float v169 = *(float *)(a4 + 80);
      float v170 = v166 / v167;
      float v171 = v168 / v169;
      float v172 = (float)(v166 / v167) / (float)(v168 / v169);
      float v173 = v168 * 0.5;
      float v174 = (float)((float)(v168 * 0.5) * (float)(1.0 / (float)(v166 / v168)))
           + (float)((float)((float)(v168 * 0.5) - (float)((float)(v168 * 0.5) * (float)(1.0 / (float)(v166 / v168))))
                   * 0.5);
      float v175 = *(float *)(a4 + 52) / v167;
      float v176 = v173 / v167;
      *(float *)(a4 + 92) = v175;
      *(float *)(a4 + 96) = v173 / v167;
      *(float *)(a4 + 100) = v170;
      *(_DWORD *)(a4 + 104) = 1065353216;
      float v177 = *(float *)(a4 + 68) / v169;
      float v178 = v174 / v169;
      *(float *)(a4 + 116) = v177;
      *(float *)(a4 + 120) = v178;
      *(float *)(a4 + 124) = v171;
      *(_DWORD *)(a4 + 128) = 1065353216;
      if (v176 == 0.0) {
        float v179 = v172;
      }
      else {
        float v179 = v178 / v176;
      }
      if (v176 != v175) {
        float v172 = (float)(v178 - v177) / (float)(v176 - v175);
      }
      *(float *)(a4 + 140) = v172;
      *(float *)(a4 + 144) = v179;
      if (v9 == 1)
      {
        float v180 = v165 * *(float *)(a4 + 48);
        if (v180 >= 0.0)
        {
          float v294 = powf(v180 * 0.0001, 0.1593);
          float v182 = powf((float)((float)(v294 * 18.852) + 0.83594) / (float)((float)(v294 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v181 = powf(v180 * -0.0001, 0.1593);
          float v182 = 0.0000014619
               - powf((float)((float)(v181 * 18.852) + 0.83594) / (float)((float)(v181 * 18.688) + 1.0), 78.844);
        }
        float v178 = (float)((float)(v173 * v182) / 0.50808) / v169;
        *(float *)(a4 + 120) = v178;
      }
      float v295 = 1.0;
      float v296 = 1.0;
      if (v170 != v176) {
        float v296 = (float)(v171 - v178) / (float)(v170 - v176);
      }
      if (v170 != 1.0) {
        float v295 = (float)(1.0 - v171) / (float)(1.0 - v170);
      }
      float v290 = (float)(1.0 / v179) * (float)(v296 * v296);
      float v291 = (float)(1.0 / v290) * (float)(v295 * v295);
      goto LABEL_206;
    case 3:
      float v118 = v10;
      *(_DWORD *)(a4 + 84) = 1;
      *(_WORD *)(a4 + 88) = 4;
      float v119 = *(float *)(a4 + 60);
      float v120 = *(float *)(a4 + 64);
      float v121 = *(float *)(a4 + 76);
      float v122 = *(float *)(a4 + 80);
      float v123 = 1.0 / (float)(v119 / v121);
      float v124 = v119 / v120;
      float v125 = v121 / v122;
      float v126 = (float)(v119 / v120) / (float)(v121 / v122);
      float v127 = (float)(v123 * v123) * 0.5;
      float v128 = *(float *)(a4 + 52);
      float v129 = *(float *)(a4 + 68);
      float v130 = v128 + (float)((float)(v121 - v129) * 0.5);
      if ((float)(v129 + (float)(v130 - v128)) < v121) {
        float v121 = v129 + (float)(v130 - v128);
      }
      float v131 = v129 + (float)((float)(v130 - v128) * v123);
      if (v129 >= v131) {
        float v132 = *(float *)(a4 + 68);
      }
      else {
        float v132 = v131;
      }
      float v133 = v132 + (float)((float)(v121 - v132) * v127);
      float v134 = v128 / v120;
      float v135 = v130 / v120;
      *(float *)(a4 + 92) = v128 / v120;
      *(float *)(a4 + 96) = v130 / v120;
      *(float *)(a4 + 100) = v124;
      *(_DWORD *)(a4 + 104) = 1065353216;
      float v136 = v133 / v122;
      *(float *)(a4 + 116) = v129 / v122;
      *(float *)(a4 + 120) = v133 / v122;
      *(float *)(a4 + 124) = v125;
      *(_DWORD *)(a4 + 128) = 1065353216;
      float v137 = (float)(v133 / v122) / v135;
      if (v135 == 0.0) {
        float v138 = v126;
      }
      else {
        float v138 = v137;
      }
      if (v135 != v134) {
        float v126 = (float)(v136 - (float)(v129 / v122)) / (float)(v135 - v134);
      }
      *(float *)(a4 + 140) = v126;
      *(float *)(a4 + 144) = v138;
      if (v9 == 1)
      {
        float v139 = v118 * *(float *)(a4 + 48);
        if (v139 >= 0.0)
        {
          float v287 = powf(v139 * 0.0001, 0.1593);
          float v141 = powf((float)((float)(v287 * 18.852) + 0.83594) / (float)((float)(v287 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v140 = powf(v139 * -0.0001, 0.1593);
          float v141 = 0.0000014619
               - powf((float)((float)(v140 * 18.852) + 0.83594) / (float)((float)(v140 * 18.688) + 1.0), 78.844);
        }
        float v136 = (float)(v132 + (float)((float)((float)((float)(v130 * v141) / 0.50808) - v132) * v11)) / v122;
        *(float *)(a4 + 120) = v136;
      }
      float v288 = 1.0;
      float v289 = 1.0;
      if (v124 != v135) {
        float v289 = (float)(v125 - v136) / (float)(v124 - v135);
      }
      if (v124 != 1.0) {
        float v288 = (float)(1.0 - v125) / (float)(1.0 - v124);
      }
      float v290 = (float)(1.0 / v138) * (float)(v289 * v289);
      float v291 = (float)(1.0 / v290) * (float)(v288 * v288);
LABEL_206:
      *(float *)(a4 + 148) = v290;
      *(float *)(a4 + 152) = v291;
      goto LABEL_308;
    case 4:
      *(_DWORD *)(a4 + 84) = 1;
      *(_WORD *)(a4 + 88) = 4;
      float v142 = *(float *)(a4 + 76);
      float v143 = *(float *)(a4 + 80);
      float v144 = v142 / v143;
      float v145 = *(float *)(a4 + 60);
      float v146 = *(float *)(a4 + 64);
      float v147 = v145 / v146;
      float v148 = *(float *)(a4 + 68);
      float v149 = v148 + (float)((float)(v142 - v148) * 0.5);
      float v150 = v149 + (float)((float)((float)(v145 - (float)(v142 - v149)) - v149) * 0.2);
      float v151 = *(float *)(a4 + 52) / v146;
      float v152 = v150 / v146;
      *(float *)(a4 + 92) = v151;
      *(float *)(a4 + 96) = v150 / v146;
      *(float *)(a4 + 100) = v147;
      *(_DWORD *)(a4 + 104) = 1065353216;
      float v153 = v148 / v143;
      float v154 = v149 / v143;
      *(float *)(a4 + 116) = v153;
      *(float *)(a4 + 120) = v149 / v143;
      *(float *)(a4 + 124) = v142 / v143;
      *(_DWORD *)(a4 + 128) = 1065353216;
      float v155 = v146 / v143;
      if ((float)(v150 / v146) != v151) {
        float v155 = (float)(v154 - v153) / (float)(v152 - v151);
      }
      float v156 = v10;
      float v157 = v146 / v143;
      if (v147 != v152) {
        float v157 = (float)(v144 - v154) / (float)(v147 - v152);
      }
      float v158 = v11;
      float v159 = v146 / v143;
      float v160 = v144 / v147;
      if (v147 != 1.0) {
        float v159 = (float)(1.0 - v144) / (float)(1.0 - v147);
      }
      float v161 = (float)((float)(v146 / v143) + v160) * 0.5;
      *(float *)(a4 + 140) = v160;
      *(float *)(a4 + 144) = v161;
      *(float *)(a4 + 148) = (float)(v160 + v157) * 0.5;
      if (v9 == 1)
      {
        float v162 = v156 * *(float *)(a4 + 48);
        if (v162 >= 0.0)
        {
          float v292 = powf(v162 * 0.0001, 0.1593);
          float v164 = powf((float)((float)(v292 * 18.852) + 0.83594) / (float)((float)(v292 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v163 = powf(v162 * -0.0001, 0.1593);
          float v164 = 0.0000014619
               - powf((float)((float)(v163 * 18.852) + 0.83594) / (float)((float)(v163 * 18.688) + 1.0), 78.844);
        }
        *(float *)(a4 + 120) = (float)(v149 + (float)((float)((float)((float)(v150 * v164) / 0.50808) - v149) * v158))
                             / v143;
      }
      *(float *)(a4 + 140) = (float)(1.0 / v161) * (float)(v155 * v155);
      float v242 = (float)(1.0 / v161) * (float)(v157 * v157);
      float v243 = 1.0 / v242;
      float v244 = v159 * v159;
LABEL_198:
      float v293 = v243 * v244;
      goto LABEL_236;
    case 5:
      float v413 = v10;
      float v415 = v11;
      if (v45)
      {
        float v83 = *(float *)(a4 + 80);
        float v84 = *(float *)(a4 + 68);
        float v85 = *(float *)(a4 + 52);
      }
      else
      {
        *(_DWORD *)(a4 + 20) = v418.i32[0];
        if (vcgt_f32(v418, v420).u8[0]) {
          float v275 = v418.f32[0];
        }
        else {
          float v275 = v420.f32[0];
        }
        *(float *)(a4 + 36) = v275;
        *(_DWORD *)(a4 + 48) = v420.i32[1];
        if (v418.f32[0] >= 0.0)
        {
          float v299 = powf(v418.f32[0] * 0.0001, 0.1593);
          float v277 = powf((float)((float)(v299 * 18.852) + 0.83594) / (float)((float)(v299 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v276 = powf(v418.f32[0] * -0.0001, 0.1593);
          float v277 = 0.0000014619
               - powf((float)((float)(v276 * 18.852) + 0.83594) / (float)((float)(v276 * 18.688) + 1.0), 78.844);
        }
        float v85 = v277;
        *(float *)(a4 + 52) = v277;
        if (v275 >= 0.0)
        {
          float v301 = powf(v275 * 0.0001, 0.1593);
          float v84 = powf((float)((float)(v301 * 18.852) + 0.83594) / (float)((float)(v301 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v300 = powf(v275 * -0.0001, 0.1593);
          float v84 = 0.0000014619
              - powf((float)((float)(v300 * 18.852) + 0.83594) / (float)((float)(v300 * 18.688) + 1.0), 78.844);
        }
        *(float *)(a4 + 68) = v84;
        if (v420.f32[1] >= 0.0)
        {
          float v303 = powf(v420.f32[1] * 0.0001, 0.1593);
          float v83 = powf((float)((float)(v303 * 18.852) + 0.83594) / (float)((float)(v303 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v302 = powf(v420.f32[1] * -0.0001, 0.1593);
          float v83 = 0.0000014619
              - powf((float)((float)(v302 * 18.852) + 0.83594) / (float)((float)(v302 * 18.688) + 1.0), 78.844);
        }
        *(float *)(a4 + 80) = v83;
      }
      *(_DWORD *)(a4 + 84) = 1;
      *(_WORD *)(a4 + 88) = 4;
      float v305 = *(float *)(a4 + 60);
      float v304 = *(float *)(a4 + 64);
      float v306 = v304 / v83;
      float v307 = *(float *)(a4 + 76);
      float v308 = v307 - v84;
      float v423 = v84 + (float)((float)(v307 - v84) * 0.5);
      if (v307 <= v305)
      {
        float v312 = powf(1.0 - (float)(v308 / (float)(v305 - v85)), 0.25);
        float v310 = v84 + (float)((float)(v307 - v84) * 0.5);
        float v311 = v423 + (float)((float)((float)(v305 - (float)(v307 - v423)) - v423) * (float)(v312 * 0.45));
      }
      else
      {
        float v309 = powf((float)((float)(v84 + (float)((float)(v307 - v84) * 0.5)) - v84) / v308, 1.0/ (float)((float)((float)((float)((float)(v307 - v305) * 0.078125) / (float)(0.90234 - v305)) + 1.0)+ -0.05));
        float v310 = v84 + (float)((float)(v307 - v84) * 0.5);
        float v311 = v84 + (float)((float)(v309 / (float)(v307 / v305)) * v308);
      }
      float v313 = v85 / v304;
      float v314 = v311 / v304;
      *(float *)(a4 + 92) = v85 / v304;
      *(float *)(a4 + 96) = v311 / v304;
      float v315 = v305 / v304;
      *(float *)(a4 + 100) = v305 / v304;
      *(_DWORD *)(a4 + 104) = 1065353216;
      float v316 = v84 / v83;
      float v317 = v310 / v83;
      *(float *)(a4 + 116) = v84 / v83;
      *(float *)(a4 + 120) = v317;
      float v318 = v307 / v83;
      *(float *)(a4 + 124) = v307 / v83;
      *(_DWORD *)(a4 + 128) = 1065353216;
      float v319 = v317 / (float)(v311 / v304);
      if ((float)(v311 / v304) == 0.0) {
        float v319 = v304 / v83;
      }
      float v320 = v304 / v83;
      if (v314 != v313) {
        float v320 = (float)(v317 - v316) / (float)(v314 - v313);
      }
      float v321 = v306;
      if (v315 != v314) {
        float v321 = (float)(v318 - v317) / (float)(v315 - v314);
      }
      float v322 = v306;
      if (v315 != 1.0) {
        float v322 = (float)(1.0 - v318) / (float)(1.0 - v315);
      }
      float v323 = v319 + (float)((float)(v306 - v319) * 0.25);
      if (v9 == 1)
      {
        float v324 = v311;
        float v325 = v413 * *(float *)(a4 + 48);
        if (v325 >= 0.0)
        {
          float v328 = powf(v325 * 0.0001, 0.1593);
          float v327 = powf((float)((float)(v328 * 18.852) + 0.83594) / (float)((float)(v328 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v326 = powf(v325 * -0.0001, 0.1593);
          float v327 = 0.0000014619
               - powf((float)((float)(v326 * 18.852) + 0.83594) / (float)((float)(v326 * 18.688) + 1.0), 78.844);
        }
        *(float *)(a4 + 120) = (float)(v423 + (float)((float)((float)((float)(v324 * v327) / 0.50808) - v423) * v415))
                             / v83;
      }
      float v242 = (float)(1.0 / v323) * (float)(v321 * v321);
      *(float *)(a4 + 128) = v318 + (float)((float)(1.0 - v315) * v242);
      *(float *)(a4 + 140) = (float)(1.0 / v323) * (float)(v320 * v320);
      *(float *)(a4 + 144) = v323;
      float v293 = (float)(1.0 / v242) * (float)(v322 * v322);
LABEL_236:
      *(float *)(a4 + 148) = v242;
      *(float *)(a4 + 152) = v293;
      goto LABEL_308;
    case 6:
      float v183 = *(float *)(a4 + 64);
      float v184 = *(float *)(a4 + 52) / v183;
      float v185 = *(float *)(a4 + 60) / v183;
      *(float *)(a4 + 92) = v184;
      *(float *)(a4 + 96) = v185;
      float v186 = *(float *)(a4 + 80);
      float v187 = *(float *)(a4 + 68) / v186;
      float v188 = *(float *)(a4 + 76) / v186;
      *(_DWORD *)(a4 + 84) = 1;
      *(_WORD *)(a4 + 88) = 3;
      *(_DWORD *)(a4 + 100) = 1065353216;
      *(float *)(a4 + 116) = v187;
      *(float *)(a4 + 120) = v188;
      *(_DWORD *)(a4 + 124) = 1065353216;
      *(_DWORD *)(a4 + 164) = 262149;
      *(_OWORD *)(a4 + 176) = xmmword_2222D44F0;
      *(void *)(a4 + 232) = 0x3F0000003E800000;
      *(_DWORD *)(a4 + 240) = 1061158912;
      goto LABEL_313;
    case 7:
    case 8:
      *(_DWORD *)(a4 + 84) = 2;
      dovi_calculateTonemapCurveParamS(a1, a2, (uint64_t)v439);
      *(_OWORD *)(a4 + 88) = *(_OWORD *)((char *)&v439[5] + 8);
      *(_OWORD *)(a4 + 20) = *(_OWORD *)((char *)&v439[1] + 8);
      *(_OWORD *)(a4 + 36) = *(_OWORD *)((char *)&v439[2] + 8);
      *(_OWORD *)(a4 + 52) = *(_OWORD *)((char *)&v439[3] + 8);
      *(_OWORD *)(a4 + 68) = *(_OWORD *)((char *)&v439[4] + 8);
      goto LABEL_308;
    case 9:
      float v205 = *(float *)(a1 + 68);
      float v206 = *(float *)(a1 + 80);
      if (v205 >= 0.0)
      {
        float v252 = powf(v205 * 0.0001, 0.1593);
        float v208 = powf((float)((float)(v252 * 18.852) + 0.83594) / (float)((float)(v252 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v207 = powf(v205 * -0.0001, 0.1593);
        float v208 = 0.0000014619
             - powf((float)((float)(v207 * 18.852) + 0.83594) / (float)((float)(v207 * 18.688) + 1.0), 78.844);
      }
      float v253 = *(float *)(a1 + 72);
      if (v253 >= 0.0)
      {
        float v256 = powf(v253 * 0.0001, 0.1593);
        float v255 = powf((float)((float)(v256 * 18.852) + 0.83594) / (float)((float)(v256 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v254 = powf(v253 * -0.0001, 0.1593);
        float v255 = 0.0000014619
             - powf((float)((float)(v254 * 18.852) + 0.83594) / (float)((float)(v254 * 18.688) + 1.0), 78.844);
      }
      float v414 = v10;
      float v416 = v11;
      if (v206 >= 0.0)
      {
        float v259 = powf(v206 * 0.0001, 0.1593);
        float v258 = powf((float)((float)(v259 * 18.852) + 0.83594) / (float)((float)(v259 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v257 = powf(v206 * -0.0001, 0.1593);
        float v258 = 0.0000014619
             - powf((float)((float)(v257 * 18.852) + 0.83594) / (float)((float)(v257 * 18.688) + 1.0), 78.844);
      }
      *(_DWORD *)(a4 + 84) = 1;
      *(_WORD *)(a4 + 88) = 4;
      float v260 = *(float *)(a4 + 76);
      float v261 = *(float *)(a4 + 60);
      float v262 = *(float *)(a4 + 68);
      float v263 = *(float *)(a4 + 52);
      float v264 = powf((float)(v258 - v208) / (float)(v255 - v208), (float)((float)(v260 - v262) / (float)(v261 - v263)) * 4.0);
      float v265 = v262 + (float)((float)(v260 - v262) * 0.5);
      float v266 = v265 + (float)((float)((float)(v261 - (float)(v260 - v265)) - v265) * v264);
      *(float *)(a4 + 92) = v263;
      *(float *)(a4 + 96) = v266;
      v267.i32[0] = *(_DWORD *)(a4 + 64);
      *(float *)(a4 + 100) = v261;
      *(_DWORD *)(a4 + 104) = v267.i32[0];
      *(float *)(a4 + 116) = v262;
      *(float *)(a4 + 120) = v265;
      v268.i32[0] = *(_DWORD *)(a4 + 80);
      *(float *)(a4 + 124) = v260;
      *(_DWORD *)(a4 + 128) = v268.i32[0];
      float v269 = 1.0;
      float v270 = 1.0;
      if (v266 != v263) {
        float v270 = (float)(v265 - v262) / (float)(v266 - v263);
      }
      if (v261 != v266) {
        float v269 = (float)(v260 - v265) / (float)(v261 - v266);
      }
      float v271 = (float)((float)((float)(v260 / v261) + -1.0) * v264) + 1.0;
      if (v9 == 1)
      {
        int32x2_t v419 = v268;
        int32x2_t v422 = v267;
        float v272 = v414 * *(float *)(a4 + 48);
        if (v272 >= 0.0)
        {
          float v297 = powf(v272 * 0.0001, 0.1593);
          float v274 = powf((float)((float)(v297 * 18.852) + 0.83594) / (float)((float)(v297 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v273 = powf(v272 * -0.0001, 0.1593);
          float v274 = 0.0000014619
               - powf((float)((float)(v273 * 18.852) + 0.83594) / (float)((float)(v273 * 18.688) + 1.0), 78.844);
        }
        *(float *)(a4 + 120) = v265 + (float)((float)((float)((float)(v266 * v274) / 0.50808) - v265) * v416);
        int32x2_t v268 = v419;
        int32x2_t v267 = v422;
      }
      *(float *)(a4 + 140) = (float)(v270 * v270) * (float)(1.0 / *(float *)(a4 + 144));
      *(float *)(a4 + 144) = v271;
      float v298 = (float)(1.0 / v271) * (float)(v269 * v269);
      *(float *)(a4 + 148) = v298;
      *(float *)(a4 + 152) = v298;
      *(float *)(a4 + 128) = v260 + (float)((float)(*(float *)v267.i32 - v261) * v298);
      *(float32x4_t *)(a4 + 92) = vdivq_f32(*(float32x4_t *)(a4 + 92), (float32x4_t)vdupq_lane_s32(v267, 0));
      *(float32x4_t *)(a4 + 116) = vdivq_f32(*(float32x4_t *)(a4 + 116), (float32x4_t)vdupq_lane_s32(v268, 0));
      _Q0 = vmulq_n_f32(*(float32x4_t *)(a4 + 140), *(float *)v267.i32 / *(float *)v268.i32);
      goto LABEL_210;
    case 0xA:
      if (*(_DWORD *)(a1 + 184) != 5) {
        __assert_rtn("hdr10_calculateTonemapCurveParamS", "hdr10_display_management_host.mm", 627, "pPercentiles->n == 5");
      }
      _ZF = *(unsigned char *)(a1 + 191) == 0;
      uint64_t v90 = 152;
      if (!*(unsigned char *)(a1 + 191)) {
        uint64_t v90 = 156;
      }
      float v91 = *(float *)(a1 + v90);
      float v92 = *(float *)(a1 + 160);
      uint64_t v93 = 168;
      if (!*(unsigned char *)(a1 + 191)) {
        uint64_t v93 = 164;
      }
      float v94 = v91 / v92;
      float v95 = (float)(*(float *)(a1 + v93) - v92) / (float)(1.0 - v92);
      *(_DWORD *)(a4 + 84) = 0;
      *(_WORD *)(a4 + 88) = 6;
      float v96 = *(float *)(a4 + 60);
      float v97 = *(float *)(a4 + 64);
      float v98 = *(float *)(a4 + 76);
      float v99 = *(float *)(a4 + 80);
      float v100 = v96 / v98;
      uint64_t v101 = 120;
      if (_ZF) {
        uint64_t v101 = 124;
      }
      float v102 = *(float *)(a1 + v101);
      float v103 = *(float *)(a1 + 128);
      uint64_t v104 = 136;
      if (_ZF) {
        uint64_t v104 = 132;
      }
      float v105 = *(float *)(a1 + v104);
      float v106 = (float)(v103 / v100) + (float)(v92 * (float)(1.0 - (float)(1.0 / v100)));
      float v107 = (float)(v102 / v100) + (float)(v94 * (float)(v106 - (float)(v103 / v100)));
      float v108 = (float)(v106 + (float)((float)(v105 - v103) / v100))
           + (float)(v95 * (float)((float)(1.0 - v106) - (float)((float)(1.0 - v103) / v100)));
      *(float *)(a4 + 92) = *(float *)(a4 + 52) / v97;
      *(float *)(a4 + 96) = (float)(v96 * v107) / v97;
      *(float *)(a4 + 100) = (float)(v96 * v106) / v97;
      *(float *)(a4 + 104) = (float)(v96 * v108) / v97;
      *(float *)(a4 + 108) = v96 / v97;
      *(_DWORD *)(a4 + 112) = 1065353216;
      *(float *)(a4 + 116) = *(float *)(a4 + 68) / v99;
      *(float *)(a4 + 120) = (float)(v98 * v102) / v99;
      *(float *)(a4 + 124) = (float)(v98 * v103) / v99;
      *(float *)(a4 + 128) = (float)(v98 * v105) / v99;
      *(float *)(a4 + 132) = v98 / v99;
      *(_DWORD *)(a4 + 136) = 1065353216;
      float v109 = v102 / v107;
      float v110 = (float)(v103 - v102) / (float)(v106 - v107);
      float v111 = (float)(v105 - v103) / (float)(v108 - v107);
      float v112 = (float)(1.0 - v105) / (float)(1.0 - v108);
      float v113 = v109 + (float)((float)(v110 - v109) * v94);
      float v114 = v111 + (float)((float)(v112 - v111) * v95);
      float v115 = v109 * v109 * (float)(1.0 / v113);
      float v116 = v112 * v112 * (float)(1.0 / v114);
      float v117 = v97 / v99;
      *(float *)(a4 + 140) = v117 * v115;
      *(float *)(a4 + 144) = v113 * v117;
      *(float *)(a4 + 148) = (float)(v110 + (float)((float)(v111 - v110) * v92)) * v117;
      *(float *)(a4 + 152) = v114 * v117;
      *(float *)(a4 + 156) = v117 * v116;
      *(float *)(a4 + 160) = v117 * v116;
      goto LABEL_308;
    case 0xB:
      *(_DWORD *)(a4 + 84) = 3;
      int v191 = *(_DWORD *)(a4 + 52);
      float v192 = *(float *)(a4 + 60);
      int v193 = *(_DWORD *)(a4 + 68);
      if (*(float *)(a4 + 76) >= v192) {
        int v194 = *(_DWORD *)(a4 + 60);
      }
      else {
        int v194 = *(_DWORD *)(a4 + 76);
      }
      float v195 = *(float *)(a1 + 96);
      if (v195 >= 0.0)
      {
        float v251 = powf(v195 * 0.0001, 0.1593);
        LODWORD(v202) = powf((float)((float)(v251 * 18.852) + 0.83594) / (float)((float)(v251 * 18.688) + 1.0), 78.844);
        if (!v7) {
          goto LABEL_308;
        }
      }
      else
      {
        float v196 = powf(v195 * -0.0001, 0.1593);
        *(float *)&double v202 = 0.0000014619
                        - powf((float)((float)(v196 * 18.852) + 0.83594) / (float)((float)(v196 * 18.688) + 1.0), 78.844);
        if (!v7) {
          goto LABEL_308;
        }
      }
      LODWORD(v204) = *(_DWORD *)(a1 + 116);
      LODWORD(v197) = v191;
      *(float *)&double v198 = v192;
      LODWORD(v199) = v193;
      LODWORD(v200) = v194;
      LODWORD(v201) = v191;
      *(float *)&double v203 = v192;
      objc_msgSend(v7, "createToneCurve:srcMaxPQ:tgtMinPQ:tgtMaxPQ:srcCrushPQ:srcMidPQ:srcClipPQ:targetMaxLinear:DM_MetaData:tcCtrl:dm4TmMode:", 0, 0, 1, v197, v198, v199, v200, v201, v202, v203, v204);
      goto LABEL_308;
    case 0xC:
      *(_DWORD *)(a4 + 84) = 3;
      int v421 = *(_DWORD *)(a4 + 52);
      float v77 = *(float *)(a4 + 60);
      int v78 = *(_DWORD *)(a4 + 68);
      if (*(float *)(a4 + 76) >= v77) {
        int v79 = *(_DWORD *)(a4 + 60);
      }
      else {
        int v79 = *(_DWORD *)(a4 + 76);
      }
      float v80 = *(float *)(a1 + 68);
      if (v80 >= 0.0)
      {
        float v209 = powf(v80 * 0.0001, 0.1593);
        float v82 = powf((float)((float)(v209 * 18.852) + 0.83594) / (float)((float)(v209 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v81 = powf(v80 * -0.0001, 0.1593);
        float v82 = 0.0000014619
            - powf((float)((float)(v81 * 18.852) + 0.83594) / (float)((float)(v81 * 18.688) + 1.0), 78.844);
      }
      float v210 = *(float *)(a1 + 80);
      if (v210 >= 0.0)
      {
        float v213 = powf(v210 * 0.0001, 0.1593);
        float v212 = powf((float)((float)(v213 * 18.852) + 0.83594) / (float)((float)(v213 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v211 = powf(v210 * -0.0001, 0.1593);
        float v212 = 0.0000014619
             - powf((float)((float)(v211 * 18.852) + 0.83594) / (float)((float)(v211 * 18.688) + 1.0), 78.844);
      }
      float v214 = *(float *)(a1 + 72);
      if (v214 >= 0.0)
      {
        float v225 = powf(v214 * 0.0001, 0.1593);
        LODWORD(v218) = powf((float)((float)(v225 * 18.852) + 0.83594) / (float)((float)(v225 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v215 = powf(v214 * -0.0001, 0.1593);
        *(float *)&double v218 = 0.0000014619
                        - powf((float)((float)(v215 * 18.852) + 0.83594) / (float)((float)(v215 * 18.688) + 1.0), 78.844);
      }
      BOOL v226 = v15 < 1000.0 && v15 >= *(float *)(a4 + 16);
      if (*(unsigned char *)(a1 + 189) && *(_DWORD *)(a1 + 104) == 1)
      {
        if (*(unsigned char *)(a1 + 191)) {
          BOOL v226 = 0;
        }
        if (v214 > v20) {
          BOOL v226 = 0;
        }
      }
      else
      {
        BOOL v226 = 0;
      }
      int v227 = *(_DWORD *)(a1 + 116);
      *(float *)float v439 = v212;
      LODWORD(v425[0]) = LODWORD(v218);
      if (*(_WORD *)(a2 + 472) || *(_DWORD *)(a1 + 108) != 1)
      {
        if (v226)
        {
          float v228 = GetConfig(v216);
          if (v228)
          {
            float v229 = GetConfig((HDRConfig *)v228);
            float v230 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v229, 0x5Cu, 0);
          }
          else
          {
            float v230 = 0.0;
          }
          float v389 = v214 * v230;
          if (v389 >= v20) {
            float v389 = v20;
          }
          if (v389 >= 0.0)
          {
            float v391 = powf(v389 * 0.0001, 0.1593);
            *(float *)&double v217 = powf((float)((float)(v391 * 18.852) + 0.83594) / (float)((float)(v391 * 18.688) + 1.0), 78.844);
          }
          else
          {
            float v390 = powf(v389 * -0.0001, 0.1593);
            *(float *)&double v217 = 0.0000014619
                            - powf((float)((float)(v390 * 18.852) + 0.83594) / (float)((float)(v390 * 18.688) + 1.0), 78.844);
          }
          LODWORD(v425[0]) = LODWORD(v217);
        }
      }
      else
      {
        adjustDovi84DM4Stats((HDRConfig *)a2, (float *)a1, (float *)v439, (float *)v425, v212, *(float *)&v218);
      }
      if (*(_DWORD *)(a1 + 104) == 2 && *(_DWORD *)(a1 + 108) == 1)
      {
        if (*(unsigned char *)(a2 + 492)) {
          uint64_t v392 = 5;
        }
        else {
          uint64_t v392 = 1;
        }
      }
      else
      {
        uint64_t v392 = 3;
      }
      float v393 = *(float *)v439;
      float v394 = *(float *)v425;
      if (v7)
      {
        LODWORD(v217) = v421;
        *(float *)&double v218 = v77;
        LODWORD(v219) = v78;
        LODWORD(v220) = v79;
        *(float *)&double v221 = v82;
        LODWORD(v222) = v439[0];
        LODWORD(v223) = v425[0];
        LODWORD(v224) = v227;
        objc_msgSend(v7, "createToneCurve:srcMaxPQ:tgtMinPQ:tgtMaxPQ:srcCrushPQ:srcMidPQ:srcClipPQ:targetMaxLinear:DM_MetaData:tcCtrl:dm4TmMode:", 0, 0, v392, v217, v218, v219, v220, v221, v222, v223, v224);
      }
      *(_DWORD *)(a4 + 20) = *(_DWORD *)(a1 + 68);
      float v395 = -(float)(v393 + -0.0000014619);
      if (v393 >= 0.00000073096) {
        float v395 = v393;
      }
      float v424 = v82;
      float v396 = -10000.0;
      if (v393 >= 0.00000073096) {
        float v397 = 10000.0;
      }
      else {
        float v397 = -10000.0;
      }
      float v412 = v397;
      float v398 = powf(v395, 0.012683);
      float v399 = fmax((float)((float)(v398 + -0.83594) / (float)((float)(v398 * -18.688) + 18.852)), 0.0);
      *(float *)(a4 + 24) = v412 * powf(v399, 6.2774);
      float v400 = -(float)(v394 + -0.0000014619);
      if (v394 >= 0.00000073096)
      {
        float v400 = v394;
        float v396 = 10000.0;
      }
      float v401 = powf(v400, 0.012683);
      float v402 = fmax((float)((float)(v401 + -0.83594) / (float)((float)(v401 * -18.688) + 18.852)), 0.0);
      *(float *)(a4 + 28) = v396 * powf(v402, 6.2774);
      *(float *)(a4 + 52) = v424;
      *(float *)(a4 + 56) = v393;
      *(float *)(a4 + 60) = v394;
      goto LABEL_308;
    case 0xD:
      *(_DWORD *)(a4 + 84) = 4;
      *(_DWORD *)(a4 + 96) = *(_DWORD *)(a1 + 200);
      *(_DWORD *)(a4 + 140) = 1065353216;
      *(_DWORD *)(a4 + 148) = 0;
      *(_OWORD *)(a4 + 152) = xmmword_2222D44E0;
      *(_DWORD *)(a4 + 168) = 0;
      uint64_t ConfigEntryValue = (HDRConfig *)GetConfig(Config);
      float v417 = v7;
      if (ConfigEntryValue)
      {
        BOOL v87 = GetConfig(ConfigEntryValue);
        uint64_t ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v87, 0x8Cu, 0);
        int v88 = *(_DWORD *)ConfigEntryValue;
      }
      else
      {
        int v88 = 0;
      }
      float v278 = *(float *)(a1 + 72);
      *(float *)(a4 + 28) = v278;
      float v279 = *(float *)(a4 + 44);
      if (v279 >= v278) {
        float v279 = v278;
      }
      *(float *)(a4 + 44) = v279;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a1 + 80);
      if (v278 >= *(float *)(a1 + 244)) {
        float v280 = *(float *)(a1 + 244);
      }
      else {
        float v280 = v278;
      }
      float v282 = *(float *)(a1 + 192);
      float v281 = *(float *)(a1 + 196);
      float v283 = *(float *)(a1 + 204);
      long long v284 = *(_OWORD *)(a1 + 224);
      long long v441 = *(_OWORD *)(a1 + 208);
      long long v442 = v284;
      int v443 = *(_DWORD *)(a1 + 240);
      if (v279 >= v280)
      {
        float v285 = v278 - v280;
        if (v285 == 0.0) {
          float v286 = 0.0;
        }
        else {
          float v286 = (float)(v279 - v280) / v285;
        }
        *(float *)(a4 + 152) = v286;
      }
      float v329 = GetConfig(ConfigEntryValue);
      if (v329)
      {
        float v330 = GetConfig((HDRConfig *)v329);
        if (*(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v330, 0x60u, 0))
        {
          if (v282 != 0.0) {
            float v283 = v281 / (float)((float)(v282 * (float)(1.0 - v281)) * 10.0);
          }
        }
      }
      *(float *)(a4 + 100) = v283;
      *(float *)(a4 + 144) = v280;
      *(float *)(a4 + 88) = v282;
      *(float *)(a4 + 92) = v281;
      long long v331 = v442;
      *(_OWORD *)(a4 + 104) = v441;
      *(_OWORD *)(a4 + 120) = v331;
      *(_DWORD *)(a4 + 136) = v443;
      unsigned int v332 = (unsigned __int16)(*(_WORD *)(a4 + 96) + 1);
      *(float *)(a4 + 140) = (float)(1.0 - v281)
                           * ebz_prime(v332, a4 + 100, (float)(0.99805 - v282) / (float)(1.0 - v282));
      float v333 = *(float *)(a4 + 28);
      float v334 = *(float *)(a4 + 24) / v333;
      if (v334 >= v282) {
        float v335 = v281
      }
             + (float)((float)(1.0 - v281)
                     * ebz_norm(v332, (float *)(a4 + 100), (float)(v334 - v282) / (float)(1.0 - v282)));
      else {
        float v335 = (float)(v281 * v334) / v282;
      }
      float v336 = v280 * v335;
      float v337 = *(float *)(a4 + 44);
      if (v417 && v280 > v337 && v88 == 2)
      {
        int v338 = *(_DWORD *)(a4 + 52);
        int v339 = *(_DWORD *)(a4 + 60);
        int v340 = *(_DWORD *)(a4 + 68);
        if (v337 >= 0.0)
        {
          float v351 = powf(v337 * 0.0001, 0.1593);
          float v342 = powf((float)((float)(v351 * 18.852) + 0.83594) / (float)((float)(v351 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v341 = powf(v337 * -0.0001, 0.1593);
          float v342 = 0.0000014619
               - powf((float)((float)(v341 * 18.852) + 0.83594) / (float)((float)(v341 * 18.688) + 1.0), 78.844);
        }
        float v352 = *(float *)(a1 + 68);
        if (v352 >= 0.0)
        {
          float v355 = powf(v352 * 0.0001, 0.1593);
          float v354 = powf((float)((float)(v355 * 18.852) + 0.83594) / (float)((float)(v355 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v353 = powf(v352 * -0.0001, 0.1593);
          float v354 = 0.0000014619
               - powf((float)((float)(v353 * 18.852) + 0.83594) / (float)((float)(v353 * 18.688) + 1.0), 78.844);
        }
        if (v336 >= 0.0)
        {
          float v358 = powf(v336 * 0.0001, 0.1593);
          float v357 = powf((float)((float)(v358 * 18.852) + 0.83594) / (float)((float)(v358 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v356 = powf(v336 * -0.0001, 0.1593);
          float v357 = 0.0000014619
               - powf((float)((float)(v356 * 18.852) + 0.83594) / (float)((float)(v356 * 18.688) + 1.0), 78.844);
        }
        if (v280 >= 0.0)
        {
          float v368 = powf(v280 * 0.0001, 0.1593);
          LODWORD(v366) = powf((float)((float)(v368 * 18.852) + 0.83594) / (float)((float)(v368 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v359 = powf(v280 * -0.0001, 0.1593);
          *(float *)&double v366 = 0.0000014619
                          - powf((float)((float)(v359 * 18.852) + 0.83594) / (float)((float)(v359 * 18.688) + 1.0), 78.844);
        }
        LODWORD(v367) = *(_DWORD *)(a1 + 116);
        LODWORD(v360) = v338;
        LODWORD(v361) = v339;
        LODWORD(v362) = v340;
        *(float *)&double v363 = v342;
        *(float *)&double v364 = v354;
        *(float *)&double v365 = v357;
        objc_msgSend(v417, "createToneCurve:srcMaxPQ:tgtMinPQ:tgtMaxPQ:srcCrushPQ:srcMidPQ:srcClipPQ:targetMaxLinear:DM_MetaData:tcCtrl:dm4TmMode:", 0, 0, 3, v360, v361, v362, v363, v364, v365, v366, v367);
        int v350 = 2;
        goto LABEL_265;
      }
      if (v280 > v337 && v88 == 1)
      {
        int v440 = 0;
        memset(v439, 0, sizeof(v439));
        long long v343 = *(_OWORD *)(a1 + 208);
        long long v435 = *(_OWORD *)(a1 + 192);
        long long v436 = v343;
        long long v437 = *(_OWORD *)(a1 + 224);
        uint64_t v438 = *(void *)(a1 + 240);
        long long v344 = *(_OWORD *)(a1 + 144);
        long long v431 = *(_OWORD *)(a1 + 128);
        long long v432 = v344;
        long long v345 = *(_OWORD *)(a1 + 176);
        long long v433 = *(_OWORD *)(a1 + 160);
        long long v434 = v345;
        long long v346 = *(_OWORD *)(a1 + 80);
        long long v427 = *(_OWORD *)(a1 + 64);
        long long v428 = v346;
        long long v347 = *(_OWORD *)(a1 + 112);
        long long v429 = *(_OWORD *)(a1 + 96);
        long long v430 = v347;
        long long v348 = *(_OWORD *)(a1 + 16);
        v425[0] = *(_OWORD *)a1;
        v425[1] = v348;
        long long v349 = *(_OWORD *)(a1 + 48);
        v425[2] = *(_OWORD *)(a1 + 32);
        long long v426 = v349;
        HIDWORD(v425[0]) = 3;
        DWORD1(v430) = *(_DWORD *)(a1 + 116);
        *((float *)&v426 + 2) = v337;
        *((float *)&v426 + 3) = v337;
        *((float *)&v427 + 2) = v333;
        *(float *)&long long v428 = v336;
        dovi_calculateTonemapCurveParamS((uint64_t)v425, a2, (uint64_t)v439);
        *(_OWORD *)(a4 + 156) = *(_OWORD *)((char *)&v439[5] + 8);
        *(_DWORD *)(a4 + 20) = DWORD2(v439[1]);
        *(_OWORD *)(a4 + 36) = *(_OWORD *)((char *)&v439[2] + 8);
        int v350 = 1;
LABEL_265:
        *(_DWORD *)(a4 + 148) = v350;
        goto LABEL_266;
      }
      if (v280 > v337 && !v88)
      {
        *(_DWORD *)(a4 + 148) = 0;
        *(float *)(a4 + 144) = v337;
      }
LABEL_266:
      float v369 = *(float *)(a4 + 20);
      if (v369 >= 0.0)
      {
        float v372 = powf(v369 * 0.0001, 0.1593);
        float v371 = powf((float)((float)(v372 * 18.852) + 0.83594) / (float)((float)(v372 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v370 = powf(v369 * -0.0001, 0.1593);
        float v371 = 0.0000014619
             - powf((float)((float)(v370 * 18.852) + 0.83594) / (float)((float)(v370 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a4 + 52) = v371;
      float v373 = *(float *)(a4 + 36);
      if (v373 >= 0.0)
      {
        float v376 = powf(v373 * 0.0001, 0.1593);
        float v375 = powf((float)((float)(v376 * 18.852) + 0.83594) / (float)((float)(v376 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v374 = powf(v373 * -0.0001, 0.1593);
        float v375 = 0.0000014619
             - powf((float)((float)(v374 * 18.852) + 0.83594) / (float)((float)(v374 * 18.688) + 1.0), 78.844);
      }
      id v7 = v417;
      *(float *)(a4 + 68) = v375;
      float v377 = *(float *)(a4 + 44);
      if (v377 >= 0.0)
      {
        float v380 = powf(v377 * 0.0001, 0.1593);
        float v379 = powf((float)((float)(v380 * 18.852) + 0.83594) / (float)((float)(v380 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v378 = powf(v377 * -0.0001, 0.1593);
        float v379 = 0.0000014619
             - powf((float)((float)(v378 * 18.852) + 0.83594) / (float)((float)(v378 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a4 + 76) = v379;
      float v381 = *(float *)(a4 + 48);
      if (v381 >= 0.0)
      {
        float v384 = powf(v381 * 0.0001, 0.1593);
        float v383 = powf((float)((float)(v384 * 18.852) + 0.83594) / (float)((float)(v384 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v382 = powf(v381 * -0.0001, 0.1593);
        float v383 = 0.0000014619
             - powf((float)((float)(v382 * 18.852) + 0.83594) / (float)((float)(v382 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a4 + 80) = v383;
      float v385 = *(float *)(a4 + 24);
      if (v385 >= 0.0)
      {
        float v388 = powf(v385 * 0.0001, 0.1593);
        float v387 = powf((float)((float)(v388 * 18.852) + 0.83594) / (float)((float)(v388 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v386 = powf(v385 * -0.0001, 0.1593);
        float v387 = 0.0000014619
             - powf((float)((float)(v386 * 18.852) + 0.83594) / (float)((float)(v386 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a4 + 56) = v387;
LABEL_308:
      if (*(_DWORD *)(a4 + 84) == 1 && LODWORD(v8) != 6)
      {
        unint64_t v403 = *(unsigned __int16 *)(a4 + 88);
        if (v403 >= 2)
        {
          uint64_t v404 = (v403 - 1);
          float v405 = (_WORD *)(a4 + 164);
          float v406 = (_DWORD *)(a4 + 184);
          float v407 = (float *)(a4 + 144);
          __asm { FMOV            V2.4S, #1.0 }
          do
          {
            *v405++ = 4;
            float v409 = (float)(*(v407 - 12) - *(v407 - 13)) / (float)(*(v407 - 6) - *(v407 - 7));
            float32x4_t v410 = vminnmq_f32(vmlaq_n_f32(_Q2, (float32x4_t)xmmword_2222D4510, (float)(*v407 * v409) * 0.25), _Q2);
            float32x4_t v411 = vmlaq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v410, (float32x4_t)xmmword_2222D4520), (int8x16_t)vcgtzq_f32(v410)), (float32x4_t)xmmword_2222D4530, vmaxnmq_f32(vminnmq_f32(vmulq_n_f32((float32x4_t)xmmword_2222D4500, (float)(*(v407 - 1) * v409) * 0.25), _Q2), (float32x4_t)0));
            *((void *)v406 - 1) = v411.i64[0];
            *float v406 = v411.i32[2];
            v406 += 14;
            ++v407;
            --v404;
          }
          while (v404);
        }
      }
LABEL_313:

      return;
    default:
      *(unsigned char *)a4 = 0;
      *(_DWORD *)(a4 + 20) = 0;
      *(float *)(a4 + 28) = v20;
      *(void *)(a4 + 32) = 1176256512;
      *(float *)(a4 + 44) = v20;
      *(void *)(a4 + 48) = 1176256512;
      if (v20 >= 0.0)
      {
        float v245 = powf(v20 * 0.0001, 0.1593);
        float v190 = powf((float)((float)(v245 * 18.852) + 0.83594) / (float)((float)(v245 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v189 = powf(v20 * -0.0001, 0.1593);
        float v190 = 0.0000014619
             - powf((float)((float)(v189 * 18.852) + 0.83594) / (float)((float)(v189 * 18.688) + 1.0), 78.844);
      }
      *(float *)(a4 + 60) = v190;
      *(void *)(a4 + 64) = 1065353216;
      *(float *)(a4 + 76) = v190;
      *(void *)(a4 + 80) = 1065353216;
      *(_WORD *)(a4 + 88) = 4;
      *(_DWORD *)(a4 + 92) = 0;
      float v246 = (float)(v190 + 0.0) * 0.5;
      *(float *)(a4 + 96) = v246;
      *(float *)(a4 + 100) = v190;
      *(_DWORD *)(a4 + 104) = 1065353216;
      *(_DWORD *)(a4 + 116) = 0;
      *(float *)(a4 + 120) = v246;
      *(float *)(a4 + 124) = v190;
      *(_DWORD *)(a4 + 128) = 1065353216;
      __asm { FMOV            V0.4S, #1.0 }
LABEL_210:
      *(float32x4_t *)(a4 + 140) = _Q0;
      goto LABEL_308;
  }
}

void sub_2222B322C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float hdr10_applyTonemapCurveS(const _HDR10TMParam *a1, void *a2, float a3)
{
  int8x8_t v5 = a2;
  id v7 = v5;
  if (a1->on)
  {
    switch(a1->tmCurveParam.curveType)
    {
      case 0:
        a3 = spl_apply(a1->tmCurveParam.param.spl.n, a1->tmCurveParam.param.spl.XsC, a1->tmCurveParam.param.spl.YsC, (uint64_t)&a1->tmCurveParam.param.hdr10Plus.slopeAtTmax, a3);
        goto LABEL_11;
      case 1:
        if (a1->tmCurveParam.param.spl.XsC[0] > a3)
        {
          a3 = a1->tmCurveParam.param.spl.YsC[0];
          goto LABEL_11;
        }
        unint64_t n = a1->tmCurveParam.param.spl.n;
        if (n < 2) {
          goto LABEL_16;
        }
        uint64_t v13 = 0;
        float v14 = &a1->tmCurveParam.param.spl.YsC[1];
        break;
      case 2:
        float v8 = powf(a1->tm_Send_C * a3, a1->tmCurveParam.param.dovi.sl);
        float v9 = fmax((float)((float)(a1->tmCurveParam.param.spl.XsC[0] + (float)(a1->tmCurveParam.param.spl.XsC[1] * v8))/ (float)((float)(a1->tmCurveParam.param.spl.XsC[2] * v8) + 1.0)), 0.0);
        float v10 = powf(v9, 0.33333);
        goto LABEL_10;
      case 3:
        if (!v5) {
          goto LABEL_11;
        }
        *(float *)&double v6 = a1->tm_Send_C * a3;
        [(DolbyVisionDM4 *)v5 toneMapI:v6];
LABEL_10:
        a3 = v10 / a1->tm_Tend_C;
        goto LABEL_11;
      case 4:
        float v10 = hdr10_applyTonemapCurveS_C_BezierHDR10Plus(a1->tm_Send_C * a3, a1, v5);
        goto LABEL_10;
      default:
        goto LABEL_11;
    }
    while (1)
    {
      float v15 = *(v14 - 6);
      if (v15 > a3) {
        break;
      }
      v13 += 0x100000000;
      ++v14;
      if ((n << 32) - 0x100000000 == v13)
      {
LABEL_16:
        a3 = a1->tmCurveParam.param.spl.XsC[n + 5];
        goto LABEL_11;
      }
    }
    float v16 = (float *)(&a1->on + (v13 >> 30));
    float v17 = v16[23];
    float v18 = v15 - v17;
    float v19 = v16[29];
    if (v18 == 0.0)
    {
      a3 = v16[29];
    }
    else
    {
      float v20 = *v14 - v19;
      a3 = v19
         + (float)(v20
                 * ebz_norm(a1->tmCurveParam.param.ebz.ms[v13 >> 32], &a1->tmCurveParam.param.spl.splCs[0][14 * SHIDWORD(v13) + 3], (float)(a3 - v17) / v18));
    }
  }
LABEL_11:

  return a3;
}

void sub_2222B3474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float hdr10_applyTonemapCurveS_C_BezierHDR10Plus(float a1, const _HDR10TMParam *a2, DolbyVisionDM4 *a3)
{
  int8x8_t v5 = a3;
  int numBezierAnchors = a2->tmCurveParam.param.hdr10Plus.numBezierAnchors;
  float sl = a2->tmCurveParam.param.dovi.sl;
  float v8 = a2->tmCurveParam.param.spl.XsC[0];
  float v9 = a2->tmCurveParam.param.spl.MsC[3];
  float v10 = -(float)(a1 + -0.0000014619);
  if (a1 >= 0.00000073096) {
    float v10 = a1;
  }
  float v11 = flt_2222D1868[a1 < 0.00000073096];
  float v12 = powf(v10, 0.012683);
  float v13 = fmax((float)((float)(v12 + -0.83594) / (float)((float)(v12 * -18.688) + 18.852)), 0.0);
  float v14 = v11 * powf(v13, 6.2774);
  float v15 = v14 / a2->tm_Smax_nits;
  if (v15 <= 1.0)
  {
    if (sl <= 0.0 || v15 >= sl) {
      float v16 = v8
    }
          + (float)((float)(1.0 - v8)
                  * ebz_norm((unsigned __int16)(numBezierAnchors + 1), &a2->tmCurveParam.param.spl.XsC[2], (float)(v15 - sl) / (float)(1.0 - sl)));
    else {
      float v16 = (float)(v8 * v15) / sl;
    }
  }
  else
  {
    float v16 = (v15 + -1.0) * a2->tmCurveParam.param.spl.MsC[0] + 1.0;
  }
  float v17 = v16 * a2->tmCurveParam.param.spl.MsC[1];
  int hdr10PlusProfileBMode = a2->tmCurveParam.param.hdr10Plus.hdr10PlusProfileBMode;
  if (hdr10PlusProfileBMode != 1)
  {
    if (hdr10PlusProfileBMode != 2)
    {
      float v23 = (float)((float)(1.0 - v9) * v17) + (float)(v14 * v9);
      goto LABEL_26;
    }
    if (v17 >= 0.0)
    {
      float v24 = powf(v17 * 0.0001, 0.1593);
      *(float *)&double v20 = powf((float)((float)(v24 * 18.852) + 0.83594) / (float)((float)(v24 * 18.688) + 1.0), 78.844);
      if (!v5)
      {
LABEL_19:
        BOOL v25 = *(float *)&v20 < 0.00000073096;
        if (*(float *)&v20 < 0.00000073096) {
          *(float *)&double v20 = -(float)(*(float *)&v20 + -0.0000014619);
        }
        float v26 = flt_2222D1868[v25];
        float v27 = powf(*(float *)&v20, 0.012683);
        float v28 = fmax((float)((float)(v27 + -0.83594) / (float)((float)(v27 * -18.688) + 18.852)), 0.0);
        float v23 = v26 * powf(v28, 6.2774);
        goto LABEL_26;
      }
    }
    else
    {
      float v19 = powf(v17 * -0.0001, 0.1593);
      *(float *)&double v20 = 0.0000014619
                     - powf((float)((float)(v19 * 18.852) + 0.83594) / (float)((float)(v19 * 18.688) + 1.0), 78.844);
      if (!v5) {
        goto LABEL_19;
      }
    }
    [(DolbyVisionDM4 *)v5 toneMapI:v20];
    goto LABEL_19;
  }
  if (v17 >= 0.0)
  {
    float v29 = powf(v17 * 0.0001, 0.1593);
    float v22 = powf((float)((float)(v29 * 18.852) + 0.83594) / (float)((float)(v29 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v21 = powf(v17 * -0.0001, 0.1593);
    float v22 = 0.0000014619 - powf((float)((float)(v21 * 18.852) + 0.83594) / (float)((float)(v21 * 18.688) + 1.0), 78.844);
  }
  float v30 = powf(v22, a2->tmCurveParam.param.spl.MsC[4]);
  float v31 = fmax((float)((float)(a2->tmCurveParam.param.spl.MsC[5] + (float)(a2->tmCurveParam.param.spl.splCs[0][0] * v30))/ (float)((float)(a2->tmCurveParam.param.spl.splCs[0][1] * v30) + 1.0)), 0.0);
  float v32 = powf(v31, 0.33333);
  BOOL v33 = v32 < 0.00000073096;
  if (v32 < 0.00000073096) {
    float v32 = -(float)(v32 + -0.0000014619);
  }
  float v34 = flt_2222D1868[v33];
  float v35 = powf(v32, 0.012683);
  float v36 = fmax((float)((float)(v35 + -0.83594) / (float)((float)(v35 * -18.688) + 18.852)), 0.0);
  float v23 = v34 * powf(v36, 6.2774);
LABEL_26:
  if (v23 >= 0.0)
  {
    float v39 = powf(v23 * 0.0001, 0.1593);
    float v38 = powf((float)((float)(v39 * 18.852) + 0.83594) / (float)((float)(v39 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v37 = powf(v23 * -0.0001, 0.1593);
    float v38 = 0.0000014619 - powf((float)((float)(v37 * 18.852) + 0.83594) / (float)((float)(v37 * 18.688) + 1.0), 78.844);
  }

  return v38;
}

void sub_2222B392C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void hdr10_applyTonemapCurveS_C_Bezier(float a1, const _HDR10TMParam *a2)
{
  float v2 = a1 / a2->tm_Send_C;
  if (v2 >= a2->tmCurveParam.param.spl.XsC[0])
  {
    uint64_t n = a2->tmCurveParam.param.spl.n;
    if (*(&a2->tmCurveParam.param.dovi.sl + n) > v2 && n >= 2)
    {
      uint64_t v4 = 0;
      int8x8_t v5 = &a2->tmCurveParam.param.spl.YsC[1];
      uint64_t v6 = (n << 32) - 0x100000000;
      while (1)
      {
        float v7 = *(v5 - 6);
        if (v2 < v7) {
          break;
        }
        v4 += 0x100000000;
        ++v5;
        if (v6 == v4) {
          return;
        }
      }
      float v8 = *(float *)((char *)a2->tmCurveParam.param.spl.XsC + (v4 >> 30));
      if ((float)(v7 - v8) != 0.0) {
        ebz_norm(a2->tmCurveParam.param.ebz.ms[v4 >> 32], &a2->tmCurveParam.param.spl.splCs[0][14 * SHIDWORD(v4) + 3], (float)(v2 - v8) / (float)(v7 - v8));
      }
    }
  }
}

void hdr10_applyTonemapCurveS_C_Bezier_abs(float a1, const _HDR10TMParam *a2)
{
  if (a2->tmCurveParam.param.ebz.XsCA[0] <= a1)
  {
    uint64_t n = a2->tmCurveParam.param.spl.n;
    if (a2->tmCurveParam.param.ebz.arrPsC[4][n + 13] > a1 && n >= 2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (n << 32) - 0x100000000;
      for (uint64_t i = a2; ; uint64_t i = (const _HDR10TMParam *)((char *)i + 4))
      {
        float v6 = i->tmCurveParam.param.ebz.XsCA[1];
        if (v6 > a1) {
          break;
        }
        v3 += 0x100000000;
        if (v4 == v3) {
          return;
        }
      }
      float v7 = *(float *)((char *)a2->tmCurveParam.param.ebz.XsCA + (v3 >> 30));
      float v8 = v6 - v7;
      if (v8 != 0.0) {
        ebz_norm(a2->tmCurveParam.param.ebz.ms[v3 >> 32], &a2->tmCurveParam.param.spl.splCs[0][14 * SHIDWORD(v3) + 3], (float)(a1 - v7) / v8);
      }
    }
  }
}

float hdr10_applyTonemapCurveS_C_PolyGeneric(float a1, const _HDR10TMParam *a2)
{
  float v3 = a1;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2->tmCurveParam.param.ebz.XsCA[0] > a1)
  {
    YsC = a2->tmCurveParam.param.spl.YsC;
LABEL_5:
    float v6 = *YsC;
    return v6 * a2->tm_Tend_C;
  }
  uint64_t n = a2->tmCurveParam.param.spl.n;
  if (a2->tmCurveParam.param.ebz.arrPsC[4][n + 13] < a1)
  {
    YsC = &a2->tmCurveParam.param.spl.XsC[n + 5];
    goto LABEL_5;
  }
  if (n < 2) {
    return v3;
  }
  uint64_t v8 = 0;
  for (uint64_t i = &a2->tmCurveParam.param.ebz.XsCA[1]; ; ++i)
  {
    float v10 = *i;
    if (*i >= v3) {
      break;
    }
    v8 += 0x100000000;
    if ((n << 32) - 0x100000000 == v8) {
      return v3;
    }
  }
  uint64_t v11 = 0;
  float v12 = *(float *)((char *)a2->tmCurveParam.param.ebz.XsCA + (v8 >> 30));
  v20[0] = -v12;
  v20[1] = 1.0;
  float v13 = v10 - v12;
  float v14 = (char *)&a2->tmCurveParam.param.hdr10Plus + 60 * SHIDWORD(v8) + 692;
  float v6 = 0.0;
  do
  {
    uint64_t v15 = 0;
    float v16 = *(float *)&v14[4 * v11];
    float v17 = 0.0;
    do
    {
      float v18 = v20[v15];
      float v17 = v17 + (float)(v18 * powf(v3, (float)(int)v15++));
    }
    while (v15 != 2);
    float v6 = v6 + (float)(v16 * powf(v17 / v13, (float)(int)v11));
  }
  while (v11++ != n);
  return v6 * a2->tm_Tend_C;
}

float hdr10_applyTonemapCurveS_C_PolyStd(float a1, const _HDR10TMParam *a2)
{
  float v3 = a1;
  if (a2->tmCurveParam.param.ebz.XsCA[0] > a1)
  {
    YsC = a2->tmCurveParam.param.spl.YsC;
LABEL_5:
    float v6 = *YsC;
    return v6 * a2->tm_Tend_C;
  }
  uint64_t n = a2->tmCurveParam.param.spl.n;
  if (a2->tmCurveParam.param.ebz.arrPsC[4][n + 13] < a1)
  {
    YsC = &a2->tmCurveParam.param.spl.XsC[n + 5];
    goto LABEL_5;
  }
  if (n < 2) {
    return v3;
  }
  uint64_t v8 = 0;
  for (uint64_t i = &a2->tmCurveParam.param.ebz.XsCA[1]; *i < a1; ++i)
  {
    v8 += 0x100000000;
    if ((n << 32) - 0x100000000 == v8) {
      return v3;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = (char *)&a2->tmCurveParam.param.hdr10Plus + 60 * SHIDWORD(v8) + 992;
  uint64_t v12 = n + 1;
  float v6 = 0.0;
  do
  {
    float v13 = *(float *)&v11[4 * v10];
    float v6 = v6 + (float)(v13 * powf(v3, (float)(int)v10++));
  }
  while (v12 != v10);
  return v6 * a2->tm_Tend_C;
}

float hdr10_applyTonemapCurveS_C(const _HDR10TMParam *a1, void *a2, float a3)
{
  int8x8_t v5 = a2;
  float v7 = v5;
  if (a1->on)
  {
    switch(a1->tmCurveParam.curveType)
    {
      case 0:
        a3 = spl_apply(a1->tmCurveParam.param.spl.n, a1->tmCurveParam.param.spl.XsC, a1->tmCurveParam.param.spl.YsC, (uint64_t)&a1->tmCurveParam.param.hdr10Plus.slopeAtTmax, a3 / a1->tm_Send_C)* a1->tm_Tend_C;
        goto LABEL_11;
      case 1:
        float v8 = a3 / a1->tm_Send_C;
        if (v8 >= a1->tmCurveParam.param.spl.XsC[0])
        {
          uint64_t n = a1->tmCurveParam.param.spl.n;
          if (*(&a1->tmCurveParam.param.dovi.sl + n) <= v8)
          {
            float v9 = a1->tmCurveParam.param.spl.XsC[n + 5];
          }
          else
          {
            if (n < 2) {
              goto LABEL_25;
            }
            uint64_t v17 = 0;
            float v18 = &a1->tmCurveParam.param.spl.YsC[1];
            uint64_t v19 = (n << 32) - 0x100000000;
            while (1)
            {
              float v20 = *(v18 - 6);
              if (v8 < v20) {
                break;
              }
              v17 += 0x100000000;
              ++v18;
              if (v19 == v17) {
                goto LABEL_25;
              }
            }
            float v23 = (float *)(&a1->on + (v17 >> 30));
            float v24 = v23[23];
            float v25 = v20 - v24;
            float v9 = v23[29];
            if (v25 != 0.0)
            {
              float v26 = *v18 - v9;
              float v9 = v9
                 + (float)(v26
                         * ebz_norm(a1->tmCurveParam.param.ebz.ms[v17 >> 32], &a1->tmCurveParam.param.spl.splCs[0][14 * SHIDWORD(v17) + 3], (float)(v8 - v24) / v25));
            }
          }
        }
        else
        {
          float v9 = a1->tmCurveParam.param.spl.YsC[0];
        }
        a3 = v9 * a1->tm_Tend_C;
LABEL_25:
        uint64_t Config = GetConfig(v5);
        if (Config)
        {
          float v22 = GetConfig((HDRConfig *)Config);
          HDRConfig::GetConfigEntryValue((uint64_t)v22, 0x4Bu, 0);
        }
LABEL_11:
        int linearStretchMode = a1->linearStretchMode;
        if (linearStretchMode == 1)
        {
          float nonlinearScaler = a1->nonlinearScaler;
          if (nonlinearScaler != 1.0) {
            a3 = a1->nonlinearOffset + (float)((float)(a3 - a1->nonlinearOffset) * nonlinearScaler);
          }
        }
        else if (!linearStretchMode)
        {
          a3 = applyLinearStretchInPQ(a3, a1->linearScaler, a1->linearOffset);
        }
        break;
      case 2:
        float v10 = powf(a3, a1->tmCurveParam.param.dovi.sl);
        float v11 = fmax((float)((float)(a1->tmCurveParam.param.spl.XsC[0] + (float)(a1->tmCurveParam.param.spl.XsC[1] * v10))/ (float)((float)(a1->tmCurveParam.param.spl.XsC[2] * v10) + 1.0)), 0.0);
        float v12 = powf(v11, 0.33333);
        goto LABEL_10;
      case 3:
        if (!v5) {
          goto LABEL_11;
        }
        *(float *)&double v6 = a3;
        [(HDRConfig *)v5 toneMapI:v6];
LABEL_10:
        a3 = v12;
        goto LABEL_11;
      case 4:
        float v12 = hdr10_applyTonemapCurveS_C_BezierHDR10Plus(a3, a1, (DolbyVisionDM4 *)v5);
        goto LABEL_10;
      default:
        goto LABEL_11;
    }
  }

  return a3;
}

void sub_2222B3FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void hdr10_generateEdrAdaptationDataS(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v81 = a4;
  int v9 = *(_DWORD *)(a1 + 92);
  float v10 = *(float *)(a1 + 96);
  float v11 = *(float *)(a2 + 8);
  if (v11 >= 0.0)
  {
    float v14 = powf(v11 * 0.0001, 0.1593);
    float v13 = powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v12 = powf(v11 * -0.0001, 0.1593);
    float v13 = 0.0000014619 - powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
  }
  float v15 = *(float *)(a1 + 116);
  if (v15 >= 0.0)
  {
    float v18 = powf(v15 * 0.0001, 0.1593);
    float v17 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v16 = powf(v15 * -0.0001, 0.1593);
    float v17 = 0.0000014619 - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
  }
  float v19 = *(float *)(a2 + 68);
  float v20 = *(float *)(a2 + 76);
  float v21 = *(float *)(a2 + 80);
  BOOL v22 = v17 < v20 && (*(_DWORD *)(a2 + 1396) & 0xFFFFFFFE) == 2;
  float v23 = *(float *)(a2 + 60);
  *(_DWORD *)a5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a5 + 4) = *(_DWORD *)(a1 + 24);
  *(float *)(a5 + 8) = v13;
  *(float *)(a5 + 12) = v19;
  *(float *)(a5 + 16) = v21;
  int v24 = *(unsigned __int8 *)(a3 + 481);
  if (*(unsigned char *)(a3 + 481))
  {
    if (v22) {
      float v17 = v20;
    }
    *(float *)(a5 + 16) = v17;
  }
  if (v10 >= 0.0)
  {
    float v27 = powf(v10 * 0.0001, 0.1593);
    float v26 = powf((float)((float)(v27 * 18.852) + 0.83594) / (float)((float)(v27 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v25 = powf(v10 * -0.0001, 0.1593);
    float v26 = 0.0000014619 - powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a5 + 20) = v26;
  *(_DWORD *)(a5 + 24) = v9;
  if (v24) {
    float v28 = hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)a2, v81, v26);
  }
  else {
    float v28 = hdr10_applyTonemapCurveS((const _HDR10TMParam *)a2, v81, v26 / *(float *)(a2 + 64)) * *(float *)(a2 + 80);
  }
  *(float *)(a5 + 28) = v28;
  uint64_t v29 = 116;
  if (v22) {
    uint64_t v29 = 60;
  }
  float v30 = *(float *)(a1 + v29) / *(float *)(a1 + 112);
  if (v30 >= 0.0)
  {
    float v33 = powf(v30 * 0.0001, 0.1593);
    float v32 = powf((float)((float)(v33 * 18.852) + 0.83594) / (float)((float)(v33 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v31 = powf(v30 * -0.0001, 0.1593);
    float v32 = 0.0000014619 - powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a5 + 32) = v32;
  *(_OWORD *)(a5 + 72) = xmmword_2222D40F0;
  *(void *)(a5 + 88) = 0x3F0000003F800000;
  *(_DWORD *)(a5 + 96) = 1065353216;
  float v34 = (float)((float)(v23 * v32) / *(float *)(a5 + 20)) - v19;
  if (*(unsigned char *)(a3 + 481)) {
    float v35 = v21;
  }
  else {
    float v35 = v20;
  }
  *(float *)(a5 + 100) = v19;
  *(float *)(a5 + 104) = fminf(v34 / (float)(v35 - v19), 1.0);
  *(_DWORD *)(a5 + 108) = *(_DWORD *)(a2 + 52);
  uint64_t v36 = *(void *)(a2 + 56);
  *(void *)(a5 + 112) = v36;
  *(float *)(a5 + 120) = hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)a2, v81, *(float *)&v36);
  float v38 = hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)a2, v81, *(float *)(a5 + 116));
  int v39 = *(_DWORD *)(a1 + 36);
  *(float *)(a5 + 124) = v38;
  *(_DWORD *)(a5 + 128) = v39;
  *(unsigned char *)(a5 + 132) = *(unsigned char *)(a1 + 188);
  *(_OWORD *)(a5 + 136) = xmmword_2222D4100;
  *(_DWORD *)(a5 + 152) = 1036831949;
  *(_WORD *)(a5 + 156) = 257;
  *(unsigned char *)(a5 + 158) = *(_DWORD *)a5 != 17;
  *(unsigned char *)(a5 + 159) = 1;
  if (*(unsigned char *)(a1 + 191))
  {
    uint64_t Config = (HDRConfig *)GetConfig(Config);
    if (Config)
    {
      float v40 = GetConfig(Config);
      uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v40, 0x8Fu, 0);
      if (*(unsigned char *)Config)
      {
        uint64_t ConfigEntryValue = (HDRConfig *)GetConfig(Config);
        float v42 = 0.0;
        float v43 = 0.0;
        if (ConfigEntryValue)
        {
          int v44 = GetConfig(ConfigEntryValue);
          uint64_t ConfigEntryValue = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v44, 0x91u, 0);
          float v43 = *(float *)ConfigEntryValue;
        }
        int v45 = GetConfig(ConfigEntryValue);
        if (v45)
        {
          float v46 = GetConfig((HDRConfig *)v45);
          float v42 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v46, 0x92u, 0);
        }
        float v47 = *(float *)(a1 + 116) / *(float *)(a1 + 112);
        if (v47 >= 0.0)
        {
          float v50 = powf(v47 * 0.0001, 0.1593);
          float v49 = powf((float)((float)(v50 * 18.852) + 0.83594) / (float)((float)(v50 * 18.688) + 1.0), 78.844);
        }
        else
        {
          float v48 = powf(v47 * -0.0001, 0.1593);
          float v49 = 0.0000014619
              - powf((float)((float)(v48 * 18.852) + 0.83594) / (float)((float)(v48 * 18.688) + 1.0), 78.844);
        }
        if (v49 < 0.1499) {
          float v49 = 0.1499;
        }
        float v51 = (float)(v49 + -0.1499) / 0.257;
        if (v49 >= 0.4069) {
          float v51 = 1.0;
        }
        *(float *)(a5 + 136) = (float)(v43 * (float)(1.0 - v51)) + (float)(v51 * v42);
        *(float *)(a5 + 144) = v51 + (float)(1.0 - v51);
      }
    }
  }
  uint64_t v52 = (uint64_t)GetConfig(Config);
  if (v52)
  {
    uint64_t v52 = (uint64_t)GetConfig((HDRConfig *)v52);
    if (*(_DWORD *)(v52 + 12684))
    {
      if ((*(unsigned char *)(v52 + 12680) & 0x80) != 0)
      {
        uint64_t v52 = (uint64_t)GetConfig((HDRConfig *)v52);
        if (v52)
        {
          float v53 = GetConfig((HDRConfig *)v52);
          uint64_t v52 = HDRConfig::GetConfigEntryValue((uint64_t)v53, 0x90u, 0);
          int v54 = *(_DWORD *)v52;
        }
        else
        {
          int v54 = 0;
        }
        *(_DWORD *)(a5 + 136) = v54;
      }
    }
  }
  uint64_t v55 = (uint64_t)GetConfig((HDRConfig *)v52);
  if (v55)
  {
    uint64_t v55 = (uint64_t)GetConfig((HDRConfig *)v55);
    if (*(_DWORD *)(v55 + 12948))
    {
      if ((*(unsigned char *)(v55 + 12944) & 0x80) != 0)
      {
        uint64_t v55 = (uint64_t)GetConfig((HDRConfig *)v55);
        if (v55)
        {
          float v56 = GetConfig((HDRConfig *)v55);
          uint64_t v55 = HDRConfig::GetConfigEntryValue((uint64_t)v56, 0x93u, 0);
          int v57 = *(_DWORD *)v55;
        }
        else
        {
          int v57 = 0;
        }
        *(_DWORD *)(a5 + 140) = v57;
      }
    }
  }
  uint64_t v58 = (uint64_t)GetConfig((HDRConfig *)v55);
  if (v58)
  {
    uint64_t v58 = (uint64_t)GetConfig((HDRConfig *)v58);
    if (*(_DWORD *)(v58 + 13036))
    {
      if ((*(unsigned char *)(v58 + 13032) & 0x80) != 0)
      {
        uint64_t v58 = (uint64_t)GetConfig((HDRConfig *)v58);
        if (v58)
        {
          float v59 = GetConfig((HDRConfig *)v58);
          uint64_t v58 = HDRConfig::GetConfigEntryValue((uint64_t)v59, 0x94u, 0);
          int v60 = *(_DWORD *)v58;
        }
        else
        {
          int v60 = 0;
        }
        *(_DWORD *)(a5 + 144) = v60;
      }
    }
  }
  uint64_t v61 = (uint64_t)GetConfig((HDRConfig *)v58);
  if (v61)
  {
    uint64_t v61 = (uint64_t)GetConfig((HDRConfig *)v61);
    if (*(_DWORD *)(v61 + 13124))
    {
      if ((*(unsigned char *)(v61 + 13120) & 0x80) != 0)
      {
        uint64_t v61 = (uint64_t)GetConfig((HDRConfig *)v61);
        if (v61)
        {
          float v62 = GetConfig((HDRConfig *)v61);
          uint64_t v61 = HDRConfig::GetConfigEntryValue((uint64_t)v62, 0x95u, 0);
          int v63 = *(_DWORD *)v61;
        }
        else
        {
          int v63 = 0;
        }
        *(_DWORD *)(a5 + 148) = v63;
      }
    }
  }
  uint64_t v64 = (uint64_t)GetConfig((HDRConfig *)v61);
  if (v64)
  {
    uint64_t v64 = (uint64_t)GetConfig((HDRConfig *)v64);
    if (*(_DWORD *)(v64 + 13212))
    {
      if ((*(unsigned char *)(v64 + 13208) & 0x80) != 0)
      {
        uint64_t v64 = (uint64_t)GetConfig((HDRConfig *)v64);
        if (v64)
        {
          float v65 = GetConfig((HDRConfig *)v64);
          uint64_t v64 = HDRConfig::GetConfigEntryValue((uint64_t)v65, 0x96u, 0);
          int v66 = *(_DWORD *)v64;
        }
        else
        {
          int v66 = 0;
        }
        *(_DWORD *)(a5 + 152) = v66;
      }
    }
  }
  uint64_t v67 = (uint64_t)GetConfig((HDRConfig *)v64);
  if (v67)
  {
    uint64_t v67 = (uint64_t)GetConfig((HDRConfig *)v67);
    if (*(_DWORD *)(v67 + 13300))
    {
      if ((*(unsigned char *)(v67 + 13296) & 0x80) != 0)
      {
        uint64_t v67 = (uint64_t)GetConfig((HDRConfig *)v67);
        if (v67)
        {
          float v68 = GetConfig((HDRConfig *)v67);
          uint64_t v67 = HDRConfig::GetConfigEntryValue((uint64_t)v68, 0x97u, 0);
          BOOL v69 = *(unsigned char *)v67 != 0;
        }
        else
        {
          BOOL v69 = 0;
        }
        *(unsigned char *)(a5 + 156) = v69;
      }
    }
  }
  uint64_t v70 = (uint64_t)GetConfig((HDRConfig *)v67);
  if (v70)
  {
    uint64_t v70 = (uint64_t)GetConfig((HDRConfig *)v70);
    if (*(_DWORD *)(v70 + 13388))
    {
      if ((*(unsigned char *)(v70 + 13384) & 0x80) != 0)
      {
        uint64_t v70 = (uint64_t)GetConfig((HDRConfig *)v70);
        if (v70)
        {
          float v71 = GetConfig((HDRConfig *)v70);
          uint64_t v70 = HDRConfig::GetConfigEntryValue((uint64_t)v71, 0x98u, 0);
          BOOL v72 = *(unsigned char *)v70 != 0;
        }
        else
        {
          BOOL v72 = 0;
        }
        *(unsigned char *)(a5 + 157) = v72;
      }
    }
  }
  uint64_t v73 = (uint64_t)GetConfig((HDRConfig *)v70);
  if (v73)
  {
    uint64_t v73 = (uint64_t)GetConfig((HDRConfig *)v73);
    if (*(_DWORD *)(v73 + 13476))
    {
      if ((*(unsigned char *)(v73 + 13472) & 0x80) != 0)
      {
        uint64_t v73 = (uint64_t)GetConfig((HDRConfig *)v73);
        if (v73)
        {
          float v74 = GetConfig((HDRConfig *)v73);
          uint64_t v73 = HDRConfig::GetConfigEntryValue((uint64_t)v74, 0x99u, 0);
          BOOL v75 = *(unsigned char *)v73 != 0;
        }
        else
        {
          BOOL v75 = 0;
        }
        *(unsigned char *)(a5 + 158) = v75;
      }
    }
  }
  float v76 = GetConfig((HDRConfig *)v73);
  if (v76)
  {
    float v77 = GetConfig((HDRConfig *)v76);
    if (*((_DWORD *)v77 + 3391))
    {
      if ((v77[6780] & 0x80) != 0)
      {
        int v78 = GetConfig((HDRConfig *)v77);
        if (v78)
        {
          int v79 = GetConfig((HDRConfig *)v78);
          BOOL v80 = *(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v79, 0x9Au, 0) != 0;
        }
        else
        {
          BOOL v80 = 0;
        }
        *(unsigned char *)(a5 + 159) = v80;
      }
    }
  }
}

void sub_2222B4900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void hdr10_generateAmbAdaptationDataS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  id v24 = a6;
  *(_DWORD *)a7 = *(_DWORD *)(a1 + 32);
  int v13 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a7 + 4) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a7 + 8) = v13;
  int v14 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a7 + 12) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a7 + 16) = v14;
  int v15 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a7 + 20) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a7 + 24) = v15;
  if (*(unsigned char *)(a5 + 481))
  {
    float v16 = *(float *)(a2 + 16);
    *(float *)(a7 + 16) = v16;
    if (v16 >= 0.0)
    {
      float v19 = powf(v16 * 0.0001, 0.1593);
      float v18 = powf((float)((float)(v19 * 18.852) + 0.83594) / (float)((float)(v19 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v17 = powf(v16 * -0.0001, 0.1593);
      float v18 = 0.0000014619 - powf((float)((float)(v17 * 18.852) + 0.83594) / (float)((float)(v17 * 18.688) + 1.0), 78.844);
    }
    *(float *)(a7 + 24) = v18;
  }
  *(_DWORD *)(a7 + 28) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a7 + 36) = *(unsigned char *)(a1 + 188);
  float v20 = applyEdrAdaptationCurveS(a4, *(float *)(a3 + 120));
  if (*(unsigned char *)(a5 + 481))
  {
    int v21 = *(_DWORD *)(a2 + 1396);
    if (v21 == 3)
    {
      float v22 = *(float *)(a2 + 1392);
      if (v22 != 1.0) {
        float v20 = *(float *)(a2 + 1388) + (float)((float)(v20 - *(float *)(a2 + 1388)) * v22);
      }
    }
    else if (v21 == 2)
    {
      float v20 = applyLinearStretchInPQ(v20, *(float *)(a2 + 1384), *(float *)(a2 + 1380));
    }
  }
  *(float *)(a7 + 40) = v20;
  float v23 = *(float *)(a1 + 64);
  if (v23 >= *(float *)(a7 + 12)) {
    float v23 = *(float *)(a7 + 12);
  }
  *(float *)(a7 + 32) = v23;
}

void sub_2222B4AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float hdr10_getScalingFactorS_L(const _HDR10TMParam *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, float a7)
{
  id v13 = a6;
  if (*(unsigned char *)(a4 + 481))
  {
    float v14 = hdr10_applyTonemapCurveS_C(a1, v13, a7);
  }
  else
  {
    float tm_Tend_C = a1->tm_Tend_C;
    float v14 = tm_Tend_C * hdr10_applyTonemapCurveS(a1, v13, fmaxf(fminf(a7 / a1->tm_Send_C, 1.0), 0.0));
  }
  float v16 = applyEdrAdaptationCurveS(a2, v14);
  if (*(unsigned char *)(a4 + 481) && (*(unsigned char *)(a5 + 180) || *(unsigned char *)(a5 + 181) && !*(_DWORD *)(a5 + 8)))
  {
    int linearStretchMode = a1->linearStretchMode;
    if (linearStretchMode == 3)
    {
      float nonlinearScaler = a1->nonlinearScaler;
      if (nonlinearScaler != 1.0) {
        float v16 = a1->nonlinearOffset + (float)((float)(v16 - a1->nonlinearOffset) * nonlinearScaler);
      }
    }
    else if (linearStretchMode == 2)
    {
      float v16 = applyLinearStretchInPQ(v16, a1->linearScaler, a1->linearOffset);
    }
  }
  float v19 = applyAmbAdaptationCurveS(a3, v16);
  float v20 = -(float)(a7 + -0.0000014619);
  if (a7 >= 0.00000073096) {
    float v20 = a7;
  }
  float v21 = flt_2222D1868[a7 < 0.00000073096];
  float v22 = powf(v20, 0.012683);
  float v23 = fmax((float)((float)(v22 + -0.83594) / (float)((float)(v22 * -18.688) + 18.852)), 0.0);
  float v24 = v21 * powf(v23, 6.2774);
  if (v24 <= 0.0) {
    float v25 = 1.0;
  }
  else {
    float v25 = v19 / v24;
  }

  return v25;
}

void sub_2222B4CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float hdr10_getScalingFactorS_L_NormIn(const _HDR10TMParam *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, float a6)
{
  id v11 = a5;
  float tm_Send_nits = a1->tm_Send_nits;
  float tm_Send_C = a1->tm_Send_C;
  float tm_Tend_C = a1->tm_Tend_C;
  float v15 = tm_Send_nits * a6;
  if (v15 >= 0.0)
  {
    float v18 = powf(v15 * 0.0001, 0.1593);
    float v17 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v16 = powf(v15 * -0.0001, 0.1593);
    float v17 = 0.0000014619 - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
  }
  if (*(unsigned char *)(a4 + 481)) {
    float v19 = hdr10_applyTonemapCurveS_C(a1, v11, v17);
  }
  else {
    float v19 = tm_Tend_C * hdr10_applyTonemapCurveS(a1, v11, fmaxf(fminf(v17 / tm_Send_C, 1.0), 0.0));
  }
  float v20 = applyEdrAdaptationCurveS(a2, v19);
  if (*(unsigned char *)(a4 + 481))
  {
    int linearStretchMode = a1->linearStretchMode;
    if (linearStretchMode == 3)
    {
      float nonlinearScaler = a1->nonlinearScaler;
      if (nonlinearScaler != 1.0) {
        float v20 = a1->nonlinearOffset + (float)((float)(v20 - a1->nonlinearOffset) * nonlinearScaler);
      }
    }
    else if (linearStretchMode == 2)
    {
      float v20 = applyLinearStretchInPQ(v20, a1->linearScaler, a1->linearOffset);
    }
  }
  float v23 = applyAmbAdaptationCurveS(a3, v20) / v15;
  if (v15 <= 0.0) {
    float v23 = 1.0;
  }
  float v24 = (float)(tm_Send_nits / 10000.0) * v23;

  return v24;
}

void sub_2222B4EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void hdr10_setScalingFactorTableS_L_NormIn(uint64_t a1, uint64_t a2, unint64_t a3, const _HDR10TMParam *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v17 = a8;
  if (a3)
  {
    unint64_t v15 = 0;
    unsigned int v16 = 1;
    do
    {
      *(float *)(a1 + 4 * v15) = hdr10_getScalingFactorS_L_NormIn(a4, a5, a6, a7, v17, *(float *)(a2 + 4 * v15));
      unint64_t v15 = v16++;
    }
    while (v15 < a3);
  }
}

void sub_2222B4F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void hdr10_setScalingFactorTableS_C(uint64_t a1, unint64_t a2, const _HDR10TMParam *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v17 = a8;
  if (a2)
  {
    unint64_t v15 = 0;
    unsigned int v16 = 1;
    do
    {
      *(float *)(a1 + 4 * v15) = hdr10_getScalingFactorS_L(a3, a4, a5, a6, a7, v17, (float)(v16 - 1) / (float)(a2 - 1));
      unint64_t v15 = v16++;
    }
    while (v15 < a2);
  }
}

void sub_2222B5058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float hdr10_getLumaMixFactorS_L(float a1, float a2, float a3, float a4, float a5, float a6)
{
  return a4 + (float)((float)(a5 - a4) * powf(fmaxf(fminf((float)(a1 - a2) / (float)(a3 - a2), 1.0), 0.0), a6));
}

float hdr10_setLumaMixFactorTableS_L(uint64_t a1, unint64_t a2, uint64_t a3)
{
  float v3 = (float)((float)((float)(*(float *)(a3 + 76) + -0.41928) * 0.3) / 0.1072) + 0.1;
  float v4 = 0.4;
  if (v3 <= 0.4) {
    float v4 = (float)((float)((float)(*(float *)(a3 + 76) + -0.41928) * 0.3) / 0.1072) + 0.1;
  }
  if (v3 >= 0.1) {
    float result = v4;
  }
  else {
    float result = 0.1;
  }
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      float v7 = fmaxf(fminf((float)v6 / (float)(a2 - 1), 1.0), 0.0);
      *(float *)(a1 + 4 * v6++) = result + (float)((float)(1.0 - result) * (float)(v7 * v7));
    }
    while (a2 > v6);
  }
  return result;
}

float hdr10_getLumaMixFactorS_L_NormIn(float a1, float a2, float a3, float a4, float a5, float a6)
{
  return a4 + (float)((float)(a5 - a4) * powf(fmaxf(fminf((float)(a1 - a2) / (float)(a3 - a2), 1.0), 0.0), a6));
}

float hdr10_setLumaMixFactorTableS_L_NormIn(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  float v4 = (float)((float)((float)(*(float *)(a4 + 76) + -0.41928) * 0.3) / 0.1072) + 0.1;
  float v5 = 0.4;
  if (v4 <= 0.4) {
    float v5 = (float)((float)((float)(*(float *)(a4 + 76) + -0.41928) * 0.3) / 0.1072) + 0.1;
  }
  if (v4 >= 0.1) {
    float result = v5;
  }
  else {
    float result = 0.1;
  }
  if (a3)
  {
    uint64_t v7 = 0;
    do
    {
      float v8 = fmaxf(fminf(*(float *)(a2 + 4 * v7), 1.0), 0.0);
      *(float *)(a1 + 4 * v7++) = result + (float)((float)(1.0 - result) * (float)(v8 * v8));
    }
    while (a3 > v7);
  }
  return result;
}

HDRConfig *hdr10_setupTmConfig(HDRConfig *a1, _DWORD *a2, uint64_t a3)
{
  switch((int)a1)
  {
    case 0:
      *a2 = 0;
      goto LABEL_10;
    case 1:
      int v4 = 1;
      *a2 = 1;
      goto LABEL_12;
    case 2:
      *a2 = 3;
      a2[4] = 1;
      goto LABEL_13;
    case 3:
      *a2 = 4;
      int v4 = 2;
      goto LABEL_12;
    case 4:
      int v5 = 1;
      *a2 = 1;
      a2[4] = 5;
      a2[8] = 3;
      goto LABEL_8;
    case 5:
      *a2 = 2;
      a2[4] = 11;
      a2[8] = 3;
      int v5 = 4;
LABEL_8:
      *(_DWORD *)(a3 + 68) = v5;
      break;
    case 6:
      *a2 = 6;
LABEL_10:
      a2[4] = 0;
      a2[8] = 0;
      break;
    case 7:
      *a2 = 1;
      int v4 = 6;
LABEL_12:
      a2[4] = v4;
LABEL_13:
      a2[8] = 3;
      break;
    default:
      break;
  }
  if (overrideAmbAdaptationMode <= 6) {
    a2[8] = overrideAmbAdaptationMode;
  }
  if (overrideEdrAdaptationMode <= 0x13) {
    a2[4] = overrideEdrAdaptationMode;
  }
  float result = (HDRConfig *)GetConfig(a1);
  if (!result
    || (uint64_t Config = GetConfig(result),
        float result = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)Config, 0x5Bu, 0),
        !*(unsigned char *)result))
  {
    a2[8] = 0;
  }
  return result;
}

uint64_t ___ZL20queryMSRCapabilitiesv_block_invoke()
{
  if (IsVirtualized()) {
    v0 = "AppleM2ScalerParavirtDriver";
  }
  else {
    v0 = "AppleM2ScalerCSCDriver";
  }
  mach_port_t v1 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v2 = IOServiceMatching(v0);
  uint64_t result = IOServiceGetMatchingService(v1, v2);
  if (result)
  {
    io_object_t v4 = result;
    CFDictionaryRef v5 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(result, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
    if (!v5) {
      return IOObjectRelease(v4);
    }
    CFDictionaryRef v6 = v5;
    CFGetTypeID(v5);
    CFDictionaryGetTypeID();
    GetBoolFromDict(v6, @"IOSurfaceAcceleratorCapabilitiesHDR");
    byte_26ABE1E1A = GetBoolFromDict(v6, @"IOSurfaceAcceleratorCapabilitiesMMR");
    byte_26ABE1E19 = GetBoolFromDict(v6, @"IOSurfaceAcceleratorCapabilitiesUnequallySpacedLut");
    BOOL valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorHCUApiVersion");
    if (Value)
    {
      CFNumberRef v8 = Value;
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFBooleanGetTypeID())
      {
        BOOL v10 = v8 != (const __CFNumber *)*MEMORY[0x263EFFB38];
LABEL_12:
        dword_26ABE1E20 = v10;
        byte_26ABE1E1C = GetBoolFromDict(v6, @"IOSurfaceAcceleratorCapabilitiesFP16Regamma");
        byte_26ABE1E1B = GetBoolFromDict(v6, @"IOSurfaceAcceleratorCapabilitiesOOTF");
        _MergedGlobals_6 = GetBoolFromDict(v6, @"IOSurfaceAcceleratorCapabilitiesAvdHistogram");
        CFRelease(v6);
        return IOObjectRelease(v4);
      }
      if (v9 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
        BOOL v10 = valuePtr;
        goto LABEL_12;
      }
    }
    BOOL v10 = 0;
    goto LABEL_12;
  }
  return result;
}

CFNumberRef GetBoolFromDict(const __CFDictionary *a1, const __CFString *a2)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberRef v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFBooleanGetTypeID())
    {
      BOOL v5 = v3 == (const __CFNumber *)*MEMORY[0x263EFFB38];
    }
    else
    {
      if (v4 != CFNumberGetTypeID()) {
        return 0;
      }
      int valuePtr = 0;
      CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      BOOL v5 = valuePtr == 0;
    }
    return (const __CFNumber *)!v5;
  }
  return result;
}

void hlg_calculateTonemapCurveParamS(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v7 = a3;
  float v8 = *(float *)(a1 + 44);
  float v9 = *(float *)(a1 + 56);
  int v10 = *(_DWORD *)(a1 + 116);
  unsigned int v11 = *(_DWORD *)(a1 + 4);
  int v12 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a4 = 1065353216;
  if (v11 <= 7)
  {
    if (((1 << v11) & 0xB2) == 0)
    {
      if (((1 << v11) & 0x48) != 0)
      {
        float v8 = 1000.0;
      }
      else
      {
        float v8 = v9;
        if (v11 != 2) {
          goto LABEL_11;
        }
      }
    }
    long double v13 = (float)(v8 / 1000.0);
    if (v8 <= 400.0 || v8 >= 2000.0)
    {
      long double v15 = log2(v13);
      double v14 = pow(1.11099994, v15) * 1.20000005 + -1.0;
    }
    else
    {
      double v14 = log10(v13) * 0.419999987 + 1.20000005 + -1.0;
    }
    float v16 = v14;
    *(float *)a4 = v16 + 1.0;
  }
LABEL_11:
  hdr10_calculateTonemapCurveParamS(a1, a2, v7, a4 + 4);
  float v18 = 1.0;
  if (v12 != 2)
  {
    if (v12 == 1)
    {
      float v19 = *(float *)(a1 + 96);
      if (v19 >= 0.0)
      {
        float v26 = powf(v19 * 0.0001, 0.1593);
        float v21 = powf((float)((float)(v26 * 18.852) + 0.83594) / (float)((float)(v26 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v20 = powf(v19 * -0.0001, 0.1593);
        float v21 = 0.0000014619
            - powf((float)((float)(v20 * 18.852) + 0.83594) / (float)((float)(v20 * 18.688) + 1.0), 78.844);
      }
      float v27 = *(float *)(a4 + 68);
      float v28 = *(float *)(a4 + 84);
      float v29 = v9 * *(float *)(a1 + 24);
      if (v29 >= 0.0)
      {
        float v32 = powf(v29 * 0.0001, 0.1593);
        float v31 = powf((float)((float)(v32 * 18.852) + 0.83594) / (float)((float)(v32 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v30 = powf(v29 * -0.0001, 0.1593);
        float v31 = 0.0000014619
            - powf((float)((float)(v30 * 18.852) + 0.83594) / (float)((float)(v30 * 18.688) + 1.0), 78.844);
      }
      if (v9 >= 0.0)
      {
        float v35 = powf(v9 * 0.0001, 0.1593);
        float v34 = powf((float)((float)(v35 * 18.852) + 0.83594) / (float)((float)(v35 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v33 = powf(v9 * -0.0001, 0.1593);
        float v34 = 0.0000014619
            - powf((float)((float)(v33 * 18.852) + 0.83594) / (float)((float)(v33 * 18.688) + 1.0), 78.844);
      }
      if (*(unsigned char *)(a2 + 481)) {
        float v36 = hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)(a4 + 4), v7, v21);
      }
      else {
        float v36 = v28 * hdr10_applyTonemapCurveS((const _HDR10TMParam *)(a4 + 4), v7, v21 / v27);
      }
      float v38 = (float)(v31 - v34) / (float)(v36 - v34);
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  float v22 = *(float *)(a1 + 28);
  uint64_t Config = GetConfig(v17);
  if (Config)
  {
    float v24 = GetConfig((HDRConfig *)Config);
    float v25 = *(float *)HDRConfig::GetConfigEntryValue((uint64_t)v24, 0x6Fu, 0);
    if (v25 >= 100.0) {
      goto LABEL_39;
    }
  }
  else
  {
    float v25 = 0.0;
  }
  if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v37 = logInstanceID;
    }
    else {
      uint64_t v37 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = 134217984;
      uint64_t v40 = WORD1(v37);
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"overrideHLGOOTFMixingStartTdivNits >= 100.0f\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/hlg_display_management_host.mm\" at line 121\n", (uint8_t *)&v39, 0xCu);
    }
    prevLogInstanceID = v37;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v39) = 0;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"overrideHLGOOTFMixingStartTdivNits >= 100.0f\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/DisplayManagement/hlg_display_management_host.mm\" at line 121\n", (uint8_t *)&v39, 2u);
  }
LABEL_39:
  if (v9 > v25)
  {
    float v38 = (float)(v22 - v9) / (float)(v25 - v9);
LABEL_41:
    float v18 = fmaxf(fminf(v38, 1.0), 0.0);
  }
LABEL_42:
  *(float *)(a4 + 1428) = v18;
  *(_DWORD *)(a4 + 1432) = *(_DWORD *)(a1 + 100);
  *(unsigned char *)(a4 + 1424) = *(_DWORD *)a1 != 0;
  *(float *)(a4 + 1436) = v9;
  *(_DWORD *)(a4 + 1440) = v10;
}

void sub_2222B6F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float hlg_applyTonemapCurveS(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  id v7 = a3;
  float v8 = *(float *)(a1 + 12);
  float v9 = *(float *)(a1 + 1436);
  float v10 = *(float *)(a1 + 1440);
  float v11 = *(float *)(a1 + 68);
  float v12 = *(float *)(a1 + 84);
  float v13 = *(float *)(a1 + 1428);
  float v14 = *(float *)(a1 + 1432);
  if (!*(unsigned char *)(a1 + 1444) || (float v15 = a4, !*(unsigned char *)(a1 + 1445))) {
    float v15 = powf(a4, *(float *)a1);
  }
  float v16 = v8 * v15;
  if (v16 >= 0.0)
  {
    float v19 = powf(v16 * 0.0001, 0.1593);
    float v18 = powf((float)((float)(v19 * 18.852) + 0.83594) / (float)((float)(v19 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v17 = powf(v16 * -0.0001, 0.1593);
    float v18 = 0.0000014619 - powf((float)((float)(v17 * 18.852) + 0.83594) / (float)((float)(v17 * 18.688) + 1.0), 78.844);
  }
  if (*(unsigned char *)(a1 + 1424))
  {
    float v20 = applySceneLuxAdaptationS_C(a1 + 1448, v18);
    float v18 = *(unsigned char *)(a2 + 481)
        ? hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)(a1 + 4), v7, v20)
        : v12 * hdr10_applyTonemapCurveS((const _HDR10TMParam *)(a1 + 4), v7, v20 / v11);
    if (*(unsigned char *)(a1 + 4))
    {
      long double v21 = (float)(v14 / 1000.0);
      if (v14 <= 400.0 || v14 >= 2000.0)
      {
        long double v23 = log2(v21);
        double v22 = pow(1.11099994, v23) * 1.20000005 + -1.0;
      }
      else
      {
        double v22 = log10(v21) * 0.419999987 + 1.20000005 + -1.0;
      }
      float v24 = v22;
      float v25 = v10 * powf(a4, v24 + 1.0);
      if (v25 >= 0.0)
      {
        float v28 = powf(v25 * 0.0001, 0.1593);
        float v27 = powf((float)((float)(v28 * 18.852) + 0.83594) / (float)((float)(v28 * 18.688) + 1.0), 78.844);
      }
      else
      {
        float v26 = powf(v25 * -0.0001, 0.1593);
        float v27 = 0.0000014619
            - powf((float)((float)(v26 * 18.852) + 0.83594) / (float)((float)(v26 * 18.688) + 1.0), 78.844);
      }
      float v18 = (float)((float)(1.0 - v13) * v27) + (float)(v13 * v18);
    }
  }
  if (v9 >= 0.0)
  {
    float v31 = powf(v9 * 0.0001, 0.1593);
    float v30 = powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v29 = powf(v9 * -0.0001, 0.1593);
    float v30 = 0.0000014619 - powf((float)((float)(v29 * 18.852) + 0.83594) / (float)((float)(v29 * 18.688) + 1.0), 78.844);
  }
  float v32 = v18 / v30;

  return v32;
}

void sub_2222B7350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void hlg_generateEdrAdaptationDataS(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v91 = a4;
  int v9 = *(_DWORD *)(a1 + 92);
  float v10 = *(float *)(a1 + 96);
  float v11 = *(float *)(a2 + 12);
  if (v11 >= 0.0)
  {
    float v14 = powf(v11 * 0.0001, 0.1593);
    float v13 = powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v12 = powf(v11 * -0.0001, 0.1593);
    float v13 = 0.0000014619 - powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
  }
  float v15 = *(float *)(a1 + 116);
  if (v15 >= 0.0)
  {
    float v18 = powf(v15 * 0.0001, 0.1593);
    float v17 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v16 = powf(v15 * -0.0001, 0.1593);
    float v17 = 0.0000014619 - powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
  }
  float v19 = *(float *)(a2 + 64);
  float v20 = *(float *)(a2 + 72);
  float v21 = *(float *)(a2 + 80);
  float v22 = *(float *)(a2 + 20);
  if (v22 >= 0.0)
  {
    float v25 = powf(v22 * 0.0001, 0.1593);
    float v24 = powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v23 = powf(v22 * -0.0001, 0.1593);
    float v24 = 0.0000014619 - powf((float)((float)(v23 * 18.852) + 0.83594) / (float)((float)(v23 * 18.688) + 1.0), 78.844);
  }
  BOOL v26 = v17 < v21 && (*(_DWORD *)(a2 + 1400) & 0xFFFFFFFE) == 2;
  *(_DWORD *)a5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a5 + 4) = *(_DWORD *)(a1 + 24);
  *(float *)(a5 + 8) = v13;
  *(float *)(a5 + 12) = v20;
  *(float *)(a5 + 16) = v24;
  int v27 = *(unsigned __int8 *)(a3 + 481);
  if (*(unsigned char *)(a3 + 481))
  {
    if (v26) {
      float v28 = v21;
    }
    else {
      float v28 = v17;
    }
    *(float *)(a5 + 16) = v28;
  }
  if (v10 >= 0.0)
  {
    float v31 = powf(v10 * 0.0001, 0.1593);
    float v30 = powf((float)((float)(v31 * 18.852) + 0.83594) / (float)((float)(v31 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v29 = powf(v10 * -0.0001, 0.1593);
    float v30 = 0.0000014619 - powf((float)((float)(v29 * 18.852) + 0.83594) / (float)((float)(v29 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a5 + 20) = v30;
  *(_DWORD *)(a5 + 24) = v9;
  if (v27) {
    float v32 = hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)(a2 + 4), v91, v30);
  }
  else {
    float v32 = hdr10_applyTonemapCurveS((const _HDR10TMParam *)(a2 + 4), v91, v30 / *(float *)(a2 + 68))
  }
        * *(float *)(a2 + 84);
  *(float *)(a5 + 28) = v32;
  uint64_t v33 = 116;
  if (v26) {
    uint64_t v33 = 60;
  }
  float v34 = *(float *)(a1 + v33) / *(float *)(a1 + 112);
  if (v34 >= 0.0)
  {
    float v38 = powf(v34 * 0.0001, 0.1593);
    float v37 = powf((float)((float)(v38 * 18.852) + 0.83594) / (float)((float)(v38 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v35 = powf(v34 * -0.0001, 0.1593);
    float v37 = 0.0000014619 - powf((float)((float)(v35 * 18.852) + 0.83594) / (float)((float)(v35 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a5 + 32) = v37;
  *(_OWORD *)(a5 + 72) = xmmword_2222D45A0;
  *(void *)(a5 + 88) = 0x3F0000003F800000;
  *(_DWORD *)(a5 + 96) = 1065353216;
  if (*(_DWORD *)(a1 + 108) == 1)
  {
    uint64_t Config = GetConfig(v36);
    if (Config)
    {
      uint64_t v40 = GetConfig((HDRConfig *)Config);
      if (*(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v40, 0x1Cu, 0))
      {
        LODWORD(v41) = *(_DWORD *)(a5 + 16);
        [v91 applyL8Trim:v41];
        *(_DWORD *)(a5 + 16) = v42;
        LODWORD(v43) = *(_DWORD *)(a5 + 12);
        [v91 applyL8Trim:v43];
        *(_DWORD *)(a5 + 12) = v44;
        LODWORD(v45) = *(_DWORD *)(a5 + 32);
        [v91 applyL8Trim:v45];
        *(_DWORD *)(a5 + 32) = v46;
      }
    }
  }
  float v47 = (float)((float)(v19 * *(float *)(a5 + 32)) / *(float *)(a5 + 20)) - v20;
  if (*(unsigned char *)(a3 + 481)) {
    float v48 = v24;
  }
  else {
    float v48 = v21;
  }
  *(float *)(a5 + 100) = v20;
  *(float *)(a5 + 104) = fminf(v47 / (float)(v48 - v20), 1.0);
  if (*(_DWORD *)(a1 + 108) == 1)
  {
    float v49 = *(float *)(a1 + 68);
    if (v49 >= 0.0)
    {
      float v54 = powf(v49 * 0.0001, 0.1593);
      float v51 = powf((float)((float)(v54 * 18.852) + 0.83594) / (float)((float)(v54 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v50 = powf(v49 * -0.0001, 0.1593);
      float v51 = 0.0000014619 - powf((float)((float)(v50 * 18.852) + 0.83594) / (float)((float)(v50 * 18.688) + 1.0), 78.844);
    }
    *(float *)(a5 + 108) = v51;
    float v55 = *(float *)(a1 + 80);
    if (v55 >= 0.0)
    {
      float v57 = powf(v55 * 0.0001, 0.1593);
      float v52 = powf((float)((float)(v57 * 18.852) + 0.83594) / (float)((float)(v57 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v56 = powf(v55 * -0.0001, 0.1593);
      float v52 = 0.0000014619 - powf((float)((float)(v56 * 18.852) + 0.83594) / (float)((float)(v56 * 18.688) + 1.0), 78.844);
    }
    *(float *)(a5 + 112) = v52;
    float v58 = *(float *)(a1 + 72);
    if (v58 >= 0.0)
    {
      float v60 = powf(v58 * 0.0001, 0.1593);
      float v53 = powf((float)((float)(v60 * 18.852) + 0.83594) / (float)((float)(v60 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v59 = powf(v58 * -0.0001, 0.1593);
      float v53 = 0.0000014619 - powf((float)((float)(v59 * 18.852) + 0.83594) / (float)((float)(v59 * 18.688) + 1.0), 78.844);
    }
  }
  else
  {
    float v51 = *(float *)(a2 + 56);
    float v52 = *(float *)(a2 + 60);
    *(float *)(a5 + 108) = v51;
    *(float *)(a5 + 112) = v52;
    float v53 = *(float *)(a2 + 64);
  }
  *(float *)(a5 + 116) = v53;
  if (*(unsigned char *)(a1 + 188))
  {
    *(float *)(a5 + 12) = hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)(a2 + 4), v91, v51);
    float v52 = *(float *)(a5 + 112);
  }
  *(float *)(a5 + 120) = hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)(a2 + 4), v91, v52);
  *(float *)(a5 + 124) = hdr10_applyTonemapCurveS_C((const _HDR10TMParam *)(a2 + 4), v91, *(float *)(a5 + 116));
  *(unsigned char *)(a5 + 132) = *(unsigned char *)(a1 + 188);
  *(_OWORD *)(a5 + 136) = xmmword_2222D4100;
  *(_DWORD *)(a5 + 152) = 1036831949;
  *(_WORD *)(a5 + 156) = 257;
  *(unsigned char *)(a5 + 158) = *(_DWORD *)a5 != 17;
  *(unsigned char *)(a5 + 159) = 1;
  if (*(unsigned char *)(a3 + 492))
  {
    *(unsigned char *)(a5 + 156) = 0;
    *(_DWORD *)(a5 + 136) = 1046898278;
    *(unsigned char *)(a5 + 158) = 1;
  }
  uint64_t ConfigEntryValue = (uint64_t)GetConfig(v61);
  if (ConfigEntryValue)
  {
    uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
    if (*(_DWORD *)(ConfigEntryValue + 12684))
    {
      if ((*(unsigned char *)(ConfigEntryValue + 12680) & 0x80) != 0)
      {
        uint64_t ConfigEntryValue = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
        if (ConfigEntryValue)
        {
          int v63 = GetConfig((HDRConfig *)ConfigEntryValue);
          uint64_t ConfigEntryValue = HDRConfig::GetConfigEntryValue((uint64_t)v63, 0x90u, 0);
          int v64 = *(_DWORD *)ConfigEntryValue;
        }
        else
        {
          int v64 = 0;
        }
        *(_DWORD *)(a5 + 136) = v64;
      }
    }
  }
  uint64_t v65 = (uint64_t)GetConfig((HDRConfig *)ConfigEntryValue);
  if (v65)
  {
    uint64_t v65 = (uint64_t)GetConfig((HDRConfig *)v65);
    if (*(_DWORD *)(v65 + 12948))
    {
      if ((*(unsigned char *)(v65 + 12944) & 0x80) != 0)
      {
        uint64_t v65 = (uint64_t)GetConfig((HDRConfig *)v65);
        if (v65)
        {
          int v66 = GetConfig((HDRConfig *)v65);
          uint64_t v65 = HDRConfig::GetConfigEntryValue((uint64_t)v66, 0x93u, 0);
          int v67 = *(_DWORD *)v65;
        }
        else
        {
          int v67 = 0;
        }
        *(_DWORD *)(a5 + 140) = v67;
      }
    }
  }
  uint64_t v68 = (uint64_t)GetConfig((HDRConfig *)v65);
  if (v68)
  {
    uint64_t v68 = (uint64_t)GetConfig((HDRConfig *)v68);
    if (*(_DWORD *)(v68 + 13036))
    {
      if ((*(unsigned char *)(v68 + 13032) & 0x80) != 0)
      {
        uint64_t v68 = (uint64_t)GetConfig((HDRConfig *)v68);
        if (v68)
        {
          BOOL v69 = GetConfig((HDRConfig *)v68);
          uint64_t v68 = HDRConfig::GetConfigEntryValue((uint64_t)v69, 0x94u, 0);
          int v70 = *(_DWORD *)v68;
        }
        else
        {
          int v70 = 0;
        }
        *(_DWORD *)(a5 + 144) = v70;
      }
    }
  }
  uint64_t v71 = (uint64_t)GetConfig((HDRConfig *)v68);
  if (v71)
  {
    uint64_t v71 = (uint64_t)GetConfig((HDRConfig *)v71);
    if (*(_DWORD *)(v71 + 13124))
    {
      if ((*(unsigned char *)(v71 + 13120) & 0x80) != 0)
      {
        uint64_t v71 = (uint64_t)GetConfig((HDRConfig *)v71);
        if (v71)
        {
          BOOL v72 = GetConfig((HDRConfig *)v71);
          uint64_t v71 = HDRConfig::GetConfigEntryValue((uint64_t)v72, 0x95u, 0);
          int v73 = *(_DWORD *)v71;
        }
        else
        {
          int v73 = 0;
        }
        *(_DWORD *)(a5 + 148) = v73;
      }
    }
  }
  uint64_t v74 = (uint64_t)GetConfig((HDRConfig *)v71);
  if (v74)
  {
    uint64_t v74 = (uint64_t)GetConfig((HDRConfig *)v74);
    if (*(_DWORD *)(v74 + 13212))
    {
      if ((*(unsigned char *)(v74 + 13208) & 0x80) != 0)
      {
        uint64_t v74 = (uint64_t)GetConfig((HDRConfig *)v74);
        if (v74)
        {
          BOOL v75 = GetConfig((HDRConfig *)v74);
          uint64_t v74 = HDRConfig::GetConfigEntryValue((uint64_t)v75, 0x96u, 0);
          int v76 = *(_DWORD *)v74;
        }
        else
        {
          int v76 = 0;
        }
        *(_DWORD *)(a5 + 152) = v76;
      }
    }
  }
  uint64_t v77 = (uint64_t)GetConfig((HDRConfig *)v74);
  if (v77)
  {
    uint64_t v77 = (uint64_t)GetConfig((HDRConfig *)v77);
    if (*(_DWORD *)(v77 + 13300))
    {
      if ((*(unsigned char *)(v77 + 13296) & 0x80) != 0)
      {
        uint64_t v77 = (uint64_t)GetConfig((HDRConfig *)v77);
        if (v77)
        {
          int v78 = GetConfig((HDRConfig *)v77);
          uint64_t v77 = HDRConfig::GetConfigEntryValue((uint64_t)v78, 0x97u, 0);
          BOOL v79 = *(unsigned char *)v77 != 0;
        }
        else
        {
          BOOL v79 = 0;
        }
        *(unsigned char *)(a5 + 156) = v79;
      }
    }
  }
  uint64_t v80 = (uint64_t)GetConfig((HDRConfig *)v77);
  if (v80)
  {
    uint64_t v80 = (uint64_t)GetConfig((HDRConfig *)v80);
    if (*(_DWORD *)(v80 + 13388))
    {
      if ((*(unsigned char *)(v80 + 13384) & 0x80) != 0)
      {
        uint64_t v80 = (uint64_t)GetConfig((HDRConfig *)v80);
        if (v80)
        {
          id v81 = GetConfig((HDRConfig *)v80);
          uint64_t v80 = HDRConfig::GetConfigEntryValue((uint64_t)v81, 0x98u, 0);
          BOOL v82 = *(unsigned char *)v80 != 0;
        }
        else
        {
          BOOL v82 = 0;
        }
        *(unsigned char *)(a5 + 157) = v82;
      }
    }
  }
  uint64_t v83 = (uint64_t)GetConfig((HDRConfig *)v80);
  if (v83)
  {
    uint64_t v83 = (uint64_t)GetConfig((HDRConfig *)v83);
    if (*(_DWORD *)(v83 + 13476))
    {
      if ((*(unsigned char *)(v83 + 13472) & 0x80) != 0)
      {
        uint64_t v83 = (uint64_t)GetConfig((HDRConfig *)v83);
        if (v83)
        {
          float v84 = GetConfig((HDRConfig *)v83);
          uint64_t v83 = HDRConfig::GetConfigEntryValue((uint64_t)v84, 0x99u, 0);
          BOOL v85 = *(unsigned char *)v83 != 0;
        }
        else
        {
          BOOL v85 = 0;
        }
        *(unsigned char *)(a5 + 158) = v85;
      }
    }
  }
  BOOL v86 = GetConfig((HDRConfig *)v83);
  if (v86)
  {
    BOOL v87 = GetConfig((HDRConfig *)v86);
    if (*((_DWORD *)v87 + 3391))
    {
      if ((v87[6780] & 0x80) != 0)
      {
        int v88 = GetConfig((HDRConfig *)v87);
        if (v88)
        {
          float v89 = GetConfig((HDRConfig *)v88);
          BOOL v90 = *(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v89, 0x9Au, 0) != 0;
        }
        else
        {
          BOOL v90 = 0;
        }
        *(unsigned char *)(a5 + 159) = v90;
      }
    }
  }
}

void sub_2222B7E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void hlg_generateAmbAdaptationDataS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  *(_DWORD *)a6 = *(_DWORD *)(a1 + 32);
  float v13 = *(float *)(a1 + 36) + a7;
  *(_DWORD *)(a6 + 4) = *(_DWORD *)(a1 + 24);
  *(float *)(a6 + 8) = v13;
  float v14 = *(float *)(a2 + 20);
  if (*(_DWORD *)(a1 + 108) == 1)
  {
    if (v14 >= 0.0)
    {
      float v17 = powf(v14 * 0.0001, 0.1593);
      float v16 = powf((float)((float)(v17 * 18.852) + 0.83594) / (float)((float)(v17 * 18.688) + 1.0), 78.844);
    }
    else
    {
      float v15 = powf(v14 * -0.0001, 0.1593);
      float v16 = 0.0000014619 - powf((float)((float)(v15 * 18.852) + 0.83594) / (float)((float)(v15 * 18.688) + 1.0), 78.844);
    }
    float v18 = v16 * 0.25;
    BOOL v19 = v18 < 0.00000073096;
    if (v18 < 0.00000073096) {
      float v18 = -(float)(v18 + -0.0000014619);
    }
    float v20 = flt_2222D1868[v19];
    float v21 = powf(v18, 0.012683);
    float v22 = fmax((float)((float)(v21 + -0.83594) / (float)((float)(v21 * -18.688) + 18.852)), 0.0);
    float v23 = v20 * powf(v22, 6.2774);
    if (v13 < v23) {
      float v23 = v13;
    }
    *(float *)(a6 + 8) = v23;
  }
  float v24 = *(float *)(a2 + 40);
  *(float *)(a6 + 12) = v24;
  *(float *)(a6 + 16) = v14;
  if (v24 >= 0.0)
  {
    float v27 = powf(v24 * 0.0001, 0.1593);
    float v26 = powf((float)((float)(v27 * 18.852) + 0.83594) / (float)((float)(v27 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v25 = powf(v24 * -0.0001, 0.1593);
    float v26 = 0.0000014619 - powf((float)((float)(v25 * 18.852) + 0.83594) / (float)((float)(v25 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a6 + 20) = v26;
  if (v14 >= 0.0)
  {
    float v30 = powf(v14 * 0.0001, 0.1593);
    float v29 = powf((float)((float)(v30 * 18.852) + 0.83594) / (float)((float)(v30 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v28 = powf(v14 * -0.0001, 0.1593);
    float v29 = 0.0000014619 - powf((float)((float)(v28 * 18.852) + 0.83594) / (float)((float)(v28 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a6 + 24) = v29;
  if (*(unsigned char *)(a5 + 481))
  {
    *(float *)(a6 + 16) = v14;
    *(float *)(a6 + 24) = v29;
  }
  *(unsigned char *)(a6 + 36) = *(unsigned char *)(a1 + 188);
  float v31 = applyEdrAdaptationCurveS(a4, *(float *)(a3 + 120));
  if (*(unsigned char *)(a5 + 481))
  {
    int v32 = *(_DWORD *)(a2 + 1400);
    if (v32 == 3)
    {
      float v33 = *(float *)(a2 + 1396);
      if (v33 != 1.0) {
        float v31 = *(float *)(a2 + 1392) + (float)((float)(v31 - *(float *)(a2 + 1392)) * v33);
      }
    }
    else if (v32 == 2)
    {
      float v31 = applyLinearStretchInPQ(v31, *(float *)(a2 + 1388), *(float *)(a2 + 1384));
    }
  }
  *(float *)(a6 + 40) = v31;
  float v34 = *(float *)(a1 + 64);
  if (v34 >= *(float *)(a6 + 12)) {
    float v34 = *(float *)(a6 + 12);
  }
  *(float *)(a6 + 32) = v34;
}

void hlg_generateSceneLuxAdaptationDataS(HDRConfig *a1, float *a2, uint64_t a3)
{
  uint64_t Config = GetConfig(a1);
  if (Config)
  {
    id v7 = GetConfig((HDRConfig *)Config);
    int v8 = *(_DWORD *)HDRConfig::GetConfigEntryValue((uint64_t)v7, 0x9Du, 0);
  }
  else
  {
    int v8 = 0;
  }
  *(_DWORD *)a3 = v8;
  float v9 = a2[17];
  if (v9 >= 0.0)
  {
    float v12 = powf(v9 * 0.0001, 0.1593);
    float v11 = powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v10 = powf(v9 * -0.0001, 0.1593);
    float v11 = 0.0000014619 - powf((float)((float)(v10 * 18.852) + 0.83594) / (float)((float)(v10 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 4) = v11;
  float v13 = a2[20];
  if (v13 >= 0.0)
  {
    float v16 = powf(v13 * 0.0001, 0.1593);
    float v15 = powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v14 = powf(v13 * -0.0001, 0.1593);
    float v15 = 0.0000014619 - powf((float)((float)(v14 * 18.852) + 0.83594) / (float)((float)(v14 * 18.688) + 1.0), 78.844);
  }
  *(float *)(a3 + 8) = v15;
  float v17 = a2[18];
  if (v17 >= 0.0)
  {
    float v20 = powf(v17 * 0.0001, 0.1593);
    float v19 = powf((float)((float)(v20 * 18.852) + 0.83594) / (float)((float)(v20 * 18.688) + 1.0), 78.844);
  }
  else
  {
    float v18 = powf(v17 * -0.0001, 0.1593);
    float v19 = 0.0000014619 - powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  }
  int v21 = *((_DWORD *)a1 + 40);
  *(float *)(a3 + 12) = v19;
  *(_DWORD *)(a3 + 16) = v21;
}

HDRConfig *hlg_setupTmConfig(HDRConfig *Config, uint64_t a2, uint64_t a3, double a4)
{
  switch((int)Config)
  {
    case 0:
      *(void *)a2 = 0;
      goto LABEL_17;
    case 1:
      uint64_t v6 = 0x300000000;
      goto LABEL_16;
    case 2:
      *(void *)a2 = 0x400000000;
      int v7 = 5;
      goto LABEL_31;
    case 3:
      *(_DWORD *)(a2 + 4) = 5;
      uint64_t Config = (HDRConfig *)GetConfig(Config);
      if (!Config) {
        goto LABEL_29;
      }
      int v8 = GetConfig(Config);
      uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v8, 0x1Cu, 0);
      if (!*(unsigned char *)Config) {
        goto LABEL_29;
      }
      int v7 = 12;
      goto LABEL_28;
    case 4:
      uint64_t v6 = 0x100000000;
      goto LABEL_16;
    case 5:
      uint64_t v6 = 0x200000000;
      goto LABEL_16;
    case 6:
      uint64_t v6 = 0x600000000;
      goto LABEL_16;
    case 7:
      uint64_t v9 = 0x400000000;
      goto LABEL_13;
    case 8:
      uint64_t v9 = 0x500000005;
LABEL_13:
      *(void *)a2 = v9;
      int v10 = 5;
      *(_DWORD *)(a2 + 16) = 5;
      *(_DWORD *)(a2 + 32) = 3;
      goto LABEL_32;
    case 9:
      *(void *)a2 = 0x500000005;
      int v11 = 7;
      goto LABEL_24;
    case 10:
      uint64_t v6 = 0x700000000;
LABEL_16:
      *(void *)a2 = v6;
LABEL_17:
      *(_DWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 32) = 0;
      break;
    case 11:
      *(void *)a2 = 0x500000005;
      goto LABEL_23;
    case 12:
      if (a4 <= 1000.0) {
        int v12 = 5;
      }
      else {
        int v12 = 2;
      }
      *(_DWORD *)a2 = 5;
      *(_DWORD *)(a2 + 4) = v12;
LABEL_23:
      int v11 = 6;
LABEL_24:
      *(_DWORD *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 32) = 3;
      break;
    case 13:
      *(_DWORD *)(a2 + 4) = 5;
      uint64_t Config = (HDRConfig *)GetConfig(Config);
      if (Config
        && (float v13 = GetConfig(Config),
            uint64_t Config = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v13, 0x1Cu, 0),
            *(unsigned char *)Config))
      {
        int v7 = 16;
LABEL_28:
        int v14 = 11;
      }
      else
      {
LABEL_29:
        int v7 = 10;
        int v14 = 5;
      }
      *(_DWORD *)a2 = v14;
LABEL_31:
      *(_DWORD *)(a2 + 16) = v7;
      *(_DWORD *)(a2 + 32) = 3;
      int v10 = 2;
LABEL_32:
      *(_DWORD *)(a3 + 68) = v10;
      break;
    default:
      break;
  }
  if (overrideAmbAdaptationMode <= 6) {
    *(_DWORD *)(a2 + 32) = overrideAmbAdaptationMode;
  }
  if (overrideEdrAdaptationMode <= 0x13) {
    *(_DWORD *)(a2 + 16) = overrideEdrAdaptationMode;
  }
  CFNumberRef result = (HDRConfig *)GetConfig(Config);
  if (!result
    || (float v16 = GetConfig(result),
        CFNumberRef result = (HDRConfig *)HDRConfig::GetConfigEntryValue((uint64_t)v16, 0x5Bu, 0),
        !*(unsigned char *)result))
  {
    *(_DWORD *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t GetChipId(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26ABE1E40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26ABE1E40))
  {
    qword_26ABE1E38 = MGGetSInt64Answer();
    __cxa_guard_release(&qword_26ABE1E40);
  }
  return qword_26ABE1E38;
}

void sub_2222B86D4(_Unwind_Exception *a1)
{
}

BOOL IsGpuOnlySystem(void)
{
  {
    IsGpuOnlySystem(void)::chipID = GetChipId();
  }
  return (unint64_t)IsGpuOnlySystem(void)::chipID >> 1 == 16392;
}

void sub_2222B8754(_Unwind_Exception *a1)
{
}

uint64_t IsVirtualized(void)
{
  if (qword_26ABE1E48 != -1) {
    dispatch_once(&qword_26ABE1E48, &__block_literal_global_3);
  }
  return _MergedGlobals_7;
}

uint64_t ___Z13IsVirtualizedv_block_invoke()
{
  uint64_t result = GetChipId();
  _MergedGlobals_7 = result == 65024;
  return result;
}

void sub_2222B8D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222B8F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t HDR10PlusMetaData_RBSP::get_next_uint32(HDR10PlusMetaData_RBSP *this, char *a2, unsigned int *a3, unsigned int *a4)
{
  int64_t v4 = this->var6 - a2;
  if (v4 <= 0)
  {
    *a4 = 0;
    *a3 = 0;
    *(_WORD *)&this->var8 = -1;
    return 0xFFFFFFFFLL;
  }
  int v5 = *a2;
  if (v4 == 1)
  {
    int v6 = 255;
    int v7 = 65280;
    goto LABEL_9;
  }
  int v7 = a2[1] << 8;
  if ((unint64_t)v4 < 3)
  {
    int v6 = 255;
    goto LABEL_9;
  }
  int v6 = a2[2];
  if (v4 == 3)
  {
LABEL_9:
    int v9 = 255;
    goto LABEL_10;
  }
  int v9 = a2[3];
LABEL_10:
  if (v4 >= 4) {
    LODWORD(v4) = 4;
  }
  *a4 = v4;
  *a3 = v4;
  return v9 | ((v7 | (v5 << 16) | v6) << 8);
}

uint64_t HDR10PlusMetaData_RBSP::parse_hdr10plus_sei(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a1 + 129) = 0;
  int64_t v4 = (uint64_t *)(a1 + 129);
  *(unsigned char *)(a1 + 137) = 0;
  *(_OWORD *)(a1 + 140) = 0u;
  int v5 = (long long *)(a1 + 140);
  *(_OWORD *)(a1 + 156) = 0u;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 186) = 0;
  int v6 = (long long *)(a1 + 186);
  *(void *)(a1 + 194) = 0;
  *(_WORD *)(a1 + 202) = 0;
  int v7 = *(unsigned __int8 *)(a1 + 15);
  commonRBSP::flush_bits((uint64_t *)a1, 8);
  if (v7 == 181)
  {
    *(unsigned char *)(a1 + 94) = -75;
    *(_WORD *)(a1 + 92) = 0;
    goto LABEL_18;
  }
  if (v7 != 4)
  {
    if (!enableLogInstance)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        return *(unsigned int *)(a1 + 88);
      }
      int v50 = 136315394;
      float v51 = "parse_hdr10plus_sei";
      __int16 v52 = 1024;
      *(_DWORD *)float v53 = v7;
      float v35 = &_os_log_internal;
      float v36 = " [1.419.54] %s: parsing error: first_byte = %u [legal value = 4 or 181], bail!\n";
      goto LABEL_65;
    }
    if (logInstanceID) {
      uint64_t v10 = logInstanceID;
    }
    else {
      uint64_t v10 = prevLogInstanceID;
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_48;
    }
    int v50 = 134218498;
    float v51 = (const char *)WORD1(v10);
    __int16 v52 = 2080;
    *(void *)float v53 = "parse_hdr10plus_sei";
    *(_WORD *)&v53[8] = 1024;
    *(_DWORD *)float v54 = v7;
    int v12 = &_os_log_internal;
    float v13 = " [1.419.54] #%04llx %s: parsing error: first_byte = %u [legal value = 4 or 181], bail!\n";
    goto LABEL_46;
  }
  *(unsigned char *)(a1 + 92) = 4;
  uint64_t v8 = HIBYTE(*(void *)(a1 + 8));
  commonRBSP::flush_bits((uint64_t *)a1, 8);
  *(unsigned char *)(a1 + 93) = v8;
  int v9 = *(_DWORD *)(a1 + 20);
  if (v9 - 2 >= v8)
  {
    char v15 = *(unsigned char *)(a1 + 15);
    commonRBSP::flush_bits((uint64_t *)a1, 8);
    *(unsigned char *)(a1 + 94) = v15;
LABEL_18:
    __int16 v16 = *(_WORD *)(a1 + 14);
    commonRBSP::flush_bits((uint64_t *)a1, 16);
    *(_WORD *)(a1 + 96) = v16;
    __int16 v17 = *(_WORD *)(a1 + 14);
    commonRBSP::flush_bits((uint64_t *)a1, 16);
    *(_WORD *)(a1 + 98) = v17;
    LOBYTE(v17) = *(unsigned char *)(a1 + 15);
    commonRBSP::flush_bits((uint64_t *)a1, 8);
    *(unsigned char *)(a1 + 100) = v17;
    LOBYTE(v17) = *(unsigned char *)(a1 + 15);
    commonRBSP::flush_bits((uint64_t *)a1, 8);
    *(unsigned char *)(a1 + 101) = v17;
    uint64_t v18 = *(void *)(a1 + 8) >> 62;
    commonRBSP::flush_bits((uint64_t *)a1, 2);
    *(unsigned char *)(a1 + 102) = v18;
    if (v18 == 1)
    {
      uint64_t v19 = *(void *)(a1 + 8) >> 37;
      commonRBSP::flush_bits((uint64_t *)a1, 27);
      *(_DWORD *)(a1 + 104) = v19;
      uint64_t v20 = *(void *)(a1 + 8);
      commonRBSP::flush_bits((uint64_t *)a1, 1);
      *(unsigned char *)(a1 + 108) = v20 < 0;
      for (uint64_t i = 112; i != 124; i += 4)
      {
        uint64_t v22 = *(void *)(a1 + 8) >> 47;
        commonRBSP::flush_bits((uint64_t *)a1, 17);
        *(_DWORD *)(a1 + i) = v22;
      }
      uint64_t v23 = *(void *)(a1 + 8) >> 47;
      commonRBSP::flush_bits((uint64_t *)a1, 17);
      *(_DWORD *)(a1 + 124) = v23;
      uint64_t v24 = *(void *)(a1 + 8) >> 60;
      commonRBSP::flush_bits((uint64_t *)a1, 4);
      *(unsigned char *)(a1 + 128) = v24;
      if (v24 == 9)
      {
        unint64_t v25 = 0;
        do
        {
          uint64_t v26 = *(void *)(a1 + 8) >> 57;
          commonRBSP::flush_bits((uint64_t *)a1, 7);
          *(unsigned char *)(a1 + v25 + 129) = v26;
          uint64_t v27 = *(void *)(a1 + 8) >> 47;
          commonRBSP::flush_bits((uint64_t *)a1, 17);
          *(_DWORD *)(a1 + 4 * v25++ + 140) = v27;
        }
        while (v25 < *(unsigned __int8 *)(a1 + 128));
        uint64_t v28 = *(void *)(a1 + 8) >> 54;
        commonRBSP::flush_bits((uint64_t *)a1, 10);
        *(_WORD *)(a1 + 176) = v28;
        uint64_t v29 = *(void *)(a1 + 8);
        commonRBSP::flush_bits((uint64_t *)a1, 1);
        *(unsigned char *)(a1 + 178) = v29 < 0;
        uint64_t v30 = *(void *)(a1 + 8);
        commonRBSP::flush_bits((uint64_t *)a1, 1);
        *(unsigned char *)(a1 + 179) = v30 < 0;
        if ((v30 & 0x8000000000000000) == 0)
        {
LABEL_25:
          uint64_t v31 = *(void *)(a1 + 8);
          int v32 = commonRBSP::flush_bits((uint64_t *)a1, 1);
          *(unsigned char *)(a1 + 204) = v31 < 0;
          uint64_t Config = GetConfig((HDRConfig *)v32);
          if (!Config
            || (float v34 = GetConfig((HDRConfig *)Config), !*(unsigned char *)HDRConfig::GetConfigEntryValue((uint64_t)v34, 0x41u, 0))
            || !HDR10PlusMetaData_RBSP::range_check_metadata((HDR10PlusMetaData_RBSP *)a1))
          {
            uint64_t result = 0;
            *(_DWORD *)a2 = *(_DWORD *)(a1 + 104);
            uint64_t v38 = *(void *)(a1 + 112);
            *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 120);
            *(void *)(a2 + 4) = v38;
            *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 124);
            *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 128);
            uint64_t v39 = *v4;
            *(unsigned char *)(a2 + 29) = *((unsigned char *)v4 + 8);
            *(void *)(a2 + 21) = v39;
            long long v40 = *v5;
            long long v41 = v5[1];
            *(_DWORD *)(a2 + 64) = *((_DWORD *)v5 + 8);
            *(_OWORD *)(a2 + 32) = v40;
            *(_OWORD *)(a2 + 48) = v41;
            *(unsigned char *)(a2 + 68) = *(unsigned char *)(a1 + 179);
            *(_DWORD *)(a2 + 70) = *(_DWORD *)(a1 + 180);
            *(unsigned char *)(a2 + 74) = *(unsigned char *)(a1 + 184);
            long long v42 = *v6;
            *(_WORD *)(a2 + 92) = *((_WORD *)v6 + 8);
            *(_OWORD *)(a2 + 76) = v42;
            return result;
          }
          if (enableLogInstance)
          {
            if (logInstanceID) {
              uint64_t v10 = logInstanceID;
            }
            else {
              uint64_t v10 = prevLogInstanceID;
            }
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_48;
            }
            int v50 = 134218242;
            float v51 = (const char *)WORD1(v10);
            __int16 v52 = 2080;
            *(void *)float v53 = "parse_hdr10plus_sei";
            int v12 = &_os_log_internal;
            float v13 = " [1.419.54] #%04llx %s: parsing error, bail!\n";
            uint32_t v14 = 22;
            goto LABEL_47;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return *(unsigned int *)(a1 + 88);
          }
          int v50 = 136315138;
          float v51 = "parse_hdr10plus_sei";
          float v35 = &_os_log_internal;
          float v36 = " [1.419.54] %s: parsing error, bail!\n";
          uint32_t v44 = 12;
LABEL_66:
          _os_log_impl(&dword_22224D000, v35, OS_LOG_TYPE_DEFAULT, v36, (uint8_t *)&v50, v44);
          return *(unsigned int *)(a1 + 88);
        }
        uint64_t v45 = *(void *)(a1 + 8) >> 52;
        commonRBSP::flush_bits((uint64_t *)a1, 12);
        *(_WORD *)(a1 + 180) = v45;
        uint64_t v46 = *(void *)(a1 + 8) >> 52;
        commonRBSP::flush_bits((uint64_t *)a1, 12);
        *(_WORD *)(a1 + 182) = v46;
        uint64_t v47 = *(void *)(a1 + 8) >> 60;
        commonRBSP::flush_bits((uint64_t *)a1, 4);
        *(unsigned char *)(a1 + 184) = v47;
        if (v47 <= 9)
        {
          if (v47)
          {
            unint64_t v48 = 0;
            do
            {
              uint64_t v49 = *(void *)(a1 + 8) >> 54;
              commonRBSP::flush_bits((uint64_t *)a1, 10);
              *(_WORD *)(a1 + 2 * v48++ + 186) = v49;
            }
            while (v48 < *(unsigned __int8 *)(a1 + 184));
          }
          goto LABEL_25;
        }
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v10 = logInstanceID;
          }
          else {
            uint64_t v10 = prevLogInstanceID;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_48;
          }
          int v50 = 134218498;
          float v51 = (const char *)WORD1(v10);
          __int16 v52 = 2080;
          *(void *)float v53 = "parse_hdr10plus_sei";
          *(_WORD *)&v53[8] = 1024;
          *(_DWORD *)float v54 = v47;
          int v12 = &_os_log_internal;
          float v13 = " [1.419.54] #%04llx %s: parsing error: num_bezier_curve_anchors = %d, bail!\n";
          goto LABEL_46;
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return *(unsigned int *)(a1 + 88);
        }
        int v50 = 136315394;
        float v51 = "parse_hdr10plus_sei";
        __int16 v52 = 1024;
        *(_DWORD *)float v53 = v47;
        float v35 = &_os_log_internal;
        float v36 = " [1.419.54] %s: parsing error: num_bezier_curve_anchors = %d, bail!\n";
LABEL_65:
        uint32_t v44 = 18;
        goto LABEL_66;
      }
      if (!enableLogInstance)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return *(unsigned int *)(a1 + 88);
        }
        int v50 = 136315394;
        float v51 = "parse_hdr10plus_sei";
        __int16 v52 = 1024;
        *(_DWORD *)float v53 = v24;
        float v35 = &_os_log_internal;
        float v36 = " [1.419.54] %s: parsing error: num_distributions = %d [legal value = 9], bail!\n";
        goto LABEL_65;
      }
      if (logInstanceID) {
        uint64_t v10 = logInstanceID;
      }
      else {
        uint64_t v10 = prevLogInstanceID;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_48;
      }
      int v50 = 134218498;
      float v51 = (const char *)WORD1(v10);
      __int16 v52 = 2080;
      *(void *)float v53 = "parse_hdr10plus_sei";
      *(_WORD *)&v53[8] = 1024;
      *(_DWORD *)float v54 = v24;
      int v12 = &_os_log_internal;
      float v13 = " [1.419.54] #%04llx %s: parsing error: num_distributions = %d [legal value = 9], bail!\n";
    }
    else
    {
      if (!enableLogInstance)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
          return *(unsigned int *)(a1 + 88);
        }
        int v50 = 136315394;
        float v51 = "parse_hdr10plus_sei";
        __int16 v52 = 1024;
        *(_DWORD *)float v53 = v18;
        float v35 = &_os_log_internal;
        float v36 = " [1.419.54] %s: parsing error: num_windows = %d [legal value = 1], bail!\n";
        goto LABEL_65;
      }
      if (logInstanceID) {
        uint64_t v10 = logInstanceID;
      }
      else {
        uint64_t v10 = prevLogInstanceID;
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_48;
      }
      int v50 = 134218498;
      float v51 = (const char *)WORD1(v10);
      __int16 v52 = 2080;
      *(void *)float v53 = "parse_hdr10plus_sei";
      *(_WORD *)&v53[8] = 1024;
      *(_DWORD *)float v54 = v18;
      int v12 = &_os_log_internal;
      float v13 = " [1.419.54] #%04llx %s: parsing error: num_windows = %d [legal value = 1], bail!\n";
    }
LABEL_46:
    uint32_t v14 = 28;
    goto LABEL_47;
  }
  if (!enableLogInstance)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return *(unsigned int *)(a1 + 88);
    }
    int v43 = *(unsigned __int8 *)(a1 + 92);
    int v50 = 136315906;
    float v51 = "parse_hdr10plus_sei";
    __int16 v52 = 1024;
    *(_DWORD *)float v53 = v43;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = v8;
    *(_WORD *)float v54 = 1024;
    *(_DWORD *)&v54[2] = v9;
    float v35 = &_os_log_internal;
    float v36 = " [1.419.54] %s: parsing error: sei_payload_type = %u [legal value = 4], sei_payload_length = %u, actual seiLen"
          "gth = %u, bail!\n";
    uint32_t v44 = 30;
    goto LABEL_66;
  }
  if (logInstanceID) {
    uint64_t v10 = logInstanceID;
  }
  else {
    uint64_t v10 = prevLogInstanceID;
  }
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_48;
  }
  int v11 = *(unsigned __int8 *)(a1 + 92);
  int v50 = 134219010;
  float v51 = (const char *)WORD1(v10);
  __int16 v52 = 2080;
  *(void *)float v53 = "parse_hdr10plus_sei";
  *(_WORD *)&v53[8] = 1024;
  *(_DWORD *)float v54 = v11;
  *(_WORD *)&v54[4] = 1024;
  int v55 = v8;
  __int16 v56 = 1024;
  int v57 = v9;
  int v12 = &_os_log_internal;
  float v13 = " [1.419.54] #%04llx %s: parsing error: sei_payload_type = %u [legal value = 4], sei_payload_length = %u, actual "
        "seiLength = %u, bail!\n";
  uint32_t v14 = 40;
LABEL_47:
  _os_log_impl(&dword_22224D000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v50, v14);
LABEL_48:
  prevLogInstanceID = v10;
  return *(unsigned int *)(a1 + 88);
}

uint64_t HDR10PlusMetaData_RBSP::range_check_metadata(HDR10PlusMetaData_RBSP *this)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  int v2 = this->var2 + 8 * (LODWORD(this->var6) - LODWORD(this->var5)) + 32;
  if (this->var16) {
    v2 += 8 * (this->var16 - this->var3) + 16;
  }
  if ((v2 & 0x80000000) == 0)
  {
    int var17 = this->var17;
    BOOL v4 = var17 != 181;
    if (var17 != 181)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v5 = logInstanceID;
        }
        else {
          uint64_t v5 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          long long v42 = (const char *)WORD1(v5);
          __int16 v43 = 2080;
          *(void *)uint32_t v44 = "range_check_metadata";
          *(_WORD *)&v44[8] = 1024;
          *(_DWORD *)uint64_t v45 = var17;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: itu_t_t35_country_code = %02x", buf, 0x1Cu);
        }
        prevLogInstanceID = v5;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        long long v42 = "range_check_metadata";
        __int16 v43 = 1024;
        *(_DWORD *)uint32_t v44 = var17;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: itu_t_t35_country_code = %02x", buf, 0x12u);
      }
    }
    int var18 = this->var18;
    if (var18 != 60)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v10 = logInstanceID;
        }
        else {
          uint64_t v10 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          long long v42 = (const char *)WORD1(v10);
          __int16 v43 = 2080;
          *(void *)uint32_t v44 = "range_check_metadata";
          *(_WORD *)&v44[8] = 1024;
          *(_DWORD *)uint64_t v45 = var18;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: itu_t_t35_terminal_provider_code = %04x", buf, 0x1Cu);
        }
        prevLogInstanceID = v10;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        long long v42 = "range_check_metadata";
        __int16 v43 = 1024;
        *(_DWORD *)uint32_t v44 = var18;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: itu_t_t35_terminal_provider_code = %04x", buf, 0x12u);
      }
      BOOL v4 = 1;
    }
    int var19 = this->var19;
    if (var19 != 1)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v12 = logInstanceID;
        }
        else {
          uint64_t v12 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          long long v42 = (const char *)WORD1(v12);
          __int16 v43 = 2080;
          *(void *)uint32_t v44 = "range_check_metadata";
          *(_WORD *)&v44[8] = 1024;
          *(_DWORD *)uint64_t v45 = var19;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: itu_t_t35_terminal_provider_oriented_code = %d", buf, 0x1Cu);
        }
        prevLogInstanceID = v12;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        long long v42 = "range_check_metadata";
        __int16 v43 = 1024;
        *(_DWORD *)uint32_t v44 = var19;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: itu_t_t35_terminal_provider_oriented_code = %d", buf, 0x12u);
      }
      BOOL v4 = 1;
    }
    int var20 = this->var20;
    if (var20 != 4)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v14 = logInstanceID;
        }
        else {
          uint64_t v14 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          long long v42 = (const char *)WORD1(v14);
          __int16 v43 = 2080;
          *(void *)uint32_t v44 = "range_check_metadata";
          *(_WORD *)&v44[8] = 1024;
          *(_DWORD *)uint64_t v45 = var20;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: application_identifier = %d", buf, 0x1Cu);
        }
        prevLogInstanceID = v14;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        long long v42 = "range_check_metadata";
        __int16 v43 = 1024;
        *(_DWORD *)uint32_t v44 = var20;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: application_identifier = %d", buf, 0x12u);
      }
      BOOL v4 = 1;
    }
    int var21 = this->var21;
    if (var21 != 1)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v16 = logInstanceID;
        }
        else {
          uint64_t v16 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          long long v42 = (const char *)WORD1(v16);
          __int16 v43 = 2080;
          *(void *)uint32_t v44 = "range_check_metadata";
          *(_WORD *)&v44[8] = 1024;
          *(_DWORD *)uint64_t v45 = var21;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: application_versiouint64_t n = %d", buf, 0x1Cu);
        }
        prevLogInstanceID = v16;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        long long v42 = "range_check_metadata";
        __int16 v43 = 1024;
        *(_DWORD *)uint32_t v44 = var21;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: application_versiouint64_t n = %d", buf, 0x12u);
      }
      BOOL v4 = 1;
    }
    if (this->var24)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v17 = logInstanceID;
        }
        else {
          uint64_t v17 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          long long v42 = (const char *)WORD1(v17);
          __int16 v43 = 2080;
          *(void *)uint32_t v44 = "range_check_metadata";
          *(_WORD *)&v44[8] = 1024;
          *(_DWORD *)uint64_t v45 = 1;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: targeted_system_display_actual_peak_luminance_flag = %d", buf, 0x1Cu);
        }
        prevLogInstanceID = v17;
        BOOL v4 = 1;
      }
      else
      {
        BOOL v4 = 1;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          long long v42 = "range_check_metadata";
          __int16 v43 = 1024;
          *(_DWORD *)uint32_t v44 = 1;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: targeted_system_display_actual_peak_luminance_flag = %d", buf, 0x12u);
        }
      }
    }
    uint64_t v18 = 0;
    uint64_t v19 = &_os_log_internal;
    do
    {
      unsigned int v20 = this->var25[v18];
      if (v20 > 0x186A0)
      {
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v21 = logInstanceID;
          }
          else {
            uint64_t v21 = prevLogInstanceID;
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218754;
            long long v42 = (const char *)WORD1(v21);
            __int16 v43 = 2080;
            *(void *)uint32_t v44 = "range_check_metadata";
            *(_WORD *)&v44[8] = 1024;
            *(_DWORD *)uint64_t v45 = v18;
            *(_WORD *)&v45[4] = 1024;
            *(_DWORD *)uint64_t v46 = v20;
            _os_log_impl(&dword_22224D000, v19, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: maxscl[%d] = %08x", buf, 0x22u);
          }
          prevLogInstanceID = v21;
        }
        else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          long long v42 = "range_check_metadata";
          __int16 v43 = 1024;
          *(_DWORD *)uint32_t v44 = v18;
          *(_WORD *)&v44[4] = 1024;
          *(_DWORD *)&v44[6] = v20;
          _os_log_impl(&dword_22224D000, v19, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: maxscl[%d] = %08x", buf, 0x18u);
        }
        BOOL v4 = 1;
      }
      ++v18;
    }
    while (v18 != 3);
    unsigned int var26 = this->var26;
    if (var26 > 0x186A0)
    {
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v23 = logInstanceID;
        }
        else {
          uint64_t v23 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          long long v42 = (const char *)WORD1(v23);
          __int16 v43 = 2080;
          *(void *)uint32_t v44 = "range_check_metadata";
          *(_WORD *)&v44[8] = 1024;
          *(_DWORD *)uint64_t v45 = var26;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: average_maxrgb = %08x", buf, 0x1Cu);
        }
        prevLogInstanceID = v23;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        long long v42 = "range_check_metadata";
        __int16 v43 = 1024;
        *(_DWORD *)uint32_t v44 = var26;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: average_maxrgb = %08x", buf, 0x12u);
      }
      BOOL v4 = 1;
    }
    uint64_t v24 = 0;
    unint64_t v25 = &_os_log_internal;
    do
    {
      int v26 = this->var28[v24];
      int v27 = this->var38[v24];
      if (v26 != v27)
      {
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v28 = logInstanceID;
          }
          else {
            uint64_t v28 = prevLogInstanceID;
          }
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134219266;
            long long v42 = (const char *)WORD1(v28);
            __int16 v43 = 2080;
            *(void *)uint32_t v44 = "range_check_metadata";
            *(_WORD *)&v44[8] = 1024;
            *(_DWORD *)uint64_t v45 = v24;
            *(_WORD *)&v45[4] = 1024;
            *(_DWORD *)uint64_t v46 = v26;
            *(_WORD *)&v46[4] = 1024;
            int v47 = v24;
            __int16 v48 = 1024;
            int v49 = v27;
            _os_log_impl(&dword_22224D000, v25, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: distribution_index[%d]:%d != k_distribution_index[%d]:%d", buf, 0x2Eu);
          }
          prevLogInstanceID = v28;
        }
        else if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          long long v42 = "range_check_metadata";
          __int16 v43 = 1024;
          *(_DWORD *)uint32_t v44 = v24;
          *(_WORD *)&v44[4] = 1024;
          *(_DWORD *)&v44[6] = v26;
          *(_WORD *)uint64_t v45 = 1024;
          *(_DWORD *)&v45[2] = v24;
          *(_WORD *)uint64_t v46 = 1024;
          *(_DWORD *)&v46[2] = v27;
          _os_log_impl(&dword_22224D000, v25, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: distribution_index[%d]:%d != k_distribution_index[%d]:%d", buf, 0x24u);
        }
        BOOL v4 = 1;
      }
      ++v24;
    }
    while (v24 != 9);
    uint64_t v29 = 0;
    uint64_t v30 = &_os_log_internal;
    while (v29 != 2)
    {
      unsigned int v33 = this->var29[v29];
      if (v33 > 0x186A0)
      {
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v34 = logInstanceID;
          }
          else {
            uint64_t v34 = prevLogInstanceID;
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218754;
            long long v42 = (const char *)WORD1(v34);
            __int16 v43 = 2080;
            *(void *)uint32_t v44 = "range_check_metadata";
            *(_WORD *)&v44[8] = 1024;
            *(_DWORD *)uint64_t v45 = v29;
            *(_WORD *)&v45[4] = 1024;
            *(_DWORD *)uint64_t v46 = v33;
            _os_log_impl(&dword_22224D000, v30, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: distribution_values[%d] = %08x", buf, 0x22u);
          }
          prevLogInstanceID = v34;
          goto LABEL_138;
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          long long v42 = "range_check_metadata";
          __int16 v43 = 1024;
          *(_DWORD *)uint32_t v44 = v29;
          *(_WORD *)&v44[4] = 1024;
          *(_DWORD *)&v44[6] = v33;
          float v35 = v30;
LABEL_137:
          _os_log_impl(&dword_22224D000, v35, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: distribution_values[%d] = %08x", buf, 0x18u);
        }
LABEL_138:
        BOOL v4 = 1;
      }
LABEL_139:
      if (++v29 == 9)
      {
        int var30 = this->var30;
        if (this->var30)
        {
          if (enableLogInstance)
          {
            if (logInstanceID) {
              uint64_t v37 = logInstanceID;
            }
            else {
              uint64_t v37 = prevLogInstanceID;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218498;
              long long v42 = (const char *)WORD1(v37);
              __int16 v43 = 2080;
              *(void *)uint32_t v44 = "range_check_metadata";
              *(_WORD *)&v44[8] = 1024;
              *(_DWORD *)uint64_t v45 = var30;
              _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: warning: fraction_bright_pixels = %d", buf, 0x1Cu);
            }
            prevLogInstanceID = v37;
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            long long v42 = "range_check_metadata";
            __int16 v43 = 1024;
            *(_DWORD *)uint32_t v44 = var30;
            _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: warning: fraction_bright_pixels = %d", buf, 0x12u);
          }
        }
        if (this->var31)
        {
          if (enableLogInstance)
          {
            if (logInstanceID) {
              uint64_t v38 = logInstanceID;
            }
            else {
              uint64_t v38 = prevLogInstanceID;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218498;
              long long v42 = (const char *)WORD1(v38);
              __int16 v43 = 2080;
              *(void *)uint32_t v44 = "range_check_metadata";
              *(_WORD *)&v44[8] = 1024;
              *(_DWORD *)uint64_t v45 = 1;
              _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: mastering_display_actual_peak_luminance_flag = %d", buf, 0x1Cu);
            }
            prevLogInstanceID = v38;
            BOOL v4 = 1;
          }
          else
          {
            BOOL v4 = 1;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              long long v42 = "range_check_metadata";
              __int16 v43 = 1024;
              *(_DWORD *)uint32_t v44 = 1;
              _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] %s: syntax error: mastering_display_actual_peak_luminance_flag = %d", buf, 0x12u);
            }
          }
        }
        if (this->var37)
        {
          if (enableLogInstance)
          {
            if (logInstanceID) {
              uint64_t v39 = logInstanceID;
            }
            else {
              uint64_t v39 = prevLogInstanceID;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218498;
              long long v42 = (const char *)WORD1(v39);
              __int16 v43 = 2080;
              *(void *)uint32_t v44 = "range_check_metadata";
              *(_WORD *)&v44[8] = 1024;
              *(_DWORD *)uint64_t v45 = 1;
              _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: color_saturation_mapping_flag = %d", buf, 0x1Cu);
            }
            prevLogInstanceID = v39;
            return this->var14;
          }
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
            return this->var14;
          }
          *(_DWORD *)buf = 136315394;
          long long v42 = "range_check_metadata";
          __int16 v43 = 1024;
          *(_DWORD *)uint32_t v44 = 1;
          int v7 = &_os_log_internal;
          uint64_t v8 = " [1.419.54] %s: syntax error: color_saturation_mapping_flag = %d";
LABEL_172:
          _os_log_impl(&dword_22224D000, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
          return this->var14;
        }
        if (v4) {
          return this->var14;
        }
        return 0;
      }
    }
    unsigned int v31 = this->var29[2];
    if (v31 < 0x65 || v31 == 255) {
      goto LABEL_139;
    }
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v32 = logInstanceID;
      }
      else {
        uint64_t v32 = prevLogInstanceID;
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218754;
        long long v42 = (const char *)WORD1(v32);
        __int16 v43 = 2080;
        *(void *)uint32_t v44 = "range_check_metadata";
        *(_WORD *)&v44[8] = 1024;
        *(_DWORD *)uint64_t v45 = 2;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)uint64_t v46 = v31;
        _os_log_impl(&dword_22224D000, v30, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: syntax error: distribution_values[%d] = %08x", buf, 0x22u);
      }
      prevLogInstanceID = v32;
    }
    else if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      long long v42 = "range_check_metadata";
      __int16 v43 = 1024;
      *(_DWORD *)uint32_t v44 = 2;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v31;
      float v35 = v30;
      goto LABEL_137;
    }
    goto LABEL_138;
  }
  if (!enableLogInstance)
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      return this->var14;
    }
    *(_DWORD *)buf = 136315394;
    long long v42 = "range_check_metadata";
    __int16 v43 = 1024;
    *(_DWORD *)uint32_t v44 = v2;
    int v7 = &_os_log_internal;
    uint64_t v8 = " [1.419.54] %s: parsing error remaining_bits = %d, bail!\n";
    goto LABEL_172;
  }
  if (logInstanceID) {
    uint64_t v6 = logInstanceID;
  }
  else {
    uint64_t v6 = prevLogInstanceID;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    long long v42 = (const char *)WORD1(v6);
    __int16 v43 = 2080;
    *(void *)uint32_t v44 = "range_check_metadata";
    *(_WORD *)&v44[8] = 1024;
    *(_DWORD *)uint64_t v45 = v2;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx %s: parsing error remaining_bits = %d, bail!\n", buf, 0x1Cu);
  }
  prevLogInstanceID = v6;
  return this->var14;
}

__n128 HDR10PlusMetaData_RBSP::copy_metadata(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 112);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 120);
  *(void *)(a2 + 4) = v2;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 124);
  *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 129);
  *(unsigned char *)(a2 + 29) = *(unsigned char *)(a1 + 137);
  *(void *)(a2 + 21) = v3;
  long long v4 = *(_OWORD *)(a1 + 140);
  long long v5 = *(_OWORD *)(a1 + 156);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 172);
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(unsigned char *)(a2 + 68) = *(unsigned char *)(a1 + 179);
  *(_DWORD *)(a2 + 70) = *(_DWORD *)(a1 + 180);
  *(unsigned char *)(a2 + 74) = *(unsigned char *)(a1 + 184);
  __n128 result = *(__n128 *)(a1 + 186);
  *(_WORD *)(a2 + 92) = *(_WORD *)(a1 + 202);
  *(__n128 *)(a2 + 76) = result;
  return result;
}

uint64_t MrParseMds(unsigned char *a1, int a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11)
{
  *(_DWORD *)a10 = 0;
  *a9 = 0;
  if (a2)
  {
    *(unsigned char *)(a10 + 4) = *a1;
    if (a2 != 1)
    {
      uint64_t v12 = 0;
      float v13 = (unsigned int *)(a1 + 2);
      *(unsigned char *)(a10 + 5) = a1[1];
      int v14 = a2 - 2;
      uint64_t v15 = a10;
LABEL_6:
      uint64_t v16 = 8;
      while (1)
      {
        BOOL v17 = __OFSUB__(v14, 2);
        v14 -= 2;
        if (v14 < 0 != v17) {
          break;
        }
        unsigned int v18 = *(unsigned __int16 *)v13;
        float v13 = (unsigned int *)((char *)v13 + 2);
        *(double *)(v15 + v16) = (double)((int)bswap32(v18) >> 16) * 0.000122070312;
        v16 += 8;
        if (v16 == 32)
        {
          ++v12;
          v15 += 24;
          if (v12 != 3) {
            goto LABEL_6;
          }
          uint64_t v19 = 80;
          while (1)
          {
            BOOL v17 = __OFSUB__(v14, 4);
            v14 -= 4;
            if (v14 < 0 != v17) {
              return 0xFFFFFFFFLL;
            }
            unsigned int v20 = *v13++;
            *(double *)(a10 + v19) = (double)bswap32(v20) * 0.0000152587891;
            v19 += 8;
            if (v19 == 104)
            {
              uint64_t v21 = 0;
              uint64_t v22 = 104;
LABEL_14:
              uint64_t v23 = 0;
              uint64_t v24 = v13;
              int v25 = v14;
              uint64_t v26 = v22;
              while (1)
              {
                BOOL v17 = __OFSUB__(v14, 2);
                v14 -= 2;
                if (v14 < 0 != v17) {
                  return 0xFFFFFFFFLL;
                }
                *(double *)(a10 + v26) = (double)((int)bswap32(*(unsigned __int16 *)((char *)v24 + v23)) >> 16)
                                       * 0.0000610351562;
                v23 += 2;
                v26 += 8;
                if (v23 == 6)
                {
                  ++v21;
                  v22 += 24;
                  float v13 = (unsigned int *)((char *)v24 + 6);
                  if (v21 != 3) {
                    goto LABEL_14;
                  }
                  if ((v25 - 4) >= 4)
                  {
                    unsigned int v27 = bswap32(*((unsigned __int16 *)v24 + 3)) >> 16;
                    double v28 = (double)v27;
                    if (v27 <= 0xFFFD) {
                      double v28 = (double)v27 * 0.0000610351562;
                    }
                    *(double *)(a10 + 176) = v28;
                    unsigned int v29 = v14 & 0xFFFFFFFE;
                    if (v29 != 2)
                    {
                      *(double *)(a10 + 184) = (double)(bswap32(*((unsigned __int16 *)v24 + 4)) >> 16) * 0.25;
                      if (v29 != 4)
                      {
                        *(double *)(a10 + 192) = (double)(bswap32(*((unsigned __int16 *)v24 + 5)) >> 16)
                                               * 0.0000152587891;
                        if ((v25 - 16) <= 0xFFFFFFFB)
                        {
                          *(double *)(a10 + 200) = (double)bswap32(v24[3]) * 0.00000381469727;
                          if (v25 != 16)
                          {
                            *(unsigned char *)(a10 + 208) = *((unsigned char *)v24 + 16);
                            if (v25 != 17)
                            {
                              *(unsigned char *)(a10 + 209) = *((unsigned char *)v24 + 17);
                              if (v25 != 18)
                              {
                                *(unsigned char *)(a10 + 210) = *((unsigned char *)v24 + 18);
                                if (v25 != 19)
                                {
                                  *(unsigned char *)(a10 + 211) = *((unsigned char *)v24 + 19);
                                  if (v29 != 14)
                                  {
                                    *(double *)(a10 + 216) = (double)(bswap32(*((unsigned __int16 *)v24 + 10)) >> 16)
                                                           * 0.000244200244;
                                    if (v29 != 16)
                                    {
                                      *(double *)(a10 + 224) = (double)(bswap32(*((unsigned __int16 *)v24 + 11)) >> 16)
                                                             * 0.000244200244;
                                      if (v29 != 18)
                                      {
                                        *(_WORD *)(a10 + 232) = bswap32(*((unsigned __int16 *)v24 + 12)) >> 16;
                                        *(_DWORD *)a10 |= 1u;
                                        *(_DWORD *)(a10 + 384) = 0;
                                        *(_DWORD *)(a10 + 904) = 0;
                                        *(_DWORD *)(a10 + 2432) = 0;
                                        if (v25 != 26)
                                        {
                                          uint64_t v32 = (char *)v24 + 6;
                                          int v33 = v32[20];
                                          *(unsigned char *)(a10 + 3033) = v33;
                                          int v34 = v25 - 27;
                                          char v35 = 0;
                                          if (v33)
                                          {
                                            int v36 = 0;
                                            uint64_t v37 = v32 + 21;
                                            uint64_t v84 = a10 + 1032;
                                            uint64_t v85 = a10 + 984;
                                            while (1)
                                            {
                                              if (v34 <= 4) {
                                                return 0xFFFFFFFFLL;
                                              }
                                              int v38 = bswap32(*(_DWORD *)v37);
                                              int v39 = v34 - 5;
                                              if (v38 > v34 - 5) {
                                                return 0xFFFFFFFFLL;
                                              }
                                              long long v40 = v37 + 5;
                                              int v41 = v37[4];
                                              switch(v37[4])
                                              {
                                                case 1:
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v39 >= 2)
                                                  {
                                                    BOOL v17 = __OFSUB__(v38, 6);
                                                    v38 -= 6;
                                                    if (v38 < 0 == v17)
                                                    {
                                                      *(double *)(a10 + 328) = (double)(bswap32(*(unsigned __int16 *)(v37 + 5)) >> 16)
                                                                             * 0.000244200244;
                                                      if ((v34 - 9) <= 0xFFFFFFFD)
                                                      {
                                                        *(double *)(a10 + 336) = (double)(bswap32(*(unsigned __int16 *)(v37 + 7)) >> 16)
                                                                               * 0.000244200244;
                                                        int v39 = v34 - 11;
                                                        if ((v34 - 11) <= 0xFFFFFFFD)
                                                        {
                                                          long long v40 = v37 + 11;
                                                          a7 = (double)(bswap32(*(unsigned __int16 *)(v37 + 9)) >> 16)
                                                             * 0.000244200244;
                                                          *(double *)(a10 + 344) = a7;
                                                          int v42 = *(_DWORD *)a10 | 2;
                                                          goto LABEL_117;
                                                        }
                                                      }
                                                    }
                                                  }
                                                  return result;
                                                case 2:
                                                  int v44 = *(_DWORD *)(a10 + 384);
                                                  if (v44 > 7) {
                                                    goto LABEL_123;
                                                  }
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v39 >= 2)
                                                  {
                                                    int v45 = 2 * *(_DWORD *)(a10 + 380);
                                                    BOOL v17 = __OFSUB__(v38, v45);
                                                    v38 -= v45;
                                                    if (v38 < 0 == v17)
                                                    {
                                                      uint64_t v46 = 0;
                                                      int v47 = v34 - 7;
                                                      *(double *)(a10 + 56 * v44 + 392) = (double)(bswap32(*(unsigned __int16 *)(v37 + 5)) >> 16)
                                                                                          * 0.000244200244;
                                                      uint64_t v48 = 56 * v44 + 400;
                                                      int v49 = (double *)(a11 + 64);
                                                      do
                                                      {
                                                        BOOL v17 = __OFSUB__(v47, 2);
                                                        v47 -= 2;
                                                        if (v47 < 0 != v17) {
                                                          return 0xFFFFFFFFLL;
                                                        }
                                                        double v50 = *v49++;
                                                        *(double *)(a10 + v48) = v50
                                                                               + (double)(bswap32(*(unsigned __int16 *)&v37[v46 + 7]) >> 16)
                                                                               * 0.000244140625;
                                                        v46 += 2;
                                                        v48 += 8;
                                                      }
                                                      while (v46 != 10);
                                                      if ((v34 - 15) >= 4)
                                                      {
                                                        long long v40 = v37 + 19;
                                                        int v39 = v34 - 19;
                                                        a7 = *(double *)(a11 + 104)
                                                           + (double)_byteswap_ushort(*(_WORD *)(v37 + 17))
                                                           * 0.00048828125;
                                                        *(double *)(a10 + 56 * v44 + 440) = a7;
                                                        *(_DWORD *)a10 |= 4u;
                                                        *(_DWORD *)(a10 + 384) = v44 + 1;
                                                        goto LABEL_123;
                                                      }
                                                      return 0xFFFFFFFFLL;
                                                    }
                                                  }
                                                  return result;
                                                case 3:
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v39 >= 2)
                                                  {
                                                    BOOL v17 = __OFSUB__(v38, 6);
                                                    v38 -= 6;
                                                    if (v38 < 0 == v17)
                                                    {
                                                      *(double *)(a10 + 352) = (double)(bswap32(*(unsigned __int16 *)(v37 + 5)) >> 16)
                                                                             * 0.00048828125
                                                                             + -1.0;
                                                      if ((v34 - 9) <= 0xFFFFFFFD)
                                                      {
                                                        *(double *)(a10 + 360) = (double)(bswap32(*(unsigned __int16 *)(v37 + 7)) >> 16)
                                                                               * 0.00048828125
                                                                               + -1.0;
                                                        int v39 = v34 - 11;
                                                        if ((v34 - 11) <= 0xFFFFFFFD)
                                                        {
                                                          long long v40 = v37 + 11;
                                                          a7 = (double)(bswap32(*(unsigned __int16 *)(v37 + 9)) >> 16)
                                                             * 0.00048828125
                                                             + -1.0;
                                                          *(double *)(a10 + 368) = a7;
                                                          int v42 = *(_DWORD *)a10 | 8;
                                                          goto LABEL_117;
                                                        }
                                                      }
                                                    }
                                                  }
                                                  return result;
                                                case 4:
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v39 >= 2)
                                                  {
                                                    BOOL v17 = __OFSUB__(v38, 4);
                                                    v38 -= 4;
                                                    if (v38 < 0 == v17)
                                                    {
                                                      *(double *)(a10 + 3016) = (double)(bswap32(*(unsigned __int16 *)(v37 + 5)) >> 16)
                                                                              / 4095.0;
                                                      int v39 = v34 - 9;
                                                      if ((v34 - 9) <= 0xFFFFFFFD)
                                                      {
                                                        long long v40 = v37 + 9;
                                                        a7 = (double)(bswap32(*(unsigned __int16 *)(v37 + 7)) >> 16)
                                                           / 4095.0;
                                                        *(double *)(a10 + 3024) = a7;
                                                        int v42 = *(_DWORD *)a10 | 0x10;
                                                        goto LABEL_117;
                                                      }
                                                    }
                                                  }
                                                  return result;
                                                case 5:
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v39 >= 2)
                                                  {
                                                    BOOL v17 = __OFSUB__(v38, 8);
                                                    v38 -= 8;
                                                    if (v38 < 0 == v17)
                                                    {
                                                      *(_WORD *)(a10 + 234) = bswap32(*(unsigned __int16 *)(v37 + 5)) >> 16;
                                                      if ((v34 - 9) <= 0xFFFFFFFD)
                                                      {
                                                        *(_WORD *)(a10 + 236) = bswap32(*(unsigned __int16 *)(v37 + 7)) >> 16;
                                                        if ((v34 - 11) <= 0xFFFFFFFD)
                                                        {
                                                          *(_WORD *)(a10 + 238) = bswap32(*(unsigned __int16 *)(v37 + 9)) >> 16;
                                                          int v39 = v34 - 13;
                                                          if ((v34 - 13) <= 0xFFFFFFFD)
                                                          {
                                                            *(_WORD *)(a10 + 240) = bswap32(*(unsigned __int16 *)(v37 + 11)) >> 16;
                                                            long long v40 = v37 + 13;
                                                            unsigned int v43 = *(_DWORD *)a10 | 0x20;
                                                            goto LABEL_122;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  return result;
                                                case 6:
                                                case 7:
                                                  goto LABEL_52;
                                                case 8:
                                                  uint64_t v51 = *(int *)(a10 + 904);
                                                  if ((int)v51 > 4) {
                                                    goto LABEL_123;
                                                  }
                                                  *(_DWORD *)(a11 + 4 * v51 + 9176) = v38;
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v34 == 5) {
                                                    return result;
                                                  }
                                                  if (v38 < 1) {
                                                    return result;
                                                  }
                                                  __int16 v52 = (double *)(a10 + 168 * (int)v51 + 912);
                                                  LOBYTE(a7) = *v40;
                                                  *__int16 v52 = (double)*(unint64_t *)&a7;
                                                  if (v38 < 0xD) {
                                                    return result;
                                                  }
                                                  uint64_t v53 = 0;
                                                  int v54 = v34 - 6;
                                                  uint64_t v55 = 168 * (int)v51;
                                                  uint64_t v56 = v55 + 920;
                                                  uint64_t v57 = 3;
                                                  uint64_t v58 = (double *)(a11 + 288);
                                                  do
                                                  {
                                                    BOOL v17 = __OFSUB__(v54, 2);
                                                    v54 -= 2;
                                                    if (v54 < 0 != v17) {
                                                      return 0xFFFFFFFFLL;
                                                    }
                                                    uint64_t v59 = v57;
                                                    double v60 = *v58++;
                                                    *(double *)(a10 + v56) = v60
                                                                           + (double)(bswap32(*(unsigned __int16 *)&v37[v53 + 6]) >> 16)
                                                                           * 0.000244140625;
                                                    v53 += 2;
                                                    v56 += 8;
                                                    v57 += 2;
                                                  }
                                                  while (v53 != 10);
                                                  if ((v34 - 14) < 4) {
                                                    return 0xFFFFFFFFLL;
                                                  }
                                                  uint64_t v61 = 0;
                                                  v52[6] = *(double *)(a11 + 328)
                                                         + (double)_byteswap_ushort(*((_WORD *)v37 + 8)) * 0.00048828125;
                                                  do
                                                  {
                                                    a7 = *(double *)(a11 + 168 + v61);
                                                    *(double *)(a10 + 968 + v55 + v61) = a7;
                                                    v61 += 8;
                                                  }
                                                  while (v61 != 112);
                                                  if ((v38 - 12) > 2)
                                                  {
                                                    if (v34 - 14 < 6) {
                                                      return 0xFFFFFFFFLL;
                                                    }
                                                    a7 = *(double *)(a11 + 336)
                                                       + (double)_byteswap_ushort(*((_WORD *)v37 + 9)) * 0.000244140625;
                                                    v52[7] = a7;
                                                    if (v38 <= 16)
                                                    {
                                                      long long v40 = v37 + 20;
                                                      int v39 = v34 - 20;
                                                      v38 -= 15;
                                                    }
                                                    else
                                                    {
                                                      if ((v34 - 20) < 2) {
                                                        return 0xFFFFFFFFLL;
                                                      }
                                                      long long v40 = v37 + 22;
                                                      a7 = *(double *)(a11 + 344)
                                                         + (double)_byteswap_ushort(*((_WORD *)v37 + 10))
                                                         * 0.000244140625;
                                                      v52[8] = a7;
                                                      if ((v38 - 15) >= 0x14) {
                                                        unsigned int v78 = 2;
                                                      }
                                                      else {
                                                        unsigned int v78 = (v38 - 17) / 6u;
                                                      }
                                                      if (v78)
                                                      {
                                                        uint64_t v79 = 0;
                                                        int v39 = v34 - 22;
                                                        do
                                                        {
                                                          if (!(22 - v34 + v79)) {
                                                            return 0xFFFFFFFFLL;
                                                          }
                                                          uint64_t v80 = v59;
                                                          --v39;
                                                          LOBYTE(a7) = v40[v79];
                                                          a7 = *(double *)(a11 + 352 + 8 * v79)
                                                             + (double)*(unint64_t *)&a7 * 0.0078125;
                                                          *(double *)(v85 + v55 + 8 * v79++) = a7;
                                                          ++v59;
                                                        }
                                                        while (v79 != 6);
                                                        if (v78 < 2)
                                                        {
                                                          v38 -= 23;
                                                          uint64_t v83 = v37 + 16;
                                                        }
                                                        else
                                                        {
                                                          for (uint64_t i = 0; i != 48; i += 8)
                                                          {
                                                            if (v34 - 12 == v80) {
                                                              return 0xFFFFFFFFLL;
                                                            }
                                                            LOBYTE(a7) = v37[v80 + 12];
                                                            a7 = *(double *)(a11 + 400 + i)
                                                               + (double)*(unint64_t *)&a7 * 0.00390625;
                                                            *(double *)(v84 + v55 + i) = a7;
                                                            ++v80;
                                                          }
                                                          v38 -= 29;
                                                          uint64_t v82 = a11 + 4 * *(int *)(a10 + 904);
                                                          *(_DWORD *)(v82 + 9176) -= v38;
                                                          int v39 = v34 - v80 - 12;
                                                          uint64_t v83 = &v37[v80];
                                                        }
                                                        long long v40 = v83 + 12;
                                                      }
                                                      else
                                                      {
                                                        int v39 = v34 - 22;
                                                        v38 -= 17;
                                                      }
                                                    }
                                                  }
                                                  else
                                                  {
                                                    long long v40 = v37 + 18;
                                                    int v39 = v34 - 18;
                                                    v38 -= 13;
                                                  }
                                                  *(_DWORD *)a10 |= 0x100u;
                                                  ++*(_DWORD *)(a10 + 904);
                                                  goto LABEL_123;
                                                case 9:
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v34 == 5) {
                                                    return result;
                                                  }
                                                  int v62 = v38 - 1;
                                                  if (v38 < 1) {
                                                    return result;
                                                  }
                                                  long long v40 = v37 + 6;
                                                  unsigned int v63 = v37[5];
                                                  *(unsigned char *)(a10 + 242) = v63;
                                                  int v39 = v34 - 6;
                                                  if (v63 < 0x13) {
                                                    goto LABEL_96;
                                                  }
                                                  int v62 = v38 - 17;
                                                  if (v38 < 0x11) {
                                                    return result;
                                                  }
                                                  for (uint64_t j = 0; j != 64; j += 8)
                                                  {
                                                    BOOL v17 = __OFSUB__(v39, 2);
                                                    v39 -= 2;
                                                    if (v39 < 0 != v17) {
                                                      return 0xFFFFFFFFLL;
                                                    }
                                                    unsigned int v65 = *(unsigned __int16 *)v40;
                                                    v40 += 2;
                                                    a7 = (double)((int)bswap32(v65) >> 16) * 0.0000305185095;
                                                    *(double *)(a10 + 248 + j) = a7;
                                                  }
LABEL_96:
                                                  *(_DWORD *)a10 |= 0x200u;
                                                  goto LABEL_109;
                                                case 10:
                                                  uint64_t v66 = *(int *)(a10 + 2432);
                                                  if ((int)v66 > 4) {
                                                    goto LABEL_123;
                                                  }
                                                  *(_DWORD *)(a11 + 4 * v66 + 9196) = v38;
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v34 == 5) {
                                                    return result;
                                                  }
                                                  int v62 = v38 - 6;
                                                  if (v38 < 6) {
                                                    return result;
                                                  }
                                                  *(unsigned char *)(a10 + 96 * (int)v66 + 2440) = *v40;
                                                  if ((v34 & 0xFFFFFFFE) == 6) {
                                                    return 0xFFFFFFFFLL;
                                                  }
                                                  *(double *)(a10 + 96 * (int)v66 + 2448) = (double)(bswap32(*((unsigned __int16 *)v37 + 3)) >> 16)
                                                                                            * 0.000244200244;
                                                  if ((v34 & 0xFFFFFFFE) == 8) {
                                                    return 0xFFFFFFFFLL;
                                                  }
                                                  a7 = (double)(bswap32(*((unsigned __int16 *)v37 + 4)) >> 16)
                                                     * 0.000244200244;
                                                  *(double *)(a10 + 96 * (int)v66 + 2456) = a7;
                                                  if (v34 == 10) {
                                                    return 0xFFFFFFFFLL;
                                                  }
                                                  long long v40 = v37 + 11;
                                                  unsigned int v67 = v37[10];
                                                  *(unsigned char *)(a10 + 96 * (int)v66 + 2464) = v67;
                                                  int v39 = v34 - 11;
                                                  if (v67 < 0x13) {
                                                    goto LABEL_108;
                                                  }
                                                  int v62 = v38 - 22;
                                                  if ((v38 - 22) > 0xFFFFFFEE) {
                                                    return 0xFFFFFFFFLL;
                                                  }
                                                  uint64_t v68 = 0;
                                                  uint64_t v69 = a10 + 2472 + 96 * (int)v66;
                                                  do
                                                  {
                                                    BOOL v17 = __OFSUB__(v39, 2);
                                                    v39 -= 2;
                                                    if (v39 < 0 != v17) {
                                                      return 0xFFFFFFFFLL;
                                                    }
                                                    unsigned int v70 = *(unsigned __int16 *)v40;
                                                    v40 += 2;
                                                    a7 = (double)((int)bswap32(v70) >> 16) * 0.0000305185095;
                                                    *(double *)(v69 + v68) = a7;
                                                    v68 += 8;
                                                  }
                                                  while (v68 != 64);
LABEL_108:
                                                  uint64_t v71 = a11 + 4 * *(int *)(a10 + 2432);
                                                  *(_DWORD *)(v71 + 9196) -= v62;
                                                  *(_DWORD *)a10 |= 0x400u;
                                                  ++*(_DWORD *)(a10 + 2432);
LABEL_109:
                                                  int v38 = v62;
                                                  goto LABEL_123;
                                                case 11:
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v34 == 5) {
                                                    return result;
                                                  }
                                                  BOOL v17 = __OFSUB__(v38, 4);
                                                  v38 -= 4;
                                                  if (v38 < 0 != v17) {
                                                    return result;
                                                  }
                                                  char v72 = *v40;
                                                  *(unsigned char *)(a10 + 313) = *v40;
                                                  *(unsigned char *)(a11 + 9216) = v72;
                                                  *(unsigned char *)(a10 + 312) = 0;
                                                  *(unsigned char *)(a10 + 313) &= 0xFu;
                                                  if (v34 == 6) {
                                                    return result;
                                                  }
                                                  uint64_t v73 = 0;
                                                  long long v40 = v37 + 7;
                                                  char v74 = v37[6];
                                                  *(unsigned char *)(a10 + 314) = v74;
                                                  int v39 = v34 - 7;
                                                  *(unsigned char *)(a11 + 9217) = v74;
                                                  *(unsigned char *)(a10 + 314) &= 0xFu;
                                                  char v75 = 1;
                                                  do
                                                  {
                                                    if (!v39) {
                                                      return 0xFFFFFFFFLL;
                                                    }
                                                    char v76 = v75;
                                                    char v75 = 0;
                                                    char v77 = *v40++;
                                                    *(unsigned char *)(a11 + 9218 + v73) = v77;
                                                    --v39;
                                                    uint64_t v73 = 1;
                                                  }
                                                  while ((v76 & 1) != 0);
                                                  int v42 = *(_DWORD *)a10 | 0x800;
LABEL_117:
                                                  *(_DWORD *)a10 = v42;
                                                  goto LABEL_123;
                                                default:
                                                  if (v41 == 254)
                                                  {
                                                    uint64_t result = 0xFFFFFFFFLL;
                                                    if (v34 == 5) {
                                                      return result;
                                                    }
                                                    BOOL v17 = __OFSUB__(v38, 2);
                                                    v38 -= 2;
                                                    if (v38 < 0 != v17) {
                                                      return result;
                                                    }
                                                    *(unsigned char *)(a10 + 315) = *v40;
                                                    if (v34 == 6) {
                                                      return result;
                                                    }
                                                    long long v40 = v37 + 7;
                                                    *(unsigned char *)(a10 + 316) = v37[6];
                                                    int v39 = v34 - 7;
                                                    unsigned int v43 = *(_DWORD *)a10 | 0x40000000;
                                                    goto LABEL_122;
                                                  }
                                                  if (v41 == 255)
                                                  {
                                                    uint64_t result = 0xFFFFFFFFLL;
                                                    if (v34 == 5) {
                                                      return result;
                                                    }
                                                    BOOL v17 = __OFSUB__(v38, 6);
                                                    v38 -= 6;
                                                    if (v38 < 0 != v17) {
                                                      return result;
                                                    }
                                                    *(unsigned char *)(a10 + 317) = *v40;
                                                    if (v34 == 6) {
                                                      return result;
                                                    }
                                                    *(unsigned char *)(a10 + 318) = v37[6];
                                                    if (v34 == 7) {
                                                      return result;
                                                    }
                                                    *(unsigned char *)(a10 + 319) = v37[7];
                                                    if (v34 == 8) {
                                                      return result;
                                                    }
                                                    *(unsigned char *)(a10 + 320) = v37[8];
                                                    if (v34 == 9) {
                                                      return result;
                                                    }
                                                    *(unsigned char *)(a10 + 321) = v37[9];
                                                    if (v34 == 10) {
                                                      return result;
                                                    }
                                                    long long v40 = v37 + 11;
                                                    *(unsigned char *)(a10 + 322) = v37[10];
                                                    int v39 = v34 - 11;
                                                    unsigned int v43 = *(_DWORD *)a10 | 0x80000000;
LABEL_122:
                                                    *(_DWORD *)a10 = v43;
                                                    goto LABEL_123;
                                                  }
LABEL_52:
                                                  if ((v41 & 0xFE) == 6)
                                                  {
                                                    ++v35;
                                                    *a9 += v38 + 5;
                                                  }
LABEL_123:
                                                  uint64_t result = 0xFFFFFFFFLL;
                                                  if (v38 < 0) {
                                                    return result;
                                                  }
                                                  int v34 = v39 - v38;
                                                  if (v39 < v38) {
                                                    return result;
                                                  }
                                                  uint64_t v37 = &v40[v38];
                                                  if (++v36 >= *(unsigned __int8 *)(a10 + 3033)) {
                                                    goto LABEL_147;
                                                  }
                                                  break;
                                              }
                                            }
                                          }
LABEL_147:
                                          AppenddDefaultL2L8Trim(a11, (int *)a10);
                                          *(unsigned char *)(a10 + 3033) -= v35;
                                          return (a2 - v34);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  return 0xFFFFFFFFLL;
                }
              }
            }
          }
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

double AppenddDefaultL2L8Trim(uint64_t a1, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if ((*a2 & 0x100) != 0)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (uint64_t)&a2[42 * a2[226] + 228];
      do
      {
        double result = *(double *)(a1 + 112 + v3);
        *(double *)(v4 + v3) = result;
        v3 += 8;
      }
      while (v3 != 168);
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v6 = 0;
      int v7 = &a2[14 * a2[96]];
      *((void *)v7 + 49) = *((void *)a2 + 28);
      uint64_t v8 = v7 + 100;
      do
      {
        double result = *(double *)(a1 + 8 + v6 * 4);
        *(double *)&v8[v6] = result;
        v6 += 2;
      }
      while (v6 != 12);
    }
  }
  return result;
}

uint64_t MrGetMdsExtFxpMr(void *a1, uint64_t a2)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  if (!a2 || (*(_DWORD *)(a2 + 4176) & 0x80000000) != 0)
  {
    uint64_t v4 = 0xFFFFFFFFLL;
LABEL_12:
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v6 = logInstanceID;
      }
      else {
        uint64_t v6 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v148 = WORD1(v6);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: MrGetMdsExtFxpMr mdsLen < 0", buf, 0xCu);
      }
      prevLogInstanceID = v6;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: MrGetMdsExtFxpMr mdsLen < 0", buf, 2u);
    }
    return v4;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 4184);
  if ((int)v4 <= 70)
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v5 = logInstanceID;
      }
      else {
        uint64_t v5 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v148 = WORD1(v5);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: GetMdsExtMr mr->mdsBase.mdsLen < 71", buf, 0xCu);
      }
      prevLogInstanceID = v5;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: GetMdsExtMr mr->mdsBase.mdsLen < 71", buf, 2u);
    }
    uint64_t v4 = *(unsigned int *)(a2 + 4184);
    if ((v4 & 0x80000000) != 0) {
      goto LABEL_12;
    }
  }
  *a1 = a2 + 7236;
  if (!*(_DWORD *)(a2 + 7232))
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a2 + 4192);
    *(_DWORD *)(a2 + 7236) = v8;
    *(_WORD *)(a2 + 7240) = *(_WORD *)(a2 + 4196);
    float64x2_t v9 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
    __asm
    {
      FMOV            V25.2D, #0.5
      FMOV            V26.2D, #-0.5
    }
    *(int32x2_t *)(a2 + 7264) = vmovn_s64((int64x2_t)vcvtq_u64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(*(float64x2_t *)(a2 + 4272)), (int8x16_t)vmlaq_f64(_Q25, v9, *(float64x2_t *)(a2 + 4272)), (int8x16_t)vmlaq_f64(_Q26, v9, *(float64x2_t *)(a2 + 4272)))));
    double v14 = *(double *)(a2 + 4288);
    if (v14 >= 0.0) {
      double v15 = v14 * 65536.0 + 0.5;
    }
    else {
      double v15 = v14 * 65536.0 + -0.5;
    }
    *(_DWORD *)(a2 + 7272) = v15;
    uint64_t v16 = (_WORD *)(a2 + 7248);
    uint64_t v17 = a2 + 4216;
    do
    {
      unsigned int v18 = (double *)(v17 + v7);
      double v19 = *(double *)(v17 + v7 - 16);
      if (v19 >= 0.0) {
        double v20 = v19 * 8192.0 + 0.5;
      }
      else {
        double v20 = v19 * 8192.0 + -0.5;
      }
      *(v16 - 2) = (int)v20;
      double v21 = *(v18 - 1);
      if (v21 >= 0.0) {
        double v22 = v21 * 8192.0 + 0.5;
      }
      else {
        double v22 = v21 * 8192.0 + -0.5;
      }
      *(v16 - 1) = (int)v22;
      if (*v18 >= 0.0) {
        double v23 = *v18 * 8192.0 + 0.5;
      }
      else {
        double v23 = *v18 * 8192.0 + -0.5;
      }
      _WORD *v16 = (int)v23;
      v16 += 3;
      v7 += 24;
    }
    while (v7 != 72);
    uint64_t v24 = 0;
    int v25 = (_WORD *)(a2 + 7282);
    uint64_t v26 = a2 + 4312;
    do
    {
      unsigned int v27 = (double *)(v26 + v24);
      double v28 = *(double *)(v26 + v24 - 16);
      if (v28 >= 0.0) {
        double v29 = v28 * 16384.0 + 0.5;
      }
      else {
        double v29 = v28 * 16384.0 + -0.5;
      }
      *(v25 - 2) = (int)v29;
      double v30 = *(v27 - 1);
      if (v30 >= 0.0) {
        double v31 = v30 * 16384.0 + 0.5;
      }
      else {
        double v31 = v30 * 16384.0 + -0.5;
      }
      *(v25 - 1) = (int)v31;
      if (*v27 >= 0.0) {
        double v32 = *v27 * 16384.0 + 0.5;
      }
      else {
        double v32 = *v27 * 16384.0 + -0.5;
      }
      *int v25 = (int)v32;
      v25 += 3;
      v24 += 24;
    }
    while (v24 != 72);
    double v33 = *(double *)(a2 + 4368);
    double v34 = v33 * 16384.0 + -0.5;
    if (v33 >= 0.0) {
      double v34 = v33 * 16384.0 + 0.5;
    }
    if (v33 != 65534.0 && v33 != 65535.0) {
      double v33 = v34;
    }
    *(_WORD *)(a2 + 7296) = (int)v33;
    double v36 = *(double *)(a2 + 4376);
    if (v36 >= 0.0) {
      double v37 = v36 * 4.0 + 0.5;
    }
    else {
      double v37 = v36 * 4.0 + -0.5;
    }
    *(_WORD *)(a2 + 7298) = (int)v37;
    double v38 = *(double *)(a2 + 4384);
    double v39 = v38 * 65536.0 + -0.5;
    _NF = v38 < 0.0;
    if (v38 >= 0.0) {
      double v39 = v38 * 65536.0 + 0.5;
    }
    *(_WORD *)(a2 + 7300) = (int)v39;
    double v41 = v38 * 262144.0 + 0.5;
    double v42 = v38 * 262144.0 + -0.5;
    if (!_NF) {
      double v42 = v41;
    }
    *(_DWORD *)(a2 + 7304) = v42;
    *(_DWORD *)(a2 + 7308) = *(_DWORD *)(a2 + 4400);
    double v43 = *(double *)(a2 + 4408);
    if (v43 >= 0.0) {
      double v44 = v43 * 4095.0 + 0.5;
    }
    else {
      double v44 = v43 * 4095.0 + -0.5;
    }
    int v45 = (int)v44;
    double v46 = *(double *)(a2 + 4416);
    if (v46 >= 0.0) {
      double v47 = v46 * 4095.0 + 0.5;
    }
    else {
      double v47 = v46 * 4095.0 + -0.5;
    }
    *(_WORD *)(a2 + 7312) = v45;
    *(_WORD *)(a2 + 7314) = (int)v47;
    *(_WORD *)(a2 + 7316) = *(_WORD *)(a2 + 4424);
    *(unsigned char *)(a2 + 7933) = *(unsigned char *)(a2 + 7225);
    if ((v8 & 2) != 0)
    {
      double v48 = *(double *)(a2 + 4520);
      if (v48 >= 0.0) {
        double v49 = v48 * 4095.0 + 0.5;
      }
      else {
        double v49 = v48 * 4095.0 + -0.5;
      }
      *(_WORD *)(a2 + 7356) = (int)v49;
      double v50 = *(double *)(a2 + 4528);
      if (v50 >= 0.0) {
        double v51 = v50 * 4095.0 + 0.5;
      }
      else {
        double v51 = v50 * 4095.0 + -0.5;
      }
      *(_WORD *)(a2 + 7358) = (int)v51;
      double v52 = *(double *)(a2 + 4536);
      double v53 = v52 * 4095.0 + 0.5;
      if (v52 < 0.0) {
        double v53 = v52 * 4095.0 + -0.5;
      }
      *(_WORD *)(a2 + 7360) = (int)v53;
    }
    if ((v8 & 4) != 0)
    {
      uint64_t v54 = *(unsigned int *)(a2 + 4576);
      *(_DWORD *)(a2 + 7376) = v54;
      if ((int)v54 >= 1)
      {
        uint64_t v55 = 0;
        double v56 = *(double *)(a2 + 104);
        uint64_t v57 = a2 + 7382;
        uint64_t v58 = a2 + 4592;
        uint64_t v59 = a2 + 4184;
        do
        {
          uint64_t v60 = 0;
          uint64_t v61 = (double *)(v59 + 56 * v55 + 400);
          uint64_t v62 = v59 + 14 * v55;
          if (*v61 >= 0.0) {
            double v63 = *v61 * 4095.0 + 0.5;
          }
          else {
            double v63 = *v61 * 4095.0 + -0.5;
          }
          *(_WORD *)(v62 + 3196) = (int)v63;
          do
          {
            double v64 = (*(double *)(v58 + 8 * v60) - *(double *)(a2 + 64 + 8 * v60)) * 4096.0;
            double v65 = v64 + 0.5;
            if (v64 > 4095.0) {
              double v65 = 4095.5;
            }
            if (v64 < 0.0) {
              double v66 = 0.5;
            }
            else {
              double v66 = v65;
            }
            *(_WORD *)(v57 + 2 * v60++) = (int)v66;
          }
          while (v60 != 5);
          double v67 = (*(double *)(v59 + 56 * v55 + 448) - v56) * 2048.0;
          double v68 = v67 + 0.5;
          if (v67 > 4095.0) {
            double v68 = 4095.5;
          }
          if (v67 < 0.0) {
            double v69 = 0.5;
          }
          else {
            double v69 = v68;
          }
          *(_WORD *)(v62 + 3208) = (int)v69;
          ++v55;
          v57 += 14;
          v58 += 56;
        }
        while (v55 != v54);
      }
    }
    if ((v8 & 8) != 0)
    {
      double v70 = *(double *)(a2 + 4544) + 1.0;
      if (v70 >= 0.0) {
        double v71 = v70 * 2048.0 + 0.5;
      }
      else {
        double v71 = v70 * 2048.0 + -0.5;
      }
      *(_WORD *)(a2 + 7362) = (int)v71;
      double v72 = *(double *)(a2 + 4552) + 1.0;
      if (v72 >= 0.0) {
        double v73 = v72 * 2048.0 + 0.5;
      }
      else {
        double v73 = v72 * 2048.0 + -0.5;
      }
      *(_WORD *)(a2 + 7364) = (int)v73;
      double v74 = *(double *)(a2 + 4560) + 1.0;
      if (v74 >= 0.0) {
        double v75 = v74 * 2048.0 + 0.5;
      }
      else {
        double v75 = v74 * 2048.0 + -0.5;
      }
      *(_WORD *)(a2 + 7366) = (int)v75;
      if ((v8 & 0x10) == 0)
      {
LABEL_101:
        if ((v8 & 0x20) == 0) {
          goto LABEL_102;
        }
        goto LABEL_121;
      }
    }
    else if ((v8 & 0x10) == 0)
    {
      goto LABEL_101;
    }
    double v76 = *(double *)(a2 + 7208);
    if (v76 >= 0.0) {
      double v77 = v76 * 4095.0 + 0.5;
    }
    else {
      double v77 = v76 * 4095.0 + -0.5;
    }
    *(_WORD *)(a2 + 7928) = (int)v77;
    double v78 = *(double *)(a2 + 7216);
    if (v78 >= 0.0) {
      double v79 = v78 * 4095.0 + 0.5;
    }
    else {
      double v79 = v78 * 4095.0 + -0.5;
    }
    *(_WORD *)(a2 + 7930) = (int)v79;
    *(unsigned char *)(a2 + 7932) = 1;
    if ((v8 & 0x20) == 0)
    {
LABEL_102:
      if ((v8 & 0x100) == 0) {
        goto LABEL_183;
      }
LABEL_122:
      uint64_t v80 = *(unsigned int *)(a2 + 5096);
      *(_DWORD *)(a2 + 7516) = v80;
      if ((int)v80 < 1) {
        goto LABEL_173;
      }
      uint64_t v81 = 0;
      double v82 = *(double *)(a2 + 328);
      uint64_t v83 = a2 + 7522;
      uint64_t v84 = a2 + 5112;
      uint64_t v85 = a2 + 7538;
      uint64_t v86 = a2 + 5176;
      uint64_t v87 = a2 + 7550;
      uint64_t v88 = a2 + 5224;
      uint64_t v89 = a2 + 4184;
      do
      {
        uint64_t v90 = 0;
        int v91 = *(_DWORD *)(a2 + 4 * v81 + 9176);
        uint64_t v92 = v89 + 42 * v81;
        *(_WORD *)(v92 + 3336) = (int)*(double *)(v89 + 168 * v81 + 920);
        do
        {
          double v93 = (*(double *)(v84 + 8 * v90) - *(double *)(a2 + 288 + 8 * v90)) * 4096.0;
          double v94 = v93 + 0.5;
          if (v93 > 4095.0) {
            double v94 = 4095.5;
          }
          if (v93 < 0.0) {
            double v95 = 0.5;
          }
          else {
            double v95 = v94;
          }
          *(_WORD *)(v83 + 2 * v90++) = (int)v95;
        }
        while (v90 != 5);
        double v96 = (*(double *)(v89 + 168 * v81 + 968) - v82) * 2048.0;
        double v97 = v96 + 0.5;
        if (v96 > 4095.0) {
          double v97 = 4095.5;
        }
        if (v96 < 0.0) {
          double v98 = 0.5;
        }
        else {
          double v98 = v97;
        }
        *(_WORD *)(v92 + 3348) = (int)v98;
        *(_DWORD *)(v92 + 3350) = 134219776;
        if ((v91 - 12) >= 3)
        {
          double v100 = (*(double *)(v89 + 168 * v81 + 976) - *(double *)(a2 + 336)) * 4096.0;
          double v101 = v100 + 0.5;
          if (v100 > 4095.0) {
            double v101 = 4095.5;
          }
          if (v100 < 0.0) {
            double v102 = 0.5;
          }
          else {
            double v102 = v101;
          }
          *(_WORD *)(v92 + 3350) = (int)v102;
          unsigned int v99 = v91 - 17;
          if (v91 < 17)
          {
            unsigned int v99 = v91 - 15;
          }
          else
          {
            double v103 = (*(double *)(v89 + 168 * v81 + 984) - *(double *)(a2 + 344)) * 4096.0;
            double v104 = v103 + 0.5;
            if (v103 > 4095.0) {
              double v104 = 4095.5;
            }
            if (v103 < 0.0) {
              double v105 = 0.5;
            }
            else {
              double v105 = v104;
            }
            *(_WORD *)(v92 + 3352) = (int)v105;
            if (v91 >= 0x23) {
              unsigned int v106 = 2;
            }
            else {
              unsigned int v106 = v99 / 6;
            }
            if (v106)
            {
              for (uint64_t i = 0; i != 6; ++i)
              {
                double v108 = (*(double *)(v86 + 8 * i) - *(double *)(a2 + 352 + 8 * i)) * 128.0;
                double v109 = v108 + 0.5;
                if (v108 > 255.0) {
                  double v109 = 255.5;
                }
                if (v108 < 0.0) {
                  double v110 = 0.5;
                }
                else {
                  double v110 = v109;
                }
                *(_WORD *)(v85 + 2 * i) = (int)v110;
              }
              if (v106 < 2)
              {
                unsigned int v99 = v91 - 23;
              }
              else
              {
                for (uint64_t j = 0; j != 6; ++j)
                {
                  double v112 = (*(double *)(v88 + 8 * j) - *(double *)(a2 + 400 + 8 * j)) * 256.0;
                  double v113 = v112 + 0.5;
                  if (v112 > 255.0) {
                    double v113 = 255.5;
                  }
                  if (v112 < 0.0) {
                    double v114 = 0.5;
                  }
                  else {
                    double v114 = v113;
                  }
                  *(_WORD *)(v87 + 2 * j) = (int)v114;
                }
                unsigned int v99 = v91 - 29;
              }
            }
          }
        }
        else
        {
          unsigned int v99 = v91 - 13;
        }
        ++v81;
        v83 += 42;
        v84 += 168;
        v85 += 42;
        v86 += 168;
        v87 += 42;
        v88 += 168;
      }
      while (v81 != v80);
      if ((v99 & 0x80000000) != 0)
      {
LABEL_173:
        float64x2_t v145 = _Q26;
        float64x2_t v146 = _Q25;
        if (enableLogInstance)
        {
          if (logInstanceID) {
            uint64_t v115 = logInstanceID;
          }
          else {
            uint64_t v115 = prevLogInstanceID;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            uint64_t v148 = WORD1(v115);
            _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: MrGetMdsExtFxpMr extLen < 0", buf, 0xCu);
          }
          prevLogInstanceID = v115;
          goto LABEL_182;
        }
        BOOL v116 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        _Q26 = v145;
        _Q25 = v146;
        if (v116)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: MrGetMdsExtFxpMr extLen < 0", buf, 2u);
LABEL_182:
          _Q26 = v145;
          _Q25 = v146;
        }
      }
LABEL_183:
      int v117 = *(_DWORD *)(a2 + 4192);
      if ((v117 & 0x200) != 0)
      {
        unsigned int v118 = *(unsigned __int8 *)(a2 + 4434);
        *(unsigned char *)(a2 + 7326) = v118;
        if (v118 >= 0x13)
        {
          uint64_t v119 = 0;
          float v120 = (float64x2_t *)(a2 + 4440);
          float64x2_t v121 = (float64x2_t)vdupq_n_s64(0x40DFFFC000000000uLL);
          do
          {
            float64x2_t v122 = *v120++;
            int32x2_t v123 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(v122), (int8x16_t)vmlaq_f64(_Q25, v121, v122), (int8x16_t)vmlaq_f64(_Q26, v121, v122))));
            float v124 = (_WORD *)(a2 + 7328 + v119);
            v124[1] = v123.i16[2];
            *float v124 = v123.i16[0];
            v119 += 4;
          }
          while (v119 != 16);
        }
      }
      if ((v117 & 0x400) != 0)
      {
        uint64_t v125 = *(unsigned int *)(a2 + 6624);
        *(_DWORD *)(a2 + 7780) = v125;
        if ((int)v125 >= 1)
        {
          uint64_t v126 = 0;
          uint64_t v127 = 0;
          uint64_t v128 = 24 * v125;
          uint64_t v129 = 6664;
          uint64_t v130 = 6632;
          float64x2_t v131 = (float64x2_t)vdupq_n_s64(0x40DFFFC000000000uLL);
          do
          {
            float v132 = (int8x16_t *)(a2 + v127);
            *(_WORD *)(a2 + v127 + 7784) = *(unsigned __int8 *)(a2 + v130);
            double v133 = *(double *)(a2 + v126 + 6640);
            if (v133 >= 0.0) {
              double v134 = v133 * 4095.0 + 0.5;
            }
            else {
              double v134 = v133 * 4095.0 + -0.5;
            }
            v132[486].i16[5] = (int)v134;
            double v135 = *(double *)(a2 + v126 + 6648);
            if (v135 >= 0.0) {
              double v136 = v135 * 4095.0 + 0.5;
            }
            else {
              double v136 = v135 * 4095.0 + -0.5;
            }
            v132[486].i16[6] = (int)v136;
            unsigned int v137 = *(unsigned __int8 *)(a2 + v130 + 24);
            v132[486].i16[7] = v137;
            if (v137 >= 0x13)
            {
              float64x2_t v138 = *(float64x2_t *)(a2 + v129);
              float64x2_t v139 = *(float64x2_t *)(a2 + v129 + 16);
              float64x2_t v140 = *(float64x2_t *)(a2 + v129 + 32);
              float64x2_t v141 = *(float64x2_t *)(a2 + v129 + 48);
              v150.val[0] = (int8x16_t)vcgezq_f64(v141);
              v150.val[1] = (int8x16_t)vcgezq_f64(v140);
              v150.val[2] = (int8x16_t)vcgezq_f64(v139);
              v150.val[3] = (int8x16_t)vcgezq_f64(v138);
              float64x2_t v142 = (float64x2_t)vbslq_s8(v150.val[3], (int8x16_t)vmlaq_f64(_Q25, v131, v138), (int8x16_t)vmlaq_f64(_Q26, v131, v138));
              float64x2_t v143 = (float64x2_t)vbslq_s8(v150.val[2], (int8x16_t)vmlaq_f64(_Q25, v131, v139), (int8x16_t)vmlaq_f64(_Q26, v131, v139));
              *(int32x2_t *)v150.val[3].i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8(v150.val[0], (int8x16_t)vmlaq_f64(_Q25, v131, v141), (int8x16_t)vmlaq_f64(_Q26, v131, v141))));
              *(int32x2_t *)v150.val[2].i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8(v150.val[1], (int8x16_t)vmlaq_f64(_Q25, v131, v140), (int8x16_t)vmlaq_f64(_Q26, v131, v140))));
              *(int32x2_t *)v150.val[1].i8 = vmovn_s64(vcvtq_s64_f64(v143));
              *(int32x2_t *)v150.val[0].i8 = vmovn_s64(vcvtq_s64_f64(v142));
              v132[487] = vqtbl4q_s8(v150, (int8x16_t)xmmword_2222D1D10);
            }
            v129 += 96;
            v127 += 24;
            v126 += 96;
            v130 += 96;
          }
          while (v128 != v127);
        }
      }
      if ((v117 & 0x800) != 0)
      {
        *(unsigned char *)(a2 + 7344) = *(unsigned char *)(a2 + 4504);
        *(_WORD *)(a2 + 7345) = *(_WORD *)(a2 + 4505);
        if ((v117 & 0x40000000) == 0)
        {
LABEL_201:
          if ((v117 & 0x80000000) == 0)
          {
LABEL_202:
            *(_DWORD *)(a2 + 7232) = 1;
            return v4;
          }
LABEL_206:
          *(_DWORD *)(a2 + 7349) = *(_DWORD *)(a2 + 4509);
          *(_WORD *)(a2 + 7353) = *(_WORD *)(a2 + 4513);
          goto LABEL_202;
        }
      }
      else if ((v117 & 0x40000000) == 0)
      {
        goto LABEL_201;
      }
      *(_WORD *)(a2 + 7347) = *(_WORD *)(a2 + 4507);
      if ((v117 & 0x80000000) == 0) {
        goto LABEL_202;
      }
      goto LABEL_206;
    }
LABEL_121:
    *(void *)(a2 + 7318) = *(void *)(a2 + 4426);
    if ((v8 & 0x100) == 0) {
      goto LABEL_183;
    }
    goto LABEL_122;
  }
  return v4;
}

void sub_2222BD38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PolyMultiply(float *a1, float *a2, int a3, int a4, float *a5, int a6)
{
  uint64_t v6 = a5;
  if (a6 >= 1) {
    bzero(a5, 4 * a6);
  }
  if (a3 >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a2;
      float v13 = v6;
      uint64_t v14 = a4;
      if (a4 >= 1)
      {
        do
        {
          float v15 = *v12++;
          *float v13 = *v13 + (float)(a1[v11] * v15);
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v11;
      ++v6;
    }
    while (v11 != a3);
  }
}

void PolyGeneric2PolyStd(float *a1, int a2, int a3, float a4, float *a5)
{
}

void PolyGeneric2PolyStd(float *a1, int a2, float a3, int a4, float a5, float *a6)
{
}

void PolyGeneric2PolyStd(float *a1, int a2, int a3, float *a4, float *a5)
{
}

void PolyGeneric2PolyStd(float *a1, int a2, float a3, int a4, float *a5, float *a6)
{
}

float calculatePolyStd(float a1, const float *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a3;
  float v7 = 0.0;
  do
  {
    float v8 = a2[v5];
    float v7 = v7 + (float)(v8 * powf(a1, (float)(int)v5++));
  }
  while (v6 != v5);
  return v7;
}

float calculatePolyGeneric(float a1, float *a2, int a3, int a4, float a5)
{
  if (a3 < 1)
  {
    float v11 = 0.0;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = a3;
    float v11 = 0.0;
    do
    {
      float v12 = a2[v9];
      float v11 = v11 + (float)(v12 * powf(a1, (float)(int)v9++));
    }
    while (v10 != v9);
  }
  return powf(v11, (float)a4) * a5;
}

float calculatePolyGeneric(float a1, float *a2, int a3, int a4, float *a5)
{
  if (a4 < 0) {
    return 0.0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3;
  uint64_t v11 = (a4 + 1);
  float v12 = 0.0;
  do
  {
    float v13 = a5[v9];
    float v14 = 0.0;
    if (a3 >= 1)
    {
      uint64_t v15 = 0;
      do
      {
        float v16 = a2[v15];
        float v14 = v14 + (float)(v16 * powf(a1, (float)(int)v15++));
      }
      while (v10 != v15);
    }
    float v12 = v12 + (float)(v13 * powf(v14, (float)(int)v9++));
  }
  while (v9 != v11);
  return v12;
}

float calculatePolyGeneric(float a1, float *a2, float a3, int a4, int a5, float a6)
{
  if (a4 < 1)
  {
    float v13 = 0.0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = a4;
    float v13 = 0.0;
    do
    {
      float v14 = a2[v11];
      float v13 = v13 + (float)(v14 * powf(a1, (float)(int)v11++));
    }
    while (v12 != v11);
  }
  return powf(v13 / a3, (float)a5) * a6;
}

float calculatePolyGeneric(float a1, float *a2, float a3, int a4, int a5, const float *a6)
{
  if (a5 < 0) {
    return 0.0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = a4;
  uint64_t v13 = (a5 + 1);
  float v14 = 0.0;
  do
  {
    float v15 = a6[v11];
    float v16 = 0.0;
    if (a4 >= 1)
    {
      uint64_t v17 = 0;
      do
      {
        float v18 = a2[v17];
        float v16 = v16 + (float)(v18 * powf(a1, (float)(int)v17++));
      }
      while (v12 != v17);
    }
    float v14 = v14 + (float)(v15 * powf(v16 / a3, (float)(int)v11++));
  }
  while (v11 != v13);
  return v14;
}

float dp_srgb_eotf(float a1)
{
  double v1 = a1;
  if (v1 >= 0.04045) {
    return pow((v1 + 0.055) * 0.947867299, 2.4);
  }
  else {
    return v1 * 0.0773993808;
  }
}

float dp_srgb_degamma(float a1)
{
  double v1 = a1;
  if (v1 >= 0.04045) {
    return pow((v1 + 0.055) * 0.947867299, 2.4);
  }
  else {
    return v1 * 0.0773993808;
  }
}

float dp_srgb_oetf(float a1)
{
  long double v1 = a1;
  if (v1 >= 0.0031308) {
    return pow(v1, 0.416667) * 1.055 + -0.055;
  }
  else {
    return v1 * 12.92;
  }
}

float dp_srgb_engamma(float a1)
{
  long double v1 = a1;
  if (v1 >= 0.0031308) {
    return pow(v1, 0.416667) * 1.055 + -0.055;
  }
  else {
    return v1 * 12.92;
  }
}

void applyDPCompensationS(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(float *)a1 > 0.0)
    {
      float v2 = *(float *)(a1 + 8);
      if ((float)(v2 / *(float *)a1) > a2)
      {
        double v3 = (float)(powf(a2 / v2, 0.45455) * *(float *)(a1 + 4));
        if (v3 >= 0.04045) {
          pow((v3 + 0.055) * 0.947867299, 2.4);
        }
      }
    }
  }
}

void setDPCompensationTableS_L(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v6 = 0;
    float v7 = (float)(a2 - 1);
    unsigned int v8 = 1;
    do
    {
      applyDPCompensationS(a3, (float)(v8 - 1) / v7);
      *(_DWORD *)(a1 + 4 * v6) = v9;
      unint64_t v6 = v8++;
    }
    while (v6 < a2);
  }
}

float applyNonHeadroomDependentDPCompensation(float a1)
{
  double v1 = powf(a1, 0.45455);
  if (v1 >= 0.04045) {
    return pow((v1 + 0.055) * 0.947867299, 2.4);
  }
  else {
    return v1 * 0.0773993808;
  }
}

void sub_2222BE400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222BFE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_2222C027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2222C0400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2222C05F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2222C0714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2222C0914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_2222C0A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2222C0B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2222C0CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_2222C7864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t apply_ml4_criteria(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3 = *a1;
  if (v3 >= 0xC) {
    LOWORD(v3) = 12;
  }
  *a1 = v3;
  unsigned int v4 = *a2;
  if (v4 <= 0x333) {
    LOWORD(v4) = 819;
  }
  *a2 = v4;
  unsigned int v5 = *a3;
  if (v5 <= 0x821) {
    LOWORD(v5) = 2081;
  }
  *a3 = v5;
  if (*a2 >= (unsigned __int16)(v5 - 1)) {
    unsigned __int16 v6 = v5 - 1;
  }
  else {
    unsigned __int16 v6 = *a2;
  }
  *a2 = v6;
  return 0;
}

uint64_t ATFMTLfloat2half_rtz(float a1)
{
  int v2 = HIWORD(LODWORD(a1)) & 0x8000;
  float v3 = fabsf(a1);
  if (v3 >= 65536.0)
  {
    __int16 v6 = v2 | 0x7BFF;
    LOWORD(v2) = v2 | 0x7C00;
    if (v3 != INFINITY) {
      LOWORD(v2) = v6;
    }
  }
  else
  {
    unsigned int v4 = v2 | ((LODWORD(a1) + 0x8000000) >> 13);
    unsigned int v5 = v2 | vcvts_n_s32_f32(v3, 0x18uLL);
    if (v3 < 0.000061035) {
      LOWORD(v4) = v5;
    }
    if (v3 >= 0.000000059605) {
      LOWORD(v2) = v4;
    }
  }
  return (unsigned __int16)v2;
}

float ATFMTLhalf2float(unsigned int a1)
{
  unsigned int v1 = (a1 << 16) & 0x80000000;
  int v2 = (a1 >> 10) & 0x1F;
  int v3 = a1 << 13;
  unsigned int v4 = (a1 << 13) & 0x7FE000;
  if (v2 == 31)
  {
    if (v4) {
      int v7 = 2143289344;
    }
    else {
      int v7 = 2139095040;
    }
    int v6 = v1 | v3 | v7;
    return *(float *)&v6;
  }
  if (v2)
  {
LABEL_5:
    int v6 = ((v4 | (v2 << 23)) + 939524096) | v1;
    return *(float *)&v6;
  }
  if (v4)
  {
    unsigned int v5 = __clz(v4);
    int v2 = 9 - v5;
    unsigned int v4 = (v3 << (v5 - 8)) & 0x7FE000;
    goto LABEL_5;
  }
  float result = -0.0;
  if (!v1) {
    return 0.0;
  }
  return result;
}

double setTargitBrightnessInMetaData(uint64_t a1, double result, float a3, float a4, float a5)
{
  if (a1)
  {
    __int16 v9 = PQIn12Bit(*(float *)&result);
    __int16 v10 = PQIn12Bit(a3);
    int v11 = PQIn12Bit(a4);
    int v12 = PQIn12Bit(a5);
    *(unsigned char *)(a1 + 64) = HIBYTE(v10);
    int v13 = v12 + v11;
    *(unsigned char *)(a1 + 65) = v10;
    if (v12 + v11 < 0 != __OFADD__(v12, v11)) {
      ++v13;
    }
    *(unsigned char *)(a1 + 66) = HIBYTE(v9);
    int v14 = v13 >> 1;
    *(unsigned char *)(a1 + 67) = v9;
    *(void *)&float result = 0x100000001;
    *(_DWORD *)(a1 + 70) = 1;
    *(_WORD *)(a1 + 74) = 262;
    *(unsigned char *)(a1 + 76) = BYTE1(v12);
    *(unsigned char *)(a1 + 77) = v12;
    *(unsigned char *)(a1 + 78) = BYTE1(v11);
    *(unsigned char *)(a1 + 79) = v11;
    *(unsigned char *)(a1 + 80) = BYTE1(v14);
    *(unsigned char *)(a1 + 81) = v14;
  }
  return result;
}

_WORD *adjustL1Meta(_WORD *result, float a2)
{
  int v2 = (unsigned __int16)result[81];
  LOWORD(a2) = result[80];
  *(float *)&unsigned int v3 = fmaxf((float)LODWORD(a2), 2081.0);
  int v4 = (int)*(float *)&v3;
  LOWORD(v3) = result[79];
  int v5 = (int)fminf((float)v3, 614.0);
  if (v5 + 700 > v2) {
    int v2 = v5 + 700;
  }
  if (v2 >= v4) {
    LOWORD(v2) = v4 - 1;
  }
  result[80] = v4;
  result[79] = v5;
  result[81] = v2;
  return result;
}

uint64_t adjustL1MetaData(uint64_t result, int a2)
{
  int v2 = (int)fmaxf((float)(int)__rev16(*(unsigned __int16 *)(result + 78)), 2081.0);
  signed int v3 = __rev16(*(unsigned __int16 *)(result + 80));
  int v4 = (int)fminf((float)(int)__rev16(*(unsigned __int16 *)(result + 76)), 614.0);
  if (v3 <= v4 + 700) {
    signed int v3 = v4 + 700;
  }
  if (v3 >= v2) {
    signed int v3 = v2 - 1;
  }
  if (v2 < 500) {
    int v5 = a2;
  }
  else {
    int v5 = 0;
  }
  BOOL v6 = v3 < 500;
  if ((v5 & v6) != 0) {
    LOWORD(v2) = 2372;
  }
  *(unsigned char *)(result + 76) = BYTE1(v4);
  *(unsigned char *)(result + 77) = v4;
  if ((v5 & v6) != 0) {
    LOWORD(v3) = 1186;
  }
  *(unsigned char *)(result + 78) = BYTE1(v2);
  *(unsigned char *)(result + 79) = v2;
  *(unsigned char *)(result + 80) = BYTE1(v3);
  *(unsigned char *)(result + 81) = v3;
  return result;
}

uint64_t adjustL2MetaData(unsigned __int8 *a1, int a2)
{
  int v2 = a1[70];
  if (a1[75] == 1 && a1[70] != 0) {
    int v3 = 82;
  }
  else {
    int v3 = 71;
  }
  int v4 = v2 - (a1[75] == 1 && a1[70] != 0);
  int v5 = a1 + 82;
  int v6 = a1[86];
  BOOL v7 = v4 > 0;
  if (v6 == 2 && v4 >= 1)
  {
    do
    {
      unsigned int v9 = v4;
      v3 += 19;
      int v10 = v5[23];
      v5 += 19;
      BOOL v11 = v4-- != 0;
      BOOL v7 = v4 != 0 && v11;
    }
    while (v10 == 2 && v9 > 1);
  }
  unsigned int v13 = v5[4] == 3 && v7;
  int v14 = &v5[11 * v13];
  if (v13) {
    v3 += 11;
  }
  signed int v15 = v4 - v13;
  uint64_t v16 = (v14[4] == 4) & (v15 > 0);
  uint64_t v17 = &v14[8 * v16 + v16];
  if (v14[4] == 4 && v15 > 0) {
    v3 += 9;
  }
  int v18 = v15 - v16;
  BOOL v19 = v18 > 0;
  if (v17[4] == 8 && v18 >= 1)
  {
    do
    {
      unsigned int v21 = v18;
      uint64_t v22 = v17[3] + 5;
      v3 += v22;
      v17 += v22;
      BOOL v11 = v18-- != 0;
      BOOL v19 = v18 != 0 && v11;
    }
    while (v17[4] == 8 && v21 > 1);
  }
  if (v17[4] == 9 && v19)
  {
    if (v17[5] <= 0x12u) {
      uint64_t v25 = 6;
    }
    else {
      uint64_t v25 = 22;
    }
    v3 += v25;
    v17 += v25;
    --v18;
  }
  LODWORD(v26) = v18 > 0;
  if (v17[4] == 10 && v18 >= 1)
  {
    do
    {
      unsigned int v28 = v18;
      if (v17[10] <= 0x12u) {
        uint64_t v29 = 11;
      }
      else {
        uint64_t v29 = 27;
      }
      v3 += v29;
      v17 += v29;
      BOOL v11 = v18-- != 0;
      LODWORD(v26) = v18 != 0 && v11;
    }
    while (v17[4] == 10 && v28 > 1);
  }
  if (v17[4] == 11) {
    uint64_t v26 = v26;
  }
  else {
    uint64_t v26 = 0;
  }
  int v31 = v18 - v26;
  double v32 = &v17[v26 | (8 * v26)];
  BOOL v34 = v32[4] == 254 && v31 > 0;
  int v35 = v31 - v34;
  uint64_t v36 = (uint64_t)&v32[8 * v34 - v34];
  BOOL v38 = *(unsigned __int8 *)(v36 + 4) == 255 && v35 > 0;
  int v39 = v35 - v38;
  uint64_t v40 = v36 + 11 * v38;
  if (*(unsigned char *)(v40 + 4) != 5 || v39 < 1)
  {
    unsigned __int8 v42 = a1[70];
    if (!a2) {
      goto LABEL_83;
    }
  }
  else
  {
    unsigned __int8 v42 = v2 - 1;
    a1[70] = v2 - 1;
    v40 += 13;
    --v39;
    int v2 = (v2 - 1);
  }
  if (v6 == 2 && v42 >= 2u)
  {
    double v43 = a1 + 91;
    do
    {
      if (*v43 >= 8u) {
        *(_WORD *)double v43 = 8;
      }
      int v44 = v43[14];
      v43 += 19;
    }
    while (v44 == 2 && v2-- > 2);
  }
LABEL_83:
  if (*(unsigned char *)(v40 + 4) == 6 && v39 >= 1) {
    a1[70] = v42 - 1;
  }
  unsigned int v47 = v3 + 9;
  if (!v26) {
    unsigned int v47 = v3;
  }
  if (v34) {
    v47 += 7;
  }
  if (v38) {
    return v47 + 11;
  }
  else {
    return v47;
  }
}

uint64_t PacketizeMetadata(char *a1, unsigned int a2, void **a3, uint64_t a4)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  char v7 = *a1;
  modifyDMMetaForIPT((unsigned __int16 *)a1);
  if (a2 < 0x25C)
  {
    if (a2 <= 0x77)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 1) = v7;
      *(_WORD *)(a4 + 2) = 0;
      *(unsigned char *)(a4 + 4) = a2;
      memcpy((void *)(a4 + 5), a1, a2);
      bzero((void *)(a4 + 5 + a2), 119 - a2);
      uint64_t v9 = 0;
      unsigned int v10 = -1;
      do
      {
        int v11 = crc32_lut[*(unsigned __int8 *)(a4 + v9) ^ HIBYTE(v10)];
        unsigned int v10 = v11 ^ (v10 << 8);
        ++v9;
      }
      while (v9 != 124);
      *(unsigned char *)(a4 + 124) = HIBYTE(v10);
      *(unsigned char *)(a4 + 125) = BYTE2(v10);
      *(unsigned char *)(a4 + 126) = BYTE1(v10);
      *(unsigned char *)(a4 + 127) = v11;
      int v12 = *a3;
      memset(v57, 0, sizeof(v57));
      long long v58 = xmmword_2222D4AA0;
      uint64_t v59 = 1;
      unsigned int v13 = v57;
      uint64_t v14 = a4;
      goto LABEL_27;
    }
  }
  else if (enableLogInstance)
  {
    if (logInstanceID) {
      uint64_t v8 = logInstanceID;
    }
    else {
      uint64_t v8 = prevLogInstanceID;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v61 = WORD1(v8);
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/MetaPacket/DolbyVisionHDMIPacket.mm\" at line 597\n", buf, 0xCu);
    }
    prevLogInstanceID = v8;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/MetaPacket/DolbyVisionHDMIPacket.mm\" at line 597\n", buf, 2u);
  }
  uint64_t v15 = 0;
  *(unsigned char *)a4 = 64;
  *(unsigned char *)(a4 + 1) = v7;
  *(unsigned char *)(a4 + 2) = 0;
  *(unsigned char *)(a4 + 3) = BYTE1(a2);
  *(unsigned char *)(a4 + 4) = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = *((_OWORD *)a1 + 1);
  long long v18 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a4 + 53) = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a4 + 37) = v18;
  *(_OWORD *)(a4 + 21) = v17;
  *(_OWORD *)(a4 + 5) = v16;
  long long v19 = *((_OWORD *)a1 + 4);
  long long v20 = *((_OWORD *)a1 + 5);
  long long v21 = *((_OWORD *)a1 + 6);
  *(void *)(a4 + 116) = *(void *)(a1 + 111);
  *(_OWORD *)(a4 + 101) = v21;
  *(_OWORD *)(a4 + 85) = v20;
  *(_OWORD *)(a4 + 69) = v19;
  unsigned int v22 = -1;
  do
  {
    int v23 = crc32_lut[*(unsigned __int8 *)(a4 + v15) ^ HIBYTE(v22)];
    unsigned int v22 = v23 ^ (v22 << 8);
    ++v15;
  }
  while (v15 != 124);
  *(unsigned char *)(a4 + 124) = HIBYTE(v22);
  *(unsigned char *)(a4 + 125) = BYTE2(v22);
  *(unsigned char *)(a4 + 126) = BYTE1(v22);
  *(unsigned char *)(a4 + 127) = v23;
  uint64_t v24 = (long long *)(a1 + 119);
  uint64_t v25 = *a3;
  memset(v54, 0, sizeof(v54));
  long long v55 = xmmword_2222D4AA0;
  LODWORD(v26) = 1;
  uint64_t v56 = 1;
  [v25 replaceRegion:v54 mipmapLevel:0 slice:0 withBytes:a4 bytesPerRow:128 bytesPerImage:0];
  unsigned int v27 = (unsigned char *)(a4 + 128);
  if (a2 < 0xF1)
  {
    int v32 = 119;
    int v31 = (unsigned char *)a4;
  }
  else
  {
    int v28 = 240;
    uint64_t v26 = 1;
    uint64_t v29 = (unsigned char *)a4;
    do
    {
      uint64_t v30 = 0;
      int v31 = v27;
      int v32 = v28;
      v29[128] = 0x80;
      v29[129] = v7;
      v29[130] = 0;
      long long v33 = *v24;
      long long v34 = v24[1];
      long long v35 = v24[2];
      *(_OWORD *)(v29 + 179) = v24[3];
      *(_OWORD *)(v29 + 163) = v35;
      *(_OWORD *)(v29 + 147) = v34;
      *(_OWORD *)(v29 + 131) = v33;
      long long v36 = v24[4];
      long long v37 = v24[5];
      long long v38 = v24[6];
      *(_OWORD *)(v29 + 236) = *(long long *)((char *)v24 + 105);
      *(_OWORD *)(v29 + 227) = v38;
      *(_OWORD *)(v29 + 211) = v37;
      *(_OWORD *)(v29 + 195) = v36;
      unsigned int v39 = -1;
      do
      {
        int v40 = crc32_lut[v27[v30] ^ HIBYTE(v39)];
        unsigned int v39 = v40 ^ (v39 << 8);
        ++v30;
      }
      while (v30 != 124);
      v29[252] = HIBYTE(v39);
      v29[253] = BYTE2(v39);
      v29[254] = BYTE1(v39);
      v29[255] = v40;
      double v41 = a3[v26];
      memset(v51, 0, sizeof(v51));
      long long v52 = xmmword_2222D4AA0;
      uint64_t v53 = 1;
      [v41 replaceRegion:v51 mipmapLevel:0 slice:0 withBytes:a4 + (v26++ << 7) bytesPerRow:128 bytesPerImage:0];
      uint64_t v24 = (long long *)((char *)v24 + 121);
      v27 += 128;
      int v28 = v32 + 121;
      uint64_t v29 = v31;
    }
    while (v32 + 121 < a2);
  }
  v31[128] = -64;
  size_t v42 = a2 - v32;
  v31[129] = v7;
  v31[130] = 0;
  memcpy(v31 + 131, v24, v42);
  bzero(&v31[v42 + 131], (121 - v42));
  uint64_t v43 = 0;
  unsigned int v44 = -1;
  do
  {
    int v45 = crc32_lut[v27[v43] ^ HIBYTE(v44)];
    unsigned int v44 = v45 ^ (v44 << 8);
    ++v43;
  }
  while (v43 != 124);
  v31[252] = HIBYTE(v44);
  v31[253] = BYTE2(v44);
  v31[254] = BYTE1(v44);
  v31[255] = v45;
  int v12 = a3[v26];
  memset(v48, 0, sizeof(v48));
  long long v49 = xmmword_2222D4AA0;
  uint64_t v14 = a4 + (v26 << 7);
  uint64_t v50 = 1;
  unsigned int v13 = v48;
LABEL_27:
  [v12 replaceRegion:v13 mipmapLevel:0 slice:0 withBytes:v14 bytesPerRow:128 bytesPerImage:0];
  return 0;
}

double modifyDMMetaForIPT(unsigned __int16 *a1)
{
  unsigned int v1 = __rev16(a1[38]);
  if (bswap32(a1[39]) >> 16 == 65534 || v1 == 65534)
  {
    int v3 = *((unsigned __int8 *)a1 + 66);
    int v4 = *((unsigned __int8 *)a1 + 67);
    int v5 = *((unsigned __int8 *)a1 + 64);
    int v6 = *((unsigned __int8 *)a1 + 65);
    unsigned int v7 = (v6 | (v5 << 8)) + (v4 | (v3 << 8));
    *((unsigned char *)a1 + 78) = v3;
    *((unsigned char *)a1 + 79) = v4;
    *((unsigned char *)a1 + 76) = v5;
    *((unsigned char *)a1 + 77) = v6;
    *((unsigned char *)a1 + 80) = v7 >> 9;
    *((unsigned char *)a1 + 81) = v7 >> 1;
  }
  *((unsigned char *)a1 + 60) = 12;
  *(_OWORD *)(a1 + 1) = xmmword_2222D4AB0;
  a1[9] = 22506;
  *((void *)a1 + 4) = 0xA3FEA3FEA3FEB942;
  *((void *)a1 + 5) = 0xA3FEA3FEA3FEB942;
  *((_DWORD *)a1 + 12) = -18110;
  *((_DWORD *)a1 + 5) = 0;
  *(void *)&double result = 0x800000008;
  *((void *)a1 + 3) = 0x800000008;
  *(void *)(a1 + 26) = 0;
  *(unsigned __int16 *)((char *)a1 + 61) = 258;
  *((unsigned char *)a1 + 63) = 1;
  return result;
}

uint64_t PacketizeMetadataMSR(char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  char v6 = *a1;
  modifyDMMetaForIPT((unsigned __int16 *)a1);
  if (a2 < 0x1E3)
  {
    *(_WORD *)(a3 + 480) = 0;
    *(_OWORD *)(a3 + 448) = 0u;
    *(_OWORD *)(a3 + 464) = 0u;
    *(_OWORD *)(a3 + 416) = 0u;
    *(_OWORD *)(a3 + 432) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_OWORD *)(a3 + 400) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 256) = 0u;
    *(_OWORD *)(a3 + 272) = 0u;
    *(_OWORD *)(a3 + 224) = 0u;
    *(_OWORD *)(a3 + 240) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 208) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    if (a2 <= 0x77)
    {
      *(unsigned char *)(a3 + 1) = v6;
      *(unsigned char *)(a3 + 4) = a2;
      memcpy((void *)(a3 + 5), a1, a2);
      bzero((void *)(a3 + 5 + a2), 119 - a2);
      uint64_t v8 = 0;
      unsigned int v9 = -1;
      do
      {
        int v10 = crc32_lut[*(unsigned __int8 *)(a3 + v8) ^ HIBYTE(v9)];
        unsigned int v9 = v10 ^ (v9 << 8);
        ++v8;
      }
      while (v8 != 124);
      *(unsigned char *)(a3 + 124) = HIBYTE(v9);
      *(unsigned char *)(a3 + 125) = BYTE2(v9);
      *(unsigned char *)(a3 + 126) = BYTE1(v9);
      *(unsigned char *)(a3 + 127) = v10;
      return 1;
    }
  }
  else
  {
    if (enableLogInstance)
    {
      if (logInstanceID) {
        uint64_t v7 = logInstanceID;
      }
      else {
        uint64_t v7 = prevLogInstanceID;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v42 = 134217984;
        uint64_t v43 = WORD1(v7);
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/MetaPacket/DolbyVisionHDMIPacket.mm\" at line 656\n", (uint8_t *)&v42, 0xCu);
      }
      prevLogInstanceID = v7;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v42) = 0;
      _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] Assertion: \"0\" warned in \"/Library/Caches/com.apple.xbs/Sources/HDRProcessing/Metal/MetaPacket/DolbyVisionHDMIPacket.mm\" at line 656\n", (uint8_t *)&v42, 2u);
    }
    *(_OWORD *)(a3 + 5) = 0u;
    *(_OWORD *)(a3 + 437) = 0u;
    *(_OWORD *)(a3 + 453) = 0u;
    *(_OWORD *)(a3 + 405) = 0u;
    *(_OWORD *)(a3 + 421) = 0u;
    *(_OWORD *)(a3 + 373) = 0u;
    *(_OWORD *)(a3 + 389) = 0u;
    *(_OWORD *)(a3 + 341) = 0u;
    *(_OWORD *)(a3 + 357) = 0u;
    *(_OWORD *)(a3 + 309) = 0u;
    *(_OWORD *)(a3 + 325) = 0u;
    *(_OWORD *)(a3 + 277) = 0u;
    *(_OWORD *)(a3 + 293) = 0u;
    *(_OWORD *)(a3 + 245) = 0u;
    *(_OWORD *)(a3 + 261) = 0u;
    *(_OWORD *)(a3 + 213) = 0u;
    *(_OWORD *)(a3 + 229) = 0u;
    *(_OWORD *)(a3 + 181) = 0u;
    *(_OWORD *)(a3 + 197) = 0u;
    *(_OWORD *)(a3 + 149) = 0u;
    *(_OWORD *)(a3 + 165) = 0u;
    *(_OWORD *)(a3 + 117) = 0u;
    *(_OWORD *)(a3 + 133) = 0u;
    *(_OWORD *)(a3 + 85) = 0u;
    *(_OWORD *)(a3 + 101) = 0u;
    *(_OWORD *)(a3 + 53) = 0u;
    *(_OWORD *)(a3 + 69) = 0u;
    *(_OWORD *)(a3 + 21) = 0u;
    *(_OWORD *)(a3 + 37) = 0u;
    *(_OWORD *)(a3 + 466) = 0u;
  }
  uint64_t v12 = 0;
  *(unsigned char *)a3 = 64;
  *(unsigned char *)(a3 + 1) = v6;
  *(unsigned char *)(a3 + 2) = 0;
  *(unsigned char *)(a3 + 3) = BYTE1(a2);
  *(unsigned char *)(a3 + 4) = a2;
  long long v13 = *(_OWORD *)a1;
  long long v14 = *((_OWORD *)a1 + 1);
  long long v15 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a3 + 53) = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a3 + 37) = v15;
  *(_OWORD *)(a3 + 21) = v14;
  *(_OWORD *)(a3 + 5) = v13;
  long long v16 = *((_OWORD *)a1 + 4);
  long long v17 = *((_OWORD *)a1 + 5);
  long long v18 = *((_OWORD *)a1 + 6);
  *(void *)(a3 + 116) = *(void *)(a1 + 111);
  *(_OWORD *)(a3 + 101) = v18;
  *(_OWORD *)(a3 + 85) = v17;
  *(_OWORD *)(a3 + 69) = v16;
  unsigned int v19 = -1;
  do
  {
    int v20 = crc32_lut[*(unsigned __int8 *)(a3 + v12) ^ HIBYTE(v19)];
    unsigned int v19 = v20 ^ (v19 << 8);
    ++v12;
  }
  while (v12 != 124);
  *(unsigned char *)(a3 + 124) = HIBYTE(v19);
  *(unsigned char *)(a3 + 125) = BYTE2(v19);
  *(unsigned char *)(a3 + 126) = BYTE1(v19);
  *(unsigned char *)(a3 + 127) = v20;
  long long v21 = (long long *)(a1 + 119);
  uint64_t v22 = a3 + 128;
  if (a2 < 0xF1)
  {
    int v28 = 119;
    uint64_t v11 = 2;
  }
  else
  {
    int v23 = 1;
    int v24 = 240;
    do
    {
      uint64_t v25 = 0;
      int v26 = v23;
      uint64_t v27 = v22;
      int v28 = v24;
      *(unsigned char *)(a3 + 128) = 0x80;
      *(unsigned char *)(a3 + 129) = v6;
      *(unsigned char *)(a3 + 130) = 0;
      long long v29 = *v21;
      long long v30 = v21[1];
      long long v31 = v21[2];
      *(_OWORD *)(a3 + 179) = v21[3];
      *(_OWORD *)(a3 + 163) = v31;
      *(_OWORD *)(a3 + 147) = v30;
      *(_OWORD *)(a3 + 131) = v29;
      long long v32 = v21[4];
      long long v33 = v21[5];
      long long v34 = v21[6];
      *(_OWORD *)(a3 + 236) = *(long long *)((char *)v21 + 105);
      *(_OWORD *)(a3 + 227) = v34;
      *(_OWORD *)(a3 + 211) = v33;
      *(_OWORD *)(a3 + 195) = v32;
      unsigned int v35 = -1;
      do
      {
        int v36 = crc32_lut[*(unsigned __int8 *)(v22 + v25) ^ HIBYTE(v35)];
        unsigned int v35 = v36 ^ (v35 << 8);
        ++v25;
      }
      while (v25 != 124);
      *(unsigned char *)(a3 + 252) = HIBYTE(v35);
      *(unsigned char *)(a3 + 253) = BYTE2(v35);
      *(unsigned char *)(a3 + 254) = BYTE1(v35);
      *(unsigned char *)(a3 + 255) = v36;
      int v23 = v26 + 1;
      long long v21 = (long long *)((char *)v21 + 121);
      v22 += 128;
      int v24 = v28 + 121;
      a3 = v27;
    }
    while (v28 + 121 < a2);
    uint64_t v11 = (v26 + 2);
    a3 = v27;
  }
  *(unsigned char *)(a3 + 128) = -64;
  size_t v37 = a2 - v28;
  *(unsigned char *)(a3 + 129) = v6;
  *(unsigned char *)(a3 + 130) = 0;
  memcpy((void *)(a3 + 131), v21, v37);
  bzero((void *)(a3 + 131 + v37), (121 - v37));
  uint64_t v38 = 0;
  unsigned int v39 = -1;
  do
  {
    int v40 = crc32_lut[*(unsigned __int8 *)(v22 + v38) ^ HIBYTE(v39)];
    unsigned int v39 = v40 ^ (v39 << 8);
    ++v38;
  }
  while (v38 != 124);
  *(unsigned char *)(a3 + 252) = HIBYTE(v39);
  *(unsigned char *)(a3 + 253) = BYTE2(v39);
  *(unsigned char *)(a3 + 254) = BYTE1(v39);
  *(unsigned char *)(a3 + 255) = v40;
  return v11;
}

uint64_t Matrix3x3_invert(uint64_t result, long long *a2)
{
  uint64_t v2 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v3 = a2[1];
  long long v18 = *a2;
  long long v19 = v3;
  int v20 = *((_DWORD *)a2 + 8);
  float v4 = 0.0;
  uint64_t v5 = 0xFFFFFFFF00000000;
  do
  {
    if (v2 == 2) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v2 + 1;
    }
    uint64_t v7 = v2 + 1;
    uint64_t v8 = v5 >> 32;
    if (!v2) {
      uint64_t v8 = 2;
    }
    float v4 = v4
       + (float)(*((float *)&v18 + v2)
               * (float)((float)(*(float *)(((unint64_t)&v18 | 0xC) + 4 * v6) * *((float *)&v19 + v8 + 2))
                       - (float)(*(float *)(((unint64_t)&v18 | 0xC) + 4 * v8) * *((float *)&v19 + v6 + 2))));
    v5 += 0x100000000;
    ++v2;
  }
  while (v7 != 3);
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = 0;
    uint64_t v11 = v9++;
    if (v9 == 3) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11 + 1;
    }
    uint64_t v13 = ((int)v11 + 2) % 3u;
    uint64_t v14 = 0xFFFFFFFF00000000;
    do
    {
      if (v10 == 2) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v10 + 1;
      }
      long long v16 = (char *)&v18 + 12 * v15;
      uint64_t v17 = v14 >> 32;
      if (!v10) {
        uint64_t v17 = 2;
      }
      *(float *)(result + 4 * v10) = (float)((float)(*(float *)&v16[4 * v12] * *((float *)&v18 + 3 * v17 + v13))
                                           - (float)(*(float *)&v16[4 * v13] * *((float *)&v18 + 3 * v17 + v12)))
                                   / v4;
      v14 += 0x100000000;
      ++v10;
    }
    while (v10 != 3);
    result += 12;
  }
  while (v9 != 3);
  return result;
}

uint64_t Matrix3x3_scale(uint64_t result, float a2)
{
  if (result)
  {
    for (uint64_t i = 0; i != 36; i += 4)
      *(float *)(result + i) = *(float *)(result + i) * a2;
  }
  return result;
}

uint64_t Vector3_scale(uint64_t result, float a2)
{
  if (result)
  {
    for (uint64_t i = 0; i != 12; i += 4)
      *(float *)(result + i) = *(float *)(result + i) * a2;
  }
  return result;
}

uint64_t Matrix3x3_init(uint64_t result, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  if (result)
  {
    *(float *)double result = a2;
    *(float *)(result + 4) = a3;
    *(float *)(result + 8) = a4;
    *(float *)(result + 12) = a5;
    *(float *)(result + 16) = a6;
    *(float *)(result + 20) = a7;
    *(float *)(result + 24) = a8;
    *(float *)(result + 28) = a9;
    *(_DWORD *)(result + 32) = a17;
  }
  return result;
}

__n128 Matrix3x3_copy(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      __n128 result = *(__n128 *)a2;
      long long v3 = *(_OWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(__n128 *)a1 = result;
      *(_OWORD *)(a1 + 16) = v3;
    }
  }
  return result;
}

__n128 Matrix3x3_copyDbl(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      __n128 result = *(__n128 *)a2;
      long long v3 = *(_OWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(__n128 *)a1 = result;
      *(_OWORD *)(a1 + 16) = v3;
    }
  }
  return result;
}

__n128 Matrix3x3_copyInt(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      __n128 result = *(__n128 *)a2;
      long long v3 = *(_OWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(__n128 *)a1 = result;
      *(_OWORD *)(a1 + 16) = v3;
    }
  }
  return result;
}

float Matrix3x3_multvector(uint64_t a1, uint64_t a2, float *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v3 = 0;
    float v4 = (float *)(a2 + 8);
    do
    {
      float v5 = (float)(*(v4 - 1) * a3[1]) + (float)(*(v4 - 2) * *a3);
      float v6 = *v4;
      v4 += 3;
      float result = v5 + (float)(v6 * a3[2]);
      *(float *)(a1 + v3) = result;
      v3 += 4;
    }
    while (v3 != 12);
  }
  return result;
}

float Matrix3x3_multvectorDbl(uint64_t a1, uint64_t a2, float *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v3 = 0;
    float v4 = (float *)(a2 + 8);
    do
    {
      float v5 = (float)(*(v4 - 1) * a3[1]) + (float)(*(v4 - 2) * *a3);
      float v6 = *v4;
      v4 += 3;
      float result = v5 + (float)(v6 * a3[2]);
      *(float *)(a1 + v3) = result;
      v3 += 4;
    }
    while (v3 != 12);
  }
  return result;
}

uint64_t Matrix3x3_multmatrix(uint64_t result, uint64_t a2)
{
  if (result)
  {
    long long v2 = *(_OWORD *)result;
    long long v3 = *(_OWORD *)(result + 16);
    dword_26ABE7A30 = *(_DWORD *)(result + 32);
    Matrix3x3_multmatrix_temp = v2;
    unk_26ABE7A20 = v3;
    if (a2)
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        for (uint64_t j = 0; j != 12; j += 4)
          *(float *)(result + j) = (float)((float)(*((float *)&Matrix3x3_multmatrix_temp + 3 * i + 1)
                                                 * *(float *)(a2 + j + 12))
                                         + (float)(*((float *)&Matrix3x3_multmatrix_temp + 3 * i) * *(float *)(a2 + j)))
                                 + (float)(*((float *)&Matrix3x3_multmatrix_temp + 3 * i + 2) * *(float *)(a2 + j + 24));
        result += 12;
      }
    }
  }
  return result;
}

uint64_t Matrix3x3_multmatrixWithScale(uint64_t result, uint64_t a2, int a3)
{
  if (result)
  {
    long long v3 = *(_OWORD *)result;
    long long v4 = *(_OWORD *)(result + 16);
    dword_267F7CC10 = *(_DWORD *)(result + 32);
    Matrix3x3_multmatrixWithScale_temp = v3;
    unk_267F7CC00 = v4;
    if (a2)
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        for (uint64_t j = 0; j != 12; j += 4)
          *(float *)(result + j) = (float)((float)((float)(*((float *)&Matrix3x3_multmatrixWithScale_temp + 3 * i + 1)
                                                         * (float)*(int *)(a2 + j + 12))
                                                 + (float)(*((float *)&Matrix3x3_multmatrixWithScale_temp + 3 * i)
                                                         * (float)*(int *)(a2 + j)))
                                         + (float)(*((float *)&Matrix3x3_multmatrixWithScale_temp + 3 * i + 2)
                                                 * (float)*(int *)(a2 + j + 24)))
                                 / (float)a3;
        result += 12;
      }
    }
  }
  return result;
}

int *Matrix3x3_isCrossTalk(int *result)
{
  if (result)
  {
    int v1 = *result;
    if (*result == result[4]
      && v1 == result[8]
      && (int v2 = result[1], v2 == result[2])
      && v2 == result[3]
      && v2 == result[5]
      && v2 == result[6])
    {
      unsigned int v3 = v1 + 2 * v2;
      if (v2 == result[7]) {
        return (int *)v3;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t createRGB2RGB3x3Matrix(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, float a17)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v33 = 0;
  memset(v32, 0, sizeof(v32));
  int v31 = 0;
  memset(v30, 0, sizeof(v30));
  int v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  createRGB2XYZ3x3Matrix((uint64_t)v32, a2, a3, a4, a5, a6, a7, a8, a9);
  createRGB2XYZ3x3Matrix((uint64_t)v30, a10, a11, a12, a13, a14, a15, a16, a17);
  Matrix3x3_invert((uint64_t)&v27, v32);
  uint64_t result = Matrix3x3_multmatrix((uint64_t)&v27, (uint64_t)v30);
  if (a1)
  {
    long long v26 = v28;
    *(_OWORD *)a1 = v27;
    *(_OWORD *)(a1 + 16) = v26;
    *(_DWORD *)(a1 + 32) = v29;
  }
  return result;
}

uint64_t createRGB2XYZ3x3Matrix(uint64_t result, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  int v19 = 0;
  uint64_t v18 = 0;
  if (result)
  {
    uint64_t v9 = result;
    *(void *)&long long v23 = __PAIR64__(LODWORD(a4), LODWORD(a2));
    *((void *)&v23 + 1) = __PAIR64__(LODWORD(a3), LODWORD(a6));
    *(void *)&long long v24 = __PAIR64__(LODWORD(a7), LODWORD(a5));
    *((float *)&v24 + 2) = (float)(1.0 - a2) - a3;
    *((float *)&v24 + 3) = (float)(1.0 - a4) - a5;
    float v25 = (float)(1.0 - a6) - a7;
    float v10 = a8 / a9;
    float v11 = a9 / a9;
    float v12 = (float)((float)(1.0 - a8) - a9) / a9;
    Matrix3x3_invert((uint64_t)&v20, &v23);
    uint64_t v13 = 0;
    uint64_t v14 = (float *)&v20 + 2;
    do
    {
      float v15 = (float)(v11 * *(v14 - 1)) + (float)(*(v14 - 2) * v10);
      float v16 = *v14;
      v14 += 3;
      *(float *)((char *)&v18 + v13) = v15 + (float)(v16 * v12);
      v13 += 4;
    }
    while (v13 != 12);
    LODWORD(v20) = v18;
    *(void *)((char *)&v20 + 4) = 0;
    HIDWORD(v20) = 0;
    LODWORD(v21) = HIDWORD(v18);
    *(void *)((char *)&v21 + 4) = 0;
    HIDWORD(v21) = 0;
    int v22 = v19;
    uint64_t result = Matrix3x3_multmatrix((uint64_t)&v23, (uint64_t)&v20);
    long long v17 = v24;
    *(_OWORD *)uint64_t v9 = v23;
    *(_OWORD *)(v9 + 16) = v17;
    *(float *)(v9 + 32) = v25;
  }
  return result;
}

uint64_t createRGB2LMS3x3Matrix(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  if (a1)
  {
    *(_DWORD *)(a1 + 32) = 1063980840;
    *(_OWORD *)a1 = xmmword_2222D4AC8;
    *(_OWORD *)(a1 + 16) = unk_2222D4AD8;
  }
  createRGB2XYZ3x3Matrix((uint64_t)v11, a2, a3, a4, a5, a6, a7, a8, a9);
  return Matrix3x3_multmatrix(a1, (uint64_t)v11);
}

BOOL samePrimary(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16)
{
  return vabds_f32(a1, a9) < 0.0001
      && vabds_f32(a2, a10) < 0.0001
      && vabds_f32(a3, a11) < 0.0001
      && vabds_f32(a4, a12) < 0.0001
      && vabds_f32(a5, a13) < 0.0001
      && vabds_f32(a6, a14) < 0.0001
      && vabds_f32(a7, a15) < 0.0001
      && vabds_f32(a8, a16) < 0.0001;
}

float32_t Vector3x3_multmatrix(__n128 *a1, __n128 *a2, __n128 *a3, float32x4_t _Q0, float32x4_t _Q1, float32x4_t _Q2, float32x2_t a7, float32x2_t a8, __n128 a9, __n128 _Q6, __n128 a11)
{
  a11.n128_u64[0] = (unint64_t)vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(a8, *(float32x2_t *)_Q0.f32, 1), a7, _Q0.f32[0]), (float32x2_t)a9.n128_u64[0], _Q0, 2);
  _S17 = a9.n128_u32[2];
  __asm { FMLA            S6, S17, V0.S[2] }
  a11.n128_u32[2] = _Q6.n128_u32[0];
  _Q6.n128_u64[0] = (unint64_t)vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(a8, *(float32x2_t *)_Q1.f32, 1), a7, _Q1.f32[0]), (float32x2_t)a9.n128_u64[0], _Q1, 2);
  __asm { FMLA            S0, S17, V1.S[2] }
  _Q6.n128_u32[2] = _S0;
  *(float32x2_t *)_Q1.f32 = vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(a8, *(float32x2_t *)_Q2.f32, 1), a7, _Q2.f32[0]), (float32x2_t)a9.n128_u64[0], _Q2, 2);
  __asm { FMLA            S0, S17, V2.S[2] }
  _Q1.f32[2] = result;
  *a3 = (__n128)_Q1;
  *a2 = _Q6;
  *a1 = a11;
  return result;
}

void hdrpConstructL4(uint64_t a1, uint64_t a2, _WORD *a3, double a4)
{
  *(_DWORD *)(a1 + 9168) = 2;
  if (*(_WORD *)(a2 + 636))
  {
    *(_DWORD *)(a1 + 9168) = *(unsigned __int8 *)(a2 + 639) + 2;
    int v5 = 16;
    int v6 = 16;
  }
  else
  {
    int v6 = 4;
    int v5 = 8;
  }
  *(_DWORD *)(a1 + 1024) = v6;
  *(_DWORD *)(a1 + 1120) = v5;
  LOWORD(a4) = *(_WORD *)(a2 + 302);
  *(double *)&unint64_t v7 = (double)*(unint64_t *)&a4 / 4095.0;
  double v12 = *(double *)&v7;
  LOWORD(v7) = *(_WORD *)(a2 + 304);
  double v8 = *(double *)(a1 + 1360) / *(double *)(a1 + 8016);
  double v9 = (double)v7 / 4095.0 * v8 + (double)v7 / 4095.0 * 1.41 * (1.0 - v8);
  hdrpMrToneCurve(0, &v12, 1, 0, &v12, 0, 0, a1);
  double v10 = v9 * 4095.0 + 0.5;
  if (v9 < 0.0) {
    double v10 = v9 * 4095.0 + -0.5;
  }
  a3[2] = (int)v10;
  double v11 = v12 * 4095.0 + 0.5;
  if (v12 < 0.0) {
    double v11 = v12 * 4095.0 + -0.5;
  }
  a3[1] = (int)v11;
  *a3 = 1;
}

uint64_t hdrpMetadataReconstruction(char *__src, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v282 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = a4 + 1370;
  *(_DWORD *)(a4 + 1132) = 1;
  *(void *)(a4 + 640) = 0x100000001;
  double v8 = (int *)(a4 + 648);
  memcpy((void *)(a4 + 648), __src, 0x1E0uLL);
  *(_DWORD *)(a4 + 1128) = 1;
  memcpy((void *)(a4 + 1136), a2, 0xBE0uLL);
  if (!a2)
  {
    *(_DWORD *)(a4 + 9160) = *((_DWORD *)__src + 70);
LABEL_9:
    *(_DWORD *)(a4 + 9164) = *((_DWORD *)__src + 69);
    int v11 = *((_DWORD *)__src + 68);
    goto LABEL_11;
  }
  if ((*a2 & 0x80000000) != 0) {
    int v9 = *((unsigned __int8 *)a2 + 317);
  }
  else {
    int v9 = *((_DWORD *)__src + 70);
  }
  *(_DWORD *)(a4 + 9160) = v9;
  if ((*((unsigned char *)a2 + 3) & 0x40) == 0) {
    goto LABEL_9;
  }
  *(_DWORD *)(a4 + 9164) = *((unsigned __int8 *)a2 + 315);
  int v11 = *((unsigned __int8 *)a2 + 316) + 2;
LABEL_11:
  *(_DWORD *)(a4 + 9168) = v11;
  *(_DWORD *)(a4 + 4192) |= 1u;
  *(_WORD *)(v7 + 2826) = 0;
  if (*((_DWORD *)__src + 10))
  {
    long long v12 = *((_OWORD *)__src + 4);
    long long v13 = *((_OWORD *)__src + 5);
    long long v14 = *((_OWORD *)__src + 6);
    *(void *)(a4 + 4360) = *((void *)__src + 14);
    long long v15 = *((_OWORD *)__src + 3);
    *(_OWORD *)(a4 + 4328) = v13;
    *(_OWORD *)(a4 + 4344) = v14;
    *(_OWORD *)(a4 + 4296) = v15;
    *(_OWORD *)(a4 + 4312) = v12;
  }
  else if (*((_DWORD *)__src + 77))
  {
    GetRgb2XyzM33ByPrimsMR81((double *)v272, *((double *)__src + 39), *((double *)__src + 40), *((double *)__src + 41), *((double *)__src + 42), *((double *)__src + 43), *((double *)__src + 44), *((double *)__src + 45), *((double *)__src + 46));
    uint64_t v16 = 0;
    long long v17 = (char *)&unk_2222D4C30;
    do
    {
      uint64_t v18 = 0;
      int v19 = v272;
      do
      {
        uint64_t v20 = 0;
        double v21 = 0.0;
        int v22 = (double *)v19;
        do
        {
          double v23 = *v22;
          v22 += 3;
          double v21 = v21 + *(double *)&v17[v20] * v23;
          v20 += 8;
        }
        while (v20 != 24);
        *(double *)(a4 + 4296 + 24 * v16 + 8 * v18++) = v21;
        int v19 = (_OWORD *)((char *)v19 + 8);
      }
      while (v18 != 3);
      ++v16;
      v17 += 24;
    }
    while (v16 != 3);
  }
  else
  {
    GetRgb2XyzM33(*((_DWORD *)__src + 76), (uint64_t)v272);
    uint64_t v24 = 0;
    float v25 = (char *)&unk_2222D4C30;
    do
    {
      uint64_t v26 = 0;
      long long v27 = v272;
      do
      {
        uint64_t v28 = 0;
        double v29 = 0.0;
        long long v30 = (double *)v27;
        do
        {
          double v31 = *v30;
          v30 += 3;
          double v29 = v29 + *(double *)&v25[v28] * v31;
          v28 += 8;
        }
        while (v28 != 24);
        *(double *)(a4 + 4296 + 24 * v24 + 8 * v26++) = v29;
        long long v27 = (_OWORD *)((char *)v27 + 8);
      }
      while (v26 != 3);
      ++v24;
      v25 += 24;
    }
    while (v24 != 3);
  }
  if (*((_DWORD *)__src + 1))
  {
    *(void *)(a4 + 4200) = 0x3FF0000000000000;
    *(void *)(a4 + 4208) = 0;
    *(void *)(a4 + 4224) = 0;
    *(void *)(a4 + 4216) = 0;
    *(void *)(a4 + 4232) = 0x3FF0000000000000;
    *(void *)(a4 + 4240) = 0;
    *(void *)(a4 + 4256) = 0;
    *(void *)(a4 + 4248) = 0;
    *(void *)(a4 + 4264) = 0x3FF0000000000000;
    *(void *)(a4 + 4272) = 0;
    *(void *)(a4 + 4288) = 0;
    *(void *)(a4 + 4280) = 0;
    goto LABEL_60;
  }
  if (*((_DWORD *)__src + 32))
  {
    uint64_t v32 = 0;
    int v33 = __src + 136;
    double v34 = 0.0;
    uint64_t v35 = 0xFFFFFFFF00000000;
    do
    {
      if (v32 == 2) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = v32 + 1;
      }
      uint64_t v37 = v32 + 1;
      uint64_t v38 = v35 >> 32;
      if (!v32) {
        uint64_t v38 = 2;
      }
      double v34 = v34
          + *(double *)&v33[8 * v32]
          * (*(double *)&__src[8 * v36 + 160] * *(double *)&__src[8 * v38 + 184]
           - *(double *)&__src[8 * v38 + 160] * *(double *)&__src[8 * v36 + 184]);
      v35 += 0x100000000;
      ++v32;
    }
    while (v37 != 3);
    if (v34 != 0.0)
    {
      uint64_t v39 = 0;
      int v40 = (double *)(a4 + 4200);
      do
      {
        uint64_t v41 = 0;
        uint64_t v42 = v39++;
        if (v39 == 3) {
          uint64_t v43 = 0;
        }
        else {
          uint64_t v43 = v42 + 1;
        }
        unsigned int v44 = ((int)v42 + 2) % 3u;
        uint64_t v45 = 0xFFFFFFFF00000000;
        double v46 = v40;
        do
        {
          if (v41 == 2) {
            uint64_t v47 = 0;
          }
          else {
            uint64_t v47 = v41 + 1;
          }
          BOOL v76 = v41 == 0;
          uint64_t v48 = v41 + 1;
          uint64_t v49 = v45 >> 32;
          if (v76) {
            uint64_t v49 = 2;
          }
          *double v46 = (*(double *)&v33[24 * v43 + 8 * v47] * *(double *)&v33[24 * v44 + 8 * v49]
                - *(double *)&v33[24 * v43 + 8 * v49] * *(double *)&v33[24 * v44 + 8 * v47])
               / v34;
          v46 += 3;
          v45 += 0x100000000;
          uint64_t v41 = v48;
        }
        while (v48 != 3);
        ++v40;
      }
      while (v39 != 3);
    }
  }
  else
  {
    unsigned int v50 = *((_DWORD *)__src + 31);
    if (*((_DWORD *)__src + 30))
    {
      GetYuv2RgbM33(v50, a4 + 4200);
    }
    else
    {
      int v51 = *((_DWORD *)__src + 4);
      GetYuv2RgbM33(v50, (uint64_t)v272);
      uint32x2_t v52 = vshl_u32((uint32x2_t)0xE0000000DBLL, (uint32x2_t)vdup_n_s32(v51 - 8));
      v53.i64[0] = v52.i32[0];
      v53.i64[1] = v52.i32[1];
      float64x2_t v54 = vdivq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64((double)~(-1 << v51)), 0), vcvtq_f64_s64(v53));
      uint64_t v55 = -72;
      do
      {
        uint64_t v56 = (float64x2_t *)(a4 + v55);
        v56[267] = vmulq_f64(v54, *(float64x2_t *)((char *)&v272[4] + v55 + 8));
        v56[268].f64[0] = v54.f64[1] * *(double *)((char *)&v272[5] + v55 + 8);
        v55 += 24;
      }
      while (v55);
    }
  }
  if (*((_DWORD *)__src + 60))
  {
    double v57 = (double)(1 << *((_DWORD *)__src + 4));
    *(double *)(a4 + 4272) = *((double *)__src + 31) * v57;
    *(double *)(a4 + 4280) = *((double *)__src + 32) * v57;
    double v58 = *((double *)__src + 33) * v57;
LABEL_59:
    *(double *)(a4 + 4288) = v58;
    goto LABEL_60;
  }
  if (*((_DWORD *)__src + 52))
  {
    *(void *)(a4 + 4272) = *((void *)__src + 27);
    *(void *)(a4 + 4280) = *((void *)__src + 28);
    double v58 = *((double *)__src + 29);
    goto LABEL_59;
  }
  int v238 = *((_DWORD *)__src + 4);
  if (*((_DWORD *)__src + 30)) {
    int v239 = 0;
  }
  else {
    int v239 = 1 << (v238 - 4);
  }
  *(double *)(a4 + 4272) = (double)v239;
  double v240 = (double)(1 << (v238 - 1));
  *(double *)(a4 + 4288) = v240;
  *(double *)(a4 + 4280) = v240;
LABEL_60:
  int v59 = *((_DWORD *)__src + 6);
  if (v59 == 1)
  {
    uint64_t v60 = 0x40EFFFE000000000;
    goto LABEL_64;
  }
  if (v59 == 3)
  {
    uint64_t v60 = 0x40EFFFC000000000;
LABEL_64:
    *(void *)(a4 + 4368) = v60;
    *(void *)(a4 + 4376) = 0;
    *(void *)(a4 + 4392) = 0;
    *(void *)(a4 + 4384) = 0;
    goto LABEL_71;
  }
  long double v61 = *((double *)__src + 4);
  double v62 = v61 * 16384.0 + -0.5;
  if (v61 >= 0.0) {
    double v62 = v61 * 16384.0 + 0.5;
  }
  *(double *)(a4 + 4368) = (double)(int)v62;
  if (v59)
  {
    double v63 = *((double *)__src + 36);
    double v64 = *((double *)__src + 37) - v63;
  }
  else
  {
    long double v65 = *((double *)__src + 37);
    double v66 = pow(*((long double *)__src + 36), 1.0 / v61);
    long double v67 = pow(v65, 1.0 / v61) - v66;
    double v64 = pow(v67, v61);
    double v63 = v66 / v67;
  }
  *(double *)(a4 + 4376) = v64;
  *(double *)(a4 + 4384) = v63;
  *(long double *)(a4 + 4392) = exp2(*((long double *)__src + 4));
LABEL_71:
  *(unsigned char *)(v7 + 3030) = *((_DWORD *)__src + 4);
  int v68 = *((_DWORD *)__src + 1);
  if (v68)
  {
    if (v68 != 3)
    {
      int v73 = *((_DWORD *)__src + 2);
      LOBYTE(v70) = 1;
      if (v73 == 1) {
        char v74 = 1;
      }
      else {
        char v74 = 2;
      }
      if (v73) {
        char v75 = v74;
      }
      else {
        char v75 = 0;
      }
      *(unsigned char *)(v7 + 3032) = v75;
      BOOL v76 = v68 == 4;
      if (v68 == 4) {
        char v77 = 2;
      }
      else {
        char v77 = 1;
      }
      *(unsigned char *)(v7 + 3031) = v77;
      if (!v76)
      {
        int v70 = *((_DWORD *)__src + 5);
        if (v70)
        {
          if (v70 == 1) {
            LOBYTE(v70) = 1;
          }
          else {
            LOBYTE(v70) = 2;
          }
        }
      }
      goto LABEL_96;
    }
    *(unsigned char *)(v7 + 3031) = 2;
  }
  else
  {
    *(unsigned char *)(v7 + 3031) = 0;
  }
  int v69 = *((_DWORD *)__src + 2);
  LOBYTE(v70) = 1;
  if (v69 == 1) {
    char v71 = 1;
  }
  else {
    char v71 = 2;
  }
  if (v69) {
    char v72 = v71;
  }
  else {
    char v72 = 0;
  }
  *(unsigned char *)(v7 + 3032) = v72;
LABEL_96:
  *(unsigned char *)(v7 + 3033) = v70;
  double v78 = *((double *)__src + 37);
  if (v78 < 0.0) {
    double v79 = 0.0;
  }
  else {
    double v79 = v78 / 10000.0;
  }
  long double v80 = pow(v79, 0.159301758);
  double v255 = pow((v80 * 18.8515625 + 0.8359375) / (v80 * 18.6875 + 1.0), 78.84375);
  *(double *)(a4 + 4416) = v255;
  double v81 = *((double *)__src + 36);
  if (v81 < 0.0) {
    double v82 = 0.0;
  }
  else {
    double v82 = v81 / 10000.0;
  }
  long double v83 = pow(v82, 0.159301758);
  long double v84 = pow((v83 * 18.8515625 + 0.8359375) / (v83 * 18.6875 + 1.0), 78.84375);
  *(long double *)(a4 + 4408) = v84;
  *(_WORD *)(a4 + 4424) = 42;
  *(unsigned char *)(v7 + 3064) = -1;
  long long v85 = *(_OWORD *)(__src + 312);
  long long v86 = *(_OWORD *)(__src + 328);
  long long v87 = *(_OWORD *)(__src + 360);
  *(_OWORD *)(a4 + 4472) = *(_OWORD *)(__src + 344);
  *(_OWORD *)(a4 + 4488) = v87;
  *(_OWORD *)(a4 + 4440) = v85;
  *(_OWORD *)(a4 + 4456) = v86;
  *(_WORD *)(v7 + 2826) = *((_WORD *)a2 + 2);
  *(_WORD *)(a4 + 4424) = *((_WORD *)a2 + 116);
  *(_DWORD *)(a4 + 4192) = 0;
  *(unsigned char *)(a4 + 7225) = 0;
  *(_DWORD *)(a4 + 4184) = 71;
  *(long double *)(a4 + 8008) = v84;
  *(double *)(a4 + 8016) = v255;
  int v88 = *(_DWORD *)(a4 + 648);
  if (v88 >= 1)
  {
    uint64_t v89 = (long double *)(a4 + 8032);
    uint64_t v90 = (double *)(a4 + 1040);
    uint64_t v91 = *(unsigned int *)(a4 + 648);
    do
    {
      double v92 = *(v90 - 1);
      if (v92 < 0.0) {
        double v93 = 0.0;
      }
      else {
        double v93 = v92 / 10000.0;
      }
      long double v94 = pow(v93, 0.159301758);
      *(v89 - 1) = pow((v94 * 18.8515625 + 0.8359375) / (v94 * 18.6875 + 1.0), 78.84375);
      double v95 = *v90;
      v90 += 12;
      double v96 = v95 / 10000.0;
      if (v95 < 0.0) {
        double v97 = 0.0;
      }
      else {
        double v97 = v96;
      }
      long double v98 = pow(v97, 0.159301758);
      *uint64_t v89 = pow((v98 * 18.8515625 + 0.8359375) / (v98 * 18.6875 + 1.0), 78.84375);
      v89 += 2;
      --v91;
    }
    while (v91);
  }
  *(void *)(a4 + 8096) = 0x3FD5555555555555;
  *(void *)(a4 + 8680) = a4;
  *(void *)(a4 + 8368) = a4 + 112;
  *(_DWORD *)(a4 + 8672) = 0;
  *(_DWORD *)(a4 + 8360) = 0;
  int v99 = *(_DWORD *)(a4 + 1136);
  if ((v99 & 0x20) != 0)
  {
    int v102 = 84;
    *(_DWORD *)(a4 + 4184) = 84;
    *(void *)(v7 + 3056) = *(void *)v7;
    char v101 = 1;
    *(unsigned char *)(a4 + 7225) = 1;
    int v100 = 32;
    *(_DWORD *)(a4 + 4192) = 32;
  }
  else
  {
    int v100 = 0;
    char v101 = 0;
    int v102 = 71;
  }
  if ((v99 & 0x200) != 0)
  {
    uint64_t v103 = *(unsigned __int8 *)(a4 + 1378);
    double v104 = &V8PrimaryTblMR81[4 * v103];
    if (v103 >= 0x13) {
      double v104 = (long long *)(a4 + 1384);
    }
    long long v105 = v104[2];
    long long v106 = v104[3];
    long long v107 = v104[1];
    *(_OWORD *)(a4 + 7944) = *v104;
    *(_OWORD *)(a4 + 7992) = v106;
    *(_OWORD *)(a4 + 7976) = v105;
    *(_OWORD *)(a4 + 7960) = v107;
  }
  else
  {
    *(_OWORD *)(a4 + 7944) = V8PrimaryTblMR81[0];
    *(_OWORD *)(a4 + 7960) = unk_2222D3B40;
    *(_OWORD *)(a4 + 7976) = xmmword_2222D3B50;
    *(_OWORD *)(a4 + 7992) = unk_2222D3B60;
    LODWORD(v103) = 255;
  }
  *(_DWORD *)(a4 + 7936) = v103;
  double v108 = *(double *)(a4 + 7944) - *(double *)(a4 + 7992);
  double v109 = *(double *)(a4 + 7952) - *(double *)(a4 + 8000);
  double v110 = v109 * v109 + v108 * v108;
  double v111 = *(double *)(a4 + 4440) - *(double *)(a4 + 4488);
  int v112 = 22;
  if (v110 < (*(double *)(a4 + 4448) - *(double *)(a4 + 4496)) * (*(double *)(a4 + 4448) - *(double *)(a4 + 4496))
            + v111 * v111)
  {
    *(unsigned char *)(v7 + 3064) = v103;
    long long v113 = *(_OWORD *)(a4 + 7960);
    *(_OWORD *)(a4 + 4440) = *(_OWORD *)(a4 + 7944);
    *(_OWORD *)(a4 + 4456) = v113;
    long long v114 = *(_OWORD *)(a4 + 7992);
    *(_OWORD *)(a4 + 4472) = *(_OWORD *)(a4 + 7976);
    *(_OWORD *)(a4 + 4488) = v114;
    if (v103 <= 0x12) {
      int v112 = 6;
    }
    else {
      int v112 = 22;
    }
  }
  int v115 = v112 + v102;
  *(_DWORD *)(a4 + 4184) = v115;
  char v116 = v101 + 1;
  *(unsigned char *)(a4 + 7225) = v101 + 1;
  int v117 = v100 | 0x200;
  *(_DWORD *)(a4 + 4192) = v100 | 0x200;
  if ((v99 & 0x800) != 0)
  {
    v115 += 9;
    *(_DWORD *)(a4 + 4184) = v115;
    *(unsigned char *)(v7 + 3134) = *(unsigned char *)(a4 + 1448);
    *(_WORD *)(v7 + 3135) = *(_WORD *)(a4 + 1449);
    char v116 = v101 | 2;
    *(unsigned char *)(a4 + 7225) = v101 | 2;
    int v117 = v100 | 0xA00;
    *(_DWORD *)(a4 + 4192) = v100 | 0xA00;
  }
  if ((v99 & 0x40000000) != 0)
  {
    v115 += 7;
    *(_DWORD *)(a4 + 4184) = v115;
    *(_WORD *)(v7 + 3137) = *(_WORD *)(a4 + 1451);
    *(unsigned char *)(a4 + 7225) = ++v116;
    v117 |= 0x40000000u;
    *(_DWORD *)(a4 + 4192) = v117;
  }
  if (v99 < 0)
  {
    *(_DWORD *)(a4 + 4184) = v115 + 11;
    *(_DWORD *)(v7 + 3139) = *(_DWORD *)(v7 + 83);
    *(_WORD *)(v7 + 3143) = *(_WORD *)(a4 + 1457);
    *(unsigned char *)(a4 + 7225) = v116 + 1;
    *(_DWORD *)(a4 + 4192) = v117 | 0x80000000;
  }
  memset(v272, 0, sizeof(v272));
  uint64_t v271 = 0;
  memset(v270, 0, sizeof(v270));
  uint64_t v265 = 0;
  long long v263 = 0u;
  memset(v264, 0, sizeof(v264));
  long long v262 = 0u;
  uint64_t v261 = 0;
  memset(v260, 0, sizeof(v260));
  double v259 = 0.0;
  long long v258 = 0u;
  memset(v257, 0, sizeof(v257));
  double v118 = *(double *)(a4 + 1464);
  double v119 = *(double *)(a4 + 1480);
  double v266 = v118;
  double v267 = v119;
  double v120 = *(double *)(a4 + 1472);
  double v268 = v120;
  if ((v99 & 8) != 0)
  {
    double v119 = v119 + *(double *)(a4 + 1504);
    double v266 = v118 + *(double *)(a4 + 1488);
    double v267 = v119;
    double v268 = v120 + *(double *)(a4 + 1496);
  }
  double v269 = v119 + 0.000244140625;
  *(void *)(a4 + 8344) = 0xBFF0000000000000;
  double v121 = -1.0;
  if ((v99 & 0x10) != 0)
  {
    double v121 = *(double *)(a4 + 4152);
    *(double *)(a4 + 8352) = *(double *)(a4 + 1360) / v255 * *(double *)(a4 + 4160)
                           + *(double *)(a4 + 4160) * 1.41 * (1.0 - *(double *)(a4 + 1360) / v255);
  }
  if (v88 < 1)
  {
    LODWORD(v125) = v88;
  }
  else
  {
    uint64_t v122 = 0;
    int32x2_t v123 = (double *)v270;
    float v124 = (double *)v272;
    do
    {
      hdrpMrToneCurve(0, &v266, 4, ++v122, v124, v123, 0, a4);
      uint64_t v125 = *(int *)(a4 + 648);
      v123 += 3;
      v124 += 7;
    }
    while (v122 < v125);
  }
  uint64_t v126 = 3 * (int)v125;
  uint64_t v127 = v126 + 4;
  if (v121 >= 0.0)
  {
    *(&v266 + v127) = v121;
    hdrpMrToneCurve(0, &v266, v126 + 5, 0, (double *)&v262, 0, 0, a4);
    double v128 = *((double *)v264 + 3 * *(int *)(a4 + 648));
    *(double *)(a4 + 8344) = v128;
  }
  else
  {
    hdrpMrToneCurve(0, &v266, v127, 0, (double *)&v262, 0, 0, a4);
    double v128 = *(double *)(a4 + 8344);
  }
  long long v129 = v262;
  uint64_t v130 = v263;
  int v131 = *(_DWORD *)(a4 + 4184);
  double v132 = 1.0;
  if (*(double *)&v262 <= 1.0) {
    double v133 = *(double *)&v262;
  }
  else {
    double v133 = 1.0;
  }
  if (*(double *)&v262 < 0.0) {
    double v133 = 0.0;
  }
  if (*((double *)&v262 + 1) <= 1.0) {
    double v134 = *((double *)&v262 + 1);
  }
  else {
    double v134 = 1.0;
  }
  if (*((double *)&v262 + 1) < 0.0) {
    double v134 = 0.0;
  }
  if (*(double *)&v263 <= 1.0) {
    double v132 = *(double *)&v263;
  }
  if (*(double *)&v263 < 0.0) {
    double v132 = 0.0;
  }
  double v135 = fmin(v133, 0.002930403);
  *(double *)(a4 + 4520) = v135;
  double v136 = fmax(v134, 0.2);
  double v137 = fmax(v132, 0.508078422);
  *(double *)(a4 + 4528) = v137;
  if (v136 > v137 + -0.000244200244) {
    double v136 = v137 + -0.000244200244;
  }
  *(double *)(a4 + 4536) = v136;
  char v138 = *(unsigned char *)(a4 + 7225);
  int v139 = *(_DWORD *)(a4 + 4192);
  uint64_t result = (v131 + 22);
  *(_DWORD *)(a4 + 4184) = result;
  *(double *)(a4 + 4544) = v133 - v135;
  *(double *)(a4 + 4560) = v134 - v136;
  *(double *)(a4 + 4552) = v132 - v137;
  *(unsigned char *)(a4 + 7225) = v138 + 2;
  int v140 = v139 | 0xA;
  *(_DWORD *)(a4 + 4192) = v139 | 0xA;
  if (v128 >= 0.0)
  {
    uint64_t result = (v131 + 31);
    *(_DWORD *)(a4 + 4184) = result;
    *(double *)(a4 + 7208) = v128;
    *(void *)(a4 + 7216) = *(void *)(a4 + 8352);
    *(unsigned char *)(a4 + 7224) = 1;
    *(unsigned char *)(a4 + 7225) = v138 + 3;
    int v140 = v139 | 0x1A;
    *(_DWORD *)(a4 + 4192) = v139 | 0x1A;
  }
  *(_OWORD *)((char *)&v260[1] + 8) = v129;
  *((void *)&v260[2] + 1) = v130;
  uint64_t v261 = *((void *)&v263 + 1);
  if (*v8 >= 1)
  {
    uint64_t v247 = a4 + 7936;
    float64x2_t v141 = v264;
    uint64_t v254 = a4 + 936;
    uint64_t v242 = a4 + 5176;
    double v142 = 1.0;
    uint64_t v241 = a4 + 9176;
    uint64_t v243 = a4 + 9196;
    float64x2_t v143 = v272;
    uint64_t v144 = 1;
    while (1)
    {
      v260[0] = *v141;
      *(void *)&v260[1] = *((void *)v141 + 2);
      hdrpMrToneCurve(1, (double *)v260, 7, v144, (double *)v257, 0, 0, a4);
      int v145 = *(_DWORD *)(a4 + 9168);
      int v146 = *(_DWORD *)(v254 + 96 * v144 + 88);
      if (v145 >= 4 && (*(_DWORD *)(v254 + 96 * v144 + 88) & 0x10) != 0) {
        break;
      }
      if ((v146 & 8) != 0)
      {
        int v149 = 0;
        uint64_t v156 = a4 + 16 * v144;
        float v251 = (void *)(v156 + 8008);
        float v152 = (double *)(v156 + 8016);
        double v153 = *(double *)(v156 + 8016) - *(double *)(v156 + 8008);
      }
      else
      {
        uint64_t v148 = a4 + 16 * v144;
        float v251 = (void *)(v148 + 8008);
        double v151 = *(double *)(v148 + 8008);
        float v152 = (double *)(v148 + 8016);
        double v153 = *(double *)(v148 + 8016) - v151;
        if ((v146 & 4) == 0) {
          goto LABEL_169;
        }
        int v149 = 0;
      }
LABEL_173:
      float v256 = (_OWORD *)((char *)v141 + 24);
      float v157 = (double *)&v272[-3] + 7 * v144 - 1;
      double v158 = *(double *)v257;
      for (uint64_t i = 8; i != 56; i += 8)
      {
        if (v158 > *(double *)((char *)v257 + i)) {
          double v158 = *(double *)((char *)v257 + i);
        }
      }
      uint64_t v160 = 0;
      double v161 = 0.000244140625 - v158;
      if (v161 < 0.0) {
        double v162 = 0.0;
      }
      else {
        double v162 = v161;
      }
      do
      {
        v277[v160] = v162 + *(double *)((char *)v257 + v160 * 8);
        *(long double *)((char *)&v279 + v160 * 8) = fmax(*(double *)((char *)v143 + v160 * 8), 0.000244140625);
        ++v160;
      }
      while (v160 != 7);
      double v163 = v277[0];
      if (v278 - v277[0] == 0.0)
      {
        double v275 = 1.0;
        uint64_t v273 = 0x3FF0000000000000;
        double v164 = 1.0;
        double v165 = 1.0;
        double v166 = 1.0;
        double v167 = *v157;
        goto LABEL_207;
      }
      double v245 = v277[0];
      double v246 = v153;
      int v248 = v146;
      float v252 = v152;
      double v244 = v278 - v277[0];
      double v168 = (v278 - v277[1]) / (v278 - v277[0]);
      double v169 = v281;
      double v170 = log(v281);
      double v171 = v279;
      long double v172 = v168 * v171 * log(v279) + v169 * (1.0 - v168) * v170;
      double v142 = 1.0;
      double v173 = (v280 - (1.0 - v168) * v169 - v168 * v171) / fmax(v172 - v280 * log(v280), 0.000244140625) + 1.0;
      if (!v149)
      {
        double v166 = 2.0;
        double v174 = v244;
        double v163 = v245;
        if (v173 < 0.0) {
          goto LABEL_195;
        }
        if (v173 == 0.0)
        {
          double v166 = 0.666666667;
          goto LABEL_195;
        }
        double v175 = fmin(v173, 2.0);
        double v176 = 0.666666667;
        goto LABEL_192;
      }
      if (v173 < 0.0)
      {
        double v166 = 4095.0;
        double v174 = v244;
        double v163 = v245;
        goto LABEL_195;
      }
      double v166 = 0.5;
      double v174 = v244;
      double v163 = v245;
      if (v173 != 0.0)
      {
        double v175 = fmin(v173, 4095.0);
        double v176 = 0.5;
LABEL_192:
        if (v173 < v176) {
          double v166 = v176;
        }
        else {
          double v166 = v175;
        }
      }
LABEL_195:
      double v164 = 1.0 / v166;
      double v275 = 1.0 / v166;
      long double v177 = *v157;
      if (*v157 <= 0.0)
      {
        double v167 = 0.0;
        if (*v157 < 0.0) {
          double v167 = -pow(-v177, v166);
        }
      }
      else
      {
        double v167 = pow(v177, v166);
      }
      double v178 = (pow(*((long double *)&v272[-2] + 7 * v144 - 1), v166) - v167) / v174;
      if (v149)
      {
        double v165 = 0.0;
        float v152 = v252;
        int v146 = v248;
        double v153 = v246;
        if (v178 >= 0.0)
        {
          double v165 = 2.0;
          goto LABEL_204;
        }
      }
      else
      {
        double v165 = 0.5;
        float v152 = v252;
        int v146 = v248;
        double v153 = v246;
        if (v178 >= 0.5)
        {
          double v165 = 1.5;
LABEL_204:
          if (v178 <= v165) {
            double v165 = v178;
          }
        }
      }
      uint64_t v273 = *(void *)&v165;
LABEL_207:
      double v179 = v167 - v165 * v163 + v165 * v162;
      if (!v149)
      {
        double v190 = -0.5;
        double v181 = 0.5;
        if (v179 >= -0.5)
        {
          double v190 = 0.5;
          if (v179 <= 0.5) {
            double v190 = v179;
          }
        }
        double v274 = v190;
        double v182 = 0.0;
        float v183 = (_DWORD *)(a4 + 4576);
        goto LABEL_228;
      }
      double v180 = -1.0;
      double v181 = 0.5;
      if (v179 >= -1.0)
      {
        double v180 = 1.0;
        if (v179 <= 1.0) {
          double v180 = v179;
        }
      }
      double v274 = v180;
      double v276 = 0.0;
      double v182 = 0.0;
      float v183 = (_DWORD *)(a4 + 4576);
      if (v165 > 0.0 && v164 > 0.0)
      {
        double v184 = v180 + *(double *)&v258 * v165;
        double v185 = *((double *)v272 + 7 * v144 - 1);
        double v186 = *((double *)&v272[-1] + 7 * v144 - 1);
        int v249 = v146;
        double v187 = v153;
        float v188 = v152;
        if (v184 <= 0.0)
        {
          double v189 = 0.0;
          if (v184 < 0.0) {
            double v189 = -pow(-v184, v164);
          }
        }
        else
        {
          double v189 = pow(v184, v164);
        }
        double v191 = v185 - v186 + v189;
        if (v191 <= 0.0)
        {
          double v192 = 0.0;
          double v181 = 0.5;
          if (v191 < 0.0) {
            double v192 = -pow(-v191, v166);
          }
        }
        else
        {
          double v192 = pow(v191, v166);
          double v181 = 0.5;
        }
        double v193 = v187 * ((v192 - v180) / v165 - v259) * 4096.0;
        double v182 = -0.5;
        float v152 = v188;
        int v146 = v249;
        if (v193 >= -0.5)
        {
          double v182 = 0.5;
          if (v193 <= 0.5) {
            double v182 = v187 * ((v192 - v180) / v165 - v259) * 4096.0;
          }
        }
LABEL_228:
        double v276 = v182;
      }
      if (v145 >= 4) {
        char v194 = 4;
      }
      else {
        char v194 = 2;
      }
      if (v145 < 4) {
        char v195 = 1;
      }
      else {
        char v195 = -1;
      }
      double v196 = *(double *)(a4 + 8016) - *v152;
      if (v196 <= 0.0)
      {
        float64x2_t v141 = v256;
        if (!*(_DWORD *)(v254 + 96 * v144 + 92))
        {
          double v198 = 0.0;
          goto LABEL_255;
        }
        double v196 = -v196;
      }
      else
      {
        float64x2_t v141 = v256;
      }
      int v197 = 3;
      while (((1 << v194) & *(_DWORD *)(a4 + 1024)) == 0)
      {
        v194 += v195;
        if (!--v197)
        {
          double v198 = 1.0;
          goto LABEL_255;
        }
      }
      double v198 = 1.0;
      if (((1 << v194) & v146) == 0)
      {
        if (v196 > 0.02) {
          double v199 = v142;
        }
        else {
          double v199 = v196 / 0.02;
        }
        if (v196 >= 0.0) {
          double v200 = v199;
        }
        else {
          double v200 = 0.0;
        }
        if (v200 <= v181) {
          double v201 = v200 * (v200 * (v200 * 4.0));
        }
        else {
          double v201 = v142 + (v200 + -1.0) * ((v200 + -1.0) * 4.0) * (v200 + -1.0);
        }
        double v198 = v201 + 0.0;
      }
LABEL_255:
      if (v145 <= 3 && (*(unsigned char *)(a4 + 1024) & 4) != 0 && (v146 & 4) == 0) {
        *(double *)(a4 + 8848) = *(double *)(a4 + 8848) * v181;
      }
      if (*(int *)(a4 + 4 * v144 + 9152) <= 3)
      {
        *(_DWORD *)(a4 + 4184) += 2 * *(_DWORD *)(a4 + 4572) + 5;
        if ((*(unsigned char *)(a4 + 4192) & 4) != 0)
        {
          int v202 = *v183;
        }
        else
        {
          int v202 = 0;
          *float v183 = 0;
        }
        float v205 = (double *)(a4 + 56 * v202 + 4584);
        *float v205 = *v152;
        SetSopcsm((double *)&v273, v144, v247, v205, v198, v198);
        int v206 = 4;
        char v207 = 1;
        float v208 = v183;
        goto LABEL_296;
      }
      float v253 = v152;
      if (*(unsigned char *)(a4 + 4193))
      {
        int v203 = *(_DWORD *)(a4 + 5096);
        int v204 = (int)*(double *)(a4 + 168 * v203 + 4936) + 1;
      }
      else
      {
        int v203 = 0;
        *(_DWORD *)(a4 + 5096) = 0;
        *(_DWORD *)(a4 + 6624) = 0;
        int v204 = 201;
      }
      uint64_t v209 = a4 + 168 * v203;
      char v250 = v204;
      *(double *)(v209 + 5104) = (double)v204;
      SetSopcsm((double *)&v273, v144, v247, (double *)(v209 + 5104), v198 * v181, v198);
      *(double *)(v209 + 5160) = v182 * v198;
      *(void *)(v209 + 5168) = 0;
      if (*(int *)(a4 + 9152) > 3)
      {
        if (*(_DWORD *)(a4 + 4 * v144 + 8804)) {
          uint64_t v210 = *(void *)(a4 + 8368);
        }
        else {
          uint64_t v210 = a4 + 168 * v144 + 8816;
        }
        uint64_t v217 = a4 + 8816;
        if (*(_DWORD *)(a4 + 8804)) {
          uint64_t v217 = *(void *)(a4 + 8368);
        }
        uint64_t v218 = 0;
        *(_DWORD *)(a4 + 4 * *(int *)(a4 + 5096) + 9176) = 29;
        char v219 = 1;
        do
        {
          double v220 = v198 * (*(double *)(v210 + 120 + v218) - *(double *)(v217 + 120 + v218));
          *(double *)(a4 + 5224 + 168 * v203 + v218) = v220;
          if (v220 >= 0.0) {
            double v221 = v181 + v220 * 256.0;
          }
          else {
            double v221 = v220 * 256.0 + -0.5;
          }
          v219 &= (int)v221 == 0;
          v218 += 8;
        }
        while (v218 != 48);
        uint64_t v222 = 0;
        if ((v219 & 1) == 0)
        {
          uint64_t v230 = v217 + 72;
          uint64_t v231 = v210 + 72;
          float v212 = v251;
          float v213 = v253;
          char v214 = v250;
          do
          {
            *(double *)(v242 + 168 * v203 + v222) = v198 * (*(double *)(v231 + v222) - *(double *)(v230 + v222));
            v222 += 8;
          }
          while (v222 != 48);
          goto LABEL_295;
        }
        uint64_t v223 = a4 + 4 * *(int *)(a4 + 5096);
        *(_DWORD *)(v223 + 9176) -= 6;
        uint64_t v224 = v217 + 72;
        uint64_t v225 = v210 + 72;
        LOBYTE(v210) = 1;
        float v213 = v253;
        do
        {
          double v226 = v198 * (*(double *)(v225 + v222) - *(double *)(v224 + v222));
          *(double *)(v242 + 168 * v203 + v222) = v226;
          if (v226 >= 0.0) {
            double v227 = v181 + v226 * 128.0;
          }
          else {
            double v227 = v226 * 128.0 + -0.5;
          }
          LODWORD(v210) = v210 & ((int)v227 == 0);
          v222 += 8;
        }
        while (v222 != 48);
        float v212 = v251;
        char v214 = v250;
        if (!v210) {
          goto LABEL_295;
        }
        *(_DWORD *)(v241 + 4 * *(int *)(a4 + 5096)) -= 6;
        *(_DWORD *)(v241 + 4 * *(int *)(a4 + 5096)) -= 2;
        double v228 = *(double *)(v209 + 5160);
        double v229 = v228 >= 0.0 ? v181 + v228 * 4096.0 : v228 * 4096.0 + -0.5;
        if ((int)v229) {
          goto LABEL_295;
        }
        int v215 = -2;
        goto LABEL_272;
      }
      float v211 = (_OWORD *)(a4 + 168 * v203 + 5176);
      v211[4] = 0u;
      v211[5] = 0u;
      v211[2] = 0u;
      v211[3] = 0u;
      *float v211 = 0u;
      v211[1] = 0u;
      *(_DWORD *)(a4 + 4 * *(int *)(a4 + 5096) + 9176) = 13;
      float v212 = v251;
      float v213 = v253;
      char v214 = v250;
      if (v182 * v198 != 0.0)
      {
        int v215 = 2;
LABEL_272:
        uint64_t v216 = a4 + 4 * *(int *)(a4 + 5096);
        *(_DWORD *)(v216 + 9176) += v215;
      }
LABEL_295:
      *(_DWORD *)(a4 + 4184) += *(_DWORD *)(a4 + 4 * *(int *)(a4 + 5096) + 9176) + 5;
      *(_DWORD *)(v243 + 4 * *(int *)(a4 + 6624)) = 22;
      uint64_t v232 = *(int *)(a4 + 6624);
      *(_DWORD *)(a4 + 4184) += *(_DWORD *)(v243 + 4 * v232) + 5;
      uint64_t v233 = a4 + 4184 + 96 * (int)v232;
      *(unsigned char *)(v233 + 2448) = v214;
      *(void *)(v233 + 2464) = *v212;
      *(double *)(v233 + 2456) = *v213;
      *(unsigned char *)(v233 + 2472) = -1;
      float64x2_t v141 = v256;
      uint64_t v234 = v254 + 96 * v144;
      long long v235 = *(_OWORD *)(v234 + 56);
      long long v236 = *(_OWORD *)(v234 + 72);
      *(_OWORD *)(v233 + 2480) = *(_OWORD *)(v234 + 24);
      *(_OWORD *)(v233 + 2496) = *(_OWORD *)(v234 + 40);
      *(_OWORD *)(v233 + 2528) = v236;
      *(_OWORD *)(v233 + 2512) = v235;
      ++*(_DWORD *)(a4 + 5096);
      int v206 = 1280;
      char v207 = 2;
      float v208 = (_DWORD *)(a4 + 6624);
LABEL_296:
      ++*v208;
      *(unsigned char *)(a4 + 7225) += v207;
      int v140 = *(_DWORD *)(a4 + 4192) | v206;
      *(_DWORD *)(a4 + 4192) = v140;
      float64x2_t v143 = (_OWORD *)((char *)v143 + 56);
      if (v144++ >= *(int *)(a4 + 648))
      {
        uint64_t result = *(unsigned int *)(a4 + 4184);
        goto LABEL_298;
      }
    }
    uint64_t v150 = a4 + 16 * v144;
    float v251 = (void *)(v150 + 8008);
    double v151 = *(double *)(v150 + 8008);
    float v152 = (double *)(v150 + 8016);
    double v153 = *(double *)(v150 + 8016) - v151;
LABEL_169:
    uint64_t v154 = 0;
    double v155 = v142 / v153;
    do
    {
      *(double *)((char *)v143 + v154) = v155 * (*(double *)((char *)v143 + v154) - v151);
      *(double *)((char *)v257 + v154) = v155 * (*(double *)((char *)v257 + v154) - v151);
      v154 += 8;
    }
    while (v154 != 56);
    int v149 = 1;
    goto LABEL_173;
  }
LABEL_298:
  *(_DWORD *)(a4 + 4192) = v140 | 1;
  *(_DWORD *)(a4 + 4176) = 1;
  *(_DWORD *)(a4 + 7232) = 0;
  return result;
}

void GetYuv2RgbM33(unsigned int a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 > 5)
  {
    double v5 = 1.772;
    double v6 = -0.714136286;
    double v4 = -0.344136286;
    double v3 = 1.402;
  }
  else
  {
    GetRgb2XyzM33(a1, (uint64_t)&v7);
    double v3 = 1.0 - v8 + 1.0 - v8;
    double v4 = v10 * -2.0 * (1.0 - v10) / v9;
    double v5 = 1.0 - v10 + 1.0 - v10;
    double v6 = v8 * -2.0 * (1.0 - v8) / v9;
  }
  *(_OWORD *)a2 = xmmword_2222D4BA0;
  *(double *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = 0x3FF0000000000000;
  *(double *)(a2 + 32) = v4;
  *(double *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = 0x3FF0000000000000;
  *(double *)(a2 + 56) = v5;
  *(void *)(a2 + 64) = 0;
}

void GetRgb2XyzM33(int a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      double v3 = 0.68;
      double v4 = 0.32;
      double v5 = 0.265;
      double v6 = 0.69;
      goto LABEL_12;
    case 1:
      double v3 = 0.68;
      double v4 = 0.32;
      double v5 = 0.265;
      double v6 = 0.69;
      double v8 = 0.15;
      double v9 = 0.06;
      double v10 = 0.314;
      double v11 = 0.351;
      goto LABEL_16;
    case 2:
      double v3 = 0.64;
      double v4 = 0.33;
      double v5 = 0.3;
      double v6 = 0.6;
LABEL_12:
      double v8 = 0.15;
      double v9 = 0.06;
      goto LABEL_14;
    case 3:
      double v3 = 0.708;
      double v4 = 0.292;
      double v5 = 0.17;
      double v6 = 0.797;
      double v8 = 0.131;
      double v9 = 0.046;
LABEL_14:
      double v10 = 0.3127;
      double v11 = 0.329;
      goto LABEL_16;
    case 4:
      double v3 = 0.7347;
      double v4 = 0.2653;
      double v8 = 0.0001;
      double v9 = -0.077;
      double v10 = 0.32168;
      double v11 = 0.33767;
      double v5 = 0.0;
      double v6 = 1.0;
LABEL_16:
      GetRgb2XyzM33ByPrimsMR81((double *)a2, v3, v4, v5, v6, v8, v9, v10, v11);
      return;
    case 5:
      *(_OWORD *)a2 = xmmword_2222D4BF0;
      *(_OWORD *)(a2 + 16) = xmmword_2222D4C00;
      *(_OWORD *)(a2 + 32) = xmmword_2222D4C10;
      *(_OWORD *)(a2 + 48) = xmmword_2222D4C20;
      uint64_t v12 = 0x3FF273E41A409C3BLL;
      goto LABEL_22;
    case 6:
      *(_OWORD *)a2 = xmmword_2222D4BB0;
      *(_OWORD *)(a2 + 16) = xmmword_2222D4BC0;
      *(_OWORD *)(a2 + 32) = xmmword_2222D4BD0;
      *(_OWORD *)(a2 + 48) = xmmword_2222D4BE0;
      uint64_t v12 = 0x3FF1E126D5339924;
      goto LABEL_22;
    case 7:
      uint64_t v12 = 0x3FF0000000000000;
      *(void *)a2 = 0x3FF0000000000000;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0x3FF0000000000000;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
LABEL_22:
      *(void *)(a2 + 64) = v12;
      break;
    default:
      if (enableLogInstance)
      {
        if (logInstanceID) {
          uint64_t v7 = logInstanceID;
        }
        else {
          uint64_t v7 = prevLogInstanceID;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 134218240;
          uint64_t v14 = WORD1(v7);
          __int16 v15 = 1024;
          int v16 = a1;
          _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] #%04llx MR81: Error: GetRgb2XyzM33, unsupported rgbDef:%d", (uint8_t *)&v13, 0x12u);
        }
        prevLogInstanceID = v7;
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 67109120;
        LODWORD(v14) = a1;
        _os_log_impl(&dword_22224D000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, " [1.419.54] MR81: Error: GetRgb2XyzM33, unsupported rgbDef:%d", (uint8_t *)&v13, 8u);
      }
      break;
  }
}

double SetSopcsm(double *a1, int a2, uint64_t a3, double *a4, double a5, double a6)
{
  a4[1] = (*a1 + -1.0) * a5 + 1.0;
  a4[2] = a1[1] * a5;
  a4[3] = (a1[2] + -1.0) * a5 + 1.0;
  if (*(_DWORD *)(a3 + 4 * a2 + 868)) {
    double v6 = *(double **)(a3 + 744);
  }
  else {
    double v6 = (double *)(a3 + 168 * a2 + 880);
  }
  if (*(_DWORD *)(a3 + 868)) {
    uint64_t v7 = *(double **)(a3 + 744);
  }
  else {
    uint64_t v7 = (double *)(a3 + 880);
  }
  a4[4] = (v6[4] - v7[4]) * a6;
  a4[5] = (v6[5] - v7[5]) * a6 + 1.0;
  double result = (v6[6] - v7[6]) * a6 + 1.0;
  a4[6] = result;
  return result;
}

double updateComposerData(uint64_t a1)
{
  bzero((void *)(a1 + 56), 0x65510uLL);
  *(_OWORD *)a1 = xmmword_2222D4CE0;
  *(_OWORD *)(a1 + 16) = xmmword_2222D4CF0;
  *(_OWORD *)(a1 + 32) = xmmword_2222D4D00;
  *(void *)&double result = 0x200000002;
  *(void *)(a1 + 48) = 0x200000002;
  *(_DWORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 64) = 1023;
  *(_DWORD *)(a1 + 136) = 1023;
  *(_DWORD *)(a1 + 208) = 1023;
  *(_DWORD *)(a1 + 384) = 1;
  *(_DWORD *)(a1 + 420) = 1;
  *(_DWORD *)(a1 + 456) = 1;
  *(_DWORD *)(a1 + 820) = 1;
  *(_DWORD *)(a1 + 928) = 1;
  *(void *)(a1 + 1472) = 0x800000;
  *(void *)(a1 + 1904) = 0x800000;
  *(void *)(a1 + 2336) = 0x800000;
  *(_DWORD *)(a1 + 2764) = 1065353216;
  *(_DWORD *)(a1 + 2980) = 1065353216;
  *(_DWORD *)(a1 + 3196) = 1065353216;
  *(_DWORD *)(a1 + 1036) = 1;
  *(_DWORD *)(a1 + 20152) = 1;
  return result;
}

uint64_t invalidateDMDataL2L4L5L6L8L10(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = result + 164;
  do
  {
    if (*(_WORD *)(v2 + v1))
    {
      *(_WORD *)(v2 + v1) = 0;
      --*(_DWORD *)(result + 144);
    }
    v1 += 16;
  }
  while (v1 != 128);
  if (*(_WORD *)(result + 292))
  {
    *(_WORD *)(result + 292) = 0;
    --*(_DWORD *)(result + 144);
  }
  uint64_t v3 = 0;
  uint64_t v4 = result + 326;
  do
  {
    if (*(_WORD *)(v4 + v3))
    {
      *(_WORD *)(v4 + v3) = 0;
      --*(_DWORD *)(result + 144);
    }
    v3 += 34;
  }
  while (v3 != 170);
  uint64_t v5 = 0;
  uint64_t v6 = result + 518;
  do
  {
    if (*(_WORD *)(v6 + v5))
    {
      *(_WORD *)(v6 + v5) = 0;
      --*(_DWORD *)(result + 144);
    }
    v5 += 28;
  }
  while (v5 != 112);
  if (*(_WORD *)(result + 300))
  {
    *(_WORD *)(result + 300) = 0;
    --*(_DWORD *)(result + 144);
  }
  if (*(_WORD *)(result + 306))
  {
    *(_WORD *)(result + 306) = 0;
    --*(_DWORD *)(result + 144);
  }
  if (*(_WORD *)(result + 316))
  {
    *(_WORD *)(result + 316) = 0;
    --*(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 148) = 0;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

uint64_t copyL2L8L10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int *a6, int *a7)
{
  if (*(_DWORD *)(result + 280))
  {
    uint64_t v7 = a3 + 34 * *a6;
    *(void *)(v7 + 18) = 0x8080808008000800;
    *(_WORD *)(v7 + 26) = -32640;
    *(_DWORD *)(v7 + 28) = -2139062144;
    *(_WORD *)(v7 + 32) = -32640;
    *(unsigned char *)(v7 + 4) = *(unsigned char *)(result + 284);
    *(_WORD *)(v7 + 6) = *(_WORD *)(result + 286);
    *(_WORD *)(v7 + 8) = *(_WORD *)(result + 288);
    *(_WORD *)(v7 + 10) = *(_WORD *)(result + 290);
    *(_WORD *)(v7 + 12) = *(_WORD *)(result + 292);
    *(_WORD *)(v7 + 14) = *(_WORD *)(result + 294);
    *(_WORD *)(v7 + 16) = *(_WORD *)(result + 296);
    *(_WORD *)(v7 + 2) = 10;
    int v8 = *(unsigned __int16 *)(result + 298);
    if (v8 != 2048)
    {
      *(_WORD *)(v7 + 18) = v8;
      *(_WORD *)(v7 + 2) = 12;
    }
    *(_WORD *)uint64_t v7 = 1;
    ++*a6;
  }
  if (*(_DWORD *)(result + 544))
  {
    int v9 = *a7;
    uint64_t v10 = a4 + 28 * *a7;
    *(unsigned char *)(v10 + 4) = *(unsigned char *)(result + 548);
    *(_WORD *)(v10 + 6) = *(_WORD *)(result + 550);
    *(_WORD *)(v10 + 8) = *(_WORD *)(result + 552);
    unsigned int v11 = *(unsigned __int8 *)(result + 554);
    *(unsigned char *)(v10 + 10) = v11;
    *(_WORD *)(v10 + 12) = *(_WORD *)(result + 556);
    *(_WORD *)(v10 + 14) = *(_WORD *)(result + 558);
    *(_WORD *)(v10 + 16) = *(_WORD *)(result + 560);
    *(_WORD *)(v10 + 18) = *(_WORD *)(result + 562);
    *(_WORD *)(v10 + 20) = *(_WORD *)(result + 564);
    *(_WORD *)(v10 + 22) = *(_WORD *)(result + 566);
    *(_WORD *)(v10 + 24) = *(_WORD *)(result + 568);
    *(_WORD *)(v10 + 26) = *(_WORD *)(result + 570);
    if (v11 <= 0x12) {
      __int16 v12 = 5;
    }
    else {
      __int16 v12 = 21;
    }
    *(_WORD *)(v10 + 2) = v12;
    *(_WORD *)uint64_t v10 = 1;
    *a7 = v9 + 1;
  }
  if (*(_DWORD *)(result + 140))
  {
    uint64_t v13 = *a5;
    uint64_t v14 = (_WORD *)(a2 + 16 * v13);
    v14[1] = *(_WORD *)(result + 144);
    v14[2] = *(_WORD *)(result + 146);
    v14[3] = *(_WORD *)(result + 148);
    void v14[4] = *(_WORD *)(result + 150);
    v14[5] = *(_WORD *)(result + 152);
    v14[6] = *(_WORD *)(result + 154);
    v14[7] = *(_WORD *)(result + 156);
    *uint64_t v14 = 1;
    *a5 = v13 + 1;
  }
  return result;
}

void __75__sceneLuxB2DItpMLModel_loadContentsOfURL_configuration_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v3 = [[sceneLuxB2DItpMLModel alloc] initWithMLModel:v4];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void __66__sceneLuxB2DItpMLModel_predictionFromFeatures_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  if (v12)
  {
    id v5 = a3;
    uint64_t v6 = [sceneLuxB2DItpMLModelOutput alloc];
    uint64_t v7 = [v12 featureValueForName:@"anchor_points"];
    int v8 = [v7 multiArrayValue];
    int v9 = [(sceneLuxB2DItpMLModelOutput *)v6 initWithAnchor_points:v8];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    unsigned int v11 = *(void (**)(uint64_t, void, sceneLuxB2DItpMLModelOutput *))(v10 + 16);
    int v9 = a3;
    v11(v10, 0, v9);
  }
}

void __74__sceneLuxB2DItpMLModel_predictionFromFeatures_options_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  if (v12)
  {
    id v5 = a3;
    uint64_t v6 = [sceneLuxB2DItpMLModelOutput alloc];
    uint64_t v7 = [v12 featureValueForName:@"anchor_points"];
    int v8 = [v7 multiArrayValue];
    int v9 = [(sceneLuxB2DItpMLModelOutput *)v6 initWithAnchor_points:v8];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    unsigned int v11 = *(void (**)(uint64_t, void, sceneLuxB2DItpMLModelOutput *))(v10 + 16);
    int v9 = a3;
    v11(v10, 0, v9);
  }
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x270EE4A18](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x270EE4CE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x270EE51C8](str);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x270EEA200](pixelBuffer);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x270EEA278](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA288](allocator, pixelBufferPool, pixelBufferOut);
}

uint64_t IOMobileFramebufferSwapSetICCCurve()
{
  return MEMORY[0x270F3D428]();
}

uint64_t IOMobileFramebufferSwapSetICCMatrix()
{
  return MEMORY[0x270F3D430]();
}

uint64_t IOMobileFramebufferSwapSetToneMapConfig()
{
  return MEMORY[0x270F3D438]();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x270EF4820](*(void *)&object);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF4A50](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x270EF4AB0](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD0](name);
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x270F3D448]();
}

uint64_t IOSurfaceAcceleratorGetServiceObject()
{
  return MEMORY[0x270F3D460]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x270F3D468]();
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x270EF4C20](buffer, key);
}

uint64_t IOSurfaceGetBulkAttachments()
{
  return MEMORY[0x270EF4C90]();
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D48](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D58](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D68](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D80](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D88](buffer);
}

uint64_t IOSurfaceGetProtectionOptions()
{
  return MEMORY[0x270EF4DA0]();
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4DE0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4DF0](buffer, planeIndex);
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x270EF4E40]();
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x270F95FF0]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x270EF5E20]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x270EE56F0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x270EE5700]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  MEMORY[0x270ED7E18]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

char *__cdecl asctime_r(const tm *a1, char *a2)
{
  return (char *)MEMORY[0x270ED8608](a1, a2);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x270ED9A18](*(void *)&a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x270EDA0A0](a1, a2);
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x270EDA0B8](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

uint64_t shape_alloc_bounds()
{
  return MEMORY[0x270EE7400]();
}

uint64_t shape_difference()
{
  return MEMORY[0x270EE7408]();
}

uint64_t shape_enum_alloc()
{
  return MEMORY[0x270EE7410]();
}

uint64_t shape_enum_free()
{
  return MEMORY[0x270EE7418]();
}

uint64_t shape_enum_next()
{
  return MEMORY[0x270EE7420]();
}

uint64_t shape_free()
{
  return MEMORY[0x270EE7428]();
}

uint64_t shape_intersect()
{
  return MEMORY[0x270EE7430]();
}

uint64_t shape_union()
{
  return MEMORY[0x270EE7438]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

void syslog(int a1, const char *a2, ...)
{
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}