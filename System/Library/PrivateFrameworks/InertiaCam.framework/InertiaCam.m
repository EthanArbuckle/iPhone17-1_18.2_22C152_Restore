void sub_1DD4ADDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DD4ADE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD4ADED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD4ADF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float64x2_t *sub_1DD4ADFB8(float64x2_t *result, float64x2_t *a2, int a3, int a4)
{
  float v5 = a2->f64[1];
  if ((float)a3 < (float)a4) {
    float v6 = (float)a4;
  }
  else {
    float v6 = (float)a3;
  }
  float v7 = 1.0 / v6;
  float v8 = v6 + v6;
  float v4 = a2->f64[0];
  float v9 = (float)((float)(v5 * 0.0) + (float)(v7 * v4)) - (float)((float)a3 / v8);
  float v10 = (float)((float)(v7 * v5) + (float)(v9 * 0.0)) - (float)((float)a4 / v8);
  float v11 = (float)((float)(v10 * 0.0) + (float)(v9 * 0.0)) + 1.0;
  float v12 = v10 / v11;
  double v13 = (float)(v9 / v11);
  double v14 = (double)a3;
  double v15 = v12;
  if ((double)a3 < (double)a4) {
    double v14 = (double)a4;
  }
  float64x2_t v16 = vdivq_f64(a2[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0));
  result->f64[0] = v13;
  result->f64[1] = v15;
  result[1] = v16;
  return result;
}

id CreateCorrectionHomographiesWithNewImageCoordinates(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  float v6 = ICCreateCorrectionHomographiesWithNewImageCoordinates(a1, a2, a3, a4, a5, a6);
  return v6;
}

id ICCreateCorrectionHomographiesWithNewImageCoordinates(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  unint64_t v10 = 0x1E4F1C000uLL;
  v88 = v9;
  v89 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:0];
  CFDictionaryRef v11 = [v9 objectForKeyedSubscript:IC_A_INPUT_IMAGE_BOUNDS];
  CFDictionaryRef v87 = v11;
  if (!v11)
  {
    if (a2)
    {
      uint64_t v113 = *MEMORY[0x1E4F28228];
      v114 = @"Missing bounds rect in corrections\n";
      v67 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v114 forKeys:&v113 count:1];
      *a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:2 userInfo:v67];
    }
    goto LABEL_55;
  }
  if (!CGRectMakeWithDictionaryRepresentation(v11, &rect))
  {
    if (a2)
    {
      uint64_t v111 = *MEMORY[0x1E4F28228];
      v112 = @"bad bounds rect in corrections\n";
      v68 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v112 forKeys:&v111 count:1];
      *a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:2 userInfo:v68];
    }
    goto LABEL_55;
  }
  CFDictionaryRef v12 = [v9 objectForKeyedSubscript:IC_A_CROP_RECT];
  if (!CGRectMakeWithDictionaryRepresentation(v12, &v95))
  {
    if (a2)
    {
      uint64_t v109 = *MEMORY[0x1E4F28228];
      v110 = @"bad crop rect in corrections\n";
      v69 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v110 forKeys:&v109 count:1];
      *a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:2 userInfo:v69];
    }
    goto LABEL_54;
  }

  CFDictionaryRef v12 = [v9 objectForKeyedSubscript:IC_A_SOURCE_SIZE];
  if (!CGSizeMakeWithDictionaryRepresentation(v12, &size))
  {
    if (a2)
    {
      uint64_t v107 = *MEMORY[0x1E4F28228];
      v108 = @"Missing source size in corrections\n";
      v70 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v108 forKeys:&v107 count:1];
      *a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:2 userInfo:v70];
    }
LABEL_54:

LABEL_55:
    id v66 = 0;
    goto LABEL_56;
  }
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(size);
  [v89 setObject:DictionaryRepresentation forKeyedSubscript:IC_A_SOURCE_SIZE];

  v135.origin.x = a3;
  v135.origin.y = a4;
  v135.size.height = a6;
  v135.size.width = a5;
  CFDictionaryRef v14 = CGRectCreateDictionaryRepresentation(v135);
  [v89 setObject:v14 forKeyedSubscript:IC_A_INPUT_IMAGE_BOUNDS];

  v136.origin.x = a3 + a5 / rect.size.width * (v95.origin.x - rect.origin.x);
  v136.origin.y = a4 + a6 / rect.size.height * (v95.origin.y - rect.origin.y);
  v136.size.width = a5 / rect.size.width * v95.size.width;
  v136.size.height = a6 / rect.size.height * v95.size.height;
  CFDictionaryRef v15 = CGRectCreateDictionaryRepresentation(v136);
  [v89 setObject:v15 forKeyedSubscript:IC_A_CROP_RECT];

  v73 = [v9 objectForKeyedSubscript:IC_A_FRAMEINSTRUCTIONS];
  if (v73)
  {
    v79 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:0];
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    id obj = v73;
    uint64_t v16 = [obj countByEnumeratingWithState:&v91 objects:v104 count:16];
    if (v16)
    {
      uint64_t v78 = *(void *)v92;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      v17.f64[0] = a5;
      v17.f64[1] = a6;
      float64x2_t v86 = v17;
      v74 = a2;
LABEL_8:
      uint64_t v84 = 0;
      uint64_t v75 = v16;
      while (1)
      {
        if (*(void *)v92 != v78) {
          objc_enumerationMutation(obj);
        }
        id v18 = *(id *)(*((void *)&v91 + 1) + 8 * v84);
        CFDictionaryRef v19 = [v18 objectForKeyedSubscript:IC_A_FRAMETRANSFORM_RAWTIME];
        CMTimeMakeFromDictionary(&v122, v19);
        *(void *)&v120[0] = v122.value;
        CMTimeFlags flags = v122.flags;
        DWORD2(v120[0]) = v122.timescale;
        CMTimeEpoch epoch = v122.epoch;

        if ((flags & 1) == 0) {
          break;
        }
        CMTimeValue v102 = *(void *)&v120[0];
        CMTimeScale v103 = DWORD2(v120[0]);
        v20 = [v18 objectForKeyedSubscript:IC_A_FRAMETRANSFORM_HOMOGRAPHY];
        if ([v20 count] != 9)
        {

          goto LABEL_63;
        }
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        id v21 = v20;
        uint64_t v22 = [v21 countByEnumeratingWithState:&v128 objects:&size count:16];
        if (v22)
        {
          int v23 = 0;
          uint64_t v24 = *(void *)v129;
          do
          {
            uint64_t v25 = 0;
            int v26 = v23;
            v27 = &v101[v23];
            do
            {
              if (*(void *)v129 != v24) {
                objc_enumerationMutation(v21);
              }
              objc_msgSend(*(id *)(*((void *)&v128 + 1) + 8 * v25), "doubleValue", v73);
              v27[v25++] = v28;
            }
            while (v22 != v25);
            uint64_t v22 = [v21 countByEnumeratingWithState:&v128 objects:&size count:16];
            int v23 = v26 + v25;
          }
          while (v22);

          a2 = v74;
          uint64_t v16 = v75;
          unint64_t v10 = 0x1E4F1C000;
        }
        else
        {
        }
        _D1 = rect.origin.x;
        _D4 = rect.origin.y;
        _Q0 = vdivq_f64(v86, (float64x2_t)rect.size);
        __asm
        {
          FMLS            D2, D1, V0.D[0]
          FMLS            D3, D4, V0.D[1]
        }
        long long v128 = *(unint64_t *)&_Q0.f64[0];
        long long v129 = *(unint64_t *)&_D2;
        *(float64_t *)&long long v130 = _Q0.f64[1];
        *((double *)&v130 + 1) = _D3;
        long long v131 = 0uLL;
        uint64_t v132 = 0x3FF0000000000000;
        double v38 = _Q0.f64[1] - _D3 * 0.0;
        double v39 = _D2 * 0.0;
        *(double *)&v122.value = v38;
        *(double *)&v122.timescale = _D2 * 0.0;
        double v40 = _D3 * 0.0 - _Q0.f64[1] * _D2;
        *(double *)&v122.CMTimeEpoch epoch = v40;
        double v41 = vmlad_n_f64(_D2 * 0.0 * 0.0, v38, _Q0.f64[0]) + v40 * 0.0;
        if (v41 >= 2.22044605e-16 || v41 <= -2.22044605e-16)
        {
          *(double *)&v122.value = v38 / v41;
          *(double *)&v122.timescale = v39 / v41;
          *(double *)&v122.CMTimeEpoch epoch = v40 / v41;
          double v123 = _D3 * 0.0 / v41;
          double v124 = (_Q0.f64[0] - v39) / v41;
          double v125 = (_D2 * 0.0 - _Q0.f64[0] * _D3) / v41;
          int8x16_t v43 = (int8x16_t)vdivq_f64(vsubq_f64((float64x2_t)0, vmulq_f64(_Q0, (float64x2_t)0)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41, 0));
          int8x16_t v126 = vextq_s8(v43, v43, 8uLL);
          double v127 = _Q0.f64[0] * _Q0.f64[1] / v41;
        }
        uint64_t v44 = 0;
        v45 = v101;
        do
        {
          uint64_t v46 = 0;
          v47 = &v122;
          do
          {
            uint64_t v48 = 0;
            double v49 = 0.0;
            p_value = (double *)&v47->value;
            do
            {
              double v51 = *p_value;
              p_value += 3;
              double v49 = v49 + *(double *)&v45[v48++] * v51;
            }
            while (v48 != 3);
            *(&size.width + 3 * v44 + v46++) = v49;
            v47 = (CMTime *)((char *)v47 + 8);
          }
          while (v46 != 3);
          ++v44;
          v45 += 3;
        }
        while (v44 != 3);
        uint64_t v52 = 0;
        v120[2] = v117;
        v120[3] = v118;
        uint64_t v121 = v119;
        v120[0] = size;
        v120[1] = v116;
        v53 = &v128;
        do
        {
          uint64_t v54 = 0;
          v55 = v120;
          do
          {
            uint64_t v56 = 0;
            double v57 = 0.0;
            v58 = (double *)v55;
            do
            {
              double v59 = *v58;
              v58 += 3;
              double v57 = v57 + *(double *)((char *)v53 + v56) * v59;
              v56 += 8;
            }
            while (v56 != 24);
            *(&size.width + 3 * v52 + v54++) = v57;
            v55 = (_OWORD *)((char *)v55 + 8);
          }
          while (v54 != 3);
          ++v52;
          v53 = (long long *)((char *)v53 + 24);
        }
        while (v52 != 3);
        uint64_t v60 = 0;
        uint64_t v100 = v119;
        v99[2] = v117;
        v99[3] = v118;
        v99[0] = size;
        v99[1] = v116;
        float64x2_t v61 = (float64x2_t)vdupq_lane_s64(v119, 0);
        do
        {
          v99[v60] = vdivq_f64((float64x2_t)v99[v60], v61);
          ++v60;
        }
        while (v60 != 4);
        uint64_t v100 = 0x3FF0000000000000;
        v62 = [*(id *)(v10 + 2656) dictionaryWithCapacity:0];
        v63 = sub_1DD4AEC38((uint64_t)v99);
        [v62 setObject:v63 forKeyedSubscript:IC_A_FRAMETRANSFORM_HOMOGRAPHY];

        time.value = v102;
        time.timescale = v103;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = epoch;
        CFDictionaryRef v64 = CMTimeCopyAsDictionary(&time, allocator);
        [v62 setObject:v64 forKeyedSubscript:IC_A_FRAMETRANSFORM_RAWTIME];

        [v79 addObject:v62];
        if (++v84 == v16)
        {
          uint64_t v16 = [obj countByEnumeratingWithState:&v91 objects:v104 count:16];
          if (v16) {
            goto LABEL_8;
          }
          goto LABEL_44;
        }
      }

LABEL_63:
      if (a2)
      {
        uint64_t v97 = *MEMORY[0x1E4F28228];
        v98 = @"bad frame instruction\n";
        v72 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v98 forKeys:&v97 count:1];
        *a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:2 userInfo:v72];
      }
      id v66 = 0;
      goto LABEL_66;
    }
LABEL_44:

    [v89 setObject:v79 forKeyedSubscript:IC_A_FRAMEINSTRUCTIONS];
    CFDictionaryRef v65 = CGRectCreateDictionaryRepresentation(rect);
    [v89 setObject:v65 forKeyedSubscript:IC_A_CONVERTED_FROM_BOUNDS];

    id v66 = v89;
LABEL_66:
  }
  else if (a2)
  {
    uint64_t v105 = *MEMORY[0x1E4F28228];
    v106 = @"Missing frame instructions\n";
    v80 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v106, &v105, 1, 0);
    objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"InertiaCamErrorDomain", 2);
    id v66 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v66 = 0;
  }

LABEL_56:
  return v66;
}

void sub_1DD4AEAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

id sub_1DD4AEC38(uint64_t a1)
{
  v2 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:9];
  for (uint64_t i = 0; i != 72; i += 8)
  {
    float v4 = [NSNumber numberWithDouble:*(double *)(a1 + i)];
    [v2 addObject:v4];
  }
  return v2;
}

void sub_1DD4AECCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ICGetIdentityHomographies(uint64_t a1, unint64_t a2, unint64_t a3)
{
  v18[9] = *MEMORY[0x1E4F143B8];
  if (sub_1DD4AEEF0(a1))
  {
    float v6 = [MEMORY[0x1E4F1CA48] array];
    v18[0] = 0x3FF0000000000000;
    memset(&v18[1], 0, 24);
    v18[4] = 0x3FF0000000000000;
    memset(&v18[5], 0, 24);
    v18[8] = 0x3FF0000000000000;
    float v7 = sub_1DD4AEC38((uint64_t)v18);
    if (a2 <= a3)
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      unint64_t v9 = a3 + 1;
      uint64_t v10 = 304 * a2 + 112;
      do
      {
        CFDictionaryRef v11 = [MEMORY[0x1E4F1CA60] dictionary];
        CFDictionaryRef v12 = v11;
        uint64_t v13 = *(void *)(a1 + 24);
        if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 32) - v13) >> 4) <= a2) {
          sub_1DD4BAA78();
        }
        [v11 setObject:v7 forKeyedSubscript:@"homography"];
        long long v14 = *(_OWORD *)(v13 + v10);
        time.CMTimeEpoch epoch = *(void *)(v13 + v10 + 16);
        *(_OWORD *)&time.value = v14;
        CFDictionaryRef v15 = CMTimeCopyAsDictionary(&time, v8);
        [v12 setObject:v15 forKeyedSubscript:@"rawTime"];

        [v6 addObject:v12];
        ++a2;
        v10 += 304;
      }
      while (v9 != a2);
    }
  }
  else
  {
    float v6 = 0;
  }
  return v6;
}

void sub_1DD4AEEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4AEEF0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    uint64_t v2 = *(void *)(result + 32);
    if (v1 != v2)
    {
      CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
      v3 = "Error: ICResult contains out-of-order presentation times.";
      while (1)
      {
        CMTime time1 = v7;
        CMTimeEpoch v4 = *(void *)(v1 + 128);
        *(_OWORD *)&v5.value = *(_OWORD *)(v1 + 112);
        v5.CMTimeEpoch epoch = v4;
        if ((CMTimeCompare(&time1, &v5) & 0x80000000) == 0) {
          break;
        }
        if ((*(_DWORD *)(v1 + 124) & 0x1D) != 1)
        {
          v3 = "Error: ICResult contains homographies with invalid times.";
          break;
        }
        CMTime v7 = *(CMTime *)(v1 + 112);
        v1 += 304;
        if (v1 == v2) {
          return 1;
        }
      }
      puts(v3);
    }
    return 0;
  }
  return result;
}

id ICGetCoordinateShiftedHomographies(uint64_t a1, unint64_t a2, unint64_t a3, double a4, double a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (sub_1DD4AEEF0(a1))
  {
    id v37 = [MEMORY[0x1E4F1CA48] array];
    v43[0] = 0x3FF0000000000000;
    memset(&v43[1], 0, 24);
    v43[4] = 0xBFF0000000000000;
    *(double *)&v43[5] = a5;
    v43[6] = 0;
    v43[7] = 0;
    v43[8] = 0x3FF0000000000000;
    if (a2 <= a3)
    {
      uint64_t v9 = 304 * a2;
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        uint64_t v11 = *(void *)(a1 + 24);
        if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 32) - v11) >> 4) <= a2) {
          sub_1DD4BAA78();
        }
        uint64_t v12 = 0;
        uint64_t v13 = v11 + v9;
        do
        {
          uint64_t v14 = 0;
          CFDictionaryRef v15 = (double *)v43;
          do
          {
            uint64_t v16 = 0;
            double v17 = 0.0;
            id v18 = v15;
            do
            {
              double v19 = *v18;
              v18 += 3;
              double v17 = v17 + *(double *)(v13 + v16) * v19;
              v16 += 8;
            }
            while (v16 != 24);
            *((double *)&v44 + 3 * v12 + v14++) = v17;
            ++v15;
          }
          while (v14 != 3);
          ++v12;
          v13 += 24;
        }
        while (v12 != 3);
        uint64_t v20 = 0;
        v39[2] = v46;
        v39[3] = v47;
        uint64_t v40 = v48;
        v39[0] = v44;
        v39[1] = v45;
        id v21 = v43;
        do
        {
          uint64_t v22 = 0;
          int v23 = v39;
          do
          {
            uint64_t v24 = 0;
            double v25 = 0.0;
            int v26 = (double *)v23;
            do
            {
              double v27 = *v26;
              v26 += 3;
              double v25 = v25 + *(double *)&v21[v24++] * v27;
            }
            while (v24 != 3);
            *((double *)&v44 + 3 * v20 + v22++) = v25;
            int v23 = (_OWORD *)((char *)v23 + 8);
          }
          while (v22 != 3);
          ++v20;
          v21 += 3;
        }
        while (v20 != 3);
        uint64_t v28 = 0;
        uint64_t v42 = v48;
        v41[2] = v46;
        v41[3] = v47;
        v41[0] = v44;
        v41[1] = v45;
        float64x2_t v29 = (float64x2_t)vdupq_lane_s64(v48, 0);
        do
        {
          v41[v28] = vdivq_f64((float64x2_t)v41[v28], v29);
          ++v28;
        }
        while (v28 != 4);
        uint64_t v42 = 0x3FF0000000000000;
        v30 = [MEMORY[0x1E4F1CA60] dictionary];
        v31 = sub_1DD4AEC38((uint64_t)v41);
        [v30 setObject:v31 forKeyedSubscript:@"homography"];

        uint64_t v32 = v11 + 304 * a2;
        long long v33 = *(_OWORD *)(v32 + 112);
        time.CMTimeEpoch epoch = *(void *)(v32 + 128);
        *(_OWORD *)&time.value = v33;
        CFDictionaryRef v34 = CMTimeCopyAsDictionary(&time, v10);
        [v30 setObject:v34 forKeyedSubscript:@"rawTime"];

        [v37 addObject:v30];
        v9 += 304;
      }
      while (a2++ < a3);
    }
  }
  else
  {
    id v37 = 0;
  }
  return v37;
}

void sub_1DD4AF2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_1DD4AF32C(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    int v6 = 678152731 * (v4 >> 4) - 1;
    if (a4 == -1) {
      int v7 = v6;
    }
    else {
      int v7 = a4;
    }
    id v58 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:0];
    if (v7 >= a3)
    {
      if (SHIDWORD(a2) <= (int)a2) {
        int v8 = a2;
      }
      else {
        int v8 = HIDWORD(a2);
      }
      float v9 = (float)v8;
      uint64_t v10 = 304 * a3;
      int v11 = v7 - a3 + 1;
      do
      {
        sub_1DD4D3708((uint64_t)&v59);
        uint64_t v12 = *a1;
        sub_1DD4AFB94((uint64_t)v67, (double *)(*a1 + v10), a2, SHIDWORD(a2));
        sub_1DD4D33CC((uint64_t)&v59, v67);
        uint64_t v13 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:0];
        uint64_t v14 = [NSNumber numberWithDouble:(double)*(uint64_t *)(v12 + v10 + 112) / (double)*(int *)(v12 + v10 + 120)];
        [v13 setObject:v14 forKeyedSubscript:@"time"];

        CFDictionaryRef v15 = [NSNumber numberWithDouble:v61];
        [v13 setObject:v15 forKeyedSubscript:@"h_geom_rotation"];

        uint64_t v16 = [NSNumber numberWithDouble:v62];
        [v13 setObject:v16 forKeyedSubscript:@"h_geom_scale"];

        double v17 = [NSNumber numberWithDouble:v63];
        [v13 setObject:v17 forKeyedSubscript:@"h_geom_diff_scale"];

        id v18 = [NSNumber numberWithDouble:v64];
        [v13 setObject:v18 forKeyedSubscript:@"h_geom_shear"];

        double v19 = [NSNumber numberWithDouble:v59];
        [v13 setObject:v19 forKeyedSubscript:@"h_geom_trans_x"];

        uint64_t v20 = [NSNumber numberWithDouble:v60];
        [v13 setObject:v20 forKeyedSubscript:@"h_geom_trans_y"];

        id v21 = [NSNumber numberWithDouble:v65];
        [v13 setObject:v21 forKeyedSubscript:@"h_geom_keystone1"];

        uint64_t v22 = [NSNumber numberWithDouble:v66];
        [v13 setObject:v22 forKeyedSubscript:@"h_geom_keystone2"];

        int v23 = [NSNumber numberWithDouble:*(float *)(v12 + v10 + 168)];
        [v13 setObject:v23 forKeyedSubscript:@"confidence"];

        if (*(unsigned char *)(v12 + v10 + 73)) {
          double v24 = 1.0;
        }
        else {
          double v24 = 0.0;
        }
        double v25 = [NSNumber numberWithDouble:v24];
        [v13 setObject:v25 forKeyedSubscript:@"interpolated"];

        int v26 = [NSNumber numberWithDouble:*(float *)(v12 + v10 + 192)];
        [v13 setObject:v26 forKeyedSubscript:@"inlierArea"];

        LODWORD(v27) = *(_DWORD *)(v12 + v10 + 196);
        uint64_t v28 = [NSNumber numberWithDouble:(double)v27];
        [v13 setObject:v28 forKeyedSubscript:@"feature_matches"];

        LODWORD(v29) = *(_DWORD *)(v12 + v10 + 212);
        v30 = [NSNumber numberWithDouble:(double)v29];
        [v13 setObject:v30 forKeyedSubscript:@"max_features"];

        LODWORD(v31) = *(_DWORD *)(v12 + v10 + 200);
        uint64_t v32 = [NSNumber numberWithDouble:(double)v31];
        [v13 setObject:v32 forKeyedSubscript:@"feature_inliers"];

        LODWORD(v33) = *(_DWORD *)(v12 + v10 + 204);
        CFDictionaryRef v34 = [NSNumber numberWithDouble:(double)v33];
        [v13 setObject:v34 forKeyedSubscript:@"feature_priors"];

        LODWORD(v35) = *(_DWORD *)(v12 + v10 + 208);
        v36 = [NSNumber numberWithDouble:(double)v35];
        [v13 setObject:v36 forKeyedSubscript:@"feature_currentPriors"];

        LODWORD(v37) = *(_DWORD *)(v12 + v10 + 204);
        double v38 = [NSNumber numberWithDouble:(double)v37];
        [v13 setObject:v38 forKeyedSubscript:@"feature_priors"];

        double v39 = [NSNumber numberWithDouble:(float)(*(float *)(v12 + v10 + 216) / v9)];
        [v13 setObject:v39 forKeyedSubscript:@"inliers_meanTravel"];

        uint64_t v40 = [NSNumber numberWithDouble:(float)(*(float *)(v12 + v10 + 220) / v9)];
        [v13 setObject:v40 forKeyedSubscript:@"inliers_medianTravel"];

        double v41 = [NSNumber numberWithDouble:(float)(*(float *)(v12 + v10 + 224) / v9)];
        [v13 setObject:v41 forKeyedSubscript:@"inliers_maxTravel"];

        double v42 = v60;
        double v43 = v66;
        long long v44 = [NSNumber numberWithDouble:v65 / (v59 + 0.0001)];
        [v13 setObject:v44 forKeyedSubscript:@"h_geom_synth_keyRatio_x"];

        long long v45 = [NSNumber numberWithDouble:v43 / (v42 + 0.0001)];
        [v13 setObject:v45 forKeyedSubscript:@"h_geom_synth_keyRatio_y"];

        long long v46 = [NSNumber numberWithDouble:v64 / (fabs(v59) + fabs(v60) + 0.0001)];
        [v13 setObject:v46 forKeyedSubscript:@"h_geom_synth_shearRatio"];

        unsigned int v48 = *(_DWORD *)(v12 + v10 + 204);
        if (v48)
        {
          LODWORD(v47) = *(_DWORD *)(v12 + v10 + 208);
          double v49 = (double)v47 / (double)v48;
        }
        else
        {
          double v49 = 0.0;
        }
        v50 = [NSNumber numberWithDouble:v49];
        [v13 setObject:v50 forKeyedSubscript:@"synth_feature_cpratio"];

        unsigned int v52 = *(_DWORD *)(v12 + v10 + 196);
        if (v52)
        {
          LODWORD(v51) = *(_DWORD *)(v12 + v10 + 200);
          double v53 = (double)v51 / (double)v52;
        }
        else
        {
          double v53 = 0.0;
        }
        uint64_t v54 = [NSNumber numberWithDouble:v53];
        [v13 setObject:v54 forKeyedSubscript:@"synth_feature_inlierRatio"];

        [v58 addObject:v13];
        v10 += 304;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    id v58 = 0;
  }
  return v58;
}

void sub_1DD4AFA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4AFB94(uint64_t result, double *a2, int a3, int a4)
{
  uint64_t v4 = 0;
  double v5 = (double)a3;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  double v6 = (double)a4;
  if ((double)a3 < (double)a4) {
    double v7 = (double)a4;
  }
  else {
    double v7 = (double)a3;
  }
  v31[0] = 1.0 / v7;
  v31[1] = 0.0;
  v31[2] = -v5 / (v7 + v7);
  v31[3] = 0.0;
  v31[4] = 1.0 / v7;
  v31[5] = -v6 / (v7 + v7);
  v31[6] = 0.0;
  v31[7] = 0.0;
  v31[8] = 1.0;
  *(double *)v30 = v7;
  v30[1] = 0;
  *(double *)&v30[2] = v5 * 0.5;
  v30[3] = 0;
  *(double *)&v30[4] = v7;
  *(double *)&v30[5] = v6 * 0.5;
  v30[6] = 0;
  v30[7] = 0;
  v30[8] = 0x3FF0000000000000;
  int v8 = v31;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = 0;
      double v12 = 0.0;
      uint64_t v13 = v10;
      do
      {
        double v14 = *v13;
        v13 += 3;
        double v12 = v12 + v8[v11++] * v14;
      }
      while (v11 != 3);
      *((double *)&v32 + 3 * v4 + v9++) = v12;
      ++v10;
    }
    while (v9 != 3);
    ++v4;
    v8 += 3;
  }
  while (v4 != 3);
  uint64_t v15 = 0;
  long long v16 = v35;
  *(_OWORD *)(result + 32) = v34;
  *(_OWORD *)(result + 48) = v16;
  *(void *)(result + 64) = v36;
  long long v17 = v33;
  *(_OWORD *)result = v32;
  *(_OWORD *)(result + 16) = v17;
  uint64_t v18 = result;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = (double *)v30;
    do
    {
      uint64_t v21 = 0;
      double v22 = 0.0;
      int v23 = v20;
      do
      {
        double v24 = *v23;
        v23 += 3;
        double v22 = v22 + *(double *)(v18 + v21) * v24;
        v21 += 8;
      }
      while (v21 != 24);
      *((double *)&v32 + 3 * v15 + v19++) = v22;
      ++v20;
    }
    while (v19 != 3);
    ++v15;
    v18 += 24;
  }
  while (v15 != 3);
  uint64_t v25 = 0;
  long long v26 = v35;
  *(_OWORD *)(result + 32) = v34;
  *(_OWORD *)(result + 48) = v26;
  *(void *)(result + 64) = v36;
  long long v27 = v33;
  *(_OWORD *)result = v32;
  *(_OWORD *)(result + 16) = v27;
  uint64_t v28 = (const double *)(result + 64);
  float64x2_t v29 = vld1q_dup_f64(v28);
  do
  {
    *(float64x2_t *)(result + v25) = vdivq_f64(*(float64x2_t *)(result + v25), v29);
    v25 += 16;
  }
  while (v25 != 64);
  *(void *)(result + 64) = 0x3FF0000000000000;
  return result;
}

id ICGetResultHomographies(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 24) == *(void *)(a1 + 32))
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_1DD4AFDD4((uint64_t *)(a1 + 24), a2, *(float64_t *)(a1 + 56), *(float64_t *)(a1 + 64), *(CGFloat *)(a1 + 72), *(CGFloat *)(a1 + 80), (double)*(int *)(a1 + 48), (double)*(int *)(a1 + 52));
    }
    uint64_t v2 = vars8;
  }
  return (id)a1;
}

id sub_1DD4AFDD4(uint64_t *a1, int a2, float64_t a3, float64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v56.x = a3;
  v56.y = a4;
  CGFloat v57 = a5;
  CGFloat v58 = a6;
  uint64_t v54 = 0;
  v55[0] = 0;
  v55[1] = 0;
  double v12 = a1 + 1;
  sub_1DD4BEF24(&v54, *a1, a1[1], 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  uint64_t v13 = v54;
  if (v55[0] != v54)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      sub_1DD4AFB94(v13 + v14, (double *)(*a1 + v14), (int)a7, (int)a8);
      ++v15;
      uint64_t v13 = v54;
      v14 += 304;
    }
    while (0x86BCA1AF286BCA1BLL * ((v55[0] - v54) >> 4) > v15);
  }
  if (a2) {
    long long v16 = &v54;
  }
  else {
    long long v16 = a1;
  }
  double v53 = [MEMORY[0x1E4F1CA48] array];
  int v52 = a2;
  if (a2) {
    long long v17 = v55;
  }
  else {
    long long v17 = v12;
  }
  if (*v17 != *v16)
  {
    unint64_t v18 = 0;
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v20 = 112;
    do
    {
      uint64_t v21 = [MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v22 = *v16;
      int v23 = sub_1DD4AEC38(*v16 + v20 - 112);
      [v21 setObject:v23 forKeyedSubscript:IC_A_FRAMETRANSFORM_HOMOGRAPHY];

      long long v24 = *(_OWORD *)(v22 + v20);
      time.CMTimeEpoch epoch = *(void *)(v22 + v20 + 16);
      *(_OWORD *)&time.value = v24;
      CFDictionaryRef v25 = CMTimeCopyAsDictionary(&time, v19);
      [v21 setObject:v25 forKeyedSubscript:IC_A_FRAMETRANSFORM_RAWTIME];

      [v53 addObject:v21];
      ++v18;
      v20 += 304;
    }
    while (v18 < 0x86BCA1AF286BCA1BLL * ((*v17 - *v16) >> 4));
  }
  long long v26 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v27 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", 0, sub_1DD4D3708((uint64_t)&time).n128_f64[0]);
  uint64_t v28 = v54;
  if (v55[0] != v54)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    do
    {
      sub_1DD4D33CC((uint64_t)&time, (long long *)(v28 + v29));
      unint64_t v31 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:0];
      HIDWORD(v32) = HIDWORD(time.epoch);
      *(float *)&double v32 = *(double *)&time.epoch;
      long long v33 = [NSNumber numberWithFloat:v32];
      [v31 setObject:v33 forKeyedSubscript:@"h_geom_rotation"];

      HIDWORD(v34) = HIDWORD(v60);
      *(float *)&double v34 = v60;
      long long v35 = [NSNumber numberWithFloat:v34];
      [v31 setObject:v35 forKeyedSubscript:@"h_geom_scale"];

      HIDWORD(v36) = HIDWORD(v61);
      *(float *)&double v36 = v61;
      uint64_t v37 = [NSNumber numberWithFloat:v36];
      [v31 setObject:v37 forKeyedSubscript:@"h_geom_diff_scale"];

      HIDWORD(v38) = HIDWORD(v62);
      *(float *)&double v38 = v62;
      double v39 = [NSNumber numberWithFloat:v38];
      [v31 setObject:v39 forKeyedSubscript:@"h_geom_shear"];

      HIDWORD(v40) = HIDWORD(time.value);
      *(float *)&double v40 = *(double *)&time.value;
      double v41 = [NSNumber numberWithFloat:v40];
      [v31 setObject:v41 forKeyedSubscript:@"h_geom_trans_x"];

      HIDWORD(v42) = time.flags;
      *(float *)&double v42 = *(double *)&time.timescale;
      double v43 = [NSNumber numberWithFloat:v42];
      [v31 setObject:v43 forKeyedSubscript:@"h_geom_trans_y"];

      HIDWORD(v44) = HIDWORD(v63);
      *(float *)&double v44 = v63;
      long long v45 = [NSNumber numberWithFloat:v44];
      [v31 setObject:v45 forKeyedSubscript:@"h_geom_keystone1"];

      HIDWORD(v46) = HIDWORD(v64);
      *(float *)&double v46 = v64;
      unint64_t v47 = [NSNumber numberWithFloat:v46];
      [v31 setObject:v47 forKeyedSubscript:@"h_geom_keystone2"];

      [v27 addObject:v31];
      ++v30;
      uint64_t v28 = v54;
      v29 += 304;
    }
    while (0x86BCA1AF286BCA1BLL * ((v55[0] - v54) >> 4) > v30);
  }
  [v26 setObject:v27 forKeyedSubscript:@"Decompositions"];

  [v26 setObject:v53 forKeyedSubscript:IC_A_FRAMEINSTRUCTIONS];
  time.value = 0;
  *(void *)&time.timescale = 0;
  *(CGFloat *)&time.CMTimeEpoch epoch = a7;
  double v60 = a8;
  if (v52)
  {
    sub_1DD4ADFB8((float64x2_t *)&time, (float64x2_t *)&time, (int)a7, (int)a8);
    sub_1DD4ADFB8((float64x2_t *)&v56, (float64x2_t *)&v56, (int)a7, (int)a8);
  }
  v67.origin = v56;
  v67.size.width = v57;
  v67.size.height = v58;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v67);
  [v26 setObject:DictionaryRepresentation forKeyedSubscript:IC_A_CROP_RECT];

  v66.width = a7;
  v66.height = a8;
  CFDictionaryRef v49 = CGSizeCreateDictionaryRepresentation(v66);
  [v26 setObject:v49 forKeyedSubscript:IC_A_SOURCE_SIZE];

  *(void *)&v68.origin.x = time.value;
  v68.origin.y = *(CGFloat *)&time.timescale;
  *(void *)&v68.size.width = time.epoch;
  v68.size.height = v60;
  CFDictionaryRef v50 = CGRectCreateDictionaryRepresentation(v68);
  [v26 setObject:v50 forKeyedSubscript:IC_A_INPUT_IMAGE_BOUNDS];

  time.value = (CMTimeValue)&v54;
  sub_1DD4BEE80((void ***)&time);
  return v26;
}

void sub_1DD4B0328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  *(void *)(v14 - 112) = &a12;
  sub_1DD4BEE80((void ***)(v14 - 112));
  _Unwind_Resume(a1);
}

double ICGetResultConfidence(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  LODWORD(result) = *(_DWORD *)(a1 + 92);
  return result;
}

double ICGetAnalysisConfidence(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  LODWORD(result) = *(_DWORD *)(a1 + 88);
  return result;
}

float ICGetAnomalyScore(uint64_t a1)
{
  float result = 0.0;
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v2 = (uint64_t *)(a1 + 24);
    if (v3 != v4) {
      return sub_1DD4DB714(v2);
    }
  }
  return result;
}

id *ICGetResultStats(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[2];
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t ICDestroyResult(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

id ICGetResultOptionalData(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && (sub_1DD4AEEF0(a1) & 1) != 0)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    double v5 = [v3 objectForKeyedSubscript:IC_D_PER_FRAME_FEATURES];
    int v6 = [v5 BOOLValue];

    if (v6)
    {
      double v7 = sub_1DD4AF32C((uint64_t *)(a1 + 24), *(void *)(a1 + 48), 0, -1);
      [v4 setObject:v7 forKeyedSubscript:IC_D_PER_FRAME_FEATURES];
    }
    int v8 = [v3 objectForKeyedSubscript:IC_D_HOMOGRAPHY_METRICS];
    int v9 = [v8 BOOLValue];

    if (v9)
    {
      uint64_t v10 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
      *(float *)&double v11 = sub_1DD50CF98((uint64_t *)(a1 + 24), *(void *)(a1 + 48), v10);
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, IC_D_HOMOGRAPHY_METRICS, v11);
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_1DD4B05C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ICGetResultFramePresentationTimes(uint64_t a1)
{
  if (sub_1DD4AEEF0(a1))
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v3 != v4)
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        long long v6 = *(_OWORD *)(v3 + 112);
        v9.CMTimeEpoch epoch = *(void *)(v3 + 128);
        *(_OWORD *)&v9.value = v6;
        CFDictionaryRef v7 = CMTimeCopyAsDictionary(&v9, v5);
        [v2 addObject:v7];

        v3 += 304;
      }
      while (v3 != v4);
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1DD4B06C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ICChangeCorrectionsForDimensions(uint64_t result, double a2, double a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(result + 24);
  uint64_t v4 = *(void *)(result + 32);
  if (v3 != v4)
  {
    double v5 = (double)*(int *)(result + 48);
    double v6 = (double)*(int *)(result + 52);
    double v7 = a2 / v5;
    double v8 = a3 / v6;
    double v9 = v5 / a2;
    double v10 = v6 / a3;
    do
    {
      uint64_t v11 = 0;
      memset(&v37[1], 0, 24);
      *(double *)uint64_t v37 = v7;
      *(double *)&v37[4] = v8;
      memset(&v37[5], 0, 24);
      v37[8] = 0x3FF0000000000000;
      memset(&v36[1], 0, 24);
      *(double *)double v36 = v9;
      *(double *)&v36[4] = v10;
      memset(&v36[5], 0, 24);
      double v12 = v37;
      v36[8] = 0x3FF0000000000000;
      do
      {
        uint64_t v13 = 0;
        uint64_t v14 = (double *)v3;
        do
        {
          uint64_t v15 = 0;
          double v16 = 0.0;
          long long v17 = v14;
          do
          {
            double v18 = *v17;
            v17 += 3;
            double v16 = v16 + *(double *)&v12[v15++] * v18;
          }
          while (v15 != 3);
          *((double *)&v38 + 3 * v11 + v13++) = v16;
          ++v14;
        }
        while (v13 != 3);
        ++v11;
        v12 += 3;
      }
      while (v11 != 3);
      uint64_t v19 = 0;
      long long v33 = v40;
      long long v34 = v41;
      uint64_t v35 = v42;
      long long v31 = v38;
      long long v32 = v39;
      uint64_t v20 = &v31;
      do
      {
        uint64_t v21 = 0;
        uint64_t v22 = (double *)v36;
        do
        {
          uint64_t v23 = 0;
          double v24 = 0.0;
          CFDictionaryRef v25 = v22;
          do
          {
            double v26 = *v25;
            v25 += 3;
            double v24 = v24 + *(double *)((char *)v20 + v23) * v26;
            v23 += 8;
          }
          while (v23 != 24);
          *((double *)&v38 + 3 * v19 + v21++) = v24;
          ++v22;
        }
        while (v21 != 3);
        ++v19;
        uint64_t v20 = (long long *)((char *)v20 + 24);
      }
      while (v19 != 3);
      uint64_t v27 = 0;
      uint64_t v35 = v42;
      long long v33 = v40;
      long long v34 = v41;
      long long v31 = v38;
      long long v32 = v39;
      float64x2_t v28 = (float64x2_t)vdupq_lane_s64(v42, 0);
      do
      {
        *(long long *)((char *)&v31 + v27) = (__int128)vdivq_f64(*(float64x2_t *)((char *)&v31 + v27), v28);
        v27 += 16;
      }
      while (v27 != 64);
      long long v29 = v34;
      *(_OWORD *)(v3 + 32) = v33;
      *(_OWORD *)(v3 + 48) = v29;
      *(void *)(v3 + 64) = 0x3FF0000000000000;
      long long v30 = v32;
      *(_OWORD *)uint64_t v3 = v31;
      *(_OWORD *)(v3 + 16) = v30;
      v3 += 304;
    }
    while (v3 != v4);
    *(_DWORD *)(result + 48) = (int)a2;
    *(_DWORD *)(result + 52) = (int)a3;
  }
  return result;
}

uint64_t ICGetCorrectionResultCropData(uint64_t a1, _OWORD *a2)
{
  uint64_t result = sub_1DD4AEEF0(a1);
  if (result)
  {
    if (a2)
    {
      long long v5 = *(_OWORD *)(a1 + 72);
      *a2 = *(_OWORD *)(a1 + 56);
      a2[1] = v5;
    }
    return *(unsigned char *)(a1 + 232) != 0;
  }
  return result;
}

void ICStoreAnalyticsViaDodML(uint64_t a1, double *a2, double *a3, void *a4)
{
  v57[6] = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  if (a1 && *(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    context = (void *)MEMORY[0x1E01B7BB0]();
    double v8 = (void *)[objc_alloc(off_1EBE80558()) initWithBundleIdentifier:@"com.apple.acg.powerspectrum"];
    double v9 = v8;
    if (!v8 || (v53 = v8, v10 = [v8 shouldMakeRecord], double v9 = v53, (v10 & 1) == 0))
    {
LABEL_30:

      goto LABEL_31;
    }
    if (a2)
    {
      id v11 = objc_alloc(NSNumber);
      double v12 = *a2;
      *(float *)&double v12 = *a2;
      uint64_t v13 = (void *)[v11 initWithFloat:v12];
      v57[0] = v13;
      id v14 = objc_alloc(NSNumber);
      double v15 = a2[1];
      *(float *)&double v15 = v15;
      double v16 = (void *)[v14 initWithFloat:v15];
      v57[1] = v16;
      id v17 = objc_alloc(NSNumber);
      double v18 = a2[2];
      *(float *)&double v18 = v18;
      uint64_t v19 = (void *)[v17 initWithFloat:v18];
      v57[2] = v19;
      id v20 = objc_alloc(NSNumber);
      double v21 = a2[3];
      *(float *)&double v21 = v21;
      uint64_t v22 = (void *)[v20 initWithFloat:v21];
      v57[3] = v22;
      id v23 = objc_alloc(NSNumber);
      double v24 = a2[4];
      *(float *)&double v24 = v24;
      CFDictionaryRef v25 = (void *)[v23 initWithFloat:v24];
      v57[4] = v25;
      id v26 = objc_alloc(NSNumber);
      double v27 = a2[5];
      *(float *)&double v27 = v27;
      float64x2_t v28 = (void *)[v26 initWithFloat:v27];
      v57[5] = v28;
      unint64_t v51 = [MEMORY[0x1E4F1C978] arrayWithObjects:v57 count:6];

      if (a3)
      {
LABEL_7:
        id v29 = objc_alloc(NSNumber);
        double v30 = *a3;
        *(float *)&double v30 = *a3;
        long long v31 = (void *)[v29 initWithFloat:v30];
        v56[0] = v31;
        id v32 = objc_alloc(NSNumber);
        double v33 = a3[1];
        *(float *)&double v33 = v33;
        long long v34 = (void *)[v32 initWithFloat:v33];
        v56[1] = v34;
        CFDictionaryRef v50 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:2];

LABEL_10:
        id v52 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        if (v50) {
          [v52 setObject:v50 forKeyedSubscript:@"dimensions"];
        }
        if (v51) {
          [v52 setObject:v51 forKeyedSubscript:@"preferredTransform"];
        }
        if (v7) {
          [v52 setObject:v7 forKeyedSubscript:@"sourceType"];
        }
        id v48 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        id v49 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
        {
LABEL_24:
          id v40 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          [v40 setObject:v49 forKeyedSubscript:@"times"];
          [v40 setObject:v48 forKeyedSubscript:@"homographies"];
          if ([v52 count]) {
            [v40 setObject:v52 forKeyedSubscript:@"info"];
          }
          id v55 = 0;
          double v46 = objc_msgSend(MEMORY[0x1E4F28DB0], "archivedDataWithRootObject:requiringSecureCoding:error:", v40, 0, &v55, v48);
          id v47 = v55;
          if (v46) {
            [v53 saveRecordWithData:v46 recordInfo:MEMORY[0x1E4F1CC08] completion:&unk_1F38B0890];
          }
        }
        else
        {
          uint64_t v35 = 0;
          unint64_t v36 = 0;
LABEL_18:
          id v37 = objc_alloc(NSNumber);
          *(float *)&double v38 = (float)*(uint64_t *)(*(void *)(a1 + 24) + 304 * v36 + 112)
                         / (float)*(int *)(*(void *)(a1 + 24) + 304 * v36 + 120);
          long long v39 = (void *)[v37 initWithFloat:v38];
          [v49 addObject:v39];

          id v40 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          double v41 = fabs(*(double *)(*(void *)(a1 + 24) + 304 * v36 + 64));
          if (v41 != INFINITY && v41 >= 1.0e-10)
          {
            uint64_t v42 = 0;
            while (fabs(*(double *)(*(void *)(a1 + 24) + v35 + v42)) != INFINITY)
            {
              id v43 = objc_alloc(NSNumber);
              double v44 = *(double *)(*(void *)(a1 + 24) + v35 + v42) / *(double *)(*(void *)(a1 + 24) + 304 * v36 + 64);
              *(float *)&double v44 = v44;
              long long v45 = (void *)[v43 initWithFloat:v44];
              [v40 addObject:v45];

              v42 += 8;
              if (v42 == 64)
              {
                [v48 addObject:v40];

                ++v36;
                v35 += 304;
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4) > v36) {
                  goto LABEL_18;
                }
                goto LABEL_24;
              }
            }
          }
        }

        double v9 = v53;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v51 = 0;
      if (a3) {
        goto LABEL_7;
      }
    }
    CFDictionaryRef v50 = 0;
    goto LABEL_10;
  }
LABEL_31:
}

void sub_1DD4B0E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ICAnalyzeInputMotion(void *a1, void *a2, void *a3, _DWORD *a4)
{
  v49[2] = *MEMORY[0x1E4F143B8];
  id v30 = a1;
  id v31 = a2;
  id v29 = a3;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  id v7 = (id)qword_1EBE80590;
  os_signpost_id_t v8 = os_signpost_id_generate(v7);
  os_signpost_id_t v48 = v8;
  float64x2_t v28 = a4;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  double v9 = (id)qword_1EBE80590;
  char v10 = v9;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "ICAnalyzeInputMotion", (const char *)&unk_1DD51A302, buf, 2u);
  }

  if (v30)
  {
    sub_1DD4B17DC(v29, (uint64_t)buf);
    id v11 = [NSNumber numberWithUnsignedInt:875704422];
    v49[0] = v11;
    double v12 = [NSNumber numberWithUnsignedInt:875704438];
    v49[1] = v12;
    double v27 = [MEMORY[0x1E4F1C978] arrayWithObjects:v49 count:2];

    v41[0] = *(_OWORD *)buf;
    v41[1] = v44;
    v41[2] = v45;
    uint64_t v13 = sub_1DD4E087C(v30, v41, v27, (uint64_t)v42);
    if (v13)
    {
      id v26 = [v30 tracksWithMediaType:*MEMORY[0x1E4F15C18]];
      id v14 = [v26 objectAtIndex:0];
      double v15 = v14;
      if (v14)
      {
        if ((buf[12] & 1) == 0
          || (BYTE4(v45) & 1) == 0
          || *((void *)&v45 + 1)
          || (*((void *)&v44 + 1) & 0x8000000000000000) != 0)
        {
          [v14 timeRange];
          long long v39 = *(_OWORD *)v32;
          *(_OWORD *)id v40 = *(_OWORD *)v33;
          *(_OWORD *)&v40[16] = *(_OWORD *)&v33[16];
        }
        else
        {
          [v13 timeRange];
          long long v39 = *(_OWORD *)v32;
          *(_OWORD *)id v40 = *(_OWORD *)v33;
          *(_OWORD *)&v40[16] = *(_OWORD *)&v33[16];
          [v15 timeRange];
          long long v37 = *(_OWORD *)&v33[8];
          uint64_t v38 = *(void *)&v33[24];
          CMTime time1 = *(CMTime *)&v40[8];
          CMTime time2 = *(CMTime *)&v33[8];
          if (CMTimeCompare(&time1, &time2) >= 1)
          {
            *(_OWORD *)&v40[8] = v37;
            *(void *)&v40[24] = v38;
          }
        }
        uint64_t v34 = 0;
        ICAnalysisInit(v29);
      }
      if (v28) {
        *float64x2_t v28 = 10;
      }
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      uint64_t v22 = (id)qword_1EBE80590;
      id v23 = v22;
      os_signpost_id_t v24 = v48;
      if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
      {
        *(_WORD *)id v32 = 0;
        _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v23, OS_SIGNPOST_EVENT, v24, "ICAnalyzeInputMotion", "IC_ERROR_BAD_INPUT", v32, 2u);
      }

      id v20 = v26;
    }
    else
    {
      if (v28) {
        *float64x2_t v28 = 10;
      }
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      uint64_t v19 = (id)qword_1EBE80590;
      id v20 = v19;
      os_signpost_id_t v21 = v48;
      if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
      {
        *(_WORD *)id v32 = 0;
        _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v20, OS_SIGNPOST_EVENT, v21, "ICAnalyzeInputMotion", "IC_ERROR_BAD_INPUT", v32, 2u);
      }
    }

    if (__p)
    {
      id v47 = __p;
      operator delete(__p);
    }
  }
  else
  {
    puts("No input video, can't analyze.");
    if (v28) {
      *float64x2_t v28 = 10;
    }
    if (qword_1EBE80588 != -1) {
      dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
    }
    double v16 = (id)qword_1EBE80590;
    id v17 = v16;
    os_signpost_id_t v18 = v48;
    if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v17, OS_SIGNPOST_EVENT, v18, "ICAnalyzeInputMotion", "IC_ERROR_BAD_INPUT", buf, 2u);
    }
  }
  sub_1DD4B3028(&v48);

  return 0;
}

void sub_1DD4B1694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  uint64_t v19 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v19;
    operator delete(v19);
  }
  sub_1DD4B3028((os_signpost_id_t *)(v17 - 120));

  _Unwind_Resume(a1);
}

id sub_1DD4B1780()
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  v0 = (void *)qword_1EBE80590;
  return v0;
}

void sub_1DD4B17DC(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  sub_1DD4BAC0C(a2);
  if (v3)
  {
    uint64_t v4 = [v3 objectForKeyedSubscript:IC_A_TRIM_START_TIME];
    if (v4)
    {
      long long v5 = [v3 objectForKeyedSubscript:IC_A_TRIM_DURATION];

      if (v5)
      {
        memset(&v50, 0, sizeof(v50));
        double v6 = [v3 objectForKeyedSubscript:IC_A_TRIM_START_TIME];
        id v7 = v6;
        if (v6) {
          [v6 CMTimeValue];
        }
        else {
          memset(&v50, 0, sizeof(v50));
        }

        memset(&v49, 0, sizeof(v49));
        os_signpost_id_t v8 = [v3 objectForKeyedSubscript:IC_A_TRIM_DURATION];
        double v9 = v8;
        if (v8) {
          [v8 CMTimeValue];
        }
        else {
          memset(&v49, 0, sizeof(v49));
        }

        CMTime start = v50;
        CMTime duration = v49;
        CMTimeRangeMake(&v48, &start, &duration);
        long long v10 = *(_OWORD *)&v48.start.epoch;
        *(_OWORD *)a2 = *(_OWORD *)&v48.start.value;
        *(_OWORD *)(a2 + 16) = v10;
        *(_OWORD *)(a2 + 32) = *(_OWORD *)&v48.duration.timescale;
      }
    }
    id v11 = [v3 objectForKeyedSubscript:IC_A_LOOP_CLOSURE_PTS];

    if (v11)
    {
      double v12 = [v3 objectForKeyedSubscript:IC_A_LOOP_CLOSURE_PTS];
      unint64_t v13 = 0;
      id v14 = (char **)(a2 + 48);
      while ([v12 count] > v13)
      {
        double v15 = [v12 objectAtIndexedSubscript:v13];
        double v16 = v15;
        if (v15) {
          [v15 CMTimeRangeValue];
        }
        else {
          memset(&v48, 0, sizeof(v48));
        }
        uint64_t v17 = *(_OWORD **)(a2 + 56);
        unint64_t v18 = *(void *)(a2 + 64);
        if ((unint64_t)v17 >= v18)
        {
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - *v14) >> 4);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x555555555555555) {
            sub_1DD4BACA0();
          }
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)*v14) >> 4);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v25 = 0x555555555555555;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            id v26 = (char *)sub_1DD4BAD48(a2 + 64, v25);
          }
          else {
            id v26 = 0;
          }
          double v27 = &v26[48 * v22];
          long long v28 = *(_OWORD *)&v48.start.value;
          long long v29 = *(_OWORD *)&v48.duration.timescale;
          *((_OWORD *)v27 + 1) = *(_OWORD *)&v48.start.epoch;
          *((_OWORD *)v27 + 2) = v29;
          *(_OWORD *)double v27 = v28;
          id v31 = *(char **)(a2 + 48);
          id v30 = *(char **)(a2 + 56);
          id v32 = v27;
          if (v30 != v31)
          {
            do
            {
              long long v33 = *((_OWORD *)v30 - 3);
              long long v34 = *((_OWORD *)v30 - 1);
              *((_OWORD *)v32 - 2) = *((_OWORD *)v30 - 2);
              *((_OWORD *)v32 - 1) = v34;
              *((_OWORD *)v32 - 3) = v33;
              v32 -= 48;
              v30 -= 48;
            }
            while (v30 != v31);
            id v30 = *v14;
          }
          os_signpost_id_t v21 = v27 + 48;
          *(void *)(a2 + 48) = v32;
          *(void *)(a2 + 56) = v27 + 48;
          *(void *)(a2 + 64) = &v26[48 * v25];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          long long v19 = *(_OWORD *)&v48.start.value;
          long long v20 = *(_OWORD *)&v48.duration.timescale;
          v17[1] = *(_OWORD *)&v48.start.epoch;
          v17[2] = v20;
          *uint64_t v17 = v19;
          os_signpost_id_t v21 = v17 + 3;
        }
        *(void *)(a2 + 56) = v21;

        ++v13;
      }
    }
    uint64_t v35 = [v3 objectForKeyedSubscript:qword_1EAB226D0];

    if (v35)
    {
      unint64_t v36 = [v3 objectForKeyedSubscript:qword_1EAB226D0];
      [v36 getValue:a2 + 84 size:56];
    }
    long long v37 = [v3 objectForKeyedSubscript:qword_1EAB226D8];

    if (v37)
    {
      uint64_t v38 = [v3 objectForKeyedSubscript:qword_1EAB226D8];
      [v38 floatValue];
      *(_DWORD *)(a2 + 76) = v39;
    }
    id v40 = [v3 objectForKeyedSubscript:IC_A_PREROLL_FRAME_COUNT];

    if (v40)
    {
      double v41 = [v3 objectForKeyedSubscript:IC_A_PREROLL_FRAME_COUNT];
      int v42 = [v41 intValue];

      if ((v42 & 0x80000000) == 0) {
        *(_DWORD *)(a2 + 80) = v42 + 1;
      }
    }
    id v43 = [v3 objectForKeyedSubscript:IC_A_COLLECT_FEATURE_POINTS];
    *(unsigned char *)(a2 + 72) = [v43 BOOLValue];

    long long v44 = [v3 objectForKeyedSubscript:IC_A_DISABLE_GPU_STABILIZATION];
    *(unsigned char *)(a2 + 73) = [v44 BOOLValue];

    long long v45 = [v3 objectForKeyedSubscript:IC_A_OPTIMIZE_FOR_MEMORY];
    *(unsigned char *)(a2 + 74) = [v45 BOOLValue];
  }
}

void sub_1DD4B1C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  unint64_t v13 = *(void **)(v10 + 48);
  if (v13)
  {
    *(void *)(v10 + 56) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void ICAnalysisInit(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  id v2 = (id)qword_1EBE80590;
  os_signpost_id_t v3 = os_signpost_id_generate(v2);
  os_signpost_id_t v10 = v3;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v4 = (id)qword_1EBE80590;
  long long v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "ICAnalysisInit", (const char *)&unk_1DD51A302, buf, 2u);
  }

  sub_1DD4B17DC(v1, (uint64_t)buf);
  double v6 = [v1 objectForKeyedSubscript:IC_A_RESULT_DELEGATE];
  objc_initWeak(&location, v6);

  objc_copyWeak(&to, &location);
  unint64_t v13 = 0;
  id v11 = &unk_1F38B0720;
  objc_moveWeak(&v12, &to);
  unint64_t v13 = &v11;
  objc_destroyWeak(&to);
  operator new();
}

void sub_1DD4B217C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  sub_1DD4BF614((void *)(v40 - 120));
  objc_destroyWeak(&location);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1DD4B3838((os_signpost_id_t *)(v40 - 176));

  _Unwind_Resume(a1);
}

void sub_1DD4B2274(CMTime *a1, uint64_t a2)
{
  memset(&v7, 0, sizeof(v7));
  CMTime lhs = *a1;
  CMTime rhs = *(CMTime *)a2;
  CMTimeSubtract(&v7, &lhs, &rhs);
  CMTime time = v7;
  CMTimeGetSeconds(&time);
  CMTime v3 = *(CMTime *)(a2 + 24);
  CMTimeGetSeconds(&v3);
}

uint64_t ICAnalysisStopAndGetResult(uint64_t a1, void *a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v4 = (id)qword_1EBE80590;
  os_signpost_id_t v5 = os_signpost_id_generate(v4);
  os_signpost_id_t v16 = v5;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  double v6 = (id)qword_1EBE80590;
  CMTime v7 = v6;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "ICAnalysisStopAndGetResult", (const char *)&unk_1DD51A302, buf, 2u);
  }

  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + 232);
    if (v8)
    {
      if ((sub_1DD4E7BC4(*(void *)(a1 + 232), 0, 1) & 1) == 0) {
        sub_1DD4E7D10(v8);
      }
      while (1)
      {
        unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v8 + 136));
        if ((v9 & 1) == 0) {
          break;
        }
        usleep(0x3E8u);
      }
      float64x2_t v18 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)(a1 + 48)));
      operator new();
    }
    uint64_t v19 = *MEMORY[0x1E4F28228];
    v20[0] = @"Analysis is already complete";
    id v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
    if (a2)
    {
      *a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:-1 userInfo:v12];
    }
    if (qword_1EBE80588 != -1) {
      dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
    }
    unint64_t v13 = (id)qword_1EBE80590;
    uint64_t v14 = v13;
    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v14, OS_SIGNPOST_EVENT, v16, "ICAnalysisStopAndGetResult", "IC_ERROR_UNSPECIFIED", buf, 2u);
    }
  }
  else
  {
    if (a2)
    {
      *a2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:0];
    }
    if (qword_1EBE80588 != -1) {
      dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
    }
    os_signpost_id_t v10 = (id)qword_1EBE80590;
    id v11 = v10;
    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v11, OS_SIGNPOST_EVENT, v16, "ICAnalysisStopAndGetResult", "IC_ERROR_BAD_INPUT", buf, 2u);
    }
  }
  sub_1DD4B39C8(&v16);
  return 0;
}

void sub_1DD4B2AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  sub_1DD4B39C8((os_signpost_id_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ICAnalysisAddFrame(uint64_t a1, __CVBuffer *a2, long long *a3, void *a4, void *a5)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  id v9 = a4;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  os_signpost_id_t v10 = (id)qword_1EBE80590;
  os_signpost_id_t v11 = os_signpost_id_generate(v10);
  os_signpost_id_t v31 = v11;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  id v12 = (id)qword_1EBE80590;
  unint64_t v13 = v12;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "ICAnalysisAddFrame", (const char *)&unk_1DD51A302, buf, 2u);
  }

  if (a1 && a2 && (*((unsigned char *)a3 + 12) & 1) != 0)
  {
    uint64_t v18 = *(void *)(a1 + 232);
    if (v18)
    {
      uint64_t v19 = *(void *)(a1 + 240);
      if (!v19)
      {
        CGRect CleanRect = CVImageBufferGetCleanRect(a2);
        uint64_t width = (int)CleanRect.size.width;
        uint64_t height = (int)CleanRect.size.height;
        *(void *)(v18 + 32) = width | (height << 32);
        *(_DWORD *)(a1 + 48) = width;
        *(_DWORD *)(a1 + 52) = height;
        uint64_t v19 = *(void *)(a1 + 240);
      }
      long long v29 = *a3;
      uint64_t v30 = *((void *)a3 + 2);
      if (!sub_1DD4E2564(a2, (uint64_t)&v29, v19, v18, v9))
      {
        ++*(void *)(a1 + 240);
        uint64_t v16 = 1;
        goto LABEL_20;
      }
      uint64_t v33 = *MEMORY[0x1E4F28228];
      long long v34 = @"Error or cancelation while adding frame to be analyzed";
      unint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v34 forKeys:&v33 count:1];
      if (a5)
      {
        *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:-1 userInfo:v22];
      }
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      unint64_t v23 = (id)qword_1EBE80590;
      unint64_t v24 = v23;
      os_signpost_id_t v25 = v31;
      if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v24, OS_SIGNPOST_EVENT, v25, "ICAnalysisAddFrame", "ANALYSIS_FAILED", buf, 2u);
      }
    }
    else
    {
      uint64_t v35 = *MEMORY[0x1E4F28228];
      v36[0] = @"Analysis is already complete";
      id v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v36 forKeys:&v35 count:1];
      if (a5)
      {
        *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:-1 userInfo:v26];
      }
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      double v27 = (id)qword_1EBE80590;
      long long v28 = v27;
      if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v27))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v28, OS_SIGNPOST_EVENT, v31, "ICAnalysisAddFrame", "IC_ERROR_UNSPECIFIED", buf, 2u);
      }
    }
  }
  else
  {
    if (a5)
    {
      *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:0];
    }
    if (qword_1EBE80588 != -1) {
      dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
    }
    uint64_t v14 = (id)qword_1EBE80590;
    double v15 = v14;
    if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v15, OS_SIGNPOST_EVENT, v31, "ICAnalysisAddFrame", "IC_ERROR_BAD_INPUT", buf, 2u);
    }
  }
  uint64_t v16 = 0;
LABEL_20:
  sub_1DD4B3900(&v31);

  return v16;
}

void sub_1DD4B2FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  sub_1DD4B3900((os_signpost_id_t *)va);
  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_1DD4B3028(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  id v2 = (id)qword_1EBE80590;
  CMTime v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)double v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICAnalyzeInputMotion", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

void ICSynthesizeAnalysis(void *a1)
{
  id v1 = a1;
  operator new();
}

void sub_1DD4B3210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4B3250(void *a1, uint64_t a2)
{
  id v3 = a1;
  os_signpost_id_t v4 = v3;
  if (v3)
  {
    os_signpost_id_t v5 = [v3 objectForKeyedSubscript:IC_A_SOURCE_SIZE];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || (size.double width = 0.0, size.height = 0.0, !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v5, &size)))
    {
      uint64_t v13 = 0;
LABEL_21:

      goto LABEL_22;
    }
    sub_1DD4B473C(v4, (uint64_t)&v36);
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    if (v38)
    {
      if (!v37)
      {
        uint64_t v13 = 0;
LABEL_20:
        *(void *)&v41.origin.double x = &v34;
        sub_1DD4BEE80((void ***)&v41);
        goto LABEL_21;
      }
      memset(&v41, 0, 24);
      double v6 = [v4 objectForKeyedSubscript:IC_A_FRAMEINSTRUCTIONS];
      sub_1DD4B58DC((uint64_t *)&v34, v6, v36, v37, 0, 0, (uint64_t *)&v41);

      if (CGRectIsNull(v39))
      {
        double y = 0.0;
        double width = size.width;
        double height = size.height;
        double v10 = size.height;
        double v11 = size.width;
        double x = 0.0;
      }
      else
      {
        double x = v39.origin.x;
        double y = v39.origin.y;
        double v11 = v39.size.width;
        double v10 = v39.size.height;
        double width = size.width;
        double height = size.height;
      }
      sub_1DD4D22B4(a2 + 96, &v41, 0, width, height, x, y, v11, v10);
      int v42 = &v41;
      sub_1DD4BEE80((void ***)&v42);
    }
    else
    {
      uint64_t v14 = [v4 objectForKeyedSubscript:IC_A_FRAMEINSTRUCTIONS];
      sub_1DD4B58DC((uint64_t *)&v34, v14, v36, v37, 0, 0, 0);
    }
    long long v15 = v34;
    id v16 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v17 = [MEMORY[0x1E4F29238] valueWithBytes:&size objCType:"{CGSize=dd}"];
    [v16 setObject:v17 forKeyedSubscript:IC_A_STAT_MOVIE_DIMENSIONS];

    uint64_t v18 = [NSNumber numberWithInt:0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)&v15 + 1) - v15) >> 4)];
    [v16 setObject:v18 forKeyedSubscript:IC_A_STAT_FRAME_COUNT];

    *(unsigned char *)(a2 + 8) = 1;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(a2 + 88) = _D0;
    *(int32x2_t *)(a2 + 48) = vmovn_s64(vcvtq_s64_f64((float64x2_t)size));
    sub_1DD4BF1AC((uint64_t *)(a2 + 24));
    *(_OWORD *)(a2 + 24) = v34;
    *(void *)(a2 + 40) = v35;
    uint64_t v35 = 0;
    long long v34 = 0uLL;
    unint64_t v24 = (void **)(a2 + 16);
    objc_storeStrong((id *)(a2 + 16), v16);
    if (!CGRectIsNull(v39))
    {
      double v25 = v39.origin.x;
      double v26 = v39.origin.y;
      double v27 = v39.size.width;
      double v28 = v39.size.height;
      CGRect v41 = v39;
      uint64_t v29 = *(void *)(a2 + 24);
      if (v29 != *(void *)(a2 + 32))
      {
        do
        {
          sub_1DD4B6288(v29, v29, v25, v26);
          v29 += 304;
        }
        while (v29 != *(void *)(a2 + 32));
        *(_DWORD *)(a2 + 48) = (int)v27;
        *(_DWORD *)(a2 + 52) = (int)v28;
        if (*(void *)(a2 + 16))
        {
          uint64_t v30 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:");
          os_signpost_id_t v31 = [MEMORY[0x1E4F29238] valueWithBytes:&v41.size objCType:"{CGSize=dd}"];
          [v30 setObject:v31 forKeyedSubscript:IC_A_STAT_MOVIE_DIMENSIONS];

          id v32 = *v24;
          *unint64_t v24 = v30;
        }
      }
    }

    uint64_t v13 = 1;
    goto LABEL_20;
  }
  uint64_t v13 = 0;
LABEL_22:

  return v13;
}

void sub_1DD4B35D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a9;
  sub_1DD4BEE80(&a23);

  _Unwind_Resume(a1);
}

void ICSynthesizeCorrections(void *a1)
{
  id v1 = a1;
  operator new();
}

void sub_1DD4B37E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_1DD4B3838(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v2 = (id)qword_1EBE80590;
  id v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)double v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICAnalysisInit", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

os_signpost_id_t *sub_1DD4B3900(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v2 = (id)qword_1EBE80590;
  id v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)double v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICAnalysisAddFrame", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

os_signpost_id_t *sub_1DD4B39C8(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v2 = (id)qword_1EBE80590;
  id v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)double v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICAnalysisStopAndGetResult", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

uint64_t ICLiveAnalysisApplyFrameCorrection(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!sub_1DD4AEEF0(a1)) {
    return 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = (_OWORD *)(a1 + 256);
  uint64_t v18 = a1 + 256;
  do
  {
    uint64_t v19 = 0;
    long long v20 = a3;
    do
    {
      uint64_t v21 = 0;
      double v22 = 0.0;
      unint64_t v23 = v20;
      do
      {
        double v24 = *v23;
        v23 += 3;
        double v22 = v22 + *(double *)(v18 + v21) * v24;
        v21 += 8;
      }
      while (v21 != 24);
      *((double *)v33 + 3 * v16 + v19++) = v22;
      ++v20;
    }
    while (v19 != 3);
    ++v16;
    v18 += 24;
  }
  while (v16 != 3);
  uint64_t v25 = 0;
  long long v26 = v33[3];
  *(_OWORD *)(a1 + 288) = v33[2];
  *(_OWORD *)(a1 + 304) = v26;
  *(void *)(a1 + 320) = v34;
  long long v27 = v33[1];
  *uint64_t v17 = v33[0];
  *(_OWORD *)(a1 + 272) = v27;
  double v28 = (const double *)(a1 + 320);
  float64x2_t v29 = vld1q_dup_f64(v28);
  do
  {
    v17[v25] = vdivq_f64((float64x2_t)v17[v25], v29);
    ++v25;
  }
  while (v25 != 4);
  *(void *)(a1 + 320) = 0x3FF0000000000000;
  id v30 = *(id *)(a1 + 248);
  [v30 setHomographyMatrix:v17];
  uint64_t v31 = objc_msgSend(v30, "ResampleCVPixels:clipToRect:outputSize:pixelBufferPool:", a2, a4, a5, a6, a7, a8, a7, a8);

  return v31;
}

void sub_1DD4B3C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double *ICGetCorrectionsResultOptionalData(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  os_signpost_id_t v4 = v3;
  os_signpost_id_t v5 = 0;
  if (a1 && v3)
  {
    if ([(id)IC_D_L1_CONSTRAINT_VIOLATIONS isEqualToString:v3])
    {
      os_signpost_id_t v5 = *(double **)(a1 + 240);
      if (v5)
      {
        double v6 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:(uint64_t)(*((void *)v5 + 2) - *((void *)v5 + 1)) >> 3];
        uint64_t v7 = *((void *)v5 + 1);
        if (*((void *)v5 + 2) != v7)
        {
          unint64_t v8 = 0;
          unsigned int v9 = 1;
          do
          {
            double v10 = [NSNumber numberWithDouble:*(double *)(v7 + 8 * v8)];
            [v6 addObject:v10];

            unint64_t v8 = v9;
            uint64_t v7 = *((void *)v5 + 1);
            ++v9;
          }
          while (v8 < (*((void *)v5 + 2) - v7) >> 3);
        }
        uint64_t v18 = IC_D_L1_CROP_CONSTRAINT_VIOLATION;
        double v11 = [NSNumber numberWithDouble:*v5];
        uint64_t v19 = IC_D_L1_SALIENCY_CONSTRAINT_VIOLATION;
        unint64_t v23 = v11;
        double v24 = v6;
        os_signpost_id_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v18 count:2];
      }
    }
    else if ([(id)IC_D_L1_SMOOTHNESS_METRICS isEqualToString:v4])
    {
      os_signpost_id_t v5 = *(double **)(a1 + 248);
      if (v5)
      {
        uint64_t v18 = IC_D_L1_OBJECTIVE;
        id v12 = [NSNumber numberWithDouble:*v5];
        unint64_t v23 = v12;
        uint64_t v19 = IC_D_L1_CORRECTION_MAGNITUDE;
        uint64_t v13 = [NSNumber numberWithDouble:v5[1]];
        double v24 = v13;
        uint64_t v20 = IC_D_L1_FIRST_DERIV;
        uint64_t v14 = [NSNumber numberWithDouble:v5[4]];
        uint64_t v25 = v14;
        uint64_t v21 = IC_D_L1_SECOND_DERIV;
        long long v15 = [NSNumber numberWithDouble:v5[5]];
        long long v26 = v15;
        uint64_t v22 = IC_D_L1_THIRD_DERIV;
        uint64_t v16 = [NSNumber numberWithDouble:v5[6]];
        long long v27 = v16;
        os_signpost_id_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v18 count:5];
      }
    }
    else
    {
      os_signpost_id_t v5 = 0;
    }
  }

  return v5;
}

void sub_1DD4B3ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ICCalcCinematicL1Init(void *a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  unint64_t v8 = (id)qword_1EBE80590;
  os_signpost_id_t v9 = os_signpost_id_generate(v8);
  os_signpost_id_t v12 = v9;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  double v10 = (id)qword_1EBE80590;
  double v11 = v10;
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v9, "ICCalcCinematicL1_Init", (const char *)&unk_1DD51A302, buf, 2u);
  }

  operator new();
}

void sub_1DD4B4674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id location, uint64_t a14, os_signpost_id_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_1DD4BF1E8(&a17);
  objc_destroyWeak(&location);
  sub_1DD4BF1E8(&a27);
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  sub_1DD4B4EFC(&a15);

  _Unwind_Resume(a1);
}

void sub_1DD4B473C(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 0;
  os_signpost_id_t v4 = (_OWORD *)MEMORY[0x1E4F1DB20];
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *(_OWORD *)(a2 + 8) = *MEMORY[0x1E4F1DB20];
  *(_OWORD *)(a2 + 24) = v5;
  id v15 = v3;
  id v6 = [v3 objectForKeyedSubscript:IC_A_HOMOGRAPHIES_INVERTED];
  id v7 = v6;
  if (v6) {
    *(unsigned char *)a2 = [v6 BOOLValue];
  }
  unint64_t v8 = [v15 objectForKeyedSubscript:IC_A_HOMOGRAPHIES_MAP_TO_REFERENCE];
  os_signpost_id_t v9 = v8;
  if (v8) {
    *(unsigned char *)(a2 + 1) = [v8 BOOLValue];
  }
  double v10 = [v15 objectForKeyedSubscript:IC_A_CALC_4DOF_POSES];
  double v11 = v10;
  if (v10) {
    *(unsigned char *)(a2 + 2) = [v10 BOOLValue];
  }
  CFDictionaryRef v12 = [v15 objectForKeyedSubscript:IC_A_REQUESTED_CROP_RECT];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v13 = a2 + 8;
    if (!CGRectMakeWithDictionaryRepresentation(v12, (CGRect *)v13))
    {
      long long v14 = v4[1];
      *(_OWORD *)uint64_t v13 = *v4;
      *(_OWORD *)(v13 + 16) = v14;
    }
  }
}

void sub_1DD4B4880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4B48D0(void *a1, uint64_t a2)
{
  id v3 = a1;
  os_signpost_id_t v4 = v3;
  if (a2)
  {
    uint64_t v5 = [v3 count];
    if (v5)
    {
      id v6 = [v4 objectAtIndexedSubscript:v5 - 1];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v7 = [v6 objectForKeyedSubscript:IC_A_FRAMETRANSFORM_HOMOGRAPHY];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && [v7 count] == 9)
        {
          uint64_t v8 = 0;
          while (1)
          {
            os_signpost_id_t v9 = [v7 objectAtIndexedSubscript:v8];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              break;
            }
            [v9 doubleValue];
            *(void *)(a2 + 8 * v8) = v10;

            if (++v8 == 9)
            {
              a2 = 1;
              goto LABEL_14;
            }
          }
        }
        a2 = 0;
LABEL_14:
      }
      else
      {
        a2 = 0;
      }
    }
    else
    {
      a2 = 0;
    }
  }

  return a2;
}

void sub_1DD4B4A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD4B4A54(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  os_signpost_id_t v4 = v3;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)a2 = _D0;
  *(void *)(a2 + 8) = -1;
  *(_DWORD *)(a2 + 16) = -1;
  *(unsigned char *)(a2 + 20) = 0;
  *(void *)(a2 + 24) = -4294967255;
  *(void *)(a2 + 32) = 0xFFFFFFFFLL;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v3)
  {
    uint64_t v10 = [v3 objectForKeyedSubscript:IC_C_CROP_FRACTION];
    double v11 = v10;
    if (v10)
    {
      [v10 floatValue];
      *(_DWORD *)a2 = v12;
    }
    uint64_t v13 = [v4 objectForKeyedSubscript:IC_C_CROP_ASPECT_RATIO];

    if (v13)
    {
      [v13 floatValue];
      *(_DWORD *)(a2 + 4) = v14;
    }
    id v15 = [v4 objectForKeyedSubscript:IC_C_FIRST_INDEX];

    if (v15) {
      *(_DWORD *)(a2 + 8) = [v15 intValue];
    }
    uint64_t v16 = [v4 objectForKeyedSubscript:IC_C_LAST_INDEX];

    if (v16) {
      *(_DWORD *)(a2 + 12) = [v16 intValue];
    }
    uint64_t v17 = [v4 objectForKeyedSubscript:IC_C_REF_INDEX];

    if (v17) {
      *(_DWORD *)(a2 + 16) = [v17 intValue];
    }
    uint64_t v18 = [v4 objectForKeyedSubscript:IC_C_KERNEL_LENGTH];

    if (v18) {
      *(_DWORD *)(a2 + 24) = [v18 intValue];
    }
    uint64_t v19 = [v4 objectForKeyedSubscript:IC_C_L1_WINDOW_LENGTH];

    if (v19) {
      *(_DWORD *)(a2 + 28) = [v19 intValue];
    }
    uint64_t v20 = [v4 objectForKeyedSubscript:IC_C_L1_WINDOW_STRIDE];

    if (v20) {
      *(_DWORD *)(a2 + 32) = [v20 intValue];
    }
    uint64_t v21 = [v4 objectForKeyedSubscript:IC_C_DISABLE_GAUSSIAN];
    *(unsigned char *)(a2 + 20) = [v21 BOOLValue];

    uint64_t v22 = [v4 objectForKeyedSubscript:IC_C_DISABLE_CROP];
    *(unsigned char *)(a2 + 36) = [v22 BOOLValue];

    unint64_t v23 = [v4 objectForKeyedSubscript:IC_C_FREE_ASPECT_RATIO];
    *(unsigned char *)(a2 + 37) = [v23 BOOLValue];

    double v24 = [v4 objectForKeyedSubscript:IC_C_L1_USE_4DOF_POSES];
    *(unsigned char *)(a2 + 38) = [v24 BOOLValue];

    uint64_t v25 = [v4 objectForKeyedSubscript:IC_C_L1_DISABLE_SIDELENGTH_CONSTRAINT];
    *(unsigned char *)(a2 + 39) = [v25 BOOLValue];

    long long v26 = [v4 objectForKeyedSubscript:IC_C_L1_DISABLE_AREA_CONSTRAINT];
    *(unsigned char *)(a2 + 40) = [v26 BOOLValue];

    long long v27 = [v4 objectForKeyedSubscript:IC_A_RESULT_DELEGATE];

    if (v27)
    {
      uint64_t v28 = [v4 objectForKeyedSubscript:IC_A_RESULT_DELEGATE];
      objc_initWeak(&location, v28);

      objc_copyWeak(&v29, &location);
      objc_moveWeak(&to, &v29);
      uint64_t v34 = 0;
      id v32 = &unk_1F38AFB80;
      objc_moveWeak(&v33, &to);
      uint64_t v34 = &v32;
      objc_destroyWeak(&to);
      sub_1DD4BC05C(&v32, (void *)(a2 + 48));
      sub_1DD4BF1E8(&v32);
      objc_destroyWeak(&v29);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1DD4B4E2C(_Unwind_Exception *a1)
{
  sub_1DD4BF1E8((void *)(v2 + 48));
  _Unwind_Resume(a1);
}

void *sub_1DD4B4E88(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  sub_1DD4C04E4((uint64_t)v4, a2);
  sub_1DD4BC05C(v4, a1);
  sub_1DD4BF1E8(v4);
  return a1;
}

os_signpost_id_t *sub_1DD4B4EFC(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v2 = (id)qword_1EBE80590;
  id v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)id v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCalcCinematicL1_Init", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

uint64_t ICCalcCinematicL1AddData(uint64_t a1, void *a2, void *a3)
{
  v71[4] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v52 = a3;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  id v6 = (id)qword_1EBE80590;
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  os_signpost_id_t v69 = v7;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v8 = (id)qword_1EBE80590;
  os_signpost_id_t v9 = v8;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "ICCalcCinematicL1_AddData", (const char *)&unk_1DD51A302, buf, 2u);
  }

  if (a1)
  {
    if (!v5)
    {
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      uint64_t v28 = (id)qword_1EBE80590;
      uint64_t v25 = v28;
      os_signpost_id_t v29 = v69;
      if (v69 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v28)) {
        goto LABEL_52;
      }
      *(_WORD *)buf = 0;
      goto LABEL_51;
    }
    uint64_t v10 = *(void *)(a1 + 344);
    double v11 = (uint64_t *)(v10 + 24);
    uint64_t v12 = *(void *)(v10 + 24);
    uint64_t v13 = *(void *)(v10 + 32);
    if (*(unsigned char *)(a1 + 234))
    {
      int v14 = *(unsigned __int8 *)(a1 + 233);
      *(void *)buf = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      BOOL v15 = !sub_1DD4B58DC(v11, v5, *(unsigned __int8 *)(a1 + 232), v14, (double *)(a1 + 272), 0, (uint64_t *)buf);
      if (!v14) {
        LOBYTE(v15) = 1;
      }
      if (!v15)
      {
        id v51 = v5;
        uint64_t v16 = *(void *)(a1 + 344);
        int v18 = *(_DWORD *)(v16 + 48);
        int v17 = *(_DWORD *)(v16 + 52);
        BOOL IsNull = CGRectIsNull(*(CGRect *)(a1 + 240));
        double v20 = 0.0;
        double v21 = (double)v17;
        double v22 = (double)v18;
        double v23 = 0.0;
        if (!IsNull)
        {
          double v23 = *(double *)(a1 + 240);
          double v20 = *(double *)(a1 + 248);
          double v22 = *(double *)(a1 + 256);
          double v21 = *(double *)(a1 + 264);
        }
        sub_1DD4D22B4(*(void *)(a1 + 344) + 96, buf, a1 + 272, (double)v18, (double)v17, v23, v20, v22, v21);
        *(void *)id v55 = buf;
        sub_1DD4BEE80((void ***)v55);
        id v5 = v51;
        goto LABEL_29;
      }
      *(void *)id v55 = buf;
      sub_1DD4BEE80((void ***)v55);
    }
    else if (sub_1DD4B58DC(v11, v5, *(unsigned __int8 *)(a1 + 232), *(unsigned __int8 *)(a1 + 233), (double *)(a1 + 272), 0, 0))
    {
LABEL_29:
      if (sub_1DD4B48D0(v5, a1 + 272))
      {
        uint64_t v49 = *(void *)(v10 + 24);
        uint64_t v50 = *(void *)(v10 + 32);
        unint64_t v30 = 0x86BCA1AF286BCA1BLL * ((v13 - v12) >> 4);
        if (!CGRectIsNull(*(CGRect *)(a1 + 240)))
        {
          for (uint64_t i = *(void *)(v10 + 24) + 304 * v30; i != *(void *)(v10 + 32); i += 304)
            sub_1DD4B6288(i, i, *(double *)(a1 + 240), *(double *)(a1 + 248));
        }
        uint64_t v25 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:*(void *)(*(void *)(a1 + 344) + 16)];
        id v32 = [NSNumber numberWithInt:678152731* ((*(void *)(*(void *)(a1 + 344) + 32) - *(void *)(*(void *)(a1 + 344) + 24)) >> 4)];
        [v25 setObject:v32 forKeyedSubscript:IC_A_STAT_FRAME_COUNT];

        objc_storeStrong((id *)(*(void *)(a1 + 344) + 16), v25);
        uint64_t v33 = 0x86BCA1AF286BCA1BLL * ((v50 - v49) >> 4) - v30;
        *(void *)buf = 0;
        uint64_t v62 = 0;
        v65[0] = 0;
        v65[1] = 0;
        uint64_t v63 = 0;
        double v64 = v65;
        *(_OWORD *)CGSize v66 = 0u;
        *(_OWORD *)CGRect v67 = 0u;
        long long v68 = 0u;
        uint64_t v27 = sub_1DD4F1124((uint64_t)buf, v52, *(void *)(*(void *)(a1 + 344) + 48), v33);
        if (v27)
        {
          if (qword_1EBE80588 != -1) {
            dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
          }
          uint64_t v34 = (id)qword_1EBE80590;
          uint64_t v35 = v34;
          os_signpost_id_t v36 = v69;
          if (v69 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v34))
          {
            *(_WORD *)id v55 = 0;
            _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v35, OS_SIGNPOST_EVENT, v36, "ICCalcCinematicL1_AddData", "IC_ERROR_BAD_INPUT", v55, 2u);
          }
        }
        else
        {
          sub_1DD4F1D08(a1 + 352, (uint64_t)buf, 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4));
          sub_1DD4F1D04(v55, a1 + 352, v30, v33);
          id v40 = v5;
          sub_1DD4B64C8(v11, v30, v33, v54);
          LODWORD(v70) = 0;
          CGRect v41 = *(_DWORD **)(a1 + 584);
          uint64_t v42 = *(void *)(a1 + 344);
          unint64_t v43 = *(void *)(v42 + 48);
          sub_1DD4C04E4((uint64_t)v71, a1 + 552);
          sub_1DD4F1FE8(a1 + 448, v41, v54, v42 + 96, v43, (uint64_t *)v55, (uint64_t)v71, (int *)&v70);
          sub_1DD4BF1E8(v71);
          uint64_t v27 = v70;
          if (v70)
          {
            if (v70 == 3)
            {
              long long v44 = sub_1DD4B1780();
              long long v45 = v44;
              os_signpost_id_t v46 = v69;
              if (v69 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v44))
              {
                *(_WORD *)double v53 = 0;
                _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v45, OS_SIGNPOST_EVENT, v46, "ICCalcCinematicL1_AddData", "IC_ERROR_BAD_INPUT", v53, 2u);
              }
              uint64_t v27 = 10;
            }
            else
            {
              id v47 = sub_1DD4B1780();
              long long v45 = v47;
              os_signpost_id_t v48 = v69;
              if (v69 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
              {
                *(_WORD *)double v53 = 0;
                _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v45, OS_SIGNPOST_EVENT, v48, "ICCalcCinematicL1_AddData", "IC_ERROR_CALCULATING_CORRECTIONS", v53, 2u);
              }
              uint64_t v27 = 9;
            }
          }
          v70 = v54;
          sub_1DD4BEE80((void ***)&v70);
          if (__p)
          {
            double v60 = __p;
            operator delete(__p);
          }
          if (v57)
          {
            CGFloat v58 = v57;
            operator delete(v57);
          }
          sub_1DD4BDF88((uint64_t)v56, v56[1]);
          v54[0] = (void **)v55;
          sub_1DD4BDB34(v54);
          id v5 = v40;
        }
        if (v67[1])
        {
          *(void **)&long long v68 = v67[1];
          operator delete(v67[1]);
        }
        if (v66[0])
        {
          v66[1] = v66[0];
          operator delete(v66[0]);
        }
        sub_1DD4BDF88((uint64_t)&v64, v65[0]);
        *(void *)id v55 = buf;
        sub_1DD4BDB34((void ***)v55);
        goto LABEL_53;
      }
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      char v38 = (id)qword_1EBE80590;
      uint64_t v25 = v38;
      os_signpost_id_t v29 = v69;
      if (v69 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v38))
      {
LABEL_52:
        uint64_t v27 = 10;
        goto LABEL_53;
      }
      *(_WORD *)buf = 0;
LABEL_51:
      _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v25, OS_SIGNPOST_EVENT, v29, "ICCalcCinematicL1_AddData", "IC_ERROR_BAD_INPUT", buf, 2u);
      goto LABEL_52;
    }
    if (qword_1EBE80588 != -1) {
      dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
    }
    unsigned __int8 v37 = (id)qword_1EBE80590;
    uint64_t v25 = v37;
    os_signpost_id_t v29 = v69;
    if (v69 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v37)) {
      goto LABEL_52;
    }
    *(_WORD *)buf = 0;
    goto LABEL_51;
  }
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  double v24 = (id)qword_1EBE80590;
  uint64_t v25 = v24;
  os_signpost_id_t v26 = v69;
  if (v69 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v25, OS_SIGNPOST_EVENT, v26, "ICCalcCinematicL1_AddData", "IC_ERROR_CINEMATIC_SESSION_MALFORMED", buf, 2u);
  }
  uint64_t v27 = 3;
LABEL_53:

  sub_1DD4B65A0(&v69);
  return v27;
}

void sub_1DD4B580C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_1DD4BF1E8((void *)(v31 - 128));
  *(void *)(v31 - 136) = &a14;
  sub_1DD4BEE80((void ***)(v31 - 136));
  sub_1DD4B653C((uint64_t)&a17);
  sub_1DD4B653C((uint64_t)&a29);

  sub_1DD4B65A0((os_signpost_id_t *)(v31 - 144));
  _Unwind_Resume(a1);
}

BOOL sub_1DD4B58DC(uint64_t *a1, void *a2, int a3, int a4, double *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  id v99 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t v10 = [v99 count]) != 0)
  {
    long long v115 = 0uLL;
    *(void *)&long long v116 = 0;
    sub_1DD4BC2C8((uint64_t *)&v115, v10);
    unint64_t v11 = 0;
    LODWORD(v102) = 0;
    while (1)
    {
      uint64_t v12 = [v99 objectAtIndexedSubscript:v11];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        long long v100 = 0uLL;
        uint64_t v101 = 0;
        goto LABEL_18;
      }
      uint64_t v13 = [v12 objectForKeyedSubscript:IC_A_FRAMETRANSFORM_HOMOGRAPHY];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || [v13 count] != 9) {
        break;
      }
      uint64_t v14 = 0;
      uint64_t v124 = 0;
      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      do
      {
        BOOL v15 = [v13 objectAtIndexedSubscript:v14];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          long long v100 = 0uLL;
          uint64_t v101 = 0;

          goto LABEL_18;
        }
        [v15 doubleValue];
        *((void *)&v120 + v14) = v16;

        ++v14;
      }
      while (v14 != 9);
      memset(v111, 0, 24);
      CFDictionaryRef v17 = [v12 objectForKeyedSubscript:IC_A_FRAMETRANSFORM_RAWTIME];
      CMTimeMakeFromDictionary((CMTime *)v111, v17);

      if ((v111[12] & 1) == 0) {
        break;
      }
      uint64_t v18 = *((void *)&v115 + 1);
      if (*((void *)&v115 + 1) >= (unint64_t)v116)
      {
        uint64_t v19 = sub_1DD4BC69C((uint64_t *)&v115, (int *)&v102, (uint64_t)&v120);
      }
      else
      {
        sub_1DD4BC7C4(*((uint64_t *)&v115 + 1), SLODWORD(v102), (uint64_t)&v120);
        uint64_t v19 = v18 + 304;
      }
      *((void *)&v115 + 1) = v19;
      *(_DWORD *)(v19 - 136) = 1065353216;
      *(unsigned char *)(v19 - 232) = 1;
      *(unsigned char *)(v19 - 4) = 1;
      long long v20 = *(_OWORD *)v111;
      *(void *)(v19 - 176) = *(void *)&v111[16];
      *(_OWORD *)(v19 - 192) = v20;

      unint64_t v11 = SLODWORD(v102) + 1;
      ++LODWORD(v102);
      if (v10 <= v11)
      {
        long long v100 = v115;
        uint64_t v101 = v116;
        long long v115 = 0uLL;
        *(void *)&long long v116 = 0;
        goto LABEL_19;
      }
    }
    long long v100 = 0uLL;
    uint64_t v101 = 0;

LABEL_18:
LABEL_19:
    *(void *)&long long v120 = &v115;
    sub_1DD4BEE80((void ***)&v120);
  }
  else
  {
    long long v100 = 0uLL;
    uint64_t v101 = 0;
  }

  long long v21 = v100;
  if (*((void *)&v100 + 1) == (void)v100) {
    goto LABEL_85;
  }
  if (a7 && &v100 != (long long *)a7) {
    sub_1DD4BF004(a7, v100, *((uint64_t *)&v100 + 1), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)&v100 + 1) - v100) >> 4));
  }
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  unint64_t v24 = (v23 - *a1) / 304;
  BOOL v25 = v23 == *a1;
  if (v23 == *a1)
  {
    sub_1DD4BF1AC(a1);
    double v27 = *(double *)&v100;
    *(_OWORD *)a1 = v100;
    a1[2] = v101;
    uint64_t v101 = 0;
    long long v100 = 0uLL;
    if (!a6) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  uint64_t v26 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)&v100 + 1) - v100) >> 4);
  sub_1DD4BC8B8(a1, a1[1], v100, *((uint64_t *)&v100 + 1), v26);
  if (v24 < v26 + v24)
  {
    uint64_t v33 = (void *)(*a1 + 304 * v24 + 104);
    unint64_t v34 = v24;
    do
    {
      *uint64_t v33 = v34++;
      v33 += 38;
      --v26;
    }
    while (v26);
  }
  if (a6)
  {
LABEL_31:
    uint64_t v35 = 0;
    uint64_t v36 = *a1;
    do
    {
      double v27 = *(double *)(v36 + v35);
      *(double *)(a6 + v35) = v27;
      v35 += 8;
    }
    while (v35 != 72);
  }
LABEL_33:
  if ((a3 & 1) != 0 || a4)
  {
    if (!a3 || (a4 & 1) != 0)
    {
      if (a4)
      {
        if (v23 == v22)
        {
          long long v115 = 0x3FF0000000000000uLL;
          long long v116 = 0uLL;
          long long v117 = 0x3FF0000000000000uLL;
          long long v118 = 0uLL;
          double v119 = 1.0;
        }
        else
        {
          if (!a5) {
            goto LABEL_85;
          }
          long long v54 = *((_OWORD *)a5 + 3);
          long long v117 = *((_OWORD *)a5 + 2);
          long long v118 = v54;
          double v119 = a5[8];
          long long v55 = *((_OWORD *)a5 + 1);
          long long v115 = *(_OWORD *)a5;
          long long v116 = v55;
        }
        uint64_t v56 = *a1;
        if (0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) > v24)
        {
          uint64_t v57 = 304 * v24;
          do
          {
            CGFloat v58 = (double *)(v56 + 304 * v24);
            if (v25)
            {
              long long v116 = *((_OWORD *)v58 + 1);
              long long v117 = *((_OWORD *)v58 + 2);
              long long v118 = *((_OWORD *)v58 + 3);
              double v119 = v58[8];
              long long v115 = *(_OWORD *)v58;
              double *v58 = 1.0;
              v58[1] = 0.0;
              v58[2] = 0.0;
              v58[3] = 0.0;
              v58[4] = 1.0;
              v58[5] = 0.0;
              v58[6] = 0.0;
              v58[7] = 0.0;
              v58[8] = 1.0;
            }
            else
            {
              if (a3)
              {
                double v59 = v58[7];
                double v60 = v58[8];
                double v61 = v58[4];
                double v62 = v58[5];
                double v63 = v61 * v60 - v59 * v62;
                double v102 = v63;
                double v64 = v58[1];
                double v65 = v58[2];
                double v66 = v59 * v65 - v64 * v60;
                double v67 = v64 * v62 - v61 * v65;
                double v103 = v66;
                double v104 = v67;
                double v68 = *v58;
                double v69 = v58[3];
                double v70 = v58[6];
                double v71 = v66 * v69 + *v58 * v63 + v70 * v67;
                if (v71 >= 2.22044605e-16 || v71 <= -2.22044605e-16)
                {
                  double v102 = v63 / v71;
                  double v103 = v66 / v71;
                  double v104 = v67 / v71;
                  double v105 = (v70 * v62 - v69 * v60) / v71;
                  double v106 = (v68 * v60 - v70 * v65) / v71;
                  double v107 = (v69 * v65 - v68 * v62) / v71;
                  double v108 = (v69 * v59 - v70 * v61) / v71;
                  double v109 = (v70 * v64 - v68 * v59) / v71;
                  double v110 = (v68 * v61 - v69 * v64) / v71;
                }
                uint64_t v73 = 0;
                v74 = &v115;
                do
                {
                  uint64_t v75 = 0;
                  v76 = &v102;
                  do
                  {
                    uint64_t v77 = 0;
                    double v78 = 0.0;
                    v79 = v76;
                    do
                    {
                      double v80 = *v79;
                      v79 += 3;
                      double v78 = v78 + *(double *)((char *)v74 + v77) * v80;
                      v77 += 8;
                    }
                    while (v77 != 24);
                    *((double *)&v120 + 3 * v73 + v75++) = v78;
                    ++v76;
                  }
                  while (v75 != 3);
                  ++v73;
                  v74 = (long long *)((char *)v74 + 24);
                }
                while (v73 != 3);
              }
              else
              {
                double v81 = *(double *)&v117 * v119 - *((double *)&v118 + 1) * *((double *)&v117 + 1);
                double v82 = *((double *)&v118 + 1) * *(double *)&v116 - *((double *)&v115 + 1) * v119;
                double v102 = v81;
                double v103 = v82;
                double v83 = *((double *)&v115 + 1) * *((double *)&v117 + 1) - *(double *)&v117 * *(double *)&v116;
                double v104 = v83;
                double v84 = v82 * *((double *)&v116 + 1) + *(double *)&v115 * v81 + *(double *)&v118 * v83;
                if (v84 >= 2.22044605e-16 || v84 <= -2.22044605e-16)
                {
                  double v102 = v81 / v84;
                  double v103 = v82 / v84;
                  double v104 = v83 / v84;
                  double v105 = (*(double *)&v118 * *((double *)&v117 + 1) - *((double *)&v116 + 1) * v119) / v84;
                  double v106 = (*(double *)&v115 * v119 - *(double *)&v118 * *(double *)&v116) / v84;
                  double v107 = (*((double *)&v116 + 1) * *(double *)&v116 - *(double *)&v115 * *((double *)&v117 + 1)) / v84;
                  double v108 = (*((double *)&v116 + 1) * *((double *)&v118 + 1) - *(double *)&v118 * *(double *)&v117) / v84;
                  double v109 = (*(double *)&v118 * *((double *)&v115 + 1) - *(double *)&v115 * *((double *)&v118 + 1)) / v84;
                  double v110 = (*(double *)&v115 * *(double *)&v117 - *((double *)&v116 + 1) * *((double *)&v115 + 1)) / v84;
                }
                uint64_t v86 = 0;
                uint64_t v87 = v56 + v57;
                v88 = &v102;
                do
                {
                  uint64_t v89 = 0;
                  v90 = (double *)v87;
                  do
                  {
                    uint64_t v91 = 0;
                    double v92 = 0.0;
                    long long v93 = v90;
                    do
                    {
                      double v94 = *v93;
                      v93 += 3;
                      double v92 = v92 + v88[v91++] * v94;
                    }
                    while (v91 != 3);
                    *((double *)&v120 + 3 * v86 + v89++) = v92;
                    ++v90;
                  }
                  while (v89 != 3);
                  ++v86;
                  v88 += 3;
                }
                while (v86 != 3);
              }
              long long v112 = v122;
              long long v113 = v123;
              uint64_t v114 = v124;
              *(_OWORD *)uint64_t v111 = v120;
              *(_OWORD *)&v111[16] = v121;
              long long v116 = *((_OWORD *)v58 + 1);
              long long v117 = *((_OWORD *)v58 + 2);
              long long v118 = *((_OWORD *)v58 + 3);
              double v119 = v58[8];
              long long v115 = *(_OWORD *)v58;
              *((_OWORD *)v58 + 1) = v121;
              *((_OWORD *)v58 + 2) = v112;
              *((_OWORD *)v58 + 3) = v113;
              *((void *)v58 + 8) = v114;
              *(_OWORD *)CGFloat v58 = *(_OWORD *)v111;
            }
            BOOL v25 = 0;
            ++v24;
            uint64_t v56 = *a1;
            v57 += 304;
          }
          while (v24 < 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
        }
      }
    }
    else
    {
      uint64_t v37 = *a1;
      if (0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) > v24)
      {
        uint64_t v38 = 304 * v24;
        do
        {
          CGRect v39 = (double *)(v37 + v38);
          double v40 = *(double *)(v37 + v38 + 56);
          double v41 = *(double *)(v37 + v38 + 64);
          double v42 = *(double *)(v37 + v38 + 32);
          double v43 = *(double *)(v37 + v38 + 40);
          double v44 = *(double *)(v37 + v38 + 48);
          double v45 = v42 * v41 - v40 * v43;
          double v46 = *(double *)(v37 + v38);
          double v47 = *(double *)(v37 + v38 + 8);
          double v49 = *(double *)(v37 + v38 + 16);
          double v48 = *(double *)(v37 + v38 + 24);
          double v50 = v40 * v49 - v47 * v41;
          double v51 = v47 * v43 - v42 * v49;
          double v52 = v50 * v48 + v46 * v45 + v44 * v51;
          if (v52 >= 2.22044605e-16 || v52 <= -2.22044605e-16)
          {
            double v45 = v45 / v52;
            double v50 = v50 / v52;
            double v51 = v51 / v52;
            double v28 = (v44 * v43 - v48 * v41) / v52;
            double v27 = (v48 * v40 - v44 * v42) / v52;
            double v29 = (v46 * v41 - v44 * v49) / v52;
            double v30 = (v48 * v49 - v46 * v43) / v52;
            double v31 = (v44 * v47 - v46 * v40) / v52;
            double v32 = (v46 * v42 - v48 * v47) / v52;
          }
          *(double *)(v37 + v38) = v45;
          v39[1] = v50;
          v39[2] = v51;
          v39[3] = v28;
          _OWORD v39[4] = v29;
          v39[5] = v30;
          v39[6] = v27;
          v39[7] = v31;
          v39[8] = v32;
          ++v24;
          uint64_t v37 = *a1;
          v38 += 304;
        }
        while (v24 < 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
      }
    }
  }
LABEL_85:
  *(void *)&long long v120 = &v100;
  sub_1DD4BEE80((void ***)&v120);

  return *((void *)&v21 + 1) != (void)v21;
}

void sub_1DD4B61E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  *(void *)(v37 - 176) = &a35;
  sub_1DD4BEE80((void ***)(v37 - 176));

  _Unwind_Resume(a1);
}

uint64_t sub_1DD4B6288(uint64_t result, uint64_t a2, double a3, double a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v41 = xmmword_1DD511730;
  double v4 = -a3;
  long long v43 = xmmword_1DD511740;
  double v42 = -a3;
  double v44 = -a4;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0x3FF0000000000000;
  double v5 = a4 * 0.0 + 1.0;
  double v6 = a3 * -0.0;
  double v33 = v5;
  double v34 = a3 * -0.0;
  double v7 = a3 + a4 * -0.0;
  double v35 = v7;
  double v8 = v5 + a3 * -0.0 * 0.0 + v7 * 0.0;
  if (v8 >= 2.22044605e-16 || v8 <= -2.22044605e-16)
  {
    double v33 = v5 / v8;
    double v34 = v6 / v8;
    double v35 = v7 / v8;
    double v36 = a4 * -0.0 / v8;
    float64x2_t v10 = vdivq_f64((float64x2_t)xmmword_1DD511740, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
    double v37 = (1.0 - v6) / v8;
    double v38 = (a4 + v4 * 0.0) / v8;
    float64_t v39 = v10.f64[0];
    float64x2_t v40 = v10;
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v33;
    do
    {
      uint64_t v14 = 0;
      double v15 = 0.0;
      uint64_t v16 = v13;
      do
      {
        double v17 = *v16;
        v16 += 3;
        double v15 = v15 + *(double *)(result + v14) * v17;
        v14 += 8;
      }
      while (v14 != 24);
      *((double *)&v48 + 3 * i + v12++) = v15;
      ++v13;
    }
    while (v12 != 3);
    result += 24;
  }
  uint64_t v18 = 0;
  v31[2] = v50;
  v31[3] = v51;
  uint64_t v32 = v52;
  v31[0] = v48;
  v31[1] = v49;
  uint64_t v19 = &v41;
  do
  {
    uint64_t v20 = 0;
    long long v21 = v31;
    do
    {
      uint64_t v22 = 0;
      double v23 = 0.0;
      unint64_t v24 = (double *)v21;
      do
      {
        double v25 = *v24;
        v24 += 3;
        double v23 = v23 + *(double *)((char *)v19 + v22) * v25;
        v22 += 8;
      }
      while (v22 != 24);
      *((double *)&v48 + 3 * v18 + v20++) = v23;
      long long v21 = (_OWORD *)((char *)v21 + 8);
    }
    while (v20 != 3);
    ++v18;
    uint64_t v19 = (long long *)((char *)v19 + 24);
  }
  while (v18 != 3);
  uint64_t v26 = 0;
  long long v27 = v51;
  *(_OWORD *)(a2 + 32) = v50;
  *(_OWORD *)(a2 + 48) = v27;
  *(void *)(a2 + 64) = v52;
  long long v28 = v49;
  *(_OWORD *)a2 = v48;
  *(_OWORD *)(a2 + 16) = v28;
  double v29 = (const double *)(a2 + 64);
  float64x2_t v30 = vld1q_dup_f64(v29);
  do
  {
    *(float64x2_t *)(a2 + v26) = vdivq_f64(*(float64x2_t *)(a2 + v26), v30);
    v26 += 16;
  }
  while (v26 != 64);
  *(void *)(a2 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t *sub_1DD4B64C8@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (int v6 = 678152731 * ((unint64_t)(v5 - v4) >> 4), v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1) {
      int v7 = v6 - a2;
    }
    else {
      int v7 = a3;
    }
    if ((int)(v7 + a2) <= v6) {
      int v8 = v7;
    }
    else {
      int v8 = v6 - a2;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1DD4C057C(a4, v4 + 304 * a2, v4 + 304 * a2 + 304 * v8, v8);
  }
  return result;
}

uint64_t sub_1DD4B653C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  sub_1DD4BDF88(a1 + 24, *(void **)(a1 + 32));
  uint64_t v5 = (void **)a1;
  sub_1DD4BDB34(&v5);
  return a1;
}

os_signpost_id_t *sub_1DD4B65A0(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v2 = (id)qword_1EBE80590;
  id v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCalcCinematicL1_AddData", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

uint64_t ICCalcCinematicL1StopAndGetResult(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  int v6 = (id)qword_1EBE80590;
  os_signpost_id_t v7 = os_signpost_id_generate(v6);
  os_signpost_id_t v13 = v7;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  int v8 = (id)qword_1EBE80590;
  os_signpost_id_t v9 = v8;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "ICCalcCinematicL1_StopAndGetResult", (const char *)&unk_1DD51A302, buf, 2u);
  }

  if (a1)
  {
    sub_1DD4C04E4((uint64_t)v15, a1 + 552);
    sub_1DD4F3BA4();
  }
  if (a3) {
    *a3 = 3;
  }
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  float64x2_t v10 = (id)qword_1EBE80590;
  unint64_t v11 = v10;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v11, OS_SIGNPOST_EVENT, v13, "ICCalcCinematicL1_StopAndGetResult", "IC_ERROR_CINEMATIC_SESSION_MALFORMED", buf, 2u);
  }

  sub_1DD4B6A20(&v13);
  return 0;
}

void sub_1DD4B69D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    sub_1DD50F240(a3);
  }
  sub_1DD4B6A20((os_signpost_id_t *)va);

  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_1DD4B6A20(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v2 = (id)qword_1EBE80590;
  id v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCalcCinematicL1_StopAndGetResult", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

uint64_t ICCalcCinematicL1Corrections(uint64_t a1, void *a2, void *a3, _DWORD *a4)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  id val = a2;
  id v102 = a3;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  os_signpost_id_t v7 = (id)qword_1EBE80590;
  os_signpost_id_t v8 = os_signpost_id_generate(v7);
  os_signpost_id_t v111 = v8;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  os_signpost_id_t v9 = (id)qword_1EBE80590;
  float64x2_t v10 = v9;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(buf.origin.x) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "ICCalcCinematicL1Corrections", (const char *)&unk_1DD51A302, (uint8_t *)&buf, 2u);
  }

  if (sub_1DD4AEEF0(a1))
  {
    sub_1DD4B4A54(v102, (uint64_t)&v132);
    if (v132 == 0.0)
    {
      if (a4) {
        *a4 = 4;
      }
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      unint64_t v11 = (id)qword_1EBE80590;
      uint64_t v12 = v11;
      if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
      {
        LOWORD(buf.origin.x) = 0;
        _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v12, OS_SIGNPOST_EVENT, v111, "ICCalcCinematicL1Corrections", "IC_ERROR_CROP_FRACTION_INVALID", (uint8_t *)&buf, 2u);
      }
      goto LABEL_151;
    }
    if (v132 < 0.0) {
      float v132 = 0.1;
    }
    if ((v134 & 0x80000000) != 0) {
      unsigned int v134 = 0;
    }
    long long v100 = ICGetResultStats((id *)a1);
    double v15 = [v100 objectForKeyedSubscript:IC_A_STAT_FRAME_COUNT];
    int v16 = [v15 intValue];

    int v17 = v135;
    if (v135 == -1 || v135 >= v16)
    {
      int v17 = v16 - 1;
      int v135 = v16 - 1;
    }
    int v18 = v17 + 1;
    if (v134) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v18 == v16;
    }
    int v20 = !v19;
    int v99 = v20;
    long long v21 = (uint64_t *)&v110;
    long long v110 = 0uLL;
    double v109 = (uint64_t *)&v110;
    uint64_t v22 = [v102 objectForKeyedSubscript:IC_C_L1_PATH_CONSTRAINTS];
    BOOL v23 = v22 == 0;

    if (v23) {
      goto LABEL_99;
    }
    unint64_t v24 = [v102 objectForKeyedSubscript:IC_C_L1_PATH_CONSTRAINTS];
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    sub_1DD4BEF24(&v106, *(void *)(a1 + 24), *(void *)(a1 + 32), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4));
    id v25 = v24;
    uint64_t v26 = [v25 objectForKeyedSubscript:IC_A_HOMOGRAPHIES_INVERTED];
    v98 = v26;
    if (v26) {
      int v27 = [v26 BOOLValue];
    }
    else {
      int v27 = 0;
    }
    long long v114 = 0uLL;
    uint64_t v115 = 0;
    long long v28 = [v25 objectForKeyedSubscript:IC_A_FRAMEINSTRUCTIONS];
    BOOL v29 = sub_1DD4B58DC((uint64_t *)&v114, v28, v27, 0, 0, 0, 0);

    if (!v29)
    {
      char v59 = 0;
      goto LABEL_98;
    }
    float64x2_t v30 = [v25 objectForKeyedSubscript:IC_A_FLIP_Y_COORDS];
    double v31 = v30;
    if (v30 && [v30 BOOLValue])
    {
      CFDictionaryRef dict = [v25 objectForKeyedSubscript:IC_A_INPUT_IMAGE_BOUNDS];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog(&cfstr_ErrorFlippingO.isa);
        goto LABEL_96;
      }
      memset(&rect, 0, sizeof(rect));
      if (!CGRectMakeWithDictionaryRepresentation(dict, &rect))
      {
        NSLog(&cfstr_ErrorImageBoun.isa);
        goto LABEL_96;
      }
      time1.value = 0x3FF0000000000000;
      *(void *)&time1.timescale = 0;
      time1.CMTimeEpoch epoch = 0;
      uint64_t v119 = 0;
      long long v120 = (void *)0xBFF0000000000000;
      CGFloat height = rect.size.height;
      long long v122 = 0;
      long long v123 = 0;
      uint64_t v124 = 0x3FF0000000000000;
      uint64_t v32 = v114;
      if (*((void *)&v114 + 1) != (void)v114)
      {
        uint64_t v33 = 0;
        unint64_t v34 = (*((void *)&v114 + 1) - (void)v114) / 304;
        if (v34 <= 1) {
          unint64_t v34 = 1;
        }
        uint64_t v35 = v114;
        do
        {
          uint64_t v36 = 0;
          uint64_t v37 = v35;
          do
          {
            uint64_t v38 = 0;
            p_CMTime time1 = &time1;
            do
            {
              uint64_t v40 = 0;
              double v41 = 0.0;
              p_value = (double *)&p_time1->value;
              do
              {
                double v43 = *p_value;
                p_value += 3;
                double v41 = v41 + *(double *)(v37 + v40) * v43;
                v40 += 8;
              }
              while (v40 != 24);
              *(&buf.origin.x + 3 * v36 + v38++) = v41;
              p_CMTime time1 = (CMTime *)((char *)p_time1 + 8);
            }
            while (v38 != 3);
            ++v36;
            v37 += 24;
          }
          while (v36 != 3);
          uint64_t v44 = 0;
          long long v146 = v128;
          long long v147 = *(_OWORD *)v129;
          v148 = v130[0];
          CGRect v145 = buf;
          uint64_t v45 = &time1;
          do
          {
            uint64_t v46 = 0;
            uint64_t v47 = &v145;
            do
            {
              uint64_t v48 = 0;
              double v49 = 0.0;
              p_CGFloat x = &v47->origin.x;
              do
              {
                double v51 = *p_x;
                p_x += 3;
                double v49 = v49 + *(double *)((char *)&v45->value + v48) * v51;
                v48 += 8;
              }
              while (v48 != 24);
              *(&buf.origin.x + 3 * v44 + v46++) = v49;
              uint64_t v47 = (CGRect *)((char *)v47 + 8);
            }
            while (v46 != 3);
            ++v44;
            ++v45;
          }
          while (v44 != 3);
          uint64_t v52 = 0;
          v152 = v130[0];
          long long v150 = v128;
          long long v151 = *(_OWORD *)v129;
          CGRect time2 = buf;
          float64x2_t v53 = (float64x2_t)vdupq_lane_s64((uint64_t)v130[0], 0);
          do
          {
            *(float64x2_t *)((char *)&time2.origin + v52) = vdivq_f64(*(float64x2_t *)((char *)&time2.origin + v52), v53);
            v52 += 16;
          }
          while (v52 != 64);
          uint64_t v54 = v32 + 304 * v33;
          *(CGSize *)(v54 + 16) = time2.size;
          *(_OWORD *)(v54 + 32) = v150;
          *(_OWORD *)(v54 + 48) = v151;
          *(void *)(v54 + 64) = 0x3FF0000000000000;
          *(CGPoint *)uint64_t v54 = time2.origin;
          ++v33;
          v35 += 304;
        }
        while (v33 != v34);
      }
    }
    CFDictionaryRef dict = [v25 objectForKeyedSubscript:IC_A_REQUESTED_CROP_RECT];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v58 = *((void *)&v114 + 1);
      uint64_t v55 = v114;
      goto LABEL_76;
    }
    memset(&buf, 0, sizeof(buf));
    if (CGRectMakeWithDictionaryRepresentation(dict, &buf))
    {
      uint64_t v55 = *((void *)&v114 + 1);
      if (*((void *)&v114 + 1) == (void)v114)
      {
        uint64_t v58 = *((void *)&v114 + 1);
      }
      else
      {
        uint64_t v56 = 0;
        unint64_t v57 = 0;
        uint64_t v55 = v114;
        do
        {
          sub_1DD4B6288(v55 + v56, v55 + v56, buf.origin.x, buf.origin.y);
          ++v57;
          uint64_t v58 = *((void *)&v114 + 1);
          uint64_t v55 = v114;
          v56 += 304;
        }
        while (v57 < 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)&v114 + 1) - v114) >> 4));
        long long v21 = (uint64_t *)&v110;
      }
LABEL_76:
      if (v58 == v55)
      {
        char v59 = 1;
      }
      else
      {
        CGRect v95 = v31;
        uint64_t v96 = 0;
        unint64_t v60 = 0;
        while (1)
        {
          double v61 = v21;
          double v62 = (CGPoint *)(v55 + 304 * v60);
          CGPoint v63 = v62[7];
          buf.size.double width = v62[8].x;
          buf.origin = v63;
          uint64_t v64 = v106;
          if (v107 == v106) {
            break;
          }
          unint64_t v65 = 0;
          uint64_t v66 = 112;
          while (1)
          {
            *(CGPoint *)&time1.value = buf.origin;
            time1.CMTimeEpoch epoch = *(void *)&buf.size.width;
            double v67 = (CGPoint *)(v64 + v66);
            CGFloat x = v67[1].x;
            time2.origin = *v67;
            time2.size.double width = x;
            if (!CMTimeCompare(&time1, (CMTime *)&time2)) {
              break;
            }
            ++v65;
            uint64_t v64 = v106;
            v66 += 304;
            if (v65 >= 0x86BCA1AF286BCA1BLL * ((v107 - v106) >> 4)) {
              goto LABEL_90;
            }
          }
          if ((v65 & 0x80000000) != 0) {
            break;
          }
          sub_1DD4BD398(&v145, 9uLL);
          *(void *)&CGFloat v69 = v65;
          id location = (id)v65;
          *(void *)&rect.origin.CGFloat x = &location;
          double v70 = sub_1DD4BD454(&v109, (unint64_t *)&location, (uint64_t)&unk_1DD5118E0, (uint64_t **)&rect);
          double v71 = (void *)v70[5];
          if (v71)
          {
            v70[6] = (uint64_t)v71;
            operator delete(v71);
            v70[5] = 0;
            v70[6] = 0;
            v70[7] = 0;
          }
          *(CGPoint *)(v70 + 5) = v145.origin;
          v70[7] = *(void *)&v145.size.width;
          rect.origin.CGFloat x = v69;
          *(void *)&v145.origin.CGFloat x = &rect;
          v72 = sub_1DD4BD454(&v109, (unint64_t *)&rect, (uint64_t)&unk_1DD5118E0, (uint64_t **)&v145);
          uint64_t v73 = 0;
          uint64_t v74 = v72[5];
          uint64_t v55 = v114;
          uint64_t v75 = v114 + v96;
          long long v21 = v61;
          do
          {
            *(void *)(v74 + v73) = *(void *)(v75 + v73);
            v73 += 8;
          }
          while (v73 != 72);
          ++v60;
          v96 += 304;
          char v59 = 1;
          if (v60 >= 0x86BCA1AF286BCA1BLL * ((*((void *)&v114 + 1) - v55) >> 4)) {
            goto LABEL_91;
          }
        }
LABEL_90:
        char v59 = 0;
        long long v21 = v61;
LABEL_91:
        double v31 = v95;
      }
      goto LABEL_97;
    }
    NSLog(&cfstr_ErrorCropRectD.isa);
LABEL_96:
    char v59 = 0;
LABEL_97:

LABEL_98:
    *(void *)&buf.origin.CGFloat x = &v114;
    sub_1DD4BEE80((void ***)&buf);

    *(void *)&buf.origin.CGFloat x = &v106;
    sub_1DD4BEE80((void ***)&buf);

    if ((v59 & 1) == 0)
    {
      if (a4) {
        *a4 = 8;
      }
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      v76 = (id)qword_1EBE80590;
      uint64_t v77 = v76;
      os_signpost_id_t v78 = v111;
      if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v76))
      {
        LOWORD(buf.origin.x) = 0;
        _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v77, OS_SIGNPOST_EVENT, v78, "ICCalcCinematicL1Corrections", "IC_ERROR_PATH_CONSTRAINTS_INVALID", (uint8_t *)&buf, 2u);
      }

      goto LABEL_150;
    }
LABEL_99:
    sub_1DD4EDEE4((uint64_t)&v145);
    LODWORD(v145.origin.x) = v137;
    BYTE4(v145.origin.x) = v136 ^ 1;
    LOBYTE(v146) = v140 ^ 1;
    if (v132 != -1.0) {
      *(float *)&v145.size.CGFloat height = 1.0 - v132;
    }
    if (v133 != -1.0) {
      *((float *)&v146 + 1) = v133;
    }
    objc_initWeak(&location, val);
    time2.size.CGFloat height = 0.0;
    *((void *)&v151 + 1) = 0;
    objc_copyWeak((id *)&rect, &location);
    objc_moveWeak((id *)&time1, (id *)&rect);
    buf.size.CGFloat height = 0.0;
    *(void *)&buf.origin.CGFloat x = &unk_1F38AFAD0;
    objc_moveWeak((id *)&buf.origin.y, (id *)&time1);
    *(void *)&buf.size.CGFloat height = &buf;
    objc_destroyWeak((id *)&time1);
    sub_1DD4BFCB4(&buf, &time2);
    sub_1DD4BE260(&buf);
    objc_destroyWeak((id *)&rect);
    objc_copyWeak((id *)&rect, &location);
    objc_moveWeak((id *)&time1, (id *)&rect);
    buf.size.CGFloat height = 0.0;
    *(void *)&buf.origin.CGFloat x = &unk_1F38AFB28;
    objc_moveWeak((id *)&buf.origin.y, (id *)&time1);
    *(void *)&buf.size.CGFloat height = &buf;
    objc_destroyWeak((id *)&time1);
    sub_1DD4C0128(&buf, &v150);
    sub_1DD4BE1DC(&buf);
    objc_destroyWeak((id *)&rect);
    memset(&buf, 0, 24);
    long long v128 = 0uLL;
    *(void *)&buf.size.CGFloat height = &v128;
    *(_OWORD *)long long v129 = 0u;
    *(_OWORD *)long long v130 = 0u;
    long long v131 = 0u;
    sub_1DD4BDF88((uint64_t)&buf.size.height, 0);
    *(void *)&buf.size.CGFloat height = v109;
    long long v128 = v110;
    if (*((void *)&v110 + 1))
    {
      *(void *)(v110 + 16) = &v128;
      double v109 = v21;
      *long long v21 = 0;
      v21[1] = 0;
    }
    else
    {
      *(void *)&buf.size.CGFloat height = &v128;
    }
    int v79 = sub_1DD4F1124((uint64_t)&buf, v102, *(void *)(a1 + 48), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4));
    if (v79)
    {
      if (a4) {
        *a4 = v79;
      }
      if (qword_1EBE80588 != -1) {
        dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
      }
      double v80 = (id)qword_1EBE80590;
      double v81 = v80;
      os_signpost_id_t v82 = v111;
      if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v80))
      {
        LOWORD(time1.value) = 0;
        _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v81, OS_SIGNPOST_EVENT, v82, "ICCalcCinematicL1Corrections", "IC_ERROR_BAD_INPUT", (uint8_t *)&time1, 2u);
      }
    }
    else
    {
      if (v99)
      {
        sub_1DD4F1D04(&time1, &buf, v134, v135 - v134 + 1);
        sub_1DD4B64C8((uint64_t *)(a1 + 24), v134, v135 - v134 + 1, &rect);
        uint64_t v105 = 0;
        if (sub_1DD4B7FE4((void *)(a1 + 96))) {
          operator new();
        }
      }
      else
      {
        sub_1DD4BD768(&time1, (uint64_t)&buf);
        memset(&rect, 0, 24);
        sub_1DD4BEF24(&rect, *(void *)(a1 + 24), *(void *)(a1 + 32), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4));
        uint64_t v105 = 0;
      }
      int v104 = 0;
      sub_1DD4F1E1C((uint64_t)&v145, *(void *)(a1 + 48), (uint64_t)&time2, v138, v139, v141, v142, v143, (uint64_t *)&v114, v132, &v104);
      if (v104)
      {
        if (a4) {
          *a4 = 10;
        }
        if (qword_1EBE80588 != -1) {
          dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
        }
        double v83 = (id)qword_1EBE80590;
        double v84 = v83;
        os_signpost_id_t v85 = v111;
        if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v83))
        {
          *(_WORD *)double v103 = 0;
          _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v84, OS_SIGNPOST_EVENT, v85, "ICCalcCinematicL1Corrections", "IC_ERROR_BAD_INPUT", v103, 2u);
        }
      }
      else
      {
        uint64_t v89 = (_DWORD *)v114;
        unint64_t v90 = *(void *)(a1 + 48);
        sub_1DD4C04E4((uint64_t)v117, (uint64_t)v144);
        sub_1DD4F1FE8((uint64_t)&v145, v89, &rect, a1 + 96, v90, &time1.value, (uint64_t)v117, &v104);
        sub_1DD4BF1E8(v117);
        if (!v104)
        {
          sub_1DD4C04E4((uint64_t)v116, (uint64_t)v144);
          sub_1DD4F3BA4();
        }
        if (v104 == 3)
        {
          if (a4) {
            *a4 = 10;
          }
          uint64_t v91 = sub_1DD4B1780();
          double v84 = v91;
          os_signpost_id_t v92 = v111;
          if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v91))
          {
            *(_WORD *)double v103 = 0;
            _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v84, OS_SIGNPOST_EVENT, v92, "ICCalcCinematicL1Corrections", "IC_ERROR_BAD_INPUT", v103, 2u);
          }
        }
        else
        {
          if (a4) {
            *a4 = 9;
          }
          long long v93 = sub_1DD4B1780();
          double v84 = v93;
          os_signpost_id_t v94 = v111;
          if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v93))
          {
            *(_WORD *)double v103 = 0;
            _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v84, OS_SIGNPOST_EVENT, v94, "ICCalcCinematicL1Corrections", "IC_ERROR_CALCULATING_CORRECTIONS", v103, 2u);
          }
        }
      }

      uint64_t v86 = v114;
      *(void *)&long long v114 = 0;
      if (v86) {
        sub_1DD4C0394((uint64_t)&v114, v86);
      }
      uint64_t v87 = v105;
      uint64_t v105 = 0;
      if (v87) {
        sub_1DD4C0B34((uint64_t)&v105, v87);
      }
      *(void *)&long long v114 = &rect;
      sub_1DD4BEE80((void ***)&v114);
      if (__p)
      {
        int8x16_t v126 = __p;
        operator delete(__p);
      }
      if (v122)
      {
        long long v123 = v122;
        operator delete(v122);
      }
      sub_1DD4BDF88((uint64_t)&v119, v120);
      *(void *)&rect.origin.CGFloat x = &time1;
      sub_1DD4BDB34((void ***)&rect);
    }
    if (v130[1])
    {
      *(void **)&long long v131 = v130[1];
      operator delete(v130[1]);
    }
    if (v129[0])
    {
      v129[1] = v129[0];
      operator delete(v129[0]);
    }
    sub_1DD4BDF88((uint64_t)&buf.size.height, (void *)v128);
    time1.value = (CMTimeValue)&buf;
    sub_1DD4BDB34((void ***)&time1);
    sub_1DD4BE1DC(&v150);
    sub_1DD4BE260(&time2);
    objc_destroyWeak(&location);
    nullsub_2(&v145);
LABEL_150:
    sub_1DD4BDF88((uint64_t)&v109, (void *)v110);
    uint64_t v12 = v100;
LABEL_151:

    sub_1DD4BF1E8(v144);
    goto LABEL_152;
  }
  if (a4) {
    *a4 = 1;
  }
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  os_signpost_id_t v13 = (id)qword_1EBE80590;
  uint64_t v14 = v13;
  if (v111 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    LOWORD(buf.origin.x) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v14, OS_SIGNPOST_EVENT, v111, "ICCalcCinematicL1Corrections", "IC_ERROR_ANALYSIS_MALFORMED", (uint8_t *)&buf, 2u);
  }

LABEL_152:
  sub_1DD4B81F4(&v111);

  return 0;
}

void sub_1DD4B7DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,os_signpost_id_t a33,id location,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1DD4BF1E8(&a43);
  uint64_t v66 = a39;
  a39 = 0;
  if (v66) {
    sub_1DD4C0394((uint64_t)&a39, v66);
  }
  uint64_t v67 = a26;
  a26 = 0;
  if (v67) {
    sub_1DD4C0B34((uint64_t)&a26, v67);
  }
  a39 = (uint64_t)&a35;
  sub_1DD4BEE80((void ***)&a39);
  sub_1DD4B653C((uint64_t)&a51);
  sub_1DD4B653C((uint64_t)&a63);
  sub_1DD4BE1DC(v63);
  sub_1DD4BE260((void *)(v64 - 176));
  objc_destroyWeak(&location);
  nullsub_2(v64 - 256);
  sub_1DD4BDF88((uint64_t)&a30, (void *)a31);

  sub_1DD4BF1E8(&STACK[0x240]);
  sub_1DD4B81F4(&a33);

  _Unwind_Resume(a1);
}

BOOL sub_1DD4B7FE4(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((v1 - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[4] - a1[3]) >> 3) != v2
    || 0x8E38E38E38E38E39 * ((uint64_t)(a1[10] - a1[9]) >> 3) != v2
    || a1[13] != v2)
  {
    return 0;
  }
  return a1[7] == a1[6] || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[7] - a1[6]) >> 3) == v2;
}

uint64_t *sub_1DD4B807C@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (int v6 = -1431655765 * ((unint64_t)(v5 - v4) >> 3), v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1) {
      int v7 = v6 - a2;
    }
    else {
      int v7 = a3;
    }
    if ((int)(v7 + a2) <= v6) {
      int v8 = v7;
    }
    else {
      int v8 = v6 - a2;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1DD4C0BCC(a4, (const void *)(v4 + 24 * a2), v4 + 24 * a2 + 24 * v8, v8);
  }
  return result;
}

uint64_t *sub_1DD4B80F0@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (int v6 = 954437177 * ((unint64_t)(v5 - v4) >> 3), v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1) {
      int v7 = v6 - a2;
    }
    else {
      int v7 = a3;
    }
    if ((int)(v7 + a2) <= v6) {
      int v8 = v7;
    }
    else {
      int v8 = v6 - a2;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1DD4C0C48(a4, (const void *)(v4 + 72 * a2), v4 + 72 * a2 + 72 * v8, v8);
  }
  return result;
}

void sub_1DD4B8164(void *a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = a1[1];
  if (v4 && (a2 & 0x80000000) == 0 && (int)v4 > a2 && a3 > -2)
  {
    if (a3 == -1) {
      int v5 = v4 - a2;
    }
    else {
      int v5 = a3;
    }
    if (v5 + a2 <= (int)v4) {
      int v6 = v5;
    }
    else {
      int v6 = v4 - a2;
    }
    char v7 = a2;
    int v8 = (void *)(*a1 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8));
    unint64_t v9 = v7 & 0x3F;
    uint64_t v10 = v9 + v6;
    uint64_t v11 = v10 - 63;
    if (v10 < 63) {
      uint64_t v11 = v9 + v6;
    }
    uint64_t v12 = v11 >> 6;
    if (v6 >= 0) {
      unint64_t v13 = (unint64_t)v10 >> 6;
    }
    else {
      unint64_t v13 = v12;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_1DD4C0CC4(a4, v8, v9, &v8[v13], v10 & 0x3F, (v10 & 0x3F) - v9 + (v13 << 6));
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

os_signpost_id_t *sub_1DD4B81F4(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  unint64_t v2 = (id)qword_1EBE80590;
  id v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCalcCinematicL1Corrections", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

uint64_t ICCorrectionCopyAndExtend(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  id v7 = a3;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  int v8 = (id)qword_1EBE80590;
  os_signpost_id_t v9 = os_signpost_id_generate(v8);
  os_signpost_id_t v19 = v9;
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  uint64_t v10 = (id)qword_1EBE80590;
  uint64_t v11 = v10;
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)CGRect buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v9, "ICCorrectionUpdateWithSourceSize", (const char *)&unk_1DD51A302, buf, 2u);
  }

  if (sub_1DD4AEEF0(a1))
  {
    if (sub_1DD4AEEF0(a2)) {
      operator new();
    }
    if (a4) {
      *a4 = 2;
    }
    if (qword_1EBE80588 != -1) {
      dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
    }
    int v16 = (id)qword_1EBE80590;
    unint64_t v13 = v16;
    os_signpost_id_t v14 = v19;
    if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      *(_WORD *)CGRect buf = 0;
      double v15 = "IC_ERROR_CORRECTIONS_MALFORMED";
      goto LABEL_25;
    }
  }
  else
  {
    if (a4) {
      *a4 = 1;
    }
    if (qword_1EBE80588 != -1) {
      dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
    }
    uint64_t v12 = (id)qword_1EBE80590;
    unint64_t v13 = v12;
    os_signpost_id_t v14 = v19;
    if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)CGRect buf = 0;
      double v15 = "IC_ERROR_ANALYSIS_MALFORMED";
LABEL_25:
      _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v13, OS_SIGNPOST_EVENT, v14, "ICCorrectionUpdateWithSourceSize", v15, buf, 2u);
    }
  }

  sub_1DD4B8778(&v19);
  return 0;
}

void sub_1DD4B86E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, os_signpost_id_t a15, void **a16)
{
  a16 = (void **)&a11;
  sub_1DD4BEE80(&a16);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  sub_1DD4B8778(&a15);

  _Unwind_Resume(a1);
}

os_signpost_id_t *sub_1DD4B8778(os_signpost_id_t *a1)
{
  if (qword_1EBE80588 != -1) {
    dispatch_once(&qword_1EBE80588, &unk_1F38B0990);
  }
  unint64_t v2 = (id)qword_1EBE80590;
  id v3 = v2;
  os_signpost_id_t v4 = *a1;
  if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DD4AC000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ICCorrectionUpdateWithSourceSize", (const char *)&unk_1DD51A302, v6, 2u);
  }

  return a1;
}

uint64_t ICCalcSmoothingCorrections(uint64_t a1, void *a2, _DWORD *a3)
{
  id v5 = a2;
  if (sub_1DD4AEEF0(a1)) {
    operator new();
  }
  if (a3) {
    *a3 = 1;
  }

  return 0;
}

void sub_1DD4B8A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  nullsub_2((uint64_t *)va);
  sub_1DD4BF1E8((uint64_t *)va1);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);

  _Unwind_Resume(a1);
}

uint64_t ICCalcCanDoTripod(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, void *a5)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  if (sub_1DD4AEEF0(a1))
  {
    sub_1DD4B4A54(v8, (uint64_t)&v22);
    if (v24 == -1) {
      int v24 = 0;
    }
    if (v25 == -1)
    {
      uint64_t v9 = ICGetResultStats((id *)a1);
      uint64_t v10 = [v9 objectForKeyedSubscript:IC_A_STAT_FRAME_COUNT];
      int v11 = [v10 intValue];

      int v25 = v11 - 1;
    }
    if (v26 == -1)
    {
      int v12 = v25 + v24;
      if (v25 + v24 < 0 != __OFADD__(v25, v24)) {
        ++v12;
      }
      int v26 = v12 >> 1;
    }
    char v21 = 0;
    sub_1DD4B8DE4(v8, &v21);
    sub_1DD4EDEE4((uint64_t)&v16);
    int v16 = v28;
    char v17 = v27 ^ 1;
    char v19 = v29 ^ 1;
    if (v22 != -1.0) {
      float v18 = 1.0 - v22;
    }
    if (v23 != -1.0) {
      float v20 = v23;
    }
    if (a5) {
      uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:*a5];
    }
    else {
      uint64_t v13 = 0;
    }
    if (v21) {
      sub_1DD4F4428((uint64_t)&v16, (uint64_t *)(a1 + 24), *(void *)(a1 + 48), v26, v24, v25);
    }
    uint64_t v14 = sub_1DD4F44B8((uint64_t)&v16, (uint64_t *)(a1 + 24), *(void *)(a1 + 48), *(void *)(a1 + 232), v26, v24, v25);
    if (a5) {
      *a5 = v13;
    }

    nullsub_2(&v16);
    sub_1DD4BF1E8(v30);
  }
  else
  {
    uint64_t v14 = 0;
    if (a3) {
      *a3 = 1;
    }
  }

  return v14;
}

void sub_1DD4B8D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  sub_1DD4BF1E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DD4B8DE4(void *a1, unsigned char *a2)
{
  id v3 = a1;
  *a2 = 0;
  id v6 = v3;
  uint64_t v4 = [v3 objectForKeyedSubscript:IC_D_CALC_TRIPOD_CONFIDENCE];

  if (v4)
  {
    id v5 = [v6 objectForKeyedSubscript:IC_D_CALC_TRIPOD_CONFIDENCE];
    *a2 = [v5 BOOLValue];
  }
}

void sub_1DD4B8E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ICCalcTripodCorrections(uint64_t a1, void *a2, _DWORD *a3)
{
  id v5 = a2;
  if (sub_1DD4AEEF0(a1)) {
    operator new();
  }
  if (a3) {
    *a3 = 1;
  }

  return 0;
}

void sub_1DD4B9240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1DD4C12F4(&a12, 0);
  nullsub_2(&a13);
  sub_1DD4BF1E8(&a26);
  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);

  _Unwind_Resume(a1);
}

uint64_t ICCalcPassThruCorrections(uint64_t a1, _DWORD *a2)
{
  if (sub_1DD4AEEF0(a1)) {
    operator new();
  }
  if (a2) {
    *a2 = 1;
  }
  return 0;
}

uint64_t ICGetRecordIndexForTime(uint64_t a1, CMTime *a2)
{
  id v3 = ICGetResultHomographies(a1, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 objectForKeyedSubscript:IC_A_FRAMEINSTRUCTIONS];
    uint64_t v6 = [v5 count];
    if (v6)
    {
      memset(&v22, 0, sizeof(v22));
      id v7 = [v5 objectAtIndexedSubscript:0];
      CFDictionaryRef v8 = [v7 objectForKeyedSubscript:IC_A_FRAMETRANSFORM_RAWTIME];
      CMTimeMakeFromDictionary(&v22, v8);

      CMTime time1 = *a2;
      CMTime time2 = v22;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        uint64_t v6 = 0;
        goto LABEL_13;
      }
      memset(&v22, 0, sizeof(v22));
      uint64_t v9 = [v5 objectAtIndexedSubscript:v6 - 1];
      CFDictionaryRef v10 = [v9 objectForKeyedSubscript:IC_A_FRAMETRANSFORM_RAWTIME];
      CMTimeMakeFromDictionary(&v22, v10);

      CMTime v19 = *a2;
      CMTime v18 = v22;
      if ((CMTimeCompare(&v19, &v18) & 0x80000000) == 0)
      {
        uint64_t v6 = (v6 - 1);
LABEL_13:

        goto LABEL_14;
      }
      unsigned int v11 = v6 - 1;
      while (1)
      {
        BOOL v12 = __OFSUB__(v6, 1);
        uint64_t v6 = (v6 - 1);
        if ((int)v6 < 0 != v12) {
          break;
        }
        memset(&v22, 0, sizeof(v22));
        uint64_t v13 = [v5 objectAtIndexedSubscript:v11];
        CFDictionaryRef v14 = [v13 objectForKeyedSubscript:IC_A_FRAMETRANSFORM_RAWTIME];
        CMTimeMakeFromDictionary(&v22, v14);

        CMTime v17 = v22;
        CMTime v16 = *a2;
        --v11;
        if (CMTimeCompare(&v17, &v16) <= 0) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  uint64_t v6 = 0xFFFFFFFFLL;
LABEL_14:

  return v6;
}

void sub_1DD4B9664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ICFillHomographyGaps(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  id v99 = a1;
  id v98 = a2;
  id v100 = a3;
  id v7 = [v100 objectForKeyedSubscript:IC_A_HOMOGRAPHIES_INVERTED];
  uint64_t v96 = v7;
  if (v7) {
    int v8 = [v7 BOOLValue];
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = [v100 objectForKeyedSubscript:IC_A_HOMOGRAPHIES_MAP_TO_REFERENCE];
  uint64_t v97 = v9;
  if (v9) {
    int v10 = [v9 BOOLValue];
  }
  else {
    int v10 = 0;
  }
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  if (sub_1DD4B58DC((uint64_t *)&v106, v99, v8, v10, 0, (uint64_t)__src, 0))
  {
    sub_1DD4BA068(v98, &__p);
    unsigned int v11 = (char *)__p;
    if (__p == v105)
    {
      if (a4)
      {
        uint64_t v115 = *MEMORY[0x1E4F28228];
        long long v116 = @"No requested fill times were provided.\n";
        int v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v116 forKeys:&v115 count:1];
        *a4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v26];
      }
    }
    else
    {
      while ((*((_DWORD *)v11 + 3) & 0x1D) == 1)
      {
        v11 += 24;
        if (v11 == v105)
        {
          sub_1DD4DCBAC((uint64_t *)&v106, (uint64_t)&__p, (uint64_t *)&v106, &v102);
          CMTime v18 = v102;
          if (v102 == (uint64_t *)v103)
          {
            uint64_t v19 = 0;
          }
          else
          {
            uint64_t v19 = 0;
            do
            {
              float v20 = (uint64_t *)v18[1];
              char v21 = v18;
              if (v20)
              {
                do
                {
                  CMTime v22 = v20;
                  float v20 = (uint64_t *)*v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  CMTime v22 = (uint64_t *)v21[2];
                  BOOL v23 = *v22 == (void)v21;
                  char v21 = v22;
                }
                while (!v23);
              }
              v19 -= 0x5555555555555555 * ((v18[12] - v18[11]) >> 3);
              CMTime v18 = v22;
            }
            while (v22 != (uint64_t *)v103);
          }
          if (v19 != 0xAAAAAAAAAAAAAAABLL * ((v105 - (unsigned char *)__p) >> 3))
          {
            if (a4)
            {
              uint64_t v111 = *MEMORY[0x1E4F28228];
              long long v112 = @"Number of filled gaps does not match number of requested fill times.\n";
              double v61 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v112 forKeys:&v111 count:1];
              *a4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v61];
            }
            id v25 = 0;
            goto LABEL_86;
          }
          if ((v8 | v10) == 1)
          {
            if ((v10 | v8 ^ 1))
            {
              if (v10)
              {
                int v28 = v106;
                char v29 = v107;
                if (v106 != v107)
                {
                  char v30 = 1;
                  double v31 = (double *)__src;
                  do
                  {
                    if (v30)
                    {
                      memmove(v28, v31, 0x48uLL);
                    }
                    else
                    {
                      if (v8)
                      {
                        double v32 = v28[7];
                        double v33 = v28[8];
                        double v34 = v28[5];
                        double v35 = v28[6];
                        double v37 = v28[3];
                        double v36 = v28[4];
                        double v38 = v36 * v33 - v32 * v34;
                        double v39 = v28[1];
                        double v40 = v28[2];
                        double v41 = v32 * v40 - v39 * v33;
                        double v120 = v38;
                        double v121 = v41;
                        double v42 = v39 * v34 - v36 * v40;
                        double v122 = v42;
                        double v43 = *v28;
                        double v44 = v41 * v37 + *v28 * v38 + v35 * v42;
                        if (v44 >= 2.22044605e-16 || v44 <= -2.22044605e-16)
                        {
                          double v120 = v38 / v44;
                          double v121 = v41 / v44;
                          double v122 = v42 / v44;
                          double v123 = (v35 * v34 - v37 * v33) / v44;
                          double v124 = (v43 * v33 - v35 * v40) / v44;
                          double v125 = (v37 * v40 - v43 * v34) / v44;
                          double v126 = (v37 * v32 - v35 * v36) / v44;
                          double v127 = (v35 * v39 - v43 * v32) / v44;
                          double v128 = (v43 * v36 - v37 * v39) / v44;
                        }
                        uint64_t v46 = 0;
                        uint64_t v47 = &v120;
                        do
                        {
                          uint64_t v48 = 0;
                          double v49 = v31;
                          do
                          {
                            uint64_t v50 = 0;
                            double v51 = 0.0;
                            uint64_t v52 = v49;
                            do
                            {
                              double v53 = *v52;
                              v52 += 3;
                              double v51 = v51 + v47[v50++] * v53;
                            }
                            while (v50 != 3);
                            *((double *)v129 + 3 * v46 + v48++) = v51;
                            ++v49;
                          }
                          while (v48 != 3);
                          ++v46;
                          v47 += 3;
                        }
                        while (v46 != 3);
                      }
                      else
                      {
                        for (uint64_t i = 0; i != 3; ++i)
                        {
                          uint64_t v55 = 0;
                          uint64_t v56 = v28;
                          do
                          {
                            uint64_t v57 = 0;
                            double v58 = 0.0;
                            char v59 = v56;
                            do
                            {
                              double v60 = *v59;
                              v59 += 3;
                              double v58 = v58 + v31[v57++] * v60;
                            }
                            while (v57 != 3);
                            *((double *)v129 + 3 * i + v55++) = v58;
                            ++v56;
                          }
                          while (v55 != 3);
                          v31 += 3;
                        }
                      }
                      *((_OWORD *)v28 + 1) = v129[1];
                      *((_OWORD *)v28 + 2) = v129[2];
                      *((_OWORD *)v28 + 3) = v129[3];
                      *((void *)v28 + 8) = v130;
                      *(_OWORD *)int v28 = v129[0];
                      double v31 = v28;
                    }
                    char v30 = 0;
                    v28 += 38;
                  }
                  while (v28 != v29);
                }
              }
            }
            else
            {
              double v62 = v106;
              for (j = v107; v62 != j; v62 += 38)
              {
                double v64 = v62[7];
                double v65 = v62[8];
                double v66 = v62[4];
                double v67 = v62[5];
                double v68 = v62[6];
                double v69 = v66 * v65 - v64 * v67;
                double v70 = *v62;
                double v71 = v62[1];
                double v73 = v62[2];
                double v72 = v62[3];
                double v74 = v64 * v73 - v71 * v65;
                double v75 = v71 * v67 - v66 * v73;
                double v76 = v74 * v72 + *v62 * v69 + v68 * v75;
                if (v76 >= 2.22044605e-16 || v76 <= -2.22044605e-16)
                {
                  double v69 = v69 / v76;
                  double v74 = v74 / v76;
                  double v75 = v75 / v76;
                  double v13 = (v68 * v67 - v72 * v65) / v76;
                  double v12 = (v72 * v64 - v68 * v66) / v76;
                  double v14 = (v70 * v65 - v68 * v73) / v76;
                  double v15 = (v72 * v73 - v70 * v67) / v76;
                  double v16 = (v68 * v71 - v70 * v64) / v76;
                  double v17 = (v70 * v66 - v72 * v71) / v76;
                }
                double *v62 = v69;
                v62[1] = v74;
                v62[2] = v75;
                v62[3] = v13;
                v62[4] = v14;
                v62[5] = v15;
                v62[6] = v12;
                v62[7] = v16;
                v62[8] = v17;
              }
            }
          }
          id v25 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          *(void *)&v129[0] = 0;
          uint64_t v79 = (uint64_t)v106;
          os_signpost_id_t v78 = v107;
          if (v107 == v106) {
            goto LABEL_86;
          }
          unint64_t v80 = 0;
          CFAllocatorRef v81 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          while (1)
          {
            os_signpost_id_t v82 = v103[0];
            if (!v103[0])
            {
LABEL_78:
              ++v80;
              goto LABEL_85;
            }
            while (1)
            {
              unint64_t v83 = v82[4];
              if (v80 >= v83) {
                break;
              }
LABEL_77:
              os_signpost_id_t v82 = (void *)*v82;
              if (!v82) {
                goto LABEL_78;
              }
            }
            if (v83 < v80) {
              break;
            }
            double v120 = COERCE_DOUBLE(v129);
            double v84 = sub_1DD4C13AC(&v102, (unint64_t *)v129, (uint64_t)&unk_1DD5118E0, (void **)&v120);
            unint64_t v95 = ((char *)v84[12] - (char *)v84[11]) / 24;
            if (v84[12] != v84[11])
            {
              uint64_t v85 = 0;
              if (v95 <= 1) {
                uint64_t v86 = 1;
              }
              else {
                uint64_t v86 = ((char *)v84[12] - (char *)v84[11]) / 24;
              }
              do
              {
                uint64_t v87 = v85 + *(void *)&v129[0];
                uint64_t v88 = (uint64_t)v106;
                v109[0] = IC_A_FRAMETRANSFORM_HOMOGRAPHY;
                uint64_t v89 = sub_1DD4AEC38((uint64_t)&v106[38 * v85 + 38 * *(void *)&v129[0]]);
                v109[1] = IC_A_FRAMETRANSFORM_RAWTIME;
                v110[0] = v89;
                uint64_t v90 = v88 + 304 * v87;
                CMTimeEpoch v91 = *(void *)(v90 + 128);
                *(_OWORD *)&time.value = *(_OWORD *)(v90 + 112);
                time.CMTimeEpoch epoch = v91;
                CFDictionaryRef v92 = CMTimeCopyAsDictionary(&time, v81);
                v110[1] = v92;
                long long v93 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v110 forKeys:v109 count:2];

                [v25 addObject:v93];
                ++v85;
              }
              while (v86 != v85);
            }
            unint64_t v80 = *(void *)&v129[0] + v95;
            uint64_t v79 = (uint64_t)v106;
            os_signpost_id_t v78 = v107;
LABEL_85:
            *(void *)&v129[0] = v80;
            if (v80 >= 0x86BCA1AF286BCA1BLL * (((uint64_t)v78 - v79) >> 4))
            {
LABEL_86:
              sub_1DD4C1348((uint64_t)&v102, v103[0]);
              goto LABEL_87;
            }
          }
          ++v82;
          goto LABEL_77;
        }
      }
      if (a4)
      {
        uint64_t v113 = *MEMORY[0x1E4F28228];
        long long v114 = @"Requested fill time value is not numeric.\n";
        uint64_t v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v114 forKeys:&v113 count:1];
        *a4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v27];
      }
    }
    id v25 = 0;
LABEL_87:
    if (__p)
    {
      uint64_t v105 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v117 = *MEMORY[0x1E4F28228];
      long long v118 = @"Error while extracting existing homographies.\n";
      int v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v118 forKeys:&v117 count:1];
      *a4 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v24];
    }
    id v25 = 0;
  }
  *(void *)&v129[0] = &v106;
  sub_1DD4BEE80((void ***)v129);

  return v25;
}

void sub_1DD4B9F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  sub_1DD4C1348((uint64_t)&a18, a19);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  *(void *)(v25 - 168) = &a24;
  sub_1DD4BEE80((void ***)(v25 - 168));

  _Unwind_Resume(a1);
}

void sub_1DD4BA068(void *a1@<X0>, void **a2@<X8>)
{
  id v3 = a1;
  unint64_t v4 = [v3 count];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v4)
  {
    sub_1DD4BED90(a2, v4);
    for (uint64_t i = 0; i != v4; ++i)
    {
      CFDictionaryRef v6 = [v3 objectAtIndexedSubscript:i];
      memset(&v22, 0, sizeof(v22));
      CMTimeMakeFromDictionary(&v22, v6);
      int v8 = (char *)a2[1];
      id v7 = (char *)a2[2];
      if (v8 >= v7)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*a2) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1DD4BACA0();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a2) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          double v15 = (char *)sub_1DD4BD934((uint64_t)(a2 + 2), v14);
        }
        else {
          double v15 = 0;
        }
        double v16 = &v15[24 * v11];
        long long v17 = *(_OWORD *)&v22.value;
        *((void *)v16 + 2) = v22.epoch;
        *(_OWORD *)double v16 = v17;
        uint64_t v19 = (char *)*a2;
        CMTime v18 = (char *)a2[1];
        float v20 = v16;
        if (v18 != *a2)
        {
          do
          {
            long long v21 = *(_OWORD *)(v18 - 24);
            *((void *)v20 - 1) = *((void *)v18 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v20 -= 24;
            v18 -= 24;
          }
          while (v18 != v19);
          CMTime v18 = (char *)*a2;
        }
        int v10 = v16 + 24;
        *a2 = v20;
        a2[1] = v16 + 24;
        a2[2] = &v15[24 * v14];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        long long v9 = *(_OWORD *)&v22.value;
        *((void *)v8 + 2) = v22.epoch;
        *(_OWORD *)int v8 = v9;
        int v10 = v8 + 24;
      }
      a2[1] = v10;
    }
  }
}

void sub_1DD4BA220(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void *ICFillMotionBlurVectorGaps(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  v70[1] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v44 = a2;
  id v43 = a3;
  id v42 = a4;
  sub_1DD4BA068(v9, &v54);
  int v10 = (char *)v54;
  if (v54 == v55)
  {
    if (!a5) {
      goto LABEL_60;
    }
    uint64_t v69 = *MEMORY[0x1E4F28228];
    v70[0] = @"No input frame times were provided.\n";
    CMTime v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v70 forKeys:&v69 count:1];
    *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v18];
  }
  else
  {
    while ((*((_DWORD *)v10 + 3) & 0x1D) == 1)
    {
      v10 += 24;
      if (v10 == v55)
      {
        long long v52 = 0uLL;
        uint64_t v53 = 0;
        if (sub_1DD4F15BC(v44, (uint64_t *)&v52))
        {
          if (v55 - (unsigned char *)v54 == *((void *)&v52 + 1) - (void)v52)
          {
            sub_1DD4BA068(v43, &__p);
            unint64_t v11 = (char *)__p;
            if (__p == v51)
            {
              if (a5)
              {
                uint64_t v61 = *MEMORY[0x1E4F28228];
                double v62 = @"No requested fill times were provided.\n";
                CMTime v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v62 forKeys:&v61 count:1];
                *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v22];

                goto LABEL_32;
              }
            }
            else
            {
              while ((*((_DWORD *)v11 + 3) & 0x1D) == 1)
              {
                v11 += 24;
                if (v11 == v51)
                {
                  long long v46 = v52;
                  uint64_t v47 = v53;
                  long long v52 = 0uLL;
                  uint64_t v53 = 0;
                  sub_1DD4DD714((uint64_t *)&v54, &v46, (uint64_t)&__p, (uint64_t *)&v52, &v48);
                  uint64_t v56 = &v46;
                  sub_1DD4BDB34((void ***)&v56);
                  unint64_t v12 = v48;
                  if (v48 == (uint64_t *)v49)
                  {
                    uint64_t v13 = 0;
                  }
                  else
                  {
                    uint64_t v13 = 0;
                    do
                    {
                      unint64_t v14 = (uint64_t *)v12[1];
                      double v15 = v12;
                      if (v14)
                      {
                        do
                        {
                          double v16 = v14;
                          unint64_t v14 = (uint64_t *)*v14;
                        }
                        while (v14);
                      }
                      else
                      {
                        do
                        {
                          double v16 = (uint64_t *)v15[2];
                          BOOL v17 = *v16 == (void)v15;
                          double v15 = v16;
                        }
                        while (!v17);
                      }
                      v13 -= 0x5555555555555555 * ((v12[12] - v12[11]) >> 3);
                      unint64_t v12 = v16;
                    }
                    while (v16 != (uint64_t *)v49);
                  }
                  if (v13 != 0xAAAAAAAAAAAAAAABLL * ((v51 - (unsigned char *)__p) >> 3))
                  {
                    if (a5)
                    {
                      uint64_t v57 = *MEMORY[0x1E4F28228];
                      double v58 = @"Number of filled gaps does not match number of requested fill times.\n";
                      double v39 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v58 forKeys:&v57 count:1];
                      *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v39];

                      a5 = 0;
                    }
                    goto LABEL_56;
                  }
                  a5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  unint64_t v45 = 0;
                  uint64_t v24 = *((void *)&v52 + 1);
                  uint64_t v25 = v52;
                  if (*((void *)&v52 + 1) == (void)v52) {
                    goto LABEL_56;
                  }
                  unint64_t v26 = 0;
                  while (1)
                  {
                    uint64_t v27 = v49[0];
                    if (!v49[0])
                    {
LABEL_42:
                      ++v26;
                      goto LABEL_52;
                    }
                    while (1)
                    {
                      unint64_t v28 = v27[4];
                      if (v26 >= v28) {
                        break;
                      }
LABEL_41:
                      uint64_t v27 = (void *)*v27;
                      if (!v27) {
                        goto LABEL_42;
                      }
                    }
                    if (v28 < v26) {
                      break;
                    }
                    uint64_t v56 = (long long *)&v45;
                    char v29 = sub_1DD4C13AC(&v48, &v45, (uint64_t)&unk_1DD5118E0, (void **)&v56);
                    unint64_t v41 = ((char *)v29[12] - (char *)v29[11]) / 24;
                    if (v29[12] != v29[11])
                    {
                      uint64_t v30 = 0;
                      if (v41 <= 1) {
                        uint64_t v31 = 1;
                      }
                      else {
                        uint64_t v31 = ((char *)v29[12] - (char *)v29[11]) / 24;
                      }
                      do
                      {
                        unint64_t v32 = v45;
                        uint64_t v33 = v52;
                        id v34 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                        double v35 = (double **)(v33 + 24 * (v32 + v30));
                        double v36 = *v35;
                        double v37 = v35[1];
                        while (v36 != v37)
                        {
                          double v38 = [NSNumber numberWithDouble:*v36];
                          [v34 addObject:v38];

                          ++v36;
                        }
                        [a5 addObject:v34];

                        ++v30;
                      }
                      while (v30 != v31);
                    }
                    unint64_t v26 = v45 + v41;
                    uint64_t v24 = *((void *)&v52 + 1);
                    uint64_t v25 = v52;
LABEL_52:
                    unint64_t v45 = v26;
                    if (v26 >= 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3))
                    {
LABEL_56:
                      sub_1DD4C1348((uint64_t)&v48, v49[0]);
                      goto LABEL_57;
                    }
                  }
                  ++v27;
                  goto LABEL_41;
                }
              }
              if (a5)
              {
                uint64_t v59 = *MEMORY[0x1E4F28228];
                double v60 = @"Requested fill time value is not numeric.\n";
                BOOL v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v60 forKeys:&v59 count:1];
                *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v23];

LABEL_32:
                a5 = 0;
              }
            }
LABEL_57:
            if (__p)
            {
              double v51 = (char *)__p;
              operator delete(__p);
            }
LABEL_59:
            __p = &v52;
            sub_1DD4BDB34((void ***)&__p);
            goto LABEL_60;
          }
          if (!a5) {
            goto LABEL_59;
          }
          uint64_t v63 = *MEMORY[0x1E4F28228];
          double v64 = @"Mismatch between number of frame times and motion blur vectors provided.\n";
          long long v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v64 forKeys:&v63 count:1];
          *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v21];
        }
        else
        {
          if (!a5) {
            goto LABEL_59;
          }
          uint64_t v65 = *MEMORY[0x1E4F28228];
          double v66 = @"Unable to parse motion blur vector input.\n";
          float v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v66 forKeys:&v65 count:1];
          *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v20];
        }
        a5 = 0;
        goto LABEL_59;
      }
    }
    if (!a5) {
      goto LABEL_60;
    }
    uint64_t v67 = *MEMORY[0x1E4F28228];
    double v68 = @"A provided frame time value is not numeric.\n";
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v68 forKeys:&v67 count:1];
    *a5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"InertiaCamErrorDomain" code:10 userInfo:v19];
  }
  a5 = 0;
LABEL_60:
  if (v54)
  {
    uint64_t v55 = (char *)v54;
    operator delete(v54);
  }

  return a5;
}

void sub_1DD4BA944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char *__p,char *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_1DD4C1348((uint64_t)&a19, a20);
  if (__p)
  {
    a23 = __p;
    operator delete(__p);
  }
  __p = &a25;
  sub_1DD4BDB34((void ***)&__p);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

void sub_1DD4BAA78()
{
}

void sub_1DD4BAA90(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1DD4BAAEC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6CC8858, MEMORY[0x1E4FBA1D0]);
}

void sub_1DD4BAAD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1DD4BAAEC(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

Class sub_1DD4BAB20()
{
  if (qword_1EBE80560 != -1) {
    dispatch_once(&qword_1EBE80560, &unk_1F38B0970);
  }
  Class result = objc_getClass("DESRecordStore");
  qword_1EBE80570 = (uint64_t)result;
  off_1EBE80558 = (uint64_t (*)())sub_1DD4BAB84;
  return result;
}

id sub_1DD4BAB84()
{
  return (id)qword_1EBE80570;
}

void *sub_1DD4BAB90()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/DistributedEvaluation.framework/DistributedEvaluation", 2);
  qword_1EBE80568 = (uint64_t)result;
  return result;
}

uint64_t sub_1DD4BABBC()
{
  qword_1EBE80590 = (uint64_t)os_log_create("com.apple.acg.inertiacam", "InertiaCam");
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1DD4BAC0C(uint64_t a1)
{
  long long v2 = *MEMORY[0x1E4F1FA20];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 71) = 0;
  *(void *)(a1 + 76) = -3229614080;
  sub_1DD506CB0(a1 + 84);
  return a1;
}

void sub_1DD4BAC6C(_Unwind_Exception *exception_object)
{
  long long v3 = v2;
  id v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4BAC8C(void *a1)
{
}

void sub_1DD4BACA0()
{
}

void sub_1DD4BACB8(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1DD4BAD14(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6CC8850, MEMORY[0x1E4FBA1C8]);
}

void sub_1DD4BAD00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1DD4BAD14(std::logic_error *a1, const char *a2)
{
  Class result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void *sub_1DD4BAD48(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_1DD4BAD90();
  }
  return operator new(48 * a2);
}

void sub_1DD4BAD90()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void sub_1DD4BADC4()
{
}

void sub_1DD4BAF5C(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v1, 0x1020C40BD1971B5);
  _Unwind_Resume(a1);
}

void *sub_1DD4BAF80(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1DD4BAD90();
  }
  return operator new(8 * a2);
}

void sub_1DD4BAFB8()
{
}

void sub_1DD4BB03C(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v1, 0x1020C408C3C92B4);
  _Unwind_Resume(a1);
}

void *sub_1DD4BB060(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFDictionaryRef v6 = result;
    Class result = sub_1DD4BB0DC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      Class result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BB0C0(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4BB0DC(void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_1DD4BACA0();
  }
  Class result = (char *)sub_1DD4BB120((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_1DD4BB120(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_1DD4BAD90();
  }
  return operator new(a2 << 6);
}

void *sub_1DD4BB158(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFDictionaryRef v6 = result;
    sub_1DD4BB1E0(result, a4);
    Class result = (void *)sub_1DD4BB284((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD4BB1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1DD4BBB5C(&a9);
  _Unwind_Resume(a1);
}

char *sub_1DD4BB1E0(void *a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL) {
    sub_1DD4BACA0();
  }
  Class result = (char *)sub_1DD4BB238((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[296 * v4];
  return result;
}

void *sub_1DD4BB238(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL) {
    sub_1DD4BAD90();
  }
  return operator new(296 * a2);
}

uint64_t sub_1DD4BB284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1DD4BB328(v4, v6);
      v6 += 296;
      uint64_t v4 = v11 + 296;
      v11 += 296;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1DD4BBA6C((uint64_t)v8);
  return v4;
}

void sub_1DD4BB314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DD4BB328(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  sub_1DD4BB474(a1 + 32, 0, *(void *)(a2 + 40), *(void *)(a2 + 48));
  memmove(*(void **)(a1 + 32), *(const void **)(a2 + 32), 8 * *(void *)(a2 + 48));
  sub_1DD4BB578(a1 + 104, 0, *(void *)(a2 + 112), *(void *)(a2 + 120));
  memmove(*(void **)(a1 + 104), *(const void **)(a2 + 104), 4 * *(void *)(a2 + 120));
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_1DD4BB5F8((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  sub_1DD4BB6F0(a1 + 200, 0, *(void *)(a2 + 208), *(void *)(a2 + 216));
  memmove(*(void **)(a1 + 200), *(const void **)(a2 + 200), 32 * *(void *)(a2 + 216));
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  sub_1DD4BB770((void *)(a1 + 272), *(const void **)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  return a1;
}

void sub_1DD4BB428(_Unwind_Exception *a1)
{
  sub_1DD4BB840(v5);
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 184) = v7;
    operator delete(v7);
  }
  sub_1DD4BB98C(v3);
  sub_1DD4BB9FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4BB474(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)Class result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 56) = 0;
  if (!a2)
  {
    if (a3)
    {
      *(unsigned char *)(result + 24) = 1;
      operator new[]();
    }
  }
  return result;
}

void sub_1DD4BB4E0(_Unwind_Exception *a1)
{
  sub_1DD4BB4F4((void *)(v1 + 32));
  _Unwind_Resume(a1);
}

void *sub_1DD4BB4F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1DD4BB578(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)Class result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 56) = 0;
  if (!a2)
  {
    if (a3)
    {
      *(unsigned char *)(result + 24) = 1;
      operator new[]();
    }
  }
  return result;
}

void sub_1DD4BB5E4(_Unwind_Exception *a1)
{
  sub_1DD4BB4F4((void *)(v1 + 32));
  _Unwind_Resume(a1);
}

void *sub_1DD4BB5F8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    Class result = sub_1DD4BB674(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      Class result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BB658(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4BB674(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1DD4BACA0();
  }
  Class result = (char *)sub_1DD4BB6B8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_1DD4BB6B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1DD4BAD90();
  }
  return operator new(4 * a2);
}

uint64_t sub_1DD4BB6F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)Class result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 56) = 0;
  if (!a2)
  {
    if (a3)
    {
      *(unsigned char *)(result + 24) = 1;
      operator new[]();
    }
  }
  return result;
}

void sub_1DD4BB75C(_Unwind_Exception *a1)
{
  sub_1DD4BB4F4((void *)(v1 + 32));
  _Unwind_Resume(a1);
}

void *sub_1DD4BB770(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    Class result = sub_1DD4BB7EC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      Class result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BB7D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4BB7EC(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_1DD4BACA0();
  }
  Class result = (char *)sub_1DD4BAD48((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t sub_1DD4BB840(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) && *(void *)a1) {
    MEMORY[0x1E01B7730]();
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 64);
    if (v2) {
      sub_1DD4BB8B0(a1 + 32, v2);
    }
  }
  sub_1DD4BB4F4((void *)(a1 + 32));
  return a1;
}

uint64_t sub_1DD4BB8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1DD4BB904();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1DD4BB904()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_1F38B07D0;
  __cxa_throw(exception, (struct type_info *)&unk_1F38AFFC8, (void (*)(void *))std::exception::~exception);
}

void sub_1DD4BB954(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4BB98C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) && *(void *)a1) {
    MEMORY[0x1E01B7730]();
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 64);
    if (v2) {
      sub_1DD4BB8B0(a1 + 32, v2);
    }
  }
  sub_1DD4BB4F4((void *)(a1 + 32));
  return a1;
}

uint64_t sub_1DD4BB9FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) && *(void *)a1) {
    MEMORY[0x1E01B7730]();
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 64);
    if (v2) {
      sub_1DD4BB8B0(a1 + 32, v2);
    }
  }
  sub_1DD4BB4F4((void *)(a1 + 32));
  return a1;
}

uint64_t sub_1DD4BBA6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DD4BBAA4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_1DD4BBAA4(uint64_t *result)
{
  uint64_t v2 = (void *)result[1];
  uint64_t v1 = (void **)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)*v2;
  if (*v1 != (void *)*v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 37;
      Class result = (uint64_t *)sub_1DD4BBAF8(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_1DD4BBAF8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[34];
  if (v3)
  {
    a2[35] = v3;
    operator delete(v3);
  }
  sub_1DD4BB840((uint64_t)(a2 + 25));
  uint64_t v4 = (void *)a2[22];
  if (v4)
  {
    a2[23] = v4;
    operator delete(v4);
  }
  sub_1DD4BB98C((uint64_t)(a2 + 13));
  return sub_1DD4BB9FC((uint64_t)(a2 + 4));
}

void sub_1DD4BBB5C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 37;
        sub_1DD4BBAF8((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1DD4BBBF4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_1DD4BBC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BBDC0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1DD4BBC94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4BBCCC(uint64_t a1)
{
  return sub_1DD4BBD18(a1 + 24, *(void *)(a1 + 24));
}

uint64_t sub_1DD4BBCD4(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AFF90)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_1DD4BBD18(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 56);
    sub_1DD4BBB5C(&v4);
    return MEMORY[0x1E01B7750](a2, 0x1020C408C3C92B4);
  }
  return result;
}

BOOL sub_1DD4BBD70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t *sub_1DD4BBDC0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = (void **)(v2 + 56);
    sub_1DD4BBB5C(&v3);
    return (uint64_t *)MEMORY[0x1E01B7750](v2, 0x1020C408C3C92B4);
  }
  return result;
}

uint64_t sub_1DD4BBE18(uint64_t a1)
{
  return a1;
}

void sub_1DD4BBE44(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1E01B7750);
}

id *sub_1DD4BBE90(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 8);
  uint64_t v2 = (id *)operator new(0x10uLL);
  id *v2 = &unk_1F38AFB80;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1DD4BBEE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F38AFB80;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1DD4BBF10(uint64_t a1)
{
}

void sub_1DD4BBF18(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

void sub_1DD4BBF54(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = sub_1DD4AEC38(v3);
    long long v8 = v6;
    uint64_t v9 = v7;
    [WeakRetained ICReportL1Correction:v5 forPresentationTime:&v8 withStats:MEMORY[0x1E4F1CC08]];
  }
}

void sub_1DD4BBFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4BC010(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AF9F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4BC050()
{
  return &unk_1F38AF9F0;
}

void *sub_1DD4BC05C(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DD4BC2BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1DD4BAC8C(a1);
}

uint64_t sub_1DD4BC2C8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x86BCA1AF286BCA1BLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xD79435E50D7944) {
      sub_1DD4BACA0();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1DD4BC400(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 304 * v6;
    sub_1DD4BC388(a1, v7);
    return sub_1DD4BC608((uint64_t)v7);
  }
  return result;
}

void sub_1DD4BC374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BC608((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4BC388(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1DD4BC44C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1DD4BC400(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD79435E50D7944) {
    sub_1DD4BAD90();
  }
  return operator new(304 * a2);
}

uint64_t sub_1DD4BC44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v28 = a6;
  *((void *)&v28 + 1) = a7;
  long long v27 = v28;
  v25[0] = a1;
  v25[1] = &v27;
  v25[2] = &v28;
  if (a3 == a5)
  {
    uint64_t v23 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 304;
    do
    {
      uint64_t v9 = (_OWORD *)(v7 - 304);
      *uint64_t v9 = *(_OWORD *)v8;
      long long v10 = *(_OWORD *)(v8 + 16);
      long long v11 = *(_OWORD *)(v8 + 32);
      long long v12 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 - 244) = *(_OWORD *)(v8 + 60);
      *(_OWORD *)(v7 - 256) = v12;
      v9[1] = v10;
      v9[2] = v11;
      *(void *)(v7 - 216) = 0;
      *(void *)(v7 - 208) = 0;
      *(void *)(v7 - 224) = 0;
      *(_OWORD *)(v7 - 224) = *(_OWORD *)(v8 + 80);
      *(void *)(v7 - 208) = *(void *)(v8 + 96);
      *(void *)(v8 + 88) = 0;
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 80) = 0;
      long long v13 = *(_OWORD *)(v8 + 136);
      long long v14 = *(_OWORD *)(v8 + 152);
      long long v15 = *(_OWORD *)(v8 + 168);
      *(_OWORD *)(v7 - 184) = *(_OWORD *)(v8 + 120);
      *(_OWORD *)(v7 - 136) = v15;
      *(_OWORD *)(v7 - 152) = v14;
      *(_OWORD *)(v7 - 168) = v13;
      long long v16 = *(_OWORD *)(v8 + 200);
      long long v17 = *(_OWORD *)(v8 + 216);
      long long v18 = *(_OWORD *)(v8 + 232);
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(v8 + 184);
      *(_OWORD *)(v7 - 72) = v18;
      *(_OWORD *)(v7 - 88) = v17;
      *(_OWORD *)(v7 - 104) = v16;
      long long v19 = *(_OWORD *)(v8 + 264);
      long long v20 = *(_OWORD *)(v8 + 280);
      uint64_t v21 = *(void *)(v8 + 293);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(v8 + 248);
      *(void *)(v7 - 11) = v21;
      *(_OWORD *)(v7 - 24) = v20;
      *(_OWORD *)(v7 - 40) = v19;
      *(_OWORD *)(v7 - 200) = *(_OWORD *)(v8 + 104);
      uint64_t v7 = *((void *)&v28 + 1) - 304;
      *((void *)&v28 + 1) -= 304;
      BOOL v22 = v8 == a5;
      v8 -= 304;
    }
    while (!v22);
    uint64_t v23 = v28;
  }
  char v26 = 1;
  sub_1DD4BC588((uint64_t)v25);
  return v23;
}

uint64_t sub_1DD4BC588(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DD4BC5C0(a1);
  }
  return a1;
}

void sub_1DD4BC5C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(void *)(v1 + 88) = v3;
      operator delete(v3);
    }
    v1 += 304;
  }
}

uint64_t sub_1DD4BC608(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1DD4BC640(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 304;
    uint64_t v5 = *(void **)(v2 - 224);
    if (v5)
    {
      *(void *)(v2 - 216) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 304;
    }
  }
}

uint64_t sub_1DD4BC69C(uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xD79435E50D7943) {
    sub_1DD4BACA0();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x6BCA1AF286BCA1) {
    unint64_t v11 = 0xD79435E50D7943;
  }
  else {
    unint64_t v11 = v6;
  }
  long long v19 = a1 + 2;
  if (v11) {
    long long v12 = (char *)sub_1DD4BC400(v9, v11);
  }
  else {
    long long v12 = 0;
  }
  long long v15 = v12;
  long long v16 = &v12[304 * v5];
  uint64_t v17 = (uint64_t)v16;
  long long v18 = &v12[304 * v11];
  sub_1DD4BC7C4((uint64_t)v16, *a2, a3);
  uint64_t v17 = (uint64_t)(v16 + 304);
  sub_1DD4BC388(a1, &v15);
  uint64_t v13 = a1[1];
  sub_1DD4BC608((uint64_t)&v15);
  return v13;
}

void sub_1DD4BC7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BC608((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4BC7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 112) = *MEMORY[0x1E4F1F9F8];
  *(void *)(a1 + 128) = *(void *)(v4 + 16);
  *(void *)(a1 + 136) = -1;
  uint64_t v5 = MEMORY[0x1E4F1F9F0];
  *(_OWORD *)(a1 + 144) = *MEMORY[0x1E4F1F9F0];
  *(void *)(a1 + 160) = *(void *)(v5 + 16);
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 293) = 0;
  if (a3)
  {
    for (uint64_t i = 0; i != 72; i += 8)
      *(void *)(a1 + i) = *(void *)(a3 + i);
  }
  else
  {
    *(void *)a1 = 0x3FF0000000000000;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0x3FF0000000000000;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0x3FF0000000000000;
  }
  bzero((void *)(a1 + 252), 0x30uLL);
  *(int32x4_t *)(a1 + 284) = vdupq_n_s32(0x3FC90FDBu);
  bzero((void *)(a1 + 196), 0x38uLL);
  return a1;
}

uint64_t sub_1DD4BC8B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        uint64_t v21 = a3 + 304 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = sub_1DD4BCD5C(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_1DD4BCAA0((uint64_t)a1, v5, v12, v5 + 304 * a5);
      sub_1DD4BD06C((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x79435E50D79435E5 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0xD79435E50D7943) {
        sub_1DD4BACA0();
      }
      unint64_t v15 = 0x86BCA1AF286BCA1BLL * ((a2 - v13) >> 4);
      unint64_t v16 = 0x86BCA1AF286BCA1BLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x6BCA1AF286BCA1) {
        unint64_t v18 = 0xD79435E50D7943;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        long long v19 = (char *)sub_1DD4BC400(v9, v18);
      }
      else {
        long long v19 = 0;
      }
      uint64_t v23 = v19;
      uint64_t v24 = &v19[304 * v15];
      uint64_t v25 = v24;
      char v26 = &v19[304 * v18];
      sub_1DD4BCB8C(&v23, a3, a5);
      uint64_t v5 = sub_1DD4BCCA8(a1, &v23, v5);
      sub_1DD4BC608((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1DD4BCA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4BCAA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      long long v10 = *(_OWORD *)(v9 + 16);
      long long v11 = *(_OWORD *)(v9 + 32);
      long long v12 = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 60) = *(_OWORD *)(v9 + 60);
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 48) = v12;
      *(_OWORD *)(v8 + 16) = v10;
      *(void *)(v8 + 88) = 0;
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 80) = 0;
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(v9 + 80);
      *(void *)(v8 + 96) = *(void *)(v9 + 96);
      *(void *)(v9 + 88) = 0;
      *(void *)(v9 + 96) = 0;
      *(void *)(v9 + 80) = 0;
      long long v13 = *(_OWORD *)(v9 + 136);
      long long v14 = *(_OWORD *)(v9 + 152);
      long long v15 = *(_OWORD *)(v9 + 168);
      *(_OWORD *)(v8 + 120) = *(_OWORD *)(v9 + 120);
      *(_OWORD *)(v8 + 168) = v15;
      *(_OWORD *)(v8 + 152) = v14;
      *(_OWORD *)(v8 + 136) = v13;
      long long v16 = *(_OWORD *)(v9 + 200);
      long long v17 = *(_OWORD *)(v9 + 216);
      long long v18 = *(_OWORD *)(v9 + 232);
      *(_OWORD *)(v8 + 184) = *(_OWORD *)(v9 + 184);
      *(_OWORD *)(v8 + 232) = v18;
      *(_OWORD *)(v8 + 216) = v17;
      *(_OWORD *)(v8 + 200) = v16;
      long long v19 = *(_OWORD *)(v9 + 264);
      long long v20 = *(_OWORD *)(v9 + 280);
      uint64_t v21 = *(void *)(v9 + 293);
      *(_OWORD *)(v8 + 248) = *(_OWORD *)(v9 + 248);
      *(void *)(v8 + 293) = v21;
      *(_OWORD *)(v8 + 264) = v19;
      *(_OWORD *)(v8 + 280) = v20;
      *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
      v8 += 304;
      v9 += 304;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1DD4BCF18(a2, v7, v6);
}

void *sub_1DD4BCB8C(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 304 * a3;
    uint64_t v7 = v4 + 80;
    uint64_t v8 = 304 * a3;
    do
    {
      *(_OWORD *)(v7 - 80) = *(_OWORD *)a2;
      long long v9 = *(_OWORD *)(a2 + 16);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v7 - 20) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v7 - 48) = v10;
      *(_OWORD *)(v7 - 32) = v11;
      *(_OWORD *)(v7 - 64) = v9;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      uint64_t result = sub_1DD4BB060((void *)v7, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 6);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 104);
      long long v12 = *(_OWORD *)(a2 + 120);
      long long v13 = *(_OWORD *)(a2 + 136);
      long long v14 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(v7 + 72) = v14;
      *(_OWORD *)(v7 + 56) = v13;
      *(_OWORD *)(v7 + 40) = v12;
      long long v15 = *(_OWORD *)(a2 + 184);
      long long v16 = *(_OWORD *)(a2 + 200);
      long long v17 = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(v7 + 152) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v7 + 136) = v17;
      *(_OWORD *)(v7 + 120) = v16;
      *(_OWORD *)(v7 + 104) = v15;
      long long v18 = *(_OWORD *)(a2 + 248);
      long long v19 = *(_OWORD *)(a2 + 264);
      long long v20 = *(_OWORD *)(a2 + 280);
      *(void *)(v7 + 213) = *(void *)(a2 + 293);
      *(_OWORD *)(v7 + 200) = v20;
      *(_OWORD *)(v7 + 184) = v19;
      *(_OWORD *)(v7 + 168) = v18;
      v7 += 304;
      a2 += 304;
      v8 -= 304;
    }
    while (v8);
  }
  else
  {
    uint64_t v6 = result[2];
  }
  v3[2] = v6;
  return result;
}

void sub_1DD4BCC9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2 - 80;
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4BCCA8(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_1DD4BC44C((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1DD4BD280(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1DD4BCD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v22 = a4;
  uint64_t v23 = a4;
  v20[0] = a1;
  v20[1] = &v22;
  void v20[2] = &v23;
  char v21 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      long long v7 = *(_OWORD *)(v6 + 16);
      long long v8 = *(_OWORD *)(v6 + 32);
      long long v9 = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(v6 + 60);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + 16) = v7;
      *(void *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = 0;
      *(void *)(v4 + 80) = 0;
      sub_1DD4BB060((void *)(v4 + 80), *(const void **)(v6 + 80), *(void *)(v6 + 88), (uint64_t)(*(void *)(v6 + 88) - *(void *)(v6 + 80)) >> 6);
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(v6 + 104);
      long long v10 = *(_OWORD *)(v6 + 120);
      long long v11 = *(_OWORD *)(v6 + 136);
      long long v12 = *(_OWORD *)(v6 + 152);
      *(_OWORD *)(v4 + 168) = *(_OWORD *)(v6 + 168);
      *(_OWORD *)(v4 + 152) = v12;
      *(_OWORD *)(v4 + 136) = v11;
      *(_OWORD *)(v4 + 120) = v10;
      long long v13 = *(_OWORD *)(v6 + 184);
      long long v14 = *(_OWORD *)(v6 + 200);
      long long v15 = *(_OWORD *)(v6 + 216);
      *(_OWORD *)(v4 + 232) = *(_OWORD *)(v6 + 232);
      *(_OWORD *)(v4 + 216) = v15;
      *(_OWORD *)(v4 + 200) = v14;
      *(_OWORD *)(v4 + 184) = v13;
      long long v16 = *(_OWORD *)(v6 + 248);
      long long v17 = *(_OWORD *)(v6 + 264);
      long long v18 = *(_OWORD *)(v6 + 280);
      *(void *)(v4 + 293) = *(void *)(v6 + 293);
      *(_OWORD *)(v4 + 264) = v17;
      *(_OWORD *)(v4 + 280) = v18;
      *(_OWORD *)(v4 + 248) = v16;
      uint64_t v4 = v23 + 304;
      v23 += 304;
      v6 += 304;
    }
    while (v6 != a3);
  }
  char v21 = 1;
  sub_1DD4BCE98((uint64_t)v20);
  return v4;
}

void sub_1DD4BCE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DD4BCE98(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DD4BCED0(a1);
  }
  return a1;
}

void sub_1DD4BCED0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 224);
    if (v3)
    {
      *(void *)(v1 - 216) = v3;
      operator delete(v3);
    }
    v1 -= 304;
  }
}

uint64_t sub_1DD4BCF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      long long v7 = (_OWORD *)(a3 - 304);
      *long long v7 = *(_OWORD *)(v6 - 304);
      long long v8 = *(_OWORD *)(v6 - 288);
      long long v9 = *(_OWORD *)(v6 - 272);
      long long v10 = *(_OWORD *)(v6 - 256);
      *(_OWORD *)(a3 - 244) = *(_OWORD *)(v6 - 244);
      *(_OWORD *)(a3 - 256) = v10;
      v7[1] = v8;
      v7[2] = v9;
      sub_1DD4BD018(a3 - 224, (__n128 *)(v6 - 224));
      *(_OWORD *)(a3 - 200) = *(_OWORD *)(v6 - 200);
      long long v11 = *(_OWORD *)(v6 - 184);
      long long v12 = *(_OWORD *)(v6 - 168);
      long long v13 = *(_OWORD *)(v6 - 152);
      *(_OWORD *)(a3 - 136) = *(_OWORD *)(v6 - 136);
      *(_OWORD *)(a3 - 152) = v13;
      *(_OWORD *)(a3 - 168) = v12;
      *(_OWORD *)(a3 - 184) = v11;
      long long v14 = *(_OWORD *)(v6 - 120);
      long long v15 = *(_OWORD *)(v6 - 104);
      long long v16 = *(_OWORD *)(v6 - 88);
      *(_OWORD *)(a3 - 72) = *(_OWORD *)(v6 - 72);
      *(_OWORD *)(a3 - 88) = v16;
      *(_OWORD *)(a3 - 104) = v15;
      *(_OWORD *)(a3 - 120) = v14;
      long long v17 = *(_OWORD *)(v6 - 56);
      long long v18 = *(_OWORD *)(v6 - 40);
      long long v19 = *(_OWORD *)(v6 - 24);
      *(void *)(a3 - 11) = *(void *)(v6 - 11);
      *(_OWORD *)(a3 - 24) = v19;
      *(_OWORD *)(a3 - 40) = v18;
      *(_OWORD *)(a3 - 56) = v17;
      a3 -= 304;
      v6 -= 304;
    }
    while (v6 != a1);
  }
  return a2;
}

__n128 sub_1DD4BD018(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1DD4BD06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 88;
  do
  {
    uint64_t v7 = v6 - 88;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 88);
    long long v8 = *(_OWORD *)(v6 - 72);
    long long v9 = *(_OWORD *)(v6 - 56);
    long long v10 = *(_OWORD *)(v6 - 40);
    *(_OWORD *)(a4 + 60) = *(_OWORD *)(v6 - 28);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 48) = v10;
    *(_OWORD *)(a4 + 16) = v8;
    if (a4 != v6 - 88) {
      sub_1DD4BD174((char *)(a4 + 80), *(char **)(v6 - 8), *(void *)v6, (uint64_t)(*(void *)v6 - *(void *)(v6 - 8)) >> 6);
    }
    *(_OWORD *)(a4 + 104) = *(_OWORD *)(v6 + 16);
    long long v11 = *(_OWORD *)(v6 + 32);
    long long v12 = *(_OWORD *)(v6 + 48);
    long long v13 = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a4 + 168) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a4 + 152) = v13;
    *(_OWORD *)(a4 + 136) = v12;
    *(_OWORD *)(a4 + 120) = v11;
    long long v14 = *(_OWORD *)(v6 + 96);
    long long v15 = *(_OWORD *)(v6 + 112);
    long long v16 = *(_OWORD *)(v6 + 128);
    *(_OWORD *)(a4 + 232) = *(_OWORD *)(v6 + 144);
    *(_OWORD *)(a4 + 216) = v16;
    *(_OWORD *)(a4 + 200) = v15;
    *(_OWORD *)(a4 + 184) = v14;
    long long v17 = *(_OWORD *)(v6 + 160);
    long long v18 = *(_OWORD *)(v6 + 176);
    long long v19 = *(_OWORD *)(v6 + 192);
    *(void *)(a4 + 293) = *(void *)(v6 + 205);
    *(_OWORD *)(a4 + 264) = v18;
    *(_OWORD *)(a4 + 280) = v19;
    *(_OWORD *)(a4 + 248) = v17;
    a4 += 304;
    v6 += 304;
  }
  while (v7 + 304 != v5);
  return v5;
}

char *sub_1DD4BD174(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 6)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 58) {
      sub_1DD4BACA0();
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = sub_1DD4BB0DC(v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 6;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    long long v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

uint64_t sub_1DD4BD280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v21 = a4;
  uint64_t v20 = a4;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v4 + 32) = v6;
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)(v4 + 16) = v5;
      *(void *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = 0;
      *(void *)(v4 + 80) = 0;
      *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 80);
      *(void *)(v4 + 96) = *(void *)(a2 + 96);
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 80) = 0;
      long long v8 = *(_OWORD *)(a2 + 136);
      long long v9 = *(_OWORD *)(a2 + 152);
      long long v10 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(v4 + 168) = v10;
      *(_OWORD *)(v4 + 152) = v9;
      *(_OWORD *)(v4 + 136) = v8;
      long long v11 = *(_OWORD *)(a2 + 200);
      long long v12 = *(_OWORD *)(a2 + 216);
      long long v13 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(v4 + 232) = v13;
      *(_OWORD *)(v4 + 216) = v12;
      *(_OWORD *)(v4 + 200) = v11;
      long long v14 = *(_OWORD *)(a2 + 264);
      long long v15 = *(_OWORD *)(a2 + 280);
      uint64_t v16 = *(void *)(a2 + 293);
      *(_OWORD *)(v4 + 248) = *(_OWORD *)(a2 + 248);
      *(void *)(v4 + 293) = v16;
      *(_OWORD *)(v4 + 264) = v14;
      *(_OWORD *)(v4 + 280) = v15;
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
      v4 += 304;
      a2 += 304;
    }
    while (a2 != a3);
    uint64_t v21 = v4;
  }
  char v19 = 1;
  sub_1DD4BCE98((uint64_t)v18);
  return v4;
}

void *sub_1DD4BD398(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BD410(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD4BD3F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4BD410(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1DD4BACA0();
  }
  __n128 result = (char *)sub_1DD4BAF80((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t *sub_1DD4BD454(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  long long v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    long long v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    sub_1DD4BD518(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1DD4BD518(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  long long v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = sub_1DD4BD570(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1DD4BD570(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), long long v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            long long v9 = (uint64_t **)a2[2];
          }
          else
          {
            long long v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *long long v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), long long v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *long long v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_1DD4BD708(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[5];
    if (v3)
    {
      __p[6] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *sub_1DD4BD768(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1DD4BD858(a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_1DD4BDBE0(a1 + 3, a2 + 24);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_1DD4BDFEC(a1 + 6, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  sub_1DD4BE0E4(a1 + 9, *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5);
  return a1;
}

void sub_1DD4BD814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v14 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 56) = v14;
    operator delete(v14);
  }
  sub_1DD4BDF88(v11, *(void **)(v10 + 32));
  a10 = (void **)v10;
  sub_1DD4BDB34(&a10);
  _Unwind_Resume(a1);
}

void *sub_1DD4BD858(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_1DD4BD8E0(result, a4);
    __n128 result = sub_1DD4BD97C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD4BD8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1DD4BDB34(&a9);
  _Unwind_Resume(a1);
}

char *sub_1DD4BD8E0(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1DD4BACA0();
  }
  __n128 result = (char *)sub_1DD4BD934((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_1DD4BD934(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1DD4BAD90();
  }
  return operator new(24 * a2);
}

void *sub_1DD4BD97C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1DD4BDA30(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1DD4BDAAC((uint64_t)v8);
  return v4;
}

void sub_1DD4BDA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1DD4BDA30(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1DD4BD410(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BDA90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4BDAAC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DD4BDAE4(a1);
  }
  return a1;
}

void sub_1DD4BDAE4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      long long v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_1DD4BDB34(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1DD4BDB88((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1DD4BDB88(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      long long v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t *sub_1DD4BDBE0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1DD4BDC38(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1DD4BDC20(_Unwind_Exception *a1)
{
  sub_1DD4BDF88(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1DD4BDC38(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_1DD4BDCC4(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1DD4BDCC4(uint64_t **a1, void *a2, unint64_t *a3, void *a4)
{
  uint64_t v6 = (uint64_t **)sub_1DD4BDD48(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_1DD4BDEF0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1DD4BD518(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

void *sub_1DD4BDD48(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          size_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      size_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_1DD4BDEF0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (const void *)a2[1];
  void v6[4] = *a2;
  v6[6] = 0;
  v6[7] = 0;
  v6[5] = 0;
  __n128 result = sub_1DD4BDA30(v6 + 5, v7, a2[2], (uint64_t)(a2[2] - (void)v7) >> 3);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1DD4BDF6C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1DD4BD708(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1DD4BDF88(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1DD4BDF88(a1, *a2);
    sub_1DD4BDF88(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void *sub_1DD4BDFEC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = sub_1DD4BE068(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BE04C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4BE068(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1DD4BACA0();
  }
  __n128 result = (char *)sub_1DD4BE0AC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_1DD4BE0AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1DD4BAD90();
  }
  return operator new(16 * a2);
}

void *sub_1DD4BE0E4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = sub_1DD4BE160(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BE144(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4BE160(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1DD4BACA0();
  }
  __n128 result = (char *)sub_1DD4BE1A4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_1DD4BE1A4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1DD4BAD90();
  }
  return operator new(32 * a2);
}

void *sub_1DD4BE1DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1DD4BE260(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1DD4BE2E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F38B06A8;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  id v4 = *(id *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_1DD4BEF24((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 48) = v5;
  sub_1DD4BE760(a1 + 96, a2 + 96);
  *(void *)a1 = &unk_1F38B02E8;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  if (*(void *)(a2 + 240)) {
    operator new();
  }
  if (*(void *)(a2 + 248)) {
    operator new();
  }
  return a1;
}

void sub_1DD4BE494(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v3, 0x1080C409938AC02);
  long long v5 = *(void **)(v1 + 256);
  *(void *)(v1 + 256) = 0;
  if (v5) {
    sub_1DD4BED04(v1 + 256, v5);
  }
  uint64_t v6 = *(void *)(v1 + 248);
  *(void *)(v1 + 248) = 0;
  if (v6) {
    MEMORY[0x1E01B7750](v6, 0x1000C40FF89C88ELL);
  }
  uint64_t v7 = *v2;
  uint64_t *v2 = 0;
  if (v7) {
    sub_1DD4BECA8((uint64_t)v2, v7);
  }
  sub_1DD4BE534(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4BE534(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B06A8;
  uint64_t v2 = *(void **)(a1 + 192);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(void *)(a1 + 176) = v3;
    operator delete(v3);
  }
  id v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(void *)(a1 + 152) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(void *)(a1 + 128) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(void *)(a1 + 104) = v6;
    operator delete(v6);
  }
  size_t v8 = (void **)(a1 + 24);
  sub_1DD4BEE80(&v8);

  return a1;
}

uint64_t sub_1DD4BE5E0(void *a1)
{
  *a1 = &unk_1F38B02E8;
  uint64_t v2 = (void *)a1[32];
  a1[32] = 0;
  if (v2) {
    sub_1DD4BED04((uint64_t)(a1 + 32), v2);
  }
  uint64_t v3 = a1[31];
  a1[31] = 0;
  if (v3) {
    MEMORY[0x1E01B7750](v3, 0x1000C40FF89C88ELL);
  }
  uint64_t v4 = a1[30];
  a1[30] = 0;
  if (v4) {
    sub_1DD4BECA8((uint64_t)(a1 + 30), v4);
  }
  return sub_1DD4BE534((uint64_t)a1);
}

void sub_1DD4BE678(void *a1)
{
  *a1 = &unk_1F38B02E8;
  uint64_t v2 = (void *)a1[32];
  a1[32] = 0;
  if (v2) {
    sub_1DD4BED04((uint64_t)(a1 + 32), v2);
  }
  uint64_t v3 = a1[31];
  a1[31] = 0;
  if (v3) {
    MEMORY[0x1E01B7750](v3, 0x1000C40FF89C88ELL);
  }
  uint64_t v4 = a1[30];
  a1[30] = 0;
  if (v4) {
    sub_1DD4BECA8((uint64_t)(a1 + 30), v4);
  }
  sub_1DD4BE534((uint64_t)a1);
  JUMPOUT(0x1E01B7750);
}

void sub_1DD4BE728(uint64_t a1)
{
  sub_1DD4BE534(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4BE760(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1DD4BE8C4((void *)a1, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_1DD4BE940((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_1DD4BEA60((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_1DD4BE940((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
  sub_1DD4BEADC((void *)(a1 + 96), a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

void sub_1DD4BE860(_Unwind_Exception *exception_object)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v7;
    operator delete(v7);
  }
  size_t v8 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4BE8C4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1DD4BD8E0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BE924(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4BE940(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1DD4BE9BC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BE9A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4BE9BC(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_1DD4BACA0();
  }
  __n128 result = (char *)sub_1DD4BEA14((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *sub_1DD4BEA14(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_1DD4BAD90();
  }
  return operator new(72 * a2);
}

void *sub_1DD4BEA60(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1DD4BD8E0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4BEAC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4BEADC(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    sub_1DD4BEB38(a1, v4);
    sub_1DD4BEB80(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void *sub_1DD4BEB38(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1DD4BACA0();
  }
  __n128 result = sub_1DD4BAF80((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_1DD4BEB80(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
  }
  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  sub_1DD4BEC00(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void sub_1DD4BEC00(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      *unint64_t v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void sub_1DD4BECA8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 8);
    if (v2)
    {
      *(void *)(a2 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1E01B7750);
  }
}

void sub_1DD4BED04(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[10];
    if (v3)
    {
      a2[11] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    long long v5 = (void *)a2[4];
    if (v5)
    {
      a2[5] = v5;
      operator delete(v5);
    }
    uint64_t v6 = (void *)a2[1];
    if (v6)
    {
      a2[2] = v6;
      operator delete(v6);
    }
    JUMPOUT(0x1E01B7750);
  }
}

void sub_1DD4BED90(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1DD4BACA0();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v6 = (char *)sub_1DD4BD934(v3, a2);
    unint64_t v7 = &v6[24 * v5];
    uint64_t v9 = &v6[24 * v8];
    BOOL v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1DD4BEE80(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1DD4BEED4((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1DD4BEED4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 304)
  {
    uint64_t v4 = *(void **)(i - 224);
    if (v4)
    {
      *(void *)(i - 216) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *sub_1DD4BEF24(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1DD4BEFAC(result, a4);
    __n128 result = (void *)sub_1DD4BCD5C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD4BEF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1DD4BEE80(&a9);
  _Unwind_Resume(a1);
}

char *sub_1DD4BEFAC(void *a1, unint64_t a2)
{
  if (a2 >= 0xD79435E50D7944) {
    sub_1DD4BACA0();
  }
  __n128 result = (char *)sub_1DD4BC400((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[304 * v4];
  return result;
}

void sub_1DD4BF004(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 4) < a4)
  {
    sub_1DD4BF1AC(a1);
    if (a4 > 0xD79435E50D7943) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 4) >= 0x6BCA1AF286BCA1) {
      unint64_t v11 = 0xD79435E50D7943;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1DD4BEFAC(a1, v11);
    uint64_t v12 = sub_1DD4BCD5C(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[1] - v9) >> 4) < a4)
  {
    uint64_t v13 = a2 + 16 * ((a1[1] - v9) >> 4);
    sub_1DD4BD06C((uint64_t)&v18, a2, v13, v9);
    uint64_t v12 = sub_1DD4BCD5C(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_1DD4BD06C((uint64_t)&v19, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      size_t v17 = *(void **)(v16 - 224);
      if (v17)
      {
        *(void *)(v16 - 216) = v17;
        operator delete(v17);
      }
      v16 -= 304;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1DD4BF19C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DD4BF1A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DD4BF1AC(uint64_t *a1)
{
  if (*a1)
  {
    sub_1DD4BEED4(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_1DD4BF1E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1DD4BF270(void *a1)
{
  sub_1DD4BF2A8(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4BF2A8(void *a1)
{
  *a1 = &unk_1F38B01D8;
  uint64_t v2 = (void *)a1[29];
  if (v2)
  {
    sub_1DD4E69A8(v2);
    uint64_t v3 = a1[29];
    if (v3)
    {
      uint64_t v4 = *(void **)v3;
      if (*(void *)v3)
      {
        *(void *)(v3 + 8) = v4;
        operator delete(v4);
      }
      MEMORY[0x1E01B7750](v3, 0x80C40D6874129);
    }
    a1[29] = 0;
  }
  return sub_1DD4BE534((uint64_t)a1);
}

uint64_t sub_1DD4BF33C(uint64_t a1)
{
  return a1;
}

void sub_1DD4BF368(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1E01B7750);
}

id *sub_1DD4BF3B4(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 8);
  uint64_t v2 = (id *)operator new(0x10uLL);
  id *v2 = &unk_1F38B0720;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1DD4BF408(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F38B0720;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1DD4BF434(uint64_t a1)
{
}

void sub_1DD4BF43C(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

void sub_1DD4BF478(uint64_t a1, uint64_t *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (objc_opt_respondsToSelector())
  {
    uint64_t v4 = sub_1DD4AEC38(v2);
    uint64_t v9 = IC_A_STAT_FRAME_MATCH_CONFIDENCE;
    uint64_t v5 = [NSNumber numberWithDouble:*(float *)(v2 + 168)];
    v10[0] = v5;
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

    long long v7 = *(_OWORD *)(v2 + 112);
    uint64_t v8 = *(void *)(v2 + 128);
    [WeakRetained ICReportFrameAnalysis:v4 forPresentationTime:&v7 withStats:v6];
  }
}

void sub_1DD4BF588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4BF5C8(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38B0048)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4BF608()
{
  return &unk_1F38B0048;
}

void *sub_1DD4BF614(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1DD4BF698(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1DD4BF734(void *a1)
{
  sub_1DD4BF76C(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4BF76C(void *a1)
{
  *a1 = &unk_1F38B02C8;
  uint64_t v2 = a1[29];
  if (v2)
  {
    sub_1DD4E7D10(v2);
    while (1)
    {
      unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1[29] + 136));
      if ((v3 & 1) == 0) {
        break;
      }
      usleep(0x3E8u);
    }
    uint64_t v4 = a1[29];
    a1[29] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else
  {
    a1[29] = 0;
  }
  return sub_1DD4BE534((uint64_t)a1);
}

uint64_t sub_1DD4BF824(uint64_t a1)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)a1 = &unk_1F38B0328;
  *(_WORD *)(a1 + 232) = 0;
  uint64_t v2 = (_OWORD *)MEMORY[0x1E4F1DB20];
  *(unsigned char *)(a1 + 234) = 0;
  long long v3 = v2[1];
  *(_OWORD *)(a1 + 240) = *v2;
  *(_OWORD *)(a1 + 256) = v3;
  *(void *)(a1 + 336) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 304) = xmmword_1DD511A40;
  *(_OWORD *)(a1 + 320) = unk_1DD511A50;
  *(_OWORD *)(a1 + 272) = xmmword_1DD511A20;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)algn_1DD511A30;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = a1 + 384;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  sub_1DD4EDEE4(a1 + 448);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  return a1;
}

void sub_1DD4BF91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v16 = *(void **)(v10 + 424);
  if (v16)
  {
    *(void *)(v10 + 432) = v16;
    operator delete(v16);
  }
  size_t v17 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 408) = v17;
    operator delete(v17);
  }
  sub_1DD4BDF88(v11, *v13);
  a10 = (void **)(v10 + 352);
  sub_1DD4BDB34(&a10);
  uint64_t v18 = *v12;
  *uint64_t v12 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_1DD4BE534(v10);
  _Unwind_Resume(a1);
}

void sub_1DD4BF9A0(uint64_t a1)
{
  sub_1DD4BF9D8(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4BF9D8(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B0328;
  uint64_t v2 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  if (v2) {
    sub_1DD4C0394(a1 + 584, v2);
  }
  sub_1DD4BF1E8((void *)(a1 + 552));
  sub_1DD4BE1DC((void *)(a1 + 520));
  sub_1DD4BE260((void *)(a1 + 488));
  nullsub_2(a1 + 448);
  long long v3 = *(void **)(a1 + 424);
  if (v3)
  {
    *(void *)(a1 + 432) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 400);
  if (v4)
  {
    *(void *)(a1 + 408) = v4;
    operator delete(v4);
  }
  sub_1DD4BDF88(a1 + 376, *(void **)(a1 + 384));
  long long v7 = (void **)(a1 + 352);
  sub_1DD4BDB34(&v7);
  uint64_t v5 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return sub_1DD4BE534(a1);
}

uint64_t sub_1DD4BFAC8(uint64_t a1)
{
  return a1;
}

void sub_1DD4BFAF4(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1E01B7750);
}

id *sub_1DD4BFB40(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 8);
  uint64_t v2 = (id *)operator new(0x10uLL);
  id *v2 = &unk_1F38AFA20;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1DD4BFB94(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F38AFA20;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1DD4BFBC0(uint64_t a1)
{
}

void sub_1DD4BFBC8(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

uint64_t sub_1DD4BFC04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (objc_opt_respondsToSelector()) {
    uint64_t v2 = [WeakRetained ICShouldBeCanceled];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1DD4BFC58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4BFC68(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AF9B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4BFCA8()
{
  return &unk_1F38AF9B0;
}

void *sub_1DD4BFCB4(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    long long v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DD4BFF14(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1DD4BAC8C(a1);
}

uint64_t sub_1DD4BFF20(uint64_t a1)
{
  return a1;
}

void sub_1DD4BFF4C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1E01B7750);
}

id *sub_1DD4BFF98(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 8);
  uint64_t v2 = (id *)operator new(0x10uLL);
  id *v2 = &unk_1F38AFA78;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1DD4BFFEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F38AFA78;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1DD4C0018(uint64_t a1)
{
}

void sub_1DD4C0020(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

void sub_1DD4C005C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (objc_opt_respondsToSelector())
  {
    LODWORD(v3) = v2;
    [WeakRetained ICReportProgress:v3];
  }
}

void sub_1DD4C00C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C00DC(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AF9C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4C011C()
{
  return &unk_1F38AF9C0;
}

void *sub_1DD4C0128(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    double v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DD4C0388(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1DD4BAC8C(a1);
}

void sub_1DD4C0394(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    double v3 = *(void **)(a2 + 520);
    if (v3)
    {
      *(void *)(a2 + 528) = v3;
      operator delete(v3);
    }
    sub_1DD4C042C(a2 + 296);
    uint64_t v5 = (void **)(a2 + 272);
    sub_1DD4BDB34(&v5);
    uint64_t v4 = *(void **)(a2 + 256);
    *(void *)(a2 + 256) = 0;
    if (v4) {
      sub_1DD4BED04(a2 + 256, v4);
    }
    sub_1DD4BE1DC((void *)(a2 + 192));
    sub_1DD4BE260((void *)(a2 + 160));
    MEMORY[0x1E01B7750](a2, 0x10B0C408AFB0367);
  }
}

uint64_t sub_1DD4C042C(uint64_t a1)
{
  sub_1DD4BDF88(a1 + 192, *(void **)(a1 + 200));
  int v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(void *)(a1 + 152) = v3;
    operator delete(v3);
  }
  uint64_t v9 = (void **)(a1 + 120);
  sub_1DD4BDB34(&v9);
  uint64_t v9 = (void **)(a1 + 96);
  sub_1DD4BDB34(&v9);
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_1DD4C04E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1DD4C057C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1DD4BEFAC(result, a4);
    __n128 result = (void *)sub_1DD4C0604((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD4C05E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1DD4BEE80(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C0604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v22 = a4;
  uint64_t v23 = a4;
  v20[0] = a1;
  v20[1] = &v22;
  void v20[2] = &v23;
  char v21 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      long long v7 = *(_OWORD *)(v6 + 16);
      long long v8 = *(_OWORD *)(v6 + 32);
      long long v9 = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(v6 + 60);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + 16) = v7;
      *(void *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = 0;
      *(void *)(v4 + 80) = 0;
      sub_1DD4BB060((void *)(v4 + 80), *(const void **)(v6 + 80), *(void *)(v6 + 88), (uint64_t)(*(void *)(v6 + 88) - *(void *)(v6 + 80)) >> 6);
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(v6 + 104);
      long long v10 = *(_OWORD *)(v6 + 120);
      long long v11 = *(_OWORD *)(v6 + 136);
      long long v12 = *(_OWORD *)(v6 + 152);
      *(_OWORD *)(v4 + 168) = *(_OWORD *)(v6 + 168);
      *(_OWORD *)(v4 + 152) = v12;
      *(_OWORD *)(v4 + 136) = v11;
      *(_OWORD *)(v4 + 120) = v10;
      long long v13 = *(_OWORD *)(v6 + 184);
      long long v14 = *(_OWORD *)(v6 + 200);
      long long v15 = *(_OWORD *)(v6 + 216);
      *(_OWORD *)(v4 + 232) = *(_OWORD *)(v6 + 232);
      *(_OWORD *)(v4 + 216) = v15;
      *(_OWORD *)(v4 + 200) = v14;
      *(_OWORD *)(v4 + 184) = v13;
      long long v16 = *(_OWORD *)(v6 + 248);
      long long v17 = *(_OWORD *)(v6 + 264);
      long long v18 = *(_OWORD *)(v6 + 280);
      *(void *)(v4 + 293) = *(void *)(v6 + 293);
      *(_OWORD *)(v4 + 264) = v17;
      *(_OWORD *)(v4 + 280) = v18;
      *(_OWORD *)(v4 + 248) = v16;
      uint64_t v4 = v23 + 304;
      v23 += 304;
      v6 += 304;
    }
    while (v6 != a3);
  }
  char v21 = 1;
  sub_1DD4BCE98((uint64_t)v20);
  return v4;
}

void sub_1DD4C072C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DD4C0740(uint64_t a1)
{
  return a1;
}

void sub_1DD4C076C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1E01B7750);
}

id *sub_1DD4C07B8(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 8);
  int v2 = (id *)operator new(0x10uLL);
  id *v2 = &unk_1F38AFAD0;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1DD4C080C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F38AFAD0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1DD4C0838(uint64_t a1)
{
}

void sub_1DD4C0840(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

uint64_t sub_1DD4C087C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (objc_opt_respondsToSelector()) {
    uint64_t v2 = [WeakRetained ICShouldBeCanceled];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1DD4C08D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C08E0(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AF9D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4C0920()
{
  return &unk_1F38AF9D0;
}

uint64_t sub_1DD4C092C(uint64_t a1)
{
  return a1;
}

void sub_1DD4C0958(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  JUMPOUT(0x1E01B7750);
}

id *sub_1DD4C09A4(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 8);
  uint64_t v2 = (id *)operator new(0x10uLL);
  id *v2 = &unk_1F38AFB28;
  objc_copyWeak(v2 + 1, v1);
  return v2;
}

void sub_1DD4C09F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F38AFB28;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void sub_1DD4C0A24(uint64_t a1)
{
}

void sub_1DD4C0A2C(id *a1)
{
  objc_destroyWeak(a1 + 1);
  operator delete(a1);
}

void sub_1DD4C0A68(uint64_t a1, int *a2)
{
  int v2 = *a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (objc_opt_respondsToSelector())
  {
    LODWORD(v3) = v2;
    [WeakRetained ICReportProgress:v3];
  }
}

void sub_1DD4C0AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C0AE8(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AF9E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4C0B28()
{
  return &unk_1F38AF9E0;
}

void sub_1DD4C0B34(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    double v3 = *(void **)(a2 + 96);
    if (v3) {
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a2 + 72);
    if (v4)
    {
      *(void *)(a2 + 80) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(void *)(a2 + 56) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(a2 + 24);
    if (v6)
    {
      *(void *)(a2 + 32) = v6;
      operator delete(v6);
    }
    long long v7 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v7;
      operator delete(v7);
    }
    JUMPOUT(0x1E01B7750);
  }
}

void *sub_1DD4C0BCC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1DD4BD8E0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4C0C2C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4C0C48(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1DD4BE9BC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4C0CA8(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4C0CC4(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  if (a6)
  {
    sub_1DD4BEB38(a1, a6);
    sub_1DD4BEB80(a1, a2, a3, a4, a5, a6);
  }
}

void sub_1DD4C0D30(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1DD4C0D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  sub_1DD4BB060((void *)(v4 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 6);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 152) = v10;
  *(_OWORD *)(v4 + 136) = v9;
  *(_OWORD *)(v4 + 120) = v8;
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  long long v13 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v4 + 216) = v13;
  *(_OWORD *)(v4 + 200) = v12;
  *(_OWORD *)(v4 + 184) = v11;
  __n128 result = *(__n128 *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 264);
  long long v16 = *(_OWORD *)(a2 + 280);
  *(void *)(v4 + 293) = *(void *)(a2 + 293);
  *(_OWORD *)(v4 + 264) = v15;
  *(_OWORD *)(v4 + 280) = v16;
  *(__n128 *)(v4 + 248) = result;
  *(void *)(a1 + 8) = v4 + 304;
  return result;
}

void sub_1DD4C0E28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C0E30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xD79435E50D7943) {
    sub_1DD4BACA0();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x6BCA1AF286BCA1) {
    unint64_t v9 = 0xD79435E50D7943;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v30 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1DD4BC400(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[304 * v4];
  v27[0] = v10;
  v27[1] = v11;
  long long v28 = v11;
  char v29 = &v10[304 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 1) = v12;
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 10) = 0;
  sub_1DD4BB060((void *)v11 + 10, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 6);
  long long v15 = &v10[304 * v4];
  *(_OWORD *)(v15 + 104) = *(_OWORD *)(a2 + 104);
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  long long v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v15 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v15 + 152) = v18;
  *(_OWORD *)(v15 + 136) = v17;
  *(_OWORD *)(v15 + 120) = v16;
  long long v19 = *(_OWORD *)(a2 + 184);
  long long v20 = *(_OWORD *)(a2 + 200);
  long long v21 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v15 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v15 + 216) = v21;
  *(_OWORD *)(v15 + 200) = v20;
  *(_OWORD *)(v15 + 184) = v19;
  long long v22 = *(_OWORD *)(a2 + 264);
  long long v23 = *(_OWORD *)(a2 + 280);
  uint64_t v24 = *(void *)(a2 + 293);
  *(_OWORD *)(v15 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(v15 + 293) = v24;
  *(_OWORD *)(v15 + 264) = v22;
  *(_OWORD *)(v15 + 280) = v23;
  v28 += 304;
  sub_1DD4BC388(a1, v27);
  uint64_t v25 = a1[1];
  sub_1DD4BC608((uint64_t)v27);
  return v25;
}

void sub_1DD4C0FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BC608((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C0FF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        uint64_t v21 = a3 + 304 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = sub_1DD4C0604(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_1DD4BCAA0((uint64_t)a1, v5, v12, v5 + 304 * a5);
      sub_1DD4BD06C((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x79435E50D79435E5 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0xD79435E50D7943) {
        sub_1DD4BACA0();
      }
      unint64_t v15 = 0x86BCA1AF286BCA1BLL * ((a2 - v13) >> 4);
      unint64_t v16 = 0x86BCA1AF286BCA1BLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x6BCA1AF286BCA1) {
        unint64_t v18 = 0xD79435E50D7943;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        long long v19 = (char *)sub_1DD4BC400(v9, v18);
      }
      else {
        long long v19 = 0;
      }
      long long v23 = v19;
      uint64_t v24 = &v19[304 * v15];
      uint64_t v25 = v24;
      char v26 = &v19[304 * v18];
      sub_1DD4C11D8(&v23, a3, a5);
      uint64_t v5 = sub_1DD4BCCA8(a1, &v23, v5);
      sub_1DD4BC608((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1DD4C11B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_1DD4C11D8(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 304 * a3;
    uint64_t v7 = v4 + 80;
    uint64_t v8 = 304 * a3;
    do
    {
      *(_OWORD *)(v7 - 80) = *(_OWORD *)a2;
      long long v9 = *(_OWORD *)(a2 + 16);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v7 - 20) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v7 - 48) = v10;
      *(_OWORD *)(v7 - 32) = v11;
      *(_OWORD *)(v7 - 64) = v9;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      __n128 result = sub_1DD4BB060((void *)v7, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 6);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 104);
      long long v12 = *(_OWORD *)(a2 + 120);
      long long v13 = *(_OWORD *)(a2 + 136);
      long long v14 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(v7 + 72) = v14;
      *(_OWORD *)(v7 + 56) = v13;
      *(_OWORD *)(v7 + 40) = v12;
      long long v15 = *(_OWORD *)(a2 + 184);
      long long v16 = *(_OWORD *)(a2 + 200);
      long long v17 = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(v7 + 152) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(v7 + 136) = v17;
      *(_OWORD *)(v7 + 120) = v16;
      *(_OWORD *)(v7 + 104) = v15;
      long long v18 = *(_OWORD *)(a2 + 248);
      long long v19 = *(_OWORD *)(a2 + 264);
      long long v20 = *(_OWORD *)(a2 + 280);
      *(void *)(v7 + 213) = *(void *)(a2 + 293);
      *(_OWORD *)(v7 + 200) = v20;
      *(_OWORD *)(v7 + 184) = v19;
      *(_OWORD *)(v7 + 168) = v18;
      v7 += 304;
      a2 += 304;
      v8 -= 304;
    }
    while (v8);
  }
  else
  {
    uint64_t v6 = result[2];
  }
  v3[2] = v6;
  return result;
}

void sub_1DD4C12E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2 - 80;
  _Unwind_Resume(a1);
}

void ***sub_1DD4C12F4(void ***result, void **a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_1DD4BEE80(&v3);
    return (void ***)MEMORY[0x1E01B7750](v2, 0x20C40960023A9);
  }
  return result;
}

void sub_1DD4C1348(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1DD4C1348(a1, *a2);
    sub_1DD4C1348(a1, a2[1]);
    uint64_t v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **sub_1DD4C13AC(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    long long v11 = (char *)operator new(0x70uLL);
    *((void *)v11 + 4) = **a4;
    long long v12 = (long long *)MEMORY[0x1E4F1F9F8];
    uint64_t v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *((void *)v11 + 7) = v13;
    long long v14 = *v12;
    *(_OWORD *)(v11 + 40) = *v12;
    *((_OWORD *)v11 + 4) = v14;
    *((void *)v11 + 12) = 0;
    *((void *)v11 + 13) = 0;
    *((void *)v11 + 10) = v13;
    *((void *)v11 + 11) = 0;
    sub_1DD4BD518(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1DD4C1490(uint64_t result, uint64_t a2, unint64_t a3, double *a4)
{
  unint64_t v4 = 0;
  unint64_t v5 = a3;
  do
  {
    unint64_t v6 = 0;
    *(void *)(result + 8 * v4) = 0;
    if (v4 <= a3)
    {
      uint64_t v7 = a4 + 8;
      switch(v4)
      {
        case 0uLL:
          goto LABEL_7;
        case 1uLL:
          goto LABEL_6;
        case 2uLL:
          uint64_t v7 = a4 + 9;
          goto LABEL_6;
        case 3uLL:
          uint64_t v7 = a4 + 10;
LABEL_6:
          if (*v7 == 0.0) {
            goto LABEL_8;
          }
LABEL_7:
          unint64_t v6 = v5;
          break;
        default:
LABEL_8:
          unint64_t v6 = 0;
          break;
      }
    }
    *(void *)(a2 + 8 * v4++) = v6;
    --v5;
  }
  while (v4 != 4);
  return result;
}

uint64_t sub_1DD4C1530(int64x2_t *a1, unint64_t a2, double *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1DD4C1490((uint64_t)v10, (uint64_t)&v8, a2, a3);
  int64x2_t v4 = v9;
  int64x2_t v5 = v8;
  int64x2_t v6 = v9;
  *a1 = v8;
  a1[1] = v4;
  return vaddvq_s64(vaddq_s64(v6, v5));
}

double sub_1DD4C15B0(double result, double a2)
{
  if (result <= a2) {
    return a2;
  }
  return result;
}

uint64_t sub_1DD4C15BC(uint64_t a1, void *a2, void *a3, uint64_t a4, double a5)
{
  v10[9] = *MEMORY[0x1E4F143B8];
  double v7 = *(double *)(*a3 + 72 * a4);
  double v8 = v7;
  if (a4) {
    double v8 = *(double *)(*a3 + 72 * a4 - 72);
  }
  sub_1DD4D1268((uint64_t)v10, *a2 + 72 * a4);
  uint64_t result = sub_1DD4D1544(a1, v10);
  *(double *)(a1 + 24) = (v8 - v7) / (a5 * 3.0);
  return result;
}

void sub_1DD4C167C(uint64_t a1, double *a2, double *a3, double a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  sub_1DD4D1510((uint64_t)&v62, a2);
  sub_1DD4D1308((uint64_t)v45, &v62);
  double v8 = a3[1];
  double v10 = a3[2];
  double v9 = a3[3];
  double v11 = a3[5];
  double v12 = a3[6];
  double v13 = a3[7];
  double v14 = a3[8];
  double v15 = a2[3] * -3.0 * a4;
  double v16 = v15 + *a3;
  double v17 = v15 + a3[4];
  double v18 = v17 * v14 - v13 * v11;
  double v19 = v13 * v10 - v8 * v14;
  double v53 = v18;
  double v54 = v19;
  double v20 = v8 * v11 - v17 * v10;
  double v55 = v20;
  double v21 = v19 * v9 + v16 * v18 + v12 * v20;
  if (v21 >= 2.22044605e-16 || v21 <= -2.22044605e-16)
  {
    double v53 = v18 / v21;
    double v54 = v19 / v21;
    double v55 = v20 / v21;
    double v56 = (v12 * v11 - v9 * v14) / v21;
    double v57 = (v16 * v14 - v12 * v10) / v21;
    double v58 = (v9 * v10 - v16 * v11) / v21;
    double v59 = (v9 * v13 - v12 * v17) / v21;
    double v60 = (v12 * v8 - v16 * v13) / v21;
    double v61 = (v16 * v17 - v9 * v8) / v21;
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v24 = 0;
    uint64_t v25 = (double *)v45;
    do
    {
      uint64_t v26 = 0;
      double v27 = 0.0;
      long long v28 = v25;
      do
      {
        double v29 = *v28;
        v28 += 3;
        double v27 = v27 + a3[v26++] * v29;
      }
      while (v26 != 3);
      *((double *)&v62 + 3 * i + v24++) = v27;
      ++v25;
    }
    while (v24 != 3);
    a3 += 3;
  }
  uint64_t v30 = 0;
  v51[2] = v64;
  v51[3] = v65;
  uint64_t v52 = v66;
  v51[0] = v62;
  v51[1] = v63;
  uint64_t v31 = v51;
  do
  {
    uint64_t v32 = 0;
    uint64_t v33 = &v53;
    do
    {
      uint64_t v34 = 0;
      double v35 = 0.0;
      double v36 = v33;
      do
      {
        double v37 = *v36;
        v36 += 3;
        double v35 = v35 + *(double *)((char *)v31 + v34) * v37;
        v34 += 8;
      }
      while (v34 != 24);
      *((double *)&v62 + 3 * v30 + v32++) = v35;
      ++v33;
    }
    while (v32 != 3);
    ++v30;
    uint64_t v31 = (_OWORD *)((char *)v31 + 24);
  }
  while (v30 != 3);
  uint64_t v38 = 0;
  long long v39 = v65;
  long long v48 = v64;
  long long v49 = v65;
  long long v41 = v62;
  long long v40 = v63;
  uint64_t v50 = v66;
  uint64_t v42 = v66;
  long long v46 = v62;
  long long v47 = v63;
  *(_OWORD *)(a1 + 32) = v64;
  *(_OWORD *)(a1 + 48) = v39;
  *(void *)(a1 + 64) = v42;
  *(_OWORD *)a1 = v41;
  *(_OWORD *)(a1 + 16) = v40;
  id v43 = (const double *)(a1 + 64);
  float64x2_t v44 = vld1q_dup_f64(v43);
  do
  {
    *(float64x2_t *)(a1 + v38) = vdivq_f64(*(float64x2_t *)(a1 + v38), v44);
    v38 += 16;
  }
  while (v38 != 64);
  *(void *)(a1 + 64) = 0x3FF0000000000000;
}

float64x2_t sub_1DD4C1914(float64x2_t **a1, float64x2_t **a2, double *a3)
{
  double v6 = log((1.0 - a3[4]) * 1.0008) * -0.249688;
  if (v6 >= 0.0) {
    double v7 = v6;
  }
  else {
    double v7 = 0.0;
  }
  double v8 = log((1.0 - a3[5]) * 1.0008) * -0.249688;
  if (v8 < 0.0) {
    double v8 = 0.0;
  }
  double v9 = *a1;
  double v10 = -v7;
  if (v9->f64[0] >= -v7) {
    double v10 = v9->f64[0];
  }
  v9->f64[0] = v10;
  double v11 = -v8;
  if (v9[2].f64[0] >= v11) {
    double v11 = v9[2].f64[0];
  }
  v9[2].f64[0] = v11;
  double v12 = a3[4];
  if (v12 <= a3[5]) {
    double v12 = a3[5];
  }
  double v13 = 1.0 - v12;
  double v14 = log((1.0 - v12) * 1.00929) * -1.56986;
  if (v14 < 0.0) {
    double v14 = 0.0;
  }
  double v15 = -v14;
  double v16 = v9->f64[1];
  if (v16 < -v14) {
    double v16 = -v14;
  }
  v9->f64[1] = v16;
  if (v9[1].f64[1] >= v15) {
    double v15 = v9[1].f64[1];
  }
  v9[1].f64[1] = v15;
  double v17 = *a2;
  double v18 = v17->f64[1];
  if (v14 < v18) {
    double v18 = v14;
  }
  v17->f64[1] = v18;
  if (v14 >= v17[1].f64[1]) {
    double v14 = v17[1].f64[1];
  }
  v17[1].f64[1] = v14;
  double v19 = a3[4] * (a3[1] * 0.5);
  if (v19 < 0.0) {
    double v19 = 0.0;
  }
  double v20 = -v19;
  if (v9[1].f64[0] >= -v19) {
    double v20 = v9[1].f64[0];
  }
  v9[1].f64[0] = v20;
  if (v19 >= v17[1].f64[0]) {
    double v19 = v17[1].f64[0];
  }
  v17[1].f64[0] = v19;
  double v21 = a3[5] * (a3[2] * 0.5);
  if (v21 < 0.0) {
    double v21 = 0.0;
  }
  double v22 = -v21;
  if (v9[2].f64[1] >= -v21) {
    double v22 = v9[2].f64[1];
  }
  v9[2].f64[1] = v22;
  if (v21 >= v17[2].f64[1]) {
    double v21 = v17[2].f64[1];
  }
  v17[2].f64[1] = v21;
  double v23 = log(v13) * -1.237 + -0.0186;
  if (v23 < 0.0) {
    double v23 = 0.0;
  }
  float64x2_t v24 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v23), 0);
  v9[3] = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v9[3]), (int8x16_t)v24, (int8x16_t)v9[3]);
  float64x2_t v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23, 0);
  float64x2_t result = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v17[3], v25), (int8x16_t)v25, (int8x16_t)v17[3]);
  v17[3] = result;
  return result;
}

void sub_1DD4C1B20(void *a1, void **a2, uint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  _OWORD v33[4] = *(void **)MEMORY[0x1E4F143B8];
  sub_1DD4C1490((uint64_t)v33, (uint64_t)__p, a4, (double *)a3);
  int64x2_t v29 = v32;
  int64x2_t v30 = *(int64x2_t *)__p;
  *(double *)__p = -*(double *)(a3 + 104);
  sub_1DD4C7A14(v33, a5, __p);
  sub_1DD4C7A14(__p, a5, (void *)(a3 + 104));
  uint64_t v12 = vaddvq_s64(vaddq_s64(v29, v30));
  unint64_t v13 = v12 * a5;
  if ((a6 & 1) == 0)
  {
    if (*(unsigned char *)(a3 + 24)) {
      sub_1DD4C1914((float64x2_t **)v33, (float64x2_t **)__p, (double *)a3);
    }
    else {
      printf("undefined: generating log H bounds for uncentered image.");
    }
  }
  sub_1DD4C1D4C((uint64_t)a1, v13);
  sub_1DD4EB4DC((uint64_t)a1);
  uint64_t v14 = 8 * a5;
  if (a4)
  {
    uint64_t v15 = 0;
    double v16 = (uint64_t *)v33[0];
    double v17 = (void *)*a1;
    do
    {
      unint64_t v18 = a5;
      double v19 = v17;
      for (uint64_t i = v16; v18; --v18)
      {
        uint64_t v21 = *i++;
        *v19++ = v21;
      }
      ++v15;
      double v17 = (void *)((char *)v17 + v14);
    }
    while (v15 != a4);
  }
  sub_1DD4C1D4C((uint64_t)a2, v13);
  if (v13) {
    memset_pattern16(*a2, &unk_1DD511D60, 8 * a5 * v12);
  }
  double v22 = (uint64_t *)__p[0];
  if (a4)
  {
    uint64_t v23 = 0;
    float64x2_t v24 = (char *)*a2;
    do
    {
      unint64_t v25 = a5;
      uint64_t v26 = v24;
      for (j = v22; v25; --v25)
      {
        uint64_t v28 = *j++;
        *v26++ = v28;
      }
      ++v23;
      v24 += v14;
    }
    while (v23 != a4);
    double v22 = (uint64_t *)__p[0];
  }
  if (v22)
  {
    __p[1] = v22;
    operator delete(v22);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
}

void sub_1DD4C1D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4C1D4C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1DD4C7B74((char **)a1, a2 - v2);
  }
}

uint64_t sub_1DD4C1D7C(uint64_t result, unint64_t *a2, unint64_t *a3, float64x2_t *a4, uint64_t a5, void *a6, uint64_t a7)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    a4->f64[i] = 0.0;
    *(void *)(a5 + i * 8) = 0;
  }
  switch(result)
  {
    case 1:
      *a2 = 0;
      unint64_t v8 = 1;
      *a3 = 1;
      unint64_t v13 = (const double *)(*a6 + 8 * a7);
      float64x2_t v14 = vld1q_dup_f64(v13);
      *a4 = vdivq_f64((float64x2_t)xmmword_1DD511D00, v14);
      break;
    case 2:
      *a2 = 0;
      unint64_t v8 = 2;
      *a3 = 2;
      uint64_t v15 = (double *)(*a6 + 8 * a7);
      double v16 = v15[1];
      double v17 = *v15 * v16 * (*v15 + v16);
      a4->f64[0] = (v16 + v16) / v17;
      a4->f64[1] = (*v15 + v15[1]) * -2.0 / v17;
      a4[1].f64[0] = (*v15 + *v15) / v17;
      break;
    case 3:
      *a2 = 0;
      unint64_t v8 = 3;
      *a3 = 3;
      double v9 = (double *)(*a6 + 8 * a7);
      double v10 = v9[1];
      double v11 = v9[2];
      double v12 = (*v9 + v10 + v11) * ((v10 + v11) * ((*v9 + v10) * (*v9 * v10 * v11)));
      a4->f64[0] = v10 * -6.0 * v11 * (v10 + v11) / v12;
      a4->f64[1] = v9[2] * 6.0 * (*v9 + v9[1]) * (v9[2] + *v9 + v9[1]) / v12;
      a4[1].f64[0] = (*v9 + v9[1] + v9[2]) * (*v9 * -6.0 * (v9[1] + v9[2])) / v12;
      a4[1].f64[1] = *v9 * 6.0 * v9[1] * (*v9 + v9[1]) / v12;
      break;
    default:
      unint64_t v8 = *a3;
      break;
  }
  unint64_t v18 = *a2;
  *(void *)(a5 + 8 * *a2) = 0;
  while (++v18 <= v8)
  {
    *(void *)(a5 + 8 * v18) = 0;
    double v19 = 0.0;
    unint64_t v20 = v18;
    do
    {
      double v19 = a4->f64[v20] + v19;
      *(double *)(a5 + 8 * v18) = v19;
      ++v20;
    }
    while (v20 <= v8);
  }
  return result;
}

void sub_1DD4C1F3C(sparse_m_double *a1, uint64_t *a2, void *a3, void *A, double *a5, uint64_t a6)
{
  v88[4] = *MEMORY[0x1E4F143B8];
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(A);
  Aa = A;
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  sub_1DD4C1490((uint64_t)v88, (uint64_t)v87, matrix_number_of_rows, a5);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v88[0] = 0;
  do
  {
    v13 += *(void *)&v87[v12 * 8];
    v88[++v12] = v13;
  }
  while (v12 != 3);
  for (uint64_t i = 0; i != 4; ++i)
    v86[i + 4] = v88[i] * matrix_number_of_columns;
  v86[0] = 0;
  for (uint64_t j = 1; j != 4; ++j)
    v86[j] = 2 * matrix_number_of_columns * *(void *)&v87[j * 8];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v85[0] = 0;
  do
  {
    v17 += v86[v16];
    v85[++v16] = v17;
  }
  while (v16 != 3);
  sub_1DD4C1490((uint64_t)v84, (uint64_t)v83, matrix_number_of_rows, a5);
  sparse_index column_end = 0x7FF8000000000000;
  sub_1DD4C7A14(&__p, matrix_number_of_columns, &column_end);
  sub_1DD4C7C90(v77, 4uLL, (uint64_t)&__p);
  if (__p)
  {
    double v76 = (uint64_t *)__p;
    operator delete(__p);
  }
  unint64_t v18 = sparse_matrix_create_double(matrix_number_of_columns, matrix_number_of_columns);
  if (matrix_number_of_columns)
  {
    for (sparse_index k = 0; k != matrix_number_of_columns; ++k)
      sparse_insert_entry_double(v18, 1.0, k, k);
  }
  if (matrix_number_of_rows)
  {
    sparse_dimension v69 = matrix_number_of_columns;
    uint64_t v70 = 0;
    unint64_t v20 = 0;
    long long v65 = (void *)(a6 + 24);
    sparse_dimension v67 = matrix_number_of_rows;
    do
    {
      uint64_t v21 = 0;
      memset(v82, 0, sizeof(v82));
      int v78 = 0;
      do
      {
        if (v20 + v21 < matrix_number_of_rows)
        {
          *((void *)v82 + v21) = v20 + v21;
          *((unsigned char *)&v78 + v21) = 1;
        }
        ++v21;
      }
      while (v21 != 4);
      unint64_t v68 = v20;
      uint64_t v22 = 0;
      uint64_t v66 = matrix_number_of_columns * 2 * v20;
      do
      {
        if (*((unsigned char *)&v78 + v22))
        {
          uint64_t v23 = v77[0];
          sparse_index v24 = *((void *)v82 + v22);
          sparse_dimension v25 = sparse_get_matrix_number_of_columns(Aa);
          uint64_t v26 = (void **)(v23 + 24 * v22);
          sub_1DD4C1D4C((uint64_t)v26, v25);
          if (v25)
          {
            size_t v27 = 8 * v25;
            bzero(*v26, 8 * v25);
          }
          else
          {
            size_t v27 = 0;
          }
          uint64_t v28 = (double *)malloc_type_malloc(v27, 0x100004000313F17uLL);
          int64x2_t v29 = (sparse_index *)malloc_type_malloc(v27, 0x100004000313F17uLL);
          sparse_index column_end = 0;
          sparse_status v30 = sparse_extract_sparse_row_double((sparse_matrix_double)Aa, v24, 0, &column_end, v25, v28, v29);
          if (v30 >= 1)
          {
            uint64_t v31 = *v26;
            uint64_t v32 = v30;
            uint64_t v33 = v28;
            uint64_t v34 = v29;
            do
            {
              uint64_t v35 = *(void *)v33++;
              uint64_t v36 = v35;
              uint64_t v37 = *v34++;
              v31[v37] = v36;
              --v32;
            }
            while (v32);
          }
          free(v28);
          free(v29);
        }
        ++v22;
      }
      while (v22 != 4);
      sparse_dimension matrix_number_of_rows = v67;
      unint64_t v38 = v68;
      uint64_t v39 = v68;
      uint64_t v40 = 1;
      uint64_t v41 = 2 * matrix_number_of_columns;
      do
      {
        if (v84[v40] <= v38 && v83[v40] > v38)
        {
          sparse_index column_end = 0;
          unint64_t v74 = 0;
          sub_1DD4C1D7C(v40, (unint64_t *)&column_end, &v74, &v81, (uint64_t)v80, v65, v38);
          unint64_t v42 = column_end;
          unint64_t v43 = v74;
          uint64_t v71 = v85[v40];
          uint64_t v44 = v71 + v66;
          if (column_end <= v74)
          {
            unint64_t v45 = column_end;
            do
            {
              uint64_t v46 = *((void *)v82 + v45) * matrix_number_of_columns;
              double v47 = v81.f64[v45];
              sub_1DD4EB660(a1, v44, v46, v18, 0, v47, 0.0);
              sub_1DD4EB660(a1, v44 + matrix_number_of_columns, v46, v18, 0, -v47, 0.0);
              ++v45;
            }
            while (v45 <= v43);
          }
          uint64_t v48 = v86[v40 + 4] + v68 * matrix_number_of_columns;
          sub_1DD4EB660(a1, v44, v48, v18, 0, -1.0, 0.0);
          sub_1DD4EB660(a1, v44 + matrix_number_of_columns, v48, v18, 0, -1.0, 0.0);
          uint64_t v73 = 0;
          sub_1DD4C7A14(&__p, matrix_number_of_columns, &v73);
          uint64_t v39 = v68;
          if (v42 <= v43)
          {
            uint64_t v49 = 24 * v42;
            do
            {
              sub_1DD4EB43C((uint64_t)&__p, (double **)(v77[0] + v49), v80[v42++]);
              v49 += 24;
            }
            while (v42 <= v43);
          }
          uint64_t v50 = (uint64_t *)__p;
          uint64_t v41 = 2 * matrix_number_of_columns;
          sparse_dimension matrix_number_of_rows = v67;
          unint64_t v38 = v68;
          if (v76 != __p)
          {
            unint64_t v51 = ((char *)v76 - (unsigned char *)__p) >> 3;
            uint64_t v52 = *a2;
            if (v51 <= 1) {
              unint64_t v51 = 1;
            }
            double v53 = (double *)(v52 + 8 * (v70 + v71));
            double v54 = (double *)__p;
            unint64_t v55 = v51;
            do
            {
              double v56 = *v54++;
              *v53++ = -v56;
              --v55;
            }
            while (v55);
            double v57 = (void *)(v52 + 8 * (v69 + v71));
            double v58 = v50;
            do
            {
              uint64_t v59 = *v58++;
              *v57++ = v59;
              --v51;
            }
            while (v51);
          }
          if (matrix_number_of_columns)
          {
            uint64_t v60 = 0;
            uint64_t v61 = *a3 + 4 * (v69 + v71);
            uint64_t v62 = *a3 + 4 * (v70 + v71);
            do
            {
              *(_DWORD *)(v62 + 4 * v60) = 1;
              *(_DWORD *)(v61 + 4 * v60++) = 1;
            }
            while (matrix_number_of_columns > v60);
          }
          if (v50)
          {
            double v76 = v50;
            operator delete(v50);
          }
        }
        if (v39 == 255) {
          sparse_commit(a1);
        }
        ++v40;
      }
      while (v40 != 4);
      unint64_t v20 = v38 + 1;
      v70 += v41;
      v69 += v41;
    }
    while (v20 != matrix_number_of_rows);
  }
  if (v18) {
    sparse_matrix_destroy(v18);
  }
  __p = v77;
  sub_1DD4BDB34((void ***)&__p);
}

void sub_1DD4C2538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4C25A4(void *a1, void *a2, void *a3, uint64_t a4, sparse_dimension a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a7 + 48);
  uint64_t v8 = *(void *)(a7 + 56);
  if (v7 == v8) {
    return 0;
  }
  uint64_t v10 = (v8 - v7) >> 3;
  if (v10 != 3 * a5) {
    return 0;
  }
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  if (matrix_number_of_rows < v10 + a4
    || matrix_number_of_rows != (uint64_t)(a2[1] - *a2) >> 3
    || matrix_number_of_rows != (uint64_t)(a3[1] - *a3) >> 2)
  {
    return 0;
  }
  int64x2_t v29 = a2;
  sparse_status v30 = a3;
  uint64_t v17 = sparse_matrix_create_double(a5, a5);
  if (a5)
  {
    sparse_index v18 = 0;
    do
    {
      sparse_insert_entry_double(v17, 1.0, v18, v18);
      ++v18;
    }
    while (a5 != v18);
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 4 * a4;
  uint64_t v22 = 8 * a4;
  uint64_t v23 = 8 * a5;
  do
  {
    sub_1DD4EB660((sparse_m_double *)a1, a4, v20 * a5, v17, 0, 1.0, 0.0);
    if (a5)
    {
      uint64_t v24 = 0;
      uint64_t v25 = *v30 + v21;
      uint64_t v26 = *v29 + v22;
      uint64_t v27 = *(void *)(a7 + 48) + v19;
      do
      {
        *(void *)(v26 + 8 * v24) = *(void *)(v27 + 8 * v24);
        *(_DWORD *)(v25 + 4 * v24++) = 0;
      }
      while (a5 > v24);
    }
    a4 += a5;
    ++v20;
    v21 += 4 * a5;
    v22 += v23;
    v19 += v23;
  }
  while (v20 != 3);
  if (v17) {
    sparse_matrix_destroy(v17);
  }
  return 1;
}

void sub_1DD4C2740(unint64_t a1@<X0>, uint64_t a2@<X2>, char **a3@<X8>)
{
  if (*(void *)(a2 + 72) == *(void *)(a2 + 80))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    unsigned __int8 v28 = 0;
    sub_1DD4C7D4C(&__p, a1, &v28);
    uint64_t v6 = *(void *)(a2 + 72);
    uint64_t v7 = *(void *)(a2 + 80);
    uint64_t v8 = v7 - v6;
    if (v7 != v6)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v8 >> 2;
      double v11 = (char *)__p;
      if ((unint64_t)(v8 >> 2) <= 1) {
        uint64_t v10 = 1;
      }
      do
      {
        int v12 = *(_DWORD *)(v6 + 4 * v9);
        if (v12 <= 4) {
          uint64_t v13 = 4;
        }
        else {
          uint64_t v13 = v12;
        }
        int v14 = v12 + 3;
        if (v14 >= (int)a1 - 1) {
          int v14 = a1 - 1;
        }
        if ((int)v13 - 3 <= v14)
        {
          int v15 = v14 + 4;
          do
          {
            *(void *)&v11[((unint64_t)(v13 - 3) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << (v13
                                                                                                - 3);
            ++v13;
          }
          while (v15 != v13);
        }
        ++v9;
      }
      while (v9 != v10);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (a1)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      sparse_index v18 = a3 + 2;
      do
      {
        if ((*(void *)((char *)__p + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17))
        {
          if ((unint64_t)v16 >= *v18)
          {
            uint64_t v20 = *a3;
            uint64_t v21 = (v16 - *a3) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              sub_1DD4BACA0();
            }
            uint64_t v23 = *v18 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              uint64_t v25 = (char *)sub_1DD4BB6B8((uint64_t)(a3 + 2), v24);
              uint64_t v20 = *a3;
              uint64_t v16 = a3[1];
            }
            else
            {
              uint64_t v25 = 0;
            }
            uint64_t v26 = &v25[4 * v21];
            *(_DWORD *)uint64_t v26 = v17;
            uint64_t v19 = v26 + 4;
            while (v16 != v20)
            {
              int v27 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *a3 = v26;
            a3[1] = v19;
            a3[2] = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v16 = v17;
            uint64_t v19 = v16 + 4;
          }
          a3[1] = v19;
          uint64_t v16 = v19;
        }
        ++v17;
      }
      while (v17 != a1);
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1DD4C2938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  int v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

sparse_m_double *sub_1DD4C2964(sparse_m_double *A, void *a2, void *a3, uint64_t *a4, sparse_index i, uint64_t a6)
{
  uint64_t v7 = *a4;
  uint64_t v6 = a4[1];
  if (v6 != *a4)
  {
    uint64_t v13 = A;
    unint64_t v14 = 0;
    do
    {
      if (a6)
      {
        uint64_t v15 = *(int *)(v7 + 4 * v14);
        sparse_index v16 = v15 * a6;
        sparse_index v17 = (v15 - 1) * a6;
        uint64_t v18 = a6;
        do
        {
          sparse_insert_entry_double(v13, 1.0, i, v16);
          A = (sparse_m_double *)(int)sparse_insert_entry_double(v13, -1.0, i, v17);
          *(void *)(*a2 + 8 * i) = 0;
          *(_DWORD *)(*a3 + 4 * i++) = 0;
          ++v17;
          ++v16;
          --v18;
        }
        while (v18);
        uint64_t v7 = *a4;
        uint64_t v6 = a4[1];
      }
      ++v14;
    }
    while (v14 < (v6 - v7) >> 2);
  }
  return A;
}

void sub_1DD4C2A40(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, _DWORD *a5, uint64_t a6, unint64_t a7)
{
  double v8 = *a4;
  double v7 = a4[1];
  if (*a5 == 1)
  {
    uint64_t v12 = *(void *)(a6 + 168);
    double v13 = 1.0;
    if (((*(void *)(a6 + 176) - v12) >> 3) + 1 > a7)
    {
      unint64_t v14 = a7 - 1;
      if (!a7) {
        unint64_t v14 = 0;
      }
      double v13 = *(double *)(v12 + 8 * v14);
    }
    *(double *)a2 = -(v8 * v7) / v13;
    *(double *)(a2 + 8) = v13 + v8 * v8 / v13;
    *(double *)(a2 + 16) = -v7;
    *(double *)(a2 + 24) = v8 * 3.0 / v13;
    *(double *)a3 = -v13 - v7 * v7 / v13;
    *(double *)(a3 + 8) = v8 * v7 / v13;
    *(double *)(a3 + 16) = v8;
    uint64_t v11 = 3;
    double v10 = v7 * 3.0 / v13;
  }
  else
  {
    if (*a5) {
      return;
    }
    *(double *)a2 = v8;
    *(double *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0x3FF0000000000000;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    double v9 = -(v8 * v7);
    *(double *)(a2 + 48) = -(v8 * v8);
    *(double *)(a2 + 56) = v9;
    *(double *)(a2 + 64) = -v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(double *)(a3 + 24) = v8;
    *(double *)(a3 + 32) = v7;
    *(void *)(a3 + 40) = 0x3FF0000000000000;
    double v10 = -v7;
    uint64_t v11 = 8;
    *(double *)(a3 + 48) = v9;
    *(double *)(a3 + 56) = -(v7 * v7);
  }
  *(double *)(a3 + 8 * v11) = v10;
}

double sub_1DD4C2B24(double *a1, double *a2, double *a3)
{
  *a1 = a3[14] * a3[4];
  double v3 = a3[14] * a3[5];
  *a2 = v3;
  double result = a3[4];
  double v5 = a3[5];
  if (vabdd_f64(result, v5) > a3[11])
  {
    if (result <= v5)
    {
      if (v5 <= result)
      {
        double v6 = 1.0 - result;
        double v7 = 0.0;
      }
      else
      {
        double v6 = 1.0 - result;
        double v7 = fmin((1.0 - v3) / (1.0 - v5), (*a1 * -0.5 + 1.0) / v6);
      }
    }
    else
    {
      double v6 = 1.0 - result;
      double v7 = fmin((1.0 - *a1) / v6, (v3 * -0.5 + 1.0) / (1.0 - v5));
    }
    *a1 = 1.0 - v7 * v6;
    double result = 1.0 - v7 * (1.0 - a3[5]);
    *a2 = result;
  }
  return result;
}

double sub_1DD4C2BEC@<D0>(double *a1@<X0>, double **a2@<X8>)
{
  double v3 = *a1;
  double v4 = a1[1];
  double v5 = a1[2];
  double v6 = a1[3];
  double v7 = a1[4];
  double v8 = a1[5];
  double v9 = a1[6];
  double v10 = a1[7];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v11 = (double *)operator new(0x40uLL);
  double result = v7 - v3;
  a2[1] = v11 + 8;
  a2[2] = v11 + 8;
  *uint64_t v11 = v6 - v10;
  v11[1] = v9 - v5;
  v11[2] = v8 - v4;
  v11[3] = v3 - v7;
  v11[4] = v10 - v6;
  v11[5] = v5 - v9;
  v11[6] = v4 - v8;
  v11[7] = v7 - v3;
  *a2 = v11;
  return result;
}

float64x2_t sub_1DD4C2C88@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  float64x2_t v14 = vsubq_f64(*(float64x2_t *)(a1 + 16 * a2), *(float64x2_t *)(a1 + 16 * a3));
  sub_1DD4C7A14(a4, 8uLL, &v15);
  uint64_t v7 = *a4;
  *(float64x2_t *)(*a4 + 16 * a2) = vaddq_f64(v14, v14);
  __asm { FMOV            V0.2D, #-2.0 }
  float64x2_t result = vmulq_f64(v14, _Q0);
  *(float64x2_t *)(v7 + 16 * a3) = result;
  return result;
}

uint64_t sub_1DD4C2D00(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, uint64_t a8, unint64_t a9)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  uint64_t v19 = *a2;
  uint64_t v18 = a2[1];
  long long v146 = a2;
  if (matrix_number_of_rows != (v18 - v19) >> 3 || sparse_get_matrix_number_of_rows(a1) != (uint64_t)(a3[1] - *a3) >> 2) {
    return 0;
  }
  uint64_t v20 = 20;
  if (!*((unsigned char *)a7 + 154)) {
    uint64_t v20 = 16;
  }
  int v21 = *a7;
  uint64_t v22 = 6;
  if (!*((unsigned char *)a7 + 152)) {
    uint64_t v22 = 4;
  }
  _ZF = v21 == 0;
  if (v21) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v22;
  }
  uint64_t v25 = v20 | *((unsigned __int8 *)a7 + 155);
  if (_ZF) {
    ++v25;
  }
  unint64_t v26 = v25 + v24;
  if (v25 + v24 + a4 > sparse_get_matrix_number_of_rows(a1)) {
    return 0;
  }
  v159.f64[0] = 0.0;
  sub_1DD4C7A14(v163, a6, &v159);
  sub_1DD4C7C90(&v157, v26, (uint64_t)v163);
  if (*(void *)&v163[0])
  {
    *((void *)&v163[0] + 1) = *(void *)&v163[0];
    operator delete(*(void **)&v163[0]);
  }
  *(void *)&v163[0] = 0;
  sub_1DD4C7A14(v156, v26, v163);
  int v139 = (sparse_m_double *)a1;
  LODWORD(v163[0]) = 0;
  sub_1DD4C7F84(v155, v26, v163);
  int v30 = *((unsigned __int8 *)a7 + 24);
  v31.f64[0] = *((float64_t *)a7 + 1);
  uint64_t v138 = a4;
  CGRect v145 = a3;
  uint64_t v134 = a5;
  float64x2_t v137 = v31;
  if (v30)
  {
    v29.f64[0] = v31.f64[0] * -0.5;
    float64x2_t v141 = v29;
    v31.f64[0] = v31.f64[0] * 0.5;
    float64x2_t v143 = v31;
    v31.f64[0] = *((float64_t *)a7 + 2);
    v28.f64[0] = v31.f64[0] * -0.5;
    float64x2_t v140 = v28;
    float64x2_t v144 = v31;
    v28.f64[0] = v31.f64[0] * 0.5;
  }
  else
  {
    v29.f64[0] = *((float64_t *)a7 + 2);
    v28.f64[0] = 0.0;
    float64x2_t v141 = v28;
    v28.f64[0] = v31.f64[0];
    float64x2_t v143 = v28;
    float64x2_t v144 = v29;
    v28.f64[0] = 0.0;
    float64x2_t v140 = v28;
    v28.f64[0] = v29.f64[0];
  }
  float64x2_t v142 = v28;
  v28.f64[0] = *((float64_t *)a7 + 4);
  float64x2_t v135 = v28;
  v136.f64[0] = *((float64_t *)a7 + 5);
  float64_t v153 = 0.0;
  float64_t v154 = 0.0;
  sub_1DD4C2B24(&v154, &v153, (double *)a7);
  float v133 = &v131;
  v33.f64[0] = v153;
  v32.f64[0] = v154;
  v32.f64[1] = v135.f64[0];
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v38 = vmulq_f64(vmulq_n_f64(v32, v137.f64[0]), _Q3);
  int64x2_t v39 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v141.f64[0], 0), v38);
  v33.f64[1] = v136.f64[0];
  float64x2_t v137 = _Q3;
  float64x2_t v40 = vmulq_f64(vmulq_n_f64(v33, v144.f64[0]), _Q3);
  int64x2_t v41 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v140.f64[0], 0), v40);
  int64x2_t v42 = (int64x2_t)vsubq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v143.f64[0], 0), v38);
  v163[0] = vzip2q_s64(v39, v41);
  v163[1] = vzip2q_s64(v42, v41);
  int64x2_t v43 = (int64x2_t)vsubq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v142.f64[0], 0), v40);
  v163[2] = vzip2q_s64(v42, v43);
  v163[3] = vzip2q_s64(v39, v43);
  float64x2_t v135 = (float64x2_t)v41;
  float64x2_t v136 = (float64x2_t)v39;
  float64x2_t v159 = (float64x2_t)vzip1q_s64(v39, v41);
  float64x2_t v160 = (float64x2_t)vzip1q_s64(v42, v41);
  float64x2_t v131 = (float64x2_t)v43;
  float64x2_t v132 = (float64x2_t)v42;
  float64x2_t v161 = (float64x2_t)vzip1q_s64(v42, v43);
  float64x2_t v162 = (float64x2_t)vzip1q_s64(v39, v43);
  uint64_t v44 = 8 * a6;
  uint64_t v46 = MEMORY[0x1F4188790](v45);
  double v47 = &v131 - 4 * a6;
  uint64_t v48 = a7;
  uint64_t v49 = 0;
  *(void *)&v144.f64[0] = v47;
  do
  {
    sub_1DD4C2A40(v46, (uint64_t)v47, (uint64_t)v47 + v44, &v159.f64[v49], v48, a8, a9);
    v49 += 2;
    v47 += a6;
  }
  while (v49 != 8);
  uint64_t v50 = 0;
  uint64_t v51 = v157;
  uint64_t v52 = *(double **)&v144.f64[0];
  float64_t v53 = v144.f64[0];
  uint64_t v55 = v138;
  double v54 = v139;
  v56.f64[0] = v143.f64[0];
  float64_t v57 = v140.f64[0];
  v58.f64[0] = v141.f64[0];
  do
  {
    if (a6)
    {
      uint64_t v59 = 0;
      uint64_t v60 = *(void *)(v51 + 24 * v50);
      do
      {
        *(double *)(v60 + 8 * v59) = -*(double *)(*(void *)&v53 + 8 * v59);
        ++v59;
      }
      while (a6 > v59);
    }
    ++v50;
    *(void *)&v53 += v44;
  }
  while (v50 != 8);
  uint64_t v61 = 0;
  uint64_t v62 = (float64x2_t *)v156[0];
  long long v63 = (float64x2_t *)v155[0];
  v58.f64[1] = v57;
  float64x2_t v64 = vsubq_f64(v159, v58);
  float64x2_t v65 = vsubq_f64(v160, v58);
  float64x2_t v66 = vsubq_f64(v162, v58);
  *((float64x2_t *)v156[0] + 2) = vsubq_f64(v161, v58);
  v62[3] = v66;
  float64x2_t *v62 = v64;
  v62[1] = v65;
  *(void *)&v66.f64[0] = 0x100000001;
  *(void *)&v66.f64[1] = 0x100000001;
  float64x2_t *v63 = v66;
  v63[1] = v66;
  uint64_t v67 = v157;
  unint64_t v68 = v52;
  float64_t v69 = v142.f64[0];
  do
  {
    if (a6)
    {
      uint64_t v70 = 0;
      uint64_t v71 = *(void *)(v67 + 24 * v61 + 192);
      do
      {
        *(double *)(v71 + 8 * v70) = v68[v70];
        ++v70;
      }
      while (a6 > v70);
    }
    ++v61;
    unint64_t v68 = (double *)((char *)v68 + v44);
  }
  while (v61 != 8);
  v56.f64[1] = v69;
  float64x2_t v72 = vsubq_f64(v56, v159);
  float64x2_t v73 = vsubq_f64(v56, v160);
  float64x2_t v74 = vsubq_f64(v56, v162);
  v62[6] = vsubq_f64(v56, v161);
  v62[7] = v74;
  v62[4] = v72;
  v62[5] = v73;
  *(void *)&v74.f64[0] = 0x100000001;
  *(void *)&v74.f64[1] = 0x100000001;
  v63[2] = v74;
  v63[3] = v74;
  if (*((unsigned char *)v48 + 154))
  {
    uint64_t v75 = v55;
    uint64_t v76 = 0;
    uint64_t v77 = 16;
    do
    {
      uint64_t v78 = v76 + 1;
      if (v76 == 3) {
        uint64_t v79 = 0;
      }
      else {
        uint64_t v79 = (v76 + 1);
      }
      sub_1DD4C2C88((uint64_t)&v159, v76, v79, (uint64_t *)&v150);
      uint64_t v147 = 0;
      sub_1DD4C7A14(&v148, a6, &v147);
      if (a6)
      {
        uint64_t v80 = 0;
        float64x2_t v81 = v148;
        os_signpost_id_t v82 = v150;
        unint64_t v83 = *(double **)&v144.f64[0];
        do
        {
          uint64_t v84 = 0;
          v81[v80] = 0;
          double v85 = 0.0;
          uint64_t v86 = v83;
          do
          {
            double v85 = v85 + *v86 * v82[v84];
            *(double *)&v81[v80] = v85;
            ++v84;
            uint64_t v86 = (double *)((char *)v86 + v44);
          }
          while (v84 != 8);
          ++v80;
          ++v83;
        }
        while (v80 != a6);
      }
      sub_1DD4EB4AC((uint64_t)&v148, -1.0);
      uint64_t v87 = v148;
      if (a6)
      {
        uint64_t v88 = *(void **)(v157 + 24 * v77);
        uint64_t v89 = v148;
        unint64_t v90 = a6;
        do
        {
          uint64_t v91 = *v89++;
          *v88++ = v91;
          --v90;
        }
        while (v90);
      }
      CFDictionaryRef v92 = &v159 + v76;
      long long v93 = &v159 + v79;
      float64_t v94 = v92->f64[1] - v93->f64[1];
      float64_t v95 = v94 * v94 + (v92->f64[0] - v93->f64[0]) * (v92->f64[0] - v93->f64[0]);
      uint64_t v96 = (double *)&v163[v79];
      *((float64_t *)v156[0] + v77) = v95
                                    - ((*((double *)&v163[v76] + 1) - v96[1]) * (*((double *)&v163[v76] + 1) - v96[1])
                                     + (*(double *)&v163[v76] - *v96) * (*(double *)&v163[v76] - *v96));
      *((_DWORD *)v155[0] + v77) = 1;
      if (v87)
      {
        v149 = v87;
        operator delete(v87);
      }
      if (v150)
      {
        long long v151 = v150;
        operator delete(v150);
      }
      ++v77;
      ++v76;
    }
    while (v78 != 4);
    uint64_t v55 = v75;
    uint64_t v52 = *(double **)&v144.f64[0];
    uint64_t v97 = 20;
  }
  else
  {
    uint64_t v97 = 16;
  }
  if (!*v48)
  {
    uint64_t v98 = v157;
    uint64_t v99 = v157 + 24 * v97;
    id v100 = *(void **)v99;
    *id v100 = 0x3FF0000000000000;
    v100[4] = 0x3FF0000000000000;
    v100[8] = 0x3FF0000000000000;
    uint64_t v101 = v156[0];
    *((void *)v156[0] + v97) = 0;
    id v102 = v155[0];
    double v103 = *(void **)(v98 + 24 * (v97 | 1));
    *double v103 = 0x3FF0000000000000;
    v103[4] = 0xBFF0000000000000;
    v101[v97 | 1] = *((void *)v48 + 17);
    int v104 = *(void **)(v98 + 24 * (v97 | 2));
    *int v104 = 0xBFF0000000000000;
    v104[4] = 0x3FF0000000000000;
    v101[v97 | 2] = *((void *)v48 + 17);
    uint64_t v105 = *(void *)(v98 + 24 * (v97 | 3));
    *(void *)(v105 + 8) = 0x3FF0000000000000;
    *(void *)(v105 + 24) = 0x3FF0000000000000;
    v101[v97 | 3] = *((void *)v48 + 18);
    *(_OWORD *)&v102[v97] = xmmword_1DD511D10;
    uint64_t v106 = *(void *)(v99 + 96);
    *(void *)(v106 + 8) = 0xBFF0000000000000;
    *(void *)(v106 + 24) = 0xBFF0000000000000;
    v101[v97 + 4] = *((void *)v48 + 18);
    v102[v97 + 4] = 1;
    uint64_t v107 = v97 + 5;
    if (*((unsigned char *)v48 + 152))
    {
      uint64_t v108 = *(void *)(v98 + 24 * v107);
      *(void *)(v108 + 16) = 0x3FF0000000000000;
      *(void *)(v108 + 48) = 0x3FF0000000000000;
      v101[v107] = 0;
      uint64_t v109 = *(void *)(v98 + 24 * (v97 + 6));
      *(void *)(v109 + 40) = 0x3FF0000000000000;
      *(void *)(v109 + 56) = 0x3FF0000000000000;
      v101[v97 + 6] = 0;
      *(void *)&v102[v107] = 0;
      v97 += 7;
    }
    else
    {
      v97 += 5;
    }
  }
  int v110 = *((unsigned __int8 *)v48 + 155);
  uint64_t v111 = v134;
  if (v110)
  {
    sub_1DD4C2BEC(v159.f64, &v150);
    uint64_t v147 = 0;
    sub_1DD4C7A14(&v148, a6, &v147);
    long long v112 = v150;
    if (a6)
    {
      uint64_t v113 = 0;
      long long v114 = v148;
      do
      {
        uint64_t v115 = 0;
        v114[v113] = 0;
        double v116 = 0.0;
        uint64_t v117 = v52;
        do
        {
          double v116 = v116 + *v117 * v112[v115];
          *(double *)&v114[v113] = v116;
          ++v115;
          uint64_t v117 = (double *)((char *)v117 + v44);
        }
        while (v115 != 8);
        ++v113;
        ++v52;
      }
      while (v113 != a6);
    }
    sub_1DD4EB4AC((uint64_t)&v148, -0.5);
    long long v118 = v148;
    if (a6)
    {
      uint64_t v119 = *(void **)(v157 + 24 * v97);
      double v120 = v148;
      do
      {
        uint64_t v121 = *v120++;
        *v119++ = v121;
        --a6;
      }
      while (a6);
    }
    float64x2_t v122 = vmulq_f64(vmlsq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vsubq_f64(v135, v135), vnegq_f64(vsubq_f64(v132, v132))), vsubq_f64(v131, v135), vsubq_f64(v132, v136)), vsubq_f64(v135, v131), vsubq_f64(v136, v132)), vsubq_f64(v131, v131), vsubq_f64(v136, v136)), v137);
    *((void *)v156[0] + v97) = *(_OWORD *)&vsubq_f64(v122, (float64x2_t)vdupq_laneq_s64((int64x2_t)v122, 1));
    *((_DWORD *)v155[0] + v97) = 1;
    if (v118)
    {
      v149 = v118;
      operator delete(v118);
    }
    if (v112) {
      operator delete(v112);
    }
  }
  uint64_t v123 = v157;
  if (v158 != v157)
  {
    unint64_t v124 = 0;
    do
    {
      long long v150 = 0;
      long long v151 = 0;
      uint64_t v152 = 0;
      sub_1DD4BDA30(&v150, *(const void **)(v123 + 24 * v124), *(void *)(v123 + 24 * v124 + 8), (uint64_t)(*(void *)(v123 + 24 * v124 + 8) - *(void *)(v123 + 24 * v124)) >> 3);
      double v125 = v150;
      double v126 = v151;
      uint64_t v127 = v124 + v55;
      if (v151 == v150)
      {
        double v125 = v151;
      }
      else
      {
        unint64_t v128 = 0;
        do
        {
          double v129 = v125[v128];
          if (fabs(v129) > 1.0e-12)
          {
            sparse_insert_entry_double(v54, v129, v124 + v55, v111 + v128);
            double v125 = v150;
            double v126 = v151;
          }
          ++v128;
        }
        while (v128 < v126 - v125);
      }
      uint64_t v130 = v145;
      *(void *)(*v146 + 8 * v127) = *((void *)v156[0] + v124);
      *(_DWORD *)(*v130 + 4 * v127) = *((_DWORD *)v155[0] + v124);
      if (v125)
      {
        long long v151 = v125;
        operator delete(v125);
      }
      ++v124;
      uint64_t v123 = v157;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v158 - v157) >> 3) > v124);
  }
  if (v155[0])
  {
    v155[1] = v155[0];
    operator delete(v155[0]);
  }
  if (v156[0])
  {
    v156[1] = v156[0];
    operator delete(v156[0]);
  }
  *(void *)&v163[0] = &v157;
  sub_1DD4BDB34((void ***)v163);
  return 1;
}

void sub_1DD4C3600(_Unwind_Exception *a1)
{
  double v5 = (void *)v1[27];
  if (v5)
  {
    v1[28] = v5;
    operator delete(v5);
  }
  if (v2) {
    operator delete(v2);
  }
  double v6 = (void *)v1[35];
  if (v6)
  {
    v1[36] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)v1[38];
  if (v7)
  {
    v1[39] = v7;
    operator delete(v7);
  }
  *(void *)(v3 - 176) = v1 + 41;
  sub_1DD4BDB34((void ***)(v3 - 176));
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C36D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 == a1[1]) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  int v5 = 0;
  do
  {
    v5 += !CGRectIsNull(*(CGRect *)(v1 + v3));
    ++v4;
    uint64_t v1 = *a1;
    v3 += 32;
  }
  while (v4 < (a1[1] - *a1) >> 5);
  return (16 * v5);
}

BOOL sub_1DD4C3750(void *a1, void *a2, uint64_t *a3, uint64_t *a4, sparse_index a5, uint64_t a6, unint64_t a7, _DWORD *a8, uint64_t a9)
{
  uint64_t v61 = a8;
  uint64_t v62 = a3;
  float64x2_t v64 = a2;
  v70[8] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a4[1];
  if (*a4 == v9) {
    return 1;
  }
  if (a6 != (v9 - *a4) >> 5
    || sparse_get_matrix_number_of_rows(a1) != (uint64_t)(v64[1] - *v64) >> 3
    || sparse_get_matrix_number_of_rows(a1) != (v62[1] - *v62) >> 2)
  {
    return 0;
  }
  uint64_t v56 = a6;
  uint64_t v67 = 0;
  unint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v15 = (const void *)*a4;
  uint64_t v16 = a4[1];
  uint64_t v55 = a4;
  sub_1DD4BE0E4(&v67, v15, v16, (v16 - (uint64_t)v15) >> 5);
  int v17 = sub_1DD4C36D4((uint64_t *)&v67);
  if (v67)
  {
    unint64_t v68 = v67;
    operator delete(v67);
  }
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  if (a5 + v17 > matrix_number_of_rows) {
    return 0;
  }
  sparse_index v54 = a5 + v17;
  uint64_t v53 = (uint64_t)&v53;
  uint64_t v20 = MEMORY[0x1F4188790](matrix_number_of_rows);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  int v27 = (char *)&v53 - v26;
  if (v56)
  {
    unint64_t v28 = 0;
    uint64_t v60 = a9;
    __asm { FMOV            V3.2D, #1.0 }
    float64x2_t v58 = vmulq_f64(vmlsq_lane_f64(_Q3, v24, v23, 0), v25);
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v57 = _Q0;
    do
    {
      uint64_t v35 = *v55;
      unint64_t v63 = v28;
      uint64_t v36 = (CGFloat *)(v35 + 32 * v28);
      double v37 = *v36;
      double v38 = v36[1];
      double v39 = v36[2];
      double v40 = v36[3];
      v71.origin.CGFloat x = *v36;
      v71.origin.double y = v38;
      v71.size.double width = v39;
      v71.size.CGFloat height = v40;
      uint64_t IsNull = CGRectIsNull(v71);
      if (IsNull)
      {
        unint64_t v42 = v63;
      }
      else
      {
        *(double *)uint64_t v70 = v37;
        *(double *)&v70[1] = v38;
        *(double *)&v70[2] = v37 + v39;
        *(double *)&void v70[3] = v38;
        *(double *)&v70[4] = v37 + v39;
        *(double *)&v70[5] = v38 + v40;
        *(double *)&v70[6] = v37;
        *(double *)&v70[7] = v38 + v40;
        unint64_t v42 = v63;
        unint64_t v43 = v63 * a7;
        int v44 = 1;
        do
        {
          uint64_t v45 = 0;
          int v59 = v44;
          if (v44) {
            int v46 = -1;
          }
          else {
            int v46 = 1;
          }
          int v66 = v46;
          float64x2_t v65 = vmulq_f64(vmulq_n_f64(v58, (double)v46), v57);
          do
          {
            sub_1DD4C2A40(IsNull, (uint64_t)v22, (uint64_t)v27, (double *)&v70[2 * v45], v61, v60, v42);
            if (a7)
            {
              unint64_t v47 = 0;
              unsigned int v48 = 1;
              do
              {
                double v49 = *(double *)&v22[8 * v47];
                if (fabs(v49) > 1.0e-12) {
                  uint64_t IsNull = sparse_insert_entry_double((sparse_matrix_double)a1, v49, a5, v47 + v43);
                }
                double v50 = *(double *)&v27[8 * v47];
                if (fabs(v50) > 1.0e-12) {
                  uint64_t IsNull = sparse_insert_entry_double((sparse_matrix_double)a1, v50, a5 + 1, v47 + v43);
                }
                unint64_t v47 = v48++;
              }
              while (v47 < a7);
            }
            *(float64x2_t *)(*v64 + 8 * a5) = vaddq_f64(v65, *(float64x2_t *)&v70[2 * v45]);
            uint64_t v51 = *v62;
            int v52 = v66;
            *(_DWORD *)(v51 + 4 * a5) = v66;
            *(_DWORD *)(v51 + 4 * (a5 + 1)) = v52;
            a5 += 2;
            ++v45;
            unint64_t v42 = v63;
          }
          while (v45 != 4);
          int v44 = 0;
        }
        while ((v59 & 1) != 0);
      }
      unint64_t v28 = v42 + 1;
    }
    while (v28 != v56);
  }
  return a5 == v54;
}

void sub_1DD4C3B3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(void *)(v1 - 224) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4C3B60(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  BOOL v16 = a8 == (uint64_t)(a5[1] - *a5) >> 3 && matrix_number_of_rows >= a8 + a6;
  if (!v16
    || matrix_number_of_rows != (uint64_t)(a2[1] - *a2) >> 3
    || matrix_number_of_rows != (uint64_t)(a3[1] - *a3) >> 2)
  {
    return 0;
  }
  if (a8)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a8 * a4;
    unsigned int v19 = 1;
    do
    {
      uint64_t v20 = v17 + a6;
      sparse_insert_entry_double((sparse_matrix_double)a1, 1.0, v17 + a6, v17 + v18);
      *(void *)(*a2 + 8 * v20) = *(void *)(*a5 + 8 * v17);
      *(_DWORD *)(*a3 + 4 * v20) = 0;
      unint64_t v17 = v19++;
    }
    while (v17 < a8);
  }
  return 1;
}

void sub_1DD4C3C50(void *A, uint64_t a2, uint64_t a3, int a4)
{
  v61[4] = *MEMORY[0x1E4F143B8];
  if (a4) {
    puts("Working on L1 constraints.");
  }
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(A);
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  sub_1DD4C1490((uint64_t)v61, (uint64_t)&v59, matrix_number_of_rows, (double *)a2);
  v58[0] = v59;
  v58[1] = v60;
  int64x2_t v40 = v60;
  int64x2_t v42 = v59;
  memset(v61, 0, 24);
  int64x2_t v59 = 0uLL;
  v60.i64[0] = 0;
  sub_1DD4C1B20(v61, (void **)&v59, a2, matrix_number_of_rows, matrix_number_of_columns, (*(_DWORD *)a2 | *(unsigned __int8 *)(a2 + 153)) != 0);
  sub_1DD4C2740(matrix_number_of_rows, a3, (char **)&v56);
  uint64_t v9 = 0;
  Aa = A;
  sparse_dimension v38 = vaddvq_s64(vaddq_s64(v40, v42)) * matrix_number_of_columns;
  for (uint64_t i = 1; i != 4; ++i)
    v9 += 2 * matrix_number_of_columns * v58[0].i64[i];
  if (*(void *)(a3 + 48) == *(void *)(a3 + 56)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = 3 * matrix_number_of_columns;
  }
  uint64_t v41 = v11;
  uint64_t v12 = 20;
  if (!*(unsigned char *)(a2 + 154)) {
    uint64_t v12 = 16;
  }
  int v13 = *(_DWORD *)a2;
  uint64_t v14 = 6;
  if (!*(unsigned char *)(a2 + 152)) {
    uint64_t v14 = 4;
  }
  if (v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v12 | *(unsigned __int8 *)(a2 + 155);
  if (v13) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v16 + 1;
  }
  unsigned int v19 = v56;
  uint64_t v18 = v57;
  sparse_index v54 = 0;
  uint64_t v55 = 0;
  __p = 0;
  sub_1DD4BE0E4(&__p, *(const void **)(a3 + 144), *(void *)(a3 + 152), (uint64_t)(*(void *)(a3 + 152) - *(void *)(a3 + 144)) >> 5);
  uint64_t v20 = v17 + v15;
  uint64_t v21 = ((v18 - (uint64_t)v19) >> 2) * matrix_number_of_columns;
  uint64_t v22 = (int)sub_1DD4C36D4((uint64_t *)&__p);
  if (__p)
  {
    sparse_index v54 = __p;
    operator delete(__p);
  }
  sparse_index v23 = v41 + v9;
  uint64_t v43 = v22;
  sparse_dimension v36 = *(void *)(a3 + 208) * matrix_number_of_columns;
  sparse_dimension v24 = v41 + v9 + v20 * matrix_number_of_rows + v21 + v22 + v36;
  sparse_matrix_double v25 = sparse_matrix_create_double(v24, v38);
  v52[3] = v25;
  uint64_t v51 = 0;
  sub_1DD4C7A14(v52, v24, &v51);
  sparse_dimension v39 = v24;
  sub_1DD4C8008(&v51, v24);
  sub_1DD4C1F3C(v25, (uint64_t *)v52, &v51, Aa, (double *)a2, a3);
  if (a4) {
    printf("added %ld derivative constraints.\n", v9);
  }
  if (*(void *)(a3 + 48) == *(void *)(a3 + 56))
  {
    sparse_index v23 = v9;
  }
  else
  {
    sub_1DD4C25A4(v25, v52, &v51, v9, matrix_number_of_columns, v26, a3);
    if (a4) {
      printf("added %ld initial condition constraints.\n", v41);
    }
  }
  unsigned int v48 = 0;
  double v49 = 0;
  uint64_t v50 = 0;
  sub_1DD4C8080(&v48, v56, v57, (v57 - (uint64_t)v56) >> 2);
  sub_1DD4C2964(v25, v52, &v51, (uint64_t *)&v48, v23, matrix_number_of_columns);
  if (v48)
  {
    double v49 = v48;
    operator delete(v48);
  }
  if (a4) {
    printf("added %ld invalid-frame constraints.\n", v21);
  }
  uint64_t v45 = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  sub_1DD4BE0E4(&v45, *(const void **)(a3 + 144), *(void *)(a3 + 152), (uint64_t)(*(void *)(a3 + 152) - *(void *)(a3 + 144)) >> 5);
  sparse_index v27 = v23 + v21;
  sub_1DD4C3750(v25, v52, (uint64_t *)&v51, (uint64_t *)&v45, v27, matrix_number_of_rows, matrix_number_of_columns, (_DWORD *)a2, a3);
  if (v45)
  {
    int v46 = v45;
    operator delete(v45);
  }
  if (a4) {
    printf("added %ld salient-rect constraints.\n", v43);
  }
  uint64_t v29 = v27 + v43;
  int v30 = *(void **)(a3 + 192);
  if (v30 != (void *)(a3 + 200))
  {
    do
    {
      sub_1DD4C3B60(v25, v52, &v51, v30[4], v30 + 5, v29, v28, matrix_number_of_columns);
      float64x2_t v31 = (void *)v30[1];
      if (v31)
      {
        do
        {
          float64x2_t v32 = v31;
          float64x2_t v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          float64x2_t v32 = (void *)v30[2];
          BOOL v33 = *v32 == (void)v30;
          int v30 = v32;
        }
        while (!v33);
      }
      v29 += matrix_number_of_columns;
      int v30 = v32;
    }
    while (v32 != (void *)(a3 + 200));
  }
  if (a4) {
    printf("added %ld path constraints.\n", v36);
  }
  if (matrix_number_of_rows)
  {
    uint64_t v34 = 0;
    for (unint64_t j = 0; j != matrix_number_of_rows; ++j)
    {
      sub_1DD4C2D00(v25, v52, &v51, v29, v34, matrix_number_of_columns, (int *)a2, a3, j);
      if ((_BYTE)j == 0xFF) {
        sparse_commit(v25);
      }
      v29 += v20;
      v34 += matrix_number_of_columns;
    }
  }
  if (a4)
  {
    printf("added %ld x %ld per-frame constraints.\n", matrix_number_of_rows, v20);
    printf("-> total of %ld constraints (expected %ld)\n", v29, v39);
  }
  sub_1DD4C4254();
}

void sub_1DD4C4188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a36) {
    operator delete(a36);
  }
  sparse_dimension v39 = *(void **)(v37 - 176);
  if (v39)
  {
    *(void *)(v37 - 168) = v39;
    operator delete(v39);
  }
  int64x2_t v40 = *(void **)(v37 - 136);
  if (v40)
  {
    *(void *)(v37 - 128) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4C4254()
{
}

void sub_1DD4C4380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a21) {
    operator delete(a21);
  }
  MEMORY[0x1E01B7750](v22, 0x10B0C40BD2A282ELL);
  _Unwind_Resume(a1);
}

void sub_1DD4C43E4(unint64_t a1@<X0>, unint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  sub_1DD4C1490((uint64_t)v32, (uint64_t)__p, a1, a3);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v29[0] = *(_OWORD *)__p;
  v29[1] = v31;
  uint64_t v11 = vaddvq_s64(vaddq_s64(v31, *(int64x2_t *)__p));
  do
  {
    v10 += *(void *)((char *)v29 + v9 * 8);
    v32[++v9] = v10;
  }
  while (v9 != 3);
  __p[0] = 0;
  sub_1DD4C7A14(a5, v11 * a2, __p);
  uint64_t v12 = 8 * a2;
  for (uint64_t i = 1; i != 4; ++i)
  {
    if (i == 3)
    {
      uint64_t v14 = *((void *)a3 + 10);
    }
    else if (i == 2)
    {
      uint64_t v14 = *((void *)a3 + 9);
    }
    else
    {
      uint64_t v14 = 0;
      if (i == 1) {
        uint64_t v14 = *((void *)a3 + 8);
      }
    }
    int v15 = *(_DWORD *)a3;
    uint64_t v28 = v14;
    sub_1DD4C7A14(__p, a2, &v28);
    uint64_t v16 = (double *)__p[0];
    if (!v15) {
      *((double *)__p[0] + 8) = *((double *)__p[0] + 8) * 0.01;
    }
    unint64_t v17 = *((void *)v29 + i);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a4 + 24);
      uint64_t v20 = (double *)__p[1];
      unint64_t v21 = ((char *)__p[1] - (char *)v16) >> 3;
      if (v21 <= 1) {
        unint64_t v21 = 1;
      }
      uint64_t v22 = (double *)(*a5 + v12 * v32[i]);
      do
      {
        if (v20 != v16)
        {
          double v23 = *(double *)(v19 + 8 * v18);
          sparse_dimension v24 = v16;
          sparse_matrix_double v25 = v22;
          unint64_t v26 = v21;
          do
          {
            double v27 = *v24++;
            *v25++ = v23 * v27;
            --v26;
          }
          while (v26);
        }
        ++v18;
        uint64_t v22 = (double *)((char *)v22 + v12);
      }
      while (v17 > v18);
    }
    if (v16)
    {
      __p[1] = v16;
      operator delete(v16);
    }
  }
}

void sub_1DD4C45D0(_Unwind_Exception *exception_object)
{
}

sparse_matrix_double sub_1DD4C45F4(uint64_t a1, unint64_t a2, unint64_t a3, double *a4, void *a5)
{
  long long v67[4] = *MEMORY[0x1E4F143B8];
  sub_1DD4C1490((uint64_t)v67, (uint64_t)__p, a2, a4);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v64[0] = *(_OWORD *)__p;
  v64[1] = v66;
  uint64_t v11 = vaddvq_s64(vaddq_s64(v66, *(int64x2_t *)__p));
  v67[0] = 0;
  do
  {
    v10 += *(void *)((char *)v64 + v9 * 8);
    v67[++v9] = v10;
  }
  while (v9 != 3);
  sparse_dimension v12 = v11 * a3;
  sub_1DD4C1D4C(a1, v11 * a3);
  uint64_t v13 = *(void *)(a1 + 8) - *(void *)a1;
  if (v13)
  {
    unint64_t v14 = v13 >> 3;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    bzero(*(void **)a1, 8 * v14);
  }
  uint64_t v15 = 8 * a3;
  for (uint64_t i = 1; i != 4; ++i)
  {
    if (i == 3)
    {
      unint64_t v17 = (void *)*((void *)a4 + 10);
    }
    else if (i == 2)
    {
      unint64_t v17 = (void *)*((void *)a4 + 9);
    }
    else
    {
      unint64_t v17 = 0;
      if (i == 1) {
        unint64_t v17 = (void *)*((void *)a4 + 8);
      }
    }
    int v18 = *(_DWORD *)a4;
    v62[0] = v17;
    sub_1DD4C7A14(__p, a3, v62);
    uint64_t v19 = (double *)__p[0];
    if (!v18) {
      *((double *)__p[0] + 8) = *((double *)__p[0] + 8) * 0.01;
    }
    unint64_t v20 = *((void *)v64 + i);
    if (v20)
    {
      uint64_t v21 = 0;
      uint64_t v22 = a5[3];
      double v23 = (double *)__p[1];
      unint64_t v24 = ((char *)__p[1] - (char *)v19) >> 3;
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      sparse_matrix_double v25 = (double *)(*(void *)a1 + v15 * v67[i]);
      do
      {
        if (v23 != v19)
        {
          double v26 = *(double *)(v22 + 8 * v21);
          double v27 = v19;
          uint64_t v28 = v25;
          unint64_t v29 = v24;
          do
          {
            double v30 = *v27++;
            *v28++ = v26 * v30;
            --v29;
          }
          while (v29);
        }
        ++v21;
        sparse_matrix_double v25 = (double *)((char *)v25 + v15);
      }
      while (v20 > v21);
    }
    if (v19)
    {
      __p[1] = v19;
      operator delete(v19);
    }
  }
  int v31 = *(_DWORD *)a4;
  v62[0] = *((void **)a4 + 6);
  sub_1DD4C7A14(__p, a3, v62);
  if (!v31) {
    *((double *)__p[0] + 8) = *((double *)__p[0] + 8) * 0.01;
  }
  int v32 = *(_DWORD *)a4;
  if (a5[15] == a5[16]) {
    uint64_t v63 = 0;
  }
  else {
    uint64_t v63 = *((void *)a4 + 7);
  }
  sub_1DD4C7A14(v62, a3, &v63);
  if (!v32) {
    *((double *)v62[0] + 8) = *((double *)v62[0] + 8) * 0.01;
  }
  uint64_t v33 = a5[15];
  if (v33 != a5[16] && a2)
  {
    uint64_t v34 = 0;
    uint64_t v35 = (double *)v62[0];
    uint64_t v36 = a5[3];
    uint64_t v37 = *(double **)a1;
    do
    {
      uint64_t v38 = v33 + 24 * v34;
      sparse_dimension v39 = *(double **)v38;
      if (*(void *)v38 != *(void *)(v38 + 8) && a3 != 0)
      {
        unint64_t v41 = a3;
        int64x2_t v42 = v37;
        uint64_t v43 = v35;
        do
        {
          double v44 = *v43++;
          double v45 = v44;
          double v46 = *v39++;
          *int64x2_t v42 = *v42 + -(v45 * v46) * *(double *)(v36 + 8 * v34);
          ++v42;
          --v41;
        }
        while (v41);
      }
      ++v34;
      uint64_t v37 = (double *)((char *)v37 + v15);
    }
    while (v34 != a2);
  }
  sparse_matrix_double v47 = sparse_matrix_create_double(v12, v12);
  sparse_set_matrix_property(v47, SPARSE_UPPER_SYMMETRIC);
  if (a2)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    do
    {
      if (a3)
      {
        uint64_t v50 = 0;
        do
        {
          double v51 = *((double *)__p[0] + v50);
          uint64_t v52 = a5[12];
          if (v52 != a5[13]) {
            double v51 = v51 * *(double *)(*(void *)(v52 + 24 * v49) + 8 * v50);
          }
          double v53 = v51 + 0.0;
          uint64_t v54 = a5[15];
          if (v54 != a5[16] && *(void *)(v54 + 24 * v49) != *(void *)(v54 + 24 * v49 + 8)) {
            double v53 = v53 + *((double *)v62[0] + v50);
          }
          if (!*(_DWORD *)a4)
          {
            double v55 = a4[15];
            if ((v50 & 0x7FFFFFFB) != 0) {
              double v55 = -0.0;
            }
            double v53 = v53 + v55;
            if ((v50 & 0x7FFFFFFD) == 1) {
              double v53 = v53 + a4[16];
            }
          }
          if (v53 != 0.0) {
            sparse_insert_entry_double(v47, v53 * *(double *)(a5[3] + 8 * v49), v48 + v50, v48 + v50);
          }
          ++v50;
        }
        while (a3 != v50);
      }
      ++v49;
      v48 += a3;
    }
    while (v49 != a2);
    uint64_t v56 = 0;
    sparse_index v57 = 3;
    do
    {
      if (!*(_DWORD *)a4)
      {
        double v58 = a4[15];
        if (v58 != 0.0)
        {
          sparse_insert_entry_double(v47, -(v58 * *(double *)(a5[3] + 8 * v56)), v57 - 3, v57 + 1);
          sparse_insert_entry_double(v47, -(a4[15] * *(double *)(a5[3] + 8 * v56)), v57 + 1, v57 - 3);
        }
        double v59 = a4[16];
        if (v59 != 0.0)
        {
          sparse_insert_entry_double(v47, v59 * *(double *)(a5[3] + 8 * v56), v57 - 2, v57);
          sparse_insert_entry_double(v47, a4[16] * *(double *)(a5[3] + 8 * v56), v57, v57 - 2);
        }
      }
      ++v56;
      v57 += a3;
    }
    while (a2 != v56);
  }
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v47;
}

void sub_1DD4C4AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4C4B30(void *A, double *a2, uint64_t a3, int a4)
{
  if (a4) {
    printf("Solving l1 LP with w1=%f, w2=%f, w3=%f\n", a2[8], a2[9], a2[10]);
  }
  sparse_get_matrix_number_of_rows(A);
  sparse_get_matrix_number_of_columns(A);
  sub_1DD4C3C50(A, (uint64_t)a2, a3, 0);
}

void sub_1DD4C4C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  sub_1DD4C7A98(&a12, 0);
  MEMORY[0x1E01B7750](v16, 0x10A1C404B04B953);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1DD4C7A98(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1DD4C4CC8(void *A, double *a2, uint64_t a3, int a4)
{
  if (a4) {
    printf("Solving l1 QP with q0=%f, qt=%f, w1=%f, w2=%f, w3=%f, cropfraction=%f %f\n", a2[6], a2[7], a2[8], a2[9], a2[10], a2[4], a2[5]);
  }
  sparse_get_matrix_number_of_rows(A);
  sparse_get_matrix_number_of_columns(A);
  sub_1DD4C3C50(A, (uint64_t)a2, a3, 0);
}

void sub_1DD4C4E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *__p, uint64_t a18)
{
  sub_1DD4C7A98(&a16, 0);
  MEMORY[0x1E01B7750](v18, 0x10A1C40F3C75648);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1DD4C7A98((void **)(v19 - 56), 0);
  _Unwind_Resume(a1);
}

double sub_1DD4C4E70(uint64_t a1, int a2, char a3, double a4, double a5, double a6, double a7)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 24) = a3;
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 48) = xmmword_1DD511D20;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_OWORD *)(a1 + 80) = xmmword_1DD511D30;
  *(unsigned char *)(a1 + 96) = 1;
  *(_OWORD *)(a1 + 104) = xmmword_1DD511D40;
  double v12 = 0.0;
  double v13 = 1.0;
  if (a2) {
    int v14 = 0;
  }
  else {
    int v14 = 10;
  }
  if (a2) {
    double v13 = 0.0;
  }
  *(double *)(a1 + 120) = v13;
  *(double *)(a1 + 128) = (double)v14;
  if (!a2) {
    double v12 = 0.1;
  }
  *(double *)(a1 + 136) = v12;
  *(double *)(a1 + 144) = v12;
  *(void *)&double result = 16842752;
  *(_DWORD *)(a1 + 152) = 16842752;
  return result;
}

uint64_t sub_1DD4C4EF4(uint64_t a1)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = 0;
  v3[3] = 0;
  v4[3] = 0;
  sub_1DD4C7520((void *)a1, (uint64_t)v3);
  sub_1DD4C762C((void *)(a1 + 32), (uint64_t)v4);
  sub_1DD4BE1DC(v4);
  sub_1DD4BE260(v3);
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_1DD511D50;
  *(unsigned char *)(a1 + 88) = 0;
  return a1;
}

void sub_1DD4C4F9C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DD4BAC8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C4FB0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (a1 != a2) {
    sub_1DD4C80FC((char *)a1, *(char **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  CMTimeMake(&v4, 20, 600);
  sub_1DD4C5100((void *)a1, 0, &v4);
  return a1;
}

void sub_1DD4C506C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v6 = v5;
  sub_1DD4BDF88(v6, *(void **)(v4 + 200));
  double v8 = *(void **)(v4 + 168);
  if (v8)
  {
    *(void *)(v4 + 176) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(v4 + 144);
  if (v9)
  {
    *(void *)(v4 + 152) = v9;
    operator delete(v9);
  }
  sub_1DD4BDB34((void ***)va);
  sub_1DD4BDB34((void ***)va);
  uint64_t v10 = *(void **)(v4 + 72);
  if (v10)
  {
    *(void *)(v4 + 80) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(v4 + 48);
  if (v11)
  {
    *(void *)(v4 + 56) = v11;
    operator delete(v11);
  }
  double v12 = *(void **)(v4 + 24);
  if (v12)
  {
    *(void *)(v4 + 32) = v12;
    operator delete(v12);
  }
  double v13 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_1DD4C5100(void *a1, int a2, CMTime *a3)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = v3 - *a1;
  if (v3 != *a1)
  {
    uint64_t v8 = v4 / 24;
    uint64_t v9 = (void **)(a1 + 3);
    sub_1DD4C1D4C((uint64_t)(a1 + 3), v4 / 24);
    if (v4 == 24)
    {
      **uint64_t v9 = 0x3FF0000000000000;
    }
    else
    {
      unint64_t v10 = v8 - 1;
      sub_1DD4C8238(v30, v8 - 1);
      unint64_t v11 = a2 & ~(a2 >> 31);
      if (v8 - 1 > v11)
      {
        uint64_t v12 = 24 * v11;
        unint64_t v13 = ~v11 + v8;
        do
        {
          uint64_t v14 = *a1 + v12;
          CMTime v29 = *(CMTime *)v14;
          CMTime v28 = *(CMTime *)(v14 + 24);
          CMTime lhs = v28;
          CMTime rhs = v29;
          CMTimeSubtract(&v27, &lhs, &rhs);
          uint64_t v15 = (char *)v30[0] + v12;
          long long v16 = *(_OWORD *)&v27.value;
          *((void *)v15 + 2) = v27.epoch;
          *(_OWORD *)uint64_t v15 = v16;
          v12 += 24;
          --v13;
        }
        while (v13);
      }
      CMTime time = *a3;
      double Seconds = CMTimeGetSeconds(&time);
      if (v10 <= v11)
      {
        uint64_t v22 = *v9;
      }
      else
      {
        double v18 = Seconds;
        uint64_t v19 = 24 * v11;
        do
        {
          CMTimeEpoch v20 = *(void *)((char *)v30[0] + v19 + 16);
          *(_OWORD *)&v23.value = *(_OWORD *)((char *)v30[0] + v19);
          v23.CMTimeEpoch epoch = v20;
          Float64 v21 = CMTimeGetSeconds(&v23);
          uint64_t v22 = *v9;
          *(Float64 *)&(*v9)[v11++] = v21 / v18;
          v19 += 24;
        }
        while (v10 != v11);
      }
      v22[v10] = v22[v8 - 2];
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
    }
  }
}

void sub_1DD4C52C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4C52F0(int a1, unint64_t a2, uint64_t a3)
{
  if (a1 >= a2 && (a3 == -1 || a3 + a2 > a1)) {
    return (a1 - a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1DD4C5320(uint64_t a1, uint64_t *a2, signed int a3, int a4)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v8 = (uint64_t *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v48 = a1 + 144;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  uint64_t v9 = (uint64_t **)(a1 + 192);
  uint64_t v10 = a1 + 24;
  uint64_t v49 = (void **)(a1 + 72);
  unint64_t v11 = (uint64_t *)(a1 + 120);
  uint64_t v47 = a1 + 168;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v12 = (char *)a2[6];
  uint64_t v13 = a2[7];
  if (v12 != (char *)v13)
  {
    if (a3)
    {
      puts("warning: asked to copy l1StabParams initial condition to a different range; ignoring.");
    }
    else if ((uint64_t *)a1 != a2)
    {
      sub_1DD4C82D4((char *)(a1 + 48), v12, v13, (v13 - (uint64_t)v12) >> 3);
    }
  }
  sub_1DD4C5860(a2 + 3, a3, a4, &v51);
  uint64_t v14 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(a1 + 32) = v14;
    operator delete(v14);
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
  }
  *(_OWORD *)(a1 + 24) = v51;
  *(void *)(a1 + 40) = v52;
  sub_1DD4B807C(a2, a3, a4, &v51);
  uint64_t v15 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v15;
    operator delete(v15);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v51;
  *(void *)(a1 + 16) = v52;
  CMTimeMake(&v50, 20, 600);
  sub_1DD4C5100((void *)a1, 0, &v50);
  sub_1DD4C58C4(a2 + 12, a3, a4, &v51);
  sub_1DD4C8598(v8);
  *(_OWORD *)(a1 + 96) = v51;
  *(void *)(a1 + 112) = v52;
  uint64_t v52 = 0;
  long long v51 = 0uLL;
  double v53 = &v51;
  sub_1DD4BDB34((void ***)&v53);
  sub_1DD4C58C4(a2 + 15, a3, a4, &v51);
  sub_1DD4C8598(v11);
  *(_OWORD *)(a1 + 120) = v51;
  *(void *)(a1 + 136) = v52;
  uint64_t v52 = 0;
  long long v51 = 0uLL;
  double v53 = &v51;
  sub_1DD4BDB34((void ***)&v53);
  sub_1DD4C5938(a2 + 18, a3, a4, &v51);
  long long v16 = *(void **)v48;
  if (*(void *)v48)
  {
    *(void *)(a1 + 152) = v16;
    operator delete(v16);
    *(void *)uint64_t v48 = 0;
    *(void *)(v48 + 8) = 0;
    *(void *)(v48 + 16) = 0;
  }
  *(_OWORD *)(a1 + 144) = v51;
  *(void *)(a1 + 160) = v52;
  sub_1DD4C5860(a2 + 21, a3, a4, &v51);
  unint64_t v17 = *(void **)v47;
  if (*(void *)v47)
  {
    *(void *)(a1 + 176) = v17;
    operator delete(v17);
    *(void *)uint64_t v47 = 0;
    *(void *)(v47 + 8) = 0;
    *(void *)(v47 + 16) = 0;
  }
  *(_OWORD *)(a1 + 168) = v51;
  *(void *)(a1 + 184) = v52;
  uint64_t v19 = a2[9];
  uint64_t v18 = a2[10];
  if (v18 != v19)
  {
    unint64_t v20 = 0;
    do
    {
      unint64_t v21 = *(int *)(v19 + 4 * v20);
      BOOL v23 = a4 == -1 || a4 + (uint64_t)a3 > v21;
      BOOL v24 = v21 < a3 || !v23;
      if (!v24)
      {
        int v25 = v21 - a3;
        if ((int)v21 - a3 >= 0)
        {
          CMTime v27 = *(char **)(a1 + 80);
          unint64_t v26 = *(void *)(a1 + 88);
          if ((unint64_t)v27 >= v26)
          {
            CMTime v29 = (char *)*v49;
            uint64_t v30 = (v27 - (unsigned char *)*v49) >> 2;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 62) {
              sub_1DD4BACA0();
            }
            uint64_t v32 = v26 - (void)v29;
            if (v32 >> 1 > v31) {
              unint64_t v31 = v32 >> 1;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              uint64_t v34 = (char *)sub_1DD4BB6B8(a1 + 88, v33);
              CMTime v29 = *(char **)(a1 + 72);
              CMTime v27 = *(char **)(a1 + 80);
            }
            else
            {
              uint64_t v34 = 0;
            }
            uint64_t v35 = &v34[4 * v30];
            *(_DWORD *)uint64_t v35 = v25;
            CMTime v28 = v35 + 4;
            while (v27 != v29)
            {
              int v36 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            *(void *)(a1 + 72) = v35;
            *(void *)(a1 + 80) = v28;
            *(void *)(a1 + 88) = &v34[4 * v33];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *(_DWORD *)CMTime v27 = v25;
            CMTime v28 = v27 + 4;
          }
          *(void *)(a1 + 80) = v28;
          uint64_t v19 = a2[9];
          uint64_t v18 = a2[10];
        }
      }
      ++v20;
    }
    while (v20 < (v18 - v19) >> 2);
  }
  uint64_t v37 = (uint64_t *)a2[24];
  if (v37 != a2 + 25)
  {
    do
    {
      uint64_t v38 = v37[4];
      BOOL v40 = a4 == -1 || a4 + (uint64_t)a3 > (unint64_t)(int)v38;
      if ((int)v38 >= (unint64_t)a3 && v40)
      {
        uint64_t v42 = (v38 - a3);
        if ((int)v42 >= 0)
        {
          *(void *)&long long v51 = v42;
          double v53 = &v51;
          uint64_t v43 = sub_1DD4BD454(v9, (unint64_t *)&v51, (uint64_t)&unk_1DD511D74, (uint64_t **)&v53);
          if (v37 != v43) {
            sub_1DD4C82D4((char *)v43 + 40, (char *)v37[5], v37[6], (v37[6] - v37[5]) >> 3);
          }
        }
      }
      double v44 = (uint64_t *)v37[1];
      if (v44)
      {
        do
        {
          double v45 = v44;
          double v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          double v45 = (uint64_t *)v37[2];
          BOOL v24 = *v45 == (void)v37;
          uint64_t v37 = v45;
        }
        while (!v24);
      }
      uint64_t v37 = v45;
    }
    while (v45 != a2 + 25);
  }
  return a1;
}

void sub_1DD4C578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  sub_1DD4BDF88(v22, *a10);
  BOOL v24 = *a15;
  if (*a15)
  {
    *(void *)(v21 + 176) = v24;
    operator delete(v24);
  }
  int v25 = *a16;
  if (*a16)
  {
    *(void *)(v21 + 152) = v25;
    operator delete(v25);
  }
  a21 = a11;
  sub_1DD4BDB34(&a21);
  a21 = a12;
  sub_1DD4BDB34(&a21);
  unint64_t v26 = *a17;
  if (*a17)
  {
    *(void *)(v21 + 80) = v26;
    operator delete(v26);
  }
  CMTime v27 = *a14;
  if (*a14)
  {
    *(void *)(v21 + 56) = v27;
    operator delete(v27);
  }
  CMTime v28 = *a13;
  if (*a13)
  {
    *(void *)(v21 + 32) = v28;
    operator delete(v28);
  }
  CMTime v29 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1DD4C5860@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (unint64_t v6 = (unint64_t)(v5 - v4) >> 3, (int)v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1) {
      int v7 = v6 - a2;
    }
    else {
      int v7 = a3;
    }
    if ((int)(v7 + a2) <= (int)v6) {
      int v8 = v7;
    }
    else {
      int v8 = v6 - a2;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1DD4C83E0(a4, (const void *)(v4 + 8 * a2), v4 + 8 * a2 + 8 * v8, v8);
  }
  return result;
}

uint64_t *sub_1DD4C58C4@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (int v6 = -1431655765 * ((unint64_t)(v5 - v4) >> 3), v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1) {
      int v7 = v6 - a2;
    }
    else {
      int v7 = a3;
    }
    if ((int)(v7 + a2) <= v6) {
      int v8 = v7;
    }
    else {
      int v8 = v6 - a2;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1DD4C845C(a4, v4 + 24 * a2, v4 + 24 * a2 + 24 * v8, v8);
  }
  return result;
}

uint64_t *sub_1DD4C5938@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (unint64_t v6 = (unint64_t)(v5 - v4) >> 5, (int)v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1) {
      int v7 = v6 - a2;
    }
    else {
      int v7 = a3;
    }
    if ((int)(v7 + a2) <= (int)v6) {
      int v8 = v7;
    }
    else {
      int v8 = v6 - a2;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1DD4C85D4(a4, (const void *)(v4 + 32 * a2), v4 + 32 * a2 + 32 * v8, v8);
  }
  return result;
}

char *sub_1DD4C59A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DD4C8650(a1 + 24, *(void *)(a1 + 32), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  sub_1DD4C8928(a1, *(void *)(a1 + 8), *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  int v6 = -1431655765 * ((*(void *)(a1 + 8) - *(void *)a1) >> 3)
     + 1431655765 * ((*(void *)(a2 + 8) - *(void *)a2) >> 3)
     - 1;
  CMTimeMake(&v14, 20, 600);
  sub_1DD4C5100((void *)a1, v6, &v14);
  sub_1DD4C8CA4(a1 + 72, *(void *)(a1 + 80), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  sub_1DD4C8F7C((uint64_t *)(a1 + 96), *(__n128 **)(a1 + 104), *(void *)(a2 + 96), *(void *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
  sub_1DD4C8F7C((uint64_t *)(a1 + 120), *(__n128 **)(a1 + 128), *(void *)(a2 + 120), *(void *)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3));
  sub_1DD4C95FC(a1 + 144, *(void *)(a1 + 152), *(char **)(a2 + 144), *(char **)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 5);
  double result = sub_1DD4C8650(a1 + 168, *(void *)(a1 + 176), *(char **)(a2 + 168), *(char **)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  int v8 = *(char **)(a2 + 192);
  if (v8 != (char *)(a2 + 200))
  {
    uint64_t v9 = (uint64_t **)(a1 + 192);
    do
    {
      unint64_t v13 = *((void *)v8 + 4) + a3;
      uint64_t v15 = &v13;
      double result = (char *)sub_1DD4BD454(v9, &v13, (uint64_t)&unk_1DD511D74, (uint64_t **)&v15);
      if (v8 != result) {
        double result = sub_1DD4C82D4(result + 40, *((char **)v8 + 5), *((void *)v8 + 6), (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 3);
      }
      uint64_t v10 = (char *)*((void *)v8 + 1);
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (char *)*((void *)v8 + 2);
          BOOL v12 = *(void *)v11 == (void)v8;
          int v8 = v11;
        }
        while (!v12);
      }
      int v8 = v11;
    }
    while (v11 != (char *)(a2 + 200));
  }
  return result;
}

sparse_m_double *sub_1DD4C5B88(sparse_m_double *A, void *a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  int v8 = A;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (a2[1] == *a2) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 3;
  }
  if (a4) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = 0;
  }
  if (a4) {
    unint64_t v9 = a4;
  }
  unint64_t v21 = v9;
  if (v9)
  {
    uint64_t v12 = 0;
    do
    {
      if (v10)
      {
        for (sparse_index i = 0; i != v10; ++i)
        {
          double v14 = *(double *)(*(void *)(*a2 + 24 * (v12 + v11)) + 8 * i);
          if (v14 != 0.0) {
            A = (sparse_m_double *)(int)sparse_insert_entry_double(v8, v14, v12 + a5, i);
          }
        }
      }
      ++v12;
    }
    while (v12 != v21);
  }
  if (a5)
  {
    unint64_t v15 = 1;
    do
    {
      if (v10)
      {
        for (sparse_index j = 0; j != v10; ++j)
        {
          double v17 = *(double *)(*(void *)(*a2 + 24 * (v15 + v11)) + 8 * j);
          if (v17 != 0.0) {
            A = (sparse_m_double *)(int)sparse_insert_entry_double(v8, v17, a5 - v15, j);
          }
        }
      }
      ++v15;
    }
    while (v15 <= a5);
  }
  if (a6)
  {
    unint64_t v18 = 1;
    do
    {
      if (v10)
      {
        for (sparse_index k = 0; k != v10; ++k)
        {
          double v20 = *(double *)(*(void *)(*a2 + 24 * (v21 + v11 + ~v18)) + 8 * k);
          if (v20 != 0.0) {
            A = (sparse_m_double *)(int)sparse_insert_entry_double(v8, v20, a6 + v21 - 1 + v18, k);
          }
        }
      }
      ++v18;
    }
    while (v18 <= a6);
  }
  return A;
}

void sub_1DD4C5D50()
{
}

void sub_1DD4C5E74(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DD50F278(v1);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1DD4C5EA0@<X0>(double *result@<X0>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  *a2 = 0;
  double v3 = result[11];
  if (result[4] >= v3 && result[5] >= v3) {
    sub_1DD4C5ECC();
  }
  *a2 = 3;
  *a3 = 0;
  return result;
}

void sub_1DD4C5ECC()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1DD4C5FD4(_Unwind_Exception *a1)
{
  sub_1DD4BE1DC(v2);
  sub_1DD4BE260((void *)(v3 - 152));
  MEMORY[0x1E01B7750](v1, 0x10B0C408AFB0367);
  _Unwind_Resume(a1);
}

void *sub_1DD4C6018(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 280) - *(void *)(a1 + 272)) >> 3);
  sub_1DD4C8F7C((uint64_t *)(a1 + 272), *(__n128 **)(a1 + 280), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  sub_1DD4C59A0(a1 + 296, a3, v9);
  sub_1DD4C9C68((uint64_t)v11, a4);
  sub_1DD4C6110(a1, 0, (uint64_t)v11, a5);
  return sub_1DD4C9D00(v11);
}

void sub_1DD4C60F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4C9D00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DD4C6110(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v8 = *(void **)(a1 + 272);
  uint64_t v9 = *(void *)(a1 + 280) - (void)v8;
  if (v9) {
    uint64_t v10 = (uint64_t)(v8[1] - *v8) >> 3;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*a4) {
    return;
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  if (a2)
  {
    if (v11 <= 2) {
      goto LABEL_18;
    }
  }
  else if (v11 < 3 || *(unsigned char *)(a1 + 224) == 0)
  {
    return;
  }
  int v13 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1 && v10 != 9)
  {
    printf("Require k=9 for l1Model_logHomography, got k=%zu.\n");
LABEL_18:
    *a4 = 3;
    return;
  }
  if (v13 == 1 && v10 != 4)
  {
    printf("Require k=4 for l1Model_logHomographyScale, got k=%zu.\n");
    goto LABEL_18;
  }
  if (v13 == 1 && v11 != (uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 3) {
    goto LABEL_18;
  }
  double v14 = *(double **)(a1 + 320);
  unint64_t v15 = *(double **)(a1 + 328);
  if (v11 != v15 - v14) {
    goto LABEL_18;
  }
  if (v15 != v14)
  {
    if (v11 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v11;
    }
    while (*v14 > 0.0)
    {
      ++v14;
      if (!--v16) {
        goto LABEL_29;
      }
    }
    goto LABEL_18;
  }
LABEL_29:
  uint64_t v17 = *(void *)(a1 + 488);
  if (v17 != a1 + 496)
  {
    memset(__p, 0, sizeof(__p));
    sub_1DD4BDA30(__p, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 3);
    sub_1DD4C7424((int)__p, *(void *)(v17 + 32), 9uLL, a1, (uint64_t *)(a1 + 296));
  }
  sub_1DD4C1530(&v37, v11, (double *)a1);
  uint64_t v18 = *(void *)(a1 + 256) + 8;
  *(void *)&long long v30 = 0;
  sub_1DD4C7738(v18, v37.i64[0] * v10, &v30);
  uint64_t v19 = *(void *)(a1 + 256) + 32;
  *(void *)&long long v30 = 0;
  sub_1DD4C7738(v19, v37.i64[1] * v10, &v30);
  uint64_t v20 = *(void *)(a1 + 256) + 56;
  *(void *)&long long v30 = 0;
  sub_1DD4C7738(v20, v38 * v10, &v30);
  uint64_t v21 = *(void *)(a1 + 256) + 80;
  *(void *)&long long v30 = 0;
  sub_1DD4C7738(v21, v39 * v10, &v30);
  uint64_t v28 = a1 + 160;
  if (!a2 || *(unsigned char *)(a1 + 224))
  {
    unint64_t v22 = *(void *)(a1 + 512);
    if (v22 < v11)
    {
      BOOL v23 = (_OWORD *)(a1 + 520);
      sparse_dimension v24 = *(void *)(a1 + 232);
      sparse_dimension v25 = *(void *)(a1 + 240);
      do
      {
        if (a2)
        {
          if (v22 + v24 > v11)
          {
            sparse_dimension v24 = v11 - v22;
            if (v25 + 3 > v11 - v22 || *(unsigned char *)(a1 + 248) == 0) {
              sparse_dimension v25 = v11 - v22;
            }
          }
        }
        else if (v22 + v24 > v11 || v25 + v22 + 3 > v11)
        {
          return;
        }
        *(_OWORD *)CMTime v29 = *v23;
        *(void *)(a1 + 528) = 0;
        *(void *)(a1 + 536) = 0;
        *(void *)BOOL v23 = 0;
        sub_1DD4C6F94((void *)(a1 + 272), v28, 0, v22, &v30, v25, v24, a4);
        CMTime v27 = *(void **)v23;
        if (*(void *)v23)
        {
          *(void *)(a1 + 528) = v27;
          operator delete(v27);
          *(void *)BOOL v23 = 0;
          *(void *)(a1 + 528) = 0;
          *(void *)(a1 + 536) = 0;
        }
        *BOOL v23 = v30;
        *(void *)(a1 + 536) = v31;
        if (v29[0]) {
          operator delete(v29[0]);
        }
        if (*a4) {
          break;
        }
        if (*(void *)(a3 + 24)) {
          sub_1DD4C7768(a3, *(void *)(a1 + 512), v25);
        }
        unint64_t v22 = *(void *)(a1 + 512) + v25;
        *(void *)(a1 + 512) = v22;
      }
      while (v22 < v11);
    }
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v32 = 0;
    sub_1DD4C6F94((void *)(a1 + 272), v28, 0, 0, &v35, v11, v11, a4);
    if (v35) {
      operator delete(v35);
    }
    if (v32) {
      operator delete(v32);
    }
    if (!*a4)
    {
      if (*(void *)(a3 + 24)) {
        sub_1DD4C7768(a3, 0, v11);
      }
    }
  }
}

void sub_1DD4C653C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4C6580(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, void *a4@<X8>)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  sub_1DD4C9C68((uint64_t)v16, a2);
  sub_1DD4C6110(a1, 1, (uint64_t)v16, a3);
  sub_1DD4C9D00(v16);
  if (*a3)
  {
    uint64_t v7 = 0;
  }
  else
  {
    int v8 = *(void **)(a1 + 272);
    uint64_t v9 = *(void *)(a1 + 280) - (void)v8;
    if (v9) {
      unint64_t v10 = (uint64_t)(v8[1] - *v8) >> 3;
    }
    else {
      unint64_t v10 = 0;
    }
    sub_1DD4C66B0(*(void **)(a1 + 256), a1, (void *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * (v9 >> 3), v10, 0, (uint64_t)v14);
    uint64_t v11 = *(void *)(a1 + 256);
    long long v12 = v14[0];
    *(_OWORD *)(v11 + 120) = v14[1];
    long long v13 = v14[3];
    *(_OWORD *)(v11 + 136) = v14[2];
    *(_OWORD *)(v11 + 152) = v13;
    *(void *)(v11 + 168) = v15;
    *(_OWORD *)(v11 + 104) = v12;
    uint64_t v7 = *(void *)(a1 + 256);
    *(void *)(a1 + 256) = 0;
  }
  *a4 = v7;
}

void sub_1DD4C6694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1DD4C9D00((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DD4C66B0(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)(a7 + 64) = 0;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  float64x2_t v64 = 0;
  float64x2_t v65 = 0;
  uint64_t v66 = 0;
  sub_1DD4C6DE0(&v64, a1, a5, (double *)a2);
  if (a6) {
    puts("\nL1 objective function breakdown:");
  }
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  long long v13 = sub_1DD4C45F4((uint64_t)&v61, a4, a5, (double *)a2, a3);
  double v14 = sub_1DD4C7330((uint64_t)&v64, v13, (uint64_t)&v61);
  *(double *)a7 = v14;
  if (a6) {
    printf("\tFinal objective value = %f\n", v14);
  }
  sparse_matrix_destroy(v13);
  long long v15 = *(_OWORD *)(a2 + 112);
  long long v58 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)double v59 = v15;
  long long v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v59[16] = *(_OWORD *)(a2 + 128);
  long long v60 = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  v54[2] = *(_OWORD *)(a2 + 32);
  long long v55 = v17;
  long long v18 = *(_OWORD *)(a2 + 80);
  float64x2_t v56 = *(float64x2_t *)(a2 + 64);
  long long v57 = v18;
  long long v19 = *(_OWORD *)(a2 + 16);
  v54[0] = *(_OWORD *)a2;
  v54[1] = v19;
  float64x2_t v56 = (float64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(0x3D719799812DEA11uLL), (int8x16_t)vcgtzq_f64(v56));
  double v20 = 0.0;
  if (*(double *)(a2 + 80) > 0.0) {
    double v20 = 1.0e-12;
  }
  *(double *)&long long v57 = v20;
  *(void *)&v59[8] = 0;
  *(void *)&v59[16] = 0;
  long long v55 = 0x3FF0000000000000uLL;
  uint64_t v21 = sub_1DD4C45F4((uint64_t)&v61, a4, a5, (double *)v54, a3);
  double v22 = sub_1DD4C7330((uint64_t)&v64, v21, (uint64_t)&v61);
  double v23 = v22;
  *(double *)(a7 + 8) = v22;
  double v24 = *(double *)(a2 + 48);
  if (a6) {
    printf("\tCorrections penalty (q0) = %f, weight = %f\n", v22, v24);
  }
  sparse_matrix_destroy(v21);
  double v25 = v24 * v23 + 0.0;
  *(void *)&long long v55 = 0;
  if (*(double *)(a2 + 64) == 0.0)
  {
    if ((a6 & 1) == 0)
    {
      if (*(double *)(a2 + 72) == 0.0) {
        goto LABEL_27;
      }
      goto LABEL_22;
    }
    puts("\tFirst derivative (e1) omitted from model.");
    if (*(double *)(a2 + 72) != 0.0)
    {
LABEL_22:
      v56.f64[1] = 1.0;
      uint64_t v32 = sub_1DD4C45F4((uint64_t)&v61, a4, a5, (double *)v54, a3);
      double v33 = sub_1DD4C7330((uint64_t)&v64, v32, (uint64_t)&v61);
      double v34 = v33;
      *(double *)(a7 + 40) = v33;
      double v35 = *(double *)(a2 + 72);
      if (a6) {
        printf("\tSecond derivative (w2) = %f, weight = %f\n", v33, v35);
      }
      sparse_matrix_destroy(v32);
      double v25 = v25 + v35 * v34;
      double v36 = 0.0;
      if (*(double *)(a2 + 72) > 0.0) {
        double v36 = 1.0e-12;
      }
      v56.f64[1] = v36;
LABEL_27:
      if (*(double *)(a2 + 80) == 0.0)
      {
        if (!a6) {
          goto LABEL_35;
        }
        goto LABEL_29;
      }
      goto LABEL_30;
    }
  }
  else
  {
    v56.f64[0] = 1.0;
    unint64_t v26 = sub_1DD4C45F4((uint64_t)&v61, a4, a5, (double *)v54, a3);
    double v27 = sub_1DD4C7330((uint64_t)&v64, v26, (uint64_t)&v61);
    double v28 = v27;
    *(double *)(a7 + 32) = v27;
    double v29 = *(double *)(a2 + 64);
    if (a6) {
      printf("\tFirst derivative (w1) = %f, weight = %f\n", v27, v29);
    }
    sparse_matrix_destroy(v26);
    double v25 = v25 + v29 * v28;
    double v30 = *(double *)(a2 + 72);
    double v31 = 0.0;
    if (*(double *)(a2 + 64) > 0.0) {
      double v31 = 1.0e-12;
    }
    v56.f64[0] = v31;
    if (v30 != 0.0) {
      goto LABEL_22;
    }
    if ((a6 & 1) == 0) {
      goto LABEL_27;
    }
  }
  puts("\tSecond derivative (e2) omitted from model.");
  if (*(double *)(a2 + 80) == 0.0)
  {
LABEL_29:
    puts("\tThird derivative (e3) omitted from model.");
    goto LABEL_35;
  }
LABEL_30:
  *(void *)&long long v57 = 0x3FF0000000000000;
  int64x2_t v37 = sub_1DD4C45F4((uint64_t)&v61, a4, a5, (double *)v54, a3);
  double v38 = sub_1DD4C7330((uint64_t)&v64, v37, (uint64_t)&v61);
  double v39 = v38;
  *(double *)(a7 + 48) = v38;
  double v40 = *(double *)(a2 + 80);
  if (a6) {
    printf("\tThird derivative (w3) = %f, weight = %f\n", v38, v40);
  }
  sparse_matrix_destroy(v37);
  double v25 = v25 + v40 * v39;
  double v41 = 0.0;
  if (*(double *)(a2 + 80) > 0.0) {
    double v41 = 1.0e-12;
  }
  *(double *)&long long v57 = v41;
LABEL_35:
  if (!*(_DWORD *)a2)
  {
    *(void *)&v59[8] = 0x3FF0000000000000;
    uint64_t v42 = sub_1DD4C45F4((uint64_t)&v61, a4, a5, (double *)v54, a3);
    double v43 = sub_1DD4C7330((uint64_t)&v64, v42, (uint64_t)&v61);
    double v44 = v43;
    *(double *)(a7 + 56) = v43;
    double v45 = *(double *)(a2 + 120);
    if (a6) {
      printf("\taffine_diag objective = %f, weight = %f\n", v43, v45);
    }
    sparse_matrix_destroy(v42);
    *(_OWORD *)&v59[8] = xmmword_1DD511740;
    double v46 = sub_1DD4C45F4((uint64_t)&v61, a4, a5, (double *)v54, a3);
    double v47 = sub_1DD4C7330((uint64_t)&v64, v46, (uint64_t)&v61);
    double v48 = v47;
    *(double *)(a7 + 64) = v47;
    double v49 = *(double *)(a2 + 128);
    if (a6) {
      printf("\taffine_off_diag objective = %f, weight = %f\n", v47, v49);
    }
    sparse_matrix_destroy(v46);
    double v25 = v25 + v45 * v44 + v49 * v48;
    *(void *)&v59[16] = 0;
  }
  if (a3[15] != a3[16])
  {
    *((void *)&v55 + 1) = 0x3FF0000000000000;
    CMTime v50 = sub_1DD4C45F4((uint64_t)&v61, a4, a5, (double *)v54, a3);
    double v51 = sub_1DD4C7330((uint64_t)&v64, v50, (uint64_t)&v61);
    double v52 = v51;
    *(double *)(a7 + 24) = v51;
    double v53 = *(double *)(a2 + 56);
    if (a6) {
      printf("\tTarget (qt) = %f, weight = %f\n", v51, v53);
    }
    sparse_matrix_destroy(v50);
    double v25 = v25 + v53 * v52;
  }
  if (a6) {
    printf("\tSub-objective total = %f\n", v25);
  }
  sub_1DD4C73F4((float64x2_t *)a7, (float)(1.0 / (float)a4));
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    float64x2_t v65 = v64;
    operator delete(v64);
  }
}

void sub_1DD4C6BE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(void *)(v1 - 128) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4C6C1C(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, double *a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  sub_1DD4C1490((uint64_t)v39, (uint64_t)v37, a4, a8);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v36[0] = 0;
  do
  {
    v15 += *(void *)&v37[v14 * 8];
    v36[++v14] = v15;
  }
  while (v14 != 3);
  uint64_t result = sub_1DD4C1490((uint64_t)v39, (uint64_t)v38, a6, a8);
  if (a6)
  {
    unint64_t v17 = 0;
    unint64_t v18 = v38[0];
    unint64_t v19 = v38[1];
    unint64_t v20 = v38[2];
    unint64_t v21 = v38[3];
    uint64_t v22 = 8 * a7 * a5;
    uint64_t v23 = 8 * a7;
    uint64_t v24 = 8 * v36[3] * a7;
    uint64_t v25 = 8 * v36[2] * a7;
    uint64_t v26 = 8 * v36[1] * a7;
    uint64_t result = 8 * v36[0] * a7;
    do
    {
      if (a7)
      {
        uint64_t v27 = 0;
        uint64_t v28 = a1[10] + v22;
        uint64_t v29 = *a2 + v24;
        uint64_t v30 = a1[7] + v22;
        uint64_t v31 = *a2 + v25;
        uint64_t v32 = a1[4] + v22;
        uint64_t v33 = *a2 + v26;
        uint64_t v34 = a1[1] + v22;
        uint64_t v35 = *a2 + result;
        do
        {
          if (v17 < v18) {
            *(void *)(v34 + 8 * v27) = *(void *)(v35 + 8 * v27);
          }
          if (v17 < v19) {
            *(void *)(v32 + 8 * v27) = *(void *)(v33 + 8 * v27);
          }
          if (v17 < v20) {
            *(void *)(v30 + 8 * v27) = *(void *)(v31 + 8 * v27);
          }
          if (v17 < v21) {
            *(void *)(v28 + 8 * v27) = *(void *)(v29 + 8 * v27);
          }
          ++v27;
        }
        while (a7 != v27);
      }
      ++v17;
      v22 += v23;
      v24 += v23;
      v25 += v23;
      v26 += v23;
      result += v23;
    }
    while (v17 != a6);
  }
  return result;
}

double sub_1DD4C6DE0(void *a1, void *a2, unint64_t a3, double *a4)
{
  _OWORD v33[4] = *MEMORY[0x1E4F143B8];
  sub_1DD4C1490((uint64_t)v33, (uint64_t)&v31, ((uint64_t)(a2[2] - a2[1]) >> 3) / a3, a4);
  v30[0] = v31;
  v30[1] = v32;
  sub_1DD4C1D4C((uint64_t)a1, vaddvq_s64(vaddq_s64(v32, v31)) * a3);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  v33[0] = 0;
  do
  {
    v9 += *(void *)((char *)v30 + v8 * 8);
    v33[++v8] = v9;
  }
  while (v8 != 3);
  unint64_t v10 = (double *)a2[1];
  uint64_t v11 = a2[2] - (void)v10;
  if (v11)
  {
    unint64_t v12 = v11 >> 3;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    long long v13 = (double *)(*a1 + 8 * v33[0] * a3);
    do
    {
      double v14 = *v10++;
      double result = v14;
      *v13++ = v14;
      --v12;
    }
    while (v12);
  }
  uint64_t v15 = (double *)a2[4];
  uint64_t v16 = a2[5] - (void)v15;
  if (v16)
  {
    unint64_t v17 = v16 >> 3;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    unint64_t v18 = (double *)(*a1 + 8 * v33[1] * a3);
    do
    {
      double v19 = *v15++;
      double result = v19;
      *v18++ = v19;
      --v17;
    }
    while (v17);
  }
  unint64_t v20 = (double *)a2[7];
  uint64_t v21 = a2[8] - (void)v20;
  if (v21)
  {
    unint64_t v22 = v21 >> 3;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    uint64_t v23 = (double *)(*a1 + 8 * v33[2] * a3);
    do
    {
      double v24 = *v20++;
      double result = v24;
      *v23++ = v24;
      --v22;
    }
    while (v22);
  }
  uint64_t v25 = (double *)a2[10];
  uint64_t v26 = a2[11] - (void)v25;
  if (v26)
  {
    unint64_t v27 = v26 >> 3;
    if (v27 <= 1) {
      unint64_t v27 = 1;
    }
    uint64_t v28 = (double *)(*a1 + 8 * v33[3] * a3);
    do
    {
      double v29 = *v25++;
      double result = v29;
      *v28++ = v29;
      --v27;
    }
    while (v27);
  }
  return result;
}

uint64_t sub_1DD4C6F94@<X0>(void *a1@<X2>, uint64_t a2@<X5>, int a3@<W6>, uint64_t a4@<X7>, void *a5@<X8>, sparse_dimension a6, sparse_dimension a7, int *a8)
{
  sparse_dimension v10 = a6;
  void v18[10] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  if (a1[1] == *a1) {
    sparse_dimension v12 = 0;
  }
  else {
    sparse_dimension v12 = (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 3;
  }
  if (a7 + a4 >= v11) {
    sparse_dimension v13 = v11 - a4;
  }
  else {
    sparse_dimension v13 = a7;
  }
  if (v13 < a6) {
    sparse_dimension v10 = v13;
  }
  sparse_dimension v17 = v10;
  uint64_t result = *(void *)(a2 + 24);
  if (result && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result), result))
  {
    int v15 = 2;
  }
  else
  {
    *a8 = 0;
    if (v17)
    {
      sparse_matrix_double v16 = sparse_matrix_create_double(v13, v12);
      sub_1DD4E410C((uint64_t)v16, v18);
    }
    if (a3) {
      uint64_t result = puts("Windowed-L1 requires stride length > 0.");
    }
    int v15 = 3;
  }
  *a8 = v15;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  return result;
}

void sub_1DD4C72C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  int v15 = va_arg(va1, void *);
  sparse_dimension v13 = v15;
  int v15 = 0;
  if (v13) {
    sub_1DD4C9DF8((uint64_t)va, v13);
  }
  sub_1DD4C042C((uint64_t)va1);
  double v14 = *(std::__shared_weak_count **)(v11 - 168);
  if (v14) {
    sub_1DD4C9D84(v14);
  }
  _Unwind_Resume(a1);
}

double sub_1DD4C7330(uint64_t a1, sparse_m_double *a2, uint64_t a3)
{
  sub_1DD4BD398(__p, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  sub_1DD4EB304(a2, (const double **)a1, (uint64_t)__p, CblasNoTrans);
  double v6 = sub_1DD4EB380(a1, (double **)__p);
  double v7 = sub_1DD4EB380(a3, (double **)a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v7 + v6 * 0.5;
}

void sub_1DD4C73D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float64_t sub_1DD4C73F4(float64x2_t *a1, double a2)
{
  float64x2_t v2 = vmulq_n_f64(a1[1], a2);
  *a1 = vmulq_n_f64(*a1, a2);
  a1[1] = v2;
  float64x2_t v3 = vmulq_n_f64(a1[3], a2);
  a1[2] = vmulq_n_f64(a1[2], a2);
  a1[3] = v3;
  float64_t result = a1[4].f64[0] * a2;
  a1[4].f64[0] = result;
  return result;
}

void sub_1DD4C7424(int a1, signed int a2, sparse_dimension N, uint64_t a4, uint64_t *a5)
{
  sparse_matrix_double v8 = sparse_matrix_create_double(1uLL, N);
  sub_1DD4C5320((uint64_t)v9, a5, a2, 1);
  sub_1DD4C3C50(v8, a4, (uint64_t)v9, 0);
}

void sub_1DD4C74F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4C042C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1DD4C7520(void *a1, uint64_t a2)
{
  sub_1DD4C75A4(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1DD4C75A4(void *a1)
{
  float64x2_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1DD4C762C(void *a1, uint64_t a2)
{
  sub_1DD4C76B0(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1DD4C76B0(void *a1)
{
  float64x2_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1DD4C7738(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1DD4C77C0((void **)a1, a2 - v3, a3);
  }
}

uint64_t sub_1DD4C7768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_1DD4BB904();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_1DD4C77C0(void **a1, unint64_t a2, void *a3)
{
  sparse_matrix_double v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  double v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      sparse_dimension v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      sub_1DD4BACA0();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      int v15 = (char *)sub_1DD4BAF80(v6, v14);
    }
    else {
      int v15 = 0;
    }
    unint64_t v18 = &v15[8 * v12];
    double v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    unint64_t v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (sparse_index i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t sub_1DD4C78E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1DD4C797C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1DD4C7A14(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BD410(a1, a2);
    uint64_t v6 = (void *)a1[1];
    double v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DD4C7A7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4C7A98(void **a1, void *a2)
{
  float64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1DD4C7AE8(result);
    JUMPOUT(0x1E01B7750);
  }
  return result;
}

void *sub_1DD4C7AE8(void *a1)
{
  float64x2_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[15];
  if (v3) {
    sub_1DD4C9D84(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  double v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (v8) {
    sub_1DD4C9D84(v8);
  }
  return a1;
}

void sub_1DD4C7B74(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  double v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_1DD4BACA0();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)sub_1DD4BAF80(v4, v13);
      uint64_t v8 = *a1;
      double v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    int v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    sparse_dimension v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *sub_1DD4C7C90(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BD8E0(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *uint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_1DD4BDA30(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1DD4C7D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_1DD4C7D4C(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BEB38(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_1DD4C7E20(&v13, a2);
        }
        else {
          sub_1DD4C7ED4((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_1DD4C7E20(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *float64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    float64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1DD4C7ED4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void *sub_1DD4C7F84(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BB674(a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DD4C7FEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4C8008(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BB674(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1DD4C8064(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4C8080(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float64_t result = sub_1DD4BB674(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4C80E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4C80FC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    float64_t result = sub_1DD4BD8E0(v7, v12);
    int v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      double v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  int v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    float64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    double v19 = v16;
LABEL_18:
    float64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

void *sub_1DD4C8238(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BD8E0(a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DD4C82B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4C82D4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_1DD4BACA0();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float64_t result = sub_1DD4BD410(v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      double v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    float64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    double v19 = v16;
LABEL_18:
    float64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void *sub_1DD4C83E0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float64_t result = sub_1DD4BD410(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4C8440(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4C845C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_1DD4BD8E0(result, a4);
    float64_t result = sub_1DD4C84E4((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD4C84C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1DD4BDB34(&a9);
  _Unwind_Resume(a1);
}

void *sub_1DD4C84E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *int v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1DD4BDA30(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      int v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1DD4BDAAC((uint64_t)v8);
  return v4;
}

void sub_1DD4C8584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1DD4C8598(uint64_t *a1)
{
  if (*a1)
  {
    sub_1DD4BDB88(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_1DD4C85D4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float64_t result = sub_1DD4BE160(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4C8634(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4C8650(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      sub_1DD4BACA0();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_1DD4BAF80(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    __p = v18;
    uint64_t v34 = v28;
    double v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    uint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    size_t v5 = sub_1DD4C8860((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    double v24 = &v5[8 * a5];
    uint64_t v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1DD4C8828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4C8860(void **a1, uint64_t a2, char *__src)
{
  size_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *sub_1DD4C8928(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DD4BACA0();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v37 = v9;
    if (v18) {
      uint64_t v19 = (char *)sub_1DD4BD934(v9, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v28 = &v19[24 * v15];
    __p = v19;
    uint64_t v34 = v28;
    double v36 = &v19[24 * v18];
    uint64_t v29 = &v28[24 * a5];
    uint64_t v30 = 24 * a5;
    do
    {
      long long v31 = *(_OWORD *)v7;
      *((void *)v28 + 2) = *((void *)v7 + 2);
      *(_OWORD *)uint64_t v28 = v31;
      v28 += 24;
      v7 += 24;
      v30 -= 24;
    }
    while (v30);
    uint64_t v35 = v29;
    size_t v5 = (char *)sub_1DD4C8BC4((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      uint64_t v35 = &v34[(v35 - v34 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    uint64_t v21 = &__src[24 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    double v24 = &v5[24 * a5];
    uint64_t v25 = &v23[-24 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *((void *)v26 + 2) = *((void *)v25 + 2);
        *(_OWORD *)uint64_t v26 = v27;
        v26 += 24;
        v25 += 24;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[24 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1DD4C8B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4C8BC4(void **a1, uint64_t a2, char *__src)
{
  size_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 24);
      uint64_t v7 = (void *)(v9 - 24);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  unint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  unint64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *sub_1DD4C8CA4(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    int64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      sub_1DD4BACA0();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)sub_1DD4BB6B8(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    uint64_t v28 = &v18[4 * v15];
    __p = v18;
    uint64_t v34 = v28;
    double v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)uint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    uint64_t v35 = v30;
    size_t v5 = sub_1DD4C8EB4((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    double v24 = &v5[4 * a5];
    uint64_t v25 = &v23[-4 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)uint64_t v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1DD4C8E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD4C8EB4(void **a1, uint64_t a2, char *__src)
{
  size_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  int64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

__n128 *sub_1DD4C8F7C(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 24 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = (uint64_t)sub_1DD4C84E4(v9, v21, a4, *(void **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_1DD4C9144((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      sub_1DD4C9344((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_1DD4BACA0();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_1DD4BD934(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      double v24 = &v19[24 * v15];
      uint64_t v25 = v24;
      uint64_t v26 = &v19[24 * v18];
      sub_1DD4C91A8(&v23, a3, a5);
      size_t v5 = (__n128 *)sub_1DD4C9230(a1, &v23, v5);
      sub_1DD4C9568((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1DD4C9124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *sub_1DD4C9144(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (__n128 *)((char *)a2 + v6 - a4);
  size_t v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    size_t v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *size_t v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      size_t v8 = (__n128 *)((char *)v8 + 24);
      uint64_t v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1DD4C92E4(a2, v7, v6);
}

void *sub_1DD4C91A8(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  int v4 = (void *)result[2];
  if (a3)
  {
    uint64_t v6 = &v4[3 * a3];
    uint64_t v7 = 24 * a3;
    do
    {
      *int v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      float64_t result = sub_1DD4BDA30(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    int v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1DD4C9228(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C9230(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_1DD4C93B4((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1DD4C9458(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

__n128 *sub_1DD4C92E4(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      sub_1DD4BD018(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_1DD4C9344(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        sub_1DD4C82D4(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1DD4C93B4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1DD4C94E8((uint64_t)v11);
  return v9;
}

void *sub_1DD4C9458(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = a4;
  uint64_t v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *int v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)int v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_1DD4BDAAC((uint64_t)v6);
  return v4;
}

uint64_t sub_1DD4C94E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DD4C9520(a1);
  }
  return a1;
}

void sub_1DD4C9520(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1DD4C9568(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1DD4C95A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

char *sub_1DD4C95FC(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  char v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 5)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 5);
    if (v14 >> 59) {
      sub_1DD4BACA0();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 5;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 4 > v14) {
      unint64_t v14 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v39 = v9;
    if (v17) {
      unint64_t v18 = (char *)sub_1DD4BE1A4(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    uint64_t v29 = &v18[32 * v15];
    __p = v18;
    double v36 = v29;
    double v38 = &v18[32 * v17];
    uint64_t v30 = 32 * a5;
    int v31 = &v29[32 * a5];
    do
    {
      long long v32 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 1);
      v7 += 32;
      *(_OWORD *)uint64_t v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 32;
      v30 -= 32;
    }
    while (v30);
    uint64_t v37 = v31;
    uint64_t v5 = (char *)sub_1DD4C980C((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36) {
      v37 += (v36 - v37 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 5;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[32 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    double v24 = &v5[32 * a5];
    uint64_t v25 = &v23[-32 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 1);
        v25 += 32;
        *(_OWORD *)uint64_t v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 32;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-32 * ((v23 - v24) >> 5)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[32 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[32 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1DD4C97D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4C980C(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  char v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 1);
      char v7 = (void *)(v9 - 32);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v10;
      v8 -= 32;
      v9 -= 32;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    char v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  uint64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_1DD4C98E4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  long long v6 = a2[2];
  long long v7 = a2[3];
  long long v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  a1[2] = v6;
  a1[3] = v7;
  long long v9 = a2[6];
  long long v10 = a2[7];
  long long v11 = a2[9];
  a1[8] = a2[8];
  a1[9] = v11;
  a1[6] = v9;
  a1[7] = v10;
  sub_1DD4C9A1C((uint64_t)(a1 + 10), a3);
  sub_1DD4C9A9C((uint64_t)(a1 + 12), a3 + 32);
  long long v12 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)((char *)a1 + 233) = *(_OWORD *)(a3 + 73);
  a1[14] = v12;
  operator new();
}

void sub_1DD4C99D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BDB34((void ***)va);
  long long v6 = (void *)*v4;
  *int v4 = 0;
  if (v6) {
    sub_1DD4BED04((uint64_t)v4, v6);
  }
  sub_1DD4BE1DC(v3);
  sub_1DD4BE260(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C9A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_1DD4C9A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_1DD4C9B1C(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  uint64_t v3 = a1 + 24;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v6 = 0x3FF0000000000000;
  sub_1DD4C7A14(&v7, a2, &v6);
  uint64_t v4 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
  }
  *(_OWORD *)(a1 + 24) = v7;
  *(void *)(a1 + 40) = v8;
  return a1;
}

void sub_1DD4C9BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v6 = v4;
  sub_1DD4BDF88(v6, *(void **)(v3 + 200));
  uint64_t v8 = *(void **)(v3 + 168);
  if (v8)
  {
    *(void *)(v3 + 176) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)(v3 + 144);
  if (v9)
  {
    *(void *)(v3 + 152) = v9;
    operator delete(v9);
  }
  sub_1DD4BDB34((void ***)va);
  sub_1DD4BDB34((void ***)va);
  long long v10 = *(void **)(v3 + 72);
  if (v10)
  {
    *(void *)(v3 + 80) = v10;
    operator delete(v10);
  }
  long long v11 = *(void **)(v3 + 48);
  if (v11)
  {
    *(void *)(v3 + 56) = v11;
    operator delete(v11);
  }
  long long v12 = *v5;
  if (*v5)
  {
    *(void *)(v3 + 32) = v12;
    operator delete(v12);
  }
  int64_t v13 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4C9C68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1DD4C9D00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1DD4C9D84(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_1DD4C9DF8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[7];
    if (v3)
    {
      a2[8] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      operator delete(v4);
    }
    long long v5 = (void *)a2[1];
    if (v5)
    {
      a2[2] = v5;
      operator delete(v5);
    }
    JUMPOUT(0x1E01B7750);
  }
}

void sub_1DD4C9E74()
{
}

PipelineStatePromise *sub_1DD4CA0EC(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v17 = a1;
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 count])
  {
    long long v5 = dispatch_group_create();
    uint64_t v6 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    long long v7 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
    uint64_t v15 = v4;
    uint64_t v16 = [[PipelineStatePromise alloc] initWithDispatchGroup:v5 pipelineStates:v6 errors:v7];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v8 = v4;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v25 != v11) {
            objc_enumerationMutation(v8);
          }
          int64_t v13 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          if (objc_msgSend(v13, "conformsToProtocol:", &unk_1F38BE2A0, v15))
          {
            dispatch_group_enter(v5);
            v18[0] = MEMORY[0x1E4F143A8];
            v18[1] = 3221225472;
            v18[2] = sub_1DD4CA348;
            void v18[3] = &unk_1E6CC89B8;
            uint64_t v19 = v16;
            id v20 = v6;
            uint64_t v21 = v13;
            id v22 = v7;
            uint64_t v23 = v5;
            [v17 newComputePipelineStateWithFunction:v13 completionHandler:v18];
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v10);
    }

    uint64_t v4 = v15;
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_1DD4CA348(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v8) {
    [*(id *)(a1 + 40) setObject:v8 forKey:v7];
  }
  else {
    [*(id *)(a1 + 56) setObject:v5 forKey:v7];
  }
  objc_sync_exit(v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1DD4CA3F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD4CAA00(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1DD4CA980);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4CAD6C(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

MetalFAST9BRIEF *sub_1DD4CD8E8()
{
  return objc_alloc_init(MetalFAST9BRIEF);
}

BOOL sub_1DD4CD8F8(void *a1)
{
  [a1 waitUntilCompleted];
  BOOL v2 = [a1 status] == 4;

  return v2;
}

void *sub_1DD4CD934(void *a1, __CVBuffer *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  if ([v7 didFinishInitializationWithTimeout:5000000.0])
  {
    CGRect CleanRect = CVImageBufferGetCleanRect(a2);
    CGFloat x = CleanRect.origin.x;
    CGFloat y = CleanRect.origin.y;
    double height = CleanRect.size.height;
    CGSize EncodedSize = CVImageBufferGetEncodedSize(a2);
    *(float *)&CGFloat y = EncodedSize.height - (y + height);
    long long v12 = [v7 queue];
    int64_t v13 = [v12 commandBuffer];
    context = (void *)MEMORY[0x1E01B7BB0]();
    unint64_t v14 = [v7 _textureFromPixelBuffer:a2 forcedMetalPixelFormat:13 forcedWidthDivisior:1];
    uint64_t v15 = [v7 _textureFromPixelBuffer:a3 forcedMetalPixelFormat:13 forcedWidthDivisior:1];
    uint64_t v16 = [v7 _textureFromPixelBuffer:a3 forcedMetalPixelFormat:73 forcedWidthDivisior:4];
    id v17 = [v7 _textureFromPixelBuffer:a4 forcedMetalPixelFormat:73 forcedWidthDivisior:4];
    unint64_t v18 = objc_msgSend(MEMORY[0x1E4F35330], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", objc_msgSend(v16, "pixelFormat"), objc_msgSend(v16, "width"), objc_msgSend(v16, "height"), 0);
    objc_msgSend(v18, "setUsage:", objc_msgSend(v18, "usage") | 3);
    uint64_t v19 = [v7 device];
    id v20 = (void *)[v19 newTextureWithDescriptor:v18];

    *(float *)&CGFloat x = x;
    objc_msgSend(v7, "_gaussianishBlur_metal:inputTexture:outputTexture:offset:", v13, v14, v15, *(float *)&x, *(float *)&y);
    objc_msgSend(v7, "_computeResponseMap_metal:inputTexture:outputTexture:garbagePixelCount:", v13, v16, v20, ((double)(unint64_t)objc_msgSend(v20, "width") - EncodedSize.width));
    objc_msgSend(v7, "_suppressResponseMap_metal:unsuppressedTexture:suppressedTexture:garbagePixelCount:", v13, v20, v17, ((double)(unint64_t)objc_msgSend(v20, "width") - EncodedSize.width));
    [v13 commit];
    [v13 waitUntilScheduled];
  }
  else
  {
    int64_t v13 = 0;
  }

  return v13;
}

uint64_t sub_1DD4CDB98()
{
  uint64_t v0 = getenv("AL_STABILIZE_NO_METAL");
  if (v0) {
    uint64_t result = atoi(v0);
  }
  else {
    uint64_t result = dword_1EBE80578;
  }
  dword_1EBE80578 = result;
  return result;
}

void sub_1DD4CDBD8(uint64_t a1, unint64_t a2)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = a2;
    uint64_t v4 = 0;
    unint64_t v5 = HIDWORD(a2);
    float v6 = (float)((float)(*(float *)(a1 + 244) - *(float *)(a1 + 236))
               * (float)(*(float *)(a1 + 248) - *(float *)(a1 + 240)))
       / (float)(HIDWORD(a2) * (int)a2);
    *(float *)(a1 + 192) = v6;
    double v7 = (double)(int)a2;
    double v8 = (double)SHIDWORD(a2);
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0x3FF0000000000000;
    double v107 = (double)(int)a2;
    long long v108 = xmmword_1DD511740;
    uint64_t v109 = 0;
    double v110 = (double)SHIDWORD(a2);
    uint64_t v111 = 0x3FF0000000000000;
    double v112 = (double)(int)a2;
    double v113 = (double)SHIDWORD(a2);
    uint64_t v114 = 0x3FF0000000000000;
    __asm { FMOV            V22.2D, #1.0 }
    do
    {
      unint64_t v14 = (const double *)((char *)&v104 + v4 * 8);
      float64x2x3_t v117 = vld3q_f64(v14);
      float64x2_t v15 = vmulq_f64(v117.val[1], (float64x2_t)0);
      float64x2_t v16 = vmlaq_f64(vaddq_f64(v117.val[0], v15), (float64x2_t)0, v117.val[2]);
      float64x2_t v17 = vaddq_f64(v117.val[2], vmlaq_f64(v15, (float64x2_t)0, v117.val[0]));
      float64x2_t v18 = vdivq_f64(v16, v17);
      uint64_t v19 = (double *)&v103[v4];
      float64x2_t v20 = vdivq_f64(vmlaq_f64(vmlaq_f64(v117.val[1], (float64x2_t)0, v117.val[0]), (float64x2_t)0, v117.val[2]), v17);
      vst3q_f64(v19, *(float64x2x3_t *)(&_Q22 - 2));
      v4 += 6;
    }
    while (v4 != 12);
    uint64_t v21 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0x3FF0000000000000;
    double v107 = (double)(int)a2;
    long long v108 = xmmword_1DD511740;
    uint64_t v109 = 0;
    double v110 = (double)SHIDWORD(a2);
    uint64_t v111 = 0x3FF0000000000000;
    double v112 = (double)(int)a2;
    double v113 = (double)SHIDWORD(a2);
    uint64_t v114 = 0x3FF0000000000000;
    double v22 = *(double *)(a1 + 8);
    double v23 = *(double *)(a1 + 32);
    double v24 = *(double *)(a1 + 56);
    uint64_t v92 = *(void *)(a1 + 16);
    uint64_t v93 = *(void *)a1;
    float64x2_t v25 = (float64x2_t)vdupq_lane_s64(*(void *)a1, 0);
    float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v92, 0);
    uint64_t v94 = *(void *)(a1 + 40);
    uint64_t v95 = *(void *)(a1 + 24);
    float64x2_t v27 = (float64x2_t)vdupq_lane_s64(v95, 0);
    float64x2_t v28 = (float64x2_t)vdupq_lane_s64(v94, 0);
    uint64_t v96 = *(void *)(a1 + 48);
    uint64_t v97 = *(void *)(a1 + 64);
    float64x2_t v29 = (float64x2_t)vdupq_lane_s64(v96, 0);
    float64x2_t v30 = (float64x2_t)vdupq_lane_s64(v97, 0);
    do
    {
      int v31 = (const double *)((char *)&v104 + v21 * 8);
      float64x2x3_t v119 = vld3q_f64(v31);
      float64x2_t v32 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v119.val[1], v23), v119.val[0], v27), v119.val[2], v28);
      float64x2_t v33 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v119.val[1], v24), v119.val[0], v29), v119.val[2], v30);
      v119.val[0] = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v119.val[1], v22), v119.val[0], v25), v119.val[2], v26), v33);
      v119.val[1] = vdivq_f64(v32, v33);
      v119.val[2] = _Q22;
      uint64_t v34 = (double *)&v102[v21];
      vst3q_f64(v34, v119);
      v21 += 6;
    }
    while (v21 != 12);
    double v98 = v24;
    double v99 = v23;
    double v100 = v22;
    float64x2_t v101 = _Q22;
    uint64_t v35 = 0;
    *(void *)&v36.f64[0] = v103[0];
    *(void *)&v37.f64[0] = v103[1];
    *(void *)&v36.f64[1] = v103[3];
    *(void *)&v38.f64[0] = v103[6];
    *(void *)&v39.f64[0] = v103[7];
    *(void *)&v38.f64[1] = v103[9];
    *(void *)&v40.f64[0] = v102[6];
    *(void *)&v41.f64[0] = v102[7];
    *(void *)&v40.f64[1] = v102[9];
    float64x2_t v42 = vsubq_f64(v38, v40);
    *(void *)&v40.f64[0] = v102[0];
    *(void *)&v43.f64[0] = v102[1];
    *(void *)&v40.f64[1] = v102[3];
    double v44 = (float *)(a1 + 252);
    *(void *)&v37.f64[1] = v103[4];
    *(void *)&v39.f64[1] = v103[10];
    *(void *)&v43.f64[1] = v102[4];
    *(void *)&v41.f64[1] = v102[10];
    v116.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v36, v40)), v42);
    v116.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v37, v43)), vsubq_f64(v39, v41));
    vst2q_f32(v44, v116);
    double v45 = (float *)(a1 + 284);
    unsigned int v46 = -1;
    do
    {
      if (v46 >= 2) {
        uint64_t v47 = 6;
      }
      else {
        uint64_t v47 = 0;
      }
      if (v46 >= 2) {
        uint64_t v48 = 3;
      }
      else {
        uint64_t v48 = 9;
      }
      double v49 = (double *)&v102[v47];
      double v50 = *(double *)&v102[v35];
      double v51 = *(double *)&v102[v35 + 1];
      float v52 = *v49 - v50;
      *(float *)&double v50 = *(double *)&v102[v48] - v50;
      float v53 = v49[1] - v51;
      *(float *)&double v51 = *(double *)&v102[v48 + 1] - v51;
      *v45++ = acosf((float)((float)(v53 * *(float *)&v51) + (float)(v52 * *(float *)&v50))/ (float)(sqrtf((float)(v53 * v53) + (float)(v52 * v52))* sqrtf((float)(*(float *)&v51 * *(float *)&v51) + (float)(*(float *)&v50 * *(float *)&v50))));
      v35 += 3;
      ++v46;
    }
    while (v35 != 12);
    uint64_t v54 = 0;
    *(_DWORD *)(a1 + 172) = 0;
    float v55 = 0.0;
    do
    {
      float v56 = vabds_f32(1.5708, *(float *)(a1 + 284 + v54));
      if (v55 <= v56) {
        float v55 = v56;
      }
      v54 += 4;
    }
    while (v54 != 16);
    uint64_t v57 = 0;
    if ((int)v5 <= v2) {
      int v58 = v2;
    }
    else {
      int v58 = v5;
    }
    double v59 = (double)v58;
    float v60 = *(float *)(a1 + 220) / (double)v58;
    float v61 = (float)(v55 * v55) / (v60 + 0.0001);
    *(float *)(a1 + 176) = v61;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0x3FF0000000000000;
    double v107 = v7;
    long long v108 = xmmword_1DD511740;
    uint64_t v109 = 0;
    double v110 = v8;
    uint64_t v111 = 0x3FF0000000000000;
    double v112 = v7;
    double v113 = v8;
    uint64_t v114 = 0x3FF0000000000000;
    do
    {
      uint64_t v62 = (const double *)((char *)&v104 + v57 * 8);
      float64x2x3_t v118 = vld3q_f64(v62);
      float64x2_t v63 = vmulq_f64(v118.val[1], (float64x2_t)0);
      float64x2_t v64 = vmlaq_f64(vaddq_f64(v118.val[0], v63), (float64x2_t)0, v118.val[2]);
      float64x2_t v65 = vaddq_f64(v118.val[2], vmlaq_f64(v63, (float64x2_t)0, v118.val[0]));
      v120.val[0] = vdivq_f64(v64, v65);
      v120.val[1] = vdivq_f64(vmlaq_f64(vmlaq_f64(v118.val[1], (float64x2_t)0, v118.val[0]), (float64x2_t)0, v118.val[2]), v65);
      uint64_t v66 = (double *)&v103[v57];
      v120.val[2] = v101;
      vst3q_f64(v66, v120);
      v57 += 6;
    }
    while (v57 != 12);
    uint64_t v67 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0x3FF0000000000000;
    double v107 = v7;
    long long v108 = xmmword_1DD511740;
    uint64_t v109 = 0;
    double v110 = v8;
    uint64_t v111 = 0x3FF0000000000000;
    double v112 = v7;
    double v113 = v8;
    uint64_t v114 = 0x3FF0000000000000;
    float64x2_t v68 = (float64x2_t)vdupq_lane_s64(v93, 0);
    float64x2_t v69 = (float64x2_t)vdupq_lane_s64(v92, 0);
    float64x2_t v70 = (float64x2_t)vdupq_lane_s64(v95, 0);
    float64x2_t v71 = (float64x2_t)vdupq_lane_s64(v94, 0);
    float64x2_t v72 = (float64x2_t)vdupq_lane_s64(v96, 0);
    float64x2_t v73 = (float64x2_t)vdupq_lane_s64(v97, 0);
    do
    {
      float64x2_t v74 = (const double *)((char *)&v104 + v67 * 8);
      float64x2x3_t v121 = vld3q_f64(v74);
      float64x2_t v75 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v121.val[1], v99), v121.val[0], v70), v121.val[2], v71);
      float64x2_t v76 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v121.val[1], v98), v121.val[0], v72), v121.val[2], v73);
      v121.val[0] = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v121.val[1], v100), v121.val[0], v68), v121.val[2], v69), v76);
      v121.val[1] = vdivq_f64(v75, v76);
      v121.val[2] = v101;
      uint64_t v77 = (double *)&v102[v67];
      vst3q_f64(v77, v121);
      v67 += 6;
    }
    while (v67 != 12);
    uint64_t v78 = 0;
    float64x2_t v79 = 0uLL;
    double v80 = 0.0;
    do
    {
      float64x2_t v81 = *(float64x2_t *)&v103[v78];
      float64x2_t v82 = *(float64x2_t *)&v102[v78];
      float64x2_t v83 = vsubq_f64(v81, v82);
      float64x2_t v84 = vabdq_f64(v81, v82);
      double v85 = vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v83, v83).f64[1]), v83.f64[0], v83.f64[0]);
      if (v85 > v80) {
        double v80 = v85;
      }
      float64x2_t v79 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v84, v79), (int8x16_t)v84, (int8x16_t)v79);
      v78 += 3;
    }
    while (v78 != 12);
    *(float32x2_t *)(a1 + 184) = vcvt_f32_f64(v79);
    float v86 = *(float *)(a1 + 224) / v59;
    float v87 = sqrt(v80) / v59;
    float v88 = v87 / (float)(fmaxf(v86, 0.0025) + 0.00000001);
    *(float *)(a1 + 180) = v88;
    uint64_t v89 = *(void *)(a1 + 104);
    if (v89)
    {
      if (v61 <= 0.5)
      {
        LOBYTE(v89) = 0;
        char v90 = 0;
      }
      else if (v61 <= 0.75)
      {
        char v90 = 0;
        LOBYTE(v89) = 1;
      }
      else
      {
        LOBYTE(v89) = 1;
        char v90 = 1;
      }
      if (v6 < 0.08)
      {
        LOBYTE(v89) = v89 | 2;
        if (v6 < 0.15) {
          v90 |= 2u;
        }
      }
      double v91 = *(float *)(a1 + 168);
      if (v91 < 0.1)
      {
        LOBYTE(v89) = v89 | 4;
        if (v91 < 0.2) {
          v90 |= 4u;
        }
      }
      if (v88 > 1.8)
      {
        LOBYTE(v89) = v89 | 8;
        if (v88 > 3.0) {
          v90 |= 8u;
        }
      }
    }
    else
    {
      char v90 = 0;
    }
    *(unsigned char *)(a1 + 74) = v89;
    *(unsigned char *)(a1 + 75) = v90;
  }
}

uint64_t sub_1DD4CE890(uint64_t a1)
{
  [*(id *)(a1 + 32) lock];
  int v2 = *(void **)(a1 + 32);
  return [v2 unlockWithCondition:1];
}

uint64_t sub_1DD4CECFC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_FrameRequestCallback);
}

void sub_1DD4CF02C(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 24) = 0u;
  uint64_t v4 = (void **)(a2 + 24);
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v53 = a2 + 64;
  unint64_t v5 = sub_1DD4BB6B8(a2 + 64, 1uLL);
  float v6 = *(char **)(a2 + 48);
  double v7 = *(char **)(a2 + 56);
  uint64_t v9 = &v5[v8];
  *unint64_t v5 = 0;
  uint64_t v10 = v5 + 1;
  while (v7 != v6)
  {
    int v11 = *((_DWORD *)v7 - 1);
    v7 -= 4;
    *--unint64_t v5 = v11;
  }
  *(void *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v10;
  *(void *)(a2 + 64) = v9;
  if (v6) {
    operator delete(v6);
  }
  *(void *)(a2 + 56) = v10;
  *(void *)a2 = sparse_get_matrix_number_of_rows(a1);
  *(void *)(a2 + 8) = sparse_get_matrix_number_of_columns(a1);
  *(void *)(a2 + 16) = sparse_get_matrix_nonzero_count(a1);
  sub_1DD4BD398(val, *(void *)(a2 + 8));
  sub_1DD4D0490(jndx, *(void *)(a2 + 8));
  sparse_index column_end = 0;
  if (*(void *)a2)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    uint64_t v54 = v4 + 3;
    float v55 = a1;
    unint64_t v14 = (void **)(a2 + 72);
    do
    {
      sparse_status v15 = sparse_extract_sparse_row_double((sparse_matrix_double)a1, v12, 0, &column_end, *(void *)(a2 + 8), val[0], jndx[0]);
      if (v15 >= 1)
      {
        uint64_t v16 = 0;
        int v56 = v13 + v15;
        uint64_t v17 = v15;
        do
        {
          float64x2_t v18 = val[0];
          float64x2_t v20 = *(double **)(a2 + 80);
          unint64_t v19 = *(void *)(a2 + 88);
          if ((unint64_t)v20 >= v19)
          {
            double v22 = (double *)*v14;
            uint64_t v23 = ((char *)v20 - (unsigned char *)*v14) >> 3;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61) {
              sub_1DD4BACA0();
            }
            uint64_t v25 = v19 - (void)v22;
            if (v25 >> 2 > v24) {
              unint64_t v24 = v25 >> 2;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              float64x2_t v27 = (char *)sub_1DD4BAF80(a2 + 88, v26);
              double v22 = *(double **)(a2 + 72);
              float64x2_t v20 = *(double **)(a2 + 80);
            }
            else
            {
              float64x2_t v27 = 0;
            }
            float64x2_t v28 = &v27[8 * v23];
            *(double *)float64x2_t v28 = v18[v16];
            uint64_t v21 = (double *)(v28 + 8);
            while (v20 != v22)
            {
              uint64_t v29 = *((void *)v20-- - 1);
              *((void *)v28 - 1) = v29;
              v28 -= 8;
            }
            *(void *)(a2 + 72) = v28;
            *(void *)(a2 + 80) = v21;
            *(void *)(a2 + 88) = &v27[8 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            double *v20 = val[0][v16];
            uint64_t v21 = v20 + 1;
          }
          *(void *)(a2 + 80) = v21;
          sparse_index v30 = jndx[0][v16];
          float64x2_t v32 = *(char **)(a2 + 32);
          unint64_t v31 = *(void *)(a2 + 40);
          if ((unint64_t)v32 >= v31)
          {
            uint64_t v34 = (char *)*v4;
            uint64_t v35 = (v32 - (unsigned char *)*v4) >> 2;
            unint64_t v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 62) {
              sub_1DD4BACA0();
            }
            uint64_t v37 = v31 - (void)v34;
            if (v37 >> 1 > v36) {
              unint64_t v36 = v37 >> 1;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              float64x2_t v39 = (char *)sub_1DD4BB6B8(a2 + 40, v38);
              uint64_t v34 = *(char **)(a2 + 24);
              float64x2_t v32 = *(char **)(a2 + 32);
            }
            else
            {
              float64x2_t v39 = 0;
            }
            float64x2_t v40 = &v39[4 * v35];
            *(_DWORD *)float64x2_t v40 = v30;
            float64x2_t v33 = v40 + 4;
            while (v32 != v34)
            {
              int v41 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *((_DWORD *)v40 - 1) = v41;
              v40 -= 4;
            }
            *(void *)(a2 + 24) = v40;
            *(void *)(a2 + 32) = v33;
            *(void *)(a2 + 40) = &v39[4 * v38];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(_DWORD *)float64x2_t v32 = v30;
            float64x2_t v33 = v32 + 4;
          }
          *(void *)(a2 + 32) = v33;
          ++v16;
        }
        while (v16 != v17);
        a1 = v55;
        int v13 = v56;
      }
      float64x2_t v43 = *(char **)(a2 + 56);
      unint64_t v42 = *(void *)(a2 + 64);
      if ((unint64_t)v43 >= v42)
      {
        double v45 = (char *)*v54;
        uint64_t v46 = (v43 - (unsigned char *)*v54) >> 2;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62) {
          sub_1DD4BACA0();
        }
        uint64_t v48 = v42 - (void)v45;
        if (v48 >> 1 > v47) {
          unint64_t v47 = v48 >> 1;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          double v50 = (char *)sub_1DD4BB6B8(v53, v49);
          double v45 = *(char **)(a2 + 48);
          float64x2_t v43 = *(char **)(a2 + 56);
        }
        else
        {
          double v50 = 0;
        }
        double v51 = &v50[4 * v46];
        *(_DWORD *)double v51 = v13;
        double v44 = v51 + 4;
        while (v43 != v45)
        {
          int v52 = *((_DWORD *)v43 - 1);
          v43 -= 4;
          *((_DWORD *)v51 - 1) = v52;
          v51 -= 4;
        }
        *(void *)(a2 + 48) = v51;
        *(void *)(a2 + 56) = v44;
        *(void *)(a2 + 64) = &v50[4 * v49];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(_DWORD *)float64x2_t v43 = v13;
        double v44 = v43 + 4;
      }
      *(void *)(a2 + 56) = v44;
      ++v12;
    }
    while (v12 < *(void *)a2);
  }
  if (jndx[0])
  {
    jndx[1] = jndx[0];
    operator delete(jndx[0]);
  }
  if (val[0])
  {
    val[1] = val[0];
    operator delete(val[0]);
  }
}

void sub_1DD4CF3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1DD4CF440(v19);
  _Unwind_Resume(a1);
}

void *sub_1DD4CF440(void *a1)
{
  int v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1DD4CF494(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    id v3 = (const char *)a2;
  }
  else {
    id v3 = *(const char **)a2;
  }
  uint64_t v4 = fopen(v3, "w");
  if (!v4)
  {
    std::operator+<char>();
    int v13 = std::string::append(&v16, ".");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
    long long v17 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01B75A0](exception, &v17);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v5 = v4;
  fprintf(v4, "%ld\t%ld\t%ld", *a1, a1[1], a1[2]);
  fputc(10, v5);
  uint64_t v6 = a1[6];
  if (a1[7] != v6)
  {
    unint64_t v7 = 0;
    do
    {
      fprintf(v5, "%d\t", *(_DWORD *)(v6 + 4 * v7++));
      uint64_t v6 = a1[6];
    }
    while (v7 < (a1[7] - v6) >> 2);
  }
  fputc(10, v5);
  uint64_t v8 = a1[3];
  if (a1[4] != v8)
  {
    unint64_t v9 = 0;
    do
    {
      fprintf(v5, "%d\t", *(_DWORD *)(v8 + 4 * v9++));
      uint64_t v8 = a1[3];
    }
    while (v9 < (a1[4] - v8) >> 2);
  }
  fputc(10, v5);
  uint64_t v10 = a1[9];
  if (a1[10] != v10)
  {
    unint64_t v11 = 0;
    do
    {
      fprintf(v5, "%0.32f\t", *(double *)(v10 + 8 * v11++));
      uint64_t v10 = a1[9];
    }
    while (v11 < (a1[10] - v10) >> 3);
  }
  fputc(10, v5);
  return fclose(v5);
}

void sub_1DD4CF690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4CF6D0(void *a1, uint64_t a2)
{
  sub_1DD4CF02C(a1, (uint64_t)v3);
  sub_1DD4CF494(v3, a2);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    unint64_t v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    unint64_t v5 = v4;
    operator delete(v4);
  }
}

void sub_1DD4CF73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1DD4CF750(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  int v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1DD4CF7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_1DD4CF808(uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    id v3 = (const char *)a2;
  }
  else {
    id v3 = *(const char **)a2;
  }
  std::locale v4 = fopen(v3, "w");
  if (!v4)
  {
    std::operator+<char>();
    unint64_t v9 = std::string::append(&v12, ".");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    long long v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01B75A0](exception, &v13);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v5 = v4;
  uint64_t v6 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v7 = 0;
    do
    {
      fprintf(v5, "%0.32f\n", *(double *)(v6 + 8 * v7++));
      uint64_t v6 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 3);
  }
  return fclose(v5);
}

void sub_1DD4CF938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4CF978(uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    id v3 = (const char *)a2;
  }
  else {
    id v3 = *(const char **)a2;
  }
  std::locale v4 = fopen(v3, "w");
  if (!v4)
  {
    std::operator+<char>();
    unint64_t v9 = std::string::append(&v12, ".");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    long long v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01B75A0](exception, &v13);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v5 = v4;
  uint64_t v6 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v7 = 0;
    do
    {
      fprintf(v5, "%d\n", *(_DWORD *)(v6 + 4 * v7++));
      uint64_t v6 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 2);
  }
  return fclose(v5);
}

void sub_1DD4CFAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4CFAE8(uint64_t a1, const void **a2)
{
  std::locale v4 = *(void **)a1;
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t v6 = &v30;
  sub_1DD4D08E0((uint64_t)&v30, v5 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  uint64_t v8 = std::string::append(&v30, "cnstr_A0.txt");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v32 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF6D0(v4, (uint64_t)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unint64_t v11 = &v30;
  sub_1DD4D08E0((uint64_t)&v30, v10 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string v12 = a2;
    }
    else {
      std::string v12 = *a2;
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  long long v13 = std::string::append(&v30, "cnstr_b0.txt");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v32 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF808((uint64_t *)(a1 + 16), (uint64_t)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v15 = (size_t)a2[1];
  }
  std::string v16 = &v30;
  sub_1DD4D08E0((uint64_t)&v30, v15 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v15)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v17 = a2;
    }
    else {
      long long v17 = *a2;
    }
    memmove(v16, v17, v15);
  }
  *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 47;
  std::string::size_type v18 = std::string::append(&v30, "cnstr_ineq.txt");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type v32 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF978((uint64_t *)(a1 + 40), (uint64_t)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v20 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v20 = (size_t)a2[1];
  }
  uint64_t v21 = &v30;
  sub_1DD4D08E0((uint64_t)&v30, v20 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v20)
  {
    if (*((char *)a2 + 23) >= 0) {
      double v22 = a2;
    }
    else {
      double v22 = *a2;
    }
    memmove(v21, v22, v20);
  }
  *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 47;
  uint64_t v23 = std::string::append(&v30, "cnstr_lb.txt");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  std::string::size_type v32 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF808((uint64_t *)(a1 + 64), (uint64_t)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v25 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v25 = (size_t)a2[1];
  }
  unint64_t v26 = &v30;
  sub_1DD4D08E0((uint64_t)&v30, v25 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v26 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v25)
  {
    if (*((char *)a2 + 23) >= 0) {
      float64x2_t v27 = a2;
    }
    else {
      float64x2_t v27 = *a2;
    }
    memmove(v26, v27, v25);
  }
  *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 47;
  float64x2_t v28 = std::string::append(&v30, "cnstr_ub.txt");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  std::string::size_type v32 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF808((uint64_t *)(a1 + 88), (uint64_t)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_1DD4CFEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4CFF00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1DD4CFAE8(*(void *)(a1 + 40), (const void **)a2);
  if (*(char *)(a2 + 23) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = &v17;
  sub_1DD4D08E0((uint64_t)&v17, v6 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v8 = (const void *)a2;
    }
    else {
      uint64_t v8 = *(const void **)a2;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  long long v9 = std::string::append(&v17, "c.txt");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF808((uint64_t *)(a1 + 48), (uint64_t)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if (!a3) {
      return 0;
    }
  }
  else if (!a3)
  {
    return 0;
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v11 = *(void *)(a2 + 8);
  }
  std::string v12 = &v17;
  sub_1DD4D08E0((uint64_t)&v17, v11 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v13 = (const void *)a2;
    }
    else {
      long long v13 = *(const void **)a2;
    }
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 47;
  long long v14 = std::string::append(&v17, "x.txt");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF808(a3, (uint64_t)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1DD4D00C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4D00FC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  sub_1DD4CFAE8(a1[5], (const void **)a2);
  size_t v6 = (void *)a1[6];
  if (*(char *)(a2 + 23) >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = &v23;
  sub_1DD4D08E0((uint64_t)&v23, v7 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v9 = (const void *)a2;
    }
    else {
      long long v9 = *(const void **)a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 47;
  long long v10 = std::string::append(&v23, "Q.txt");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF6D0(v6, (uint64_t)__p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v12 = *(void *)(a2 + 8);
  }
  long long v13 = &v23;
  sub_1DD4D08E0((uint64_t)&v23, v12 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v14 = (const void *)a2;
    }
    else {
      long long v14 = *(const void **)a2;
    }
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 47;
  long long v15 = std::string::append(&v23, "c.txt");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF808(a1 + 7, (uint64_t)__p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (!a3) {
      return 0;
    }
  }
  else if (!a3)
  {
    return 0;
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v17 = *(void *)(a2 + 8);
  }
  std::string::size_type v18 = &v23;
  sub_1DD4D08E0((uint64_t)&v23, v17 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v17)
  {
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v19 = (const void *)a2;
    }
    else {
      std::string::size_type v19 = *(const void **)a2;
    }
    memmove(v18, v19, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 47;
  size_t v20 = std::string::append(&v23, "x.txt");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  sub_1DD4CF808(a3, (uint64_t)__p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1DD4D0374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D03B8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1DD4D0968((char **)a1, a2 - v2);
  }
}

void sub_1DD4D03E8(void **a1, unint64_t a2)
{
  std::locale v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_1DD4BACA0();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    size_t v6 = (char *)sub_1DD4BB6B8(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    long long v9 = &v6[4 * v8];
    long long v10 = (char *)*a1;
    long long v11 = (char *)a1[1];
    size_t v12 = v7;
    if (v11 != *a1)
    {
      size_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_1DD4D0490(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BD410(a1, a2);
    std::locale v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD4D04EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4D0508(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E01B75F0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      long long v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_1DD4D06AC(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1E01B7600](v13);
  return a1;
}

void sub_1DD4D0644(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1E01B7600](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1DD4D0624);
}

void sub_1DD4D0698(_Unwind_Exception *a1)
{
}

uint64_t sub_1DD4D06AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_1DD4D0834(__p, v12, __c);
      int v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1DD4D0818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4D0834(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_1DD4C9E74();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_1DD4D08E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1DD4C9E74();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1DD4D0968(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  size_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    size_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_1DD4BACA0();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_1DD4BB6B8(v4, v13);
      size_t v8 = *a1;
      size_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    long long v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    size_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_1DD4D0A84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 48);
    if (v3)
    {
      *(void *)(a2 + 56) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a2 + 24);
    if (v4)
    {
      *(void *)(a2 + 32) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v5;
      operator delete(v5);
    }
    JUMPOUT(0x1E01B7750);
  }
}

double sub_1DD4D0B00(uint64_t a1)
{
  int v1 = 0;
  unsigned int v2 = 0;
  double result = 0.0;
  do
  {
    int v4 = 0;
    double v5 = 1.0;
    unsigned int v6 = v2;
    int v7 = v1;
    unsigned int v8 = v2;
    double v9 = 1.0;
    int v10 = v1;
    do
    {
      double v9 = v9 * *(double *)(a1 + 8 * (v7 - 9 * (v6 / 3)));
      double v11 = *(double *)(a1 + 8 * (v10 - 9 * (v8 / 3)));
      ++v4;
      v10 += 7;
      double v5 = v5 * v11;
      v8 += 2;
      v7 += 4;
      ++v6;
    }
    while (v4 != 3);
    double result = result + v9 - v5;
    ++v2;
    v1 += 3;
  }
  while (v2 != 3);
  return result;
}

void sub_1DD4D0B98(uint64_t a1, uint64_t a2)
{
  double v4 = sub_1DD4D0B00(a2);
  double v5 = 1.0;
  if (v4 != 0.0)
  {
    double v5 = pow(fabs(v4), 0.333333333);
    if (v4 < 0.0) {
      double v5 = -v5;
    }
  }
  uint64_t v6 = 0;
  double v7 = 1.0 / v5;
  do
  {
    *(double *)(a1 + v6) = v7 * *(double *)(a2 + v6);
    v6 += 8;
  }
  while (v6 != 72);
}

void sub_1DD4D0C1C(void *a1, char *a2)
{
}

void sub_1DD4D0C24(void *a1, char *a2, int a3)
{
  if (a3) {
    uint64_t v6 = &unk_1F38B08D0;
  }
  else {
    uint64_t v6 = &unk_1F38B0950;
  }
  sub_1DD4D1C90(v72, 9uLL);
  sub_1DD4D1C90(v71, 3uLL);
  sub_1DD4BD398(__dst, 9uLL);
  double v7 = __dst[0];
  memmove(__dst[0], a2, 0x48uLL);
  sub_1DD4D1548(v72, (uint64_t *)v71, v7);
  if (a3)
  {
    *(void *)&long long v8 = 0x3BC79CA10C924223;
    while (1)
    {
      double v9 = *((double *)v71[0] + 1);
      double v11 = *((double *)v71[0] + 2);
      double v10 = *((double *)v71[0] + 3);
      if (*(double *)v71[0] != v11 || v9 != v10)
      {
        double v13 = *((double *)v71[0] + 4);
        double v14 = *((double *)v71[0] + 5);
        if ((*(double *)v71[0] != v13 || v9 != v14) && (v13 != v11 || v14 != v10)) {
          break;
        }
      }
      if (*(double *)&v8 >= 0.00001) {
        break;
      }
      size_t v17 = (char *)__dst[0];
      *((double *)__dst[0] + 7) = *(double *)&v8 + *((double *)__dst[0] + 7);
      *(float64x2_t *)(v17 + 40) = vmlaq_n_f64(*(float64x2_t *)(v17 + 40), (float64x2_t)xmmword_1DD511E50, *(double *)&v8);
      *(float64x2_t *)(v17 + 8) = vmlaq_n_f64(*(float64x2_t *)(v17 + 8), (float64x2_t)xmmword_1DD511E60, *(double *)&v8);
      *((double *)v17 + 3) = *((double *)v17 + 3) + *(double *)&v8 * 1.5;
      long long v58 = v8;
      sub_1DD4D1548(v72, (uint64_t *)v71, v17);
      *((void *)&v8 + 1) = *((void *)&v58 + 1);
      *(double *)&long long v8 = *(double *)&v58 * 10.0;
    }
  }
  else
  {
    int v18 = (double *)v71[0];
    long double v19 = *(double *)v71[0];
    long double v20 = *((double *)v71[0] + 1);
    double v21 = *((double *)v71[0] + 2);
    double v22 = *((double *)v71[0] + 3);
    if (hypot(*(double *)v71[0] - v21, v20 - v22) < 0.00000001)
    {
      double v23 = v18[4];
      double v24 = v18[5];
      if (hypot(v19 - v23, v20 - v24) < 0.00000001
        && hypot(v23 - v21, v24 - v22) < 0.00000001
        && hypot(v19, v20) < 0.00000001)
      {
        uint64_t v25 = 0;
        unint64_t v26 = a2;
        do
        {
          uint64_t v27 = 0;
          uint64_t v28 = 3 * v25;
          long long v29 = (double *)a2;
          do
          {
            uint64_t v30 = 0;
            uint64_t v31 = v27 + v28;
            if (v25 == v27) {
              double v32 = 1.0;
            }
            else {
              double v32 = 0.0;
            }
            double v33 = v32 + *(double *)&a2[8 * v27 + 8 * v28];
            *(double *)&a1[v31] = v33;
            uint64_t v34 = v29;
            do
            {
              double v35 = *v34;
              v34 += 3;
              double v33 = v33 + *(double *)&v26[v30] * v35 * 0.5;
              *(double *)&a1[v31] = v33;
              v30 += 8;
            }
            while (v30 != 24);
            ++v27;
            ++v29;
          }
          while (v27 != 3);
          ++v25;
          v26 += 24;
        }
        while (v25 != 3);
        goto LABEL_58;
      }
    }
  }
  __a[0] = 0;
  __a[1] = 0;
  sub_1DD4D1D08(v69, 3uLL, __a);
  uint64_t v36 = 0;
  if (a3) {
    uint64_t v37 = &unk_1F38B08D0;
  }
  else {
    uint64_t v37 = &unk_1F38B0950;
  }
  unint64_t v38 = (double (*)(void *, double, double))v37[2];
  do
  {
    double v39 = v38(v6, *(double *)((char *)v71[0] + v36), *(double *)((char *)v71[0] + v36 + 8));
    float64x2_t v40 = (char *)v69[0] + v36;
    *(double *)float64x2_t v40 = v39;
    *((void *)v40 + 1) = v41;
    v36 += 16;
  }
  while (v36 != 48);
  __CLPK_integer __lda = 3;
  sub_1DD4D1D8C(__a, 9uLL);
  sub_1DD4D1D8C(&__work, 0x3CuLL);
  sub_1DD4C8008(__ipiv, 3uLL);
  uint64_t v42 = 0;
  __lworuint64_t k = (unint64_t)((char *)v66 - (char *)__work) >> 4;
  __CLPK_integer __info = 0;
  float64x2_t v43 = (char *)v72[0];
  double v44 = __a[0];
  do
  {
    v44[v42] = *(__CLPK_doublecomplex *)&v43[v42 * 16];
    ++v42;
  }
  while (v42 != 9);
  zgetrf_(&__lda, &__lda, v44, &__lda, __ipiv[0], &__info);
  zgetri_(&__lda, __a[0], &__lda, __ipiv[0], __work, &__lwork, &__info);
  sub_1DD4D1C90(__p, 9uLL);
  uint64_t v45 = 0;
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v47 = 0;
    for (uint64_t j = 0; j != 3; ++j)
    {
      uint64_t v49 = 0;
      double v50 = 0.0;
      uint64_t v51 = v45;
      double v52 = 0.0;
      do
      {
        v60[0] = sub_1DD4D1AC4((double *)((char *)v72[0] + v51), (double *)((char *)v69[0] + v49 * 16));
        v60[1] = v53;
        __CLPK_doublecomplex v59 = __a[0][v47 + v49];
        double v52 = v52 + sub_1DD4D1AC4(v60, &v59.r);
        double v50 = v50 + v54;
        ++v49;
        v51 += 48;
      }
      while (v49 != 3);
      float v55 = (char *)__p[0];
      int v56 = (double *)((char *)__p[0] + 48 * i + 16 * j);
      *int v56 = v52;
      v56[1] = v50;
      v47 += 3;
    }
    v45 += 16;
  }
  for (uint64_t k = 0; k != 144; k += 16)
    *a1++ = *(void *)&v55[k];
  __p[1] = v55;
  operator delete(v55);
  if (__ipiv[0])
  {
    __ipiv[1] = __ipiv[0];
    operator delete(__ipiv[0]);
  }
  if (__work)
  {
    uint64_t v66 = __work;
    operator delete(__work);
  }
  if (__a[0])
  {
    __a[1] = __a[0];
    operator delete(__a[0]);
  }
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
LABEL_58:
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (v71[0])
  {
    v71[1] = v71[0];
    operator delete(v71[0]);
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
}

void sub_1DD4D10D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  double v39 = *(void **)(v37 - 192);
  if (v39)
  {
    *(void *)(v37 - 184) = v39;
    operator delete(v39);
  }
  float64x2_t v40 = *(void **)(v37 - 168);
  if (v40)
  {
    *(void *)(v37 - 160) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4D11B0(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  memset(v5, 0, sizeof(v5));
  if (!a2)
  {
    *(void *)&v5[0] = 0x3FF0000000000000;
    *(void *)&long long v6 = 0x3FF0000000000000;
    uint64_t v8 = 0x3FF0000000000000;
  }
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    if (v2 != 2 && v2 != 5 && vabdd_f64(*(double *)(a1 + 8 * v2), *((double *)v5 + v2)) > 0.00000001) {
      char v3 = 0;
    }
    ++v2;
  }
  while (v2 != 9);
  return v3 & 1;
}

void sub_1DD4D1268(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sub_1DD4D0B98((uint64_t)v4, a2);
  if (sub_1DD4D11B0((uint64_t)v4, 0))
  {
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    uint64_t v3 = v6;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 40) = v3;
  }
  else
  {
    sub_1DD4D0C24((void *)a1, v4, 1);
  }
}

void sub_1DD4D1308(uint64_t a1, long long *a2)
{
  uint64_t v2 = 0;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v3 = a2[1];
  long long v8 = *a2;
  long long v9 = v3;
  long long v4 = a2[3];
  long long v10 = a2[2];
  long long v11 = v4;
  double v12 = -(*(double *)&v8 + *(double *)&v10);
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  char v5 = 1;
  do
  {
    while (v2 != 2 && v2 != 5 && vabdd_f64(*((double *)&v8 + v2), *((double *)v13 + v2)) > 0.00000001)
    {
      char v5 = 0;
      if (v2++ == 8) {
        goto LABEL_12;
      }
    }
    ++v2;
  }
  while (v2 != 9);
  if (v5)
  {
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)a1 = 0x3FF0000000000000;
    *(void *)(a1 + 32) = 0x3FF0000000000000;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0x3FF0000000000000;
    uint64_t v7 = *((void *)&v10 + 1);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 40) = v7;
    return;
  }
LABEL_12:
  sub_1DD4D0C24((void *)a1, (char *)&v8, 0);
}

double sub_1DD4D142C(double *a1, double *a2)
{
  uint64_t v4 = 0;
  double v5 = 0.0;
  uint64_t v6 = a2;
  uint64_t v7 = a2;
  do
  {
    uint64_t v8 = 0;
    long long v9 = v6;
    do
    {
      double v10 = *v9;
      v9 += 3;
      double v5 = v5 + (v10 + v7[v8]) * (v10 + v7[v8]);
      ++v8;
    }
    while (v8 != 3);
    ++v4;
    v7 += 3;
    ++v6;
  }
  while (v4 != 3);
  double v11 = sqrt(v5);
  if (v11 > 0.001) {
    printf("Matrix is not skew-symmetric by %f.\n", v11);
  }
  *a1 = (a2[7] - a2[5]) * 0.5;
  a1[1] = (a2[2] - a2[6]) * 0.5;
  a1[2] = (a2[3] - a2[1]) * 0.5;
  return v11;
}

double sub_1DD4D1510(uint64_t a1, double *a2)
{
  double v3 = a2[1];
  double result = a2[2];
  double v4 = *a2;
  double v5 = -*a2;
  *(void *)a1 = 0;
  *(double *)(a1 + 8) = -result;
  *(double *)(a1 + 16) = v3;
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = v5;
  *(double *)(a1 + 48) = -v3;
  *(double *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 0;
  return result;
}

void sub_1DD4D1548(void *a1, uint64_t *a2, const void *a3)
{
  sub_1DD4D1830((uint64_t)a1, 9uLL);
  sub_1DD4D1830((uint64_t)a2, 3uLL);
  sub_1DD4BD398(v39, 9uLL);
  sub_1DD4BD398(v38, 3uLL);
  sub_1DD4BD398(v37, 3uLL);
  sub_1DD4BD398(v36, 9uLL);
  sub_1DD4BD398(__vl, 9uLL);
  sub_1DD4BD398(&__p, 0x78uLL);
  __CLPK_integer __ldvr = 3;
  __CLPK_integer __lda = 3;
  uint64_t v6 = (__CLPK_doublereal *)__p;
  __CLPK_integer v29 = 0;
  __lworuint64_t k = (unint64_t)(v34 - (unsigned char *)__p) >> 3;
  char __jobvr = 78;
  char __jobvl = 86;
  uint64_t v7 = (__CLPK_doublereal *)v39[0];
  memmove(v39[0], a3, 0x48uLL);
  dgeev_(&__jobvl, &__jobvr, &__lda, v7, &__lda, (__CLPK_doublereal *)v38[0], (__CLPK_doublereal *)v37[0], __vl[0], &__lda, (__CLPK_doublereal *)v36[0], &__ldvr, v6, &__lwork, &v29);
  uint64_t v8 = 0;
  char v9 = 0;
  int v10 = 0;
  double v11 = v38[0];
  double v12 = v37[0];
  uint64_t v13 = *a2;
  uint64_t v14 = __vl[0];
  uint64_t v15 = *a1 + 8;
  do
  {
    uint64_t v16 = v12[v8];
    size_t v17 = (void *)(v13 + 16 * v8);
    *size_t v17 = v11[v8];
    v17[1] = v16;
    if (*(double *)&v12[v8] == 0.0)
    {
      uint64_t v18 = 0;
      long double v19 = (void *)(v15 + 16 * v10);
      do
      {
        *(v19 - 1) = *(void *)&v14[v10 + v18];
        *long double v19 = 0;
        v19 += 2;
        ++v18;
      }
      while (v18 != 3);
      v10 += 3;
    }
    else
    {
      if ((v9 & 1) == 0)
      {
        uint64_t v20 = 0;
        double v21 = &v14[v10 + 3];
        double v22 = (__CLPK_doublereal *)(v15 + 16 * (v10 + 3));
        double v23 = &v14[v10];
        double v24 = (double *)(v15 + 16 * v10);
        do
        {
          double v25 = -v21[v20];
          *(v24 - 1) = v23[v20];
          *double v24 = v25;
          __CLPK_doublereal v26 = v21[v20];
          *(v22 - 1) = v23[v20];
          *double v22 = v26;
          ++v20;
          v22 += 2;
          v24 += 2;
        }
        while (v20 != 3);
        v10 += 6;
      }
      char v9 = 1;
    }
    ++v8;
  }
  while (v8 != 3);
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
  if (__vl[0])
  {
    __vl[1] = __vl[0];
    operator delete(__vl[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
}

void sub_1DD4D179C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  __CLPK_integer v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(void *)(v27 - 128) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void **)(v27 - 112);
  if (v30)
  {
    *(void *)(v27 - 104) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *(void **)v26;
  if (*(void *)v26)
  {
    *(void *)(v26 + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D1830(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_1DD4D1860((void **)a1, a2 - v2);
  }
}

void sub_1DD4D1860(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_1DD4BACA0();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1DD4BE0AC(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    size_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      size_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

double sub_1DD4D1980(long double a1, long double a2)
{
  long double v4 = hypot(a1, a2);
  double v5 = log(v4);
  atan2(a2, a1);
  return v5;
}

void sub_1DD4D19CC(double a1, double a2)
{
  v2[0] = a1;
  v2[1] = a2;
  sub_1DD4D19F4(v2);
}

void sub_1DD4D19F4(double *a1)
{
  long double v1 = *a1;
  double v2 = a1[1];
  if (v2 == 0.0)
  {
    exp(v1);
    return;
  }
  if (fabs(v1) == INFINITY)
  {
    if (v1 >= 0.0)
    {
      if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        return;
      }
    }
    else if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      double v2 = 1.0;
    }
  }
  double v3 = v2;
  exp(v1);
  __sincos_stret(v3);
}

double sub_1DD4D1AC4(double *a1, double *a2)
{
  return *a1 * *a2 - a1[1] * a2[1];
}

void *sub_1DD4D1C90(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BE068(a1, a2);
    long double v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1DD4D1CEC(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4D1D08(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BE068(a1, a2);
    uint64_t v6 = (_OWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DD4D1D70(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4D1D8C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BE068(a1, a2);
    long double v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1DD4D1DE8(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1DD4D1E04(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  double v3 = a2[7];
  double v4 = a2[8];
  double v5 = a2[4];
  double v6 = a2[5];
  double v7 = a2[6];
  double v8 = v5 * v4 - v3 * v6;
  double v9 = *a2;
  double v10 = a2[1];
  double v12 = a2[2];
  double v11 = a2[3];
  double v13 = v3 * v12 - v10 * v4;
  double v26 = v8;
  double v27 = v13;
  double v14 = v10 * v6 - v5 * v12;
  double v28 = v14;
  double v15 = v13 * v11 + v9 * v8 + v7 * v14;
  if (v15 >= 2.22044605e-16 || v15 <= -2.22044605e-16)
  {
    double v26 = v8 / v15;
    double v27 = v13 / v15;
    double v28 = v14 / v15;
    double v29 = (v7 * v6 - v11 * v4) / v15;
    double v30 = (v9 * v4 - v7 * v12) / v15;
    double v31 = (v11 * v12 - v9 * v6) / v15;
    double v32 = (v11 * v3 - v7 * v5) / v15;
    double v33 = (v7 * v10 - v9 * v3) / v15;
    double v34 = (v9 * v5 - v11 * v10) / v15;
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v18 = 0;
    long double v19 = &v26;
    do
    {
      uint64_t v20 = 0;
      double v21 = 0.0;
      double v22 = v19;
      do
      {
        double v23 = *v22;
        v22 += 3;
        double v21 = v21 + *(double *)(a3 + v20) * v23;
        v20 += 8;
      }
      while (v20 != 24);
      *((double *)v35 + 3 * i + v18++) = v21;
      ++v19;
    }
    while (v18 != 3);
    a3 += 24;
  }
  long long v24 = v35[3];
  *(_OWORD *)(a1 + 32) = v35[2];
  *(_OWORD *)(a1 + 48) = v24;
  *(void *)(a1 + 64) = v36;
  __n128 result = (__n128)v35[1];
  *(_OWORD *)a1 = v35[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1DD4D1F88(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  __CLPK_doublereal __a = *(__CLPK_doublereal *)a3;
  uint64_t v40 = v7;
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40);
  uint64_t v45 = v6;
  uint64_t v46 = v9;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v41 = *(void *)(a3 + 48);
  uint64_t v42 = v5;
  uint64_t v43 = v8;
  uint64_t v44 = v10;
  uint64_t v47 = *(void *)(a3 + 64);
  __CLPK_integer __n = 3;
  __CLPK_integer __lda = 3;
  __lworuint64_t k = 96;
  __uint64_t k = 3;
  __CLPK_integer __info = 0;
  p_a = &__a;
  dgerqf_(&__lda, &__n, &__a, &__lda, __tau, __work, &__lwork, &__info);
  unint64_t v12 = 0;
  double v13 = a1;
  do
  {
    unint64_t v14 = 0;
    double v15 = p_a;
    do
    {
      double v16 = 0.0;
      if (v14 >= v12) {
        double v16 = *v15;
      }
      v13[v14++] = v16;
      v15 += 3;
    }
    while (v14 != 3);
    ++v12;
    v13 += 3;
    ++p_a;
  }
  while (v12 != 3);
  __CLPK_integer v30 = 3;
  uint64_t result = dorgrq_(&__lda, &__n, &__k, &__a, &__lda, __tau, __work, &v30, &__info);
  uint64_t v18 = 0;
  uint64_t v19 = v40;
  uint64_t v20 = v41;
  uint64_t v21 = v42;
  *(__CLPK_doublereal *)a2 = __a;
  *(void *)(a2 + 8) = v21;
  uint64_t v22 = v43;
  uint64_t v23 = v44;
  *(void *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v23;
  uint64_t v24 = v46;
  *(void *)(a2 + 16) = v45;
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v24;
  *(void *)(a2 + 64) = v47;
  double v25 = -1.0;
  if (*a1 <= 0.0) {
    double v26 = -1.0;
  }
  else {
    double v26 = 1.0;
  }
  if (a1[4] <= 0.0) {
    double v27 = -1.0;
  }
  else {
    double v27 = 1.0;
  }
  *(double *)unint64_t v38 = v26;
  *(double *)&v38[1] = v27;
  if (a1[8] > 0.0) {
    double v25 = 1.0;
  }
  *(double *)&v38[2] = v25;
  do
  {
    uint64_t v28 = 0;
    double v29 = *(double *)&v38[v18];
    do
    {
      a1[v28] = *(double *)&v38[v28] * a1[v28];
      *(double *)(a2 + v28 * 8) = v29 * *(double *)(a2 + v28 * 8);
      ++v28;
    }
    while (v28 != 3);
    ++v18;
    a2 += 24;
    a1 += 3;
  }
  while (v18 != 3);
  return result;
}

uint64_t sub_1DD4D217C(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double a5)
{
  uint64_t v7 = 0;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v8 = 0;
    uint64_t v9 = a4;
    do
    {
      uint64_t v10 = 0;
      double v11 = 0.0;
      unint64_t v12 = v9;
      do
      {
        double v13 = *v12;
        v12 += 3;
        double v11 = v11 + *(double *)(a3 + v10) * v13;
        v10 += 8;
      }
      while (v10 != 24);
      *((double *)v20 + 3 * v7 + v8++) = v11;
      ++v9;
    }
    while (v8 != 3);
    ++v7;
    a3 += 24;
  }
  while (v7 != 3);
  v18[2] = v20[2];
  void v18[3] = v20[3];
  uint64_t v19 = v21;
  v18[0] = v20[0];
  v18[1] = v20[1];
  uint64_t result = sub_1DD4D1F88((double *)a2, a1, (uint64_t)v18);
  double v15 = (const double *)(a2 + 64);
  float64x2_t v16 = vld1q_dup_f64(v15);
  uint64_t v17 = 0;
  if (a5 <= 0.0)
  {
    do
    {
      *(float64x2_t *)(a2 + v17) = vdivq_f64(*(float64x2_t *)(a2 + v17), v16);
      v17 += 16;
    }
    while (v17 != 64);
  }
  else
  {
    do
    {
      *(float64x2_t *)(a2 + v17) = vdivq_f64(*(float64x2_t *)(a2 + v17), v16);
      v17 += 16;
    }
    while (v17 != 64);
  }
  *(void *)(a2 + 64) = 0x3FF0000000000000;
  return result;
}

void sub_1DD4D22B4(uint64_t a1, void *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  v44[9] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v9 = a2[1] - *a2;
  if (v9)
  {
    unint64_t v19 = v9 / 304;
    if (sub_1DD4B7FE4((void *)a1)) {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v40 = a3;
    if (a3) {
      unint64_t v21 = v20;
    }
    else {
      unint64_t v21 = 0;
    }
    uint64_t v22 = (void *)(a1 + 24);
    sub_1DD4D2604(a1 + 24, v21 + v19);
    unint64_t v39 = v21 + v19;
    sub_1DD4D2604(a1 + 72, v21 + v19);
    sub_1DD4D29E8(__p, v19);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    v44[2] = (a4 + -1.0) * 0.5;
    v44[1] = 0.0;
    v44[3] = 0.0;
    v44[6] = 0.0;
    v44[7] = 0.0;
    v44[8] = 1.0;
    v44[0] = a4 * 0.75;
    v44[4] = a4 * 0.75;
    v44[5] = (a5 + -1.0) * 0.5;
    unint64_t v25 = v19 - 1;
    unint64_t v37 = v19;
    unint64_t v38 = v21;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    uint64_t v26 = 72 * v21;
    unint64_t v27 = v19;
    do
    {
      sub_1DD4D217C((uint64_t)__p[0] + v23, *(void *)(a1 + 72) + v26 + v23, *a2 + v24, v44, 0.001);
      v24 += 304;
      v23 += 72;
      --v27;
    }
    while (v27);
    if (v40 && v38)
    {
      sub_1DD4D217C((uint64_t)v42, (uint64_t)v43, v40, v44, 0.001);
      sub_1DD4D1E04(*v22 + 72 * v38, (double *)__p[0], (uint64_t)v42);
    }
    else
    {
      uint64_t v28 = (void *)*v22;
      *uint64_t v28 = 0x3FF0000000000000;
      v28[1] = 0;
      v28[2] = 0;
      v28[3] = 0;
      v28[4] = 0x3FF0000000000000;
      v28[5] = 0;
      v28[6] = 0;
      v28[7] = 0;
      v28[8] = 0x3FF0000000000000;
    }
    if (v37 >= 2)
    {
      uint64_t v29 = 72;
      do
      {
        sub_1DD4D1E04(*v22 + 72 * v38 + v29, (double *)((char *)__p[0] + v29), (uint64_t)__p[0] + v29 - 72);
        v29 += 72;
        --v25;
      }
      while (v25);
    }
    sub_1DD4D2648(a1, v39, MEMORY[0x1E4F1F9F8]);
    uint64_t v30 = 24 * v38;
    uint64_t v31 = 112;
    unint64_t v32 = v19;
    do
    {
      uint64_t v33 = *a2 + v31;
      uint64_t v34 = *(void *)a1 + v30;
      long long v35 = *(_OWORD *)v33;
      *(void *)(v34 + 16) = *(void *)(v33 + 16);
      *(_OWORD *)uint64_t v34 = v35;
      v31 += 304;
      v30 += 24;
      --v32;
    }
    while (v32);
    sub_1DD4D2684(a1 + 96, v39, 1);
    *(double *)(a1 + 120) = a8;
    *(double *)(a1 + 128) = a9;
    uint64_t v36 = (double *)(*(void *)(a1 + 72) + 72 * v38 + 40);
    do
    {
      *(v36 - 3) = *(v36 - 3) - a6;
      double *v36 = *v36 - a7;
      v36 += 9;
      --v19;
    }
    while (v19);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1DD4D25D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D2604(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1DD4D2808((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 72 * a2;
  }
}

void sub_1DD4D2648(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_1DD4D2A8C((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_1DD4D2684(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      unint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        sub_1DD4BACA0();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_1DD4D2C14(&v21, v12);
      double v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      uint64_t v23 = v21;
      int v24 = 0;
      sub_1DD4D2ED8(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      uint64_t v17 = v19;
      LODWORD(v18) = v20;
      double v15 = *(char **)a1;
      *(void *)a1 = v21;
      unint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        unint64_t v21 = v17;
        LODWORD(v22) = v18;
        sub_1DD4C7E20(&v21, v6);
      }
      else
      {
        unint64_t v21 = v17;
        LODWORD(v22) = v18;
        sub_1DD4C7ED4((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1DD4D27EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D2808(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_1DD4BEA14(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v12[72 * v8];
    double v15 = &v12[72 * v11];
    size_t v16 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    unint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        long long v20 = *(_OWORD *)(v18 - 56);
        long long v21 = *(_OWORD *)(v18 - 40);
        long long v22 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 72;
        v18 -= 72;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *sub_1DD4D29E8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BE9BC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DD4D2A70(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D2A8C(void **a1, unint64_t a2, long long *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      double v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        long long v17 = *a3;
        v9[2] = *((void *)a3 + 2);
        *(_OWORD *)unint64_t v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      unint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DD4BACA0();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      unint64_t v14 = (char *)sub_1DD4BD934(v6, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v18 = &v14[24 * v10];
    unint64_t v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    long long v21 = v18;
    do
    {
      long long v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)long long v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    uint64_t v23 = &v14[24 * v13];
    unint64_t v25 = (char *)*a1;
    int v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v18 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      int v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

void sub_1DD4D2C14(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0;
    long long v11 = 0uLL;
    sub_1DD4BEB38(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    unint64_t v8 = *a1;
    int v9 = 0;
    uint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_1DD4D2CD4(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    uint64_t v4 = *a1;
    *a1 = v10;
    unint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_1DD4D2CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D2CD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_1DD4D2D78(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_1DD4D2D78(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  sub_1DD4D2E08((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_1DD4D2E08(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *sub_1DD4D2ED8@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void sub_1DD4D300C(uint64_t a1, int a2, int a3, char a4, int a5, __n128 *a6, __n128 *a7, __n128 *a8)
{
  *(_DWORD *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 76) = a3;
  *(unsigned char *)(a1 + 100) = a4;
  *(_DWORD *)(a1 + 96) = a5;
  uint64_t v11 = a1 + 24;
  sub_1DD4BD018(a1 + 24, a6);
  sub_1DD4BD018(a1, a7);
  sub_1DD4BD018(a1 + 48, a8);
  sub_1DD4D3174(v11);
  sub_1DD4D323C(a1);
  sub_1DD4D3304(a1 + 48);
  uint64_t v12 = *(void *)a1;
  *(void *)(a1 + 80) = *(void *)(a1 + 24);
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 104) = *(void *)(a1 + 48);
}

_OWORD *sub_1DD4D30A0(_OWORD *a1, int a2, int a3, char a4, int a5, __n128 *a6, uint64_t a7, uint64_t a8)
{
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  __n128 v14 = *a6;
  unint64_t v15 = a6[1].n128_u64[0];
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  a6->n128_u64[0] = 0;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a7;
  uint64_t v13 = *(void *)(a7 + 16);
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = 0;
  *(_OWORD *)__p = *(_OWORD *)a8;
  uint64_t v11 = *(void *)(a8 + 16);
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  *(void *)a8 = 0;
  sub_1DD4D300C((uint64_t)a1, a2, a3, a4, a5, &v14, (__n128 *)v12, (__n128 *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
  return a1;
}

_OWORD *sub_1DD4D316C(_OWORD *a1, int a2, int a3, char a4, int a5, __n128 *a6, uint64_t a7, uint64_t a8)
{
  return sub_1DD4D30A0(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1DD4D3174(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(char **)a1;
  int v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  int v7 = (char *)sub_1DD4BAF80(v2, v6);
  unint64_t v4 = *(char **)a1;
  int64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  uint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1DD4D323C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(char **)a1;
  int v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 2;
  if (v6 >= (v3 - (uint64_t)v4) >> 2) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 4 * v6;
    goto LABEL_8;
  }
  int v7 = (char *)sub_1DD4BB6B8(v2, v6);
  unint64_t v4 = *(char **)a1;
  int64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[4 * v6];
  uint64_t v11 = &v7[4 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    int v13 = *((_DWORD *)v8 - 1);
    v8 -= 4;
    *(_DWORD *)(v12 - 4) = v13;
    v12 -= 4;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1DD4D3304(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(char **)a1;
  int v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  int v7 = (char *)sub_1DD4BAF80(v2, v6);
  unint64_t v4 = *(char **)a1;
  int64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  uint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1DD4D33CC(uint64_t a1, long long *a2)
{
  uint64_t v3 = 0;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v61 = *((void *)a2 + 8);
  long long v4 = a2[3];
  *(_OWORD *)&v59[16] = a2[2];
  long long v60 = v4;
  long long v5 = a2[1];
  long long v58 = *a2;
  *(_OWORD *)__CLPK_doublecomplex v59 = v5;
  float64x2_t v6 = (float64x2_t)vdupq_lane_s64(v61, 0);
  do
  {
    *(float64x2_t *)&v59[v3 - 16] = vdivq_f64(*(float64x2_t *)&v59[v3 - 16], v6);
    v3 += 16;
  }
  while (v3 != 64);
  unint64_t v7 = 0;
  double v8 = *(double *)v59;
  double v9 = *(double *)&v59[24];
  double v10 = *(double *)&v60;
  *(void *)a1 = *(void *)v59;
  *(double *)(a1 + 8) = v9;
  double v11 = *((double *)&v60 + 1);
  *(double *)(a1 + 48) = v10;
  *(double *)(a1 + 56) = v11;
  v57[0] = v58;
  v57[1] = *(_OWORD *)&v59[8];
  v56[0] = v8 * v10;
  v56[1] = v8 * v11;
  void v56[2] = v10 * v9;
  v56[3] = v11 * v9;
  do
  {
    *(float64x2_t *)((char *)&v54 + v7 * 8) = vsubq_f64((float64x2_t)v57[v7 / 2], *(float64x2_t *)&v56[v7]);
    v7 += 2;
  }
  while (v7 != 4);
  uint64_t v12 = 0;
  float64x2_t v14 = v54;
  float64x2_t v13 = v55;
  *(void *)&double v15 = *(_OWORD *)&vmulq_f64(v13, v13);
  float v16 = vmlad_n_f64(v15, v14.f64[0], v14.f64[0]);
  double v17 = sqrtf(v16);
  if (v54.f64[0] >= 0.0) {
    double v17 = -v17;
  }
  float64_t v18 = v54.f64[0] - v17;
  float v19 = v15 + v18 * v18;
  double v20 = sqrtf(v19);
  float64_t v21 = v18 / v20;
  float64_t v22 = v55.f64[0] / v20;
  double v23 = v21 * -2.0 * v21 + 1.0;
  double v24 = v22 * (v21 * -2.0);
  double v63 = v23;
  double v64 = v24;
  double v25 = v22 * -2.0 * v22 + 1.0;
  double v65 = v24;
  double v66 = v25;
  double v50 = v23;
  double v51 = v24;
  __CGFloat y = v24;
  double v53 = v25;
  char v26 = 1;
  do
  {
    char v27 = v26;
    *(float64x2_t *)(&v46 + v12) = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v14, *(&v63 + v12)), v13, *(double *)((char *)&v63 + ((8 * v12) | 8)));
    uint64_t v12 = 2;
    char v26 = 0;
  }
  while ((v27 & 1) != 0);
  double v28 = v46;
  if (v46 < 0.0)
  {
    double v23 = -v23;
    double v50 = v23;
    __CGFloat y = -v24;
    double v28 = -v46;
    double v46 = -v46;
    double v47 = -v47;
  }
  double v29 = v49;
  if (v49 >= 0.0)
  {
    double v30 = v48;
  }
  else
  {
    double v51 = -v24;
    double v53 = -v25;
    double v30 = -v48;
    double v29 = -v49;
    double v48 = -v48;
    double v49 = -v49;
  }
  uint64_t v31 = 0;
  char v32 = 1;
  double v33 = v47;
  do
  {
    char v34 = v32;
    uint64_t v35 = (8 * v31) | 8;
    double v36 = *(&v50 + v31);
    double v37 = *(double *)((char *)&v50 + v35);
    v62[v31] = v36 * v28 + 0.0 + v37 * v30;
    *(double *)((char *)v62 + v35) = v36 * v33 + 0.0 + v37 * v29;
    uint64_t v31 = 2;
    char v32 = 0;
  }
  while ((v34 & 1) != 0);
  for (uint64_t i = 0; i != 4; ++i)
  {
    double v39 = (v54.f64[i] - v62[i]) / (v54.f64[i] + 1.0);
    if (v39 < 0.0) {
      double v39 = -v39;
    }
    if (v39 > 0.001) {
      printf("warning: QR err = %f\n", v39);
    }
  }
  long double v40 = atan2(__y, v23);
  uint64_t v41 = 0;
  float v42 = v28 * v29 - v33 * v30;
  *(double *)&uint64_t v43 = sqrtf(v42);
  *(long double *)(a1 + 16) = v40;
  *(double *)(a1 + 24) = *(double *)&v43;
  float64x2_t v44 = (float64x2_t)vdupq_lane_s64(v43, 0);
  do
  {
    *(float64x2_t *)((char *)&v63 + v41) = vdivq_f64(*(float64x2_t *)((char *)&v46 + v41), v44);
    v41 += 16;
  }
  while (v41 != 32);
  double v45 = v64 / v63;
  *(double *)(a1 + 32) = v63;
  *(double *)(a1 + 40) = v45;
}

__n128 sub_1DD4D3708(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

__n128 sub_1DD4D3724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 *a6)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  __n128 result = *a6;
  *(void *)(a1 + 56) = a6[1].n128_u64[0];
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1DD4D3744(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      sub_1DD4DC72C(v3, v2);
    }
    else {
      sub_1DD4F825C(v2);
    }
  }
  return a1;
}

uint64_t sub_1DD4D3790(uint64_t a1)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  *(unsigned char *)(a1 + 100) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)a1 = dispatch_semaphore_create(2);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 8), 0);
  return a1;
}

void sub_1DD4D37E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4D380C(uint64_t a1)
{
  sub_1DD4D385C(a1);
  dispatch_release(*(dispatch_object_t *)a1);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1DD4D385C(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    if (v3 == *(void *)(a1 + 72)) {
      break;
    }
    uint64_t v4 = *(void *)(v3 - 8);
    if (v4)
    {
      uint64_t v5 = sub_1DD4D3744(v4);
      MEMORY[0x1E01B7750](v5, 0x1020C40A6EEA1E9);
      uint64_t v3 = *(void *)(a1 + 80);
    }
    *(void *)(a1 + 80) = v3 - 8;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)a1);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t sub_1DD4D38E4(uint64_t result)
{
  *(unsigned char *)(result + 100) = 0;
  return result;
}

uint64_t sub_1DD4D38EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6)
{
  *(void *)a1 = &unk_1F38B0118;
  uint64_t v12 = a1 + 40;
  sub_1DD4C78E4(a1 + 8, a3);
  sub_1DD4C797C(v12, a3 + 32);
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 72) = a4;
  *(void *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a5;
  *(double *)(a1 + 96) = a6;
  *(_WORD *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 118) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  if (a4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2)) {
      float64x2_t v13 = "LP; ";
    }
    else {
      float64x2_t v13 = "QP; ";
    }
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)v13, 4);
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"n = ", 4);
    float64x2_t v14 = (void *)std::ostream::operator<<();
    sub_1DD4D0508(v14, (uint64_t)", m = ", 6);
    double v15 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    float v16 = std::locale::use_facet(&v21, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"regularization: d1 = ", 21);
    double v17 = (void *)std::ostream::operator<<();
    sub_1DD4D0508(v17, (uint64_t)" d2 = ", 6);
    float64_t v18 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    float v19 = std::locale::use_facet(&v21, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  return a1;
}

void sub_1DD4D3B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  double v15 = *(void **)(v12 + 176);
  if (v15)
  {
    *(void *)(v12 + 184) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *v13;
  *float64x2_t v13 = 0;
  if (v16) {
    sub_1DD4D0A84((uint64_t)v13, v16);
  }
  sub_1DD4BE1DC(v11);
  sub_1DD4BE260(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4D3BD0(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B0118;
  long long v2 = *(_OWORD *)(a1 + 128);
  v7[0] = *(_OWORD *)(a1 + 112);
  v7[1] = v2;
  long long v3 = *(_OWORD *)(a1 + 160);
  v7[2] = *(_OWORD *)(a1 + 144);
  v7[3] = v3;
  _SparseDestroyOpaqueSymbolic((SparseOpaqueSymbolicFactorization *)v7);
  uint64_t v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(void *)(a1 + 184) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v5) {
    sub_1DD4D0A84(a1 + 104, v5);
  }
  sub_1DD4BE1DC((void *)(a1 + 40));
  sub_1DD4BE260((void *)(a1 + 8));
  return a1;
}

void sub_1DD4D3C70(uint64_t a1)
{
  sub_1DD4D3BD0(a1);
  JUMPOUT(0x1E01B7750);
}

void sub_1DD4D3CA8(uint64_t a1)
{
  int v1 = 0;
  sub_1DD4D3D34(a1, &v1);
}

void sub_1DD4D3D34(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v2 = *(void *)(*(void *)(a1 + 80) + 16);
  double v10 = 0;
  double v11 = 0;
  uint64_t v12 = 0;
  unint64_t v3 = (int)v2;
  if (v2 << 32)
  {
    if (v2 << 32 < 0) {
      sub_1DD4BACA0();
    }
    uint64_t v4 = (char *)operator new(24 * (int)v2);
    size_t v5 = 24 * ((24 * (int)v2 - 24) / 0x18uLL) + 24;
    bzero(v4, v5);
    double v10 = v4;
    double v11 = &v4[v5];
    uint64_t v12 = &v4[24 * (int)v2];
    unint64_t v3 = (int)v2;
  }
  uint64_t v7 = 0;
  sub_1DD4C7A14(&v9, v3, &v7);
  sub_1DD4E5230(*(uint64_t **)(a1 + 80), &v9, &v8);
}

void sub_1DD4D4A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (__p) {
    operator delete(__p);
  }
  if (a41) {
    operator delete(a41);
  }
  float64x2_t v44 = *(void **)(v42 - 256);
  if (v44)
  {
    *(void *)(v42 - 248) = v44;
    operator delete(v44);
  }
  double v45 = *(void **)(v42 - 216);
  if (v45)
  {
    *(void *)(v42 - 208) = v45;
    operator delete(v45);
  }
  double v46 = *(void **)(v42 - 192);
  if (v46)
  {
    *(void *)(v42 - 184) = v46;
    operator delete(v46);
  }
  double v47 = *(std::__shared_weak_count **)(v42 - 160);
  if (v47) {
    sub_1DD4C9D84(v47);
  }
  double v48 = *(void **)(v42 - 152);
  if (v48)
  {
    *(void *)(v42 - 144) = v48;
    operator delete(v48);
  }
  sub_1DD4D7064((void **)(v42 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4D4BE4(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"Preparing Symbolic Factorization", 32);
    std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
    unint64_t v3 = std::locale::use_facet((const std::locale *)v41, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale((std::locale *)v41);
    std::ostream::put();
    std::ostream::flush();
  }
  BOOL v4 = *(double *)(a1 + 96) == 0.0;
  memset(&v40, 0, sizeof(v40));
  uint64_t v5 = *(void *)(a1 + 104);
  long long v6 = *(_OWORD *)(v5 + 88);
  v38[0] = *(_OWORD *)(v5 + 72);
  v38[1] = v6;
  uint64_t v39 = *(void *)(v5 + 104);
  int v7 = sub_1DD4EB820((uint64_t)v38);
  sub_1DD4D70D4(v7, v4, (uint64_t)&v40);
  long long v8 = *(_OWORD *)(*(void *)(a1 + 104) + 88);
  *(_OWORD *)&Matrix.rowCount = *(_OWORD *)(*(void *)(a1 + 104) + 72);
  *(_OWORD *)&Matrix.rowIndices = v8;
  SparseSymbolicFactorOptions options = v40;
  if (Matrix.columnCount <= 0)
  {
    if (!options.reportError)
    {
      BOOL v9 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v9) {
        sub_1DD50F314(v9, v10, v11, v12, v13, v14, v15, v16);
      }
      goto LABEL_21;
    }
    strcpy(v41, ".structure.columnCount must be greater than 0.\n");
    memset(&v41[48], 0, 208);
    ((void (*)(unsigned char *))options.reportError)(v41);
  }
  else
  {
    if ((~*(_WORD *)&Matrix.attributes & 0xC) == 0)
    {
      if (Matrix.rowCount == Matrix.columnCount)
      {
        _SparseSymbolicFactorSymmetric((SparseOpaqueSymbolicFactorization *)v41, SparseFactorizationLDLTUnpivoted, &Matrix, &options);
        goto LABEL_23;
      }
      if (options.reportError)
      {
        memset(&v41[63], 0, 193);
        strcpy(v41, "Matrix purports to be symmetric, but rowCount != columnCount.\n");
        ((void (*)(unsigned char *))options.reportError)(v41);
        goto LABEL_22;
      }
      BOOL v25 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v25) {
        sub_1DD50F29C(v25, v26, v27, v28, v29, v30, v31, v32);
      }
LABEL_21:
      _SparseTrap();
      goto LABEL_22;
    }
    if (!options.reportError)
    {
      BOOL v17 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v17) {
        sub_1DD50F2D8(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      goto LABEL_21;
    }
    memset(&v41[58], 0, 198);
    strcpy(v41, "Requested symmetric factorization of unsymmetric matrix.\n");
    ((void (*)(unsigned char *))options.reportError)(v41);
  }
LABEL_22:
  memset(v41, 0, 64);
  *(_DWORD *)uint64_t v41 = -4;
LABEL_23:
  long long v33 = *(_OWORD *)&v41[16];
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v41;
  *(_OWORD *)(a1 + 128) = v33;
  long long v34 = *(_OWORD *)&v41[48];
  *(_OWORD *)(a1 + 144) = *(_OWORD *)&v41[32];
  *(_OWORD *)(a1 + 160) = v34;
  if (!*(_DWORD *)(a1 + 112)) {
    return 0;
  }
  printf("Symbolic factorization failed (status = %d).\n", *(_DWORD *)(a1 + 112));
  return 0xFFFFFFFFLL;
}

void sub_1DD4D4F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::locale a33)
{
}

void sub_1DD4D4F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 80) = 0x7FF0000000000000;
    *(_DWORD *)(a3 + 88) = 0;
    *(void *)(a3 + 16) = *(void *)(a3 + 8);
    *(void *)(a3 + 40) = *(void *)(a3 + 32);
    *(void *)(a3 + 64) = *(void *)(a3 + 56);
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80)))
    {
      uint64_t v5 = *(void *)(a1 + 80);
      if (*(void *)(v5 + 8)) {
        BOOL v6 = *(void *)(v5 + 16) == 0;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6)
      {
        if (*(void *)(a1 + 64)) {
          sub_1DD4D78B0(a1 + 40, 0.0);
        }
        uint64_t v7 = *(void *)(a1 + 32);
        if (!v7 || !(*(unsigned int (**)(uint64_t))(*(void *)v7 + 48))(v7)) {
          sub_1DD4D3CA8(a1);
        }
        if (*(unsigned char *)(a1 + 72)) {
          puts("Canceled IPOpt.");
        }
        int v8 = 2;
        goto LABEL_16;
      }
    }
    else
    {
      puts("Constant Hessian is required for this implementation.");
    }
    int v8 = 3;
LABEL_16:
    *(_DWORD *)a3 = v8;
  }
}

void sub_1DD4D5A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D5AFC(uint64_t a1, uint64_t a2, uint64_t a3, double **a4, const void **a5, const double **a6, double **a7)
{
  uint64_t v14 = *(uint64_t **)(a1 + 80);
  unint64_t v16 = v14[1];
  unint64_t v15 = v14[2];
  sub_1DD4E5184(v14, a5, v25);
  sub_1DD4BD398(v24, v16);
  sub_1DD4EB304(*(sparse_matrix_double *)(*(void *)(*(void *)(a1 + 80) + 40) + 112), (const double **)a5, (uint64_t)v24, CblasNoTrans);
  sub_1DD4BD398(__p, v15);
  sub_1DD4EB304(*(sparse_matrix_double *)(*(void *)(*(void *)(a1 + 80) + 40) + 112), a6, (uint64_t)__p, CblasTrans);
  sub_1DD4C1D4C(a2, v15);
  sub_1DD4EB4DC(a2);
  sub_1DD4EB474(a2, (double **)v25);
  sub_1DD4EB43C(a2, (double **)__p, 1.0);
  sub_1DD4EB43C(a2, a7, 1.0);
  sub_1DD4EB43C(a2, (double **)a5, -(*(double *)(a1 + 88) * *(double *)(a1 + 88)));
  sub_1DD4C1D4C(a3, v16);
  sub_1DD4EB4DC(a3);
  sub_1DD4EB43C(a3, (double **)v24, 1.0);
  sub_1DD4EB474(a3, (double **)(*(void *)(*(void *)(a1 + 80) + 40) + 128));
  sub_1DD4EB43C(a3, (double **)a6, *(double *)(a1 + 96) * *(double *)(a1 + 96));
  sub_1DD4C1D4C((uint64_t)a4, v15);
  if (v15)
  {
    BOOL v17 = (double *)*a5;
    uint64_t v18 = *a7;
    uint64_t v19 = *a4;
    do
    {
      double v20 = *v17++;
      double v21 = v20;
      double v22 = *v18++;
      *v19++ = v21 * v22;
      --v15;
    }
    while (v15);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_1DD4D5CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D5D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double **a5)
{
  BOOL v9 = *(double **)a4;
  uint64_t v10 = *(void *)(a4 + 8) - *(void *)a4;
  if (v10)
  {
    unint64_t v11 = v10 >> 3;
    uint64_t v12 = *a5;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    while (*v9 >= 0.0 && *v12 >= 0.0)
    {
      ++v12;
      ++v9;
      if (!--v11) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    sub_1DD4EB3FC(a2);
    sub_1DD4E5368(*(unint64_t **)(a1 + 80), __p);
    sub_1DD4EB3FC((uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_1DD4EB3FC(a3);
    sub_1DD4EB3FC(*(void *)(*(void *)(a1 + 80) + 40) + 128);
    fabs(sub_1DD4EB380(a4, a5));
    sub_1DD4E50E8(*(uint64_t **)(a1 + 80), (const void **)a4);
  }
}

void sub_1DD4D5E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4D5E5C(uint64_t a1, double **a2, void **a3, uint64_t *a4, uint64_t *a5, double **a6, uint64_t *a7, uint64_t *a8, double a9, uint64_t *a10)
{
  uint64_t v18 = (double *)*a8;
  uint64_t v19 = a8[1] - *a8;
  if (v19)
  {
    unint64_t v20 = v19 >> 3;
    double v21 = (double *)*a10;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    uint64_t v22 = 6;
    while (*v21 > 0.0 && *v18 > 0.0)
    {
      ++v21;
      ++v18;
      if (!--v20) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    *(unsigned char *)(a1 + 208) = 0;
    int v23 = sub_1DD4D6708(a1, a8, a10);
    uint64_t v24 = sub_1DD4D68F4(a1, (void **)a2, a3, a4, a8, a10, a5, a6, a7);
    int v25 = v24;
    int v26 = 4 * (v24 != 0);
    if (v23) {
      int v26 = 6;
    }
    unsigned int v49 = v26;
    double v27 = sub_1DD4D6B6C(v24, (double **)a8, a2);
    double v29 = sub_1DD4D6B6C(v28, (double **)a10, (double **)a4);
    double v31 = sub_1DD4D6C5C(v27, v29, v30, (uint64_t)a8, (uint64_t)a10, a2, (double **)a4);
    sub_1DD4BD398(__p, *(void *)(*(void *)(a1 + 80) + 16));
    uint64_t v32 = *(void *)(*(void *)(a1 + 80) + 16);
    if (v32)
    {
      long long v33 = (double *)*a7;
      long long v34 = *a2;
      uint64_t v35 = (double *)*a4;
      double v36 = (double *)__p[0];
      do
      {
        double v37 = *v33++;
        double v38 = v37;
        double v39 = *v34++;
        double v40 = v39;
        double v41 = *v35++;
        *v36++ = v38 + v40 * v41 + -v31 * a9;
        --v32;
      }
      while (v32);
    }
    *(unsigned char *)(a1 + 208) = 1;
    uint64_t v42 = sub_1DD4D68F4(a1, (void **)a2, a3, a4, a8, a10, a5, a6, (uint64_t *)__p);
    if (v42) {
      BOOL v43 = (v23 | v25) == 0;
    }
    else {
      BOOL v43 = 0;
    }
    if (v43) {
      uint64_t v22 = 4;
    }
    else {
      uint64_t v22 = v49;
    }
    double v44 = sub_1DD4D6B6C(v42, (double **)a8, a2);
    double v46 = sub_1DD4D6B6C(v45, (double **)a10, (double **)a4);
    sub_1DD4EB4AC((uint64_t)a2, v44 * 0.99);
    double v47 = v46 * 0.99;
    sub_1DD4EB4AC((uint64_t)a3, v47);
    sub_1DD4EB4AC((uint64_t)a4, v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return v22;
}

void sub_1DD4D60D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4D60F0(uint64_t a1, uint64_t a2, double a3, uint64_t a4, double **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1DD4D5D14(a1, a6, a7, a2, a5);
  double v16 = v15;
  BOOL v17 = *(double **)a2;
  uint64_t v18 = *(void *)(a2 + 8) - *(void *)a2;
  if (v18)
  {
    unint64_t v19 = v18 >> 3;
    unint64_t v20 = *a5;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    char v21 = 1;
    do
    {
      if (*v17 < 0.0 || *v20 < 0.0) {
        char v21 = 0;
      }
      ++v20;
      ++v17;
      --v19;
    }
    while (v19);
  }
  else
  {
    char v21 = 1;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v22 = sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"checking optimality conditions:", 31);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
    int v23 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v24 = sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"feasibility:", 12);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
    int v25 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"x > 0 and z > 0? ", 17);
    int v26 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
    double v27 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"total constraint violation = ", 29);
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
    double v29 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"rx: (-Qx + A^Ty + z = c) ", 25);
    sub_1DD4EB3FC(a6);
    uint64_t v30 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
    double v31 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"ry: (ACGFloat x = b) = ", 15);
    sub_1DD4EB3FC(a7);
    uint64_t v32 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
    long long v33 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"rz: (x.*z) = ", 13);
    sub_1DD4EB3FC(a8);
    long long v34 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
    uint64_t v35 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"objective value:", 16);
    sub_1DD4E50E8(*(uint64_t **)(a1 + 80), (const void **)a2);
    double v36 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
    double v37 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
  }
  return (v16 > a3) | ((v21 & 1) == 0);
}

void sub_1DD4D66D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_1DD4D6708(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6 = *(void **)(a1 + 80);
  unint64_t v7 = v6[1];
  unint64_t v8 = v6[2];
  if (!(*(unsigned int (**)(void *))(*v6 + 24))(v6)) {
    return 0xFFFFFFFFLL;
  }
  BOOL v9 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80));
  __p[0] = 0;
  sub_1DD4C7A14(v27, v7 + v8, __p);
  if (v8)
  {
    unint64_t v10 = 0;
    uint64_t v11 = *v9;
    unint64_t v12 = (v9[1] - *v9) >> 3;
    uint64_t v13 = *a3;
    uint64_t v14 = *a2;
    unsigned int v15 = 1;
    double v16 = (double *)v27[0];
    do
    {
      if (v12 <= v10) {
        sub_1DD4BAA78();
      }
      v16[v10] = -(*(double *)(v11 + 8 * v10)
                 + *(double *)(v13 + 8 * v10) / *(double *)(v14 + 8 * v10)
                 + *(double *)(a1 + 88) * *(double *)(a1 + 88));
      unint64_t v10 = v15;
    }
    while (v8 > v15++);
  }
  if (v7)
  {
    uint64_t v18 = 0;
    unint64_t v19 = (char *)v27[0] + 8 * v8;
    do
      *(double *)&v19[8 * v18++] = *(double *)(a1 + 96) * *(double *)(a1 + 96);
    while (v7 > v18);
  }
  uint64_t v25 = 0;
  sub_1DD4C7A14(__p, v7 + v8, &v25);
  uint64_t v20 = *(void *)(a1 + 104);
  long long v21 = *(_OWORD *)(v20 + 88);
  v23[0] = *(_OWORD *)(v20 + 72);
  v23[1] = v21;
  uint64_t v24 = *(void *)(v20 + 104);
  sub_1DD4EB828((uint64_t)v23, (uint64_t *)__p, (uint64_t *)v27);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  return 0;
}

void sub_1DD4D68BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4D68F4(uint64_t a1, void **a2, void **a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, double **a8, uint64_t *a9)
{
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(v16 + 8);
  uint64_t v17 = *(void *)(v16 + 16);
  sub_1DD4BD398(&v59, (a5[1] - *a5) >> 3);
  unint64_t v19 = v59;
  if (v60 != v59)
  {
    uint64_t v20 = 0;
    unint64_t v21 = v60 - v59;
    uint64_t v22 = *a7;
    uint64_t v23 = *a9;
    uint64_t v24 = *a5;
    do
    {
      v19[v20] = *(double *)(v22 + 8 * v20) - *(double *)(v23 + 8 * v20) / *(double *)(v24 + 8 * v20);
      ++v20;
    }
    while (v21 > v20);
  }
  sub_1DD4BD398(v58, v18 + v17);
  if (v17)
  {
    uint64_t v25 = v59;
    int v26 = (double *)v58[0];
    uint64_t v27 = v17;
    do
    {
      double v28 = *v25++;
      *v26++ = -v28;
      --v27;
    }
    while (v27);
  }
  if (v18)
  {
    double v29 = *a8;
    uint64_t v30 = (double *)((char *)v58[0] + 8 * v17);
    uint64_t v31 = v18;
    do
    {
      double v32 = *v29++;
      *v30++ = -v32;
      --v31;
    }
    while (v31);
  }
  uint64_t v56 = 0;
  sub_1DD4C7A14(__p, v18 + v17, &v56);
  uint64_t v33 = *(void *)(a1 + 104);
  long long v34 = *(_OWORD *)(v33 + 88);
  v54[0] = *(_OWORD *)(v33 + 72);
  v54[1] = v34;
  uint64_t v55 = *(void *)(v33 + 104);
  uint64_t v35 = sub_1DD4D6DA8(a1, (uint64_t)__p, (uint64_t)v54, (uint64_t)v58);
  if (v17)
  {
    double v36 = (uint64_t *)__p[0];
    double v37 = *a2;
    uint64_t v38 = v17;
    do
    {
      uint64_t v39 = *v36++;
      *v37++ = v39;
      --v38;
    }
    while (v38);
  }
  if (v18)
  {
    double v40 = *a3;
    double v41 = (uint64_t *)((char *)__p[0] + 8 * v17);
    do
    {
      uint64_t v42 = *v41++;
      *v40++ = v42;
      --v18;
    }
    while (v18);
  }
  uint64_t v43 = *a4;
  uint64_t v44 = a4[1];
  uint64_t v45 = v44 - *a4;
  if (v44 != *a4)
  {
    uint64_t v46 = 0;
    unint64_t v47 = v45 >> 3;
    uint64_t v48 = *a9;
    uint64_t v49 = *a6;
    double v50 = *a2;
    uint64_t v51 = *a5;
    do
    {
      *(double *)(v43 + 8 * v46) = -(*(double *)(v48 + 8 * v46) + *(double *)(v49 + 8 * v46) * *(double *)&v50[v46])
                                 / *(double *)(v51 + 8 * v46);
      ++v46;
    }
    while (v47 > v46);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  if (v59)
  {
    long long v60 = v59;
    operator delete(v59);
  }
  return v35;
}

void sub_1DD4D6B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  uint64_t v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DD4D6B6C(uint64_t a1, double **a2, double **a3)
{
  BOOL v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  uint64_t v20 = 0x3FF0000000000000;
  sub_1DD4C7A14(__p, v7, &v20);
  unint64_t v8 = (double *)__p[0];
  if (v5 != v6)
  {
    BOOL v9 = *a3;
    unint64_t v10 = *a2;
    if (v7 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v7;
    }
    unint64_t v12 = (double *)__p[0];
    uint64_t v13 = v11;
    do
    {
      double v14 = -*v10;
      if (*v9 <= v14) {
        *unint64_t v12 = v14 / *v9;
      }
      ++v9;
      ++v10;
      ++v12;
      --v13;
    }
    while (v13);
    double v15 = 1.0;
    uint64_t v16 = v8;
    do
    {
      double v17 = *v16++;
      double v18 = v17;
      if (v17 < v15) {
        double v15 = v18;
      }
      --v11;
    }
    while (v11);
    goto LABEL_15;
  }
  double v15 = 1.0;
  if (__p[0])
  {
LABEL_15:
    __p[1] = v8;
    operator delete(v8);
  }
  return v15;
}

double sub_1DD4D6C5C(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, double **a6, double **a7)
{
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_1DD4BDA30(&v20, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  sub_1DD4EB43C((uint64_t)&v20, a6, a1);
  __p = 0;
  double v18 = 0;
  uint64_t v19 = 0;
  sub_1DD4BDA30(&__p, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  sub_1DD4EB43C((uint64_t)&__p, a7, a2);
  double v13 = sub_1DD4EB380((uint64_t)&v20, (double **)&__p);
  double v14 = sub_1DD4EB380(a4, (double **)a5);
  if (__p)
  {
    double v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    unint64_t v21 = v20;
    operator delete(v20);
  }
  double v15 = v13 / v14;
  if (v13 / v14 < 0.0) {
    double v15 = 0.0;
  }
  if (v15 > 1.0) {
    double v15 = 1.0;
  }
  return v15 * (v15 * v15);
}

void sub_1DD4D6D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4D6DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    long long v7 = *(_OWORD *)(a3 + 16);
    v25[0] = *(_OWORD *)a3;
    v25[1] = v7;
    uint64_t v26 = *(void *)(a3 + 32);
    sub_1DD4D7190((_OWORD *)a1, (uint64_t)v25, (uint64_t)v27);
    long long v8 = v27[4];
    long long v9 = v27[5];
    long long v10 = v27[2];
    *(_OWORD *)(a1 + 264) = v27[3];
    *(_OWORD *)(a1 + 280) = v8;
    *(_OWORD *)(a1 + 296) = v9;
    long long v11 = v27[1];
    *(_OWORD *)(a1 + 216) = v27[0];
    *(_OWORD *)(a1 + 232) = v11;
    *(void *)(a1 + 312) = v28;
    *(_OWORD *)(a1 + 248) = v10;
  }
  uint64_t v24 = *(void *)(a1 + 312);
  long long v12 = *(_OWORD *)(a1 + 232);
  v23[0] = *(_OWORD *)(a1 + 216);
  v23[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 264);
  long long v14 = *(_OWORD *)(a1 + 280);
  _OWORD v23[2] = *(_OWORD *)(a1 + 248);
  v23[3] = v13;
  long long v15 = *(_OWORD *)(a1 + 296);
  v23[4] = v14;
  v23[5] = v15;
  uint64_t v16 = sub_1DD4D74F0(a1, a2, (uint64_t)v23, a4);
  if (*(unsigned char *)(a1 + 208))
  {
    long long v17 = *(_OWORD *)(a1 + 296);
    *(_OWORD *)&v21.userFactorStorage = *(_OWORD *)(a1 + 280);
    *(_OWORD *)&v21.solveWorkspaceRequiredStatic = v17;
    uint64_t v22 = *(void *)(a1 + 312);
    long long v18 = *(_OWORD *)(a1 + 232);
    *(_OWORD *)&v21.status = *(_OWORD *)(a1 + 216);
    *(_OWORD *)&v21.symbolicFactorization.columnCount = v18;
    long long v19 = *(_OWORD *)(a1 + 264);
    *(_OWORD *)&v21.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 248);
    *(_OWORD *)&v21.symbolicFactorization.factorSize_Float = v19;
    _SparseDestroyOpaqueNumeric_Double(&v21);
  }
  return v16;
}

void sub_1DD4D6EB4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1DD4D7904((char **)a1, a2 - v2);
  }
}

void sub_1DD4D6EE4(void **a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1DD4BACA0();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v6 = (char *)sub_1DD4BAF80(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    long long v10 = (char *)*a1;
    long long v11 = (char *)a1[1];
    long long v12 = v7;
    if (v11 != *a1)
    {
      long long v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1DD4D6F8C(void **a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1DD4BACA0();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v6 = (char *)sub_1DD4BAF80(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    long long v10 = (char *)*a1;
    long long v11 = (char *)a1[1];
    long long v12 = v7;
    if (v11 != *a1)
    {
      long long v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1DD4D7034(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1DD4D7A20((void **)a1, a2 - v3, a3);
  }
}

void **sub_1DD4D7064(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      int64_t v5 = (char *)a1[1];
      do
      {
        long long v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        BOOL v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        unint64_t v3 = v5;
      }
      while (v5 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1DD4D70D4(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  long long v4 = unk_1F38B09C0;
  *(_OWORD *)a3 = xmmword_1F38B09B0;
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = xmmword_1F38B09D0;
  __p = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  if (a2)
  {
    sub_1DD4D03B8((uint64_t)&__p, a1);
    BOOL v6 = __p;
    if (a1)
    {
      uint64_t v7 = 0;
      do
      {
        v6[v7] = v7;
        ++v7;
      }
      while (a1 != v7);
      *(unsigned char *)(a3 + 4) = 1;
      *(void *)(a3 + 8) = v6;
    }
    else
    {
      *(unsigned char *)(a3 + 4) = 1;
      *(void *)(a3 + 8) = v6;
      if (!v6) {
        return;
      }
    }
    long long v9 = v6;
    operator delete(v6);
  }
}

void sub_1DD4D7174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4D7190(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  *(void *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  long long v4 = a1[8];
  *(_OWORD *)factor = a1[7];
  *(_OWORD *)&factor[16] = v4;
  long long v5 = a1[10];
  *(_OWORD *)&factor[32] = a1[9];
  *(_OWORD *)&factor[48] = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&Matrix.structure.rowCount = *(_OWORD *)a2;
  *(_OWORD *)&Matrix.structure.rowIndices = v6;
  Matrix.data = *(double **)(a2 + 32);
  SparseNumericFactorOptions options = *(SparseNumericFactorOptions *)ymmword_1DD511E90;
  if (*(_DWORD *)factor || !*(void *)&factor[24])
  {
    BOOL v14 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v14) {
      sub_1DD50F350(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    goto LABEL_16;
  }
  _SparseGetOptionsFromSymbolicFactor((SparseSymbolicFactorOptions *)&v43, (SparseOpaqueSymbolicFactorization *)factor);
  workspaceSize_Double = (void (*)(SparseOpaqueFactorization_Double *))v43.symbolicFactorization.workspaceSize_Double;
  if (*(void *)&Matrix.structure.rowCount != *(void *)&factor[4]
    || *(&Matrix.structure.blockSize + 2) != factor[16]
    || ((*(unsigned __int16 *)&factor[12] ^ *(_WORD *)&Matrix.structure.attributes) & 1) != 0)
  {
    if (v43.symbolicFactorization.workspaceSize_Double)
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      memset(&v43, 0, sizeof(v43));
      snprintf((char *)&v43, 0x100uLL, "%s does not match that used for symbolic factorization stored in %s.\n", "Matrix", "symbolicFactor");
      workspaceSize_Double(&v43);
LABEL_17:
      *(void *)(a3 + 96) = 0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      int v22 = -4;
LABEL_18:
      *(_DWORD *)a3 = v22;
      *(_DWORD *)(a3 + 8) = v22;
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1DD50F47C();
    }
LABEL_16:
    _SparseTrap();
    goto LABEL_17;
  }
  factorization = (uint64_t (*)(void))v43.symbolicFactorization.factorization;
  workspaceSize_Float = (void (*)(void *))v43.symbolicFactorization.workspaceSize_Float;
  uint64_t v10 = ((uint64_t (*)(void))v43.symbolicFactorization.factorization)(*(void *)&factor[56]);
  if (!v10)
  {
    if (workspaceSize_Double)
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      memset(&v43, 0, sizeof(v43));
      snprintf((char *)&v43, 0x100uLL, "Failed to allocate factor storage of size %ld bytes.");
LABEL_23:
      workspaceSize_Double(&v43);
LABEL_31:
      *(void *)(a3 + 96) = 0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      int v22 = -3;
      goto LABEL_18;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1DD50F38C((uint64_t)&factor[56], v26, v27, v28, v29, v30, v31, v32);
    }
LABEL_30:
    _SparseTrap();
    goto LABEL_31;
  }
  long long v11 = (void *)v10;
  long long v12 = (void *)factorization(*(void *)&factor[40]);
  if (!v12)
  {
    workspaceSize_Float(v11);
    if (workspaceSize_Double)
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      memset(&v43, 0, sizeof(v43));
      snprintf((char *)&v43, 0x100uLL, "Failed to allocate workspace of size %ld bytes.");
      goto LABEL_23;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      sub_1DD50F404((uint64_t)&factor[40], v33, v34, v35, v36, v37, v38, v39);
    }
    goto LABEL_30;
  }
  uint64_t v13 = v12;
  if ((factor[17] & 0xFE) == 0x28) {
    _SparseNumericFactorQR_Double(&v43, (SparseOpaqueSymbolicFactorization *)factor, &Matrix, &options, v11, v12);
  }
  else {
    _SparseNumericFactorSymmetric_Double(&v43, (SparseOpaqueSymbolicFactorization *)factor, &Matrix, &options, v11, v12);
  }
  long long v23 = *(_OWORD *)&v43.solveWorkspaceRequiredStatic;
  *(_OWORD *)(a3 + 64) = *(_OWORD *)&v43.userFactorStorage;
  *(_OWORD *)(a3 + 80) = v23;
  *(void *)(a3 + 96) = v44;
  long long v24 = *(_OWORD *)&v43.symbolicFactorization.columnCount;
  *(_OWORD *)a3 = *(_OWORD *)&v43.status;
  *(_OWORD *)(a3 + 16) = v24;
  long long v25 = *(_OWORD *)&v43.symbolicFactorization.factorSize_Float;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v43.symbolicFactorization.workspaceSize_Float;
  *(_OWORD *)(a3 + 48) = v25;
  *(unsigned char *)(a3 + 72) = 0;
  workspaceSize_Float(v13);
}

uint64_t sub_1DD4D74F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v9 = v7 - *(void *)a2;
  if (v7 != *(void *)a2)
  {
    uint64_t v10 = v9 >> 3;
    if ((unint64_t)(v9 >> 3) <= 1) {
      uint64_t v10 = 1;
    }
    bzero(v8, 8 * v10);
  }
  if (!*(_DWORD *)a3)
  {
    BOOL v14 = *(double **)a4;
    uint64_t v15 = *(void *)(a4 + 8);
    long long v16 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v16;
    uint64_t v51 = *(void *)(a3 + 96);
    long long v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&Factored.status = *(_OWORD *)a3;
    *(_OWORD *)&Factored.symbolicFactorization.columnCount = v17;
    long long v18 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a3 + 32);
    *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v18;
    if (Factored.symbolicFactorization.status || !Factored.symbolicFactorization.workspaceSize_Float)
    {
      BOOL v19 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v19) {
        sub_1DD50F518(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      goto LABEL_14;
    }
    _SparseGetOptionsFromSymbolicFactor(&v54, &Factored.symbolicFactorization);
    reportError = v54.reportError;
    if (Factored.symbolicFactorization.status
      || !Factored.symbolicFactorization.workspaceSize_Float
      || Factored.status
      || !Factored.solveWorkspaceRequiredStatic)
    {
      if (!v54.reportError)
      {
        BOOL v35 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (v35) {
          sub_1DD50F554(v35, v36, v37, v38, v39, v40, v41, v42);
        }
        goto LABEL_14;
      }
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      memset(&v54, 0, sizeof(v54));
      snprintf((char *)&v54, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    }
    else
    {
      if ((*(unsigned char *)&Factored.attributes ^ *(unsigned char *)&Factored.symbolicFactorization.attributes)) {
        int v28 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
      }
      else {
        int v28 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
      }
      if ((*(unsigned char *)&Factored.attributes ^ *(unsigned char *)&Factored.symbolicFactorization.attributes)) {
        int v29 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
      }
      else {
        int v29 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
      }
      if (BYTE1(Factored.symbolicFactorization.factorization) == 40) {
        int v30 = v28;
      }
      else {
        int v30 = v29;
      }
      if (v29 == ((unint64_t)v9 >> 3))
      {
        if (v30 == ((unint64_t)(v15 - (void)v14) >> 3))
        {
          free = v54.free;
          RHS.rowCount = (unint64_t)(v15 - (void)v14) >> 3;
          RHS.columnCount = 1;
          *(_DWORD *)&RHS.attributes = 0;
          RHS.data = v14;
          RHS.columnStride = RHS.rowCount;
          *(_DWORD *)&Soln.attributes = 0;
          Soln.data = (double *)v8;
          Soln.rowCount = (unint64_t)v9 >> 3;
          Soln.columnCount = 1;
          Soln.columnStride = Soln.rowCount;
          uint64_t v32 = v51 + Factored.solveWorkspaceRequiredPerRHS;
          uint64_t v33 = (void *)((uint64_t (*)(size_t))v54.malloc)(v51 + Factored.solveWorkspaceRequiredPerRHS);
          if (v33)
          {
            uint64_t v34 = v33;
            _SparseSolveOpaque_Double(&Factored, &RHS, &Soln, v33);
            ((void (*)(void *))free)(v34);
            return 0;
          }
          if (reportError)
          {
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v55 = 0u;
            memset(&v54, 0, sizeof(v54));
            snprintf((char *)&v54, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
            goto LABEL_42;
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            sub_1DD50F5D0(v32, v43, v44, v45, v46, v47, v48, v49);
          }
LABEL_14:
          _SparseTrap();
          return 0;
        }
        if (!v54.reportError)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            sub_1DD50F644();
          }
          goto LABEL_14;
        }
      }
      else if (!v54.reportError)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          sub_1DD50F6D8();
        }
        goto LABEL_14;
      }
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      memset(&v54, 0, sizeof(v54));
      snprintf((char *)&v54, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
    }
LABEL_42:
    ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v54);
    return 0;
  }
  printf("Numeric factorization failed (status = %d).\n", *(_DWORD *)a3);
  uint64_t v11 = *(void *)(a2 + 8) - *(void *)a2;
  if (v11)
  {
    unint64_t v12 = v11 >> 3;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a2, 8 * v12);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DD4D78B0(uint64_t a1, float a2)
{
  float v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1DD4BB904();
  }
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1DD4D7904(char **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_1DD4BACA0();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      BOOL v14 = (char *)sub_1DD4BAF80(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      BOOL v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    long long v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    long long v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_1DD4D7A20(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      long long v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      sub_1DD4BACA0();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_1DD4BAF80(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    BOOL v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void sub_1DD4D7B44(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1DD4D7B60(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_1DD4D7BB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

intptr_t sub_1DD4D7BC0(intptr_t result)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(result + 2));
  if ((v1 & 1) == 0)
  {
    intptr_t v2 = result;
    do
    {
      unint64_t v3 = *(NSObject **)(v2 + 16);
      dispatch_time_t v4 = dispatch_time(0, 1000000);
      __n128 result = dispatch_semaphore_wait(v3, v4);
      if (!result) {
        atomic_store(1u, (unsigned __int8 *)(v2 + 2));
      }
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 2));
    }
    while ((v5 & 1) == 0);
  }
  return result;
}

void sub_1DD4D7C30(uint64_t a1, uint64_t a2)
{
  char v11 = 0;
  dispatch_group_create();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  do
  {
    unint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    dispatch_time_t v4 = dispatch_queue_create(v3, 0);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    uint64_t v6 = dispatch_semaphore_create(v5);
    sub_1DD4D8654(v7, v4, v6, a2);
    sub_1DD4D8428(&v8, (uint64_t)v7);
    dispatch_release(v4);
    dispatch_release(v6);
    sub_1DD4D86F4((uint64_t)v7);
    a2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  while (a2);
  dispatch_queue_create("com.apple.stage_state", 0);
  dispatch_semaphore_create(0);
  memset(&v7[12], 0, 24);
  if (0x8E38E38E38E38E39 * ((v9 - v8) >> 3) != 1) {
    operator new();
  }
  operator new();
}

void sub_1DD4D8394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v48 = *(void **)v46;
  if (*(void *)v46)
  {
    *(void *)(v46 + 8) = v48;
    operator delete(v48);
  }
  a31 = (void **)&a46;
  sub_1DD4D8FCC(&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4D8428(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x38E38E38E38E38ELL) {
      sub_1DD4BACA0();
    }
    unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x1C71C71C71C71C7) {
      unint64_t v13 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)sub_1DD4BEA14(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[72 * v10];
    uint64_t v18 = &v14[72 * v13];
    sub_1DD4D908C((uint64_t)v16, a2);
    long long v17 = v16 + 72;
    sub_1DD4D9120(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = sub_1DD4D91A8((uint64_t)&v15);
  }
  else
  {
    uint64_t result = sub_1DD4D908C(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v9;
  return result;
}

void sub_1DD4D8550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4D91A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4D8568(uint64_t a1, uint64_t a2)
{
  return sub_1DD4D8BC4(a1 + 40, a2 + 40);
}

void *sub_1DD4D8574(uint64_t a1)
{
  return sub_1DD4D8B44((void *)(a1 + 40));
}

uint64_t sub_1DD4D8580(uint64_t a1, uint64_t a2, dispatch_time_t a3)
{
  return sub_1DD4D8590(*(void *)(*(void *)(a1 + 32) + 8) + 40, a2, a3);
}

uint64_t sub_1DD4D8590(uint64_t a1, uint64_t a2, dispatch_time_t timeout)
{
  if (dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), timeout)) {
    return 0;
  }
  unsigned __int8 v5 = atomic_load(*(unsigned __int8 **)(a1 + 24));
  if (v5)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
    return 0;
  }
  unint64_t v6 = *(NSObject **)(a1 + 8);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = sub_1DD4D8C68;
  v9[3] = &unk_1E6CC8AB8;
  v9[4] = a1;
  v9[5] = a2;
  dispatch_sync(v6, v9);
  unint64_t v7 = *(NSObject **)(a1 + 16);
  if (v7) {
    dispatch_semaphore_signal(v7);
  }
  return 1;
}

uint64_t sub_1DD4D864C()
{
  return 0;
}

void *sub_1DD4D8654(void *a1, dispatch_object_t object, dispatch_object_t a3, uint64_t a4)
{
  *a1 = &unk_1F38B04A0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = object;
  a1[5] = a3;
  a1[6] = a4;
  if (object)
  {
    dispatch_retain(object);
    a3 = (dispatch_object_t)a1[5];
  }
  if (a3) {
    dispatch_retain(a3);
  }
  return a1;
}

void sub_1DD4D86BC(uint64_t a1)
{
  sub_1DD4D86F4(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4D86F4(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B04A0;
  intptr_t v2 = *(NSObject **)(a1 + 32);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3) {
    dispatch_release(v3);
  }
  unsigned __int8 v5 = (void **)(a1 + 8);
  sub_1DD4D8764(&v5);
  return a1;
}

void sub_1DD4D8764(void ***a1)
{
  intptr_t v2 = *a1;
  if (*v2)
  {
    sub_1DD4D87B8(v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_1DD4D87B8(void *result)
{
  unsigned __int8 v1 = result;
  intptr_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *sub_1DD4D8824(void *a1, dispatch_object_t object, dispatch_object_t a3, dispatch_object_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = &unk_1F38B0398;
  a1[1] = a4;
  a1[2] = a5;
  a1[3] = a7;
  if (a4) {
    dispatch_retain(a4);
  }
  *a1 = &unk_1F38B0548;
  a1[4] = object;
  a1[5] = a3;
  a1[6] = a6;
  if (object)
  {
    dispatch_retain(object);
    a3 = (dispatch_object_t)a1[5];
  }
  if (a3) {
    dispatch_retain(a3);
  }
  return a1;
}

void sub_1DD4D88C8(void *a1)
{
  sub_1DD4D8B44(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4D8900(unsigned __int8 **a1, uint64_t a2)
{
  do
  {
    dispatch_time_t v4 = dispatch_time(0, 10000000);
    uint64_t result = (*((uint64_t (**)(unsigned __int8 **, uint64_t, dispatch_time_t))*a1 + 4))(a1, a2, v4);
    if (result) {
      break;
    }
    unsigned __int8 v6 = atomic_load(a1[3]);
  }
  while ((v6 & 1) == 0);
  return result;
}

uint64_t sub_1DD4D8974(uint64_t a1)
{
  unsigned __int8 v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_semaphore_signal(v1);
  }
  return 1;
}

uint64_t sub_1DD4D8998()
{
  return 1;
}

void *sub_1DD4D89A0(void *a1, uint64_t a2, dispatch_object_t object, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a1 + 10;
  a1[4] = 0;
  *a1 = &unk_1F38B0548;
  unint64_t v7 = a1 + 7;
  a1[5] = object;
  a1[6] = a1 + 7;
  if (object) {
    dispatch_retain(object);
  }
  *a1 = &unk_1F38B0510;
  v7[1] = 0;
  v7[2] = 0;
  *unint64_t v7 = 0;
  *((unsigned char *)v7 + 24) = 0;
  a1[11] = a4;
  a1[12] = a2;
  return a1;
}

void *sub_1DD4D8A3C(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B0510;
  unint64_t v3 = (void **)(a1 + 56);
  sub_1DD4D8764(&v3);
  return sub_1DD4D8B44((void *)a1);
}

uint64_t sub_1DD4D8A98(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B0510;
  dispatch_time_t v4 = (void **)(a1 + 56);
  sub_1DD4D8764(&v4);
  intptr_t v2 = sub_1DD4D8B44((void *)a1);
  return MEMORY[0x1E01B7750](v2, 0x10A1C4096DEAEF2);
}

uint64_t sub_1DD4D8B08(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8)) {
    atomic_store(1u, *(unsigned __int8 **)(a1 + 88));
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 16))();
}

void *sub_1DD4D8B44(void *a1)
{
  *a1 = &unk_1F38B0548;
  intptr_t v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  *a1 = &unk_1F38B0398;
  dispatch_time_t v4 = a1[1];
  if (v4) {
    dispatch_release(v4);
  }
  return a1;
}

uint64_t sub_1DD4D8BC4(uint64_t a1, uint64_t a2)
{
  dispatch_time_t v4 = *(NSObject **)(a2 + 8);
  *(void *)a1 = &unk_1F38B0398;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  if (v4) {
    dispatch_retain(v4);
  }
  *(void *)a1 = &unk_1F38B0548;
  unsigned __int8 v5 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  if (!v5)
  {
    unint64_t v7 = v6;
    if (!(void)v6) {
      return a1;
    }
    goto LABEL_5;
  }
  dispatch_retain(v5);
  unint64_t v7 = *(NSObject **)(a1 + 40);
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
  return a1;
}

void **sub_1DD4D8C68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  intptr_t v2 = *(uint64_t **)(*(void *)(a1 + 32) + 48);
  unint64_t v3 = (void *)v2[1];
  uint64_t result = (void **)(v2 + 2);
  unint64_t v5 = v2[2];
  if ((unint64_t)v3 >= v5)
  {
    uint64_t v7 = ((uint64_t)v3 - *v2) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      sub_1DD4BACA0();
    }
    uint64_t v8 = v5 - *v2;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    _OWORD v13[4] = v2 + 2;
    if (v10) {
      unint64_t v11 = (char *)sub_1DD4BAF80((uint64_t)result, v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v11[8 * v7];
    v13[0] = v11;
    v13[1] = v12;
    v13[3] = &v11[8 * v10];
    *(void *)uint64_t v12 = v1;
    v13[2] = v12 + 8;
    sub_1DD4D8D70(v2, v13);
    long long v6 = (void *)v2[1];
    uint64_t result = sub_1DD4D8F20(v13);
  }
  else
  {
    void *v3 = v1;
    long long v6 = v3 + 1;
    v2[1] = (uint64_t)v6;
  }
  v2[1] = (uint64_t)v6;
  return result;
}

void sub_1DD4D8D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4D8F20((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4D8D70(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1DD4D8DE8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DD4D8DE8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1DD4D8E80((uint64_t)v13);
  return v11;
}

uint64_t sub_1DD4D8E80(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DD4D8EB8((void *)a1);
  }
  return a1;
}

void *sub_1DD4D8EB8(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  intptr_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    NSObject *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_1DD4D8F20(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_1DD4D8F58(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    dispatch_time_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1DD4D8FCC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    dispatch_time_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 72;
      uint64_t v7 = v4 - 72;
      uint64_t v8 = v4 - 72;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 72;
        (*v9)(v7);
        v6 -= 72;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1DD4D908C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F38B04A0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  if (!v3)
  {
    uint64_t v6 = v4;
    if (!(void)v4) {
      return a1;
    }
    goto LABEL_3;
  }
  dispatch_retain(v3);
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
  return a1;
}

uint64_t sub_1DD4D9120(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 72;
    uint64_t result = sub_1DD4D908C(result - 72, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DD4D91A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 72);
    *(void *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_1DD4D9214(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_1DD4D9238(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_1DD4D8764(&v1);
}

void *sub_1DD4D9264(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  sub_1DD4D92CC((void **)(v3 + 40));
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(v2 + 8);
  *(void *)(v3 + 56) = *(void *)(v2 + 24);
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  uint64_t v4 = (void *)(*(void *)(a1 + 40) + 8);
  return sub_1DD4D87B8(v4);
}

void sub_1DD4D92CC(void **a1)
{
  if (*a1)
  {
    sub_1DD4D87B8(a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1DD4D9308(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load(*(unsigned __int8 **)(a1 + 32));
  if ((v2 & 1) != 0 || (unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 40))) != 0)
  {
    (*(void (**)(void))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64));
  }
  else if (((*(uint64_t (**)(void, void, void))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64)) & 1) == 0)
  {
    atomic_fetch_add(*(atomic_uint *volatile *)(a1 + 40), 1u);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(NSObject **)(a1 + 72);
  dispatch_group_leave(v5);
}

uint64_t sub_1DD4D93E8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  while (v2 != v3)
  {
    __n128 result = (*(uint64_t (**)(void))(**(void **)(v1 + 56) + 24))(*(void *)(v1 + 56));
    v2 += 8;
  }
  return result;
}

BOOL sub_1DD4D944C(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 == *(void *)a1) {
    return 0;
  }
  int v6 = a2 - *v4;
  return a2 >= *v4
      && *(_DWORD *)(v5 - 24) >= a2
      && *(double *)&v4[6 * v6 + 2] <= (double)a3
      && *(double *)&v4[6 * v6 + 4] >= (double)a4;
}

uint64_t sub_1DD4D94B0(int **a1, int a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (v5 == *a1) {
    return 0;
  }
  int v6 = *v4;
  int v7 = a3 - *v4;
  if (a3 >= *v4)
  {
    BOOL v8 = *(v5 - 6) < a3;
    if (*(v5 - 6) < a3) {
      int v7 = 0;
    }
  }
  else
  {
    int v7 = 0;
    BOOL v8 = 1;
  }
  if (a4 < v6) {
    return 0;
  }
  char v9 = *(v5 - 6) < a4 || v8;
  if (v9) {
    return 0;
  }
  if (v7 > a4 - v6) {
    return 1;
  }
  double v11 = (double)a2;
  int v12 = v7 + v6 - a4;
  unint64_t v13 = (double *)&v4[6 * v7 + 4];
  do
  {
    int v14 = v12;
    BOOL v15 = *v13 < v11 || *(v13 - 1) > v11;
    if (v15) {
      break;
    }
    ++v12;
    v13 += 3;
  }
  while (v14);
  return !v15;
}

double sub_1DD4D9560(int **a1, double *a2)
{
  int v3 = (int)*a2 - 1;
  if (sub_1DD4D94B0(a1, v3, (int)a2[1], (int)(a2[3] + (double)(int)a2[1] + -1.0)))
  {
    *a2 = (double)v3;
    double result = a2[2] + 1.0;
    a2[2] = result;
  }
  return result;
}

uint64_t sub_1DD4D95CC(int **a1, double *a2)
{
  double v3 = a2[2];
  uint64_t result = sub_1DD4D94B0(a1, (int)(*a2 + v3) + 1, (int)a2[1], (int)(a2[3] + (double)(int)a2[1] + -1.0));
  if (result) {
    a2[2] = v3 + 1.0;
  }
  return result;
}

double sub_1DD4D9634(uint64_t a1, double *a2)
{
  int v3 = (int)a2[1] - 1;
  if (sub_1DD4D944C(a1, v3, (int)*a2, (int)(a2[2] + (double)(int)*a2 + -1.0)))
  {
    a2[1] = (double)v3;
    double result = a2[3] + 1.0;
    a2[3] = result;
  }
  return result;
}

BOOL sub_1DD4D96A0(uint64_t a1, double *a2)
{
  double v3 = a2[3];
  BOOL result = sub_1DD4D944C(a1, (int)(a2[1] + v3 + -1.0) + 1, (int)*a2, (int)(a2[2] + (double)(int)*a2 + -1.0));
  if (result) {
    a2[3] = v3 + 1.0;
  }
  return result;
}

void sub_1DD4D970C(int **a1, long long *a2)
{
  long long v4 = a2[1];
  long long v7 = *a2;
  long long v8 = v4;
  sub_1DD4D9560(a1, (double *)&v7);
  if (v5)
  {
    if (sub_1DD4D95CC(a1, (double *)&v7))
    {
      long long v6 = v8;
      *a2 = v7;
      a2[1] = v6;
    }
  }
}

void sub_1DD4D9768(uint64_t a1, long long *a2)
{
  long long v4 = a2[1];
  long long v7 = *a2;
  long long v8 = v4;
  sub_1DD4D9634(a1, (double *)&v7);
  if (v5)
  {
    if (sub_1DD4D96A0(a1, (double *)&v7))
    {
      long long v6 = v8;
      *a2 = v7;
      a2[1] = v6;
    }
  }
}

BOOL sub_1DD4D97C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == *(void *)a1) {
    return 0;
  }
  int v4 = HIDWORD(a2) - *v2;
  return SHIDWORD(a2) >= *v2
      && *(_DWORD *)(v3 - 24) >= SHIDWORD(a2)
      && *(double *)&v2[6 * v4 + 2] <= (double)(int)a2
      && *(double *)&v2[6 * v4 + 4] >= (double)(int)a2;
}

uint64_t sub_1DD4D9828(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = v4 - *a1;
  if (v4 == *a1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  LODWORD(result) = 0;
  unint64_t v9 = v5 / 24;
  if (v9 <= 1) {
    unint64_t v9 = 1;
  }
  BOOL v10 = (double *)(v3 + 16);
  do
  {
    int v11 = (int)(*v10 - *(v10 - 1) + 1.0);
    BOOL v12 = (int)result < v11;
    if ((int)result <= v11) {
      uint64_t result = v11;
    }
    else {
      uint64_t result = result;
    }
    if (v12) {
      uint64_t v7 = v6;
    }
    ++v6;
    v10 += 3;
  }
  while (v9 != v6);
  uint64_t v13 = v3 + 24 * v7;
  *a2 = *(_DWORD *)v13;
  *a3 = (int)*(double *)(v13 + 8);
  return result;
}

uint64_t sub_1DD4D98BC(int **a1, double *a2)
{
  double v4 = a2[1];
  int v5 = (int)*a2;
  int v6 = (int)(*a2 + a2[2] + -1.0);
  if (!sub_1DD4D944C((uint64_t)a1, (int)v4, v5, v6)) {
    return 0;
  }
  int v7 = (int)(v4 + a2[3] + -1.0);
  if (!sub_1DD4D944C((uint64_t)a1, v7, v5, v6) || !sub_1DD4D94B0(a1, v5, (int)v4, v7)) {
    return 0;
  }
  return sub_1DD4D94B0(a1, v6, (int)v4, v7);
}

uint64_t sub_1DD4D99A8(float64x2_t *a1, int **a2, char a3, float a4, __n128 a5)
{
  uint64_t v8 = 0;
  float64x2_t v10 = *a1;
  float64x2_t v9 = a1[1];
  __asm { FMOV            V3.2S, #1.0 }
  v16.i32[0] = _D3.i32[0];
  *(float *)&v16.i32[1] = 1.0 / a4;
  *(float *)_D3.i32 = a4;
  float32x2_t v103 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a4 > 1.0), 0x1FuLL)), v16, _D3);
  float32x2_t v17 = vadd_f32(v103, v103);
  a5.n128_u64[0] = 0x4300000043000000;
  do
  {
    __n128 v106 = a5;
    float64x2_t v108 = vcvtq_f64_f32(vmul_n_f32(v17, a5.n128_f32[0]));
    float64x2_t v110 = vcvtq_f64_f32(vmul_n_f32(v103, a5.n128_f32[0]));
    uint64_t v18 = v8;
    float64x2_t v19 = v9;
    float64x2_t v20 = v10;
    do
    {
      uint64_t v8 = v18;
      float64x2_t v112 = v19;
      float64x2_t v116 = v20;
      float64x2_t v119 = vaddq_f64(v19, v108);
      float64x2_t v121 = vsubq_f64(v20, v110);
      float32x2_t v21 = vcvt_f32_f64(v121);
      float32x2_t v22 = vcvt_f32_f64(vaddq_f64(v119, vcvtq_f64_f32(v21)));
      float32x2_t v23 = vrndm_f32(v21);
      double v123 = v23.f32[0];
      double v124 = v23.f32[1];
      float64x2_t v125 = vcvtq_f64_f32(vsub_f32(vrndp_f32(v22), v23));
      char v24 = sub_1DD4D98BC(a2, &v123);
      float64x2_t v19 = v119;
      float64x2_t v20 = v121;
      uint64_t v18 = 1;
    }
    while ((v24 & 1) != 0);
    a5 = v106;
    a5.n128_f32[0] = v106.n128_f32[0] * 0.5;
    float64x2_t v9 = v112;
    float64x2_t v10 = v116;
  }
  while ((float)(v106.n128_f32[0] * 0.5) > 0.25);
  double v25 = v112.f64[1];
  double v26 = v116.f64[1];
  if (a3)
  {
    double v111 = v112.f64[1];
    double v107 = v112.f64[0];
    double v109 = v116.f64[1];
    double v97 = v116.f64[0];
    LOBYTE(v27) = v8;
  }
  else
  {
    double v28 = v103.f32[0];
    double v29 = v103.f32[1];
    double v120 = v103.f32[0];
    double v122 = v103.f32[1];
    while (1)
    {
      double v30 = v10.f64[0];
      double v109 = v26;
      double v107 = v9.f64[0];
      double v111 = v25;
      double v117 = v10.f64[0] - v28;
      double v31 = v26 - v29;
      double v32 = v9.f64[0] + v28;
      double v33 = v25 + v29;
      float v34 = v10.f64[0] - v28;
      double v104 = v34;
      float v35 = v9.f64[0] + v28 + v34;
      float v36 = v31;
      double v113 = v36;
      float v37 = v33 + v36;
      float v38 = floorf(v34);
      float v39 = floorf(v36);
      double v123 = v38;
      double v124 = v39;
      double v40 = (float)(ceilf(v37) - v39);
      v125.f64[0] = (float)(ceilf(v35) - v38);
      v125.f64[1] = v40;
      char v41 = sub_1DD4D98BC(a2, &v123);
      char v42 = v41;
      double v43 = v31 - v122;
      float v44 = v31 - v122;
      double v45 = v44;
      float v46 = v33 + v122 + v44;
      float v47 = floorf(v44);
      double v48 = v47;
      double v49 = (float)(ceilf(v46) - v47);
      float v50 = v30;
      double v51 = v50;
      float v52 = floorf(v50);
      double v53 = v52;
      if (v41)
      {
        double v53 = v38;
        float v54 = v38;
      }
      else
      {
        float v54 = v52;
      }
      if (v41) {
        double v55 = v104;
      }
      else {
        double v55 = v51;
      }
      if ((v41 & 1) == 0)
      {
        double v49 = v40;
        double v48 = v39;
        float v47 = v39;
      }
      float v101 = v47;
      double v56 = v113;
      if (v41)
      {
        double v56 = v45;
        double v57 = v33 + v122;
      }
      else
      {
        double v57 = v33;
      }
      if (v41) {
        double v58 = v32 + v120;
      }
      else {
        double v58 = v32;
      }
      if ((v41 & 1) == 0) {
        double v43 = v31;
      }
      double v114 = v43;
      double v59 = v111;
      if (v41) {
        double v59 = v33;
      }
      double v99 = v59;
      double v100 = v56;
      double v60 = v107;
      if (v41) {
        double v60 = v32;
      }
      double v97 = v30;
      double v98 = v60;
      if ((v41 & 1) == 0) {
        double v31 = v109;
      }
      double v61 = v117;
      if ((v41 & 1) == 0) {
        double v61 = v30;
      }
      double v105 = v61;
      if (v41) {
        LODWORD(v8) = 1;
      }
      float v62 = v58 + v55;
      double v123 = v53;
      double v124 = v48;
      double v63 = v48;
      double v64 = (float)(ceilf(v62) - v54);
      v125.f64[0] = v64;
      v125.f64[1] = v49;
      char v65 = sub_1DD4D98BC(a2, &v123);
      float v66 = v58 + v120 + v55;
      double v67 = (float)(ceilf(v66) - v54);
      float v68 = v31;
      double v69 = v68;
      float v70 = floorf(v68);
      if (v65) {
        double v71 = v63;
      }
      else {
        double v71 = v70;
      }
      if (v65) {
        float v72 = v101;
      }
      else {
        float v72 = v70;
      }
      if (v65) {
        double v73 = v100;
      }
      else {
        double v73 = v69;
      }
      if (v65)
      {
        double v74 = v57 + v122;
      }
      else
      {
        double v67 = v64;
        double v74 = v57;
      }
      if (v65) {
        double v75 = v58 + v120;
      }
      else {
        double v75 = v58;
      }
      double v76 = v99;
      if (v65) {
        double v76 = v57;
      }
      double v118 = v76;
      if ((v65 & 1) == 0) {
        double v58 = v98;
      }
      double v77 = v114;
      if ((v65 & 1) == 0) {
        double v77 = v31;
      }
      double v102 = v77;
      if (v65)
      {
        LODWORD(v8) = 1;
        char v78 = 1;
      }
      else
      {
        char v78 = v42;
      }
      float v79 = v74 + v73;
      double v124 = v71;
      v125.f64[0] = v67;
      double v80 = (float)(ceilf(v79) - v72);
      v125.f64[1] = v80;
      int v81 = sub_1DD4D98BC(a2, &v123);
      double v28 = v120;
      float v82 = v74 + v122 + v73;
      double v83 = (float)(ceilf(v82) - v72);
      if (v81)
      {
        double v25 = v74 + v122;
      }
      else
      {
        double v83 = v80;
        double v25 = v74;
      }
      if (v81) {
        double v84 = v75 + v120;
      }
      else {
        double v84 = v75;
      }
      if (v81)
      {
        double v85 = v75;
      }
      else
      {
        double v74 = v118;
        double v85 = v58;
      }
      if (v81) {
        int v27 = 1;
      }
      else {
        int v27 = v8;
      }
      if (v81) {
        char v78 = 1;
      }
      double v115 = v84;
      float v86 = v105 - v120;
      float v87 = v84 + v86;
      float v88 = floorf(v86);
      double v123 = v88;
      double v124 = v71;
      v125.f64[0] = (float)(ceilf(v87) - v88);
      v125.f64[1] = v83;
      char v89 = sub_1DD4D98BC(a2, &v123);
      double v26 = v102;
      v9.f64[0] = v115;
      v10.f64[0] = v105 - v120;
      double v29 = v122;
      LODWORD(v8) = 1;
      if ((v89 & 1) == 0)
      {
        double v25 = v74;
        v9.f64[0] = v85;
        v10.f64[0] = v105;
        LODWORD(v8) = v27;
        if ((v78 & 1) == 0) {
          break;
        }
      }
    }
  }
  if (v27)
  {
    float v90 = v97;
    float v91 = v107 + v90;
    float v92 = v109;
    float v93 = v111 + v92;
    float v94 = floorf(v90);
    float v95 = floorf(v92);
    a1->f64[0] = v94;
    a1->f64[1] = v95;
    a1[1].f64[0] = (float)(ceilf(v91) - v94);
    a1[1].f64[1] = (float)(ceilf(v93) - v95);
  }
  return v27 & 1;
}

uint64_t sub_1DD4D9E9C(uint64_t a1, uint64_t *a2, float a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  float64x2_t v31 = 0u;
  long long v32 = 0u;
  if (sub_1DD4D97C4((uint64_t)a2, a5))
  {
    v13.n128_f64[0] = (double)SHIDWORD(a5);
    v31.f64[0] = (double)(int)a5;
    v31.f64[1] = (double)SHIDWORD(a5);
    long long v32 = 0uLL;
    int v14 = 1;
  }
  else
  {
    int v14 = a7 ^ 1;
    if (((a7 ^ 1) & 1) == 0) {
      puts("Warning: unable to satisfy centered-crop requirement: center pixel invalid");
    }
    uint64_t v30 = 0;
    unint64_t v15 = sub_1DD4D9828(a2, (_DWORD *)&v30 + 1, &v30);
    if (!v15) {
      goto LABEL_29;
    }
    v13.n128_f64[0] = (double)SHIDWORD(v30);
    v31.f64[0] = (double)((int)v30 + (v15 >> 1));
    v31.f64[1] = (double)SHIDWORD(v30);
    long long v32 = 0uLL;
  }
  sub_1DD4D99A8(&v31, (int **)a2, a7, a3, v13);
  if ((a6 & 1) == 0)
  {
    if (a7)
    {
      LOBYTE(v16) = 1;
      LOBYTE(v17) = 1;
      while (1)
      {
        if (v16)
        {
          sub_1DD4D970C((int **)a2, (long long *)&v31);
          int v16 = v18;
          if (v17) {
            goto LABEL_14;
          }
        }
        else
        {
          int v16 = 0;
          if (v17)
          {
LABEL_14:
            sub_1DD4D9768((uint64_t)a2, (long long *)&v31);
            int v17 = v19;
            goto LABEL_15;
          }
        }
        int v17 = 0;
LABEL_15:
        if (((v16 | v17) & 1) == 0) {
          goto LABEL_29;
        }
      }
    }
    char v20 = 1;
    char v21 = 1;
    char v22 = 1;
    char v23 = 1;
    do
    {
      if (v20)
      {
        sub_1DD4D9560((int **)a2, v31.f64);
        char v20 = v24;
        if ((v21 & 1) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        char v20 = 0;
        if ((v21 & 1) == 0)
        {
LABEL_20:
          char v21 = 0;
          if ((v22 & 1) == 0) {
            goto LABEL_21;
          }
          goto LABEL_25;
        }
      }
      char v21 = sub_1DD4D95CC((int **)a2, v31.f64);
      if ((v22 & 1) == 0)
      {
LABEL_21:
        char v22 = 0;
        if ((v23 & 1) == 0) {
          goto LABEL_22;
        }
        goto LABEL_26;
      }
LABEL_25:
      sub_1DD4D9634((uint64_t)a2, v31.f64);
      char v22 = v26;
      if ((v23 & 1) == 0)
      {
LABEL_22:
        BOOL v25 = 0;
        goto LABEL_27;
      }
LABEL_26:
      BOOL v25 = sub_1DD4D96A0((uint64_t)a2, v31.f64);
LABEL_27:
      char v23 = (v20 | v21 | v22) ^ 1 | v25;
    }
    while ((((v20 | v21) | v22) & 1) != 0 || v25);
  }
LABEL_29:
  long long v27 = v32;
  *(float64x2_t *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v27;
  BOOL v28 = *(double *)&v32 >= 2.0;
  if (*((double *)&v32 + 1) < 2.0) {
    BOOL v28 = 0;
  }
  return v14 & v28;
}

uint64_t sub_1DD4DA09C(float *a1, float *a2, float a3, float a4)
{
  float v4 = *a2;
  float v5 = a2[1];
  float v6 = *a1;
  float v7 = a1[1];
  float v8 = a2[2];
  float v9 = a1[2];
  float v10 = (float)((float)(v5 * v7) + (float)(*a2 * *a1)) + (float)(v8 * v9);
  if (v10 < 0.0) {
    return 0;
  }
  uint64_t result = 0;
  float v12 = a2[6];
  float v13 = a2[7];
  float v14 = a2[8];
  float v15 = (float)((float)(v7 * v13) + (float)(v12 * v6)) + (float)(v14 * v9);
  if (v10 > (float)(v15 * a3)) {
    return result;
  }
  float v16 = a2[3];
  float v17 = a2[4];
  float v18 = a2[5];
  float v19 = (float)((float)(v7 * v17) + (float)(v16 * v6)) + (float)(v18 * v9);
  float v20 = v15 * a4;
  if (v19 < 0.0 || v19 > v20) {
    return result;
  }
  float v22 = v6 + 1.0;
  float v23 = v8 + (float)((float)(v5 * v7) + (float)(v4 * (float)(v6 + 1.0)));
  if (v23 < 0.0) {
    return 0;
  }
  uint64_t result = 0;
  float v24 = v14 + (float)((float)(v7 * v13) + (float)(v12 * v22));
  if (v23 <= (float)(v24 * a3))
  {
    float v25 = v18 + (float)((float)(v7 * v17) + (float)(v16 * v22));
    float v26 = v24 * a4;
    if (v25 >= 0.0 && v25 <= v26)
    {
      float v28 = v7 + 1.0;
      float v29 = v8 + (float)((float)(v5 * v28) + (float)(v4 * v6));
      float v30 = v14 + (float)((float)(v28 * v13) + (float)(v12 * v6));
      float v31 = v30 * a3;
      if (v29 >= 0.0 && v29 <= v31)
      {
        float v33 = v18 + (float)((float)(v28 * v17) + (float)(v16 * v6));
        float v34 = v30 * a4;
        if (v33 >= 0.0 && v33 <= v34) {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DD4DA1AC(uint64_t result, uint64_t a2, double *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  double v3 = a3[7];
  double v4 = a3[8];
  double v5 = a3[4];
  double v6 = a3[5];
  double v7 = a3[6];
  double v8 = v5 * v4 - v3 * v6;
  double v9 = *a3;
  double v10 = a3[1];
  double v12 = a3[2];
  double v11 = a3[3];
  double v13 = v3 * v12 - v10 * v4;
  double v32 = v8;
  double v33 = v13;
  double v14 = v10 * v6 - v5 * v12;
  double v34 = v14;
  double v15 = v13 * v11 + v9 * v8 + v7 * v14;
  if (v15 >= 2.22044605e-16 || v15 <= -2.22044605e-16)
  {
    double v32 = v8 / v15;
    double v33 = v13 / v15;
    double v34 = v14 / v15;
    double v35 = (v7 * v6 - v11 * v4) / v15;
    double v36 = (v9 * v4 - v7 * v12) / v15;
    double v37 = (v11 * v12 - v9 * v6) / v15;
    double v38 = (v11 * v3 - v7 * v5) / v15;
    double v39 = (v7 * v10 - v9 * v3) / v15;
    double v40 = (v9 * v5 - v11 * v10) / v15;
  }
  for (uint64_t i = 0; i != 9; ++i)
  {
    float v18 = *(&v32 + i);
    v31[i] = v18;
  }
  _OWORD v30[2] = 1.0;
  uint64_t v19 = *(void *)result;
  uint64_t v20 = *(void *)(result + 8);
  if (*(void *)result != v20)
  {
    float v21 = (float)(int)a2;
    float v22 = (float)SHIDWORD(a2);
    do
    {
      v30[1] = (float)*(int *)v19;
      double v23 = *(double *)(v19 + 16);
      int v24 = (int)*(double *)(v19 + 8);
      double v25 = (double)v24;
      if (v23 >= (double)v24)
      {
        v30[0] = (float)v24;
        uint64_t result = sub_1DD4DA09C(v30, v31, v21, v22);
        if ((result & 1) == 0)
        {
          int v26 = v24 + 1;
          do
          {
            double v25 = (double)v26;
            if (v23 < (double)v26) {
              break;
            }
            v30[0] = (float)v26;
            uint64_t result = sub_1DD4DA09C(v30, v31, v21, v22);
            ++v26;
          }
          while (!result);
        }
      }
      *(double *)(v19 + 8) = v25;
      if (v23 > v25)
      {
        int v27 = (int)v23;
        double v28 = (double)v27;
        if (v25 <= (double)v27)
        {
          v30[0] = (float)v27;
          uint64_t result = sub_1DD4DA09C(v30, v31, v21, v22);
          if ((result & 1) == 0)
          {
            int v29 = v27 - 1;
            do
            {
              double v28 = (double)v29;
              if (v25 > (double)v29) {
                break;
              }
              v30[0] = (float)v29;
              uint64_t result = sub_1DD4DA09C(v30, v31, v21, v22);
              --v29;
            }
            while (!result);
          }
        }
        *(double *)(v19 + 16) = v28;
      }
      v19 += 24;
    }
    while (v19 != v20);
  }
  return result;
}

double sub_1DD4DA410(uint64_t a1, uint64_t *a2, double *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v23 = xmmword_1DD511F38;
  uint64_t v24 = 0x3FF0000000000000;
  double v25 = (double)(int)a1;
  long long v26 = xmmword_1DD511740;
  double v27 = (double)(int)a1;
  double v28 = (double)SHIDWORD(a1);
  long long v29 = xmmword_1DD511730;
  double v30 = (double)SHIDWORD(a1);
  uint64_t v31 = 0x3FF0000000000000;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    double v7 = 1.79769313e308;
    float v18 = -INFINITY;
    float v19 = -INFINITY;
    double v6 = 1.79769313e308;
  }
  else
  {
    double v5 = -1.79769313e308;
    double v6 = 1.79769313e308;
    double v7 = 1.79769313e308;
    double v8 = -1.79769313e308;
    do
    {
      for (uint64_t i = 0; i != 96; i += 24)
      {
        double v10 = *(double *)((char *)&v23 + i);
        double v11 = *(double *)((char *)&v23 + i + 8);
        double v12 = *(double *)((char *)&v23 + i + 16);
        double v13 = *(double *)(*(void *)v3 + 8) * v11 + **(double **)v3 * v10 + *(double *)(*(void *)v3 + 16) * v12;
        double v14 = v11 * *(double *)(*(void *)v3 + 32) + *(double *)(*(void *)v3 + 24) * v10;
        double v15 = v11 * *(double *)(*(void *)v3 + 56)
            + *(double *)(*(void *)v3 + 48) * v10
            + *(double *)(*(void *)v3 + 64) * v12;
        double v16 = v13 / v15;
        double v17 = (v14 + *(double *)(*(void *)v3 + 40) * v12) / v15;
        if (v16 < v7) {
          double v7 = v16;
        }
        if (v8 < v16) {
          double v8 = v16;
        }
        if (v17 < v6) {
          double v6 = v17;
        }
        if (v5 < v17) {
          double v5 = v17;
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
    float v18 = v8;
    float v19 = v5;
  }
  double v20 = floor(v7);
  double v21 = floor(v6);
  *a3 = v20;
  a3[1] = v21;
  double result = ceilf(v18) - v20 + 1.0;
  a3[2] = result;
  a3[3] = ceilf(v19) - v21 + 1.0;
  return result;
}

void sub_1DD4DA5B0(void *a1, uint64_t a2, void *a3, double *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  a1[1] = *a1;
  if (a3)
  {
    uint64_t v39 = 0x3FF0000000000000;
    long long v38 = xmmword_1DD511F38;
    double v40 = (double)(int)a2;
    long long v41 = xmmword_1DD511740;
    double v42 = (double)(int)a2;
    double v43 = (double)SHIDWORD(a2);
    long long v44 = xmmword_1DD511730;
    double v45 = (double)SHIDWORD(a2);
    uint64_t v46 = 0x3FF0000000000000;
    uint64_t v5 = a3[1];
    uint64_t v6 = v5 - *a3;
    if (v5 == *a3)
    {
      double v11 = -1.79769313e308;
      double v12 = 1.79769313e308;
      double v9 = 1.79769313e308;
      double v10 = -1.79769313e308;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = v6 >> 3;
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      double v9 = 1.79769313e308;
      double v10 = -1.79769313e308;
      double v11 = -1.79769313e308;
      double v12 = 1.79769313e308;
      do
      {
        uint64_t v13 = 0;
        double v14 = *(double **)(*a3 + 8 * v7);
        double v15 = 1.79769313e308;
        double v16 = -1.79769313e308;
        double v17 = -1.79769313e308;
        double v18 = 1.79769313e308;
        do
        {
          double v19 = *(double *)((char *)&v38 + v13);
          double v20 = *(double *)((char *)&v38 + v13 + 8);
          double v21 = *(double *)((char *)&v38 + v13 + 16);
          double v22 = v14[1] * v20 + *v14 * v19 + v14[2] * v21;
          double v23 = v20 * v14[4] + v14[3] * v19;
          double v24 = v20 * v14[7] + v14[6] * v19 + v14[8] * v21;
          double v25 = v22 / v24;
          double v26 = (v23 + v14[5] * v21) / v24;
          if (v25 < v15) {
            double v15 = v25;
          }
          if (v16 < v25) {
            double v16 = v25;
          }
          if (v26 < v18) {
            double v18 = v26;
          }
          if (v17 < v26) {
            double v17 = v26;
          }
          v13 += 24;
        }
        while (v13 != 96);
        if (v11 < v15) {
          double v11 = v15;
        }
        if (v16 < v9) {
          double v9 = v16;
        }
        if (v10 < v18) {
          double v10 = v18;
        }
        if (v17 < v12) {
          double v12 = v17;
        }
        ++v7;
      }
      while (v7 != v8);
    }
    if (v9 < v11) {
      double v9 = v11;
    }
    if (v12 < v10) {
      double v12 = v10;
    }
    float v27 = v10;
    int v28 = vcvtms_s32_f32(v27);
    float v29 = v12;
    float v30 = v11;
    int v31 = vcvtms_s32_f32(v30);
    float v32 = v9;
    int v33 = vcvtps_s32_f32(v32);
    double v34 = (double)v31;
    *a4 = (double)v31;
    a4[1] = (double)v28;
    int v35 = vcvtps_s32_f32(v29) - v28;
    a4[2] = (double)(v33 - v31);
    a4[3] = (double)v35;
    sub_1DD4DA80C((uint64_t)a1, v35 + 1);
    uint64_t v36 = *a1;
    uint64_t v37 = a1[1];
    if (*a1 != v37)
    {
      do
      {
        *(_DWORD *)uint64_t v36 = v28;
        *(double *)(v36 + 8) = v34;
        *(double *)(v36 + 16) = (double)v33;
        ++v28;
        v36 += 24;
      }
      while (v36 != v37);
    }
  }
}

void sub_1DD4DA80C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1DD4DAE5C((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_1DD4DA848(void *a1, uint64_t a2, double *a3, uint64_t *a4)
{
  sub_1DD4DA5B0(a1, a2, a4, a3);
  uint64_t v7 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v8 = 0;
    do
    {
      sub_1DD4DA1AC((uint64_t)a1, a2, *(double **)(v7 + 8 * v8++));
      uint64_t v7 = *a4;
    }
    while (v8 < (a4[1] - *a4) >> 3);
  }
}

BOOL sub_1DD4DA8B8(uint64_t a1)
{
  long long v29 = *MEMORY[0x1E4F1DB28];
  float v2 = *(float *)(a1 + 160);
  if (v2 == -1.0 || v2 <= 0.0) {
    float v2 = (float)*(int *)(a1 + 4) / (float)*(int *)(a1 + 8);
  }
  double v3 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
  double v4 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  if (v5 != v6)
  {
    double v7 = (float)(1.0 / v2);
    double v25 = v7;
    do
    {
      double v9 = *(double *)(v5 + 8);
      double v8 = *(double *)(v5 + 16);
      if (v9 <= v8)
      {
        double v10 = (double)*(int *)v5;
        *(void *)&long long v26 = *(void *)(v5 + 8);
        *((double *)&v26 + 1) = v10;
        double v11 = v8 - v9 + 1.0;
        double v12 = round(v11 * v7);
        double v27 = v11;
        double v28 = v12;
        double v24 = v10;
        if (sub_1DD4D98BC((int **)(a1 + 96), (double *)&v26))
        {
          double v13 = v11;
          double v14 = v12;
          if (v11 > v3)
          {
LABEL_9:
            long long v29 = v26;
            double v3 = v13;
            double v4 = v14;
          }
        }
        else
        {
          double v13 = v11 + -1.0;
          double v14 = round((v11 + -1.0) * v7);
          double v27 = v11 + -1.0;
          double v28 = v14;
          if (v11 + -1.0 > v3)
          {
            double v23 = v4;
            double v4 = v14;
            double v16 = v11 + -1.0;
            if (sub_1DD4D98BC((int **)(a1 + 96), (double *)&v26))
            {
LABEL_19:
              long long v29 = v26;
              double v3 = v16;
            }
            else
            {
              while (1)
              {
                double v16 = v16 + -1.0;
                double v4 = round(v16 * v25);
                double v27 = v16;
                double v28 = v4;
                if (v16 <= v3) {
                  break;
                }
                if (sub_1DD4D98BC((int **)(a1 + 96), (double *)&v26)) {
                  goto LABEL_19;
                }
              }
              double v4 = v23;
            }
          }
          double v20 = v9 + 1.0;
          *(double *)&long long v26 = v9 + 1.0;
          *((double *)&v26 + 1) = v24;
          double v27 = v11 + -1.0;
          while (1)
          {
            double v28 = v14;
            if (v13 <= v3) {
              break;
            }
            if (sub_1DD4D98BC((int **)(a1 + 96), (double *)&v26)) {
              goto LABEL_9;
            }
            double v20 = v20 + 1.0;
            double v13 = v13 + -1.0;
            *(double *)&long long v26 = v20;
            double v27 = v13;
            double v14 = round(v13 * v25);
          }
        }
        double v27 = v11;
        double v28 = v12;
        double v15 = v24;
        *(double *)&long long v26 = v9;
        *((double *)&v26 + 1) = v24 - v12;
        if (sub_1DD4D98BC((int **)(a1 + 96), (double *)&v26))
        {
          double v7 = v25;
          if (v11 > v3)
          {
LABEL_12:
            long long v29 = v26;
            double v3 = v11;
            double v4 = v12;
          }
        }
        else
        {
          double v11 = v11 + -1.0;
          double v7 = v25;
          double v12 = round(v11 * v25);
          double v27 = v11;
          double v28 = v12;
          *((double *)&v26 + 1) = v24 - v12;
          if (v11 > v3)
          {
            double v17 = v12;
            double v18 = v11;
            if (sub_1DD4D98BC((int **)(a1 + 96), (double *)&v26))
            {
LABEL_24:
              long long v29 = v26;
              double v3 = v18;
              double v19 = v17;
              double v7 = v25;
              double v15 = v24;
              double v4 = v19;
            }
            else
            {
              while (1)
              {
                double v18 = v18 + -1.0;
                double v17 = round(v18 * v25);
                double v27 = v18;
                double v28 = v17;
                if (v18 <= v3) {
                  break;
                }
                if (sub_1DD4D98BC((int **)(a1 + 96), (double *)&v26)) {
                  goto LABEL_24;
                }
              }
              double v7 = v25;
              double v15 = v24;
            }
          }
          double v21 = v9 + 1.0;
          double v27 = v11;
          double v28 = v12;
          *(double *)&long long v26 = v21;
          *((double *)&v26 + 1) = v24 - v12;
          while (v11 > v3)
          {
            if (sub_1DD4D98BC((int **)(a1 + 96), (double *)&v26)) {
              goto LABEL_12;
            }
            double v21 = v21 + 1.0;
            double v11 = v11 + -1.0;
            double v12 = round(v11 * v7);
            double v27 = v11;
            double v28 = v12;
            *(double *)&long long v26 = v21;
            *((double *)&v26 + 1) = v15 - v12;
          }
        }
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  *(_OWORD *)(a1 + 24) = v29;
  *(double *)(a1 + 40) = v3;
  *(double *)(a1 + 48) = v4;
  v30.origin.CGFloat x = *(CGFloat *)(a1 + 24);
  v30.origin.CGFloat y = *(CGFloat *)(a1 + 32);
  v30.size.double width = v3;
  v30.size.double height = v4;
  return !CGRectIsEmpty(v30);
}

uint64_t sub_1DD4DABFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1)) {
    sub_1DD4DA410(*(void *)(a1 + 4), *(uint64_t **)(a1 + 88), (double *)(a1 + 56));
  }
  sub_1DD4DA848((void *)(a1 + 96), *(void *)(a1 + 4), (double *)(a1 + 120), *(uint64_t **)(a1 + 88));
  float v3 = *(float *)(a1 + 160);
  if (v3 == -1.0 || v3 <= 0.0) {
    float v3 = (float)*(int *)(a1 + 4) / (float)*(int *)(a1 + 8);
  }
  int v4 = *(unsigned __int8 *)(a1 + 155);
  if (*(unsigned char *)(a1 + 154))
  {
    if (*(unsigned char *)(a1 + 155))
    {
      int v4 = 1;
    }
    else
    {
      int v4 = *(unsigned __int8 *)(a1 + 156);
      if (*(unsigned char *)(a1 + 156))
      {
        *(unsigned char *)a1 = sub_1DD4DA8B8(a1);
        goto LABEL_10;
      }
    }
  }
  *(unsigned char *)a1 = sub_1DD4D9E9C((uint64_t)v7, (uint64_t *)(a1 + 96), v3, v2, *(void *)(a1 + 12), *(unsigned char *)(a1 + 154) != 0, v4 != 0);
  long long v5 = v7[1];
  *(_OWORD *)(a1 + 24) = v7[0];
  *(_OWORD *)(a1 + 40) = v5;
LABEL_10:
  *(unsigned char *)(a1 + 152) = 1;
  return 1;
}

BOOL sub_1DD4DACE4(unsigned __int8 *a1, uint64_t a2)
{
  if (a1[1])
  {
    long long v2 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 16) = v2;
    return 1;
  }
  else
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      v4.f64[0] = *((float64_t *)a1 + 5);
      if (a1[153])
      {
        v4.f64[1] = *((float64_t *)a1 + 6);
        int32x2_t v5 = vcvt_s32_f32(vrndm_f32(vcvt_f32_f64(v4)));
        v6.i64[0] = (int)(v5.i32[0] & 0xFFFFFFFE);
        v6.i64[1] = (int)(v5.i32[1] & 0xFFFFFFFE);
        float64x2_t v4 = vcvtq_f64_s64(v6);
        *(float64x2_t *)(a1 + 40) = v4;
      }
      if (v4.f64[0] >= 2.0 && *((double *)a1 + 6) >= 2.0)
      {
        *a1 = 1;
        long long v9 = *(_OWORD *)(a1 + 40);
        *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)(a2 + 16) = v9;
        return *a1 != 0;
      }
      else
      {
        uint64_t v3 = 0;
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        uint64_t v7 = *(void *)(a1 + 4);
        v8.i64[0] = (int)v7;
        v8.i64[1] = SHIDWORD(v7);
        *(float64x2_t *)(a2 + 16) = vcvtq_f64_s64(v8);
        *a1 = 0;
      }
    }
    else
    {
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
  }
  return v3;
}

uint64_t sub_1DD4DADA4(uint64_t result, unint64_t a2, uint64_t a3)
{
  *(_WORD *)double result = 0;
  *(void *)(result + 4) = a2;
  uint64_t v3 = MEMORY[0x1E4F1DB28];
  long long v5 = *MEMORY[0x1E4F1DB28];
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  *(_OWORD *)(result + 24) = *MEMORY[0x1E4F1DB28];
  *(_OWORD *)(result + 40) = v4;
  *(_OWORD *)(result + 56) = v5;
  *(_OWORD *)(result + 72) = *(_OWORD *)(v3 + 16);
  *(void *)(result + 88) = a3;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *(_OWORD *)(result + 120) = *MEMORY[0x1E4F1DB20];
  *(_OWORD *)(result + 136) = v6;
  *(_DWORD *)(result + 152) = 65792;
  *(unsigned char *)(result + 156) = 1;
  *(_DWORD *)(result + 160) = -1082130432;
  if ((a2 & 0x80000000) == 0) {
    int v7 = a2;
  }
  else {
    int v7 = a2 + 1;
  }
  int v8 = v7 >> 1;
  unint64_t v9 = HIDWORD(a2);
  if ((a2 & 0x8000000000000000) != 0) {
    LODWORD(v9) = HIDWORD(a2) + 1;
  }
  *(_DWORD *)(result + 12) = v8;
  *(_DWORD *)(result + 16) = (int)v9 >> 1;
  return result;
}

uint64_t sub_1DD4DAE28(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DD4DAE5C(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      double v12 = (char *)sub_1DD4BD934(v4, v11);
    }
    else {
      double v12 = 0;
    }
    double v14 = &v12[24 * v8];
    double v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    double v17 = &v14[v16];
    double v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      double v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_1DD4DAFF0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v69 = 0;
  float v70 = 0;
  double v71 = 0;
  sub_1DD4DB508((unint64_t *)&v69, (a2[1] - *a2) >> 3);
  uint64_t v5 = a2[1];
  if (v5 == *a2)
  {
    unint64_t v35 = 0;
LABEL_43:
    double v23 = (float *)v5;
    goto LABEL_44;
  }
  unint64_t v6 = 0;
  int v7 = v70;
  do
  {
    if (v7 >= v71)
    {
      unint64_t v9 = (unint64_t)v69;
      uint64_t v10 = v7 - (unsigned char *)v69;
      uint64_t v11 = v7 - (unsigned char *)v69 + 1;
      if (v11 < 0) {
        sub_1DD4BACA0();
      }
      unint64_t v12 = v71 - (unsigned char *)v69;
      if (2 * (v71 - (unsigned char *)v69) > (unint64_t)v11) {
        uint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        double v14 = (char *)operator new(v13);
      }
      else {
        double v14 = 0;
      }
      double v15 = &v14[v10];
      size_t v16 = &v14[v10];
      *size_t v16 = 0;
      unint64_t v8 = v16 + 1;
      if (v7 != (char *)v9)
      {
        double v17 = &v7[~v9];
        do
        {
          char v18 = *--v7;
          (v17--)[(void)v14] = v18;
        }
        while (v7 != (char *)v9);
        int v7 = (char *)v69;
        double v15 = v14;
      }
      double v69 = v15;
      float v70 = v8;
      double v71 = &v14[v13];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *int v7 = 0;
      unint64_t v8 = v7 + 1;
    }
    float v70 = v8;
    ++v6;
    uint64_t v5 = *a2;
    uint64_t v19 = a2[1];
    uint64_t v20 = v19 - *a2;
    int v7 = v8;
  }
  while (v6 < v20 >> 3);
  if (v19 == v5)
  {
    unint64_t v35 = v20 >> 3;
    goto LABEL_43;
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  double v23 = (float *)*a2;
  uint64_t v5 = a2[1];
  do
  {
    unint64_t v24 = v22;
    int v25 = *((unsigned __int8 *)v69 + v22++);
    if (!v25 && v22 < (v5 - (uint64_t)v23) >> 3)
    {
      unint64_t v26 = (v5 - (uint64_t)v23) >> 3;
      float v27 = v23[2 * v24 + 1] + 4.0;
      uint64_t v28 = v21;
      unint64_t v29 = v22;
      do
      {
        float v30 = *(float *)((char *)v23 + v28 + 12);
        if (v30 > v27) {
          break;
        }
        if (!*((unsigned char *)v69 + v29))
        {
          if (v26 <= v24) {
            sub_1DD4BAA78();
          }
          int v31 = &v23[2 * v24];
          float v32 = *v31 - *(float *)((char *)v23 + v28 + 8);
          if ((float)((float)((float)(v31[1] - v30) * (float)(v31[1] - v30)) + (float)(v32 * v32)) < 16.0)
          {
            unint64_t v33 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
            if (v33 <= v24 || v33 <= v29) {
              sub_1DD4BAA78();
            }
            if (*(_DWORD *)(*(void *)a3 + 4 * v24) < *(_DWORD *)(*(void *)a3 + 4 * v29))
            {
              *((unsigned char *)v69 + v24) = 1;
              double v23 = (float *)*a2;
              uint64_t v5 = a2[1];
              break;
            }
            *((unsigned char *)v69 + v29) = 1;
            double v23 = (float *)*a2;
            uint64_t v5 = a2[1];
          }
        }
        ++v29;
        unint64_t v26 = (v5 - (uint64_t)v23) >> 3;
        v28 += 8;
      }
      while (v29 < v26);
    }
    v21 += 8;
  }
  while (v22 < (v5 - (uint64_t)v23) >> 3);
  unint64_t v35 = (v5 - (uint64_t)v23) >> 3;
LABEL_44:
  float v66 = 0;
  double v67 = 0;
  uint64_t v68 = 0;
  sub_1DD4DB61C(&v66, v23, v5, v35);
  __p = 0;
  double v64 = 0;
  uint64_t v65 = 0;
  sub_1DD4DB698(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  a2[1] = *a2;
  *(void *)(a3 + 8) = *(void *)a3;
  uint64_t v37 = v66;
  uint64_t v36 = v67;
  if (v67 == v66)
  {
    uint64_t v37 = v67;
  }
  else
  {
    unint64_t v38 = 0;
    do
    {
      if (!*((unsigned char *)v69 + v38))
      {
        double v40 = (void *)a2[1];
        unint64_t v39 = a2[2];
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v42 = ((uint64_t)v40 - *a2) >> 3;
          if ((unint64_t)(v42 + 1) >> 61) {
            sub_1DD4BACA0();
          }
          uint64_t v43 = v39 - *a2;
          uint64_t v44 = v43 >> 2;
          if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
            uint64_t v44 = v42 + 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45) {
            uint64_t v46 = (char *)sub_1DD4BAF80((uint64_t)(a2 + 2), v45);
          }
          else {
            uint64_t v46 = 0;
          }
          uint64_t v47 = &v46[8 * v42];
          *(void *)uint64_t v47 = v37[v38];
          long long v41 = v47 + 8;
          double v49 = (char *)*a2;
          double v48 = (char *)a2[1];
          if (v48 != (char *)*a2)
          {
            do
            {
              uint64_t v50 = *((void *)v48 - 1);
              v48 -= 8;
              *((void *)v47 - 1) = v50;
              v47 -= 8;
            }
            while (v48 != v49);
            double v48 = (char *)*a2;
          }
          *a2 = (uint64_t)v47;
          a2[1] = (uint64_t)v41;
          a2[2] = (uint64_t)&v46[8 * v45];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *double v40 = v37[v38];
          long long v41 = v40 + 1;
        }
        a2[1] = (uint64_t)v41;
        double v51 = __p;
        double v53 = *(_DWORD **)(a3 + 8);
        unint64_t v52 = *(void *)(a3 + 16);
        if ((unint64_t)v53 >= v52)
        {
          double v55 = *(_DWORD **)a3;
          uint64_t v56 = ((uint64_t)v53 - *(void *)a3) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            sub_1DD4BACA0();
          }
          uint64_t v58 = v52 - (void)v55;
          if (v58 >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            double v60 = (char *)sub_1DD4BB6B8(a3 + 16, v59);
            double v55 = *(_DWORD **)a3;
            double v53 = *(_DWORD **)(a3 + 8);
          }
          else
          {
            double v60 = 0;
          }
          double v61 = &v60[4 * v56];
          *(_DWORD *)double v61 = v51[v38];
          float v54 = v61 + 4;
          while (v53 != v55)
          {
            int v62 = *--v53;
            *((_DWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          *(void *)a3 = v61;
          *(void *)(a3 + 8) = v54;
          *(void *)(a3 + 16) = &v60[4 * v59];
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          _DWORD *v53 = *((_DWORD *)__p + v38);
          float v54 = v53 + 1;
        }
        *(void *)(a3 + 8) = v54;
        uint64_t v37 = v66;
        uint64_t v36 = v67;
      }
      ++v38;
    }
    while (v38 < v36 - v37);
  }
  if (__p)
  {
    double v64 = __p;
    operator delete(__p);
    uint64_t v37 = v66;
  }
  if (v37)
  {
    double v67 = v37;
    operator delete(v37);
  }
  if (v69)
  {
    float v70 = (char *)v69;
    operator delete(v69);
  }
}

void sub_1DD4DB4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4DB508(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      sub_1DD4BACA0();
    }
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = operator new(__sz);
    int v7 = &v5[(void)v6 - v2];
    unint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

uint64_t sub_1DD4DB5C4(uint64_t result)
{
  *(void *)double result = &unk_1F38B01F8;
  *(unsigned char *)(result + 8) = 0;
  return result;
}

char *sub_1DD4DB5E8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_1DD50CBB0(*a2, a2[1], a2[2], a2[3], *a3, a3[3]);
}

uint64_t sub_1DD4DB610()
{
  return 0;
}

void *sub_1DD4DB61C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = sub_1DD4BD410(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4DB67C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4DB698(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = sub_1DD4BB674(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4DB6F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DD4DB714(uint64_t *a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 0x40000000;
  unint64_t v39 = sub_1DD4DBBE0;
  double v40 = &unk_1E6CC8B40;
  long long v41 = xmmword_1DD511F70;
  sub_1DD4DBF70(v37, 9uLL);
  for (uint64_t i = 0; i != 216; i += 24)
    sub_1DD4C1D4C(v37[0] + i, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  sub_1DD4D0490(v36, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  sub_1DD4D0490(&v34, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) - 1);
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3 + 304 * v4;
      uint64_t v6 = *(void *)(v5 + 112);
      uint64_t v7 = v36[0];
      *((void *)v36[0] + v4) = v6;
      if (v4) {
        *((void *)v34 + (v4 - 1)) = v6 - v7[(v4 - 1)];
      }
      sub_1DD4D0B98((uint64_t)&__p, v5);
      sub_1DD4D0C1C(&v44, (char *)&__p);
      uint64_t v8 = 0;
      unint64_t v9 = (uint64_t *)v37[0];
      do
      {
        uint64_t v10 = *v9;
        v9 += 3;
        *(double *)(v10 + 8 * v4) = *(double *)&(&v44)[v8] * *(double *)&qword_1DD511F80[v8];
        ++v8;
      }
      while (v8 != 9);
      ++v4;
      uint64_t v3 = *a1;
    }
    while (0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) > v4);
  }
  std::__sort<std::__less<long long,long long> &,long long *>();
  uint64_t v11 = *(void *)((char *)v34 + (((v35 - (unsigned char *)v34) >> 1) & 0xFFFFFFFFFFFFFFF8));
  sub_1DD4BD398(&__p, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  if (v43 - (unsigned char *)__p >= 1) {
    bzero(__p, 8 * (((unint64_t)(v43 - (unsigned char *)__p) >> 3) - ((unint64_t)(v43 - (unsigned char *)__p) > 7)) + 8);
  }
  for (uint64_t j = 0; j != 9; ++j)
  {
    int v31 = 0;
    float v32 = 0;
    uint64_t v33 = 0;
    size_t v13 = (void *)(v37[0] + 24 * j);
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    uint64_t v46 = 0;
    sub_1DD4DBC14(v13, &v31, 1);
    sub_1DD4DBC14(v13, &v44, 0);
    double v15 = v31;
    double v14 = v32;
    size_t v16 = v44;
    if (v32 == v31)
    {
      if (!v44) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v17 = v32 - v31;
      if (v17 <= 1) {
        unint64_t v17 = 1;
      }
      char v18 = (double *)v44;
      do
      {
        double v19 = *v18++;
        *double v15 = (*v15 + v19) * 0.5;
        ++v15;
        --v17;
      }
      while (v17);
    }
    unint64_t v45 = v16;
    operator delete(v16);
    double v14 = v31;
    if (v32 == v31)
    {
LABEL_25:
      if (!v14) {
        continue;
      }
      goto LABEL_26;
    }
    uint64_t v20 = 0;
    unint64_t v21 = v32 - v31;
    unint64_t v22 = (double *)__p;
    if (v21 <= 1) {
      unint64_t v21 = 1;
    }
    do
    {
      v22[v20] = v22[v20] + v14[v20] * v14[v20];
      ++v20;
    }
    while (v21 != v20);
LABEL_26:
    float v32 = v14;
    operator delete(v14);
  }
  double v23 = 1.0;
  if (v43 == __p)
  {
    double v27 = -1.0;
  }
  else
  {
    uint64_t v24 = 0;
    int v25 = 0;
    unint64_t v26 = (v43 - (unsigned char *)__p) >> 3;
    if (v26 <= 1) {
      unint64_t v26 = 1;
    }
    double v27 = -1.0;
    do
    {
      if (*((double *)__p + v24) > v27)
      {
        double v27 = *((double *)__p + v24);
        int v25 = v24;
      }
      ++v24;
    }
    while (v26 != v24);
    if (v25) {
      double v23 = (double)v11 / (double)(uint64_t)(*((void *)v36[0] + v25) - *((void *)v36[0] + v25 - 1));
    }
  }
  long double v28 = log(v23 * (v27 * v23));
  double v29 = v39((uint64_t)v38, v28);
  if (__p)
  {
    uint64_t v43 = __p;
    operator delete(__p);
  }
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  uint64_t v44 = (void **)v37;
  sub_1DD4BDB34(&v44);
  return v29;
}

void sub_1DD4DBB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  *(void *)(v29 - 160) = &a19;
  sub_1DD4BDB34((void ***)(v29 - 160));
  _Unwind_Resume(a1);
}

long double sub_1DD4DBBE0(uint64_t a1, double a2)
{
  return 1.0 / (exp(-(a2 - *(double *)(a1 + 32)) / *(double *)(a1 + 40)) + 1.0);
}

void sub_1DD4DBC14(void *a1, void *a2, int a3)
{
  sub_1DD4C1D4C((uint64_t)a2, (uint64_t)(a1[1] - *a1) >> 3);
  if (a3)
  {
    uint64_t v6 = &v34;
    uint64_t v7 = &v35;
    uint64_t v8 = v36;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 0x40000000;
    void v36[2] = sub_1DD4DBEBC;
    v36[3] = &unk_1E6CC8B60;
    void v36[4] = a1;
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 0x40000000;
    unint64_t v9 = &unk_1F38B0910;
    int v25 = v32;
    uint64_t v10 = &v33;
    uint64_t v11 = &unk_1E6CC8B80;
    unint64_t v12 = sub_1DD4DBED4;
    size_t v13 = a2;
  }
  else
  {
    unint64_t v9 = v26;
    uint64_t v6 = &v28;
    uint64_t v7 = &v29;
    uint64_t v8 = v31;
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 0x40000000;
    v31[2] = sub_1DD4DBEF8;
    v31[3] = &unk_1E6CC8BC0;
    _OWORD v31[4] = a1;
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 0x40000000;
    int v25 = v30;
    _OWORD v30[2] = sub_1DD4DBF2C;
    float v30[3] = &unk_1E6CC8BE0;
    v30[4] = a2;
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 0x40000000;
    uint64_t v10 = &v27;
    uint64_t v11 = &unk_1E6CC8C00;
    unint64_t v12 = sub_1DD4DBF58;
    size_t v13 = a1;
  }
  *uint64_t v10 = (uint64_t)v12;
  *uint64_t v6 = (uint64_t)v11;
  *uint64_t v7 = (uint64_t)v13;
  if (a1[1] != *a1)
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = 0;
      double v16 = 0.0;
      char v17 = 1;
      do
      {
        uint64_t v18 = v15;
        char v19 = v17;
        double v20 = dbl_1DD511FC8[v15];
        uint64_t v21 = (v14 - v15);
        double v22 = ((double (*)(void *, uint64_t))v8[2])(v8, v21);
        char v17 = 0;
        double v16 = v16 + v20 * v22;
        uint64_t v15 = 1;
      }
      while ((v19 & 1) != 0);
      double v23 = dbl_1DD511FD8[v18];
      double v24 = v16 - v23 * ((double (*)(void *, uint64_t))v25[2])(v25, v21);
      *(double *)(*a2 + 8 * ((uint64_t (*)(void *, unint64_t))v9[2])(v9, v14++)) = v24;
    }
    while (v14 < (uint64_t)(a1[1] - *a1) >> 3);
  }
}

double sub_1DD4DBEBC(uint64_t a1, int a2)
{
  if (a2 >= 0) {
    unsigned int v2 = a2;
  }
  else {
    unsigned int v2 = -a2;
  }
  return *(double *)(**(void **)(a1 + 32) + 8 * v2);
}

double sub_1DD4DBED4(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0.0;
  }
  else {
    return *(double *)(**(void **)(a1 + 32) + 8 * a2);
  }
}

uint64_t sub_1DD4DBEF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_1DD4DBEF8(uint64_t a1, int a2)
{
  uint64_t v2 = **(void **)(a1 + 32);
  uint64_t v3 = (*(void *)(*(void *)(a1 + 32) + 8) - v2) >> 3;
  uint64_t v4 = v3 + a2 - 1;
  uint64_t v5 = v3 + ~(unint64_t)a2;
  if (a2 < 0) {
    uint64_t v5 = v4;
  }
  return *(double *)(v2 + 8 * v5);
}

double sub_1DD4DBF2C(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0.0;
  }
  else {
    return *(double *)(**(void **)(a1 + 32)
  }
                     + 8
                     * (~(unint64_t)a2 + ((*(void *)(*(void *)(a1 + 32) + 8) - **(void **)(a1 + 32)) >> 3)));
}

uint64_t sub_1DD4DBF58(uint64_t a1, uint64_t a2)
{
  return ~a2 + ((uint64_t)(*(void *)(*(void *)(a1 + 32) + 8) - **(void **)(a1 + 32)) >> 3);
}

void *sub_1DD4DBF70(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BD8E0(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DD4DC000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_1DD4DC014(void *result, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = (char *)(a2 + 3);
  do
  {
    int v7 = 0;
    int v8 = 0;
    unint64_t v9 = v6;
    do
    {
      v8 |= (*(unsigned __int8 *)(*result
                                + result[3] * (int)(*(v9 - 2) + (float)(a5 + 0.5))
                                + (int)(*(v9 - 3) + (float)(a4 + 0.5))) < *(unsigned __int8 *)(*result + result[3] * (int)(*v9 + (float)(a5 + 0.5)) + (int)(*(v9 - 1) + (float)(a4 + 0.5)))) << v7++;
      v9 += 4;
    }
    while (v7 != 8);
    *(unsigned char *)(a3 + v5++) = v8;
    v6 += 32;
  }
  while (v5 != 32);
  return result;
}

void sub_1DD4DC0BC(void *a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  sub_1DD4DC1EC((uint64_t)a3, a2[2]);
  if (a2[2])
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      int v8 = (float *)(*a2 + v6);
      float v9 = *v8;
      float v10 = v8[1];
      bzero(v13, 0x20uLL);
      BOOL v11 = v9 < 15.0 || v10 < 15.0;
      if (!v11 && v9 <= (float)(unint64_t)(a1[1] - 16) && v10 <= (float)(unint64_t)(a1[2] - 16)) {
        sub_1DD4DC014(a1, (uint64_t)&inertiaCamMetalLibEnd, (uint64_t)v13, v9, v10);
      }
      v12[0] = v13[0];
      v12[1] = v13[1];
      sub_1DD4DC260(a3, (uint64_t)v12);
      ++v7;
      v6 += 8;
    }
    while (a2[2] > v7);
  }
}

uint64_t sub_1DD4DC1EC(uint64_t result, unint64_t a2)
{
  if (*(void *)(result + 8) < a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1DD4BAAEC(exception, "reserve");
    __cxa_throw(exception, (struct type_info *)off_1E6CC8858, MEMORY[0x1E4FBA1D0]);
  }
  return result;
}

void sub_1DD4DC24C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1DD4DC260(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[2];
  if (v2 >= a1[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1DD4BAAEC(exception, "_count");
    __cxa_throw(exception, (struct type_info *)off_1E6CC8858, MEMORY[0x1E4FBA1D0]);
  }
  uint64_t v3 = (_OWORD *)(*a1 + 32 * v2);
  __n128 result = *(__n128 *)a2;
  long long v5 = *(_OWORD *)(a2 + 16);
  _OWORD *v3 = *(_OWORD *)a2;
  v3[1] = v5;
  ++a1[2];
  return result;
}

void sub_1DD4DC2DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DD4DC2F0()
{
}

uint64_t sub_1DD4DC3EC(uint64_t result)
{
  if (result) {
    JUMPOUT(0x1E01B7750);
  }
  return result;
}

void *sub_1DD4DC408(void *result, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *result + result[3] * (float)(a5 + 0.5) + (float)(a4 + 0.5);
  uint64_t v7 = a2 + 12;
  do
  {
    uint64_t v8 = 0;
    char v9 = 0;
    do
    {
      char v9 = (4 * v9) | (2
                     * (*(unsigned __int8 *)(v6 + *(int *)(v7 + v8 - 4)) < *(unsigned __int8 *)(v6 + *(int *)(v7 + v8)))) | (*(unsigned __int8 *)(v6 + *(int *)(v7 + v8 + 4)) < *(unsigned __int8 *)(v6 + *(int *)(v7 + v8 + 8)));
      v8 += 16;
    }
    while (v8 != 64);
    *(unsigned char *)(a3 + v5++) = v9;
    v7 += 64;
  }
  while (v5 != 32);
  return result;
}

void sub_1DD4DC498(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  sub_1DD4DC1EC((uint64_t)a4, a3[2]);
  if (a3[2])
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      float v10 = (float *)(*a3 + v8);
      float v11 = *v10;
      float v12 = v10[1];
      bzero(v15, 0x20uLL);
      BOOL v13 = v11 < 15.0 || v12 < 15.0;
      if (!v13 && v11 <= (float)(unint64_t)(a1[1] - 16) && v12 <= (float)(unint64_t)(a1[2] - 16)) {
        sub_1DD4DC408(a1, a2, (uint64_t)v15, v11, v12);
      }
      v14[0] = v15[0];
      v14[1] = v15[1];
      sub_1DD4DC260(a4, (uint64_t)v14);
      ++v9;
      v8 += 8;
    }
    while (a3[2] > v9);
  }
}

uint64_t sub_1DD4DC5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a5;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  return a1;
}

void sub_1DD4DC608(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4DC62C(uint64_t a1)
{
  while (1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2 == *(void *)(a1 + 32)) {
      break;
    }
    uint64_t v3 = *(void **)(v2 - 8);
    *(void *)(a1 + 40) = v2 - 8;
    sub_1DD4F825C(v3);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  return a1;
}

void **sub_1DD4DC690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 16) && !*(void *)(a1 + 8))
  {
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = a3;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 == *(void *)(a1 + 32))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
  }
  else
  {
    uint64_t v5 = *(void *)(v4 - 8);
    *(void *)(a1 + 40) = v4 - 8;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
    if (v5) {
      return (void **)v5;
    }
  }
  size_t v7 = *(void *)(a1 + 8);
  size_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void **)(a1 + 24);
  return sub_1DD4F8294(v7, v8, v9);
}

uint64_t sub_1DD4DC72C(uint64_t a1, void *a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  unint64_t v7 = ((uint64_t)v6 - v5) >> 3;
  if (v7 >= *(void *)a1)
  {
    sub_1DD4F825C(a2);
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 48);
    if ((unint64_t)v6 >= v8)
    {
      if ((v7 + 1) >> 61) {
        sub_1DD4BACA0();
      }
      uint64_t v10 = v8 - v5;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= v7 + 1) {
        uint64_t v11 = v7 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        BOOL v13 = (char *)sub_1DD4BAF80(a1 + 48, v12);
      }
      else {
        BOOL v13 = 0;
      }
      uint64_t v14 = &v13[8 * v7];
      uint64_t v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = a2;
      unint64_t v9 = v14 + 8;
      char v17 = *(char **)(a1 + 32);
      uint64_t v16 = *(char **)(a1 + 40);
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        uint64_t v16 = *(char **)(a1 + 32);
      }
      *(void *)(a1 + 32) = v14;
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *uint64_t v6 = a2;
      unint64_t v9 = v6 + 1;
    }
    *(void *)(a1 + 40) = v9;
  }
  return pthread_mutex_unlock(v4);
}

void sub_1DD4DC84C(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (*a1 == a1[1])
  {
    *a3 = v5;
    a3[1] = v5;
    a3[2] = a1[2];
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v7 = (void *)*a2;
    uint64_t v8 = sub_1DD4DD9C4(a3, v5);
    uint64_t v9 = a1[1];
    a3[1] = v8;
    CMTime v43 = *(CMTime *)(v8 - 192);
    uint64_t v10 = (_OWORD *)(v5 + 304);
    if (v5 + 304 != v9)
    {
      uint64_t v11 = a2 + 1;
      do
      {
        unint64_t v12 = v10;
        CMTime lhs = *(CMTime *)(v5 + 416);
        CMTime rhs = v43;
        CMTimeSubtract(&v42, &lhs, &rhs);
        BOOL v13 = v11;
        if (v7 != v11)
        {
          if (v7[4] == 0x86BCA1AF286BCA1BLL * ((a3[1] - *a3) >> 4))
          {
            uint64_t v14 = (CMTime *)v7[11];
            uint64_t v15 = (CMTime *)v7[12];
            while (v14 != v15)
            {
              unint64_t v16 = a3[1];
              if (v16 >= a3[2])
              {
                uint64_t v17 = sub_1DD4DDC60(a3, (uint64_t)v12);
              }
              else
              {
                sub_1DD4DDB78((uint64_t)a3, (uint64_t)v12);
                uint64_t v17 = v16 + 304;
              }
              a3[1] = v17;
              sub_1DD4DD880(&v42, v14, &v43, (uint64_t)v12, v17 - 304, (uint64_t)&v39);
              CMTime v43 = v39;
              ++v14;
            }
            uint64_t v18 = (void *)v7[1];
            if (v18)
            {
              do
              {
                BOOL v13 = v18;
                uint64_t v18 = (void *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                BOOL v13 = (void *)v7[2];
                BOOL v19 = *v13 == (void)v7;
                unint64_t v7 = v13;
              }
              while (!v19);
            }
          }
          else
          {
            BOOL v13 = v7;
          }
        }
        unint64_t v20 = a3[1];
        if (v20 >= a3[2])
        {
          uint64_t v33 = sub_1DD4DD9C4(a3, (uint64_t)v12);
        }
        else
        {
          *(_OWORD *)unint64_t v20 = *v12;
          long long v21 = v12[1];
          long long v22 = v12[2];
          long long v23 = v12[3];
          *(_OWORD *)(v20 + 60) = *(_OWORD *)((char *)v12 + 60);
          *(_OWORD *)(v20 + 32) = v22;
          *(_OWORD *)(v20 + 48) = v23;
          *(_OWORD *)(v20 + 16) = v21;
          *(void *)(v20 + 88) = 0;
          *(void *)(v20 + 96) = 0;
          *(void *)(v20 + 80) = 0;
          *(_OWORD *)(v20 + 80) = *(_OWORD *)(v5 + 384);
          *(void *)(v20 + 96) = *(void *)(v5 + 400);
          *(void *)(v5 + 392) = 0;
          *(void *)(v5 + 400) = 0;
          *(void *)(v5 + 384) = 0;
          long long v24 = *(_OWORD *)(v5 + 440);
          long long v25 = *(_OWORD *)(v5 + 456);
          long long v26 = *(_OWORD *)(v5 + 472);
          *(_OWORD *)(v20 + 120) = *(_OWORD *)(v5 + 424);
          *(_OWORD *)(v20 + 168) = v26;
          *(_OWORD *)(v20 + 152) = v25;
          *(_OWORD *)(v20 + 136) = v24;
          long long v27 = *(_OWORD *)(v5 + 504);
          long long v28 = *(_OWORD *)(v5 + 520);
          long long v29 = *(_OWORD *)(v5 + 536);
          *(_OWORD *)(v20 + 184) = *(_OWORD *)(v5 + 488);
          *(_OWORD *)(v20 + 232) = v29;
          *(_OWORD *)(v20 + 216) = v28;
          *(_OWORD *)(v20 + 200) = v27;
          long long v30 = *(_OWORD *)(v5 + 568);
          long long v31 = *(_OWORD *)(v5 + 584);
          uint64_t v32 = *(void *)(v5 + 597);
          *(_OWORD *)(v20 + 248) = *(_OWORD *)(v5 + 552);
          *(void *)(v20 + 293) = v32;
          *(_OWORD *)(v20 + 264) = v30;
          *(_OWORD *)(v20 + 280) = v31;
          *(_OWORD *)(v20 + 104) = *(_OWORD *)(v5 + 408);
          uint64_t v33 = v20 + 304;
        }
        uint64_t v34 = (CMTime *)(v5 + 416);
        a3[1] = v33;
        CMTime v37 = *v34;
        CMTime v36 = v43;
        CMTimeSubtract(&time1, &v37, &v36);
        CMTime v35 = v42;
        if (CMTimeCompare(&time1, &v35)) {
          sub_1DD4DD880(&v42, v34, &v43, a3[1] - 304, a3[1] - 304, (uint64_t)&v39);
        }
        CMTime v43 = *(CMTime *)(a3[1] - 192);
        uint64_t v10 = v12 + 19;
        unint64_t v7 = v13;
        uint64_t v5 = (uint64_t)v12;
      }
      while (v12 + 19 != (_OWORD *)a1[1]);
    }
  }
}

void sub_1DD4DCB80(_Unwind_Exception *a1)
{
  *(void *)(v2 - 112) = v1;
  sub_1DD4BEE80((void ***)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1DD4DCBAC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  long long v29 = 0;
  long long v30 = 0;
  __p = 0;
  if (v5 != v6)
  {
    sub_1DD4BED90(&__p, 0x86BCA1AF286BCA1BLL * ((v6 - v5) >> 4));
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    if (*a1 != v8)
    {
      uint64_t v9 = v29;
      do
      {
        uint64_t v10 = (long long *)(v7 + 112);
        if (v9 >= v30)
        {
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (unsigned char *)__p) >> 3);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1DD4BACA0();
          }
          if (0x5555555555555556 * ((v30 - (unsigned char *)__p) >> 3) > v13) {
            unint64_t v13 = 0x5555555555555556 * ((v30 - (unsigned char *)__p) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v30 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
            unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            uint64_t v15 = (char *)sub_1DD4BD934((uint64_t)&v30, v14);
          }
          else {
            uint64_t v15 = 0;
          }
          unint64_t v16 = &v15[24 * v12];
          long long v17 = *v10;
          *((void *)v16 + 2) = *(void *)(v7 + 128);
          *(_OWORD *)unint64_t v16 = v17;
          BOOL v19 = (char *)__p;
          uint64_t v18 = v29;
          unint64_t v20 = v16;
          if (v29 != __p)
          {
            do
            {
              long long v21 = *(_OWORD *)(v18 - 24);
              *((void *)v20 - 1) = *((void *)v18 - 1);
              *(_OWORD *)(v20 - 24) = v21;
              v20 -= 24;
              v18 -= 24;
            }
            while (v18 != v19);
            uint64_t v18 = (char *)__p;
          }
          uint64_t v9 = v16 + 24;
          __p = v20;
          long long v29 = v16 + 24;
          long long v30 = &v15[24 * v14];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          long long v11 = *v10;
          *((void *)v9 + 2) = *(void *)(v7 + 128);
          *(_OWORD *)uint64_t v9 = v11;
          v9 += 24;
        }
        long long v29 = v9;
        v7 += 304;
      }
      while (v7 != v8);
    }
  }
  sub_1DD4DCE54((uint64_t *)&__p, a2, (uint64_t)a4);
  memset(v25, 0, sizeof(v25));
  sub_1DD4BEF24(v25, *a1, a1[1], 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4));
  sub_1DD4DC84C(v25, a4, (uint64_t *)&v26);
  sub_1DD4BF1AC(a3);
  *(_OWORD *)a3 = v26;
  a3[2] = v27;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  long long v31 = (void **)&v26;
  sub_1DD4BEE80(&v31);
  long long v31 = (void **)v25;
  sub_1DD4BEE80(&v31);
  if (__p)
  {
    long long v29 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1DD4DCE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4DCE54(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > 1)
  {
    double v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    sub_1DD4BE8C4(&v55, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    unint64_t v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v55) >> 3));
    if (v56 == v55) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    sub_1DD4DDE20(v55, v56, v6, 1);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = a3 + 8;
    uint64_t v7 = *a1;
    uint64_t v9 = v55;
    uint64_t v8 = v56;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) >= 2 && v55 != v56)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 1;
      do
      {
        if (v9 == v8) {
          break;
        }
        unint64_t v13 = (long long *)(v7 + 24 * v12);
        unint64_t v14 = (long long *)((char *)v13 - 24);
        while (1)
        {
          long long v15 = *(_OWORD *)&v9->value;
          time1.CMTimeEpoch epoch = v9->epoch;
          *(_OWORD *)&time1.value = v15;
          long long v16 = *v14;
          time2.CMTimeEpoch epoch = *((void *)v13 - 1);
          *(_OWORD *)&time2.value = v16;
          if (CMTimeCompare(&time1, &time2) > 0) {
            break;
          }
          if (++v9 == v56) {
            goto LABEL_45;
          }
        }
        if (v9 == v56) {
          break;
        }
        long long v17 = *(_OWORD *)&v9->value;
        v52.CMTimeEpoch epoch = v9->epoch;
        *(_OWORD *)&v52.value = v17;
        long long v18 = *v13;
        v51.CMTimeEpoch epoch = *((void *)v13 + 2);
        *(_OWORD *)&v51.value = v18;
        if (CMTimeCompare(&v52, &v51) < 0)
        {
          unint64_t v50 = v11 + v12;
          uint64_t v58 = &v50;
          BOOL v19 = sub_1DD4C13AC((uint64_t **)a3, &v50, (uint64_t)&unk_1DD511FE8, &v58);
          unint64_t v20 = (CMTimeEpoch *)v19;
          uint64_t v44 = v11;
          long long v21 = *v14;
          v19[7] = (uint64_t *)*((void *)v13 - 1);
          *(_OWORD *)(v19 + 5) = v21;
          long long v22 = *v13;
          v19[10] = (uint64_t *)*((void *)v13 + 2);
          *((_OWORD *)v19 + 4) = v22;
          if (v9 != v56)
          {
            long long v23 = v19 + 5;
            long long v24 = v19 + 8;
            long long v25 = (char **)(v19 + 11);
            uint64_t v45 = (uint64_t)(v19 + 13);
            do
            {
              long long v26 = *(_OWORD *)&v9->value;
              v49.CMTimeEpoch epoch = v9->epoch;
              *(_OWORD *)&v49.value = v26;
              *(_OWORD *)&v48.value = *v23;
              v48.CMTimeEpoch epoch = v20[7];
              if (CMTimeCompare(&v49, &v48) < 1) {
                break;
              }
              long long v27 = *(_OWORD *)&v9->value;
              v47.CMTimeEpoch epoch = v9->epoch;
              *(_OWORD *)&v47.value = v27;
              *(_OWORD *)&v46.value = *v24;
              v46.CMTimeEpoch epoch = v20[10];
              if ((CMTimeCompare(&v47, &v46) & 0x80000000) == 0) {
                break;
              }
              unint64_t v29 = v20[12];
              unint64_t v28 = v20[13];
              if (v29 >= v28)
              {
                unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)*v25) >> 3);
                unint64_t v33 = v32 + 1;
                if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_1DD4BACA0();
                }
                unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)*v25) >> 3);
                if (2 * v34 > v33) {
                  unint64_t v33 = 2 * v34;
                }
                if (v34 >= 0x555555555555555) {
                  unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v35 = v33;
                }
                if (v35) {
                  CMTime v36 = (char *)sub_1DD4BD934(v45, v35);
                }
                else {
                  CMTime v36 = 0;
                }
                CMTime v37 = &v36[24 * v32];
                long long v38 = *(_OWORD *)&v9->value;
                *((void *)v37 + 2) = v9->epoch;
                *(_OWORD *)CMTime v37 = v38;
                double v40 = (char *)v20[11];
                CMTime v39 = (char *)v20[12];
                CMTimeEpoch v41 = (CMTimeEpoch)v37;
                if (v39 != v40)
                {
                  do
                  {
                    long long v42 = *(_OWORD *)(v39 - 24);
                    *(void *)(v41 - 8) = *((void *)v39 - 1);
                    *(_OWORD *)(v41 - 24) = v42;
                    v41 -= 24;
                    v39 -= 24;
                  }
                  while (v39 != v40);
                  CMTime v39 = *v25;
                }
                CMTimeEpoch v31 = (CMTimeEpoch)(v37 + 24);
                v20[11] = v41;
                v20[12] = (CMTimeEpoch)(v37 + 24);
                v20[13] = (CMTimeEpoch)&v36[24 * v35];
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                long long v30 = *(_OWORD *)&v9->value;
                *(void *)(v29 + 16) = v9->epoch;
                *(_OWORD *)unint64_t v29 = v30;
                CMTimeEpoch v31 = v29 + 24;
              }
              v20[12] = v31;
              ++v9;
            }
            while (v9 != v56);
          }
          uint64_t v11 = v44 - 0x5555555555555555 * ((v20[12] - v20[11]) >> 3);
        }
        ++v12;
        uint64_t v7 = *a1;
        uint64_t v8 = v56;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) && v9 != v56);
LABEL_45:
      uint64_t v9 = v55;
    }
    if (v9)
    {
      uint64_t v56 = v9;
      operator delete(v9);
    }
  }
  else
  {
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)a3 = a3 + 8;
  }
}

void sub_1DD4DD248(_Unwind_Exception *a1)
{
  sub_1DD4C1348(v1, *(void **)(v1 + 8));
  uint64_t v4 = *(void **)(v2 - 128);
  if (v4)
  {
    *(void *)(v2 - 120) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1DD4DD28C(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  unint64_t v6 = (a1[1] - *a1) >> 3;
  uint64_t v7 = a2[1] - *a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v6 == v7 >> 3)
  {
    sub_1DD4D6F8C((void **)a3, v6);
    uint64_t v10 = *a1;
    if (a1[1] != *a1)
    {
      unint64_t v11 = 0;
      unint64_t v12 = (void *)(a3 + 16);
      unint64_t v13 = *(double **)(a3 + 8);
      do
      {
        double v14 = *(double *)(v10 + 8 * v11) + a4 * (*(double *)(*a2 + 8 * v11) - *(double *)(v10 + 8 * v11));
        if ((unint64_t)v13 >= *v12)
        {
          long long v16 = *(double **)a3;
          uint64_t v17 = ((uint64_t)v13 - *(void *)a3) >> 3;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61) {
            sub_1DD4BACA0();
          }
          uint64_t v19 = *v12 - (void)v16;
          if (v19 >> 2 > v18) {
            unint64_t v18 = v19 >> 2;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            long long v21 = (char *)sub_1DD4BAF80(a3 + 16, v20);
            long long v16 = *(double **)a3;
            unint64_t v13 = *(double **)(a3 + 8);
          }
          else
          {
            long long v21 = 0;
          }
          long long v22 = (double *)&v21[8 * v17];
          *long long v22 = v14;
          long long v15 = v22 + 1;
          while (v13 != v16)
          {
            uint64_t v23 = *((void *)v13-- - 1);
            *((void *)v22-- - 1) = v23;
          }
          *(void *)a3 = v22;
          *(void *)(a3 + 8) = v15;
          *(void *)(a3 + 16) = &v21[8 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *unint64_t v13 = v14;
          long long v15 = v13 + 1;
        }
        *(void *)(a3 + 8) = v15;
        ++v11;
        uint64_t v10 = *a1;
        unint64_t v13 = v15;
      }
      while (v11 < (a1[1] - *a1) >> 3);
    }
  }
}

void sub_1DD4DD3F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DD4DD41C@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  uint64_t v7 = result[1];
  if (*result == v7)
  {
    *a4 = v6;
    a4[1] = v6;
    a4[2] = result[2];
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    unint64_t v11 = a2 + 1;
    uint64_t v10 = (void *)*a2;
    if ((void *)*a2 == a2 + 1)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = 0;
      do
      {
        unint64_t v13 = (void *)v10[1];
        double v14 = v10;
        if (v13)
        {
          do
          {
            long long v15 = v13;
            unint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            long long v15 = (void *)v14[2];
            BOOL v16 = *v15 == (void)v14;
            double v14 = v15;
          }
          while (!v16);
        }
        v12 -= 0x5555555555555555 * ((uint64_t)(v10[12] - v10[11]) >> 3);
        uint64_t v10 = v15;
      }
      while (v15 != v11);
    }
    sub_1DD4DF1DC(a4, v12 - 0x5555555555555555 * ((v7 - v6) >> 3));
    uint64_t v17 = (void *)*a2;
    uint64_t v18 = *v4;
    __n128 result = (uint64_t *)sub_1DD4DF290(a4, *v4);
    unint64_t v29 = v11;
    long long v30 = v4;
    while (1)
    {
      v18 += 24;
      if (v18 == v4[1]) {
        break;
      }
      uint64_t v19 = v11;
      if (v17 != v11)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
        if (v17[4] == v20)
        {
          long long v21 = (long long *)v17[11];
          long long v22 = (long long *)v17[12];
          if (v21 != v22)
          {
            unint64_t v23 = v20 - 1;
            long long v24 = v17 + 5;
            do
            {
              long long v25 = *v21;
              lhs.CMTimeEpoch epoch = *((void *)v21 + 2);
              *(_OWORD *)&lhs.value = v25;
              *(_OWORD *)&rhs.value = *v24;
              rhs.CMTimeEpoch epoch = v17[7];
              CMTimeSubtract(&v36, &lhs, &rhs);
              CMTime v32 = *(CMTime *)(v17 + 8);
              *(_OWORD *)&v31.value = *v24;
              v31.CMTimeEpoch epoch = v17[7];
              CMTimeSubtract(&v33, &v32, &v31);
              CMTime time = v36;
              double Seconds = CMTimeGetSeconds(&time);
              CMTime v37 = v33;
              Float64 v27 = CMTimeGetSeconds(&v37);
              sub_1DD4DF3D0(a3, *a4 + 24 * v23, v18, Seconds / v27);
              sub_1DD4DF290(a4, (uint64_t)&time);
              if (time.value)
              {
                *(void *)&time.timescale = time.value;
                operator delete((void *)time.value);
              }
              long long v21 = (long long *)((char *)v21 + 24);
            }
            while (v21 != v22);
          }
          unint64_t v28 = (void *)v17[1];
          unint64_t v11 = v29;
          uint64_t v4 = v30;
          if (v28)
          {
            do
            {
              uint64_t v19 = v28;
              unint64_t v28 = (void *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              uint64_t v19 = (void *)v17[2];
              BOOL v16 = *v19 == (void)v17;
              uint64_t v17 = v19;
            }
            while (!v16);
          }
        }
        else
        {
          uint64_t v19 = v17;
        }
      }
      __n128 result = (uint64_t *)sub_1DD4DF290(a4, v18);
      uint64_t v17 = v19;
    }
  }
  return result;
}

void sub_1DD4DD6CC(_Unwind_Exception *a1)
{
  *(void *)(v2 - 112) = v1;
  sub_1DD4BDB34((void ***)(v2 - 112));
  _Unwind_Resume(a1);
}

void *sub_1DD4DD714@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  sub_1DD4DCE54(a1, a3, (uint64_t)a5);
  v15[0] = &unk_1F38B06C8;
  v15[1] = sub_1DD4DD28C;
  v15[3] = v15;
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  sub_1DD4DF49C((uint64_t)v14, (uint64_t)v15);
  sub_1DD4DD41C((uint64_t *)&v9, a5, (uint64_t)v14, (uint64_t *)&v11);
  sub_1DD4C8598(a4);
  *(_OWORD *)a4 = v11;
  a4[2] = v12;
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  unint64_t v13 = (void **)&v11;
  sub_1DD4BDB34(&v13);
  sub_1DD4DF158(v14);
  unint64_t v13 = (void **)&v9;
  sub_1DD4BDB34(&v13);
  return sub_1DD4DF158(v15);
}

void sub_1DD4DD840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18)
{
  sub_1DD4DF158(&a18);
  a17 = (void **)&a9;
  sub_1DD4BDB34(&a17);
  sub_1DD4DF158((void *)(v19 - 72));
  sub_1DD4C1348(v18, *(void **)(v18 + 8));
  _Unwind_Resume(a1);
}

void sub_1DD4DD880(CMTime *a1@<X0>, CMTime *a2@<X1>, CMTime *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CMTime lhs = *a2;
  CMTime v15 = *a3;
  CMTimeSubtract(&v17, &lhs, &v15);
  CMTime time = v17;
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v18 = *a1;
  double v12 = Seconds / CMTimeGetSeconds(&v18);
  sub_1DD4D1268((uint64_t)&time, a4);
  for (uint64_t i = 0; i != 72; i += 8)
    *(double *)((char *)&time.value + i) = v12 * *(double *)((char *)&time.value + i);
  sub_1DD4D1308(a5, (long long *)&time.value);
  long long v14 = *(_OWORD *)&a2->value;
  *(void *)(a5 + 128) = a2->epoch;
  *(_OWORD *)(a5 + 112) = v14;
  *(_OWORD *)a6 = *(_OWORD *)&a2->value;
  *(void *)(a6 + 16) = a2->epoch;
}

uint64_t sub_1DD4DD9C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xD79435E50D7943) {
    sub_1DD4BACA0();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x6BCA1AF286BCA1) {
    unint64_t v9 = 0xD79435E50D7943;
  }
  else {
    unint64_t v9 = v5;
  }
  v26[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1DD4BC400(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[304 * v4];
  v26[0] = v10;
  v26[1] = v11;
  v26[3] = &v10[304 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 10) = 0;
  *((_OWORD *)v11 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v11 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  long long v15 = *(_OWORD *)(a2 + 136);
  long long v16 = *(_OWORD *)(a2 + 152);
  long long v17 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v11 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v11 + 168) = v17;
  *(_OWORD *)(v11 + 152) = v16;
  *(_OWORD *)(v11 + 136) = v15;
  long long v18 = *(_OWORD *)(a2 + 200);
  long long v19 = *(_OWORD *)(a2 + 216);
  long long v20 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v11 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v11 + 232) = v20;
  *(_OWORD *)(v11 + 216) = v19;
  *(_OWORD *)(v11 + 200) = v18;
  long long v21 = *(_OWORD *)(a2 + 264);
  long long v22 = *(_OWORD *)(a2 + 280);
  uint64_t v23 = *(void *)(a2 + 293);
  *(_OWORD *)(v11 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(v11 + 293) = v23;
  *(_OWORD *)(v11 + 264) = v21;
  *(_OWORD *)(v11 + 280) = v22;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(a2 + 104);
  void v26[2] = v11 + 304;
  sub_1DD4BC388(a1, v26);
  uint64_t v24 = a1[1];
  sub_1DD4BC608((uint64_t)v26);
  return v24;
}

void sub_1DD4DDB64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BC608((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1DD4DDB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  sub_1DD4BB060((void *)(v4 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 6);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 152) = v10;
  *(_OWORD *)(v4 + 136) = v9;
  *(_OWORD *)(v4 + 120) = v8;
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  long long v13 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v4 + 216) = v13;
  *(_OWORD *)(v4 + 200) = v12;
  *(_OWORD *)(v4 + 184) = v11;
  __n128 result = *(__n128 *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 264);
  long long v16 = *(_OWORD *)(a2 + 280);
  *(void *)(v4 + 293) = *(void *)(a2 + 293);
  *(_OWORD *)(v4 + 264) = v15;
  *(_OWORD *)(v4 + 280) = v16;
  *(__n128 *)(v4 + 248) = result;
  *(void *)(a1 + 8) = v4 + 304;
  return result;
}

void sub_1DD4DDC58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4DDC60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xD79435E50D7943) {
    sub_1DD4BACA0();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x6BCA1AF286BCA1) {
    unint64_t v9 = 0xD79435E50D7943;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v30 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1DD4BC400(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[304 * v4];
  v27[0] = v10;
  v27[1] = v11;
  unint64_t v28 = v11;
  unint64_t v29 = &v10[304 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 1) = v12;
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 10) = 0;
  sub_1DD4BB060((void *)v11 + 10, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 6);
  long long v15 = &v10[304 * v4];
  *(_OWORD *)(v15 + 104) = *(_OWORD *)(a2 + 104);
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  long long v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v15 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v15 + 152) = v18;
  *(_OWORD *)(v15 + 136) = v17;
  *(_OWORD *)(v15 + 120) = v16;
  long long v19 = *(_OWORD *)(a2 + 184);
  long long v20 = *(_OWORD *)(a2 + 200);
  long long v21 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v15 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v15 + 216) = v21;
  *(_OWORD *)(v15 + 200) = v20;
  *(_OWORD *)(v15 + 184) = v19;
  long long v22 = *(_OWORD *)(a2 + 264);
  long long v23 = *(_OWORD *)(a2 + 280);
  uint64_t v24 = *(void *)(a2 + 293);
  *(_OWORD *)(v15 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(v15 + 293) = v24;
  *(_OWORD *)(v15 + 264) = v22;
  *(_OWORD *)(v15 + 280) = v23;
  v28 += 304;
  sub_1DD4BC388(a1, v27);
  uint64_t v25 = a1[1];
  sub_1DD4BC608((uint64_t)v27);
  return v25;
}

void sub_1DD4DDE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BC608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DD4DDE20(CMTime *a1, CMTime *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v9 = a2;
    long long v10 = a2 - 1;
    long long v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (char *)v9 - (char *)v11;
          uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                long long v65 = *(_OWORD *)&a2[-1].value;
                time1.CMTimeEpoch epoch = a2[-1].epoch;
                *(_OWORD *)&time1.value = v65;
                long long v66 = *(_OWORD *)&a1->value;
                time2.CMTimeEpoch epoch = a1->epoch;
                *(_OWORD *)&time2.value = v66;
                if (CMTimeCompare(&time1, &time2) < 0)
                {
                  long long v67 = *(_OWORD *)&a1->value;
                  time1.CMTimeEpoch epoch = a1->epoch;
                  *(_OWORD *)&time1.value = v67;
                  long long v68 = *(_OWORD *)&v10->value;
                  a1->CMTimeEpoch epoch = a2[-1].epoch;
                  *(_OWORD *)&a1->value = v68;
                  long long v69 = *(_OWORD *)&time1.value;
                  a2[-1].CMTimeEpoch epoch = time1.epoch;
                  *(_OWORD *)&v10->value = v69;
                }
                break;
              case 3:
                sub_1DD4DEB2C(a1, a1 + 1, v10);
                break;
              case 4:
                sub_1DD4DEF3C(a1, a1 + 1, a1 + 2, v10);
                break;
              case 5:
                sub_1DD4DE9A0(a1, a1 + 1, a1 + 2, a1 + 3, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 575)
          {
            float v70 = a1 + 1;
            BOOL v72 = a1 == v9 || v70 == v9;
            if (a4)
            {
              if (!v72)
              {
                uint64_t v73 = 0;
                double v74 = a1;
                do
                {
                  double v75 = v74;
                  double v74 = v70;
                  long long v76 = *(_OWORD *)&v70->value;
                  time1.CMTimeEpoch epoch = v70->epoch;
                  *(_OWORD *)&time1.value = v76;
                  long long v77 = *(_OWORD *)&v75->value;
                  time2.CMTimeEpoch epoch = v75->epoch;
                  *(_OWORD *)&time2.value = v77;
                  if (CMTimeCompare(&time1, &time2) < 0)
                  {
                    v131.CMTimeEpoch epoch = v74->epoch;
                    *(_OWORD *)&v131.value = *(_OWORD *)&v74->value;
                    uint64_t v78 = v73;
                    while (1)
                    {
                      float v79 = (char *)a1 + v78;
                      *(_OWORD *)(v79 + 24) = *(_OWORD *)((char *)&a1->value + v78);
                      *((void *)v79 + 5) = *(CMTimeEpoch *)((char *)&a1->epoch + v78);
                      if (!v78) {
                        break;
                      }
                      CMTime time1 = v131;
                      CMTimeEpoch v80 = *((void *)v79 - 1);
                      *(_OWORD *)&time2.value = *(_OWORD *)(v79 - 24);
                      time2.CMTimeEpoch epoch = v80;
                      v78 -= 24;
                      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
                      {
                        uint64_t v81 = (uint64_t)&a1[1] + v78;
                        goto LABEL_77;
                      }
                    }
                    uint64_t v81 = (uint64_t)a1;
LABEL_77:
                    *(void *)(v81 + 16) = v131.epoch;
                    *(_OWORD *)uint64_t v81 = *(_OWORD *)&v131.value;
                  }
                  float v70 = v74 + 1;
                  v73 += 24;
                }
                while (&v74[1] != a2);
              }
            }
            else if (!v72)
            {
              do
              {
                float64x2_t v119 = a1;
                a1 = v70;
                long long v120 = *(_OWORD *)&v70->value;
                time1.CMTimeEpoch epoch = v70->epoch;
                *(_OWORD *)&time1.value = v120;
                long long v121 = *(_OWORD *)&v119->value;
                time2.CMTimeEpoch epoch = v119->epoch;
                *(_OWORD *)&time2.value = v121;
                if (CMTimeCompare(&time1, &time2) < 0)
                {
                  v134.CMTimeEpoch epoch = a1->epoch;
                  *(_OWORD *)&v134.value = *(_OWORD *)&a1->value;
                  double v122 = a1;
                  do
                  {
                    double v123 = v122 - 1;
                    *(_OWORD *)&v122->value = *(_OWORD *)&v122[-1].value;
                    v122->CMTimeEpoch epoch = v122[-1].epoch;
                    CMTime time1 = v134;
                    CMTimeEpoch epoch = v122[-2].epoch;
                    *(_OWORD *)&time2.value = *(_OWORD *)&v122[-2].value;
                    time2.CMTimeEpoch epoch = epoch;
                    int32_t v125 = CMTimeCompare(&time1, &time2);
                    double v122 = v123;
                  }
                  while (v125 < 0);
                  v123->CMTimeEpoch epoch = v134.epoch;
                  *(_OWORD *)&v123->value = *(_OWORD *)&v134.value;
                }
                float v70 = a1 + 1;
              }
              while (&a1[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v9)
            {
              int64_t v82 = (unint64_t)(v13 - 2) >> 1;
              int64_t v83 = v82;
              do
              {
                int64_t v84 = v83;
                if (v82 >= v83)
                {
                  uint64_t v85 = (2 * v83) | 1;
                  float v86 = &a1[v85];
                  if (2 * v83 + 2 < v13)
                  {
                    long long v87 = *(_OWORD *)&v86->value;
                    time1.CMTimeEpoch epoch = v86->epoch;
                    *(_OWORD *)&time1.value = v87;
                    long long v88 = *(_OWORD *)&v86[1].value;
                    time2.CMTimeEpoch epoch = v86[1].epoch;
                    *(_OWORD *)&time2.value = v88;
                    if (CMTimeCompare(&time1, &time2) < 0)
                    {
                      ++v86;
                      uint64_t v85 = 2 * v84 + 2;
                    }
                  }
                  char v89 = &a1[v84];
                  long long v90 = *(_OWORD *)&v86->value;
                  time1.CMTimeEpoch epoch = v86->epoch;
                  *(_OWORD *)&time1.value = v90;
                  long long v91 = *(_OWORD *)&v89->value;
                  time2.CMTimeEpoch epoch = v89->epoch;
                  *(_OWORD *)&time2.value = v91;
                  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
                  {
                    v132.CMTimeEpoch epoch = v89->epoch;
                    *(_OWORD *)&v132.value = *(_OWORD *)&v89->value;
                    do
                    {
                      float v92 = v86;
                      long long v93 = *(_OWORD *)&v86->value;
                      v89->CMTimeEpoch epoch = v86->epoch;
                      *(_OWORD *)&v89->value = v93;
                      if (v82 < v85) {
                        break;
                      }
                      uint64_t v94 = (2 * v85) | 1;
                      float v86 = &a1[v94];
                      uint64_t v95 = 2 * v85 + 2;
                      if (v95 < v13)
                      {
                        long long v96 = *(_OWORD *)&v86->value;
                        time1.CMTimeEpoch epoch = v86->epoch;
                        *(_OWORD *)&time1.value = v96;
                        long long v97 = *(_OWORD *)&v86[1].value;
                        time2.CMTimeEpoch epoch = v86[1].epoch;
                        *(_OWORD *)&time2.value = v97;
                        if (CMTimeCompare(&time1, &time2) < 0)
                        {
                          ++v86;
                          uint64_t v94 = v95;
                        }
                      }
                      long long v98 = *(_OWORD *)&v86->value;
                      time1.CMTimeEpoch epoch = v86->epoch;
                      *(_OWORD *)&time1.value = v98;
                      CMTime time2 = v132;
                      char v89 = v92;
                      uint64_t v85 = v94;
                    }
                    while ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0);
                    v92->CMTimeEpoch epoch = v132.epoch;
                    *(_OWORD *)&v92->value = *(_OWORD *)&v132.value;
                  }
                }
                int64_t v83 = v84 - 1;
              }
              while (v84);
              int64_t v99 = v12 / 0x18uLL;
              do
              {
                uint64_t v100 = 0;
                CMTimeEpoch v128 = a1->epoch;
                long long v127 = *(_OWORD *)&a1->value;
                uint64_t v101 = (uint64_t)a1;
                do
                {
                  uint64_t v102 = v101 + 24 * v100 + 24;
                  uint64_t v103 = (2 * v100) | 1;
                  uint64_t v104 = 2 * v100 + 2;
                  if (v104 < v99)
                  {
                    long long v105 = *(_OWORD *)v102;
                    time1.CMTimeEpoch epoch = *(void *)(v101 + 24 * v100 + 40);
                    *(_OWORD *)&time1.value = v105;
                    long long v106 = *(_OWORD *)(v101 + 24 * v100 + 48);
                    time2.CMTimeEpoch epoch = *(void *)(v101 + 24 * v100 + 64);
                    *(_OWORD *)&time2.value = v106;
                    if (CMTimeCompare(&time1, &time2) < 0)
                    {
                      v102 += 24;
                      uint64_t v103 = v104;
                    }
                  }
                  long long v107 = *(_OWORD *)v102;
                  *(void *)(v101 + 16) = *(void *)(v102 + 16);
                  *(_OWORD *)uint64_t v101 = v107;
                  uint64_t v101 = v102;
                  uint64_t v100 = v103;
                }
                while (v103 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
                float64x2_t v108 = a2 - 1;
                BOOL v5 = v102 == (void)--a2;
                if (v5)
                {
                  *(void *)(v102 + 16) = v128;
                  *(_OWORD *)uint64_t v102 = v127;
                }
                else
                {
                  long long v109 = *(_OWORD *)&v108->value;
                  *(void *)(v102 + 16) = v108->epoch;
                  *(_OWORD *)uint64_t v102 = v109;
                  v108->CMTimeEpoch epoch = v128;
                  *(_OWORD *)&v108->value = v127;
                  uint64_t v110 = v102 - (void)a1 + 24;
                  if (v110 >= 25)
                  {
                    unint64_t v111 = (v110 / 0x18uLL - 2) >> 1;
                    float64x2_t v112 = &a1[v111];
                    long long v113 = *(_OWORD *)&v112->value;
                    time1.CMTimeEpoch epoch = v112->epoch;
                    *(_OWORD *)&time1.value = v113;
                    long long v114 = *(_OWORD *)v102;
                    time2.CMTimeEpoch epoch = *(void *)(v102 + 16);
                    *(_OWORD *)&time2.value = v114;
                    if (CMTimeCompare(&time1, &time2) < 0)
                    {
                      v133.CMTimeEpoch epoch = *(void *)(v102 + 16);
                      *(_OWORD *)&v133.value = *(_OWORD *)v102;
                      do
                      {
                        uint64_t v115 = (uint64_t)v112;
                        long long v116 = *(_OWORD *)&v112->value;
                        *(void *)(v102 + 16) = v112->epoch;
                        *(_OWORD *)uint64_t v102 = v116;
                        if (!v111) {
                          break;
                        }
                        unint64_t v111 = (v111 - 1) >> 1;
                        float64x2_t v112 = &a1[v111];
                        long long v117 = *(_OWORD *)&v112->value;
                        time1.CMTimeEpoch epoch = v112->epoch;
                        *(_OWORD *)&time1.value = v117;
                        CMTime time2 = v133;
                        uint64_t v102 = v115;
                      }
                      while (CMTimeCompare(&time1, &time2) < 0);
                      *(void *)(v115 + 16) = v133.epoch;
                      *(_OWORD *)uint64_t v115 = *(_OWORD *)&v133.value;
                    }
                  }
                }
              }
              while (v99-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          long long v15 = &a1[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 < 0xC01)
          {
            sub_1DD4DEB2C(v15, a1, v10);
          }
          else
          {
            sub_1DD4DEB2C(a1, v15, v10);
            uint64_t v16 = v14;
            sub_1DD4DEB2C(a1 + 1, &a1[v16 - 1], a2 - 2);
            sub_1DD4DEB2C(a1 + 2, &a1[v16 + 1], a2 - 3);
            sub_1DD4DEB2C(&a1[v16 - 1], v15, &a1[v16 + 1]);
            long long v17 = *(_OWORD *)&a1->value;
            time1.CMTimeEpoch epoch = a1->epoch;
            *(_OWORD *)&time1.value = v17;
            CMTimeEpoch v18 = v15->epoch;
            *(_OWORD *)&a1->value = *(_OWORD *)&v15->value;
            a1->CMTimeEpoch epoch = v18;
            long long v19 = *(_OWORD *)&time1.value;
            v15->CMTimeEpoch epoch = time1.epoch;
            *(_OWORD *)&v15->value = v19;
          }
          --a3;
          if (a4) {
            break;
          }
          long long v20 = *(_OWORD *)&a1[-1].value;
          time1.CMTimeEpoch epoch = a1[-1].epoch;
          *(_OWORD *)&time1.value = v20;
          long long v21 = *(_OWORD *)&a1->value;
          time2.CMTimeEpoch epoch = a1->epoch;
          *(_OWORD *)&time2.value = v21;
          if (CMTimeCompare(&time1, &time2) < 0) {
            break;
          }
          v130.CMTimeEpoch epoch = a1->epoch;
          *(_OWORD *)&v130.value = *(_OWORD *)&a1->value;
          long long v44 = *(_OWORD *)&a1->value;
          time1.CMTimeEpoch epoch = v130.epoch;
          *(_OWORD *)&time1.value = v44;
          long long v45 = *(_OWORD *)&v10->value;
          time2.CMTimeEpoch epoch = a2[-1].epoch;
          *(_OWORD *)&time2.value = v45;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            CMTime v49 = a1;
            do
            {
              long long v11 = v49 + 1;
              CMTime time1 = v130;
              CMTimeEpoch v50 = v49[1].epoch;
              *(_OWORD *)&time2.value = *(_OWORD *)&v49[1].value;
              time2.CMTimeEpoch epoch = v50;
              int32_t v51 = CMTimeCompare(&time1, &time2);
              CMTime v49 = v11;
            }
            while ((v51 & 0x80000000) == 0);
          }
          else
          {
            CMTime v46 = a1 + 1;
            do
            {
              long long v11 = v46;
              if (v46 >= v9) {
                break;
              }
              CMTime time1 = v130;
              CMTimeEpoch v47 = v46->epoch;
              *(_OWORD *)&time2.value = *(_OWORD *)&v11->value;
              time2.CMTimeEpoch epoch = v47;
              int32_t v48 = CMTimeCompare(&time1, &time2);
              CMTime v46 = v11 + 1;
            }
            while ((v48 & 0x80000000) == 0);
          }
          CMTime v52 = v9;
          if (v11 < v9)
          {
            double v53 = v9;
            do
            {
              CMTime v52 = v53 - 1;
              CMTime time1 = v130;
              CMTimeEpoch v54 = v53[-1].epoch;
              *(_OWORD *)&time2.value = *(_OWORD *)&v53[-1].value;
              time2.CMTimeEpoch epoch = v54;
              int32_t v55 = CMTimeCompare(&time1, &time2);
              double v53 = v52;
            }
            while (v55 < 0);
          }
          while (v11 < v52)
          {
            long long v56 = *(_OWORD *)&v11->value;
            time1.CMTimeEpoch epoch = v11->epoch;
            *(_OWORD *)&time1.value = v56;
            long long v57 = *(_OWORD *)&v52->value;
            v11->CMTimeEpoch epoch = v52->epoch;
            *(_OWORD *)&v11->value = v57;
            long long v58 = *(_OWORD *)&time1.value;
            v52->CMTimeEpoch epoch = time1.epoch;
            *(_OWORD *)&v52->value = v58;
            do
            {
              CMTime time1 = v130;
              CMTimeEpoch v59 = v11[1].epoch;
              long long v60 = *(_OWORD *)&v11[1].value;
              ++v11;
              *(_OWORD *)&time2.value = v60;
              time2.CMTimeEpoch epoch = v59;
            }
            while ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0);
            do
            {
              CMTime time1 = v130;
              CMTimeEpoch v61 = v52[-1].epoch;
              long long v62 = *(_OWORD *)&v52[-1].value;
              --v52;
              *(_OWORD *)&time2.value = v62;
              time2.CMTimeEpoch epoch = v61;
            }
            while (CMTimeCompare(&time1, &time2) < 0);
          }
          double v63 = v11 - 1;
          BOOL v4 = &v11[-1] >= a1;
          BOOL v5 = &v11[-1] == a1;
          if (&v11[-1] != a1)
          {
            long long v64 = *(_OWORD *)&v63->value;
            a1->CMTimeEpoch epoch = v11[-1].epoch;
            *(_OWORD *)&a1->value = v64;
          }
          a4 = 0;
          v11[-1].CMTimeEpoch epoch = v130.epoch;
          *(_OWORD *)&v63->value = *(_OWORD *)&v130.value;
        }
        uint64_t v22 = 0;
        v129.CMTimeEpoch epoch = a1->epoch;
        *(_OWORD *)&v129.value = *(_OWORD *)&a1->value;
        do
        {
          long long v23 = *(_OWORD *)&a1[v22 + 1].value;
          time1.CMTimeEpoch epoch = a1[v22 + 1].epoch;
          *(_OWORD *)&time1.value = v23;
          CMTime time2 = v129;
          ++v22;
        }
        while (CMTimeCompare(&time1, &time2) < 0);
        uint64_t v24 = &a1[v22];
        uint64_t v25 = v9;
        if (v22 == 1)
        {
          unint64_t v29 = a2;
          while (v24 < v29)
          {
            long long v26 = v29 - 1;
            long long v30 = *(_OWORD *)&v29[-1].value;
            time1.CMTimeEpoch epoch = v29[-1].epoch;
            *(_OWORD *)&time1.value = v30;
            CMTime time2 = v129;
            int32_t v31 = CMTimeCompare(&time1, &time2);
            unint64_t v29 = v26;
            if (v31 < 0) {
              goto LABEL_21;
            }
          }
          long long v26 = v29;
        }
        else
        {
          do
          {
            long long v26 = v25 - 1;
            long long v27 = *(_OWORD *)&v25[-1].value;
            time1.CMTimeEpoch epoch = v25[-1].epoch;
            *(_OWORD *)&time1.value = v27;
            CMTime time2 = v129;
            int32_t v28 = CMTimeCompare(&time1, &time2);
            uint64_t v25 = v26;
          }
          while ((v28 & 0x80000000) == 0);
        }
LABEL_21:
        if (v24 >= v26)
        {
          CMTimeEpoch v41 = v24 - 1;
        }
        else
        {
          CMTime v32 = &a1[v22];
          unint64_t v33 = (unint64_t)v26;
          do
          {
            long long v34 = *(_OWORD *)&v32->value;
            time1.CMTimeEpoch epoch = v32->epoch;
            *(_OWORD *)&time1.value = v34;
            long long v35 = *(_OWORD *)v33;
            v32->CMTimeEpoch epoch = *(void *)(v33 + 16);
            *(_OWORD *)&v32->value = v35;
            long long v36 = *(_OWORD *)&time1.value;
            *(void *)(v33 + 16) = time1.epoch;
            *(_OWORD *)unint64_t v33 = v36;
            do
            {
              long long v37 = *(_OWORD *)&v32[1].value;
              CMTimeEpoch v38 = v32[1].epoch;
              ++v32;
              time1.CMTimeEpoch epoch = v38;
              *(_OWORD *)&time1.value = v37;
              CMTime time2 = v129;
            }
            while (CMTimeCompare(&time1, &time2) < 0);
            do
            {
              long long v39 = *(_OWORD *)(v33 - 24);
              CMTimeEpoch v40 = *(void *)(v33 - 8);
              v33 -= 24;
              time1.CMTimeEpoch epoch = v40;
              *(_OWORD *)&time1.value = v39;
              CMTime time2 = v129;
            }
            while ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0);
          }
          while ((unint64_t)v32 < v33);
          CMTimeEpoch v41 = v32 - 1;
        }
        if (v41 != a1)
        {
          long long v42 = *(_OWORD *)&v41->value;
          a1->CMTimeEpoch epoch = v41->epoch;
          *(_OWORD *)&a1->value = v42;
        }
        v41->CMTimeEpoch epoch = v129.epoch;
        *(_OWORD *)&v41->value = *(_OWORD *)&v129.value;
        BOOL v4 = v24 >= v26;
        unint64_t v9 = a2;
        if (v4) {
          break;
        }
LABEL_35:
        sub_1DD4DDE20(a1, v41, a3, a4 & 1);
        a4 = 0;
        long long v11 = v41 + 1;
      }
      BOOL v43 = sub_1DD4DECF4(a1, v41);
      long long v11 = v41 + 1;
      if (sub_1DD4DECF4(v41 + 1, a2)) {
        break;
      }
      if (!v43) {
        goto LABEL_35;
      }
    }
    a2 = v41;
    if (!v43) {
      continue;
    }
    break;
  }
}

__n128 sub_1DD4DE9A0(CMTime *a1, CMTime *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  sub_1DD4DEF3C(a1, a2, a3, a4);
  CMTime time1 = *a5;
  CMTime time2 = *a4;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    CMTimeEpoch epoch = a4->epoch;
    long long v12 = *(_OWORD *)&a4->value;
    CMTimeEpoch v13 = a5->epoch;
    *(_OWORD *)&a4->value = *(_OWORD *)&a5->value;
    a4->CMTimeEpoch epoch = v13;
    *(_OWORD *)&a5->value = v12;
    a5->CMTimeEpoch epoch = epoch;
    CMTime time1 = *a4;
    CMTime time2 = *a3;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      CMTimeEpoch v14 = a3->epoch;
      long long v15 = *(_OWORD *)&a3->value;
      CMTimeEpoch v16 = a4->epoch;
      *(_OWORD *)&a3->value = *(_OWORD *)&a4->value;
      a3->CMTimeEpoch epoch = v16;
      *(_OWORD *)&a4->value = v15;
      a4->CMTimeEpoch epoch = v14;
      CMTime time1 = *a3;
      CMTime time2 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTimeEpoch v17 = a2->epoch;
        long long v18 = *(_OWORD *)&a2->value;
        CMTimeEpoch v19 = a3->epoch;
        *(_OWORD *)&a2->value = *(_OWORD *)&a3->value;
        a2->CMTimeEpoch epoch = v19;
        *(_OWORD *)&a3->value = v18;
        a3->CMTimeEpoch epoch = v17;
        CMTime time1 = *a2;
        CMTime time2 = *a1;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          CMTimeEpoch v20 = a1->epoch;
          __n128 result = *(__n128 *)&a1->value;
          CMTimeEpoch v21 = a2->epoch;
          *(_OWORD *)&a1->value = *(_OWORD *)&a2->value;
          a1->CMTimeEpoch epoch = v21;
          *(__n128 *)&a2->value = result;
          a2->CMTimeEpoch epoch = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DD4DEB2C(CMTime *a1, CMTime *a2, CMTime *a3)
{
  CMTime time1 = *a2;
  CMTime time2 = *a1;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    CMTime time1 = *a3;
    CMTime time2 = *a2;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
    {
      CMTimeEpoch epoch = a1->epoch;
      long long v17 = *(_OWORD *)&a1->value;
      CMTimeEpoch v19 = a3->epoch;
      *(_OWORD *)&a1->value = *(_OWORD *)&a3->value;
      a1->CMTimeEpoch epoch = v19;
    }
    else
    {
      CMTimeEpoch v13 = a1->epoch;
      long long v14 = *(_OWORD *)&a1->value;
      CMTimeEpoch v15 = a2->epoch;
      *(_OWORD *)&a1->value = *(_OWORD *)&a2->value;
      a1->CMTimeEpoch epoch = v15;
      *(_OWORD *)&a2->value = v14;
      a2->CMTimeEpoch epoch = v13;
      CMTime time1 = *a3;
      CMTime time2 = *a2;
      uint64_t result = CMTimeCompare(&time1, &time2);
      if ((result & 0x80000000) == 0) {
        return result;
      }
      CMTimeEpoch epoch = a2->epoch;
      long long v17 = *(_OWORD *)&a2->value;
      CMTimeEpoch v18 = a3->epoch;
      *(_OWORD *)&a2->value = *(_OWORD *)&a3->value;
      a2->CMTimeEpoch epoch = v18;
    }
    *(_OWORD *)&a3->value = v17;
    a3->CMTimeEpoch epoch = epoch;
  }
  else
  {
    CMTime time1 = *a3;
    CMTime time2 = *a2;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
    {
      CMTimeEpoch v7 = a2->epoch;
      long long v8 = *(_OWORD *)&a2->value;
      CMTimeEpoch v9 = a3->epoch;
      *(_OWORD *)&a2->value = *(_OWORD *)&a3->value;
      a2->CMTimeEpoch epoch = v9;
      *(_OWORD *)&a3->value = v8;
      a3->CMTimeEpoch epoch = v7;
      CMTime time1 = *a2;
      CMTime time2 = *a1;
      uint64_t result = CMTimeCompare(&time1, &time2);
      if ((result & 0x80000000) != 0)
      {
        CMTimeEpoch v10 = a1->epoch;
        long long v11 = *(_OWORD *)&a1->value;
        CMTimeEpoch v12 = a2->epoch;
        *(_OWORD *)&a1->value = *(_OWORD *)&a2->value;
        a1->CMTimeEpoch epoch = v12;
        *(_OWORD *)&a2->value = v11;
        a2->CMTimeEpoch epoch = v10;
      }
    }
  }
  return result;
}

BOOL sub_1DD4DECF4(CMTime *a1, CMTime *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      CMTime time1 = a2[-1];
      CMTime time2 = *a1;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        long long v6 = a2 - 1;
        CMTimeEpoch epoch = a1->epoch;
        long long v8 = *(_OWORD *)&a1->value;
        CMTimeEpoch v9 = a2[-1].epoch;
        *(_OWORD *)&a1->value = *(_OWORD *)&a2[-1].value;
        a1->CMTimeEpoch epoch = v9;
        *(_OWORD *)&v6->value = v8;
        v6->CMTimeEpoch epoch = epoch;
      }
      return 1;
    case 3uLL:
      sub_1DD4DEB2C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4uLL:
      sub_1DD4DEF3C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5uLL:
      sub_1DD4DE9A0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      CMTimeEpoch v10 = a1 + 2;
      sub_1DD4DEB2C(a1, a1 + 1, a1 + 2);
      long long v11 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    CMTime time1 = *v11;
    CMTimeEpoch v14 = v10->epoch;
    *(_OWORD *)&time2.value = *(_OWORD *)&v10->value;
    time2.CMTimeEpoch epoch = v14;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      *(_OWORD *)&v18.value = *(_OWORD *)&v11->value;
      v18.CMTimeEpoch epoch = v11->epoch;
      uint64_t v15 = v12;
      while (1)
      {
        CMTimeEpoch v16 = (char *)a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)((char *)&a1[2].value + v15);
        *((void *)v16 + 11) = *(CMTimeEpoch *)((char *)&a1[2].epoch + v15);
        if (v15 == -48) {
          break;
        }
        CMTime time1 = v18;
        CMTime time2 = *(CMTime *)(v16 + 1);
        v15 -= 24;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          uint64_t v17 = (uint64_t)&a1[3] + v15;
          goto LABEL_12;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v17 = *(_OWORD *)&v18.value;
      *(void *)(v17 + 16) = v18.epoch;
      if (++v13 == 8) {
        return &v11[1] == a2;
      }
    }
    CMTimeEpoch v10 = v11;
    v12 += 24;
    if (++v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1DD4DEF3C(CMTime *a1, CMTime *a2, CMTime *a3, CMTime *a4)
{
  sub_1DD4DEB2C(a1, a2, a3);
  CMTime time1 = *a4;
  CMTime time2 = *a3;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    CMTimeEpoch epoch = a3->epoch;
    long long v10 = *(_OWORD *)&a3->value;
    CMTimeEpoch v11 = a4->epoch;
    *(_OWORD *)&a3->value = *(_OWORD *)&a4->value;
    a3->CMTimeEpoch epoch = v11;
    *(_OWORD *)&a4->value = v10;
    a4->CMTimeEpoch epoch = epoch;
    CMTime time1 = *a3;
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      CMTimeEpoch v12 = a2->epoch;
      long long v13 = *(_OWORD *)&a2->value;
      CMTimeEpoch v14 = a3->epoch;
      *(_OWORD *)&a2->value = *(_OWORD *)&a3->value;
      a2->CMTimeEpoch epoch = v14;
      *(_OWORD *)&a3->value = v13;
      a3->CMTimeEpoch epoch = v12;
      CMTime time1 = *a2;
      CMTime time2 = *a1;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTimeEpoch v15 = a1->epoch;
        __n128 result = *(__n128 *)&a1->value;
        CMTimeEpoch v16 = a2->epoch;
        *(_OWORD *)&a1->value = *(_OWORD *)&a2->value;
        a1->CMTimeEpoch epoch = v16;
        *(__n128 *)&a2->value = result;
        a2->CMTimeEpoch epoch = v15;
      }
    }
  }
  return result;
}

void sub_1DD4DF070()
{
}

void *sub_1DD4DF084(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F38B06C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1DD4DF0CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F38B06C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1DD4DF0F8(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a1 + 8))(a2, a3, *a4);
}

uint64_t sub_1DD4DF10C(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38B0028)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4DF14C()
{
  return &unk_1F38B0028;
}

void *sub_1DD4DF158(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1DD4DF1DC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1DD4BACA0();
    }
    uint64_t v5 = a1[1] - *a1;
    _OWORD v7[4] = result;
    v7[0] = sub_1DD4BD934(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_1DD4DF424(a1, v7);
    return sub_1DD4C9568((uint64_t)v7);
  }
  return result;
}

void sub_1DD4DF27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4C9568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4DF290(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  CMTimeEpoch v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DD4BACA0();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    long long v13 = (char *)sub_1DD4BD934(result, v12);
    CMTimeEpoch v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)CMTimeEpoch v14 = 0;
    *(_OWORD *)CMTimeEpoch v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_1DD4DF424(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = sub_1DD4C9568((uint64_t)v16);
  }
  else
  {
    *CMTimeEpoch v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)CMTimeEpoch v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1DD4DF3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4C9568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4DF3D0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1DD4BB904();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double *))(*(void *)v4 + 48))(v4, a2, a3, &v6);
}

uint64_t sub_1DD4DF424(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1DD4C93B4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DD4DF49C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1DD4DF534(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_1DD4BACA0();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1DD4BE0AC(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1DD4DF5E8(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      sub_1DD4BACA0();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1DD4BE1A4(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v9 = &v6[32 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_1DD4DF698(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = 0;
    int v8 = (int)(float)(ceilf((float)((int)a6 - a3) / (float)(int)a4) + (float)a3);
    float v9 = ceilf((float)((int)a7 - a3) / (float)(int)a5) + (float)a3;
    int v10 = (int)v9 - a3;
    do
    {
      if (a4)
      {
        int v11 = 0;
        unint64_t v12 = (int)v9 + (uint64_t)(v10 * (int)v7);
        if (v12 >= a7) {
          unint64_t v12 = a7;
        }
        uint64_t v13 = a4;
        do
        {
          unint64_t v14 = v8 + (uint64_t)v11;
          if (v14 >= a6) {
            unint64_t v14 = a6;
          }
          *uint64_t result = v11;
          result[1] = v14;
          result[2] = v10 * (int)v7;
          result[3] = v12;
          result += 4;
          v11 += v8 - a3;
          --v13;
        }
        while (v13);
      }
      ++v7;
    }
    while (v7 != a5);
  }
  return result;
}

void sub_1DD4DF744(void *a1)
{
  *a1 = &unk_1F38B0688;
  operator new();
}

void sub_1DD4DF7AC(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4DF7D0()
{
  int v0 = open("/dev/random", 0);
  if (v0 < 0)
  {
    perror("/dev/random");
    return 0;
  }
  else
  {
    int v1 = v0;
    uint64_t v3 = 0;
    read(v0, &v3, 8uLL);
    close(v1);
    return v3;
  }
}

void *sub_1DD4DF840(void *a1)
{
  *a1 = &unk_1F38B0688;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x1E01B7750](v2, 0x1000C4000313F17);
  }
  return a1;
}

void sub_1DD4DF89C(void *a1)
{
  *a1 = &unk_1F38B0688;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x1E01B7750](v1, 0x1000C4000313F17);
  }
  JUMPOUT(0x1E01B7750);
}

unint64_t sub_1DD4DF918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == a2) {
    return a2;
  }
  unint64_t v4 = a3 - a2 + 1;
  int64_t v5 = *(void **)(a1 + 8);
  unint64_t v6 = 0x5851F42D4C957F2DLL * *v5 + 1;
  *int64_t v5 = v6;
  if (v4 >= 0x100000001)
  {
    uint64_t v7 = 0x5851F42D4C957F2DLL * v6 + 1;
    *int64_t v5 = v7;
    unint64_t result = v6 & 0xFFFFFFFF00000000 | HIDWORD(v7);
    return result % v4 + a2;
  }
  unint64_t result = HIDWORD(v6);
  if (a3 - a2 != -1) {
    return result % v4 + a2;
  }
  return result;
}

float sub_1DD4DF984(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = 0x5851F42D4C957F2DLL * *v1 + 1;
  uint64_t *v1 = v2;
  return (float)HIDWORD(v2) * 2.3283e-10;
}

uint64_t sub_1DD4DF9C0(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

void sub_1DD4DF9CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void sub_1DD4DFA04(uint64_t a1, char **a2, void *a3)
{
  a3[1] = *a3;
  sub_1DD4D03B8((uint64_t)a3, (a2[1] - *a2) >> 2);
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = *a2;
  int v8 = a2[1];
  if (v6)
  {
    uint64_t v9 = v8 - v7;
    if (v9)
    {
      unint64_t v10 = v9 >> 2;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      int v11 = (_DWORD *)*a3;
      do
      {
        unsigned int v12 = *(_DWORD *)v7;
        v7 += 4;
        *v11++ = *(__int16 *)(v6 + 48 * v12 + 40);
        --v10;
      }
      while (v10);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  }
  else if (v8 != v7)
  {
    unint64_t v13 = (v8 - v7) >> 2;
    unint64_t v14 = (void *)*a3;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    bzero(v14, 4 * v13);
  }
}

BOOL sub_1DD4DFAE8(uint64_t a1, void *a2)
{
  int v2 = 0;
  uint64_t v3 = 1;
  while ((v3 & *a2) != 0)
  {
    ++v2;
    v3 *= 2;
    if (v2 == 4) {
      goto LABEL_6;
    }
  }
  if (!v2) {
    return 1;
  }
LABEL_6:
  unint64_t v4 = (float *)a2 + 3;
  float v5 = 0.0;
  uint64_t v6 = v2;
  float v7 = 0.0;
  do
  {
    float v7 = v7 + *(v4 - 1);
    float v8 = *v4;
    v4 += 2;
    float v5 = v5 + v8;
    --v6;
  }
  while (v6);
  float v9 = sqrtf((float)(v5 * v5) + (float)(v7 * v7));
  float v10 = sqrtf((float)v2);
  return v9 <= (float)((float)((float)(*(float *)(a1 + 232) * 0.33333) * v10)
                     + (float)((float)(*(float *)(a1 + 232) * 0.33333) * v10));
}

void sub_1DD4DFB80(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v2;
  int v10 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a1 + 40))
  {
    int v3 = *(_DWORD *)(a1 + 44);
    if (v3)
    {
      v7[0] = *(_DWORD *)(a1 + 40);
      v7[1] = v3;
      sub_1DD4DFC70((float *)v9, v7, (uint64_t)v8);
      uint64_t v4 = 0;
      float v5 = 0.0;
      do
      {
        float v6 = fabsf(*(float *)&v8[v4] + -1.5708);
        if (v6 > v5) {
          float v5 = v6;
        }
        v4 += 4;
      }
      while (v4 != 16);
      sub_1DD4DFDF0((float *)v9, v7);
    }
  }
}

void sub_1DD4DFC70(float *a1, int *a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v5.i32[0] = 0;
  v5.i32[2] = 0;
  v5.f32[1] = (float)*a2;
  v5.f32[3] = v5.f32[1];
  v6.i64[0] = 0;
  v6.f32[2] = (float)a2[1];
  v6.f32[3] = v6.f32[2];
  __asm { FMOV            V22.4S, #1.0 }
  float32x4_t v11 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, a1[1]), v5, *a1), v25.val[2], a1[2]);
  float32x4_t v12 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, a1[4]), v5, a1[3]), v25.val[2], a1[5]);
  float32x4_t v13 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, a1[7]), v5, a1[6]), v25.val[2], a1[8]);
  v25.val[0] = vdivq_f32(v11, v13);
  v25.val[1] = vdivq_f32(v12, v13);
  unint64_t v14 = (float *)v23;
  vst3q_f32(v14, v25);
  uint64_t v15 = 4;
  do
  {
    if ((v4 & 0xFFFFFFFC) != 0)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v16 = qword_1DD512120[v4];
      uint64_t v17 = qword_1DD512140[v4];
    }
    CMTime v18 = (float *)&v23[12 * v17];
    float v19 = *(float *)&v23[v15 - 4];
    float v20 = *v18 - v19;
    CMTimeEpoch v21 = (float *)&v23[12 * v16];
    float v22 = *(float *)&v23[v15];
    *(float *)(a3 + 4 * v4++) = acosf((float)((float)((float)(v18[1] - v22) * (float)(v21[1] - v22))+ (float)(v20 * (float)(*v21 - v19)))/ (float)(sqrtf((float)((float)(v18[1] - v22) * (float)(v18[1] - v22)) + (float)(v20 * v20))* sqrtf((float)((float)(v21[1] - v22) * (float)(v21[1] - v22))+ (float)((float)(*v21 - v19) * (float)(*v21 - v19)))));
    v15 += 12;
  }
  while (v4 != 4);
}

float sub_1DD4DFDF0(float *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v3.i32[0] = 0;
  v3.i32[2] = 0;
  v3.f32[1] = (float)*a2;
  v3.f32[3] = v3.f32[1];
  v4.i64[0] = 0;
  v4.f32[2] = (float)a2[1];
  v4.f32[3] = v4.f32[2];
  float32x4_t v5 = vmulq_f32(v4, (float32x4_t)0);
  __asm { FMOV            V7.4S, #1.0 }
  float32x4_t v10 = vmlaq_f32(vaddq_f32(v3, v5), (float32x4_t)0, v27.val[2]);
  float v11 = a1[6];
  float v12 = a1[5];
  float v13 = *a1;
  float32x4_t v14 = vmulq_n_f32(v4, a1[1]);
  float32x4_t v15 = vmulq_n_f32(v4, a1[4]);
  float32x4_t v16 = vmulq_n_f32(v4, a1[7]);
  float32x4_t v17 = vaddq_f32(v27.val[2], vmlaq_f32(v5, (float32x4_t)0, v3));
  v27.val[0] = vdivq_f32(v10, v17);
  v27.val[1] = vdivq_f32(vmlaq_f32(vmlaq_f32(v4, (float32x4_t)0, v3), (float32x4_t)0, v27.val[2]), v17);
  CMTime v18 = (float *)v25;
  vst3q_f32(v18, v27);
  float32x4_t v19 = vmlaq_n_f32(vmlaq_n_f32(v16, v3, v11), v27.val[2], a1[8]);
  v27.val[0] = vdivq_f32(vmlaq_n_f32(vmlaq_n_f32(v14, v3, v13), v27.val[2], a1[2]), v19);
  v27.val[1] = vdivq_f32(vmlaq_n_f32(vmlaq_n_f32(v15, v3, a1[3]), v27.val[2], v12), v19);
  float v20 = (float *)v24;
  vst3q_f32(v20, v27);
  do
  {
    float v21 = *(float *)&v24[v2];
    float v22 = (float)(*(float *)&v25[v2 + 4] - *(float *)&v24[v2 + 4])
        * (float)(*(float *)&v25[v2 + 4] - *(float *)&v24[v2 + 4]);
    if ((float)(v22 + (float)((float)(*(float *)&v25[v2] - v21) * (float)(*(float *)&v25[v2] - v21))) > v4.f32[0]) {
      v4.f32[0] = v22 + (float)((float)(*(float *)&v25[v2] - v21) * (float)(*(float *)&v25[v2] - v21));
    }
    v2 += 12;
  }
  while (v2 != 48);
  return sqrtf(v4.f32[0]);
}

void sub_1DD4DFF18(uint64_t a1)
{
  uint64_t v2 = (float **)(a1 + 80);
  sub_1DD4E0190(a1 + 80, *(unsigned int *)(a1 + 48));
  float32x4_t v3 = *(float32x2_t **)(a1 + 288);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v6 = *(void *)(a1 + 64);
      float v8 = v3 + 1;
      __asm { FMOV            V9.2S, #1.0 }
      float32x4_t v14 = *v2;
      do
      {
        float32x4_t v15 = (unint64_t *)&v3[6 * v5];
        int v16 = *((__int16 *)v15 + 20);
        unint64_t v17 = *v15;
        if (v16 >= 0x40) {
          int v18 = 64;
        }
        else {
          int v18 = v16;
        }
        if (v18)
        {
          float v19 = 0.0;
          float v20 = 1000.0;
          unint64_t v21 = v17;
          float v22 = 0.0;
          do
          {
            if (v21) {
              float v23 = v20;
            }
            else {
              float v23 = -0.0;
            }
            float v22 = v22 + v23;
            if (v21) {
              float v24 = -0.0;
            }
            else {
              float v24 = v20;
            }
            float v19 = v19 + v24;
            v21 >>= 1;
            float v20 = v20 * 0.25;
            --v18;
          }
          while (v18);
        }
        else
        {
          float v22 = 0.0;
          float v19 = 0.0;
        }
        if (v19 < 0.000001) {
          float v19 = 0.000001;
        }
        if (v22 < 0.000001) {
          float v22 = 0.000001;
        }
        float32x2_t v25 = _D9;
        if (v16 > 0)
        {
          if (v16 >= 4) {
            unsigned int v26 = 4;
          }
          else {
            unsigned int v26 = v16;
          }
          if (v26 <= 1) {
            uint64_t v27 = 1;
          }
          else {
            uint64_t v27 = v26;
          }
          float32x2_t v28 = 0;
          unint64_t v29 = v8;
          do
          {
            float32x2_t v30 = *v29++;
            float32x2_t v31 = vabs_f32(v30);
            float32x2_t v28 = vadd_f32(v28, v31);
            --v27;
          }
          while (v27);
          v31.f32[0] = (float)(int)v26;
          float32x2_t v25 = vdiv_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 0));
        }
        float v32 = v22 / v19;
        if (v16) {
          float v32 = v32
        }
              / (float)(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v25, v25).i32[1]), v25.f32[0], v25.f32[0])) + 0.25);
        if (((v16 > 0) & v17) == 0)
        {
          float v33 = *(float *)(v7 + 8 * v5) - *(float *)(v6 + 8 * v5);
          float v32 = v32
              / (float)(sqrtf(sqrtf((float)((float)(*(float *)(v7 + ((8 * v5) | 4)) - *(float *)(v6 + ((8 * v5) | 4)))* (float)(*(float *)(v7 + ((8 * v5) | 4)) - *(float *)(v6 + ((8 * v5) | 4))))+ (float)(v33 * v33)))+ 1.0);
        }
        if (v3[6 * v5 + 5].i16[1]) {
          float v32 = v32 / (float)v3[6 * v5 + 5].i16[1];
        }
        if (v32 > 0.00000011921) {
          float v34 = v32 + 1.0;
        }
        else {
          float v34 = 1.0;
        }
        float v35 = logf(v34);
        if (v35 <= 0.00000011921) {
          float v35 = 0.00000011921;
        }
        v14[v5++] = v35;
        v8 += 6;
      }
      while (v5 != v4);
    }
  }
  else
  {
    uint64_t v36 = *(unsigned int *)(a1 + 48);
    if (v36)
    {
      long long v37 = *v2;
      memset_pattern16(v37, &unk_1DD512160, 4 * v36);
    }
  }
}

void sub_1DD4E0190(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1DD4E04D4((char **)a1, a2 - v2);
  }
}

void sub_1DD4E01C0(uint64_t a1, char **a2, uint64_t a3)
{
  float32x4_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = *(void *)(a1 + 288);
    *(void *)(a3 + 8) = *(void *)a3;
    sub_1DD4D03E8((void **)a3, (a2[1] - v3) >> 2);
    __p = 0;
    BOOL v43 = 0;
    uint64_t v44 = 0;
    sub_1DD4DFA04(a1, a2, &__p);
    unint64_t v8 = (v43 - (unsigned char *)__p) >> 2;
    LODWORD(v9) = (int)((double)v8 * 0.35);
    if ((int)v9 <= 50) {
      unint64_t v9 = 50;
    }
    else {
      unint64_t v9 = v9;
    }
    if (v8 >= v9) {
      int v10 = v8 - v9;
    }
    else {
      int v10 = 0;
    }
    if (v8 <= v10) {
      int v10 = v8 - 1;
    }
    float v12 = *a2;
    float v11 = a2[1];
    if (v7)
    {
      if (v11 != v12)
      {
        uint64_t v13 = 0;
        unsigned int v14 = 0;
        int v15 = *((_DWORD *)__p + v10);
        do
        {
          unsigned int v16 = *(_DWORD *)&v12[4 * v13];
          if (v15 <= *(__int16 *)(v7 + 48 * v16 + 40) && sub_1DD4DFAE8(a1, (void *)(v7 + 48 * v16)))
          {
            int v18 = *(unsigned int **)(a3 + 8);
            unint64_t v17 = *(void *)(a3 + 16);
            if ((unint64_t)v18 >= v17)
            {
              float v20 = *(unsigned int **)a3;
              uint64_t v21 = ((uint64_t)v18 - *(void *)a3) >> 2;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                sub_1DD4BACA0();
              }
              uint64_t v23 = v17 - (void)v20;
              if (v23 >> 1 > v22) {
                unint64_t v22 = v23 >> 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                float32x2_t v25 = (char *)sub_1DD4BB6B8(a3 + 16, v24);
                float v20 = *(unsigned int **)a3;
                int v18 = *(unsigned int **)(a3 + 8);
              }
              else
              {
                float32x2_t v25 = 0;
              }
              unsigned int v26 = &v25[4 * v21];
              *(_DWORD *)unsigned int v26 = v16;
              float v19 = v26 + 4;
              while (v18 != v20)
              {
                int v27 = *--v18;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              *(void *)a3 = v26;
              *(void *)(a3 + 8) = v19;
              *(void *)(a3 + 16) = &v25[4 * v24];
              if (v20) {
                operator delete(v20);
              }
            }
            else
            {
              *int v18 = v16;
              float v19 = v18 + 1;
            }
            *(void *)(a3 + 8) = v19;
            float v12 = *a2;
            float v11 = a2[1];
          }
          uint64_t v13 = ++v14;
        }
        while (v14 < (unint64_t)((v11 - v12) >> 2));
      }
    }
    else if (v11 != v12)
    {
      uint64_t v28 = 0;
      unsigned int v29 = 0;
      float32x2_t v30 = (void *)(a3 + 16);
      float32x2_t v31 = *(_DWORD **)(a3 + 8);
      do
      {
        int v32 = *(_DWORD *)&v12[4 * v28];
        if ((unint64_t)v31 >= *v30)
        {
          float v34 = *(_DWORD **)a3;
          uint64_t v35 = ((uint64_t)v31 - *(void *)a3) >> 2;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            sub_1DD4BACA0();
          }
          uint64_t v37 = *v30 - (void)v34;
          if (v37 >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            long long v39 = (char *)sub_1DD4BB6B8(a3 + 16, v38);
            float v34 = *(_DWORD **)a3;
            float32x2_t v31 = *(_DWORD **)(a3 + 8);
          }
          else
          {
            long long v39 = 0;
          }
          CMTimeEpoch v40 = &v39[4 * v35];
          *(_DWORD *)CMTimeEpoch v40 = v32;
          float v33 = v40 + 4;
          while (v31 != v34)
          {
            int v41 = *--v31;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          *(void *)a3 = v40;
          *(void *)(a3 + 8) = v33;
          *(void *)(a3 + 16) = &v39[4 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          _DWORD *v31 = v32;
          float v33 = v31 + 1;
        }
        *(void *)(a3 + 8) = v33;
        float v12 = *a2;
        float32x2_t v31 = v33;
        uint64_t v28 = ++v29;
      }
      while (v29 < (unint64_t)((a2[1] - *a2) >> 2));
    }
    if (__p)
    {
      BOOL v43 = __p;
      operator delete(__p);
    }
  }
}

void sub_1DD4E04A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E04D4(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_1DD4BACA0();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)sub_1DD4BB6B8(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unsigned int v14 = 0;
    }
    int v15 = &v14[4 * v11];
    unsigned int v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    unint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_1DD4E05F0(double *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v17 = 0;
  int v18 = 0;
  float v19 = 0;
  sub_1DD4E07D4((void **)&v17, 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 4));
  unint64_t v6 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v7 = v18;
    do
    {
      if (v7 >= v19)
      {
        uint64_t v8 = (v7 - v17) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_1DD4BACA0();
        }
        unint64_t v9 = (v19 - v17) >> 2;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)(v19 - v17) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          uint64_t v11 = (char *)sub_1DD4BAF80((uint64_t)&v19, v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = &v11[8 * v8];
        *(void *)uint64_t v12 = v6;
        uint64_t v7 = v12 + 8;
        unsigned int v14 = v17;
        unint64_t v13 = v18;
        if (v18 != v17)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          unint64_t v13 = v17;
        }
        unint64_t v17 = v12;
        int v18 = v7;
        float v19 = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v7 = v6;
        v7 += 8;
      }
      int v18 = v7;
      v6 += 304;
    }
    while (v6 < a2[1]);
  }
  sub_1DD4DADA4((uint64_t)v16, (int)*a1 | ((unint64_t)(int)a1[1] << 32), (uint64_t)&v17);
  v16[1] = 1;
  sub_1DD4DABFC((uint64_t)v16);
  sub_1DD4DACE4(v16, a3);
  sub_1DD4DAE28((uint64_t)v16);
  if (v17)
  {
    int v18 = v17;
    operator delete(v17);
  }
}

void sub_1DD4E079C(_Unwind_Exception *exception_object)
{
  float32x4_t v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(void *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E07D4(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1DD4BACA0();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_1DD4BAF80(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

id sub_1DD4E087C(void *a1, long long *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a3;
  if (v7)
  {
    uint64_t v34 = 0;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x3032000000;
    uint64_t v37 = sub_1DD4E0BA8;
    unint64_t v38 = sub_1DD4E0BB8;
    id v39 = 0;
    uint64_t v28 = 0;
    unsigned int v29 = &v28;
    uint64_t v30 = 0x3032000000;
    float32x2_t v31 = sub_1DD4E0BA8;
    int v32 = sub_1DD4E0BB8;
    id v33 = 0;
    unint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F28BB8]) initWithCondition:0];
    [v9 lock];
    [v9 unlockWithCondition:1];
    unint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObject:@"tracks"];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1DD4E0BC0;
    void v18[3] = &unk_1E6CC8C28;
    uint64_t v24 = a4;
    id v19 = v7;
    unint64_t v22 = &v34;
    long long v11 = a2[1];
    long long v25 = *a2;
    long long v26 = v11;
    long long v27 = a2[2];
    id v20 = v8;
    uint64_t v23 = &v28;
    id v12 = v9;
    id v21 = v12;
    [v19 loadValuesAsynchronouslyForKeys:v10 completionHandler:v18];

    [v12 lockWhenCondition:2];
    [v12 unlockWithCondition:0];
    uint64_t v13 = (void *)v35[5];
    if (v13)
    {
      unsigned int v14 = [v13 localizedDescription];
      NSLog(&stru_1F38B1E20.isa, v14);

      uint64_t v15 = [(id)v35[5] localizedRecoverySuggestion];
      NSLog(&stru_1F38B1E20.isa, v15);
    }
    id v16 = (id)v29[5];

    _Block_object_dispose(&v28, 8);
    _Block_object_dispose(&v34, 8);
  }
  else
  {
    id v16 = 0;
  }

  return v16;
}

void sub_1DD4E0B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v36 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1DD4E0BA8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1DD4E0BB8(uint64_t a1)
{
}

void sub_1DD4E0BC0(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = [*(id *)(a1 + 32) tracksWithMediaType:*MEMORY[0x1E4F15C18]];
  if ([v2 count] == 1)
  {
    uint64_t v3 = [v2 objectAtIndex:0];
    uint64_t v4 = v3;
    if (v3)
    {
      [v3 preferredTransform];
    }
    else
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v54 = 0u;
    }
    unint64_t v9 = *(_OWORD **)(a1 + 72);
    long long v10 = v54;
    long long v11 = v56;
    v9[1] = v55;
    _OWORD v9[2] = v11;
    *unint64_t v9 = v10;
    [v4 naturalSize];
    double width = v12;
    double height = v14;
    [v4 formatDescriptions];
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = [v16 countByEnumeratingWithState:&v50 objects:v57 count:16];
    if (v17)
    {
      uint64_t v18 = *(void *)v51;
      while (2)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v51 != v18) {
            objc_enumerationMutation(v16);
          }
          id v20 = *(const opaqueCMFormatDescription **)(*((void *)&v50 + 1) + 8 * i);
          if (CMFormatDescriptionGetMediaType(v20) == 1986618469)
          {
            CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v20);
            double width = (double)Dimensions.width;
            double height = (double)Dimensions.height;
            goto LABEL_16;
          }
        }
        uint64_t v17 = [v16 countByEnumeratingWithState:&v50 objects:v57 count:16];
        if (v17) {
          continue;
        }
        break;
      }
    }
LABEL_16:

    id v22 = objc_alloc(MEMORY[0x1E4F16378]);
    uint64_t v23 = *(void *)(a1 + 32);
    id v49 = 0;
    uint64_t v24 = (void *)[v22 initWithAsset:v23 error:&v49];
    id v25 = v49;
    id v26 = v49;
    long long v27 = v26;
    CMTimeEpoch v47 = v24;
    if (v26)
    {
      id v28 = [v26 localizedDescription];
      NSLog(&cfstr_ErrorCreatingM.isa, [v28 UTF8String]);

      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v25);
    }
    if ((*(unsigned char *)(a1 + 92) & 1) != 0
      && (*(unsigned char *)(a1 + 116) & 1) != 0
      && !*(void *)(a1 + 120)
      && (*(void *)(a1 + 104) & 0x8000000000000000) == 0
      && !*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      long long v44 = *(_OWORD *)(a1 + 96);
      v48[0] = *(_OWORD *)(a1 + 80);
      v48[1] = v44;
      v48[2] = *(_OWORD *)(a1 + 112);
      [v24 setTimeRange:v48];
    }
    unsigned int v29 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v30 = *(void *)(a1 + 40);
    float32x2_t v31 = [NSNumber numberWithUnsignedLong:(uint64_t)rint(width)];
    int v32 = [NSNumber numberWithUnsignedLong:(uint64_t)rint(height)];
    id v33 = [NSNumber numberWithUnsignedInt:16];
    uint64_t v34 = objc_msgSend(v29, "dictionaryWithObjectsAndKeys:", v30, *MEMORY[0x1E4F24D70], v31, *MEMORY[0x1E4F24E10], v32, *MEMORY[0x1E4F24D08], v33, *MEMORY[0x1E4F24C98], MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F24D40], 0);

    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      uint64_t v35 = [MEMORY[0x1E4F163A0] assetReaderTrackOutputWithTrack:v4 outputSettings:v34];
      [v47 addOutput:v35];

      uint64_t v36 = [v47 error];
      uint64_t v37 = *(void *)(*(void *)(a1 + 56) + 8);
      unint64_t v38 = *(void **)(v37 + 40);
      *(void *)(v37 + 40) = v36;

      if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)
        || ([v47 startReading],
            [v47 error],
            uint64_t v39 = objc_claimAutoreleasedReturnValue(),
            uint64_t v40 = *(void *)(*(void *)(a1 + 56) + 8),
            int v41 = *(void **)(v40 + 40),
            *(void *)(v40 + 40) = v39,
            v41,
            *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)))
      {
        uint64_t v42 = *(void *)(*(void *)(a1 + 64) + 8);
        BOOL v43 = *(void **)(v42 + 40);
        *(void *)(v42 + 40) = 0;
      }
      else
      {
        uint64_t v45 = *(void *)(*(void *)(a1 + 64) + 8);
        id v46 = v47;
        BOOL v43 = *(void **)(v45 + 40);
        *(void *)(v45 + 40) = v46;
      }
    }
    id v8 = v4;
  }
  else
  {
    uint64_t v5 = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"InertiaCamVideoUtilDomain" code:-1 userInfo:0];
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    id v8 = 0;
  }
  [*(id *)(a1 + 48) lock];
  [*(id *)(a1 + 48) unlockWithCondition:2];
}

void sub_1DD4E1068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void ICDebugExpWriteVideoWithHomographies(uint64_t a1)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v139 = *(void *)(a1 + 8);
  CMTime v130 = [*(id *)a1 tracksWithMediaType:*MEMORY[0x1E4F15C18]];
  v194[0] = 0x3FF0000000000000;
  memset(&v194[1], 0, 24);
  v194[4] = 0x3FF0000000000000;
  memset(&v194[5], 0, 24);
  v194[8] = 0x3FF0000000000000;
  sub_1DD4BC7C4((uint64_t)v181, 0, (uint64_t)v194);
  uint64_t v1 = [NSNumber numberWithUnsignedInt:1111970369];
  v193 = v1;
  CMTime v131 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v193 count:1];

  id v2 = *(id *)a1;
  long long v3 = *(_OWORD *)(a1 + 40);
  v179[0] = *(_OWORD *)(a1 + 24);
  v179[1] = v3;
  v179[2] = *(_OWORD *)(a1 + 56);
  uint64_t v152 = sub_1DD4E087C(v2, v179, v131, (uint64_t)&v180);
  uint64_t v4 = [v130 objectAtIndex:0];
  long long v5 = *(_OWORD *)(v139 + 72);
  long long v177 = *(_OWORD *)(v139 + 56);
  long long v178 = v5;
  double v145 = *((double *)&v5 + 1);
  double v146 = *(double *)&v5;
  double v142 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
  double v143 = *MEMORY[0x1E4F1DB28];
  double v140 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  double v141 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
  int v6 = *(unsigned __int8 *)(a1 + 75);
  CMTime v129 = v4;
  [v4 naturalSize];
  double v8 = v7;
  double v10 = v9;
  v176[0] = v7;
  v176[1] = v9;
  if (v6)
  {
    sub_1DD4E05F0(v176, (unint64_t *)(v139 + 24), (uint64_t)&v177);
    double v142 = *(double *)(v139 + 64);
    double v143 = *(double *)(v139 + 56);
    double v140 = *(double *)(v139 + 80);
    double v141 = *(double *)(v139 + 72);
  }
  if (*((double *)&v178 + 1) > 1920.0 || *(double *)&v178 > 1920.0)
  {
    if (*(double *)&v178 >= *((double *)&v178 + 1)) {
      double v11 = *(double *)&v178;
    }
    else {
      double v11 = *((double *)&v178 + 1);
    }
    float v12 = v11;
    double v13 = (float)(1920.0 / v12);
    double v145 = *((double *)&v178 + 1) * v13;
    double v146 = *(double *)&v178 * v13;
  }
  double v15 = v145;
  double v14 = v146;
  if (*(unsigned char *)(a1 + 72))
  {
    long long v177 = 0uLL;
    double v14 = v8;
    double v15 = v10;
    *(double *)&long long v178 = v8;
    *((double *)&v178 + 1) = v10;
  }
  CGAffineTransform v174 = v180;
  memset(&v175, 0, sizeof(v175));
  CGAffineTransformInvert(&v175, &v174);
  if (v175.tx != 0.0)
  {
    double v16 = -v14;
    if (v175.tx > 0.0) {
      double v16 = v14;
    }
    v175.tCGFloat x = v16;
  }
  if (v175.ty != 0.0)
  {
    double v17 = -v15;
    if (v175.ty > 0.0) {
      double v17 = v15;
    }
    v175.tdouble y = v17;
  }
  CGAffineTransform v173 = v175;
  CGAffineTransformInvert(&v189, &v173);
  CGAffineTransform v180 = v189;
  if ((*(unsigned char *)(a1 + 36) & 1) == 0
    || (*(unsigned char *)(a1 + 60) & 1) == 0
    || *(void *)(a1 + 64)
    || (*(void *)(a1 + 48) & 0x8000000000000000) != 0)
  {
    uint64_t v18 = v129;
    if (!v129)
    {
LABEL_27:
      memset(&v189, 0, sizeof(v189));
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v18 = v152;
    if (!v152) {
      goto LABEL_27;
    }
  }
  [v18 timeRange];
LABEL_28:
  CGAffineTransform v184 = v189;
  *(_OWORD *)&lhs.value = *(_OWORD *)&v189.a;
  lhs.CMTimeEpoch epoch = *(void *)&v189.c;
  CMTime rhs = *(CMTime *)&v189.d;
  CMTimeAdd((CMTime *)&v189, &lhs, &rhs);
  long long v185 = *(_OWORD *)&v189.a;
  CGFloat c = v189.c;
  char v144 = objc_opt_respondsToSelector();
  if (v144)
  {
    id v19 = *(void **)(a1 + 88);
    CMTime v170 = *(CMTime *)&v184.a;
    CGAffineTransform v169 = v184;
    *(float *)&double v20 = sub_1DD4E24D8(&v170, (CMTime *)&v169);
    [v19 ICReportProgress:v20];
  }
  v189.a = 1.0;
  memset(&v189.b, 0, 24);
  v189.tCGFloat x = 1.0;
  v189.tdouble y = 0.0;
  uint64_t v191 = 0;
  uint64_t v190 = 0;
  uint64_t v192 = 0x3FF0000000000000;
  id v138 = *(id *)(a1 + 16);
  if (!v138)
  {
    id v21 = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
    id v22 = [v21 objectAtIndex:0];
    uint64_t v23 = NSString;
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    id v25 = [v23 stringWithFormat:@"%.0f.%@", v24 * 1000.0, @"mov"];
    id v138 = [v22 stringByAppendingPathComponent:v25];
  }
  id v26 = [VideoFrameWriterQueue alloc];
  long long v27 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v138];
  CGAffineTransform v168 = v180;
  long long v166 = *(_OWORD *)&v184.a;
  CGFloat v167 = v184.c;
  long long v164 = v185;
  CGFloat v165 = c;
  uint64_t v157 = -[VideoFrameWriterQueue initWithOutputURL:forMovieDimensions:outputTransform:startTime:endTime:](v26, "initWithOutputURL:forMovieDimensions:outputTransform:startTime:endTime:", v27, &v168, &v166, &v164, v14, v15);

  [(VideoFrameWriterQueue *)v157 StartWatchingForFrames];
  long long v151 = objc_alloc_init(CIHomographyResampler);
  unint64_t v132 = 0;
  uint64_t v153 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  float64x2_t v136 = (void *)*MEMORY[0x1E4F243F0];
  CMTime v134 = (void *)*MEMORY[0x1E4F24778];
  float64x2_t v135 = (void *)*MEMORY[0x1E4F24740];
  CMTime v133 = (void *)*MEMORY[0x1E4F247C0];
  do
  {
    context = (void *)MEMORY[0x1E01B7BB0]();
    id v158 = v152;
    if ([v158 status] != 1)
    {

LABEL_46:
      [v158 status];
      char v36 = 1;
      goto LABEL_111;
    }
    id v28 = [v158 outputs];
    unsigned int v29 = [v28 objectAtIndex:0];

    sCGRect buf = (opaqueCMSampleBuffer *)[v29 copyNextSampleBuffer];
    uint64_t v30 = [v158 error];
    float32x2_t v31 = v30;
    if (v30)
    {
      NSLog(&cfstr_ReaderErrorD.isa, [v30 code]);
      NSLog(&cfstr_Description.isa, v31);
    }

    if (!sbuf) {
      goto LABEL_46;
    }
    CMSampleBufferGetSampleTimingInfo(sbuf, 0, &timingInfoOut);
    if (*(unsigned char *)(a1 + 72)
      || (uint64_t v32 = *(void *)(v139 + 24), v33 = v132, v132 >= 0x86BCA1AF286BCA1BLL * ((*(void *)(v139 + 32) - v32) >> 4)))
    {
      uint64_t v35 = v181;
    }
    else
    {
      uint64_t v34 = v32 + 304 * v132;
      if (*(void *)(v34 + 104) == v153) {
        uint64_t v35 = (unsigned char *)v34;
      }
      else {
        uint64_t v35 = v181;
      }
      if (*(void *)(v34 + 104) == v153) {
        unint64_t v33 = v132 + 1;
      }
      unint64_t v132 = v33;
    }
    for (uint64_t i = 0; i != 72; i += 8)
      *(CGFloat *)((char *)&v189.a + i) = *(CGFloat *)&v35[i];
    ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
    double v39 = *((double *)&v177 + 1);
    double v148 = *(double *)&v178;
    CFTypeRef cf = (CFTypeRef)v177;
    double v147 = *((double *)&v178 + 1);
    [(ImageHomographyResampler *)v151 setHomographyMatrix:&v189];
    if (*(unsigned char *)(a1 + 73))
    {
      CVPixelBufferLockBaseAddress(ImageBuffer, 0);
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(ImageBuffer);
      if (PixelFormatType == 32) {
        int v41 = 16386;
      }
      else {
        int v41 = 2;
      }
      if (PixelFormatType == 1111970369) {
        uint32_t v42 = 8194;
      }
      else {
        uint32_t v42 = v41;
      }
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(ImageBuffer);
      size_t Width = CVPixelBufferGetWidth(ImageBuffer);
      size_t Height = CVPixelBufferGetHeight(ImageBuffer);
      CGRect CleanRect = CVImageBufferGetCleanRect(ImageBuffer);
      CGFloat x = CleanRect.origin.x;
      double y = CleanRect.origin.y;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      BaseAddress = CVPixelBufferGetBaseAddress(ImageBuffer);
      long long v50 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, DeviceRGB, v42);
      CGColorSpaceRelease(DeviceRGB);
      CGContextSaveGState(v50);
      CGContextTranslateCTM(v50, x, -y);
      size_t v51 = CVPixelBufferGetHeight(ImageBuffer);
      CGContextTranslateCTM(v50, 0.0, (double)v51);
      CGContextScaleCTM(v50, 1.0, -1.0);
      uint64_t v52 = *((void *)v35 + 10);
      if (*((void *)v35 + 11) != v52)
      {
        uint64_t v53 = 0;
        unsigned int v54 = 0;
        do
        {
          uint64_t v55 = v52 + (v53 << 6);
          uint64_t v56 = *(void *)(v55 + 16);
          if (v56)
          {
            unsigned int v57 = 0;
            unint64_t v58 = *(void *)(v55 + 16);
            do
            {
              ++v57;
              char v59 = v58;
              v58 >>= 1;
            }
            while ((v59 & 2) != 0);
          }
          else
          {
            unsigned int v57 = 0;
          }
          if (v57 >= 0xF) {
            int v60 = 15;
          }
          else {
            int v60 = v57;
          }
          float v61 = *(float *)v55;
          float v62 = *(float *)(v55 + 4);
          float v63 = *(float *)(v55 + 8);
          float v64 = *(float *)(v55 + 12);
          int v65 = *(__int16 *)(v55 + 56);
          if (v56)
          {
            if ((v56 & 2) != 0 || v65 < 2)
            {
              CGFloat v68 = 1.0;
              CGFloat v67 = 0.0;
              CGContextSetRGBStrokeColor(v50, 0.0, 1.0, 0.0, 1.0);
              CGFloat v66 = 0.0;
            }
            else
            {
              CGFloat v68 = 1.0;
              CGFloat v67 = 0.0;
              CGContextSetRGBStrokeColor(v50, 0.0, 1.0, 1.0, 1.0);
              CGFloat v66 = 1.0;
            }
          }
          else if ((v56 & 2) != 0 && v65 >= 2)
          {
            CGFloat v66 = 0.0;
            CGFloat v67 = 1.0;
            CGContextSetRGBStrokeColor(v50, 1.0, 1.0, 0.0, 1.0);
            CGFloat v68 = 1.0;
          }
          else
          {
            CGFloat v68 = 0.0;
            CGFloat v67 = 1.0;
            CGContextSetRGBStrokeColor(v50, 1.0, 0.0, 0.0, 1.0);
            CGFloat v66 = 0.0;
          }
          CGContextSetRGBFillColor(v50, v67, v68, v66, 1.0);
          float v69 = (float)v60 + 2.0;
          double v70 = (float)(v69 * 0.5);
          v200.origin.CGFloat x = v61 - v70;
          v200.origin.double y = v62 - v70;
          v200.size.double width = v69;
          v200.size.double height = v200.size.width;
          CGContextFillEllipseInRect(v50, v200);
          CGContextBeginPath(v50);
          CGContextMoveToPoint(v50, v61, v62);
          CGContextAddLineToPoint(v50, v63, v64);
          CGContextStrokePath(v50);
          uint64_t v52 = *((void *)v35 + 10);
          uint64_t v53 = ++v54;
        }
        while (v54 < (unint64_t)((*((void *)v35 + 11) - v52) >> 6));
      }
      CGContextRestoreGState(v50);
      CVPixelBufferUnlockBaseAddress(ImageBuffer, 0);
      CGContextRelease(v50);
    }
    double v71 = *(void **)(a1 + 80);
    if (v71)
    {
      BOOL v72 = [v71 objectForKeyedSubscript:IC_C_L1_SALIENT_RECTS];
      BOOL v73 = v72 == 0;

      if (v73)
      {
        p_CGRect rect = 0;
      }
      else
      {
        double v74 = [*(id *)(a1 + 80) objectForKeyedSubscript:IC_C_L1_SALIENT_RECTS];
        CFDictionaryRef v75 = [v74 objectAtIndexedSubscript:v153];
        CGRectMakeWithDictionaryRepresentation(v75, &rect);

        p_CGRect rect = &rect;
      }
      long long v77 = [*(id *)(a1 + 80) objectForKeyedSubscript:IC_C_L1_CENTER_TARGETS];
      BOOL v78 = v77 == 0;

      if (v78)
      {
        uint64_t v81 = 0;
      }
      else
      {
        float v79 = [*(id *)(a1 + 80) objectForKeyedSubscript:IC_C_L1_CENTER_TARGETS];
        CFDictionaryRef v80 = [v79 objectAtIndexedSubscript:v153];
        CGPointMakeWithDictionaryRepresentation(v80, &rect.origin);

        uint64_t v81 = &rect;
      }
      CVPixelBufferLockBaseAddress(ImageBuffer, 0);
      size_t v82 = CVPixelBufferGetBytesPerRow(ImageBuffer);
      size_t v83 = CVPixelBufferGetWidth(ImageBuffer);
      size_t v84 = CVPixelBufferGetHeight(ImageBuffer);
      CGRect v201 = CVImageBufferGetCleanRect(ImageBuffer);
      CGFloat v85 = v201.origin.x;
      double v86 = v201.origin.y;
      long long v87 = CGColorSpaceCreateDeviceRGB();
      long long v88 = CVPixelBufferGetBaseAddress(ImageBuffer);
      char v89 = CGBitmapContextCreate(v88, v83, v84, 8uLL, v82, v87, 0x4002u);
      CGColorSpaceRelease(v87);
      CGContextSaveGState(v89);
      CGContextTranslateCTM(v89, v85, -v86);
      size_t v90 = CVPixelBufferGetHeight(ImageBuffer);
      CGContextTranslateCTM(v89, 0.0, (double)v90);
      CGContextScaleCTM(v89, 1.0, -1.0);
      CGContextSetRGBStrokeColor(v89, 0.0, 1.0, 0.0, 1.0);
      CGContextSetRGBFillColor(v89, 0.0, -1.0, 0.5, 0.5);
      if (p_rect)
      {
        CGContextSetLineWidth(v89, 3.0);
        CGContextStrokeRect(v89, *p_rect);
        CGContextFillRect(v89, *p_rect);
      }
      if (v81)
      {
        double v91 = v81->origin.x;
        double v92 = v81->origin.y;
        CGContextSetRGBFillColor(v89, 0.0, 1.0, 0.0, 1.0);
        v202.origin.double y = v92 + -12.5;
        v202.origin.CGFloat x = v91 + -12.5;
        v202.size.double width = 25.0;
        v202.size.double height = 25.0;
        CGContextFillEllipseInRect(v89, v202);
      }
      CGContextRestoreGState(v89);
      CVPixelBufferUnlockBaseAddress(ImageBuffer, 0);
      CGContextRelease(v89);
    }
    -[CIHomographyResampler setHightlightRect:](v151, "setHightlightRect:", v143, v142, v141, v140);
    long long v93 = -[CIHomographyResampler ResampleCVPixels:clipToRect:outputSize:](v151, "ResampleCVPixels:clipToRect:outputSize:", ImageBuffer, *(double *)&cf, v39, v148, v147, v146, v145);
    if (*(unsigned char *)(a1 + 74))
    {
      uint64_t v94 = objc_msgSend(NSString, "stringWithFormat:", @"%d %6.4f ", v153, *((float *)v35 + 42));
      uint64_t v95 = v94;
      char v96 = v35[75];
      if (v96)
      {
        uint64_t v97 = [v94 stringByAppendingString:@"A"];

        char v96 = v35[75];
        uint64_t v95 = (void *)v97;
      }
      if ((v96 & 2) != 0)
      {
        uint64_t v98 = [v95 stringByAppendingString:@"I"];

        char v96 = v35[75];
        uint64_t v95 = (void *)v98;
      }
      if ((v96 & 4) != 0)
      {
        uint64_t v99 = [v95 stringByAppendingString:@"C"];

        char v96 = v35[75];
        uint64_t v95 = (void *)v99;
      }
      if ((v96 & 8) != 0)
      {
        uint64_t v100 = [v95 stringByAppendingString:@"T"];

        uint64_t v95 = (void *)v100;
      }
      if (v35[73]) {
        double v101 = 0.7;
      }
      else {
        double v101 = 0.0;
      }
      uint64_t v102 = v95;
      CVPixelBufferLockBaseAddress(v93, 0);
      OSType v103 = CVPixelBufferGetPixelFormatType(v93);
      if (v103 == 32) {
        int v104 = 16386;
      }
      else {
        int v104 = 2;
      }
      if (v103 == 1111970369) {
        uint32_t v105 = 8194;
      }
      else {
        uint32_t v105 = v104;
      }
      size_t v106 = CVPixelBufferGetBytesPerRow(v93);
      size_t v107 = CVPixelBufferGetWidth(v93);
      size_t v108 = CVPixelBufferGetHeight(v93);
      CGRect v203 = CVImageBufferGetCleanRect(v93);
      double v109 = v203.origin.x;
      double v110 = v203.origin.y;
      unint64_t v111 = CGColorSpaceCreateDeviceRGB();
      float64x2_t v112 = CVPixelBufferGetBaseAddress(v93);
      long long v113 = CGBitmapContextCreate(v112, v107, v108, 8uLL, v106, v111, v105);
      CGColorSpaceRelease(v111);
      CGContextSaveGState(v113);
      cfa = CTFontDescriptorCreateWithNameAndSize(@"Courier", 11.0);
      CTFontRef v114 = CTFontCreateWithFontDescriptor(cfa, 0.0, 0);
      CGRect rect = *(CGRect *)ymmword_1DD512188;
      ColorSpace = CGBitmapContextGetColorSpace(v113);
      CGColorRef v116 = CGColorCreate(ColorSpace, &rect.origin.x);
      int valuePtr = 1071225242;
      CFNumberRef v117 = CFNumberCreate(allocator, kCFNumberFloat32Type, &valuePtr);
      int v187 = -1073741824;
      CFNumberRef v118 = CFNumberCreate(allocator, kCFNumberFloat32Type, &v187);
      keys[0] = v136;
      keys[1] = v135;
      keys[2] = v134;
      keys[3] = v133;
      values[0] = v114;
      values[1] = v116;
      values[2] = v117;
      values[3] = v118;
      CFDictionaryRef v119 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFAttributedStringRef v120 = CFAttributedStringCreate(allocator, v102, v119);
      long long v121 = CTLineCreateWithAttributedString(v120);
      CGRect ImageBounds = CTLineGetImageBounds(v121, v113);
      double v122 = ImageBounds.size.width;
      double v123 = ImageBounds.size.height;
      CGContextSetRGBFillColor(v113, v101, 0.0, 0.0, 1.0);
      v205.size.double width = v122 + 12.0;
      v205.size.double height = v123 + 12.0;
      v205.origin.CGFloat x = v109;
      v205.origin.double y = v110;
      CGContextFillRect(v113, v205);
      CGContextSetTextPosition(v113, v109 + 6.0, v110 + 6.0);
      CTLineDraw(v121, v113);
      CFRelease(v121);
      CFRelease(v120);
      CFRelease(v117);
      CFRelease(v118);
      CFRelease(v119);
      CFRelease(v116);
      CFRelease(v114);
      CFRelease(cfa);
      CGContextRestoreGState(v113);
      CVPixelBufferUnlockBaseAddress(v93, 0);
      CGContextRelease(v113);
    }
    double v124 = objc_alloc_init(VideoFrameWriterElement);
    [(VideoFrameWriterElement *)v124 setPixelBuffer:v93];
    CMTime presentationTimeStamp = timingInfoOut.presentationTimeStamp;
    [(VideoFrameWriterElement *)v124 setFrameTime:&presentationTimeStamp];
    [(VideoFrameWriterElement *)v124 setFrameNumber:v153];
    [(VideoFrameWriterQueue *)v157 AddAFrame:v124];
    CFRelease(sbuf);
    if (v144)
    {
      int32_t v125 = *(void **)(a1 + 88);
      CMTime v161 = timingInfoOut.presentationTimeStamp;
      CGAffineTransform v160 = v184;
      *(float *)&double v126 = sub_1DD4E24D8(&v161, (CMTime *)&v160);
      [v125 ICReportProgress:v126];
    }

    char v36 = 0;
    ++v153;
LABEL_111:
    [(VideoFrameWriterQueue *)v157 DrainIfAbove:16 downTo:2];
  }
  while ((v36 & 1) == 0 && [(VideoFrameWriterQueue *)v157 writeSuccess]);
  if (![(VideoFrameWriterQueue *)v157 WaitForFinish])
  {
    puts("Error writing movie file.");
    if (v138)
    {
      long long v127 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v159 = 0;
      [v127 removeItemAtPath:v138 error:&v159];
      id v128 = v159;

      if (v128)
      {
        NSLog(&cfstr_DeleteMovieErr.isa);
        NSLog(&stru_1F38B1E20.isa, v128);
      }
    }
  }

  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
}

void sub_1DD4E22C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  char v36 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v36;
    operator delete(v36);
  }

  _Unwind_Resume(a1);
}

float sub_1DD4E24D8(CMTime *a1, CMTime *a2)
{
  memset(&v6, 0, sizeof(v6));
  CMTime lhs = *a1;
  CMTime v4 = *a2;
  CMTimeSubtract(&v6, &lhs, &v4);
  return (float)((float)v6.value / (float)v6.timescale) / (float)((float)a2[1].value / (float)a2[1].timescale);
}

uint64_t sub_1DD4E2564(__CVBuffer *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a5;
  objc_opt_respondsToSelector();
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType == 875704422 || PixelFormatType == 875704438 || PixelFormatType == 1278226488)
  {
    uint64_t v9 = *(void *)(a4 + 248);
    CGRect CleanRect = CVImageBufferGetCleanRect(a1);
    double x = CleanRect.origin.x;
    double y = CleanRect.origin.y;
    double width = CleanRect.size.width;
    double height = CleanRect.size.height;
    CVPixelBufferLockBaseAddress(a1, 0);
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    vImagePixelCount HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
    vImagePixelCount WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
    uint64_t v29 = v9;
    double v16 = sub_1DD4DC690(v9, width, height);
    double v17 = v16;
    uint64_t v18 = *(void **)(a4 + 280);
    if (v18 && v16[6])
    {
      id v19 = (uint64_t *)sub_1DD4DC690(v29, width, height);
      double v20 = sub_1DD4CD934(v18, a1, (uint64_t)v17[6], v19[6]);
      if (v20)
      {
        CVBufferSetAttachment((CVBufferRef)v17[6], @"fast9", (CFTypeRef)v19[6], kCVAttachmentMode_ShouldNotPropagate);
        CVBufferSetAttachment((CVBufferRef)v17[6], @"metalOpHandle", v20, kCVAttachmentMode_ShouldNotPropagate);
        sub_1DD4F825C(v19);
        goto LABEL_18;
      }
      sub_1DD4DC72C(v29, v19);
    }
    id v21 = (__CVBuffer *)v17[6];
    if (v21)
    {
      CVPixelBufferLockBaseAddress(v21, 0);
      atomic_fetch_add((atomic_uint *volatile)v17 + 14, 1u);
      id v22 = (char *)v17[5] + (void)CVPixelBufferGetBaseAddressOfPlane((CVPixelBufferRef)v17[6], 0);
      *double v17 = v22;
    }
    else
    {
      id v22 = (char *)*v17;
    }
    uint64_t v23 = 0;
    int32_t divisor = 0;
    src.data = BaseAddressOfPlane;
    src.double height = HeightOfPlane;
    src.double width = WidthOfPlane;
    src.rowBytes = BytesPerRowOfPlane;
    dest.data = v22;
    *(int8x16_t *)&dest.double height = vextq_s8(*(int8x16_t *)(v17 + 1), *(int8x16_t *)(v17 + 1), 8uLL);
    dest.rowBytes = (size_t)v17[3];
    *(_OWORD *)kernel = xmmword_1DD5121A8;
    __int16 v33 = 3;
    do
      divisor += kernel[v23++];
    while (v23 != 9);
    vImageConvolve_Planar8(&src, &dest, 0, (unint64_t)x, (unint64_t)((double)HeightOfPlane - (y + height)), kernel, 3u, 3u, divisor, 0, 8u);
    id v25 = (__CVBuffer *)v17[6];
    if (v25)
    {
      CVPixelBufferUnlockBaseAddress(v25, 0);
      if (atomic_fetch_add((atomic_uint *volatile)v17 + 14, 0xFFFFFFFF) == 1) {
        *double v17 = 0;
      }
    }
LABEL_18:
    operator new();
  }

  return 0xFFFFFFFFLL;
}

void sub_1DD4E292C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4E2994(int8x16_t *a1, int8x16_t **a2, float *a3, uint64_t *a4, int32x2_t *a5, uint64_t a6, unsigned __int32 a7, float a8)
{
  *a5 = vdup_n_s32(0x101u);
  *(void *)a6 = 0;
  unint64_t v8 = (unint64_t)a2[2];
  if (!v8) {
    return 0;
  }
  uint64_t v9 = 0;
  double v10 = *a2;
  int8x16_t v11 = vaddq_s8(vcntq_s8(veorq_s8((*a2)[1], a1[1])), vcntq_s8(veorq_s8(**a2, *a1)));
  *(int8x8_t *)v11.i8 = vadd_s8((int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), *(int8x8_t *)v11.i8);
  *(int8x8_t *)v11.i8 = vpadd_s8(*(int8x8_t *)v11.i8, *(int8x8_t *)v11.i8);
  v11.i16[0] = vpadd_s8(*(int8x8_t *)v11.i8, *(int8x8_t *)v11.i8).u16[0];
  v12.i32[0] = v11.u8[0];
  v12.i32[1] = v11.u8[1];
  int32x2_t v13 = (int32x2_t)vand_s8(v12, (int8x8_t)0xFF000000FFLL);
  a5->i32[0] = vadd_s32(vdup_lane_s32(v13, 1), v13).u32[0];
  *(_DWORD *)a6 = 0;
  if (v8 != 1)
  {
    float v14 = a8 * a8;
    uint64_t v15 = *a4;
    float v17 = *a3;
    float v16 = a3[1];
    float v18 = v16 + a8;
    unsigned int v19 = 2;
    uint64_t v20 = 1;
    while (1)
    {
      float v21 = *(float *)(v15 + 8 * v20 + 4);
      if (v21 > v18) {
        break;
      }
      if ((float)((float)((float)(v16 - v21) * (float)(v16 - v21))
                 + (float)((float)(v17 - *(float *)(v15 + 8 * v20)) * (float)(v17 - *(float *)(v15 + 8 * v20)))) < v14)
      {
        int8x16_t v22 = vaddq_s8(vcntq_s8(veorq_s8(v10[2 * v20 + 1], a1[1])), vcntq_s8(veorq_s8(v10[2 * v20], *a1)));
        *(int8x8_t *)v22.i8 = vadd_s8((int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(int8x8_t *)v22.i8);
        *(int8x8_t *)v22.i8 = vpadd_s8(*(int8x8_t *)v22.i8, *(int8x8_t *)v22.i8);
        v22.i16[0] = vpadd_s8(*(int8x8_t *)v22.i8, *(int8x8_t *)v22.i8).u16[0];
        v23.i32[0] = v22.u8[0];
        v23.i32[1] = v22.u8[1];
        *(int8x8_t *)v22.i8 = vand_s8(v23, (int8x8_t)0xFF000000FFLL);
        unsigned __int32 v24 = vadd_s32(vdup_lane_s32(*(int32x2_t *)v22.i8, 1), *(int32x2_t *)v22.i8).u32[0];
        if (v24 < a5->i32[1])
        {
          if (v24 >= a5->i32[0])
          {
            uint64_t v25 = 1;
          }
          else
          {
            if (v24 < a7) {
              return 1;
            }
            uint64_t v25 = 0;
            a5->i32[1] = a5->i32[0];
            *(_DWORD *)(a6 + 4) = *(_DWORD *)a6;
          }
          a5->i32[v25] = v24;
          *(_DWORD *)(a6 + 4 * v25) = v19 - 1;
        }
      }
      uint64_t v20 = v19;
      if (v8 <= v19++) {
        return 0;
      }
    }
    return 0;
  }
  return v9;
}

void sub_1DD4E2B10(void *a1, void *a2, void *a3, void *a4, unsigned int a5, uint64_t a6, float a7)
{
  unint64_t v7 = a3[2];
  if (v7)
  {
    unint64_t v15 = 0;
    int v16 = 0;
    float v17 = a7 * a7;
    float v18 = -a7;
    uint64_t v45 = a6 + 16;
    do
    {
      unsigned int v19 = (float *)(*a3 + 8 * v15);
      unint64_t v20 = a4[2];
      unint64_t v21 = v16;
      if (v20 > v16)
      {
        int8x16_t v22 = (float *)(*a4 + 8 * v16 + 4);
        do
        {
          if (*v22 >= (float)(v19[1] - a7)) {
            break;
          }
          ++v21;
          v22 += 2;
        }
        while (v20 > v21);
        int v16 = v21;
        unint64_t v21 = (int)v21;
      }
      if (v20 > v21)
      {
        char v23 = 0;
        int v24 = 0;
        uint64_t v25 = (int8x16_t *)(*a2 + 32 * v21 + 16);
        id v26 = (float *)(*a4 + 8 * v21 + 4);
        unsigned int v27 = a5;
        do
        {
          float v28 = *(float *)(*a3 + 8 * v15 + 4) - *v26;
          if (v28 < v18) {
            break;
          }
          if ((float)((float)(v28 * v28) + (float)((float)(*v19 - *(v26 - 1)) * (float)(*v19 - *(v26 - 1)))) <= v17)
          {
            int8x16_t v29 = vaddq_s8(vcntq_s8(veorq_s8(*v25, *(int8x16_t *)(*a1 + 32 * v15 + 16))), vcntq_s8(veorq_s8(v25[-1], *(int8x16_t *)(*a1 + 32 * v15))));
            *(int8x8_t *)v29.i8 = vadd_s8((int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(int8x8_t *)v29.i8);
            *(int8x8_t *)v29.i8 = vpadd_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)v29.i8);
            v29.i16[0] = vpadd_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)v29.i8).u16[0];
            v30.i32[0] = v29.u8[0];
            v30.i32[1] = v29.u8[1];
            *(int8x8_t *)v29.i8 = vand_s8(v30, (int8x8_t)0xFF000000FFLL);
            unsigned __int32 v31 = vadd_s32(vdup_lane_s32(*(int32x2_t *)v29.i8, 1), *(int32x2_t *)v29.i8).u32[0];
            BOOL v32 = v31 <= v27;
            if (v31 <= v27) {
              int v24 = v21;
            }
            if (v31 < v27) {
              unsigned int v27 = v31;
            }
            v23 |= v32;
          }
          ++v21;
          v25 += 2;
          v26 += 2;
        }
        while (v20 > v21);
        if (v23)
        {
          float v33 = (float)(int)v27;
          uint64_t v35 = *(_DWORD **)(a6 + 8);
          unint64_t v34 = *(void *)(a6 + 16);
          if ((unint64_t)v35 >= v34)
          {
            uint64_t v37 = *(_DWORD **)a6;
            uint64_t v38 = ((uint64_t)v35 - *(void *)a6) >> 4;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 60) {
              sub_1DD4BACA0();
            }
            uint64_t v40 = v34 - (void)v37;
            if (v40 >> 3 > v39) {
              unint64_t v39 = v40 >> 3;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              uint32_t v42 = (char *)sub_1DD4BE0AC(v45, v41);
              uint64_t v37 = *(_DWORD **)a6;
              uint64_t v35 = *(_DWORD **)(a6 + 8);
            }
            else
            {
              uint32_t v42 = 0;
            }
            BOOL v43 = &v42[16 * v38];
            *(_DWORD *)BOOL v43 = v15;
            *((_DWORD *)v43 + 1) = v24;
            *((_DWORD *)v43 + 2) = 0;
            *((float *)v43 + 3) = v33;
            long long v44 = v43;
            if (v35 != v37)
            {
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v35 - 1);
                v44 -= 16;
                v35 -= 4;
              }
              while (v35 != v37);
              uint64_t v37 = *(_DWORD **)a6;
            }
            char v36 = v43 + 16;
            *(void *)a6 = v44;
            *(void *)(a6 + 8) = v43 + 16;
            *(void *)(a6 + 16) = &v42[16 * v41];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            *uint64_t v35 = v15;
            v35[1] = v24;
            v35[2] = 0;
            char v36 = (char *)(v35 + 4);
            *((float *)v35 + 3) = v33;
          }
          *(void *)(a6 + 8) = v36;
          unint64_t v7 = a3[2];
        }
      }
      ++v15;
    }
    while (v7 > v15);
  }
}

void sub_1DD4E2DC4(int8x16_t **a1, void *a2, uint64_t *a3, void *a4, float a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a7;
  uint64_t v8 = a7[1];
  if (v8 != *a7)
  {
    uint64_t v15 = 0;
    unsigned int v16 = 0;
    uint64_t v35 = a8 + 16;
    do
    {
      float v17 = (float *)(v9 + 16 * v15);
      float v18 = *v17;
      uint64_t v19 = *((unsigned int *)v17 + 1);
      int v20 = *((_DWORD *)v17 + 2);
      float v21 = v17[3];
      if ((sub_1DD4E2994((int8x16_t *)(*a2 + 32 * v19), a1, (float *)(*a4 + 8 * v19), a3, &v38, (uint64_t)&v39, v21, a5) & 1) == 0&& v39 == LODWORD(v18))
      {
        LODWORD(v23) = v38.i32[1];
        LODWORD(v22) = v38.i32[0];
        if ((double)v23 * 0.7 > (double)v22)
        {
          uint64_t v25 = *(_DWORD **)(a8 + 8);
          unint64_t v24 = *(void *)(a8 + 16);
          if ((unint64_t)v25 >= v24)
          {
            unsigned int v27 = *(_DWORD **)a8;
            uint64_t v28 = ((uint64_t)v25 - *(void *)a8) >> 4;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 60) {
              sub_1DD4BACA0();
            }
            uint64_t v30 = v24 - (void)v27;
            if (v30 >> 3 > v29) {
              unint64_t v29 = v30 >> 3;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              BOOL v32 = (char *)sub_1DD4BE0AC(v35, v31);
              unsigned int v27 = *(_DWORD **)a8;
              uint64_t v25 = *(_DWORD **)(a8 + 8);
            }
            else
            {
              BOOL v32 = 0;
            }
            float v33 = &v32[16 * v28];
            *(float *)float v33 = v18;
            *((_DWORD *)v33 + 1) = v19;
            *((_DWORD *)v33 + 2) = v20;
            *((float *)v33 + 3) = v21;
            unint64_t v34 = v33;
            if (v25 != v27)
            {
              do
              {
                *((_OWORD *)v34 - 1) = *((_OWORD *)v25 - 1);
                v34 -= 16;
                v25 -= 4;
              }
              while (v25 != v27);
              unsigned int v27 = *(_DWORD **)a8;
            }
            id v26 = v33 + 16;
            *(void *)a8 = v34;
            *(void *)(a8 + 8) = v33 + 16;
            *(void *)(a8 + 16) = &v32[16 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(float *)uint64_t v25 = v18;
            v25[1] = v19;
            _OWORD v25[2] = v20;
            id v26 = (char *)(v25 + 4);
            *((float *)v25 + 3) = v21;
          }
          *(void *)(a8 + 8) = v26;
          uint64_t v9 = *a7;
          uint64_t v8 = a7[1];
        }
      }
      uint64_t v15 = ++v16;
    }
    while (v16 < (unint64_t)((v8 - v9) >> 4));
  }
}

void *sub_1DD4E2FDC(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

const void **sub_1DD4E3010(const void **a1)
{
  id v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1DD4E3048(id *a1, void *a2, float *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v31 = *a1;
  unint64_t v6 = (int)[v31 count];
  sub_1DD4E33AC(&v38, v6);
  sub_1DD4E33AC(&__p, v6);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v7 = v31;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v8)
  {
    LODWORD(v9) = 0;
    uint64_t v10 = *(void *)v33;
LABEL_3:
    uint64_t v11 = 0;
    uint64_t v9 = (int)v9;
    while (1)
    {
      if (*(void *)v33 != v10) {
        objc_enumerationMutation(v7);
      }
      int8x8_t v12 = *(void **)(*((void *)&v32 + 1) + 8 * v11);
      int32x2_t v13 = [v7 objectForKeyedSubscript:v12];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog(&cfstr_InvalidCoefDic.isa, v12);
        goto LABEL_22;
      }
      [v13 floatValue];
      int v15 = v14;

      float v16 = 1.0;
      if (([v12 isEqualToString:@"_intercept"] & 1) == 0)
      {
        int32x2_t v13 = [v5 objectForKeyedSubscript:v12];
        if (!v13)
        {
          uint64_t v27 = 4294962976;
          goto LABEL_23;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSLog(&cfstr_InvalidInputDi.isa, v12);
LABEL_22:
          uint64_t v27 = 4294962977;
LABEL_23:

          float v18 = __p;
          float v28 = NAN;
          goto LABEL_26;
        }
        [v13 floatValue];
        float v16 = v17;
      }
      *((_DWORD *)v38 + v9) = v15;
      *((float *)__p + v9++) = v16;
      if (v8 == ++v11)
      {
        uint64_t v8 = [v7 countByEnumeratingWithState:&v32 objects:v40 count:16];
        if (v8) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  float v18 = __p;
  unint64_t v19 = (unint64_t)(v37 - (unsigned char *)__p) >> 2;
  int v20 = (float *)v38;
  if ((int)((unint64_t)(v39 - (unsigned char *)v38) >> 2) < (int)v19) {
    LODWORD(v19) = (unint64_t)(v39 - (unsigned char *)v38) >> 2;
  }
  if ((int)v19 < 1)
  {
    float v22 = 0.0;
  }
  else
  {
    uint64_t v21 = 4 * v19;
    float v22 = 0.0;
    unint64_t v23 = (float *)__p;
    do
    {
      float v24 = *v20++;
      float v25 = v24;
      float v26 = *v23++;
      float v22 = v22 + (float)(v25 * v26);
      v21 -= 4;
    }
    while (v21);
  }
  float v29 = expf(v22);
  uint64_t v27 = 0;
  float v28 = v29 / (float)(v29 + 1.0);
LABEL_26:
  *a3 = v28;
  if (v18)
  {
    uint64_t v37 = v18;
    operator delete(v18);
  }
  if (v38)
  {
    int v39 = v38;
    operator delete(v38);
  }

  return v27;
}

void sub_1DD4E3320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }

  _Unwind_Resume(a1);
}

void *sub_1DD4E33AC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BB674(a1, a2);
    CMTime v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1DD4E3408(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_1DD4E3424(uint64_t a1, __CLPK_real *a2, uint64_t a3, uint64_t a4, float *a5, unsigned int a6, uint64_t a7)
{
  sub_1DD500CE0((uint64_t)a2, a3, a4, a5, a6);
  return sub_1DD50100C(a1, a2, 2 * a6, 9u, a7);
}

float sub_1DD4E3494(const float *a1, const float *a2, uint64_t a3)
{
  v15[9] = *MEMORY[0x1E4F143B8];
  float32x4x2_t v16 = vld2q_f32(a1);
  v18.val[0] = vcvtq_f64_f32(*(float32x2_t *)v16.val[0].f32);
  v18.val[1] = vcvtq_f64_f32(*(float32x2_t *)v16.val[1].f32);
  CMTime v4 = (double *)v14;
  vst2q_f64(v4, v18);
  v4 += 4;
  v18.val[0] = vcvt_hight_f64_f32(v16.val[0]);
  v18.val[1] = vcvt_hight_f64_f32(v16.val[1]);
  vst2q_f64(v4, v18);
  float32x4x2_t v17 = vld2q_f32(a2);
  v18.val[0] = vcvtq_f64_f32(*(float32x2_t *)v17.val[0].f32);
  v18.val[1] = vcvtq_f64_f32(*(float32x2_t *)v17.val[1].f32);
  id v5 = (double *)v13;
  vst2q_f64(v5, v18);
  v5 += 4;
  v18.val[0] = vcvt_hight_f64_f32(v17.val[0]);
  v18.val[1] = vcvt_hight_f64_f32(v17.val[1]);
  vst2q_f64(v5, v18);
  if (sub_1DD5013C4(v14, v13, v15))
  {
    for (uint64_t i = 0; i != 9; ++i)
    {
      float v8 = *(double *)&v15[i];
      *(float *)(a3 + 4 * i) = v8;
    }
    int v9 = *(_DWORD *)(a3 + 8);
    int v10 = *(_DWORD *)(a3 + 4);
    int v12 = *(_DWORD *)(a3 + 20);
    int v11 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 12) = v10;
    float result = *(float *)(a3 + 28);
    *(float *)(a3 + 20) = result;
    *(_DWORD *)(a3 + 24) = v9;
    *(_DWORD *)(a3 + 28) = v12;
  }
  return result;
}

void sub_1DD4E357C()
{
}

void **sub_1DD4E365C(void **result, unsigned int a2)
{
  if (*(_DWORD *)result < a2)
  {
    id v2 = result;
    *(_DWORD *)float result = a2;
    *((_DWORD *)result + 1) = 2 * a2;
    result[2] = malloc_type_realloc(result[2], 4 * *((unsigned int *)result + 2) * (unint64_t)(2 * a2), 0x79A8A90CuLL);
    v2[8] = malloc_type_realloc(v2[8], 8 * *(unsigned int *)v2, 0xD86641A2uLL);
    v2[9] = malloc_type_realloc(v2[9], 8 * *(unsigned int *)v2, 0x7DE63E2CuLL);
    float result = (void **)malloc_type_realloc(v2[10], 4 * *(unsigned int *)v2, 0x100004052888210uLL);
    v2[10] = result;
  }
  return result;
}

void sub_1DD4E370C(void *a1)
{
  if (a1)
  {
    id v2 = (void *)a1[2];
    if (v2)
    {
      free(v2);
      a1[2] = 0;
    }
    long long v3 = (void *)a1[8];
    if (v3)
    {
      free(v3);
      a1[8] = 0;
    }
    CMTime v4 = (void *)a1[9];
    if (v4)
    {
      free(v4);
      a1[9] = 0;
    }
    id v5 = (void *)a1[10];
    if (v5)
    {
      free(v5);
      a1[10] = 0;
    }
    unint64_t v6 = (void **)a1[20];
    if (v6) {
      sub_1DD500C84(v6);
    }
    free(a1);
  }
}

void sub_1DD4E3794()
{
}

float sub_1DD4E38C4(uint64_t a1, uint64_t a2, float *a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = 4 * v4;
      unsigned int v6 = v4 + 1;
      float v7 = *(float *)(a1 + 4 * (v4 + 1));
      *(float *)(a1 + v5) = *(float *)(a1 + v5) - *a3;
      *(float *)(a1 + 4 * v6) = v7 - a3[1];
      float v8 = *(float *)(a2 + 4 * (v4 + 1));
      *(float *)(a2 + v5) = *(float *)(a2 + v5) - a3[2];
      *(float *)(a2 + 4 * v6) = v8 - a3[3];
      v4 += 2;
    }
    while (2 * a4 != v4);
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = 4 * v9;
      unsigned int v11 = v9 + 1;
      float v12 = *(float *)(a1 + 4 * (v9 + 1));
      *(float *)(a1 + v10) = a3[4] * *(float *)(a1 + v10);
      *(float *)(a1 + 4 * v11) = a3[4] * v12;
      float v13 = *(float *)(a2 + 4 * (v9 + 1));
      *(float *)(a2 + v10) = a3[5] * *(float *)(a2 + v10);
      float result = a3[5] * v13;
      *(float *)(a2 + 4 * v11) = result;
      v9 += 2;
    }
    while (2 * a4 != v9);
  }
  return result;
}

uint64_t sub_1DD4E3988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 4) = 0;
  *(float *)(a2 + 8) = -(float)(*(float *)(a1 + 16) * *(float *)a1);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(float *)(a2 + 20) = -(float)(*(float *)(a1 + 16) * *(float *)(a1 + 4));
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 1065353216;
  *(float *)a3 = 1.0 / *(float *)(a1 + 20);
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a3 + 12) = 0;
  *(float *)(a3 + 16) = 1.0 / *(float *)(a1 + 20);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 12);
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 1065353216;
  do
  {
    uint64_t v6 = 0;
    float v7 = (float *)a5;
    do
    {
      uint64_t v8 = 0;
      float v9 = 0.0;
      uint64_t v10 = v7;
      do
      {
        float v11 = *v10;
        v10 += 3;
        float v9 = v9 + (float)(*(float *)(a3 + v8) * v11);
        v8 += 4;
      }
      while (v8 != 12);
      *((float *)&v22 + 3 * v5 + v6++) = v9;
      ++v7;
    }
    while (v6 != 3);
    ++v5;
    a3 += 12;
  }
  while (v5 != 3);
  uint64_t v12 = 0;
  long long v13 = v23;
  *(_OWORD *)a4 = v22;
  *(_OWORD *)(a4 + 16) = v13;
  *(_DWORD *)(a4 + 32) = v24;
  do
  {
    uint64_t v14 = 0;
    int v15 = (float *)a2;
    do
    {
      uint64_t v16 = 0;
      float v17 = 0.0;
      float64x2x2_t v18 = v15;
      do
      {
        float v19 = *v18;
        v18 += 3;
        float v17 = v17 + (float)(*(float *)(a4 + v16) * v19);
        v16 += 4;
      }
      while (v16 != 12);
      *((float *)&v22 + 3 * v12 + v14++) = v17;
      ++v15;
    }
    while (v14 != 3);
    ++v12;
    a4 += 12;
  }
  while (v12 != 3);
  long long v20 = v23;
  *(_OWORD *)a5 = v22;
  *(_OWORD *)(a5 + 16) = v20;
  *(_DWORD *)(a5 + 32) = v24;
  return 1;
}

_DWORD *sub_1DD4E3B40(int a1)
{
  id v2 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  double v2[2] = a1 * a1;
  v2[3] = a1;
  long long v3 = (char *)malloc_type_malloc(32 * (a1 * a1), 0x1010040ED1E20F3uLL);
  *(void *)id v2 = v3;
  if (v2[2])
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      *(_DWORD *)&v3[v4] = v5;
      uint64_t v6 = malloc_type_malloc(0x400uLL, 0x100004052888210uLL);
      long long v3 = *(char **)v2;
      uint64_t v7 = *(void *)v2 + v4;
      *(void *)(v7 + 8) = v6;
      *(_DWORD *)(v7 + 20) = 256;
      ++v5;
      v4 += 32;
    }
    while (v5 < v2[2]);
  }
  return v2;
}

void sub_1DD4E3C04(unsigned int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = a1[2];
  if (v6)
  {
    uint64_t v7 = (_DWORD *)(*(void *)a1 + 16);
    do
    {
      *uint64_t v7 = 0;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  sub_1DD4E3E10(a2, a3, (uint64_t)&v40);
  unsigned int v39 = a3;
  if (a3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)a1;
    unsigned int v10 = a1[3];
    float v12 = v40;
    float v11 = v41;
    float v13 = (float)v10 / (float)(v43 - v41);
    unsigned int v14 = v10 - 1;
    unsigned int v15 = 1;
    float v16 = (float)v10 / (float)(v42 - v40);
    do
    {
      unsigned int v17 = (float)(v13 * (float)(*(float *)(a2 + 4 * v15) - v11));
      unsigned int v18 = (float)(v16 * (float)(*(float *)(a2 + 4 * (v15 - 1)) - v12));
      if (v14 < v17) {
        unsigned int v17 = v10 - 1;
      }
      if (v14 < v18) {
        unsigned int v18 = v10 - 1;
      }
      uint64_t v19 = v9 + 32 * (v18 + v17 * v10);
      uint64_t v21 = (int *)(v19 + 16);
      int v20 = *(_DWORD *)(v19 + 16);
      if (v20 == *(_DWORD *)(v19 + 20))
      {
        unsigned int v22 = 2 * v20;
        *(_DWORD *)(v19 + 20) = v22;
        long long v23 = malloc_type_realloc(*(void **)(v19 + 8), 4 * v22, 0x100004052888210uLL);
        *(void *)(v19 + 8) = v23;
        int v20 = *v21;
      }
      else
      {
        long long v23 = *(_DWORD **)(v19 + 8);
      }
      *uint64_t v21 = v20 + 1;
      v23[v20] = v8++;
      v15 += 2;
    }
    while (v39 != v8);
  }
  sub_1DD4E3E10(a2, v39, (uint64_t)&v40);
  uint64_t v25 = *(float32x2_t **)a1;
  uint64_t v26 = a1[2];
  if (v26)
  {
    unsigned int v27 = 0;
    *(float *)v24.i32 = (float)v39;
    float32x2_t v28 = (float32x2_t)vdup_lane_s32(v24, 0);
    float v29 = v25 + 3;
    __asm { FMOV            V1.2S, #-1.0 }
    do
    {
      __int32 v35 = v29[-1].i32[0];
      if (v35)
      {
        unsigned int v36 = v35 + v27;
        float32x2_t v37 = vdiv_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v36, v27)), v28);
        unsigned int v27 = v36;
      }
      else
      {
        float32x2_t v37 = _D1;
      }
      *float v29 = v37;
      v29 += 4;
      --v26;
    }
    while (v26);
    uint64_t v25 = *(float32x2_t **)a1;
    size_t v38 = a1[2];
  }
  else
  {
    size_t v38 = 0;
  }
  qsort(v25, v38, 0x20uLL, (int (__cdecl *)(const void *, const void *))sub_1DD4E3EEC);
}

float sub_1DD4E3E10(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(_OWORD *)a3 = xmmword_1DD5121C0;
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (float *)(a1 + 4);
    float v5 = 3.4028e38;
    float v6 = -3.4028e38;
    float v7 = -3.4028e38;
    float v8 = 3.4028e38;
    do
    {
      float v9 = *(v4 - 1);
      if ((float)(v8 - v9) > 0.00000011921)
      {
        *(float *)a3 = v9;
        float v8 = v9;
      }
      float v10 = *v4;
      if ((float)(v5 - *v4) > 0.00000011921)
      {
        *(float *)(a3 + 4) = v10;
        float v5 = v10;
      }
      float v11 = *(v4 - 1);
      if ((float)(v7 - v11) < -0.00000011921)
      {
        *(float *)(a3 + 8) = v11;
        float v7 = v11;
      }
      float v12 = *v4;
      if ((float)(v6 - *v4) < -0.00000011921)
      {
        *(float *)(a3 + 12) = v12;
        float v6 = v12;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  else
  {
    float v5 = 3.4028e38;
    float v6 = -3.4028e38;
    float v7 = -3.4028e38;
    float v8 = 3.4028e38;
  }
  *(float *)a3 = floorf(v8);
  *(float *)(a3 + 4) = floorf(v5);
  float result = ceilf(v7);
  *(float *)(a3 + 8) = result;
  *(float *)(a3 + 12) = ceilf(v6);
  return result;
}

uint64_t sub_1DD4E3EEC(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 24);
  float v3 = *(float *)(a2 + 24);
  if ((float)(v2 - v3) < -0.00000011921) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (float)(v3 - v2) < -0.00000011921;
  }
}

void sub_1DD4E3F14(void **a1)
{
  float v2 = (void **)*a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = v2 + 1;
    do
    {
      float v5 = *v4;
      v4 += 4;
      free(v5);
      --v3;
    }
    while (v3);
  }
  free(v2);
  free(a1);
}

void sub_1DD4E3F78(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  size_t v5 = *(unsigned int *)(a1 + 8);
  if (v5)
  {
    float v9 = *(float **)a1;
    size_t v10 = v5;
    while ((float)(v9[6] + 0.5) <= 0.00000011921)
    {
      v9 += 8;
      if (!--v10) {
        return;
      }
    }
    if (v10)
    {
      float v11 = malloc_type_calloc(v5, 1uLL, 0x100004077774924uLL);
      if (a3)
      {
        unsigned int v12 = 0;
        do
        {
          __kedouble y = 0.0;
          __kedouble y = (float)(sub_1DD4DF984(a2) * 0.999) + 0.001;
          float v13 = (float *)bsearch(&__key, v9, v10, 0x20uLL, (int (__cdecl *)(const void *, const void *))sub_1DD4E40E0);
          if (v13) {
            unsigned int v14 = v13;
          }
          else {
            unsigned int v14 = v9;
          }
          uint64_t v15 = *(int *)v14;
          if (v12 < v10 && v11[v15])
          {
            --v12;
          }
          else
          {
            v11[v15] = 1;
            *(_DWORD *)(a4 + 4 * (int)v12) = *(_DWORD *)(*((void *)v14 + 1)
                                                         + 4
                                                         * sub_1DD4DF918(a2, 0, (*((_DWORD *)v14 + 4) - 1)));
          }
          ++v12;
        }
        while (v12 < a3);
      }
      free(v11);
    }
  }
}

uint64_t sub_1DD4E40E0(float *a1, uint64_t a2)
{
  if ((float)(*a1 - *(float *)(a2 + 24)) < -0.00000011921) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (float)(*a1 - *(float *)(a2 + 28)) > 0.00000011921;
  }
}

void sub_1DD4E410C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1DD4E4118(void *a1, uint64_t a2)
{
}

void sub_1DD4E4200(_Unwind_Exception *exception_object)
{
  float v7 = (void *)v1[16];
  if (v7)
  {
    v1[17] = v7;
    operator delete(v7);
  }
  float v8 = (std::__shared_weak_count *)v1[15];
  if (v8) {
    sub_1DD4C9D84(v8);
  }
  float v9 = *v2;
  if (*v2)
  {
    v1[12] = v9;
    operator delete(v9);
  }
  size_t v10 = *v3;
  if (*v3)
  {
    v1[9] = v10;
    operator delete(v10);
  }
  float v11 = *v4;
  if (*v4)
  {
    v1[6] = v11;
    operator delete(v11);
  }
  unsigned int v12 = *v5;
  if (*v5)
  {
    v1[3] = v12;
    operator delete(v12);
  }
  float v13 = (std::__shared_weak_count *)v1[1];
  if (v13) {
    sub_1DD4C9D84(v13);
  }
  _Unwind_Resume(exception_object);
}

sparse_dimension sub_1DD4E4278(uint64_t a1)
{
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)a1);
  sparse_dimension result = sparse_get_matrix_number_of_columns(*(void **)a1);
  if (matrix_number_of_rows == (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3)
  {
    sparse_dimension v4 = result;
    if (result == (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3
      && result == (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3
      && matrix_number_of_rows == (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2)
    {
      __p = 0;
      uint64_t v21 = 0;
      unsigned int v22 = 0;
      if (result)
      {
        size_t v5 = 0;
        uint64_t v6 = 0;
        do
        {
          if (*(double *)(*(void *)(a1 + 88) + 8 * v6) < INFINITY)
          {
            if (v5 >= v22)
            {
              float v8 = (char *)__p;
              uint64_t v9 = (v5 - (unsigned char *)__p) >> 2;
              unint64_t v10 = v9 + 1;
              if ((unint64_t)(v9 + 1) >> 62) {
                sub_1DD4BACA0();
              }
              uint64_t v11 = v22 - (unsigned char *)__p;
              if ((v22 - (unsigned char *)__p) >> 1 > v10) {
                unint64_t v10 = v11 >> 1;
              }
              if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v12 = v10;
              }
              if (v12)
              {
                float v13 = (char *)sub_1DD4BB6B8((uint64_t)&v22, v12);
                float v8 = (char *)__p;
                size_t v5 = v21;
              }
              else
              {
                float v13 = 0;
              }
              unsigned int v14 = &v13[4 * v9];
              *(_DWORD *)unsigned int v14 = v6;
              float v7 = v14 + 4;
              while (v5 != v8)
              {
                int v15 = *((_DWORD *)v5 - 1);
                v5 -= 4;
                *((_DWORD *)v14 - 1) = v15;
                v14 -= 4;
              }
              __p = v14;
              uint64_t v21 = v7;
              unsigned int v22 = &v13[4 * v12];
              if (v8) {
                operator delete(v8);
              }
            }
            else
            {
              *(_DWORD *)size_t v5 = v6;
              float v7 = v5 + 4;
            }
            uint64_t v21 = v7;
            size_t v5 = v7;
          }
          ++v6;
        }
        while (v6 != v4);
      }
      sparse_dimension v16 = sub_1DD4E4A2C(a1);
      sparse_matrix_double v18 = sparse_matrix_create_double(v16, v17);
      sub_1DD4E4DF0(v19, (uint64_t)v18);
    }
  }
  *(unsigned char *)(a1 + 152) = 1;
  return result;
}

void sub_1DD4E464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DD4E46A8@<D0>(uint64_t a1@<X0>, const void **a2@<X1>, double **a3@<X8>)
{
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  uint64_t v11 = 0;
  sub_1DD4C7A14(a3, matrix_number_of_columns, &v11);
  if (matrix_number_of_columns)
  {
    memmove(*a3, *a2, 8 * matrix_number_of_columns);
    float v8 = *(double **)(a1 + 64);
    uint64_t v9 = *a3;
    do
    {
      double v10 = *v8++;
      double result = v10 + *v9;
      *v9++ = result;
      --matrix_number_of_columns;
    }
    while (matrix_number_of_columns);
  }
  return result;
}

void sub_1DD4E4734(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1DD4BDA30(a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)(a1 + 112));
  sub_1DD4C1D4C((uint64_t)a3, matrix_number_of_columns);
}

void sub_1DD4E478C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E47A8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)(a1 + 112));
  sparse_dimension v7 = sparse_get_matrix_number_of_columns(*(void **)(a1 + 112));
  sparse_matrix_double v8 = sparse_matrix_create_double(matrix_number_of_columns, v7);
  sparse_set_matrix_property(v8, SPARSE_UPPER_SYMMETRIC);
  sub_1DD4EB660(v8, 0, 0, a2, 0, 1.0, 0.0);
  sub_1DD4E4DF0(a3, (uint64_t)v8);
}

void *sub_1DD4E483C@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  sparse_dimension v7 = matrix_number_of_columns;
  sparse_matrix_double v8 = *(_DWORD **)(a1 + 40);
  uint64_t v9 = *(_DWORD **)(a1 + 48);
  if (v8 == v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      if (*v8++) {
        ++v10;
      }
    }
    while (v8 != v9);
  }
  uint64_t v22 = 0;
  double result = sub_1DD4C7A14(a3, 2 * matrix_number_of_columns, &v22);
  if (v7)
  {
    sparse_dimension v13 = v10 + v7;
    unsigned int v14 = *a2;
    int v15 = (void *)*a3;
    sparse_dimension v16 = v7;
    do
    {
      uint64_t v17 = *v14++;
      *v15++ = v17;
      --v16;
    }
    while (v16);
    uint64_t v18 = 0;
    uint64_t v19 = *(double **)(a1 + 88);
    int v20 = *a2;
    uint64_t v21 = (void *)(*a3 + 8 * v7);
    do
    {
      if (*v19 >= INFINITY) {
        *uint64_t v21 = 0xBFF0000000000000;
      }
      else {
        *uint64_t v21 = v20[v13 + v18++];
      }
      ++v19;
      ++v21;
      --v7;
    }
    while (v7);
  }
  return result;
}

sparse_dimension sub_1DD4E4940@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)a1);
  uint64_t v12 = 0;
  sub_1DD4C7A14(a3, matrix_number_of_rows, &v12);
  uint64_t v8 = 0;
  for (sparse_dimension i = 0; ; ++i)
  {
    sparse_dimension result = sparse_get_matrix_number_of_rows(*(void **)a1);
    if (i >= result) {
      break;
    }
    if (*(_DWORD *)(*(void *)(a1 + 40) + 4 * i))
    {
      double v11 = *(double *)(*a2 + 8 * (v8 + matrix_number_of_columns));
      if (v11 < 0.0) {
        double v11 = -v11;
      }
      *(double *)(*a3 + 8 * i) = v11;
      ++v8;
    }
    else
    {
      *(void *)(*a3 + 8 * i) = 0xBFF0000000000000;
    }
  }
  return result;
}

void sub_1DD4E4A10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

sparse_dimension sub_1DD4E4A2C(uint64_t a1)
{
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)a1);
  sparse_get_matrix_number_of_columns(*(void **)a1);
  uint64_t v3 = *(_DWORD **)(a1 + 40);
  sparse_dimension v4 = *(_DWORD **)(a1 + 48);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    do
    {
      if (*v3++) {
        ++v5;
      }
    }
    while (v3 != v4);
  }
  sparse_dimension v7 = *(double **)(a1 + 88);
  uint64_t v8 = *(double **)(a1 + 96);
  if (v7 == v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      double v10 = *v7++;
      if (v10 < INFINITY) {
        ++v9;
      }
    }
    while (v7 != v8);
  }
  return v9 + matrix_number_of_rows;
}

uint64_t sub_1DD4E4ACC(uint64_t a1, const double **a2, char a3, double a4)
{
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(*(void **)a1);
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)a1);
  double v10 = *(sparse_m_double **)a1;
  v40[0] = 0;
  sub_1DD4C7A14(v41, matrix_number_of_columns, v40);
  if (matrix_number_of_columns)
  {
    double v11 = (double *)*a2;
    uint64_t v12 = *(double **)(a1 + 64);
    sparse_dimension v13 = (double *)v41[0];
    LOBYTE(v14) = 1;
    int v15 = *(double **)(a1 + 88);
    do
    {
      double v16 = *v11;
      if (*v11 < *v12)
      {
        *sparse_dimension v13 = *v12 - v16 + *v13;
        double v16 = *v11;
      }
      double v17 = *v15;
      if (v16 > *v15)
      {
        *sparse_dimension v13 = v16 - v17 + *v13;
        double v16 = *v11;
        double v17 = *v15;
      }
      double v18 = *v12++;
      int v19 = (v16 >= v18 - a4) & v14;
      if (v16 > v17 + a4) {
        int v14 = 0;
      }
      else {
        int v14 = v19;
      }
      ++v13;
      ++v15;
      ++v11;
      --matrix_number_of_columns;
    }
    while (matrix_number_of_columns);
  }
  else
  {
    int v14 = 1;
  }
  sub_1DD4BD398(v40, matrix_number_of_rows);
  sub_1DD4EB304(v10, a2, (uint64_t)v40, CblasNoTrans);
  uint64_t v38 = 0;
  sub_1DD4C7A14(__p, matrix_number_of_rows, &v38);
  if (matrix_number_of_rows)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(a1 + 40);
    uint64_t v22 = (double *)v40[0];
    int v23 = 1;
    int32x2_t v24 = (double *)__p[0];
    while (1)
    {
      int v25 = *(_DWORD *)(v21 + 4 * v20);
      if (v25 == -1)
      {
        double v29 = v22[v20];
        uint64_t v30 = *(void *)(a1 + 16);
        double v31 = *(double *)(v30 + 8 * v20);
        if (v29 < v31)
        {
          v24[v20] = v31 - v29;
          double v29 = v22[v20];
          double v31 = *(double *)(v30 + 8 * v20);
        }
        if (v29 >= v31 - a4) {
          goto LABEL_21;
        }
      }
      else if (v25 == 1)
      {
        double v26 = v22[v20];
        uint64_t v27 = *(void *)(a1 + 16);
        double v28 = *(double *)(v27 + 8 * v20);
        if (v26 > v28)
        {
          v24[v20] = v26 - v28;
          double v26 = v22[v20];
          double v28 = *(double *)(v27 + 8 * v20);
        }
        if (v26 <= v28 + a4) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v32 = *(void *)(a1 + 16);
        v24[v20] = vabdd_f64(v22[v20], *(double *)(v32 + 8 * v20));
        if (vabdd_f64(v22[v20], *(double *)(v32 + 8 * v20)) <= a4) {
          goto LABEL_21;
        }
      }
      int v23 = 0;
LABEL_21:
      if (matrix_number_of_rows == ++v20) {
        goto LABEL_30;
      }
    }
  }
  int v23 = 1;
LABEL_30:
  if (a3)
  {
    puts("\nChecking nonstandard constraints:");
    if (v14) {
      long long v33 = "lb < x < ub? true";
    }
    else {
      long long v33 = "lb < x < ub? false";
    }
    puts(v33);
    if (v23) {
      long long v34 = "Ax (?) b? true";
    }
    else {
      long long v34 = "Ax (?) b? false";
    }
    puts(v34);
    double v35 = sub_1DD4EB3C0((uint64_t)v41);
    printf("||(lb-x)_+ + (x-ub)_+||_1 = %f\n", v35);
    double v36 = sub_1DD4EB3C0((uint64_t)__p);
    printf("||Ax (?) b||_2 = %f\n", v36);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  return v14 & v23;
}

void sub_1DD4E4DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E4DF0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1DD4E4E60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  __cxa_begin_catch(a1);
  sub_1DD4E4E8C((int)&a13, v13);
  __cxa_rethrow();
}

void sub_1DD4E4E78(_Unwind_Exception *a1)
{
}

uint64_t sub_1DD4E4E8C(int a1, void *A)
{
  if (A) {
    return sparse_matrix_destroy(A);
  }
  return result;
}

void sub_1DD4E4EB4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E01B7750);
}

void *sub_1DD4E4EEC(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result) {
    return (void *)(int)sparse_matrix_destroy(result);
  }
  return result;
}

uint64_t sub_1DD4E4F10(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AFD60)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_1DD4E4F54(uint64_t a1, void **a2)
{
  *(void *)a1 = &unk_1F38B0098;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (sparse_dimension *)(a1 + 8);
  *(void *)(a1 + 40) = 0;
  sparse_dimension v4 = (void ***)(a1 + 40);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  sub_1DD4C7A98((void **)(a1 + 40), v5);
  if (!*((unsigned char *)*v4 + 152))
  {
    *(void *)(a1 + 16) = sparse_get_matrix_number_of_columns((*v4)[14]);
    sparse_dimension *v3 = sparse_get_matrix_number_of_rows(*(void **)(*(void *)(a1 + 40) + 112));
    *(void *)(a1 + 24) = sparse_get_matrix_number_of_columns(**v4);
  }
  return a1;
}

void sub_1DD4E5000(_Unwind_Exception *a1)
{
  void *v1 = v2;
  sub_1DD4C7A98(v3, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4E5024(void *a1)
{
  uint64_t v1 = a1[5];
  if (v1 && *(unsigned char *)(v1 + 152))
  {
    puts("Bad constraint dimensions.");
    return 1;
  }
  unint64_t v3 = a1[2];
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01B7590](exception, "ERROR: n = 0.");
    goto LABEL_9;
  }
  if (a1[1] > v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01B7590](exception, "ERROR: require m <= n.");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return 0;
}

void sub_1DD4E50D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DD4E50E8(uint64_t *a1, const void **a2)
{
  double v3 = sub_1DD4E46A8(a1[5], a2, (double **)__p);
  double v4 = (*(double (**)(uint64_t *, void **, double))(*a1 + 80))(a1, __p, v3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1DD4E5168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E5184(uint64_t *a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  double v5 = sub_1DD4E46A8(a1[5], a2, (double **)__p);
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, void **, double))(*a1 + 88))(a1, __p, v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_1DD4E4734(a1[5], v6, a3);
}

void sub_1DD4E5214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E5230(uint64_t *a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  int v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  uint64_t v7 = a1[5];
  if (v6)
  {
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t *, const void **))(*a1 + 96))(a1, a2);
    sub_1DD4E47A8(v7, v8, a3);
  }
  double v9 = sub_1DD4E46A8(a1[5], a2, (double **)&__p);
  double v10 = (void *)(*(uint64_t (**)(uint64_t *, void **, double))(*a1 + 96))(a1, &__p, v9);
  sub_1DD4E47A8(v7, v10, a3);
}

void sub_1DD4E534C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E5368(unint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(unint64_t *))(*a1 + 104))(a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_1DD4BDA30(a2, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
  sub_1DD4C1D4C((uint64_t)a2, a1[2]);
}

void sub_1DD4E53D8(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DD4E53F4@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_1DD4E6010(a4, a2);
  double v8 = sub_1DD4E50E8(a1, (const void **)(a2 + 8));
  *(double *)(a4 + 80) = v8;
  if (a3) {
    printf("\nObjective value = %0.16f\n", v8);
  }
  sub_1DD4E46A8(a1[5], (const void **)(a2 + 8), (double **)&v14);
  double v9 = *(void **)(a4 + 8);
  if (v9)
  {
    *(void *)(a4 + 16) = v9;
    operator delete(v9);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
  }
  *(_OWORD *)(a4 + 8) = v14;
  *(void *)(a4 + 24) = v15;
  double v10 = (uint64_t **)(a2 + 56);
  sub_1DD4E483C(a1[5], v10, &v14);
  double v11 = *(void **)(a4 + 56);
  if (v11)
  {
    *(void *)(a4 + 64) = v11;
    operator delete(v11);
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 72) = 0;
  }
  *(_OWORD *)(a4 + 56) = v14;
  *(void *)(a4 + 72) = v15;
  sub_1DD4E4940(a1[5], v10, &v14);
  uint64_t v12 = *(void **)(a4 + 32);
  if (v12)
  {
    *(void *)(a4 + 40) = v12;
    operator delete(v12);
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 48) = 0;
  }
  double result = *(double *)&v14;
  *(_OWORD *)(a4 + 32) = v14;
  *(void *)(a4 + 48) = v15;
  return result;
}

void sub_1DD4E5520(_Unwind_Exception *a1)
{
  sub_1DD4E5540(v1);
  _Unwind_Resume(a1);
}

void *sub_1DD4E5540(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1DD4E5594(uint64_t a1, uint64_t a2, char a3, double a4)
{
  return sub_1DD4E4ACC(*(void *)(a1 + 40), (const double **)(a2 + 8), a3, a4);
}

void *sub_1DD4E55A0(void *a1, void **a2, uint64_t a3)
{
  double v5 = *a2;
  *a2 = 0;
  long long v14 = v5;
  sub_1DD4E4F54((uint64_t)a1, &v14);
  if (v14)
  {
    int v6 = sub_1DD4C7AE8(v14);
    MEMORY[0x1E01B7750](v6, 0x10B0C40BD2A282ELL);
  }
  *a1 = &unk_1F38B0138;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_1DD4BDA30(a1 + 6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  sparse_matrix_double v7 = sparse_matrix_create_double(a1[3], a1[3]);
  a1[9] = v7;
  sparse_set_matrix_property(v7, SPARSE_UPPER_SYMMETRIC);
  unint64_t v8 = a1[2];
  uint64_t v11 = 0;
  sub_1DD4C7A14(&v12, v8, &v11);
  double v9 = (void *)a1[10];
  if (v9)
  {
    a1[11] = v9;
    operator delete(v9);
    a1[10] = 0;
    a1[11] = 0;
    a1[12] = 0;
  }
  *((_OWORD *)a1 + 5) = v12;
  a1[12] = v13;
  return a1;
}

void sub_1DD4E56A8(_Unwind_Exception *a1)
{
  double v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 88) = v5;
    operator delete(v5);
  }
  int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  *(void *)uint64_t v1 = &unk_1F38B0098;
  sub_1DD4C7A98((void **)(v1 + 40), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4E5718(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B0138;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    sparse_matrix_destroy(v2);
    *(void *)(a1 + 72) = 0;
  }
  double v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  *(void *)a1 = &unk_1F38B0098;
  sub_1DD4C7A98((void **)(a1 + 40), 0);
  return a1;
}

void sub_1DD4E57B8(uint64_t a1)
{
  sub_1DD4E5718(a1);
  JUMPOUT(0x1E01B7750);
}

double sub_1DD4E57F0(uint64_t a1, double **a2)
{
  return sub_1DD4EB380(a1 + 48, a2);
}

uint64_t sub_1DD4E57F8(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_1DD4E5800(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

BOOL sub_1DD4E5808(void *a1)
{
  return (sub_1DD4E5024(a1) & 1) != 0 || !a1[5] && sub_1DD4E5850(a1);
}

BOOL sub_1DD4E5850(void *a1)
{
  if (a1[2] <= a1[1]) {
    return 0;
  }
  unint64_t v2 = 0;
  do
  {
    uint64_t matrix_nonzero_count_for_column = sparse_get_matrix_nonzero_count_for_column(*(void **)(a1[5] + 112), v2);
    BOOL result = matrix_nonzero_count_for_column == 0;
    if (!matrix_nonzero_count_for_column) {
      break;
    }
    ++v2;
  }
  while (a1[2] > v2);
  return result;
}

void sub_1DD4E58B8(uint64_t a1)
{
  unint64_t v2 = (void *)MEMORY[0x1E4FBA250];
  sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"A = ", 4);
  sub_1DD4EB180(*(void **)(*(void *)(a1 + 40) + 112), 1);
  sub_1DD4D0508(v2, (uint64_t)"b = ", 4);
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  sub_1DD4BDA30(&__p, *(const void **)(v3 + 128), *(void *)(v3 + 136), (uint64_t)(*(void *)(v3 + 136) - *(void *)(v3 + 128)) >> 3);
  sub_1DD4EB0E4((uint64_t *)&__p);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
  sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"CGFloat c = ", 4);
  double v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_1DD4BDA30(&v4, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
  sub_1DD4EB0E4((uint64_t *)&v4);
  if (v4)
  {
    double v5 = v4;
    operator delete(v4);
  }
}

void sub_1DD4E59A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4E59D8(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sparse_matrix_double v7 = *a2;
  *a2 = 0;
  double v16 = v7;
  sub_1DD4E4F54((uint64_t)a1, &v16);
  if (v16)
  {
    unint64_t v8 = sub_1DD4C7AE8(v16);
    MEMORY[0x1E01B7750](v8, 0x10B0C40BD2A282ELL);
  }
  *a1 = &unk_1F38B0248;
  a1[6] = a3;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_1DD4BDA30(a1 + 7, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  a1[10] = 0;
  uint64_t v9 = (void **)(a1 + 10);
  a1[11] = 0;
  a1[12] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  if (((*(uint64_t (**)(void *))(*a1 + 48))(a1) & 1) == 0)
  {
    unint64_t v10 = a1[3];
    uint64_t v13 = 0;
    sub_1DD4C7A14(&v14, v10, &v13);
    uint64_t v11 = *v9;
    if (*v9)
    {
      a1[11] = v11;
      operator delete(v11);
      *uint64_t v9 = 0;
      a1[11] = 0;
      a1[12] = 0;
    }
    *((_OWORD *)a1 + 5) = v14;
    a1[12] = v15;
    sub_1DD4E5B94((uint64_t)a1);
  }
  return a1;
}

void sub_1DD4E5B18(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 120) = v6;
    operator delete(v6);
  }
  sparse_matrix_double v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 88) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v8;
    operator delete(v8);
  }
  *(void *)uint64_t v1 = &unk_1F38B0098;
  sub_1DD4C7A98((void **)(v1 + 40), 0);
  _Unwind_Resume(a1);
}

void sub_1DD4E5B94(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  A = 0;
  sub_1DD4C7A14(&__p, v2, &A);
  sub_1DD4C1D4C(a1 + 112, *(void *)(a1 + 16));
  sub_1DD4E5230((uint64_t *)a1, (const void **)&__p, &A);
}

void sub_1DD4E5C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4E5C74(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B0248;
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    sparse_matrix_destroy(v2);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 120) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  double v5 = *(void **)(a1 + 56);
  if (v5)
  {
    *(void *)(a1 + 64) = v5;
    operator delete(v5);
  }
  *(void *)a1 = &unk_1F38B0098;
  sub_1DD4C7A98((void **)(a1 + 40), 0);
  return a1;
}

void sub_1DD4E5D24(uint64_t a1)
{
  sub_1DD4E5C74(a1);
  JUMPOUT(0x1E01B7750);
}

double sub_1DD4E5D5C(uint64_t a1, const double **a2)
{
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(*(void **)(a1 + 48));
  sub_1DD4BD398(__p, matrix_number_of_rows);
  sub_1DD4EB304(*(sparse_matrix_double *)(a1 + 48), a2, (uint64_t)__p, CblasNoTrans);
  double v5 = sub_1DD4EB380((uint64_t)a2, (double **)__p);
  double v6 = sub_1DD4EB380(a1 + 56, (double **)a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v6 + v5 * 0.5;
}

void sub_1DD4E5DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4E5E14(uint64_t a1, const double **a2)
{
  return a1 + 80;
}

uint64_t sub_1DD4E5E5C(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_1DD4E5E64(uint64_t a1)
{
  unint64_t v2 = (void *)MEMORY[0x1E4FBA250];
  sub_1DD4D0508(MEMORY[0x1E4FBA250], (uint64_t)"A = ", 4);
  sub_1DD4EB180(*(void **)(*(void *)(a1 + 40) + 112), 1);
  sub_1DD4D0508(v2, (uint64_t)"b = ", 4);
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  sub_1DD4BDA30(&__p, *(const void **)(v3 + 128), *(void *)(v3 + 136), (uint64_t)(*(void *)(v3 + 136) - *(void *)(v3 + 128)) >> 3);
  sub_1DD4EB0E4((uint64_t *)&__p);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
  sub_1DD4D0508(v2, (uint64_t)"Q = ", 4);
  sub_1DD4EB180(*(void **)(a1 + 48), 1);
  sub_1DD4D0508(v2, (uint64_t)"CGFloat c = ", 4);
  double v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  sub_1DD4BDA30(&v4, *(const void **)(a1 + 56), *(void *)(a1 + 64), (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3);
  sub_1DD4EB0E4((uint64_t *)&v4);
  if (v4)
  {
    double v5 = v4;
    operator delete(v4);
  }
}

void sub_1DD4E5F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4E5FA0()
{
  return 0;
}

uint64_t sub_1DD4E5FA8()
{
  return 0;
}

uint64_t sub_1DD4E5FB0()
{
  return 0;
}

uint64_t sub_1DD4E5FB8()
{
  return 0;
}

uint64_t sub_1DD4E5FC0()
{
  return 1;
}

uint64_t sub_1DD4E5FC8()
{
  return 1;
}

uint64_t sub_1DD4E5FD0()
{
  return 1;
}

uint64_t sub_1DD4E5FD8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1DD4E5FE0(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_1DD4E5FE8()
{
  return 0;
}

uint64_t sub_1DD4E5FF0()
{
  return 1;
}

uint64_t sub_1DD4E5FF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t sub_1DD4E6000(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_1DD4E6008(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_1DD4E6010(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_1DD4BDA30((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_1DD4BDA30((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_1DD4BDA30((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v4;
  return a1;
}

void sub_1DD4E60B8(_Unwind_Exception *exception_object)
{
  double v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4E60EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, double a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  clock_t v12 = clock();
  double Current = CFAbsoluteTimeGetCurrent();
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
  {
    if (a3) {
      puts("Bad input, giving up.");
    }
    uint64_t v14 = 3;
    *a4 = 3;
    sub_1DD4E6444((uint64_t)a4);
  }
  else
  {
    sub_1DD4D3BCC(v37, a1, a5, a3, 0.0, 0.0001);
    uint64_t v36 = 0;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    *(_OWORD *)uint64_t v32 = 0u;
    sub_1DD4D4F6C((uint64_t)v37, a2, (uint64_t)&v31);
    uint64_t v14 = v31;
    if (v31)
    {
      *a4 = v31;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int *, uint64_t, double))(*(void *)a1 + 56))(&v22, a1, &v31, a3, a6);
      *a4 = v22;
      uint64_t v15 = (void *)*((void *)a4 + 1);
      if (v15)
      {
        *((void *)a4 + 2) = v15;
        operator delete(v15);
        *((void *)a4 + 1) = 0;
        *((void *)a4 + 2) = 0;
        *((void *)a4 + 3) = 0;
      }
      double v16 = (void *)*((void *)a4 + 4);
      *(_OWORD *)(a4 + 2) = *(_OWORD *)v23;
      *((void *)a4 + 3) = v24;
      v23[1] = 0;
      uint64_t v24 = 0;
      v23[0] = 0;
      if (v16)
      {
        *((void *)a4 + 5) = v16;
        operator delete(v16);
        *((void *)a4 + 4) = 0;
        *((void *)a4 + 5) = 0;
        *((void *)a4 + 6) = 0;
      }
      double v17 = (void *)*((void *)a4 + 7);
      *((_OWORD *)a4 + 2) = *(_OWORD *)__p;
      *((void *)a4 + 6) = v26;
      __p[1] = 0;
      uint64_t v26 = 0;
      __p[0] = 0;
      if (v17)
      {
        *((void *)a4 + 8) = v17;
        operator delete(v17);
        *((void *)a4 + 7) = 0;
        *((void *)a4 + 8) = 0;
        *((void *)a4 + 9) = 0;
        double v17 = __p[0];
      }
      *(_OWORD *)(a4 + 14) = v27;
      *((void *)a4 + 9) = v28;
      uint64_t v28 = 0;
      long long v27 = 0uLL;
      *((_OWORD *)a4 + 5) = v29;
      *((void *)a4 + 12) = v30;
      if (v17)
      {
        __p[1] = v17;
        operator delete(v17);
      }
      if (v23[0])
      {
        v23[1] = v23[0];
        operator delete(v23[0]);
      }
      if ((sub_1DD4E5594(a1, (uint64_t)a4, a3, a6) & 1) == 0)
      {
        if (a3) {
          puts("ConvexSolver: solution violates constraints (probably infeasible).");
        }
        *a4 = 5;
      }
      clock_t v18 = clock();
      double v19 = CFAbsoluteTimeGetCurrent();
      if (a3)
      {
        double v20 = v19 - Current;
        printf("Total CPU  time    : %f s\n", (double)(v18 - v12) / 1000000.0);
        printf("Total wall time    : %f s\n\n", v20);
      }
      sub_1DD4E6444((uint64_t)a4);
      uint64_t v14 = *a4;
    }
    if ((void)v35)
    {
      *((void *)&v35 + 1) = v35;
      operator delete((void *)v35);
    }
    if (*((void *)&v33 + 1))
    {
      *(void *)&long long v34 = *((void *)&v33 + 1);
      operator delete(*((void **)&v33 + 1));
    }
    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
    sub_1DD4D3C6C(v37);
  }
  return v14;
}

void sub_1DD4E6414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t sub_1DD4E6444(uint64_t a1)
{
  return printf("%d\t%f\t%d\t%f\t%f\t%f\t\n", *(_DWORD *)a1, *(double *)(a1 + 80), *(_DWORD *)(a1 + 88), *(float *)(a1 + 92), *(float *)(a1 + 96), *(float *)(a1 + 100));
}

void sub_1DD4E64A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  *(void *)a1 = &unk_1F38B03C8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 40) = a9;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(unsigned char *)(a1 + 124) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 138) = 0;
  sub_1DD4D3808(a1 + 144);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 328) = &unk_1DD512298;
  sub_1DD4BF698(a1 + 336, a8);
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 368) = 850045863;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 440) = 1018212795;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 32) = 0;
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0) {
    *(_DWORD *)(a1 + 40) = 5;
  }
  sub_1DD506CB0(a1 + 68);
  operator new();
}

void sub_1DD4E667C(_Unwind_Exception *a1)
{
  double v5 = (void *)v1[61];
  if (v5)
  {
    v1[62] = v5;
    operator delete(v5);
  }
  sub_1DD4BF614(v3);
  uint64_t v6 = (std::__shared_weak_count *)v1[40];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_1DD4D38E0(v2);
  _Unwind_Resume(a1);
}

void sub_1DD4E6700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

uint64_t sub_1DD4E670C(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B03C8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 368));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 440));
  sub_1DD4D385C(a1 + 144);
  uint64_t v2 = *(void *)(a1 + 264);
  if (v2)
  {
    uint64_t v3 = sub_1DD4D378C(v2);
    MEMORY[0x1E01B7750](v3, 0x1020C40A6EEA1E9);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    double v17 = *(void ***)(a1 + 56);
    sub_1DD4BEE80(&v17);
    MEMORY[0x1E01B7750](v4, 0x20C40960023A9);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    double v17 = *(void ***)(a1 + 48);
    sub_1DD4BEE80(&v17);
    MEMORY[0x1E01B7750](v5, 0x20C40960023A9);
  }
  uint64_t v6 = *(void *)(a1 + 128);
  if (v6)
  {
    sparse_matrix_double v7 = *(std::__shared_weak_count **)(v6 + 8);
    if (v7) {
      sub_1DD4C9D84(v7);
    }
    MEMORY[0x1E01B7750](v6, 0x1020C401705F15ELL);
  }
  uint64_t v8 = *(void *)(a1 + 272);
  if (v8)
  {
    uint64_t v9 = sub_1DD4DC68C(v8);
    MEMORY[0x1E01B7750](v9, 0x1080C4008018275);
  }
  unint64_t v10 = *(const void **)(a1 + 280);
  if (v10) {
    j__CFRelease(v10);
  }
  uint64_t v11 = *(const void **)(a1 + 288);
  if (v11) {
    CFRelease(v11);
  }
  clock_t v12 = *(const void **)(a1 + 296);
  if (v12) {
    CFRelease(v12);
  }
  if (*(void *)(a1 + 304))
  {
    uint64_t v13 = sub_1DD5014A8();
    MEMORY[0x1E01B7750](v13, 0x20C4093837F09);
  }
  sub_1DD4E69A8((void *)(a1 + 488));
  uint64_t v14 = *(void **)(a1 + 488);
  if (v14)
  {
    *(void *)(a1 + 496) = v14;
    operator delete(v14);
  }
  sub_1DD4BF614((void *)(a1 + 336));
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 320);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_1DD4D38E0(a1 + 144);
  return a1;
}

void sub_1DD4E68BC(uint64_t a1)
{
  sub_1DD4E670C(a1);
  JUMPOUT(0x1E01B7750);
}

__n128 sub_1DD4E68F4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 116) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 100) = v4;
  *(_OWORD *)(a1 + 84) = v3;
  *(__n128 *)(a1 + 68) = result;
  return result;
}

uint64_t sub_1DD4E6914(uint64_t a1)
{
  sub_1DD4E6954(a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_1DD4C9D84(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1DD4C9D84(v3);
  }
  return a1;
}

uint64_t sub_1DD4E6954(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (v1)
  {
    uint64_t v2 = result;
    long long v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(void *)(v1 + 88) = v3;
      operator delete(v3);
    }
    __n128 result = MEMORY[0x1E01B7750](v1, 0x1020C40BD1971B5);
    *(void *)(v2 + 80) = 0;
  }
  return result;
}

void *sub_1DD4E69A8(void *result)
{
  uint64_t v1 = result[1];
  unint64_t v2 = v1 - *result;
  if ((int)(v2 >> 3) >= 1)
  {
    long long v3 = result;
    unint64_t v4 = (v2 >> 3) + 1;
    do
    {
      __n128 result = *(void **)(*v3 + 8 * (v4 - 2));
      if (result)
      {
        uint64_t v5 = sub_1DD4E6914((uint64_t)result);
        __n128 result = (void *)MEMORY[0x1E01B7750](v5, 0x1020C4048629F8CLL);
        uint64_t v1 = v3[1];
      }
      v1 -= 8;
      v3[1] = v1;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void sub_1DD4E6A24()
{
}

uint64_t sub_1DD4E6B4C(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 496) - *(void *)(result + 488);
  if ((int)(v1 >> 3) >= 1)
  {
    uint64_t v2 = result;
    unint64_t v3 = (v1 >> 3) + 1;
    do
      __n128 result = sub_1DD4E6954(*(void *)(*(void *)(v2 + 488) + 8 * (v3-- - 2)));
    while (v3 > 1);
  }
  return result;
}

void *sub_1DD4E6BA4(void *result, uint64_t a2, int a3)
{
  unint64_t v3 = result[1] - *result;
  if ((int)(v3 >> 3) >= 1)
  {
    uint64_t v6 = result;
    unint64_t v7 = (v3 >> 3) + 1;
    uint64_t v8 = (CMTime *)MEMORY[0x1E4F1FA10];
    do
    {
      uint64_t v9 = *(long long **)(*v6 + 8 * (v7 - 2));
      if (!*((void *)v9 + 6))
      {
        long long v10 = *v9;
        time1.CMTimeEpoch epoch = *((void *)v9 + 2);
        *(_OWORD *)&time1.value = v10;
        CMTime time2 = *(CMTime *)(*(void *)a2 + 28);
        if (CMTimeCompare(&time1, &time2) < 1
          || (long long v11 = *v9,
              v17.CMTimeEpoch epoch = *((void *)v9 + 2),
              *(_OWORD *)&v17.value = v11,
              CMTime v16 = *v8,
              __n128 result = (void *)CMTimeCompare(&v17, &v16),
              !result)
          && a3)
        {
          sub_1DD4BAFB8();
        }
      }
      if (!*((void *)v9 + 8))
      {
        CMTime v15 = *(CMTime *)((unsigned char *)v9 + 1);
        CMTime v14 = *(CMTime *)(*(void *)a2 + 28);
        if (CMTimeCompare(&v15, &v14) < 1
          || (CMTime v13 = *(CMTime *)((unsigned char *)v9 + 1),
              CMTime v12 = *v8,
              __n128 result = (void *)CMTimeCompare(&v13, &v12),
              !result)
          && a3)
        {
          sub_1DD4BAFB8();
        }
      }
      --v7;
    }
    while (v7 > 1);
  }
  return result;
}

uint64_t sub_1DD4E6D90(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  if (v2 && a2[8])
  {
    uint64_t v3 = a2[9];
    v6[0] = a2[8];
    v6[1] = v3;
    if (v3)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
      uint64_t v2 = a2[6];
    }
    uint64_t v4 = a2[7];
    v5[0] = v2;
    v5[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1DD4E6F40(result, (uint64_t)v6, (uint64_t)v5);
  }
  return result;
}

void sub_1DD4E6EFC(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v1, 0x1020C40BD1971B5);
  _Unwind_Resume(a1);
}

void sub_1DD4E6F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1DD506BA4();
}

void sub_1DD4E7008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1DD4C9D84(a10);
  }
  if (a12) {
    sub_1DD4C9D84(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DD4E702C(void *a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)(a2 + 104) = a1[16];
  uint64_t v7 = a1[38];
  long long v8 = *(_OWORD *)(v7 + 28);
  *(void *)(a2 + 128) = *(void *)(v7 + 44);
  *(_OWORD *)(a2 + 112) = v8;
  uint64_t v9 = a1[40];
  *(void *)(a2 + 136) = *(void *)v9;
  long long v10 = *(_OWORD *)(v9 + 28);
  *(void *)(a2 + 160) = *(void *)(v9 + 44);
  *(_OWORD *)(a2 + 144) = v10;
  if (a4) {
    operator new();
  }
  a1[37] = 0;
  float v11 = sub_1DD5046D8((uint64_t)a1, a2);
  float v12 = v11;
  *(unsigned char *)(a2 + 72) = v11 > 0.0;
  if (v11 <= 0.0)
  {
    *(void *)a2 = 0x3FF0000000000000;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0x3FF0000000000000;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    float v11 = 0.0;
    *(void *)(a2 + 64) = 0x3FF0000000000000;
  }
  *(float *)(a2 + 168) = v11;
  uint64_t v13 = 0;
  CMTime v14 = (const double *)(a2 + 64);
  float64x2_t v15 = vld1q_dup_f64(v14);
  do
  {
    *(float64x2_t *)(a2 + v13) = vdivq_f64(*(float64x2_t *)(a2 + v13), v15);
    v13 += 16;
  }
  while (v13 != 64);
  *(void *)(a2 + 64) = 0x3FF0000000000000;
  if (v12 > 0.0) {
    sub_1DD505340((uint64_t)a1, a2 + 196);
  }
  sub_1DD4CDBD8(a2, a3);
  return v12 > 0.0;
}

uint64_t sub_1DD4E71A0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 488);
  uint64_t v1 = *(void *)(result + 496);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        __n128 result = sub_1DD4E6D90(v3, v5);
        uint64_t v2 = *(void *)(v3 + 488);
        uint64_t v1 = *(void *)(v3 + 496);
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return result;
}

double sub_1DD4E71F4(void *a1, void *a2)
{
  __p[0] = 0;
  __p[1] = 0;
  int v25 = 0;
  sub_1DD4E7424(__p, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3));
  if (a1[1] != *a1)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    uint64_t v5 = (char *)__p[1];
    do
    {
      if (v5 >= v25)
      {
        uint64_t v6 = (char *)__p[0];
        uint64_t v7 = (v5 - (char *)__p[0]) >> 6;
        unint64_t v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 58) {
          sub_1DD4BACA0();
        }
        uint64_t v9 = v25 - (char *)__p[0];
        if ((v25 - (char *)__p[0]) >> 5 > v8) {
          unint64_t v8 = v9 >> 5;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v8;
        }
        if (v10)
        {
          float v11 = (char *)sub_1DD4BB120((uint64_t)&v25, v10);
          uint64_t v6 = (char *)__p[0];
          uint64_t v5 = (char *)__p[1];
        }
        else
        {
          float v11 = 0;
        }
        float v12 = &v11[64 * v7];
        *((_OWORD *)v12 + 2) = 0u;
        *((_OWORD *)v12 + 3) = 0u;
        *(_OWORD *)float v12 = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        if (v5 == v6)
        {
          CMTime v17 = &v11[64 * v7];
        }
        else
        {
          uint64_t v13 = &v11[64 * v7];
          do
          {
            long long v14 = *((_OWORD *)v5 - 4);
            long long v15 = *((_OWORD *)v5 - 3);
            long long v16 = *((_OWORD *)v5 - 1);
            CMTime v17 = v13 - 64;
            *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
            *((_OWORD *)v13 - 1) = v16;
            *((_OWORD *)v13 - 4) = v14;
            *((_OWORD *)v13 - 3) = v15;
            v5 -= 64;
            v13 -= 64;
          }
          while (v5 != v6);
        }
        uint64_t v5 = v12 + 64;
        __p[0] = v17;
        __p[1] = v12 + 64;
        int v25 = &v11[64 * v10];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *((_OWORD *)v5 + 2) = 0u;
        *((_OWORD *)v5 + 3) = 0u;
        *(_OWORD *)uint64_t v5 = 0u;
        *((_OWORD *)v5 + 1) = 0u;
        v5 += 64;
      }
      __p[1] = v5;
      uint64_t v18 = *a1 + 56 * v3;
      *((float32x4_t *)v5 - 4) = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18));
      long long v19 = *(_OWORD *)(v18 + 8);
      long long v20 = *(_OWORD *)(v18 + 40);
      *((_OWORD *)v5 - 2) = *(_OWORD *)(v18 + 24);
      *((_OWORD *)v5 - 1) = v20;
      *((_OWORD *)v5 - 3) = v19;
      uint64_t v3 = ++v4;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3) > (unint64_t)v4);
  }
  uint64_t v21 = (void *)a2[10];
  if (v21)
  {
    a2[11] = v21;
    operator delete(v21);
    a2[10] = 0;
    a2[11] = 0;
    a2[12] = 0;
  }
  double result = *(double *)__p;
  *((_OWORD *)a2 + 5) = *(_OWORD *)__p;
  a2[12] = v25;
  return result;
}

void sub_1DD4E7400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E7424(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 6)
  {
    if (a2 >> 58) {
      sub_1DD4BACA0();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1DD4BB120(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFC0];
    uint64_t v9 = &v6[64 * v8];
    float v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    float v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 4);
        long long v14 = *((_OWORD *)v10 - 3);
        long long v15 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 4) = v13;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 64;
        v10 -= 64;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1DD4E74DC(uint64_t a1)
{
}

void sub_1DD4E750C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_1DD4E7A04(a1);
  char v1 = 0;
  operator new();
}

void sub_1DD4E78D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_1DD4E7B68((void *)(v35 - 152));
  sub_1DD4EA2BC((uint64_t)&a17);
  sub_1DD4EA374(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4E793C(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (pthread_mutex_t *)(a1 + 368);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 368));
  *(_DWORD *)(a1 + 432) = 0;
  pthread_attr_init(&__attr);
  qos_class_t v3 = qos_class_self();
  pthread_attr_set_qos_class_np(&__attr, v3, 0);
  pthread_t v6 = 0;
  pthread_create(&v6, &__attr, (void *(__cdecl *)(void *))sub_1DD4E74DC, (void *)a1);
  pthread_detach(v6);
  pthread_cond_wait((pthread_cond_t *)(a1 + 440), v2);
  uint64_t v4 = *(unsigned int *)(a1 + 432);
  pthread_mutex_unlock(v2);
  return v4;
}

uint64_t sub_1DD4E7A04(uint64_t a1)
{
  atomic_store(0, (unsigned __int8 *)(a1 + 138));
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    int64_t v5 = *(void ***)(a1 + 56);
    sub_1DD4BEE80(&v5);
    MEMORY[0x1E01B7750](v2, 0x20C40960023A9);
    *(void *)(a1 + 56) = 0;
  }
  sub_1DD4D385C(a1 + 144);
  if (*(void *)(a1 + 272)) {
    operator new();
  }
  qos_class_t v3 = *(const void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 296) = 0;
    CFRelease(v3);
  }
  return sub_1DD4D38E4(a1 + 144);
}

void sub_1DD4E7AF0(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v1, 0x1080C4008018275);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4E7B14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

void *sub_1DD4E7B1C(void *a1)
{
  *a1 = &unk_1F38B0398;
  uint64_t v2 = a1[1];
  if (v2) {
    dispatch_release(v2);
  }
  return a1;
}

void *sub_1DD4E7B68(void *a1)
{
  *a1 = &unk_1F38B0408;
  sub_1DD4BF614(a1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_1DD4C9D84(v2);
  }
  return a1;
}

uint64_t sub_1DD4E7BC4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 320);
  if (v4)
  {
    pthread_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      intptr_t v7 = *(void *)(a1 + 312);
      if (v7)
      {
        sub_1DD4D7BC0(v7);
        if (a3) {
          operator new();
        }
        operator new();
      }
      sub_1DD4C9D84(v6);
    }
  }
  return 0;
}

void sub_1DD4E7CF4(_Unwind_Exception *a1)
{
  sub_1DD4C9D84(v1);
  _Unwind_Resume(a1);
}

void sub_1DD4E7D10(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 320);
  if (v2)
  {
    qos_class_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(unsigned __int8 **)(a1 + 312);
      if (v4)
      {
        atomic_store(1u, v4);
        atomic_store(1u, (unsigned __int8 *)(a1 + 137));
      }
      sub_1DD4C9D84(v3);
    }
  }
}

float sub_1DD4E7D74(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  v58[9] = *(double *)MEMORY[0x1E4F143B8];
  if (a1[1] == *a1) {
    return 0.0;
  }
  unint64_t v5 = a3;
  uint64_t v55 = 0;
  __p = 0;
  unsigned int v57 = 0;
  sub_1DD4DF534((void **)&v55, a4 - a3);
  if (a4 >= v5)
  {
    intptr_t v7 = (char *)__p;
    do
    {
      uint64_t v9 = *a1 + 304 * v5;
      char v10 = *(unsigned char *)(v9 + 74);
      char v11 = *(unsigned char *)(v9 + 75);
      if (v7 >= v57)
      {
        uint64_t v12 = (v7 - v55) >> 4;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_1DD4BACA0();
        }
        unint64_t v13 = (v57 - v55) >> 3;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)(v57 - v55) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          long long v15 = (char *)sub_1DD4BE0AC((uint64_t)&v57, v14);
        }
        else {
          long long v15 = 0;
        }
        long long v16 = &v15[16 * v12];
        *(void *)long long v16 = v5;
        v16[8] = v10;
        v16[9] = v11;
        v16[10] = 0;
        uint64_t v18 = v55;
        CMTime v17 = __p;
        long long v19 = v16;
        if (__p != v55)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          CMTime v17 = v55;
        }
        intptr_t v7 = v16 + 16;
        uint64_t v55 = v19;
        __p = v16 + 16;
        unsigned int v57 = &v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)intptr_t v7 = v5;
        v7[8] = v10;
        v7[9] = v11;
        v7[10] = 0;
        v7 += 16;
      }
      __p = v7;
      ++v5;
    }
    while (v5 <= a4);
  }
  else
  {
    intptr_t v7 = (char *)__p;
  }
  unint64_t v20 = (v7 - v55) >> 4;
  if (v7 != v55)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v53 = *a1;
    uint64_t v23 = 1;
    intptr_t v7 = v55;
    do
    {
      if (v7[16 * v22 + 9])
      {
        unint64_t v24 = v20 - 1;
        uint64_t v25 = 1;
        uint64_t v26 = v22;
        do
        {
          BOOL v47 = v26-- < 1;
          if (v47 || v26 > v24)
          {
LABEL_36:
            v7[16 * v22 + 10] = 1;
            goto LABEL_37;
          }
          unint64_t v27 = v25++;
        }
        while (v7[16 * v26 + 8]);
        uint64_t v28 = *(void *)&v7[16 * v26];
        long long v29 = &v7[v21];
        unint64_t v30 = v23;
        do
        {
          if (v22 < -1 || v30 > v24) {
            goto LABEL_36;
          }
          int v31 = v29[24];
          v29 += 16;
          ++v27;
          ++v30;
        }
        while (v31);
        if (v27 >= 4)
        {
          uint64_t v32 = &v7[16 * v22];
          char v33 = 2;
LABEL_43:
          v32[10] = v33;
          goto LABEL_37;
        }
        long long v34 = (const double *)(v53 + 304 * v28);
        uint64_t v35 = (const double *)(v53 + 304 * *(void *)v29);
        double v36 = sub_1DD4E81EC(v34, v35, a2);
        memset(&v58[1], 0, 24);
        v58[0] = 1.0;
        v58[4] = 1.0;
        memset(&v58[5], 0, 24);
        v58[8] = 1.0;
        double v37 = sub_1DD4E81EC(v58, v34, a2);
        double v38 = sub_1DD4E81EC(v58, v35, a2);
        if (v37 > v38) {
          double v38 = v37;
        }
        if (v36 > v38 * 1.75)
        {
          uint64_t v32 = &v7[16 * v22];
          char v33 = 4;
          goto LABEL_43;
        }
      }
LABEL_37:
      ++v22;
      intptr_t v7 = v55;
      unint64_t v20 = ((unsigned char *)__p - v55) >> 4;
      v21 += 16;
      ++v23;
    }
    while (v22 < v20);
  }
  if (v20 >= 0x5A) {
    uint64_t v39 = 90;
  }
  else {
    uint64_t v39 = v20;
  }
  if (v39)
  {
    uint64_t v40 = 0;
    float v41 = v7 + 10;
    uint64_t v42 = v39;
    do
    {
      if (*(v41 - 2))
      {
        uint64_t v43 = (v40 + 1);
        if ((int)v40 >= 2) {
          *float v41 = 5;
        }
      }
      else
      {
        uint64_t v43 = v40;
      }
      v41 += 16;
      uint64_t v40 = v43;
      --v42;
    }
    while (v42);
  }
  else
  {
    LODWORD(v43) = 0;
  }
  if (v20 >= 0x5B)
  {
    unint64_t v44 = v20 - v39;
    uint64_t v45 = 16 * v39;
    id v46 = v7;
    do
    {
      LODWORD(v43) = v43 - (v46[8] != 0);
      if (v46[v45 + 8])
      {
        LODWORD(v43) = v43 + 1;
        BOOL v47 = (int)v43 < 3;
      }
      else
      {
        BOOL v47 = 1;
      }
      if (!v47) {
        v46[v45 + 10] = 5;
      }
      v46 += 16;
      --v44;
    }
    while (v44);
  }
  if (v20 >= 2)
  {
    char v48 = 0;
    id v49 = (unsigned __int8 *)(v7 + 26);
    unint64_t v50 = v20 - 1;
    do
    {
      int v51 = *v49;
      v49 += 16;
      v48 |= v51 != 0;
      --v50;
    }
    while (v50);
    if (v48) {
      float v8 = 0.0;
    }
    else {
      float v8 = 1.0;
    }
    goto LABEL_71;
  }
  float v8 = 1.0;
  if (v7)
  {
LABEL_71:
    __p = v7;
    operator delete(v7);
  }
  return v8;
}

void sub_1DD4E81C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DD4E81EC(const double *a1, const double *a2, unint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = HIDWORD(a3);
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0x3FF0000000000000;
  double v64 = (double)(int)a3;
  long long v65 = xmmword_1DD511740;
  uint64_t v66 = 0;
  double v67 = (double)SHIDWORD(a3);
  uint64_t v68 = 0x3FF0000000000000;
  double v69 = (double)(int)a3;
  double v70 = (double)SHIDWORD(a3);
  uint64_t v71 = 0x3FF0000000000000;
  unint64_t v5 = a1 + 8;
  pthread_t v6 = a1 + 7;
  intptr_t v7 = a1 + 6;
  float v8 = a1 + 5;
  uint64_t v9 = a1 + 4;
  char v10 = a1 + 3;
  char v11 = a1 + 2;
  float64x2_t v13 = vld1q_dup_f64(a1);
  uint64_t v12 = a1 + 1;
  float64x2_t v14 = vld1q_dup_f64(v12);
  float64x2_t v15 = vld1q_dup_f64(v11);
  float64x2_t v16 = vld1q_dup_f64(v9);
  float64x2_t v17 = vld1q_dup_f64(v10);
  float64x2_t v18 = vld1q_dup_f64(v8);
  float64x2_t v19 = vld1q_dup_f64(v6);
  float64x2_t v20 = vld1q_dup_f64(v7);
  float64x2_t v21 = vld1q_dup_f64(v5);
  __asm { FMOV            V2.2D, #1.0 }
  do
  {
    unint64_t v27 = (const double *)((char *)&v61 + v3);
    float64x2x3_t v74 = vld3q_f64(v27);
    float64x2_t v28 = vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[1], v19), v74.val[0], v20), v74.val[2], v21);
    float64x2_t v29 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v14, v74.val[1]), v74.val[0], v13), v74.val[2], v15), v28);
    float64x2_t v30 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[1], v16), v74.val[0], v17), v74.val[2], v18), v28);
    int v31 = (double *)&v60[v3 + 96];
    vst3q_f64(v31, *(float64x2x3_t *)(&_Q2 - 2));
    v3 += 48;
  }
  while (v3 != 96);
  uint64_t v32 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0x3FF0000000000000;
  double v64 = (double)(int)a3;
  long long v65 = xmmword_1DD511740;
  uint64_t v66 = 0;
  double v67 = (double)SHIDWORD(a3);
  uint64_t v68 = 0x3FF0000000000000;
  double v69 = (double)(int)a3;
  double v70 = (double)SHIDWORD(a3);
  uint64_t v71 = 0x3FF0000000000000;
  char v33 = a2 + 8;
  long long v34 = a2 + 7;
  uint64_t v35 = a2 + 6;
  double v36 = a2 + 5;
  double v37 = a2 + 4;
  double v38 = a2 + 3;
  uint64_t v39 = a2 + 2;
  float64x2_t v41 = vld1q_dup_f64(a2);
  uint64_t v40 = a2 + 1;
  float64x2_t v42 = vld1q_dup_f64(v40);
  float64x2_t v43 = vld1q_dup_f64(v39);
  float64x2_t v44 = vld1q_dup_f64(v37);
  float64x2_t v45 = vld1q_dup_f64(v38);
  float64x2_t v46 = vld1q_dup_f64(v36);
  float64x2_t v47 = vld1q_dup_f64(v34);
  float64x2_t v48 = vld1q_dup_f64(v35);
  float64x2_t v49 = vld1q_dup_f64(v33);
  do
  {
    unint64_t v50 = (const double *)((char *)&v61 + v32);
    float64x2x3_t v73 = vld3q_f64(v50);
    float64x2_t v51 = vmlaq_f64(vmlaq_f64(vmulq_f64(v73.val[1], v44), v73.val[0], v45), v73.val[2], v46);
    float64x2_t v52 = vmlaq_f64(vmlaq_f64(vmulq_f64(v73.val[1], v47), v73.val[0], v48), v73.val[2], v49);
    v73.val[0] = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v42, v73.val[1]), v73.val[0], v41), v73.val[2], v43), v52);
    v73.val[1] = vdivq_f64(v51, v52);
    v73.val[2] = _Q2;
    uint64_t v53 = (double *)&v60[v32];
    vst3q_f64(v53, v73);
    v32 += 48;
  }
  while (v32 != 96);
  uint64_t v54 = 0;
  if (SHIDWORD(a3) <= (int)a3) {
    LODWORD(v4) = a3;
  }
  double v55 = (double)(int)v4;
  double v56 = 0.0;
  do
  {
    double v57 = (*(double *)&v60[v54 + 104] - *(double *)&v60[v54 + 8]) / v55;
    double v56 = v56
        + v57 * v57
        + (*(double *)&v60[v54 + 96] - *(double *)&v60[v54])
        / v55
        * ((*(double *)&v60[v54 + 96] - *(double *)&v60[v54])
         / v55);
    v54 += 24;
  }
  while (v54 != 96);
  float v58 = v56;
  return sqrtf(v58);
}

void sub_1DD4E8430(const double *a1, const double *a2, float a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0x3FF0000000000000;
  double v66 = (double)(int)a5;
  long long v67 = xmmword_1DD511740;
  uint64_t v68 = 0;
  double v69 = (double)SHIDWORD(a5);
  uint64_t v70 = 0x3FF0000000000000;
  double v71 = (double)(int)a5;
  double v72 = (double)SHIDWORD(a5);
  uint64_t v73 = 0x3FF0000000000000;
  pthread_t v6 = a1 + 8;
  intptr_t v7 = a1 + 7;
  float v8 = a1 + 6;
  uint64_t v9 = a1 + 5;
  char v10 = a1 + 4;
  char v11 = a1 + 3;
  uint64_t v12 = a1 + 2;
  float64x2_t v14 = vld1q_dup_f64(a1);
  float64x2_t v13 = a1 + 1;
  float64x2_t v15 = vld1q_dup_f64(v13);
  float64x2_t v16 = vld1q_dup_f64(v12);
  float64x2_t v17 = vld1q_dup_f64(v10);
  float64x2_t v18 = vld1q_dup_f64(v11);
  float64x2_t v19 = vld1q_dup_f64(v9);
  float64x2_t v20 = vld1q_dup_f64(v7);
  float64x2_t v21 = vld1q_dup_f64(v8);
  float64x2_t v22 = vld1q_dup_f64(v6);
  __asm { FMOV            V5.2D, #1.0 }
  do
  {
    float64x2_t v28 = (const double *)((char *)&v63 + v5);
    float64x2x3_t v77 = vld3q_f64(v28);
    float64x2_t v29 = vmlaq_f64(vmlaq_f64(vmulq_f64(v20, v77.val[1]), v77.val[0], v21), v77.val[2], v22);
    float64x2_t v30 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15, v77.val[1]), v77.val[0], v14), v77.val[2], v16), v29);
    float64x2_t v31 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v17, v77.val[1]), v77.val[0], v18), v77.val[2], v19), v29);
    uint64_t v32 = (double *)&v62[v5 + 192];
    vst3q_f64(v32, *(float64x2x3_t *)(&_Q5 - 2));
    v5 += 48;
  }
  while (v5 != 96);
  uint64_t v33 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0x3FF0000000000000;
  double v66 = (double)(int)a5;
  long long v67 = xmmword_1DD511740;
  uint64_t v68 = 0;
  double v69 = (double)SHIDWORD(a5);
  uint64_t v70 = 0x3FF0000000000000;
  double v71 = (double)(int)a5;
  double v72 = (double)SHIDWORD(a5);
  uint64_t v73 = 0x3FF0000000000000;
  long long v34 = a2 + 8;
  uint64_t v35 = a2 + 7;
  double v36 = a2 + 6;
  double v37 = a2 + 5;
  double v38 = a2 + 4;
  uint64_t v39 = a2 + 3;
  uint64_t v40 = a2 + 2;
  float64x2_t v42 = vld1q_dup_f64(a2);
  float64x2_t v41 = a2 + 1;
  float64x2_t v43 = vld1q_dup_f64(v41);
  float64x2_t v44 = vld1q_dup_f64(v40);
  float64x2_t v45 = vld1q_dup_f64(v38);
  float64x2_t v46 = vld1q_dup_f64(v39);
  float64x2_t v47 = vld1q_dup_f64(v37);
  float64x2_t v48 = vld1q_dup_f64(v35);
  float64x2_t v49 = vld1q_dup_f64(v36);
  float64x2_t v50 = vld1q_dup_f64(v34);
  do
  {
    float64x2_t v51 = (const double *)((char *)&v63 + v33);
    float64x2x3_t v76 = vld3q_f64(v51);
    float64x2_t v52 = vmlaq_f64(vmlaq_f64(vmulq_f64(v45, v76.val[1]), v76.val[0], v46), v76.val[2], v47);
    float64x2_t v53 = vmlaq_f64(vmlaq_f64(vmulq_f64(v48, v76.val[1]), v76.val[0], v49), v76.val[2], v50);
    v76.val[0] = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v43, v76.val[1]), v76.val[0], v42), v76.val[2], v44), v53);
    v76.val[1] = vdivq_f64(v52, v53);
    v76.val[2] = _Q5;
    uint64_t v54 = (double *)&v62[v33 + 96];
    vst3q_f64(v54, v76);
    v33 += 48;
  }
  while (v33 != 96);
  uint64_t v55 = 0;
  double v56 = a3;
  float64x2_t v57 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((float)(1.0 - a3)), 0);
  do
  {
    *(float64x2_t *)&v62[v55] = vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v62[v55 + 96], v56), v57, *(float64x2_t *)&v62[v55 + 192]);
    v55 += 24;
  }
  while (v55 != 96);
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  double v66 = (double)(int)a5;
  *(void *)&long long v67 = 0;
  uint64_t v68 = 0;
  double v69 = (double)SHIDWORD(a5);
  double v71 = (double)(int)a5;
  double v72 = (double)SHIDWORD(a5);
  do
  {
    *(void *)&v75.val[0].f64[0] = *(uint64_t *)((char *)&v63 + v59);
    v75.val[0].f64[1] = *(double *)((char *)&v66 + v59);
    *(void *)&v75.val[1].f64[0] = *(uint64_t *)((char *)&v63 + v59 + 8);
    v75.val[1].f64[1] = *(float64_t *)((char *)&v67 + v59);
    int v60 = (double *)&v62[v58 + 352];
    vst2q_f64(v60, v75);
    v75.val[0].f64[0] = *(float64_t *)&v62[v59];
    v75.val[0].f64[1] = *(float64_t *)&v62[v59 + 24];
    v75.val[1].f64[0] = *(float64_t *)&v62[v59 + 8];
    v75.val[1].f64[1] = *(float64_t *)&v62[v59 + 32];
    uint64_t v61 = (double *)&v62[v58 + 288];
    vst2q_f64(v61, v75);
    v59 += 48;
    v58 += 32;
  }
  while (v58 != 64);
  sub_1DD4E357C();
}

void sub_1DD4E87B4(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    unint64_t v4 = v2 / 304;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    uint64_t v5 = (unsigned char *)(*a1 + 72);
    do
    {
      if (v5[3]) {
        *uint64_t v5 = 0;
      }
      v5 += 304;
      --v4;
    }
    while (v4);
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    if (v7 != *a1)
    {
      unint64_t v8 = 0;
      unint64_t v9 = 0x86BCA1AF286BCA1BLL * ((v7 - *a1) >> 4);
      uint64_t v10 = -232;
      uint64_t v11 = 377;
      do
      {
        uint64_t v12 = v6 + 304 * v8;
        if (!*(unsigned char *)(v12 + 72))
        {
          uint64_t v13 = v6 + 304 * v8;
          int v15 = *(unsigned __int8 *)(v13 + 73);
          float64x2_t v14 = (unsigned char *)(v13 + 73);
          if (!v15)
          {
            float64x2_t v16 = (unsigned __int8 *)(v6 + v10);
            unint64_t v17 = v8;
            while (v17)
            {
              --v17;
              int v18 = *v16;
              int v19 = v16[1];
              v16 -= 304;
              if (v18) {
                BOOL v20 = v19 == 0;
              }
              else {
                BOOL v20 = 0;
              }
              if (v20) {
                goto LABEL_21;
              }
            }
            unint64_t v17 = v8;
LABEL_21:
            unint64_t v21 = v9 - 1;
            float64x2_t v22 = (unsigned __int8 *)(v6 + v11);
            unint64_t v23 = v8;
            while (v21 != v23)
            {
              ++v23;
              int v24 = *(v22 - 1);
              int v25 = *v22;
              v22 += 304;
              if (v24) {
                BOOL v26 = v25 == 0;
              }
              else {
                BOOL v26 = 0;
              }
              if (v26) {
                goto LABEL_30;
              }
            }
            unint64_t v23 = v8;
LABEL_30:
            if (v17 == v8)
            {
              unint64_t v17 = 0;
              long long v45 = 0uLL;
              long long v44 = 0x3FF0000000000000uLL;
              long long v46 = 0x3FF0000000000000uLL;
              long long v47 = 0uLL;
              uint64_t v48 = 0x3FF0000000000000;
            }
            else
            {
              unint64_t v27 = (long long *)(v6 + 304 * v17);
              long long v44 = *v27;
              long long v28 = v27[1];
              long long v29 = v27[2];
              long long v30 = v27[3];
              uint64_t v48 = *((void *)v27 + 8);
              long long v46 = v29;
              long long v47 = v30;
              long long v45 = v28;
            }
            if (v23 == v8)
            {
              long long v40 = 0uLL;
              long long v39 = 0x3FF0000000000000uLL;
              long long v41 = 0x3FF0000000000000uLL;
              long long v42 = 0uLL;
              uint64_t v43 = 0x3FF0000000000000;
            }
            else
            {
              float64x2_t v31 = (long long *)(v6 + 304 * v23);
              long long v39 = *v31;
              long long v32 = v31[1];
              long long v33 = v31[2];
              long long v34 = v31[3];
              uint64_t v43 = *((void *)v31 + 8);
              long long v41 = v33;
              long long v42 = v34;
              long long v40 = v32;
              unint64_t v21 = v23;
            }
            unint64_t v35 = v8 - v17;
            unint64_t v36 = v21 - v17;
            float v37 = (float)v36;
            if (!v36) {
              float v37 = 1.0;
            }
            sub_1DD4E8430((const double *)&v44, (const double *)&v39, (float)v35 / v37, v12, a2);
            *float64x2_t v14 = 1;
            uint64_t v6 = *a1;
            uint64_t v7 = a1[1];
          }
        }
        ++v8;
        unint64_t v9 = 0x86BCA1AF286BCA1BLL * ((v7 - v6) >> 4);
        v10 += 304;
        v11 += 304;
      }
      while (v9 > v8);
    }
  }
}

void sub_1DD4E8A54(void *a1)
{
  sub_1DD4EA374(a1);
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4E8A8C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

char *sub_1DD4E8A94()
{
  return aComAppleAcgIne_1;
}

uint64_t sub_1DD4E8AA0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1DD4E8AA8(uint64_t a1, void *lpsrc, unsigned __int8 **a3)
{
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F38AFC20, (const struct __class_type_info *)&unk_1F38AFDA0, 0);
  uint64_t v6 = v5;
  if (*(unsigned char *)(a1 + 48)) {
    goto LABEL_41;
  }
  if (v5[8])
  {
    uint64_t v7 = *(char **)(a1 + 32);
    goto LABEL_33;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)(a1 + 32);
  unint64_t v9 = (void **)(a1 + 24);
  unint64_t v11 = ((uint64_t)v10 - v8) >> 3;
  unint64_t v12 = *(int *)(a1 + 52) - 1;
  if (v11 != v12)
  {
    if (v11 >= v12) {
      abort();
    }
    unint64_t v14 = *(void *)(a1 + 40);
    if ((unint64_t)v10 >= v14)
    {
      if ((v11 + 1) >> 61) {
        goto LABEL_51;
      }
      uint64_t v20 = v14 - v8;
      uint64_t v21 = v20 >> 2;
      if (v20 >> 2 <= v11 + 1) {
        uint64_t v21 = v11 + 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        unint64_t v23 = (char *)sub_1DD4BAF80(a1 + 40, v22);
      }
      else {
        unint64_t v23 = 0;
      }
      long long v33 = &v23[8 * v11];
      long long v34 = &v23[8 * v22];
      *(void *)long long v33 = *((void *)v6 + 2);
      int v15 = v33 + 8;
      unint64_t v36 = *(char **)(a1 + 24);
      unint64_t v35 = *(char **)(a1 + 32);
      if (v35 != v36)
      {
        do
        {
          uint64_t v37 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v33 - 1) = v37;
          v33 -= 8;
        }
        while (v35 != v36);
        unint64_t v35 = (char *)*v9;
      }
      *(void *)(a1 + 24) = v33;
      *(void *)(a1 + 32) = v15;
      *(void *)(a1 + 40) = v34;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *uint64_t v10 = *((void *)v5 + 2);
      int v15 = v10 + 1;
    }
    *(void *)(a1 + 32) = v15;
    goto LABEL_42;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  if ((unint64_t)v10 >= v13)
  {
    if (!((v11 + 1) >> 61))
    {
      uint64_t v16 = v13 - v8;
      uint64_t v17 = v16 >> 2;
      if (v16 >> 2 <= v11 + 1) {
        uint64_t v17 = v11 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        int v19 = (char *)sub_1DD4BAF80(a1 + 40, v18);
      }
      else {
        int v19 = 0;
      }
      int v24 = &v19[8 * v11];
      int v25 = &v19[8 * v18];
      *(void *)int v24 = *((void *)v6 + 2);
      uint64_t v7 = v24 + 8;
      unint64_t v27 = *(char **)(a1 + 24);
      BOOL v26 = *(char **)(a1 + 32);
      if (v26 != v27)
      {
        do
        {
          uint64_t v28 = *((void *)v26 - 1);
          v26 -= 8;
          *((void *)v24 - 1) = v28;
          v24 -= 8;
        }
        while (v26 != v27);
        BOOL v26 = (char *)*v9;
      }
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = v25;
      if (v26) {
        operator delete(v26);
      }
      goto LABEL_32;
    }
LABEL_51:
    sub_1DD4BACA0();
  }
  *uint64_t v10 = *((void *)v5 + 2);
  uint64_t v7 = (char *)(v10 + 1);
LABEL_32:
  *(void *)(a1 + 32) = v7;
LABEL_33:
  long long v29 = *(char **)(a1 + 24);
  if ((unint64_t)(v7 - v29) >= 9)
  {
    unsigned __int8 v30 = atomic_load(a3[3]);
    if ((v30 & 1) == 0) {
      operator new();
    }
    long long v29 = *(char **)(a1 + 24);
    uint64_t v7 = *(char **)(a1 + 32);
  }
  if (v7 != v29)
  {
    unsigned __int8 v31 = atomic_load(a3[3]);
    if ((v31 & 1) == 0) {
      operator new();
    }
  }
  *(unsigned char *)(a1 + 48) = 1;
  if (v6[8]) {
LABEL_41:
  }
    operator new();
LABEL_42:
  *((void *)v6 + 2) = 0;
  (*((void (**)(unsigned __int8 **))*a3 + 3))(a3);
  return 1;
}

void sub_1DD4E8FC8(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v1, 0x1020C401705F15ELL);
  _Unwind_Resume(a1);
}

void sub_1DD4E8FF0(void *a1)
{
  sub_1DD4E9028(a1);
  JUMPOUT(0x1E01B7750);
}

void *sub_1DD4E9028(void *a1)
{
  *a1 = &unk_1F38B03E8;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      sub_1DD4C9D84(v3);
    }
    MEMORY[0x1E01B7750](v2, 0x1020C401705F15ELL);
  }
  return a1;
}

void sub_1DD4E9094()
{
}

char *sub_1DD4E90A8()
{
  return aComAppleAcgIne_2;
}

uint64_t sub_1DD4E90B4(int a1, void *lpsrc, uint64_t a3)
{
  if (lpsrc
    && __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F38AFC20, (const struct __class_type_info *)&unk_1F38AFC30, 0))
  {
    operator new();
  }
  (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
  return 1;
}

void sub_1DD4E9268(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  void v8[3] = a6;
  v8[4] = v6;
  v8[2] = v7;
  sub_1DD505360(*(void *)(a3 + 8), *(unsigned __int8 *)(a3 + 1), a4, a1[7], (uint64_t)v8);
}

void sub_1DD4E9360(uint64_t a1)
{
  sub_1DD4EA2BC(a1);
  JUMPOUT(0x1E01B7750);
}

char *sub_1DD4E9398()
{
  return aComAppleAcgIne_3;
}

uint64_t sub_1DD4E93A4(void *a1, void *lpsrc, unsigned __int8 **a3)
{
  if (lpsrc)
  {
    uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F38AFC20, (const struct __class_type_info *)&unk_1F38AFDA0, 0);
    if (v5)
    {
      uint64_t v6 = v5;
      if (v5[8]) {
        operator new();
      }
      unint64_t v7 = a1[5];
      uint64_t v8 = (void **)(a1 + 3);
      unint64_t v9 = (void *)a1[4];
      if ((unint64_t)v9 >= v7)
      {
        uint64_t v11 = v9 - *v8;
        if ((unint64_t)(v11 + 1) >> 61) {
          sub_1DD4BACA0();
        }
        uint64_t v12 = v7 - (void)*v8;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          int v15 = (char *)sub_1DD4BAF80((uint64_t)(a1 + 5), v14);
        }
        else {
          int v15 = 0;
        }
        uint64_t v16 = &v15[8 * v11];
        uint64_t v17 = &v15[8 * v14];
        *(void *)uint64_t v16 = *((void *)v6 + 2);
        uint64_t v10 = v16 + 8;
        int v19 = (char *)a1[3];
        unint64_t v18 = (char *)a1[4];
        if (v18 != v19)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v16 - 1) = v20;
            v16 -= 8;
          }
          while (v18 != v19);
          unint64_t v18 = (char *)*v8;
        }
        a1[3] = v16;
        a1[4] = v10;
        a1[5] = v17;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *unint64_t v9 = *((void *)v5 + 2);
        uint64_t v10 = v9 + 1;
      }
      a1[4] = v10;
      *((void *)v6 + 2) = 0;
      if ((unint64_t)v10 - a1[3] >= 9)
      {
        unsigned __int8 v21 = atomic_load(a3[3]);
        if ((v21 & 1) == 0)
        {
          uint64_t v22 = (uint64_t)*v8;
          int v24 = (void *)**v8;
          unint64_t v23 = *(uint64_t **)(v22 + 8);
          uint64_t v26 = *v23;
          uint64_t v25 = v23[1];
          v30[0] = v26;
          v30[1] = v25;
          if (v25) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v27 = v24[1];
          v29[0] = *v24;
          v29[1] = v27;
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
          }
          sub_1DD4E9724((uint64_t)a1, (uint64_t)v30, (uint64_t)v29);
        }
      }
    }
  }
  (*((void (**)(unsigned __int8 **))*a3 + 3))(a3);
  return 1;
}

void sub_1DD4E9700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1DD4C9D84(a10);
  }
  if (a12) {
    sub_1DD4C9D84(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E9724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1DD506BA4();
}

void sub_1DD4E97F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1DD4C9D84(a10);
  }
  if (a12) {
    sub_1DD4C9D84(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4E981C(void *a1)
{
  *a1 = &unk_1F38B01B8;
  uint64_t v4 = (void *)a1[2];
  uint64_t v2 = a1 + 2;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_1DD4E98DC((uint64_t)v2, v3);
  }
  return a1;
}

void sub_1DD4E986C(void *a1)
{
  *a1 = &unk_1F38B01B8;
  uint64_t v3 = (void *)a1[2];
  uint64_t v1 = a1 + 2;
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    sub_1DD4E98DC((uint64_t)v1, v2);
  }
  JUMPOUT(0x1E01B7750);
}

void sub_1DD4E98DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[47];
    if (v3)
    {
      a2[48] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[44];
    if (v4)
    {
      a2[45] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[41];
    if (v5) {
      sub_1DD4C9D84(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)a2[39];
    if (v6) {
      sub_1DD4C9D84(v6);
    }
    JUMPOUT(0x1E01B7750);
  }
}

uint64_t sub_1DD4E9960(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)a1 = &unk_1F38B0408;
  *(unsigned char *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 33) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a5;
  sub_1DD4BF698(a1 + 64, a6);
  return a1;
}

void sub_1DD4E99C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    sub_1DD4C9D84(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4E99DC(void *a1)
{
  *a1 = &unk_1F38B0408;
  sub_1DD4BF614(a1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_1DD4C9D84(v2);
  }
  JUMPOUT(0x1E01B7750);
}

char *sub_1DD4E9A4C()
{
  return aComAppleAcgIne_4;
}

uint64_t sub_1DD4E9A58(int a1, void *lpsrc, uint64_t a3)
{
  if (lpsrc
    && __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F38AFC20, (const struct __class_type_info *)&unk_1F38AFC80, 0))
  {
    operator new();
  }
  (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
  return 1;
}

void sub_1DD4E9EB0(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v1, 0x10A1C4049012C49);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4E9F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1DD4BB904();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1DD4E9F6C(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DD4E6BA4(v4, (uint64_t)v6, a4);
  if (v5)
  {
    sub_1DD4C9D84(v5);
  }
}

void sub_1DD4E9FE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DD4C9D84(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD4E9FF8(void *a1)
{
  *a1 = &unk_1F38B0308;
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DD4EA048(void *a1)
{
  *a1 = &unk_1F38B0308;
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4EA0B8()
{
  return 0;
}

void sub_1DD4EA0C0(void *a1)
{
  *a1 = &unk_1F38B0398;
  uint64_t v1 = a1[1];
  if (v1) {
    dispatch_release(v1);
  }
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4EA12C(uint64_t a1, uint64_t *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v4 = *lpsrc;
    uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F38AFC20, (const struct __class_type_info *)&unk_1F38AFD18, 0);
    if (*((unsigned char *)lpsrc + 8)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v5 == 0;
    }
    if (!v6)
    {
      unint64_t v7 = *(uint64_t **)(a1 + 32);
      uint64_t v8 = v5 + 16;
      unint64_t v9 = v7[1];
      if (v9 >= v7[2])
      {
        uint64_t v22 = sub_1DD4DD9C4(v7, (uint64_t)v8);
      }
      else
      {
        *(_OWORD *)unint64_t v9 = *v8;
        long long v10 = *((_OWORD *)v5 + 2);
        long long v11 = *((_OWORD *)v5 + 3);
        long long v12 = *((_OWORD *)v5 + 4);
        *(_OWORD *)(v9 + 60) = *(_OWORD *)(v5 + 76);
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = v12;
        *(_OWORD *)(v9 + 16) = v10;
        *(void *)(v9 + 88) = 0;
        *(void *)(v9 + 96) = 0;
        *(void *)(v9 + 80) = 0;
        *(_OWORD *)(v9 + 80) = *((_OWORD *)v5 + 6);
        *(void *)(v9 + 96) = *((void *)v5 + 14);
        *((void *)v5 + 13) = 0;
        *((void *)v5 + 14) = 0;
        *((void *)v5 + 12) = 0;
        long long v13 = *(_OWORD *)(v5 + 152);
        long long v14 = *(_OWORD *)(v5 + 168);
        long long v15 = *(_OWORD *)(v5 + 184);
        *(_OWORD *)(v9 + 120) = *(_OWORD *)(v5 + 136);
        *(_OWORD *)(v9 + 168) = v15;
        *(_OWORD *)(v9 + 152) = v14;
        *(_OWORD *)(v9 + 136) = v13;
        long long v16 = *(_OWORD *)(v5 + 216);
        long long v17 = *(_OWORD *)(v5 + 232);
        long long v18 = *(_OWORD *)(v5 + 248);
        *(_OWORD *)(v9 + 184) = *(_OWORD *)(v5 + 200);
        *(_OWORD *)(v9 + 232) = v18;
        *(_OWORD *)(v9 + 216) = v17;
        *(_OWORD *)(v9 + 200) = v16;
        long long v19 = *(_OWORD *)(v5 + 280);
        long long v20 = *(_OWORD *)(v5 + 296);
        uint64_t v21 = *(void *)(v5 + 309);
        *(_OWORD *)(v9 + 248) = *(_OWORD *)(v5 + 264);
        *(void *)(v9 + 293) = v21;
        *(_OWORD *)(v9 + 264) = v19;
        *(_OWORD *)(v9 + 280) = v20;
        *(_OWORD *)(v9 + 104) = *(_OWORD *)(v5 + 120);
        uint64_t v22 = v9 + 304;
      }
      v7[1] = v22;
      uint64_t v4 = *lpsrc;
    }
    (*(void (**)(uint64_t *))(v4 + 8))(lpsrc);
  }
  return 1;
}

uint64_t sub_1DD4EA2BC(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B05B0;
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  while (1)
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v2 == (unsigned char *)v3) {
      break;
    }
    uint64_t v4 = *v3;
    size_t v5 = v2 - (unsigned char *)(v3 + 1);
    if (v2 != (unsigned char *)(v3 + 1)) {
      memmove(*(void **)(a1 + 24), v3 + 1, v5);
    }
    uint64_t v2 = (char *)v3 + v5;
    *(void *)(a1 + 32) = (char *)v3 + v5;
    if (v4)
    {
      BOOL v6 = *(std::__shared_weak_count **)(v4 + 8);
      if (v6) {
        sub_1DD4C9D84(v6);
      }
      MEMORY[0x1E01B7750](v4, 0x1020C401705F15ELL);
      uint64_t v2 = *(unsigned char **)(a1 + 32);
    }
  }
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_1DD4EA374(void *a1)
{
  *a1 = &unk_1F38B0640;
  uint64_t v3 = (char *)a1[3];
  uint64_t v2 = (char *)a1[4];
  if (v2 == v3)
  {
    uint64_t v4 = (char *)a1[4];
    if (!v2) {
      return a1;
    }
    goto LABEL_7;
  }
  uint64_t v4 = (char *)a1[3];
  do
  {
    int64_t v5 = v2 - (v3 + 8);
    if (v2 != v3 + 8)
    {
      memmove(v3, v3 + 8, v2 - (v3 + 8));
      uint64_t v4 = (char *)a1[3];
    }
    uint64_t v2 = &v3[v5];
    a1[4] = &v3[v5];
    uint64_t v3 = v4;
  }
  while (v2 != v4);
  if (v4)
  {
LABEL_7:
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1DD4EA418(void *a1)
{
  sub_1DD4EA450(a1);
  JUMPOUT(0x1E01B7750);
}

void *sub_1DD4EA450(void *a1)
{
  *a1 = &unk_1F38B0078;
  if (a1[2])
  {
    uint64_t v2 = sub_1DD4D378C();
    MEMORY[0x1E01B7750](v2, 0x1020C40A6EEA1E9);
  }
  return a1;
}

void sub_1DD4EA4B0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1DD4EA520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_1DD4EA5C8((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4EA544(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E01B7750);
}

void sub_1DD4EA57C(uint64_t a1)
{
}

uint64_t sub_1DD4EA584(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AFF78)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_1DD4EA5C8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    dispatch_release(*(dispatch_object_t *)(a2 + 16));
    dispatch_release(*(dispatch_object_t *)(a2 + 24));
    JUMPOUT(0x1E01B7750);
  }
}

float sub_1DD4EA624(uint64_t a1, uint64_t a2, char a3)
{
  *(_OWORD *)a1 = xmmword_1DD512510;
  *(_OWORD *)(a1 + 16) = xmmword_1DD512510;
  *(_DWORD *)(a1 + 32) = 1065353216;
  unint64_t v6 = *(unsigned int *)(a2 + 32);
  int v7 = *(_DWORD *)(a2 + 112);
  unint64_t v8 = (v7 + v6);
  if (v7 + v6)
  {
    unint64_t v9 = 0;
    float v10 = 0.0;
    float v11 = 0.0;
    unsigned int v12 = -2 * v6;
    do
    {
      if (v9 >= v6)
      {
        uint64_t v13 = v12;
        long long v14 = (float *)(*(void *)(a2 + 40) + 4 * v12);
        long long v15 = (void *)(a2 + 64);
      }
      else
      {
        uint64_t v13 = (2 * *(_DWORD *)(*(void *)(a2 + 24) + 4 * v9));
        long long v14 = (float *)(*(void *)a2 + 4 * v13);
        long long v15 = (void *)(a2 + 8);
      }
      long long v16 = (float *)(*v15 + 4 * v13);
      float v10 = v10 + (float)(*v16 - *v14);
      float v11 = v11 + (float)(v16[1] - v14[1]);
      ++v9;
      v12 += 2;
    }
    while (v8 != v9);
    unint64_t v17 = 0;
    float v18 = (float)v8;
    float v19 = v10 / (float)v8;
    unsigned int v20 = -2 * v6;
    float v21 = 0.0;
    float v22 = v11 / (float)v8;
    do
    {
      if (v17 >= v6)
      {
        uint64_t v23 = v20;
        int v24 = (float *)(*(void *)(a2 + 40) + 4 * v20);
        uint64_t v25 = (void *)(a2 + 64);
      }
      else
      {
        uint64_t v23 = (2 * *(_DWORD *)(*(void *)(a2 + 24) + 4 * v17));
        int v24 = (float *)(*(void *)a2 + 4 * v23);
        uint64_t v25 = (void *)(a2 + 8);
      }
      uint64_t v26 = (float *)(*v25 + 4 * v23);
      float v21 = v21
          + (float)((float)((float)((float)(v26[1] - v24[1]) - v22) * (float)((float)(v26[1] - v24[1]) - v22))
                  + (float)((float)((float)(*v26 - *v24) - v19) * (float)((float)(*v26 - *v24) - v19)));
      ++v17;
      v20 += 2;
    }
    while (v8 != v17);
  }
  else
  {
    float v18 = (float)v8;
    float v21 = 0.0;
    float v22 = 0.0 / (float)v8;
    float v19 = v22;
    unint64_t v8 = 0;
  }
  sub_1DD4E33AC(v50, v8);
  sub_1DD4E33AC(__p, (*(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32)));
  unint64_t v27 = *(unsigned int *)(a2 + 32);
  uint64_t v28 = (float *)v50[0];
  uint64_t v29 = (*(_DWORD *)(a2 + 112) + v27);
  if (v29)
  {
    unint64_t v30 = 0;
    unsigned __int8 v31 = (float *)__p[0];
    unsigned int v32 = -2 * v27;
    do
    {
      if (v30 >= v27)
      {
        uint64_t v33 = v32;
        long long v34 = (float *)(*(void *)(a2 + 40) + 4 * v32);
        unint64_t v35 = (void *)(a2 + 64);
      }
      else
      {
        uint64_t v33 = (2 * *(_DWORD *)(*(void *)(a2 + 24) + 4 * v30));
        long long v34 = (float *)(*(void *)a2 + 4 * v33);
        unint64_t v35 = (void *)(a2 + 8);
      }
      unint64_t v36 = (float *)(*v35 + 4 * v33);
      v28[v30] = *v36 - *v34;
      v31[v30++] = v36[1] - v34[1];
      v32 += 2;
    }
    while (v29 != v30);
  }
  std::__sort<std::__less<float,float> &,float *>();
  std::__sort<std::__less<float,float> &,float *>();
  unsigned int v37 = *(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32);
  double v38 = (float *)v50[0];
  long long v39 = __p[0];
  float v40 = 0.0;
  if (v37)
  {
    uint64_t v41 = (*(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32));
    long long v42 = (float *)__p[0];
    do
    {
      float v43 = *v38++;
      float v44 = v43 - *((float *)v50[0] + (v37 >> 1));
      float v45 = *v42++;
      float v46 = v45 - *((float *)__p[0] + (v37 >> 1));
      if (v44 < 0.0) {
        float v44 = -v44;
      }
      if (v46 < 0.0) {
        float v46 = -v46;
      }
      float v40 = v40 + (float)(v44 + v46);
      --v41;
    }
    while (v41);
  }
  if (a3)
  {
    float v47 = v40 / (float)v37;
    float v19 = *((float *)v50[0] + (v37 >> 1));
    float v22 = *((float *)__p[0] + (v37 >> 1));
  }
  else
  {
    float v47 = sqrtf(v21 / v18);
  }
  *(float *)(a1 + 8) = v19;
  *(float *)(a1 + 20) = v22;
  __p[1] = v39;
  operator delete(v39);
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  return v47;
}

void sub_1DD4EA920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_1DD4EA954(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v33 = xmmword_1DD512510;
  long long v34 = xmmword_1DD512510;
  *(float *)&int v35 = 1.0;
  float v7 = sub_1DD4EA624((uint64_t)&v33, a1, a4);
  uint64_t v8 = 0;
  float v9 = *(float *)(a1 + 116) + -1.0;
  float v10 = *(float *)(a1 + 120) + -1.0;
  uint64_t v23 = 0;
  int v24 = 1065353216;
  float v25 = v9;
  uint64_t v26 = 0x3F80000000000000;
  int v27 = 0;
  float v28 = v10;
  int v29 = 1065353216;
  float v30 = v9;
  float v31 = v10;
  int v32 = 1065353216;
  long long v11 = v33;
  long long v12 = v34;
  uint64_t v13 = (float *)(a3 + 4);
  long long v14 = (float *)(a2 + 4);
  float v15 = *(float *)&v35;
  do
  {
    float v16 = *(float *)((char *)&v23 + v8);
    float v17 = *(float *)((char *)&v23 + v8 + 4);
    float v18 = *(float *)((char *)&v23 + v8 + 8);
    float v19 = (float)((float)(*((float *)&v11 + 1) * v17) + (float)(*(float *)&v11 * v16))
        + (float)(*((float *)&v11 + 2) * v18);
    float v20 = (float)((float)(v17 * *(float *)&v12) + (float)(*((float *)&v11 + 3) * v16))
        + (float)(*((float *)&v12 + 1) * v18);
    float v21 = (float)((float)(v17 * *((float *)&v12 + 3)) + (float)(*((float *)&v12 + 2) * v16)) + (float)(v15 * v18);
    *(v14 - 1) = v16;
    *long long v14 = v17;
    *(v13 - 1) = v19 / v21;
    *uint64_t v13 = v20 / v21;
    v8 += 12;
    v13 += 2;
    v14 += 2;
  }
  while (v8 != 48);
  return exp((float)-v7);
}

uint64_t sub_1DD4EAAA0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v7 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
    uint64_t v8 = MEMORY[0x1F4188790](v7);
    MEMORY[0x1F4188790](v8);
    if (*(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32))
    {
      *(float *)v9.i32 = sub_1DD4EA954(a2, (uint64_t)v14, (uint64_t)v13, 0);
      int32x4_t v12 = vdupq_lane_s32(v9, 0);
      sub_1DD4EAD58(a2, v14, v13, v12.i32, 4);
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32) != 4
    || (sub_1DD4E365C((void **)a1, 4u),
        sub_1DD4EACCC(a2, *(void *)(a1 + 64), *(void *)(a1 + 72)),
        sub_1DD4E3494(*(const float **)(a1 + 64), *(const float **)(a1 + 72), a4),
        (v10 & 1) == 0))
  {
LABEL_8:
    sub_1DD4E365C((void **)a1, *(_DWORD *)(a2 + 112) + *(_DWORD *)(a2 + 32));
    sub_1DD4EACCC(a2, *(void *)(a1 + 64), *(void *)(a1 + 72));
    sub_1DD4EAE50(a2, *(void *)(a1 + 80));
    sub_1DD4E3794();
  }
  return 1;
}

float sub_1DD4EACCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 32);
  uint64_t v4 = (*(_DWORD *)(a1 + 112) + v3);
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = -2 * v3;
    do
    {
      if (v5 >= v3)
      {
        uint64_t v8 = (_DWORD *)(*(void *)(a1 + 40) + 4 * v6);
        uint64_t v9 = *(void *)(a1 + 64) + 4 * v6;
      }
      else
      {
        unsigned int v7 = 2 * *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5);
        uint64_t v8 = (_DWORD *)(*(void *)a1 + 4 * v7);
        uint64_t v9 = *(void *)(a1 + 8) + 4 * v7;
      }
      unsigned int v10 = 2 * v5;
      *(_DWORD *)(a2 + 4 * v10) = *v8;
      int v11 = v8[1];
      unsigned int v12 = (2 * v5) | 1;
      *(_DWORD *)(a2 + 4 * v12) = v11;
      *(_DWORD *)(a3 + 4 * v10) = *(_DWORD *)v9;
      float result = *(float *)(v9 + 4);
      *(float *)(a3 + 4 * v12) = result;
      ++v5;
      v6 += 2;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1DD4EAD58(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  *(_DWORD *)(a1 + 112) = a5;
  uint64_t v9 = (_DWORD **)(a1 + 40);
  sub_1DD4E0190(a1 + 40, (2 * a5));
  sub_1DD4E0190(a1 + 64, (2 * *(_DWORD *)(a1 + 112)));
  unint64_t v10 = *(unsigned int *)(a1 + 112);
  uint64_t v11 = (2 * v10);
  if (v11)
  {
    unsigned int v12 = *v9;
    uint64_t v13 = *(_DWORD **)(a1 + 64);
    do
    {
      int v14 = *a2++;
      *v12++ = v14;
      int v15 = *a3++;
      *v13++ = v15;
      --v11;
    }
    while (v11);
  }
  float v16 = (_DWORD **)(a1 + 88);
  sub_1DD4E0190(a1 + 88, v10);
  uint64_t v17 = *(unsigned int *)(a1 + 112);
  if (a4)
  {
    if (v17)
    {
      float v18 = *v16;
      do
      {
        int v19 = *a4++;
        *v18++ = v19;
        --v17;
      }
      while (v17);
    }
  }
  else if (v17)
  {
    float v20 = *v16;
    memset_pattern16(v20, &unk_1DD512160, 4 * v17);
  }
}

uint64_t sub_1DD4EAE50(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 32);
  uint64_t v3 = (*(_DWORD *)(result + 112) + v2);
  if (v3)
  {
    for (unint64_t i = 0; v3 != i; ++i)
    {
      if (i >= v2)
      {
        uint64_t v5 = *(void *)(result + 88);
        if (*(void *)(result + 96) == v5)
        {
LABEL_9:
          float v7 = 1.0;
          goto LABEL_10;
        }
        uint64_t v6 = (i - v2);
      }
      else
      {
        uint64_t v5 = *(void *)(result + 16);
        if (!v5) {
          goto LABEL_9;
        }
        uint64_t v6 = *(unsigned int *)(*(void *)(result + 24) + 4 * i);
      }
      float v7 = *(float *)(v5 + 4 * v6);
LABEL_10:
      *(float *)(a2 + 4 * i) = v7;
    }
  }
  return result;
}

uint64_t sub_1DD4EAEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, char a7, uint64_t a8, float a9, float a10)
{
  if (a6 < 4) {
    return 0;
  }
  v12[0] = a2;
  v12[1] = a3;
  _OWORD v12[2] = a4;
  v12[3] = a5;
  unsigned int v13 = a6;
  *(_OWORD *)int v14 = 0u;
  *(_OWORD *)int v15 = 0u;
  long long v16 = 0u;
  memset(__p, 0, sizeof(__p));
  float v18 = a9;
  float v19 = a10;
  uint64_t v10 = sub_1DD4EAAA0(a1, (uint64_t)v12, a7, a8);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (v15[1])
  {
    *(void **)&long long v16 = v15[1];
    operator delete(v15[1]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  return v10;
}

void sub_1DD4EAF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1DD4EAF6C(void *a1)
{
  unint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1DD4EAFC0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a4 < 4) {
    return 0;
  }
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = 0;
  do
  {
    *(_DWORD *)((char *)&v14[-1] + 4 * v11 - v10) = v11;
    ++v11;
  }
  while (v9 != v11);
  v14[0] = v6;
  v14[1] = v7;
  _OWORD v14[2] = 0;
  v14[3] = (char *)&v14[-1] - v10;
  int v15 = v9;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  int v21 = 0;
  uint64_t v4 = sub_1DD4EAAA0(v5, (uint64_t)v14, 0, v8);
  if ((void)v19)
  {
    *((void *)&v19 + 1) = v19;
    operator delete((void *)v19);
  }
  if (*((void *)&v17 + 1))
  {
    *(void *)&long long v18 = *((void *)&v17 + 1);
    operator delete(*((void **)&v17 + 1));
  }
  if ((void)v16)
  {
    *((void *)&v16 + 1) = v16;
    operator delete((void *)v16);
  }
  return v4;
}

void sub_1DD4EB0D0(_Unwind_Exception *a1)
{
  sub_1DD4EAF6C((void *)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4EB0E4(uint64_t *a1)
{
  printf("vector(%lu)\n", (a1[1] - *a1) >> 3);
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v3 = 0;
    do
    {
      printf("%f ", *(double *)(v2 + 8 * v3++));
      uint64_t v2 = *a1;
    }
    while (v3 < (a1[1] - *a1) >> 3);
  }
  return putchar(10);
}

void sub_1DD4EB180(void *a1, int a2)
{
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(a1);
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(a1);
  sub_1DD4BD398(val, matrix_number_of_columns);
  sub_1DD4D0490(jndx, matrix_number_of_columns);
  sparse_index column_end = 0;
  uint64_t matrix_nonzero_count = sparse_get_matrix_nonzero_count(a1);
  printf("Matrix (%llu, %llu) nonzeros = %ld\n", matrix_number_of_rows, matrix_number_of_columns, matrix_nonzero_count);
  if (a2)
  {
    if (matrix_number_of_rows)
    {
      for (sparse_index i = 0; i != matrix_number_of_rows; ++i)
      {
        printf("\n row %d nonzeros:\n", i);
        sparse_status v8 = sparse_extract_sparse_row_double((sparse_matrix_double)a1, i, 0, &column_end, matrix_number_of_columns, val[0], jndx[0]);
        if (v8 >= 1)
        {
          unint64_t v9 = 0;
          uint64_t v10 = 8 * v8;
          do
          {
            printf("   col %lld, val %f ;", jndx[0][v9 / 8], val[0][v9 / 8]);
            v9 += 8;
          }
          while (v10 != v9);
        }
      }
    }
    puts("\n");
  }
  if (jndx[0])
  {
    jndx[1] = jndx[0];
    operator delete(jndx[0]);
  }
  if (val[0])
  {
    val[1] = val[0];
    operator delete(val[0]);
  }
}

void sub_1DD4EB2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4EB304(sparse_matrix_double A, const double **a2, uint64_t a3, CBLAS_TRANSPOSE transa)
{
  uint64_t v7 = *(double **)a3;
  uint64_t v8 = *(void *)(a3 + 8) - *(void *)a3;
  if (v8)
  {
    unint64_t v9 = v8 >> 3;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    bzero(*(void **)a3, 8 * v9);
  }
  if (sparse_matrix_vector_product_dense_double(transa, 1.0, A, *a2, 1, v7, 1)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

double sub_1DD4EB380(uint64_t a1, double **a2)
{
  uint64_t v2 = *(double **)a1;
  uint64_t v3 = *(void *)(a1 + 8) - *(void *)a1;
  if (!v3) {
    return 0.0;
  }
  unint64_t v4 = v3 >> 3;
  uint64_t v5 = *a2;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  double result = 0.0;
  do
  {
    double v7 = *v2++;
    double v8 = v7;
    double v9 = *v5++;
    double result = result + v8 * v9;
    --v4;
  }
  while (v4);
  return result;
}

double sub_1DD4EB3C0(uint64_t a1)
{
  uint64_t v1 = *(double **)a1;
  uint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if (v2)
  {
    unint64_t v3 = v2 >> 3;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    double v4 = 0.0;
    do
    {
      double v5 = *v1++;
      double v4 = v4 + v5 * v5;
      --v3;
    }
    while (v3);
  }
  else
  {
    double v4 = 0.0;
  }
  return sqrt(v4);
}

double sub_1DD4EB3FC(uint64_t a1)
{
  uint64_t v1 = *(double **)a1;
  uint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if (!v2) {
    return -1.0;
  }
  unint64_t v3 = v2 >> 3;
  if (v3 <= 1) {
    unint64_t v3 = 1;
  }
  double result = -1.0;
  do
  {
    double v5 = *v1++;
    double v6 = fabs(v5);
    if (v6 > result) {
      double result = v6;
    }
    --v3;
  }
  while (v3);
  return result;
}

uint64_t sub_1DD4EB43C(uint64_t result, double **a2, double a3)
{
  unint64_t v3 = *(double **)result;
  uint64_t v4 = *(void *)(result + 8) - *(void *)result;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    double v6 = *a2;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      double v7 = *v6++;
      double *v3 = *v3 + a3 * v7;
      ++v3;
      --v5;
    }
    while (v5);
  }
  return result;
}

double sub_1DD4EB474(uint64_t a1, double **a2)
{
  uint64_t v2 = *(double **)a1;
  uint64_t v3 = *(void *)(a1 + 8) - *(void *)a1;
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    unint64_t v5 = *a2;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    do
    {
      double v6 = *v5++;
      double result = *v2 - v6;
      *v2++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1DD4EB4AC(uint64_t result, double a2)
{
  uint64_t v2 = *(double **)result;
  uint64_t v3 = *(void *)(result + 8) - *(void *)result;
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    do
    {
      double *v2 = *v2 * a2;
      ++v2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_1DD4EB4DC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8) - (void)v1;
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    bzero(v1, 8 * v4);
  }
}

uint64_t sub_1DD4EB500(uint64_t *a1, void *A)
{
  sparse_dimension matrix_number_of_rows = sparse_get_matrix_number_of_rows(A);
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  unint64_t v6 = matrix_number_of_columns;
  if (matrix_number_of_rows >= matrix_number_of_columns) {
    sparse_dimension matrix_number_of_rows = matrix_number_of_columns;
  }
  sub_1DD4C1D4C((uint64_t)a1, matrix_number_of_rows);
  sub_1DD4BD398(val, v6);
  sub_1DD4D0490(jndx, v6);
  sparse_index column_end = 0;
  if (matrix_number_of_rows)
  {
    sparse_index v7 = 0;
    uint64_t v8 = 0;
    do
    {
      *(void *)(*a1 + 8 * v7) = 0;
      sparse_status v9 = sparse_extract_sparse_row_double((sparse_matrix_double)A, v7, 0, &column_end, v6, val[0], jndx[0]);
      if (v9 >= 1)
      {
        uint64_t v10 = jndx[0];
        uint64_t v11 = val[0];
        uint64_t v12 = v9;
        uint64_t v13 = *a1;
        do
        {
          uint64_t v14 = *v10++;
          if (v14 == v7)
          {
            *(double *)(v13 + 8 * v7) = *v11;
            ++v8;
          }
          ++v11;
          --v12;
        }
        while (v12);
      }
      ++v7;
    }
    while (v7 != matrix_number_of_rows);
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (jndx[0])
  {
    jndx[1] = jndx[0];
    operator delete(jndx[0]);
  }
  if (val[0])
  {
    val[1] = val[0];
    operator delete(val[0]);
  }
  return v8;
}

void sub_1DD4EB62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4EB660(sparse_m_double *a1, uint64_t a2, uint64_t a3, void *A, int a5, double a6, double a7)
{
  sparse_dimension matrix_number_of_columns = sparse_get_matrix_number_of_columns(A);
  if (a7 != 0.0 && sparse_get_matrix_number_of_rows(A))
  {
    sparse_dimension v14 = 0;
    do
    {
      sparse_insert_entry_double(a1, a7, a2 + v14, a3 + v14);
      ++v14;
    }
    while (v14 < sparse_get_matrix_number_of_rows(A));
  }
  id val = (double *)malloc_type_malloc(8 * matrix_number_of_columns, 0x100004000313F17uLL);
  int v27 = (sparse_index *)malloc_type_malloc(8 * matrix_number_of_columns, 0x100004000313F17uLL);
  sparse_index column_end = 0;
  if (sparse_get_matrix_number_of_rows(A))
  {
    unint64_t v15 = 0;
    do
    {
      sparse_status v16 = sparse_extract_sparse_row_double((sparse_matrix_double)A, v15, 0, &column_end, matrix_number_of_columns, val, v27);
      if (v16 >= 1)
      {
        uint64_t v17 = v16;
        long long v19 = v27;
        long long v18 = val;
        do
        {
          unint64_t v21 = *v19++;
          unint64_t v20 = v21;
          double v22 = -0.0;
          if (v21 == v15) {
            double v22 = a7;
          }
          double v23 = *v18 * a6 + v22;
          if (v23 != 0.0)
          {
            if (a5) {
              unint64_t v24 = v15;
            }
            else {
              unint64_t v24 = v20;
            }
            if (!a5) {
              unint64_t v20 = v15;
            }
            sparse_insert_entry_double(a1, v23, v20 + a2, v24 + a3);
          }
          ++v18;
          --v17;
        }
        while (v17);
      }
      if ((~(_WORD)v15 & 0x7FF) == 0) {
        sparse_commit(a1);
      }
      ++v15;
    }
    while (v15 < sparse_get_matrix_number_of_rows(A));
  }
  free(val);
  free(v27);
  return 0;
}

uint64_t sub_1DD4EB820(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_1DD4EB828(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(result + 4);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = *a3;
    do
    {
      double v7 = *(double *)(v5 + 8 * v4) + *(double *)(v6 + 8 * v4);
      if (v7 == 0.0)
      {
        uint64_t v8 = v4 + 1;
      }
      else
      {
        uint64_t v9 = *(void *)(result + 8);
        uint64_t v10 = *(void *)(v9 + 8 * v4);
        uint64_t v8 = v4 + 1;
        uint64_t v11 = *(void *)(v9 + 8 * (v4 + 1)) - v10;
        if (v11 >= 1)
        {
          uint64_t v12 = 0;
          while (1)
          {
            uint64_t v13 = *(unsigned int *)(*(void *)(result + 16) + 4 * v10 + 4 * v12);
            if (v4 == v13) {
              break;
            }
            ++v12;
            if (v4 < (int)v13 || v11 <= v12) {
              goto LABEL_5;
            }
          }
          *(double *)(*(void *)(result + 32) + 8 * v10 + 8 * v12) = v7;
        }
      }
LABEL_5:
      uint64_t v4 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

void sub_1DD4EBB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD4EBE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD4EC154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  _Unwind_Resume(a1);
}

double sub_1DD4EC1E8(double **a1, double *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 == *a1)
  {
    double result = 0.0;
    double v8 = 0.0;
    double v5 = 0.0;
    double v15 = 0.0;
    double v14 = 0.0;
    double v18 = 0.0;
    if (!a2) {
      return result;
    }
    goto LABEL_13;
  }
  uint64_t v4 = v2 - *a1;
  double v5 = *v3;
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = *v3;
  double result = 0.0;
  uint64_t v10 = *a1;
  do
  {
    double v11 = *v10++;
    double v12 = v11;
    if (v11 < v5) {
      double v5 = v12;
    }
    if (v8 < v12) {
      double v8 = v12;
    }
    double v13 = fabs(v12);
    if (result < v13) {
      double result = v13;
    }
    double v6 = v6 + v12;
    double v7 = v7 + v12 * v12;
  }
  while (v10 != v2);
  double v14 = v6 / (double)(unint64_t)v4;
  double v15 = sqrt(v7 / (double)(unint64_t)v4);
  double v16 = 0.0;
  do
  {
    double v17 = *v3++;
    double v16 = v16 + (v17 - v14) * (v17 - v14);
  }
  while (v3 != v2);
  double v18 = sqrt(v16 / (double)(unint64_t)v4);
  if (a2)
  {
LABEL_13:
    *a2 = v14;
    a2[1] = v5;
    a2[2] = v8;
    a2[3] = v18;
    a2[4] = result;
    a2[5] = v15;
  }
  return result;
}

double sub_1DD4EC2A8(void *a1, double **a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    sub_1DD4C1D4C((uint64_t)a2, (v2 >> 3) - 1);
    uint64_t v6 = a1[1] - *a1;
    if ((unint64_t)v6 >= 9)
    {
      unint64_t v7 = v6 >> 3;
      double v8 = *a2;
      if (v7 <= 2) {
        unint64_t v7 = 2;
      }
      uint64_t v9 = (double *)(*a1 + 8);
      unint64_t v10 = v7 - 1;
      do
      {
        double result = *v9 - *(v9 - 1);
        *v8++ = result;
        ++v9;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void sub_1DD4EC5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD4EC814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD4ECAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1DD4ECBC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD4ECC7C(uint64_t a1)
{
  uint64_t v2 = *(__CVBuffer **)(a1 + 48);
  if (v2)
  {
    CVPixelBufferUnlockBaseAddress(v2, 0);
    if (atomic_fetch_add((atomic_uint *volatile)(a1 + 56), 0xFFFFFFFF) == 1) {
      *(void *)a1 = 0;
    }
  }
  sub_1DD4F8220(a1);
  free((void *)a1);
}

uint64_t sub_1DD4ED374(uint64_t result, int a2, int a3, int a4, int a5, unsigned char *a6, int a7, float a8, float a9, double a10, double a11, double a12, float a13, float a14, float a15)
{
  float v16 = a8 + -0.5;
  float v17 = a9 + -0.5;
  if (v16 < 0.0) {
    float v16 = 0.0;
  }
  int v18 = (int)v16;
  if (v17 < 0.0) {
    float v17 = 0.0;
  }
  int v19 = (int)v17;
  float v20 = v16 - (float)(int)v16;
  float v21 = v17 - (float)(int)v17;
  if (a2 - 1 > v18) {
    int v22 = v18 + 1;
  }
  else {
    int v22 = a2 - 1;
  }
  if (v18 >= a2 && a2 - 1 <= v18) {
    int v18 = a2 - 1;
  }
  if (a3 - 1 > v19) {
    int v24 = v19 + 1;
  }
  else {
    int v24 = a3 - 1;
  }
  if (v19 >= a3 && a3 - 1 <= v19) {
    int v19 = a3 - 1;
  }
  uint64_t v26 = result + v19 * (uint64_t)a4;
  int v27 = (unsigned char *)(v26 + v18 * (uint64_t)a5);
  float v28 = (unsigned char *)(v26 + v22 * (uint64_t)a5);
  uint64_t v29 = result + v24 * (uint64_t)a4;
  float v30 = (unsigned char *)(v29 + v18 * (uint64_t)a5);
  float v31 = (unsigned char *)(v29 + v22 * (uint64_t)a5);
  float v32 = (float)(1.0 - v20) * (float)(1.0 - v21);
  float v33 = v20 * (float)(1.0 - v21);
  float v34 = (float)(1.0 - v20) * v21;
  float v35 = v20 * v21;
  LOBYTE(v21) = v27[1];
  LOBYTE(a13) = v28[1];
  LOBYTE(a14) = v30[1];
  float v36 = (float)LODWORD(a14);
  LOBYTE(a15) = v31[1];
  float v37 = (float)LODWORD(a15);
  float v38 = (float)((float)((float)((float)(v33 * (float)LODWORD(a13)) + (float)((float)LODWORD(v21) * v32))
                      + (float)(v36 * v34))
              + (float)(v37 * v35))
      + 0.5;
  int v39 = (int)v38;
  if ((int)v38 >= 255) {
    LOBYTE(v39) = -1;
  }
  LOBYTE(v38) = v27[2];
  LOBYTE(v36) = v28[2];
  LOBYTE(v37) = v30[2];
  *(float *)&unsigned int v40 = (float)LODWORD(v37);
  LOBYTE(v15) = v31[2];
  *(float *)&unsigned int v41 = (float)v15;
  *(float *)&unsigned int v42 = v33 * (float)LODWORD(v36);
  *(float *)&unsigned int v43 = (float)((float)((float)(*(float *)&v42 + (float)((float)LODWORD(v38) * v32))
                                 + (float)(*(float *)&v40 * v34))
                         + (float)(*(float *)&v41 * v35))
                 + 0.5;
  int v44 = (int)*(float *)&v43;
  LOBYTE(v43) = v27[3];
  LOBYTE(v42) = v28[3];
  LOBYTE(v40) = v30[3];
  LOBYTE(v41) = v31[3];
  int v45 = (int)(float)((float)((float)((float)((float)(v33 * (float)v42) + (float)((float)v43 * v32))
                                   + (float)((float)v40 * v34))
                           + (float)((float)v41 * v35))
                   + 0.5);
  if (v44 >= 255) {
    char v46 = -1;
  }
  else {
    char v46 = v44;
  }
  a6[1] = v39;
  if (v45 >= 255) {
    LOBYTE(v45) = -1;
  }
  a6[2] = v46;
  a6[3] = v45;
  if (a7) {
    *a6 = -1;
  }
  return result;
}

uint64_t sub_1DD4ED4F8(uint64_t result, int a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, float a11, float a12, float a13)
{
  if (a4 < a5)
  {
    uint64_t v15 = result;
    uint64_t v16 = a4;
    uint64_t v17 = a5;
    uint64_t v19 = a3 - (uint64_t)a2;
    do
    {
      if (a2 < a3)
      {
        uint64_t v20 = 0;
        float v21 = (float)(int)v16 + 0.5;
        uint64_t v22 = *(void *)(v15 + 80) + (v16 - *(void *)(v15 + 120)) * *(void *)(v15 + 88);
        do
        {
          float v23 = (float)(a2 + v20) + 0.5;
          float v24 = *(float *)(v15 + 32)
              + (float)((float)(v21 * *(float *)(v15 + 28)) + (float)(*(float *)(v15 + 24) * v23));
          float v25 = (float)(*(float *)(v15 + 8) + (float)((float)(v21 * *(float *)(v15 + 4)) + (float)(*(float *)v15 * v23)))
              / v24;
          if (v25 >= 0.0)
          {
            unint64_t v26 = *(void *)(v15 + 64);
            if (v25 < (float)v26)
            {
              *(float *)&a10 = v21 * *(float *)(v15 + 16);
              LODWORD(a9) = *(_DWORD *)(v15 + 20);
              float v27 = (float)(*(float *)&a9 + (float)(*(float *)&a10 + (float)(*(float *)(v15 + 12) * v23))) / v24;
              if (v27 >= 0.0)
              {
                unint64_t v28 = *(void *)(v15 + 72);
                if (v27 < (float)v28)
                {
                  *(float *)&a8 = (float)v28;
                  double result = sub_1DD4ED374(*(void *)(v15 + 40), v26, v28, *(_DWORD *)(v15 + 48), *(_DWORD *)(v15 + 56), (unsigned char *)(v22 + *(void *)(v15 + 96) * v20), *(void *)(v15 + 96) == 4, v25, v27, a8, a9, a10, a11, a12, a13);
                }
              }
            }
          }
          ++v20;
        }
        while (v19 != v20);
      }
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

void sub_1DD4EDEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4EDED0(int *a1, double a2, double a3, double a4, double a5, double a6, float a7, float a8, float a9)
{
  return sub_1DD4ED4F8((uint64_t)(a1 + 8), a1[40], a1[41], a1[42], a1[43], a2, a3, a4, a5, a6, a7, a8, a9);
}

double sub_1DD4EDEE4(uint64_t a1)
{
  *(unsigned char *)(a1 + 4) = 1;
  *(_OWORD *)(a1 + 8) = xmmword_1DD512570;
  double result = 0.000488281365;
  *(void *)(a1 + 24) = 0x3F4000003F266666;
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = -1082130432;
  return result;
}

void sub_1DD4EDF14(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, unsigned int a5)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  v81[0] = 0;
  v81[1] = 0;
  v81[2] = 0x3FF0000000000000;
  *(double *)&v81[3] = (double)(int)a3;
  long long v82 = xmmword_1DD511740;
  uint64_t v83 = 0;
  double v84 = (double)SHIDWORD(a3);
  uint64_t v85 = 0x3FF0000000000000;
  double v86 = (double)(int)a3;
  double v87 = (double)SHIDWORD(a3);
  uint64_t v88 = 0x3FF0000000000000;
  if (a5 != -1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = (const double *)(v8 + 304 * (int)a5);
    double v11 = v10 + 8;
    double v12 = v10 + 7;
    double v13 = v10 + 6;
    double v14 = v10 + 5;
    uint64_t v15 = v10 + 4;
    uint64_t v16 = v10 + 3;
    uint64_t v17 = v10 + 2;
    float64x2_t v18 = vld1q_dup_f64(v10++);
    float64x2_t v19 = vld1q_dup_f64(v10);
    float64x2_t v20 = vld1q_dup_f64(v17);
    float64x2_t v21 = vld1q_dup_f64(v15);
    float64x2_t v22 = vld1q_dup_f64(v16);
    float64x2_t v23 = vld1q_dup_f64(v14);
    float64x2_t v24 = vld1q_dup_f64(v12);
    float64x2_t v25 = vld1q_dup_f64(v13);
    float64x2_t v26 = vld1q_dup_f64(v11);
    __asm { FMOV            V19.2D, #1.0 }
    do
    {
      float v32 = (double *)&v81[v9];
      float64x2x3_t v91 = vld3q_f64(v32);
      float64x2_t v33 = vmlaq_f64(vmlaq_f64(vmulq_f64(v19, v91.val[1]), v91.val[0], v18), v91.val[2], v20);
      float64x2_t v34 = vmlaq_f64(vmlaq_f64(vmulq_f64(v91.val[1], v21), v33, v22), v91.val[2], v23);
      float64x2_t v35 = vmlaq_f64(vmlaq_f64(vmulq_f64(v34, v24), v33, v25), v91.val[2], v26);
      float64x2_t v36 = vdivq_f64(v33, v35);
      float64x2_t v37 = vdivq_f64(v34, v35);
      vst3q_f64(v32, *(float64x2x3_t *)(&_Q19 - 2));
      v9 += 6;
    }
    while (v9 != 12);
  }
  if (v7 != v8)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned __int128)((v7 - v8) * (__int128)0x6BCA1AF286BCA1BLL) >> 64;
    unint64_t v40 = (v39 >> 3) + ((unint64_t)v39 >> 63);
    uint64_t v41 = a5;
    if (v40 <= 1) {
      uint64_t v42 = 1;
    }
    else {
      uint64_t v42 = v40;
    }
    do
    {
      if (v38 == v41)
      {
        uint64_t v43 = 1.0;
        double v44 = 0.0;
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        double v49 = 0.0;
        double v50 = 1.0;
        uint64_t v51 = 1.0;
      }
      else
      {
        float64x2_t v52 = (uint64_t *)(*a2 + 304 * v38);
        uint64_t v51 = *v52;
        double v44 = *((double *)v52 + 1);
        uint64_t v45 = v52[2];
        uint64_t v46 = v52[3];
        double v50 = *((double *)v52 + 4);
        uint64_t v47 = v52[5];
        uint64_t v48 = v52[6];
        double v49 = *((double *)v52 + 7);
        uint64_t v43 = v52[8];
      }
      uint64_t v53 = 0;
      float64x2_t v54 = (float64x2_t)vdupq_lane_s64(v51, 0);
      float64x2_t v55 = (float64x2_t)vdupq_lane_s64(v45, 0);
      float64x2_t v56 = (float64x2_t)vdupq_lane_s64(v46, 0);
      float64x2_t v57 = (float64x2_t)vdupq_lane_s64(v47, 0);
      float64x2_t v58 = (float64x2_t)vdupq_lane_s64(v48, 0);
      uint64_t v59 = (const double *)v81;
      float64x2_t v60 = (float64x2_t)vdupq_lane_s64(v43, 0);
      do
      {
        float64x2x3_t v90 = vld3q_f64(v59);
        v59 += 6;
        float64x2_t v61 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90.val[1], v49), v90.val[0], v58), v90.val[2], v60);
        float64x2_t v62 = vsubq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90.val[1], v44), v90.val[0], v54), v90.val[2], v55), v61), v90.val[0]);
        v90.val[0] = vsubq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v90.val[1], v50), v90.val[0], v56), v90.val[2], v57), v61), v90.val[1]);
        *(float32x2_t *)&v90.val[1].f64[0] = vcvt_f32_f64(v62);
        *(float32x2_t *)&v90.val[2].f64[0] = vcvt_f32_f64(v90.val[0]);
        uint64_t v63 = (float *)((char *)&v79 + v53);
        vst2_f32(v63, (float32x2x2_t)v90.val[1]);
        v53 += 16;
      }
      while (v53 != 32);
      uint64_t v64 = a4[1];
      unint64_t v65 = (unint64_t)a4[2];
      if ((unint64_t)v64 >= v65)
      {
        uint64_t v68 = ((char *)v64 - (unsigned char *)*a4) >> 5;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 59) {
          sub_1DD4BACA0();
        }
        uint64_t v70 = v65 - (void)*a4;
        if (v70 >> 4 > v69) {
          unint64_t v69 = v70 >> 4;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v71 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v69;
        }
        if (v71) {
          double v72 = (char *)sub_1DD4BE1A4((uint64_t)(a4 + 2), v71);
        }
        else {
          double v72 = 0;
        }
        uint64_t v73 = &v72[32 * v68];
        long long v74 = v80;
        *(_OWORD *)uint64_t v73 = v79;
        *((_OWORD *)v73 + 1) = v74;
        float64x2x3_t v76 = (char *)*a4;
        float64x2x2_t v75 = (char *)a4[1];
        float64x2x3_t v77 = v73;
        if (v75 != *a4)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 1);
            *((_OWORD *)v77 - 2) = *((_OWORD *)v75 - 2);
            *((_OWORD *)v77 - 1) = v78;
            v77 -= 32;
            v75 -= 32;
          }
          while (v75 != v76);
          float64x2x2_t v75 = (char *)*a4;
        }
        long long v67 = v73 + 32;
        *a4 = v77;
        a4[1] = v73 + 32;
        a4[2] = &v72[32 * v71];
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        long long v66 = v80;
        *uint64_t v64 = v79;
        v64[1] = v66;
        long long v67 = v64 + 2;
      }
      a4[1] = v67;
      ++v38;
    }
    while (v38 != v42);
  }
}

uint64_t *sub_1DD4EE24C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = v3 - *result;
  if (v3 != *result)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 5;
    uint64_t v7 = *a2;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(float32x2_t *)(v7 + i) = vsub_f32(*(float32x2_t *)(v2 + i), *(float32x2_t *)(v7 + i));
      ++v5;
      v7 += 32;
      v2 += 32;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_1DD4EE2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_1DD4EE24C(a4, a5);
  operator new();
}

void sub_1DD4EE4FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 sub_1DD4EE508(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 != a1 && a3) {
    sub_1DD4BD174((char *)(a2 + 80), *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 6);
  }
  *(_DWORD *)(a2 + 168) = *(_DWORD *)(a1 + 168);
  *(unsigned char *)(a2 + 75) = *(unsigned char *)(a1 + 75);
  *(_WORD *)(a2 + 73) = *(_WORD *)(a1 + 73);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 192);
  long long v5 = *(_OWORD *)(a1 + 252);
  long long v6 = *(_OWORD *)(a1 + 284);
  *(_OWORD *)(a2 + 268) = *(_OWORD *)(a1 + 268);
  *(_OWORD *)(a2 + 284) = v6;
  *(_OWORD *)(a2 + 252) = v5;
  __n128 result = *(__n128 *)(a1 + 196);
  long long v8 = *(_OWORD *)(a1 + 212);
  long long v9 = *(_OWORD *)(a1 + 228);
  *(void *)(a2 + 244) = *(void *)(a1 + 244);
  *(_OWORD *)(a2 + 228) = v9;
  *(_OWORD *)(a2 + 212) = v8;
  *(__n128 *)(a2 + 196) = result;
  *(unsigned char *)(a2 + 300) = *(unsigned char *)(a1 + 300);
  return result;
}

void sub_1DD4EE5AC(float *a1, int a2, int a3, int a4)
{
  long long v6 = a1;
  if (a3 >= 1) {
    bzero(a1, 4 * a3);
  }
  if (a4 < 0)
  {
    uint64_t v8 = a2;
    if (!a2) {
      return;
    }
    goto LABEL_9;
  }
  unint64_t v7 = (a4 + 1);
  uint64_t v8 = a2;
  if (a2 > v7) {
    bzero(&v6[v7], 4 * (a2 - v7));
  }
  if (a2)
  {
LABEL_9:
    float v9 = 0.0;
    unint64_t v10 = v6;
    uint64_t v11 = v8;
    do
    {
      float v12 = *v10++;
      float v9 = v9 + v12;
      --v11;
    }
    while (v11);
    do
    {
      *long long v6 = *v6 / v9;
      ++v6;
      --v8;
    }
    while (v8);
  }
}

void sub_1DD4EE658(int *a1, float *a2)
{
  int v4 = *a1;
  if (*((unsigned char *)a1 + 4))
  {
    if (v4 > 2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v4;
      float v10 = 0.0;
      do
      {
        float v9 = (float)(unint64_t)(v4 - 1) * 0.5;
        float v11 = expf((float)-(float)((float)((float)(int)v7 - v9) * (float)((float)(int)v7 - v9))/ (float)((float)(v9 / 3.0) * (float)((float)(v9 / 3.0) + (float)(v9 / 3.0))));
        a2[v7] = v11;
        float v10 = v10 + v11;
        ++v7;
      }
      while (v4 != v7);
      float v12 = a2;
      do
      {
        *float v12 = *v12 / v10;
        ++v12;
        --v8;
      }
      while (v8);
    }
    else if (v4)
    {
      *a2 = 1.0;
      if (v4 == 2)
      {
        a2[1] = 0.0;
        int v4 = 2;
      }
      else
      {
        int v4 = 1;
      }
    }
  }
  else if (v4 >= 1)
  {
    long long v5 = a2;
    uint64_t v6 = *a1;
    do
    {
      *v5++ = 1.0 / (float)v4;
      --v6;
    }
    while (v6);
  }
  int v13 = a1[2];
  int v14 = a1[3];
  if ((v13 & 0x80000000) == 0 || (v14 & 0x80000000) == 0)
  {
    sub_1DD4EE5AC(a2, v4, v13, v14);
  }
}

void sub_1DD4EE7B0(uint64_t a1, char *a2, void *a3, vDSP_Length a4, vDSP_Length a5)
{
  float64x2_t v34 = a2;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    unint64_t v8 = 0;
    unsigned int v9 = 1;
    vDSP_Length v10 = a5;
    while (1)
    {
      if ((uint64_t)(a3[1] - *a3) >> 4 <= v8) {
        sub_1DD4BAA78();
      }
      vDSP_Length v11 = *(int *)(*a3 + 16 * v8);
      if (v11 > a5) {
        break;
      }
      if (v10 >= v11) {
        vDSP_Length v10 = v11;
      }
      unint64_t v8 = v9++;
      if (v8 >= a4)
      {
        v33[1] = v33;
        MEMORY[0x1F4188790](a1);
        int v13 = (float *)((char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
        vDSP_Length v14 = 0;
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        v33[0] = v15;
        unint64_t v18 = (v16 - v17) >> 4;
        vDSP_Length v19 = a5 >> 1;
        do
        {
          if (v18 <= v14) {
            sub_1DD4BAA78();
          }
          sub_1DD4EE658((int *)(v17 + 16 * v14), v13);
          unint64_t v21 = *(int *)(v17 + 16 * v14);
          if (v21)
          {
            float64x2_t v22 = (float *)&v34[4 * v19 + 4 * (v21 >> 1)];
            float v23 = 0.0;
            float64x2_t v24 = v13;
            do
            {
              float v25 = *v24++;
              float v26 = v25;
              float v27 = *v22--;
              float v23 = v23 + (float)(v26 * v27);
              --v21;
            }
            while (v21);
          }
          else
          {
            float v23 = 0.0;
          }
          *(float *)(a1 + 4 * v14) = v23;
          vDSP_Length v14 = (v14 + 1);
          ++v19;
        }
        while (v14 < a4);
        if (v10 == a5) {
          goto LABEL_19;
        }
        return;
      }
    }
  }
  else
  {
    uint64_t v20 = MEMORY[0x1F4188790](a1);
    int v13 = (float *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
LABEL_19:
    MEMORY[0x1F4188790](v20);
    float v31 = (float *)((char *)v33 - v30);
    if (v32) {
      memcpy((char *)v33 - v30, v34, v29);
    }
    vDSP_conv(v31, 1, &v13[a5 - 1], -1, v31, 1, a4, a5);
  }
}

void sub_1DD4EE9F0(uint64_t *a1, void **a2, int *a3, int **a4)
{
  long long v93 = a4;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    uint64_t v6 = a2;
    uint64_t v8 = v4 >> 5;
    *(void *)&long long v9 = 0xEEEEEEEEEEEEEEEELL;
    *((void *)&v9 + 1) = 0xEEEEEEEEEEEEEEEELL;
    long long v100 = v9;
    long long v101 = v9;
    sub_1DD4DF5E8(a2, v4 >> 5);
    if (a1[1] != *a1)
    {
      unint64_t v11 = 0;
      uint64_t v12 = v6 + 2;
      int v13 = (char *)v6[1];
      do
      {
        if ((unint64_t)v13 >= *v12)
        {
          uint64_t v15 = (v13 - (unsigned char *)*v6) >> 5;
          if ((unint64_t)(v15 + 1) >> 59) {
            sub_1DD4BACA0();
          }
          uint64_t v16 = *v12 - (void)*v6;
          uint64_t v17 = v16 >> 4;
          if (v16 >> 4 <= (unint64_t)(v15 + 1)) {
            uint64_t v17 = v15 + 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            vDSP_Length v10 = (char *)sub_1DD4BE1A4((uint64_t)(v6 + 2), v18);
          }
          else {
            vDSP_Length v10 = 0;
          }
          vDSP_Length v19 = &v10[32 * v15];
          long long v20 = v101;
          *(_OWORD *)vDSP_Length v19 = v100;
          *((_OWORD *)v19 + 1) = v20;
          float64x2_t v22 = (char *)*v6;
          unint64_t v21 = (char *)v6[1];
          float v23 = v19;
          if (v21 != *v6)
          {
            do
            {
              long long v24 = *((_OWORD *)v21 - 1);
              *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
              *((_OWORD *)v23 - 1) = v24;
              v23 -= 32;
              v21 -= 32;
            }
            while (v21 != v22);
            unint64_t v21 = (char *)*v6;
          }
          int v13 = v19 + 32;
          *uint64_t v6 = v23;
          v6[1] = v19 + 32;
          void v6[2] = &v10[32 * v18];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          long long v14 = v101;
          *(_OWORD *)int v13 = v100;
          *((_OWORD *)v13 + 1) = v14;
          v13 += 32;
        }
        v6[1] = v13;
        ++v11;
      }
      while (v11 < (a1[1] - *a1) >> 5);
    }
    uint64_t v98 = a1;
    if (a3)
    {
      v91[0] = v91;
      vDSP_Length v25 = *a3;
      MEMORY[0x1F4188790](v10);
      float v27 = (float *)((char *)v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
      vDSP_Length v28 = v8 + v25;
      sub_1DD4EE658(a3, v27);
    }
    else
    {
      size_t v29 = *v93;
      vDSP_Length v25 = 0;
      uint64_t v30 = (char *)v93[1] - (char *)*v93;
      if (v30)
      {
        unint64_t v31 = v30 >> 4;
        unsigned int v32 = 1;
        do
        {
          vDSP_Length v34 = *v29;
          v29 += 4;
          vDSP_Length v33 = v34;
          if (v25 <= v34) {
            vDSP_Length v25 = v33;
          }
        }
        while (v31 > v32++);
      }
      v91[0] = v91;
      MEMORY[0x1F4188790](v10);
      float v27 = (float *)((char *)v91 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
      vDSP_Length v28 = v25 + v8;
    }
    vDSP_Length v37 = v8;
    uint64_t v38 = (float *)malloc_type_malloc(4 * v28, 0x100004052888210uLL);
    uint64_t v39 = (float *)malloc_type_malloc(4 * v28, 0x100004052888210uLL);
    unint64_t v40 = v39;
    uint64_t v41 = 0;
    vDSP_Length v96 = v25 >> 1;
    vDSP_Length v97 = v37;
    if (v25 >> 1 <= 1) {
      uint64_t v42 = 1;
    }
    else {
      uint64_t v42 = v25 >> 1;
    }
    if (v37 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v37;
    }
    uint64_t v94 = v43;
    uint64_t v95 = a3;
    uint64_t v44 = 4;
    v91[1] = 4 * v37;
    double v92 = v27 - 1;
    vDSP_Length v45 = v25;
    vDSP_Length v99 = v25;
    vDSP_Length v46 = v37;
    do
    {
      uint64_t v47 = *v98;
      uint64_t v48 = v98[1];
      uint64_t v49 = *v98 + 8 * v41;
      unint64_t v50 = (v48 - *v98) >> 5;
      vDSP_Length v51 = v96;
      float64x2_t v52 = v38;
      uint64_t v53 = v40;
      uint64_t v54 = v42;
      if (v45 >= 2)
      {
        do
        {
          float64x2_t v56 = (float *)(v49 + 32 * (v51 % v50));
          int v57 = *((_DWORD *)v56 + 1);
          *v52++ = *v56;
          *(_DWORD *)v53++ = v57;
          --v51;
          --v54;
        }
        while (v54);
        int v55 = v42;
      }
      else
      {
        int v55 = 0;
      }
      if (v48 != v47)
      {
        if (v50 <= 1) {
          uint64_t v58 = 1;
        }
        else {
          uint64_t v58 = v50;
        }
        uint64_t v59 = &v40[v55];
        float64x2_t v60 = &v38[v55];
        float64x2_t v61 = (float *)(v47 + v44);
        v55 += v58;
        do
        {
          float v62 = *v61;
          *v60++ = *(v61 - 1);
          *v59++ = v62;
          v61 += 8;
          --v58;
        }
        while (v58);
      }
      uint64_t v63 = v6;
      if (v45 >= 2)
      {
        uint64_t v64 = &v40[v55];
        unint64_t v65 = v50 - 1;
        uint64_t v66 = v42;
        long long v67 = &v38[v55];
        do
        {
          uint64_t v68 = (float *)(v49 + 32 * (v65 % v50));
          int v69 = *((_DWORD *)v68 + 1);
          *v67++ = *v68;
          *(_DWORD *)v64++ = v69;
          --v65;
          --v66;
        }
        while (v66);
      }
      uint64_t v70 = v42;
      if (a3)
      {
        vDSP_Length v71 = *a3;
        double v72 = &v92[v71];
        vDSP_Length v73 = v97;
        vDSP_conv(v38, 1, v72, -1, v38, 1, v97, v71);
        vDSP_conv(v40, 1, v72, -1, v40, 1, v73, v71);
        long long v74 = (char *)*v63 + v44;
        uint64_t v75 = v94;
        float64x2x3_t v76 = v38;
        float64x2x3_t v77 = v40;
        uint64_t v42 = v70;
        vDSP_Length v45 = v99;
        do
        {
          int v78 = *(_DWORD *)v76++;
          *(v74 - 1) = v78;
          int v79 = *(_DWORD *)v77++;
          _DWORD *v74 = v79;
          v74 += 8;
          --v75;
        }
        while (v75);
      }
      else
      {
        uint64_t v80 = MEMORY[0x1F4188790](v39);
        long long v82 = (int *)((char *)v91 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0));
        MEMORY[0x1F4188790](v80);
        double v84 = (int *)((char *)v91 - v83);
        sub_1DD4EE7B0((uint64_t)v82, (char *)v38, v93, v46, v85);
        sub_1DD4EE7B0((uint64_t)v84, (char *)v40, v93, v46, v99);
        double v86 = (char *)*v63 + v44;
        uint64_t v87 = v94;
        do
        {
          int v88 = *v82++;
          int v89 = v88;
          int v90 = *v84++;
          *(v86 - 1) = v89;
          *double v86 = v90;
          v86 += 8;
          --v87;
        }
        while (v87);
        uint64_t v42 = v70;
        vDSP_Length v45 = v99;
      }
      ++v41;
      v44 += 8;
      a3 = v95;
      uint64_t v6 = v63;
    }
    while (v41 != 4);
    free(v38);
    free(v40);
  }
}

uint64_t sub_1DD4EEF0C(uint64_t result, double *a2, int a3, int a4, int a5)
{
  uint64_t v5 = 0;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  double v6 = (double)a3;
  double v7 = (double)a4;
  if ((double)a3 < (double)a4) {
    double v8 = (double)a4;
  }
  else {
    double v8 = (double)a3;
  }
  v36[0] = 1.0 / v8;
  v36[1] = 0.0;
  double v9 = -v6 / (v8 + v8);
  double v10 = -v7 / (v8 + v8);
  if (!a5)
  {
    double v9 = 0.0;
    double v10 = 0.0;
  }
  void v36[2] = v9;
  v36[3] = 0.0;
  void v36[4] = 1.0 / v8;
  v36[5] = v10;
  void v36[6] = 0.0;
  v36[7] = 0.0;
  v36[8] = 1.0;
  *(double *)uint64_t v35 = v8;
  v35[1] = 0;
  double v11 = v6 * 0.5;
  if (!a5) {
    double v11 = 0.0;
  }
  *(double *)&v35[2] = v11;
  v35[3] = 0;
  double v12 = v7 * 0.5;
  if (!a5) {
    double v12 = 0.0;
  }
  *(double *)&_OWORD v35[4] = v8;
  *(double *)&v35[5] = v12;
  v35[6] = 0;
  v35[7] = 0;
  v35[8] = 0x3FF0000000000000;
  int v13 = v36;
  do
  {
    uint64_t v14 = 0;
    uint64_t v15 = a2;
    do
    {
      uint64_t v16 = 0;
      double v17 = 0.0;
      unint64_t v18 = v15;
      do
      {
        double v19 = *v18;
        v18 += 3;
        double v17 = v17 + v13[v16++] * v19;
      }
      while (v16 != 3);
      *((double *)&v37 + 3 * v5 + v14++) = v17;
      ++v15;
    }
    while (v14 != 3);
    ++v5;
    v13 += 3;
  }
  while (v5 != 3);
  uint64_t v20 = 0;
  long long v21 = v40;
  *(_OWORD *)(result + 32) = v39;
  *(_OWORD *)(result + 48) = v21;
  *(void *)(result + 64) = v41;
  long long v22 = v38;
  *(_OWORD *)__n128 result = v37;
  *(_OWORD *)(result + 16) = v22;
  uint64_t v23 = result;
  do
  {
    uint64_t v24 = 0;
    vDSP_Length v25 = (double *)v35;
    do
    {
      uint64_t v26 = 0;
      double v27 = 0.0;
      vDSP_Length v28 = v25;
      do
      {
        double v29 = *v28;
        v28 += 3;
        double v27 = v27 + *(double *)(v23 + v26) * v29;
        v26 += 8;
      }
      while (v26 != 24);
      *((double *)&v37 + 3 * v20 + v24++) = v27;
      ++v25;
    }
    while (v24 != 3);
    ++v20;
    v23 += 24;
  }
  while (v20 != 3);
  uint64_t v30 = 0;
  long long v31 = v40;
  *(_OWORD *)(result + 32) = v39;
  *(_OWORD *)(result + 48) = v31;
  *(void *)(result + 64) = v41;
  long long v32 = v38;
  *(_OWORD *)__n128 result = v37;
  *(_OWORD *)(result + 16) = v32;
  vDSP_Length v33 = (const double *)(result + 64);
  float64x2_t v34 = vld1q_dup_f64(v33);
  do
  {
    *(float64x2_t *)(result + v30) = vdivq_f64(*(float64x2_t *)(result + v30), v34);
    v30 += 16;
  }
  while (v30 != 64);
  *(void *)(result + 64) = 0x3FF0000000000000;
  return result;
}

float sub_1DD4EF108(uint64_t *a1, unint64_t a2)
{
  return sub_1DD4E7D74(a1, a2, 0, 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) - 1);
}

BOOL sub_1DD4EF134(uint64_t a1, double *a2, uint64_t a3)
{
  sub_1DD4EF1BC(a2, a3, (uint64_t)v5);
  BOOL v3 = fabsf(v5[3]) <= 0.03;
  if (fabsf(v5[2]) > 0.03) {
    BOOL v3 = 0;
  }
  if (v5[0] < 0.95) {
    BOOL v3 = 0;
  }
  if (v5[0] > 1.05) {
    BOOL v3 = 0;
  }
  return fabsf(v5[1]) <= 0.5 && v3;
}

float64x2_t sub_1DD4EF1BC(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  double v5 = (double)(int)a2;
  if ((double)(int)a2 < (double)SHIDWORD(a2)) {
    double v5 = (double)SHIDWORD(a2);
  }
  v36[0] = 1.0 / v5;
  memset(&v36[1], 0, 24);
  void v36[4] = 1.0 / v5;
  memset(&v36[5], 0, 24);
  v36[8] = 1.0;
  *(double *)uint64_t v35 = v5;
  memset(&v35[1], 0, 24);
  *(double *)&_OWORD v35[4] = v5;
  memset(&v35[5], 0, 24);
  v35[8] = 0x3FF0000000000000;
  double v6 = v36;
  do
  {
    uint64_t v7 = 0;
    double v8 = a1;
    do
    {
      uint64_t v9 = 0;
      double v10 = 0.0;
      double v11 = v8;
      do
      {
        double v12 = *v11;
        v11 += 3;
        double v10 = v10 + v6[v9++] * v12;
      }
      while (v9 != 3);
      *((double *)&v37 + 3 * v4 + v7++) = v10;
      ++v8;
    }
    while (v7 != 3);
    ++v4;
    v6 += 3;
  }
  while (v4 != 3);
  uint64_t v13 = 0;
  long long v32 = v39;
  float64x2_t v33 = v40;
  uint64_t v34 = v41;
  long long v30 = v37;
  long long v31 = v38;
  uint64_t v14 = &v30;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = (double *)v35;
    do
    {
      uint64_t v17 = 0;
      double v18 = 0.0;
      double v19 = v16;
      do
      {
        double v20 = *v19;
        v19 += 3;
        double v18 = v18 + *(double *)((char *)v14 + v17) * v20;
        v17 += 8;
      }
      while (v17 != 24);
      *((double *)&v37 + 3 * v13 + v15++) = v18;
      ++v16;
    }
    while (v15 != 3);
    ++v13;
    uint64_t v14 = (long long *)((char *)v14 + 24);
  }
  while (v13 != 3);
  uint64_t v21 = 0;
  uint64_t v34 = v41;
  long long v32 = v39;
  float64x2_t v33 = v40;
  long long v30 = v37;
  long long v31 = v38;
  float64x2_t v22 = (float64x2_t)vdupq_lane_s64(v41, 0);
  do
  {
    *(long long *)((char *)&v30 + v21) = (__int128)vdivq_f64(*(float64x2_t *)((char *)&v30 + v21), v22);
    v21 += 16;
  }
  while (v21 != 64);
  long long v23 = v30;
  float v24 = *(double *)&v30 * *(double *)&v32 - *((double *)&v30 + 1) * *((double *)&v31 + 1);
  float v25 = (*(double *)&v32 * *((double *)&v30 + 1) + *(double *)&v30 * *((double *)&v31 + 1)) / v24;
  *(float *)a3 = v24;
  *(float *)(a3 + 4) = v25;
  float64x2_t v29 = v33;
  float v26 = *((double *)&v23 + 1);
  float v27 = *(double *)&v23;
  *(float *)(a3 + 24) = atan2f(v26, v27);
  *(void *)&result.f64[0] = v31;
  result.f64[1] = *((float64_t *)&v32 + 1);
  *(float32x4_t *)(a3 + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v29), result);
  return result;
}

uint64_t sub_1DD4EF3E4(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v10[9] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a4 + 80);
  if (!v5 || *(float *)(v5 + 168) < a1[7]) {
    return 0;
  }
  uint64_t result = sub_1DD4EF49C(a1, (double *)v5, a3);
  if (result)
  {
    uint64_t result = sub_1DD4EF51C((uint64_t)a1, a4, a2, (uint64_t)v10);
    if (result) {
      return sub_1DD4EF134(result, v10, a3);
    }
  }
  return result;
}

BOOL sub_1DD4EF49C(float *a1, double *a2, uint64_t a3)
{
  sub_1DD4EF1BC(a2, a3, (uint64_t)v8);
  float v4 = a1[2];
  BOOL v5 = fabsf(v8[3]) <= v4;
  if (fabsf(v8[2]) > v4) {
    BOOL v5 = 0;
  }
  float v6 = fabsf(v8[1]);
  if (v8[0] < a1[4]) {
    BOOL v5 = 0;
  }
  if (v8[0] > a1[3]) {
    BOOL v5 = 0;
  }
  return v6 <= a1[5] && v5;
}

BOOL sub_1DD4EF51C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  unint64_t v44 = 0;
  CMTime v43 = *(CMTime *)(*(void *)(a2 + 80) + 144);
  BOOL result = sub_1DD4EFC78(a1, a3, &v43, &v44);
  if (result)
  {
    unint64_t v45 = 0;
    CMTime v42 = *(CMTime *)(*(void *)(a2 + 80) + 112);
    BOOL result = sub_1DD4EFC78(result, a3, &v42, &v45);
    if (result)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = (double *)(*a3 + 304 * v45);
      double v10 = v9[7];
      double v11 = v9[8];
      double v12 = v9[4];
      double v13 = v9[5];
      double v14 = v9[6];
      double v15 = v12 * v11 - v10 * v13;
      double v16 = *v9;
      double v17 = v9[1];
      double v19 = v9[2];
      double v18 = v9[3];
      double v20 = v10 * v19 - v17 * v11;
      double v48 = v15;
      double v49 = v20;
      double v21 = v17 * v13 - v12 * v19;
      double v50 = v21;
      double v22 = v20 * v18 + v16 * v15 + v14 * v21;
      if (v22 >= 2.22044605e-16 || v22 <= -2.22044605e-16)
      {
        double v48 = v15 / v22;
        double v49 = v20 / v22;
        double v50 = v21 / v22;
        double v51 = (v14 * v13 - v18 * v11) / v22;
        double v52 = (v16 * v11 - v14 * v19) / v22;
        double v53 = (v18 * v19 - v16 * v13) / v22;
        double v54 = (v18 * v10 - v14 * v12) / v22;
        double v55 = (v14 * v17 - v16 * v10) / v22;
        double v56 = (v16 * v12 - v18 * v17) / v22;
      }
      uint64_t v24 = 0;
      uint64_t v25 = *(void *)(a2 + 80);
      do
      {
        uint64_t v26 = 0;
        float v27 = &v48;
        do
        {
          uint64_t v28 = 0;
          double v29 = 0.0;
          long long v30 = v27;
          do
          {
            double v31 = *v30;
            v30 += 3;
            double v29 = v29 + *(double *)(v25 + v28) * v31;
            v28 += 8;
          }
          while (v28 != 24);
          *((double *)&v57 + 3 * v24 + v26++) = v29;
          ++v27;
        }
        while (v26 != 3);
        ++v24;
        v25 += 24;
      }
      while (v24 != 3);
      uint64_t v32 = 0;
      uint64_t v33 = v8 + 304 * v44;
      v46[2] = v59;
      v46[3] = v60;
      uint64_t v47 = v61;
      v46[0] = v57;
      v46[1] = v58;
      do
      {
        uint64_t v34 = 0;
        uint64_t v35 = v46;
        do
        {
          uint64_t v36 = 0;
          double v37 = 0.0;
          long long v38 = (double *)v35;
          do
          {
            double v39 = *v38;
            v38 += 3;
            double v37 = v37 + *(double *)(v33 + v36) * v39;
            v36 += 8;
          }
          while (v36 != 24);
          *((double *)&v57 + 3 * v32 + v34++) = v37;
          uint64_t v35 = (_OWORD *)((char *)v35 + 8);
        }
        while (v34 != 3);
        ++v32;
        v33 += 24;
      }
      while (v32 != 3);
      long long v40 = v60;
      *(_OWORD *)(a4 + 32) = v59;
      *(_OWORD *)(a4 + 48) = v40;
      *(void *)(a4 + 64) = v61;
      long long v41 = v58;
      *(_OWORD *)a4 = v57;
      *(_OWORD *)(a4 + 16) = v41;
      return 1;
    }
  }
  return result;
}

void sub_1DD4EF7B0(double a1, double a2, uint64_t a3, uint64_t *a4, uint64_t a5, const double *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a4;
  uint64_t v6 = a4[1];
  uint64_t v8 = (v6 - *a4) >> 4;
  v32[0] = 1.0;
  memset(&v32[1], 0, 24);
  unint64_t v9 = 0x86BCA1AF286BCA1BLL * v8;
  v32[8] = 1.0;
  void v32[4] = 1.0;
  memset(&v32[5], 0, 24);
  if (v6 != v7)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    double v16 = (a2 - a1) / (double)(v9 - (v9 > 1));
    do
    {
      float v17 = a1 + v16 * (double)(int)v15;
      sub_1DD4E8430(v32, a6, v17, (uint64_t)v31, a5);
      uint64_t v18 = *a4;
      unint64_t v19 = 0x86BCA1AF286BCA1BLL * ((a4[1] - *a4) >> 4);
      if (v19 <= v15) {
        sub_1DD4BAA78();
      }
      uint64_t v20 = 0;
      uint64_t v21 = v18 + 304 * v15;
      uint64_t v22 = v18 + v14;
      do
      {
        uint64_t v23 = 0;
        uint64_t v24 = (double *)v31;
        do
        {
          uint64_t v25 = 0;
          double v26 = 0.0;
          float v27 = v24;
          do
          {
            double v28 = *v27;
            v27 += 3;
            double v26 = v26 + *(double *)(v22 + v25) * v28;
            v25 += 8;
          }
          while (v25 != 24);
          *((double *)v33 + 3 * v20 + v23++) = v26;
          ++v24;
        }
        while (v23 != 3);
        ++v20;
        v22 += 24;
      }
      while (v20 != 3);
      long long v29 = v33[3];
      *(_OWORD *)(v21 + 32) = v33[2];
      *(_OWORD *)(v21 + 48) = v29;
      *(void *)(v21 + 64) = v34;
      long long v30 = v33[1];
      *(_OWORD *)uint64_t v21 = v33[0];
      *(_OWORD *)(v21 + 16) = v30;
      ++v15;
      v14 += 304;
    }
    while (v19 > v15);
  }
}

uint64_t sub_1DD4EF96C(float *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, int a5, int a6, int *a7)
{
  CMTime v40 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  uint64_t v7 = *a2;
  CMTime v39 = *(CMTime *)(*a2 + 304 * a5 + 112);
  CMTime v38 = *(CMTime *)(v7 + 304 * a6 + 112);
  uint64_t v9 = *a4;
  uint64_t v8 = a4[1];
  if (v8 == *a4) {
    return 0;
  }
  unint64_t v15 = 0;
  int v16 = -1;
  do
  {
    uint64_t v17 = *(void *)(v9 + 8 * v15);
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 48);
      if (v18)
      {
        uint64_t v19 = *(void *)(v17 + 64);
        if (v19)
        {
          CMTime v37 = *(CMTime *)(v18 + 28);
          CMTime v36 = *(CMTime *)(v19 + 28);
          CMTime v35 = v39;
          CMTime v34 = *(CMTime *)(v18 + 28);
          CMTime v33 = v38;
          if (sub_1DD4EFBE0(&v35, &v34, &v33))
          {
            CMTime v32 = v39;
            CMTime v31 = v36;
            CMTime v30 = v38;
            BOOL v20 = sub_1DD4EFBE0(&v32, &v31, &v30);
          }
          else
          {
            BOOL v20 = 0;
          }
          CMTime time1 = v39;
          CMTime time2 = v38;
          int32_t v21 = CMTimeCompare(&time1, &time2);
          if (v20 && v21 < 0 && sub_1DD4EF3E4(a1, a2, a3, v17))
          {
            memset(&v27, 0, sizeof(v27));
            CMTime lhs = v36;
            CMTime rhs = v37;
            CMTimeSubtract(&v27, &lhs, &rhs);
            CMTime v24 = v27;
            CMTime v23 = v40;
            if (CMTimeCompare(&v24, &v23) >= 1)
            {
              CMTime v40 = v27;
              int v16 = v15;
            }
          }
          uint64_t v9 = *a4;
          uint64_t v8 = a4[1];
        }
      }
    }
    ++v15;
  }
  while (v15 < (v8 - v9) >> 3);
  if (v16 == -1) {
    return 0;
  }
  *a7 = v16;
  return 1;
}

BOOL sub_1DD4EFBE0(CMTime *a1, CMTime *a2, CMTime *a3)
{
  CMTime time1 = *a2;
  CMTime time2 = *a1;
  if (CMTimeCompare(&time1, &time2) < 0) {
    return 0;
  }
  CMTime v7 = *a2;
  CMTime v6 = *a3;
  return CMTimeCompare(&v7, &v6) < 1;
}

BOOL sub_1DD4EFC78(uint64_t a1, void *a2, CMTime *a3, unint64_t *a4)
{
  uint64_t v6 = a2[1];
  if (v6 == *a2)
  {
    unint64_t v10 = 0;
    uint64_t v9 = a2[1];
  }
  else
  {
    CMTime time1 = *(CMTime *)(*a2 + 112);
    CMTime time2 = *a3;
    int32_t v8 = CMTimeCompare(&time1, &time2);
    uint64_t v6 = *a2;
    uint64_t v9 = a2[1];
    if (v8 <= 0)
    {
      unint64_t v11 = 0;
      uint64_t v12 = 416;
      do
      {
        unint64_t v10 = v11++;
        if (0x86BCA1AF286BCA1BLL * ((v9 - v6) >> 4) <= v11) {
          break;
        }
        double v13 = (long long *)(v6 + v12);
        long long v14 = *v13;
        time1.CMTimeEpoch epoch = *((void *)v13 + 2);
        *(_OWORD *)&time1.value = v14;
        CMTime time2 = *a3;
        int32_t v15 = CMTimeCompare(&time1, &time2);
        uint64_t v6 = *a2;
        uint64_t v9 = a2[1];
        v12 += 304;
      }
      while (v15 < 1);
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  *a4 = v10;
  if (v10 >= 0x86BCA1AF286BCA1BLL * ((v9 - v6) >> 4)) {
    return 0;
  }
  CMTime v20 = *a3;
  uint64_t v16 = v6 + 304 * v10;
  CMTimeEpoch v17 = *(void *)(v16 + 128);
  *(_OWORD *)&v19.value = *(_OWORD *)(v16 + 112);
  v19.CMTimeEpoch epoch = v17;
  return CMTimeCompare(&v20, &v19) == 0;
}

void sub_1DD4EFDF8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void v35[9] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 48);
  v34.CMTimeEpoch epoch = *(void *)(v8 + 44);
  uint64_t v9 = *(void *)(a2 + 64);
  long long v10 = *(_OWORD *)(v9 + 28);
  v33.CMTimeEpoch epoch = *(void *)(v9 + 44);
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  v32.CMTimeEpoch epoch = *(void *)(*a3 + 128);
  *(_OWORD *)&v34.value = *(_OWORD *)(v8 + 28);
  *(_OWORD *)&v33.value = v10;
  *(_OWORD *)&v32.value = *(_OWORD *)(v11 + 112);
  CMTime v31 = *(CMTime *)(v12 - 192);
  long long v13 = *(_OWORD *)(v11 + 112);
  v30.CMTimeEpoch epoch = *(void *)(v11 + 128);
  *(_OWORD *)&v30.value = v13;
  long long v14 = *(_OWORD *)(v8 + 28);
  v29.CMTimeEpoch epoch = *(void *)(v8 + 44);
  *(_OWORD *)&v29.value = v14;
  CMTime v28 = v31;
  if (sub_1DD4EFBE0(&v30, &v29, &v28))
  {
    CMTime v27 = v32;
    CMTime v26 = v33;
    CMTime v25 = v31;
    BOOL v15 = sub_1DD4EFBE0(&v27, &v26, &v25);
    if (v15)
    {
      unint64_t v23 = 0;
      unint64_t v24 = 0;
      CMTime v22 = v34;
      BOOL v16 = sub_1DD4EFC78(v15, a3, &v22, &v24);
      BOOL v17 = v16;
      CMTime v21 = v33;
      BOOL v18 = sub_1DD4EFC78(v16, a3, &v21, &v23);
      if (v17 && v18)
      {
        BOOL v19 = sub_1DD4EF51C(a1, a2, a3, (uint64_t)v35);
        if (v19)
        {
          uint64_t v20 = v23 + ~v24;
          if (v20 <= 1) {
            uint64_t v20 = 1;
          }
          sub_1DD4EF7B0(-(1.0 / (double)v20 * (double)v24), (double)(~v23 - 0x79435E50D79435E5 * ((a3[1] - *a3) >> 4)) * (1.0 / (double)v20) + 1.0, v19, a3, a4, v35);
        }
      }
    }
  }
}

void sub_1DD4F0000(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 / 304;
    uint64_t v9 = v8 <= 1 ? 1 : v8;
    if (*(void *)(v6 + 104) != a6)
    {
      uint64_t v10 = 0;
      uint64_t v11 = (uint64_t *)(v6 + 408);
      uint64_t v12 = v9 - 1;
      do
      {
        if (v12 == v10) {
          break;
        }
        uint64_t v13 = *v11;
        v11 += 38;
        ++v10;
      }
      while (v13 != a6);
    }
  }
  operator new();
}

void sub_1DD4F059C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  *(void *)(v25 + 8) = v26;
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1DD4F05D0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  float v4 = (_OWORD *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a2 - *a1) >> 4);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v25 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v25 > 0xD79435E50D7943) {
      sub_1DD4BACA0();
    }
    unint64_t v26 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x6BCA1AF286BCA1) {
      unint64_t v27 = 0xD79435E50D7943;
    }
    else {
      unint64_t v27 = v25;
    }
    uint64_t v34 = v9;
    if (v27) {
      CMTime v28 = (char *)sub_1DD4BC400(v9, v27);
    }
    else {
      CMTime v28 = 0;
    }
    CMTime v30 = v28;
    CMTime v31 = &v28[304 * v8];
    CMTime v32 = v31;
    CMTime v33 = &v28[304 * v27];
    sub_1DD4F4D60(&v30, a3);
    float v4 = (_OWORD *)sub_1DD4BCCA8(a1, &v30, (uint64_t)v4);
    sub_1DD4BC608((uint64_t)&v30);
  }
  else if (a2 == v6)
  {
    sub_1DD4C0D48((uint64_t)a1, a3);
  }
  else
  {
    sub_1DD4BCAA0((uint64_t)a1, a2, v6, a2 + 304);
    if ((unint64_t)v4 <= a3) {
      a3 += 304 * (a1[1] > a3);
    }
    *float v4 = *(_OWORD *)a3;
    long long v12 = *(_OWORD *)(a3 + 16);
    long long v13 = *(_OWORD *)(a3 + 32);
    long long v14 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)((char *)v4 + 60) = *(_OWORD *)(a3 + 60);
    v4[2] = v13;
    v4[3] = v14;
    v4[1] = v12;
    if (v4 != (_OWORD *)a3) {
      sub_1DD4BD174((char *)(v7 + 304 * v8 + 80), *(char **)(a3 + 80), *(void *)(a3 + 88), (uint64_t)(*(void *)(a3 + 88) - *(void *)(a3 + 80)) >> 6);
    }
    unint64_t v15 = v7 + 304 * v8;
    *(_OWORD *)(v15 + 104) = *(_OWORD *)(a3 + 104);
    long long v16 = *(_OWORD *)(a3 + 120);
    long long v17 = *(_OWORD *)(a3 + 136);
    long long v18 = *(_OWORD *)(a3 + 152);
    *(_OWORD *)(v15 + 168) = *(_OWORD *)(a3 + 168);
    *(_OWORD *)(v15 + 152) = v18;
    *(_OWORD *)(v15 + 136) = v17;
    *(_OWORD *)(v15 + 120) = v16;
    long long v19 = *(_OWORD *)(a3 + 184);
    long long v20 = *(_OWORD *)(a3 + 200);
    long long v21 = *(_OWORD *)(a3 + 216);
    *(_OWORD *)(v15 + 232) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(v15 + 216) = v21;
    *(_OWORD *)(v15 + 200) = v20;
    *(_OWORD *)(v15 + 184) = v19;
    long long v22 = *(_OWORD *)(a3 + 264);
    long long v23 = *(_OWORD *)(a3 + 280);
    uint64_t v24 = *(void *)(a3 + 293);
    *(_OWORD *)(v15 + 248) = *(_OWORD *)(a3 + 248);
    *(void *)(v15 + 293) = v24;
    *(_OWORD *)(v15 + 264) = v22;
    *(_OWORD *)(v15 + 280) = v23;
  }
  return v4;
}

void sub_1DD4F07FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BC608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DD4F0810(void *a1, unint64_t a2, char a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  float v4 = a1 + 1;
  BOOL v5 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    int v8 = a2;
    unint64_t v9 = HIDWORD(a2);
    while (1)
    {
      unint64_t v10 = (double *)v5[5];
      double v11 = v10[7];
      double v12 = v10[8];
      double v13 = v10[4];
      double v14 = v10[5];
      double v15 = v10[6];
      double v16 = v13 * v12 - v11 * v14;
      double v17 = *v10;
      double v18 = v10[1];
      double v20 = v10[2];
      double v19 = v10[3];
      double v21 = v11 * v20 - v18 * v12;
      *(double *)&long long v30 = v16;
      *((double *)&v30 + 1) = v21;
      double v22 = v18 * v14 - v13 * v20;
      *(double *)&long long v31 = v22;
      double v23 = v21 * v19 + v17 * v16 + v15 * v22;
      if (v23 >= 2.22044605e-16 || v23 <= -2.22044605e-16)
      {
        *(double *)&long long v30 = v16 / v23;
        *((double *)&v30 + 1) = v21 / v23;
        *(double *)&long long v31 = v22 / v23;
        *((double *)&v31 + 1) = (v15 * v14 - v19 * v12) / v23;
        *(double *)&long long v32 = (v17 * v12 - v15 * v20) / v23;
        *((double *)&v32 + 1) = (v19 * v20 - v17 * v14) / v23;
        *(double *)&long long v33 = (v19 * v11 - v15 * v13) / v23;
        *((double *)&v33 + 1) = (v15 * v18 - v17 * v11) / v23;
        double v34 = (v17 * v13 - v19 * v18) / v23;
      }
      if ((a3 & 1) == 0) {
        break;
      }
      sub_1DD4EEF0C((uint64_t)v35, (double *)&v30, v8, v9, 1);
      if (a4) {
        goto LABEL_13;
      }
LABEL_14:
      uint64_t v25 = 0;
      uint64_t v26 = v5[5];
      do
      {
        *(void *)(v26 + v25) = *(void *)((char *)v35 + v25);
        v25 += 8;
      }
      while (v25 != 72);
      unint64_t v27 = (void *)v5[1];
      if (v27)
      {
        do
        {
          CMTime v28 = v27;
          unint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          CMTime v28 = (void *)v5[2];
          BOOL v29 = *v28 == (void)v5;
          BOOL v5 = v28;
        }
        while (!v29);
      }
      BOOL v5 = v28;
      if (v28 == v4) {
        return;
      }
    }
    v35[2] = v32;
    v35[3] = v33;
    double v36 = v34;
    v35[0] = v30;
    v35[1] = v31;
    if (!a4) {
      goto LABEL_14;
    }
LABEL_13:
    sub_1DD4D1268((uint64_t)v35, (uint64_t)v35);
    goto LABEL_14;
  }
}

void sub_1DD4F0A18(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  BOOL v13 = sub_1DD4B7FE4((void *)a4);
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  if (v13) {
    unint64_t v16 = 4;
  }
  else {
    unint64_t v16 = 9;
  }
  sub_1DD4BDB88(a1);
  uint64_t v65 = 0;
  long long v63 = 0u;
  *(_OWORD *)uint64_t v64 = 0u;
  *(_OWORD *)uint64_t v61 = 0u;
  *(_OWORD *)uint64_t v62 = 0u;
  *(_OWORD *)long long v59 = 0u;
  long long v60 = 0u;
  *(_OWORD *)long long v58 = 0u;
  if (v13)
  {
    if (v58 != (void **)a4)
    {
      sub_1DD4C80FC((char *)v58, *(char **)a4, *(void *)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
      sub_1DD4F4780((char *)&v59[1], *(char **)(a4 + 24), *(void *)(a4 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 3));
      sub_1DD4C80FC((char *)v61, *(char **)(a4 + 48), *(void *)(a4 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 56) - *(void *)(a4 + 48)) >> 3));
      sub_1DD4F4780((char *)&v62[1], *(char **)(a4 + 72), *(void *)(a4 + 80), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a4 + 80) - *(void *)(a4 + 72)) >> 3));
    }
    sub_1DD4F46EC(v64, a4 + 96);
    long long v66 = *(_OWORD *)(a4 + 120);
  }
  if (v14 != v15)
  {
    uint64_t v17 = 0;
    if ((int)a3 >= 0) {
      int v18 = a3;
    }
    else {
      int v18 = a3 + 1;
    }
    double v19 = (double)(v18 >> 1);
    unint64_t v20 = (v14 - v15) >> 4;
    if (a3 >= 0) {
      int v21 = HIDWORD(a3);
    }
    else {
      int v21 = HIDWORD(a3) + 1;
    }
    double v22 = (double)(v21 >> 1);
    if (v20 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = (v14 - v15) >> 4;
    }
    uint64_t v24 = -(uint64_t)v20;
    while (*(double *)(*a2 + v17) < 0.0 || *(double *)(*a2 + v17 + 8) < 0.0)
    {
      long long __p = 0uLL;
      *(void *)&long long v68 = 0;
      sub_1DD4DF290(a1, (uint64_t)&__p);
      uint64_t v25 = (void *)__p;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
LABEL_44:
        operator delete(v25);
      }
LABEL_45:
      v17 += 16;
      ++v24;
      if (!--v23) {
        goto LABEL_46;
      }
    }
    sub_1DD4BD398(v57, v16);
    if (v13)
    {
      if (sub_1DD4B7FE4(v58)) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58[1] - (char *)v58[0]) >> 3);
      }
      else {
        LODWORD(v26) = 0;
      }
      uint64_t v31 = v24 + (int)v26;
      long long v32 = (double *)(*(void *)(a4 + 72) + 72 * v31);
      double v33 = v32[7];
      double v34 = v32[8];
      double v35 = v32[4];
      double v36 = v32[5];
      double v37 = v32[6];
      double v38 = v35 * v34 - v33 * v36;
      double v39 = *v32;
      double v40 = v32[1];
      double v42 = v32[2];
      double v41 = v32[3];
      double v43 = v33 * v42 - v40 * v34;
      double v44 = v40 * v36 - v35 * v42;
      double v45 = v43 * v41 + *v32 * v38 + v37 * v44;
      if (v45 >= 2.22044605e-16 || v45 <= -2.22044605e-16)
      {
        double v38 = v38 / v45;
        double v43 = v43 / v45;
        double v44 = v44 / v45;
        double v5 = (v37 * v36 - v41 * v34) / v45;
        double v4 = (v41 * v33 - v37 * v35) / v45;
        double v6 = (v39 * v34 - v37 * v42) / v45;
        double v7 = (v41 * v42 - v39 * v36) / v45;
        double v8 = (v37 * v40 - v39 * v33) / v45;
        double v9 = (v39 * v35 - v41 * v40) / v45;
      }
      uint64_t v47 = (double *)(*a2 + v17);
      double v48 = v47[1];
      double v49 = v44 + v43 * v48 + v38 * *v47;
      double v50 = v9 + v8 * v48 + v4 * *v47;
      double v51 = (v7 + v6 * v48 + v5 * *v47) / v50;
      uint64_t v69 = 0;
      uint64_t v73 = 0;
      long long __p = 0u;
      long long v68 = 0u;
      *(double *)&long long v68 = v49 / v50;
      double v70 = v51;
      double v71 = -(v49 / v50);
      double v72 = -v51;
      sub_1DD4D1308((uint64_t)v59[1] + 72 * v31, &__p);
      double v52 = v57[0];
      double v53 = sub_1DD4C15B0(*(double *)&v66, *((double *)&v66 + 1));
      sub_1DD4C15BC((uint64_t)v52, &v59[1], &v62[1], v31, v53);
      unint64_t v54 = a1[1];
      if (v54 >= a1[2])
      {
        uint64_t v55 = sub_1DD4F4C48(a1, (uint64_t)v57);
      }
      else
      {
        sub_1DD4F4BF4((uint64_t)a1, (uint64_t)v57);
        uint64_t v55 = v54 + 24;
      }
      a1[1] = v55;
    }
    else
    {
      sub_1DD4BD398(&__p, 9uLL);
      uint64_t v27 = __p;
      *(void *)(__p + 16) = 0;
      *(void *)(v27 + 24) = 0;
      *(void *)uint64_t v27 = 0x3FF0000000000000;
      *(void *)(v27 + 8) = 0;
      *(void *)(v27 + 32) = 0x3FF0000000000000;
      *(void *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(void *)(v27 + 64) = 0x3FF0000000000000;
      CMTime v28 = (double *)(*a2 + v17);
      *(double *)(v27 + 16) = *v28 - v19;
      *(double *)(v27 + 40) = v28[1] - v22;
      sub_1DD4EEF0C((uint64_t)v57[0], (double *)v27, a3, SHIDWORD(a3), 1);
      sub_1DD4D1268((uint64_t)v57[0], (uint64_t)v57[0]);
      unint64_t v29 = a1[1];
      if (v29 >= a1[2])
      {
        uint64_t v30 = sub_1DD4F4C48(a1, (uint64_t)v57);
      }
      else
      {
        sub_1DD4F4BF4((uint64_t)a1, (uint64_t)v57);
        uint64_t v30 = v29 + 24;
      }
      a1[1] = v30;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
    uint64_t v25 = v57[0];
    if (!v57[0]) {
      goto LABEL_45;
    }
    v57[1] = v57[0];
    goto LABEL_44;
  }
LABEL_46:
  if (v64[0]) {
    operator delete(v64[0]);
  }
  if (v62[1])
  {
    *(void **)&long long v63 = v62[1];
    operator delete(v62[1]);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (v59[1])
  {
    *(void **)&long long v60 = v59[1];
    operator delete(v59[1]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
}

void sub_1DD4F0F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
}

uint64_t sub_1DD4F0F80(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2) {
    operator delete(v2);
  }
  BOOL v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  double v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  double v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t *sub_1DD4F0FF0(uint64_t *result, uint64_t a2, int a3)
{
  if (a3)
  {
    BOOL v3 = result;
    uint64_t v4 = *result;
    if (result[1] != *result)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      if ((double)(int)a2 < (double)SHIDWORD(a2)) {
        double v7 = (double)SHIDWORD(a2);
      }
      else {
        double v7 = (double)(int)a2;
      }
      double v8 = -(double)(int)a2 / (v7 + v7);
      double v9 = -(double)SHIDWORD(a2) / (v7 + v7);
      double v10 = 1.0 / v7;
      do
      {
        BOOL result = (uint64_t *)CGRectIsNull(*(CGRect *)(v4 + v5));
        uint64_t v4 = *v3;
        if ((result & 1) == 0)
        {
          double v11 = (double *)(v4 + v5);
          double v12 = *(double *)(v4 + v5);
          double v13 = *(double *)(v4 + v5 + 8);
          double v14 = v12 + *(double *)(v4 + v5 + 16);
          double v15 = v13 + *(double *)(v4 + v5 + 24);
          double v16 = v13 * 0.0;
          double v17 = v8 + v13 * 0.0 + v10 * v12;
          double v18 = v9 + v10 * v13 + v12 * 0.0;
          double v19 = v16 + v12 * 0.0 + 1.0;
          double v20 = v17 / v19;
          double v21 = v18 / v19;
          double v22 = v15 * 0.0 + v14 * 0.0 + 1.0;
          *double v11 = v20;
          v11[1] = v21;
          v11[2] = (v8 + v15 * 0.0 + v10 * v14) / v22 - v20;
          void v11[3] = (v9 + v10 * v15 + v14 * 0.0) / v22 - v21;
        }
        ++v6;
        v5 += 32;
      }
      while (v6 < (v3[1] - v4) >> 5);
    }
  }
  return result;
}

uint64_t sub_1DD4F1124(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  unint64_t v6 = [v5 objectForKeyedSubscript:IC_C_MOTION_BLUR_VECTOR];

  if (!v6
    || ([v5 objectForKeyedSubscript:IC_C_MOTION_BLUR_VECTOR],
        double v7 = objc_claimAutoreleasedReturnValue(),
        BOOL v8 = sub_1DD4F15BC(v7, (uint64_t *)a1),
        v7,
        v8)
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) == a4)
  {
    double v9 = [v5 objectForKeyedSubscript:IC_C_L1_SALIENT_RECTS];

    if (v9)
    {
      [v5 objectForKeyedSubscript:IC_C_L1_SALIENT_RECTS];
      id v52 = v5;
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      double v11 = (char **)(a1 + 72);
      *(void *)(a1 + 80) = *(void *)(a1 + 72);
      sub_1DD4DF5E8((void **)(a1 + 72), [v10 count]);
      unint64_t v12 = 0;
      uint64_t v13 = MEMORY[0x1E4F1DB20];
      while (objc_msgSend(v10, "count", v52) > v12)
      {
        CGSize v14 = *(CGSize *)(v13 + 16);
        rect.origin = *(CGPoint *)v13;
        rect.CGSize size = v14;
        CFDictionaryRef v15 = [v10 objectAtIndexedSubscript:v12];
        BOOL v16 = CGRectMakeWithDictionaryRepresentation(v15, &rect);

        if (!v16)
        {

          uint64_t v32 = 6;
          id v5 = v52;
          goto LABEL_56;
        }
        unint64_t v17 = *(void *)(a1 + 80);
        unint64_t v18 = *(void *)(a1 + 88);
        if (v17 >= v18)
        {
          uint64_t v20 = (uint64_t)(v17 - (void)*v11) >> 5;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 59) {
            sub_1DD4BACA0();
          }
          uint64_t v22 = v18 - (void)*v11;
          if (v22 >> 4 > v21) {
            unint64_t v21 = v22 >> 4;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23) {
            uint64_t v24 = (char *)sub_1DD4BE1A4(a1 + 88, v23);
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = (CGSize *)&v24[32 * v20];
          CGSize size = rect.size;
          *uint64_t v25 = (CGSize)rect.origin;
          v25[1] = size;
          CMTime v28 = *(char **)(a1 + 72);
          uint64_t v27 = *(char **)(a1 + 80);
          unint64_t v29 = v25;
          if (v27 != v28)
          {
            do
            {
              CGSize v30 = (CGSize)*((_OWORD *)v27 - 1);
              v29[-2] = *((CGSize *)v27 - 2);
              v29[-1] = v30;
              v29 -= 2;
              v27 -= 32;
            }
            while (v27 != v28);
            uint64_t v27 = *v11;
          }
          uint64_t v31 = (char *)&v25[2];
          *(void *)(a1 + 72) = v29;
          *(void *)(a1 + 80) = v25 + 2;
          *(void *)(a1 + 88) = &v24[32 * v23];
          if (v27) {
            operator delete(v27);
          }
          *(void *)(a1 + 80) = v31;
        }
        else
        {
          CGSize v19 = rect.size;
          *(CGPoint *)unint64_t v17 = rect.origin;
          *(CGSize *)(v17 + 16) = v19;
          *(void *)(a1 + 80) = v17 + 32;
        }
        ++v12;
      }

      id v5 = v52;
      if (a4 == (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 5) {
        goto LABEL_28;
      }
      uint64_t v32 = 6;
    }
    else
    {
LABEL_28:
      double v33 = [v5 objectForKeyedSubscript:IC_C_L1_CENTER_TARGETS];

      if (v33)
      {
        id v34 = [v5 objectForKeyedSubscript:IC_C_L1_CENTER_TARGETS];
        double v35 = (CGPoint **)(a1 + 48);
        *(void *)(a1 + 56) = *(void *)(a1 + 48);
        sub_1DD4DF534((void **)(a1 + 48), [v34 count]);
        for (unint64_t i = 0; [v34 count] > i; ++i)
        {
          CFDictionaryRef v37 = [v34 objectAtIndexedSubscript:i];
          BOOL v38 = CGPointMakeWithDictionaryRepresentation(v37, &rect.origin);

          if (!v38)
          {

            goto LABEL_54;
          }
          double v40 = *(CGPoint **)(a1 + 56);
          unint64_t v39 = *(void *)(a1 + 64);
          if ((unint64_t)v40 >= v39)
          {
            uint64_t v41 = v40 - *v35;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 60) {
              sub_1DD4BACA0();
            }
            uint64_t v43 = v39 - (void)*v35;
            if (v43 >> 3 > v42) {
              unint64_t v42 = v43 >> 3;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44) {
              double v45 = (char *)sub_1DD4BE0AC(a1 + 64, v44);
            }
            else {
              double v45 = 0;
            }
            vDSP_Length v46 = (CGPoint *)&v45[16 * v41];
            *vDSP_Length v46 = rect.origin;
            double v48 = *(CGPoint **)(a1 + 48);
            uint64_t v47 = *(CGPoint **)(a1 + 56);
            double v49 = v46;
            if (v47 != v48)
            {
              do
              {
                v49[-1] = v47[-1];
                --v49;
                --v47;
              }
              while (v47 != v48);
              uint64_t v47 = *v35;
            }
            double v50 = v46 + 1;
            *(void *)(a1 + 48) = v49;
            *(void *)(a1 + 56) = v46 + 1;
            *(void *)(a1 + 64) = &v45[16 * v44];
            if (v47) {
              operator delete(v47);
            }
            *(void *)(a1 + 56) = v50;
          }
          else
          {
            *double v40 = rect.origin;
            *(void *)(a1 + 56) = v40 + 1;
          }
        }

        if (a4 == (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4) {
          goto LABEL_52;
        }
LABEL_54:
        uint64_t v32 = 7;
      }
      else
      {
LABEL_52:
        uint64_t v32 = 0;
      }
    }
  }
  else
  {
    uint64_t v32 = 5;
  }
LABEL_56:

  return v32;
}

void sub_1DD4F1554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DD4F15BC(void *a1, uint64_t *a2)
{
  unint64_t v26 = a2;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v2 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t v3 = [v2 count]) != 0)
  {
    unint64_t v27 = v3;
    CMTime v28 = v2;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    sub_1DD4DF1DC((uint64_t *)&v37, v3);
    uint64_t v4 = 0;
    BOOL v29 = 0;
    while (1)
    {
      id v5 = objc_msgSend(v28, "objectAtIndexedSubscript:", v4, v26);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      unint64_t v6 = [v5 count];
      if (!v6) {
        break;
      }
      long long __p = 0;
      double v35 = 0;
      double v36 = 0;
      sub_1DD4D6F8C(&__p, v6);
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v7 = v5;
      uint64_t v8 = [v7 countByEnumeratingWithState:&v30 objects:v39 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v31;
        while (2)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v31 != v9) {
              objc_enumerationMutation(v7);
            }
            double v11 = *(void **)(*((void *)&v30 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {

              char v24 = 0;
              goto LABEL_32;
            }
            [v11 doubleValue];
            uint64_t v13 = v12;
            CGSize v14 = v35;
            if (v35 >= v36)
            {
              BOOL v16 = (char *)__p;
              uint64_t v17 = (v35 - (unsigned char *)__p) >> 3;
              unint64_t v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 61) {
                sub_1DD4BACA0();
              }
              uint64_t v19 = v36 - (unsigned char *)__p;
              if ((v36 - (unsigned char *)__p) >> 2 > v18) {
                unint64_t v18 = v19 >> 2;
              }
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                unint64_t v21 = (char *)sub_1DD4BAF80((uint64_t)&v36, v20);
                BOOL v16 = (char *)__p;
                CGSize v14 = v35;
              }
              else
              {
                unint64_t v21 = 0;
              }
              uint64_t v22 = &v21[8 * v17];
              *(void *)uint64_t v22 = v13;
              CFDictionaryRef v15 = v22 + 8;
              while (v14 != v16)
              {
                uint64_t v23 = *((void *)v14 - 1);
                v14 -= 8;
                *((void *)v22 - 1) = v23;
                v22 -= 8;
              }
              long long __p = v22;
              double v35 = v15;
              double v36 = &v21[8 * v20];
              if (v16) {
                operator delete(v16);
              }
            }
            else
            {
              *(void *)double v35 = v12;
              CFDictionaryRef v15 = v14 + 8;
            }
            double v35 = v15;
          }
          uint64_t v8 = [v7 countByEnumeratingWithState:&v30 objects:v39 count:16];
          if (v8) {
            continue;
          }
          break;
        }
      }

      sub_1DD4DF290((uint64_t *)&v37, (uint64_t)&__p);
      char v24 = 1;
LABEL_32:
      if (__p)
      {
        double v35 = (char *)__p;
        operator delete(__p);
      }

      if ((v24 & 1) == 0) {
        goto LABEL_39;
      }
      BOOL v29 = v27 <= ++v4;
      if (v4 == v27)
      {
        sub_1DD4C8598(v26);
        *(_OWORD *)unint64_t v26 = v37;
        void v26[2] = v38;
        uint64_t v38 = 0;
        long long v37 = 0uLL;
        BOOL v29 = 1;
        goto LABEL_39;
      }
    }

LABEL_39:
    long long __p = &v37;
    sub_1DD4BDB34((void ***)&__p);
    id v2 = v28;
  }
  else
  {
    BOOL v29 = 0;
  }

  return v29;
}

void sub_1DD4F18E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23,uint64_t a24,char a25)
{
  long long __p = &a25;
  sub_1DD4BDB34((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1DD4F196C(uint64_t *a1@<X1>, void *a2@<X8>)
{
  sub_1DD4DBF70(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      id v7 = (double **)(*a2 + v5);
      uint64_t v19 = 0x3FF0000000000000;
      sub_1DD4C7738((uint64_t)v7, 9uLL, &v19);
      uint64_t v8 = *(double **)(v4 + v5);
      float v9 = *v8;
      float v10 = (float)(tanhf((float)(fabsf(v9) * 2.0) + -5.0) * 100.0) + 100.0;
      float v11 = v8[1];
      float v12 = (float)(tanhf((float)(fabsf(v11) * 2.0) + -5.0) * 100.0) + 100.0;
      float v13 = (float)(tanhf((float)(fabsf(v10) * 2.0) + -5.0) * 100.0) + 100.0;
      float v14 = (float)(tanhf((float)(fabsf(v12) * 2.0) + -5.0) * 100.0) + 100.0;
      if (v13 >= 1.0) {
        float v15 = v13;
      }
      else {
        float v15 = 1.0;
      }
      if (v14 < 1.0) {
        float v14 = 1.0;
      }
      double v16 = v15;
      uint64_t v17 = *v7;
      v17[2] = v16;
      double v18 = v14;
      v17[6] = v16;
      v17[7] = v18;
      v17[5] = v18;
      ++v6;
      uint64_t v4 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
  }
}

void sub_1DD4F1AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BDB34((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4F1AEC(uint64_t a1, uint64_t *a2, signed int a3, int a4)
{
  sub_1DD4C58C4(a2, a3, a4, (void *)a1);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 40) = 0;
  sub_1DD4F1CA0(a2 + 6, a3, a4, (void *)(a1 + 48));
  sub_1DD4C5938(a2 + 9, a3, a4, (void *)(a1 + 72));
  uint64_t v8 = (uint64_t *)a2[3];
  if (v8 != a2 + 4)
  {
    do
    {
      unsigned int v9 = sub_1DD4C52F0(*((_DWORD *)v8 + 8), a3, a4);
      if ((v9 & 0x80000000) == 0)
      {
        float v15 = &v16;
        unint64_t v16 = v9;
        float v10 = sub_1DD4BD454((uint64_t **)(a1 + 24), &v16, (uint64_t)&unk_1DD512594, (uint64_t **)&v15);
        if (v8 != v10) {
          sub_1DD4C82D4((char *)v10 + 40, (char *)v8[5], v8[6], (v8[6] - v8[5]) >> 3);
        }
      }
      float v11 = (uint64_t *)v8[1];
      if (v11)
      {
        do
        {
          float v12 = v11;
          float v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          float v12 = (uint64_t *)v8[2];
          BOOL v13 = *v12 == (void)v8;
          uint64_t v8 = v12;
        }
        while (!v13);
      }
      uint64_t v8 = v12;
    }
    while (v12 != a2 + 4);
  }
  return a1;
}

void sub_1DD4F1C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  unint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 56) = v16;
    operator delete(v16);
  }
  sub_1DD4BDF88(v13, *(void **)(v12 + 32));
  a12 = (void **)v12;
  sub_1DD4BDB34(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DD4F1CA0@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result == v5
    || (a2 & 0x80000000) != 0
    || (unint64_t v6 = (unint64_t)(v5 - v4) >> 4, (int)v6 <= (int)a2)
    || a3 <= -2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (a3 == -1) {
      int v7 = v6 - a2;
    }
    else {
      int v7 = a3;
    }
    if ((int)(v7 + a2) <= (int)v6) {
      int v8 = v7;
    }
    else {
      int v8 = v6 - a2;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_1DD4F5210(a4, (const void *)(v4 + 16 * a2), v4 + 16 * a2 + 16 * v8, v8);
  }
  return result;
}

char *sub_1DD4F1D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DD4C8F7C((uint64_t *)a1, *(__n128 **)(a1 + 8), *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  BOOL result = sub_1DD4C95FC(a1 + 72, *(void *)(a1 + 80), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5);
  int v7 = *(char **)(a2 + 24);
  if (v7 != (char *)(a2 + 32))
  {
    int v8 = (uint64_t **)(a1 + 24);
    do
    {
      unint64_t v12 = *((void *)v7 + 4) + a3;
      uint64_t v13 = &v12;
      BOOL result = (char *)sub_1DD4BD454(v8, &v12, (uint64_t)&unk_1DD512594, (uint64_t **)&v13);
      if (v7 != result) {
        BOOL result = sub_1DD4C82D4(result + 40, *((char **)v7 + 5), *((void *)v7 + 6), (uint64_t)(*((void *)v7 + 6) - *((void *)v7 + 5)) >> 3);
      }
      unsigned int v9 = (char *)*((void *)v7 + 1);
      if (v9)
      {
        do
        {
          float v10 = v9;
          unsigned int v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          float v10 = (char *)*((void *)v7 + 2);
          BOOL v11 = *(void *)v10 == (void)v7;
          int v7 = v10;
        }
        while (!v11);
      }
      int v7 = v10;
    }
    while (v10 != (char *)(a2 + 32));
  }
  return result;
}

void *sub_1DD4F1E1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>, float a10@<S0>, _DWORD *a11)
{
  int v16 = a2;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v18 = HIDWORD(a2);
  if (a10 == -1.0) {
    float v19 = 0.1;
  }
  else {
    float v19 = a10;
  }
  float v20 = *(float *)(a1 + 36);
  if (v20 == -1.0)
  {
    float v22 = v19;
  }
  else
  {
    float v21 = (float)(int)a2 / (float)SHIDWORD(a2);
    float v22 = fmaxf(v19, (float)((float)(v20 / v21) * (float)(v19 + -1.0)) + 1.0);
    float v19 = fmaxf(v19, (float)((float)(v21 / v20) * (float)(v19 + -1.0)) + 1.0);
  }
  if ((double)(int)a2 < (double)SHIDWORD(a2)) {
    double v23 = (double)SHIDWORD(a2);
  }
  else {
    double v23 = (double)(int)a2;
  }
  v24.n128_f64[0] = sub_1DD4C4EF0((uint64_t)v28, a6, 1, (double)(int)a2 / v23, (double)SHIDWORD(a2) / v23, v22, v19);
  if (a7) {
    char v29 = 0;
  }
  if (a8) {
    char v30 = 0;
  }
  sub_1DD4C4FAC(v31, v24);
  if (a3)
  {
    sub_1DD4F48DC(v31, a3);
    sub_1DD4F4950(v32, a3 + 32);
  }
  if (a4 >= 1)
  {
    char v33 = 1;
    LODWORD(v25) = a4 >> 1;
    if (a5 <= 0) {
      uint64_t v25 = v25;
    }
    else {
      uint64_t v25 = a5;
    }
    uint64_t v34 = a4;
    uint64_t v35 = v25;
  }
  sub_1DD4C5EA0(v28, a11, a9);
  uint64_t v26 = *a9;
  *(_DWORD *)(v26 + 264) = v16;
  *(_DWORD *)(v26 + 268) = v18;
  sub_1DD4BE1DC(v32);
  return sub_1DD4BE260(v31);
}

void sub_1DD4F1FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1DD4F1FE8(uint64_t a1, _DWORD *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, int *a8)
{
  v88[4] = *MEMORY[0x1E4F143B8];
  int v13 = *a2;
  long long v64 = 0uLL;
  uint64_t v65 = 0;
  if (*a6 != a6[1])
  {
    sub_1DD4F196C(a6, __p);
    sub_1DD4C8598((uint64_t *)&v64);
    long long v64 = *(_OWORD *)__p;
    uint64_t v65 = v72;
    __p[1] = 0;
    uint64_t v72 = 0;
    __p[0] = 0;
    *(void *)&long long v85 = __p;
    sub_1DD4BDB34((void ***)&v85);
  }
  unint64_t v14 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a3[1] - *a3) >> 4);
  unint64_t v58 = (int)v14;
  if (v13 == 1) {
    unint64_t v15 = 4;
  }
  else {
    unint64_t v15 = 9;
  }
  if (v13 == 1)
  {
    if (sub_1DD4B7FE4((void *)a4)) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
    }
    else {
      unint64_t v16 = 0;
    }
    if (v16 < (int)v14)
    {
      *a8 = 3;
      goto LABEL_87;
    }
    if (sub_1DD4B7FE4((void *)a4)) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
    }
    else {
      LODWORD(v17) = 0;
    }
    int v56 = v17 - v14;
  }
  else
  {
    int v56 = 0;
  }
  *(void *)&long long v85 = 0;
  sub_1DD4C7A14(__p, v15, &v85);
  sub_1DD4C7C90(v63, (int)v14, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v53 = a6;
  long long v57 = a8;
  int v59 = v14;
  if (v13 == 1)
  {
    if ((int)v14 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v56;
      do
      {
        uint64_t v20 = *(void *)(v63[0] + v18);
        double v21 = sub_1DD4C15B0(*(double *)(a4 + 120), *(double *)(a4 + 128));
        sub_1DD4C15BC(v20, (void *)(a4 + 24), (void *)(a4 + 72), v19++, v21);
        v18 += 24;
      }
      while (24 * v59 != v18);
    }
  }
  else if ((int)v14 >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      sub_1DD4EEF0C((uint64_t)__p, (double *)(*a3 + 304 * v22), a5, SHIDWORD(a5), 1);
      sub_1DD4D1268((uint64_t)__p, (uint64_t)__p);
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(v63[0] + 24 * v22);
      do
      {
        *(void *)(v24 + v23 * 8) = __p[v23];
        ++v23;
      }
      while (v23 != 9);
      ++v22;
    }
    while (v22 != v59);
  }
  sub_1DD4C8238(v62, 0x86BCA1AF286BCA1BLL * ((uint64_t)(a3[1] - *a3) >> 4));
  if (v59 >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 112;
    do
    {
      uint64_t v27 = *a3 + v26;
      CMTime v28 = (char *)v62[0] + v25;
      long long v29 = *(_OWORD *)v27;
      *((void *)v28 + 2) = *(void *)(v27 + 16);
      *(_OWORD *)CMTime v28 = v29;
      v25 += 24;
      v26 += 304;
    }
    while (24 * v59 != v25);
  }
  sub_1DD4C52EC((int)__p);
  if (v59 >= 1)
  {
    for (uint64_t i = 0; i != v59; ++i)
    {
      if (v13 == 1)
      {
        if (((*(void *)(*(void *)(a4 + 96) + (((unint64_t)(i + v56) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (i + v56)) & 1) == 0) {
          goto LABEL_38;
        }
      }
      else if (!*(unsigned char *)(*a3 + 304 * i + 72))
      {
LABEL_38:
        long long v31 = v74;
        if (v74 >= v75)
        {
          char v33 = (char *)v73;
          uint64_t v34 = (v74 - (unsigned char *)v73) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            sub_1DD4BACA0();
          }
          uint64_t v36 = v75 - (unsigned char *)v73;
          if ((v75 - (unsigned char *)v73) >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            uint64_t v38 = (char *)sub_1DD4BB6B8((uint64_t)&v75, v37);
            char v33 = (char *)v73;
            long long v31 = v74;
          }
          else
          {
            uint64_t v38 = 0;
          }
          unint64_t v39 = &v38[4 * v34];
          *(_DWORD *)unint64_t v39 = i;
          long long v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          uint64_t v73 = v39;
          uint64_t v74 = v32;
          uint64_t v75 = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v74 = i;
          long long v32 = v31 + 4;
        }
        uint64_t v74 = v32;
      }
    }
  }
  if (v53[6] != v53[7]) {
    sub_1DD4F0A18(v78, v53 + 6, a5, a4);
  }
  uint64_t v41 = (const void *)v53[9];
  uint64_t v42 = v53[10];
  uint64_t v43 = v57;
  if (v41 != (const void *)v42)
  {
    long long v85 = 0uLL;
    uint64_t v86 = 0;
    sub_1DD4BE0E4(&v85, v41, v42, (v42 - (uint64_t)v41) >> 5);
    sub_1DD4F0FF0((uint64_t *)&v85, a5, 1);
    if (v79[0])
    {
      v79[1] = v79[0];
      operator delete(v79[0]);
    }
    *(_OWORD *)int v79 = v85;
    uint64_t v80 = v86;
  }
  if ((void)v64 != *((void *)&v64 + 1))
  {
    sub_1DD4C8598((uint64_t *)&v76);
    long long v76 = v64;
    uint64_t v77 = v65;
    uint64_t v65 = 0;
    long long v64 = 0uLL;
  }
  if (v13 != 1)
  {
    if (v53[5])
    {
      double v49 = sub_1DD4BDBE0((uint64_t *)&v85, (uint64_t)(v53 + 3));
      sub_1DD4F0810(v49, a5, 1, 1);
      sub_1DD4BDF88((uint64_t)&v83, *((void **)&v83 + 1));
      double v50 = (void *)*((void *)&v85 + 1);
      long long v83 = v85;
      uint64_t v84 = v86;
      if (v86)
      {
        *(void *)(*((void *)&v85 + 1) + 16) = (char *)&v83 + 8;
        *(void *)&long long v85 = (char *)&v85 + 8;
        *((void *)&v85 + 1) = 0;
        uint64_t v86 = 0;
        double v50 = 0;
      }
      else
      {
        *(void *)&long long v83 = (char *)&v83 + 8;
      }
      sub_1DD4BDF88((uint64_t)&v85, v50);
    }
    goto LABEL_81;
  }
  sub_1DD4BD398(&v85, v58);
  if (v59 <= 0)
  {
    double v48 = (const void *)v85;
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = 72 * v56;
    do
    {
      double v46 = *(double *)(*(void *)(a4 + 72) + v45);
      double v47 = sub_1DD4C15B0(*(double *)(a4 + 120), *(double *)(a4 + 128));
      double v48 = (const void *)v85;
      *(double *)(v85 + v44) = v46 / v47;
      v45 += 72;
      v44 += 8;
    }
    while (8 * v59 != v44);
    uint64_t v43 = v57;
  }
  long long v60 = 0uLL;
  uint64_t v61 = 0;
  sub_1DD4BDA30(&v60, v48, *((uint64_t *)&v85 + 1), (uint64_t)(*((void *)&v85 + 1) - (void)v48) >> 3);
  if ((void)v81)
  {
    *((void *)&v81 + 1) = v81;
    operator delete((void *)v81);
  }
  long long v81 = v60;
  uint64_t v82 = v61;
  uint64_t v61 = 0;
  long long v60 = 0uLL;
  if ((void)v85)
  {
    *((void *)&v85 + 1) = v85;
    operator delete((void *)v85);
  }
  if (!v53[5])
  {
LABEL_81:
    void v70[3] = 0;
    if (*(void *)(a7 + 24))
    {
      long long v67 = a2;
      sub_1DD4C04E4((uint64_t)v68, a7);
      uint64_t v69 = a4;
      *(void *)&long long v85 = v67;
      sub_1DD4F528C((uint64_t)&v85 + 8, (uint64_t)v68);
      uint64_t v87 = v69;
      double v51 = operator new(0x38uLL);
      uint64_t v52 = v85;
      *double v51 = &unk_1F38B0778;
      v51[1] = v52;
      sub_1DD4F528C((uint64_t)(v51 + 2), (uint64_t)&v85 + 8);
      v51[6] = v87;
      v88[3] = v51;
      sub_1DD4F5648(v88, v70);
      sub_1DD4C9D00(v88);
      sub_1DD4BF1E8((void *)&v85 + 1);
      sub_1DD4BF1E8(v68);
    }
    sub_1DD4C9C68((uint64_t)v66, (uint64_t)v70);
    sub_1DD4C6018((uint64_t)a2, v63, (uint64_t)__p, (uint64_t)v66, v43);
    sub_1DD4C9D00(v66);
    sub_1DD4C9D00(v70);
    goto LABEL_84;
  }
  puts("Path constraints not supported for L1 logRotScale model.");
  *uint64_t v43 = 3;
LABEL_84:
  sub_1DD4C042C((uint64_t)__p);
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  __p[0] = v63;
  sub_1DD4BDB34((void ***)__p);
LABEL_87:
  __p[0] = &v64;
  sub_1DD4BDB34((void ***)__p);
}

void sub_1DD4F2790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char *a47,uint64_t a48)
{
  sub_1DD4BDF88(v48 - 192, *(void **)(v48 - 184));
  sub_1DD4C042C((uint64_t)&a47);
  if (__p) {
    operator delete(__p);
  }
  a47 = &a26;
  sub_1DD4BDB34((void ***)&a47);
  a47 = &a29;
  sub_1DD4BDB34((void ***)&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4F2894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    operator new();
  }
  puts("Passed NULL l1StabResults to createSmoothingHomographiesWithL1()");
  return 0;
}

void sub_1DD4F2A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1E01B7750](v11, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_1DD4F2A4C(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v99 = a1;
  if (!a1)
  {
    puts("Passed NULL l1StabResults to getSmoothingHomographiesFromL1Results()");
LABEL_12:
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    return;
  }
  unint64_t v10 = (a3 - a6);
  if ((int)v10 < 1) {
    goto LABEL_12;
  }
  BOOL v14 = sub_1DD4B7FE4(a2);
  uint64_t v15 = v14 ? 4 : 9;
  BOOL v98 = v14;
  if (v14)
  {
    unint64_t v16 = sub_1DD4B7FE4(a2) ? 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3) : 0;
    if (v16 < v10) {
      goto LABEL_12;
    }
  }
  uint64_t v95 = a2;
  uint64_t v96 = a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  sub_1DD4F49C4((void **)a7, v10);
  uint64_t v97 = a3;
  if ((int)a3 > a6)
  {
    double v18 = (double)a4;
    double v19 = (double)a5;
    if ((double)a4 < (double)a5) {
      double v20 = (double)a5;
    }
    else {
      double v20 = (double)a4;
    }
    double v21 = -v18 / (v20 + v20);
    double v22 = -v19 / (v20 + v20);
    uint64_t v94 = v114;
    double v23 = v18 * 0.5;
    double v24 = v19 * 0.5;
    uint64_t v92 = a7 + 16;
    long long v93 = v112;
    uint64_t v25 = a6;
    uint64_t v26 = 8 * (int)v15 * (uint64_t)a6;
    uint64_t v101 = 8 * v15;
    uint64_t v27 = 72 * a6;
    do
    {
      long long v29 = *(_OWORD **)(a7 + 8);
      unint64_t v28 = *(void *)(a7 + 16);
      if ((unint64_t)v29 >= v28)
      {
        unint64_t v17 = *(_OWORD **)a7;
        unint64_t v31 = 0x8E38E38E38E38E39 * (((uint64_t)v29 - *(void *)a7) >> 3);
        unint64_t v32 = v31 + 1;
        if (v31 + 1 > 0x38E38E38E38E38ELL) {
          sub_1DD4BACA0();
        }
        unint64_t v33 = 0x8E38E38E38E38E39 * ((uint64_t)(v28 - (void)v17) >> 3);
        if (2 * v33 > v32) {
          unint64_t v32 = 2 * v33;
        }
        if (v33 >= 0x1C71C71C71C71C7) {
          unint64_t v34 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          unint64_t v35 = (char *)sub_1DD4BEA14(v92, v34);
          unint64_t v17 = *(_OWORD **)a7;
          long long v29 = *(_OWORD **)(a7 + 8);
        }
        else
        {
          unint64_t v35 = 0;
        }
        uint64_t v36 = &v35[72 * v31];
        *((void *)v36 + 8) = 0;
        *((_OWORD *)v36 + 2) = 0u;
        *((_OWORD *)v36 + 3) = 0u;
        *(_OWORD *)uint64_t v36 = 0u;
        *((_OWORD *)v36 + 1) = 0u;
        if (v29 == v17)
        {
          uint64_t v41 = &v35[72 * v31];
        }
        else
        {
          unint64_t v37 = &v35[72 * v31];
          do
          {
            *(_OWORD *)(v37 - 72) = *(_OWORD *)((char *)v29 - 72);
            long long v38 = *(_OWORD *)((char *)v29 - 56);
            long long v39 = *(_OWORD *)((char *)v29 - 40);
            long long v40 = *(_OWORD *)((char *)v29 - 24);
            uint64_t v41 = v37 - 72;
            *((void *)v37 - 1) = *((void *)v29 - 1);
            *(_OWORD *)(v37 - 24) = v40;
            *(_OWORD *)(v37 - 40) = v39;
            *(_OWORD *)(v37 - 56) = v38;
            long long v29 = (_OWORD *)((char *)v29 - 72);
            v37 -= 72;
          }
          while (v29 != v17);
        }
        char v30 = v36 + 72;
        *(void *)a7 = v41;
        *(void *)(a7 + 8) = v36 + 72;
        *(void *)(a7 + 16) = &v35[72 * v34];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *((void *)v29 + 8) = 0;
        void v29[2] = 0u;
        v29[3] = 0u;
        char v30 = (char *)v29 + 72;
        *long long v29 = 0u;
        v29[1] = 0u;
      }
      long long v100 = &v91;
      *(void *)(a7 + 8) = v30;
      MEMORY[0x1F4188790](v17);
      uint64_t v43 = (double *)((char *)&v91 - v42);
      uint64_t v44 = 0;
      uint64_t v45 = *(void *)(v99 + 8);
      do
      {
        v43[v44] = *(double *)(v45 + v26 + 8 * v44);
        ++v44;
      }
      while (v15 != v44);
      if (v98)
      {
        uint64_t v46 = *((void *)v95 + 9);
        double v47 = sub_1DD4C15B0(v95[15], v95[16]);
        sub_1DD4C167C((uint64_t)&v115, v43, (double *)(v46 + 72 * v25), v47);
        double v48 = *(double *)&v117 * v119 - *((double *)&v118 + 1) * *((double *)&v117 + 1);
        *((double *)v30 - 9) = v48;
        double v49 = *((double *)&v118 + 1) * *(double *)&v116 - *((double *)&v115 + 1) * v119;
        *((double *)v30 - 8) = v49;
        double v50 = *((double *)&v115 + 1) * *((double *)&v117 + 1) - *(double *)&v117 * *(double *)&v116;
        *((double *)v30 - 7) = v50;
        double v51 = v49 * *((double *)&v116 + 1) + *(double *)&v115 * v48 + *(double *)&v118 * v50;
        if (v51 >= 2.22044605e-16 || v51 <= -2.22044605e-16)
        {
          *((double *)v30 - 9) = v48 / v51;
          *((double *)v30 - 8) = v49 / v51;
          *((double *)v30 - 7) = v50 / v51;
          *((double *)v30 - 6) = (*(double *)&v118 * *((double *)&v117 + 1) - *((double *)&v116 + 1) * v119) / v51;
          *((double *)v30 - 3) = (*((double *)&v116 + 1) * *((double *)&v118 + 1) - *(double *)&v118 * *(double *)&v117)
                               / v51;
          *((double *)v30 - 5) = (*(double *)&v115 * v119 - *(double *)&v118 * *(double *)&v116) / v51;
          *((double *)v30 - 4) = (*((double *)&v116 + 1) * *(double *)&v116 - *(double *)&v115 * *((double *)&v117 + 1))
                               / v51;
          *((double *)v30 - 2) = (*(double *)&v118 * *((double *)&v115 + 1) - *(double *)&v115 * *((double *)&v118 + 1))
                               / v51;
          double v88 = (*(double *)&v115 * *(double *)&v117 - *((double *)&v116 + 1) * *((double *)&v115 + 1)) / v51;
          *((double *)v30 - 1) = v88;
        }
        else
        {
          double v88 = *((double *)v30 - 1);
        }
        a7 = v96;
        float64x2_t v89 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88, 0);
        for (uint64_t i = -72; i != -8; i += 16)
          *(float64x2_t *)&v30[i] = vdivq_f64(*(float64x2_t *)&v30[i], v89);
        *((void *)v30 - 1) = 0x3FF0000000000000;
      }
      else
      {
        uint64_t v53 = 0;
        unint64_t v54 = v30 - 72;
        uint64_t v55 = v45 + v27;
        do
        {
          *(void *)((char *)&v106 + v53) = *(void *)(v55 + v53);
          v53 += 8;
        }
        while (v53 != 72);
        sub_1DD4D1308((uint64_t)v102, &v106);
        double v110 = v105;
        long long v108 = v103;
        long long v109 = v104;
        long long v106 = v102[0];
        long long v107 = v102[1];
        double v56 = *(double *)&v103 * v105 - *((double *)&v104 + 1) * *((double *)&v103 + 1);
        *((double *)v30 - 9) = v56;
        double v57 = *((double *)&v109 + 1) * *(double *)&v107 - *((double *)&v106 + 1) * v110;
        *((double *)v30 - 8) = v57;
        double v58 = *((double *)&v106 + 1) * *((double *)&v108 + 1) - *(double *)&v108 * *(double *)&v107;
        *((double *)v30 - 7) = v58;
        double v59 = v57 * *((double *)&v107 + 1) + *(double *)&v106 * v56 + *(double *)&v109 * v58;
        if (v59 >= 2.22044605e-16 || v59 <= -2.22044605e-16)
        {
          *((double *)v30 - 9) = v56 / v59;
          *((double *)v30 - 8) = v57 / v59;
          *((double *)v30 - 7) = v58 / v59;
          *((double *)v30 - 6) = (*(double *)&v109 * *((double *)&v108 + 1) - *((double *)&v107 + 1) * v110) / v59;
          *((double *)v30 - 3) = (*((double *)&v107 + 1) * *((double *)&v109 + 1) - *(double *)&v109 * *(double *)&v108)
                               / v59;
          *((double *)v30 - 5) = (*(double *)&v106 * v110 - *(double *)&v109 * *(double *)&v107) / v59;
          *((double *)v30 - 4) = (*((double *)&v107 + 1) * *(double *)&v107 - *(double *)&v106 * *((double *)&v108 + 1))
                               / v59;
          *((double *)v30 - 2) = (*(double *)&v109 * *((double *)&v106 + 1) - *(double *)&v106 * *((double *)&v109 + 1))
                               / v59;
          *((double *)v30 - 1) = (*(double *)&v106 * *(double *)&v108 - *((double *)&v107 + 1) * *((double *)&v106 + 1))
                               / v59;
        }
        uint64_t v61 = 0;
        v113[0] = 1.0 / v20;
        v113[1] = 0.0;
        v113[2] = v21;
        v113[3] = 0.0;
        v113[4] = 1.0 / v20;
        v113[5] = v22;
        uint64_t v62 = v94;
        *uint64_t v94 = 0;
        v62[1] = 0;
        v114[2] = 0x3FF0000000000000;
        *(double *)unint64_t v111 = v20;
        v111[1] = 0;
        *(double *)&v111[2] = v23;
        v111[3] = 0;
        *(double *)&v111[4] = v20;
        *(double *)&v111[5] = v24;
        long long v63 = v93;
        *long long v93 = 0;
        v63[1] = 0;
        long long v64 = (double *)v111;
        v112[2] = 0x3FF0000000000000;
        do
        {
          uint64_t v65 = 0;
          long long v66 = v30;
          do
          {
            double v67 = 0.0;
            uint64_t v68 = -72;
            uint64_t v69 = v64;
            do
            {
              double v70 = *v69++;
              double v67 = v67 + v70 * *(double *)&v66[v68];
              v68 += 24;
            }
            while (v68);
            *((double *)&v115 + 3 * v61 + v65++) = v67;
            v66 += 8;
          }
          while (v65 != 3);
          ++v61;
          v64 += 3;
        }
        while (v61 != 3);
        uint64_t v71 = 0;
        *(_OWORD *)unint64_t v54 = v115;
        long long v72 = v116;
        long long v73 = v117;
        long long v74 = v118;
        *((double *)v30 - 1) = v119;
        *(_OWORD *)(v30 - 40) = v73;
        *(_OWORD *)(v30 - 24) = v74;
        *(_OWORD *)(v30 - 56) = v72;
        uint64_t v75 = v30 - 72;
        do
        {
          uint64_t v76 = 0;
          uint64_t v77 = v113;
          do
          {
            uint64_t v78 = 0;
            double v79 = 0.0;
            uint64_t v80 = v77;
            do
            {
              double v81 = *v80;
              v80 += 3;
              double v79 = v79 + *(double *)&v75[v78] * v81;
              v78 += 8;
            }
            while (v78 != 24);
            *((double *)&v115 + 3 * v71 + v76++) = v79;
            ++v77;
          }
          while (v76 != 3);
          ++v71;
          v75 += 24;
        }
        while (v71 != 3);
        *(_OWORD *)unint64_t v54 = v115;
        long long v82 = v116;
        long long v83 = v117;
        long long v84 = v118;
        *((double *)v30 - 1) = v119;
        *(_OWORD *)(v30 - 40) = v83;
        *(_OWORD *)(v30 - 24) = v84;
        *(_OWORD *)(v30 - 56) = v82;
        long long v85 = (const double *)(v30 - 8);
        float64x2_t v86 = vld1q_dup_f64(v85);
        for (uint64_t j = -72; j != -8; j += 16)
          *(float64x2_t *)&v30[j] = vdivq_f64(*(float64x2_t *)&v30[j], v86);
        *((void *)v30 - 1) = 0x3FF0000000000000;
      }
      ++v25;
      v26 += v101;
      v27 += 72;
    }
    while (v25 != v97);
  }
}

void sub_1DD4F325C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = **(void ***)(v1 + 40);
  if (v3)
  {
    *(void *)(*(void *)(v1 + 40) + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4F3290(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int **a5)
{
  uint64_t v9 = (a2[1] - *a2) >> 4;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v10 = 0x86BCA1AF286BCA1BLL * v9;
  uint64_t v17 = 0;
  memset(__p, 0, sizeof(__p));
  sub_1DD4DF5E8(&v15, 0x86BCA1AF286BCA1BLL * v9);
  sub_1DD4DF5E8(__p, v10);
  sub_1DD4EDF14(v11, a2, a3, &v15, 0);
  uint64_t v12 = *a1;
  if (v12 > 1)
  {
    if (a5)
    {
      sub_1DD4EE9F0((uint64_t *)&v15, __p, 0, a5);
    }
    else
    {
      v18[0] = v12 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
      v18[1] = -1;
      sub_1DD4EE9F0((uint64_t *)&v15, __p, (int *)v18, 0);
    }
  }
  else
  {
    int v13 = sub_1DD4F58B4((char *)__p, (char *)v15, v16, (v16 - (uint64_t)v15) >> 5);
  }
  sub_1DD4EE2A4((uint64_t)v13, (uint64_t)a2, a3, (uint64_t *)&v15, (uint64_t *)__p);
}

void sub_1DD4F33D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DD4F340C(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, char a7, uint64_t a8)
{
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  if (a2[1] != *a2 && a5 <= a6)
  {
    unint64_t v10 = a5;
    uint64_t v12 = 0;
    do
    {
      if (0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 4) <= v10) {
        sub_1DD4BAA78();
      }
      uint64_t v13 = *a2 + 304 * v10;
      if (v12 >= v36)
      {
        uint64_t v14 = v12 - v34;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1DD4BACA0();
        }
        unint64_t v15 = ((char *)v36 - (char *)v34) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if ((unint64_t)((char *)v36 - (char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          uint64_t v17 = (char *)sub_1DD4BAF80((uint64_t)&v36, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        double v18 = (uint64_t *)&v17[8 * v14];
        *double v18 = v13;
        uint64_t v12 = v18 + 1;
        double v20 = (char *)v34;
        double v19 = (char *)v35;
        if (v35 != v34)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *--double v18 = v21;
          }
          while (v19 != v20);
          double v19 = (char *)v34;
        }
        unint64_t v34 = v18;
        unint64_t v35 = v12;
        uint64_t v36 = (uint64_t *)&v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *v12++ = v13;
      }
      unint64_t v35 = v12;
      ++v10;
    }
    while (v10 <= a6);
  }
  sub_1DD4DADA4((uint64_t)v29, a3, (uint64_t)&v34);
  if (*(float *)(a1 + 36) != -1.0) {
    int v33 = *(_DWORD *)(a1 + 36);
  }
  char v31 = *(unsigned char *)(a1 + 32);
  char v32 = a7;
  if ((a8 & 0x8000000080000000) == 0) {
    uint64_t v30 = a8;
  }
  sub_1DD4DABFC((uint64_t)v29);
  BOOL v22 = sub_1DD4DACE4(v29, a4);
  sub_1DD4DAE28((uint64_t)v29);
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  return v22;
}

void sub_1DD4F3604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unint64_t v16 = *(void **)(v14 - 112);
  if (v16)
  {
    *(void *)(v14 - 104) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DD4F3638(double *a1, double *a2, double *a3, double *a4)
{
  double v5 = *a3;
  double v6 = a3[1];
  double v7 = *a4;
  double v8 = a4[1];
  float v9 = sub_1DD4F36BC(*a1, a1[1], *a3, v6, *a4, v8);
  float v10 = sub_1DD4F36BC(*a2, a2[1], v5, v6, v7, v8);
  if (v10 >= v9) {
    return v9;
  }
  return v10;
}

double sub_1DD4F36BC(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6 = a5 - a3;
  double v7 = a6 - a4;
  double v8 = v7 * v7 + v6 * v6;
  if (v8 == 0.0 || (double v9 = ((a2 - a4) * v7 + (a1 - a3) * v6) / v8, v9 < 0.0))
  {
    a5 = a3;
    a6 = a4;
  }
  else if (v9 <= 1.0)
  {
    a5 = a3 + v9 * v6;
    a6 = a4 + v9 * v7;
  }
  return sqrt((a2 - a6) * (a2 - a6) + (a1 - a5) * (a1 - a5));
}

void sub_1DD4F3728(float *a1, float *a2, float *a3, unint64_t a4, double *a5, double a6, double a7, double a8, double a9)
{
  int v10 = a4;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  double v15 = a5[7];
  double v14 = a5[8];
  double v16 = a5[4];
  double v17 = a5[5];
  double v18 = a5[6];
  double v19 = v16 * v14 - v15 * v17;
  double v20 = *a5;
  double v21 = a5[1];
  double v23 = a5[2];
  double v22 = a5[3];
  double v24 = v15 * v23 - v21 * v14;
  double v25 = v21 * v17 - v16 * v23;
  double v26 = v24 * v22 + *a5 * v19 + v18 * v25;
  double v27 = -2.22044605e-16;
  if (v26 >= 2.22044605e-16 || v26 <= -2.22044605e-16)
  {
    double v19 = v19 / v26;
    double v24 = v24 / v26;
    double v25 = v25 / v26;
    double v9 = (v18 * v17 - v22 * v14) / v26;
    double v27 = (v22 * v15 - v18 * v16) / v26;
    double v14 = (v20 * v14 - v18 * v23) / v26;
    double v17 = (v22 * v23 - v20 * v17) / v26;
    double v15 = (v18 * v21 - v20 * v15) / v26;
    double v16 = (v20 * v16 - v22 * v21) / v26;
  }
  uint64_t v29 = 0;
  *(double *)long long v63 = a6;
  *(double *)&v63[1] = a7;
  v63[2] = 0x3FF0000000000000;
  double v64 = a6 + a8 + -1.0;
  double v65 = a7;
  uint64_t v66 = 0x3FF0000000000000;
  double v67 = v64;
  double v68 = a7 + a9 + -1.0;
  uint64_t v69 = 0x3FF0000000000000;
  double v70 = a6;
  double v71 = v68;
  float64x2_t v30 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v19, 0);
  float64x2_t v31 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v25, 0);
  float64x2_t v32 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0);
  float64x2_t v33 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v17, 0);
  float64x2_t v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v27, 0);
  uint64_t v72 = 0x3FF0000000000000;
  float64x2_t v35 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
  __asm { FMOV            V19.2D, #1.0 }
  do
  {
    uint64_t v41 = (const double *)&v63[v29];
    float64x2x3_t v74 = vld3q_f64(v41);
    float64x2_t v42 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v74.val[1], v15), v74.val[0], v34), v74.val[2], v35);
    float64x2_t v43 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v74.val[1], v24), v74.val[0], v30), v74.val[2], v31), v42);
    float64x2_t v44 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v74.val[1], v14), v74.val[0], v32), v74.val[2], v33), v42);
    uint64_t v45 = &v59[v29];
    vst3q_f64(v45, *(float64x2x3_t *)(&_Q19 - 2));
    v29 += 6;
  }
  while (v29 != 12);
  unint64_t v46 = HIDWORD(a4);
  double v47 = sub_1DD4F3638(v59, v60, v61, v62) + 1.0;
  float v48 = sub_1DD4F3638(v59, v62, v60, v61) + 1.0;
  float v49 = v47 / (double)(int)v46;
  *a3 = v49;
  *a2 = v48 / (float)v10;
  float v50 = v59[0];
  float v51 = v59[1];
  float v52 = v60[0];
  float v53 = v60[1];
  float v54 = v61[0];
  float v55 = v61[1];
  float v56 = v62[0];
  float v57 = v62[1];
  float v58 = (float)((float)((float)((float)((float)((float)(v52 - v50) * (float)(v55 - v53))
                                      - (float)((float)(v54 - v52) * (float)(v53 - v51)))
                              + (float)((float)(v56 - v54) * (float)(v51 - v57)))
                      - (float)((float)(v50 - v56) * (float)(v57 - v55)))
              * 0.5)
      / (double)((int)v46 * v10);
  *a1 = sqrtf(v58);
}

void sub_1DD4F39F0(float *a1, float *a2, float *a3, unint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  *a1 = 1.0;
  *a2 = 1.0;
  *a3 = 1.0;
  double v9 = *(double **)a5;
  uint64_t v10 = *(void *)(a5 + 8) - *(void *)a5;
  if (v10)
  {
    uint64_t v22 = 0;
    float v21 = 0.0;
    unint64_t v19 = v10 / 304;
    if (v19 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v19;
    }
    do
    {
      sub_1DD4F3728((float *)&v22 + 1, (float *)&v22, &v21, a4, v9, a6, a7, a8, a9);
      if (*((float *)&v22 + 1) < *a1) {
        *a1 = *((float *)&v22 + 1);
      }
      if (*(float *)&v22 < *a2) {
        *(_DWORD *)a2 = v22;
      }
      if (v21 < *a3) {
        *a3 = v21;
      }
      v9 += 38;
      --v20;
    }
    while (v20);
  }
}

void sub_1DD4F3B0C(unsigned int *a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1DD4F3BA4()
{
}

void sub_1DD4F4280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  float64x2_t v33 = a31;
  a31 = 0;
  if (v33) {
    sub_1DD4BED04((uint64_t)&a31, v33);
  }
  sub_1DD4C9D00(&a27);
  (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

void sub_1DD4F4320(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1DD4F4428(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_1DD4F44B8(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1] - *a2;
  if (v8 && *(void *)(v7 + 304 * a6 + 104) <= a5)
  {
    uint64_t v10 = *(void *)(v7 + 304 * a7 + 104);
    BOOL v11 = 0x86BCA1AF286BCA1BLL * (v8 >> 4) <= a7 || v10 < a5;
    if (!v11 && sub_1DD4E7D74(a2, a3, a6, a7) != 0.0) {
      sub_1DD4F4320(a1, a2, a3, a4, a5, 0, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 4) - 1);
    }
  }
  return 0;
}

void **sub_1DD4F46EC(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        double v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        sub_1DD4BEB38(a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      double v6 = *(void **)(a2 + 8);
    }
    else
    {
      double v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

char *sub_1DD4F4780(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (0x8E38E38E38E38E39 * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (a4 > 0x38E38E38E38E38ELL) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v12 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v12 = v11;
    }
    BOOL result = sub_1DD4BE9BC(v7, v12);
    double v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    double v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  double v15 = (unsigned char *)*((void *)result + 1);
  if (0x8E38E38E38E38E39 * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v15 - v9);
    double v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

void *sub_1DD4F48DC(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  sub_1DD4C78E4((uint64_t)v4, a2);
  sub_1DD4BFCB4(v4, a1);
  sub_1DD4BE260(v4);
  return a1;
}

void *sub_1DD4F4950(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  sub_1DD4C797C((uint64_t)v4, a2);
  sub_1DD4C0128(v4, a1);
  sub_1DD4BE1DC(v4);
  return a1;
}

void sub_1DD4F49C4(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      sub_1DD4BACA0();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 72;
    double v6 = (char *)sub_1DD4BEA14(v3, a2);
    uint64_t v7 = &v6[72 * v5];
    double v9 = &v6[72 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        long long v13 = *(_OWORD *)(v10 - 56);
        long long v14 = *(_OWORD *)(v10 - 40);
        long long v15 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 72;
        v10 -= 72;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1DD4F4ADC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xD79435E50D7943) {
    sub_1DD4BACA0();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v2) >> 4);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x6BCA1AF286BCA1) {
    unint64_t v7 = 0xD79435E50D7943;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_1DD4BC400(v5, v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  unint64_t v12 = &v8[304 * v3];
  long long v14 = &v8[304 * v7];
  sub_1DD4BC7C4((uint64_t)v12, 0, 0);
  long long v13 = v12 + 304;
  sub_1DD4BC388(a1, &v11);
  uint64_t v9 = a1[1];
  sub_1DD4BC608((uint64_t)&v11);
  return v9;
}

void sub_1DD4F4BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BC608((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1DD4F4BF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  BOOL result = sub_1DD4BDA30(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1DD4F4C40(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4F4C48(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1DD4BACA0();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_1DD4BD934(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  double v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_1DD4BDA30(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_1DD4DF424(a1, v14);
  uint64_t v12 = a1[1];
  sub_1DD4C9568((uint64_t)v14);
  return v12;
}

void sub_1DD4F4D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4C9568((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1DD4F4D60(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      uint64_t v13 = v4 - v6;
      BOOL v12 = v13 == 0;
      uint64_t v14 = 0xD79435E50D79436 * (v13 >> 4);
      if (v12) {
        unint64_t v15 = 1;
      }
      else {
        unint64_t v15 = v14;
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v53 = a1[4];
      size_t v17 = (char *)sub_1DD4BC400(v53, v15);
      unint64_t v19 = &v17[304 * v16];
      unint64_t v20 = a1[1];
      unint64_t v21 = a1[2] - v20;
      if (v21)
      {
        uint64_t v22 = &v19[v21];
        double v23 = &v17[304 * v16];
        do
        {
          *(_OWORD *)double v23 = *(_OWORD *)v20;
          long long v24 = *(_OWORD *)(v20 + 16);
          long long v25 = *(_OWORD *)(v20 + 32);
          long long v26 = *(_OWORD *)(v20 + 48);
          *(_OWORD *)(v23 + 60) = *(_OWORD *)(v20 + 60);
          *((_OWORD *)v23 + 2) = v25;
          *((_OWORD *)v23 + 3) = v26;
          *((_OWORD *)v23 + 1) = v24;
          *((void *)v23 + 11) = 0;
          *((void *)v23 + 12) = 0;
          *((void *)v23 + 10) = 0;
          *((_OWORD *)v23 + 5) = *(_OWORD *)(v20 + 80);
          *((void *)v23 + 12) = *(void *)(v20 + 96);
          *(void *)(v20 + 88) = 0;
          *(void *)(v20 + 96) = 0;
          *(void *)(v20 + 80) = 0;
          long long v27 = *(_OWORD *)(v20 + 136);
          long long v28 = *(_OWORD *)(v20 + 152);
          long long v29 = *(_OWORD *)(v20 + 168);
          *(_OWORD *)(v23 + 120) = *(_OWORD *)(v20 + 120);
          *(_OWORD *)(v23 + 168) = v29;
          *(_OWORD *)(v23 + 152) = v28;
          *(_OWORD *)(v23 + 136) = v27;
          long long v30 = *(_OWORD *)(v20 + 200);
          long long v31 = *(_OWORD *)(v20 + 216);
          long long v32 = *(_OWORD *)(v20 + 232);
          *(_OWORD *)(v23 + 184) = *(_OWORD *)(v20 + 184);
          *(_OWORD *)(v23 + 232) = v32;
          *(_OWORD *)(v23 + 216) = v31;
          *(_OWORD *)(v23 + 200) = v30;
          long long v33 = *(_OWORD *)(v20 + 264);
          long long v34 = *(_OWORD *)(v20 + 280);
          uint64_t v35 = *(void *)(v20 + 293);
          *(_OWORD *)(v23 + 248) = *(_OWORD *)(v20 + 248);
          *(void *)(v23 + 293) = v35;
          *(_OWORD *)(v23 + 264) = v33;
          *(_OWORD *)(v23 + 280) = v34;
          *(_OWORD *)(v23 + 104) = *(_OWORD *)(v20 + 104);
          v23 += 304;
          v20 += 304;
        }
        while (v23 != v22);
        int64x2_t v36 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v36 = vdupq_n_s64(v20);
        uint64_t v22 = &v17[304 * v16];
      }
      uint64_t v50 = *a1;
      *a1 = v17;
      a1[1] = v19;
      int64x2_t v51 = v36;
      uint64_t v37 = a1[3];
      a1[2] = v22;
      a1[3] = &v17[304 * v18];
      uint64_t v52 = v37;
      sub_1DD4BC608((uint64_t)&v50);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - *a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -304 * v9;
      sub_1DD4F4FEC(v5, v4, v5 - 304 * v9);
      uint64_t v4 = v11;
      a1[1] += v10;
      a1[2] = v11;
    }
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  long long v38 = *(_OWORD *)(a2 + 16);
  long long v39 = *(_OWORD *)(a2 + 32);
  long long v40 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v4 + 32) = v39;
  *(_OWORD *)(v4 + 48) = v40;
  *(_OWORD *)(v4 + 16) = v38;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  sub_1DD4BB060((void *)(v4 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 6);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  long long v41 = *(_OWORD *)(a2 + 120);
  long long v42 = *(_OWORD *)(a2 + 136);
  long long v43 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 152) = v43;
  *(_OWORD *)(v4 + 136) = v42;
  *(_OWORD *)(v4 + 120) = v41;
  long long v44 = *(_OWORD *)(a2 + 184);
  long long v45 = *(_OWORD *)(a2 + 200);
  long long v46 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v4 + 216) = v46;
  *(_OWORD *)(v4 + 200) = v45;
  *(_OWORD *)(v4 + 184) = v44;
  __n128 result = *(__n128 *)(a2 + 248);
  long long v48 = *(_OWORD *)(a2 + 264);
  long long v49 = *(_OWORD *)(a2 + 280);
  *(void *)(v4 + 293) = *(void *)(a2 + 293);
  *(_OWORD *)(v4 + 264) = v48;
  *(_OWORD *)(v4 + 280) = v49;
  *(__n128 *)(v4 + 248) = result;
  a1[2] += 304;
  return result;
}

uint64_t sub_1DD4F4FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    long long v6 = *(_OWORD *)(v4 + 16);
    long long v7 = *(_OWORD *)(v4 + 32);
    long long v8 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(a3 + 60) = *(_OWORD *)(v4 + 60);
    *(_OWORD *)(a3 + 32) = v7;
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)(a3 + 16) = v6;
    sub_1DD4BD018(a3 + 80, (__n128 *)(v4 + 80));
    *(_OWORD *)(a3 + 104) = *(_OWORD *)(v4 + 104);
    long long v9 = *(_OWORD *)(v4 + 120);
    long long v10 = *(_OWORD *)(v4 + 136);
    long long v11 = *(_OWORD *)(v4 + 152);
    *(_OWORD *)(a3 + 168) = *(_OWORD *)(v4 + 168);
    *(_OWORD *)(a3 + 152) = v11;
    *(_OWORD *)(a3 + 136) = v10;
    *(_OWORD *)(a3 + 120) = v9;
    long long v12 = *(_OWORD *)(v4 + 184);
    long long v13 = *(_OWORD *)(v4 + 200);
    long long v14 = *(_OWORD *)(v4 + 216);
    *(_OWORD *)(a3 + 232) = *(_OWORD *)(v4 + 232);
    *(_OWORD *)(a3 + 216) = v14;
    *(_OWORD *)(a3 + 200) = v13;
    *(_OWORD *)(a3 + 184) = v12;
    long long v15 = *(_OWORD *)(v4 + 248);
    long long v16 = *(_OWORD *)(v4 + 264);
    long long v17 = *(_OWORD *)(v4 + 280);
    *(void *)(a3 + 293) = *(void *)(v4 + 293);
    *(_OWORD *)(a3 + 280) = v17;
    *(_OWORD *)(a3 + 264) = v16;
    *(_OWORD *)(a3 + 248) = v15;
    a3 += 304;
    v4 += 304;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_1DD4F50E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xD79435E50D7943) {
    sub_1DD4BACA0();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x6BCA1AF286BCA1) {
    unint64_t v11 = 0xD79435E50D7943;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    long long v12 = (char *)sub_1DD4BC400(v9, v11);
  }
  else {
    long long v12 = 0;
  }
  long long v15 = v12;
  long long v16 = &v12[304 * v5];
  uint64_t v17 = (uint64_t)v16;
  uint64_t v18 = &v12[304 * v11];
  sub_1DD4BC7C4((uint64_t)v16, *a2, a3);
  uint64_t v17 = (uint64_t)(v16 + 304);
  sub_1DD4BC388(a1, &v15);
  uint64_t v13 = a1[1];
  sub_1DD4BC608((uint64_t)&v15);
  return v13;
}

void sub_1DD4F51FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4BC608((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1DD4F5210(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = sub_1DD4BE068(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD4F5270(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4F528C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_1DD4F530C(void *a1)
{
  *a1 = &unk_1F38B0778;
  sub_1DD4BF1E8(a1 + 2);
  return a1;
}

void sub_1DD4F5350(void *a1)
{
  *a1 = &unk_1F38B0778;
  sub_1DD4BF1E8(a1 + 2);
  JUMPOUT(0x1E01B7750);
}

void *sub_1DD4F53B4(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1F38B0778;
  v2[1] = v3;
  sub_1DD4C04E4((uint64_t)(v2 + 2), a1 + 16);
  v2[6] = *(void *)(a1 + 48);
  return v2;
}

void sub_1DD4F5414(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4F5428(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *a2 = &unk_1F38B0778;
  a2[1] = v4;
  uint64_t result = sub_1DD4C04E4((uint64_t)(a2 + 2), a1 + 16);
  a2[6] = *(void *)(a1 + 48);
  return result;
}

void *sub_1DD4F5480(uint64_t a1)
{
  return sub_1DD4BF1E8((void *)(a1 + 16));
}

void sub_1DD4F5488(void *a1)
{
  sub_1DD4BF1E8(a1 + 2);
  operator delete(a1);
}

void sub_1DD4F54C4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  sub_1DD4F2A4C(*(void *)(*(void *)(a1 + 8) + 256), *(double **)(a1 + 48), *a3 + v4, *(_DWORD *)(*(void *)(a1 + 8) + 264), *(_DWORD *)(*(void *)(a1 + 8) + 268), v4, (uint64_t)__p);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 24 * v4;
    do
    {
      sub_1DD4F55F4(a1 + 16, (uint64_t)__p[0] + v6);
      v7 += 24;
      v6 += 72;
      --v5;
    }
    while (v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DD4F558C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4F55A8(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38B0058)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4F55E8()
{
  return &unk_1F38B0058;
}

uint64_t sub_1DD4F55F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1DD4BB904();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1DD4F5648(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DD4F58A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1DD4BAC8C(a1);
}

char *sub_1DD4F58B4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (a4 >> 59) {
      sub_1DD4BACA0();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_1DD4BE160(v7, v11);
    uint64_t v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

void *sub_1DD4F59C0(void *a1)
{
  *a1 = &unk_1F38AFBD8;
  sub_1DD4BF1E8(a1 + 2);
  return a1;
}

void sub_1DD4F5A04(void *a1)
{
  *a1 = &unk_1F38AFBD8;
  sub_1DD4BF1E8(a1 + 2);
  JUMPOUT(0x1E01B7750);
}

void *sub_1DD4F5A68(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1F38AFBD8;
  v2[1] = v3;
  sub_1DD4C04E4((uint64_t)(v2 + 2), a1 + 16);
  v2[6] = *(void *)(a1 + 48);
  return v2;
}

void sub_1DD4F5AC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD4F5ADC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *a2 = &unk_1F38AFBD8;
  a2[1] = v4;
  uint64_t result = sub_1DD4C04E4((uint64_t)(a2 + 2), a1 + 16);
  a2[6] = *(void *)(a1 + 48);
  return result;
}

void *sub_1DD4F5B34(uint64_t a1)
{
  return sub_1DD4BF1E8((void *)(a1 + 16));
}

void sub_1DD4F5B3C(void *a1)
{
  sub_1DD4BF1E8(a1 + 2);
  operator delete(a1);
}

void sub_1DD4F5B78(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  sub_1DD4F2A4C(*(void *)(*(void *)(a1 + 8) + 256), *(double **)(a1 + 48), *a3 + v4, *(_DWORD *)(*(void *)(a1 + 8) + 264), *(_DWORD *)(*(void *)(a1 + 8) + 268), v4, (uint64_t)__p);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 24 * v4;
    do
    {
      sub_1DD4F55F4(a1 + 16, (uint64_t)__p[0] + v6);
      v7 += 24;
      v6 += 72;
      --v5;
    }
    while (v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DD4F5C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4F5C5C(uint64_t a1, uint64_t a2)
{
  if (sub_1DD4BBD70(a2, (uint64_t)&unk_1F38AFA00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1DD4F5C9C()
{
  return &unk_1F38AFA00;
}

void sub_1DD4F5CA8(uint64_t a1, uint64_t a2, int a3, int a4, int a5, float a6, float a7)
{
  int v73 = a5;
  LODWORD(v71) = a3;
  uint64_t v66 = a2;
  uint64_t v72 = a1;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int v10 = (2 * a4) | 1;
  uint64_t v69 = (2 * a4);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (float *)((char *)&v65 - v12);
  MEMORY[0x1F4188790](v11);
  long long v16 = (char *)&v65 - v15;
  int v17 = -v14;
  if ((v14 & 0x80000000) == 0)
  {
    LODWORD(v18) = 0;
    float v19 = 1.0 / (float)(a4 * a4);
    int v20 = -v14;
    do
    {
      float v21 = expf(v19 * (float)-(v20 * v20));
      uint64_t v18 = (int)v18;
      int v22 = v10;
      int v23 = v17;
      do
      {
        uint64_t v24 = v18++;
        *(float *)&v16[4 * v24] = v21 * expf(v19 * (float)-(v23 * v23));
        ++v23;
        --v22;
      }
      while (v22);
      BOOL v25 = v20++ == a4;
    }
    while (!v25);
  }
  if ((int)v71 >= 1)
  {
    uint64_t v26 = 0;
    float v27 = a6 * a6;
    if (a4 >= 0) {
      int v28 = a4;
    }
    else {
      int v28 = -a4;
    }
    uint64_t v65 = v71;
    uint64_t v29 = 4 * (int)v69 + 4;
    uint64_t v30 = (uint64_t)&v13[(int)v69 + 5];
    uint64_t v70 = v30 + 4 * (-4 - (int)v69);
    uint64_t v71 = v30;
    uint64_t v31 = 4 * ((int)v69 + 2);
    uint64_t v32 = v31 + 4;
    uint64_t v69 = v30 + v31;
    do
    {
      int v33 = 0;
      long long v34 = (float *)(v66 + 8 * v26);
      float v35 = *v34;
      float v36 = v34[1];
      double v67 = v34;
      uint64_t v68 = v26;
      do
      {
        sub_1DD4F6044(v72, a4 + 1, v13, v35, v36);
        float v37 = 0.0;
        float v38 = 0.0;
        float v39 = 0.0;
        float v40 = 0.0;
        float v41 = 0.0;
        float v42 = 0.0;
        if ((a4 & 0x80000000) == 0)
        {
          uint64_t v43 = v69;
          uint64_t v44 = v70;
          long long v45 = (float *)v71;
          long long v46 = v16;
          int v47 = v17;
          do
          {
            uint64_t v48 = 0;
            float v49 = (float)v47;
            uint64_t v50 = v45;
            do
            {
              float v51 = (float)(*v50 - *(v50 - 2)) * 0.5;
              float v52 = (float)(*(float *)(v43 + 4 * v48) - *(float *)(v44 + 4 * v48)) * 0.5;
              float v53 = *(float *)&v46[4 * v48];
              float v54 = (float)(v51 * v51) * v53;
              float v55 = v53 * (float)(v51 * v52);
              float v56 = v53 * (float)(v52 * v52);
              float v38 = v38 + v54;
              float v39 = v39 + v55;
              float v40 = v40 + v56;
              float v57 = (float)(v17 + v48);
              float v41 = v41 + (float)((float)(v55 * v49) + (float)(v54 * v57));
              float v42 = v42 + (float)((float)(v56 * v49) + (float)(v55 * v57));
              ++v48;
              ++v50;
            }
            while (a4 + 1 + v28 != v48);
            v46 += v29;
            v44 += v32;
            long long v45 = (float *)((char *)v45 + v32);
            v43 += v32;
            BOOL v25 = v47++ == v28;
          }
          while (!v25);
        }
        float v58 = (float)(v38 * v40) - (float)(v39 * v39);
        float v59 = 0.0;
        float v60 = 0.0;
        if (v58 != 0.0)
        {
          float v59 = v40 * (float)(1.0 / v58);
          float v37 = (float)(1.0 / v58) * (float)-v39;
          float v60 = v38 * (float)(1.0 / v58);
        }
        float v61 = (float)(v42 * v37) + (float)(v59 * v41);
        float v62 = (float)(v42 * v60) + (float)(v37 * v41);
        float v35 = v35 + v61;
        float v36 = v36 + v62;
        ++v33;
      }
      while (v33 != v73 && (float)((float)(v62 * v62) + (float)(v61 * v61)) >= v27);
      long long v63 = v67;
      uint64_t v64 = v68;
      if (vabds_f32(v35, *v67) < a7 && vabds_f32(v36, *(float *)(v66 + 8 * v68 + 4)) < a7)
      {
        float *v67 = v35;
        v63[1] = v36;
      }
      uint64_t v26 = v64 + 1;
    }
    while (v26 != v65);
  }
}

uint64_t sub_1DD4F6044(uint64_t result, int a2, float *a3, float a4, float a5)
{
  v74[1] = *MEMORY[0x1E4F143B8];
  float v9 = truncf(a5);
  float v10 = (float)a2;
  BOOL v11 = truncf(a4) == a4 && v9 == a5;
  BOOL v13 = !v11 || v10 > a4 || v10 > a5;
  if (v13
    || (float)(v10 + a4) >= (float)*(unint64_t *)(result + 8)
    || (float)(v10 + a5) >= (float)*(unint64_t *)(result + 16))
  {
    if ((float)(a4 - v10) < 0.0
      || ((float)(a5 - v10) >= 0.0
        ? (BOOL v14 = (float)((float)(v10 + a4) + 1.0) > (float)(unint64_t)(*(void *)(result + 8) - 1))
        : (BOOL v14 = 1),
          v14 || (float)((float)(v10 + a5) + 1.0) > (float)(unint64_t)(*(void *)(result + 16) - 1)))
    {
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = *(void *)(result + 16);
        uint64_t v15 = *(void *)(result + 24);
        uint64_t v17 = *(void *)result;
        uint64_t v18 = *(void *)(result + 8);
        uint64_t v19 = *(void *)(result + 32);
        unint64_t v20 = v18 - 1;
        int v21 = v18 - 1;
        unint64_t v22 = v16 - 1;
        int v23 = v16 - 1;
        int v24 = -a2;
        do
        {
          float v25 = (float)v24 + a5;
          if (v25 < 0.0) {
            float v25 = 0.0;
          }
          int v26 = (int)v25 + 1;
          if (v22 >= (int)v25 || v22 >= v26) {
            int v28 = (int)v25;
          }
          else {
            int v28 = v23;
          }
          if (v22 >= v26) {
            int v29 = (int)v25 + 1;
          }
          else {
            int v29 = v23;
          }
          float v30 = v25 - (float)(int)v25;
          uint64_t v31 = v17 + v15 * v28;
          uint64_t v32 = v17 + v15 * v29;
          int v33 = (2 * a2) | 1;
          int v34 = -a2;
          do
          {
            float v35 = (float)v34 + a4;
            if (v35 < 0.0) {
              float v35 = 0.0;
            }
            int v36 = (int)v35 + 1;
            if (v20 >= (int)v35 || v20 >= v36) {
              int v38 = (int)v35;
            }
            else {
              int v38 = v21;
            }
            if (v20 >= v36) {
              int v39 = (int)v35 + 1;
            }
            else {
              int v39 = v21;
            }
            uint64_t v40 = v19 * v38;
            uint64_t v41 = v19 * v39;
            LOBYTE(v5) = *(unsigned char *)(v31 + v40);
            LOBYTE(v6) = *(unsigned char *)(v31 + v41);
            float v6 = (float)LODWORD(v6);
            LOBYTE(v7) = *(unsigned char *)(v32 + v40);
            float v5 = (float)LODWORD(v5);
            float v7 = (float)LODWORD(v7);
            LOBYTE(v8) = *(unsigned char *)(v32 + v41);
            *a3++ = (float)((float)((float)((float)((float)(1.0 - v30) * (float)(v35 - (float)(int)v35)) * v6)
                                  + (float)(v5
                                          * (float)((float)(1.0 - v30) * (float)(1.0 - (float)(v35 - (float)(int)v35)))))
                          + (float)(v7 * (float)(v30 * (float)(1.0 - (float)(v35 - (float)(int)v35)))))
                  + (float)((float)v8 * (float)(v30 * (float)(v35 - (float)(int)v35)));
            ++v34;
            --v33;
          }
          while (v33);
          uint64_t result = (v24 + 1);
          BOOL v11 = v24++ == a2;
        }
        while (!v11);
      }
    }
    else
    {
      uint64_t result = MEMORY[0x1F4188790]();
      float v57 = (float *)v74 - v56;
      LODWORD(v58) = (2 * v48) | 1;
      if (v51 >= 1)
      {
        float v59 = v52 - floorf(v52);
        int v60 = v51 + (int)v55;
        uint64_t v61 = *(void *)result;
        uint64_t v62 = (int)v54;
        uint64_t v63 = *(void *)(result + 24);
        int v64 = (int)v54 + 1;
        uint64_t v65 = (int)v55;
        uint64_t v66 = v57;
        do
        {
          if ((v48 & 0x80000000) == 0)
          {
            uint64_t result = v61 + v65 * v63;
            LOBYTE(v54) = *(unsigned char *)(result + v62);
            float v54 = (float)LODWORD(v54);
            int v67 = v64;
            uint64_t v68 = (2 * v48) | 1u;
            do
            {
              LOBYTE(v55) = *(unsigned char *)(result + v67);
              float v55 = (float)LODWORD(v55);
              *v66++ = (float)(v59 * v55) + (float)((float)(1.0 - v59) * v54);
              ++v67;
              float v54 = v55;
              --v68;
            }
            while (v68);
          }
          ++v65;
        }
        while (v65 < v60);
      }
      if ((v48 & 0x80000000) == 0)
      {
        uint64_t v69 = 0;
        float v70 = v53 - floorf(v53);
        if ((int)v58 <= 1) {
          uint64_t v58 = 1;
        }
        else {
          uint64_t v58 = v58;
        }
        uint64_t v71 = 4 * v50 + 4;
        do
        {
          ++v69;
          uint64_t v72 = v57;
          uint64_t v73 = v58;
          do
          {
            *v49++ = (float)(v70 * *(float *)((char *)v72 + v71)) + (float)(*v72 * (float)(1.0 - v70));
            ++v72;
            --v73;
          }
          while (v73);
          float v57 = (float *)((char *)v57 + v71);
        }
        while (v69 != v58);
      }
    }
  }
  else if ((a2 & 0x80000000) == 0)
  {
    uint64_t v42 = -a2;
    uint64_t v43 = *(void *)(result + 24);
    uint64_t v44 = *(void *)result + v43 * ((int)a5 - (uint64_t)a2) + (int)a4 - a2;
    do
    {
      int v45 = (2 * a2) | 1;
      long long v46 = (unsigned __int8 *)v44;
      do
      {
        unsigned int v47 = *v46++;
        *a3++ = (float)v47;
        --v45;
      }
      while (v45);
      ++v42;
      v44 += v43;
    }
    while (a2 + 1 != v42);
  }
  return result;
}

void sub_1DD4F6414(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F38B0370;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  uint64_t v7 = 8;
  if (a2) {
    uint64_t v7 = a2;
  }
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = xmmword_1DD512990;
  *(_DWORD *)(a1 + 168) = 4;
  sub_1DD4DF83C(a1 + 184);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 1061997773;
  *(void *)(a1 + 240) = 0;
  if (a4)
  {
    unsigned int v8 = [[MetalRANSACDispatcher alloc] initWithMaxCorrespondences:a3];
    float v9 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v8;

    if (!*(void *)(a1 + 16)) {
      NSLog(&cfstr_ErrorCreatingR.isa);
    }
  }
  sub_1DD4E357C();
}

void sub_1DD4F6540(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 104);
  if (v3)
  {
    *(void *)(v1 + 112) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 + 80);
  if (v4)
  {
    *(void *)(v1 + 88) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DD4F6594(uint64_t a1)
{
  *(void *)a1 = &unk_1F38B0370;
  sub_1DD4F662C(a1);
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    sub_1DD4E370C(v2);
    *(void *)(a1 + 200) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }
  sub_1DD4DF840((void *)(a1 + 184));
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(void *)(a1 + 112) = v4;
    operator delete(v4);
  }
  float v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(void *)(a1 + 88) = v5;
    operator delete(v5);
  }

  return a1;
}

void sub_1DD4F662C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 128);
  if (v2)
  {
    sub_1DD4E3F14(v2);
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v3 = *(void ***)(a1 + 136);
  if (v3)
  {
    sub_1DD4E3F14(v3);
    *(void *)(a1 + 136) = 0;
  }
}

BOOL sub_1DD4F666C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a4 >= 4)
  {
    sub_1DD4DF9C0(a1 + 184, 0);
    ++*(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = a4;
    *(void *)(a1 + 56) = a2;
    *(void *)(a1 + 64) = a3;
    (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
    *(void *)(a1 + 56) = a2;
    *(void *)(a1 + 64) = a3;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(a1 + 172) = _D0;
    sub_1DD4E33AC(__p, (2 * *(_DWORD *)(a1 + 236)));
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v15 = sub_1DD4E3B40(*(_DWORD *)(a1 + 32));
      *(void *)(a1 + 128) = v15;
      sub_1DD4E3C04(v15, *(void *)(a1 + 56), *(_DWORD *)(a1 + 48));
      uint64_t v16 = *(unsigned int *)(a1 + 236);
      if (v16)
      {
        uint64_t v17 = *(void *)(a1 + 56);
        uint64_t v18 = *(int **)(a1 + 240);
        uint64_t v19 = (char *)__p[0] + 4;
        do
        {
          int v20 = *v18++;
          *(v19 - 1) = *(_DWORD *)(v17 + 4 * (2 * v20));
          *uint64_t v19 = *(_DWORD *)(v17 + 4 * ((2 * v20) | 1u));
          v19 += 2;
          --v16;
        }
        while (v16);
        int v21 = sub_1DD4E3B40(*(_DWORD *)(a1 + 32));
        *(void *)(a1 + 136) = v21;
        sub_1DD4E3C04(v21, (uint64_t)__p[0], *(_DWORD *)(a1 + 236));
      }
    }
    sub_1DD4F680C(a1);
    sub_1DD4F68F4(a1, v22);
    for (uint64_t i = 0; i != 36; i += 4)
      *(_DWORD *)(a5 + i) = *(_DWORD *)(a1 + i + 248);
    sub_1DD4F662C(a1);
    --*(_DWORD *)(a1 + 8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return a4 > 3;
}

void sub_1DD4F67F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4F680C(uint64_t a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(unsigned int *)(a1 + 144);
  *(_DWORD *)(a1 + 148) = v2;
  sub_1DD4F6FDC(a1 + 208, v2);
  uint64_t result = MEMORY[0x1F4188790](v3);
  float v6 = (_DWORD *)((char *)v9 - ((v5 + 15) & 0x7FFFFFFF0));
  if (*(_DWORD *)(a1 + 148))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = sub_1DD4F6A68(a1, a1 + 184, v6, *(_DWORD *)(a1 + 168), *(void *)(a1 + 208) + v7);
      ++v8;
      v7 += 36;
    }
    while (v8 < *(unsigned int *)(a1 + 148));
  }
  return result;
}

void sub_1DD4F68F4(uint64_t a1, double a2)
{
  if (*(void *)(a1 + 16)) {
    int v3 = sub_1DD4F7020(a1, a2);
  }
  else {
    int v3 = sub_1DD4F7144(a1);
  }
  uint64_t v4 = *(void *)(a1 + 208) + 36 * v3;
  int v5 = *(_DWORD *)(v4 + 32);
  long long v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 264) = v6;
  *(_DWORD *)(a1 + 280) = v5;
  sub_1DD4F7ABC(v12, *(unsigned int *)(a1 + 48));
  unsigned int v11 = 0;
  sub_1DD4D03B8((uint64_t)v12, *(unsigned int *)(a1 + 48));
  sub_1DD4F7318(a1, (float *)(a1 + 248), &v11, (uint64_t)v12[0]);
  unsigned int v7 = v11;
  sub_1DD4D03B8((uint64_t)v12, v11);
  if (v7)
  {
    float v9 = 0;
    uint64_t v10 = 0;
    long long __p = 0;
    (*(void (**)(uint64_t, void **, void **))(*(void *)a1 + 16))(a1, v12, &__p);
    sub_1DD4EAEB4(*(void *)(a1 + 200), *(void *)(a1 + 56), *(void *)(a1 + 64), 0, (uint64_t)__p, (unint64_t)(v9 - (unsigned char *)__p) >> 2, 1, a1 + 248, (float)*(unsigned int *)(a1 + 40), (float)*(unsigned int *)(a1 + 44));
    if (__p)
    {
      float v9 = __p;
      operator delete(__p);
    }
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_1DD4F6A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4F6A68(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  if (!*(_DWORD *)(a1 + 164))
  {
LABEL_28:
    uint64_t result = 0;
    *(_OWORD *)a5 = xmmword_1DD512510;
    *(_OWORD *)(a5 + 16) = xmmword_1DD512510;
    *(_DWORD *)(a5 + 32) = 1065353216;
    return result;
  }
  unsigned int v10 = 0;
  uint64_t v25 = a4;
  while (1)
  {
    if (*(_DWORD *)(a1 + 236) <= (4 * *(_DWORD *)(a1 + 168)) || v10 >= *(_DWORD *)(a1 + 160))
    {
      if (*(unsigned char *)(a1 + 24) && v10 < *(_DWORD *)(a1 + 156))
      {
        uint64_t v11 = *(void *)(a1 + 128);
        goto LABEL_11;
      }
      unint64_t v12 = *(unsigned int *)(a1 + 48);
      if (v12 >= a4)
      {
        sub_1DD4F7ABC(&__p, v12);
        if (*(_DWORD *)(a1 + 48))
        {
          unint64_t v13 = 0;
          BOOL v14 = __p;
          do
          {
            v14[v13] = v13;
            ++v13;
          }
          while (v13 < *(unsigned int *)(a1 + 48));
        }
        if (a4)
        {
          uint64_t v15 = v27;
          uint64_t v16 = v25;
          uint64_t v17 = a3;
          do
          {
            unsigned int v18 = sub_1DD4DF918(a2, 0, ((v15 - (unsigned char *)__p) >> 2) - 1);
            uint64_t v19 = v27;
            int v20 = (char *)__p + 4 * v18;
            *uint64_t v17 = *v20;
            int64_t v21 = v19 - (char *)(v20 + 1);
            if (v19 != (char *)(v20 + 1)) {
              memmove(v20, v20 + 1, v19 - (char *)(v20 + 1));
            }
            uint64_t v15 = (char *)v20 + v21;
            float v27 = (char *)v20 + v21;
            ++v17;
            --v16;
          }
          while (v16);
        }
        if (__p)
        {
          float v27 = (char *)__p;
          operator delete(__p);
        }
      }
    }
    else
    {
      if (v10 >= *(_DWORD *)(a1 + 152) && *(unsigned char *)(a1 + 24))
      {
        uint64_t v11 = *(void *)(a1 + 136);
LABEL_11:
        sub_1DD4E3F78(v11, a2, a4, (uint64_t)a3);
        goto LABEL_26;
      }
      if (a4)
      {
        uint64_t v22 = v25;
        int v23 = a3;
        do
        {
          *v23++ = *(_DWORD *)(*(void *)(a1 + 240)
                             + 4 * (int)sub_1DD4DF918(a2, 0, (*(_DWORD *)(a1 + 236) - 1)));
          --v22;
        }
        while (v22);
      }
    }
LABEL_26:
    if (sub_1DD4F6C8C(a1, v10, a4, a3, a5)) {
      return 1;
    }
    if (++v10 >= *(_DWORD *)(a1 + 164)) {
      goto LABEL_28;
    }
  }
}

void sub_1DD4F6C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4F6C8C(uint64_t a1, int a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  if (!a3)
  {
LABEL_13:
    uint64_t v18 = *(void *)(a1 + 56);
    int v19 = a4[1];
    uint64_t v20 = (2 * *a4);
    float v21 = *(float *)(v18 + 4 * v20);
    uint64_t v22 = (2 * *a4) | 1u;
    float v23 = *(float *)(v18 + 4 * v22);
    uint64_t v24 = (2 * v19);
    float v25 = *(float *)(v18 + 4 * v24);
    uint64_t v26 = (2 * v19) | 1u;
    float v27 = *(float *)(v18 + 4 * v26);
    int v28 = a4[2];
    uint64_t v29 = (2 * v28);
    float v30 = *(float *)(v18 + 4 * v29);
    uint64_t v31 = (2 * v28) | 1u;
    float v32 = *(float *)(v18 + 4 * v31);
    float v33 = (float)(v21 * v27) - (float)(v23 * v25);
    if (fabsf(v33 + (float)((float)((float)(v25 - v21) * v32) + (float)((float)(v23 - v27) * v30))) >= 0.00000011921)
    {
      int v34 = a4[3];
      uint64_t v35 = (2 * v34);
      float v36 = *(float *)(v18 + 4 * v35);
      uint64_t v37 = (2 * v34) | 1u;
      float v38 = *(float *)(v18 + 4 * v37);
      if (fabsf(v33 + (float)((float)((float)(v25 - v21) * v38) + (float)((float)(v23 - v27) * v36))) >= 0.00000011921
        && fabsf((float)((float)(v30 * (float)-v23) + (float)(v21 * v32))+ (float)((float)((float)(v30 - v21) * v38) + (float)((float)(v23 - v32) * v36))) >= 0.00000011921&& fabsf((float)((float)(v25 * v32) - (float)(v27 * v30))+ (float)((float)((float)(v30 - v25) * v38) + (float)((float)(v27 - v32) * v36))) >= 0.00000011921)
      {
        uint64_t v39 = *(void *)(a1 + 64);
        float v40 = *(float *)(v39 + 4 * v20);
        float v41 = *(float *)(v39 + 4 * v22);
        float v42 = *(float *)(v39 + 4 * v24);
        float v43 = *(float *)(v39 + 4 * v26);
        float v44 = *(float *)(v39 + 4 * v29);
        float v45 = *(float *)(v39 + 4 * v31);
        float v46 = (float)(v40 * v43) - (float)(v41 * v42);
        if (fabsf(v46 + (float)((float)((float)(v42 - v40) * v45) + (float)((float)(v41 - v43) * v44))) >= 0.00000011921)
        {
          float v47 = *(float *)(v39 + 4 * v35);
          float v48 = *(float *)(v39 + 4 * v37);
          if (fabsf(v46 + (float)((float)((float)(v42 - v40) * v48) + (float)((float)(v41 - v43) * v47))) >= 0.00000011921
            && fabsf((float)((float)(v44 * (float)-v41) + (float)(v40 * v45))+ (float)((float)((float)(v44 - v40) * v48) + (float)((float)(v41 - v45) * v47))) >= 0.00000011921&& fabsf((float)((float)(v42 * v45) - (float)(v43 * v44))+ (float)((float)((float)(v44 - v42) * v48) + (float)((float)(v43 - v45) * v47))) >= 0.00000011921)
          {
            int v49 = sub_1DD4EAEB4(*(void *)(a1 + 200), v18, v39, 0, (uint64_t)a4, a3, 0, a5, (float)*(unsigned int *)(a1 + 40), (float)*(unsigned int *)(a1 + 44));
            uint64_t v17 = 0;
            if (!v49) {
              return v17;
            }
            uint64_t v50 = 0;
            int v51 = (const float *)(a5 + 32);
            float32x4_t v52 = vld1q_dup_f32(v51);
            do
            {
              *(float32x4_t *)(a5 + v50) = vdivq_f32(*(float32x4_t *)(a5 + v50), v52);
              v50 += 16;
            }
            while (v50 != 32);
            *(_DWORD *)(a5 + 32) = 1065353216;
            if (vabds_f32(1.0, (float)(*(float *)a5 * *(float *)(a5 + 16)) - (float)(*(float *)(a5 + 4) * *(float *)(a5 + 12))) <= (float)(1.0 - powf(0.98, (float)(a2 + 1))))
            {
              uint64_t v53 = 0;
              uint64_t v17 = 1;
              while (fabsf(*(float *)(a5 + v53)) != INFINITY)
              {
                v53 += 4;
                if (v53 == 36) {
                  return v17;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 1;
  char v10 = 1;
  while (2)
  {
    uint64_t v11 = &a4[v9];
    uint64_t v12 = v8;
    while (1)
    {
      uint64_t v8 = v12 + 1;
      if (v12 + 1 < (unint64_t)a3) {
        break;
      }
LABEL_8:
      ++v9;
      ++v11;
      uint64_t v12 = v8;
      if (v8 == a3)
      {
        if ((v10 & 1) == 0) {
          return 0;
        }
        goto LABEL_13;
      }
    }
    int v13 = a4[v12];
    uint64_t v14 = a3;
    uint64_t v15 = v11;
    while (1)
    {
      int v16 = *v15++;
      if (v13 == v16) {
        break;
      }
      if (v9 == --v14) {
        goto LABEL_8;
      }
    }
    char v10 = 0;
    uint64_t v17 = 0;
    ++v9;
    if (v8 != a3) {
      continue;
    }
    return v17;
  }
}

void sub_1DD4F6FDC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1DD4F7B34((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 36 * a2;
  }
}

uint64_t sub_1DD4F7020(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 232);
  [*(id *)(a1 + 16) setInlierLimit:a2];
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  LODWORD(v4) = *(_DWORD *)(a1 + 44);
  objc_msgSend(*(id *)(a1 + 16), "setFrameSize:", (double)v3, (double)v4);
  sub_1DD4E33AC(&v11, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 2));
  objc_msgSend(*(id *)(a1 + 16), "performRansacOnData:firstPointSet:secondPointSet:pointWeights:homographies:numHomographies:homScores:", *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v11);
  if ((unint64_t)((char *)v12 - (char *)v11) < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v5 = v12 - v11;
    float v6 = *v11;
    if (v5 <= 2) {
      unint64_t v5 = 2;
    }
    float v7 = 0.0;
    for (uint64_t i = 1; i != v5; ++i)
    {
      if (v11[i] > v6)
      {
        float v6 = v11[i];
        float v7 = (float)(int)i;
      }
    }
    uint64_t v9 = (int)v7;
  }
  uint64_t v12 = v11;
  operator delete(v11);
  return v9;
}

void sub_1DD4F7128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD4F7144(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 148);
  if (v2 < 0x64) {
    size_t v3 = 1;
  }
  else {
    size_t v3 = v2 / 0x64;
  }
  unsigned int v4 = v2 / v3;
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  float v7 = (float *)((char *)block - ((v6 + 15) & 0x3FFFFFF0));
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  char v10 = (char *)block - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (unsigned int *)((char *)block - v11);
  qos_class_t v13 = qos_class_self();
  uint64_t v14 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E4F14430], v13, 0);
  uint64_t v15 = dispatch_queue_create("RANSAC score queue", v14);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1DD4F74D8;
  block[3] = &unk_1E6CC8C88;
  unsigned int v24 = v4;
  int v25 = v3;
  block[4] = a1;
  block[5] = v12;
  block[6] = v7;
  block[7] = v10;
  dispatch_apply(v3, v15, block);
  uint64_t v16 = *v12;
  if (v3 >= 2)
  {
    float v18 = *v7;
    uint64_t v17 = v7 + 1;
    float v19 = v18;
    uint64_t v20 = v12 + 1;
    size_t v21 = v3 - 1;
    do
    {
      if (*v17 > v19)
      {
        uint64_t v16 = *v20;
        float v19 = *v17;
      }
      ++v20;
      ++v17;
      --v21;
    }
    while (v21);
  }

  return v16;
}

uint64_t sub_1DD4F7318(uint64_t result, float *a2, unsigned int *a3, uint64_t a4)
{
  float v9 = a2[7];
  float v8 = a2[8];
  float v10 = a2[4];
  float v11 = a2[5];
  float v12 = a2[6];
  float v13 = (float)(v10 * v8) - (float)(v9 * v11);
  float v15 = *a2;
  float v14 = a2[1];
  float v16 = a2[2];
  float v17 = a2[3];
  float v18 = (float)(v9 * v16) - (float)(v14 * v8);
  float v19 = (float)(v14 * v11) - (float)(v10 * v16);
  float v20 = (float)((float)(v18 * v17) + (float)(*a2 * v13)) + (float)(v12 * v19);
  float v21 = -2.2204e-16;
  if (v20 >= 2.2204e-16 || v20 <= -2.2204e-16)
  {
    float v13 = v13 / v20;
    float v18 = v18 / v20;
    float v19 = v19 / v20;
    float v4 = (float)((float)(v12 * v11) - (float)(v17 * v8)) / v20;
    float v21 = (float)((float)(v17 * v9) - (float)(v12 * v10)) / v20;
    float v5 = (float)((float)(v15 * v8) - (float)(v12 * v16)) / v20;
    float v6 = (float)((float)(v17 * v16) - (float)(v15 * v11)) / v20;
    float v7 = (float)((float)(v12 * v14) - (float)(v15 * v9)) / v20;
    float v20 = (float)((float)(v15 * v10) - (float)(v17 * v14)) / v20;
  }
  unint64_t v23 = *(unsigned int *)(result + 48);
  if (v23)
  {
    unint64_t v24 = 0;
    unsigned int v25 = 0;
    float v26 = *(float *)(result + 232) * *(float *)(result + 232);
    float v27 = *(float *)(result + 172) * (float)(v26 * *(float *)(result + 172));
    float v28 = *(float *)(result + 176) * (float)(v26 * *(float *)(result + 176));
    uint64_t v29 = *(void *)(result + 56);
    uint64_t v30 = *(void *)(result + 64);
    unsigned int v31 = 1;
    do
    {
      float v32 = *(float *)(v29 + 4 * (v31 - 1));
      float v33 = *(float *)(v29 + 4 * v31);
      float v34 = *(float *)(v30 + 4 * (v31 - 1));
      float v35 = *(float *)(v30 + 4 * v31);
      float v36 = 1.0 / (float)(v20 + (float)((float)(v7 * v35) + (float)(v21 * v34)));
      float v37 = (float)(v19 + (float)((float)(v18 * v35) + (float)(v13 * v34))) * v36;
      float v38 = (float)((float)(v32 - v37) * (float)(v32 - v37))
          + (float)((float)(v33 - (float)((float)(v6 + (float)((float)(v5 * v35) + (float)(v4 * v34))) * v36))
                  * (float)(v33 - (float)((float)(v6 + (float)((float)(v5 * v35) + (float)(v4 * v34))) * v36)));
      float v39 = 1.0 / (float)(v8 + (float)((float)(v9 * v33) + (float)(v12 * v32)));
      float v40 = v35 - (float)((float)(v11 + (float)((float)(v10 * v33) + (float)(v17 * v32))) * v39);
      float v41 = v34 - (float)((float)(v16 + (float)((float)(v14 * v33) + (float)(v15 * v32))) * v39);
      float v42 = (float)(v41 * v41) + (float)(v40 * v40);
      if (v38 < v27 && v42 < v28)
      {
        *(_DWORD *)(a4 + 4 * v25++) = v24;
        unint64_t v23 = *(unsigned int *)(result + 48);
      }
      ++v24;
      v31 += 2;
    }
    while (v24 < v23);
  }
  else
  {
    unsigned int v25 = 0;
  }
  *a3 = v25;
  return result;
}

uint64_t sub_1DD4F74D8(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(_DWORD *)(a1 + 64);
  int v13 = v12 * a2;
  if (*(int *)(a1 + 68) - 1 == a2) {
    int v14 = *(_DWORD *)(v11 + 148);
  }
  else {
    int v14 = v12 + v13;
  }
  uint64_t result = sub_1DD4F7540(v11, v13, v14 - 1, (float *)(*(void *)(a1 + 48) + 4 * a2), (int *)(*(void *)(a1 + 56) + 4 * a2), a3, a4, a5, a6, a7, a8, a9);
  *(_DWORD *)(*(void *)(a1 + 40) + 4 * a2) = result;
  return result;
}

uint64_t sub_1DD4F7540(uint64_t a1, int a2, int a3, float *a4, int *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  if (a2 <= a3)
  {
    unsigned int v17 = a2;
    int v15 = 0;
    LODWORD(v14) = 0;
    int v19 = a3 + 1;
    uint64_t v20 = 36 * a2;
    float v16 = -3.4028e38;
    do
    {
      int v24 = 0;
      uint64_t v21 = *(void *)(a1 + 208) + v20;
      sub_1DD4F7668(a1, v21, &v24, a6, a7, a8, a9, a10, a11, a12);
      *(float *)&a6 = v22 * (**(float (***)(uint64_t, uint64_t))a1)(a1, v21);
      if (*(float *)&a6 <= v16) {
        uint64_t v14 = v14;
      }
      else {
        uint64_t v14 = v17;
      }
      if (*(float *)&a6 > v16)
      {
        int v15 = v24;
        float v16 = *(float *)&a6;
      }
      v20 += 36;
      ++v17;
    }
    while (v19 != v17);
  }
  else
  {
    uint64_t v14 = 0;
    int v15 = 0;
    float v16 = -3.4028e38;
  }
  *a4 = v16;
  *a5 = v15;
  return v14;
}

uint64_t sub_1DD4F7668(uint64_t result, uint64_t a2, int *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  float v20 = *(float *)(a2 + 28);
  LODWORD(a5) = *(_DWORD *)(a2 + 32);
  float v21 = *(float *)(a2 + 16);
  LODWORD(a7) = *(_DWORD *)(a2 + 20);
  LODWORD(a9) = *(_DWORD *)(a2 + 24);
  *(float *)&a10 = (float)(v21 * *(float *)&a5) - (float)(v20 * *(float *)&a7);
  v10.i32[0] = *(_DWORD *)a2;
  float v22 = *(float *)(a2 + 4);
  v11.i32[0] = *(_DWORD *)(a2 + 8);
  v12.i32[0] = *(_DWORD *)(a2 + 12);
  float v23 = (float)(v20 * *(float *)v11.i32) - (float)(v22 * *(float *)&a5);
  *(float *)v13.i32 = (float)(v22 * *(float *)&a7) - (float)(v21 * *(float *)v11.i32);
  *(float *)v19.i32 = (float)((float)(v23 * *(float *)v12.i32) + (float)(*(float *)a2 * *(float *)&a10))
                    + (float)(*(float *)&a9 * *(float *)v13.i32);
  v14.i32[0] = -1518338048;
  BOOL v24 = *(float *)v19.i32 >= 2.2204e-16 || *(float *)v19.i32 <= -2.2204e-16;
  if (v24)
  {
    *(float *)&a10 = *(float *)&a10 / *(float *)v19.i32;
    float v23 = v23 / *(float *)v19.i32;
    *(float *)v13.i32 = *(float *)v13.i32 / *(float *)v19.i32;
    *(float *)v15.i32 = (float)((float)(*(float *)&a9 * *(float *)&a7) - (float)(*(float *)v12.i32 * *(float *)&a5))
                      / *(float *)v19.i32;
    *(float *)v14.i32 = (float)((float)(*(float *)v12.i32 * v20) - (float)(*(float *)&a9 * v21)) / *(float *)v19.i32;
    float v16 = (float)((float)(*(float *)v10.i32 * *(float *)&a5) - (float)(*(float *)&a9 * *(float *)v11.i32))
        / *(float *)v19.i32;
    *(float *)v17.i32 = (float)((float)(*(float *)v12.i32 * *(float *)v11.i32)
                              - (float)(*(float *)v10.i32 * *(float *)&a7))
                      / *(float *)v19.i32;
    float v18 = (float)((float)(*(float *)&a9 * v22) - (float)(*(float *)v10.i32 * v20)) / *(float *)v19.i32;
    *(float *)v19.i32 = (float)((float)(*(float *)v10.i32 * v21) - (float)(*(float *)v12.i32 * v22)) / *(float *)v19.i32;
  }
  float v25 = *(float *)(result + 232) * *(float *)(result + 232);
  float v26 = *(int32x4_t **)(result + 56);
  float v27 = 0.0;
  if ((v26 & 0xF) != 0 || (float v28 = *(int32x4_t **)(result + 64), (v28 & 0xF) != 0))
  {
    LODWORD(v29) = 0;
    int v30 = 0;
  }
  else
  {
    unint64_t v47 = *(unsigned int *)(result + 48);
    if (v47 >= 4)
    {
      uint64_t v50 = *(int8x16_t **)(result + 80);
      unint64_t v51 = v47 >> 2;
      float32x4_t v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
      float32x4_t v81 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
      float32x4_t v80 = (float32x4_t)vdupq_lane_s32(v10, 0);
      float32x4_t v79 = (float32x4_t)vdupq_lane_s32(v11, 0);
      float32x4_t v78 = (float32x4_t)vdupq_lane_s32(v12, 0);
      float32x4_t v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      float32x4_t v76 = (float32x4_t)vdupq_lane_s32(v14, 0);
      float32x4_t v75 = (float32x4_t)vdupq_lane_s32(v19, 0);
      float32x4_t v52 = v26 + 1;
      uint64_t v53 = v28 + 1;
      float32x4_t v74 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a10, 0);
      float32x4_t v73 = (float32x4_t)vdupq_lane_s32(v13, 0);
      int32x4_t v49 = 0uLL;
      float32x4_t v72 = (float32x4_t)vdupq_lane_s32(v15, 0);
      float32x4_t v48 = 0uLL;
      float32x4_t v54 = (float32x4_t)vdupq_lane_s32(v17, 0);
      do
      {
        int32x4_t v55 = v52[-1];
        float32x4_t v56 = (float32x4_t)vuzp1q_s32(v55, *v52);
        float32x4_t v57 = (float32x4_t)vuzp2q_s32(v55, *v52);
        int32x4_t v58 = v53[-1];
        float32x4_t v59 = (float32x4_t)vuzp1q_s32(v58, *v53);
        float32x4_t v60 = (float32x4_t)vuzp2q_s32(v58, *v53);
        float32x4_t v61 = vaddq_f32(v81, vmlaq_f32(vmulq_n_f32(v57, v20), v56, v82));
        float32x4_t v62 = vmlaq_f32(vmulq_n_f32(v60, v18), v59, v76);
        float32x4_t v63 = vmlaq_f32(vmulq_n_f32(v60, v23), v59, v74);
        float32x4_t v64 = vmlsq_f32(vaddq_f32(v79, vmlaq_f32(vmulq_n_f32(v57, v22), v56, v80)), v61, v59);
        float32x4_t v65 = vmlaq_f32(vmulq_n_f32(v60, v16), v59, v72);
        float32x4_t v66 = vmlsq_f32(vaddq_f32(v77, vmlaq_f32(vmulq_n_f32(v57, v21), v56, v78)), v61, v60);
        float32x4_t v67 = vaddq_f32(v75, v62);
        float32x4_t v68 = vmlsq_f32(vaddq_f32(v73, v63), v67, v56);
        float32x4_t v69 = vmlsq_f32(vaddq_f32(v54, v65), v67, v57);
        int8x16_t v70 = *v50++;
        int32x4_t v71 = (int32x4_t)vandq_s8((int8x16_t)vcgeq_f32(vmulq_f32(v67, vmulq_n_f32(v67, v25)), vmlaq_f32(vmulq_f32(v69, v69), v68, v68)), (int8x16_t)vcgeq_f32(vmulq_f32(v61, vmulq_n_f32(v61, v25)), vmlaq_f32(vmulq_f32(v66, v66), v64, v64)));
        float32x4_t v48 = vaddq_f32(v48, (float32x4_t)vandq_s8(v70, (int8x16_t)v71));
        int32x4_t v49 = vsubq_s32(v49, v71);
        v52 += 2;
        v53 += 2;
        --v51;
      }
      while (v51);
      LODWORD(v29) = v47 & 0xFFFFFFFC;
    }
    else
    {
      LODWORD(v29) = 0;
      float32x4_t v48 = 0uLL;
      int32x4_t v49 = 0uLL;
    }
    LODWORD(v27) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)))).u32[0];
    int v30 = vaddvq_s32(v49);
  }
  uint64_t v31 = *(unsigned int *)(result + 48);
  if (v29 < v31)
  {
    uint64_t v32 = *(void *)(result + 64);
    unsigned int v33 = 2 * v29;
    uint64_t v29 = v29;
    do
    {
      float v34 = *(float *)&v26->i32[v33];
      float v35 = *(float *)&v26->i32[v33 + 1];
      float v36 = *(float *)&a5 + (float)((float)(v20 * v35) + (float)(*(float *)&a9 * v34));
      float v37 = *(float *)(v32 + 4 * v33);
      float v38 = (float)(*(float *)v11.i32 + (float)((float)(v22 * v35) + (float)(*(float *)v10.i32 * v34)))
          - (float)(v37 * v36);
      float v39 = *(float *)(v32 + 4 * (v33 + 1));
      float v40 = (float)(*(float *)&a7 + (float)((float)(v21 * v35) + (float)(*(float *)v12.i32 * v34))) - (float)(v39 * v36);
      BOOL v24 = (float)((float)(v40 * v40) + (float)(v38 * v38)) <= (float)(v36 * (float)(v25 * v36));
      float v41 = *(float *)v19.i32 + (float)((float)(v18 * v39) + (float)(*(float *)v14.i32 * v37));
      float v42 = (float)(*(float *)v13.i32 + (float)((float)(v23 * v39) + (float)(*(float *)&a10 * v37)))
          - (float)(v34 * v41);
      float v43 = (float)(*(float *)v17.i32 + (float)((float)(v16 * v39) + (float)(*(float *)v15.i32 * v37)))
          - (float)(v35 * v41);
      float v44 = v41 * (float)(v25 * v41);
      float v45 = (float)(v43 * v43) + (float)(v42 * v42);
      if (v24 && v45 <= v44)
      {
        ++v30;
        float v27 = v27 + *(float *)(*(void *)(result + 80) + 4 * v29);
      }
      ++v29;
      v33 += 2;
    }
    while (v31 != v29);
  }
  if (a3) {
    *a3 = v30;
  }
  return result;
}

float sub_1DD4F79E4()
{
  return 1.0;
}

char *sub_1DD4F79EC(int a1, uint64_t a2, char *a3)
{
  if (a3 != (char *)a2) {
    return sub_1DD4F7D50(a3, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void sub_1DD4F7A14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = a1 + 80;
  if (v2)
  {
    sub_1DD4E0190(v3, *(unsigned int *)(a1 + 48));
    uint64_t v4 = *(unsigned int *)(a1 + 48);
    if (v4)
    {
      float v5 = *(int **)(a1 + 72);
      float v6 = *(_DWORD **)(a1 + 80);
      do
      {
        int v7 = *v5++;
        *v6++ = v7;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    unint64_t v8 = *(unsigned int *)(a1 + 48);
    int v9 = 1065353216;
    sub_1DD4F7A8C(v3, v8, &v9);
  }
}

void sub_1DD4F7A8C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1DD4F7E5C((void **)a1, a2 - v3, a3);
  }
}

void *sub_1DD4F7ABC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BB674(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1DD4F7B18(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD4F7B34(void **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x71C71C71C71C71CLL) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x38E38E38E38E38ELL) {
      unint64_t v11 = 0x71C71C71C71C71CLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int32x2_t v12 = (char *)sub_1DD4F7D04(v4, v11);
    }
    else {
      int32x2_t v12 = 0;
    }
    int32x2_t v14 = &v12[36 * v8];
    int32x2_t v15 = &v12[36 * v11];
    size_t v16 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v14, v16);
    int32x2_t v17 = &v14[v16];
    int32x2_t v19 = (char *)*a1;
    float v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 36);
        long long v21 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v21;
        *(_OWORD *)(v14 - 36) = v20;
        v14 -= 36;
        v18 -= 36;
      }
      while (v18 != v19);
      float v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *sub_1DD4F7D04(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    sub_1DD4BAD90();
  }
  return operator new(36 * a2);
}

char *sub_1DD4F7D50(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_1DD4BACA0();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_1DD4BB674(v7, v11);
    size_t v13 = (char *)v7[1];
    int32x2_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      int32x2_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int32x2_t v12 = (void **)(result + 8);
  int32x2_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  size_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    int32x2_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int32x2_t v12 = &v9[v17];
  return result;
}

void sub_1DD4F7E5C(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  int v7 = v8;
  unint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      size_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      sub_1DD4BACA0();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_1DD4BB6B8(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    float v18 = &v15[4 * v12];
    int32x2_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    long long v21 = v18;
    do
    {
      *(_DWORD *)long long v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    float v22 = &v15[4 * v14];
    float v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void sub_1DD4F7F80(void **a1, size_t a2, size_t a3, void *a4)
{
  if (a4 == (void *)1)
  {
    sub_1DD4F8020((uint64_t)a1, a2, a3);
  }
  else
  {
    unint64_t v8 = ((void)a4 * a2 + 15) & 0xFFFFFFFFFFFFFFF0;
    *a1 = malloc_type_calloc(1uLL, v8 * a3, 0xC41B3F2CuLL);
    a1[1] = (void *)a2;
    a1[2] = (void *)a3;
    a1[3] = (void *)v8;
    a1[4] = a4;
    a1[5] = 0;
  }
}

double sub_1DD4F8020(uint64_t a1, size_t a2, size_t a3)
{
  if ((a2 & 3) != 0) {
    OSType v6 = 875704422;
  }
  else {
    OSType v6 = 1278226488;
  }
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unint64_t v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  unint64_t v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int valuePtr = 16;
  CFNumberRef v11 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24C98], v11);
  CFRelease(v11);
  uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D40], (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D60], v12);
  int valuePtr = 4096;
  CFNumberRef v13 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D78], v13);
  CFRelease(v13);
  values = 0;
  CFDictionaryRef v14 = CFDictionaryCreate(v7, (const void **)&values, (const void **)&values, 0, v8, v9);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v14);
  CFRelease(v14);
  CVReturn v15 = CVPixelBufferCreate(v7, a2, a3, v6, Mutable, &pixelBufferOut);
  CFRelease(Mutable);
  if (!v15)
  {
    *(void *)(a1 + 24) = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
    *(void *)(a1 + 48) = pixelBufferOut;
  }
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 32) = xmmword_1DD5129C0;
  return result;
}

void sub_1DD4F820C(uint64_t a1)
{
}

void sub_1DD4F8220(uint64_t a1)
{
  uint64_t v2 = *(__CVBuffer **)(a1 + 48);
  if (v2) {
    CVPixelBufferRelease(v2);
  }
  else {
    free(*(void **)a1);
  }
  *(void *)a1 = 0;
}

void sub_1DD4F825C(void *a1)
{
  sub_1DD4F8220((uint64_t)a1);
  free(a1);
}

void **sub_1DD4F8294(size_t a1, size_t a2, void *a3)
{
  OSType v6 = (void **)malloc_type_calloc(1uLL, 0x40uLL, 0x103004000EA119AuLL);
  CFAllocatorRef v7 = v6;
  if (v6) {
    sub_1DD4F7F80(v6, a1, a2, a3);
  }
  return v7;
}

void *sub_1DD4F8300(__CVBuffer *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x103004000EA119AuLL);
  if (v2)
  {
    CGRect CleanRect = CVImageBufferGetCleanRect(a1);
    double x = CleanRect.origin.x;
    double y = CleanRect.origin.y;
    double height = CleanRect.size.height;
    unint64_t width = (unint64_t)CleanRect.size.width;
    unint64_t v7 = (unint64_t)CleanRect.size.height;
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    v2[1] = width;
    double v2[2] = v7;
    v2[3] = BytesPerRowOfPlane;
    v2[4] = 1;
    v2[5] = (unint64_t)(x
                             + ((double)CVPixelBufferGetHeightOfPlane(a1, 0) - (y + (double)(unint64_t)height))
                             * (double)BytesPerRowOfPlane);
    v2[6] = a1;
    CVPixelBufferRetain(a1);
  }
  return v2;
}

void *sub_1DD4F8A34(uint64_t a1)
{
  double result = (void *)sub_1DD50B8FC(a1);
  *double result = &unk_1F38B04C0;
  return result;
}

void sub_1DD4F8A6C()
{
  j_nullsub_2();
  JUMPOUT(0x1E01B7750);
}

uint64_t sub_1DD4F8AA4(uint64_t result, uint64_t *a2, int a3, float **a4, int **a5)
{
  unint64_t v5 = a2[2] - 4;
  if (v5 >= 5)
  {
    uint64_t v8 = a2[3];
    uint64_t v9 = -3 * v8;
    uint64_t v10 = 2 - 2 * v8;
    uint64_t v11 = -3 * v8 + 1;
    uint64_t v12 = 3 - v8;
    uint64_t v13 = v8 + 3;
    uint64_t v14 = 2 * v8 + 2;
    uint64_t v15 = 3 * v8;
    uint64_t v16 = 3 * v8 + 1;
    uint64_t v17 = 3 * v8 - 1;
    uint64_t v18 = 2 * v8 - 2;
    uint64_t v19 = v8 - 3;
    uint64_t v20 = -3 - v8;
    unint64_t v21 = (2 * v8) ^ 0xFFFFFFFFFFFFFFFELL;
    uint64_t v22 = -3 * v8 - 1;
    uint64_t v23 = *a2;
    unint64_t v24 = a2[1] - 4;
    uint64_t v883 = (uint64_t)(a5 + 2);
    uint64_t v884 = (uint64_t)(a4 + 2);
    unint64_t v25 = 4;
    v899 = a5;
    uint64_t v897 = -3 - v8;
    v898 = a4;
    unint64_t v895 = v5;
    uint64_t v896 = result;
    uint64_t v893 = v11;
    uint64_t v894 = v10;
    uint64_t v891 = v8 + 3;
    uint64_t v892 = 3 - v8;
    uint64_t v889 = 3 * v8;
    uint64_t v890 = v14;
    uint64_t v887 = v18;
    uint64_t v888 = v16;
    unint64_t v885 = v21;
    uint64_t v886 = v8 - 3;
    while (v24 < 5)
    {
LABEL_2432:
      if (++v25 == v5) {
        return result;
      }
    }
    float v26 = (float)v25;
    unint64_t v27 = 4;
    while (1)
    {
      float v28 = (unsigned __int8 *)(v23 + v27 + a2[3] * v25);
      int v29 = *v28;
      int v30 = v29 - a3;
      int v31 = v29 + a3;
      int v32 = v28[3];
      if (v30 <= v32)
      {
        if (v31 >= v32)
        {
          int v52 = *(v28 - 3);
          if (v30 > v52)
          {
            if (v30 <= v28[v20] || v30 <= v28[v19]) {
              goto LABEL_1943;
            }
            int v53 = v28[v17];
            if (v30 <= v53)
            {
              int v203 = v28[v10];
              if (v31 >= v53)
              {
                if (v30 <= v203 || v30 <= v28[v9] || v30 <= v28[v21] || v30 <= v28[v11]) {
                  goto LABEL_1943;
                }
                if (v30 <= v28[v12])
                {
                  int v40 = v28[v18];
                  goto LABEL_1473;
                }
LABEL_1905:
                int v268 = v28[v22];
                goto LABEL_1906;
              }
              if (v30 <= v203 || v30 <= v28[v9]) {
                goto LABEL_1943;
              }
              int v204 = v28[v12];
              if (v30 <= v204)
              {
                int v558 = v28[v18];
                if (v31 >= v204)
                {
                  if (v30 <= v558 || v30 <= v28[v21]) {
                    goto LABEL_1943;
                  }
                }
                else if (v30 <= v558 || v30 <= v28[v21])
                {
                  goto LABEL_1943;
                }
              }
              else if (v30 <= v28[v21])
              {
                goto LABEL_1943;
              }
            }
            else
            {
              int v54 = v28[v21];
              if (v30 <= v54)
              {
                int v270 = v28[v13];
                if (v31 >= v54)
                {
                  if (v30 <= v270 || v30 <= v28[v14] || v30 <= v28[v18]) {
                    goto LABEL_1943;
                  }
                }
                else if (v30 <= v270 || v30 <= v28[v14] || v30 <= v28[v18])
                {
                  goto LABEL_1943;
                }
                int v324 = v28[v16];
                goto LABEL_1885;
              }
              int v55 = v28[v9];
              if (v30 <= v55)
              {
                int v342 = v28[v16];
                if (v31 < v55)
                {
                  if (v30 <= v342) {
                    goto LABEL_1943;
                  }
                  int v343 = v28[v14];
                  if (v30 <= v343)
                  {
                    int v344 = v28[v22];
                    if (v31 >= v343)
                    {
                      if (v30 <= v344) {
                        goto LABEL_1943;
                      }
                    }
                    else if (v30 <= v344)
                    {
                      goto LABEL_1943;
                    }
                  }
                  int v324 = v28[v18];
                  goto LABEL_1885;
                }
                if (v30 <= v342 || v30 <= v28[v18] || v30 <= v28[v14] && v30 <= v28[v22]) {
                  goto LABEL_1943;
                }
LABEL_1886:
                int v268 = v28[v15];
                goto LABEL_1906;
              }
              int v56 = v28[v18];
              if (v30 > v56)
              {
                if (v30 > v28[v15])
                {
                  if (v30 > v28[v22]) {
                    goto LABEL_1907;
                  }
                  if (v30 <= v28[v14]) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1517;
                }
                int v40 = v28[v11];
LABEL_1473:
                if (v30 <= v40) {
                  goto LABEL_1943;
                }
                goto LABEL_1905;
              }
              int v467 = v28[v12];
              if (v31 >= v56)
              {
                if (v30 <= v467 || v30 <= v28[v10]) {
                  goto LABEL_1943;
                }
              }
              else if (v30 <= v467 || v30 <= v28[v10])
              {
                goto LABEL_1943;
              }
            }
            if (v30 <= v28[v11]) {
              goto LABEL_1943;
            }
            goto LABEL_1905;
          }
          if (v31 >= v52) {
            goto LABEL_1943;
          }
          int v67 = v28[v20];
          if (v30 > v67 || v31 >= v67) {
            goto LABEL_1943;
          }
          int v69 = v28[v19];
          if (v30 > v69 || v31 >= v69) {
            goto LABEL_1943;
          }
          int v71 = v28[v17];
          if (v30 > v71)
          {
            int v72 = v28[v10];
            if (v30 > v72 || v31 >= v72) {
              goto LABEL_1943;
            }
            int v74 = v28[v22];
            if (v30 > v74 || v31 >= v74) {
              goto LABEL_1943;
            }
            int v76 = v28[v11];
            if (v30 > v76 || v31 >= v76) {
              goto LABEL_1943;
            }
            int v78 = v28[v12];
            if (v30 <= v78)
            {
              if (v31 >= v78)
              {
                int v731 = v28[v18];
                if (v30 > v731 || v31 >= v731) {
                  goto LABEL_1943;
                }
                int v733 = v28[v21];
                if (v30 > v733 || v31 >= v733) {
                  goto LABEL_1943;
                }
              }
              else
              {
                int v625 = v28[v21];
                if (v30 > v625 || v31 >= v625) {
                  goto LABEL_1943;
                }
              }
            }
            else
            {
              int v79 = v28[v18];
              if (v30 > v79 || v31 >= v79) {
                goto LABEL_1943;
              }
              int v81 = v28[v21];
              if (v30 > v81 || v31 >= v81) {
                goto LABEL_1943;
              }
            }
            int v231 = v28[v9];
            goto LABEL_2277;
          }
          if (v31 >= v71)
          {
            int v412 = v28[v10];
            if (v30 > v412 || v31 >= v412) {
              goto LABEL_1943;
            }
            int v414 = v28[v9];
            if (v30 > v414 || v31 >= v414) {
              goto LABEL_1943;
            }
            int v416 = v28[v21];
            if (v30 > v416 || v31 >= v416) {
              goto LABEL_1943;
            }
            int v418 = v28[v11];
            if (v30 > v418 || v31 >= v418) {
              goto LABEL_1943;
            }
            int v420 = v28[v22];
            if (v30 > v420 || v31 >= v420) {
              goto LABEL_1943;
            }
            int v422 = v28[v12];
            if (v30 <= v422 && v31 < v422) {
              goto LABEL_1907;
            }
            int v231 = v28[v18];
            goto LABEL_2277;
          }
          int v276 = v28[v21];
          if (v30 <= v276)
          {
            if (v31 >= v276)
            {
              int v602 = v28[v13];
              if (v30 > v602 || v31 >= v602) {
                goto LABEL_1943;
              }
              int v604 = v28[v14];
              if (v30 > v604 || v31 >= v604) {
                goto LABEL_1943;
              }
              int v606 = v28[v18];
              if (v30 > v606 || v31 >= v606) {
                goto LABEL_1943;
              }
              int v608 = v28[v16];
              if (v30 > v608 || v31 >= v608) {
                goto LABEL_1943;
              }
            }
            else
            {
              int v504 = v28[v9];
              if (v30 <= v504)
              {
                if (v31 >= v504)
                {
                  int v752 = v28[v16];
                  if (v30 > v752 || v31 >= v752) {
                    goto LABEL_1943;
                  }
                  int v754 = v28[v18];
                  if (v30 > v754 || v31 >= v754) {
                    goto LABEL_1943;
                  }
                  int v756 = v28[v15];
                  if (v30 > v756 || v31 >= v756) {
                    goto LABEL_1943;
                  }
                  int v757 = v28[v14];
                  if (v30 <= v757 && v31 < v757) {
                    goto LABEL_1907;
                  }
                }
                else
                {
                  int v651 = v28[v18];
                  if (v30 <= v651)
                  {
                    if (v31 >= v651)
                    {
                      int v808 = v28[v12];
                      if (v30 > v808) {
                        goto LABEL_1943;
                      }
                      if (v31 >= v808) {
                        goto LABEL_1943;
                      }
                      int v809 = v28[v10];
                      if (v30 > v809) {
                        goto LABEL_1943;
                      }
                      if (v31 >= v809) {
                        goto LABEL_1943;
                      }
                      int v810 = v28[v11];
                      if (v30 > v810 || v31 >= v810) {
                        goto LABEL_1943;
                      }
                    }
                    else
                    {
                      int v774 = v28[v15];
                      if (v30 <= v774)
                      {
                        if (v31 < v774)
                        {
                          int v828 = v28[v22];
                          if (v30 <= v828)
                          {
                            if (v31 < v828) {
                              goto LABEL_1907;
                            }
                            int v859 = v28[v14];
                            if (v30 > v859 || v31 >= v859) {
                              goto LABEL_1943;
                            }
                          }
                          else
                          {
                            int v829 = v28[v14];
                            if (v30 > v829 || v31 >= v829) {
                              goto LABEL_1943;
                            }
                          }
                          int v231 = v28[v16];
                          goto LABEL_2277;
                        }
                        int v849 = v28[v11];
                        if (v30 > v849 || v31 >= v849) {
                          goto LABEL_1943;
                        }
                      }
                      else
                      {
                        int v775 = v28[v11];
                        if (v30 > v775 || v31 >= v775) {
                          goto LABEL_1943;
                        }
                      }
                    }
                  }
                  else
                  {
                    int v652 = v28[v12];
                    if (v30 > v652 || v31 >= v652) {
                      goto LABEL_1943;
                    }
                    int v654 = v28[v10];
                    if (v30 > v654) {
                      goto LABEL_1943;
                    }
                    if (v31 >= v654) {
                      goto LABEL_1943;
                    }
                    int v655 = v28[v11];
                    if (v30 > v655 || v31 >= v655) {
                      goto LABEL_1943;
                    }
                  }
                }
                int v231 = v28[v22];
LABEL_2277:
                if (v30 <= v231 && v31 < v231) {
                  goto LABEL_1907;
                }
                goto LABEL_1943;
              }
              int v505 = v28[v16];
              if (v30 > v505 || v31 >= v505) {
                goto LABEL_1943;
              }
              int v507 = v28[v14];
              if (v30 <= v507)
              {
                if (v31 >= v507)
                {
                  int v804 = v28[v22];
                  if (v30 > v804) {
                    goto LABEL_1943;
                  }
                  if (v31 >= v804) {
                    goto LABEL_1943;
                  }
                  int v805 = v28[v18];
                  if (v30 > v805 || v31 >= v805) {
                    goto LABEL_1943;
                  }
                }
                else
                {
                  int v770 = v28[v18];
                  if (v30 > v770 || v31 >= v770) {
                    goto LABEL_1943;
                  }
                }
              }
              else
              {
                int v508 = v28[v22];
                if (v30 > v508 || v31 >= v508) {
                  goto LABEL_1943;
                }
                int v510 = v28[v18];
                if (v30 > v510 || v31 >= v510) {
                  goto LABEL_1943;
                }
              }
            }
          }
          else
          {
            int v277 = v28[v13];
            if (v30 > v277 || v31 >= v277) {
              goto LABEL_1943;
            }
            int v279 = v28[v14];
            if (v30 > v279 || v31 >= v279) {
              goto LABEL_1943;
            }
            int v281 = v28[v18];
            if (v30 > v281 || v31 >= v281) {
              goto LABEL_1943;
            }
            int v283 = v28[v16];
            if (v30 > v283 || v31 >= v283) {
              goto LABEL_1943;
            }
          }
          goto LABEL_2190;
        }
        int v41 = v28[v9];
        if (v30 > v41)
        {
          int v42 = v28[v18];
          if (v30 > v42)
          {
            int v43 = v28[v20];
            if (v30 > v43)
            {
              int v44 = v28[v15];
              if (v30 > v44)
              {
                if (v30 <= *(v28 - 3)) {
                  goto LABEL_1943;
                }
                int v45 = v28[v21];
                if (v30 > v45)
                {
                  if (v30 <= v28[v19]) {
                    goto LABEL_1943;
                  }
                  if (v30 <= v28[v22])
                  {
                    if (v30 <= v28[v14]) {
                      goto LABEL_1943;
                    }
                    goto LABEL_25;
                  }
LABEL_309:
                  if (v30 > v28[v17]) {
                    goto LABEL_1907;
                  }
                  if (v30 <= v28[v10]) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1237;
                }
                int v341 = v28[v13];
                if (v31 < v45)
                {
                  if (v30 <= v341 || v30 <= v28[v14]) {
                    goto LABEL_1943;
                  }
                  int v186 = v28[v17];
                  goto LABEL_857;
                }
                if (v30 <= v341) {
                  goto LABEL_1943;
                }
                int v63 = v28[v14];
LABEL_1366:
                if (v30 <= v63 || v30 <= v28[v16]) {
                  goto LABEL_1943;
                }
                int v46 = v28[v19];
LABEL_1877:
                if (v30 <= v46) {
                  goto LABEL_1943;
                }
LABEL_1878:
                int v268 = v28[v17];
                goto LABEL_1906;
              }
              if (v31 >= v44)
              {
                if (v30 <= v28[v11] || v30 <= *(v28 - 3) || v30 <= v28[v21] || v30 <= v28[v17] && v30 <= v28[v10]) {
                  goto LABEL_1943;
                }
                goto LABEL_744;
              }
              int v187 = v28[v10];
              if (v30 > v187)
              {
                if (v30 <= v28[v19] || v30 <= v28[v21]) {
                  goto LABEL_1943;
                }
                int v188 = v28[v11];
                goto LABEL_442;
              }
              int v364 = v28[v17];
              if (v31 >= v187)
              {
                if (v30 <= v364) {
                  goto LABEL_1943;
                }
LABEL_1403:
                if (v30 <= v28[v11] || v30 <= v28[v21]) {
                  goto LABEL_1943;
                }
                int v321 = v28[v19];
                goto LABEL_1406;
              }
              if (v30 > v364) {
                goto LABEL_1403;
              }
              if (v31 >= v364) {
                goto LABEL_1943;
              }
              int v365 = v28[v11];
              if (v30 > v365 || v31 >= v365) {
                goto LABEL_1943;
              }
              int v367 = v28[v14];
              if (v30 > v367 || v31 >= v367) {
                goto LABEL_1943;
              }
              int v369 = v28[v13];
              if (v30 > v369 || v31 >= v369) {
                goto LABEL_1943;
              }
              int v371 = v28[v12];
LABEL_1769:
              if (v30 > v371 || v31 >= v371) {
                goto LABEL_1943;
              }
              goto LABEL_2262;
            }
            int v112 = v28[v11];
            BOOL v114 = v30 <= v112 && v31 < v112;
            if (v31 >= v43)
            {
              if (!v114) {
                goto LABEL_1943;
              }
              int v219 = v28[v17];
              if (v30 > v219 || v31 >= v219) {
                goto LABEL_1943;
              }
              int v221 = v28[v16];
              if (v30 > v221 || v31 >= v221) {
                goto LABEL_1943;
              }
              int v223 = v28[v10];
              if (v30 > v223 || v31 >= v223) {
                goto LABEL_1943;
              }
              int v225 = v28[v13];
              if (v30 > v225 || v31 >= v225) {
                goto LABEL_1943;
              }
              int v227 = v28[v12];
              if (v30 > v227 || v31 >= v227) {
                goto LABEL_1943;
              }
              int v229 = v28[v15];
              if (v30 > v229 || v31 >= v229) {
                goto LABEL_1943;
              }
              int v231 = v28[v14];
              goto LABEL_2277;
            }
            if (!v114) {
              goto LABEL_1943;
            }
            int v115 = v28[v17];
            if (v30 > v115 || v31 >= v115) {
              goto LABEL_1943;
            }
            int v117 = v28[v14];
            if (v30 > v117 || v31 >= v117) {
              goto LABEL_1943;
            }
            int v119 = v28[v10];
            if (v30 > v119 || v31 >= v119) {
              goto LABEL_1943;
            }
            int v121 = v28[v16];
            if (v30 > v121 || v31 >= v121) {
              goto LABEL_1943;
            }
            int v123 = v28[v13];
            if (v30 > v123 || v31 >= v123) {
              goto LABEL_1943;
            }
            int v107 = v28[v12];
            goto LABEL_612;
          }
          if (v31 >= v42)
          {
            int v156 = v28[v11];
            if (v30 > v156)
            {
              if (v30 <= v28[v12] || v30 <= v28[v19] || v30 <= *(v28 - 3) || v30 <= v28[v10]) {
                goto LABEL_1943;
              }
              goto LABEL_317;
            }
            if (v31 >= v156) {
              goto LABEL_1943;
            }
            int v256 = v28[v17];
            if (v30 > v256 || v31 >= v256) {
              goto LABEL_1943;
            }
            int v258 = v28[v14];
            if (v30 > v258 || v31 >= v258) {
              goto LABEL_1943;
            }
            int v260 = v28[v10];
            if (v30 > v260 || v31 >= v260) {
              goto LABEL_1943;
            }
            int v262 = v28[v16];
            if (v30 > v262 || v31 >= v262) {
              goto LABEL_1943;
            }
            int v264 = v28[v12];
            if (v30 > v264 || v31 >= v264) {
              goto LABEL_1943;
            }
            int v107 = v28[v13];
LABEL_612:
            if (v30 > v107 || v31 >= v107) {
              goto LABEL_1943;
            }
            goto LABEL_2276;
          }
          int v85 = v28[v16];
          if (v30 > v85)
          {
            if (v30 <= v28[v12] || v30 <= v28[v19] || v30 <= *(v28 - 3) || v30 <= v28[v21]) {
              goto LABEL_1943;
            }
            int v86 = v28[v10];
            goto LABEL_973;
          }
          if (v31 >= v85)
          {
            if (v30 <= v28[v19] || v30 <= v28[v12] || v30 <= *(v28 - 3)) {
              goto LABEL_1943;
            }
            int v325 = v28[v10];
LABEL_971:
            if (v30 <= v325) {
              goto LABEL_1943;
            }
            int v86 = v28[v21];
LABEL_973:
            if (v30 <= v86) {
              goto LABEL_1943;
            }
            int v388 = v28[v20];
LABEL_1042:
            if (v30 <= v388) {
              goto LABEL_1943;
            }
            int v141 = v28[v22];
LABEL_1236:
            if (v30 <= v141) {
              goto LABEL_1943;
            }
LABEL_1237:
            int v268 = v28[v11];
            goto LABEL_1906;
          }
          int v210 = v28[v17];
          if (v30 > v210)
          {
            if (v30 <= v28[v12] || v30 <= v28[v19] || v30 <= v28[v10] || v30 <= *(v28 - 3) || v30 <= v28[v21]) {
              goto LABEL_1943;
            }
            int v157 = v28[v11];
            goto LABEL_318;
          }
          if (v31 >= v210)
          {
            if (v30 <= v28[v12] || v30 <= v28[v19] || v30 <= *(v28 - 3) || v30 <= v28[v10] || v30 <= v28[v21]) {
              goto LABEL_1943;
            }
            int v536 = v28[v20];
            goto LABEL_1902;
          }
          int v385 = *(v28 - 3);
          if (v30 <= v385)
          {
            if (v31 >= v385)
            {
              int v676 = v28[v12];
              if (v30 > v676 || v31 >= v676) {
                goto LABEL_1943;
              }
              int v678 = v28[v13];
              if (v30 > v678 || v31 >= v678) {
                goto LABEL_1943;
              }
              int v680 = v28[v14];
              if (v30 > v680 || v31 >= v680) {
                goto LABEL_1943;
              }
              int v682 = v28[v19];
              if (v30 > v682 || v31 >= v682)
              {
                int v683 = v28[v10];
                goto LABEL_2274;
              }
              goto LABEL_2276;
            }
            int v577 = v28[v14];
            if (v30 <= v577)
            {
              if (v31 >= v577)
              {
                int v788 = v28[v22];
                if (v30 > v788 || v31 >= v788) {
                  goto LABEL_1943;
                }
                int v790 = v28[v21];
                if (v30 > v790) {
                  goto LABEL_1943;
                }
              }
              else
              {
                int v728 = v28[v13];
                if (v30 > v728)
                {
                  int v729 = v28[v21];
                  if (v30 > v729) {
                    goto LABEL_1943;
                  }
                  if (v31 >= v729) {
                    goto LABEL_1943;
                  }
                  int v730 = v28[v19];
                  if (v30 > v730 || v31 >= v730) {
                    goto LABEL_1943;
                  }
                  int v683 = v28[v20];
                  goto LABEL_2274;
                }
                if (v31 < v728)
                {
                  int v800 = v28[v15];
                  if (v30 > v800 || v31 >= v800) {
                    goto LABEL_1943;
                  }
                  int v801 = v28[v19];
                  if (v30 <= v801 && v31 < v801) {
                    goto LABEL_1907;
                  }
                  int v802 = v28[v10];
                  goto LABEL_2255;
                }
                int v790 = v28[v21];
                if (v30 > v790) {
                  goto LABEL_1943;
                }
              }
              if (v31 >= v790) {
                goto LABEL_1943;
              }
            }
            else
            {
              int v578 = v28[v22];
              if (v30 > v578 || v31 >= v578) {
                goto LABEL_1943;
              }
              int v580 = v28[v21];
              if (v30 > v580 || v31 >= v580) {
                goto LABEL_1943;
              }
            }
            int v834 = v28[v20];
            if (v30 > v834 || v31 >= v834) {
              goto LABEL_1943;
            }
            goto LABEL_2273;
          }
          int v386 = v28[v10];
          if (v30 <= v386)
          {
            if (v31 >= v386)
            {
              int v742 = v28[v19];
              if (v30 > v742 || v31 >= v742) {
                goto LABEL_1943;
              }
              goto LABEL_2011;
            }
            int v638 = v28[v14];
            if (v30 > v638 || v31 >= v638) {
              goto LABEL_1943;
            }
            int v640 = v28[v12];
            if (v30 > v640 || v31 >= v640) {
              goto LABEL_1943;
            }
          }
          else
          {
            int v387 = v28[v19];
            if (v30 > v387)
            {
              int v325 = v28[v12];
              goto LABEL_971;
            }
            if (v31 >= v387) {
              goto LABEL_1943;
            }
LABEL_2011:
            int v744 = v28[v12];
            if (v30 > v744 || v31 >= v744) {
              goto LABEL_1943;
            }
            int v746 = v28[v14];
            if (v30 > v746 || v31 >= v746) {
              goto LABEL_1943;
            }
          }
          int v683 = v28[v13];
          goto LABEL_2274;
        }
        if (v31 >= v41)
        {
          int v91 = v28[v17];
          if (v30 > v91)
          {
            if (v30 <= v28[v16] || v30 <= v28[v20] || v30 <= *(v28 - 3)) {
              goto LABEL_1943;
            }
            int v92 = v28[v21];
            if (v30 <= v92)
            {
              int v468 = v28[v13];
              if (v31 >= v92)
              {
                if (v30 <= v468) {
                  goto LABEL_1943;
                }
              }
              else if (v30 <= v468)
              {
                goto LABEL_1943;
              }
              if (v30 <= v28[v14] || v30 <= v28[v18]) {
                goto LABEL_1943;
              }
            }
            else
            {
              if (v30 <= v28[v18]) {
                goto LABEL_1943;
              }
              if (v30 > v28[v22])
              {
                int v93 = v28[v15];
                goto LABEL_1051;
              }
              if (v30 <= v28[v14]) {
                goto LABEL_1943;
              }
            }
            goto LABEL_1701;
          }
          if (v31 >= v91) {
            goto LABEL_1943;
          }
          int v170 = v28[v16];
          if (v30 > v170 || v31 >= v170) {
            goto LABEL_1943;
          }
          int v172 = v28[v14];
          if (v30 > v172)
          {
            int v173 = v28[v22];
            if (v30 > v173 || v31 >= v173) {
              goto LABEL_1943;
            }
            int v175 = v28[v21];
            if (v30 > v175 || v31 >= v175) {
              goto LABEL_1943;
            }
            int v177 = v28[v19];
            if (v30 > v177 || v31 >= v177) {
              goto LABEL_1943;
            }
            int v179 = v28[v20];
            if (v30 > v179 || v31 >= v179) {
              goto LABEL_1943;
            }
            int v181 = v28[v18];
            if (v30 > v181 || v31 >= v181) {
              goto LABEL_1943;
            }
            int v183 = *(v28 - 3);
            if (v30 > v183) {
              goto LABEL_1943;
            }
LABEL_1531:
            if (v31 >= v183) {
              goto LABEL_1943;
            }
            goto LABEL_2276;
          }
          if (v31 >= v172)
          {
            int v524 = v28[v22];
            if (v30 > v524 || v31 >= v524) {
              goto LABEL_1943;
            }
            int v526 = v28[v21];
            if (v30 > v526 || v31 >= v526) {
              goto LABEL_1943;
            }
            int v528 = v28[v19];
            if (v30 > v528 || v31 >= v528) {
              goto LABEL_1943;
            }
            int v530 = v28[v20];
            if (v30 > v530 || v31 >= v530) {
              goto LABEL_1943;
            }
            int v532 = v28[v18];
            if (v30 > v532 || v31 >= v532) {
              goto LABEL_1943;
            }
            int v534 = *(v28 - 3);
            if (v30 > v534 || v31 >= v534) {
              goto LABEL_1943;
            }
          }
          else
          {
            int v355 = v28[v18];
            if (v30 > v355)
            {
              int v356 = v28[v11];
              if (v30 > v356 || v31 >= v356) {
                goto LABEL_1943;
              }
              int v358 = v28[v10];
              if (v30 > v358 || v31 >= v358) {
                goto LABEL_1943;
              }
              int v360 = v28[v12];
              if (v30 > v360 || v31 >= v360) {
                goto LABEL_1943;
              }
              int v362 = v28[v13];
              if (v30 > v362 || v31 >= v362) {
                goto LABEL_1943;
              }
              goto LABEL_2276;
            }
            if (v31 >= v355)
            {
              int v664 = v28[v11];
              if (v30 > v664 || v31 >= v664) {
                goto LABEL_1943;
              }
              int v666 = v28[v10];
              if (v30 > v666 || v31 >= v666) {
                goto LABEL_1943;
              }
              int v668 = v28[v12];
              if (v30 > v668 || v31 >= v668) {
                goto LABEL_1943;
              }
              int v670 = v28[v13];
              if (v30 > v670 || v31 >= v670) {
                goto LABEL_1943;
              }
            }
            else
            {
              int v565 = v28[v19];
              if (v30 > v565)
              {
                int v566 = v28[v10];
                if (v30 > v566 || v31 >= v566) {
                  goto LABEL_1943;
                }
                int v568 = v28[v13];
                if (v30 > v568 || v31 >= v568) {
                  goto LABEL_1943;
                }
                int v183 = v28[v12];
                if (v30 > v183) {
                  goto LABEL_1943;
                }
                goto LABEL_1531;
              }
              if (v31 < v565)
              {
                int v724 = v28[v15];
                if (v30 > v724 || v31 >= v724) {
                  goto LABEL_1943;
                }
                int v726 = v28[v13];
                if (v30 > v726)
                {
                  int v727 = v28[v21];
                  if (v30 > v727) {
                    goto LABEL_1943;
                  }
                  if (v31 >= v727) {
                    goto LABEL_1943;
                  }
                  int v556 = v28[v20];
                  if (v30 > v556) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1470;
                }
                if (v31 >= v726)
                {
                  int v844 = v28[v21];
                  if (v30 > v844) {
                    goto LABEL_1943;
                  }
                  if (v31 >= v844) {
                    goto LABEL_1943;
                  }
                  int v845 = v28[v20];
                  if (v30 > v845 || v31 >= v845) {
                    goto LABEL_1943;
                  }
                  int v231 = *(v28 - 3);
                  goto LABEL_2277;
                }
                int v823 = *(v28 - 3);
                if (v30 <= v823 && v31 < v823) {
                  goto LABEL_1907;
                }
LABEL_1197:
                int v231 = v28[v12];
                goto LABEL_2277;
              }
              int v784 = v28[v10];
              if (v30 > v784 || v31 >= v784) {
                goto LABEL_1943;
              }
              int v786 = v28[v12];
              if (v30 > v786) {
                goto LABEL_1943;
              }
              if (v31 >= v786) {
                goto LABEL_1943;
              }
              int v787 = v28[v13];
              if (v30 > v787 || v31 >= v787) {
                goto LABEL_1943;
              }
            }
          }
LABEL_2190:
          int v231 = v28[v15];
          goto LABEL_2277;
        }
        int v60 = v28[v15];
        if (v30 > v60)
        {
          int v61 = v28[v21];
          if (v30 > v61)
          {
            int v62 = v28[v14];
            if (v30 > v62)
            {
              if (v30 <= *(v28 - 3) || v30 <= v28[v18]) {
                goto LABEL_1943;
              }
              int v63 = v28[v20];
              goto LABEL_1366;
            }
            if (v31 >= v62)
            {
              if (v30 <= v28[v22] || v30 <= v28[v16] || v30 <= *(v28 - 3) || v30 <= v28[v18]) {
                goto LABEL_1943;
              }
              int v323 = v28[v20];
              goto LABEL_1049;
            }
            int v272 = v28[v16];
            if (v30 > v272)
            {
              if (v30 <= v28[v22] || v30 <= v28[v19] || v30 <= v28[v18] || v30 <= v28[v20]) {
                goto LABEL_1943;
              }
              int v273 = v28[v17];
              goto LABEL_1479;
            }
            if (v31 >= v272) {
              goto LABEL_1943;
            }
            int v497 = v28[v22];
            if (v30 > v497 || v31 >= v497) {
              goto LABEL_1943;
            }
            int v499 = v28[v10];
            if (v30 > v499 || v31 >= v499) {
              goto LABEL_1943;
            }
            int v501 = v28[v13];
            if (v30 > v501 || v31 >= v501) {
              goto LABEL_1943;
            }
            int v138 = v28[v12];
            goto LABEL_1314;
          }
          if (v31 >= v61)
          {
            int v322 = v28[v16];
            if (v30 > v322)
            {
              if (v30 <= v28[v13] || v30 <= v28[v20] || v30 <= *(v28 - 3) || v30 <= v28[v14]) {
                goto LABEL_1943;
              }
LABEL_788:
              int v323 = v28[v18];
LABEL_1049:
              if (v30 <= v323) {
                goto LABEL_1943;
              }
              int v93 = v28[v17];
LABEL_1051:
              if (v30 <= v93) {
                goto LABEL_1943;
              }
LABEL_1052:
              int v268 = v28[v19];
              goto LABEL_1906;
            }
            if (v31 >= v322) {
              goto LABEL_1943;
            }
            int v455 = v28[v22];
            if (v30 > v455 || v31 >= v455) {
              goto LABEL_1943;
            }
            int v457 = v28[v14];
            if (v30 > v457 || v31 >= v457) {
              goto LABEL_1943;
            }
            int v459 = v28[v10];
            if (v30 > v459 || v31 >= v459) {
              goto LABEL_1943;
            }
            int v461 = v28[v13];
            if (v30 > v461 || v31 >= v461) {
              goto LABEL_1943;
            }
            int v463 = v28[v11];
            if (v30 > v463 || v31 >= v463) {
              goto LABEL_1943;
            }
            goto LABEL_1197;
          }
          int v206 = v28[v10];
          if (v30 > v206)
          {
            int v207 = v28[v17];
            if (v30 > v207)
            {
              if (v30 <= v28[v13] || v30 <= v28[v20] || v30 <= *(v28 - 3) || v30 <= v28[v18]) {
                goto LABEL_1943;
              }
              int v186 = v28[v14];
              goto LABEL_857;
            }
            if (v31 >= v207) {
              goto LABEL_1943;
            }
            int v476 = v28[v11];
            if (v30 > v476 || v31 >= v476) {
              goto LABEL_1943;
            }
            int v478 = v28[v19];
            if (v30 > v478 || v31 >= v478) {
              goto LABEL_1943;
            }
            int v480 = v28[v20];
            if (v30 > v480 || v31 >= v480) {
              goto LABEL_1943;
            }
            int v482 = v28[v18];
LABEL_1622:
            if (v30 > v482 || v31 >= v482) {
              goto LABEL_1943;
            }
LABEL_1627:
            int v202 = *(v28 - 3);
LABEL_2150:
            if (v30 > v202 || v31 >= v202) {
              goto LABEL_1943;
            }
            goto LABEL_2152;
          }
          if (v31 >= v206)
          {
            int v535 = v28[v17];
            if (v30 > v535)
            {
              if (v30 <= v28[v20] || v30 <= v28[v13] || v30 <= *(v28 - 3) || v30 <= v28[v14]) {
                goto LABEL_1943;
              }
              int v384 = v28[v18];
              goto LABEL_1414;
            }
            if (v31 >= v535) {
              goto LABEL_1943;
            }
            int v618 = v28[v11];
            if (v30 > v618 || v31 >= v618) {
              goto LABEL_1943;
            }
            int v620 = v28[v19];
            if (v30 > v620 || v31 >= v620) {
              goto LABEL_1943;
            }
            int v622 = v28[v18];
            if (v30 > v622 || v31 >= v622) {
              goto LABEL_1943;
            }
            int v624 = v28[v20];
            if (v30 > v624 || v31 >= v624) {
              goto LABEL_1943;
            }
            goto LABEL_1627;
          }
          int v381 = *(v28 - 3);
          if (v30 > v381)
          {
            int v382 = v28[v14];
            if (v30 > v382)
            {
              int v383 = v28[v13];
              if (v30 > v383)
              {
                if (v30 <= v28[v20] || v30 <= v28[v18]) {
                  goto LABEL_1943;
                }
                int v384 = v28[v17];
LABEL_1414:
                if (v30 <= v384) {
                  goto LABEL_1943;
                }
                int v214 = v28[v19];
LABEL_1512:
                if (v30 <= v214) {
                  goto LABEL_1943;
                }
LABEL_1517:
                int v268 = v28[v16];
                goto LABEL_1906;
              }
              if (v31 >= v383) {
                goto LABEL_1943;
              }
              int v691 = v28[v20];
              if (v30 > v691 || v31 >= v691) {
                goto LABEL_1943;
              }
              int v693 = v28[v12];
              if (v30 > v693) {
                goto LABEL_1943;
              }
              goto LABEL_2148;
            }
            if (v31 < v382)
            {
              int v633 = v28[v13];
              if (v30 > v633 || v31 >= v633) {
                goto LABEL_1943;
              }
              int v635 = v28[v22];
              if (v30 > v635 || v31 >= v635) {
                goto LABEL_1943;
              }
              goto LABEL_1732;
            }
            int v738 = v28[v20];
            if (v30 > v738 || v31 >= v738) {
              goto LABEL_1943;
            }
            int v740 = v28[v13];
            if (v30 > v740 || v31 >= v740) {
              goto LABEL_1943;
            }
LABEL_2112:
            int v495 = v28[v12];
LABEL_2113:
            if (v30 > v495 || v31 >= v495) {
              goto LABEL_1943;
            }
            int v637 = v28[v22];
LABEL_2116:
            if (v30 > v637 || v31 >= v637) {
              goto LABEL_1943;
            }
            goto LABEL_2268;
          }
          if (v31 >= v381)
          {
            int v671 = v28[v13];
            if (v30 > v671 || v31 >= v671) {
              goto LABEL_1943;
            }
            int v673 = v28[v20];
            if (v30 > v673)
            {
              int v674 = v28[v14];
              if (v30 > v674 || v31 >= v674) {
                goto LABEL_1943;
              }
              goto LABEL_2112;
            }
            if (v31 < v673) {
              goto LABEL_2112;
            }
            int v818 = v28[v14];
            if (v30 > v818) {
              goto LABEL_1943;
            }
            if (v31 >= v818) {
              goto LABEL_1943;
            }
            int v819 = v28[v22];
            if (v30 > v819 || v31 >= v819) {
              goto LABEL_1943;
            }
LABEL_1732:
            int v637 = v28[v12];
            goto LABEL_2116;
          }
          int v570 = v28[v11];
          if (v30 > v570 || v31 >= v570) {
            goto LABEL_1943;
          }
          int v572 = v28[v22];
          if (v30 > v572 || v31 >= v572) {
            goto LABEL_1943;
          }
          int v574 = v28[v20];
          if (v30 > v574)
          {
            int v575 = v28[v14];
            if (v30 > v575) {
              goto LABEL_1943;
            }
            if (v31 >= v575) {
              goto LABEL_1943;
            }
            int v576 = v28[v12];
            if (v30 > v576 || v31 >= v576) {
              goto LABEL_1943;
            }
            goto LABEL_2239;
          }
          if (v31 < v574)
          {
            int v792 = v28[v12];
            if (v30 <= v792 && v31 < v792) {
              goto LABEL_1907;
            }
            int v769 = v28[v18];
            goto LABEL_2157;
          }
          int v831 = v28[v14];
          if (v30 > v831 || v31 >= v831) {
            goto LABEL_1943;
          }
          int v802 = v28[v13];
LABEL_2255:
          if (v30 > v802 || v31 >= v802) {
            goto LABEL_1943;
          }
          goto LABEL_1197;
        }
        if (v31 >= v60)
        {
          int v243 = v28[v22];
          if (v30 > v243 || v31 >= v243) {
            goto LABEL_1943;
          }
          int v245 = v28[v10];
          if (v30 > v245)
          {
            int v246 = v28[v17];
            if (v30 > v246 || v31 >= v246) {
              goto LABEL_1943;
            }
            int v248 = v28[v11];
            if (v30 > v248 || v31 >= v248) {
              goto LABEL_1943;
            }
            int v250 = v28[v19];
            if (v30 > v250 || v31 >= v250) {
              goto LABEL_1943;
            }
            int v252 = v28[v20];
            if (v30 > v252 || v31 >= v252) {
              goto LABEL_1943;
            }
            int v254 = v28[v18];
            if (v30 > v254 || v31 >= v254) {
              goto LABEL_1943;
            }
LABEL_1468:
            int v556 = v28[v21];
LABEL_1469:
            if (v30 > v556) {
              goto LABEL_1943;
            }
LABEL_1470:
            if (v31 >= v556) {
              goto LABEL_1943;
            }
LABEL_1508:
            int v231 = *(v28 - 3);
            goto LABEL_2277;
          }
          if (v31 >= v245)
          {
            int v546 = v28[v17];
            if (v30 > v546 || v31 >= v546) {
              goto LABEL_1943;
            }
            int v548 = v28[v18];
            if (v30 > v548 || v31 >= v548) {
              goto LABEL_1943;
            }
            int v550 = v28[v11];
            if (v30 > v550 || v31 >= v550) {
              goto LABEL_1943;
            }
            int v552 = v28[v20];
            if (v30 > v552 || v31 >= v552) {
              goto LABEL_1943;
            }
            int v554 = v28[v19];
            if (v30 > v554 || v31 >= v554) {
              goto LABEL_1943;
            }
            goto LABEL_1468;
          }
          int v399 = v28[v21];
          if (v30 > v399)
          {
            int v400 = v28[v16];
            if (v30 > v400 || v31 >= v400) {
              goto LABEL_1943;
            }
            int v402 = v28[v14];
            if (v30 > v402 || v31 >= v402) {
              goto LABEL_1943;
            }
            int v404 = v28[v13];
            if (v30 > v404 || v31 >= v404) {
              goto LABEL_1943;
            }
            int v406 = v28[v11];
            if (v30 > v406 || v31 >= v406) {
              goto LABEL_1943;
            }
            goto LABEL_1197;
          }
          if (v31 >= v399)
          {
            int v684 = v28[v16];
            if (v30 > v684 || v31 >= v684) {
              goto LABEL_1943;
            }
            int v686 = v28[v14];
            if (v30 > v686 || v31 >= v686) {
              goto LABEL_1943;
            }
            int v688 = v28[v13];
            if (v30 > v688 || v31 >= v688) {
              goto LABEL_1943;
            }
            goto LABEL_2265;
          }
          int v582 = v28[v11];
          if (v30 > v582 || v31 >= v582) {
            goto LABEL_1943;
          }
          int v584 = v28[v20];
          if (v30 > v584)
          {
            int v585 = v28[v14];
            if (v30 > v585 || v31 >= v585) {
              goto LABEL_1943;
            }
            int v587 = v28[v12];
            if (v30 > v587 || v31 >= v587) {
              goto LABEL_1943;
            }
            goto LABEL_2239;
          }
          if (v31 >= v584)
          {
            int v806 = v28[v14];
            if (v30 > v806) {
              goto LABEL_1943;
            }
            if (v31 >= v806) {
              goto LABEL_1943;
            }
            int v807 = v28[v13];
            if (v30 > v807 || v31 >= v807) {
              goto LABEL_1943;
            }
            goto LABEL_1197;
          }
          int v772 = v28[v12];
          if (v30 <= v772)
          {
            if (v31 < v772)
            {
              int v827 = *(v28 - 3);
              if (v30 <= v827 && v31 < v827) {
                goto LABEL_1907;
              }
LABEL_2239:
              int v231 = v28[v13];
              goto LABEL_2277;
            }
            int v848 = v28[v18];
            if (v30 > v848 || v31 >= v848) {
              goto LABEL_1943;
            }
          }
          else
          {
            int v773 = v28[v18];
            if (v30 > v773 || v31 >= v773) {
              goto LABEL_1943;
            }
          }
          int v556 = v28[v19];
          goto LABEL_1469;
        }
        int v142 = v28[v14];
        if (v30 > v142)
        {
          int v143 = v28[v20];
          if (v30 > v143 || v31 >= v143) {
            goto LABEL_1943;
          }
          int v145 = v28[v21];
          if (v30 > v145 || v31 >= v145) {
            goto LABEL_1943;
          }
          int v147 = v28[v22];
          if (v30 > v147 || v31 >= v147) {
            goto LABEL_1943;
          }
          int v149 = *(v28 - 3);
          if (v30 > v149)
          {
            int v150 = v28[v13];
            if (v30 > v150 || v31 >= v150) {
              goto LABEL_1943;
            }
            int v152 = v28[v10];
            if (v30 > v152 || v31 >= v152) {
              goto LABEL_1943;
            }
            int v154 = v28[v12];
            if (v30 > v154 || v31 >= v154) {
              goto LABEL_1943;
            }
            goto LABEL_2268;
          }
          if (v31 >= v149)
          {
            int v734 = v28[v13];
            if (v30 > v734 || v31 >= v734) {
              goto LABEL_1943;
            }
          }
          else
          {
            int v627 = v28[v18];
            if (v30 <= v627)
            {
              if (v31 < v627)
              {
                int v628 = v28[v19];
                if (v30 <= v628 && v31 < v628)
                {
                  int v629 = v28[v17];
                  if (v30 <= v629 && v31 < v629) {
                    goto LABEL_1907;
                  }
                  int v630 = v28[v10];
                  goto LABEL_2266;
                }
              }
              int v791 = v28[v10];
              if (v30 > v791 || v31 >= v791) {
                goto LABEL_1943;
              }
LABEL_2146:
              int v630 = v28[v12];
              goto LABEL_2266;
            }
          }
          int v736 = v28[v10];
          if (v30 > v736 || v31 >= v736) {
            goto LABEL_1943;
          }
          goto LABEL_2146;
        }
        if (v31 >= v142)
        {
          int v435 = v28[v21];
          if (v30 > v435 || v31 >= v435) {
            goto LABEL_1943;
          }
          int v437 = v28[v20];
          if (v30 > v437 || v31 >= v437) {
            goto LABEL_1943;
          }
          int v439 = v28[v22];
          if (v30 > v439 || v31 >= v439) {
            goto LABEL_1943;
          }
          int v441 = *(v28 - 3);
          if (v30 > v441)
          {
            int v442 = v28[v13];
            if (v30 > v442 || v31 >= v442) {
              goto LABEL_1943;
            }
            int v444 = v28[v10];
            if (v30 > v444 || v31 >= v444) {
              goto LABEL_1943;
            }
            goto LABEL_2265;
          }
          if (v31 >= v441)
          {
            int v781 = v28[v13];
            if (v30 > v781 || v31 >= v781) {
              goto LABEL_1943;
            }
            int v783 = v28[v10];
            if (v30 > v783 || v31 >= v783) {
              goto LABEL_1943;
            }
            goto LABEL_2265;
          }
          int v722 = v28[v18];
          if (v30 <= v722)
          {
            if (v31 >= v722)
            {
              int v833 = v28[v10];
              if (v30 > v833 || v31 >= v833) {
                goto LABEL_1943;
              }
              goto LABEL_2265;
            }
            int v798 = v28[v19];
            if (v30 > v798)
            {
              int v799 = v28[v10];
              if (v30 > v799 || v31 >= v799) {
                goto LABEL_1943;
              }
              goto LABEL_2265;
            }
            if (v31 >= v798)
            {
              int v864 = v28[v10];
              if (v30 > v864 || v31 >= v864) {
                goto LABEL_1943;
              }
              goto LABEL_2265;
            }
            int v840 = v28[v17];
            if (v30 <= v840 && v31 < v840) {
              goto LABEL_1907;
            }
            int v630 = v28[v10];
          }
          else
          {
            int v723 = v28[v10];
            if (v30 > v723 || v31 >= v723) {
              goto LABEL_1943;
            }
LABEL_2265:
            int v630 = v28[v12];
          }
LABEL_2266:
          if (v30 > v630 || v31 >= v630) {
            goto LABEL_1943;
          }
          goto LABEL_2268;
        }
        int v299 = v28[v10];
        if (v30 <= v299)
        {
          if (v31 >= v299)
          {
            int v610 = v28[v18];
            if (v30 > v610 || v31 >= v610) {
              goto LABEL_1943;
            }
            int v612 = v28[v19];
            if (v30 > v612 || v31 >= v612) {
              goto LABEL_1943;
            }
            int v614 = v28[v17];
            if (v30 > v614 || v31 >= v614) {
              goto LABEL_1943;
            }
            int v616 = *(v28 - 3);
            if (v30 <= v616)
            {
              if (v31 < v616)
              {
                int v793 = v28[v13];
                if (v30 <= v793)
                {
                  if (v31 < v793)
                  {
                    int v838 = v28[v16];
                    if (v30 <= v838)
                    {
                      if (v31 < v838) {
                        goto LABEL_1907;
                      }
                      int v869 = v28[v21];
                      if (v30 > v869 || v31 >= v869) {
                        goto LABEL_1943;
                      }
                    }
                    else
                    {
                      int v839 = v28[v21];
                      if (v30 > v839 || v31 >= v839) {
                        goto LABEL_1943;
                      }
                    }
                    int v826 = v28[v20];
                    if (v30 > v826) {
                      goto LABEL_1943;
                    }
                    goto LABEL_2250;
                  }
                  int v862 = v28[v21];
                  if (v30 > v862) {
                    goto LABEL_1943;
                  }
                  if (v31 >= v862) {
                    goto LABEL_1943;
                  }
                  int v863 = v28[v20];
                  if (v30 > v863 || v31 >= v863) {
                    goto LABEL_1943;
                  }
LABEL_2357:
                  int v796 = v28[v22];
                  if (v30 > v796) {
                    goto LABEL_2262;
                  }
                }
                else
                {
                  int v794 = v28[v21];
                  if (v30 > v794) {
                    goto LABEL_1943;
                  }
                  if (v31 >= v794) {
                    goto LABEL_1943;
                  }
                  int v795 = v28[v20];
                  if (v30 > v795 || v31 >= v795) {
                    goto LABEL_1943;
                  }
LABEL_2166:
                  int v796 = v28[v22];
                  if (v30 > v796)
                  {
                    int v797 = v28[v16];
                    goto LABEL_2398;
                  }
                }
                if (v31 < v796) {
                  goto LABEL_1907;
                }
                goto LABEL_2262;
              }
              int v832 = v28[v12];
              if (v30 > v832 || v31 >= v832) {
                goto LABEL_1943;
              }
            }
            else
            {
              int v617 = v28[v12];
              if (v30 > v617 || v31 >= v617) {
                goto LABEL_1943;
              }
            }
            int v521 = v28[v13];
            if (v30 > v521) {
              goto LABEL_1943;
            }
            goto LABEL_2261;
          }
          int v511 = v28[v13];
          if (v30 > v511)
          {
            int v512 = *(v28 - 3);
            if (v30 > v512 || v31 >= v512) {
              goto LABEL_1943;
            }
            int v514 = v28[v21];
            if (v30 > v514 || v31 >= v514) {
              goto LABEL_1943;
            }
            int v516 = v28[v20];
            if (v30 > v516 || v31 >= v516) {
              goto LABEL_1943;
            }
            int v518 = v28[v22];
            if (v30 > v518)
            {
              int v519 = v28[v19];
              if (v30 > v519) {
                goto LABEL_1943;
              }
              if (v31 >= v519) {
                goto LABEL_1943;
              }
              int v520 = v28[v18];
              if (v30 > v520 || v31 >= v520) {
                goto LABEL_1943;
              }
              int v521 = v28[v17];
              goto LABEL_2184;
            }
            if (v31 < v518)
            {
              int v820 = v28[v12];
              if (v30 > v820)
              {
                int v821 = v28[v19];
                if (v30 > v821) {
                  goto LABEL_1943;
                }
                if (v31 >= v821) {
                  goto LABEL_1943;
                }
                int v822 = v28[v18];
                if (v30 > v822) {
                  goto LABEL_1943;
                }
                goto LABEL_2394;
              }
              if (v31 >= v820)
              {
                int v872 = v28[v19];
                if (v30 > v872) {
                  goto LABEL_1943;
                }
                if (v31 >= v872) {
                  goto LABEL_1943;
                }
                int v822 = v28[v18];
                if (v30 > v822) {
                  goto LABEL_1943;
                }
LABEL_2394:
                if (v31 >= v822) {
                  goto LABEL_1943;
                }
LABEL_2395:
                int v873 = v28[v17];
                if (v30 <= v873 && v31 < v873) {
                  goto LABEL_1907;
                }
LABEL_2397:
                int v797 = v28[v11];
                goto LABEL_2398;
              }
              int v856 = v28[v11];
              if (v30 > v856)
              {
                int v857 = v28[v19];
                if (v30 > v857) {
                  goto LABEL_1943;
                }
                if (v31 >= v857) {
                  goto LABEL_1943;
                }
                int v858 = v28[v17];
                if (v30 > v858 || v31 >= v858) {
                  goto LABEL_1943;
                }
                int v231 = v28[v18];
                goto LABEL_2277;
              }
              if (v31 < v856) {
                goto LABEL_1907;
              }
              int v875 = v28[v19];
              if (v30 > v875 || v31 >= v875) {
                goto LABEL_1943;
              }
LABEL_2411:
              int v843 = v28[v18];
              goto LABEL_2301;
            }
            int v841 = v28[v19];
            if (v30 > v841) {
              goto LABEL_1943;
            }
            if (v31 >= v841) {
              goto LABEL_1943;
            }
            int v842 = v28[v18];
            if (v30 > v842 || v31 >= v842) {
              goto LABEL_1943;
            }
LABEL_2300:
            int v843 = v28[v16];
            goto LABEL_2301;
          }
          if (v31 >= v511)
          {
            int v758 = v28[v20];
            if (v30 > v758 || v31 >= v758) {
              goto LABEL_1943;
            }
            int v760 = v28[v21];
            if (v30 > v760 || v31 >= v760) {
              goto LABEL_1943;
            }
            int v762 = *(v28 - 3);
            if (v30 > v762 || v31 >= v762) {
              goto LABEL_1943;
            }
            int v763 = v28[v22];
            if (v30 > v763)
            {
              int v764 = v28[v19];
              if (v30 > v764) {
                goto LABEL_1943;
              }
              if (v31 >= v764) {
                goto LABEL_1943;
              }
              int v765 = v28[v18];
              if (v30 > v765 || v31 >= v765) {
                goto LABEL_1943;
              }
              goto LABEL_2300;
            }
            if (v31 >= v763)
            {
              int v860 = v28[v19];
              if (v30 > v860) {
                goto LABEL_1943;
              }
              if (v31 >= v860) {
                goto LABEL_1943;
              }
              int v861 = v28[v18];
              if (v30 > v861 || v31 >= v861) {
                goto LABEL_1943;
              }
              int v843 = v28[v16];
              goto LABEL_2301;
            }
            int v835 = v28[v12];
            if (v30 > v835)
            {
              int v836 = v28[v18];
              if (v30 > v836) {
                goto LABEL_1943;
              }
              if (v31 >= v836) {
                goto LABEL_1943;
              }
              int v837 = v28[v19];
              if (v30 > v837 || v31 >= v837) {
                goto LABEL_1943;
              }
              goto LABEL_2395;
            }
            if (v31 < v835)
            {
              int v867 = v28[v11];
              if (v30 > v867)
              {
                int v868 = v28[v19];
                if (v30 > v868 || v31 >= v868) {
                  goto LABEL_1943;
                }
                goto LABEL_2411;
              }
              if (v31 < v867) {
                goto LABEL_1907;
              }
              int v882 = v28[v19];
              if (v30 > v882 || v31 >= v882) {
                goto LABEL_1943;
              }
              int v843 = v28[v18];
LABEL_2301:
              if (v30 > v843 || v31 >= v843) {
                goto LABEL_1943;
              }
              goto LABEL_2034;
            }
            int v878 = v28[v18];
            if (v30 > v878) {
              goto LABEL_1943;
            }
            if (v31 >= v878) {
              goto LABEL_1943;
            }
            int v879 = v28[v19];
            if (v30 > v879 || v31 >= v879) {
              goto LABEL_1943;
            }
            int v880 = v28[v17];
            if (v30 > v880) {
              goto LABEL_2397;
            }
            if (v31 < v880) {
              goto LABEL_1907;
            }
LABEL_2268:
            int v231 = v28[v11];
            goto LABEL_2277;
          }
          int v656 = v28[v12];
          if (v30 <= v656)
          {
            if (v31 >= v656)
            {
              int v811 = v28[v19];
              if (v30 > v811) {
                goto LABEL_1943;
              }
              if (v31 >= v811) {
                goto LABEL_1943;
              }
              int v812 = v28[v18];
              if (v30 > v812) {
                goto LABEL_1943;
              }
              if (v31 >= v812) {
                goto LABEL_1943;
              }
              int v813 = *(v28 - 3);
              if (v30 > v813 || v31 >= v813) {
                goto LABEL_1943;
              }
              int v814 = v28[v17];
              if (v30 > v814)
              {
                int v815 = v28[v20];
                if (v30 > v815) {
                  goto LABEL_1943;
                }
                if (v31 >= v815) {
                  goto LABEL_1943;
                }
                int v816 = v28[v21];
                if (v30 > v816 || v31 >= v816) {
                  goto LABEL_1943;
                }
                int v817 = v28[v11];
LABEL_2373:
                if (v30 > v817 || v31 >= v817) {
                  goto LABEL_1943;
                }
                goto LABEL_2375;
              }
              if (v31 >= v814)
              {
                int v876 = v28[v20];
                if (v30 > v876) {
                  goto LABEL_1943;
                }
                if (v31 >= v876) {
                  goto LABEL_1943;
                }
                int v877 = v28[v21];
                if (v30 > v877 || v31 >= v877) {
                  goto LABEL_1943;
                }
                goto LABEL_2416;
              }
              int v865 = v28[v16];
              if (v30 > v865)
              {
                int v866 = v28[v21];
                if (v30 > v866 || v31 >= v866) {
                  goto LABEL_1943;
                }
                int v817 = v28[v20];
                goto LABEL_2373;
              }
              if (v31 < v865) {
                goto LABEL_1907;
              }
              int v881 = v28[v20];
              if (v30 <= v881 && v31 < v881) {
                goto LABEL_2248;
              }
            }
            else
            {
              int v776 = v28[v11];
              if (v30 > v776)
              {
                int v777 = v28[v18];
                if (v30 > v777) {
                  goto LABEL_1943;
                }
                if (v31 >= v777) {
                  goto LABEL_1943;
                }
                int v778 = v28[v17];
                if (v30 > v778 || v31 >= v778) {
                  goto LABEL_1943;
                }
                int v779 = v28[v16];
                if (v30 <= v779)
                {
                  if (v31 < v779) {
                    goto LABEL_1907;
                  }
                  if (v31 >= *(v28 - 3) || v31 >= v28[v21] || v31 >= v28[v19]) {
                    goto LABEL_1943;
                  }
                  int v797 = v28[v20];
                }
                else
                {
                  if (v31 >= v28[v20] || v31 >= v28[v21]) {
                    goto LABEL_1943;
                  }
                  int v780 = v28[v19];
LABEL_2328:
                  if (v31 >= v780) {
                    goto LABEL_1943;
                  }
                  int v797 = *(v28 - 3);
                }
                goto LABEL_2398;
              }
              if (v31 < v776)
              {
                int v830 = v28[v16];
                if (v30 <= v830 && v31 < v830) {
                  goto LABEL_1907;
                }
LABEL_2248:
                int v826 = v28[v21];
                goto LABEL_2249;
              }
              int v850 = v28[v18];
              if (v30 > v850) {
                goto LABEL_1943;
              }
              if (v31 >= v850) {
                goto LABEL_1943;
              }
              int v851 = v28[v17];
              if (v30 > v851 || v31 >= v851) {
                goto LABEL_1943;
              }
              int v852 = v28[v16];
              if (v30 > v852)
              {
                if (v31 >= v28[v20] || v31 >= v28[v19]) {
                  goto LABEL_1943;
                }
                int v780 = v28[v21];
                goto LABEL_2328;
              }
              if (v31 < v852) {
                goto LABEL_1907;
              }
              if (v31 < v28[v20] && v31 < v28[v21])
              {
                int v855 = v28[v19];
LABEL_2335:
                if (v31 >= v855) {
                  goto LABEL_1943;
                }
LABEL_2375:
                int v797 = v28[v22];
LABEL_2398:
                if (v31 < v797) {
                  goto LABEL_1907;
                }
              }
            }
          }
          else
          {
            int v657 = *(v28 - 3);
            if (v30 > v657 || v31 >= v657) {
              goto LABEL_1943;
            }
            int v659 = v28[v18];
            if (v30 > v659) {
              goto LABEL_1943;
            }
            if (v31 >= v659) {
              goto LABEL_1943;
            }
            int v660 = v28[v19];
            if (v30 > v660 || v31 >= v660) {
              goto LABEL_1943;
            }
            int v661 = v28[v17];
            if (v30 > v661)
            {
              int v662 = v28[v20];
              if (v30 > v662) {
                goto LABEL_1943;
              }
              if (v31 >= v662) {
                goto LABEL_1943;
              }
              int v663 = v28[v21];
              if (v30 > v663 || v31 >= v663) {
                goto LABEL_1943;
              }
              int v630 = v28[v22];
              goto LABEL_2266;
            }
            if (v31 >= v661)
            {
              int v870 = v28[v20];
              if (v30 > v870) {
                goto LABEL_1943;
              }
              if (v31 >= v870) {
                goto LABEL_1943;
              }
              int v871 = v28[v21];
              if (v30 > v871 || v31 >= v871) {
                goto LABEL_1943;
              }
LABEL_2416:
              int v826 = v28[v11];
LABEL_2249:
              if (v30 > v826) {
                goto LABEL_1943;
              }
LABEL_2250:
              if (v31 >= v826) {
                goto LABEL_1943;
              }
LABEL_2152:
              int v231 = v28[v22];
              goto LABEL_2277;
            }
            int v853 = v28[v16];
            if (v30 > v853)
            {
              int v854 = v28[v20];
              if (v30 > v854 || v31 >= v854) {
                goto LABEL_1943;
              }
              int v855 = v28[v21];
              goto LABEL_2335;
            }
            if (v31 < v853) {
              goto LABEL_1907;
            }
            int v874 = v28[v20];
            if (v30 <= v874 && v31 < v874) {
              goto LABEL_2248;
            }
          }
        }
        else
        {
          int v300 = v28[v19];
          if (v30 > v300 || v31 >= v300) {
            goto LABEL_1943;
          }
          int v302 = v28[v18];
          if (v30 > v302 || v31 >= v302) {
            goto LABEL_1943;
          }
          int v304 = v28[v17];
          if (v30 > v304 || v31 >= v304) {
            goto LABEL_1943;
          }
          int v306 = *(v28 - 3);
          if (v30 > v306)
          {
            int v307 = v28[v12];
            if (v30 > v307 || v31 >= v307) {
              goto LABEL_1943;
            }
            goto LABEL_2183;
          }
          if (v31 >= v306)
          {
            int v803 = v28[v12];
            if (v30 > v803 || v31 >= v803) {
              goto LABEL_1943;
            }
LABEL_2183:
            int v521 = v28[v13];
LABEL_2184:
            if (v30 > v521) {
              goto LABEL_1943;
            }
LABEL_2261:
            if (v31 >= v521) {
              goto LABEL_1943;
            }
LABEL_2262:
            int v231 = v28[v16];
            goto LABEL_2277;
          }
          int v766 = v28[v13];
          if (v30 > v766)
          {
            int v767 = v28[v21];
            if (v30 > v767) {
              goto LABEL_1943;
            }
            if (v31 >= v767) {
              goto LABEL_1943;
            }
            int v768 = v28[v20];
            if (v30 > v768 || v31 >= v768) {
              goto LABEL_1943;
            }
            goto LABEL_2166;
          }
          if (v31 >= v766)
          {
            int v846 = v28[v21];
            if (v30 > v846) {
              goto LABEL_1943;
            }
            if (v31 >= v846) {
              goto LABEL_1943;
            }
            int v847 = v28[v20];
            if (v30 > v847 || v31 >= v847) {
              goto LABEL_1943;
            }
            goto LABEL_2357;
          }
          int v824 = v28[v16];
          if (v30 <= v824 && v31 < v824) {
            goto LABEL_1907;
          }
          int v825 = v28[v21];
          if (v30 <= v825 && v31 < v825)
          {
            int v826 = v28[v20];
            goto LABEL_2249;
          }
        }
      }
      else
      {
        int v33 = v28[v9];
        if (v30 <= v33)
        {
          if (v31 < v33)
          {
            int v47 = v28[v18];
            if (v30 <= v47)
            {
              if (v31 >= v47)
              {
                int v158 = v28[v11];
                if (v30 > v158) {
                  goto LABEL_801;
                }
                if (v31 >= v158) {
                  goto LABEL_1943;
                }
                int v159 = v28[v12];
                if (v30 > v159 || v31 >= v159) {
                  goto LABEL_1943;
                }
                int v161 = v28[v19];
                if (v30 > v161 || v31 >= v161) {
                  goto LABEL_1943;
                }
                int v163 = *(v28 - 3);
                if (v30 > v163 || v31 >= v163) {
                  goto LABEL_1943;
                }
                int v165 = v28[v10];
                if (v30 > v165 || v31 >= v165) {
                  goto LABEL_1943;
                }
                int v167 = v28[v21];
                if (v30 > v167 || v31 >= v167) {
                  goto LABEL_1943;
                }
                int v169 = v28[v20];
              }
              else
              {
                int v87 = v28[v20];
                if (v30 > v87)
                {
                  if (v30 <= v28[v11] || v30 <= v28[v17] || v30 <= v28[v14] || v30 <= v28[v10]) {
                    goto LABEL_1943;
                  }
                  int v88 = v28[v16];
LABEL_1055:
                  if (v30 <= v88) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1056;
                }
                if (v31 >= v87)
                {
                  if (v30 <= v28[v11]) {
                    goto LABEL_1943;
                  }
LABEL_801:
                  if (v30 <= v28[v17] || v30 <= v28[v14] || v30 <= v28[v10]) {
                    goto LABEL_1943;
                  }
                  int v275 = v28[v16];
                  goto LABEL_805;
                }
                int v211 = v28[v15];
                if (v30 <= v211)
                {
                  if (v31 >= v211)
                  {
                    int v537 = v28[v11];
                    if (v30 > v537 || v31 >= v537) {
                      goto LABEL_1943;
                    }
                    int v539 = *(v28 - 3);
                    if (v30 > v539 || v31 >= v539) {
                      goto LABEL_1943;
                    }
                    int v541 = v28[v21];
                    if (v30 > v541 || v31 >= v541) {
                      goto LABEL_1943;
                    }
                    int v543 = v28[v17];
                    if (v30 <= v543)
                    {
                      if (v31 >= v543)
                      {
                        int v771 = v28[v10];
                        if (v30 > v771 || v31 >= v771) {
                          goto LABEL_1943;
                        }
                      }
                    }
                    else
                    {
                      int v544 = v28[v10];
                      if (v30 > v544 || v31 >= v544) {
                        goto LABEL_1943;
                      }
                    }
                    int v202 = v28[v19];
                    goto LABEL_2150;
                  }
                  int v389 = *(v28 - 3);
                  if (v30 > v389 || v31 >= v389) {
                    goto LABEL_1943;
                  }
                  int v391 = v28[v21];
                  if (v30 <= v391)
                  {
                    if (v31 < v391)
                    {
                      int v642 = v28[v19];
                      if (v30 > v642 || v31 >= v642) {
                        goto LABEL_1943;
                      }
                      int v644 = v28[v17];
                      if (v30 <= v644 && v31 < v644)
                      {
                        int v645 = v28[v22];
                        if (v30 <= v645 && v31 < v645) {
                          goto LABEL_1907;
                        }
                        int v371 = v28[v14];
                        goto LABEL_1769;
                      }
                      int v693 = v28[v10];
                      if (v30 > v693) {
                        goto LABEL_1943;
                      }
LABEL_2148:
                      if (v31 >= v693) {
                        goto LABEL_1943;
                      }
                      goto LABEL_2149;
                    }
                    int v747 = v28[v13];
                    if (v30 > v747 || v31 >= v747) {
                      goto LABEL_1943;
                    }
                    int v749 = v28[v14];
                    if (v30 > v749 || v31 >= v749) {
                      goto LABEL_1943;
                    }
                    int v751 = v28[v19];
                    if (v30 > v751 || v31 >= v751) {
                      goto LABEL_1943;
                    }
                    int v398 = v28[v16];
                  }
                  else
                  {
                    int v392 = v28[v13];
                    if (v30 > v392 || v31 >= v392) {
                      goto LABEL_1943;
                    }
                    int v394 = v28[v14];
                    if (v30 > v394 || v31 >= v394) {
                      goto LABEL_1943;
                    }
                    int v396 = v28[v16];
                    if (v30 > v396 || v31 >= v396) {
                      goto LABEL_1943;
                    }
                    int v398 = v28[v19];
                  }
                  if (v30 > v398 || v31 >= v398) {
                    goto LABEL_1943;
                  }
                  goto LABEL_2034;
                }
                int v212 = v28[v10];
                if (v30 > v212)
                {
                  int v213 = v28[v11];
                  if (v30 > v213)
                  {
                    if (v30 <= v28[v17] || v30 <= v28[v14] || v30 <= v28[v13]) {
                      goto LABEL_1943;
                    }
                    int v214 = v28[v12];
                    goto LABEL_1512;
                  }
                  if (v31 >= v213) {
                    goto LABEL_1943;
                  }
                  int v559 = v28[v17];
                  if (v30 > v559 || v31 >= v559) {
                    goto LABEL_1943;
                  }
                  int v561 = v28[v21];
                  if (v30 > v561 || v31 >= v561) {
                    goto LABEL_1943;
                  }
                  int v563 = v28[v19];
                  if (v30 > v563 || v31 >= v563) {
                    goto LABEL_1943;
                  }
                  int v434 = v28[v22];
LABEL_1506:
                  if (v30 > v434 || v31 >= v434) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1508;
                }
                if (v31 >= v212)
                {
                  int v595 = v28[v17];
                  if (v30 > v595 || v31 >= v595) {
                    goto LABEL_1943;
                  }
                  int v597 = v28[v11];
                  if (v30 > v597 || v31 >= v597) {
                    goto LABEL_1943;
                  }
                  int v599 = v28[v21];
                  if (v30 > v599 || v31 >= v599) {
                    goto LABEL_1943;
                  }
                  int v482 = v28[v19];
                  goto LABEL_1622;
                }
                int v483 = v28[v19];
                if (v30 > v483 || v31 >= v483) {
                  goto LABEL_1943;
                }
                int v485 = v28[v21];
                if (v30 > v485 || v31 >= v485) {
                  goto LABEL_1943;
                }
                int v487 = v28[v11];
                if (v30 > v487 || v31 >= v487) {
                  goto LABEL_1943;
                }
                int v169 = *(v28 - 3);
              }
            }
            else
            {
              int v48 = v28[v16];
              if (v30 > v48)
              {
                int v49 = v28[v17];
                if (v30 > v49)
                {
                  int v50 = *(v28 - 3);
                  if (v30 > v50)
                  {
                    if (v30 <= v28[v14])
                    {
                      if (v30 <= v28[v22] || v30 <= v28[v21]) {
                        goto LABEL_1943;
                      }
                    }
                    else
                    {
                      int v51 = v28[v13];
                      if (v30 > v51)
                      {
                        if (v30 <= v28[v15]) {
                          goto LABEL_1943;
                        }
                        if (v30 > v28[v19]) {
                          goto LABEL_1907;
                        }
                        if (v30 <= v28[v10]) {
                          goto LABEL_1943;
                        }
                        goto LABEL_1874;
                      }
                      int v466 = v28[v21];
                      if (v31 < v51)
                      {
                        if (v30 <= v466 || v30 <= v28[v19]) {
                          goto LABEL_1943;
                        }
                        int v324 = v28[v20];
                        goto LABEL_1885;
                      }
                      if (v30 <= v466) {
                        goto LABEL_1943;
                      }
                    }
                    if (v30 <= v28[v20]) {
                      goto LABEL_1943;
                    }
LABEL_1701:
                    int v324 = v28[v19];
                    goto LABEL_1885;
                  }
                  if (v31 >= v50)
                  {
                    if (v30 <= v28[v12] || v30 <= v28[v14] || v30 <= v28[v19] && v30 <= v28[v10]) {
                      goto LABEL_1943;
                    }
                    goto LABEL_1058;
                  }
                  int v269 = v28[v10];
                  if (v30 > v269)
                  {
                    int v88 = v28[v14];
                    goto LABEL_1055;
                  }
                  int v490 = v28[v19];
                  if (v31 >= v269)
                  {
                    if (v30 <= v490) {
                      goto LABEL_1943;
                    }
LABEL_1629:
                    if (v30 <= v28[v12]) {
                      goto LABEL_1943;
                    }
                    int v411 = v28[v14];
                    goto LABEL_1057;
                  }
                  if (v30 > v490) {
                    goto LABEL_1629;
                  }
                  if (v31 >= v490) {
                    goto LABEL_1943;
                  }
                  int v491 = v28[v12];
                  if (v30 > v491 || v31 >= v491) {
                    goto LABEL_1943;
                  }
                  int v493 = v28[v21];
                  if (v30 > v493 || v31 >= v493) {
                    goto LABEL_1943;
                  }
                  int v495 = v28[v20];
                  goto LABEL_2113;
                }
                int v189 = v28[v12];
                BOOL v191 = v30 <= v189 && v31 < v189;
                if (v31 < v49)
                {
                  if (!v191) {
                    goto LABEL_1943;
                  }
                  int v192 = v28[v19];
                  if (v30 > v192 || v31 >= v192) {
                    goto LABEL_1943;
                  }
                  int v194 = *(v28 - 3);
                  if (v30 > v194 || v31 >= v194) {
                    goto LABEL_1943;
                  }
                  int v196 = v28[v10];
                  if (v30 > v196 || v31 >= v196) {
                    goto LABEL_1943;
                  }
                  int v198 = v28[v21];
                  if (v30 > v198 || v31 >= v198) {
                    goto LABEL_1943;
                  }
                  int v200 = v28[v11];
                  if (v30 > v200 || v31 >= v200) {
                    goto LABEL_1943;
                  }
                  int v202 = v28[v20];
                  goto LABEL_2150;
                }
                if (!v191) {
                  goto LABEL_1943;
                }
                int v311 = v28[v19];
                if (v30 > v311 || v31 >= v311) {
                  goto LABEL_1943;
                }
                int v313 = *(v28 - 3);
                if (v30 > v313 || v31 >= v313) {
                  goto LABEL_1943;
                }
                int v315 = v28[v10];
                if (v30 > v315 || v31 >= v315) {
                  goto LABEL_1943;
                }
                int v317 = v28[v21];
                if (v30 > v317 || v31 >= v317) {
                  goto LABEL_1943;
                }
                int v319 = v28[v20];
                if (v30 > v319 || v31 >= v319) {
                  goto LABEL_1943;
                }
LABEL_2149:
                int v202 = v28[v11];
                goto LABEL_2150;
              }
              int v125 = v28[v12];
              BOOL v127 = v30 <= v125 && v31 < v125;
              if (v31 < v48)
              {
                if (!v127) {
                  goto LABEL_1943;
                }
                int v128 = v28[v19];
                if (v30 > v128 || v31 >= v128) {
                  goto LABEL_1943;
                }
                int v130 = v28[v21];
                if (v30 > v130 || v31 >= v130) {
                  goto LABEL_1943;
                }
                int v132 = v28[v10];
                if (v30 > v132 || v31 >= v132) {
                  goto LABEL_1943;
                }
                int v134 = *(v28 - 3);
                if (v30 > v134 || v31 >= v134) {
                  goto LABEL_1943;
                }
                int v136 = v28[v20];
                if (v30 > v136 || v31 >= v136) {
                  goto LABEL_1943;
                }
                int v138 = v28[v22];
LABEL_1314:
                if (v30 > v138 || v31 >= v138) {
                  goto LABEL_1943;
                }
                goto LABEL_2268;
              }
              if (!v127) {
                goto LABEL_1943;
              }
              int v232 = v28[v19];
              if (v30 > v232 || v31 >= v232) {
                goto LABEL_1943;
              }
              int v234 = *(v28 - 3);
              if (v30 > v234 || v31 >= v234) {
                goto LABEL_1943;
              }
              int v236 = v28[v10];
              if (v30 > v236 || v31 >= v236) {
                goto LABEL_1943;
              }
              int v238 = v28[v21];
              if (v30 > v238 || v31 >= v238) {
                goto LABEL_1943;
              }
              int v240 = v28[v20];
              if (v30 > v240 || v31 >= v240) {
                goto LABEL_1943;
              }
              int v169 = v28[v11];
            }
            if (v30 > v169 || v31 >= v169) {
              goto LABEL_1943;
            }
            goto LABEL_2152;
          }
          int v64 = v28[v17];
          if (v30 <= v64)
          {
            if (v31 >= v64) {
              goto LABEL_1943;
            }
            int v94 = v28[v16];
            if (v30 > v94 || v31 >= v94) {
              goto LABEL_1943;
            }
            int v96 = v28[v20];
            if (v30 > v96 || v31 >= v96) {
              goto LABEL_1943;
            }
            int v98 = *(v28 - 3);
            if (v30 > v98 || v31 >= v98) {
              goto LABEL_1943;
            }
            int v100 = v28[v21];
            if (v30 > v100)
            {
              int v101 = v28[v13];
              if (v30 > v101 || v31 >= v101) {
                goto LABEL_1943;
              }
              int v103 = v28[v14];
              if (v30 > v103 || v31 >= v103) {
                goto LABEL_1943;
              }
              int v105 = v28[v18];
              if (v30 > v105 || v31 >= v105) {
                goto LABEL_1943;
              }
              int v107 = v28[v19];
              goto LABEL_612;
            }
            if (v31 < v100)
            {
              int v469 = v28[v18];
              if (v30 > v469 || v31 >= v469) {
                goto LABEL_1943;
              }
              int v471 = v28[v15];
              if (v30 > v471 || v31 >= v471) {
                goto LABEL_1943;
              }
              int v473 = v28[v22];
              if (v30 > v473)
              {
                int v474 = v28[v14];
                if (v30 > v474 || v31 >= v474) {
                  goto LABEL_1943;
                }
                goto LABEL_2159;
              }
              if (v31 < v473)
              {
LABEL_2159:
                int v231 = v28[v19];
                goto LABEL_2277;
              }
              int v769 = v28[v14];
LABEL_2157:
              if (v30 > v769 || v31 >= v769) {
                goto LABEL_1943;
              }
              goto LABEL_2159;
            }
            int v589 = v28[v13];
            if (v30 > v589 || v31 >= v589) {
              goto LABEL_1943;
            }
            int v591 = v28[v14];
            if (v30 > v591 || v31 >= v591) {
              goto LABEL_1943;
            }
            int v593 = v28[v18];
            if (v30 > v593 || v31 >= v593) {
              goto LABEL_1943;
            }
LABEL_2273:
            int v683 = v28[v19];
LABEL_2274:
            if (v30 > v683 || v31 >= v683) {
              goto LABEL_1943;
            }
LABEL_2276:
            int v231 = v28[v15];
            goto LABEL_2277;
          }
          if (v30 <= v28[v16]) {
            goto LABEL_1943;
          }
          int v65 = v28[v14];
          if (v30 > v65)
          {
            int v66 = v28[v18];
            if (v30 <= v66)
            {
              int v274 = v28[v11];
              if (v31 >= v66)
              {
                if (v30 <= v274) {
                  goto LABEL_1943;
                }
                int v88 = v28[v10];
                goto LABEL_1055;
              }
              if (v30 <= v274) {
                goto LABEL_1943;
              }
              int v275 = v28[v10];
LABEL_805:
              if (v30 <= v275 || v30 <= v28[v13]) {
                goto LABEL_1943;
              }
              int v324 = v28[v12];
            }
            else
            {
              if (v30 > v28[v19])
              {
                if (v30 <= v28[v15]) {
                  goto LABEL_1943;
                }
                if (v30 > v28[v13])
                {
                  if (v30 > *(v28 - 3)) {
                    goto LABEL_1907;
                  }
                  goto LABEL_1874;
                }
                if (v30 <= v28[v21]) {
                  goto LABEL_1943;
                }
                int v273 = v28[v20];
LABEL_1479:
                if (v30 <= v273) {
                  goto LABEL_1943;
                }
                int v268 = *(v28 - 3);
LABEL_1906:
                if (v30 > v268) {
                  goto LABEL_1907;
                }
                goto LABEL_1943;
              }
              if (v30 <= v28[v10]) {
                goto LABEL_1943;
              }
LABEL_1056:
              int v411 = v28[v12];
LABEL_1057:
              if (v30 <= v411) {
                goto LABEL_1943;
              }
LABEL_1058:
              int v324 = v28[v13];
            }
LABEL_1885:
            if (v30 <= v324) {
              goto LABEL_1943;
            }
            goto LABEL_1886;
          }
          int v208 = v28[v22];
          if (v31 >= v65)
          {
            if (v30 <= v208 || v30 <= v28[v21] || v30 <= v28[v19]) {
              goto LABEL_1943;
            }
            int v209 = v28[v20];
          }
          else
          {
            if (v30 <= v208 || v30 <= v28[v20] || v30 <= v28[v19]) {
              goto LABEL_1943;
            }
            int v209 = v28[v21];
          }
          if (v30 > v209 && v30 > v28[v18])
          {
            int v324 = *(v28 - 3);
            goto LABEL_1885;
          }
        }
        else
        {
          int v34 = v28[v15];
          if (v30 > v34)
          {
            int v35 = v28[v14];
            if (v30 > v35)
            {
              int v36 = v28[v10];
              if (v30 > v36)
              {
                int v37 = v28[v13];
                if (v30 > v37)
                {
                  int v38 = v28[v12];
                  if (v30 > v38)
                  {
                    int v39 = v28[v11];
                    if (v30 > v39)
                    {
                      if (v30 > v28[v16]) {
                        goto LABEL_1907;
                      }
                      int v40 = v28[v21];
                      goto LABEL_1473;
                    }
                    int v338 = v28[v18];
                    if (v31 < v39)
                    {
                      if (v30 <= v338 || v30 <= v28[v17]) {
                        goto LABEL_1943;
                      }
                      int v339 = v28[v16];
                      if (v30 > v339) {
                        goto LABEL_1907;
                      }
                      int v340 = v28[v20];
                      if (v31 >= v339)
                      {
                        if (v30 <= v340 || v30 <= *(v28 - 3)) {
                          goto LABEL_1943;
                        }
                        int v93 = v28[v21];
                        goto LABEL_1051;
                      }
                      if (v30 <= v340) {
                        goto LABEL_1943;
                      }
                      goto LABEL_812;
                    }
                    if (v30 <= v338 || v30 <= v28[v17]) {
                      goto LABEL_1943;
                    }
                    int v522 = v28[v16];
                    if (v30 > v522) {
                      goto LABEL_1907;
                    }
                    int v523 = v28[v20];
                    if (v31 >= v522)
                    {
                      if (v30 <= v523 || v30 <= v28[v21]) {
                        goto LABEL_1943;
                      }
LABEL_744:
                      int v111 = v28[v19];
                    }
                    else
                    {
                      if (v30 <= v523) {
                        goto LABEL_1943;
                      }
                      int v188 = v28[v21];
LABEL_442:
                      if (v30 <= v188) {
                        goto LABEL_1943;
                      }
                      int v111 = *(v28 - 3);
                    }
                    goto LABEL_1904;
                  }
                  if (v31 < v38)
                  {
                    if (v30 <= *(v28 - 3) || v30 <= v28[v18] || v30 <= v28[v19]) {
                      goto LABEL_1943;
                    }
                    if (v30 > v28[v17])
                    {
                      int v267 = v28[v16];
                      if (v30 > v267) {
                        goto LABEL_1907;
                      }
                      if (v31 >= v267)
                      {
                        if (v30 <= v28[v20] || v30 <= v28[v22]) {
                          goto LABEL_1943;
                        }
                        int v268 = v28[v21];
                        goto LABEL_1906;
                      }
                      goto LABEL_317;
                    }
                    int v690 = v28[v20];
LABEL_1900:
                    if (v30 <= v690) {
                      goto LABEL_1943;
                    }
                    int v536 = v28[v21];
LABEL_1902:
                    if (v30 <= v536) {
                      goto LABEL_1943;
                    }
                    int v111 = v28[v11];
LABEL_1904:
                    if (v30 <= v111) {
                      goto LABEL_1943;
                    }
                    goto LABEL_1905;
                  }
                  if (v30 <= v28[v19] || v30 <= v28[v18] || v30 <= *(v28 - 3)) {
                    goto LABEL_1943;
                  }
                  int v408 = v28[v17];
                  if (v30 <= v408)
                  {
                    int v690 = v28[v20];
                    if (v31 < v408)
                    {
                      if (v30 <= v690) {
                        goto LABEL_1943;
                      }
                      int v388 = v28[v21];
                      goto LABEL_1042;
                    }
                    goto LABEL_1900;
                  }
                  int v409 = v28[v16];
                  if (v30 > v409) {
                    goto LABEL_1907;
                  }
                  int v218 = v28[v21];
                  if (v31 < v409)
                  {
LABEL_1027:
                    if (v30 <= v218 || v30 <= v28[v22]) {
                      goto LABEL_1943;
                    }
                    int v268 = v28[v20];
                    goto LABEL_1906;
                  }
LABEL_486:
                  if (v30 <= v218) {
                    goto LABEL_1943;
                  }
LABEL_319:
                  int v111 = v28[v20];
                  goto LABEL_1904;
                }
                if (v31 >= v37)
                {
                  if (v30 <= v28[v20] || v30 <= v28[v21] || v30 <= *(v28 - 3)) {
                    goto LABEL_1943;
                  }
                  int v309 = v28[v22];
                  if (v30 <= v309)
                  {
                    if (v31 < v309)
                    {
                      if (v30 <= v28[v18] || v30 <= v28[v19]) {
                        goto LABEL_1943;
                      }
                      int v214 = v28[v17];
                      goto LABEL_1512;
                    }
                    if (v30 <= v28[v19] || v30 <= v28[v18]) {
                      goto LABEL_1943;
                    }
LABEL_25:
                    int v46 = v28[v16];
                    goto LABEL_1877;
                  }
                  if (v30 > v28[v12])
                  {
                    int v310 = v28[v11];
                    if (v30 > v310) {
                      goto LABEL_1907;
                    }
                    if (v31 < v310) {
                      goto LABEL_788;
                    }
                    goto LABEL_737;
                  }
                  if (v30 <= v28[v18] || v30 <= v28[v19]) {
                    goto LABEL_1943;
                  }
                }
                else
                {
                  if (v30 <= *(v28 - 3) || v30 <= v28[v21] || v30 <= v28[v20]) {
                    goto LABEL_1943;
                  }
                  int v184 = v28[v12];
                  if (v30 > v184)
                  {
                    if (v30 <= v28[v11])
                    {
                      if (v30 <= v28[v19]) {
                        goto LABEL_1943;
                      }
                    }
                    else
                    {
                      int v185 = v28[v22];
                      if (v30 > v185) {
                        goto LABEL_1907;
                      }
                      if (v31 < v185)
                      {
                        int v186 = v28[v18];
LABEL_857:
                        if (v30 <= v186) {
                          goto LABEL_1943;
                        }
                        int v93 = v28[v16];
                        goto LABEL_1051;
                      }
LABEL_737:
                      if (v30 <= v28[v19]) {
                        goto LABEL_1943;
                      }
                    }
                    int v46 = v28[v18];
                    goto LABEL_1877;
                  }
                  int v631 = v28[v18];
                  if (v31 < v184)
                  {
                    if (v30 <= v631 || v30 <= v28[v19]) {
                      goto LABEL_1943;
                    }
                    if (v30 > v28[v22])
                    {
                      int v632 = v28[v11];
                      if (v30 > v632 || v31 < v632) {
                        goto LABEL_1907;
                      }
                      goto LABEL_1878;
                    }
LABEL_2179:
                    if (v30 <= v28[v16]) {
                      goto LABEL_1943;
                    }
                    goto LABEL_1878;
                  }
                  if (v30 <= v631 || v30 <= v28[v19]) {
                    goto LABEL_1943;
                  }
                  if (v30 <= v28[v22]) {
                    goto LABEL_2179;
                  }
                }
                if (v30 > v28[v17]) {
                  goto LABEL_1907;
                }
                goto LABEL_1237;
              }
              int v108 = v28[v19];
              if (v31 >= v36)
              {
                if (v30 <= v108 || v30 <= v28[v18] || v30 <= v28[v17]) {
                  goto LABEL_1943;
                }
                if (v30 > *(v28 - 3))
                {
                  if (v30 > v28[v13])
                  {
                    int v217 = v28[v16];
                    if (v30 > v217) {
                      goto LABEL_1907;
                    }
                    int v218 = v28[v21];
                    if (v31 >= v217) {
                      goto LABEL_1027;
                    }
                    goto LABEL_486;
                  }
                  goto LABEL_1514;
                }
                int v557 = v28[v12];
              }
              else
              {
                if (v30 <= v108 || v30 <= v28[v18] || v30 <= v28[v17]) {
                  goto LABEL_1943;
                }
                int v109 = *(v28 - 3);
                if (v30 > v109)
                {
                  if (v30 > v28[v13])
                  {
                    int v110 = v28[v16];
                    if (v30 > v110) {
                      goto LABEL_1907;
                    }
                    if (v31 < v110)
                    {
                      if (v30 <= v28[v20]) {
                        goto LABEL_1943;
                      }
                      int v111 = v28[v21];
                      goto LABEL_1904;
                    }
LABEL_317:
                    int v157 = v28[v21];
LABEL_318:
                    if (v30 <= v157) {
                      goto LABEL_1943;
                    }
                    goto LABEL_319;
                  }
LABEL_1514:
                  if (v30 <= v28[v21] || v30 <= v28[v20]) {
                    goto LABEL_1943;
                  }
                  if (v30 > v28[v22]) {
                    goto LABEL_1907;
                  }
                  goto LABEL_1517;
                }
                int v557 = v28[v12];
                if (v31 < v109)
                {
                  if (v30 <= v557 || v30 <= v28[v16]) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1484;
                }
              }
              if (v30 <= v557) {
                goto LABEL_1943;
              }
              int v214 = v28[v13];
              goto LABEL_1512;
            }
            if (v31 >= v35)
            {
              if (v30 <= v28[v21] || v30 <= v28[v20] || v30 <= v28[v22]) {
                goto LABEL_1943;
              }
              if (v30 <= *(v28 - 3))
              {
                int v84 = v28[v13];
                goto LABEL_1232;
              }
            }
            else
            {
              if (v30 <= v28[v20] || v30 <= v28[v21] || v30 <= v28[v22]) {
                goto LABEL_1943;
              }
              int v83 = *(v28 - 3);
              if (v30 <= v83)
              {
                int v84 = v28[v13];
                if (v31 < v83)
                {
                  if (v30 <= v84) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1233;
                }
LABEL_1232:
                if (v30 <= v84) {
                  goto LABEL_1943;
                }
LABEL_1233:
                int v286 = v28[v10];
                goto LABEL_1234;
              }
            }
            if (v30 <= v28[v18] || v30 <= v28[v19])
            {
              if (v30 <= v28[v10]) {
                goto LABEL_1943;
              }
              goto LABEL_1235;
            }
            goto LABEL_309;
          }
          if (v31 >= v34)
          {
            if (v30 <= v28[v22]) {
              goto LABEL_1943;
            }
            int v89 = v28[v10];
            if (v30 > v89)
            {
              int v90 = v28[v21];
              if (v30 > v90)
              {
                if (v30 <= v28[v11]) {
                  goto LABEL_1943;
                }
                if (v30 <= v28[v20])
                {
LABEL_1198:
                  if (v30 <= v28[v14]) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1199;
                }
                if (v30 <= v28[v12])
                {
                  if (v30 <= v28[v18]) {
                    goto LABEL_1943;
                  }
                  int v273 = v28[v19];
                  goto LABEL_1479;
                }
                if (v30 > *(v28 - 3)) {
                  goto LABEL_1907;
                }
LABEL_1484:
                int v268 = v28[v13];
                goto LABEL_1906;
              }
              int v285 = v28[v16];
              if (v31 >= v90)
              {
                if (v30 <= v285 || v30 <= v28[v14]) {
                  goto LABEL_1943;
                }
                int v423 = v28[v13];
                goto LABEL_1871;
              }
              if (v30 <= v285 || v30 <= v28[v14]) {
                goto LABEL_1943;
              }
              int v286 = v28[v13];
LABEL_1234:
              if (v30 <= v286) {
                goto LABEL_1943;
              }
LABEL_1235:
              int v141 = v28[v12];
              goto LABEL_1236;
            }
            int v215 = v28[v17];
            if (v31 < v89)
            {
              if (v30 <= v215 || v30 <= v28[v11] || v30 <= v28[v19] || v30 <= v28[v20]) {
                goto LABEL_1943;
              }
              int v216 = v28[v18];
              goto LABEL_813;
            }
            if (v30 <= v215 || v30 <= v28[v18] || v30 <= v28[v20] || v30 <= v28[v11]) {
              goto LABEL_1943;
            }
LABEL_812:
            int v216 = v28[v19];
LABEL_813:
            if (v30 <= v216) {
              goto LABEL_1943;
            }
            int v273 = v28[v21];
            goto LABEL_1479;
          }
          int v57 = v28[v21];
          if (v30 > v57)
          {
            int v58 = v28[v10];
            if (v30 <= v58)
            {
              int v205 = v28[v17];
              if (v31 >= v58)
              {
                if (v30 > v205)
                {
                  if (v30 <= v28[v11] || v30 <= v28[v19] || v30 <= v28[v18]) {
                    goto LABEL_1943;
                  }
                  int v321 = v28[v20];
LABEL_1406:
                  if (v30 <= v321) {
                    goto LABEL_1943;
                  }
                  int v273 = v28[v22];
                  goto LABEL_1479;
                }
                if (v31 >= v205) {
                  goto LABEL_1943;
                }
                int v446 = v28[v20];
                if (v30 > v446 || v31 >= v446) {
                  goto LABEL_1943;
                }
                int v448 = v28[v13];
                if (v30 > v448 || v31 >= v448) {
                  goto LABEL_1943;
                }
                int v450 = *(v28 - 3);
                if (v30 > v450 || v31 >= v450) {
                  goto LABEL_1943;
                }
                int v452 = v28[v14];
                if (v30 > v452 || v31 >= v452) {
                  goto LABEL_1943;
                }
                int v380 = v28[v18];
              }
              else
              {
                if (v30 > v205)
                {
                  if (v30 <= v28[v11] || v30 <= v28[v19] || v30 <= v28[v20]) {
                    goto LABEL_1943;
                  }
                  int v188 = v28[v18];
                  goto LABEL_442;
                }
                if (v31 >= v205) {
                  goto LABEL_1943;
                }
                int v372 = v28[v13];
                if (v30 > v372 || v31 >= v372) {
                  goto LABEL_1943;
                }
                int v374 = v28[v20];
                if (v30 > v374 || v31 >= v374) {
                  goto LABEL_1943;
                }
                int v376 = *(v28 - 3);
                if (v30 > v376 || v31 >= v376) {
                  goto LABEL_1943;
                }
                int v378 = v28[v18];
                if (v30 > v378 || v31 >= v378) {
                  goto LABEL_1943;
                }
                int v380 = v28[v14];
              }
              if (v30 > v380 || v31 >= v380) {
                goto LABEL_1943;
              }
              int v371 = v28[v19];
            }
            else
            {
              int v59 = *(v28 - 3);
              if (v30 > v59)
              {
                if (v30 <= v28[v11] || v30 <= v28[v22]) {
                  goto LABEL_1943;
                }
                if (v30 > v28[v20])
                {
                  if (v30 > v28[v12]) {
                    goto LABEL_1907;
                  }
                  if (v30 <= v28[v18]) {
                    goto LABEL_1943;
                  }
                  goto LABEL_1052;
                }
                goto LABEL_1198;
              }
              if (v31 >= v59)
              {
                if (v30 <= v28[v13]) {
                  goto LABEL_1943;
                }
                int v410 = v28[v20];
                if (v30 > v410)
                {
                  int v388 = v28[v12];
                  goto LABEL_1042;
                }
                int v588 = v28[v14];
                if (v31 < v410)
                {
                  if (v30 <= v588) {
                    goto LABEL_1943;
                  }
                  int v286 = v28[v22];
                  goto LABEL_1234;
                }
                if (v30 <= v588) {
                  goto LABEL_1943;
                }
LABEL_1870:
                int v423 = v28[v22];
LABEL_1871:
                if (v30 <= v423) {
                  goto LABEL_1943;
                }
                int v465 = v28[v11];
LABEL_1873:
                if (v30 <= v465) {
                  goto LABEL_1943;
                }
LABEL_1874:
                int v268 = v28[v12];
                goto LABEL_1906;
              }
              int v271 = v28[v14];
              if (v30 > v271)
              {
                if (v30 <= v28[v13]) {
                  goto LABEL_1943;
                }
                goto LABEL_1870;
              }
              int v496 = v28[v20];
              if (v31 >= v271)
              {
                if (v30 <= v496 || v30 <= v28[v13]) {
                  goto LABEL_1943;
                }
                int v536 = v28[v12];
                goto LABEL_1902;
              }
              if (v30 > v496)
              {
                if (v30 <= v28[v13] || v30 <= v28[v11]) {
                  goto LABEL_1943;
                }
                int v111 = v28[v12];
                goto LABEL_1904;
              }
              if (v31 >= v496) {
                goto LABEL_1943;
              }
              int v646 = v28[v13];
              if (v30 > v646 || v31 >= v646) {
                goto LABEL_1943;
              }
              int v648 = v28[v18];
              if (v30 > v648 || v31 >= v648) {
                goto LABEL_1943;
              }
              int v650 = v28[v19];
              if (v30 > v650 || v31 >= v650) {
                goto LABEL_1943;
              }
              int v371 = v28[v17];
            }
            goto LABEL_1769;
          }
          if (v31 >= v57)
          {
            int v242 = v28[v16];
            if (v30 > v242)
            {
              if (v30 <= v28[v22] || v30 <= v28[v14] || v30 <= v28[v10] || v30 <= v28[v11]) {
                goto LABEL_1943;
              }
LABEL_1199:
              int v465 = v28[v13];
              goto LABEL_1873;
            }
            if (v31 >= v242) {
              goto LABEL_1943;
            }
            int v326 = v28[v13];
            if (v30 > v326 || v31 >= v326) {
              goto LABEL_1943;
            }
            int v328 = v28[v20];
            if (v30 > v328 || v31 >= v328) {
              goto LABEL_1943;
            }
            int v330 = *(v28 - 3);
            if (v30 > v330 || v31 >= v330) {
              goto LABEL_1943;
            }
            int v332 = v28[v14];
            if (v30 > v332 || v31 >= v332) {
              goto LABEL_1943;
            }
            int v334 = v28[v18];
            if (v30 > v334 || v31 >= v334) {
              goto LABEL_1943;
            }
            int v336 = v28[v19];
            if (v30 > v336 || v31 >= v336) {
              goto LABEL_1943;
            }
LABEL_2034:
            int v231 = v28[v17];
            goto LABEL_2277;
          }
          int v139 = v28[v14];
          if (v30 > v139)
          {
            int v140 = v28[v16];
            if (v30 > v140)
            {
              if (v30 <= v28[v22] || v30 <= v28[v10] || v30 <= v28[v12]) {
                goto LABEL_1943;
              }
              int v141 = v28[v13];
              goto LABEL_1236;
            }
            if (v31 >= v140) {
              goto LABEL_1943;
            }
            int v345 = v28[v22];
            if (v30 > v345 || v31 >= v345) {
              goto LABEL_1943;
            }
            int v347 = v28[v19];
            if (v30 > v347 || v31 >= v347) {
              goto LABEL_1943;
            }
            int v349 = v28[v18];
            if (v30 > v349 || v31 >= v349) {
              goto LABEL_1943;
            }
            int v351 = v28[v20];
            if (v30 > v351 || v31 >= v351) {
              goto LABEL_1943;
            }
            int v353 = v28[v17];
            if (v30 > v353 || v31 >= v353) {
              goto LABEL_1943;
            }
            goto LABEL_1508;
          }
          if (v31 >= v139)
          {
            int v424 = v28[v22];
            if (v30 > v424 || v31 >= v424) {
              goto LABEL_1943;
            }
            int v426 = v28[v16];
            if (v30 > v426 || v31 >= v426) {
              goto LABEL_1943;
            }
            int v428 = v28[v19];
            if (v30 > v428 || v31 >= v428) {
              goto LABEL_1943;
            }
            int v430 = v28[v18];
            if (v30 > v430 || v31 >= v430) {
              goto LABEL_1943;
            }
            int v432 = v28[v20];
            if (v30 > v432 || v31 >= v432) {
              goto LABEL_1943;
            }
            int v434 = v28[v17];
            goto LABEL_1506;
          }
          int v287 = *(v28 - 3);
          if (v30 <= v287 && v31 < v287)
          {
            int v289 = v28[v18];
            if (v30 <= v289 && v31 < v289)
            {
              int v291 = v28[v20];
              if (v30 <= v291 && v31 < v291)
              {
                int v293 = v28[v16];
                if (v30 <= v293 && v31 < v293)
                {
                  int v295 = v28[v19];
                  if (v30 <= v295 && v31 < v295)
                  {
                    int v297 = v28[v17];
                    if (v30 <= v297 && v31 < v297)
                    {
LABEL_1907:
                      if (*(unsigned __int8 *)(result + 8) <= a3)
                      {
                        uint64_t v694 = v17;
                        uint64_t v695 = v22;
                        float v696 = (float)v27;
                        v698 = a4[1];
                        unint64_t v697 = (unint64_t)a4[2];
                        if ((unint64_t)v698 >= v697)
                        {
                          v700 = *a4;
                          uint64_t v701 = ((char *)v698 - (char *)*a4) >> 3;
                          unint64_t v702 = v701 + 1;
                          if ((unint64_t)(v701 + 1) >> 61) {
                            sub_1DD4BACA0();
                          }
                          uint64_t v703 = v697 - (void)v700;
                          if (v703 >> 2 > v702) {
                            unint64_t v702 = v703 >> 2;
                          }
                          if ((unint64_t)v703 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v704 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v704 = v702;
                          }
                          if (v704)
                          {
                            v705 = (char *)sub_1DD4BAF80(v884, v704);
                            a4 = v898;
                            v706 = v705;
                            v700 = *v898;
                            v698 = v898[1];
                          }
                          else
                          {
                            v706 = 0;
                          }
                          v707 = (float *)&v706[8 * v701];
                          float *v707 = v696;
                          v707[1] = v26;
                          v708 = v707;
                          if (v698 != v700)
                          {
                            do
                            {
                              uint64_t v709 = *((void *)v698 - 1);
                              v698 -= 2;
                              *((void *)v708 - 1) = v709;
                              v708 -= 2;
                            }
                            while (v698 != v700);
                            v700 = *a4;
                          }
                          v699 = v707 + 2;
                          *a4 = v708;
                          a4[1] = v707 + 2;
                          a4[2] = (float *)&v706[8 * v704];
                          if (v700)
                          {
                            operator delete(v700);
                            a4 = v898;
                          }
                          a5 = v899;
                          unint64_t v5 = v895;
                          double result = v896;
                          uint64_t v11 = v893;
                          uint64_t v10 = v894;
                          uint64_t v13 = v891;
                          uint64_t v12 = v892;
                          uint64_t v15 = v889;
                          uint64_t v14 = v890;
                          uint64_t v18 = v887;
                          uint64_t v16 = v888;
                          unint64_t v21 = v885;
                          uint64_t v19 = v886;
                        }
                        else
                        {
                          float *v698 = v696;
                          v698[1] = v26;
                          v699 = v698 + 2;
                        }
                        a4[1] = v699;
                        v711 = a5[1];
                        unint64_t v710 = (unint64_t)a5[2];
                        if ((unint64_t)v711 >= v710)
                        {
                          v713 = *a5;
                          uint64_t v714 = v711 - *a5;
                          unint64_t v715 = v714 + 1;
                          if ((unint64_t)(v714 + 1) >> 62) {
                            sub_1DD4BACA0();
                          }
                          uint64_t v716 = v710 - (void)v713;
                          if (v716 >> 1 > v715) {
                            unint64_t v715 = v716 >> 1;
                          }
                          if ((unint64_t)v716 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v717 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v717 = v715;
                          }
                          if (v717)
                          {
                            v718 = (char *)sub_1DD4BB6B8(v883, v717);
                            a5 = v899;
                            v719 = v718;
                            v713 = *v899;
                            v711 = v899[1];
                          }
                          else
                          {
                            v719 = 0;
                          }
                          v720 = (int *)&v719[4 * v714];
                          int *v720 = a3;
                          v712 = v720 + 1;
                          while (v711 != v713)
                          {
                            int v721 = *--v711;
                            *--v720 = v721;
                          }
                          *a5 = v720;
                          a5[1] = v712;
                          a5[2] = (int *)&v719[4 * v717];
                          if (v713)
                          {
                            operator delete(v713);
                            a5 = v899;
                          }
                          a4 = v898;
                          unint64_t v5 = v895;
                          double result = v896;
                          uint64_t v11 = v893;
                          uint64_t v10 = v894;
                          uint64_t v13 = v891;
                          uint64_t v12 = v892;
                          uint64_t v15 = v889;
                          uint64_t v14 = v890;
                          uint64_t v18 = v887;
                          uint64_t v16 = v888;
                          unint64_t v21 = v885;
                          uint64_t v19 = v886;
                        }
                        else
                        {
                          int *v711 = a3;
                          v712 = v711 + 1;
                        }
                        a5[1] = v712;
                        uint64_t v22 = v695;
                        uint64_t v17 = v694;
                        uint64_t v20 = v897;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_1943:
      if (++v27 == v24) {
        goto LABEL_2432;
      }
    }
  }
  return result;
}

void sub_1DD4FC720(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a4;
  uint64_t v6 = a4[1];
  uint64_t v7 = v6 - *a4;
  if (v6 != *a4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a2[3];
    uint64_t v10 = 2 - 2 * v9;
    uint64_t v11 = v9 + 3;
    uint64_t v12 = 2 * v9 + 2;
    uint64_t v13 = 3 * v9 + 1;
    uint64_t v14 = 3 * v9 - 1;
    uint64_t v15 = 2 * v9 - 2;
    uint64_t v636 = *a2;
    uint64_t v16 = v7 >> 3;
    uint64_t v17 = *a5;
    do
    {
      uint64_t v18 = 0;
      uint64_t v19 = (unsigned __int8 *)(v636
                              + (unint64_t)*(float *)(v5 + 8 * v8)
                              + v9 * (unint64_t)*(float *)(v5 + 8 * v8 + 4));
      int v20 = *v19;
      unint64_t v21 = &v19[-3 - v9];
      uint64_t v22 = &v19[v9 - 3];
      uint64_t v23 = &v19[(2 * v9) ^ 0xFFFFFFFFFFFFFFFELL];
      int v24 = v19[3];
      unint64_t v25 = &v19[-3 * v9 + 1];
      float v26 = &v19[-3 * v9 - 1];
      unint64_t v27 = &v19[3 - v9];
      int v28 = 255;
      do
      {
        uint64_t v29 = v18;
        BOOL v30 = __OFADD__(v18, v28);
        int v31 = v18 + v28;
        if (v31 < 0 != v30) {
          int v32 = v31 + 1;
        }
        else {
          int v32 = v31;
        }
        uint64_t v18 = (v32 >> 1);
        int v33 = v20 - (v32 >> 1);
        int v34 = v20 + (v32 >> 1);
        if (v33 <= v24)
        {
          if (v34 >= v24)
          {
            int v56 = *(v19 - 3);
            if (v33 <= v56)
            {
              if (v34 >= v56) {
                goto LABEL_1733;
              }
              int v76 = *v21;
              if (v33 > v76) {
                goto LABEL_1733;
              }
              if (v34 >= v76) {
                goto LABEL_1733;
              }
              int v77 = *v22;
              if (v33 > v77 || v34 >= v77) {
                goto LABEL_1733;
              }
              int v78 = v19[v14];
              if (v33 > v78)
              {
                int v79 = v19[v10];
                if (v33 > v79) {
                  goto LABEL_1733;
                }
                if (v34 >= v79) {
                  goto LABEL_1733;
                }
                int v80 = *v26;
                if (v33 > v80) {
                  goto LABEL_1733;
                }
                if (v34 >= v80) {
                  goto LABEL_1733;
                }
                int v81 = *v25;
                if (v33 > v81 || v34 >= v81) {
                  goto LABEL_1733;
                }
                int v82 = *v27;
                if (v33 <= v82)
                {
                  if (v34 >= v82)
                  {
                    int v529 = v19[v15];
                    if (v33 > v529) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v529) {
                      goto LABEL_1733;
                    }
                    int v530 = *v23;
                    if (v33 > v530 || v34 >= v530) {
                      goto LABEL_1733;
                    }
                  }
                  else
                  {
                    int v490 = *v23;
                    if (v33 > v490 || v34 >= v490) {
                      goto LABEL_1733;
                    }
                  }
                }
                else
                {
                  int v83 = v19[v15];
                  if (v33 > v83) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v83) {
                    goto LABEL_1733;
                  }
                  int v84 = *v23;
                  if (v33 > v84 || v34 >= v84) {
                    goto LABEL_1733;
                  }
                }
                int v315 = v19[-3 * v9];
                goto LABEL_1704;
              }
              if (v34 >= v78)
              {
                int v309 = v19[v10];
                if (v33 > v309) {
                  goto LABEL_1733;
                }
                if (v34 >= v309) {
                  goto LABEL_1733;
                }
                int v310 = v19[-3 * v9];
                if (v33 > v310) {
                  goto LABEL_1733;
                }
                if (v34 >= v310) {
                  goto LABEL_1733;
                }
                int v311 = *v23;
                if (v33 > v311) {
                  goto LABEL_1733;
                }
                if (v34 >= v311) {
                  goto LABEL_1733;
                }
                int v312 = *v25;
                if (v33 > v312) {
                  goto LABEL_1733;
                }
                if (v34 >= v312) {
                  goto LABEL_1733;
                }
                int v313 = *v26;
                if (v33 > v313 || v34 >= v313) {
                  goto LABEL_1733;
                }
                int v314 = *v27;
                if (v33 > v314 || v34 >= v314)
                {
                  int v315 = v19[v15];
                  goto LABEL_1704;
                }
              }
              else
              {
                int v224 = *v23;
                if (v33 > v224)
                {
                  int v225 = v19[v11];
                  if (v33 > v225) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v225) {
                    goto LABEL_1733;
                  }
                  int v226 = v19[v12];
                  if (v33 > v226) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v226) {
                    goto LABEL_1733;
                  }
                  int v227 = v19[v15];
                  if (v33 > v227) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v227) {
                    goto LABEL_1733;
                  }
                  int v228 = v19[v13];
                  if (v33 > v228 || v34 >= v228) {
                    goto LABEL_1733;
                  }
LABEL_1572:
                  int v315 = v19[3 * v9];
                  goto LABEL_1704;
                }
                if (v34 >= v224)
                {
                  int v432 = v19[v11];
                  if (v33 > v432) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v432) {
                    goto LABEL_1733;
                  }
                  int v433 = v19[v12];
                  if (v33 > v433) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v433) {
                    goto LABEL_1733;
                  }
                  int v434 = v19[v15];
                  if (v33 > v434) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v434) {
                    goto LABEL_1733;
                  }
                  int v435 = v19[v13];
                  if (v33 > v435 || v34 >= v435) {
                    goto LABEL_1733;
                  }
                  goto LABEL_1572;
                }
                int v360 = v19[-3 * v9];
                if (v33 > v360)
                {
                  int v361 = v19[v13];
                  if (v33 > v361 || v34 >= v361) {
                    goto LABEL_1733;
                  }
                  int v362 = v19[v12];
                  if (v33 <= v362)
                  {
                    if (v34 >= v362)
                    {
                      int v563 = *v26;
                      if (v33 > v563) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v563) {
                        goto LABEL_1733;
                      }
                      int v564 = v19[v15];
                      if (v33 > v564 || v34 >= v564) {
                        goto LABEL_1733;
                      }
                    }
                    else
                    {
                      int v533 = v19[v15];
                      if (v33 > v533 || v34 >= v533) {
                        goto LABEL_1733;
                      }
                    }
                  }
                  else
                  {
                    int v363 = *v26;
                    if (v33 > v363) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v363) {
                      goto LABEL_1733;
                    }
                    int v364 = v19[v15];
                    if (v33 > v364 || v34 >= v364) {
                      goto LABEL_1733;
                    }
                  }
                  goto LABEL_1572;
                }
                if (v34 < v360)
                {
                  int v464 = v19[v15];
                  if (v33 <= v464)
                  {
                    if (v34 >= v464)
                    {
                      int v566 = *v27;
                      if (v33 > v566) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v566) {
                        goto LABEL_1733;
                      }
                      int v567 = v19[v10];
                      if (v33 > v567) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v567) {
                        goto LABEL_1733;
                      }
                      int v568 = *v25;
                      if (v33 > v568 || v34 >= v568) {
                        goto LABEL_1733;
                      }
                    }
                    else
                    {
                      int v540 = v19[3 * v9];
                      if (v33 <= v540)
                      {
                        if (v34 < v540)
                        {
                          int v586 = *v26;
                          if (v33 <= v586)
                          {
                            if (v34 < v586) {
                              continue;
                            }
                            int v616 = v19[v12];
                            if (v33 > v616 || v34 >= v616) {
                              goto LABEL_1733;
                            }
                          }
                          else
                          {
                            int v587 = v19[v12];
                            if (v33 > v587 || v34 >= v587) {
                              goto LABEL_1733;
                            }
                          }
                          int v315 = v19[v13];
                          goto LABEL_1704;
                        }
                        int v607 = *v25;
                        if (v33 > v607 || v34 >= v607) {
                          goto LABEL_1733;
                        }
                      }
                      else
                      {
                        int v541 = *v25;
                        if (v33 > v541 || v34 >= v541) {
                          goto LABEL_1733;
                        }
                      }
                    }
                  }
                  else
                  {
                    int v465 = *v27;
                    if (v33 > v465) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v465) {
                      goto LABEL_1733;
                    }
                    int v466 = v19[v10];
                    if (v33 > v466) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v466) {
                      goto LABEL_1733;
                    }
                    int v467 = *v25;
                    if (v33 > v467 || v34 >= v467) {
                      goto LABEL_1733;
                    }
                  }
LABEL_1703:
                  int v315 = *v26;
LABEL_1704:
                  if (v33 > v315 || v34 >= v315) {
                    goto LABEL_1733;
                  }
                  continue;
                }
                int v517 = v19[v13];
                if (v33 > v517) {
                  goto LABEL_1733;
                }
                if (v34 >= v517) {
                  goto LABEL_1733;
                }
                int v518 = v19[v15];
                if (v33 > v518) {
                  goto LABEL_1733;
                }
                if (v34 >= v518) {
                  goto LABEL_1733;
                }
                int v519 = v19[3 * v9];
                if (v33 > v519 || v34 >= v519) {
                  goto LABEL_1733;
                }
                int v520 = v19[v12];
                if (v33 > v520 || v34 >= v520) {
                  goto LABEL_1703;
                }
              }
            }
            else
            {
              if (v33 <= *v21 || v33 <= *v22) {
                goto LABEL_1733;
              }
              int v57 = v19[v14];
              if (v33 > v57)
              {
                int v58 = *v23;
                if (v33 <= v58)
                {
                  int v218 = v19[v11];
                  if (v34 >= v58)
                  {
                    if (v33 <= v218 || v33 <= v19[v12] || v33 <= v19[v15] || v33 <= v19[v13]) {
                      goto LABEL_1733;
                    }
                  }
                  else if (v33 <= v218 || v33 <= v19[v12] || v33 <= v19[v15] || v33 <= v19[v13])
                  {
                    goto LABEL_1733;
                  }
                }
                else
                {
                  int v59 = v19[-3 * v9];
                  if (v33 > v59)
                  {
                    int v60 = v19[v15];
                    if (v33 <= v60)
                    {
                      int v338 = *v27;
                      if (v34 >= v60)
                      {
                        if (v33 <= v338 || v33 <= v19[v10] || v33 <= *v25) {
                          goto LABEL_1733;
                        }
                      }
                      else if (v33 <= v338 || v33 <= v19[v10] || v33 <= *v25)
                      {
                        goto LABEL_1733;
                      }
                    }
                    else
                    {
                      int v61 = v19[3 * v9];
                      if (v33 > v61)
                      {
                        int v62 = *v26;
                        if (v33 > v62) {
                          continue;
                        }
                        int v63 = v19[v12];
                        if (v34 >= v62)
                        {
                          if (v33 > v63) {
                            goto LABEL_1303;
                          }
                        }
                        else if (v33 > v63)
                        {
LABEL_1303:
                          int v96 = v19[v13];
                          goto LABEL_1464;
                        }
                        goto LABEL_1733;
                      }
                      int v398 = *v25;
                      if (v34 >= v61)
                      {
                        if (v33 <= v398) {
                          goto LABEL_1733;
                        }
                      }
                      else if (v33 <= v398)
                      {
                        goto LABEL_1733;
                      }
                    }
                    int v96 = *v26;
LABEL_1464:
                    if (v33 > v96) {
                      continue;
                    }
                    goto LABEL_1733;
                  }
                  int v267 = v19[v13];
                  if (v34 >= v59)
                  {
                    if (v33 <= v267 || v33 <= v19[v15]) {
                      goto LABEL_1733;
                    }
                    int v378 = v19[v12];
                    if (v33 <= v378)
                    {
                      int v379 = *v26;
                      if (v34 >= v378)
                      {
                        if (v33 <= v379) {
                          goto LABEL_1733;
                        }
                      }
                      else if (v33 <= v379)
                      {
                        goto LABEL_1733;
                      }
                    }
                  }
                  else
                  {
                    if (v33 <= v267) {
                      goto LABEL_1733;
                    }
                    int v268 = v19[v12];
                    if (v33 <= v268)
                    {
                      int v451 = *v26;
                      if (v34 >= v268)
                      {
                        if (v33 <= v451 || v33 <= v19[v15]) {
                          goto LABEL_1733;
                        }
                      }
                      else if (v33 <= v451 || v33 <= v19[v15])
                      {
                        goto LABEL_1733;
                      }
                    }
                    else if (v33 <= v19[v15])
                    {
                      goto LABEL_1733;
                    }
                  }
                }
LABEL_1463:
                int v96 = v19[3 * v9];
                goto LABEL_1464;
              }
              int v166 = v19[v10];
              if (v34 >= v57)
              {
                if (v33 <= v166 || v33 <= v19[-3 * v9] || v33 <= *v23 || v33 <= *v25 || v33 <= *v27 && v33 <= v19[v15]) {
                  goto LABEL_1733;
                }
              }
              else
              {
                if (v33 <= v166 || v33 <= v19[-3 * v9]) {
                  goto LABEL_1733;
                }
                int v167 = *v27;
                if (v33 <= v167)
                {
                  int v401 = v19[v15];
                  if (v34 >= v167)
                  {
                    if (v33 <= v401 || v33 <= *v23) {
                      goto LABEL_1733;
                    }
                  }
                  else if (v33 <= v401 || v33 <= *v23)
                  {
                    goto LABEL_1733;
                  }
                }
                else if (v33 <= *v23)
                {
                  goto LABEL_1733;
                }
                if (v33 <= *v25) {
                  goto LABEL_1733;
                }
              }
              if (v33 <= *v26) {
                goto LABEL_1733;
              }
            }
          }
          else
          {
            int v44 = v19[-3 * v9];
            if (v33 <= v44)
            {
              if (v34 >= v44)
              {
                int v93 = v19[v14];
                if (v33 <= v93)
                {
                  if (v34 >= v93) {
                    goto LABEL_1733;
                  }
                  int v143 = v19[v13];
                  if (v33 > v143 || v34 >= v143) {
                    goto LABEL_1733;
                  }
                  int v144 = v19[v12];
                  if (v33 <= v144)
                  {
                    if (v34 >= v144)
                    {
                      int v380 = *v26;
                      if (v33 > v380) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v380) {
                        goto LABEL_1733;
                      }
                      int v381 = *v23;
                      if (v33 > v381) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v381) {
                        goto LABEL_1733;
                      }
                      int v382 = *v22;
                      if (v33 > v382) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v382) {
                        goto LABEL_1733;
                      }
                      int v383 = *v21;
                      if (v33 > v383) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v383) {
                        goto LABEL_1733;
                      }
                      int v384 = v19[v15];
                      if (v33 > v384) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v384) {
                        goto LABEL_1733;
                      }
                      int v385 = *(v19 - 3);
                      if (v33 > v385) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v385) {
                        goto LABEL_1733;
                      }
                      int v151 = v19[3 * v9];
                      if (v33 > v151) {
                        goto LABEL_1733;
                      }
                    }
                    else
                    {
                      int v276 = v19[v15];
                      if (v33 <= v276)
                      {
                        if (v34 >= v276)
                        {
                          int v476 = *v25;
                          if (v33 > v476) {
                            goto LABEL_1733;
                          }
                          if (v34 >= v476) {
                            goto LABEL_1733;
                          }
                          int v477 = v19[v10];
                          if (v33 > v477) {
                            goto LABEL_1733;
                          }
                          if (v34 >= v477) {
                            goto LABEL_1733;
                          }
                          int v478 = *v27;
                          if (v33 > v478) {
                            goto LABEL_1733;
                          }
                          if (v34 >= v478) {
                            goto LABEL_1733;
                          }
                          int v479 = v19[v11];
                          if (v33 > v479) {
                            goto LABEL_1733;
                          }
                          if (v34 >= v479) {
                            goto LABEL_1733;
                          }
                          int v151 = v19[3 * v9];
                          if (v33 > v151) {
                            goto LABEL_1733;
                          }
                        }
                        else
                        {
                          int v406 = *v22;
                          if (v33 <= v406)
                          {
                            if (v34 >= v406)
                            {
                              int v549 = v19[v10];
                              if (v33 > v549) {
                                goto LABEL_1733;
                              }
                              if (v34 >= v549) {
                                goto LABEL_1733;
                              }
                              int v550 = *v27;
                              if (v33 > v550) {
                                goto LABEL_1733;
                              }
                              if (v34 >= v550) {
                                goto LABEL_1733;
                              }
                              int v551 = v19[v11];
                              if (v33 > v551) {
                                goto LABEL_1733;
                              }
                              if (v34 >= v551) {
                                goto LABEL_1733;
                              }
                              int v151 = v19[3 * v9];
                              if (v33 > v151) {
                                goto LABEL_1733;
                              }
                            }
                            else
                            {
                              int v502 = v19[3 * v9];
                              if (v33 > v502 || v34 >= v502) {
                                goto LABEL_1733;
                              }
                              int v503 = v19[v11];
                              if (v33 <= v503)
                              {
                                if (v34 >= v503)
                                {
                                  int v605 = *v23;
                                  if (v33 > v605) {
                                    goto LABEL_1733;
                                  }
                                  if (v34 >= v605) {
                                    goto LABEL_1733;
                                  }
                                  int v606 = *v21;
                                  if (v33 > v606) {
                                    goto LABEL_1733;
                                  }
                                  if (v34 >= v606) {
                                    goto LABEL_1733;
                                  }
                                  int v151 = *(v19 - 3);
                                  if (v33 > v151) {
                                    goto LABEL_1733;
                                  }
                                }
                                else
                                {
                                  int v585 = *(v19 - 3);
                                  if (v33 <= v585)
                                  {
                                    if (v34 < v585) {
                                      continue;
                                    }
                                    int v151 = *v27;
                                    if (v33 > v151) {
                                      goto LABEL_1733;
                                    }
                                  }
                                  else
                                  {
                                    int v151 = *v27;
                                    if (v33 > v151) {
                                      goto LABEL_1733;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                int v504 = *v23;
                                if (v33 > v504) {
                                  goto LABEL_1733;
                                }
                                if (v34 >= v504) {
                                  goto LABEL_1733;
                                }
                                int v505 = *v21;
                                if (v33 > v505) {
                                  goto LABEL_1733;
                                }
                                if (v34 >= v505) {
                                  goto LABEL_1733;
                                }
                                int v151 = *(v19 - 3);
                                if (v33 > v151) {
                                  goto LABEL_1733;
                                }
                              }
                            }
                          }
                          else
                          {
                            int v407 = v19[v10];
                            if (v33 > v407) {
                              goto LABEL_1733;
                            }
                            if (v34 >= v407) {
                              goto LABEL_1733;
                            }
                            int v408 = v19[v11];
                            if (v33 > v408) {
                              goto LABEL_1733;
                            }
                            if (v34 >= v408) {
                              goto LABEL_1733;
                            }
                            int v409 = *v27;
                            if (v33 > v409) {
                              goto LABEL_1733;
                            }
                            if (v34 >= v409) {
                              goto LABEL_1733;
                            }
                            int v151 = v19[3 * v9];
                            if (v33 > v151) {
                              goto LABEL_1733;
                            }
                          }
                        }
                      }
                      else
                      {
                        int v277 = *v25;
                        if (v33 > v277) {
                          goto LABEL_1733;
                        }
                        if (v34 >= v277) {
                          goto LABEL_1733;
                        }
                        int v278 = v19[v10];
                        if (v33 > v278) {
                          goto LABEL_1733;
                        }
                        if (v34 >= v278) {
                          goto LABEL_1733;
                        }
                        int v279 = *v27;
                        if (v33 > v279) {
                          goto LABEL_1733;
                        }
                        if (v34 >= v279) {
                          goto LABEL_1733;
                        }
                        int v280 = v19[v11];
                        if (v33 > v280) {
                          goto LABEL_1733;
                        }
                        if (v34 >= v280) {
                          goto LABEL_1733;
                        }
                        int v151 = v19[3 * v9];
                        if (v33 > v151) {
                          goto LABEL_1733;
                        }
                      }
                    }
                  }
                  else
                  {
                    int v145 = *v26;
                    if (v33 > v145) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v145) {
                      goto LABEL_1733;
                    }
                    int v146 = *v23;
                    if (v33 > v146) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v146) {
                      goto LABEL_1733;
                    }
                    int v147 = *v22;
                    if (v33 > v147) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v147) {
                      goto LABEL_1733;
                    }
                    int v148 = *v21;
                    if (v33 > v148) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v148) {
                      goto LABEL_1733;
                    }
                    int v149 = v19[v15];
                    if (v33 > v149) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v149) {
                      goto LABEL_1733;
                    }
                    int v150 = *(v19 - 3);
                    if (v33 > v150) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v150) {
                      goto LABEL_1733;
                    }
                    int v151 = v19[3 * v9];
                    if (v33 > v151) {
                      goto LABEL_1733;
                    }
                  }
                  if (v34 < v151) {
                    continue;
                  }
                  goto LABEL_1733;
                }
                if (v33 <= v19[v13] || v33 <= *v21 || v33 <= *(v19 - 3)) {
                  goto LABEL_1733;
                }
                int v94 = *v23;
                if (v33 <= v94)
                {
                  int v339 = v19[v11];
                  if (v34 >= v94)
                  {
                    if (v33 <= v339 || v33 <= v19[v12] || v33 <= v19[v15] || v33 <= *v22) {
                      goto LABEL_1733;
                    }
                  }
                  else if (v33 <= v339 || v33 <= v19[v12] || v33 <= v19[v15] || v33 <= *v22)
                  {
                    goto LABEL_1733;
                  }
                }
                else
                {
                  if (v33 <= v19[v15]) {
                    goto LABEL_1733;
                  }
                  int v95 = *v26;
                  if (v33 > v95)
                  {
                    if (v33 <= v19[3 * v9]) {
                      goto LABEL_1733;
                    }
                    int v96 = *v22;
                    goto LABEL_1464;
                  }
                  int v447 = v19[v12];
                  if (v34 >= v95)
                  {
                    if (v33 <= v447 || v33 <= *v22) {
                      goto LABEL_1733;
                    }
                  }
                  else if (v33 <= v447 || v33 <= *v22)
                  {
                    goto LABEL_1733;
                  }
                }
                goto LABEL_1463;
              }
              int v68 = v19[3 * v9];
              if (v33 > v68)
              {
                int v69 = *v23;
                if (v33 > v69)
                {
                  int v70 = v19[v12];
                  if (v33 > v70)
                  {
                    if (v33 <= *(v19 - 3) || v33 <= v19[v15] || v33 <= *v21 || v33 <= v19[v13] || v33 <= *v22) {
                      goto LABEL_1733;
                    }
                    int v71 = v19[v14];
                    goto LABEL_250;
                  }
                  if (v34 >= v70)
                  {
                    if (v33 <= *v26
                      || v33 <= v19[v13]
                      || v33 <= *(v19 - 3)
                      || v33 <= v19[v15]
                      || v33 <= *v21
                      || v33 <= v19[v14])
                    {
                      goto LABEL_1733;
                    }
                    int v71 = *v22;
                    goto LABEL_250;
                  }
                  int v221 = v19[v13];
                  if (v33 > v221)
                  {
                    if (v33 <= *v26 || v33 <= *v22 || v33 <= v19[v15] || v33 <= *v21 || v33 <= v19[v14]) {
                      goto LABEL_1733;
                    }
                    int v71 = *(v19 - 3);
                    goto LABEL_250;
                  }
                  if (v34 >= v221) {
                    goto LABEL_1733;
                  }
                  int v355 = *v26;
                  if (v33 > v355) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v355) {
                    goto LABEL_1733;
                  }
                  int v356 = v19[v10];
                  if (v33 > v356) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v356) {
                    goto LABEL_1733;
                  }
                  int v357 = v19[v11];
                  if (v33 > v357) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v357) {
                    goto LABEL_1733;
                  }
                  int v358 = *v27;
                  if (v33 > v358 || v34 >= v358) {
                    goto LABEL_1733;
                  }
                  int v359 = *v25;
                  goto LABEL_1213;
                }
                if (v34 >= v69)
                {
                  int v252 = v19[v13];
                  if (v33 > v252)
                  {
                    if (v33 <= v19[v11] || v33 <= *v21 || v33 <= *(v19 - 3) || v33 <= v19[v12] || v33 <= v19[v15]) {
                      goto LABEL_1733;
                    }
                    int v171 = v19[v14];
                    goto LABEL_559;
                  }
                  if (v34 >= v252) {
                    goto LABEL_1733;
                  }
                  int v331 = *v26;
                  if (v33 > v331) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v331) {
                    goto LABEL_1733;
                  }
                  int v332 = v19[v12];
                  if (v33 > v332) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v332) {
                    goto LABEL_1733;
                  }
                  int v333 = v19[v10];
                  if (v33 > v333) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v333) {
                    goto LABEL_1733;
                  }
                  int v334 = v19[v11];
                  if (v33 > v334 || v34 >= v334) {
                    goto LABEL_1733;
                  }
                  int v335 = *v25;
                  goto LABEL_807;
                }
                int v169 = v19[v10];
                if (v33 > v169)
                {
                  int v170 = v19[v14];
                  if (v33 > v170)
                  {
                    if (v33 <= v19[v11] || v33 <= *v21 || v33 <= *(v19 - 3) || v33 <= v19[v15] || v33 <= v19[v12]) {
                      goto LABEL_1733;
                    }
                    int v171 = v19[v13];
LABEL_559:
                    if (v33 <= v171) {
                      goto LABEL_1733;
                    }
                    int v253 = *v22;
                    goto LABEL_965;
                  }
                  if (v34 >= v170) {
                    goto LABEL_1733;
                  }
                  int v344 = *v25;
                  if (v33 > v344) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v344) {
                    goto LABEL_1733;
                  }
                  int v345 = *v22;
                  if (v33 > v345) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v345) {
                    goto LABEL_1733;
                  }
                  int v346 = *v21;
                  if (v33 > v346 || v34 >= v346) {
                    goto LABEL_1733;
                  }
                  int v347 = v19[v15];
LABEL_1173:
                  if (v33 > v347 || v34 >= v347) {
                    goto LABEL_1733;
                  }
                  int v446 = *(v19 - 3);
LABEL_1317:
                  if (v33 > v446 || v34 >= v446) {
                    goto LABEL_1733;
                  }
                  int v336 = *v26;
LABEL_1610:
                  if (v33 > v336 || v34 >= v336) {
                    goto LABEL_1733;
                  }
                  continue;
                }
                if (v34 >= v169)
                {
                  int v386 = v19[v14];
                  if (v33 > v386)
                  {
                    if (v33 <= *v21 || v33 <= v19[v11] || v33 <= *(v19 - 3) || v33 <= v19[v12]) {
                      goto LABEL_1733;
                    }
                    int v291 = v19[v15];
LABEL_962:
                    if (v33 <= v291 || v33 <= *v22) {
                      goto LABEL_1733;
                    }
                    int v253 = v19[v13];
LABEL_965:
                    if (v33 <= v253) {
                      goto LABEL_1733;
                    }
                    continue;
                  }
                  if (v34 >= v386) {
                    goto LABEL_1733;
                  }
                  int v443 = *v25;
                  if (v33 > v443) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v443) {
                    goto LABEL_1733;
                  }
                  int v444 = *v22;
                  if (v33 > v444) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v444) {
                    goto LABEL_1733;
                  }
                  int v445 = v19[v15];
                  if (v33 > v445 || v34 >= v445) {
                    goto LABEL_1733;
                  }
                  int v347 = *v21;
                  goto LABEL_1173;
                }
                int v288 = *(v19 - 3);
                if (v33 > v288)
                {
                  int v289 = v19[v12];
                  if (v33 > v289)
                  {
                    int v290 = v19[v11];
                    if (v33 > v290)
                    {
                      if (v33 <= *v21 || v33 <= v19[v15]) {
                        goto LABEL_1733;
                      }
                      int v291 = v19[v14];
                      goto LABEL_962;
                    }
                    if (v34 >= v290) {
                      goto LABEL_1733;
                    }
                    int v494 = *v21;
                    if (v33 > v494) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v494) {
                      goto LABEL_1733;
                    }
                    int v495 = *v27;
                    if (v33 > v495 || v34 >= v495) {
                      goto LABEL_1733;
                    }
                    int v446 = *v25;
                    goto LABEL_1317;
                  }
                  if (v34 < v289)
                  {
                    int v452 = v19[v11];
                    goto LABEL_1602;
                  }
                  int v511 = *v21;
                  if (v33 > v511 || v34 >= v511) {
                    goto LABEL_1733;
                  }
                  int v482 = v19[v11];
LABEL_1385:
                  if (v33 > v482 || v34 >= v482) {
                    goto LABEL_1733;
                  }
                  goto LABEL_1503;
                }
                if (v34 < v288)
                {
                  int v414 = *v25;
                  if (v33 > v414) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v414) {
                    goto LABEL_1733;
                  }
                  int v415 = *v26;
                  if (v33 > v415 || v34 >= v415) {
                    goto LABEL_1733;
                  }
                  int v416 = *v21;
                  if (v33 > v416)
                  {
                    int v417 = v19[v12];
                    if (v33 > v417) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v417) {
                      goto LABEL_1733;
                    }
                    int v418 = *v27;
                    if (v33 > v418 || v34 >= v418) {
                      goto LABEL_1733;
                    }
                    int v336 = v19[v11];
                    goto LABEL_1610;
                  }
                  if (v34 < v416)
                  {
                    int v554 = *v27;
                    if (v33 <= v554 && v34 < v554) {
                      continue;
                    }
                    int v555 = v19[v15];
                    if (v33 > v555 || v34 >= v555) {
                      goto LABEL_1733;
                    }
                    int v336 = *v22;
                    goto LABEL_1610;
                  }
                  int v590 = v19[v12];
                  if (v33 > v590 || v34 >= v590) {
                    goto LABEL_1733;
                  }
                  int v335 = v19[v11];
LABEL_807:
                  if (v33 > v335 || v34 >= v335) {
                    goto LABEL_1733;
                  }
                  int v336 = *v27;
                  goto LABEL_1610;
                }
                int v480 = v19[v11];
                if (v33 > v480 || v34 >= v480) {
                  goto LABEL_1733;
                }
                int v481 = *v21;
                if (v33 > v481)
                {
                  int v482 = v19[v12];
                  goto LABEL_1385;
                }
                if (v34 < v481)
                {
LABEL_1503:
                  int v547 = *v27;
                  if (v33 > v547 || v34 >= v547) {
                    goto LABEL_1733;
                  }
                  int v548 = *v26;
                  goto LABEL_1607;
                }
                int v452 = v19[v12];
LABEL_1602:
                if (v33 > v452) {
                  goto LABEL_1733;
                }
                if (v34 >= v452) {
                  goto LABEL_1733;
                }
                int v576 = *v26;
                if (v33 > v576 || v34 >= v576) {
                  goto LABEL_1733;
                }
LABEL_1606:
                int v548 = *v27;
LABEL_1607:
                if (v33 > v548 || v34 >= v548) {
                  goto LABEL_1733;
                }
                int v336 = *v25;
                goto LABEL_1610;
              }
              if (v34 >= v68)
              {
                int v197 = *v26;
                if (v33 > v197 || v34 >= v197) {
                  goto LABEL_1733;
                }
                int v198 = v19[v10];
                if (v33 > v198)
                {
                  int v199 = v19[v14];
                  if (v33 > v199) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v199) {
                    goto LABEL_1733;
                  }
                  int v200 = *v25;
                  if (v33 > v200) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v200) {
                    goto LABEL_1733;
                  }
                  int v201 = *v22;
                  if (v33 > v201) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v201) {
                    goto LABEL_1733;
                  }
                  int v202 = *v21;
                  if (v33 > v202 || v34 >= v202) {
                    goto LABEL_1733;
                  }
                  int v203 = v19[v15];
                  goto LABEL_994;
                }
                if (v34 >= v198)
                {
                  int v392 = v19[v14];
                  if (v33 > v392) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v392) {
                    goto LABEL_1733;
                  }
                  int v393 = v19[v15];
                  if (v33 > v393) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v393) {
                    goto LABEL_1733;
                  }
                  int v394 = *v25;
                  if (v33 > v394) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v394) {
                    goto LABEL_1733;
                  }
                  int v395 = *v21;
                  if (v33 > v395 || v34 >= v395) {
                    goto LABEL_1733;
                  }
                  int v203 = *v22;
LABEL_994:
                  if (v33 > v203 || v34 >= v203) {
                    goto LABEL_1733;
                  }
                  int v396 = *v23;
                  goto LABEL_997;
                }
                int v301 = *v23;
                if (v33 > v301)
                {
                  int v302 = v19[v13];
                  if (v33 > v302) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v302) {
                    goto LABEL_1733;
                  }
                  int v303 = v19[v12];
                  if (v33 > v303) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v303) {
                    goto LABEL_1733;
                  }
                  int v304 = v19[v11];
                  if (v33 > v304 || v34 >= v304) {
                    goto LABEL_1733;
                  }
                  int v305 = *v25;
                  goto LABEL_1576;
                }
                if (v34 < v301)
                {
                  int v422 = *v25;
                  if (v33 > v422 || v34 >= v422) {
                    goto LABEL_1733;
                  }
                  int v423 = *v21;
                  if (v33 > v423)
                  {
                    int v424 = v19[v12];
                    if (v33 > v424) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v424) {
                      goto LABEL_1733;
                    }
                    int v425 = *v27;
                    if (v33 > v425 || v34 >= v425) {
                      goto LABEL_1733;
                    }
                    goto LABEL_1471;
                  }
                  if (v34 >= v423)
                  {
                    int v565 = v19[v12];
                    if (v33 > v565 || v34 >= v565) {
                      goto LABEL_1733;
                    }
                    int v305 = v19[v11];
LABEL_1576:
                    if (v33 > v305 || v34 >= v305) {
                      goto LABEL_1733;
                    }
                    int v397 = *v27;
                    goto LABEL_1579;
                  }
                  int v534 = *v27;
                  if (v33 <= v534 && v34 < v534)
                  {
                    int v535 = *(v19 - 3);
                    if (v33 <= v535 && v34 < v535) {
                      continue;
                    }
LABEL_1471:
                    int v397 = v19[v11];
LABEL_1579:
                    if (v33 > v397 || v34 >= v397) {
                      goto LABEL_1733;
                    }
                    continue;
                  }
                  int v577 = v19[v15];
                  if (v33 > v577 || v34 >= v577) {
                    goto LABEL_1733;
                  }
                  int v396 = *v22;
LABEL_997:
                  if (v33 > v396 || v34 >= v396) {
                    goto LABEL_1733;
                  }
                  int v397 = *(v19 - 3);
                  goto LABEL_1579;
                }
                int v487 = v19[v13];
                if (v33 > v487) {
                  goto LABEL_1733;
                }
                if (v34 >= v487) {
                  goto LABEL_1733;
                }
                int v488 = v19[v12];
                if (v33 > v488 || v34 >= v488) {
                  goto LABEL_1733;
                }
                int v489 = v19[v11];
LABEL_1513:
                if (v33 > v489 || v34 >= v489) {
                  goto LABEL_1733;
                }
                int v501 = *v27;
LABEL_1516:
                if (v33 > v501 || v34 >= v501) {
                  goto LABEL_1733;
                }
                int v397 = *v25;
                goto LABEL_1579;
              }
              int v132 = v19[v12];
              if (v33 > v132)
              {
                int v133 = *v21;
                if (v33 > v133) {
                  goto LABEL_1733;
                }
                if (v34 >= v133) {
                  goto LABEL_1733;
                }
                int v134 = *v23;
                if (v33 > v134) {
                  goto LABEL_1733;
                }
                if (v34 >= v134) {
                  goto LABEL_1733;
                }
                int v135 = *v26;
                if (v33 > v135 || v34 >= v135) {
                  goto LABEL_1733;
                }
                int v136 = *(v19 - 3);
                if (v33 <= v136)
                {
                  if (v34 >= v136)
                  {
                    int v509 = v19[v11];
                    if (v33 > v509 || v34 >= v509) {
                      goto LABEL_1733;
                    }
                    goto LABEL_1478;
                  }
                  int v448 = v19[v15];
                  if (v33 <= v448)
                  {
                    if (v34 < v448)
                    {
                      int v536 = *v22;
                      if (v33 <= v536 && v34 < v536)
                      {
                        int v537 = v19[v14];
                        if (v33 <= v537 && v34 < v537) {
                          continue;
                        }
                        int v538 = v19[v10];
                        goto LABEL_1481;
                      }
                    }
LABEL_1478:
                    int v539 = v19[v10];
                    if (v33 > v539 || v34 >= v539) {
                      goto LABEL_1733;
                    }
                    int v538 = *v27;
LABEL_1481:
                    if (v33 > v538 || v34 >= v538) {
                      goto LABEL_1733;
                    }
                    int v243 = *v25;
                    goto LABEL_1484;
                  }
                  int v138 = v19[v10];
                  if (v33 > v138) {
                    goto LABEL_1733;
                  }
                }
                else
                {
                  int v137 = v19[v11];
                  if (v33 > v137) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v137) {
                    goto LABEL_1733;
                  }
                  int v138 = v19[v10];
                  if (v33 > v138) {
                    goto LABEL_1733;
                  }
                }
                if (v34 >= v138) {
                  goto LABEL_1733;
                }
                goto LABEL_1606;
              }
              if (v34 >= v132)
              {
                int v321 = *v23;
                if (v33 > v321) {
                  goto LABEL_1733;
                }
                if (v34 >= v321) {
                  goto LABEL_1733;
                }
                int v322 = *v21;
                if (v33 > v322) {
                  goto LABEL_1733;
                }
                if (v34 >= v322) {
                  goto LABEL_1733;
                }
                int v323 = *v26;
                if (v33 > v323 || v34 >= v323) {
                  goto LABEL_1733;
                }
                int v324 = *(v19 - 3);
                if (v33 <= v324)
                {
                  if (v34 >= v324)
                  {
                    int v325 = v19[v11];
                    if (v33 > v325) {
                      goto LABEL_1733;
                    }
                    goto LABEL_1511;
                  }
                  int v498 = v19[v15];
                  if (v33 <= v498 && v34 < v498)
                  {
                    int v499 = *v22;
                    if (v33 <= v499 && v34 < v499)
                    {
                      int v500 = v19[v14];
                      if (v33 <= v500 && v34 < v500) {
                        continue;
                      }
                      int v501 = v19[v10];
                      goto LABEL_1516;
                    }
                  }
                }
                else
                {
                  int v325 = v19[v11];
                  if (v33 > v325) {
                    goto LABEL_1733;
                  }
LABEL_1511:
                  if (v34 >= v325) {
                    goto LABEL_1733;
                  }
                }
                int v489 = v19[v10];
                goto LABEL_1513;
              }
              int v234 = v19[v10];
              if (v33 <= v234)
              {
                if (v34 >= v234)
                {
                  int v436 = v19[v15];
                  if (v33 > v436) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v436) {
                    goto LABEL_1733;
                  }
                  int v437 = *v22;
                  if (v33 > v437) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v437) {
                    goto LABEL_1733;
                  }
                  int v438 = v19[v14];
                  if (v33 > v438 || v34 >= v438) {
                    goto LABEL_1733;
                  }
                  int v439 = *(v19 - 3);
                  if (v33 > v439)
                  {
                    int v440 = *v27;
                    if (v33 > v440) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v440) {
                      goto LABEL_1733;
                    }
                    int v441 = v19[v11];
                    if (v33 > v441 || v34 >= v441) {
                      goto LABEL_1733;
                    }
                    goto LABEL_1164;
                  }
                  if (v34 >= v439)
                  {
                    int v591 = *v27;
                    if (v33 > v591) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v591) {
                      goto LABEL_1733;
                    }
                    int v592 = v19[v11];
                    if (v33 > v592 || v34 >= v592) {
                      goto LABEL_1733;
                    }
LABEL_1657:
                    int v397 = v19[v13];
                    goto LABEL_1579;
                  }
                  int v556 = v19[v11];
                  if (v33 > v556)
                  {
                    int v557 = *v23;
                    if (v33 > v557) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v557) {
                      goto LABEL_1733;
                    }
                    int v558 = *v21;
                    if (v33 > v558 || v34 >= v558) {
                      goto LABEL_1733;
                    }
                    int v559 = *v26;
                    if (v33 <= v559)
                    {
                      if (v34 < v559) {
                        continue;
                      }
LABEL_1164:
                      int v442 = v19[v13];
                      goto LABEL_1671;
                    }
                    int v442 = v19[v13];
LABEL_1672:
                    if (v34 >= v442) {
                      goto LABEL_1733;
                    }
                    continue;
                  }
                  if (v34 < v556)
                  {
                    int v597 = v19[v13];
                    if (v33 <= v597 && v34 < v597) {
                      continue;
                    }
                    int v598 = *v23;
                    if (v33 > v598 || v34 >= v598) {
                      goto LABEL_1733;
                    }
                    int v589 = *v21;
                    goto LABEL_1647;
                  }
                  int v617 = *v23;
                  if (v33 > v617) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v617) {
                    goto LABEL_1733;
                  }
                  int v618 = *v21;
                  if (v33 > v618 || v34 >= v618) {
                    goto LABEL_1733;
                  }
                  int v619 = *v26;
                  if (v33 > v619 || v34 >= v619) {
                    goto LABEL_1657;
                  }
                }
                else
                {
                  int v365 = v19[v11];
                  if (v33 <= v365)
                  {
                    if (v34 < v365)
                    {
                      int v468 = *v27;
                      if (v33 <= v468)
                      {
                        if (v34 >= v468)
                        {
                          int v569 = *v22;
                          if (v33 > v569) {
                            goto LABEL_1733;
                          }
                          if (v34 >= v569) {
                            goto LABEL_1733;
                          }
                          int v570 = v19[v15];
                          if (v33 > v570) {
                            goto LABEL_1733;
                          }
                          if (v34 >= v570) {
                            goto LABEL_1733;
                          }
                          int v571 = *(v19 - 3);
                          if (v33 > v571 || v34 >= v571) {
                            goto LABEL_1733;
                          }
                          int v572 = v19[v14];
                          if (v33 <= v572)
                          {
                            if (v34 >= v572)
                            {
                              int v633 = *v21;
                              if (v33 > v633 || v34 >= v633) {
                                goto LABEL_1733;
                              }
                              goto LABEL_1798;
                            }
                            int v622 = v19[v13];
                            if (v33 <= v622)
                            {
                              if (v34 < v622) {
                                continue;
                              }
                              int v635 = *v21;
                              if (v33 > v635 || v34 >= v635) {
                                goto LABEL_1733;
                              }
LABEL_1646:
                              int v589 = *v23;
                              goto LABEL_1647;
                            }
                            int v623 = *v23;
                            if (v33 > v623 || v34 >= v623) {
                              goto LABEL_1733;
                            }
                            int v575 = *v21;
                          }
                          else
                          {
                            int v573 = *v21;
                            if (v33 > v573) {
                              goto LABEL_1733;
                            }
                            if (v34 >= v573) {
                              goto LABEL_1733;
                            }
                            int v574 = *v23;
                            if (v33 > v574 || v34 >= v574) {
                              goto LABEL_1733;
                            }
                            int v575 = *v25;
                          }
                          if (v33 > v575) {
                            goto LABEL_1733;
                          }
                        }
                        else
                        {
                          int v542 = *v25;
                          if (v33 > v542)
                          {
                            int v543 = v19[v15];
                            if (v33 > v543) {
                              goto LABEL_1733;
                            }
                            if (v34 >= v543) {
                              goto LABEL_1733;
                            }
                            int v544 = v19[v14];
                            if (v33 > v544 || v34 >= v544) {
                              goto LABEL_1733;
                            }
                            int v545 = v19[v13];
                            if (v33 <= v545)
                            {
                              if (v34 < v545) {
                                continue;
                              }
                              if (v34 >= *(v19 - 3) || v34 >= *v23 || v34 >= *v22) {
                                goto LABEL_1733;
                              }
                              int v442 = *v21;
                              goto LABEL_1672;
                            }
                            if (v34 >= *v21 || v34 >= *v23) {
                              goto LABEL_1733;
                            }
                            int v546 = *v22;
                            goto LABEL_1715;
                          }
                          if (v34 < v542)
                          {
                            int v588 = v19[v13];
                            if (v33 <= v588 && v34 < v588) {
                              continue;
                            }
                            goto LABEL_1646;
                          }
                          int v608 = v19[v15];
                          if (v33 > v608) {
                            goto LABEL_1733;
                          }
                          if (v34 >= v608) {
                            goto LABEL_1733;
                          }
                          int v609 = v19[v14];
                          if (v33 > v609 || v34 >= v609) {
                            goto LABEL_1733;
                          }
                          int v610 = v19[v13];
                          if (v33 > v610)
                          {
                            if (v34 >= *v21 || v34 >= *v22) {
                              goto LABEL_1733;
                            }
                            int v546 = *v23;
LABEL_1715:
                            if (v34 >= v546) {
                              goto LABEL_1733;
                            }
                            int v442 = *(v19 - 3);
                            goto LABEL_1672;
                          }
                          if (v34 < v610) {
                            continue;
                          }
                          if (v34 >= *v21 || v34 >= *v23) {
                            goto LABEL_1733;
                          }
                          int v575 = *v22;
                        }
                        if (v34 >= v575) {
                          goto LABEL_1733;
                        }
                        int v442 = *v26;
                        goto LABEL_1672;
                      }
                      int v469 = *(v19 - 3);
                      if (v33 > v469) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v469) {
                        goto LABEL_1733;
                      }
                      int v470 = v19[v15];
                      if (v33 > v470) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v470) {
                        goto LABEL_1733;
                      }
                      int v471 = *v22;
                      if (v33 > v471 || v34 >= v471) {
                        goto LABEL_1733;
                      }
                      int v472 = v19[v14];
                      if (v33 <= v472)
                      {
                        if (v34 < v472)
                        {
                          int v611 = v19[v13];
                          if (v33 > v611)
                          {
                            int v612 = *v21;
                            if (v33 > v612 || v34 >= v612 || v34 >= *v23) {
                              goto LABEL_1733;
                            }
                            int v243 = *v26;
                            goto LABEL_1485;
                          }
                          if (v34 < v611) {
                            continue;
                          }
                          int v628 = *v21;
                          if (v33 > v628 || v34 >= v628) {
                            goto LABEL_1733;
                          }
                          int v580 = *v23;
                          goto LABEL_1622;
                        }
                        int v624 = *v21;
                        if (v33 > v624 || v34 >= v624) {
                          goto LABEL_1733;
                        }
LABEL_1798:
                        int v634 = *v23;
                        if (v33 > v634 || v34 >= v634) {
                          goto LABEL_1733;
                        }
                        int v589 = *v25;
LABEL_1647:
                        if (v33 > v589 || v34 >= v589) {
                          goto LABEL_1733;
                        }
                        int v442 = *v26;
                        goto LABEL_1671;
                      }
                      int v473 = *v21;
                      if (v33 > v473) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v473) {
                        goto LABEL_1733;
                      }
                      int v474 = *v23;
                      if (v33 > v474) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v474) {
                        goto LABEL_1733;
                      }
                      int v475 = *v26;
                      if (v33 > v475 || v34 >= v475) {
                        goto LABEL_1733;
                      }
                      int v373 = *v25;
                      goto LABEL_914;
                    }
                    int v521 = *v21;
                    if (v33 > v521) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v521) {
                      goto LABEL_1733;
                    }
                    int v522 = *v23;
                    if (v33 > v522) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v522) {
                      goto LABEL_1733;
                    }
                    int v523 = *(v19 - 3);
                    if (v33 > v523 || v34 >= v523) {
                      goto LABEL_1733;
                    }
                    int v524 = *v26;
                    if (v33 > v524 || v34 >= v524)
                    {
                      int v594 = *v22;
                      if (v33 > v594) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v594) {
                        goto LABEL_1733;
                      }
                      int v595 = v19[v15];
                      if (v33 > v595 || v34 >= v595) {
                        goto LABEL_1733;
                      }
                      int v596 = v19[v13];
                      goto LABEL_1668;
                    }
                    int v525 = *v27;
                    if (v33 <= v525)
                    {
                      if (v34 >= v525)
                      {
                        int v630 = v19[v15];
                        if (v33 > v630) {
                          goto LABEL_1733;
                        }
                        if (v34 >= v630) {
                          goto LABEL_1733;
                        }
                        int v631 = *v22;
                        if (v33 > v631 || v34 >= v631) {
                          goto LABEL_1733;
                        }
                        int v632 = v19[v14];
                        if (v33 <= v632)
                        {
                          if (v34 < v632) {
                            continue;
                          }
                          int v442 = *v25;
                          goto LABEL_1671;
                        }
LABEL_1795:
                        int v442 = *v25;
                      }
                      else
                      {
                        int v620 = *v25;
                        if (v33 <= v620 && v34 < v620) {
                          continue;
                        }
                        int v621 = *v22;
                        if (v33 > v621 || v34 >= v621) {
                          goto LABEL_1733;
                        }
                        int v596 = v19[v15];
LABEL_1668:
                        if (v33 > v596 || v34 >= v596) {
                          goto LABEL_1733;
                        }
                        int v442 = v19[v14];
LABEL_1671:
                        if (v33 > v442) {
                          goto LABEL_1733;
                        }
                      }
                      goto LABEL_1672;
                    }
                    int v526 = v19[v15];
                    if (v33 > v526) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v526) {
                      goto LABEL_1733;
                    }
                    int v527 = *v22;
                    if (v33 > v527 || v34 >= v527) {
                      goto LABEL_1733;
                    }
                    int v528 = v19[v14];
                    if (v33 > v528 || v34 >= v528) {
                      goto LABEL_1795;
                    }
                  }
                  else
                  {
                    int v366 = *(v19 - 3);
                    if (v33 > v366) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v366) {
                      goto LABEL_1733;
                    }
                    int v367 = *v23;
                    if (v33 > v367) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v367) {
                      goto LABEL_1733;
                    }
                    int v368 = *v21;
                    if (v33 > v368 || v34 >= v368) {
                      goto LABEL_1733;
                    }
                    int v369 = *v26;
                    if (v33 > v369)
                    {
                      int v370 = *v22;
                      if (v33 > v370) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v370) {
                        goto LABEL_1733;
                      }
                      int v371 = v19[v15];
                      if (v33 > v371) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v371) {
                        goto LABEL_1733;
                      }
                      int v372 = v19[v14];
                      if (v33 > v372 || v34 >= v372) {
                        goto LABEL_1733;
                      }
                      int v373 = v19[v13];
LABEL_914:
                      if (v34 >= v373 || v33 > v373) {
                        goto LABEL_1733;
                      }
                      continue;
                    }
                    if (v34 >= v369)
                    {
                      int v602 = *v22;
                      if (v33 > v602) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v602) {
                        goto LABEL_1733;
                      }
                      int v603 = v19[v15];
                      if (v33 > v603 || v34 >= v603) {
                        goto LABEL_1733;
                      }
                      int v604 = v19[v13];
                      goto LABEL_1692;
                    }
                    int v581 = *v27;
                    if (v33 <= v581)
                    {
                      if (v34 < v581)
                      {
                        int v613 = *v25;
                        if (v33 > v613)
                        {
                          int v614 = *v22;
                          if (v33 > v614) {
                            goto LABEL_1733;
                          }
                          if (v34 >= v614) {
                            goto LABEL_1733;
                          }
                          int v615 = v19[v14];
                          if (v33 > v615 || v34 >= v615) {
                            goto LABEL_1733;
                          }
                          int v243 = v19[v15];
                          goto LABEL_1484;
                        }
                        if (v34 < v613) {
                          continue;
                        }
                        int v629 = *v22;
                        if (v33 > v629 || v34 >= v629) {
                          goto LABEL_1733;
                        }
                        int v604 = v19[v15];
LABEL_1692:
                        if (v33 > v604 || v34 >= v604) {
                          goto LABEL_1733;
                        }
                        int v243 = v19[v14];
                        goto LABEL_1484;
                      }
                      int v625 = *v22;
                      if (v33 > v625) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v625) {
                        goto LABEL_1733;
                      }
                      int v626 = v19[v15];
                      if (v33 > v626 || v34 >= v626) {
                        goto LABEL_1733;
                      }
                      int v627 = v19[v14];
                      if (v33 > v627 || v34 >= v627)
                      {
LABEL_1775:
                        int v243 = *v25;
                        goto LABEL_1485;
                      }
                    }
                    else
                    {
                      int v582 = *v22;
                      if (v33 > v582) {
                        goto LABEL_1733;
                      }
                      if (v34 >= v582) {
                        goto LABEL_1733;
                      }
                      int v583 = v19[v15];
                      if (v33 > v583 || v34 >= v583) {
                        goto LABEL_1733;
                      }
                      int v584 = v19[v14];
                      if (v33 > v584 || v34 >= v584) {
                        goto LABEL_1775;
                      }
                    }
                  }
                }
              }
              else
              {
                int v235 = *v22;
                if (v33 > v235) {
                  goto LABEL_1733;
                }
                if (v34 >= v235) {
                  goto LABEL_1733;
                }
                int v236 = v19[v15];
                if (v33 > v236) {
                  goto LABEL_1733;
                }
                if (v34 >= v236) {
                  goto LABEL_1733;
                }
                int v237 = v19[v14];
                if (v33 > v237 || v34 >= v237) {
                  goto LABEL_1733;
                }
                int v238 = *(v19 - 3);
                if (v33 > v238 || v34 >= v238)
                {
                  int v531 = *v27;
                  if (v33 > v531) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v531) {
                    goto LABEL_1733;
                  }
                  int v532 = v19[v11];
                  if (v33 > v532 || v34 >= v532) {
                    goto LABEL_1733;
                  }
                  goto LABEL_1437;
                }
                int v239 = v19[v11];
                if (v33 > v239)
                {
                  int v240 = *v23;
                  if (v33 > v240) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v240) {
                    goto LABEL_1733;
                  }
                  int v241 = *v21;
                  if (v33 > v241 || v34 >= v241) {
                    goto LABEL_1733;
                  }
                  int v242 = *v26;
                  if (v33 > v242)
                  {
                    int v243 = v19[v13];
                    goto LABEL_1485;
                  }
                  if (v34 < v242) {
                    continue;
                  }
LABEL_1437:
                  int v243 = v19[v13];
LABEL_1484:
                  if (v33 > v243) {
                    goto LABEL_1733;
                  }
LABEL_1485:
                  if (v34 >= v243) {
                    goto LABEL_1733;
                  }
                  continue;
                }
                if (v34 < v239)
                {
                  int v578 = v19[v13];
                  if (v33 <= v578 && v34 < v578) {
                    continue;
                  }
                  int v579 = *v23;
                  if (v33 > v579 || v34 >= v579) {
                    goto LABEL_1733;
                  }
                  int v580 = *v21;
LABEL_1622:
                  if (v33 > v580 || v34 >= v580) {
                    goto LABEL_1733;
                  }
                  int v243 = *v26;
                  goto LABEL_1484;
                }
                int v599 = *v23;
                if (v33 > v599) {
                  goto LABEL_1733;
                }
                if (v34 >= v599) {
                  goto LABEL_1733;
                }
                int v600 = *v21;
                if (v33 > v600 || v34 >= v600) {
                  goto LABEL_1733;
                }
                int v601 = *v26;
                if (v33 > v601 || v34 >= v601) {
                  goto LABEL_1437;
                }
              }
            }
            else
            {
              int v45 = v19[v15];
              if (v33 > v45)
              {
                int v46 = *v21;
                if (v33 <= v46)
                {
                  int v110 = *v25;
                  BOOL v112 = v33 <= v110 && v34 < v110;
                  if (v34 < v46)
                  {
                    if (!v112) {
                      goto LABEL_1733;
                    }
                    int v113 = v19[v14];
                    if (v33 > v113) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v113) {
                      goto LABEL_1733;
                    }
                    int v114 = v19[v12];
                    if (v33 > v114) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v114) {
                      goto LABEL_1733;
                    }
                    int v115 = v19[v10];
                    if (v33 > v115) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v115) {
                      goto LABEL_1733;
                    }
                    int v116 = v19[v13];
                    if (v33 > v116) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v116) {
                      goto LABEL_1733;
                    }
                    int v117 = v19[v11];
                    if (v33 > v117 || v34 >= v117) {
                      goto LABEL_1733;
                    }
                    int v118 = *v27;
                    goto LABEL_1326;
                  }
                  if (!v112) {
                    goto LABEL_1733;
                  }
                  int v183 = v19[v14];
                  if (v33 > v183) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v183) {
                    goto LABEL_1733;
                  }
                  int v184 = v19[v13];
                  if (v33 > v184) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v184) {
                    goto LABEL_1733;
                  }
                  int v185 = v19[v10];
                  if (v33 > v185) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v185) {
                    goto LABEL_1733;
                  }
                  int v186 = v19[v11];
                  if (v33 > v186) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v186) {
                    goto LABEL_1733;
                  }
                  int v187 = *v27;
                  if (v33 > v187) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v187) {
                    goto LABEL_1733;
                  }
                  int v188 = v19[3 * v9];
                  if (v33 > v188 || v34 >= v188) {
                    goto LABEL_1733;
                  }
                  int v189 = v19[v12];
                }
                else
                {
                  int v47 = v19[3 * v9];
                  if (v33 > v47)
                  {
                    if (v33 <= *(v19 - 3)) {
                      goto LABEL_1733;
                    }
                    int v48 = *v23;
                    if (v33 <= v48)
                    {
                      int v265 = v19[v11];
                      if (v34 < v48)
                      {
                        if (v33 <= v265 || v33 <= v19[v12] || v33 <= v19[v14] || v33 <= v19[v13]) {
                          goto LABEL_1733;
                        }
                        int v87 = *v22;
                        goto LABEL_1004;
                      }
                      if (v33 <= v265 || v33 <= v19[v12] || v33 <= v19[v13]) {
                        goto LABEL_1733;
                      }
                      int v377 = *v22;
                    }
                    else
                    {
                      if (v33 <= *v22) {
                        goto LABEL_1733;
                      }
                      if (v33 > *v26)
                      {
                        if (v33 > v19[v14]) {
                          continue;
                        }
                        int v49 = v19[v10];
                        goto LABEL_120;
                      }
                      if (v33 <= v19[v12]) {
                        goto LABEL_1733;
                      }
                      int v377 = v19[v13];
                    }
                    if (v33 <= v377) {
                      goto LABEL_1733;
                    }
                    int v87 = v19[v14];
LABEL_1004:
                    if (v33 > v87) {
                      continue;
                    }
                    goto LABEL_1733;
                  }
                  if (v34 >= v47)
                  {
                    if (v33 <= *v25 || v33 <= *(v19 - 3) || v33 <= *v23 || v33 <= v19[v14] && v33 <= v19[v10]) {
                      goto LABEL_1733;
                    }
                    int v156 = *v22;
                    goto LABEL_525;
                  }
                  int v155 = v19[v10];
                  if (v33 > v155)
                  {
                    if (v33 <= *v22 || v33 <= *v23 || v33 <= *v25) {
                      goto LABEL_1733;
                    }
                    int v156 = *(v19 - 3);
                    goto LABEL_525;
                  }
                  int v281 = v19[v14];
                  if (v34 >= v155)
                  {
                    if (v33 <= v281 || v33 <= *v25) {
                      goto LABEL_1733;
                    }
LABEL_952:
                    if (v33 <= *v23 || v33 <= *v22 || v33 <= *v26) {
                      goto LABEL_1733;
                    }
                    int v87 = *(v19 - 3);
                    goto LABEL_1004;
                  }
                  if (v33 > v281)
                  {
                    if (v33 <= *v25) {
                      goto LABEL_1733;
                    }
                    goto LABEL_952;
                  }
                  if (v34 >= v281) {
                    goto LABEL_1733;
                  }
                  int v410 = *v25;
                  if (v33 > v410) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v410) {
                    goto LABEL_1733;
                  }
                  int v411 = v19[v12];
                  if (v33 > v411) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v411) {
                    goto LABEL_1733;
                  }
                  int v412 = v19[v11];
                  if (v33 > v412) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v412) {
                    goto LABEL_1733;
                  }
                  int v413 = *v27;
                  if (v33 > v413 || v34 >= v413) {
                    goto LABEL_1733;
                  }
                  int v189 = v19[v13];
                }
LABEL_1329:
                if (v33 > v189 || v34 >= v189) {
                  goto LABEL_1733;
                }
                continue;
              }
              if (v34 >= v45)
              {
                int v140 = *v25;
                if (v33 > v140)
                {
                  if (v33 <= *v27 || v33 <= *v22 || v33 <= *(v19 - 3) || v33 <= v19[v10] || v33 <= *v23) {
                    goto LABEL_1733;
                  }
                  int v141 = *v21;
LABEL_248:
                  if (v33 <= v141) {
                    goto LABEL_1733;
                  }
                  int v71 = *v26;
LABEL_250:
                  if (v33 <= v71) {
                    goto LABEL_1733;
                  }
                  continue;
                }
                if (v34 >= v140) {
                  goto LABEL_1733;
                }
                int v204 = v19[v14];
                if (v33 > v204) {
                  goto LABEL_1733;
                }
                if (v34 >= v204) {
                  goto LABEL_1733;
                }
                int v205 = v19[v12];
                if (v33 > v205) {
                  goto LABEL_1733;
                }
                if (v34 >= v205) {
                  goto LABEL_1733;
                }
                int v206 = v19[v10];
                if (v33 > v206) {
                  goto LABEL_1733;
                }
                if (v34 >= v206) {
                  goto LABEL_1733;
                }
                int v207 = v19[v13];
                if (v33 > v207) {
                  goto LABEL_1733;
                }
LABEL_1205:
                if (v34 >= v207) {
                  goto LABEL_1733;
                }
                int v453 = *v27;
                goto LABEL_1207;
              }
              int v85 = v19[v13];
              if (v33 > v85)
              {
                if (v33 <= *v27 || v33 <= *v22 || v33 <= *(v19 - 3) || v33 <= *v23) {
                  goto LABEL_1733;
                }
                int v86 = v19[v10];
                goto LABEL_117;
              }
              if (v34 >= v85)
              {
                if (v33 <= *v22
                  || v33 <= *v27
                  || v33 <= *(v19 - 3)
                  || v33 <= v19[v10]
                  || v33 <= *v23
                  || v33 <= *v21
                  || v33 <= *v26)
                {
                  goto LABEL_1733;
                }
                int v71 = *v25;
                goto LABEL_250;
              }
              int v174 = v19[v14];
              if (v33 > v174)
              {
                if (v33 <= *v27 || v33 <= *v22 || v33 <= v19[v10] || v33 <= *(v19 - 3) || v33 <= *v23 || v33 <= *v25) {
                  goto LABEL_1733;
                }
                int v156 = *v21;
LABEL_525:
                if (v33 <= v156) {
                  goto LABEL_1733;
                }
                int v87 = *v26;
                goto LABEL_1004;
              }
              if (v34 >= v174)
              {
                if (v33 <= *v27 || v33 <= *v22 || v33 <= *(v19 - 3) || v33 <= v19[v10] || v33 <= *v23 || v33 <= *v21) {
                  goto LABEL_1733;
                }
                int v141 = *v25;
                goto LABEL_248;
              }
              int v292 = *(v19 - 3);
              if (v33 > v292)
              {
                int v293 = v19[v10];
                if (v33 > v293)
                {
                  int v294 = *v22;
                  if (v33 > v294)
                  {
                    if (v33 <= *v27) {
                      goto LABEL_1733;
                    }
                    int v86 = *v23;
LABEL_117:
                    if (v33 <= v86 || v33 <= *v21) {
                      goto LABEL_1733;
                    }
                    int v49 = *v26;
LABEL_120:
                    if (v33 <= v49) {
                      goto LABEL_1733;
                    }
                    int v87 = *v25;
                    goto LABEL_1004;
                  }
                  if (v34 >= v294) {
                    goto LABEL_1733;
                  }
                  int v496 = *v27;
                  if (v33 > v496) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v496) {
                    goto LABEL_1733;
                  }
                  int v497 = v19[v12];
                  if (v33 > v497 || v34 >= v497) {
                    goto LABEL_1733;
                  }
                  int v118 = v19[v11];
LABEL_1326:
                  if (v33 > v118 || v34 >= v118) {
                    goto LABEL_1733;
                  }
                  int v189 = v19[3 * v9];
                  goto LABEL_1329;
                }
                if (v34 < v293)
                {
                  int v207 = v19[v12];
                  if (v33 > v207) {
                    goto LABEL_1733;
                  }
                  goto LABEL_1205;
                }
                int v512 = *v22;
                if (v33 > v512) {
                  goto LABEL_1733;
                }
                if (v34 >= v512) {
                  goto LABEL_1733;
                }
                int v513 = *v27;
                if (v33 > v513 || v34 >= v513) {
                  goto LABEL_1733;
                }
                int v453 = v19[v12];
LABEL_1207:
                if (v33 > v453 || v34 >= v453) {
                  goto LABEL_1733;
                }
                int v454 = v19[v11];
LABEL_1210:
                if (v33 > v454 || v34 >= v454) {
                  goto LABEL_1733;
                }
                goto LABEL_1212;
              }
              if (v34 >= v292)
              {
                int v483 = *v27;
                if (v33 > v483) {
                  goto LABEL_1733;
                }
                if (v34 >= v483) {
                  goto LABEL_1733;
                }
                int v484 = v19[v11];
                if (v33 > v484) {
                  goto LABEL_1733;
                }
                if (v34 >= v484) {
                  goto LABEL_1733;
                }
                int v485 = v19[v12];
                if (v33 > v485 || v34 >= v485) {
                  goto LABEL_1733;
                }
                int v486 = *v22;
                if (v33 > v486 || v34 >= v486)
                {
                  int v454 = v19[v10];
                  goto LABEL_1210;
                }
LABEL_1212:
                int v359 = v19[3 * v9];
LABEL_1213:
                if (v33 > v359 || v34 >= v359) {
                  goto LABEL_1733;
                }
                continue;
              }
              int v419 = v19[v12];
              if (v33 > v419)
              {
                int v420 = *v26;
                if (v33 > v420) {
                  goto LABEL_1733;
                }
                if (v34 >= v420) {
                  goto LABEL_1733;
                }
                int v421 = *v23;
                if (v33 > v421) {
                  goto LABEL_1733;
                }
                goto LABEL_1659;
              }
              if (v34 >= v419)
              {
                int v552 = *v26;
                if (v33 > v552) {
                  goto LABEL_1733;
                }
                if (v34 >= v552) {
                  goto LABEL_1733;
                }
                int v421 = *v23;
                if (v33 > v421) {
                  goto LABEL_1733;
                }
                goto LABEL_1659;
              }
              int v506 = v19[v11];
              if (v33 > v506)
              {
                int v507 = *v23;
                if (v33 > v507) {
                  goto LABEL_1733;
                }
                if (v34 >= v507) {
                  goto LABEL_1733;
                }
                int v508 = *v22;
                if (v33 > v508 || v34 >= v508) {
                  goto LABEL_1733;
                }
                int v454 = *v21;
                goto LABEL_1210;
              }
              if (v34 >= v506)
              {
                int v421 = *v23;
                if (v33 > v421) {
                  goto LABEL_1733;
                }
LABEL_1659:
                if (v34 >= v421) {
                  goto LABEL_1733;
                }
                int v593 = *v21;
                if (v33 > v593 || v34 >= v593) {
                  goto LABEL_1733;
                }
                int v454 = *v22;
                goto LABEL_1210;
              }
              int v560 = v19[3 * v9];
              if (v33 > v560 || v34 >= v560) {
                goto LABEL_1733;
              }
              int v561 = *v22;
              if (v33 > v561 || v34 >= v561)
              {
                int v562 = v19[v10];
                if (v33 > v562 || v34 >= v562) {
                  goto LABEL_1733;
                }
                int v359 = *v27;
                goto LABEL_1213;
              }
            }
          }
        }
        else
        {
          int v35 = v19[-3 * v9];
          if (v33 <= v35)
          {
            if (v34 < v35)
            {
              int v50 = v19[v15];
              if (v33 > v50)
              {
                int v51 = v19[v13];
                if (v33 <= v51)
                {
                  int v119 = *v27;
                  BOOL v121 = v33 <= v119 && v34 < v119;
                  if (v34 < v51)
                  {
                    if (!v121) {
                      goto LABEL_1733;
                    }
                    int v122 = *v22;
                    if (v33 > v122) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v122) {
                      goto LABEL_1733;
                    }
                    int v123 = *v23;
                    if (v33 > v123) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v123) {
                      goto LABEL_1733;
                    }
                    int v124 = v19[v10];
                    if (v33 > v124) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v124) {
                      goto LABEL_1733;
                    }
                    int v125 = *(v19 - 3);
                    if (v33 > v125) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v125) {
                      goto LABEL_1733;
                    }
                    int v126 = *v21;
                    if (v33 > v126) {
                      goto LABEL_1733;
                    }
LABEL_209:
                    if (v34 >= v126) {
                      goto LABEL_1733;
                    }
                    int v127 = *v26;
                    if (v33 > v127 || v34 >= v127) {
                      goto LABEL_1733;
                    }
                    int v128 = *v25;
                    goto LABEL_1128;
                  }
                  if (!v121) {
                    goto LABEL_1733;
                  }
                  int v190 = *v22;
                  if (v33 > v190) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v190) {
                    goto LABEL_1733;
                  }
                  int v191 = *(v19 - 3);
                  if (v33 > v191) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v191) {
                    goto LABEL_1733;
                  }
                  int v192 = v19[v10];
                  if (v33 > v192) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v192) {
                    goto LABEL_1733;
                  }
                  int v193 = *v23;
                  if (v33 > v193) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v193) {
                    goto LABEL_1733;
                  }
                  int v194 = *v21;
                  if (v33 > v194) {
                    goto LABEL_1733;
                  }
                }
                else
                {
                  int v52 = v19[v14];
                  if (v33 > v52)
                  {
                    int v53 = *(v19 - 3);
                    if (v33 > v53)
                    {
                      if (v33 <= v19[v12])
                      {
                        if (v33 <= *v26) {
                          goto LABEL_1733;
                        }
                        int v266 = *v23;
                      }
                      else
                      {
                        int v54 = v19[v11];
                        if (v33 > v54)
                        {
                          if (v33 <= v19[3 * v9]) {
                            goto LABEL_1733;
                          }
                          if (v33 > *v22) {
                            continue;
                          }
                          int v55 = v19[v10];
                          goto LABEL_831;
                        }
                        int v266 = *v23;
                        if (v34 < v54)
                        {
                          if (v33 <= v266 || v33 <= *v22 || v33 <= *v21) {
                            goto LABEL_1733;
                          }
                          int v92 = v19[3 * v9];
                          goto LABEL_1018;
                        }
                      }
                      if (v33 <= v266 || v33 <= *v21) {
                        goto LABEL_1733;
                      }
                      int v337 = *v22;
                      goto LABEL_1136;
                    }
                    if (v34 >= v53)
                    {
                      if (v33 <= *v27 || v33 <= v19[v12]) {
                        goto LABEL_1733;
                      }
                      if (v33 <= *v22)
                      {
                        int v217 = v19[v10];
                        goto LABEL_1134;
                      }
                      goto LABEL_1135;
                    }
                    int v216 = v19[v10];
                    if (v33 > v216)
                    {
                      int v89 = v19[v12];
LABEL_443:
                      if (v33 <= v89) {
                        goto LABEL_1733;
                      }
                      int v217 = *v27;
LABEL_1134:
                      if (v33 <= v217) {
                        goto LABEL_1733;
                      }
LABEL_1135:
                      int v337 = v19[v11];
LABEL_1136:
                      if (v33 <= v337) {
                        goto LABEL_1733;
                      }
                      int v178 = v19[3 * v9];
LABEL_1138:
                      if (v33 > v178) {
                        continue;
                      }
                      goto LABEL_1733;
                    }
                    int v351 = *v22;
                    if (v34 >= v216)
                    {
                      if (v33 <= v351) {
                        goto LABEL_1733;
                      }
LABEL_1132:
                      if (v33 <= *v27) {
                        goto LABEL_1733;
                      }
                      int v217 = v19[v12];
                      goto LABEL_1134;
                    }
                    if (v33 > v351) {
                      goto LABEL_1132;
                    }
                    if (v34 >= v351) {
                      goto LABEL_1733;
                    }
                    int v352 = *v27;
                    if (v33 > v352) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v352) {
                      goto LABEL_1733;
                    }
                    int v353 = *v23;
                    if (v33 > v353) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v353) {
                      goto LABEL_1733;
                    }
                    int v126 = *v21;
                    if (v33 > v126) {
                      goto LABEL_1733;
                    }
                    goto LABEL_209;
                  }
                  int v157 = *v27;
                  BOOL v159 = v33 <= v157 && v34 < v157;
                  if (v34 < v52)
                  {
                    if (!v159) {
                      goto LABEL_1733;
                    }
                    int v160 = *v22;
                    if (v33 > v160) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v160) {
                      goto LABEL_1733;
                    }
                    int v161 = *(v19 - 3);
                    if (v33 > v161) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v161) {
                      goto LABEL_1733;
                    }
                    int v162 = v19[v10];
                    if (v33 > v162) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v162) {
                      goto LABEL_1733;
                    }
                    int v163 = *v23;
                    if (v33 > v163) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v163) {
                      goto LABEL_1733;
                    }
                    int v164 = *v25;
                    if (v33 > v164 || v34 >= v164) {
                      goto LABEL_1733;
                    }
                    int v165 = *v21;
                    goto LABEL_1125;
                  }
                  if (!v159) {
                    goto LABEL_1733;
                  }
                  int v247 = *v22;
                  if (v33 > v247) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v247) {
                    goto LABEL_1733;
                  }
                  int v248 = *(v19 - 3);
                  if (v33 > v248) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v248) {
                    goto LABEL_1733;
                  }
                  int v249 = v19[v10];
                  if (v33 > v249) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v249) {
                    goto LABEL_1733;
                  }
                  int v250 = *v23;
                  if (v33 > v250) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v250) {
                    goto LABEL_1733;
                  }
                  int v194 = *v21;
                  if (v33 > v194) {
                    goto LABEL_1733;
                  }
                }
                if (v34 >= v194) {
                  goto LABEL_1733;
                }
                int v165 = *v25;
                goto LABEL_1125;
              }
              if (v34 < v50)
              {
                int v88 = *v21;
                if (v33 > v88)
                {
                  if (v33 <= *v25 || v33 <= v19[v14] || v33 <= v19[v12] || v33 <= v19[v10]) {
                    goto LABEL_1733;
                  }
                  int v89 = v19[v13];
                  goto LABEL_443;
                }
                if (v34 >= v88)
                {
                  if (v33 <= *v25 || v33 <= v19[v14]) {
                    goto LABEL_1733;
                  }
LABEL_578:
                  if (v33 <= v19[v12] || v33 <= v19[v10]) {
                    goto LABEL_1733;
                  }
                  int v223 = v19[v13];
LABEL_581:
                  if (v33 <= v223 || v33 <= v19[v11]) {
                    goto LABEL_1733;
                  }
                  int v254 = *v27;
LABEL_737:
                  if (v33 <= v254) {
                    goto LABEL_1733;
                  }
                  int v75 = v19[3 * v9];
LABEL_739:
                  if (v33 <= v75) {
                    goto LABEL_1733;
                  }
                  continue;
                }
                int v175 = v19[3 * v9];
                if (v33 > v175)
                {
                  int v176 = v19[v10];
                  if (v33 > v176)
                  {
                    int v177 = *v25;
                    if (v33 > v177)
                    {
                      if (v33 <= v19[v14] || v33 <= v19[v12] || v33 <= v19[v11] || v33 <= *v27) {
                        goto LABEL_1733;
                      }
                      int v178 = v19[v13];
                      goto LABEL_1138;
                    }
                    if (v34 >= v177) {
                      goto LABEL_1733;
                    }
                    int v402 = v19[v14];
                    if (v33 > v402) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v402) {
                      goto LABEL_1733;
                    }
                    int v403 = *v23;
                    if (v33 > v403) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v403) {
                      goto LABEL_1733;
                    }
                    int v404 = *v22;
                    if (v33 > v404) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v404) {
                      goto LABEL_1733;
                    }
                    int v405 = *v26;
                    if (v33 > v405 || v34 >= v405) {
                      goto LABEL_1733;
                    }
                    int v128 = *(v19 - 3);
                    goto LABEL_1128;
                  }
                  if (v34 >= v176)
                  {
                    int v429 = v19[v14];
                    if (v33 > v429) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v429) {
                      goto LABEL_1733;
                    }
                    int v430 = *v25;
                    if (v33 > v430) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v430) {
                      goto LABEL_1733;
                    }
                    int v431 = *v23;
                    if (v33 > v431) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v431) {
                      goto LABEL_1733;
                    }
                    int v350 = *v22;
                    if (v33 > v350) {
                      goto LABEL_1733;
                    }
                  }
                  else
                  {
                    int v348 = *v22;
                    if (v33 > v348) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v348) {
                      goto LABEL_1733;
                    }
                    int v349 = *v23;
                    if (v33 > v349) {
                      goto LABEL_1733;
                    }
                    if (v34 >= v349) {
                      goto LABEL_1733;
                    }
                    int v350 = *v25;
                    if (v33 > v350) {
                      goto LABEL_1733;
                    }
                  }
                  if (v34 >= v350) {
                    goto LABEL_1733;
                  }
                  int v165 = *(v19 - 3);
LABEL_1125:
                  if (v33 > v165 || v34 >= v165) {
                    goto LABEL_1733;
                  }
                  int v128 = *v26;
LABEL_1128:
                  if (v33 > v128 || v34 >= v128) {
                    goto LABEL_1733;
                  }
                  continue;
                }
                if (v34 >= v175)
                {
                  int v387 = *v25;
                  if (v33 > v387) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v387) {
                    goto LABEL_1733;
                  }
                  int v388 = *(v19 - 3);
                  if (v33 > v388) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v388) {
                    goto LABEL_1733;
                  }
                  int v389 = *v23;
                  if (v33 > v389 || v34 >= v389) {
                    goto LABEL_1733;
                  }
                  int v390 = v19[v14];
                  if (v33 > v390 || v34 >= v390)
                  {
                    int v391 = v19[v10];
                    if (v33 > v391 || v34 >= v391) {
                      goto LABEL_1733;
                    }
                  }
                  int v213 = *v22;
                  goto LABEL_1534;
                }
                int v295 = *(v19 - 3);
                if (v33 > v295 || v34 >= v295) {
                  goto LABEL_1733;
                }
                int v296 = *v23;
                if (v33 > v296)
                {
                  int v297 = v19[v11];
                  if (v33 > v297) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v297) {
                    goto LABEL_1733;
                  }
                  int v298 = v19[v12];
                  if (v33 > v298) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v298) {
                    goto LABEL_1733;
                  }
                  int v299 = v19[v13];
                  if (v33 > v299 || v34 >= v299) {
                    goto LABEL_1733;
                  }
                  int v300 = *v22;
                  goto LABEL_1400;
                }
                if (v34 >= v296)
                {
                  int v514 = v19[v11];
                  if (v33 > v514) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v514) {
                    goto LABEL_1733;
                  }
                  int v515 = v19[v12];
                  if (v33 > v515) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v515) {
                    goto LABEL_1733;
                  }
                  int v516 = *v22;
                  if (v33 > v516 || v34 >= v516) {
                    goto LABEL_1733;
                  }
                  int v300 = v19[v13];
LABEL_1400:
                  if (v33 > v300 || v34 >= v300) {
                    goto LABEL_1733;
                  }
                  int v105 = v19[v14];
                }
                else
                {
                  int v455 = *v22;
                  if (v33 > v455 || v34 >= v455) {
                    goto LABEL_1733;
                  }
                  int v456 = v19[v14];
                  if (v33 <= v456 && v34 < v456)
                  {
                    int v457 = *v26;
                    if (v33 <= v457 && v34 < v457) {
                      continue;
                    }
                    int v458 = v19[v12];
                    if (v33 > v458 || v34 >= v458) {
                      goto LABEL_1733;
                    }
                    int v105 = v19[v13];
                    goto LABEL_1537;
                  }
                  int v553 = v19[v10];
                  if (v33 > v553 || v34 >= v553) {
                    goto LABEL_1733;
                  }
                  int v213 = *v25;
LABEL_1534:
                  if (v33 > v213 || v34 >= v213) {
                    goto LABEL_1733;
                  }
                  int v105 = *v26;
                }
LABEL_1537:
                if (v33 > v105 || v34 >= v105) {
                  goto LABEL_1733;
                }
                continue;
              }
              int v142 = *v25;
              if (v33 > v142)
              {
                if (v33 <= v19[v14]) {
                  goto LABEL_1733;
                }
                goto LABEL_578;
              }
              if (v34 >= v142) {
                goto LABEL_1733;
              }
              int v208 = *v27;
              if (v33 > v208) {
                goto LABEL_1733;
              }
              if (v34 >= v208) {
                goto LABEL_1733;
              }
              int v209 = *v22;
              if (v33 > v209) {
                goto LABEL_1733;
              }
              if (v34 >= v209) {
                goto LABEL_1733;
              }
              int v210 = *(v19 - 3);
              if (v33 > v210) {
                goto LABEL_1733;
              }
              if (v34 >= v210) {
                goto LABEL_1733;
              }
              int v211 = v19[v10];
              if (v33 > v211) {
                goto LABEL_1733;
              }
              if (v34 >= v211) {
                goto LABEL_1733;
              }
              int v212 = *v23;
              if (v33 > v212 || v34 >= v212) {
                goto LABEL_1733;
              }
              int v213 = *v21;
              goto LABEL_1534;
            }
            int v72 = v19[v14];
            if (v33 > v72)
            {
              if (v33 <= v19[v13]) {
                goto LABEL_1733;
              }
              int v73 = v19[v12];
              if (v33 <= v73)
              {
                int v172 = *v26;
                if (v34 >= v73)
                {
                  if (v33 <= v172 || v33 <= *v23 || v33 <= *v22) {
                    goto LABEL_1733;
                  }
                  int v173 = *v21;
                }
                else
                {
                  if (v33 <= v172 || v33 <= *v21 || v33 <= *v22) {
                    goto LABEL_1733;
                  }
                  int v173 = *v23;
                }
                if (v33 <= v173 || v33 <= v19[v15]) {
                  goto LABEL_1733;
                }
                int v254 = *(v19 - 3);
                goto LABEL_737;
              }
              int v74 = v19[v15];
              if (v33 <= v74)
              {
                int v222 = *v25;
                if (v34 < v74)
                {
                  if (v33 <= v222) {
                    goto LABEL_1733;
                  }
                  int v223 = v19[v10];
                  goto LABEL_581;
                }
                if (v33 <= v222) {
                  goto LABEL_1733;
                }
                int v269 = v19[v10];
              }
              else
              {
                if (v33 > *v22)
                {
                  if (v33 <= v19[3 * v9]) {
                    goto LABEL_1733;
                  }
                  if (v33 <= v19[v11])
                  {
                    if (v33 <= *v23 || v33 <= *v21) {
                      goto LABEL_1733;
                    }
                    int v75 = *(v19 - 3);
                  }
                  else
                  {
                    if (v33 > *(v19 - 3)) {
                      continue;
                    }
                    int v75 = *v27;
                  }
                  goto LABEL_739;
                }
                int v269 = v19[v10];
              }
              if (v33 <= v269 || v33 <= *v27) {
                goto LABEL_1733;
              }
              int v254 = v19[v11];
              goto LABEL_737;
            }
            if (v34 >= v72) {
              goto LABEL_1733;
            }
            int v97 = v19[v13];
            if (v33 > v97) {
              goto LABEL_1733;
            }
            if (v34 >= v97) {
              goto LABEL_1733;
            }
            int v98 = *v21;
            if (v33 > v98) {
              goto LABEL_1733;
            }
            if (v34 >= v98) {
              goto LABEL_1733;
            }
            int v99 = *(v19 - 3);
            if (v33 > v99 || v34 >= v99) {
              goto LABEL_1733;
            }
            int v100 = *v23;
            if (v33 > v100)
            {
              int v101 = v19[v11];
              if (v33 > v101) {
                goto LABEL_1733;
              }
              if (v34 >= v101) {
                goto LABEL_1733;
              }
              int v102 = v19[v12];
              if (v33 > v102) {
                goto LABEL_1733;
              }
              if (v34 >= v102) {
                goto LABEL_1733;
              }
              int v103 = v19[v15];
              if (v33 > v103) {
                goto LABEL_1733;
              }
              if (v34 >= v103) {
                goto LABEL_1733;
              }
              int v104 = *v22;
              if (v33 > v104 || v34 >= v104) {
                goto LABEL_1733;
              }
              int v105 = v19[3 * v9];
              goto LABEL_1537;
            }
            if (v34 >= v100)
            {
              int v426 = v19[v11];
              if (v33 > v426) {
                goto LABEL_1733;
              }
              if (v34 >= v426) {
                goto LABEL_1733;
              }
              int v427 = v19[v12];
              if (v33 > v427) {
                goto LABEL_1733;
              }
              if (v34 >= v427) {
                goto LABEL_1733;
              }
              int v428 = v19[v15];
              if (v33 > v428 || v34 >= v428) {
                goto LABEL_1733;
              }
              int v118 = *v22;
              goto LABEL_1326;
            }
            int v340 = v19[v15];
            if (v33 > v340) {
              goto LABEL_1733;
            }
            if (v34 >= v340) {
              goto LABEL_1733;
            }
            int v341 = v19[3 * v9];
            if (v33 > v341 || v34 >= v341) {
              goto LABEL_1733;
            }
            int v342 = *v26;
            if (v33 > v342 || v34 >= v342)
            {
              int v343 = v19[v12];
              if (v33 > v343 || v34 >= v343) {
                goto LABEL_1733;
              }
            }
            int v189 = *v22;
            goto LABEL_1329;
          }
          int v36 = v19[3 * v9];
          if (v33 <= v36)
          {
            if (v34 >= v36)
            {
              if (v33 <= *v26) {
                goto LABEL_1733;
              }
              int v90 = v19[v10];
              if (v33 <= v90)
              {
                int v179 = v19[v14];
                if (v34 >= v90)
                {
                  if (v33 <= v179 || v33 <= v19[v15] || v33 <= *v21 || v33 <= *v25) {
                    goto LABEL_1733;
                  }
                  int v180 = *v22;
                }
                else
                {
                  if (v33 <= v179 || v33 <= *v25 || v33 <= *v22 || v33 <= *v21) {
                    goto LABEL_1733;
                  }
                  int v180 = v19[v15];
                }
                if (v33 <= v180)
                {
LABEL_1733:
                  int v28 = v18;
                  uint64_t v18 = v29;
                  continue;
                }
                int v251 = *v23;
              }
              else
              {
                int v91 = *v23;
                if (v33 <= v91)
                {
                  int v229 = v19[v13];
                  if (v34 >= v91)
                  {
                    if (v33 <= v229 || v33 <= v19[v12] || v33 <= v19[v11]) {
                      goto LABEL_1733;
                    }
                    int v55 = *v25;
                    goto LABEL_831;
                  }
                  if (v33 <= v229 || v33 <= v19[v12] || v33 <= v19[v11]) {
                    goto LABEL_1733;
                  }
                  int v131 = *v27;
                  goto LABEL_481;
                }
                if (v33 <= *v25) {
                  goto LABEL_1733;
                }
                if (v33 <= *v21)
                {
                  int v196 = v19[v12];
                  goto LABEL_829;
                }
                if (v33 > *v27)
                {
                  if (v33 > *(v19 - 3)) {
                    continue;
                  }
                  int v92 = v19[v11];
                  goto LABEL_1018;
                }
                if (v33 <= v19[v15]) {
                  goto LABEL_1733;
                }
                int v251 = *v22;
              }
LABEL_1016:
              if (v33 <= v251) {
                goto LABEL_1733;
              }
              int v92 = *(v19 - 3);
              goto LABEL_1018;
            }
            int v64 = *v23;
            if (v33 <= v64)
            {
              if (v34 >= v64)
              {
                int v195 = v19[v13];
                if (v33 > v195)
                {
                  if (v33 <= *v26 || v33 <= v19[v12] || v33 <= v19[v10]) {
                    goto LABEL_1733;
                  }
                  int v196 = *v25;
LABEL_829:
                  if (v33 <= v196) {
                    goto LABEL_1733;
                  }
                  int v55 = v19[v11];
LABEL_831:
                  if (v33 <= v55) {
                    goto LABEL_1733;
                  }
                  int v92 = *v27;
LABEL_1018:
                  if (v33 > v92) {
                    continue;
                  }
                  goto LABEL_1733;
                }
                if (v34 >= v195) {
                  goto LABEL_1733;
                }
                int v255 = v19[v11];
                if (v33 > v255) {
                  goto LABEL_1733;
                }
                if (v34 >= v255) {
                  goto LABEL_1733;
                }
                int v256 = *v21;
                if (v33 > v256) {
                  goto LABEL_1733;
                }
                if (v34 >= v256) {
                  goto LABEL_1733;
                }
                int v257 = *(v19 - 3);
                if (v33 > v257) {
                  goto LABEL_1733;
                }
                if (v34 >= v257) {
                  goto LABEL_1733;
                }
                int v258 = v19[v12];
                if (v33 > v258) {
                  goto LABEL_1733;
                }
                if (v34 >= v258) {
                  goto LABEL_1733;
                }
                int v259 = v19[v15];
                if (v33 > v259 || v34 >= v259) {
                  goto LABEL_1733;
                }
              }
              else
              {
                int v129 = v19[v12];
                if (v33 > v129)
                {
                  int v130 = v19[v13];
                  if (v33 > v130)
                  {
                    if (v33 <= *v26 || v33 <= v19[v10] || v33 <= *v27) {
                      goto LABEL_1733;
                    }
                    int v131 = v19[v11];
LABEL_481:
                    if (v33 <= v131) {
                      goto LABEL_1733;
                    }
                    int v92 = *v25;
                    goto LABEL_1018;
                  }
                  if (v34 >= v130) {
                    goto LABEL_1733;
                  }
                  int v270 = *v26;
                  if (v33 > v270) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v270) {
                    goto LABEL_1733;
                  }
                  int v271 = *v22;
                  if (v33 > v271) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v271) {
                    goto LABEL_1733;
                  }
                  int v272 = v19[v15];
                  if (v33 > v272) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v272) {
                    goto LABEL_1733;
                  }
                  int v273 = *v21;
                  if (v33 > v273) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v273) {
                    goto LABEL_1733;
                  }
                  int v274 = v19[v14];
                  if (v33 > v274) {
                    goto LABEL_1733;
                  }
LABEL_769:
                  if (v34 >= v274) {
                    goto LABEL_1733;
                  }
                  int v261 = *(v19 - 3);
LABEL_794:
                  if (v33 > v261 || v34 >= v261) {
                    goto LABEL_1733;
                  }
                  continue;
                }
                if (v34 >= v129)
                {
                  int v316 = *v26;
                  if (v33 > v316) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v316) {
                    goto LABEL_1733;
                  }
                  int v317 = v19[v13];
                  if (v33 > v317) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v317) {
                    goto LABEL_1733;
                  }
                  int v318 = *v22;
                  if (v33 > v318) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v318) {
                    goto LABEL_1733;
                  }
                  int v319 = v19[v15];
                  if (v33 > v319) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v319) {
                    goto LABEL_1733;
                  }
                  int v320 = *v21;
                  if (v33 > v320) {
                    goto LABEL_1733;
                  }
                  if (v34 >= v320) {
                    goto LABEL_1733;
                  }
                  int v274 = v19[v14];
                  if (v33 > v274) {
                    goto LABEL_1733;
                  }
                  goto LABEL_769;
                }
                int v230 = *(v19 - 3);
                if (v33 > v230) {
                  goto LABEL_1733;
                }
                if (v34 >= v230) {
                  goto LABEL_1733;
                }
                int v231 = v19[v15];
                if (v33 > v231) {
                  goto LABEL_1733;
                }
                if (v34 >= v231) {
                  goto LABEL_1733;
                }
                int v232 = *v21;
                if (v33 > v232) {
                  goto LABEL_1733;
                }
                if (v34 >= v232) {
                  goto LABEL_1733;
                }
                int v233 = v19[v13];
                if (v33 > v233 || v34 >= v233) {
                  goto LABEL_1733;
                }
              }
              int v260 = *v22;
              if (v33 > v260 || v34 >= v260) {
                goto LABEL_1733;
              }
              int v261 = v19[v14];
              goto LABEL_794;
            }
            int v65 = v19[v10];
            if (v33 <= v65)
            {
              int v168 = v19[v14];
              if (v34 >= v65)
              {
                if (v33 > v168)
                {
                  if (v33 <= *v25 || v33 <= *v22 || v33 <= v19[v15] || v33 <= *v21) {
                    goto LABEL_1733;
                  }
                  int v251 = *v26;
                  goto LABEL_1016;
                }
                if (v34 >= v168) {
                  goto LABEL_1733;
                }
                int v326 = *v21;
                if (v33 > v326) {
                  goto LABEL_1733;
                }
                if (v34 >= v326) {
                  goto LABEL_1733;
                }
                int v327 = v19[v11];
                if (v33 > v327) {
                  goto LABEL_1733;
                }
                if (v34 >= v327) {
                  goto LABEL_1733;
                }
                int v328 = *(v19 - 3);
                if (v33 > v328) {
                  goto LABEL_1733;
                }
                if (v34 >= v328) {
                  goto LABEL_1733;
                }
                int v329 = v19[v12];
                if (v33 > v329) {
                  goto LABEL_1733;
                }
                if (v34 >= v329) {
                  goto LABEL_1733;
                }
                int v330 = v19[v15];
                if (v33 > v330) {
                  goto LABEL_1733;
                }
                if (v34 >= v330) {
                  goto LABEL_1733;
                }
                int v287 = *v22;
                if (v33 > v287) {
                  goto LABEL_1733;
                }
              }
              else
              {
                if (v33 > v168)
                {
                  if (v33 <= *v25 || v33 <= *v22 || v33 <= *v21 || v33 <= v19[v15]) {
                    goto LABEL_1733;
                  }
                  int v109 = *(v19 - 3);
                  goto LABEL_1441;
                }
                if (v34 >= v168) {
                  goto LABEL_1733;
                }
                int v282 = v19[v11];
                if (v33 > v282) {
                  goto LABEL_1733;
                }
                if (v34 >= v282) {
                  goto LABEL_1733;
                }
                int v283 = *v21;
                if (v33 > v283) {
                  goto LABEL_1733;
                }
                if (v34 >= v283) {
                  goto LABEL_1733;
                }
                int v284 = *(v19 - 3);
                if (v33 > v284) {
                  goto LABEL_1733;
                }
                if (v34 >= v284) {
                  goto LABEL_1733;
                }
                int v285 = v19[v15];
                if (v33 > v285) {
                  goto LABEL_1733;
                }
                if (v34 >= v285) {
                  goto LABEL_1733;
                }
                int v286 = v19[v12];
                if (v33 > v286) {
                  goto LABEL_1733;
                }
                if (v34 >= v286) {
                  goto LABEL_1733;
                }
                int v287 = *v22;
                if (v33 > v287) {
                  goto LABEL_1733;
                }
              }
              if (v34 >= v287) {
                goto LABEL_1733;
              }
              int v261 = v19[v13];
              goto LABEL_794;
            }
            int v66 = *(v19 - 3);
            if (v33 > v66)
            {
              if (v33 <= *v25 || v33 <= *v26) {
                goto LABEL_1733;
              }
              if (v33 <= *v21)
              {
                if (v33 <= v19[v12]) {
                  goto LABEL_1733;
                }
                int v399 = v19[v11];
                goto LABEL_1098;
              }
              if (v33 > *v27) {
                continue;
              }
              if (v33 <= v19[v15]) {
                goto LABEL_1733;
              }
              int v67 = *v22;
LABEL_1443:
              if (v33 > v67) {
                continue;
              }
              goto LABEL_1733;
            }
            if (v34 >= v66)
            {
              if (v33 <= v19[v11]) {
                goto LABEL_1733;
              }
              int v308 = *v21;
              if (v33 > v308)
              {
                if (v33 <= *v27) {
                  goto LABEL_1733;
                }
                int v139 = *v26;
                goto LABEL_813;
              }
              int v220 = v19[v12];
              if (v34 >= v308) {
                goto LABEL_1095;
              }
              if (v33 <= v220) {
                goto LABEL_1733;
              }
              int v275 = *v26;
LABEL_811:
              if (v33 <= v275) {
                goto LABEL_1733;
              }
              int v139 = *v27;
LABEL_813:
              if (v33 <= v139) {
                goto LABEL_1733;
              }
              int v67 = *v25;
              goto LABEL_1443;
            }
            int v219 = v19[v12];
            if (v33 > v219)
            {
              int v220 = v19[v11];
LABEL_1095:
              if (v33 <= v220 || v33 <= *v26) {
                goto LABEL_1733;
              }
              int v399 = *v25;
LABEL_1098:
              if (v33 <= v399) {
                goto LABEL_1733;
              }
              int v67 = *v27;
              goto LABEL_1443;
            }
            int v354 = *v21;
            if (v34 >= v219)
            {
              if (v33 <= v354 || v33 <= v19[v11] || v33 <= *v27) {
                goto LABEL_1733;
              }
              int v109 = *v25;
              goto LABEL_1441;
            }
            if (v33 > v354)
            {
              if (v33 <= v19[v11] || v33 <= *v25) {
                goto LABEL_1733;
              }
              int v109 = *v27;
              goto LABEL_1441;
            }
            if (v34 >= v354) {
              goto LABEL_1733;
            }
            int v459 = v19[v11];
            if (v33 > v459) {
              goto LABEL_1733;
            }
            if (v34 >= v459) {
              goto LABEL_1733;
            }
            int v460 = v19[v15];
            if (v33 > v460) {
              goto LABEL_1733;
            }
            if (v34 >= v460) {
              goto LABEL_1733;
            }
            int v461 = *v22;
            if (v33 > v461) {
              goto LABEL_1733;
            }
            if (v34 >= v461) {
              goto LABEL_1733;
            }
            int v462 = v19[v14];
            if (v33 > v462) {
              goto LABEL_1733;
            }
            if (v34 >= v462) {
              goto LABEL_1733;
            }
            int v463 = v19[v13];
            if (v33 > v463 || v34 >= v463) {
              goto LABEL_1733;
            }
          }
          else
          {
            int v37 = v19[v12];
            if (v33 <= v37)
            {
              if (v34 >= v37)
              {
                if (v33 <= *v23 || v33 <= *v21 || v33 <= *v26) {
                  goto LABEL_1733;
                }
                if (v33 > *(v19 - 3))
                {
                  if (v33 > v19[v15] && v33 > *v22)
                  {
                    if (v33 > v19[v14]) {
                      continue;
                    }
                    goto LABEL_240;
                  }
LABEL_810:
                  int v275 = v19[v10];
                  goto LABEL_811;
                }
              }
              else
              {
                if (v33 <= *v21 || v33 <= *v23 || v33 <= *v26) {
                  goto LABEL_1733;
                }
                if (v33 > *(v19 - 3))
                {
                  if (v33 > v19[v15] && v33 > *v22)
                  {
                    if (v33 > v19[v14]) {
                      continue;
                    }
LABEL_240:
                    int v139 = v19[v10];
                    goto LABEL_813;
                  }
                  goto LABEL_810;
                }
              }
              if (v33 <= v19[v11]) {
                goto LABEL_1733;
              }
              int v275 = v19[v10];
              goto LABEL_811;
            }
            int v38 = v19[v10];
            if (v33 <= v38)
            {
              int v106 = *v22;
              if (v34 >= v38)
              {
                if (v33 <= v106 || v33 <= v19[v15] || v33 <= v19[v14]) {
                  goto LABEL_1733;
                }
                if (v33 <= *(v19 - 3))
                {
                  int v400 = *v27;
                  goto LABEL_1039;
                }
                if (v33 > v19[v11])
                {
                  int v181 = v19[v13];
                  if (v33 > v181) {
                    continue;
                  }
                  int v182 = *v23;
                  if (v34 >= v181)
                  {
                    if (v33 <= v182 || v33 <= *v26) {
                      goto LABEL_1733;
                    }
                    int v67 = *v21;
                    goto LABEL_1443;
                  }
                  goto LABEL_1439;
                }
LABEL_1042:
                if (v33 <= *v23 || v33 <= *v21) {
                  goto LABEL_1733;
                }
                if (v33 > *v26) {
                  continue;
                }
              }
              else
              {
                if (v33 <= v106 || v33 <= v19[v15] || v33 <= v19[v14]) {
                  goto LABEL_1733;
                }
                int v107 = *(v19 - 3);
                if (v33 > v107)
                {
                  if (v33 > v19[v11])
                  {
                    int v108 = v19[v13];
                    if (v33 > v108) {
                      continue;
                    }
                    if (v34 < v108)
                    {
                      if (v33 <= *v21) {
                        goto LABEL_1733;
                      }
                      int v109 = *v23;
                      goto LABEL_1441;
                    }
                    int v182 = *v23;
LABEL_1439:
                    if (v33 <= v182) {
                      goto LABEL_1733;
                    }
                    int v109 = *v21;
LABEL_1441:
                    if (v33 <= v109) {
                      goto LABEL_1733;
                    }
                    int v67 = *v26;
                    goto LABEL_1443;
                  }
                  goto LABEL_1042;
                }
                int v400 = *v27;
                if (v34 < v107)
                {
                  if (v33 <= v400 || v33 <= v19[v13]) {
                    goto LABEL_1733;
                  }
                  int v67 = v19[v11];
                  goto LABEL_1443;
                }
LABEL_1039:
                if (v33 <= v400 || v33 <= v19[v11]) {
                  goto LABEL_1733;
                }
              }
              int v67 = v19[v13];
              goto LABEL_1443;
            }
            int v39 = v19[v11];
            if (v33 > v39)
            {
              int v40 = *v27;
              if (v33 > v40)
              {
                int v41 = *v25;
                if (v33 <= v41)
                {
                  int v262 = v19[v15];
                  if (v34 < v41)
                  {
                    if (v33 <= v262 || v33 <= v19[v14]) {
                      goto LABEL_1733;
                    }
                    int v263 = v19[v13];
                    if (v33 > v263) {
                      continue;
                    }
                    int v264 = *v21;
                    if (v34 >= v263)
                    {
                      if (v33 <= v264 || v33 <= *(v19 - 3)) {
                        goto LABEL_1733;
                      }
                      int v154 = *v23;
                      goto LABEL_1451;
                    }
                    if (v33 <= v264 || v33 <= *v22 || v33 <= *v23) {
                      goto LABEL_1733;
                    }
                    int v43 = *(v19 - 3);
                    goto LABEL_19;
                  }
                  if (v33 <= v262 || v33 <= v19[v14]) {
                    goto LABEL_1733;
                  }
                  int v375 = v19[v13];
                  if (v33 > v375) {
                    continue;
                  }
                  int v376 = *v21;
                  if (v34 >= v375)
                  {
                    if (v33 <= v376 || v33 <= *v23) {
                      goto LABEL_1733;
                    }
                    int v42 = *v22;
                  }
                  else
                  {
                    if (v33 <= v376 || v33 <= *v23) {
                      goto LABEL_1733;
                    }
                    int v42 = *(v19 - 3);
                  }
                }
                else
                {
                  if (v33 > v19[v13]) {
                    continue;
                  }
                  int v42 = *v23;
                }
LABEL_17:
                if (v33 <= v42) {
                  goto LABEL_1733;
                }
                int v43 = *v26;
                goto LABEL_19;
              }
              if (v34 >= v40)
              {
                if (v33 <= *v22 || v33 <= v19[v15] || v33 <= *(v19 - 3)) {
                  goto LABEL_1733;
                }
                int v306 = v19[v14];
                if (v33 > v306)
                {
                  int v307 = v19[v13];
                  if (v33 > v307) {
                    continue;
                  }
                  int v215 = *v23;
                  if (v34 < v307)
                  {
                    if (v33 <= v215 || v33 <= *v26) {
                      goto LABEL_1733;
                    }
                    int v43 = *v21;
                    goto LABEL_19;
                  }
LABEL_1453:
                  if (v33 <= v215) {
                    goto LABEL_1733;
                  }
                  int v42 = *v21;
                  goto LABEL_17;
                }
                int v492 = *v21;
                if (v34 < v306)
                {
                  if (v33 <= v492 || v33 <= *v23 || v33 <= *v26) {
                    goto LABEL_1733;
                  }
                  goto LABEL_1509;
                }
              }
              else
              {
                if (v33 <= *(v19 - 3) || v33 <= v19[v15] || v33 <= *v22) {
                  goto LABEL_1733;
                }
                if (v33 > v19[v14])
                {
                  int v214 = v19[v13];
                  if (v33 > v214) {
                    continue;
                  }
                  if (v34 >= v214)
                  {
                    if (v33 <= *v21 || v33 <= *v26) {
                      goto LABEL_1733;
                    }
                    int v43 = *v23;
                    goto LABEL_19;
                  }
                  int v215 = *v23;
                  goto LABEL_1453;
                }
                int v492 = *v21;
              }
              if (v33 <= v492 || v33 <= *v23) {
                goto LABEL_1733;
              }
              int v42 = *v25;
              goto LABEL_17;
            }
            if (v34 >= v39)
            {
              if (v33 <= *v21 || v33 <= *v23 || v33 <= *(v19 - 3)) {
                goto LABEL_1733;
              }
              int v244 = *v26;
              if (v33 <= v244)
              {
                if (v34 < v244)
                {
                  if (v33 <= v19[v15] || v33 <= *v22 || v33 <= v19[v14]) {
                    goto LABEL_1733;
                  }
                  int v43 = v19[v13];
                  goto LABEL_19;
                }
                if (v33 <= *v22 || v33 <= v19[v15]) {
                  goto LABEL_1733;
                }
                int v510 = v19[v13];
                goto LABEL_1566;
              }
              int v245 = *v27;
              if (v33 > v245)
              {
                int v246 = *v25;
                if (v33 > v246) {
                  continue;
                }
                if (v34 < v246)
                {
                  if (v33 <= v19[v15]) {
                    goto LABEL_1733;
                  }
                  int v154 = v19[v14];
                  goto LABEL_1451;
                }
                goto LABEL_1445;
              }
              int v493 = v19[v15];
              if (v34 >= v245)
              {
                if (v33 <= v493 || v33 <= *v22) {
                  goto LABEL_1733;
                }
                if (v33 > v19[v14]) {
                  continue;
                }
              }
              else
              {
                if (v33 <= v493 || v33 <= *v22) {
                  goto LABEL_1733;
                }
                if (v33 > v19[v14]) {
                  continue;
                }
              }
              goto LABEL_1509;
            }
            if (v33 <= *(v19 - 3) || v33 <= *v23 || v33 <= *v21) {
              goto LABEL_1733;
            }
            int v152 = *v27;
            if (v33 > v152)
            {
              if (v33 <= *v25)
              {
                int v491 = *v22;
              }
              else
              {
                int v153 = *v26;
                if (v33 > v153) {
                  continue;
                }
                if (v34 < v153)
                {
                  if (v33 <= v19[v15]) {
                    goto LABEL_1733;
                  }
                  int v154 = v19[v13];
LABEL_1451:
                  if (v33 <= v154) {
                    goto LABEL_1733;
                  }
                  int v43 = *v22;
LABEL_19:
                  if (v33 > v43) {
                    continue;
                  }
                  goto LABEL_1733;
                }
LABEL_1445:
                int v491 = *v22;
              }
              if (v33 <= v491) {
                goto LABEL_1733;
              }
              int v510 = v19[v15];
LABEL_1566:
              if (v33 <= v510) {
                goto LABEL_1733;
              }
LABEL_1567:
              int v43 = v19[v14];
              goto LABEL_19;
            }
            int v449 = v19[v15];
            if (v34 >= v152)
            {
              if (v33 <= v449 || v33 <= *v22) {
                goto LABEL_1733;
              }
              if (v33 <= *v26)
              {
LABEL_1565:
                int v510 = v19[v13];
                goto LABEL_1566;
              }
              if (v33 > v19[v14]) {
                continue;
              }
LABEL_1509:
              int v43 = *v25;
              goto LABEL_19;
            }
            if (v33 <= v449 || v33 <= *v22) {
              goto LABEL_1733;
            }
            if (v33 <= *v26) {
              goto LABEL_1565;
            }
            int v450 = *v25;
            if (v33 <= v450 && v34 >= v450) {
              goto LABEL_1567;
            }
          }
        }
      }
      while (v28 - (int)v18 > 1);
      *(_DWORD *)(v17 + 4 * v8++) = v18;
    }
    while (v16 != v8);
  }
}

int *sub_1DD500AE8(unsigned int a1, unsigned int a2)
{
  __CLPK_integer __n = a2;
  __CLPK_integer __lda = a1;
  uint64_t v4 = (int *)malloc_type_malloc(0x50uLL, 0xFE76FDC7uLL);
  uint64_t v5 = v4;
  *uint64_t v4 = a1;
  v4[1] = a2;
  if (a1 >= a2) {
    signed int v6 = a2;
  }
  else {
    signed int v6 = a1;
  }
  v4[4] = v6;
  *((void *)v4 + 1) = malloc_type_malloc(4 * v6, 0xFE76FDC7uLL);
  v5[8] = a1;
  unsigned int v7 = a2 * a1;
  if (a2 * a1 <= 1) {
    unsigned int v7 = 1;
  }
  *((void *)v5 + 3) = malloc_type_malloc(4 * v7, 0xFE76FDC7uLL);
  v5[12] = a2;
  *((void *)v5 + 5) = malloc_type_malloc(4 * a2 * (unint64_t)a2, 0xFE76FDC7uLL);
  *((void *)v5 + 7) = malloc_type_malloc(4uLL, 0xFE76FDC7uLL);
  v5[16] = -1;
  __iworuint64_t k = (__CLPK_integer *)malloc_type_malloc(32 * v5[4], 0xFE76FDC7uLL);
  *((void *)v5 + 9) = __iwork;
  __CLPK_integer v12 = 0;
  sgesdd_("S", &__lda, &__n, 0, &__lda, *((__CLPK_real **)v5 + 1), *((__CLPK_real **)v5 + 3), v5 + 8, *((__CLPK_real **)v5 + 5), v5 + 12, *((__CLPK_real **)v5 + 7), v5 + 16, __iwork, &v12);
  if (v12)
  {
    free(*((void **)v5 + 1));
    free(*((void **)v5 + 3));
    free(*((void **)v5 + 5));
    free(*((void **)v5 + 7));
    free(*((void **)v5 + 9));
    free(v5);
    return 0;
  }
  else
  {
    uint64_t v9 = (float *)*((void *)v5 + 7);
    int v10 = (int)*v9;
    v5[16] = v10;
    *((void *)v5 + 7) = malloc_type_realloc(v9, 4 * v10, 0x626B1B9uLL);
  }
  return v5;
}

void sub_1DD500C84(void **a1)
{
  free(a1[1]);
  free(a1[3]);
  free(a1[5]);
  free(a1[7]);
  free(a1[9]);
  free(a1);
}

uint64_t sub_1DD500CE0(uint64_t result, uint64_t a2, uint64_t a3, float *a4, unsigned int a5)
{
  if (a5)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = 4 * v5;
      float v7 = *(float *)(a2 + v6);
      float v8 = *(float *)(a2 + 4 * (v5 + 1));
      float v9 = *(float *)(a3 + v6);
      float v10 = *(float *)(a3 + 4 * (v5 + 1));
      float v11 = *a4++;
      *(float *)(result + v6) = v11 * 0.0;
      LODWORD(v6) = 2 * a5 + v5;
      *(float *)(result + 4 * v6) = v11 * 0.0;
      unsigned int v12 = 4 * a5 + v5;
      *(float *)(result + 4 * v12) = v11 * 0.0;
      unsigned int v13 = 6 * a5 + v5;
      *(float *)(result + 4 * v13) = -(float)(v7 * v11);
      unsigned int v14 = 8 * a5 + v5;
      *(float *)(result + 4 * v14) = -(float)(v8 * v11);
      unsigned int v15 = 10 * a5 + v5;
      *(float *)(result + 4 * v15) = -v11;
      unsigned int v16 = 12 * a5 + v5;
      *(float *)(result + 4 * v16) = (float)(v7 * v10) * v11;
      unsigned int v17 = 14 * a5 + v5;
      *(float *)(result + 4 * v17) = (float)(v8 * v10) * v11;
      unsigned int v18 = 16 * a5 + v5;
      *(float *)(result + 4 * v18) = v10 * v11;
      *(float *)(result + 4 * (v5 + 1)) = v7 * v11;
      *(float *)(result + 4 * (v6 + 1)) = v8 * v11;
      *(float *)(result + 4 * (v12 + 1)) = v11;
      *(float *)(result + 4 * (v13 + 1)) = v11 * 0.0;
      *(float *)(result + 4 * (v14 + 1)) = v11 * 0.0;
      *(float *)(result + 4 * (v15 + 1)) = v11 * 0.0;
      *(float *)(result + 4 * (v16 + 1)) = (float)-(float)(v9 * v7) * v11;
      *(float *)(result + 4 * (v17 + 1)) = (float)-(float)(v9 * v8) * v11;
      *(float *)(result + 4 * (v18 + 1)) = -(float)(v9 * v11);
      v5 += 2;
    }
    while (2 * a5 != v5);
  }
  return result;
}

BOOL sub_1DD500E24(uint64_t a1, __CLPK_real *a2, unsigned int a3, unsigned int a4)
{
  __CLPK_integer __lda = a3;
  __CLPK_integer __n = a4;
  if (a3 >= a4) {
    char v8 = 83;
  }
  else {
    char v8 = 65;
  }
  char __jobz = v8;
  if (*(_DWORD *)a1 >= a3 && *(_DWORD *)(a1 + 4) >= a4)
  {
    __woruint64_t k = *(__CLPK_real **)(a1 + 56);
  }
  else
  {
    *(_DWORD *)a1 = a3;
    *(_DWORD *)(a1 + 4) = a4;
    if (a3 >= a4) {
      signed int v9 = a4;
    }
    else {
      signed int v9 = a3;
    }
    *(_DWORD *)(a1 + 32) = a3;
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 48) = a4;
    *(void *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v9, 0x626B1B9uLL);
    unsigned int v10 = a4 * a3;
    if (a4 * a3 <= 1) {
      unsigned int v10 = 1;
    }
    *(void *)(a1 + 24) = malloc_type_realloc(*(void **)(a1 + 24), 4 * v10, 0x626B1B9uLL);
    *(void *)(a1 + 40) = malloc_type_realloc(*(void **)(a1 + 40), 4 * a4 * (unint64_t)a4, 0x626B1B9uLL);
    __iworuint64_t k = (__CLPK_integer *)malloc_type_realloc(*(void **)(a1 + 72), 32 * *(int *)(a1 + 16), 0x626B1B9uLL);
    *(_DWORD *)(a1 + 64) = -1;
    *(void *)(a1 + 72) = __iwork;
    __CLPK_integer v16 = 0;
    sgesdd_(&__jobz, &__lda, &__n, a2, &__lda, *(__CLPK_real **)(a1 + 8), *(__CLPK_real **)(a1 + 24), (__CLPK_integer *)(a1 + 32), *(__CLPK_real **)(a1 + 40), (__CLPK_integer *)(a1 + 48), *(__CLPK_real **)(a1 + 56), (__CLPK_integer *)(a1 + 64), __iwork, &v16);
    if (v16) {
      return 0;
    }
    unsigned int v13 = *(float **)(a1 + 56);
    int v14 = (int)*v13;
    *(_DWORD *)(a1 + 64) = v14;
    __woruint64_t k = (__CLPK_real *)malloc_type_realloc(v13, 4 * v14, 0x626B1B9uLL);
    *(void *)(a1 + 56) = __work;
  }
  __CLPK_integer v16 = 0;
  sgesdd_(&__jobz, &__lda, &__n, a2, &__lda, *(__CLPK_real **)(a1 + 8), *(__CLPK_real **)(a1 + 24), &__lda, *(__CLPK_real **)(a1 + 40), &__n, __work, (__CLPK_integer *)(a1 + 64), *(__CLPK_integer **)(a1 + 72), &v16);
  return v16 == 0;
}

float sub_1DD50100C(uint64_t a1, __CLPK_real *a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  if (sub_1DD500E24(a1, a2, a3, a4) && a4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = -1;
    do
    {
      v11 += a4;
      float result = *(float *)(v10 + 4 * v11);
      *(float *)(a5 + 4 * v9++) = result;
    }
    while (a4 != v9);
  }
  return result;
}

BOOL sub_1DD501074(double *a1, double *a2, double *a3)
{
  double v3 = a1[1];
  double v4 = *a2;
  double v5 = a2[1];
  double v6 = a1[2];
  double v7 = a1[3];
  double v9 = a2[2];
  double v8 = a2[3];
  double v10 = a1[4];
  double v11 = a1[5];
  double v12 = a2[4];
  double v13 = a2[5];
  double v14 = a1[6];
  double v15 = a1[7];
  double v16 = a2[6];
  double v17 = a2[7];
  double v18 = v6 * (v11 - v15) + v14 * (v7 - v11) + v10 * (v15 - v7);
  double v19 = *a1 * v18;
  double v20 = v3 * v18;
  double v21 = (v11 - v3) * v14 + *a1 * (v15 - v11) + v10 * (v3 - v15);
  double v22 = v6 * v21;
  double v23 = v7 * v21;
  double v24 = v6 * (v15 - v3) + *a1 * (v7 - v15) + v14 * (v3 - v7);
  double v25 = v10 * v24;
  double v26 = v11 * v24;
  double v27 = v26 * v26 + v25 * v25 + v24 * v24 + v23 * v23 + v22 * v22 + v21 * v21 + v20 * v20 + v19 * v19 + v18 * v18;
  double v28 = 0.0;
  double v29 = 0.0;
  if (v27 >= 1.0e-15) {
    double v29 = 1.0 / sqrt(v27);
  }
  double v30 = v19 * v29;
  double v31 = v20 * v29;
  double v32 = v18 * v29;
  double v33 = v22 * v29;
  double v34 = v23 * v29;
  double v35 = v21 * v29;
  double v36 = v25 * v29;
  double v37 = v26 * v29;
  double v38 = v24 * v29;
  double v39 = v9 * (v13 - v17) + v16 * (v8 - v13) + v12 * (v17 - v8);
  double v40 = v4 * v39;
  double v41 = v5 * v39;
  double v42 = (v13 - v5) * v16 + v4 * (v17 - v13) + v12 * (v5 - v17);
  double v43 = v9 * v42;
  double v44 = v8 * v42;
  double v45 = v9 * (v17 - v5) + v4 * (v8 - v17) + v16 * (v5 - v8);
  double v46 = v12 * v45;
  double v47 = v13 * v45;
  double v48 = v47 * v47 + v46 * v46 + v45 * v45 + v44 * v44 + v43 * v43 + v42 * v42 + v41 * v41 + v40 * v40 + v39 * v39;
  if (v48 >= 1.0e-15) {
    double v28 = 1.0 / sqrt(v48);
  }
  double v49 = v40 * v28;
  double v50 = v41 * v28;
  double v51 = v39 * v28;
  double v52 = v43 * v28;
  double v53 = v44 * v28;
  double v54 = v42 * v28;
  double v55 = v46 * v28;
  double v56 = v47 * v28;
  double v57 = v45 * v28;
  double v58 = v34 * v38 - v35 * v37;
  double v59 = v35 * v36 - v33 * v38;
  double v60 = v33 * v37 - v34 * v36;
  double v61 = v37 * v32 - v38 * v31;
  double v62 = v38 * v30 - v36 * v32;
  double v63 = v36 * v31 - v37 * v30;
  double v64 = v31 * v35 - v32 * v34;
  double v65 = v32 * v33 - v30 * v35;
  double v66 = v30 * v34 - v31 * v33;
  double v67 = v58 * v50;
  double v68 = v58 * v51 + v61 * v54;
  double v69 = v64 * v55 + v58 * v49 + v61 * v52;
  double v70 = v64 * v56 + v67 + v61 * v53;
  double v71 = v64 * v57 + v68;
  double v72 = v59 * v50;
  double v73 = v59 * v51 + v62 * v54;
  double v74 = v65 * v55 + v59 * v49 + v62 * v52;
  double v75 = v65 * v56 + v72 + v62 * v53;
  double v76 = v65 * v57 + v73;
  double v77 = v60 * v50;
  double v78 = v66 * v57;
  double v79 = v66 * v55 + v60 * v49 + v63 * v52;
  double v80 = v66 * v56 + v77 + v63 * v53;
  double v81 = v78 + v60 * v51 + v63 * v54;
  double v82 = v80 * v80 + v79 * v79 + v81 * v81 + v70 * v70 + v69 * v69 + v71 * v71 + v75 * v75 + v74 * v74 + v76 * v76;
  double v83 = 0.0;
  if (v82 >= 1.0e-15) {
    double v83 = 1.0 / sqrt(v82);
  }
  *a3 = v69 * v83;
  a3[1] = v70 * v83;
  a3[2] = v71 * v83;
  a3[3] = v74 * v83;
  a3[4] = v75 * v83;
  a3[5] = v76 * v83;
  a3[6] = v79 * v83;
  a3[7] = v80 * v83;
  a3[8] = v81 * v83;
  return fabs(v81 * v83) > 1.0e-10;
}

void sub_1DD5013C8()
{
}

void sub_1DD501438(_Unwind_Exception *a1)
{
  MEMORY[0x1E01B7750](v1, 0x10F1C40D3EDF7B4);
  _Unwind_Resume(a1);
}

void sub_1DD50145C()
{
}

uint64_t *sub_1DD501464(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = sub_1DD4F6594(v2);
    MEMORY[0x1E01B7750](v3, 0x10F1C40D3EDF7B4);
  }
  return a1;
}

uint64_t *sub_1DD5014AC(uint64_t *result, int a2, int a3)
{
  uint64_t v3 = *result;
  *(_DWORD *)(v3 + 40) = a2;
  *(_DWORD *)(v3 + 44) = a3;
  return result;
}

uint64_t sub_1DD5014B8(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)result + 288) = a2;
  return result;
}

uint64_t *sub_1DD5014C4(uint64_t *result, int a2, uint64_t a3)
{
  uint64_t v3 = *result;
  *(_DWORD *)(v3 + 236) = a2;
  *(void *)(v3 + 240) = a3;
  return result;
}

uint64_t sub_1DD5014D4(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)result + 144) = a2;
  return result;
}

uint64_t sub_1DD5014E0(uint64_t result, float a2)
{
  *(float *)(*(void *)result + 232) = a2;
  return result;
}

BOOL sub_1DD5014EC(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  return sub_1DD4F666C(*a1, a2, a3, a4, a5);
}

float sub_1DD5014F4(float *a1, float *a2, float *a3, float *a4, float a5)
{
  float v7 = *a1 * a5;
  float v8 = a1[1] * a5;
  float v9 = a3[2] + (float)((float)(v8 * a3[1]) + (float)(*a3 * v7));
  float v10 = a3[5] + (float)((float)(v8 * a3[4]) + (float)(a3[3] * v7));
  float v11 = a3[8] + (float)((float)(v8 * a3[7]) + (float)(a3[6] * v7));
  float v12 = v9 / v11;
  float v13 = v10 / v11;
  float v14 = v12 - (float)(*a2 * a5);
  float v15 = v13 - (float)(a2[1] * a5);
  *a4 = v14;
  a4[1] = v15;
  float v16 = a3[7];
  float v17 = a3[8];
  float v18 = a3[4];
  float v19 = a3[5];
  float v20 = a3[6];
  float v21 = (float)(v18 * v17) - (float)(v16 * v19);
  float v22 = *a3;
  float v23 = a3[1];
  float v25 = a3[2];
  float v24 = a3[3];
  float v26 = (float)(v16 * v25) - (float)(v23 * v17);
  float v27 = (float)(v23 * v19) - (float)(v18 * v25);
  float v28 = (float)((float)(v26 * v24) + (float)(*a3 * v21)) + (float)(v20 * v27);
  float v29 = -2.2204e-16;
  if (v28 >= 2.2204e-16 || v28 <= -2.2204e-16)
  {
    float v21 = v21 / v28;
    float v26 = v26 / v28;
    float v27 = v27 / v28;
    float v5 = (float)((float)(v20 * v19) - (float)(v24 * v17)) / v28;
    float v29 = (float)((float)(v24 * v16) - (float)(v20 * v18)) / v28;
    float v6 = (float)((float)(v22 * v17) - (float)(v20 * v25)) / v28;
    float v17 = (float)((float)(v24 * v25) - (float)(v22 * v19)) / v28;
    float v16 = (float)((float)(v20 * v23) - (float)(v22 * v16)) / v28;
    float v18 = (float)((float)(v22 * v18) - (float)(v24 * v23)) / v28;
  }
  float v31 = a2[1] * a5;
  float v32 = *a2 * a5;
  float v33 = (float)(v15 * v15) + (float)(v14 * v14);
  float v34 = v27 + (float)((float)(v31 * v26) + (float)(v21 * v32));
  float v35 = v17 + (float)((float)(v31 * v6) + (float)(v5 * v32));
  float v36 = v18 + (float)((float)(v31 * v16) + (float)(v29 * v32));
  float result = (float)((float)((float)(v35 / v36) - (float)(a1[1] * a5)) * (float)((float)(v35 / v36) - (float)(a1[1] * a5)))
         + (float)((float)((float)(v34 / v36) - (float)(*a1 * a5)) * (float)((float)(v34 / v36) - (float)(*a1 * a5)));
  if (v33 >= result) {
    return v33;
  }
  return result;
}

float sub_1DD50165C(uint64_t a1, uint64_t a2, float result)
{
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    std::__sort<std::__less<float,float> &,float *>();
    uint64_t v5 = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(v5 - 4);
    float v16 = 0;
    uint64_t v17 = 0;
    float v15 = 0;
    sub_1DD4BB5F8(&v15, *(const void **)a1, v5, (v5 - *(void *)a1) >> 2);
    float v6 = v15;
    float v7 = v16;
    unint64_t v8 = (v16 - v15) >> 2;
    if (v16 == v15)
    {
      float v14 = 0.0 / (double)v8;
      *(float *)(a2 + 20) = v14;
      if (!v7)
      {
LABEL_11:
        float result = *(float *)(*(void *)a1
                          + (((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1) & 0xFFFFFFFFFFFFFFFCLL));
        *(float *)(a2 + 24) = result;
        return result;
      }
    }
    else
    {
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = (v16 - v15) >> 2;
      }
      double v10 = 0.0;
      float v11 = (float *)v15;
      do
      {
        float v12 = *v11++;
        double v10 = v10 + v12;
        --v9;
      }
      while (v9);
      float v13 = v10 / (double)v8;
      *(float *)(a2 + 20) = v13;
    }
    float v16 = v6;
    operator delete(v6);
    goto LABEL_11;
  }
  return result;
}

unint64_t sub_1DD501744(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 272);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 280) - v2) >> 4) <= a2) {
LABEL_23:
  }
    sub_1DD4BAA78();
  int v4 = *(__int16 *)(v2 + 48 * a2 + 40);
  if (v4 > 0) {
    return a2;
  }
  float v7 = (void *)(a1 + 32);
  unint64_t v8 = (float *)sub_1DD501930((void *)(a1 + 32), a2);
  float v9 = *v8;
  float v10 = v8[1];
  uint64_t v11 = *(unsigned int *)(a1 + 48);
  if (a2)
  {
    unint64_t v12 = a2 - 1;
    uint64_t v13 = 48 * a2 - 8;
    float v14 = 6.25;
    unint64_t v5 = a2;
    do
    {
      float v15 = (float *)sub_1DD501930(v7, v12);
      float v16 = v10 - v15[1];
      if ((float)(v16 * v16) >= v14) {
        break;
      }
      float v17 = (float)((float)(v9 - *v15) * (float)(v9 - *v15)) + (float)(v16 * v16);
      if (v17 < v14)
      {
        uint64_t v18 = *(void *)(a1 + 272);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 280) - v18) >> 4) <= v12) {
          goto LABEL_23;
        }
        if (*(__int16 *)(v18 + v13) > v4)
        {
          unint64_t v5 = v12;
          float v14 = v17;
        }
      }
      --v12;
      v13 -= 48;
    }
    while (v12 != -1);
  }
  else
  {
    unint64_t v5 = 0;
    float v14 = 6.25;
  }
  if (v11 - 1 > a2)
  {
    unint64_t v19 = a2 + 1;
    uint64_t v20 = 48 * a2 + 88;
    do
    {
      float v21 = (float *)sub_1DD501930(v7, v19);
      float v22 = v10 - v21[1];
      if ((float)(v22 * v22) >= v14) {
        break;
      }
      float v23 = (float)((float)(v9 - *v21) * (float)(v9 - *v21)) + (float)(v22 * v22);
      if (v23 < v14)
      {
        uint64_t v24 = *(void *)(a1 + 272);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 280) - v24) >> 4) <= v19) {
          goto LABEL_23;
        }
        if (*(__int16 *)(v24 + v20) > v4)
        {
          unint64_t v5 = v19;
          float v14 = v23;
        }
      }
      ++v19;
      v20 += 48;
    }
    while (v11 != v19);
  }
  return v5;
}

uint64_t sub_1DD501930(void *a1, unint64_t a2)
{
  if (a1[2] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1DD4BAAEC(exception, "idx");
    __cxa_throw(exception, (struct type_info *)off_1E6CC8858, MEMORY[0x1E4FBA1D0]);
  }
  return *a1 + 8 * a2;
}

void sub_1DD501998(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD5019AC(uint64_t a1)
{
  long long __p = 0;
  double v30 = 0;
  float v31 = 0;
  sub_1DD4D6EE4(&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 280) - *(void *)(a1 + 272)) >> 4));
  if (*(void *)(a1 + 280) == *(void *)(a1 + 272))
  {
    uint64_t v18 = (unint64_t *)__p;
  }
  else
  {
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = sub_1DD501744(a1, v2);
      unint64_t v4 = v3;
      unint64_t v5 = v30;
      if (v30 >= v31)
      {
        float v7 = (unint64_t *)__p;
        uint64_t v8 = ((char *)v30 - (unsigned char *)__p) >> 3;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_1DD4BACA0();
        }
        uint64_t v10 = (char *)v31 - (unsigned char *)__p;
        if (((char *)v31 - (unsigned char *)__p) >> 2 > v9) {
          unint64_t v9 = v10 >> 2;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          unint64_t v12 = (char *)sub_1DD4BAF80((uint64_t)&v31, v11);
          float v7 = (unint64_t *)__p;
          unint64_t v5 = v30;
        }
        else
        {
          unint64_t v12 = 0;
        }
        uint64_t v13 = (unint64_t *)&v12[8 * v8];
        *uint64_t v13 = v4;
        float v6 = v13 + 1;
        while (v5 != v7)
        {
          unint64_t v14 = *--v5;
          *--uint64_t v13 = v14;
        }
        long long __p = v13;
        double v30 = v6;
        float v31 = (unint64_t *)&v12[8 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        unint64_t *v30 = v3;
        float v6 = v5 + 1;
      }
      double v30 = v6;
      ++v2;
      uint64_t v15 = *(void *)(a1 + 272);
      uint64_t v16 = *(void *)(a1 + 280);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 4);
    }
    while (v2 < v17);
    uint64_t v18 = (unint64_t *)__p;
    if (v16 != v15)
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      do
      {
        unint64_t v22 = v18[v20];
        if (v20 != v22)
        {
          if (v17 <= v22) {
            sub_1DD4BAA78();
          }
          float v23 = (long long *)(v15 + 48 * v22);
          uint64_t v24 = (_OWORD *)(v15 + v19);
          long long v25 = *v23;
          long long v26 = v23[2];
          v24[1] = v23[1];
          v24[2] = v26;
          *uint64_t v24 = v25;
          uint64_t v21 = (v21 + 1);
          uint64_t v15 = *(void *)(a1 + 272);
          uint64_t v16 = *(void *)(a1 + 280);
        }
        ++v20;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 4);
        v19 += 48;
      }
      while (v20 < v17);
      goto LABEL_29;
    }
  }
  uint64_t v21 = 0;
  uint64_t v27 = 0;
  if (v18)
  {
LABEL_29:
    double v30 = v18;
    operator delete(v18);
    return v21;
  }
  return v27;
}

void sub_1DD501BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DD501BE8(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(_DWORD *)(*(void *)result + 20) * *(_DWORD *)(*(void *)result + 24))
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      float result = sub_1DD5019AC(*(void *)(v1 + 56) + v3);
      ++v4;
      uint64_t v1 = *(void *)v2;
      v3 += 296;
    }
    while (v4 < (*(_DWORD *)(*(void *)v2 + 20) * *(_DWORD *)(*(void *)v2 + 24)));
  }
  return result;
}

void sub_1DD501C50(uint64_t *a1, void *a2)
{
  sub_1DD4D2684((uint64_t)a2, 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4), 0);
  unint64_t v4 = (void *)*a2;
  uint64_t v5 = a2[1];
  if (v5 >= 1)
  {
    int v6 = 0;
    unint64_t v7 = v5 + 1;
    uint64_t v8 = (void *)*a2;
    do
    {
      *v8 &= ~(1 << v6);
      v8 += v6 == 63;
      if (v6 == 63) {
        int v6 = 0;
      }
      else {
        ++v6;
      }
      --v7;
    }
    while (v7 > 1);
  }
  uint64_t v9 = *a1;
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  if (v10 >= 2)
  {
    float v11 = *(float *)(v9 + 12);
    unint64_t v12 = (float *)(v9 + 96);
    for (unint64_t i = 1; i != v10; ++i)
    {
      float v14 = v11;
      float v11 = *(v12 - 1);
      if (v14 == v11 && *(v12 - 20) == *v12) {
        *(void *)((char *)v4 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
      }
      v12 += 20;
    }
  }
}

void sub_1DD501D50(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7, float a8)
{
  uint64_t v17 = 0;
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  float v18 = *(float *)(*a3 + 16);
  do
  {
    float v19 = *(double *)(a5 + 8 * v17);
    v135[v17++] = v19;
  }
  while (v17 != 9);
  long long __p = 0;
  int v133 = 0;
  int v134 = 0;
  sub_1DD502684(&__p, 0x2EEuLL);
  BOOL v121 = a7;
  uint64_t v117 = a2;
  uint64_t v119 = (*(_DWORD *)(*(void *)a4 + 20) * *(_DWORD *)(*(void *)a4 + 24));
  if ((int)v119 < 1)
  {
    int v125 = 0;
    uint64_t v128 = 0;
    uint64_t v118 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint64_t v128 = 0;
    int v125 = 0;
    float v22 = a8 * a8;
    uint64_t v118 = 0;
    float v23 = 1.0 / v18;
    do
    {
      uint64_t v24 = *(void *)(*a3 + 56);
      uint64_t v25 = v24 + 296 * v20;
      unint64_t v26 = *(void *)(v25 + 48);
      int v126 = (unint64_t *)(v25 + 48);
      if (v26)
      {
        unint64_t v27 = 0;
        uint64_t v28 = v24 + 296 * v20;
        float v29 = (void *)(v28 + 272);
        double v30 = (void *)(v28 + 280);
        do
        {
          uint64_t v31 = *a6;
          uint64_t v32 = a6[1];
          uint64_t v33 = v32 - *a6;
          if (v32 == *a6) {
            goto LABEL_28;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          unint64_t v36 = v33 / 80;
          uint64_t v37 = v36 <= 1 ? 1 : v36;
          double v38 = (_DWORD *)(v31 + 8);
          BOOL v39 = 1;
          while (v20 != *(v38 - 2) || v27 != *v38)
          {
            BOOL v39 = v36 > ++v35;
            v34 += 0x100000000;
            v38 += 20;
            if (v37 == v35) {
              goto LABEL_28;
            }
          }
          if (!v39)
          {
LABEL_28:
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - *v29) >> 4) <= v27) {
LABEL_118:
            }
              sub_1DD4BAA78();
            uint64_t v48 = *v29 + 48 * v27;
            int v51 = *(__int16 *)(v48 + 42);
            double v49 = (_WORD *)(v48 + 42);
            __int16 v50 = v51;
            if (v51 <= 4094) {
              *double v49 = v50 + 1;
            }
            float v11 = v10;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - *v29) >> 4) <= v27) {
              goto LABEL_118;
            }
            uint64_t v40 = *v29 + 48 * v27;
            *(_WORD *)(v40 + 42) = 0;
            long long v41 = *(_OWORD *)(v40 + 32);
            *(_OWORD *)&v130[16] = *(_OWORD *)(v40 + 16);
            long long v131 = v41;
            *(_OWORD *)int v130 = *(_OWORD *)v40;
            if (SWORD4(v41) <= 4094) {
              WORD4(v131) = WORD4(v41) + 1;
            }
            *(void *)v130 *= 2;
            uint64_t v42 = *(void *)&v130[24];
            *(_OWORD *)&v130[16] = *(_OWORD *)&v130[8];
            *(void *)&long long v131 = v42;
            uint64_t v43 = v34 >> 32;
            float v44 = sub_1DD5014F4((float *)(v31 + 80 * SHIDWORD(v34) + 12), (float *)(v31 + 80 * SHIDWORD(v34) + 20), v135, (float *)&v130[8], v23);
            char v45 = v130[0];
            if (v44 <= v22)
            {
              char v45 = v130[0] | 1;
              *(void *)v130 |= 1uLL;
              ++v125;
            }
            unint64_t v46 = v45 & 2;
            if ((v45 & 2) != 0) {
              int v47 = v45 & 1;
            }
            else {
              int v47 = 0;
            }
            if (SWORD4(v131) >= 2)
            {
              switch(v45 & 3)
              {
                case 1:
                  LODWORD(v118) = v118 + 1;
                  break;
                case 2:
                  ++HIDWORD(v118);
                  break;
                default:
                  break;
              }
            }
            long long v52 = *(_OWORD *)&v130[16];
            *(_OWORD *)uint64_t v40 = *(_OWORD *)v130;
            *(_OWORD *)(v40 + 16) = v52;
            *(_OWORD *)(v40 + 32) = v131;
            if (v44 > v22)
            {
              float v11 = v10;
            }
            else
            {
              char v124 = v21;
              double v53 = (float *)(*a6 + 80 * (int)v43);
              float v54 = sqrtf((float)((float)(v53[4] - v53[6]) * (float)(v53[4] - v53[6]))+ (float)((float)(v53[3] - v53[5]) * (float)(v53[3] - v53[5])));
              double v55 = v133;
              unint64_t v123 = v46;
              if (v133 >= (float *)v134)
              {
                double v57 = (float *)__p;
                uint64_t v58 = ((char *)v133 - (unsigned char *)__p) >> 2;
                unint64_t v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62) {
                  sub_1DD4BACA0();
                }
                uint64_t v60 = v134 - (unsigned char *)__p;
                if ((v134 - (unsigned char *)__p) >> 1 > v59) {
                  unint64_t v59 = v60 >> 1;
                }
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v61 = v59;
                }
                if (v61)
                {
                  double v62 = (char *)sub_1DD4BB6B8((uint64_t)&v134, v61);
                  double v57 = (float *)__p;
                  double v55 = v133;
                }
                else
                {
                  double v62 = 0;
                }
                double v63 = (float *)&v62[4 * v58];
                float *v63 = v54;
                double v56 = v63 + 1;
                while (v55 != v57)
                {
                  int v64 = *((_DWORD *)v55-- - 1);
                  *((_DWORD *)v63-- - 1) = v64;
                }
                long long __p = v63;
                int v133 = v56;
                int v134 = &v62[4 * v61];
                if (v57) {
                  operator delete(v57);
                }
              }
              else
              {
                *int v133 = v54;
                double v56 = v55 + 1;
              }
              int v133 = v56;
              double v65 = (void *)(*a6 + 80 * (int)v43 + 12);
              double v67 = a1[1];
              unint64_t v66 = (unint64_t)a1[2];
              if ((unint64_t)v67 >= v66)
              {
                uint64_t v70 = ((char *)v67 - (unsigned char *)*a1) >> 3;
                if ((unint64_t)(v70 + 1) >> 61) {
                  sub_1DD4BACA0();
                }
                uint64_t v71 = v66 - (void)*a1;
                uint64_t v72 = v71 >> 2;
                if (v71 >> 2 <= (unint64_t)(v70 + 1)) {
                  uint64_t v72 = v70 + 1;
                }
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v73 = v72;
                }
                if (v73) {
                  double v74 = (char *)sub_1DD4BAF80((uint64_t)(a1 + 2), v73);
                }
                else {
                  double v74 = 0;
                }
                double v75 = &v74[8 * v70];
                *(void *)double v75 = *v65;
                double v68 = v75 + 8;
                double v69 = a1;
                double v77 = (char *)*a1;
                double v76 = (char *)a1[1];
                if (v76 != *a1)
                {
                  do
                  {
                    uint64_t v78 = *((void *)v76 - 1);
                    v76 -= 8;
                    *((void *)v75 - 1) = v78;
                    v75 -= 8;
                  }
                  while (v76 != v77);
                  double v76 = (char *)*a1;
                }
                *a1 = v75;
                a1[1] = v68;
                a1[2] = &v74[8 * v73];
                if (v76) {
                  operator delete(v76);
                }
              }
              else
              {
                void *v67 = *v65;
                double v68 = v67 + 1;
                double v69 = a1;
              }
              v69[1] = v68;
              uint64_t v79 = *a6 + 80 * (int)v43;
              float v81 = *(float *)(v79 + 12);
              uint64_t v80 = v79 + 12;
              float v11 = v81;
              if (v124)
              {
                if (v11 < v9) {
                  float v9 = v11;
                }
                uint64_t v82 = *a6 + 80 * (int)v43;
                float v83 = *(float *)(v82 + 16);
                if (v83 < v8) {
                  float v8 = *(float *)(v82 + 16);
                }
                if (v10 >= v11) {
                  float v11 = v10;
                }
                if (v18 < v83) {
                  float v18 = *(float *)(v82 + 16);
                }
                char v21 = 1;
              }
              else
              {
                float v18 = *(float *)(v80 + 4);
                char v21 = 1;
                float v8 = v18;
                float v9 = v11;
              }
              unint64_t v46 = v123;
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - *v29) >> 4) <= v27) {
              sub_1DD4BAA78();
            }
            LODWORD(v128) = v128 + (v46 >> 1);
            HIDWORD(v128) += v47;
            int v84 = (long long *)(*v29 + 48 * v27);
            int v85 = (_OWORD *)(*a6 + 80 * (int)v43);
            long long v86 = *v84;
            long long v87 = v84[2];
            v85[3] = v84[1];
            void v85[4] = v87;
            v85[2] = v86;
            unint64_t v26 = *v126;
          }
          ++v27;
          float v10 = v11;
        }
        while (v26 > v27);
      }
      else
      {
        float v11 = v10;
      }
      ++v20;
      float v10 = v11;
    }
    while (v20 != v119);
  }
  if (v121)
  {
    int v88 = (char *)*v121;
    if (*v121 != v121[1]) {
      v121[1] = v88;
    }
    uint64_t v89 = *a6;
    if (a6[1] != *a6)
    {
      uint64_t v90 = 0;
      unsigned int v91 = 0;
      int v92 = v121 + 2;
      __asm { FMOV            V0.2D, #0.5 }
      float64x2_t v127 = _Q0;
      do
      {
        uint64_t v98 = v89 + 80 * v90;
        int16x4_t v99 = vmovn_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)(v98 + 12)), v127)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(vcvt_hight_f64_f32(*(float32x4_t *)(v98 + 12)), v127))));
        long long v100 = *(_OWORD *)(v98 + 48);
        *(_OWORD *)int v130 = *(_OWORD *)(v98 + 32);
        *(_OWORD *)&v130[16] = v100;
        long long v131 = *(_OWORD *)(v98 + 64);
        if ((unint64_t)v88 >= *v92)
        {
          uint64_t v103 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v88[-*v121] >> 3);
          unint64_t v104 = v103 + 1;
          if ((unint64_t)(v103 + 1) > 0x492492492492492) {
            sub_1DD4BACA0();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v92 - *v121) >> 3) > v104) {
            unint64_t v104 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v92 - *v121) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v92 - *v121) >> 3)) >= 0x249249249249249) {
            unint64_t v105 = 0x492492492492492;
          }
          else {
            unint64_t v105 = v104;
          }
          if (v105) {
            int v106 = (char *)sub_1DD508244((uint64_t)v92, v105);
          }
          else {
            int v106 = 0;
          }
          int v107 = &v106[56 * v103];
          *(int16x4_t *)int v107 = v99;
          long long v108 = *(_OWORD *)&v130[16];
          *(_OWORD *)(v107 + 8) = *(_OWORD *)v130;
          *(_OWORD *)(v107 + 24) = v108;
          *(_OWORD *)(v107 + 40) = v131;
          int v110 = (char *)*v121;
          int v109 = (char *)v121[1];
          int v111 = v107;
          if (v109 != (char *)*v121)
          {
            do
            {
              long long v112 = *(_OWORD *)(v109 - 56);
              long long v113 = *(_OWORD *)(v109 - 40);
              long long v114 = *(_OWORD *)(v109 - 24);
              *((void *)v111 - 1) = *((void *)v109 - 1);
              *(_OWORD *)(v111 - 24) = v114;
              *(_OWORD *)(v111 - 40) = v113;
              *(_OWORD *)(v111 - 56) = v112;
              v111 -= 56;
              v109 -= 56;
            }
            while (v109 != v110);
            int v109 = (char *)*v121;
          }
          int v88 = v107 + 56;
          *BOOL v121 = v111;
          v121[1] = v107 + 56;
          v121[2] = &v106[56 * v105];
          if (v109) {
            operator delete(v109);
          }
        }
        else
        {
          *(int16x4_t *)int v88 = v99;
          long long v101 = *(_OWORD *)v130;
          long long v102 = *(_OWORD *)&v130[16];
          *(_OWORD *)(v88 + 40) = v131;
          *(_OWORD *)(v88 + 24) = v102;
          *(_OWORD *)(v88 + 8) = v101;
          v88 += 56;
        }
        v121[1] = v88;
        uint64_t v89 = *a6;
        uint64_t v90 = ++v91;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 4) > v91);
    }
  }
  int v115 = (std::__shared_weak_count *)a3[1];
  v129[0] = *a3;
  v129[1] = v115;
  if (v115) {
    atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DD501BE8((uint64_t)v129);
  if (v115) {
    sub_1DD4C9D84(v115);
  }
  if (v117)
  {
    *(_DWORD *)uint64_t v117 = -858993459 * ((unint64_t)(a6[1] - *a6) >> 4);
    *(_DWORD *)(v117 + 4) = v125;
    *(void *)(v117 + 8) = v128;
    *(float *)(v117 + 48) = v11;
    *(float *)(v117 + 52) = v18;
    *(float *)(v117 + 40) = v9;
    *(float *)(v117 + 44) = v8;
    *(void *)(v117 + 32) = v118;
    sub_1DD50165C((uint64_t)&__p, v117, v116);
  }
  if (__p)
  {
    int v133 = (float *)__p;
    operator delete(__p);
  }
}

void sub_1DD502628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD502684(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_1DD4BACA0();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)sub_1DD4BB6B8(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    float v9 = &v6[4 * v8];
    float v10 = (char *)*a1;
    float v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1DD50272C(char **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7, float a8)
{
  uint64_t v15 = a3;
  uint64_t v17 = 0;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  float v18 = *(float *)(*a3 + 16);
  do
  {
    float v19 = *(double *)(a5 + 8 * v17);
    v120[v17++] = v19;
  }
  while (v17 != 9);
  memset(v119, 0, sizeof(v119));
  sub_1DD501C50(a6, v119);
  long long __p = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  sub_1DD502684(&__p, 0x2EEuLL);
  uint64_t v104 = a2;
  uint64_t v20 = a6[1];
  int v106 = v15;
  if (v20 == *a6)
  {
    uint64_t v105 = 0;
    LODWORD(v112) = 0;
    uint64_t v111 = 0;
    int v110 = 0;
    uint64_t v78 = a6[1];
  }
  else
  {
    unint64_t v21 = 0;
    int v110 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v105 = 0;
    float v22 = a8 * a8;
    uint64_t v20 = *a6;
    float v23 = 1.0 / v18;
    uint64_t v107 = a4;
    do
    {
      uint64_t v24 = (int *)(v20 + 80 * v21);
      int v25 = *v24;
      unint64_t v26 = v24[2];
      uint64_t v27 = *(void *)(*(void *)a4 + 56) + 296 * *v24;
      uint64_t v28 = *(void *)(v27 + 272);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v27 + 280) - v28) >> 4) <= v26) {
        sub_1DD4BAA78();
      }
      unint64_t v29 = v24[1];
      double v30 = (_OWORD *)(v28 + 48 * (int)v26);
      long long v31 = v30[2];
      *(_OWORD *)&v114[16] = v30[1];
      long long v115 = v31;
      *(_OWORD *)long long v114 = *v30;
      if (SWORD4(v31) <= 4094) {
        WORD4(v115) = WORD4(v31) + 1;
      }
      *(void *)v114 *= 2;
      uint64_t v32 = *(void *)&v114[24];
      *(_OWORD *)&v114[16] = *(_OWORD *)&v114[8];
      *(void *)&long long v115 = v32;
      float v33 = sub_1DD5014F4((float *)(v20 + 80 * v21 + 12), (float *)(v20 + 80 * v21 + 20), v120, (float *)&v114[8], v23);
      if (v33 <= v22) {
        *(void *)v114 |= 1uLL;
      }
      uint64_t v34 = *(void *)(*v15 + 56) + 296 * v25;
      uint64_t v35 = *(void *)(v34 + 272);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v34 + 280) - v35) >> 4) <= v29) {
        sub_1DD4BAA78();
      }
      unint64_t v36 = (_OWORD *)(v35 + 48 * (int)v29);
      long long v37 = *(_OWORD *)v114;
      long long v38 = *(_OWORD *)&v114[16];
      _OWORD *v36 = *(_OWORD *)v114;
      v36[1] = v38;
      long long v39 = v115;
      void v36[2] = v115;
      uint64_t v40 = (_OWORD *)(*a6 + 80 * v21);
      v40[2] = v37;
      v40[3] = v38;
      v40[4] = v39;
      if (((*(void *)((char *)v119[0] + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      {
        int v41 = v114[0] & 1;
        unint64_t v42 = v114[0] & 2;
        if ((v114[0] & 2) != 0) {
          int v43 = v114[0] & 1;
        }
        else {
          int v43 = 0;
        }
        if (SWORD4(v115) > 1)
        {
          switch(v114[0] & 3)
          {
            case 1:
              LODWORD(v105) = v105 + 1;
              break;
            case 2:
              ++HIDWORD(v105);
              if (v114[0]) {
                goto LABEL_21;
              }
              goto LABEL_19;
            default:
              break;
          }
        }
        if (v114[0])
        {
LABEL_21:
          char v45 = (float *)(*a6 + 80 * v21);
          float v46 = sqrtf((float)((float)(v45[4] - v45[6]) * (float)(v45[4] - v45[6]))+ (float)((float)(v45[3] - v45[5]) * (float)(v45[3] - v45[5])));
          int v47 = v117;
          if (v117 >= v118)
          {
            double v49 = (float *)__p;
            uint64_t v50 = ((char *)v117 - (unsigned char *)__p) >> 2;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62) {
              sub_1DD4BACA0();
            }
            uint64_t v52 = (char *)v118 - (unsigned char *)__p;
            if (((char *)v118 - (unsigned char *)__p) >> 1 > v51) {
              unint64_t v51 = v52 >> 1;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              float v54 = (char *)sub_1DD4BB6B8((uint64_t)&v118, v53);
              double v49 = (float *)__p;
              int v47 = v117;
            }
            else
            {
              float v54 = 0;
            }
            double v55 = (float *)&v54[4 * v50];
            float *v55 = v46;
            uint64_t v48 = v55 + 1;
            while (v47 != v49)
            {
              int v56 = *((_DWORD *)v47-- - 1);
              *((_DWORD *)v55-- - 1) = v56;
            }
            long long __p = v55;
            uint64_t v117 = v48;
            uint64_t v118 = (float *)&v54[4 * v53];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *uint64_t v117 = v46;
            uint64_t v48 = v47 + 1;
          }
          uint64_t v117 = v48;
          double v57 = (void *)(*a6 + 80 * v21 + 12);
          uint64_t v58 = a1;
          uint64_t v60 = a1[1];
          unint64_t v59 = (unint64_t)a1[2];
          if ((unint64_t)v60 >= v59)
          {
            uint64_t v62 = (v60 - *a1) >> 3;
            if ((unint64_t)(v62 + 1) >> 61) {
              sub_1DD4BACA0();
            }
            uint64_t v63 = v59 - (void)*a1;
            uint64_t v64 = v63 >> 2;
            if (v63 >> 2 <= (unint64_t)(v62 + 1)) {
              uint64_t v64 = v62 + 1;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65) {
              unint64_t v66 = (char *)sub_1DD4BAF80((uint64_t)(a1 + 2), v65);
            }
            else {
              unint64_t v66 = 0;
            }
            double v67 = &v66[8 * v62];
            *(void *)double v67 = *v57;
            unint64_t v61 = v67 + 8;
            double v69 = *a1;
            double v68 = a1[1];
            if (v68 == *a1)
            {
              uint64_t v15 = v106;
              uint64_t v71 = a1;
            }
            else
            {
              uint64_t v15 = v106;
              do
              {
                uint64_t v70 = *((void *)v68 - 1);
                v68 -= 8;
                *((void *)v67 - 1) = v70;
                v67 -= 8;
              }
              while (v68 != v69);
              uint64_t v71 = a1;
              double v68 = *a1;
            }
            *uint64_t v71 = v67;
            v71[1] = v61;
            v71[2] = &v66[8 * v65];
            if (v68)
            {
              operator delete(v68);
              uint64_t v58 = a1;
            }
            else
            {
              uint64_t v58 = v71;
            }
          }
          else
          {
            *(void *)uint64_t v60 = *v57;
            unint64_t v61 = v60 + 8;
            uint64_t v15 = v106;
          }
          v58[1] = v61;
          uint64_t v72 = *a6 + 80 * v21;
          float v74 = *(float *)(v72 + 12);
          uint64_t v73 = v72 + 12;
          float v44 = v74;
          if ((v112 & 0x100000000) != 0)
          {
            if (v44 < v9) {
              float v9 = v44;
            }
            uint64_t v75 = *a6 + 80 * v21;
            float v76 = *(float *)(v75 + 16);
            if (v76 < v8) {
              float v8 = *(float *)(v75 + 16);
            }
            if (v11 >= v44) {
              float v44 = v11;
            }
            if (v10 < v76) {
              float v10 = *(float *)(v75 + 16);
            }
          }
          else
          {
            float v10 = *(float *)(v73 + 4);
            float v8 = v10;
            float v9 = v44;
          }
        }
        else
        {
LABEL_19:
          float v44 = v11;
        }
        ++v110;
        LODWORD(v111) = v111 + v41;
        LODWORD(v112) = v43 + v112;
        HIDWORD(v111) += v42 >> 1;
        int v77 = HIDWORD(v112);
        if (v33 <= v22) {
          int v77 = 1;
        }
        HIDWORD(v112) = v77;
        float v11 = v44;
        a4 = v107;
      }
      ++v21;
      uint64_t v20 = *a6;
      uint64_t v78 = a6[1];
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v78 - *a6) >> 4) > v21);
  }
  if (a7)
  {
    uint64_t v79 = (char *)*a7;
    a7[1] = *a7;
    if (v78 != v20)
    {
      unint64_t v80 = 0;
      float v81 = a7 + 2;
      while (((*(void *)((char *)v119[0] + ((v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v80) & 1) != 0)
      {
LABEL_96:
        if (0xCCCCCCCCCCCCCCCDLL * ((v78 - v20) >> 4) <= ++v80) {
          goto LABEL_97;
        }
      }
      uint64_t v82 = v20 + 80 * v80;
      int16x4_t v83 = vmovn_s32(vcvtq_s32_f32(*(float32x4_t *)(v82 + 12)));
      long long v84 = *(_OWORD *)(v82 + 32);
      long long v85 = *(_OWORD *)(v82 + 64);
      *(_OWORD *)&v114[16] = *(_OWORD *)(v82 + 48);
      long long v115 = v85;
      *(_OWORD *)long long v114 = v84;
      if ((unint64_t)v79 >= *v81)
      {
        uint64_t v88 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v79[-*a7] >> 3);
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) > 0x492492492492492) {
          sub_1DD4BACA0();
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v81 - *a7) >> 3) > v89) {
          unint64_t v89 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v81 - *a7) >> 3);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v81 - *a7) >> 3)) >= 0x249249249249249) {
          unint64_t v90 = 0x492492492492492;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90) {
          unsigned int v91 = (char *)sub_1DD508244((uint64_t)v81, v90);
        }
        else {
          unsigned int v91 = 0;
        }
        int v92 = &v91[56 * v88];
        *(int16x4_t *)int v92 = v83;
        long long v93 = *(_OWORD *)&v114[16];
        *(_OWORD *)(v92 + 8) = *(_OWORD *)v114;
        *(_OWORD *)(v92 + 24) = v93;
        *(_OWORD *)(v92 + 40) = v115;
        int v95 = (char *)*a7;
        int v94 = (char *)a7[1];
        int v96 = v92;
        if (v94 == (char *)*a7)
        {
          long long v100 = (char **)a7;
        }
        else
        {
          do
          {
            long long v97 = *(_OWORD *)(v94 - 56);
            long long v98 = *(_OWORD *)(v94 - 40);
            long long v99 = *(_OWORD *)(v94 - 24);
            *((void *)v96 - 1) = *((void *)v94 - 1);
            *(_OWORD *)(v96 - 24) = v99;
            *(_OWORD *)(v96 - 40) = v98;
            *(_OWORD *)(v96 - 56) = v97;
            v96 -= 56;
            v94 -= 56;
          }
          while (v94 != v95);
          long long v100 = (char **)a7;
          int v94 = (char *)*a7;
        }
        uint64_t v79 = v92 + 56;
        *long long v100 = v96;
        v100[1] = v92 + 56;
        v100[2] = &v91[56 * v90];
        if (!v94) {
          goto LABEL_95;
        }
        operator delete(v94);
      }
      else
      {
        *(int16x4_t *)uint64_t v79 = v83;
        long long v86 = *(_OWORD *)v114;
        long long v87 = *(_OWORD *)&v114[16];
        *(_OWORD *)(v79 + 40) = v115;
        *(_OWORD *)(v79 + 24) = v87;
        *(_OWORD *)(v79 + 8) = v86;
        v79 += 56;
      }
      long long v100 = (char **)a7;
LABEL_95:
      v100[1] = v79;
      uint64_t v20 = *a6;
      uint64_t v78 = a6[1];
      goto LABEL_96;
    }
  }
LABEL_97:
  long long v101 = (std::__shared_weak_count *)v106[1];
  v113[0] = *v106;
  v113[1] = v101;
  if (v101) {
    atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DD501BE8((uint64_t)v113);
  if (v101) {
    sub_1DD4C9D84(v101);
  }
  if (v104)
  {
    int v103 = *(_DWORD *)(*v106 + 12);
    *(_DWORD *)uint64_t v104 = v110;
    *(void *)(v104 + 4) = v111;
    *(_DWORD *)(v104 + 12) = v112;
    *(_DWORD *)(v104 + 16) = v103;
    *(void *)(v104 + 32) = v105;
    *(float *)(v104 + 48) = v11;
    *(float *)(v104 + 52) = v10;
    *(float *)(v104 + 40) = v9;
    *(float *)(v104 + 44) = v8;
    sub_1DD50165C((uint64_t)&__p, v104, v102);
  }
  if (__p)
  {
    uint64_t v117 = (float *)__p;
    operator delete(__p);
  }
  if (v119[0]) {
    operator delete(v119[0]);
  }
}

void sub_1DD502F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33)
{
  if (v33) {
    sub_1DD4C9D84(v33);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DD502FAC(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 16) < *(float *)(a2 + 16);
}

uint64_t sub_1DD502FC0(uint64_t *a1, uint64_t a2)
{
  long long __p = 0;
  unint64_t v42 = 0;
  int v43 = 0;
  sub_1DD4D03E8(&__p, 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4));
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4 != *a1)
  {
    unint64_t v6 = 0;
    do
    {
      int v7 = 0;
      uint64_t v8 = 1;
      while ((v8 & *(void *)(v5 + 80 * v6 + 32)) != 0)
      {
        ++v7;
        v8 *= 2;
        if (v7 == 64) {
          goto LABEL_8;
        }
      }
      if (!v7) {
        goto LABEL_25;
      }
LABEL_8:
      float v9 = v42;
      if (v42 >= v43)
      {
        float v11 = (char *)__p;
        uint64_t v12 = (v42 - (unsigned char *)__p) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          sub_1DD4BACA0();
        }
        uint64_t v14 = v43 - (unsigned char *)__p;
        if ((v43 - (unsigned char *)__p) >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)sub_1DD4BB6B8((uint64_t)&v43, v15);
          float v11 = (char *)__p;
          float v9 = v42;
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v16[4 * v12];
        *(_DWORD *)uint64_t v17 = v7;
        float v10 = v17 + 4;
        while (v9 != v11)
        {
          int v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        long long __p = v17;
        unint64_t v42 = v10;
        int v43 = &v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v42 = v7;
        float v10 = v9 + 4;
      }
      unint64_t v42 = v10;
      uint64_t v5 = *a1;
      uint64_t v4 = a1[1];
LABEL_25:
      ++v6;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) > v6);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  float v19 = (char *)__p;
  if (v42 == __p) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = *(_DWORD *)((char *)__p + (((v42 - (unsigned char *)__p) >> 1) & 0xFFFFFFFFFFFFFFFCLL));
  }
  uint64_t v22 = *a1;
  uint64_t v21 = a1[1];
  if (v21 != *a1)
  {
    unint64_t v23 = 0;
    do
    {
      unsigned int v24 = 0;
      uint64_t v25 = 1;
      do
      {
        if ((v25 & *(void *)(v22 + 80 * v23 + 32)) == 0) {
          break;
        }
        ++v24;
        v25 *= 2;
      }
      while (v24 != 64);
      if (v24 >= v20)
      {
        uint64_t v27 = *(_DWORD **)(a2 + 8);
        unint64_t v26 = *(void *)(a2 + 16);
        if ((unint64_t)v27 >= v26)
        {
          unint64_t v29 = *(_DWORD **)a2;
          uint64_t v30 = ((uint64_t)v27 - *(void *)a2) >> 2;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62) {
            sub_1DD4BACA0();
          }
          uint64_t v32 = v26 - (void)v29;
          if (v32 >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            uint64_t v34 = (char *)sub_1DD4BB6B8(a2 + 16, v33);
            unint64_t v29 = *(_DWORD **)a2;
            uint64_t v27 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            uint64_t v34 = 0;
          }
          uint64_t v35 = &v34[4 * v30];
          *(_DWORD *)uint64_t v35 = v23;
          uint64_t v28 = v35 + 4;
          while (v27 != v29)
          {
            int v36 = *--v27;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(void *)a2 = v35;
          *(void *)(a2 + 8) = v28;
          *(void *)(a2 + 16) = &v34[4 * v33];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          _DWORD *v27 = v23;
          uint64_t v28 = v27 + 1;
        }
        *(void *)(a2 + 8) = v28;
        uint64_t v22 = *a1;
        uint64_t v21 = a1[1];
      }
      ++v23;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v21 - v22) >> 4) > v23);
    float v19 = (char *)__p;
  }
  uint64_t v39 = a2;
  long long v37 = *(_DWORD **)a2;
  uint64_t v38 = *(void *)(v39 + 8);
  if (v19)
  {
    unint64_t v42 = v19;
    operator delete(v19);
  }
  return (v38 - (uint64_t)v37) >> 2;
}

void sub_1DD5032B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DD5032E4(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = byte_1DD512A68[*(unsigned __int8 *)(a1 + 32)];
  unsigned int v3 = byte_1DD512A68[*(unsigned __int8 *)(a2 + 32)];
  if (v2 != v3) {
    return v2 > v3;
  }
  int v4 = *(unsigned __int16 *)(a1 + 72);
  int v5 = *(unsigned __int16 *)(a2 + 72);
  if (v4 != v5) {
    return (__int16)v4 > (__int16)v5;
  }
  float v6 = (float)(*(float *)(a1 + 44) * *(float *)(a1 + 44)) + (float)(*(float *)(a1 + 40) * *(float *)(a1 + 40));
  float v7 = (float)(*(float *)(a2 + 44) * *(float *)(a2 + 44)) + (float)(*(float *)(a2 + 40) * *(float *)(a2 + 40));
  BOOL v8 = v6 < v7;
  if (v6 == v7)
  {
    float v9 = *(float *)(a1 + 28);
    float v10 = *(float *)(a2 + 28);
    return v9 == v10 || v9 < v10;
  }
  return v8;
}

void sub_1DD503374(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v4 = a1;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  size_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  char v60 = 0;
  sub_1DD50989C(__p, v5, &v60);
  uint64_t v7 = *v4;
  uint64_t v6 = v4[1];
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *v4) >> 4);
  if (v6 == *v4)
  {
    uint64_t v57 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = v4;
    float v10 = a3 * a3;
    uint64_t v11 = 80;
    uint64_t v12 = 1;
    do
    {
      uint64_t v13 = v7 + 80 * v9;
      float v14 = *(float *)(v13 + 20);
      float v15 = *(float *)(v13 + 24);
      uint64_t v59 = v6;
      if (v9)
      {
        uint64_t v16 = v11;
        uint64_t v17 = __p[0];
        uint64_t v18 = v12;
        while (1)
        {
          uint64_t v19 = (v18 - 2);
          uint64_t v20 = v7 + 80 * v19;
          float v21 = *(float *)(v20 + 24);
          if (v21 < (float)(v15 - a3))
          {
LABEL_10:
            unsigned int v23 = v9;
            goto LABEL_11;
          }
          if (!v17[v19])
          {
            float v22 = v14 - *(float *)(v7 + 80 * v19 + 20);
            if ((float)((float)((float)(v15 - v21) * (float)(v15 - v21)) + (float)(v22 * v22)) < v10
              && sub_1DD5032E4(v20, v7 + 80 * v9))
            {
              break;
            }
          }
          if (--v18 <= 1) {
            goto LABEL_10;
          }
        }
        unsigned int v23 = v18 - 2;
LABEL_11:
        uint64_t v11 = v16;
        int v4 = v58;
      }
      else
      {
        unsigned int v23 = 0;
      }
      uint64_t v24 = v23;
      unint64_t v25 = v9 + 1;
      if (v23 == v9 && v8 > v25)
      {
        uint64_t v56 = v11;
        unint64_t v26 = __p[0];
        uint64_t v27 = v7 + v11;
        for (uint64_t i = v12; v8 != i; ++i)
        {
          float v29 = *(float *)(v27 + 24);
          if (v29 > (float)(v15 + a3)) {
            break;
          }
          if (!v26[i]
            && (float)((float)((float)(v15 - v29) * (float)(v15 - v29))
                     + (float)((float)(v14 - *(float *)(v27 + 20)) * (float)(v14 - *(float *)(v27 + 20)))) < v10
            && sub_1DD5032E4(v27, v7 + 80 * v9))
          {
            uint64_t v24 = i;
            break;
          }
          v27 += 80;
        }
        int v4 = v58;
        unint64_t v25 = v9 + 1;
        uint64_t v11 = v56;
      }
      if (v9 == v24)
      {
        uint64_t v6 = v59;
      }
      else
      {
        *((unsigned char *)__p[0] + v9) = 1;
        ++v57;
        uint64_t v7 = *v4;
        uint64_t v6 = v4[1];
      }
      unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4);
      ++v12;
      v11 += 80;
      unint64_t v9 = v25;
    }
    while (v8 > v25);
  }
  sub_1DD503780((void **)a2, v8 - v57);
  uint64_t v31 = *v4;
  uint64_t v30 = v4[1];
  if (v30 != *v4)
  {
    unint64_t v32 = 0;
    do
    {
      if (!*((unsigned char *)__p[0] + v32))
      {
        unint64_t v33 = (_OWORD *)(v31 + 80 * v32);
        uint64_t v35 = *(_OWORD **)(a2 + 8);
        unint64_t v34 = *(void *)(a2 + 16);
        if ((unint64_t)v35 >= v34)
        {
          uint64_t v40 = *(_OWORD **)a2;
          unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v35 - *(void *)a2) >> 4);
          unint64_t v42 = v41 + 1;
          if (v41 + 1 > 0x333333333333333) {
            sub_1DD4BACA0();
          }
          unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - (void)v40) >> 4);
          if (2 * v43 > v42) {
            unint64_t v42 = 2 * v43;
          }
          if (v43 >= 0x199999999999999) {
            unint64_t v44 = 0x333333333333333;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            char v45 = (char *)sub_1DD509960(a2 + 16, v44);
            uint64_t v40 = *(_OWORD **)a2;
            uint64_t v35 = *(_OWORD **)(a2 + 8);
          }
          else
          {
            char v45 = 0;
          }
          float v46 = &v45[80 * v41];
          *(_OWORD *)float v46 = *v33;
          long long v47 = v33[1];
          long long v48 = v33[2];
          long long v49 = v33[4];
          *((_OWORD *)v46 + 3) = v33[3];
          *((_OWORD *)v46 + 4) = v49;
          *((_OWORD *)v46 + 1) = v47;
          *((_OWORD *)v46 + 2) = v48;
          if (v35 == v40)
          {
            float v54 = &v45[80 * v41];
          }
          else
          {
            uint64_t v50 = &v45[80 * v41];
            do
            {
              *((_OWORD *)v50 - 5) = *(v35 - 5);
              long long v51 = *(v35 - 4);
              long long v52 = *(v35 - 3);
              long long v53 = *(v35 - 1);
              float v54 = v50 - 80;
              *((_OWORD *)v50 - 2) = *(v35 - 2);
              *((_OWORD *)v50 - 1) = v53;
              *((_OWORD *)v50 - 4) = v51;
              *((_OWORD *)v50 - 3) = v52;
              v35 -= 5;
              v50 -= 80;
            }
            while (v35 != v40);
          }
          uint64_t v39 = v46 + 80;
          *(void *)a2 = v54;
          *(void *)(a2 + 8) = v46 + 80;
          *(void *)(a2 + 16) = &v45[80 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *uint64_t v35 = *v33;
          long long v36 = v33[1];
          long long v37 = v33[2];
          long long v38 = v33[4];
          v35[3] = v33[3];
          _OWORD v35[4] = v38;
          v35[1] = v36;
          v35[2] = v37;
          uint64_t v39 = v35 + 5;
        }
        *(void *)(a2 + 8) = v39;
        uint64_t v31 = *v4;
        uint64_t v30 = v4[1];
      }
      ++v32;
    }
    while (v32 < 0xCCCCCCCCCCCCCCCDLL * ((v30 - v31) >> 4));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DD50373C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v18 = *(void **)a9;
  if (*(void *)a9)
  {
    *(void *)(a9 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD503780(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      sub_1DD4BACA0();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 80;
    uint64_t v6 = (char *)sub_1DD509960(v3, a2);
    uint64_t v7 = &v6[80 * v5];
    unint64_t v9 = &v6[80 * v8];
    uint64_t v11 = (char *)*a1;
    float v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 5) = *((_OWORD *)v10 - 5);
        long long v13 = *((_OWORD *)v10 - 4);
        long long v14 = *((_OWORD *)v10 - 3);
        long long v15 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 4) = v13;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 80;
        v10 -= 80;
      }
      while (v10 != v11);
      float v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

unint64_t sub_1DD503874(void *a1, void *a2, void *a3, int **a4, unint64_t a5, unint64_t a6, int a7, int a8, int *a9)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (a2[2]) {
    a2[2] = 0;
  }
  if (a3[1] != *a3) {
    a3[1] = *a3;
  }
  if (a4[1] != *a4) {
    a4[1] = *a4;
  }
  sub_1DD5099A8(__p, a1[2]);
  unint64_t v16 = a1[2];
  if (a8 > a7)
  {
    bzero(v58, 0x400uLL);
    if (v16)
    {
      for (unint64_t i = 0; i < v16; ++i)
      {
        unint64_t v18 = a1[1];
        uint64_t v19 = (unsigned int *)(*a1 + a1[3] * i);
        if (v18) {
          BOOL v20 = (v19 & 3) == 0;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          LODWORD(j) = 0;
          unsigned __int8 v23 = 0;
        }
        else
        {
          uint64_t v22 = 0;
          unsigned __int8 v23 = 0;
          do
          {
            uint64_t v24 = *((unsigned __int8 *)v19 + v22);
            if ((int)v24 >= a7)
            {
              if (v23 <= v24) {
                unsigned __int8 v23 = *((unsigned char *)v19 + v22);
              }
              ++v58[v24];
            }
            uint64_t v25 = v22 + 1;
            if (v18 <= v22 + 1) {
              break;
            }
            char v26 = (_BYTE)v19 + 1 + v22++;
          }
          while ((v26 & 3) != 0);
          uint64_t v19 = (unsigned int *)((char *)v19 + v25);
          LODWORD(j) = v25;
        }
        for (; v18 - 4 > (int)j; LODWORD(j) = j + 4)
        {
          unsigned int v28 = *v19++;
          unsigned int v27 = v28;
          if (v28)
          {
            do
            {
              if (v27 >= a7)
              {
                if (v27 >= v23) {
                  unsigned __int8 v23 = v27;
                }
                ++v58[v27];
              }
              BOOL v29 = v27 >= 0x100;
              v27 >>= 8;
            }
            while (v29);
          }
        }
        for (unint64_t j = (int)j; v18 > j; ++j)
        {
          int v31 = *(unsigned __int8 *)v19;
          uint64_t v19 = (unsigned int *)((char *)v19 + 1);
          uint64_t v30 = v31;
          if (v31 >= a7)
          {
            if (v23 <= v30) {
              unsigned __int8 v23 = v30;
            }
            ++v58[v30];
          }
        }
        *((unsigned char *)__p[0] + i) = v23;
        unint64_t v16 = a1[2];
      }
    }
    unint64_t v32 = 0;
    int v33 = 257;
    uint64_t v34 = 255;
    do
    {
      unint64_t v35 = v32;
      v32 += v58[v34];
      --v33;
      if (v34 <= a7) {
        break;
      }
      if ((unint64_t)(v34 + 1) < 2) {
        break;
      }
      --v34;
    }
    while (v32 < a5);
    a8 = v33 - 1;
    BOOL v37 = v32 > a6;
    uint64_t v36 = v32 - a6;
    if (v37)
    {
      BOOL v37 = v36 <= (uint64_t)(a5 - v35) || (uint64_t)(a5 - v35) <= 0;
      if (!v37) {
        a8 = v33;
      }
    }
  }
  if (v16)
  {
    int v56 = a5;
    unint64_t v38 = 0;
    unint64_t v39 = 0;
    do
    {
      if (a8 <= *((unsigned __int8 *)__p[0] + v38))
      {
        unint64_t v40 = a1[1];
        if (v40)
        {
          for (unint64_t k = 0; k < v40; ++k)
          {
            int v42 = *(unsigned __int8 *)(*a1 + k + a1[3] * v38);
            if (a8 <= v42)
            {
              ++v39;
              if (a2[2] < a2[1])
              {
                sub_1DD503C98(a2, (float)(int)k, (float)(int)v38);
                unint64_t v44 = a4[1];
                unint64_t v43 = (unint64_t)a4[2];
                if ((unint64_t)v44 >= v43)
                {
                  float v46 = *a4;
                  uint64_t v47 = v44 - *a4;
                  unint64_t v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 62) {
                    sub_1DD4BACA0();
                  }
                  uint64_t v49 = v43 - (void)v46;
                  if (v49 >> 1 > v48) {
                    unint64_t v48 = v49 >> 1;
                  }
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v50 = v48;
                  }
                  if (v50)
                  {
                    long long v51 = (char *)sub_1DD4BB6B8((uint64_t)(a4 + 2), v50);
                    float v46 = *a4;
                    unint64_t v44 = a4[1];
                  }
                  else
                  {
                    long long v51 = 0;
                  }
                  long long v52 = (int *)&v51[4 * v47];
                  *long long v52 = v42;
                  char v45 = v52 + 1;
                  while (v44 != v46)
                  {
                    int v53 = *--v44;
                    *--long long v52 = v53;
                  }
                  *a4 = v52;
                  a4[1] = v45;
                  a4[2] = (int *)&v51[4 * v50];
                  if (v46) {
                    operator delete(v46);
                  }
                }
                else
                {
                  *unint64_t v44 = v42;
                  char v45 = v44 + 1;
                }
                a4[1] = v45;
                unint64_t v40 = a1[1];
              }
            }
          }
          unint64_t v16 = a1[2];
        }
      }
      ++v38;
    }
    while (v16 > v38);
    unint64_t v54 = a2[1];
    if (v39 > v54) {
      printf("count : %d > keypoints.capacity() : %d (maxFeatures: %d, minFeatures: %d)\n", v39, v54, a6, v56);
    }
  }
  else
  {
    unint64_t v39 = 0;
  }
  *a9 = a8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v39;
}

void sub_1DD503C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

void *sub_1DD503C98(void *result, float a2, float a3)
{
  unint64_t v3 = result[2];
  if (v3 >= result[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1DD4BAAEC(exception, "_count");
    __cxa_throw(exception, (struct type_info *)off_1E6CC8858, MEMORY[0x1E4FBA1D0]);
  }
  int v4 = (float *)(*result + 8 * v3);
  *int v4 = a2;
  v4[1] = a3;
  result[2] = v3 + 1;
  return result;
}

void sub_1DD503D0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DD503D20(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *(void *)a1 = a4;
  *(unsigned char *)(a1 + 112) = 0;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 304) = *a2;
  *(void *)(a1 + 312) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  *(void *)(a1 + 320) = *a3;
  *(void *)(a1 + 328) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 336) = *a2 + 56;
  *(void *)(a1 + 344) = *a3 + 56;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(int32x2_t *)(a1 + 268) = vrev64_s32(*(int32x2_t *)(*a2 + 20));
  *(void *)(a1 + 296) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 100) = result;
  *(_DWORD *)(a1 + 108) = -1082130432;
  *(unsigned char *)(a1 + 264) = 0;
  *(void *)(a1 + 128) = -1;
  *(void *)(a1 + 8) = 0x3FF0000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_1DD503DCC(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  long long v53 = xmmword_1DD512B68;
  long long v55 = xmmword_1DD512A00;
  long long v56 = xmmword_1DD511730;
  long long v57 = xmmword_1DD512A10;
  long long v58 = xmmword_1DD512A20;
  uint64_t v54 = 0x3FF0000000000000;
  uint64_t v59 = 0x3FF0000000000000;
  unsigned int v2 = (const double *)(a1 + 256);
  unint64_t v3 = (const double *)(a1 + 192);
  uint64_t v4 = (const double *)(a1 + 248);
  uint64_t v5 = (const double *)(a1 + 240);
  uint64_t v6 = (const double *)(a1 + 232);
  uint64_t v7 = (const double *)(a1 + 224);
  uint64_t v8 = (const double *)(a1 + 216);
  unint64_t v9 = (const double *)(a1 + 200);
  float64x2_t v10 = vld1q_dup_f64(v9);
  uint64_t v11 = (const double *)(a1 + 208);
  float64x2_t v12 = vld1q_dup_f64(v3);
  float64x2_t v13 = vld1q_dup_f64(v11);
  float64x2_t v14 = vld1q_dup_f64(v7);
  float64x2_t v15 = vld1q_dup_f64(v8);
  float64x2_t v16 = vld1q_dup_f64(v6);
  float64x2_t v17 = vld1q_dup_f64(v4);
  float64x2_t v18 = vld1q_dup_f64(v5);
  __asm { FMOV            V18.2D, #1.0 }
  float64x2_t v23 = vld1q_dup_f64(v2);
  do
  {
    uint64_t v24 = (const double *)((char *)&v53 + v1 * 8);
    float64x2x3_t v61 = vld3q_f64(v24);
    float64x2_t v25 = vmlaq_f64(vmlaq_f64(vmulq_f64(v61.val[1], v17), v61.val[0], v18), v61.val[2], v23);
    float64x2_t v26 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v10, v61.val[1]), v61.val[0], v12), v61.val[2], v13), v25);
    float64x2_t v27 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v61.val[1], v14), v61.val[0], v15), v61.val[2], v16), v25);
    unsigned int v28 = &v52[v1 + 4];
    vst3q_f64(v28, *(float64x2x3_t *)(&_Q18 - 2));
    v1 += 6;
  }
  while (v1 != 12);
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  BOOL v31 = 1;
  do
  {
    unint64_t v32 = 0;
    double v34 = 0.0;
    double v35 = 1.0e11;
    do
    {
      int v33 = (double *)&v53 + 3 * v30;
      double v36 = sqrt((v33[1] - v52[v32 / 8 + 5]) * (v33[1] - v52[v32 / 8 + 5])+ (*v33 - v52[v32 / 8 + 4]) * (*v33 - v52[v32 / 8 + 4]));
      if (v35 >= v36 && v29 != v32) {
        double v35 = v36;
      }
      if (v29 == v32) {
        double v34 = v36;
      }
      v32 += 24;
    }
    while (v32 != 96);
    v52[v30] = v34;
    if (v35 < v34) {
      break;
    }
    BOOL v31 = v30 < 3;
    v29 += 24;
    ++v30;
  }
  while (v30 != 4);
  uint64_t v38 = 0;
  int v39 = 0;
  do
    v39 |= v52[v38++] > 324.0;
  while (v38 != 4);
  unsigned int v40 = 0;
  float v41 = v52[0];
  for (uint64_t i = 1; i != 4; ++i)
  {
    double v43 = v52[i];
    if (v43 > v41)
    {
      unsigned int v40 = i;
      float v44 = v43;
      float v41 = v44;
    }
  }
  unint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  float v47 = 0.0;
  do
  {
    if (v46 != v45) {
      float v47 = v52[v45 / 8] + v47;
    }
    v45 += 8;
  }
  while (v45 != 32);
  int v48 = (v31 | v39) ^ 1;
  BOOL v49 = v41 <= 384.0;
  if (v41 <= v47) {
    BOOL v49 = 1;
  }
  uint64_t v50 = v49 & v48;
  *(unsigned char *)(a1 + 264) = v50;
  return v50;
}

double sub_1DD50406C(void *a1, float a2)
{
  sub_1DD503374(a1 + 44, (uint64_t)&v5, a2);
  unint64_t v3 = (void *)a1[47];
  if (v3)
  {
    a1[48] = v3;
    operator delete(v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 47) = v5;
  a1[49] = v6;
  return result;
}

void sub_1DD5040C8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 120);
  if (v2 <= *(_DWORD *)(a1 + 116)) {
    int v2 = *(_DWORD *)(a1 + 116);
  }
  *(void *)(a1 + 360) = *(void *)(a1 + 352);
  sub_1DD504168(a1, a1 + 352, *(float *)(a1 + 80), (float)*(unsigned int *)(a1 + 84), *(float *)(a1 + 88) * (float)v2);
  uint64_t v4 = *(long long **)(a1 + 352);
  long long v5 = *(__n128 **)(a1 + 360);
  unint64_t v6 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v5 - (char *)v4) >> 4));
  uint64_t v8 = sub_1DD502FAC;
  if (v5 == (__n128 *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_1DD508290(v4, v5, (uint64_t (**)(long long *, long long *))&v8, v7, 1, v3);
}

void sub_1DD504168(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  unint64_t v10 = (*(_DWORD *)(a1 + 272) * *(_DWORD *)(a1 + 268));
  uint64_t v20 = 0;
  float v21 = &v20;
  uint64_t v22 = 0x4002000000;
  float64x2_t v23 = sub_1DD504D3C;
  uint64_t v24 = sub_1DD504D60;
  memset(v25, 0, sizeof(v25));
  sub_1DD504D8C(v25, v10);
  qos_class_t v11 = qos_class_self();
  float64x2_t v12 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E4F14430], v11, 0);
  float64x2_t v13 = dispatch_queue_create("feature match queue", v12);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_1DD504E34;
  block[3] = &unk_1E6CC8CB0;
  block[4] = &v20;
  block[5] = a1;
  float v17 = a5;
  float v18 = a4;
  float v19 = a3;
  dispatch_apply(v10, v13, block);
  dispatch_release(v13);
  if (v10)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 24 * v10;
    do
    {
      sub_1DD509D74(a2, *(void *)(a2 + 8), *(char **)(v21[5] + v14), *(char **)(v21[5] + v14 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v21[5] + v14 + 8) - *(void *)(v21[5] + v14)) >> 4));
      v14 += 24;
    }
    while (v15 != v14);
  }
  _Block_object_dispose(&v20, 8);
  float64x2_t v26 = (void **)v25;
  sub_1DD4BDB34(&v26);
}

void sub_1DD504318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  *(void *)(v11 - 88) = v10;
  sub_1DD4BDB34((void ***)(v11 - 88));
  _Unwind_Resume(a1);
}

void sub_1DD504344(int a1, uint64_t *a2, float *a3)
{
  long long __p = 0;
  long long v51 = 0;
  long long v52 = 0;
  float v47 = 0;
  int v48 = 0;
  BOOL v49 = 0;
  bzero(a3, 0x14uLL);
  sub_1DD4D6F8C(&__p, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (float *)(v5 + 80 * v6);
      double v8 = sqrtf((float)((float)(v7[4] - v7[6]) * (float)(v7[4] - v7[6]))+ (float)((float)(v7[3] - v7[5]) * (float)(v7[3] - v7[5])));
      unint64_t v9 = v51;
      if (v51 >= (double *)v52)
      {
        uint64_t v11 = (double *)__p;
        uint64_t v12 = ((char *)v51 - (unsigned char *)__p) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          sub_1DD4BACA0();
        }
        uint64_t v14 = v52 - (unsigned char *)__p;
        if ((v52 - (unsigned char *)__p) >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          float64x2_t v16 = (char *)sub_1DD4BAF80((uint64_t)&v52, v15);
          uint64_t v11 = (double *)__p;
          unint64_t v9 = v51;
        }
        else
        {
          float64x2_t v16 = 0;
        }
        float v17 = (double *)&v16[8 * v12];
        *float v17 = v8;
        uint64_t v10 = v17 + 1;
        while (v9 != v11)
        {
          uint64_t v18 = *((void *)v9-- - 1);
          *((void *)v17-- - 1) = v18;
        }
        long long __p = v17;
        long long v51 = v10;
        long long v52 = &v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *long long v51 = v8;
        uint64_t v10 = v9 + 1;
      }
      long long v51 = v10;
      uint64_t v5 = *a2;
      if ((*(unsigned char *)(*a2 + 80 * v6 + 32) & 3) != 0)
      {
        float v19 = v48;
        if (v48 >= v49)
        {
          float v21 = v47;
          uint64_t v22 = v48 - v47;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_1DD4BACA0();
          }
          uint64_t v24 = (char *)v49 - (char *)v47;
          if (((char *)v49 - (char *)v47) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            float64x2_t v26 = (char *)sub_1DD4BAF80((uint64_t)&v49, v25);
            float v21 = v47;
            float v19 = v48;
          }
          else
          {
            float64x2_t v26 = 0;
          }
          float64x2_t v27 = (double *)&v26[8 * v22];
          double *v27 = v8;
          uint64_t v20 = v27 + 1;
          while (v19 != v21)
          {
            uint64_t v28 = *((void *)v19-- - 1);
            *((void *)v27-- - 1) = v28;
          }
          float v47 = v27;
          BOOL v49 = (double *)&v26[8 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *int v48 = v8;
          uint64_t v20 = v48 + 1;
        }
        int v48 = v20;
        uint64_t v5 = *a2;
      }
      ++v6;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - v5) >> 4) > v6);
  }
  uint64_t v29 = v51;
  if (v51 != __p)
  {
    std::__sort<std::__less<double,double> &,double *>();
    uint64_t v29 = (double *)__p;
    unint64_t v30 = v51;
    float v31 = *(double *)__p;
    *a3 = v31;
    float v32 = *(v30 - 1);
    a3[3] = v32;
    double v33 = 0.0;
    double v34 = 0.0;
    unint64_t v35 = v30 - v29;
    if (v30 != v29)
    {
      if (v35 <= 1) {
        uint64_t v36 = 1;
      }
      else {
        uint64_t v36 = v30 - v29;
      }
      BOOL v37 = v29;
      do
      {
        double v38 = *v37++;
        double v34 = v34 + v38;
        --v36;
      }
      while (v36);
    }
    double v39 = (double)v35;
    float v40 = v34 / (double)v35;
    a3[1] = v40;
    float v41 = *(double *)((char *)v29 + ((4 * v35) & 0xFFFFFFFFFFFFFFF8));
    a3[2] = v41;
    if (v30 != v29)
    {
      double v42 = v40;
      if (v35 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v30 - v29;
      }
      double v33 = 0.0;
      float v44 = v29;
      do
      {
        double v45 = *v44++;
        double v33 = v33 + (v45 - v42) * (v45 - v42);
        --v43;
      }
      while (v43);
    }
    float v46 = sqrt(v33 / v39);
    a3[4] = v46;
  }
  if (v47)
  {
    operator delete(v47);
    uint64_t v29 = (double *)__p;
  }
  if (v29)
  {
    long long v51 = v29;
    operator delete(v29);
  }
}

void sub_1DD504698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

float sub_1DD5046D8(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  float v17 = 0;
  uint64_t v18 = 0;
  *(unsigned char *)(a1 + 264) = 0;
  sub_1DD5048EC(a1);
  sub_1DD50499C(a1, (uint64_t *)(a1 + 376), *(float *)(*(void *)(a1 + 304) + 16), *(float *)(*(void *)(a1 + 320) + 16));
  if (*(unsigned char *)(a1 + 264) && (char v4 = sub_1DD503DCC(a1), *(unsigned char *)(a1 + 264) = v4, (v4 & 1) != 0))
  {
    for (uint64_t i = 0; i != 72; i += 8)
      *(void *)(a2 + i) = *(void *)(a1 + 192 + i);
  }
  else
  {
    *(void *)(a1 + 192) = 0x3FF0000000000000;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0x3FF0000000000000;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0x3FF0000000000000;
  }
  if (*(unsigned char *)(a1 + 112))
  {
    unint64_t v6 = *(std::__shared_weak_count **)(a1 + 312);
    v15[0] = *(void *)(a1 + 304);
    v15[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 328);
    v14[0] = *(void *)(a1 + 320);
    v14[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v8 = *(float *)(a1 + 100) + (float)(*(float *)(a1 + 284) * *(float *)(a1 + 104));
    if (*(float *)(a1 + 108) < v8) {
      float v8 = *(float *)(a1 + 108);
    }
    sub_1DD501D50(&__p, a1 + 136, v15, (uint64_t)v14, a1 + 192, (uint64_t *)(a1 + 352), *(void **)(a1 + 296), v8);
  }
  else
  {
    unint64_t v6 = *(std::__shared_weak_count **)(a1 + 312);
    v13[0] = *(void *)(a1 + 304);
    v13[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 328);
    v12[0] = *(void *)(a1 + 320);
    v12[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v9 = *(float *)(a1 + 100) + (float)(*(float *)(a1 + 284) * *(float *)(a1 + 104));
    if (*(float *)(a1 + 108) < v9) {
      float v9 = *(float *)(a1 + 108);
    }
    sub_1DD50272C((char **)&__p, a1 + 136, v13, (uint64_t)v12, a1 + 192, (uint64_t *)(a1 + 352), *(void **)(a1 + 296), v9);
  }
  if (v7) {
    sub_1DD4C9D84(v7);
  }
  if (v6) {
    sub_1DD4C9D84(v6);
  }
  float v10 = sub_1DD504C98(a1);
  if (__p)
  {
    float v17 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1DD5048A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v20) {
    sub_1DD4C9D84(v20);
  }
  if (v19) {
    sub_1DD4C9D84(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD5048EC(uint64_t a1)
{
  sub_1DD505288(a1);
  sub_1DD50406C((void *)a1, *(float *)(a1 + 92));
  sub_1DD504344(v2, (uint64_t *)(a1 + 376), (float *)(a1 + 276));
  unint64_t v4 = *(unsigned int *)(a1 + 96);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 376);
    uint64_t v6 = *(void *)(a1 + 384);
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 4);
    if (v7 > v4)
    {
      unint64_t v8 = 126 - 2 * __clz(v7);
      if (v6 == v5) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v8;
      }
      sub_1DD50A110(v5, (__n128 *)(v5 + 16 * ((v6 - v5) >> 4)), (uint64_t)&v11, v9, 1, v3);
      uint64_t v10 = *(void *)(a1 + 376) + 80 * *(unsigned int *)(a1 + 96);
      if (v10 != *(void *)(a1 + 384)) {
        *(void *)(a1 + 384) = v10;
      }
    }
  }
}

BOOL sub_1DD50499C(uint64_t a1, uint64_t *a2, float a3, float a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = a2 + 1;
  sub_1DD509A1C(v30, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  sub_1DD4E33AC(v29, 0x999999999999999ALL * ((*v8 - *a2) >> 4));
  sub_1DD4E33AC(v28, 0x999999999999999ALL * ((a2[1] - *a2) >> 4));
  uint64_t v9 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = (float32x2_t *)v29[0];
    unint64_t v13 = (float32x2_t *)v28[0];
    uint64_t v14 = v30[0];
    do
    {
      uint64_t v15 = v9 + v10;
      float32x2_t v16 = *(float32x2_t *)(v15 + 20);
      v12[v11] = vmul_n_f32(*(float32x2_t *)(v15 + 12), 1.0 / a3);
      v13[v11] = vmul_n_f32(v16, 1.0 / a4);
      long long v17 = *(_OWORD *)(v15 + 32);
      long long v18 = *(_OWORD *)(v15 + 64);
      v14[1] = *(_OWORD *)(v15 + 48);
      void v14[2] = v18;
      *uint64_t v14 = v17;
      v14 += 3;
      ++v11;
      uint64_t v9 = *a2;
      v10 += 80;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4) > v11);
  }
  sub_1DD5014AC(*(uint64_t **)a1, *(_DWORD *)(a1 + 116), *(_DWORD *)(a1 + 120));
  long long __p = 0;
  float64x2_t v26 = 0;
  uint64_t v27 = 0;
  sub_1DD4D03E8(&__p, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  int v19 = sub_1DD502FC0((uint64_t *)(a1 + 376), (uint64_t)&__p);
  sub_1DD5014B8(*(void *)a1, (uint64_t)v30[0]);
  sub_1DD5014C4(*(uint64_t **)a1, v19, (uint64_t)__p);
  sub_1DD5014D4(*(void *)a1, 1600);
  float v20 = *(float *)(a1 + 100) + (float)(*(float *)(a1 + 284) * *(float *)(a1 + 104));
  if (*(float *)(a1 + 108) < v20) {
    float v20 = *(float *)(a1 + 108);
  }
  sub_1DD5014E0(*(void *)a1, v20);
  BOOL v21 = sub_1DD5014EC(*(uint64_t **)a1, (uint64_t)v29[0], (uint64_t)v28[0], -858993459 * ((unint64_t)(a2[1] - *a2) >> 4), (uint64_t)v31);
  BOOL v22 = v21;
  if (v21)
  {
    for (uint64_t i = 0; i != 9; ++i)
      *(double *)(a1 + 192 + 8 * i) = v31[i];
  }
  *(unsigned char *)(a1 + 264) = v21;
  if (__p)
  {
    float64x2_t v26 = __p;
    operator delete(__p);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  return v22;
}

void sub_1DD504C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

float sub_1DD504C98(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 148);
  if (v2) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = **(void **)(a1 + 304) == 1;
  }
  if (v3 && **(void **)(a1 + 320) == 0)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 140);
    float v8 = (double)v2 * -0.01;
    float v6 = __exp10f(v8);
    unsigned int v7 = *(_DWORD *)(a1 + 136);
  }
  else
  {
    float v5 = (double)v2 * -0.01;
    float v6 = __exp10f(v5);
    unsigned int v7 = *(_DWORD *)(a1 + 144) + 1;
  }
  return sqrtf((float)(1.0 - v6) * (float)((float)v2 / (float)v7));
}

__n128 sub_1DD504D3C(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_1DD504D60(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_1DD4BDB34(&v1);
}

void sub_1DD504D8C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1DD509AB8(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1DD504E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = **(void **)(v2 + 336);
  uint64_t v4 = v3 + 296 * a2;
  if (*(void *)(v4 + 216))
  {
    uint64_t v6 = **(void **)(v2 + 344);
    if (*(void *)(v6 + 296 * a2 + 216))
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      uint64_t v8 = (int8x16_t **)(v4 + 200);
      uint64_t v9 = (void *)(v6 + 296 * a2 + 200);
      uint64_t v50 = 0;
      long long v51 = 0;
      uint64_t v52 = 0;
      long long __p = 0;
      int v48 = 0;
      uint64_t v49 = 0;
      sub_1DD4E2B10((void *)(v4 + 200), v9, (void *)(v3 + 296 * a2 + 32), (void *)(v6 + 296 * a2 + 32), *(float *)(a1 + 52), (uint64_t)&v50, *(float *)(a1 + 48));
      sub_1DD4E2DC4(v8, v9, (uint64_t *)(**(void **)(v2 + 336) + 296 * a2 + 32), (void *)(**(void **)(v2 + 344) + 296 * a2 + 32), *(float *)(a1 + 48), *(float *)(a1 + 52), (uint64_t *)&v50, (uint64_t)&__p);
      unint64_t v11 = v48;
      if (v48 != __p)
      {
        unint64_t v12 = 0;
        unint64_t v13 = (char **)(v7 + 24 * a2);
        unint64_t v14 = ((unsigned char *)v48 - (unsigned char *)__p) >> 4;
        uint64_t v15 = v13 + 1;
        double v45 = v13;
        float v46 = v13 + 2;
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        unint64_t v44 = v14;
        uint64_t v16 = a1;
        do
        {
          if (v12 >= ((unsigned char *)v48 - (unsigned char *)__p) >> 4) {
            sub_1DD4BAA78();
          }
          long long v17 = (int *)((char *)__p + 16 * v12);
          int v18 = *v17;
          int v19 = v17[1];
          int v20 = v17[3];
          float v21 = *(float *)(v16 + 56);
          if (v21 < 0.0) {
            goto LABEL_20;
          }
          uint64_t v22 = **(void **)(v2 + 336) + 296 * a2;
          uint64_t v23 = *(void *)(v22 + 176);
          float v24 = 0.0;
          float v25 = 0.0;
          uint64_t v26 = *(void *)(v22 + 184) - v23;
          if (v26)
          {
            if (v18 >= (unint64_t)(v26 >> 2)) {
              goto LABEL_45;
            }
            float v25 = *(float *)(v23 + 4 * v18);
          }
          uint64_t v27 = **(void **)(v2 + 344) + 296 * a2;
          uint64_t v28 = *(void *)(v27 + 176);
          uint64_t v29 = *(void *)(v27 + 184) - v28;
          if (v29)
          {
            if (v19 >= (unint64_t)(v29 >> 2)) {
LABEL_45:
            }
              sub_1DD4BAA78();
            float v24 = *(float *)(v28 + 4 * v19);
          }
          float v30 = v25 - v24;
          if (v30 < 0.0) {
            float v30 = -v30;
          }
          if (v30 > 180.0) {
            float v30 = 360.0 - v30;
          }
          if (v30 <= v21)
          {
LABEL_20:
            float v31 = *v15;
            if ((unint64_t)*v15 >= *v46)
            {
              unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - *v13) >> 4);
              unint64_t v34 = v33 + 1;
              if (v33 + 1 > 0x333333333333333) {
                sub_1DD4BACA0();
              }
              if (0x999999999999999ALL * ((uint64_t)(*v46 - (void)*v13) >> 4) > v34) {
                unint64_t v34 = 0x999999999999999ALL * ((uint64_t)(*v46 - (void)*v13) >> 4);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v46 - (void)*v13) >> 4) >= 0x199999999999999) {
                unint64_t v35 = 0x333333333333333;
              }
              else {
                unint64_t v35 = v34;
              }
              if (v35) {
                uint64_t v36 = (char *)sub_1DD509960((uint64_t)v46, v35);
              }
              else {
                uint64_t v36 = 0;
              }
              BOOL v37 = &v36[80 * v33];
              *((_OWORD *)v37 + 3) = 0u;
              *((_OWORD *)v37 + 4) = 0u;
              *((_OWORD *)v37 + 1) = 0u;
              *((_OWORD *)v37 + 2) = 0u;
              *(_OWORD *)BOOL v37 = 0u;
              double v38 = *v15;
              double v39 = *v45;
              float v40 = v37;
              if (*v15 != *v45)
              {
                do
                {
                  *((_OWORD *)v40 - 5) = *((_OWORD *)v38 - 5);
                  long long v41 = *((_OWORD *)v38 - 4);
                  long long v42 = *((_OWORD *)v38 - 3);
                  long long v43 = *((_OWORD *)v38 - 1);
                  *((_OWORD *)v40 - 2) = *((_OWORD *)v38 - 2);
                  *((_OWORD *)v40 - 1) = v43;
                  *((_OWORD *)v40 - 4) = v41;
                  *((_OWORD *)v40 - 3) = v42;
                  v40 -= 80;
                  v38 -= 80;
                }
                while (v38 != v39);
                double v38 = *v45;
              }
              int *v45 = v40;
              uint64_t v32 = v37 + 80;
              *uint64_t v15 = v37 + 80;
              *float v46 = &v36[80 * v35];
              if (v38) {
                operator delete(v38);
              }
            }
            else
            {
              *((_OWORD *)v31 + 3) = 0u;
              *((_OWORD *)v31 + 4) = 0u;
              *((_OWORD *)v31 + 1) = 0u;
              *((_OWORD *)v31 + 2) = 0u;
              uint64_t v32 = v31 + 80;
              *(_OWORD *)float v31 = 0u;
            }
            *uint64_t v15 = v32;
            *(void *)(v32 - 68) = *(void *)sub_1DD501930((void *)(**(void **)(v2 + 336) + 296 * a2 + 32), v18);
            *(void *)(v32 - 60) = *(void *)sub_1DD501930((void *)(**(void **)(v2 + 344) + 296 * a2 + 32), v19);
            *((_DWORD *)v32 - 13) = v20;
            bzero(v32 - 48, 0x30uLL);
            *((_DWORD *)v32 - 19) = v18;
            *((_DWORD *)v32 - 18) = v19;
            *((_DWORD *)v32 - 20) = a2;
            uint64_t v16 = a1;
            unint64_t v13 = v45;
          }
          ++v12;
        }
        while (v12 != v44);
        unint64_t v11 = __p;
      }
      if (v11)
      {
        int v48 = v11;
        operator delete(v11);
      }
      if (v50)
      {
        long long v51 = v50;
        operator delete(v50);
      }
    }
  }
}

void sub_1DD50524C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1DD505288(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 352);
  if (*(void *)(a1 + 360) != v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = (int *)(v1 + v2);
      unint64_t v5 = v4[2];
      uint64_t v6 = **(void **)(a1 + 344) + 296 * *v4;
      uint64_t v7 = *(void *)(v6 + 272);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 280) - v7) >> 4) <= v5) {
        sub_1DD4BAA78();
      }
      uint64_t v8 = v7 + 48 * (int)v5;
      __n128 result = *(__n128 *)v8;
      long long v10 = *(_OWORD *)(v8 + 32);
      *((_OWORD *)v4 + 3) = *(_OWORD *)(v8 + 16);
      *((_OWORD *)v4 + 4) = v10;
      *((__n128 *)v4 + 2) = result;
      ++v3;
      uint64_t v1 = *(void *)(a1 + 352);
      v2 += 80;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 360) - v1) >> 4) > v3);
  }
  return result;
}

uint64_t sub_1DD505334(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 304) + 52);
}

__n128 sub_1DD505340(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a1 + 136);
  long long v3 = *(_OWORD *)(a1 + 152);
  long long v4 = *(_OWORD *)(a1 + 168);
  *(void *)(a2 + 48) = *(void *)(a1 + 184);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void sub_1DD505360(uint64_t a1@<X0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (void **)a1;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a3;
  uint64_t v36 = a3[1];
  if (a2)
  {
    uint64_t v9 = sub_1DD4DC690(a4, *(void *)(a1 + 8), *(void *)(a1 + 16));
    long long v10 = (__CVBuffer *)v9[6];
    if (v10)
    {
      CVPixelBufferLockBaseAddress(v10, 0);
      atomic_fetch_add((atomic_uint *volatile)v9 + 14, 1u);
      *uint64_t v9 = (char *)v9[5] + (void)CVPixelBufferGetBaseAddressOfPlane((CVPixelBufferRef)v9[6], 0);
    }
    unint64_t v11 = (__CVBuffer *)v6[6];
    if (v11)
    {
      CVPixelBufferLockBaseAddress(v11, 0);
      atomic_fetch_add((atomic_uint *volatile)v6 + 14, 1u);
      unint64_t v12 = (char *)v6[5] + (void)CVPixelBufferGetBaseAddressOfPlane((CVPixelBufferRef)v6[6], 0);
      *uint64_t v6 = v12;
    }
    else
    {
      unint64_t v12 = (char *)*v6;
    }
    uint64_t v13 = 0;
    int32_t divisor = 0;
    *(int8x16_t *)&v37.double height = vextq_s8(*(int8x16_t *)(v6 + 1), *(int8x16_t *)(v6 + 1), 8uLL);
    size_t v15 = (size_t)v6[3];
    v37.data = v12;
    v37.rowBytes = v15;
    int8x16_t v16 = vextq_s8(*(int8x16_t *)(v9 + 1), *(int8x16_t *)(v9 + 1), 8uLL);
    size_t v17 = (size_t)v9[3];
    dest.data = *v9;
    dest.rowBytes = v17;
    *(int8x16_t *)&dest.double height = v16;
    *(_OWORD *)kernel = xmmword_1DD512B80;
    int16_t kernel[8] = 3;
    do
      divisor += kernel[v13++];
    while (v13 != 9);
    vImageConvolve_Planar8(&v37, &dest, 0, 0, 0, kernel, 3u, 3u, divisor, 0, 8u);
    int v18 = (__CVBuffer *)v6[6];
    if (v18)
    {
      CVPixelBufferUnlockBaseAddress(v18, 0);
      if (atomic_fetch_add((atomic_uint *volatile)v6 + 14, 0xFFFFFFFF) == 1) {
        *uint64_t v6 = 0;
      }
    }
    int v19 = (__CVBuffer *)v9[6];
    if (v19)
    {
      CVPixelBufferUnlockBaseAddress(v19, 0);
      if (atomic_fetch_add((atomic_uint *volatile)v9 + 14, 0xFFFFFFFF) == 1) {
        *uint64_t v9 = 0;
      }
    }
    uint64_t v6 = v9;
  }
  v35[5] = v8;
  unint64_t v20 = (v36 * v8);
  v37.data = 0;
  v37.double height = (vImagePixelCount)&v37;
  v37.unint64_t width = 0x4002000000;
  v37.rowBytes = (size_t)sub_1DD505DB4;
  double v38 = sub_1DD505DD8;
  memset(v39, 0, sizeof(v39));
  v35[3] = v39;
  sub_1DD505E04(v39, v20);
  v35[2] = v35;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = &v35[-4 * v20];
  sub_1DD4DF698(v22, v20, a3[2], v23, v24, (unint64_t)v6[1], (unint64_t)v6[2]);
  if (v20)
  {
    uint64_t v25 = 0;
    do
    {
      uint64_t v26 = (_OWORD *)(*(void *)(v37.height + 40) + v25);
      long long v27 = *(_OWORD *)v22;
      long long v28 = *((_OWORD *)v22 + 1);
      v22 += 4;
      *uint64_t v26 = v27;
      v26[1] = v28;
      v25 += 296;
    }
    while (296 * v20 != v25);
  }
  uint64_t v29 = (__CVBuffer *)v6[6];
  if (v29)
  {
    Attachment = (void *)CVBufferGetAttachment(v29, @"metalOpHandle", 0);
    if (!Attachment
      || (BOOL v31 = sub_1DD4CD8F8(Attachment), CVBufferRemoveAttachment((CVBufferRef)v6[6], @"metalOpHandle"), v31))
    {
      uint64_t v32 = (__CVBuffer *)CVBufferGetAttachment((CVBufferRef)v6[6], @"fast9", 0);
      if (v32)
      {
        sub_1DD4F8300(v32);
        CVBufferRemoveAttachment((CVBufferRef)v6[6], @"fast9");
      }
    }
  }
  _OWORD v35[4] = a3;
  v35[1] = a5;
  qos_class_t v33 = qos_class_self();
  unint64_t v34 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E4F14430], v33, 0);
  dispatch_queue_create("feature match queue", v34);
  operator new();
}

void sub_1DD505CEC(_Unwind_Exception *a1)
{
  unint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5) {
    sub_1DD4C9D84(v5);
  }
  _Block_object_dispose((const void *)(v1 + 248), 8);
  *(void *)(v3 - 168) = *(void *)(v1 + 24);
  sub_1DD4BBB5C((void ***)(v3 - 168));
  _Unwind_Resume(a1);
}

__n128 sub_1DD505DB4(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_1DD505DD8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_1DD4BBB5C(&v1);
}

void sub_1DD505E04(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = 0x14C1BACF914C1BADLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1DD50B518(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 296 * a2;
    while (v3 != (void *)v7)
    {
      v3 -= 37;
      sub_1DD4BBAF8((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void sub_1DD505EB0(dispatch_queue_t queue, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_1DD506D04;
  block[3] = &unk_1E6CC8D40;
  void block[6] = a2;
  block[7] = a3;
  void block[8] = a4;
  block[4] = a5;
  block[5] = (unint64_t)(v7 + 7) >> 3;
  dispatch_apply(8uLL, queue, block);
  bzero(*(void **)a4, *(void *)(a4 + 24) * a2);
  bzero((void *)(*(void *)a4 + (*(void *)(a4 + 16) - a2) * *(void *)(a4 + 24)), *(void *)(a4 + 24) * a2);
}

uint64_t sub_1DD505F70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))();
}

uint64_t sub_1DD505F98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 48))();
}

void sub_1DD505FC0(uint64_t a1, uint64_t a2)
{
}

void sub_1DD505FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v17 = a2;
  uint64_t v18 = a7;
  uint64_t v16 = a1;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v19 = *(_DWORD *)(a5 + 32);
  unsigned int v7 = *(_DWORD *)(a5 + 36);
  unsigned int v20 = a6;
  unint64_t v8 = a4[1];
  unint64_t v9 = a4[2];
  unint64_t v10 = a4[3];
  if ((unint64_t)*a4 <= 3) {
    uint64_t v11 = 3;
  }
  else {
    uint64_t v11 = *a4;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v21 = *(void *)(a3 + 8);
  if (v9 <= 3) {
    uint64_t v13 = 3;
  }
  else {
    uint64_t v13 = v9;
  }
  memset(v25, 0, sizeof(v25));
  sub_1DD4D03E8(v25, 2 * (v7 / a6));
  unint64_t v14 = v12 - 3;
  if (v12 - 3 >= v10) {
    unint64_t v14 = v10;
  }
  unint64_t v15 = v21 - 3;
  if (v21 - 3 >= v8) {
    unint64_t v15 = v8;
  }
  unint64_t v22 = v15 - v11;
  unint64_t v23 = v14 - v13;
  uint64_t v24 = 1;
  int v26 = 40;
  operator new();
}

void sub_1DD506A78(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)(v2 - 248);
  if (v4)
  {
    *(void *)(v2 - 240) = v4;
    operator delete(v4);
  }
  uint64_t v5 = v1[3];
  unint64_t v6 = (void *)v1[10];
  if (v6) {
    operator delete(v6);
  }
  sub_1DD4BB9FC(v2 - 176);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  unsigned int v7 = (void *)v1[21];
  if (v7)
  {
    v1[22] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_1DD506BA4()
{
}

double sub_1DD506CB0(uint64_t a1)
{
  *(void *)a1 = 0x400000005;
  *(_DWORD *)(a1 + 8) = 60;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 16) = 0x3E00000000000000;
  *(_DWORD *)(a1 + 24) = 1119879168;
  *(void *)(a1 + 28) = 0x7D000000320;
  *(_DWORD *)(a1 + 36) = 2500;
  double result = 0.0437499957;
  *(_OWORD *)(a1 + 40) = xmmword_1DD512A30;
  return result;
}

uint64_t sub_1DD506D04(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = (void *)a1[7];
  if (v3 * a2 <= v4) {
    uint64_t v6 = a1[6];
  }
  else {
    uint64_t v6 = v3 * a2;
  }
  uint64_t v7 = v6 - v4;
  uint64_t v8 = v3 + v4 + v3 * a2;
  uint64_t v9 = v5[3];
  if (v5[2] < v8) {
    uint64_t v8 = v5[2];
  }
  unint64_t v10 = (void *)a1[8];
  uint64_t v11 = v10[3];
  uint64_t v12 = v5[1];
  uint64_t v13 = *v10 + v11 * v7;
  v16[0] = *v5 + v9 * v7;
  v16[1] = v12;
  v16[2] = v8 - v7;
  v16[3] = v9;
  v15[0] = v13;
  v15[1] = v12;
  void v15[2] = v8 - v7;
  v15[3] = v11;
  return (*(uint64_t (**)(uint64_t, void *, void *))(v2 + 16))(v2, v16, v15);
}

uint64_t sub_1DD506D90(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(unsigned char *)(a1 + 24) && *(void *)a1) {
      MEMORY[0x1E01B7730]();
    }
    if (*(void *)(a1 + 56))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      if (v4) {
        sub_1DD4BB8B0(a1 + 32, v4);
      }
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    sub_1DD507018((void *)(a1 + 32), a2 + 32);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 16) = 0;
    sub_1DD507390((void *)(a2 + 32));
    *(void *)(a2 + 64) = 0;
  }
  return a1;
}

void *sub_1DD506E54(void *result, int a2)
{
  unint64_t v2 = result[2];
  if (v2 >= result[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1DD4BAAEC(exception, "_count");
    __cxa_throw(exception, (struct type_info *)off_1E6CC8858, MEMORY[0x1E4FBA1D0]);
  }
  *(_DWORD *)(*result + 4 * v2) = a2;
  result[2] = v2 + 1;
  return result;
}

void sub_1DD506EC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD506ED8(void *a1, unint64_t a2)
{
  if (a1[2] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1DD4BAAEC(exception, "idx");
    __cxa_throw(exception, (struct type_info *)off_1E6CC8858, MEMORY[0x1E4FBA1D0]);
  }
  return *a1 + 4 * a2;
}

void sub_1DD506F40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD506F54(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(unsigned char *)(a1 + 24) && *(void *)a1) {
      MEMORY[0x1E01B7730]();
    }
    if (*(void *)(a1 + 56))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      if (v4) {
        sub_1DD4BB8B0(a1 + 32, v4);
      }
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    sub_1DD507018((void *)(a1 + 32), a2 + 32);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 16) = 0;
    sub_1DD507390((void *)(a2 + 32));
    *(void *)(a2 + 64) = 0;
  }
  return a1;
}

void *sub_1DD507018(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  sub_1DD50708C((uint64_t)v4, a2);
  sub_1DD507124(v4, a1);
  sub_1DD4BB4F4(v4);
  return a1;
}

uint64_t sub_1DD50708C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1DD507124(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DD507384(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1DD4BAC8C(a1);
}

void *sub_1DD507390(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1DD507418(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v10 = (int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *v11;
          if (*(float *)(*a3 + 8 * v22 + 4) < *(float *)(*a3 + 8 * v23 + 4))
          {
            *uint64_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          double result = sub_1DD5078F0(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          double result = sub_1DD507D48(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          double result = sub_1DD507E0C(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_1DD507EFC(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      sub_1DD5078F0(v11, &v11[v15 >> 1], a2 - 1, a3);
      sub_1DD5078F0(v11 + 1, v17 - 1, a2 - 2, a3);
      sub_1DD5078F0(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      sub_1DD5078F0(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1DD5078F0(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(*a3 + 8 * *(v11 - 1) + 4) >= *(float *)(*a3 + 8 * *v11 + 4))
    {
      double result = (uint64_t)sub_1DD5079AC(v11, a2, a3);
      uint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    int v19 = sub_1DD507A98(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = sub_1DD507B84(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    double result = sub_1DD507B84(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = sub_1DD507418(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_1DD5077F4(v11, a2, a3);
  }
  else
  {
    return (uint64_t)sub_1DD507884(v11, a2, a3);
  }
}

int *sub_1DD5077F4(int *result, int *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *a3;
      char v6 = result;
      do
      {
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        char v6 = v3;
        float v9 = *(float *)(v5 + 8 * v7 + 4);
        if (v9 < *(float *)(v5 + 8 * v8 + 4))
        {
          uint64_t v10 = v4;
          while (1)
          {
            *(int *)((char *)result + v10 + 4) = v8;
            if (!v10) {
              break;
            }
            uint64_t v8 = *(int *)((char *)result + v10 - 4);
            v10 -= 4;
            if (v9 >= *(float *)(v5 + 8 * v8 + 4))
            {
              uint64_t v11 = (int *)((char *)result + v10 + 4);
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          *uint64_t v11 = v7;
        }
        uint64_t v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

int *sub_1DD507884(int *result, int *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = *a3;
      do
      {
        uint64_t v6 = *result;
        uint64_t v5 = result[1];
        double result = v3;
        float v7 = *(float *)(v4 + 8 * v5 + 4);
        if (v7 < *(float *)(v4 + 8 * v6 + 4))
        {
          do
          {
            int *v3 = v6;
            uint64_t v6 = *(v3 - 2);
            --v3;
          }
          while (v7 < *(float *)(v4 + 8 * v6 + 4));
          int *v3 = v5;
        }
        uint64_t v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1DD5078F0(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *a4;
  float v7 = *(float *)(*a4 + 8 * v4 + 4);
  float v8 = *(float *)(*a4 + 8 * v5 + 4);
  uint64_t v9 = *a3;
  float v10 = *(float *)(*a4 + 8 * v9 + 4);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v13 = *a3;
    if (*(float *)(v6 + 8 * v13 + 4) >= v8) {
      return 1;
    }
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v11 = *a2;
    uint64_t v12 = *a1;
    if (*(float *)(v6 + 8 * v11 + 4) >= *(float *)(v6 + 8 * v12 + 4)) {
      return 1;
    }
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

int *sub_1DD5079AC(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a3;
  float v5 = *(float *)(*a3 + 8 * v3 + 4);
  if (v5 >= *(float *)(*a3 + 8 * *(a2 - 1) + 4))
  {
    float v8 = a1 + 1;
    do
    {
      uint64_t v6 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 8 * *v6 + 4));
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 8 * v7 + 4));
  }
  if (v6 < a2)
  {
    do
      uint64_t v9 = *--a2;
    while (v5 < *(float *)(v4 + 8 * v9 + 4));
  }
  if (v6 < a2)
  {
    int v10 = *v6;
    int v11 = *a2;
    do
    {
      *uint64_t v6 = v11;
      *a2 = v10;
      do
      {
        uint64_t v12 = v6[1];
        ++v6;
        int v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 8 * v12 + 4));
      do
      {
        uint64_t v13 = *--a2;
        int v11 = v13;
      }
      while (v5 < *(float *)(v4 + 8 * v13 + 4));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v3;
  return v6;
}

int *sub_1DD507A98(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *a3;
  float v6 = *(float *)(*a3 + 8 * v4 + 4);
  do
    uint64_t v7 = a1[++v3];
  while (*(float *)(v5 + 8 * v7 + 4) < v6);
  float v8 = &a1[v3];
  uint64_t v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      uint64_t v11 = *--a2;
    }
    while (*(float *)(v5 + 8 * v11 + 4) >= v6);
  }
  else
  {
    do
      uint64_t v10 = *--a2;
    while (*(float *)(v5 + 8 * v10 + 4) >= v6);
  }
  if (v8 < a2)
  {
    int v12 = *a2;
    int v13 = v7;
    uint64_t v14 = v8;
    unint64_t v15 = a2;
    do
    {
      *uint64_t v14 = v12;
      *unint64_t v15 = v13;
      do
      {
        uint64_t v16 = v14[1];
        ++v14;
        int v13 = v16;
      }
      while (*(float *)(v5 + 8 * v16 + 4) < v6);
      do
      {
        uint64_t v17 = *--v15;
        int v12 = v17;
      }
      while (*(float *)(v5 + 8 * v17 + 4) >= v6);
    }
    while (v14 < v15);
    uint64_t v9 = v14 - 1;
  }
  if (v9 != a1) {
    *a1 = *v9;
  }
  *uint64_t v9 = v4;
  return v9;
}

BOOL sub_1DD507B84(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(*a3 + 8 * v8 + 4) < *(float *)(*a3 + 8 * v9 + 4))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1DD5078F0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1DD507D48(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DD507E0C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_1DD5078F0(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 8 * v15 + 4);
    if (v17 < *(float *)(v13 + 8 * v16 + 4))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 8 * v16 + 4))
        {
          char v20 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      char v20 = a1;
LABEL_12:
      int *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1DD507D48(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t result = sub_1DD5078F0(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = *a5;
  if (*(float *)(*a5 + 8 * v11 + 4) < *(float *)(*a5 + 8 * v12 + 4))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(float *)(v13 + 8 * v14 + 4) < *(float *)(v13 + 8 * v15 + 4))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(float *)(v13 + 8 * v16 + 4) < *(float *)(v13 + 8 * v17 + 4))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1DD507E0C(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t result = sub_1DD507D48(a1, a2, a3, a4, a6);
  uint64_t v13 = *a5;
  uint64_t v14 = *a4;
  uint64_t v15 = *a6;
  if (*(float *)(*a6 + 8 * v13 + 4) < *(float *)(*a6 + 8 * v14 + 4))
  {
    *a4 = v13;
    *a5 = v14;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    if (*(float *)(v15 + 8 * v16 + 4) < *(float *)(v15 + 8 * v17 + 4))
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      if (*(float *)(v15 + 8 * v18 + 4) < *(float *)(v15 + 8 * v19 + 4))
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        if (*(float *)(v15 + 8 * v20 + 4) < *(float *)(v15 + 8 * v21 + 4))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

int *sub_1DD507EFC(int *a1, int *a2, int *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        sub_1DD50805C((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *a1;
        if (*(float *)(*a4 + 8 * v15 + 4) < *(float *)(*a4 + 8 * v16 + 4))
        {
          *uint64_t v14 = v16;
          *a1 = v15;
          sub_1DD50805C((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v17 = (unint64_t)v8 >> 2;
      uint64_t v18 = a2 - 1;
      do
      {
        int v19 = *a1;
        uint64_t v20 = sub_1DD508158(a1, a4, v17);
        if (v18 == v20)
        {
          int *v20 = v19;
        }
        else
        {
          int *v20 = *v18;
          *uint64_t v18 = v19;
          sub_1DD5081D8((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1DD50805C(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 + 1;
      uint64_t v7 = (int *)(result + 4 * (v5 + 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 8 * *v7 + 4) < *(float *)(v9 + 8 * v7[1] + 4))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      float v12 = *(float *)(v9 + 8 * v11 + 4);
      if (*(float *)(v9 + 8 * v10 + 4) >= v12)
      {
        do
        {
          uint64_t v13 = v7;
          *a4 = v10;
          if (v4 < v6) {
            break;
          }
          uint64_t v14 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (int *)(result + 4 * v6);
          uint64_t v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 8 * *v7 + 4) < *(float *)(v9 + 8 * v7[1] + 4))
          {
            ++v7;
            uint64_t v6 = v15;
          }
          uint64_t v10 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 8 * v10 + 4) >= v12);
        *uint64_t v13 = v11;
      }
    }
  }
  return result;
}

int *sub_1DD508158(int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = result;
    result += v3 + 1;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3 && *(float *)(v6 + 8 * *result + 4) < *(float *)(v6 + 8 * result[1] + 4))
    {
      ++result;
      uint64_t v3 = v9;
    }
    *uint64_t v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1DD5081D8(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (int *)(result + 4 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(int *)(a2 - 4);
    uint64_t v7 = (_DWORD *)(a2 - 4);
    int v8 = v9;
    uint64_t v10 = *a3;
    float v11 = *(float *)(*a3 + 8 * v9 + 4);
    if (*(float *)(*a3 + 8 * v6 + 4) < v11)
    {
      do
      {
        float v12 = v5;
        *uint64_t v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (int *)(result + 4 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v12;
      }
      while (*(float *)(v10 + 8 * v6 + 4) < v11);
      *float v12 = v8;
    }
  }
  return result;
}

void *sub_1DD508244(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_1DD4BAD90();
  }
  return operator new(56 * a2);
}

void sub_1DD508290(long long *a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  float v12 = (long long *)&a2[-5];
  uint64_t v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    uint64_t v15 = v14;
    uint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v13) >> 4);
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-5], v13))
          {
            long long v34 = *v13;
            long long v40 = v13[3];
            long long v42 = v13[4];
            long long v36 = v13[1];
            long long v38 = v13[2];
            long long v30 = (__int128)a2[-1];
            long long v32 = (__int128)a2[-4];
            long long v31 = (__int128)a2[-3];
            void v13[3] = (__int128)a2[-2];
            _OWORD v13[4] = v30;
            v13[1] = v32;
            void v13[2] = v31;
            *uint64_t v13 = *v12;
            a2[-3] = (__n128)v38;
            a2[-2] = (__n128)v40;
            a2[-1] = (__n128)v42;
            *float v12 = v34;
            a2[-4] = (__n128)v36;
          }
          break;
        case 3uLL:
          sub_1DD5088D8(v13, v13 + 5, (long long *)&a2[-5], a3);
          break;
        case 4uLL:
          sub_1DD509070(v13, v13 + 5, v13 + 10, (long long *)&a2[-5], a3);
          break;
        case 5uLL:
          sub_1DD5091D4(v13, v13 + 5, v13 + 10, v13 + 15, (long long *)&a2[-5], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 1919) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        sub_1DD509398((uint64_t)v13, a2, a2, (unsigned int (**)(uint64_t, __n128 *))a3, a6);
      }
      return;
    }
    unint64_t v18 = v17 >> 1;
    int v19 = &v13[5 * (v17 >> 1)];
    if ((unint64_t)v16 >= 0x2801)
    {
      sub_1DD5088D8(v13, &v13[5 * (v17 >> 1)], (long long *)&a2[-5], a3);
      uint64_t v20 = 5 * v18;
      uint64_t v21 = &v13[5 * v18 - 5];
      sub_1DD5088D8(v13 + 5, v21, (long long *)&a2[-10], a3);
      uint64_t v22 = v13 + 10;
      uint64_t v23 = &v13[v20 + 5];
      sub_1DD5088D8(v22, v23, (long long *)&a2[-15], a3);
      sub_1DD5088D8(v21, v19, v23, a3);
      long long v33 = *a1;
      long long v39 = a1[3];
      long long v41 = a1[4];
      long long v35 = a1[1];
      long long v37 = a1[2];
      long long v24 = v19[4];
      long long v26 = v19[1];
      long long v25 = v19[2];
      a1[3] = v19[3];
      a1[4] = v24;
      a1[1] = v26;
      a1[2] = v25;
      *a1 = *v19;
      v19[3] = v39;
      v19[4] = v41;
      v19[1] = v35;
      v19[2] = v37;
      *int v19 = v33;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1DD5088D8(&v13[5 * (v17 >> 1)], v13, (long long *)&a2[-5], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(a1 - 5, a1) & 1) == 0)
    {
      uint64_t v13 = sub_1DD508AF4(a1, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v27 = sub_1DD508C84(a1, (long long *)a2, a3);
    if ((v28 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v29 = sub_1DD508E1C(a1, v27, a3);
    uint64_t v13 = v27 + 5;
    if (sub_1DD508E1C(v27 + 5, (long long *)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v27;
      if (v29) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v29)
    {
LABEL_16:
      sub_1DD508290(a1, v27, a3, -v15, a5 & 1);
      uint64_t v13 = v27 + 5;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1DD5086EC((uint64_t)v13, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    sub_1DD5087F0((uint64_t)v13, a2, a3);
  }
}

  float v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (uint64_t)a2 - v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 4);
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (a2[-4].n128_f32[3] < *(float *)(v12 + 28))
          {
            long long v33 = *(__n128 *)v12;
            long long v39 = *(__n128 *)(v12 + 48);
            long long v41 = *(__n128 *)(v12 + 64);
            long long v35 = *(__n128 *)(v12 + 16);
            long long v37 = *(__n128 *)(v12 + 32);
            BOOL v29 = a2[-1];
            long long v31 = a2[-4];
            long long v30 = a2[-3];
            *(__n128 *)(v12 + 48) = a2[-2];
            *(__n128 *)(v12 + 64) = v29;
            *(__n128 *)(v12 + 16) = v31;
            *(__n128 *)(v12 + 32) = v30;
            *(__n128 *)float v12 = a2[-5];
            a2[-3] = v37;
            a2[-2] = v39;
            a2[-1] = v41;
            a2[-5] = v33;
            a2[-4] = v35;
          }
          break;
        case 3uLL:
          sub_1DD50A6F0((float *)v12, (float *)(v12 + 80), (float *)&a2[-5]);
          break;
        case 4uLL:
          sub_1DD50ADC0(v12, v12 + 80, v12 + 160, (uint64_t)&a2[-5]);
          break;
        case 5uLL:
          sub_1DD50AF0C(v12, v12 + 80, v12 + 160, v12 + 240, (uint64_t)&a2[-5]);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 1919) {
      break;
    }
    if (v14 == 1)
    {
      if ((__n128 *)v12 != a2)
      {
        sub_1DD50B0BC(v12, a2, a2, a3, a6);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = v12 + 80 * (v16 >> 1);
    if ((unint64_t)v15 >= 0x2801)
    {
      sub_1DD50A6F0((float *)v12, (float *)(v12 + 80 * (v16 >> 1)), (float *)&a2[-5]);
      int v19 = 5 * v17;
      uint64_t v20 = (float *)(v12 + 80 * v17 - 80);
      sub_1DD50A6F0((float *)(v12 + 80), v20, (float *)&a2[-10]);
      uint64_t v21 = (float *)(v12 + 160);
      uint64_t v22 = (float *)(v12 + 80 + 16 * v19);
      sub_1DD50A6F0(v21, v22, (float *)&a2[-15]);
      sub_1DD50A6F0(v20, (float *)v18, v22);
      long long v32 = *(_OWORD *)a1;
      long long v38 = *(_OWORD *)(a1 + 48);
      long long v40 = *(_OWORD *)(a1 + 64);
      long long v34 = *(_OWORD *)(a1 + 16);
      long long v36 = *(_OWORD *)(a1 + 32);
      uint64_t v23 = *(_OWORD *)(v18 + 64);
      long long v25 = *(_OWORD *)(v18 + 16);
      long long v24 = *(_OWORD *)(v18 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(v18 + 48);
      *(_OWORD *)(a1 + 64) = v23;
      *(_OWORD *)(a1 + 16) = v25;
      *(_OWORD *)(a1 + 32) = v24;
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(v18 + 48) = v38;
      *(_OWORD *)(v18 + 64) = v40;
      *(_OWORD *)(v18 + 16) = v34;
      *(_OWORD *)(v18 + 32) = v36;
      *(_OWORD *)unint64_t v18 = v32;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1DD50A6F0((float *)(v12 + 80 * (v16 >> 1)), (float *)v12, (float *)&a2[-5]);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(float *)(a1 - 52) >= *(float *)(a1 + 28))
    {
      float v12 = sub_1DD50A8C8(a1, (float *)a2);
      goto LABEL_18;
    }
LABEL_13:
    long long v26 = sub_1DD50AA24(a1, (float *)a2);
    if ((v27 & 1) == 0) {
      goto LABEL_16;
    }
    char v28 = sub_1DD50AB84(a1, v26);
    float v12 = v26 + 80;
    if (sub_1DD50AB84(v26 + 80, (uint64_t)a2))
    {
      a4 = -v14;
      a2 = (__n128 *)v26;
      if (v28) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v28)
    {
LABEL_16:
      sub_1DD50A110(a1, v26, a3, -v14, a5 & 1);
      float v12 = v26 + 80;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1DD50A564(v12, a2);
  }
  else
  {
    sub_1DD50A63C(v12, (uint64_t)a2);
  }
}

uint64_t sub_1DD5086EC(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v26 = v3;
    uint64_t v27 = v4;
    char v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 80);
    if ((_OWORD *)(result + 80) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (_OWORD *)result;
      do
      {
        float v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v12 = v10[3];
          long long v23 = v10[2];
          long long v24 = v12;
          long long v25 = v10[4];
          long long v13 = v10[1];
          long long v21 = *v10;
          long long v22 = v13;
          uint64_t v14 = v9;
          while (1)
          {
            uint64_t v15 = (_OWORD *)((char *)v6 + v14);
            long long v16 = *(_OWORD *)((char *)v6 + v14 + 48);
            v15[7] = *(_OWORD *)((char *)v6 + v14 + 32);
            void v15[8] = v16;
            v15[9] = *(_OWORD *)((char *)v6 + v14 + 64);
            long long v17 = *(_OWORD *)((char *)v6 + v14 + 16);
            void v15[5] = *(_OWORD *)((char *)v6 + v14);
            v15[6] = v17;
            if (!v14) {
              break;
            }
            v14 -= 80;
            uint64_t result = (*a3)(&v21, (char *)v6 + v14);
            if ((result & 1) == 0)
            {
              unint64_t v18 = (_OWORD *)((char *)v6 + v14 + 80);
              goto LABEL_10;
            }
          }
          unint64_t v18 = v6;
LABEL_10:
          long long v19 = v24;
          void v18[2] = v23;
          void v18[3] = v19;
          void v18[4] = v25;
          long long v20 = v22;
          *unint64_t v18 = v21;
          v18[1] = v20;
        }
        char v7 = v10 + 5;
        v9 += 80;
      }
      while (v10 + 5 != a2);
    }
  }
  return result;
}

uint64_t sub_1DD5087F0(uint64_t result, _OWORD *a2, uint64_t (**a3)(long long *, _OWORD *))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v23 = v3;
    uint64_t v24 = v4;
    char v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 80);
    if ((_OWORD *)(result + 80) != a2)
    {
      uint64_t v9 = (_OWORD *)(result - 80);
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v11 = v6[3];
          long long v20 = v6[2];
          long long v21 = v11;
          long long v22 = v6[4];
          long long v12 = v6[1];
          long long v18 = *v6;
          long long v19 = v12;
          long long v13 = v9;
          do
          {
            long long v14 = v13[8];
            v13[12] = v13[7];
            v13[13] = v14;
            v13[14] = v13[9];
            long long v15 = v13[6];
            v13[10] = v13[5];
            v13[11] = v15;
            uint64_t result = (*a3)(&v18, v13);
            v13 -= 5;
          }
          while ((result & 1) != 0);
          long long v16 = v21;
          v13[12] = v20;
          v13[13] = v16;
          v13[14] = v22;
          long long v17 = v19;
          v13[10] = v18;
          v13[11] = v17;
        }
        char v7 = v6 + 5;
        v9 += 5;
      }
      while (v6 + 5 != a2);
    }
  }
  return result;
}

uint64_t sub_1DD5088D8(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v37 = a1[2];
      long long v42 = a1[3];
      long long v47 = a1[4];
      long long v27 = *a1;
      long long v32 = a1[1];
      *a1 = *a3;
      long long v10 = a3[4];
      long long v12 = a3[1];
      long long v11 = a3[2];
      a1[3] = a3[3];
      a1[4] = v10;
      a1[1] = v12;
      a1[2] = v11;
      a3[3] = v42;
      a3[4] = v47;
      a3[2] = v37;
      long long v13 = v27;
      long long v14 = v32;
      uint64_t result = 1;
LABEL_9:
      *a3 = v13;
      a3[1] = v14;
      return result;
    }
    long long v40 = a1[2];
    long long v45 = a1[3];
    long long v50 = a1[4];
    long long v30 = *a1;
    long long v35 = a1[1];
    *a1 = *a2;
    long long v21 = a2[4];
    long long v23 = a2[1];
    long long v22 = a2[2];
    a1[3] = a2[3];
    a1[4] = v21;
    a1[1] = v23;
    a1[2] = v22;
    a2[3] = v45;
    a2[4] = v50;
    *a2 = v30;
    a2[1] = v35;
    a2[2] = v40;
    if ((*a4)(a3, a2))
    {
      long long v41 = a2[2];
      long long v46 = a2[3];
      long long v51 = a2[4];
      long long v31 = *a2;
      long long v36 = a2[1];
      *a2 = *a3;
      long long v24 = a3[4];
      long long v26 = a3[1];
      long long v25 = a3[2];
      a2[3] = a3[3];
      a2[4] = v24;
      a2[1] = v26;
      a2[2] = v25;
      a3[3] = v46;
      a3[4] = v51;
      a3[2] = v41;
      long long v13 = v31;
      long long v14 = v36;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    long long v38 = a2[2];
    long long v43 = a2[3];
    long long v48 = a2[4];
    long long v28 = *a2;
    long long v33 = a2[1];
    *a2 = *a3;
    long long v15 = a3[4];
    long long v17 = a3[1];
    long long v16 = a3[2];
    a2[3] = a3[3];
    a2[4] = v15;
    a2[1] = v17;
    a2[2] = v16;
    a3[3] = v43;
    a3[4] = v48;
    *a3 = v28;
    a3[1] = v33;
    a3[2] = v38;
    if ((*a4)(a2, a1))
    {
      long long v39 = a1[2];
      long long v44 = a1[3];
      long long v49 = a1[4];
      long long v29 = *a1;
      long long v34 = a1[1];
      *a1 = *a2;
      long long v18 = a2[4];
      long long v20 = a2[1];
      long long v19 = a2[2];
      a1[3] = a2[3];
      a1[4] = v18;
      a1[1] = v20;
      a1[2] = v19;
      a2[3] = v44;
      a2[4] = v49;
      uint64_t result = 2;
      *a2 = v29;
      a2[1] = v34;
      a2[2] = v39;
      return result;
    }
  }
  return 1;
}

long long *sub_1DD508AF4(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v6 = a1[3];
  long long v30 = a1[2];
  long long v31 = v6;
  long long v32 = a1[4];
  long long v7 = a1[1];
  long long v28 = *a1;
  long long v29 = v7;
  if ((*a3)(&v28, a2 - 5))
  {
    char v8 = a1;
    do
      v8 += 5;
    while (((*a3)(&v28, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 5;
    do
    {
      char v8 = v9;
      if (v9 >= v4) {
        break;
      }
      int v10 = (*a3)(&v28, v9);
      uint64_t v9 = v8 + 5;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 5;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  while (v8 < v4)
  {
    long long v33 = *v8;
    long long v11 = v8[1];
    long long v12 = v8[2];
    long long v13 = v8[4];
    long long v36 = v8[3];
    long long v37 = v13;
    long long v34 = v11;
    long long v35 = v12;
    long long v14 = v4[4];
    long long v16 = v4[1];
    long long v15 = v4[2];
    void v8[3] = v4[3];
    v8[4] = v14;
    v8[1] = v16;
    v8[2] = v15;
    *char v8 = *v4;
    long long v17 = v37;
    long long v19 = v34;
    long long v18 = v35;
    v4[3] = v36;
    v4[4] = v17;
    v4[1] = v19;
    v4[2] = v18;
    *uint64_t v4 = v33;
    do
      v8 += 5;
    while (!(*a3)(&v28, v8));
    do
      v4 -= 5;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  long long v20 = v8 - 5;
  if (v8 - 5 != a1)
  {
    *a1 = *v20;
    long long v21 = *(v8 - 4);
    long long v22 = *(v8 - 3);
    long long v23 = *(v8 - 1);
    a1[3] = *(v8 - 2);
    a1[4] = v23;
    a1[1] = v21;
    a1[2] = v22;
  }
  long long *v20 = v28;
  long long v24 = v29;
  long long v25 = v30;
  long long v26 = v32;
  *(v8 - 2) = v31;
  *(v8 - 1) = v26;
  *(v8 - 4) = v24;
  *(v8 - 3) = v25;
  return v8;
}

long long *sub_1DD508C84(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[3];
  long long v30 = a1[2];
  long long v31 = v7;
  long long v32 = a1[4];
  long long v8 = a1[1];
  long long v28 = *a1;
  long long v29 = v8;
  do
    v6 += 5;
  while (((*a3)(&a1[v6], &v28) & 1) != 0);
  uint64_t v9 = &a1[v6];
  int v10 = &a1[v6 - 5];
  if (v6 == 5)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 5;
    }
    while (((*a3)(a2, &v28) & 1) == 0);
  }
  else
  {
    do
      a2 -= 5;
    while (!(*a3)(a2, &v28));
  }
  if (v9 < a2)
  {
    long long v11 = &a1[v6];
    long long v12 = a2;
    do
    {
      long long v13 = v11[3];
      long long v35 = v11[2];
      long long v36 = v13;
      long long v37 = v11[4];
      long long v14 = v11[1];
      long long v33 = *v11;
      long long v34 = v14;
      long long v16 = v12[1];
      long long v15 = v12[2];
      long long v17 = v12[4];
      void v11[3] = v12[3];
      v11[4] = v17;
      v11[1] = v16;
      v11[2] = v15;
      *long long v11 = *v12;
      *long long v12 = v33;
      long long v18 = v34;
      long long v19 = v35;
      long long v20 = v37;
      v12[3] = v36;
      void v12[4] = v20;
      v12[1] = v18;
      void v12[2] = v19;
      do
        v11 += 5;
      while (((*a3)(v11, &v28) & 1) != 0);
      do
        v12 -= 5;
      while (!(*a3)(v12, &v28));
    }
    while (v11 < v12);
    int v10 = v11 - 5;
  }
  if (v10 != a1)
  {
    *a1 = *v10;
    long long v21 = v10[1];
    long long v22 = v10[2];
    long long v23 = v10[4];
    a1[3] = v10[3];
    a1[4] = v23;
    a1[1] = v21;
    a1[2] = v22;
  }
  *int v10 = v28;
  long long v24 = v29;
  long long v25 = v30;
  long long v26 = v32;
  v10[3] = v31;
  v10[4] = v26;
  v10[1] = v24;
  void v10[2] = v25;
  return v10;
}

BOOL sub_1DD508E1C(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v8 = a2 - 5;
      if (!(*a3)(a2 - 5, a1)) {
        return 1;
      }
      long long v9 = a1[3];
      long long v32 = a1[2];
      long long v33 = v9;
      long long v34 = a1[4];
      long long v10 = a1[1];
      long long v30 = *a1;
      long long v31 = v10;
      *a1 = *v8;
      long long v11 = *(a2 - 1);
      long long v13 = *(a2 - 4);
      long long v12 = *(a2 - 3);
      a1[3] = *(a2 - 2);
      a1[4] = v11;
      a1[1] = v13;
      a1[2] = v12;
      long long v14 = v34;
      long long v15 = v32;
      *(a2 - 2) = v33;
      *(a2 - 1) = v14;
      long long v16 = v31;
      BOOL result = 1;
      *long long v8 = v30;
      *(a2 - 4) = v16;
      *(a2 - 3) = v15;
      return result;
    case 3uLL:
      sub_1DD5088D8(a1, a1 + 5, a2 - 5, a3);
      return 1;
    case 4uLL:
      sub_1DD509070(a1, a1 + 5, a1 + 10, a2 - 5, a3);
      return 1;
    case 5uLL:
      sub_1DD5091D4(a1, a1 + 5, a1 + 10, a1 + 15, a2 - 5, a3);
      return 1;
    default:
      long long v17 = a1 + 10;
      sub_1DD5088D8(a1, a1 + 5, a1 + 10, a3);
      long long v18 = a1 + 15;
      if (a1 + 15 == a2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v18, v17))
    {
      long long v21 = v18[3];
      long long v32 = v18[2];
      long long v33 = v21;
      long long v34 = v18[4];
      long long v22 = v18[1];
      long long v30 = *v18;
      long long v31 = v22;
      uint64_t v23 = v19;
      while (1)
      {
        long long v24 = (long long *)((char *)a1 + v23);
        long long v25 = *(long long *)((char *)a1 + v23 + 208);
        v24[17] = *(long long *)((char *)a1 + v23 + 192);
        v24[18] = v25;
        v24[19] = *(long long *)((char *)a1 + v23 + 224);
        long long v26 = *(long long *)((char *)a1 + v23 + 176);
        v24[15] = *(long long *)((char *)a1 + v23 + 160);
        v24[16] = v26;
        if (v23 == -160) {
          break;
        }
        v23 -= 80;
        if (((*a3)(&v30, v24 + 5) & 1) == 0)
        {
          long long v27 = (long long *)((char *)a1 + v23 + 240);
          goto LABEL_12;
        }
      }
      long long v27 = a1;
LABEL_12:
      long long v28 = v33;
      void v27[2] = v32;
      v27[3] = v28;
      v27[4] = v34;
      long long v29 = v31;
      long long *v27 = v30;
      v27[1] = v29;
      if (++v20 == 8) {
        return v18 + 5 == a2;
      }
    }
    long long v17 = v18;
    v19 += 80;
    v18 += 5;
    if (v18 == a2) {
      return 1;
    }
  }
}

__n128 sub_1DD509070(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  sub_1DD5088D8(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    long long v26 = a3[2];
    long long v29 = a3[3];
    long long v32 = a3[4];
    long long v20 = *a3;
    long long v23 = a3[1];
    *a3 = *a4;
    long long v11 = a4[4];
    long long v13 = a4[1];
    long long v12 = a4[2];
    a3[3] = a4[3];
    a3[4] = v11;
    a3[1] = v13;
    a3[2] = v12;
    a4[3] = v29;
    a4[4] = v32;
    *a4 = v20;
    a4[1] = v23;
    a4[2] = v26;
    if ((*a5)(a3, a2))
    {
      long long v27 = a2[2];
      long long v30 = a2[3];
      long long v33 = a2[4];
      long long v21 = *a2;
      long long v24 = a2[1];
      *a2 = *a3;
      long long v14 = a3[4];
      long long v16 = a3[1];
      long long v15 = a3[2];
      a2[3] = a3[3];
      a2[4] = v14;
      a2[1] = v16;
      a2[2] = v15;
      a3[3] = v30;
      a3[4] = v33;
      *a3 = v21;
      a3[1] = v24;
      a3[2] = v27;
      if ((*a5)(a2, a1))
      {
        long long v28 = a1[2];
        long long v31 = a1[3];
        long long v34 = a1[4];
        __n128 v22 = (__n128)*a1;
        long long v25 = a1[1];
        *a1 = *a2;
        long long v17 = a2[4];
        long long v19 = a2[1];
        long long v18 = a2[2];
        a1[3] = a2[3];
        a1[4] = v17;
        a1[1] = v19;
        a1[2] = v18;
        a2[3] = v31;
        a2[4] = v34;
        __n128 result = v22;
        *a2 = (__int128)v22;
        a2[1] = v25;
        a2[2] = v28;
      }
    }
  }
  return result;
}

__n128 sub_1DD5091D4(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_1DD509070(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(long long *, long long *, __n128))*a6)(a5, a4, v12))
  {
    long long v34 = a4[2];
    long long v38 = a4[3];
    long long v42 = a4[4];
    long long v26 = *a4;
    long long v30 = a4[1];
    *a4 = *a5;
    long long v14 = a5[4];
    long long v16 = a5[1];
    long long v15 = a5[2];
    a4[3] = a5[3];
    a4[4] = v14;
    a4[1] = v16;
    a4[2] = v15;
    a5[3] = v38;
    a5[4] = v42;
    *a5 = v26;
    a5[1] = v30;
    a5[2] = v34;
    if ((*a6)(a4, a3))
    {
      long long v35 = a3[2];
      long long v39 = a3[3];
      long long v43 = a3[4];
      long long v27 = *a3;
      long long v31 = a3[1];
      *a3 = *a4;
      long long v17 = a4[4];
      long long v19 = a4[1];
      long long v18 = a4[2];
      a3[3] = a4[3];
      a3[4] = v17;
      a3[1] = v19;
      a3[2] = v18;
      a4[3] = v39;
      a4[4] = v43;
      *a4 = v27;
      a4[1] = v31;
      a4[2] = v35;
      if ((*a6)(a3, a2))
      {
        long long v36 = a2[2];
        long long v40 = a2[3];
        long long v44 = a2[4];
        long long v28 = *a2;
        long long v32 = a2[1];
        *a2 = *a3;
        long long v20 = a3[4];
        long long v22 = a3[1];
        long long v21 = a3[2];
        a2[3] = a3[3];
        a2[4] = v20;
        a2[1] = v22;
        a2[2] = v21;
        a3[3] = v40;
        a3[4] = v44;
        *a3 = v28;
        a3[1] = v32;
        a3[2] = v36;
        if ((*a6)(a2, a1))
        {
          long long v37 = a1[2];
          long long v41 = a1[3];
          long long v45 = a1[4];
          __n128 v29 = (__n128)*a1;
          long long v33 = a1[1];
          *a1 = *a2;
          long long v23 = a2[4];
          long long v25 = a2[1];
          long long v24 = a2[2];
          a1[3] = a2[3];
          a1[4] = v23;
          a1[1] = v25;
          a1[2] = v24;
          a2[3] = v41;
          a2[4] = v45;
          __n128 result = v29;
          *a2 = (__int128)v29;
          a2[1] = v33;
          a2[2] = v37;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1DD509398(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __n128 *), __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    long long v7 = a2;
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) / 80;
    if ((uint64_t)a2 - a1 >= 81)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = (__n128 *)(a1 + 80 * v11);
      do
      {
        a5 = sub_1DD50962C(a1, a4, v10, v13);
        v13 -= 5;
        --v12;
      }
      while (v12);
    }
    long long v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          __n128 v39 = v15[2];
          __n128 v41 = v15[3];
          __n128 v43 = v15[4];
          __n128 v35 = *v15;
          __n128 v37 = v15[1];
          *long long v15 = *(__n128 *)a1;
          __n128 v16 = *(__n128 *)(a1 + 64);
          __n128 v18 = *(__n128 *)(a1 + 16);
          __n128 v17 = *(__n128 *)(a1 + 32);
          v15[3] = *(__n128 *)(a1 + 48);
          v15[4] = v16;
          v15[1] = v18;
          void v15[2] = v17;
          *(__n128 *)(a1 + 48) = v41;
          *(__n128 *)(a1 + 64) = v43;
          *(__n128 *)a1 = v35;
          *(__n128 *)(a1 + 16) = v37;
          *(__n128 *)(a1 + 32) = v39;
          a5 = sub_1DD50962C(a1, a4, v10, (__n128 *)a1);
        }
        v15 += 5;
      }
      while (v15 != a3);
      long long v14 = a3;
    }
    if (v9 < 81)
    {
      return v14;
    }
    else
    {
      long long v33 = v14;
      int64_t v19 = v9 / 0x50uLL;
      do
      {
        long long v34 = v7;
        uint64_t v20 = 0;
        __n128 v40 = *(__n128 *)(a1 + 32);
        __n128 v42 = *(__n128 *)(a1 + 48);
        __n128 v44 = *(__n128 *)(a1 + 64);
        __n128 v36 = *(__n128 *)a1;
        __n128 v38 = *(__n128 *)(a1 + 16);
        long long v21 = (_OWORD *)a1;
        do
        {
          long long v22 = (__n128 *)&v21[5 * v20 + 5];
          uint64_t v23 = (2 * v20) | 1;
          uint64_t v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)((uint64_t)&v21[5 * v20 + 5], (__n128 *)&v21[5 * v20 + 10]))
          {
            v22 += 5;
            uint64_t v23 = v24;
          }
          *long long v21 = *v22;
          __n128 v25 = v22[1];
          __n128 v26 = v22[2];
          __n128 v27 = v22[4];
          v21[3] = v22[3];
          v21[4] = v27;
          v21[1] = v25;
          v21[2] = v26;
          long long v21 = v22;
          uint64_t v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        long long v7 = v34 - 5;
        if (v22 == &v34[-5])
        {
          *long long v22 = v36;
          v22[3] = v42;
          v22[4] = v44;
          v22[1] = v38;
          v22[2] = v40;
        }
        else
        {
          *long long v22 = *v7;
          __n128 v28 = v34[-4];
          __n128 v29 = v34[-3];
          __n128 v30 = v34[-1];
          v22[3] = v34[-2];
          v22[4] = v30;
          v22[1] = v28;
          v22[2] = v29;
          v34[-3] = v40;
          v34[-2] = v42;
          v34[-1] = v44;
          *long long v7 = v36;
          v34[-4] = v38;
          sub_1DD5097B0(a1, (uint64_t)&v22[5], (uint64_t (**)(__n128 *, __n128 *))a4, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)&v22[5] - a1) >> 4));
        }
      }
      while (v19-- > 2);
      return v33;
    }
  }
  return a3;
}

__n128 sub_1DD50962C(uint64_t a1, unsigned int (**a2)(uint64_t, __n128 *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v31 = v4;
    uint64_t v32 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 4)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4)) | 1;
      long long v13 = (__n128 *)(a1 + 80 * v12);
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v14 < a3 && (*a2)(a1 + 80 * v12, v13 + 5))
      {
        v13 += 5;
        int64_t v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v16 = v7[3];
        __n128 v28 = v7[2];
        __n128 v29 = v16;
        __n128 v30 = v7[4];
        __n128 v17 = v7[1];
        __n128 v26 = *v7;
        __n128 v27 = v17;
        do
        {
          __n128 v18 = v13;
          *long long v7 = *v13;
          __n128 v19 = v13[1];
          __n128 v20 = v13[2];
          __n128 v21 = v13[4];
          v7[3] = v13[3];
          _OWORD v7[4] = v21;
          v7[1] = v19;
          int v7[2] = v20;
          if (v9 < v12) {
            break;
          }
          uint64_t v22 = (2 * v12) | 1;
          long long v13 = (__n128 *)(a1 + 80 * v22);
          uint64_t v23 = 2 * v12 + 2;
          if (v23 < a3)
          {
            if ((*a2)(a1 + 80 * v22, v13 + 5))
            {
              v13 += 5;
              uint64_t v22 = v23;
            }
          }
          long long v7 = v18;
          int64_t v12 = v22;
        }
        while (!(*a2)((uint64_t)v13, &v26));
        *__n128 v18 = v26;
        __n128 result = v27;
        __n128 v24 = v28;
        __n128 v25 = v30;
        void v18[3] = v29;
        void v18[4] = v25;
        v18[1] = result;
        void v18[2] = v24;
      }
    }
  }
  return result;
}

__n128 sub_1DD5097B0(uint64_t a1, uint64_t a2, uint64_t (**a3)(__n128 *, __n128 *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v25 = v4;
    uint64_t v26 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (__n128 *)(a1 + 80 * (v6 >> 1));
    unint64_t v11 = (__n128 *)(a2 - 80);
    if ((*a3)(v10, (__n128 *)(a2 - 80)))
    {
      __n128 v13 = v11[3];
      __n128 v22 = v11[2];
      __n128 v23 = v13;
      __n128 v24 = v11[4];
      __n128 v14 = v11[1];
      __n128 v20 = *v11;
      __n128 v21 = v14;
      do
      {
        long long v15 = v10;
        *unint64_t v11 = *v10;
        __n128 v16 = v10[1];
        __n128 v17 = v10[2];
        __n128 v18 = v10[4];
        void v11[3] = v10[3];
        v11[4] = v18;
        v11[1] = v16;
        v11[2] = v17;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (__n128 *)(a1 + 80 * v9);
        unint64_t v11 = v15;
      }
      while (((*a3)(v10, &v20) & 1) != 0);
      __n128 v19 = v23;
      void v15[2] = v22;
      v15[3] = v19;
      v15[4] = v24;
      __n128 result = v21;
      *long long v15 = v20;
      v15[1] = result;
    }
  }
  return result;
}

void *sub_1DD50989C(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_1DD50991C(a1, a2);
    unint64_t v6 = (unsigned char *)a1[1];
    long long v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DD509900(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DD50991C(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_1DD4BACA0();
  }
  __n128 result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *sub_1DD509960(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_1DD4BAD90();
  }
  return operator new(80 * a2);
}

void *sub_1DD5099A8(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD50991C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1DD509A00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD509A1C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DD4BB7EC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DD509A9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD509AB8(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      int64_t v12 = (char *)sub_1DD4BD934(v4, v11);
    }
    else {
      int64_t v12 = 0;
    }
    long long v15 = v12;
    __n128 v16 = &v12[24 * v8];
    __n128 v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    __n128 v17 = &v16[v14];
    sub_1DD509C20(a1, &v15);
    sub_1DD4C9568((uint64_t)&v15);
  }
}

void sub_1DD509C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD4C9568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD509C20(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1DD509C98((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DD509C98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1DD509D3C((uint64_t)v11);
  return v9;
}

uint64_t sub_1DD509D3C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DD4C9520(a1);
  }
  return a1;
}

char *sub_1DD509D74(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 > 0x333333333333333) {
      sub_1DD4BACA0();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 4);
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 4);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x199999999999999) {
      unint64_t v18 = 0x333333333333333;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v41 = v9;
    if (v18) {
      uint64_t v19 = (char *)sub_1DD509960(v9, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    __n128 v30 = &v19[80 * v15];
    long long __p = v19;
    __n128 v38 = v30;
    __n128 v40 = &v19[80 * v18];
    uint64_t v31 = &v30[80 * a5];
    uint64_t v32 = 80 * a5;
    do
    {
      *(_OWORD *)__n128 v30 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 1);
      long long v34 = *((_OWORD *)v7 + 2);
      long long v35 = *((_OWORD *)v7 + 4);
      *((_OWORD *)v30 + 3) = *((_OWORD *)v7 + 3);
      *((_OWORD *)v30 + 4) = v35;
      *((_OWORD *)v30 + 1) = v33;
      *((_OWORD *)v30 + 2) = v34;
      v30 += 80;
      v7 += 80;
      v32 -= 80;
    }
    while (v32);
    __n128 v39 = v31;
    uint64_t v5 = (char *)sub_1DD50A028((void **)a1, (uint64_t)&__p, v5);
    if (v39 != v38) {
      __n128 v39 = &v38[(v39 - v38 - 80) % 0x50uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 4)) >= a5)
  {
    __n128 v21 = &__src[80 * a5];
    __n128 v23 = *(char **)(v9 - 8);
LABEL_17:
    __n128 v24 = &v5[80 * a5];
    uint64_t v25 = &v23[-80 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v25;
        long long v27 = *((_OWORD *)v25 + 1);
        long long v28 = *((_OWORD *)v25 + 2);
        long long v29 = *((_OWORD *)v25 + 4);
        *((_OWORD *)v26 + 3) = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 4) = v29;
        *((_OWORD *)v26 + 1) = v27;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 80;
        v26 += 80;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[80 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  __n128 v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], a4 - v21);
  }
  __n128 v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1DD509FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DD50A028(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      *(_OWORD *)(v9 - 80) = *((_OWORD *)v8 - 5);
      long long v10 = *((_OWORD *)v8 - 4);
      long long v11 = *((_OWORD *)v8 - 3);
      long long v12 = *((_OWORD *)v8 - 1);
      uint64_t v7 = (void *)(v9 - 80);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      v8 -= 80;
      v9 -= 80;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  long long v13 = a1[1];
  uint64_t v14 = *(void *)(a2 + 16);
  int64_t v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v14 + v15;
  unint64_t v16 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v17;
  unint64_t v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v18;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_1DD50A110(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
uint64_t sub_1DD50A564(uint64_t result, _OWORD *a2)
{
  if ((_OWORD *)result != a2)
  {
    unint64_t v2 = (_OWORD *)(result + 80);
    if ((_OWORD *)(result + 80) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (float *)result;
      do
      {
        uint64_t v5 = v2;
        float v6 = v4[27];
        if (v6 < v4[7])
        {
          *(_OWORD *)uint64_t v15 = *v2;
          *(_OWORD *)&v15[12] = *(_OWORD *)((char *)v2 + 12);
          long long v12 = *((_OWORD *)v4 + 7);
          long long v13 = *((_OWORD *)v4 + 8);
          long long v14 = *((_OWORD *)v4 + 9);
          uint64_t v7 = v3;
          while (1)
          {
            long long v8 = (float *)(result + v7);
            long long v9 = *(_OWORD *)(result + v7 + 48);
            *((_OWORD *)v8 + 7) = *(_OWORD *)(result + v7 + 32);
            *((_OWORD *)v8 + 8) = v9;
            *((_OWORD *)v8 + 9) = *(_OWORD *)(result + v7 + 64);
            long long v10 = *(_OWORD *)(result + v7 + 16);
            *((_OWORD *)v8 + 5) = *(_OWORD *)(result + v7);
            *((_OWORD *)v8 + 6) = v10;
            if (!v7) {
              break;
            }
            v7 -= 80;
            if (v6 >= *(v8 - 13))
            {
              uint64_t v11 = result + v7 + 80;
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v15;
          *(_OWORD *)(v11 + 12) = *(_OWORD *)&v15[12];
          *(float *)(v11 + 28) = v6;
          *(_OWORD *)(v11 + 32) = v12;
          *(_OWORD *)(v11 + 48) = v13;
          *(_OWORD *)(v11 + 64) = v14;
        }
        unint64_t v2 = v5 + 5;
        v3 += 80;
        uint64_t v4 = (float *)v5;
      }
      while (v5 + 5 != a2);
    }
  }
  return result;
}

uint64_t sub_1DD50A63C(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 80;
    if (result + 80 != a2)
    {
      do
      {
        uint64_t v3 = v2;
        float v4 = *(float *)(result + 108);
        if (v4 < *(float *)(result + 28))
        {
          *(_OWORD *)long long v10 = *(_OWORD *)v2;
          *(_OWORD *)&v10[12] = *(_OWORD *)(v2 + 12);
          long long v7 = *(_OWORD *)(result + 112);
          long long v8 = *(_OWORD *)(result + 128);
          long long v9 = *(_OWORD *)(result + 144);
          do
          {
            long long v5 = *(_OWORD *)(v2 - 32);
            *(_OWORD *)(v2 + 32) = *(_OWORD *)(v2 - 48);
            *(_OWORD *)(v2 + 48) = v5;
            *(_OWORD *)(v2 + 64) = *(_OWORD *)(v2 - 16);
            long long v6 = *(_OWORD *)(v2 - 64);
            *(_OWORD *)uint64_t v2 = *(_OWORD *)(v2 - 80);
            *(_OWORD *)(v2 + 16) = v6;
            LODWORD(v6) = *(_DWORD *)(v2 - 132);
            v2 -= 80;
          }
          while (v4 < *(float *)&v6);
          *(_OWORD *)uint64_t v2 = *(_OWORD *)v10;
          *(_OWORD *)(v2 + 12) = *(_OWORD *)&v10[12];
          *(float *)(v2 + 28) = v4;
          *(_OWORD *)(v2 + 32) = v7;
          *(_OWORD *)(v2 + 48) = v8;
          *(_OWORD *)(v2 + 64) = v9;
        }
        uint64_t v2 = v3 + 80;
        uint64_t result = v3;
      }
      while (v3 + 80 != a2);
    }
  }
  return result;
}

uint64_t sub_1DD50A6F0(float *a1, float *a2, float *a3)
{
  float v3 = a2[7];
  float v4 = a3[7];
  if (v3 >= a1[7])
  {
    if (v4 >= v3) {
      return 0;
    }
    long long v34 = *((_OWORD *)a2 + 2);
    long long v39 = *((_OWORD *)a2 + 3);
    long long v44 = *((_OWORD *)a2 + 4);
    long long v24 = *(_OWORD *)a2;
    long long v29 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v11 = *((_OWORD *)a3 + 4);
    long long v13 = *((_OWORD *)a3 + 1);
    long long v12 = *((_OWORD *)a3 + 2);
    *((_OWORD *)a2 + 3) = *((_OWORD *)a3 + 3);
    *((_OWORD *)a2 + 4) = v11;
    *((_OWORD *)a2 + 1) = v13;
    *((_OWORD *)a2 + 2) = v12;
    *((_OWORD *)a3 + 3) = v39;
    *((_OWORD *)a3 + 4) = v44;
    *(_OWORD *)a3 = v24;
    *((_OWORD *)a3 + 1) = v29;
    *((_OWORD *)a3 + 2) = v34;
    if (a2[7] < a1[7])
    {
      long long v35 = *((_OWORD *)a1 + 2);
      long long v40 = *((_OWORD *)a1 + 3);
      long long v45 = *((_OWORD *)a1 + 4);
      long long v25 = *(_OWORD *)a1;
      long long v30 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v14 = *((_OWORD *)a2 + 4);
      long long v16 = *((_OWORD *)a2 + 1);
      long long v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 4) = v14;
      *((_OWORD *)a1 + 1) = v16;
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a2 + 3) = v40;
      *((_OWORD *)a2 + 4) = v45;
      uint64_t result = 2;
      *(_OWORD *)a2 = v25;
      *((_OWORD *)a2 + 1) = v30;
      *((_OWORD *)a2 + 2) = v35;
      return result;
    }
  }
  else
  {
    if (v4 < v3)
    {
      long long v33 = *((_OWORD *)a1 + 2);
      long long v38 = *((_OWORD *)a1 + 3);
      long long v43 = *((_OWORD *)a1 + 4);
      long long v23 = *(_OWORD *)a1;
      long long v28 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      long long v5 = *((_OWORD *)a3 + 4);
      long long v7 = *((_OWORD *)a3 + 1);
      long long v6 = *((_OWORD *)a3 + 2);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a3 + 3);
      *((_OWORD *)a1 + 4) = v5;
      *((_OWORD *)a1 + 1) = v7;
      *((_OWORD *)a1 + 2) = v6;
      *((_OWORD *)a3 + 3) = v38;
      *((_OWORD *)a3 + 4) = v43;
      *((_OWORD *)a3 + 2) = v33;
      long long v8 = v23;
      long long v9 = v28;
      uint64_t result = 1;
LABEL_9:
      *(_OWORD *)a3 = v8;
      *((_OWORD *)a3 + 1) = v9;
      return result;
    }
    long long v36 = *((_OWORD *)a1 + 2);
    long long v41 = *((_OWORD *)a1 + 3);
    long long v46 = *((_OWORD *)a1 + 4);
    long long v26 = *(_OWORD *)a1;
    long long v31 = *((_OWORD *)a1 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v17 = *((_OWORD *)a2 + 4);
    long long v19 = *((_OWORD *)a2 + 1);
    long long v18 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v17;
    *((_OWORD *)a1 + 1) = v19;
    *((_OWORD *)a1 + 2) = v18;
    *((_OWORD *)a2 + 3) = v41;
    *((_OWORD *)a2 + 4) = v46;
    *(_OWORD *)a2 = v26;
    *((_OWORD *)a2 + 1) = v31;
    *((_OWORD *)a2 + 2) = v36;
    if (a3[7] < a2[7])
    {
      long long v37 = *((_OWORD *)a2 + 2);
      long long v42 = *((_OWORD *)a2 + 3);
      long long v47 = *((_OWORD *)a2 + 4);
      long long v27 = *(_OWORD *)a2;
      long long v32 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v20 = *((_OWORD *)a3 + 4);
      long long v22 = *((_OWORD *)a3 + 1);
      long long v21 = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = *((_OWORD *)a3 + 3);
      *((_OWORD *)a2 + 4) = v20;
      *((_OWORD *)a2 + 1) = v22;
      *((_OWORD *)a2 + 2) = v21;
      *((_OWORD *)a3 + 3) = v42;
      *((_OWORD *)a3 + 4) = v47;
      *((_OWORD *)a3 + 2) = v37;
      long long v8 = v27;
      long long v9 = v32;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  return 1;
}

unint64_t sub_1DD50A8C8(uint64_t a1, float *a2)
{
  *(_OWORD *)long long v23 = *(_OWORD *)a1;
  *(_OWORD *)&v23[12] = *(_OWORD *)(a1 + 12);
  float v2 = *(float *)(a1 + 28);
  long long v20 = *(_OWORD *)(a1 + 32);
  long long v21 = *(_OWORD *)(a1 + 48);
  long long v22 = *(_OWORD *)(a1 + 64);
  if (v2 >= *(a2 - 13))
  {
    unint64_t v6 = a1 + 80;
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      float v7 = *(float *)(v6 + 28);
      v6 += 80;
    }
    while (v2 >= v7);
  }
  else
  {
    uint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3 + 80;
      float v5 = *(float *)(v3 + 108);
      v3 += 80;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    long long v8 = a2;
  }
  else
  {
    do
    {
      long long v8 = a2 - 20;
      float v9 = *(a2 - 13);
      a2 -= 20;
    }
    while (v2 < v9);
  }
  while (v4 < (unint64_t)v8)
  {
    long long v24 = *(_OWORD *)v4;
    long long v27 = *(_OWORD *)(v4 + 48);
    long long v28 = *(_OWORD *)(v4 + 64);
    long long v25 = *(_OWORD *)(v4 + 16);
    long long v26 = *(_OWORD *)(v4 + 32);
    long long v10 = *((_OWORD *)v8 + 4);
    long long v12 = *((_OWORD *)v8 + 1);
    long long v11 = *((_OWORD *)v8 + 2);
    *(_OWORD *)(v4 + 48) = *((_OWORD *)v8 + 3);
    *(_OWORD *)(v4 + 64) = v10;
    *(_OWORD *)(v4 + 16) = v12;
    *(_OWORD *)(v4 + 32) = v11;
    *(_OWORD *)unint64_t v4 = *(_OWORD *)v8;
    *((_OWORD *)v8 + 3) = v27;
    *((_OWORD *)v8 + 4) = v28;
    *((_OWORD *)v8 + 1) = v25;
    *((_OWORD *)v8 + 2) = v26;
    *(_OWORD *)long long v8 = v24;
    do
    {
      float v13 = *(float *)(v4 + 108);
      v4 += 80;
    }
    while (v2 >= v13);
    do
    {
      float v14 = *(v8 - 13);
      v8 -= 20;
    }
    while (v2 < v14);
  }
  long long v15 = (_OWORD *)(v4 - 80);
  if (v4 - 80 != a1)
  {
    *(_OWORD *)a1 = *v15;
    long long v16 = *(_OWORD *)(v4 - 64);
    long long v17 = *(_OWORD *)(v4 - 48);
    long long v18 = *(_OWORD *)(v4 - 16);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v4 - 32);
    *(_OWORD *)(a1 + 64) = v18;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
  }
  *(_OWORD *)(v4 - 68) = *(_OWORD *)&v23[12];
  *long long v15 = *(_OWORD *)v23;
  *(float *)(v4 - 52) = v2;
  *(_OWORD *)(v4 - 32) = v21;
  *(_OWORD *)(v4 - 16) = v22;
  *(_OWORD *)(v4 - 48) = v20;
  return v4;
}

unint64_t sub_1DD50AA24(uint64_t a1, float *a2)
{
  uint64_t v2 = 0;
  *(_OWORD *)long long v24 = *(_OWORD *)a1;
  *(_OWORD *)&v24[12] = *(_OWORD *)(a1 + 12);
  float v3 = *(float *)(a1 + 28);
  long long v21 = *(_OWORD *)(a1 + 32);
  long long v22 = *(_OWORD *)(a1 + 48);
  long long v23 = *(_OWORD *)(a1 + 64);
  do
  {
    float v4 = *(float *)(a1 + v2 + 108);
    v2 += 80;
  }
  while (v4 < v3);
  unint64_t v5 = a1 + v2;
  if (v2 == 80)
  {
    while (v5 < (unint64_t)a2)
    {
      unint64_t v6 = a2 - 20;
      float v8 = *(a2 - 13);
      a2 -= 20;
      if (v8 < v3) {
        goto LABEL_9;
      }
    }
    unint64_t v6 = a2;
  }
  else
  {
    do
    {
      unint64_t v6 = a2 - 20;
      float v7 = *(a2 - 13);
      a2 -= 20;
    }
    while (v7 >= v3);
  }
LABEL_9:
  unint64_t v9 = a1 + v2;
  if (v5 < (unint64_t)v6)
  {
    long long v10 = v6;
    do
    {
      long long v27 = *(_OWORD *)(v9 + 32);
      long long v28 = *(_OWORD *)(v9 + 48);
      long long v29 = *(_OWORD *)(v9 + 64);
      long long v25 = *(_OWORD *)v9;
      long long v26 = *(_OWORD *)(v9 + 16);
      long long v12 = *((_OWORD *)v10 + 1);
      long long v11 = *((_OWORD *)v10 + 2);
      long long v13 = *((_OWORD *)v10 + 4);
      *(_OWORD *)(v9 + 48) = *((_OWORD *)v10 + 3);
      *(_OWORD *)(v9 + 64) = v13;
      *(_OWORD *)(v9 + 16) = v12;
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)long long v10 = v25;
      *((_OWORD *)v10 + 3) = v28;
      *((_OWORD *)v10 + 4) = v29;
      *((_OWORD *)v10 + 1) = v26;
      *((_OWORD *)v10 + 2) = v27;
      do
      {
        float v14 = *(float *)(v9 + 108);
        v9 += 80;
      }
      while (v14 < v3);
      do
      {
        float v15 = *(v10 - 13);
        v10 -= 20;
      }
      while (v15 >= v3);
    }
    while (v9 < (unint64_t)v10);
  }
  long long v16 = (_OWORD *)(v9 - 80);
  if (v9 - 80 != a1)
  {
    *(_OWORD *)a1 = *v16;
    long long v17 = *(_OWORD *)(v9 - 64);
    long long v18 = *(_OWORD *)(v9 - 48);
    long long v19 = *(_OWORD *)(v9 - 16);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v9 - 32);
    *(_OWORD *)(a1 + 64) = v19;
    *(_OWORD *)(a1 + 16) = v17;
    *(_OWORD *)(a1 + 32) = v18;
  }
  *(_OWORD *)(v9 - 68) = *(_OWORD *)&v24[12];
  *long long v16 = *(_OWORD *)v24;
  *(float *)(v9 - 52) = v3;
  *(_OWORD *)(v9 - 32) = v22;
  *(_OWORD *)(v9 - 16) = v23;
  *(_OWORD *)(v9 - 48) = v21;
  return v9 - 80;
}

BOOL sub_1DD50AB84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 52) < *(float *)(a1 + 28))
      {
        long long v24 = *(_OWORD *)(a1 + 32);
        long long v26 = *(_OWORD *)(a1 + 48);
        long long v27 = *(_OWORD *)(a1 + 64);
        long long v20 = *(_OWORD *)a1;
        long long v22 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        long long v6 = *(_OWORD *)(a2 - 16);
        long long v8 = *(_OWORD *)(a2 - 64);
        long long v7 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a2 - 32) = v26;
        *(_OWORD *)(a2 - 16) = v27;
        *(_OWORD *)(a2 - 80) = v20;
        *(_OWORD *)(a2 - 64) = v22;
        *(_OWORD *)(a2 - 48) = v24;
      }
      return result;
    case 3uLL:
      sub_1DD50A6F0((float *)a1, (float *)(a1 + 80), (float *)(a2 - 80));
      return 1;
    case 4uLL:
      sub_1DD50ADC0(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      sub_1DD50AF0C(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      uint64_t v9 = a1 + 160;
      sub_1DD50A6F0((float *)a1, (float *)(a1 + 80), (float *)(a1 + 160));
      uint64_t v10 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)(v10 + 28);
    if (v13 < *(float *)(v9 + 28))
    {
      *(_OWORD *)long long v19 = *(_OWORD *)v10;
      *(_OWORD *)&v19[12] = *(_OWORD *)(v10 + 12);
      long long v21 = *(_OWORD *)(v10 + 32);
      long long v23 = *(_OWORD *)(v10 + 48);
      long long v25 = *(_OWORD *)(v10 + 64);
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        long long v16 = *(_OWORD *)(a1 + v14 + 208);
        *(_OWORD *)(v15 + 272) = *(_OWORD *)(a1 + v14 + 192);
        *(_OWORD *)(v15 + 288) = v16;
        *(_OWORD *)(v15 + 304) = *(_OWORD *)(a1 + v14 + 224);
        long long v17 = *(_OWORD *)(a1 + v14 + 176);
        *(_OWORD *)(v15 + 240) = *(_OWORD *)(a1 + v14 + 160);
        *(_OWORD *)(v15 + 256) = v17;
        if (v14 == -160) {
          break;
        }
        v14 -= 80;
        if (v13 >= *(float *)(v15 + 108))
        {
          uint64_t v18 = a1 + v14 + 240;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 12) = *(_OWORD *)&v19[12];
      *(float *)(v18 + 28) = v13;
      *(_OWORD *)(v18 + 32) = v21;
      *(_OWORD *)(v18 + 48) = v23;
      ++v12;
      *(_OWORD *)(v18 + 64) = v25;
      if (v12 == 8) {
        return v10 + 80 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 80;
    v10 += 80;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 sub_1DD50ADC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1DD50A6F0((float *)a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 28);
  if (result.n128_f32[0] < *(float *)(a3 + 28))
  {
    long long v24 = *(_OWORD *)(a3 + 32);
    long long v27 = *(_OWORD *)(a3 + 48);
    long long v30 = *(_OWORD *)(a3 + 64);
    __n128 v18 = *(__n128 *)a3;
    long long v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v9 = *(_OWORD *)(a4 + 64);
    long long v11 = *(_OWORD *)(a4 + 16);
    long long v10 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a4 + 48) = v27;
    *(_OWORD *)(a4 + 64) = v30;
    __n128 result = v18;
    *(__n128 *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v24;
    result.n128_u32[0] = *(_DWORD *)(a3 + 28);
    if (result.n128_f32[0] < *(float *)(a2 + 28))
    {
      long long v25 = *(_OWORD *)(a2 + 32);
      long long v28 = *(_OWORD *)(a2 + 48);
      long long v31 = *(_OWORD *)(a2 + 64);
      __n128 v19 = *(__n128 *)a2;
      long long v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v12 = *(_OWORD *)(a3 + 64);
      long long v14 = *(_OWORD *)(a3 + 16);
      long long v13 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v12;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a3 + 48) = v28;
      *(_OWORD *)(a3 + 64) = v31;
      __n128 result = v19;
      *(__n128 *)a3 = v19;
      *(_OWORD *)(a3 + 16) = v22;
      *(_OWORD *)(a3 + 32) = v25;
      result.n128_u32[0] = *(_DWORD *)(a2 + 28);
      if (result.n128_f32[0] < *(float *)(a1 + 28))
      {
        long long v26 = *(_OWORD *)(a1 + 32);
        long long v29 = *(_OWORD *)(a1 + 48);
        long long v32 = *(_OWORD *)(a1 + 64);
        __n128 v20 = *(__n128 *)a1;
        long long v23 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        long long v15 = *(_OWORD *)(a2 + 64);
        long long v17 = *(_OWORD *)(a2 + 16);
        long long v16 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v15;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a2 + 48) = v29;
        *(_OWORD *)(a2 + 64) = v32;
        __n128 result = v20;
        *(__n128 *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v26;
      }
    }
  }
  return result;
}

__n128 sub_1DD50AF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result = sub_1DD50ADC0(a1, a2, a3, a4);
  result.n128_u32[0] = *(_DWORD *)(a5 + 28);
  if (result.n128_f32[0] < *(float *)(a4 + 28))
  {
    long long v31 = *(_OWORD *)(a4 + 32);
    long long v35 = *(_OWORD *)(a4 + 48);
    long long v39 = *(_OWORD *)(a4 + 64);
    __n128 v23 = *(__n128 *)a4;
    long long v27 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    long long v11 = *(_OWORD *)(a5 + 64);
    long long v13 = *(_OWORD *)(a5 + 16);
    long long v12 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v11;
    *(_OWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 32) = v12;
    *(_OWORD *)(a5 + 48) = v35;
    *(_OWORD *)(a5 + 64) = v39;
    __n128 result = v23;
    *(__n128 *)a5 = v23;
    *(_OWORD *)(a5 + 16) = v27;
    *(_OWORD *)(a5 + 32) = v31;
    result.n128_u32[0] = *(_DWORD *)(a4 + 28);
    if (result.n128_f32[0] < *(float *)(a3 + 28))
    {
      long long v32 = *(_OWORD *)(a3 + 32);
      long long v36 = *(_OWORD *)(a3 + 48);
      long long v40 = *(_OWORD *)(a3 + 64);
      __n128 v24 = *(__n128 *)a3;
      long long v28 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      long long v14 = *(_OWORD *)(a4 + 64);
      long long v16 = *(_OWORD *)(a4 + 16);
      long long v15 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 64) = v14;
      *(_OWORD *)(a3 + 16) = v16;
      *(_OWORD *)(a3 + 32) = v15;
      *(_OWORD *)(a4 + 48) = v36;
      *(_OWORD *)(a4 + 64) = v40;
      __n128 result = v24;
      *(__n128 *)a4 = v24;
      *(_OWORD *)(a4 + 16) = v28;
      *(_OWORD *)(a4 + 32) = v32;
      result.n128_u32[0] = *(_DWORD *)(a3 + 28);
      if (result.n128_f32[0] < *(float *)(a2 + 28))
      {
        long long v33 = *(_OWORD *)(a2 + 32);
        long long v37 = *(_OWORD *)(a2 + 48);
        long long v41 = *(_OWORD *)(a2 + 64);
        __n128 v25 = *(__n128 *)a2;
        long long v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        long long v17 = *(_OWORD *)(a3 + 64);
        long long v19 = *(_OWORD *)(a3 + 16);
        long long v18 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 64) = v17;
        *(_OWORD *)(a2 + 16) = v19;
        *(_OWORD *)(a2 + 32) = v18;
        *(_OWORD *)(a3 + 48) = v37;
        *(_OWORD *)(a3 + 64) = v41;
        __n128 result = v25;
        *(__n128 *)a3 = v25;
        *(_OWORD *)(a3 + 16) = v29;
        *(_OWORD *)(a3 + 32) = v33;
        result.n128_u32[0] = *(_DWORD *)(a2 + 28);
        if (result.n128_f32[0] < *(float *)(a1 + 28))
        {
          long long v34 = *(_OWORD *)(a1 + 32);
          long long v38 = *(_OWORD *)(a1 + 48);
          long long v42 = *(_OWORD *)(a1 + 64);
          __n128 v26 = *(__n128 *)a1;
          long long v30 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          long long v20 = *(_OWORD *)(a2 + 64);
          long long v22 = *(_OWORD *)(a2 + 16);
          long long v21 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = v20;
          *(_OWORD *)(a1 + 16) = v22;
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a2 + 48) = v38;
          *(_OWORD *)(a2 + 64) = v42;
          __n128 result = v26;
          *(__n128 *)a2 = v26;
          *(_OWORD *)(a2 + 16) = v30;
          *(_OWORD *)(a2 + 32) = v34;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1DD50B0BC(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    long long v7 = a2;
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) / 80;
    if ((uint64_t)a2 - a1 >= 81)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = a1 + 80 * v11;
      do
      {
        a5 = sub_1DD50B324(a1, a5, a4, v10, v13);
        v13 -= 80;
        --v12;
      }
      while (v12);
    }
    long long v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (v15[1].n128_f32[3] < *(float *)(a1 + 28))
        {
          __n128 v38 = v15[2];
          __n128 v40 = v15[3];
          __n128 v42 = v15[4];
          __n128 v34 = *v15;
          __n128 v36 = v15[1];
          *long long v15 = *(__n128 *)a1;
          __n128 v16 = *(__n128 *)(a1 + 64);
          __n128 v18 = *(__n128 *)(a1 + 16);
          __n128 v17 = *(__n128 *)(a1 + 32);
          v15[3] = *(__n128 *)(a1 + 48);
          v15[4] = v16;
          v15[1] = v18;
          void v15[2] = v17;
          *(__n128 *)(a1 + 48) = v40;
          *(__n128 *)(a1 + 64) = v42;
          *(__n128 *)a1 = v34;
          *(__n128 *)(a1 + 16) = v36;
          *(__n128 *)(a1 + 32) = v38;
          sub_1DD50B324(a1, v34, a4, v10, a1);
        }
        v15 += 5;
      }
      while (v15 != a3);
      long long v14 = a3;
    }
    if (v9 >= 81)
    {
      int64_t v19 = v9 / 0x50uLL;
      do
      {
        uint64_t v20 = 0;
        __n128 v39 = *(__n128 *)(a1 + 32);
        __n128 v41 = *(__n128 *)(a1 + 48);
        __n128 v43 = *(__n128 *)(a1 + 64);
        __n128 v35 = *(__n128 *)a1;
        __n128 v37 = *(__n128 *)(a1 + 16);
        uint64_t v21 = a1;
        do
        {
          long long v22 = (_OWORD *)v21;
          uint64_t v23 = v20 + 1;
          v21 += 80 * (v20 + 1);
          uint64_t v24 = 2 * v20;
          uint64_t v20 = (2 * v20) | 1;
          int64_t v25 = v24 + 2;
          if (v25 < v19 && *((float *)&v22[5 * v23 + 1] + 3) < *(float *)(v21 + 108))
          {
            v21 += 80;
            uint64_t v20 = v25;
          }
          *long long v22 = *(_OWORD *)v21;
          long long v26 = *(_OWORD *)(v21 + 16);
          long long v27 = *(_OWORD *)(v21 + 32);
          long long v28 = *(_OWORD *)(v21 + 64);
          v22[3] = *(_OWORD *)(v21 + 48);
          v22[4] = v28;
          v22[1] = v26;
          v22[2] = v27;
        }
        while (v20 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 -= 5;
        if ((__n128 *)v21 == v7)
        {
          *(__n128 *)uint64_t v21 = v35;
          *(__n128 *)(v21 + 48) = v41;
          *(__n128 *)(v21 + 64) = v43;
          *(__n128 *)(v21 + 16) = v37;
          *(__n128 *)(v21 + 32) = v39;
        }
        else
        {
          *(__n128 *)uint64_t v21 = *v7;
          __n128 v29 = v7[1];
          __n128 v30 = v7[2];
          __n128 v31 = v7[4];
          *(__n128 *)(v21 + 48) = v7[3];
          *(__n128 *)(v21 + 64) = v31;
          *(__n128 *)(v21 + 16) = v29;
          *(__n128 *)(v21 + 32) = v30;
          int v7[2] = v39;
          v7[3] = v41;
          _OWORD v7[4] = v43;
          *long long v7 = v35;
          v7[1] = v37;
          sub_1DD50B460(a1, v21 + 80, v37, a4, 0xCCCCCCCCCCCCCCCDLL * ((v21 + 80 - a1) >> 4));
        }
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 sub_1DD50B324(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4 >= 2)
  {
    int64_t v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a5 - a1) >> 4)))
    {
      int64_t v6 = (0x999999999999999ALL * ((a5 - a1) >> 4)) | 1;
      uint64_t v7 = a1 + 80 * v6;
      if ((uint64_t)(0x999999999999999ALL * ((a5 - a1) >> 4) + 2) < a4
        && *(float *)(a1 + 80 * v6 + 28) < *(float *)(v7 + 108))
      {
        v7 += 80;
        int64_t v6 = 0x999999999999999ALL * ((a5 - a1) >> 4) + 2;
      }
      result.n128_u32[0] = *(_DWORD *)(a5 + 28);
      if (*(float *)(v7 + 28) >= result.n128_f32[0])
      {
        *(_OWORD *)__n128 v17 = *(_OWORD *)a5;
        *(_OWORD *)&v17[12] = *(_OWORD *)(a5 + 12);
        long long v14 = *(_OWORD *)(a5 + 32);
        long long v15 = *(_OWORD *)(a5 + 48);
        __n128 v16 = *(__n128 *)(a5 + 64);
        do
        {
          long long v8 = (_OWORD *)a5;
          a5 = v7;
          *long long v8 = *(_OWORD *)v7;
          long long v9 = *(_OWORD *)(v7 + 16);
          long long v10 = *(_OWORD *)(v7 + 32);
          long long v11 = *(_OWORD *)(v7 + 64);
          void v8[3] = *(_OWORD *)(v7 + 48);
          v8[4] = v11;
          v8[1] = v9;
          v8[2] = v10;
          if (v5 < v6) {
            break;
          }
          uint64_t v12 = (2 * v6) | 1;
          uint64_t v7 = a1 + 80 * v12;
          uint64_t v13 = 2 * v6 + 2;
          if (v13 < a4 && *(float *)(a1 + 80 * v12 + 28) < *(float *)(v7 + 108))
          {
            v7 += 80;
            uint64_t v12 = v13;
          }
          int64_t v6 = v12;
        }
        while (*(float *)(v7 + 28) >= result.n128_f32[0]);
        *(_OWORD *)(a5 + 12) = *(_OWORD *)&v17[12];
        *(_OWORD *)a5 = *(_OWORD *)v17;
        *(_DWORD *)(a5 + 28) = result.n128_u32[0];
        __n128 result = v16;
        *(_OWORD *)(a5 + 32) = v14;
        *(_OWORD *)(a5 + 48) = v15;
        *(__n128 *)(a5 + 64) = v16;
      }
    }
  }
  return result;
}

__n128 sub_1DD50B460(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 - 2;
  if (a5 >= 2)
  {
    unint64_t v6 = v5 >> 1;
    result.n128_u32[0] = *(_DWORD *)(a2 - 52);
    if (*(float *)(a1 + 80 * (v5 >> 1) + 28) < result.n128_f32[0])
    {
      uint64_t v7 = a2 - 80;
      *(_OWORD *)long long v15 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)&v15[12] = *(_OWORD *)(a2 - 68);
      long long v12 = *(_OWORD *)(a2 - 48);
      long long v13 = *(_OWORD *)(a2 - 32);
      __n128 v14 = *(__n128 *)(a2 - 16);
      do
      {
        long long v8 = (_OWORD *)v7;
        uint64_t v7 = a1 + 80 * v6;
        *long long v8 = *(_OWORD *)v7;
        long long v9 = *(_OWORD *)(v7 + 16);
        long long v10 = *(_OWORD *)(v7 + 32);
        long long v11 = *(_OWORD *)(v7 + 64);
        void v8[3] = *(_OWORD *)(v7 + 48);
        v8[4] = v11;
        v8[1] = v9;
        v8[2] = v10;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
      }
      while (*(float *)(a1 + 80 * v6 + 28) < result.n128_f32[0]);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v15[12];
      *(_DWORD *)(v7 + 28) = result.n128_u32[0];
      *(_OWORD *)(v7 + 32) = v12;
      *(_OWORD *)(v7 + 48) = v13;
      __n128 result = v14;
      *(__n128 *)(v7 + 64) = v14;
    }
  }
  return result;
}

void sub_1DD50B518(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x14C1BACF914C1BADLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 296 * ((296 * a2 - 296) / 0x128) + 296;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x14C1BACF914C1BADLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xDD67C8A60DD67CLL) {
      sub_1DD4BACA0();
    }
    unint64_t v10 = 0x14C1BACF914C1BADLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x6EB3E45306EB3ELL) {
      unint64_t v11 = 0xDD67C8A60DD67CLL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      long long v12 = (char *)sub_1DD4BB238(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    long long v15 = v12;
    __n128 v16 = &v12[296 * v8];
    __n128 v18 = &v12[296 * v11];
    size_t v14 = 296 * ((296 * a2 - 296) / 0x128) + 296;
    bzero(v16, v14);
    __n128 v17 = &v16[v14];
    sub_1DD50B6C0(a1, &v15);
    sub_1DD50B880(&v15);
  }
}

void sub_1DD50B6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DD50B880((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD50B6C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1DD50B738((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DD50B738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 296;
      sub_1DD4BB328(v7 - 296, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 296;
      *((void *)&v15 + 1) -= 296;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1DD50B7F4((uint64_t)v12);
  return v10;
}

void sub_1DD50B7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DD50B7F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DD50B82C((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_1DD50B82C(uint64_t *result)
{
  uint64_t v1 = *(void **)(result[2] + 8);
  uint64_t v2 = *(void **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_1DD4BBAF8(v3, v1);
      v1 += 37;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_1DD50B880(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_1DD50B8B4(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 296;
      uint64_t result = sub_1DD4BBAF8(v4, (void *)(v1 - 296));
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1DD50B8FC(uint64_t a1)
{
  uint64_t result = sub_1DD4DB5C4(a1);
  *(void *)uint64_t result = &unk_1F38B0450;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1DD50B93C()
{
  nullsub_2();
  JUMPOUT(0x1E01B7750);
}

void *sub_1DD50B974(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a1 + 12)) {
    int v6 = 12;
  }
  else {
    int v6 = 9;
  }
  return sub_1DD50B998(a2, a3, v6, a4, a5);
}

void *sub_1DD50B998(void *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = result[2];
  uint64_t v5 = result[3];
  v105[0] = -3 * v5;
  v105[1] = -3 * v5 + 1;
  v105[2] = 2 - 2 * v5;
  v105[3] = 3 - v5;
  v105[4] = 3;
  v105[5] = v5 + 3;
  v105[6] = 2 * v5 + 2;
  v105[7] = 3 * v5 + 1;
  v105[8] = 3 * v5;
  v105[9] = 3 * v5 - 1;
  v105[10] = 2 * v5 - 2;
  v105[11] = v5 - 3;
  v105[12] = -3;
  v105[13] = -3 - v5;
  v105[14] = (2 * v5) ^ 0xFFFFFFFFFFFFFFFELL;
  v105[15] = -3 * v5 - 1;
  uint64_t v100 = v6 - 4;
  if ((unint64_t)(v6 - 4) >= 5)
  {
    int v10 = ~(-1 << a3);
    uint64_t v11 = *result;
    unint64_t v12 = result[1] - 4;
    unint64_t v13 = 4;
    long long v14 = xmmword_1DD512BF0;
    long long v15 = xmmword_1DD512560;
    v16.i64[0] = 0x100000001;
    v16.i64[1] = 0x100000001;
    v17.i64[0] = 0x800000008;
    v17.i64[1] = 0x800000008;
    int8x16_t v18 = (int8x16_t)xmmword_1DD512C00;
    int8x16_t v19 = (int8x16_t)xmmword_1DD512C10;
    int8x16_t v20 = (int8x16_t)xmmword_1DD512C20;
    int8x16_t v21 = (int8x16_t)xmmword_1DD512C30;
    int v104 = a3;
    uint64_t v102 = *result;
    int v103 = result;
    unint64_t v101 = v12;
    do
    {
      if (v12 >= 5)
      {
        float v22 = (float)v13;
        for (unint64_t i = 4; i != v12; ++i)
        {
          uint64_t v24 = 0;
          int64_t v25 = (unsigned __int8 *)(v11 + i + result[3] * v13);
          do
          {
            v106.i8[v24] = v25[v105[v24]];
            ++v24;
          }
          while (v24 != 16);
          uint64_t v26 = 0;
          unsigned int v27 = *v25;
          signed int v28 = v27 - a2;
          signed int v29 = v27 + a2;
          int32x4_t v30 = vdupq_n_s32(v27 + a2);
          int32x4_t v31 = vdupq_n_s32(v27 - a2);
          int8x16_t v32 = 0uLL;
          int8x16_t v33 = 0uLL;
          int8x16_t v34 = 0uLL;
          int8x16_t v35 = 0uLL;
          int32x4_t v36 = (int32x4_t)v15;
          int32x4_t v37 = (int32x4_t)v14;
          do
          {
            uint16x8_t v38 = vmovl_u8(*(uint8x8_t *)&v106.i8[v26]);
            int32x4_t v39 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v38.i8);
            int32x4_t v40 = (int32x4_t)vmovl_high_u16(v38);
            int8x16_t v35 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_s32(v40, v30), v16), (uint32x4_t)v37), v35);
            int8x16_t v34 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_s32(v39, v30), v16), (uint32x4_t)v36), v34);
            int8x16_t v33 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_s32(v31, v40), v16), (uint32x4_t)v37), v33);
            int8x16_t v32 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_s32(v31, v39), v16), (uint32x4_t)v36), v32);
            v26 += 8;
            int32x4_t v36 = vaddq_s32(v36, v17);
            int32x4_t v37 = vaddq_s32(v37, v17);
          }
          while (v26 != 16);
          signed int v41 = 0;
          signed int v42 = 0;
          int v43 = 0;
          int v44 = 0;
          int v45 = 0;
          int8x16_t v46 = vorrq_s8(v34, v35);
          int8x8_t v47 = vorr_s8(*(int8x8_t *)v46.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
          int8x16_t v48 = vorrq_s8(v32, v33);
          int8x8_t v49 = vorr_s8(*(int8x8_t *)v48.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
          do
          {
            signed int v41 = (v41 + (((v47.i32[0] | v47.i32[1] | ((v47.i32[0] | v47.i32[1]) << 16)) >> v45) & 1))
                * (((v47.i32[0] | v47.i32[1] | ((v47.i32[0] | v47.i32[1]) << 16)) >> v45) & 1);
            BOOL v50 = v41 <= v44;
            if (v41 > v44) {
              int v44 = v41;
            }
            signed int v42 = (v42 + (((v49.i32[0] | v49.i32[1] | ((v49.i32[0] | v49.i32[1]) << 16)) >> v45) & 1))
                * (((v49.i32[0] | v49.i32[1] | ((v49.i32[0] | v49.i32[1]) << 16)) >> v45) & 1);
            if (!v50 || v42 > v44) {
              int v43 = v45;
            }
            if (v42 > v44) {
              int v44 = v42;
            }
            ++v45;
          }
          while (v45 != 32);
          if (v44 >= a3)
          {
            if (v43 <= 0) {
              int v52 = -(-v43 & 0xF);
            }
            else {
              int v52 = v43 & 0xF;
            }
            unsigned int v53 = v106.u8[v52];
            int v54 = v43 - v44;
            if (v53 <= v27)
            {
              if (v44 >= 1)
              {
                do
                {
                  if (v43 <= 0) {
                    int v66 = -(-v43 & 0xF);
                  }
                  else {
                    int v66 = v43 & 0xF;
                  }
                  signed int v67 = v106.u8[v66];
                  if (v28 > v67)
                  {
                    unsigned int v68 = 0;
                    int8x16_t v69 = (int8x16_t)vcgtq_u8(v106, (uint8x16_t)vdupq_n_s8(v67));
                    uint16x8_t v70 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v69.i8);
                    uint16x8_t v71 = (uint16x8_t)vmovl_high_s8(v69);
                    int8x16_t v72 = vorrq_s8(vorrq_s8(vbicq_s8(v19, (int8x16_t)vmovl_u16(*(uint16x4_t *)v70.i8)), vbicq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)v71.i8))), vorrq_s8(vbicq_s8(v21, (int8x16_t)vmovl_high_u16(v70)), vbicq_s8(v20, (int8x16_t)vmovl_high_u16(v71))));
                    int8x8_t v73 = vorr_s8(*(int8x8_t *)v72.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
                    int v74 = v67 + 1;
                    do
                    {
                      unsigned int v75 = ((v73.i32[0] | v73.i32[1] | ((v73.i32[0] | v73.i32[1]) << 16)) >> v68) & v10;
                      if (v68 > 0xE) {
                        break;
                      }
                      ++v68;
                    }
                    while (v75 != v10);
                    if (v75 == v10) {
                      signed int v28 = v74;
                    }
                  }
                  --v43;
                }
                while (v43 > v54);
              }
              unsigned int v65 = v27 - v28;
            }
            else
            {
              if (v44 >= 1)
              {
                do
                {
                  if (v43 <= 0) {
                    int v55 = -(-v43 & 0xF);
                  }
                  else {
                    int v55 = v43 & 0xF;
                  }
                  signed int v56 = v106.u8[v55];
                  if (v29 < v56)
                  {
                    unsigned int v57 = 0;
                    int8x16_t v58 = (int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v56), v106);
                    uint16x8_t v59 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v58.i8);
                    uint16x8_t v60 = (uint16x8_t)vmovl_high_s8(v58);
                    int8x16_t v61 = vorrq_s8(vorrq_s8(vbicq_s8(v19, (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8)), vbicq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)v60.i8))), vorrq_s8(vbicq_s8(v21, (int8x16_t)vmovl_high_u16(v59)), vbicq_s8(v20, (int8x16_t)vmovl_high_u16(v60))));
                    int8x8_t v62 = vorr_s8(*(int8x8_t *)v61.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
                    int v63 = v56 - 1;
                    do
                    {
                      unsigned int v64 = ((v62.i32[0] | v62.i32[1] | ((v62.i32[0] | v62.i32[1]) << 16)) >> v57) & v10;
                      if (v57 > 0xE) {
                        break;
                      }
                      ++v57;
                    }
                    while (v64 != v10);
                    if (v64 == v10) {
                      signed int v29 = v63;
                    }
                  }
                  --v43;
                }
                while (v43 > v54);
              }
              unsigned int v65 = v29 - v27;
            }
            int v77 = *(unsigned int **)(a5 + 8);
            unint64_t v76 = *(void *)(a5 + 16);
            if ((unint64_t)v77 >= v76)
            {
              uint64_t v79 = *(unsigned int **)a5;
              uint64_t v80 = ((uint64_t)v77 - *(void *)a5) >> 2;
              unint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62) {
                sub_1DD4BACA0();
              }
              uint64_t v82 = v76 - (void)v79;
              if (v82 >> 1 > v81) {
                unint64_t v81 = v82 >> 1;
              }
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v81;
              }
              if (v83)
              {
                long long v84 = (char *)sub_1DD4BB6B8(a5 + 16, v83);
                uint64_t v79 = *(unsigned int **)a5;
                int v77 = *(unsigned int **)(a5 + 8);
              }
              else
              {
                long long v84 = 0;
              }
              long long v85 = &v84[4 * v80];
              *(_DWORD *)long long v85 = v65;
              uint64_t v78 = v85 + 4;
              while (v77 != v79)
              {
                int v86 = *--v77;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              *(void *)a5 = v85;
              *(void *)(a5 + 8) = v78;
              *(void *)(a5 + 16) = &v84[4 * v83];
              if (v79) {
                operator delete(v79);
              }
              a3 = v104;
              uint64_t v11 = v102;
              uint64_t result = v103;
              unint64_t v12 = v101;
              long long v15 = xmmword_1DD512560;
              long long v14 = xmmword_1DD512BF0;
              v16.i64[0] = 0x100000001;
              v16.i64[1] = 0x100000001;
              v17.i64[0] = 0x800000008;
              v17.i64[1] = 0x800000008;
              int8x16_t v19 = (int8x16_t)xmmword_1DD512C10;
              int8x16_t v18 = (int8x16_t)xmmword_1DD512C00;
              int8x16_t v21 = (int8x16_t)xmmword_1DD512C30;
              int8x16_t v20 = (int8x16_t)xmmword_1DD512C20;
            }
            else
            {
              *int v77 = v65;
              uint64_t v78 = v77 + 1;
            }
            *(void *)(a5 + 8) = v78;
            float v87 = (float)i;
            unint64_t v89 = *(float **)(a4 + 8);
            unint64_t v88 = *(void *)(a4 + 16);
            if ((unint64_t)v89 >= v88)
            {
              unsigned int v91 = *(float **)a4;
              uint64_t v92 = ((uint64_t)v89 - *(void *)a4) >> 3;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61) {
                sub_1DD4BACA0();
              }
              uint64_t v94 = v88 - (void)v91;
              if (v94 >> 2 > v93) {
                unint64_t v93 = v94 >> 2;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v93;
              }
              if (v95)
              {
                int v96 = (char *)sub_1DD4BAF80(a4 + 16, v95);
                unsigned int v91 = *(float **)a4;
                unint64_t v89 = *(float **)(a4 + 8);
              }
              else
              {
                int v96 = 0;
              }
              long long v97 = (float *)&v96[8 * v92];
              *long long v97 = v87;
              v97[1] = v22;
              long long v98 = v97;
              if (v89 != v91)
              {
                do
                {
                  uint64_t v99 = *((void *)v89 - 1);
                  v89 -= 2;
                  *((void *)v98 - 1) = v99;
                  v98 -= 2;
                }
                while (v89 != v91);
                unsigned int v91 = *(float **)a4;
              }
              unint64_t v90 = v97 + 2;
              *(void *)a4 = v98;
              *(void *)(a4 + 8) = v97 + 2;
              *(void *)(a4 + 16) = &v96[8 * v95];
              if (v91) {
                operator delete(v91);
              }
              a3 = v104;
              uint64_t v11 = v102;
              uint64_t result = v103;
              unint64_t v12 = v101;
              long long v15 = xmmword_1DD512560;
              long long v14 = xmmword_1DD512BF0;
              v16.i64[0] = 0x100000001;
              v16.i64[1] = 0x100000001;
              v17.i64[0] = 0x800000008;
              v17.i64[1] = 0x800000008;
              int8x16_t v19 = (int8x16_t)xmmword_1DD512C10;
              int8x16_t v18 = (int8x16_t)xmmword_1DD512C00;
              int8x16_t v21 = (int8x16_t)xmmword_1DD512C30;
              int8x16_t v20 = (int8x16_t)xmmword_1DD512C20;
            }
            else
            {
              float *v89 = v87;
              v89[1] = v22;
              unint64_t v90 = v89 + 2;
            }
            *(void *)(a4 + 8) = v90;
          }
        }
      }
      ++v13;
    }
    while (v13 != v100);
  }
  return result;
}

uint64_t sub_1DD50BFD4()
{
  return 1;
}

void sub_1DD50BFDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(_DWORD *)(a1 + 12)) {
    sub_1DD50C00C(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *a3, *(void *)(a2 + 24), *(unsigned __int8 *)(a1 + 8));
  }
}

void sub_1DD50C00C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  if ((((a1 | a5) | a4) & 0xF) != 0 || a2 < 0x20 || (a6 & 0xF) != 0) {
    sub_1DD50C040(a1, a2, a3, a4, a5, a6, 9, a7);
  }
  else {
    sub_1DD50C510((char *)a1, a2, a3, a4, a5, a6, a7);
  }
}

void sub_1DD50C040(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, signed int a8)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  v78[0] = -3 * a4;
  v78[1] = -3 * a4 + 1;
  v78[2] = 2 - 2 * a4;
  uint64_t v78[3] = 3 - a4;
  v78[4] = 3;
  v78[5] = a4 + 3;
  v78[6] = 2 * a4 + 2;
  v78[7] = 3 * a4 + 1;
  v78[8] = 3 * a4;
  v78[9] = 3 * a4 - 1;
  v78[10] = 2 * a4 - 2;
  v78[11] = a4 - 3;
  v78[12] = -3;
  v78[13] = -3 - a4;
  v78[14] = (2 * a4) ^ 0xFFFFFFFFFFFFFFFELL;
  v78[15] = -3 * a4 - 1;
  uint64_t v77 = a3 - 7;
  if ((unint64_t)(a3 - 7) <= 0xFFFFFFFFFFFFFFFBLL)
  {
    uint64_t v12 = 0;
    int v13 = ~(-1 << a7);
    unint64_t v14 = a2 - 3;
    uint64_t v15 = -2;
    if (a2 - 2 < a2) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = 3;
    uint64_t v74 = a5 + a2 - 3 + 3 * a6;
    size_t v75 = v15 + 3;
    int8x16_t v17 = (int8x16_t)xmmword_1DD512C00;
    int8x16_t v18 = (int8x16_t)xmmword_1DD512C10;
    uint64_t v76 = a5 + 3 * a6;
    int8x16_t v19 = (int8x16_t)xmmword_1DD512C20;
    int8x16_t v20 = (int8x16_t)xmmword_1DD512C30;
    do
    {
      uint64_t v21 = v76 + v12 * a6;
      *(unsigned char *)(v21 + 2) = 0;
      *(_WORD *)uint64_t v21 = 0;
      if (v14 <= 3) {
        goto LABEL_60;
      }
      for (uint64_t i = 3; i != v14; ++i)
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unsigned __int8 *)(a1 + v16 * a4 + i);
        do
        {
          v79.i8[v23] = v24[v78[v23]];
          ++v23;
        }
        while (v23 != 16);
        int v25 = 0;
        signed int v26 = 0;
        signed int v27 = 0;
        int v28 = 0;
        int v29 = 0;
        unsigned int v30 = *v24;
        uint8x16_t v31 = (uint8x16_t)vdupq_n_s8(v30);
        int8x16_t v32 = (int8x16_t)vcgtq_u8(v79, v31);
        uint16x8_t v33 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v32.i8);
        uint16x8_t v34 = (uint16x8_t)vmovl_high_s8(v32);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v31, v79);
        uint16x8_t v36 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v35.i8);
        uint16x8_t v37 = (uint16x8_t)vmovl_high_s8(v35);
        int8x16_t v38 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v33.i8), v18), vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v34.i8), v17)), vorrq_s8(vandq_s8((int8x16_t)vmovl_high_u16(v33), v20), vandq_s8((int8x16_t)vmovl_high_u16(v34), v19)));
        int8x8_t v39 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
        int8x16_t v40 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v36.i8), v18), vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v37.i8), v17)), vorrq_s8(vandq_s8((int8x16_t)vmovl_high_u16(v36), v20), vandq_s8((int8x16_t)vmovl_high_u16(v37), v19)));
        int8x8_t v41 = vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
        do
        {
          signed int v26 = ((((v39.i32[0] | v39.i32[1] | ((v39.i32[0] | v39.i32[1]) << 16)) >> v25) & 1) + v26)
              * (((v39.i32[0] | v39.i32[1] | ((v39.i32[0] | v39.i32[1]) << 16)) >> v25) & 1);
          BOOL v42 = v26 <= v29;
          if (v26 > v29) {
            int v29 = v26;
          }
          signed int v27 = ((((v41.i32[0] | v41.i32[1] | ((v41.i32[0] | v41.i32[1]) << 16)) >> v25) & 1) + v27)
              * (((v41.i32[0] | v41.i32[1] | ((v41.i32[0] | v41.i32[1]) << 16)) >> v25) & 1);
          if (!v42 || v27 > v29) {
            int v28 = v25;
          }
          if (v27 > v29) {
            int v29 = v27;
          }
          ++v25;
        }
        while (v25 != 32);
        if (v29 >= a7)
        {
          if (v28 <= 0) {
            int v44 = -(-v28 & 0xF);
          }
          else {
            int v44 = v28 & 0xF;
          }
          unsigned int v45 = v79.u8[v44];
          int v46 = v28 - v29;
          if (v45 <= v30)
          {
            if (v29 < 1)
            {
              signed int v58 = v30;
            }
            else
            {
              signed int v58 = v30;
              do
              {
                if (v28 <= 0) {
                  int v59 = -(-v28 & 0xF);
                }
                else {
                  int v59 = v28 & 0xF;
                }
                signed int v60 = v79.u8[v59];
                if (v58 > v60)
                {
                  unsigned int v61 = 0;
                  int8x16_t v62 = (int8x16_t)vcgtq_u8(v79, (uint8x16_t)vdupq_n_s8(v60));
                  uint16x8_t v63 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v62.i8);
                  uint16x8_t v64 = (uint16x8_t)vmovl_high_s8(v62);
                  int8x16_t v65 = vorrq_s8(vorrq_s8(vbicq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)v63.i8)), vbicq_s8(v17, (int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8))), vorrq_s8(vbicq_s8(v20, (int8x16_t)vmovl_high_u16(v63)), vbicq_s8(v19, (int8x16_t)vmovl_high_u16(v64))));
                  int8x8_t v66 = vorr_s8(*(int8x8_t *)v65.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
                  int v67 = v60 + 1;
                  do
                  {
                    unsigned int v68 = ((v66.i32[0] | v66.i32[1] | ((v66.i32[0] | v66.i32[1]) << 16)) >> v61) & v13;
                    if (v61 > 0xE) {
                      break;
                    }
                    ++v61;
                  }
                  while (v68 != v13);
                  if (v68 == v13) {
                    signed int v58 = v67;
                  }
                }
                --v28;
              }
              while (v28 > v46);
            }
            signed int v69 = v30 - v58;
          }
          else
          {
            if (v29 < 1)
            {
              signed int v47 = v30;
            }
            else
            {
              signed int v47 = v30;
              do
              {
                if (v28 <= 0) {
                  int v48 = -(-v28 & 0xF);
                }
                else {
                  int v48 = v28 & 0xF;
                }
                signed int v49 = v79.u8[v48];
                if (v47 < v49)
                {
                  unsigned int v50 = 0;
                  int8x16_t v51 = (int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v49), v79);
                  uint16x8_t v52 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v51.i8);
                  uint16x8_t v53 = (uint16x8_t)vmovl_high_s8(v51);
                  int8x16_t v54 = vorrq_s8(vorrq_s8(vbicq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)v52.i8)), vbicq_s8(v17, (int8x16_t)vmovl_u16(*(uint16x4_t *)v53.i8))), vorrq_s8(vbicq_s8(v20, (int8x16_t)vmovl_high_u16(v52)), vbicq_s8(v19, (int8x16_t)vmovl_high_u16(v53))));
                  int8x8_t v55 = vorr_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
                  int v56 = v49 - 1;
                  do
                  {
                    unsigned int v57 = ((v55.i32[0] | v55.i32[1] | ((v55.i32[0] | v55.i32[1]) << 16)) >> v50) & v13;
                    if (v50 > 0xE) {
                      break;
                    }
                    ++v50;
                  }
                  while (v57 != v13);
                  if (v57 == v13) {
                    signed int v47 = v56;
                  }
                }
                --v28;
              }
              while (v28 > v46);
            }
            signed int v69 = v47 - v30;
          }
          if (v69 < a8) {
            LOBYTE(v69) = 0;
          }
          *(unsigned char *)(a5 + i + v16 * a6) = v69;
        }
      }
      if (a2 >= 3)
      {
LABEL_60:
        bzero((void *)(v74 + v12 * a6), v75);
        int8x16_t v20 = (int8x16_t)xmmword_1DD512C30;
        int8x16_t v19 = (int8x16_t)xmmword_1DD512C20;
        int8x16_t v18 = (int8x16_t)xmmword_1DD512C10;
        int8x16_t v17 = (int8x16_t)xmmword_1DD512C00;
      }
      ++v16;
    }
    while (v12++ != v77);
  }
}

char *sub_1DD50C510(char *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  if (a3 <= 3) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = a3;
  }
  if (((a6 | a4) & 0xF) == 0)
  {
    uint64_t v11 = result;
    int v12 = -(int)a2;
    bzero((char *)&v141[1] - (v12 & 0xF) + 13, (v12 & 0xF) + 3);
    uint64_t result = (char *)memset((char *)&v141[1] + -(28 - (v12 & 0xF)) - (v12 & 0xF) + 12, 255, 29 - (v12 & 0xFu));
    if ((unint64_t)(v9 - 3) >= 4)
    {
      int8x16_t v128 = (int8x16_t)v141[0];
      uint8x16_t v129 = (uint8x16_t)vdupq_n_s8(a7);
      int8x16_t v127 = (int8x16_t)v141[1];
      unint64_t v14 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v15 = 3 * a4 - 16;
      uint64_t v16 = &v11[v15 - 48 * (a4 >> 4)];
      uint64_t v17 = a5 + 3 * a6;
      int8x16_t v18 = &v11[v15 - 32 * (a4 >> 4)];
      int8x16_t v19 = &v11[48 * (a4 >> 4) + 3 * a4];
      int8x16_t v20 = &v11[32 * (a4 >> 4) + 3 * a4];
      uint64_t v21 = &v11[v15 - 16 * (a4 >> 4)];
      float v22 = &v11[16 * (a4 >> 4) + 3 * a4];
      uint64_t result = &v11[3 * a4];
      unint64_t v23 = 3;
      do
      {
        if (v14)
        {
          uint64_t v24 = 0;
          unint64_t v25 = 0;
          long long v26 = xmmword_1DD512C60;
          do
          {
            if (v23 > 3 || (int8x16_t v27 = 0uLL, (int)v24 >= 1)) {
              int8x16_t v27 = *(int8x16_t *)&v16[v24];
            }
            int8x16_t v140 = (int8x16_t)v26;
            int8x16_t v28 = *(int8x16_t *)&v16[v24 + 16];
            uint8x16_t v29 = (uint8x16_t)vextq_s8(v27, v28, 0xFuLL);
            uint8x16_t v30 = (uint8x16_t)vextq_s8(v28, *(int8x16_t *)&v16[v24 + 32], 1uLL);
            int8x16_t v31 = *(int8x16_t *)&v18[v24 + 16];
            uint8x16_t v32 = (uint8x16_t)vextq_s8(*(int8x16_t *)&v18[v24], v31, 0xEuLL);
            uint8x16_t v33 = (uint8x16_t)vextq_s8(v31, *(int8x16_t *)&v18[v24 + 32], 2uLL);
            int8x16_t v34 = *(int8x16_t *)&v21[v24 + 16];
            uint8x16_t v35 = (uint8x16_t)vextq_s8(*(int8x16_t *)&v21[v24], v34, 0xDuLL);
            uint8x16_t v36 = (uint8x16_t)vextq_s8(v34, *(int8x16_t *)&v21[v24 + 32], 3uLL);
            int8x16_t v37 = *(int8x16_t *)&result[v24];
            uint8x16_t v38 = (uint8x16_t)vextq_s8(*(int8x16_t *)&result[v24 - 16], v37, 0xDuLL);
            uint8x16_t v39 = (uint8x16_t)vextq_s8(v37, *(int8x16_t *)&result[v24 + 16], 3uLL);
            int8x16_t v40 = *(int8x16_t *)&v22[v24];
            uint8x16_t v41 = (uint8x16_t)vextq_s8(*(int8x16_t *)&v22[v24 - 16], v40, 0xDuLL);
            uint8x16_t v42 = (uint8x16_t)vextq_s8(v40, *(int8x16_t *)&v22[v24 + 16], 3uLL);
            int8x16_t v43 = *(int8x16_t *)&v20[v24];
            uint8x16_t v44 = (uint8x16_t)vextq_s8(*(int8x16_t *)&v20[v24 - 16], v43, 0xEuLL);
            uint8x16_t v45 = (uint8x16_t)vextq_s8(v43, *(int8x16_t *)&v20[v24 + 16], 2uLL);
            int v46 = (int8x16_t *)&v19[v24];
            if (a2 - 16 > v25 || (int8x16_t v47 = 0uLL, v9 - 4 > v23)) {
              int8x16_t v47 = v46[1];
            }
            uint8x16_t v48 = (uint8x16_t)vextq_s8(v46[-1], *v46, 0xFuLL);
            uint8x16_t v49 = (uint8x16_t)vextq_s8(*v46, v47, 1uLL);
            uint8x16_t v50 = vqsubq_u8((uint8x16_t)v37, v29);
            uint8x16_t v51 = vqsubq_u8((uint8x16_t)v37, (uint8x16_t)v28);
            uint8x16_t v137 = vqsubq_u8((uint8x16_t)v28, (uint8x16_t)v37);
            uint8x16_t v138 = vqsubq_u8(v29, (uint8x16_t)v37);
            uint8x16_t v52 = vqsubq_u8((uint8x16_t)v37, v30);
            uint8x16_t v53 = vqsubq_u8((uint8x16_t)v37, v33);
            uint8x16_t v135 = vqsubq_u8(v33, (uint8x16_t)v37);
            uint8x16_t v136 = vqsubq_u8(v30, (uint8x16_t)v37);
            uint8x16_t v54 = vqsubq_u8((uint8x16_t)v37, v36);
            uint8x16_t v55 = vqsubq_u8((uint8x16_t)v37, v39);
            uint8x16_t v133 = vqsubq_u8(v39, (uint8x16_t)v37);
            uint8x16_t v134 = vqsubq_u8(v36, (uint8x16_t)v37);
            uint8x16_t v56 = vqsubq_u8((uint8x16_t)v37, v42);
            uint8x16_t v57 = vqsubq_u8(v42, (uint8x16_t)v37);
            uint8x16_t v58 = vqsubq_u8((uint8x16_t)v37, v45);
            uint8x16_t v131 = vqsubq_u8(v45, (uint8x16_t)v37);
            uint8x16_t v132 = v57;
            uint8x16_t v59 = vqsubq_u8((uint8x16_t)v37, v49);
            uint8x16_t v60 = vqsubq_u8(v49, (uint8x16_t)v37);
            uint8x16_t v61 = vqsubq_u8((uint8x16_t)v37, *(uint8x16_t *)v46);
            uint8x16_t v130 = vqsubq_u8(*(uint8x16_t *)v46, (uint8x16_t)v37);
            uint8x16_t v62 = vqsubq_u8((uint8x16_t)v37, v48);
            uint8x16_t v63 = vqsubq_u8(v48, (uint8x16_t)v37);
            uint8x16_t v64 = vqsubq_u8((uint8x16_t)v37, v44);
            uint8x16_t v65 = vqsubq_u8(v44, (uint8x16_t)v37);
            uint8x16_t v66 = vqsubq_u8((uint8x16_t)v37, v41);
            uint8x16_t v67 = vqsubq_u8(v41, (uint8x16_t)v37);
            uint8x16_t v68 = vqsubq_u8((uint8x16_t)v37, v38);
            uint8x16_t v69 = vqsubq_u8(v38, (uint8x16_t)v37);
            uint8x16_t v70 = vqsubq_u8((uint8x16_t)v37, v35);
            uint8x16_t v71 = vqsubq_u8(v35, (uint8x16_t)v37);
            uint8x16_t v72 = vqsubq_u8((uint8x16_t)v37, v32);
            uint8x16_t v73 = vqsubq_u8(v32, (uint8x16_t)v37);
            uint8x16_t v74 = vminq_u8(v51, v52);
            uint8x16_t v75 = vminq_u8(v53, v54);
            uint8x16_t v76 = vminq_u8(v55, v56);
            uint8x16_t v77 = vminq_u8(v74, v75);
            uint8x16_t v78 = vminq_u8(v75, v76);
            uint8x16_t v79 = vminq_u8(v58, v59);
            uint8x16_t v80 = vminq_u8(v76, v79);
            uint8x16_t v81 = vminq_u8(v61, v62);
            uint8x16_t v82 = vminq_u8(v79, v81);
            uint8x16_t v83 = vminq_u8(v64, v66);
            uint8x16_t v84 = vminq_u8(v81, v83);
            uint8x16_t v85 = vminq_u8(v68, v70);
            uint8x16_t v86 = vminq_u8(v83, v85);
            uint8x16_t v87 = vminq_u8(v72, v50);
            uint8x16_t v88 = vminq_u8(v85, v87);
            uint8x16_t v89 = vminq_u8(v87, v74);
            uint8x16_t v90 = vminq_u8(v77, v80);
            uint8x16_t v91 = vminq_u8(v80, v84);
            uint8x16_t v92 = vminq_u8(v84, v88);
            uint8x16_t v93 = vminq_u8(v88, v77);
            uint8x16_t v94 = vminq_u8(v78, v82);
            uint8x16_t v95 = vminq_u8(v82, v86);
            uint8x16_t v96 = vminq_u8(v86, v89);
            uint8x16_t v97 = vminq_u8(v89, v78);
            uint8x16_t v98 = vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vminq_u8(v90, v61), vminq_u8(v52, v94)), vmaxq_u8(vminq_u8(v94, v64), vminq_u8(v54, v91))), vmaxq_u8(vmaxq_u8(vminq_u8(v91, v68), vminq_u8(v56, v95)), vmaxq_u8(vminq_u8(v95, v72), vminq_u8(v59, v92)))), vmaxq_u8(vmaxq_u8(vmaxq_u8(vminq_u8(v92, v51), vminq_u8(v62, v96)), vmaxq_u8(vminq_u8(v96, v53), vminq_u8(v66, v93))), vmaxq_u8(vmaxq_u8(vminq_u8(v93, v55), vminq_u8(v70, v97)), vmaxq_u8(vminq_u8(v97, v58), vminq_u8(v50, v90)))));
            uint8x16_t v99 = vminq_u8(v137, v136);
            uint8x16_t v100 = vminq_u8(v135, v134);
            uint8x16_t v101 = vminq_u8(v133, v132);
            uint8x16_t v102 = vminq_u8(v131, v60);
            uint8x16_t v103 = vminq_u8(v130, v63);
            uint8x16_t v104 = vminq_u8(v65, v67);
            uint8x16_t v105 = vminq_u8(v69, v71);
            uint8x16_t v106 = vminq_u8(v73, v138);
            uint8x16_t v107 = vminq_u8(v99, v100);
            uint8x16_t v108 = vminq_u8(v100, v101);
            uint8x16_t v109 = vminq_u8(v101, v102);
            uint8x16_t v110 = vminq_u8(v102, v103);
            uint8x16_t v111 = vminq_u8(v103, v104);
            uint8x16_t v112 = vminq_u8(v104, v105);
            uint8x16_t v113 = vminq_u8(v105, v106);
            uint8x16_t v114 = vminq_u8(v106, v99);
            uint8x16_t v115 = vminq_u8(v107, v109);
            uint8x16_t v116 = vminq_u8(v109, v111);
            uint8x16_t v117 = vminq_u8(v111, v113);
            uint8x16_t v118 = vminq_u8(v113, v107);
            uint8x16_t v119 = vminq_u8(v108, v110);
            uint8x16_t v120 = vminq_u8(v110, v112);
            uint8x16_t v121 = vminq_u8(v112, v114);
            uint8x16_t v122 = vminq_u8(v114, v108);
            uint8x16_t v123 = vmaxq_u8(v98, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vminq_u8(v115, v130), vminq_u8(v136, v119)), vmaxq_u8(vminq_u8(v119, v65), vminq_u8(v134, v116))), vmaxq_u8(vmaxq_u8(vminq_u8(v116, v69), vminq_u8(v132, v120)), vmaxq_u8(vminq_u8(v120, v73), vminq_u8(v60, v117)))), vmaxq_u8(vmaxq_u8(vmaxq_u8(vminq_u8(v117, v137), vminq_u8(v63, v121)), vmaxq_u8(vminq_u8(v121, v135), vminq_u8(v67, v118))), vmaxq_u8(vmaxq_u8(vminq_u8(v118, v133), vminq_u8(v71, v122)), vmaxq_u8(vminq_u8(v122, v131), vminq_u8(v138, v115))))));
            v122.i64[0] = 0x101010101010101;
            v122.i64[1] = 0x101010101010101;
            int8x16_t v124 = (int8x16_t)vqsubq_u8(v123, v122);
            *(int8x16_t *)(v17 + v24) = vandq_s8(vbicq_s8(v140, (int8x16_t)vcgtq_u8(v129, (uint8x16_t)v124)), v124);
            v24 += 16;
            unint64_t v25 = (int)v24;
            *(void *)&long long v26 = -1;
            *((void *)&v26 + 1) = -1;
          }
          while (v14 > (int)v24);
          uint64_t v125 = v17 + v24;
        }
        else
        {
          uint64_t v125 = a5 + v23 * a6;
        }
        int8x16_t v126 = vandq_s8(*(int8x16_t *)(v125 - 16), v127);
        ++v23;
        v16 += a4;
        v17 += a6;
        v18 += a4;
        v19 += a4;
        v20 += a4;
        *(int8x16_t *)(v125 - 32) = vandq_s8(*(int8x16_t *)(v125 - 32), v128);
        *(int8x16_t *)(v125 - 16) = v126;
        v21 += a4;
        v22 += a4;
        result += a4;
      }
      while (v23 != v9 - 3);
    }
  }
  return result;
}

uint64_t sub_1DD50CA5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((unint64_t)(a3 - 5) <= 0xFFFFFFFFFFFFFFFCLL)
  {
    uint64_t v6 = a3 - 1;
    uint64_t v7 = a2 - 1;
    uint64_t v8 = 2;
    uint64_t v9 = 4;
    uint64_t v10 = result;
    do
    {
      if (v9 >= v6) {
        uint64_t v11 = a3 - 1;
      }
      else {
        uint64_t v11 = v9;
      }
      if ((unint64_t)(a2 - 5) <= 0xFFFFFFFFFFFFFFFCLL)
      {
        uint64_t v12 = v8 * a4;
        uint64_t v13 = v8 + 2;
        if (v8 + 2 >= v6) {
          uint64_t v13 = a3 - 1;
        }
        uint64_t v14 = v10;
        uint64_t v15 = 1;
        uint64_t v16 = 4;
        uint64_t v17 = 2;
        do
        {
          if (v16 >= v7) {
            uint64_t v18 = a2 - 1;
          }
          else {
            uint64_t v18 = v16;
          }
          unsigned int v19 = *(unsigned __int8 *)(result + v17 + v12);
          if (*(unsigned char *)(result + v17 + v12)) {
            BOOL v20 = v8 - 2 <= v13;
          }
          else {
            BOOL v20 = 0;
          }
          if (v20)
          {
            uint64_t v21 = v18 + v15;
            uint64_t v22 = v17 + 2;
            if (v17 + 2 >= v7) {
              uint64_t v22 = a2 - 1;
            }
            uint64_t v23 = v14;
            uint64_t v24 = v8 - 2;
            while (v17 - 2 > v22)
            {
LABEL_27:
              v23 += a4;
              if (v24++ == v11) {
                goto LABEL_31;
              }
            }
            uint64_t v25 = 0;
            while (v24 == v8 && v25 == 2 || *(unsigned __int8 *)(v23 + v25) <= v19)
            {
              if (v21 == ++v25) {
                goto LABEL_27;
              }
            }
            LOBYTE(v19) = 0;
          }
LABEL_31:
          *(unsigned char *)(a5 + v17 + v8 * a6) = v19;
          ++v17;
          ++v16;
          --v15;
          ++v14;
        }
        while (v16 != a2);
      }
      ++v8;
      ++v9;
      v10 += a4;
    }
    while (v9 != a3);
  }
  return result;
}

char *sub_1DD50CBB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((((result | a5) | a4) & 0xF) != 0
    || (unint64_t)a2 < 0x20
    || (a6 & 0xF) != 0)
  {
    return (char *)sub_1DD50CA5C(result, a2, a3, a4, a5, a6);
  }
  else
  {
    return sub_1DD50CBD8(result, a2, a3, a4, a5, a6);
  }
}

char *sub_1DD50CBD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a3 - 2;
  if (a3 >= 2) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = a3;
  }
  int v12 = -(int)a2;
  bzero((char *)&v52[1] - (v12 & 0xF) + 14, (v12 & 0xF) + 2);
  if (v10 <= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v10;
  }
  uint64_t result = (char *)memset((char *)&v52[1] + -(unint64_t)(29 - (v12 & 0xFu)) - (v12 & 0xF) + 13, 255, 30 - (v12 & 0xFu));
  if (v11 < v10)
  {
    unint64_t v15 = a4 >> 4;
    int8x16_t v16 = (int8x16_t)v52[0];
    int8x16_t v17 = (int8x16_t)v52[1];
    uint64_t v18 = 2;
    if (a2 < 2) {
      uint64_t v18 = a2;
    }
    unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v20 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v21 = a2 - 16;
    uint64_t v22 = a5 + a6 * v11;
    uint64_t v23 = a4 * v11 + 16;
    uint64_t v24 = a1 + v23 - 32 * v15;
    uint64_t v25 = a1 + v23;
    uint64_t v26 = a1 + v23 - 16 * v15;
    uint64_t v27 = a1 + a4 * v11 + 32 * v15;
    uint64_t result = (char *)(a4 * v11 + 16 * v15 + a1 + 16);
    do
    {
      if (v19 >= v20)
      {
        unint64_t v49 = a5 + v19 + v11 * a6;
      }
      else
      {
        uint64_t v28 = 0;
        uint8x16_t v29 = result;
        uint64_t v30 = v27;
        uint64_t v31 = v26;
        uint64_t v32 = v25;
        uint64_t v33 = v24;
        uint64_t v34 = v22;
        int8x16_t v35 = (int8x16_t)xmmword_1DD512C70;
        do
        {
          int8x16_t v36 = *(int8x16_t *)(v32 + v19 - 16);
          uint32x2_t v37 = (uint32x2_t)vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
          if (vpmax_u32(v37, v37).u32[0])
          {
            uint64_t v38 = v19 + v28;
            uint64_t v39 = v33 + v19;
            if (v11 > 2 || (int8x16_t v40 = 0uLL, v38 >= 1)) {
              int8x16_t v40 = *(int8x16_t *)(v39 - 32);
            }
            uint8x16_t v41 = (int8x16_t *)(v30 + v19);
            if (v38 < v21 || (int8x16_t v42 = 0uLL, v11 < v13 - 1)) {
              int8x16_t v42 = v41[1];
            }
            int8x16_t v43 = *(int8x16_t *)(v39 - 16);
            int8x16_t v44 = *(int8x16_t *)(v31 + v19 - 16);
            int8x16_t v45 = *(int8x16_t *)&v29[v19 - 16];
            int8x16_t v46 = *(int8x16_t *)&v29[v19];
            int8x16_t v47 = v41[-1];
            int8x16_t v48 = vandq_s8(vbicq_s8(v35, (int8x16_t)vcgtq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v40, v43, 0xEuLL), (uint8x16_t)vextq_s8(v40, v43, 0xFuLL)), vmaxq_u8((uint8x16_t)v43, (uint8x16_t)vextq_s8(v43, *(int8x16_t *)(v33 + v19), 1uLL))), vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v43, *(int8x16_t *)(v33 + v19), 2uLL), (uint8x16_t)vextq_s8(*(int8x16_t *)(v31 + v19 - 32), v44, 0xEuLL)), vmaxq_u8((uint8x16_t)vextq_s8(*(int8x16_t *)(v31 + v19 - 32), v44, 0xFuLL),
                                             (uint8x16_t)v44))),
                                       vmaxq_u8(vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v44, *(int8x16_t *)(v31 + v19), 1uLL), (uint8x16_t)vextq_s8(v44, *(int8x16_t *)(v31 + v19), 2uLL)), vmaxq_u8((uint8x16_t)vextq_s8(*(int8x16_t *)(v32 + v19 - 32), v36, 0xEuLL), (uint8x16_t)vextq_s8(*(int8x16_t *)(v32 + v19 - 32), v36, 0xFuLL))), vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v36, *(int8x16_t *)(v32 + v19), 1uLL), (uint8x16_t)vextq_s8(v36, *(int8x16_t *)(v32 + v19), 2uLL)), vmaxq_u8((uint8x16_t)vextq_s8(*(int8x16_t *)&v29[v19 - 32], v45, 0xEuLL), (uint8x16_t)vextq_s8(*(int8x16_t *)&v29[v19 - 32], v45, 0xFuLL))))), vmaxq_u8(vmaxq_u8(vmaxq_u8((uint8x16_t)v45, (uint8x16_t)vextq_s8(v45, v46, 1uLL)), vmaxq_u8((uint8x16_t)vextq_s8(v45, v46, 2uLL),
                                           (uint8x16_t)vextq_s8(v47, *v41, 0xEuLL))),
                                       vmaxq_u8(vmaxq_u8((uint8x16_t)vextq_s8(v47, *v41, 0xFuLL), *(uint8x16_t *)v41), vmaxq_u8((uint8x16_t)vextq_s8(*v41, v42, 1uLL), (uint8x16_t)vextq_s8(*v41, v42, 2uLL))))), (uint8x16_t)v36)), v36);
          }
          else
          {
            int8x16_t v48 = 0uLL;
          }
          *(int8x16_t *)(v34 + v19) = v48;
          v28 += 16;
          v34 += 16;
          v33 += 16;
          v32 += 16;
          v31 += 16;
          v30 += 16;
          v29 += 16;
          v35.i64[0] = -1;
          v35.i64[1] = -1;
        }
        while (v19 + v28 < v20);
        unint64_t v49 = v34 + v19;
      }
      int8x16_t v50 = vandq_s8(*(int8x16_t *)(v49 - 16), v17);
      ++v11;
      v22 += a6;
      v24 += a4;
      v25 += a4;
      *(int8x16_t *)(v49 - 32) = vandq_s8(*(int8x16_t *)(v49 - 32), v16);
      *(int8x16_t *)(v49 - 16) = v50;
      v26 += a4;
      v27 += a4;
      result += a4;
    }
    while (v11 != v13);
  }
  return result;
}

uint64_t sub_1DD50CF20(uint64_t result, float *a2)
{
  uint64_t v2 = *(float **)result;
  uint64_t v3 = *(void *)(result + 8) - *(void *)result;
  if (!v3)
  {
    float v13 = 0.0;
    if (!a2) {
      return result;
    }
    goto LABEL_12;
  }
  uint64_t v4 = v3 >> 2;
  if ((unint64_t)(v3 >> 2) <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v3 >> 2;
  }
  float v6 = 0.0;
  uint64_t v7 = v5;
  uint64_t v8 = *(float **)result;
  do
  {
    float v9 = *v8++;
    float v6 = v6 + v9;
    --v7;
  }
  while (v7);
  float v10 = v6 / (float)(unint64_t)v4;
  if (a2)
  {
    float v11 = 0.0;
    do
    {
      float v12 = *v2++;
      float v11 = v11 + (float)((float)(v10 - v12) * (float)(v10 - v12));
      --v5;
    }
    while (v5);
    float v13 = sqrtf(v11 / (float)(unint64_t)v4);
LABEL_12:
    *a2 = v13;
  }
  return result;
}

float sub_1DD50CF98(uint64_t *a1, uint64_t a2, __CFDictionary *a3)
{
  v225[0] = 1.0;
  uint64_t v5 = *a1;
  uint64_t v6 = (a1[1] - *a1) >> 4;
  unint64_t v7 = 0x86BCA1AF286BCA1BLL * v6;
  int v8 = 0;
  if (678152731 * (int)v6 < 1)
  {
    float v19 = NAN;
    int v184 = 2143289344;
    float v185 = 1.0;
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = (678152731 * v6);
    float v11 = (float *)(v5 + 168);
    float v12 = 1.0;
    float v13 = 0.0;
    uint64_t v14 = v7;
    do
    {
      if (*((unsigned char *)v11 - 95))
      {
        ++v8;
      }
      else
      {
        if (*v11 < v12) {
          float v12 = *v11;
        }
        float v13 = v13 + *v11;
        ++v9;
      }
      v11 += 76;
      --v14;
    }
    while (v14);
    float v15 = (float)v9;
    float v16 = v13 / (float)v9;
    int8x16_t v17 = (float *)(v5 + 168);
    float v18 = 0.0;
    do
    {
      if (!*((unsigned char *)v17 - 95)) {
        float v18 = v18 + (float)((float)(v16 - *v17) * (float)(v16 - *v17));
      }
      v17 += 76;
      --v10;
    }
    while (v10);
    int v184 = LODWORD(v16);
    float v185 = v12;
    float v19 = v18 / v15;
  }
  int v182 = v7;
  CMTime v224 = *(CMTime *)(v5 + 304 * v7 - 192);
  float v183 = sqrtf(v19);
  memset(&v223, 0, sizeof(v223));
  CMTime lhs = v224;
  CMTime rhs = *(CMTime *)(v5 + 112);
  CMTimeSubtract(&v223, &lhs, &rhs);
  CMTime time = v223;
  unint64_t v20 = 0;
  float Seconds = CMTimeGetSeconds(&time);
  float v181 = Seconds;
  long long __p = 0;
  int v218 = 0;
  int v219 = 0;
  int v214 = 0;
  int v215 = 0;
  float v22 = 0.0;
  int v216 = 0;
  float v23 = 0.0;
  float v24 = 0.0;
  int v211 = 0;
  int v212 = 0;
  float v25 = 0.0;
  float v26 = 0.0;
  int v213 = 0;
  float v188 = 0.0;
  float v27 = 0.0;
  uint64_t v28 = *a1;
  float v29 = 0.0;
  float v30 = 0.0;
  do
  {
    sub_1DD4EF1BC((double *)(v28 + 304 * v20), a2, (uint64_t)&valuePtr);
    float v31 = *(float *)&valuePtr;
    if (v20)
    {
      float v187 = v27;
      float v32 = v29;
      float v33 = v30;
      float v34 = v22 - *(float *)&valuePtr;
      int8x16_t v35 = v218;
      if (v218 >= v219)
      {
        int8x16_t v40 = (float *)__p;
        uint64_t v41 = ((char *)v218 - (unsigned char *)__p) >> 2;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62) {
          sub_1DD4BACA0();
        }
        uint64_t v43 = (char *)v219 - (unsigned char *)__p;
        if (((char *)v219 - (unsigned char *)__p) >> 1 > v42) {
          unint64_t v42 = v43 >> 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          int8x16_t v45 = (char *)sub_1DD4BB6B8((uint64_t)&v219, v44);
          int8x16_t v40 = (float *)__p;
          int8x16_t v35 = v218;
        }
        else
        {
          int8x16_t v45 = 0;
        }
        int8x16_t v46 = (float *)&v45[4 * v41];
        *int8x16_t v46 = v34;
        int8x16_t v36 = v46 + 1;
        while (v35 != v40)
        {
          int v47 = *((_DWORD *)v35-- - 1);
          *((_DWORD *)v46-- - 1) = v47;
        }
        long long __p = v46;
        int v218 = v36;
        int v219 = (float *)&v45[4 * v44];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *int v218 = v34;
        int8x16_t v36 = v35 + 1;
      }
      int v218 = v36;
      float v48 = v23 - *((float *)&valuePtr + 1);
      unint64_t v49 = v215;
      if (v215 >= v216)
      {
        uint8x16_t v51 = (float *)v214;
        uint64_t v52 = ((char *)v215 - (unsigned char *)v214) >> 2;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
          sub_1DD4BACA0();
        }
        uint64_t v54 = (char *)v216 - (unsigned char *)v214;
        if (((char *)v216 - (unsigned char *)v214) >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          uint8x16_t v56 = (char *)sub_1DD4BB6B8((uint64_t)&v216, v55);
          uint8x16_t v51 = (float *)v214;
          unint64_t v49 = v215;
        }
        else
        {
          uint8x16_t v56 = 0;
        }
        uint8x16_t v57 = (float *)&v56[4 * v52];
        *uint8x16_t v57 = v48;
        int8x16_t v50 = v57 + 1;
        float v30 = v33;
        while (v49 != v51)
        {
          int v58 = *((_DWORD *)v49-- - 1);
          *((_DWORD *)v57-- - 1) = v58;
        }
        int v214 = v57;
        int v215 = v50;
        int v216 = (float *)&v56[4 * v55];
        float v29 = v32;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *int v215 = v48;
        int8x16_t v50 = v49 + 1;
        float v30 = v33;
        float v29 = v32;
      }
      float v27 = v187;
      int v215 = v50;
      float v59 = v26 - v210;
      uint8x16_t v60 = v212;
      if (v212 >= v213)
      {
        uint8x16_t v63 = (float *)v211;
        uint64_t v64 = ((char *)v212 - (unsigned char *)v211) >> 2;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 62) {
          sub_1DD4BACA0();
        }
        uint64_t v66 = (char *)v213 - (unsigned char *)v211;
        if (((char *)v213 - (unsigned char *)v211) >> 1 > v65) {
          unint64_t v65 = v66 >> 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67)
        {
          uint8x16_t v68 = (char *)sub_1DD4BB6B8((uint64_t)&v213, v67);
          uint8x16_t v63 = (float *)v211;
          uint8x16_t v60 = v212;
        }
        else
        {
          uint8x16_t v68 = 0;
        }
        uint8x16_t v69 = (float *)&v68[4 * v64];
        float *v69 = v59;
        uint8x16_t v61 = v69 + 1;
        if (v60 == v63)
        {
          float v62 = v199;
        }
        else
        {
          float v62 = v199;
          do
          {
            int v70 = *((_DWORD *)v60-- - 1);
            *((_DWORD *)v69-- - 1) = v70;
          }
          while (v60 != v63);
        }
        int v211 = v69;
        int v212 = v61;
        int v213 = (float *)&v68[4 * v67];
        if (v63) {
          operator delete(v63);
        }
      }
      else
      {
        *int v212 = v59;
        uint8x16_t v61 = v60 + 1;
        float v62 = v199;
      }
      int v212 = v61;
      float v37 = *((float *)&valuePtr + 1);
      float v31 = *(float *)&valuePtr;
      float v71 = vabds_f32(v22, *(float *)&valuePtr);
      float v72 = v188;
      if (v188 < v71) {
        float v72 = v71;
      }
      float v188 = v72;
      float v73 = vabds_f32(v23, *((float *)&valuePtr + 1));
      if (v187 < v73) {
        float v27 = v73;
      }
      float v38 = v208;
      float v39 = v209;
      float v74 = vabds_f32(v24, v208);
      if (v29 < v74) {
        float v29 = v74;
      }
      float v75 = vabds_f32(v25, v209);
      if (v30 < v75) {
        float v30 = v75;
      }
      float v76 = v200;
      if (*(float *)&valuePtr >= v201) {
        float v77 = v201;
      }
      else {
        float v77 = *(float *)&valuePtr;
      }
      if (*((float *)&valuePtr + 1) < v62) {
        float v62 = *((float *)&valuePtr + 1);
      }
      if (v206 < v200) {
        float v76 = v206;
      }
      float v200 = v76;
      float v201 = v77;
      if (v207 >= v197) {
        float v78 = v197;
      }
      else {
        float v78 = v207;
      }
      float v79 = v198;
      if (v208 < v198) {
        float v79 = v208;
      }
      float v198 = v79;
      float v199 = v62;
      float v80 = v196;
      if (v209 < v196) {
        float v80 = v209;
      }
      float v196 = v80;
      float v197 = v78;
      float v26 = v210;
      if (v210 >= v195) {
        float v81 = v195;
      }
      else {
        float v81 = v210;
      }
      float v82 = *(float *)&v194;
      if (*(float *)&v194 < *(float *)&valuePtr) {
        float v82 = *(float *)&valuePtr;
      }
      *(float *)&id v194 = v82;
      float v83 = *((float *)&v194 + 1);
      if (*((float *)&v194 + 1) < *((float *)&valuePtr + 1)) {
        float v83 = *((float *)&valuePtr + 1);
      }
      *((float *)&v194 + 1) = v83;
      float v195 = v81;
      float v84 = v193;
      if (v193 < v206) {
        float v84 = v206;
      }
      float v85 = v192;
      if (v192 < v207) {
        float v85 = v207;
      }
      float v192 = v85;
      float v193 = v84;
      if (v190 >= v208) {
        float v86 = v190;
      }
      else {
        float v86 = v208;
      }
      float v87 = v191;
      if (v191 < v209) {
        float v87 = v209;
      }
      float v190 = v86;
      float v191 = v87;
      float v88 = v189;
      if (v189 < v210) {
        float v88 = v210;
      }
      float v189 = v88;
    }
    else
    {
      float v37 = *((float *)&valuePtr + 1);
      float v38 = v208;
      float v200 = v206;
      float v201 = *(float *)&valuePtr;
      float v198 = v208;
      float v199 = *((float *)&valuePtr + 1);
      float v39 = v209;
      float v26 = v210;
      float v195 = v210;
      float v196 = v209;
      id v194 = valuePtr;
      float v192 = v207;
      float v193 = v206;
      float v197 = v207;
      float v190 = v208;
      float v191 = v209;
      float v189 = v210;
    }
    uint64_t v28 = *a1;
    float v22 = v31;
    float v23 = v37;
    float v24 = v38;
    float v25 = v39;
  }
  while (0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4) - 1 > v20++);
  uint64_t v204 = 0;
  int v203 = 0;
  sub_1DD50CF20((uint64_t)&__p, (float *)&v204 + 1);
  int v91 = v90;
  sub_1DD50CF20((uint64_t)&v214, (float *)&v204);
  int v93 = v92;
  sub_1DD50CF20((uint64_t)&v211, (float *)&v203);
  int v95 = v94;
  uint8x16_t v96 = (int *)v211;
  if (v212 == v211)
  {
    float v98 = 0.0;
    int v109 = 0;
  }
  else
  {
    uint8x16_t v97 = (float *)((char *)v211 + 4);
    float v98 = *(float *)v211;
    if ((char *)v211 + 4 != (char *)v212)
    {
      float v99 = *(float *)v211;
      uint8x16_t v100 = (float *)((char *)v211 + 4);
      uint8x16_t v101 = (float *)v211;
      uint8x16_t v102 = (float *)((char *)v211 + 4);
      do
      {
        float v103 = *v102++;
        float v104 = v103;
        if (v103 < v99)
        {
          float v99 = v104;
          uint8x16_t v101 = v100;
        }
        uint8x16_t v100 = v102;
      }
      while (v102 != v212);
      float v105 = *v101;
      uint8x16_t v106 = (float *)((char *)v211 + 4);
      do
      {
        float v107 = *v106++;
        float v108 = v107;
        if (v98 < v107)
        {
          float v98 = v108;
          uint8x16_t v96 = (int *)v97;
        }
        uint8x16_t v97 = v106;
      }
      while (v106 != v212);
      float v98 = v105;
    }
    int v109 = *v96;
  }
  CFAllocatorRef v110 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a3)
  {
    CFMutableDictionaryRef Mutable = 0;
    uint8x16_t v112 = a3;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
    uint8x16_t v112 = Mutable;
  }
  *(float *)&id valuePtr = v201;
  CFNumberRef v113 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v113);
  CFDictionaryAddValue(v112, @"det_min", v113);
  *(float *)&id valuePtr = v199;
  CFNumberRef v114 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v114);
  CFDictionaryAddValue(v112, @"shear_min", v114);
  *(float *)&id valuePtr = v200;
  CFNumberRef v115 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v115);
  CFDictionaryAddValue(v112, @"key1_min", v115);
  *(float *)&id valuePtr = v197;
  CFNumberRef v116 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v116);
  CFDictionaryAddValue(v112, @"key2_min", v116);
  *(float *)&id valuePtr = v198;
  CFNumberRef v117 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v117);
  CFDictionaryAddValue(v112, @"translationX_min", v117);
  *(float *)&id valuePtr = v196;
  CFNumberRef v118 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v118);
  CFDictionaryAddValue(v112, @"translationY_min", v118);
  *(float *)&id valuePtr = v195;
  CFNumberRef v119 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v119);
  CFDictionaryAddValue(v112, @"rotation_min", v119);
  LODWORD(valuePtr) = v194;
  CFNumberRef v120 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v120);
  CFDictionaryAddValue(v112, @"det_max", v120);
  LODWORD(valuePtr) = HIDWORD(v194);
  CFNumberRef v121 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v121);
  CFDictionaryAddValue(v112, @"shear_max", v121);
  *(float *)&id valuePtr = v193;
  CFNumberRef v122 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v122);
  CFDictionaryAddValue(v112, @"key1_max", v122);
  *(float *)&id valuePtr = v192;
  CFNumberRef v123 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v123);
  CFDictionaryAddValue(v112, @"key2_max", v123);
  *(float *)&id valuePtr = v190;
  CFNumberRef v124 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v124);
  CFDictionaryAddValue(v112, @"translationX_max", v124);
  *(float *)&id valuePtr = v191;
  CFNumberRef v125 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v125);
  CFDictionaryAddValue(v112, @"translationY_max", v125);
  *(float *)&id valuePtr = v189;
  CFNumberRef v126 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v126);
  CFDictionaryAddValue(v112, @"rotation_max", v126);
  *(float *)&id valuePtr = v185;
  CFNumberRef v127 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v127);
  CFDictionaryAddValue(v112, @"confidence_min", v127);
  LODWORD(valuePtr) = v184;
  CFNumberRef v128 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v128);
  CFDictionaryAddValue(v112, @"confidence_mean", v128);
  *(float *)&id valuePtr = v183;
  CFNumberRef v129 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v129);
  CFDictionaryAddValue(v112, @"confidence_stdDev", v129);
  *(float *)&id valuePtr = v188;
  CFNumberRef v130 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v130);
  CFDictionaryAddValue(v112, @"deltaDet_max", v130);
  LODWORD(valuePtr) = v91;
  CFNumberRef v131 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v131);
  CFDictionaryAddValue(v112, @"deltaDet_mean", v131);
  LODWORD(valuePtr) = HIDWORD(v204);
  CFNumberRef v132 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v132);
  CFDictionaryAddValue(v112, @"deltaDet_stdDev", v132);
  *(float *)&id valuePtr = v27;
  CFNumberRef v133 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v133);
  CFDictionaryAddValue(v112, @"deltaShear_max", v133);
  LODWORD(valuePtr) = v93;
  CFNumberRef v134 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v134);
  CFDictionaryAddValue(v112, @"deltaShear_mean", v134);
  LODWORD(valuePtr) = v204;
  CFNumberRef v135 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v135);
  CFDictionaryAddValue(v112, @"deltaShear_stdDev", v135);
  LODWORD(valuePtr) = v95;
  CFNumberRef v136 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v136);
  CFDictionaryAddValue(v112, @"deltaRotation_mean", v136);
  LODWORD(valuePtr) = v203;
  CFNumberRef v137 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v137);
  CFDictionaryAddValue(v112, @"deltaRotation_stdDev", v137);
  *(float *)&id valuePtr = v98;
  CFNumberRef v138 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v138);
  CFDictionaryAddValue(v112, @"deltaRotation_min", v138);
  LODWORD(valuePtr) = v109;
  CFNumberRef v139 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v139);
  CFDictionaryAddValue(v112, @"deltaRotation_max", v139);
  *(float *)&id valuePtr = v29;
  CFNumberRef v140 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v140);
  CFDictionaryAddValue(v112, @"deltaTransX_max", v140);
  *(float *)&id valuePtr = v30;
  CFNumberRef v141 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v141);
  CFDictionaryAddValue(v112, @"deltaTransY_max", v141);
  *(float *)&id valuePtr = (float)v8;
  CFNumberRef v142 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v142);
  CFDictionaryAddValue(v112, @"interpCount", v142);
  *(float *)&id valuePtr = (float)v182;
  CFNumberRef v143 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v143);
  CFDictionaryAddValue(v112, @"numFrames", v143);
  *(float *)&id valuePtr = v181;
  CFNumberRef v144 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v144);
  CFDictionaryAddValue(v112, @"duration", v144);
  int v145 = CFDictionaryCreateMutable(0, 0, 0, 0);
  LODWORD(valuePtr) = -1082682570;
  CFNumberRef v146 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v146);
  CFDictionaryAddValue(v145, @"_intercept", v146);
  LODWORD(valuePtr) = -1067287335;
  CFNumberRef v147 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v147);
  CFDictionaryAddValue(v145, @"confidence_mean", v147);
  LODWORD(valuePtr) = -1075653319;
  CFNumberRef v148 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v148);
  CFDictionaryAddValue(v145, @"confidence_min", v148);
  LODWORD(valuePtr) = 1084166481;
  CFNumberRef v149 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v149);
  CFDictionaryAddValue(v145, @"confidence_stdDev", v149);
  LODWORD(valuePtr) = 1112189614;
  CFNumberRef v150 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v150);
  CFDictionaryAddValue(v145, @"deltaDet_mean", v150);
  LODWORD(valuePtr) = -1046656612;
  CFNumberRef v151 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v151);
  CFDictionaryAddValue(v145, @"deltaRotation_max", v151);
  LODWORD(valuePtr) = -1031636091;
  CFNumberRef v152 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v152);
  CFDictionaryAddValue(v145, @"deltaRotation_mean", v152);
  LODWORD(valuePtr) = 1101279657;
  CFNumberRef v153 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v153);
  CFDictionaryAddValue(v145, @"deltaRotation_min", v153);
  LODWORD(valuePtr) = 1119772248;
  CFNumberRef v154 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v154);
  CFDictionaryAddValue(v145, @"deltaRotation_stdDev", v154);
  LODWORD(valuePtr) = -1051649519;
  CFNumberRef v155 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v155);
  CFDictionaryAddValue(v145, @"deltaShear_max", v155);
  LODWORD(valuePtr) = 1135447685;
  CFNumberRef v156 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v156);
  CFDictionaryAddValue(v145, @"deltaShear_stdDev", v156);
  LODWORD(valuePtr) = -1058771072;
  CFNumberRef v157 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v157);
  CFDictionaryAddValue(v145, @"deltaTransX_max", v157);
  LODWORD(valuePtr) = -1045786170;
  CFNumberRef v158 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v158);
  CFDictionaryAddValue(v145, @"deltaTransY_max", v158);
  LODWORD(valuePtr) = 1082605271;
  CFNumberRef v159 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v159);
  CFDictionaryAddValue(v145, @"det_max", v159);
  LODWORD(valuePtr) = -1080542569;
  CFNumberRef v160 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v160);
  CFDictionaryAddValue(v145, @"det_min", v160);
  LODWORD(valuePtr) = -1084242549;
  CFNumberRef v161 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v161);
  CFDictionaryAddValue(v145, @"duration", v161);
  LODWORD(valuePtr) = 1051730553;
  CFNumberRef v162 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v162);
  CFDictionaryAddValue(v145, @"interpCount", v162);
  LODWORD(valuePtr) = -1076546773;
  CFNumberRef v163 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v163);
  CFDictionaryAddValue(v145, @"key1_max", v163);
  LODWORD(valuePtr) = 1086929716;
  CFNumberRef v164 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v164);
  CFDictionaryAddValue(v145, @"key1_min", v164);
  LODWORD(valuePtr) = 1090144503;
  CFNumberRef v165 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v165);
  CFDictionaryAddValue(v145, @"key2_max", v165);
  LODWORD(valuePtr) = 1074996114;
  CFNumberRef v166 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v166);
  CFDictionaryAddValue(v145, @"key2_min", v166);
  LODWORD(valuePtr) = 1022943098;
  CFNumberRef v167 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v167);
  CFDictionaryAddValue(v145, @"numFrames", v167);
  LODWORD(valuePtr) = 1086103107;
  CFNumberRef v168 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v168);
  CFDictionaryAddValue(v145, @"rotation_max", v168);
  LODWORD(valuePtr) = -1063704775;
  CFNumberRef v169 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v169);
  CFDictionaryAddValue(v145, @"rotation_min", v169);
  LODWORD(valuePtr) = 1074153369;
  CFNumberRef v170 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v170);
  CFDictionaryAddValue(v145, @"shear_max", v170);
  LODWORD(valuePtr) = -1048838389;
  CFNumberRef v171 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v171);
  CFDictionaryAddValue(v145, @"shear_min", v171);
  LODWORD(valuePtr) = 1067963415;
  CFNumberRef v172 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v172);
  CFDictionaryAddValue(v145, @"translationX_max", v172);
  LODWORD(valuePtr) = -1123026574;
  CFNumberRef v173 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v173);
  CFDictionaryAddValue(v145, @"translationX_min", v173);
  LODWORD(valuePtr) = 1085744035;
  CFNumberRef v174 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v174);
  CFDictionaryAddValue(v145, @"translationY_max", v174);
  LODWORD(valuePtr) = -1090249665;
  CFNumberRef v175 = CFNumberCreate(v110, kCFNumberFloatType, &valuePtr);
  CFAutorelease(v175);
  CFDictionaryAddValue(v145, @"translationY_min", v175);
  sub_1DD4E2FDC(&valuePtr, v145);
  *(float *)&int v202 = 0.0;
  if (sub_1DD4E3048(&valuePtr, v112, (float *)&v202))
  {
    *(float *)&int v202 = 1.0;
    float v176 = 1.0;
  }
  else
  {
    float v176 = *(float *)&v202;
  }
  v225[0] = 1.0 - v176;
  if (a3)
  {
    CFNumberRef v177 = CFNumberCreate(v110, kCFNumberFloat32Type, v225);
    CFTypeRef v178 = CFAutorelease(v177);
    CFDictionaryAddValue(a3, @"stabConfResult", v178);
  }
  CFRelease(v145);
  if (Mutable) {
    CFRelease(Mutable);
  }
  float v179 = v225[0];
  sub_1DD4E3044(&valuePtr);
  if (v211)
  {
    int v212 = (float *)v211;
    operator delete(v211);
  }
  if (v214)
  {
    int v215 = (float *)v214;
    operator delete(v214);
  }
  if (__p)
  {
    int v218 = (float *)__p;
    operator delete(__p);
  }
  return v179;
}

void sub_1DD50E444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a38) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD50E5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD50E7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD50E8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD50EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DD50F240(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t sub_1DD50F278(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_1DD50F29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1DD4D7B44(&dword_1DD4AC000, MEMORY[0x1E4F14500], a3, "Matrix purports to be symmetric, but rowCount != columnCount.\n", a5, a6, a7, a8, 0);
}

void sub_1DD50F2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1DD50F314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1DD50F350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1DD50F38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1DD50F404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1DD50F47C()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v0 = 136315394;
  uint64_t v1 = "Matrix";
  __int16 v2 = 2080;
  uint64_t v3 = "symbolicFactor";
  _os_log_error_impl(&dword_1DD4AC000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s does not match that used for symbolic factorization stored in %s.\n", (uint8_t *)&v0, 0x16u);
}

void sub_1DD50F518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1DD50F554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1DD50F5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1DD50F644()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  v0[0] = 136316162;
  sub_1DD4D7B98();
  sub_1DD4D7B7C();
  _os_log_error_impl(&dword_1DD4AC000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n", (uint8_t *)v0, 0x28u);
}

void sub_1DD50F6D8()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  v0[0] = 136316162;
  sub_1DD4D7B98();
  sub_1DD4D7B7C();
  _os_log_error_impl(&dword_1DD4AC000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n", (uint8_t *)v0, 0x28u);
}

uint64_t sub_1DD50F774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7240](alloc, str, attributes);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97A8](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D8](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9860](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1F40DA2E8](provider);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA310](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA868](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D8](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1F40DA8E8](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1F40DA8F0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DA908](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA920](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  return MEMORY[0x1F40DB210](dict, point);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB238]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1F40DB2F0](dict, rect);
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB4C8]((__n128)size, *(__n128 *)&size.height);
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  return MEMORY[0x1F40DB4E0](dict, size);
}

CMMediaType CMFormatDescriptionGetMediaType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1F40DBBD0](desc);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x1F40DBDC8](sbuf);
}

OSStatus CMSampleBufferGetSampleTimingInfo(CMSampleBufferRef sbuf, CMItemIndex sampleIndex, CMSampleTimingInfo *timingInfoOut)
{
  return MEMORY[0x1F40DBE18](sbuf, sampleIndex, timingInfoOut);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1F40DC088](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1F40DC0C8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1F40DC0E0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x1F40DC100](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1F40DC108](retstr, value, *(void *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1F40DC110](retstr, dictionaryRepresentation);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x1F40DC1D8](retstr, start, duration);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1F40DC1F0](retstr, lhs, rhs);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return (CMVideoDimensions)MEMORY[0x1F40DC338](videoDesc);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1F40DF378](descriptor, matrix, size);
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF418](name, size);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1F40DF790](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1F40DF7E8](line, context);
  result.size.double height = v5;
  result.size.unint64_t width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1F40DFB58](buffer, key, attachmentMode);
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
}

void CVBufferRemoveAttachment(CVBufferRef buffer, CFStringRef key)
{
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
}

CGRect CVImageBufferGetCleanRect(CVImageBufferRef imageBuffer)
{
  MEMORY[0x1F40DFC20](imageBuffer);
  result.size.double height = v4;
  result.size.unint64_t width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

CGSize CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer)
{
  MEMORY[0x1F40DFC38](imageBuffer);
  result.double height = v2;
  result.unint64_t width = v1;
  return result;
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1F40DFC78](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1F40DFC80](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1F40DFC98](image);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFCE0](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40DFD30](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD48](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD68](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD70](pixelBuffer, planeIndex);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD98](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFDA0](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFDB0](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFDC8](allocator, pixelBufferPool, pixelBufferOut);
}

CFDictionaryRef CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef pool)
{
  return (CFDictionaryRef)MEMORY[0x1F40DFDF0](pool);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DFE40](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1F40EDE00]();
}

void NSLog(NSString *format, ...)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _SparseDestroyOpaqueNumeric_Double(SparseOpaqueFactorization_Double *toFree)
{
}

void _SparseDestroyOpaqueSymbolic(SparseOpaqueSymbolicFactorization *toFree)
{
}

SparseSymbolicFactorOptions *__cdecl _SparseGetOptionsFromSymbolicFactor(SparseSymbolicFactorOptions *__return_ptr retstr, SparseOpaqueSymbolicFactorization *factor)
{
  return (SparseSymbolicFactorOptions *)MEMORY[0x1F40D14B0](retstr, factor);
}

SparseOpaqueFactorization_Double *__cdecl _SparseNumericFactorQR_Double(SparseOpaqueFactorization_Double *__return_ptr retstr, SparseOpaqueSymbolicFactorization *symbolicFactor, const SparseMatrix_Double *Matrix, const SparseNumericFactorOptions *options, void *factorStorage, void *workspace)
{
  return (SparseOpaqueFactorization_Double *)MEMORY[0x1F40D14B8](retstr, symbolicFactor, Matrix, options, factorStorage, workspace);
}

SparseOpaqueFactorization_Double *__cdecl _SparseNumericFactorSymmetric_Double(SparseOpaqueFactorization_Double *__return_ptr retstr, SparseOpaqueSymbolicFactorization *symbolicFactor, const SparseMatrix_Double *Matrix, const SparseNumericFactorOptions *options, void *factorStorage, void *workspace)
{
  return (SparseOpaqueFactorization_Double *)MEMORY[0x1F40D14C0](retstr, symbolicFactor, Matrix, options, factorStorage, workspace);
}

void _SparseSolveOpaque_Double(const SparseOpaqueFactorization_Double *Factored, const DenseMatrix_Double *RHS, const DenseMatrix_Double *Soln, void *workspace)
{
}

SparseOpaqueSymbolicFactorization *__cdecl _SparseSymbolicFactorSymmetric(SparseOpaqueSymbolicFactorization *__return_ptr retstr, SparseFactorization_t factorType, const SparseMatrixStructure *Matrix, const SparseSymbolicFactorOptions *options)
{
  return (SparseOpaqueSymbolicFactorization *)MEMORY[0x1F40D14D0](retstr, factorType, Matrix, options);
}

void _SparseTrap(void)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C0](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1F417EC38]();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x1F417EC40]();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1F417EC58]();
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>()
{
  return MEMORY[0x1F417EC80]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

float __exp10f(float a1)
{
  MEMORY[0x1F40C9B98](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosid val = v2;
  result.__sinid val = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

float acosf(float a1)
{
  MEMORY[0x1F40CA340](a1);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

clock_t clock(void)
{
  return MEMORY[0x1F40CB3B8]();
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int dgeev_(char *__jobvl, char *__jobvr, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__wr, __CLPK_doublereal *__wi, __CLPK_doublereal *__vl, __CLPK_integer *__ldvl, __CLPK_doublereal *__vr, __CLPK_integer *__ldvr, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D16D0](__jobvl, __jobvr, __n, __a, __lda, __wr, __wi, __vl);
}

int dgerqf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D1700](__m, __n, __a, __lda, __tau, __work, __lwork, __info);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

int dorgrq_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D1770](__m, __n, __k, __a, __lda, __tau, __work, __lwork);
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

void perror(const char *a1)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_attr_set_qos_class_np(pthread_attr_t *__attr, qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1F40CD938](__attr, *(void *)&__qos_class, *(void *)&__relative_priority);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_detach(pthread_t a1)
{
  return MEMORY[0x1F40CD9D8](a1);
}

void pthread_exit(void *a1)
{
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

int sgesdd_(char *__jobz, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__s, __CLPK_real *__u, __CLPK_integer *__ldu, __CLPK_real *__vt, __CLPK_integer *__ldvt, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D17E8](__jobz, __m, __n, __a, __lda, __s, __u, __ldu);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

sparse_status sparse_commit(void *A)
{
  return MEMORY[0x1F40D1820](A);
}

sparse_status sparse_extract_sparse_row_double(sparse_matrix_double A, sparse_index row, sparse_index column_start, sparse_index *column_end, sparse_dimension nz, double *val, sparse_index *jndx)
{
  return MEMORY[0x1F40D1830](A, row, column_start, column_end, nz, val, jndx);
}

uint64_t sparse_get_matrix_nonzero_count(void *A)
{
  return MEMORY[0x1F40D1840](A);
}

uint64_t sparse_get_matrix_nonzero_count_for_column(void *A, sparse_index j)
{
  return MEMORY[0x1F40D1848](A, j);
}

sparse_dimension sparse_get_matrix_number_of_columns(void *A)
{
  return MEMORY[0x1F40D1858](A);
}

sparse_dimension sparse_get_matrix_number_of_rows(void *A)
{
  return MEMORY[0x1F40D1860](A);
}

sparse_status sparse_insert_entry_double(sparse_matrix_double A, double val, sparse_index i, sparse_index j)
{
  return MEMORY[0x1F40D1888](A, i, j, val);
}

sparse_matrix_double sparse_matrix_create_double(sparse_dimension M, sparse_dimension N)
{
  return (sparse_matrix_double)MEMORY[0x1F40D18A8](M, N);
}

sparse_status sparse_matrix_destroy(void *A)
{
  return MEMORY[0x1F40D18B8](A);
}

sparse_status sparse_matrix_vector_product_dense_double(CBLAS_TRANSPOSE transa, double alpha, sparse_matrix_double A, const double *x, sparse_stride incx, double *y, sparse_stride incy)
{
  return MEMORY[0x1F40D18C8](*(void *)&transa, A, x, incx, y, incy, alpha);
}

sparse_status sparse_set_matrix_property(void *A, sparse_matrix_property pname)
{
  return MEMORY[0x1F40D18E0](A, *(void *)&pname);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

float tanhf(float a1)
{
  MEMORY[0x1F40CE438](a1);
  return result;
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void vDSP_conv(const float *__A, vDSP_Stride __IA, const float *__F, vDSP_Stride __IF, float *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
}

vImage_Error vImageBoxConvolve_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, uint32_t kernel_height, uint32_t kernel_width, Pixel_8 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2268](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, *(void *)&kernel_height, *(void *)&kernel_width, backgroundColor);
}

vImage_Error vImageConvolve_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const int16_t *kernel, uint32_t kernel_height, uint32_t kernel_width, int32_t divisor, Pixel_8 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2848](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, *(void *)&kernel_height, *(void *)&kernel_width);
}

int zgetrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D3010](__m, __n, __a, __lda, __ipiv, __info);
}

int zgetri_(__CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_doublecomplex *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D3018](__n, __a, __lda, __ipiv, __work, __lwork, __info);
}