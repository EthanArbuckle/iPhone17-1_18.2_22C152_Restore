void sub_213FD1D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void);
  v6 = va_arg(va1, void);
  va_copy(va2, va1);
  v7 = va_arg(va2, void);
  v9 = va_arg(va2, void);
  FileSpec::~FileSpec((FileSpec *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  _Unwind_Resume(a1);
}

void ListDFile::deleteFileAndCleanUp(ListDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ListDFile::verifyHaveOpenedAllSubFiles(ListDFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = *((unsigned int *)this + 22);
  if (v10)
  {
    uint64_t v11 = 0;
    for (unint64_t i = 0; i < v10; ++i)
    {
      uint64_t v13 = *((void *)this + 10) + v11;
      int v14 = *(_DWORD *)(v13 + 8);
      v15 = *(const char **)v13;
      if (v14) {
        v16 = v15;
      }
      else {
        v16 = (const char *)&unk_2140A6F24;
      }
      if (strcmp(v16, "*")
        && *(_DWORD *)(*((void *)this + 12) + v11 + 8) >= 2u
        && !*(unsigned char *)(*((void *)this + 14) + i))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 495, (uint64_t)"dfutil/listdf", 8, (uint64_t)"%.500s %.500s", a7, a8, (char)v16);
        unint64_t v10 = *((unsigned int *)this + 22);
      }
      v11 += 16;
    }
  }
  uint64_t v17 = *((void *)this + 16);
  if (v17)
  {
    RealDFile::verifyHaveOpenedAllSubFiles(v17, (uint64_t)a2, (void *)this + 17, a4, a5, a6, a7, a8);
  }
}

void ListDFile::fillSubFileSizeInfo(ListDFile *this)
{
  unint64_t v2 = *((unsigned int *)this + 22);
  if (v2)
  {
    uint64_t v3 = 0;
    for (unint64_t i = 0; i < v2; ++i)
    {
      v5 = (const DgnString *)(*((void *)this + 10) + v3);
      if (*((_DWORD *)v5 + 2)) {
        v6 = *(const char **)v5;
      }
      else {
        v6 = (const char *)&unk_2140A6F24;
      }
      if (strcmp(v6, "*") && *(_DWORD *)(*((void *)this + 12) + v3 + 8) >= 2u)
      {
        uint64_t v7 = (*(uint64_t (**)(ListDFile *, const char *))(*(void *)this + 48))(this, v6);
        DFileProgressInfo::add(*((DFileProgressInfo **)this + 1), v5, v7);
        unint64_t v2 = *((unsigned int *)this + 22);
      }
      v3 += 16;
    }
  }
  uint64_t v8 = *((void *)this + 16);
  if (v8)
  {
    RealDFile::fillSubFileSizeInfo(v8, (void *)this + 17);
  }
}

uint64_t ListDFile::attachProgressInfo(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t result = *(void *)(a1 + 128);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  return result;
}

uint64_t TEnvManager::TEnvManager(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C4DFC18;
  *(void *)(a1 + 8) = a3;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), &byte_2140B33BB);
  *(void *)a1 = &unk_26C4DF798;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  long long v5 = *a2;
  *(_OWORD *)(a1 + 88) = a2[1];
  *(_OWORD *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

void TEnvManager::TEnvManager(TEnvManager *this, char *__s, uint64_t a3)
{
  getFilePath(__s, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  *(void *)this = &unk_26C4DFC18;
  *((void *)this + 1) = a3;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 2, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26C4DF798;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 6, __s);
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 9) = 1;
}

void sub_213FD2208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)uint64_t v15 = v17;
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *TEnvManager::open(unsigned char *this)
{
  if (!this[40])
  {
    uint64_t v1 = (uint64_t)this;
    unint64_t v2 = (FileSpec *)(this + 48);
    int v3 = (char)this[71];
    v4 = this + 48;
    if (v3 < 0) {
      v4 = *(const char **)v2;
    }
    long long v5 = fopen(v4, "rb");
    if (v5)
    {
      fclose(v5);
      if (*(char *)(v1 + 71) < 0) {
        unint64_t v2 = *(FileSpec **)v2;
      }
      this = (unsigned char *)SDEnvHolder_NewFromFile(v2, 1uLL);
    }
    else
    {
      if (*(unsigned char *)(v1 + 8))
      {
        if (*(char *)(v1 + 71) < 0) {
          unint64_t v2 = *(FileSpec **)v2;
        }
        tknPrintf("Error: %s does not exist.\n", v6, v7, v8, v9, v2);
        std::string::basic_string[abi:ne180100]<0>(v16, &byte_2140B33BB);
        *(void *)std::string __p = byte_26C4DF190;
        if (SHIBYTE(v17) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v16;
          uint64_t v19 = v17;
        }
        *(void *)std::string __p = &unk_26C4DFC90;
        if (v19 >= 0) {
          v12 = &__p[8];
        }
        else {
          v12 = *(const char **)&__p[8];
        }
        conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/envmgr.cpp", 63, v10, v11);
        *(void *)std::string __p = byte_26C4DF190;
        if (SHIBYTE(v19) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v17) < 0) {
          operator delete(v16[0]);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        void *exception = byte_26C4DF190;
        int v14 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v15 = *(_OWORD *)__p;
          exception[3] = *(void *)&__p[16];
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        }
        void *exception = &unk_26C4DFC90;
      }
      this = (unsigned char *)SDEnvHolder_New();
    }
    *(void *)(v1 + 80) = this;
    *(unsigned char *)(v1 + 40) = 1;
  }
  return this;
}

void sub_213FD245C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TIOException::~TIOException(void **this)
{
  *this = byte_26C4DF190;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = byte_26C4DF190;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x216698730);
}

void TEnvManager::close(TEnvManager *this)
{
  if (*((unsigned char *)this + 40))
  {
    char v2 = *((unsigned char *)this + 71);
    if (v2 < 0)
    {
      if (!*((void *)this + 7)) {
        return;
      }
    }
    else if (!*((unsigned char *)this + 71))
    {
      return;
    }
    unint64_t v3 = *((void *)this + 10);
    if (*((unsigned char *)this + 8))
    {
      SDEnvHolder_Delete(v3);
    }
    else
    {
      v4 = (FileSpec **)((char *)this + 48);
      long long v5 = (TEnvManager *)((char *)this + 48);
      if (v2 < 0) {
        long long v5 = *v4;
      }
      if (SDEnvHolder_Save(v3, v5, 1u) != 1)
      {
        if (*((char *)this + 71) < 0) {
          v4 = (FileSpec **)*v4;
        }
        tknPrintf("Error: couldn't write to %s\n", v6, v7, v8, v9, v4);
        std::string::basic_string[abi:ne180100]<0>(v16, &byte_2140B33BB);
        *(void *)std::string __p = byte_26C4DF190;
        if (SHIBYTE(v17) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v16;
          uint64_t v19 = v17;
        }
        *(void *)std::string __p = &unk_26C4DFC90;
        if (v19 >= 0) {
          v12 = &__p[8];
        }
        else {
          v12 = *(const char **)&__p[8];
        }
        conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/envmgr.cpp", 100, v10, v11);
        *(void *)std::string __p = byte_26C4DF190;
        if (SHIBYTE(v19) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v17) < 0) {
          operator delete(v16[0]);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        void *exception = byte_26C4DF190;
        int v14 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v15 = *(_OWORD *)__p;
          exception[3] = *(void *)&__p[16];
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        }
        void *exception = &unk_26C4DFC90;
      }
    }
    *((unsigned char *)this + 40) = 0;
  }
}

void sub_213FD272C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TEnvManager::getVar(TEnvManager *this, EnvMgr *a2, char *a3, unsigned int a4)
{
  if (((*(uint64_t (**)(TEnvManager *))(*(void *)this + 32))(this) & 1) == 0) {
    (*(void (**)(TEnvManager *))(*(void *)this + 16))(this);
  }
  return SDEnv_GetData((unint64_t *)this + 9, a2, a3, a4);
}

void TEnvManager::setVar(TEnvManager *this, EnvMgr *a2, const char *a3, uint64_t a4)
{
  if (((*(uint64_t (**)(TEnvManager *))(*(void *)this + 32))(this) & 1) == 0) {
    (*(void (**)(TEnvManager *))(*(void *)this + 16))(this);
  }
  uint64_t v8 = (unint64_t *)((char *)this + 72);
  int Data = SDEnv_GetData(v8, a2, 0, 0);
  if (a4 || Data)
  {
    SDEnv_SetData(v8, a2, (const unsigned __int8 *)a3, a4);
  }
}

uint64_t TEnvManager::isOpen(TEnvManager *this)
{
  return *((unsigned __int8 *)this + 40);
}

void MrecInitModule_fwdbwd_fst(void)
{
  if (!gParDebugFwdBwd)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFwdBwd", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugFwdBwd = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFwdBwd);
  }
  if (!gParFwdBwdUseGPU)
  {
    char v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "FwdBwdUseGPU", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    *unint64_t v3 = &unk_26C4E0858;
    gParFwdBwdUseGPU = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseGPU);
  }
  if (!gParFwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "FwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    void *v5 = &unk_26C4E0858;
    gParFwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs);
  }
  if (!gParFwdBwdUseCPUGetNumOutPorts)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "FwdBwdUseCPUGetNumOutPorts", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    *uint64_t v7 = &unk_26C4E0858;
    gParFwdBwdUseCPUGetNumOutPorts = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUGetNumOutPorts);
  }
  if (!gParFwdBwdUseCPUCumulativeSums)
  {
    uint64_t v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "FwdBwdUseCPUCumulativeSums", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    *uint64_t v9 = &unk_26C4E0858;
    gParFwdBwdUseCPUCumulativeSums = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUCumulativeSums);
  }
  if (!gParFwdBwdUseCPUInitCandidateStates)
  {
    uint64_t v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "FwdBwdUseCPUInitCandidateStates", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    *uint64_t v11 = &unk_26C4E0858;
    gParFwdBwdUseCPUInitCandidateStates = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUInitCandidateStates);
  }
  if (!gParFwdBwdUseCPUMakeBackwardDecision)
  {
    v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "FwdBwdUseCPUMakeBackwardDecision", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    *uint64_t v13 = &unk_26C4E0858;
    gParFwdBwdUseCPUMakeBackwardDecision = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUMakeBackwardDecision);
  }
  if (!gParFwdBwdUseCPUGetBlockSizes)
  {
    int v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "FwdBwdUseCPUGetBlockSizes", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    void *v15 = &unk_26C4E0858;
    gParFwdBwdUseCPUGetBlockSizes = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUGetBlockSizes);
  }
  if (!gParFwdBwdUseCPUInitCandidateBlocks)
  {
    v16 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v16, "FwdBwdUseCPUInitCandidateBlocks", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    *uint64_t v17 = &unk_26C4E0858;
    gParFwdBwdUseCPUInitCandidateBlocks = (uint64_t)v17;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUInitCandidateBlocks);
  }
  if (!gParFwdBwdUseCPUCopyWithCutoff)
  {
    v18 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v18, "FwdBwdUseCPUCopyWithCutoff", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    *uint64_t v19 = &unk_26C4E0858;
    gParFwdBwdUseCPUCopyWithCutoff = (uint64_t)v19;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUCopyWithCutoff);
  }
  if (!gParFwdBwdUseCPUSortCandidatesByState)
  {
    v20 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v20, "FwdBwdUseCPUSortCandidatesByState", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    void *v21 = &unk_26C4E0858;
    gParFwdBwdUseCPUSortCandidatesByState = (uint64_t)v21;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUSortCandidatesByState);
  }
  if (!gParFwdBwdUseCPUDoStep)
  {
    v22 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v22, "FwdBwdUseCPUDoStep", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    void *v23 = &unk_26C4E0858;
    gParFwdBwdUseCPUDoStep = (uint64_t)v23;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUDoStep);
  }
  if (!gParFwdBwdUseCPUSortCandidatesByScore)
  {
    v24 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v24, "FwdBwdUseCPUSortCandidatesByScore", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    void *v25 = &unk_26C4E0858;
    gParFwdBwdUseCPUSortCandidatesByScore = (uint64_t)v25;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUSortCandidatesByScore);
  }
  if (!gParFwdBwdUseCPUUpdateBackwardLinks)
  {
    int v26 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v26, "FwdBwdUseCPUUpdateBackwardLinks", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    void *v27 = &unk_26C4E0858;
    gParFwdBwdUseCPUUpdateBackwardLinks = (uint64_t)v27;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParFwdBwdUseCPUUpdateBackwardLinks);
  }
  if (!gParDebugFwdBwdActivePelSelection)
  {
    v28 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v28, "DebugFwdBwdActivePelSelection", (const char *)&unk_2140A6FE0, (const char *)&unk_2140A6FE0, 0, 0, 0);
    void *v29 = &unk_26C4E0858;
    gParDebugFwdBwdActivePelSelection = (uint64_t)v29;
    v30 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v30, (GlobalParam **)&gParDebugFwdBwdActivePelSelection);
  }
}

void FwdBwd::FwdBwd(FwdBwd *this, const PicMgr *a2)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E4908;
  *(_DWORD *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(void *)(v5 + 152) = 0;
  *(_DWORD *)(v5 + 160) = -1;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(void *)(v5 + 200) = 0;
  *(void *)(v5 + 208) = a2;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  if (*(unsigned char *)(gParFwdBwdUseGPU + 41)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fwdbwd.cpp", 477, (uint64_t)"fst/fwdbwd", 1, (uint64_t)"%s", v3, v4, (char)&unk_2140A6FE0);
  }
}

void sub_213FD31C0(_Unwind_Exception *a1)
{
  uint64_t v11 = v8;
  DgnIArray<Utterance *>::~DgnIArray(v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v10);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v9);
  DgnIArray<Utterance *>::~DgnIArray(v6);
  DgnIArray<Utterance *>::~DgnIArray(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v7);
  DgnArray<FwdBwdColumn>::releaseAll(v3);
  DgnIArray<Utterance *>::~DgnIArray(v2);
  SearchItf::~SearchItf(v1);
  _Unwind_Resume(a1);
}

void FwdBwd::~FwdBwd(FwdBwdGPUData **this)
{
  *this = (FwdBwdGPUData *)&unk_26C4E4908;
  DgnDelete<FwdBwdGPUData>(this[23]);
  this[23] = 0;
  this[26] = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 37));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 35));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 33));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 31));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 29));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 27));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 24));
  DgnArray<FwdBwdColumn>::releaseAll((uint64_t)(this + 21));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 18));

  SearchItf::~SearchItf((SearchItf *)this);
}

{
  uint64_t vars8;

  FwdBwd::~FwdBwd(this);

  JUMPOUT(0x216698730);
}

FwdBwdGPUData *DgnDelete<FwdBwdGPUData>(FwdBwdGPUData *result)
{
  if (result)
  {
    FwdBwdGPUData::~FwdBwdGPUData(result);
    return (FwdBwdGPUData *)MemChunkFree(v1, 0);
  }
  return result;
}

double FwdBwd::reset(FwdBwd *this)
{
  uint64_t v2 = *((void *)this + 23);
  if (v2)
  {
    int v6 = *(_DWORD *)(*((void *)this + 5) + 144);
    int v3 = *((_DWORD *)*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v2, &v6) + 4);
  }
  else
  {
    int v3 = *(_DWORD *)(*((void *)this + 5) + 144);
  }
  uint64_t v4 = *((void *)this + 29);
  *(_DWORD *)uint64_t v4 = v3;
  *(void *)(v4 + 8) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(v4 + 16) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 34) = 1;
  *((_DWORD *)this + 38) = 0;
  return result;
}

uint64_t FwdBwd::getNumOutPortsItf(uint64_t this)
{
  if (*(void *)(this + 184)) {
    return FwdBwd::getNumOutPortsGPU(this);
  }
  else {
    return FwdBwd::getNumOutPortsCPU(this);
  }
}

uint64_t FwdBwd::getNumOutPortsCPU(uint64_t this)
{
  if (*(_DWORD *)(this + 136))
  {
    unint64_t v1 = 0;
    uint64_t v2 = *(void *)(this + 232);
    uint64_t v3 = *(void *)(this + 40);
    uint64_t v4 = *(void *)(this + 216);
    do
    {
      unsigned int v5 = *(_DWORD *)(v2 + 40 * v1);
      if (*(_DWORD *)(v3 + 160) == v5)
      {
        int v6 = 0;
      }
      else
      {
        int v7 = *(_DWORD *)(v3 + 140);
        int v6 = v7 > (int)v5;
        uint64_t v8 = *(void *)(v3 + 152);
        do
        {
          int v9 = *(_DWORD *)(v8 + 4 * v5);
          unsigned int v10 = v5 + 1;
          v5 += 2;
          if (v7 > *(_DWORD *)(v8 + 4 * v10)) {
            ++v6;
          }
        }
        while ((v9 & 0x80000000) == 0);
      }
      *(_DWORD *)(v4 + 4 * v1++) = v6;
    }
    while (v1 < *(unsigned int *)(this + 136));
  }
  return this;
}

uint64_t FwdBwd::getNumOutPortsGPU(uint64_t this)
{
  if (*(unsigned char *)(gParFwdBwdUseCPUGetNumOutPorts + 41) && *(_DWORD *)(this + 136))
  {
    unint64_t v1 = 0;
    uint64_t v2 = *(unsigned int **)(this + 232);
    uint64_t v3 = *(void *)(this + 184);
    uint64_t v4 = *(void *)(this + 216);
    do
    {
      unsigned int v6 = *v2;
      v2 += 10;
      uint64_t v5 = v6;
      if (v3)
      {
        if (*(_DWORD *)(v3 + 120) <= v5) {
          goto LABEL_8;
        }
      }
      else if (*(_DWORD *)(*(void *)(this + 40) + 160) == v5)
      {
LABEL_8:
        int v7 = 0;
        goto LABEL_9;
      }
      int v7 = *(_DWORD *)(*(void *)(v3 + 160) + 4 * v5);
LABEL_9:
      *(_DWORD *)(v4 + 4 * v1++) = v7;
    }
    while (v1 < *(unsigned int *)(this + 136));
  }
  return this;
}

void *FwdBwd::getNumOutPortsFromFwdBwdProbsGPU(void *this, unsigned int a2)
{
  if (*(unsigned char *)(gParFwdBwdUseCPUGetNumOutPortsFromFwdBwdProbs + 41))
  {
    uint64_t v2 = this[21];
    uint64_t v3 = v2 + 40 * a2;
    int v5 = *(_DWORD *)(v3 + 16);
    uint64_t v4 = (unsigned int *)(v3 + 16);
    if (v5)
    {
      unint64_t v6 = 0;
      int v7 = *(unsigned int **)(v2 + 40 * a2 + 8);
      uint64_t v8 = this[23];
      uint64_t v9 = this[27];
      do
      {
        unsigned int v11 = *v7;
        v7 += 14;
        uint64_t v10 = v11;
        if (v8)
        {
          if (*(_DWORD *)(v8 + 120) <= v10) {
            goto LABEL_8;
          }
        }
        else if (*(_DWORD *)(this[5] + 160) == v10)
        {
LABEL_8:
          int v12 = 0;
          goto LABEL_9;
        }
        int v12 = *(_DWORD *)(*(void *)(v8 + 160) + 4 * v10);
LABEL_9:
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *v4);
    }
  }
  return this;
}

uint64_t FwdBwd::cumulativeSumsItf(FwdBwd *this, int *a2, int a3)
{
  if (*((void *)this + 23))
  {
    uint64_t result = 0;
    if (a3 >= 1 && *(unsigned char *)(gParFwdBwdUseCPUCumulativeSums + 41))
    {
      LODWORD(result) = 0;
      uint64_t v4 = a3;
      do
      {
        int v5 = *a2;
        *a2++ = result;
        uint64_t result = (v5 + result);
        --v4;
      }
      while (v4);
    }
  }
  else if (a3 < 1)
  {
    return 0;
  }
  else
  {
    LODWORD(result) = 0;
    uint64_t v6 = a3;
    do
    {
      int v7 = *a2;
      *a2++ = result;
      uint64_t result = (v7 + result);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t FwdBwd::initCandidateStatesItf(uint64_t this)
{
  if (*(void *)(this + 184)) {
    return FwdBwd::initCandidateStatesGPU(this);
  }
  else {
    return FwdBwd::initCandidateStatesCPU(this);
  }
}

uint64_t FwdBwd::initCandidateStatesCPU(uint64_t this)
{
  unint64_t v1 = *(unsigned int *)(this + 136);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(this + 40);
    do
    {
      uint64_t v4 = *(void *)(this + 232) + 40 * v2;
      unsigned int v5 = *(_DWORD *)v4;
      if (*(_DWORD *)(v3 + 160) != *(_DWORD *)v4)
      {
        uint64_t v6 = *(unsigned int *)(*(void *)(this + 216) + 4 * v2);
        if (*(_DWORD *)(v3 + 140) > (signed int)v5)
        {
          uint64_t v7 = *(void *)(this + 248) + 40 * v6;
          long long v8 = *(_OWORD *)v4;
          long long v9 = *(_OWORD *)(v4 + 16);
          *(void *)(v7 + 32) = *(void *)(v4 + 32);
          *(_OWORD *)uint64_t v7 = v8;
          *(_OWORD *)(v7 + 16) = v9;
          uint64_t v10 = *(void *)(this + 248) + 40 * v6;
          *(_DWORD *)(v10 + 24) = v2;
          *(_DWORD *)(v10 + 28) = 1;
          LODWORD(v6) = v6 + 1;
          uint64_t v3 = *(void *)(this + 40);
        }
        uint64_t v11 = *(void *)(v3 + 152);
        int v12 = *(_DWORD *)(v3 + 140);
        do
        {
          unsigned int v13 = *(_DWORD *)(v11 + 4 * v5);
          int v14 = *(_DWORD *)(v11 + 4 * (v5 + 1));
          if (v12 > v14)
          {
            uint64_t v15 = *(void *)(this + 248) + 40 * v6;
            *(_DWORD *)uint64_t v15 = v14;
            uint64_t v16 = *(void *)(this + 232) + 40 * v2;
            double v17 = (double)((v13 >> 20) & 0x3FF);
            *(double *)(v15 + 8) = *(double *)(v16 + 8) + v17;
            *(_DWORD *)(v15 + 16) = *(_DWORD *)(v16 + 16);
            *(_DWORD *)(v15 + 20) = v13 & 0xFFFFF;
            *(_DWORD *)(v15 + 24) = v2;
            *(_DWORD *)(v15 + 28) = 1;
            *(double *)(v15 + 32) = v17;
            LODWORD(v6) = v6 + 1;
          }
          v5 += 2;
        }
        while ((v13 & 0x80000000) == 0);
        unint64_t v1 = *(unsigned int *)(this + 136);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return this;
}

uint64_t FwdBwd::initCandidateStatesGPU(uint64_t this)
{
  if (*(unsigned char *)(gParFwdBwdUseCPUInitCandidateStates + 41))
  {
    uint64_t v1 = *(unsigned int *)(this + 136);
    if (v1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = *(void *)(this + 232);
      uint64_t v4 = *(void *)(this + 184);
      do
      {
        uint64_t v5 = *(unsigned int *)(v3 + 40 * v2);
        if (v4)
        {
          if (*(_DWORD *)(v4 + 120) > v5) {
            goto LABEL_8;
          }
        }
        else if (*(_DWORD *)(*(void *)(this + 40) + 160) != v5)
        {
LABEL_8:
          uint64_t v6 = *(unsigned int *)(*(void *)(v4 + 160) + 4 * v5);
          if (v6)
          {
            uint64_t v7 = 0;
            int v8 = *(_DWORD *)(*(void *)(v4 + 176) + 4 * v5);
            int v9 = *(_DWORD *)(*(void *)(this + 216) + 4 * v2);
            uint64_t v10 = v3 + 40 * v2;
            uint64_t v11 = (_DWORD *)(v10 + 16);
            uint64_t v12 = *(void *)(this + 248);
            uint64_t v13 = *(void *)(v4 + 144);
            int v14 = (double *)(v10 + 8);
            do
            {
              uint64_t v15 = v12 + 40 * (v9 + v7);
              *(_DWORD *)(v15 + 16) = *v11;
              *(_DWORD *)uint64_t v15 = *(_DWORD *)(v13 + 4 * (v8 + v7));
              int v16 = *(_DWORD *)(v13 + 4 * (v8 + v6 + v7));
              double v17 = *(float *)(v13 + 4 * (v8 + 2 * v6 + v7));
              *(double *)(v15 + 8) = *v14 + v17;
              *(_DWORD *)(v15 + 20) = v16;
              *(_DWORD *)(v15 + 24) = v2;
              *(_DWORD *)(v15 + 28) = 1;
              *(double *)(v15 + 32) = v17;
              ++v7;
            }
            while (v6 != v7);
          }
        }
        ++v2;
      }
      while (v2 != v1);
    }
  }
  return this;
}

void FwdBwd::makeBackwardDecision(FwdBwd *this, unsigned int a2, double a3)
{
  if (*(unsigned char *)(gParFwdBwdUseCPUMakeBackwardDecision + 41))
  {
    uint64_t v3 = *((void *)this + 21);
    uint64_t v4 = *(unsigned int *)(v3 + 40 * a2 + 16);
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(v3 + 40 * a2 + 8);
      uint64_t v19 = (uint64_t *)(v3 + 40 * (a2 + 1) + 24);
      uint64_t v8 = *((void *)this + 23);
      do
      {
        uint64_t v9 = *(unsigned int *)(v7 + 56 * v6);
        if (v8)
        {
          if (*(_DWORD *)(v8 + 120) > v9) {
            goto LABEL_6;
          }
        }
        else if (*(_DWORD *)(*((void *)this + 5) + 160) != v9)
        {
LABEL_6:
          int v10 = *(_DWORD *)(*(void *)(v8 + 160) + 4 * v9);
          if (v10)
          {
            unsigned int v11 = *(_DWORD *)(*((void *)this + 27) + 4 * v6);
            uint64_t v12 = *v19;
            double v13 = -1.79769313e308;
            do
            {
              uint64_t v14 = v12 + 24 * v11;
              double v15 = *(double *)(v14 + 16);
              if (v13 != -1.79769313e308)
              {
                if (v15 == -1.79769313e308)
                {
                  double v15 = v13;
                }
                else
                {
                  if (v13 > v15) {
                    double v16 = *(double *)(v14 + 16);
                  }
                  else {
                    double v16 = v13;
                  }
                  if (v13 > v15) {
                    double v15 = v13;
                  }
                  if (v16 - v15 >= -400.0)
                  {
                    long double v17 = exp(v16 - v15);
                    double v15 = v15 + log1p(v17);
                  }
                }
              }
              ++v11;
              double v13 = v15;
              --v10;
            }
            while (v10);
          }
          else
          {
            double v15 = -1.79769313e308;
          }
          uint64_t v18 = v7 + 56 * v6;
          *(double *)(v18 + 16) = v15 - a3;
          *(unsigned char *)(v18 + 40) = 0;
          goto LABEL_24;
        }
        *(void *)(v7 + 56 * v6 + 16) = 0xFFEFFFFFFFFFFFFFLL;
LABEL_24:
        ++v6;
      }
      while (v6 != v4);
    }
  }
}

uint64_t FwdBwd::getStateBlockSizesCPU(uint64_t this, int a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(this + 264);
    do
    {
      if (a3 < 1)
      {
        int v6 = 0;
      }
      else
      {
        int v6 = 0;
        unsigned int v7 = v4 * a3;
        int v8 = a3;
        do
        {
          if (!v7
            || (int)v7 < a2
            && *(_DWORD *)(*(void *)(this + 248) + 40 * (v7 - 1)) != *(_DWORD *)(*(void *)(this + 248) + 40 * v7))
          {
            ++v6;
          }
          ++v7;
          --v8;
        }
        while (v8);
      }
      *(_DWORD *)(v5 + 4 * v4++) = v6;
    }
    while (v4 != a4);
  }
  return this;
}

void *FwdBwd::initCandidateBlocksCPU(void *this, int a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = this[33];
    do
    {
      if (a3 >= 1)
      {
        unsigned int v6 = v4 * a3;
        unsigned int v7 = *(_DWORD *)(v5 + 4 * v4);
        int v8 = a3;
        do
        {
          if (!v6 || (int)v6 < a2 && *(_DWORD *)(this[31] + 40 * (v6 - 1)) != *(_DWORD *)(this[31] + 40 * v6)) {
            *(_DWORD *)(this[35] + 4 * v7++) = v6;
          }
          ++v6;
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != a4);
  }
  return this;
}

uint64_t FwdBwd::doStepFwdBwdCPU(uint64_t this, int a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = this;
    uint64_t v4 = 0;
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v3 + 280);
      uint64_t v7 = v4 + 1;
      int v8 = a2;
      if (v4 + 1 != v5) {
        int v8 = *(_DWORD *)(v6 + 4 * v7);
      }
      unsigned int v9 = *(_DWORD *)(v6 + 4 * v4);
      uint64_t v10 = *(void *)(v3 + 248) + 40 * v9;
      uint64_t v11 = 5 * v4;
      uint64_t v12 = *(void *)(v3 + 296) + 40 * v4;
      long long v13 = *(_OWORD *)v10;
      long long v14 = *(_OWORD *)(v10 + 16);
      *(void *)(v12 + 32) = *(void *)(v10 + 32);
      *(_OWORD *)uint64_t v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      uint64_t v15 = *(void *)(v3 + 296) + 8 * v11;
      *(_DWORD *)(v15 + 24) = v9;
      *(_DWORD *)(v15 + 28) = v8 - v9;
      double v16 = *(double *)(v15 + 8);
      unsigned int v17 = v9 + 1;
      if ((int)(v9 + 1) >= v8)
      {
        double v20 = *(double *)(v15 + 8);
      }
      else
      {
        uint64_t v18 = *(void *)(v3 + 248);
        do
        {
          uint64_t v19 = v18 + 40 * v17;
          double v20 = *(double *)(v19 + 8);
          if (v16 != -1.79769313e308)
          {
            if (v20 == -1.79769313e308)
            {
              double v20 = v16;
            }
            else
            {
              if (v16 > v20) {
                double v21 = *(double *)(v19 + 8);
              }
              else {
                double v21 = v16;
              }
              if (v16 > v20) {
                double v20 = v16;
              }
              if (v21 - v20 >= -400.0)
              {
                long double v22 = exp(v21 - v20);
                double v20 = v20 + log1p(v22);
              }
            }
          }
          ++v17;
          double v16 = v20;
        }
        while (v8 != v17);
      }
      this = PelScoreCache::getScoreNoBackoff(*(PelScoreCache **)(v3 + 32), *(unsigned __int16 *)(v15 + 20));
      *(double *)(*(void *)(v3 + 296) + 8 * v11 + 8) = v20 - (double)(int)this;
      uint64_t v4 = v7;
    }
    while (v7 != v5);
  }
  return this;
}

uint64_t FwdBwd::copyWithCutoffCPU(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned int *)(result + 16);
    unsigned int v5 = a3 - 1;
    if (v4 < a3 - 1) {
      unsigned int v5 = *(_DWORD *)(result + 16);
    }
    uint64_t v6 = 40 * v4;
    while (v6 != v3)
    {
      uint64_t v7 = *(void *)(result + 232) + v3;
      *(_DWORD *)uint64_t v7 = *(_DWORD *)(a2 + v3);
      *(void *)(v7 + 8) = *(void *)(a2 + v3 + 8);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v3 + 16);
      *(void *)(v7 + 32) = *(void *)(a2 + v3 + 32);
      v3 += 40;
      if (40 * a3 == v3)
      {
        ++v5;
        break;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  *(_DWORD *)(result + 136) = v5;
  return result;
}

uint64_t FwdBwd::appendNonEmittingCandidates(uint64_t result, double *a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned int *)a2;
  uint64_t v7 = *(void *)(result + 184);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 120) <= v6) {
      return result;
    }
    LODWORD(v6) = *(_DWORD *)(*(void *)(v7 + 112) + 4 * v6);
    uint64_t v8 = *(void *)(result + 40);
  }
  else
  {
    uint64_t v8 = *(void *)(result + 40);
    if (*(_DWORD *)(v8 + 160) == v6) {
      return result;
    }
  }
  if (*(_DWORD *)(v8 + 140) <= (int)v6
    || (*(_DWORD *)(*(void *)(v8 + 152) + 4 * v6) & 0x40000000) != 0)
  {
    int v18 = 0;
    do
    {
      uint64_t v9 = *(void *)(v5 + 40);
      uint64_t v10 = *(void *)(v9 + 152);
      unsigned int v11 = *(_DWORD *)(v10 + 4 * v6);
      int v12 = *(_DWORD *)(v10 + 4 * (v6 + 1));
      int v18 = v12;
      if (*(_DWORD *)(v9 + 140) <= v12)
      {
        uint64_t result = *(void *)(v5 + 184);
        if (result)
        {
          if (*(_DWORD *)(v9 + 160) == v12)
          {
            int v12 = *(_DWORD *)(result + 120);
          }
          else
          {
            uint64_t result = (uint64_t)HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(result, &v18);
            int v12 = *(_DWORD *)(*(void *)result + 16);
          }
        }
        double v13 = a2[1];
        unsigned int v14 = *((_DWORD *)a2 + 4);
        unsigned int v16 = *(_DWORD *)(a3 + 8);
        unsigned int v15 = *(_DWORD *)(a3 + 12);
        if (v16 + 1 > v15) {
          uint64_t result = DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(a3, v16 + 1 - v15, 0);
        }
        *(_DWORD *)(a3 + 8) = v16 + 1;
        uint64_t v17 = *(void *)a3 + 40 * v16;
        *(_DWORD *)uint64_t v17 = v12;
        *(double *)(v17 + 8) = v13 + (double)((v11 >> 20) & 0x3FF);
        *(_DWORD *)(v17 + 16) = v14;
        *(void *)(v17 + 20) = -1;
        *(_DWORD *)(v17 + 28) = 0;
        *(void *)(v17 + 32) = 0;
      }
      LODWORD(v6) = v6 + 2;
    }
    while ((v11 & 0x80000000) == 0);
  }
  return result;
}

uint64_t FwdBwd::propagateNulls(FwdBwd *this)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  LODWORD(v2) = *((_DWORD *)this + 34);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *((void *)this + 29) + v3;
      long long v6 = *(_OWORD *)(v5 + 16);
      v24[0] = *(_OWORD *)v5;
      v24[1] = v6;
      uint64_t v25 = *(void *)(v5 + 32);
      FwdBwd::appendNonEmittingCandidates((uint64_t)this, (double *)v24, (uint64_t)&v26);
      ++v4;
      unint64_t v2 = *((unsigned int *)this + 34);
      v3 += 40;
    }
    while (v4 < v2);
    int v7 = v27;
    if (v27)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        long long v10 = *(_OWORD *)(v26 + v8 + 16);
        v22[0] = *(_OWORD *)(v26 + v8);
        v22[1] = v10;
        uint64_t v23 = *(void *)(v26 + v8 + 32);
        FwdBwd::appendNonEmittingCandidates((uint64_t)this, (double *)v22, (uint64_t)&v26);
        ++v9;
        int v7 = v27;
        v8 += 40;
      }
      while (v9 < v27);
      LODWORD(v2) = *((_DWORD *)this + 34);
    }
  }
  else
  {
    int v7 = 0;
  }
  double v20 = 0;
  uint64_t v21 = 0;
  unsigned int v11 = v2 + v7;
  if (v2 + v7)
  {
    v28 = 0;
    HIDWORD(v21) = realloc_array(0, &v28, 40 * v11, 0, 0, 1) / 0x28;
    int v12 = (char *)v28;
    double v20 = v28;
    LODWORD(v2) = *((_DWORD *)this + 34);
  }
  else
  {
    int v12 = 0;
  }
  LODWORD(v21) = v11;
  double v13 = memcpy(v12, *((const void **)this + 29), 40 * v2);
  signed int v14 = *((_DWORD *)this + 34);
  uint64_t v15 = v27;
  if (v27)
  {
    uint64_t v16 = v26 + 16;
    int v17 = *((_DWORD *)this + 34);
    do
    {
      int v18 = &v12[40 * v17];
      *(_DWORD *)int v18 = *(_DWORD *)(v16 - 16);
      *((void *)v18 + 1) = *(void *)(v16 - 8);
      *((_OWORD *)v18 + 1) = *(_OWORD *)v16;
      *((void *)v18 + 4) = *(void *)(v16 + 16);
      ++v17;
      v16 += 40;
      --v15;
    }
    while (v15);
  }
  FwdBwd::sortAndMergeNonEmittingCandidates((uint64_t)v13, (uint64_t)&v20, v14);
  mrec_qsort_r<FBTokenCompareByScoreDecr>((unint64_t)v20, v21, 40);
  FwdBwd::copyWithCutoffCPU((uint64_t)this, (uint64_t)v20, v21);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v20);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v26);
}

void sub_213FD3F7C(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v1 - 56);
  _Unwind_Resume(a1);
}

void FwdBwd::sortAndMergeNonEmittingCandidates(uint64_t a1, uint64_t a2, signed int a3)
{
  unsigned int v3 = a3;
  mrec_qsort_r<FBTokenCompareByStateID>((char *)(*(void *)a2 + 40 * a3), (*(_DWORD *)(a2 + 8) - a3), 40);
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 > v3)
  {
    long long v6 = *(int **)a2;
    uint64_t v7 = v3;
    uint64_t v8 = 10 * v3;
    do
    {
      if (v7)
      {
        int v9 = v6[v8];
        if (v9 == v6[v8 - 10])
        {
          long long v10 = (double *)&v6[10 * v3 - 10];
          double v12 = v10[1];
          unsigned int v11 = v10 + 1;
          double v13 = v12;
          double v14 = *(double *)&v6[v8 + 2];
          if (v12 != -1.79769313e308)
          {
            if (v14 == -1.79769313e308)
            {
              double v14 = v13;
            }
            else
            {
              if (v13 > v14) {
                double v16 = *(double *)&v6[v8 + 2];
              }
              else {
                double v16 = v13;
              }
              if (v13 > v14) {
                double v14 = v13;
              }
              if (v16 - v14 >= -400.0)
              {
                long double v17 = exp(v16 - v14);
                double v14 = v14 + log1p(v17);
              }
            }
          }
          *unsigned int v11 = v14;
          goto LABEL_18;
        }
      }
      else
      {
        int v9 = *v6;
      }
      uint64_t v15 = &v6[10 * v3];
      int *v15 = v9;
      *((void *)v15 + 1) = *(void *)&v6[v8 + 2];
      *((_OWORD *)v15 + 1) = *(_OWORD *)&v6[v8 + 4];
      *((void *)v15 + 4) = *(void *)&v6[v8 + 8];
      ++v3;
LABEL_18:
      ++v7;
      v8 += 10;
    }
    while (v5 != v7);
  }
  unsigned int v18 = *(_DWORD *)(a2 + 12);
  if (v3 > v18) {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(a2, v3 - v18, 0);
  }
  *(_DWORD *)(a2 + 8) = v3;
}

unint64_t mrec_qsort_r<FBTokenCompareByScoreDecr>(unint64_t result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_120:
    if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v75 = result + a2 * a3;
      unint64_t v76 = result + a3;
      unint64_t v77 = result;
      do
      {
        if (v76 > result)
        {
          unint64_t v78 = v77;
          unint64_t v79 = v76;
          do
          {
            unint64_t v80 = v79;
            v79 += v4;
            if (*(double *)(v79 + 8) >= *(double *)(v80 + 8)) {
              break;
            }
            if (v7)
            {
              uint64_t v81 = 0;
              unint64_t v82 = v78 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v83 = *(void *)(v82 + 8 * v81);
                  *(void *)(v82 + 8 * v81) = *(void *)(v78 + 8 * v81);
                  *(void *)(v78 + 8 * v81++) = v83;
                }
                while ((unint64_t)a3 >> 3 != v81);
              }
              else
              {
                do
                {
                  char v84 = *(unsigned char *)(v82 + v81);
                  *(unsigned char *)(v82 + v81) = *(unsigned char *)(v78 + v81);
                  *(unsigned char *)(v78 + v81++) = v84;
                }
                while (a3 != v81);
              }
            }
            else
            {
              uint64_t v85 = *(void *)v80;
              *(void *)unint64_t v80 = *(void *)v79;
              *(void *)unint64_t v79 = v85;
            }
            v78 += v4;
          }
          while (v79 > result);
        }
        v76 += a3;
        v77 += a3;
      }
      while (v76 < v75);
    }
  }
  else
  {
    unint64_t v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      int v9 = (double *)(result + (a2 >> 1) * a3);
      if (a2 != 7)
      {
        unint64_t v10 = result + (a2 - 1) * a3;
        if (a2 < 0x29)
        {
          unint64_t v12 = result;
          unint64_t v16 = result + (a2 - 1) * a3;
        }
        else
        {
          unint64_t v11 = (a2 >> 3) * a3;
          unint64_t v12 = result + v11;
          double v13 = *(double *)(result + 8);
          double v14 = *(double *)(result + v11 + 8);
          double v15 = *(double *)(result + 2 * v11 + 8);
          if (v13 <= v14)
          {
            if (v14 >= v15)
            {
              if (v13 <= v15) {
                unint64_t v12 = result + 2 * v11;
              }
              else {
                unint64_t v12 = result;
              }
            }
          }
          else if (v14 <= v15)
          {
            if (v13 <= v15) {
              unint64_t v12 = result;
            }
            else {
              unint64_t v12 = result + 2 * v11;
            }
          }
          double v17 = *(double *)((char *)v9 - v11 + 8);
          double v18 = v9[1];
          double v19 = *(double *)((char *)v9 + v11 + 8);
          if (v17 <= v18)
          {
            if (v18 >= v19)
            {
              if (v17 <= v19) {
                int v9 = (double *)((char *)v9 + v11);
              }
              else {
                int v9 = (double *)((char *)v9 - v11);
              }
            }
          }
          else if (v18 <= v19)
          {
            if (v17 <= v19) {
              int v9 = (double *)((char *)v9 - v11);
            }
            else {
              int v9 = (double *)((char *)v9 + v11);
            }
          }
          unint64_t v20 = v10 - 2 * v11;
          unint64_t v16 = v10 - v11;
          double v21 = *(double *)(v20 + 8);
          double v22 = *(double *)(v16 + 8);
          double v23 = *(double *)(v10 + 8);
          if (v21 <= v22)
          {
            if (v22 >= v23)
            {
              if (v21 <= v23) {
                unint64_t v16 = result + (a2 - 1) * a3;
              }
              else {
                unint64_t v16 = v20;
              }
            }
          }
          else if (v22 <= v23)
          {
            if (v21 <= v23) {
              unint64_t v16 = v20;
            }
            else {
              unint64_t v16 = result + (a2 - 1) * a3;
            }
          }
        }
        double v24 = *(double *)(v12 + 8);
        double v25 = v9[1];
        double v26 = *(double *)(v16 + 8);
        if (v24 <= v25)
        {
          if (v25 >= v26)
          {
            if (v24 <= v26) {
              int v9 = (double *)v16;
            }
            else {
              int v9 = (double *)v12;
            }
          }
        }
        else if (v25 <= v26)
        {
          if (v24 <= v26) {
            int v9 = (double *)v12;
          }
          else {
            int v9 = (double *)v16;
          }
        }
      }
      if (v7)
      {
        if (v6)
        {
          uint64_t v27 = (uint64_t *)result;
          unint64_t v28 = (unint64_t)a3 >> 3;
          do
          {
            uint64_t v29 = *v27;
            *v27++ = *(void *)v9;
            *(void *)v9++ = v29;
            --v28;
          }
          while (v28);
        }
        else
        {
          int64_t v31 = a3;
          v32 = (char *)result;
          do
          {
            char v33 = *v32;
            *v32++ = *(unsigned char *)v9;
            *(unsigned char *)int v9 = v33;
            int v9 = (double *)((char *)v9 + 1);
            --v31;
          }
          while (v31);
        }
      }
      else
      {
        uint64_t v30 = *(void *)result;
        *(double *)uint64_t result = *v9;
        *(void *)int v9 = v30;
      }
      int v34 = 0;
      unint64_t v35 = result + a3;
      v36 = (double *)(result + (a2 - 1) * a3);
      v37 = v36;
      v38 = (double *)(result + a3);
      v39 = (void *)(result + a3);
LABEL_54:
      while (v38 <= v37)
      {
        double v40 = v38[1];
        double v41 = *(double *)(result + 8);
        if (v40 < v41) {
          break;
        }
        if (v40 == v41)
        {
          if (v7)
          {
            uint64_t v42 = 0;
            if (v6)
            {
              do
              {
                double v43 = *(double *)&v39[v42];
                v39[v42] = *(void *)&v38[v42];
                v38[v42++] = v43;
              }
              while (v8 != v42);
            }
            else
            {
              do
              {
                char v44 = *((unsigned char *)v39 + v42);
                *((unsigned char *)v39 + v42) = *((unsigned char *)v38 + v42);
                *((unsigned char *)v38 + v42++) = v44;
              }
              while (a3 != v42);
            }
          }
          else
          {
            uint64_t v55 = *v39;
            void *v39 = *(void *)v38;
            *(void *)v38 = v55;
          }
          v39 = (void *)((char *)v39 + a3);
          int v34 = 1;
        }
        v38 = (double *)((char *)v38 + a3);
      }
      while (v38 <= v37)
      {
        double v49 = v37[1];
        double v50 = *(double *)(result + 8);
        if (v49 == v50) {
          int v51 = 0;
        }
        else {
          int v51 = -1;
        }
        if (v49 < v50) {
          int v51 = 1;
        }
        if (v51 < 0)
        {
          if (v7)
          {
            uint64_t v52 = 0;
            if (v6)
            {
              do
              {
                double v53 = v38[v52];
                v38[v52] = v37[v52];
                v37[v52++] = v53;
              }
              while (v8 != v52);
            }
            else
            {
              do
              {
                char v54 = *((unsigned char *)v38 + v52);
                *((unsigned char *)v38 + v52) = *((unsigned char *)v37 + v52);
                *((unsigned char *)v37 + v52++) = v54;
              }
              while (a3 != v52);
            }
          }
          else
          {
            uint64_t v56 = *(void *)v38;
            double *v38 = *v37;
            *(void *)v37 = v56;
          }
          v38 = (double *)((char *)v38 + a3);
          v37 = (double *)((char *)v37 + v4);
          int v34 = 1;
          goto LABEL_54;
        }
        if (!v51)
        {
          if (v7)
          {
            uint64_t v45 = 0;
            if (v6)
            {
              do
              {
                double v46 = v37[v45];
                v37[v45] = v36[v45];
                v36[v45++] = v46;
              }
              while (v8 != v45);
            }
            else
            {
              do
              {
                char v47 = *((unsigned char *)v37 + v45);
                *((unsigned char *)v37 + v45) = *((unsigned char *)v36 + v45);
                *((unsigned char *)v36 + v45++) = v47;
              }
              while (a3 != v45);
            }
          }
          else
          {
            double v48 = *v37;
            double *v37 = *v36;
            double *v36 = v48;
          }
          v36 = (double *)((char *)v36 + v4);
          int v34 = 1;
        }
        v37 = (double *)((char *)v37 + v4);
      }
      unint64_t v57 = result + a2 * a3;
      if (!v34) {
        break;
      }
      int64_t v58 = (char *)v38 - (char *)v39;
      if ((uint64_t)((uint64_t)v39 - result) >= (char *)v38 - (char *)v39) {
        unint64_t v59 = (char *)v38 - (char *)v39;
      }
      else {
        unint64_t v59 = (unint64_t)v39 - result;
      }
      if (v59)
      {
        if (v6)
        {
          v60 = (uint64_t *)((char *)v38 - v59);
          unint64_t v61 = v59 >> 3;
          v62 = (uint64_t *)result;
          do
          {
            uint64_t v63 = *v62;
            *v62++ = *v60;
            *v60++ = v63;
            --v61;
          }
          while (v61);
        }
        else
        {
          uint64_t v64 = -(uint64_t)v59;
          v65 = (char *)result;
          do
          {
            char v66 = *v65;
            *v65++ = *((unsigned char *)v38 + v64);
            *((unsigned char *)v38 + v64) = v66;
            BOOL v67 = __CFADD__(v64++, 1);
          }
          while (!v67);
        }
      }
      int64_t v68 = (char *)v36 - (char *)v37;
      unint64_t v69 = v57 - ((void)v36 + a3);
      if ((char *)v36 - (char *)v37 < (uint64_t)v69) {
        unint64_t v69 = (char *)v36 - (char *)v37;
      }
      if (v69)
      {
        if (v6)
        {
          v70 = (double *)(v57 - v69);
          unint64_t v71 = v69 >> 3;
          do
          {
            uint64_t v72 = *(void *)v38;
            *v38++ = *v70;
            *(void *)v70++ = v72;
            --v71;
          }
          while (v71);
        }
        else
        {
          uint64_t v73 = -(uint64_t)v69;
          do
          {
            char v74 = *(unsigned char *)v38;
            *(unsigned char *)v38 = *(unsigned char *)(v57 + v73);
            v38 = (double *)((char *)v38 + 1);
            *(unsigned char *)(v57 + v73) = v74;
            BOOL v67 = __CFADD__(v73++, 1);
          }
          while (!v67);
        }
      }
      if (v58 > a3) {
        uint64_t result = mrec_qsort_r<FBTokenCompareByScoreDecr>();
      }
      if (v68 <= a3) {
        return result;
      }
      uint64_t result = v57 - v68;
      a2 = v68 / (unint64_t)a3;
      BOOL v6 = (((v57 - v68) | a3) & 7) == 0;
      if ((((v57 - v68) | a3) & 7) != 0) {
        int v7 = 2;
      }
      else {
        int v7 = v5;
      }
      if (a2 < 7) {
        goto LABEL_120;
      }
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v86 = result;
      do
      {
        if (v35 > result)
        {
          unint64_t v87 = v86;
          unint64_t v88 = v35;
          do
          {
            unint64_t v89 = v88;
            v88 += v4;
            if (*(double *)(v88 + 8) >= *(double *)(v89 + 8)) {
              break;
            }
            if (v7)
            {
              uint64_t v90 = 0;
              unint64_t v91 = v87 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v92 = *(void *)(v91 + 8 * v90);
                  *(void *)(v91 + 8 * v90) = *(void *)(v87 + 8 * v90);
                  *(void *)(v87 + 8 * v90++) = v92;
                }
                while (v8 != v90);
              }
              else
              {
                do
                {
                  char v93 = *(unsigned char *)(v91 + v90);
                  *(unsigned char *)(v91 + v90) = *(unsigned char *)(v87 + v90);
                  *(unsigned char *)(v87 + v90++) = v93;
                }
                while (a3 != v90);
              }
            }
            else
            {
              uint64_t v94 = *(void *)v89;
              *(void *)unint64_t v89 = *(void *)v88;
              *(void *)unint64_t v88 = v94;
            }
            v87 += v4;
          }
          while (v88 > result);
        }
        v35 += a3;
        v86 += a3;
      }
      while (v35 < v57);
    }
  }
  return result;
}

char *mrec_qsort_r<FBTokenCompareByStateID>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_162:
    if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v88 = &result[a2 * a3];
      unint64_t v89 = &result[a3];
      uint64_t v90 = result;
      do
      {
        if (v89 > result)
        {
          unint64_t v91 = v90;
          uint64_t v92 = v89;
          do
          {
            char v93 = v92;
            uint64_t v92 = (_DWORD *)((char *)v92 + v4);
            if (*v92 <= *v93) {
              break;
            }
            if (v7)
            {
              uint64_t v94 = 0;
              uint64_t v95 = (uint64_t)v91 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v96 = *(void *)(v95 + 8 * v94);
                  *(void *)(v95 + 8 * v94) = *(void *)&v91[2 * v94];
                  *(void *)&v91[2 * v94++] = v96;
                }
                while ((unint64_t)a3 >> 3 != v94);
              }
              else
              {
                do
                {
                  char v97 = *(unsigned char *)(v95 + v94);
                  *(unsigned char *)(v95 + v94) = *((unsigned char *)v91 + v94);
                  *((unsigned char *)v91 + v94++) = v97;
                }
                while (a3 != v94);
              }
            }
            else
            {
              uint64_t v98 = *(void *)v93;
              *(void *)char v93 = *(void *)v92;
              *(void *)uint64_t v92 = v98;
            }
            unint64_t v91 = (_DWORD *)((char *)v91 + v4);
          }
          while (v92 > (_DWORD *)result);
        }
        v89 += a3;
        uint64_t v90 = (_DWORD *)((char *)v90 + a3);
      }
      while (v89 < v88);
    }
  }
  else
  {
    unint64_t v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      int v9 = &result[(a2 >> 1) * a3];
      if (a2 != 7)
      {
        unint64_t v10 = &result[(a2 - 1) * a3];
        if (a2 <= 0x28)
        {
          int v22 = *(_DWORD *)result;
          int v33 = *(_DWORD *)v9;
          double v13 = result;
          int v42 = *(_DWORD *)v10;
        }
        else
        {
          unint64_t v11 = (a2 >> 3) * a3;
          uint64_t v12 = 2 * v11;
          double v13 = &result[2 * v11];
          int v14 = *(_DWORD *)result;
          int v15 = *(_DWORD *)&result[v11];
          int v16 = *(_DWORD *)v13;
          if (*(_DWORD *)result >= *(_DWORD *)v13) {
            int v17 = *(_DWORD *)v13;
          }
          else {
            int v17 = *(_DWORD *)result;
          }
          if (v14 >= v16) {
            double v18 = &result[2 * v11];
          }
          else {
            double v18 = result;
          }
          if (v15 > v16)
          {
            int v17 = *(_DWORD *)&result[v11];
            double v18 = &result[v11];
          }
          if (v14 <= v16) {
            int v19 = *(_DWORD *)v13;
          }
          else {
            int v19 = *(_DWORD *)result;
          }
          if (v14 >= v16) {
            double v13 = result;
          }
          BOOL v20 = v15 < v16;
          if (v15 >= v16) {
            int v21 = v19;
          }
          else {
            int v21 = *(_DWORD *)&result[v11];
          }
          if (v20) {
            double v13 = &result[v11];
          }
          if (v14 < v15) {
            int v22 = v21;
          }
          else {
            int v22 = v17;
          }
          if (v14 >= v15) {
            double v13 = v18;
          }
          uint64_t v23 = -(uint64_t)v11;
          double v24 = &v9[-v11];
          double v25 = &v9[v11];
          int v26 = *(_DWORD *)v24;
          int v27 = *(_DWORD *)v9;
          int v28 = *(_DWORD *)v25;
          if (*(_DWORD *)v24 >= *(_DWORD *)v25) {
            int v29 = *(_DWORD *)v25;
          }
          else {
            int v29 = *(_DWORD *)v24;
          }
          if (v26 >= v28) {
            uint64_t v30 = v25;
          }
          else {
            uint64_t v30 = v24;
          }
          if (v27 > v28)
          {
            int v29 = *(_DWORD *)v9;
            uint64_t v30 = &result[(a2 >> 1) * a3];
          }
          if (v26 <= v28) {
            int v31 = *(_DWORD *)v25;
          }
          else {
            int v31 = *(_DWORD *)v24;
          }
          if (v26 >= v28) {
            double v25 = v24;
          }
          if (v27 >= v28) {
            int v32 = v31;
          }
          else {
            int v32 = *(_DWORD *)v9;
          }
          if (v27 >= v28) {
            int v9 = v25;
          }
          if (v26 < v27) {
            int v33 = v32;
          }
          else {
            int v33 = v29;
          }
          if (v26 >= v27) {
            int v9 = v30;
          }
          int v34 = &v10[-v12];
          unint64_t v35 = &v10[v23];
          int v36 = *(_DWORD *)v34;
          int v37 = *(_DWORD *)v35;
          int v38 = *(_DWORD *)v10;
          if (*(_DWORD *)v34 >= *(_DWORD *)v10) {
            int v39 = *(_DWORD *)v10;
          }
          else {
            int v39 = *(_DWORD *)v34;
          }
          if (v36 >= v38) {
            double v40 = &result[(a2 - 1) * a3];
          }
          else {
            double v40 = v34;
          }
          if (v37 > v38)
          {
            int v39 = *(_DWORD *)v35;
            double v40 = v35;
          }
          if (v36 <= v38) {
            int v41 = *(_DWORD *)v10;
          }
          else {
            int v41 = *(_DWORD *)v34;
          }
          if (v36 >= v38) {
            unint64_t v10 = v34;
          }
          if (v37 >= v38) {
            int v42 = v41;
          }
          else {
            int v42 = *(_DWORD *)v35;
          }
          if (v37 < v38) {
            unint64_t v10 = v35;
          }
          if (v36 >= v37)
          {
            int v42 = v39;
            unint64_t v10 = v40;
          }
        }
        if (v22 >= v42) {
          double v43 = v10;
        }
        else {
          double v43 = v13;
        }
        if (v33 > v42) {
          double v43 = v9;
        }
        if (v22 >= v42) {
          unint64_t v10 = v13;
        }
        if (v33 >= v42) {
          int v9 = v10;
        }
        if (v22 >= v33) {
          int v9 = v43;
        }
      }
      if (v7)
      {
        if (v6)
        {
          char v44 = result;
          unint64_t v45 = (unint64_t)a3 >> 3;
          do
          {
            uint64_t v46 = *(void *)v44;
            *(void *)char v44 = *(void *)v9;
            v44 += 8;
            *(void *)int v9 = v46;
            v9 += 8;
            --v45;
          }
          while (v45);
        }
        else
        {
          int64_t v48 = a3;
          double v49 = result;
          do
          {
            char v50 = *v49;
            *v49++ = *v9;
            *v9++ = v50;
            --v48;
          }
          while (v48);
        }
      }
      else
      {
        uint64_t v47 = *(void *)result;
        *(void *)uint64_t result = *(void *)v9;
        *(void *)int v9 = v47;
      }
      int v51 = 0;
      uint64_t v52 = &result[a3];
      double v53 = &result[(a2 - 1) * a3];
      char v54 = v53;
      uint64_t v55 = &result[a3];
      uint64_t v56 = &result[a3];
LABEL_96:
      while (v55 <= v54 && *(_DWORD *)v55 <= *(_DWORD *)result)
      {
        if (*(_DWORD *)v55 == *(_DWORD *)result)
        {
          if (v7)
          {
            uint64_t v57 = 0;
            if (v6)
            {
              do
              {
                uint64_t v58 = *(void *)&v56[8 * v57];
                *(void *)&v56[8 * v57] = *(void *)&v55[8 * v57];
                *(void *)&v55[8 * v57++] = v58;
              }
              while (v8 != v57);
            }
            else
            {
              do
              {
                char v59 = v56[v57];
                v56[v57] = v55[v57];
                v55[v57++] = v59;
              }
              while (a3 != v57);
            }
          }
          else
          {
            uint64_t v68 = *(void *)v56;
            *(void *)uint64_t v56 = *(void *)v55;
            *(void *)uint64_t v55 = v68;
          }
          v56 += a3;
          int v51 = 1;
        }
        v55 += a3;
      }
      while (v55 <= v54)
      {
        if (*(_DWORD *)v54 == *(_DWORD *)result) {
          int v64 = 0;
        }
        else {
          int v64 = -1;
        }
        if (*(_DWORD *)v54 > *(_DWORD *)result) {
          int v64 = 1;
        }
        if (v64 < 0)
        {
          if (v7)
          {
            uint64_t v65 = 0;
            if (v6)
            {
              do
              {
                uint64_t v66 = *(void *)&v55[8 * v65];
                *(void *)&v55[8 * v65] = *(void *)&v54[8 * v65];
                *(void *)&v54[8 * v65++] = v66;
              }
              while (v8 != v65);
            }
            else
            {
              do
              {
                char v67 = v55[v65];
                v55[v65] = v54[v65];
                v54[v65++] = v67;
              }
              while (a3 != v65);
            }
          }
          else
          {
            uint64_t v69 = *(void *)v55;
            *(void *)uint64_t v55 = *(void *)v54;
            *(void *)char v54 = v69;
          }
          v55 += a3;
          v54 += v4;
          int v51 = 1;
          goto LABEL_96;
        }
        if (!v64)
        {
          if (v7)
          {
            uint64_t v60 = 0;
            if (v6)
            {
              do
              {
                uint64_t v61 = *(void *)&v54[8 * v60];
                *(void *)&v54[8 * v60] = *(void *)&v53[8 * v60];
                *(void *)&v53[8 * v60++] = v61;
              }
              while (v8 != v60);
            }
            else
            {
              do
              {
                char v62 = v54[v60];
                v54[v60] = v53[v60];
                v53[v60++] = v62;
              }
              while (a3 != v60);
            }
          }
          else
          {
            uint64_t v63 = *(void *)v54;
            *(void *)char v54 = *(void *)v53;
            *(void *)double v53 = v63;
          }
          v53 += v4;
          int v51 = 1;
        }
        v54 += v4;
      }
      v70 = &result[a2 * a3];
      if (!v51) {
        break;
      }
      int64_t v71 = v55 - v56;
      if (v56 - result >= v55 - v56) {
        unint64_t v72 = v55 - v56;
      }
      else {
        unint64_t v72 = v56 - result;
      }
      if (v72)
      {
        if (v6)
        {
          uint64_t v73 = &v55[-v72];
          unint64_t v74 = v72 >> 3;
          unint64_t v75 = result;
          do
          {
            uint64_t v76 = *(void *)v75;
            *(void *)unint64_t v75 = *(void *)v73;
            v75 += 8;
            *(void *)uint64_t v73 = v76;
            v73 += 8;
            --v74;
          }
          while (v74);
        }
        else
        {
          uint64_t v77 = -(uint64_t)v72;
          unint64_t v78 = result;
          do
          {
            char v79 = *v78;
            *v78++ = v55[v77];
            v55[v77] = v79;
            BOOL v80 = __CFADD__(v77++, 1);
          }
          while (!v80);
        }
      }
      int64_t v81 = v53 - v54;
      int64_t v82 = v70 - &v53[a3];
      if (v53 - v54 < v82) {
        int64_t v82 = v53 - v54;
      }
      if (v82)
      {
        if (v6)
        {
          uint64_t v83 = &v70[-v82];
          unint64_t v84 = (unint64_t)v82 >> 3;
          do
          {
            uint64_t v85 = *(void *)v55;
            *(void *)uint64_t v55 = *(void *)v83;
            v55 += 8;
            *(void *)uint64_t v83 = v85;
            v83 += 8;
            --v84;
          }
          while (v84);
        }
        else
        {
          int64_t v86 = -v82;
          do
          {
            char v87 = *v55;
            *v55++ = v70[v86];
            v70[v86] = v87;
            BOOL v80 = __CFADD__(v86++, 1);
          }
          while (!v80);
        }
      }
      if (v71 > a3) {
        uint64_t result = (char *)mrec_qsort_r<FBTokenCompareByStateID>();
      }
      if (v81 <= a3) {
        return result;
      }
      uint64_t result = &v70[-v81];
      a2 = v81 / (unint64_t)a3;
      BOOL v6 = ((((_BYTE)v70 - v81) | a3) & 7) == 0;
      if (((((_BYTE)v70 - v81) | a3) & 7) != 0) {
        int v7 = 2;
      }
      else {
        int v7 = v5;
      }
      if (a2 < 7) {
        goto LABEL_162;
      }
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      v99 = result;
      do
      {
        if (v52 > result)
        {
          v100 = v99;
          v101 = v52;
          do
          {
            v102 = v101;
            v101 = (_DWORD *)((char *)v101 + v4);
            if (*v101 <= *v102) {
              break;
            }
            if (v7)
            {
              uint64_t v103 = 0;
              uint64_t v104 = (uint64_t)v100 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v105 = *(void *)(v104 + 8 * v103);
                  *(void *)(v104 + 8 * v103) = *(void *)&v100[2 * v103];
                  *(void *)&v100[2 * v103++] = v105;
                }
                while (v8 != v103);
              }
              else
              {
                do
                {
                  char v106 = *(unsigned char *)(v104 + v103);
                  *(unsigned char *)(v104 + v103) = *((unsigned char *)v100 + v103);
                  *((unsigned char *)v100 + v103++) = v106;
                }
                while (a3 != v103);
              }
            }
            else
            {
              uint64_t v107 = *(void *)v102;
              *(void *)v102 = *(void *)v101;
              *(void *)v101 = v107;
            }
            v100 = (_DWORD *)((char *)v100 + v4);
          }
          while (v101 > (_DWORD *)result);
        }
        v52 += a3;
        v99 = (_DWORD *)((char *)v99 + a3);
      }
      while (v52 < v70);
    }
  }
  return result;
}

double FwdBwd::copyNonCondensedBackwardLinks(FwdBwd *this, unsigned int a2)
{
  FwdBwd::maybeReallocFwdBwdColumn((uint64_t)this, *((_DWORD *)this + 40) + 2);
  uint64_t v5 = *((void *)this + 21) + 40 * (*((_DWORD *)this + 40) + 1);
  unsigned int v8 = *(_DWORD *)(v5 + 32);
  int v7 = (unsigned int *)(v5 + 32);
  uint64_t v6 = v8;
  unsigned int v9 = v7[1];
  if (a2 > v9) {
    DgnArray<CWIDAC>::reallocElts((uint64_t)(v7 - 2), a2 - v9, 0);
  }
  *int v7 = a2;
  uint64_t v10 = a2;
  if (v6 < a2)
  {
    uint64_t v11 = a2 - v6;
    uint64_t v12 = (_OWORD *)(*((void *)v7 - 1) + 24 * v6 + 8);
    double result = 0.0;
    do
    {
      *((_DWORD *)v12 - 2) = -1;
      _OWORD *v12 = xmmword_2140A6FD0;
      uint64_t v12 = (_OWORD *)((char *)v12 + 24);
      --v11;
    }
    while (v11);
  }
  if ((int)a2 >= 1)
  {
    double v13 = (void *)(*(void *)(*((void *)this + 21) + 40 * (*((_DWORD *)this + 40) + 1) + 24) + 16);
    int v14 = (void *)(*((void *)this + 31) + 32);
    do
    {
      *((_DWORD *)v13 - 4) = *((_DWORD *)v14 - 2);
      double v15 = *(double *)v14;
      v14 += 5;
      double result = v15;
      *((double *)v13 - 1) = v15;
      *double v13 = 0xFFEFFFFFFFFFFFFFLL;
      v13 += 3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t FwdBwd::maybeReallocFwdBwdColumn(uint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  int64_t v4 = (void *)(this + 168);
  unsigned int v5 = *(_DWORD *)(this + 180);
  BOOL v6 = a2 >= v5;
  uint64_t v7 = a2 - v5;
  if (v7 != 0 && v6) {
    this = DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(this + 168, v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(v3 + 176);
  if (v8 <= a2)
  {
    if (v8 < a2)
    {
      uint64_t v9 = a2 - v8;
      uint64_t v10 = 40 * v8;
      do
      {
        uint64_t v11 = *v4 + v10;
        *(void *)(v11 + 32) = 0;
        *(_OWORD *)uint64_t v11 = 0uLL;
        *(_OWORD *)(v11 + 16) = 0uLL;
        v10 += 40;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    this = DgnArray<FwdBwdColumn>::destructAt((uint64_t)v4, a2, v8 - a2);
  }
  *(_DWORD *)(v3 + 176) = a2;
  return this;
}

uint64_t FwdBwd::doFrame(FwdBwd *this, unsigned int a2, int a3, SearchStats *a4)
{
  FwdBwd::getNumOutPortsItf((uint64_t)this);
  int v6 = FwdBwd::cumulativeSumsItf(this, *((int **)this + 27), *((_DWORD *)this + 34));
  unsigned int v7 = *((_DWORD *)this + 65);
  if (v6 > v7) {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 248, v6 - v7, 0);
  }
  *((_DWORD *)this + 64) = v6;
  FwdBwd::initCandidateStatesItf((uint64_t)this);
  mrec_qsort_r<FBTokenCompareByStateID>(*((char **)this + 31), v6, 40);
  unsigned int v8 = vcvtpd_s64_f64((double)v6 * 0.00390625);
  unsigned int v9 = *((_DWORD *)this + 69);
  if (v8 > v9) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 264, v8 - v9, 0);
  }
  *((_DWORD *)this + 68) = v8;
  if (!*((void *)this + 23) || *(unsigned char *)(gParFwdBwdUseCPUGetBlockSizes + 41)) {
    FwdBwd::getStateBlockSizesCPU((uint64_t)this, v6, 256, v8);
  }
  unsigned int v10 = FwdBwd::cumulativeSumsItf(this, *((int **)this + 33), v8);
  unsigned int v11 = *((_DWORD *)this + 73);
  if (v10 > v11) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 280, v10 - v11, 0);
  }
  *((_DWORD *)this + 72) = v10;
  if (!*((void *)this + 23) || *(unsigned char *)(gParFwdBwdUseCPUInitCandidateBlocks + 41)) {
    FwdBwd::initCandidateBlocksCPU(this, v6, 256, v8);
  }
  FwdBwd::copyNonCondensedBackwardLinks(this, v6);
  unsigned int v12 = *((_DWORD *)this + 77);
  if (v10 > v12) {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 296, v10 - v12, 0);
  }
  *((_DWORD *)this + 76) = v10;
  if (!*((void *)this + 23) || *(unsigned char *)(gParFwdBwdUseCPUDoStep + 41)) {
    FwdBwd::doStepFwdBwdCPU((uint64_t)this, v6, v10);
  }
  mrec_qsort_r<FBTokenCompareByScoreDecr>(*((void *)this + 37), (int)v10, 40);
  if (!*((void *)this + 23) || *(unsigned char *)(gParFwdBwdUseCPUCopyWithCutoff + 41)) {
    FwdBwd::copyWithCutoffCPU((uint64_t)this, *((void *)this + 37), v10);
  }
  FwdBwd::propagateNulls(this);
  *((_DWORD *)this + 40) = a2;

  return FwdBwd::copyActiveToFwdProbs(this, a2);
}

uint64_t FwdBwd::copyActiveToFwdProbs(FwdBwd *this, unsigned int a2)
{
  uint64_t v4 = *((unsigned int *)this + 34);
  if (v4)
  {
    unsigned int v5 = (double *)(*((void *)this + 29) + 8);
    double v6 = -1.79769313e308;
    do
    {
      double v7 = *v5;
      if (v6 != -1.79769313e308)
      {
        if (v7 == -1.79769313e308)
        {
          double v7 = v6;
        }
        else
        {
          if (v6 > v7) {
            double v8 = *v5;
          }
          else {
            double v8 = v6;
          }
          if (v6 > v7) {
            double v7 = v6;
          }
          if (v8 - v7 >= -400.0)
          {
            long double v9 = exp(v8 - v7);
            double v7 = v7 + log1p(v9);
          }
        }
      }
      v5 += 5;
      double v6 = v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    double v7 = -1.79769313e308;
  }
  uint64_t result = FwdBwd::maybeReallocFwdBwdColumn((uint64_t)this, a2 + 1);
  uint64_t v11 = *((void *)this + 21);
  *(double *)(v11 + 40 * a2) = v7;
  if (*((_DWORD *)this + 34))
  {
    uint64_t v12 = 0;
    uint64_t v13 = v11 + 40 * a2;
    int v14 = (void *)(v13 + 8);
    double v15 = (_DWORD *)(v13 + 16);
    int v32 = (_DWORD *)(v13 + 20);
    while (1)
    {
      uint64_t v16 = *((void *)this + 29);
      uint64_t v17 = v16 + 40 * v12;
      double v18 = *(double *)(v17 + 8) - v7;
      *(double *)(v17 + 8) = v18;
      int v19 = *(_DWORD *)(v17 + 20);
      if (v19 < 0)
      {
        double v20 = 0.0;
      }
      else
      {
        uint64_t result = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v17 + 20));
        double v20 = (double)-(int)result;
        uint64_t v16 = *((void *)this + 29);
        double v18 = *(double *)(v16 + 40 * v12 + 8);
      }
      int v21 = (int *)(v16 + 40 * v12);
      int v22 = *v21;
      uint64_t v23 = *((void *)v21 + 3);
      unint64_t v24 = *v15;
      int v25 = v24 + 1;
      if ((v24 + 1) > *v32) {
        break;
      }
      _DWORD *v15 = v25;
      long long v26 = 0uLL;
      if (v24 != -1) {
        goto LABEL_24;
      }
      unsigned int v30 = -1;
LABEL_27:
      uint64_t v31 = *v14 + 56 * v30;
      *(_DWORD *)uint64_t v31 = v22;
      *(double *)(v31 + 8) = v18;
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      *(double *)(v31 + 32) = v20;
      *(unsigned char *)(v31 + 40) = 0;
      *(_DWORD *)(v31 + 44) = v19;
      *(void *)(v31 + 48) = v23;
      if (++v12 >= (unint64_t)*((unsigned int *)this + 34)) {
        return result;
      }
    }
    uint64_t result = DgnArray<DiskNgramContext>::reallocElts((uint64_t)v14, (v24 + 1 - *v32), 0);
    _DWORD *v15 = v25;
    long long v26 = 0uLL;
LABEL_24:
    uint64_t v27 = 56 * v24;
    do
    {
      uint64_t v28 = *v14 + v27;
      *(_DWORD *)uint64_t v28 = -1;
      *(_OWORD *)(v28 + 8) = v26;
      *(_OWORD *)(v28 + 24) = v26;
      *(unsigned char *)(v28 + 40) = 0;
      *(void *)(v28 + 44) = -1;
      *(_DWORD *)(v28 + 52) = 0;
      ++v24;
      unint64_t v29 = *v15;
      v27 += 56;
    }
    while (v24 < v29);
    unsigned int v30 = v29 - 1;
    goto LABEL_27;
  }
  return result;
}

uint64_t FwdBwd::endTopRecPassSyncRecog(FwdBwd *this)
{
  FwdBwd::doBackwardPass(this);

  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FwdBwd::doBackwardPass(FwdBwd *this)
{
  unsigned int v2 = *((_DWORD *)this + 44);
  int v3 = v2 - 1;
  uint64_t v4 = *((void *)this + 21);
  uint64_t v5 = v4 + 40 * (v2 - 1);
  uint64_t v6 = *(unsigned int *)(v5 + 16);
  if (*(_DWORD *)(v5 + 16))
  {
    uint64_t v7 = *(void *)(v4 + 40 * v3 + 8);
    uint64_t v8 = *((void *)this + 23);
    long double v9 = (double *)(v7 + 16);
    while (1)
    {
      unsigned int v10 = *((_DWORD *)v9 - 4);
      if (!v8) {
        break;
      }
      double v11 = 0.0;
      if (*(_DWORD *)(v8 + 120) > v10) {
        goto LABEL_5;
      }
LABEL_6:
      double v12 = v11 + *(v9 - 1);
      *long double v9 = v11;
      v9[1] = v12;
      v9 += 7;
      if (!--v6)
      {
        unsigned int v13 = 0;
        do
          FwdBwd::updateBackwardProbNullArcs((uint64_t)this, v5, v13++);
        while (v13 < *(_DWORD *)(v5 + 16));
        goto LABEL_11;
      }
    }
    double v11 = 0.0;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == v10) {
      goto LABEL_6;
    }
LABEL_5:
    double v11 = -1.79769313e308;
    goto LABEL_6;
  }
LABEL_11:
  if (v3 >= 1)
  {
    do
      FwdBwd::doBackwardStep(this, --v2);
    while (v2 > 1);
  }
}

void FwdBwd::printSize(FwdBwd *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fwdbwd.cpp", 2459, (DgnString *)&v28);
  if (v29) {
    uint64_t v16 = v28;
  }
  else {
    uint64_t v16 = &unk_2140A6FE0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6FE0, a3, &unk_2140A6FE0, v16);
  DgnString::~DgnString((DgnString *)&v28);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6FE0);
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  SearchItf::printSize(this, a2, (a3 + 1), &v27, &v26, &v26);
  *a4 += v27;
  *a5 += v26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fwdbwd.cpp", 2467, (DgnString *)&v28);
  if (v29) {
    int v25 = v28;
  }
  else {
    int v25 = &unk_2140A6FE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, a3, &unk_2140A6FE0, (35 - a3), (35 - a3), v25, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v28);
}

void sub_213FD55DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

BOOL FwdBwd::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = *(_DWORD *)(a1 + 152);
  int v8 = *(_DWORD *)(a2 + 8);
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a2 = MemChunkAlloc(*(unsigned int *)(a1 + 152), 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  else if (!v8)
  {
    goto LABEL_10;
  }
  unint64_t v10 = 0;
  do
    *(unsigned char *)(*(void *)a2 + v10++) = 0;
  while (v10 < *(unsigned int *)(a2 + 8));
LABEL_10:
  uint64_t v11 = *(unsigned int *)(a1 + 136);
  if (!v11)
  {
    double v13 = -1.79769313e308;
LABEL_24:
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_25;
  }
  uint64_t v12 = (double *)(*(void *)(a1 + 232) + 16);
  double v13 = -1.79769313e308;
  uint64_t v14 = 0xFFFFFFFFLL;
  do
  {
    if (*(_DWORD *)(*(void *)(a1 + 40) + 160) == *((_DWORD *)v12 - 4)
      && *(_DWORD *)v12 != -1
      && *(_DWORD *)(*(void *)(a1 + 144) + 12 * *(unsigned int *)v12 + 8) == *(_DWORD *)(a1 + 160))
    {
      if (v13 < *(v12 - 1)) {
        double v13 = *(v12 - 1);
      }
      uint64_t v14 = *(unsigned int *)v12;
    }
    v12 += 5;
    --v11;
  }
  while (v11);
  if (v14 == 0xFFFFFFFFLL) {
    goto LABEL_24;
  }
  uint64_t v15 = v14;
  do
  {
    *(unsigned char *)(*(void *)a2 + v15) = 1;
    uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 144) + 12 * v15);
  }
  while (v15 != -1);
LABEL_25:
  int v16 = (int)-v13;
  if (v13 == -1.79769313e308) {
    int v16 = 1879048192;
  }
  *a4 = v16;
  return v14 != 0xFFFFFFFFLL;
}

uint64_t FwdBwd::beginTopRecSyncRecog(FwdBwd *this, VirtMap *a2)
{
  unsigned int v3 = *((_DWORD *)this + 4);
  unsigned int v4 = *((_DWORD *)this + 61);
  unsigned int v5 = v3;
  if (v3 > v4)
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 232, v3 - v4, 0);
    unsigned int v5 = *((_DWORD *)this + 4);
  }
  *((_DWORD *)this + 60) = v3;
  *((_DWORD *)this + 34) = 0;
  unsigned int v6 = *((_DWORD *)this + 57);
  if (v5 > v6) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 216, v5 - v6, 0);
  }
  *((_DWORD *)this + 56) = v5;
  int v7 = **(uint64_t (***)(FwdBwd *))this;

  return v7(this);
}

uint64_t FwdBwd::endTopRecSyncRecog(FwdBwd *this)
{
  unsigned int v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((void *)this + 29) = 0;
  }
  *((void *)this + 30) = 0;
  unsigned int v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((void *)this + 31) = 0;
  }
  *((void *)this + 32) = 0;
  unsigned int v4 = (void *)*((void *)this + 33);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((void *)this + 33) = 0;
  }
  *((void *)this + 34) = 0;
  unsigned int v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((void *)this + 35) = 0;
  }
  *((void *)this + 36) = 0;
  unsigned int v6 = (void *)*((void *)this + 37);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((void *)this + 37) = 0;
  }
  *((void *)this + 38) = 0;
  int v7 = (void *)*((void *)this + 27);
  if (v7)
  {
    MemChunkFree(v7, 0);
    *((void *)this + 27) = 0;
  }
  *((void *)this + 28) = 0;
  DgnArray<FwdBwdColumn>::releaseAll((uint64_t)this + 168);
  return *((void *)this + 14);
}

void *DgnArray<FwdBwdColumn>::releaseAll(uint64_t a1)
{
  DgnArray<FwdBwdColumn>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void FwdBwd::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3)
{
  unsigned int Node = Lattice<WordLatticeLC>::createNode((uint64_t)a2);
  int v6 = *(_DWORD *)(a1 + 152);
  uint64_t v7 = (v6 - 1);
  if (v6 - 1 >= 0)
  {
    unsigned int v8 = Node;
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = 12 * (v6 - 1);
    unsigned int v26 = 0xFFFFFF;
    int v27 = 0;
    do
    {
      if (*(unsigned char *)(*a3 + v7))
      {
        uint64_t v12 = *(void *)(a1 + 144);
        int v14 = *(_DWORD *)(v12 + v11 + 4);
        int v13 = *(_DWORD *)(v12 + v11 + 8);
        unsigned int v15 = *(_DWORD *)(v12 + v11);
        int v16 = v27;
        if (v14 == 16777209) {
          int v16 = v13 - (v9 + v10);
        }
        unsigned int v17 = v26;
        if (v14 != 16777209) {
          unsigned int v17 = *(_DWORD *)(v12 + v11 + 4);
        }
        unsigned int v26 = v17;
        int v27 = v16;
        int v9 = v13 - v10;
        if ((v15 & 0x80000000) != 0 || *(_DWORD *)(v12 + 12 * v15 + 4) != 16777209)
        {
          uint64_t v18 = (const WordLatticeLC *)Lattice<WordLatticeLC>::createNode((uint64_t)a2);
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), v26, v19, v20, v21, v22, v23, v24, (uint64_t)v31);
          memset(v29, 0, sizeof(v29));
          int v30 = 0;
          WordLatticeLC::WordLatticeLC((uint64_t)v28, (uint64_t)v31, v10, v9, v27, (uint64_t)v29);
          Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a2, v8, v18, (WordLatticeLC *)v28);
          int v10 = *(_DWORD *)(*(void *)(a1 + 144) + v11 + 8);
          WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v28);
          int v9 = 0;
          unsigned int v8 = v18;
        }
      }
      --v6;
      v11 -= 12;
      --v7;
    }
    while (v6 > 0);
  }
}

void sub_213FD5A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

void FwdBwd::updateBackwardProbNullArcs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = v3 + 56 * a3;
  int v6 = *(unsigned __int8 *)(v4 + 40);
  unsigned int v5 = (unsigned char *)(v4 + 40);
  if (!v6)
  {
    unsigned char *v5 = 1;
    uint64_t v10 = *(unsigned int *)(v3 + 56 * a3);
    uint64_t v11 = *(void *)(a1 + 184);
    if (v11)
    {
      if (*(_DWORD *)(v11 + 120) > v10)
      {
        int v27 = 0;
        LODWORD(v10) = *(_DWORD *)(*(void *)(v11 + 112) + 4 * v10);
        goto LABEL_7;
      }
    }
    else if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != v10)
    {
      int v27 = 0;
LABEL_7:
      uint64_t v12 = (double *)(v3 + 56 * a3 + 16);
      do
      {
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v14 = *(void *)(v13 + 152);
        unsigned int v15 = *(_DWORD *)(v14 + 4 * v10);
        int v16 = *(_DWORD *)(v14 + 4 * (v10 + 1));
        int v27 = v16;
        if (*(_DWORD *)(v13 + 140) <= v16)
        {
          uint64_t v17 = *(void *)(a1 + 184);
          if (v17)
          {
            if (*(_DWORD *)(v13 + 160) == v16) {
              int v16 = *(_DWORD *)(v17 + 120);
            }
            else {
              int v16 = *((_DWORD *)*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v17, &v27) + 4);
            }
            int v27 = v16;
          }
          uint64_t v18 = *(unsigned int *)(a2 + 16);
          if (v18)
          {
            int v19 = 0;
            uint64_t v20 = 0;
            int v21 = (v15 >> 20) & 0x3FF;
            uint64_t v22 = 56 * v18;
            while (*(_DWORD *)(*(void *)(a2 + 8) + v20) != v16)
            {
              v20 += 56;
              ++v19;
              if (v22 == v20) {
                goto LABEL_31;
              }
            }
            if ((v19 & 0x80000000) == 0)
            {
              FwdBwd::updateBackwardProbNullArcs(a1, a2);
              double v23 = *v12;
              double v24 = *(double *)(*(void *)(a2 + 8) + v20 + 16) + (double)v21;
              if (*v12 != -1.79769313e308)
              {
                if (v24 == -1.79769313e308)
                {
                  double v24 = *v12;
                }
                else
                {
                  if (v23 > v24) {
                    double v25 = *(double *)(*(void *)(a2 + 8) + v20 + 16) + (double)v21;
                  }
                  else {
                    double v25 = *v12;
                  }
                  if (v23 > v24) {
                    double v24 = *v12;
                  }
                  if (v25 - v24 >= -400.0)
                  {
                    long double v26 = exp(v25 - v24);
                    double v24 = v24 + log1p(v26);
                  }
                }
              }
              double *v12 = v24;
            }
          }
        }
LABEL_31:
        LODWORD(v10) = v10 + 2;
      }
      while ((v15 & 0x80000000) == 0);
    }
    *(double *)(v3 + 56 * a3 + 24) = *(double *)(v3 + 56 * a3 + 8) + *(double *)(v3 + 56 * a3 + 16);
  }
}

void FwdBwd::doBackwardStep(FwdBwd *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 21) + 40 * (a2 - 1);
  FwdBwd::doBackwardStepFromEmittingItf(this, a2);
  if (*(_DWORD *)(v3 + 16))
  {
    unsigned int v4 = 0;
    do
      FwdBwd::updateBackwardProbNullArcs((uint64_t)this, v3, v4++);
    while (v4 < *(_DWORD *)(v3 + 16));
  }
}

void FwdBwd::doBackwardStepFromEmittingCPU(FwdBwd *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 21);
  uint64_t v3 = v2 + 40 * (a2 - 1);
  int v5 = *(_DWORD *)(v3 + 16);
  unsigned int v4 = (unsigned int *)(v3 + 16);
  if (v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = v2 + 40 * a2;
    uint64_t v10 = v2 + 40 * (a2 - 1);
    uint64_t v13 = *(void *)(v10 + 8);
    uint64_t v12 = (uint64_t *)(v10 + 8);
    uint64_t v11 = v13;
    do
    {
      FwdBwd::updateBackwardProbFromEmittingCPU((uint64_t)this, (unsigned int *)(v11 + v7), v9);
      uint64_t v11 = *v12;
      *(unsigned char *)(*v12 + v7 + 40) = 0;
      ++v8;
      v7 += 56;
    }
    while (v8 < *v4);
  }
}

void FwdBwd::updateBackwardProbFromEmittingCPU(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  unsigned int v5 = *a2;
  if (*(_DWORD *)(v4 + 160) == *a2)
  {
    double v6 = -1.79769313e308;
  }
  else
  {
    int v8 = *(_DWORD *)(v4 + 140);
    if (v8 <= (int)v5) {
      goto LABEL_11;
    }
    uint64_t v9 = *(unsigned int *)(a3 + 16);
    if (!v9) {
      goto LABEL_11;
    }
    uint64_t v10 = 0;
    uint64_t v11 = (double *)(*(void *)(a3 + 8) + 32);
    while (*((_DWORD *)v11 - 8) != v5)
    {
      ++v10;
      v11 += 7;
      if (v9 == v10) {
        goto LABEL_11;
      }
    }
    if ((v10 & 0x80000000) != 0) {
LABEL_11:
    }
      double v12 = -1.79769313e308;
    else {
      double v12 = *(v11 - 2) + *v11;
    }
    uint64_t v13 = *(void *)(v4 + 152);
    do
    {
      unsigned int v14 = *(_DWORD *)(v13 + 4 * v5);
      int v15 = *(_DWORD *)(v13 + 4 * (v5 + 1));
      if (v8 > v15)
      {
        uint64_t v16 = *(unsigned int *)(a3 + 16);
        if (v16)
        {
          uint64_t v17 = 0;
          int v18 = (v14 >> 20) & 0x3FF;
          int v19 = (double *)(*(void *)(a3 + 8) + 32);
          while (*((_DWORD *)v19 - 8) != v15)
          {
            ++v17;
            v19 += 7;
            if (v16 == v17) {
              goto LABEL_30;
            }
          }
          if ((v17 & 0x80000000) == 0)
          {
            double v20 = *(v19 - 2) + *v19 + (double)v18;
            if (v12 == -1.79769313e308)
            {
              double v12 = *(v19 - 2) + *v19 + (double)v18;
            }
            else if (v20 != -1.79769313e308)
            {
              if (v12 > v20) {
                double v21 = *(v19 - 2) + *v19 + (double)v18;
              }
              else {
                double v21 = v12;
              }
              if (v12 <= v20) {
                double v12 = *(v19 - 2) + *v19 + (double)v18;
              }
              if (v21 - v12 >= -400.0)
              {
                long double v22 = exp(v21 - v12);
                double v12 = v12 + log1p(v22);
              }
            }
          }
        }
      }
LABEL_30:
      v5 += 2;
    }
    while ((v14 & 0x80000000) == 0);
    double v6 = v12 - *(double *)a3;
  }
  *((double *)a2 + 2) = v6;
}

uint64_t FwdBwd::updateBackwardLinksGPU(uint64_t this, unsigned int a2)
{
  if (*(unsigned char *)(gParFwdBwdUseCPUUpdateBackwardLinks + 41))
  {
    uint64_t v2 = *(void *)(this + 168) + 40 * a2;
    uint64_t v3 = *(unsigned int *)(v2 + 16);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(v2 + 8);
      uint64_t v6 = *(void *)(v2 + 24) + 16;
      do
      {
        unint64_t v7 = *(unsigned int *)(v5 + 56 * v4 + 48);
        if ((v7 & 0x80000000) == 0)
        {
          int v8 = *(_DWORD *)(v5 + 56 * v4 + 52);
          if (v8 >= 1)
          {
            unint64_t v9 = (v8 + v7);
            uint64_t v10 = v5 + 56 * v4;
            double v11 = *(double *)(v10 + 32);
            double v12 = *(double *)(v10 + 16);
            uint64_t v13 = (double *)(v6 + 24 * v7);
            do
            {
              *uint64_t v13 = *(v13 - 1) + v11 + v12;
              v13 += 3;
              ++v7;
            }
            while (v7 < v9);
          }
        }
        ++v4;
      }
      while (v4 != v3);
    }
  }
  return this;
}

void FwdBwd::doBackwardStepFromEmittingGPU(FwdBwd *this, unsigned int a2)
{
  FwdBwd::updateBackwardLinksGPU((uint64_t)this, a2);
  uint64_t v4 = *((void *)this + 21) + 40 * a2;
  uint64_t v5 = 40 * a2;
  mrec_qsort_r<FBTokenCompareByStateID>(*(char **)(v4 + 24), *(unsigned int *)(v4 + 32), 24);
  unsigned int v6 = a2 - 1;
  FwdBwd::getNumOutPortsFromFwdBwdProbsGPU(this, v6);
  FwdBwd::cumulativeSumsItf(this, *((int **)this + 27), *(_DWORD *)(*((void *)this + 21) + 40 * v6 + 16));
  double v7 = *(double *)(*((void *)this + 21) + v5);

  FwdBwd::makeBackwardDecision(this, v6, v7);
}

void FwdBwd::doBackwardStepFromEmittingItf(FwdBwd *this, unsigned int a2)
{
  if (*((void *)this + 23)) {
    FwdBwd::doBackwardStepFromEmittingGPU(this, a2);
  }
  else {
    FwdBwd::doBackwardStepFromEmittingCPU(this, a2);
  }
}

void FwdBwdGPUData::~FwdBwdGPUData(FwdBwdGPUData *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);

  Hash<int,int,IntToUintScope,unsigned int>::~Hash((uint64_t)this);
}

FwdBwdGPUData *FwdBwd::loadArcGraphOnGPU(FwdBwd *this)
{
  uint64_t result = (FwdBwdGPUData *)*((void *)this + 23);
  if (result) {
    return (FwdBwdGPUData *)FwdBwdGPUData::loadArcGraph(result, *((const ArcGraph **)this + 5));
  }
  return result;
}

uint64_t FwdBwdGPUData::loadArcGraph(FwdBwdGPUData *this, const ArcGraph *a2)
{
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll((uint64_t)this);
  *((_DWORD *)this + 30) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  Hash<int,int,IntToUintScope,unsigned int>::Hash((uint64_t)v65, 0, 16);
  if (*((_DWORD *)a2 + 40))
  {
    unsigned int v4 = 0;
    do
    {
      int v5 = *((_DWORD *)a2 + 35);
      unsigned int v6 = v5 > (int)v4;
      uint64_t v7 = *((void *)a2 + 19);
      do
      {
        int v8 = *(_DWORD *)(v7 + 4 * v4);
        unsigned int v9 = v4 + 1;
        v4 += 2;
        if (v5 > *(_DWORD *)(v7 + 4 * v9)) {
          ++v6;
        }
      }
      while ((v8 & 0x80000000) == 0);
      unsigned int v10 = *((_DWORD *)this + 34);
      if (v6 >= v10)
      {
        unsigned int v11 = *((_DWORD *)this + 35);
        if (v6 + 1 > v11) {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 128, v6 + 1 - v11, 0);
        }
        *((_DWORD *)this + 34) = v6 + 1;
        uint64_t v12 = *((void *)this + 16);
        do
          *(_DWORD *)(v12 + 4 * v10++) = 0;
        while (v10 <= v6);
      }
      ++*(_DWORD *)(*((void *)this + 16) + 4 * v6);
    }
    while (*((_DWORD *)a2 + 40) != v4);
  }
  uint64_t v58 = (void *)((char *)this + 176);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  if (*((_DWORD *)this + 34))
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    unint64_t v15 = 0;
    unsigned int v16 = 0;
    do
    {
      if (v14 == HIDWORD(v64))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v63, 1, 1);
        unsigned int v14 = v64;
        uint64_t v13 = v63;
      }
      *(_DWORD *)(v13 + 4 * v14) = v16;
      unsigned int v14 = v64 + 1;
      LODWORD(v64) = v64 + 1;
      v16 += *(_DWORD *)(*((void *)this + 16) + 4 * v15++);
    }
    while (v15 < *((unsigned int *)this + 34));
    unsigned int v17 = *((_DWORD *)this + 31);
    if (v16 > v17) {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 112, v16 - v17, 0);
    }
    *((_DWORD *)this + 30) = v16;
    unsigned int v18 = *((_DWORD *)this + 47);
    if (v16 > v18) {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v58, v16 - v18, 0);
    }
  }
  else
  {
    unsigned int v16 = 0;
    *((_DWORD *)this + 30) = 0;
  }
  *((_DWORD *)this + 46) = v16;
  unsigned int v19 = *((_DWORD *)this + 43);
  if (v16 + 1 > v19) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 160, v16 + 1 - v19, 0);
  }
  *((_DWORD *)this + 42) = v16 + 1;
  uint64_t v20 = *((void *)this + 20);
  if (v16)
  {
    double v21 = (_DWORD *)*((void *)this + 14);
    long double v22 = (_DWORD *)*v58;
    uint64_t v23 = v16;
    uint64_t v24 = v16;
    double v25 = (_DWORD *)*((void *)this + 20);
    do
    {
      *v21++ = -1;
      *v22++ = -1;
      *v25++ = -1;
      --v24;
    }
    while (v24);
  }
  else
  {
    uint64_t v23 = 0;
  }
  *(_DWORD *)(v20 + 4 * v23) = 0;
  LODWORD(v59) = 0;
  if (*((_DWORD *)a2 + 40))
  {
    int v26 = 0;
    do
    {
      int v62 = v26;
      unsigned int v27 = *((_DWORD *)a2 + 35) > v26;
      do
      {
        uint64_t v28 = *((void *)a2 + 19);
        int v29 = *(_DWORD *)(v28 + 4 * v26);
        int v30 = *(_DWORD *)(v28 + 4 * (v26 + 1));
        LODWORD(v59) = v30;
        if (*((_DWORD *)a2 + 35) > v30)
        {
          if (v66) {
            unsigned int v31 = (-1640531527 * v30) >> -(char)v66;
          }
          else {
            unsigned int v31 = 0;
          }
          int v32 = *(uint64_t **)(v67 + 8 * v31);
          if (v32)
          {
            while (*((_DWORD *)v32 + 2) != v30 || *((_DWORD *)v32 + 3) != v30)
            {
              int v32 = (uint64_t *)*v32;
              if (!v32) {
                goto LABEL_41;
              }
            }
          }
          else
          {
LABEL_41:
            unsigned int v61 = v29 & 0xFFFFF;
            Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)v65, (int *)&v59, &v61);
          }
          ++v27;
        }
        v26 += 2;
      }
      while ((v29 & 0x80000000) == 0);
      unsigned int v61 = 0;
      unsigned int v61 = (*(_DWORD *)(v63 + 4 * v27))++;
      *(_DWORD *)(*((void *)this + 14) + 4 * v61) = v62;
      *(_DWORD *)(*((void *)this + 20) + 4 * v61) = v27;
      Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)this, &v62, &v61);
    }
    while (*((_DWORD *)a2 + 40) != v26);
  }
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  *((_DWORD *)this + 38) = 0;
  if (*((_DWORD *)this + 34))
  {
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    unint64_t v35 = 0;
    int v36 = 0;
    do
    {
      if (v34 == HIDWORD(v60))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v59, 1, 1);
        unsigned int v34 = v60;
        uint64_t v33 = v59;
      }
      *(_DWORD *)(v33 + 4 * v34) = 3 * v36;
      unsigned int v34 = v60 + 1;
      LODWORD(v60) = v60 + 1;
      v36 += *(_DWORD *)(*((void *)this + 16) + 4 * v35) * v35;
      ++v35;
    }
    while (v35 < *((unsigned int *)this + 34));
  }
  else
  {
    int v36 = 0;
  }
  int v37 = (void **)((char *)this + 144);
  unsigned int v38 = 3 * v36;
  unsigned int v39 = *((_DWORD *)this + 39);
  if (3 * v36 > v39) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 144, 3 * v36 - v39, 0);
  }
  *((_DWORD *)this + 38) = v38;
  if (v36)
  {
    if (v38 <= 1) {
      unsigned int v40 = 1;
    }
    else {
      unsigned int v40 = 3 * v36;
    }
    memset(*v37, 255, 4 * v40);
  }
  int v62 = 0;
  if (*((_DWORD *)a2 + 40))
  {
    unsigned int v41 = 0;
    do
    {
      unsigned int v61 = v41;
      Bucket = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this, (int *)&v61);
      if (*Bucket) {
        double v43 = (unsigned int *)(*Bucket + 2);
      }
      else {
        double v43 = 0;
      }
      uint64_t v44 = *v43;
      uint64_t v45 = *(unsigned int *)(*((void *)this + 20) + 4 * v44);
      uint64_t v46 = v59;
      uint64_t v47 = *(unsigned int *)(v59 + 4 * v45);
      *(_DWORD *)(*v58 + 4 * v44) = v47;
      *(_DWORD *)(v46 + 4 * v45) += 3 * v45;
      if (*((_DWORD *)a2 + 35) <= (signed int)v41)
      {
        int v52 = 2 * v45;
      }
      else
      {
        int v48 = *v43;
        double v49 = *v37;
        *((_DWORD *)*v37 + v47) = v48;
        if (v66) {
          unsigned int v50 = (-1640531527 * v41) >> -(char)v66;
        }
        else {
          unsigned int v50 = 0;
        }
        int v51 = (uint64_t *)(v67 + 8 * v50);
        do
        {
          do
            int v51 = (uint64_t *)*v51;
          while (*((_DWORD *)v51 + 2) != v41);
        }
        while (*((_DWORD *)v51 + 3) != v41);
        v49[(v47 + v45)] = *((_DWORD *)v51 + 4);
        int v52 = 2 * v45;
        v49[(v47 + 2 * v45)] = 0;
        LODWORD(v47) = v47 + 1;
      }
      do
      {
        uint64_t v53 = *((void *)a2 + 19);
        unsigned int v54 = *(_DWORD *)(v53 + 4 * v41);
        int v62 = *(_DWORD *)(v53 + 4 * (v41 + 1));
        if (*((_DWORD *)a2 + 35) > v62)
        {
          uint64_t v55 = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this, &v62);
          uint64_t v56 = *v37;
          *((_DWORD *)*v37 + v47) = *((_DWORD *)*v55 + 4);
          v56[(v47 + v45)] = v54 & 0xFFFFF;
          *(float *)&v56[(v47 + v52)] = (float)((v54 >> 20) & 0x3FF);
          LODWORD(v47) = v47 + 1;
        }
        v41 += 2;
      }
      while ((v54 & 0x80000000) == 0);
    }
    while (*((_DWORD *)a2 + 40) != v41);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v59);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return Hash<int,int,IntToUintScope,unsigned int>::~Hash((uint64_t)v65);
}

void sub_213FD6600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  Hash<int,int,IntToUintScope,unsigned int>::~Hash((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t FwdBwd::getBestExitScore(FwdBwd *this)
{
  return 20000;
}

uint64_t FwdBwd::getBestScoreMaybeUpdateFstNode(FwdBwd *this, Node *a2)
{
  return 20000;
}

uint64_t FwdBwd::getBestScoreThisFrame(FwdBwd *this)
{
  return 20000;
}

uint64_t FwdBwd::getNActiveStates(FwdBwd *this)
{
  return 0;
}

uint64_t FwdBwd::makePartialResult()
{
  return 1879048192;
}

uint64_t FwdBwd::getRequiredVirtMapSize(FwdBwd *this)
{
  return 0;
}

uint64_t DgnArray<FwdBwdColumn>::destructAt(uint64_t result, int a2, int a3)
{
  int v3 = a3 + a2;
  if (a3 + a2 > a2)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = v3;
    uint64_t v6 = a2;
    uint64_t v7 = 40 * v3 - 16;
    do
    {
      --v5;
      uint64_t v8 = DgnIArray<Utterance *>::~DgnIArray(*v4 + v7);
      uint64_t result = DgnIArray<Utterance *>::~DgnIArray(v8 - 16);
      v7 -= 40;
    }
    while (v5 > v6);
  }
  return result;
}

uint64_t Hash<int,int,IntToUintScope,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4768;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 16;
  }
  else {
    int v7 = 20;
  }
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_213FD67C0(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<int,int,IntToUintScope,unsigned int>::~Hash(uint64_t a1)
{
  Hash<int,int,IntToUintScope,unsigned int>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<int,int,IntToUintScope,unsigned int>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4768;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t StartupAdapterParamSpecMgr(void)
{
  unint64_t v72 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v72, (uint64_t)"AdaptationSilenceAccumulateFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationSilenceAccumulateFactorDoubleHistory);
  int64_t v71 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v71, (uint64_t)"AdaptationNonSilenceAccumulateFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationNonSilenceAccumulateFactorDoubleHistory);
  int v66 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v66, (uint64_t)"AdaptationAccumulateDoublyGenericBackoffPels", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationAccumulateDoublyGenericBackoffPelsBoolHistory);
  uint64_t v65 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v65, (uint64_t)"AdaptationAccumulateRightGenericBackoffPels", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationAccumulateRightGenericBackoffPelsBoolHistory);
  unsigned int v61 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v61, (uint64_t)"AdaptationAccumulateLeftGenericBackoffPels", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationAccumulateLeftGenericBackoffPelsBoolHistory);
  uint64_t v68 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v68, (uint64_t)"AdaptationConTransAccInitFromIdentityMatrix", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccInitFromIdentityMatrixBoolHistory);
  v70 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v70, (uint64_t)"AdaptationMicUseDiagonal", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationMicUseDiagonalBoolHistory);
  uint64_t v69 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v69, (uint64_t)"AdaptationConTransAccRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccRelevanceIntHistory);
  uint64_t v59 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v59, (uint64_t)"AdaptationConTransAccComputeTransformMatrix", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccComputeTransformMatrixBoolHistory);
  uint64_t v58 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v58, (uint64_t)"AdaptationConTransAccComputeTranslation", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccComputeTranslationBoolHistory);
  uint64_t v57 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v57, (uint64_t)"AdaptationConTransAccDiagonalTransforms", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccDiagonalTransformsBoolHistory);
  uint64_t v63 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v63, (uint64_t)"AdaptationConTransAccMinAccumFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccMinAccumFramesIntHistory);
  uint64_t v56 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v56, (uint64_t)"AdaptationConTransAccMaxNumTransforms", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccMaxNumTransformsIntHistory);
  uint64_t v64 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v64, (uint64_t)"AdaptationConTransAccOnlineNumTransformsMin", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccOnlineNumTransformsMinIntHistory);
  int v62 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v62, (uint64_t)"AdaptationConTransAccOnlineNumTransformsRange", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccOnlineNumTransformsRangeIntHistory);
  uint64_t v55 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v55, (uint64_t)"AdaptationConTransAccOnlineCommitIntervalUtts", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccOnlineCommitIntervalUttsIntHistory);
  unsigned int v54 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v54, (uint64_t)"AdaptationConTransAccOnlineCommitIntervalSeconds", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccOnlineCommitIntervalSecondsIntHistory);
  int v48 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v48, (uint64_t)"AdaptationConTransAccSilenceToSpeechWeight", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccSilenceToSpeechWeightIntHistory);
  uint64_t v60 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v60, (uint64_t)"AdaptationDTMMIntruderMinMicroseconds", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMIntruderMinMicrosecondsIntHistory);
  uint64_t v67 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v67, (uint64_t)"AdaptationDTMMNumIterations", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMNumIterationsIntHistory);
  unsigned int v40 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v40, (uint64_t)"AdaptationBaumWelchMaxUttSeconds", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationBaumWelchMaxUttSecondsIntHistory);
  unsigned int v38 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v38, (uint64_t)"AdaptationBaumWelchScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationBaumWelchScaleDoubleHistory);
  int v37 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v37, (uint64_t)"AdaptationBaumWelchThreshScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationBaumWelchThreshScoreIntHistory);
  double v49 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v49, (uint64_t)"AdaptationConTransAccOnlineDecayInterval", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccOnlineDecayIntervalIntHistory);
  double v43 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v43, (uint64_t)"AdaptationConTransAccOnlineDecayFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccOnlineDecayFactorDoubleHistory);
  int v42 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v42, (uint64_t)"AdaptationConTransAccOnlineIncludeCurrentTransform", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccOnlineIncludeCurrentTransformBoolHistory);
  unsigned int v39 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v39, (uint64_t)"AdaptationConTransAccNumIterations", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccNumIterationsIntHistory);
  unint64_t v35 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v35, (uint64_t)"AdaptationConTransAccGlobalSmoothingMinAccumFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccGlobalSmoothingMinAccumFramesIntHistory);
  unsigned int v34 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v34, (uint64_t)"AdaptationConTransAccGlobalSmoothingRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccGlobalSmoothingRelevanceIntHistory);
  int v29 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v29, (uint64_t)"AdaptationConTransAccComponentBackoffPercent", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccComponentBackoffPercentDoubleHistory);
  uint64_t v33 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v33, (uint64_t)"AdaptationConTransAccMaxTotalComponentProbability", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccMaxTotalComponentProbabilityDoubleHistory);
  int v36 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v36, (uint64_t)"AdaptationConTransAccRootGenoneClassMinFrameCount", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccRootGenoneClassMinFrameCountIntHistory);
  uint64_t v28 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v28, (uint64_t)"AdaptationConTransAccGenoneClassMinFrameCount", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccGenoneClassMinFrameCountIntHistory);
  uint64_t v53 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v53, (uint64_t)"AdaptationTransAccGlobalSmoothingMinAccumFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccGlobalSmoothingMinAccumFramesIntHistory);
  int v52 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v52, (uint64_t)"AdaptationTransAccGlobalSmoothingRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccGlobalSmoothingRelevanceIntHistory);
  int v51 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v51, (uint64_t)"AdaptationTransAccMaxNumTransforms", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccMaxNumTransformsIntHistory);
  unsigned int v50 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v50, (uint64_t)"AdaptationTransAccMinAccumFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccMinAccumFramesIntHistory);
  uint64_t v47 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v47, (uint64_t)"AdaptationTransAccComponentBackoffPercent", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccComponentBackoffPercentDoubleHistory);
  uint64_t v44 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v44, (uint64_t)"AdaptationTransAccGenoneClassMinFrameCount", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccGenoneClassMinFrameCountIntHistory);
  uint64_t v45 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v45, (uint64_t)"AdaptationTransAccMaxTotalComponentProbability", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccMaxTotalComponentProbabilityDoubleHistory);
  uint64_t v46 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v46, (uint64_t)"AdaptationTransAccRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccRelevanceIntHistory);
  unsigned int v41 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v41, (uint64_t)"AdaptationTransAccNumIterations", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationTransAccNumIterationsIntHistory);
  unsigned int v17 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v17, (uint64_t)"AdaptationBasisMeanRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationBasisMeanRelevanceIntHistory);
  uint64_t v12 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v12, (uint64_t)"AdaptationBasisDevRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationBasisDevRelevanceIntHistory);
  int v32 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v32, (uint64_t)"AdaptationLogWeightRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationLogWeightRelevanceIntHistory);
  unsigned int v31 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v31, (uint64_t)"AdaptationMaxLogWeight", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationMaxLogWeightIntHistory);
  int v30 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v30, (uint64_t)"AdaptationDurationRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDurationRelevanceIntHistory);
  unsigned int v27 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v27, (uint64_t)"AdaptationDTMMScoreScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMScoreScaleDoubleHistory);
  double v25 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v25, (uint64_t)"AdaptationDTMMNormalizedDeltaRange", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMNormalizedDeltaRangeDoubleHistory);
  uint64_t v24 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v24, (uint64_t)"AdaptationDTMMNormalizedDeltaMin", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMNormalizedDeltaMinDoubleHistory);
  int v26 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v26, (uint64_t)"AdaptationDTMMUniqMaxDeltaMicroseconds", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMUniqMaxDeltaMicrosecondsIntHistory);
  long double v22 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v22, (uint64_t)"AdaptationDTMMMaxIntrudersPerStartTimeSegment", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMMaxIntrudersPerStartTimeSegmentIntHistory);
  uint64_t v23 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v23, (uint64_t)"AdaptationDTMMStartTimeSegmentMaxDeltaMicroseconds", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMStartTimeSegmentMaxDeltaMicrosecondsIntHistory);
  uint64_t v20 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v20, (uint64_t)"AdaptationDTMMMeanGradientWeight", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMMeanGradientWeightDoubleHistory);
  unsigned int v14 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v14, (uint64_t)"AdaptationDTMMDevGradientWeight", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMDevGradientWeightDoubleHistory);
  double v21 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v21, (uint64_t)"AdaptationDTMMPositiveGradientWeight", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMPositiveGradientWeightDoubleHistory);
  unsigned int v19 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v19, (uint64_t)"AdaptationDTMMNegativeGradientWeight", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMNegativeGradientWeightDoubleHistory);
  unsigned int v16 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v16, (uint64_t)"AdaptationDTMMMinPositiveCount", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMMinPositiveCountDoubleHistory);
  unsigned int v11 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v11, (uint64_t)"AdaptationDTMMMinNegativeCount", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMMinNegativeCountDoubleHistory);
  v0 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v0, (uint64_t)"AdaptationDTMMMinTotalCount", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMMinTotalCountDoubleHistory);
  unint64_t v15 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v15, (uint64_t)"AdaptationDTMMSmoothGradients", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMSmoothGradientsBoolHistory);
  uint64_t v13 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v13, (uint64_t)"AdaptationDTMMSmoothRelevance", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMSmoothRelevanceIntHistory);
  uint64_t v1 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v1, (uint64_t)"AdaptationDTMMErrorFunction", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMErrorFunctionEnumHistory);
  uint64_t v2 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v2, (uint64_t)"AdaptationDTMMErrorBeta", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMErrorBetaDoubleHistory);
  int v3 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v3, (uint64_t)"AdaptationDTMMErrorOffset", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMErrorOffsetDoubleHistory);
  uint64_t v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"AdaptationDTMMMaxIntruderCount", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationDTMMMaxIntruderCountIntHistory);
  unsigned int v18 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v18, (uint64_t)"AdaptationConTransAccComputeExtraGlobalTransform", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccComputeExtraGlobalTransformBoolHistory);
  uint64_t v5 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v5, (uint64_t)"AdaptationConTransAccComputeHierScorerTransforms", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccComputeHierScorerTransformsBoolHistory);
  int v6 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v6, (uint64_t)"AdaptationConTransAccEconomizeCofactorComputation", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccEconomizeCofactorComputationBoolHistory);
  int v7 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v7, (uint64_t)"AdaptationConTransAccRidgeRegularizationFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccRidgeRegularizationFactorIntHistory);
  uint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v8, (uint64_t)"AdaptationConTransAccDecomposedAccumCutoffPercent", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sAdaptationConTransAccDecomposedAccumCutoffPercentIntHistory);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v66);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v61);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v65);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v40);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v38);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v37);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v48);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v29);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v59);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v58);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v57);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v28);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v35);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v34);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v68);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v56);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v33);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v63);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v39);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v54);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v55);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v43);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v49);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v42);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v64);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v62);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v69);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v36);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v60);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v22);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v24);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v25);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v67);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v27);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v23);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v26);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v30);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v32);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v31);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v70);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v71);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v72);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v47);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v44);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v53);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v52);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v51);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v45);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v50);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v41);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v46);
  ParamSpecMgr::addParam(qword_26AB82A48, (ParamSpec *)v18);
  unsigned int v9 = (ParamSpecMgr *)qword_26AB82A48;

  return ParamSpecMgr::sortParams(v9);
}

_DWORD *AdapterParamSet::AdapterParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(void *)a1 = &unk_26C4E07D8;
  AdapterParamSet::setDefaults((AdapterParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_213FD7918(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  DgnString::~DgnString(v3);
  _Unwind_Resume(a1);
}

uint64_t AdapterParamSet::AdapterParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  uint64_t v11 = (_OWORD *)(a1 + 308);
  uint64_t v12 = (_OWORD *)(a2 + 308);
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)a1 = &unk_26C4E07D8;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  uint64_t v13 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 140) = *(unsigned char *)(a2 + 140);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  uint64_t v14 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v14;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *uint64_t v11 = *v12;
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  *(unsigned char *)(a1 + 332) = *(unsigned char *)(a2 + 332);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(_OWORD *)((char *)v11 + 52) = *(_OWORD *)((char *)v12 + 52);
  uint64_t v15 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v15;
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  return a1;
}

uint64_t AdapterParamSet::setDefaults(AdapterParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + 40) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 1, 0, 0, a5, a6, a7, a8);
  *((unsigned char *)this + 41) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 2, 0, 0, v9, v10, v11, v12);
  *((unsigned char *)this + 42) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 3, 0, 0, v13, v14, v15, v16);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 4, 0, 0, v17, v18, v19, v20);
  *((_DWORD *)this + 12) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 13) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 6, 0, 0, v25, v26, v27, v28);
  *((double *)this + 7) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 7, 0, 0, v29, v30, v31, v32);
  *((_DWORD *)this + 16) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 8, 0, 0, v33, v34, v35, v36);
  *((_DWORD *)this + 17) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 9, 0, 0, v37, v38, v39, v40);
  *((double *)this + 9) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 10, 0, 0, v41, v42, v43, v44);
  *((unsigned char *)this + 80) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 11, 0, 0, v45, v46, v47, v48);
  *((unsigned char *)this + 81) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 12, 0, 0, v49, v50, v51, v52);
  *((unsigned char *)this + 82) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 13, 0, 0, v53, v54, v55, v56);
  *((unsigned char *)this + 83) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 14, 0, 0, v57, v58, v59, v60);
  *((_DWORD *)this + 21) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 15, 0, 0, v61, v62, v63, v64);
  *((_DWORD *)this + 22) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 16, 0, 0, v65, v66, v67, v68);
  *((_DWORD *)this + 23) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 17, 0, 0, v69, v70, v71, v72);
  *((unsigned char *)this + 96) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 18, 0, 0, v73, v74, v75, v76);
  *((_DWORD *)this + 25) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 19, 0, 0, v77, v78, v79, v80);
  *((double *)this + 13) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 20, 0, 0, v81, v82, v83, v84);
  *((_DWORD *)this + 28) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 21, 0, 0, v85, v86, v87, v88);
  *((_DWORD *)this + 29) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 22, 0, 0, v89, v90, v91, v92);
  *((_DWORD *)this + 30) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 23, 0, 0, v93, v94, v95, v96);
  *((_DWORD *)this + 31) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 24, 0, 0, v97, v98, v99, v100);
  *((double *)this + 16) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 25, 0, 0, v101, v102, v103, v104);
  *((_DWORD *)this + 34) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 26, 0, 0, v105, v106, v107, v108);
  *((unsigned char *)this + 140) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 27, 0, 0, v109, v110, v111, v112);
  *((_DWORD *)this + 36) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 28, 0, 0, v113, v114, v115, v116);
  *((_DWORD *)this + 37) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 29, 0, 0, v117, v118, v119, v120);
  *((_DWORD *)this + 38) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 30, 0, 0, v121, v122, v123, v124);
  *((_DWORD *)this + 39) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 31, 0, 0, v125, v126, v127, v128);
  *((_DWORD *)this + 40) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 32, 0, 0, v129, v130, v131, v132);
  *((unsigned char *)this + 164) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 33, 0, 0, v133, v134, v135, v136);
  *((_DWORD *)this + 42) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 34, 0, 0, v137, v138, v139, v140);
  *((double *)this + 22) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 35, 0, 0, v141, v142, v143, v144);
  *((double *)this + 23) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 36, 0, 0, v145, v146, v147, v148);
  *((_DWORD *)this + 48) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A48, 37, v149, v150, v151, v152, v153, v154);
  *((double *)this + 25) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 38, 0, 0, v155, v156, v157, v158);
  *((_DWORD *)this + 52) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 39, 0, 0, v159, v160, v161, v162);
  *((_DWORD *)this + 53) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 40, 0, 0, v163, v164, v165, v166);
  *((_DWORD *)this + 54) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 41, 0, 0, v167, v168, v169, v170);
  *((double *)this + 28) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 42, 0, 0, v171, v172, v173, v174);
  *((double *)this + 29) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 43, 0, 0, v175, v176, v177, v178);
  *((double *)this + 30) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 44, 0, 0, v179, v180, v181, v182);
  *((double *)this + 31) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 45, 0, 0, v183, v184, v185, v186);
  *((double *)this + 32) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 46, 0, 0, v187, v188, v189, v190);
  *((double *)this + 33) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 47, 0, 0, v191, v192, v193, v194);
  *((double *)this + 34) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 48, 0, 0, v195, v196, v197, v198);
  *((_DWORD *)this + 70) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 49, 0, 0, v199, v200, v201, v202);
  *((double *)this + 36) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 50, 0, 0, v203, v204, v205, v206);
  *((double *)this + 37) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 51, 0, 0, v207, v208, v209, v210);
  *((unsigned char *)this + 304) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 52, 0, 0, v211, v212, v213, v214);
  *((_DWORD *)this + 77) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 53, 0, 0, v215, v216, v217, v218);
  *((_DWORD *)this + 78) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 54, 0, 0, v219, v220, v221, v222);
  *((_DWORD *)this + 79) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 55, 0, 0, v223, v224, v225, v226);
  *((_DWORD *)this + 80) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 56, 0, 0, v227, v228, v229, v230);
  *((_DWORD *)this + 81) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 57, 0, 0, v231, v232, v233, v234);
  *((_DWORD *)this + 82) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 58, 0, 0, v235, v236, v237, v238);
  *((unsigned char *)this + 332) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A48, 59, 0, 0, v239, v240, v241, v242);
  *((double *)this + 42) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 60, 0, 0, v243, v244, v245, v246);
  *((double *)this + 43) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 61, 0, 0, v247, v248, v249, v250);
  *((double *)this + 44) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 62, 0, 0, v251, v252, v253, v254);
  *((_DWORD *)this + 90) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 63, 0, 0, v255, v256, v257, v258);
  *((_DWORD *)this + 91) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 64, 0, 0, v259, v260, v261, v262);
  *((_DWORD *)this + 92) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 65, 0, 0, v263, v264, v265, v266);
  *((_DWORD *)this + 93) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 66, 0, 0, v267, v268, v269, v270);
  *((double *)this + 47) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A48, 67, 0, 0, v271, v272, v273, v274);
  *((_DWORD *)this + 96) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 68, 0, 0, v275, v276, v277, v278);
  *((_DWORD *)this + 97) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 69, 0, 0, v279, v280, v281, v282);
  uint64_t result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A48, 70, 0, 0, v283, v284, v285, v286);
  *((_DWORD *)this + 98) = result;
  return result;
}

uint64_t AdapterParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t result = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v4 = 6;
    if (a2 == 3) {
      uint64_t v4 = 0;
    }
    result += ((8 * (a2 != 3)) | (32 * (a2 != 3)) | ((unint64_t)(a2 != 3) << 6) | v4)
            + v4
            + 208 * (a2 != 3);
  }
  return result;
}

BOOL AdapterParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 1;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[40];
      return v8 != 0;
    case 2:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 2;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[41];
      return v8 != 0;
    case 3:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 3;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[42];
      return v8 != 0;
    case 4:
      uint64_t v9 = "int";
      char v10 = 4;
      goto LABEL_98;
    case 5:
      uint64_t v9 = "int";
      char v10 = 5;
      goto LABEL_98;
    case 6:
      uint64_t v9 = "int";
      char v10 = 6;
      goto LABEL_98;
    case 7:
      uint64_t v9 = "double";
      char v10 = 7;
      goto LABEL_98;
    case 8:
      uint64_t v9 = "int";
      char v10 = 8;
      goto LABEL_98;
    case 9:
      uint64_t v9 = "int";
      char v10 = 9;
      goto LABEL_98;
    case 10:
      uint64_t v9 = "double";
      char v10 = 10;
      goto LABEL_98;
    case 11:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 11;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[80];
      return v8 != 0;
    case 12:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 12;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[81];
      return v8 != 0;
    case 13:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 13;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[82];
      return v8 != 0;
    case 14:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 14;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[83];
      return v8 != 0;
    case 15:
      uint64_t v9 = "int";
      char v10 = 15;
      goto LABEL_98;
    case 16:
      uint64_t v9 = "int";
      char v10 = 16;
      goto LABEL_98;
    case 17:
      uint64_t v9 = "int";
      char v10 = 17;
      goto LABEL_98;
    case 18:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 18;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[96];
      return v8 != 0;
    case 19:
      uint64_t v9 = "int";
      char v10 = 19;
      goto LABEL_98;
    case 20:
      uint64_t v9 = "double";
      char v10 = 20;
      goto LABEL_98;
    case 21:
      uint64_t v9 = "int";
      char v10 = 21;
      goto LABEL_98;
    case 22:
      uint64_t v9 = "int";
      char v10 = 22;
      goto LABEL_98;
    case 23:
      uint64_t v9 = "int";
      char v10 = 23;
      goto LABEL_98;
    case 24:
      uint64_t v9 = "int";
      char v10 = 24;
      goto LABEL_98;
    case 25:
      uint64_t v9 = "double";
      char v10 = 25;
      goto LABEL_98;
    case 26:
      uint64_t v9 = "int";
      char v10 = 26;
      goto LABEL_98;
    case 27:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 27;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[140];
      return v8 != 0;
    case 28:
      uint64_t v9 = "int";
      char v10 = 28;
      goto LABEL_98;
    case 29:
      uint64_t v9 = "int";
      char v10 = 29;
      goto LABEL_98;
    case 30:
      uint64_t v9 = "int";
      char v10 = 30;
      goto LABEL_98;
    case 31:
      uint64_t v9 = "int";
      char v10 = 31;
      goto LABEL_98;
    case 32:
      uint64_t v9 = "int";
      char v10 = 32;
      goto LABEL_98;
    case 33:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 33;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[164];
      return v8 != 0;
    case 34:
      uint64_t v9 = "int";
      char v10 = 34;
      goto LABEL_98;
    case 35:
      uint64_t v9 = "double";
      char v10 = 35;
      goto LABEL_98;
    case 36:
      uint64_t v9 = "double";
      char v10 = 36;
      goto LABEL_98;
    case 37:
      uint64_t v9 = "enum";
      char v10 = 37;
      goto LABEL_98;
    case 38:
      uint64_t v9 = "double";
      char v10 = 38;
      goto LABEL_98;
    case 39:
      uint64_t v9 = "int";
      char v10 = 39;
      goto LABEL_98;
    case 40:
      uint64_t v9 = "int";
      char v10 = 40;
      goto LABEL_98;
    case 41:
      uint64_t v9 = "int";
      char v10 = 41;
      goto LABEL_98;
    case 42:
      uint64_t v9 = "double";
      char v10 = 42;
      goto LABEL_98;
    case 43:
      uint64_t v9 = "double";
      char v10 = 43;
      goto LABEL_98;
    case 44:
      uint64_t v9 = "double";
      char v10 = 44;
      goto LABEL_98;
    case 45:
      uint64_t v9 = "double";
      char v10 = 45;
      goto LABEL_98;
    case 46:
      uint64_t v9 = "double";
      char v10 = 46;
      goto LABEL_98;
    case 47:
      uint64_t v9 = "double";
      char v10 = 47;
      goto LABEL_98;
    case 48:
      uint64_t v9 = "double";
      char v10 = 48;
      goto LABEL_98;
    case 49:
      uint64_t v9 = "int";
      char v10 = 49;
      goto LABEL_98;
    case 50:
      uint64_t v9 = "double";
      char v10 = 50;
      goto LABEL_98;
    case 51:
      uint64_t v9 = "double";
      char v10 = 51;
      goto LABEL_98;
    case 52:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 52;
        goto LABEL_113;
      }
      if (a3) {
        goto LABEL_96;
      }
      int v8 = a1[304];
      return v8 != 0;
    case 53:
      uint64_t v9 = "int";
      char v10 = 53;
      goto LABEL_98;
    case 54:
      uint64_t v9 = "int";
      char v10 = 54;
      goto LABEL_98;
    case 55:
      uint64_t v9 = "int";
      char v10 = 55;
      goto LABEL_98;
    case 56:
      uint64_t v9 = "int";
      char v10 = 56;
      goto LABEL_98;
    case 57:
      uint64_t v9 = "int";
      char v10 = 57;
      goto LABEL_98;
    case 58:
      uint64_t v9 = "int";
      char v10 = 58;
      goto LABEL_98;
    case 59:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A48;
        int v13 = 59;
LABEL_113:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!a3)
      {
        int v8 = a1[332];
        return v8 != 0;
      }
LABEL_96:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 60:
      uint64_t v9 = "double";
      char v10 = 60;
      goto LABEL_98;
    case 61:
      uint64_t v9 = "double";
      char v10 = 61;
      goto LABEL_98;
    case 62:
      uint64_t v9 = "double";
      char v10 = 62;
      goto LABEL_98;
    case 63:
      uint64_t v9 = "int";
      char v10 = 63;
      goto LABEL_98;
    case 64:
      uint64_t v9 = "int";
      char v10 = 64;
      goto LABEL_98;
    case 65:
      uint64_t v9 = "int";
      char v10 = 65;
      goto LABEL_98;
    case 66:
      uint64_t v9 = "int";
      char v10 = 66;
      goto LABEL_98;
    case 67:
      uint64_t v9 = "double";
      char v10 = 67;
      goto LABEL_98;
    case 68:
      uint64_t v9 = "int";
      char v10 = 68;
      goto LABEL_98;
    case 69:
      uint64_t v9 = "int";
      char v10 = 69;
      goto LABEL_98;
    case 70:
      uint64_t v9 = "int";
      char v10 = 70;
LABEL_98:
      throwWrongTypeForParamId(v10, v9, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t AdapterParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_103;
    case 2:
      int v8 = "BOOL";
      char v9 = 2;
      goto LABEL_103;
    case 3:
      int v8 = "BOOL";
      char v9 = 3;
      goto LABEL_103;
    case 4:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[11];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 4;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 4;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 4;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 5:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[12];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 5;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 5;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 5;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 6:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[13];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 6;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 6;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 6;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 7:
      int v8 = "double";
      char v9 = 7;
      goto LABEL_103;
    case 8:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[16];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 8;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 8;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 8;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 9:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[17];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 9;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 9;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 9;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 10:
      int v8 = "double";
      char v9 = 10;
      goto LABEL_103;
    case 11:
      int v8 = "BOOL";
      char v9 = 11;
      goto LABEL_103;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_103;
    case 13:
      int v8 = "BOOL";
      char v9 = 13;
      goto LABEL_103;
    case 14:
      int v8 = "BOOL";
      char v9 = 14;
      goto LABEL_103;
    case 15:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[21];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 15;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 15;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 15;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 16:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[22];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 16;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 16;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 16;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 17:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[23];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 17;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 17;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 17;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 18:
      int v8 = "BOOL";
      char v9 = 18;
      goto LABEL_103;
    case 19:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[25];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 19;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 19;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 19;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 20:
      int v8 = "double";
      char v9 = 20;
      goto LABEL_103;
    case 21:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[28];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 21;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 21;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 21;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 22:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[29];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 22;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 22;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 22;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 23:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[30];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 23;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 23;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 23;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 24:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[31];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 24;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 24;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 24;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 25:
      int v8 = "double";
      char v9 = 25;
      goto LABEL_103;
    case 26:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[34];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 26;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 26;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 26;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 27:
      int v8 = "BOOL";
      char v9 = 27;
      goto LABEL_103;
    case 28:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[36];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 28;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 28;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 28;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 29:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[37];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 29;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 29;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 29;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 30:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[38];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 30;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 30;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 30;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 31:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[39];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 31;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 31;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 31;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 32:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[40];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 32;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 32;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 32;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 33:
      int v8 = "BOOL";
      char v9 = 33;
      goto LABEL_103;
    case 34:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[42];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 34;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 34;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 34;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 35:
      int v8 = "double";
      char v9 = 35;
      goto LABEL_103;
    case 36:
      int v8 = "double";
      char v9 = 36;
      goto LABEL_103;
    case 37:
      int v8 = "enum";
      char v9 = 37;
      goto LABEL_103;
    case 38:
      int v8 = "double";
      char v9 = 38;
      goto LABEL_103;
    case 39:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[52];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 39;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 39;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 39;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 40:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[53];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 40;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 40;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 40;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 41:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[54];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 41;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 41;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 41;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 42:
      int v8 = "double";
      char v9 = 42;
      goto LABEL_103;
    case 43:
      int v8 = "double";
      char v9 = 43;
      goto LABEL_103;
    case 44:
      int v8 = "double";
      char v9 = 44;
      goto LABEL_103;
    case 45:
      int v8 = "double";
      char v9 = 45;
      goto LABEL_103;
    case 46:
      int v8 = "double";
      char v9 = 46;
      goto LABEL_103;
    case 47:
      int v8 = "double";
      char v9 = 47;
      goto LABEL_103;
    case 48:
      int v8 = "double";
      char v9 = 48;
      goto LABEL_103;
    case 49:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[70];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 49;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 49;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 49;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 50:
      int v8 = "double";
      char v9 = 50;
      goto LABEL_103;
    case 51:
      int v8 = "double";
      char v9 = 51;
      goto LABEL_103;
    case 52:
      int v8 = "BOOL";
      char v9 = 52;
      goto LABEL_103;
    case 53:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[77];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 53;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 53;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 53;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 54:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[78];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 54;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 54;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 54;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 55:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[79];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 55;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 55;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 55;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 56:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[80];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 56;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 56;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 56;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 57:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[81];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 57;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 57;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 57;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 58:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[82];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 58;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 58;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 58;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 59:
      int v8 = "BOOL";
      char v9 = 59;
      goto LABEL_103;
    case 60:
      int v8 = "double";
      char v9 = 60;
      goto LABEL_103;
    case 61:
      int v8 = "double";
      char v9 = 61;
      goto LABEL_103;
    case 62:
      int v8 = "double";
      char v9 = 62;
      goto LABEL_103;
    case 63:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[90];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 63;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 63;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 63;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 64:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[91];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 64;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 64;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 64;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 65:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[92];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 65;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 65;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 65;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 66:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[93];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 66;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 66;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 66;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 67:
      int v8 = "double";
      char v9 = 67;
LABEL_103:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      return 0;
    case 68:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[96];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 68;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 68;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 68;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 69:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[97];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 69;
          goto LABEL_223;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 69;
          goto LABEL_225;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 69;
          goto LABEL_227;
        default:
          goto LABEL_113;
      }
      return result;
    case 70:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[98];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 70;
LABEL_223:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 70;
LABEL_225:
          uint64_t v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 70;
LABEL_227:
          uint64_t v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_113:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

double AdapterParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_94;
    case 2:
      int v8 = "BOOL";
      char v9 = 2;
      goto LABEL_94;
    case 3:
      int v8 = "BOOL";
      char v9 = 3;
      goto LABEL_94;
    case 4:
      int v8 = "int";
      char v9 = 4;
      goto LABEL_94;
    case 5:
      int v8 = "int";
      char v9 = 5;
      goto LABEL_94;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_94;
    case 7:
      switch((int)a3)
      {
        case 0:
          double result = a1[7];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 7;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 7;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 7;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 8:
      int v8 = "int";
      char v9 = 8;
      goto LABEL_94;
    case 9:
      int v8 = "int";
      char v9 = 9;
      goto LABEL_94;
    case 10:
      switch((int)a3)
      {
        case 0:
          double result = a1[9];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 10;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 10;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 10;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 11:
      int v8 = "BOOL";
      char v9 = 11;
      goto LABEL_94;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_94;
    case 13:
      int v8 = "BOOL";
      char v9 = 13;
      goto LABEL_94;
    case 14:
      int v8 = "BOOL";
      char v9 = 14;
      goto LABEL_94;
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_94;
    case 16:
      int v8 = "int";
      char v9 = 16;
      goto LABEL_94;
    case 17:
      int v8 = "int";
      char v9 = 17;
      goto LABEL_94;
    case 18:
      int v8 = "BOOL";
      char v9 = 18;
      goto LABEL_94;
    case 19:
      int v8 = "int";
      char v9 = 19;
      goto LABEL_94;
    case 20:
      switch((int)a3)
      {
        case 0:
          double result = a1[13];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 20;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 20;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 20;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 21:
      int v8 = "int";
      char v9 = 21;
      goto LABEL_94;
    case 22:
      int v8 = "int";
      char v9 = 22;
      goto LABEL_94;
    case 23:
      int v8 = "int";
      char v9 = 23;
      goto LABEL_94;
    case 24:
      int v8 = "int";
      char v9 = 24;
      goto LABEL_94;
    case 25:
      switch((int)a3)
      {
        case 0:
          double result = a1[16];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 25;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 25;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 25;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 26:
      int v8 = "int";
      char v9 = 26;
      goto LABEL_94;
    case 27:
      int v8 = "BOOL";
      char v9 = 27;
      goto LABEL_94;
    case 28:
      int v8 = "int";
      char v9 = 28;
      goto LABEL_94;
    case 29:
      int v8 = "int";
      char v9 = 29;
      goto LABEL_94;
    case 30:
      int v8 = "int";
      char v9 = 30;
      goto LABEL_94;
    case 31:
      int v8 = "int";
      char v9 = 31;
      goto LABEL_94;
    case 32:
      int v8 = "int";
      char v9 = 32;
      goto LABEL_94;
    case 33:
      int v8 = "BOOL";
      char v9 = 33;
      goto LABEL_94;
    case 34:
      int v8 = "int";
      char v9 = 34;
      goto LABEL_94;
    case 35:
      switch((int)a3)
      {
        case 0:
          double result = a1[22];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 35;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 35;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 35;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 36:
      switch((int)a3)
      {
        case 0:
          double result = a1[23];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 36;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 36;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 36;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 37:
      int v8 = "enum";
      char v9 = 37;
      goto LABEL_94;
    case 38:
      switch((int)a3)
      {
        case 0:
          double result = a1[25];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 38;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 38;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 38;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 39:
      int v8 = "int";
      char v9 = 39;
      goto LABEL_94;
    case 40:
      int v8 = "int";
      char v9 = 40;
      goto LABEL_94;
    case 41:
      int v8 = "int";
      char v9 = 41;
      goto LABEL_94;
    case 42:
      switch((int)a3)
      {
        case 0:
          double result = a1[28];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 42;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 42;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 42;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 43:
      switch((int)a3)
      {
        case 0:
          double result = a1[29];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 43;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 43;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 43;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 44:
      switch((int)a3)
      {
        case 0:
          double result = a1[30];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 44;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 44;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 44;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 45:
      switch((int)a3)
      {
        case 0:
          double result = a1[31];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 45;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 45;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 45;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 46:
      switch((int)a3)
      {
        case 0:
          double result = a1[32];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 46;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 46;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 46;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 47:
      switch((int)a3)
      {
        case 0:
          double result = a1[33];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 47;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 47;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 47;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 48:
      switch((int)a3)
      {
        case 0:
          double result = a1[34];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 48;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 48;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 48;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 49:
      int v8 = "int";
      char v9 = 49;
      goto LABEL_94;
    case 50:
      switch((int)a3)
      {
        case 0:
          double result = a1[36];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 50;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 50;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 50;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 51:
      switch((int)a3)
      {
        case 0:
          double result = a1[37];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 51;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 51;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 51;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 52:
      int v8 = "BOOL";
      char v9 = 52;
      goto LABEL_94;
    case 53:
      int v8 = "int";
      char v9 = 53;
      goto LABEL_94;
    case 54:
      int v8 = "int";
      char v9 = 54;
      goto LABEL_94;
    case 55:
      int v8 = "int";
      char v9 = 55;
      goto LABEL_94;
    case 56:
      int v8 = "int";
      char v9 = 56;
      goto LABEL_94;
    case 57:
      int v8 = "int";
      char v9 = 57;
      goto LABEL_94;
    case 58:
      int v8 = "int";
      char v9 = 58;
      goto LABEL_94;
    case 59:
      int v8 = "BOOL";
      char v9 = 59;
      goto LABEL_94;
    case 60:
      switch((int)a3)
      {
        case 0:
          double result = a1[42];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 60;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 60;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 60;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 61:
      switch((int)a3)
      {
        case 0:
          double result = a1[43];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 61;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 61;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 61;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 62:
      switch((int)a3)
      {
        case 0:
          double result = a1[44];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 62;
          goto LABEL_155;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 62;
          goto LABEL_157;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 62;
          goto LABEL_159;
        default:
          goto LABEL_90;
      }
      return result;
    case 63:
      int v8 = "int";
      char v9 = 63;
      goto LABEL_94;
    case 64:
      int v8 = "int";
      char v9 = 64;
      goto LABEL_94;
    case 65:
      int v8 = "int";
      char v9 = 65;
      goto LABEL_94;
    case 66:
      int v8 = "int";
      char v9 = 66;
      goto LABEL_94;
    case 67:
      switch((int)a3)
      {
        case 0:
          double result = a1[47];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A48;
          int v12 = 67;
LABEL_155:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A48;
          int v14 = 67;
LABEL_157:
          uint64_t v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A48;
          int v16 = 67;
LABEL_159:
          uint64_t v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_90:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 68:
      int v8 = "int";
      char v9 = 68;
      goto LABEL_94;
    case 69:
      int v8 = "int";
      char v9 = 69;
      goto LABEL_94;
    case 70:
      int v8 = "int";
      char v9 = 70;
LABEL_94:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

uint64_t AdapterParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_73;
    case 2:
      int v8 = "BOOL";
      char v9 = 2;
      goto LABEL_73;
    case 3:
      int v8 = "BOOL";
      char v9 = 3;
      goto LABEL_73;
    case 4:
      int v8 = "int";
      char v9 = 4;
      goto LABEL_73;
    case 5:
      int v8 = "int";
      char v9 = 5;
      goto LABEL_73;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_73;
    case 7:
      int v8 = "double";
      char v9 = 7;
      goto LABEL_73;
    case 8:
      int v8 = "int";
      char v9 = 8;
      goto LABEL_73;
    case 9:
      int v8 = "int";
      char v9 = 9;
      goto LABEL_73;
    case 10:
      int v8 = "double";
      char v9 = 10;
      goto LABEL_73;
    case 11:
      int v8 = "BOOL";
      char v9 = 11;
      goto LABEL_73;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_73;
    case 13:
      int v8 = "BOOL";
      char v9 = 13;
      goto LABEL_73;
    case 14:
      int v8 = "BOOL";
      char v9 = 14;
      goto LABEL_73;
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_73;
    case 16:
      int v8 = "int";
      char v9 = 16;
      goto LABEL_73;
    case 17:
      int v8 = "int";
      char v9 = 17;
      goto LABEL_73;
    case 18:
      int v8 = "BOOL";
      char v9 = 18;
      goto LABEL_73;
    case 19:
      int v8 = "int";
      char v9 = 19;
      goto LABEL_73;
    case 20:
      int v8 = "double";
      char v9 = 20;
      goto LABEL_73;
    case 21:
      int v8 = "int";
      char v9 = 21;
      goto LABEL_73;
    case 22:
      int v8 = "int";
      char v9 = 22;
      goto LABEL_73;
    case 23:
      int v8 = "int";
      char v9 = 23;
      goto LABEL_73;
    case 24:
      int v8 = "int";
      char v9 = 24;
      goto LABEL_73;
    case 25:
      int v8 = "double";
      char v9 = 25;
      goto LABEL_73;
    case 26:
      int v8 = "int";
      char v9 = 26;
      goto LABEL_73;
    case 27:
      int v8 = "BOOL";
      char v9 = 27;
      goto LABEL_73;
    case 28:
      int v8 = "int";
      char v9 = 28;
      goto LABEL_73;
    case 29:
      int v8 = "int";
      char v9 = 29;
      goto LABEL_73;
    case 30:
      int v8 = "int";
      char v9 = 30;
      goto LABEL_73;
    case 31:
      int v8 = "int";
      char v9 = 31;
      goto LABEL_73;
    case 32:
      int v8 = "int";
      char v9 = 32;
      goto LABEL_73;
    case 33:
      int v8 = "BOOL";
      char v9 = 33;
      goto LABEL_73;
    case 34:
      int v8 = "int";
      char v9 = 34;
      goto LABEL_73;
    case 35:
      int v8 = "double";
      char v9 = 35;
      goto LABEL_73;
    case 36:
      int v8 = "double";
      char v9 = 36;
      goto LABEL_73;
    case 37:
      int v8 = "enum";
      char v9 = 37;
      goto LABEL_73;
    case 38:
      int v8 = "double";
      char v9 = 38;
      goto LABEL_73;
    case 39:
      int v8 = "int";
      char v9 = 39;
      goto LABEL_73;
    case 40:
      int v8 = "int";
      char v9 = 40;
      goto LABEL_73;
    case 41:
      int v8 = "int";
      char v9 = 41;
      goto LABEL_73;
    case 42:
      int v8 = "double";
      char v9 = 42;
      goto LABEL_73;
    case 43:
      int v8 = "double";
      char v9 = 43;
      goto LABEL_73;
    case 44:
      int v8 = "double";
      char v9 = 44;
      goto LABEL_73;
    case 45:
      int v8 = "double";
      char v9 = 45;
      goto LABEL_73;
    case 46:
      int v8 = "double";
      char v9 = 46;
      goto LABEL_73;
    case 47:
      int v8 = "double";
      char v9 = 47;
      goto LABEL_73;
    case 48:
      int v8 = "double";
      char v9 = 48;
      goto LABEL_73;
    case 49:
      int v8 = "int";
      char v9 = 49;
      goto LABEL_73;
    case 50:
      int v8 = "double";
      char v9 = 50;
      goto LABEL_73;
    case 51:
      int v8 = "double";
      char v9 = 51;
      goto LABEL_73;
    case 52:
      int v8 = "BOOL";
      char v9 = 52;
      goto LABEL_73;
    case 53:
      int v8 = "int";
      char v9 = 53;
      goto LABEL_73;
    case 54:
      int v8 = "int";
      char v9 = 54;
      goto LABEL_73;
    case 55:
      int v8 = "int";
      char v9 = 55;
      goto LABEL_73;
    case 56:
      int v8 = "int";
      char v9 = 56;
      goto LABEL_73;
    case 57:
      int v8 = "int";
      char v9 = 57;
      goto LABEL_73;
    case 58:
      int v8 = "int";
      char v9 = 58;
      goto LABEL_73;
    case 59:
      int v8 = "BOOL";
      char v9 = 59;
      goto LABEL_73;
    case 60:
      int v8 = "double";
      char v9 = 60;
      goto LABEL_73;
    case 61:
      int v8 = "double";
      char v9 = 61;
      goto LABEL_73;
    case 62:
      int v8 = "double";
      char v9 = 62;
      goto LABEL_73;
    case 63:
      int v8 = "int";
      char v9 = 63;
      goto LABEL_73;
    case 64:
      int v8 = "int";
      char v9 = 64;
      goto LABEL_73;
    case 65:
      int v8 = "int";
      char v9 = 65;
      goto LABEL_73;
    case 66:
      int v8 = "int";
      char v9 = 66;
      goto LABEL_73;
    case 67:
      int v8 = "double";
      char v9 = 67;
      goto LABEL_73;
    case 68:
      int v8 = "int";
      char v9 = 68;
      goto LABEL_73;
    case 69:
      int v8 = "int";
      char v9 = 69;
      goto LABEL_73;
    case 70:
      int v8 = "int";
      char v9 = 70;
LABEL_73:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t AdapterParamSet::getEnumParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_64;
    case 2:
      int v8 = "BOOL";
      char v9 = 2;
      goto LABEL_64;
    case 3:
      int v8 = "BOOL";
      char v9 = 3;
      goto LABEL_64;
    case 4:
      int v8 = "int";
      char v9 = 4;
      goto LABEL_64;
    case 5:
      int v8 = "int";
      char v9 = 5;
      goto LABEL_64;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_64;
    case 7:
      int v8 = "double";
      char v9 = 7;
      goto LABEL_64;
    case 8:
      int v8 = "int";
      char v9 = 8;
      goto LABEL_64;
    case 9:
      int v8 = "int";
      char v9 = 9;
      goto LABEL_64;
    case 10:
      int v8 = "double";
      char v9 = 10;
      goto LABEL_64;
    case 11:
      int v8 = "BOOL";
      char v9 = 11;
      goto LABEL_64;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_64;
    case 13:
      int v8 = "BOOL";
      char v9 = 13;
      goto LABEL_64;
    case 14:
      int v8 = "BOOL";
      char v9 = 14;
      goto LABEL_64;
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_64;
    case 16:
      int v8 = "int";
      char v9 = 16;
      goto LABEL_64;
    case 17:
      int v8 = "int";
      char v9 = 17;
      goto LABEL_64;
    case 18:
      int v8 = "BOOL";
      char v9 = 18;
      goto LABEL_64;
    case 19:
      int v8 = "int";
      char v9 = 19;
      goto LABEL_64;
    case 20:
      int v8 = "double";
      char v9 = 20;
      goto LABEL_64;
    case 21:
      int v8 = "int";
      char v9 = 21;
      goto LABEL_64;
    case 22:
      int v8 = "int";
      char v9 = 22;
      goto LABEL_64;
    case 23:
      int v8 = "int";
      char v9 = 23;
      goto LABEL_64;
    case 24:
      int v8 = "int";
      char v9 = 24;
      goto LABEL_64;
    case 25:
      int v8 = "double";
      char v9 = 25;
      goto LABEL_64;
    case 26:
      int v8 = "int";
      char v9 = 26;
      goto LABEL_64;
    case 27:
      int v8 = "BOOL";
      char v9 = 27;
      goto LABEL_64;
    case 28:
      int v8 = "int";
      char v9 = 28;
      goto LABEL_64;
    case 29:
      int v8 = "int";
      char v9 = 29;
      goto LABEL_64;
    case 30:
      int v8 = "int";
      char v9 = 30;
      goto LABEL_64;
    case 31:
      int v8 = "int";
      char v9 = 31;
      goto LABEL_64;
    case 32:
      int v8 = "int";
      char v9 = 32;
      goto LABEL_64;
    case 33:
      int v8 = "BOOL";
      char v9 = 33;
      goto LABEL_64;
    case 34:
      int v8 = "int";
      char v9 = 34;
      goto LABEL_64;
    case 35:
      int v8 = "double";
      char v9 = 35;
      goto LABEL_64;
    case 36:
      int v8 = "double";
      char v9 = 36;
      goto LABEL_64;
    case 37:
      switch((int)a3)
      {
        case 0:
          uint64_t result = *(unsigned int *)(a1 + 192);
          break;
        case 1:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 37, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId) {
          uint64_t result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          }
          break;
        case 2:
          int v12 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 37, a3, a4, a5, a6, a7, a8);
          if (v12) {
          uint64_t result = EnumParamSpec::getMinVal((EnumParamSpec *)v12);
          }
          break;
        case 3:
          int v13 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 37, a3, a4, a5, a6, a7, a8);
          if (v13) {
          uint64_t result = EnumParamSpec::getMaxVal((EnumParamSpec *)v13);
          }
          break;
        default:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 38:
      int v8 = "double";
      char v9 = 38;
      goto LABEL_64;
    case 39:
      int v8 = "int";
      char v9 = 39;
      goto LABEL_64;
    case 40:
      int v8 = "int";
      char v9 = 40;
      goto LABEL_64;
    case 41:
      int v8 = "int";
      char v9 = 41;
      goto LABEL_64;
    case 42:
      int v8 = "double";
      char v9 = 42;
      goto LABEL_64;
    case 43:
      int v8 = "double";
      char v9 = 43;
      goto LABEL_64;
    case 44:
      int v8 = "double";
      char v9 = 44;
      goto LABEL_64;
    case 45:
      int v8 = "double";
      char v9 = 45;
      goto LABEL_64;
    case 46:
      int v8 = "double";
      char v9 = 46;
      goto LABEL_64;
    case 47:
      int v8 = "double";
      char v9 = 47;
      goto LABEL_64;
    case 48:
      int v8 = "double";
      char v9 = 48;
      goto LABEL_64;
    case 49:
      int v8 = "int";
      char v9 = 49;
      goto LABEL_64;
    case 50:
      int v8 = "double";
      char v9 = 50;
      goto LABEL_64;
    case 51:
      int v8 = "double";
      char v9 = 51;
      goto LABEL_64;
    case 52:
      int v8 = "BOOL";
      char v9 = 52;
      goto LABEL_64;
    case 53:
      int v8 = "int";
      char v9 = 53;
      goto LABEL_64;
    case 54:
      int v8 = "int";
      char v9 = 54;
      goto LABEL_64;
    case 55:
      int v8 = "int";
      char v9 = 55;
      goto LABEL_64;
    case 56:
      int v8 = "int";
      char v9 = 56;
      goto LABEL_64;
    case 57:
      int v8 = "int";
      char v9 = 57;
      goto LABEL_64;
    case 58:
      int v8 = "int";
      char v9 = 58;
      goto LABEL_64;
    case 59:
      int v8 = "BOOL";
      char v9 = 59;
      goto LABEL_64;
    case 60:
      int v8 = "double";
      char v9 = 60;
      goto LABEL_64;
    case 61:
      int v8 = "double";
      char v9 = 61;
      goto LABEL_64;
    case 62:
      int v8 = "double";
      char v9 = 62;
      goto LABEL_64;
    case 63:
      int v8 = "int";
      char v9 = 63;
      goto LABEL_64;
    case 64:
      int v8 = "int";
      char v9 = 64;
      goto LABEL_64;
    case 65:
      int v8 = "int";
      char v9 = 65;
      goto LABEL_64;
    case 66:
      int v8 = "int";
      char v9 = 66;
      goto LABEL_64;
    case 67:
      int v8 = "double";
      char v9 = 67;
      goto LABEL_64;
    case 68:
      int v8 = "int";
      char v9 = 68;
      goto LABEL_64;
    case 69:
      int v8 = "int";
      char v9 = 69;
      goto LABEL_64;
    case 70:
      int v8 = "int";
      char v9 = 70;
LABEL_64:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void AdapterParamSet::setBoolParameter(AdapterParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  char v9 = a3;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationAccumulateDoublyGenericBackoffPels";
        goto LABEL_78;
      }
      *((unsigned char *)this + 40) = a3;
      return;
    case 2:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationAccumulateLeftGenericBackoffPels";
        goto LABEL_78;
      }
      *((unsigned char *)this + 41) = a3;
      return;
    case 3:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationAccumulateRightGenericBackoffPels";
        goto LABEL_78;
      }
      *((unsigned char *)this + 42) = a3;
      return;
    case 4:
      throwWrongTypeForParamId(4, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 5:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 6:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 7:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 8:
LABEL_12:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 9:
LABEL_13:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 10:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 11:
LABEL_15:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationConTransAccComputeHierScorerTransforms";
        goto LABEL_78;
      }
      *((unsigned char *)this + 80) = v9;
      return;
    case 12:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationConTransAccComputeTransformMatrix";
        goto LABEL_78;
      }
      *((unsigned char *)this + 81) = a3;
      return;
    case 13:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationConTransAccComputeTranslation";
        goto LABEL_78;
      }
      *((unsigned char *)this + 82) = a3;
      return;
    case 14:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationConTransAccDiagonalTransforms";
        goto LABEL_78;
      }
      *((unsigned char *)this + 83) = a3;
      return;
    case 15:
      throwWrongTypeForParamId(15, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 16:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 17:
LABEL_26:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 18:
LABEL_27:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationConTransAccInitFromIdentityMatrix";
        goto LABEL_78;
      }
      *((unsigned char *)this + 96) = v9;
      return;
    case 19:
      throwWrongTypeForParamId(19, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 20:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 21:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 22:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 23:
LABEL_34:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 24:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 25:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 26:
LABEL_37:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 27:
LABEL_38:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationConTransAccOnlineIncludeCurrentTransform";
        goto LABEL_78;
      }
      *((unsigned char *)this + 140) = v9;
      return;
    case 28:
      throwWrongTypeForParamId(28, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 29:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 30:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 31:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 32:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 33:
LABEL_46:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationConTransAccEconomizeCofactorComputation";
        goto LABEL_78;
      }
      *((unsigned char *)this + 164) = v9;
      return;
    case 34:
      throwWrongTypeForParamId(34, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 35:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 36:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 37:
LABEL_52:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 38:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 39:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 40:
LABEL_55:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 41:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 42:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 43:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 44:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 45:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 46:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 47:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 48:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 49:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 50:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 51:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 52:
LABEL_67:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationDTMMSmoothGradients";
        goto LABEL_78;
      }
      *((unsigned char *)this + 304) = v9;
      break;
    case 53:
      throwWrongTypeForParamId(53, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 54:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 55:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 56:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 57:
LABEL_74:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 58:
LABEL_75:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 59:
LABEL_76:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "AdaptationMicUseDiagonal";
LABEL_78:
        throwParamSetSetFailed(v11, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((unsigned char *)this + 332) = v9;
      }
      break;
    case 60:
      throwWrongTypeForParamId(60, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_83;
    case 61:
LABEL_83:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_84;
    case 62:
LABEL_84:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_85;
    case 63:
LABEL_85:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_86;
    case 64:
LABEL_86:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_87;
    case 65:
LABEL_87:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_88;
    case 66:
LABEL_88:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_89;
    case 67:
LABEL_89:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_90;
    case 68:
LABEL_90:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_91;
    case 69:
LABEL_91:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_92;
    case 70:
LABEL_92:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_93;
    default:
LABEL_93:
      throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void AdapterParamSet::setIntParameter(AdapterParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  int v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 4, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId) {
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationBasisDevRelevance";
        goto LABEL_192;
      }
      *((_DWORD *)this + 11) = v9;
      return;
    case 5:
      uint64_t v23 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 5, a3, a4, a5, a6, a7, a8);
      if (v23) {
      IntParamSpec::validateValue((IntParamSpec *)v23, v9, 0, 0, v24, v25, v26, v27);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationBasisMeanRelevance";
        goto LABEL_192;
      }
      *((_DWORD *)this + 12) = v9;
      return;
    case 6:
      uint64_t v28 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 6, a3, a4, a5, a6, a7, a8);
      if (v28) {
      IntParamSpec::validateValue((IntParamSpec *)v28, v9, 0, 0, v29, v30, v31, v32);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationBaumWelchMaxUttSeconds";
        goto LABEL_192;
      }
      *((_DWORD *)this + 13) = v9;
      return;
    case 7:
      throwWrongTypeForParamId(7, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 8:
LABEL_22:
      uint64_t v33 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 8, a3, a4, a5, a6, a7, a8);
      if (v33) {
      IntParamSpec::validateValue((IntParamSpec *)v33, v9, 0, 0, v34, v35, v36, v37);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationBaumWelchThreshScore";
        goto LABEL_192;
      }
      *((_DWORD *)this + 16) = v9;
      return;
    case 9:
      uint64_t v38 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 9, a3, a4, a5, a6, a7, a8);
      if (v38) {
      IntParamSpec::validateValue((IntParamSpec *)v38, v9, 0, 0, v39, v40, v41, v42);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccSilenceToSpeechWeight";
        goto LABEL_192;
      }
      *((_DWORD *)this + 17) = v9;
      return;
    case 10:
      throwWrongTypeForParamId(10, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 11:
LABEL_31:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 12:
LABEL_32:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 13:
LABEL_33:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 14:
LABEL_34:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 15:
LABEL_35:
      uint64_t v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 15, a3, a4, a5, a6, a7, a8);
      if (v43) {
      IntParamSpec::validateValue((IntParamSpec *)v43, v9, 0, 0, v44, v45, v46, v47);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccGenoneClassMinFrameCount";
        goto LABEL_192;
      }
      *((_DWORD *)this + 21) = v9;
      return;
    case 16:
      uint64_t v48 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 16, a3, a4, a5, a6, a7, a8);
      if (v48) {
      IntParamSpec::validateValue((IntParamSpec *)v48, v9, 0, 0, v49, v50, v51, v52);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccGlobalSmoothingMinAccumFrames";
        goto LABEL_192;
      }
      *((_DWORD *)this + 22) = v9;
      return;
    case 17:
      uint64_t v53 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 17, a3, a4, a5, a6, a7, a8);
      if (v53) {
      IntParamSpec::validateValue((IntParamSpec *)v53, v9, 0, 0, v54, v55, v56, v57);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccGlobalSmoothingRelevance";
        goto LABEL_192;
      }
      *((_DWORD *)this + 23) = v9;
      return;
    case 18:
      throwWrongTypeForParamId(18, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 19:
LABEL_49:
      uint64_t v58 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 19, a3, a4, a5, a6, a7, a8);
      if (v58) {
      IntParamSpec::validateValue((IntParamSpec *)v58, v9, 0, 0, v59, v60, v61, v62);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccMaxNumTransforms";
        goto LABEL_192;
      }
      *((_DWORD *)this + 25) = v9;
      return;
    case 20:
      throwWrongTypeForParamId(20, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 21:
LABEL_54:
      uint64_t v63 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 21, a3, a4, a5, a6, a7, a8);
      if (v63) {
      IntParamSpec::validateValue((IntParamSpec *)v63, v9, 0, 0, v64, v65, v66, v67);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccMinAccumFrames";
        goto LABEL_192;
      }
      *((_DWORD *)this + 28) = v9;
      return;
    case 22:
      uint64_t v68 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 22, a3, a4, a5, a6, a7, a8);
      if (v68) {
      IntParamSpec::validateValue((IntParamSpec *)v68, v9, 0, 0, v69, v70, v71, v72);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccNumIterations";
        goto LABEL_192;
      }
      *((_DWORD *)this + 29) = v9;
      return;
    case 23:
      uint64_t v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 23, a3, a4, a5, a6, a7, a8);
      if (v73) {
      IntParamSpec::validateValue((IntParamSpec *)v73, v9, 0, 0, v74, v75, v76, v77);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccOnlineCommitIntervalSeconds";
        goto LABEL_192;
      }
      *((_DWORD *)this + 30) = v9;
      return;
    case 24:
      uint64_t v78 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 24, a3, a4, a5, a6, a7, a8);
      if (v78) {
      IntParamSpec::validateValue((IntParamSpec *)v78, v9, 0, 0, v79, v80, v81, v82);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccOnlineCommitIntervalUtts";
        goto LABEL_192;
      }
      *((_DWORD *)this + 31) = v9;
      return;
    case 25:
      throwWrongTypeForParamId(25, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 26:
LABEL_71:
      uint64_t v83 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 26, a3, a4, a5, a6, a7, a8);
      if (v83) {
      IntParamSpec::validateValue((IntParamSpec *)v83, v9, 0, 0, v84, v85, v86, v87);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccOnlineDecayInterval";
        goto LABEL_192;
      }
      *((_DWORD *)this + 34) = v9;
      return;
    case 27:
      throwWrongTypeForParamId(27, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 28:
LABEL_76:
      uint64_t v88 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 28, a3, a4, a5, a6, a7, a8);
      if (v88) {
      IntParamSpec::validateValue((IntParamSpec *)v88, v9, 0, 0, v89, v90, v91, v92);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccOnlineNumTransformsMin";
        goto LABEL_192;
      }
      *((_DWORD *)this + 36) = v9;
      return;
    case 29:
      uint64_t v93 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 29, a3, a4, a5, a6, a7, a8);
      if (v93) {
      IntParamSpec::validateValue((IntParamSpec *)v93, v9, 0, 0, v94, v95, v96, v97);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccOnlineNumTransformsRange";
        goto LABEL_192;
      }
      *((_DWORD *)this + 37) = v9;
      return;
    case 30:
      uint64_t v98 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 30, a3, a4, a5, a6, a7, a8);
      if (v98) {
      IntParamSpec::validateValue((IntParamSpec *)v98, v9, 0, 0, v99, v100, v101, v102);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccRelevance";
        goto LABEL_192;
      }
      *((_DWORD *)this + 38) = v9;
      return;
    case 31:
      uint64_t v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 31, a3, a4, a5, a6, a7, a8);
      if (v103) {
      IntParamSpec::validateValue((IntParamSpec *)v103, v9, 0, 0, v104, v105, v106, v107);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccRootGenoneClassMinFrameCount";
        goto LABEL_192;
      }
      *((_DWORD *)this + 39) = v9;
      return;
    case 32:
      uint64_t v108 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 32, a3, a4, a5, a6, a7, a8);
      if (v108) {
      IntParamSpec::validateValue((IntParamSpec *)v108, v9, 0, 0, v109, v110, v111, v112);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccDecomposedAccumCutoffPercent";
        goto LABEL_192;
      }
      *((_DWORD *)this + 40) = v9;
      return;
    case 33:
      throwWrongTypeForParamId(33, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_97;
    case 34:
LABEL_97:
      uint64_t v113 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 34, a3, a4, a5, a6, a7, a8);
      if (v113) {
      IntParamSpec::validateValue((IntParamSpec *)v113, v9, 0, 0, v114, v115, v116, v117);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationConTransAccRidgeRegularizationFactor";
        goto LABEL_192;
      }
      *((_DWORD *)this + 42) = v9;
      return;
    case 35:
      throwWrongTypeForParamId(35, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_102;
    case 36:
LABEL_102:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_103;
    case 37:
LABEL_103:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_104;
    case 38:
LABEL_104:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_105;
    case 39:
LABEL_105:
      uint64_t v118 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 39, a3, a4, a5, a6, a7, a8);
      if (v118) {
      IntParamSpec::validateValue((IntParamSpec *)v118, v9, 0, 0, v119, v120, v121, v122);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationDTMMIntruderMinMicroseconds";
        goto LABEL_192;
      }
      *((_DWORD *)this + 52) = v9;
      return;
    case 40:
      uint64_t v123 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 40, a3, a4, a5, a6, a7, a8);
      if (v123) {
      IntParamSpec::validateValue((IntParamSpec *)v123, v9, 0, 0, v124, v125, v126, v127);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationDTMMMaxIntruderCount";
        goto LABEL_192;
      }
      *((_DWORD *)this + 53) = v9;
      return;
    case 41:
      uint64_t v128 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 41, a3, a4, a5, a6, a7, a8);
      if (v128) {
      IntParamSpec::validateValue((IntParamSpec *)v128, v9, 0, 0, v129, v130, v131, v132);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationDTMMMaxIntrudersPerStartTimeSegment";
        goto LABEL_192;
      }
      *((_DWORD *)this + 54) = v9;
      return;
    case 42:
      throwWrongTypeForParamId(42, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_119;
    case 43:
LABEL_119:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_120;
    case 44:
LABEL_120:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_121;
    case 45:
LABEL_121:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_122;
    case 46:
LABEL_122:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_123;
    case 47:
LABEL_123:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_124;
    case 48:
LABEL_124:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_125;
    case 49:
LABEL_125:
      uint64_t v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 49, a3, a4, a5, a6, a7, a8);
      if (v133) {
      IntParamSpec::validateValue((IntParamSpec *)v133, v9, 0, 0, v134, v135, v136, v137);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationDTMMNumIterations";
        goto LABEL_192;
      }
      *((_DWORD *)this + 70) = v9;
      return;
    case 50:
      throwWrongTypeForParamId(50, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_131;
    case 51:
LABEL_131:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_132;
    case 52:
LABEL_132:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_133;
    case 53:
LABEL_133:
      uint64_t v138 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 53, a3, a4, a5, a6, a7, a8);
      if (v138) {
      IntParamSpec::validateValue((IntParamSpec *)v138, v9, 0, 0, v139, v140, v141, v142);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationDTMMSmoothRelevance";
        goto LABEL_192;
      }
      *((_DWORD *)this + 77) = v9;
      return;
    case 54:
      uint64_t v143 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 54, a3, a4, a5, a6, a7, a8);
      if (v143) {
      IntParamSpec::validateValue((IntParamSpec *)v143, v9, 0, 0, v144, v145, v146, v147);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationDTMMStartTimeSegmentMaxDeltaMicroseconds";
        goto LABEL_192;
      }
      *((_DWORD *)this + 78) = v9;
      return;
    case 55:
      uint64_t v148 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 55, a3, a4, a5, a6, a7, a8);
      if (v148) {
      IntParamSpec::validateValue((IntParamSpec *)v148, v9, 0, 0, v149, v150, v151, v152);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationDTMMUniqMaxDeltaMicroseconds";
        goto LABEL_192;
      }
      *((_DWORD *)this + 79) = v9;
      return;
    case 56:
      uint64_t v153 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 56, a3, a4, a5, a6, a7, a8);
      if (v153) {
      IntParamSpec::validateValue((IntParamSpec *)v153, v9, 0, 0, v154, v155, v156, v157);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationDurationRelevance";
        goto LABEL_192;
      }
      *((_DWORD *)this + 80) = v9;
      return;
    case 57:
      uint64_t v158 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 57, a3, a4, a5, a6, a7, a8);
      if (v158) {
      IntParamSpec::validateValue((IntParamSpec *)v158, v9, 0, 0, v159, v160, v161, v162);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationLogWeightRelevance";
        goto LABEL_192;
      }
      *((_DWORD *)this + 81) = v9;
      return;
    case 58:
      uint64_t v163 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 58, a3, a4, a5, a6, a7, a8);
      if (v163) {
      IntParamSpec::validateValue((IntParamSpec *)v163, v9, 0, 0, v164, v165, v166, v167);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationMaxLogWeight";
        goto LABEL_192;
      }
      *((_DWORD *)this + 82) = v9;
      return;
    case 59:
      throwWrongTypeForParamId(59, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_159;
    case 60:
LABEL_159:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_160;
    case 61:
LABEL_160:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_161;
    case 62:
LABEL_161:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_162;
    case 63:
LABEL_162:
      uint64_t v168 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 63, a3, a4, a5, a6, a7, a8);
      if (v168) {
      IntParamSpec::validateValue((IntParamSpec *)v168, v9, 0, 0, v169, v170, v171, v172);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationTransAccGenoneClassMinFrameCount";
        goto LABEL_192;
      }
      *((_DWORD *)this + 90) = v9;
      return;
    case 64:
      uint64_t v173 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 64, a3, a4, a5, a6, a7, a8);
      if (v173) {
      IntParamSpec::validateValue((IntParamSpec *)v173, v9, 0, 0, v174, v175, v176, v177);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationTransAccGlobalSmoothingMinAccumFrames";
        goto LABEL_192;
      }
      *((_DWORD *)this + 91) = v9;
      return;
    case 65:
      uint64_t v178 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 65, a3, a4, a5, a6, a7, a8);
      if (v178) {
      IntParamSpec::validateValue((IntParamSpec *)v178, v9, 0, 0, v179, v180, v181, v182);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationTransAccGlobalSmoothingRelevance";
        goto LABEL_192;
      }
      *((_DWORD *)this + 92) = v9;
      return;
    case 66:
      uint64_t v183 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 66, a3, a4, a5, a6, a7, a8);
      if (v183) {
      IntParamSpec::validateValue((IntParamSpec *)v183, v9, 0, 0, v184, v185, v186, v187);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationTransAccMaxNumTransforms";
        goto LABEL_192;
      }
      *((_DWORD *)this + 93) = v9;
      return;
    case 67:
      throwWrongTypeForParamId(67, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_180;
    case 68:
LABEL_180:
      uint64_t v188 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 68, a3, a4, a5, a6, a7, a8);
      if (v188) {
      IntParamSpec::validateValue((IntParamSpec *)v188, v9, 0, 0, v189, v190, v191, v192);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationTransAccMinAccumFrames";
        goto LABEL_192;
      }
      *((_DWORD *)this + 96) = v9;
      return;
    case 69:
      uint64_t v193 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 69, a3, a4, a5, a6, a7, a8);
      if (v193) {
      IntParamSpec::validateValue((IntParamSpec *)v193, v9, 0, 0, v194, v195, v196, v197);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationTransAccNumIterations";
        goto LABEL_192;
      }
      *((_DWORD *)this + 97) = v9;
      break;
    case 70:
      uint64_t v198 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 70, a3, a4, a5, a6, a7, a8);
      if (v198) {
      IntParamSpec::validateValue((IntParamSpec *)v198, v9, 0, 0, v199, v200, v201, v202);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "AdaptationTransAccRelevance";
LABEL_192:
        throwParamSetSetFailed(v22, "int", v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *((_DWORD *)this + 98) = v9;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void AdapterParamSet::setDoubleParameter(AdapterParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_8;
    case 7:
LABEL_8:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 7, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationBaumWelchScale";
        goto LABEL_136;
      }
      *((double *)this + 7) = a3;
      return;
    case 8:
      throwWrongTypeForParamId(8, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_14;
    case 9:
LABEL_14:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_15;
    case 10:
LABEL_15:
      uint64_t v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 10, a4, a5, a6, a7, a8, a9);
      if (v25) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationConTransAccComponentBackoffPercent";
        goto LABEL_136;
      }
      *((double *)this + 9) = a3;
      return;
    case 11:
      throwWrongTypeForParamId(11, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_21;
    case 12:
LABEL_21:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_22;
    case 13:
LABEL_22:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_23;
    case 14:
LABEL_23:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_24;
    case 15:
LABEL_24:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_25;
    case 16:
LABEL_25:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_26;
    case 17:
LABEL_26:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_27;
    case 18:
LABEL_27:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_28;
    case 19:
LABEL_28:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_29;
    case 20:
LABEL_29:
      uint64_t v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 20, a4, a5, a6, a7, a8, a9);
      if (v31) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationConTransAccMaxTotalComponentProbability";
        goto LABEL_136;
      }
      *((double *)this + 13) = a3;
      return;
    case 21:
      throwWrongTypeForParamId(21, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_35;
    case 22:
LABEL_35:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_36;
    case 23:
LABEL_36:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_37;
    case 24:
LABEL_37:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_38;
    case 25:
LABEL_38:
      uint64_t v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 25, a4, a5, a6, a7, a8, a9);
      if (v37) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v37, a3, 0, 0, v38, v39, v40, v41, v42);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationConTransAccOnlineDecayFactor";
        goto LABEL_136;
      }
      *((double *)this + 16) = a3;
      return;
    case 26:
      throwWrongTypeForParamId(26, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_44;
    case 27:
LABEL_44:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_45;
    case 28:
LABEL_45:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_46;
    case 29:
LABEL_46:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_47;
    case 30:
LABEL_47:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_48;
    case 31:
LABEL_48:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_49;
    case 32:
LABEL_49:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_50;
    case 33:
LABEL_50:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_51;
    case 34:
LABEL_51:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_52;
    case 35:
LABEL_52:
      uint64_t v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 35, a4, a5, a6, a7, a8, a9);
      if (v43) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v43, a3, 0, 0, v44, v45, v46, v47, v48);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMDevGradientWeight";
        goto LABEL_136;
      }
      *((double *)this + 22) = a3;
      return;
    case 36:
      uint64_t v49 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 36, a4, a5, a6, a7, a8, a9);
      if (v49) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v49, a3, 0, 0, v50, v51, v52, v53, v54);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMErrorBeta";
        goto LABEL_136;
      }
      *((double *)this + 23) = a3;
      return;
    case 37:
      throwWrongTypeForParamId(37, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_62;
    case 38:
LABEL_62:
      uint64_t v55 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 38, a4, a5, a6, a7, a8, a9);
      if (v55) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v55, a3, 0, 0, v56, v57, v58, v59, v60);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMErrorOffset";
        goto LABEL_136;
      }
      *((double *)this + 25) = a3;
      return;
    case 39:
      throwWrongTypeForParamId(39, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_67;
    case 40:
LABEL_67:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_68;
    case 41:
LABEL_68:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_69;
    case 42:
LABEL_69:
      uint64_t v61 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 42, a4, a5, a6, a7, a8, a9);
      if (v61) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v61, a3, 0, 0, v62, v63, v64, v65, v66);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMMeanGradientWeight";
        goto LABEL_136;
      }
      *((double *)this + 28) = a3;
      return;
    case 43:
      uint64_t v67 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 43, a4, a5, a6, a7, a8, a9);
      if (v67) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v67, a3, 0, 0, v68, v69, v70, v71, v72);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMMinNegativeCount";
        goto LABEL_136;
      }
      *((double *)this + 29) = a3;
      return;
    case 44:
      uint64_t v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 44, a4, a5, a6, a7, a8, a9);
      if (v73) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v73, a3, 0, 0, v74, v75, v76, v77, v78);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMMinPositiveCount";
        goto LABEL_136;
      }
      *((double *)this + 30) = a3;
      return;
    case 45:
      uint64_t v79 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 45, a4, a5, a6, a7, a8, a9);
      if (v79) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v79, a3, 0, 0, v80, v81, v82, v83, v84);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMMinTotalCount";
        goto LABEL_136;
      }
      *((double *)this + 31) = a3;
      return;
    case 46:
      uint64_t v85 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 46, a4, a5, a6, a7, a8, a9);
      if (v85) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v85, a3, 0, 0, v86, v87, v88, v89, v90);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMNegativeGradientWeight";
        goto LABEL_136;
      }
      *((double *)this + 32) = a3;
      return;
    case 47:
      uint64_t v91 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 47, a4, a5, a6, a7, a8, a9);
      if (v91) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v91, a3, 0, 0, v92, v93, v94, v95, v96);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMNormalizedDeltaMin";
        goto LABEL_136;
      }
      *((double *)this + 33) = a3;
      return;
    case 48:
      uint64_t v97 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 48, a4, a5, a6, a7, a8, a9);
      if (v97) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v97, a3, 0, 0, v98, v99, v100, v101, v102);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMNormalizedDeltaRange";
        goto LABEL_136;
      }
      *((double *)this + 34) = a3;
      return;
    case 49:
      throwWrongTypeForParamId(49, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_99;
    case 50:
LABEL_99:
      uint64_t v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 50, a4, a5, a6, a7, a8, a9);
      if (v103) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v103, a3, 0, 0, v104, v105, v106, v107, v108);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMPositiveGradientWeight";
        goto LABEL_136;
      }
      *((double *)this + 36) = a3;
      return;
    case 51:
      uint64_t v109 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 51, a4, a5, a6, a7, a8, a9);
      if (v109) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v109, a3, 0, 0, v110, v111, v112, v113, v114);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationDTMMScoreScale";
        goto LABEL_136;
      }
      *((double *)this + 37) = a3;
      return;
    case 52:
      throwWrongTypeForParamId(52, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_108;
    case 53:
LABEL_108:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_109;
    case 54:
LABEL_109:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_110;
    case 55:
LABEL_110:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_111;
    case 56:
LABEL_111:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_112;
    case 57:
LABEL_112:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_113;
    case 58:
LABEL_113:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_114;
    case 59:
LABEL_114:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_115;
    case 60:
LABEL_115:
      uint64_t v115 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 60, a4, a5, a6, a7, a8, a9);
      if (v115) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v115, a3, 0, 0, v116, v117, v118, v119, v120);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationNonSilenceAccumulateFactor";
        goto LABEL_136;
      }
      *((double *)this + 42) = a3;
      return;
    case 61:
      uint64_t v121 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 61, a4, a5, a6, a7, a8, a9);
      if (v121) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v121, a3, 0, 0, v122, v123, v124, v125, v126);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationSilenceAccumulateFactor";
        goto LABEL_136;
      }
      *((double *)this + 43) = a3;
      return;
    case 62:
      uint64_t v127 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 62, a4, a5, a6, a7, a8, a9);
      if (v127) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v127, a3, 0, 0, v128, v129, v130, v131, v132);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationTransAccComponentBackoffPercent";
        goto LABEL_136;
      }
      *((double *)this + 44) = a3;
      break;
    case 63:
      throwWrongTypeForParamId(63, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_129;
    case 64:
LABEL_129:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_130;
    case 65:
LABEL_130:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_131;
    case 66:
LABEL_131:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_132;
    case 67:
LABEL_132:
      uint64_t v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 67, a4, a5, a6, a7, a8, a9);
      if (v133) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v133, a3, 0, 0, v134, v135, v136, v137, v138);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "AdaptationTransAccMaxTotalComponentProbability";
LABEL_136:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 47) = a3;
      }
      break;
    case 68:
      throwWrongTypeForParamId(68, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_141;
    case 69:
LABEL_141:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_142;
    case 70:
LABEL_142:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_143;
    default:
LABEL_143:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void AdapterParamSet::setStringParameter(AdapterParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void AdapterParamSet::setEnumParameter(AdapterParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  int v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A48, 37, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId) {
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      }
      if (*((_DWORD *)this + 9))
      {
        throwParamSetSetFailed("AdaptationDTMMErrorFunction", "enum", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((_DWORD *)this + 48) = v9;
      }
      return;
    case 38:
      throwWrongTypeForParamId(38, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 39:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 40:
LABEL_47:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 41:
LABEL_48:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 42:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 43:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 44:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 45:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 46:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 47:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 48:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 49:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 50:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 51:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 52:
LABEL_59:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 53:
LABEL_60:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 54:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 55:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 56:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 57:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 58:
LABEL_65:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 59:
LABEL_66:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 60:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 61:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 62:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 63:
LABEL_70:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 64:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 65:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 66:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 67:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 68:
LABEL_75:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 69:
LABEL_76:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_77;
    case 70:
LABEL_77:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void AdapterParamSet::~AdapterParamSet(AdapterParamSet *this)
{
  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((AdapterParamSet *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((AdapterParamSet *)((char *)this + 8));

  JUMPOUT(0x216698730);
}

uint64_t minAddAllocWithExtra(uint64_t result, int a2)
{
  unsigned int v2 = ((90 * a2) >> 10) + 32;
  if (v2 <= result) {
    return result;
  }
  else {
    return v2;
  }
}

void buildRegExp(const TFileObject *a1, TLexicon *a2)
{
  uint64_t v12 = &unk_2140A7EC0;
  int64x2_t v13 = vdupq_n_s64(1uLL);
  uint64_t v14 = -1;
  if (!TFileObject::verify((uint64_t)a1, (uint64_t)&v12, 1uLL, 1)) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, &byte_2140B33BB);
  *(void *)std::string __p = byte_26C4DF190;
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v10, *((std::string::size_type *)&v10 + 1));
  }
  else
  {
    *(_OWORD *)&__p[8] = v10;
    uint64_t v9 = v11;
  }
  *(void *)std::string __p = &unk_26C4E0710;
  if (v9 >= 0) {
    uint64_t v4 = &__p[8];
  }
  else {
    uint64_t v4 = *(const char **)&__p[8];
  }
  conditionalAssert(v4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 70, v2, v3);
  *(void *)std::string __p = byte_26C4DF190;
  if (SHIBYTE(v9) < 0) {
    operator delete(*(void **)&__p[8]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
  void *exception = byte_26C4DF190;
  int v6 = (std::string *)(exception + 1);
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    exception[3] = *(void *)&__p[16];
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  void *exception = &unk_26C4E0710;
}

void sub_213FE0ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_213FE0EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_213FE0F50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 121) < 0) {
    JUMPOUT(0x213FE0FC0);
  }
  JUMPOUT(0x213FE0FE0);
}

void sub_213FE0F78(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x60C40CE5A77A8);
  _Unwind_Resume(a1);
}

void sub_213FE0F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 121) < 0) {
    operator delete(*(void **)(v18 - 144));
  }
  if (a18 < 0) {
    JUMPOUT(0x213FE0FC0);
  }
  _Unwind_Resume(a1);
}

void sub_213FE0FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (LOBYTE(STACK[0x438])) {
    buildRegExp((uint64_t *)va, v5);
  }
  _Unwind_Resume(a1);
}

void TFsaBuilder::minimizeChildren(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = *(void **)(a3 + 24);
  if (v4)
  {
    uint64_t v9 = a4 + 1;
    do
    {
      uint64_t v11 = (void *)v4[2];
      if (!v11[1])
      {
        TFsaBuilder::minimizeChildren(a1, a2);
        long long v10 = (uint64_t **)std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::find<TState *>((uint64_t)a4, (uint64_t *)&v11);
        if (v9 == v10)
        {
          v11[1] = 1;
          std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__emplace_unique_key_args<TState *,TState * const&>(a4, (uint64_t *)&v11, (uint64_t *)&v11);
        }
        else
        {
          TFsa::moveTrans((uint64_t)a2, v4, a3, (uint64_t)v10[4]);
          TFsa::deleteState(a2, v11);
        }
      }
      uint64_t v4 = (void *)v4[5];
    }
    while (v4);
  }
}

void TFsaBuilder::addSuffix(int a1, TAllocator *this, void *a3, _DWORD *a4)
{
  uint64_t v4 = (uint64_t)a3;
  if (*a4)
  {
    int v6 = a4 + 1;
    do
    {
      long long v7 = TFsa::newState(this, 0);
      TFsa::newTrans(this, v4, (uint64_t)v7, *(v6 - 1));
      int v8 = *v6++;
      uint64_t v4 = (uint64_t)v7;
    }
    while (v8);
  }
  else
  {
    long long v7 = a3;
  }

  TFsa::addExtremity((uint64_t)this, (uint64_t)v7, 1u);
}

void TFsaBuilder::operator()()
{
}

void sub_213FE128C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void TDecompounder::load(TLexicon **this, TInputStream *a2)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  if (TInputStream::verifyHeader((uint64_t)a2, "TknDecomp", (uint64_t)&pTknDecompVersion, 3))
  {
    std::string::basic_string[abi:ne180100]<0>(v65, &byte_2140B33BB);
    *(void *)uint64_t v81 = byte_26C4DF190;
    if (SHIBYTE(v66) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v81[8], (const std::string::value_type *)v65[0], (std::string::size_type)v65[1]);
    }
    else
    {
      *(_OWORD *)&v81[8] = *(_OWORD *)v65;
      uint64_t v82 = v66;
    }
    *(void *)uint64_t v81 = &unk_26C4E0710;
    if (v82 >= 0) {
      uint64_t v56 = &v81[8];
    }
    else {
      uint64_t v56 = *(const char **)&v81[8];
    }
    conditionalAssert(v56, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 382, v52, v53);
    *(void *)uint64_t v81 = byte_26C4DF190;
    if (SHIBYTE(v82) < 0) {
      operator delete(*(void **)&v81[8]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v81, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v58 = (std::string *)(exception + 1);
    if ((v81[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v58, *(const std::string::value_type **)v81, *(std::string::size_type *)&v81[8]);
    }
    else
    {
      long long v62 = *(_OWORD *)v81;
      exception[3] = *(void *)&v81[16];
      *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v62;
    }
    void *exception = &unk_26C4E0710;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v65, a2);
  uint64_t v4 = v65[0];
  *(_OWORD *)&v81[8] = xmmword_214085140;
  *(void *)uint64_t v81 = dword_2140A7EC4;
  long long v84 = xmmword_214085140;
  uint64_t v82 = -1;
  uint64_t v83 = dword_2140A7EE4;
  long long v87 = xmmword_214085140;
  uint64_t v85 = -1;
  uint64_t v86 = dword_2140A7F0C;
  long long v90 = xmmword_214085140;
  uint64_t v88 = -1;
  uint64_t v89 = dword_2140A7F48;
  long long v93 = xmmword_2140A7EB0;
  uint64_t v91 = -1;
  uint64_t v92 = dword_2140A7F80;
  uint64_t v94 = -1;
  long long v96 = xmmword_214085140;
  uint64_t v95 = dword_2140A7FC0;
  long long v99 = xmmword_214085140;
  uint64_t v97 = 1;
  uint64_t v98 = dword_2140A7FFC;
  uint64_t v100 = 1;
  if (TFileObject::verify((uint64_t)v65[0], (uint64_t)v81, 7uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v76, &byte_2140B33BB);
    *(void *)uint64_t v78 = byte_26C4DF190;
    if ((v76[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v78[8], *(const std::string::value_type **)v76, *(std::string::size_type *)&v76[8]);
    }
    else
    {
      *(_OWORD *)&v78[8] = *(_OWORD *)v76;
      uint64_t v79 = *(void *)&v76[16];
    }
    *(void *)uint64_t v78 = &unk_26C4E0710;
    if (v79 >= 0) {
      uint64_t v59 = &v78[8];
    }
    else {
      uint64_t v59 = *(const char **)&v78[8];
    }
    conditionalAssert(v59, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 404, v54, v55);
    *(void *)uint64_t v78 = byte_26C4DF190;
    if (SHIBYTE(v79) < 0) {
      operator delete(*(void **)&v78[8]);
    }
    if ((v76[23] & 0x80000000) != 0) {
      operator delete(*(void **)v76);
    }
    uint64_t v60 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v78, &byte_2140B33BB);
    void *v60 = byte_26C4DF190;
    uint64_t v61 = (std::string *)(v60 + 1);
    if ((v78[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)v78, *(std::string::size_type *)&v78[8]);
    }
    else
    {
      long long v63 = *(_OWORD *)v78;
      v60[3] = *(void *)&v78[16];
      *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v63;
    }
    void *v60 = &unk_26C4E0710;
  }
  uint64_t v5 = v4[3];
  if (v5)
  {
    char v64 = 0;
    while (wcscmp(*(const __int32 **)(v5 + 8), dword_2140A7EC4))
    {
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_2140A7EE4)) {
        buildRegExp((const TFileObject *)v5, *this);
      }
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_2140A7F0C)) {
        buildRegExp((const TFileObject *)v5, *this);
      }
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_2140A7F48)) {
        buildRegExp((const TFileObject *)v5, *this);
      }
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_2140A7F80)) {
        buildRegExp((const TFileObject *)v5, *this);
      }
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_2140A7FC0)) {
        char v64 = 1;
      }
      else {
        v64 |= wcscmp(*(const __int32 **)(v5 + 8), dword_2140A7FFC) == 0;
      }
      uint64_t v5 = *(void *)(v5 + 16);
      if (!v5)
      {
        if (v64) {
          tknPrintString("Warning: Decompounder model has been lobotomized on load.\n");
        }
        goto LABEL_104;
      }
    }
    int v6 = *this;
    *(int64x2_t *)&v78[8] = vdupq_n_s64(1uLL);
    *(void *)uint64_t v78 = &unk_2140A7EC0;
    uint64_t v79 = -1;
    if (TFileObject::verify(v5, (uint64_t)v78, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(v74, &byte_2140B33BB);
      *(void *)uint64_t v76 = byte_26C4DF190;
      if (SHIBYTE(v75) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v76[8], (const std::string::value_type *)v74[0], (std::string::size_type)v74[1]);
      }
      else
      {
        *(_OWORD *)&v76[8] = *(_OWORD *)v74;
        uint64_t v77 = v75;
      }
      *(void *)uint64_t v76 = &unk_26C4E0710;
      if (v77 >= 0) {
        uint64_t v44 = &v76[8];
      }
      else {
        uint64_t v44 = *(const char **)&v76[8];
      }
      conditionalAssert(v44, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 304, v40, v41);
      *(void *)uint64_t v76 = byte_26C4DF190;
      if (SHIBYTE(v77) < 0) {
        operator delete(*(void **)&v76[8]);
      }
      if (SHIBYTE(v75) < 0) {
        operator delete(v74[0]);
      }
      uint64_t v45 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v76, &byte_2140B33BB);
      *uint64_t v45 = byte_26C4DF190;
      uint64_t v46 = (std::string *)(v45 + 1);
      if ((v76[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)v76, *(std::string::size_type *)&v76[8]);
      }
      else
      {
        long long v50 = *(_OWORD *)v76;
        v45[3] = *(void *)&v76[16];
        *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v50;
      }
      *uint64_t v45 = &unk_26C4E0710;
    }
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v7 = *(void *)(v5 + 24);
    if (!v7)
    {
      uint64_t v37 = 0;
      uint64_t v36 = 0;
      goto LABEL_64;
    }
    char v8 = 0;
    while (1)
    {
      if ((TFileObject::verify((TFileObject *)v7, 0, 0) & 1) == 0)
      {
        if (!TLexicon::checkName((uint64_t)v6, *(int **)(v7 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(v6, *(__int32 **)(v7 + 24)))
          {
            loggableFileObject((uint64_t *)v7);
            int v17 = v67[23];
            uint64_t v18 = *(unsigned char **)v67;
            loggableUnicode(*(unsigned int **)(v7 + 24), __p);
            if (v17 >= 0) {
              uint64_t v23 = v67;
            }
            else {
              uint64_t v23 = v18;
            }
            if (v70 >= 0) {
              uint64_t v24 = __p;
            }
            else {
              uint64_t v24 = (void **)__p[0];
            }
            tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v19, v20, v21, v22, v23, v24);
            if (SHIBYTE(v70) < 0) {
              operator delete(__p[0]);
            }
            if ((v67[23] & 0x80000000) != 0) {
              operator delete(*(void **)v67);
            }
          }
          uint64_t v25 = *(void *)(v7 + 24);
          uint64_t v26 = v72;
          if (v72 >= v73)
          {
            uint64_t v28 = (v72 - (unsigned char *)v71) >> 3;
            if ((unint64_t)(v28 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v29 = (v73 - (unsigned char *)v71) >> 2;
            if (v29 <= v28 + 1) {
              unint64_t v29 = v28 + 1;
            }
            if ((unint64_t)(v73 - (unsigned char *)v71) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v29;
            }
            if (v30) {
              uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v73, v30);
            }
            else {
              uint64_t v31 = 0;
            }
            uint64_t v32 = &v31[8 * v28];
            *(void *)uint64_t v32 = v25;
            uint64_t v27 = v32 + 8;
            uint64_t v34 = (char *)v71;
            uint64_t v33 = v72;
            if (v72 != v71)
            {
              do
              {
                uint64_t v35 = *((void *)v33 - 1);
                v33 -= 8;
                *((void *)v32 - 1) = v35;
                v32 -= 8;
              }
              while (v33 != v34);
              uint64_t v33 = (char *)v71;
            }
            uint64_t v71 = v32;
            uint64_t v72 = v27;
            uint64_t v73 = &v31[8 * v30];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(void *)uint64_t v72 = v25;
            uint64_t v27 = v26 + 8;
          }
          uint64_t v72 = v27;
          goto LABEL_28;
        }
        loggableFileObject((uint64_t *)v7);
        int v9 = v67[23];
        long long v10 = *(unsigned char **)v67;
        loggableUnicode(*(unsigned int **)(v7 + 24), __p);
        if (v9 >= 0) {
          uint64_t v15 = v67;
        }
        else {
          uint64_t v15 = v10;
        }
        if (v70 >= 0) {
          uint64_t v16 = __p;
        }
        else {
          uint64_t v16 = (void **)__p[0];
        }
        tknPrintf("Error: %s'%s' is an invalid token name.\n", v11, v12, v13, v14, v15, v16);
        if (SHIBYTE(v70) < 0) {
          operator delete(__p[0]);
        }
        if ((v67[23] & 0x80000000) != 0) {
          operator delete(*(void **)v67);
        }
      }
      char v8 = 1;
LABEL_28:
      uint64_t v7 = *(void *)(v7 + 16);
      if (!v7)
      {
        if (v8)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
          *(void *)uint64_t v67 = byte_26C4DF190;
          if (SHIBYTE(v70) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v67[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v67[8] = *(_OWORD *)__p;
            uint64_t v68 = v70;
          }
          *(void *)uint64_t v67 = &unk_26C4E0710;
          if (v68 >= 0) {
            uint64_t v47 = &v67[8];
          }
          else {
            uint64_t v47 = *(const char **)&v67[8];
          }
          conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/decompounder.cpp", 337, v42, v43);
          *(void *)uint64_t v67 = byte_26C4DF190;
          if (SHIBYTE(v68) < 0) {
            operator delete(*(void **)&v67[8]);
          }
          if (SHIBYTE(v70) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v48 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v67, &byte_2140B33BB);
          *uint64_t v48 = byte_26C4DF190;
          uint64_t v49 = (std::string *)(v48 + 1);
          if ((v67[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v67, *(std::string::size_type *)&v67[8]);
          }
          else
          {
            long long v51 = *(_OWORD *)v67;
            v48[3] = *(void *)&v67[16];
            *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v51;
          }
          *uint64_t v48 = &unk_26C4E0710;
        }
        uint64_t v36 = (const __int32 **)v71;
        uint64_t v37 = (const __int32 **)v72;
LABEL_64:
        unint64_t v38 = 126 - 2 * __clz(v37 - v36);
        if (v37 == v36) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v38;
        }
        std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>((uint64_t)v36, v37, (uint64_t)&v80, v39, 1);
        TFsaBuilder::operator()();
      }
    }
  }
LABEL_104:
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v65);
}

void sub_213FE20D8()
{
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v0);
  JUMPOUT(0x213FE2240);
}

void sub_213FE2238()
{
}

void sub_213FE22D8(_Unwind_Exception *a1)
{
}

void sub_213FE22E4(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x213FE22ECLL);
  }
  __clang_call_terminate(a1);
}

void TDecompounder::TDecompounder(TDecompounder *this, TInputStream *a2, TLexicon *a3, TTokenizerParamManager *a4)
{
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  TDecompounder::load((TLexicon **)this, a2);
}

void TDecompounder::~TDecompounder(TDecompounder *this)
{
  uint64_t v2 = (TFsa *)*((void *)this + 2);
  if (v2)
  {
    TFsa::~TFsa(v2);
    MEMORY[0x216698730]();
  }
  uint64_t v3 = (TRegExp *)*((void *)this + 3);
  if (v3)
  {
    TRegExp::~TRegExp(v3);
    MEMORY[0x216698730]();
  }
  uint64_t v4 = (TRegExp *)*((void *)this + 4);
  if (v4)
  {
    TRegExp::~TRegExp(v4);
    MEMORY[0x216698730]();
  }
  uint64_t v5 = (TRegExp *)*((void *)this + 5);
  if (v5)
  {
    TRegExp::~TRegExp(v5);
    MEMORY[0x216698730]();
  }
  int v6 = (TRegExp *)*((void *)this + 6);
  if (v6)
  {
    TRegExp::~TRegExp(v6);
    MEMORY[0x216698730]();
  }
}

uint64_t TDecompounder::isValidWord(TDecompounder *this, int **a2, __int32 **a3, int a4, int a5)
{
  if (a4 && (a5 & 1) != 0) {
    return 0;
  }
  uint64_t v43 = (unsigned int *)v45;
  long long v44 = xmmword_214085190;
  char v46 = 1;
  TWord::getTokenName(a3, (uint64_t)&v43);
  uint64_t v11 = *((void *)this + 1);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 5624));
  if (!*(unsigned char *)(v11 + TParam::getValidConfig((TParam *)(v11 + 5624), ActiveConfigHandle) + 5776)) {
    goto LABEL_44;
  }
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = TParam::getActiveConfigHandle((TParam *)(v13 + 5128));
  if (!*(unsigned char *)(v13 + TParam::getValidConfig((TParam *)(v13 + 5128), v14) + 5280))
  {
    int v17 = (void *)*((void *)this + 3);
    if (v17)
    {
      if (*((void *)&v44 + 1) >= (unint64_t)v44)
      {
        if (v46)
        {
          LODWORD(v39) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
          uint64_t v18 = v43;
          --*((void *)&v44 + 1);
        }
        else
        {
          uint64_t v18 = v43;
          if ((void)v44) {
            v43[(void)v44 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v18 = v43;
        v43[*((void *)&v44 + 1)] = 0;
      }
      if (TRegExp::match(v17, v18, 0)) {
        goto LABEL_51;
      }
    }
  }
  if (a4)
  {
    uint64_t v15 = (void *)*((void *)this + 5);
    if (v15)
    {
      if (*((void *)&v44 + 1) >= (unint64_t)v44)
      {
        if (v46)
        {
          LODWORD(v39) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
          uint64_t v16 = v43;
          --*((void *)&v44 + 1);
        }
        else
        {
          uint64_t v16 = v43;
          if ((void)v44) {
            v43[(void)v44 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v16 = v43;
        v43[*((void *)&v44 + 1)] = 0;
      }
      if (TRegExp::match(v15, v16, 0)) {
        goto LABEL_51;
      }
    }
    if (a5)
    {
LABEL_23:
      uint64_t v19 = (void *)*((void *)this + 4);
      if (v19)
      {
        if (*((void *)&v44 + 1) < (unint64_t)v44)
        {
          uint64_t v20 = v43;
          v43[*((void *)&v44 + 1)] = 0;
          goto LABEL_43;
        }
        if (v46)
        {
LABEL_33:
          LODWORD(v39) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
          uint64_t v20 = v43;
          --*((void *)&v44 + 1);
          goto LABEL_43;
        }
        uint64_t v20 = v43;
        if ((void)v44) {
          v43[(void)v44 - 1] = 0;
        }
LABEL_43:
        if (TRegExp::match(v19, v20, 0)) {
          goto LABEL_51;
        }
        goto LABEL_44;
      }
      goto LABEL_44;
    }
    if (a4) {
      goto LABEL_44;
    }
  }
  else if (a5)
  {
    goto LABEL_23;
  }
  uint64_t v19 = (void *)*((void *)this + 6);
  if (v19)
  {
    if (*((void *)&v44 + 1) < (unint64_t)v44)
    {
      uint64_t v20 = v43;
      v43[*((void *)&v44 + 1)] = 0;
      goto LABEL_43;
    }
    if (v46) {
      goto LABEL_33;
    }
    uint64_t v20 = v43;
    if ((void)v44) {
      v43[(void)v44 - 1] = 0;
    }
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v21 = *((void *)this + 1);
  uint64_t v22 = TParam::getActiveConfigHandle((TParam *)(v21 + 5376));
  if (*(unsigned char *)(v21 + TParam::getValidConfig((TParam *)(v21 + 5376), v22) + 5528)) {
    BOOL v23 = a5 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    goto LABEL_52;
  }
  int v24 = **a2;
  {
    operator new();
  }
  int isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v24);
  int v26 = *v43;
  {
    operator new();
  }
  if (isUpper == TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v26))
  {
LABEL_52:
    uint64_t v27 = *((void *)this + 1);
    uint64_t v28 = TParam::getActiveConfigHandle((TParam *)(v27 + 6120));
    uint64_t v10 = 1;
    if (*(unsigned char *)(v27 + TParam::getValidConfig((TParam *)(v27 + 6120), v28) + 6272)) {
      BOOL v29 = a5 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (v29) {
      goto LABEL_99;
    }
    uint64_t v39 = (__int32 *)v41;
    long long v40 = xmmword_214085190;
    char v42 = 1;
    TWord::getCategoryTag((uint64_t)a2, &v39);
    uint64_t v35 = (__int32 *)v37;
    long long v36 = xmmword_214085190;
    char v38 = 1;
    TWord::getCategoryTag((uint64_t)a3, &v35);
    if (*((void *)&v36 + 1) >= (unint64_t)v36)
    {
      if (v38)
      {
        int v47 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), &v47, 1uLL);
        unint64_t v30 = v35;
        --*((void *)&v36 + 1);
      }
      else
      {
        unint64_t v30 = v35;
        if ((void)v36) {
          v35[(void)v36 - 1] = 0;
        }
      }
    }
    else
    {
      unint64_t v30 = v35;
      v35[*((void *)&v36 + 1)] = 0;
    }
    if (!wcscmp(v30, dword_2140A801C)) {
      goto LABEL_93;
    }
    if (*((void *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        int v47 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), &v47, 1uLL);
        uint64_t v31 = v39;
        --*((void *)&v40 + 1);
      }
      else
      {
        uint64_t v31 = v39;
        if ((void)v40) {
          v39[(void)v40 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v31 = v39;
      v39[*((void *)&v40 + 1)] = 0;
    }
    if (!wcscmp(v31, dword_2140A801C)) {
      goto LABEL_93;
    }
    if (*((void *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        int v47 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), &v47, 1uLL);
        uint64_t v32 = v39;
        --*((void *)&v40 + 1);
      }
      else
      {
        uint64_t v32 = v39;
        if ((void)v40) {
          v39[(void)v40 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v32 = v39;
      v39[*((void *)&v40 + 1)] = 0;
    }
    if (*((void *)&v36 + 1) >= (unint64_t)v36)
    {
      if (v38)
      {
        int v47 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), &v47, 1uLL);
        uint64_t v33 = v35;
        --*((void *)&v36 + 1);
      }
      else
      {
        uint64_t v33 = v35;
        if ((void)v36) {
          v35[(void)v36 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v33 = v35;
      v35[*((void *)&v36 + 1)] = 0;
    }
    if (!wcsncmp(v32, v33, 2uLL))
    {
LABEL_93:
      if (v38 && v35 != (__int32 *)v37 && v35) {
        MEMORY[0x216698730]();
      }
      if (v42 && v39 != (__int32 *)v41 && v39) {
        MEMORY[0x216698730]();
      }
      goto LABEL_99;
    }
    if (v38 && v35 != (__int32 *)v37 && v35) {
      MEMORY[0x216698730]();
    }
    if (v42 && v39 != (__int32 *)v41 && v39) {
      MEMORY[0x216698730]();
    }
  }
LABEL_51:
  uint64_t v10 = 0;
LABEL_99:
  if (v46 && v43 != (unsigned int *)v45 && v43) {
    MEMORY[0x216698730]();
  }
  return v10;
}

void sub_213FE2B14(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xC70]))
  {
    unint64_t v4 = STACK[0x858];
    if (STACK[0x858] != v2)
    {
      if (v4) {
        MEMORY[0x216698730](v4, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TDecompounder::decompound(TDecompounder *this, const TWord *a2, TFsa *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](this, a2, a3, a4, a5);
  uint64_t v7 = v6;
  int v9 = (TWord *)v8;
  uint64_t v187 = (TDecompounder *)v5;
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v208 = v210;
  long long v209 = xmmword_214085190;
  char v211 = 1;
  TWord::getWrittenForm(v8, (uint64_t)&v208);
  v207[0] = TWord::getWordSpec(v9);
  v207[1] = v10;
  uint64_t v203 = v205;
  long long v204 = xmmword_214085190;
  char v206 = 1;
  uint64_t v11 = (int *)TStringParam::get((TStringParam *)(*((void *)v187 + 1) + 10744));
  TBuffer<wchar_t>::assign((uint64_t)&v203, v11);
  *((_DWORD *)v203 + 70) = 48;
  uint64_t v213 = 0;
  std::vector<TState *>::vector(&v201, *((void *)&v209 + 1) + 1, &v213);
  uint64_t v178 = (int **)v9;
  uint64_t v12 = TFsa::newState(v7, 0);
  *(void *)uint64_t v201 = v12;
  TFsa::addExtremity((uint64_t)v7, *(void *)v201, 0);
  uint64_t v185 = (unint64_t *)v7;
  unint64_t v13 = *((void *)&v209 + 1);
  if (*((void *)&v209 + 1))
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v179 = v14;
      uint64_t v180 = *((void *)v201 + v14);
      if (!v180) {
        goto LABEL_212;
      }
      uint64_t v197 = v199;
      long long v198 = xmmword_214085190;
      char v200 = 1;
      if (v13 >= (unint64_t)v209)
      {
        if (v211)
        {
          LODWORD(v213) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v208, v13, (int *)&v213, 1uLL);
          uint64_t v15 = v208;
          --*((void *)&v209 + 1);
        }
        else
        {
          uint64_t v15 = v208;
          if ((void)v209) {
            *(_DWORD *)&v208[4 * v209 - 4] = 0;
          }
        }
      }
      else
      {
        uint64_t v15 = v208;
        *(_DWORD *)&v208[4 * v13] = 0;
      }
      TBuffer<wchar_t>::assign((uint64_t)&v197, (int *)&v15[4 * v179]);
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      uint64_t v196 = 0;
      uint64_t v16 = *((void *)v187 + 1);
      uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v16 + 5128));
      if (!*(unsigned char *)(v16 + TParam::getValidConfig((TParam *)(v16 + 5128), ActiveConfigHandle) + 5280)
        || (uint64_t v18 = (void *)*((void *)v187 + 2)) == 0
        || !v18[25])
      {
        int v26 = *(void **)v187;
        if (*((void *)&v198 + 1) >= (unint64_t)v198)
        {
          if (v200)
          {
            LODWORD(v213) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v197, *((unint64_t *)&v198 + 1), (int *)&v213, 1uLL);
            uint64_t v27 = (int *)v197;
            --*((void *)&v198 + 1);
          }
          else
          {
            uint64_t v27 = (int *)v197;
            if ((void)v198) {
              *(_DWORD *)&v197[4 * v198 - 4] = 0;
            }
          }
        }
        else
        {
          uint64_t v27 = (int *)v197;
          *(_DWORD *)&v197[4 * *((void *)&v198 + 1)] = 0;
        }
        uint64_t v28 = *((void *)v187 + 1);
        uint64_t v29 = TParam::getActiveConfigHandle((TParam *)(v28 + 16464));
        size_t v30 = *(int *)(v28 + 4 * TParam::getValidConfig((TParam *)(v28 + 16464), v29) + 16624);
        uint64_t v31 = *((void *)v187 + 1);
        uint64_t v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 16112));
        size_t v33 = *(int *)(v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 16112), v32) + 16272);
        if (*((void *)&v204 + 1) >= (unint64_t)v204)
        {
          if (v206)
          {
            LODWORD(v213) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v203, *((unint64_t *)&v204 + 1), (int *)&v213, 1uLL);
            uint64_t v34 = v203;
            --*((void *)&v204 + 1);
          }
          else
          {
            uint64_t v34 = v203;
            if ((void)v204) {
              *(_DWORD *)&v203[4 * v204 - 4] = 0;
            }
          }
        }
        else
        {
          uint64_t v34 = v203;
          *(_DWORD *)&v203[4 * *((void *)&v204 + 1)] = 0;
        }
        uint64_t v213 = v215;
        long long __p = xmmword_214085190;
        char v216 = 1;
        int v35 = *v27;
        if (*v27)
        {
          long long v36 = v27 + 1;
          do
          {
            LODWORD(v191) = v35;
            TBuffer<wchar_t>::insert((uint64_t)&v213, *((unint64_t *)&__p + 1), (int *)&v191, 1uLL);
            if (*((void *)&__p + 1) >= (unint64_t)__p)
            {
              if (v216)
              {
                LODWORD(v191) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v213, *((unint64_t *)&__p + 1), (int *)&v191, 1uLL);
                uint64_t v37 = (unsigned int *)v213;
                --*((void *)&__p + 1);
              }
              else
              {
                uint64_t v37 = (unsigned int *)v213;
                if ((void)__p) {
                  *((_DWORD *)v213 + __p - 1) = 0;
                }
              }
            }
            else
            {
              uint64_t v37 = (unsigned int *)v213;
              *((_DWORD *)v213 + *((void *)&__p + 1)) = 0;
            }
            BOOL HeadClonesCollated = TLexicon::findHeadClonesCollated(v26, v37, v34, v30, v33, &v194);
            int v39 = *v36++;
            int v35 = v39;
            if (v39) {
              BOOL v40 = HeadClonesCollated;
            }
            else {
              BOOL v40 = 0;
            }
          }
          while (v40);
          if (v216 && v213 != v215 && v213) {
            MEMORY[0x216698730]();
          }
        }
        goto LABEL_57;
      }
      uint64_t v19 = (uint64_t *)v18[19];
      uint64_t v20 = (uint64_t *)v18[20];
      if (v19 != v20)
      {
        while (!*v19)
        {
          if (++v19 == v20)
          {
            uint64_t v19 = v20;
            break;
          }
        }
      }
      uint64_t v21 = *(void **)v187;
      uint64_t v22 = *v19;
      unint64_t v23 = *((void *)&v198 + 1);
      unint64_t v24 = v198;
      if (*((void *)&v198 + 1) >= (unint64_t)v198)
      {
        if (v200)
        {
          LODWORD(v191) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v197, *((unint64_t *)&v198 + 1), (int *)&v191, 1uLL);
          unint64_t v23 = --*((void *)&v198 + 1);
          uint64_t v25 = (int *)v197;
          unint64_t v24 = v198;
        }
        else
        {
          uint64_t v25 = (int *)v197;
          if (!(void)v198) {
            goto LABEL_53;
          }
          *(_DWORD *)&v197[4 * v198 - 4] = 0;
        }
      }
      else
      {
        uint64_t v25 = (int *)v197;
        *(_DWORD *)&v197[4 * *((void *)&v198 + 1)] = 0;
      }
      if (v23 >= v24)
      {
        if (v200)
        {
          LODWORD(v191) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v197, v23, (int *)&v191, 1uLL);
          uint64_t v41 = (int *)v197;
          --*((void *)&v198 + 1);
          goto LABEL_56;
        }
        if (v24) {
          v25[v24 - 1] = 0;
        }
      }
      else
      {
        v25[v23] = 0;
      }
LABEL_53:
      uint64_t v41 = v25;
LABEL_56:
      uint64_t v42 = *((void *)v187 + 1);
      uint64_t v43 = TParam::getActiveConfigHandle((TParam *)(v42 + 16464));
      size_t v44 = *(int *)(v42 + 4 * TParam::getValidConfig((TParam *)(v42 + 16464), v43) + 16624);
      uint64_t v45 = *((void *)v187 + 1);
      uint64_t v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 16112));
      uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v45 + 16112), v46);
      fsaSearch(v21, v22, v25, v41, (__int32 *)&v213, &v213, 0, v44, *(int *)(v45 + 4 * ValidConfig + 16272), &v194);
LABEL_57:
      long long __p = 0uLL;
      uint64_t v213 = 0;
      uint64_t v48 = std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&__p + 8, 1uLL);
      *uint64_t v48 = v180;
      long long v50 = v48 + 1;
      long long v51 = (char *)__p;
      uint64_t v52 = (char *)v213;
      uint64_t v53 = (char *)v48;
      if ((void *)__p != v213)
      {
        do
        {
          uint64_t v54 = *((void *)v51 - 1);
          v51 -= 8;
          *((void *)v53 - 1) = v54;
          v53 -= 8;
        }
        while (v51 != v52);
        long long v51 = (char *)v213;
      }
      uint64_t v213 = v53;
      *(void *)&long long __p = v48 + 1;
      *((void *)&__p + 1) = &v48[v49];
      if (v51) {
        operator delete(v51);
      }
      *(void *)&long long __p = v50;
      uint64_t v55 = v195;
      if (v195 != v194)
      {
        uint64_t v56 = 0;
        uint64_t v55 = (char *)v194;
        do
        {
          uint64_t v184 = v56;
          uint64_t v57 = &v55[32 * v56];
          uint64_t v59 = *(TWord **)v57;
          uint64_t v58 = *((void *)v57 + 1);
          uint64_t v60 = *((void *)v187 + 1);
          uint64_t v61 = TParam::getActiveConfigHandle((TParam *)(v60 + 5376));
          if (*(unsigned char *)(v60 + TParam::getValidConfig((TParam *)(v60 + 5376), v61) + 5528)) {
            *((void *)v194 + 4 * v184 + 2) &= 0xFFFFFFFFFFFFFFBCLL;
          }
          uint64_t v62 = *TWord::getOptionalTagBits(v59);
          uint64_t v186 = v58 + v179;
          if ((v62 & 0x80) != 0)
          {
            if (v179 && *((void *)&v209 + 1) != v186) {
              goto LABEL_78;
            }
          }
          else if (TDecompounder::isValidWord(v187, v178, (__int32 **)v59, v179 == 0, *((void *)&v209 + 1) == v58 + v179))
          {
            uint64_t v63 = *((void *)v187 + 1);
            uint64_t v64 = TParam::getActiveConfigHandle((TParam *)(v63 + 5872));
            if (*(unsigned char *)(v63 + TParam::getValidConfig((TParam *)(v63 + 5872), v64) + 6024)) {
              BOOL v65 = v207[0] == -1;
            }
            else {
              BOOL v65 = 1;
            }
            if (v65)
            {
              if (!*((void *)v201 + v186))
              {
                uint64_t v66 = TFsa::newState((TAllocator *)v185, 0);
                *((void *)v201 + v186) = v66;
              }
              operator new();
            }
LABEL_78:
            if (TWord::getWordSpec(v59) != -1 && (void *)__p != v213)
            {
              uint64_t v67 = 0;
              unint64_t v68 = (uint64_t)(__p - (void)v213) >> 3;
              if (v68 <= 1) {
                unint64_t v68 = 1;
              }
              unint64_t v181 = v68;
              while (1)
              {
                uint64_t v69 = *((void *)v213 + v67);
                uint64_t v192 = 0;
                uint64_t v193 = 0;
                uint64_t v191 = 0;
                uint64_t v182 = v69;
                uint64_t v183 = v67;
                uint64_t v70 = *(void **)(v69 + 16);
                if (!v70) {
                  goto LABEL_196;
                }
                do
                {
                  if ((v62 & 0x80) != 0 && (*(unsigned char *)TWord::getOptionalTagBits(*(TWord **)(*v70 + 8)) & 0x80) != 0)
                  {
                    uint64_t v98 = v192;
                    if (v192 >= v193)
                    {
                      uint64_t v105 = (v192 - (unsigned char *)v191) >> 3;
                      if ((unint64_t)(v105 + 1) >> 61) {
                        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v106 = (v193 - (unsigned char *)v191) >> 2;
                      if (v106 <= v105 + 1) {
                        unint64_t v106 = v105 + 1;
                      }
                      if ((unint64_t)(v193 - (unsigned char *)v191) >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v107 = v106;
                      }
                      if (v107) {
                        uint64_t v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v193, v107);
                      }
                      else {
                        uint64_t v108 = 0;
                      }
                      uint64_t v120 = &v108[8 * v105];
                      *(void *)uint64_t v120 = v70;
                      long long v99 = v120 + 8;
                      uint64_t v122 = (char *)v191;
                      uint64_t v121 = v192;
                      if (v192 != v191)
                      {
                        do
                        {
                          uint64_t v123 = *((void *)v121 - 1);
                          v121 -= 8;
                          *((void *)v120 - 1) = v123;
                          v120 -= 8;
                        }
                        while (v121 != v122);
                        uint64_t v121 = (char *)v191;
                      }
                      uint64_t v191 = v120;
                      uint64_t v192 = v99;
                      uint64_t v193 = &v108[8 * v107];
                      if (v121) {
                        operator delete(v121);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v192 = v70;
                      long long v99 = v98 + 8;
                    }
                    uint64_t v192 = v99;
                  }
                  else
                  {
                    uint64_t v71 = *((void *)v187 + 1);
                    uint64_t v72 = TParam::getActiveConfigHandle((TParam *)(v71 + 5872));
                    if (*(unsigned char *)(v71 + TParam::getValidConfig((TParam *)(v71 + 5872), v72) + 6024)) {
                      BOOL v73 = v207[0] == -1;
                    }
                    else {
                      BOOL v73 = 1;
                    }
                    if (!v73)
                    {
                      uint64_t v188 = 0;
                      uint64_t v189 = 0;
                      uint64_t v74 = v70;
                      uint64_t v190 = 0;
                      do
                      {
                        uint64_t WordSpec = TWord::getWordSpec(*(TWord **)(*v74 + 8));
                        uint64_t v77 = WordSpec;
                        uint64_t v78 = v76;
                        if (v189 >= (uint64_t *)v190)
                        {
                          uint64_t v80 = ((char *)v189 - (char *)v188) >> 4;
                          unint64_t v81 = v80 + 1;
                          if ((unint64_t)(v80 + 1) >> 60) {
                            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v82 = v190 - (char *)v188;
                          if ((v190 - (char *)v188) >> 3 > v81) {
                            unint64_t v81 = v82 >> 3;
                          }
                          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v83 = v81;
                          }
                          if (v83) {
                            long long v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v190, v83);
                          }
                          else {
                            long long v84 = 0;
                          }
                          uint64_t v85 = (unint64_t *)&v84[16 * v80];
                          *uint64_t v85 = v77;
                          v85[1] = v78;
                          uint64_t v86 = (unint64_t *)v189;
                          long long v87 = v85;
                          if (v189 != (uint64_t *)v188)
                          {
                            do
                            {
                              *((_OWORD *)v87 - 1) = *((_OWORD *)v86 - 1);
                              v87 -= 2;
                              v86 -= 2;
                            }
                            while (v86 != v188);
                            uint64_t v86 = v188;
                          }
                          uint64_t v79 = (uint64_t *)(v85 + 2);
                          uint64_t v188 = v87;
                          uint64_t v190 = &v84[16 * v83];
                          if (v86) {
                            operator delete(v86);
                          }
                        }
                        else
                        {
                          *uint64_t v189 = WordSpec;
                          v189[1] = v76;
                          uint64_t v79 = v189 + 2;
                        }
                        uint64_t v189 = v79;
                        uint64_t v74 = *(void **)(v74[3] + 16);
                      }
                      while (v74);
                      uint64_t v88 = (unint64_t *)(v79 - 2);
                      if (v188 != (unint64_t *)v79 && v88 > v188)
                      {
                        long long v90 = v188 + 2;
                        do
                        {
                          long long v212 = *((_OWORD *)v90 - 1);
                          long long v91 = v212;
                          *((_OWORD *)v90 - 1) = *(_OWORD *)v88;
                          *(_OWORD *)uint64_t v88 = v91;
                          v88 -= 2;
                          BOOL v92 = v90 >= v88;
                          v90 += 2;
                        }
                        while (!v92);
                      }
                      uint64_t v93 = TWord::getWordSpec(v59);
                      uint64_t v95 = v93;
                      uint64_t v96 = v94;
                      if (v189 >= (uint64_t *)v190)
                      {
                        uint64_t v100 = ((char *)v189 - (char *)v188) >> 4;
                        unint64_t v101 = v100 + 1;
                        if ((unint64_t)(v100 + 1) >> 60) {
                          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v102 = v190 - (char *)v188;
                        if ((v190 - (char *)v188) >> 3 > v101) {
                          unint64_t v101 = v102 >> 3;
                        }
                        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v103 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v103 = v101;
                        }
                        if (v103) {
                          uint64_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v190, v103);
                        }
                        else {
                          uint64_t v104 = 0;
                        }
                        uint64_t v109 = (unint64_t *)&v104[16 * v100];
                        *uint64_t v109 = v95;
                        v109[1] = v96;
                        uint64_t v110 = (unint64_t *)v189;
                        uint64_t v111 = v109;
                        if (v189 != (uint64_t *)v188)
                        {
                          do
                          {
                            *((_OWORD *)v111 - 1) = *((_OWORD *)v110 - 1);
                            v111 -= 2;
                            v110 -= 2;
                          }
                          while (v110 != v188);
                          uint64_t v110 = v188;
                        }
                        uint64_t v97 = (char *)(v109 + 2);
                        uint64_t v188 = v111;
                        uint64_t v190 = &v104[16 * v103];
                        if (v110) {
                          operator delete(v110);
                        }
                      }
                      else
                      {
                        *uint64_t v189 = v93;
                        v189[1] = v94;
                        uint64_t v97 = (char *)(v189 + 2);
                      }
                      unint64_t v112 = (unint64_t)(v97 - (char *)v188) >> 4;
                      if (*((void *)&v209 + 1) == v186) {
                        int HaveCommonPron = SDWord_WordsHaveCommonPron(v188, v112, (uint64_t)v207, 1u);
                      }
                      else {
                        int HaveCommonPron = SDWord_WordsHavePrefixPron(v188, v112, (uint64_t)v207, 1u);
                      }
                      if (!HaveCommonPron)
                      {
                        uint64_t v114 = v192;
                        if (v192 >= v193)
                        {
                          uint64_t v116 = (v192 - (unsigned char *)v191) >> 3;
                          if ((unint64_t)(v116 + 1) >> 61) {
                            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                          }
                          unint64_t v117 = (v193 - (unsigned char *)v191) >> 2;
                          if (v117 <= v116 + 1) {
                            unint64_t v117 = v116 + 1;
                          }
                          if ((unint64_t)(v193 - (unsigned char *)v191) >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v118 = v117;
                          }
                          if (v118) {
                            uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v193, v118);
                          }
                          else {
                            uint64_t v119 = 0;
                          }
                          uint64_t v124 = &v119[8 * v116];
                          *(void *)uint64_t v124 = v70;
                          uint64_t v115 = v124 + 8;
                          uint64_t v126 = (char *)v191;
                          uint64_t v125 = v192;
                          if (v192 != v191)
                          {
                            do
                            {
                              uint64_t v127 = *((void *)v125 - 1);
                              v125 -= 8;
                              *((void *)v124 - 1) = v127;
                              v124 -= 8;
                            }
                            while (v125 != v126);
                            uint64_t v125 = (char *)v191;
                          }
                          uint64_t v191 = v124;
                          uint64_t v192 = v115;
                          uint64_t v193 = &v119[8 * v118];
                          if (v125) {
                            operator delete(v125);
                          }
                        }
                        else
                        {
                          *(void *)uint64_t v192 = v70;
                          uint64_t v115 = v114 + 8;
                        }
                        uint64_t v192 = v115;
                      }
                      if (v188) {
                        operator delete(v188);
                      }
                    }
                  }
                  uint64_t v70 = (void *)v70[4];
                }
                while (v70);
                uint64_t v128 = v191;
                uint64_t v129 = v192;
                if (v191 == v192) {
                  goto LABEL_196;
                }
                if (TState::getTransCount(v182, 0) != (v129 - v128) >> 3) {
                  break;
                }
                if (v191)
                {
                  uint64_t v192 = (char *)v191;
                  operator delete(v191);
                }
                uint64_t v67 = v183 + 1;
                if (v183 + 1 == v181) {
                  goto LABEL_202;
                }
              }
              uint64_t v130 = TFsa::newState((TAllocator *)v185, 0);
              uint64_t v131 = v130;
              uint64_t v132 = __p;
              if ((unint64_t)__p >= *((void *)&__p + 1))
              {
                uint64_t v134 = (uint64_t)(__p - (void)v213) >> 3;
                if ((unint64_t)(v134 + 1) >> 61) {
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v135 = (uint64_t)(*((void *)&__p + 1) - (void)v213) >> 2;
                if (v135 <= v134 + 1) {
                  unint64_t v135 = v134 + 1;
                }
                if (*((void *)&__p + 1) - (void)v213 >= 0x7FFFFFFFFFFFFFF8uLL) {
                  unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v136 = v135;
                }
                if (v136) {
                  uint64_t v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&__p + 8, v136);
                }
                else {
                  uint64_t v137 = 0;
                }
                uint64_t v138 = &v137[8 * v134];
                *(void *)uint64_t v138 = v131;
                uint64_t v133 = v138 + 8;
                uint64_t v139 = (char *)__p;
                uint64_t v140 = (char *)v213;
                if ((void *)__p != v213)
                {
                  do
                  {
                    uint64_t v141 = *((void *)v139 - 1);
                    v139 -= 8;
                    *((void *)v138 - 1) = v141;
                    v138 -= 8;
                  }
                  while (v139 != v140);
                  uint64_t v139 = (char *)v213;
                }
                uint64_t v213 = v138;
                *(void *)&long long __p = v133;
                *((void *)&__p + 1) = &v137[8 * v136];
                if (v139) {
                  operator delete(v139);
                }
              }
              else
              {
                *(void *)long long __p = v130;
                uint64_t v133 = (void *)(v132 + 8);
              }
              *(void *)&long long __p = v133;
              uint64_t v142 = (void **)v191;
              if (v192 != v191)
              {
                unint64_t v143 = 0;
                do
                {
                  TFsa::moveTrans((uint64_t)v185, v142[v143], v142[v143][3], *(void *)(__p - 8));
                  ++v143;
                  uint64_t v142 = (void **)v191;
                }
                while (v143 < (v192 - (unsigned char *)v191) >> 3);
              }
              if (*(void *)(v182 + 24)) {
                operator new();
              }
LABEL_196:
              if (!*((void *)v201 + v186))
              {
                uint64_t v144 = TFsa::newState((TAllocator *)v185, 0);
                *((void *)v201 + v186) = v144;
              }
              operator new();
            }
          }
LABEL_202:
          uint64_t v56 = v184 + 1;
          uint64_t v55 = (char *)v194;
        }
        while (v184 + 1 < (unint64_t)((v195 - (unsigned char *)v194) >> 5));
      }
      if (v213)
      {
        *(void *)&long long __p = v213;
        operator delete(v213);
        uint64_t v55 = (char *)v194;
      }
      if (v55)
      {
        uint64_t v195 = v55;
        operator delete(v55);
      }
      if (v200 && v197 != v199 && v197) {
        MEMORY[0x216698730]();
      }
      unint64_t v13 = *((void *)&v209 + 1);
LABEL_212:
      uint64_t v14 = v179 + 1;
    }
    while (v179 + 1 < v13);
  }
  uint64_t v145 = *(v202 - 1);
  if (v145) {
    TFsa::addExtremity((uint64_t)v185, v145, 1u);
  }
  std::vector<unsigned long>::vector(&v213, (uint64_t)(v185[7] - v185[6]) >> 3);
  uint64_t v197 = 0;
  long long v198 = 0uLL;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v197, v185[5]);
  uint64_t v147 = (void *)v185[6];
  uint64_t v146 = (void *)v185[7];
  if (v147 != v146)
  {
    while (!*v147)
    {
      if (++v147 == v146) {
        goto LABEL_248;
      }
    }
  }
  if (v147 != v146)
  {
    do
    {
      uint64_t v148 = (void *)*v147;
      if (!*(void *)(*v147 + 24) && v148[5] == -1)
      {
        uint64_t v149 = v198;
        if ((unint64_t)v198 >= *((void *)&v198 + 1))
        {
          uint64_t v151 = (uint64_t)(v198 - (void)v197) >> 3;
          if ((unint64_t)(v151 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v152 = (uint64_t)(*((void *)&v198 + 1) - (void)v197) >> 2;
          if (v152 <= v151 + 1) {
            unint64_t v152 = v151 + 1;
          }
          if (*((void *)&v198 + 1) - (void)v197 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v153 = v152;
          }
          if (v153) {
            uint64_t v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v198 + 8, v153);
          }
          else {
            uint64_t v154 = 0;
          }
          uint64_t v155 = &v154[8 * v151];
          *(void *)uint64_t v155 = v148;
          uint64_t v150 = v155 + 8;
          uint64_t v157 = v197;
          uint64_t v156 = (char *)v198;
          if ((char *)v198 != v197)
          {
            do
            {
              uint64_t v158 = *((void *)v156 - 1);
              v156 -= 8;
              *((void *)v155 - 1) = v158;
              v155 -= 8;
            }
            while (v156 != v157);
            uint64_t v156 = v197;
          }
          uint64_t v197 = v155;
          *(void *)&long long v198 = v150;
          *((void *)&v198 + 1) = &v154[8 * v153];
          if (v156) {
            operator delete(v156);
          }
        }
        else
        {
          *(void *)long long v198 = v148;
          uint64_t v150 = (void *)(v149 + 8);
        }
        *(void *)&long long v198 = v150;
      }
      uint64_t TransCount = TState::getTransCount((uint64_t)v148, 1u);
      *((void *)v213 + *v148) = TransCount;
      uint64_t v160 = v147 + 1;
      while (v160 != v146)
      {
        if (*v160++)
        {
          uint64_t v147 = v160 - 1;
          goto LABEL_247;
        }
      }
      uint64_t v147 = v146;
LABEL_247:
      ;
    }
    while (v147 != (void *)v185[7]);
  }
LABEL_248:
  uint64_t v162 = (char *)v198;
  if ((char *)v198 != v197)
  {
    unint64_t v163 = 0;
    uint64_t v162 = v197;
    do
    {
      uint64_t v164 = *(void **)&v162[8 * v163];
      for (unint64_t i = (void *)v164[2]; i; unint64_t i = (void *)i[4])
      {
        uint64_t v166 = (void *)i[3];
        uint64_t v167 = v213;
        --*((void *)v213 + *v166);
        if (!v167[*v166])
        {
          uint64_t v168 = v198;
          if ((unint64_t)v198 >= *((void *)&v198 + 1))
          {
            uint64_t v170 = (uint64_t)(v198 - (void)v197) >> 3;
            if ((unint64_t)(v170 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v171 = (uint64_t)(*((void *)&v198 + 1) - (void)v197) >> 2;
            if (v171 <= v170 + 1) {
              unint64_t v171 = v170 + 1;
            }
            if (*((void *)&v198 + 1) - (void)v197 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v172 = v171;
            }
            if (v172) {
              uint64_t v173 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v198 + 8, v172);
            }
            else {
              uint64_t v173 = 0;
            }
            uint64_t v174 = &v173[8 * v170];
            *(void *)uint64_t v174 = v166;
            uint64_t v169 = v174 + 8;
            uint64_t v176 = v197;
            uint64_t v175 = (char *)v198;
            if ((char *)v198 != v197)
            {
              do
              {
                uint64_t v177 = *((void *)v175 - 1);
                v175 -= 8;
                *((void *)v174 - 1) = v177;
                v174 -= 8;
              }
              while (v175 != v176);
              uint64_t v175 = v197;
            }
            uint64_t v197 = v174;
            *(void *)&long long v198 = v169;
            *((void *)&v198 + 1) = &v173[8 * v172];
            if (v175) {
              operator delete(v175);
            }
          }
          else
          {
            *(void *)long long v198 = v166;
            uint64_t v169 = (void *)(v168 + 8);
          }
          *(void *)&long long v198 = v169;
        }
        if (*i) {
          MEMORY[0x216698730](*i, 0x1060C40A1FB9E56);
        }
      }
      TFsa::deleteState(v185, v164);
      ++v163;
      uint64_t v162 = v197;
    }
    while (v163 < (uint64_t)(v198 - (void)v197) >> 3);
  }
  if (v162)
  {
    *(void *)&long long v198 = v162;
    operator delete(v162);
  }
  if (v213)
  {
    *(void *)&long long __p = v213;
    operator delete(v213);
  }
  if (v201)
  {
    uint64_t v202 = v201;
    operator delete(v201);
  }
  if (v206 && v203 != v205 && v203) {
    MEMORY[0x216698730]();
  }
  if (v211 && v208 != v210 && v208) {
    MEMORY[0x216698730]();
  }
}

void sub_213FE3E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  int v39 = (void *)STACK[0xD88];
  if (STACK[0xD88])
  {
    STACK[0xD90] = (unint64_t)v39;
    operator delete(v39);
  }
  BOOL v40 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v40;
    operator delete(v40);
  }
  if (LOBYTE(STACK[0x938]))
  {
    unint64_t v41 = STACK[0x520];
    if (STACK[0x520] != a11)
    {
      if (v41) {
        MEMORY[0x216698730](v41, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xD68]))
  {
    if (STACK[0x950] != a12 && STACK[0x950] != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void fsaSearch(void *a1, uint64_t a2, int *a3, int *a4, __int32 *a5, _DWORD *a6, int a7, size_t a8, size_t a9, void **a10)
{
  uint64_t v14 = a2;
  if (*(void *)(a2 + 40) != -1)
  {
    *a6 = 0;
    HeadClone = (__int32 **)TLexicon::findHeadClone(a1, a5);
    if (!HeadClone) {
      HeadClone = (__int32 **)TLexicon::addTempWord((uint64_t)a1, a5, 0, 0, 0);
    }
    uint64_t v49 = (unsigned int *)v51;
    long long v50 = xmmword_214085190;
    char v52 = 1;
    uint64_t v45 = (const __int32 *)v47;
    long long v46 = xmmword_214085190;
    char v48 = 1;
    TWord::getWrittenForm(HeadClone, (uint64_t)&v49);
    TBuffer<wchar_t>::resize((uint64_t)&v45, 0);
    TBuffer<wchar_t>::insert((uint64_t)&v45, 0, a3, a4 - a3);
    if (*((void *)&v46 + 1) >= (unint64_t)v46)
    {
      if (v48)
      {
        v53[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v53, 1uLL);
        int v17 = v45;
        --*((void *)&v46 + 1);
      }
      else
      {
        int v17 = v45;
        if ((void)v46) {
          v45[v46 - 1] = 0;
        }
      }
    }
    else
    {
      int v17 = v45;
      v45[*((void *)&v46 + 1)] = 0;
    }
    if (*((void *)&v50 + 1) >= (unint64_t)v50)
    {
      if (v52)
      {
        v53[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), v53, 1uLL);
        uint64_t v18 = v49;
        --*((void *)&v50 + 1);
      }
      else
      {
        uint64_t v18 = v49;
        if ((void)v50) {
          v49[(void)v50 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v18 = v49;
      v49[*((void *)&v50 + 1)] = 0;
    }
    uint64_t Score = TLexicon::makeScore((uint64_t)a1, v17, v18, a8, a9);
    uint64_t v20 = HeadClone;
    uint64_t v21 = (__int32 **)*((void *)&v46 + 1);
    unint64_t v22 = (unint64_t)a10[2];
    unint64_t v23 = (__int32 ***)a10[1];
    if ((unint64_t)v23 >= v22)
    {
      BOOL v40 = v19;
      uint64_t v41 = v14;
      uint64_t v25 = ((char *)v23 - (unsigned char *)*a10) >> 5;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 59) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v22 - (void)*a10;
      if (v27 >> 4 > v26) {
        unint64_t v26 = v27 >> 4;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28) {
        uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(a10 + 2), v28);
      }
      else {
        uint64_t v29 = 0;
      }
      size_t v30 = (__int32 ***)&v29[32 * v25];
      uint64_t v31 = &v29[32 * v28];
      __int32 *v30 = v20;
      v30[1] = v21;
      v30[2] = (__int32 **)Score;
      v30[3] = v40;
      unint64_t v24 = v30 + 4;
      size_t v33 = (char *)*a10;
      uint64_t v32 = (char *)a10[1];
      if (v32 == *a10)
      {
        uint64_t v14 = v41;
      }
      else
      {
        uint64_t v14 = v41;
        do
        {
          long long v34 = *((_OWORD *)v32 - 1);
          *((_OWORD *)v30 - 2) = *((_OWORD *)v32 - 2);
          *((_OWORD *)v30 - 1) = v34;
          v30 -= 4;
          v32 -= 32;
        }
        while (v32 != v33);
        uint64_t v32 = (char *)*a10;
      }
      *a10 = v30;
      a10[1] = v24;
      a10[2] = v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      unsigned char *v23 = v20;
      v23[1] = v21;
      unint64_t v24 = v23 + 4;
      v23[2] = (__int32 **)Score;
      v23[3] = v19;
    }
    a10[1] = v24;
    if (v48 && v45 != (const __int32 *)v47 && v45) {
      MEMORY[0x216698730]();
    }
    if (v52 && v49 != (unsigned int *)v51 && v49) {
      MEMORY[0x216698730]();
    }
  }
  for (unint64_t i = *(uint64_t **)(v14 + 24); i; unint64_t i = (uint64_t *)i[5])
  {
    uint64_t v36 = *i;
    if (*i == 92) {
      int v37 = 1;
    }
    else {
      int v37 = a7;
    }
    if ((v37 & 1) == 0)
    {
      int v38 = *a4;
      uint64_t v39 = a1[34];
      if (!v39) {
        goto LABEL_52;
      }
      if ((unint64_t)v38 < 0x10000) {
        int v38 = *(_DWORD *)(v39 + 4 * v38);
      }
      if ((unint64_t)(int)v36 < 0x10000) {
        LODWORD(v39) = *(_DWORD *)(v39 + 4 * (int)v36);
      }
      else {
LABEL_52:
      }
        uint64_t v39 = *i;
      if (v38 != v39) {
        continue;
      }
    }
    *a6 = v36;
    fsaSearch(a1, i[2], a3, &a4[v37 ^ 1], a5, a6 + 1);
  }
}

void sub_213FE4438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (LOBYTE(STACK[0x468]) && a19 != a14 && a19) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x888]))
  {
    unint64_t v20 = STACK[0x470];
    if (STACK[0x470] != a15)
    {
      if (v20) {
        MEMORY[0x216698730](v20, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TDecompounder::addWords(TDecompounder *this, char **a2, TGraph *a3, TSegmenter *a4)
{
  uint64_t Segment = TSegmenter::getSegment(a4, a2[2]);
  if (Segment)
  {
    uint64_t v9 = Segment;
    unsigned int v10 = *(_DWORD *)(Segment + 24);
    BOOL v11 = v10 > 5;
    int v12 = (1 << v10) & 0x2D;
    if (v11 || v12 == 0)
    {
      uint64_t v75 = (unsigned int *)v77;
      long long v76 = xmmword_214085190;
      char v78 = 1;
      TBuffer<wchar_t>::assign((uint64_t)&v75, *(int **)Segment);
      uint64_t v14 = *(char **)(v9 + 8);
      if (*(_DWORD *)(v9 + 24) == 1
        && (uint64_t v15 = *((void *)this + 1),
            uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 13360)),
            *(unsigned char *)(v15 + TParam::getValidConfig((TParam *)(v15 + 13360), ActiveConfigHandle) + 13512))
        && *v14)
      {
        char v17 = 0;
        do
        {
          uint64_t v18 = TSegmenter::getSegment(a4, v14);
          uint64_t v19 = (int **)v18;
          if (!v18) {
            break;
          }
          if (**(_DWORD **)v18 != 45) {
            break;
          }
          uint64_t v20 = TSegmenter::getSegment(a4, *(char **)(v18 + 8));
          uint64_t v21 = v20;
          if (!v20) {
            break;
          }
          if (*(_DWORD *)(v20 + 24) != 1) {
            break;
          }
          uint64_t v22 = 0;
          unint64_t v23 = *v19;
          while (v23[v22++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), v23, v22 - 1);
          uint64_t v25 = 0;
          unint64_t v26 = *(int **)v21;
          while (v26[v25++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), v26, v25 - 1);
          uint64_t v14 = *(char **)(v21 + 8);
          char v17 = 1;
        }
        while (*v14);
      }
      else
      {
        char v17 = 0;
      }
      uint64_t OutEdge = TVertex::getOutEdge((uint64_t)a2);
      if (!OutEdge) {
        goto LABEL_30;
      }
      char v29 = 0;
LABEL_24:
      v29 |= (*(unsigned char *)(OutEdge + 64) & 0xC0) == 0;
      while (1)
      {
        uint64_t OutEdge = *(void *)(OutEdge + 8);
        if (!OutEdge) {
          break;
        }
        if (!*(unsigned char *)(OutEdge + 32)) {
          goto LABEL_24;
        }
      }
      if (v17 & 1 | ((v29 & 1) == 0)
        || (uint64_t v30 = *((void *)this + 1),
            uint64_t v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 13112)),
            *(unsigned char *)(v30 + TParam::getValidConfig((TParam *)(v30 + 13112), v31) + 13264)))
      {
LABEL_30:
        uint64_t v72 = 0;
        BOOL v73 = 0;
        uint64_t v74 = 0;
        uint64_t v32 = *(void **)this;
        if (*((void *)&v76 + 1) >= (unint64_t)v76)
        {
          if (v78)
          {
            v62[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), v62, 1uLL);
            size_t v33 = v75;
            --*((void *)&v76 + 1);
          }
          else
          {
            size_t v33 = v75;
            if ((void)v76) {
              v75[(void)v76 - 1] = 0;
            }
          }
        }
        else
        {
          size_t v33 = v75;
          v75[*((void *)&v76 + 1)] = 0;
        }
        long long v34 = TStringParam::get((TStringParam *)(*((void *)this + 1) + 10744));
        uint64_t v35 = *((void *)this + 1);
        uint64_t v36 = TParam::getActiveConfigHandle((TParam *)(v35 + 16464));
        size_t v37 = *(int *)(v35 + 4 * TParam::getValidConfig((TParam *)(v35 + 16464), v36) + 16624);
        uint64_t v38 = *((void *)this + 1);
        uint64_t v39 = TParam::getActiveConfigHandle((TParam *)(v38 + 16112));
        uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v38 + 16112), v39);
        TLexicon::findHeadClonesCollated(v32, v33, v34, v37, *(int *)(v38 + 4 * ValidConfig + 16272), &v72);
        if (v72 == v73) {
          goto LABEL_44;
        }
        unint64_t v41 = (v73 - (unsigned char *)v72) >> 5;
        if (v41 <= 1) {
          unint64_t v41 = 1;
        }
        uint64_t v42 = (char *)v72 + 16;
        while ((*v42 & 0x35) != 0)
        {
          v42 += 32;
          if (!--v41) {
            goto LABEL_44;
          }
        }
        uint64_t v43 = (const TWord *)*((void *)v42 - 2);
        if (!v43)
        {
LABEL_44:
          uint64_t v44 = *(void *)this;
          if (*((void *)&v76 + 1) >= (unint64_t)v76)
          {
            if (v78)
            {
              v62[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), v62, 1uLL);
              uint64_t v45 = (int *)v75;
              --*((void *)&v76 + 1);
            }
            else
            {
              uint64_t v45 = (int *)v75;
              if ((void)v76) {
                v75[(void)v76 - 1] = 0;
              }
            }
          }
          else
          {
            uint64_t v45 = (int *)v75;
            v75[*((void *)&v76 + 1)] = 0;
          }
          uint64_t v43 = (const TWord *)TLexicon::addTempWord(v44, v45, 0, 0, 0);
        }
        TFsa::TFsa((TFsa *)v62);
        TDecompounder::decompound(this, v43, (TFsa *)v62, v46, v47);
        if (v63)
        {
          uint64_t v60 = 0;
          std::vector<TVertex *>::vector(__p, (v65 - v64) >> 3, &v60);
          char v48 = v68;
          if (v68 != v69)
          {
            while (!*v48)
            {
              if (++v48 == v69)
              {
                char v48 = v69;
                break;
              }
            }
          }
          *((void *)__p[0] + *(void *)*v48) = a2;
          uint64_t v49 = TGraph::addVertex(a3, v14);
          long long v50 = v70;
          if (v70 != v71)
          {
            while (!*v50)
            {
              if (++v50 == v71)
              {
                long long v50 = v71;
                break;
              }
            }
          }
          *((void *)__p[0] + *(void *)*v50) = v49;
          uint64_t v52 = v64;
          uint64_t v51 = v65;
          if (v65 != v64)
          {
            unint64_t v53 = 0;
            do
            {
              if (*(void *)(v52 + 8 * v53) && !*((void *)__p[0] + v53))
              {
                uint64_t v54 = TGraph::addVertex(a3, 0);
                *((void *)__p[0] + v53) = v54;
                uint64_t v52 = v64;
                uint64_t v51 = v65;
              }
              ++v53;
            }
            while (v53 < (v51 - v52) >> 3);
          }
          uint64_t v56 = v66;
          uint64_t v55 = v67;
          if (v67 != v66)
          {
            unint64_t v57 = 0;
            do
            {
              uint64_t v58 = *(void *)(v56 + 8 * v57);
              if (v58)
              {
                uint64_t v59 = *(void *)v58;
                TGraph::addEdge(a3, *((void *)__p[0] + **(void **)(v58 + 24)), *((uint64_t **)__p[0] + **(void **)(v58 + 16)), *(void *)v58);
                MEMORY[0x216698730](v59, 0x1060C40A1FB9E56);
                uint64_t v56 = v66;
                uint64_t v55 = v67;
              }
              ++v57;
            }
            while (v57 < (v55 - v56) >> 3);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        TFsa::~TFsa((TFsa *)v62);
        if (v72)
        {
          BOOL v73 = v72;
          operator delete(v72);
        }
      }
      if (v78 && v75 != (unsigned int *)v77)
      {
        if (v75) {
          MEMORY[0x216698730]();
        }
      }
    }
  }
}

void sub_213FE4A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (__p) {
    operator delete(__p);
  }
  TFsa::~TFsa((TFsa *)&a15);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (LOBYTE(STACK[0x540]))
  {
    if (a46 != a10 && a46 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>(uint64_t result, const __int32 **a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v10 = (const __int32 **)result;
LABEL_2:
  BOOL v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unsigned int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = wcscmp(*(a2 - 1), *v11);
          if ((result & 0x80000000) != 0)
          {
            uint64_t v22 = *v11;
            *BOOL v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,wchar_t const**>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    char v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v17 - 1, v17, &v11[v16 + 1]);
      uint64_t v18 = *v11;
      *BOOL v11 = *v17;
      *char v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((wcscmp(*(v11 - 1), *v11) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(v11, a2);
      BOOL v11 = (const __int32 **)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, v19);
    BOOL v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>(v10, v19, a3, -v13, a5 & 1);
      BOOL v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, a2);
  }
}

const __int32 **std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **result, const __int32 **a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v5 = 0;
      char v6 = result;
      do
      {
        char v8 = *v6;
        uint64_t v7 = v6[1];
        char v6 = v4;
        uint64_t result = (const __int32 **)wcscmp(v7, v8);
        if ((result & 0x80000000) != 0)
        {
          uint64_t v9 = *v6;
          uint64_t v10 = v5;
          while (1)
          {
            *(const __int32 **)((char *)v3 + v10 + 8) = *(const __int32 **)((char *)v3 + v10);
            if (!v10) {
              break;
            }
            uint64_t result = (const __int32 **)wcscmp(v9, *(const __int32 **)((char *)v3 + v10 - 8));
            v10 -= 8;
            if ((result & 0x80000000) == 0)
            {
              BOOL v11 = (const __int32 **)((char *)v3 + v10 + 8);
              goto LABEL_10;
            }
          }
          BOOL v11 = v3;
LABEL_10:
          *BOOL v11 = v9;
        }
        unint64_t v4 = v6 + 1;
        v5 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

const __int32 **std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **result, const __int32 **a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    while (v3 + 1 != a2)
    {
      uint64_t v5 = *v3;
      unint64_t v4 = v3[1];
      ++v3;
      uint64_t result = (const __int32 **)wcscmp(v4, v5);
      if ((result & 0x80000000) != 0)
      {
        char v6 = *v3;
        uint64_t v7 = v3;
        do
        {
          char v8 = v7;
          uint64_t v9 = *--v7;
          *char v8 = v9;
          uint64_t result = (const __int32 **)wcscmp(v6, *(v8 - 2));
        }
        while ((result & 0x80000000) != 0);
        *uint64_t v7 = v6;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3)
{
  int v6 = wcscmp(*a2, *a1);
  int v7 = wcscmp(*a3, *a2);
  if (v6 < 0)
  {
    uint64_t v9 = *a1;
    if (v7 < 0)
    {
      *a1 = *a3;
      *a3 = v9;
    }
    else
    {
      *a1 = *a2;
      *a2 = v9;
      if (wcscmp(*a3, v9) < 0)
      {
        uint64_t v10 = *a2;
        *a2 = *a3;
        *a3 = v10;
        return 2;
      }
    }
  }
  else
  {
    if ((v7 & 0x80000000) == 0) {
      return 0;
    }
    BOOL v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (wcscmp(*a2, *a1) < 0)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      return 2;
    }
  }
  return 1;
}

const __int32 **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *a1;
  if (wcscmp(*a1, *(a2 - 1)) < 0)
  {
    int v6 = a1;
    do
    {
      int v7 = v6[1];
      ++v6;
    }
    while ((wcscmp(v4, v7) & 0x80000000) == 0);
  }
  else
  {
    uint64_t v5 = a1 + 1;
    do
    {
      int v6 = v5;
      if (v5 >= v2) {
        break;
      }
      ++v5;
    }
    while ((wcscmp(v4, *v6) & 0x80000000) == 0);
  }
  if (v6 < v2)
  {
    do
      char v8 = *--v2;
    while (wcscmp(v4, v8) < 0);
  }
  while (v6 < v2)
  {
    uint64_t v9 = *v6;
    const __int32 *v6 = *v2;
    *uint64_t v2 = v9;
    do
    {
      uint64_t v10 = v6[1];
      ++v6;
    }
    while ((wcscmp(v4, v10) & 0x80000000) == 0);
    do
      BOOL v11 = *--v2;
    while (wcscmp(v4, v11) < 0);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v4;
  return v6;
}

const __int32 **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a1;
  do
    int v6 = wcscmp(a1[++v4], v5);
  while (v6 < 0);
  int v7 = &a1[v4];
  char v8 = &a1[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      uint64_t v10 = *--a2;
    }
    while ((wcscmp(v10, v5) & 0x80000000) == 0);
  }
  else
  {
    do
      uint64_t v9 = *--a2;
    while ((wcscmp(v9, v5) & 0x80000000) == 0);
  }
  if (v7 < a2)
  {
    BOOL v11 = &a1[v4];
    uint64_t v12 = a2;
    do
    {
      uint64_t v13 = *v11;
      *BOOL v11 = *v12;
      const __int32 *v12 = v13;
      do
      {
        uint64_t v14 = v11[1];
        ++v11;
      }
      while (wcscmp(v14, v5) < 0);
      do
        unint64_t v15 = *--v12;
      while ((wcscmp(v15, v5) & 0x80000000) == 0);
    }
    while (v11 < v12);
    char v8 = v11 - 1;
  }
  if (v8 != a1) {
    *a1 = *v8;
  }
  *char v8 = v5;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (wcscmp(*(a2 - 1), *a1) < 0)
      {
        int v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2);
      char v8 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (wcscmp(*v8, *v7) < 0)
    {
      BOOL v11 = *v8;
      uint64_t v12 = v9;
      while (1)
      {
        uint64_t v13 = (const __int32 **)((char *)a1 + v12);
        *(const __int32 **)((char *)a1 + v12 + 24) = *(const __int32 **)((char *)a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        v12 -= 8;
        if ((wcscmp(v11, v13[1]) & 0x80000000) == 0)
        {
          uint64_t v14 = (const __int32 **)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v14 = a1;
LABEL_12:
      *uint64_t v14 = v11;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    int v7 = v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, const __int32 **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a2, a3);
  uint64_t result = wcscmp(*a4, *a3);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t result = wcscmp(*a3, *a2);
    if ((result & 0x80000000) != 0)
    {
      int v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      uint64_t result = wcscmp(*a2, *a1);
      if ((result & 0x80000000) != 0)
      {
        BOOL v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, const __int32 **a4, const __int32 **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a2, a3, a4);
  uint64_t result = wcscmp(*a5, *a4);
  if ((result & 0x80000000) != 0)
  {
    BOOL v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t result = wcscmp(*a4, *a3);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      uint64_t result = wcscmp(*a3, *a2);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        uint64_t result = wcscmp(*a2, *a1);
        if ((result & 0x80000000) != 0)
        {
          uint64_t v14 = *a1;
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

const __int32 **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (wcscmp(*v14, *a1) < 0)
        {
          unint64_t v15 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      char v17 = a2 - 1;
      do
      {
        uint64_t v18 = *a1;
        uint64_t v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a4, v16);
        if (v17 == v19)
        {
          *uint64_t v19 = v18;
        }
        else
        {
          *uint64_t v19 = *v17;
          *char v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(uint64_t result, uint64_t a2, uint64_t a3, const __int32 **a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 2;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (const __int32 **)(result + 8 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3 && wcscmp(*v11, v11[1]) < 0)
      {
        ++v11;
        uint64_t v10 = v12;
      }
      uint64_t result = wcscmp(*v11, *v5);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v13 = *v5;
        do
        {
          uint64_t v14 = v11;
          const __int32 *v5 = *v11;
          if (v7 < v10) {
            break;
          }
          uint64_t v15 = (2 * v10) | 1;
          unint64_t v11 = (const __int32 **)(v6 + 8 * v15);
          if (2 * v10 + 2 < a3 && wcscmp(*v11, v11[1]) < 0)
          {
            ++v11;
            uint64_t v15 = 2 * v10 + 2;
          }
          uint64_t result = wcscmp(*v11, v13);
          uint64_t v5 = v14;
          uint64_t v10 = v15;
        }
        while ((result & 0x80000000) == 0);
        *uint64_t v14 = v13;
      }
    }
  }
  return result;
}

const __int32 **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[v5 + 1];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3 && wcscmp(*v8, a1[v5 + 2]) < 0)
    {
      ++v8;
      uint64_t v9 = v10;
    }
    *a1 = *v8;
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (const __int32 **)(result + 8 * (v4 >> 1));
    uint64_t v8 = (const __int32 **)(a2 - 8);
    uint64_t result = wcscmp(*v7, *(const __int32 **)(a2 - 8));
    if ((result & 0x80000000) != 0)
    {
      uint64_t v9 = *v8;
      do
      {
        uint64_t v10 = v7;
        *uint64_t v8 = *v7;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (const __int32 **)(v5 + 8 * v6);
        uint64_t result = wcscmp(*v7, v9);
        uint64_t v8 = v10;
      }
      while ((result & 0x80000000) != 0);
      *uint64_t v10 = v9;
    }
  }
  return result;
}

void *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::find<TState *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = TFsaBuilder::TStateCompare::operator()(v5, v3[4], *a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      unint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || TFsaBuilder::TStateCompare::operator()(v5, *a2, v6[4])) {
    return v2;
  }
  return v6;
}

uint64_t TFsaBuilder::TStateCompare::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a3 + 40);
  if ((v3 != -1) == (v4 != -1)) {
    return std::__lexicographical_compare[abi:ne180100]<TFsaBuilder::TTransCompare &,TTransConstIteratorDef,TTransConstIteratorDef>(*(unint64_t **)(a2 + 24), 1u, 0, 1, *(unint64_t **)(a3 + 24), 1u, 0, 1);
  }
  return v4 != -1 && v3 == -1;
}

uint64_t std::__lexicographical_compare[abi:ne180100]<TFsaBuilder::TTransCompare &,TTransConstIteratorDef,TTransConstIteratorDef>(unint64_t *a1, unsigned int a2, unint64_t *a3, int a4, unint64_t *a5, unsigned int a6, unint64_t *a7, int a8)
{
  if (a6 == a8 && a5 == a7) {
    return 0;
  }
  while (a2 != a4 || a1 != a3)
  {
    unint64_t v9 = *a1;
    unint64_t v10 = *a5;
    BOOL v11 = *a1 >= *a5;
    if (*a1 == *a5)
    {
      unint64_t v9 = a1[2];
      unint64_t v10 = a5[2];
      BOOL v11 = v9 >= v10;
    }
    if (!v11) {
      break;
    }
    if (v10 >= v9)
    {
      a1 = (unint64_t *)a1[a2 + 4];
      a5 = (unint64_t *)a5[a6 + 4];
      if (a6 != a8 || a5 != a7) {
        continue;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__emplace_unique_key_args<TState *,TState * const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__find_equal<TState *>((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    unint64_t v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__find_equal<TState *>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        if (!TFsaBuilder::TStateCompare::operator()(v7, *a3, v4[4])) {
          break;
        }
        uint64_t v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!TFsaBuilder::TStateCompare::operator()(v7, v8[4], *a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *std::vector<TState *>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_213FE5C50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TVertex *>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_213FE5CD4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL arabicToRoman(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 - 3000;
  if (a1 - 3000 >= 0xFFFFFFFFFFFFF449)
  {
    unint64_t v4 = a1;
    uint64_t v5 = 0;
    unint64_t v6 = 1000;
    do
    {
      if (v6 <= v4)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (int *)*(&arabicToRoman(unsigned long,TBuffer<wchar_t> &)::pppszRomanTable + 9 * (3 - v5) + v4 / v6 - 1);
        while (v8[v7++])
          ;
        TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), v8, v7 - 1);
      }
      v4 %= v6;
      ++v5;
      v6 /= 0xAuLL;
    }
    while (v5 != 4);
  }
  return v2 < 0xFFFFFFFFFFFFF449;
}

BOOL romanToArabic(__int32 *a1, void *a2)
{
  *a2 = 0;
  __int32 v3 = *a1;
  if (*a1)
  {
    unint64_t v4 = a1;
    BOOL v5 = 0;
    while (1)
    {
      unint64_t v6 = wcschr(dword_2140A81D8, v3);
      if (!v6) {
        return 1;
      }
      if ((unint64_t)((char *)v6 - (char *)dword_2140A81D8) <= 0x18) {
        unint64_t v7 = v6 - dword_2140A81D8;
      }
      else {
        unint64_t v7 = v6 - dword_2140A81D8 - 7;
      }
      __int32 v8 = v4[1];
      if (!v8) {
        goto LABEL_19;
      }
      uint64_t v9 = wcschr(dword_2140A81D8, v8);
      if (!v9) {
        return 1;
      }
      unint64_t v10 = (unint64_t)((char *)v9 - (char *)dword_2140A81D8) <= 0x18
          ? v9 - dword_2140A81D8
          : v9 - dword_2140A81D8 - 7;
      if (v5 && v10 > v7) {
        return 1;
      }
      BOOL v5 = v7 == v10;
      if (v7)
      {
        if (v10 >= v7) {
          return 1;
        }
      }
      else if (v10 > v7 + 2)
      {
        return 1;
      }
      if (v10 > v7)
      {
        uint64_t v11 = romanToArabic(wchar_t const*,unsigned long &)::pNums[v10]
            - romanToArabic(wchar_t const*,unsigned long &)::pNums[v7]
            + *a2;
        *a2 = v11;
        v4 += 2;
      }
      else
      {
LABEL_19:
        uint64_t v11 = *a2 + romanToArabic(wchar_t const*,unsigned long &)::pNums[v7];
        *a2 = v11;
        ++v4;
      }
      __int32 v3 = *v4;
      if (!*v4) {
        return v11 == 0;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    return v11 == 0;
  }
}

char *getNextToken(char *a1, uint64_t a2, char *a3)
{
  TBuffer<char>::resize(a2, 0);
  if (!a1) {
    return 0;
  }
  char v6 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v7 = a1;
  while (strchr(a3, v6))
  {
    int v8 = *++a1;
    char v6 = v8;
    ++v7;
    if (!v8) {
      return 0;
    }
  }
  uint64_t v9 = a1;
  do
  {
    if (strchr(a3, v6)) {
      break;
    }
    int v11 = *++v9;
    char v6 = v11;
  }
  while (v11);
  TBuffer<char>::resize(a2, 0);
  TBuffer<char>::insert(a2, 0, a1, v9 - v7);
  return v9;
}

int *getNextToken(int *a1, uint64_t a2, __int32 *a3)
{
  TBuffer<wchar_t>::resize(a2, 0);
  if (!a1) {
    return 0;
  }
  __int32 v6 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v7 = a1;
  while (wcschr(a3, v6))
  {
    __int32 v8 = a1[1];
    ++a1;
    __int32 v6 = v8;
    ++v7;
    if (!v8) {
      return 0;
    }
  }
  __int32 v9 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v10 = a1;
  do
  {
    if (wcschr(a3, v9)) {
      break;
    }
    __int32 v11 = v10[1];
    ++v10;
    __int32 v9 = v11;
  }
  while (v11);
  TBuffer<wchar_t>::resize(a2, 0);
  TBuffer<wchar_t>::insert(a2, 0, a1, v10 - v7);
  return v10;
}

uint64_t slashEscape(uint64_t result, uint64_t a2)
{
  for (unint64_t i = (int *)result; ; ++i)
  {
    int v4 = *i;
    if (*i > 12)
    {
      switch(v4)
      {
        case 13:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = (int *)&unk_2140A822C;
          goto LABEL_13;
        case 34:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = (int *)&unk_2140A8244;
          goto LABEL_13;
        case 92:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = (int *)&unk_2140A8238;
LABEL_13:
          unint64_t v8 = 2;
          goto LABEL_14;
      }
      goto LABEL_16;
    }
    if (v4 == 9)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = (int *)&unk_2140A8214;
      goto LABEL_13;
    }
    if (v4 == 10)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = (int *)&unk_2140A8220;
      goto LABEL_13;
    }
    if (!v4) {
      break;
    }
LABEL_16:
    int v9 = *i;
    unint64_t v5 = *(void *)(a2 + 16);
    unint64_t v7 = &v9;
    uint64_t v6 = a2;
    unint64_t v8 = 1;
LABEL_14:
    uint64_t result = TBuffer<wchar_t>::insert(v6, v5, v7, v8);
  }
  return result;
}

{
  unsigned char *i;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;

  for (unint64_t i = (unsigned char *)result; ; ++i)
  {
    int v4 = *i;
    if (v4 > 0xC)
    {
      switch(v4)
      {
        case 0xDu:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = "\\r";
          goto LABEL_13;
        case 0x22u:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = "\\\"";
          goto LABEL_13;
        case 0x5Cu:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = "\\\\"";
LABEL_13:
          unint64_t v8 = 2;
          goto LABEL_14;
      }
      goto LABEL_16;
    }
    if (v4 == 9)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = "\\t";
      goto LABEL_13;
    }
    if (v4 == 10)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = "\\n";
      goto LABEL_13;
    }
    if (!*i) {
      break;
    }
LABEL_16:
    int v9 = v4;
    unint64_t v5 = *(void *)(a2 + 16);
    unint64_t v7 = &v9;
    uint64_t v6 = a2;
    unint64_t v8 = 1;
LABEL_14:
    uint64_t result = TBuffer<char>::insert(v6, v5, v7, v8);
  }
  return result;
}

uint64_t tildeEscape(uint64_t result, uint64_t a2)
{
  for (unint64_t i = (int *)result; ; ++i)
  {
    int v4 = *i;
    if (*i <= 31) {
      break;
    }
    if (v4 != 32)
    {
      if (v4 == 95)
      {
        unint64_t v5 = *(void *)(a2 + 16);
        uint64_t v6 = a2;
        unint64_t v7 = (int *)&unk_2140A8280;
        goto LABEL_16;
      }
      if (v4 == 126)
      {
        unint64_t v5 = *(void *)(a2 + 16);
        uint64_t v6 = a2;
        unint64_t v7 = (int *)&unk_2140A8274;
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = a2;
    unint64_t v7 = (int *)&unk_2140A828C;
LABEL_19:
    unint64_t v8 = 1;
LABEL_20:
    uint64_t result = TBuffer<wchar_t>::insert(v6, v5, v7, v8);
  }
  if (v4 > 9)
  {
    if (v4 == 10)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = (int *)&unk_2140A825C;
      goto LABEL_16;
    }
    if (v4 == 13)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = (int *)&unk_2140A8268;
LABEL_16:
      unint64_t v8 = 2;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v4 == 9)
  {
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = a2;
    unint64_t v7 = (int *)&unk_2140A8250;
    goto LABEL_16;
  }
  if (v4)
  {
LABEL_18:
    int v9 = *i;
    unint64_t v5 = *(void *)(a2 + 16);
    unint64_t v7 = &v9;
    uint64_t v6 = a2;
    goto LABEL_19;
  }
  return result;
}

uint64_t formatString(__int32 *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = a1;
  uint64_t v6 = wcschr(a1, 37);
  if (v6)
  {
    unint64_t v7 = v6;
    do
    {
      unint64_t v8 = v7 + 1;
      unint64_t v9 = (v7[1] - 49);
      if (v9 > 8 || v9 >= (uint64_t)(a2[1] - *a2) >> 3)
      {
        unint64_t v8 = v7;
      }
      else
      {
        TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), v5, v7 - v5);
        uint64_t v10 = 0;
        __int32 v11 = *(int **)(*a2 + 8 * v9);
        while (v11[v10++])
          ;
        TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), v11, v10 - 1);
        unint64_t v5 = v7 + 2;
      }
      unint64_t v7 = wcschr(v8 + 1, 37);
    }
    while (v7);
  }
  uint64_t v13 = 0;
  unint64_t v14 = *(void *)(a3 + 16);
  while (v5[v13++])
    ;

  return TBuffer<wchar_t>::insert(a3, v14, v5, v13 - 1);
}

void MrecInitModule_recogctl_recogctl(void)
{
  if (!gParDebugShowPerFrameRecognitionTimes)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPerFrameRecognitionTimes", (const char *)&unk_2140A82B0, (const char *)&unk_2140A82B0, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugShowPerFrameRecognitionTimes = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPerFrameRecognitionTimes);
  }
  if (!gParDebugShowRecogWorkTypeStateTransitions)
  {
    unint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowRecogWorkTypeStateTransitions", (const char *)&unk_2140A82B0, (const char *)&unk_2140A82B0, 0, 0, 0);
    *__int32 v3 = &unk_26C4E0858;
    gParDebugShowRecogWorkTypeStateTransitions = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowRecogWorkTypeStateTransitions);
  }
  if (!gParDebugShowParamSetParametersOnLoad)
  {
    int v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowParamSetParametersOnLoad", (const char *)&unk_2140A82B0, (const char *)&unk_2140A82B0, 0, 0, 0);
    void *v5 = &unk_26C4E0858;
    gParDebugShowParamSetParametersOnLoad = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowParamSetParametersOnLoad);
  }
  if (!gParDebugResultProcessing)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugResultProcessing", (const char *)&unk_2140A82B0, (const char *)&unk_2140A82B0, 0, 0, 0);
    *unint64_t v7 = &unk_26C4E0858;
    gParDebugResultProcessing = (uint64_t)v7;
    unint64_t v8 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v8, (GlobalParam **)&gParDebugResultProcessing);
  }
}

uint64_t RecogSpecLayer::RecogSpecLayer(uint64_t a1, uint64_t a2, int a3, int a4, char a5, int a6, int a7, int a8, double a9, char a10, unsigned int a11, int a12, unsigned int a13, unsigned int a14, unsigned int a15, int a16, unsigned int a17, uint64_t a18, char a19, char a20,char a21,unsigned int a22,unsigned int a23,unsigned int a24,unsigned int a25,int a26,int a27)
{
  uint64_t v27 = a2;
  int v29 = a16;
  if (a4)
  {
    long long v59 = 0uLL;
    unint64_t v61 = 0;
    unsigned int v60 = 0;
    if (a7 + a6 + *(_DWORD *)(a2 + 364) >= 5000) {
      a6 = 5000;
    }
    else {
      a6 += a7 + *(_DWORD *)(a2 + 364);
    }
    int v58 = -1;
    a7 = 0;
  }
  else
  {
    *((void *)&v59 + 1) = __PAIR64__(a14, a13);
    DWORD1(v59) = a12;
    unint64_t v61 = __PAIR64__(a11, a15);
    if (a3)
    {
      unsigned int v60 = *(unsigned char *)(a2 + 204) != 0;
      LODWORD(v59) = *(_DWORD *)(a2 + 84);
    }
    else
    {
      LODWORD(v59) = 0;
      unsigned int v60 = 0;
    }
    int v58 = *(_DWORD *)(a2 + 304);
  }
  if (a4)
  {
    a9 = *(double *)(a2 + 352);
    int v30 = *(_DWORD *)(a2 + 360);
    BOOL v31 = v30 == -1 || a16 == -1;
    int v32 = v30 + a16;
    if (v31) {
      int v29 = -1;
    }
    else {
      int v29 = v32;
    }
  }
  unsigned int v57 = *(_DWORD *)(a2 + 164);
  unsigned int v56 = *(_DWORD *)(a2 + 296);
  unsigned int v55 = *(_DWORD *)(a2 + 292);
  unsigned int v54 = *(_DWORD *)(a2 + 288);
  unsigned int v53 = *(_DWORD *)(a2 + 300);
  unsigned int v52 = *(_DWORD *)(a2 + 284);
  unsigned int v51 = *(_DWORD *)(a2 + 344);
  unsigned int v48 = *(_DWORD *)(a2 + 60);
  unsigned int v49 = *(_DWORD *)(a2 + 64);
  unsigned int v50 = *(_DWORD *)(a2 + 56);
  int v33 = *(_DWORD *)(a2 + 68);
  int v34 = *(unsigned __int8 *)(a2 + 448);
  uint64_t v62 = a1;
  if (a3) {
    LOBYTE(a3) = *(unsigned char *)(v27 + 40) != 0;
  }
  *((void *)&v47 + 1) = __PAIR64__(a25, a24);
  *(void *)&long long v47 = __PAIR64__(a23, a22);
  HIDWORD(v46) = *(_DWORD *)(v27 + 48);
  HIDWORD(v45) = *(_DWORD *)(v27 + 168);
  LODWORD(v46) = *(_DWORD *)(v27 + 160);
  LOBYTE(v45) = *(unsigned char *)(v27 + 196);
  *((void *)&v44 + 1) = a18;
  *(void *)&long long v44 = __PAIR64__(a17, v29);
  *((void *)&v43 + 1) = __PAIR64__(v49, v51);
  *(void *)&long long v43 = __PAIR64__(v52, v53);
  *((void *)&v40 + 1) = __PAIR64__(v54, v55);
  *(void *)&long long v40 = __PAIR64__(v56, v57);
  *((void *)&v39 + 1) = __PAIR64__(v61, HIDWORD(v59));
  *(void *)&long long v39 = *(void *)((char *)&v59 + 4);
  RecognizerOptions::RecognizerOptions(a1, a5, a6, a7, a8, a10, v60, HIDWORD(v61), a9, v39, v59, v58, v40, v43, __SPAIR64__(v48, v50), v33, v34 != 0, v44, *(_OWORD *)(v27 + 228),
    *(unsigned char *)(v27 + 52) != 0,
    *(unsigned char *)(v27 + 53) != 0,
    a19,
    a20,
    a3,
    *(unsigned char *)(v27 + 260),
    __SPAIR64__(*(_DWORD *)(v27 + 380), *(_DWORD *)(v27 + 324)),
    *(_DWORD *)(v27 + 372),
    *(unsigned char *)(v27 + 376),
    *(unsigned char *)(v27 + 384),
    *(_DWORD *)(v27 + 72),
    BYTE1(*(_DWORD *)(v27 + 72)),
    BYTE2(*(_DWORD *)(v27 + 72)),
    HIBYTE(*(_DWORD *)(v27 + 72)),
    *(_DWORD *)(v27 + 192),
    v45,
    v46,
    *(_DWORD *)(v27 + 44),
    a21,
    v47,
    a26,
    a27);
  v35.n128_u64[0] = *(void *)(v27 + 488);
  int v42 = *(_DWORD *)(v27 + 160);
  LOBYTE(v41) = *(unsigned char *)(v27 + 196);
  FstCoreOptions::FstCoreOptions(v62 + 216, (int)*(double *)(v27 + 416), (int)*(double *)(v27 + 424), *(unsigned char *)(v27 + 444), *(_DWORD *)(v27 + 432), *(_DWORD *)(v27 + 436), *(_DWORD *)(v27 + 440), -(int)v35.n128_f64[0], v35, *(_DWORD *)(v27 + 476), *(void *)(v27 + 496), BYTE4(*(void *)(v27 + 496)), *(_DWORD *)(v27 + 48), *(_DWORD *)(v27 + 44), *(_DWORD *)(v27 + 192), v41, *(_DWORD *)(v27 + 168), v42, SBYTE1(v42),
    SBYTE2(v42),
    SHIBYTE(v42));
  *(void *)(v62 + 296) = v27;
  if (!*(unsigned char *)(v62 + 17)
    || !*(unsigned char *)(v62 + 140)
    || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 429, (uint64_t)"recogctl/recogctl", 12, (uint64_t)"%.500s %.500s %.500s %.500s", v36, v37, (char)"SearchActiveNodePreserveMultipleHistories"), (uint64_t v27 = *(void *)(v62 + 296)) != 0))
  {
    ++*(_DWORD *)(v27 + 36);
  }
  return v62;
}

void sub_213FE6AF8(_Unwind_Exception *a1)
{
}

uint64_t RecogSpecLayer::RecogSpecLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = RecognizerOptions::RecognizerOptions();
  FstCoreOptions::FstCoreOptions(v4 + 216, a2 + 216);
  uint64_t v5 = *(void *)(a2 + 296);
  *(void *)(a1 + 296) = v5;
  if (v5) {
    ++*(_DWORD *)(v5 + 36);
  }
  return a1;
}

void sub_213FE6B6C(_Unwind_Exception *a1)
{
}

void RecogSpecLayer::~RecogSpecLayer(RecogSpecLayer *this)
{
  uint64_t v1 = *((void *)this + 37);
  if (v1)
  {
    --*(_DWORD *)(v1 + 36);
    *((void *)this + 37) = 0;
  }
  MrecInitModule_sdpres_sdapi();

  MrecInitModule_sdpres_sdapi();
}

void RecogSpec::RecogSpec(RecogSpec *this, char a2, char a3, __int16 a4, __int16 a5)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(unsigned char *)this = a2;
  *((unsigned char *)this + 6) = a3;
  *((_WORD *)this + 1) = a4;
  *((_WORD *)this + 2) = a5;
}

uint64_t RecogSpec::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  uint64_t v4 = (unsigned int *)(a1 + 8);
  if (*(_DWORD *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      DgnDelete<RecogSpecLayer>(*(RecogSpecLayer **)(*(void *)(a1 + 8) + 8 * v5));
      *(void *)(*(void *)(a1 + 8) + 8 * v5++) = 0;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
  DgnIOwnArray<RecogSpecLayer *>::copyArraySlice(v4, (void *)(a2 + 8), 0, *(_DWORD *)(a2 + 16));
  if (*(_DWORD *)(a1 + 16))
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = MemChunkAlloc(0x130uLL, 0);
      *(void *)(*(void *)(a1 + 8) + 8 * v6) = RecogSpecLayer::RecogSpecLayer((uint64_t)v7, *(void *)(*(void *)(a1 + 8) + 8 * v6));
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 16));
  }
  return a1;
}

RecogSpecLayer *DgnDelete<RecogSpecLayer>(RecogSpecLayer *result)
{
  if (result)
  {
    RecogSpecLayer::~RecogSpecLayer(result);
    return (RecogSpecLayer *)MemChunkFree(v1, 0);
  }
  return result;
}

void RecogSpec::RecogSpec(RecogSpec *this, const RecogSpec *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  RecogSpec::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_213FE6D18(_Unwind_Exception *a1)
{
  DgnIOwnArray<RecogSpecLayer *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void RecogSpec::~RecogSpec(RecogSpec *this)
{
}

uint64_t sizeObject<RecogSpecLayer *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    int v13 = gShadowDiagnosticShowIdealizedObjectSizes;
    if ((int)v5 >= 1)
    {
      unint64_t v6 = v5 + 1;
      int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v7) {
          uint64_t v8 = 4;
        }
        else {
          uint64_t v8 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v9 = *(void *)(*(void *)a1 + 8 * (v6 - 2));
          if (v9)
          {
            unint64_t v10 = RecognizerOptions::sizeObject(*(void *)(*(void *)a1 + 8 * (v6 - 2)), a2);
            v8 += v10 + sizeObject(v9 + 216, a2);
            int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v8;
        --v6;
      }
      while (v6 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v13) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

unint64_t RecogSpec::addLayer(unsigned __int8 *a1, uint64_t a2, int a3, char a4, int a5, int a6, int a7, char a8, double a9, unsigned int a10, int a11, unsigned int a12, unsigned int a13, unsigned int a14, int a15, unsigned int a16, unsigned int a17, unsigned int a18, char a19, char a20,char a21,unsigned int a22,unsigned int a23,unsigned int a24,unsigned int a25,int a26,int a27)
{
  int v30 = *a1;
  BOOL v31 = MemChunkAlloc(0x130uLL, 0);
  unint64_t result = RecogSpecLayer::RecogSpecLayer((uint64_t)v31, a2, v30, a3, a4, a5, a6, a7, a9, a8, a10, a11, a12, a13, a14, a15, a16, __SPAIR64__(a18, a17), a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27);
  unsigned int v33 = *((_DWORD *)a1 + 4);
  if (v33 == *((_DWORD *)a1 + 5))
  {
    unint64_t result = DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(a1 + 8), 1, 1);
    unsigned int v33 = *((_DWORD *)a1 + 4);
  }
  *(void *)(*((void *)a1 + 1) + 8 * v33) = v31;
  *((_DWORD *)a1 + 4) = v33 + 1;
  return result;
}

void RecogContext::RecogContext(RecogContext *this)
{
  *((void *)this + DgnIOwnArray<RecogSpecLayer *>::releaseAll((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

void RecogContext::~RecogContext(RecogContext *this)
{
}

uint64_t DgnDelete<DgnArray<DgnPrimArray<unsigned int>>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    DgnArray<DgnPrimArray<unsigned char>>::releaseAll(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

unint64_t RecogContext::setLeftContext(uint64_t a1, uint64_t a2)
{
  return DgnPrimArray<int>::copyArraySlice(a1 + 8, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
}

void RecogLayerPhaseStats::RecogLayerPhaseStats(RecogLayerPhaseStats *this)
{
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  PelStats::resetStats(this);
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 24DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  LMStats::resetStats((RecogLayerPhaseStats *)((char *)this + 176));
  SearchStats::resetStats((uint64_t)this + 328);
  NetStats::resetStats((RecogLayerPhaseStats *)((char *)this + 360));
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  FstStats::resetStats((RecogLayerPhaseStats *)((char *)this + 464));
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
}

void RecogLayerPhaseStats::printSize(RecogLayerPhaseStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 766, (DgnString *)&v78);
  if (v79) {
    uint64_t v16 = v78;
  }
  else {
    uint64_t v16 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A82B0, a3, &unk_2140A82B0, v16);
  DgnString::~DgnString((DgnString *)&v78);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A82B0);
  uint64_t v21 = SnapTime::sizeObject((uint64_t)this + 720, 0);
  uint64_t v22 = SnapTime::sizeObject((uint64_t)this + 720, 1);
  uint64_t v23 = SnapTime::sizeObject((uint64_t)this + 720, 3);
  uint64_t v24 = (a3 + 1);
  uint64_t v77 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 768, (DgnString *)&v78);
  if (v79) {
    int v30 = v78;
  }
  else {
    int v30 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_2140A82B0, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  uint64_t v31 = PelStats::sizeObject((uint64_t)this, 0);
  uint64_t v32 = PelStats::sizeObject((uint64_t)this, 1);
  uint64_t v33 = PelStats::sizeObject((uint64_t)this, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 769, (DgnString *)&v78);
  if (v79) {
    uint64_t v38 = v78;
  }
  else {
    uint64_t v38 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_2140A82B0, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  uint64_t v39 = LMStats::sizeObject((uint64_t)this + 176, 0);
  uint64_t v40 = LMStats::sizeObject((uint64_t)this + 176, 1);
  uint64_t v41 = LMStats::sizeObject((uint64_t)this + 176, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 770, (DgnString *)&v78);
  if (v79) {
    uint64_t v46 = v78;
  }
  else {
    uint64_t v46 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_2140A82B0, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  uint64_t v47 = sizeObject((uint64_t)this + 328, 0);
  uint64_t v48 = sizeObject((uint64_t)this + 328, 1);
  uint64_t v49 = sizeObject((uint64_t)this + 328, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 771, (DgnString *)&v78);
  if (v79) {
    unsigned int v54 = v78;
  }
  else {
    unsigned int v54 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v24, &unk_2140A82B0, v25, v25, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  uint64_t v55 = NetStats::sizeObject((uint64_t)this + 360, 0);
  uint64_t v56 = NetStats::sizeObject((uint64_t)this + 360, 1);
  uint64_t v57 = NetStats::sizeObject((uint64_t)this + 360, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 772, (DgnString *)&v78);
  if (v79) {
    uint64_t v62 = v78;
  }
  else {
    uint64_t v62 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v24, &unk_2140A82B0, v25, v25, v62, v55, v56, v57);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v55;
  *a5 += v56;
  *a6 += v57;
  uint64_t v63 = (char *)this + 464;
  uint64_t v64 = FstStats::sizeObject((uint64_t)this + 464, 0);
  uint64_t v65 = FstStats::sizeObject((uint64_t)v63, 1);
  uint64_t v66 = FstStats::sizeObject((uint64_t)v63, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 773, (DgnString *)&v78);
  if (v79) {
    uint64_t v71 = v78;
  }
  else {
    uint64_t v71 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v24, &unk_2140A82B0, v25, v25, v71, v64, v65, v66);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v64;
  *a5 += v65;
  *a6 += v66;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 775, (DgnString *)&v78);
  if (v79) {
    long long v76 = v78;
  }
  else {
    long long v76 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v77, &unk_2140A82B0, (35 - v77), (35 - v77), v76, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v78);
}

void sub_213FE763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t PRStats::recordPartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t v9 = (long long *)(a1 + 16);
  unint64_t v10 = (uint64_t *)(a1 + 64);
  unsigned int v11 = *(_DWORD *)(a1 + 72);
  if (v11 >= v8) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = v11;
  }
  if (v12)
  {
    uint64_t v13 = 0;
    while (*(_DWORD *)(*v10 + 4 * v13) == *(_DWORD *)(*(void *)a2 + 4 * v13))
    {
      if (v12 == ++v13) {
        goto LABEL_10;
      }
    }
    LODWORD(v12) = v13;
  }
LABEL_10:
  unsigned __int32 v14 = v11 - v12;
  unsigned __int32 v15 = v8 - v12;
  if (v14 >= v15) {
    __int32 v16 = v15;
  }
  else {
    __int32 v16 = v14;
  }
  unsigned __int32 v17 = v15 - v16;
  int v18 = *(_DWORD *)(a1 + 20);
  v19.i32[0] = v16;
  v19.i32[1] = v14 - v16;
  v19.i64[1] = v17 | 0x100000000;
  *(int32x4_t *)(a1 + 24) = vaddq_s32(*(int32x4_t *)(a1 + 24), v19);
  *(_DWORD *)(a1 + 40) += v8;
  unsigned __int32 v20 = v17 + v14;
  *(_DWORD *)(a1 + 20) = v18 + v20;
  if (v20)
  {
    unsigned int v21 = *(_DWORD *)(a1 + 48) + v8;
    ++*(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
    DgnPrimArray<int>::copyArraySlice(a1 + 64, (uint64_t *)a2, 0, v8);
  }
  float64x2_t v22 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 88));
  float64x2_t v23 = vsubq_f64(vcvtq_f64_s64(*(int64x2_t *)(a4 + 1)), v22);
  __asm { FMOV            V3.2D, #0.5 }
  *(float64x2_t *)(a1 + 112) = vaddq_f64(*(float64x2_t *)(a1 + 112), vmulq_f64(v23, vsubq_f64(vaddq_f64(vmulq_f64(v23, _Q3), v22), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)*(uint64_t *)(a1 + 56)), 0))));
  unint64_t v29 = *a4;
  unint64_t CyclesPerSecond = ClockTimer::getCyclesPerSecond((ClockTimer *)&ClockTimer::smClockTimer);
  double v31 = (double)(uint64_t)(1000000 * (v29 % CyclesPerSecond) / CyclesPerSecond + 1000000 * (v29 / CyclesPerSecond));
  unint64_t v32 = *(void *)(a1 + 80);
  unint64_t result = ClockTimer::getCyclesPerSecond((ClockTimer *)&ClockTimer::smClockTimer);
  double v34 = (double)(uint64_t)(1000000 * (v32 % result) / result + 1000000 * (v32 / result));
  *(double *)(a1 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(double *)(a1 + 128)
                        + (v31 - v34) * ((v31 - v34) * 0.5 + v34 - (double)*(uint64_t *)(a1 + 56));
  long long v35 = *((_OWORD *)a4 + 1);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 96) = v35;
  *(void *)(a1 + 56) = a3;
  for (unsigned int i = *(_DWORD *)(a1 + 8); *(_DWORD *)(a2 + 8) > i; *(_DWORD *)(a1 + 8) = i)
  {
    if (i == *(_DWORD *)(a1 + 12))
    {
      DgnArray<RecogResultToken>::reallocElts(a1, 1, 1);
      unsigned int i = *(_DWORD *)(a1 + 8);
    }
    uint64_t v37 = *(void *)a1 + 96 * i;
    long long v38 = *v9;
    long long v39 = v9[2];
    *(_OWORD *)(v37 + 16) = v9[1];
    *(_OWORD *)(v37 + 32) = v39;
    *(_OWORD *)uint64_t v37 = v38;
    *(void *)(v37 + 56) = 0;
    *(void *)(v37 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    unint64_t result = DgnPrimArray<int>::copyArraySlice(v37 + 48, v10, 0, *(_DWORD *)(a1 + 72));
    long long v40 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v37 + 64) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v37 + 80) = v40;
    unsigned int i = *(_DWORD *)(a1 + 8) + 1;
  }
  return result;
}

void RecogLayerStats::RecogLayerStats(RecogLayerStats *this)
{
  RecogLayerPhaseStats::RecogLayerPhaseStats(this);
  RecogLayerPhaseStats::RecogLayerPhaseStats((RecogLayerPhaseStats *)(v2 + 752));
  LatticeStats::LatticeStats((RecogLayerStats *)((char *)this + 1552));
  *((_DWORD *)this + 502) = 0;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 126) = 0u;
  *((_OWORD *)this + 127) = 0u;
  *((_OWORD *)this + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 132) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_DWORD *)this + 536) = 0;
  *((_DWORD *)this + 570) = 0;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *(_OWORD *)((char *)this + 224DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 2232) = 0u;
  *(_OWORD *)((char *)this + 2216) = 0u;
  *(_OWORD *)((char *)this + 2200) = 0u;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *(_OWORD *)((char *)this + 216DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 2152) = 0u;
}

void RecogLayerStats::printSize(RecogLayerStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1041, (DgnString *)&v83);
  if (v84) {
    __int32 v16 = (void *)v83;
  }
  else {
    __int32 v16 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A82B0, a3, &unk_2140A82B0, v16);
  DgnString::~DgnString((DgnString *)&v83);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A82B0);
  if (this)
  {
    unint64_t v82 = 0;
    unint64_t v83 = 0;
    uint64_t v21 = (a3 + 1);
    unint64_t v81 = 0;
    RecogLayerPhaseStats::printSize(this, 0xFFFFFFFFLL, v21, &v83, &v82, &v81);
    *a4 += v83;
    *a5 += v82;
    *a6 += v81;
  }
  else
  {
    uint64_t v21 = (a3 + 1);
  }
  unint64_t v82 = 0;
  unint64_t v83 = 0;
  unint64_t v81 = 0;
  RecogLayerPhaseStats::printSize((RecogLayerStats *)((char *)this + 752), 0xFFFFFFFFLL, v21, &v83, &v82, &v81);
  *a4 += v83;
  *a5 += v82;
  *a6 += v81;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84) {
    uint64_t v26 = (void *)v83;
  }
  else {
    uint64_t v26 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84) {
    double v31 = (void *)v83;
  }
  else {
    double v31 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84) {
    uint64_t v36 = (void *)v83;
  }
  else {
    uint64_t v36 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v36, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84) {
    uint64_t v41 = (void *)v83;
  }
  else {
    uint64_t v41 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v41, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84) {
    uint64_t v46 = (void *)v83;
  }
  else {
    uint64_t v46 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v46, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1047, (DgnString *)&v83);
  if (v84) {
    uint64_t v51 = (void *)v83;
  }
  else {
    uint64_t v51 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v51, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1049, (DgnString *)&v83);
  if (v84) {
    uint64_t v56 = (void *)v83;
  }
  else {
    uint64_t v56 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v56, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1051, (DgnString *)&v83);
  if (v84) {
    uint64_t v61 = (void *)v83;
  }
  else {
    uint64_t v61 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v61, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1053, (DgnString *)&v83);
  if (v84) {
    uint64_t v66 = (void *)v83;
  }
  else {
    uint64_t v66 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v66, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += 4;
  *a5 += 4;
  uint64_t v67 = (char *)this + 1552;
  uint64_t v68 = LatticeStats::sizeObject((uint64_t)this + 1552, 0);
  uint64_t v69 = LatticeStats::sizeObject((uint64_t)v67, 1);
  uint64_t v70 = LatticeStats::sizeObject((uint64_t)v67, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1055, (DgnString *)&v83);
  if (v84) {
    uint64_t v75 = (void *)v83;
  }
  else {
    uint64_t v75 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v75, v68, v69, v70);
  DgnString::~DgnString((DgnString *)&v83);
  *a4 += v68;
  *a5 += v69;
  *a6 += v70;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1056, (DgnString *)&v83);
  if (v84) {
    uint64_t v80 = (void *)v83;
  }
  else {
    uint64_t v80 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, a3, &unk_2140A82B0, (35 - a3), (35 - a3), v80, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v83);
}

void sub_213FE7FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RecogPhaseStats::RecogPhaseStats(RecogPhaseStats *this)
{
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  PelStats::resetStats(this);
  PrefStats::resetStats((RecogPhaseStats *)((char *)this + 176));
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *(_OWORD *)((char *)this + 32DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  PelStats::resetStats((RecogPhaseStats *)((char *)this + 288));
}

void RecogPhaseStats::printSize(RecogPhaseStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1072, (DgnString *)&v62);
  if (v63) {
    __int32 v16 = v62;
  }
  else {
    __int32 v16 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A82B0, a3, &unk_2140A82B0, v16);
  DgnString::~DgnString((DgnString *)&v62);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A82B0);
  uint64_t v21 = SnapTime::sizeObject((uint64_t)this + 256, 0);
  uint64_t v22 = SnapTime::sizeObject((uint64_t)this + 256, 1);
  uint64_t v23 = SnapTime::sizeObject((uint64_t)this + 256, 3);
  uint64_t v24 = (a3 + 1);
  uint64_t v61 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1073, (DgnString *)&v62);
  if (v63) {
    uint64_t v30 = v62;
  }
  else {
    uint64_t v30 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_2140A82B0, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v62);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  uint64_t v31 = PelStats::sizeObject((uint64_t)this, 0);
  uint64_t v32 = PelStats::sizeObject((uint64_t)this, 1);
  uint64_t v33 = PelStats::sizeObject((uint64_t)this, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1075, (DgnString *)&v62);
  if (v63) {
    uint64_t v38 = v62;
  }
  else {
    uint64_t v38 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_2140A82B0, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v62);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  uint64_t v39 = PrefStats::sizeObject((uint64_t)this + 176, 0);
  uint64_t v40 = PrefStats::sizeObject((uint64_t)this + 176, 1);
  uint64_t v41 = PrefStats::sizeObject((uint64_t)this + 176, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1076, (DgnString *)&v62);
  if (v63) {
    uint64_t v46 = v62;
  }
  else {
    uint64_t v46 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_2140A82B0, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v62);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  uint64_t v47 = (char *)this + 288;
  uint64_t v48 = PelStats::sizeObject((uint64_t)this + 288, 0);
  uint64_t v49 = PelStats::sizeObject((uint64_t)v47, 1);
  uint64_t v50 = PelStats::sizeObject((uint64_t)v47, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1078, (DgnString *)&v62);
  if (v63) {
    uint64_t v55 = v62;
  }
  else {
    uint64_t v55 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v24, &unk_2140A82B0, v25, v25, v55, v48, v49, v50);
  DgnString::~DgnString((DgnString *)&v62);
  *a4 += v48;
  *a5 += v49;
  *a6 += v50;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1079, (DgnString *)&v62);
  if (v63) {
    uint64_t v60 = v62;
  }
  else {
    uint64_t v60 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v61, &unk_2140A82B0, (35 - v61), (35 - v61), v60, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v62);
}

void sub_213FE8464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RecogStats::RecogStats(RecogStats *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  RecogPhaseStats::RecogPhaseStats((RecogStats *)((char *)this + 16));
  RecogPhaseStats::RecogPhaseStats((RecogStats *)((char *)this + 480));
  *((_DWORD *)this + 244) = 0;
  *((unsigned char *)this + 980) = 0;
  *((void *)this + 11DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((void *)this + 120) = 0;
  *((void *)this + 119) = 0;
  *(void *)((char *)this + 965) = 0;
  bzero((char *)this + 984, 0x298uLL);
}

void sub_213FE84E8(_Unwind_Exception *a1)
{
  DgnArray<RecogLayerStats>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void RecogStats::printSize(RecogStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1123, (DgnString *)&v321);
  if (v322) {
    __int32 v16 = (void *)v321;
  }
  else {
    __int32 v16 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A82B0, a3, &unk_2140A82B0, v16);
  DgnString::~DgnString((DgnString *)&v321);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A82B0);
  uint64_t v21 = (a3 + 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1125, (DgnString *)&v321);
  if (v322) {
    uint64_t v26 = (void *)v321;
  }
  else {
    uint64_t v26 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v22, v23, v24, v25, (a3 + 1), &unk_2140A82B0, (a3 + 1), &unk_2140A82B0, v26);
  v317 = a6;
  DgnString::~DgnString((DgnString *)&v321);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v27, v28, v29, v30, (a3 + 1), &unk_2140A82B0);
  LODWORD(v31) = *((_DWORD *)this + 2);
  uint64_t v318 = a3;
  if (v31)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = (a3 + 2);
    do
    {
      uint64_t v38 = *(void *)this;
      unint64_t v320 = 0;
      unint64_t v321 = 0;
      unint64_t v319 = 0;
      RecogLayerStats::printSize((RecogLayerStats *)(v38 + v32), v33, v37, &v321, &v320, &v319);
      v34 += v319;
      v35 += v320;
      v36 += v321;
      ++v33;
      unint64_t v31 = *((unsigned int *)this + 2);
      v32 += 2368;
    }
    while (v33 < v31);
    LODWORD(a3) = v318;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v35 = 0;
    uint64_t v34 = 0;
  }
  uint64_t v39 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v39 = 16;
  }
  uint64_t v40 = v39 + v36;
  uint64_t v41 = v39 + v35;
  uint64_t v42 = v40 + 2368 * (*((_DWORD *)this + 3) - v31);
  uint64_t v43 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1125, (DgnString *)&v321);
  if (v322) {
    uint64_t v48 = (void *)v321;
  }
  else {
    uint64_t v48 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v48, v42, v41, v34);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v42;
  *a5 += v41;
  *v317 += v34;
  unint64_t v320 = 0;
  unint64_t v321 = 0;
  unint64_t v319 = 0;
  RecogPhaseStats::printSize((RecogStats *)((char *)this + 16), 0xFFFFFFFFLL, v21, &v321, &v320, &v319);
  *a4 += v321;
  *a5 += v320;
  *v317 += v319;
  unint64_t v320 = 0;
  unint64_t v321 = 0;
  unint64_t v319 = 0;
  RecogPhaseStats::printSize((RecogStats *)((char *)this + 480), 0xFFFFFFFFLL, v21, &v321, &v320, &v319);
  *a4 += v321;
  *a5 += v320;
  *v317 += v319;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1131, (DgnString *)&v321);
  if (v322) {
    uint64_t v53 = (void *)v321;
  }
  else {
    uint64_t v53 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v53, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1133, (DgnString *)&v321);
  if (v322) {
    uint64_t v58 = (void *)v321;
  }
  else {
    uint64_t v58 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v58, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1135, (DgnString *)&v321);
  if (v322) {
    int v63 = (void *)v321;
  }
  else {
    int v63 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v63, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1137, (DgnString *)&v321);
  if (v322) {
    uint64_t v68 = (void *)v321;
  }
  else {
    uint64_t v68 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v68, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1139, (DgnString *)&v321);
  if (v322) {
    uint64_t v73 = (void *)v321;
  }
  else {
    uint64_t v73 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v73, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1141, (DgnString *)&v321);
  if (v322) {
    uint64_t v78 = (void *)v321;
  }
  else {
    uint64_t v78 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v78, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1143, (DgnString *)&v321);
  if (v322) {
    unint64_t v83 = (void *)v321;
  }
  else {
    unint64_t v83 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v83, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1145, (DgnString *)&v321);
  if (v322) {
    uint64_t v88 = (void *)v321;
  }
  else {
    uint64_t v88 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v88, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1147, (DgnString *)&v321);
  if (v322) {
    uint64_t v93 = (void *)v321;
  }
  else {
    uint64_t v93 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v93, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1149, (DgnString *)&v321);
  if (v322) {
    uint64_t v98 = (void *)v321;
  }
  else {
    uint64_t v98 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v98, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1151, (DgnString *)&v321);
  if (v322) {
    unint64_t v103 = (void *)v321;
  }
  else {
    unint64_t v103 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v103, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1153, (DgnString *)&v321);
  if (v322) {
    uint64_t v108 = (void *)v321;
  }
  else {
    uint64_t v108 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v108, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1155, (DgnString *)&v321);
  if (v322) {
    uint64_t v113 = (void *)v321;
  }
  else {
    uint64_t v113 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v113, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v321);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1157, (DgnString *)&v321);
  if (v322) {
    unint64_t v118 = (void *)v321;
  }
  else {
    unint64_t v118 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v118, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1159, (DgnString *)&v321);
  if (v322) {
    uint64_t v123 = (void *)v321;
  }
  else {
    uint64_t v123 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v123, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1161, (DgnString *)&v321);
  if (v322) {
    uint64_t v128 = (void *)v321;
  }
  else {
    uint64_t v128 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v128, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1163, (DgnString *)&v321);
  if (v322) {
    uint64_t v133 = (void *)v321;
  }
  else {
    uint64_t v133 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v133, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1165, (DgnString *)&v321);
  if (v322) {
    uint64_t v138 = (void *)v321;
  }
  else {
    uint64_t v138 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v138, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1167, (DgnString *)&v321);
  if (v322) {
    unint64_t v143 = (void *)v321;
  }
  else {
    unint64_t v143 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v143, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1169, (DgnString *)&v321);
  if (v322) {
    uint64_t v148 = (void *)v321;
  }
  else {
    uint64_t v148 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v21, &unk_2140A82B0, (34 - a3), (34 - a3), v148, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 4;
  *a5 += 4;
  uint64_t v149 = SnapTime::sizeObject((uint64_t)this + 1024, 0);
  uint64_t v150 = SnapTime::sizeObject((uint64_t)this + 1024, 1);
  uint64_t v151 = SnapTime::sizeObject((uint64_t)this + 1024, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1171, (DgnString *)&v321);
  if (v322) {
    uint64_t v156 = (void *)v321;
  }
  else {
    uint64_t v156 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v21, &unk_2140A82B0, v43, v43, v156, v149, v150, v151);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v149;
  *a5 += v150;
  *v317 += v151;
  uint64_t v157 = SnapTime::sizeObject((uint64_t)this + 1056, 0);
  uint64_t v158 = SnapTime::sizeObject((uint64_t)this + 1056, 1);
  uint64_t v159 = SnapTime::sizeObject((uint64_t)this + 1056, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1173, (DgnString *)&v321);
  if (v322) {
    uint64_t v164 = (void *)v321;
  }
  else {
    uint64_t v164 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v21, &unk_2140A82B0, v43, v43, v164, v157, v158, v159);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v157;
  *a5 += v158;
  *v317 += v159;
  uint64_t v165 = SnapTime::sizeObject((uint64_t)this + 1088, 0);
  uint64_t v166 = SnapTime::sizeObject((uint64_t)this + 1088, 1);
  uint64_t v167 = SnapTime::sizeObject((uint64_t)this + 1088, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1175, (DgnString *)&v321);
  if (v322) {
    unint64_t v172 = (void *)v321;
  }
  else {
    unint64_t v172 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v168, v169, v170, v171, v21, &unk_2140A82B0, v43, v43, v172, v165, v166, v167);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v165;
  *a5 += v166;
  *v317 += v167;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1177, (DgnString *)&v321);
  if (v322) {
    uint64_t v177 = (void *)v321;
  }
  else {
    uint64_t v177 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v21, &unk_2140A82B0, v43, v43, v177, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1179, (DgnString *)&v321);
  if (v322) {
    uint64_t v182 = (void *)v321;
  }
  else {
    uint64_t v182 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v21, &unk_2140A82B0, v43, v43, v182, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += 8;
  *a5 += 8;
  uint64_t v183 = SnapTime::sizeObject((uint64_t)this + 1136, 0);
  uint64_t v184 = SnapTime::sizeObject((uint64_t)this + 1136, 1);
  uint64_t v185 = SnapTime::sizeObject((uint64_t)this + 1136, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1181, (DgnString *)&v321);
  if (v322) {
    uint64_t v190 = (void *)v321;
  }
  else {
    uint64_t v190 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v21, &unk_2140A82B0, v43, v43, v190, v183, v184, v185);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v183;
  *a5 += v184;
  *v317 += v185;
  uint64_t v191 = SnapTime::sizeObject((uint64_t)this + 1168, 0);
  uint64_t v192 = SnapTime::sizeObject((uint64_t)this + 1168, 1);
  uint64_t v193 = SnapTime::sizeObject((uint64_t)this + 1168, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1182, (DgnString *)&v321);
  if (v322) {
    long long v198 = (void *)v321;
  }
  else {
    long long v198 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v194, v195, v196, v197, v21, &unk_2140A82B0, v43, v43, v198, v191, v192, v193);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v191;
  *a5 += v192;
  *v317 += v193;
  uint64_t v199 = SnapTime::sizeObject((uint64_t)this + 1200, 0);
  uint64_t v200 = SnapTime::sizeObject((uint64_t)this + 1200, 1);
  uint64_t v201 = SnapTime::sizeObject((uint64_t)this + 1200, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1184, (DgnString *)&v321);
  if (v322) {
    char v206 = (void *)v321;
  }
  else {
    char v206 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v202, v203, v204, v205, v21, &unk_2140A82B0, v43, v43, v206, v199, v200, v201);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v199;
  *a5 += v200;
  *v317 += v201;
  uint64_t v207 = SnapTime::sizeObject((uint64_t)this + 1232, 0);
  uint64_t v208 = SnapTime::sizeObject((uint64_t)this + 1232, 1);
  uint64_t v209 = SnapTime::sizeObject((uint64_t)this + 1232, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1186, (DgnString *)&v321);
  if (v322) {
    uint64_t v214 = (void *)v321;
  }
  else {
    uint64_t v214 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v210, v211, v212, v213, v21, &unk_2140A82B0, v43, v43, v214, v207, v208, v209);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v207;
  *a5 += v208;
  *v317 += v209;
  uint64_t v215 = SnapTime::sizeObject((uint64_t)this + 1264, 0);
  uint64_t v216 = SnapTime::sizeObject((uint64_t)this + 1264, 1);
  uint64_t v217 = SnapTime::sizeObject((uint64_t)this + 1264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1188, (DgnString *)&v321);
  if (v322) {
    uint64_t v222 = (void *)v321;
  }
  else {
    uint64_t v222 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v218, v219, v220, v221, v21, &unk_2140A82B0, v43, v43, v222, v215, v216, v217);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v215;
  *a5 += v216;
  *v317 += v217;
  uint64_t v223 = SnapTime::sizeObject((uint64_t)this + 1296, 0);
  uint64_t v224 = SnapTime::sizeObject((uint64_t)this + 1296, 1);
  uint64_t v225 = SnapTime::sizeObject((uint64_t)this + 1296, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1190, (DgnString *)&v321);
  if (v322) {
    uint64_t v230 = (void *)v321;
  }
  else {
    uint64_t v230 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v21, &unk_2140A82B0, v43, v43, v230, v223, v224, v225);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v223;
  *a5 += v224;
  *v317 += v225;
  uint64_t v231 = SnapTime::sizeObject((uint64_t)this + 1328, 0);
  uint64_t v232 = SnapTime::sizeObject((uint64_t)this + 1328, 1);
  uint64_t v233 = SnapTime::sizeObject((uint64_t)this + 1328, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1192, (DgnString *)&v321);
  if (v322) {
    uint64_t v238 = (void *)v321;
  }
  else {
    uint64_t v238 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v234, v235, v236, v237, v21, &unk_2140A82B0, v43, v43, v238, v231, v232, v233);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v231;
  *a5 += v232;
  *v317 += v233;
  uint64_t v239 = SnapTime::sizeObject((uint64_t)this + 1360, 0);
  uint64_t v240 = SnapTime::sizeObject((uint64_t)this + 1360, 1);
  uint64_t v241 = SnapTime::sizeObject((uint64_t)this + 1360, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1194, (DgnString *)&v321);
  if (v322) {
    uint64_t v246 = (void *)v321;
  }
  else {
    uint64_t v246 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v21, &unk_2140A82B0, v43, v43, v246, v239, v240, v241);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v239;
  *a5 += v240;
  *v317 += v241;
  uint64_t v247 = SnapTime::sizeObject((uint64_t)this + 1392, 0);
  uint64_t v248 = SnapTime::sizeObject((uint64_t)this + 1392, 1);
  uint64_t v249 = SnapTime::sizeObject((uint64_t)this + 1392, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1196, (DgnString *)&v321);
  if (v322) {
    uint64_t v254 = (void *)v321;
  }
  else {
    uint64_t v254 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v21, &unk_2140A82B0, v43, v43, v254, v247, v248, v249);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v247;
  *a5 += v248;
  *v317 += v249;
  uint64_t v255 = SnapTime::sizeObject((uint64_t)this + 1424, 0);
  uint64_t v256 = SnapTime::sizeObject((uint64_t)this + 1424, 1);
  uint64_t v257 = SnapTime::sizeObject((uint64_t)this + 1424, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1198, (DgnString *)&v321);
  if (v322) {
    uint64_t v262 = (void *)v321;
  }
  else {
    uint64_t v262 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v258, v259, v260, v261, v21, &unk_2140A82B0, v43, v43, v262, v255, v256, v257);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v255;
  *a5 += v256;
  *v317 += v257;
  uint64_t v263 = SnapTime::sizeObject((uint64_t)this + 1456, 0);
  uint64_t v264 = SnapTime::sizeObject((uint64_t)this + 1456, 1);
  uint64_t v265 = SnapTime::sizeObject((uint64_t)this + 1456, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1200, (DgnString *)&v321);
  if (v322) {
    uint64_t v270 = (void *)v321;
  }
  else {
    uint64_t v270 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v266, v267, v268, v269, v21, &unk_2140A82B0, v43, v43, v270, v263, v264, v265);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v263;
  *a5 += v264;
  *v317 += v265;
  uint64_t v271 = SnapTime::sizeObject((uint64_t)this + 1488, 0);
  uint64_t v272 = SnapTime::sizeObject((uint64_t)this + 1488, 1);
  uint64_t v273 = SnapTime::sizeObject((uint64_t)this + 1488, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1202, (DgnString *)&v321);
  if (v322) {
    uint64_t v278 = (void *)v321;
  }
  else {
    uint64_t v278 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v274, v275, v276, v277, v21, &unk_2140A82B0, v43, v43, v278, v271, v272, v273);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v271;
  *a5 += v272;
  *v317 += v273;
  uint64_t v279 = SnapTime::sizeObject((uint64_t)this + 1520, 0);
  uint64_t v280 = SnapTime::sizeObject((uint64_t)this + 1520, 1);
  uint64_t v281 = SnapTime::sizeObject((uint64_t)this + 1520, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1204, (DgnString *)&v321);
  if (v322) {
    uint64_t v286 = (void *)v321;
  }
  else {
    uint64_t v286 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v21, &unk_2140A82B0, v43, v43, v286, v279, v280, v281);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v279;
  *a5 += v280;
  *v317 += v281;
  uint64_t v287 = SnapTime::sizeObject((uint64_t)this + 1552, 0);
  uint64_t v288 = SnapTime::sizeObject((uint64_t)this + 1552, 1);
  uint64_t v289 = SnapTime::sizeObject((uint64_t)this + 1552, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1206, (DgnString *)&v321);
  if (v322) {
    v294 = (void *)v321;
  }
  else {
    v294 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v290, v291, v292, v293, v21, &unk_2140A82B0, v43, v43, v294, v287, v288, v289);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v287;
  *a5 += v288;
  *v317 += v289;
  uint64_t v295 = SnapTime::sizeObject((uint64_t)this + 1584, 0);
  uint64_t v296 = SnapTime::sizeObject((uint64_t)this + 1584, 1);
  uint64_t v297 = SnapTime::sizeObject((uint64_t)this + 1584, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1208, (DgnString *)&v321);
  if (v322) {
    v302 = (void *)v321;
  }
  else {
    v302 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v298, v299, v300, v301, v21, &unk_2140A82B0, v43, v43, v302, v295, v296, v297);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v295;
  *a5 += v296;
  *v317 += v297;
  v303 = (char *)this + 1616;
  uint64_t v304 = SnapTime::sizeObject((uint64_t)this + 1616, 0);
  uint64_t v305 = SnapTime::sizeObject((uint64_t)v303, 1);
  uint64_t v306 = SnapTime::sizeObject((uint64_t)v303, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1210, (DgnString *)&v321);
  if (v322) {
    v311 = (void *)v321;
  }
  else {
    v311 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v307, v308, v309, v310, v21, &unk_2140A82B0, v43, v43, v311, v304, v305, v306);
  DgnString::~DgnString((DgnString *)&v321);
  *a4 += v304;
  *a5 += v305;
  *v317 += v306;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 1211, (DgnString *)&v321);
  if (v322) {
    v316 = (void *)v321;
  }
  else {
    v316 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v312, v313, v314, v315, v318, &unk_2140A82B0, (35 - v318), (35 - v318), v316, *a4, *a5, *v317);
  DgnString::~DgnString((DgnString *)&v321);
}

void sub_213FE9D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t RecogStats::initRecognitionPhaseTimes(uint64_t a1, int64x2_t *a2, int64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v17 = *(unsigned int *)(a4 + 8);
  v86[0] = 0;
  v86[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v86, (uint64_t *)a4, 0, v17);
  v85[0] = 0;
  v85[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v85, (uint64_t *)a5, 0, *(_DWORD *)(a5 + 8));
  v84[0] = 0;
  v84[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v84, (uint64_t *)a6, 0, *(_DWORD *)(a6 + 8));
  v83[0] = 0;
  v83[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v83, (uint64_t *)a7, 0, *(_DWORD *)(a7 + 8));
  v82[0] = 0;
  v82[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v82, (uint64_t *)a8, 0, *(_DWORD *)(a8 + 8));
  v81[0] = 0;
  v81[1] = 0;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)v81, (uint64_t *)a9, 0, *(_DWORD *)(a9 + 8));
  uint64_t v18 = (int64x2_t *)v86[0];
  uint64_t v19 = (v17 - 1);
  if ((int)v17 - 1 >= 0)
  {
    uint64_t v20 = 0;
    uint64_t v21 = v81[0] + 32 * v19;
    uint64_t v22 = v86[0] + 32 * v19;
    uint64_t v23 = v19 + 1;
    uint64_t v24 = v82[0] + 32 * v19;
    uint64_t v25 = v83[0] + 32 * v19;
    uint64_t v26 = v84[0] + 32 * v19;
    uint64_t v27 = v85[0] + 32 * v19;
    do
    {
      uint64_t v28 = *(void *)(v21 + v20);
      if (!v28)
      {
        uint64_t v29 = v21 + v20;
        if (*(void *)(v21 + v20 + 8) || *(void *)(v29 + 16) || *(void *)(v21 + v20 + 24))
        {
          uint64_t v28 = 0;
        }
        else if (v20)
        {
          long long v41 = *(_OWORD *)(v22 + v20 + 32);
          long long v42 = *(_OWORD *)(v22 + v20 + 48);
          *(_OWORD *)(v21 + v20) = v41;
          *(_OWORD *)(v29 + 16) = v42;
          uint64_t v28 = v41;
        }
        else
        {
          uint64_t v28 = *a10;
          uint64_t v47 = a10[3];
          *(void *)uint64_t v21 = *a10;
          *(_OWORD *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(a10 + 1);
          *(void *)(v21 + 24) = v47;
        }
      }
      uint64_t v30 = *(void *)(v24 + v20);
      if (!v30)
      {
        uint64_t v31 = v24 + v20;
        if (*(void *)(v24 + v20 + 8) || *(void *)(v31 + 16) || *(void *)(v24 + v20 + 24))
        {
          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v43 = *(void *)(v21 + v20 + 24);
          *(void *)(v24 + v20) = v28;
          *(_OWORD *)(v31 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(v21 + v20 + 8);
          *(void *)(v24 + v20 + 24) = v43;
          uint64_t v30 = v28;
        }
      }
      uint64_t v32 = *(void *)(v25 + v20);
      if (!v32)
      {
        uint64_t v33 = v25 + v20;
        if (*(void *)(v25 + v20 + 8) || *(void *)(v33 + 16) || *(void *)(v25 + v20 + 24))
        {
          uint64_t v32 = 0;
        }
        else
        {
          uint64_t v44 = *(void *)(v24 + v20 + 24);
          *(void *)(v25 + v20) = v30;
          *(_OWORD *)(v33 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(v24 + v20 + 8);
          *(void *)(v25 + v20 + 24) = v44;
          uint64_t v32 = v30;
        }
      }
      uint64_t v34 = *(void *)(v26 + v20);
      if (!v34)
      {
        uint64_t v35 = v26 + v20;
        if (*(void *)(v26 + v20 + 8) || *(void *)(v35 + 16) || *(void *)(v26 + v20 + 24))
        {
          uint64_t v34 = 0;
        }
        else
        {
          uint64_t v45 = *(void *)(v25 + v20 + 24);
          *(void *)(v26 + v20) = v32;
          *(_OWORD *)(v35 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(v25 + v20 + 8);
          *(void *)(v26 + v20 + 24) = v45;
          uint64_t v34 = v32;
        }
      }
      uint64_t v36 = *(void *)(v27 + v20);
      if (!v36)
      {
        uint64_t v37 = v27 + v20;
        if (*(void *)(v27 + v20 + 8) || *(void *)(v37 + 16) || *(void *)(v27 + v20 + 24))
        {
          uint64_t v36 = 0;
        }
        else
        {
          uint64_t v46 = *(void *)(v26 + v20 + 24);
          *(void *)(v27 + v20) = v34;
          *(_OWORD *)(v37 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(v26 + v20 + 8);
          *(void *)(v27 + v20 + 24) = v46;
          uint64_t v36 = v34;
        }
      }
      if (!*(void *)(v22 + v20))
      {
        uint64_t v38 = v22 + v20;
        if (!*(void *)(v22 + v20 + 8) && !*(void *)(v38 + 16) && !*(void *)(v22 + v20 + 24))
        {
          uint64_t v39 = *(void *)(v27 + v20 + 24);
          *(void *)(v22 + v20) = v36;
          *(_OWORD *)(v38 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(v27 + v20 + 8);
          *(void *)(v22 + v20 + 24) = v39;
        }
      }
      v20 -= 32;
    }
    while (v23-- > 1);
    uint64_t v18 = (int64x2_t *)v86[0];
  }
  if (a3->i64[0] | a3->i64[1] | a3[1].i64[0] | a3[1].i64[1]) {
    uint64_t v48 = a3;
  }
  else {
    uint64_t v48 = v18;
  }
  int64x2_t v49 = vsubq_s64(a2[1], *(int64x2_t *)(a1 + 1104));
  int64x2_t v50 = *v48;
  int64x2_t v51 = v48[1];
  *(int64x2_t *)(a1 + 132DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = vsubq_s64(*a2, *(int64x2_t *)(a1 + 1088));
  *(int64x2_t *)(a1 + 1344) = v49;
  int64x2_t v52 = vsubq_s64(v51, a2[1]);
  *(int64x2_t *)(a1 + 1360) = vsubq_s64(v50, *a2);
  *(int64x2_t *)(a1 + 1376) = v52;
  int64x2_t v53 = vsubq_s64(v18[1], v51);
  *(int64x2_t *)(a1 + 1392) = vsubq_s64(*v18, v50);
  *(int64x2_t *)(a1 + 140DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v53;
  int64x2_t v54 = 0uLL;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 148DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 156DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  if (v17)
  {
    uint64_t v55 = 0;
    uint64_t v56 = v85[0];
    uint64_t v57 = v84[0];
    uint64_t v58 = v83[0];
    int64x2_t v59 = 0uLL;
    uint64_t v60 = v82[0];
    int64x2_t v61 = 0uLL;
    int64x2_t v62 = 0uLL;
    uint64_t v63 = v81[0];
    do
    {
      uint64_t v64 = (int64x2_t *)(v56 + 32 * v55);
      uint64_t v65 = &v18[2 * v55];
      int64x2_t v66 = vsubq_s64(v64[1], v65[1]);
      *(int64x2_t *)(a1 + 1424) = vaddq_s64(vsubq_s64(*v64, *v65), *(int64x2_t *)(a1 + 1424));
      *(int64x2_t *)(a1 + 1440) = vaddq_s64(v66, *(int64x2_t *)(a1 + 1440));
      uint64_t v67 = (int64x2_t *)(v57 + 32 * v55);
      int64x2_t v54 = vaddq_s64(vsubq_s64(*v67, *v64), v54);
      int64x2_t v68 = vsubq_s64(v67[1], v64[1]);
      *(int64x2_t *)(a1 + 1456) = v54;
      int64x2_t v59 = vaddq_s64(v68, v59);
      *(int64x2_t *)(a1 + 1472) = v59;
      uint64_t v69 = (int64x2_t *)(v58 + 32 * v55);
      int64x2_t v61 = vaddq_s64(vsubq_s64(*v69, *v67), v61);
      int64x2_t v70 = vsubq_s64(v69[1], v67[1]);
      *(int64x2_t *)(a1 + 148DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v61;
      int64x2_t v62 = vaddq_s64(v70, v62);
      *(int64x2_t *)(a1 + 1504) = v62;
      uint64_t v71 = (int64x2_t *)(v60 + 32 * v55);
      int64x2_t v72 = vsubq_s64(v71[1], v69[1]);
      *(int64x2_t *)(a1 + 1520) = vaddq_s64(vsubq_s64(*v71, *v69), *(int64x2_t *)(a1 + 1520));
      *(int64x2_t *)(a1 + 1536) = vaddq_s64(v72, *(int64x2_t *)(a1 + 1536));
      uint64_t v73 = (int64x2_t *)(v63 + 32 * v55);
      uint64_t v74 = v73 + 1;
      int64x2_t v75 = vsubq_s64(v73[1], v71[1]);
      *(int64x2_t *)(a1 + 1552) = vaddq_s64(vsubq_s64(*v73, *v71), *(int64x2_t *)(a1 + 1552));
      *(int64x2_t *)(a1 + 156DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = vaddq_s64(v75, *(int64x2_t *)(a1 + 1568));
      if (v55 == v19)
      {
        int64x2_t v76 = vsubq_s64(*((int64x2_t *)a10 + 1), *v74);
        *(int64x2_t *)(a1 + 1584) = vaddq_s64(vsubq_s64(*(int64x2_t *)a10, *v73), *(int64x2_t *)(a1 + 1584));
        *(int64x2_t *)(a1 + 1600) = vaddq_s64(v76, *(int64x2_t *)(a1 + 1600));
        ++v55;
      }
      else
      {
        ++v55;
        uint64_t v77 = &v18[2 * v55];
        int64x2_t v78 = vsubq_s64(v77[1], *v74);
        *(int64x2_t *)(a1 + 1584) = vaddq_s64(vsubq_s64(*v77, *v73), *(int64x2_t *)(a1 + 1584));
        *(int64x2_t *)(a1 + 1600) = vaddq_s64(v78, *(int64x2_t *)(a1 + 1600));
      }
    }
    while (v55 != v17);
  }
  long long v79 = *((_OWORD *)a10 + 1);
  *(_OWORD *)(a1 + 1616) = *(_OWORD *)a10;
  *(_OWORD *)(a1 + 1632) = v79;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v81);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v82);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v83);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v84);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v85);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v86);
}

void sub_213FEA330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v13 = va_arg(va4, void);
  uint64_t v15 = va_arg(va4, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va4);
  _Unwind_Resume(a1);
}

void PrefiltererThreadInsurance::~PrefiltererThreadInsurance(PrefiltererThreadInsurance *this)
{
  uint64_t v2 = *(_DWORD **)this;
  if (v2)
  {
    if (!**((unsigned char **)this + 1))
    {
      int v3 = **((_DWORD **)this + 2);
      (*(void (**)(_DWORD *, void))(*(void *)v2 + 136))(v2, 0);
      int v4 = (*(uint64_t (**)(void))(**(void **)this + 96))();
      **((_DWORD **)this + 2) = v4;
      if (v3 != v4)
      {
        uint64_t v5 = (void *)*((void *)this + 4);
        long long v18 = 0u;
        long long v19 = 0u;
        SnapTime::recordTime((SnapTime *)&v18, 1, 0, 0, 0);
        uint64_t v6 = *((void *)&v18 + 1);
        long long v7 = v19;
        uint64_t v8 = v18 - *v5;
        uint64_t v9 = *((void *)&v18 + 1) - v5[1];
        uint64_t v10 = v19 - v5[2];
        uint64_t v11 = *((void *)&v19 + 1) - v5[3];
        void *v5 = v18;
        v5[1] = v6;
        *((_OWORD *)v5 + 1) = v7;
        uint64_t v12 = (void *)*((void *)this + 5);
        uint64_t v13 = *v12 + v8;
        uint64_t v14 = v12[1] + v9;
        void *v12 = v13;
        v12[1] = v14;
        uint64_t v15 = v12[2] + v10;
        uint64_t v16 = v12[3] + v11;
        v12[2] = v15;
        v12[3] = v16;
        if (*(_DWORD *)(*((void *)this + 1) + 4) == -16)
        {
          uint64_t v17 = (void *)*((void *)this + 3);
          *uint64_t v17 = v13;
          v17[1] = v14;
          v17[2] = v15;
          v17[3] = v16;
        }
      }
    }
  }
}

void ChannelThreadInsurance::~ChannelThreadInsurance(ChannelThreadInsurance *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)this)
  {
    uint64_t v9 = *((void *)this + 1);
    if (!*(unsigned char *)v9)
    {
      int v10 = *(_DWORD *)(v9 + 16);
      ChannelMgr::maybeStopCollectingDataForUtt((ChannelMgr *)ChannelMgr::smpChannelMgr, *(Utterance **)this, a3, a4, a5, a6, a7, a8, v21);
      uint64_t v11 = (int64x2_t *)*((void *)this + 3);
      int64x2_t v12 = v11[1];
      *uint64_t v11 = vaddq_s64(*v11, v21[0]);
      v11[1] = vaddq_s64(v12, v21[1]);
      UttFeatureArraySynchronizedArray::update(*((void *)this + 1), *(const Utterance **)this);
      int v13 = *(_DWORD *)(*((void *)this + 1) + 16);
      **((_DWORD **)this + 2) = v13;
      if (v10 != v13)
      {
        uint64_t v14 = (int64x2_t *)*((void *)this + 4);
        int64x2_t v22 = 0u;
        int64x2_t v23 = 0u;
        SnapTime::recordTime((SnapTime *)&v22, 1, 0, 0, 0);
        int64x2_t v15 = v14[1];
        int64x2_t v16 = vsubq_s64(v22, *v14);
        *uint64_t v14 = v22;
        int64x2_t v17 = vsubq_s64(v23, v15);
        v14[1] = v23;
        long long v18 = (int64x2_t *)*((void *)this + 5);
        int64x2_t v19 = vaddq_s64(v16, *v18);
        int64x2_t v20 = vaddq_s64(v17, v18[1]);
        int64x2_t *v18 = v19;
        v18[1] = v20;
      }
    }
  }
}

void LookaheadThreadInsurance::~LookaheadThreadInsurance(LookaheadThreadInsurance *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 && !**((unsigned char **)this + 2))
  {
    int v3 = **((_DWORD **)this + 3);
    (*(void (**)(uint64_t, void))(*(void *)v2 + 56))(v2, 0);
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
    **((_DWORD **)this + 3) = v4;
    if (v3 != v4)
    {
      uint64_t v5 = (int64x2_t *)*((void *)this + 4);
      int64x2_t v12 = 0u;
      int64x2_t v13 = 0u;
      SnapTime::recordTime((SnapTime *)&v12, 1, 0, 0, 0);
      int64x2_t v6 = v5[1];
      int64x2_t v7 = vsubq_s64(v12, *v5);
      int64x2_t *v5 = v12;
      int64x2_t v8 = vsubq_s64(v13, v6);
      v5[1] = v13;
      uint64_t v9 = (int64x2_t *)*((void *)this + 5);
      int64x2_t v10 = vaddq_s64(v7, *v9);
      int64x2_t v11 = vaddq_s64(v8, v9[1]);
      *uint64_t v9 = v10;
      v9[1] = v11;
    }
  }
}

void FrameTransformThreadInsurance::~FrameTransformThreadInsurance(FrameTransformThreadInsurance *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 && !**((unsigned char **)this + 2))
  {
    int v3 = **((_DWORD **)this + 3);
    (*(void (**)(uint64_t, void))(*(void *)v2 + 104))(v2, 0);
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
    **((_DWORD **)this + 3) = v4;
    if (v3 != v4)
    {
      uint64_t v5 = (int64x2_t *)*((void *)this + 4);
      int64x2_t v12 = 0u;
      int64x2_t v13 = 0u;
      SnapTime::recordTime((SnapTime *)&v12, 1, 0, 0, 0);
      int64x2_t v6 = v5[1];
      int64x2_t v7 = vsubq_s64(v12, *v5);
      int64x2_t *v5 = v12;
      int64x2_t v8 = vsubq_s64(v13, v6);
      v5[1] = v13;
      uint64_t v9 = (int64x2_t *)*((void *)this + 5);
      int64x2_t v10 = vaddq_s64(v7, *v9);
      int64x2_t v11 = vaddq_s64(v8, v9[1]);
      *uint64_t v9 = v10;
      v9[1] = v11;
    }
  }
}

void *ProcessPrefilterer::ProcessPrefilterer(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, char a6, char a7, unsigned char *a8, _DWORD *a9, int64x2_t *a10, int64x2_t *a11, int64x2_t *a12)
{
  uint64_t v12 = a5;
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a8;
  *((_DWORD *)a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a5;
  *((_DWORD *)a1 + 9) = *a9;
  *((unsigned char *)a1 + 40) = a6;
  *((unsigned char *)a1 + 41) = a7;
  *(void *)((char *)a1 + 44) = 0xFFFFFFF000000000;
  if (!a2 || *a8)
  {
    *((_DWORD *)a1 + 9) = a5;
    return a1;
  }
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  char v18 = v17;
  if (v17) {
    *((_DWORD *)a1 + 11) = (*(uint64_t (**)(void, BOOL, void))(*(void *)*a1 + 136))(*a1, *((unsigned char *)a1 + 40) == 0, a1[3]);
  }
  if (*((unsigned char *)a1 + 41))
  {
    if (!*(unsigned char *)a3 && (!a4 || !*a4)) {
      return a1;
    }
    uint64_t v12 = *(unsigned int *)(a3 + 16);
  }
  if (*((unsigned char *)a1 + 40)
    && !*((_DWORD *)a1 + 11)
    && (int)v12 >= (int)ReturnListQueue::getNextFrameTime((ReturnListQueue *)a1[3])
    && !*(unsigned char *)a1[3])
  {
    *((_DWORD *)a1 + 11) = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned char *))(*(void *)*a1 + 112))(*a1, v12, a3, a4);
  }
  if (((*(uint64_t (**)(void))(*(void *)*a1 + 120))() & 1) == 0)
  {
    int v19 = (*(uint64_t (**)(void))(*(void *)*a1 + 96))();
    *a9 = v19;
    if ((v18 & 1) != 0 || *((_DWORD *)a1 + 9) < v19)
    {
      int64x2_t v25 = 0u;
      int64x2_t v26 = 0u;
      SnapTime::recordTime((SnapTime *)&v25, 1, 0, 0, 0);
      int64x2_t v20 = v26;
      int64x2_t v21 = vsubq_s64(v25, *a11);
      int64x2_t v22 = vsubq_s64(v26, a11[1]);
      *a11 = v25;
      a11[1] = v20;
      int64x2_t v23 = vaddq_s64(v22, a12[1]);
      *a12 = vaddq_s64(v21, *a12);
      a12[1] = v23;
    }
  }
  *((_DWORD *)a1 + 9) = *a9;
  if (*(_DWORD *)(a1[3] + 4) == -16)
  {
    int64x2_t v24 = a12[1];
    *a10 = *a12;
    a10[1] = v24;
  }
  return a1;
}

void ProcessPrefilterer::~ProcessPrefilterer(ProcessPrefilterer *this)
{
  if (*(void *)this)
  {
    if (!*((unsigned char *)this + 41))
    {
      uint64_t v2 = (ReturnListQueue *)*((void *)this + 3);
      if (!*(unsigned char *)v2
        && (!*((unsigned char *)this + 40) || (int)ReturnListQueue::getNextFrameTime(v2) > *((_DWORD *)this + 8)))
      {
        unsigned int v3 = *((_DWORD *)this + 11);
        if (v3 < 2)
        {
LABEL_13:
          (*(void (**)(void, void, void))(**(void **)this + 128))(*(void *)this, *((void *)this + 1), *((void *)this + 2));
          return;
        }
        if (v3 == 2)
        {
          uint64_t v4 = *((void *)this + 1);
        }
        else
        {
          if (v3 != 3) {
            return;
          }
          uint64_t v4 = *((void *)this + 2);
        }
        if (*(_DWORD *)(v4 + 16) > *((_DWORD *)this + 9)) {
          goto LABEL_13;
        }
      }
    }
  }
}

_DWORD *ProcessLookahead::ProcessLookahead(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, unsigned char *a8, _DWORD *a9, int64x2_t *a10, int64x2_t *a11)
{
  *(void *)a1 = a2;
  *((void *)a1 + 1) = a3;
  a1[4] = a4;
  a1[5] = *a9;
  *((unsigned char *)a1 + 24) = a5;
  *((unsigned char *)a1 + 25) = a7;
  *((void *)a1 + 4) = a8;
  if (a2 && !*a8)
  {
    (*(void (**)(uint64_t, void, unsigned char *))(*(void *)a2 + 56))(a2, (a5 | a6 | a7) ^ 1u, a8);
    if (*((unsigned char *)a1 + 25))
    {
      if (!*(unsigned char *)a3) {
        return a1;
      }
      a1[4] = *(_DWORD *)(a3 + 16);
      if (!**((unsigned char **)a1 + 4)) {
        goto LABEL_11;
      }
    }
    if (a6 && *((unsigned char *)a1 + 24) && *(_DWORD *)(*((void *)a1 + 4) + 16) <= a1[4]) {
LABEL_11:
    }
      (*(void (**)(void))(**(void **)a1 + 40))();
    int v15 = (*(uint64_t (**)(void))(**(void **)a1 + 32))();
    a1[5] = v15;
    if (*a9 != v15)
    {
      int64x2_t v20 = 0u;
      int64x2_t v21 = 0u;
      SnapTime::recordTime((SnapTime *)&v20, 1, 0, 0, 0);
      int64x2_t v16 = v21;
      int64x2_t v17 = vsubq_s64(v20, *a10);
      int64x2_t v18 = vsubq_s64(v21, a10[1]);
      *a10 = v20;
      a10[1] = v16;
      int64x2_t v19 = vaddq_s64(v18, a11[1]);
      *a11 = vaddq_s64(v17, *a11);
      a11[1] = v19;
      *a9 = a1[5];
    }
  }
  else
  {
    a1[5] = a4;
  }
  return a1;
}

void ProcessLookahead::~ProcessLookahead(ProcessLookahead *this)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    if (!*((unsigned char *)this + 25))
    {
      uint64_t v3 = *((void *)this + 4);
      if (!*(unsigned char *)v3
        && (!*((unsigned char *)this + 24) || *(_DWORD *)(v3 + 16) > *((_DWORD *)this + 4))
        && *(_DWORD *)(*((void *)this + 1) + 16) > *((_DWORD *)this + 5))
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
      }
    }
  }
}

_DWORD *ProcessFrameTransform::ProcessFrameTransform(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, char a8, uint64_t a9, _DWORD *a10, int64x2_t *a11, int64x2_t *a12)
{
  *(void *)a1 = a3;
  *((void *)a1 + 1) = a4;
  a1[4] = a5;
  a1[5] = -16;
  a1[6] = *a10;
  *((unsigned char *)a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a6;
  *((unsigned char *)a1 + 29) = a8;
  *((void *)a1 + 4) = a9;
  if (!a3)
  {
    a1[5] = a5;
LABEL_17:
    a1[6] = a5;
    return a1;
  }
  LODWORD(a5) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a5);
  uint64_t v14 = *(void *)a1;
  a1[5] = a5;
  if (!v14 || **((unsigned char **)a1 + 4)) {
    goto LABEL_17;
  }
  BOOL v15 = (a7 & 1) == 0 && !*((unsigned char *)a1 + 28) && *((unsigned char *)a1 + 29) == 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v14 + 104))(v14, v15);
  if (*((unsigned char *)a1 + 29))
  {
    uint64_t v16 = *((void *)a1 + 1);
    if (!*(unsigned char *)v16) {
      return a1;
    }
    uint64_t v17 = *(unsigned int *)(v16 + 16);
    a1[5] = v17;
    if (!**((unsigned char **)a1 + 4)) {
      goto LABEL_13;
    }
  }
  if (a7 && *(_DWORD *)(*((void *)a1 + 4) + 16) <= a1[4])
  {
    uint64_t v17 = a1[5];
    uint64_t v16 = *((void *)a1 + 1);
LABEL_13:
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1 + 80))(*(void *)a1, v17, v16);
  }
  int v18 = (*(uint64_t (**)(void))(**(void **)a1 + 32))();
  a1[6] = v18;
  if (*a10 != v18)
  {
    int64x2_t v24 = 0u;
    int64x2_t v25 = 0u;
    SnapTime::recordTime((SnapTime *)&v24, 1, 0, 0, 0);
    int64x2_t v19 = v25;
    int64x2_t v20 = vsubq_s64(v24, *a11);
    int64x2_t v21 = vsubq_s64(v25, a11[1]);
    *a11 = v24;
    a11[1] = v19;
    int64x2_t v22 = vaddq_s64(v21, a12[1]);
    *a12 = vaddq_s64(v20, *a12);
    a12[1] = v22;
    *a10 = a1[6];
  }
  return a1;
}

void ProcessFrameTransform::~ProcessFrameTransform(ProcessFrameTransform *this)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    if (!*((unsigned char *)this + 29))
    {
      uint64_t v3 = *((void *)this + 4);
      if (!*(unsigned char *)v3
        && (!*((unsigned char *)this + 28) || *(_DWORD *)(v3 + 16) > *((_DWORD *)this + 4))
        && *(_DWORD *)(*((void *)this + 1) + 16) > *((_DWORD *)this + 6))
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
      }
    }
  }
}

void ProcessChannel::ProcessChannel(ProcessChannel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Utterance *a6, UttFeatureArraySynchronizedArray *a7, int *a8, int64x2_t *a9, int64x2_t *a10, int64x2_t *a11)
{
  *(void *)this = a6;
  *((void *)this + 1) = a7;
  if (a6)
  {
    int v12 = a5;
    int v13 = a4;
    if ((a3 | a4 | a5) == 1 && *(unsigned char *)a7 == 0)
    {
      BOOL v15 = a8;
      uint64_t v17 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      ChannelMgr::maybeStopCollectingDataForUtt((ChannelMgr *)ChannelMgr::smpChannelMgr, a6, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, &v43);
      if (v13)
      {
        ChannelMgr::collectThroughUttFrame(v17, *(Utterance **)this, a2, v19, v20, v21, v22, v23, &v45);
        int64x2_t v43 = vaddq_s64(v43, v45);
        int64x2_t v44 = vaddq_s64(v44, v46);
      }
      int64x2_t v24 = *(const Utterance **)this;
      if (!v12 || !*((unsigned char *)v24 + 416))
      {
LABEL_27:
        UttFeatureArraySynchronizedArray::update(*((void *)this + 1), v24);
        uint64_t v35 = *((void *)this + 1);
        int v36 = *(_DWORD *)(v35 + 16);
        if (*(unsigned char *)v35) {
          *(_DWORD *)(v35 + 4) = v36;
        }
        int64x2_t v45 = 0u;
        int64x2_t v46 = 0u;
        SnapTime::recordTime((SnapTime *)&v45, 1, 0, 0, 0);
        int64x2_t v37 = v46;
        int64x2_t v38 = vsubq_s64(v45, *a10);
        int64x2_t v39 = vsubq_s64(v46, a10[1]);
        *a10 = v45;
        a10[1] = v37;
        int64x2_t v40 = vaddq_s64(v39, a11[1]);
        *a11 = vaddq_s64(v38, *a11);
        a11[1] = v40;
        int64x2_t v41 = vaddq_s64(a9[1], v44);
        *a9 = vaddq_s64(*a9, v43);
        a9[1] = v41;
        int *v15 = v36;
        return;
      }
      long long v42 = v15;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      while (1)
      {
        if (v25 || v26 || v27 || v28)
        {
          ClockTimer::useFreeTime(&v45);
          v25 += v45.i64[0];
          v26 += v45.i64[1];
          v27 += v46.i64[0];
          v28 += v46.i64[1];
          ChannelMgr::collectAvailableDataForUtt(v17, *(Utterance **)this, v29, v30, v31, v32, v33, v34);
          if (v25) {
            goto LABEL_25;
          }
          if (v26) {
            goto LABEL_24;
          }
          if (v27) {
            goto LABEL_23;
          }
          if (v28)
          {
            uint64_t v27 = 0;
LABEL_23:
            uint64_t v26 = 0;
LABEL_24:
            uint64_t v25 = 0;
            goto LABEL_25;
          }
        }
        else
        {
          ChannelMgr::collectAvailableDataForUtt(v17, v24, v18, v19, v20, v21, v22, v23);
        }
        ClockTimer::useFreeTime(&v45);
        uint64_t v26 = v45.i64[1];
        uint64_t v25 = v45.i64[0];
        uint64_t v28 = v46.i64[1];
        uint64_t v27 = v46.i64[0];
LABEL_25:
        int64x2_t v24 = *(const Utterance **)this;
        if (!*(unsigned char *)(*(void *)this + 416))
        {
          v43.i64[0] += v25;
          v43.i64[1] += v26;
          v44.i64[0] += v27;
          v44.i64[1] += v28;
          BOOL v15 = v42;
          goto LABEL_27;
        }
      }
    }
  }
}

void ProcessChannel::~ProcessChannel(Utterance **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*this)
  {
    if (!*(unsigned char *)this[1]) {
      ChannelMgr::maybeStartCollectingDataForUtt((ChannelMgr *)ChannelMgr::smpChannelMgr, *this, a3, a4, a5, a6, a7, a8);
    }
  }
}

void RecogController::RecogController(RecogController *this, const RecogSpec *a2, int a3, PrefiltererSearchParamSet *a4, SearchCrossLayerParamSet *a5)
{
  *(void *)this = &unk_26C4E0D18;
  RecogSpec::RecogSpec((RecogController *)((char *)this + 8), a2);
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  uint64_t v9 = (void *)((char *)this + 72);
  *(_OWORD *)((char *)this + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  int64x2_t v10 = (void *)((char *)this + 88);
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(void *)&long long v11 = 0xF0000000FLL;
  *((void *)&v11 + 1) = 0xF0000000FLL;
  *(_OWORD *)((char *)this + 292) = v11;
  *((_DWORD *)this + 77) = -16;
  *((void *)this + 39) = 0xF0000000FLL;
  *((_DWORD *)this + 9DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_OWORD *)this + 25) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(void *)((char *)this + 34DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 89) = 0;
  *(void *)((char *)this + 332) = 0;
  *(void *)((char *)this + 340) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((void *)this + 114) = a4;
  *((void *)this + 115) = a5;
  *((_DWORD *)this + 232) = -1;
  Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::Hash((uint64_t)this + 936, 0, 16);
  *((unsigned char *)this + 224) = 0;
  *((_DWORD *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 156) = 0;
  *((_WORD *)this + 144) = 0;
  *((unsigned char *)this + 290) = 0;
  *((_DWORD *)this + 104) = 0;
  *((void *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 137) = 0;
  *((unsigned char *)this + 56DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((void *)this + 111) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 40) = 0;
  *((_DWORD *)this + 82) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 24DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((void *)this + 33) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 48DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 529) = 0u;
  unint64_t v12 = *((unsigned int *)a2 + 4);
  uint64_t v13 = *((void *)this + 114);
  if (v13) {
    ++*(_DWORD *)(v13 + 36);
  }
  uint64_t v14 = *((void *)this + 115);
  if (v14) {
    ++*(_DWORD *)(v14 + 36);
  }
  *((_WORD *)this + 44DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  if (*((_DWORD *)this + 71) < v12)
  {
    int64x2_t v45 = 0;
    *((_DWORD *)this + 71) = realloc_array(*((void **)this + 34), &v45, v12, *((unsigned int *)this + 70), *((unsigned int *)this + 70), 1);
    *((void *)this + 34) = v45;
    *((_DWORD *)this + 70) = v12;
LABEL_8:
    bzero(*((void **)this + 34), v12);
    char v15 = 0;
    goto LABEL_9;
  }
  *((_DWORD *)this + 70) = v12;
  if (v12) {
    goto LABEL_8;
  }
  char v15 = 1;
LABEL_9:
  *((unsigned char *)this + 89DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  unsigned int v16 = *((_DWORD *)this + 21);
  if (v12 > v16) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 72, v12 - v16, 0);
  }
  uint64_t v17 = *((unsigned int *)this + 20);
  if (v17 <= v12)
  {
    if (v17 < v12)
    {
      uint64_t v20 = v12 - v17;
      uint64_t v21 = 16 * v17;
      do
      {
        uint64_t v22 = (void *)(*v9 + v21);
        void *v22 = 0;
        v22[1] = 0;
        v21 += 16;
        --v20;
      }
      while (v20);
    }
  }
  else if ((int)v17 > (int)v12)
  {
    uint64_t v18 = (int)v17;
    uint64_t v19 = 16 * (int)v17 - 16;
    do
    {
      --v18;
      DgnIArray<Utterance *>::~DgnIArray(*v9 + v19);
      v19 -= 16;
    }
    while (v18 > (int)v12);
  }
  *((_DWORD *)this + 20) = v12;
  unsigned int v23 = *((_DWORD *)this + 25);
  if (v12 > v23) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 88, v12 - v23, 0);
  }
  uint64_t v24 = *((unsigned int *)this + 24);
  if (v24 <= v12)
  {
    if (v24 < v12)
    {
      uint64_t v27 = v12 - v24;
      uint64_t v28 = 16 * v24;
      do
      {
        uint64_t v29 = (void *)(*v10 + v28);
        void *v29 = 0;
        v29[1] = 0;
        v28 += 16;
        --v27;
      }
      while (v27);
    }
  }
  else if ((int)v24 > (int)v12)
  {
    uint64_t v25 = (int)v24;
    uint64_t v26 = 16 * (int)v24 - 16;
    do
    {
      --v25;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v10 + v26);
      v26 -= 16;
    }
    while (v25 > (int)v12);
  }
  *((_DWORD *)this + 24) = v12;
  if ((v15 & 1) == 0)
  {
    uint64_t v30 = 0;
    unint64_t v31 = v12;
    do
    {
      uint64_t v32 = *v9 + v30;
      unsigned int v33 = *(_DWORD *)(v32 + 12);
      if (v33 <= 0x63) {
        DgnArray<RecogResultToken>::reallocElts(v32, 100 - v33, 0);
      }
      uint64_t v34 = *v10 + v30;
      unsigned int v35 = *(_DWORD *)(v34 + 12);
      if (v35 <= 0x63) {
        DgnPrimArray<unsigned int>::reallocElts(v34, 100 - v35, 0);
      }
      v30 += 16;
      --v31;
    }
    while (v31);
  }
  unsigned int v36 = *((_DWORD *)this + 29);
  if (v12 > v36) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 104, v12 - v36, 0);
  }
  *((_DWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12;
  unsigned int v37 = *((_DWORD *)this + 33);
  if (v37 <= 0x63) {
    DgnArray<WordLatticeLC>::reallocElts((uint64_t)this + 120, 100 - v37, 0);
  }
  unsigned int v38 = *((_DWORD *)this + 37);
  if (v38 <= 0x63) {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 136, 100 - v38, 0);
  }
  if (a3)
  {
    int64x2_t v39 = MemChunkAlloc(0x670uLL, 0);
    RecogStats::RecogStats((RecogStats *)v39);
    *((void *)this + 113) = v39;
    unsigned int v40 = *((_DWORD *)v39 + 3);
    if (v12 > v40) {
      DgnArray<RecogLayerStats>::reallocElts((uint64_t)v39, v12 - v40, 0);
    }
    unsigned int v41 = *((_DWORD *)v39 + 2);
    if (v41 <= v12)
    {
      if (v41 < v12)
      {
        int v42 = v12 - v41;
        uint64_t v43 = 2368 * v41;
        do
        {
          RecogLayerStats::RecogLayerStats((RecogLayerStats *)(*v39 + v43));
          v43 += 2368;
          --v42;
        }
        while (v42);
      }
    }
    else
    {
      DgnArray<RecogLayerStats>::destructAt(v39, v12, v41 - v12);
    }
    *((_DWORD *)v39 + 2) = v12;
  }
  *((unsigned char *)this + 880) = 0;
}

void sub_213FEB718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash(a12);
  DgnIArray<Utterance *>::~DgnIArray(a13);
  DgnIArray<Utterance *>::~DgnIArray(a14);
  DgnIArray<Utterance *>::~DgnIArray(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21 + 416);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21 + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v22);
  DgnIArray<Utterance *>::~DgnIArray(v21);
  DgnArray<WordLatticeLC>::releaseAll(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a17);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v20);
  DgnArray<DgnArray<ParseToken>>::releaseAll(v19);
  DgnIOwnArray<FstCore *>::releaseAll(a11);
  DgnIOwnArray<Recognizer *>::releaseAll(a10);
  DgnIOwnArray<RecogSpecLayer *>::releaseAll(v18 + 16);
  _Unwind_Resume(a1);
}

void RecogController::~RecogController(RecogController *this)
{
  *(void *)this = &unk_26C4E0D18;
  uint64_t v2 = *((void *)this + 114);
  if (v2)
  {
    --*(_DWORD *)(v2 + 36);
    *((void *)this + 114) = 0;
  }
  uint64_t v3 = *((void *)this + 115);
  if (v3)
  {
    --*(_DWORD *)(v3 + 36);
    *((void *)this + 115) = 0;
  }
  uint64_t v4 = (void *)((char *)this + 32);
  if (*((_DWORD *)this + 10))
  {
    unint64_t v5 = 0;
    do
    {
      DgnDelete<Recognizer>(*(void (****)(void))(*v4 + 8 * v5));
      *(void *)(*((void *)this + 4) + 8 * v5) = 0;
      DgnDelete<FstCore>(*(FstCore **)(*((void *)this + 6) + 8 * v5));
      *(void *)(*((void *)this + 6) + 8 * v5++) = 0;
    }
    while (v5 < *((unsigned int *)this + 10));
  }
  DgnDelete<PelScorer>(*((void *)this + 31));
  *((void *)this + 31) = 0;
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 32));
  *((void *)this + 32) = 0;
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 33));
  *((void *)this + 33) = 0;
  DgnDelete<ReproMgr>(*((ReproMgr **)this + 111));
  *((void *)this + 111) = 0;
  DgnDelete<RecogStats>(*((void *)this + 113));
  *((void *)this + 113) = 0;
  DgnDelete<ReturnListQueue>(*((ReturnListQueue **)this + 65));
  *((void *)this + 65) = 0;
  DgnDelete<PrefilterResult>(*((PrefilterResult **)this + 66));
  *((void *)this + 66) = 0;
  DgnDelete<PrefilterResult>(*((PrefilterResult **)this + 67));
  *((void *)this + 67) = 0;
  Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash((uint64_t)this + 936);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 864);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 816);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 576);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 552);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136);
  DgnArray<WordLatticeLC>::releaseAll((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 88);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 72);
  DgnIOwnArray<FstCore *>::releaseAll((uint64_t)this + 48);
  DgnIOwnArray<Recognizer *>::releaseAll((uint64_t)this + 32);
  DgnIOwnArray<RecogSpecLayer *>::releaseAll((uint64_t)this + 16);
}

{
  uint64_t vars8;

  RecogController::~RecogController(this);

  JUMPOUT(0x216698730);
}

ReproMgr *DgnDelete<ReproMgr>(ReproMgr *result)
{
  if (result)
  {
    ReproMgr::~ReproMgr(result);
    return (ReproMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<RecogStats>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    DgnArray<RecogLayerStats>::releaseAll(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

ReturnListQueue *DgnDelete<ReturnListQueue>(ReturnListQueue *result)
{
  if (result)
  {
    ReturnListQueue::~ReturnListQueue(result);
    return (ReturnListQueue *)MemChunkFree(v1, 0);
  }
  return result;
}

void RecogController::printSize(RecogController *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3050, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    unsigned int v16 = (void *)v618[0];
  }
  else {
    unsigned int v16 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A82B0, a3, &unk_2140A82B0, v16);
  DgnString::~DgnString((DgnString *)v618);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A82B0);
  uint64_t v21 = sizeObject<RecogSpecLayer *>((uint64_t)this + 16, 0) + 6;
  uint64_t v22 = sizeObject<RecogSpecLayer *>((uint64_t)this + 16, 1) + 6;
  uint64_t v23 = (a3 + 1);
  uint64_t v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3051, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v29 = (void *)v618[0];
  }
  else {
    uint64_t v29 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &unk_2140A82B0, (34 - a3), (34 - a3), v29, v21, v22, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v21;
  *a5 += v22;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3052, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v34 = (void *)v618[0];
  }
  else {
    uint64_t v34 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v30, v31, v32, v33, (a3 + 1), &unk_2140A82B0, (a3 + 1), &unk_2140A82B0, v34);
  v615 = a6;
  DgnString::~DgnString((DgnString *)v618);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v35, v36, v37, v38, (a3 + 1), &unk_2140A82B0);
  unint64_t v39 = *((unsigned int *)this + 10);
  uint64_t v614 = a3;
  if (v39)
  {
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = (a3 + 2);
    do
    {
      uint64_t v45 = *((void *)this + 4);
      if (*(void *)(v45 + 8 * v40))
      {
        unint64_t v617 = 0;
        v618[0] = 0;
        unint64_t v616 = 0;
        Recognizer::printSize(*(Recognizer **)(v45 + 8 * v40), v40, v44, v618, &v617, &v616);
        v43 += v618[0];
        v42 += v617;
        v41 += v616;
        unint64_t v39 = *((unsigned int *)this + 10);
      }
      ++v40;
    }
    while (v40 < v39);
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v42 = 0;
    uint64_t v41 = 0;
    unint64_t v39 = 0;
  }
  uint64_t v46 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v46 = 16;
  }
  uint64_t v47 = v46 + v43;
  uint64_t v48 = v46 + v42;
  char v49 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v49 = 3;
  }
  uint64_t v50 = v47 + ((unint64_t)*((unsigned int *)this + 11) << v49);
  uint64_t v51 = v48 + (v39 << v49);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3052, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v56 = (void *)v618[0];
  }
  else {
    uint64_t v56 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v23, &unk_2140A82B0, v24, v24, v56, v50, v51, v41);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v50;
  *a5 += v51;
  *v615 += v41;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3053, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    int64x2_t v61 = (void *)v618[0];
  }
  else {
    int64x2_t v61 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v57, v58, v59, v60, v23, &unk_2140A82B0, v23, &unk_2140A82B0, v61);
  DgnString::~DgnString((DgnString *)v618);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v62, v63, v64, v65, v23, &unk_2140A82B0);
  unint64_t v66 = *((unsigned int *)this + 14);
  if (v66)
  {
    unint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    do
    {
      uint64_t v71 = *((void *)this + 6);
      if (*(void *)(v71 + 8 * v67))
      {
        unint64_t v617 = 0;
        v618[0] = 0;
        unint64_t v616 = 0;
        FstCore::printSize(*(FstCore **)(v71 + 8 * v67), v67, (v614 + 2), v618, &v617, &v616);
        v70 += v618[0];
        v69 += v617;
        v68 += v616;
        unint64_t v66 = *((unsigned int *)this + 14);
      }
      ++v67;
    }
    while (v67 < v66);
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v69 = 0;
    uint64_t v68 = 0;
    unint64_t v66 = 0;
  }
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = v72 + v70;
  uint64_t v74 = v72 + v69;
  char v75 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v75 = 3;
  }
  uint64_t v76 = v73 + ((unint64_t)*((unsigned int *)this + 15) << v75);
  uint64_t v77 = v74 + (v66 << v75);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3053, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v82 = (void *)v618[0];
  }
  else {
    uint64_t v82 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v23, &unk_2140A82B0, v24, v24, v82, v76, v77, v68);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v76;
  *a5 += v77;
  *v615 += v68;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3055, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v87 = (void *)v618[0];
  }
  else {
    uint64_t v87 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v23, &unk_2140A82B0, v24, v24, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  uint64_t v88 = sizeObject<DgnArray<RecogResultToken>>((uint64_t)this + 72, 0);
  uint64_t v89 = sizeObject<DgnArray<RecogResultToken>>((uint64_t)this + 72, 1);
  uint64_t v90 = sizeObject<DgnArray<RecogResultToken>>((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3057, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v95 = (void *)v618[0];
  }
  else {
    uint64_t v95 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v23, &unk_2140A82B0, v24, v24, v95, v88, v89, v90);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v88;
  *a5 += v89;
  *v615 += v90;
  uint64_t v96 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 88, 0);
  uint64_t v97 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 88, 1);
  v618[0] = 0;
  v618[1] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v618);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3059, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v102 = (void *)v618[0];
  }
  else {
    uint64_t v102 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v23, &unk_2140A82B0, v24, v24, v102, v96, v97, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v96;
  *a5 += v97;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v103 = 12;
  }
  else {
    uint64_t v103 = 16;
  }
  uint64_t v104 = *((unsigned int *)this + 28);
  unsigned int v105 = *((_DWORD *)this + 29);
  if (v105 >= v104)
  {
    uint64_t v106 = 0;
    if ((int)v104 > 0) {
      v103 += 4 * (v104 - 1) + 4;
    }
    uint64_t v107 = v103 + 4 * (v105 - v104);
  }
  else
  {
    uint64_t v106 = 4 * v104;
    uint64_t v107 = v103;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3061, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v112 = (void *)v618[0];
  }
  else {
    uint64_t v112 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v23, &unk_2140A82B0, v24, v24, v112, v107, v103, v106);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v107;
  *a5 += v103;
  *v615 += v106;
  uint64_t v113 = sizeObject<WordLatticeLC>((uint64_t)this + 120, 0);
  uint64_t v114 = sizeObject<WordLatticeLC>((uint64_t)this + 120, 1);
  uint64_t v115 = sizeObject<WordLatticeLC>((uint64_t)this + 120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3063, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v120 = (void *)v618[0];
  }
  else {
    uint64_t v120 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v116, v117, v118, v119, v23, &unk_2140A82B0, v24, v24, v120, v113, v114, v115);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v113;
  *a5 += v114;
  *v615 += v115;
  uint64_t v121 = sizeObject<HistContents>((uint64_t)this + 136, 0);
  uint64_t v122 = sizeObject<HistContents>((uint64_t)this + 136, 1);
  v618[0] = 0x3FFFFAFFFFFFLL;
  *(_OWORD *)&v618[1] = xmmword_2140866D0;
  v618[3] = 0x1F0000001FLL;
  sizeObject((uint64_t)v618, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3065, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v127 = (void *)v618[0];
  }
  else {
    uint64_t v127 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v123, v124, v125, v126, v23, &unk_2140A82B0, v24, v24, v127, v121, v122, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v121;
  *a5 += v122;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3067, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v132 = (void *)v618[0];
  }
  else {
    uint64_t v132 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v23, &unk_2140A82B0, v24, v24, v132, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3069, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v137 = (void *)v618[0];
  }
  else {
    uint64_t v137 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v133, v134, v135, v136, v23, &unk_2140A82B0, v24, v24, v137, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  uint64_t v138 = SnapTime::sizeObject((uint64_t)this + 160, 0);
  uint64_t v139 = SnapTime::sizeObject((uint64_t)this + 160, 1);
  uint64_t v140 = SnapTime::sizeObject((uint64_t)this + 160, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3071, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v145 = (void *)v618[0];
  }
  else {
    uint64_t v145 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v23, &unk_2140A82B0, v24, v24, v145, v138, v139, v140);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v138;
  *a5 += v139;
  *v615 += v140;
  uint64_t v146 = SnapTime::sizeObject((uint64_t)this + 192, 0);
  uint64_t v147 = SnapTime::sizeObject((uint64_t)this + 192, 1);
  uint64_t v148 = SnapTime::sizeObject((uint64_t)this + 192, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3073, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v153 = (void *)v618[0];
  }
  else {
    uint64_t v153 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v23, &unk_2140A82B0, v24, v24, v153, v146, v147, v148);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v146;
  *a5 += v147;
  *v615 += v148;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3075, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v158 = (void *)v618[0];
  }
  else {
    uint64_t v158 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v23, &unk_2140A82B0, v24, v24, v158, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v159 = 4;
  }
  else {
    uint64_t v159 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3076, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v164 = (void *)v618[0];
  }
  else {
    uint64_t v164 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v23, &unk_2140A82B0, v24, v24, v164, v159, v159, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v159;
  *a5 += v159;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v165 = 4;
  }
  else {
    uint64_t v165 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3077, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v170 = (void *)v618[0];
  }
  else {
    uint64_t v170 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v23, &unk_2140A82B0, v24, v24, v170, v165, v165, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v165;
  *a5 += v165;
  uint64_t v171 = *((void *)this + 31);
  if (v171)
  {
    unint64_t v617 = 0;
    v618[0] = 0;
    unint64_t v616 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(void *)v171 + 32))(v171, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v172 = 4;
  }
  else {
    uint64_t v172 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3079, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v177 = (void *)v618[0];
  }
  else {
    uint64_t v177 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v23, &unk_2140A82B0, v24, v24, v177, v172, v172, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v172;
  *a5 += v172;
  uint64_t v178 = (PelScoreCacheData *)*((void *)this + 32);
  if (v178)
  {
    unint64_t v617 = 0;
    v618[0] = 0;
    unint64_t v616 = 0;
    PelScoreCacheData::printSize(v178, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v179 = 4;
  }
  else {
    uint64_t v179 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3081, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v184 = (void *)v618[0];
  }
  else {
    uint64_t v184 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v23, &unk_2140A82B0, v24, v24, v184, v179, v179, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v179;
  *a5 += v179;
  uint64_t v185 = (PelScoreCacheData *)*((void *)this + 33);
  if (v185)
  {
    unint64_t v617 = 0;
    v618[0] = 0;
    unint64_t v616 = 0;
    PelScoreCacheData::printSize(v185, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v186 = 4;
  }
  else {
    uint64_t v186 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3083, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v191 = (void *)v618[0];
  }
  else {
    uint64_t v191 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v23, &unk_2140A82B0, v24, v24, v191, v186, v186, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v186;
  *a5 += v186;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v192 = 12;
  }
  else {
    uint64_t v192 = 16;
  }
  int v193 = *((_DWORD *)this + 70);
  unsigned int v194 = *((_DWORD *)this + 71);
  BOOL v195 = v194 >= v193;
  uint64_t v196 = v194 - v193;
  if (v195)
  {
    uint64_t v198 = v193 & ~(v193 >> 31);
    int v193 = 0;
    uint64_t v197 = v192 + v198;
    v192 += v198 + v196;
  }
  else
  {
    uint64_t v197 = v192;
  }
  uint64_t v199 = v193;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3085, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v204 = (void *)v618[0];
  }
  else {
    uint64_t v204 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v23, &unk_2140A82B0, v24, v24, v204, v192, v197, v199);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v192;
  *a5 += v197;
  *v615 += v199;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3087, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v209 = (void *)v618[0];
  }
  else {
    uint64_t v209 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v23, &unk_2140A82B0, v24, v24, v209, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3089, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v214 = (void *)v618[0];
  }
  else {
    uint64_t v214 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v210, v211, v212, v213, v23, &unk_2140A82B0, v24, v24, v214, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3091, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v219 = (void *)v618[0];
  }
  else {
    uint64_t v219 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v23, &unk_2140A82B0, v24, v24, v219, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3093, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v224 = (void *)v618[0];
  }
  else {
    uint64_t v224 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v23, &unk_2140A82B0, v24, v24, v224, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3095, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v229 = (void *)v618[0];
  }
  else {
    uint64_t v229 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v225, v226, v227, v228, v23, &unk_2140A82B0, v24, v24, v229, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3097, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v234 = (void *)v618[0];
  }
  else {
    uint64_t v234 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v230, v231, v232, v233, v23, &unk_2140A82B0, v24, v24, v234, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3099, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v239 = (void *)v618[0];
  }
  else {
    uint64_t v239 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v235, v236, v237, v238, v23, &unk_2140A82B0, v24, v24, v239, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3101, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v244 = (void *)v618[0];
  }
  else {
    uint64_t v244 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v23, &unk_2140A82B0, v24, v24, v244, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3103, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v249 = (void *)v618[0];
  }
  else {
    uint64_t v249 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v245, v246, v247, v248, v23, &unk_2140A82B0, v24, v24, v249, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3105, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v254 = (void *)v618[0];
  }
  else {
    uint64_t v254 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v23, &unk_2140A82B0, v24, v24, v254, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3107, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v259 = (void *)v618[0];
  }
  else {
    uint64_t v259 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v255, v256, v257, v258, v23, &unk_2140A82B0, v24, v24, v259, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3109, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v264 = (void *)v618[0];
  }
  else {
    uint64_t v264 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v23, &unk_2140A82B0, v24, v24, v264, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3111, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v269 = (void *)v618[0];
  }
  else {
    uint64_t v269 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v265, v266, v267, v268, v23, &unk_2140A82B0, v24, v24, v269, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3113, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v274 = (void *)v618[0];
  }
  else {
    uint64_t v274 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v270, v271, v272, v273, v23, &unk_2140A82B0, v24, v24, v274, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3115, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v279 = (void *)v618[0];
  }
  else {
    uint64_t v279 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v275, v276, v277, v278, v23, &unk_2140A82B0, v24, v24, v279, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3117, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v284 = (void *)v618[0];
  }
  else {
    uint64_t v284 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v280, v281, v282, v283, v23, &unk_2140A82B0, v24, v24, v284, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v285 = 12;
  }
  else {
    uint64_t v285 = 16;
  }
  uint64_t v286 = *((unsigned int *)this + 88);
  unsigned int v287 = *((_DWORD *)this + 89);
  if (v287 >= v286)
  {
    uint64_t v288 = 0;
    if ((int)v286 > 0) {
      v285 += 8 * (v286 - 1) + 8;
    }
    uint64_t v289 = v285 + 8 * (v287 - v286);
  }
  else
  {
    uint64_t v288 = 8 * v286;
    uint64_t v289 = v285;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3119, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v294 = (void *)v618[0];
  }
  else {
    v294 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v290, v291, v292, v293, v23, &unk_2140A82B0, v24, v24, v294, v289, v285, v288);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v289;
  *a5 += v285;
  *v615 += v288;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3121, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v299 = (void *)v618[0];
  }
  else {
    uint64_t v299 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v295, v296, v297, v298, v23, &unk_2140A82B0, v24, v24, v299, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3123, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v304 = (void *)v618[0];
  }
  else {
    uint64_t v304 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v300, v301, v302, v303, v23, &unk_2140A82B0, v24, v24, v304, 8, 8, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3125, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v309 = (void *)v618[0];
  }
  else {
    uint64_t v309 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v305, v306, v307, v308, v23, &unk_2140A82B0, v24, v24, v309, 8, 8, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 8;
  *a5 += 8;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v310 = 4;
  }
  else {
    uint64_t v310 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3127, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    uint64_t v315 = (void *)v618[0];
  }
  else {
    uint64_t v315 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v311, v312, v313, v314, v23, &unk_2140A82B0, v24, v24, v315, v310, v310, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v310;
  *a5 += v310;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3129, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    unint64_t v320 = (void *)v618[0];
  }
  else {
    unint64_t v320 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v316, v317, v318, v319, v23, &unk_2140A82B0, v24, v24, v320, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v321 = 12;
  }
  else {
    uint64_t v321 = 16;
  }
  int v322 = *((_DWORD *)this + 102);
  unsigned int v323 = *((_DWORD *)this + 103);
  BOOL v195 = v323 >= v322;
  uint64_t v324 = v323 - v322;
  if (v195)
  {
    uint64_t v326 = v322 & ~(v322 >> 31);
    int v322 = 0;
    uint64_t v325 = v321 + v326;
    v321 += v326 + v324;
  }
  else
  {
    uint64_t v325 = v321;
  }
  uint64_t v327 = v322;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3131, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v332 = (void *)v618[0];
  }
  else {
    v332 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v328, v329, v330, v331, v23, &unk_2140A82B0, v24, v24, v332, v321, v325, v327);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v321;
  *a5 += v325;
  *v615 += v327;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3133, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v337 = (void *)v618[0];
  }
  else {
    v337 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v333, v334, v335, v336, v23, &unk_2140A82B0, v24, v24, v337, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v338 = 4;
  }
  else {
    uint64_t v338 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3134, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v343 = (void *)v618[0];
  }
  else {
    v343 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v339, v340, v341, v342, v23, &unk_2140A82B0, v24, v24, v343, v338, v338, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v338;
  *a5 += v338;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v344 = 4;
  }
  else {
    uint64_t v344 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3135, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v349 = (void *)v618[0];
  }
  else {
    v349 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v345, v346, v347, v348, v23, &unk_2140A82B0, v24, v24, v349, v344, v344, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v344;
  *a5 += v344;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v350 = 4;
  }
  else {
    uint64_t v350 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3137, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v355 = (void *)v618[0];
  }
  else {
    v355 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v351, v352, v353, v354, v23, &unk_2140A82B0, v24, v24, v355, v350, v350, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v350;
  *a5 += v350;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v356 = 4;
  }
  else {
    uint64_t v356 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3139, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v361 = (void *)v618[0];
  }
  else {
    v361 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v357, v358, v359, v360, v23, &unk_2140A82B0, v24, v24, v361, v356, v356, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v356;
  *a5 += v356;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v362 = 4;
  }
  else {
    uint64_t v362 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3141, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v367 = (void *)v618[0];
  }
  else {
    v367 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v363, v364, v365, v366, v23, &unk_2140A82B0, v24, v24, v367, v362, v362, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v362;
  *a5 += v362;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v368 = 4;
  }
  else {
    uint64_t v368 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3143, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v373 = (void *)v618[0];
  }
  else {
    v373 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v369, v370, v371, v372, v23, &unk_2140A82B0, v24, v24, v373, v368, v368, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v368;
  *a5 += v368;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v374 = 4;
  }
  else {
    uint64_t v374 = 8;
  }
  uint64_t v375 = *((void *)this + 59);
  if (v375)
  {
    uint64_t v376 = v374 + sizeObject<DgnPrimArray<unsigned char>>(v375 + 8, 0) + 5;
    uint64_t v377 = *((void *)this + 59);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v374 = 4;
    }
    else {
      uint64_t v374 = 8;
    }
    if (v377)
    {
      v374 += sizeObject<DgnPrimArray<unsigned char>>(v377 + 8, 1) + 5;
      if (*((void *)this + 59))
      {
        v618[0] = 0;
        v618[1] = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v618);
      }
    }
  }
  else
  {
    uint64_t v376 = v374;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3145, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v382 = (void *)v618[0];
  }
  else {
    v382 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v378, v379, v380, v381, v23, &unk_2140A82B0, v24, v24, v382, v376, v374, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v376;
  *a5 += v374;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v383 = 4;
  }
  else {
    uint64_t v383 = 8;
  }
  uint64_t v384 = *((void *)this + 60);
  if (v384)
  {
    uint64_t v385 = v383 + sizeObject<DgnPrimArray<unsigned char>>(v384 + 8, 0) + 5;
    uint64_t v386 = *((void *)this + 60);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v383 = 4;
    }
    else {
      uint64_t v383 = 8;
    }
    if (v386)
    {
      v383 += sizeObject<DgnPrimArray<unsigned char>>(v386 + 8, 1) + 5;
      if (*((void *)this + 60))
      {
        v618[0] = 0;
        v618[1] = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v618);
      }
    }
  }
  else
  {
    uint64_t v385 = v383;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3147, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v391 = (void *)v618[0];
  }
  else {
    v391 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v387, v388, v389, v390, v23, &unk_2140A82B0, v24, v24, v391, v385, v383, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v385;
  *a5 += v383;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3149, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v396 = (void *)v618[0];
  }
  else {
    v396 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v392, v393, v394, v395, v23, &unk_2140A82B0, v24, v24, v396, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3151, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v401 = (void *)v618[0];
  }
  else {
    v401 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v397, v398, v399, v400, v23, &unk_2140A82B0, v24, v24, v401, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v402 = 4;
  }
  else {
    uint64_t v402 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3152, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v407 = (void *)v618[0];
  }
  else {
    v407 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v403, v404, v405, v406, v23, &unk_2140A82B0, v24, v24, v407, v402, v402, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v402;
  *a5 += v402;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v408 = 4;
  }
  else {
    uint64_t v408 = 8;
  }
  uint64_t v409 = *((void *)this + 63);
  if (v409)
  {
    uint64_t v410 = v408 + sizeObject<ScoreFixArray>(v409 + 8, 0) + 5;
    uint64_t v411 = *((void *)this + 63);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v408 = 4;
    }
    else {
      uint64_t v408 = 8;
    }
    if (v411)
    {
      v408 += sizeObject<ScoreFixArray>(v411 + 8, 1) + 5;
      if (*((void *)this + 63))
      {
        v618[0] = 0;
        LODWORD(v618[1]) = 0;
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v618);
      }
    }
  }
  else
  {
    uint64_t v410 = v408;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3154, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v416 = (void *)v618[0];
  }
  else {
    v416 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v412, v413, v414, v415, v23, &unk_2140A82B0, v24, v24, v416, v410, v408, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v410;
  *a5 += v408;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v417 = 4;
  }
  else {
    uint64_t v417 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3156, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v422 = (void *)v618[0];
  }
  else {
    v422 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v418, v419, v420, v421, v23, &unk_2140A82B0, v24, v24, v422, v417, v417, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v417;
  *a5 += v417;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v423 = 4;
  }
  else {
    uint64_t v423 = 8;
  }
  uint64_t v424 = *((void *)this + 65);
  if (v424)
  {
    uint64_t v425 = sizeObject(v424, 0) + v423;
    uint64_t v426 = *((void *)this + 65);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v423 = 4;
    }
    else {
      uint64_t v423 = 8;
    }
    if (v426 && (v423 += sizeObject(v426, 1), (uint64_t v427 = *((void *)this + 65)) != 0)) {
      uint64_t v428 = sizeObject(v427, 3);
    }
    else {
      uint64_t v428 = 0;
    }
  }
  else
  {
    uint64_t v428 = 0;
    uint64_t v425 = v423;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3158, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v433 = (void *)v618[0];
  }
  else {
    v433 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v429, v430, v431, v432, v23, &unk_2140A82B0, v24, v24, v433, v425, v423, v428);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v425;
  *a5 += v423;
  *v615 += v428;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v434 = 4;
  }
  else {
    uint64_t v434 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3159, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v439 = (void *)v618[0];
  }
  else {
    v439 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v435, v436, v437, v438, v23, &unk_2140A82B0, v24, v24, v439, v434, v434, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v434;
  *a5 += v434;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v440 = 4;
  }
  else {
    uint64_t v440 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3161, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v445 = (void *)v618[0];
  }
  else {
    v445 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v441, v442, v443, v444, v23, &unk_2140A82B0, v24, v24, v445, v440, v440, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v440;
  *a5 += v440;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3163, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v450 = (void *)v618[0];
  }
  else {
    v450 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v446, v447, v448, v449, v23, &unk_2140A82B0, v24, v24, v450, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3166, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v455 = (void *)v618[0];
  }
  else {
    v455 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v451, v452, v453, v454, v23, &unk_2140A82B0, v24, v24, v455, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v456 = 12;
  }
  else {
    uint64_t v456 = 16;
  }
  int v457 = *((_DWORD *)this + 140);
  unsigned int v458 = *((_DWORD *)this + 141);
  BOOL v195 = v458 >= v457;
  uint64_t v459 = v458 - v457;
  if (v195)
  {
    uint64_t v461 = v457 & ~(v457 >> 31);
    int v457 = 0;
    uint64_t v460 = v456 + v461;
    v456 += v461 + v459;
  }
  else
  {
    uint64_t v460 = v456;
  }
  uint64_t v462 = v457;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3168, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v467 = (void *)v618[0];
  }
  else {
    v467 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v463, v464, v465, v466, v23, &unk_2140A82B0, v24, v24, v467, v456, v460, v462);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v456;
  *a5 += v460;
  *v615 += v462;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3170, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v472 = (void *)v618[0];
  }
  else {
    v472 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v468, v469, v470, v471, v23, &unk_2140A82B0, v24, v24, v472, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  uint64_t v473 = sizeObject<Germ>((uint64_t)this + 576, 0);
  uint64_t v474 = sizeObject<Germ>((uint64_t)this + 576, 1);
  v618[0] = 4211081215;
  sizeObject((uint64_t)v618, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3172, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v479 = (void *)v618[0];
  }
  else {
    v479 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v475, v476, v477, v478, v23, &unk_2140A82B0, v24, v24, v479, v473, v474, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v473;
  *a5 += v474;
  uint64_t v480 = SnapTime::sizeObject((uint64_t)this + 592, 0);
  uint64_t v481 = SnapTime::sizeObject((uint64_t)this + 592, 1);
  uint64_t v482 = SnapTime::sizeObject((uint64_t)this + 592, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3174, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v487 = (void *)v618[0];
  }
  else {
    v487 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v483, v484, v485, v486, v23, &unk_2140A82B0, v24, v24, v487, v480, v481, v482);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v480;
  *a5 += v481;
  *v615 += v482;
  uint64_t v488 = SnapTime::sizeObject((uint64_t)this + 624, 0);
  uint64_t v489 = SnapTime::sizeObject((uint64_t)this + 624, 1);
  uint64_t v490 = SnapTime::sizeObject((uint64_t)this + 624, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3176, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v495 = (void *)v618[0];
  }
  else {
    v495 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v491, v492, v493, v494, v23, &unk_2140A82B0, v24, v24, v495, v488, v489, v490);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v488;
  *a5 += v489;
  *v615 += v490;
  uint64_t v496 = SnapTime::sizeObject((uint64_t)this + 656, 0);
  uint64_t v497 = SnapTime::sizeObject((uint64_t)this + 656, 1);
  uint64_t v498 = SnapTime::sizeObject((uint64_t)this + 656, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3178, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v503 = (void *)v618[0];
  }
  else {
    v503 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v499, v500, v501, v502, v23, &unk_2140A82B0, v24, v24, v503, v496, v497, v498);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v496;
  *a5 += v497;
  *v615 += v498;
  uint64_t v504 = SnapTime::sizeObject((uint64_t)this + 688, 0);
  uint64_t v505 = SnapTime::sizeObject((uint64_t)this + 688, 1);
  uint64_t v506 = SnapTime::sizeObject((uint64_t)this + 688, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3180, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v511 = (void *)v618[0];
  }
  else {
    v511 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v507, v508, v509, v510, v23, &unk_2140A82B0, v24, v24, v511, v504, v505, v506);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v504;
  *a5 += v505;
  *v615 += v506;
  uint64_t v512 = SnapTime::sizeObject((uint64_t)this + 720, 0);
  uint64_t v513 = SnapTime::sizeObject((uint64_t)this + 720, 1);
  uint64_t v514 = SnapTime::sizeObject((uint64_t)this + 720, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3182, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v519 = (void *)v618[0];
  }
  else {
    v519 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v515, v516, v517, v518, v23, &unk_2140A82B0, v24, v24, v519, v512, v513, v514);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v512;
  *a5 += v513;
  *v615 += v514;
  uint64_t v520 = SnapTime::sizeObject((uint64_t)this + 752, 0);
  uint64_t v521 = SnapTime::sizeObject((uint64_t)this + 752, 1);
  uint64_t v522 = SnapTime::sizeObject((uint64_t)this + 752, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3184, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v527 = (void *)v618[0];
  }
  else {
    v527 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v523, v524, v525, v526, v23, &unk_2140A82B0, v24, v24, v527, v520, v521, v522);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v520;
  *a5 += v521;
  *v615 += v522;
  uint64_t v528 = SnapTime::sizeObject((uint64_t)this + 784, 0);
  uint64_t v529 = SnapTime::sizeObject((uint64_t)this + 784, 1);
  uint64_t v530 = SnapTime::sizeObject((uint64_t)this + 784, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3186, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v535 = (void *)v618[0];
  }
  else {
    v535 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v531, v532, v533, v534, v23, &unk_2140A82B0, v24, v24, v535, v528, v529, v530);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v528;
  *a5 += v529;
  *v615 += v530;
  uint64_t v536 = sizeObject<SnapTime>((uint64_t)this + 816, 0);
  uint64_t v537 = sizeObject<SnapTime>((uint64_t)this + 816, 1);
  memset(v618, 0, sizeof(v618));
  SnapTime::sizeObject((uint64_t)v618, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3188, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v542 = (void *)v618[0];
  }
  else {
    v542 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v538, v539, v540, v541, v23, &unk_2140A82B0, v24, v24, v542, v536, v537, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v536;
  *a5 += v537;
  uint64_t v543 = SnapTime::sizeObject((uint64_t)this + 832, 0);
  uint64_t v544 = SnapTime::sizeObject((uint64_t)this + 832, 1);
  uint64_t v545 = SnapTime::sizeObject((uint64_t)this + 832, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3190, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v550 = (void *)v618[0];
  }
  else {
    v550 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v546, v547, v548, v549, v23, &unk_2140A82B0, v24, v24, v550, v543, v544, v545);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v543;
  *a5 += v544;
  *v615 += v545;
  uint64_t v551 = sizeObject<SnapTime>((uint64_t)this + 864, 0);
  uint64_t v552 = sizeObject<SnapTime>((uint64_t)this + 864, 1);
  memset(v618, 0, sizeof(v618));
  SnapTime::sizeObject((uint64_t)v618, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3192, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v557 = (void *)v618[0];
  }
  else {
    v557 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v553, v554, v555, v556, v23, &unk_2140A82B0, v24, v24, v557, v551, v552, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v551;
  *a5 += v552;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3194, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v562 = (void *)v618[0];
  }
  else {
    v562 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v558, v559, v560, v561, v23, &unk_2140A82B0, v24, v24, v562, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  v563 = (ReproMgr *)*((void *)this + 111);
  if (v563)
  {
    unint64_t v617 = 0;
    v618[0] = 0;
    unint64_t v616 = 0;
    ReproMgr::printSize(v563, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v564 = 4;
  }
  else {
    uint64_t v564 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3196, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v569 = (void *)v618[0];
  }
  else {
    v569 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v565, v566, v567, v568, v23, &unk_2140A82B0, v24, v24, v569, v564, v564, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v564;
  *a5 += v564;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3198, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v574 = (void *)v618[0];
  }
  else {
    v574 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v570, v571, v572, v573, v23, &unk_2140A82B0, v24, v24, v574, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3200, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v579 = (void *)v618[0];
  }
  else {
    v579 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v575, v576, v577, v578, v23, &unk_2140A82B0, v24, v24, v579, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3202, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v584 = (void *)v618[0];
  }
  else {
    v584 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v580, v581, v582, v583, v23, &unk_2140A82B0, v24, v24, v584, 1, 1, 0);
  DgnString::~DgnString((DgnString *)v618);
  ++*a4;
  ++*a5;
  v585 = (RecogStats *)*((void *)this + 113);
  if (v585)
  {
    unint64_t v617 = 0;
    v618[0] = 0;
    unint64_t v616 = 0;
    RecogStats::printSize(v585, 0xFFFFFFFFLL, v23, v618, &v617, &v616);
    *a4 += v618[0];
    *a5 += v617;
    *v615 += v616;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v586 = 4;
  }
  else {
    uint64_t v586 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3204, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v591 = (void *)v618[0];
  }
  else {
    v591 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v587, v588, v589, v590, v23, &unk_2140A82B0, v24, v24, v591, v586, v586, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v586;
  *a5 += v586;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v592 = 4;
  }
  else {
    uint64_t v592 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3206, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v597 = (void *)v618[0];
  }
  else {
    v597 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v593, v594, v595, v596, v23, &unk_2140A82B0, v24, v24, v597, v592, v592, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v592;
  *a5 += v592;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v598 = 4;
  }
  else {
    uint64_t v598 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3208, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v603 = (void *)v618[0];
  }
  else {
    v603 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v599, v600, v601, v602, v23, &unk_2140A82B0, v24, v24, v603, v598, v598, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += v598;
  *a5 += v598;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3210, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v608 = (void *)v618[0];
  }
  else {
    v608 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v604, v605, v606, v607, v23, &unk_2140A82B0, v24, v24, v608, 4, 4, 0);
  DgnString::~DgnString((DgnString *)v618);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3212, (DgnString *)v618);
  if (LODWORD(v618[1])) {
    v613 = (void *)v618[0];
  }
  else {
    v613 = &unk_2140A82B0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v609, v610, v611, v612, v614, &unk_2140A82B0, (35 - v614), (35 - v614), v613, *a4, *a5, *v615);
  DgnString::~DgnString((DgnString *)v618);
}

void sub_213FEEA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<RecogResultToken>>(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v4 = sizeObject<RecogResultToken>((uint64_t)v10, 2);
  if (a2 == 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v5 = 12;
    }
    else {
      uint64_t v5 = 16;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        unint64_t v8 = v7 + 1;
        do
          v5 += sizeObject<RecogResultToken>(*(void *)a1 + 16 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2) {
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v10);
  return v5;
}

void sub_213FEEC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sizeObject<HistContents>(uint64_t a1, int a2)
{
  uint64_t v10 = 0x3FFFFAFFFFFFLL;
  long long v11 = xmmword_2140866D0;
  uint64_t v12 = 0x1F0000001FLL;
  uint64_t v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 12;
  }
  else {
    uint64_t v5 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      unint64_t v8 = v7 + 1;
      do
        v5 += sizeObject(*(void *)a1 + 32 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2) {
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  return v5;
}

uint64_t sizeObject<SnapTime>(uint64_t a1, int a2)
{
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = SnapTime::sizeObject((uint64_t)v10, 2);
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 12;
  }
  else {
    uint64_t v5 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      unint64_t v8 = v7 + 1;
      do
        v5 += SnapTime::sizeObject(*(void *)a1 + 32 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2) {
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  return v5;
}

uint64_t RecogController::setupRecognizers(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  char v9 = a4;
  uint64_t v12 = result;
  uint64_t v13 = *(unsigned __int16 *)(result + 12);
  if (v13 == 0xFFFF) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(ModelMgr::smpModelMgr + 40) + 8 * v13);
  }
  if (*(_DWORD *)(result + 24))
  {
    unint64_t v15 = 0;
    uint64_t v43 = (unsigned int *)(result + 56);
    __int16 v44 = *(_WORD *)(result + 10);
    unsigned int v16 = (unsigned int *)(result + 40);
    do
    {
      unsigned int v17 = *(unsigned __int16 *)(*a9 + 2 * v15);
      if (v17 != 127)
      {
        ArcGraphOrThrow = (const ArcGraph *)ModelMgr::getArcGraphOrThrow((ModelMgr *)ModelMgr::smpModelMgr, v17, a3, a4, a5, a6, a7, a8);
        uint64_t v22 = *(void *)(*(void *)(v12 + 16) + 8 * v15);
        if (*(_DWORD *)(*(void *)(v22 + 296) + 132) == 1) {
          uint64_t v23 = 2;
        }
        else {
          uint64_t v23 = 1;
        }
        unint64_t result = FstCore::makeRecognizer((long long *)(v22 + 216), v44, v14, v23, ArcGraphOrThrow);
        uint64_t v24 = result;
        unsigned int v25 = *(_DWORD *)(v12 + 56);
        if (v25 == *(_DWORD *)(v12 + 60))
        {
          unint64_t result = DgnPrimArray<unsigned long long>::reallocElts(v12 + 48, 1, 1);
          unsigned int v25 = *v43;
        }
        *(void *)(*(void *)(v12 + 48) + 8 * v25) = v24;
        *(_DWORD *)(v12 + 56) = v25 + 1;
        unsigned int v26 = *(_DWORD *)(v12 + 40);
        uint64_t v27 = (void *)(v12 + 32);
        uint64_t v28 = (unsigned int *)(v12 + 40);
        if (v26 != *(_DWORD *)(v12 + 44)) {
          goto LABEL_24;
        }
        unint64_t result = DgnPrimArray<unsigned long long>::reallocElts(v12 + 32, 1, 1);
        uint64_t v28 = (unsigned int *)(v12 + 40);
        uint64_t v27 = (void *)(v12 + 32);
        goto LABEL_23;
      }
      if (*(unsigned char *)(v12 + 8))
      {
        BOOL v18 = *(unsigned char *)(*(void *)(*(void *)(v12 + 16) + 8 * v15) + 138) != 0;
        if (!v14) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v18 = 0;
        if (!v14)
        {
LABEL_18:
          uint64_t v20 = 0;
          uint64_t v19 = 0;
          goto LABEL_19;
        }
      }
      uint64_t v19 = *(void *)(v14 + 48);
      uint64_t v20 = v14 + 80;
LABEL_19:
      unint64_t result = Recognizer::makeRecognizer(*(unsigned char *)(v12 + 8) != 0, v18, v44, v20, v19, *(unsigned char *)(v12 + 14), *(void *)(*(void *)(v12 + 16) + 8 * v15), a5, a6, a7, a8);
      uint64_t v29 = result;
      unsigned int v30 = *(_DWORD *)(v12 + 40);
      if (v30 == *(_DWORD *)(v12 + 44))
      {
        unint64_t result = DgnPrimArray<unsigned long long>::reallocElts(v12 + 32, 1, 1);
        unsigned int v30 = *v16;
      }
      *(void *)(*(void *)(v12 + 32) + 8 * v30) = v29;
      *(_DWORD *)(v12 + 40) = v30 + 1;
      unsigned int v26 = *(_DWORD *)(v12 + 56);
      uint64_t v27 = (void *)(v12 + 48);
      uint64_t v28 = v43;
      if (v26 != *(_DWORD *)(v12 + 60)) {
        goto LABEL_24;
      }
      unint64_t result = DgnPrimArray<unsigned long long>::reallocElts(v12 + 48, 1, 1);
      uint64_t v28 = v43;
      uint64_t v27 = (void *)(v12 + 48);
LABEL_23:
      unsigned int v26 = *v28;
LABEL_24:
      *(void *)(*v27 + 8 * v26) = 0;
      unsigned int *v28 = v26 + 1;
      ++v15;
    }
    while (v15 < *(unsigned int *)(v12 + 24));
  }
  unint64_t v31 = *((unsigned int *)a2 + 2);
  if (v31)
  {
    unint64_t v32 = 0;
    uint64_t v33 = *a2;
    do
    {
      uint64_t v34 = v33 + 16 * v32;
      if (*(_DWORD *)(v34 + 8))
      {
        unint64_t v35 = 0;
        do
        {
          if (v32 != v35)
          {
            int v36 = *(unsigned __int16 *)(*(void *)v34 + 2 * v35);
            if (v36 != 20000)
            {
              uint64_t v37 = *(void *)(v12 + 32);
              if (!*(void *)(v37 + 8 * v32) || !*(void *)(v37 + 8 * v35)) {
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3284, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"Cross-layer thresholding");
              }
              int v38 = *(_DWORD *)(a3 + 8);
              if (v38) {
                LOWORD(v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_WORD *)(*(void *)(*(void *)a3 + 16 * v32) + 2 * v35);
              }
              unint64_t result = Recognizer::shadowBest(*(Recognizer **)(*(void *)(v12 + 32) + 8 * v32), *(Recognizer **)(*(void *)(v12 + 32) + 8 * v35), (__int16)v36, (__int16)v38, v9);
              uint64_t v33 = *a2;
            }
          }
          ++v35;
          uint64_t v34 = v33 + 16 * v32;
        }
        while (v35 < *(unsigned int *)(v34 + 8));
        unint64_t v31 = *((unsigned int *)a2 + 2);
      }
      ++v32;
    }
    while (v32 < v31);
  }
  return result;
}

uint64_t RecogController::recognizeOneSingleLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v45, 1, 1);
  int v27 = v46;
  *(void *)(v45 + 8 * v46) = a5;
  LODWORD(v46) = v27 + 1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  DgnPrimArray<char>::reallocElts((uint64_t)&v43, 1, 1);
  int v28 = v44;
  *(unsigned char *)(v43 + v44) = a15;
  LODWORD(v44) = v28 + 1;
  uint64_t v29 = *(unsigned int *)(a9 + 8);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  if (v29)
  {
    unint64_t v39 = 0;
    unint64_t v30 = realloc_array(0, &v39, 8 * v29, 0, 0, 1);
    uint64_t v41 = v39;
    uint64_t v31 = *(unsigned int *)(a9 + 8);
    LODWORD(v42) = v29;
    HIDWORD(v42) = v30 >> 3;
    unint64_t v39 = 0;
    uint64_t v40 = 0;
    if (v31)
    {
      v37[0] = 0;
      unint64_t v32 = realloc_array(0, v37, 8 * v31, 0, 0, 1);
      uint64_t v33 = v37[0];
      unint64_t v39 = v37[0];
      LODWORD(v29) = v42;
      LODWORD(v40) = v31;
      HIDWORD(v40) = v32 >> 3;
      if (!v42) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    uint64_t v34 = 0;
    do
    {
      v41[v34] = 0;
      v33[v34++] = 0;
    }
    while (v29 != v34);
  }
  else
  {
    unint64_t v39 = 0;
    uint64_t v40 = 0;
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, void **, __int16, uint64_t, uint64_t, char, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, a2, a3, a4, &v45, a6, a7, a8, a9, a10, &v39, &v41, a11, a12, a13, a14, &v43, a16, a17,
    a18,
    a19,
    0,
    0,
    0);
  char v38 = 0;
  (*(void (**)(uint64_t, void, void, char *))(*(void *)a1 + 64))(a1, 0, 0, &v38);
  v37[0] = 0;
  v37[1] = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 72))(a1, v37);
  uint64_t v35 = *(void *)v37[0];
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v37);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v39);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v41);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v45);
  return v35;
}

void sub_213FEF428(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v1 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  DgnIArray<Utterance *>::~DgnIArray(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_213FEF47C()
{
}

BOOL RecogController::haveCompletePrefilterResult(RecogController *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 66);
  return v1 && *v1 != 0;
}

uint64_t RecogController::extractPrefilterResult(RecogController *this)
{
  uint64_t v2 = *((void *)this + 66);
  *((void *)this + 66) = 0;
  *((unsigned char *)this + 89DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
  uint64_t v3 = (PrefilterResult *)*((void *)this + 67);
  if (v3)
  {
    PrefilterResult::~PrefilterResult(v3);
    MemChunkFree(v4, 0);
    *((void *)this + 67) = 0;
  }
  return v2;
}

void RecogController::startRecognizeOne(uint64_t a1, uint64_t a2, uint64_t a3, PrefilterResult *a4, uint64_t **a5, void *a6, uint64_t a7, uint64_t *a8, void *a9, void *a10, void *a11, void *a12, char a13, char a14, unsigned int *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,_OWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  SnapTime::recordTime((SnapTime *)(a1 + 160), 1, 1, 1, 1);
  MemChunkRegion::resetInternalLocalMaxAllocBytes(0, v32);
  *(void *)(a1 + 88DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a23;
  uint64_t v39 = *(unsigned int *)(a1 + 40);
  *(unsigned char *)(a1 + 89DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 224) = a17;
  uint64_t v40 = *a5;
  uint64_t v283 = a4;
  uint64_t v284 = a6;
  if (v39 >= 2)
  {
    uint64_t v41 = 1;
    int v42 = *(_DWORD *)(*v40 + 340);
    do
    {
      if (v42 != *(_DWORD *)((*a5)[v41] + 340)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3441, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchRecognitionContinuationInterval");
      }
      ++v41;
    }
    while (v39 != v41);
    unsigned int v287 = a7;
    uint64_t v43 = v39;
    uint64_t v44 = a5;
    int v45 = *(unsigned __int8 *)(**a5 + 337);
    for (uint64_t i = 1; i != v43; ++i)
    {
      if ((v45 != 0) != (*(unsigned char *)((*v44)[i] + 337) != 0)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3443, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"SearchRecognitionBatchProcessing");
      }
    }
    int v47 = *(unsigned __int8 *)(**v44 + 385);
    for (uint64_t j = 1; j != v43; ++j)
    {
      if ((v47 != 0) != (*(unsigned char *)((*v44)[j] + 385) != 0)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3445, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"SearchEstimateAndPreScoreActivePels");
      }
    }
    a5 = v44;
    uint64_t v49 = 1;
    int v50 = *(_DWORD *)(**v44 + 504);
    uint64_t v39 = v43;
    do
    {
      if (v50 != *(_DWORD *)((*a5)[v49] + 504)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3447, (uint64_t)"recogctl/recogctl", 8, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchPartialIncludePrefiltererResult");
      }
      ++v49;
    }
    while (v43 != v49);
    uint64_t v40 = *a5;
    a6 = v284;
    a2 = a2;
    a7 = v287;
  }
  uint64_t v51 = a21;
  uint64_t v52 = *v40;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(v52 + 340);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(v52 + 337);
  *(unsigned char *)(a1 + 880) = *(unsigned char *)(v52 + 385);
  *(void *)(a1 + 232) = a3;
  uint64_t v53 = *(void *)(a1 + 904);
  if (v53)
  {
    *(unsigned char *)(v53 + 944) = a3 != 0;
    if (a3) {
      BOOL v54 = *(unsigned char *)(a3 + 416) != 0;
    }
    else {
      BOOL v54 = 0;
    }
    uint64_t v55 = a19;
    *(unsigned char *)(v53 + 945) = v54;
    *(unsigned char *)(v53 + 946) = a19 != 0;
    *(unsigned char *)(v53 + 947) = a4 != 0;
    *(_DWORD *)(v53 + 94DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    if (a19)
    {
      uint64_t CollWords = StateMgr::getCollWords(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)(a19 + 8))+ 56), *(_DWORD *)(a19 + 12), 0xFFFFu, 0, v35, v36, v37, v38);
      uint64_t v55 = a19;
      uint64_t v53 = *(void *)(a1 + 904);
      *(_DWORD *)(v53 + 948) += *(_DWORD *)(CollWords + 8);
    }
    if (a3) {
      int v57 = *(_DWORD *)(*(void *)(a3 + 432) + 208);
    }
    else {
      int v57 = 0;
    }
    *(_DWORD *)(v53 + 952) = v57;
    if (v55)
    {
      uint64_t v58 = a4;
      uint64_t v59 = a6;
      uint64_t v60 = v55;
      *(_DWORD *)(*(void *)(a1 + 904) + 956) = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v55 + 32))(v55)
                                                             + 88);
      int64x2_t v61 = *(uint64_t (**)(uint64_t))(*(void *)v60 + 32);
      uint64_t v62 = v60;
      a6 = v59;
      a4 = v58;
      int v63 = *(_DWORD *)(v61(v62) + 92);
      uint64_t v53 = *(void *)(a1 + 904);
    }
    else
    {
      int v63 = 0;
      *(_DWORD *)(v53 + 956) = 0;
    }
    *(_DWORD *)(v53 + 960) = v63;
    *(void *)(v53 + 964) = *(void *)(**a5 + 152);
    long long v64 = a22[1];
    *(_OWORD *)(v53 + 108DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *a22;
    *(_OWORD *)(v53 + 1104) = v64;
    uint64_t v65 = *(unsigned int **)(a1 + 232);
    uint64_t v51 = a21;
    if (v65 && *v65 - 1 <= 0xFFFFFFFD) {
      *(unsigned char *)(*(void *)(a1 + 904) + 972) = ChannelMgr::getChannelType((ChannelMgr *)ChannelMgr::smpChannelMgr, *v65, v33, v34, v35, v36, v37, v38)- 1 < 2;
    }
  }
  *(void *)(a1 + 424) = a19;
  *(void *)(a1 + 432) = a4;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 48DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(a1 + 496) = v51;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  if (!v39)
  {
    char v152 = 0;
    uint64_t v88 = *a5;
    goto LABEL_146;
  }
  unint64_t v66 = 0;
  char v285 = 0;
  uint64_t v68 = v39;
  uint64_t v70 = a15;
  uint64_t v286 = a6 + 1;
  uint64_t v290 = v68;
  uint64_t v288 = 8 * v68;
  uint64_t v291 = a5;
  do
  {
    uint64_t v72 = (*a5)[v66 / 8];
    unsigned int v73 = *(_DWORD *)(v72 + 188);
    unsigned int v74 = *(_DWORD *)(v72 + 172);
    int v75 = *(_DWORD *)(v72 + 176);
    v292[0] = *(void **)(v72 + 180);
    v292[1] = (void *)__PAIR64__(v73, v74);
    int v293 = v75;
    char v294 = 0;
    StateConstraint = (Constraint *)Constraint::makeStateConstraint(a2, a7, a8, *(void *)(*a9 + v66), *(void *)(*a10 + v66), *(void *)(*a12 + v66), *(_DWORD *)(v72 + 80), *(_DWORD *)(v72 + 76), a13, v70);
    uint64_t v77 = *(Recognizer **)(*(void *)(a1 + 32) + v66);
    if (v77)
    {
      if (*(unsigned char *)(a1 + 8))
      {
        Recognizer::beginTrackingConfidenceStatistics((uint64_t)v77);
        uint64_t v77 = *(Recognizer **)(*(void *)(a1 + 32) + v66);
      }
      Recognizer::resetRecognizerStats(v77);
      Recognizer::setInitialContext(*(void *)(*(void *)(a1 + 32) + v66), v286);
      Recognizer::setContextPars(*(void *)(*(void *)(a1 + 32) + v66), (__n128 *)v292);
      Recognizer::setEmbeddedTransducers(*(void *)(*(void *)(a1 + 32) + v66), *(void *)(*a11 + v66));
      uint64_t v78 = *(void *)(*(void *)(a1 + 32) + v66);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(v78 + 200);
      goto LABEL_42;
    }
    uint64_t v79 = a9;
    uint64_t v80 = a10;
    uint64_t v81 = a12;
    uint64_t v82 = a7;
    uint64_t v83 = a8;
    uint64_t v84 = a2;
    FstCore::resetRecognizerStats(*(FstCore **)(*(void *)(a1 + 48) + v66));
    uint64_t v85 = *(void *)(*(void *)(*(void *)(a1 + 48) + v66) + 72);
    uint64_t v86 = MemChunkAlloc(0x18uLL, 0);
    *(_OWORD *)uint64_t v86 = *(_OWORD *)v292;
    *((_DWORD *)v86 + 4) = v293;
    *((unsigned char *)v86 + 20) = v294;
    *(void *)(v85 + 136) = v86;
    FstCore::setEmbeddedTransducers(*(void *)(*(void *)(a1 + 48) + v66), *(void *)(*a11 + v66));
    uint64_t v78 = *(void *)(*(void *)(a1 + 32) + v66);
    if (v78)
    {
      char v285 = 1;
      a2 = v84;
      a8 = v83;
      a7 = v82;
      a12 = v81;
      a10 = v80;
      a9 = v79;
      uint64_t v70 = a15;
LABEL_42:
      Recognizer::setConstraint((Constraint **)v78, StateConstraint);
      a5 = v291;
      goto LABEL_43;
    }
    FstCore::setConstraint(*(Constraint ***)(*(void *)(a1 + 48) + v66), StateConstraint);
    char v285 = 1;
    a2 = v84;
    a5 = v291;
    a8 = v83;
    a7 = v82;
    a12 = v81;
    a10 = v80;
    a9 = v79;
    uint64_t v70 = a15;
LABEL_43:
    uint64_t v87 = *(void *)(*(void *)(a1 + 32) + v66);
    if (v87) {
      *(unsigned char *)(v87 + 361) = a14;
    }
    v66 += 8;
  }
  while (v288 != v66);
  uint64_t v88 = *a5;
  if (v290 != 1)
  {
    uint64_t v89 = 1;
    int v90 = *(_DWORD *)(*v88 + 132);
    do
    {
      if (v90 != *(_DWORD *)((*a5)[v89] + 132)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3609, (uint64_t)"recogctl/recogctl", 8, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchDecimationType");
      }
      ++v89;
    }
    while (v290 != v89);
    uint64_t v91 = 1;
    int v92 = *(_DWORD *)(**a5 + 128);
    do
    {
      if (v92 != *(_DWORD *)((*a5)[v91] + 128)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3611, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchConTransAccStartFrame");
      }
      ++v91;
    }
    while (v290 != v91);
    uint64_t v93 = 1;
    int v94 = *(_DWORD *)(**a5 + 124);
    do
    {
      if (v94 != *(_DWORD *)((*a5)[v93] + 124)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3613, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchConTransAccRampFrames");
      }
      ++v93;
    }
    while (v290 != v93);
    uint64_t v95 = 1;
    int v96 = *(_DWORD *)(**a5 + 120);
    do
    {
      if (v96 != *(_DWORD *)((*a5)[v95] + 120)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3615, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchConTransAccMaxSilenceFrames");
      }
      ++v95;
    }
    while (v290 != v95);
    uint64_t v97 = **a5;
    int v98 = *(_DWORD *)(v97 + 112);
    uint64_t v99 = *(const char **)(v97 + 104);
    if (v98) {
      uint64_t v100 = v99;
    }
    else {
      uint64_t v100 = (const char *)&unk_2140A82B0;
    }
    for (uint64_t k = 1; k != v290; ++k)
    {
      uint64_t v102 = (*v291)[k];
      int v103 = *(_DWORD *)(v102 + 112);
      uint64_t v104 = *(const char **)(v102 + 104);
      if (v103) {
        unsigned int v105 = v104;
      }
      else {
        unsigned int v105 = (const char *)&unk_2140A82B0;
      }
      if (strcmp(v100, v105)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3617, (uint64_t)"recogctl/recogctl", 10, (uint64_t)"%.500s %d %.500s %.500s", v106, v107, (char)"SearchConTransAccFactorList");
      }
    }
    uint64_t v108 = 1;
    int v109 = *(_DWORD *)(**v291 + 96);
    do
    {
      if (v109 != *(_DWORD *)((*v291)[v108] + 96)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3619, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v106, v107, (char)"SearchConTransAccDecayFrequency");
      }
      ++v108;
    }
    while (v290 != v108);
    uint64_t v110 = 1;
    double v111 = *(double *)(**v291 + 88);
    do
    {
      if (v111 != *(double *)((*v291)[v110] + 88)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3621, (uint64_t)"recogctl/recogctl", 9, (uint64_t)"%.500s %d %g %g", v106, v107, (char)"SearchConTransAccDecayFactor");
      }
      ++v110;
    }
    while (v290 != v110);
    uint64_t v112 = 1;
    double v113 = *(double *)(**v291 + 136);
    do
    {
      if (v113 != *(double *)((*v291)[v112] + 136)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3623, (uint64_t)"recogctl/recogctl", 9, (uint64_t)"%.500s %d %g %g", v106, v107, (char)"SearchEnableGenoneScoreCacheThresh");
      }
      ++v112;
    }
    while (v290 != v112);
    int v114 = *(unsigned __int8 *)(**v291 + 368);
    for (uint64_t m = 1; m != v290; ++m)
    {
      if ((v114 != 0) != (*(unsigned char *)((*v291)[m] + 368) != 0)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3625, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v106, v107, (char)"SearchTruncatePackedIntComponentScores");
      }
    }
    uint64_t v116 = 1;
    double v117 = *(double *)(**v291 + 144);
    do
    {
      if (v117 != *(double *)((*v291)[v116] + 144)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3627, (uint64_t)"recogctl/recogctl", 9, (uint64_t)"%.500s %d %g %g", v106, v107, (char)"SearchFmpeMinimumPosteriorProbability");
      }
      ++v116;
    }
    while (v290 != v116);
    uint64_t v118 = **v291;
    int v119 = *(_DWORD *)(v118 + 400);
    uint64_t v120 = *(const char **)(v118 + 392);
    if (v119) {
      uint64_t v121 = v120;
    }
    else {
      uint64_t v121 = (const char *)&unk_2140A82B0;
    }
    for (uint64_t n = 1; n != v290; ++n)
    {
      uint64_t v123 = (*v291)[n];
      int v124 = *(_DWORD *)(v123 + 400);
      uint64_t v125 = *(const char **)(v123 + 392);
      if (v124) {
        uint64_t v126 = v125;
      }
      else {
        uint64_t v126 = (const char *)&unk_2140A82B0;
      }
      if (strcmp(v121, v126)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3629, (uint64_t)"recogctl/recogctl", 10, (uint64_t)"%.500s %d %.500s %.500s", v127, v128, (char)"SearchHierScorerBeamList");
      }
    }
    uint64_t v129 = **v291;
    int v130 = *(_DWORD *)(v129 + 464);
    uint64_t v131 = *(const char **)(v129 + 456);
    if (v130) {
      uint64_t v132 = v131;
    }
    else {
      uint64_t v132 = (const char *)&unk_2140A82B0;
    }
    for (iuint64_t i = 1; ii != v290; ++ii)
    {
      uint64_t v134 = (*v291)[ii];
      int v135 = *(_DWORD *)(v134 + 464);
      uint64_t v136 = *(const char **)(v134 + 456);
      if (v135) {
        uint64_t v137 = v136;
      }
      else {
        uint64_t v137 = (const char *)&unk_2140A82B0;
      }
      if (strcmp(v132, v137)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3631, (uint64_t)"recogctl/recogctl", 10, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"SearchHierScorerCutoffRatioList");
      }
    }
    a5 = v291;
    uint64_t v138 = 1;
    int v139 = *(_DWORD *)(**v291 + 408);
    do
    {
      if (v139 != *(_DWORD *)((*v291)[v138] + 408)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3633, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchHierInactiveComponentScore");
      }
      ++v138;
    }
    while (v290 != v138);
    uint64_t v140 = 1;
    double v141 = *(double *)(**v291 + 312);
    do
    {
      if (v141 != *(double *)((*v291)[v140] + 312)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3635, (uint64_t)"recogctl/recogctl", 9, (uint64_t)"%.500s %d %g %g", v37, v38, (char)"SearchPelScoreScale");
      }
      ++v140;
    }
    while (v290 != v140);
    uint64_t v142 = 1;
    int v143 = *(_DWORD *)(**v291 + 152);
    do
    {
      if (v143 != *(_DWORD *)((*v291)[v142] + 152)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3637, (uint64_t)"recogctl/recogctl", 8, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchFrameTransformerThreadingType");
      }
      ++v142;
    }
    while (v290 != v142);
    uint64_t v144 = 1;
    int v145 = *(_DWORD *)(**v291 + 156);
    do
    {
      if (v145 != *(_DWORD *)((*v291)[v144] + 156)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3638, (uint64_t)"recogctl/recogctl", 8, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchThreadingType");
      }
      ++v144;
    }
    while (v290 != v144);
    int v146 = *(unsigned __int8 *)(**v291 + 328);
    for (juint64_t j = 1; jj != v290; ++jj)
    {
      if ((v146 != 0) != (*(unsigned char *)((*v291)[jj] + 328) != 0)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3640, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"SearchPrefilterResultUseCrumbBank");
      }
    }
    uint64_t v148 = 1;
    int v149 = *(_DWORD *)(**v291 + 332);
    do
    {
      if (v149 != *(_DWORD *)((*v291)[v148] + 332)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3642, (uint64_t)"recogctl/recogctl", 7, (uint64_t)"%.500s %d %d %d", v37, v38, (char)"SearchPrefilterResultUseCrumbBankDistanceMaxFrames");
      }
      ++v148;
    }
    while (v290 != v148);
    int v150 = *(unsigned __int8 *)(**v291 + 444);
    for (kuint64_t k = 1; kk != v290; ++kk)
    {
      if ((v150 != 0) != (*(unsigned char *)((*v291)[kk] + 444) != 0)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3644, (uint64_t)"recogctl/recogctl", 6, (uint64_t)"%.500s %d %.500s %.500s", v37, v38, (char)"FstCoreRepeatFrame");
      }
    }
    uint64_t v88 = *v291;
  }
  a4 = v283;
  a6 = v284;
  char v152 = v285;
LABEL_146:
  uint64_t v153 = *v88;
  int v154 = *(_DWORD *)(v153 + 132);
  *(_DWORD *)(a1 + 104DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v154;
  if (*(void *)(a1 + 232))
  {
    uint64_t v155 = *(void *)(*(void *)(ModelMgr::smpModelMgr + 40) + 8 * *(unsigned __int16 *)(a1 + 12));
    *(void *)(a1 + 320) = 0;
    int v156 = *(_DWORD *)(v153 + 128);
    *(_DWORD *)(a1 + 332) = v156;
    uint64_t v157 = *(void *)(v155 + 40);
    *(void *)(a1 + 384) = v157;
    if (v156) {
      BOOL v158 = v157 == 0;
    }
    else {
      BOOL v158 = 0;
    }
    if (v158)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3665, (uint64_t)"recogctl/recogctl", 1, (uint64_t)"%s", v37, v38, (char)&unk_2140A82B0);
      int v156 = *(_DWORD *)(a1 + 332);
    }
    if (((v156 != 0) & v152) == 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3667, (uint64_t)"recogctl/recogctl", 11, (uint64_t)"%s", v37, v38, (char)&errStr_recogctl_recogctl_E_ONLINE_CONSTRAINED_TRANSACC_INVALID_WITH_FST);
    }
    unsigned int v159 = **(_DWORD **)(a1 + 232);
    if (v159 - 1 <= 0xFFFFFFFD)
    {
      HasFeatint Data = ChannelMgr::sourceHasFeatData((ChannelMgr *)ChannelMgr::smpChannelMgr, v159, v33, v34, v35, v36, v37, v38);
      if (*(_DWORD *)(a1 + 332))
      {
        if (HasFeatData) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3674, (uint64_t)"recogctl/recogctl", 5, (uint64_t)"%s", v161, v162, (char)&errStr_recogctl_recogctl_E_ONLINE_CONSTRAINED_TRANSACC_INVALID_WITH_FEATURES);
        }
      }
    }
    uint64_t v163 = **a5;
    *(_DWORD *)(a1 + 336) = *(_DWORD *)(v163 + 124);
    *(_DWORD *)(a1 + 340) = *(_DWORD *)(v163 + 120);
    if (*(_DWORD *)(a1 + 332))
    {
      uint64_t v164 = *(void *)(a1 + 384);
      unsigned int v165 = *(_DWORD *)(v164 + 8);
      unsigned int v166 = *(_DWORD *)(a1 + 356);
      if (v165 > v166)
      {
        DgnPrimArray<unsigned long long>::reallocElts(a1 + 344, v165 - v166, 0);
        uint64_t v164 = *(void *)(a1 + 384);
        uint64_t v163 = **a5;
      }
      *(_DWORD *)(a1 + 352) = v165;
      *(_DWORD *)(a1 + 32DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v164 + 4);
    }
    int v167 = *(_DWORD *)(v163 + 112);
    uint64_t v168 = *(unsigned __int8 **)(v163 + 104);
    if (v167) {
      uint64_t v169 = v168;
    }
    else {
      uint64_t v169 = (unsigned __int8 *)&unk_2140A82B0;
    }
    DgnSplitStringParValueIntoDoubleArray((char)"SearchConTransAccFactorList", (int)"accumulation factors", v169, 1.0, 0.0, 1.0, a1 + 344);
    uint64_t v172 = **a5;
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(v172 + 96);
    double v173 = *(double *)(v172 + 88);
    *(double *)(a1 + 36DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v173;
    if (v173 == 0.0)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3699, (uint64_t)"recogctl/recogctl", 2, (uint64_t)"%s", v170, v171, (char)&errStr_recogctl_recogctl_E_DISALLOWED_DECAY_FACTOR);
      uint64_t v172 = **a5;
    }
    *(void *)(a1 + 376) = 0x3FF0000000000000;
    if (*(_DWORD *)(v172 + 400)) {
      uint64_t v174 = *(char **)(v172 + 392);
    }
    else {
      uint64_t v174 = (char *)&unk_2140A82B0;
    }
    if (*(_DWORD *)(v172 + 464)) {
      uint64_t v175 = *(char **)(v172 + 456);
    }
    else {
      uint64_t v175 = (char *)&unk_2140A82B0;
    }
    if (*a6) {
      BOOL v176 = *(unsigned char *)(v172 + 449) == 0;
    }
    else {
      BOOL v176 = 0;
    }
    *(void *)(a1 + 24DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = User::newPelScorer((User *)v155, *(_DWORD *)(a1 + 332) != 0, *(double *)(v172 + 136), *(unsigned char *)(v172 + 368) != 0, *(double *)(v172 + 144), v174, v175, *(_DWORD *)(v172 + 408), v176);
    uint64_t v186 = *(void *)(ChannelMgr::getSigProc((ChannelMgr *)ChannelMgr::smpChannelMgr, *(_DWORD *)(*(void *)(a1 + 232) + 4), v178, v179, v180, v181, v182, v183)+ 400);
    uint64_t v187 = **a5;
    double v188 = *(double *)(v187 + 312);
    int v189 = *(unsigned __int8 *)(v187 + 444);
    if (v154 == 1) {
      uint64_t v177 = 2;
    }
    else {
      uint64_t v177 = 1;
    }
    if (v154 == 1)
    {
      if (v189) {
        double v188 = v188 * 0.5;
      }
    }
    else if (v189)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3739, (uint64_t)"recogctl/recogctl", 15, (uint64_t)"%s", v184, v185, (char)&errStr_recogctl_recogctl_E_DISALLOWED_REPEAT_FRAME_WITH_NO_DECIMATION);
    }
    uint64_t v190 = *(void *)(a1 + 248);
    uint64_t FeaturesPerFrame = Utterance::getFeaturesPerFrame(*(Utterance **)(a1 + 232));
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, void, double))(*(void *)v190 + 40))(v190, FeaturesPerFrame, 0, v186, 1, *(unsigned __int8 *)(a1 + 224), *(unsigned __int8 *)(**a5 + 320), v188);
    uint64_t TransformedFrames = Utterance::getTransformedFrames(*(void *)(a1 + 232), *(unsigned __int16 *)(a1 + 12), v177);
    if (TransformedFrames)
    {
      *(void *)(a1 + 464) = TransformedFrames;
    }
    else
    {
      int v193 = MemChunkAlloc(0x18uLL, 0);
      uint64_t v194 = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v193);
      *(void *)(a1 + 480) = v194;
      *(_DWORD *)(a1 + 492) = v177;
      *(void *)(a1 + 464) = v194;
      uint64_t v195 = *(void *)(a1 + 248);
      uint64_t v196 = *(void *)(v195 + 56);
      if (v196) {
        uint64_t v197 = *(const PelMgr **)(v196 + 112);
      }
      else {
        uint64_t v197 = 0;
      }
      FrameTransformer = FrameTransformer::makeFrameTransformer(a6[7], *(NeuralNet **)(v155 + 368), *(void *)(v155 + 16), *(void *)(v155 + 32), v197, *(_DWORD *)(**a5 + 152), v177, *(unsigned __int8 *)(v195 + 131), *(double *)(v195 + 136), *(double *)(v195 + 144));
      *(void *)(a1 + 44DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = FrameTransformer;
      (*(void (**)(void *))(*FrameTransformer + 64))(FrameTransformer);
    }
    if (*(void *)(*(void *)(a1 + 248) + 96))
    {
      uint64_t v199 = MemChunkAlloc(0x48uLL, 0);
      ConstrainedTransAccMgr::ConstrainedTransAccMgr((uint64_t)v199, a1, v186);
      *(void *)(a1 + 512) = v200;
      ConstrainedTransAccMgr::initAccum(v200, 1, v201, v202, v203, v204, v205, v206);
    }
  }
  else
  {
    uint64_t v177 = 0;
  }
  uint64_t v207 = *(void *)(a1 + 496);
  if (v207)
  {
    (*(void (**)(uint64_t))(*(void *)v207 + 24))(v207);
    uint64_t v208 = MemChunkAlloc(0x18uLL, 0);
    *(void *)(a1 + 504) = SynchronizedArray<ScoreFixArray>::SynchronizedArray((uint64_t)v208);
  }
  uint64_t v209 = *(void *)(a1 + 424);
  if (v209)
  {
    int v210 = *(_DWORD *)(*(void *)(a1 + 912) + 48);
    if (v154) {
      BOOL v211 = 1;
    }
    else {
      BOOL v211 = v210 == 0;
    }
    if (!v211 || (v154 == 1 ? (BOOL v212 = v210 == 1) : (BOOL v212 = 1), !v212))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3812, (uint64_t)"recogctl/recogctl", 3, (uint64_t)"%s", v37, v38, (char)&errStr_recogctl_recogctl_E_MISMATCHED_DECIMATION);
      uint64_t v209 = *(void *)(a1 + 424);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v209 + 40))(v209, a16);
    uint64_t v213 = *(void *)(a1 + 424);
    uint64_t v214 = *(unsigned __int8 *)(a1 + 224);
    uint64_t MicrosecPerFrame = Utterance::getMicrosecPerFrame(*(Utterance **)(a1 + 232));
    uint64_t v216 = Utterance::getFeaturesPerFrame(*(Utterance **)(a1 + 232));
    uint64_t SigProc = ChannelMgr::getSigProc((ChannelMgr *)ChannelMgr::smpChannelMgr, *(_DWORD *)(*(void *)(a1 + 232) + 4), v217, v218, v219, v220, v221, v222);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v213 + 48))(v213, v214, MicrosecPerFrame, v216, *(void *)(SigProc + 400), *(void *)(a1 + 912));
    if (a6[3]) {
      (*(void (**)(void))(**(void **)(a1 + 424) + 72))(*(void *)(a1 + 424));
    }
    a4 = v283;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 424) + 144))(*(void *)(a1 + 424)) == *(unsigned __int16 *)(a1 + 12))
    {
      *(void *)(a1 + 456) = *(void *)(a1 + 464);
      *(void *)(a1 + 472) = *(void *)(a1 + 480);
      *(_DWORD *)(a1 + 48DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(a1 + 492);
      *(void *)(a1 + 440) = *(void *)(a1 + 448);
    }
    else
    {
      uint64_t v224 = *(void *)(a1 + 232);
      int v225 = (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 144))(*(void *)(a1 + 424));
      uint64_t v226 = Utterance::getTransformedFrames(v224, v225, v177);
      if (v226)
      {
        *(void *)(a1 + 456) = v226;
      }
      else
      {
        uint64_t v227 = MemChunkAlloc(0x18uLL, 0);
        uint64_t v228 = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v227);
        *(void *)(a1 + 472) = v228;
        *(_DWORD *)(a1 + 48DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v177;
        *(void *)(a1 + 456) = v228;
        uint64_t v229 = ModelMgr::smpModelMgr;
        uint64_t v230 = *(void *)(*(void *)(v229 + 40)
                         + 8
                         * (*(unsigned int (**)(void))(**(void **)(a1 + 424) + 144))(*(void *)(a1 + 424)));
        uint64_t v231 = (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 160))(*(void *)(a1 + 424));
        uint64_t v232 = *(void *)(v231 + 56);
        if (v232) {
          uint64_t v233 = *(const PelMgr **)(v232 + 112);
        }
        else {
          uint64_t v233 = 0;
        }
        uint64_t v234 = FrameTransformer::makeFrameTransformer(a6[8], *(NeuralNet **)(v230 + 368), *(void *)(v230 + 16), *(void *)(v230 + 32), v233, *(_DWORD *)(**a5 + 152), v177, *(unsigned __int8 *)(v231 + 131), *(double *)(v231 + 136), *(double *)(v231 + 144));
        *(void *)(a1 + 440) = v234;
        (*(void (**)(void *))(*v234 + 64))(v234);
      }
    }
  }
  *(unsigned char *)(a1 + 290) = 0;
  if ((unint64_t)a4 | *(void *)(a1 + 424))
  {
    uint64_t v235 = a20;
    *(void *)(a1 + 52DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a20;
    uint64_t v236 = **a5;
    if (*(unsigned char *)(v236 + 328))
    {
      *(unsigned char *)(a1 + 544) = 1;
      *(_DWORD *)(a1 + 54DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v236 + 332);
      uint64_t v235 = MemChunkAlloc(0x20uLL, 0);
      PrefilterResult::PrefilterResult((PrefilterResult *)v235, a2);
      *(void *)(a1 + 536) = v237;
      if (!*(void *)(a1 + 528))
      {
        uint64_t v238 = MemChunkAlloc(0x20uLL, 0);
        PrefilterResult::PrefilterResult((PrefilterResult *)v238, a2);
        *(void *)(a1 + 52DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v239;
      }
    }
    __int16 v240 = a2;
    unsigned int v241 = v177;
    uint64_t v242 = MemChunkAlloc(0x58uLL, 0);
    *(void *)(a1 + 520) = ReturnListQueue::ReturnListQueue((uint64_t)v242, (uint64_t)v235, *(_DWORD *)(a1 + 64), v240);
    if (a4)
    {
      PrefilterResult::copyIntoQueue(a4, (ReturnListQueue *)v242);
      *(unsigned char *)(a1 + 290) = 1;
    }
  }
  else
  {
    __int16 v243 = a2;
    unsigned int v241 = v177;
    uint64_t v244 = **a5;
    if (*(unsigned char *)(v244 + 328))
    {
      *(unsigned char *)(a1 + 544) = 1;
      *(_DWORD *)(a1 + 54DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v244 + 332);
      uint64_t v245 = MemChunkAlloc(0x20uLL, 0);
      PrefilterResult::PrefilterResult((PrefilterResult *)v245, v243);
      *(void *)(a1 + 52DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v246;
    }
  }
  if (*(_DWORD *)(a1 + 40))
  {
    unint64_t v247 = 0;
    do
    {
      uint64_t v248 = *(void *)(*(void *)(a1 + 32) + 8 * v247);
      if (v248)
      {
        Recognizer::beginTopRecSyncRecog(v248, v241, a24, a25);
      }
      else
      {
        unsigned int RequiredVirtMapSize = FstCore::getRequiredVirtMapSize(*(FstCore **)(*(void *)(a1 + 48) + 8 * v247));
        uint64_t VirtMap = RecogCtlMgr::getVirtMap((RecogCtlMgr *)RecogCtlMgr::smpRecogCtlMgr, RequiredVirtMapSize);
        FstCore::beginTopRecSyncRecog(*(void *)(*(void *)(a1 + 48) + 8 * v247), v241, VirtMap);
        if (*(unsigned char *)(*(void *)a18 + v247)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3950, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", v251, v252, (char)"Prefiltering in startRecognizeOne");
        }
      }
      ++v247;
    }
    while (v247 < *(unsigned int *)(a1 + 40));
  }
  DgnPrimArray<BOOL>::copyArraySlice(a1 + 552, (uint64_t *)a18, 0, *(_DWORD *)(a18 + 8));
  *(unsigned char *)(a1 + 56DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  if (*(_DWORD *)(a1 + 40))
  {
    unint64_t v257 = 0;
    do
    {
      uint64_t v258 = *(unsigned int *)(a1 + 824);
      if (v258 == *(_DWORD *)(a1 + 828))
      {
        DgnArray<PrefilterResultFrame>::reallocElts(a1 + 816, 1, 1);
        uint64_t v258 = *(unsigned int *)(a1 + 824);
      }
      uint64_t v259 = (_OWORD *)(*(void *)(a1 + 816) + 32 * v258);
      *uint64_t v259 = 0u;
      v259[1] = 0u;
      ++*(_DWORD *)(a1 + 824);
      uint64_t v260 = *(unsigned int *)(a1 + 872);
      if (v260 == *(_DWORD *)(a1 + 876))
      {
        DgnArray<PrefilterResultFrame>::reallocElts(a1 + 864, 1, 1);
        uint64_t v260 = *(unsigned int *)(a1 + 872);
      }
      uint64_t v261 = (_OWORD *)(*(void *)(a1 + 864) + 32 * v260);
      *uint64_t v261 = 0u;
      v261[1] = 0u;
      ++*(_DWORD *)(a1 + 872);
      uint64_t v262 = (const PelScoreCacheData *)v284[4];
      if (v262)
      {
        uint64_t v263 = *(PelScoreCacheData ***)(*(void *)(a1 + 32) + 8 * v257);
        if (!v263)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 3970, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", v255, v256, (char)"setPelScores");
          uint64_t v263 = *(PelScoreCacheData ***)(*(void *)(a1 + 32) + 8 * v257);
          uint64_t v262 = (const PelScoreCacheData *)v284[4];
        }
        Recognizer::setPelScores(v263, v262);
      }
      ++v257;
    }
    while (v257 < *(unsigned int *)(a1 + 40));
  }
  *(_WORD *)(a1 + 28DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 316) = 0;
  *(void *)(a1 + 300) = 0;
  *(void *)(a1 + 30DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(a1 + 292) = 0;
  if (*(void *)(a1 + 232))
  {
    uint64_t v264 = MemChunkAlloc(0x18uLL, 0);
    v264[1] = 0;
    v264[2] = 0;
    *uint64_t v264 = 0;
    uint64_t v265 = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v264);
    *(void *)(a1 + 240) = v265;
    UttFeatureArraySynchronizedArray::update(v265, *(const Utterance **)(a1 + 232));
    uint64_t v266 = *(void *)(a1 + 240);
    *(_DWORD *)(a1 + 292) = *(_DWORD *)(v266 + 16);
    *(unsigned char *)(a1 + 289) = *(unsigned char *)v266;
  }
  int v267 = *(_DWORD *)(a1 + 928);
  if (v267 == -1)
  {
    unsigned int v268 = *(_DWORD *)(a1 + 40);
    goto LABEL_254;
  }
  RecogController::setCallerThreadIdForChildren((RecogController *)a1, v267);
  unsigned int v268 = *(_DWORD *)(a1 + 40);
  if (v268)
  {
    uint64_t v269 = *(void *)(a1 + 32);
    uint64_t v270 = *(unsigned int *)(a1 + 40);
    do
    {
      if (*(void *)v269) {
        *(unsigned char *)(*(void *)v269 + 672) = 0;
      }
      v269 += 8;
      --v270;
    }
    while (v270);
LABEL_254:
    LODWORD(v271) = v268;
    if (*(_DWORD *)(a1 + 412) < v268)
    {
      v292[0] = 0;
      *(_DWORD *)(a1 + 412) = realloc_array(*(void **)(a1 + 400), v292, v268, *(unsigned int *)(a1 + 408), *(unsigned int *)(a1 + 408), 1);
      *(void **)(a1 + 400) = v292[0];
      LODWORD(v271) = *(_DWORD *)(a1 + 40);
    }
    *(_DWORD *)(a1 + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v268;
    if (v271)
    {
      unint64_t v272 = 0;
      while (1)
      {
        *(unsigned char *)(*(void *)(a1 + 400) + v272) = 0;
        uint64_t v273 = *(Recognizer **)(*(void *)(a1 + 32) + 8 * v272);
        if (!v273)
        {
          uint64_t v278 = *(FstCore **)(*(void *)(a1 + 48) + 8 * v272);
          uint64_t v279 = *(Utterance **)(a1 + 232);
          if (v279)
          {
            int v280 = Utterance::getMicrosecPerFrame(v279);
            uint64_t v281 = *(Utterance **)(a1 + 232);
            if (v281 && !*((unsigned char *)v281 + 416))
            {
              uint64_t v282 = Utterance::numCompleteRecogFrames(v281, v241);
LABEL_272:
              FstCore::beginTopRecPassSyncRecog(v278, v280, v282, *(PelScorer **)(a1 + 248), v253, v254, v255, v256);
              goto LABEL_273;
            }
          }
          else
          {
            int v280 = 0;
          }
          uint64_t v282 = 4294967280;
          goto LABEL_272;
        }
        uint64_t v274 = *(Utterance **)(a1 + 232);
        if (!v274) {
          break;
        }
        int v275 = Utterance::getMicrosecPerFrame(v274);
        uint64_t v276 = *(Utterance **)(a1 + 232);
        if (!v276 || *((unsigned char *)v276 + 416)) {
          goto LABEL_268;
        }
        int v277 = Utterance::numCompleteRecogFrames(v276, v241);
LABEL_269:
        Recognizer::beginTopRecPassSyncRecog(v273, v275, v277, *(PelScorer **)(a1 + 248));
LABEL_273:
        ++v272;
        unint64_t v271 = *(unsigned int *)(a1 + 40);
        if (v272 >= v271) {
          goto LABEL_276;
        }
      }
      int v275 = 0;
LABEL_268:
      int v277 = -16;
      goto LABEL_269;
    }
  }
  else
  {
    LODWORD(v271) = 0;
    *(_DWORD *)(a1 + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  }
LABEL_276:
  *(_DWORD *)(a1 + 416) = v271;
  *(unsigned char *)(a1 + 896) = 1;
}

double Recognizer::resetRecognizerStats(Recognizer *this)
{
  PelStats::resetStats((Recognizer *)((char *)this + 880));
  LMStats::resetStats((Recognizer *)((char *)this + 1056));
  SearchStats::resetStats((uint64_t)this + 1208);
  PelStats::resetStats((Recognizer *)((char *)this + 1240));
  LMStats::resetStats((Recognizer *)((char *)this + 1416));
  SearchStats::resetStats((uint64_t)this + 1568);
  *((_DWORD *)this + 585) = 0;
  *(_OWORD *)((char *)this + 230DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 2324) = 0u;
  LatticeStats::resetStats((Recognizer *)((char *)this + 1616));
  double result = 0.0;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *(_OWORD *)((char *)this + 2200) = 0u;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 216DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *(_OWORD *)((char *)this + 208DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *(_OWORD *)((char *)this + 2040) = 0u;
  return result;
}

double FstCore::resetRecognizerStats(FstCore *this)
{
  PelStats::resetStats((FstCore *)((char *)this + 80));
  PelStats::resetStats((FstCore *)((char *)this + 256));
  SearchStats::resetStats((uint64_t)this + 432);
  SearchStats::resetStats((uint64_t)this + 464);
  *((void *)this + 137) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;

  return LatticeStats::resetStats((FstCore *)((char *)this + 688));
}

void RecogController::setCallerThreadIdForChildren(RecogController *this, int a2)
{
  uint64_t v4 = *((void *)this + 53);
  if (v4)
  {
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 168))(v4);
    uint64_t v12 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= v5
      || (uint64_t v13 = *(void *)(*(void *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * v5)) == 0)
    {
      uint64_t v14 = v5;
      DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v5, v6, v7, v8, v9, v10, v11);
      uint64_t v13 = *(void *)(*(void *)(v12 + 8) + 8 * v14);
    }
    *(_DWORD *)(v13 + 64) = a2;
  }
  uint64_t v15 = *((void *)this + 62);
  if (v15)
  {
    unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 64))(v15);
    uint64_t v23 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= v16
      || (uint64_t v24 = *(void *)(*(void *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * v16)) == 0)
    {
      uint64_t v25 = v16;
      DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v16, v17, v18, v19, v20, v21, v22);
      uint64_t v24 = *(void *)(*(void *)(v23 + 8) + 8 * v25);
    }
    *(_DWORD *)(v24 + 64) = a2;
  }
  uint64_t v26 = *((void *)this + 56);
  if (v26)
  {
    unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 120))(v26);
    uint64_t v34 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= v27
      || (uint64_t v35 = *(void *)(*(void *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * v27)) == 0)
    {
      uint64_t v36 = v27;
      DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v27, v28, v29, v30, v31, v32, v33);
      uint64_t v35 = *(void *)(*(void *)(v34 + 8) + 8 * v36);
    }
    *(_DWORD *)(v35 + 64) = a2;
  }
  uint64_t v37 = *((void *)this + 55);
  if (v37 && v37 != *((void *)this + 56))
  {
    unsigned int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 120))(v37);
    uint64_t v45 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) <= v38
      || (uint64_t v46 = *(void *)(*(void *)(DgnThreadMgr::smpThreadMgr + 8) + 8 * v38)) == 0)
    {
      uint64_t v47 = v38;
      DgnThreadMgr::throwBadDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v38, v39, v40, v41, v42, v43, v44);
      uint64_t v46 = *(void *)(*(void *)(v45 + 8) + 8 * v47);
    }
    *(_DWORD *)(v46 + 64) = a2;
  }
}

BOOL RecogController::recognizeOneDone(RecogController *this)
{
  return *((unsigned char *)this + 288) || *((_DWORD *)this + 104) == 0;
}

uint64_t RecogController::restartPostSynchronousRecognition(RecogController *this)
{
  uint64_t v2 = *((void *)this + 53);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 88))(v2);
  }
  if (*((_DWORD *)this + 10))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      if (v5)
      {
        Recognizer::setSynchronousRecognizerStats(*(Recognizer **)(v4 + 8 * v3));
        NetStats::operator=(*(void *)(v5 + 280) + 302696, *(void *)(v5 + 280) + 302592);
      }
      else
      {
        uint64_t v6 = *(void *)(*((void *)this + 6) + 8 * v3);
        PelStats::operator=(v6 + 256, v6 + 80);
        unsigned int v7 = *(_DWORD *)(v6 + 472);
        unsigned int v8 = *(_DWORD *)(v6 + 440);
        SearchStats::operator=(v6 + 464, v6 + 432);
        if (v7 <= v8) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = v7;
        }
        *(_DWORD *)(v6 + 472) = v9;
        *(_DWORD *)(v6 + 440) = 0;
        uint64_t v10 = *(void *)(*((void *)this + 6) + 8 * v3);
        FstStats::operator=(v10 + 1376, v10 + 1120);
      }
      ++v3;
    }
    while (v3 < *((unsigned int *)this + 10));
  }
  long long v11 = *((_OWORD *)this + 50);
  *((_OWORD *)this + 52) = *((_OWORD *)this + 49);
  *((_OWORD *)this + 53) = v11;
  DgnArray<SnapTime>::copyArraySlice((unint64_t)this + 864, (uint64_t *)this + 102, 0, *((_DWORD *)this + 206));

  return SnapTime::recordTime((RecogController *)((char *)this + 192), 1, 1, 1, 1);
}

void Recognizer::setSynchronousRecognizerStats(Recognizer *this)
{
  PelStats::operator=((uint64_t)this + 1240, (uint64_t)this + 880);
  LMStats::operator=((uint64_t)this + 1416, (uint64_t)this + 1056);
  unsigned int v2 = *((_DWORD *)this + 394);
  unsigned int v3 = *((_DWORD *)this + 304);
  SearchStats::operator=((uint64_t)this + 1568, (uint64_t)this + 1208);
  if (v2 <= v3) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = v2;
  }
  *((_DWORD *)this + 394) = v4;
  *((_DWORD *)this + 304) = 0;
}

uint64_t RecogController::recognizeOneDoMainSearch(RecogController *this, int64x2_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((_DWORD *)this + 104)) {
    return 0;
  }
  if (!*((_DWORD *)this + 10)) {
    goto LABEL_35;
  }
  unint64_t v11 = 0;
  do
  {
    if (*(unsigned char *)(*((void *)this + 50) + v11)) {
      goto LABEL_15;
    }
    uint64_t v12 = *(FstCore **)(*((void *)this + 6) + 8 * v11);
    uint64_t v13 = *(Recognizer **)(*((void *)this + 4) + 8 * v11);
    uint64_t v14 = *((void *)this + 58);
    if (!v14 || !*(unsigned char *)v14) {
      goto LABEL_9;
    }
    int v15 = *(_DWORD *)(v14 + 16);
    if (v13)
    {
      Recognizer::setRecogEndTime(*(void *)(*((void *)this + 4) + 8 * v11), v15);
LABEL_9:
      if (!v12) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    FstCore::setRecogEndTime(*(void *)(*((void *)this + 6) + 8 * v11), v15);
    if (!v12) {
      goto LABEL_11;
    }
LABEL_10:
    if (FstCore::checkForDone(v12)) {
      goto LABEL_14;
    }
LABEL_11:
    if (v13 && ((Recognizer::checkForAbort(v13) & 1) != 0 || Recognizer::checkForDone(v13)))
    {
LABEL_14:
      *(unsigned char *)(*((void *)this + 50) + v11) = 1;
      --*((_DWORD *)this + 104);
    }
LABEL_15:
    ++v11;
    unint64_t v16 = *((unsigned int *)this + 10);
  }
  while (v11 < v16);
  if (!*((_DWORD *)this + 104)) {
    return 0;
  }
  if (!v16)
  {
LABEL_35:
    char v18 = 0;
    goto LABEL_36;
  }
  unint64_t v17 = 0;
  char v18 = 0;
  do
  {
    if (!*(unsigned char *)(*((void *)this + 50) + v17))
    {
      uint64_t v19 = *(Recognizer **)(*((void *)this + 4) + 8 * v17);
      int v20 = *(unsigned __int8 *)(*((void *)this + 69) + v17);
      if (*(unsigned char *)(*((void *)this + 69) + v17)) {
        BOOL v21 = v19 == 0;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4222, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"Prefiltering in recognizeOneDoMainSearch");
        int v20 = *(unsigned __int8 *)(*((void *)this + 69) + v17);
      }
      if (v20)
      {
        if (Recognizer::turnOffPrefilterer(v19)) {
          *(unsigned char *)(*((void *)this + 69) + v17) = 0;
        }
        else {
          char v18 = 1;
        }
      }
    }
    ++v17;
  }
  while (v17 < *((unsigned int *)this + 10));
LABEL_36:
  uint64_t v22 = (ReturnListQueue *)*((void *)this + 65);
  if (!v22
    || *(unsigned char *)v22
    || (int)ReturnListQueue::getNextFrameTime(v22) > *((_DWORD *)this + 78) + 1
    || (v18 & 1) == 0 && !*(void *)(*((void *)this + 65) + 48))
  {
    int v114 = -16;
    if (*((void *)this + 29))
    {
      char v23 = (*(uint64_t (**)(void, void, void, int *))(**((void **)this + 31) + 72))(*((void *)this + 31), *((unsigned int *)this + 78), *((void *)this + 58), &v114);
      uint64_t v24 = *((void *)this + 58);
      if (v24 && (v23 & 1) == 0)
      {
        *((_DWORD *)this + 79) = v114;
        return 2;
      }
    }
    else
    {
      uint64_t v24 = *((void *)this + 58);
    }
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    v111[0] = 0;
    v111[1] = 0;
    if (v24)
    {
      uint64_t v26 = *(void *)(v24 + 8) + 16 * *((unsigned int *)this + 78);
      DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)&v112, (void *)v26, 0, *(_DWORD *)(v26 + 8));
      DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v111, &v112, 0, v113);
    }
    if (v18)
    {
      unsigned int v27 = (ReturnListQueue *)*((void *)this + 65);
      if (*((void *)this + 54) && !*((_DWORD *)v27 + 10))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4283, (uint64_t)"recogctl/recogctl", 14, (uint64_t)"%s", a7, a8, (char)&errStr_recogctl_recogctl_E_PREFILTERRESULT_INCOMPATIBLE_WITH_UTT);
        unsigned int v27 = (ReturnListQueue *)*((void *)this + 65);
      }
      v115[0].i32[0] = -16;
      uint64_t v28 = ReturnListQueue::dequeue(v27, v115[0].i32);
      DgnArray<Germ>::copyArraySlice((unint64_t)this + 576, (void *)v28, 0, *(_DWORD *)(v28 + 8));
      uint64_t v29 = (void *)DgnIArray<Utterance *>::~DgnIArray(v28);
      MemChunkFree(v29, 0);
      __int32 v30 = *(_DWORD *)(*((void *)this + 65) + 4);
      if (v30 != -16 && v30 <= v115[0].i32[0] && v30 > *((_DWORD *)this + 78))
      {
        if (*((_DWORD *)this + 10))
        {
          unint64_t v31 = 0;
          do
          {
            uint64_t v32 = *((void *)this + 4);
            uint64_t v33 = *(void *)(v32 + 8 * v31);
            if (v33)
            {
              Recognizer::setSynchronousRecognizerStats(*(Recognizer **)(v32 + 8 * v31));
              NetStats::operator=(*(void *)(v33 + 280) + 302696, *(void *)(v33 + 280) + 302592);
            }
            else
            {
              uint64_t v34 = *(void *)(*((void *)this + 6) + 8 * v31);
              PelStats::operator=(v34 + 256, v34 + 80);
              unsigned int v35 = *(_DWORD *)(v34 + 472);
              unsigned int v36 = *(_DWORD *)(v34 + 440);
              SearchStats::operator=(v34 + 464, v34 + 432);
              if (v35 <= v36) {
                unsigned int v37 = v36;
              }
              else {
                unsigned int v37 = v35;
              }
              *(_DWORD *)(v34 + 472) = v37;
              *(_DWORD *)(v34 + 440) = 0;
              uint64_t v38 = *(void *)(*((void *)this + 6) + 8 * v31);
              FstStats::operator=(v38 + 1376, v38 + 1120);
            }
            ++v31;
          }
          while (v31 < *((unsigned int *)this + 10));
        }
        DgnArray<SnapTime>::copyArraySlice((unint64_t)this + 864, (uint64_t *)this + 102, 0, *((_DWORD *)this + 206));
        SnapTime::recordTime((RecogController *)((char *)this + 192), 1, 1, 1, 1);
      }
    }
    DgnString::DgnString((DgnString *)v110);
    RecogController::maybeEstimateAndPreScoreActivePelsThisFrame((uint64_t)this, (BitArray *)v110, (uint64_t)&v112);
    unint64_t v41 = *((unsigned int *)this + 10);
    if (!v41) {
      goto LABEL_112;
    }
    uint64_t v42 = 0;
    for (unint64_t i = 0; i < v41; ++i)
    {
      uint64_t v44 = *(Recognizer **)(*((void *)this + 4) + 8 * i);
      if (v44 && !*(unsigned char *)(*((void *)this + 50) + i))
      {
        Recognizer::doFrame1(v44);
        memset(v115, 0, 32);
        SnapTime::recordTime((SnapTime *)v115, 1, 0, 0, 0);
        int64x2_t v45 = v115[1];
        int64x2_t v46 = vsubq_s64(v115[0], *a2);
        int64x2_t v47 = vsubq_s64(v115[1], a2[1]);
        *a2 = v115[0];
        a2[1] = v45;
        uint64_t v48 = (int64x2_t *)(*((void *)this + 102) + v42);
        int64x2_t v49 = vaddq_s64(v47, v48[1]);
        *uint64_t v48 = vaddq_s64(v46, *v48);
        v48[1] = v49;
        unint64_t v41 = *((unsigned int *)this + 10);
      }
      v42 += 32;
    }
    if (!v41) {
      goto LABEL_112;
    }
    uint64_t v50 = 0;
    for (unint64_t j = 0; j < v41; ++j)
    {
      if (!*(unsigned char *)(*((void *)this + 50) + j))
      {
        uint64_t v52 = *(Recognizer **)(*((void *)this + 4) + 8 * j);
        if (v52)
        {
          Recognizer::doFrame2(v52, (uint64_t)&v112);
        }
        else
        {
          if (*(unsigned char *)(*((void *)this + 69) + j)) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4393, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", v39, v40, (char)"Prefiltering in recognizeOneDoMainSearch(2)");
          }
          FstCore::doFrame(*(unsigned int **)(*((void *)this + 6) + 8 * j), (uint64_t)&v112);
        }
        memset(v115, 0, 32);
        SnapTime::recordTime((SnapTime *)v115, 1, 0, 0, 0);
        int64x2_t v53 = v115[1];
        int64x2_t v54 = vsubq_s64(v115[0], *a2);
        int64x2_t v55 = vsubq_s64(v115[1], a2[1]);
        *a2 = v115[0];
        a2[1] = v53;
        uint64_t v56 = (int64x2_t *)(*((void *)this + 102) + v50);
        int64x2_t v57 = vaddq_s64(v55, v56[1]);
        *uint64_t v56 = vaddq_s64(v54, *v56);
        v56[1] = v57;
        unint64_t v41 = *((unsigned int *)this + 10);
      }
      v50 += 32;
    }
    if (v41)
    {
      uint64_t v58 = 0;
      unint64_t v59 = 0;
      __int16 v103 = -1;
      int v60 = 20000;
      do
      {
        uint64_t v61 = *(void *)(*((void *)this + 4) + 8 * v59);
        if (v61 && !*(unsigned char *)(*((void *)this + 50) + v59))
        {
          if (*(unsigned char *)(*((void *)this + 69) + v59)) {
            Recognizer::doFrame3(v61, (uint64_t)this + 576);
          }
          else {
            Recognizer::doFrame3(v61, 0);
          }
          memset(v115, 0, 32);
          SnapTime::recordTime((SnapTime *)v115, 1, 0, 0, 0);
          int64x2_t v62 = v115[1];
          int64x2_t v63 = vsubq_s64(v115[0], *a2);
          int64x2_t v64 = vsubq_s64(v115[1], a2[1]);
          *a2 = v115[0];
          a2[1] = v62;
          uint64_t v65 = (int64x2_t *)(*((void *)this + 102) + v58);
          int64x2_t v66 = vaddq_s64(v64, v65[1]);
          int64x2_t *v65 = vaddq_s64(v63, *v65);
          v65[1] = v66;
          uint64_t v67 = *(void *)(v61 + 280);
          if (*(_DWORD *)(v67 + 240) < v60)
          {
            __int16 v103 = *(_WORD *)(v67 + 230);
            int v60 = *(_DWORD *)(v67 + 240);
          }
        }
        ++v59;
        unint64_t v68 = *((unsigned int *)this + 10);
        v58 += 32;
      }
      while (v59 < v68);
      if (*((_DWORD *)this + 10))
      {
        uint64_t v69 = 0;
        uint64_t v70 = (char *)this + 936;
        uint64_t v102 = a3;
        char v101 = v18;
        while (1)
        {
          if (!*(unsigned char *)(*((void *)this + 50) + v69))
          {
            uint64_t v71 = *(void *)(*((void *)this + 4) + 8 * v69);
            if (v71)
            {
              if (*(_DWORD *)(v71 + 2352)) {
                break;
              }
            }
          }
LABEL_92:
          if (++v69 >= v68) {
            goto LABEL_113;
          }
        }
        uint64_t v104 = v69;
        uint64_t v72 = 0;
        unint64_t v73 = 0;
        while (1)
        {
          unsigned int v74 = (uint64_t *)(*(void *)(v71 + 2344) + v72);
          uint64_t v75 = *v74;
          __int32 v76 = *((_DWORD *)v74 + 2);
          uint64_t v77 = *((unsigned int *)v74 + 3);
          uint64_t v78 = *((unsigned __int16 *)v74 + 8);
          uint64_t v80 = *((unsigned int *)v74 + 5);
          uint64_t v79 = *((unsigned int *)v74 + 6);
          FstActiveWord = 0;
          *(void *)uint64_t v108 = v75;
          unsigned int v109 = v76;
          if (!*((_DWORD *)this + 236)) {
            break;
          }
          uint64_t v81 = (*Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::findBucket((uint64_t)v70, (uint64_t)v108))[3];
          FstActiveWord = (ActiveWordEmbeddedFst *)v81;
          if (!v81)
          {
            unsigned int v105 = v80;
            unsigned int v106 = v77;
            int v82 = v108[2];
            __int32 v76 = v109;
            goto LABEL_101;
          }
LABEL_110:
          (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 32))(v81, v79);
          (*(void (**)(ActiveWordEmbeddedFst *, uint64_t, uint64_t, uint64_t))(*(void *)FstActiveWord + 24))(FstActiveWord, v78, v77, v80);
          ++v73;
          v72 += 28;
          if (v73 >= *(unsigned int *)(v71 + 2352))
          {
            unint64_t v68 = *((unsigned int *)this + 10);
            a3 = v102;
            char v18 = v101;
            uint64_t v69 = v104;
            goto LABEL_92;
          }
        }
        unsigned int v105 = v80;
        unsigned int v106 = v77;
        int v82 = WORD2(v75);
LABEL_101:
        v115[0].i32[0] = (v82 << 25) | 0xFFFFF8;
        v115[0].i32[1] = 0x3FFF;
        v115[0].i32[2] = v76;
        *(uint64_t *)((char *)&v115[0].i64[1] + 4) = 0xFAFFFFFCFFFFFFFELL;
        v115[1].i32[1] = -83886084;
        uint64_t v83 = *(void *)(v71 + 280);
        Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v83 + 303024, (uint64_t)v115);
        uint64_t v85 = (uint64_t)v70;
        if (*Bucket)
        {
          FstActiveWord = *(ActiveWordEmbeddedFst **)(*Bucket + 40);
          if (FstActiveWord)
          {
LABEL_109:
            uint64_t v70 = (char *)v85;
            Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::add(v85, (uint64_t *)v108, &FstActiveWord);
            uint64_t v81 = (uint64_t)FstActiveWord;
            uint64_t v80 = v105;
            uint64_t v77 = v106;
            goto LABEL_110;
          }
        }
        else
        {
          FstActiveWord = 0;
        }
        uint64_t v86 = (ModelMgr *)ModelMgr::smpModelMgr;
        unsigned int EmbRecSpecId = ModelMgr::getEmbRecSpecId((ModelMgr *)ModelMgr::smpModelMgr, v108[2], v109);
        unsigned __int16 v88 = *(_WORD *)(ModelMgr::getEmbeddedRecSpec(v86, EmbRecSpecId) + 16);
        int v89 = *((_DWORD *)this + 262);
        uint64_t v90 = (*(uint64_t (**)(RecogController *))(*(void *)this + 200))(this);
        if (v89 == 1) {
          unsigned int v91 = 2;
        }
        else {
          unsigned int v91 = 1;
        }
        FstActiveWord = FstCore::makeFstActiveWord((uint64_t)v115, v83, (long long *)(*(void *)(*((void *)this + 2) + 8 * v104) + 216), *((_WORD *)this + 5), v90, v88, *((PelScorer **)this + 31), *(_DWORD *)(v71 + 316), *(_DWORD *)(v71 + 352), v91);
        Active::addActiveWordFst(v83, v115, FstActiveWord);
        goto LABEL_109;
      }
LABEL_113:
      unsigned __int16 v92 = v103;
    }
    else
    {
LABEL_112:
      unsigned __int16 v92 = -1;
    }
    RecogController::maybeCleanupAfterEstimateAndPreScoreActivePels(this, (const BitArray *)v110);
    if (*((void *)this + 29))
    {
      if (*(void *)(*((void *)this + 31) + 96))
      {
        if (RecogController::accumulate((uint64_t)this, v92, v111))
        {
          unsigned int v97 = *((_DWORD *)this + 80) + 1;
          *((_DWORD *)this + 80) = v97;
          unsigned int v98 = *((_DWORD *)this + 83);
          if (v97 > v98)
          {
            memset(v115, 0, 32);
            unsigned int v99 = *((_DWORD *)this + 84);
            double v100 = 1.0;
            if (v97 < v99 + v98) {
              double v100 = (double)(v97 - v98) / (double)v99;
            }
            *(_DWORD *)uint64_t v108 = 0;
            ConstrainedTransAccMgr::computeTransform(*((ConstrainedTransAccMgr **)this + 64), 1, v100, (SnapTime *)v115, (unsigned int *)v108, v93, v94, v95, v96);
          }
        }
      }
    }
    ++*((_DWORD *)this + 78);
    if ((v18 & 1) == 0 || !*((void *)this + 53)) {
      *((unsigned char *)this + 290) = 1;
    }
    ++*a3;
    BitArray::~BitArray((BitArray *)v110);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v111);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v112);
    return 0;
  }
  return 1;
}

void sub_213FF20E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  BitArray::~BitArray((BitArray *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t RecogController::maybeEstimateAndPreScoreActivePelsThisFrame(uint64_t result, BitArray *a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 880))
  {
    uint64_t v5 = result;
    int64x2_t v19 = 0u;
    int64x2_t v20 = 0u;
    SnapTime::recordTime((SnapTime *)&v19, 1, 0, 0, 0);
    BitArray::setSize(a2, *(_DWORD *)(*(void *)(*(void *)(v5 + 248) + 16) + 144));
    if (*(_DWORD *)(v5 + 40))
    {
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(*(void *)(v5 + 32) + 8 * v12);
        if (v13) {
          Active::estimateActivePelsThisFrame(*(Active **)(v13 + 280), a2);
        }
        else {
          FstCore::estimateActivePelsThisFrame(*(FstCore **)(*(void *)(v5 + 48) + 8 * v12), a2, v6, v7, v8, v9, v10, v11);
        }
        ++v12;
      }
      while (v12 < *(unsigned int *)(v5 + 40));
    }
    int64x2_t v17 = 0u;
    int64x2_t v18 = 0u;
    SnapTime::recordTime((SnapTime *)&v17, 1, 0, 0, 0);
    int64x2_t v14 = vaddq_s64(vsubq_s64(v18, v20), *(int64x2_t *)(v5 + 736));
    *(int64x2_t *)(v5 + 720) = vaddq_s64(vsubq_s64(v17, v19), *(int64x2_t *)(v5 + 720));
    *(int64x2_t *)(v5 + 736) = v14;
    (*(void (**)(void, void, void, uint64_t, uint64_t, void))(**(void **)(v5 + 248) + 56))(*(void *)(v5 + 248), *(unsigned int *)(v5 + 312), 0, a3, *(void *)(v5 + 904) + 304, 0);
    (*(void (**)(void, BitArray *))(**(void **)(v5 + 248) + 112))(*(void *)(v5 + 248), a2);
    (*(void (**)(void, void, uint64_t))(**(void **)(v5 + 248) + 64))(*(void *)(v5 + 248), *(unsigned int *)(v5 + 312), *(void *)(v5 + 904) + 304);
    memset(v16, 0, sizeof(v16));
    SnapTime::recordTime((SnapTime *)v16, 1, 0, 0, 0);
    int64x2_t v15 = vaddq_s64(vsubq_s64(v18, v20), *(int64x2_t *)(v5 + 768));
    *(int64x2_t *)(v5 + 752) = vaddq_s64(vsubq_s64(v17, v19), *(int64x2_t *)(v5 + 752));
    *(int64x2_t *)(v5 + 76DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v15;
    return PelScorer::startRecordRequestedPels(*(PelScorer **)(v5 + 248));
  }
  return result;
}

uint64_t Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::add(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    double result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  }
  int v7 = (((unint64_t)*a2 >> 19) & 0x1FFFE000) + *((_DWORD *)a2 + 2);
  int v8 = *(_DWORD *)(v5 + 16);
  if (v8) {
    unsigned int v9 = (-1640531527 * v7) >> -(char)v8;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(v5 + 80);
  uint64_t v11 = *(void *)(v5 + 32);
  if (!v11)
  {
    double result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v11 = *(void *)(v5 + 32);
  }
  unint64_t v12 = (void *)(v10 + 8 * v9);
  *(void *)(v5 + 32) = *(void *)v11;
  *(_DWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t v13 = *a2;
  *(_DWORD *)(v11 + 20) = *((_DWORD *)a2 + 2);
  *(void *)(v11 + 12) = v13;
  *(void *)(v11 + 24) = *a3;
  *(_DWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v11 = *v12;
  }
  else
  {
    *(void *)uint64_t v11 = 0;
    int64x2_t v14 = (void *)*v12;
    if (*v12)
    {
      do
      {
        unint64_t v12 = v14;
        int64x2_t v14 = (void *)*v14;
      }
      while (v14);
    }
  }
  void *v12 = v11;
  return result;
}

int64x2_t RecogController::maybeCleanupAfterEstimateAndPreScoreActivePels(RecogController *this, const BitArray *a2)
{
  if (*((unsigned char *)this + 880))
  {
    int64x2_t v7 = 0u;
    int64x2_t v8 = 0u;
    SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
    PelScorer::startRecordRequestedPels(*((PelScorer **)this + 31));
    int64x2_t v5 = 0u;
    int64x2_t v6 = 0u;
    SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
    int64x2_t result = vaddq_s64(vsubq_s64(v5, v7), *((int64x2_t *)this + 47));
    int64x2_t v4 = vaddq_s64(vsubq_s64(v6, v8), *((int64x2_t *)this + 48));
    *((int64x2_t *)this + 47) = result;
    *((int64x2_t *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4;
  }
  return result;
}

BOOL RecogController::accumulate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  *(_OWORD *)&v29[40] = 0u;
  double v6 = PelStats::resetStats((PelStats *)v29);
  unint64_t v7 = (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 208))(a1, v6);
  PelScorer::setupForUttAccumulate(v7, a3, (uint64_t)v29);
  uint64_t v8 = *(unsigned int *)(*(void *)(v7 + 120) + 56);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 232) + 152) + 4 * *(unsigned int *)(a1 + 312));
  int v14 = *(_DWORD *)(*(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1) + 48)
                              + 216)
                  + 4 * (a2 >> 5)) & (1 << a2);
  int v15 = *(_DWORD *)(a1 + 312);
  if (v15)
  {
    int v16 = 18;
    if (v9 == 1)
    {
      int v19 = *(_DWORD *)(*(void *)(*(void *)(a1 + 232) + 152) + 4 * (v15 - 1));
      if (v19 == 1) {
        int v16 = 15;
      }
      else {
        int v16 = 18;
      }
      if (v19 == 2) {
        int v16 = 12;
      }
    }
    else if (v9 == 2)
    {
      int v17 = *(_DWORD *)(*(void *)(*(void *)(a1 + 232) + 152) + 4 * (v15 - 1));
      if (v17 == 1) {
        int v18 = 6;
      }
      else {
        int v18 = 18;
      }
      if (v17 == 2) {
        int v16 = 3;
      }
      else {
        int v16 = v18;
      }
    }
  }
  else if (v9 == 1)
  {
    int v16 = 9;
  }
  else
  {
    int v16 = 0;
  }
  if (v14) {
    int v20 = 1;
  }
  else {
    int v20 = 2;
  }
  if (!a2) {
    int v20 = 0;
  }
  int v21 = v16 + v20;
  uint64_t v22 = *(void *)(a1 + 384);
  int v23 = *(_DWORD *)(*(void *)(v22 + 16) + 4 * (v21 + 18 * *(_DWORD *)(a1 + 328)));
  *(_DWORD *)(a1 + 32DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v23;
  uint64_t v24 = *(unsigned int *)(*(void *)(v22 + 32) + 4 * (v21 + 18 * v23));
  if (v24 == -1) {
    return 0;
  }
  double v25 = *(double *)(a1 + 376) * *(double *)(*(void *)(a1 + 344) + 8 * v24);
  if (v23)
  {
    BOOL result = ConstrainedTransAccMgr::adaptPel(*(void **)(a1 + 512), a2, v8, (uint64_t)a3, v10, v11, v12, v13, v25);
    if (!result) {
      return result;
    }
    goto LABEL_30;
  }
  if (*(_DWORD *)(a1 + 324) >= *(_DWORD *)(a1 + 340)) {
    return 0;
  }
  BOOL result = ConstrainedTransAccMgr::adaptPel(*(void **)(a1 + 512), a2, v8, (uint64_t)a3, v10, v11, v12, v13, v25);
  if (!result) {
    return result;
  }
  ++*(_DWORD *)(a1 + 324);
LABEL_30:
  unsigned int v27 = *(_DWORD *)(a1 + 360);
  if (v27 && !((*(_DWORD *)(a1 + 320) + 1) % v27))
  {
    double v28 = *(double *)(a1 + 376);
    if (v28 >= 1000000.0)
    {
      ConstrainedTransAccMgr::downScaleAccum(*(void *)(a1 + 512), 1u, 1u, 1000.0);
      double v28 = *(double *)(a1 + 376) / 1000.0;
    }
    *(double *)(a1 + 376) = v28 / *(double *)(a1 + 368);
  }
  return 1;
}

void RecogController::recognizeOneDoFrames(RecogController *this, MemChunkRegion *a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 104))
  {
    if (a2)
    {
      *((unsigned char *)this + 28DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
      unint64_t v9 = *((unsigned int *)this + 10);
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = *((void *)this + 50);
        do
        {
          if (!*(unsigned char *)(v11 + v10))
          {
            uint64_t v12 = *(void *)(*((void *)this + 4) + 8 * v10);
            if (!v12) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4673, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"bClientAbort in recognizeOneDoFrames");
            }
            Recognizer::setSearchAbortRecognizerStats(v12, 5);
            uint64_t v11 = *((void *)this + 50);
            *(unsigned char *)(v11 + v10) = 1;
            --*((_DWORD *)this + 104);
            unint64_t v9 = *((unsigned int *)this + 10);
          }
          ++v10;
        }
        while (v10 < v9);
      }
      if (*((unsigned char *)this + 290)) {
        RecogController::restartPostSynchronousRecognition(this);
      }
      if (*((_DWORD *)this + 232) == -1)
      {
        RecogController::doAtEndOfRecognition(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
    else
    {
      int v13 = a3;
      int64x2_t v97 = 0u;
      long long v98 = 0u;
      int64x2_t v85 = 0u;
      long long v86 = 0u;
      SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
      int64x2_t v97 = v85;
      long long v98 = v86;
      int v21 = (Utterance *)*((void *)this + 29);
      int v20 = (unsigned char *)*((void *)this + 30);
      v96[0] = v21;
      v96[1] = v20;
      v96[2] = (char *)this + 292;
      v96[3] = (char *)this + 592;
      v96[4] = &v97;
      v96[5] = (char *)this + 624;
      if (v21 && !*v20)
      {
        ChannelMgr::maybeStartCollectingDataForUtt((ChannelMgr *)ChannelMgr::smpChannelMgr, v21, v14, v15, v16, v17, v18, v19);
        int v20 = (unsigned char *)*((void *)this + 30);
      }
      uint64_t v22 = *((void *)this + 56);
      int v23 = (unsigned char *)*((void *)this + 60);
      v95[0] = "mainframetrans";
      v95[1] = v22;
      v95[2] = v23;
      v95[3] = (char *)this + 304;
      v95[4] = &v97;
      v95[5] = (char *)this + 688;
      if (v22 && !*v23)
      {
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v22 + 96))(v22, v20);
        uint64_t v22 = *((void *)this + 56);
        int v20 = (unsigned char *)*((void *)this + 30);
      }
      if (*((void *)this + 55) == v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = *((void *)this + 55);
      }
      double v25 = (unsigned char *)*((void *)this + 59);
      v94[0] = "prefframetrans";
      v94[1] = v24;
      v94[2] = v25;
      v94[3] = (char *)this + 300;
      v94[4] = &v97;
      v94[5] = (char *)this + 656;
      if (v24 && !*v25) {
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v24 + 96))(v24, v20);
      }
      uint64_t v26 = *((void *)this + 57);
      uint64_t v27 = *((void *)this + 62);
      double v28 = (unsigned char *)*((void *)this + 63);
      v93[0] = "lookahead";
      v93[1] = v27;
      v93[2] = v28;
      v93[3] = (char *)this + 296;
      v93[4] = &v97;
      v93[5] = (char *)this + 784;
      if (v27 && !*v28)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 48))(v27, v26);
        uint64_t v26 = *((void *)this + 57);
        double v28 = (unsigned char *)*((void *)this + 63);
      }
      uint64_t v29 = *((void *)this + 53);
      long long v30 = (unsigned char *)*((void *)this + 65);
      v92[0] = v29;
      v92[1] = v30;
      v92[2] = (char *)this + 308;
      v92[3] = (char *)this + 832;
      v92[4] = &v97;
      v92[5] = (char *)this + 784;
      if (v29 && !*v30) {
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v29 + 128))(v29, v26, v28);
      }
      unsigned int v91 = 0;
      if (*((_DWORD *)this + 104))
      {
        unsigned int v31 = v13 - 1;
        do
        {
          if (*a4) {
            break;
          }
          int v32 = RecogController::recognizeOneDoMainSearch(this, &v97, &v91, v15, v16, v17, v18, v19);
          int v33 = v32;
          *((_DWORD *)this + 9DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v32;
          if (!*((_DWORD *)this + 104)) {
            break;
          }
          ProcessPrefilterer::ProcessPrefilterer(&v85, *((void *)this + 53), *((void *)this + 57), *((unsigned char **)this + 63), (*((_DWORD *)this + 78) + 1), v32 == 1, *((unsigned char *)this + 156), *((unsigned char **)this + 65), (_DWORD *)this + 77, (int64x2_t *)this + 52, &v97, (int64x2_t *)this + 49);
          int v34 = v87;
          if (v87 <= v90) {
            int v35 = v90;
          }
          else {
            int v35 = v87;
          }
          if (v90 != -16) {
            int v34 = v35;
          }
          if (v88 <= v34) {
            int v36 = v34;
          }
          else {
            int v36 = v88;
          }
          ProcessLookahead::ProcessLookahead(&v81, *((void *)this + 62), *((void *)this + 57), v36, v89 == 3, v33 == 1, *((unsigned __int8 *)this + 156), *((unsigned char **)this + 63), (_DWORD *)this + 74, &v97, (int64x2_t *)this + 49);
          char v38 = v89 == 2;
          if (v87 <= v90) {
            int v39 = v90;
          }
          else {
            int v39 = v87;
          }
          if (v90 == -16) {
            int v40 = v87;
          }
          else {
            int v40 = v39;
          }
          if (v88 <= v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = v88;
          }
          if (v89 == 3)
          {
            if (v81)
            {
              unsigned int v42 = v84;
              if (*(unsigned char *)v82) {
                char v38 = 0;
              }
              else {
                char v38 = *(_DWORD *)(v82 + 16) <= v84;
              }
            }
            else
            {
              char v38 = 0;
              unsigned int v42 = v84;
            }
            if ((int)v42 <= (int)v83) {
              uint64_t v41 = v83;
            }
            else {
              uint64_t v41 = v42;
            }
          }
          ProcessFrameTransform::ProcessFrameTransform(&v78, v37, *((void *)this + 55), *((void *)this + 30), v41, v38, v33 == 1, *((unsigned char *)this + 156), *((void *)this + 59), (_DWORD *)this + 75, &v97, (int64x2_t *)this + 41);
          if (v33 == 2) {
            char v38 = 1;
          }
          if (SDWORD1(v80) <= (int)v80) {
            uint64_t v43 = v80;
          }
          else {
            uint64_t v43 = DWORD1(v80);
          }
          if (v78) {
            LODWORD(v43) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v78 + 56))(v78, v43);
          }
          uint64_t v44 = (*((_DWORD *)this + 78) + 1);
          if ((int)v43 > (int)v44)
          {
            uint64_t v44 = SDWORD1(v80) <= (int)v80 ? v80 : DWORD1(v80);
            if (v78) {
              uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v78 + 56))(v78, v44);
            }
          }
          int v45 = *((_DWORD *)this + 79);
          uint64_t v46 = (int)v44 <= v45 + 1 ? (v45 + 1) : v44;
          ProcessFrameTransform::ProcessFrameTransform(&v75, v44, *((void *)this + 56), *((void *)this + 30), v46, v38, v33 == 2, *((unsigned char *)this + 156), *((void *)this + 60), (_DWORD *)this + 76, &v97, (int64x2_t *)this + 43);
          uint64_t v47 = v78 && !*(unsigned char *)v79 && *(_DWORD *)(v79 + 16) <= SDWORD1(v80)
             || v75 && !*(unsigned char *)v76 && (unint64_t)(*(_DWORD *)(v76 + 16) <= SHIDWORD(v77));
          unsigned int v48 = v33 == 1 ? v47 : 0;
          v49.i64[0] = v80;
          v49.i64[1] = v77;
          uint64_t v50 = vmaxvq_s32(v49);
          uint64_t v51 = v33 == 2 ? 1 : v48;
          ProcessChannel::ProcessChannel((ProcessChannel *)v74, v50, v47, v51, *((unsigned __int8 *)this + 156), *((Utterance **)this + 29), *((UttFeatureArraySynchronizedArray **)this + 30), (int *)this + 73, (int64x2_t *)this + 37, &v97, (int64x2_t *)this + 39);
          ProcessChannel::~ProcessChannel(v74, v52, v53, v54, v55, v56, v57, v58);
          ProcessFrameTransform::~ProcessFrameTransform((ProcessFrameTransform *)&v75);
          ProcessFrameTransform::~ProcessFrameTransform((ProcessFrameTransform *)&v78);
          ProcessLookahead::~ProcessLookahead((ProcessLookahead *)&v81);
          ProcessPrefilterer::~ProcessPrefilterer((ProcessPrefilterer *)&v85);
          if (!*((_DWORD *)this + 104)) {
            break;
          }
        }
        while (v31 >= v91);
      }
      PrefiltererThreadInsurance::~PrefiltererThreadInsurance((PrefiltererThreadInsurance *)v92);
      LookaheadThreadInsurance::~LookaheadThreadInsurance((LookaheadThreadInsurance *)v93);
      FrameTransformThreadInsurance::~FrameTransformThreadInsurance((FrameTransformThreadInsurance *)v94);
      FrameTransformThreadInsurance::~FrameTransformThreadInsurance((FrameTransformThreadInsurance *)v95);
      ChannelThreadInsurance::~ChannelThreadInsurance((ChannelThreadInsurance *)v96, v59, v60, v61, v62, v63, v64, v65);
      if (!*((_DWORD *)this + 104))
      {
        if (*((unsigned char *)this + 290)) {
          RecogController::restartPostSynchronousRecognition(this);
        }
        if (*((_DWORD *)this + 232) == -1) {
          RecogController::doAtEndOfRecognition(this, v66, v67, v68, v69, v70, v71, v72);
        }
      }
    }
  }
}

void sub_213FF2E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  LookaheadThreadInsurance::~LookaheadThreadInsurance((LookaheadThreadInsurance *)&a51);
  FrameTransformThreadInsurance::~FrameTransformThreadInsurance((FrameTransformThreadInsurance *)&a57);
  FrameTransformThreadInsurance::~FrameTransformThreadInsurance((FrameTransformThreadInsurance *)(v57 - 224));
  ChannelThreadInsurance::~ChannelThreadInsurance((ChannelThreadInsurance *)(v57 - 176), v59, v60, v61, v62, v63, v64, v65);
  _Unwind_Resume(a1);
}

ConstrainedTransAccMgr *RecogController::doAtEndOfRecognition(RecogController *this, MemChunkRegion *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 232) != -1) {
    RecogController::setCallerThreadIdForChildren(this, -1);
  }
  unint64_t v9 = (unsigned char *)*((void *)this + 30);
  if (v9 && !*v9)
  {
    unint64_t v10 = (Utterance *)*((void *)this + 29);
    if (*((unsigned char *)v10 + 416))
    {
      uint64_t v11 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      do
      {
        ChannelMgr::collectAvailableDataForUtt(v11, v10, a3, a4, a5, a6, a7, a8);
        unint64_t v10 = (Utterance *)*((void *)this + 29);
      }
      while (*((unsigned char *)v10 + 416));
      unint64_t v9 = (unsigned char *)*((void *)this + 30);
    }
    UttFeatureArraySynchronizedArray::update((uint64_t)v9, v10);
  }
  if (*((void *)this + 54))
  {
    unsigned int v12 = *(_DWORD *)(*((void *)this + 114) + 48) == 1 ? 2 : 1;
    if (Utterance::numCompleteRecogFrames(*((Utterance **)this + 29), v12) != *(_DWORD *)(*((void *)this + 54) + 16)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4886, (uint64_t)"recogctl/recogctl", 14, (uint64_t)"%s", a7, a8, (char)&errStr_recogctl_recogctl_E_PREFILTERRESULT_INCOMPATIBLE_WITH_UTT);
    }
  }
  int v13 = (unsigned char *)*((void *)this + 59);
  if (v13 && !*v13) {
    (*(void (**)(void, void))(**((void **)this + 55) + 80))(*((void *)this + 55), (*(_DWORD *)(*((void *)this + 30) + 16) - 1));
  }
  uint64_t v14 = (unsigned char *)*((void *)this + 60);
  if (v14 && !*v14) {
    (*(void (**)(void, void))(**((void **)this + 56) + 80))(*((void *)this + 56), (*(_DWORD *)(*((void *)this + 30) + 16) - 1));
  }
  if (*((_DWORD *)this + 10))
  {
    for (unint64_t i = 0; i < *((unsigned int *)this + 10); ++i)
    {
      if (*((void *)this + 30))
      {
        uint64_t v16 = *((void *)this + 58);
        if (v16)
        {
          uint64_t v17 = *(void *)(*((void *)this + 4) + 8 * i);
          if (v17) {
            goto LABEL_32;
          }
          FstCore::setRecogEndTime(*(void *)(*((void *)this + 6) + 8 * i), *(_DWORD *)(v16 + 16));
        }
        else
        {
          uint64_t v16 = *((void *)this + 57);
          if (v16)
          {
            if (*(void *)(*((void *)this + 4) + 8 * i)
              || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 4942, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"Prefiltering in doAtEndOfRecognition"), (uint64_t v16 = *((void *)this + 57)) != 0))
            {
              uint64_t v17 = *(void *)(*((void *)this + 4) + 8 * i);
LABEL_32:
              Recognizer::setRecogEndTime(v17, *(_DWORD *)(v16 + 16));
            }
          }
        }
      }
      uint64_t v18 = *(void *)(*((void *)this + 4) + 8 * i);
      if (v18) {
        Recognizer::endTopRecPassSyncRecog(v18);
      }
      else {
        FstCore::endTopRecPassSyncRecog(*(FstCore **)(*((void *)this + 6) + 8 * i));
      }
    }
  }
  if (*((void *)this + 113)) {
    *(void *)(*((void *)this + 113) + 1120) = MemChunkRegion::getAndResetInternalLocalMaxAllocBytes(0, a2);
  }
  if (*((unsigned char *)this + 8))
  {
    uint64_t v19 = *(PelScoreCache **)(*((void *)this + 31) + 120);
    MrecInitModule_sdpres_sdapi();
    if (*((unsigned char *)this + 224))
    {
      PelScoreCacheint Data = PelScoreCache::makePelScoreCacheData(v19);
      (*(void (**)(RecogController *, unsigned int *))(*(void *)this + 224))(this, PelScoreCacheData);
      uint64_t v21 = *((void *)this + 53);
      if (v21)
      {
        uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 64))(v21);
        (*(void (**)(RecogController *, uint64_t))(*(void *)this + 216))(this, v22);
      }
    }
  }
  uint64_t v23 = *((void *)this + 53);
  if (v23)
  {
    uint64_t v24 = *((void *)this + 113);
    if (v24)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 80))(v23, v24 + 16, v24 + 192, v24 + 480, v24 + 656);
      uint64_t v25 = *((void *)this + 113);
      long long v26 = *((_OWORD *)this + 53);
      *(_OWORD *)(v25 + 272) = *((_OWORD *)this + 52);
      *(_OWORD *)(v25 + 28DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v26;
      int64x2_t v27 = vsubq_s64(*((int64x2_t *)this + 50), *((int64x2_t *)this + 53));
      *(int64x2_t *)(v25 + 736) = vsubq_s64(*((int64x2_t *)this + 49), *((int64x2_t *)this + 52));
      *(int64x2_t *)(v25 + 752) = v27;
      uint64_t v23 = *((void *)this + 53);
    }
    (*(void (**)(uint64_t))(*(void *)v23 + 56))(v23);
  }
  uint64_t v28 = *((void *)this + 62);
  if (v28)
  {
    (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
    DgnDelete<SynchronizedArray<ScoreFixArray>>(*((void *)this + 63));
    *((void *)this + 63) = 0;
  }
  uint64_t v29 = *((void *)this + 55);
  if (!v29 || v29 == *((void *)this + 56))
  {
    *((void *)this + 55) = 0;
    uint64_t v32 = *((void *)this + 59);
    if (*((void *)this + 60) != v32) {
      DgnDelete<UttFeatureArraySynchronizedArray>(v32);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 72))(v29);
    DgnDelete<FrameTransformer>(*((void (****)(void))this + 55));
    *((void *)this + 55) = 0;
    unint64_t v30 = *((void *)this + 29);
    __int16 v31 = (*(uint64_t (**)(void))(**((void **)this + 53) + 144))(*((void *)this + 53));
    Utterance::setTransformedFrames(v30, v31, *((_DWORD *)this + 122), *((void *)this + 59));
  }
  *((void *)this + 59) = 0;
  *((_DWORD *)this + 122) = 0;
  *((void *)this + 57) = 0;
  uint64_t v33 = *((void *)this + 56);
  if (v33)
  {
    (*(void (**)(uint64_t))(*(void *)v33 + 72))(v33);
    DgnDelete<FrameTransformer>(*((void (****)(void))this + 56));
    *((void *)this + 56) = 0;
    Utterance::setTransformedFrames(*((void *)this + 29), *((_WORD *)this + 6), *((_DWORD *)this + 123), *((void *)this + 60));
    uint64_t v34 = 0;
    *((void *)this + 60) = 0;
    *((_DWORD *)this + 123) = 0;
  }
  else
  {
    uint64_t v34 = *((void *)this + 60);
  }
  DgnDelete<UttFeatureArraySynchronizedArray>(v34);
  *((void *)this + 60) = 0;
  BOOL result = DgnDelete<ConstrainedTransAccMgr>(*((ConstrainedTransAccMgr **)this + 64));
  *((void *)this + 64) = 0;
  *((_DWORD *)this + 123) = 0;
  *((void *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t v38 = *((void *)this + 113);
  if (v38)
  {
    uint64_t v39 = *((void *)this + 29);
    if (v39)
    {
      *(_DWORD *)(v38 + 976) = *(_DWORD *)(v39 + 8);
      *(unsigned char *)(v38 + 980) = *(unsigned char *)(v39 + 418);
      *(_OWORD *)(v38 + 984) = *(_OWORD *)(v39 + 24);
      *(void *)(v38 + 1000) = *(void *)(v39 + 80);
      *(void *)(v38 + 100DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(void *)(v39 + 88);
      *(_DWORD *)(v38 + 1016) = *(_DWORD *)(v39 + 96);
      *(_DWORD *)(v38 + 1020) = *(_DWORD *)(v39 + 344);
      uint64_t v40 = *(void *)(v39 + 360);
      if (*(_OWORD *)(v39 + 352) == 0)
      {
        if (!*(void *)(v39 + 368) && !*(void *)(v39 + 376)) {
          goto LABEL_64;
        }
        uint64_t v40 = 0;
      }
      *(void *)(v38 + 1024) = *(void *)(v39 + 352);
      *(void *)(v38 + 1032) = v40;
      *(_OWORD *)(v38 + 1040) = *(_OWORD *)(v39 + 368);
      long long v41 = *(_OWORD *)(v39 + 400);
      *(_OWORD *)(v38 + 1056) = *(_OWORD *)(v39 + 384);
      *(_OWORD *)(v38 + 1072) = v41;
    }
LABEL_64:
    long long v42 = *((_OWORD *)this + 38);
    *(_OWORD *)(v38 + 1136) = *((_OWORD *)this + 37);
    *(_OWORD *)(v38 + 1152) = v42;
    long long v43 = *((_OWORD *)this + 40);
    *(_OWORD *)(v38 + 116DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((_OWORD *)this + 39);
    *(_OWORD *)(v38 + 1184) = v43;
    long long v44 = *((_OWORD *)this + 42);
    *(_OWORD *)(v38 + 1200) = *((_OWORD *)this + 41);
    *(_OWORD *)(v38 + 1216) = v44;
    long long v45 = *((_OWORD *)this + 44);
    *(_OWORD *)(v38 + 1232) = *((_OWORD *)this + 43);
    *(_OWORD *)(v38 + 124DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v45;
    long long v46 = *((_OWORD *)this + 46);
    *(_OWORD *)(v38 + 1264) = *((_OWORD *)this + 45);
    *(_OWORD *)(v38 + 1280) = v46;
    long long v47 = *((_OWORD *)this + 48);
    *(_OWORD *)(v38 + 1296) = *((_OWORD *)this + 47);
    *(_OWORD *)(v38 + 1312) = v47;
  }
  if (*((unsigned char *)this + 544))
  {
    if (*((_DWORD *)this + 10))
    {
      unint64_t v48 = 0;
      do
      {
        int32x4_t v49 = *(CWIDCrumbBank ***)(*((void *)this + 4) + 8 * v48);
        if (!v49)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 5111, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", v36, v37, (char)"addCrumbsToPrefilterResult");
          int32x4_t v49 = *(CWIDCrumbBank ***)(*((void *)this + 4) + 8 * v48);
        }
        Recognizer::addCrumbsToPrefilterResult(v49, *((unsigned char *)this + 288), *((const PrefilterResult **)this + 67), *((_DWORD *)this + 137), *((PrefilterResult **)this + 66));
        ++v48;
      }
      while (v48 < *((unsigned int *)this + 10));
    }
    uint64_t v50 = (PrefilterResult *)*((void *)this + 66);
    return (ConstrainedTransAccMgr *)PrefilterResult::setComplete(v50);
  }
  return result;
}

uint64_t RecogController::finishRecognizeOne(uint64_t a1, MemChunkRegion *a2)
{
  *(unsigned char *)(a1 + 897) = 1;
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 16;
    do
    {
      uint64_t v8 = *(Recognizer **)(*(void *)(a1 + 32) + 8 * v6);
      if (v8) {
        RecognizerResults = Recognizer::makeRecognizerResults(v8, (LatticeStats *)*(unsigned __int8 *)(a1 + 288), 1);
      }
      else {
        RecognizerResults = FstCore::makeRecognizerResults(*(FstCore **)(*(void *)(a1 + 48) + 8 * v6), (LatticeStats *)*(unsigned __int8 *)(a1 + 288));
      }
      unint64_t v10 = RecognizerResults;
      uint64_t v11 = *(uint64_t **)(a1 + 904);
      if (v11)
      {
        unsigned int v12 = *(int32x2_t **)(*(void *)(a1 + 32) + 8 * v6);
        if (v12)
        {
          int v13 = (NetMgr *)(*(void *)&v12[35] + 16);
          uint64_t v14 = *v11 + v5;
          LODWORD(v72[0]) = 0;
          Recognizer::getRecognizerStats(v12, v14, v14 + 176, v14 + 328, v14 + 752, v14 + 928, (int32x2_t *)(v14 + 1080), v72, (_DWORD *)(v14 + 1508), (_DWORD *)(v14 + 1512), (_DWORD *)(v14 + 1516), (void *)(v14 + 1520), (void *)(v14 + 1528), (_DWORD *)(v14 + 1536), (_DWORD *)(v14 + 1540), (void *)(v14 + 1544), v14 + 1552);
          *(_DWORD *)(v14 + 1504) = LODWORD(v72[0]) == 2;
          NetMgr::getNetMgrStats(v13, (NetStats *)(v14 + 360), (NetStats *)(v14 + 1112));
        }
        else
        {
          uint64_t v15 = *v11;
          uint64_t v14 = v15 + 2368 * v6;
          uint64_t v16 = (int64x2_t *)(v15 + v5);
          LODWORD(v72[0]) = 0;
          FstCore::getRecognizerStats(*(int32x2_t **)(*(void *)(a1 + 48) + 8 * v6), v15 + v5, (LMStats *)(v15 + v5 + 176), v15 + v5 + 328, v15 + v5 + 752, (LMStats *)(v15 + v5 + 928), (int32x2_t *)(v15 + v5 + 1080), v72, (_DWORD *)(v15 + v5 + 1508), &v16[94].i32[2], &v16[94].i32[3], (int64x2_t *)v16[95].i64, &v16[95].i64[1], (int64x2_t *)v16[96].i32, &v16[96].i32[1], &v16[96].i64[1], (uint64_t)v16[97].i64);
          FstCore::getFstStats(*(FstCore **)(*(void *)(a1 + 48) + 8 * v6), (FstStats *)&v16[29], v16 + 76);
          v16[94].i32[0] = LODWORD(v72[0]) == 2;
        }
        uint64_t v17 = (int64x2_t *)(*(void *)(a1 + 864) + v7);
        int64x2_t v18 = *v17;
        *(int64x2_t *)(v14 + 720) = v17[-1];
        *(int64x2_t *)(v14 + 736) = v18;
        uint64_t v19 = (int64x2_t *)(*(void *)(a1 + 816) + v7);
        int64x2_t v20 = vsubq_s64(*v19, *v17);
        *(int64x2_t *)(v14 + 1472) = vsubq_s64(v19[-1], v17[-1]);
        *(int64x2_t *)(v14 + 148DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v20;
      }
      uint64_t v21 = *(Recognizer **)(*(void *)(a1 + 32) + 8 * v6);
      if (v21)
      {
        Recognizer::endTopRecSyncRecog(v21);
      }
      else
      {
        FstCore::endTopRecSyncRecog(*(FstCore **)(*(void *)(a1 + 48) + 8 * v6));
        RecogCtlMgr::releaseVirtMap(RecogCtlMgr::smpRecogCtlMgr, v22);
      }
      Latch<MemChunkRegion,LatchAdapter>::Latch(v72, (uint64_t)&gGlobalMemChunkRegion);
      unsigned int v23 = *((_DWORD *)a2 + 2);
      if (v23 == *((_DWORD *)a2 + 3))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)a2, 1, 1);
        unsigned int v23 = *((_DWORD *)a2 + 2);
      }
      *(void *)(*(void *)a2 + 8 * v23) = v10;
      *((_DWORD *)a2 + 2) = v23 + 1;
      Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v72);
      ++v6;
      unint64_t v3 = *(unsigned int *)(a1 + 40);
      v5 += 2368;
      v7 += 32;
    }
    while (v6 < v3);
  }
  if (*(void *)(a1 + 232))
  {
    (*(void (**)(void))(**(void **)(a1 + 248) + 48))(*(void *)(a1 + 248));
    uint64_t v24 = *(void *)(a1 + 448);
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 72))(v24);
    }
    DgnDelete<UttFeatureArraySynchronizedArray>(*(void *)(a1 + 240));
    *(void *)(a1 + 240) = 0;
    LODWORD(v3) = *(_DWORD *)(a1 + 40);
  }
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  if (v3)
  {
    unint64_t v25 = 0;
    do
    {
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(v26 + 8 * v25);
      if (v27)
      {
        Recognizer::setConstraint(*(Constraint ***)(v26 + 8 * v25), 0);
        unsigned int v28 = v84;
        if (v84 == HIDWORD(v84))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v83, 1, 1);
          unsigned int v28 = v84;
        }
        uint64_t v29 = (_OWORD *)(v27 + 2024);
        unint64_t v30 = (_OWORD *)(v83 + 32 * v28);
        long long v31 = v29[1];
        _OWORD *v30 = *v29;
        v30[1] = v31;
        LODWORD(v84) = v28 + 1;
        unsigned int v32 = v82;
        if (v82 == HIDWORD(v82))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v81, 1, 1);
          unsigned int v32 = v82;
        }
        uint64_t v33 = (_OWORD *)(v81 + 32 * v32);
        long long v34 = v29[3];
        *uint64_t v33 = v29[2];
        v33[1] = v34;
        LODWORD(v82) = v32 + 1;
        unsigned int v35 = v80;
        if (v80 == HIDWORD(v80))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v79, 1, 1);
          unsigned int v35 = v80;
        }
        uint64_t v36 = (_OWORD *)(v79 + 32 * v35);
        long long v37 = v29[11];
        _OWORD *v36 = v29[10];
        v36[1] = v37;
        LODWORD(v80) = v35 + 1;
        unsigned int v38 = v78;
        if (v78 == HIDWORD(v78))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v77, 1, 1);
          unsigned int v38 = v78;
        }
        uint64_t v39 = (_OWORD *)(v77 + 32 * v38);
        long long v40 = v29[5];
        _OWORD *v39 = v29[4];
        v39[1] = v40;
        LODWORD(v7DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v38 + 1;
        unsigned int v41 = v76;
        if (v76 == HIDWORD(v76))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v75, 1, 1);
          unsigned int v41 = v76;
        }
        long long v42 = (_OWORD *)(v75 + 32 * v41);
        long long v43 = v29[7];
        *long long v42 = v29[6];
        v42[1] = v43;
        LODWORD(v76) = v41 + 1;
        unsigned int v44 = v74;
        if (v74 == HIDWORD(v74))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v73, 1, 1);
          unsigned int v44 = v74;
        }
        uint64_t v45 = v73;
        uint64_t v46 = v44;
        long long v47 = v29[8];
        long long v48 = v29[9];
      }
      else
      {
        FstCore::setConstraint(*(Constraint ***)(*(void *)(a1 + 48) + 8 * v25), 0);
        uint64_t v49 = *(void *)(*(void *)(a1 + 48) + 8 * v25);
        unsigned int v50 = v84;
        uint64_t v51 = v49;
        if (v84 == HIDWORD(v84))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v83, 1, 1);
          unsigned int v50 = v84;
          uint64_t v51 = *(void *)(*(void *)(a1 + 48) + 8 * v25);
        }
        uint64_t v52 = (_OWORD *)(v83 + 32 * v50);
        long long v53 = *(_OWORD *)(v49 + 512);
        *uint64_t v52 = *(_OWORD *)(v49 + 496);
        v52[1] = v53;
        LODWORD(v84) = v50 + 1;
        unsigned int v54 = v82;
        uint64_t v55 = v51;
        if (v82 == HIDWORD(v82))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v81, 1, 1);
          unsigned int v54 = v82;
          uint64_t v55 = *(void *)(*(void *)(a1 + 48) + 8 * v25);
        }
        uint64_t v56 = (_OWORD *)(v81 + 32 * v54);
        long long v57 = *(_OWORD *)(v51 + 544);
        *uint64_t v56 = *(_OWORD *)(v51 + 528);
        v56[1] = v57;
        LODWORD(v82) = v54 + 1;
        unsigned int v58 = v80;
        uint64_t v59 = v55;
        if (v80 == HIDWORD(v80))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v79, 1, 1);
          unsigned int v58 = v80;
          uint64_t v59 = *(void *)(*(void *)(a1 + 48) + 8 * v25);
        }
        uint64_t v60 = (_OWORD *)(v79 + 32 * v58);
        long long v61 = *(_OWORD *)(v55 + 672);
        _OWORD *v60 = *(_OWORD *)(v55 + 656);
        v60[1] = v61;
        LODWORD(v80) = v58 + 1;
        unsigned int v62 = v78;
        uint64_t v63 = v59;
        if (v78 == HIDWORD(v78))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v77, 1, 1);
          unsigned int v62 = v78;
          uint64_t v63 = *(void *)(*(void *)(a1 + 48) + 8 * v25);
        }
        uint64_t v64 = (_OWORD *)(v77 + 32 * v62);
        long long v65 = *(_OWORD *)(v59 + 576);
        *uint64_t v64 = *(_OWORD *)(v59 + 560);
        v64[1] = v65;
        LODWORD(v7DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v62 + 1;
        unsigned int v66 = v76;
        uint64_t v67 = v63;
        if (v76 == HIDWORD(v76))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v75, 1, 1);
          unsigned int v66 = v76;
          uint64_t v67 = *(void *)(*(void *)(a1 + 48) + 8 * v25);
        }
        uint64_t v68 = (_OWORD *)(v75 + 32 * v66);
        long long v69 = *(_OWORD *)(v63 + 608);
        *uint64_t v68 = *(_OWORD *)(v63 + 592);
        v68[1] = v69;
        LODWORD(v76) = v66 + 1;
        unsigned int v44 = v74;
        if (v74 == HIDWORD(v74))
        {
          DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)&v73, 1, 1);
          unsigned int v44 = v74;
        }
        uint64_t v45 = v73;
        uint64_t v46 = v44;
        long long v47 = *(_OWORD *)(v67 + 624);
        long long v48 = *(_OWORD *)(v67 + 640);
      }
      uint64_t v70 = (_OWORD *)(v45 + 32 * v46);
      _OWORD *v70 = v47;
      v70[1] = v48;
      LODWORD(v74) = v44 + 1;
      ++v25;
    }
    while (v25 < *(unsigned int *)(a1 + 40));
  }
  if (*(void *)(a1 + 904))
  {
    *(void *)(*(void *)(a1 + 904) + 112DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = MemChunkRegion::getAndResetInternalLocalMaxAllocBytes(0, a2);
    memset(v72, 0, sizeof(v72));
    SnapTime::recordTime((SnapTime *)v72, 1, 1, 1, 1);
    RecogStats::initRecognitionPhaseTimes(*(void *)(a1 + 904), (int64x2_t *)(a1 + 160), (int64x2_t *)(a1 + 192), (uint64_t)&v83, (uint64_t)&v81, (uint64_t)&v79, (uint64_t)&v77, (uint64_t)&v75, (uint64_t)&v73, (uint64_t *)v72);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v73);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v75);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v77);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v79);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v81);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v83);
}

void sub_213FF3C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a24);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a26);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a28);
  DgnIArray<Utterance *>::~DgnIArray(v28 - 136);
  DgnIArray<Utterance *>::~DgnIArray(v28 - 120);
  DgnIArray<Utterance *>::~DgnIArray(v28 - 104);
  _Unwind_Resume(a1);
}

void FstCore::getRecognizerStats(int32x2_t *a1, uint64_t a2, LMStats *this, uint64_t a4, uint64_t a5, LMStats *a6, int32x2_t *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, void *a12, void *a13, _DWORD *a14, _DWORD *a15, void *a16, uint64_t a17)
{
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0;
  *a16 = 0;
  PelStats::operator=(a2, (uint64_t)&a1[32]);
  PelStats::operator=(a5, (uint64_t)&a1[10]);
  PelStats::operator-=(a5, (uint64_t)&a1[32]);
  SearchStats::operator=(a4, (uint64_t)&a1[58]);
  SearchStats::operator=((uint64_t)a7, (uint64_t)&a1[54]);
  a7[1].i32[0] = a1[59].i32[0];
  SearchStats::operator-=(a7, a1 + 58);
  a7[1].i32[0] = a1[55].i32[0];
  *a8 = a1[6].i32[0];
  LatticeStats::operator=(a17, (uint64_t)&a1[86]);
  *a14 = a1[137].i32[0];
  *a15 = a1[137].i32[1];
}

double FstCore::getFstStats(FstCore *this, FstStats *a2, int64x2_t *a3)
{
  uint64_t v5 = (int64x2_t *)((char *)this + 1376);
  FstStats::operator=((uint64_t)a2, (uint64_t)this + 1376);
  FstStats::operator=((uint64_t)a3, (uint64_t)this + 1120);

  *(void *)&double result = FstStats::operator-=(a3, v5).u64[0];
  return result;
}

double Recognizer::getRecognizerStats(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, void *a12, void *a13, _DWORD *a14, _DWORD *a15, void *a16, uint64_t a17)
{
  uint64_t v23 = (uint64_t)&a1[155];
  PelStats::operator=(a2, (uint64_t)&a1[155]);
  LMStats::operator=(a3, (uint64_t)&a1[177]);
  SearchStats::operator=(a4, (uint64_t)&a1[196]);
  PelStats::operator=(a5, (uint64_t)&a1[110]);
  PelStats::operator-=(a5, v23);
  LMStats::operator=(a6, (uint64_t)&a1[132]);
  LMStats::operator-=(a6, (uint64_t)&a1[177]);
  SearchStats::operator=((uint64_t)a7, (uint64_t)&a1[151]);
  a7[1].i32[0] = a1[197].i32[0];
  SearchStats::operator-=(a7, a1 + 196);
  a7[1].i32[0] = a1[152].i32[0];
  *a8 = a1[43].i32[1];
  *a9 = a1[288].i32[1];
  *a10 = a1[289].i32[0];
  *a11 = a1[289].i32[1];
  *a12 = a1[290];
  *a13 = a1[291];
  *a14 = a1[292].i32[0];
  *a15 = a1[292].i32[1];
  *a16 = a1[201];

  return LatticeStats::operator=(a17, (uint64_t)&a1[202]);
}

int32x2_t NetMgr::getNetMgrStats(NetMgr *this, NetStats *a2, NetStats *a3)
{
  uint64_t v5 = (char *)this + 302680;
  NetStats::operator=((uint64_t)a2, (uint64_t)this + 302680);
  NetStats::operator=((uint64_t)a3, (uint64_t)this + 302576);

  return NetStats::operator-=((uint64_t)a3, (uint64_t)v5);
}

uint64_t RecogController::getReproMgr(RecogController *this)
{
  return *((void *)this + 111);
}

uint64_t RecogController::abortRecognizeOne(RecogController *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + 897) = 1;
  if (*((_DWORD *)this + 10))
  {
    unint64_t v9 = 0;
    do
    {
      if (!*(void *)(*((void *)this + 4) + 8 * v9)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/recogctl.cpp", 5360, (uint64_t)"recogctl/recogctl", 4, (uint64_t)"%.500s", a7, a8, (char)"abortRecognizeOne");
      }
      char v10 = (*(uint64_t (**)(RecogController *))(*(void *)this + 40))(this);
      uint64_t v11 = *(Recognizer **)(*((void *)this + 4) + 8 * v9);
      if ((v10 & 1) == 0)
      {
        Recognizer::endTopRecPassSyncRecog((uint64_t)v11);
        uint64_t v11 = *(Recognizer **)(*((void *)this + 4) + 8 * v9);
      }
      Recognizer::endTopRecSyncRecog(v11);
      Recognizer::setConstraint(*(Constraint ***)(*((void *)this + 4) + 8 * v9++), 0);
    }
    while (v9 < *((unsigned int *)this + 10));
  }
  if (*((void *)this + 29))
  {
    (*(void (**)(void))(**((void **)this + 31) + 48))(*((void *)this + 31));
    DgnDelete<UttFeatureArraySynchronizedArray>(*((void *)this + 30));
    *((void *)this + 30) = 0;
  }
  uint64_t result = (*(uint64_t (**)(RecogController *))(*(void *)this + 40))(this);
  if ((result & 1) == 0)
  {
    uint64_t v13 = *((void *)this + 53);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 56))(v13);
    }
    uint64_t v14 = *((void *)this + 62);
    if (v14)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
      DgnDelete<SynchronizedArray<ScoreFixArray>>(*((void *)this + 63));
      *((void *)this + 63) = 0;
    }
    uint64_t v15 = *((void *)this + 55);
    if (!v15 || v15 == *((void *)this + 56))
    {
      *((void *)this + 55) = 0;
      uint64_t v16 = *((void *)this + 59);
      if (*((void *)this + 60) == v16)
      {
LABEL_20:
        *((void *)this + 59) = 0;
        *((_DWORD *)this + 122) = 0;
        *((void *)this + 57) = 0;
        uint64_t v17 = *((void *)this + 56);
        if (v17)
        {
          (*(void (**)(uint64_t))(*(void *)v17 + 72))(v17);
          DgnDelete<FrameTransformer>(*((void (****)(void))this + 56));
          *((void *)this + 56) = 0;
        }
        DgnDelete<UttFeatureArraySynchronizedArray>(*((void *)this + 60));
        *((void *)this + 60) = 0;
        uint64_t result = (uint64_t)DgnDelete<ConstrainedTransAccMgr>(*((ConstrainedTransAccMgr **)this + 64));
        *((void *)this + 64) = 0;
        *((_DWORD *)this + 123) = 0;
        *((void *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
        return result;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 72))(v15);
      DgnDelete<FrameTransformer>(*((void (****)(void))this + 55));
      *((void *)this + 55) = 0;
      uint64_t v16 = *((void *)this + 59);
    }
    DgnDelete<UttFeatureArraySynchronizedArray>(v16);
    goto LABEL_20;
  }
  return result;
}

uint64_t RecogController::makePartialResult(uint64_t this)
{
  if (*(_DWORD *)(this + 40))
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    long long v37 = (_DWORD *)(this + 120);
    uint64_t v34 = this + 136;
    while (1)
    {
      *(_DWORD *)(*(void *)(v1 + 72) + 16 * v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      *(_DWORD *)(*(void *)(v1 + 88) + 16 * v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      if (*(void *)(*(void *)(v1 + 32) + 8 * v2)) {
        break;
      }
      *(_DWORD *)(*(void *)(v1 + 104) + 4 * v2) = FstCore::makePartialResult(*(void *)(*(void *)(v1 + 48) + 8 * v2), (uint64_t)v37, v34);
      unsigned int v9 = *(_DWORD *)(v1 + 128);
      if (v9)
      {
        for (unsigned int i = 0; i < v9; ++i)
        {
          uint64_t v11 = *(void *)(v1 + 88) + 16 * v2;
          uint64_t v13 = (_DWORD *)(v11 + 8);
          uint64_t v12 = *(unsigned int *)(v11 + 8);
          if (v12 == *(_DWORD *)(v11 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*(void *)(v1 + 88) + 16 * v2, 1, 1);
            uint64_t v12 = *v13;
          }
          *(_DWORD *)(*(void *)v11 + 4 * v12) = 1;
          ++*v13;
          unsigned int v9 = *(_DWORD *)(v1 + 128);
        }
      }
LABEL_20:
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      if (v9)
      {
        unint64_t v14 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        uint64_t v15 = 88;
        while (1)
        {
          unsigned int Root = VocMgr::getRoot((VocMgr *)VocMgr::smpVocMgr, *(unsigned int *)(*(void *)v37 + v15));
          if (Root >> 25 == 126) {
            __int16 v17 = 127;
          }
          else {
            __int16 v17 = Root >> 25;
          }
          uint64_t v18 = *(void *)(v1 + 120) + v15;
          uint64_t v19 = *(void *)(v18 - 72);
          int v20 = *(_DWORD *)(v18 - 64);
          uint64_t v21 = *(void *)(v1 + 72) + 16 * v2;
          uint64_t v23 = (unsigned int *)(v21 + 8);
          unsigned int v22 = *(_DWORD *)(v21 + 8);
          if (v22 == (unint64_t)*(unsigned int *)(v21 + 12))
          {
            DgnArray<RecogResultToken>::reallocElts(*(void *)(v1 + 72) + 16 * v2, 1, 1);
            unsigned int v22 = *v23;
          }
          uint64_t v24 = *(void *)v21 + 96 * v22;
          *(_DWORD *)uint64_t v24 = Root >> 25 == 126;
          *(_WORD *)(v24 + 4) = v17;
          *(_DWORD *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
          *(_DWORD *)(v24 + 12) = Root & 0xFFFFFF;
          *(_DWORD *)(v24 + 16) = 16777212;
          *(void *)(v24 + 20) = v19;
          *(_DWORD *)(v24 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v20;
          *(void *)(v24 + 32) = 0;
          *(void *)(v24 + 40) = 0;
          *(void *)(v24 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
          *(void *)(v24 + 56) = 0xFFFFFFFF00000000;
          *(void *)(v24 + 64) = 0;
          *(void *)(v24 + 72) = 0;
          *(unsigned char *)(v24 + 80) = 0;
          *(void *)(v24 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
          *(_DWORD *)(v24 + 84) = 0;
          ++*v23;
          int v25 = *(_DWORD *)(*(void *)(*(void *)(v1 + 88) + 16 * v2) + 4 * v14);
          if (v25 == 3) {
            goto LABEL_36;
          }
          if (v25 == 2) {
            goto LABEL_33;
          }
          if (v25 == 1) {
            break;
          }
LABEL_39:
          ++v14;
          v15 += 112;
          if (v14 >= *(unsigned int *)(v1 + 128)) {
            goto LABEL_42;
          }
        }
        uint64_t v26 = v41;
        if (v41 == (unint64_t)HIDWORD(v41))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v40, 1, 1);
          uint64_t v26 = v41;
        }
        *(_DWORD *)(v40 + 4 * v26) = Root;
        LODWORD(v41) = v41 + 1;
        v35 += *(_DWORD *)(*(void *)v37 + v15 - 68) + *(_DWORD *)(*(void *)v37 + v15 - 64);
LABEL_33:
        uint64_t v27 = v43;
        if (v43 == (unint64_t)HIDWORD(v43))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v42, 1, 1);
          uint64_t v27 = v43;
        }
        *(_DWORD *)(v42 + 4 * v27) = Root;
        LODWORD(v43) = v43 + 1;
        LODWORD(v36) = *(_DWORD *)(*(void *)v37 + v15 - 68) + v36 + *(_DWORD *)(*(void *)v37 + v15 - 64);
LABEL_36:
        uint64_t v28 = v45;
        if (v45 == (unint64_t)HIDWORD(v45))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v44, 1, 1);
          uint64_t v28 = v45;
        }
        *(_DWORD *)(v44 + 4 * v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = Root;
        LODWORD(v45) = v45 + 1;
        HIDWORD(v36) += *(_DWORD *)(*(void *)v37 + v15 - 68) + *(_DWORD *)(*(void *)v37 + v15 - 64);
        goto LABEL_39;
      }
      uint64_t v36 = 0;
      unsigned int v35 = 0;
LABEL_42:
      uint64_t v29 = *(uint64_t **)(v1 + 904);
      if (v29)
      {
        uint64_t v30 = *v29;
        unsigned int v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 160))(v1, v2);
        int64x2_t v38 = 0u;
        int64x2_t v39 = 0u;
        SnapTime::recordTime((SnapTime *)&v38, 1, 1, 1, 1);
        unsigned int v32 = *(int64x2_t **)(v1 + 904);
        int64x2_t v33 = vsubq_s64(v39, v32[69]);
        int64x2_t v38 = vsubq_s64(v38, v32[68]);
        int64x2_t v39 = v33;
        PRStats::recordPartialResult(v30 + 2368 * v2 + 1960, (uint64_t)&v44, v31 * (unint64_t)HIDWORD(v36), v38.i64);
        PRStats::recordPartialResult(v30 + 2368 * v2 + 2096, (uint64_t)&v42, v31 * (unint64_t)v36, v38.i64);
        PRStats::recordPartialResult(v30 + 2368 * v2 + 2232, (uint64_t)&v40, v31 * (unint64_t)v35, v38.i64);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v40);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v42);
      this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v44);
      if (++v2 >= (unint64_t)*(unsigned int *)(v1 + 40)) {
        return this;
      }
    }
    int v3 = *(_DWORD *)(v1 + 64);
    if (v3)
    {
      uint64_t v4 = *(void *)(v1 + 520);
      if (v3 == 2)
      {
        uint64_t v5 = *(void *)(v1 + 424);
        if (v5)
        {
          uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 176))(v5);
          if (v6)
          {
            uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v1 + 424) + 184))(*(void *)(v1 + 424));
            int v8 = (*(uint64_t (**)(void))(**(void **)(v1 + 424) + 96))(*(void *)(v1 + 424));
LABEL_19:
            *(_DWORD *)(*(void *)(v1 + 104) + 4 * v2) = Recognizer::makePartialResult(*(void *)(*(void *)(v1 + 32) + 8 * v2), v4, v6, v7, v8, v37, v34, *(void *)(v1 + 88) + 16 * v2);
            unsigned int v9 = *(_DWORD *)(v1 + 128);
            goto LABEL_20;
          }
          uint64_t v7 = 0;
LABEL_18:
          int v8 = -16;
          goto LABEL_19;
        }
      }
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v4 = 0;
    }
    uint64_t v6 = 0;
    goto LABEL_18;
  }
  return this;
}

void sub_213FF482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void RecogControllerBase::makeRecogController(uint64_t a1, const RecogSpec *a2, uint64_t a3, PrefiltererSearchParamSet *a4, SearchCrossLayerParamSet *a5)
{
  if (a1)
  {
    uint64_t v10 = MemChunkAlloc(0x30uLL, 0);
    ThreadedRecogController::ThreadedRecogController(v10, a1, a2, a3, a4, a5);
  }
  else
  {
    uint64_t v11 = MemChunkAlloc(0x420uLL, 0);
    RecogController::RecogController((RecogController *)v11, a2, a3, a4, a5);
  }
}

uint64_t RecogControllerBase::maybeStartRecogController(RecogControllerBase *this, DgnEvent *a2)
{
  return 0;
}

uint64_t RecogController::getNumRecogLayers(RecogController *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t RecogController::calledStartRecognizeOne(RecogController *this)
{
  return *((unsigned __int8 *)this + 896);
}

uint64_t RecogController::calledFinishRecognizeOne(RecogController *this)
{
  return *((unsigned __int8 *)this + 897);
}

uint64_t RecogController::calledExtractPrefilterResult(RecogController *this)
{
  return *((unsigned __int8 *)this + 898);
}

uint64_t RecogController::getPartialResult(RecogController *this, unsigned int a2)
{
  return *((void *)this + 9) + 16 * a2;
}

uint64_t RecogController::getPartialTokenConfidences(RecogController *this, unsigned int a2)
{
  return *((void *)this + 11) + 16 * a2;
}

uint64_t RecogController::getPartialResultScore(RecogController *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 13) + 4 * a2);
}

uint64_t RecogController::getPartialResultMicrosecPerRecogFrame(RecogController *this, unsigned int a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 4) + 8 * a2);
  if (v2) {
    int v3 = (unsigned int *)(v2 + 356);
  }
  else {
    int v3 = (unsigned int *)(*(void *)(*((void *)this + 6) + 8 * a2) + 56);
  }
  return *v3;
}

uint64_t RecogController::getContinuationInterval(RecogController *this)
{
  return *((unsigned int *)this + 38);
}

BOOL RecogController::isUsingPrefilterer(RecogController *this, const Prefilterer *a2)
{
  return *((void *)this + 53) == (void)a2;
}

uint64_t RecogController::getUser(RecogController *this)
{
  return *(void *)(*(void *)(ModelMgr::smpModelMgr + 40) + 8 * *((unsigned __int16 *)this + 6));
}

uint64_t RecogController::getOnlineCTPelScorer(RecogController *this)
{
  return *(void *)(*((void *)this + 31) + 96);
}

uint64_t RecogController::setPrefPelScoreCacheData(uint64_t this, PelScoreCacheData *a2)
{
  *(void *)(this + 256) = a2;
  return this;
}

uint64_t RecogController::setRecogPelScoreCacheData(uint64_t this, PelScoreCacheData *a2)
{
  *(void *)(this + 264) = a2;
  return this;
}

uint64_t RecogController::getPrefPelScores(RecogController *this)
{
  return *((void *)this + 32);
}

uint64_t RecogController::getRecogPelScores(RecogController *this)
{
  return *((void *)this + 33);
}

uint64_t RecogController::getRecogStats(RecogController *this)
{
  return *((void *)this + 113);
}

uint64_t RecogController::getPrefiltererSearchParamSet(RecogController *this)
{
  return *((void *)this + 114);
}

uint64_t RecogController::getSearchCrossLayerParamSet(RecogController *this)
{
  return *((void *)this + 115);
}

uint64_t RecogController::getSearchParamSet(RecogController *this, unsigned int a2)
{
  return *(void *)(*(void *)(*((void *)this + 2) + 8 * a2) + 296);
}

uint64_t RecogController::isThreaded(RecogController *this)
{
  return 0;
}

void PRStats::~PRStats(PRStats *this)
{
}

void *DgnArray<PRStatsItem>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 96 * v2 - 48;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a1 + v3);
      v3 -= 96;
    }
    while (v3 != -48);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void *DgnIOwnArray<RecogSpecLayer *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<RecogSpecLayer>(*(RecogSpecLayer **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

RecogSpecLayer *DgnIOwnArray<RecogSpecLayer *>::destructAt(RecogSpecLayer *result, int a2, int a3)
{
  if (a3 + a2 > a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = a3 + a2 - 1;
    do
    {
      uint64_t result = DgnDelete<RecogSpecLayer>(*(RecogSpecLayer **)(*(void *)v3 + 8 * v5));
      *(void *)(*(void *)v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

unsigned int *DgnIOwnArray<RecogSpecLayer *>::copyArraySlice(unsigned int *result, void *a2, int a3, unsigned int a4)
{
  uint64_t v7 = result;
  unsigned int v8 = result[3];
  if (a4 > v8) {
    uint64_t result = (unsigned int *)DgnPrimArray<unsigned long long>::reallocElts((uint64_t)result, a4 - v8, 0);
  }
  uint64_t v9 = v7[2];
  if (v9 <= a4)
  {
    if (v9 < a4)
    {
      do
        *(void *)(*(void *)v7 + 8 * v9++) = 0;
      while (a4 != v9);
    }
  }
  else
  {
    uint64_t result = (unsigned int *)DgnIOwnArray<RecogSpecLayer *>::destructAt((RecogSpecLayer *)v7, a4, v9 - a4);
  }
  v7[2] = a4;
  if (a4)
  {
    uint64_t v10 = 0;
    do
    {
      *(void *)(*(void *)v7 + 8 * v10) = *(void *)(*a2 + 8 * (a3 + v10));
      ++v10;
    }
    while (a4 != v10);
  }
  return result;
}

void *DgnArray<RecogLayerStats>::releaseAll(uint64_t a1)
{
  DgnArray<RecogLayerStats>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void DgnArray<RecogLayerStats>::destructAt(void *a1, int a2, int a3)
{
  int v3 = a3 + a2;
  if (a3 + a2 > a2)
  {
    uint64_t v5 = v3;
    uint64_t v6 = a2;
    uint64_t v7 = 2368 * v3 - 136;
    do
    {
      --v5;
      unsigned int v8 = (PRStats *)(*a1 + v7);
      PRStats::~PRStats(v8);
      PRStats::~PRStats((PRStats *)((char *)v8 - 136));
      PRStats::~PRStats((PRStats *)((char *)v8 - 272));
      v7 -= 2368;
    }
    while (v5 > v6);
  }
}

uint64_t Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4588;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 24;
  }
  else {
    int v7 = 32;
  }
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_213FF4DA4(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash(uint64_t a1)
{
  Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash(a1);

  JUMPOUT(0x216698730);
}

void *DgnIOwnArray<Recognizer *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<Recognizer>(*(void (****)(void))(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void *DgnIOwnArray<FstCore *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<FstCore>(*(FstCore **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

uint64_t Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4588;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

unint64_t DgnArray<RecogLayerStats>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  unsigned int v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 2368 * v6, 2368 * v5, 2368 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x940;
  *(void *)a1 = v8;
  return result;
}

unint64_t DgnArray<SnapTime>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7 = result;
  *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t result = DgnArray<PrefilterResultFrame>::reallocElts(result, a4 - v8, 0);
    unsigned int v9 = *(_DWORD *)(v7 + 8);
  }
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)v7;
  unsigned int v13 = a4;
  unsigned int v10 = v9;
  do
  {
    unint64_t v14 = (long long *)(v11 + 32 * a3);
    long long v15 = *v14;
    long long v16 = v14[1];
    __int16 v17 = (_OWORD *)(v12 + 32 * v10);
    *__int16 v17 = v15;
    v17[1] = v16;
    ++v10;
    ++a3;
    --v13;
  }
  while (v13);
LABEL_6:
  if (v10 < a4)
  {
    unint64_t v18 = a4 - (unint64_t)v10;
    uint64_t v19 = 32 * v10;
    do
    {
      int v20 = (_OWORD *)(*(void *)v7 + v19);
      _OWORD *v20 = 0uLL;
      v20[1] = 0uLL;
      v19 += 32;
      --v18;
    }
    while (v18);
  }
  *(_DWORD *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a4;
  return result;
}

uint64_t **Hash<EmbStateSpec,EmbStateSpec,EmbStateSpecToActiveWordScope,ActiveWord *>::findBucket(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = ((*(void *)a2 >> 19) & 0x1FFFE000) + v2;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    unsigned int v5 = (-1640531527 * v3) >> -(char)v4;
  }
  else {
    unsigned int v5 = 0;
  }
  unint64_t result = (uint64_t **)(*(void *)(a1 + 80) + 8 * v5);
  unint64_t v7 = *result;
  if (*result)
  {
    do
    {
      unsigned int v8 = (uint64_t **)v7;
      if (*((_DWORD *)v7 + 2) == v3
        && ((*(uint64_t *)((char *)v7 + 12) ^ *(void *)a2) & 0xFFFF00000000) == 0
        && *((_DWORD *)v7 + 5) == v2)
      {
        break;
      }
      unint64_t v7 = (uint64_t *)*v7;
      unint64_t result = v8;
    }
    while (*v8);
  }
  return result;
}

void MrecInitModule_arcgraph_fst(void)
{
  if (!gParDebugFstArcGraphIO)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFstArcGraphIO", byte_2140A838C, byte_2140A838C, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugFstArcGraphIO = (uint64_t)v1;
    int v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugFstArcGraphIO);
  }
}

void ArcGraph::~ArcGraph(PicMgr **this)
{
  this[31] = 0;
  DgnDelete<PhnMgr>(this[32]);
  this[32] = 0;
  if (*this) {
    DgnSharedMemSet::unrefDSMEx((DSMSetData **)*this, *((unsigned int *)this + 2));
  }
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)(this + 29));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 27));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 19));
  FileHistory::~FileHistory((FileHistory *)(this + 14));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 7));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 5));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 3));
}

PhnMgr *DgnDelete<PhnMgr>(PhnMgr *result)
{
  if (result)
  {
    PhnMgr::~PhnMgr(result);
    return (PhnMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

void ArcGraph::printSize(ArcGraph *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2029, (DgnString *)&v155);
  if (v156) {
    long long v16 = (void *)v155;
  }
  else {
    long long v16 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A838C, a3, &unk_2140A838C, v16);
  DgnString::~DgnString((DgnString *)&v155);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A838C);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v22 = (a3 + 1);
  uint64_t v152 = a3;
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2030, (DgnString *)&v155);
  if (v156) {
    uint64_t v28 = (void *)v155;
  }
  else {
    uint64_t v28 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &unk_2140A838C, v23, v23, v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2031, (DgnString *)&v155);
  if (v156) {
    int64x2_t v33 = (void *)v155;
  }
  else {
    int64x2_t v33 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, v22, &unk_2140A838C, v23, v23, v33, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  uint64_t v34 = sizeObject((uint64_t)this + 16, 0);
  uint64_t v35 = sizeObject((uint64_t)this + 16, 1);
  uint64_t v36 = sizeObject((uint64_t)this + 16, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2033, (DgnString *)&v155);
  if (v156) {
    uint64_t v41 = (void *)v155;
  }
  else {
    uint64_t v41 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, v22, &unk_2140A838C, v23, v23, v41, v34, v35, v36);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v34;
  *a5 += v35;
  *a6 += v36;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2035, (DgnString *)&v155);
  if (v156) {
    uint64_t v46 = (void *)v155;
  }
  else {
    uint64_t v46 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v22, &unk_2140A838C, v23, v23, v46, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v155);
  ++*a4;
  ++*a5;
  uint64_t v47 = sizeObject((uint64_t)this + 112, 0);
  uint64_t v48 = sizeObject((uint64_t)this + 112, 1);
  uint64_t v49 = sizeObject((uint64_t)this + 112, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2037, (DgnString *)&v155);
  if (v156) {
    unsigned int v54 = (void *)v155;
  }
  else {
    unsigned int v54 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v22, &unk_2140A838C, v23, v23, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2038, (DgnString *)&v155);
  if (v156) {
    uint64_t v59 = (void *)v155;
  }
  else {
    uint64_t v59 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v22, &unk_2140A838C, v23, v23, v59, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2040, (DgnString *)&v155);
  if (v156) {
    uint64_t v64 = (void *)v155;
  }
  else {
    uint64_t v64 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v22, &unk_2140A838C, v23, v23, v64, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2042, (DgnString *)&v155);
  if (v156) {
    long long v69 = (void *)v155;
  }
  else {
    long long v69 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v22, &unk_2140A838C, v23, v23, v69, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v70 = 12;
  }
  else {
    uint64_t v70 = 16;
  }
  uint64_t v71 = *((unsigned int *)this + 40);
  unsigned int v72 = *((_DWORD *)this + 41);
  if (v72 >= v71)
  {
    uint64_t v73 = 0;
    if ((int)v71 > 0) {
      v70 += 4 * (v71 - 1) + 4;
    }
    uint64_t v74 = v70 + 4 * (v72 - v71);
  }
  else
  {
    uint64_t v73 = 4 * v71;
    uint64_t v74 = v70;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2043, (DgnString *)&v155);
  if (v156) {
    uint64_t v79 = (void *)v155;
  }
  else {
    uint64_t v79 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v22, &unk_2140A838C, v23, v23, v79, v74, v70, v73);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v74;
  *a5 += v70;
  *a6 += v73;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2044, (DgnString *)&v155);
  if (v156) {
    uint64_t v84 = (void *)v155;
  }
  else {
    uint64_t v84 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v22, &unk_2140A838C, v23, v23, v84, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2045, (DgnString *)&v155);
  if (v156) {
    int v89 = (void *)v155;
  }
  else {
    int v89 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v22, &unk_2140A838C, v23, v23, v89, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2046, (DgnString *)&v155);
  if (v156) {
    uint64_t v94 = (void *)v155;
  }
  else {
    uint64_t v94 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v22, &unk_2140A838C, v23, v23, v94, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2047, (DgnString *)&v155);
  if (v156) {
    unsigned int v99 = (void *)v155;
  }
  else {
    unsigned int v99 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v22, &unk_2140A838C, v23, v23, v99, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2049, (DgnString *)&v155);
  if (v156) {
    uint64_t v104 = (void *)v155;
  }
  else {
    uint64_t v104 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, v22, &unk_2140A838C, v23, v23, v104, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v155);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2050, (DgnString *)&v155);
  if (v156) {
    unsigned int v109 = (void *)v155;
  }
  else {
    unsigned int v109 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v22, &unk_2140A838C, v23, v23, v109, 26, 26, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 26;
  *a5 += 26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2052, (DgnString *)&v155);
  if (v156) {
    int v114 = (void *)v155;
  }
  else {
    int v114 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v22, &unk_2140A838C, v23, v23, v114, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v115 = 12;
  }
  else {
    uint64_t v115 = 16;
  }
  uint64_t v116 = *((unsigned int *)this + 56);
  unsigned int v117 = *((_DWORD *)this + 57);
  if (v117 >= v116)
  {
    uint64_t v118 = 0;
    if ((int)v116 > 0) {
      v115 += 4 * (v116 - 1) + 4;
    }
    uint64_t v119 = v115 + 4 * (v117 - v116);
  }
  else
  {
    uint64_t v118 = 4 * v116;
    uint64_t v119 = v115;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2053, (DgnString *)&v155);
  if (v156) {
    int v124 = (void *)v155;
  }
  else {
    int v124 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v22, &unk_2140A838C, v23, v23, v124, v119, v115, v118);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v119;
  *a5 += v115;
  *a6 += v118;
  uint64_t v125 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 232, 0);
  uint64_t v126 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 232, 1);
  uint64_t v127 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 232, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2054, (DgnString *)&v155);
  if (v156) {
    uint64_t v132 = (void *)v155;
  }
  else {
    uint64_t v132 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v22, &unk_2140A838C, v23, v23, v132, v125, v126, v127);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v125;
  *a5 += v126;
  *a6 += v127;
  uint64_t v133 = (PicMgr *)*((void *)this + 31);
  if (v133)
  {
    unint64_t v154 = 0;
    unint64_t v155 = 0;
    unint64_t v153 = 0;
    PicMgr::printSize(v133, 0xFFFFFFFFLL, v22, &v155, &v154, &v153);
    *a4 += v155;
    *a5 += v154;
    *a6 += v153;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v134 = 4;
  }
  else {
    uint64_t v134 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2056, (DgnString *)&v155);
  if (v156) {
    int v139 = (void *)v155;
  }
  else {
    int v139 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v22, &unk_2140A838C, v23, v23, v139, v134, v134, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v134;
  *a5 += v134;
  uint64_t v140 = (PhnMgr *)*((void *)this + 32);
  if (v140)
  {
    unint64_t v154 = 0;
    unint64_t v155 = 0;
    unint64_t v153 = 0;
    PhnMgr::printSize(v140, 0xFFFFFFFFLL, v22, &v155, &v154, &v153);
    *a4 += v155;
    *a5 += v154;
    *a6 += v153;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v141 = 4;
  }
  else {
    uint64_t v141 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2058, (DgnString *)&v155);
  if (v156) {
    int v146 = (void *)v155;
  }
  else {
    int v146 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, v22, &unk_2140A838C, v23, v23, v146, v141, v141, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v141;
  *a5 += v141;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2059, (DgnString *)&v155);
  if (v156) {
    uint64_t v151 = (void *)v155;
  }
  else {
    uint64_t v151 = &unk_2140A838C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, v152, &unk_2140A838C, (35 - v152), (35 - v152), v151, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v155);
}

void sub_213FF5E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

double ArcGraph::lexToCWIDAC@<D0>(ArcGraph *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_DWORD *)a9 = ArcGraph::lexToCWID(this, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a9 + 4) = 0x3FFF;
  double result = NAN;
  *(_OWORD *)(a9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = xmmword_2140866D0;
  return result;
}

uint64_t ArcGraph::lexToCWID(ArcGraph *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *((unsigned __int16 *)this + 87), a3, a4, a5, a6, a7, a8)+ 48);
  if (*(_DWORD *)(v12 + 388) > a2 && *(unsigned char *)(*(void *)(v12 + 104) + a2)) {
    return *(_DWORD *)(*(void *)(v12 + 256) + 4 * a2) & 0xFFFFFF | (*((unsigned __int16 *)this + 87) << 25);
  }
  uint64_t result = 4244635645;
  if (a2 == 16777214) {
    return 4244635646;
  }
  if (a2 != 16777213)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2097, (uint64_t)"fst/arcgraph", 27, (uint64_t)"%u", v10, v11, a2);
    return 4211081215;
  }
  return result;
}

void ArcGraph::getNameAndHumanReadablePron(ArcGraph *this, unsigned int a2, DgnString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *((unsigned __int16 *)this + 87), (uint64_t)a3, a4, a5, a6, a7, a8)+ 48);
  if (*(_DWORD *)(v12 + 388) > a2 && *(unsigned char *)(*(void *)(v12 + 104) + a2))
  {
    DgnString::DgnString((DgnString *)&v23);
    WordList::getHumanReadablePron((WordList *)v12, a2, (DgnString *)&v23);
    DgnString::DgnString((DgnString *)v22, (const char *)(*(void *)(v12 + 224) + *(unsigned int *)(*(void *)(v12 + 200) + 4 * a2)));
    DgnString::DgnString((DgnString *)&v20);
    DgnTextFile::convertToDTFFormat((DgnTextFile *)v22, (const DgnString *)&v20, v13);
    if (v21) {
      uint64_t v17 = v20;
    }
    else {
      uint64_t v17 = &unk_2140A838C;
    }
    if (v24) {
      uint64_t v18 = v23;
    }
    else {
      uint64_t v18 = &unk_2140A838C;
    }
    DgnString::stringPrintf(a3, "%s(%s)", v14, v15, v16, v17, v18);
    DgnString::~DgnString((DgnString *)&v20);
    DgnString::~DgnString((DgnString *)v22);
    DgnString::~DgnString((DgnString *)&v23);
  }
  else
  {
    switch(a2)
    {
      case 0xFFFFF9u:
        uint64_t v19 = "~SIL";
        goto LABEL_17;
      case 0xFFFFFAu:
        uint64_t v19 = "<epsilon>";
        goto LABEL_17;
      case 0xFFFFFDu:
        uint64_t v19 = "</s>";
        goto LABEL_17;
      case 0xFFFFFEu:
        uint64_t v19 = "<s>";
LABEL_17:
        DgnString::operator=(a3, v19);
        break;
      default:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2238, (uint64_t)"fst/arcgraph", 26, (uint64_t)"%u", v10, v11, a2);
        break;
    }
  }
}

void sub_213FF6144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  _Unwind_Resume(a1);
}

void ArcGraph::ensureHeaderValid(ArcGraph *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((unsigned char *)this + 178)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/arcgraph.cpp", 2371, (uint64_t)"fst/arcgraph", 5, (uint64_t)"%.500s", a7, a8, (char)a2);
  }
}

uint64_t ArcGraph::findBackoffState(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 140);
  uint64_t v2 = *(void *)(this + 152);
  unsigned int v3 = *(_DWORD *)(v2 + 4 * (*(_DWORD *)(v2 + 4 * (*(_DWORD *)(this + 144) + 1)) + 1));
  LODWORD(this) = v3;
  do
  {
    unsigned int v4 = v3 + 1;
    int v5 = *(_DWORD *)(v2 + 4 * v3);
    v3 += 2;
    unsigned int v6 = *(_DWORD *)(v2 + 4 * v4);
    if ((v5 & 0xFFFFF) != 0 || v1 > (int)v6)
    {
      this = this;
    }
    else
    {
      unsigned int v3 = v6;
      this = v6;
    }
  }
  while ((v5 & 0x80000000) == 0);
  return this;
}

uint64_t GetWordId(unsigned int a1, const char *a2, const char *a3, const char *a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  char v8 = (char)a3;
  if (a1 == 126)
  {
    if (!a6 || strcmp(a2, "_START_CONTEXT")) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 62, (uint64_t)"voc/vocutil", 1, (uint64_t)"%.500s %.500s %.500s", a7, a8, v8);
    }
    return 16777214;
  }
  else
  {
    if (a1 == 125)
    {
      if (!a5 || *a2) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 56, (uint64_t)"voc/vocutil", 1, (uint64_t)"%.500s %.500s %.500s", a7, a8, (char)a3);
      }
      return 0xFFFFFFLL;
    }
    if (!*a2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 65, (uint64_t)"voc/vocutil", 2, (uint64_t)"%.500s %.500s", a7, a8, (char)a3);
    }
    uint64_t result = WordList::lookupWord(*(WordList **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * a1) + 48), a2);
    if (result == 0xFFFFFF)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 71, (uint64_t)"voc/vocutil", 5, (uint64_t)"%.500s %.500s %.500s", v12, v13, v8);
      return 0xFFFFFFLL;
    }
  }
  return result;
}

char *GetWordName(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == 125) {
    return &byte_2140B33BB;
  }
  if (a1 == 126) {
    return "_START_CONTEXT";
  }
  unsigned int v9 = *(WordList **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * a1) + 48);
  uint64_t v10 = *((void *)v9 + 32);
  uint64_t v11 = *(unsigned int *)(v10 + 4 * a2);
  WordList::verifyVisible(v9, *(_DWORD *)(v10 + 4 * a2), a3, a4, a5, a6, a7, a8);
  return (char *)(*((void *)v9 + 28) + *(unsigned int *)(*((void *)v9 + 25) + 4 * v11));
}

void VerifyVocName(const char *__s, const char *a2)
{
  if (__s)
  {
    if (*__s == 95)
    {
      unsigned int v3 = strlen(__s);
      if (v3)
      {
        if (v3 == 1)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 109, (uint64_t)"voc/vocutil", 4, (uint64_t)"%.500s %.500s", v4, v5, (char)__s);
        }
        else
        {
          uint64_t v6 = v3;
          for (uint64_t i = 1; i != v6; ++i)
          {
            if (__s[i] - 58 <= 0xFFFFFFF5) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocutil.cpp", 113, (uint64_t)"voc/vocutil", 4, (uint64_t)"%.500s %.500s", v4, v5, (char)__s);
            }
          }
        }
      }
    }
  }
}

void *GetStateName@<X0>(unsigned int a1@<W0>, unsigned int Parent@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, DgnString *a9@<X8>)
{
  uint64_t v11 = *(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * a1) + 56);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  while (Parent)
  {
    Name = (const char *)StateMgr::getName(v11, Parent, a3, a4, a5, a6, a7, a8);
    DgnString::DgnString((DgnString *)v23, Name);
    uint64_t v13 = v25;
    if (v25 == (unint64_t)HIDWORD(v25))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v24, 1, 1);
      uint64_t v13 = v25;
    }
    DgnString::DgnString((DgnString *)(v24 + 16 * v13), (const DgnString *)v23);
    LODWORD(v25) = v25 + 1;
    DgnString::~DgnString((DgnString *)v23);
    Parent = StateMgr::getParent(v11, Parent, v14, v15, v16, v17, v18, v19);
  }
  uint64_t v20 = v25;
  DgnString::DgnString(a9);
  if (v20)
  {
    uint64_t v21 = 0;
    do
    {
      if (v21) {
        DgnString::operator+=(a9, ".");
      }
      DgnString::operator+=(a9, v24 + 16 * (v20 - 1 + v21--));
    }
    while (-v20 != v21);
  }
  return DgnArray<DgnString>::releaseAll((uint64_t)&v24);
}

void sub_213FF664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

DgnString *GetRuleName@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, DgnString *a9@<X8>)
{
  uint64_t v12 = *(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * a1) + 64);
  unsigned int Parent = RuleMgr::getParent(v12, a2, a3, a4, a5, a6, a7, a8);
  GetStateName(a1, Parent, v14, v15, v16, v17, v18, v19, a9);
  DgnString::operator+=(a9, ".");
  Name = (char *)RuleMgr::getName(v12, a2, v20, v21, v22, v23, v24, v25);
  return DgnString::operator+=(a9, Name);
}

void sub_213FF6714(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

const char *GetCollationName(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 65534) {
    return "_IDENTITY";
  }
  else {
    return (const char *)CollMgr::getCollationName(*(CollMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * a1) + 16), a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t Lattice<PhonemeLatticeLC>::cmpInLink(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 128);
  unsigned int v4 = *(unsigned __int16 *)(v3 + 24 * a2);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 24 * a3);
  BOOL v6 = v4 == v5;
  if (v4 > v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  if (v6)
  {
    unsigned int v8 = *(_DWORD *)(v3 + 24 * a2 + 8);
    unsigned int v9 = *(_DWORD *)(v3 + 24 * a3 + 8);
    if (v8 != v9)
    {
      if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v8 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * v9 + 4)) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1;
      }
    }
    return 0;
  }
  return v7;
}

uint64_t Lattice<PhonemeLatticeLC>::cmpOutLink(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 128);
  unsigned int v4 = *(unsigned __int16 *)(v3 + 24 * a2);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 24 * a3);
  BOOL v6 = v4 == v5;
  if (v4 > v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  if (v6)
  {
    unsigned int v8 = *(_DWORD *)(v3 + 24 * a2 + 12);
    unsigned int v9 = *(_DWORD *)(v3 + 24 * a3 + 12);
    if (v8 != v9)
    {
      if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v8 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * v9 + 4)) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1;
      }
    }
    return 0;
  }
  return v7;
}

uint64_t Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinksIgnoreNodes(a1, a2, a3);
  if (!result)
  {
    if (a2 == a3)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * a2 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * a3 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinksIgnoreNodes(a1, a2, a3);
  if (!result)
  {
    if (a2 == a3)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * a2 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * a3 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t PhonemeLattice::SortInLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<InLinkICmp1>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<InLinkICmp1>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a2;
  BOOL v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v103 = ((result | a3) & 7) == 0;
  int v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v73 = (unsigned int *)((char *)v6 + v5 * a3);
      uint64_t v74 = (unsigned int *)((char *)v6 + a3);
      uint64_t v75 = v6;
      do
      {
        if (v74 > v6)
        {
          uint64_t v76 = v75;
          uint64_t v77 = v74;
          do
          {
            uint64_t v78 = v77;
            uint64_t v77 = (unsigned int *)((char *)v77 + v7);
            uint64_t result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v77, *v78);
            if ((int)result < 1) {
              break;
            }
            if (v104)
            {
              if (v103)
              {
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v76 + a3;
                do
                {
                  uint64_t v81 = *(void *)(v80 + 8 * v79);
                  *(void *)(v80 + 8 * v79) = *(void *)&v76[2 * v79];
                  *(void *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                uint64_t v83 = 0;
                uint64_t v84 = (uint64_t)v76 + a3;
                do
                {
                  char v85 = *(unsigned char *)(v84 + v83);
                  *(unsigned char *)(v84 + v83) = *((unsigned char *)v76 + v83);
                  *((unsigned char *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              uint64_t v82 = *(void *)v78;
              *(void *)uint64_t v78 = *(void *)v77;
              *(void *)uint64_t v77 = v82;
            }
            uint64_t v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        uint64_t v74 = (unsigned int *)((char *)v74 + a3);
        uint64_t v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a3 >> 3;
  BOOL v99 = a3 != 8;
  while (1)
  {
    uint64_t v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v101 = v5;
    if (v5 == 7) {
      goto LABEL_46;
    }
    uint64_t v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      uint64_t v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v13 = (v5 >> 3) * a3;
      uint64_t v14 = (unsigned int *)((char *)v6 + 2 * v13);
      int v15 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      uint64_t v100 = (unsigned int *)((char *)v6 + v13);
      int v16 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v6, *v14) >= 0) {
            uint64_t v17 = v6;
          }
          else {
            uint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
          }
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v6, *v14) >= 0) {
          uint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
        }
        else {
          uint64_t v17 = v6;
        }
LABEL_18:
        uint64_t v100 = v17;
      }
      uint64_t v19 = (unsigned int *)((char *)v11 - v13);
      uint64_t v20 = (unsigned int *)((char *)v11 + v13);
      int v21 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      int v22 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v19, *v20) >= 0) {
            uint64_t v11 = (unsigned int *)((char *)v11 - v13);
          }
          else {
            uint64_t v11 = (unsigned int *)((char *)v11 + v13);
          }
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v19, *v20) >= 0) {
          uint64_t v11 = (unsigned int *)((char *)v11 + v13);
        }
        else {
          uint64_t v11 = (unsigned int *)((char *)v11 - v13);
        }
      }
      uint64_t v23 = (unsigned int *)((char *)v98 - 2 * v13);
      uint64_t v12 = (unsigned int *)((char *)v98 - v13);
      int v24 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v23, *v12);
      int v25 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v12, *v98);
      if (v24 < 0)
      {
        uint64_t v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          uint64_t v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v23, *v98) >= 0) {
            uint64_t v12 = v23;
          }
        }
      }
      else
      {
        uint64_t v18 = v100;
        if (v25 <= 0)
        {
          uint64_t v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v23, *v98) < 0) {
            uint64_t v12 = v23;
          }
        }
      }
      unint64_t v5 = v101;
      goto LABEL_37;
    }
    uint64_t v18 = v6;
LABEL_37:
    uint64_t v9 = a4;
    int v26 = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v18, *v11);
    uint64_t result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v18, *v12);
        if ((int)result >= 0) {
          uint64_t v11 = v18;
        }
        else {
          uint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v18, *v12);
      if ((int)result >= 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = v18;
      }
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        uint64_t v27 = v6;
        unint64_t v28 = a3 >> 3;
        do
        {
          uint64_t v29 = *(void *)v27;
          *(void *)uint64_t v27 = *(void *)v11;
          v27 += 2;
          *(void *)uint64_t v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        unint64_t v31 = a3;
        uint64_t v32 = v6;
        do
        {
          char v33 = *(unsigned char *)v32;
          *(unsigned char *)uint64_t v32 = *(unsigned char *)v11;
          uint64_t v32 = (unsigned int *)((char *)v32 + 1);
          *(unsigned char *)uint64_t v11 = v33;
          uint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      uint64_t v30 = *(void *)v6;
      *(void *)BOOL v6 = *(void *)v11;
      *(void *)uint64_t v11 = v30;
    }
    int v34 = 0;
    uint64_t v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    uint64_t v36 = v35;
    uint64_t v37 = (unsigned int *)((char *)v6 + a3);
    uint64_t v38 = (void *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpInLink(v9, *v37, *v6);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v38[v39];
              v38[v39] = *(void *)&v37[2 * v39];
              *(void *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v38 + v49);
              *((unsigned char *)v38 + v49) = *((unsigned char *)v37 + v49);
              *((unsigned char *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *v38;
          void *v38 = *(void *)v37;
          *(void *)uint64_t v37 = v48;
        }
        uint64_t v38 = (void *)((char *)v38 + a3);
        int v34 = 1;
      }
      uint64_t v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpInLink(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v37[2 * v46];
              *(void *)&v37[2 * v46] = *(void *)&v36[2 * v46];
              *(void *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            uint64_t v52 = 0;
            do
            {
              char v53 = *((unsigned char *)v37 + v52);
              *((unsigned char *)v37 + v52) = *((unsigned char *)v36 + v52);
              *((unsigned char *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v36;
          *(void *)uint64_t v36 = v51;
        }
        uint64_t v37 = (unsigned int *)((char *)v37 + a3);
        uint64_t v36 = (unsigned int *)((char *)v36 + v7);
        int v34 = 1;
        goto LABEL_55;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)&v36[2 * v41];
              *(void *)&v36[2 * v41] = *(void *)&v35[2 * v41];
              *(void *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              char v45 = *((unsigned char *)v36 + v44);
              *((unsigned char *)v36 + v44) = *((unsigned char *)v35 + v44);
              *((unsigned char *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          uint64_t v43 = *(void *)v36;
          *(void *)uint64_t v36 = *(void *)v35;
          *(void *)uint64_t v35 = v43;
        }
        uint64_t v35 = (unsigned int *)((char *)v35 + v7);
        int v34 = 1;
      }
      uint64_t v36 = (unsigned int *)((char *)v36 + v7);
    }
    unsigned int v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34) {
      break;
    }
    int64_t v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38) {
      unint64_t v56 = (char *)v37 - (char *)v38;
    }
    else {
      unint64_t v56 = (char *)v38 - (char *)v6;
    }
    if (v56)
    {
      if (v103)
      {
        uint64_t v57 = (void *)((char *)v37 - v56);
        unint64_t v58 = v56 >> 3;
        uint64_t v59 = v6;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)uint64_t v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        uint64_t v61 = -(uint64_t)v56;
        uint64_t v62 = v6;
        do
        {
          char v63 = *(unsigned char *)v62;
          *(unsigned char *)uint64_t v62 = *((unsigned char *)v37 + v61);
          uint64_t v62 = (unsigned int *)((char *)v62 + 1);
          *((unsigned char *)v37 + v61) = v63;
          BOOL v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    int64_t v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3)) {
      unint64_t v66 = (char *)v54 - ((char *)v35 + a3);
    }
    else {
      unint64_t v66 = (char *)v35 - (char *)v36;
    }
    if (v66)
    {
      if (v103)
      {
        uint64_t v67 = (char *)v54 - v66;
        unint64_t v68 = v66 >> 3;
        do
        {
          uint64_t v69 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v67;
          v37 += 2;
          *(void *)uint64_t v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v66;
        do
        {
          char v71 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *((unsigned char *)v54 + v70);
          uint64_t v37 = (unsigned int *)((char *)v37 + 1);
          *((unsigned char *)v54 + v70) = v71;
          BOOL v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<InLinkICmp1>(v6, v55 / a3, a3, a4);
    }
    if (v65 <= (uint64_t)a3) {
      return result;
    }
    BOOL v6 = (unsigned int *)((char *)v54 - v65);
    unint64_t v5 = v65 / a3;
    int v72 = v99;
    if ((((v54 - v65) | a3) & 7) != 0) {
      int v72 = 2;
    }
    BOOL v103 = (((v54 - v65) | a3) & 7) == 0;
    int v104 = v72;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_119;
    }
  }
  uint64_t v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    uint64_t v87 = v6;
    do
    {
      if (v86 > v6)
      {
        uint64_t v88 = v87;
        int v89 = v86;
        do
        {
          uint64_t v90 = v89;
          int v89 = (unsigned int *)((char *)v89 + v7);
          uint64_t result = Lattice<PhonemeLatticeLC>::cmpInLink(a4, *v89, *v90);
          if ((int)result < 1) {
            break;
          }
          if (v104)
          {
            if (v103)
            {
              uint64_t v91 = 0;
              uint64_t v92 = (uint64_t)v88 + a3;
              do
              {
                uint64_t v93 = *(void *)(v92 + 8 * v91);
                *(void *)(v92 + 8 * v91) = *(void *)&v88[2 * v91];
                *(void *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              uint64_t v95 = 0;
              uint64_t v96 = (uint64_t)v88 + a3;
              do
              {
                char v97 = *(unsigned char *)(v96 + v95);
                *(unsigned char *)(v96 + v95) = *((unsigned char *)v88 + v95);
                *((unsigned char *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            uint64_t v94 = *(void *)v90;
            *(void *)uint64_t v90 = *(void *)v89;
            *(void *)int v89 = v94;
          }
          uint64_t v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      uint64_t v86 = (unsigned int *)((char *)v86 + a3);
      uint64_t v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

uint64_t PhonemeLattice::SortOutLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<OutLinkICmp1>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<OutLinkICmp1>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a2;
  BOOL v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v103 = ((result | a3) & 7) == 0;
  int v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v73 = (unsigned int *)((char *)v6 + v5 * a3);
      uint64_t v74 = (unsigned int *)((char *)v6 + a3);
      uint64_t v75 = v6;
      do
      {
        if (v74 > v6)
        {
          uint64_t v76 = v75;
          uint64_t v77 = v74;
          do
          {
            uint64_t v78 = v77;
            uint64_t v77 = (unsigned int *)((char *)v77 + v7);
            uint64_t result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v77, *v78);
            if ((int)result < 1) {
              break;
            }
            if (v104)
            {
              if (v103)
              {
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v76 + a3;
                do
                {
                  uint64_t v81 = *(void *)(v80 + 8 * v79);
                  *(void *)(v80 + 8 * v79) = *(void *)&v76[2 * v79];
                  *(void *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                uint64_t v83 = 0;
                uint64_t v84 = (uint64_t)v76 + a3;
                do
                {
                  char v85 = *(unsigned char *)(v84 + v83);
                  *(unsigned char *)(v84 + v83) = *((unsigned char *)v76 + v83);
                  *((unsigned char *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              uint64_t v82 = *(void *)v78;
              *(void *)uint64_t v78 = *(void *)v77;
              *(void *)uint64_t v77 = v82;
            }
            uint64_t v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        uint64_t v74 = (unsigned int *)((char *)v74 + a3);
        uint64_t v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a3 >> 3;
  BOOL v99 = a3 != 8;
  while (1)
  {
    uint64_t v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v101 = v5;
    if (v5 == 7) {
      goto LABEL_46;
    }
    uint64_t v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      uint64_t v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v13 = (v5 >> 3) * a3;
      uint64_t v14 = (unsigned int *)((char *)v6 + 2 * v13);
      int v15 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      uint64_t v100 = (unsigned int *)((char *)v6 + v13);
      int v16 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v6, *v14) >= 0) {
            uint64_t v17 = v6;
          }
          else {
            uint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
          }
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v6, *v14) >= 0) {
          uint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
        }
        else {
          uint64_t v17 = v6;
        }
LABEL_18:
        uint64_t v100 = v17;
      }
      uint64_t v19 = (unsigned int *)((char *)v11 - v13);
      uint64_t v20 = (unsigned int *)((char *)v11 + v13);
      int v21 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      int v22 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v19, *v20) >= 0) {
            uint64_t v11 = (unsigned int *)((char *)v11 - v13);
          }
          else {
            uint64_t v11 = (unsigned int *)((char *)v11 + v13);
          }
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v19, *v20) >= 0) {
          uint64_t v11 = (unsigned int *)((char *)v11 + v13);
        }
        else {
          uint64_t v11 = (unsigned int *)((char *)v11 - v13);
        }
      }
      uint64_t v23 = (unsigned int *)((char *)v98 - 2 * v13);
      uint64_t v12 = (unsigned int *)((char *)v98 - v13);
      int v24 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v23, *v12);
      int v25 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v12, *v98);
      if (v24 < 0)
      {
        uint64_t v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          uint64_t v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v23, *v98) >= 0) {
            uint64_t v12 = v23;
          }
        }
      }
      else
      {
        uint64_t v18 = v100;
        if (v25 <= 0)
        {
          uint64_t v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v23, *v98) < 0) {
            uint64_t v12 = v23;
          }
        }
      }
      unint64_t v5 = v101;
      goto LABEL_37;
    }
    uint64_t v18 = v6;
LABEL_37:
    uint64_t v9 = a4;
    int v26 = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v18, *v11);
    uint64_t result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v18, *v12);
        if ((int)result >= 0) {
          uint64_t v11 = v18;
        }
        else {
          uint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v18, *v12);
      if ((int)result >= 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = v18;
      }
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        uint64_t v27 = v6;
        unint64_t v28 = a3 >> 3;
        do
        {
          uint64_t v29 = *(void *)v27;
          *(void *)uint64_t v27 = *(void *)v11;
          v27 += 2;
          *(void *)uint64_t v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        unint64_t v31 = a3;
        uint64_t v32 = v6;
        do
        {
          char v33 = *(unsigned char *)v32;
          *(unsigned char *)uint64_t v32 = *(unsigned char *)v11;
          uint64_t v32 = (unsigned int *)((char *)v32 + 1);
          *(unsigned char *)uint64_t v11 = v33;
          uint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      uint64_t v30 = *(void *)v6;
      *(void *)BOOL v6 = *(void *)v11;
      *(void *)uint64_t v11 = v30;
    }
    int v34 = 0;
    uint64_t v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    uint64_t v36 = v35;
    uint64_t v37 = (unsigned int *)((char *)v6 + a3);
    uint64_t v38 = (void *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpOutLink(v9, *v37, *v6);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v38[v39];
              v38[v39] = *(void *)&v37[2 * v39];
              *(void *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v38 + v49);
              *((unsigned char *)v38 + v49) = *((unsigned char *)v37 + v49);
              *((unsigned char *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *v38;
          void *v38 = *(void *)v37;
          *(void *)uint64_t v37 = v48;
        }
        uint64_t v38 = (void *)((char *)v38 + a3);
        int v34 = 1;
      }
      uint64_t v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpOutLink(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v37[2 * v46];
              *(void *)&v37[2 * v46] = *(void *)&v36[2 * v46];
              *(void *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            uint64_t v52 = 0;
            do
            {
              char v53 = *((unsigned char *)v37 + v52);
              *((unsigned char *)v37 + v52) = *((unsigned char *)v36 + v52);
              *((unsigned char *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v36;
          *(void *)uint64_t v36 = v51;
        }
        uint64_t v37 = (unsigned int *)((char *)v37 + a3);
        uint64_t v36 = (unsigned int *)((char *)v36 + v7);
        int v34 = 1;
        goto LABEL_55;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)&v36[2 * v41];
              *(void *)&v36[2 * v41] = *(void *)&v35[2 * v41];
              *(void *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              char v45 = *((unsigned char *)v36 + v44);
              *((unsigned char *)v36 + v44) = *((unsigned char *)v35 + v44);
              *((unsigned char *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          uint64_t v43 = *(void *)v36;
          *(void *)uint64_t v36 = *(void *)v35;
          *(void *)uint64_t v35 = v43;
        }
        uint64_t v35 = (unsigned int *)((char *)v35 + v7);
        int v34 = 1;
      }
      uint64_t v36 = (unsigned int *)((char *)v36 + v7);
    }
    unsigned int v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34) {
      break;
    }
    int64_t v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38) {
      unint64_t v56 = (char *)v37 - (char *)v38;
    }
    else {
      unint64_t v56 = (char *)v38 - (char *)v6;
    }
    if (v56)
    {
      if (v103)
      {
        uint64_t v57 = (void *)((char *)v37 - v56);
        unint64_t v58 = v56 >> 3;
        uint64_t v59 = v6;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)uint64_t v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        uint64_t v61 = -(uint64_t)v56;
        uint64_t v62 = v6;
        do
        {
          char v63 = *(unsigned char *)v62;
          *(unsigned char *)uint64_t v62 = *((unsigned char *)v37 + v61);
          uint64_t v62 = (unsigned int *)((char *)v62 + 1);
          *((unsigned char *)v37 + v61) = v63;
          BOOL v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    int64_t v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3)) {
      unint64_t v66 = (char *)v54 - ((char *)v35 + a3);
    }
    else {
      unint64_t v66 = (char *)v35 - (char *)v36;
    }
    if (v66)
    {
      if (v103)
      {
        uint64_t v67 = (char *)v54 - v66;
        unint64_t v68 = v66 >> 3;
        do
        {
          uint64_t v69 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v67;
          v37 += 2;
          *(void *)uint64_t v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v66;
        do
        {
          char v71 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *((unsigned char *)v54 + v70);
          uint64_t v37 = (unsigned int *)((char *)v37 + 1);
          *((unsigned char *)v54 + v70) = v71;
          BOOL v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<OutLinkICmp1>(v6, v55 / a3, a3, a4);
    }
    if (v65 <= (uint64_t)a3) {
      return result;
    }
    BOOL v6 = (unsigned int *)((char *)v54 - v65);
    unint64_t v5 = v65 / a3;
    int v72 = v99;
    if ((((v54 - v65) | a3) & 7) != 0) {
      int v72 = 2;
    }
    BOOL v103 = (((v54 - v65) | a3) & 7) == 0;
    int v104 = v72;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_119;
    }
  }
  uint64_t v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    uint64_t v87 = v6;
    do
    {
      if (v86 > v6)
      {
        uint64_t v88 = v87;
        int v89 = v86;
        do
        {
          uint64_t v90 = v89;
          int v89 = (unsigned int *)((char *)v89 + v7);
          uint64_t result = Lattice<PhonemeLatticeLC>::cmpOutLink(a4, *v89, *v90);
          if ((int)result < 1) {
            break;
          }
          if (v104)
          {
            if (v103)
            {
              uint64_t v91 = 0;
              uint64_t v92 = (uint64_t)v88 + a3;
              do
              {
                uint64_t v93 = *(void *)(v92 + 8 * v91);
                *(void *)(v92 + 8 * v91) = *(void *)&v88[2 * v91];
                *(void *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              uint64_t v95 = 0;
              uint64_t v96 = (uint64_t)v88 + a3;
              do
              {
                char v97 = *(unsigned char *)(v96 + v95);
                *(unsigned char *)(v96 + v95) = *((unsigned char *)v88 + v95);
                *((unsigned char *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            uint64_t v94 = *(void *)v90;
            *(void *)uint64_t v90 = *(void *)v89;
            *(void *)int v89 = v94;
          }
          uint64_t v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      uint64_t v86 = (unsigned int *)((char *)v86 + a3);
      uint64_t v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

char *PhonemeLattice::SortNodes(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeICmp1>(*(char **)a2, *(unsigned int *)(a2 + 8), 4, a1);
}

char *mrec_qsort_r<NodeICmp1>(char *result, unint64_t a2, int64_t a3, uint64_t a4)
{
  int64_t v6 = -a3;
  BOOL v7 = a3 != 8;
  BOOL v8 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v9 = 2;
  }
  else {
    int v9 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_130:
    if ((uint64_t)(a2 * a3) > a3)
    {
      uint64_t v100 = &result[a2 * a3];
      unint64_t v101 = &result[a3];
      uint64_t v102 = result;
      do
      {
        if (v101 > result)
        {
          BOOL v103 = (unsigned int *)v102;
          int v104 = v101;
          do
          {
            uint64_t v105 = v104;
            int v104 = (_DWORD *)((char *)v104 + v6);
            if (*v104 == *v105
              || *(_DWORD *)(*(void *)(a4 + 80) + 24 * *v104 + 4) < *(_DWORD *)(*(void *)(a4 + 80)
                                                                                                + 24
                                                                                                * *v105
                                                                                                + 4))
            {
              break;
            }
            if (v9)
            {
              uint64_t v106 = 0;
              uint64_t v107 = (uint64_t)v103 + a3;
              if (v8)
              {
                do
                {
                  uint64_t v108 = *(void *)(v107 + 8 * v106);
                  *(void *)(v107 + 8 * v106) = *(void *)&v103[2 * v106];
                  *(void *)&v103[2 * v106++] = v108;
                }
                while ((unint64_t)a3 >> 3 != v106);
              }
              else
              {
                do
                {
                  char v109 = *(unsigned char *)(v107 + v106);
                  *(unsigned char *)(v107 + v106) = *((unsigned char *)v103 + v106);
                  *((unsigned char *)v103 + v106++) = v109;
                }
                while (a3 != v106);
              }
            }
            else
            {
              uint64_t v110 = *(void *)v105;
              *(void *)uint64_t v105 = *(void *)v104;
              *(void *)int v104 = v110;
            }
            BOOL v103 = (unsigned int *)((char *)v103 + v6);
          }
          while (v104 > (_DWORD *)result);
        }
        v101 += a3;
        v102 += a3;
      }
      while (v101 < v100);
    }
    return result;
  }
  unint64_t v10 = (unint64_t)a3 >> 3;
  while (2)
  {
    uint64_t v11 = &result[(a2 >> 1) * a3];
    if (a2 == 7) {
      goto LABEL_59;
    }
    uint64_t v12 = (unsigned int *)&result[(a2 - 1) * a3];
    if (a2 < 0x29)
    {
      uint64_t v14 = result;
      goto LABEL_46;
    }
    unint64_t v13 = (a2 >> 3) * a3;
    uint64_t v14 = &result[v13];
    int v15 = &result[2 * v13];
    unsigned int v16 = *(_DWORD *)result;
    unsigned int v17 = *(_DWORD *)&result[v13];
    if (*(_DWORD *)result == v17
      || (uint64_t v18 = *(void *)(a4 + 80),
          unsigned int v19 = *(_DWORD *)(v18 + 24 * v16 + 4),
          unsigned int v20 = *(_DWORD *)(v18 + 24 * v17 + 4),
          v19 >= v20))
    {
      unsigned int v22 = *(_DWORD *)v15;
      if (v17 == *(_DWORD *)v15
        || *(_DWORD *)(*(void *)(a4 + 80) + 24 * v17 + 4) < *(_DWORD *)(*(void *)(a4 + 80) + 24 * v22 + 4))
      {
        if (v16 == v22
          || (uint64_t v23 = *(void *)(a4 + 80),
              unsigned int v24 = *(_DWORD *)(v23 + 24 * v16 + 4),
              unsigned int v25 = *(_DWORD *)(v23 + 24 * v22 + 4),
              uint64_t v14 = result,
              v24 >= v25))
        {
          uint64_t v14 = &result[2 * v13];
        }
      }
    }
    else
    {
      unsigned int v21 = *(_DWORD *)v15;
      if (v17 == *(_DWORD *)v15 || v20 >= *(_DWORD *)(v18 + 24 * v21 + 4))
      {
        uint64_t v14 = result;
        if (v16 != v21)
        {
          uint64_t v14 = &result[2 * v13];
          if (v19 >= *(_DWORD *)(v18 + 24 * v21 + 4)) {
            uint64_t v14 = result;
          }
        }
      }
    }
    int v26 = &v11[-v13];
    uint64_t v27 = (unsigned int *)&v11[v13];
    unsigned int v28 = *(_DWORD *)&v11[-v13];
    unsigned int v29 = *(_DWORD *)v11;
    if (v28 == *(_DWORD *)v11
      || (uint64_t v30 = *(void *)(a4 + 80),
          unsigned int v31 = *(_DWORD *)(v30 + 24 * v28 + 4),
          unsigned int v32 = *(_DWORD *)(v30 + 24 * v29 + 4),
          v31 >= v32))
    {
      unsigned int v34 = *v27;
      if (v29 == *v27
        || *(_DWORD *)(*(void *)(a4 + 80) + 24 * v29 + 4) < *(_DWORD *)(*(void *)(a4 + 80) + 24 * v34 + 4))
      {
        if (v28 == v34
          || (uint64_t v35 = *(void *)(a4 + 80),
              unsigned int v36 = *(_DWORD *)(v35 + 24 * v28 + 4),
              unsigned int v37 = *(_DWORD *)(v35 + 24 * v34 + 4),
              uint64_t v11 = v26,
              v36 >= v37))
        {
          uint64_t v11 = (char *)v27;
        }
      }
    }
    else
    {
      unsigned int v33 = *v27;
      if (v29 == *v27 || v32 >= *(_DWORD *)(v30 + 24 * v33 + 4))
      {
        if (v28 == v33 || (v11 += v13, v31 >= *(_DWORD *)(v30 + 24 * v33 + 4))) {
          uint64_t v11 = v26;
        }
      }
    }
    uint64_t v38 = -(uint64_t)v13;
    uint64_t v39 = (unsigned int *)((char *)v12 - 2 * v13);
    uint64_t v40 = (unsigned int *)((char *)v12 + v38);
    unsigned int v41 = *v39;
    unsigned int v42 = *v40;
    if (*v39 != *v40)
    {
      uint64_t v43 = *(void *)(a4 + 80);
      unsigned int v44 = *(_DWORD *)(v43 + 24 * v41 + 4);
      unsigned int v45 = *(_DWORD *)(v43 + 24 * v42 + 4);
      if (v44 < v45)
      {
        unsigned int v46 = *v12;
        if (v42 == *v12 || v45 >= *(_DWORD *)(v43 + 24 * v46 + 4))
        {
          if (v41 != v46 && v44 < *(_DWORD *)(v43 + 24 * v46 + 4)) {
            goto LABEL_46;
          }
LABEL_44:
          uint64_t v12 = v39;
          goto LABEL_46;
        }
LABEL_45:
        uint64_t v12 = v40;
        goto LABEL_46;
      }
    }
    unsigned int v47 = *v12;
    if (v42 != *v12
      && *(_DWORD *)(*(void *)(a4 + 80) + 24 * v42 + 4) >= *(_DWORD *)(*(void *)(a4 + 80) + 24 * v47 + 4))
    {
      goto LABEL_45;
    }
    if (v41 != v47
      && *(_DWORD *)(*(void *)(a4 + 80) + 24 * v41 + 4) < *(_DWORD *)(*(void *)(a4 + 80) + 24 * v47 + 4))
    {
      goto LABEL_44;
    }
LABEL_46:
    uint64_t v48 = *(unsigned int *)v14;
    uint64_t v49 = *(unsigned int *)v11;
    if (v48 == v49)
    {
      uint64_t v50 = *v12;
    }
    else
    {
      uint64_t v51 = *(void *)(a4 + 80);
      unsigned int v52 = *(_DWORD *)(v51 + 24 * v48 + 4);
      unsigned int v53 = *(_DWORD *)(v51 + 24 * v49 + 4);
      uint64_t v50 = *v12;
      if (v52 < v53)
      {
        if (v49 == v50 || v53 >= *(_DWORD *)(v51 + 24 * v50 + 4))
        {
          if (v48 == v50 || (uint64_t v11 = (char *)v12, v52 >= *(_DWORD *)(v51 + 24 * v50 + 4))) {
            uint64_t v11 = v14;
          }
        }
        goto LABEL_59;
      }
    }
    if (v49 == v50
      || *(_DWORD *)(*(void *)(a4 + 80) + 24 * v49 + 4) < *(_DWORD *)(*(void *)(a4 + 80)
                                                                                      + 24 * v50
                                                                                      + 4))
    {
      if (v48 == v50
        || (uint64_t v54 = *(void *)(a4 + 80),
            unsigned int v55 = *(_DWORD *)(v54 + 24 * v48 + 4),
            unsigned int v56 = *(_DWORD *)(v54 + 24 * v50 + 4),
            uint64_t v11 = v14,
            v55 >= v56))
      {
        uint64_t v11 = (char *)v12;
      }
    }
LABEL_59:
    if (v9)
    {
      if (v8)
      {
        uint64_t v57 = result;
        unint64_t v58 = (unint64_t)a3 >> 3;
        do
        {
          uint64_t v59 = *(void *)v57;
          *(void *)uint64_t v57 = *(void *)v11;
          v57 += 8;
          *(void *)uint64_t v11 = v59;
          v11 += 8;
          --v58;
        }
        while (v58);
      }
      else
      {
        int64_t v61 = a3;
        uint64_t v62 = result;
        do
        {
          char v63 = *v62;
          *v62++ = *v11;
          *v11++ = v63;
          --v61;
        }
        while (v61);
      }
    }
    else
    {
      uint64_t v60 = *(void *)result;
      *(void *)uint64_t result = *(void *)v11;
      *(void *)uint64_t v11 = v60;
    }
    int v64 = 0;
    int64_t v65 = &result[a3];
    unint64_t v66 = (unsigned int *)&result[(a2 - 1) * a3];
    uint64_t v67 = (char *)v66;
    unint64_t v68 = &result[a3];
    uint64_t v69 = &result[a3];
    while (1)
    {
LABEL_68:
      if (v68 > v67) {
        goto LABEL_81;
      }
      if (*(_DWORD *)v68 != *(_DWORD *)result) {
        break;
      }
      if (v9)
      {
        uint64_t v70 = 0;
        if (v8)
        {
          do
          {
            uint64_t v71 = *(void *)&v69[8 * v70];
            *(void *)&v69[8 * v70] = *(void *)&v68[8 * v70];
            *(void *)&v68[8 * v70++] = v71;
          }
          while (v10 != v70);
        }
        else
        {
          do
          {
            char v72 = v69[v70];
            v69[v70] = v68[v70];
            v68[v70++] = v72;
          }
          while (a3 != v70);
        }
      }
      else
      {
        uint64_t v80 = *(void *)v69;
        *(void *)uint64_t v69 = *(void *)v68;
        *(void *)unint64_t v68 = v80;
      }
      v69 += a3;
      int v64 = 1;
LABEL_98:
      v68 += a3;
    }
    if (*(_DWORD *)(*(void *)(a4 + 80) + 24 * *(unsigned int *)v68 + 4) < *(_DWORD *)(*(void *)(a4 + 80)
                                                                                         + 24
                                                                                         * *(unsigned int *)result
                                                                                         + 4))
      goto LABEL_98;
LABEL_81:
    while (v68 <= v67)
    {
      if (*(_DWORD *)v67 == *(_DWORD *)result)
      {
        if (v9)
        {
          uint64_t v74 = 0;
          if (v8)
          {
            do
            {
              uint64_t v75 = *(void *)&v67[8 * v74];
              *(void *)&v67[8 * v74] = *(void *)&v66[2 * v74];
              *(void *)&v66[2 * v74++] = v75;
            }
            while (v10 != v74);
          }
          else
          {
            do
            {
              char v76 = v67[v74];
              v67[v74] = *((unsigned char *)v66 + v74);
              *((unsigned char *)v66 + v74++) = v76;
            }
            while (a3 != v74);
          }
        }
        else
        {
          uint64_t v73 = *(void *)v67;
          *(void *)uint64_t v67 = *(void *)v66;
          *(void *)unint64_t v66 = v73;
        }
        unint64_t v66 = (unsigned int *)((char *)v66 + v6);
        int v64 = 1;
      }
      else if (*(_DWORD *)(*(void *)(a4 + 80) + 24 * *(unsigned int *)v67 + 4) < *(_DWORD *)(*(void *)(a4 + 80) {
                                                                                                + 24
      }
                                                                                                * *(unsigned int *)result
                                                                                                + 4))
      {
        if (v9)
        {
          uint64_t v77 = 0;
          if (v8)
          {
            do
            {
              uint64_t v78 = *(void *)&v68[8 * v77];
              *(void *)&v68[8 * v77] = *(void *)&v67[8 * v77];
              *(void *)&v67[8 * v77++] = v78;
            }
            while (v10 != v77);
          }
          else
          {
            do
            {
              char v79 = v68[v77];
              v68[v77] = v67[v77];
              v67[v77++] = v79;
            }
            while (a3 != v77);
          }
        }
        else
        {
          uint64_t v81 = *(void *)v68;
          *(void *)unint64_t v68 = *(void *)v67;
          *(void *)uint64_t v67 = v81;
        }
        v68 += a3;
        v67 += v6;
        int v64 = 1;
        goto LABEL_68;
      }
      v67 += v6;
    }
    uint64_t v82 = &result[a2 * a3];
    if (v64)
    {
      int64_t v83 = v68 - v69;
      if (v69 - result >= v68 - v69) {
        unint64_t v84 = v68 - v69;
      }
      else {
        unint64_t v84 = v69 - result;
      }
      if (v84)
      {
        if (v8)
        {
          char v85 = &v68[-v84];
          unint64_t v86 = v84 >> 3;
          uint64_t v87 = result;
          do
          {
            uint64_t v88 = *(void *)v87;
            *(void *)uint64_t v87 = *(void *)v85;
            v87 += 8;
            *(void *)char v85 = v88;
            v85 += 8;
            --v86;
          }
          while (v86);
        }
        else
        {
          uint64_t v89 = -(uint64_t)v84;
          uint64_t v90 = result;
          do
          {
            char v91 = *v90;
            *v90++ = v68[v89];
            v68[v89] = v91;
            BOOL v92 = __CFADD__(v89++, 1);
          }
          while (!v92);
        }
      }
      int64_t v93 = (char *)v66 - v67;
      int64_t v94 = v82 - ((char *)v66 + a3);
      if ((char *)v66 - v67 < v94) {
        int64_t v94 = (char *)v66 - v67;
      }
      if (v94)
      {
        if (v8)
        {
          uint64_t v95 = &v82[-v94];
          unint64_t v96 = (unint64_t)v94 >> 3;
          do
          {
            uint64_t v97 = *(void *)v68;
            *(void *)unint64_t v68 = *(void *)v95;
            v68 += 8;
            *(void *)uint64_t v95 = v97;
            v95 += 8;
            --v96;
          }
          while (v96);
        }
        else
        {
          int64_t v98 = -v94;
          do
          {
            char v99 = *v68;
            *v68++ = v82[v98];
            v82[v98] = v99;
            BOOL v92 = __CFADD__(v98++, 1);
          }
          while (!v92);
        }
      }
      if (v83 > a3) {
        uint64_t result = (char *)mrec_qsort_r<NodeICmp1>();
      }
      if (v93 > a3)
      {
        uint64_t result = &v82[-v93];
        a2 = v93 / (unint64_t)a3;
        BOOL v8 = ((((_BYTE)v82 - v93) | a3) & 7) == 0;
        if (((((_BYTE)v82 - v93) | a3) & 7) != 0) {
          int v9 = 2;
        }
        else {
          int v9 = v7;
        }
        if (a2 < 7) {
          goto LABEL_130;
        }
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      uint64_t v111 = result;
      do
      {
        if (v65 > result)
        {
          uint64_t v112 = (unsigned int *)v111;
          uint64_t v113 = v65;
          do
          {
            int v114 = v113;
            uint64_t v113 = (_DWORD *)((char *)v113 + v6);
            if (*v113 == *v114
              || *(_DWORD *)(*(void *)(a4 + 80) + 24 * *v113 + 4) < *(_DWORD *)(*(void *)(a4 + 80)
                                                                                                + 24
                                                                                                * *v114
                                                                                                + 4))
            {
              break;
            }
            if (v9)
            {
              uint64_t v115 = 0;
              uint64_t v116 = (uint64_t)v112 + a3;
              if (v8)
              {
                do
                {
                  uint64_t v117 = *(void *)(v116 + 8 * v115);
                  *(void *)(v116 + 8 * v115) = *(void *)&v112[2 * v115];
                  *(void *)&v112[2 * v115++] = v117;
                }
                while (v10 != v115);
              }
              else
              {
                do
                {
                  char v118 = *(unsigned char *)(v116 + v115);
                  *(unsigned char *)(v116 + v115) = *((unsigned char *)v112 + v115);
                  *((unsigned char *)v112 + v115++) = v118;
                }
                while (a3 != v115);
              }
            }
            else
            {
              uint64_t v119 = *(void *)v114;
              *(void *)int v114 = *(void *)v113;
              *(void *)uint64_t v113 = v119;
            }
            uint64_t v112 = (unsigned int *)((char *)v112 + v6);
          }
          while (v113 > (_DWORD *)result);
        }
        v65 += a3;
        v111 += a3;
      }
      while (v65 < v82);
    }
    return result;
  }
}

char *PhonemeLattice::SortNodesCount(uint64_t a1, char **a2, unsigned int a3)
{
  return mrec_qsort_r<NodeICmp1>(*a2, a3, 4, a1);
}

uint64_t PhonemeLattice::SortNodesByInLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeByInLinksICmp1>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<NodeByInLinksICmp1>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a2;
  int64_t v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v103 = ((result | a3) & 7) == 0;
  int v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v73 = (unsigned int *)((char *)v6 + v5 * a3);
      uint64_t v74 = (unsigned int *)((char *)v6 + a3);
      uint64_t v75 = v6;
      do
      {
        if (v74 > v6)
        {
          char v76 = v75;
          uint64_t v77 = v74;
          do
          {
            uint64_t v78 = v77;
            uint64_t v77 = (unsigned int *)((char *)v77 + v7);
            uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v77, *v78);
            if ((int)result < 1) {
              break;
            }
            if (v104)
            {
              if (v103)
              {
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v76 + a3;
                do
                {
                  uint64_t v81 = *(void *)(v80 + 8 * v79);
                  *(void *)(v80 + 8 * v79) = *(void *)&v76[2 * v79];
                  *(void *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                uint64_t v83 = 0;
                uint64_t v84 = (uint64_t)v76 + a3;
                do
                {
                  char v85 = *(unsigned char *)(v84 + v83);
                  *(unsigned char *)(v84 + v83) = *((unsigned char *)v76 + v83);
                  *((unsigned char *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              uint64_t v82 = *(void *)v78;
              *(void *)uint64_t v78 = *(void *)v77;
              *(void *)uint64_t v77 = v82;
            }
            char v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        uint64_t v74 = (unsigned int *)((char *)v74 + a3);
        uint64_t v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a3 >> 3;
  BOOL v99 = a3 != 8;
  while (1)
  {
    uint64_t v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v101 = v5;
    if (v5 == 7) {
      goto LABEL_46;
    }
    uint64_t v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      int64_t v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v13 = (v5 >> 3) * a3;
      uint64_t v14 = (unsigned int *)((char *)v6 + 2 * v13);
      int v15 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      uint64_t v100 = (unsigned int *)((char *)v6 + v13);
      int v16 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v6, *v14) >= 0) {
            unsigned int v17 = v6;
          }
          else {
            unsigned int v17 = (unsigned int *)((char *)v6 + 2 * v13);
          }
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v6, *v14) >= 0) {
          unsigned int v17 = (unsigned int *)((char *)v6 + 2 * v13);
        }
        else {
          unsigned int v17 = v6;
        }
LABEL_18:
        uint64_t v100 = v17;
      }
      unsigned int v19 = (unsigned int *)((char *)v11 - v13);
      unsigned int v20 = (unsigned int *)((char *)v11 + v13);
      int v21 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      int v22 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v19, *v20) >= 0) {
            uint64_t v11 = (unsigned int *)((char *)v11 - v13);
          }
          else {
            uint64_t v11 = (unsigned int *)((char *)v11 + v13);
          }
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v19, *v20) >= 0) {
          uint64_t v11 = (unsigned int *)((char *)v11 + v13);
        }
        else {
          uint64_t v11 = (unsigned int *)((char *)v11 - v13);
        }
      }
      uint64_t v23 = (unsigned int *)((char *)v98 - 2 * v13);
      uint64_t v12 = (unsigned int *)((char *)v98 - v13);
      int v24 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v23, *v12);
      int v25 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v12, *v98);
      if (v24 < 0)
      {
        uint64_t v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          uint64_t v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v23, *v98) >= 0) {
            uint64_t v12 = v23;
          }
        }
      }
      else
      {
        uint64_t v18 = v100;
        if (v25 <= 0)
        {
          uint64_t v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v23, *v98) < 0) {
            uint64_t v12 = v23;
          }
        }
      }
      unint64_t v5 = v101;
      goto LABEL_37;
    }
    uint64_t v18 = v6;
LABEL_37:
    uint64_t v9 = a4;
    int v26 = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v18, *v11);
    uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v18, *v12);
        if ((int)result >= 0) {
          uint64_t v11 = v18;
        }
        else {
          uint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v18, *v12);
      if ((int)result >= 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = v18;
      }
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        uint64_t v27 = v6;
        unint64_t v28 = a3 >> 3;
        do
        {
          uint64_t v29 = *(void *)v27;
          *(void *)uint64_t v27 = *(void *)v11;
          v27 += 2;
          *(void *)uint64_t v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        unint64_t v31 = a3;
        unsigned int v32 = v6;
        do
        {
          char v33 = *(unsigned char *)v32;
          *(unsigned char *)unsigned int v32 = *(unsigned char *)v11;
          unsigned int v32 = (unsigned int *)((char *)v32 + 1);
          *(unsigned char *)uint64_t v11 = v33;
          uint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      uint64_t v30 = *(void *)v6;
      *(void *)int64_t v6 = *(void *)v11;
      *(void *)uint64_t v11 = v30;
    }
    int v34 = 0;
    uint64_t v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    unsigned int v36 = v35;
    unsigned int v37 = (unsigned int *)((char *)v6 + a3);
    uint64_t v38 = (void *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(v9, *v37, *v6);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v38[v39];
              v38[v39] = *(void *)&v37[2 * v39];
              *(void *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v38 + v49);
              *((unsigned char *)v38 + v49) = *((unsigned char *)v37 + v49);
              *((unsigned char *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *v38;
          void *v38 = *(void *)v37;
          *(void *)unsigned int v37 = v48;
        }
        uint64_t v38 = (void *)((char *)v38 + a3);
        int v34 = 1;
      }
      unsigned int v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v37[2 * v46];
              *(void *)&v37[2 * v46] = *(void *)&v36[2 * v46];
              *(void *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            uint64_t v52 = 0;
            do
            {
              char v53 = *((unsigned char *)v37 + v52);
              *((unsigned char *)v37 + v52) = *((unsigned char *)v36 + v52);
              *((unsigned char *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          *(void *)unsigned int v37 = *(void *)v36;
          *(void *)unsigned int v36 = v51;
        }
        unsigned int v37 = (unsigned int *)((char *)v37 + a3);
        unsigned int v36 = (unsigned int *)((char *)v36 + v7);
        int v34 = 1;
        goto LABEL_55;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)&v36[2 * v41];
              *(void *)&v36[2 * v41] = *(void *)&v35[2 * v41];
              *(void *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              char v45 = *((unsigned char *)v36 + v44);
              *((unsigned char *)v36 + v44) = *((unsigned char *)v35 + v44);
              *((unsigned char *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          uint64_t v43 = *(void *)v36;
          *(void *)unsigned int v36 = *(void *)v35;
          *(void *)uint64_t v35 = v43;
        }
        uint64_t v35 = (unsigned int *)((char *)v35 + v7);
        int v34 = 1;
      }
      unsigned int v36 = (unsigned int *)((char *)v36 + v7);
    }
    uint64_t v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34) {
      break;
    }
    int64_t v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38) {
      unint64_t v56 = (char *)v37 - (char *)v38;
    }
    else {
      unint64_t v56 = (char *)v38 - (char *)v6;
    }
    if (v56)
    {
      if (v103)
      {
        uint64_t v57 = (void *)((char *)v37 - v56);
        unint64_t v58 = v56 >> 3;
        uint64_t v59 = v6;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)uint64_t v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        uint64_t v61 = -(uint64_t)v56;
        uint64_t v62 = v6;
        do
        {
          char v63 = *(unsigned char *)v62;
          *(unsigned char *)uint64_t v62 = *((unsigned char *)v37 + v61);
          uint64_t v62 = (unsigned int *)((char *)v62 + 1);
          *((unsigned char *)v37 + v61) = v63;
          BOOL v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    int64_t v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3)) {
      unint64_t v66 = (char *)v54 - ((char *)v35 + a3);
    }
    else {
      unint64_t v66 = (char *)v35 - (char *)v36;
    }
    if (v66)
    {
      if (v103)
      {
        uint64_t v67 = (char *)v54 - v66;
        unint64_t v68 = v66 >> 3;
        do
        {
          uint64_t v69 = *(void *)v37;
          *(void *)unsigned int v37 = *(void *)v67;
          v37 += 2;
          *(void *)uint64_t v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v66;
        do
        {
          char v71 = *(unsigned char *)v37;
          *(unsigned char *)unsigned int v37 = *((unsigned char *)v54 + v70);
          unsigned int v37 = (unsigned int *)((char *)v37 + 1);
          *((unsigned char *)v54 + v70) = v71;
          BOOL v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<NodeByInLinksICmp1>(v6, v55 / a3, a3, a4);
    }
    if (v65 <= (uint64_t)a3) {
      return result;
    }
    int64_t v6 = (unsigned int *)((char *)v54 - v65);
    unint64_t v5 = v65 / a3;
    int v72 = v99;
    if ((((v54 - v65) | a3) & 7) != 0) {
      int v72 = 2;
    }
    BOOL v103 = (((v54 - v65) | a3) & 7) == 0;
    int v104 = v72;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_119;
    }
  }
  unint64_t v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    uint64_t v87 = v6;
    do
    {
      if (v86 > v6)
      {
        uint64_t v88 = v87;
        uint64_t v89 = v86;
        do
        {
          uint64_t v90 = v89;
          uint64_t v89 = (unsigned int *)((char *)v89 + v7);
          uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByInLinks(a4, *v89, *v90);
          if ((int)result < 1) {
            break;
          }
          if (v104)
          {
            if (v103)
            {
              uint64_t v91 = 0;
              uint64_t v92 = (uint64_t)v88 + a3;
              do
              {
                uint64_t v93 = *(void *)(v92 + 8 * v91);
                *(void *)(v92 + 8 * v91) = *(void *)&v88[2 * v91];
                *(void *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              uint64_t v95 = 0;
              uint64_t v96 = (uint64_t)v88 + a3;
              do
              {
                char v97 = *(unsigned char *)(v96 + v95);
                *(unsigned char *)(v96 + v95) = *((unsigned char *)v88 + v95);
                *((unsigned char *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            uint64_t v94 = *(void *)v90;
            *(void *)uint64_t v90 = *(void *)v89;
            *(void *)uint64_t v89 = v94;
          }
          uint64_t v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      unint64_t v86 = (unsigned int *)((char *)v86 + a3);
      uint64_t v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

uint64_t PhonemeLattice::SortNodesByOutLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeByOutLinksICmp1>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<NodeByOutLinksICmp1>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a2;
  int64_t v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v103 = ((result | a3) & 7) == 0;
  int v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v73 = (unsigned int *)((char *)v6 + v5 * a3);
      uint64_t v74 = (unsigned int *)((char *)v6 + a3);
      uint64_t v75 = v6;
      do
      {
        if (v74 > v6)
        {
          char v76 = v75;
          uint64_t v77 = v74;
          do
          {
            uint64_t v78 = v77;
            uint64_t v77 = (unsigned int *)((char *)v77 + v7);
            uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v77, *v78);
            if ((int)result < 1) {
              break;
            }
            if (v104)
            {
              if (v103)
              {
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v76 + a3;
                do
                {
                  uint64_t v81 = *(void *)(v80 + 8 * v79);
                  *(void *)(v80 + 8 * v79) = *(void *)&v76[2 * v79];
                  *(void *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                uint64_t v83 = 0;
                uint64_t v84 = (uint64_t)v76 + a3;
                do
                {
                  char v85 = *(unsigned char *)(v84 + v83);
                  *(unsigned char *)(v84 + v83) = *((unsigned char *)v76 + v83);
                  *((unsigned char *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              uint64_t v82 = *(void *)v78;
              *(void *)uint64_t v78 = *(void *)v77;
              *(void *)uint64_t v77 = v82;
            }
            char v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        uint64_t v74 = (unsigned int *)((char *)v74 + a3);
        uint64_t v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a3 >> 3;
  BOOL v99 = a3 != 8;
  while (1)
  {
    uint64_t v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v101 = v5;
    if (v5 == 7) {
      goto LABEL_46;
    }
    uint64_t v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      int64_t v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v13 = (v5 >> 3) * a3;
      uint64_t v14 = (unsigned int *)((char *)v6 + 2 * v13);
      int v15 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      uint64_t v100 = (unsigned int *)((char *)v6 + v13);
      int v16 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v6, *v14) >= 0) {
            unsigned int v17 = v6;
          }
          else {
            unsigned int v17 = (unsigned int *)((char *)v6 + 2 * v13);
          }
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v6, *v14) >= 0) {
          unsigned int v17 = (unsigned int *)((char *)v6 + 2 * v13);
        }
        else {
          unsigned int v17 = v6;
        }
LABEL_18:
        uint64_t v100 = v17;
      }
      unsigned int v19 = (unsigned int *)((char *)v11 - v13);
      unsigned int v20 = (unsigned int *)((char *)v11 + v13);
      int v21 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      int v22 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v19, *v20) >= 0) {
            uint64_t v11 = (unsigned int *)((char *)v11 - v13);
          }
          else {
            uint64_t v11 = (unsigned int *)((char *)v11 + v13);
          }
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v19, *v20) >= 0) {
          uint64_t v11 = (unsigned int *)((char *)v11 + v13);
        }
        else {
          uint64_t v11 = (unsigned int *)((char *)v11 - v13);
        }
      }
      uint64_t v23 = (unsigned int *)((char *)v98 - 2 * v13);
      uint64_t v12 = (unsigned int *)((char *)v98 - v13);
      int v24 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v12);
      int v25 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v12, *v98);
      if (v24 < 0)
      {
        uint64_t v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          uint64_t v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v98) >= 0) {
            uint64_t v12 = v23;
          }
        }
      }
      else
      {
        uint64_t v18 = v100;
        if (v25 <= 0)
        {
          uint64_t v12 = v98;
          if ((int)Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v98) < 0) {
            uint64_t v12 = v23;
          }
        }
      }
      unint64_t v5 = v101;
      goto LABEL_37;
    }
    uint64_t v18 = v6;
LABEL_37:
    uint64_t v9 = a4;
    int v26 = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v11);
    uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v12);
        if ((int)result >= 0) {
          uint64_t v11 = v18;
        }
        else {
          uint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v12);
      if ((int)result >= 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = v18;
      }
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        uint64_t v27 = v6;
        unint64_t v28 = a3 >> 3;
        do
        {
          uint64_t v29 = *(void *)v27;
          *(void *)uint64_t v27 = *(void *)v11;
          v27 += 2;
          *(void *)uint64_t v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        unint64_t v31 = a3;
        unsigned int v32 = v6;
        do
        {
          char v33 = *(unsigned char *)v32;
          *(unsigned char *)unsigned int v32 = *(unsigned char *)v11;
          unsigned int v32 = (unsigned int *)((char *)v32 + 1);
          *(unsigned char *)uint64_t v11 = v33;
          uint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      uint64_t v30 = *(void *)v6;
      *(void *)int64_t v6 = *(void *)v11;
      *(void *)uint64_t v11 = v30;
    }
    int v34 = 0;
    uint64_t v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    unsigned int v36 = v35;
    unsigned int v37 = (unsigned int *)((char *)v6 + a3);
    uint64_t v38 = (void *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(v9, *v37, *v6);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v38[v39];
              v38[v39] = *(void *)&v37[2 * v39];
              *(void *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v38 + v49);
              *((unsigned char *)v38 + v49) = *((unsigned char *)v37 + v49);
              *((unsigned char *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *v38;
          void *v38 = *(void *)v37;
          *(void *)unsigned int v37 = v48;
        }
        uint64_t v38 = (void *)((char *)v38 + a3);
        int v34 = 1;
      }
      unsigned int v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v37[2 * v46];
              *(void *)&v37[2 * v46] = *(void *)&v36[2 * v46];
              *(void *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            uint64_t v52 = 0;
            do
            {
              char v53 = *((unsigned char *)v37 + v52);
              *((unsigned char *)v37 + v52) = *((unsigned char *)v36 + v52);
              *((unsigned char *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          *(void *)unsigned int v37 = *(void *)v36;
          *(void *)unsigned int v36 = v51;
        }
        unsigned int v37 = (unsigned int *)((char *)v37 + a3);
        unsigned int v36 = (unsigned int *)((char *)v36 + v7);
        int v34 = 1;
        goto LABEL_55;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)&v36[2 * v41];
              *(void *)&v36[2 * v41] = *(void *)&v35[2 * v41];
              *(void *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              char v45 = *((unsigned char *)v36 + v44);
              *((unsigned char *)v36 + v44) = *((unsigned char *)v35 + v44);
              *((unsigned char *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          uint64_t v43 = *(void *)v36;
          *(void *)unsigned int v36 = *(void *)v35;
          *(void *)uint64_t v35 = v43;
        }
        uint64_t v35 = (unsigned int *)((char *)v35 + v7);
        int v34 = 1;
      }
      unsigned int v36 = (unsigned int *)((char *)v36 + v7);
    }
    uint64_t v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34) {
      break;
    }
    int64_t v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38) {
      unint64_t v56 = (char *)v37 - (char *)v38;
    }
    else {
      unint64_t v56 = (char *)v38 - (char *)v6;
    }
    if (v56)
    {
      if (v103)
      {
        uint64_t v57 = (void *)((char *)v37 - v56);
        unint64_t v58 = v56 >> 3;
        uint64_t v59 = v6;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)uint64_t v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        uint64_t v61 = -(uint64_t)v56;
        uint64_t v62 = v6;
        do
        {
          char v63 = *(unsigned char *)v62;
          *(unsigned char *)uint64_t v62 = *((unsigned char *)v37 + v61);
          uint64_t v62 = (unsigned int *)((char *)v62 + 1);
          *((unsigned char *)v37 + v61) = v63;
          BOOL v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    int64_t v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3)) {
      unint64_t v66 = (char *)v54 - ((char *)v35 + a3);
    }
    else {
      unint64_t v66 = (char *)v35 - (char *)v36;
    }
    if (v66)
    {
      if (v103)
      {
        uint64_t v67 = (char *)v54 - v66;
        unint64_t v68 = v66 >> 3;
        do
        {
          uint64_t v69 = *(void *)v37;
          *(void *)unsigned int v37 = *(void *)v67;
          v37 += 2;
          *(void *)uint64_t v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v66;
        do
        {
          char v71 = *(unsigned char *)v37;
          *(unsigned char *)unsigned int v37 = *((unsigned char *)v54 + v70);
          unsigned int v37 = (unsigned int *)((char *)v37 + 1);
          *((unsigned char *)v54 + v70) = v71;
          BOOL v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<NodeByOutLinksICmp1>(v6, v55 / a3, a3, a4);
    }
    if (v65 <= (uint64_t)a3) {
      return result;
    }
    int64_t v6 = (unsigned int *)((char *)v54 - v65);
    unint64_t v5 = v65 / a3;
    int v72 = v99;
    if ((((v54 - v65) | a3) & 7) != 0) {
      int v72 = 2;
    }
    BOOL v103 = (((v54 - v65) | a3) & 7) == 0;
    int v104 = v72;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_119;
    }
  }
  unint64_t v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    uint64_t v87 = v6;
    do
    {
      if (v86 > v6)
      {
        uint64_t v88 = v87;
        uint64_t v89 = v86;
        do
        {
          uint64_t v90 = v89;
          uint64_t v89 = (unsigned int *)((char *)v89 + v7);
          uint64_t result = Lattice<PhonemeLatticeLC>::cmpNodesByOutLinks(a4, *v89, *v90);
          if ((int)result < 1) {
            break;
          }
          if (v104)
          {
            if (v103)
            {
              uint64_t v91 = 0;
              uint64_t v92 = (uint64_t)v88 + a3;
              do
              {
                uint64_t v93 = *(void *)(v92 + 8 * v91);
                *(void *)(v92 + 8 * v91) = *(void *)&v88[2 * v91];
                *(void *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              uint64_t v95 = 0;
              uint64_t v96 = (uint64_t)v88 + a3;
              do
              {
                char v97 = *(unsigned char *)(v96 + v95);
                *(unsigned char *)(v96 + v95) = *((unsigned char *)v88 + v95);
                *((unsigned char *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            uint64_t v94 = *(void *)v90;
            *(void *)uint64_t v90 = *(void *)v89;
            *(void *)uint64_t v89 = v94;
          }
          uint64_t v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      unint64_t v86 = (unsigned int *)((char *)v86 + a3);
      uint64_t v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

void PhonemeLattice::printSize(PhonemeLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/phnlat.cpp", 152, (DgnString *)&v28);
  if (v29) {
    int v16 = v28;
  }
  else {
    int v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v28);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v26 = 0;
  Lattice<PhonemeLatticeLC>::printSize((unsigned int *)this, 0xFFFFFFFFLL, (a3 + 1), &v28, &v27, &v26);
  *a4 += (unint64_t)v28;
  *a5 += v27;
  *a6 += v26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/phnlat.cpp", 155, (DgnString *)&v28);
  if (v29) {
    int v25 = v28;
  }
  else {
    int v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v25, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v28);
}

void sub_213FF92C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void Lattice<PhonemeLatticeLC>::printSize(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 898, (DgnString *)&v149);
  if (v150) {
    int v16 = v149;
  }
  else {
    int v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v149);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v27 = v149;
  }
  else {
    uint64_t v27 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v27, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    unsigned int v32 = v149;
  }
  else {
    unsigned int v32 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v32, 4, 4, 0);
  uint64_t v148 = a3;
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v33 = 12;
  }
  else {
    uint64_t v33 = 16;
  }
  uint64_t v34 = a1[6];
  unsigned int v35 = a1[7];
  if (v35 >= v34)
  {
    uint64_t v36 = 0;
    if ((int)v34 > 0) {
      v33 += 4 * (v34 - 1) + 4;
    }
    uint64_t v37 = v33 + 4 * (v35 - v34);
  }
  else
  {
    uint64_t v36 = 4 * v34;
    uint64_t v37 = v33;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v42 = v149;
  }
  else {
    uint64_t v42 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v21, &byte_2140B33BB, v22, v22, v42, v37, v33, v36);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v37;
  *a5 += v33;
  *a6 += v36;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 12;
  }
  else {
    uint64_t v43 = 16;
  }
  uint64_t v44 = a1[10];
  unsigned int v45 = a1[11];
  if (v45 >= v44)
  {
    uint64_t v46 = 0;
    if ((int)v44 > 0) {
      v43 += 4 * (v44 - 1) + 4;
    }
    uint64_t v47 = v43 + 4 * (v45 - v44);
  }
  else
  {
    uint64_t v46 = 4 * v44;
    uint64_t v47 = v43;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v52 = v149;
  }
  else {
    uint64_t v52 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &byte_2140B33BB, v22, v22, v52, v47, v43, v46);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v47;
  *a5 += v43;
  *a6 += v46;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 12;
  }
  else {
    uint64_t v53 = 16;
  }
  uint64_t v54 = a1[14];
  unsigned int v55 = a1[15];
  if (v55 >= v54)
  {
    uint64_t v56 = 0;
    if ((int)v54 > 0) {
      v53 += 4 * (v54 - 1) + 4;
    }
    uint64_t v57 = v53 + 4 * (v55 - v54);
  }
  else
  {
    uint64_t v56 = 4 * v54;
    uint64_t v57 = v53;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v62 = v149;
  }
  else {
    uint64_t v62 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &byte_2140B33BB, v22, v22, v62, v57, v53, v56);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v57;
  *a5 += v53;
  *a6 += v56;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 12;
  }
  else {
    uint64_t v63 = 16;
  }
  uint64_t v64 = a1[18];
  unsigned int v65 = a1[19];
  if (v65 >= v64)
  {
    uint64_t v66 = 0;
    if ((int)v64 > 0) {
      v63 += 4 * (v64 - 1) + 4;
    }
    uint64_t v67 = v63 + 4 * (v65 - v64);
  }
  else
  {
    uint64_t v66 = 4 * v64;
    uint64_t v67 = v63;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    int v72 = v149;
  }
  else {
    int v72 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &byte_2140B33BB, v22, v22, v72, v67, v63, v66);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v67;
  *a5 += v63;
  *a6 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  uint64_t v74 = a1[22];
  uint64_t v75 = 24 * v74;
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 24 * (a1[23] - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v82 = v149;
  }
  else {
    uint64_t v82 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &byte_2140B33BB, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v77;
  *a5 += v76;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v83 = 12;
  }
  else {
    uint64_t v83 = 16;
  }
  uint64_t v84 = a1[26];
  unsigned int v85 = a1[27];
  if (v85 >= v84)
  {
    uint64_t v86 = 0;
    if ((int)v84 > 0) {
      v83 += 4 * (v84 - 1) + 4;
    }
    uint64_t v87 = v83 + 4 * (v85 - v84);
  }
  else
  {
    uint64_t v86 = 4 * v84;
    uint64_t v87 = v83;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v92 = v149;
  }
  else {
    uint64_t v92 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &byte_2140B33BB, v22, v22, v92, v87, v83, v86);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v87;
  *a5 += v83;
  *a6 += v86;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v93 = 12;
  }
  else {
    uint64_t v93 = 16;
  }
  uint64_t v94 = a1[30];
  unsigned int v95 = a1[31];
  if (v95 >= v94)
  {
    uint64_t v96 = 0;
    if ((int)v94 > 0) {
      v93 += 4 * (v94 - 1) + 4;
    }
    uint64_t v97 = v93 + 4 * (v95 - v94);
  }
  else
  {
    uint64_t v96 = 4 * v94;
    uint64_t v97 = v93;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v102 = v149;
  }
  else {
    uint64_t v102 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v21, &byte_2140B33BB, v22, v22, v102, v97, v93, v96);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v97;
  *a5 += v93;
  *a6 += v96;
  uint64_t v103 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v103 = 16;
  }
  int v104 = a1[34];
  uint64_t v105 = 22 * v104;
  if (v104 <= 0) {
    uint64_t v105 = 0;
  }
  uint64_t v106 = v105 + v103;
  uint64_t v107 = v105 + v103 + 22 * (a1[35] - v104);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v112 = v149;
  }
  else {
    uint64_t v112 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v21, &byte_2140B33BB, v22, v22, v112, v107, v106, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v107;
  *a5 += v106;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v113 = 12;
  }
  else {
    uint64_t v113 = 16;
  }
  uint64_t v114 = a1[38];
  unsigned int v115 = a1[39];
  if (v115 >= v114)
  {
    uint64_t v116 = 0;
    if ((int)v114 > 0) {
      v113 += 4 * (v114 - 1) + 4;
    }
    uint64_t v117 = v113 + 4 * (v115 - v114);
  }
  else
  {
    uint64_t v116 = 4 * v114;
    uint64_t v117 = v113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v122 = v149;
  }
  else {
    uint64_t v122 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v21, &byte_2140B33BB, v22, v22, v122, v117, v113, v116);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v117;
  *a5 += v113;
  *a6 += v116;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v123 = 12;
  }
  else {
    uint64_t v123 = 16;
  }
  uint64_t v124 = a1[42];
  unsigned int v125 = a1[43];
  if (v125 >= v124)
  {
    uint64_t v126 = 0;
    if ((int)v124 > 0) {
      v123 += 4 * (v124 - 1) + 4;
    }
    uint64_t v127 = v123 + 4 * (v125 - v124);
  }
  else
  {
    uint64_t v126 = 4 * v124;
    uint64_t v127 = v123;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v132 = v149;
  }
  else {
    uint64_t v132 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v21, &byte_2140B33BB, v22, v22, v132, v127, v123, v126);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v127;
  *a5 += v123;
  *a6 += v126;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v133 = 12;
  }
  else {
    uint64_t v133 = 16;
  }
  uint64_t v134 = a1[46];
  unsigned int v135 = a1[47];
  if (v135 >= v134)
  {
    uint64_t v136 = 0;
    if ((int)v134 > 0) {
      v133 += 4 * (v134 - 1) + 4;
    }
    uint64_t v137 = v133 + 4 * (v135 - v134);
  }
  else
  {
    uint64_t v136 = 4 * v134;
    uint64_t v137 = v133;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v149);
  if (v150) {
    uint64_t v142 = v149;
  }
  else {
    uint64_t v142 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v21, &byte_2140B33BB, v22, v22, v142, v137, v133, v136);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v137;
  *a5 += v133;
  *a6 += v136;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 908, (DgnString *)&v149);
  if (v150) {
    uint64_t v147 = v149;
  }
  else {
    uint64_t v147 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v143, v144, v145, v146, v148, &byte_2140B33BB, (35 - v148), (35 - v148), v147, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v149);
}

void sub_213FF9CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t PhonemeLattice::PhonemeLattice(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_DWORD *)(a1 + 18DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)a1 = &unk_26C4E0600;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  unsigned int Node = Lattice<WordLatticeLC>::createNode(a1);
  if (v3)
  {
    unsigned int v5 = Node;
    unint64_t v6 = 0;
    unint64_t v7 = (v3 - 1);
    int v8 = -2;
    uint64_t v22 = v3;
    unint64_t v23 = v7;
    do
    {
      unint64_t v9 = *(unsigned int *)(*(void *)a2 + 4 * v6);
      uint64_t v10 = **(void **)VocMgr::smpVocMgr;
      uint64_t v11 = *(void *)(*(void *)(v10 + ((v9 >> 22) & 0x3F8)) + 48);
      if (v6 >= v7)
      {
        unsigned int PronSuccessorSeedCategory = *(unsigned __int8 *)(v11 + 417);
      }
      else
      {
        unint64_t v12 = *(unsigned int *)(*(void *)a2 + 4 * v6 + 4);
        unsigned int PronSuccessorSeedCategory = WordList::getPronSuccessorSeedCategory(*(WordList **)(*(void *)(v10 + ((v12 >> 22) & 0x3F8)) + 48), v12 & 0xFFFFFF);
      }
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      WordList::getWordFamilyCollatedSeedableProns(v11, v9 & 0xFFFFFF, v6 < v7, PronSuccessorSeedCategory, (uint64_t)&v27);
      unint64_t v25 = v6;
      unint64_t v14 = v28;
      if (v28)
      {
        unint64_t v15 = 0;
        int v16 = -2;
        do
        {
          uint64_t v17 = v27 + 16 * v15;
          uint64_t v18 = *(unsigned int *)(v17 + 8);
          if (v18)
          {
            for (uint64_t i = 0; i != v18; ++i)
            {
              if (!(i | v15)) {
                int v16 = Lattice<WordLatticeLC>::createNode(a1);
              }
              if (i) {
                unsigned int v20 = v8;
              }
              else {
                unsigned int v20 = v5;
              }
              int v8 = v16;
              if (v18 - 1 != i) {
                int v8 = Lattice<WordLatticeLC>::createNode(a1);
              }
              __int16 v26 = *(_WORD *)(*(void *)v17 + 2 * i);
              Lattice<PhonemeLatticeLC>::maybeCreateAndConnectLink((uint64_t *)a1, v20, v8, &v26, 1, 0);
            }
            unint64_t v14 = v28;
          }
          ++v15;
        }
        while (v15 < v14);
      }
      else
      {
        int v16 = -2;
      }
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v27);
      unint64_t v7 = v23;
      if (v16 != -2) {
        unsigned int v5 = v16;
      }
      unint64_t v6 = v25 + 1;
    }
    while (v25 + 1 != v22);
  }
  Lattice<PhonemeLatticeLC>::gc((void *)a1);
  Lattice<PhonemeLatticeLC>::topSortInternal(a1, 0);
  return a1;
}

void sub_213FF9F58(_Unwind_Exception *a1)
{
  Lattice<PhonemeLatticeLC>::~Lattice(v1);
  _Unwind_Resume(a1);
}

uint64_t Lattice<PhonemeLatticeLC>::maybeCreateAndConnectLink(uint64_t *a1, unsigned int a2, int a3, __int16 *a4, int a5, _DWORD *a6)
{
  uint64_t v9 = *(unsigned int *)(a1[10] + 24 * a2 + 20);
  if (v9 == -2)
  {
LABEL_6:
    Linuint64_t k = Lattice<PhonemeLatticeLC>::createLink((uint64_t)a1, a2, a3, a4);
    unsigned int v12 = Link;
    if (a6) {
      *a6 = *(_DWORD *)(a1[16] + 24 * Link + 4);
    }
    if (a5)
    {
      Lattice<PhonemeLatticeLC>::connectInLink(a1, Link);
      Lattice<PhonemeLatticeLC>::connectOutLink(a1, v12);
    }
    else
    {
      Lattice<PhonemeLatticeLC>::connectInLinkUnordered(a1, Link);
      Lattice<PhonemeLatticeLC>::connectOutLinkUnordered(a1, v12);
    }
    return 1;
  }
  else
  {
    uint64_t v10 = a1[16];
    while (*(_DWORD *)(v10 + 24 * v9 + 12) != a3 || *a4 != *(_WORD *)(v10 + 24 * v9))
    {
      uint64_t v9 = *(unsigned int *)(v10 + 24 * v9 + 20);
      if (v9 == -2) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    if (a6) {
      *a6 = *(_DWORD *)(v10 + 24 * v9 + 4);
    }
  }
  return result;
}

void *Lattice<PhonemeLatticeLC>::gc(void *a1)
{
  Lattice<PhonemeLatticeLC>::gcNonTerminal((unint64_t)a1);
  Lattice<PhonemeLatticeLC>::gcNonInitial((unint64_t)a1);
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    MemChunkFree(v2, 0);
    a1[22] = 0;
  }
  a1[23] = 0;
  uint64_t result = (void *)a1[20];
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    a1[20] = 0;
  }
  a1[21] = 0;
  return result;
}

void *Lattice<PhonemeLatticeLC>::~Lattice(void *a1)
{
  *a1 = &unk_26C4E4D58;
  uint64_t v2 = (uint64_t)(a1 + 2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 22));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 20));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 18));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(a1 + 16));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 14));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 12));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(a1 + 10));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 8));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 4));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  return a1;
}

void PhonemeLattice::~PhonemeLattice(PhonemeLattice *this)
{
  Lattice<PhonemeLatticeLC>::~Lattice(this);

  JUMPOUT(0x216698730);
}

unint64_t PhonemeLattice::getNextStartNodes@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t v5 = *(unsigned int *)(*(void *)(result + 80) + 24 * a2 + 20);
  if (v5 != -2)
  {
    unint64_t v7 = result;
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = *(void *)(result + 128);
    do
    {
      if (*(unsigned __int16 *)(v10 + 24 * v5) == *a3)
      {
        int v11 = *(_DWORD *)(v10 + 24 * v5 + 12);
        if (v9 == *(_DWORD *)(a4 + 12))
        {
          uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a4, 1, 1);
          unsigned int v9 = *(_DWORD *)(a4 + 8);
          uint64_t v8 = *(void *)a4;
          uint64_t v10 = *(void *)(v7 + 128);
        }
        *(_DWORD *)(v8 + 4 * v9) = v11;
        unsigned int v9 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
      }
      uint64_t v5 = *(unsigned int *)(v10 + 24 * v5 + 20);
    }
    while (v5 != -2);
  }
  return result;
}

void sub_213FFA28C(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

uint64_t PhonemeLattice::hasCommonProns(unint64_t a1, uint64_t *a2, int a3)
{
  unsigned int v4 = a2;
  if (!*(_DWORD *)(a1 + 40))
  {
    if ((a3 & 1) == 0)
    {
      LODWORD(v50) = *((_DWORD *)a2 + 2);
      if (v50)
      {
        unint64_t v51 = 0;
        do
        {
          uint64_t v52 = *v4;
          unint64_t v53 = *(unsigned int *)(*v4 + 4 * v51);
          uint64_t v54 = **(void **)VocMgr::smpVocMgr;
          uint64_t v55 = *(void *)(*(void *)(v54 + ((v53 >> 22) & 0x3F8)) + 48);
          unint64_t v56 = (v50 - 1);
          if (v51 >= v56)
          {
            unsigned int PronSuccessorSeedCategory = *(unsigned __int8 *)(v55 + 417);
          }
          else
          {
            unint64_t v57 = *(unsigned int *)(v52 + 4 * v51 + 4);
            unsigned int PronSuccessorSeedCategory = WordList::getPronSuccessorSeedCategory(*(WordList **)(*(void *)(v54 + ((v57 >> 22) & 0x3F8)) + 48), v57 & 0xFFFFFF);
          }
          uint64_t v88 = 0;
          uint64_t v89 = 0;
          WordList::getWordFamilyCollatedSeedableProns(v55, v53 & 0xFFFFFF, v51 < v56, PronSuccessorSeedCategory, (uint64_t)&v88);
          unsigned int v4 = a2;
          if (v89)
          {
            if (v88[2])
            {
              uint64_t v59 = v88 + 6;
              uint64_t v60 = 1;
              do
              {
                unint64_t v61 = v60;
                if (v89 == v60) {
                  break;
                }
                int v62 = *v59;
                v59 += 4;
                ++v60;
              }
              while (v62);
              BOOL v63 = v61 < v89;
            }
            else
            {
              BOOL v63 = 1;
            }
          }
          else
          {
            BOOL v63 = 0;
          }
          DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v88);
          if (!v63) {
            break;
          }
          ++v51;
          unint64_t v50 = *((unsigned int *)a2 + 2);
        }
        while (v51 < v50);
        return v63;
      }
    }
    return 1;
  }
  unint64_t v6 = *(int **)(a1 + 32);
  if (a3 && *v6 == **(_DWORD **)(a1 + 48)) {
    return 1;
  }
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  int v7 = *v6;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v88, 1, 1);
  v88[v89] = v7;
  LODWORD(v89) = v89 + 1;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  BitArray::BitArray((BitArray *)&v84, *(_DWORD *)(a1 + 24));
  BitArray::BitArray((BitArray *)&v82, *(_DWORD *)(a1 + 24));
  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((_DWORD *)v4 + 2);
  if (v8)
  {
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *v4;
      unint64_t v11 = *(unsigned int *)(*v4 + 4 * v9);
      uint64_t v12 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v11 >> 22) & 0x3F8)) + 48);
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      if (!v89)
      {
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v80);
        goto LABEL_82;
      }
      unint64_t v13 = (v8 - 1);
      if (v9 >= v13)
      {
        unsigned int v16 = *(unsigned __int8 *)(v12 + 417);
      }
      else
      {
        unint64_t v14 = v9;
        unint64_t v15 = *(unsigned int *)(v10 + 4 * v9 + 4);
        unsigned int v16 = WordList::getPronSuccessorSeedCategory(*(WordList **)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v15 >> 22) & 0x3F8)) + 48), v15 & 0xFFFFFF);
        unint64_t v9 = v14;
      }
      unint64_t v72 = v9;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      WordList::getWordFamilyCollatedSeedableProns(v12, v11 & 0xFFFFFF, v9 < v13, v16, (uint64_t)&v78);
      unint64_t v17 = v79;
      if (!v79) {
        goto LABEL_51;
      }
      unint64_t v18 = 0;
      char v69 = 0;
      do
      {
        uint64_t v19 = v78 + 16 * v18;
        unsigned int v20 = (_DWORD *)(v19 + 8);
        if (*(_DWORD *)(v19 + 8))
        {
          unsigned int v21 = v89;
          if (v89)
          {
            int v22 = 0;
            do
            {
              int v70 = v22;
              DgnPrimArray<int>::copyArraySlice((unint64_t)&v86, (uint64_t *)&v88, 0, v21);
              if (*v20)
              {
                unint64_t v23 = 0;
                do
                {
                  uint64_t v76 = 0;
                  uint64_t v77 = 0;
                  BitArray::clearRange((BitArray *)&v84, 0, v85);
                  if (v87)
                  {
                    unint64_t v24 = 0;
                    do
                    {
                      unsigned int v25 = *(_DWORD *)(v86 + 4 * v24);
                      unsigned __int16 v73 = *(_WORD *)(*(void *)v19 + 2 * v23);
                      PhonemeLattice::getNextStartNodes(a1, v25, &v73, (uint64_t)&v74);
                      unint64_t v26 = v75;
                      if (v75)
                      {
                        for (unint64_t i = 0; i < v26; ++i)
                        {
                          uint64_t v28 = v74;
                          unsigned int v29 = *(_DWORD *)(v74 + 4 * i);
                          unint64_t v30 = *(unsigned int *)(*(void *)(a1 + 80) + 24 * v29);
                          unint64_t v31 = v30 >> 5;
                          int v32 = *(_DWORD *)(v84 + 4 * (v30 >> 5));
                          int v33 = 1 << v30;
                          if ((v32 & v33) == 0)
                          {
                            if (a3 && v29 == **(_DWORD **)(a1 + 48))
                            {
                              DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
                              DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v76);
                              char v49 = 1;
                              unsigned int v4 = a2;
                              goto LABEL_53;
                            }
                            *(_DWORD *)(v84 + 4 * v31) = v32 | v33;
                            int v34 = *(_DWORD *)(v28 + 4 * i);
                            uint64_t v35 = v77;
                            if (v77 == (unint64_t)HIDWORD(v77))
                            {
                              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v76, 1, 1);
                              uint64_t v35 = v77;
                            }
                            *(_DWORD *)(v76 + 4 * v35) = v34;
                            LODWORD(v77) = v77 + 1;
                            unint64_t v26 = v75;
                          }
                        }
                      }
                      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
                      ++v24;
                    }
                    while (v24 < v87);
                  }
                  DgnPrimArray<int>::copyArraySlice((unint64_t)&v86, &v76, 0, v77);
                  int v36 = v87;
                  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v76);
                  if (!v36) {
                    break;
                  }
                  ++v23;
                }
                while (v23 < *(unsigned int *)(v19 + 8));
              }
              unint64_t v37 = v85;
              if (v85)
              {
                unint64_t v38 = 0;
                uint64_t v39 = v82;
                do
                {
                  uint64_t v40 = v38 >> 5;
                  int v41 = 1 << v38;
                  if ((*(_DWORD *)(v39 + 4 * v40) & (1 << v38)) == 0 && (*(_DWORD *)(v84 + 4 * v40) & v41) != 0)
                  {
                    int v42 = *(_DWORD *)(*(void *)(a1 + 16) + 4 * v38);
                    uint64_t v43 = v81;
                    if (v81 == (unint64_t)HIDWORD(v81))
                    {
                      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v80, 1, 1);
                      uint64_t v43 = v81;
                      uint64_t v39 = v82;
                    }
                    *(_DWORD *)(v80 + 4 * v43) = v42;
                    LODWORD(v81) = v81 + 1;
                    *(_DWORD *)(v39 + 4 * v40) |= v41;
                    unint64_t v37 = v85;
                  }
                  ++v38;
                }
                while (v38 < v37);
              }
              int v22 = v70 + 1;
              unsigned int v21 = v89;
              unsigned int v20 = (_DWORD *)(v19 + 8);
            }
            while (v70 + 1 < v89);
            unint64_t v17 = v79;
          }
        }
        else
        {
          char v69 = 1;
        }
        ++v18;
      }
      while (v18 < v17);
      if (v69)
      {
        int v44 = v81;
        unsigned int v4 = a2;
        if ((v89 + v81) > HIDWORD(v89))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v88, (v89 + v81 - HIDWORD(v89)), 1);
          int v44 = v81;
        }
        if (v44)
        {
          unint64_t v45 = 0;
          uint64_t v46 = v80;
          uint64_t v47 = (uint64_t)v88;
          do
          {
            *(_DWORD *)(v47 + 4 * (v45 + v89)) = *(_DWORD *)(v46 + 4 * v45);
            ++v45;
            int v48 = v81;
          }
          while (v45 < v81);
        }
        else
        {
          int v48 = 0;
        }
        LODWORD(v89) = v89 + v48;
      }
      else
      {
LABEL_51:
        DgnPrimArray<int>::copyArraySlice((unint64_t)&v88, &v80, 0, v81);
        unsigned int v4 = a2;
      }
      BitArray::clearRange((BitArray *)&v82, 0, v83);
      char v49 = 0;
LABEL_53:
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v78);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v80);
      if (v49) {
        break;
      }
      unint64_t v9 = v72 + 1;
      unint64_t v8 = *((unsigned int *)v4 + 2);
      if (v72 + 1 >= v8) {
        goto LABEL_76;
      }
    }
    BOOL v63 = 1;
  }
  else
  {
LABEL_76:
    uint64_t v64 = v89;
    if (v89)
    {
      unsigned int v65 = v88;
      uint64_t v66 = 0xFFFFFFFFLL;
      while (1)
      {
        int v67 = *v65++;
        if (v67 == **(_DWORD **)(a1 + 48)) {
          break;
        }
        --v66;
        if (!--v64) {
          goto LABEL_82;
        }
      }
      BOOL v63 = v66 != 0;
    }
    else
    {
LABEL_82:
      BOOL v63 = 0;
    }
  }
  BitArray::~BitArray((BitArray *)&v82);
  BitArray::~BitArray((BitArray *)&v84);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v86);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v88);
  return v63;
}

void sub_213FFA8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  BitArray::~BitArray((BitArray *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16 - 104);
  _Unwind_Resume(a1);
}

uint64_t Lattice<PhonemeLatticeLC>::cmpNodesByInLinksIgnoreNodes(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  unsigned int v6 = *(_DWORD *)(v5 + 24 * a2 + 8);
  unsigned int v7 = *(_DWORD *)(v5 + 24 * a3 + 8);
  if (v6 == v7)
  {
    unsigned int v8 = *(_DWORD *)(v5 + 24 * a2 + 16);
    if (v8 == -2)
    {
      return 0;
    }
    else
    {
      unint64_t v9 = (unsigned int *)(v5 + 24 * a3 + 16);
      while (1)
      {
        unsigned int v10 = *v9;
        uint64_t result = Lattice<PhonemeLatticeLC>::cmpInLink(a1, v8, *v9);
        if (result) {
          break;
        }
        uint64_t v11 = *(void *)(a1 + 128);
        uint64_t v12 = v11 + 24 * v8;
        unint64_t v9 = (unsigned int *)(v11 + 24 * v10 + 16);
        unsigned int v8 = *(_DWORD *)(v12 + 16);
        if (v8 == -2) {
          return 0;
        }
      }
    }
  }
  else if (v6 < v7)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t Lattice<PhonemeLatticeLC>::cmpNodesByOutLinksIgnoreNodes(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  unsigned int v6 = *(_DWORD *)(v5 + 24 * a2 + 12);
  unsigned int v7 = *(_DWORD *)(v5 + 24 * a3 + 12);
  if (v6 == v7)
  {
    unsigned int v8 = *(_DWORD *)(v5 + 24 * a2 + 20);
    if (v8 == -2)
    {
      return 0;
    }
    else
    {
      unint64_t v9 = (unsigned int *)(v5 + 24 * a3 + 20);
      while (1)
      {
        unsigned int v10 = *v9;
        uint64_t result = Lattice<PhonemeLatticeLC>::cmpOutLink(a1, v8, *v9);
        if (result) {
          break;
        }
        uint64_t v11 = *(void *)(a1 + 128);
        uint64_t v12 = v11 + 24 * v8;
        unint64_t v9 = (unsigned int *)(v11 + 24 * v10 + 20);
        unsigned int v8 = *(_DWORD *)(v12 + 20);
        if (v8 == -2) {
          return 0;
        }
      }
    }
  }
  else if (v6 < v7)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t Lattice<PhonemeLatticeLC>::createLink(uint64_t a1, int a2, int a3, __int16 *a4)
{
  __int16 v7 = *a4;
  int v8 = *(_DWORD *)(a1 + 120);
  if (v8)
  {
    unsigned int v9 = v8 - 1;
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 112) + 4 * v9);
    *(_DWORD *)(a1 + 120) = v9;
    uint64_t v11 = *(void *)(a1 + 128);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 136);
    unsigned int v12 = v10;
    if (v10 == *(_DWORD *)(a1 + 140))
    {
      DgnArray<CWIDAC>::reallocElts(a1 + 128, 1, 1);
      unsigned int v12 = *(_DWORD *)(a1 + 136);
    }
    uint64_t v11 = *(void *)(a1 + 128);
    *(_WORD *)(v11 + 24 * v12) = -1;
    *(_DWORD *)(a1 + 136) = v12 + 1;
  }
  uint64_t v13 = v11 + 24 * v10;
  *(_WORD *)uint64_t v13 = v7;
  unsigned int v14 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v13 + 4) = v14;
  *(_DWORD *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  *(_DWORD *)(v13 + 12) = a3;
  *(void *)(v13 + 16) = 0x100000001;
  if (v14 == *(_DWORD *)(a1 + 108))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 96, 1, 1);
    unsigned int v14 = *(_DWORD *)(a1 + 104);
  }
  *(_DWORD *)(*(void *)(a1 + 96) + 4 * v14) = v10;
  ++*(_DWORD *)(a1 + 104);
  return v10;
}

void Lattice<PhonemeLatticeLC>::connectInLink(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1[16];
  unsigned int v6 = *(_DWORD *)(v4 + 24 * a2 + 12);
  uint64_t v7 = a1[10];
  uint64_t v8 = v7 + 24 * v6;
  unsigned int v11 = *(_DWORD *)(v8 + 16);
  uint64_t v10 = (int *)(v8 + 16);
  unsigned int v9 = v11;
  if (v11 == -2)
  {
    int v12 = -2;
  }
  else
  {
    do
    {
      int v13 = Lattice<PhonemeLatticeLC>::cmpInLink((uint64_t)a1, v9, a2);
      if (v13)
      {
        if (v13 >= 1)
        {
          int v12 = *v10;
          uint64_t v4 = a1[16];
          goto LABEL_9;
        }
      }
      else
      {
        DuplicateLinkError(*(_DWORD *)(a1[16] + 24 * a2 + 4), *(_DWORD *)(a1[16] + 24 * *v10 + 4), v14, v15, v16, v17, v18, v19);
      }
      uint64_t v4 = a1[16];
      uint64_t v20 = v4 + 24 * *v10;
      unsigned int v21 = *(_DWORD *)(v20 + 16);
      uint64_t v10 = (int *)(v20 + 16);
      unsigned int v9 = v21;
    }
    while (v21 != -2);
    int v12 = -2;
LABEL_9:
    uint64_t v7 = a1[10];
  }
  *uint64_t v10 = a2;
  *(_DWORD *)(v4 + 24 * a2 + 16) = v12;
  uint64_t v22 = v7 + 24 * v6;
  int v23 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)(v22 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v23 + 1;
  if (!v23)
  {
    DgnPrimArray<unsigned int>::removeKeepOrder(a1 + 4, v6);
  }
}

void Lattice<PhonemeLatticeLC>::connectOutLink(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1[16];
  unsigned int v6 = *(_DWORD *)(v4 + 24 * a2 + 8);
  uint64_t v7 = a1[10];
  uint64_t v8 = v7 + 24 * v6;
  unsigned int v11 = *(_DWORD *)(v8 + 20);
  uint64_t v10 = (int *)(v8 + 20);
  unsigned int v9 = v11;
  if (v11 == -2)
  {
    int v12 = -2;
  }
  else
  {
    do
    {
      int v13 = Lattice<PhonemeLatticeLC>::cmpOutLink((uint64_t)a1, v9, a2);
      if (v13)
      {
        if (v13 >= 1)
        {
          int v12 = *v10;
          uint64_t v4 = a1[16];
          goto LABEL_9;
        }
      }
      else
      {
        DuplicateLinkError(*(_DWORD *)(a1[16] + 24 * a2 + 4), *(_DWORD *)(a1[16] + 24 * *v10 + 4), v14, v15, v16, v17, v18, v19);
      }
      uint64_t v4 = a1[16];
      uint64_t v20 = v4 + 24 * *v10;
      unsigned int v21 = *(_DWORD *)(v20 + 20);
      uint64_t v10 = (int *)(v20 + 20);
      unsigned int v9 = v21;
    }
    while (v21 != -2);
    int v12 = -2;
LABEL_9:
    uint64_t v7 = a1[10];
  }
  *uint64_t v10 = a2;
  *(_DWORD *)(v4 + 24 * a2 + 20) = v12;
  uint64_t v22 = v7 + 24 * v6;
  int v23 = *(_DWORD *)(v22 + 12);
  *(_DWORD *)(v22 + 12) = v23 + 1;
  if (!v23)
  {
    DgnPrimArray<unsigned int>::removeKeepOrder(a1 + 6, v6);
  }
}

uint64_t *Lattice<PhonemeLatticeLC>::connectInLinkUnordered(uint64_t *result, unsigned int a2)
{
  uint64_t v3 = result[16] + 24 * a2;
  unsigned int v4 = *(_DWORD *)(v3 + 12);
  uint64_t v5 = result[10] + 24 * v4;
  int v6 = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = a2;
  *(_DWORD *)(v3 + 16) = v6;
  int v7 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7 + 1;
  if (!v7) {
    return (uint64_t *)DgnPrimArray<unsigned int>::removeKeepOrder(result + 4, v4);
  }
  return result;
}

uint64_t *Lattice<PhonemeLatticeLC>::connectOutLinkUnordered(uint64_t *result, unsigned int a2)
{
  uint64_t v3 = result[16] + 24 * a2;
  unsigned int v4 = *(_DWORD *)(v3 + 8);
  uint64_t v5 = result[10] + 24 * v4;
  int v6 = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v5 + 20) = a2;
  *(_DWORD *)(v3 + 20) = v6;
  int v7 = *(_DWORD *)(v5 + 12);
  *(_DWORD *)(v5 + 12) = v7 + 1;
  if (!v7) {
    return (uint64_t *)DgnPrimArray<unsigned int>::removeKeepOrder(result + 6, v4);
  }
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::gcNonTerminal(unint64_t a1)
{
  Lattice<PhonemeLatticeLC>::gcSetup(a1);
  if (*(_DWORD *)(a1 + 56))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = *(_DWORD *)(a1 + 24);
    do
    {
      unsigned int v7 = *(_DWORD *)(v3 + 4 * v2);
      *(_DWORD *)(v4 + 24 * v7) = v6;
      *(_DWORD *)(v5 + 4 * v6) = v7;
      unsigned int v6 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v6;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 56));
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 24);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 48, (uint64_t *)(a1 + 16), 0, v6);
  *(_DWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 16);
      unsigned int v10 = *(_DWORD *)(v9 + 4 * v8);
      uint64_t v11 = *(void *)(a1 + 80);
      if (*(_DWORD *)(v11 + 24 * v10 + 8))
      {
        uint64_t v12 = *(unsigned int *)(v11 + 24 * v10 + 16);
        if (v12 != -2)
        {
          uint64_t v13 = *(void *)(a1 + 128);
          uint64_t v14 = *(void *)(a1 + 96);
          do
          {
            unsigned int v15 = *(_DWORD *)(v13 + 24 * v12 + 8);
            uint64_t v16 = (_DWORD *)(v11 + 24 * v15);
            if (*v16 == -1)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 24);
              _DWORD *v16 = v17;
              *(_DWORD *)(v9 + 4 * v17) = v15;
              ++*(_DWORD *)(a1 + 24);
            }
            uint64_t v18 = *(unsigned int *)(a1 + 104);
            uint64_t v19 = v13 + 24 * v12;
            *(_DWORD *)(v19 + 4) = v18;
            *(_DWORD *)(v14 + 4 * v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12;
            ++*(_DWORD *)(a1 + 104);
            uint64_t v12 = *(unsigned int *)(v19 + 16);
          }
          while (v12 != -2);
        }
      }
      else
      {
        uint64_t v20 = *(unsigned int *)(a1 + 40);
        if (v20 == *(_DWORD *)(a1 + 44))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 32, 1, 1);
          uint64_t v20 = *(unsigned int *)(a1 + 40);
        }
        *(_DWORD *)(*(void *)(a1 + 32) + 4 * v20) = v10;
        ++*(_DWORD *)(a1 + 40);
      }
      ++v8;
    }
    while (v8 < *(unsigned int *)(a1 + 24));
  }

  return Lattice<PhonemeLatticeLC>::gcCleanup(a1);
}

unint64_t Lattice<PhonemeLatticeLC>::gcNonInitial(unint64_t a1)
{
  Lattice<PhonemeLatticeLC>::gcSetup(a1);
  if (*(_DWORD *)(a1 + 40))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = *(_DWORD *)(a1 + 24);
    do
    {
      unsigned int v7 = *(_DWORD *)(v3 + 4 * v2);
      *(_DWORD *)(v4 + 24 * v7) = v6;
      *(_DWORD *)(v5 + 4 * v6) = v7;
      unsigned int v6 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v6;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 40));
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 24);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 32, (uint64_t *)(a1 + 16), 0, v6);
  *(_DWORD *)(a1 + 56) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 16);
      unsigned int v10 = *(_DWORD *)(v9 + 4 * v8);
      uint64_t v11 = *(void *)(a1 + 80);
      if (*(_DWORD *)(v11 + 24 * v10 + 12))
      {
        uint64_t v12 = *(unsigned int *)(v11 + 24 * v10 + 20);
        if (v12 != -2)
        {
          uint64_t v13 = *(void *)(a1 + 128);
          uint64_t v14 = *(void *)(a1 + 96);
          do
          {
            unsigned int v15 = *(_DWORD *)(v13 + 24 * v12 + 12);
            uint64_t v16 = (_DWORD *)(v11 + 24 * v15);
            if (*v16 == -1)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 24);
              _DWORD *v16 = v17;
              *(_DWORD *)(v9 + 4 * v17) = v15;
              ++*(_DWORD *)(a1 + 24);
            }
            uint64_t v18 = *(unsigned int *)(a1 + 104);
            uint64_t v19 = v13 + 24 * v12;
            *(_DWORD *)(v19 + 4) = v18;
            *(_DWORD *)(v14 + 4 * v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12;
            ++*(_DWORD *)(a1 + 104);
            uint64_t v12 = *(unsigned int *)(v19 + 20);
          }
          while (v12 != -2);
        }
      }
      else
      {
        uint64_t v20 = *(unsigned int *)(a1 + 56);
        if (v20 == *(_DWORD *)(a1 + 60))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 48, 1, 1);
          uint64_t v20 = *(unsigned int *)(a1 + 56);
        }
        *(_DWORD *)(*(void *)(a1 + 48) + 4 * v20) = v10;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v8;
    }
    while (v8 < *(unsigned int *)(a1 + 24));
  }

  return Lattice<PhonemeLatticeLC>::gcCleanup(a1);
}

unint64_t Lattice<PhonemeLatticeLC>::gcSetup(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 80);
    LODWORD(v5) = *(_DWORD *)(a1 + 40);
    do
    {
      if (!*(_DWORD *)(v4 + 24 * *(unsigned int *)(v3 + 4 * (v2 - 1)) + 12))
      {
        LODWORD(v5) = v5 - 1;
        if (v5 > (int)v2 - 1)
        {
          unint64_t v6 = (v2 - 1);
          do
          {
            *(_DWORD *)(v3 + 4 * v6) = *(_DWORD *)(v3 + 4 * v6 + 4);
            unint64_t v5 = (*(_DWORD *)(a1 + 40) - 1);
            ++v6;
          }
          while (v6 < v5);
        }
        *(_DWORD *)(a1 + 40) = v5;
      }
      BOOL v7 = v2-- <= 1;
    }
    while (!v7);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 80);
    LODWORD(v11) = *(_DWORD *)(a1 + 56);
    do
    {
      if (!*(_DWORD *)(v10 + 24 * *(unsigned int *)(v9 + 4 * (v8 - 1)) + 8))
      {
        LODWORD(v11) = v11 - 1;
        if (v11 > (int)v8 - 1)
        {
          unint64_t v12 = (v8 - 1);
          do
          {
            *(_DWORD *)(v9 + 4 * v12) = *(_DWORD *)(v9 + 4 * v12 + 4);
            unint64_t v11 = (*(_DWORD *)(a1 + 56) - 1);
            ++v12;
          }
          while (v12 < v11);
        }
        *(_DWORD *)(a1 + 56) = v11;
      }
      BOOL v7 = v8-- <= 1;
    }
    while (!v7);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 176, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 184);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = *(void *)(a1 + 176);
    uint64_t v15 = *(void *)(a1 + 80);
    unint64_t v16 = v13 + 1;
    do
      *(_DWORD *)(v15 + 24 * *(unsigned int *)(v14 + 4 * (v16-- - 2))) = -1;
    while (v16 > 1);
  }
  unint64_t result = DgnPrimArray<int>::copyArraySlice(a1 + 160, (uint64_t *)(a1 + 96), 0, *(_DWORD *)(a1 + 104));
  *(_DWORD *)(a1 + 104) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 168);
  if ((int)v18 >= 1)
  {
    uint64_t v19 = *(void *)(a1 + 160);
    uint64_t v20 = *(void *)(a1 + 128);
    unint64_t v21 = v18 + 1;
    do
      *(_DWORD *)(v20 + 24 * *(unsigned int *)(v19 + 4 * (v21-- - 2)) + 4) = -1;
    while (v21 > 1);
  }
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::gcCleanup(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 168);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = v2 + 1;
    do
    {
      unsigned int v4 = *(_DWORD *)(*(void *)(v1 + 160) + 4 * (v3 - 2));
      if (*(_DWORD *)(*(void *)(v1 + 128) + 24 * v4 + 4) == -1) {
        unint64_t result = Lattice<PhonemeLatticeLC>::disconnectAndDestroyLink(v1, v4);
      }
      --v3;
    }
    while (v3 > 1);
  }
  uint64_t v5 = *(unsigned int *)(v1 + 184);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = v5 + 1;
    do
    {
      unsigned int v7 = *(_DWORD *)(*(void *)(v1 + 176) + 4 * (v6 - 2));
      uint64_t v8 = *(void *)(v1 + 80);
      if (*(_DWORD *)(v8 + 24 * v7) == -1)
      {
        *(void *)(v8 + 24 * v7 + 16) = 0x100000001;
        unint64_t result = Lattice<WordLatticeLC>::destroyNode(v1, v7);
      }
      --v6;
    }
    while (v6 > 1);
  }
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::disconnectAndDestroyLink(unint64_t a1, unsigned int a2)
{
  Lattice<PhonemeLatticeLC>::disconnectInLink(a1, a2);
  Lattice<PhonemeLatticeLC>::disconnectOutLink(a1, a2);

  return Lattice<PhonemeLatticeLC>::destroyLinkNoDuplicateCheck(a1, a2);
}

unint64_t Lattice<PhonemeLatticeLC>::disconnectInLink(unint64_t result, unsigned int a2)
{
  uint64_t v3 = *(void *)(result + 128);
  unsigned int v4 = *(_DWORD *)(v3 + 24 * a2 + 12);
  uint64_t v5 = *(void *)(result + 80);
  if (*(_DWORD *)(v5 + 24 * v4) != -1)
  {
    unint64_t v6 = result;
    uint64_t v7 = v5 + 24 * v4;
    unsigned int v10 = *(_DWORD *)(v7 + 16);
    uint64_t v8 = (_DWORD *)(v7 + 16);
    uint64_t v9 = v10;
    BOOL v11 = v10 == (unint64_t)a2;
    if (v10 != -2 && v9 != a2)
    {
      do
      {
        uint64_t v13 = v3 + 24 * v9;
        unsigned int v14 = *(_DWORD *)(v13 + 16);
        uint64_t v8 = (_DWORD *)(v13 + 16);
        uint64_t v9 = v14;
        BOOL v11 = v14 == (unint64_t)a2;
      }
      while (v14 != -2 && v9 != a2);
    }
    if (v11)
    {
      *uint64_t v8 = *(_DWORD *)(v3 + 24 * a2 + 16);
      uint64_t v16 = v5 + 24 * v4;
      int v17 = *(_DWORD *)(v16 + 8) - 1;
      *(_DWORD *)(v16 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v17;
      if (!v17)
      {
        unsigned int v18 = *(_DWORD *)(result + 40);
        if (v18 == *(_DWORD *)(result + 44))
        {
          unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 32, 1, 1);
          unsigned int v18 = *(_DWORD *)(v6 + 40);
          uint64_t v3 = *(void *)(v6 + 128);
        }
        *(_DWORD *)(*(void *)(v6 + 32) + 4 * v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4;
        ++*(_DWORD *)(v6 + 40);
      }
    }
  }
  *(_DWORD *)(v3 + 24 * a2 + 12) = -2;
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::disconnectOutLink(unint64_t result, unsigned int a2)
{
  uint64_t v3 = *(void *)(result + 128);
  unsigned int v4 = *(_DWORD *)(v3 + 24 * a2 + 8);
  uint64_t v5 = *(void *)(result + 80);
  if (*(_DWORD *)(v5 + 24 * v4) != -1)
  {
    unint64_t v6 = result;
    uint64_t v7 = v5 + 24 * v4;
    unsigned int v10 = *(_DWORD *)(v7 + 20);
    uint64_t v8 = (_DWORD *)(v7 + 20);
    uint64_t v9 = v10;
    BOOL v11 = v10 == (unint64_t)a2;
    if (v10 != -2 && v9 != a2)
    {
      do
      {
        uint64_t v13 = v3 + 24 * v9;
        unsigned int v14 = *(_DWORD *)(v13 + 20);
        uint64_t v8 = (_DWORD *)(v13 + 20);
        uint64_t v9 = v14;
        BOOL v11 = v14 == (unint64_t)a2;
      }
      while (v14 != -2 && v9 != a2);
    }
    if (v11)
    {
      *uint64_t v8 = *(_DWORD *)(v3 + 24 * a2 + 20);
      uint64_t v16 = v5 + 24 * v4;
      int v17 = *(_DWORD *)(v16 + 12) - 1;
      *(_DWORD *)(v16 + 12) = v17;
      if (!v17)
      {
        unsigned int v18 = *(_DWORD *)(result + 56);
        if (v18 == *(_DWORD *)(result + 60))
        {
          unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 48, 1, 1);
          unsigned int v18 = *(_DWORD *)(v6 + 56);
          uint64_t v3 = *(void *)(v6 + 128);
        }
        *(_DWORD *)(*(void *)(v6 + 48) + 4 * v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4;
        ++*(_DWORD *)(v6 + 56);
      }
    }
  }
  *(_DWORD *)(v3 + 24 * a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -2;
  return result;
}

unint64_t Lattice<PhonemeLatticeLC>::destroyLinkNoDuplicateCheck(unint64_t result, unsigned int a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 128);
  uint64_t v5 = *(unsigned int *)(v4 + 24 * a2 + 4);
  if (v5 != -1)
  {
    unsigned int v6 = *(_DWORD *)(result + 104) - 1;
    uint64_t v7 = *(void *)(result + 96);
    unsigned int v8 = *(_DWORD *)(v7 + 4 * v6);
    *(_DWORD *)(v7 + 4 * v5) = v8;
    *(_DWORD *)(v4 + 24 * v8 + 4) = v5;
    *(_DWORD *)(result + 104) = v6;
  }
  unsigned int v9 = *(_DWORD *)(result + 120);
  if (v9 == *(_DWORD *)(result + 124))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 112, 1, 1);
    unsigned int v9 = *(_DWORD *)(v3 + 120);
  }
  *(_DWORD *)(*(void *)(v3 + 112) + 4 * v9) = a2;
  ++*(_DWORD *)(v3 + 120);
  return result;
}

uint64_t Lattice<PhonemeLatticeLC>::topSortInternal(uint64_t a1, int a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  uint64_t v5 = (void *)(a1 + 16);
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  if (v4)
  {
    v73[0] = 0;
    unint64_t v6 = realloc_array(0, v73, 4 * v4, 0, 0, 1);
    uint64_t v7 = v73[0];
    uint64_t v74 = v73[0];
    int v8 = *(_DWORD *)(a1 + 24);
    LODWORD(v75) = v4;
    HIDWORD(v75) = v6 >> 2;
    if (!v8)
    {
      unsigned int v21 = 0;
      goto LABEL_36;
    }
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 80);
    do
    {
      unsigned int v13 = *(_DWORD *)(v11 + 4 * v9);
      int v14 = *(_DWORD *)(v12 + 24 * v13 + 8);
      if (!v14)
      {
        if (v9 == v10)
        {
          int v14 = 0;
        }
        else
        {
          if (a2) {
            goto LABEL_66;
          }
          unsigned int v15 = *(_DWORD *)(v11 + 4 * v10);
          *(_DWORD *)(v11 + 4 * v9) = v15;
          *(_DWORD *)(v12 + 24 * v15) = v9;
          *(_DWORD *)(v11 + 4 * v10) = v13;
          *(_DWORD *)(v12 + 24 * v13) = v10;
          int v14 = v7[v10];
          v7[v10] = 0;
        }
        uint64_t v10 = (v10 + 1);
      }
      v7[v9++] = v14;
    }
    while (v9 < *(unsigned int *)(a1 + 24));
    if (v10 >= 2)
    {
      if (a2)
      {
        uint64_t v16 = (unsigned int *)(*v5 + 4);
        uint64_t v17 = *(unsigned int *)*v5;
        uint64_t v18 = v10 - 1;
        while (1)
        {
          unsigned int v20 = *v16++;
          uint64_t v19 = v20;
          if (v17 == v20
            || *(_DWORD *)(*(void *)(a1 + 80) + 24 * v17 + 4) >= *(_DWORD *)(*(void *)(a1 + 80)
                                                                             + 24 * v19
                                                                             + 4))
          {
            goto LABEL_66;
          }
          uint64_t v17 = v19;
          if (!--v18) {
            goto LABEL_19;
          }
        }
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 24))(a1, v5, v10);
      if ((int)v10 >= 1)
      {
        uint64_t v67 = *(void *)(a1 + 16);
        uint64_t v68 = *(void *)(a1 + 80);
        unint64_t v69 = v10;
        uint64_t v70 = *(void *)(a1 + 32);
        do
        {
          BOOL v71 = v69-- > 1;
          *(_DWORD *)(v68 + 24 * *(unsigned int *)(v67 + 4 * v69)) = v69;
          *(_DWORD *)(v70 + 4 * v69) = *(_DWORD *)(v67 + 4 * v69);
        }
        while (v71);
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
    LODWORD(v75) = 0;
  }
LABEL_19:
  unsigned int v21 = *(_DWORD *)(a1 + 24);
  if (v21)
  {
    unint64_t v22 = 0;
    unsigned int v23 = 0;
    uint64_t v24 = *(void *)(a1 + 16);
    uint64_t v25 = *(void *)(a1 + 80);
    do
    {
      uint64_t v26 = *(unsigned int *)(v25 + 24 * *(unsigned int *)(v24 + 4 * v22) + 20);
      if (v26 != -2)
      {
        uint64_t v27 = *(void *)(a1 + 128);
        uint64_t v28 = v74;
        do
        {
          uint64_t v29 = *(unsigned int *)(v27 + 24 * v26 + 4);
          if (v23 != v29)
          {
            if (a2) {
              goto LABEL_66;
            }
            uint64_t v30 = *(void *)(a1 + 96);
            unsigned int v31 = *(_DWORD *)(v30 + 4 * v29);
            unsigned int v32 = *(_DWORD *)(v30 + 4 * v23);
            *(_DWORD *)(v30 + 4 * v29) = v32;
            *(_DWORD *)(v27 + 24 * v32 + 4) = v29;
            *(_DWORD *)(v30 + 4 * v23) = v31;
            *(_DWORD *)(v27 + 24 * v31 + 4) = v23;
          }
          uint64_t v33 = *(unsigned int *)(v25 + 24 * *(unsigned int *)(v27 + 24 * v26 + 12));
          int v34 = v28[v33] - 1;
          v28[v33] = v34;
          if (!v34)
          {
            if (v33 != v10)
            {
              if (a2) {
                goto LABEL_66;
              }
              unsigned int v35 = *(_DWORD *)(v24 + 4 * v33);
              unsigned int v36 = *(_DWORD *)(v24 + 4 * v10);
              *(_DWORD *)(v24 + 4 * v33) = v36;
              *(_DWORD *)(v25 + 24 * v36) = v33;
              *(_DWORD *)(v24 + 4 * v10) = v35;
              *(_DWORD *)(v25 + 24 * v35) = v10;
              v28[v33] = v28[v10];
              v28[v10] = 0;
            }
            LODWORD(v10) = v10 + 1;
          }
          uint64_t v26 = *(unsigned int *)(v27 + 24 * v26 + 20);
          ++v23;
        }
        while (v26 != -2);
        unsigned int v21 = *(_DWORD *)(a1 + 24);
      }
      ++v22;
    }
    while (v22 < v21);
  }
LABEL_36:
  unsigned int v37 = *(_DWORD *)(a1 + 56);
  if (v37 >= 2)
  {
    if (a2)
    {
      int v38 = v37 - 1;
      unsigned int v39 = v21 - 2;
      while (1)
      {
        BOOL v40 = __OFSUB__(v38--, 1);
        if (v38 < 0 != v40) {
          break;
        }
        unsigned int v41 = *(_DWORD *)(*v5 + 4 * v39);
        unsigned int v42 = *(_DWORD *)(*v5 + 4 * (v39 + 1));
        if (v41 != v42)
        {
          --v39;
          if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v41 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * v42 + 4)) {
            continue;
          }
        }
        goto LABEL_66;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a1 + 48);
      if ((int)(v37 - 1) < 0) {
        goto LABEL_60;
      }
      uint64_t v43 = *(void *)(a1 + 16);
      uint64_t v44 = *(void *)(a1 + 80);
      unint64_t v45 = (unsigned int *)(*(void *)(a1 + 48) + 4 * (v37 - 1));
      unsigned int v46 = *(_DWORD *)(a1 + 24) - 1;
      do
      {
        unsigned int v47 = *v45--;
        *(_DWORD *)(v43 + 4 * v46) = v47;
        *(_DWORD *)(v44 + 24 * v47) = v46--;
        --v37;
      }
      while (v37);
    }
  }
  if (a2)
  {
    unsigned int v48 = *(_DWORD *)(a1 + 24);
    if (v48)
    {
      unsigned __int8 v49 = 0;
      unint64_t v50 = *(unsigned int **)(a1 + 16);
      uint64_t v51 = *(void *)(a1 + 80);
      char v52 = 1;
      uint64_t v53 = *(unsigned int *)(a1 + 24);
      do
      {
        unsigned int v55 = *v50++;
        unsigned int v54 = v55;
        int v56 = *(_DWORD *)(v51 + 24 * v55 + 8);
        if ((v52 & 1) == 0 && !v56) {
          goto LABEL_66;
        }
        int v57 = *(_DWORD *)(v51 + 24 * v54 + 12);
        if ((v49 & (v57 != 0)) != 0) {
          goto LABEL_66;
        }
        v49 |= v57 == 0;
        v52 &= v56 == 0;
      }
      while (--v53);
    }
    DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v73, v48);
    size_t v58 = *(unsigned int *)(a1 + 24);
    if ((int)v58 >= 1) {
      bzero(v73[0], v58);
    }
    uint64_t v59 = *(unsigned int *)(a1 + 104);
    if (v59)
    {
      uint64_t v60 = *(unsigned int **)(a1 + 96);
      uint64_t v61 = *(void *)(a1 + 128);
      uint64_t v62 = *(void *)(a1 + 80);
      BOOL v63 = v73[0];
      while (1)
      {
        unsigned int v64 = *v60++;
        uint64_t v65 = v61 + 24 * v64;
        v63[*(unsigned int *)(v62 + 24 * *(unsigned int *)(v65 + 8))] = 1;
        if (v63[*(unsigned int *)(v62 + 24 * *(unsigned int *)(v65 + 12))]) {
          break;
        }
        if (!--v59) {
          goto LABEL_59;
        }
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
LABEL_66:
      uint64_t v66 = 0;
      goto LABEL_67;
    }
LABEL_59:
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
  }
LABEL_60:
  uint64_t v66 = 1;
LABEL_67:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
  return v66;
}

void sub_213FFBBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MrecInitLibrarySet_throughGerm(void)
{
  MrecInitLibrarySet_throughUser();
  MrecInitLibrarySet_throughVoc();

  return MrecInitModule_sdpres_sdapi();
}

void TCliticsParamManager::TCliticsParamManager(TCliticsParamManager *this, TLocaleInfo *a2)
{
  TLattProcParamManager::TLattProcParamManager(this, a2);
  *unint64_t v3 = &unk_26C4E2C88;
  uint64_t v4 = (TParam *)(v3 + 62);
  TBoolParam::TBoolParam((uint64_t)(v3 + 62), (uint64_t)"D", (uint64_t)"L", 0, 0, (uint64_t)"1", (uint64_t)&unk_2140A8534);
  TIntParam::TIntParam((TCliticsParamManager *)((char *)this + 744), (uint64_t)"C", (uint64_t)"T", 0, 0, 300, 0, (uint64_t)"1", (uint64_t)&unk_2140A8534);
  TBoolParam::TBoolParam((uint64_t)this + 1096, (uint64_t)"C", (uint64_t)"R", 0, 0, (uint64_t)"1", (uint64_t)&unk_2140A8534);
  TStringParam::TStringParam((char *)this + 1344, "C", "S", 256, &unk_2140A8534, "1", &unk_2140A8534);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TCliticsParamManager *)((char *)this + 744));
  TParamManager::add(this, (TCliticsParamManager *)((char *)this + 1096));
  TParamManager::add(this, (TCliticsParamManager *)((char *)this + 1344));
}

void sub_213FFBD78(_Unwind_Exception *a1)
{
  TBoolParam::~TBoolParam(v4);
  TParam::~TParam(v3);
  TBoolParam::~TBoolParam(v2);
  TLattProcParamManager::~TLattProcParamManager(v1);
  _Unwind_Resume(a1);
}

void TCliticsProc::TCliticsProc(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)TLatticeProcessor::TLatticeProcessor(a1, a2, 0);
  *unint64_t v3 = &unk_26C4DFBC0;
  TRegExp::TRegExp(v3 + 9, a2 + 240);
  operator new();
}

void sub_213FFBEDC(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v3, 0x10F3C40A031EB00);
  TRegExp::~TRegExp(v2);
  TLatticeProcessor::~TLatticeProcessor(v1);
  _Unwind_Resume(a1);
}

void TCliticsProc::~TCliticsProc(TCliticsProc *this)
{
  *(void *)this = &unk_26C4DFBC0;
  uint64_t v2 = (TCliticsProc *)((char *)this + 72);
  TRne::freeMemory(this);
  TRegExp::~TRegExp(v2);

  TLatticeProcessor::~TLatticeProcessor(this);
}

{
  uint64_t vars8;

  TCliticsProc::~TCliticsProc(this);

  JUMPOUT(0x216698730);
}

void TCliticsProc::applyInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  TFsa::topologicalSort((unint64_t *)(a3 + 24), &v117);
  int v8 = v117;
  uint64_t v7 = v118;
  unint64_t v9 = (v118 - v117) >> 3;
  uint64_t v100 = a3;
  uint64_t v12 = a3 + 128;
  uint64_t v11 = *(void *)(a3 + 128);
  uint64_t v10 = *(void *)(v12 + 8);
  uint64_t v114 = 0;
  unsigned int v115 = 0;
  uint64_t v116 = 0;
  std::vector<unsigned long>::vector(v113, v9 + 1);
  std::vector<unsigned long>::vector(v112, (v7 - v8) >> 3);
  std::vector<TWord const*>::vector(v111, (v10 - v11) >> 3);
  TAllocator::TAllocator((TAllocator *)v110, 2048);
  *a5 = 0;
  uint64_t v105 = -1;
  std::vector<unsigned long>::vector(v109, (v7 - v8) >> 3, &v105);
  uint64_t v97 = (v7 - v8) >> 3;
  if (v7 != v8)
  {
    uint64_t v13 = 0;
    if (v9 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (v7 - v8) >> 3;
    }
    uint64_t v95 = v14;
    while (1)
    {
      unsigned int v15 = *(void **)&v117[8 * v13];
      *((void *)v112[0] + *v15) = v13;
      uint64_t v96 = v13;
      *((void *)v113[0] + v13) = (v115 - v114) >> 3;
      uint64_t v16 = v15[2];
      if (v16) {
        break;
      }
LABEL_73:
      uint64_t v13 = v96 + 1;
      if (v96 + 1 == v95) {
        goto LABEL_74;
      }
    }
    while (1)
    {
      uint64_t v17 = *(void **)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t v19 = *((void *)v112[0] + **(void **)(v16 + 24));
      if (**(void **)v16 != 2 || (v17[2] & 1) != 0)
      {
        uint64_t v22 = 0;
        int v23 = 2;
      }
      else
      {
        unsigned int v20 = (__int32 *)v17[1];
        Word = (TWord *)TLexicon::findWord(*(void **)(a1 + 16), v20);
        uint64_t v22 = (uint64_t)Word;
        if (Word)
        {
          int v23 = (*(_DWORD *)TWord::getOptionalTagBits(Word) >> 6) & 1;
        }
        else
        {
          uint64_t v22 = TLexicon::addTempWord(*(void *)(a1 + 16), v20, 0, 0, 0);
          int v23 = 0;
        }
      }
      *((void *)v111[0] + v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v22;
      uint64_t v24 = (unint64_t *)((char *)v113[0] + 8 * v19);
      unint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      BOOL v27 = *v24 == v26;
      if (*v24 < v26) {
        break;
      }
LABEL_50:
      unint64_t v9 = v97;
      if (v27)
      {
        unint64_t v45 = (void *)TAllocator::allocate((TAllocator *)v110, 24);
        unsigned int v46 = v45;
        uint64_t v47 = 8 * (v23 == 2);
        if (v23 == 1) {
          uint64_t v47 = 1;
        }
        *unint64_t v45 = 0;
        v45[1] = v18;
        v45[2] = v47;
        unsigned int v48 = v115;
        if (v115 >= v116)
        {
          uint64_t v50 = (v115 - v114) >> 3;
          if ((unint64_t)(v50 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v51 = (v116 - v114) >> 2;
          if (v51 <= v50 + 1) {
            unint64_t v51 = v50 + 1;
          }
          if ((unint64_t)(v116 - v114) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v51;
          }
          if (v52) {
            uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v116, v52);
          }
          else {
            uint64_t v53 = 0;
          }
          unsigned int v54 = &v53[8 * v50];
          *(void *)unsigned int v54 = v46;
          unsigned __int8 v49 = v54 + 8;
          int v56 = v114;
          unsigned int v55 = v115;
          if (v115 != v114)
          {
            do
            {
              uint64_t v57 = *((void *)v55 - 1);
              v55 -= 8;
              *((void *)v54 - 1) = v57;
              v54 -= 8;
            }
            while (v55 != v56);
            unsigned int v55 = v114;
          }
          uint64_t v114 = v54;
          unsigned int v115 = v49;
          uint64_t v116 = &v53[8 * v52];
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          *(void *)unsigned int v115 = v45;
          unsigned __int8 v49 = v48 + 8;
        }
        unsigned int v115 = v49;
      }
      uint64_t v16 = *(void *)(v16 + 32);
      if (!v16) {
        goto LABEL_73;
      }
    }
    if (v23 == 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = 8 * (v23 == 2);
    }
    while (1)
    {
      uint64_t v29 = *(void *)&v114[8 * v25];
      if (*(unsigned char *)(v29 + 16)) {
        break;
      }
      if (v23 == 1)
      {
        uint64_t v30 = (void *)TAllocator::allocate((TAllocator *)v110, 24);
        void *v30 = v29;
        v30[1] = v18;
        v30[2] = 2;
        unsigned int v31 = v115;
        if (v115 >= v116)
        {
          uint64_t v32 = (v115 - v114) >> 3;
          if ((unint64_t)(v32 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v33 = (v116 - v114) >> 2;
          if (v33 <= v32 + 1) {
            unint64_t v33 = v32 + 1;
          }
          if ((unint64_t)(v116 - v114) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            unsigned int v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v116, v34);
          }
          else {
            unsigned int v35 = 0;
          }
          unsigned int v39 = &v35[8 * v32];
          *(void *)unsigned int v39 = v30;
          unsigned int v36 = v39 + 8;
          uint64_t v43 = v114;
          BOOL v40 = v115;
          if (v115 != v114)
          {
            do
            {
              uint64_t v44 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v39 - 1) = v44;
              v39 -= 8;
            }
            while (v40 != v43);
            goto LABEL_45;
          }
          goto LABEL_46;
        }
LABEL_28:
        *(void *)unsigned int v31 = v30;
        unsigned int v36 = v31 + 8;
        goto LABEL_48;
      }
      addTransitionToLattice(v100, (uint64_t)v111, v29, *(void *)(a1 + 16), *(void *)(a1 + 56), a1 + 72, a4, (uint64_t)v109, a5);
      BOOL v27 = 1;
LABEL_49:
      if (++v25 == v26) {
        goto LABEL_50;
      }
    }
    uint64_t v30 = (void *)TAllocator::allocate((TAllocator *)v110, 24);
    void *v30 = v29;
    v30[1] = v18;
    v30[2] = v28;
    unsigned int v31 = v115;
    if (v115 < v116) {
      goto LABEL_28;
    }
    uint64_t v37 = (v115 - v114) >> 3;
    if ((unint64_t)(v37 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v38 = (v116 - v114) >> 2;
    if (v38 <= v37 + 1) {
      unint64_t v38 = v37 + 1;
    }
    if ((unint64_t)(v116 - v114) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v38;
    }
    if (v34) {
      unsigned int v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v116, v34);
    }
    else {
      unsigned int v35 = 0;
    }
    unsigned int v39 = &v35[8 * v37];
    *(void *)unsigned int v39 = v30;
    unsigned int v36 = v39 + 8;
    unsigned int v41 = v114;
    BOOL v40 = v115;
    if (v115 != v114)
    {
      do
      {
        uint64_t v42 = *((void *)v40 - 1);
        v40 -= 8;
        *((void *)v39 - 1) = v42;
        v39 -= 8;
      }
      while (v40 != v41);
LABEL_45:
      BOOL v40 = v114;
    }
LABEL_46:
    uint64_t v114 = v39;
    unsigned int v115 = v36;
    uint64_t v116 = &v35[8 * v34];
    if (v40) {
      operator delete(v40);
    }
LABEL_48:
    unsigned int v115 = v36;
    goto LABEL_49;
  }
LABEL_74:
  *((void *)v113[0] + v9) = (v115 - v114) >> 3;
  uint64_t v59 = *(void **)(v100 + 200);
  size_t v58 = *(void **)(v100 + 208);
  if (v59 != v58)
  {
    while (!*v59)
    {
      if (++v59 == v58) {
        goto LABEL_89;
      }
    }
  }
  if (v59 != v58)
  {
    do
    {
      uint64_t v60 = (unint64_t *)((char *)v113[0] + 8 * *((void *)v112[0] + *(void *)*v59));
      unint64_t v61 = *v60;
      unint64_t v62 = v60[1];
      if (*v60 < v62)
      {
        do
        {
          uint64_t v63 = *(void *)&v114[8 * v61];
          if ((*(unsigned char *)(v63 + 16) & 1) == 0) {
            addTransitionToLattice(v100, (uint64_t)v111, v63, *(void *)(a1 + 16), *(void *)(a1 + 56), a1 + 72, a4, (uint64_t)v109, a5);
          }
          ++v61;
        }
        while (v62 != v61);
      }
      unsigned int v64 = v59 + 1;
      while (v64 != v58)
      {
        if (*v64++)
        {
          uint64_t v59 = v64 - 1;
          goto LABEL_88;
        }
      }
      uint64_t v59 = v58;
LABEL_88:
      ;
    }
    while (v59 != *(void **)(v100 + 208));
  }
LABEL_89:
  if (!*a5) {
    *a5 = 1;
  }
  uint64_t v66 = *(void *)(a1 + 56);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v66 + 496));
  unint64_t v72 = v97;
  if (*(unsigned char *)(v66 + TParam::getValidConfig((TParam *)(v66 + 496), ActiveConfigHandle) + 648))
  {
    tknPrintf("=== START PRODUCTIONS ===\n", v68, v69, v70, v71);
    uint64_t v77 = v114;
    if (v115 != v114)
    {
      unint64_t v78 = 0;
      unint64_t v79 = 0;
      do
      {
        if (v79 <= v72)
        {
          do
          {
            if (v78 != *((void *)v113[0] + v79)) {
              break;
            }
            tknPrintf("Productions for State #%llu...\n", v73, v74, v75, v76, v79++);
          }
          while (v79 <= v72);
          uint64_t v77 = v114;
        }
        uint64_t v80 = *(uint64_t ****)&v77[8 * v78];
        uint64_t v81 = v80[1];
        if (*((void *)v111[0] + (void)v81))
        {
          uint64_t v105 = (uint64_t)v107;
          long long v106 = xmmword_214085190;
          char v108 = 1;
          uint64_t v82 = (__int32 **)*((void *)v111[0] + (void)v81);
          if (v82)
          {
            TWord::getWrittenForm(v82, (uint64_t)&v105);
            unsigned int v83 = (unsigned int *)**((void **)v111[0] + (void)v80[1]);
          }
          else
          {
            TBuffer<wchar_t>::assign((uint64_t)&v105, (int *)"(");
            if (*((void *)&v106 + 1) >= (unint64_t)v106)
            {
              if (v108)
              {
                LODWORD(__p) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v105, *((unint64_t *)&v106 + 1), (int *)&__p, 1uLL);
                unsigned int v83 = (unsigned int *)v105;
                --*((void *)&v106 + 1);
              }
              else
              {
                unsigned int v83 = (unsigned int *)v105;
                if ((void)v106) {
                  *(_DWORD *)(v105 + 4 * v106 - 4) = 0;
                }
              }
            }
            else
            {
              unsigned int v83 = (unsigned int *)v105;
              *(_DWORD *)(v105 + 4 * *((void *)&v106 + 1)) = 0;
            }
          }
          uint64_t v84 = *v80;
          if (*v80)
          {
            long long __p = v103;
            long long v102 = xmmword_214085190;
            char v104 = 1;
            do
            {
              if (((_BYTE)v84[2] & 8) != 0)
              {
                unsigned int v85 = (int *)"(";
                unint64_t v86 = 9;
              }
              else
              {
                TWord::getWrittenForm(*((__int32 ***)v111[0] + (void)v84[1]), (uint64_t)&__p);
                if (*((void *)&v102 + 1) >= (unint64_t)v102)
                {
                  if (v104)
                  {
                    v120[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v102 + 1), v120, 1uLL);
                    unsigned int v85 = (int *)__p;
                    --*((void *)&v102 + 1);
                  }
                  else
                  {
                    unsigned int v85 = (int *)__p;
                    if ((void)v102) {
                      *((_DWORD *)__p + v102 - 1) = 0;
                    }
                  }
                }
                else
                {
                  unsigned int v85 = (int *)__p;
                  *((_DWORD *)__p + *((void *)&v102 + 1)) = 0;
                }
                uint64_t v87 = 0;
                while (v85[v87++])
                  ;
                unint64_t v86 = v87 - 1;
              }
              TBuffer<wchar_t>::insert((uint64_t)&v105, 0, v85, v86);
              uint64_t v84 = (uint64_t **)*v84;
            }
            while (v84);
            if (*((void *)&v106 + 1) >= (unint64_t)v106)
            {
              if (v108)
              {
                v120[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v105, *((unint64_t *)&v106 + 1), v120, 1uLL);
                unsigned int v83 = (unsigned int *)v105;
                --*((void *)&v106 + 1);
              }
              else
              {
                unsigned int v83 = (unsigned int *)v105;
                if ((void)v106) {
                  *(_DWORD *)(v105 + 4 * v106 - 4) = 0;
                }
              }
            }
            else
            {
              unsigned int v83 = (unsigned int *)v105;
              *(_DWORD *)(v105 + 4 * *((void *)&v106 + 1)) = 0;
            }
            if (v104 && __p != v103 && __p) {
              MEMORY[0x216698730]();
            }
          }
          uint64_t v89 = (uint64_t)v80[2];
          loggableUnicode(v83, &__p);
          p_p = &__p;
          if (v102 < 0) {
            p_p = __p;
          }
          tknPrintf("Production #%llu (0x%llx): %s\n", v90, v91, v92, v93, v78, v89, p_p);
          unint64_t v72 = v97;
          if (SHIBYTE(v102) < 0) {
            operator delete(__p);
          }
          if (v108 && (unsigned char *)v105 != v107 && v105) {
            MEMORY[0x216698730]();
          }
        }
        else
        {
          tknPrintf("Production #%llu (0x%llx): (UNKNOWN)\n", v73, v74, v75, v76, v78, v80[2]);
        }
        ++v78;
        uint64_t v77 = v114;
      }
      while (v78 < (v115 - v114) >> 3);
    }
    tknPrintf("=== END PRODUCTIONS ===\n", v73, v74, v75, v76);
  }
  if (v109[0])
  {
    v109[1] = v109[0];
    operator delete(v109[0]);
  }
  TAllocator::clear((TAllocator *)v110);
  if (v111[0])
  {
    v111[1] = v111[0];
    operator delete(v111[0]);
  }
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  if (v113[0])
  {
    v113[1] = v113[0];
    operator delete(v113[0]);
  }
  if (v114)
  {
    unsigned int v115 = v114;
    operator delete(v114);
  }
  if (v117)
  {
    uint64_t v118 = v117;
    operator delete(v117);
  }
}

void sub_213FFC938(_Unwind_Exception *a1)
{
  TAllocator::clear((TAllocator *)(v1 - 256));
  uint64_t v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(void *)(v1 - 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 192);
  if (v4)
  {
    *(void *)(v1 - 184) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 - 168);
  if (v5)
  {
    *(void *)(v1 - 160) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(v1 - 144);
  if (v6)
  {
    *(void *)(v1 - 136) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(v1 - 120);
  if (v7)
  {
    *(void *)(v1 - 112) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t addTransitionToLattice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  unint64_t v51 = v14;
  unint64_t v52 = v13;
  unsigned int v55 = v15;
  if ((*(unsigned char *)(v10 + 16) & 0x10) == 0)
  {
    uint64_t v16 = v12;
    uint64_t v17 = (TParam *)v11;
    uint64_t v18 = (void *)v10;
    uint64_t v19 = result;
    unsigned int v20 = (TParam *)(v11 + 1096);
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 1096));
    int v49 = *((unsigned __int8 *)v20 + TParam::getValidConfig(v20, ActiveConfigHandle) + 152);
    uint64_t v17 = (TParam *)((char *)v17 + 744);
    uint64_t v22 = TParam::getActiveConfigHandle(v17);
    unint64_t v56 = *((int *)v17 + TParam::getValidConfig(v17, v22) + 40);
    uint64_t v50 = v16[2];
    uint64_t v70 = (unsigned int *)&v72;
    long long v71 = xmmword_214085190;
    char v73 = 1;
    int v23 = *(void ***)(*(void *)(v19 + 128) + 8 * v18[1]);
    uint64_t v24 = *v23[3];
    uint64_t v53 = *v23[2];
    unsigned int v54 = *v23;
    int v25 = *((_DWORD *)*v23 + 4);
    unint64_t v26 = (*v23)[5];
    long long v27 = *((_OWORD *)*v23 + 6);
    v69[2] = *((_OWORD *)*v23 + 5);
    v69[3] = v27;
    long long v28 = v54[8];
    v69[4] = v54[7];
    v69[5] = v28;
    long long v29 = v54[4];
    v69[0] = v54[3];
    v69[1] = v29;
    uint64_t v30 = (void *)*v18;
    if (!*v18)
    {
LABEL_67:
      uint64_t v47 = *v51;
      if (*(void *)(*v51 + 8 * v24) == -1) {
        *(void *)(v47 + 8 * v24) = (*a9)++;
      }
      if (*(void *)(v47 + 8 * v53) == -1) {
        *(void *)(v47 + 8 * v53) = (*a9)++;
      }
      operator new();
    }
    unsigned int v48 = v16;
    BOOL v31 = (v18[2] & 3) == 0;
    while (1)
    {
      uint64_t v32 = v30;
      uint64_t v33 = v30[1];
      unint64_t v34 = *(void ***)(*(void *)(v19 + 128) + 8 * v33);
      uint64_t v24 = *v34[3];
      unsigned int v35 = *v34;
      int v36 = *((_DWORD *)*v34 + 4);
      v26 += (*v34)[5];
      if (v31) {
        goto LABEL_9;
      }
      uint64_t v37 = v32[2];
      if ((v37 & 8) != 0) {
        break;
      }
      if ((v37 & 3) == 0)
      {
        uint64_t v40 = *v55;
        if (!v50) {
          goto LABEL_28;
        }
        TWord::getCategoryTag(*(void *)(v40 + 8 * v33), &v70);
        if (*((void *)&v71 + 1) >= (unint64_t)v71)
        {
          if (v73)
          {
            LODWORD(v65) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v70, *((unint64_t *)&v71 + 1), (int *)&v65, 1uLL);
            unsigned int v41 = v70;
            --*((void *)&v71 + 1);
          }
          else
          {
            unsigned int v41 = v70;
            if ((void)v71) {
              v70[(void)v71 - 1] = 0;
            }
          }
        }
        else
        {
          unsigned int v41 = v70;
          v70[*((void *)&v71 + 1)] = 0;
        }
        BOOL v42 = TRegExp::match(v48, v41, 0);
        uint64_t v33 = v32[1];
        uint64_t v40 = *v55;
        if (!v42)
        {
          BOOL v38 = 0;
        }
        else
        {
LABEL_28:
          uint64_t v65 = (int *)v67;
          long long v66 = xmmword_214085190;
          char v68 = 1;
          TWord::getWrittenForm(*(__int32 ***)(v40 + 8 * v33), (uint64_t)&v65);
          unint64_t v61 = v63;
          long long v62 = xmmword_214085190;
          char v64 = 1;
          TWord::getWrittenForm(*(__int32 ***)(*v55 + 8 * v18[1]), (uint64_t)&v61);
          uint64_t v57 = (__int32 *)v59;
          long long v58 = xmmword_214085190;
          char v60 = 1;
          TBuffer<wchar_t>::operator=((uint64_t)&v57, (uint64_t)&v65);
          TBuffer<wchar_t>::operator+=((uint64_t)&v57, (uint64_t)&v61);
          if (!v49) {
            goto LABEL_37;
          }
          if (*((void *)&v66 + 1) >= (unint64_t)v66)
          {
            if (v68)
            {
              v74[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), v74, 1uLL);
              uint64_t v43 = v65;
              --*((void *)&v66 + 1);
            }
            else
            {
              uint64_t v43 = v65;
              if ((void)v66) {
                v65[(void)v66 - 1] = 0;
              }
            }
          }
          else
          {
            uint64_t v43 = v65;
            v65[*((void *)&v66 + 1)] = 0;
          }
          if ((respellRoot((uint64_t)&v57, v43) & 1) == 0)
          {
            BOOL v38 = 0;
          }
          else
          {
LABEL_37:
            if (*((void *)&v58 + 1) >= (unint64_t)v58)
            {
              if (v60)
              {
                v74[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v57, *((unint64_t *)&v58 + 1), v74, 1uLL);
                uint64_t v44 = v57;
                --*((void *)&v58 + 1);
              }
              else
              {
                uint64_t v44 = v57;
                if ((void)v58) {
                  v57[(void)v58 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v44 = v57;
              v57[*((void *)&v58 + 1)] = 0;
            }
            if (!TLexicon::findWord(v52, v44))
            {
              if (*((void *)&v58 + 1) >= (unint64_t)v58)
              {
                if (v60)
                {
                  v74[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v57, *((unint64_t *)&v58 + 1), v74, 1uLL);
                  unint64_t v45 = v57;
                  --*((void *)&v58 + 1);
                }
                else
                {
                  unint64_t v45 = v57;
                  if ((void)v58) {
                    v57[(void)v58 - 1] = 0;
                  }
                }
              }
              else
              {
                unint64_t v45 = v57;
                v57[*((void *)&v58 + 1)] = 0;
              }
              TLexicon::addTempWord((uint64_t)v52, v45, 0, 0, 0);
            }
            unint64_t v46 = v56;
            BOOL v38 = v26 >= v56;
            if (v26 < v56) {
              unint64_t v46 = 0;
            }
            v26 -= v46;
          }
          if (v60 && v57 != (__int32 *)v59 && v57) {
            MEMORY[0x216698730]();
          }
          if (v64 && v61 != v63 && v61) {
            MEMORY[0x216698730]();
          }
          if (v68 && v65 != (int *)v67 && v65) {
            MEMORY[0x216698730]();
          }
        }
        goto LABEL_10;
      }
      BOOL v31 = 0;
      BOOL v38 = 0;
LABEL_11:
      if (*(unsigned char *)(v19 + 248))
      {
        if (v38) {
          int v39 = v56;
        }
        else {
          int v39 = 0;
        }
        TLatticeProcessor::combineMrecData((uint64_t)v69, (uint64_t)(v35 + 6), v39);
      }
      v25 |= v36;
      uint64_t v30 = (void *)*v32;
      uint64_t v18 = v32;
      if (!*v32) {
        goto LABEL_67;
      }
    }
    if (*v35 == 2)
    {
      BOOL v38 = 0;
      BOOL v31 = 1;
      goto LABEL_11;
    }
LABEL_9:
    BOOL v38 = 0;
LABEL_10:
    BOOL v31 = 1;
    goto LABEL_11;
  }
  return result;
}

void sub_213FFD228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (LOBYTE(STACK[0x8E8]))
  {
    unint64_t v19 = STACK[0x4D0];
    if (STACK[0x4D0] != a17)
    {
      if (v19) {
        MEMORY[0x216698730](v19, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xD08]))
  {
    unint64_t v20 = STACK[0x8F0];
    if (STACK[0x8F0] != a18)
    {
      if (v20) {
        MEMORY[0x216698730](v20, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x1190]))
  {
    unint64_t v21 = STACK[0xD78];
    if (STACK[0xD78] != a11)
    {
      if (v21) {
        MEMORY[0x216698730](v21, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TCliticsProc::apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(a1 + 56) + 136) = a4;
  if (*(void *)(*(void *)(a3 + 256) + 8) == *(void *)(*(void *)(a1 + 16) + 8))
  {
    memset(__p, 0, sizeof(__p));
    v11[0] = 0;
    TCliticsProc::applyInternal(a1, a2, a3, (uint64_t)__p, v11);
    operator new();
  }
  tknPrintf("Error: The lattice lexicon handle does not match the lattice processor's lexicon handle.\n", a2, a3, a4, a5);
  std::string::basic_string[abi:ne180100]<0>(v11, &byte_2140B33BB);
  __p[0] = byte_26C4DF190;
  if (SHIBYTE(v12) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v11[0], (std::string::size_type)v11[1]);
  }
  else
  {
    *(_OWORD *)&__p[1] = *(_OWORD *)v11;
    uint64_t v14 = v12;
  }
  __p[0] = &unk_26C4E0710;
  if (v14 >= 0) {
    uint64_t v7 = (const char *)&__p[1];
  }
  else {
    uint64_t v7 = (const char *)__p[1];
  }
  conditionalAssert(v7, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/clitics/cliticsproc.cpp", 633, v5, v6);
  __p[0] = byte_26C4DF190;
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  exceptiouint64_t n = (char *)__cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
  *(void *)exceptiouint64_t n = byte_26C4DF190;
  unint64_t v9 = (std::string *)(exception + 8);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    long long v10 = *(_OWORD *)__p;
    *((void **)exception + 3) = __p[2];
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(void *)exceptiouint64_t n = &unk_26C4E0710;
}

void sub_213FFD5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      *(void *)(v27 + 136) = v28;
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TCliticsProc::apply(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(a1 + 56) + 136) = a5;
  int v36 = 0;
  uint64_t v37 = 0;
  BOOL v38 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v36, a3);
  if (a3)
  {
    uint64_t v7 = 0;
    int v8 = v37;
    do
    {
      uint64_t v9 = **(void **)(*a2 + 8 * v7);
      if (v8 >= v38)
      {
        uint64_t v10 = (v8 - v36) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = (v38 - v36) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if ((unint64_t)(v38 - v36) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v38, v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = &v13[8 * v10];
        *(void *)uint64_t v14 = v9;
        int v8 = v14 + 8;
        uint64_t v16 = v36;
        unsigned int v15 = v37;
        if (v37 != v36)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          unsigned int v15 = v36;
        }
        int v36 = v14;
        uint64_t v37 = v8;
        BOOL v38 = &v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)int v8 = v9;
        v8 += 8;
      }
      uint64_t v37 = v8;
      ++v7;
    }
    while (v7 != a3);
  }
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  unsigned int v35 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve(&v33, a4 - a3);
  std::vector<TLatticeConstructionTransData>::vector(&v32, a4 - a3);
  if (a4 != a3)
  {
    uint64_t v18 = 0;
    do
    {
      unint64_t v19 = (char *)v32 + 160 * v18;
      *(void *)unint64_t v19 = 2;
      *((_DWORD *)v19 + 4) = 0;
      *((void *)v19 + 1) = **(void **)(*a2 + 8 * (v18 + a3));
      unint64_t v20 = (char *)v32 + 160 * v18;
      v20[3] = v18;
      v20[5] = v18++;
      v20[4] = v18;
      v20[6] = v18;
      v20[7] = 1;
      unint64_t v21 = v34;
      if (v34 >= v35)
      {
        uint64_t v23 = (v34 - (unsigned char *)v33) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = (v35 - (unsigned char *)v33) >> 2;
        if (v24 <= v23 + 1) {
          unint64_t v24 = v23 + 1;
        }
        if ((unint64_t)(v35 - (unsigned char *)v33) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v35, v25);
        }
        else {
          int v26 = 0;
        }
        uint64_t v27 = &v26[8 * v23];
        *(void *)uint64_t v27 = v20;
        uint64_t v22 = v27 + 8;
        long long v29 = (char *)v33;
        uint64_t v28 = v34;
        if (v34 != v33)
        {
          do
          {
            uint64_t v30 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v27 - 1) = v30;
            v27 -= 8;
          }
          while (v28 != v29);
          uint64_t v28 = (char *)v33;
        }
        uint64_t v33 = v27;
        unint64_t v34 = v22;
        unsigned int v35 = &v26[8 * v25];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(void *)unint64_t v34 = v20;
        uint64_t v22 = v21 + 8;
      }
      unint64_t v34 = v22;
    }
    while (v18 != a4 - a3);
  }
  operator new();
}

void sub_213FFDC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  unint64_t v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  *(void *)(a11 + 136) = a10;
  _Unwind_Resume(exception_object);
}

uint64_t TCliticsProc::save(TCliticsProc *this, TDataManager *a2, TDataManager *a3)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  TOutputModel::TOutputModel((TOutputModel *)v34, a2, a3, v7, *((const TDataManager **)this + 8));
  if (v35 <= 1)
  {
    tknPrintf("Error: Unsupported model version for Clitics: %llu\n", v8, v9, v10, v11, v35);
    std::string::basic_string[abi:ne180100]<0>(&v32, &byte_2140B33BB);
    *(void *)uint64_t v27 = byte_26C4DF190;
    if (SHIBYTE(v33) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v27[8], (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
    }
    else
    {
      *(_OWORD *)&v27[8] = v32;
      uint64_t v28 = v33;
    }
    *(void *)uint64_t v27 = &unk_26C4E0710;
    if (v28 >= 0) {
      unint64_t v20 = &v27[8];
    }
    else {
      unint64_t v20 = *(const char **)&v27[8];
    }
    conditionalAssert(v20, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/clitics/cliticsproc.cpp", 738, v18, v19);
    *(void *)uint64_t v27 = byte_26C4DF190;
    if (SHIBYTE(v28) < 0) {
      operator delete(*(void **)&v27[8]);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)v32);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v27, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v22 = (std::string *)(exception + 1);
    if ((v27[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v27, *(std::string::size_type *)&v27[8]);
    }
    else
    {
      long long v23 = *(_OWORD *)v27;
      exception[3] = *(void *)&v27[16];
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    }
    void *exception = &unk_26C4E0710;
  }
  unint64_t v12 = (void *)MEMORY[0x263F8C2C8];
  if (a2)
  {
    TDataManager::setIntVar(a2, "CliticsVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
    TOutputStream::TOutputStream(&v32, v27, (uint64_t)"CliticsParam", *((void *)this + 2) + 240);
    TParamManager::save(*((void **)this + 7), (void **)&v32, 0);
    std::stringbuf::str();
    if ((v26 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v14 = v26;
    }
    else {
      uint64_t v14 = v25;
    }
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a2 + 48))(a2, "CliticsParam", p_p, v14);
    if ((char)v26 < 0) {
      operator delete(__p);
    }
    *(void *)uint64_t v27 = *v12;
    *(void *)&v27[*(void *)(*(void *)v27 - 24)] = v12[3];
    *(void *)&v27[8] = MEMORY[0x263F8C318] + 16;
    if (v30 < 0) {
      operator delete(v29);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166986E0](v31);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "CliticsVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
    TOutputStream::TOutputStream(&v32, v27, (uint64_t)"CliticsParam", *((void *)this + 2) + 240);
    TParamManager::save(*((void **)this + 7), (void **)&v32, 1);
    std::stringbuf::str();
    if ((v26 & 0x80u) == 0) {
      unsigned int v15 = &__p;
    }
    else {
      unsigned int v15 = __p;
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v16 = v26;
    }
    else {
      uint64_t v16 = v25;
    }
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a3 + 48))(a3, "CliticsParam", v15, v16);
    if ((char)v26 < 0) {
      operator delete(__p);
    }
    *(void *)uint64_t v27 = *v12;
    *(void *)&v27[*(void *)(*(void *)v27 - 24)] = v12[3];
    *(void *)&v27[8] = MEMORY[0x263F8C318] + 16;
    if (v30 < 0) {
      operator delete(v29);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166986E0](v31);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 8) + 24))(*((void *)this + 8));
}

void sub_213FFE244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t TCliticsProc::getParamManager(TCliticsProc *this)
{
  return *((void *)this + 7);
}

uint64_t TCliticsProc::getType(TCliticsProc *this)
{
  return 5;
}

void TCliticsParamManager::~TCliticsParamManager(TCliticsParamManager *this)
{
  TCliticsParamManager::~TCliticsParamManager(this);

  JUMPOUT(0x216698730);
}

{
  void **v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)this = &unk_26C4E2C88;
  uint64_t v2 = (void **)((char *)this + 1344);
  *((void *)this + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = &unk_26C4DFCE0;
  uint64_t v6 = (void **)((char *)this + 2696);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 2672);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 2648);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v6);
  for (unint64_t i = 0; i != -1152; i -= 24)
  {
    if (*((char *)this + i + 2647) < 0) {
      operator delete(*(void **)((char *)this + i + 2624));
    }
  }
  TParam::~TParam(v2);
  uint64_t v4 = 0;
  *((void *)this + 137) = &unk_26C4DF150;
  do
  {
    if (*((char *)this + v4 + 1343) < 0) {
      operator delete(*(void **)((char *)this + v4 + 1320));
    }
    v4 -= 24;
  }
  while (v4 != -48);
  TParam::~TParam((void **)this + 137);
  TParam::~TParam((void **)this + 93);
  uint64_t v5 = 0;
  *((void *)this + 62) = &unk_26C4DF150;
  do
  {
    if (*((char *)this + v5 + 743) < 0) {
      operator delete(*(void **)((char *)this + v5 + 720));
    }
    v5 -= 24;
  }
  while (v5 != -48);
  TParam::~TParam((void **)this + 62);
  *(void *)this = &unk_26C4E3090;
  TParam::~TParam((void **)this + 18);
  TParamManager::~TParamManager(this);
}

uint64_t MrecInitLibrary_word(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_corpus_word();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_wordlist_word();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughWord(void)
{
  MrecInitLibrarySet_throughPhoneme();

  return MrecInitLibrary_word();
}

void MrecInitModule_dfile_dfutil(void)
{
  if (!gParDebugShowDFileLoadInfo)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowDFileLoadInfo", (const char *)&unk_2140A8D8F, (const char *)&unk_2140A8D8F, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugShowDFileLoadInfo = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugShowDFileLoadInfo);
  }
}

void writeMrecHeader(DgnStream *a1, const char *a2, int a3, int a4, int a5)
{
  (*(void (**)(DgnStream *, const char *, uint64_t))(*(void *)a1 + 80))(a1, a2, 8);
  v15[0] = a3;
  (*(void (**)(DgnStream *, _DWORD *, uint64_t))(*(void *)a1 + 80))(a1, v15, 4);
  v15[0] = a4;
  (*(void (**)(DgnStream *, _DWORD *, uint64_t))(*(void *)a1 + 80))(a1, v15, 4);
  DgnString::DgnString((DgnString *)v15);
  DgnString::preAllocate((unint64_t)v15, 256);
  MrecName = (char *)GetMrecName();
  DgnString::operator=((DgnString *)v15, MrecName);
  if (a5)
  {
    DgnString::operator+=((DgnString *)v15, " ");
    MrecVersiouint64_t n = (char *)GetMrecVersion();
    DgnString::operator+=((DgnString *)v15, MrecVersion);
  }
  int v11 = v15[2];
  uint64_t Buffer = DgnString::getBuffer((DgnString *)v15, 0x20u);
  uint64_t v13 = Buffer;
  LODWORD(v14) = v11 - 1;
  if (!v11) {
    LODWORD(v14) = 0;
  }
  if (v14 >= 0x1F) {
    uint64_t v14 = 31;
  }
  else {
    uint64_t v14 = v14;
  }
  bzero((void *)(Buffer + v14), (32 - v14));
  (*(void (**)(DgnStream *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v13, 32);
  DgnString::~DgnString((DgnString *)v15);
}

void sub_213FFE748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

DgnStream *OpenAndWriteMrecHeader(uint64_t a1, unsigned int a2, int a3, const char *a4, int a5, int a6)
{
  if (a3) {
    uint64_t v11 = 5;
  }
  else {
    uint64_t v11 = 1;
  }
  SubFileExtensionString = GetSubFileExtensionString(a2);
  uint64_t v13 = (DgnStream *)(*(uint64_t (**)(uint64_t, char *, uint64_t, void))(*(void *)a1 + 32))(a1, SubFileExtensionString, v11, 0);
  writeMrecHeader(v13, a4, a5, a6, a3 ^ 1);
  return v13;
}

uint64_t DFile::openSubFile(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  SubFileExtensionString = GetSubFileExtensionString(a2);
  uint64_t v8 = *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 32);

  return v8(a1, SubFileExtensionString, a3, a4);
}

void readMrecHeader(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, _DWORD *a5, _DWORD *a6)
{
  v19[1] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, 8, 1);
  if (v19[0] != *a4)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v13 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v13 = &unk_2140A8D8F;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 144, (uint64_t)"dfutil/dfile", 7, (uint64_t)"%.500s %.8s %.8s", v11, v12, (char)v13);
  }
  v18[0] = 0;
  (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v18, 4, 1);
  *a5 = v18[0];
  v18[0] = 0;
  (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v18, 4, 1);
  *a6 = v18[0];
  if (!*a5)
  {
    char SubFileExtensionString = GetSubFileExtensionString(a3);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 150, (uint64_t)"dfutil/dfile", 8, (uint64_t)"%.500s %.500s", v15, v16, SubFileExtensionString);
  }
  DgnString::DgnString((DgnString *)v18);
  uint64_t Buffer = DgnString::getBuffer((DgnString *)v18, 0x20u);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, Buffer, 32, 1);
  DgnString::~DgnString((DgnString *)v18);
}

void sub_213FFEAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t OpenAndReadMrecHeader(uint64_t a1, unsigned int a2, int a3, void *a4, _DWORD *a5, _DWORD *a6)
{
  if (a3) {
    uint64_t v11 = 3;
  }
  else {
    uint64_t v11 = 0;
  }
  char SubFileExtensionString = GetSubFileExtensionString(a2);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, char *, uint64_t, void))(*(void *)a1 + 32))(a1, SubFileExtensionString, v11, 0);
  readMrecHeader(v13, a1, a2, a4, a5, a6);
  return v13;
}

void MrecHeaderCheckVersions(char *a1, const char *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  if (a5 < a3 || a5 == a3 && a6 < a4)
  {
    DgnString::DgnString((DgnString *)v17, "A component of ");
    operator+(a1, (uint64_t)v17, (uint64_t)v18);
    operator+(" could not be opened because it is in an obsolete format, intended for a version of MREC older than this one. Consider upgrading the file with MREC 1.19.200.13604. Details:", (uint64_t)v18, (uint64_t)&v19);
    if (v20) {
      LOBYTE(v13) = v19;
    }
    else {
      uint64_t v13 = &unk_2140A8D8F;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 210, (uint64_t)"dfutil/dfile", 9, (uint64_t)"%.500s %.500s %u %u %u %u", v11, v12, (char)v13);
    DgnString::~DgnString((DgnString *)&v19);
    DgnString::~DgnString((DgnString *)v18);
    DgnString::~DgnString((DgnString *)v17);
  }
  if (a5 > a3 || a5 == a3 && a6 > a4)
  {
    DgnString::DgnString((DgnString *)v17, "A component of ");
    operator+(a1, (uint64_t)v17, (uint64_t)v18);
    operator+(" could not be opened because it is in an unknown format, intended for a version of MREC newer than this one. Details:", (uint64_t)v18, (uint64_t)&v19);
    if (v20) {
      LOBYTE(v16) = v19;
    }
    else {
      uint64_t v16 = &unk_2140A8D8F;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 221, (uint64_t)"dfutil/dfile", 10, (uint64_t)"%.500s %.500s %u %u %u %u", v14, v15, (char)v16);
    DgnString::~DgnString((DgnString *)&v19);
    DgnString::~DgnString((DgnString *)v18);
    DgnString::~DgnString((DgnString *)v17);
  }
}

void sub_213FFED0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MrecHeaderCheckLatestVersionIfShared(DFile *a1, const char *a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  if ((a5 != a3 || a6 != a4) && *((unsigned char *)a1 + 72))
  {
    if (*((_DWORD *)a1 + 6)) {
      uint64_t v8 = (void *)*((void *)a1 + 2);
    }
    else {
      uint64_t v8 = &unk_2140A8D8F;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 240, (uint64_t)"dfutil/dfile", 11, (uint64_t)"%.500s %.500s %u %u %u %u", a7, a8, (char)v8);
  }
}

void DFileOwner::DFileOwner(DFileOwner *this)
{
  *(void *)this = 0;
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
}

void (***DFileOwner::closeDFile(DFileOwner *this, DFile **a2))(void)
{
  if (*((unsigned char *)this + 8))
  {
    DFile::removeFileAfterSaveException((void (***)(void))this, a2);
    *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  }
  uint64_t result = DgnDelete<RealDFile>(*(void (****)(void))this);
  *(void *)this = 0;
  return result;
}

void DFileOwner::~DFileOwner(DFileOwner *this, DFile **a2)
{
}

void (***DFile::removeFileAfterSaveException(void (***this)(void), DFile **a2))(void)
{
  if (this)
  {
    uint64_t v2 = (void (****)(void))this;
    this = (void (***)(void))*this;
    if (this)
    {
      ((void (*)(void (***)(void), DFile **))(*this)[7])(this, a2);
      this = DgnDelete<RealDFile>(*v2);
      *uint64_t v2 = 0;
    }
  }
  return this;
}

uint64_t DFileOwner::setRemoveFileOnDestruction(uint64_t this, char a2)
{
  if (*(void *)this) {
    *(unsigned char *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  }
  return this;
}

void DFile::DFile(DFile *this, const FileSpec *a2)
{
  *(void *)this = &unk_26C4E4838;
  uint64_t v4 = (DFile *)((char *)this + 32);
  uint64_t v5 = (DFile *)((char *)this + 16);
  FileSpec::FileSpec((DFile *)((char *)this + 16));
  DgnString::DgnString(v4);
  *((void *)this + 7) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 72) = 0;
  FileSpec::operator=(v5, a2);
  FileSpec::getNameOnly(a2, v4);
  *((unsigned char *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
  *((void *)this + 1) = 0;
}

void sub_213FFEF54(_Unwind_Exception *a1)
{
  FileSpec::~FileSpec(v1);
  _Unwind_Resume(a1);
}

uint64_t DFile::subFileExists(uint64_t a1, unsigned int a2)
{
  char SubFileExtensionString = GetSubFileExtensionString(a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 24);

  return v4(a1, SubFileExtensionString);
}

void DFile::~DFile(DFile *this)
{
  *(void *)this = &unk_26C4E4838;
  *((void *)this + 1) = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 56);
  DgnString::~DgnString((DFile *)((char *)this + 32));
  FileSpec::~FileSpec((DFile *)((char *)this + 16));
}

void DFile::printSize(DFile *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 353, (DgnString *)&v64);
  if (v65) {
    uint64_t v16 = (void *)v64;
  }
  else {
    uint64_t v16 = &unk_2140A8D8F;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A8D8F, a3, &unk_2140A8D8F, v16);
  DgnString::~DgnString((DgnString *)&v64);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A8D8F);
  uint64_t v21 = FileSpec::sizeObject((uint64_t)this + 16);
  uint64_t v22 = FileSpec::sizeObject((uint64_t)this + 16);
  uint64_t v23 = FileSpec::sizeObject((uint64_t)this + 16);
  uint64_t v24 = (a3 + 1);
  uint64_t v63 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 354, (DgnString *)&v64);
  if (v65) {
    char v30 = (void *)v64;
  }
  else {
    char v30 = &unk_2140A8D8F;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_2140A8D8F, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v64);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v31 = 4;
  }
  else {
    uint64_t v31 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 355, (DgnString *)&v64);
  if (v65) {
    int v36 = (void *)v64;
  }
  else {
    int v36 = &unk_2140A8D8F;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v24, &unk_2140A8D8F, v25, v25, v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v64);
  *a4 += v31;
  *a5 += v31;
  uint64_t v37 = sizeObject((char *)this + 32);
  uint64_t v38 = sizeObject((char *)this + 32);
  uint64_t v39 = sizeObject((char *)this + 32);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 356, (DgnString *)&v64);
  if (v65) {
    uint64_t v44 = (void *)v64;
  }
  else {
    uint64_t v44 = &unk_2140A8D8F;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v24, &unk_2140A8D8F, v25, v25, v44, v37, v38, v39);
  DgnString::~DgnString((DgnString *)&v64);
  *a4 += v37;
  *a5 += v38;
  *a6 += v39;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 357, (DgnString *)&v64);
  if (v65) {
    int v49 = (void *)v64;
  }
  else {
    int v49 = &unk_2140A8D8F;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v24, &unk_2140A8D8F, v25, v25, v49, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v64);
  ++*a4;
  ++*a5;
  uint64_t v50 = (char *)this + 56;
  uint64_t v51 = sizeObject<SubDirExtension>((uint64_t)this + 56, 0);
  uint64_t v52 = sizeObject<SubDirExtension>((uint64_t)v50, 1);
  unint64_t v64 = 0xFFFFFFFF00000000;
  sizeObject((uint64_t)&v64, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 359, (DgnString *)&v64);
  if (v65) {
    uint64_t v57 = (void *)v64;
  }
  else {
    uint64_t v57 = &unk_2140A8D8F;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v24, &unk_2140A8D8F, v25, v25, v57, v51, v52, 0);
  DgnString::~DgnString((DgnString *)&v64);
  *a4 += v51;
  *a5 += v52;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 360, (DgnString *)&v64);
  if (v65) {
    long long v62 = (void *)v64;
  }
  else {
    long long v62 = &unk_2140A8D8F;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v63, &unk_2140A8D8F, (35 - v63), (35 - v63), v62, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v64);
}

void sub_213FFF444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<SubDirExtension>(uint64_t a1, int a2)
{
  unint64_t v10 = 0xFFFFFFFF00000000;
  uint64_t v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 12;
  }
  else {
    uint64_t v5 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      unint64_t v8 = v7 + 1;
      do
        v5 += sizeObject(*(void *)a1 + 8 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2) {
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  return v5;
}

uint64_t DFile::getCurrentSubDirComponents(DFile *this)
{
  return (uint64_t)this + 56;
}

void DFile::pushCurrentSubDirComponent(DFile *this, const SubDirExtension *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = *((_DWORD *)this + 16);
  if (v10 - 10 <= 0xFFFFFFF4)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 371, (uint64_t)"dfutil/dfile", 5, (uint64_t)"%d", a7, a8, 10);
    unsigned int v10 = *((_DWORD *)this + 16);
  }
  if (v10 == *((_DWORD *)this + 17))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, 1, 1);
    unsigned int v10 = *((_DWORD *)this + 16);
  }
  *(void *)(*((void *)this + 7) + 8 * v10) = *(void *)a2;
  ++*((_DWORD *)this + 16);
}

uint64_t DFile::popCurrentSubDirComponent(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 64);
  uint64_t v2 = (v1 - 1);
  if (!v1)
  {
    uint64_t v3 = *(void **)(this + 56);
    uint64_t v4 = v2;
    do
    {
      *v3++ = 0xFFFFFFFF00000000;
      --v4;
    }
    while (v4);
  }
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v2;
  return this;
}

DgnString *DFile::makeSubFileName(uint64_t a1, char *a2, DgnString *this)
{
  DgnString::preAllocate((unint64_t)this, 96);
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      SubDirExtension::appendToString((DgnString *)(*(void *)a1 + v6), this);
      DgnString::operator+=(this, 47);
      ++v7;
      v6 += 8;
    }
    while (v7 < *(unsigned int *)(a1 + 8));
  }

  return DgnString::operator+=(this, a2);
}

uint64_t *DFile::openDFile(uint64_t a1, const FileSpec *a2, int a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!FileSpec::isValid((char **)a1)) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 432, (uint64_t)"dfutil/dfile", 1, (uint64_t)"%s", v8, v9, (char)&unk_2140A8D8F);
  }
  if (a2 == 1)
  {
    unsigned int v10 = MemChunkAlloc(0x1B8uLL, 0);
    uint64_t v11 = RealDFile::RealDFile((RealDFile *)v10, (const FileSpec *)a1);
    *(void *)a4 = v11;
    *(unsigned char *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
    uint64_t v12 = 1;
LABEL_29:
    RealDFile::startUp((uint64_t)v11, (const FileSpec *)v12, a3, 1, 0, 0);
    return v10;
  }
  OsFile::openOsFile((const FileSpec *)a1, 0);
  if (!v13)
  {
    if (!a2)
    {
      if (*(_DWORD *)(a1 + 8)) {
        uint64_t v28 = *(char **)a1;
      }
      else {
        uint64_t v28 = (char *)&unk_2140A8D8F;
      }
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 449, (uint64_t)"dfutil/dfile", 2, (uint64_t)"%.500s", v17, v18, (char)v28);
    }
    unsigned int v10 = MemChunkAlloc(0x1B8uLL, 0);
    uint64_t v11 = RealDFile::RealDFile((RealDFile *)v10, (const FileSpec *)a1);
    *(void *)a4 = v11;
    *(unsigned char *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2 != 0;
    uint64_t v12 = (uint64_t)a2;
    goto LABEL_29;
  }
  uint64_t v19 = v13;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  memset(v33, 0, sizeof(v33));
  int Bytes = OsFile::readBytes(v13, v33, 0x7Fu, v14, v15, v16, v17, v18);
  OsFile::~OsFile(v19);
  MemChunkFree(v21, 0);
  if (Bytes) {
    v33[Bytes] = 0;
  }
  if (*(void *)v33 == 0x46545845544E4744
    && *(void *)&v33[8] == 0x535245565F454C49
    && *(void *)&v33[11] == 0x4E4F49535245565FLL)
  {
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8)) {
        uint64_t v29 = *(char **)a1;
      }
      else {
        uint64_t v29 = (char *)&unk_2140A8D8F;
      }
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 476, (uint64_t)"dfutil/dfile", 4, (uint64_t)"%.500s", v22, v23, (char)v29);
    }
    unsigned int v10 = MemChunkAlloc(0x98uLL, 0);
    ListDFile::ListDFile((ListDFile *)v10, (const FileSpec *)a1);
    *(void *)a4 = v30;
    *(unsigned char *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    ListDFile::startUp(v30);
    goto LABEL_37;
  }
  if (*(_DWORD *)v33 == 1279870532 && *(_DWORD *)&v33[3] == 1981826380)
  {
    unsigned int v10 = MemChunkAlloc(0x1B8uLL, 0);
    uint64_t v31 = RealDFile::RealDFile((RealDFile *)v10, (const FileSpec *)a1);
    *(void *)a4 = v31;
    *(unsigned char *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2 != 0;
    RealDFile::startUp((uint64_t)v31, a2, a3, 1, 0, 0);
LABEL_37:
    (*(void (**)(uint64_t *))(*v10 + 72))(v10);
    return v10;
  }
  if (*(_DWORD *)(a1 + 8)) {
    uint64_t v27 = *(char **)a1;
  }
  else {
    uint64_t v27 = (char *)&unk_2140A8D8F;
  }
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dfile.cpp", 495, (uint64_t)"dfutil/dfile", 3, (uint64_t)"%.500s", v22, v23, (char)v27);
  return 0;
}

unint64_t DFile::copyDFileState(DFile *this, const DFile *a2)
{
  return DgnArray<PitchInfo>::copyArraySlice((unint64_t)this + 56, (void *)a2 + 7, 0, *((_DWORD *)a2 + 16));
}

const char *DFile::getNameForSemanticType(DFile *this)
{
  if (this > 0xF) {
    return "Internal Error";
  }
  else {
    return off_2641F72C0[(int)this];
  }
}

unsigned char **DFile::cacheSubFileSizeInfo(unsigned char **this)
{
  if (!*this[1])
  {
    int v1 = this;
    this = (unsigned char **)(*((uint64_t (**)(unsigned char **))*this + 13))(this);
    *v1[1] = 1;
  }
  return this;
}

DFileProgressInfo *DFile::reportProgress(DFile *this, const char *a2, const char *a3)
{
  uint64_t result = (DFileProgressInfo *)*((void *)this + 1);
  if (result)
  {
    uint64_t result = (DFileProgressInfo *)DFileProgressInfo::findSubFile(result, a2, a3);
    if (result != -1)
    {
      uint64_t v5 = result;
      uint64_t result = (DFileProgressInfo *)*((void *)this + 1);
      if (!*(unsigned char *)(*((void *)result + 5) + v5))
      {
        return (DFileProgressInfo *)DFileProgressInfo::recordFileAsReported((uint64_t)result, v5);
      }
    }
  }
  return result;
}

unint64_t DFileProgressInfo::findSubFile(DFileProgressInfo *this, const char *a2, const char *a3)
{
  if (!*((_DWORD *)this + 4)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *((void *)this + 1) + v5;
    uint64_t v8 = *(_DWORD *)(v7 + 8) ? *(DgnString **)v7 : (DgnString *)&unk_2140A8D8F;
    if (!DgnString::compareNoCase(v8, a2, a3)) {
      break;
    }
    ++v6;
    v5 += 16;
    if (v6 >= *((unsigned int *)this + 4)) {
      return 0xFFFFFFFFLL;
    }
  }
  return v6;
}

uint64_t DFileProgressInfo::recordFileAsReported(uint64_t this, ProgressCallbackHandler *a2)
{
  if (a2 != -1)
  {
    *(unsigned char *)(*(void *)(this + 40) + a2) = 1;
    *(void *)(this + 64) += *(void *)(*(void *)(this + 24) + 8 * a2);
    ++*(_DWORD *)(this + 72);
    return ProgressCallbackHandler::addProgress(*(void *)(this + 80), a2);
  }
  return this;
}

void DFileProgressInfo::reset(DFileProgressInfo *this)
{
  *((void *)this + 10) = 0;
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 16 * v2 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*((void *)this + 1) + v3));
      v3 -= 16;
    }
    while (v3 != -16);
  }
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 12) = 0;
  *(unsigned char *)this = 0;
  *((void *)this + 7) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
}

void DFileProgressInfo::DFileProgressInfo(DFileProgressInfo *this)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  DFileProgressInfo::reset(this);
}

DgnString *DFileProgressInfo::add(DFileProgressInfo *this, const DgnString *a2, uint64_t a3)
{
  unsigned int v6 = *((_DWORD *)this + 4);
  if (v6 == *((_DWORD *)this + 5))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 8, 1, 1);
    unsigned int v6 = *((_DWORD *)this + 4);
  }
  uint64_t result = DgnString::DgnString((DgnString *)(*((void *)this + 1) + 16 * v6), a2);
  ++*((_DWORD *)this + 4);
  unsigned int v8 = *((_DWORD *)this + 8);
  if (v8 == *((_DWORD *)this + 9))
  {
    uint64_t result = (DgnString *)DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 24, 1, 1);
    unsigned int v8 = *((_DWORD *)this + 8);
  }
  *(void *)(*((void *)this + 3) + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a3;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8 + 1;
  unsigned int v9 = *((_DWORD *)this + 12);
  if (v9 == *((_DWORD *)this + 13))
  {
    uint64_t result = (DgnString *)DgnPrimArray<char>::reallocElts((uint64_t)this + 40, 1, 1);
    unsigned int v9 = *((_DWORD *)this + 12);
  }
  *(unsigned char *)(*((void *)this + 5) + v9) = 0;
  *((_DWORD *)this + 12) = v9 + 1;
  *((void *)this + 7) += a3;
  return result;
}

void DFileProgressInfo::resetReportedInfo(void **this)
{
  size_t v2 = *((unsigned int *)this + 12);
  if (v2) {
    bzero(this[5], v2);
  }
  this[8] = 0;
  *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
}

uint64_t DFileProgressInfo::attachProgressHandler(DFileProgressInfo *this, ProgressCallbackHandler *a2, DFileProgressInfo *a3)
{
  *((void *)this + 10) = a2;
  return ProgressCallbackHandler::addDFileProgressInfoPtr((uint64_t)a2, this, a3);
}

uint64_t *VocMgr::startupVocMgr(uint64_t a1)
{
  uint64_t result = MemChunkAlloc(8uLL, 0);
  *uint64_t result = a1;
  VocMgr::smpVocMgr = (uint64_t)result;
  return result;
}

void VocMgr::printSize(VocMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocmgr.cpp", 94, (DgnString *)&v31);
  if (v32) {
    uint64_t v15 = v31;
  }
  else {
    uint64_t v15 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocmgr.cpp", 95, (DgnString *)&v31);
  if (v32) {
    uint64_t v25 = v31;
  }
  else {
    uint64_t v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocmgr.cpp", 96, (DgnString *)&v31);
  if (v32) {
    char v30 = v31;
  }
  else {
    char v30 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_214000028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t VocMgr::getVocOrThrow(VocMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(*(void *)this + 8) <= a2 || (uint64_t result = *(void *)(**(void **)this + 8 * a2)) == 0)
  {
    uint64_t v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vocmgr.cpp", 102, (uint64_t)"voc/vocmgr", 1, (uint64_t)"%u", a7, a8, a2);
    return *(void *)(**(void **)this + 8 * v10);
  }
  return result;
}

uint64_t *VocMgr::beginRuleStateRecursiveOperation(uint64_t *this)
{
  uint64_t v1 = *this;
  if (*(_DWORD *)(*this + 8) >= 2u)
  {
    size_t v2 = this;
    unsigned __int16 v3 = 1;
    do
    {
      if (*(void *)(*(void *)v1 + 8 * v3))
      {
        MrecInitModule_sdpres_sdapi();
        this = (uint64_t *)MrecInitModule_sdpres_sdapi();
        uint64_t v1 = *v2;
      }
      ++v3;
    }
    while (*(_DWORD *)(v1 + 8) > v3);
  }
  return this;
}

void VocMgr::endRuleStateRecursiveOperation(VocMgr *this)
{
  uint64_t v1 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 8) >= 2u)
  {
    unsigned __int16 v3 = 1;
    do
    {
      uint64_t v4 = *(void *)(*(void *)v1 + 8 * v3);
      if (v4)
      {
        RuleMgr::endRecursiveOperation(*(RuleMgr **)(v4 + 64));
        StateMgr::endRecursiveOperation(*(StateMgr **)(v4 + 56));
        uint64_t v1 = *(void *)this;
      }
      ++v3;
    }
    while (*(_DWORD *)(v1 + 8) > v3);
  }
}

uint64_t TTagManager::getClosedTagSet(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t result = (uint64_t)std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(a3, (unint64_t *)&v8, &v8);
  for (uint64_t i = *(void *)(a2 + 32); ; uint64_t i = *(void *)(result + 32))
  {
    uint64_t v8 = i;
    if (i == -1) {
      break;
    }
    std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(a3, (unint64_t *)&v8, &v8);
    uint64_t result = TTagManager::getTag(a1, v8);
  }
  return result;
}

uint64_t TBoolParam::get(TBoolParam *this)
{
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  return *((unsigned __int8 *)this + TParam::getValidConfig(this, ActiveConfigHandle) + 152);
}

void TFormatter::addCapBlocks(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, unint64_t **a8)
{
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = (uint64_t *)&v51;
  uint64_t v46 = (__int32 *)&v48;
  long long v47 = xmmword_214085190;
  char v49 = 1;
  uint64_t v42 = (__int32 *)&v44;
  long long v43 = xmmword_214085190;
  char v45 = 1;
  unsigned int v10 = *a5;
  if (*a5)
  {
    uint64_t v11 = a5;
    do
    {
      {
        operator new();
      }
      if (v10 == 13 || v10 == 10)
      {
        if (*v11 == 13 && v11[1] == 10) {
          ++v11;
        }
        WideNewLine = (int *)TStringParam::get((TStringParam *)(a1[6] + 144));
        if (!*WideNewLine) {
          WideNewLine = (int *)getWideNewLine();
        }
        uint64_t v13 = 0;
        while (WideNewLine[v13++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v46, *((unint64_t *)&v47 + 1), WideNewLine, v13 - 1);
        uint64_t v15 = 0;
        while (WideNewLine[v15++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v42, *((unint64_t *)&v43 + 1), WideNewLine, v15 - 1);
      }
      else if (*v11 == 223)
      {
        LODWORD(v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 223;
        TBuffer<wchar_t>::insert((uint64_t)&v46, *((unint64_t *)&v47 + 1), (int *)&v38, 1uLL);
        TBuffer<wchar_t>::insert((uint64_t)&v42, *((unint64_t *)&v43 + 1), (int *)"S", 2uLL);
      }
      else
      {
        LODWORD(v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *v11;
        TBuffer<wchar_t>::insert((uint64_t)&v46, *((unint64_t *)&v47 + 1), (int *)&v38, 1uLL);
        LODWORD(v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = TLocaleInfo::toUpper(a1[4] + 240, *v11);
        TBuffer<wchar_t>::insert((uint64_t)&v42, *((unint64_t *)&v43 + 1), (int *)&v38, 1uLL);
      }
      unsigned int v17 = v11[1];
      ++v11;
      unsigned int v10 = v17;
    }
    while (v17);
    uint64_t v18 = *((void *)&v43 + 1);
    if (*((void *)&v43 + 1) >= (unint64_t)v43)
    {
      if (v45)
      {
        LODWORD(v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v42, *((unint64_t *)&v43 + 1), (int *)&v38, 1uLL);
        uint64_t v19 = v42;
        --*((void *)&v43 + 1);
      }
      else
      {
        uint64_t v19 = v42;
        if ((void)v43) {
          v42[(void)v43 - 1] = 0;
        }
      }
LABEL_28:
      if (*((void *)&v47 + 1) >= (unint64_t)v47)
      {
        if (v49)
        {
          LODWORD(v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v46, *((unint64_t *)&v47 + 1), (int *)&v38, 1uLL);
          uint64_t v20 = v46;
          --*((void *)&v47 + 1);
        }
        else
        {
          uint64_t v20 = v46;
          if ((void)v47) {
            v46[(void)v47 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v20 = v46;
        v46[*((void *)&v47 + 1)] = 0;
      }
      if (wcscmp(v19, v20))
      {
        long long v38 = (__int32 *)&v40;
        long long v39 = xmmword_214085190;
        char v41 = 1;
        TBuffer<wchar_t>::operator=((uint64_t)&v38, (uint64_t)&v46);
        if (*((void *)&v39 + 1))
        {
          unint64_t v21 = 0;
          uint64_t v22 = v38;
          do
          {
            __int32 v23 = TLocaleInfo::toLower(a1[4] + 240, v22[v21]);
            uint64_t v22 = v38;
            v38[v21++] = v23;
            unint64_t v24 = *((void *)&v39 + 1);
          }
          while (v21 < *((void *)&v39 + 1));
        }
        else
        {
          unint64_t v24 = 0;
        }
        if (v24 >= (unint64_t)v39)
        {
          if (v41)
          {
            v53[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v38, v24, v53, 1uLL);
            uint64_t v28 = v38;
            --*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v28 = v38;
            if ((void)v39) {
              v38[(void)v39 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v28 = v38;
          v38[v24] = 0;
        }
        if (*((void *)&v47 + 1) >= (unint64_t)v47)
        {
          if (v49)
          {
            v53[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v46, *((unint64_t *)&v47 + 1), v53, 1uLL);
            uint64_t v29 = v46;
            --*((void *)&v47 + 1);
          }
          else
          {
            uint64_t v29 = v46;
            if ((void)v47) {
              v46[(void)v47 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v29 = v46;
          v46[*((void *)&v47 + 1)] = 0;
        }
        int v30 = wcscmp(v28, v29);
        int v31 = TLocaleInfo::toUpper(a1[4] + 240, *v46);
        __int32 v32 = *v46;
        uint64_t Tag = TTagManager::getTag(a1[17], *(void *)(a1[17] + 136));
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v50, v51);
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        uint64_t v50 = (uint64_t *)&v51;
        long long v35 = *a8;
        long long v34 = a8[1];
        while (v35 != v34)
        {
          std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(&v50, &v51, v35, (uint64_t *)v35);
          ++v35;
        }
        TTagManager::getClosedTagSet(a1[17], Tag, &v50);
        if (!v30)
        {
          uint64_t v36 = TTagManager::getTag(a1[17], *(void *)(a1[17] + 120));
          TTagManager::getClosedTagSet(a1[17], v36, &v50);
        }
        if (v31 == v32)
        {
          uint64_t v37 = TTagManager::getTag(a1[17], *(void *)(a1[17] + 128));
          TTagManager::getClosedTagSet(a1[17], v37, &v50);
        }
        operator new();
      }
      uint64_t v25 = TTagManager::getTag(a1[17], *(void *)(a1[17] + 144));
      std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v50, v51);
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v50 = (uint64_t *)&v51;
      uint64_t v26 = *a8;
      uint64_t v27 = a8[1];
      while (v26 != v27)
      {
        std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(&v50, &v51, v26, (uint64_t *)v26);
        ++v26;
      }
      TTagManager::getClosedTagSet(a1[17], v25, &v50);
      operator new();
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v42;
  v42[v18] = 0;
  goto LABEL_28;
}

void sub_214000F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  MEMORY[0x216698730](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x890]))
  {
    if (STACK[0x478] != a14 && STACK[0x478] != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0xCB0]))
  {
    unint64_t v18 = STACK[0x898];
    if (STACK[0x898] != a15)
    {
      if (v18) {
        MEMORY[0x216698730](v18, 0x1000C4052888210);
      }
    }
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(v15 - 120, *(void **)(v15 - 112));
  _Unwind_Resume(a1);
}

uint64_t TFormatter::splitGrammarResult(uint64_t a1, __int32 *a2, std::vector<std::wstring> *this, uint64_t a4, char a5)
{
  uint64_t v5 = a4;
  uint64_t v217 = *MEMORY[0x263EF8340];
  if ((a5 & 1) == 0) {
    std::vector<TItnRule *>::resize(a4, 0);
  }
  std::vector<std::wstring>::resize(this, 0);
  uint64_t v211 = 0;
  int v210 = 0;
  uint64_t v209 = (uint64_t *)&v210;
  uint64_t v213 = v215;
  long long v214 = xmmword_214085190;
  char v216 = 1;
  __s = (std::wstring::value_type *)v207;
  long long v206 = xmmword_214085190;
  char v208 = 1;
  uint64_t v201 = v203;
  long long v202 = xmmword_214085190;
  char v204 = 1;
  uint64_t v195 = v5;
  if (*a2)
  {
    uint64_t v8 = dword_2140A8DCC;
    p_end_cap = &this->__end_cap_;
    unsigned int v9 = (const __int32 *)&unk_2140A8DE4;
    unsigned int v10 = dword_2140A8DEC;
    uint64_t v11 = a2;
    do
    {
      if (!wcsncmp(v11, v8, 5uLL))
      {
        uint64_t v16 = v11 + 5;
        if (v11[5])
        {
          uint64_t v17 = 1;
          while (1)
          {
            unint64_t v18 = wcsstr(v16, v9);
            uint64_t v19 = v18;
            if (!v18) {
              break;
            }
            int v20 = wcsncmp(v18, v8, 5uLL);
            int v21 = wcsncmp(v19, v10, 6uLL);
            if (v20) {
              uint64_t v22 = v17;
            }
            else {
              uint64_t v22 = v17 + 1;
            }
            uint64_t v17 = v22 - (v21 == 0);
            uint64_t v16 = v19 + 1;
            if (v19[1]) {
              BOOL v23 = v17 == 0;
            }
            else {
              BOOL v23 = 1;
            }
            if (v23)
            {
              if (v17) {
                goto LABEL_237;
              }
              uint64_t v14 = v19 + 6;
              TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v11, v19 + 6 - v11);
              uint64_t v5 = v195;
              if (!*((void *)&v206 + 1)) {
                goto LABEL_147;
              }
              if (*((void *)&v214 + 1) && v213[*((void *)&v214 + 1) - 1] == 79)
              {
                if (*((void *)&v206 + 1) >= (unint64_t)v206)
                {
                  if (v208)
                  {
                    LODWORD(__v.__first_) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                    unint64_t v24 = __s;
                    --*((void *)&v206 + 1);
                  }
                  else
                  {
                    unint64_t v24 = __s;
                    if ((void)v206) {
                      __s[(void)v206 - 1] = 0;
                    }
                  }
                }
                else
                {
                  unint64_t v24 = __s;
                  __s[*((void *)&v206 + 1)] = 0;
                }
                std::wstring::append(this->__end_ - 1, v24);
                goto LABEL_147;
              }
              if (*((void *)&v206 + 1) >= (unint64_t)v206)
              {
                if (v208)
                {
                  LODWORD(__v.__first_) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                  char v41 = __s;
                  --*((void *)&v206 + 1);
                }
                else
                {
                  char v41 = __s;
                  if ((void)v206) {
                    __s[(void)v206 - 1] = 0;
                  }
                }
              }
              else
              {
                char v41 = __s;
                __s[*((void *)&v206 + 1)] = 0;
              }
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v41);
              std::vector<std::wstring>::pointer end = this->__end_;
              value = this->__end_cap_.__value_;
              if (end >= value)
              {
                uint64_t v80 = a2;
                unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
                unint64_t v82 = v81 + 1;
                if (v81 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
                if (2 * v83 > v82) {
                  unint64_t v82 = 2 * v83;
                }
                if (v83 >= 0x555555555555555) {
                  unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v84 = v82;
                }
                __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
                if (v84) {
                  unsigned int v85 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v84);
                }
                else {
                  unsigned int v85 = 0;
                }
                unint64_t v86 = v85 + v81;
                __v.__first_ = v85;
                __v.__begin_ = v86;
                __v.__end_cap_.__value_ = &v85[v84];
                long long v87 = *(_OWORD *)__p;
                v86->__r_.__value_.__r.__words[2] = v200;
                *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
                __p[1] = 0;
                std::wstring::size_type v200 = 0;
                __p[0] = 0;
                __v.__end_ = v86 + 1;
                std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
                uint64_t v88 = this->__end_;
                std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
                int v89 = SHIBYTE(v200);
                this->__end_ = v88;
                a2 = v80;
                if (v89 < 0) {
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v79 = *(_OWORD *)__p;
                end->__r_.__value_.__r.__words[2] = v200;
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v79;
                this->__end_ = end + 1;
              }
              goto LABEL_123;
            }
          }
        }
        goto LABEL_237;
      }
      if (!wcsncmp(v11, dword_2140A8E08, 7uLL))
      {
        uint64_t v25 = v11 + 7;
        uint64_t v26 = wcsstr(v11 + 7, (const __int32 *)" ");
        if (!v26) {
          goto LABEL_237;
        }
        TBuffer<wchar_t>::assign((uint64_t)&v201, dword_2140A8E28);
        TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), v25, v26 - v25);
        uint64_t v27 = v26 + 1;
        uint64_t v28 = wcsstr(v27, (const __int32 *)&unk_2140A8E40);
        if (!v28) {
          goto LABEL_237;
        }
        LODWORD(__v.__first_) = 61;
        TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
        TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), v27, v28 - v27);
        uint64_t v29 = *(void *)(a1 + 136);
        if (*((void *)&v202 + 1) >= (unint64_t)v202)
        {
          if (v204)
          {
            LODWORD(__v.__first_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
            --*((void *)&v202 + 1);
          }
          else if ((void)v202)
          {
            *(_DWORD *)&v201[4 * v202 - 4] = 0;
          }
        }
        else
        {
          *(_DWORD *)&v201[4 * *((void *)&v202 + 1)] = 0;
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 16))(v29);
        if (v42 == -1) {
          goto LABEL_237;
        }
        long long v43 = this;
        uint64_t v44 = v9;
        char v45 = v8;
        uint64_t v46 = v10;
        long long v47 = a2;
        uint64_t v48 = v43;
        uint64_t Tag = TTagManager::getTag(*(void *)(a1 + 136), v42);
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v209, v210);
        uint64_t v211 = 0;
        uint64_t v209 = (uint64_t *)&v210;
        int v210 = 0;
        TTagManager::getClosedTagSet(*(void *)(a1 + 136), Tag, &v209);
        std::vector<TPItnTagHandle_fake **>::insert<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,0>(v5, *(char **)(v5 + 8), v209, &v210);
        uint64_t v14 = v28 + 1;
        uint64_t v50 = v48;
        a2 = v47;
        unsigned int v10 = v46;
        uint64_t v8 = v45;
        unsigned int v9 = v44;
        this = v50;
      }
      else
      {
        if (!wcsncmp(v11, dword_2140A8E48, 7uLL))
        {
          int v30 = wcsstr(v11 + 7, (const __int32 *)&unk_2140A8E40);
          if (!v30) {
            goto LABEL_237;
          }
          int v31 = wcsstr(v11 + 7, v9);
          if (v31 && v31 < v30)
          {
            loggableUnicode((unsigned int *)a2, &__v);
            if (SHIBYTE(__v.__end_) >= 0) {
              p_v = &__v;
            }
            else {
              p_v = __v.__first_;
            }
            tknPrintf("Error: couldn't parse $Token() with embedded tags (%lld): '%s'. Ignored.\n", v152, v153, v154, v155, v11 - a2, p_v);
            if (SHIBYTE(__v.__end_) < 0) {
              operator delete(__v.__first_);
            }
            goto LABEL_237;
          }
          uint64_t v14 = v30 + 1;
          TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v11, v30 + 1 - v11);
          if (*((void *)&v206 + 1))
          {
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                __int32 v32 = __s;
                --*((void *)&v206 + 1);
              }
              else
              {
                __int32 v32 = __s;
                if ((void)v206) {
                  __s[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              __int32 v32 = __s;
              __s[*((void *)&v206 + 1)] = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v32);
            std::vector<std::wstring>::pointer v65 = this->__end_;
            unint64_t v64 = this->__end_cap_.__value_;
            if (v65 >= v64)
            {
              uint64_t v67 = a2;
              unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)this->__begin_) >> 3);
              unint64_t v69 = v68 + 1;
              if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)this->__begin_) >> 3);
              if (2 * v70 > v69) {
                unint64_t v69 = 2 * v70;
              }
              if (v70 >= 0x555555555555555) {
                unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v71 = v69;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
              if (v71) {
                uint64_t v72 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v71);
              }
              else {
                uint64_t v72 = 0;
              }
              char v73 = v72 + v68;
              __v.__first_ = v72;
              __v.__begin_ = v73;
              __v.__end_cap_.__value_ = &v72[v71];
              long long v74 = *(_OWORD *)__p;
              v73->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
              __p[1] = 0;
              std::wstring::size_type v200 = 0;
              __p[0] = 0;
              __v.__end_ = v73 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
              uint64_t v75 = this->__end_;
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              int v76 = SHIBYTE(v200);
              this->__end_ = v75;
              a2 = v67;
              if (v76 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v66 = *(_OWORD *)__p;
              v65->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
              this->__end_ = v65 + 1;
            }
            LOBYTE(__v.__first_) = 84;
            TBuffer<char>::insert((uint64_t)&v213, *((unint64_t *)&v214 + 1), (char *)&__v, 1uLL);
          }
          goto LABEL_147;
        }
        int v12 = wcsncmp(v11, v9, 1uLL);
        uint64_t v13 = v11 + 1;
        if (v12)
        {
          uint64_t v14 = wcsstr(v13, v9);
          if (!v14) {
            uint64_t v14 = &v11[wcslen(v11)];
          }
          TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v11, v14 - v11);
          if (*((void *)&v214 + 1) && v213[*((void *)&v214 + 1) - 1] == 79)
          {
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                uint64_t v15 = __s;
                --*((void *)&v206 + 1);
              }
              else
              {
                uint64_t v15 = __s;
                if ((void)v206) {
                  __s[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v15 = __s;
              __s[*((void *)&v206 + 1)] = 0;
            }
            std::wstring::append(this->__end_ - 1, v15);
          }
          else
          {
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                uint64_t v33 = __s;
                --*((void *)&v206 + 1);
              }
              else
              {
                uint64_t v33 = __s;
                if ((void)v206) {
                  __s[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v33 = __s;
              __s[*((void *)&v206 + 1)] = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v33);
            std::vector<std::wstring>::pointer v52 = this->__end_;
            uint64_t v51 = this->__end_cap_.__value_;
            if (v52 >= v51)
            {
              uint64_t v54 = a2;
              unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)this->__begin_) >> 3);
              unint64_t v56 = v55 + 1;
              if (v55 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)this->__begin_) >> 3);
              if (2 * v57 > v56) {
                unint64_t v56 = 2 * v57;
              }
              if (v57 >= 0x555555555555555) {
                unint64_t v58 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v58 = v56;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
              if (v58) {
                uint64_t v59 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v58);
              }
              else {
                uint64_t v59 = 0;
              }
              uint64_t v60 = v59 + v55;
              __v.__first_ = v59;
              __v.__begin_ = v60;
              __v.__end_cap_.__value_ = &v59[v58];
              long long v61 = *(_OWORD *)__p;
              v60->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
              __p[1] = 0;
              std::wstring::size_type v200 = 0;
              __p[0] = 0;
              __v.__end_ = v60 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
              long long v62 = this->__end_;
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              int v63 = SHIBYTE(v200);
              this->__end_ = v62;
              a2 = v54;
              if (v63 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v53 = *(_OWORD *)__p;
              v52->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
              this->__end_ = v52 + 1;
            }
LABEL_123:
            LOBYTE(__v.__first_) = 79;
            TBuffer<char>::insert((uint64_t)&v213, *((unint64_t *)&v214 + 1), (char *)&__v, 1uLL);
          }
LABEL_147:
          TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
          goto LABEL_148;
        }
        if (!*v13) {
          goto LABEL_237;
        }
        int v193 = a2;
        uint64_t v34 = 0;
        uint64_t v35 = 1;
        do
        {
          int v36 = wcsncmp(&v11[v34 + 1], v9, 1uLL);
          int v37 = wcsncmp(&v11[v34 + 1], (const __int32 *)&unk_2140A8E40, 1uLL);
          if (v36) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v35 + 1;
          }
          uint64_t v35 = v38 - (v37 == 0);
          int v39 = v11[v34 + 2];
          ++v34;
        }
        while (v39 && v35);
        if (v35) {
          goto LABEL_237;
        }
        TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v11, (v34 * 4 + 4) >> 2);
        a2 = v193;
        if (*((void *)&v206 + 1))
        {
          if (*((void *)&v206 + 1) >= (unint64_t)v206)
          {
            if (v208)
            {
              LODWORD(__v.__first_) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
              uint64_t v40 = __s;
              --*((void *)&v206 + 1);
            }
            else
            {
              uint64_t v40 = __s;
              if ((void)v206) {
                __s[(void)v206 - 1] = 0;
              }
            }
          }
          else
          {
            uint64_t v40 = __s;
            __s[*((void *)&v206 + 1)] = 0;
          }
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v40);
          std::vector<std::wstring>::pointer v91 = this->__end_;
          uint64_t v90 = this->__end_cap_.__value_;
          if (v91 >= v90)
          {
            unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (char *)this->__begin_) >> 3);
            unint64_t v94 = v93 + 1;
            if (v93 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (char *)this->__begin_) >> 3);
            if (2 * v95 > v94) {
              unint64_t v94 = 2 * v95;
            }
            if (v95 >= 0x555555555555555) {
              unint64_t v96 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v96 = v94;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
            if (v96) {
              uint64_t v97 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v96);
            }
            else {
              uint64_t v97 = 0;
            }
            uint64_t v98 = v97 + v93;
            __v.__first_ = v97;
            __v.__begin_ = v98;
            __v.__end_cap_.__value_ = &v97[v96];
            long long v99 = *(_OWORD *)__p;
            v98->__r_.__value_.__r.__words[2] = v200;
            *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
            __p[1] = 0;
            std::wstring::size_type v200 = 0;
            __p[0] = 0;
            __v.__end_ = v98 + 1;
            std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
            uint64_t v100 = this->__end_;
            std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
            int v101 = SHIBYTE(v200);
            this->__end_ = v100;
            a2 = v193;
            if (v101 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v92 = *(_OWORD *)__p;
            v91->__r_.__value_.__r.__words[2] = v200;
            *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v92;
            this->__end_ = v91 + 1;
          }
          LOBYTE(__v.__first_) = 78;
          TBuffer<char>::insert((uint64_t)&v213, *((unint64_t *)&v214 + 1), (char *)&__v, 1uLL);
        }
        TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
        uint64_t v14 = &v11[v34 + 1];
        uint64_t v5 = v195;
      }
LABEL_148:
      uint64_t v11 = v14;
    }
    while (*v14);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3) <= 1)
  {
    uint64_t v103 = wcsstr(a2, dword_2140A8DCC);
    if (v103)
    {
      std::vector<std::wstring>::resize(this, 0);
      char v104 = v103 + 5;
      if (v103[5])
      {
        uint64_t v196 = v103;
        uint64_t v198 = &this->__end_cap_;
        uint64_t v105 = 1;
        long long v106 = v103 + 5;
        while (1)
        {
          uint64_t v107 = wcsstr(v106, (const __int32 *)&unk_2140A8DE4);
          char v108 = v107;
          if (!v107) {
            break;
          }
          int v109 = wcsncmp(v107, dword_2140A8DCC, 5uLL);
          int v110 = wcsncmp(v108, dword_2140A8DEC, 6uLL);
          if (v109) {
            uint64_t v111 = v105;
          }
          else {
            uint64_t v111 = v105 + 1;
          }
          uint64_t v105 = v111 - (v110 == 0);
          if (v105 == 1 && !wcsncmp(v108, dword_2140A8E68, 5uLL))
          {
            TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
            TBuffer<wchar_t>::insert((uint64_t)&__s, 0, v104, v108 - v104);
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                uint64_t v112 = __s;
                --*((void *)&v206 + 1);
              }
              else
              {
                uint64_t v112 = __s;
                if ((void)v206) {
                  __s[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v112 = __s;
              __s[*((void *)&v206 + 1)] = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v112);
            std::vector<std::wstring>::pointer v114 = this->__end_;
            uint64_t v113 = this->__end_cap_.__value_;
            if (v114 >= v113)
            {
              uint64_t v116 = a2;
              unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v114 - (char *)this->__begin_) >> 3);
              unint64_t v118 = v117 + 1;
              if (v117 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - (char *)this->__begin_) >> 3);
              if (2 * v119 > v118) {
                unint64_t v118 = 2 * v119;
              }
              if (v119 >= 0x555555555555555) {
                unint64_t v120 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v120 = v118;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)&this->__end_cap_;
              if (v120) {
                uint64_t v121 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v198, v120);
              }
              else {
                uint64_t v121 = 0;
              }
              uint64_t v122 = v121 + v117;
              __v.__first_ = v121;
              __v.__begin_ = v122;
              __v.__end_cap_.__value_ = &v121[v120];
              long long v123 = *(_OWORD *)__p;
              v122->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
              __p[1] = 0;
              std::wstring::size_type v200 = 0;
              __p[0] = 0;
              __v.__end_ = v122 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
              uint64_t v124 = this->__end_;
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              int v125 = SHIBYTE(v200);
              this->__end_ = v124;
              a2 = v116;
              if (v125 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v115 = *(_OWORD *)__p;
              v114->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v114->__r_.__value_.__l.__data_ = v115;
              this->__end_ = v114 + 1;
            }
            char v104 = v108 + 5;
          }
          long long v106 = v108 + 1;
          if (v105) {
            BOOL v126 = v108[1] == 0;
          }
          else {
            BOOL v126 = 1;
          }
          if (v126)
          {
            if (v105) {
              goto LABEL_237;
            }
            TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
            TBuffer<wchar_t>::insert((uint64_t)&__s, 0, v104, v108 - v104);
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                uint64_t v127 = __s;
                --*((void *)&v206 + 1);
              }
              else
              {
                uint64_t v127 = __s;
                if ((void)v206) {
                  __s[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v127 = __s;
              __s[*((void *)&v206 + 1)] = 0;
            }
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v127);
            uint64_t v172 = a2;
            std::vector<std::wstring>::pointer v174 = this->__end_;
            double v173 = this->__end_cap_.__value_;
            if (v174 >= v173)
            {
              unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * (((char *)v174 - (char *)this->__begin_) >> 3);
              unint64_t v178 = v177 + 1;
              if (v177 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * (((char *)v173 - (char *)this->__begin_) >> 3);
              if (2 * v179 > v178) {
                unint64_t v178 = 2 * v179;
              }
              if (v179 >= 0x555555555555555) {
                unint64_t v180 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v180 = v178;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)&this->__end_cap_;
              if (v180) {
                uint64_t v181 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v198, v180);
              }
              else {
                uint64_t v181 = 0;
              }
              uint64_t v182 = v181 + v177;
              __v.__first_ = v181;
              __v.__begin_ = v182;
              __v.__end_cap_.__value_ = &v181[v180];
              long long v183 = *(_OWORD *)__p;
              v182->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
              __p[1] = 0;
              std::wstring::size_type v200 = 0;
              __p[0] = 0;
              __v.__end_ = v182 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
              BOOL v176 = this->__end_;
              std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              int v184 = SHIBYTE(v200);
              this->__end_ = v176;
              if (v184 < 0)
              {
                operator delete(__p[0]);
                BOOL v176 = this->__end_;
              }
            }
            else
            {
              long long v175 = *(_OWORD *)__p;
              v174->__r_.__value_.__r.__words[2] = v200;
              *(_OWORD *)&v174->__r_.__value_.__l.__data_ = v175;
              BOOL v176 = v174 + 1;
              this->__end_ = v174 + 1;
            }
            if (v176 == this->__begin_)
            {
              char v102 = 65;
            }
            else
            {
              unint64_t v185 = 0;
              uint64_t v186 = v172;
              unint64_t v187 = v196 - v172;
              char v102 = 65;
              do
              {
                TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
                TBuffer<wchar_t>::insert((uint64_t)&__s, 0, v186, v187);
                double v188 = &this->__begin_[v185];
                if (SHIBYTE(v188->__r_.__value_.__r.__words[2]) < 0) {
                  double v188 = (std::wstring *)v188->__r_.__value_.__r.__words[0];
                }
                uint64_t v189 = 0;
                while (v188->__r_.__value_.__s.__data_[v189++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)v188, v189 - 1);
                uint64_t v191 = 6;
                while (v108[v191++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v108 + 6, v191 - 7);
                if (*((void *)&v206 + 1) >= (unint64_t)v206)
                {
                  if (v208)
                  {
                    LODWORD(__v.__first_) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
                    --*((void *)&v206 + 1);
                  }
                  else if ((void)v206)
                  {
                    __s[(void)v206 - 1] = 0;
                  }
                }
                else
                {
                  __s[*((void *)&v206 + 1)] = 0;
                }
                MEMORY[0x216698480](&this->__begin_[v185++]);
              }
              while (v185 < 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3));
            }
            goto LABEL_238;
          }
        }
      }
      goto LABEL_237;
    }
    TBuffer<wchar_t>::resize((uint64_t)&__s, 0);
    if (*a2)
    {
      uint64_t v128 = (const __int32 *)" ";
      do
      {
        if (!wcsncmp(a2, dword_2140A8E08, 7uLL))
        {
          uint64_t v131 = a2 + 7;
          uint64_t v132 = wcsstr(v131, v128);
          if (!v132) {
            goto LABEL_237;
          }
          TBuffer<wchar_t>::assign((uint64_t)&v201, dword_2140A8E28);
          TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), v131, v132 - v131);
          uint64_t v133 = v132 + 1;
          uint64_t v134 = wcsstr(v133, (const __int32 *)&unk_2140A8E40);
          if (!v134) {
            goto LABEL_237;
          }
          LODWORD(__v.__first_) = 61;
          TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
          TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), v133, v134 - v133);
          uint64_t v135 = *(void *)(a1 + 136);
          if (*((void *)&v202 + 1) >= (unint64_t)v202)
          {
            if (v204)
            {
              LODWORD(__v.__first_) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
              --*((void *)&v202 + 1);
            }
            else if ((void)v202)
            {
              *(_DWORD *)&v201[4 * v202 - 4] = 0;
            }
          }
          else
          {
            *(_DWORD *)&v201[4 * *((void *)&v202 + 1)] = 0;
          }
          uint64_t v140 = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 16))(v135);
          if (v140 == -1) {
            goto LABEL_237;
          }
          uint64_t v141 = TTagManager::getTag(*(void *)(a1 + 136), v140);
          std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v209, v210);
          uint64_t v211 = 0;
          uint64_t v209 = (uint64_t *)&v210;
          int v210 = 0;
          TTagManager::getClosedTagSet(*(void *)(a1 + 136), v141, &v209);
          std::vector<TPItnTagHandle_fake **>::insert<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,0>(v5, *(char **)(v5 + 8), v209, &v210);
          a2 = v134 + 1;
        }
        else if (!wcsncmp(a2, dword_2140A8E48, 7uLL))
        {
          if (*v213 != 84) {
            goto LABEL_150;
          }
          uint64_t v136 = wcsstr(a2 + 8, (const __int32 *)&unk_2140A8E40);
          uint64_t v137 = v136;
          if (!v136) {
            goto LABEL_237;
          }
          TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), a2 + 7, v136 - (a2 + 7));
          a2 = v137 + 1;
        }
        else
        {
          if (!wcsncmp(a2, dword_2140A8DCC, 5uLL))
          {
            if (*v213 == 84) {
              char v102 = 0;
            }
            else {
              char v102 = 83;
            }
            goto LABEL_238;
          }
          uint64_t v129 = a2 + 1;
          if (!wcsncmp(a2, (const __int32 *)&unk_2140A8DE4, 1uLL))
          {
            uint64_t v138 = wcsstr(a2 + 1, v128);
            TBuffer<wchar_t>::resize((uint64_t)&v201, 0);
            TBuffer<wchar_t>::insert((uint64_t)&v201, 0, v129, v138 - v129);
            uint64_t v139 = *(void *)(a1 + 136);
            if (*((void *)&v202 + 1) >= (unint64_t)v202)
            {
              if (v204)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v201, *((unint64_t *)&v202 + 1), (int *)&__v, 1uLL);
                --*((void *)&v202 + 1);
              }
              else if ((void)v202)
              {
                *(_DWORD *)&v201[4 * v202 - 4] = 0;
              }
            }
            else
            {
              *(_DWORD *)&v201[4 * *((void *)&v202 + 1)] = 0;
            }
            uint64_t v142 = (*(uint64_t (**)(uint64_t))(*(void *)v139 + 16))(v139);
            if (v142 == -1) {
              goto LABEL_237;
            }
            uint64_t v143 = TTagManager::getTag(*(void *)(a1 + 136), v142);
            std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v209, v210);
            uint64_t v211 = 0;
            uint64_t v209 = (uint64_t *)&v210;
            int v210 = 0;
            TTagManager::getClosedTagSet(*(void *)(a1 + 136), v143, &v209);
            std::vector<TPItnTagHandle_fake **>::insert<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,0>(v195, *(char **)(v195 + 8), v209, &v210);
            if (!*v138) {
              goto LABEL_237;
            }
            uint64_t v144 = v128;
            uint64_t v145 = 0;
            uint64_t v146 = 1;
            do
            {
              int v147 = wcsncmp(&v138[v145], (const __int32 *)&unk_2140A8DE4, 1uLL);
              int v148 = wcsncmp(&v138[v145], (const __int32 *)&unk_2140A8E40, 1uLL);
              if (v147) {
                uint64_t v149 = v146;
              }
              else {
                uint64_t v149 = v146 + 1;
              }
              uint64_t v146 = v149 - (v148 == 0);
              __int32 v150 = v138[++v145];
            }
            while (v150 && v146);
            if (v146) {
              goto LABEL_237;
            }
            TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), v138 + 1, ((v145 * 4 - 4) >> 2) - 1);
            uint64_t v128 = v144;
            a2 = &v138[v145];
            uint64_t v5 = v195;
          }
          else
          {
            uint64_t v130 = wcsstr(a2 + 1, (const __int32 *)&unk_2140A8DE4);
            if (!v130) {
              uint64_t v130 = &a2[wcslen(a2)];
            }
            TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), a2, v130 - a2);
            a2 = v130;
          }
        }
      }
      while (*a2);
    }
    if (*((void *)&v206 + 1))
    {
      std::vector<std::wstring>::resize(this, 0);
      if (*((void *)&v206 + 1) >= (unint64_t)v206)
      {
        if (v208)
        {
          LODWORD(__v.__first_) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v206 + 1), (int *)&__v, 1uLL);
          uint64_t v151 = __s;
          --*((void *)&v206 + 1);
        }
        else
        {
          uint64_t v151 = __s;
          if ((void)v206) {
            __s[(void)v206 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v151 = __s;
        __s[*((void *)&v206 + 1)] = 0;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v151);
      unsigned int v159 = this->__end_cap_.__value_;
      std::vector<std::wstring>::pointer v160 = this->__end_;
      if (v160 >= v159)
      {
        unint64_t v162 = 0xAAAAAAAAAAAAAAABLL * (((char *)v160 - (char *)this->__begin_) >> 3);
        unint64_t v163 = v162 + 1;
        if (v162 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - (char *)this->__begin_) >> 3);
        if (2 * v164 > v163) {
          unint64_t v163 = 2 * v164;
        }
        if (v164 >= 0x555555555555555) {
          unint64_t v165 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v165 = v163;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)&this->__end_cap_;
        if (v165) {
          unsigned int v166 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&this->__end_cap_, v165);
        }
        else {
          unsigned int v166 = 0;
        }
        int v167 = v166 + v162;
        __v.__first_ = v166;
        __v.__begin_ = v167;
        __v.__end_cap_.__value_ = &v166[v165];
        long long v168 = *(_OWORD *)__p;
        v167->__r_.__value_.__r.__words[2] = v200;
        *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
        __p[1] = 0;
        std::wstring::size_type v200 = 0;
        __p[0] = 0;
        __v.__end_ = v167 + 1;
        std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
        uint64_t v169 = this->__end_;
        std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
        int v170 = SHIBYTE(v200);
        this->__end_ = v169;
        if (v170 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v161 = *(_OWORD *)__p;
        v160->__r_.__value_.__r.__words[2] = v200;
        *(_OWORD *)&v160->__r_.__value_.__l.__data_ = v161;
        this->__end_ = v160 + 1;
      }
      int v171 = *v213;
      if (v171 == 84)
      {
        char v102 = 84;
      }
      else if (v171 == 78)
      {
        char v102 = 78;
      }
      else
      {
        char v102 = 66;
      }
    }
    else
    {
LABEL_237:
      char v102 = 0;
    }
  }
  else
  {
LABEL_150:
    char v102 = 83;
  }
LABEL_238:
  if (v204)
  {
    if (v201 != v203 && v201 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (v208 && __s != (std::wstring::value_type *)v207 && __s) {
    MEMORY[0x216698730]();
  }
  if (v216 && v213 != v215 && v213) {
    MEMORY[0x216698730]();
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v209, v210);
  return v102;
}

void sub_2140029F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&STACK[0x8C8]);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x488]))
  {
    if (a26 != a14 && a26 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0x8A8]))
  {
    unint64_t v28 = STACK[0x490];
    if (STACK[0x490] != a15)
    {
      if (v28) {
        MEMORY[0x216698730](v28, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xA08]))
  {
    unint64_t v29 = STACK[0x8F0];
    if (STACK[0x8F0] != a16)
    {
      if (v29) {
        MEMORY[0x216698730](v29, 0x1000C4077774924);
      }
    }
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x8B0], (void *)STACK[0x8B8]);
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::resize(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __sz)
{
  std::vector<std::wstring>::pointer end = this->__end_;
  std::vector<std::wstring>::size_type v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  BOOL v5 = __sz >= v4;
  std::vector<std::wstring>::size_type v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::wstring>::__append(this, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    this->__end_ = v7;
  }
}

char *std::vector<TPItnTagHandle_fake **>::insert<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,0>(uint64_t a1, char *a2, void *a3, void *a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = a3;
    do
    {
      std::vector<std::wstring>::size_type v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          std::vector<std::wstring>::size_type v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          BOOL v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      BOOL v5 = v7;
    }
    while (v7 != a4);
  }
  return std::vector<TPItnTagHandle_fake **>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(a1, a2, a3, a4, v4);
}

uint64_t TBuffer<wchar_t>::assign(uint64_t a1, int *a2, unint64_t a3)
{
  TBuffer<wchar_t>::resize(a1, 0);

  return TBuffer<wchar_t>::insert(a1, 0, a2, a3);
}

void TFormatter::addGrammarBlocks(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (*(void *)(a1 + 112))
  {
    unsigned int v9 = (TParam *)(*(void *)(a1 + 48) + 3792);
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v9);
    if (!*((unsigned char *)v9 + TParam::getValidConfig(v9, ActiveConfigHandle) + 152))
    {
      uint64_t v11 = (TParam *)(*(void *)(a1 + 48) + 1872);
      uint64_t v12 = TParam::getActiveConfigHandle(v11);
      uint64_t v13 = *((int *)v11 + TParam::getValidConfig(v11, v12) + 40);
      uint64_t v15 = *a2;
      uint64_t v14 = a2[1];
      long long v123 = 0;
      uint64_t v124 = 0;
      uint64_t v125 = 0;
      uint64_t v16 = TFormatter::stateToParamConfig((TFormatter *)a1, (const TItnControlState *)(v15 + 112 * a3 + 40));
      if (0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 4) >= (unint64_t)(v13 + a3)) {
        uint64_t v17 = v13 + a3;
      }
      else {
        uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 4);
      }
      TGrammarManager2::search(*(void **)(a1 + 112), a2, a3, v17, v16, (uint64_t *)&v123);
      TAllocator::TAllocator((TAllocator *)v122, 2048);
      memset(&v121, 0, sizeof(v121));
      unint64_t v118 = 0;
      unint64_t v119 = 0;
      unint64_t v120 = 0;
      long long v115 = 0;
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v112 = 0;
      uint64_t v113 = 0;
      uint64_t v114 = 0;
      unint64_t v18 = v123;
      if (v124 != v123)
      {
        uint64_t v19 = 0;
        unint64_t v106 = (uint64_t)(*((void *)a5 + 7) - *((void *)a5 + 6)) >> 3;
        do
        {
          int v20 = &v18[56 * v19];
          uint64_t v21 = *((void *)v20 + 3);
          uint64_t v108 = *((void *)v20 + 2) + a3 - *((void *)v20 + 4);
          uint64_t v105 = (unsigned int *)*((void *)v20 + 1);
          uint64_t v22 = TFsa::newTrans(a5, a4, *(void *)(*((void *)a5 + 6) + 8 * v108), (uint64_t)v105);
          uint64_t v23 = v22;
          uint64_t v104 = v19;
          unint64_t v24 = v119;
          if (v119 >= (uint64_t *)v120)
          {
            uint64_t v26 = ((char *)v119 - (unsigned char *)v118) >> 3;
            if ((unint64_t)(v26 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v27 = (v120 - (unsigned char *)v118) >> 2;
            if (v27 <= v26 + 1) {
              unint64_t v27 = v26 + 1;
            }
            if ((unint64_t)(v120 - (unsigned char *)v118) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v120, v28);
            }
            else {
              unint64_t v29 = 0;
            }
            int v30 = (uint64_t *)&v29[8 * v26];
            uint64_t *v30 = v23;
            uint64_t v25 = v30 + 1;
            __int32 v32 = (char *)v118;
            int v31 = (char *)v119;
            if (v119 != v118)
            {
              do
              {
                uint64_t v33 = *((void *)v31 - 1);
                v31 -= 8;
                *--int v30 = v33;
              }
              while (v31 != v32);
              int v31 = (char *)v118;
            }
            unint64_t v118 = v30;
            unint64_t v119 = v25;
            unint64_t v120 = &v29[8 * v28];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *unint64_t v119 = v22;
            uint64_t v25 = v24 + 1;
          }
          unint64_t v119 = v25;
          if (v118 != v25)
          {
            uint64_t v107 = v21 + a3;
            do
            {
              uint64_t v34 = (__int32 **)*(v25 - 1);
              unint64_t v119 = v25 - 1;
              uint64_t v35 = *v34;
              int v37 = (unint64_t *)v34[2];
              int v36 = (unint64_t *)v34[3];
              TFsa::deleteTrans(a5, v34);
              int v38 = TFormatter::splitGrammarResult(a1, v35, &v121, (uint64_t)&v115, 0);
              LOBYTE(v39) = v38;
              if (v38 == 78)
              {
                do
                {
                  begiuint64_t n = v121.__begin_;
                  if (SHIBYTE(v121.__begin_->__r_.__value_.__r.__words[2]) < 0) {
                    begiuint64_t n = (std::vector<std::wstring>::pointer)v121.__begin_->__r_.__value_.__l.__data_;
                  }
                  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, (__int32 *)begin);
                  if (v111 >= 0) {
                    p_p = (__int32 *)&__p;
                  }
                  else {
                    p_p = (__int32 *)__p;
                  }
                  int v39 = TFormatter::splitGrammarResult(a1, p_p, &v121, (uint64_t)&v115, 1);
                  if (SHIBYTE(v111) < 0) {
                    operator delete(__p);
                  }
                }
                while (v39 == 78);
              }
              if (*v36 >= v106) {
                uint64_t v42 = -1;
              }
              else {
                uint64_t v42 = v107;
              }
              if (*v37 >= v106) {
                uint64_t v43 = -1;
              }
              else {
                uint64_t v43 = v108;
              }
              if (v39 > 0x52u)
              {
                if (v39 == 83)
                {
                  int v110 = 0;
                  uint64_t v111 = 0;
                  long long __p = &v110;
                  unint64_t v56 = (unint64_t *)v115;
                  unint64_t v55 = v116;
                  if (v115 != v116)
                  {
                    if (v121.__begin_ != v121.__end_)
                    {
                      TFsa::newState(a5, 0);
                      unint64_t v56 = (unint64_t *)v115;
                      unint64_t v55 = v116;
                    }
                    while (v56 != v55)
                    {
                      std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>((uint64_t **)&__p, &v110, v56, (uint64_t *)v56);
                      ++v56;
                    }
                    operator new();
                  }
                  uint64_t v57 = (uint64_t)v36;
                  std::vector<std::wstring>::pointer v79 = v121.__begin_;
                  if (v121.__end_ != v121.__begin_)
                  {
                    unint64_t v80 = 0;
                    unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v121.__end_ - (char *)v121.__begin_) >> 3);
                    do
                    {
                      unint64_t v82 = v80 + 1;
                      unint64_t v83 = v37;
                      if (v80 + 1 != v81)
                      {
                        unint64_t v83 = TFsa::newState(a5, 0);
                        std::vector<std::wstring>::pointer v79 = v121.__begin_;
                      }
                      unint64_t v84 = &v79[v80];
                      if (SHIBYTE(v84->__r_.__value_.__r.__words[2]) < 0) {
                        std::wstring::size_type size = v84->__r_.__value_.__l.__size_;
                      }
                      else {
                        std::wstring::size_type size = HIBYTE(v84->__r_.__value_.__r.__words[2]);
                      }
                      std::wstring::size_type v86 = size + 1;
                      if (v86 >> 62) {
                        uint64_t v87 = -1;
                      }
                      else {
                        uint64_t v87 = 4 * v86;
                      }
                      uint64_t v88 = (__int32 *)TAllocator::allocate((TAllocator *)v122, v87);
                      uint64_t v89 = (uint64_t)v88;
                      uint64_t v90 = &v121.__begin_[v80];
                      if (SHIBYTE(v90->__r_.__value_.__r.__words[2]) < 0) {
                        uint64_t v90 = (std::wstring *)v90->__r_.__value_.__r.__words[0];
                      }
                      wcscpy(v88, (const __int32 *)v90);
                      uint64_t v91 = TFsa::newTrans(a5, v57, (uint64_t)v83, v89);
                      uint64_t v92 = v91;
                      unint64_t v93 = v119;
                      if (v119 >= (uint64_t *)v120)
                      {
                        uint64_t v95 = ((char *)v119 - (unsigned char *)v118) >> 3;
                        if ((unint64_t)(v95 + 1) >> 61) {
                          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v96 = (v120 - (unsigned char *)v118) >> 2;
                        if (v96 <= v95 + 1) {
                          unint64_t v96 = v95 + 1;
                        }
                        if ((unint64_t)(v120 - (unsigned char *)v118) >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v97 = v96;
                        }
                        if (v97) {
                          uint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v120, v97);
                        }
                        else {
                          uint64_t v98 = 0;
                        }
                        long long v99 = (uint64_t *)&v98[8 * v95];
                        uint64_t *v99 = v92;
                        unint64_t v94 = v99 + 1;
                        int v101 = (char *)v118;
                        uint64_t v100 = (char *)v119;
                        if (v119 != v118)
                        {
                          do
                          {
                            uint64_t v102 = *((void *)v100 - 1);
                            v100 -= 8;
                            *--long long v99 = v102;
                          }
                          while (v100 != v101);
                          uint64_t v100 = (char *)v118;
                        }
                        unint64_t v118 = v99;
                        unint64_t v119 = v94;
                        unint64_t v120 = &v98[8 * v97];
                        if (v100) {
                          operator delete(v100);
                        }
                      }
                      else
                      {
                        *unint64_t v119 = v91;
                        unint64_t v94 = v93 + 1;
                      }
                      unint64_t v119 = v94;
                      uint64_t v57 = (uint64_t)v37;
                      if (v83 != v37)
                      {
                        if (v115 != v116)
                        {
                          TFsa::newState(a5, 0);
                          operator new();
                        }
                        uint64_t v57 = (uint64_t)v83;
                      }
                      std::vector<std::wstring>::pointer v79 = v121.__begin_;
                      unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v121.__end_ - (char *)v121.__begin_) >> 3);
                      unint64_t v80 = v82;
                    }
                    while (v82 < v81);
                  }
                  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&__p, v110);
                }
                else
                {
                  if (v39 != 84) {
                    goto LABEL_56;
                  }
                  std::vector<std::wstring>::pointer data = v121.__begin_;
                  if (SHIBYTE(v121.__begin_->__r_.__value_.__r.__words[2]) < 0) {
                    std::vector<std::wstring>::pointer data = (std::vector<std::wstring>::pointer)v121.__begin_->__r_.__value_.__l.__data_;
                  }
                  HeadClone = (__int32 **)TLexicon::findHeadClone(*(void **)(a1 + 32), (__int32 *)data);
                  if (!HeadClone)
                  {
                    std::vector<std::wstring>::pointer v47 = v121.__begin_;
                    if (SHIBYTE(v121.__begin_->__r_.__value_.__r.__words[2]) < 0) {
                      std::vector<std::wstring>::pointer v47 = (std::vector<std::wstring>::pointer)v121.__begin_->__r_.__value_.__l.__data_;
                    }
                    HeadClone = (__int32 **)TLexicon::addTempWord(*(void *)(a1 + 32), (int *)v47, 0, 0, 0);
                  }
                  TFormatter::addWordBlocks(a1, HeadClone, (uint64_t)v36, (uint64_t)v37, (uint64_t)a5, v42, v43, (char **)&v115);
                }
              }
              else
              {
                if (v39 != 65)
                {
                  if (v39 == 66)
                  {
                    std::vector<std::wstring>::pointer v44 = v121.__begin_;
                    if (SHIBYTE(v121.__begin_->__r_.__value_.__r.__words[2]) < 0) {
                      std::vector<std::wstring>::pointer v44 = (std::vector<std::wstring>::pointer)v121.__begin_->__r_.__value_.__l.__data_;
                    }
                    TFormatter::addCapBlocks((void *)a1, (uint64_t)a5, (uint64_t)v36, (uint64_t)v37, (unsigned int *)v44, v42, v43, (unint64_t **)&v115);
                  }
LABEL_56:
                  loggableUnicode(v105, &__p);
                  if (v111 >= 0) {
                    std::vector<std::wstring>::pointer v52 = &__p;
                  }
                  else {
                    std::vector<std::wstring>::pointer v52 = __p;
                  }
                  tknPrintf("Error: couldn't parse '%s' spanning [%llu,%llu). Ignored.\n", v48, v49, v50, v51, v52, v107, v108);
                  if (SHIBYTE(v111) < 0) {
                    operator delete(__p);
                  }
                  TFormatter::addCapBlocks((void *)a1, (uint64_t)a5, (uint64_t)v36, (uint64_t)v37, &dword_2140A8DB4, v42, v43, (unint64_t **)&v115);
                }
                uint64_t v54 = (unint64_t *)v115;
                long long v53 = v116;
                if (v115 != v116)
                {
                  if (v121.__begin_ != v121.__end_)
                  {
                    TFsa::newState(a5, 0);
                    uint64_t v54 = (unint64_t *)v115;
                    long long v53 = v116;
                  }
                  int v110 = 0;
                  uint64_t v111 = 0;
                  long long __p = &v110;
                  while (v54 != v53)
                  {
                    std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>((uint64_t **)&__p, &v110, v54, (uint64_t *)v54);
                    ++v54;
                  }
                  operator new();
                }
                std::vector<std::wstring>::pointer v58 = v121.__begin_;
                if (v121.__end_ != v121.__begin_)
                {
                  unint64_t v59 = 0;
                  do
                  {
                    uint64_t v60 = &v58[v59];
                    if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0) {
                      std::wstring::size_type v61 = v60->__r_.__value_.__l.__size_;
                    }
                    else {
                      std::wstring::size_type v61 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
                    }
                    std::wstring::size_type v62 = v61 + 1;
                    if (v62 >> 62) {
                      uint64_t v63 = -1;
                    }
                    else {
                      uint64_t v63 = 4 * v62;
                    }
                    unint64_t v64 = (__int32 *)TAllocator::allocate((TAllocator *)v122, v63);
                    uint64_t v65 = (uint64_t)v64;
                    long long v66 = &v121.__begin_[v59];
                    if (SHIBYTE(v66->__r_.__value_.__r.__words[2]) < 0) {
                      long long v66 = (std::wstring *)v66->__r_.__value_.__r.__words[0];
                    }
                    wcscpy(v64, (const __int32 *)v66);
                    uint64_t v67 = TFsa::newTrans(a5, (uint64_t)v36, (uint64_t)v37, v65);
                    uint64_t v68 = v67;
                    unint64_t v69 = v119;
                    if (v119 >= (uint64_t *)v120)
                    {
                      uint64_t v71 = ((char *)v119 - (unsigned char *)v118) >> 3;
                      if ((unint64_t)(v71 + 1) >> 61) {
                        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v72 = (v120 - (unsigned char *)v118) >> 2;
                      if (v72 <= v71 + 1) {
                        unint64_t v72 = v71 + 1;
                      }
                      if ((unint64_t)(v120 - (unsigned char *)v118) >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v73 = v72;
                      }
                      if (v73) {
                        long long v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v120, v73);
                      }
                      else {
                        long long v74 = 0;
                      }
                      uint64_t v75 = (uint64_t *)&v74[8 * v71];
                      *uint64_t v75 = v68;
                      unint64_t v70 = v75 + 1;
                      uint64_t v77 = (char *)v118;
                      int v76 = (char *)v119;
                      if (v119 != v118)
                      {
                        do
                        {
                          uint64_t v78 = *((void *)v76 - 1);
                          v76 -= 8;
                          *--uint64_t v75 = v78;
                        }
                        while (v76 != v77);
                        int v76 = (char *)v118;
                      }
                      unint64_t v118 = v75;
                      unint64_t v119 = v70;
                      unint64_t v120 = &v74[8 * v73];
                      if (v76) {
                        operator delete(v76);
                      }
                    }
                    else
                    {
                      *unint64_t v119 = v67;
                      unint64_t v70 = v69 + 1;
                    }
                    unint64_t v119 = v70;
                    ++v59;
                    std::vector<std::wstring>::pointer v58 = v121.__begin_;
                  }
                  while (v59 < 0xAAAAAAAAAAAAAAABLL * (((char *)v121.__end_ - (char *)v121.__begin_) >> 3));
                }
              }
              uint64_t v25 = v119;
            }
            while (v118 != v119);
          }
          uint64_t v19 = v104 + 1;
          unint64_t v18 = v123;
        }
        while (v104 + 1 < (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v124 - v123) >> 3)));
      }
      TGrammarManager2::clearResult(*(TGrammarManager2 **)(a1 + 112));
      if (v112) {
        operator delete(v112);
      }
      if (v115)
      {
        uint64_t v116 = (unint64_t *)v115;
        operator delete(v115);
      }
      if (v118)
      {
        unint64_t v119 = (uint64_t *)v118;
        operator delete(v118);
      }
      unint64_t v118 = &v121;
      std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
      TAllocator::clear((TAllocator *)v122);
      if (v123)
      {
        uint64_t v124 = v123;
        operator delete(v123);
      }
    }
  }
}

void sub_214003710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  a33 = (void *)(v34 - 176);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  TAllocator::clear((TAllocator *)(v34 - 152));
  int v36 = *(void **)(v34 - 112);
  if (v36)
  {
    *(void *)(v34 - 104) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void TFormatter::addWordBlocks(uint64_t a1, __int32 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char **a8)
{
  unint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  unint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  std::vector<std::wstring>::pointer v52 = (__int32 *)&v54;
  long long v53 = xmmword_214085190;
  char v55 = 1;
  TWord::getWrittenForm(a2, (uint64_t)&v52);
  uint64_t v49 = v51;
  long long v50 = xmmword_214085190;
  v51[2048] = 1;
  (*(void (**)(void, __int32 *, void, unsigned char **))(**(void **)(a1 + 120) + 48))(*(void *)(a1 + 120), *a2, 0, &v49);
  long long __p = 0;
  std::vector<std::wstring>::pointer v47 = 0;
  uint64_t v48 = 0;
  if (*((void *)&v50 + 1))
  {
    unint64_t v15 = 0;
    do
    {
      unint64_t v16 = *(void *)&v49[8 * v15];
      if (v16)
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 120) + 32);
        if (v16 <= (*(void *)(*(void *)(a1 + 120) + 40) - v17) >> 3) {
          unint64_t v16 = *(void *)(v17 + 8 * v16 - 8);
        }
        else {
          unint64_t v16 = 0;
        }
      }
      if (!*(unsigned char *)(v16 + 145)
        && *(void *)(v16 + 32) == *(void *)(v16 + 24)
        && *(void *)(v16 + 56) == *(void *)(v16 + 48))
      {
        uint64_t v19 = (const __int32 *)(v16 + 120);
        if (*(char *)(v16 + 143) < 0) {
          uint64_t v19 = *(const __int32 **)v19;
        }
        if (*v19)
        {
          if (*((void *)&v53 + 1) >= (unint64_t)v53)
          {
            if (v55)
            {
              v62[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v52, *((unint64_t *)&v53 + 1), v62, 1uLL);
              int v20 = v52;
              --*((void *)&v53 + 1);
            }
            else
            {
              int v20 = v52;
              if ((void)v53) {
                v52[(void)v53 - 1] = 0;
              }
            }
          }
          else
          {
            int v20 = v52;
            v52[*((void *)&v53 + 1)] = 0;
          }
          if (!wcscasecmp(v20, v19))
          {
            if (*((void *)&v53 + 1) >= (unint64_t)v53)
            {
              if (v55)
              {
                v62[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v52, *((unint64_t *)&v53 + 1), v62, 1uLL);
                uint64_t v21 = v52;
                --*((void *)&v53 + 1);
              }
              else
              {
                uint64_t v21 = v52;
                if ((void)v53) {
                  v52[(void)v53 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v21 = v52;
              v52[*((void *)&v53 + 1)] = 0;
            }
            if (wcscmp(v21, v19))
            {
              if (v47 >= v48)
              {
                uint64_t v23 = (v47 - __p) >> 3;
                if ((unint64_t)(v23 + 1) >> 61) {
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v24 = (v48 - __p) >> 2;
                if (v24 <= v23 + 1) {
                  unint64_t v24 = v23 + 1;
                }
                if ((unint64_t)(v48 - __p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v25 = v24;
                }
                if (v25) {
                  uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v48, v25);
                }
                else {
                  uint64_t v26 = 0;
                }
                unint64_t v27 = (const __int32 **)&v26[8 * v23];
                __int32 *v27 = v19;
                uint64_t v22 = (char *)(v27 + 1);
                unint64_t v28 = v47;
                if (v47 != __p)
                {
                  do
                  {
                    unint64_t v29 = (const __int32 *)*((void *)v28 - 1);
                    v28 -= 8;
                    *--unint64_t v27 = v29;
                  }
                  while (v28 != __p);
                  unint64_t v28 = __p;
                }
                long long __p = (char *)v27;
                uint64_t v48 = &v26[8 * v25];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *(void *)std::vector<std::wstring>::pointer v47 = v19;
                uint64_t v22 = v47 + 8;
              }
              std::vector<std::wstring>::pointer v47 = v22;
            }
          }
        }
      }
      ++v15;
      unint64_t v18 = *((void *)&v50 + 1);
    }
    while (v15 < *((void *)&v50 + 1));
    if (__p != v47)
    {
      if (*((void *)&v53 + 1) >= (unint64_t)v53)
      {
        if (v55)
        {
          v62[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v52, *((unint64_t *)&v53 + 1), v62, 1uLL);
          int v30 = v52;
          --*((void *)&v53 + 1);
        }
        else
        {
          int v30 = v52;
          if ((void)v53) {
            v52[(void)v53 - 1] = 0;
          }
        }
      }
      else
      {
        int v30 = v52;
        v52[*((void *)&v53 + 1)] = 0;
      }
      if (v47 >= v48)
      {
        uint64_t v31 = (v47 - __p) >> 3;
        if ((unint64_t)(v31 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v32 = (v48 - __p) >> 2;
        if (v32 <= v31 + 1) {
          unint64_t v32 = v31 + 1;
        }
        if ((unint64_t)(v48 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33) {
          uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v48, v33);
        }
        else {
          uint64_t v34 = 0;
        }
        uint64_t v35 = (__int32 **)&v34[8 * v31];
        int v36 = &v34[8 * v33];
        *uint64_t v35 = v30;
        int v37 = v47;
        if (v47 != __p)
        {
          do
          {
            int v38 = (__int32 *)*((void *)v37 - 1);
            v37 -= 8;
            *--uint64_t v35 = v38;
          }
          while (v37 != __p);
          int v37 = __p;
        }
        uint64_t v48 = v36;
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(void *)std::vector<std::wstring>::pointer v47 = v30;
      }
      unint64_t v18 = *((void *)&v50 + 1);
    }
    if (v18)
    {
      uint64_t v39 = 0;
      while (1)
      {
        unint64_t v40 = *(void *)&v49[8 * v39];
        if (v40
          && (uint64_t v41 = *(void *)(*(void *)(a1 + 120) + 32),
              v40 <= (*(void *)(*(void *)(a1 + 120) + 40) - v41) >> 3))
        {
          uint64_t v42 = *(void *)(v41 + 8 * v40 - 8);
        }
        else
        {
          uint64_t v42 = 0;
        }
        if (!*(unsigned char *)(v42 + 145)) {
          break;
        }
        if (++v39 >= v18)
        {
          std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v56, v57, *a8, a8[1], (a8[1] - *a8) >> 3);
          TFormatter::addCapBlocks((void *)a1, a5, a3, a4, &dword_2140A8DB4, a6, a7, &v56);
        }
      }
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v56, v57, *(char **)(v42 + 96), *(char **)(v42 + 104), (uint64_t)(*(void *)(v42 + 104) - *(void *)(v42 + 96)) >> 3);
      if (&v59 != (unint64_t **)(v42 + 72)) {
        std::vector<TPItnTagHandle_fake **>::__assign_with_size[abi:ne180100]<TPItnTagHandle_fake ** const*,TPItnTagHandle_fake ** const*>((char *)&v59, *(char **)(v42 + 72), *(void *)(v42 + 80), (uint64_t)(*(void *)(v42 + 80) - *(void *)(v42 + 72)) >> 3);
      }
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v59, v60, *a8, a8[1], (a8[1] - *a8) >> 3);
      uint64_t v43 = (unsigned int *)(v42 + 120);
      if (*(char *)(v42 + 143) < 0) {
        uint64_t v43 = *(unsigned int **)v43;
      }
      TFormatter::addCapBlocks((void *)a1, a5, a3, a4, v43, a6, a7, &v59);
    }
  }
  std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v56, v57, *a8, a8[1], (a8[1] - *a8) >> 3);
  if (*((void *)&v53 + 1) >= (unint64_t)v53)
  {
    if (v55)
    {
      v62[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v52, *((unint64_t *)&v53 + 1), v62, 1uLL);
      std::vector<std::wstring>::pointer v44 = v52;
      --*((void *)&v53 + 1);
    }
    else
    {
      std::vector<std::wstring>::pointer v44 = v52;
      if ((void)v53) {
        v52[(void)v53 - 1] = 0;
      }
    }
  }
  else
  {
    std::vector<std::wstring>::pointer v44 = v52;
    v52[*((void *)&v53 + 1)] = 0;
  }
  TFormatter::addCapBlocks((void *)a1, a5, a3, a4, (unsigned int *)v44, a6, a7, &v56);
}

void sub_214003EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x868]) && a19 != a12 && a19) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0xC88]))
  {
    unint64_t v21 = STACK[0x870];
    if (STACK[0x870] != a11)
    {
      if (v21) {
        MEMORY[0x216698730](v21, 0x1000C4052888210);
      }
    }
  }
  uint64_t v22 = *(void **)(v19 - 144);
  if (v22)
  {
    *(void *)(v19 - 136) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v19 - 120);
  if (v23)
  {
    *(void *)(v19 - 112) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t TFormatter::constructGraph(TFormatter *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t **this)
{
  if (a2[1] - *a2 != -112)
  {
    unint64_t v8 = 0;
    do
    {
      TFsa::newState((TAllocator *)this, 0);
      ++v8;
    }
    while (v8 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) + 1);
  }
  TFsa::addExtremity((uint64_t)this, *this[6], 0);
  TFsa::addExtremity((uint64_t)this, this[6][0xDB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4)], 1u);
  long long __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = &this[6][v10];
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      std::vector<TItnRule *>::resize((uint64_t)&__p, 0);
      unint64_t v14 = v10 + 1;
      if (*(unsigned char *)(*a2 + v9 + 33)) {
        TFormatter::addCapBlocks(a1, (uint64_t)this, v12, v13, &dword_2140A8DB4, v10, v10 + 1, (unint64_t **)&__p);
      }
      TFormatter::addGrammarBlocks((uint64_t)a1, a2, v10, v12, (TAllocator *)this);
      TFormatter::addWordBlocks((uint64_t)a1, *(__int32 ***)(*a2 + v9 + 16), v12, v13, (uint64_t)this, v10, v10 + 1, (char **)&__p);
      v9 += 112;
      ++v10;
    }
    while (v14 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  }
  uint64_t v15 = *((void *)a1 + 6);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 19248));
  if (*(unsigned char *)(v15 + TParam::getValidConfig((TParam *)(v15 + 19248), ActiveConfigHandle) + 19400)) {
    TFormatter::logFsa(a1, (const TFsa *)this, v17, v18, v19);
  }
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  return a3;
}

void sub_2140041F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TFormatter::logFsa(TFormatter *this, const TFsa *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = (unsigned int *)v44;
  long long v43 = xmmword_214085190;
  char v45 = 1;
  std::vector<std::wstring>::size_type v6 = (void **)*((void *)a2 + 6);
  uint64_t v7 = (void **)*((void *)a2 + 7);
  if (v6 != v7)
  {
    while (!*v6)
    {
      if (++v6 == v7) {
        goto LABEL_40;
      }
    }
  }
  if (v6 == v7) {
    goto LABEL_40;
  }
  do
  {
    tknPrintf("GRAPH: state=%llu, starting=%d, accepting=%d\n", (uint64_t)a2, a3, a4, a5, **v6, (*v6)[4] != -1, (*v6)[5] != -1);
    for (uint64_t i = (uint64_t *)(*v6)[3]; i; uint64_t i = (uint64_t *)i[5])
    {
      uint64_t v9 = *i;
      TBuffer<wchar_t>::resize((uint64_t)&v42, 0);
      uint64_t v10 = (void *)(v9 + 48);
      if (*(char *)(v9 + 71) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      slashEscape((uint64_t)v10, (uint64_t)&v42);
      uint64_t v11 = i[1];
      uint64_t v12 = *(void *)i[2];
      if (*((void *)&v43 + 1) >= (unint64_t)v43)
      {
        if (v45)
        {
          v46[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v42, *((unint64_t *)&v43 + 1), v46, 1uLL);
          uint64_t v13 = v42;
          --*((void *)&v43 + 1);
        }
        else
        {
          uint64_t v13 = v42;
          if ((void)v43) {
            v42[(void)v43 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v13 = v42;
        v42[*((void *)&v43 + 1)] = 0;
      }
      loggableUnicode(v13, __p);
      if (v41 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      tknPrintf("GRAPH:   trans=%llu, to_state=%llu, text='%s'\n", v14, v15, v16, v17, v11, v12, v18);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      tknPrintf("GRAPH:     tags:\n", v19, v20, v21, v22);
      uint64_t v23 = *(void *)(v9 + 120);
      if (*(void *)(v9 + 128) != v23)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = *(void *)(v23 + 8 * v24);
          uint64_t Tag = TTagManager::getTag(*((void *)this + 17), v25);
          if (Tag)
          {
            if (*(char *)(Tag + 23) < 0) {
              uint64_t Tag = *(void *)Tag;
            }
            loggableUnicode((unsigned int *)Tag, __p);
            if (v41 >= 0) {
              uint64_t v35 = __p;
            }
            else {
              uint64_t v35 = (void **)__p[0];
            }
            tknPrintf("GRAPH:       <%s>\n", v31, v32, v33, v34, v35);
            if (v41 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            tknPrintf("GRAPH:       <%llu>\n", v27, v28, v29, v30, v25);
          }
          ++v24;
          uint64_t v23 = *(void *)(v9 + 120);
        }
        while (v24 < (*(void *)(v9 + 128) - v23) >> 3);
      }
    }
    int v36 = v6 + 1;
    while (v36 != v7)
    {
      if (*v36++)
      {
        std::vector<std::wstring>::size_type v6 = (void **)(v36 - 1);
        goto LABEL_38;
      }
    }
    std::vector<std::wstring>::size_type v6 = v7;
LABEL_38:
    ;
  }
  while (v6 != *((void ***)a2 + 7));
  if (v45)
  {
LABEL_40:
    if (v42 != (unsigned int *)v44 && v42 != 0) {
      MEMORY[0x216698730]();
    }
  }
}

void sub_2140044C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (LOBYTE(STACK[0x458]))
  {
    if (a17 != a12 && a17 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TFormatter::collectTags(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, TAllocator *a6, void **a7, uint64_t **a8)
{
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  v136[0] = 0;
  uint64_t v9 = *(void **)(a2 + 152);
  uint64_t v10 = *(void **)(a2 + 160);
  if (v9 != v10)
  {
    while (!*v9)
    {
      if (++v9 == v10) {
        goto LABEL_219;
      }
    }
  }
  if (v9 == v10)
  {
LABEL_219:
    char v113 = 0;
  }
  else
  {
    BOOL v126 = *(void **)(a2 + 160);
    do
    {
      uint64_t v130 = v9;
      for (uint64_t i = *(void **)(*v9 + 24); i; uint64_t i = (void *)i[5])
      {
        uint64_t v12 = *i;
        uint64_t v13 = (const __int32 **)(*i + 48);
        uint64_t v14 = (const __int32 *)v13;
        if (*(char *)(*i + 71) < 0) {
          uint64_t v14 = *v13;
        }
        size_t v15 = wcslen(v14);
        unint64_t v17 = *(void *)(a3 + 8);
        unint64_t v16 = *(void *)(a3 + 16);
        if (v16 >= v17)
        {
          if (*(unsigned char *)(a3 + 1048))
          {
            LODWORD(v133) = 0;
            TBuffer<wchar_t>::insert(a3, v16, (int *)&v133, 1uLL);
            --*(void *)(a3 + 16);
            uint64_t v18 = *(const __int32 **)a3;
          }
          else
          {
            uint64_t v18 = *(const __int32 **)a3;
            if (v17) {
              v18[v17 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v18 = *(const __int32 **)a3;
          *(_DWORD *)(*(void *)a3 + 4 * v16) = 0;
        }
        uint64_t v19 = (const __int32 *)v13;
        if (*(char *)(v12 + 71) < 0) {
          uint64_t v19 = *v13;
        }
        uint64_t v20 = 0;
        if (wcsncmp(v18, v19, v15))
        {
          uint64_t v21 = 1;
          do
          {
            int v22 = *(_DWORD *)(*(void *)a3 + 4 * v20);
            {
              operator new();
            }
            if (v22 <= 8202)
            {
              if (v22 != 32 && v22 != 160) {
                goto LABEL_59;
              }
            }
            else
            {
              BOOL v23 = v22 == 8203 || v22 == 65279;
              if (!v23 && v22 != 12288) {
                goto LABEL_59;
              }
            }
            unint64_t v25 = *(void *)(a3 + 8);
            unint64_t v24 = *(void *)(a3 + 16);
            if (v24 >= v25)
            {
              if (*(unsigned char *)(a3 + 1048))
              {
                LODWORD(v133) = 0;
                TBuffer<wchar_t>::insert(a3, v24, (int *)&v133, 1uLL);
                --*(void *)(a3 + 16);
                uint64_t v26 = *(const __int32 **)a3;
              }
              else
              {
                uint64_t v26 = *(const __int32 **)a3;
                if (v25) {
                  v26[v25 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v26 = *(const __int32 **)a3;
              *(_DWORD *)(*(void *)a3 + 4 * v24) = 0;
            }
            uint64_t v27 = (const __int32 *)v13;
            if (*(char *)(v12 + 71) < 0) {
              uint64_t v27 = *v13;
            }
            int v28 = wcsncmp(&v26[v21++], v27, v15);
            ++v20;
          }
          while (v28);
        }
        uint64_t v29 = TAllocator::allocate(a6, 40);
        uint64_t v30 = v29;
        *(void *)uint64_t v29 = 0;
        *(void *)(v29 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = i;
        *(void *)(v29 + 16) = 0;
        *(void *)(v29 + 24) = v20 + v15;
        *(unsigned char *)(v29 + 32) = 0;
        uint64_t v31 = v135;
        if ((unint64_t)v135 >= v136[0])
        {
          uint64_t v33 = v135 - v134;
          if ((unint64_t)(v33 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v34 = (uint64_t)(v136[0] - (void)v134) >> 2;
          if (v34 <= v33 + 1) {
            unint64_t v34 = v33 + 1;
          }
          if (v136[0] - (void)v134 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            int v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v136, v35);
          }
          else {
            int v36 = 0;
          }
          int v37 = (uint64_t *)&v36[8 * v33];
          uint64_t *v37 = v30;
          uint64_t v32 = v37 + 1;
          uint64_t v39 = v134;
          int v38 = v135;
          if (v135 != v134)
          {
            do
            {
              uint64_t v40 = *--v38;
              *--int v37 = v40;
            }
            while (v38 != v39);
            int v38 = v134;
          }
          uint64_t v134 = v37;
          uint64_t v135 = v32;
          v136[0] = &v36[8 * v35];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *uint64_t v135 = v29;
          uint64_t v32 = v31 + 1;
        }
        uint64_t v135 = v32;
LABEL_59:
        ;
      }
      char v41 = v130 + 1;
      uint64_t v42 = a7;
      while (v41 != v126)
      {
        if (*v41++)
        {
          uint64_t v9 = v41 - 1;
          goto LABEL_65;
        }
      }
      uint64_t v9 = v126;
LABEL_65:
      ;
    }
    while (v9 != *(void **)(a2 + 160));
    std::vector<std::wstring>::pointer v44 = v134;
    if (v135 != v134)
    {
      char v115 = 0;
      unint64_t v45 = 0;
      uint64_t v125 = a3;
      while (1)
      {
        uint64_t v46 = (uint64_t **)v44[v45];
        uint64_t v47 = v46[1][2];
        uint64_t v129 = v46;
        if (*(void *)(v47 + 40) == -1) {
          goto LABEL_127;
        }
        unint64_t v48 = (unint64_t)v46[3];
        unint64_t v49 = *(void *)(a3 + 16);
        if (v48 >= v49) {
          goto LABEL_86;
        }
        while (1)
        {
          int v50 = *(_DWORD *)(*(void *)a3 + 4 * v48);
          {
            operator new();
          }
          if (v50 > 8202) {
            break;
          }
          if (v50 != 32 && v50 != 160) {
            goto LABEL_84;
          }
LABEL_80:
          ++v48;
          unint64_t v49 = *(void *)(a3 + 16);
          if (v48 >= v49) {
            goto LABEL_85;
          }
        }
        if (v50 == 8203) {
          goto LABEL_80;
        }
        if (v50 == 12288 || v50 == 65279) {
          goto LABEL_80;
        }
LABEL_84:
        unint64_t v49 = *(void *)(a3 + 16);
LABEL_85:
        uint64_t v42 = a7;
LABEL_86:
        if (v48 == v49)
        {
          long long v53 = (uint64_t ***)v42[1];
          unint64_t v52 = (unint64_t)v42[2];
          if ((unint64_t)v53 >= v52)
          {
            uint64_t v55 = ((char *)v53 - (unsigned char *)*v42) >> 3;
            if ((unint64_t)(v55 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v56 = v52 - (void)*v42;
            uint64_t v57 = v56 >> 2;
            if (v56 >> 2 <= (unint64_t)(v55 + 1)) {
              uint64_t v57 = v55 + 1;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58) {
              unint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a7 + 2), v58);
            }
            else {
              unint64_t v59 = 0;
            }
            uint64_t v60 = &v59[8 * v55];
            *(void *)uint64_t v60 = v46;
            uint64_t v54 = v60 + 8;
            std::wstring::size_type v62 = (char *)*v42;
            uint64_t v61 = (char *)v42[1];
            if (v61 != *v42)
            {
              do
              {
                uint64_t v63 = *((void *)v61 - 1);
                v61 -= 8;
                *((void *)v60 - 1) = v63;
                v60 -= 8;
              }
              while (v61 != v62);
              uint64_t v61 = (char *)*v42;
            }
            *uint64_t v42 = v60;
            v42[1] = v54;
            v42[2] = &v59[8 * v58];
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *long long v53 = v46;
            uint64_t v54 = v53 + 1;
          }
          v42[1] = v54;
          if (v46)
          {
            unint64_t v64 = a4;
            unint64_t v65 = a4;
            long long v66 = v46;
            do
            {
              unint64_t v67 = (unint64_t)v66[2];
              BOOL v68 = v67 < v65 || v67 >= a5;
              if (!v68 || v67 < v65 && (unint64_t)v66[3] >= v65)
              {
                if (v67 < v64 && (unint64_t)v66[3] >= v64) {
                  unint64_t v65 = (unint64_t)v66[2];
                }
                uint64_t v69 = *v66[1];
                uint64_t v70 = *(void *)(v69 + 120);
                if (*(void *)(v69 + 128) != v70)
                {
                  unint64_t v71 = 0;
                  do
                  {
                    uint64_t v133 = 0;
                    uint64_t v72 = *(void *)(v70 + 8 * v71);
                    uint64_t v133 = v72;
                    if (!*((unsigned char *)v46 + 32)) {
                      goto LABEL_122;
                    }
                    uint64_t Tag = TTagManager::getTag(*(void *)(a1 + 136), v72);
                    if (!Tag) {
                      goto LABEL_122;
                    }
                    if (*(char *)(Tag + 23) < 0) {
                      uint64_t Tag = *(void *)Tag;
                    }
                    if (wcsncmp((const __int32 *)Tag, (const __int32 *)&dword_2140A8E80, 6uLL)) {
LABEL_122:
                    }
                      std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>(a8, (unint64_t *)&v133, &v133);
                    ++v71;
                    uint64_t v70 = *(void *)(v69 + 120);
                  }
                  while (v71 < (*(void *)(v69 + 128) - v70) >> 3);
                }
                unint64_t v64 = a4;
              }
              long long v66 = (uint64_t **)*v66;
            }
            while (v66);
          }
          char v115 = 1;
        }
LABEL_127:
        long long v74 = *(void **)(v47 + 24);
        if (v74)
        {
          unint64_t v118 = v45;
          do
          {
            unint64_t v124 = (unint64_t)v46[3];
            uint64_t v75 = (const __int32 *)(*v74 + 48);
            uint64_t v131 = *v74;
            uint64_t v127 = v74;
            if (*(char *)(*v74 + 71) < 0)
            {
              size_t v121 = wcslen(*(const __int32 **)v75);
              int v76 = **(_DWORD **)v75;
              if (!v76) {
                goto LABEL_158;
              }
            }
            else
            {
              size_t v121 = wcslen(v75);
              int v76 = *v75;
              if (!*v75) {
                goto LABEL_158;
              }
            }
            {
              operator new();
            }
            if (v76 <= 8202)
            {
              if (v76 != 32 && v76 != 160) {
                goto LABEL_143;
              }
            }
            else if (v76 != 8203 && v76 != 12288 && v76 != 65279)
            {
LABEL_143:
              unint64_t v78 = v124;
              if (v124 < *(void *)(a3 + 16))
              {
                do
                {
                  unint64_t v124 = v78;
                  int v79 = *(_DWORD *)(*(void *)a3 + 4 * v78);
                  {
                    operator new();
                  }
                  if (v79 <= 8202)
                  {
                    if (v79 != 32 && v79 != 160) {
                      goto LABEL_158;
                    }
                  }
                  else
                  {
                    BOOL v80 = v79 == 8203 || v79 == 65279;
                    if (!v80 && v79 != 12288) {
                      goto LABEL_158;
                    }
                  }
                  unint64_t v78 = v124 + 1;
                }
                while (v124 + 1 < *(void *)(a3 + 16));
                ++v124;
              }
            }
LABEL_158:
            unint64_t v82 = *(void *)(a3 + 8);
            unint64_t v81 = *(void *)(a3 + 16);
            if (v81 >= v82)
            {
              if (*(unsigned char *)(a3 + 1048))
              {
                LODWORD(v133) = 0;
                TBuffer<wchar_t>::insert(a3, v81, (int *)&v133, 1uLL);
                --*(void *)(a3 + 16);
                unint64_t v83 = *(const __int32 **)a3;
              }
              else
              {
                unint64_t v83 = *(const __int32 **)a3;
                if (v82) {
                  v83[v82 - 1] = 0;
                }
              }
            }
            else
            {
              unint64_t v83 = *(const __int32 **)a3;
              *(_DWORD *)(*(void *)a3 + 4 * v81) = 0;
            }
            if (*(char *)(v131 + 71) < 0) {
              uint64_t v75 = *(const __int32 **)v75;
            }
            if (!wcsncmp(&v83[v124], v75, v121))
            {
              BOOL v84 = *((unsigned char *)v46 + 32) != 0;
              uint64_t v85 = *(void *)(v131 + 120);
              if (*(void *)(v131 + 128) == v85) {
                goto LABEL_194;
              }
              BOOL v122 = *((unsigned char *)v46 + 32) != 0;
              unint64_t v86 = 0;
              char v87 = 0;
              do
              {
                uint64_t v88 = TTagManager::getTag(*(void *)(a1 + 136), *(void *)(v85 + 8 * v86));
                uint64_t v89 = (__int32 *)v88;
                if (v88)
                {
                  if (*(char *)(v88 + 23) < 0) {
                    uint64_t v89 = *(__int32 **)v88;
                  }
                  if (!wcsncmp(v89, dword_2140A8E28, 5uLL))
                  {
                    uint64_t v90 = wcschr(v89, 61);
                    uint64_t v91 = v129;
                    if (v129)
                    {
                      uint64_t v92 = v90 - v89;
                      unint64_t v93 = v90 + 1;
                      char v94 = v87;
                      do
                      {
                        uint64_t v95 = *v91[1];
                        uint64_t v96 = *(void *)(v95 + 120);
                        if (*(void *)(v95 + 128) == v96)
                        {
LABEL_187:
                          if (v94)
                          {
                            char v87 = 1;
                            break;
                          }
                        }
                        else
                        {
                          unint64_t v97 = 0;
                          while (1)
                          {
                            uint64_t v98 = TTagManager::getTag(*(void *)(a1 + 136), *(void *)(v96 + 8 * v97));
                            uint64_t v99 = v98;
                            if (v98)
                            {
                              if (*(char *)(v98 + 23) < 0) {
                                uint64_t v98 = *(void *)v98;
                              }
                              if (!wcsncmp((const __int32 *)v98, v89, v92 + 1))
                              {
                                if (*(char *)(v99 + 23) < 0) {
                                  uint64_t v99 = *(void *)v99;
                                }
                                if (wcscmp((const __int32 *)(v99 + 4 * v92 + 4), v93)) {
                                  break;
                                }
                              }
                            }
                            ++v97;
                            uint64_t v96 = *(void *)(v95 + 120);
                            if (v97 >= (*(void *)(v95 + 128) - v96) >> 3) {
                              goto LABEL_187;
                            }
                          }
                          BOOL v122 = 1;
                          char v87 = 1;
                          if ((v89[5] == 83) | v94 & 1) {
                            break;
                          }
                        }
                        char v94 = 0;
                        char v87 = 0;
                        uint64_t v91 = (uint64_t **)*v91;
                      }
                      while (v91);
                    }
                  }
                }
                ++v86;
                uint64_t v46 = v129;
                uint64_t v85 = *(void *)(v131 + 120);
                a3 = v125;
                long long v74 = v127;
              }
              while (v86 < (*(void *)(v131 + 128) - v85) >> 3);
              unint64_t v45 = v118;
              BOOL v84 = v122;
              if ((v87 & 1) == 0)
              {
LABEL_194:
                uint64_t v100 = TAllocator::allocate(a6, 40);
                uint64_t v101 = v100;
                uint64_t v102 = v46[3];
                *(void *)uint64_t v100 = v46;
                *(void *)(v100 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v74;
                *(void *)(v100 + 16) = v102;
                *(void *)(v100 + 24) = v124 + v121;
                *(unsigned char *)(v100 + 32) = v84;
                uint64_t v103 = v135;
                if ((unint64_t)v135 >= v136[0])
                {
                  uint64_t v105 = v135 - v134;
                  if ((unint64_t)(v105 + 1) >> 61) {
                    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v106 = (uint64_t)(v136[0] - (void)v134) >> 2;
                  if (v106 <= v105 + 1) {
                    unint64_t v106 = v105 + 1;
                  }
                  if (v136[0] - (void)v134 >= 0x7FFFFFFFFFFFFFF8uLL) {
                    unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v107 = v106;
                  }
                  if (v107) {
                    uint64_t v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v136, v107);
                  }
                  else {
                    uint64_t v108 = 0;
                  }
                  int v109 = (uint64_t *)&v108[8 * v105];
                  *int v109 = v101;
                  uint64_t v104 = v109 + 1;
                  uint64_t v111 = v134;
                  int v110 = v135;
                  if (v135 != v134)
                  {
                    do
                    {
                      uint64_t v112 = *--v110;
                      *--int v109 = v112;
                    }
                    while (v110 != v111);
                    int v110 = v134;
                  }
                  uint64_t v134 = v109;
                  uint64_t v135 = v104;
                  v136[0] = &v108[8 * v107];
                  if (v110) {
                    operator delete(v110);
                  }
                }
                else
                {
                  *uint64_t v135 = v100;
                  uint64_t v104 = v103 + 1;
                }
                uint64_t v135 = v104;
              }
            }
            long long v74 = (void *)v74[5];
          }
          while (v74);
        }
        ++v45;
        std::vector<std::wstring>::pointer v44 = v134;
        uint64_t v42 = a7;
        if (v45 >= v135 - v134)
        {
          if (v134) {
            goto LABEL_217;
          }
          goto LABEL_218;
        }
      }
    }
    char v115 = 0;
    if (v134)
    {
LABEL_217:
      uint64_t v135 = v44;
      operator delete(v44);
    }
LABEL_218:
    char v113 = v115;
  }
  return v113 & 1;
}

void sub_214005070(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  uint64_t v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(void *)(v2 - 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void TFormatter::replace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v7 = v6;
  __s = v9;
  uint64_t v137 = v8;
  unint64_t v133 = v10;
  unint64_t v134 = v11;
  uint64_t v135 = v12;
  uint64_t v13 = (TFormatter *)v5;
  uint64_t v182 = *MEMORY[0x263EF8340];
  int v171 = v173;
  long long v172 = xmmword_214085190;
  char v174 = 1;
  if ((v14 & 8) == 0) {
    goto LABEL_2;
  }
  uint64_t v15 = *(void *)(v5 + 48);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 5768));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v15 + 5768), ActiveConfigHandle);
  if (!v137 || !*(unsigned char *)(v15 + ValidConfig + 5920) || !*__s || v137 + v134 <= v134) {
    goto LABEL_2;
  }
  uint64_t v18 = 0;
  while (1)
  {
    Result = (void *)TResultManager::getResult(*((void *)v13 + 16), *(void *)(v135 + 8 * v134 + 8 * v18));
    if (Result[3] || Result[5] != Result[4]) {
      break;
    }
    if (v137 == ++v18) {
      goto LABEL_2;
    }
  }
  if (TLocaleInfo::multiByteToUnicode(*((void *)v13 + 4) + 240, (unsigned __int8 *)__s, (uint64_t)&v171)) {
LABEL_2:
  }
    TResultManager::replace(*((uint64_t **)v13 + 16), v135, v133, v134, v137, __s);
  uint64_t v132 = v7;
  int v167 = v169;
  long long v168 = xmmword_214085190;
  char v170 = 1;
  unint64_t v178 = v180;
  long long v179 = xmmword_214085190;
  char v181 = 1;
  unint64_t v165 = 0;
  long long __p = 0;
  unsigned int v166 = 0;
  v138[0] = 0;
  std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&__p, v138);
  unint64_t v20 = v134;
  do
  {
    uint64_t v21 = TResultManager::getResult(*((void *)v13 + 16), *(void *)(v135 + 8 * v20));
    uint64_t v22 = *(void *)(v21 + 104);
    if (*(void *)(v21 + 112) != v22)
    {
      unint64_t v23 = 0;
      unint64_t v24 = v165;
      do
      {
        uint64_t v25 = *(void *)(v22 + 8 * v23) + *((void *)v24 - 1);
        if (v24 >= v166)
        {
          uint64_t v27 = (char *)__p;
          uint64_t v28 = (v24 - (unsigned char *)__p) >> 3;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v166 - (unsigned char *)__p;
          if ((v166 - (unsigned char *)__p) >> 2 > v29) {
            unint64_t v29 = v30 >> 2;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v166, v31);
            unint64_t v24 = v165;
            uint64_t v27 = (char *)__p;
          }
          else
          {
            uint64_t v32 = 0;
          }
          uint64_t v33 = &v32[8 * v28];
          *(void *)uint64_t v33 = v25;
          uint64_t v26 = v33 + 8;
          while (v24 != v27)
          {
            uint64_t v34 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v33 - 1) = v34;
            v33 -= 8;
          }
          long long __p = v33;
          unint64_t v165 = v26;
          unsigned int v166 = &v32[8 * v31];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)unint64_t v24 = v25;
          uint64_t v26 = v24 + 8;
        }
        unint64_t v165 = v26;
        v23 += 2;
        uint64_t v22 = *(void *)(v21 + 104);
        unint64_t v24 = v26;
      }
      while (v23 < (*(void *)(v21 + 112) - v22) >> 3);
    }
    uint64_t v35 = 0;
    int v36 = *(char **)(v21 + 16);
    while (v36[v35++])
      ;
    TBuffer<char>::insert((uint64_t)&v178, *((unint64_t *)&v179 + 1), v36, v35 - 1);
    TLocaleInfo::multiByteToUnicode(*((void *)v13 + 4) + 240, *(unsigned __int8 **)(v21 + 16), (uint64_t)&v167);
    ++v20;
  }
  while (v20 != v137 + v134);
  int v38 = __s;
  unint64_t v39 = 0;
  if (*((void *)&v179 + 1))
  {
    unint64_t v40 = 0;
    unint64_t v41 = 0;
    unint64_t v42 = (v165 - (unsigned char *)__p) >> 3;
    uint64_t v43 = v132;
    do
    {
      if (v40 < v42)
      {
        for (unint64_t i = *((void *)__p + v40); i <= v39; unint64_t i = *((void *)__p + ++v40))
        {
          unint64_t v41 = i;
          if (v42 - 1 == v40)
          {
            unint64_t v40 = (v165 - (unsigned char *)__p) >> 3;
            break;
          }
        }
      }
      if (__s[v39] != v178[v39]) {
        goto LABEL_53;
      }
      ++v39;
    }
    while (v39 != *((void *)&v179 + 1));
    size_t v45 = strlen(__s);
    goto LABEL_54;
  }
  unint64_t v41 = 0;
  unint64_t v40 = 0;
  uint64_t v43 = v132;
LABEL_53:
  size_t v46 = strlen(__s);
  size_t v45 = v46;
  if (v39 == *((void *)&v179 + 1))
  {
LABEL_54:
    if (!__s[*((void *)&v179 + 1)])
    {
      if (TBoolParam::get((TBoolParam *)(*((void *)v13 + 6) + 19248))) {
        tknPrintString("No text differences; can't generate hints\n");
      }
      **(void **)uint64_t v43 = -1;
      *(void *)(*(void *)v43 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = TResultManager::merge(*((void *)v13 + 16), (void *)(v135 + 8 * v134), v137);
      *(void *)(*(void *)v43 + 16) = -1;
      int v85 = 1;
      goto LABEL_229;
    }
    if (v40 < (v165 - (unsigned char *)__p) >> 3)
    {
      unint64_t v47 = *((void *)__p + v40);
      if (v47 <= *((void *)&v179 + 1))
      {
        unint64_t v48 = (unint64_t *)((char *)__p + 8 * v40 + 8);
        uint64_t v49 = ~v40 + ((v165 - (unsigned char *)__p) >> 3);
        do
        {
          unint64_t v41 = v47;
          if (!v49) {
            break;
          }
          unint64_t v50 = *v48++;
          unint64_t v47 = v50;
          --v49;
        }
        while (v50 <= *((void *)&v179 + 1));
      }
    }
    goto LABEL_78;
  }
  if (*((void *)&v179 + 1) && v46)
  {
    unint64_t v51 = 0;
    unint64_t v52 = (v165 - (unsigned char *)__p) >> 3;
    unint64_t v53 = *((void *)&v179 + 1);
    unint64_t v54 = *((void *)&v179 + 1);
    size_t v55 = v46;
    do
    {
      size_t v56 = v55;
      unint64_t v57 = v54;
      --v55;
      if (--v54 <= v41 || v55 <= v41) {
        break;
      }
      if (v51 < v52)
      {
        unint64_t v59 = *((void *)__p + v52 + ~v51);
        if (v59 > v54)
        {
          uint64_t v60 = (unint64_t *)((char *)__p + ((v165 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFF8) + -8 * v51 - 16);
          while (1)
          {
            unint64_t v53 = v59;
            if (v52 - 1 == v51) {
              break;
            }
            unint64_t v61 = *v60--;
            unint64_t v59 = v61;
            ++v51;
            if (v61 <= v54) {
              goto LABEL_76;
            }
          }
          unint64_t v51 = (v165 - (unsigned char *)__p) >> 3;
        }
      }
LABEL_76:
      ;
    }
    while (__s[v55] == v178[v54]);
    unint64_t v62 = v56 - v57 + v53;
    goto LABEL_79;
  }
LABEL_78:
  unint64_t v53 = *((void *)&v179 + 1);
  unint64_t v62 = v45;
  do
  {
LABEL_79:
    unint64_t v63 = v41;
    if (!v41) {
      break;
    }
    --v41;
  }
  while (__s[v63 - 1] == 32);
  if (v62 < v45)
  {
    while (__s[v62] == 32)
    {
      if (v45 == ++v62)
      {
        unint64_t v62 = v45;
        break;
      }
    }
  }
  if (v53 < *((void *)&v179 + 1))
  {
    while (v178[v53] == 32)
    {
      if (*((void *)&v179 + 1) == ++v53)
      {
        unint64_t v53 = *((void *)&v179 + 1);
        break;
      }
    }
  }
  if (TBoolParam::get((TBoolParam *)(*((void *)v13 + 6) + 19248)))
  {
    uint64_t v64 = TBuffer<char>::c_str((uint64_t)&v178);
    tknPrintf("REPLACEMENT OLD TEXT (%llu,%llu): <%s>\n", v65, v66, v67, v68, v63, v53, v64);
    tknPrintf("REPLACEMENT NEW TEXT (%llu,%llu): <%s>\n", v69, v70, v71, v72, v63, v62, __s);
  }
  unint64_t v162 = 0;
  long long v161 = 0;
  uint64_t v163 = 0;
  TFsa::TFsa((TFsa *)v158);
  TFormatter::addWords((uint64_t)v13, (uint64_t *)(v135 + 8 * v134), v135 + 8 * v134 + 8 * v137, 0, &v161);
  TFormatter::constructGraph(v13, (uint64_t *)&v161, 0, -1227133513 * ((v162 - (unsigned char *)v161) >> 4), v158);
  v157[1] = 0;
  v157[0] = 0;
  int v156 = (uint64_t *)v157;
  v155[1] = 0;
  v155[0] = 0;
  uint64_t v154 = (uint64_t *)v155;
  TAllocator::TAllocator((TAllocator *)v153, 2048);
  uint64_t v151 = 0;
  __int32 v150 = 0;
  uint64_t v152 = 0;
  int v148 = 0;
  int v147 = 0;
  uint64_t v149 = 0;
  if (TFormatter::collectTags((uint64_t)v13, (uint64_t)v158, (uint64_t)&v171, v63, v62, (TAllocator *)v153, &v147, &v154)&& TFormatter::collectTags((uint64_t)v13, (uint64_t)v158, (uint64_t)&v167, v63, v53, (TAllocator *)v153, &v150, &v156))
  {
    **(void **)uint64_t v43 = -1;
    *(void *)(*(void *)v43 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = TResultManager::merge(*((void *)v13 + 16), (void *)(v135 + 8 * v134), v137);
    *(void *)(*(void *)v43 + 16) = -1;
    uint64_t v145 = 0;
    uint64_t v144 = 0;
    uint64_t v146 = 0;
    unint64_t v73 = *(uint64_t ***)v147;
    if (*(void *)v147)
    {
      long long v74 = 0;
      do
      {
        uint64_t v75 = *v73[1];
        if (v74 >= v146)
        {
          uint64_t v76 = (v74 - (unsigned char *)v144) >> 3;
          if ((unint64_t)(v76 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v77 = (v146 - (unsigned char *)v144) >> 2;
          if (v77 <= v76 + 1) {
            unint64_t v77 = v76 + 1;
          }
          if ((unint64_t)(v146 - (unsigned char *)v144) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v77;
          }
          if (v78) {
            int v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v146, v78);
          }
          else {
            int v79 = 0;
          }
          BOOL v80 = &v79[8 * v76];
          *(void *)BOOL v80 = v75;
          long long v74 = v80 + 8;
          unint64_t v81 = v145;
          unint64_t v82 = (char *)v144;
          if (v145 == v144)
          {
            int v38 = __s;
          }
          else
          {
            int v38 = __s;
            do
            {
              uint64_t v83 = *((void *)v81 - 1);
              v81 -= 8;
              *((void *)v80 - 1) = v83;
              v80 -= 8;
            }
            while (v81 != v82);
            unint64_t v81 = (char *)v144;
          }
          uint64_t v144 = v80;
          uint64_t v145 = v74;
          uint64_t v146 = &v79[8 * v78];
          if (v81) {
            operator delete(v81);
          }
        }
        else
        {
          *(void *)long long v74 = v75;
          v74 += 8;
          int v38 = __s;
        }
        uint64_t v145 = v74;
        unint64_t v73 = (uint64_t **)*v73;
      }
      while (v73);
      BOOL v84 = (char *)v144;
    }
    else
    {
      BOOL v84 = 0;
      long long v74 = 0;
    }
    uint64_t v142 = 0;
    uint64_t v141 = 0;
    uint64_t v143 = 0;
    long long v175 = v177;
    long long v176 = xmmword_214085190;
    v177[256] = 1;
    if (v74 == v84)
    {
      size_t v105 = 0;
      goto LABEL_206;
    }
    unint64_t v86 = 0;
    size_t v87 = 0;
    size_t v88 = 0;
    uint64_t v131 = 0;
    unint64_t v89 = (v74 - v84) >> 3;
    while (1)
    {
      v138[0] = 0;
      uint64_t v90 = *(void *)&v84[8 * v89 + 8 * ~v86];
      TBuffer<char>::resize((uint64_t)&v175, 0);
      uint64_t v91 = (unsigned int *)(v90 + 48);
      if (*(char *)(v90 + 71) < 0) {
        uint64_t v91 = *(unsigned int **)v91;
      }
      TLocaleInfo::unicodeToMultiByte(*((void *)v13 + 4) + 240, v91, (uint64_t)&v175);
      if (!*((void *)&v176 + 1))
      {
        uint64_t v97 = *(void *)(v90 + 8);
        if (v97 == -1) {
          uint64_t v97 = v131;
        }
        if (*(void *)(v90 + 16) != -1)
        {
          uint64_t v98 = v97;
          size_t v99 = v87 - v88;
          uint64_t v100 = v142;
          uint64_t v101 = v143;
          if (v142 >= v143)
          {
            unint64_t v106 = (char *)v141;
            uint64_t v107 = (v142 - (unsigned char *)v141) >> 3;
            unint64_t v108 = v107 + 1;
            if ((unint64_t)(v107 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v109 = v143 - (unsigned char *)v141;
            if ((v143 - (unsigned char *)v141) >> 2 > v108) {
              unint64_t v108 = v109 >> 2;
            }
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v110 = v108;
            }
            if (v110)
            {
              uint64_t v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v143, v110);
              uint64_t v100 = v142;
              unint64_t v106 = (char *)v141;
            }
            else
            {
              uint64_t v111 = 0;
            }
            uint64_t v112 = &v111[8 * v107];
            *(void *)uint64_t v112 = v99;
            uint64_t v102 = v112 + 8;
            while (v100 != v106)
            {
              uint64_t v113 = *((void *)v100 - 1);
              v100 -= 8;
              *((void *)v112 - 1) = v113;
              v112 -= 8;
            }
            uint64_t v101 = &v111[8 * v110];
            uint64_t v141 = v112;
            uint64_t v142 = v102;
            uint64_t v143 = v101;
            if (v106)
            {
              operator delete(v106);
              uint64_t v101 = v143;
            }
          }
          else
          {
            *(void *)uint64_t v142 = v99;
            uint64_t v102 = v100 + 8;
          }
          uint64_t v142 = v102;
          uint64_t v114 = *(void *)(v90 + 16) - v98;
          if (v102 >= v101)
          {
            uint64_t v116 = (char *)v141;
            uint64_t v117 = (v102 - (unsigned char *)v141) >> 3;
            unint64_t v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v119 = v101 - (unsigned char *)v141;
            if (v119 >> 2 > v118) {
              unint64_t v118 = v119 >> 2;
            }
            if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v120 = v118;
            }
            if (v120)
            {
              size_t v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v143, v120);
              uint64_t v102 = v142;
              uint64_t v116 = (char *)v141;
            }
            else
            {
              size_t v121 = 0;
            }
            BOOL v122 = &v121[8 * v117];
            *(void *)BOOL v122 = v114;
            char v115 = v122 + 8;
            if (v102 == v116)
            {
              int v38 = __s;
            }
            else
            {
              int v38 = __s;
              do
              {
                uint64_t v123 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v122 - 1) = v123;
                v122 -= 8;
              }
              while (v102 != v116);
            }
            uint64_t v141 = v122;
            uint64_t v142 = v115;
            uint64_t v143 = &v121[8 * v120];
            if (v116) {
              operator delete(v116);
            }
          }
          else
          {
            *(void *)uint64_t v102 = v114;
            char v115 = v102 + 8;
            int v38 = __s;
          }
          uint64_t v142 = v115;
          uint64_t v97 = *(void *)(v90 + 16);
          size_t v88 = v87;
        }
        uint64_t v131 = v97;
        size_t v105 = v88;
        goto LABEL_200;
      }
      unint64_t v130 = v86;
      size_t v92 = v88;
      LODWORD(v139) = 0;
      int v93 = TLocaleInfo::multiByteToUnicode(*((void *)v13 + 4) + 240, (unsigned __int8 *)&v38[v87], &v139);
      while (*v175 != v38[v87])
      {
        int v94 = v139;
        {
          operator new();
        }
        if (v94 <= 8202)
        {
          if (v94 != 32 && v94 != 160) {
            break;
          }
        }
        else
        {
          BOOL v95 = v94 == 8203 || v94 == 65279;
          if (!v95 && v94 != 12288) {
            break;
          }
        }
        if (v87 < v45) {
          v138[0] += v93;
        }
        v87 += v93;
        int v38 = __s;
        int v93 = TLocaleInfo::multiByteToUnicode(*((void *)v13 + 4) + 240, (unsigned __int8 *)&__s[v87], &v139);
      }
      int v38 = __s;
      TLocaleInfo::multiByteToUnicode(*((void *)v13 + 4) + 240, (unsigned __int8 *)&__s[v92], &v139);
      if (v138[0])
      {
        int v96 = v139;
        {
          operator new();
        }
        if (v96 <= 8202)
        {
          if (v96 != 32 && v96 != 160) {
            goto LABEL_157;
          }
        }
        else if (v96 != 8203 && v96 != 65279 && v96 != 12288)
        {
          goto LABEL_157;
        }
        std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v141, v138);
        size_t v140 = 0;
        std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v141, &v140);
        size_t v92 = v87;
      }
LABEL_157:
      if (v87 >= v45)
      {
        size_t v105 = v92;
LABEL_206:
        if (v45 > v105)
        {
          v138[0] = v45 - v105;
          std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v141, v138);
          v138[0] = 0;
          std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v141, v138);
        }
        TResultManager::setResultText(*((void *)v13 + 16), *(void *)(*(void *)v132 + 8), v38);
      }
      if (*(void *)(v90 + 8) == -1) {
        uint64_t v103 = v131;
      }
      else {
        uint64_t v103 = *(void *)(v90 + 8);
      }
      v87 += *((void *)&v176 + 1);
      uint64_t v104 = *(void *)(v90 + 16);
      if (v104 == -1)
      {
        uint64_t v104 = v103;
        size_t v105 = v92;
      }
      else
      {
        size_t v105 = v87;
        if (v87 <= v45)
        {
          size_t v140 = v87 - v92;
          std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v141, &v140);
          size_t v140 = *(void *)(v90 + 16) - v103;
          std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v141, &v140);
          uint64_t v104 = *(void *)(v90 + 16);
          size_t v105 = v87;
        }
      }
      uint64_t v131 = v104;
      size_t v88 = v105;
      unint64_t v86 = v130;
LABEL_200:
      ++v86;
      BOOL v84 = (char *)v144;
      unint64_t v89 = (v145 - (unsigned char *)v144) >> 3;
      if (v86 >= v89) {
        goto LABEL_206;
      }
    }
  }
  uint64_t v124 = v160;
  uint64_t v125 = v159;
  if (v160 != v159)
  {
    unint64_t v126 = 0;
    do
    {
      uint64_t v127 = *(uint64_t **)(v125 + 8 * v126);
      if (v127)
      {
        uint64_t v128 = *v127;
        if (*v127)
        {
          uint64_t v129 = *(void **)(v128 + 120);
          if (v129)
          {
            *(void *)(v128 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v129;
            operator delete(v129);
          }
          if (*(char *)(v128 + 119) < 0) {
            operator delete(*(void **)(v128 + 96));
          }
          if (*(char *)(v128 + 95) < 0) {
            operator delete(*(void **)(v128 + 72));
          }
          if (*(char *)(v128 + 71) < 0) {
            operator delete(*(void **)(v128 + 48));
          }
          MEMORY[0x216698730](v128, 0x10F2C405D5B575ELL);
          uint64_t v124 = v160;
          uint64_t v125 = v159;
        }
      }
      ++v126;
    }
    while (v126 < (v124 - v125) >> 3);
  }
  int v85 = 0;
  if (v147)
  {
    int v148 = v147;
    operator delete(v147);
  }
  if (v150)
  {
    uint64_t v151 = v150;
    operator delete(v150);
  }
  TAllocator::clear((TAllocator *)v153);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v154, v155[0]);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&v156, v157[0]);
  TFsa::~TFsa((TFsa *)v158);
  if (v161)
  {
    unint64_t v162 = v161;
    operator delete(v161);
  }
LABEL_229:
  if (__p)
  {
    unint64_t v165 = (char *)__p;
    operator delete(__p);
  }
  if (v181 && v178 != v180 && v178) {
    MEMORY[0x216698730]();
  }
  if (v170 && v167 != v169 && v167) {
    MEMORY[0x216698730]();
  }
  if (!v85) {
    goto LABEL_2;
  }
  if (v174 && v171 != v173 && v171) {
    MEMORY[0x216698730]();
  }
}

void sub_214007A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  MEMORY[0x216698730](v25, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x2918]))
  {
    if (STACK[0x2800] != a17 && STACK[0x2800] != 0) {
      MEMORY[0x216698730]();
    }
  }
  uint64_t v28 = (void *)STACK[0x1DF8];
  if (STACK[0x1DF8])
  {
    STACK[0x1E00] = (unint64_t)v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)STACK[0x1E10];
  if (STACK[0x1E10])
  {
    STACK[0x1E18] = (unint64_t)v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)STACK[0x1E28];
  if (STACK[0x1E28])
  {
    STACK[0x1E30] = (unint64_t)v30;
    operator delete(v30);
  }
  unint64_t v31 = (void *)STACK[0x1E40];
  if (STACK[0x1E40])
  {
    STACK[0x1E48] = (unint64_t)v31;
    operator delete(v31);
  }
  TAllocator::clear((TAllocator *)&STACK[0x1E58]);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x1E80], (void *)STACK[0x1E88]);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)&STACK[0x1E98], (void *)STACK[0x1EA0]);
  TFsa::~TFsa((TFsa *)&STACK[0x1EB0]);
  uint64_t v32 = (void *)STACK[0x1F90];
  if (STACK[0x1F90])
  {
    STACK[0x1F98] = (unint64_t)v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)STACK[0x1FA8];
  if (STACK[0x1FA8])
  {
    STACK[0x1FB0] = (unint64_t)v33;
    operator delete(v33);
  }
  if (LOBYTE(STACK[0x2A38]))
  {
    unint64_t v34 = STACK[0x2920];
    if (STACK[0x2920] != a21)
    {
      if (v34) {
        MEMORY[0x216698730](v34, 0x1000C4077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x23D8]))
  {
    unint64_t v35 = STACK[0x1FC0];
    if (STACK[0x1FC0] != a22)
    {
      if (v35) {
        MEMORY[0x216698730](v35, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x27F8]))
  {
    if (STACK[0x23E0] != a25 && STACK[0x23E0] != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v4, v12);
      uint64_t v8 = *(void **)a1;
      uint64_t v6 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    char v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)char v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
}

void std::vector<THint>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<THint>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 104 * a2;
    while (v3 != v7)
    {
      v3 -= 104;
      std::allocator<THint>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<THint>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 104 * ((104 * a2 - 104) / 0x68) + 104;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x276276276276276) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x13B13B13B13B13BLL) {
      unint64_t v11 = 0x276276276276276;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<THint>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[104 * v8];
    uint64_t v18 = &v12[104 * v11];
    size_t v14 = 104 * ((104 * a2 - 104) / 0x68) + 104;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    std::vector<THint>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<THint>::~__split_buffer(&v15);
  }
}

void sub_21400821C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<THint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::__advance[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v7 = *result;
    do
    {
      uint64_t v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          uint64_t v4 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          uint64_t v7 = v4;
        }
        while (v5);
      }
      uint64_t v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  *uint64_t result = v4;
  return result;
}

void std::vector<std::wstring>::__append(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  BOOL v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      size_t v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      uint64_t v7 = (std::wstring *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
    if (v11) {
      unint64_t v12 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    size_t v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::wstring>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
  }
}

void sub_214008410(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

char *std::vector<TPItnTagHandle_fake **>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(uint64_t a1, char *a2, void *a3, void *a4, uint64_t a5)
{
  BOOL v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      long long __p = a3;
      std::__advance[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>((void **)&__p, a5);
      unint64_t v20 = *(char **)(a1 + 8);
      uint64_t v21 = v20 - v5;
      if (a5 > (v20 - v5) >> 3)
      {
        long long __p = v7;
        std::__advance[abi:ne180100]<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>((void **)&__p, v21 >> 3);
        std::vector<TPItnTagHandle_fake **>::__construct_at_end<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(a1, __p, a4);
        if (v21 < 1) {
          return v5;
        }
        unint64_t v20 = *(char **)(a1 + 8);
      }
      uint64_t v22 = &v5[8 * a5];
      unint64_t v23 = &v20[-8 * a5];
      unint64_t v24 = v20;
      if ((unint64_t)v23 < v12)
      {
        unint64_t v24 = v20;
        do
        {
          uint64_t v25 = *(void *)v23;
          v23 += 8;
          *(void *)unint64_t v24 = v25;
          v24 += 8;
        }
        while ((unint64_t)v23 < v12);
      }
      *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v24;
      if (v20 != v22) {
        memmove(&v20[-8 * ((v20 - v22) >> 3)], v5, v20 - v22);
      }
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,TPItnTagHandle_fake ***,0>(v7, __p, v5);
    }
    else
    {
      size_t v13 = *(unsigned char **)a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
      if (v14 >> 61) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = (a2 - v13) >> 3;
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v36 = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v26 = &v18[8 * v15];
      long long __p = v18;
      uint64_t v33 = v26;
      unint64_t v35 = &v18[8 * v17];
      uint64_t v27 = &v26[8 * a5];
      do
      {
        *(void *)uint64_t v26 = v7[4];
        v26 += 8;
        uint64_t v28 = (void *)v7[1];
        if (v28)
        {
          do
          {
            unint64_t v29 = v28;
            uint64_t v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            unint64_t v29 = (void *)v7[2];
            BOOL v30 = *v29 == (void)v7;
            uint64_t v7 = v29;
          }
          while (!v30);
        }
        uint64_t v7 = v29;
      }
      while (v26 != v27);
      unint64_t v34 = v27;
      BOOL v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
      if (v34 != v33) {
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_21400863C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TPItnTagHandle_fake **>::__construct_at_end<std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>>(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *uint64_t v3 = a2[4];
      uint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          BOOL v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          BOOL v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3;
  return result;
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,std::__tree_const_iterator<TPItnTagHandle_fake **,std::__tree_node<TPItnTagHandle_fake **,void *> *,long>,TPItnTagHandle_fake ***,0>(void *result, void *a2, void *a3)
{
  if (result != a2)
  {
    do
    {
      *a3 = result[4];
      uint64_t v3 = (void *)result[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)result[2];
          BOOL v5 = *v4 == (void)result;
          uint64_t result = v4;
        }
        while (!v5);
      }
      ++a3;
      uint64_t result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

void MrecInitModule_ddump_mrecutil(void)
{
  if (!gParDiagnosticShowFloatsAsHex)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticShowFloatsAsHex", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDiagnosticShowFloatsAsHex = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDiagnosticShowFloatsAsHex);
  }
}

uint64_t SDState_GetHandle(unint64_t a1, const char *a2, unint64_t a3)
{
  uint64_t v6 = SdapiInsurance::SdapiInsurance(v25, "SDState_GetHandle", 1, 1, 298);
  if (v25[97])
  {
    if (!a2) {
      throwBadStringPointer(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    v25[151] = 0;
    if (gbShowCalls) {
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, '%.500s', <SDh %lld>)\n", v7, v8, v9, v10, "SDState_GetHandle", a1, a2, a3);
    }
    unint64_t v14 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v8, v9, v10, v11, v12, v13);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v8, v9, v10, v11, v12, v13);
    }
    uint64_t v21 = *(StateMgr **)(ModelMgr::getVocOrThrow(v14, (unsigned __int16)a1, v8, v9, v10, v11, v12, v13) + 56);
    if (a3 == -1)
    {
      a3 = 0;
    }
    else
    {
      if (HIDWORD(a3)) {
        throwBadSdapiArgument("SDhState", a3, v15, v16, v17, v18, v19, v20);
      }
      if ((a3 + 1) <= 1) {
        throwBadSdapiArgument("SDhState", a3, v15, v16, v17, v18, v19, v20);
      }
    }
    unsigned int Handle = StateMgr::getHandle(v21, a2, a3, v16, v17, v18, v19, v20);
    if (Handle) {
      uint64_t v23 = Handle;
    }
    else {
      uint64_t v23 = -1;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v25);
  return v23;
}

void sub_214008968()
{
}

uint64_t SDState_GetAllowedWordCollations(unint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  SdapiInsurance::SdapiInsurance(v29, "SDState_GetAllowedWordCollations", 1, 1, 311);
  if (v29[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v15 = a3;
      }
      else {
        uint64_t v15 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDState_GetAllowedWordCollations", a1, a2, v15, a4);
    }
    if (!a3 && a4) {
      throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v9, v10, v11, v12, v13, v14);
    }
    uint64_t v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    uint64_t v23 = *(StateMgr **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 56);
    if (HIDWORD(a2)) {
      throwBadSdapiArgument("SDhState", a2, v17, v18, v19, v20, v21, v22);
    }
    if ((a2 + 1) <= 1) {
      throwBadSdapiArgument("SDhState", a2, v17, v18, v19, v20, v21, v22);
    }
    uint64_t Colls = StateMgr::getColls(v23, a2, 1, v18, v19, v20, v21, v22);
    uint64_t v25 = *(unsigned int *)(Colls + 8);
    if (a4)
    {
      uint64_t v26 = 0;
      do
      {
        if (v25 == v26) {
          break;
        }
        uint64_t v27 = *(unsigned __int16 *)(*(void *)Colls + 2 * v26);
        if ((unsigned __int16)(v27 + 1) >= 2u)
        {
          if (v27 == 65534) {
            uint64_t v27 = -2;
          }
        }
        else
        {
          uint64_t v27 = -1;
        }
        *(void *)(a3 + 8 * v26++) = v27;
      }
      while (a4 != v26);
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v29);
  return v25;
}

void sub_214008B90()
{
}

uLong computeCRC32(uLong crc, const unsigned __int8 *a2, uInt a3)
{
  return crc32(crc, a2, a3);
}

uLong computeCRC32(unsigned int a1, const unsigned __int16 *a2, int a3)
{
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&buf, 2 * a3);
  if (a3)
  {
    uint64_t v6 = 0;
    do
    {
      unsigned __int16 v7 = a2[v6];
      buf[(v6 * 2)] = v7;
      buf[(v6 * 2 + 1)] = HIBYTE(v7);
      ++v6;
    }
    while (a3 != v6);
  }
  uLong v8 = crc32(a1, buf, len);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&buf);
  return v8;
}

void sub_214008C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uLong computeCRC32(unsigned int a1, const unsigned int *a2, unsigned int a3)
{
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&buf, 4 * a3);
  if (a3)
  {
    unint64_t v6 = 0;
    do
    {
      unsigned int v7 = a2[v6 / 4];
      buf[v6] = v7;
      v7 >>= 8;
      buf[(v6 + 1)] = v7;
      buf[(v6 + 2)] = v7;
      buf[(v6 + 3)] = v7;
      v6 += 4;
    }
    while (4 * a3 != v6);
  }
  uLong v8 = crc32(a1, buf, len);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&buf);
  return v8;
}

void sub_214008D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t LMStats::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 56;
  }
  uint64_t v5 = SnapTime::sizeObject(a1 + 56, a2) + v4;
  uint64_t v6 = SnapTime::sizeObject(a1 + 88, a2);
  return v5 + v6 + SnapTime::sizeObject(a1 + 120, a2);
}

double LMStats::resetStats(LMStats *this)
{
  *((void *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  double result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

__n128 LMStats::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(void *)(a2 + 48);
  long long v2 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v2;
  long long v3 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v3;
  __n128 result = *(__n128 *)(a2 + 120);
  long long v5 = *(_OWORD *)(a2 + 136);
  *(__n128 *)(a1 + 120) = result;
  *(_OWORD *)(a1 + 136) = v5;
  return result;
}

int64x2_t LMStats::operator-=(uint64_t a1, uint64_t a2)
{
  int32x4_t v2 = *(int32x4_t *)(a1 + 16);
  *(int32x4_t *)a1 = vsubq_s32(*(int32x4_t *)a1, *(int32x4_t *)a2);
  *(int32x4_t *)(a1 + 16) = vsubq_s32(v2, *(int32x4_t *)(a2 + 16));
  *(int32x4_t *)(a1 + 32) = vsubq_s32(*(int32x4_t *)(a1 + 32), *(int32x4_t *)(a2 + 32));
  *(int32x2_t *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = vsub_s32(*(int32x2_t *)(a1 + 48), *(int32x2_t *)(a2 + 48));
  *(int64x2_t *)(a1 + 56) = vsubq_s64(*(int64x2_t *)(a1 + 56), *(int64x2_t *)(a2 + 56));
  *(int64x2_t *)(a1 + 72) = vsubq_s64(*(int64x2_t *)(a1 + 72), *(int64x2_t *)(a2 + 72));
  *(int64x2_t *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = vsubq_s64(*(int64x2_t *)(a1 + 88), *(int64x2_t *)(a2 + 88));
  *(int64x2_t *)(a1 + 104) = vsubq_s64(*(int64x2_t *)(a1 + 104), *(int64x2_t *)(a2 + 104));
  *(int64x2_t *)(a1 + 120) = vsubq_s64(*(int64x2_t *)(a1 + 120), *(int64x2_t *)(a2 + 120));
  int64x2_t result = vsubq_s64(*(int64x2_t *)(a1 + 136), *(int64x2_t *)(a2 + 136));
  *(int64x2_t *)(a1 + 136) = result;
  return result;
}

void LanguageModel::LanguageModel(LanguageModel *this, int a2, const WordList *a3)
{
  *(void *)this = &unk_26C4E0160;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a3;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
}

void LanguageModel::~LanguageModel(RecentBuffer **this)
{
  *this = (RecentBuffer *)&unk_26C4E0160;
  uint64_t v1 = this + 1;
  DgnDelete<RecentBuffer>(this[1]);
  *uint64_t v1 = 0;
  v1[1] = 0;
}

BOOL LanguageModel::hasRecentBuffer(LanguageModel *this)
{
  return *((void *)this + 1) != 0;
}

uint64_t LanguageModel::getRecentBufferLength(LanguageModel *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(unsigned int *)(v1 + 40);
  }
  else {
    return 0;
  }
}

WordLanguageModel ***LanguageModel::addToRecent(WordLanguageModel ***result, uint64_t *a2, uint64_t a3)
{
  if (result[1])
  {
    LODWORD(v3) = a3;
    long long v5 = result;
    if (((unsigned int (*)(WordLanguageModel ***, uint64_t))(*result)[14])(result, a3)) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = 0xFFFFFFLL;
    }
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v6 = *((unsigned int *)a2 + 2);
    if (v6)
    {
      uint64_t v12 = 0;
      HIDWORD(v11) = realloc_array(0, &v12, 4 * v6, 0, 0, 1) >> 2;
      uint64_t v10 = v12;
      if (*((_DWORD *)a2 + 2))
      {
        unint64_t v7 = 0;
        do
        {
          if (((unsigned int (*)(WordLanguageModel ***, void))(*v5)[14])(v5, *(unsigned int *)(*a2 + 4 * v7)))
          {
            uint64_t v8 = *a2;
            v10[v11] = *(_DWORD *)(*a2 + 4 * v7);
            int v9 = v11 + 1;
            LODWORD(v11) = v11 + 1;
          }
          else
          {
            v10[v11] = 0xFFFFFF;
            int v9 = v11 + 1;
            LODWORD(v11) = v11 + 1;
            uint64_t v8 = *a2;
          }
          if (*(_DWORD *)(v8 + 4 * v7) == 16777213)
          {
            RecentBuffer::addToRecent(v5[1], (uint64_t)&v10, v3);
            int v9 = 0;
            LODWORD(v11) = 0;
            uint64_t v3 = 16777214;
          }
          ++v7;
        }
        while (v7 < *((unsigned int *)a2 + 2));
        if (v9) {
          RecentBuffer::addToRecent(v5[1], (uint64_t)&v10, v3);
        }
      }
    }
    return (WordLanguageModel ***)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v10);
  }
  return result;
}

void sub_214009104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void LanguageModel::clearRecent(LanguageModel *this)
{
  uint64_t v1 = (RecentBuffer *)*((void *)this + 1);
  if (v1) {
    RecentBuffer::clearRecent(v1);
  }
}

void LanguageModel::getDefaultRestrictRange(LanguageModel *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 0xFFFFFF;
  *a3 = 0xFFFFFF;
}

uint64_t LanguageModel::languageScoreFinish(LanguageModel *this, uint64_t a2, uint64_t RecentScore, LMScoreDetails *a4, int a5, unsigned int a6, LMContextData *a7)
{
  if (*((void *)this + 1)) {
    BOOL v8 = a5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if ((*(unsigned int (**)(LanguageModel *))(*(void *)this + 112))(this)) {
      Recentuint64_t Score = RecentBuffer::getRecentScore(*((RecentBuffer **)this + 1), a2, RecentScore, a7);
    }
    if (a4) {
      *(_WORD *)(*(void *)a4 + 2 * a6) = RecentScore;
    }
  }
  return RecentScore;
}

uint64_t LanguageModel::languageScoreFinishForSearch(LanguageModel *this, uint64_t a2, uint64_t a3, const LMContextData *a4)
{
  if (!*((void *)this + 1) || !(*(unsigned int (**)(LanguageModel *))(*(void *)this + 112))(this)) {
    return a3;
  }
  BOOL v8 = (RecentBuffer *)*((void *)this + 1);

  return RecentBuffer::getRecentScore(v8, a2, a3, a4);
}

void LanguageModel::startBuildingTopicLM(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LanguageModel::addBuildTopicLM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LanguageModel::endBuildingTopicLM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LanguageModel::abortBuildingTopicLM(LanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::isBuildingTopicLM(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::getBuildExternalTopicLmSlot(LanguageModel *this)
{
  return 0xFFFFLL;
}

uint64_t LanguageModel::setContext(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)(result + 8))
  {
    int v9 = (uint64_t ***)result;
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (v10)
    {
      uint64_t v17 = 0;
      unint64_t v11 = realloc_array(0, &v17, 4 * v10, 0, 0, 1);
      uint64_t v15 = v17;
      int v12 = *(_DWORD *)(a2 + 8);
      LODWORD(v16) = v10;
      HIDWORD(v16) = v11 >> 2;
      if (v12)
      {
        unint64_t v13 = 0;
        do
        {
          if (((unsigned int (*)(uint64_t ***, void))(*v9)[14])(v9, *(unsigned int *)(*(void *)a2 + 4 * v13)))
          {
            int v14 = *(_DWORD *)(*(void *)a2 + 4 * v13);
          }
          else
          {
            int v14 = 0xFFFFFF;
          }
          v15[v13++] = v14;
        }
        while (v13 < *(unsigned int *)(a2 + 8));
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
    RecentBuffer::setContext(v9[1], (uint64_t)&v15, a4, a6);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
  }
  return result;
}

void sub_2140094DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void LanguageModel::unsetContext(LanguageModel *this, LMContextData *a2)
{
  int32x4_t v2 = (RecentBuffer *)*((void *)this + 1);
  if (v2) {
    RecentBuffer::unsetContext(v2, a2);
  }
}

void LanguageModel::setWeights(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::getNumDispatchComponents(LanguageModel *this)
{
  return 0;
}

void LanguageModel::setDispatchPrefiltererPerWordPenalty(LanguageModel *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::getDispatchPrefiltererPerWordPenalty(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t LanguageModel::getNumInterpolatedLms(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::setInterpolatedLmWeights()
{
  return 0;
}

uint64_t LanguageModel::getInterpolatedLmWeights(LanguageModel *this, unsigned int *a2)
{
  return 0;
}

void LanguageModel::getActiveTopicLmSlots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LanguageModel::setTopicLmSlotWeights(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::hasWeights(LanguageModel *this)
{
  return 0;
}

void LanguageModel::getWeightsData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LanguageModel::cleanupWeightsData(LanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::makeNewWeights(LanguageModel *this, const DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0xFFFFLL;
}

void LanguageModel::deleteWeights(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LanguageModel::applyWeights(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::getValidWeightsIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t LanguageModel::getWeightsId(LanguageModel *this, const DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0xFFFFLL;
}

uint64_t LanguageModel::getWeightsName(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t LanguageModel::isFactoryWeights(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 1;
}

void LanguageModel::checkWeightsId(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::getNumLoadedBigramBytes(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::getNumLoadedTrigramBytes(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::getNumLoadedQuadgramBytes(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::getValidTopicLmSlots(uint64_t a1, uint64_t a2)
{
  if (a2) {
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  }
  return 0;
}

uint64_t LanguageModel::getTopicLmSlotId(LanguageModel *this, const DgnString *a2)
{
  return 0xFFFFLL;
}

void LanguageModel::setTopicLmSlotName(LanguageModel *this, unsigned int a2, const DgnString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::getTopicLmSlotName(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t LanguageModel::hasTopicLM(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

void LanguageModel::deleteTopicLMs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::getValidFactoryCorrectiveLms(uint64_t a1, uint64_t a2)
{
  if (a2) {
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  }
  return 0;
}

uint64_t LanguageModel::getFactoryCorrectiveLmId(LanguageModel *this, const DgnString *a2)
{
  return 0xFFFFLL;
}

uint64_t LanguageModel::getFactoryCorrectiveLmName(LanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

void LanguageModel::setFactoryCorrectiveLmName(LanguageModel *this, unsigned int a2, const DgnString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LanguageModel::getActiveFactoryCorrectiveLms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LanguageModel::setActiveFactoryCorrectiveLms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LanguageModel::hasAnyQuadgrams(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::tri1HasTrigrams(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::quad1quad2HasQuadgrams(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::mayWordBeIgnoredInContext(LanguageModel *this)
{
  return 0;
}

void LanguageModel::printSize(LanguageModel *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 694, (DgnString *)&v57);
  if (v58) {
    uint64_t v16 = (void *)v57;
  }
  else {
    uint64_t v16 = &unk_2140A8EE3;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A8EE3, a3, &unk_2140A8EE3, v16);
  DgnString::~DgnString((DgnString *)&v57);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A8EE3);
  uint64_t v21 = (RecentBuffer *)*((void *)this + 1);
  if (v21)
  {
    unint64_t v56 = 0;
    unint64_t v57 = 0;
    uint64_t v22 = (a3 + 1);
    unint64_t v55 = 0;
    RecentBuffer::printSize(v21, 0xFFFFFFFFLL, v22, &v57, &v56, &v55);
    *a4 += v57;
    *a5 += v56;
    *a6 += v55;
  }
  else
  {
    uint64_t v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 696, (DgnString *)&v57);
  if (v58) {
    uint64_t v28 = (void *)v57;
  }
  else {
    uint64_t v28 = &unk_2140A8EE3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &unk_2140A8EE3, (34 - a3), (34 - a3), v28, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v57);
  *a4 += v23;
  *a5 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v29 = 4;
  }
  else {
    uint64_t v29 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 697, (DgnString *)&v57);
  if (v58) {
    unint64_t v34 = (void *)v57;
  }
  else {
    unint64_t v34 = &unk_2140A8EE3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, v22, &unk_2140A8EE3, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v57);
  *a4 += v29;
  *a5 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 699, (DgnString *)&v57);
  if (v58) {
    unint64_t v39 = (void *)v57;
  }
  else {
    unint64_t v39 = &unk_2140A8EE3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, v22, &unk_2140A8EE3, (34 - a3), (34 - a3), v39, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v57);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 701, (DgnString *)&v57);
  if (v58) {
    std::vector<std::wstring>::pointer v44 = (void *)v57;
  }
  else {
    std::vector<std::wstring>::pointer v44 = &unk_2140A8EE3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v22, &unk_2140A8EE3, (34 - a3), (34 - a3), v44, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v57);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 703, (DgnString *)&v57);
  if (v58) {
    uint64_t v49 = (void *)v57;
  }
  else {
    uint64_t v49 = &unk_2140A8EE3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v22, &unk_2140A8EE3, (34 - a3), (34 - a3), v49, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v57);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 704, (DgnString *)&v57);
  if (v58) {
    unint64_t v54 = (void *)v57;
  }
  else {
    unint64_t v54 = &unk_2140A8EE3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, a3, &unk_2140A8EE3, (35 - a3), (35 - a3), v54, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v57);
}

void sub_21400A0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t LanguageModel::saveVocAndSvc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 72))(a1, a2, a4, 0, a6);
}

uint64_t LanguageModel::getTotalPreloadableBytes(LanguageModel *this)
{
  return 0;
}

uint64_t LanguageModel::computeTotalPreloadableBytes(LanguageModel *this)
{
  return 0;
}

void LanguageModel::finalizeLM(uint64_t a1, LanguageModel *a2, DFile *a3, DFileChecksums *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  if ((DFile::subFileExists((uint64_t)a3, 0x4Au) & 1) != 0 || DFile::subFileExists((uint64_t)a3, 0x49u))
  {
    if (a1
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 806, (uint64_t)"lm/lm", 7, (uint64_t)"%s", v16, v17, (char)&errStr_lm_lm_E_RECENT_WITHOUT_LM);
    }
    uint64_t v18 = MemChunkAlloc(0x218uLL, 0);
    uint64_t v19 = RecentBuffer::RecentBuffer((RecentBuffer *)v18, *(_DWORD *)(a1 + 32), *(const WordList **)(a1 + 16), a2, (LanguageModel *)a1);
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v19;
    RecentBuffer::loadRecentBuffer(v19, a3, a4, a6, a11);
  }
}

uint64_t LanguageModel::getLMWithLegacyPath(LanguageModel *this, DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t *LanguageModel::CreateAndLoadLanguageModel(LanguageModel *this, DFile *a2, DFile *a3, DFileChecksums *a4, DgnSharedMemStream *a5, unsigned int a6, char a7, unsigned int a8, unsigned int a9, unsigned int a10, const WordList *a11, BOOL a12, unsigned int a13, unsigned int a14, __int16 a15, BOOL *a16, BOOL *a17, double *a18)
{
  char v30 = (char)a5;
  if (DFile::subFileExists((uint64_t)this, 0x6Du)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 852, (uint64_t)"lm/lm", 4, (uint64_t)"%s", v19, v20, (char)&errStr_lm_lm_E_CANT_LOAD_WORDDUMMY);
  }
  if (DFile::subFileExists((uint64_t)this, 0x73u) & 1) != 0 || (DFile::subFileExists((uint64_t)this, 0x6Fu)) {
    int v21 = 1;
  }
  else {
    int v21 = DFile::subFileExists((uint64_t)this, 0x70u);
  }
  int v22 = v21 + DFile::subFileExists((uint64_t)this, 0x29u);
  if (v22 + DFile::subFileExists((uint64_t)this, 0x28u) >= 2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 858, (uint64_t)"lm/lm", 3, (uint64_t)"%s", v23, v24, (char)&errStr_lm_lm_E_MULTIPLE_SPEC_SUBFILES);
  }
  if ((DFile::subFileExists((uint64_t)this, 0x73u) & 1) != 0
    || (DFile::subFileExists((uint64_t)this, 0x6Fu) & 1) != 0
    || DFile::subFileExists((uint64_t)this, 0x70u))
  {
    uint64_t v25 = MemChunkAlloc(0x728uLL, 0);
    WordLanguageModel::WordLanguageModel((WordLanguageModel *)v25, a9, a11);
  }
  else if ((DFile::subFileExists((uint64_t)this, 0x29u) & 1) != 0 {
         || DFile::subFileExists((uint64_t)this, 0x28u))
  }
  {
    uint64_t v25 = MemChunkAlloc(0x2D0uLL, 0);
    MultiLanguageModel::MultiLanguageModel((MultiLanguageModel *)v25, a9, a11);
  }
  else
  {
    if ((a7 & 1) == 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/lm.cpp", 876, (uint64_t)"lm/lm", 5, (uint64_t)"%s", v27, v28, (char)&errStr_lm_lm_E_MISSING_LM);
    }
    uint64_t v25 = MemChunkAlloc(0x28uLL, 0);
    DummyLanguageModel::DummyLanguageModel((DummyLanguageModel *)v25, a9, a11);
  }
  *((_DWORD *)v25 + 7) = *(_DWORD *)(DFile::getCurrentSubDirComponents(this) + 8);
  *((unsigned char *)v25 + 24) = v30;
  (*(void (**)(uint64_t *, LanguageModel *, DFile *, DFile *, DFileChecksums *, void, void, BOOL, unint64_t, __int16, BOOL *, BOOL *, double *))(*v25 + 24))(v25, this, a2, a3, a4, a6, a8, a12, __PAIR64__(a14, a13), a15, a16, a17, a18);
  return v25;
}

void MrecInitModule_generr_mrecutil(void)
{
  if (!gParDiagnosticCrashOnAssert)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticCrashOnAssert", &byte_2140B33BB, &byte_2140B33BB, 1, SetShadowDiagnosticCrashOnAssert, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDiagnosticCrashOnAssert = (uint64_t)v1;
    gShadowDiagnosticCrashOnAssert = 1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticCrashOnAssert);
  }
  if (!gParDiagnosticCrashOnError)
  {
    int32x4_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticCrashOnError", &byte_2140B33BB, &byte_2140B33BB, 0, SetShadowDiagnosticCrashOnError, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDiagnosticCrashOnError = (uint64_t)v3;
    gShadowDiagnosticCrashOnError = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticCrashOnError);
  }
  if (!gParDiagnosticCrashOnWarning)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DiagnosticCrashOnWarning", &byte_2140B33BB, &byte_2140B33BB, 0, SetShadowDiagnosticCrashOnWarning, 0);
    void *v5 = &unk_26C4E0858;
    gParDiagnosticCrashOnWarning = (uint64_t)v5;
    gShadowDiagnosticCrashOnWarning = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticCrashOnWarning);
  }
  if (!gParDiagnosticAbortOnAssert)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DiagnosticAbortOnAssert", &byte_2140B33BB, &byte_2140B33BB, 1, SetShadowDiagnosticAbortOnAssert, 0);
    *unint64_t v7 = &unk_26C4E0858;
    gParDiagnosticAbortOnAssert = (uint64_t)v7;
    gShadowDiagnosticAbortOnAssert = 1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticAbortOnAssert);
  }
  if (!gParDiagnosticSkipTheseAsserts)
  {
    BOOL v8 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v8, "DiagnosticSkipTheseAsserts", &byte_2140B33BB, &byte_2140B33BB, &byte_2140B33BB, (void (*)(void))SetSkipAsserts, 0);
    *int v9 = &unk_26C4E18B8;
    gParDiagnosticSkipTheseAsserts = (uint64_t)v9;
    uint64_t v10 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v10, (GlobalParam **)&gParDiagnosticSkipTheseAsserts);
  }
}

void errWarnInternal(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, ...)
{
  va_start(va, a5);
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!sbSkipWarnings)
  {
    uint64_t v6 = v5;
    if (gShadowDiagnosticCrashOnWarning)
    {
      pid_t v7 = getpid();
      kill(v7, 5);
    }
    ++sNumWarnBPCalls;
    DgnString::DgnString((DgnString *)&v23);
    v20[0] = 0;
    int v21 = 0x2000;
    char v22 = 0;
    MessageFormatPrefix((DgnThreadMgr *)v20, 1, 0, -1);
    if (v24) {
      BOOL v8 = v23;
    }
    else {
      BOOL v8 = &byte_2140B33BB;
    }
    if (v22) {
      int v9 = v8;
    }
    else {
      int v9 = v20;
    }
    unsigned int v10 = strlen(v9);
    if (v6)
    {
      unsigned int v11 = v10;
      uint64_t Buffer = DgnBuffer::getBuffer((DgnBuffer *)v20, 0);
      unsigned int v13 = v21 - v11;
      unsigned int v14 = vsnprintf((char *)Buffer + v11, v21 - v11, v6, va);
      if ((v14 & 0x80000000) != 0 || v14 >= v13)
      {
        do
        {
          do
          {
            uint64_t v15 = DgnBuffer::getBuffer((DgnBuffer *)v20, 1);
            unsigned int v16 = v21 - v11;
            unsigned int v17 = vsnprintf((char *)v15 + v11, v21 - v11, v6, va);
          }
          while ((v17 & 0x80000000) != 0);
        }
        while (v17 >= v16);
      }
    }
    DgnBuffer::appendString((DgnBuffer *)v20, "\n");
    if (v24) {
      uint64_t v18 = v23;
    }
    else {
      uint64_t v18 = &byte_2140B33BB;
    }
    if (v22) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = v20;
    }
    xprintStringFancy(v19, 1, 1, 0, 0);
    DgnString::~DgnString((DgnString *)&v23);
  }
}

void sub_21400AA7C(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void errThrowInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  unsigned int v11 = v10;
  int v13 = v12;
  uint64_t v15 = v14;
  int v17 = v16;
  uint64_t v19 = v18;
  int v20 = v9;
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (gShadowDiagnosticCrashOnError | gbDiagnosticCrashOnErrorDueToProfilingClient)
  {
    pid_t v21 = getpid();
    kill(v21, 5);
  }
  ++sNumErrBPCalls;
  char v22 = v35;
  DgnString::DgnString((DgnString *)&v38);
  v35[0] = 0;
  __std::wstring::size_type size = 0x2000;
  char __size_4 = 0;
  if (v11)
  {
    uint64_t Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v35, 0);
    for (size_t i = __size; ; size_t i = __size)
    {
      int v25 = vsnprintf(Buffer, i, v11, &a9);
      if ((v25 & 0x80000000) == 0 && v25 < i) {
        break;
      }
      uint64_t Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v35, 1);
    }
    if (__size_4)
    {
      if (v39) {
        char v22 = v38;
      }
      else {
        char v22 = &byte_2140B33BB;
      }
    }
    else
    {
      char v22 = v35;
    }
  }
  strcpy(sgLastErrorString, v22);
  if (!sbSkipErrThrows && v20 != 2)
  {
    if (v20 == 1)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v27 = MemChunkAlloc(0x50uLL, 0);
      if (v39) {
        uint64_t v28 = v38;
      }
      else {
        uint64_t v28 = &byte_2140B33BB;
      }
      if (__size_4) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = v35;
      }
      DgnFileIOException::DgnFileIOException((DgnFileIOException *)v27, -1, v19, v17, v15, v13, v29);
      void *exception = v30;
    }
    else
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      uint64_t v32 = MemChunkAlloc(0x50uLL, 0);
      if (v39) {
        uint64_t v33 = v38;
      }
      else {
        uint64_t v33 = &byte_2140B33BB;
      }
      if (__size_4) {
        unint64_t v34 = v33;
      }
      else {
        unint64_t v34 = v35;
      }
      void *exception = DgnException::DgnException((DgnException *)v32, 0xFFFFFFFF, v19, v17, v15, v13, v34);
    }
    __cxa_throw(exception, v31, 0);
  }
  DgnString::~DgnString((DgnString *)&v38);
}

void sub_21400AD2C(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t crashIntoDebugger()
{
  pid_t v0 = getpid();

  return kill(v0, 5);
}

uint64_t errCopyAndThrowException(uint64_t result, uint64_t a2)
{
  if (sbSkipErrThrows) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = result == 2;
  }
  if (!v2)
  {
    if (result == 1)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      long long v5 = MemChunkAlloc(0x50uLL, 0);
      if (*(_DWORD *)(a2 + 16)) {
        uint64_t v6 = *(char **)(a2 + 8);
      }
      else {
        uint64_t v6 = &byte_2140B33BB;
      }
      if (*(_DWORD *)(a2 + 40)) {
        int v9 = *(char **)(a2 + 32);
      }
      else {
        int v9 = &byte_2140B33BB;
      }
      if (*(_DWORD *)(a2 + 64)) {
        unsigned int v11 = *(char **)(a2 + 56);
      }
      else {
        unsigned int v11 = &byte_2140B33BB;
      }
      DgnFileIOException::DgnFileIOException((DgnFileIOException *)v5, *(_DWORD *)(a2 + 72), v6, *(_DWORD *)(a2 + 24), v9, *(_DWORD *)(a2 + 48), v11);
      void *exception = v13;
    }
    else
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      pid_t v7 = MemChunkAlloc(0x50uLL, 0);
      if (*(_DWORD *)(a2 + 16)) {
        BOOL v8 = *(const char **)(a2 + 8);
      }
      else {
        BOOL v8 = &byte_2140B33BB;
      }
      if (*(_DWORD *)(a2 + 40)) {
        unsigned int v10 = *(const char **)(a2 + 32);
      }
      else {
        unsigned int v10 = &byte_2140B33BB;
      }
      if (*(_DWORD *)(a2 + 64)) {
        int v12 = *(const char **)(a2 + 56);
      }
      else {
        int v12 = &byte_2140B33BB;
      }
      void *exception = DgnException::DgnException((DgnException *)v7, *(_DWORD *)(a2 + 72), v8, *(_DWORD *)(a2 + 24), v10, *(_DWORD *)(a2 + 48), v12);
    }
    __cxa_throw(exception, v14, 0);
  }
  return result;
}

void sub_21400AEE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ThrowMemoryException(uint64_t a1)
{
  if (gShadowDiagnosticCrashOnError | gbDiagnosticCrashOnErrorDueToProfilingClient)
  {
    pid_t v2 = getpid();
    kill(v2, 5);
  }
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = a1;
}

void ThrowNewFailure(uint64_t a1, uint64_t a2)
{
}

void ThrowExternalNewFailure(uint64_t a1, uint64_t a2)
{
}

uint64_t haveTerminatedSuccessfully(void)
{
  return sbHaveTerminatedSuccessfully;
}

uint64_t setDllTerminatedSuccessfullyOrNotInUse(uint64_t result)
{
  sbDllTerminatedSuccessfullyOrNotInUse = result;
  if (sbExeTerminatedSuccessfullyOrNotInUse) {
    char v1 = result;
  }
  else {
    char v1 = 0;
  }
  sbHaveTerminatedSuccessfully = v1;
  return result;
}

void SetShadowDiagnosticCrashOnAssert(void)
{
  gShadowDiagnosticCrashOnAssert = *(unsigned char *)(gParDiagnosticCrashOnAssert + 41);
}

void SetShadowDiagnosticCrashOnError(void)
{
  gShadowDiagnosticCrashOnError = *(unsigned char *)(gParDiagnosticCrashOnError + 41);
}

void SetShadowDiagnosticCrashOnWarning(void)
{
  gShadowDiagnosticCrashOnWarning = *(unsigned char *)(gParDiagnosticCrashOnWarning + 41);
}

void SetShadowDiagnosticAbortOnAssert(void)
{
  gShadowDiagnosticAbortOnAssert = *(unsigned char *)(gParDiagnosticAbortOnAssert + 41);
}

void MrecInitModule_realdf_dfutil(void)
{
  if (!gParDebugDFile)
  {
    pid_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugDFile", (const char *)&unk_2140A8F96, (const char *)&unk_2140A8F96, 0, 0, 0);
    *char v1 = &unk_26C4E0858;
    gParDebugDFile = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugDFile);
  }
  if (!gParDebugShowDFileStatsOnDestruction)
  {
    pid_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowDFileStatsOnDestruction", (const char *)&unk_2140A8F96, (const char *)&unk_2140A8F96, 0, SetShadowDebugShowDFileStatsOnDestruction, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDebugShowDFileStatsOnDestructiouint64_t n = (uint64_t)v3;
    gShadowDebugShowDFileStatsOnDestructiouint64_t n = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowDFileStatsOnDestruction);
  }
  if (!gParDiagnosticDFileSimulateAddBlockFailure)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DiagnosticDFileSimulateAddBlockFailure", (const char *)&unk_2140A8F96, (const char *)&unk_2140A8F96, 0, 0, 0);
    void *v5 = &unk_26C4E0858;
    gParDiagnosticDFileSimulateAddBlockFailure = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticDFileSimulateAddBlockFailure);
  }
  if (!gParDiagnosticDFileSimulateOpenFailure)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DiagnosticDFileSimulateOpenFailure", (const char *)&unk_2140A8F96, (const char *)&unk_2140A8F96, 0, 0, 0);
    *pid_t v7 = &unk_26C4E0858;
    gParDiagnosticDFileSimulateOpenFailure = (uint64_t)v7;
    BOOL v8 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v8, (GlobalParam **)&gParDiagnosticDFileSimulateOpenFailure);
  }
}

uint64_t *mrecZlibAlloc(uint64_t a1, int a2, int a3)
{
  return MemChunkAlloc((a3 * a2), 0);
}

uint64_t mrecZlibFree(int a1, void *a2)
{
  if (a2) {
    return MemChunkFree(a2, 0);
  }
  return result;
}

uint64_t RealDFileSubFileStream::RealDFileSubFileStream(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5, int a6, __int16 a7, unsigned int a8, int a9, char a10, unint64_t a11)
{
  v118[1] = *(void **)MEMORY[0x263EF8340];
  if (*(_DWORD *)(a3 + 8)) {
    int v17 = *(const char **)a3;
  }
  else {
    int v17 = (const char *)&unk_2140A8F96;
  }
  uint64_t v18 = (void *)DgnStream::DgnStream(a1, a2, v17);
  void *v18 = &unk_26C4E3178;
  DgnString::DgnString((DgnString *)(v18 + 6));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 8) == 1;
  *(unsigned char *)(a1 + 76) = 0;
  unint64_t v108 = (void *)(a1 + 96);
  *(void *)(a1 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a4;
  DgnString::operator=(v19, a5);
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = a6;
  *(_WORD *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a7;
  *(void *)(a1 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a8;
  *(_DWORD *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a9;
  *(unsigned char *)(a1 + 92) = a10;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 12MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = -1;
  if ((a6 - 3) > 1 || !a10) {
    goto LABEL_112;
  }
  if (HIDWORD(a11)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 630, (uint64_t)"dfutil/realdf", 51, (uint64_t)"%.500s %.500s", v20, v21, *(unsigned char *)(*(void *)(a1 + 40) + 152) + ((_BYTE)a7 << 7));
  }
  *(_DWORD *)(a1 + 112) = a11;
  unsigned int v22 = a11 / 0x500000;
  unint64_t v105 = a11 % 0x500000;
  unsigned int v106 = a11 / 0x500000;
  if (a11 >= 0x500000) {
    unsigned int v23 = 5242880;
  }
  else {
    unsigned int v23 = a11 % 0x500000;
  }
  uint64_t v24 = v22 + 1;
  unsigned int v25 = *(_DWORD *)(a1 + 108);
  if (v25 <= v22) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v108, v24 - v25, 0);
  }
  uint64_t v26 = *(unsigned int *)(a1 + 104);
  if (v26 <= v24)
  {
    uint64_t v28 = (uint64_t *)(a1 + 96);
    if (v26 <= v106)
    {
      uint64_t v30 = ((a11 * (unsigned __int128)0x33333333334uLL) >> 64) - v26 + 1;
      uint64_t v31 = 16 * v26;
      do
      {
        uint64_t v32 = (void *)(*v108 + v31);
        void *v32 = 0;
        v32[1] = 0;
        v31 += 16;
        --v30;
      }
      while (v30);
    }
  }
  else
  {
    uint64_t v27 = (int)v26;
    uint64_t v28 = (uint64_t *)(a1 + 96);
    if ((int)v26 > (int)v24)
    {
      uint64_t v29 = 16 * (int)v26 - 16;
      do
      {
        --v27;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v108 + v29);
        v29 -= 16;
      }
      while (v27 > v24);
    }
  }
  *(_DWORD *)(a1 + 104) = v24;
  if (a11 >= 0x500000)
  {
    uint64_t v33 = 0;
    if (v106 <= 1) {
      unsigned int v34 = 1;
    }
    else {
      unsigned int v34 = a11 / 0x500000;
    }
    uint64_t v35 = 16 * v34;
    uint64_t v28 = (uint64_t *)(a1 + 96);
    do
    {
      uint64_t v36 = *v28 + v33;
      if (*(_DWORD *)(v36 + 12) >> 20 <= 4u)
      {
        strm.next_iuint64_t n = 0;
        *(_DWORD *)(v36 + 12) = realloc_array(*(void **)v36, (void **)&strm.next_in, 0x500000uLL, *(unsigned int *)(v36 + 8), *(unsigned int *)(v36 + 8), 1);
        *(void *)uint64_t v36 = strm.next_in;
      }
      v33 += 16;
      uint64_t v28 = (uint64_t *)(a1 + 96);
    }
    while (v35 != v33);
  }
  uint64_t v37 = *v28;
  uint64_t v38 = *v28 + 16 * v106;
  if (*(_DWORD *)(v38 + 12) < v105)
  {
    strm.next_iuint64_t n = 0;
    size_t v39 = *(unsigned int *)(v37 + 16 * v106 + 8);
    *(_DWORD *)(v38 + 12) = realloc_array(*(void **)v38, (void **)&strm.next_in, v105, v39, v39, 1);
    *(void *)uint64_t v38 = strm.next_in;
  }
  strm.next_iuint64_t n = 0;
  strm.avail_iuint64_t n = 0;
  strm.next_out = 0;
  strm.avail_out = 0;
  strm.zalloc = (alloc_func)mrecZlibAlloc;
  strm.zfree = (free_func)mrecZlibFree;
  strm.opaque = 0;
  unsigned int v40 = crc32(0, 0, 0);
  char v115 = 0;
  *(void *)uint64_t v116 = 0;
  buf = 0;
  unsigned int v41 = realloc_array(0, (void **)&buf, 0x4000uLL, 0, 0, 1);
  char v115 = (char *)buf;
  v116[0] = 0x4000;
  v116[1] = v41;
  strm.next_iuint64_t n = buf;
  inflateInit2_(&strm, -15, "1.2.12", 112);
  strm.avail_out = 0x4000;
  unsigned __int8 v114 = 0;
  RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
  if (v114 != 31) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 672, (uint64_t)"dfutil/realdf", 36, (uint64_t)"%.500s %.500s", v42, v43, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  }
  RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
  if (v114 != 139) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 676, (uint64_t)"dfutil/realdf", 36, (uint64_t)"%.500s %.500s", v44, v45, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  }
  char v113 = 0;
  RealDFileSubFileStream::basicReadWithMode(a1, &v113, 1u, 1);
  if (v113 != 8) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 682, (uint64_t)"dfutil/realdf", 36, (uint64_t)"%.500s %.500s", v46, v47, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  }
  unsigned __int8 v112 = 0;
  RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v112, 1u, 1);
  if (v112 > 0x1Fu) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 688, (uint64_t)"dfutil/realdf", 36, (uint64_t)"%.500s %.500s", v48, v49, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  }
  int v50 = 6;
  do
  {
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    --v50;
  }
  while (v50);
  if ((v112 & 4) != 0)
  {
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    int v51 = (char)v114;
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    for (int i = v51 + ((char)v114 << 8); i; --i)
      RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
  }
  unsigned __int8 v53 = v112;
  if ((v112 & 8) != 0)
  {
    do
      RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    while (v114);
    unsigned __int8 v53 = v112;
  }
  if ((v53 & 0x10) != 0)
  {
    do
      RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    while (v114);
    unsigned __int8 v53 = v112;
  }
  if ((v53 & 2) != 0)
  {
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
    RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v114, 1u, 1);
  }
  buf = 0;
  uint64_t v111 = 0;
  v118[0] = 0;
  uInt v54 = 0x4000;
  int v55 = realloc_array(0, v118, 0x4000uLL, 0, 0, 1);
  int v56 = 0;
  unsigned int v57 = 0;
  buf = (Bytef *)v118[0];
  LODWORD(v111) = 0x4000;
  HIDWORD(v111) = v55;
  while (2)
  {
    next_out = buf;
    strm.next_out = buf;
    strm.avail_out = v54;
    if (!v54) {
      goto LABEL_79;
    }
    while (1)
    {
      if (strm.avail_in)
      {
        BOOL v59 = 0;
      }
      else
      {
        if (v116[0]) {
          uInt v60 = RealDFileSubFileStream::basicRead((RealDFileSubFileStream *)a1, v115, v116[0]);
        }
        else {
          uInt v60 = 0;
        }
        strm.avail_iuint64_t n = v60;
        BOOL v59 = v60 == 0;
        strm.next_iuint64_t n = (Bytef *)v115;
      }
      int v61 = inflate(&strm, 0);
      int v56 = v61;
      if (!v61) {
        goto LABEL_63;
      }
      if (v61 == 1) {
        break;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 804, (uint64_t)"dfutil/realdf", 39, (uint64_t)"%.500s %.500s %d", v62, v63, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
LABEL_63:
      if (v59) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 807, (uint64_t)"dfutil/realdf", 40, (uint64_t)"%.500s %.500s", v62, v63, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
      }
      if (!strm.avail_out) {
        goto LABEL_79;
      }
    }
    unsigned int v64 = v57;
    unsigned int v65 = v23;
    int v70 = crc32(v40, next_out, LODWORD(strm.next_out) - (int)next_out);
    uint64_t v71 = 0;
    next_out = strm.next_out;
    char v72 = 1;
    do
    {
      int v73 = 0;
      int v74 = 0;
      char v75 = v72;
      *((_DWORD *)v118 + v71) = 0;
      do
      {
        unsigned __int8 v109 = 0;
        if (strm.avail_in)
        {
          --strm.avail_in;
          int v76 = *strm.next_in++;
        }
        else
        {
          RealDFileSubFileStream::basicReadWithMode(a1, (char *)&v109, 1u, 1);
          int v76 = v109;
        }
        v74 += v76 << v73;
        *((_DWORD *)v118 + v71) = v74;
        v73 += 8;
      }
      while (v73 != 32);
      char v72 = 0;
      uint64_t v71 = 1;
    }
    while ((v75 & 1) != 0);
    uint64_t v77 = HIDWORD(v118[0]);
    unsigned int v40 = v70;
    unsigned int v23 = v65;
    unsigned int v57 = v64;
    if (LODWORD(v118[0]) != v70) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 792, (uint64_t)"dfutil/realdf", 37, (uint64_t)"%.500s %.500s %u %u", v68, v69, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
    }
    uLong total_out = strm.total_out;
    if (strm.total_out != v77)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 797, (uint64_t)"dfutil/realdf", 38, (uint64_t)"%.500s %.500s %llu %u", v68, v69, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
      uLong total_out = strm.total_out;
    }
    RealDFile::verifyCompressionInfo(*(RealDFile **)(a1 + 40), *(unsigned __int16 *)(a1 + 68), total_out, v70, v66, v67, v68, v69);
    int v56 = 1;
LABEL_79:
    unsigned int v79 = crc32(v40, next_out, LODWORD(strm.next_out) - (int)next_out);
    unsigned int v80 = v111 - strm.avail_out;
    if (v111 != strm.avail_out)
    {
      unsigned int v107 = v79;
      unsigned int v81 = v80 - v23;
      if (v80 <= v23)
      {
        unsigned int v93 = v23;
        unsigned int v81 = v111 - strm.avail_out;
        unsigned int v91 = 0;
      }
      else
      {
        unsigned int v82 = v57;
        uint64_t v83 = *v108 + 16 * v57;
        BOOL v84 = (_DWORD *)(v83 + 8);
        uint64_t v85 = *(unsigned int *)(v83 + 8);
        unsigned int v86 = *(_DWORD *)(v83 + 8) + v23;
        unsigned int v87 = *(_DWORD *)(v83 + 12);
        if (v86 > v87)
        {
          DgnPrimArray<char>::reallocElts(v83, v86 - v87, 1);
          unsigned int v86 = *v84 + v23;
        }
        *BOOL v84 = v86;
        memcpy((void *)(*(void *)v83 + v85), buf, v23);
        unsigned int v88 = v82;
        BOOL v89 = v82 + 1 >= v106;
        BOOL v90 = v82 + 1 == v106;
        unsigned int v91 = v23;
        unsigned int v92 = v89 ? v23 : 5242880;
        unsigned int v93 = v90 ? a11 % 0x500000 : v92;
        unsigned int v57 = v90 ? a11 / 0x500000 : v88 + 1;
      }
      unsigned int v94 = v57;
      uint64_t v95 = *v108 + 16 * v57;
      uint64_t v97 = (_DWORD *)(v95 + 8);
      uint64_t v96 = *(unsigned int *)(v95 + 8);
      unsigned int v98 = v96 + v81;
      unsigned int v99 = *(_DWORD *)(v95 + 12);
      if (v96 + v81 > v99)
      {
        DgnPrimArray<char>::reallocElts(v95, v96 + v81 - v99, 1);
        unsigned int v98 = *v97 + v81;
      }
      *uint64_t v97 = v98;
      memcpy((void *)(*(void *)v95 + v96), &buf[v91], v81);
      unsigned int v100 = v94 + 1 >= v106 ? 0 : 5242880;
      if (v94 + 1 == v106)
      {
        unsigned int v100 = a11 % 0x500000;
        unsigned int v101 = a11 / 0x500000;
      }
      else
      {
        unsigned int v101 = v94 + 1;
      }
      unsigned int v23 = v93 == v81 ? v100 : v93 - v81;
      unsigned int v57 = v93 == v81 ? v101 : v94;
      unsigned int v40 = v107;
      if (v56 != 1)
      {
        uInt v54 = v111;
        continue;
      }
    }
    break;
  }
  if (inflateEnd(&strm)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 872, (uint64_t)"dfutil/realdf", 39, (uint64_t)"%.500s %.500s %d", v102, v103, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&buf);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v115);
LABEL_112:
  if (*(_DWORD *)(a1 + 8) == 2) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a1;
}

void sub_21400BE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, DgnString *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a22);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a17);
  DgnString::~DgnString(a13);
  DgnStream::~DgnStream(v22);
  _Unwind_Resume(a1);
}

size_t RealDFileSubFileStream::basicReadWithMode(uint64_t a1, char *a2, unsigned int a3, int a4)
{
  if (!a3) {
    return 0;
  }
  size_t v7 = RealDFileSubFileStream::basicRead((RealDFileSubFileStream *)a1, a2, a3);
  size_t v10 = v7;
  if (a4 == 1 && v7 != a3) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1451, (uint64_t)"dfutil/realdf", 19, (uint64_t)"%.500s %.500s %u %u", v8, v9, *(unsigned char *)(*(void *)(a1 + 40) + 152) + (*(_WORD *)(a1 + 68) << 7));
  }
  return v10;
}

void RealDFile::verifyCompressionInfo(RealDFile *this, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10 = a2;
  unint64_t v11 = *((void *)this + 19) + ((unint64_t)a2 << 7);
  if (*(void *)(v11 + 112) != a3) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4671, (uint64_t)"dfutil/realdf", 42, (uint64_t)"%.500s %.500s %llu %llu", a7, a8, v11);
  }
  if (*(_DWORD *)(v11 + 120) != a4) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4676, (uint64_t)"dfutil/realdf", 41, (uint64_t)"%.500s %.500s %u %u", a7, a8, *((unsigned char *)this + 152) + (v10 << 7));
  }
}

void RealDFileSubFileStream::~RealDFileSubFileStream(RealDFileSubFileStream *this, uint64_t a2, const char *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26C4E3178;
  uint64_t v4 = (DFile *)*((void *)this + 5);
  if (v4)
  {
    if (*((unsigned char *)this + 92) && *((_DWORD *)this + 16) == 5)
    {
      strm.next_iuint64_t n = 0;
      strm.avail_iuint64_t n = 0;
      strm.next_out = 0;
      strm.uInt avail_out = 0;
      strm.zalloc = (alloc_func)mrecZlibAlloc;
      strm.zfree = (free_func)mrecZlibFree;
      strm.opaque = 0;
      unsigned int v5 = crc32(0, 0, 0);
      deflateInit2_(&strm, 1, 8, -15, 9, 0, "1.2.12", 112);
      *(void *)__str = 0;
      int v6 = realloc_array(0, (void **)__str, 0x4000uLL, 0, 0, 1);
      size_t v7 = *(Bytef **)__str;
      int v39 = 0x4000;
      int v40 = v6;
      strm.next_out = *(Bytef **)__str;
      strm.uInt avail_out = 0x4000;
      uint64_t v38 = *(Bytef **)__str;
      snprintf(__str, 0xBuLL, "%c%c%c%c%c%c%c%c%c%c", 31, 139, 8, 0, 0, 0, 0, 0, 4, 3);
      RealDFileSubFileStream::basicWrite(this, __str, 10, v8, v9, v10, v11, v12);
      if (*((_DWORD *)this + 26))
      {
        unint64_t v18 = 0;
        do
        {
          uint64_t v19 = *((void *)this + 12) + 16 * v18;
          strm.next_iuint64_t n = *(Bytef **)v19;
          strm.avail_iuint64_t n = *(_DWORD *)(v19 + 8);
          unsigned int v5 = crc32(v5, strm.next_in, strm.avail_in);
          while (strm.avail_in)
          {
            if (!strm.avail_out)
            {
              RealDFileSubFileStream::basicWrite(this, (const char *)v7, 0x4000, v13, v14, v15, v16, v17);
              strm.next_out = v7;
              strm.uInt avail_out = 0x4000;
            }
            if (deflate(&strm, 0)) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 971, (uint64_t)"dfutil/realdf", 35, (uint64_t)"%.500s %.500s %d", v16, v17, *(unsigned char *)(*((void *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
            }
          }
          ++v18;
        }
        while (v18 < *((unsigned int *)this + 26));
      }
      BOOL v20 = 0;
      while (1)
      {
        uInt avail_out = strm.avail_out;
        if (strm.avail_out != 0x4000)
        {
          RealDFileSubFileStream::basicWrite(this, (const char *)v7, 0x4000 - strm.avail_out, v13, v14, v15, v16, v17);
          strm.next_out = v7;
          strm.uInt avail_out = 0x4000;
        }
        if (v20) {
          break;
        }
        int v22 = deflate(&strm, 4);
        if (v22 == -5 && avail_out == 0x4000) {
          unsigned int v24 = 0;
        }
        else {
          unsigned int v24 = v22;
        }
        BOOL v20 = v24 == 1 || strm.avail_out != 0;
        if (v24 >= 2) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1009, (uint64_t)"dfutil/realdf", 35, (uint64_t)"%.500s %.500s %d", v16, v17, *(unsigned char *)(*((void *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
        }
      }
      int v26 = 4;
      unsigned int v27 = v5;
      do
      {
        __str[0] = v27;
        RealDFileSubFileStream::basicWrite(this, __str, 1, v13, v14, v15, v16, v17);
        v27 >>= 8;
        --v26;
      }
      while (v26);
      total_iuint64_t n = strm.total_in;
      int v29 = 4;
      do
      {
        __str[0] = total_in;
        RealDFileSubFileStream::basicWrite(this, __str, 1, v13, v14, v15, v16, v17);
        total_in >>= 8;
        --v29;
      }
      while (v29);
      uint64_t v30 = *((void *)this + 5);
      uLong v31 = strm.total_in;
      unint64_t v32 = *(void *)(v30 + 152) + ((unint64_t)*((unsigned __int16 *)this + 34) << 7);
      *(_WORD *)(v32 + 124) = 257;
      *(void *)(v32 + 112) = v31;
      *(_DWORD *)(v32 + 12MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v5;
      *(unsigned char *)(v30 + 296) = 1;
      if (deflateEnd(&strm) >= 2) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1023, (uint64_t)"dfutil/realdf", 35, (uint64_t)"%.500s %.500s %d", v33, v34, *(unsigned char *)(*((void *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
      }
      uint64_t v35 = *((unsigned int *)this + 26);
      if ((int)v35 >= 1)
      {
        uint64_t v36 = 16 * v35 - 16;
        do
        {
          DgnPrimArray<unsigned int>::~DgnPrimArray(*((void *)this + 12) + v36);
          v36 -= 16;
        }
        while (v36 != -16);
      }
      *((_DWORD *)this + 26) = 0;
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v38);
      uint64_t v4 = (DFile *)*((void *)this + 5);
    }
    if (*((_DWORD *)this + 14)) {
      uint64_t v37 = (const char *)*((void *)this + 6);
    }
    else {
      uint64_t v37 = (const char *)&unk_2140A8F96;
    }
    DFile::reportProgress(v4, v37, a3);
    *((void *)this + 5) = 0;
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 96);
  DgnString::~DgnString((RealDFileSubFileStream *)((char *)this + 48));
  DgnStream::~DgnStream(this);
}

{
  uint64_t vars8;

  RealDFileSubFileStream::~RealDFileSubFileStream(this, a2, a3);

  JUMPOUT(0x216698730);
}

void sub_21400C58C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void RealDFileSubFileStream::basicWrite(RealDFileSubFileStream *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return;
  }
  uint64_t v10 = *((unsigned int *)this + 22);
  uint64_t v11 = *((void *)this + 10);
  uint64_t v12 = *((void *)this + 5);
  if (4096 - (v11 & 0xFFF) >= a3) {
    unsigned int v13 = a3;
  }
  else {
    unsigned int v13 = 4096 - (v11 & 0xFFF);
  }
  unint64_t v14 = *((void *)this + 10) & 0xFFFLL | ((*(unsigned int *)(v12 + 216) + v10) << 12);
  unint64_t v15 = *(void *)(v12 + 152) + ((unint64_t)*((unsigned __int16 *)this + 34) << 7);
  uint64_t v16 = (int *)(v15 + 104);
  uint64_t v17 = (unsigned int *)(v15 + 108);
  unsigned int v34 = a3;
  unsigned int v18 = a3;
  while (1)
  {
    if (v18 <= v13)
    {
      unsigned int v21 = 0;
    }
    else
    {
      uint64_t v19 = *((void *)this + 5);
      uint64_t v20 = *((unsigned __int16 *)this + 34);
      if (v10 == *v16)
      {
        unsigned int v21 = RealDFile::addBlock((RealDFile *)v19, v20, a3, a4, a5, a6, a7, a8);
        *uint64_t v17 = 0;
      }
      else
      {
        unsigned int v21 = v10 + 1;
        unsigned int v22 = *(_DWORD *)(v19 + 144);
        if (v22 > (int)v10 + 1)
        {
          unsigned int v23 = (unsigned __int16 *)(*(void *)(v19 + 136) + 2 * v21);
          while (1)
          {
            int v24 = *v23++;
            if (v24 == v20) {
              break;
            }
            if (v22 == ++v21)
            {
              unsigned int v21 = *(_DWORD *)(v19 + 144);
              break;
            }
          }
        }
      }
    }
    unsigned int v25 = v10 + 1;
    if (v18 == v13 || v21 != v25) {
      break;
    }
LABEL_19:
    if (v18 - v13 >= 0x1000) {
      v13 += 4096;
    }
    else {
      unsigned int v13 = v18;
    }
    LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v21;
  }
  RealDFile::doWriteToCache(*((RealDFile **)this + 5), v14, a2, v13);
  v18 -= v13;
  if (v18)
  {
    a2 += v13;
    unint64_t v14 = (*(unsigned int *)(*((void *)this + 5) + 216) + (unint64_t)v21) << 12;
    unsigned int v13 = 0;
    goto LABEL_19;
  }
  uint64_t v26 = *((void *)this + 10) + v34;
  *((void *)this + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v26;
  int v27 = *v16;
  unsigned int v28 = v26 & 0xFFF;
  if ((v26 & 0xFFF) == 0)
  {
    uint64_t v29 = *((void *)this + 5);
    uint64_t v30 = *((unsigned __int16 *)this + 34);
    if (v10 == v27)
    {
      LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = RealDFile::addBlock((RealDFile *)v29, v30, a3, a4, a5, a6, a7, a8);
      *uint64_t v17 = 0;
      int v27 = *v16;
    }
    else
    {
      unsigned int v31 = *(_DWORD *)(v29 + 144);
      if (v31 <= v25)
      {
        LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10 + 1;
      }
      else
      {
        LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10 + 1;
        unint64_t v32 = (unsigned __int16 *)(*(void *)(v29 + 136) + 2 * v25);
        while (1)
        {
          int v33 = *v32++;
          if (v33 == v30) {
            break;
          }
          LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10 + 1;
          if (v31 == v10)
          {
            LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_DWORD *)(v29 + 144);
            break;
          }
        }
      }
    }
  }
  if (v10 == v27 && *v17 < v28)
  {
    *uint64_t v17 = v28;
    *(unsigned char *)(*((void *)this + 5) + 296) = 1;
  }
  *((_DWORD *)this + 22) = v10;
}

void RealDFileSubFileStream::printSize(RealDFileSubFileStream *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1044, (DgnString *)&v98);
  if (v99) {
    uint64_t v16 = (void *)v98;
  }
  else {
    uint64_t v16 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A8F96, a3, &unk_2140A8F96, v16);
  DgnString::~DgnString((DgnString *)&v98);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A8F96);
  unint64_t v97 = 0;
  unint64_t v98 = 0;
  uint64_t v21 = (a3 + 1);
  unint64_t v96 = 0;
  DgnStream::printSize(this, 0xFFFFFFFFLL, v21, &v98, &v97, &v96);
  *a4 += v98;
  *a5 += v97;
  *a6 += v96;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v22 = 4;
  }
  else {
    uint64_t v22 = 8;
  }
  uint64_t v95 = a3;
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1046, (DgnString *)&v98);
  if (v99) {
    unsigned int v28 = (void *)v98;
  }
  else {
    unsigned int v28 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v21, &unk_2140A8F96, v23, v23, v28, v22, v22, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += v22;
  *a5 += v22;
  uint64_t v29 = sizeObject((char *)this + 48);
  uint64_t v30 = sizeObject((char *)this + 48);
  uint64_t v31 = sizeObject((char *)this + 48);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1048, (DgnString *)&v98);
  if (v99) {
    uint64_t v36 = (void *)v98;
  }
  else {
    uint64_t v36 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v21, &unk_2140A8F96, v23, v23, v36, v29, v30, v31);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += v29;
  *a5 += v30;
  *a6 += v31;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1050, (DgnString *)&v98);
  if (v99) {
    unsigned int v41 = (void *)v98;
  }
  else {
    unsigned int v41 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, v21, &unk_2140A8F96, v23, v23, v41, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1051, (DgnString *)&v98);
  if (v99) {
    uint64_t v46 = (void *)v98;
  }
  else {
    uint64_t v46 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v21, &unk_2140A8F96, v23, v23, v46, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1052, (DgnString *)&v98);
  if (v99) {
    int v51 = (void *)v98;
  }
  else {
    int v51 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v21, &unk_2140A8F96, v23, v23, v51, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v98);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1054, (DgnString *)&v98);
  if (v99) {
    int v56 = (void *)v98;
  }
  else {
    int v56 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v21, &unk_2140A8F96, v23, v23, v56, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1056, (DgnString *)&v98);
  if (v99) {
    int v61 = (void *)v98;
  }
  else {
    int v61 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v21, &unk_2140A8F96, v23, v23, v61, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1057, (DgnString *)&v98);
  if (v99) {
    uint64_t v66 = (void *)v98;
  }
  else {
    uint64_t v66 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_2140A8F96, v23, v23, v66, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v98);
  ++*a4;
  ++*a5;
  uint64_t v67 = (char *)this + 96;
  uint64_t v68 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 96, 0);
  uint64_t v69 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)v67, 1);
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v98);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1059, (DgnString *)&v98);
  if (v99) {
    int v74 = (void *)v98;
  }
  else {
    int v74 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, &unk_2140A8F96, v23, v23, v74, v68, v69, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += v68;
  *a5 += v69;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1061, (DgnString *)&v98);
  if (v99) {
    unsigned int v79 = (void *)v98;
  }
  else {
    unsigned int v79 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v21, &unk_2140A8F96, v23, v23, v79, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1063, (DgnString *)&v98);
  if (v99) {
    BOOL v84 = (void *)v98;
  }
  else {
    BOOL v84 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v21, &unk_2140A8F96, v23, v23, v84, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1065, (DgnString *)&v98);
  if (v99) {
    BOOL v89 = (void *)v98;
  }
  else {
    BOOL v89 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_2140A8F96, v23, v23, v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v98);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1067, (DgnString *)&v98);
  if (v99) {
    unsigned int v94 = (void *)v98;
  }
  else {
    unsigned int v94 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v95, &unk_2140A8F96, (35 - v95), (35 - v95), v94, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v98);
}

void sub_21400CEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RealDFileSubFileStream::seekFromBeg(RealDFileSubFileStream *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 92))
  {
    if (*((unsigned int *)this + 28) < a2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1082, (uint64_t)"dfutil/realdf", 34, (uint64_t)"%.500s %.500s", a7, a8, *(unsigned char *)(*((void *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
    }
    *((_DWORD *)this + 29) = a2;
  }
  else
  {
    unint64_t v10 = *(void *)(*((void *)this + 5) + 152) + ((unint64_t)*((unsigned __int16 *)this + 34) << 7);
    if (*(unsigned int *)(v10 + 108) + ((unint64_t)(*(_DWORD *)(v10 + 96) - 1) << 12) < a2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1095, (uint64_t)"dfutil/realdf", 50, (uint64_t)"%.500s %.500s %llu %llu", a7, a8, v10);
    }
    unsigned int v11 = *((_DWORD *)this + 22);
    uint64_t v12 = (a2 >> 12) - (*((void *)this + 10) >> 12);
    if (v12 < 1)
    {
      if (v12 < 0)
      {
        uint64_t v18 = *((void *)this + 5);
        unsigned int v19 = *(_DWORD *)(v18 + 144);
        do
        {
          if (v19 <= --v11) {
            unsigned int v11 = v19 - 1;
          }
          for (; v11 != -1; --v11)
          {
            if (*(unsigned __int16 *)(*(void *)(v18 + 136) + 2 * v11) == *((unsigned __int16 *)this + 34)) {
              break;
            }
          }
        }
        while (!__CFADD__(v12++, 1));
      }
    }
    else
    {
      uint64_t v13 = *((void *)this + 5);
      unsigned int v14 = *(_DWORD *)(v13 + 144);
      do
      {
        if (v14 > ++v11)
        {
          uint64_t v15 = (unsigned __int16 *)(*(void *)(v13 + 136) + 2 * v11);
          while (1)
          {
            int v16 = *v15++;
            if (v16 == *((unsigned __int16 *)this + 34)) {
              break;
            }
            if (v14 == ++v11)
            {
              unsigned int v11 = *(_DWORD *)(v13 + 144);
              break;
            }
          }
        }
      }
      while (v12-- > 1);
    }
    *((_DWORD *)this + 22) = v11;
    *((void *)this + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a2;
  }
  *((unsigned char *)this + 76) = 0;
}

uint64_t RealDFileSubFileStream::seekToEnd(uint64_t this)
{
  if (*(unsigned char *)(this + 92))
  {
    *(_DWORD *)(this + 116) = *(_DWORD *)(this + 112);
    *(unsigned char *)(this + 76) = 0;
  }
  else
  {
    unint64_t v1 = *(void *)(*(void *)(this + 40) + 152) + ((unint64_t)*(unsigned __int16 *)(this + 68) << 7);
    return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)this + 24))(this, *(unsigned int *)(v1 + 108) + ((unint64_t)(*(_DWORD *)(v1 + 96) - 1) << 12));
  }
  return this;
}

uint64_t RealDFileSubFileStream::tell(RealDFileSubFileStream *this)
{
  if (*((unsigned char *)this + 92)) {
    return *((unsigned int *)this + 29);
  }
  else {
    return *((void *)this + 10);
  }
}

unint64_t RealDFileSubFileStream::tell32(RealDFileSubFileStream *this)
{
  unint64_t v3 = (*(uint64_t (**)(RealDFileSubFileStream *))(*(void *)this + 40))(this);
  if (HIDWORD(v3)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1154, (uint64_t)"dfutil/realdf", 59, (uint64_t)"%s", v1, v2, (char)&unk_2140A8F96);
  }
  return v3;
}

uint64_t RealDFileSubFileStream::eof(RealDFileSubFileStream *this)
{
  return *((unsigned __int8 *)this + 76);
}

uint64_t RealDFileSubFileStream::peekForChar(RealDFileSubFileStream *this)
{
  char v2 = *((unsigned char *)this + 76);
  uint64_t v3 = (*(uint64_t (**)(RealDFileSubFileStream *))(*(void *)this + 40))(this);
  char v6 = 0;
  if ((*(unsigned int (**)(RealDFileSubFileStream *, char *, uint64_t, void))(*(void *)this + 72))(this, &v6, 1, 0))
  {
    uint64_t v4 = v6;
    (*(void (**)(RealDFileSubFileStream *, uint64_t))(*(void *)this + 24))(this, v3);
  }
  else
  {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  *((unsigned char *)this + 76) = v2;
  return v4;
}

uint64_t RealDFileSubFileStream::basicCompressedRead(RealDFileSubFileStream *this, char *__dst, unsigned int a3)
{
  unsigned int v3 = *((_DWORD *)this + 29);
  unsigned int v4 = *((_DWORD *)this + 28) - v3;
  if (v4 >= a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    unint64_t v8 = v3 / 0x500000uLL;
    uint64_t v9 = *((void *)this + 12) + 16 * v8;
    uint64_t v10 = v3 % 0x500000;
    unsigned int v11 = *(_DWORD *)(v9 + 8) - v10;
    size_t v12 = v5 >= v11 ? v11 : v5;
    memcpy(__dst, (const void *)(*(void *)v9 + v10), v12);
    *((_DWORD *)this + 29) += v12;
    unsigned int v13 = v5 - v12;
    if (v5 != v12)
    {
      unsigned int v14 = v12 + v10;
      unsigned int v15 = v11 - v12;
      do
      {
        if (!v15 || v14 >= *(_DWORD *)(v9 + 8))
        {
          unsigned int v14 = 0;
          LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8 + 1;
          uint64_t v9 = *((void *)this + 12) + 16 * v8;
          unsigned int v15 = *(_DWORD *)(v9 + 8);
        }
        if (v13 >= v15) {
          size_t v16 = v15;
        }
        else {
          size_t v16 = v13;
        }
        memcpy(&__dst[v12], (const void *)(*(void *)v9 + v14), v16);
        LODWORD(v12) = v16 + v12;
        *((_DWORD *)this + 29) += v16;
        v15 -= v16;
        v14 += v16;
        v13 -= v16;
      }
      while (v13);
    }
  }
  return v5;
}

size_t RealDFileSubFileStream::readWithMode(RealDFileSubFileStream *this, char *a2, unsigned int a3, int a4)
{
  if (*((unsigned char *)this + 92)) {
    size_t v7 = RealDFileSubFileStream::basicCompressedRead(this, a2, a3);
  }
  else {
    size_t v7 = RealDFileSubFileStream::basicRead(this, a2, a3);
  }
  size_t v10 = v7;
  if (v7 < a3)
  {
    *((unsigned char *)this + 76) = 1;
    if (a4 == 1) {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1276, (uint64_t)"dfutil/realdf", 19, (uint64_t)"%.500s %.500s %u %u", v8, v9, *(unsigned char *)(*((void *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
    }
  }
  return v10;
}

void RealDFileSubFileStream::throwUnexpectedEof(RealDFileSubFileStream *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void RealDFileSubFileStream::writeBytes(RealDFileSubFileStream *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return;
  }
  if (!*((_DWORD *)this + 18))
  {
    uint64_t v11 = (*(uint64_t (**)(RealDFileSubFileStream *))(*(void *)this + 40))(this);
    (*(void (**)(RealDFileSubFileStream *, uint64_t))(*(void *)this + 24))(this, v11);
    *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
  }
  if (*((unsigned char *)this + 92))
  {
    uint64_t v12 = *((unsigned int *)this + 29);
    if ((v12 + (unint64_t)a3) >> 32)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1317, (uint64_t)"dfutil/realdf", 51, (uint64_t)"%.500s %.500s", a7, a8, *(unsigned char *)(*((void *)this + 5) + 152) + (*((_WORD *)this + 34) << 7));
      LODWORD(v12) = *((_DWORD *)this + 29);
    }
    int v13 = v12 + a3;
    unsigned int v14 = *((_DWORD *)this + 28);
    unsigned int v15 = v12 + a3 - v14;
    if ((int)v12 + (int)a3 <= v14) {
      goto LABEL_43;
    }
    unsigned int v16 = 5242880 * (v14 / 0x500000) - v14 + 5242880;
    uint64_t v17 = (uint64_t *)((char *)this + 96);
    unsigned int v18 = *((_DWORD *)this + 26);
    unsigned int v19 = v15 - v16;
    if (v15 >= v16)
    {
      uint64_t v21 = v18 - 1;
      uint64_t v22 = *v17 + 16 * v21;
      int v23 = *(_DWORD *)(v22 + 8);
      unsigned int v24 = *(_DWORD *)(v22 + 12);
      uint64_t v25 = (_DWORD *)(v22 + 8);
      unsigned int v26 = v23 + v16;
      if (v26 > v24)
      {
        DgnPrimArray<char>::reallocElts(*v17 + 16 * v21, v26 - v24, 1);
        unsigned int v26 = *v25 + v16;
        unsigned int v18 = *((_DWORD *)this + 26);
      }
      _DWORD *v25 = v26;
      unsigned int v27 = v19 / 0x500000;
      unsigned int v28 = v19 / 0x500000 + 1;
      unsigned int v29 = v18 + v28;
      unsigned int v30 = *((_DWORD *)this + 27);
      unsigned int v31 = v18;
      if (v18 + v28 > v30)
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 96, v18 + v28 - v30, 1);
        unsigned int v31 = *((_DWORD *)this + 26);
        unsigned int v29 = v31 + v28;
      }
      int v66 = v13;
      if (v31 <= v29)
      {
        if (v31 < v29)
        {
          unint64_t v34 = v29 - (unint64_t)v31;
          uint64_t v35 = 16 * v31;
          do
          {
            uint64_t v36 = (void *)(*v17 + v35);
            void *v36 = 0;
            v36[1] = 0;
            v35 += 16;
            --v34;
          }
          while (v34);
        }
      }
      else if ((int)v31 > (int)v29)
      {
        uint64_t v32 = (int)v31;
        uint64_t v33 = 16 * (int)v31 - 16;
        do
        {
          --v32;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*v17 + v33);
          v33 -= 16;
        }
        while (v32 > (int)v29);
      }
      unint64_t v37 = v19 % 0x500000;
      *((_DWORD *)this + 26) = v29;
      uint64_t v38 = v18 + v27;
      if (v18 < v38)
      {
        uint64_t v39 = 16 * v18;
        do
        {
          uint64_t v40 = *v17 + v39;
          if (*(_DWORD *)(v40 + 12) >> 20 <= 4u)
          {
            uint64_t v67 = 0;
            *(_DWORD *)(v40 + 12) = realloc_array(*(void **)v40, &v67, 0x500000uLL, *(unsigned int *)(v40 + 8), *(unsigned int *)(v40 + 8), 1);
            *(void *)uint64_t v40 = v67;
          }
          *(_DWORD *)(v40 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 5242880;
          v39 += 16;
          --v27;
        }
        while (v27);
      }
      uint64_t v41 = *v17;
      uint64_t v42 = v41 + 16 * v38;
      unsigned int v44 = *(_DWORD *)(v42 + 12);
      uint64_t v43 = (_DWORD *)(v42 + 12);
      if (v44 < v37)
      {
        uint64_t v45 = v41 + 16 * v38;
        uint64_t v67 = 0;
        *uint64_t v43 = realloc_array(*(void **)v45, &v67, v37, *(unsigned int *)(v45 + 8), *(unsigned int *)(v45 + 8), 1);
        *(void *)uint64_t v45 = v67;
      }
      *(_DWORD *)(v41 + 16 * v38 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v37;
      int v13 = v66;
      goto LABEL_42;
    }
    if (v18)
    {
LABEL_39:
      uint64_t v49 = v18 - 1;
      uint64_t v50 = *v17;
      uint64_t v51 = *v17 + 16 * v49;
      int v52 = *(_DWORD *)(v51 + 8);
      unsigned int v53 = *(_DWORD *)(v51 + 12);
      uint64_t v54 = (unsigned int *)(v51 + 8);
      unsigned int v55 = v52 + v15;
      if (v55 > v53)
      {
        DgnPrimArray<char>::reallocElts(v50 + 16 * v49, v55 - v53, 1);
        unsigned int v55 = *v54 + v15;
      }
      *uint64_t v54 = v55;
LABEL_42:
      *((_DWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
      LODWORD(v12) = *((_DWORD *)this + 29);
LABEL_43:
      unint64_t v56 = v12 / 0x500000uLL;
      uint64_t v57 = v12 % 0x500000;
      uint64_t v58 = *((void *)this + 12) + 16 * v56;
      unsigned int v59 = *(_DWORD *)(v58 + 8) - v57;
      if (a3 >= v59) {
        size_t v60 = v59;
      }
      else {
        size_t v60 = a3;
      }
      memcpy((void *)(*(void *)v58 + v57), a2, v60);
      *((_DWORD *)this + 29) += v60;
      unsigned int v61 = a3 - v60;
      if (a3 != v60)
      {
        unsigned int v62 = v60 + v57;
        unsigned int v63 = v59 - v60;
        uint64_t v64 = (unsigned int *)(v58 + 8);
        do
        {
          if (!v63 || v62 >= *v64)
          {
            unsigned int v62 = 0;
            LODWORD(v56) = v56 + 1;
            uint64_t v58 = *((void *)this + 12) + 16 * v56;
            unsigned int v63 = *(_DWORD *)(v58 + 8);
          }
          if (v61 >= v63) {
            size_t v65 = v63;
          }
          else {
            size_t v65 = v61;
          }
          uint64_t v64 = (unsigned int *)(v58 + 8);
          memcpy((void *)(*(void *)v58 + v62), &a2[v60], v65);
          LODWORD(v6MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v65 + v60;
          *((_DWORD *)this + 29) += v65;
          v63 -= v65;
          v62 += v65;
          v61 -= v65;
        }
        while (v61);
      }
      return;
    }
    unsigned int v18 = 1;
    if (*((_DWORD *)this + 27))
    {
      uint64_t v20 = 0;
    }
    else
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 96, 1, 1);
      uint64_t v20 = *((unsigned int *)this + 26);
      unsigned int v18 = v20 + 1;
      if (v20 == -1)
      {
LABEL_38:
        *((_DWORD *)this + 26) = v18;
        goto LABEL_39;
      }
    }
    uint64_t v46 = v18 - v20;
    uint64_t v47 = 16 * v20;
    do
    {
      uint64_t v48 = (void *)(*v17 + v47);
      *uint64_t v48 = 0;
      v48[1] = 0;
      v47 += 16;
      --v46;
    }
    while (v46);
    goto LABEL_38;
  }

  RealDFileSubFileStream::basicWrite(this, a2, a3, a4, a5, a6, a7, a8);
}

void RealDFileSubFileStream::flush(RealDFile **this)
{
}

void RealDFile::flushDFile(RealDFile *this)
{
  if (*((_DWORD *)this + 108))
  {
    OsFile::seekFromBegGrowWithZeros(*((OsFile **)this + 10), *((void *)this + 53));
    if (*((_WORD *)this + 46)) {
      EncryptBuffer(*((unsigned __int8 **)this + 51), *((_DWORD *)this + 108), *((unsigned __int16 *)this + 46), v2, v3, v4, v5, v6);
    }
    OsFile::writeBytes(*((OsFile **)this + 10), *((const char **)this + 51), *((unsigned int *)this + 108));
    *((_DWORD *)this + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  }
}

uint64_t RealDFileSubFileStream::beginCachedReadGroup(RealDFileSubFileStream *this, int a2, int a3, char a4)
{
  uint64_t result = (*(uint64_t (**)(RealDFileSubFileStream *))(*(void *)this + 40))(this);
  if ((a4 & 1) != 0 || (result & 0xFFF) == 0)
  {
    *((_DWORD *)this + 3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *((_DWORD *)this + 22);
    uint64_t v9 = *((void *)this + 5);
  }
  else
  {
    uint64_t v9 = *((void *)this + 5);
    unsigned int v10 = *((_DWORD *)this + 22) + 1;
    unsigned int v11 = *(_DWORD *)(v9 + 144);
    if (v11 > v10)
    {
      uint64_t v12 = (unsigned __int16 *)(*(void *)(v9 + 136) + 2 * v10);
      while (1)
      {
        int v13 = *v12++;
        if (v13 == *((unsigned __int16 *)this + 34)) {
          break;
        }
        if (v11 == ++v10)
        {
          unsigned int v10 = *(_DWORD *)(v9 + 144);
          break;
        }
      }
    }
    *((_DWORD *)this + 3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10;
  }
  *(_DWORD *)(v9 + 376) = a2;
  *(_DWORD *)(v9 + 38MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a3;
  *(unsigned char *)(v9 + 384) = a4;
  return result;
}

void RealDFileSubFileStream::endCachedReadGroup(RealDFileSubFileStream *this, unsigned int a2)
{
  *((_DWORD *)this + 3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = -1;
}

double RealDFile::endCachedReadGroup(RealDFile *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a3 < a4)
  {
    unsigned int v8 = a3;
    int v10 = *((_DWORD *)this + 54);
    do
    {
      uint64_t v11 = v8 + v10;
      if (v11 >= *((_DWORD *)this + 86)) {
        break;
      }
      uint64_t v12 = *(void *)(*((void *)this + 42) + 8 * v11);
      if (v12)
      {
        unsigned int v13 = *((_DWORD *)this + 90);
        if (v13 == *((_DWORD *)this + 91))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 352, 1, 1);
          unsigned int v13 = *((_DWORD *)this + 90);
        }
        *(void *)(*((void *)this + 44) + 8 * v13) = v12;
        *((_DWORD *)this + 9MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v13 + 1;
        *(void *)(*((void *)this + 42) + 8 * v11) = 0;
        int v14 = *((_DWORD *)this + 93) - 1;
        *((_DWORD *)this + 93) = v14;
        if (!v14)
        {
          *((_DWORD *)this + 92) = 0;
          if (a5) {
            goto LABEL_17;
          }
          goto LABEL_25;
        }
        if (*((_DWORD *)this + 92) == v11) {
          *((_DWORD *)this + 92) = v11 + 1;
        }
      }
      ++v8;
      unsigned int v15 = *((_DWORD *)this + 36);
      if (v15 > v8)
      {
        unsigned int v16 = (unsigned __int16 *)(*((void *)this + 17) + 2 * v8);
        while (1)
        {
          int v17 = *v16++;
          if (v17 == a2) {
            break;
          }
          if (v15 == ++v8)
          {
            unsigned int v8 = *((_DWORD *)this + 36);
            break;
          }
        }
      }
    }
    while (v8 < a4);
  }
  if (a5)
  {
LABEL_17:
    if (*((_DWORD *)this + 93) >= a5)
    {
      uint64_t v18 = *((unsigned int *)this + 86);
      if ((int)v18 >= 1)
      {
        uint64_t v19 = 8 * v18 - 8;
        do
        {
          DgnDelete<DgnPrimFixArray<char>>(*(void *)(*((void *)this + 42) + v19));
          *(void *)(*((void *)this + 42) + v19) = 0;
          v19 -= 8;
        }
        while (v19 != -8);
      }
      *((_DWORD *)this + 86) = 0;
      uint64_t v20 = *((unsigned int *)this + 90);
      if ((int)v20 >= 1)
      {
        uint64_t v21 = 8 * v20 - 8;
        do
        {
          DgnDelete<DgnPrimFixArray<char>>(*(void *)(*((void *)this + 44) + v21));
          *(void *)(*((void *)this + 44) + v21) = 0;
          v21 -= 8;
        }
        while (v21 != -8);
      }
      *((_DWORD *)this + 9MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
      *((void *)this + 46) = 0;
    }
  }
LABEL_25:
  *(void *)&double result = 0x1800000003;
  *((void *)this + 47) = 0x1800000003;
  *((unsigned char *)this + 384) = 1;
  return result;
}

uint64_t RealDFile::addBlock(RealDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8 = a2;
  uint64_t v10 = *((void *)this + 19);
  uint64_t v11 = a2;
  uint64_t v12 = v10 + ((unint64_t)a2 << 7);
  int v14 = *(_DWORD *)(v12 + 104);
  unsigned int v13 = (_DWORD *)(v12 + 104);
  uint64_t v15 = (v14 + 1);
  unsigned int v16 = *((_DWORD *)this + 36);
  if (v16 > v15)
  {
    int v17 = (unsigned __int16 *)(*((void *)this + 17) + 2 * v15);
    while (*v17++)
    {
      uint64_t v15 = (v15 + 1);
      if (v16 == v15)
      {
        uint64_t v15 = *((unsigned int *)this + 36);
        break;
      }
    }
  }
  if (*(unsigned char *)(gParDiagnosticDFileSimulateAddBlockFailure + 41))
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v19 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v19 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4464, (uint64_t)"dfutil/realdf", 5, (uint64_t)"%.500s", a7, a8, (char)v19);
    unsigned int v16 = *((_DWORD *)this + 36);
  }
  if (v15 == v16) {
    uint64_t v15 = RealDFile::addBlockSpace(this, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*((_DWORD *)this + 24) <= (int)v15) {
    *((_DWORD *)this + 24) = v15 + 1;
  }
  *(_WORD *)(*((void *)this + 17) + 2 * v15) = v8;
  *unsigned int v13 = v15;
  uint64_t v20 = v10 + (v11 << 7);
  int v22 = *(_DWORD *)(v20 + 100);
  uint64_t v21 = (_DWORD *)(v20 + 100);
  if (v22 == -1) {
    _DWORD *v21 = v15;
  }
  ++*(_DWORD *)(v10 + (v11 << 7) + 96);
  *((unsigned char *)this + 296) = 1;
  return v15;
}

void RealDFile::doWriteToCache(RealDFile *this, unint64_t a2, const char *a3, unsigned int a4)
{
  if (a4)
  {
    unsigned int v4 = a4;
    unint64_t v6 = a2;
    if (*((unsigned char *)this + 332))
    {
      (*(void (**)(RealDFile *, void))(*(void *)this + 64))(this, *((unsigned __int8 *)this + 385));
    }
    else
    {
      uint64_t v22 = *((unsigned int *)this + 82);
      if (v22)
      {
        unint64_t v23 = *((void *)this + 40);
        if (v23 <= a2) {
          unint64_t v24 = a2;
        }
        else {
          unint64_t v24 = *((void *)this + 40);
        }
        unint64_t v25 = v23 + v22;
        if (v25 >= a2 + a4) {
          unint64_t v25 = a2 + a4;
        }
        if (v25 > v24) {
          *((_DWORD *)this + 82) = 0;
        }
      }
    }
    uint64_t v8 = *((unsigned int *)this + 108);
    if (v8 {
      && ((unint64_t v9 = *((void *)this + 53), v9 <= v6) && v9 + v8 >= v6
    }
       || (RealDFile::flushDFile(this), LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((_DWORD *)this + 108), v8)))
    {
      unint64_t v10 = *((void *)this + 53);
    }
    else
    {
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      *((void *)this + 53) = v6;
      unint64_t v10 = v6;
    }
    unint64_t v11 = v6 - v10;
    unsigned int v12 = *((_DWORD *)this + 104) - (v6 - v10);
    if (v12 >= v4) {
      uint64_t v13 = v4;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = a3;
      unint64_t v16 = v11;
      do
      {
        char v17 = *v15++;
        *(unsigned char *)(*((void *)this + 51) + v16++) = v17;
        --v14;
      }
      while (v14);
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((_DWORD *)this + 108);
    }
    unsigned int v18 = v13 + v11;
    if (v8 < v18) {
      *((_DWORD *)this + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v18;
    }
    if (v12 < v4)
    {
      do
      {
        RealDFile::flushDFile(this);
        a3 += v13;
        v4 -= v13;
        unsigned int v19 = *((_DWORD *)this + 104);
        if (v4 >= v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = v4;
        }
        if (v20)
        {
          for (uint64_t i = 0; i != v20; ++i)
            *(unsigned char *)(*((void *)this + 51) + i) = a3[i];
        }
        v6 += v13;
        *((void *)this + 53) = v6;
        *((_DWORD *)this + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v20;
        LODWORD(v13) = v20;
      }
      while (v4 > v19);
    }
  }
}

ssize_t RealDFile::doReadFromCache(RealDFile *this, unint64_t a2, char *a3, ssize_t a4, int a5)
{
  ssize_t v6 = a4;
  uint64_t v10 = *((unsigned int *)this + 108);
  unint64_t v11 = a2 + a4;
  if (v10)
  {
    unint64_t v12 = *((void *)this + 53);
    if (v12 <= a2) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = *((void *)this + 53);
    }
    unint64_t v14 = v12 + v10;
    if (v14 >= v11) {
      unint64_t v14 = a2 + a4;
    }
    if (v14 > v13) {
      RealDFile::flushDFile(this);
    }
  }
  if (*((_DWORD *)this + 78) >= v6)
  {
    unint64_t v25 = *((void *)this + 40);
    if (v25 <= a2) {
      unint64_t v26 = a2;
    }
    else {
      unint64_t v26 = *((void *)this + 40);
    }
    unint64_t v27 = v25 + *((unsigned int *)this + 82);
    if (v27 >= v11) {
      unint64_t v27 = v11;
    }
    if (v27 <= v26) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = (v27 - v26);
    }
    if (v11 > v26 + v28 && v25 > a2) {
      size_t v30 = 0;
    }
    else {
      size_t v30 = v28;
    }
    if (v30) {
      memcpy(&a3[(v26 - a2)], (const void *)(*((void *)this + 38) + (v26 - v25)), v30);
    }
    unsigned int v31 = v6 - v30;
    if (v6 != v30)
    {
      if (v25 <= a2) {
        size_t v32 = v30;
      }
      else {
        size_t v32 = 0;
      }
      uint64_t v33 = &a3[v32];
      size_t v34 = v32 + a2;
      OsFile::seekFromBeg(*((OsFile **)this + 10), v32 + a2);
      uint64_t v40 = (OsFile *)*((void *)this + 10);
      if (a5)
      {
        unsigned int Bytes = OsFile::readBytes(v40, *((char **)this + 38), *((_DWORD *)this + 78), v35, v36, v37, v38, v39);
        *((_DWORD *)this + 82) = Bytes;
        if (Bytes >= v31) {
          size_t v47 = v31;
        }
        else {
          size_t v47 = Bytes;
        }
        DecryptBuffer(*((unsigned __int8 **)this + 38), Bytes, *((unsigned __int16 *)this + 46), v42, v43, v44, v45, v46);
        *((void *)this + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v34;
        memcpy(v33, *((const void **)this + 38), v47);
      }
      else
      {
        LODWORD(v47) = OsFile::readBytes(v40, v33, v31, v35, v36, v37, v38, v39);
        DecryptBuffer((unsigned __int8 *)v33, v47, *((unsigned __int16 *)this + 46), v48, v49, v50, v51, v52);
      }
      return (v47 + v30);
    }
  }
  else
  {
    OsFile::seekFromBeg(*((OsFile **)this + 10), a2);
    ssize_t v6 = OsFile::readBytes(*((OsFile **)this + 10), a3, v6, v15, v16, v17, v18, v19);
    DecryptBuffer((unsigned __int8 *)a3, v6, *((unsigned __int16 *)this + 46), v20, v21, v22, v23, v24);
  }
  return v6;
}

void RealDFile::RealDFile(RealDFile *this, const FileSpec *a2)
{
  DFile::DFile(this, a2);
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  uint64_t v4 = v3 + 152;
  *(_OWORD *)(v3 + 20MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  uint64_t v5 = v3 + 200;
  *(void *)uint64_t v3 = &unk_26C4E5830;
  *(_OWORD *)(v3 + 12MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  ssize_t v6 = (MrecTime *)(v3 + 220);
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  MrecTime::MrecTime((MrecTime *)(v3 + 220));
  MrecTime::MrecTime((RealDFile *)((char *)this + 244));
  DgnString::DgnString((RealDFile *)((char *)this + 272));
  *((void *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 7DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_WORD *)this + 46) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((void *)this + 5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 49) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 54) = 9;
  *((void *)this + 36) = 0x100000001;
  *((unsigned char *)this + 296) = 0;
  *((void *)this + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  MrecTime::MrecTime(v6);
  MrecTime::MrecTime((RealDFile *)((char *)this + 244));
  unsigned int v7 = *((_DWORD *)this + 40);
  if (v7 == *((_DWORD *)this + 41))
  {
    DgnArray<RealDFileDirEntry>::reallocElts(v4, 1, 1);
    unsigned int v7 = *((_DWORD *)this + 40);
  }
  unint64_t v8 = *((void *)this + 19) + ((unint64_t)v7 << 7);
  *(_OWORD *)(v8 + 11MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v8 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)unint64_t v8 = 0u;
  *(_WORD *)(v8 + 126) = -8454;
  ++*((_DWORD *)this + 40);
  unsigned int v9 = *((_DWORD *)this + 52);
  if (v9 == *((_DWORD *)this + 53))
  {
    DgnPrimArray<char>::reallocElts(v5, 1, 1);
    unsigned int v9 = *((_DWORD *)this + 52);
  }
  *(unsigned char *)(*((void *)this + 25) + v9) = 0;
  *((_DWORD *)this + 52) = v9 + 1;
  *((void *)this + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((_DWORD *)this + 82) = 0;
  *((unsigned char *)this + 332) = 0;
  *((_OWORD *)this + 23) = xmmword_2140A8F10;
  *((_WORD *)this + 192) = 257;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 297) = 0;
}

void sub_21400E358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll(v17);
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll(a12);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a11);
  DgnString::~DgnString(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12 + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12 + 168);
  DgnIArray<Utterance *>::~DgnIArray(v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12 + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12 + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v13);
  DFile::~DFile(v12);
  _Unwind_Resume(a1);
}

uint64_t *RealDFile::createReadOnlyClone(RealDFile *this)
{
  uint64_t v2 = MemChunkAlloc(0x1B8uLL, 0);
  uint64_t v3 = (void **)((char *)this + 16);
  RealDFile::RealDFile((RealDFile *)v2, (RealDFile *)((char *)this + 16));
  DFile::copyDFileState(v4, this);
  if (*(unsigned char *)(gParDiagnosticDFileSimulateOpenFailure + 41))
  {
    if (*((_DWORD *)this + 6)) {
      unsigned int v7 = *v3;
    }
    else {
      unsigned int v7 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1792, (uint64_t)"dfutil/realdf", 17, (uint64_t)"%.500s", v5, v6, (char)v7);
  }
  OsFile::openOsFile((RealDFile *)((char *)this + 16), 0);
  v2[10] = v10;
  if (!*((void *)this + 10))
  {
    if (*((_DWORD *)this + 6)) {
      unint64_t v11 = *v3;
    }
    else {
      unint64_t v11 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1794, (uint64_t)"dfutil/realdf", 17, (uint64_t)"%.500s", v8, v9, (char)v11);
  }
  *((unsigned char *)v2 + 332) = 1;
  *((_WORD *)v2 + 44) = *((_WORD *)this + 44);
  *(_DWORD *)((char *)v2 + 9MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_DWORD *)((char *)this + 90);
  *((_DWORD *)v2 + 24) = *((_DWORD *)this + 24);
  DgnPrimArray<int>::copyArraySlice((unint64_t)(v2 + 13), (uint64_t *)this + 13, 0, *((_DWORD *)this + 28));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(v2 + 15), (uint64_t *)this + 15, 0, *((_DWORD *)this + 32));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(v2 + 17), (uint64_t *)this + 17, 0, *((_DWORD *)this + 36));
  DgnArray<RealDFileDirEntry>::copyArraySlice((unint64_t)(v2 + 19), (void *)this + 19, 0, *((_DWORD *)this + 40));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(v2 + 21), (uint64_t *)this + 21, 0, *((_DWORD *)this + 44));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(v2 + 23), (uint64_t *)this + 23, 0, *((_DWORD *)this + 48));
  DgnPrimArray<BOOL>::copyArraySlice((unint64_t)(v2 + 25), (uint64_t *)this + 25, 0, *((_DWORD *)this + 52));
  *((_DWORD *)v2 + 54) = *((_DWORD *)this + 54);
  MrecTime::operator=((uint64_t)v2 + 220, (uint64_t)this + 220);
  MrecTime::operator=((uint64_t)v2 + 244, (uint64_t)this + 244);
  DgnString::operator=((DgnString *)(v2 + 34), (RealDFile *)((char *)this + 272));
  v2[36] = *((void *)this + 36);
  *((_WORD *)v2 + 14DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((_WORD *)this + 148);
  return v2;
}

void RealDFile::~RealDFile(OsFile **this)
{
  *this = (OsFile *)&unk_26C4E5830;
  if (this[10])
  {
    if (!*((unsigned char *)this + 48))
    {
      RealDFile::flushDFile((RealDFile *)this);
      RealDFile::addRemainingDirEntryBlocks((uint64_t)this, v2, v3, v4, v5, v6, v7, v8);
      RealDFile::addRemainingBlockUsageBlocks((uint64_t)this, v9, v10, v11, v12, v13, v14, v15);
      RealDFile::shrinkInternalUsage((RealDFile *)this);
    }
    if (*((unsigned char *)this + 296)) {
      RealDFile::writeHeader((RealDFile *)this);
    }
    *((_DWORD *)this + 82) = 0;
    if (!*((unsigned char *)this + 48))
    {
      uint64_t v43 = 0;
      int v16 = realloc_array(0, &v43, 0x1000uLL, 0, 0, 1);
      uint64_t v17 = (const char *)v43;
      uint64_t v40 = v43;
      int v41 = 4096;
      int v42 = v16;
      bzero(v43, 0x1000uLL);
      unsigned int v18 = *((_DWORD *)this + 40);
      if (v18 < 2)
      {
        unsigned int v20 = 0;
        unsigned int v19 = 0;
      }
      else
      {
        unsigned int v19 = 0;
        unsigned int v20 = 0;
        unsigned __int16 v21 = 1;
        do
        {
          unsigned __int16 v22 = v21;
          uint64_t v23 = (_DWORD *)((char *)this[19] + 128 * (unint64_t)v21);
          if (v23[24]) {
            BOOL v24 = v23[25] == -1;
          }
          else {
            BOOL v24 = 1;
          }
          if (!v24)
          {
            unsigned int v27 = v23[27];
            unint64_t v26 = v23 + 27;
            unsigned int v25 = v27;
            uint64_t v28 = *(v26 - 1);
            OsFile::seekFromBeg(this[10], v27 + ((*((unsigned int *)this + 54) + v28) << 12));
            OsFile::writeBytes(this[10], v17, (4096 - *v26));
            if (v28 >= v19) {
              unsigned int v20 = v25;
            }
            if (v28 > v19) {
              unsigned int v19 = v28;
            }
            unsigned int v18 = *((_DWORD *)this + 40);
          }
          unsigned __int16 v21 = v22 + 1;
        }
        while (v18 > (unsigned __int16)(v22 + 1));
      }
      uint64_t v29 = *((unsigned int *)this + 32);
      if (v29)
      {
        uint64_t v30 = 0;
        while (*((_DWORD *)this[15] + v30) != -1)
        {
          if (v29 == ++v30)
          {
            LODWORD(v3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *((_DWORD *)this + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
      }
      uint64_t v31 = *((unsigned int *)this + 28);
      if (v31)
      {
        uint64_t v32 = 0;
        while (*((_DWORD *)this[13] + v32) != -1)
        {
          if (v31 == ++v32)
          {
            LODWORD(v32) = *((_DWORD *)this + 28);
            break;
          }
        }
      }
      else
      {
        LODWORD(v32) = 0;
      }
      if (v30)
      {
        unsigned int v33 = *((_DWORD *)this[15] + (v30 - 1));
        if (v33 > v19)
        {
          unsigned int v20 = 4096;
          unsigned int v19 = v33;
        }
      }
      if (v32 && *((_DWORD *)this[13] + (v32 - 1)) > v19) {
        unsigned int v20 = 4096;
      }
      uint64_t v34 = *((unsigned int *)this + 54);
      int v35 = *((_DWORD *)this + 24);
      if (v35) {
        unint64_t v36 = ((unint64_t)(v35 - 1) << 12) + v20;
      }
      else {
        unint64_t v36 = 0;
      }
      OsFile::seekToEnd(this[10]);
      uint64_t v37 = OsFile::tell(this[10]);
      int v38 = v37;
      off_t v39 = v36 + (v34 << 12);
      if (v37 != v39)
      {
        OsFile::seekFromBeg(this[10], v39);
        OsFile::writeBytes(this[10], v17, (v38 - v39));
      }
      OsFile::seekFromBeg(this[10], 32);
      LODWORD(v43) = -307429618;
      OsFile::writeBytes(this[10], (const char *)&v43, 4uLL);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v40);
    }
    DgnDelete<OsFile>(this[10]);
    this[10] = 0;
  }
  *((unsigned char *)this + 297) = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(this + 51));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 49));
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll((uint64_t)(this + 44));
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll((uint64_t)(this + 42));
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(this + 38));
  DgnString::~DgnString((DgnString *)(this + 34));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 25));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 23));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 21));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 19));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 17));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 15));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 13));
  DFile::~DFile((DFile *)this);
}

{
  uint64_t vars8;

  RealDFile::~RealDFile(this);

  JUMPOUT(0x216698730);
}

uint64_t RealDFile::addRemainingDirEntryBlocks(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = this;
  if (*(_DWORD *)(this + 176))
  {
    unint64_t v9 = 0;
    this = 0;
    do
    {
      unsigned int v10 = *(_DWORD *)(v8 + 144);
      if (v10 > this)
      {
        uint64_t v11 = (unsigned __int16 *)(*(void *)(v8 + 136) + 2 * this);
        while (*v11++)
        {
          this = (this + 1);
          if (v10 == this) {
            goto LABEL_9;
          }
        }
      }
      if (this == v10) {
LABEL_9:
      }
        this = RealDFile::addBlockSpace((RealDFile *)v8, a2, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(*(void *)(v8 + 104) + 4 * *(unsigned int *)(*(void *)(v8 + 168) + 4 * v9)) = this;
      *(_WORD *)(*(void *)(v8 + 136) + 2 * this) = -2;
      if (*(_DWORD *)(v8 + 96) < (this + 1)) {
        *(_DWORD *)(v8 + 96) = this + 1;
      }
      ++v9;
    }
    while (v9 < *(unsigned int *)(v8 + 176));
  }
  *(_DWORD *)(v8 + 176) = 0;
  return this;
}

uint64_t RealDFile::addRemainingBlockUsageBlocks(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = this;
  if (*(_DWORD *)(this + 192))
  {
    unint64_t v9 = 0;
    this = 0;
    do
    {
      unsigned int v10 = *(_DWORD *)(v8 + 144);
      if (v10 > this)
      {
        uint64_t v11 = (unsigned __int16 *)(*(void *)(v8 + 136) + 2 * this);
        while (*v11++)
        {
          this = (this + 1);
          if (v10 == this) {
            goto LABEL_9;
          }
        }
      }
      if (this == v10) {
LABEL_9:
      }
        this = RealDFile::addBlockSpace((RealDFile *)v8, a2, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(*(void *)(v8 + 120) + 4 * *(unsigned int *)(*(void *)(v8 + 184) + 4 * v9)) = this;
      *(_WORD *)(*(void *)(v8 + 136) + 2 * this) = -1;
      if (*(_DWORD *)(v8 + 96) < (this + 1)) {
        *(_DWORD *)(v8 + 96) = this + 1;
      }
      ++v9;
    }
    while (v9 < *(unsigned int *)(v8 + 192));
  }
  *(_DWORD *)(v8 + 192) = 0;
  return this;
}

void RealDFile::shrinkInternalUsage(RealDFile *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 136);
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = *((unsigned int *)this + 36);
    if (v5)
    {
      uint64_t v6 = v5 - 1;
      int v7 = *((_DWORD *)this + 36);
      while (v6 != -1)
      {
        int v8 = *(unsigned __int16 *)(*v2 + 2 * v6--);
        --v7;
        if (v8) {
          goto LABEL_8;
        }
      }
      int v7 = -1;
LABEL_8:
      unsigned int v9 = (v7 + 2046) / 0x7FEu;
      unsigned int v10 = 2046 * v9;
      if (2046 * v9 < v5)
      {
        unsigned int v11 = *((_DWORD *)this + 32);
        if (v11 > v9)
        {
          uint64_t v12 = (_DWORD *)(*((void *)this + 15) + 4 * (v11 - 1));
          do
          {
            uint64_t v13 = *v12;
            if (v13 != -1)
            {
              *(_WORD *)(*v2 + 2 * v13) = 0;
              _DWORD *v12 = -1;
            }
            --v12;
            --v11;
          }
          while (v9 < v11);
        }
        unsigned int v14 = *((_DWORD *)this + 37);
        if (v10 > v14) {
          DgnPrimArray<short>::reallocElts((uint64_t)v2, v10 - v14, 0);
        }
        *((_DWORD *)this + 36) = v10;
        *((unsigned char *)this + 296) = 1;
      }
    }
    unint64_t v15 = *((unsigned int *)this + 32);
    if (v15)
    {
      LODWORD(v16) = 0;
      unint64_t v17 = 0;
      uint64_t v18 = *((void *)this + 15);
      do
      {
        uint64_t v19 = *(unsigned int *)(v18 + 4 * v17);
        if (v19 == -1) {
          break;
        }
        unsigned int v20 = *((_DWORD *)this + 36);
        int v21 = v20 - v16;
        if (v20 <= v16) {
          break;
        }
        uint64_t v22 = *v2;
        uint64_t v16 = v16;
        while (*(_WORD *)(v22 + 2 * v16))
        {
          ++v16;
          if (!--v21) {
            goto LABEL_28;
          }
        }
        if (v19 > v16)
        {
          *(_WORD *)(v22 + 2 * v16) = *(_WORD *)(v22 + 2 * v19);
          *(_WORD *)(v22 + 2 * v19) = 0;
          *(_DWORD *)(v18 + 4 * v17) = v16;
          *((unsigned char *)this + 296) = 1;
          unint64_t v15 = *((unsigned int *)this + 32);
        }
        ++v17;
      }
      while (v17 < v15);
    }
LABEL_28:
    unint64_t v23 = *((unsigned int *)this + 28);
    if (v23)
    {
      unint64_t v24 = 0;
      unint64_t v25 = 0;
      uint64_t v26 = *((void *)this + 13);
      do
      {
        unint64_t v27 = *(unsigned int *)(v26 + 4 * v25);
        if (v27 == -1) {
          break;
        }
        unint64_t v28 = *((unsigned int *)this + 36);
        if (v24 < v28)
        {
          while (*(_WORD *)(*v2 + 2 * v24))
          {
            if (v28 == ++v24)
            {
              unint64_t v24 = *((unsigned int *)this + 36);
              goto LABEL_36;
            }
          }
          unint64_t v24 = v24;
        }
LABEL_36:
        if (v24 >= *((unsigned int *)this + 40)) {
          break;
        }
        if (v24 < v27)
        {
          uint64_t v29 = *((void *)this + 17);
          *(_WORD *)(v29 + 2 * v24) = *(_WORD *)(v29 + 2 * v27);
          *(_WORD *)(v29 + 2 * v27) = 0;
          *(_DWORD *)(v26 + 4 * v25) = v24;
          *((unsigned char *)this + 296) = 1;
          unint64_t v23 = *((unsigned int *)this + 28);
        }
        ++v25;
      }
      while (v25 < v23);
    }
    char v3 = 0;
  }
  while ((v4 & 1) != 0);
  uint64_t v30 = *((unsigned int *)this + 36);
  if (v30)
  {
    uint64_t v31 = 0;
    int v32 = 0;
    do
    {
      if (*(_WORD *)(*v2 + 2 * v31)) {
        int v32 = v31;
      }
      ++v31;
    }
    while (v30 != v31);
    unsigned int v33 = v32 + 1;
  }
  else
  {
    unsigned int v33 = 1;
  }
  if (v33 < *((_DWORD *)this + 24))
  {
    *((_DWORD *)this + 24) = v33;
    OsFile::shrinkSize(*((OsFile **)this + 10), (*((unsigned int *)this + 54) + (unint64_t)v33) << 12);
    *((unsigned char *)this + 296) = 1;
  }
}

void RealDFile::writeHeader(RealDFile *this)
{
  v50[2] = *(void **)MEMORY[0x263EF8340];
  int v2 = *((unsigned __int16 *)this + 46);
  *((_WORD *)this + 46) = 0;
  OsFile::seekFromBeg(*((OsFile **)this + 10), 0);
  uint64_t v46 = this;
  uint64_t v47 = 0;
  char v48 = 1;
  v50[0] = 0;
  int v45 = realloc_array(0, v50, 0x600uLL, 0, 0, 1);
  uint64_t v43 = (char *)v50[0];
  int v44 = 1536;
  bzero(v50[0], 0x600uLL);
  snprintf((char *)v50, 0x10uLL, "DFILE v%u", *((unsigned __int16 *)this + 44));
  unint64_t v3 = strlen((const char *)v50);
  if (v3 <= 0xF) {
    bzero((char *)v50 + v3, 16 - v3);
  }
  RealDFile::doWriteToCache(this, 0, (const char *)v50, 0x10u);
  LOWORD(v41) = *((_WORD *)this + 44);
  RealDFile::doWriteToCache(this, 0x10uLL, (const char *)&v41, 2u);
  LOWORD(v41) = *((_WORD *)this + 45);
  RealDFile::doWriteToCache(this, 0x12uLL, (const char *)&v41, 2u);
  LOWORD(v41) = v2;
  RealDFile::doWriteToCache(this, 0x14uLL, (const char *)&v41, 2u);
  uint64_t v47 = 22;
  LOWORD(v41) = -2;
  RealDFile::doWriteToCache(this, 0x16uLL, (const char *)&v41, 2u);
  LODWORD(v41) = 4096;
  RealDFile::doWriteToCache(this, 0x18uLL, (const char *)&v41, 4u);
  LODWORD(v41) = *((_DWORD *)this + 24);
  RealDFile::doWriteToCache(this, 0x1CuLL, (const char *)&v41, 4u);
  LODWORD(v41) = -758187298;
  RealDFile::doWriteToCache(this, 0x20uLL, (const char *)&v41, 4u);
  uint64_t v47 = 36;
  LODWORD(v41) = *((_DWORD *)this + 72);
  RealDFile::doWriteToCache(this, 0x24uLL, (const char *)&v41, 4u);
  MrecTime::setToCurrentLocalTime((RealDFile *)((char *)this + 244));
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v49 = 0;
  unint64_t v4 = realloc_array(0, (void **)&v49, 0x18uLL, 0, 0, 1);
  int v41 = (char *)v49;
  LODWORD(v42) = 6;
  HIDWORD(v42) = v4 >> 2;
  MrecTime::packLittleEndMrecTime((unsigned int *)this + 55, v49);
  if (v42)
  {
    uint64_t v5 = (4 * v42);
    RealDFile::doWriteToCache(this, 0x28uLL, v41, 4 * v42);
    unint64_t v6 = v5 + 40;
    uint64_t v47 = v6;
  }
  else
  {
    unint64_t v6 = 40;
  }
  MrecTime::packLittleEndMrecTime((unsigned int *)this + 61, (unsigned int *)v41);
  if (v42)
  {
    unsigned int v7 = 4 * v42;
    RealDFile::doWriteToCache(this, v6, v41, 4 * v42);
    v6 += v7;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v41);
  if (v6 != 88) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v8, v9, v6);
  }
  RealDFile::doWriteToCache(this, v6, v43, 0xA8u);
  uint64_t v47 = v6 + 168;
  if (v6 != 88) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v10, v11, v6 - 88);
  }
  DgnString::DgnString((DgnString *)&v41);
  DgnString::preAllocate((unint64_t)&v41, 256);
  GetFullMrecDescription((DgnString *)&v41);
  int v12 = v42;
  uint64_t Buffer = DgnString::getBuffer((DgnString *)&v41, 0x100u);
  unsigned int v14 = (unsigned __int8 *)Buffer;
  LODWORD(v15) = v12 - 1;
  if (!v12) {
    LODWORD(v15) = 0;
  }
  if (v15 >= 0xFF) {
    uint64_t v15 = 255;
  }
  else {
    uint64_t v15 = v15;
  }
  bzero((void *)(Buffer + v15), (256 - v15));
  EncryptBuffer(v14, 0x100u, v2, v16, v17, v18, v19, v20);
  RealDFile::doWriteToCache(this, v6 + 168, (const char *)v14, 0x100u);
  DgnString::~DgnString((DgnString *)&v41);
  if (v6 != 88) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v21, v22, v6 - 88);
  }
  RealDFile::doWriteToCache(this, v6 + 424, v43, 0x600u);
  unint64_t v25 = v6 + 1960;
  uint64_t v47 = v25;
  if (v25 != 2048) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v23, v24, v25);
  }
  uint64_t v49 = 0;
  unint64_t v26 = realloc_array(0, (void **)&v49, 0x83F8uLL, 0, 0, 1);
  unint64_t v27 = 0;
  unint64_t v28 = v49;
  int v41 = (char *)v49;
  LODWORD(v42) = 8446;
  HIDWORD(v42) = v26 >> 2;
  do
    v28[v27] = -1;
  while (v27++ < 0x20FD);
  int v30 = *((_DWORD *)this + 28);
  if (!v30
    || (unsigned int v31 = 4 * v30,
        RealDFile::doWriteToCache(this, v25, *((const char **)this + 13), 4 * v30),
        v25 += v31,
        int v30 = *((_DWORD *)this + 28),
        v30 != 256))
  {
    unsigned int v34 = 1024 - 4 * v30;
    RealDFile::doWriteToCache(this, v25, v41, v34);
    v25 += v34;
    uint64_t v47 = v25;
  }
  if (v25 != 3072) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v32, v33, v25);
  }
  LODWORD(v49) = -307429602;
  RealDFile::doWriteToCache(this, v25, (const char *)&v49, 4u);
  unint64_t v35 = v25 + 4;
  int v36 = *((_DWORD *)this + 32);
  if (!v36
    || (unsigned int v37 = 4 * v36,
        RealDFile::doWriteToCache(this, v35, *((const char **)this + 15), 4 * v36),
        v35 += v37,
        int v36 = *((_DWORD *)this + 32),
        v36 != 8446))
  {
    unsigned int v38 = 33784 - 4 * v36;
    RealDFile::doWriteToCache(this, v35, v41, v38);
    v35 += v38;
  }
  LODWORD(v49) = -307429602;
  RealDFile::doWriteToCache(this, v35, (const char *)&v49, 4u);
  uint64_t v47 = v35 + 4;
  if (v35 != 36860) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v39, v40, v35 + 4);
  }
  RealDFile::writeDirEntries((uint64_t)this, (uint64_t)&v46);
  RealDFile::writeBlockUsage((uint64_t)this, (uint64_t)&v46);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v41);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
  RealDFile::flushDFile(this);
  *((_WORD *)this + 46) = v2;
  *((unsigned char *)this + 296) = 0;
}

void sub_21400F364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void RealDFile::printSize(RealDFile *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2048, (DgnString *)&v273);
  if (v274) {
    uint64_t v16 = (void *)v273;
  }
  else {
    uint64_t v16 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A8F96, a3, &unk_2140A8F96, v16);
  DgnString::~DgnString((DgnString *)&v273);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A8F96);
  unint64_t v272 = 0;
  unint64_t v273 = 0;
  uint64_t v21 = (a3 + 1);
  unint64_t v271 = 0;
  DFile::printSize(this, 0xFFFFFFFFLL, v21, &v273, &v272, &v271);
  *a4 += v273;
  *a5 += v272;
  *a6 += v271;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v22 = 4;
  }
  else {
    uint64_t v22 = 8;
  }
  uint64_t v23 = *((void *)this + 10);
  if (v23)
  {
    uint64_t v24 = OsFile::sizeObject(v23, 0) + v22;
    uint64_t v25 = *((void *)this + 10);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v22 = 4;
    }
    else {
      uint64_t v22 = 8;
    }
    if (v25 && (v22 += OsFile::sizeObject(v25, 1), (uint64_t v26 = *((void *)this + 10)) != 0)) {
      uint64_t v27 = OsFile::sizeObject(v26, 3);
    }
    else {
      uint64_t v27 = 0;
    }
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v24 = v22;
  }
  uint64_t v270 = a3;
  uint64_t v28 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2050, (DgnString *)&v273);
  if (v274) {
    uint64_t v33 = (void *)v273;
  }
  else {
    uint64_t v33 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, v21, &unk_2140A8F96, v28, v28, v33, v24, v22, v27);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v24;
  *a5 += v22;
  *a6 += v27;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    unsigned int v38 = (void *)v273;
  }
  else {
    unsigned int v38 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v21, &unk_2140A8F96, v28, v28, v38, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v43 = (void *)v273;
  }
  else {
    uint64_t v43 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v21, &unk_2140A8F96, v28, v28, v43, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    char v48 = (void *)v273;
  }
  else {
    char v48 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v21, &unk_2140A8F96, v28, v28, v48, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    unsigned int v53 = (void *)v273;
  }
  else {
    unsigned int v53 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, v21, &unk_2140A8F96, v28, v28, v53, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v54 = 12;
  }
  else {
    uint64_t v54 = 16;
  }
  uint64_t v55 = *((unsigned int *)this + 28);
  unsigned int v56 = *((_DWORD *)this + 29);
  if (v56 >= v55)
  {
    uint64_t v57 = 0;
    if ((int)v55 > 0) {
      v54 += 4 * (v55 - 1) + 4;
    }
    uint64_t v58 = v54 + 4 * (v56 - v55);
  }
  else
  {
    uint64_t v57 = 4 * v55;
    uint64_t v58 = v54;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    unsigned int v63 = (void *)v273;
  }
  else {
    unsigned int v63 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v21, &unk_2140A8F96, v28, v28, v63, v58, v54, v57);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v58;
  *a5 += v54;
  *a6 += v57;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 12;
  }
  else {
    uint64_t v64 = 16;
  }
  uint64_t v65 = *((unsigned int *)this + 32);
  unsigned int v66 = *((_DWORD *)this + 33);
  if (v66 >= v65)
  {
    uint64_t v67 = 0;
    if ((int)v65 > 0) {
      v64 += 4 * (v65 - 1) + 4;
    }
    uint64_t v68 = v64 + 4 * (v66 - v65);
  }
  else
  {
    uint64_t v67 = 4 * v65;
    uint64_t v68 = v64;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v73 = (void *)v273;
  }
  else {
    uint64_t v73 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, v21, &unk_2140A8F96, v28, v28, v73, v68, v64, v67);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v68;
  *a5 += v64;
  *a6 += v67;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v74 = 12;
  }
  else {
    uint64_t v74 = 16;
  }
  uint64_t v75 = *((unsigned int *)this + 36);
  unsigned int v76 = *((_DWORD *)this + 37);
  if (v76 >= v75)
  {
    uint64_t v77 = 0;
    if ((int)v75 > 0) {
      uint64_t v74 = (v74 | 2) + 2 * (v75 - 1);
    }
    uint64_t v78 = v74 + 2 * (v76 - v75);
  }
  else
  {
    uint64_t v77 = 2 * v75;
    uint64_t v78 = v74;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v83 = (void *)v273;
  }
  else {
    uint64_t v83 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &unk_2140A8F96, v28, v28, v83, v78, v74, v77);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v78;
  *a5 += v74;
  *a6 += v77;
  uint64_t v84 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v84 = 16;
  }
  uint64_t v85 = *((unsigned int *)this + 40);
  uint64_t v86 = v85 << 7;
  if ((int)v85 <= 0) {
    uint64_t v86 = 0;
  }
  uint64_t v87 = v86 | v84;
  unint64_t v88 = (v86 | v84) + ((unint64_t)(*((_DWORD *)this + 41) - v85) << 7);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v93 = (void *)v273;
  }
  else {
    uint64_t v93 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v21, &unk_2140A8F96, v28, v28, v93, v88, v87, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v88;
  *a5 += v87;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v94 = 12;
  }
  else {
    uint64_t v94 = 16;
  }
  uint64_t v95 = *((unsigned int *)this + 44);
  unsigned int v96 = *((_DWORD *)this + 45);
  if (v96 >= v95)
  {
    uint64_t v97 = 0;
    if ((int)v95 > 0) {
      v94 += 4 * (v95 - 1) + 4;
    }
    uint64_t v98 = v94 + 4 * (v96 - v95);
  }
  else
  {
    uint64_t v97 = 4 * v95;
    uint64_t v98 = v94;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v103 = (void *)v273;
  }
  else {
    uint64_t v103 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v21, &unk_2140A8F96, v28, v28, v103, v98, v94, v97);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v98;
  *a5 += v94;
  *a6 += v97;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v104 = 12;
  }
  else {
    uint64_t v104 = 16;
  }
  uint64_t v105 = *((unsigned int *)this + 48);
  unsigned int v106 = *((_DWORD *)this + 49);
  if (v106 >= v105)
  {
    uint64_t v107 = 0;
    if ((int)v105 > 0) {
      v104 += 4 * (v105 - 1) + 4;
    }
    uint64_t v108 = v104 + 4 * (v106 - v105);
  }
  else
  {
    uint64_t v107 = 4 * v105;
    uint64_t v108 = v104;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    char v113 = (void *)v273;
  }
  else {
    char v113 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v21, &unk_2140A8F96, v28, v28, v113, v108, v104, v107);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v108;
  *a5 += v104;
  *a6 += v107;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v114 = 12;
  }
  else {
    uint64_t v114 = 16;
  }
  int v115 = *((_DWORD *)this + 52);
  unsigned int v116 = *((_DWORD *)this + 53);
  BOOL v117 = v116 >= v115;
  uint64_t v118 = v116 - v115;
  if (v117)
  {
    uint64_t v120 = v115 & ~(v115 >> 31);
    int v115 = 0;
    uint64_t v119 = v114 + v120;
    v114 += v120 + v118;
  }
  else
  {
    uint64_t v119 = v114;
  }
  uint64_t v121 = v115;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    unint64_t v126 = (void *)v273;
  }
  else {
    unint64_t v126 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, v21, &unk_2140A8F96, v28, v28, v126, v114, v119, v121);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v114;
  *a5 += v119;
  *a6 += v121;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v131 = (void *)v273;
  }
  else {
    uint64_t v131 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, v21, &unk_2140A8F96, v28, v28, v131, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v136 = (void *)v273;
  }
  else {
    uint64_t v136 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v21, &unk_2140A8F96, v28, v28, v136, 24, 24, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 24;
  *a5 += 24;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v141 = (void *)v273;
  }
  else {
    uint64_t v141 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v21, &unk_2140A8F96, v28, v28, v141, 24, 24, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 24;
  *a5 += 24;
  uint64_t v142 = sizeObject((char *)this + 272);
  uint64_t v143 = sizeObject((char *)this + 272);
  uint64_t v144 = sizeObject((char *)this + 272);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v149 = (void *)v273;
  }
  else {
    uint64_t v149 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_2140A8F96, v28, v28, v149, v142, v143, v144);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v142;
  *a5 += v143;
  *a6 += v144;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v154 = (void *)v273;
  }
  else {
    uint64_t v154 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v150, v151, v152, v153, v21, &unk_2140A8F96, v28, v28, v154, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v159 = (void *)v273;
  }
  else {
    uint64_t v159 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v155, v156, v157, v158, v21, &unk_2140A8F96, v28, v28, v159, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    unint64_t v164 = (void *)v273;
  }
  else {
    unint64_t v164 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v21, &unk_2140A8F96, v28, v28, v164, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v169 = (void *)v273;
  }
  else {
    uint64_t v169 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v21, &unk_2140A8F96, v28, v28, v169, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  uint64_t v170 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v170 = 12;
  }
  uint64_t v171 = v170 + (*((_DWORD *)this + 78) & ~(*((int *)this + 78) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    long long v176 = (void *)v273;
  }
  else {
    long long v176 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v21, &unk_2140A8F96, v28, v28, v176, v171, v171, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v171;
  *a5 += v171;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    char v181 = (void *)v273;
  }
  else {
    char v181 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v21, &unk_2140A8F96, v28, v28, v181, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v186 = (void *)v273;
  }
  else {
    uint64_t v186 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v182, v183, v184, v185, v21, &unk_2140A8F96, v28, v28, v186, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v191 = (void *)v273;
  }
  else {
    uint64_t v191 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v21, &unk_2140A8F96, v28, v28, v191, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  uint64_t fixed = sizeObject<DgnPrimFixArray<char> *>((uint64_t)this + 336, 0);
  uint64_t v193 = sizeObject<DgnPrimFixArray<char> *>((uint64_t)this + 336, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v198 = (void *)v273;
  }
  else {
    uint64_t v198 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v194, v195, v196, v197, v21, &unk_2140A8F96, v28, v28, v198, fixed, v193, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += fixed;
  *a5 += v193;
  uint64_t v199 = sizeObject<DgnPrimFixArray<char> *>((uint64_t)this + 352, 0);
  uint64_t v200 = sizeObject<DgnPrimFixArray<char> *>((uint64_t)this + 352, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v205 = (void *)v273;
  }
  else {
    uint64_t v205 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v201, v202, v203, v204, v21, &unk_2140A8F96, v28, v28, v205, v199, v200, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v199;
  *a5 += v200;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    int v210 = (void *)v273;
  }
  else {
    int v210 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v206, v207, v208, v209, v21, &unk_2140A8F96, v28, v28, v210, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v215 = (void *)v273;
  }
  else {
    uint64_t v215 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v211, v212, v213, v214, v21, &unk_2140A8F96, v28, v28, v215, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v220 = (void *)v273;
  }
  else {
    uint64_t v220 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v216, v217, v218, v219, v21, &unk_2140A8F96, v28, v28, v220, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    int v225 = (void *)v273;
  }
  else {
    int v225 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v221, v222, v223, v224, v21, &unk_2140A8F96, v28, v28, v225, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v230 = (void *)v273;
  }
  else {
    uint64_t v230 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v21, &unk_2140A8F96, v28, v28, v230, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v235 = (void *)v273;
  }
  else {
    uint64_t v235 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v231, v232, v233, v234, v21, &unk_2140A8F96, v28, v28, v235, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v273);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v236 = 12;
  }
  else {
    uint64_t v236 = 16;
  }
  int v237 = *((_DWORD *)this + 100);
  unsigned int v238 = *((_DWORD *)this + 101);
  BOOL v117 = v238 >= v237;
  uint64_t v239 = v238 - v237;
  if (v117)
  {
    uint64_t v241 = v237 & ~(v237 >> 31);
    int v237 = 0;
    uint64_t v240 = v236 + v241;
    v236 += v241 + v239;
  }
  else
  {
    uint64_t v240 = v236;
  }
  uint64_t v242 = v237;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    unint64_t v247 = (void *)v273;
  }
  else {
    unint64_t v247 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v243, v244, v245, v246, v21, &unk_2140A8F96, v28, v28, v247, v236, v240, v242);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v236;
  *a5 += v240;
  *a6 += v242;
  uint64_t v248 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v248 = 12;
  }
  uint64_t v249 = v248 + (*((_DWORD *)this + 104) & ~(*((int *)this + 104) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v254 = (void *)v273;
  }
  else {
    uint64_t v254 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v21, &unk_2140A8F96, v28, v28, v254, v249, v249, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += v249;
  *a5 += v249;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v259 = (void *)v273;
  }
  else {
    uint64_t v259 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v255, v256, v257, v258, v21, &unk_2140A8F96, v28, v28, v259, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2052, (DgnString *)&v273);
  if (v274) {
    uint64_t v264 = (void *)v273;
  }
  else {
    uint64_t v264 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v21, &unk_2140A8F96, v28, v28, v264, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v273);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2060, (DgnString *)&v273);
  if (v274) {
    uint64_t v269 = (void *)v273;
  }
  else {
    uint64_t v269 = &unk_2140A8F96;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v265, v266, v267, v268, v270, &unk_2140A8F96, (35 - v270), (35 - v270), v269, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v273);
}

void sub_214010788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnPrimFixArray<char> *>(uint64_t a1, int a2)
{
  uint64_t v2 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 8;
  }
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t result = 12;
  }
  else {
    uint64_t result = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if ((int)v5 >= 1)
    {
      uint64_t v6 = 12;
      if (gShadowDiagnosticShowIdealizedObjectSizes) {
        uint64_t v6 = 8;
      }
      unint64_t v7 = v5 + 1;
      uint64_t v8 = v6 + v2;
      do
      {
        uint64_t v9 = v2;
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          uint64_t v9 = v2;
          if (v10) {
            uint64_t v9 = v8 + (*(_DWORD *)(v10 + 8) & ~(*(int *)(v10 + 8) >> 31));
          }
        }
        result += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      uint64_t v11 = (*(_DWORD *)(a1 + 12) - v5);
      char v12 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes) {
        char v12 = 3;
      }
      result += v11 << v12;
    }
  }
  return result;
}

void *RealDFile::startUp(uint64_t a1, const FileSpec *a2, int a3, int a4, _DWORD *a5, DgnString *a6)
{
  int v10 = (int)a2;
  char v12 = (const FileSpec *)(a1 + 16);
  if (!OsFile::fileExists((OsFile **)(a1 + 16), a2))
  {
    if (*(_DWORD *)(a1 + 312))
    {
      if (v10) {
        goto LABEL_8;
      }
      goto LABEL_31;
    }
LABEL_30:
    *(void *)(a1 + 304) = MemChunkAlloc(0x9000uLL, 0);
    *(_DWORD *)(a1 + 312) = 36864;
    if (v10) {
      goto LABEL_8;
    }
LABEL_31:
    int v23 = 0;
    *(unsigned char *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
    uint64_t v21 = (unsigned char *)(a1 + 48);
    *(_DWORD *)(a1 + 28DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a3;
    uint64_t v22 = (unsigned char *)(a1 + 297);
    *(unsigned char *)(a1 + 297) = 0;
    goto LABEL_40;
  }
  if (v10 == 1)
  {
    OsFile::openOsFile(v12, 1);
    uint64_t v19 = v18;
    if (!v18)
    {
      if (*(_DWORD *)(a1 + 24)) {
        uint64_t v20 = *(void **)v12;
      }
      else {
        uint64_t v20 = &unk_2140A8F96;
      }
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2078, (uint64_t)"dfutil/realdf", 13, (uint64_t)"%.500s", v16, v17, (char)v20);
    }
    DgnDelete<OsFile>(v19);
    if (!*(_DWORD *)(a1 + 312))
    {
      *(void *)(a1 + 304) = MemChunkAlloc(0x9000uLL, 0);
      *(_DWORD *)(a1 + 312) = 36864;
    }
    if (!*(_DWORD *)(a1 + 416))
    {
      *(void *)(a1 + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = MemChunkAlloc(0x9000uLL, 0);
      *(_DWORD *)(a1 + 416) = 36864;
    }
    *(unsigned char *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    uint64_t v21 = (unsigned char *)(a1 + 48);
    *(_DWORD *)(a1 + 28DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a3;
    uint64_t v22 = (unsigned char *)(a1 + 297);
    *(unsigned char *)(a1 + 297) = 0;
LABEL_39:
    int v23 = 2;
    goto LABEL_40;
  }
  DFileVersiouint64_t n = RealDFile::getDFileVersion(v12, v13);
  if ((DFileVersion - 1) > 4)
  {
    if ((DFileVersion - 9) > 0xFFFFFFFC) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v25 = *(void **)v12;
    }
    else {
      uint64_t v25 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2094, (uint64_t)"dfutil/realdf", 14, (uint64_t)"%.500s %d %d", v14, v15, (char)v25);
  }
  if (*(_DWORD *)(a1 + 24)) {
    uint64_t v26 = *(void **)v12;
  }
  else {
    uint64_t v26 = &unk_2140A8F96;
  }
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2097, (uint64_t)"dfutil/realdf", 18, (uint64_t)"%.500s", v14, v15, (char)v26);
LABEL_27:
  if (!*(_DWORD *)(a1 + 312)) {
    goto LABEL_30;
  }
  if (!v10) {
    goto LABEL_31;
  }
LABEL_8:
  if (!*(_DWORD *)(a1 + 416))
  {
    *(void *)(a1 + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = MemChunkAlloc(0x9000uLL, 0);
    *(_DWORD *)(a1 + 416) = 36864;
  }
  *(unsigned char *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t v21 = (unsigned char *)(a1 + 48);
  *(_DWORD *)(a1 + 28DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a3;
  uint64_t v22 = (unsigned char *)(a1 + 297);
  *(unsigned char *)(a1 + 297) = 0;
  switch(v10)
  {
    case 1:
      goto LABEL_39;
    case 3:
      int v23 = 4;
      break;
    case 2:
      int v23 = 3;
      break;
    default:
      int v23 = 0;
      break;
  }
LABEL_40:
  if (*(unsigned char *)(gParDiagnosticDFileSimulateOpenFailure + 41))
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v27 = *(void **)v12;
    }
    else {
      uint64_t v27 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2148, (uint64_t)"dfutil/realdf", 17, (uint64_t)"%.500s", v14, v15, (char)v27);
  }
  OsFile::openOsFile(v12, v23);
  *(void *)(a1 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v28;
  if (!v28)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v31 = *(void **)v12;
    }
    else {
      uint64_t v31 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2150, (uint64_t)"dfutil/realdf", 17, (uint64_t)"%.500s", v29, v30, (char)v31);
    uint64_t v28 = *(OsFile **)(a1 + 80);
  }
  off_t FileSize = OsFile::getFileSize(v28);
  if (FileSize)
  {
    __int16 v35 = FileSize;
    RealDFile::readHeader(a1, a4, a5, a6);
    int v38 = *(_DWORD *)(a1 + 96);
    if (v38)
    {
      uint64_t v39 = *(unsigned __int16 *)(*(void *)(a1 + 136) + 2 * (v38 - 1));
      if ((v39 - 1) <= 0xFFFC
        && (v35 & 0xFFF) != 0
        && ((v35 - (unsigned __int16)*(_DWORD *)(*(void *)(a1 + 152) + (v39 << 7) + 108)) & 0xFFF) != 0)
      {
        errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2207, (uint64_t)"dfutil/realdf", 12, (uint64_t)"%llu %.500s %u %llu", v36, v37, v35);
      }
    }
  }
  else
  {
    if (*v21)
    {
      if (*(_DWORD *)(a1 + 24)) {
        uint64_t v40 = *(void **)v12;
      }
      else {
        uint64_t v40 = &unk_2140A8F96;
      }
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2158, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", v33, v34, (char)v40);
    }
    *(_DWORD *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 8;
    *(_WORD *)(a1 + 92) = 2;
    MrecTime::setToCurrentLocalTime((MrecTime *)(a1 + 220));
    RealDFile::writeHeader((RealDFile *)a1);
  }
  *(_DWORD *)(a1 + 32DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t v41 = *(void **)(a1 + 304);
  if (v41)
  {
    MemChunkFree(v41, 0);
    *(void *)(a1 + 304) = 0;
  }
  *(_DWORD *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 332) = 1;
  *(_DWORD *)(a1 + 432) = 0;
  uint64_t result = *(void **)(a1 + 408);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)(a1 + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  }
  *(_DWORD *)(a1 + 416) = 0;
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t result = MemChunkAlloc(0x7000uLL, 0);
    *(void *)(a1 + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = result;
    *(_DWORD *)(a1 + 416) = 28672;
  }
  unsigned char *v22 = 1;
  return result;
}

uint64_t RealDFile::getDFileVersion(RealDFile *this, const FileSpec *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  OsFile::openOsFile(this, 0);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = v2;
  if (OsFile::readBytes(v2, v28, 0x82u, v3, v4, v5, v6, v7) != 130)
  {
    OsFile::~OsFile(v8);
    MemChunkFree(v24, 0);
    return 0xFFFFFFFFLL;
  }
  OsFile::seekFromBeg(v8, 0);
  *(void *)uint64_t v26 = 0;
  uint64_t v27 = 0;
  OsFile::readBytes(v8, v26, 0x10u, v9, v10, v11, v12, v13);
  HIBYTE(v27) = 0;
  OsFile::readBytes(v8, v25, 2u, v14, v15, v16, v17, v18);
  int v19 = (__int16)(v25[1] << 8) | v25[0];
  OsFile::~OsFile(v8);
  MemChunkFree(v20, 0);
  if (v19 >= 0 && *(_DWORD *)&v26[3] == 1981826380 && *(_DWORD *)v26 == 1279870532) {
    return v19;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t RealDFile::readHeader(uint64_t a1, int a2, _DWORD *a3, DgnString *a4)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  uint64_t v165 = (RealDFile *)a1;
  char v167 = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0, v168, 16, 1);
  char v170 = 0;
  LOWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x10uLL, (char *)&v163, 2, 1);
  uint64_t v166 = 18;
  int v10 = (unsigned __int16)v163;
  *(_WORD *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = (_WORD)v163;
  int v11 = v10;
  if ((v10 - 6) >= 3)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v12 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v12 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2999, (uint64_t)"dfutil/realdf", 22, (uint64_t)"%.500s %u", v8, v9, (char)v12);
    int v11 = *(unsigned __int16 *)(a1 + 88);
  }
  switch(v11)
  {
    case 8:
      uint64_t v13 = *(void *)v168;
      uint64_t v14 = 0x387620454C494644;
      goto LABEL_12;
    case 7:
      uint64_t v13 = *(void *)v168;
      uint64_t v14 = 0x377620454C494644;
LABEL_12:
      if (!(v13 ^ v14 | v169)) {
        goto LABEL_17;
      }
      break;
    case 6:
      uint64_t v13 = *(void *)v168;
      uint64_t v14 = 0x367620454C494644;
      goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 24)) {
    uint64_t v15 = *(void **)(a1 + 16);
  }
  else {
    uint64_t v15 = &unk_2140A8F96;
  }
  errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3009, (uint64_t)"dfutil/realdf", 23, (uint64_t)"%.500s %u %.500s", v8, v9, (char)v15);
LABEL_17:
  LOWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x12uLL, (char *)&v163, 2, 1);
  int v18 = (unsigned __int16)v163;
  *(_WORD *)(a1 + 9MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = (_WORD)v163;
  int v19 = *(unsigned __int16 *)(a1 + 88);
  if (v19 == 6 && v18 || (v19 == 8 || v19 == 7) && v18)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v20 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v20 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3016, (uint64_t)"dfutil/realdf", 21, (uint64_t)"%.500s %u %u", v16, v17, (char)v20);
  }
  LOWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x14uLL, (char *)&v163, 2, 1);
  int v21 = (unsigned __int16)v163;
  LOWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x16uLL, (char *)&v163, 2, 1);
  uint64_t v166 = 24;
  char v24 = (char)v163;
  if ((unsigned __int16)v163 != 65534)
  {
    if ((unsigned __int16)v163 == 65279)
    {
      if (*(_DWORD *)(a1 + 24)) {
        uint64_t v25 = *(void **)(a1 + 16);
      }
      else {
        uint64_t v25 = &unk_2140A8F96;
      }
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3022, (uint64_t)"dfutil/realdf", 49, (uint64_t)"%.500s", v22, v23, (char)v25);
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3024, (uint64_t)"dfutil/realdf", 6, (uint64_t)"0x%04x %.500s", v22, v23, v24);
  }
  LODWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x18uLL, (char *)&v163, 4, 1);
  int v26 = (int)v163;
  LODWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x1CuLL, (char *)&v163, 4, 1);
  *(_DWORD *)(a1 + 96) = v163;
  *(_DWORD *)(a1 + 216) = 9;
  if (v26 != 4096)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v29 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v29 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3030, (uint64_t)"dfutil/realdf", 24, (uint64_t)"%.500s %u", v27, v28, (char)v29);
  }
  LODWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x20uLL, (char *)&v163, 4, 1);
  uint64_t v166 = 36;
  if (v163 != -307429618)
  {
    if (v163 == -758187298)
    {
      if (*(_DWORD *)(a1 + 24)) {
        uint64_t v32 = *(void **)(a1 + 16);
      }
      else {
        uint64_t v32 = &unk_2140A8F96;
      }
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3039, (uint64_t)"dfutil/realdf", 1, (uint64_t)"%.500s", v30, v31, (char)v32);
    }
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v33 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v33 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3044, (uint64_t)"dfutil/realdf", 2, (uint64_t)"%.500s 0x%x 0x%x", v30, v31, (char)v33);
  }
  if (a3) {
    *a3 = 0;
  }
  LODWORD(v163) = 0;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x24uLL, (char *)&v163, 4, 1);
  int v34 = 0;
  MrecVersionNumberString = 0;
  uint64_t v36 = (DFile *)v163;
  *(_DWORD *)(a1 + 292) = v163;
  unsigned int v37 = *(_DWORD *)(a1 + 288);
  if (v37 >= 2 && v36 >= 2)
  {
    if (v37 == v36)
    {
      if (a3) {
        *a3 = 1;
      }
      int v34 = 0;
      MrecVersionNumberString = 0;
      switch((int)v36)
      {
        case 2:
        case 3:
        case 4:
          int v34 = 0;
          MrecVersionNumberString = "1.19.000.13381";
          break;
        case 5:
        case 6:
          int v34 = 0;
          MrecVersionNumberString = "1.18.000.12608";
          break;
        case 8:
        case 11:
          MrecVersionNumberString = GetMrecVersionNumberString();
          int v34 = 1;
          break;
        case 9:
        case 10:
          int v34 = 0;
          MrecVersionNumberString = "1.19.000.13553";
          break;
        case 13:
          int v34 = 0;
          MrecVersionNumberString = "1.22.000.14058";
          break;
        case 14:
          int v34 = 0;
          MrecVersionNumberString = "1.22.100.14536";
          break;
        case 15:
          int v34 = 0;
          MrecVersionNumberString = "1.23.000.14829";
          break;
        case 16:
          int v34 = 0;
          MrecVersionNumberString = "1.24.000.15247";
          break;
        case 17:
          int v34 = 0;
          MrecVersionNumberString = "1.24.000.15347";
          break;
        default:
          break;
      }
    }
    else
    {
      if (a2)
      {
        if (*(_DWORD *)(a1 + 24)) {
          int v38 = *(void **)(a1 + 16);
        }
        else {
          int v38 = &unk_2140A8F96;
        }
        DFile::getNameForSemanticType(v36);
        DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 288));
        errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3069, (uint64_t)"dfutil/realdf", 52, (uint64_t)"%.500s %u %.500s %u %.500s", v39, v40, (char)v38);
      }
      MrecVersionNumberString = 0;
      int v34 = 0;
      if (a3) {
        *a3 = 4;
      }
    }
  }
  uint64_t v163 = 0;
  *(void *)unint64_t v164 = 0;
  uint64_t v161 = 0;
  v164[1] = realloc_array(0, (void **)&v161, 0x18uLL, 0, 0, 1) >> 2;
  uint64_t v163 = (DFile *)v161;
  v164[0] = 6;
  RealDFile::doReadFromCache((RealDFile *)a1, 0x28uLL, v161, 24, 1);
  MrecTime::unpackLittleEndMrecTime((_DWORD *)(a1 + 220), (const unsigned int *)v163);
  if (v164[0])
  {
    ssize_t v41 = 4 * v164[0];
    RealDFile::doReadFromCache((RealDFile *)a1, 0x40uLL, (char *)v163, v41, 1);
    unint64_t v42 = v41 + 64;
    uint64_t v166 = v42;
  }
  else
  {
    unint64_t v42 = 64;
  }
  MrecTime::unpackLittleEndMrecTime((_DWORD *)(a1 + 244), (const unsigned int *)v163);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
  if (v42 != 88) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1689, (uint64_t)"dfutil/realdf", 25, (uint64_t)"%llu %llu", v43, v44, v42);
  }
  uint64_t v163 = 0;
  *(void *)unint64_t v164 = 0;
  uint64_t v161 = 0;
  v164[1] = realloc_array(0, (void **)&v161, 0x800uLL, 0, 0, 1);
  uint64_t v163 = (DFile *)v161;
  v164[0] = 2048;
  RealDFile::doReadFromCache((RealDFile *)a1, v42, v161, 168, 1);
  uint64_t v45 = (const char **)(a1 + 272);
  uint64_t Buffer = (char *)DgnString::getBuffer((DgnString *)(a1 + 272), 0x100u);
  RealDFile::doReadFromCache((RealDFile *)a1, v42 + 168, Buffer, 256, 1);
  uint64_t v47 = (unsigned __int8 *)DgnString::getBuffer((DgnString *)(a1 + 272), 0x100u);
  DecryptBuffer(v47, 0x100u, v21, v48, v49, v50, v51, v52);
  RealDFile::doReadFromCache((RealDFile *)a1, v42 + 424, (char *)v163, 1536, 1);
  unint64_t v56 = v42 + 1960;
  uint64_t v166 = v56;
  if (MrecVersionNumberString)
  {
    int v57 = *(unsigned __int16 *)(a1 + 88);
    if (v57 == 6) {
      uint64_t v58 = "MREC Version ";
    }
    else {
      uint64_t v58 = "MREC v";
    }
    if (*(_DWORD *)(a1 + 280)) {
      uint64_t v59 = *v45;
    }
    else {
      uint64_t v59 = (const char *)&unk_2140A8F96;
    }
    if (!DgnString::isPrefixNoCase((DgnString *)v58, v59, v53))
    {
      if (*(_DWORD *)(a1 + 24)) {
        uint64_t v62 = *(void **)(a1 + 16);
      }
      else {
        uint64_t v62 = &unk_2140A8F96;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3222, (uint64_t)"dfutil/realdf", 53, (uint64_t)"%.500s %u %.500s", v60, v61, (char)v62);
    }
    if (*(_DWORD *)(a1 + 280)) {
      unsigned int v63 = *v45;
    }
    else {
      unsigned int v63 = (const char *)&unk_2140A8F96;
    }
    uint64_t v64 = 6;
    if (v57 == 6) {
      uint64_t v64 = 13;
    }
    uint64_t v65 = &v63[v64];
    unsigned int v66 = v63[v64];
    if (v66)
    {
      unsigned int v67 = 0;
      do
      {
        if ((v66 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v66 + 60) & 0x4000) != 0) {
          break;
        }
        unsigned int v66 = v65[++v67];
      }
      while (v65[v67]);
    }
    else
    {
      unsigned int v67 = 0;
    }
    DgnString::DgnString((DgnString *)&v161, v65, v67);
    if (a4) {
      DgnString::operator=(a4, (DgnString *)&v161);
    }
    if (v162) {
      uint64_t v74 = v161;
    }
    else {
      uint64_t v74 = (char *)&unk_2140A8F96;
    }
    if ((InternalCompareMrecVersions(v74, "1.19.110.00000", v68, v69, v70, v71, v72, v73) & 0x80000000) == 0)
    {
      uint64_t v81 = v162 ? v161 : (const char *)&unk_2140A8F96;
      if ((int)InternalCompareMrecVersions(v81, "1.19.110.99999", v75, v76, v77, v78, v79, v80) <= 0
        && (InternalCompareMrecVersions(MrecVersionNumberString, "1.19.000.13299", v75, v76, v77, v78, v79, v80) & 0x80000000) == 0
        && (int)InternalCompareMrecVersions(MrecVersionNumberString, "1.19.000.99999", v75, v76, v77, v78, v79, v80) <= 0)
      {
        if (a2)
        {
          if (*(_DWORD *)(a1 + 24)) {
            uint64_t v84 = *(void **)(a1 + 16);
          }
          else {
            uint64_t v84 = &unk_2140A8F96;
          }
          DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 292));
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3261, (uint64_t)"dfutil/realdf", 61, (uint64_t)"%.500s %u %.500s %.500s %.500s", v159, v160, (char)v84);
        }
        if (a3) {
          *a3 = 2;
        }
      }
    }
    if (v162) {
      uint64_t v82 = v161;
    }
    else {
      uint64_t v82 = (char *)&unk_2140A8F96;
    }
    if ((InternalCompareMrecVersions(v82, MrecVersionNumberString, v75, v76, v77, v78, v79, v80) & 0x80000000) != 0)
    {
      if (a2)
      {
        if (*(_DWORD *)(a1 + 24)) {
          uint64_t v83 = *(void **)(a1 + 16);
        }
        else {
          uint64_t v83 = &unk_2140A8F96;
        }
        DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 292));
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3277, (uint64_t)"dfutil/realdf", 54, (uint64_t)"%.500s %u %.500s %.500s %.500s", v85, v86, (char)v83);
      }
      if (a3) {
        *a3 = 2;
      }
    }
    uint64_t v93 = GetMrecVersionNumberString();
    if (v34)
    {
      uint64_t v94 = v162 ? v161 : (const char *)&unk_2140A8F96;
      if ((int)InternalCompareMrecVersions(v94, v93, v87, v88, v89, v90, v91, v92) >= 1)
      {
        if (a2)
        {
          if (*(_DWORD *)(a1 + 24)) {
            uint64_t v95 = *(void **)(a1 + 16);
          }
          else {
            uint64_t v95 = &unk_2140A8F96;
          }
          DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 292));
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3294, (uint64_t)"dfutil/realdf", 55, (uint64_t)"%.500s %u %.500s %.500s %.500s", v96, v97, (char)v95);
        }
        if (a3) {
          *a3 = 3;
        }
      }
    }
    if (v162) {
      uint64_t v98 = v161;
    }
    else {
      uint64_t v98 = (char *)&unk_2140A8F96;
    }
    if ((int)InternalCompareMrecForkVersions(v98, v93, v87, v88, v89, v90, v91, v92) >= 1)
    {
      if (a2)
      {
        if (*(_DWORD *)(a1 + 24)) {
          uint64_t v99 = *(void **)(a1 + 16);
        }
        else {
          uint64_t v99 = &unk_2140A8F96;
        }
        DFile::getNameForSemanticType((DFile *)*(unsigned int *)(a1 + 292));
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3309, (uint64_t)"dfutil/realdf", 55, (uint64_t)"%.500s %u %.500s %.500s %.500s", v100, v101, (char)v99);
      }
      if (a3) {
        *a3 = 3;
      }
    }
    DgnString::~DgnString((DgnString *)&v161);
    unint64_t v56 = v166;
  }
  if (v56 != 2048) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1689, (uint64_t)"dfutil/realdf", 25, (uint64_t)"%llu %llu", v54, v55, v56);
  }
  unsigned int v102 = *(_DWORD *)(a1 + 116);
  if (v102 <= 0xFF) {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 104, 256 - v102, 0);
  }
  *(_DWORD *)(a1 + 112) = 256;
  uint64_t v103 = v165;
  RealDFile::doReadFromCache(v165, v56, *(char **)(a1 + 104), 1024, 1);
  uint64_t v166 = v56 + 1024;
  if (v56 != 2048) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1689, (uint64_t)"dfutil/realdf", 25, (uint64_t)"%llu %llu", v104, v105, v56);
  }
  unsigned int v106 = (char **)(a1 + 120);
  unsigned int v107 = *(_DWORD *)(a1 + 132);
  if (v107 <= 0x20FD) {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 120, 8446 - v107, 0);
  }
  *(_DWORD *)(a1 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 8446;
  LODWORD(v161) = 0;
  RealDFile::doReadFromCache(v103, v56 + 1024, (char *)&v161, 4, 1);
  if (v161 != -307429602)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v110 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v110 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3357, (uint64_t)"dfutil/realdf", 3, (uint64_t)"%.500s 0x%x 0x%x", v108, v109, (char)v110);
  }
  unint64_t v111 = v56 + 1028;
  int v112 = *(_DWORD *)(a1 + 128);
  if (v112)
  {
    unsigned int v113 = 4 * v112;
    RealDFile::doReadFromCache(v103, v111, *v106, (4 * v112), 1);
    v111 += v113;
  }
  LODWORD(v161) = 0;
  RealDFile::doReadFromCache(v103, v111, (char *)&v161, 4, 1);
  uint64_t v166 = v111 + 4;
  if (v161 != -307429602)
  {
    if (*(_DWORD *)(a1 + 24)) {
      unsigned int v116 = *(void **)(a1 + 16);
    }
    else {
      unsigned int v116 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3371, (uint64_t)"dfutil/realdf", 3, (uint64_t)"%.500s 0x%x 0x%x", v114, v115, (char)v116);
  }
  if (v111 != 36860) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1689, (uint64_t)"dfutil/realdf", 25, (uint64_t)"%llu %llu", v114, v115, v111 + 4);
  }
  uint64_t v117 = *(unsigned int *)(a1 + 112);
  if (v117)
  {
    uint64_t v118 = 0;
    while (*(_DWORD *)(*(void *)(a1 + 104) + 4 * v118) != -1)
    {
      if (v117 == ++v118) {
        goto LABEL_171;
      }
    }
    LODWORD(v117) = v118;
LABEL_171:
    unsigned int v119 = *(_DWORD *)(a1 + 116);
    if (v117 > v119) {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 104, v117 - v119, 0);
    }
  }
  *(_DWORD *)(a1 + 112) = v117;
  DgnPrimArray<unsigned int>::compact(a1 + 104);
  uint64_t v120 = *(unsigned int *)(a1 + 128);
  if (v120)
  {
    uint64_t v121 = 0;
    while (*(_DWORD *)&(*v106)[4 * v121] != -1)
    {
      if (v120 == ++v121) {
        goto LABEL_179;
      }
    }
    LODWORD(v12MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v121;
LABEL_179:
    unsigned int v122 = *(_DWORD *)(a1 + 132);
    if (v120 > v122) {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 120, v120 - v122, 0);
    }
  }
  *(_DWORD *)(a1 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v120;
  DgnPrimArray<unsigned int>::compact(a1 + 120);
  if (!v117)
  {
LABEL_188:
    BOOL v130 = 0;
    LODWORD(v127) = -1;
    if (!v120) {
      goto LABEL_194;
    }
    goto LABEL_191;
  }
  uint64_t v125 = *(unsigned int **)(a1 + 104);
  unsigned int v126 = *(_DWORD *)(a1 + 96);
  if (*v125 < v126)
  {
    unint64_t v127 = 0;
    uint64_t v128 = v125 + 1;
    while (v117 - 1 != v127)
    {
      unsigned int v129 = v128[v127++];
      if (v129 >= v126)
      {
        BOOL v130 = v127 < v117;
        if (v120) {
          goto LABEL_191;
        }
        goto LABEL_194;
      }
    }
    goto LABEL_188;
  }
  LODWORD(v127) = 0;
  BOOL v130 = 1;
  if (!v120)
  {
LABEL_194:
    int v132 = -1;
    goto LABEL_196;
  }
LABEL_191:
  uint64_t v131 = 0;
  while (*(_DWORD *)(*(void *)(a1 + 120) + 4 * v131) < *(_DWORD *)(a1 + 96))
  {
    if (v120 == ++v131) {
      goto LABEL_194;
    }
  }
  BOOL v130 = 1;
  int v132 = v131;
LABEL_196:
  if (v127 != -1 && v130)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v133 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v133 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3428, (uint64_t)"dfutil/realdf", 7, (uint64_t)"%.500s %.500s %u %u %u", v123, v124, (char)v133);
  }
  char v134 = !v130;
  if (v132 == -1) {
    char v134 = 1;
  }
  if ((v134 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v135 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v135 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3435, (uint64_t)"dfutil/realdf", 7, (uint64_t)"%.500s %.500s %u %u %u", v123, v124, (char)v135);
  }
  RealDFile::readDirEntries(a1, (uint64_t)&v165);
  RealDFile::readBlockUsage(a1, (uint64_t)&v165, v136, v137, v138, v139, v140, v141);
  *(_WORD *)(a1 + 92) = v21;
  if (*(_DWORD *)(a1 + 160) >= 2u)
  {
    unsigned __int16 v144 = 1;
    do
    {
      uint64_t v145 = v144;
      unint64_t v146 = *(void *)(a1 + 152) + ((unint64_t)v144 << 7);
      if (*(_DWORD *)(v146 + 96))
      {
        uint64_t v147 = *(unsigned int *)(v146 + 100);
        if (v147 >= *(_DWORD *)(a1 + 96))
        {
          if (*(_DWORD *)(a1 + 24)) {
            uint64_t v148 = *(void **)(a1 + 16);
          }
          else {
            uint64_t v148 = &unk_2140A8F96;
          }
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3463, (uint64_t)"dfutil/realdf", 27, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v148);
        }
        if (*(unsigned __int16 *)(*(void *)(a1 + 136) + 2 * v147) != v145)
        {
          if (*(_DWORD *)(a1 + 24)) {
            uint64_t v149 = *(void **)(a1 + 16);
          }
          else {
            uint64_t v149 = &unk_2140A8F96;
          }
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3472, (uint64_t)"dfutil/realdf", 31, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v149);
        }
        if (*(_DWORD *)(*(void *)(a1 + 152) + (v145 << 7) + 104) > *(_DWORD *)(a1 + 96))
        {
          if (*(_DWORD *)(a1 + 24)) {
            uint64_t v150 = *(void **)(a1 + 16);
          }
          else {
            uint64_t v150 = &unk_2140A8F96;
          }
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3479, (uint64_t)"dfutil/realdf", 28, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v150);
        }
        if (v147 == -1)
        {
          LODWORD(v147) = -1;
          int i = 1;
        }
        else
        {
          unsigned int v151 = *(_DWORD *)(a1 + 144);
          for (int i = 1; ; ++i)
          {
            unsigned int v153 = v147 + 1;
            if (v151 > (int)v147 + 1)
            {
              uint64_t v154 = v147;
              while (*(unsigned __int16 *)(*(void *)(a1 + 136) + 2 + 2 * v154) != v145)
              {
                if (v151 - 1 == ++v154) {
                  goto LABEL_238;
                }
              }
              unsigned int v153 = v154 + 1;
            }
            if (v153 >= v151) {
              break;
            }
            LODWORD(v147) = v153;
          }
        }
LABEL_238:
        uint64_t v155 = *(void *)(a1 + 152);
        if (i != *(_DWORD *)(v155 + (v145 << 7) + 96))
        {
          if (*(_DWORD *)(a1 + 24)) {
            uint64_t v156 = *(void **)(a1 + 16);
          }
          else {
            uint64_t v156 = &unk_2140A8F96;
          }
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3497, (uint64_t)"dfutil/realdf", 29, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v156);
          uint64_t v155 = *(void *)(a1 + 152);
        }
        if (v147 != *(_DWORD *)(v155 + (v145 << 7) + 104))
        {
          if (*(_DWORD *)(a1 + 24)) {
            uint64_t v157 = *(void **)(a1 + 16);
          }
          else {
            uint64_t v157 = &unk_2140A8F96;
          }
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3503, (uint64_t)"dfutil/realdf", 30, (uint64_t)"%.500s %d %.500s %u %u", v142, v143, (char)v157);
        }
      }
      unsigned __int16 v144 = v145 + 1;
    }
    while (*(_DWORD *)(a1 + 160) > (unsigned __int16)(v145 + 1));
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
}

void sub_21401221C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RealDFile::subFileExistsByExplicitExtension(RealDFile *this, char *a2)
{
  DgnString::DgnString((DgnString *)&v7);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v7);
  if (v8) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (const char *)&unk_2140A8F96;
  }
  uint64_t SubFile = RealDFile::findSubFile(this, v4, 0);
  DgnString::~DgnString((DgnString *)&v7);
  return SubFile;
}

void sub_214012338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RealDFile::findSubFile(RealDFile *this, const char *a2, char *a3)
{
  if (*((_DWORD *)this + 40) < 2u) {
    return 0;
  }
  unsigned __int16 v6 = 1;
  while (DgnString::compareNoCase((DgnString *)(*((void *)this + 19) + ((unint64_t)v6 << 7)), a2, a3))
  {
    if (*((_DWORD *)this + 40) <= ++v6) {
      return 0;
    }
  }
  if (a3) {
    *(_WORD *)a3 = v6;
  }
  return 1;
}

uint64_t *RealDFile::openSubFileByExplicitExtension(uint64_t a1, char *a2, unsigned int a3)
{
  DgnString::DgnString((DgnString *)&v66);
  DFile::makeSubFileName(a1 + 56, a2, (DgnString *)&v66);
  if (v67 <= 1)
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v12 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v12 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2262, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", v10, v11, (char)v12);
  }
  if ((a3 > 6 || ((1 << a3) & 0x59) == 0) && *(unsigned char *)(a1 + 48))
  {
    if (*(_DWORD *)(a1 + 24)) {
      uint64_t v29 = *(void **)(a1 + 16);
    }
    else {
      uint64_t v29 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2269, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", v10, v11, (char)v29);
  }
  unsigned int v13 = v67;
  if ((a3 & 0xFFFFFFFB) == 1)
  {
    if (v67) {
      uint64_t v14 = v66;
    }
    else {
      uint64_t v14 = (const char *)&unk_2140A8F96;
    }
    RealDFile::deleteSubFile((RealDFile *)a1, v14, v6, v7, v8, v9, v10, v11);
    unsigned int v13 = v67;
  }
  unsigned __int16 v65 = 0;
  if (v13) {
    uint64_t v15 = v66;
  }
  else {
    uint64_t v15 = (const char *)&unk_2140A8F96;
  }
  if (RealDFile::findSubFile((RealDFile *)a1, v15, (char *)&v65))
  {
    uint64_t v23 = v65;
    uint64_t v24 = *(void *)(a1 + 152);
    uint64_t v25 = v24 + ((unint64_t)v65 << 7);
    int v26 = *(_DWORD *)(v25 + 100);
    unsigned int v27 = *(unsigned __int8 *)(v25 + 124);
    if (v27 >= 2)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2358, (uint64_t)"dfutil/realdf", 44, (uint64_t)"%u %.500s %.500s", v21, v22, v27);
      uint64_t v23 = v65;
      uint64_t v24 = *(void *)(a1 + 152);
    }
    unsigned int v30 = *(unsigned __int8 *)(v24 + (v23 << 7) + 125);
    if (v30 >= 2)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2366, (uint64_t)"dfutil/realdf", 45, (uint64_t)"%u %.500s %.500s", v21, v22, v30);
      uint64_t v23 = v65;
      uint64_t v24 = *(void *)(a1 + 152);
    }
    uint64_t v31 = v24 + (v23 << 7);
    int v32 = *(unsigned __int8 *)(v31 + 124);
    BOOL v33 = *(unsigned char *)(v31 + 124) != 0;
    int v34 = *(unsigned __int8 *)(v31 + 125);
    if (v32)
    {
      if (v34 != 1)
      {
        uint64_t v35 = 2374;
LABEL_40:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", v35, (uint64_t)"dfutil/realdf", 45, (uint64_t)"%u %.500s %.500s", v21, v22, v34);
      }
    }
    else if (v34)
    {
      uint64_t v35 = 2384;
      goto LABEL_40;
    }
    unint64_t v36 = *(void *)(*(void *)(a1 + 152) + ((unint64_t)v65 << 7) + 112);
    goto LABEL_64;
  }
  if (a3 <= 6 && ((1 << a3) & 0x59) != 0)
  {
    if (v67) {
      LOBYTE(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = (_BYTE)v66;
    }
    else {
      uint64_t v28 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2289, (uint64_t)"dfutil/realdf", 16, (uint64_t)"%.500s %.500s", v21, v22, (char)v28);
  }
  if (*(unsigned __int16 *)(a1 + 88) < 8u)
  {
    if (v67 < 0x21) {
      goto LABEL_42;
    }
    goto LABEL_32;
  }
  if (v67 > 0x60) {
LABEL_32:
  }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2296, (uint64_t)"dfutil/realdf", 10, (uint64_t)"%.500s %.500s", v21, v22, (char)v66);
LABEL_42:
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(_DWORD *)(a1 + 24)) {
      unsigned int v37 = *(void **)(a1 + 16);
    }
    else {
      unsigned int v37 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2300, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", v21, v22, (char)v37);
  }
  unsigned int v38 = *(_DWORD *)(a1 + 160);
  unsigned __int16 v39 = 1;
  unsigned __int16 v65 = 1;
  if (v38 >= 2)
  {
    uint64_t v40 = *(void *)(a1 + 152);
    if (*(unsigned char *)(v40 + 128))
    {
      unsigned __int16 v39 = 1;
      do
      {
        unsigned __int16 v65 = ++v39;
        int v41 = v39;
      }
      while (v38 > v39 && *(unsigned char *)(v40 + ((unint64_t)v39 << 7)));
      goto LABEL_55;
    }
    unsigned __int16 v39 = 1;
  }
  int v41 = 1;
LABEL_55:
  if (v38 == v41)
  {
    RealDFile::addDirEntrySpace((RealDFile *)a1, v16, v17, v18, v19, v20, v21, v22);
    unsigned __int16 v39 = v65;
  }
  if (v67) {
    unint64_t v42 = v66;
  }
  else {
    unint64_t v42 = (const char *)&unk_2140A8F96;
  }
  strcpy((char *)(*(void *)(a1 + 152) + ((unint64_t)v39 << 7)), v42);
  uint64_t v43 = v65;
  uint64_t v44 = *(void *)(a1 + 152);
  unint64_t v51 = strlen((const char *)(v44 + ((unint64_t)v65 << 7)));
  if (v51 <= 0x5F)
  {
    do
      *(unsigned char *)(*(void *)(a1 + 152) + ((unint64_t)v65 << 7) + v51++) = 0;
    while (v51 != 96);
    uint64_t v43 = v65;
    uint64_t v44 = *(void *)(a1 + 152);
  }
  uint64_t v52 = v44 + (v43 << 7);
  *(_DWORD *)(v52 + 104) = -1;
  *(void *)(v52 + 96) = 0xFFFFFFFF00000000;
  *(void *)(v52 + 116) = 0;
  *(void *)(v52 + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(v52 + 124) = -554041344;
  *(unsigned char *)(a1 + 296) = 1;
  int v26 = RealDFile::addBlock((RealDFile *)a1, v65, v45, v46, v47, v48, v49, v50);
  BOOL v33 = 0;
  unint64_t v36 = 0;
LABEL_64:
  uint64_t v53 = v65;
  uint64_t v54 = *(void *)(a1 + 200);
  if (a3 != 3)
  {
    char v56 = 0;
    char v57 = 1;
    *(unsigned char *)(v54 + v65) = 1;
    switch(a3)
    {
      case 0u:
      case 2u:
        if (v33) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2401, (uint64_t)"dfutil/realdf", 43, (uint64_t)"%u %.500s %.500s", v21, v22, a3);
        }
        char v56 = 0;
        goto LABEL_76;
      case 4u:
        goto LABEL_75;
      case 5u:
        goto LABEL_80;
      default:
        goto LABEL_76;
    }
  }
  if (*(unsigned char *)(v54 + v65))
  {
    if (v67) {
      LOBYTE(v55) = (_BYTE)v66;
    }
    else {
      uint64_t v55 = &unk_2140A8F96;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2391, (uint64_t)"dfutil/realdf", 48, (uint64_t)"%.500s %.500s", v21, v22, (char)v55);
    uint64_t v53 = v65;
    uint64_t v54 = *(void *)(a1 + 200);
  }
  *(unsigned char *)(v54 + v53) = 1;
LABEL_75:
  char v56 = v33;
LABEL_76:
  if (a3 == 1)
  {
    char v57 = v56;
LABEL_80:
    int v58 = 1;
    char v56 = v57;
  }
  else if (a3 == 2)
  {
    int v58 = 2;
  }
  else
  {
    int v58 = 0;
  }
  if (v67) {
    uint64_t v59 = v66;
  }
  else {
    uint64_t v59 = (const char *)&unk_2140A8F96;
  }
  FileSpec::FileSpec((FileSpec *)v64, v59);
  uint64_t v60 = MemChunkAlloc(0x80uLL, 0);
  uint64_t v61 = v60;
  if (v67) {
    uint64_t v62 = v66;
  }
  else {
    uint64_t v62 = (char *)&unk_2140A8F96;
  }
  RealDFileSubFileStream::RealDFileSubFileStream((uint64_t)v60, v58, (uint64_t)v64, a1, v62, a3, v65, 0, v26, v56, v36);
  FileSpec::~FileSpec((FileSpec *)v64);
  DgnString::~DgnString((DgnString *)&v66);
  return v61;
}

void sub_214012AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t RealDFile::deleteSubFile(RealDFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*a2)
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v10 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v10 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4424, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  if (*((unsigned char *)this + 48))
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v11 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v11 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4425, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", a7, a8, (char)v11);
  }
  unsigned __int16 v13 = 0;
  uint64_t result = RealDFile::findSubFile(this, a2, (char *)&v13);
  if (result)
  {
    do
      uint64_t result = RealDFile::freeBlock(this, v13);
    while (result != -1);
    *(unsigned char *)(*((void *)this + 19) + ((unint64_t)v13 << 7)) = 0;
    *((unsigned char *)this + 296) = 1;
  }
  return result;
}

void RealDFile::addDirEntrySpace(RealDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *((unsigned int *)this + 36);
  if (v9)
  {
    uint64_t v10 = 0;
    while (*(_WORD *)(*((void *)this + 17) + 2 * v10))
    {
      if (v9 == ++v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  }
  if (v10 == v9) {
LABEL_8:
  }
    RealDFile::addBlockSpace(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = (void *)((char *)this + 104);
  uint64_t v12 = *((unsigned int *)this + 28);
  if (v12)
  {
    uint64_t v13 = 0;
    while (*(_DWORD *)(*v11 + 4 * v13) != -1)
    {
      if (v12 == ++v13)
      {
        LODWORD(v13) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if (v13 <= 0xFF && v13 == v12)
  {
    if (v12 == *((_DWORD *)this + 29))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v11, 1, 1);
      LODWORD(v12) = *((_DWORD *)this + 28);
    }
    *(_DWORD *)(*((void *)this + 13) + 4 * v12) = -1;
    LODWORD(v12) = *((_DWORD *)this + 28) + 1;
    *((_DWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12;
  }
  if (v13 == v12)
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v14 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v14 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4334, (uint64_t)"dfutil/realdf", 4, (uint64_t)"%.500s", a7, a8, (char)v14);
  }
  uint64_t v15 = (void *)((char *)this + 152);
  unsigned int v16 = *((_DWORD *)this + 40);
  unsigned int v17 = *((_DWORD *)this + 41);
  if (*((unsigned __int16 *)this + 44) < 8u)
  {
    uint64_t v24 = v16 + 64;
    if (v24 > v17)
    {
      DgnArray<RealDFileDirEntry>::reallocElts((uint64_t)this + 152, v24 - v17, 0);
      unsigned int v16 = *((_DWORD *)this + 40);
    }
    if (v16 < v24)
    {
      uint64_t v25 = v24 - v16;
      unint64_t v26 = (unint64_t)v16 << 7;
      do
      {
        unint64_t v27 = *v15 + v26;
        *(_OWORD *)(v27 + 11MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0uLL;
        *(_OWORD *)(v27 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0uLL;
        *(_OWORD *)(v27 + 96) = 0uLL;
        *(_OWORD *)(v27 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(v27 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0uLL;
        *(_OWORD *)(v27 + 16) = 0uLL;
        *(_OWORD *)(v27 + 32) = 0uLL;
        *(_OWORD *)unint64_t v27 = 0uLL;
        *(_WORD *)(v27 + 126) = -8454;
        v26 += 128;
        --v25;
      }
      while (v25);
    }
    *((_DWORD *)this + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v24;
    unsigned int v28 = *((_DWORD *)this + 52);
    int v29 = 64;
    do
    {
      if (v28 == *((_DWORD *)this + 53))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 200, 1, 1);
        unsigned int v28 = *((_DWORD *)this + 52);
      }
      *(unsigned char *)(*((void *)this + 25) + v28++) = 0;
      *((_DWORD *)this + 52) = v28;
      --v29;
    }
    while (v29);
  }
  else
  {
    uint64_t v18 = v16 + 32;
    if (v18 > v17)
    {
      DgnArray<RealDFileDirEntry>::reallocElts((uint64_t)this + 152, v18 - v17, 0);
      unsigned int v16 = *((_DWORD *)this + 40);
    }
    if (v16 < v18)
    {
      unint64_t v19 = (unint64_t)v16 << 7;
      uint64_t v20 = v18 - v16;
      do
      {
        unint64_t v21 = *v15 + v19;
        *(_OWORD *)(v21 + 11MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0uLL;
        *(_OWORD *)(v21 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0uLL;
        *(_OWORD *)(v21 + 96) = 0uLL;
        *(_OWORD *)(v21 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0uLL;
        *(_OWORD *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0uLL;
        *(_OWORD *)(v21 + 16) = 0uLL;
        *(_OWORD *)(v21 + 32) = 0uLL;
        *(_OWORD *)unint64_t v21 = 0uLL;
        *(_WORD *)(v21 + 126) = -8454;
        v19 += 128;
        --v20;
      }
      while (v20);
    }
    *((_DWORD *)this + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v18;
    unsigned int v22 = *((_DWORD *)this + 52);
    int v23 = 32;
    do
    {
      if (v22 == *((_DWORD *)this + 53))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 200, 1, 1);
        unsigned int v22 = *((_DWORD *)this + 52);
      }
      *(unsigned char *)(*((void *)this + 25) + v22++) = 0;
      *((_DWORD *)this + 52) = v22;
      --v23;
    }
    while (v23);
  }
  unsigned int v30 = *((_DWORD *)this + 44);
  if (v30 == *((_DWORD *)this + 45))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 168, 1, 1);
    unsigned int v30 = *((_DWORD *)this + 44);
  }
  *(_DWORD *)(*((void *)this + 21) + 4 * v3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v13;
  ++*((_DWORD *)this + 44);
  *(_DWORD *)(*((void *)this + 13) + 4 * v13) = -2;
}

void RealDFile::removeSubFileByExplicitExtension(RealDFile *this, char *a2)
{
  DgnString::DgnString((DgnString *)&v11);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v11);
  if (v12) {
    uint64_t v10 = v11;
  }
  else {
    uint64_t v10 = (const char *)&unk_2140A8F96;
  }
  RealDFile::deleteSubFile(this, v10, v4, v5, v6, v7, v8, v9);
  DgnString::~DgnString((DgnString *)&v11);
}

void sub_214012F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RealDFile::renameSubFileByExplicitExtension(RealDFile *this, char *a2, char *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*a2)
  {
    if (*((_DWORD *)this + 6)) {
      int v12 = (void *)*((void *)this + 2);
    }
    else {
      int v12 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2487, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", a7, a8, (char)v12);
  }
  if (*((unsigned char *)this + 48))
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v13 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v13 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2489, (uint64_t)"dfutil/realdf", 11, (uint64_t)"%.500s", a7, a8, (char)v13);
  }
  if (!*a3)
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v14 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v14 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2491, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", a7, a8, (char)v14);
  }
  DgnString::DgnString((DgnString *)&v32);
  DgnString::DgnString((DgnString *)&v30);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v32);
  DFile::makeSubFileName((uint64_t)this + 56, a3, (DgnString *)&v30);
  unsigned __int16 v29 = 0;
  if (v33) {
    uint64_t v15 = v32;
  }
  else {
    uint64_t v15 = (const char *)&unk_2140A8F96;
  }
  if ((RealDFile::findSubFile(this, v15, (char *)&v29) & 1) == 0)
  {
    if (v33) {
      LOBYTE(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = (_BYTE)v32;
    }
    else {
      uint64_t v18 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2504, (uint64_t)"dfutil/realdf", 16, (uint64_t)"%.500s %.500s", v16, v17, (char)v18);
  }
  if (v31) {
    unint64_t v19 = v30;
  }
  else {
    unint64_t v19 = &unk_2140A8F96;
  }
  if ((*(unsigned int (**)(RealDFile *, void *))(*(void *)this + 24))(this, v19))
  {
    if ((a4 & 1) == 0)
    {
      if (v31) {
        LOBYTE(v22) = (_BYTE)v30;
      }
      else {
        unsigned int v22 = &unk_2140A8F96;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2509, (uint64_t)"dfutil/realdf", 56, (uint64_t)"%.500s", v20, v21, (char)v22);
    }
    if (v31) {
      int v23 = v30;
    }
    else {
      int v23 = &unk_2140A8F96;
    }
    (*(void (**)(RealDFile *, void *))(*(void *)this + 40))(this, v23);
  }
  uint64_t v24 = v29;
  uint64_t v25 = (char *)(*((void *)this + 19) + ((unint64_t)v29 << 7));
  if (v31) {
    unint64_t v26 = (const char *)v30;
  }
  else {
    unint64_t v26 = (const char *)&unk_2140A8F96;
  }
  if (*((unsigned __int16 *)this + 44) < 8u)
  {
    strncpy(v25, v26, 0x1FuLL);
    unint64_t v27 = (unsigned char *)(*((void *)this + 19) + (v24 << 7) + 31);
  }
  else
  {
    strncpy(v25, v26, 0x5FuLL);
    unint64_t v27 = (unsigned char *)(*((void *)this + 19) + (v24 << 7) + 95);
  }
  unsigned char *v27 = 0;
  unint64_t v28 = strlen((const char *)(*((void *)this + 19) + ((unint64_t)v29 << 7)));
  if (v28 <= 0x5F)
  {
    do
      *(unsigned char *)(*((void *)this + 19) + ((unint64_t)v29 << 7) + v28++) = 0;
    while (v28 != 96);
  }
  *((unsigned char *)this + 296) = 1;
  DgnString::~DgnString((DgnString *)&v30);
  DgnString::~DgnString((DgnString *)&v32);
}

void sub_214013290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t RealDFile::getSubFileSizeByExplicitExtension(RealDFile *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*a2)
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v10 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v10 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2545, (uint64_t)"dfutil/realdf", 15, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  DgnString::DgnString((DgnString *)&v19);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v19);
  unsigned __int16 v18 = 0;
  if (v20) {
    uint64_t v11 = v19;
  }
  else {
    uint64_t v11 = (const char *)&unk_2140A8F96;
  }
  if ((RealDFile::findSubFile(this, v11, (char *)&v18) & 1) == 0)
  {
    if (v20) {
      LOBYTE(v14) = (_BYTE)v19;
    }
    else {
      uint64_t v14 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2553, (uint64_t)"dfutil/realdf", 16, (uint64_t)"%.500s %.500s", v12, v13, (char)v14);
  }
  unint64_t v15 = *((void *)this + 19) + ((unint64_t)v18 << 7);
  unint64_t v16 = *(unsigned int *)(v15 + 108) + ((unint64_t)(*(_DWORD *)(v15 + 96) - 1) << 12);
  DgnString::~DgnString((DgnString *)&v19);
  return v16;
}

void sub_2140133E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

OsFile *RealDFile::deleteFileAndCleanUp(RealDFile *this, std::error_code *a2)
{
  uint64_t result = (OsFile *)*((void *)this + 10);
  if (result)
  {
    OsFile::deleteFileAndCleanUp(result, a2);
    uint64_t result = DgnDelete<OsFile>(*((OsFile **)this + 10));
    *((void *)this + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  }
  *((_WORD *)this + 14DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 82) = 0;
  return result;
}

void *RealDFile::clearBigReadCache(RealDFile *this, char a2)
{
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll((uint64_t)this + 336);
  DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll((uint64_t)this + 352);
  *((void *)this + 46) = 0;
  uint64_t result = (void *)*((void *)this + 49);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 49) = 0;
  }
  *((void *)this + 5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((unsigned char *)this + 385) = a2;
  return result;
}

void *DgnIOwnArray<DgnPrimFixArray<char> *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnPrimFixArray<char>>(*(void *)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void RealDFile::verifyHaveOpenedAllSubFiles(RealDFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *((_DWORD *)this + 40);
  if (v8 >= 2)
  {
    unsigned __int16 v10 = 1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v12 = (unsigned char *)(*((void *)this + 19) + ((unint64_t)v10 << 7));
      if (*v12)
      {
        if (!*(unsigned char *)(*((void *)this + 25) + v11))
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2617, (uint64_t)"dfutil/realdf", 46, (uint64_t)"%.500s %.500s %.500s", a7, a8, (char)v12);
          unsigned int v8 = *((_DWORD *)this + 40);
        }
      }
      unsigned __int16 v10 = v11 + 1;
    }
    while (v8 > (unsigned __int16)(v11 + 1));
  }
}

void RealDFile::verifyHaveOpenedAllSubFiles(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 160);
  if (v8 >= 2)
  {
    unsigned __int16 v11 = 1;
    do
    {
      uint64_t v12 = v11;
      if (*(unsigned char *)(*a3 + v11))
      {
        uint64_t v13 = (unsigned char *)(*(void *)(a1 + 152) + ((unint64_t)v11 << 7));
        if (*v13)
        {
          if (!*(unsigned char *)(*(void *)(a1 + 200) + v12))
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 2636, (uint64_t)"dfutil/realdf", 46, (uint64_t)"%.500s %.500s %.500s", a7, a8, (char)v13);
            unsigned int v8 = *(_DWORD *)(a1 + 160);
          }
        }
      }
      unsigned __int16 v11 = v12 + 1;
    }
    while (v8 > (unsigned __int16)(v12 + 1));
  }
}

uint64_t RealDFile::addBlockSpace(RealDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)((char *)this + 120);
  uint64_t v10 = *((unsigned int *)this + 32);
  if (v10)
  {
    uint64_t v11 = 0;
    while (*(_DWORD *)(*v9 + 4 * v11) != -1)
    {
      if (v10 == ++v11)
      {
        LODWORD(v11) = *((_DWORD *)this + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  uint64_t v12 = (void *)((char *)this + 136);
  uint64_t v14 = *((unsigned int *)this + 36);
  unsigned int v13 = *((_DWORD *)this + 37);
  unsigned int v15 = v14 + 2046;
  if ((int)v14 + 2046 > v13) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 136, v14 + 2046 - v13, 0);
  }
  *((_DWORD *)this + 36) = v15;
  if (v14 <= 0xFFFFF801)
  {
    if (v15 <= (int)v14 + 1) {
      int v16 = v14 + 1;
    }
    else {
      int v16 = v14 + 2046;
    }
    bzero((void *)(*v12 + 2 * v14), 2 * (v16 + ~v14) + 2);
  }
  if (v11 == *((_DWORD *)this + 32))
  {
    unsigned int v17 = v11;
    if (v11 >= 0x20FE)
    {
      if (*((_DWORD *)this + 6)) {
        unsigned __int16 v18 = (void *)*((void *)this + 2);
      }
      else {
        unsigned __int16 v18 = &unk_2140A8F96;
      }
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4385, (uint64_t)"dfutil/realdf", 5, (uint64_t)"%.500s", a7, a8, (char)v18);
      unsigned int v17 = *((_DWORD *)this + 32);
    }
    if (v17 == *((_DWORD *)this + 33))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v9, 1, 1);
      unsigned int v17 = *((_DWORD *)this + 32);
    }
    *(_DWORD *)(*((void *)this + 15) + 4 * v17) = -1;
    ++*((_DWORD *)this + 32);
  }
  unsigned int v19 = *((_DWORD *)this + 48);
  if (v19 == *((_DWORD *)this + 49))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 184, 1, 1);
    unsigned int v19 = *((_DWORD *)this + 48);
  }
  *(_DWORD *)(*((void *)this + 23) + 4 * v19) = v11;
  ++*((_DWORD *)this + 48);
  *(_DWORD *)(*((void *)this + 15) + 4 * v11) = -2;
  return v14;
}

void RealDFile::readDirEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(unsigned __int16 *)(a1 + 88);
  BOOL v5 = v4 > 7;
  if (v4 <= 7) {
    int v6 = 64;
  }
  else {
    int v6 = 32;
  }
  int v44 = v6;
  uint64_t v7 = a1 + 152;
  int v8 = *(_DWORD *)(a1 + 112);
  if (v5) {
    char v9 = 5;
  }
  else {
    char v9 = 6;
  }
  unsigned int v10 = (v8 << v9) | 1;
  unsigned int v11 = *(_DWORD *)(a1 + 164);
  if (v10 > v11)
  {
    DgnArray<RealDFileDirEntry>::reallocElts(a1 + 152, v10 - v11, 0);
    int v8 = *(_DWORD *)(a1 + 112);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    long long v13 = 0uLL;
    do
    {
      uint64_t v45 = v12;
      *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = (*(unsigned int *)(a1 + 216)
                           + (unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4 * v12)) << 12;
      int v14 = v44;
      do
      {
        *(_OWORD *)&v53[14] = v13;
        long long v52 = v13;
        *(_OWORD *)uint64_t v53 = v13;
        long long v50 = v13;
        long long v51 = v13;
        long long v48 = v13;
        long long v49 = v13;
        *(_OWORD *)uint64_t v47 = v13;
        __int16 v54 = -8454;
        unsigned int v15 = *(RealDFile **)a2;
        unint64_t v16 = *(void *)(a2 + 8);
        if (*(unsigned __int16 *)(a1 + 88) < 8u)
        {
          RealDFile::doReadFromCache(v15, v16, v47, 32, 1);
          unint64_t v17 = *(void *)(a2 + 8) + 32;
          *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v17;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
        }
        else
        {
          RealDFile::doReadFromCache(v15, v16, v47, 96, 1);
          unint64_t v17 = *(void *)(a2 + 8) + 96;
          *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v17;
        }
        *(_DWORD *)uint64_t v46 = 0;
        RealDFile::doReadFromCache(*(RealDFile **)a2, v17, v46, 4, 1);
        unsigned __int16 v18 = *(RealDFile **)a2;
        unint64_t v19 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v19;
        *(_DWORD *)uint64_t v53 = *(_DWORD *)v46;
        *(_DWORD *)uint64_t v46 = 0;
        RealDFile::doReadFromCache(v18, v19, v46, 4, 1);
        int v20 = *(RealDFile **)a2;
        unint64_t v21 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
        *(_DWORD *)&v53[4] = *(_DWORD *)v46;
        *(_DWORD *)uint64_t v46 = 0;
        RealDFile::doReadFromCache(v20, v21, v46, 4, 1);
        unsigned int v22 = *(RealDFile **)a2;
        unint64_t v23 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v23;
        *(_DWORD *)&v53[8] = *(_DWORD *)v46;
        *(_DWORD *)uint64_t v46 = 0;
        RealDFile::doReadFromCache(v22, v23, v46, 4, 1);
        uint64_t v24 = *(RealDFile **)a2;
        unint64_t v25 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v25;
        *(_DWORD *)&v53[12] = *(_DWORD *)v46;
        *(void *)uint64_t v46 = 0;
        RealDFile::doReadFromCache(v24, v25, v46, 8, 1);
        unint64_t v26 = *(RealDFile **)a2;
        unint64_t v27 = *(void *)(a2 + 8) + 8;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v27;
        *(void *)&v53[16] = *(void *)v46;
        *(_DWORD *)uint64_t v46 = 0;
        RealDFile::doReadFromCache(v26, v27, v46, 4, 1);
        unint64_t v28 = *(RealDFile **)a2;
        unint64_t v29 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v29;
        *(_DWORD *)&v53[24] = *(_DWORD *)v46;
        v46[0] = 0;
        RealDFile::doReadFromCache(v28, v29, v46, 1, 1);
        unsigned int v30 = *(RealDFile **)a2;
        unint64_t v31 = *(void *)(a2 + 8) + 1;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v31;
        v53[28] = v46[0];
        v46[0] = 0;
        RealDFile::doReadFromCache(v30, v31, v46, 1, 1);
        int v32 = *(RealDFile **)a2;
        unint64_t v33 = *(void *)(a2 + 8) + 1;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v33;
        v53[29] = v46[0];
        *(_WORD *)uint64_t v46 = 0;
        RealDFile::doReadFromCache(v32, v33, v46, 2, 1);
        *(void *)(a2 + 8) += 2;
        __int16 v54 = *(_WORD *)v46;
        if (*(unsigned __int16 *)v46 != 57082)
        {
          if (*(_DWORD *)(a1 + 24)) {
            unint64_t v36 = *(void **)(a1 + 16);
          }
          else {
            unint64_t v36 = &unk_2140A8F96;
          }
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3565, (uint64_t)"dfutil/realdf", 57, (uint64_t)"%.500s 0x%x 0x%x", v34, v35, (char)v36);
        }
        uint64_t v37 = *(unsigned int *)(a1 + 160);
        if (v37 == *(_DWORD *)(a1 + 164))
        {
          DgnArray<RealDFileDirEntry>::reallocElts(v7, 1, 1);
          uint64_t v37 = *(unsigned int *)(a1 + 160);
        }
        uint64_t v38 = *(void *)(a1 + 152) + (v37 << 7);
        long long v39 = v49;
        long long v40 = v50;
        long long v41 = v51;
        *(_OWORD *)(v38 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v52;
        long long v42 = v48;
        *(_OWORD *)uint64_t v38 = *(_OWORD *)v47;
        *(_OWORD *)(v38 + 16) = v42;
        *(_OWORD *)(v38 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v40;
        *(_OWORD *)(v38 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v41;
        *(_OWORD *)(v38 + 32) = v39;
        *(unsigned char *)(v38 + 95) = 0;
        *(_OWORD *)(v38 + 96) = *(_OWORD *)v53;
        *(void *)(v38 + 112) = *(void *)&v53[16];
        *(_DWORD *)(v38 + 12MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_DWORD *)&v53[24];
        *(unsigned char *)(v38 + 124) = v53[28];
        *(unsigned char *)(v38 + 125) = v53[29];
        *(_WORD *)(v38 + 126) = v54;
        ++*(_DWORD *)(a1 + 160);
        unsigned int v43 = *(_DWORD *)(a1 + 208);
        if (v43 == *(_DWORD *)(a1 + 212))
        {
          DgnPrimArray<char>::reallocElts(a1 + 200, 1, 1);
          unsigned int v43 = *(_DWORD *)(a1 + 208);
        }
        *(unsigned char *)(*(void *)(a1 + 200) + v43) = 0;
        *(_DWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v43 + 1;
        --v14;
        long long v13 = 0uLL;
      }
      while (v14);
      uint64_t v12 = v45 + 1;
    }
    while (v45 + 1 < (unint64_t)*(unsigned int *)(a1 + 112));
  }
}

void RealDFile::readBlockUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a1 + 128);
  unsigned int v11 = 2046 * v10;
  unsigned int v12 = *(_DWORD *)(a1 + 148);
  if (2046 * v10 > v12)
  {
    DgnPrimArray<short>::reallocElts(a1 + 136, v11 - v12, 0);
    int v10 = *(_DWORD *)(a1 + 128);
  }
  *(_DWORD *)(a1 + 144) = v11;
  if (v10)
  {
    int v13 = 0;
    unint64_t v14 = 0;
    do
    {
      unint64_t v15 = (*(unsigned int *)(a1 + 216) + (unint64_t)*(unsigned int *)(*(void *)(a1 + 120) + 4 * v14)) << 12;
      *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v15;
      RealDFile::doReadFromCache(*(RealDFile **)a2, v15, (char *)(*(void *)(a1 + 136) + 2 * (v13 & 0xFFFFFFFE)), 4092, 1);
      unint64_t v16 = *(RealDFile **)a2;
      unint64_t v17 = *(void *)(a2 + 8) + 4092;
      *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v17;
      *(_DWORD *)int v20 = 0;
      RealDFile::doReadFromCache(v16, v17, v20, 4, 1);
      *(void *)(a2 + 8) += 4;
      if (*(_DWORD *)v20 != -307429586)
      {
        if (*(_DWORD *)(a1 + 24)) {
          unsigned __int16 v18 = *(void **)(a1 + 16);
        }
        else {
          unsigned __int16 v18 = &unk_2140A8F96;
        }
        errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3611, (uint64_t)"dfutil/realdf", 58, (uint64_t)"%.500s 0x%x 0x%x", a7, a8, (char)v18);
      }
      ++v14;
      v13 += 2046;
    }
    while (v14 < *(unsigned int *)(a1 + 128));
    unsigned int v11 = *(_DWORD *)(a1 + 144);
  }
  if (*(_DWORD *)(a1 + 96) > v11)
  {
    if (*(_DWORD *)(a1 + 24)) {
      unint64_t v19 = *(void **)(a1 + 16);
    }
    else {
      unint64_t v19 = &unk_2140A8F96;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 3616, (uint64_t)"dfutil/realdf", 47, (uint64_t)"%.500s %u %u", a7, a8, (char)v19);
  }
}

void RealDFile::writeDirEntries(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 88);
  if (v2 > 7) {
    char v3 = 5;
  }
  else {
    char v3 = 6;
  }
  char v39 = v3;
  uint64_t v38 = (*(_DWORD *)(a1 + 160) - 1) >> v3;
  if (v38)
  {
    uint64_t v6 = 0;
    if (v2 <= 7) {
      uint64_t v7 = 64;
    }
    else {
      uint64_t v7 = 32;
    }
    do
    {
      uint64_t v8 = 0;
      unint64_t v9 = (*(unsigned int *)(a1 + 216) + (unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4 * v6)) << 12;
      *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
      uint64_t v40 = v6;
      int v10 = (v6 << v39) + 1;
      do
      {
        uint64_t v11 = *(void *)(a1 + 152);
        uint64_t v12 = v11 + ((unint64_t)(v10 + v8) << 7);
        unsigned int v13 = *(unsigned __int16 *)(a1 + 88);
        if (v13 <= 7) {
          unsigned int v14 = 32;
        }
        else {
          unsigned int v14 = 96;
        }
        if (v13 <= 7) {
          uint64_t v15 = 32;
        }
        else {
          uint64_t v15 = 96;
        }
        RealDFile::doWriteToCache(*(RealDFile **)a2, *(void *)(a2 + 8), (const char *)(v11 + ((unint64_t)(v10 + v8) << 7)), v14);
        unint64_t v16 = *(RealDFile **)a2;
        unint64_t v17 = *(void *)(a2 + 8) + v15;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v17;
        *(_DWORD *)long long v41 = *(_DWORD *)(v12 + 96);
        RealDFile::doWriteToCache(v16, v17, v41, 4u);
        unsigned __int16 v18 = *(RealDFile **)a2;
        unint64_t v19 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v19;
        *(_DWORD *)long long v41 = *(_DWORD *)(v12 + 100);
        RealDFile::doWriteToCache(v18, v19, v41, 4u);
        int v20 = *(RealDFile **)a2;
        unint64_t v21 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
        *(_DWORD *)long long v41 = *(_DWORD *)(v12 + 104);
        RealDFile::doWriteToCache(v20, v21, v41, 4u);
        unsigned int v22 = *(RealDFile **)a2;
        unint64_t v23 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v23;
        *(_DWORD *)long long v41 = *(_DWORD *)(v12 + 108);
        RealDFile::doWriteToCache(v22, v23, v41, 4u);
        uint64_t v24 = *(RealDFile **)a2;
        unint64_t v25 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v25;
        *(void *)long long v41 = *(void *)(v12 + 112);
        RealDFile::doWriteToCache(v24, v25, v41, 8u);
        unint64_t v26 = *(RealDFile **)a2;
        unint64_t v27 = *(void *)(a2 + 8) + 8;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v27;
        *(_DWORD *)long long v41 = *(_DWORD *)(v12 + 120);
        RealDFile::doWriteToCache(v26, v27, v41, 4u);
        unint64_t v28 = *(RealDFile **)a2;
        unint64_t v29 = *(void *)(a2 + 8) + 4;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v29;
        v41[0] = *(unsigned char *)(v12 + 124);
        RealDFile::doWriteToCache(v28, v29, v41, 1u);
        unsigned int v30 = *(RealDFile **)a2;
        unint64_t v31 = *(void *)(a2 + 8) + 1;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v31;
        v41[0] = *(unsigned char *)(v12 + 125);
        RealDFile::doWriteToCache(v30, v31, v41, 1u);
        int v32 = *(RealDFile **)a2;
        unint64_t v33 = *(void *)(a2 + 8) + 1;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v33;
        *(_WORD *)long long v41 = *(_WORD *)(v12 + 126);
        RealDFile::doWriteToCache(v32, v33, v41, 2u);
        uint64_t v36 = *(void *)(a2 + 8) + 2;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v36;
        ++v8;
        char v37 = 6;
        if (*(unsigned __int16 *)(a1 + 88) > 7u) {
          char v37 = 7;
        }
        if (v36 != (v8 << v37) + v9) {
          errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 1697, (uint64_t)"dfutil/realdf", 26, (uint64_t)"%llu %llu", v34, v35, v36);
        }
      }
      while (v7 != v8);
      uint64_t v6 = v40 + 1;
    }
    while (v40 + 1 != v38);
  }
}

void RealDFile::writeBlockUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 128);
  if (v2)
  {
    uint64_t v5 = 0;
    while (*(_DWORD *)(*(void *)(a1 + 120) + 4 * v5) != -1)
    {
      if (v2 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 128);
        break;
      }
    }
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v5;
      do
      {
        unint64_t v8 = (*(unsigned int *)(a1 + 216) + (unint64_t)*(unsigned int *)(*(void *)(a1 + 120) + 4 * v6)) << 12;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8;
        RealDFile::doWriteToCache(*(RealDFile **)a2, v8, (const char *)(*(void *)(a1 + 136) + 2 * (2046 * v6)), 0xFFCu);
        unint64_t v9 = *(RealDFile **)a2;
        unint64_t v10 = *(void *)(a2 + 8) + 4092;
        *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10;
        *(_DWORD *)uint64_t v11 = -307429586;
        RealDFile::doWriteToCache(v9, v10, v11, 4u);
        *(void *)(a2 + 8) += 4;
        ++v6;
      }
      while (v6 != v7);
    }
  }
}

unint64_t RealDFile::clearPreviousBigReadCache(unint64_t this, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(this + 368);
  if (v2 < a2)
  {
    uint64_t v4 = this;
    uint64_t v5 = this + 352;
    while (v2 < *(_DWORD *)(v4 + 344))
    {
      uint64_t v6 = *(void *)(*(void *)(v4 + 336) + 8 * v2);
      if (v6)
      {
        unsigned int v7 = *(_DWORD *)(v4 + 360);
        if (v7 == *(_DWORD *)(v4 + 364))
        {
          this = DgnPrimArray<unsigned long long>::reallocElts(v5, 1, 1);
          unsigned int v7 = *(_DWORD *)(v4 + 360);
          uint64_t v8 = *(unsigned int *)(v4 + 368);
          unsigned int v2 = *(_DWORD *)(v4 + 368);
        }
        else
        {
          uint64_t v8 = v2;
        }
        *(void *)(*(void *)(v4 + 352) + 8 * v7) = v6;
        *(_DWORD *)(v4 + 36MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v7 + 1;
        *(void *)(*(void *)(v4 + 336) + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
        int v9 = *(_DWORD *)(v4 + 372) - 1;
        *(_DWORD *)(v4 + 372) = v9;
        if (!v9)
        {
          *(_DWORD *)(v4 + 36DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
          return this;
        }
      }
      *(_DWORD *)(v4 + 36DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = ++v2;
      if (v2 >= a2) {
        return this;
      }
    }
  }
  return this;
}

void RealDFile::fillBigCache(RealDFile *this, unsigned int a2)
{
  int v2 = a2;
  unsigned int v4 = *((_DWORD *)this + 95) * *((_DWORD *)this + 94);
  if (*((unsigned char *)this + 385)) {
    RealDFile::clearPreviousBigReadCache((unint64_t)this, a2);
  }
  if (*((unsigned char *)this + 384)) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = v4 >> 1;
  }
  unsigned int v6 = v4 + ~v5;
  unsigned int v7 = (void *)((char *)this + 336);
  if (v5) {
    BOOL v8 = v2 < 1;
  }
  else {
    BOOL v8 = 1;
  }
  unsigned int v9 = v2;
  if (!v8)
  {
    uint64_t v10 = v2;
    int v11 = (v4 >> 1) - 1;
    while (v10 > *((int *)this + 86) || !*(void *)(*v7 + 8 * (v10 - 1)))
    {
      unsigned int v9 = v10 - 1;
      if (v11-- != 0)
      {
        BOOL v8 = v10-- <= 1;
        if (!v8) {
          continue;
        }
      }
      goto LABEL_19;
    }
    unsigned int v9 = v10;
  }
LABEL_19:
  unsigned int v13 = *((_DWORD *)this + 95);
  if (v9 % v13) {
    BOOL v14 = v6 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    unsigned int v15 = v6;
    unsigned int v16 = v9;
LABEL_32:
    unsigned int v6 = v15;
    if (!v15)
    {
LABEL_33:
      int v18 = v2;
      goto LABEL_43;
    }
  }
  else
  {
    while (1)
    {
      unsigned int v16 = v9 - 1;
      if ((signed int)v9 <= *((_DWORD *)this + 86))
      {
        if (*(void *)(*v7 + 8 * v16)) {
          break;
        }
      }
      unsigned int v15 = v6 - 1;
      if (v16 % v13) {
        BOOL v17 = v6 == 1;
      }
      else {
        BOOL v17 = 1;
      }
      --v9;
      --v6;
      if (v17) {
        goto LABEL_32;
      }
    }
    unsigned int v16 = v9;
  }
  int v19 = v6 + v2;
  if (v2 <= *((_DWORD *)this + 54) + *((_DWORD *)this + 24) - 1) {
    int v18 = *((_DWORD *)this + 54) + *((_DWORD *)this + 24) - 1;
  }
  else {
    int v18 = v2;
  }
  while (v18 != v2)
  {
    if (v2 + 1 < *((_DWORD *)this + 86) && *(void *)(*v7 + 8 * (v2 + 1))) {
      goto LABEL_33;
    }
    ++v2;
    if (!--v6)
    {
      int v18 = v19;
      break;
    }
  }
LABEL_43:
  if (*((_DWORD *)this + 101) < v4 << 12)
  {
    long long v42 = 0;
    *((_DWORD *)this + 101) = realloc_array(*((void **)this + 49), &v42, v4 << 12, *((unsigned int *)this + 100), *((unsigned int *)this + 100), 1);
    *((void *)this + 49) = v42;
  }
  *((_DWORD *)this + 10MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v4 << 12;
  OsFile::seekFromBeg(*((OsFile **)this + 10), (uint64_t)(int)v16 << 12);
  uint64_t v20 = (v18 + 1);
  if (OsFile::readBytes(*((OsFile **)this + 10), *((char **)this + 49), (v20 - v16) << 12, v21, v22, v23, v24, v25) != (v20 - v16) << 12)
  {
    uint64_t v31 = *((void *)this + 10);
    if (*(_DWORD *)(v31 + 8)) {
      int v32 = *(void **)v31;
    }
    else {
      int v32 = &unk_2140A8F96;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/realdf.cpp", 4176, (uint64_t)"dfutil/realdf", 60, (uint64_t)"%.500s %llu %llu", v29, v30, (char)v32);
  }
  DecryptBuffer(*((unsigned __int8 **)this + 49), (v20 - v16) << 12, *((unsigned __int16 *)this + 46), v26, v27, v28, v29, v30);
  LODWORD(v33) = *((_DWORD *)this + 86);
  if ((int)v33 <= v18)
  {
    unsigned int v34 = *((_DWORD *)this + 87);
    if (v20 > v34)
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 336, v20 - v34, 1);
      LODWORD(v33) = *((_DWORD *)this + 86);
    }
    if (v33 <= v20)
    {
      if (v33 < v20)
      {
        uint64_t v33 = v33;
        do
          *(void *)(*v7 + 8 * v33++) = 0;
        while (v20 != v33);
      }
    }
    else
    {
      DgnIOwnArray<DgnPrimFixArray<char> *>::destructAt((uint64_t)this + 336, v18 + 1, v33 - v20);
    }
    *((_DWORD *)this + 86) = v20;
  }
  if (!*((_DWORD *)this + 93) || *((_DWORD *)this + 92) > (signed int)v16) {
    *((_DWORD *)this + 92) = v16;
  }
  if ((int)v16 <= v18)
  {
    unsigned int v35 = 0;
    int v36 = v18 + 1;
    do
    {
      int v37 = *((_DWORD *)this + 90);
      if (v37)
      {
        int v38 = v37 - 1;
        uint64_t v39 = v16;
        *(void *)(*((void *)this + 42) + 8 * v16) = *(void *)(*((void *)this + 44)
                                                                    + 8 * (v37 - 1));
        *(void *)(*((void *)this + 44) + 8 * (v37 - 1)) = 0;
        DgnIOwnArray<DgnPrimFixArray<char> *>::destructAt((uint64_t)this + 352, v37 - 1, 1);
        *((_DWORD *)this + 9MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v38;
      }
      else
      {
        uint64_t v40 = MemChunkAlloc(0x10uLL, 0);
        *((_DWORD *)v40 + 2) = 0;
        *uint64_t v40 = 0;
        *uint64_t v40 = (uint64_t)MemChunkAlloc(0x1000uLL, 0);
        *((_DWORD *)v40 + 2) = 4096;
        uint64_t v39 = v16;
        *(void *)(*v7 + 8 * v16) = v40;
      }
      ++*((_DWORD *)this + 93);
      uint64_t v41 = *(void *)(*((void *)this + 42) + 8 * v39);
      memcpy(*(void **)v41, (const void *)(*((void *)this + 49) + v35), *(unsigned int *)(v41 + 8));
      v35 += 4096;
      ++v16;
    }
    while (v36 != v16);
  }
}

uint64_t RealDFile::freeBlock(RealDFile *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 19);
  uint64_t v3 = a2;
  uint64_t v4 = v2 + ((unint64_t)a2 << 7);
  unsigned int v7 = *(_DWORD *)(v4 + 104);
  unsigned int v5 = (_DWORD *)(v4 + 104);
  uint64_t v6 = v7;
  if (v7 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = *((void *)this + 17);
  *(_WORD *)(v9 + 2 * v6) = 0;
  if (*((_DWORD *)this + 24) == v6 + 1)
  {
    for (; v6; LODWORD(v6) = v6 - 1)
    {
      if (*(_WORD *)(v9 + 2 * v6)) {
        break;
      }
    }
    uint64_t v10 = (v6 + 1);
    OsFile::shrinkSize(*((OsFile **)this + 10), (*((unsigned int *)this + 54) + v10) << 12);
    if (*((_DWORD *)this + 24) > v10) {
      *((_DWORD *)this + 24) = v10;
    }
  }
  unsigned int v11 = *((_DWORD *)this + 36);
  if (v11 <= v6) {
    uint64_t result = v11 - 1;
  }
  else {
    uint64_t result = v6;
  }
  if (result == -1)
  {
LABEL_14:
    *(void *)(v2 + (v3 << 7) + 10MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = -1;
    uint64_t result = 0xFFFFFFFFLL;
  }
  else
  {
    while (*(unsigned __int16 *)(*((void *)this + 17) + 2 * result) != v3)
    {
      uint64_t result = (result - 1);
      if (result == -1) {
        goto LABEL_14;
      }
    }
    _DWORD *v5 = result;
  }
  --*(_DWORD *)(v2 + (v3 << 7) + 96);
  *((unsigned char *)this + 296) = 1;
  return result;
}

void RealDFile::fillSubFileSizeInfo(RealDFile *this)
{
  unsigned int v1 = *((_DWORD *)this + 40);
  if (v1 >= 2)
  {
    for (unsigned __int16 i = 1; i < v1; ++i)
    {
      uint64_t v4 = (const char *)(*((void *)this + 19) + ((unint64_t)i << 7));
      if (*v4)
      {
        DgnString::DgnString((DgnString *)&v7, v4);
        if (v8) {
          unsigned int v5 = v7;
        }
        else {
          unsigned int v5 = &unk_2140A8F96;
        }
        uint64_t v6 = (*(uint64_t (**)(RealDFile *, void *))(*(void *)this + 48))(this, v5);
        DFileProgressInfo::add(*((DFileProgressInfo **)this + 1), (const DgnString *)&v7, v6);
        DgnString::~DgnString((DgnString *)&v7);
        unsigned int v1 = *((_DWORD *)this + 40);
      }
    }
  }
}

void sub_2140147D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RealDFile::fillSubFileSizeInfo(uint64_t a1, void *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 160);
  if (v2 >= 2)
  {
    unsigned __int16 v5 = 1;
    do
    {
      unsigned __int16 v6 = v5;
      if (*(unsigned char *)(*a2 + v5))
      {
        DgnString::DgnString((DgnString *)&v9, (const char *)(*(void *)(a1 + 152) + ((unint64_t)v5 << 7)));
        if (v10) {
          unsigned int v7 = v9;
        }
        else {
          unsigned int v7 = &unk_2140A8F96;
        }
        uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 48))(a1, v7);
        DFileProgressInfo::add(*(DFileProgressInfo **)(a1 + 8), (const DgnString *)&v9, v8);
        DgnString::~DgnString((DgnString *)&v9);
        unsigned int v2 = *(_DWORD *)(a1 + 160);
      }
      unsigned __int16 v5 = v6 + 1;
    }
    while (v2 > (unsigned __int16)(v6 + 1));
  }
}

void sub_2140148B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RealDFile::attachProgressInfo(uint64_t this, DFileProgressInfo *a2)
{
  *(void *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  return this;
}

void SetShadowDebugShowDFileStatsOnDestruction(void)
{
  gShadowDebugShowDFileStatsOnDestructiouint64_t n = *(unsigned char *)(gParDebugShowDFileStatsOnDestruction + 41);
}

unint64_t DgnArray<RealDFileDirEntry>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  uint64_t v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, (unint64_t)v6 << 7, v5 << 7, v5 << 7, 1);
  *(_DWORD *)(a1 + 12) = result >> 7;
  *(void *)a1 = v8;
  return result;
}

unint64_t DgnArray<RealDFileDirEntry>::copyArraySlice(unint64_t result, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7 = result;
  *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t result = DgnArray<RealDFileDirEntry>::reallocElts(result, a4 - v8, 0);
    unsigned int v9 = *(_DWORD *)(v7 + 8);
  }
  unsigned int v11 = a4;
  unsigned int v10 = v9;
  do
  {
    unint64_t v12 = *a2 + ((unint64_t)a3 << 7);
    unint64_t v13 = *(void *)v7 + ((unint64_t)v10 << 7);
    long long v15 = *(_OWORD *)(v12 + 32);
    long long v14 = *(_OWORD *)(v12 + 48);
    long long v16 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v13 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_OWORD *)(v12 + 80);
    long long v17 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
    *(_OWORD *)(v13 + 16) = v17;
    *(_OWORD *)(v13 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
    *(_OWORD *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v16;
    *(_OWORD *)(v13 + 32) = v15;
    *(unsigned char *)(v13 + 95) = 0;
    *(_OWORD *)(v13 + 96) = *(_OWORD *)(v12 + 96);
    *(void *)(v13 + 112) = *(void *)(v12 + 112);
    *(_DWORD *)(v13 + 12MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_DWORD *)(v12 + 120);
    *(unsigned char *)(v13 + 124) = *(unsigned char *)(v12 + 124);
    *(unsigned char *)(v13 + 125) = *(unsigned char *)(v12 + 125);
    *(_WORD *)(v13 + 126) = *(_WORD *)(v12 + 126);
    unsigned int v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    unint64_t v18 = a4 - (unint64_t)v10;
    unint64_t v19 = (unint64_t)v10 << 7;
    do
    {
      unint64_t v20 = *(void *)v7 + v19;
      *(_OWORD *)(v20 + 11MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0uLL;
      *(_OWORD *)(v20 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0uLL;
      *(_OWORD *)(v20 + 96) = 0uLL;
      *(_OWORD *)(v20 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0uLL;
      *(_OWORD *)(v20 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0uLL;
      *(_OWORD *)(v20 + 16) = 0uLL;
      *(_OWORD *)(v20 + 32) = 0uLL;
      *(_OWORD *)unint64_t v20 = 0uLL;
      *(_WORD *)(v20 + 126) = -8454;
      v19 += 128;
      --v18;
    }
    while (v18);
  }
  *(_DWORD *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a4;
  return result;
}

uint64_t DgnIOwnArray<DgnPrimFixArray<char> *>::destructAt(uint64_t result, int a2, int a3)
{
  if (a3 + a2 > a2)
  {
    int v3 = (void *)result;
    uint64_t v4 = a2;
    uint64_t v5 = a3 + a2 - 1;
    do
    {
      unint64_t result = DgnDelete<DgnPrimFixArray<char>>(*(void *)(*v3 + 8 * v5));
      *(void *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

uint64_t DgnDelete<DgnPrimFixArray<char>>(uint64_t result)
{
  if (result)
  {
    uint64_t fixed = (void *)DgnPrimFixArray<double>::~DgnPrimFixArray(result);
    return MemChunkFree(fixed, 0);
  }
  return result;
}

uint64_t BaseSyncNet::BaseSyncNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  unsigned int v11 = (void *)AcousticNet::AcousticNet(a1, a2, a3, a4, a5, a6, a7, a9);
  v11[27] = 0;
  *unsigned int v11 = &unk_26C4DF4B8;
  v11[28] = 0;
  *(void *)(a1 + 16MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(void *)(a1 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  NodeNetNode::NodeNetNode((NodeNetNode *)(v11 + 29), 0);
  *(unsigned char *)(a1 + 114) = a8;
  *(unsigned char *)(a1 + 282) = 0;
  *(unsigned char *)(a1 + 28MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(_DWORD *)(a1 + 284) = 20000;
  int v12 = *(_DWORD *)(a1 + 48);
  if (v12)
  {
    if (v12 == 1)
    {
      unint64_t v18 = Sequence::scoreOneSkip;
      BOOL v14 = a8 == 0;
      if (a8) {
        unint64_t v18 = Sequence::scoreOneSkipNBest;
      }
      *(void *)(a1 + 20MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v18;
      *(void *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      long long v15 = Sequence::scoreOneSkipDeadSeq;
      long long v16 = Sequence::scoreOneSkipDeadSeqNBest;
    }
    else
    {
      if (v12 != 2)
      {
        *(_OWORD *)(a1 + 20MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
        *(_OWORD *)(a1 + 184) = 0u;
        return a1;
      }
      unint64_t v13 = Sequence::scoreMultiSkip;
      BOOL v14 = a8 == 0;
      if (a8) {
        unint64_t v13 = Sequence::scoreMultiSkipNBest;
      }
      *(void *)(a1 + 20MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v13;
      *(void *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      long long v15 = Sequence::scoreMultiSkipDeadSeq;
      long long v16 = Sequence::scoreMultiSkipDeadSeqNBest;
    }
  }
  else
  {
    long long v17 = Sequence::scoreNoSkip;
    BOOL v14 = a8 == 0;
    if (a8) {
      long long v17 = Sequence::scoreNoSkipNBest;
    }
    *(void *)(a1 + 20MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v17;
    *(void *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    long long v15 = Sequence::scoreNoSkipDeadSeq;
    long long v16 = Sequence::scoreNoSkipDeadSeqNBest;
  }
  if (!v14) {
    long long v15 = v16;
  }
  *(void *)(a1 + 184) = v15;
  *(void *)(a1 + 192) = 0;
  return a1;
}

void sub_214014CF0(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v2);
  AcousticNet::~AcousticNet(v1);
  _Unwind_Resume(a1);
}

void BaseSyncNet::~BaseSyncNet(BaseSyncNet *this, Sequence *a2)
{
  *(void *)this = &unk_26C4DF4B8;
  int v3 = (void *)((char *)this + 216);
  if (*((_DWORD *)this + 56))
  {
    unint64_t v4 = 0;
    do
      Sequence::deleteSequence(*(Sequence **)(*v3 + 8 * v4++), a2);
    while (v4 < *((unsigned int *)this + 56));
  }
  NodeNetNode::~NodeNetNode((BaseSyncNet *)((char *)this + 232));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);

  AcousticNet::~AcousticNet(this);
}

void Sequence::deleteSequence(Sequence *this, Sequence *a2)
{
  PredStruct::~PredStruct(this);
  if (v2)
  {
    MemChunkFree(v2, 0);
  }
}

uint64_t BaseSyncNet::sizeObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = HmmNet::sizeObject((unsigned int *)a1, a2);
  uint64_t v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 8;
  }
  if (a2 == 3) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 12;
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v6 + v4 + v5;
  if (a2 == 3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 4;
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      v7 += 8;
    }
    else {
      v7 += 32;
    }
  }
  uint64_t active = sizeObject<ActiveWord *>(a1 + 216, a2);
  return ((a2 != 3) | (2 * (a2 != 3)) | v8)
       + (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 232) + 16))(a1 + 232, a2)
       + v7
       + active;
}

uint64_t BaseSyncNet::getBestScore(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 224);
  if ((int)v4 < 1)
  {
    uint64_t v6 = 20000;
  }
  else
  {
    unint64_t v5 = v4 + 1;
    uint64_t v6 = 20000;
    do
    {
      uint64_t v10 = 0;
      Bestuint64_t Score = Sequence::getBestScore(*(void *)(*(void *)(a1 + 216) + 8 * (v5 - 2)), &v10);
      if ((int)BestScore < (int)v6)
      {
        *a2 = v10;
        uint64_t v6 = BestScore;
      }
      --v5;
    }
    while (v5 > 1);
  }
  if (*(unsigned char *)(a1 + 280))
  {
    uint64_t v8 = *(__int16 *)(a1 + 250);
    if ((int)v6 > (int)v8)
    {
      *a2 = a1 + 240;
      return v8;
    }
  }
  return v6;
}

uint64_t BaseSyncNet::updateBestNodeScore(BaseSyncNet *this)
{
  uint64_t result = *((unsigned int *)this + 71);
  if (*((unsigned char *)this + 280))
  {
    int v3 = *((__int16 *)this + 125);
    if ((int)result >= v3) {
      return v3;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t BaseSyncNet::addArc(BaseSyncNet *this, const Node *a2, Node *a3)
{
  if ((BaseSyncNet *)((char *)this + 240) == a3) {
    int v3 = (char *)this + 264;
  }
  else {
    int v3 = (char *)a3 - 16;
  }
  return PredStruct::addPred((uint64_t)v3, (uint64_t)a2);
}

uint64_t SyncNet::attachInPort(SyncNet *this, unsigned int a2, Node *a3)
{
  return PredStruct::addPred((uint64_t)a3 - 16, *(void *)(*((void *)this + 7) + 8 * a2));
}

uint64_t BaseSyncNet::unpackSequence(void *a1, unsigned __int16 *a2, int a3, uint64_t *a4, void *a5, uint64_t a6)
{
  uint64_t v8 = a2;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = a3;
  if (a3 < 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    LODWORD(v13) = 0;
    BOOL v14 = a2 + 2;
    uint64_t v15 = a3;
    do
    {
      unsigned int v16 = *v14;
      v14 += 6;
      uint64_t v13 = v13 + *(unsigned __int8 *)(*(void *)(v11 + 16) + v16);
      --v15;
    }
    while (v15);
  }
  int v17 = *(_DWORD *)(v10 + 4);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 336))(a1, v13, a6);
  uint64_t v19 = result;
  uint64_t v20 = a1[1];
  uint64_t v21 = (_DWORD *)(v20 + 302832);
  unsigned int v22 = *(_DWORD *)(v20 + 302836);
  if (v13 <= v22)
  {
    _DWORD *v21 = v13;
    uint64_t v23 = a5;
    uint64_t v24 = a4;
    if (!v13) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(v20 + 302824, v13 - v22, 0);
    _DWORD *v21 = v13;
    uint64_t v23 = a5;
    uint64_t v24 = a4;
  }
  uint64_t v25 = 0;
  unsigned int v26 = v13 - 1;
  if (v17 == 1) {
    unsigned int v26 = 0;
  }
  do
  {
    *(void *)(*(void *)(a1[1] + 302824) + 8 * v25++) = v19 + 24 * v26 + 12;
    v26 += v17;
  }
  while (v13 != v25);
LABEL_12:
  uint64_t v34 = 0;
  uint64_t v27 = a1[1];
  if (a3 < 1)
  {
    uint64_t v29 = 0;
    int v30 = 0;
  }
  else
  {
    uint64_t v28 = *(uint64_t **)(v27 + 302824);
    do
    {
      uint64_t result = (uint64_t)PicMgr::getNodeDataPtrs((unsigned __int16 *)v11, v28, *(void **)(a1[1] + 32), v8, (_DWORD *)&v34 + 1, &v34);
      v28 += *(unsigned __int8 *)(*(void *)(v11 + 16) + v8[2]);
      v8 += 6;
      --v12;
    }
    while (v12);
    uint64_t v27 = a1[1];
    uint64_t v29 = v34;
    int v30 = HIDWORD(v34);
  }
  uint64_t v31 = v27 + 302664;
  int v32 = *(_DWORD *)(v31 + 4);
  *(_DWORD *)v31 += a3;
  *(_DWORD *)(v31 + 4) = v32 + v30;
  *(void *)(v31 + 8) += v29;
  uint64_t *v24 = v19;
  void *v23 = v19 + 24 * v13 - 24;
  return result;
}

uint64_t BaseSyncNet::unpackEndSilence(uint64_t **this)
{
  uint64_t v2 = ((uint64_t (*)(uint64_t **, uint64_t, void))(*this)[42])(this, 1, 0);
  uint64_t v3 = v2;
  *(void *)(v2 + 12) = 0;
  *(_DWORD *)(v2 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  uint64_t v4 = this[9];
  if (*((_DWORD *)this + 13)) {
    uint64_t *v4 = v2;
  }
  else {
    PredStruct::addPred(*v4 + 16, v2);
  }
  this[18] = (uint64_t *)v3;
  return v3;
}

uint64_t BaseSyncNet::unpackOneFromPicNodes(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7)
{
  unsigned int v9 = a3;
  uint64_t v12 = a1[1];
  uint64_t v13 = *(void *)(v12 + 16);
  int v14 = *(_DWORD *)(v12 + 4);
  uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 336))(a1, a3, a7);
  uint64_t v16 = a1[1];
  int v17 = (unsigned int *)(v16 + 302832);
  unsigned int v18 = *(_DWORD *)(v16 + 302836);
  if (v9 <= v18)
  {
    *int v17 = v9;
    if (!v9)
    {
      unsigned int v21 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(v16 + 302824, v9 - v18, 0);
    *int v17 = v9;
  }
  uint64_t v19 = 0;
  unsigned int v20 = v9 - 1;
  if (v14 == 1) {
    unsigned int v20 = 0;
  }
  unsigned int v21 = v9;
  do
  {
    *(void *)(*(void *)(a1[1] + 302824) + 8 * v19++) = v15 + 24 * v20 + 12;
    v20 += v14;
  }
  while (v9 != v19);
LABEL_10:
  uint64_t result = PicMgr::getNodeDataPtrsFromPicNodes(v13, *(uint64_t **)(a1[1] + 302824), *(void **)(a1[1] + 32), a2, v9);
  *a5 = v15;
  *a6 = v15 + 24 * v21 - 24;
  return result;
}

uint64_t BaseSyncNet::scoreIntSilNode2(uint64_t this, uint64_t a2, int a3)
{
  if (*(unsigned char *)(this + 280))
  {
    *(_DWORD *)(this + 152) = *(__int16 *)(this + 250) <= a3;
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)this + 320))(this, *(unsigned __int8 *)(this + 113), a2);
  }
  else
  {
    *(_DWORD *)(this + 152) = 0;
  }
  return this;
}

void SyncNet::~SyncNet(SyncNet *this)
{
  *(void *)this = &unk_26C4E4F20;
  uint64_t v2 = (PredStruct *)*((void *)this + 40);
  if (v2)
  {
    PredStruct::~PredStruct(v2);
    MemChunkFree(v3, 0);
  }
  uint64_t v4 = (void *)*((void *)this + 36);
  if (v4) {
    MemChunkFree(v4, 0);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);

  BaseSyncNet::~BaseSyncNet(this, v5);
}

{
  uint64_t vars8;

  SyncNet::~SyncNet(this);

  JUMPOUT(0x216698730);
}

uint64_t SyncNet::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = BaseSyncNet::sizeObject(a1, a2);
  int v5 = gShadowDiagnosticShowIdealizedObjectSizes;
  uint64_t active = sizeObject<ActiveWord *>(a1 + 304, v2);
  uint64_t v7 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v7 = 8;
  }
  if (v2 == 3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v2 != 2)
  {
    uint64_t v9 = *(void *)(a1 + 320);
    if (v9) {
      v8 += sizeObject(v9, v2);
    }
  }
  if (v5) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = 16;
  }
  uint64_t v11 = sizeObject(a1 + 328, v2);
  if (v2 == 3) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v10;
  }
  return v4 + 2 * (v2 != 3) + active + v8 + v12 + v11 + ((2 * (v2 != 3)) | (8 * (v2 != 3)));
}

uint64_t SyncNet::getBestScore(uint64_t a1, void *a2)
{
  Bestuint64_t Score = BaseSyncNet::getBestScore(a1, a2);
  if (*(_DWORD *)(a1 + 312))
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v10 = 0;
      uint64_t v6 = Sequence::getBestScore(*(void *)(*(void *)(a1 + 304) + 8 * v5), &v10);
      if ((int)v6 < (int)BestScore)
      {
        *a2 = v10;
        Bestuint64_t Score = v6;
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 312));
  }
  uint64_t v7 = *(void *)(a1 + 320);
  if (v7)
  {
    uint64_t v10 = 0;
    uint64_t v8 = Sequence::getBestScore(v7, &v10);
    if ((int)v8 < (int)BestScore)
    {
      *a2 = v10;
      return v8;
    }
  }
  return BestScore;
}

uint64_t SyncNet::updateBestNodeScore(SyncNet *this)
{
  signed int v1 = *((_DWORD *)this + 71);
  if (*((unsigned char *)this + 280) && v1 >= *((__int16 *)this + 125)) {
    signed int v1 = *((__int16 *)this + 125);
  }
  if (*((_DWORD *)this + 88) < v1) {
    signed int v1 = *((_DWORD *)this + 88);
  }
  unsigned int v2 = *((_DWORD *)this + 89);
  if ((int)v2 >= v1) {
    return v1;
  }
  else {
    return v2;
  }
}

uint64_t SyncNet::scoreNetInternal(int32x2_t *this, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  uint64_t v6 = a3;
  uint64_t v7 = this;
  __int32 v8 = this[13].i32[0];
  __int32 v65 = this[19].i32[0];
  unsigned int v66 = 0;
  if (v8)
  {
    uint64_t v61 = this + 44;
    BOOL v9 = this[44].i32[0] <= (int)a3;
    uint64_t v10 = (char *)&this[45] + 2;
    this[45].i8[2] = v9;
    uint64_t v11 = (char *)&this[45] + 3;
    this[45].i8[3] = this[44].i32[1] <= (int)a3;
    this[44] = vdup_n_s32(0x4E20u);
    BOOL v12 = this[35].i32[1] <= (int)a3;
  }
  else
  {
    BOOL v9 = 0;
    BOOL v12 = 0;
    uint64_t v10 = (char *)&this[45] + 2;
    this[45].i16[1] = 0;
    uint64_t v61 = this + 44;
    uint64_t v11 = (char *)&this[45] + 3;
    this[44] = vdup_n_s32(0x4E20u);
  }
  this[35].i8[2] = v12;
  int v13 = 20000;
  this[35].i32[1] = 20000;
  if (this[39].i32[0])
  {
    int v13 = BaseSyncNet::scoreIntSilNode1<true>((uint64_t)this, v9, this[14].u8[2], a3, a4, a5, a6, &v66);
    int v14 = (uint64_t **)v7[38];
    uint64_t v15 = **v14;
    if (v8) {
      BOOL v16 = *(__int16 *)(v15 + 8) <= (int)v6;
    }
    else {
      BOOL v16 = 0;
    }
    uint64_t v17 = v7[39].u32[0];
    if (*v10 || v16)
    {
      if (*v10)
      {
        uint64_t v21 = (uint64_t)v7[26];
        uint64_t v60 = (uint64_t (*)(void *, uint64_t, BOOL, uint64_t, void, void, void, void, _DWORD, unsigned int *, __int32 *))v7[25];
        *(_DWORD *)(*(void *)&v7[1] + 302648) += v17;
      }
      else
      {
        uint64_t v21 = (uint64_t)v7[24];
        uint64_t v60 = (uint64_t (*)(void *, uint64_t, BOOL, uint64_t, void, void, void, void, _DWORD, unsigned int *, __int32 *))v7[23];
        *(_DWORD *)(*(void *)&v7[1] + 302652) += v17;
      }
      if (v17)
      {
        do
        {
          unsigned int v22 = *v14;
          uint64_t v23 = (uint64_t *)((char *)*v14 + (v21 >> 1));
          if (v21) {
            __int32 v24 = (*(uint64_t (**)(void *, uint64_t, BOOL, uint64_t, void, void, void, void, _DWORD, unsigned int *, __int32 *))(*v23 + v60))(v23, v15, v16, v6, a4, a5, *(void *)&v7[1], v7[14].u32[1], 0, &v66, &v65);
          }
          else {
            __int32 v24 = v60(v23, v15, v16, v6, a4, a5, *(void *)&v7[1], v7[14].u32[1], 0, &v66, &v65);
          }
          if (v24 < v7[44].i32[0]) {
            v61->i32[0] = v24;
          }
          if (v13 >= SLOWORD(v22[3 * *((unsigned __int16 *)v22 + 5)])) {
            int v13 = SLOWORD(v22[3 * *((unsigned __int16 *)v22 + 5)]);
          }
          ++v14;
          --v17;
        }
        while (v17);
      }
      v7[35].i8[1] = 1;
    }
    else if (v7[35].i8[1])
    {
      v7[35].i8[1] = 0;
      uint64_t v18 = v7[10].u32[0];
      if ((int)v18 >= 2)
      {
        int32x2_t v19 = v7[9];
        unint64_t v20 = v18 + 1;
        do
          *(_WORD *)(*(void *)(*(void *)&v19 + 8 * (v20-- - 2)) + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 20000;
        while (v20 > 2);
      }
    }
  }
  v7[13].i16[2] = v13;
  int32x2_t v25 = v7[1];
  if (v13 < *(__int16 *)(*(void *)&v25 + 246)) {
    *(_WORD *)(*(void *)&v25 + 246) = v13;
  }
  int32x2_t v26 = v7[40];
  int v27 = v7[35].u8[2];
  if (v26)
  {
    uint64_t v28 = **(void **)&v26;
    if (v7[35].i8[2]) {
      BOOL v29 = *(__int16 *)(v28 + 8) <= (int)v6;
    }
    else {
      BOOL v29 = 0;
    }
    if (*v11 || v29)
    {
      if (*v11)
      {
        int v30 = (uint64_t (*)(void *, uint64_t, BOOL, uint64_t, void, void))v7[25];
        uint64_t v31 = (uint64_t)v7[26];
        ++*(_DWORD *)(*(void *)&v25 + 302640);
      }
      else
      {
        int v30 = (uint64_t (*)(void *, uint64_t, BOOL, uint64_t, void, void))v7[23];
        uint64_t v31 = (uint64_t)v7[24];
        ++*(_DWORD *)(*(void *)&v25 + 302644);
      }
      int v32 = (void *)(*(void *)&v26 + (v31 >> 1));
      if (v31) {
        int v30 = *(uint64_t (**)(void *, uint64_t, BOOL, uint64_t, void, void))(*v32 + v30);
      }
      v7[44].i32[1] = v30(v32, v28, v29, v6, a4, a5);
      int v27 = v7[35].u8[2];
    }
    else
    {
      *(_WORD *)(*(void *)&v26 + 24 * (*(unsigned __int16 *)(*(void *)&v26 + 10) - 1) + 24) = 20000;
    }
  }
  uint64_t v33 = v7[28].u32[0];
  uint64_t v34 = (uint64_t *)v7[27];
  if (v27)
  {
    int v58 = (uint64_t (*)(void *))v7[25];
    uint64_t v62 = (uint64_t)v7[26];
    int32x2_t v35 = v7[1];
    unsigned __int16 v36 = -25048;
  }
  else
  {
    int32x2_t v35 = v7[1];
    if (!v7[14].i8[0]) {
      goto LABEL_66;
    }
    int v58 = (uint64_t (*)(void *))v7[23];
    uint64_t v62 = (uint64_t)v7[24];
    unsigned __int16 v36 = -25044;
  }
  *(_DWORD *)(*(void *)&v35 + (v36 | 0x40000u)) += v33;
  if (v33)
  {
    int v37 = 0;
    uint64_t v59 = v7;
    int v38 = -1;
    uint64_t v39 = 20000;
    while (1)
    {
      uint64_t v40 = *v34;
      uint64_t v41 = (void *)(*v34 + (v62 >> 1));
      if (v62) {
        long long v42 = *(uint64_t (**)(void *))(*v41 + v58);
      }
      else {
        long long v42 = v58;
      }
      uint64_t v43 = v6;
      __int32 v44 = v42(v41);
      if (v44 < v7[35].i32[1]) {
        v7[35].i32[1] = v44;
      }
      uint64_t v45 = v40 + 24 * (*(unsigned __int16 *)(v40 + 10) - 1);
      uint64_t v46 = *(__int16 *)(v45 + 24);
      int v47 = v46 - v39;
      if ((int)v46 - (int)v39 < 0)
      {
        if (!v7[14].i8[2])
        {
          uint64_t v39 = *(__int16 *)(v45 + 24);
          int v37 = (int *)(v45 + 16);
          goto LABEL_63;
        }
        long long v48 = v37;
        int v49 = v38;
        int v47 = v39 - v46;
        int v37 = (int *)(v45 + 16);
        int v38 = *(_DWORD *)(v45 + 20);
      }
      else
      {
        uint64_t v46 = v39;
        long long v48 = (int *)(v45 + 16);
        int v49 = *(_DWORD *)(v45 + 20);
        if (!v7[14].i8[2]) {
          goto LABEL_61;
        }
      }
      if (v47 + (int)v46 <= (int)a4)
      {
        uint64_t v7 = v59;
        uint64_t v50 = *(void *)&v59[1] + 302936;
        int v51 = *v48;
        uint64_t v67 = 0;
        int v52 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v50, &v67);
        uint64_t v53 = v67;
        *(_DWORD *)(v67 + 4) = v38;
        *(_DWORD *)(v53 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v49;
        *(_DWORD *)uint64_t v53 = v51;
        *(_WORD *)(v53 + 12) = v47;
        uint64_t v39 = v46;
        int v38 = v52;
LABEL_63:
        uint64_t v6 = v43;
        goto LABEL_64;
      }
LABEL_61:
      uint64_t v39 = v46;
      uint64_t v6 = v43;
      uint64_t v7 = v59;
LABEL_64:
      ++v34;
      if (!--v33)
      {
        int32x2_t v35 = v7[1];
        goto LABEL_67;
      }
    }
  }
LABEL_66:
  int v37 = 0;
  int v38 = -1;
  LODWORD(v39) = 20000;
LABEL_67:
  uint64_t v54 = *(void *)&v35 + 302584;
  ++*(_DWORD *)v54;
  *(void *)(v54 + 24) += v66;
  if ((int)v39 <= (int)a4)
  {
    v7[42].i16[0] = v39 + ((unsigned __int32)v7[42].i32[1] >> 8);
    __int32 v55 = *v37;
    if (v7[14].i8[2])
    {
      v7[41].i32[0] = v55;
      v7[41].i32[1] = v38;
    }
    else
    {
      int v56 = v37[1];
      v7[41].i32[0] = v55;
      v7[41].i32[1] = v56 + v7[43].i16[1];
    }
  }
  else
  {
    v7[42].i32[0] = 1310740000;
  }
  v7[13].i32[0] = v65;
  uint64_t result = (*(uint64_t (**)(int32x2_t *))(*(void *)v7 + 328))(v7);
  v7[13].i16[3] = result;
  return result;
}

uint64_t SyncNet::thresholdNetInternal(SyncNet *this, uint64_t a2, int a3)
{
  BaseSyncNet::scoreIntSilNode2((uint64_t)this, a2, a3);
  if (*((__int16 *)this + 55) <= a3)
  {
    int v5 = 1;
  }
  else
  {
    int v5 = 0;
    *((_WORD *)this + 55) = 20000;
  }
  *((_DWORD *)this + 26) = v5;

  return SyncNet::maybeDoCallback((uint64_t)this, a3);
}

uint64_t SyncNet::maybeDoCallback(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(this + 176);
  if (v2 == 3)
  {
    int v3 = *(__int16 *)(this + 336);
  }
  else
  {
    if (v2 != 2) {
      return this;
    }
    int v3 = *(__int16 *)(*(void *)(this + 320)
                    + 24 * (*(unsigned __int16 *)(*(void *)(this + 320) + 10) - 1)
                    + 24);
  }
  if (v3 <= a2) {
    return (*(uint64_t (**)(void))(this + 160))(*(void *)(this + 168));
  }
  return this;
}

uint64_t SyncNet::calcNumActiveNodes(SyncNet *this, int a2)
{
  uint64_t v4 = *((unsigned int *)this + 38);
  if (*((_DWORD *)this + 88) <= a2)
  {
    uint64_t v5 = *((unsigned int *)this + 78);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)*((void *)this + 38);
      do
      {
        uint64_t v7 = *v6++;
        uint64_t v4 = Sequence::calcNumActiveNodes(v7, a2) + v4;
        --v5;
      }
      while (v5);
    }
  }
  if (*((_DWORD *)this + 89) <= a2) {
    uint64_t v4 = Sequence::calcNumActiveNodes(*((void *)this + 40), a2) + v4;
  }
  if (*((_DWORD *)this + 71) <= a2)
  {
    uint64_t v8 = *((unsigned int *)this + 56);
    if (v8)
    {
      BOOL v9 = (uint64_t *)*((void *)this + 27);
      do
      {
        uint64_t v10 = *v9++;
        uint64_t v4 = Sequence::calcNumActiveNodes(v10, a2) + v4;
        --v8;
      }
      while (v8);
    }
  }
  return v4;
}

uint64_t SyncNet::addEpsilonNode(SyncNet *this)
{
  if (*((unsigned char *)this + 360))
  {
    *((unsigned char *)this + 361) = 1;
    return *((void *)this + 1) + 302796;
  }
  else
  {
    *((unsigned char *)this + 36MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 1;
    return (uint64_t)this + 328;
  }
}

void *SyncNet::addArc(void *this, const Node *a2, Node *a3)
{
  if (this + 41 != (void *)a3)
  {
    int v3 = (const Node *)(this[1] + 302796);
    if (v3 != a3)
    {
      if (v3 == a2)
      {
        uint64_t v4 = this[40];
        if (v4) {
          a2 = (const Node *)(v4 + 24 * (*(unsigned __int16 *)(v4 + 10) - 1) + 16);
        }
        else {
          a2 = (const Node *)(this + 41);
        }
      }
      if (this + 30 == (void *)a3) {
        uint64_t v5 = (char *)(this + 33);
      }
      else {
        uint64_t v5 = (char *)a3 - 16;
      }
      return (void *)PredStruct::addPred((uint64_t)v5, (uint64_t)a2);
    }
  }
  return this;
}

uint64_t *SyncNet::addNodesSequential(uint64_t a1, Sequence *this, int a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v5 = *(void *)(a1 + 296);
      *(void *)uint64_t v5 = 0;
      *(_WORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      *(_WORD *)(v5 + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = (_WORD)this;
      if (this)
      {
        uint64_t v6 = v5 + 24;
        uint64_t v7 = this;
        do
        {
          *(void *)(v6 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0x100000001;
          *(_DWORD *)uint64_t v6 = 1310740000;
          *(void *)(v6 + 4) = 0;
          *(_DWORD *)(v6 + 12) = -65536;
          v6 += 24;
          --v7;
        }
        while (v7);
        uint64_t v8 = 24 * this + 16;
      }
      else
      {
        uint64_t v8 = 16;
      }
      uint64_t v12 = *(void *)(a1 + 304);
      *(void *)(a1 + 296) += v8;
      uint64_t v13 = *(unsigned int *)(a1 + 312);
      *(void *)(v12 + 8 * v13) = v5;
      *(_DWORD *)(a1 + 312) = v13 + 1;
      return (uint64_t *)(v5 + 16);
    }
    else
    {
      uint64_t v10 = Sequence::newSequence(this);
      uint64_t v11 = v10;
      BOOL v9 = v10 + 2;
      if (a3 == 3)
      {
        unsigned int v14 = *(_DWORD *)(a1 + 224);
        if (v14 == *(_DWORD *)(a1 + 228))
        {
          DgnPrimArray<unsigned long long>::reallocElts(a1 + 216, 1, 1);
          unsigned int v14 = *(_DWORD *)(a1 + 224);
        }
        *(void *)(*(void *)(a1 + 216) + 8 * v14) = v11;
        *(_DWORD *)(a1 + 224) = v14 + 1;
      }
      else if (a3 == 2)
      {
        *(void *)(a1 + 32MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10;
      }
    }
  }
  else
  {
    BOOL v9 = (uint64_t *)(a1 + 240);
    *(unsigned char *)(a1 + 28MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 1;
  }
  return v9;
}

uint64_t *SyncNet::preallocEndSequences(SyncNet *this, unsigned int a2, unsigned int a3)
{
  uint64_t result = MemChunkAlloc((24 * *(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 16) + a2) + 16) * a3, 0);
  *((void *)this + 36) = result;
  *((void *)this + 37) = result;
  unsigned int v6 = *((_DWORD *)this + 79);
  if (a3 > v6)
  {
    return (uint64_t *)DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 304, a3 - v6, 0);
  }
  return result;
}

uint64_t SyncNet::estimateActivePelsThisFrame(SyncNet *this, BitArray *a2)
{
  uint64_t result = BaseSyncNet::estimateActivePelsThisFrame(this, a2);
  if (*((unsigned char *)this + 360))
  {
    unint64_t v5 = *((unsigned __int16 *)this + 175);
    if (v5 != 0xFFFF) {
      *(_DWORD *)(*(void *)a2 + ((v5 >> 3) & 0x1FFC)) |= 1 << v5;
    }
  }
  uint64_t v6 = *((unsigned int *)this + 78);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *((void *)this + 38);
    do
    {
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      if (*(_WORD *)(v9 + 10))
      {
        unint64_t v10 = 0;
        uint64_t v11 = *(void *)a2;
        uint64_t v12 = (unsigned __int16 *)(v9 + 38);
        do
        {
          unsigned int v13 = *v12;
          v12 += 12;
          unint64_t v14 = ((unint64_t)v13 >> 3) & 0x1FFC;
          uint64_t result = *(unsigned int *)(v11 + v14);
          *(_DWORD *)(v11 + v14) = (1 << v13) | result;
          ++v10;
        }
        while (v10 < *(unsigned __int16 *)(v9 + 10));
      }
      ++v7;
    }
    while (v7 != v6);
  }
  uint64_t v15 = *((void *)this + 40);
  if (v15 && *(_WORD *)(v15 + 10))
  {
    unint64_t v16 = 0;
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = (unsigned __int16 *)(v15 + 38);
    do
    {
      unsigned int v19 = *v18;
      v18 += 12;
      *(_DWORD *)(v17 + (((unint64_t)v19 >> 3) & 0x1FFC)) |= 1 << v19;
      ++v16;
    }
    while (v16 < *(unsigned __int16 *)(v15 + 10));
  }
  return result;
}

uint64_t BaseSyncNet::estimateActivePelsThisFrame(BaseSyncNet *this, BitArray *a2)
{
  uint64_t result = AcousticNet::estimateActivePelsThisFrame((uint64_t)this, a2);
  if (*((unsigned char *)this + 280)) {
    *(_DWORD *)(*(void *)a2 + (((unint64_t)*((unsigned __int16 *)this + 131) >> 3) & 0x1FFC)) |= 1 << *((_WORD *)this + 131);
  }
  uint64_t v5 = *((unsigned int *)this + 56);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)this + 27);
    do
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6);
      if (*(_WORD *)(v8 + 10))
      {
        unint64_t v9 = 0;
        uint64_t v10 = *(void *)a2;
        uint64_t v11 = (unsigned __int16 *)(v8 + 38);
        do
        {
          unsigned int v12 = *v11;
          v11 += 12;
          unint64_t v13 = ((unint64_t)v12 >> 3) & 0x1FFC;
          uint64_t result = *(unsigned int *)(v10 + v13);
          *(_DWORD *)(v10 + v13) = (1 << v12) | result;
          ++v9;
        }
        while (v9 < *(unsigned __int16 *)(v8 + 10));
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

void Lookahead::~Lookahead(Lookahead *this)
{
}

void Lookahead::printSize(Lookahead *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 149, (DgnString *)&v121);
  if (v122) {
    unint64_t v16 = v121;
  }
  else {
    unint64_t v16 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, byte_2140A92DC, a3, byte_2140A92DC, v16);
  DgnString::~DgnString((DgnString *)&v121);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, byte_2140A92DC);
  uint64_t v21 = sizeObject<DgnArray<PositionClu>>((uint64_t)this, 0);
  uint64_t v22 = sizeObject<DgnArray<PositionClu>>((uint64_t)this, 1);
  uint64_t v23 = sizeObject<DgnArray<PositionClu>>((uint64_t)this, 3);
  uint64_t v24 = (a3 + 1);
  uint64_t v120 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 150, (DgnString *)&v121);
  if (v122) {
    int v30 = v121;
  }
  else {
    int v30 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, byte_2140A92DC, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  uint64_t v31 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 16, 0);
  uint64_t v32 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 16, 1);
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v121);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 151, (DgnString *)&v121);
  if (v122) {
    int v37 = v121;
  }
  else {
    int v37 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v24, byte_2140A92DC, v25, v25, v37, v31, v32, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v31;
  *a5 += v32;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 153, (DgnString *)&v121);
  if (v122) {
    long long v42 = v121;
  }
  else {
    long long v42 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v24, byte_2140A92DC, v25, v25, v42, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 154, (DgnString *)&v121);
  if (v122) {
    int v47 = v121;
  }
  else {
    int v47 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v24, byte_2140A92DC, v25, v25, v47, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 155, (DgnString *)&v121);
  if (v122) {
    int v52 = v121;
  }
  else {
    int v52 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v24, byte_2140A92DC, v25, v25, v52, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 156, (DgnString *)&v121);
  if (v122) {
    char v57 = v121;
  }
  else {
    char v57 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v24, byte_2140A92DC, v25, v25, v57, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v58 = 4;
  }
  else {
    uint64_t v58 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 157, (DgnString *)&v121);
  if (v122) {
    unsigned int v63 = v121;
  }
  else {
    unsigned int v63 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v24, byte_2140A92DC, v25, v25, v63, v58, v58, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v58;
  *a5 += v58;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 4;
  }
  else {
    uint64_t v64 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 158, (DgnString *)&v121);
  if (v122) {
    uint64_t v69 = v121;
  }
  else {
    uint64_t v69 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v24, byte_2140A92DC, v25, v25, v69, v64, v64, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v64;
  *a5 += v64;
  uint64_t v70 = CombineTable::sizeObject((uint64_t)this + 72, 0);
  uint64_t v71 = CombineTable::sizeObject((uint64_t)this + 72, 1);
  uint64_t v72 = CombineTable::sizeObject((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 160, (DgnString *)&v121);
  if (v122) {
    uint64_t v77 = v121;
  }
  else {
    uint64_t v77 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v24, byte_2140A92DC, v25, v25, v77, v70, v71, v72);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v70;
  *a5 += v71;
  *a6 += v72;
  uint64_t v78 = sizeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)this + 88, 0);
  uint64_t v79 = sizeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)this + 88, 1);
  uint64_t v80 = sizeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 162, (DgnString *)&v121);
  if (v122) {
    uint64_t v85 = v121;
  }
  else {
    uint64_t v85 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v24, byte_2140A92DC, v25, v25, v85, v78, v79, v80);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v78;
  *a5 += v79;
  *a6 += v80;
  uint64_t v86 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v86 = 12;
  }
  uint64_t v87 = *((unsigned int *)this + 28);
  if ((int)v87 <= 0) {
    uint64_t v88 = 0;
  }
  else {
    uint64_t v88 = 4 * v87;
  }
  uint64_t v89 = v88 + v86;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 164, (DgnString *)&v121);
  if (v122) {
    uint64_t v94 = v121;
  }
  else {
    uint64_t v94 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v24, byte_2140A92DC, v25, v25, v94, v89, v89, 0);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v89;
  *a5 += v89;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v95 = 12;
  }
  else {
    uint64_t v95 = 16;
  }
  uint64_t v96 = *((unsigned int *)this + 32);
  unsigned int v97 = *((_DWORD *)this + 33);
  if (v97 >= v96)
  {
    uint64_t v98 = 0;
    if ((int)v96 > 0) {
      v95 += 4 * (v96 - 1) + 4;
    }
    uint64_t v99 = v95 + 4 * (v97 - v96);
  }
  else
  {
    uint64_t v98 = 4 * v96;
    uint64_t v99 = v95;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 165, (DgnString *)&v121);
  if (v122) {
    uint64_t v104 = v121;
  }
  else {
    uint64_t v104 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, v24, byte_2140A92DC, v25, v25, v104, v99, v95, v98);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v99;
  *a5 += v95;
  *a6 += v98;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v105 = 12;
  }
  else {
    uint64_t v105 = 16;
  }
  uint64_t v106 = *((unsigned int *)this + 36);
  unsigned int v107 = *((_DWORD *)this + 37);
  if (v107 >= v106)
  {
    uint64_t v108 = 0;
    if ((int)v106 > 0) {
      v105 += 4 * (v106 - 1) + 4;
    }
    uint64_t v109 = v105 + 4 * (v107 - v106);
  }
  else
  {
    uint64_t v108 = 4 * v106;
    uint64_t v109 = v105;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 166, (DgnString *)&v121);
  if (v122) {
    uint64_t v114 = v121;
  }
  else {
    uint64_t v114 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v24, byte_2140A92DC, v25, v25, v114, v109, v105, v108);
  DgnString::~DgnString((DgnString *)&v121);
  *a4 += v109;
  *a5 += v105;
  *a6 += v108;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/lookah.cpp", 167, (DgnString *)&v121);
  if (v122) {
    unsigned int v119 = v121;
  }
  else {
    unsigned int v119 = byte_2140A92DC;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, byte_2140A92DC, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v121);
}

void sub_214016A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<PositionClu>>(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    unsigned int v4 = 12;
  }
  else {
    unsigned int v4 = 16;
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v10);
  uint64_t v5 = 0;
  if (a2 != 3)
  {
    uint64_t v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        unint64_t v7 = v6 + 1;
        do
          v5 += sizeObject<ScoreFixArray>(*(void *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2) {
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnArray<DgnVector>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_214016BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sizeObject<DgnArray<DgnPrimArray<unsigned char>>>(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    unsigned int v4 = 12;
  }
  else {
    unsigned int v4 = 16;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v10);
  uint64_t v5 = 0;
  if (a2 != 3)
  {
    uint64_t v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        unint64_t v7 = v6 + 1;
        do
          v5 += sizeObject<DgnPrimArray<unsigned char>>(*(void *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2) {
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_214016CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void (***Lookahead::saveLookaheadBinary(Lookahead *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  unint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x3Fu, a4, "MRPLB!? ", 24, 5);
  unsigned int v15 = 0;
  writeObject((uint64_t)v7, (int *)this + 10, &v15);
  writeObject((uint64_t)v7, (int *)this + 11, &v15);
  writeObject((uint64_t)v7, (int *)this + 12, &v15);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 120, &v15);
  writeObject(v7, (const double *)this + 4, &v15, v8, v9, v10, v11, v12);
  writeObject<DgnPrimArray<unsigned char>>((uint64_t)v7, (uint64_t)this + 16, &v15);
  writeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)v7, (uint64_t)this + 88, &v15);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 104, &v15);
  writeObjectChecksum((uint64_t)v7, (int *)&v15);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x3Fu, v15);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

uint64_t writeObject<DgnArray<DgnPrimArray<unsigned char>>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<DgnPrimArray<unsigned char>>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void Lookahead::saveLookaheadText(Lookahead *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v39);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v39, (uint64_t)a2, 0x41u, a3);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v39, sPLT_Versions, (uint64_t)&v37, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v39, "PrefiltererLookaheadText", (void *)(v37 + 8 * (v38 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v39, "SmoothWindowFrames", *((unsigned int *)this + 32));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v39, "ModelDimension", *((unsigned int *)this + 10));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v39, "NumberOfPhonemes", *((unsigned int *)this + 11));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v39, "NumberOfMixtureComponents", *((unsigned int *)this + 12));
  DgnArray<DgnString>::DgnArray(v36, 6);
  uint64_t v40 = 0;
  unint64_t v11 = realloc_array(0, &v40, 0x18uLL, 0, 0, 1);
  uint64_t v33 = v40;
  int v34 = 6;
  int v35 = v11 >> 2;
  DgnString::operator=(*(DgnString **)v36, "TableName");
  *uint64_t v33 = 0;
  DgnString::operator=((DgnString *)(*(void *)v36 + 16), "Phoneme");
  v33[1] = 0;
  DgnString::operator=((DgnString *)(*(void *)v36 + 32), "UnsVal1");
  v33[2] = 3;
  DgnString::operator=((DgnString *)(*(void *)v36 + 48), "UnsVal2");
  v33[3] = 3;
  DgnString::operator=((DgnString *)(*(void *)v36 + 64), "UnsVal3");
  v33[4] = 3;
  DgnString::operator=((DgnString *)(*(void *)v36 + 80), "UnsVal4");
  v33[5] = 3;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v39, (uint64_t)&v33, (uint64_t)v36);
  if (*((_DWORD *)this + 32))
  {
    unint64_t v12 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 0, "FrameWeight");
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 1u, byte_2140A92DC);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 2u, v12);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 3u, *(_DWORD *)(*((void *)this + 15) + 4 * v12));
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 4u, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 5u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v39);
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 32));
  }
  unint64_t v13 = *((unsigned int *)this + 28);
  if (v13)
  {
    unint64_t v14 = 0;
    int v15 = 0;
    do
    {
      uint64_t v16 = *(unsigned int *)(*((void *)this + 13) + 4 * v14);
      if (v16 != -1)
      {
        uint64_t v17 = *(unsigned int *)(*((void *)this + 11) + 16 * v16 + 8);
        if (v17)
        {
          unint64_t v32 = v14;
          uint64_t v18 = 0;
          LODWORD(v19) = *((_DWORD *)this + 10);
          do
          {
            if (v19)
            {
              unsigned int v20 = 0;
              for (unint64_t i = 0; i < v19; ++i)
              {
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 0, "PDF");
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 1u, byte_2140A92DC);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 2u, v15);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 3u, i);
                uint64_t v22 = *(void *)(*(void *)(*((void *)this + 11) + 16 * v16) + 16 * v18);
                int v23 = *(unsigned __int8 *)(v22 + v20 + 1);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 4u, *(unsigned __int8 *)(v22 + v20));
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 5u, v23);
                DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v39);
                unint64_t v19 = *((unsigned int *)this + 10);
                v20 += 2;
              }
            }
            ++v15;
            ++v18;
          }
          while (v18 != v17);
          unint64_t v13 = *((unsigned int *)this + 28);
          unint64_t v14 = v32;
        }
      }
      ++v14;
    }
    while (v14 < v13);
    if (v13)
    {
      unint64_t v24 = 0;
      int v25 = 0;
      int v26 = 0;
      do
      {
        uint64_t v27 = *(unsigned int *)(*((void *)this + 13) + 4 * v24);
        if (v27 != -1)
        {
          uint64_t v28 = *(unsigned int *)(*((void *)this + 11) + 16 * v27 + 8);
          if (v28)
          {
            for (uint64_t j = 0; j != v28; ++j)
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 0, "Pel");
              uint64_t v30 = *(void *)(*((void *)this + 8) + 8) + 16 * (unsigned __int16)v24;
              if (*(_DWORD *)(v30 + 8)) {
                uint64_t v31 = *(char **)v30;
              }
              else {
                uint64_t v31 = byte_2140A92DC;
              }
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v39, 1u, v31);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 2u, v25);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 3u, v26 + j);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 4u, *(unsigned __int8 *)(*(void *)(*((void *)this + 2) + 16 * v27) + j));
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v39, 5u, 0);
              DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v39);
            }
            unint64_t v13 = *((unsigned int *)this + 28);
            v26 += j;
          }
          ++v25;
        }
        ++v24;
      }
      while (v24 < v13);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
  DgnArray<DgnString>::releaseAll((uint64_t)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v37);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v39);
}

void sub_214017320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

void Lookahead::saveLookahead(Lookahead *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4) {
    Lookahead::saveLookaheadText(this, a2, a5);
  }
  else {
    Lookahead::saveLookaheadBinary(this, a2, a3, a5);
  }
}

uint64_t Lookahead::scoreOneForLookahead(uint64_t a1, unsigned __int8 **a2, unsigned int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)a1 + 16 * a3;
  unsigned int v4 = (unsigned __int8 **)(*(void *)(a1 + 16) + 16 * a3);
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 56);
  memset(v27, 0, sizeof(v27));
  int v7 = *(_DWORD *)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = v27;
    uint64_t v10 = *(unsigned int *)(a1 + 40);
    do
    {
      unsigned int v11 = *v8++;
      *v9++ = v6 + 2 * v11;
      --v10;
    }
    while (v10);
    uint64_t v12 = (uint64_t)*v4;
    int v13 = **v4;
    unint64_t v14 = *(void **)v3;
    unsigned int v15 = v7 - 1;
    if (v7 - 1 < 0)
    {
      int v7 = 0;
      int v16 = 0;
    }
    else
    {
      int v16 = 0;
      for (uint64_t i = (v7 - 1); i != -1; --i)
        v16 += *(__int16 *)(*((void *)v27 + i) + 2 * *(unsigned __int16 *)(*v14 + 2 * i));
      int v7 = 1;
    }
  }
  else
  {
    int v16 = 0;
    uint64_t v12 = (uint64_t)*v4;
    int v13 = **v4;
    unint64_t v14 = *(void **)v3;
    unsigned int v15 = -1;
  }
  uint64_t v18 = (v16 + v13);
  if (v5 >= 2)
  {
    for (uint64_t j = 1; j != v5; ++j)
    {
      int v20 = 0;
      if (v7)
      {
        for (uint64_t k = v15; k != -1; --k)
          v20 += *(__int16 *)(*((void *)v27 + k) + 2 * *(unsigned __int16 *)(v14[2 * j] + 2 * k));
      }
      int v22 = v20 + *(unsigned __int8 *)(v12 + j);
      unsigned int v24 = v22 - v18;
      BOOL v23 = v22 - (int)v18 < 0;
      if (v22 >= (int)v18) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = v22;
      }
      if (v23) {
        unsigned int v25 = -v24;
      }
      else {
        unsigned int v25 = v24;
      }
      if (v25 < *(_DWORD *)(a1 + 80)) {
        uint64_t v18 = (v18 - *(_DWORD *)(*(void *)(a1 + 72) + 4 * v25));
      }
    }
  }
  return v18;
}

void *DgnArray<DgnArray<PositionClu>>::releaseAll(uint64_t a1)
{
  DgnArray<DgnArray<PositionClu>>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void *DgnArray<DgnArray<PositionClu>>::destructAt(void *result, int a2, int a3)
{
  uint64_t v3 = result;
  uint64_t v4 = a3 + a2;
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 1;
  for (uint64_t i = 16 * v4 - 16; --v6 > v5; uint64_t i = v8)
  {
    uint64_t v8 = i - 16;
    uint64_t result = DgnArray<DgnVector>::releaseAll(*v3 + i);
  }
  return result;
}

void *DgnArray<DgnArray<DgnPrimArray<unsigned char>>>::releaseAll(uint64_t a1)
{
  DgnArray<DgnArray<DgnPrimArray<unsigned char>>>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void *DgnArray<DgnArray<DgnPrimArray<unsigned char>>>::destructAt(void *result, int a2, int a3)
{
  uint64_t v3 = result;
  uint64_t v4 = a3 + a2;
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 1;
  for (uint64_t i = 16 * v4 - 16; --v6 > v5; uint64_t i = v8)
  {
    uint64_t v8 = i - 16;
    uint64_t result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

void TCondition::TCondition(TCondition *this, unsigned int **a2, unint64_t a3, TLexicon *a4)
{
  TCondition::setEnum(this, (const TFileObject *)a2, a3);
  *((void *)this + 4) = a4;
  *(void *)this = 0;
  if (*((_DWORD *)this + 3) != 7) {
    buildRegExp((const TFileObject *)a2, a4);
  }
  if (TFileObject::verify((TFileObject *)a2, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, &byte_2140B33BB);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v14[0], (std::string::size_type)v14[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v14;
      uint64_t v17 = v15;
    }
    *(void *)long long __p = &unk_26C4E0710;
    if (v17 >= 0) {
      uint64_t v10 = &__p[8];
    }
    else {
      uint64_t v10 = *(const char **)&__p[8];
    }
    conditionalAssert(v10, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 120, v8, v9);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v12 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v13 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    void *exception = &unk_26C4E0710;
  }
  __p[0] = 0;
  int v7 = a2[3];
  {
    operator new();
  }
  *(void *)this = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, __p);
}

void sub_2140178D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x216698730](v25, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TCondition::setEnum(TCondition *this, const TFileObject *a2, unint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = (const __int32 *)*((void *)a2 + 1);
  if (a3 > 1) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = 9;
  }
  *((void *)this + 1) = 0x900000004;
  while (1)
  {
    uint64_t v9 = (const __int32 *)*(&TCondition::setEnum(TFileObject const*,unsigned long)::ppszSource + v6);
    size_t v10 = wcslen(v9);
    if (!wcsncmp(v7, v9, v10)) {
      break;
    }
    if (v8 == ++v6) {
      goto LABEL_12;
    }
  }
  *((_DWORD *)this + 3) = v6;
  if (a3 <= 1 && v6 == 8) {
    tknPrintf("Warning: Pron conditions are no longer supported in munge-map rules!\n", v11, v12, v13, v14);
  }
  v7 += wcslen(v9);
LABEL_12:
  unsigned int v15 = *((_DWORD *)this + 3);
  if (v15 >= 2 && v15 != 7)
  {
    if (v15 == 9)
    {
      loggableFileObject((uint64_t *)a2);
      if (__p[23] >= 0) {
        uint64_t v33 = __p;
      }
      else {
        uint64_t v33 = *(unsigned char **)__p;
      }
      tknPrintf("Error: %sInvalid attribute\n", v29, v30, v31, v32, v33);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::string::basic_string[abi:ne180100]<0>(v44, &byte_2140B33BB);
      *(void *)long long __p = byte_26C4DF190;
      if (SHIBYTE(v45) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v44[0], (std::string::size_type)v44[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v44;
        uint64_t v47 = v45;
      }
      *(void *)long long __p = &unk_26C4E0710;
      if (v47 >= 0) {
        uint64_t v39 = &__p[8];
      }
      else {
        uint64_t v39 = *(const char **)&__p[8];
      }
      conditionalAssert(v39, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 177, v34, v35);
      *(void *)long long __p = byte_26C4DF190;
      if (SHIBYTE(v47) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (SHIBYTE(v45) < 0) {
        operator delete(v44[0]);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      void *exception = byte_26C4DF190;
      uint64_t v41 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v43 = *(_OWORD *)__p;
        exception[3] = *(void *)&__p[16];
        *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v43;
      }
      void *exception = &unk_26C4E0710;
    }
    uint64_t v19 = 0;
    v7 += 2 * (wcsncmp(v7, dword_2140A9420, 2uLL) == 0);
    while (1)
    {
      int v20 = (const __int32 *)*(&TCondition::setEnum(TFileObject const*,unsigned long)::ppszTokenPos + v19);
      size_t v21 = wcslen(v20);
      if (!wcsncmp(v7, v20, v21)) {
        break;
      }
      if (++v19 == 5) {
        goto LABEL_17;
      }
    }
    *((_DWORD *)this + 2) = v19;
    v7 += wcslen(v20);
  }
LABEL_17:
  uint64_t v17 = &v7[2 * (wcsncmp(v7, dword_2140A94E4, 2uLL) == 0)];
  *((unsigned char *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
  uint64_t result = wcsncmp(v17, dword_2140A94F0, 3uLL);
  if (!result)
  {
    v17 += 3;
    *((unsigned char *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 1;
  }
  if (*v17)
  {
    loggableFileObject((uint64_t *)a2);
    if (__p[23] >= 0) {
      int v26 = __p;
    }
    else {
      int v26 = *(unsigned char **)__p;
    }
    tknPrintf("Error: %sInvalid attribute\n", v22, v23, v24, v25, v26);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v44, &byte_2140B33BB);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v45) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v44[0], (std::string::size_type)v44[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v44;
      uint64_t v47 = v45;
    }
    *(void *)long long __p = &unk_26C4E0710;
    if (v47 >= 0) {
      uint64_t v36 = &__p[8];
    }
    else {
      uint64_t v36 = *(const char **)&__p[8];
    }
    conditionalAssert(v36, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 223, v27, v28);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    uint64_t v37 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *v37 = byte_26C4DF190;
    uint64_t v38 = (std::string *)(v37 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v42 = *(_OWORD *)__p;
      v37[3] = *(void *)&__p[16];
      *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v42;
    }
    void *v37 = &unk_26C4E0710;
  }
  return result;
}

void sub_214017E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TCondition::~TCondition(TCondition *this)
{
  signed int v1 = (TRegExp *)*((void *)this + 3);
  if (v1)
  {
    TRegExp::~TRegExp(v1);
    MEMORY[0x216698730]();
  }
}

void TCondition::getSource(uint64_t a1, uint64_t a2, int *a3, int *a4, void *a5)
{
  TBuffer<wchar_t>::resize((uint64_t)a5, 0);
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      uint64_t v10 = 0;
      unint64_t v11 = a5[2];
      while (a3[v10++])
        ;
      unint64_t v13 = v10 - 1;
      uint64_t v14 = (uint64_t)a5;
      unsigned int v15 = a3;
      goto LABEL_8;
    case 1:
      uint64_t v16 = 0;
      unint64_t v11 = a5[2];
      while (a4[v16++])
        ;
      unint64_t v13 = v16 - 1;
      uint64_t v14 = (uint64_t)a5;
      unsigned int v15 = a4;
LABEL_8:
      TBuffer<wchar_t>::insert(v14, v11, v15, v13);
      return;
    case 2:
      int v18 = *(_DWORD *)(a2 + 48);
      if (v18 != 2 && v18 != 5)
      {
        int v20 = *(__int32 ***)(a2 + 56);
        TWord::getTokenName(v20, (uint64_t)a5);
      }
      return;
    case 3:
      int v21 = *(_DWORD *)(a2 + 48);
      if (v21 != 2 && v21 != 5) {
        goto LABEL_32;
      }
      return;
    case 4:
      uint64_t v23 = *(void *)(a2 + 56);
      TWord::getCategoryTag(v23, a5);
      return;
    case 5:
      uint64_t v24 = *(unsigned __int8 **)(*(void *)(a2 + 16) + 16);
      if (v24)
      {
        uint64_t v25 = *(void *)(*(void *)(a2 + 24) + 24);
        if (v25)
        {
          uint64_t v26 = *(void *)(a1 + 32) + 240;
          TLocaleInfo::multiByteToUnicode(v26, v24, v25 - (void)v24, (uint64_t)a5);
        }
      }
      return;
    case 6:
      if (*(_DWORD *)(a2 + 48) == 5)
      {
LABEL_32:
        uint64_t v27 = *(__int32 ***)(a2 + 56);
        TWord::getWrittenForm(v27, (uint64_t)a5);
      }
      break;
    default:
      return;
  }
}

uint64_t TCondition::test(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (*(_DWORD *)(a1 + 12) == 7)
  {
    LOBYTE(v5) = rand() < 0x7FFFFFFFLL * *(void *)a1 / 0x64uLL;
    return v5 & 1;
  }
  uint64_t v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  collectEdge(a2, *(_DWORD *)(a1 + 8), &v19);
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  if (v20 == v19)
  {
    LOBYTE(v5) = 0;
    uint64_t v8 = v20;
    if (!v20) {
      return v5 & 1;
    }
    goto LABEL_21;
  }
  unint64_t v10 = 0;
  int v5 = 0;
  do
  {
    uint64_t v11 = v8[v10];
    if (*(_DWORD *)(v11 + 48) != 3)
    {
      unsigned int v15 = (unsigned int *)v17;
      long long v16 = xmmword_214085190;
      char v18 = 1;
      TCondition::getSource(a1, v11, a3, a4, &v15);
      if (*((void *)&v16 + 1))
      {
        uint64_t v12 = *(void **)(a1 + 24);
        if (*((void *)&v16 + 1) >= (unint64_t)v16)
        {
          if (v18)
          {
            int v22 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v22, 1uLL);
            unint64_t v13 = v15;
            --*((void *)&v16 + 1);
          }
          else
          {
            unint64_t v13 = v15;
            if ((void)v16) {
              v15[(void)v16 - 1] = 0;
            }
          }
        }
        else
        {
          unint64_t v13 = v15;
          v15[*((void *)&v16 + 1)] = 0;
        }
        v5 |= TRegExp::match(v12, v13, 0) ^ (*(unsigned char *)(a1 + 16) != 0);
      }
      if (v18 && v15 != (unsigned int *)v17 && v15) {
        MEMORY[0x216698730]();
      }
      uint64_t v8 = v19;
      uint64_t v9 = v20;
    }
    ++v10;
  }
  while (v10 < v9 - v8);
  if (v8)
  {
LABEL_21:
    int v20 = v8;
    operator delete(v8);
  }
  return v5 & 1;
}

void sub_214018340(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void collectEdge(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v5 = TVertex::getInEdge(*(void *)(a1 + 16));
      if (!v5) {
        return;
      }
      uint64_t v6 = v5;
LABEL_4:
      collectEdge(v6, 1, a3);
      while (1)
      {
        uint64_t v6 = *(void *)v6;
        if (!v6) {
          return;
        }
        if (!*(unsigned char *)(v6 + 32)) {
          goto LABEL_4;
        }
      }
    case 1:
      uint64_t v7 = TVertex::getInEdge(*(void *)(a1 + 16));
      if (!v7) {
        return;
      }
      uint64_t v8 = v7;
      uint64_t v9 = a3 + 2;
      unint64_t v10 = (uint64_t *)a3[1];
LABEL_10:
      if ((unint64_t)v10 < *v9)
      {
        *v10++ = v8;
        goto LABEL_26;
      }
      uint64_t v11 = ((uint64_t)v10 - *a3) >> 3;
      if (!((unint64_t)(v11 + 1) >> 61))
      {
        uint64_t v12 = *v9 - *a3;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v14);
        }
        else {
          unsigned int v15 = 0;
        }
        long long v16 = (uint64_t *)&v15[8 * v11];
        uint64_t *v16 = v8;
        unint64_t v10 = v16 + 1;
        char v18 = (char *)*a3;
        uint64_t v17 = (char *)a3[1];
        if (v17 != (char *)*a3)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *--long long v16 = v19;
          }
          while (v17 != v18);
          uint64_t v17 = (char *)*a3;
        }
        *a3 = v16;
        a3[1] = v10;
        a3[2] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
LABEL_26:
        a3[1] = v10;
        while (1)
        {
          uint64_t v8 = *(void *)v8;
          if (!v8) {
            return;
          }
          if (!*(unsigned char *)(v8 + 32)) {
            goto LABEL_10;
          }
        }
      }
      goto LABEL_76;
    case 2:
      uint64_t OutEdge = TVertex::getOutEdge(*(void *)(a1 + 24));
      if (!OutEdge) {
        return;
      }
      uint64_t v21 = OutEdge;
      int v22 = a3 + 2;
      uint64_t v23 = (uint64_t *)a3[1];
LABEL_32:
      if ((unint64_t)v23 < *v22)
      {
        *v23++ = v21;
        goto LABEL_48;
      }
      uint64_t v24 = ((uint64_t)v23 - *a3) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        goto LABEL_76;
      }
      uint64_t v25 = *v22 - *a3;
      uint64_t v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
        uint64_t v26 = v24 + 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27) {
        uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v27);
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v29 = (uint64_t *)&v28[8 * v24];
      uint64_t *v29 = v21;
      uint64_t v23 = v29 + 1;
      uint64_t v31 = (char *)*a3;
      uint64_t v30 = (char *)a3[1];
      if (v30 != (char *)*a3)
      {
        do
        {
          uint64_t v32 = *((void *)v30 - 1);
          v30 -= 8;
          *--uint64_t v29 = v32;
        }
        while (v30 != v31);
        uint64_t v30 = (char *)*a3;
      }
      *a3 = v29;
      a3[1] = v23;
      a3[2] = &v28[8 * v27];
      if (v30) {
        operator delete(v30);
      }
LABEL_48:
      a3[1] = v23;
      while (1)
      {
        uint64_t v21 = *(void *)(v21 + 8);
        if (!v21) {
          return;
        }
        if (!*(unsigned char *)(v21 + 32)) {
          goto LABEL_32;
        }
      }
    case 3:
      uint64_t v33 = TVertex::getOutEdge(*(void *)(a1 + 24));
      if (!v33) {
        return;
      }
      uint64_t v34 = v33;
LABEL_54:
      collectEdge(v34, 2, a3);
      while (1)
      {
        uint64_t v34 = *(void *)(v34 + 8);
        if (!v34) {
          return;
        }
        if (!*(unsigned char *)(v34 + 32)) {
          goto LABEL_54;
        }
      }
    case 4:
      unint64_t v35 = a3[2];
      uint64_t v36 = (void *)a3[1];
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v38 = ((uint64_t)v36 - *a3) >> 3;
        if ((unint64_t)(v38 + 1) >> 61) {
LABEL_76:
        }
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        uint64_t v39 = v35 - *a3;
        uint64_t v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
          uint64_t v40 = v38 + 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41) {
          long long v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v41);
        }
        else {
          long long v42 = 0;
        }
        long long v43 = &v42[8 * v38];
        uint64_t v44 = &v42[8 * v41];
        *(void *)long long v43 = a1;
        uint64_t v37 = v43 + 8;
        uint64_t v46 = (char *)*a3;
        uint64_t v45 = (char *)a3[1];
        if (v45 != (char *)*a3)
        {
          do
          {
            uint64_t v47 = *((void *)v45 - 1);
            v45 -= 8;
            *((void *)v43 - 1) = v47;
            v43 -= 8;
          }
          while (v45 != v46);
          uint64_t v45 = (char *)*a3;
        }
        *a3 = v43;
        a3[1] = v37;
        a3[2] = v44;
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        void *v36 = a1;
        uint64_t v37 = v36 + 1;
      }
      a3[1] = v37;
      return;
    default:
      return;
  }
}

void TRule::TRule(TRule *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  *((unsigned char *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)this, 0xAuLL);
  for (uint64_t i = *((void *)a2 + 3); i; uint64_t i = *(void *)(i + 16))
  {
    if (wcscmp(*(const __int32 **)(i + 8), dword_2140A9500)) {
      operator new();
    }
    if (*((void *)this + 3))
    {
      loggableFileObject((uint64_t *)i);
      uint64_t v13 = __p;
      if (__p[23] < 0) {
        uint64_t v13 = *(unsigned char **)__p;
      }
      tknPrintf("Error: %sRedefinition\n", v9, v10, v11, v12, v13);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::string::basic_string[abi:ne180100]<0>(v31, &byte_2140B33BB);
      *(void *)long long __p = byte_26C4DF190;
      if (SHIBYTE(v32) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v31[0], (std::string::size_type)v31[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v31;
        uint64_t v34 = v32;
      }
      *(void *)long long __p = &unk_26C4E0710;
      if (v34 >= 0) {
        long long v16 = &__p[8];
      }
      else {
        long long v16 = *(const char **)&__p[8];
      }
      conditionalAssert(v16, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 417, v14, v15);
      *(void *)long long __p = byte_26C4DF190;
      if (SHIBYTE(v34) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(v31[0]);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      void *exception = byte_26C4DF190;
      char v18 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v19 = *(_OWORD *)__p;
        exception[3] = *(void *)&__p[16];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      }
      void *exception = &unk_26C4E0710;
    }
    *((void *)this + 3) = buildReplaceObject((const TFileObject *)i, a3, a4);
    *((unsigned char *)this + 32) = 1;
  }
  if (*(void *)this == *((void *)this + 1))
  {
    loggableFileObject((uint64_t *)a2);
    if (__p[23] >= 0) {
      uint64_t v24 = __p;
    }
    else {
      uint64_t v24 = *(unsigned char **)__p;
    }
    tknPrintf("Error: %sRule is missing a condition\n", v20, v21, v22, v23, v24);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v31, &byte_2140B33BB);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v32) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v31[0], (std::string::size_type)v31[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v31;
      uint64_t v34 = v32;
    }
    *(void *)long long __p = &unk_26C4E0710;
    if (v34 >= 0) {
      unint64_t v27 = &__p[8];
    }
    else {
      unint64_t v27 = *(const char **)&__p[8];
    }
    conditionalAssert(v27, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 440, v25, v26);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v34) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[0]);
    }
    uint64_t v28 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *v28 = byte_26C4DF190;
    uint64_t v29 = (std::string *)(v28 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v30 = *(_OWORD *)__p;
      v28[3] = *(void *)&__p[16];
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
    }
    void *v28 = &unk_26C4E0710;
  }
}

void sub_214018E58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (v30 == 1)
  {
    __cxa_begin_catch(v31);
    TRule::freeMemory(v29);
    __cxa_rethrow();
  }
  JUMPOUT(0x214018F44);
}

void sub_214018F30()
{
  __cxa_end_catch();
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    *(void *)(v0 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(v2);
}

TFileObject *buildReplaceObject(const TFileObject *a1, TLexicon *a2, TAllocator *a3)
{
  long long v19 = &unk_2140A9570;
  long long v20 = xmmword_214085170;
  uint64_t v21 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)&v19, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, &byte_2140B33BB);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v16) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v15[0], (std::string::size_type)v15[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v15;
      uint64_t v18 = v16;
    }
    *(void *)long long __p = &unk_26C4E0710;
    if (v18 >= 0) {
      uint64_t v11 = &__p[8];
    }
    else {
      uint64_t v11 = *(const char **)&__p[8];
    }
    conditionalAssert(v11, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 383, v9, v10);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v18) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v13 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v14 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    void *exception = &unk_26C4E0710;
  }
  uint64_t v6 = (const TFileObject *)*((void *)a1 + 3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = 0;
  do
  {
    uint64_t v7 = compileAlt(v6, v7, a2, a3);
    uint64_t v6 = (const TFileObject *)*((void *)v6 + 2);
  }
  while (v6);
  return v7;
}

void sub_214019168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t *TRule::freeMemory(uint64_t *this)
{
  uint64_t v2 = *this;
  uint64_t v1 = this[1];
  if (v1 != *this)
  {
    uint64_t v3 = this;
    unint64_t v4 = 0;
    do
    {
      this = *(uint64_t **)(v2 + 8 * v4);
      if (this)
      {
        TCondition::~TCondition((TCondition *)this);
        this = (uint64_t *)MEMORY[0x216698730]();
        uint64_t v2 = *v3;
        uint64_t v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return this;
}

void TRule::~TRule(TRule *this)
{
  TRule::freeMemory((uint64_t *)this);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t TRule::test(uint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v4 = *a1;
  if (a1[1] == *a1) {
    return 1;
  }
  unint64_t v9 = 0;
  do
  {
    uint64_t result = TCondition::test(*(void *)(v4 + 8 * v9), a2, a3, a4);
    if ((result & 1) == 0) {
      break;
    }
    ++v9;
    uint64_t v4 = *a1;
  }
  while (v9 < (a1[1] - *a1) >> 3);
  return result;
}

void TGroup::TGroup(TGroup *this, const TFileObject *a2, TRegExp *a3, uint64_t a4, TLexicon *a5, TAllocator *a6)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)this, 0xAuLL);
  long long v69 = xmmword_214085120;
  uint64_t v68 = dword_2140A9520;
  long long v72 = xmmword_214085170;
  uint64_t v70 = -1;
  uint64_t v71 = dword_2140A953C;
  long long v75 = xmmword_214085140;
  uint64_t v73 = -1;
  uint64_t v74 = dword_2140A9500;
  uint64_t v76 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v68, 3uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v65, &byte_2140B33BB);
    *(void *)long long __p = byte_26C4DF190;
    if ((v65[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v65, *(std::string::size_type *)&v65[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v65;
      v56[0] = *(void *)&v65[16];
    }
    *(void *)long long __p = &unk_26C4E0710;
    if (v56[0] >= 0) {
      uint64_t v47 = &__p[8];
    }
    else {
      uint64_t v47 = *(const char **)&__p[8];
    }
    conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 586, v45, v46);
    *(void *)long long __p = byte_26C4DF190;
    if (SHIBYTE(v56[0]) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if ((v65[23] & 0x80000000) != 0) {
      operator delete(*(void **)v65);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v49 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v50 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
    }
    void *exception = &unk_26C4E0710;
  }
  uint64_t v12 = *((void *)a2 + 3);
  if (v12)
  {
    uint64_t v51 = a6;
    while (1)
    {
      if (wcscmp(*(const __int32 **)(v12 + 8), dword_2140A9520))
      {
        if (!wcscmp(*(const __int32 **)(v12 + 8), dword_2140A953C)) {
          operator new();
        }
        if (!wcscmp(*(const __int32 **)(v12 + 8), dword_2140A9500))
        {
          *((void *)this + 3) = buildReplaceObject((const TFileObject *)v12, a5, a6);
          *((unsigned char *)this + 32) = 1;
        }
        goto LABEL_50;
      }
      *(int64x2_t *)&v65[8] = vdupq_n_s64(1uLL);
      *(void *)uint64_t v65 = &unk_2140A9570;
      uint64_t v66 = -1;
      if (TFileObject::verify(v12, (uint64_t)v65, 1uLL, 1))
      {
        std::string::basic_string[abi:ne180100]<0>(&__sz, &byte_2140B33BB);
        unsigned int v63 = byte_26C4DF190;
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v64, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else {
          std::string v64 = __sz;
        }
        unsigned int v63 = (std::string::value_type *)&unk_26C4E0710;
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v64;
        }
        else {
          uint64_t v37 = (std::string *)v64.__r_.__value_.__r.__words[0];
        }
        conditionalAssert((const char *)v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 517, v35, v36);
        unsigned int v63 = byte_26C4DF190;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__sz.__r_.__value_.__l.__data_);
        }
        uint64_t v38 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        void *v38 = byte_26C4DF190;
        uint64_t v39 = (std::string *)(v38 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v43 = *(_OWORD *)__p;
          v38[3] = *(void *)&__p[16];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v43;
        }
        void *v38 = &unk_26C4E0710;
      }
      uint64_t v13 = *(void *)(v12 + 24);
      if (v13) {
        break;
      }
LABEL_50:
      uint64_t v12 = *(void *)(v12 + 16);
      if (!v12) {
        return;
      }
    }
    char v14 = 0;
    while (1)
    {
      if ((TFileObject::verify((TFileObject *)v13, 1, 0) & 1) == 0)
      {
        uint64_t v15 = *(__int32 **)(v13 + 24);
        if (*(_DWORD *)(v13 + 40) == 2)
        {
          TRegExp::add((uint64_t)a3, v15, a4);
          goto LABEL_15;
        }
        if (!TLexicon::checkName((uint64_t)a5, v15, 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(a5, *(__int32 **)(v13 + 24)))
          {
            loggableFileObject((uint64_t *)v13);
            int v24 = v59;
            uint64_t v25 = (void **)v58;
            loggableUnicode(*(unsigned int **)(v13 + 24), __p);
            int v30 = &v58;
            if (v24 < 0) {
              int v30 = v25;
            }
            uint64_t v31 = __p;
            if (__p[23] < 0) {
              uint64_t v31 = *(unsigned char **)__p;
            }
            tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v26, v27, v28, v29, v30, v31);
            a6 = v51;
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (v59 < 0) {
              operator delete(v58);
            }
          }
          *(void *)long long __p = v56;
          *(_OWORD *)&__p[8] = xmmword_214085190;
          char v57 = 1;
          TRegExp::stringToRegExp(*(void *)(v13 + 24), (uint64_t)__p, 0, 3);
          if (*(void *)&__p[16] >= *(void *)&__p[8])
          {
            if (v57)
            {
              int v67 = 0;
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], &v67, 1uLL);
              uint64_t v32 = *(__int32 **)__p;
              --*(void *)&__p[16];
            }
            else
            {
              uint64_t v32 = *(__int32 **)__p;
              if (*(void *)&__p[8]) {
                *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
              }
            }
          }
          else
          {
            uint64_t v32 = *(__int32 **)__p;
            *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
          }
          TRegExp::add((uint64_t)a3, v32, a4);
          if (v57 && *(void **)__p != v56 && *(void *)__p) {
            MEMORY[0x216698730]();
          }
          goto LABEL_15;
        }
        loggableFileObject((uint64_t *)v13);
        int v16 = v61;
        uint64_t v17 = (void **)v60;
        loggableUnicode(*(unsigned int **)(v13 + 24), __p);
        uint64_t v22 = &v60;
        if (v16 < 0) {
          uint64_t v22 = v17;
        }
        uint64_t v23 = __p;
        if (__p[23] < 0) {
          uint64_t v23 = *(unsigned char **)__p;
        }
        tknPrintf("Error: %s'%s' is an invalid token name.\n", v18, v19, v20, v21, v22, v23);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (v61 < 0) {
          operator delete(v60);
        }
      }
      char v14 = 1;
LABEL_15:
      uint64_t v13 = *(void *)(v13 + 16);
      if (!v13)
      {
        if (v14)
        {
          std::string::basic_string[abi:ne180100]<0>(&v52, &byte_2140B33BB);
          uint64_t v53 = byte_26C4DF190;
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v54, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          }
          else {
            std::string v54 = v52;
          }
          uint64_t v53 = (std::string::value_type *)&unk_26C4E0710;
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v40 = &v54;
          }
          else {
            uint64_t v40 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          conditionalAssert((const char *)v40, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/mungemapmgr.cpp", 564, v33, v34);
          uint64_t v53 = byte_26C4DF190;
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v54.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52.__r_.__value_.__l.__data_);
          }
          unint64_t v41 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
          *unint64_t v41 = byte_26C4DF190;
          long long v42 = (std::string *)(v41 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            long long v44 = *(_OWORD *)__p;
            v41[3] = *(void *)&__p[16];
            *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v44;
          }
          *unint64_t v41 = &unk_26C4E0710;
        }
        goto LABEL_50;
      }
    }
  }
}

void sub_21401A014(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,void *a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TGroup::freeMemory(v41);
    __cxa_rethrow();
  }
  JUMPOUT(0x21401A11CLL);
}

void sub_21401A10C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_21401A114()
{
}

uint64_t *TGroup::freeMemory(uint64_t *this)
{
  uint64_t v2 = *this;
  uint64_t v1 = this[1];
  if (v1 != *this)
  {
    uint64_t v3 = this;
    unint64_t v4 = 0;
    do
    {
      this = *(uint64_t **)(v2 + 8 * v4);
      if (this)
      {
        TRule::~TRule((TRule *)this);
        this = (uint64_t *)MEMORY[0x216698730]();
        uint64_t v2 = *v3;
        uint64_t v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return this;
}

void TGroup::~TGroup(TGroup *this)
{
  TGroup::freeMemory((uint64_t *)this);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t TGroup::munge(uint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v5 = *a1;
  if (a1[1] == *a1)
  {
LABEL_5:
    uint64_t v10 = (uint64_t)(a1 + 3);
  }
  else
  {
    unint64_t v9 = 0;
    while ((TRule::test(*(uint64_t **)(v5 + 8 * v9), a2, a3, a4) & 1) == 0)
    {
      ++v9;
      uint64_t v5 = *a1;
      if (v9 >= (a1[1] - *a1) >> 3) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = *(void *)(*a1 + 8 * v9) + 24;
  }
  return *(void *)v10;
}

void TMungeMapManager::TMungeMapManager(TMungeMapManager *this, TInputStream *a2, TLexicon *a3)
{
  TAllocator::TAllocator(this, 2048);
  v4[5] = 0;
  v4[6] = 0;
  v4[7] = 0;
  v4[8] = a3;
  operator new();
}

void sub_21401A95C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,void *a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v43);
  JUMPOUT(0x21401AA7CLL);
}

void sub_21401AA74()
{
}

void sub_21401AA9C(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v3, 0x60C40CE5A77A8);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *((void *)v1 + 6) = v5;
    operator delete(v5);
  }
  TAllocator::clear(v1);
  _Unwind_Resume(a1);
}

void sub_21401AAC4()
{
}

TRegExp *TMungeMapManager::freeMemory(TMungeMapManager *this)
{
  uint64_t result = (TRegExp *)*((void *)this + 9);
  if (result)
  {
    TRegExp::~TRegExp(result);
    uint64_t result = (TRegExp *)MEMORY[0x216698730]();
  }
  uint64_t v4 = *((void *)this + 5);
  uint64_t v3 = *((void *)this + 6);
  if (v3 != v4)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t result = *(TRegExp **)(v4 + 8 * v5);
      if (result)
      {
        TGroup::~TGroup(result);
        uint64_t result = (TRegExp *)MEMORY[0x216698730]();
        uint64_t v4 = *((void *)this + 5);
        uint64_t v3 = *((void *)this + 6);
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  return result;
}

void TMungeMapManager::~TMungeMapManager(TMungeMapManager *this)
{
  TMungeMapManager::freeMemory(this);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  TAllocator::clear(this);
}

void TMungeMapManager::mungeWithGroups(uint64_t a1, TVertex *this, TGraph *a3, int *a4, int *a5, TSegmenter *a6, unint64_t a7, unint64_t a8)
{
  uint64_t v56 = (int *)v58;
  long long v57 = xmmword_214085190;
  char v59 = 1;
  uint64_t v13 = (char *)*((void *)this + 2);
  if (v13)
  {
    Previousuint64_t Segment = TSegmenter::getPreviousSegment(a6, v13);
    if (PreviousSegment)
    {
      if (*(_DWORD *)(PreviousSegment + 24) == 5) {
        goto LABEL_6;
      }
      a4 = *(int **)PreviousSegment;
    }
    TBuffer<wchar_t>::assign((uint64_t)&v56, a4);
  }
LABEL_6:
  std::string v54 = 0;
  long long __p = 0;
  uint64_t v55 = 0;
  uint64_t v49 = (unsigned int *)v51;
  long long v50 = xmmword_214085190;
  char v52 = 1;
  uint64_t OutEdge = TVertex::getOutEdge((uint64_t)this);
  if (OutEdge)
  {
    uint64_t v17 = (uint64_t (*)(long long *, long long *))&v47;
LABEL_8:
    unint64_t v18 = *(void *)(OutEdge + 40);
    if (v18 >= a7 && v18 < a8)
    {
      unsigned int v20 = *(_DWORD *)(OutEdge + 48);
      BOOL v21 = v20 > 5;
      int v22 = (1 << v20) & 0x2C;
      if (v21 || v22 == 0)
      {
        TWord::getTokenName(*(__int32 ***)(OutEdge + 56), (uint64_t)&v49);
        std::vector<TRegExpMatch>::resize((uint64_t)&__p, 0);
        int v24 = *(void **)(a1 + 72);
        if (*((void *)&v50 + 1) >= (unint64_t)v50)
        {
          if (v52)
          {
            LODWORD(v45) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), (int *)&v45, 1uLL);
            uint64_t v25 = v49;
            --*((void *)&v50 + 1);
          }
          else
          {
            uint64_t v25 = v49;
            if ((void)v50) {
              v49[(void)v50 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v25 = v49;
          v49[*((void *)&v50 + 1)] = 0;
        }
        TRegExp::match(v24, v25, 0, (uint64_t)&__p);
        if (__p != v54)
        {
          uint64_t v45 = sortMatch;
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>((uint64_t)__p, v54, (uint64_t (**)(long long *, long long *))&v45, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (unsigned char *)__p) >> 3)), 1, v26);
          uint64_t v45 = (BOOL (*)(uint64_t, uint64_t))v17;
          long long v46 = xmmword_214085190;
          char v48 = 1;
          uint64_t v27 = *(char **)(*(void *)(OutEdge + 24) + 24);
          unint64_t v41 = v17;
          if (v27)
          {
            if (*v27)
            {
              uint64_t Segment = TSegmenter::getSegment(a6, v27);
              if (*(_DWORD *)(Segment + 24) != 5) {
                TBuffer<wchar_t>::assign((uint64_t)&v45, *(int **)Segment);
              }
            }
            else
            {
              TBuffer<wchar_t>::assign((uint64_t)&v45, a5);
            }
          }
          uint64_t v29 = __p;
          if (v54 == __p) {
            goto LABEL_68;
          }
          unint64_t v30 = 0;
          long long v42 = *(TVertex **)(OutEdge + 24);
          while (1)
          {
            uint64_t v31 = *(uint64_t **)(*(void *)(a1 + 40) + 8 * v29[3 * v30 + 2]);
            if (*((void *)&v57 + 1) >= (unint64_t)v57)
            {
              if (v59)
              {
                v60[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v56, *((unint64_t *)&v57 + 1), v60, 1uLL);
                uint64_t v32 = v56;
                --*((void *)&v57 + 1);
              }
              else
              {
                uint64_t v32 = v56;
                if ((void)v57) {
                  v56[(void)v57 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v32 = v56;
              v56[*((void *)&v57 + 1)] = 0;
            }
            if (*((void *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                v60[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v60, 1uLL);
                uint64_t v33 = (int *)v45;
                --*((void *)&v46 + 1);
              }
              else
              {
                uint64_t v33 = (int *)v45;
                if ((void)v46) {
                  *((_DWORD *)v45 + v46 - 1) = 0;
                }
              }
            }
            else
            {
              uint64_t v33 = (int *)v45;
              *((_DWORD *)v45 + *((void *)&v46 + 1)) = 0;
            }
            uint64_t v35 = (const __int32 **)TGroup::munge(v31, OutEdge, v32, v33);
            if (v35) {
              break;
            }
            if (v34)
            {
              uint64_t v36 = TVertex::getOutEdge((uint64_t)this);
              if (v36)
              {
                unint64_t v37 = 0;
LABEL_49:
                if (*(_DWORD *)(v36 + 48) != 5) {
                  ++v37;
                }
                while (1)
                {
                  uint64_t v36 = *(void *)(v36 + 8);
                  if (!v36) {
                    break;
                  }
                  if (!*(unsigned char *)(v36 + 32)) {
                    goto LABEL_49;
                  }
                }
                if (v37 >= 2)
                {
                  uint64_t v38 = TVertex::getInEdge((uint64_t)v42);
                  if (v38)
                  {
                    unint64_t v39 = 0;
LABEL_57:
                    if (*(_DWORD *)(v38 + 48) != 5) {
                      ++v39;
                    }
                    while (1)
                    {
                      uint64_t v38 = *(void *)v38;
                      if (!v38) {
                        break;
                      }
                      if (!*(unsigned char *)(v38 + 32)) {
                        goto LABEL_57;
                      }
                    }
                    if (v39 >= 2)
                    {
                      TGraph::deleteEdge((uint64_t)a3, OutEdge);
LABEL_68:
                      uint64_t v17 = v41;
                      if (v48 && (char *)v45 != (char *)v41 && v45) {
                        MEMORY[0x216698730]();
                      }
                      goto LABEL_16;
                    }
                  }
                }
              }
            }
            ++v30;
            uint64_t v29 = __p;
            if (v30 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (unsigned char *)__p) >> 3)) {
              goto LABEL_68;
            }
          }
          if (v34) {
            TGraph::deleteEdge((uint64_t)a3, OutEdge);
          }
          addSequence(v35, this, v42, a3, *(TLexicon **)(a1 + 64), 0, 0, 0);
          goto LABEL_68;
        }
      }
    }
LABEL_16:
    while (1)
    {
      uint64_t OutEdge = *(void *)(OutEdge + 8);
      if (!OutEdge) {
        break;
      }
      if (!*(unsigned char *)(OutEdge + 32)) {
        goto LABEL_8;
      }
    }
  }
  if (v52)
  {
    if (v49 != (unsigned int *)v51 && v49 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (__p)
  {
    std::string v54 = (__n128 *)__p;
    operator delete(__p);
  }
  if (v59 && v56 != (int *)v58)
  {
    if (v56) {
      MEMORY[0x216698730]();
    }
  }
}

void sub_21401B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (LOBYTE(STACK[0x460]) && a18 != a10 && a18) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x880]))
  {
    unint64_t v21 = STACK[0x468];
    if (STACK[0x468] != v19)
    {
      if (v21) {
        MEMORY[0x216698730](v21, 0x1000C4052888210);
      }
    }
  }
  int v22 = (void *)STACK[0x888];
  if (STACK[0x888])
  {
    STACK[0x890] = (unint64_t)v22;
    operator delete(v22);
  }
  if (LOBYTE(STACK[0xCB8]))
  {
    unint64_t v23 = STACK[0x8A0];
    if (STACK[0x8A0] != v18)
    {
      if (v23) {
        MEMORY[0x216698730](v23, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

BOOL sortMatch(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) < *(void *)(a2 + 16);
}

void TMungeMapManager::munge(uint64_t a1, TGraph *a2, int *a3, int *a4, TSegmenter *a5, unint64_t a6)
{
  if (*a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = (int *)&unk_2140A9568;
  }
  if (*a4) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = (int *)&unk_2140A9568;
  }
  uint64_t v8 = *((void *)a2 + 11) - *((void *)a2 + 10);
  if (v8)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3;
    unint64_t v15 = v8 >> 3;
    if (v15 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v15;
    }
    do
    {
      uint64_t v17 = *(TVertex **)(*((void *)a2 + 10) + 8 * v13);
      if (!*((unsigned char *)v17 + 32)) {
        TMungeMapManager::mungeWithGroups(a1, v17, a2, v6, v7, a5, a6, v14);
      }
      ++v13;
    }
    while (v16 != v13);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v11;
        *uint64_t v8 = v10;
        *(void *)(a2 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v12 = (long long *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

void TGrammarManager::TGrammarManager(TGrammarManager *this, TInputStream *a2, const TTagManager *a3, TLexicon *a4, TItnParamManager *a5)
{
  *(void *)this = &unk_26C4E48B8;
  *((void *)this + 2) = &unk_26C4E48B8;
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -1;
  *((void *)this + 7) = a5;
  *((void *)this + 4) = a4;
  operator new();
}

void sub_21401C308()
{
}

void sub_21401C480()
{
}

void sub_21401C910(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t callBackToken(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, TAllocator *a5)
{
  if (a2 != 1 || *(void *)a1 > 1uLL) {
    return 0;
  }
  long long v10 = *(__int32 **)(a1 + 8);
  size_t v11 = wcslen(v10);
  if (v11)
  {
    size_t v12 = v11;
    if (TLexicon::checkName(a3, v10, *a4 > 3uLL, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableUnicode(*(unsigned int **)(a1 + 8), &__p);
      if (v24 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      tknPrintf("Warning: $Token('%s') : The formatter grammar constructed an invalid token.\n", v13, v14, v15, v16, p_p);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
      return 0;
    }
    if ((v12 + 9) >> 62) {
      uint64_t v18 = -1;
    }
    else {
      uint64_t v18 = 4 * (v12 + 9);
    }
    long long __p = (void *)TAllocator::allocate(a5, v18);
    unint64_t v23 = v12 + 9;
    int64_t v24 = 0;
    char v26 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&__p, dword_2140A9808);
    uint64_t v19 = 0;
    uint64_t v20 = *(int **)(a1 + 8);
    while (v20[v19++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, v24, v20, v19 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&__p, v24, (int *)&unk_2140A9828, 1uLL);
    if (v24 < v23)
    {
      *((_DWORD *)__p + v24) = 0;
LABEL_23:
      if (v26 && __p != &v25 && __p) {
        MEMORY[0x216698730]();
      }
      return 1;
    }
    if (v26)
    {
      int v27 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, v24--, &v27, 1uLL);
      goto LABEL_23;
    }
    if (v23)
    {
      *((_DWORD *)__p + v23 - 1) = 0;
      goto LABEL_23;
    }
  }
  return 1;
}

void sub_21401CBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21401CDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x420])) {
    callBackSync(va);
  }
  _Unwind_Resume(a1);
}

void TWideChartSeeder::makeTerminals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, TAllocator *a6)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void *)(a1 + 16) + a2;
  if (v6 < *(void *)(a1 + 24))
  {
    uint64_t v8 = **(void **)(a1 + 8);
    if (v6 < 0x6DB6DB6DB6DB6DB7 * ((*(void *)(*(void *)(a1 + 8) + 8) - v8) >> 4)
      && (!a2 || !*(unsigned char *)(v8 + 112 * v6 + 32)))
    {
      std::string v54 = (__int32 *)v56;
      long long v55 = xmmword_214085190;
      char v57 = 1;
      TWord::getTokenName(*(__int32 ***)(v8 + 112 * v6 + 16), (uint64_t)&v54);
      uint64_t v15 = *(char **)a3;
      uint64_t v14 = *(void *)(a3 + 8);
      uint64_t v16 = *(void *)(a1 + 32);
      if (*((void *)&v55 + 1) >= (unint64_t)v55)
      {
        if (v57)
        {
          LODWORD(v5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), (int *)&v50, 1uLL);
          uint64_t v17 = v54;
          --*((void *)&v55 + 1);
        }
        else
        {
          uint64_t v17 = v54;
          if ((void)v55) {
            v54[(void)v55 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v17 = v54;
        v54[*((void *)&v55 + 1)] = 0;
      }
      TGrammar::getTerminals(v16, (unsigned int *)v17, (char **)a3);
      unint64_t v18 = (v14 - (uint64_t)v15) >> 3;
      if (v18 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)
      {
        if ((unint64_t)(*((void *)&v55 + 1) + 1) >> 62) {
          uint64_t v19 = -1;
        }
        else {
          uint64_t v19 = 4 * (*((void *)&v55 + 1) + 1);
        }
        uint64_t v20 = (__int32 *)TAllocator::allocate(a6, v19);
        if (*((void *)&v55 + 1) >= (unint64_t)v55)
        {
          if (v57)
          {
            LODWORD(v5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), (int *)&v50, 1uLL);
            unint64_t v21 = v54;
            --*((void *)&v55 + 1);
          }
          else
          {
            unint64_t v21 = v54;
            if ((void)v55) {
              v54[(void)v55 - 1] = 0;
            }
          }
        }
        else
        {
          unint64_t v21 = v54;
          v54[*((void *)&v55 + 1)] = 0;
        }
        wcscpy(v20, v21);
        long long v50 = (__int32 *)v52;
        long long v51 = xmmword_214085190;
        char v53 = 1;
        TWord::getOptionalTagBits(*(void *)(**(void **)(a1 + 8) + 112 * (*(void *)(a1 + 16) + a2) + 16), (uint64_t)&v50);
        if ((unint64_t)(*((void *)&v51 + 1) + 1) >> 62) {
          uint64_t v22 = -1;
        }
        else {
          uint64_t v22 = 4 * (*((void *)&v51 + 1) + 1);
        }
        unint64_t v23 = (__int32 *)TAllocator::allocate(a6, v22);
        if (*((void *)&v51 + 1) >= (unint64_t)v51)
        {
          if (v53)
          {
            LODWORD(v59) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), (int *)&v59, 1uLL);
            int64_t v24 = v50;
            --*((void *)&v51 + 1);
          }
          else
          {
            int64_t v24 = v50;
            if ((void)v51) {
              v50[(void)v51 - 1] = 0;
            }
          }
        }
        else
        {
          int64_t v24 = v50;
          v50[*((void *)&v51 + 1)] = 0;
        }
        wcscpy(v23, v24);
        *(void *)&long long v59 = 1;
        *((void *)&v59 + 1) = v20;
        uint64_t v60 = 1;
        char v61 = v23;
        for (long long i = xmmword_2641F7470; v18 < (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3; ++v18)
        {
          Clientint Data = TGrammarCompiler::makeClientData((uint64_t *)&i, &v59, 2, a6);
          uint64_t v26 = ClientData;
          long long v28 = (uint64_t *)a5[1];
          unint64_t v27 = (unint64_t)a5[2];
          if ((unint64_t)v28 >= v27)
          {
            uint64_t v30 = ((char *)v28 - (unsigned char *)*a5) >> 3;
            if ((unint64_t)(v30 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = v27 - (void)*a5;
            uint64_t v32 = v31 >> 2;
            if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
              uint64_t v32 = v30 + 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            if (v33) {
              char v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a5 + 2), v33);
            }
            else {
              char v34 = 0;
            }
            uint64_t v35 = (uint64_t *)&v34[8 * v30];
            *uint64_t v35 = v26;
            long long v29 = v35 + 1;
            unint64_t v37 = (char *)*a5;
            uint64_t v36 = (char *)a5[1];
            if (v36 != *a5)
            {
              do
              {
                uint64_t v38 = *((void *)v36 - 1);
                v36 -= 8;
                *--uint64_t v35 = v38;
              }
              while (v36 != v37);
              uint64_t v36 = (char *)*a5;
            }
            *a5 = v35;
            a5[1] = v29;
            a5[2] = &v34[8 * v33];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            uint64_t *v28 = ClientData;
            long long v29 = v28 + 1;
          }
          a5[1] = v29;
          uint64_t v40 = *(void **)(a4 + 8);
          unint64_t v39 = *(void *)(a4 + 16);
          if ((unint64_t)v40 >= v39)
          {
            long long v42 = *(void **)a4;
            uint64_t v43 = ((uint64_t)v40 - *(void *)a4) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a4 + 16, v46);
              long long v42 = *(void **)a4;
              uint64_t v40 = *(void **)(a4 + 8);
            }
            else
            {
              uint64_t v47 = 0;
            }
            char v48 = &v47[8 * v43];
            *(void *)char v48 = 1;
            unint64_t v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *--v40;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            *(void *)a4 = v48;
            *(void *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v41;
            *(void *)(a4 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = &v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *uint64_t v40 = 1;
            unint64_t v41 = v40 + 1;
          }
          *(void *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v41;
        }
        if (v53 && v50 != (__int32 *)v52 && v50) {
          MEMORY[0x216698730]();
        }
      }
      if (v57 && v54 != (__int32 *)v56)
      {
        if (v54) {
          MEMORY[0x216698730]();
        }
      }
    }
  }
}

void sub_21401D2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0x448]))
  {
    if (a15 != a10 && a15 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0x868]))
  {
    unint64_t v17 = STACK[0x450];
    if (STACK[0x450] != a11)
    {
      if (v17) {
        MEMORY[0x216698730](v17, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TGrammarManager::getLMScore(uint64_t a1, __int32 *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v9 = a4;
  if (a4)
  {
    uint64_t v10 = a4 - 1;
    if (a4 == 1
      || TWord::getWordSpec(*(TWord **)(*a3 + 112 * (a4 - 2) + 16)) == -1
      || TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16)) == -1)
    {
      if (TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16)) == -1)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t WordSpec = TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16));
        uint64_t v42 = v13;
        uint64_t v9 = 1;
      }
    }
    else
    {
      uint64_t WordSpec = TWord::getWordSpec(*(TWord **)(*a3 + 112 * (a4 - 2) + 16));
      uint64_t v42 = v11;
      uint64_t v43 = TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16));
      uint64_t v44 = v12;
      uint64_t v9 = 2;
    }
  }
  uint64_t v36 = (__int32 *)v38;
  long long v37 = xmmword_214085190;
  char v39 = 1;
  if (*a2)
  {
    uint64_t v14 = &WordSpec + 2 * v9 + 1;
    while (!wcsncmp(a2, dword_2140A9808, 7uLL))
    {
      uint64_t v15 = a2 + 7;
      uint64_t v16 = wcsstr(a2 + 7, (const __int32 *)&unk_2140A9828);
      TBuffer<wchar_t>::resize((uint64_t)&v36, 0);
      TBuffer<wchar_t>::insert((uint64_t)&v36, 0, v15, v16 - v15);
      unint64_t v17 = *(void **)(a1 + 32);
      if (*((void *)&v37 + 1) >= (unint64_t)v37)
      {
        if (v39)
        {
          v40[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v36, *((unint64_t *)&v37 + 1), v40, 1uLL);
          unint64_t v18 = v36;
          --*((void *)&v37 + 1);
        }
        else
        {
          unint64_t v18 = v36;
          if ((void)v37) {
            v36[(void)v37 - 1] = 0;
          }
        }
      }
      else
      {
        unint64_t v18 = v36;
        v36[*((void *)&v37 + 1)] = 0;
      }
      HeadClone = (TWord *)TLexicon::findHeadClone(v17, v18);
      if (!HeadClone) {
        break;
      }
      ++v9;
      *(v14 - 1) = TWord::getWordSpec(HeadClone);
      *uint64_t v14 = v20;
      __int32 v21 = v16[1];
      a2 = v16 + 1;
      v14 += 2;
      if (!v21) {
        goto LABEL_20;
      }
    }
    uint64_t v30 = 0;
  }
  else
  {
LABEL_20:
    uint64_t v22 = a5 + a4;
    uint64_t v23 = *a3;
    if (a5 + a4 < (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4)))
    {
      uint64_t v24 = 112 * v22 + 16;
      uint64_t v25 = &WordSpec + 2 * v9 + 1;
      unint64_t v26 = v22 + 1;
      char v27 = 1;
      do
      {
        if (TWord::getWordSpec(*(TWord **)(v23 + v24)) == -1) {
          break;
        }
        *(v25 - 1) = TWord::getWordSpec(*(TWord **)(*a3 + v24));
        uint64_t *v25 = v28;
        uint64_t v23 = *a3;
        char v29 = (v26 < 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4)) & v27;
        ++v9;
        v24 += 112;
        v25 += 2;
        ++v26;
        char v27 = 0;
      }
      while ((v29 & 1) != 0);
    }
    SDLm_LmScore(0, 0, 0, 0, 0, &WordSpec, v9, (uint64_t)v40, v9, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    uint64_t v30 = 0;
    if (v9)
    {
      uint64_t v31 = v40;
      do
      {
        int v32 = *v31++;
        uint64_t v30 = (v32 + v30);
        --v9;
      }
      while (v9);
    }
  }
  if (v39)
  {
    if (v36 != (__int32 *)v38 && v36 != 0) {
      MEMORY[0x216698730]();
    }
  }
  return v30;
}

void sub_21401D728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (LOBYTE(STACK[0x470]))
  {
    if (a20 != v20 && a20 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void *TGrammarManager::search(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = (uint64_t)a1;
  a1[8] = a5;
  uint64_t v9 = *(void *)(a1[5] + 56);
  v113[0] = &unk_26C4E1400;
  v113[1] = a2;
  v113[2] = a3;
  v113[3] = a4;
  v113[4] = v9;
  uint64_t v10 = (TParam *)(a1[7] + 18256);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v10);
  char v12 = *((unsigned char *)v10 + TParam::getValidConfig(v10, ActiveConfigHandle) + 152);
  uint64_t v13 = *(unsigned char **)(v8 + 48);
  v13[8] = v12;
  (*(void (**)(unsigned char *))(*(void *)v13 + 16))(v13);
  uint64_t v14 = (TParam *)(*(void *)(v8 + 56) + 4040);
  uint64_t v15 = TParam::getActiveConfigHandle(v14);
  uint64_t v16 = *((int *)v14 + TParam::getValidConfig(v14, v15) + 40);
  uint64_t v17 = *(void *)(v8 + 48);
  uint64_t v18 = *(void *)(v17 + 16);
  *(void *)(v17 + 24) = v16;
  (*(void (**)(void))(v18 + 16))();
  AllProductions = (void *)TParser::getAllProductions(*(void **)(v8 + 48), (uint64_t)v113);
  TAllocator::TAllocator((TAllocator *)v112, 2048);
  if (AllProductions)
  {
    int v102 = 0;
    uint64_t v100 = v8;
    unint64_t v26 = 0x26AB82000uLL;
    while (1)
    {
      if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_2140A9830, (TAllocator *)v112, 0) > 1)goto LABEL_60; {
      char v27 = (__int32 *)v20;
      }
      if (*(_DWORD *)v20)
      {
        LOBYTE(v103[0]) = 0;
        {
          operator new();
        }
        double v28 = TLocaleInfo::stringToFloat(*(void *)(v26 + 2288), v27, (BOOL *)v103);
        if (LOBYTE(v103[0]))
        {
          loggableUnicode((unsigned int *)v27, &__p);
          p_p = &__p;
          if (v107 < 0) {
            p_p = __p;
          }
          tknPrintf("Error: 'priority' was '%s'. Expected a double-precision value.\n", v29, v30, v31, v32, p_p);
          goto LABEL_10;
        }
        double v34 = v28;
      }
      else
      {
        double v34 = 0.0;
      }
      if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_2140A9854, (TAllocator *)v112, 0) > 1)goto LABEL_60; {
      uint64_t v35 = (__int32 *)v20;
      }
      if (!*(_DWORD *)v20)
      {
        tknPrintString("Error: 'result' was ''. Ignored production.\n");
        goto LABEL_60;
      }
      unint64_t v36 = AllProductions[2];
      LOBYTE(v103[0]) = 0;
      unint64_t AttributeValue = TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_2140A9870, (TAllocator *)v112, v103);
      unint64_t v39 = 0;
      if (!LOBYTE(v103[0]) || AttributeValue > 1) {
        goto LABEL_25;
      }
      uint64_t v40 = v38;
      BOOL v111 = 0;
      {
        operator new();
      }
      unsigned int v41 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v40, &v111);
      if (!v111)
      {
        unint64_t v39 = v41;
        if (v36 <= v41)
        {
          loggableUnicode(v40, &__p);
          uint64_t v71 = &__p;
          if (v107 < 0) {
            uint64_t v71 = __p;
          }
          tknPrintf("Error: 'resultStart' was '%s'. Expected an integer value in the range [0,%lld).\n", v67, v68, v69, v70, v71, v36);
          int v72 = v107;
          goto LABEL_59;
        }
LABEL_25:
        LOBYTE(v103[0]) = 0;
        unint64_t v47 = TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_2140A98A0, (TAllocator *)v112, v103);
        unint64_t v49 = 0;
        if (!LOBYTE(v103[0]) || v47 > 1)
        {
LABEL_34:
          LMuint64_t Score = TGrammarManager::getLMScore(v8, v35, a2, v39 + a3, v36 - (v39 + v49));
          int v58 = LMScore;
          int v59 = v102;
          if (v102 <= LMScore) {
            int v59 = LMScore;
          }
          int v102 = v59;
          unint64_t v60 = a6[1];
          unint64_t v61 = a6[2];
          if (v60 >= v61)
          {
            uint64_t v63 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v60 - *a6) >> 3);
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) > 0x492492492492492) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v65 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v61 - *a6) >> 3);
            if (2 * v65 > v64) {
              unint64_t v64 = 2 * v65;
            }
            if (v65 >= 0x249249249249249) {
              unint64_t v20 = 0x492492492492492;
            }
            else {
              unint64_t v20 = v64;
            }
            if (v20) {
              uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarManager2Result>>((uint64_t)(a6 + 2), v20);
            }
            else {
              uint64_t v66 = 0;
            }
            uint64_t v73 = &v66[56 * v63];
            *(void *)uint64_t v73 = AllProductions;
            *((void *)v73 + 1) = v35;
            *((void *)v73 + 2) = v36;
            *((void *)v73 + 3) = v39;
            *((void *)v73 + 4) = v49;
            *((double *)v73 + 5) = v34;
            *((_DWORD *)v73 + 12) = v58;
            long long v75 = (char *)*a6;
            uint64_t v74 = (char *)a6[1];
            uint64_t v76 = v73;
            unint64_t v26 = 0x26AB82000;
            if (v74 != (char *)*a6)
            {
              do
              {
                __n128 v24 = *(__n128 *)(v74 - 56);
                long long v25 = *(_OWORD *)(v74 - 40);
                long long v77 = *(_OWORD *)(v74 - 24);
                *((_DWORD *)v76 - 2) = *((_DWORD *)v74 - 2);
                *(_OWORD *)(v76 - 24) = v77;
                *(_OWORD *)(v76 - 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v25;
                *(__n128 *)(v76 - 56) = v24;
                v76 -= 56;
                v74 -= 56;
              }
              while (v74 != v75);
              uint64_t v74 = (char *)*a6;
            }
            uint64_t v62 = v73 + 56;
            *a6 = (uint64_t)v76;
            a6[1] = (uint64_t)(v73 + 56);
            a6[2] = (uint64_t)&v66[56 * v20];
            if (v74) {
              operator delete(v74);
            }
          }
          else
          {
            *(void *)unint64_t v60 = AllProductions;
            *(void *)(v60 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v35;
            *(void *)(v60 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v36;
            *(void *)(v60 + 24) = v39;
            *(void *)(v60 + 32) = v49;
            *(double *)(v60 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v34;
            uint64_t v62 = (char *)(v60 + 56);
            *(_DWORD *)(v60 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = LMScore;
            unint64_t v26 = 0x26AB82000;
          }
          a6[1] = (uint64_t)v62;
          uint64_t v8 = v100;
          goto LABEL_60;
        }
        long long v50 = v48;
        BOOL v111 = 0;
        {
          operator new();
        }
        unsigned int v51 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v50, &v111);
        if (!v111)
        {
          if (v39 < v51)
          {
            unint64_t v49 = v36 - v51;
            if (v36 >= v51) {
              goto LABEL_34;
            }
          }
          loggableUnicode(v50, &__p);
          uint64_t v82 = &__p;
          if (v107 < 0) {
            uint64_t v82 = __p;
          }
          tknPrintf("Error: 'resultEnd' was '%s'. Expected an integer value in the range (%lld,%lld).\n", v78, v79, v80, v81, v82, v39, v36);
          int v72 = v107;
LABEL_59:
          unint64_t v26 = 0x26AB82000;
          if ((v72 & 0x80000000) == 0) {
            goto LABEL_60;
          }
LABEL_11:
          operator delete(__p);
          goto LABEL_60;
        }
        loggableUnicode(v50, &__p);
        uint64_t v56 = &__p;
        if (v107 < 0) {
          uint64_t v56 = __p;
        }
        tknPrintf("Error: 'resultEnd' was '%s'. Expected an integer value.\n", v52, v53, v54, v55, v56);
        unint64_t v26 = 0x26AB82000;
        goto LABEL_10;
      }
      loggableUnicode(v40, &__p);
      unint64_t v46 = &__p;
      if (v107 < 0) {
        unint64_t v46 = __p;
      }
      tknPrintf("Error: 'resultStart' was '%s'. Expected an integer value.\n", v42, v43, v44, v45, v46);
      unint64_t v26 = 0x26AB82000;
LABEL_10:
      if (v107 < 0) {
        goto LABEL_11;
      }
LABEL_60:
      AllProductions = (void *)*AllProductions;
      if (!AllProductions) {
        goto LABEL_69;
      }
    }
  }
  int v102 = 0;
LABEL_69:
  uint64_t v83 = MEMORY[0x263F8C2C8];
  if (*(unsigned char *)(v8 + 24))
  {
    tknPrintf("Parse chart at index %llu:\n", v20, v21, v22, v23, a3);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    TParser::logChart(*(uint64_t **)(v8 + 48), &__p);
    std::stringbuf::str();
    if (v104 >= 0) {
      uint64_t v84 = v103;
    }
    else {
      uint64_t v84 = (void **)v103[0];
    }
    tknPrintString((const char *)v84);
    if (v104 < 0) {
      operator delete(v103[0]);
    }
    long long __p = *(void **)v83;
    *(void **)((char *)&__p + *((void *)__p - DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 3)) = *(void **)(v83 + 24);
    uint64_t v106 = MEMORY[0x263F8C318] + 16;
    if (v109 < 0) {
      operator delete(v108);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166986E0](v110);
  }
  uint64_t v85 = *a6;
  uint64_t v86 = (__n128 *)a6[1];
  if ((__n128 *)*a6 != v86)
  {
    unint64_t v87 = ((uint64_t)v86 - v85) / 56;
    v24.n128_f64[0] = (double)(v102 + 1);
    uint64_t v88 = v87 <= 1 ? 1 : ((uint64_t)v86 - v85) / 56;
    uint64_t v89 = v85 + 40;
    do
    {
      LODWORD(v25) = *(_DWORD *)(v89 + 8);
      *(double *)&long long v25 = *(double *)v89 + (double)(unint64_t)v25 / v24.n128_f64[0];
      *(void *)uint64_t v89 = v25;
      v89 += 56;
      --v88;
    }
    while (v88);
    long long __p = sortResult;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*,false>(v85, v86, (uint64_t (**)(long long *, long long *))&__p, 126 - 2 * __clz(v87), 1, v24);
    if (*(unsigned char *)(v8 + 8))
    {
      tknPrintString("Parse tree for word sequence:");
      if (*(void *)(*a6 + 16))
      {
        unint64_t v90 = 0;
        uint64_t v91 = 112 * a3 + 16;
        do
        {
          tknPrintString(" ");
          loggableUnicode(**(unsigned int ***)(*a2 + v91), &__p);
          if (v107 >= 0) {
            uint64_t v92 = (const char *)&__p;
          }
          else {
            uint64_t v92 = (const char *)__p;
          }
          tknPrintString(v92);
          if (v107 < 0) {
            operator delete(__p);
          }
          ++v90;
          v91 += 112;
        }
        while (v90 < *(void *)(*a6 + 16));
      }
      tknPrintString("\n");
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      uint64_t v94 = *a6;
      uint64_t v93 = a6[1];
      if (v93 != *a6)
      {
        uint64_t v95 = 0;
        unint64_t v96 = 0;
        do
        {
          uint64_t v97 = v94 + v95;
          if (*(void *)(v94 + 16) != *(void *)(v94 + v95 + 16) || *(double *)(v94 + 40) != *(double *)(v97 + 40)) {
            break;
          }
          if (*(void *)(v94 + 24) == *(void *)(v94 + v95 + 24)
            && *(void *)(v94 + 32) == *(void *)(v94 + v95 + 32))
          {
            TParser::logTree(*(void *)(v8 + 48), *(void **)v97, &__p);
            std::stringbuf::str();
            if (v104 >= 0) {
              uint64_t v98 = v103;
            }
            else {
              uint64_t v98 = (void **)v103[0];
            }
            tknPrintString((const char *)v98);
            if (v104 < 0) {
              operator delete(v103[0]);
            }
            uint64_t v94 = *a6;
            uint64_t v93 = a6[1];
          }
          ++v96;
          v95 += 56;
        }
        while (v96 < 0x6DB6DB6DB6DB6DB7 * ((v93 - v94) >> 3));
      }
      long long __p = *(void **)v83;
      *(void **)((char *)&__p + *((void *)__p - DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 3)) = *(void **)(v83 + 24);
      uint64_t v106 = MEMORY[0x263F8C318] + 16;
      if (v109 < 0) {
        operator delete(v108);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166986E0](v110);
    }
  }
  return TAllocator::clear((TAllocator *)v112);
}

void sub_21401E294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  MEMORY[0x216698730](v28, 0x1070C40ADD13FEBLL);
  TAllocator::clear((TAllocator *)(v29 - 184));
  _Unwind_Resume(a1);
}

void TWideChartSeeder::~TWideChartSeeder(TWideChartSeeder *this)
{
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*,false>(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManagerResult const&,TGrammarManagerResult const&),TGrammarManagerResult*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = (long long *)(a2 - 56);
      if (!(*a3)((long long *)(a2 - 56), (long long *)a1)) {
        return 1;
      }
      long long v10 = *(_OWORD *)(a1 + 16);
      long long v9 = *(_OWORD *)(a1 + 32);
      long long v11 = *(_OWORD *)a1;
      uint64_t v12 = *(void *)(a1 + 48);
      long long v14 = *(_OWORD *)(a2 - 40);
      long long v13 = *(_OWORD *)(a2 - 24);
      long long v15 = *v8;
      *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(a2 - 8);
      *(_OWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v14;
      *(_OWORD *)(a1 + 32) = v13;
      *(_OWORD *)a1 = v15;
      *(_DWORD *)(a2 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12;
      *uint64_t v8 = v11;
      *(_OWORD *)(a2 - 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10;
      BOOL result = 1;
      *(_OWORD *)(a2 - 24) = v9;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((long long *)a1, (long long *)(a1 + 56), (long long *)(a2 - 56), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a1 + 56, a1 + 112, a1 + 168, (long long *)(a2 - 56), a3);
      return 1;
    default:
      uint64_t v16 = (long long *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((long long *)a1, (long long *)(a1 + 56), (long long *)(a1 + 112), a3);
      uint64_t v17 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v17, v16))
    {
      long long v20 = *(_OWORD *)(v17 + 16);
      long long v26 = *(_OWORD *)v17;
      long long v27 = v20;
      long long v28 = *(_OWORD *)(v17 + 32);
      uint64_t v29 = *(void *)(v17 + 48);
      uint64_t v21 = v18;
      while (1)
      {
        uint64_t v22 = a1 + v21;
        long long v23 = *(_OWORD *)(a1 + v21 + 128);
        *(_OWORD *)(v22 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(a1 + v21 + 112);
        *(_OWORD *)(v22 + 184) = v23;
        *(_OWORD *)(v22 + 20MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_OWORD *)(a1 + v21 + 144);
        *(_DWORD *)(v22 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = *(_DWORD *)(a1 + v21 + 160);
        if (v21 == -112) {
          break;
        }
        v21 -= 56;
        if (((*a3)(&v26, (long long *)(v22 + 56)) & 1) == 0)
        {
          uint64_t v24 = a1 + v21 + 168;
          goto LABEL_12;
        }
      }
      uint64_t v24 = a1;
LABEL_12:
      long long v25 = v27;
      *(_OWORD *)uint64_t v24 = v26;
      *(_OWORD *)(v24 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v25;
      *(_OWORD *)(v24 + 32) = v28;
      *(_DWORD *)(v24 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v29;
      if (++v19 == 8) {
        return v17 + 56 == a2;
      }
    }
    uint64_t v16 = (long long *)v17;
    v18 += 56;
    v17 += 56;
    if (v17 == a2) {
      return 1;
    }
  }
}

void TLmScore::TLmScore(unint64_t *a1, unint64_t a2)
{
  a1[4] = 0;
  *a1 = a2;
  SDVoc_GetInfo(a2, (uint64_t)v3);
  a1[2] = v4;
  operator new[]();
}

uint64_t TLmScore::getClass(TLmScore *this, const char *a2)
{
  unint64_t Handle = SDWord_GetHandle(*(void *)this, a2);
  if (Handle == -1) {
    return *((void *)this + 4);
  }
  SDWord_GetTagBits(*(void *)this, Handle, 1uLL, *((void **)this + 3), (unint64_t)(*((void *)this + 2) + 7) >> 3);
  uint64_t v4 = *((void *)this + 2);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t result = 0;
  do
  {
    result |= ((uint64_t)(*(unsigned __int8 *)(*((void *)this + 3) + (v5 >> 3)) >> (v5 & 7) << 63) >> 63) & (1 << v5);
    ++v5;
  }
  while (v4 != v5);
  return result;
}

void TLmScore::~TLmScore(TLmScore *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x216698730](v2, 0x1000C4077774924);
  }
  if (*(void *)this != -1)
  {
    SDWord_DeleteList(*(void *)this, (uint64_t)this + 8, 1u);
    SDVoc_Delete(*(void *)this);
  }
}

double TLmScore::getLmScore(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  unint64_t v6 = *a1;
  if (a2[1] == *a2)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      long long v10 = (const char *)(v5 + v8);
      if (*(char *)(v5 + v8 + 23) < 0) {
        long long v10 = *(const char **)v10;
      }
      uint64_t Handle = SDWord_GetHandle(v6, v10);
      if (Handle == -1) {
        uint64_t Handle = a1[1];
      }
      unint64_t v6 = *a1;
      uint64_t v12 = (unint64_t *)&v17[2 * v9++];
      unint64_t *v12 = *a1;
      v12[1] = Handle;
      uint64_t v5 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  uint64_t v13 = SDWord_GetHandle(v6, a3);
  if (v13 == -1) {
    uint64_t v13 = a1[1];
  }
  v16[0] = *a1;
  v16[1] = v13;
  int v15 = 0;
  SDLm_LmScore(0, 0, 0, v17, v9, v16, 1u, (uint64_t)&v15, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return (double)v15;
}

double TLmScore::getLmScore(TLmScore *this, const char *a2)
{
  uint64_t Handle = SDWord_GetHandle(*(void *)this, a2);
  if (Handle == -1) {
    uint64_t Handle = *((void *)this + 1);
  }
  v6[0] = *(void *)this;
  v6[1] = Handle;
  int v5 = 0;
  SDLm_LmScore(0, 0, 0, 0, 0, v6, 1u, (uint64_t)&v5, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return (double)v5;
}

void TCompounderParamManager::TCompounderParamManager(TCompounderParamManager *this, TLocaleInfo *a2)
{
  TLattProcParamManager::TLattProcParamManager(this, a2);
  *uint64_t v3 = &unk_26C4E3530;
  uint64_t v4 = (TParam *)(v3 + 62);
  TBoolParam::TBoolParam((uint64_t)(v3 + 62), (uint64_t)&unk_2140A9910, (uint64_t)&unk_2140A9950, 0, 0, (uint64_t)&unk_2140A99F0, (uint64_t)&unk_2140A9A28);
  TBoolParam::TBoolParam((uint64_t)this + 744, (uint64_t)&unk_2140A9A2C, (uint64_t)&unk_2140A9A74, 0, 0, (uint64_t)&unk_2140A99F0, (uint64_t)&unk_2140A9A28);
  TBoolParam::TBoolParam((uint64_t)this + 992, (uint64_t)&unk_2140A9B88, (uint64_t)&unk_2140A9BD4, 0, 0, (uint64_t)&unk_2140A9D54, (uint64_t)&unk_2140A9A28);
  TBoolParam::TBoolParam((uint64_t)this + 1240, (uint64_t)&unk_2140A9D94, (uint64_t)&unk_2140A9DF0, 0, 0, (uint64_t)&unk_2140A9F48, (uint64_t)&unk_2140A9A28);
  TIntParam::TIntParam((TCompounderParamManager *)((char *)this + 1488), (uint64_t)&unk_2140A9F88, (uint64_t)&unk_2140A9FF4, 0, -1, 10000, -1, (uint64_t)&unk_2140AA650, (uint64_t)&unk_2140A9A28);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TCompounderParamManager *)((char *)this + 744));
  TParamManager::add(this, (TCompounderParamManager *)((char *)this + 992));
  TParamManager::add(this, (TCompounderParamManager *)((char *)this + 1240));
  TParamManager::add(this, (TCompounderParamManager *)((char *)this + 1488));
}

void sub_21401EFF4(_Unwind_Exception *a1)
{
  TBoolParam::~TBoolParam(v5);
  TBoolParam::~TBoolParam(v4);
  TBoolParam::~TBoolParam(v3);
  TBoolParam::~TBoolParam(v2);
  TLattProcParamManager::~TLattProcParamManager(v1);
  _Unwind_Resume(a1);
}

void TCompounder::TCompounder(TCompounder *this, TInputStream *a2, const char *a3, TLexicon *a4)
{
  uint64_t v4 = TLatticeProcessor::TLatticeProcessor((uint64_t)this, (uint64_t)a4, 0);
  *(void *)uint64_t v4 = &unk_26C4DF740;
  *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0u;
  *(void *)(v4 + 24DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4 + 256;
  *(void *)(v4 + 256) = 0;
  *(void *)(v4 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(_OWORD *)(v4 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 16MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(void *)(v4 + 24MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(void *)(v4 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = v4 + 280;
  *(void *)(v4 + 28MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(void *)(v4 + 392) = 0;
  *(void *)(v4 + 40MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(void *)(v4 + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(v4 + 28DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(v4 + 296) = 0;
  *(_OWORD *)(v4 + 32DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(void *)(v4 + 304) = 3;
  *(void *)(v4 + 312) = 0x3FE0000000000000;
  *(void *)(v4 + 36DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(v4 + 376) = 0;
  operator new();
}

void sub_21401F190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x216698730](v4, 0x10F3C407200CA0FLL);
  unint64_t v9 = (void *)*((void *)v2 + 49);
  if (v9)
  {
    *((void *)v2 + 5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v9;
    operator delete(v9);
  }
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)v2 + 272, *v7);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(v3, *v6);
  long long v10 = *v5;
  if (*v5)
  {
    *((void *)v2 + 9) = v10;
    operator delete(v10);
  }
  TLatticeProcessor::~TLatticeProcessor(v2);
  _Unwind_Resume(a1);
}

void TCompounder::initFugenSEndings(TCompounder *this)
{
  v26[3] = *MEMORY[0x263EF8340];
  *((void *)this + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 14;
  uint64_t v2 = (uint64_t *)((char *)this + 328);
  std::vector<std::wstring>::resize((std::vector<std::wstring> *)((char *)this + 328), 0xEuLL);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, dword_2140AAC64);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v14, dword_2140AAC70);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v15, dword_2140AAC80);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v16, dword_2140AAC94);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v17, dword_2140AACA4);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v18, dword_2140AACB4);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v19, dword_2140AACC8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v20, dword_2140AACDC);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v21, dword_2140AACF4);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v22, dword_2140AAD10);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v23, dword_2140AAD28);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v24, dword_2140AAD38);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v25, dword_2140AAD44);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v26, dword_2140AAD54);
  if (*((void *)this + 40))
  {
    unint64_t v3 = 0;
    uint64_t v4 = *v2;
    do
    {
      std::wstring::operator=((std::wstring *)(v4 + 24 * v3), (const std::wstring *)&v13[24 * v3]);
      uint64_t v4 = *v2;
      unint64_t v5 = *v2 + 24 * v3;
      if (*(char *)(v5 + 23) < 0)
      {
        unint64_t v5 = *(void *)v5;
        uint64_t v6 = *(void *)(*v2 + 24 * v3 + 8);
      }
      else
      {
        uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      }
      char v7 = (_DWORD *)(v5 + 4 * v6 - 4);
      if (v6) {
        BOOL v8 = (unint64_t)v7 > v5;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        unint64_t v9 = v5 + 4;
        do
        {
          int v10 = *(_DWORD *)(v9 - 4);
          *(_DWORD *)(v9 - 4) = *v7;
          *v7-- = v10;
          BOOL v11 = v9 >= (unint64_t)v7;
          v9 += 4;
        }
        while (!v11);
      }
      ++v3;
    }
    while (v3 < *((void *)this + 40));
  }
  uint64_t v12 = 336;
  do
  {
    if ((char)v13[v12 - 1] < 0) {
      operator delete(*(void **)&v13[v12 - 24]);
    }
    v12 -= 24;
  }
  while (v12);
}

void sub_21401F478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t TCompounder::loadModel(uint64_t this, TInputStream *a2, const char *a3)
{
  uint64_t v266 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)a2 + 8)) {
    return this;
  }
  uint64_t v4 = (void *)this;
  if (TInputStream::verifyHeader((uint64_t)a2, "FeatureConfig", (uint64_t)&pFeatureConfigVersion, 3))
  {
    std::string::basic_string[abi:ne180100]<0>(v250, &byte_2140B33BB);
    *(void *)__s = byte_26C4DF190;
    if ((v250[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__s[8], *(const std::string::value_type **)v250, *(std::string::size_type *)&v250[8]);
    }
    else
    {
      *(_OWORD *)&__s[8] = *(_OWORD *)v250;
      v254[0] = *(void *)&v250[16];
    }
    *(void *)__s = &unk_26C4E0710;
    if (v254[0] >= 0) {
      uint64_t v219 = &__s[8];
    }
    else {
      uint64_t v219 = *(const char **)&__s[8];
    }
    conditionalAssert(v219, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2477, v200, v201);
    *(void *)__s = byte_26C4DF190;
    if (SHIBYTE(v254[0]) < 0) {
      operator delete(*(void **)&__s[8]);
    }
    if ((v250[23] & 0x80000000) != 0) {
      operator delete(*(void **)v250);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v221 = (std::string *)(exception + 1);
    if ((__s[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v221, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
    }
    else
    {
      long long v241 = *(_OWORD *)__s;
      exception[3] = *(void *)&__s[16];
      *(_OWORD *)&v221->__r_.__value_.__l.__data_ = v241;
    }
    void *exception = &unk_26C4E0710;
  }
  *(void *)__s = v254;
  *(_OWORD *)&__s[8] = xmmword_214085190;
  char v255 = 1;
  *(void *)uint64_t v250 = v251;
  *(_OWORD *)&v250[8] = xmmword_214085190;
  char v252 = 1;
  uint64_t v262 = v264;
  long long v263 = xmmword_214085190;
  char v265 = 1;
  uint64_t v258 = v260;
  long long v259 = xmmword_214085190;
  char v261 = 1;
  BOOL v249 = 0;
  MEMORY[0x216698480]((char *)a2 + 128, &unk_2140AA718);
  while (1)
  {
    this = TInputStream::getNextLine((uint64_t)a2, (uint64_t)v250);
    if ((this & 1) == 0) {
      break;
    }
    if (*(void *)&v250[16] >= *(void *)&v250[8])
    {
      if (v252)
      {
        *(_DWORD *)long long __p = 0;
        TBuffer<wchar_t>::insert((uint64_t)v250, *(unint64_t *)&v250[16], (int *)__p, 1uLL);
        unint64_t v5 = *(int **)v250;
        --*(void *)&v250[16];
      }
      else
      {
        unint64_t v5 = *(int **)v250;
        if (*(void *)&v250[8]) {
          *(_DWORD *)(*(void *)v250 + 4 * *(void *)&v250[8] - 4) = 0;
        }
      }
    }
    else
    {
      unint64_t v5 = *(int **)v250;
      *(_DWORD *)(*(void *)v250 + 4 * *(void *)&v250[16]) = 0;
    }
    NextTokeuint64_t n = getNextToken(v5, (uint64_t)__s, dword_2140AA724);
    if (NextToken)
    {
      if (*(void *)&__s[16] >= *(void *)&__s[8])
      {
        if (v255)
        {
          *(_DWORD *)long long __p = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
          char v7 = *(const __int32 **)__s;
          --*(void *)&__s[16];
        }
        else
        {
          char v7 = *(const __int32 **)__s;
          if (*(void *)&__s[8]) {
            *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
          }
        }
      }
      else
      {
        char v7 = *(const __int32 **)__s;
        *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
      }
      if (!wcscmp(v7, dword_2140AA730))
      {
        if (*((void *)a2 + 12) >= 3uLL)
        {
          if (*((char *)a2 + 39) >= 0) {
            unint64_t v127 = (char *)a2 + 16;
          }
          else {
            unint64_t v127 = (char *)*((void *)a2 + 2);
          }
          uint64_t v128 = *((void *)a2 + 8);
          unsigned int v129 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
          loggableUnicode(v129, __p);
          if (__p[23] >= 0) {
            char v134 = __p;
          }
          else {
            char v134 = *(unsigned char **)__p;
          }
          tknPrintf("Error: %s (%llu) : Feature name '%s' is not supported in version %llu.  This was renamed to 'wordsucc' in version 3.\n", v130, v131, v132, v133, v127, v128, v134, *((void *)a2 + 12));
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v248) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
          }
          else
          {
            *(_OWORD *)&__p[8] = *(_OWORD *)v247;
            uint64_t v257 = v248;
          }
          *(void *)long long __p = &unk_26C4E0710;
          if (v257 >= 0) {
            uint64_t v222 = &__p[8];
          }
          else {
            uint64_t v222 = *(const char **)&__p[8];
          }
          conditionalAssert(v222, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2501, v135, v136);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v257) < 0) {
            operator delete(*(void **)&__p[8]);
          }
          if (SHIBYTE(v248) < 0) {
            operator delete(v247[0]);
          }
          uint64_t v223 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
          *uint64_t v223 = byte_26C4DF190;
          uint64_t v224 = (std::string *)(v223 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v224, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            long long v242 = *(_OWORD *)__p;
            v223[3] = *(void *)&__p[16];
            *(_OWORD *)&v224->__r_.__value_.__l.__data_ = v242;
          }
          *uint64_t v223 = &unk_26C4E0710;
        }
LABEL_55:
        unsigned int v10 = 2;
        int v11 = 1;
        goto LABEL_56;
      }
      if (*(void *)&__s[16] >= *(void *)&__s[8])
      {
        if (v255)
        {
          *(_DWORD *)long long __p = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
          BOOL v8 = *(const __int32 **)__s;
          --*(void *)&__s[16];
        }
        else
        {
          BOOL v8 = *(const __int32 **)__s;
          if (*(void *)&__s[8]) {
            *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
          }
        }
      }
      else
      {
        BOOL v8 = *(const __int32 **)__s;
        *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
      }
      if (wcscmp(v8, dword_2140AA744))
      {
        if (*(void *)&__s[16] >= *(void *)&__s[8])
        {
          if (v255)
          {
            *(_DWORD *)long long __p = 0;
            TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
            unint64_t v9 = *(const __int32 **)__s;
            --*(void *)&__s[16];
          }
          else
          {
            unint64_t v9 = *(const __int32 **)__s;
            if (*(void *)&__s[8]) {
              *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
            }
          }
        }
        else
        {
          unint64_t v9 = *(const __int32 **)__s;
          *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
        }
        if (!wcscmp(v9, dword_2140AA75C))
        {
          if (*((void *)a2 + 12) <= 1uLL)
          {
            if (*((char *)a2 + 39) >= 0) {
              uint64_t v168 = (char *)a2 + 16;
            }
            else {
              uint64_t v168 = (char *)*((void *)a2 + 2);
            }
            uint64_t v169 = *((void *)a2 + 8);
            char v170 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
            loggableUnicode(v170, __p);
            if (__p[23] >= 0) {
              uint64_t v175 = __p;
            }
            else {
              uint64_t v175 = *(unsigned char **)__p;
            }
            tknPrintf("Error: %s (%llu) : Feature name '%s' is not supported in version %llu.  Must be version 2 or higher.\n", v171, v172, v173, v174, v168, v169, v175, *((void *)a2 + 12));
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
            *(void *)long long __p = byte_26C4DF190;
            if (SHIBYTE(v248) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v247;
              uint64_t v257 = v248;
            }
            *(void *)long long __p = &unk_26C4E0710;
            if (v257 >= 0) {
              uint64_t v235 = &__p[8];
            }
            else {
              uint64_t v235 = *(const char **)&__p[8];
            }
            conditionalAssert(v235, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2519, v176, v177);
            *(void *)long long __p = byte_26C4DF190;
            if (SHIBYTE(v257) < 0) {
              operator delete(*(void **)&__p[8]);
            }
            if (SHIBYTE(v248) < 0) {
              operator delete(v247[0]);
            }
            uint64_t v236 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
            *uint64_t v236 = byte_26C4DF190;
            int v237 = (std::string *)(v236 + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v237, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              long long v245 = *(_OWORD *)__p;
              v236[3] = *(void *)&__p[16];
              *(_OWORD *)&v237->__r_.__value_.__l.__data_ = v245;
            }
            *uint64_t v236 = &unk_26C4E0710;
          }
          int v11 = 3;
          unsigned int v10 = 1;
          goto LABEL_56;
        }
        if (*(void *)&__s[16] >= *(void *)&__s[8])
        {
          if (v255)
          {
            *(_DWORD *)long long __p = 0;
            TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
            uint64_t v12 = *(const __int32 **)__s;
            --*(void *)&__s[16];
          }
          else
          {
            uint64_t v12 = *(const __int32 **)__s;
            if (*(void *)&__s[8]) {
              *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
            }
          }
        }
        else
        {
          uint64_t v12 = *(const __int32 **)__s;
          *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
        }
        if (!wcscmp(v12, dword_2140AA77C))
        {
          if (*((void *)a2 + 12) <= 2uLL)
          {
            if (*((char *)a2 + 39) >= 0) {
              uint64_t v190 = (char *)a2 + 16;
            }
            else {
              uint64_t v190 = (char *)*((void *)a2 + 2);
            }
            uint64_t v191 = *((void *)a2 + 8);
            uint64_t v192 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
            loggableUnicode(v192, __p);
            if (__p[23] >= 0) {
              uint64_t v197 = __p;
            }
            else {
              uint64_t v197 = *(unsigned char **)__p;
            }
            tknPrintf("Error: %s (%llu) : Feature name '%s' is not supported in version %llu.  Must be version 3 or higher.\n", v193, v194, v195, v196, v190, v191, v197, *((void *)a2 + 12));
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
            *(void *)long long __p = byte_26C4DF190;
            if (SHIBYTE(v248) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v247;
              uint64_t v257 = v248;
            }
            *(void *)long long __p = &unk_26C4E0710;
            if (v257 >= 0) {
              unsigned int v238 = &__p[8];
            }
            else {
              unsigned int v238 = *(const char **)&__p[8];
            }
            conditionalAssert(v238, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2532, v198, v199);
            *(void *)long long __p = byte_26C4DF190;
            if (SHIBYTE(v257) < 0) {
              operator delete(*(void **)&__p[8]);
            }
            if (SHIBYTE(v248) < 0) {
              operator delete(v247[0]);
            }
            uint64_t v239 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
            *uint64_t v239 = byte_26C4DF190;
            uint64_t v240 = (std::string *)(v239 + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v240, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              long long v246 = *(_OWORD *)__p;
              v239[3] = *(void *)&__p[16];
              *(_OWORD *)&v240->__r_.__value_.__l.__data_ = v246;
            }
            *uint64_t v239 = &unk_26C4E0710;
          }
          int v11 = 0;
          unsigned int v10 = 2;
          goto LABEL_56;
        }
        if (*(void *)&__s[16] >= *(void *)&__s[8])
        {
          if (v255)
          {
            *(_DWORD *)long long __p = 0;
            TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
            uint64_t v13 = *(const __int32 **)__s;
            --*(void *)&__s[16];
          }
          else
          {
            uint64_t v13 = *(const __int32 **)__s;
            if (*(void *)&__s[8]) {
              *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
            }
          }
        }
        else
        {
          uint64_t v13 = *(const __int32 **)__s;
          *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
        }
        if (wcscmp(v13, dword_2140AA7A0))
        {
          uint64_t v147 = (char *)*((void *)a2 + 2);
          unint64_t v146 = (char *)a2 + 16;
          uint64_t v145 = v147;
          if (v146[23] >= 0) {
            uint64_t v148 = v146;
          }
          else {
            uint64_t v148 = v145;
          }
          uint64_t v149 = *((void *)v146 + 6);
          uint64_t v150 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
          loggableUnicode(v150, __p);
          if (__p[23] >= 0) {
            uint64_t v155 = __p;
          }
          else {
            uint64_t v155 = *(unsigned char **)__p;
          }
          tknPrintf("Error: %s (%llu) : Unsupported feature name '%s'\n", v151, v152, v153, v154, v148, v149, v155);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v248) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
          }
          else
          {
            *(_OWORD *)&__p[8] = *(_OWORD *)v247;
            uint64_t v257 = v248;
          }
          *(void *)long long __p = &unk_26C4E0710;
          if (v257 >= 0) {
            uint64_t v229 = &__p[8];
          }
          else {
            uint64_t v229 = *(const char **)&__p[8];
          }
          conditionalAssert(v229, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2555, v156, v157);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v257) < 0) {
            operator delete(*(void **)&__p[8]);
          }
          if (SHIBYTE(v248) < 0) {
            operator delete(v247[0]);
          }
          uint64_t v230 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
          *uint64_t v230 = byte_26C4DF190;
          uint64_t v231 = (std::string *)(v230 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v231, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            long long v243 = *(_OWORD *)__p;
            v230[3] = *(void *)&__p[16];
            *(_OWORD *)&v231->__r_.__value_.__l.__data_ = v243;
          }
          *uint64_t v230 = &unk_26C4E0710;
        }
        if (*((void *)a2 + 12) <= 2uLL)
        {
          if (*((char *)a2 + 39) >= 0) {
            uint64_t v158 = (char *)a2 + 16;
          }
          else {
            uint64_t v158 = (char *)*((void *)a2 + 2);
          }
          uint64_t v159 = *((void *)a2 + 8);
          uint64_t v160 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
          loggableUnicode(v160, __p);
          if (__p[23] >= 0) {
            uint64_t v165 = __p;
          }
          else {
            uint64_t v165 = *(unsigned char **)__p;
          }
          tknPrintf("Error: %s (%llu) : Feature name '%s' is not supported in version %llu.  Must be version 3 or higher.\n", v161, v162, v163, v164, v158, v159, v165, *((void *)a2 + 12));
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v248) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
          }
          else
          {
            *(_OWORD *)&__p[8] = *(_OWORD *)v247;
            uint64_t v257 = v248;
          }
          *(void *)long long __p = &unk_26C4E0710;
          if (v257 >= 0) {
            uint64_t v232 = &__p[8];
          }
          else {
            uint64_t v232 = *(const char **)&__p[8];
          }
          conditionalAssert(v232, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2545, v166, v167);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v257) < 0) {
            operator delete(*(void **)&__p[8]);
          }
          if (SHIBYTE(v248) < 0) {
            operator delete(v247[0]);
          }
          uint64_t v233 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
          *uint64_t v233 = byte_26C4DF190;
          uint64_t v234 = (std::string *)(v233 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v234, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            long long v244 = *(_OWORD *)__p;
            v233[3] = *(void *)&__p[16];
            *(_OWORD *)&v234->__r_.__value_.__l.__data_ = v244;
          }
          *uint64_t v233 = &unk_26C4E0710;
        }
        goto LABEL_55;
      }
      unsigned int v10 = 4;
      int v11 = 2;
LABEL_56:
      uint64_t v18 = getNextToken(NextToken, (uint64_t)__s, dword_2140AA724);
      if (!v18)
      {
        uint64_t v88 = (char *)*((void *)a2 + 2);
        unint64_t v87 = (char *)a2 + 16;
        uint64_t v86 = v88;
        if (v87[23] >= 0) {
          uint64_t v86 = v87;
        }
        tknPrintf("Error: %s (%llu) : Syntax error. Expected 4 columns.\n", v14, v15, v16, v17, v86, *((void *)v87 + 6));
        std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v248) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v247;
          uint64_t v257 = v248;
        }
        *(void *)long long __p = &unk_26C4E0710;
        if (v257 >= 0) {
          uint64_t v178 = &__p[8];
        }
        else {
          uint64_t v178 = *(const char **)&__p[8];
        }
        conditionalAssert(v178, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2563, v89, v90);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v257) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v248) < 0) {
          operator delete(v247[0]);
        }
        uint64_t v179 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *uint64_t v179 = byte_26C4DF190;
        uint64_t v180 = (std::string *)(v179 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v180, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v215 = *(_OWORD *)__p;
          v179[3] = *(void *)&__p[16];
          *(_OWORD *)&v180->__r_.__value_.__l.__data_ = v215;
        }
        *uint64_t v179 = &unk_26C4E0710;
      }
      if (*(void *)&__s[16] >= *(void *)&__s[8])
      {
        if (v255)
        {
          *(_DWORD *)long long __p = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
          uint64_t v19 = *(unsigned int **)__s;
          --*(void *)&__s[16];
        }
        else
        {
          uint64_t v19 = *(unsigned int **)__s;
          if (*(void *)&__s[8]) {
            *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
          }
        }
      }
      else
      {
        uint64_t v19 = *(unsigned int **)__s;
        *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
      }
      {
        operator new();
      }
      unsigned int v20 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19, &v249);
      if (v249)
      {
        uint64_t v116 = (char *)*((void *)a2 + 2);
        uint64_t v115 = (char *)a2 + 16;
        uint64_t v114 = v116;
        if (v115[23] >= 0) {
          uint64_t v117 = v115;
        }
        else {
          uint64_t v117 = v114;
        }
        uint64_t v118 = *((void *)v115 + 6);
        unsigned int v119 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
        loggableUnicode(v119, __p);
        if (__p[23] >= 0) {
          uint64_t v124 = __p;
        }
        else {
          uint64_t v124 = *(unsigned char **)__p;
        }
        tknPrintf("Error: %s (%llu) : Invalid Ngram order. Was '%s'. Expected an integer value in range [1,%llu].\n", v120, v121, v122, v123, v117, v118, v124, v10);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v248) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v247;
          uint64_t v257 = v248;
        }
        *(void *)long long __p = &unk_26C4E0710;
        if (v257 >= 0) {
          uint64_t v212 = &__p[8];
        }
        else {
          uint64_t v212 = *(const char **)&__p[8];
        }
        conditionalAssert(v212, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2572, v125, v126);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v257) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v248) < 0) {
          operator delete(v247[0]);
        }
        uint64_t v213 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *uint64_t v213 = byte_26C4DF190;
        uint64_t v214 = (std::string *)(v213 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v214, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v228 = *(_OWORD *)__p;
          v213[3] = *(void *)&__p[16];
          *(_OWORD *)&v214->__r_.__value_.__l.__data_ = v228;
        }
        *uint64_t v213 = &unk_26C4E0710;
      }
      unsigned int v25 = v20;
      if (v20 - 1 >= v10)
      {
        BOOL v111 = (char *)*((void *)a2 + 2);
        uint64_t v110 = (char *)a2 + 16;
        char v109 = v111;
        if (v110[23] >= 0) {
          char v109 = v110;
        }
        tknPrintf("Error: %s (%llu) : Bad Ngram order. Was %llu. Expected an integer value in the range [1,%llu].\n", v21, v22, v23, v24, v109, *((void *)v110 + 6), v20, v10);
        std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v248) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v247;
          uint64_t v257 = v248;
        }
        *(void *)long long __p = &unk_26C4E0710;
        if (v257 >= 0) {
          uint64_t v184 = &__p[8];
        }
        else {
          uint64_t v184 = *(const char **)&__p[8];
        }
        conditionalAssert(v184, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2580, v112, v113);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v257) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v248) < 0) {
          operator delete(v247[0]);
        }
        uint64_t v185 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *uint64_t v185 = byte_26C4DF190;
        uint64_t v186 = (std::string *)(v185 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v186, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v217 = *(_OWORD *)__p;
          v185[3] = *(void *)&__p[16];
          *(_OWORD *)&v186->__r_.__value_.__l.__data_ = v217;
        }
        *uint64_t v185 = &unk_26C4E0710;
      }
      long long v30 = getNextToken(v18, (uint64_t)__s, dword_2140AA724);
      if (!v30)
      {
        uint64_t v93 = (char *)*((void *)a2 + 2);
        uint64_t v92 = (char *)a2 + 16;
        uint64_t v91 = v93;
        if (v92[23] >= 0) {
          uint64_t v91 = v92;
        }
        tknPrintf("Error: %s (%llu) : Syntax error. Expected 4 columns.\n", v26, v27, v28, v29, v91, *((void *)v92 + 6));
        std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v248) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v247;
          uint64_t v257 = v248;
        }
        *(void *)long long __p = &unk_26C4E0710;
        if (v257 >= 0) {
          char v181 = &__p[8];
        }
        else {
          char v181 = *(const char **)&__p[8];
        }
        conditionalAssert(v181, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2588, v94, v95);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v257) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v248) < 0) {
          operator delete(v247[0]);
        }
        uint64_t v182 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *uint64_t v182 = byte_26C4DF190;
        uint64_t v183 = (std::string *)(v182 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v183, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v216 = *(_OWORD *)__p;
          v182[3] = *(void *)&__p[16];
          *(_OWORD *)&v183->__r_.__value_.__l.__data_ = v216;
        }
        *uint64_t v182 = &unk_26C4E0710;
      }
      if (*(void *)&__s[16] >= *(void *)&__s[8])
      {
        if (v255)
        {
          *(_DWORD *)long long __p = 0;
          TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
          long long v31 = *(__int32 **)__s;
          --*(void *)&__s[16];
        }
        else
        {
          long long v31 = *(__int32 **)__s;
          if (*(void *)&__s[8]) {
            *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
          }
        }
      }
      else
      {
        long long v31 = *(__int32 **)__s;
        *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
      }
      {
        operator new();
      }
      double v32 = TLocaleInfo::stringToFloat(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v31, &v249);
      if (v249)
      {
        uint64_t v98 = (char *)*((void *)a2 + 2);
        uint64_t v97 = (char *)a2 + 16;
        unint64_t v96 = v98;
        if (v97[23] >= 0) {
          uint64_t v99 = v97;
        }
        else {
          uint64_t v99 = v96;
        }
        uint64_t v100 = *((void *)v97 + 6);
        uint64_t v101 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
        loggableUnicode(v101, __p);
        if (__p[23] >= 0) {
          uint64_t v106 = __p;
        }
        else {
          uint64_t v106 = *(unsigned char **)__p;
        }
        tknPrintf("Error: %s (%llu) : Invalid weight. Was '%s'. Expected a numerical decimal value.\n", v102, v103, v104, v105, v99, v100, v106);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v248) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v247;
          uint64_t v257 = v248;
        }
        *(void *)long long __p = &unk_26C4E0710;
        if (v257 >= 0) {
          uint64_t v209 = &__p[8];
        }
        else {
          uint64_t v209 = *(const char **)&__p[8];
        }
        conditionalAssert(v209, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2597, v107, v108);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v257) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v248) < 0) {
          operator delete(v247[0]);
        }
        int v210 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *int v210 = byte_26C4DF190;
        uint64_t v211 = (std::string *)(v210 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v211, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v227 = *(_OWORD *)__p;
          v210[3] = *(void *)&__p[16];
          *(_OWORD *)&v211->__r_.__value_.__l.__data_ = v227;
        }
        *int v210 = &unk_26C4E0710;
      }
      if (v32 != 0.0)
      {
        if (!getNextToken(v30, (uint64_t)__s, dword_2140AA724))
        {
          uint64_t v139 = (char *)*((void *)a2 + 2);
          uint64_t v138 = (char *)a2 + 16;
          uint64_t v137 = v139;
          if (v138[23] >= 0) {
            uint64_t v137 = v138;
          }
          tknPrintf("Error: %s (%llu) : Syntax error. Expected 4 columns.\n", v33, v34, v35, v36, v137, *((void *)v138 + 6));
          std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v248) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
          }
          else
          {
            *(_OWORD *)&__p[8] = *(_OWORD *)v247;
            uint64_t v257 = v248;
          }
          *(void *)long long __p = &unk_26C4E0710;
          if (v257 >= 0) {
            uint64_t v205 = &__p[8];
          }
          else {
            uint64_t v205 = *(const char **)&__p[8];
          }
          conditionalAssert(v205, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2609, v140, v141);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v257) < 0) {
            operator delete(*(void **)&__p[8]);
          }
          if (SHIBYTE(v248) < 0) {
            operator delete(v247[0]);
          }
          uint64_t v206 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
          *uint64_t v206 = byte_26C4DF190;
          uint64_t v207 = (std::string *)(v206 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v207, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            long long v226 = *(_OWORD *)__p;
            v206[3] = *(void *)&__p[16];
            *(_OWORD *)&v207->__r_.__value_.__l.__data_ = v226;
          }
          *uint64_t v206 = &unk_26C4E0710;
        }
        uint64_t v37 = v4[8];
        if (v4[9] == v37) {
LABEL_114:
        }
          operator new();
        unint64_t v38 = 0;
        while (2)
        {
          uint64_t v39 = *(uint64_t **)(v37 + 8 * v38);
          int v40 = *((_DWORD *)v39 + 11);
          if (v40 == 3)
          {
            if (*(void *)&__s[16] >= *(void *)&__s[8])
            {
              if (v255)
              {
                *(_DWORD *)long long __p = 0;
                TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                unsigned int v41 = *(const __int32 **)__s;
                --*(void *)&__s[16];
              }
              else
              {
                unsigned int v41 = *(const __int32 **)__s;
                if (*(void *)&__s[8]) {
                  *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
                }
              }
            }
            else
            {
              unsigned int v41 = *(const __int32 **)__s;
              *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
            }
            size_t v43 = wcslen(v41);
            size_t v34 = v43;
            if (*((char *)v39 + 23) < 0)
            {
              if (v43 == v39[1])
              {
                if (v43 == -1) {
LABEL_170:
                }
                  std::wstring::__throw_out_of_range[abi:ne180100]();
                uint64_t v39 = (uint64_t *)*v39;
                if (!v43)
                {
LABEL_144:
                  uint64_t v56 = (char *)*((void *)a2 + 2);
                  uint64_t v55 = (char *)a2 + 16;
                  uint64_t v54 = v56;
                  if (v55[23] >= 0) {
                    char v57 = v55;
                  }
                  else {
                    char v57 = v54;
                  }
                  uint64_t v58 = *((void *)v55 + 6);
                  int v59 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
                  loggableUnicode(v59, __p);
                  if (__p[23] >= 0) {
                    unint64_t v64 = __p;
                  }
                  else {
                    unint64_t v64 = *(unsigned char **)__p;
                  }
                  tknPrintf("Error: %s (%llu) : Binding feature already defined for '%s'.\n", v60, v61, v62, v63, v57, v58, v64);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
                  *(void *)long long __p = byte_26C4DF190;
                  if (SHIBYTE(v248) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
                  }
                  else
                  {
                    *(_OWORD *)&__p[8] = *(_OWORD *)v247;
                    uint64_t v257 = v248;
                  }
                  *(void *)long long __p = &unk_26C4E0710;
                  if (v257 >= 0) {
                    uint64_t v187 = &__p[8];
                  }
                  else {
                    uint64_t v187 = *(const char **)&__p[8];
                  }
                  conditionalAssert(v187, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2624, v65, v66);
                  *(void *)long long __p = byte_26C4DF190;
                  if (SHIBYTE(v257) < 0) {
                    operator delete(*(void **)&__p[8]);
                  }
                  if (SHIBYTE(v248) < 0) {
                    operator delete(v247[0]);
                  }
                  uint64_t v188 = __cxa_allocate_exception(0x20uLL);
                  std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
                  *uint64_t v188 = byte_26C4DF190;
                  uint64_t v189 = (std::string *)(v188 + 1);
                  if ((__p[23] & 0x80000000) != 0)
                  {
                    std::string::__init_copy_ctor_external(v189, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
                  }
                  else
                  {
                    long long v218 = *(_OWORD *)__p;
                    v188[3] = *(void *)&__p[16];
                    *(_OWORD *)&v189->__r_.__value_.__l.__data_ = v218;
                  }
                  *uint64_t v188 = &unk_26C4E0710;
                }
LABEL_100:
                if (!wmemcmp((const __int32 *)v39, v41, v43)) {
                  goto LABEL_144;
                }
              }
            }
            else if (v43 == *((unsigned __int8 *)v39 + 23))
            {
              if (v43 == -1) {
                goto LABEL_170;
              }
              if (!v43) {
                goto LABEL_144;
              }
              goto LABEL_100;
            }
          }
          else if (v40 == v11)
          {
            if (*((_DWORD *)v39 + 10) == v25)
            {
              uint64_t v83 = (char *)*((void *)a2 + 2);
              uint64_t v82 = (char *)a2 + 16;
              uint64_t v81 = v83;
              if (v82[23] >= 0) {
                uint64_t v81 = v82;
              }
              tknPrintf("Error: %s (%llu) : Feature already defined for Ngram order %llu.\n", v33, v34, v35, v36, v81, *((void *)v82 + 6), v25);
              std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
              *(void *)long long __p = byte_26C4DF190;
              if (SHIBYTE(v248) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
              }
              else
              {
                *(_OWORD *)&__p[8] = *(_OWORD *)v247;
                uint64_t v257 = v248;
              }
              *(void *)long long __p = &unk_26C4E0710;
              if (v257 >= 0) {
                uint64_t v142 = &__p[8];
              }
              else {
                uint64_t v142 = *(const char **)&__p[8];
              }
              conditionalAssert(v142, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2635, v84, v85);
              *(void *)long long __p = byte_26C4DF190;
              if (SHIBYTE(v257) < 0) {
                operator delete(*(void **)&__p[8]);
              }
              if (SHIBYTE(v248) < 0) {
                operator delete(v247[0]);
              }
              uint64_t v143 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
              *uint64_t v143 = byte_26C4DF190;
              unsigned __int16 v144 = (std::string *)(v143 + 1);
              if ((__p[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v144, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
              }
              else
              {
                long long v208 = *(_OWORD *)__p;
                v143[3] = *(void *)&__p[16];
                *(_OWORD *)&v144->__r_.__value_.__l.__data_ = v208;
              }
              *uint64_t v143 = &unk_26C4E0710;
            }
            if (*(void *)&__s[16] >= *(void *)&__s[8])
            {
              if (v255)
              {
                *(_DWORD *)long long __p = 0;
                TBuffer<wchar_t>::insert((uint64_t)__s, *(unint64_t *)&__s[16], (int *)__p, 1uLL);
                uint64_t v42 = *(const __int32 **)__s;
                --*(void *)&__s[16];
              }
              else
              {
                uint64_t v42 = *(const __int32 **)__s;
                if (*(void *)&__s[8]) {
                  *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[8] - 4) = 0;
                }
              }
            }
            else
            {
              uint64_t v42 = *(const __int32 **)__s;
              *(_DWORD *)(*(void *)__s + 4 * *(void *)&__s[16]) = 0;
            }
            size_t v44 = wcslen(v42);
            size_t v34 = v44;
            if (*((char *)v39 + 23) < 0)
            {
              if (v44 != v39[1]) {
                goto LABEL_154;
              }
              if (v44 == -1) {
LABEL_171:
              }
                std::wstring::__throw_out_of_range[abi:ne180100]();
              uint64_t v45 = (const __int32 *)*v39;
              if (!v34) {
                goto LABEL_113;
              }
            }
            else
            {
              if (v44 != *((unsigned __int8 *)v39 + 23)) {
                goto LABEL_154;
              }
              uint64_t v45 = (const __int32 *)v39;
              if (v34 == -1) {
                goto LABEL_171;
              }
              if (!v34) {
                goto LABEL_113;
              }
            }
            if (wmemcmp(v45, v42, v34))
            {
LABEL_154:
              uint64_t v69 = (char *)*((void *)a2 + 2);
              uint64_t v68 = (char *)a2 + 16;
              uint64_t v67 = v69;
              if (v68[23] >= 0) {
                uint64_t v70 = v68;
              }
              else {
                uint64_t v70 = v67;
              }
              uint64_t v71 = *((void *)v68 + 6);
              int v72 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)__s);
              uint64_t v73 = __p;
              loggableUnicode(v72, __p);
              if (__p[23] < 0) {
                uint64_t v73 = *(unsigned char **)__p;
              }
              if (*((char *)v39 + 23) < 0) {
                uint64_t v39 = (uint64_t *)*v39;
              }
              loggableUnicode((unsigned int *)v39, v247);
              if (v248 >= 0) {
                uint64_t v78 = v247;
              }
              else {
                uint64_t v78 = (void **)v247[0];
              }
              tknPrintf("Error: %s (%llu) : Model %s specified for feature that is already associated with model %s.\n", v74, v75, v76, v77, v70, v71, v73, v78);
              if (SHIBYTE(v248) < 0) {
                operator delete(v247[0]);
              }
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              std::string::basic_string[abi:ne180100]<0>(v247, &byte_2140B33BB);
              *(void *)long long __p = byte_26C4DF190;
              if (SHIBYTE(v248) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v247[0], (std::string::size_type)v247[1]);
              }
              else
              {
                *(_OWORD *)&__p[8] = *(_OWORD *)v247;
                uint64_t v257 = v248;
              }
              *(void *)long long __p = &unk_26C4E0710;
              if (v257 >= 0) {
                uint64_t v202 = &__p[8];
              }
              else {
                uint64_t v202 = *(const char **)&__p[8];
              }
              conditionalAssert(v202, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2643, v79, v80);
              *(void *)long long __p = byte_26C4DF190;
              if (SHIBYTE(v257) < 0) {
                operator delete(*(void **)&__p[8]);
              }
              if (SHIBYTE(v248) < 0) {
                operator delete(v247[0]);
              }
              uint64_t v203 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
              *uint64_t v203 = byte_26C4DF190;
              uint64_t v204 = (std::string *)(v203 + 1);
              if ((__p[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v204, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
              }
              else
              {
                long long v225 = *(_OWORD *)__p;
                v203[3] = *(void *)&__p[16];
                *(_OWORD *)&v204->__r_.__value_.__l.__data_ = v225;
              }
              *uint64_t v203 = &unk_26C4E0710;
            }
          }
LABEL_113:
          ++v38;
          uint64_t v37 = v4[8];
          if (v38 >= (v4[9] - v37) >> 3) {
            goto LABEL_114;
          }
          continue;
        }
      }
    }
  }
  unint64_t v46 = (char *)v4[8];
  unint64_t v47 = (char *)v4[9];
  uint64_t v48 = v47 - v46;
  if (v47 == v46)
  {
    uint64_t v53 = 0xFFFFFFFFLL;
  }
  else
  {
    unsigned int v49 = 0;
    unint64_t v50 = v48 >> 3;
    if (v50 <= 1) {
      unint64_t v50 = 1;
    }
    do
    {
      uint64_t v51 = *(void *)v46;
      v46 += 8;
      unsigned int v52 = *(_DWORD *)(v51 + 40);
      if (v52 > v49) {
        unsigned int v49 = v52;
      }
      --v50;
    }
    while (v50);
    uint64_t v53 = v49 - 1;
  }
  v4[38] = v53;
  if (v261)
  {
    this = (uint64_t)v258;
    if (v258 != v260)
    {
      if (v258) {
        this = MEMORY[0x216698730]();
      }
    }
  }
  if (v265)
  {
    this = (uint64_t)v262;
    if (v262 != v264)
    {
      if (v262) {
        this = MEMORY[0x216698730]();
      }
    }
  }
  if (v252)
  {
    this = *(void *)v250;
    if (*(unsigned char **)v250 != v251)
    {
      if (*(void *)v250) {
        this = MEMORY[0x216698730]();
      }
    }
  }
  if (v255)
  {
    this = *(void *)__s;
    if (*(void **)__s != v254)
    {
      if (*(void *)__s) {
        return MEMORY[0x216698730]();
      }
    }
  }
  return this;
}

void sub_214021FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  MEMORY[0x216698730](v28, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xA50]))
  {
    if (STACK[0x938] != a14 && STACK[0x938] != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0xB70]))
  {
    unint64_t v31 = STACK[0xA58];
    if (STACK[0xA58] != a15)
    {
      if (v31) {
        MEMORY[0x216698730](v31, 0x1000C4077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x4B0]) && a28 != a16 && a28) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x8D0]))
  {
    unint64_t v32 = STACK[0x4B8];
    if (STACK[0x4B8] != a17)
    {
      if (v32) {
        MEMORY[0x216698730](v32, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TCompounder::loadOptionalLists(TCompounder *this, TInputStream *a2)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 8))
  {
    if (TInputStream::verifyHeader((uint64_t)a2, "WordFlag", (uint64_t)&pWordFlagVersion, 4))
    {
      std::string::basic_string[abi:ne180100]<0>(v90, &byte_2140B33BB);
      *(void *)long long __p = byte_26C4DF190;
      if (SHIBYTE(v91) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v90[0], (std::string::size_type)v90[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v90;
        v95[0] = v91;
      }
      *(void *)long long __p = &unk_26C4E0710;
      if (v95[0] >= 0) {
        uint64_t v61 = &__p[8];
      }
      else {
        uint64_t v61 = *(const char **)&__p[8];
      }
      conditionalAssert(v61, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2834, v50, v51);
      *(void *)long long __p = byte_26C4DF190;
      if (SHIBYTE(v95[0]) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (SHIBYTE(v91) < 0) {
        operator delete(v90[0]);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      void *exception = byte_26C4DF190;
      uint64_t v63 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v63, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v72 = *(_OWORD *)__p;
        exception[3] = *(void *)&__p[16];
        *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v72;
      }
      void *exception = &unk_26C4E0710;
    }
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)v90, a2);
    unint64_t v4 = *((void *)a2 + 12);
    *((void *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4;
    unint64_t v5 = v90[0];
    if (v4 > 2)
    {
      if (*((_DWORD *)v90[0] + 10))
      {
        loggableFileObject((uint64_t *)v90[0]);
        if (__p[23] >= 0) {
          uint64_t v58 = __p;
        }
        else {
          uint64_t v58 = *(unsigned char **)__p;
        }
        tknPrintf("Error: %sBad attribute declaration, expected an object\n", v54, v55, v56, v57, v58);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(v88, &byte_2140B33BB);
        *(void *)long long __p = byte_26C4DF190;
        if ((v88[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v88, *(std::string::size_type *)&v88[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v88;
          v95[0] = *(void *)&v88[16];
        }
        *(void *)long long __p = &unk_26C4E0710;
        if (v95[0] >= 0) {
          uint64_t v73 = &__p[8];
        }
        else {
          uint64_t v73 = *(const char **)&__p[8];
        }
        conditionalAssert(v73, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2866, v59, v60);
        *(void *)long long __p = byte_26C4DF190;
        if (SHIBYTE(v95[0]) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if ((v88[23] & 0x80000000) != 0) {
          operator delete(*(void **)v88);
        }
        uint64_t v74 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *uint64_t v74 = byte_26C4DF190;
        uint64_t v75 = (std::string *)(v74 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v75, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v81 = *(_OWORD *)__p;
          v74[3] = *(void *)&__p[16];
          *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v81;
        }
        *uint64_t v74 = &unk_26C4E0710;
      }
    }
    else
    {
      *(_OWORD *)&__p[8] = xmmword_214085140;
      *(void *)long long __p = dword_2140AA7C4;
      v95[0] = -1;
      v95[1] = dword_2140AA7D8;
      long long v96 = xmmword_214085140;
      uint64_t v97 = -1;
      uint64_t v98 = dword_2140AA7FC;
      long long v99 = xmmword_214085140;
      uint64_t v100 = -1;
      uint64_t v101 = dword_2140AA818;
      long long v102 = xmmword_214085140;
      uint64_t v103 = -1;
      uint64_t v104 = dword_2140AA888;
      long long v105 = xmmword_214085140;
      uint64_t v106 = -1;
      uint64_t v107 = dword_2140AA8F8;
      long long v108 = xmmword_214085140;
      uint64_t v109 = -1;
      uint64_t v110 = dword_2140AA978;
      long long v111 = xmmword_214085140;
      uint64_t v112 = 1;
      uint64_t v113 = dword_2140AA990;
      int64x2_t v114 = vdupq_n_s64(2uLL);
      uint64_t v115 = -1;
      uint64_t v116 = dword_2140AA9B8;
      uint64_t v117 = 2;
      long long v118 = xmmword_2140A9900;
      unsigned int v119 = dword_2140AA9F4;
      uint64_t v120 = 2;
      long long v121 = xmmword_2140A9900;
      if (TFileObject::verify((uint64_t)v90[0], (uint64_t)__p, 0xAuLL, 1))
      {
        std::string::basic_string[abi:ne180100]<0>(v92, &byte_2140B33BB);
        *(void *)uint64_t v88 = byte_26C4DF190;
        if (SHIBYTE(v93) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v88[8], (const std::string::value_type *)v92[0], (std::string::size_type)v92[1]);
        }
        else
        {
          *(_OWORD *)&v88[8] = *(_OWORD *)v92;
          uint64_t v89 = v93;
        }
        *(void *)uint64_t v88 = &unk_26C4E0710;
        if (v89 >= 0) {
          uint64_t v69 = &v88[8];
        }
        else {
          uint64_t v69 = *(const char **)&v88[8];
        }
        conditionalAssert(v69, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2861, v6, v7);
        *(void *)uint64_t v88 = byte_26C4DF190;
        if (SHIBYTE(v89) < 0) {
          operator delete(*(void **)&v88[8]);
        }
        if (SHIBYTE(v93) < 0) {
          operator delete(v92[0]);
        }
        uint64_t v70 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v88, &byte_2140B33BB);
        void *v70 = byte_26C4DF190;
        uint64_t v71 = (std::string *)(v70 + 1);
        if ((v88[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v71, *(const std::string::value_type **)v88, *(std::string::size_type *)&v88[8]);
        }
        else
        {
          long long v77 = *(_OWORD *)v88;
          v70[3] = *(void *)&v88[16];
          *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v77;
        }
        void *v70 = &unk_26C4E0710;
      }
    }
    BOOL v8 = (uint64_t *)*((void *)v5 + 3);
    if (v8)
    {
      char v86 = 0;
      unint64_t v9 = (uint64_t **)((char *)this + 272);
      unsigned int v10 = (char *)this + 280;
      uint64_t v83 = this;
      uint64_t v84 = (char *)this + 280;
      uint64_t v85 = (uint64_t **)((char *)this + 272);
      while (1)
      {
        int v11 = (const __int32 *)v8[1];
        if (!wcscmp(v11, dword_2140AA978)) {
          uint64_t v12 = dword_2140AA990;
        }
        else {
          uint64_t v12 = (__int32 *)v11;
        }
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v12);
        uint64_t v13 = (char *)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)v9, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (v10 != v13)
        {
          loggableFileObject(v8);
          uint64_t v18 = __p;
          if (__p[23] < 0) {
            uint64_t v18 = *(unsigned char **)__p;
          }
          tknPrintf("Error: %sRedefinition\n", v14, v15, v16, v17, v18);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          char v86 = 1;
          goto LABEL_21;
        }
        uint64_t v19 = (void *)*((void *)this + 2);
        unint64_t v20 = *((void *)this + 48);
        *(void *)long long __p = v95;
        *(_OWORD *)&__p[8] = xmmword_214085190;
        char v122 = 1;
        uint64_t v21 = v8[3];
        if (v21) {
          break;
        }
        unsigned int v10 = v84;
        unint64_t v9 = v85;
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v12);
        *(void *)uint64_t v88 = __p;
        uint64_t v45 = std::__tree<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(v85, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)v88);
        v45[7] = 0;
        v45[8] = 0;
        this = v83;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (!wcscmp(v12, dword_2140AA7C4))
        {
          *((void *)v83 + 11) = 0;
          *((void *)v83 + 12) = 0;
        }
        else if (!wcscmp(v12, dword_2140AA7D8))
        {
          *((void *)v83 + 13) = 0;
          *((void *)v83 + 14) = 0;
        }
        else if (!wcscmp(v12, dword_2140AA990))
        {
          *((void *)v83 + 15) = 0;
          *((void *)v83 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
        }
        else if (!wcscmp(v12, dword_2140AA9B8))
        {
          *((void *)v83 + 17) = 0;
          *((void *)v83 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
        }
        else if (!wcscmp(v12, dword_2140AA9F4))
        {
          *((void *)v83 + 19) = 0;
          *((void *)v83 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
        }
        else if (!wcscmp(v12, dword_2140AAA2C))
        {
          if (*((void *)v83 + 48) <= 3uLL)
          {
            tknPrintf("Error: BadMiddlePieces is not supported prior to CompounderWordFlag version 4.\n", v46, v47, v48, v49);
            std::string::basic_string[abi:ne180100]<0>(v88, &byte_2140B33BB);
            *(void *)long long __p = byte_26C4DF190;
            if ((v88[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v88, *(std::string::size_type *)&v88[8]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v88;
              v95[0] = *(void *)&v88[16];
            }
            *(void *)long long __p = &unk_26C4E0710;
            if (v95[0] >= 0) {
              uint64_t v78 = &__p[8];
            }
            else {
              uint64_t v78 = *(const char **)&__p[8];
            }
            conditionalAssert(v78, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2920, v64, v65);
            *(void *)long long __p = byte_26C4DF190;
            if (SHIBYTE(v95[0]) < 0) {
              operator delete(*(void **)&__p[8]);
            }
            if ((v88[23] & 0x80000000) != 0) {
              operator delete(*(void **)v88);
            }
            uint64_t v79 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
            *uint64_t v79 = byte_26C4DF190;
            uint64_t v80 = (std::string *)(v79 + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v80, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              long long v82 = *(_OWORD *)__p;
              v79[3] = *(void *)&__p[16];
              *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v82;
            }
            *uint64_t v79 = &unk_26C4E0710;
          }
          *((void *)v83 + 21) = 0;
          *((void *)v83 + 22) = 0;
        }
        else if (!wcscmp(v12, dword_2140AA7FC))
        {
          *((void *)v83 + 23) = 0;
          *((void *)v83 + 24) = 0;
        }
        else if (!wcscmp(v12, dword_2140AA818))
        {
          *((void *)v83 + 25) = 0;
          *((void *)v83 + 26) = 0;
        }
        else if (!wcscmp(v12, dword_2140AA888))
        {
          *((void *)v83 + 27) = 0;
          *((void *)v83 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
        }
        else if (!wcscmp(v12, dword_2140AA8F8))
        {
          *((void *)v83 + 29) = 0;
          *((void *)v83 + 3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
        }
LABEL_21:
        BOOL v8 = (uint64_t *)v8[2];
        if (!v8)
        {
          if (v86)
          {
            std::string::basic_string[abi:ne180100]<0>(v88, &byte_2140B33BB);
            *(void *)long long __p = byte_26C4DF190;
            if ((v88[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v88, *(std::string::size_type *)&v88[8]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v88;
              v95[0] = *(void *)&v88[16];
            }
            *(void *)long long __p = &unk_26C4E0710;
            if (v95[0] >= 0) {
              uint64_t v66 = &__p[8];
            }
            else {
              uint64_t v66 = *(const char **)&__p[8];
            }
            conditionalAssert(v66, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2942, v52, v53);
            *(void *)long long __p = byte_26C4DF190;
            if (SHIBYTE(v95[0]) < 0) {
              operator delete(*(void **)&__p[8]);
            }
            if ((v88[23] & 0x80000000) != 0) {
              operator delete(*(void **)v88);
            }
            uint64_t v67 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
            *uint64_t v67 = byte_26C4DF190;
            uint64_t v68 = (std::string *)(v67 + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v68, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              long long v76 = *(_OWORD *)__p;
              v67[3] = *(void *)&__p[16];
              *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v76;
            }
            *uint64_t v67 = &unk_26C4E0710;
          }
          goto LABEL_89;
        }
      }
      unint64_t v87 = v19;
      while (1)
      {
        int v22 = wcscmp(*(const __int32 **)(v21 + 8), (const __int32 *)"T");
        int v23 = v22;
        if (v20 <= 2 && !v22) {
          break;
        }
        if ((TFileObject::verify((TFileObject *)v21, 1, 0) & 1) == 0)
        {
          if (*(_DWORD *)(v21 + 40) == 2)
          {
            if (v23) {
              operator new();
            }
            operator new();
          }
          if (!TLexicon::checkName((uint64_t)v87, *(int **)(v21 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(v87, *(__int32 **)(v21 + 24)))
            {
              loggableFileObject((uint64_t *)v21);
              int v37 = v88[23];
              unint64_t v38 = *(unsigned char **)v88;
              loggableUnicode(*(unsigned int **)(v21 + 24), v92);
              size_t v43 = v88;
              if (v37 < 0) {
                size_t v43 = v38;
              }
              size_t v44 = v92;
              if (v93 < 0) {
                size_t v44 = (void **)v92[0];
              }
              tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v39, v40, v41, v42, v43, v44);
              if (SHIBYTE(v93) < 0) {
                operator delete(v92[0]);
              }
              if ((v88[23] & 0x80000000) != 0) {
                operator delete(*(void **)v88);
              }
            }
            TBuffer<wchar_t>::resize((uint64_t)__p, 0);
            TRegExp::stringToRegExp(*(void *)(v21 + 24), (uint64_t)__p, 0, 3);
            if (v23) {
              operator new();
            }
            operator new();
          }
          loggableFileObject((uint64_t *)v21);
          int v29 = v88[23];
          long long v30 = *(unsigned char **)v88;
          loggableUnicode(*(unsigned int **)(v21 + 24), v92);
          uint64_t v35 = v88;
          if (v29 < 0) {
            uint64_t v35 = v30;
          }
          uint64_t v36 = v92;
          if (v93 < 0) {
            uint64_t v36 = (void **)v92[0];
          }
          tknPrintf("Error: %s'%s' is an invalid token name.\n", v31, v32, v33, v34, v35, v36);
          if (SHIBYTE(v93) < 0) {
            operator delete(v92[0]);
          }
          goto LABEL_30;
        }
LABEL_33:
        uint64_t v21 = *(void *)(v21 + 16);
        if (!v21)
        {
          unsigned int v10 = v84;
          unint64_t v9 = v85;
          if (v122 && *(void **)__p != v95 && *(void *)__p) {
            MEMORY[0x216698730]();
          }
          char v86 = 1;
          this = v83;
          goto LABEL_21;
        }
      }
      loggableFileObject((uint64_t *)v21);
      uint64_t v28 = v88;
      if (v88[23] < 0) {
        uint64_t v28 = *(unsigned char **)v88;
      }
      tknPrintf("Error: %sTag attribute not supported in version %lld.  Must be version 3 or higher.\n", v24, v25, v26, v27, v28, v20);
LABEL_30:
      if ((v88[23] & 0x80000000) != 0) {
        operator delete(*(void **)v88);
      }
      goto LABEL_33;
    }
LABEL_89:
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v90);
  }
}

void sub_214023520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,void *a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,void *a52,int a53,__int16 a54,char a55,char a56,int a57,__int16 a58,char a59,char a60)
{
  if (v65)
  {
    if (v64 != v62 && v64 != 0) {
      MEMORY[0x216698730]();
    }
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v63);
  _Unwind_Resume(a1);
}

void TCompounder::loadRules(TCompounder *this, TInputStream *a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 8))
  {
    if (TInputStream::verifyHeader((uint64_t)a2, "Rules", (uint64_t)&pRulesVersion, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(__s, &byte_2140B33BB);
      *(void *)uint64_t v27 = byte_26C4DF190;
      if (SHIBYTE(__s[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v27[8], __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        *(_OWORD *)&v27[8] = *(_OWORD *)__s;
        v28[0] = __s[2];
      }
      *(void *)uint64_t v27 = &unk_26C4E0710;
      if (v28[0] >= 0) {
        uint64_t v15 = &v27[8];
      }
      else {
        uint64_t v15 = *(const char **)&v27[8];
      }
      conditionalAssert(v15, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2951, v10, v11);
      *(void *)uint64_t v27 = byte_26C4DF190;
      if (SHIBYTE(v28[0]) < 0) {
        operator delete(*(void **)&v27[8]);
      }
      if (SHIBYTE(__s[2]) < 0) {
        operator delete(__s[0]);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v27, &byte_2140B33BB);
      void *exception = byte_26C4DF190;
      uint64_t v17 = (std::string *)(exception + 1);
      if ((v27[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v27, *(std::string::size_type *)&v27[8]);
      }
      else
      {
        long long v21 = *(_OWORD *)v27;
        exception[3] = *(void *)&v27[16];
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v21;
      }
      void *exception = &unk_26C4E0710;
    }
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)v30, a2);
    uint64_t v3 = v30[0];
    long long v50 = xmmword_214085170;
    uint64_t v49 = &unk_2140AAA6C;
    uint64_t v51 = -1;
    if (TFileObject::verify(v30[0], (uint64_t)&v49, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(__s, &byte_2140B33BB);
      *(void *)uint64_t v27 = byte_26C4DF190;
      if (SHIBYTE(__s[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v27[8], __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        *(_OWORD *)&v27[8] = *(_OWORD *)__s;
        v28[0] = __s[2];
      }
      *(void *)uint64_t v27 = &unk_26C4E0710;
      if (v28[0] >= 0) {
        uint64_t v18 = &v27[8];
      }
      else {
        uint64_t v18 = *(const char **)&v27[8];
      }
      conditionalAssert(v18, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2964, v12, v13);
      *(void *)uint64_t v27 = byte_26C4DF190;
      if (SHIBYTE(v28[0]) < 0) {
        operator delete(*(void **)&v27[8]);
      }
      if (SHIBYTE(__s[2]) < 0) {
        operator delete(__s[0]);
      }
      uint64_t v19 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v27, &byte_2140B33BB);
      *uint64_t v19 = byte_26C4DF190;
      unint64_t v20 = (std::string *)(v19 + 1);
      if ((v27[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v27, *(std::string::size_type *)&v27[8]);
      }
      else
      {
        long long v22 = *(_OWORD *)v27;
        v19[3] = *(void *)&v27[16];
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v22;
      }
      *uint64_t v19 = &unk_26C4E0710;
    }
    *(_OWORD *)&__s[1] = xmmword_214085140;
    __s[0] = (std::string::value_type *)&unk_2140AAA80;
    __s[3] = (std::string::value_type *)-1;
    long long v32 = xmmword_214085140;
    __s[4] = (std::string::value_type *)&unk_2140AAAB0;
    uint64_t v33 = -1;
    long long v35 = xmmword_214085140;
    uint64_t v34 = &unk_2140AAAE4;
    uint64_t v36 = -1;
    long long v38 = xmmword_214085140;
    int v37 = &unk_2140AAB14;
    uint64_t v39 = -1;
    long long v41 = xmmword_214085140;
    uint64_t v40 = &unk_2140AAB48;
    uint64_t v42 = -1;
    long long v44 = xmmword_214085140;
    size_t v43 = &unk_2140AAB60;
    uint64_t v45 = -1;
    long long v47 = xmmword_214085140;
    uint64_t v46 = &unk_2140AAB74;
    uint64_t v48 = -1;
    *(void *)uint64_t v27 = v28;
    *(_OWORD *)&v27[8] = xmmword_214085190;
    char v29 = 1;
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      while ((TFileObject::verify(v4, (uint64_t)__s, 7uLL, 1) & 1) != 0)
      {
        uint64_t v4 = *(void *)(v4 + 16);
        if (!v4)
        {
          std::string::basic_string[abi:ne180100]<0>(v25, &byte_2140B33BB);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v26) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v25[0], (std::string::size_type)v25[1]);
          }
          else
          {
            *(_OWORD *)&__p[8] = *(_OWORD *)v25;
            uint64_t v24 = v26;
          }
          *(void *)long long __p = &unk_26C4E0710;
          if (v24 >= 0) {
            uint64_t v7 = &__p[8];
          }
          else {
            uint64_t v7 = *(const char **)&__p[8];
          }
          conditionalAssert(v7, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 3070, v5, v6);
          *(void *)long long __p = byte_26C4DF190;
          if (SHIBYTE(v24) < 0) {
            operator delete(*(void **)&__p[8]);
          }
          if (SHIBYTE(v26) < 0) {
            operator delete(v25[0]);
          }
          BOOL v8 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
          *BOOL v8 = byte_26C4DF190;
          unint64_t v9 = (std::string *)(v8 + 1);
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            long long v14 = *(_OWORD *)__p;
            v8[3] = *(void *)&__p[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v14;
          }
          *BOOL v8 = &unk_26C4E0710;
        }
      }
      operator new();
    }
    if (*(void **)v27 != v28 && *(void *)v27) {
      MEMORY[0x216698730]();
    }
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v30);
  }
}

void sub_2140242EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&STACK[0x490]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t TCompounder::freeMemory(TCompounder *this)
{
  uint64_t v3 = *((void *)this + 49);
  uint64_t v2 = *((void *)this + 50);
  if (v2 == v3)
  {
    uint64_t v3 = *((void *)this + 50);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        if (*(char *)(v5 + 55) < 0) {
          operator delete(*(void **)(v5 + 32));
        }
        MEMORY[0x216698730](v5, 0x1072C406F7C4BA3);
        uint64_t v3 = *((void *)this + 49);
        uint64_t v2 = *((void *)this + 50);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *((void *)this + 5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v3;
  uint64_t v6 = (char *)*((void *)this + 34);
  uint64_t v7 = (char *)this + 280;
  if (v6 != (char *)this + 280)
  {
    do
    {
      BOOL v8 = (TRegExp *)*((void *)v6 + 7);
      if (v8)
      {
        TRegExp::~TRegExp(v8);
        MEMORY[0x216698730]();
      }
      unint64_t v9 = (TRegExp *)*((void *)v6 + 8);
      if (v9)
      {
        TRegExp::~TRegExp(v9);
        MEMORY[0x216698730]();
      }
      uint64_t v10 = (char *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (char *)*((void *)v6 + 2);
          BOOL v12 = *(void *)v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v12);
      }
      uint64_t v6 = v11;
    }
    while (v11 != v7);
  }
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 272, *((char **)this + 35));
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 34) = v7;
  uint64_t v13 = (TDataSaver *)*((void *)this + 46);
  if (v13)
  {
    TDataSaver::~TDataSaver(v13);
    MEMORY[0x216698730]();
  }
  uint64_t v14 = *((void *)this + 45);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = *((void *)this + 47);
  if (result)
  {
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v16();
  }
  return result;
}

void TCompounder::~TCompounder(TCompounder *this)
{
  *(void *)this = &unk_26C4DF740;
  uint64_t v3 = *((void *)this + 8);
  uint64_t v2 = *((void *)this + 9);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x216698730](v5, 0x1072C406A9B7475);
        uint64_t v3 = *((void *)this + 8);
        uint64_t v2 = *((void *)this + 9);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = (char *)*((void *)this + 31);
  uint64_t v7 = (char *)this + 256;
  if (v6 != (char *)this + 256)
  {
    do
    {
      BOOL v8 = (TLmScore *)*((void *)v6 + 7);
      if (v8)
      {
        TLmScore::~TLmScore(v8);
        MEMORY[0x216698730]();
      }
      unint64_t v9 = (char *)*((void *)v6 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          unint64_t v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (char *)*((void *)v6 + 2);
          BOOL v11 = *(void *)v10 == (void)v6;
          uint64_t v6 = v10;
        }
        while (!v11);
      }
      uint64_t v6 = v10;
    }
    while (v10 != v7);
  }
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 248, *((char **)this + 32));
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 31) = v7;
  TCompounder::freeMemory(this);
  BOOL v12 = (void *)*((void *)this + 49);
  if (v12)
  {
    *((void *)this + 5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v12;
    operator delete(v12);
  }
  uint64_t v14 = (void **)((char *)this + 328);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v14);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 272, *((char **)this + 35));
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 248, *((char **)this + 32));
  uint64_t v13 = (void *)*((void *)this + 8);
  if (v13)
  {
    *((void *)this + 9) = v13;
    operator delete(v13);
  }
  TLatticeProcessor::~TLatticeProcessor(this);
}

{
  uint64_t vars8;

  TCompounder::~TCompounder(this);

  JUMPOUT(0x216698730);
}

uint64_t TCompounder::save(TCompounder *this, TDataManager *a2, TDataManager *a3)
{
  v30[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  TOutputModel::TOutputModel((TOutputModel *)v28, a2, a3, v7, *((const TDataManager **)this + 47));
  if (a2)
  {
    TDataManager::setIntVar(a2, "CompounderVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    TOutputStream::TOutputStream(v30, &v22, (uint64_t)"CompounderParam", *((void *)this + 2) + 240);
    TParamManager::save(*((void **)this + 45), v30, 0);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v9 = v21;
    }
    else {
      uint64_t v9 = v20;
    }
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a2 + 48))(a2, "CompounderParam", p_p, v9);
    if ((char)v21 < 0) {
      operator delete(__p);
    }
    if (v29 == 1)
    {
      uint64_t v10 = (void *)*((void *)this + 46);
      if (v10) {
        TDataSaver::save(v10, a2);
      }
    }
    long long v22 = (void *)*MEMORY[0x263F8C2C8];
    *(void **)((char *)&v22 + *((void *)v22 - DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v23 = MEMORY[0x263F8C318] + 16;
    if (v26 < 0) {
      operator delete(v25);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166986E0](v27);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "CompounderVersion");
    if (v29 >= 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
      TOutputStream::TOutputStream(v30, &v22, (uint64_t)"CompounderParam", *((void *)this + 2) + 240);
      TParamManager::save(*((void **)this + 45), v30, 1);
      std::stringbuf::str();
      if ((v21 & 0x80u) == 0) {
        BOOL v11 = &__p;
      }
      else {
        BOOL v11 = __p;
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v12 = v21;
      }
      else {
        uint64_t v12 = v20;
      }
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a3 + 48))(a3, "CompounderParam", v11, v12);
      if ((char)v21 < 0) {
        operator delete(__p);
      }
      uint64_t v13 = (void *)*((void *)this + 46);
      if (v13) {
        TDataSaver::save(v13, a3);
      }
      long long v22 = (void *)*MEMORY[0x263F8C2C8];
      *(void **)((char *)&v22 + *((void *)v22 - DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v23 = MEMORY[0x263F8C318] + 16;
      if (v26 < 0) {
        operator delete(v25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166986E0](v27);
    }
    if (!*((void *)this + 46))
    {
      uint64_t v14 = 0;
      long long v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      v30[0] = "CompounderFeatureConfig";
      v30[1] = "CompounderWordFlag";
      v30[2] = "CompounderRules";
      do
      {
        uint64_t v15 = v30[v14];
        if ((*(uint64_t (**)(void, void *, void, void))(**((void **)this + 47) + 40))(*((void *)this + 47), v15, 0, 0))
        {
          TDataManager::getStringVar(*((void *)this + 47));
          if (v24 >= 0) {
            uint64_t v16 = &v22;
          }
          else {
            uint64_t v16 = v22;
          }
          if (v24 >= 0) {
            uint64_t v17 = HIBYTE(v24);
          }
          else {
            uint64_t v17 = v23;
          }
          (*(void (**)(TDataManager *, void *, void *, uint64_t))(*(void *)a3 + 48))(a3, v15, v16, v17);
        }
        ++v14;
      }
      while (v14 != 3);
      if (SHIBYTE(v24) < 0) {
        operator delete(v22);
      }
    }
  }
  uint64_t result = *((void *)this + 47);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_214024D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t TCompounder::compoundGerman(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  unint64_t v7 = v6;
  unint64_t v9 = v8;
  uint64_t v48 = v10;
  uint64_t v49 = (TCompounder *)v5;
  uint64_t v12 = v11;
  uint64_t v66 = (__int32 *)v68;
  long long v67 = xmmword_214085190;
  char v69 = 1;
  uint64_t v13 = 16 * v8;
  TWord::getWrittenForm(*(__int32 ***)(*v11 + 16 * v8), (uint64_t)&v66);
  uint64_t v62 = v64;
  long long v63 = xmmword_214085190;
  char v65 = 1;
  uint64_t v58 = v60;
  long long v59 = xmmword_214085190;
  char v61 = 1;
  SpokenForuint64_t m = (TCompounder *)TWord::getSpokenForm(*(__int32 ***)(*v12 + v13), (uint64_t)&v58);
  char v15 = *((void *)&v59 + 1) != 0;
  if (!*((void *)&v59 + 1)) {
    SpokenForuint64_t m = (TCompounder *)TBuffer<wchar_t>::operator=((uint64_t)&v58, (uint64_t)&v66);
  }
  uint64_t v54 = (int *)v56;
  long long v55 = xmmword_214085190;
  char v57 = 1;
  long long v50 = v52;
  long long v51 = xmmword_214085190;
  char v53 = 1;
  unint64_t v16 = v9 + 1;
  if (v9 + 1 < v7)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v9;
    while (1)
    {
      unint64_t v19 = v16;
      uint64_t v20 = *(__int32 ***)(*v12 + 16 * v9);
      unsigned __int8 v21 = *(signed int ***)(*v12 + 16 * v16);
      long long v22 = *(__int32 ***)(*v48 + 16 * v9);
      if (v22)
      {
        TWord::getWrittenForm(v22, (uint64_t)&v54);
        int BindingLetter = *v54;
        if (v57) {
          BOOL v24 = v54 == (int *)v56;
        }
        else {
          BOOL v24 = 1;
        }
        if (!v24)
        {
          MEMORY[0x216698730]();
          uint64_t v54 = (int *)v56;
          *(void *)&long long v55 = 256;
        }
        *((void *)&v55 + 1) = 0;
      }
      else
      {
        int BindingLetter = TCompounder::getBindingLetter(v49, *(__int32 ***)(*v12 + 16 * v9), v21);
      }
      TWord::getWrittenForm(v21, (uint64_t)&v54);
      TWord::getSpokenForm(v21, (uint64_t)&v50);
      TWord::getWordSense(v21, (uint64_t)&v62);
      v70[0] = 32;
      TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), v70, 1uLL);
      if (*((void *)&v51 + 1)) {
        uint64_t v25 = (int **)&v50;
      }
      else {
        uint64_t v25 = &v54;
      }
      char v26 = (TCompounder *)TBuffer<wchar_t>::operator+=((uint64_t)&v58, (uint64_t)v25);
      BOOL v27 = *((void *)&v51 + 1) != 0;
      if (!BindingLetter) {
        goto LABEL_27;
      }
      if (BindingLetter != 45) {
        break;
      }
      if (*((void *)&v67 + 1) && *((void *)&v55 + 1) && v66[*((void *)&v67 + 1) - 1] != 45 && *v54 != 45)
      {
        v70[0] = 45;
        char v26 = (TCompounder *)TBuffer<wchar_t>::insert((uint64_t)&v66, *((unint64_t *)&v67 + 1), v70, 1uLL);
      }
      if (v19 > v18 + 1)
      {
        Capitalizatiouint64_t n = TCompounder::getCapitalization(v26, v20);
        uint64_t v29 = v66[v17];
        if (Capitalization) {
          __int32 v30 = TLocaleInfo::toUpper(*((void *)v49 + 2) + 240, v29);
        }
        else {
          __int32 v30 = TLocaleInfo::toLower(*((void *)v49 + 2) + 240, v29);
        }
        v66[v17] = v30;
      }
      uint64_t v17 = *((void *)&v67 + 1);
      SpokenForuint64_t m = (TCompounder *)TBuffer<wchar_t>::operator+=((uint64_t)&v66, (uint64_t)&v54);
      unint64_t v18 = v9 + 2;
LABEL_39:
      v15 |= v27;
      unint64_t v16 = v19 + 1;
      unint64_t v9 = v19;
      if (v19 + 1 == v7)
      {
        unint64_t v16 = v18 + 1;
        goto LABEL_42;
      }
    }
    v70[0] = BindingLetter;
    TBuffer<wchar_t>::insert((uint64_t)&v66, *((unint64_t *)&v67 + 1), v70, 1uLL);
LABEL_27:
    v70[0] = TLocaleInfo::toLower(*((void *)v49 + 2) + 240, *v54);
    TBuffer<wchar_t>::insert((uint64_t)&v66, *((unint64_t *)&v67 + 1), v70, 1uLL);
    if (*((void *)&v55 + 1) >= (unint64_t)v55)
    {
      if (v57)
      {
        v70[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), v70, 1uLL);
        uint64_t v31 = v54;
        --*((void *)&v55 + 1);
      }
      else
      {
        uint64_t v31 = v54;
        if ((void)v55) {
          v54[(void)v55 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v31 = v54;
      v54[*((void *)&v55 + 1)] = 0;
    }
    uint64_t v32 = 1;
    while (v31[v32++])
      ;
    SpokenForuint64_t m = (TCompounder *)TBuffer<wchar_t>::insert((uint64_t)&v66, *((unint64_t *)&v67 + 1), v31 + 1, v32 - 2);
    goto LABEL_39;
  }
  uint64_t v17 = 0;
LABEL_42:
  if (v16 < v7)
  {
    BOOL v34 = TCompounder::getCapitalization(SpokenForm, *(__int32 ***)(*v12 + 16 * v7 - 16));
    uint64_t v35 = v66[v17];
    if (v34)
    {
      uint64_t v36 = TLocaleInfo::toUpper(*((void *)v49 + 2) + 240, v35);
      v66[v17] = v36;
      if (!v17) {
        goto LABEL_48;
      }
      __int32 v37 = TLocaleInfo::toUpper(*((void *)v49 + 2) + 240, v36);
    }
    else
    {
      __int32 v37 = TLocaleInfo::toLower(*((void *)v49 + 2) + 240, v35);
    }
    v66[v17] = v37;
  }
LABEL_48:
  if (*((void *)&v67 + 1))
  {
    unint64_t v38 = 0;
    while (1)
    {
      int v39 = v66[v38];
      {
        operator new();
      }
      if (v39 <= 8202)
      {
        if (v39 != 32 && v39 != 160) {
          goto LABEL_61;
        }
      }
      else
      {
        BOOL v40 = v39 == 8203 || v39 == 65279;
        if (!v40 && v39 != 12288) {
          goto LABEL_61;
        }
      }
      v66[v38] = 45;
LABEL_61:
      ++v38;
      unint64_t v41 = *((void *)&v67 + 1);
      if (v38 >= *((void *)&v67 + 1)) {
        goto LABEL_66;
      }
    }
  }
  unint64_t v41 = 0;
LABEL_66:
  if (v15 & 1 | (*((void *)&v63 + 1) != 0))
  {
    v70[0] = 92;
    TBuffer<wchar_t>::insert((uint64_t)&v66, v41, v70, 1uLL);
    TBuffer<wchar_t>::operator+=((uint64_t)&v66, (uint64_t)&v62);
    unint64_t v41 = *((void *)&v67 + 1);
    if (v15)
    {
      v70[0] = 92;
      TBuffer<wchar_t>::insert((uint64_t)&v66, *((unint64_t *)&v67 + 1), v70, 1uLL);
      TBuffer<wchar_t>::operator+=((uint64_t)&v66, (uint64_t)&v58);
      unint64_t v41 = *((void *)&v67 + 1);
    }
  }
  uint64_t v42 = (void *)*((void *)v49 + 2);
  if (v41 >= (unint64_t)v67)
  {
    if (v69)
    {
      v70[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v66, v41, v70, 1uLL);
      size_t v43 = v66;
      --*((void *)&v67 + 1);
    }
    else
    {
      size_t v43 = v66;
      if ((void)v67) {
        v66[(void)v67 - 1] = 0;
      }
    }
  }
  else
  {
    size_t v43 = v66;
    v66[v41] = 0;
  }
  uint64_t Word = TLexicon::findWord(v42, v43);
  if (!Word)
  {
    uint64_t v45 = *((void *)v49 + 2);
    if (*((void *)&v67 + 1) >= (unint64_t)v67)
    {
      if (v69)
      {
        v70[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v66, *((unint64_t *)&v67 + 1), v70, 1uLL);
        uint64_t v46 = v66;
        --*((void *)&v67 + 1);
      }
      else
      {
        uint64_t v46 = v66;
        if ((void)v67) {
          v66[(void)v67 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v46 = v66;
      v66[*((void *)&v67 + 1)] = 0;
    }
    uint64_t Word = TLexicon::addTempWord(v45, v46, 0, 0, 0);
  }
  if (v53 && v50 != v52 && v50) {
    MEMORY[0x216698730]();
  }
  if (v57 && v54 != (int *)v56 && v54) {
    MEMORY[0x216698730]();
  }
  if (v61 && v58 != v60 && v58) {
    MEMORY[0x216698730]();
  }
  if (v65 && v62 != v64 && v62) {
    MEMORY[0x216698730]();
  }
  if (v69 && v66 != (__int32 *)v68 && v66) {
    MEMORY[0x216698730]();
  }
  return Word;
}

void sub_2140255A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  MEMORY[0x216698730](v19, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x468]) && a19 != a9 && a19) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x888]))
  {
    unint64_t v21 = STACK[0x470];
    if (STACK[0x470] != a16)
    {
      if (v21) {
        MEMORY[0x216698730](v21, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xCA8]))
  {
    unint64_t v22 = STACK[0x890];
    if (STACK[0x890] != a10)
    {
      if (v22) {
        MEMORY[0x216698730](v22, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x10C8]))
  {
    unint64_t v23 = STACK[0xCB0];
    if (STACK[0xCB0] != a11)
    {
      if (v23) {
        MEMORY[0x216698730](v23, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x14E8]))
  {
    if (STACK[0x10D0] != a12 && STACK[0x10D0] != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCompounder::getBindingLetter(TCompounder *this, __int32 **a2, signed int **a3)
{
  unint64_t v6 = *a2;
  signed int v7 = **a2;
  {
    operator new();
  }
  if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7)) {
    return 45;
  }
  unint64_t v8 = v6 + 1;
  while (1)
  {
    int v10 = *v8++;
    int v9 = v10;
    if (!v10) {
      break;
    }
    {
      operator new();
    }
    if ((TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9) & 1) == 0) {
      return 45;
    }
  }
  BOOL v11 = *a3;
  signed int v12 = **a3;
  {
    operator new();
  }
  if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v12)) {
    return 45;
  }
  uint64_t v13 = v11 + 1;
  while (1)
  {
    int v15 = *v13++;
    int v14 = v15;
    if (!v15) {
      break;
    }
    {
      operator new();
    }
    if ((TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v14) & 1) == 0) {
      return 45;
    }
  }
  uint64_t v31 = v33;
  long long v32 = xmmword_214085190;
  char v34 = 1;
  TWord::getCategoryTag((uint64_t)a3, &v31);
  if (*((_DWORD *)v31 + 1) != 80)
  {
    BOOL v27 = v29;
    long long v28 = xmmword_214085190;
    char v30 = 1;
    TWord::getCategoryTag((uint64_t)a2, &v27);
    if (*(_DWORD *)v27 == 86 && *((_DWORD *)v27 + 2) == 86 && *(_DWORD *)v31 == 83)
    {
      uint64_t v16 = 115;
LABEL_46:
      if (v30 && v27 != v29 && v27) {
        MEMORY[0x216698730]();
      }
      goto LABEL_50;
    }
    unint64_t v23 = (unsigned int *)v25;
    long long v24 = xmmword_214085190;
    char v26 = 1;
    unint64_t v18 = (void *)*((void *)this + 23);
    if (v18)
    {
      TWord::getTokenName(a2, (uint64_t)&v23);
      unint64_t v18 = (void *)*((void *)this + 23);
      uint64_t v19 = *((void *)&v24 + 1);
      if (*((void *)&v24 + 1) >= (unint64_t)v24)
      {
        if (v26)
        {
          int v35 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v23, *((unint64_t *)&v24 + 1), &v35, 1uLL);
          uint64_t v20 = v23;
          --*((void *)&v24 + 1);
        }
        else
        {
          uint64_t v20 = v23;
          if ((void)v24) {
            v23[(void)v24 - 1] = 0;
          }
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v23;
    v23[v19] = 0;
LABEL_33:
    if (v18 && v20 && TRegExp::match(v18, v20, 0))
    {
      uint64_t v16 = 45;
    }
    else if (!wcscmp(*a3, dword_2140AAB94))
    {
      uint64_t v16 = 0;
    }
    else
    {
      unint64_t v21 = *a2;
      unint64_t v22 = (_DWORD *)TBuffer<wchar_t>::c_str((uint64_t)&v27);
      if (TCompounder::takesFugenS((uint64_t)this, v21, v22)) {
        uint64_t v16 = 115;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    if (v26 && v23 != (unsigned int *)v25 && v23) {
      MEMORY[0x216698730]();
    }
    goto LABEL_46;
  }
  uint64_t v16 = 0;
LABEL_50:
  if (v34 && v31 != v33 && v31) {
    MEMORY[0x216698730]();
  }
  return v16;
}

void sub_214025B20(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

BOOL TCompounder::getCapitalization(TCompounder *this, __int32 **a2)
{
  signed int v7 = v9;
  long long v8 = xmmword_214085190;
  char v10 = 1;
  TWord::getWrittenForm(a2, (uint64_t)&v7);
  int v3 = *(_DWORD *)v7;
  {
    operator new();
  }
  if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v3))
  {
    BOOL v4 = 1;
  }
  else
  {
    TWord::getCategoryTag((uint64_t)a2, &v7);
    BOOL v4 = *(_DWORD *)v7 == 83 || *(_DWORD *)v7 == 78;
  }
  if (v10 && v7 != v9 && v7) {
    MEMORY[0x216698730]();
  }
  return v4;
}

void sub_214025D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x216698730](v9, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x418]))
  {
    if (a9 != v10 && a9 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCompounder::compoundNordic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  long long v50 = v10;
  long long v51 = v9;
  BOOL v11 = (void *)v5;
  long long v81 = (__int32 *)v83;
  long long v82 = xmmword_214085190;
  char v84 = 1;
  long long v77 = v79;
  long long v78 = xmmword_214085190;
  char v80 = 1;
  uint64_t v73 = v75;
  long long v74 = xmmword_214085190;
  char v76 = 1;
  char v69 = v71;
  long long v70 = xmmword_214085190;
  char v72 = 1;
  char v65 = (unsigned int *)v67;
  long long v66 = xmmword_214085190;
  char v68 = 1;
  char v61 = v63;
  long long v62 = xmmword_214085190;
  char v64 = 1;
  unint64_t v56 = v7;
  char v57 = v59;
  long long v58 = xmmword_214085190;
  if (v8 == 1) {
    signed int v12 = (__int32 *)&TCompounder::compoundNordic(std::vector<std::pair<TWord const*,unsigned int>> const&,std::vector<std::pair<TWord const*,unsigned long>> const&,unsigned long,unsigned long,TCompounder::TLanguage)::pszVowelsDutch;
  }
  else {
    signed int v12 = (__int32 *)&TCompounder::compoundNordic(std::vector<std::pair<TWord const*,unsigned int>> const&,std::vector<std::pair<TWord const*,unsigned long>> const&,unsigned long,unsigned long,TCompounder::TLanguage)::pszVowels;
  }
  char v60 = 1;
  if (v6 >= v7)
  {
    char v16 = 0;
    goto LABEL_80;
  }
  int v13 = v8;
  unint64_t v14 = v6;
  BOOL v15 = 0;
  BOOL v49 = 0;
  char v16 = 0;
  unint64_t v17 = v6;
  unint64_t v55 = v6;
  do
  {
    BOOL v53 = v15;
    unint64_t v18 = *(__int32 ***)(*v51 + 16 * v17);
    TWord::getWrittenForm(v18, (uint64_t)&v77);
    TWord::getSpokenForm(v18, (uint64_t)&v73);
    TWord::getWordSense(v18, (uint64_t)&v69);
    TWord::getTokenName(v18, (uint64_t)&v65);
    if (v17 > v14)
    {
      v85[0] = 32;
      TBuffer<wchar_t>::insert((uint64_t)&v61, *((unint64_t *)&v62 + 1), v85, 1uLL);
    }
    if (*((void *)&v74 + 1)) {
      uint64_t v19 = &v73;
    }
    else {
      uint64_t v19 = &v77;
    }
    TBuffer<wchar_t>::operator+=((uint64_t)&v61, (uint64_t)v19);
    BOOL v20 = *((void *)&v74 + 1) != 0;
    if (!*((void *)&v82 + 1)) {
      goto LABEL_18;
    }
    if (v13 == 1)
    {
      uint64_t v21 = *(unsigned int *)v77;
    }
    else
    {
      if (v13 != 4) {
        goto LABEL_18;
      }
      uint64_t v21 = v81[*((void *)&v82 + 1) - 1];
      if (v21 != *(_DWORD *)v77) {
        goto LABEL_18;
      }
    }
    __int32 v22 = TLocaleInfo::removeDiacritics(v11[2] + 240, v21);
    if (wcschr(v12, v22))
    {
      __int32 v23 = TLocaleInfo::removeDiacritics(v11[2] + 240, v81[*((void *)&v82 + 1) - 1]);
      BOOL v52 = wcschr(v12, v23) != 0;
      goto LABEL_19;
    }
LABEL_18:
    BOOL v52 = 0;
LABEL_19:
    BOOL v54 = v20;
    int v24 = DWORD2(v78);
    if (*((void *)&v78 + 1))
    {
      uint64_t v25 = 0;
      char v26 = 0;
      while (1)
      {
        int v27 = *(_DWORD *)&v77[4 * v25];
        {
          operator new();
        }
        int v28 = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v27) ^ 1;
        if (v13 == 4) {
          LOBYTE(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
        }
        if (v28) {
          break;
        }
        __int32 v29 = TLocaleInfo::removeDiacritics(v11[2] + 240, *(unsigned int *)&v77[4 * v25]);
        v26 |= wcschr(v12, v29) != 0;
        if ((unint64_t)++v25 >= *((void *)&v78 + 1))
        {
          int v24 = 0;
          goto LABEL_31;
        }
      }
      int v24 = 1;
    }
    else
    {
      char v26 = 0;
    }
LABEL_31:
    int v30 = v24 | ((v26 & 1) == 0);
    unint64_t v31 = v17 + 1;
    if (v17 + 1 == v56)
    {
      long long v32 = (void *)v11[27];
      if (*((void *)&v66 + 1) >= (unint64_t)v66)
      {
        if (v68)
        {
          v85[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), v85, 1uLL);
          uint64_t v33 = v65;
          --*((void *)&v66 + 1);
        }
        else
        {
          uint64_t v33 = v65;
          if ((void)v66) {
            v65[(void)v66 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v33 = v65;
        v65[*((void *)&v66 + 1)] = 0;
      }
      BOOL v34 = v32 && v33 && TRegExp::match(v32, v33, 0);
      int v35 = (void *)v11[29];
      if (*((void *)&v66 + 1) >= (unint64_t)v66)
      {
        if (v68)
        {
          v85[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), v85, 1uLL);
          uint64_t v36 = v65;
          --*((void *)&v66 + 1);
        }
        else
        {
          uint64_t v36 = v65;
          if ((void)v66) {
            v65[(void)v66 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v36 = v65;
        v65[*((void *)&v66 + 1)] = 0;
      }
      v30 |= v34;
      BOOL v49 = v35 && v36 && TRegExp::match(v35, v36, 0);
      unint64_t v14 = v55;
    }
    BOOL v15 = v30 != 0;
    if (v17 != v14)
    {
      __int32 v37 = *(__int32 ***)(*v50 + 16 * v17 - 16);
      if (v37)
      {
        TWord::getWrittenForm(v37, (uint64_t)&v57);
        v85[0] = *(_DWORD *)v57;
        TBuffer<wchar_t>::insert((uint64_t)&v81, *((unint64_t *)&v82 + 1), v85, 1uLL);
      }
      else if (v30 != 0 || v53 || v52)
      {
        v85[0] = 45;
        TBuffer<wchar_t>::insert((uint64_t)&v81, *((unint64_t *)&v82 + 1), v85, 1uLL);
      }
    }
    TBuffer<wchar_t>::operator+=((uint64_t)&v81, (uint64_t)&v77);
    unint64_t v14 = v55;
    if (v17 == v55)
    {
      unint64_t v38 = (void *)v11[25];
      if (*((void *)&v66 + 1) >= (unint64_t)v66)
      {
        if (v68)
        {
          v85[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), v85, 1uLL);
          int v39 = v65;
          --*((void *)&v66 + 1);
        }
        else
        {
          int v39 = v65;
          if ((void)v66) {
            v65[(void)v66 - 1] = 0;
          }
        }
      }
      else
      {
        int v39 = v65;
        v65[*((void *)&v66 + 1)] = 0;
      }
      BOOL v40 = v38 && v39 && TRegExp::match(v38, v39, 0);
      if (v30) {
        BOOL v15 = 1;
      }
      else {
        BOOL v15 = v40;
      }
      unint64_t v14 = v55;
    }
    v16 |= v54;
    ++v17;
  }
  while (v31 != v56);
  if (v49)
  {
    __int32 v41 = TLocaleInfo::toUpper(v11[2] + 240, *v81);
    *long long v81 = v41;
  }
LABEL_80:
  unint64_t v42 = *((void *)&v82 + 1);
  if ((v16 & 1) != 0 || *((void *)&v70 + 1))
  {
    v85[0] = 92;
    TBuffer<wchar_t>::insert((uint64_t)&v81, *((unint64_t *)&v82 + 1), v85, 1uLL);
    TBuffer<wchar_t>::operator+=((uint64_t)&v81, (uint64_t)&v69);
    unint64_t v42 = *((void *)&v82 + 1);
    if (v16)
    {
      v85[0] = 92;
      TBuffer<wchar_t>::insert((uint64_t)&v81, *((unint64_t *)&v82 + 1), v85, 1uLL);
      TBuffer<wchar_t>::operator+=((uint64_t)&v81, (uint64_t)&v61);
      unint64_t v42 = *((void *)&v82 + 1);
    }
  }
  size_t v43 = (void *)v11[2];
  if (v42 >= (unint64_t)v82)
  {
    if (v84)
    {
      v85[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v81, v42, v85, 1uLL);
      long long v44 = v81;
      --*((void *)&v82 + 1);
    }
    else
    {
      long long v44 = v81;
      if ((void)v82) {
        v81[(void)v82 - 1] = 0;
      }
    }
  }
  else
  {
    long long v44 = v81;
    v81[v42] = 0;
  }
  uint64_t Word = TLexicon::findWord(v43, v44);
  if (!Word)
  {
    uint64_t v46 = v11[2];
    if (*((void *)&v82 + 1) >= (unint64_t)v82)
    {
      if (v84)
      {
        v85[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v81, *((unint64_t *)&v82 + 1), v85, 1uLL);
        long long v47 = v81;
        --*((void *)&v82 + 1);
      }
      else
      {
        long long v47 = v81;
        if ((void)v82) {
          v81[(void)v82 - 1] = 0;
        }
      }
    }
    else
    {
      long long v47 = v81;
      v81[*((void *)&v82 + 1)] = 0;
    }
    uint64_t Word = TLexicon::addTempWord(v46, v47, 0, 0, 0);
  }
  if (v60 && v57 != v59 && v57) {
    MEMORY[0x216698730]();
  }
  if (v64 && v61 != v63 && v61) {
    MEMORY[0x216698730]();
  }
  if (v68 && v65 != (unsigned int *)v67 && v65) {
    MEMORY[0x216698730]();
  }
  if (v72 && v69 != v71 && v69) {
    MEMORY[0x216698730]();
  }
  if (v76 && v73 != v75 && v73) {
    MEMORY[0x216698730]();
  }
  if (v80 && v77 != v79 && v77) {
    MEMORY[0x216698730]();
  }
  if (v84 && v81 != (__int32 *)v83 && v81) {
    MEMORY[0x216698730]();
  }
  return Word;
}

void sub_2140266BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  MEMORY[0x216698730](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x498]))
  {
    if (a25 != a11 && a25 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0x8B8]))
  {
    unint64_t v27 = STACK[0x4A0];
    if (STACK[0x4A0] != a12)
    {
      if (v27) {
        MEMORY[0x216698730](v27, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xCD8]))
  {
    unint64_t v28 = STACK[0x8C0];
    if (STACK[0x8C0] != a13)
    {
      if (v28) {
        MEMORY[0x216698730](v28, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x10F8]))
  {
    unint64_t v29 = STACK[0xCE0];
    if (STACK[0xCE0] != a14)
    {
      if (v29) {
        MEMORY[0x216698730](v29, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x1518]))
  {
    unint64_t v30 = STACK[0x1100];
    if (STACK[0x1100] != a15)
    {
      if (v30) {
        MEMORY[0x216698730](v30, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x1938]))
  {
    unint64_t v31 = STACK[0x1520];
    if (STACK[0x1520] != a16)
    {
      if (v31) {
        MEMORY[0x216698730](v31, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x1D58]))
  {
    unint64_t v32 = STACK[0x1940];
    if (STACK[0x1940] != a17)
    {
      if (v32) {
        MEMORY[0x216698730](v32, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCompounder::compoundWithRules(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  int v82 = v6;
  unint64_t v8 = v7;
  long long v81 = v9;
  BOOL v11 = v10;
  signed int v12 = (void *)v5;
  uint64_t v115 = (int *)v117;
  long long v116 = xmmword_214085190;
  char v118 = 1;
  unint64_t v78 = v13;
  uint64_t v14 = 16 * v13;
  TWord::getWrittenForm(*(__int32 ***)(*v10 + 16 * v13), (uint64_t)&v115);
  long long v111 = v113;
  long long v112 = xmmword_214085190;
  char v114 = 1;
  uint64_t v107 = v109;
  long long v108 = xmmword_214085190;
  char v110 = 1;
  TWord::getSpokenForm(*(__int32 ***)(*v11 + v14), (uint64_t)&v107);
  BOOL v15 = v11;
  char v16 = *((void *)&v108 + 1) != 0;
  if (!*((void *)&v108 + 1)) {
    TBuffer<wchar_t>::operator=((uint64_t)&v107, (uint64_t)&v115);
  }
  uint64_t v103 = (int *)v105;
  long long v104 = xmmword_214085190;
  char v106 = 1;
  long long v99 = (unsigned int *)v101;
  long long v100 = xmmword_214085190;
  char v102 = 1;
  uint64_t v95 = (unsigned int *)v97;
  long long v96 = xmmword_214085190;
  char v98 = 1;
  uint64_t v91 = v93;
  long long v92 = xmmword_214085190;
  char v94 = 1;
  unint64_t v87 = (unsigned int *)v89;
  long long v88 = xmmword_214085190;
  char v90 = 1;
  uint64_t v83 = (unsigned int *)v85;
  long long v84 = xmmword_214085190;
  char v86 = 1;
  if (*((void *)&v116 + 1) >= (unint64_t)v116)
  {
    if (v118)
    {
      v119[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v115, *((unint64_t *)&v116 + 1), v119, 1uLL);
      unint64_t v17 = v115;
      --*((void *)&v116 + 1);
    }
    else
    {
      unint64_t v17 = v115;
      if ((void)v116) {
        v115[(void)v116 - 1] = 0;
      }
    }
  }
  else
  {
    unint64_t v17 = v115;
    v115[*((void *)&v116 + 1)] = 0;
  }
  TBuffer<wchar_t>::assign((uint64_t)&v99, v17);
  TWord::getCategoryTag(*(void *)(*v15 + v14), &v87);
  unint64_t v19 = v78 + 1;
  if (v78 + 1 >= v8)
  {
    uint64_t v20 = 0;
    BOOL v77 = 0;
    goto LABEL_126;
  }
  unint64_t v79 = v8;
  char v80 = v15;
  BOOL v77 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = v8 - 1;
  unint64_t v22 = v78 + 1;
  do
  {
    uint64_t v23 = 16 * (v22 - 1);
    int v24 = *(__int32 ***)(*v80 + v23);
    uint64_t v25 = *(__int32 ***)(*v80 + 16 * v22);
    TWord::getWrittenForm(v25, (uint64_t)&v95);
    TWord::getSpokenForm(v25, (uint64_t)&v91);
    TWord::getCategoryTag((uint64_t)v25, &v83);
    TWord::getWordSense(v25, (uint64_t)&v111);
    v119[0] = 32;
    TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), v119, 1uLL);
    if (*((void *)&v92 + 1)) {
      char v26 = (unsigned int **)&v91;
    }
    else {
      char v26 = &v95;
    }
    TBuffer<wchar_t>::operator+=((uint64_t)&v107, (uint64_t)v26);
    BOOL v27 = *((void *)&v92 + 1) != 0;
    unint64_t v28 = *(__int32 ***)(*(void *)v81 + v23);
    if (v28)
    {
      TWord::getWrittenForm(v28, (uint64_t)&v103);
      if (*((void *)&v104 + 1) >= (unint64_t)v104)
      {
        if (v106)
        {
          v119[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v103, *((unint64_t *)&v104 + 1), v119, 1uLL);
          unint64_t v29 = v103;
          --*((void *)&v104 + 1);
        }
        else
        {
          unint64_t v29 = v103;
          if ((void)v104) {
            v103[(void)v104 - 1] = 0;
          }
        }
      }
      else
      {
        unint64_t v29 = v103;
        v103[*((void *)&v104 + 1)] = 0;
      }
      goto LABEL_67;
    }
    uint64_t v30 = v12[49];
    if (v12[50] == v30)
    {
LABEL_60:
      unint64_t v29 = (int *)&unk_2140A9A28;
      goto LABEL_67;
    }
    uint64_t v31 = 0;
    while (1)
    {
      uint64_t v32 = *(void *)(v30 + 8 * v31);
      uint64_t v33 = *(void *)(v32 + 56);
      if (v22 == v19)
      {
        if ((v33 & 0x10) != 0) {
          goto LABEL_59;
        }
      }
      else if (v33)
      {
        goto LABEL_59;
      }
      if (v22 != v21) {
        break;
      }
      if ((v33 & 0x20) == 0) {
        goto LABEL_27;
      }
LABEL_59:
      if (++v31 >= (unint64_t)((v12[50] - v30) >> 3)) {
        goto LABEL_60;
      }
    }
    if ((v33 & 2) != 0) {
      goto LABEL_59;
    }
LABEL_27:
    BOOL v34 = *(void **)v32;
    if (*(void *)v32)
    {
      if (*((void *)&v100 + 1) >= (unint64_t)v100)
      {
        if (v102)
        {
          v119[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v99, *((unint64_t *)&v100 + 1), v119, 1uLL);
          int v35 = v99;
          --*((void *)&v100 + 1);
        }
        else
        {
          int v35 = v99;
          if ((void)v100) {
            v99[(void)v100 - 1] = 0;
          }
        }
      }
      else
      {
        int v35 = v99;
        v99[*((void *)&v100 + 1)] = 0;
      }
      BOOL v36 = TRegExp::match(v34, v35, 0);
      uint64_t v30 = v12[49];
      uint64_t v32 = *(void *)(v30 + 8 * v31);
      if ((v36 ^ ((*(unsigned char *)(v32 + 56) & 4) == 0))) {
        goto LABEL_59;
      }
    }
    __int32 v37 = *(void **)(v32 + 8);
    if (v37)
    {
      if (*((void *)&v88 + 1) >= (unint64_t)v88)
      {
        if (v90)
        {
          v119[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v87, *((unint64_t *)&v88 + 1), v119, 1uLL);
          unint64_t v38 = v87;
          --*((void *)&v88 + 1);
        }
        else
        {
          unint64_t v38 = v87;
          if ((void)v88) {
            v87[(void)v88 - 1] = 0;
          }
        }
      }
      else
      {
        unint64_t v38 = v87;
        v87[*((void *)&v88 + 1)] = 0;
      }
      BOOL v39 = TRegExp::match(v37, v38, 0);
      uint64_t v30 = v12[49];
      uint64_t v32 = *(void *)(v30 + 8 * v31);
      if ((v39 ^ ((*(unsigned char *)(v32 + 56) & 4) == 0))) {
        goto LABEL_59;
      }
    }
    BOOL v40 = *(void **)(v32 + 16);
    if (v40)
    {
      if (*((void *)&v96 + 1) >= (unint64_t)v96)
      {
        if (v98)
        {
          v119[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v119, 1uLL);
          __int32 v41 = v95;
          --*((void *)&v96 + 1);
        }
        else
        {
          __int32 v41 = v95;
          if ((void)v96) {
            v95[(void)v96 - 1] = 0;
          }
        }
      }
      else
      {
        __int32 v41 = v95;
        v95[*((void *)&v96 + 1)] = 0;
      }
      BOOL v42 = TRegExp::match(v40, v41, 0);
      uint64_t v30 = v12[49];
      uint64_t v32 = *(void *)(v30 + 8 * v31);
      if ((v42 ^ ((*(unsigned char *)(v32 + 56) & 8) == 0))) {
        goto LABEL_59;
      }
    }
    size_t v43 = *(void **)(v32 + 24);
    if (v43)
    {
      if (*((void *)&v84 + 1) >= (unint64_t)v84)
      {
        if (v86)
        {
          v119[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v119, 1uLL);
          long long v44 = v83;
          --*((void *)&v84 + 1);
        }
        else
        {
          long long v44 = v83;
          if ((void)v84) {
            v83[(void)v84 - 1] = 0;
          }
        }
      }
      else
      {
        long long v44 = v83;
        v83[*((void *)&v84 + 1)] = 0;
      }
      BOOL v45 = TRegExp::match(v43, v44, 0);
      uint64_t v30 = v12[49];
      uint64_t v32 = *(void *)(v30 + 8 * v31);
      if ((v45 ^ ((*(unsigned char *)(v32 + 56) & 8) == 0))) {
        goto LABEL_59;
      }
    }
    unint64_t v29 = (int *)(v32 + 32);
    if (*(char *)(v32 + 55) < 0) {
      unint64_t v29 = *(int **)v29;
    }
LABEL_67:
    uint64_t v46 = 0;
    v16 |= v27;
    while (v29[v46++])
      ;
    uint64_t v48 = (TCompounder *)TBuffer<wchar_t>::insert((uint64_t)&v115, *((unint64_t *)&v116 + 1), v29, v46 - 1);
    if (v82)
    {
      if (v115[*((void *)&v116 + 1) - 1] == 45 || (uint64_t v49 = *v95, *((void *)&v96 + 1)) && v49 == 45)
      {
        if (v22 > v78 + 1)
        {
          Capitalizatiouint64_t n = TCompounder::getCapitalization(v48, v24);
          uint64_t v51 = v115[v20];
          if (Capitalization) {
            int v52 = TLocaleInfo::toUpper(v12[2] + 240, v51);
          }
          else {
            int v52 = TLocaleInfo::toLower(v12[2] + 240, v51);
          }
          v115[v20] = v52;
        }
        uint64_t v20 = *((void *)&v116 + 1);
        uint64_t v18 = TBuffer<wchar_t>::operator+=((uint64_t)&v115, (uint64_t)&v95);
        unint64_t v78 = v22 + 1;
      }
      else
      {
        v119[0] = TLocaleInfo::toLower(v12[2] + 240, v49);
        TBuffer<wchar_t>::insert((uint64_t)&v115, *((unint64_t *)&v116 + 1), v119, 1uLL);
        if (*((void *)&v96 + 1) >= (unint64_t)v96)
        {
          if (v98)
          {
            v119[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v119, 1uLL);
            BOOL v53 = v95;
            --*((void *)&v96 + 1);
          }
          else
          {
            BOOL v53 = v95;
            if ((void)v96) {
              v95[(void)v96 - 1] = 0;
            }
          }
        }
        else
        {
          BOOL v53 = v95;
          v95[*((void *)&v96 + 1)] = 0;
        }
        uint64_t v54 = 1;
        while (v53[v54++])
          ;
        uint64_t v18 = TBuffer<wchar_t>::insert((uint64_t)&v115, *((unint64_t *)&v116 + 1), (int *)v53 + 1, v54 - 2);
      }
    }
    else
    {
      uint64_t v18 = TBuffer<wchar_t>::operator+=((uint64_t)&v115, (uint64_t)&v95);
    }
    if (v22 == v21)
    {
      char v57 = (void *)v12[29];
      unint64_t v56 = (void *)v12[30];
      if (*((void *)&v96 + 1) >= (unint64_t)v96)
      {
        if (v98)
        {
          v119[0] = 0;
          uint64_t v18 = TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v119, 1uLL);
          long long v58 = v95;
          --*((void *)&v96 + 1);
        }
        else
        {
          long long v58 = v95;
          if ((void)v96) {
            v95[(void)v96 - 1] = 0;
          }
        }
      }
      else
      {
        long long v58 = v95;
        v95[*((void *)&v96 + 1)] = 0;
      }
      if (*((void *)&v84 + 1) >= (unint64_t)v84)
      {
        if (v86)
        {
          v119[0] = 0;
          uint64_t v18 = TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v119, 1uLL);
          char v60 = v83;
          --*((void *)&v84 + 1);
        }
        else
        {
          char v60 = v83;
          if ((void)v84) {
            v83[(void)v84 - 1] = 0;
          }
        }
      }
      else
      {
        char v60 = v83;
        v83[*((void *)&v84 + 1)] = 0;
      }
      BOOL v77 = 1;
      if (!v57 || !v58 || (uint64_t v18 = TRegExp::match(v57, v58, 0), (v18 & 1) == 0))
      {
        if (!v56 || !v60 || (uint64_t v18 = TRegExp::match(v56, v60, 0), (v18 & 1) == 0)) {
          BOOL v77 = 0;
        }
      }
    }
    else
    {
      if (*((void *)&v96 + 1) >= (unint64_t)v96)
      {
        if (v98)
        {
          v119[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v119, 1uLL);
          long long v59 = (int *)v95;
          --*((void *)&v96 + 1);
        }
        else
        {
          long long v59 = (int *)v95;
          if ((void)v96) {
            v95[(void)v96 - 1] = 0;
          }
        }
      }
      else
      {
        long long v59 = (int *)v95;
        v95[*((void *)&v96 + 1)] = 0;
      }
      TBuffer<wchar_t>::assign((uint64_t)&v99, v59);
      if (*((void *)&v84 + 1) >= (unint64_t)v84)
      {
        if (v86)
        {
          v119[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v119, 1uLL);
          char v61 = (int *)v83;
          --*((void *)&v84 + 1);
        }
        else
        {
          char v61 = (int *)v83;
          if ((void)v84) {
            v83[(void)v84 - 1] = 0;
          }
        }
      }
      else
      {
        char v61 = (int *)v83;
        v83[*((void *)&v84 + 1)] = 0;
      }
      uint64_t v18 = TBuffer<wchar_t>::assign((uint64_t)&v87, v61);
    }
    ++v22;
  }
  while (v22 != v79);
  unint64_t v8 = v79;
  unint64_t v19 = v78 + 1;
  BOOL v15 = v80;
LABEL_126:
  if (v82 && v19 < v8)
  {
    BOOL v62 = TCompounder::getCapitalization((TCompounder *)v18, *(__int32 ***)(*v15 + 16 * v8 - 16));
    uint64_t v63 = v115[v20];
    if (v62)
    {
      uint64_t v64 = TLocaleInfo::toUpper(v12[2] + 240, v63);
      v115[v20] = v64;
      if (v20)
      {
        int v65 = TLocaleInfo::toUpper(v12[2] + 240, v64);
        goto LABEL_132;
      }
    }
    else
    {
      int v65 = TLocaleInfo::toLower(v12[2] + 240, v63);
LABEL_132:
      v115[v20] = v65;
    }
  }
  if (*((void *)&v116 + 1))
  {
    unint64_t v66 = 0;
    while (1)
    {
      int v67 = v115[v66];
      {
        operator new();
      }
      if (v67 <= 8202)
      {
        if (v67 != 32 && v67 != 160) {
          goto LABEL_146;
        }
      }
      else
      {
        BOOL v68 = v67 == 8203 || v67 == 65279;
        if (!v68 && v67 != 12288) {
          goto LABEL_146;
        }
      }
      v115[v66] = 45;
LABEL_146:
      ++v66;
      unint64_t v69 = *((void *)&v116 + 1);
      if (v66 >= *((void *)&v116 + 1)) {
        goto LABEL_151;
      }
    }
  }
  unint64_t v69 = 0;
LABEL_151:
  if ((v82 & 1) == 0 && v77)
  {
    int v70 = TLocaleInfo::toUpper(v12[2] + 240, *v115);
    *uint64_t v115 = v70;
    unint64_t v69 = *((void *)&v116 + 1);
  }
  if (v16 & 1 | (*((void *)&v112 + 1) != 0))
  {
    v119[0] = 92;
    TBuffer<wchar_t>::insert((uint64_t)&v115, v69, v119, 1uLL);
    TBuffer<wchar_t>::operator+=((uint64_t)&v115, (uint64_t)&v111);
    unint64_t v69 = *((void *)&v116 + 1);
    if (v16)
    {
      v119[0] = 92;
      TBuffer<wchar_t>::insert((uint64_t)&v115, *((unint64_t *)&v116 + 1), v119, 1uLL);
      TBuffer<wchar_t>::operator+=((uint64_t)&v115, (uint64_t)&v107);
      unint64_t v69 = *((void *)&v116 + 1);
    }
  }
  uint64_t v71 = (void *)v12[2];
  if (v69 >= (unint64_t)v116)
  {
    if (v118)
    {
      v119[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v115, v69, v119, 1uLL);
      char v72 = v115;
      --*((void *)&v116 + 1);
    }
    else
    {
      char v72 = v115;
      if ((void)v116) {
        v115[(void)v116 - 1] = 0;
      }
    }
  }
  else
  {
    char v72 = v115;
    v115[v69] = 0;
  }
  uint64_t Word = TLexicon::findWord(v71, v72);
  if (!Word)
  {
    uint64_t v74 = v12[2];
    if (*((void *)&v116 + 1) >= (unint64_t)v116)
    {
      if (v118)
      {
        v119[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v115, *((unint64_t *)&v116 + 1), v119, 1uLL);
        uint64_t v75 = v115;
        --*((void *)&v116 + 1);
      }
      else
      {
        uint64_t v75 = v115;
        if ((void)v116) {
          v115[(void)v116 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v75 = v115;
      v115[*((void *)&v116 + 1)] = 0;
    }
    uint64_t Word = TLexicon::addTempWord(v74, v75, 0, 0, 0);
  }
  if (v86 && v83 != (unsigned int *)v85 && v83) {
    MEMORY[0x216698730]();
  }
  if (v90 && v87 != (unsigned int *)v89 && v87) {
    MEMORY[0x216698730]();
  }
  if (v94 && v91 != v93 && v91) {
    MEMORY[0x216698730]();
  }
  if (v98 && v95 != (unsigned int *)v97 && v95) {
    MEMORY[0x216698730]();
  }
  if (v102 && v99 != (unsigned int *)v101 && v99) {
    MEMORY[0x216698730]();
  }
  if (v106 && v103 != (int *)v105 && v103) {
    MEMORY[0x216698730]();
  }
  if (v110 && v107 != v109 && v107) {
    MEMORY[0x216698730]();
  }
  if (v114 && v111 != v113 && v111) {
    MEMORY[0x216698730]();
  }
  if (v118 && v115 != (int *)v117 && v115) {
    MEMORY[0x216698730]();
  }
  return Word;
}

void sub_214027748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  MEMORY[0x216698730](a23, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x498]) && a25 != a9 && a25) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x8B8]))
  {
    unint64_t v26 = STACK[0x4A0];
    if (STACK[0x4A0] != a10)
    {
      if (v26) {
        MEMORY[0x216698730](v26, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xCD8]))
  {
    unint64_t v27 = STACK[0x8C0];
    if (STACK[0x8C0] != a11)
    {
      if (v27) {
        MEMORY[0x216698730](v27, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x10F8]))
  {
    unint64_t v28 = STACK[0xCE0];
    if (STACK[0xCE0] != a12)
    {
      if (v28) {
        MEMORY[0x216698730](v28, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x1518]))
  {
    unint64_t v29 = STACK[0x1100];
    if (STACK[0x1100] != a13)
    {
      if (v29) {
        MEMORY[0x216698730](v29, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x1938]))
  {
    unint64_t v30 = STACK[0x1520];
    if (STACK[0x1520] != a14)
    {
      if (v30) {
        MEMORY[0x216698730](v30, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x1D58]))
  {
    unint64_t v31 = STACK[0x1940];
    if (STACK[0x1940] != a15)
    {
      if (v31) {
        MEMORY[0x216698730](v31, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x2178]))
  {
    unint64_t v32 = STACK[0x1D60];
    if (STACK[0x1D60] != a16)
    {
      if (v32) {
        MEMORY[0x216698730](v32, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x2598]))
  {
    unint64_t v33 = STACK[0x2180];
    if (STACK[0x2180] != a17)
    {
      if (v33) {
        MEMORY[0x216698730](v33, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TCompounder::makeResult(uint64_t a1, void **a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v95 = (unsigned int *)v97;
  long long v96 = xmmword_214085190;
  char v98 = 1;
  uint64_t v7 = *a4;
  if (a4[1] == *a4) {
    goto LABEL_128;
  }
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v87 = (uint64_t)(a2 + 2);
  do
  {
    uint64_t v90 = v13;
    while (1)
    {
      uint64_t v14 = *(void *)(v7 + 16 * v12);
      if (!v14) {
        break;
      }
      char v16 = a2[1];
      unint64_t v15 = (unint64_t)a2[2];
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = ((char *)v16 - (unsigned char *)*a2) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v15 - (void)*a2;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v87, v21);
        }
        else {
          unint64_t v22 = 0;
        }
        uint64_t v23 = &v22[16 * v18];
        *(void *)uint64_t v23 = v14;
        *((void *)v23 + 1) = 1;
        uint64_t v25 = (char *)*a2;
        int v24 = (char *)a2[1];
        unint64_t v26 = v23;
        if (v24 != *a2)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 16;
            v24 -= 16;
          }
          while (v24 != v25);
          int v24 = (char *)*a2;
        }
        unint64_t v17 = v23 + 16;
        *a2 = v26;
        a2[1] = v23 + 16;
        a2[2] = &v22[16 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        void *v16 = v14;
        v16[1] = 1;
        unint64_t v17 = v16 + 2;
      }
      a2[1] = v17;
      if (*(unsigned char *)(a1 + 56))
      {
        TBuffer<wchar_t>::resize((uint64_t)&v95, 0);
        tildeEscape(**(void **)(*a4 + 16 * v12), (uint64_t)&v95);
        uint64_t v27 = *(void *)(a1 + 360);
        unint64_t v28 = (unsigned int *)(v27 + 512);
        if (*(char *)(v27 + 535) < 0) {
          unint64_t v28 = *(unsigned int **)v28;
        }
        loggableUnicode(v28, v93);
        if (v94 >= 0) {
          unint64_t v29 = v93;
        }
        else {
          unint64_t v29 = (void **)v93[0];
        }
        if (*((void *)&v96 + 1) >= (unint64_t)v96)
        {
          if (v98)
          {
            v99[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v99, 1uLL);
            unint64_t v30 = v95;
            --*((void *)&v96 + 1);
          }
          else
          {
            unint64_t v30 = v95;
            if ((void)v96) {
              v95[(void)v96 - 1] = 0;
            }
          }
        }
        else
        {
          unint64_t v30 = v95;
          v95[*((void *)&v96 + 1)] = 0;
        }
        loggableUnicode(v30, __p);
        int v35 = __p;
        if (v92 < 0) {
          int v35 = (void **)__p[0];
        }
        tknPrintf("%s: 0 %s %s\n", v31, v32, v33, v34, v29, v35, TCompounder::ms_tagName[0]);
        if (v92 < 0) {
          operator delete(__p[0]);
        }
        if (v94 < 0) {
          operator delete(v93[0]);
        }
      }
      ++v12;
      uint64_t v7 = *a4;
      if (v12 >= (a4[1] - *a4) >> 4) {
        goto LABEL_127;
      }
    }
    uint64_t v36 = 0;
    uint64_t v37 = 8 * v90;
    uint64_t v38 = 16 * v90;
    do
    {
      uint64_t v39 = v36;
      unint64_t v40 = v90 + v36;
      if (*(unsigned char *)(a1 + 56))
      {
        TBuffer<wchar_t>::resize((uint64_t)&v95, 0);
        __int32 v41 = *(uint64_t **)(*a3 + v38);
        if (v41) {
          tildeEscape(*v41, (uint64_t)&v95);
        }
        if (*(double *)(*a7 + v37 + 8 * v39) == 0.0)
        {
          uint64_t v42 = *(void *)(a1 + 360);
          size_t v43 = (unsigned int *)(v42 + 512);
          if (*(char *)(v42 + 535) < 0) {
            size_t v43 = *(unsigned int **)v43;
          }
          loggableUnicode(v43, v93);
          if (v94 >= 0) {
            long long v44 = v93;
          }
          else {
            long long v44 = (void **)v93[0];
          }
          if (*((void *)&v96 + 1) >= (unint64_t)v96)
          {
            if (v98)
            {
              v99[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v99, 1uLL);
              BOOL v45 = v95;
              --*((void *)&v96 + 1);
            }
            else
            {
              BOOL v45 = v95;
              if ((void)v96) {
                v95[(void)v96 - 1] = 0;
              }
            }
          }
          else
          {
            BOOL v45 = v95;
            v95[*((void *)&v96 + 1)] = 0;
          }
          loggableUnicode(v45, __p);
          unint64_t v55 = __p;
          if (v92 < 0) {
            unint64_t v55 = (void **)__p[0];
          }
          tknPrintf("%s: 0 %s %s\n", v51, v52, v53, v54, v44, v55, TCompounder::ms_tagName[(*(void *)(*a6 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v40) & 1]);
        }
        else
        {
          uint64_t v46 = *(void *)(a1 + 360);
          long long v47 = (unsigned int *)(v46 + 512);
          if (*(char *)(v46 + 535) < 0) {
            long long v47 = *(unsigned int **)v47;
          }
          loggableUnicode(v47, v93);
          if (v94 >= 0) {
            uint64_t v48 = v93;
          }
          else {
            uint64_t v48 = (void **)v93[0];
          }
          uint64_t v49 = *(void *)(*a7 + v37 + 8 * v39);
          if (*((void *)&v96 + 1) >= (unint64_t)v96)
          {
            if (v98)
            {
              v99[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), v99, 1uLL);
              long long v50 = v95;
              --*((void *)&v96 + 1);
            }
            else
            {
              long long v50 = v95;
              if ((void)v96) {
                v95[(void)v96 - 1] = 0;
              }
            }
          }
          else
          {
            long long v50 = v95;
            v95[*((void *)&v96 + 1)] = 0;
          }
          loggableUnicode(v50, __p);
          char v60 = __p;
          if (v92 < 0) {
            char v60 = (void **)__p[0];
          }
          tknPrintf("%s: %e %s %s\n", v56, v57, v58, v59, v48, v49, v60, TCompounder::ms_tagName[(*(void *)(*a6 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v40) & 1]);
        }
        if (v92 < 0) {
          operator delete(__p[0]);
        }
        if (v94 < 0) {
          operator delete(v93[0]);
        }
      }
      if (v40 + 1 >= a6[1]) {
        break;
      }
      uint64_t v36 = v39 + 1;
      v38 += 16;
    }
    while (((*(void *)(*a6 + (((v40 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 + 1)) & 1) != 0);
    uint64_t v86 = v39 + 1;
    uint64_t v13 = v39 + 1 + v90;
    if (v39)
    {
      char v61 = TStringParam::get((TStringParam *)(*(void *)(*(void *)(a1 + 16) + 336) + 3280));
      if (!wcsncmp((const __int32 *)v61, dword_2140AA6CC, 2uLL))
      {
        BOOL v62 = 0;
      }
      else if (!wcscmp((const __int32 *)v61, dword_2140AA6D8))
      {
        BOOL v62 = 0;
      }
      else
      {
        BOOL v62 = wcscmp((const __int32 *)v61, dword_2140AA6E8)
           && wcscmp((const __int32 *)v61, dword_2140AA6F8)
           && wcscmp((const __int32 *)v61, dword_2140AA708) != 0;
      }
      if (*(void *)(a1 + 384) > 2uLL)
      {
        uint64_t v76 = TCompounder::compoundWithRules(a1, (uint64_t)a3, a5, v90, v13);
      }
      else if (v62)
      {
        uint64_t v76 = TCompounder::compoundGerman(a1, (uint64_t)a3, a5, v90, v13);
      }
      else
      {
        uint64_t v76 = TCompounder::compoundNordic(a1, (uint64_t)a3, a5, v90, v13);
      }
      uint64_t v77 = v76;
      int v65 = (uint64_t *)a2[1];
      unint64_t v78 = (unint64_t)a2[2];
      if ((unint64_t)v65 < v78)
      {
        uint64_t *v65 = v76;
        uint64_t v66 = v39 + 1;
        goto LABEL_111;
      }
      uint64_t v80 = ((char *)v65 - (unsigned char *)*a2) >> 4;
      unint64_t v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 60) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v82 = v78 - (void)*a2;
      if (v82 >> 3 > v81) {
        unint64_t v81 = v82 >> 3;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v81;
      }
      if (v70) {
        uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v87, v70);
      }
      else {
        uint64_t v71 = 0;
      }
      char v72 = &v71[16 * v80];
      *(void *)char v72 = v77;
      *((void *)v72 + 1) = v86;
      uint64_t v83 = (char *)*a2;
      uint64_t v73 = (char *)a2[1];
      uint64_t v75 = v72;
      if (v73 != *a2)
      {
        do
        {
          *((_OWORD *)v75 - 1) = *((_OWORD *)v73 - 1);
          v75 -= 16;
          v73 -= 16;
        }
        while (v73 != v83);
LABEL_123:
        uint64_t v73 = (char *)*a2;
      }
    }
    else
    {
      uint64_t v63 = *(void *)(*a3 + 16 * v90);
      int v65 = (uint64_t *)a2[1];
      unint64_t v64 = (unint64_t)a2[2];
      if ((unint64_t)v65 < v64)
      {
        uint64_t *v65 = v63;
        uint64_t v66 = 1;
LABEL_111:
        v65[1] = v66;
        unint64_t v79 = v65 + 2;
        goto LABEL_126;
      }
      uint64_t v67 = ((char *)v65 - (unsigned char *)*a2) >> 4;
      unint64_t v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 60) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v69 = v64 - (void)*a2;
      if (v69 >> 3 > v68) {
        unint64_t v68 = v69 >> 3;
      }
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v68;
      }
      if (v70) {
        uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v87, v70);
      }
      else {
        uint64_t v71 = 0;
      }
      char v72 = &v71[16 * v67];
      *(void *)char v72 = v63;
      *((void *)v72 + 1) = 1;
      uint64_t v74 = (char *)*a2;
      uint64_t v73 = (char *)a2[1];
      uint64_t v75 = v72;
      if (v73 != *a2)
      {
        do
        {
          *((_OWORD *)v75 - 1) = *((_OWORD *)v73 - 1);
          v75 -= 16;
          v73 -= 16;
        }
        while (v73 != v74);
        goto LABEL_123;
      }
    }
    unint64_t v79 = v72 + 16;
    *a2 = v75;
    a2[1] = v72 + 16;
    a2[2] = &v71[16 * v70];
    if (v73) {
      operator delete(v73);
    }
LABEL_126:
    v12 += v86;
    a2[1] = v79;
    uint64_t v7 = *a4;
  }
  while (v12 < (a4[1] - *a4) >> 4);
LABEL_127:
  if (v98)
  {
LABEL_128:
    if (v95 != (unsigned int *)v97 && v95 != 0) {
      MEMORY[0x216698730]();
    }
  }
}

void sub_2140281D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (LOBYTE(STACK[0x4A8]) && a27 != a14)
  {
    if (a27) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void TCompounder::applyModelMBR(void *a1, long long **a2, uint64_t *a3, void *a4, void **a5)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  uint64_t v220 = 0;
  uint64_t v219 = 0;
  uint64_t v221 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::__init_with_size[abi:ne180100]<std::pair<TWord const*,unsigned int>*,std::pair<TWord const*,unsigned int>*>((char *)&v219, *a2, a2[1], a2[1] - *a2);
  long long __p = 0;
  long long v216 = 0;
  unint64_t v218 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v216, a2[1] - *a2);
  uint64_t v184 = a5;
  uint64_t v214 = 0;
  uint64_t v213 = 0;
  unint64_t v215 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v213, (uint64_t)(a4[1] - *a4) >> 4);
  uint64_t v209 = (__int32 *)v211;
  long long v210 = xmmword_214085190;
  char v212 = 1;
  uint64_t v205 = (unsigned int *)v207;
  long long v206 = xmmword_214085190;
  char v208 = 1;
  unint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    for (unint64_t i = 0; i < a2[1] - *a2; ++i)
    {
      uint64_t v10 = (__int32 ***)&v8[i];
      BOOL v11 = *v10;
      if (*v10)
      {
        if (a1[11]) {
          TWord::getTokenName(*v10, (uint64_t)&v209);
        }
        unint64_t v12 = (void *)a1[12];
        if (v12)
        {
          TWord::getCategoryTag((uint64_t)v11, &v205);
          uint64_t v13 = a1;
          unint64_t v12 = (void *)a1[12];
        }
        else
        {
          uint64_t v13 = a1;
        }
        char v16 = (void *)v13[11];
        if (*((void *)&v210 + 1) >= (unint64_t)v210)
        {
          if (v212)
          {
            LODWORD(v224) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v209, *((unint64_t *)&v210 + 1), (int *)&v224, 1uLL);
            unint64_t v17 = v209;
            --*((void *)&v210 + 1);
          }
          else
          {
            unint64_t v17 = v209;
            if ((void)v210) {
              v209[(void)v210 - 1] = 0;
            }
          }
        }
        else
        {
          unint64_t v17 = v209;
          v209[*((void *)&v210 + 1)] = 0;
        }
        if (*((void *)&v206 + 1) >= (unint64_t)v206)
        {
          if (v208)
          {
            LODWORD(v224) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v205, *((unint64_t *)&v206 + 1), (int *)&v224, 1uLL);
            uint64_t v23 = v205;
            --*((void *)&v206 + 1);
          }
          else
          {
            uint64_t v23 = v205;
            if ((void)v206) {
              v205[(void)v206 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v23 = v205;
          v205[*((void *)&v206 + 1)] = 0;
        }
        if (v16 && v17 && TRegExp::match(v16, (unsigned int *)v17, 0) || v12 && v23 && TRegExp::match(v12, v23, 0)) {
          goto LABEL_89;
        }
        int v24 = &(*a2)[i];
        uint64_t v25 = (char *)__p;
        if ((unint64_t)__p >= v218)
        {
          int64_t v27 = ((unsigned char *)__p - (unsigned char *)v216) >> 4;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60) {
LABEL_375:
          }
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          uint64_t v29 = v218 - (void)v216;
          if ((uint64_t)(v218 - (void)v216) >> 3 > v28) {
            unint64_t v28 = v29 >> 3;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30) {
            uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v218, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          long long v47 = (long long *)&v31[16 * v27];
          *long long v47 = *v24;
          uint64_t v48 = (char *)__p;
          uint64_t v49 = (char *)v216;
          long long v50 = (char *)v47;
          if (__p != v216)
          {
            do
            {
              *((_OWORD *)v50 - 1) = *((_OWORD *)v48 - 1);
              v50 -= 16;
              v48 -= 16;
            }
            while (v48 != v49);
            uint64_t v48 = (char *)v216;
          }
          unint64_t v26 = v47 + 1;
          long long v216 = v50;
          long long __p = v47 + 1;
          unint64_t v218 = (unint64_t)&v31[16 * v30];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *(_OWORD *)long long __p = *v24;
          unint64_t v26 = v25 + 16;
        }
        long long __p = v26;
        uint64_t v36 = (_OWORD *)(*a4 + 16 * i);
        uint64_t v37 = v214;
        if ((unint64_t)v214 >= v215)
        {
          int64_t v52 = ((unsigned char *)v214 - (unsigned char *)v213) >> 4;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 60) {
LABEL_374:
          }
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          uint64_t v54 = v215 - (void)v213;
          if ((uint64_t)(v215 - (void)v213) >> 3 > v53) {
            unint64_t v53 = v54 >> 3;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v53;
          }
          if (v41) {
            uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v215, v41);
          }
          else {
            uint64_t v42 = 0;
          }
          size_t v43 = &v42[16 * v52];
          *(_OWORD *)size_t v43 = *v36;
          long long v44 = (char *)v214;
          unint64_t v55 = (char *)v213;
          uint64_t v46 = v43;
          if (v214 != v213)
          {
            do
            {
              *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
              v46 -= 16;
              v44 -= 16;
            }
            while (v44 != v55);
            goto LABEL_85;
          }
          goto LABEL_86;
        }
      }
      else
      {
        uint64_t v14 = (char *)__p;
        if ((unint64_t)__p >= v218)
        {
          int64_t v18 = ((unsigned char *)__p - (unsigned char *)v216) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            goto LABEL_375;
          }
          uint64_t v20 = v218 - (void)v216;
          if ((uint64_t)(v218 - (void)v216) >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v218, v21);
          }
          else {
            unint64_t v22 = 0;
          }
          uint64_t v32 = &v22[16 * v18];
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v10;
          uint64_t v33 = (char *)__p;
          uint64_t v34 = (char *)v216;
          int v35 = v32;
          if (__p != v216)
          {
            do
            {
              *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
              v35 -= 16;
              v33 -= 16;
            }
            while (v33 != v34);
            uint64_t v33 = (char *)v216;
          }
          unint64_t v15 = v32 + 16;
          long long v216 = v35;
          long long __p = v32 + 16;
          unint64_t v218 = (unint64_t)&v22[16 * v21];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)v10;
          unint64_t v15 = v14 + 16;
        }
        long long __p = v15;
        uint64_t v36 = (_OWORD *)(*a4 + 16 * i);
        uint64_t v37 = v214;
        if ((unint64_t)v214 >= v215)
        {
          int64_t v38 = ((unsigned char *)v214 - (unsigned char *)v213) >> 4;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 60) {
            goto LABEL_374;
          }
          uint64_t v40 = v215 - (void)v213;
          if ((uint64_t)(v215 - (void)v213) >> 3 > v39) {
            unint64_t v39 = v40 >> 3;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41) {
            uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v215, v41);
          }
          else {
            uint64_t v42 = 0;
          }
          size_t v43 = &v42[16 * v38];
          *(_OWORD *)size_t v43 = *v36;
          long long v44 = (char *)v214;
          BOOL v45 = (char *)v213;
          uint64_t v46 = v43;
          if (v214 != v213)
          {
            do
            {
              *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
              v46 -= 16;
              v44 -= 16;
            }
            while (v44 != v45);
LABEL_85:
            long long v44 = (char *)v213;
          }
LABEL_86:
          uint64_t v51 = v43 + 16;
          uint64_t v213 = v46;
          uint64_t v214 = v43 + 16;
          unint64_t v215 = (unint64_t)&v42[16 * v41];
          if (v44) {
            operator delete(v44);
          }
          goto LABEL_88;
        }
      }
      _OWORD *v37 = *v36;
      uint64_t v51 = v37 + 1;
LABEL_88:
      uint64_t v214 = v51;
      *((void *)v219 + 2 * i) = 0;
LABEL_89:
      unint64_t v8 = *a2;
    }
  }
  memset(v204, 0, sizeof(v204));
  std::vector<BOOL>::reserve((char **)v204, ((unsigned char *)__p - (unsigned char *)v216) >> 4);
  uint64_t v202 = 0;
  uint64_t v201 = 0;
  uint64_t v203 = 0;
  std::vector<double>::reserve(&v201, ((unsigned char *)__p - (unsigned char *)v216) >> 4);
  uint64_t v56 = a3;
  if (v216 != __p)
  {
    uint64_t v57 = a1[45];
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v57 + 992));
    if (!*(unsigned char *)(v57 + TParam::getValidConfig((TParam *)(v57 + 992), ActiveConfigHandle) + 1144))
    {
      memset(&v200, 0, sizeof(v200));
      std::vector<int>::reserve(&v200, (((unsigned char *)__p - (unsigned char *)v216) >> 4) + ((a3[1] - *a3) >> 3));
      uint64_t v198 = 0;
      uint64_t v197 = 0;
      uint64_t v199 = 0;
      std::vector<unsigned long>::reserve(&v197, (((unsigned char *)__p - (unsigned char *)v216) >> 4) + ((a3[1] - *a3) >> 3));
      memset(v196, 0, sizeof(v196));
      std::vector<BOOL>::reserve((char **)v196, (((unsigned char *)__p - (unsigned char *)v216) >> 4) + ((a3[1] - *a3) >> 3));
      memset(v195, 0, sizeof(v195));
      std::vector<BOOL>::reserve((char **)v195, (((unsigned char *)__p - (unsigned char *)v216) >> 4) + ((a3[1] - *a3) >> 3));
      memset(v194, 0, sizeof(v194));
      std::vector<BOOL>::reserve((char **)v194, (((unsigned char *)__p - (unsigned char *)v216) >> 4) + ((a3[1] - *a3) >> 3));
      memset(v193, 0, sizeof(v193));
      std::vector<BOOL>::reserve((char **)v193, (((unsigned char *)__p - (unsigned char *)v216) >> 4) + ((a3[1] - *a3) >> 3));
      uint64_t v190 = 0;
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v190, (((unsigned char *)__p - (unsigned char *)v216) >> 4) + ((a3[1] - *a3) >> 3));
      uint64_t v70 = a3[1];
      if (v70 == *a3)
      {
        uint64_t v105 = a3[1];
      }
      else
      {
        unint64_t v71 = 0;
        uint64_t v70 = *a3;
        do
        {
          char v72 = *(uint64_t **)(v70 + 8 * v71);
          std::vector<int>::pointer end = v200.__end_;
          if (v200.__end_ >= v200.__end_cap_.__value_)
          {
            begiuint64_t n = v200.__begin_;
            int64_t v76 = v200.__end_ - v200.__begin_;
            unint64_t v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 62) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            int64_t v78 = (char *)v200.__end_cap_.__value_ - (char *)v200.__begin_;
            if (((char *)v200.__end_cap_.__value_ - (char *)v200.__begin_) >> 1 > v77) {
              unint64_t v77 = v78 >> 1;
            }
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v79 = v77;
            }
            if (v79)
            {
              uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v200.__end_cap_, v79);
              std::vector<int>::pointer end = v200.__end_;
              begiuint64_t n = v200.__begin_;
            }
            else
            {
              uint64_t v80 = 0;
            }
            unint64_t v81 = (int *)&v80[4 * v76];
            *unint64_t v81 = *((_DWORD *)v72 + 4);
            uint64_t v74 = v81 + 1;
            while (end != begin)
            {
              int v82 = *--end;
              *--unint64_t v81 = v82;
            }
            v200.__begin_ = v81;
            v200.__end_ = v74;
            v200.__end_cap_.__value_ = (int *)&v80[4 * v79];
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            *v200.__end_ = *((_DWORD *)v72 + 4);
            uint64_t v74 = end + 1;
          }
          v200.__end_ = v74;
          uint64_t v83 = v198;
          if (v198 >= (uint64_t *)v199)
          {
            uint64_t v85 = (uint64_t *)v197;
            uint64_t v86 = ((char *)v198 - (unsigned char *)v197) >> 3;
            unint64_t v87 = v86 + 1;
            if ((unint64_t)(v86 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v88 = v199 - (unsigned char *)v197;
            if ((v199 - (unsigned char *)v197) >> 2 > v87) {
              unint64_t v87 = v88 >> 2;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v89 = v87;
            }
            if (v89)
            {
              uint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v199, v89);
              uint64_t v83 = v198;
              uint64_t v85 = (uint64_t *)v197;
            }
            else
            {
              uint64_t v90 = 0;
            }
            uint64_t v91 = &v90[8 * v86];
            *(void *)uint64_t v91 = v72[1];
            long long v84 = (uint64_t *)(v91 + 8);
            while (v83 != v85)
            {
              uint64_t v92 = *--v83;
              *((void *)v91 - 1) = v92;
              v91 -= 8;
            }
            uint64_t v197 = v91;
            uint64_t v198 = v84;
            uint64_t v199 = &v90[8 * v89];
            if (v85) {
              operator delete(v85);
            }
          }
          else
          {
            *uint64_t v198 = v72[1];
            long long v84 = v83 + 1;
          }
          uint64_t v198 = v84;
          LOBYTE(v224) = 0;
          std::vector<BOOL>::push_back((uint64_t)v196, &v224);
          LOBYTE(v224) = 0;
          std::vector<BOOL>::push_back((uint64_t)v195, &v224);
          LOBYTE(v224) = 0;
          std::vector<BOOL>::push_back((uint64_t)v194, &v224);
          LOBYTE(v224) = 0;
          std::vector<BOOL>::push_back((uint64_t)v193, &v224);
          uint64_t v93 = *v72;
          char v94 = v191;
          if (v191 >= v192)
          {
            uint64_t v96 = (v191 - (unsigned char *)v190) >> 4;
            unint64_t v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 60) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v98 = v192 - (unsigned char *)v190;
            if ((v192 - (unsigned char *)v190) >> 3 > v97) {
              unint64_t v97 = v98 >> 3;
            }
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v99 = v97;
            }
            if (v99) {
              long long v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v192, v99);
            }
            else {
              long long v100 = 0;
            }
            uint64_t v101 = &v100[16 * v96];
            *(void *)uint64_t v101 = v93;
            *((_DWORD *)v101 + 2) = 0;
            uint64_t v103 = (char *)v190;
            char v102 = v191;
            long long v104 = v101;
            if (v191 != v190)
            {
              do
              {
                *((_OWORD *)v104 - 1) = *((_OWORD *)v102 - 1);
                v104 -= 16;
                v102 -= 16;
              }
              while (v102 != v103);
              char v102 = (char *)v190;
            }
            uint64_t v95 = v101 + 16;
            uint64_t v190 = v104;
            uint64_t v191 = v101 + 16;
            uint64_t v192 = &v100[16 * v99];
            if (v102) {
              operator delete(v102);
            }
          }
          else
          {
            *(void *)uint64_t v191 = v93;
            *((_DWORD *)v94 + 2) = 0;
            uint64_t v95 = v94 + 16;
          }
          uint64_t v191 = v95;
          ++v71;
          uint64_t v70 = *a3;
          uint64_t v105 = a3[1];
        }
        while (v71 < (v105 - *a3) >> 3);
        uint64_t v56 = a3;
      }
      uint64_t v224 = (char *)&v226;
      long long v225 = xmmword_214085190;
      char v227 = 1;
      char v106 = (char *)v216;
      if (__p != v216)
      {
        unint64_t v107 = 0;
        char v108 = 0;
        unint64_t v109 = 0;
        do
        {
          char v110 = (unsigned int ***)&v106[16 * v109];
          long long v111 = *v110;
          long long v112 = v191;
          if (v191 >= v192)
          {
            uint64_t v114 = (v191 - (unsigned char *)v190) >> 4;
            unint64_t v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 60) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v116 = v192 - (unsigned char *)v190;
            if ((v192 - (unsigned char *)v190) >> 3 > v115) {
              unint64_t v115 = v116 >> 3;
            }
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v117 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v117 = v115;
            }
            if (v117) {
              char v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v192, v117);
            }
            else {
              char v118 = 0;
            }
            unsigned int v119 = &v118[16 * v114];
            *(_OWORD *)unsigned int v119 = *(_OWORD *)v110;
            long long v121 = (char *)v190;
            uint64_t v120 = v191;
            char v122 = v119;
            if (v191 != v190)
            {
              do
              {
                *((_OWORD *)v122 - 1) = *((_OWORD *)v120 - 1);
                v122 -= 16;
                v120 -= 16;
              }
              while (v120 != v121);
              uint64_t v120 = (char *)v190;
            }
            uint64_t v113 = v119 + 16;
            uint64_t v190 = v122;
            uint64_t v191 = v119 + 16;
            uint64_t v192 = &v118[16 * v117];
            if (v120) {
              operator delete(v120);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v191 = *(_OWORD *)v110;
            uint64_t v113 = v112 + 16;
          }
          uint64_t v191 = v113;
          if (v111)
          {
            TBuffer<char>::resize((uint64_t)&v224, 0);
            TLocaleInfo::unicodeToMultiByte(a1[2] + 240, *v111, (uint64_t)&v224);
            uint64_t v123 = (TLmScore *)a1[44];
            if (*((void *)&v225 + 1) >= (unint64_t)v225)
            {
              if (v227)
              {
                LOBYTE(__s1[0]) = 0;
                TBuffer<char>::insert((uint64_t)&v224, *((unint64_t *)&v225 + 1), (char *)__s1, 1uLL);
                --*((void *)&v225 + 1);
              }
              else if ((void)v225)
              {
                v224[(void)v225 - 1] = 0;
              }
            }
            else
            {
              v224[*((void *)&v225 + 1)] = 0;
            }
            uint64_t Class = TLmScore::getClass(v123, v224);
            uint64_t v133 = Class;
            char v134 = v198;
            if (v198 >= (uint64_t *)v199)
            {
              uint64_t v136 = (uint64_t *)v197;
              uint64_t v137 = ((char *)v198 - (unsigned char *)v197) >> 3;
              unint64_t v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v139 = v199 - (unsigned char *)v197;
              if ((v199 - (unsigned char *)v197) >> 2 > v138) {
                unint64_t v138 = v139 >> 2;
              }
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v138;
              }
              if (v140)
              {
                uint64_t v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v199, v140);
                char v134 = v198;
                uint64_t v136 = (uint64_t *)v197;
              }
              else
              {
                uint64_t v141 = 0;
              }
              uint64_t v142 = (uint64_t *)&v141[8 * v137];
              *uint64_t v142 = v133;
              uint64_t v135 = v142 + 1;
              while (v134 != v136)
              {
                uint64_t v143 = *--v134;
                *--uint64_t v142 = v143;
              }
              uint64_t v197 = v142;
              uint64_t v198 = v135;
              uint64_t v199 = &v141[8 * v140];
              if (v136) {
                operator delete(v136);
              }
            }
            else
            {
              *uint64_t v198 = Class;
              uint64_t v135 = v134 + 1;
            }
            uint64_t v198 = v135;
            if (a1[15] || a1[17] || a1[19] || a1[21]) {
              TWord::getTokenName((__int32 **)v111, (uint64_t)&v209);
            }
            if (a1[16] || a1[18] || a1[20] || a1[22]) {
              TWord::getCategoryTag((uint64_t)v111, &v205);
            }
            if (*((unsigned char *)v216 + 16 * v109 + 8)) {
              goto LABEL_278;
            }
            uint64_t v144 = a1[45];
            uint64_t v145 = TParam::getActiveConfigHandle((TParam *)(v144 + 1240));
            if (*(unsigned char *)(v144 + TParam::getValidConfig((TParam *)(v144 + 1240), v145) + 1392))
            {
              unint64_t v146 = (unint64_t *)a1[44];
              if (*((void *)&v225 + 1) >= (unint64_t)v225)
              {
                if (v227)
                {
                  LOBYTE(__s1[0]) = 0;
                  TBuffer<char>::insert((uint64_t)&v224, *((unint64_t *)&v225 + 1), (char *)__s1, 1uLL);
                  --*((void *)&v225 + 1);
                }
                else if ((void)v225)
                {
                  v224[(void)v225 - 1] = 0;
                }
              }
              else
              {
                v224[*((void *)&v225 + 1)] = 0;
              }
              if (SDWord_GetHandle(*v146, v224) == -1) {
                goto LABEL_278;
              }
            }
            uint64_t v151 = (void *)a1[15];
            uint64_t v150 = (void *)a1[16];
            if (*((void *)&v210 + 1) >= (unint64_t)v210)
            {
              if (v212)
              {
                __s1[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v209, *((unint64_t *)&v210 + 1), __s1, 1uLL);
                uint64_t v152 = v209;
                --*((void *)&v210 + 1);
              }
              else
              {
                uint64_t v152 = v209;
                if ((void)v210) {
                  v209[(void)v210 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v152 = v209;
              v209[*((void *)&v210 + 1)] = 0;
            }
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                __s1[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v205, *((unint64_t *)&v206 + 1), __s1, 1uLL);
                uint64_t v153 = v205;
                --*((void *)&v206 + 1);
              }
              else
              {
                uint64_t v153 = v205;
                if ((void)v206) {
                  v205[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v153 = v205;
              v205[*((void *)&v206 + 1)] = 0;
            }
            if (v151 && v152 && TRegExp::match(v151, (unsigned int *)v152, 0)
              || v150 && v153 && TRegExp::match(v150, v153, 0))
            {
LABEL_278:
              char v149 = 0;
            }
            else
            {
              char v149 = 1;
            }
            uint64_t v155 = (void *)a1[17];
            uint64_t v154 = (void *)a1[18];
            if (*((void *)&v210 + 1) >= (unint64_t)v210)
            {
              if (v212)
              {
                __s1[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v209, *((unint64_t *)&v210 + 1), __s1, 1uLL);
                uint64_t v156 = v209;
                --*((void *)&v210 + 1);
              }
              else
              {
                uint64_t v156 = v209;
                if ((void)v210) {
                  v209[(void)v210 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v156 = v209;
              v209[*((void *)&v210 + 1)] = 0;
            }
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                __s1[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v205, *((unint64_t *)&v206 + 1), __s1, 1uLL);
                uint64_t v157 = v205;
                --*((void *)&v206 + 1);
              }
              else
              {
                uint64_t v157 = v205;
                if ((void)v206) {
                  v205[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v157 = v205;
              v205[*((void *)&v206 + 1)] = 0;
            }
            BOOL v158 = (!v155 || !v156 || !TRegExp::match(v155, (unsigned int *)v156, 0))
                && (!v154 || !v157 || !TRegExp::match(v154, v157, 0));
            LOBYTE(__v.__first_) = v158;
            std::vector<BOOL>::push_back((uint64_t)v195, &__v);
            uint64_t v160 = (void *)a1[19];
            uint64_t v159 = (void *)a1[20];
            if (*((void *)&v210 + 1) >= (unint64_t)v210)
            {
              if (v212)
              {
                __s1[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v209, *((unint64_t *)&v210 + 1), __s1, 1uLL);
                uint64_t v161 = v209;
                --*((void *)&v210 + 1);
              }
              else
              {
                uint64_t v161 = v209;
                if ((void)v210) {
                  v209[(void)v210 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v161 = v209;
              v209[*((void *)&v210 + 1)] = 0;
            }
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                __s1[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v205, *((unint64_t *)&v206 + 1), __s1, 1uLL);
                uint64_t v162 = v205;
                --*((void *)&v206 + 1);
              }
              else
              {
                uint64_t v162 = v205;
                if ((void)v206) {
                  v205[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v162 = v205;
              v205[*((void *)&v206 + 1)] = 0;
            }
            BOOL v163 = (!v160 || !v161 || !TRegExp::match(v160, (unsigned int *)v161, 0))
                && (!v159 || !v162 || !TRegExp::match(v159, v162, 0));
            LOBYTE(__v.__first_) = v163;
            std::vector<BOOL>::push_back((uint64_t)v194, &__v);
            uint64_t v165 = (void *)a1[21];
            uint64_t v164 = (void *)a1[22];
            if (*((void *)&v210 + 1) >= (unint64_t)v210)
            {
              if (v212)
              {
                __s1[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v209, *((unint64_t *)&v210 + 1), __s1, 1uLL);
                uint64_t v166 = v209;
                --*((void *)&v210 + 1);
              }
              else
              {
                uint64_t v166 = v209;
                if ((void)v210) {
                  v209[(void)v210 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v166 = v209;
              v209[*((void *)&v210 + 1)] = 0;
            }
            if (*((void *)&v206 + 1) >= (unint64_t)v206)
            {
              if (v208)
              {
                __s1[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v205, *((unint64_t *)&v206 + 1), __s1, 1uLL);
                uint64_t v167 = v205;
                --*((void *)&v206 + 1);
              }
              else
              {
                uint64_t v167 = v205;
                if ((void)v206) {
                  v205[(void)v206 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v167 = v205;
              v205[*((void *)&v206 + 1)] = 0;
            }
            BOOL v168 = (!v165 || !v166 || !TRegExp::match(v165, (unsigned int *)v166, 0))
                && (!v164 || !v167 || !TRegExp::match(v164, v167, 0));
            LOBYTE(__v.__first_) = v168;
            std::vector<BOOL>::push_back((uint64_t)v193, &__v);
          }
          else
          {
            uint64_t v124 = v198;
            if (v198 >= (uint64_t *)v199)
            {
              uint64_t v126 = (uint64_t *)v197;
              uint64_t v127 = ((char *)v198 - (unsigned char *)v197) >> 3;
              unint64_t v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v129 = v199 - (unsigned char *)v197;
              if ((v199 - (unsigned char *)v197) >> 2 > v128) {
                unint64_t v128 = v129 >> 2;
              }
              if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v128;
              }
              if (v130)
              {
                uint64_t v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v199, v130);
                uint64_t v124 = v198;
                uint64_t v126 = (uint64_t *)v197;
              }
              else
              {
                uint64_t v131 = 0;
              }
              uint64_t v147 = &v131[8 * v127];
              *(void *)uint64_t v147 = 0;
              uint64_t v125 = (uint64_t *)(v147 + 8);
              while (v124 != v126)
              {
                uint64_t v148 = *--v124;
                *((void *)v147 - 1) = v148;
                v147 -= 8;
              }
              uint64_t v197 = v147;
              uint64_t v198 = v125;
              uint64_t v199 = &v131[8 * v130];
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              *uint64_t v198 = 0;
              uint64_t v125 = v124 + 1;
            }
            uint64_t v198 = v125;
            LOBYTE(__s1[0]) = 0;
            std::vector<BOOL>::push_back((uint64_t)v195, __s1);
            LOBYTE(__s1[0]) = 0;
            std::vector<BOOL>::push_back((uint64_t)v194, __s1);
            LOBYTE(__s1[0]) = 0;
            std::vector<BOOL>::push_back((uint64_t)v193, __s1);
            char v149 = 0;
          }
          uint64_t v169 = v107;
          if (v107 < (v220 - (unsigned char *)v219) >> 4)
          {
            uint64_t v169 = v107;
            char v170 = (char *)v219 + 16 * v107;
            do
            {
              if (!*v170) {
                goto LABEL_346;
              }
              ++v169;
              v170 += 2;
            }
            while ((v220 - (unsigned char *)v219) >> 4 != v169);
            uint64_t v169 = (v220 - (unsigned char *)v219) >> 4;
          }
LABEL_346:
          LOBYTE(__s1[0]) = v149 & v108 & (v169 == v107);
          std::vector<BOOL>::push_back((uint64_t)v196, __s1);
          unint64_t v107 = v169 + 1;
          ++v109;
          char v106 = (char *)v216;
          char v108 = v149;
        }
        while (v109 < ((unsigned char *)__p - (unsigned char *)v216) >> 4);
        uint64_t v56 = a3;
        uint64_t v70 = *a3;
        uint64_t v105 = a3[1];
      }
      if (v105 != v70)
      {
        unint64_t v171 = 0;
        do
        {
          uint64_t v172 = *(void *)(v70 + 8 * v171);
          if (v172)
          {
            MEMORY[0x216698730](v172, 0x1060C408A10481FLL);
            uint64_t v70 = *v56;
            uint64_t v105 = v56[1];
          }
          ++v171;
        }
        while (v171 < (v105 - v70) >> 3);
      }
      std::vector<TItnRule *>::resize((uint64_t)v56, 0);
      __dst = 0;
      uint64_t v188 = 0;
      unint64_t v189 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__dst, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
      uint64_t v173 = v188;
      if ((unint64_t)v188 >= v189)
      {
        uint64_t v175 = (char *)__dst;
        uint64_t v176 = (v188 - (unsigned char *)__dst) >> 2;
        unint64_t v177 = v176 + 1;
        if ((unint64_t)(v176 + 1) >> 62) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v178 = v189 - (void)__dst;
        if ((uint64_t)(v189 - (void)__dst) >> 1 > v177) {
          unint64_t v177 = v178 >> 1;
        }
        if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v179 = v177;
        }
        if (v179)
        {
          uint64_t v180 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v189, v179);
          uint64_t v175 = (char *)__dst;
          uint64_t v173 = v188;
        }
        else
        {
          uint64_t v180 = 0;
        }
        char v181 = &v180[4 * v176];
        uint64_t v182 = &v180[4 * v179];
        *(_DWORD *)char v181 = 0;
        uint64_t v174 = v181 + 4;
        while (v173 != v175)
        {
          int v183 = *((_DWORD *)v173 - 1);
          v173 -= 4;
          *((_DWORD *)v181 - 1) = v183;
          v181 -= 4;
        }
        __dst = v181;
        uint64_t v188 = v174;
        unint64_t v189 = (unint64_t)v182;
        if (v175) {
          operator delete(v175);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v188 = 0;
        uint64_t v174 = v173 + 4;
      }
      uint64_t v188 = v174;
      if (a1[38] + 1 == (v174 - (unsigned char *)__dst) >> 2)
      {
        if (v174 != (char *)__dst + 4) {
          memmove(__dst, (char *)__dst + 4, v174 - ((unsigned char *)__dst + 4));
        }
        uint64_t v188 = v174 - 4;
      }
      operator new();
    }
    if (__p != v216)
    {
      unint64_t v59 = 0;
      do
      {
        LOBYTE(v224) = 0;
        std::vector<BOOL>::push_back((uint64_t)v204, &v224);
        char v60 = v202;
        if (v202 >= v203)
        {
          BOOL v62 = (char *)v201;
          uint64_t v63 = (v202 - (unsigned char *)v201) >> 3;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v65 = v203 - (unsigned char *)v201;
          if ((v203 - (unsigned char *)v201) >> 2 > v64) {
            unint64_t v64 = v65 >> 2;
          }
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v203, v66);
            char v60 = v202;
            BOOL v62 = (char *)v201;
          }
          else
          {
            uint64_t v67 = 0;
          }
          unint64_t v68 = &v67[8 * v63];
          *(void *)unint64_t v68 = 0;
          char v61 = v68 + 8;
          while (v60 != v62)
          {
            uint64_t v69 = *((void *)v60 - 1);
            v60 -= 8;
            *((void *)v68 - 1) = v69;
            v68 -= 8;
          }
          uint64_t v201 = v68;
          uint64_t v202 = v61;
          uint64_t v203 = &v67[8 * v66];
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *(void *)uint64_t v202 = 0;
          char v61 = v60 + 8;
        }
        uint64_t v202 = v61;
        ++v59;
      }
      while (v59 < ((unsigned char *)__p - (unsigned char *)v216) >> 4);
    }
  }
  TCompounder::makeResult((uint64_t)a1, v184, &v216, (uint64_t *)&v219, (uint64_t)&v213, v204, &v201);
  if (v201)
  {
    uint64_t v202 = (char *)v201;
    operator delete(v201);
  }
  if (v204[0]) {
    operator delete(v204[0]);
  }
  if (v208 && v205 != (unsigned int *)v207 && v205) {
    MEMORY[0x216698730]();
  }
  if (v212 && v209 != (__int32 *)v211 && v209) {
    MEMORY[0x216698730]();
  }
  if (v213)
  {
    uint64_t v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    long long __p = v216;
    operator delete(v216);
  }
  if (v219)
  {
    uint64_t v220 = v219;
    operator delete(v219);
  }
}

void sub_21402B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a51) {
    operator delete(a51);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a57) {
    operator delete(a57);
  }
  if (LOBYTE(STACK[0xD48]))
  {
    unint64_t v73 = STACK[0xC30];
    if (STACK[0xC30] != a12)
    {
      if (v73) {
        MEMORY[0x216698730](v73, 0x1000C4077774924);
      }
    }
  }
  if (a60) {
    operator delete(a60);
  }
  if (a63) {
    operator delete(a63);
  }
  if (a66) {
    operator delete(a66);
  }
  if (a69) {
    operator delete(a69);
  }
  if (a72) {
    operator delete(a72);
  }
  uint64_t v74 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v74;
    operator delete(v74);
  }
  uint64_t v75 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v75;
    operator delete(v75);
  }
  int64_t v76 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v76;
    operator delete(v76);
  }
  if (STACK[0x258]) {
    operator delete((void *)STACK[0x258]);
  }
  if (LOBYTE(STACK[0x688]))
  {
    unint64_t v77 = STACK[0x270];
    if (STACK[0x270] != a16)
    {
      if (v77) {
        MEMORY[0x216698730](v77, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xAA8]))
  {
    unint64_t v78 = STACK[0x690];
    if (STACK[0x690] != a17)
    {
      if (v78) {
        MEMORY[0x216698730](v78, 0x1000C4052888210);
      }
    }
  }
  unint64_t v79 = (void *)STACK[0xAB0];
  if (STACK[0xAB0])
  {
    STACK[0xAB8] = (unint64_t)v79;
    operator delete(v79);
  }
  uint64_t v80 = (void *)STACK[0xAC8];
  if (STACK[0xAC8])
  {
    STACK[0xAD0] = (unint64_t)v80;
    operator delete(v80);
  }
  unint64_t v81 = (void *)STACK[0xAE0];
  if (STACK[0xAE0])
  {
    STACK[0xAE8] = (unint64_t)v81;
    operator delete(v81);
  }
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    unint64_t v8 = *a1;
    int v9 = 0;
    int v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    BOOL v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_21402B664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    long long v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)p_end_cap, __n);
    unint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = (int *)&v6[4 * v8];
    begiuint64_t n = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    unint64_t v12 = v7;
    if (end != this->__begin_)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--unint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void TCompounder::applyInternal(void *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t *a5, void *a6, void **a7)
{
  unint64_t v10 = a3;
  char v72 = 0;
  unint64_t v73 = 0;
  uint64_t v74 = 0;
  unint64_t v13 = a4 - a3;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve((void **)&v72, a4 - a3);
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  unint64_t v71 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve((void **)&v69, v13);
  uint64_t v65 = (unsigned int *)v67;
  long long v66 = xmmword_214085190;
  char v68 = 1;
  char v61 = (unsigned int *)v63;
  long long v62 = xmmword_214085190;
  char v64 = 1;
  if (a4 > v10)
  {
    do
    {
      uint64_t v14 = (_OWORD *)(*a2 + 16 * v10);
      unint64_t v15 = v73;
      if (v73 >= v74)
      {
        uint64_t v17 = (v73 - v72) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v74 - v72;
        if ((v74 - v72) >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20) {
          unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v74, v20);
        }
        else {
          unint64_t v21 = 0;
        }
        unint64_t v22 = &v21[16 * v17];
        *(_OWORD *)unint64_t v22 = *v14;
        int v24 = v72;
        uint64_t v23 = v73;
        uint64_t v25 = v22;
        if (v73 != v72)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
            v25 -= 16;
            v23 -= 16;
          }
          while (v23 != v24);
          uint64_t v23 = v72;
        }
        char v16 = v22 + 16;
        char v72 = v25;
        unint64_t v73 = v22 + 16;
        uint64_t v74 = &v21[16 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v73 = *v14;
        char v16 = v15 + 16;
      }
      unint64_t v73 = v16;
      unint64_t v26 = (_OWORD *)(*a6 + 16 * v10);
      int64_t v27 = v70;
      if (v70 >= v71)
      {
        uint64_t v29 = (v70 - v69) >> 4;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v71 - v69;
        if ((v71 - v69) >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32) {
          uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v71, v32);
        }
        else {
          uint64_t v33 = 0;
        }
        uint64_t v34 = &v33[16 * v29];
        *(_OWORD *)uint64_t v34 = *v26;
        uint64_t v36 = v69;
        int v35 = v70;
        uint64_t v37 = v34;
        if (v70 != v69)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
            v37 -= 16;
            v35 -= 16;
          }
          while (v35 != v36);
          int v35 = v69;
        }
        unint64_t v28 = v34 + 16;
        uint64_t v69 = v37;
        uint64_t v70 = v34 + 16;
        unint64_t v71 = &v33[16 * v32];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v70 = *v26;
        unint64_t v28 = v27 + 16;
      }
      uint64_t v70 = v28;
      uint64_t v38 = *(void *)(*a2 + 16 * v10);
      if (v38)
      {
        if (a1[13]) {
          TWord::getTokenName(*(__int32 ***)(*a2 + 16 * v10), (uint64_t)&v65);
        }
        unint64_t v39 = (void *)a1[14];
        if (v39)
        {
          TWord::getCategoryTag(v38, &v61);
          unint64_t v39 = (void *)a1[14];
        }
        uint64_t v40 = (void *)a1[13];
        if (*((void *)&v66 + 1) >= (unint64_t)v66)
        {
          if (v68)
          {
            v75[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), v75, 1uLL);
            unint64_t v41 = v65;
            --*((void *)&v66 + 1);
          }
          else
          {
            unint64_t v41 = v65;
            if ((void)v66) {
              v65[(void)v66 - 1] = 0;
            }
          }
        }
        else
        {
          unint64_t v41 = v65;
          v65[*((void *)&v66 + 1)] = 0;
        }
        if (*((void *)&v62 + 1) >= (unint64_t)v62)
        {
          if (v64)
          {
            v75[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v61, *((unint64_t *)&v62 + 1), v75, 1uLL);
            uint64_t v42 = v61;
            --*((void *)&v62 + 1);
          }
          else
          {
            uint64_t v42 = v61;
            if ((void)v62) {
              v61[(void)v62 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v42 = v61;
          v61[*((void *)&v62 + 1)] = 0;
        }
        if (v40 && v41 && TRegExp::match(v40, v41, 0) || v39 && v42 && TRegExp::match(v39, v42, 0))
        {
          TCompounder::applyModelMBR(a1, (long long **)&v72, a5, &v69, a7);
          uint64_t v44 = *a5;
          uint64_t v43 = a5[1];
          if ((unint64_t)(v43 - *a5) >= 9)
          {
            unint64_t v45 = 0;
            uint64_t v46 = *(void *)(v43 - 8);
            do
            {
              uint64_t v47 = *(void *)(v44 + 8 * v45);
              if (v47)
              {
                MEMORY[0x216698730](v47, 0x1060C408A10481FLL);
                uint64_t v44 = *a5;
                uint64_t v43 = a5[1];
              }
              ++v45;
            }
            while (v45 < ((v43 - v44) >> 3) - 1);
            std::vector<TItnRule *>::resize((uint64_t)a5, 0);
            uint64_t v49 = (void *)a5[1];
            unint64_t v48 = a5[2];
            if ((unint64_t)v49 >= v48)
            {
              uint64_t v51 = ((uint64_t)v49 - *a5) >> 3;
              if ((unint64_t)(v51 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v52 = v48 - *a5;
              uint64_t v53 = v52 >> 2;
              if (v52 >> 2 <= (unint64_t)(v51 + 1)) {
                uint64_t v53 = v51 + 1;
              }
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v53;
              }
              if (v54) {
                unint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a5 + 2), v54);
              }
              else {
                unint64_t v55 = 0;
              }
              uint64_t v56 = &v55[8 * v51];
              *(void *)uint64_t v56 = v46;
              long long v50 = v56 + 8;
              uint64_t v58 = *a5;
              uint64_t v57 = (char *)a5[1];
              if (v57 != (char *)*a5)
              {
                do
                {
                  uint64_t v59 = *((void *)v57 - 1);
                  v57 -= 8;
                  *((void *)v56 - 1) = v59;
                  v56 -= 8;
                }
                while (v57 != (char *)v58);
                uint64_t v57 = (char *)*a5;
              }
              *a5 = (uint64_t)v56;
              a5[1] = (uint64_t)v50;
              a5[2] = (uint64_t)&v55[8 * v54];
              if (v57) {
                operator delete(v57);
              }
            }
            else
            {
              *uint64_t v49 = v46;
              long long v50 = v49 + 1;
            }
            a5[1] = (uint64_t)v50;
          }
          std::vector<std::pair<TWord const*,unsigned int>>::resize((uint64_t)&v72, 0);
          std::vector<std::pair<unsigned long,unsigned long>>::resize((uint64_t)&v69, 0);
        }
      }
      ++v10;
    }
    while (v10 != a4);
  }
  if (v72 != v73) {
    TCompounder::applyModelMBR(a1, (long long **)&v72, a5, &v69, a7);
  }
  if (v64 && v61 != (unsigned int *)v63 && v61) {
    MEMORY[0x216698730]();
  }
  if (v68 && v65 != (unsigned int *)v67 && v65) {
    MEMORY[0x216698730]();
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  if (v72)
  {
    unint64_t v73 = v72;
    operator delete(v72);
  }
}

void sub_21402BE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0x448]) && a15 != a10 && a15) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x868]))
  {
    unint64_t v17 = STACK[0x450];
    if (STACK[0x450] != a11)
    {
      if (v17) {
        MEMORY[0x216698730](v17, 0x1000C4052888210);
      }
    }
  }
  unint64_t v18 = *(void **)(v15 - 144);
  if (v18)
  {
    *(void *)(v15 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(v15 - 120);
  if (v19)
  {
    *(void *)(v15 - 112) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::pair<TWord const*,unsigned int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<std::pair<TWord const*,unsigned int>>::__append((void **)a1, a2 - v2);
  }
}

void TCompounder::apply(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4, uint64_t a5, void **a6)
{
  unint64_t v87 = 0;
  uint64_t v88 = 0;
  unint64_t v89 = 0;
  long long __p = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v87, (a2[1] - *a2) >> 3);
  std::vector<std::pair<TWord const*,unsigned int>>::reserve(&__p, (a2[1] - *a2) >> 3);
  uint64_t v81 = a1;
  uint64_t v82 = a5;
  uint64_t v83 = a6;
  uint64_t v12 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = a4;
    while (1)
    {
      uint64_t v16 = *(void *)(v12 + 8 * v13);
      if (v13 < a3 || v13 >= a4)
      {
        unint64_t v20 = v85;
        if (v85 >= v86)
        {
          uint64_t v22 = (v85 - (unsigned char *)__p) >> 4;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v86 - (unsigned char *)__p;
          if ((v86 - (unsigned char *)__p) >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v86, v25);
          }
          else {
            unint64_t v26 = 0;
          }
          int v35 = &v26[16 * v22];
          *(void *)int v35 = v16;
          *((_DWORD *)v35 + 2) = 0;
          uint64_t v37 = (char *)__p;
          uint64_t v36 = v85;
          uint64_t v38 = v35;
          if (v85 != __p)
          {
            do
            {
              *((_OWORD *)v38 - 1) = *((_OWORD *)v36 - 1);
              v38 -= 16;
              v36 -= 16;
            }
            while (v36 != v37);
            uint64_t v36 = (char *)__p;
          }
          unint64_t v21 = v35 + 16;
          long long __p = v38;
          uint64_t v85 = v35 + 16;
          uint64_t v86 = &v26[16 * v25];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *(void *)uint64_t v85 = v16;
          *((_DWORD *)v20 + 2) = 0;
          unint64_t v21 = v20 + 16;
        }
        uint64_t v85 = v21;
        unint64_t v39 = v88;
        if (v88 >= (void *)v89)
        {
          uint64_t v40 = ((char *)v88 - (unsigned char *)v87) >> 4;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 60) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = v89 - (unsigned char *)v87;
          if ((v89 - (unsigned char *)v87) >> 3 > v41) {
            unint64_t v41 = v42 >> 3;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43) {
            uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v89, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          unint64_t v45 = &v44[16 * v40];
          *(void *)unint64_t v45 = 0;
          *((void *)v45 + 1) = 0;
          uint64_t v47 = (char *)v87;
          uint64_t v46 = (char *)v88;
          unint64_t v48 = v45;
          if (v88 != v87)
          {
            do
            {
              *((_OWORD *)v48 - 1) = *((_OWORD *)v46 - 1);
              v48 -= 16;
              v46 -= 16;
            }
            while (v46 != v47);
LABEL_68:
            uint64_t v46 = (char *)v87;
          }
LABEL_69:
          uint64_t v53 = v45 + 16;
          unint64_t v87 = v48;
          uint64_t v88 = v45 + 16;
          unint64_t v89 = &v44[16 * v43];
          if (v46) {
            operator delete(v46);
          }
          goto LABEL_71;
        }
      }
      else
      {
        if ((*(unsigned char *)TWord::getOptionalTagBits(*(TWord **)(v12 + 8 * v13)) & 0x80) != 0)
        {
          uint64_t v27 = ((char *)v88 - (unsigned char *)v87) >> 4;
          if (v27 == a3)
          {
            ++v14;
          }
          else
          {
            uint64_t v33 = (char *)v87 + 16 * v27;
            uint64_t v34 = *((void *)v33 - 1) + 1;
            *((void *)v33 - 2) = *(void *)(*a2 + 8 * v13);
            *((void *)v33 - 1) = v34;
          }
          --v15;
          goto LABEL_72;
        }
        uint64_t v17 = *(void *)(*a2 + 8 * v13);
        unint64_t v18 = v85;
        if (v85 >= v86)
        {
          uint64_t v28 = (v85 - (unsigned char *)__p) >> 4;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v86 - (unsigned char *)__p;
          if ((v86 - (unsigned char *)__p) >> 3 > v29) {
            unint64_t v29 = v30 >> 3;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31) {
            unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v86, v31);
          }
          else {
            unint64_t v32 = 0;
          }
          uint64_t v49 = &v32[16 * v28];
          *(void *)uint64_t v49 = v17;
          *((_DWORD *)v49 + 2) = 0;
          uint64_t v51 = (char *)__p;
          long long v50 = v85;
          uint64_t v52 = v49;
          if (v85 != __p)
          {
            do
            {
              *((_OWORD *)v52 - 1) = *((_OWORD *)v50 - 1);
              v52 -= 16;
              v50 -= 16;
            }
            while (v50 != v51);
            long long v50 = (char *)__p;
          }
          uint64_t v19 = v49 + 16;
          long long __p = v52;
          uint64_t v85 = v49 + 16;
          uint64_t v86 = &v32[16 * v31];
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          *(void *)uint64_t v85 = v17;
          *((_DWORD *)v18 + 2) = 0;
          uint64_t v19 = v18 + 16;
        }
        uint64_t v85 = v19;
        unint64_t v39 = v88;
        if (v88 >= (void *)v89)
        {
          uint64_t v54 = ((char *)v88 - (unsigned char *)v87) >> 4;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v56 = v89 - (unsigned char *)v87;
          if ((v89 - (unsigned char *)v87) >> 3 > v55) {
            unint64_t v55 = v56 >> 3;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v55;
          }
          if (v43) {
            uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v89, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          unint64_t v45 = &v44[16 * v54];
          *(void *)unint64_t v45 = 0;
          *((void *)v45 + 1) = 0;
          uint64_t v57 = (char *)v87;
          uint64_t v46 = (char *)v88;
          unint64_t v48 = v45;
          if (v88 != v87)
          {
            do
            {
              *((_OWORD *)v48 - 1) = *((_OWORD *)v46 - 1);
              v48 -= 16;
              v46 -= 16;
            }
            while (v46 != v57);
            goto LABEL_68;
          }
          goto LABEL_69;
        }
      }
      uint64_t v53 = v39 + 2;
      void *v39 = 0;
      v39[1] = 0;
LABEL_71:
      uint64_t v88 = v53;
LABEL_72:
      ++v13;
      uint64_t v12 = *a2;
      if (v13 >= (a2[1] - *a2) >> 3) {
        goto LABEL_75;
      }
    }
  }
  uint64_t v14 = 0;
  unint64_t v15 = a4;
LABEL_75:
  TCompounder::apply(v81, &__p, a3, v15, v82, &v87, a6);
  uint64_t v58 = *a6;
  uint64_t v59 = a6[1];
  if (*a6 == v59)
  {
    if (v14)
    {
      unint64_t v71 = (unint64_t)a6[2];
      if ((unint64_t)v58 >= v71)
      {
        uint64_t v73 = v71 - (void)v58;
        uint64_t v74 = v73 >> 3;
        if ((unint64_t)(v73 >> 3) <= 1) {
          uint64_t v74 = 1;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v74;
        }
        int64_t v76 = std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)(a6 + 2), v75);
        unint64_t v78 = &v76[2 * v77];
        *int64_t v76 = 0;
        v76[1] = v14;
        char v72 = v76 + 2;
        uint64_t v80 = (char *)*v83;
        unint64_t v79 = (char *)v83[1];
        if (v79 != *v83)
        {
          do
          {
            *((_OWORD *)v76 - 1) = *((_OWORD *)v79 - 1);
            v76 -= 2;
            v79 -= 16;
          }
          while (v79 != v80);
          unint64_t v79 = (char *)*v83;
        }
        *uint64_t v83 = v76;
        v83[1] = v72;
        void v83[2] = v78;
        if (v79) {
          operator delete(v79);
        }
      }
      else
      {
        *uint64_t v58 = 0;
        v58[1] = v14;
        char v72 = v58 + 2;
      }
      v83[1] = v72;
    }
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v61 = (v59 - (unsigned char *)v58) >> 4;
    if (v61 <= 1) {
      unint64_t v61 = 1;
    }
    long long v62 = (char *)v87 + 8;
    do
    {
      uint64_t v63 = &v58[2 * v60];
      uint64_t v66 = v63[1];
      char v64 = v63 + 1;
      uint64_t v65 = v66;
      if (v66)
      {
        uint64_t v67 = 0;
        char v68 = &v62[16 * a3];
        uint64_t v69 = v65;
        do
        {
          uint64_t v70 = *(void *)v68;
          v68 += 16;
          v67 += v70;
          --v69;
        }
        while (v69);
        a3 += v65;
      }
      else
      {
        uint64_t v67 = 0;
      }
      *char v64 = v65 + v67;
      if (a3 >= v15) {
        break;
      }
      ++v60;
    }
    while (v60 != v61);
    v58[1] += v14;
  }
  if (__p)
  {
    uint64_t v85 = (char *)__p;
    operator delete(__p);
  }
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
}

void sub_21402C4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void TCompounder::apply(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, void *a6, void **a7)
{
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v13 = *(void *)(a1 + 360);
  uint64_t v14 = *(void *)(v13 + 136);
  *(void *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136) = a5;
  *(unsigned char *)(a1 + 56) = 0;
  TCompounder::applyInternal((void *)a1, a2, 0, a3, (uint64_t *)&v29, a6, a7);
  uint64_t v15 = *(void *)(a1 + 360);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 496));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(v15 + TParam::getValidConfig((TParam *)(v15 + 496), ActiveConfigHandle) + 648);
  std::vector<std::pair<unsigned long,unsigned long>>::resize((uint64_t)a7, 0);
  TCompounder::applyInternal((void *)a1, a2, a3, a4, (uint64_t *)&v29, a6, a7);
  uint64_t v17 = v29;
  unint64_t v18 = v30;
  if (v30 == v29)
  {
    uint64_t v17 = v30;
  }
  else
  {
    unint64_t v19 = 0;
    do
    {
      if (v17[v19])
      {
        MEMORY[0x216698730](v17[v19], 0x1060C408A10481FLL);
        uint64_t v17 = v29;
        unint64_t v18 = v30;
      }
      ++v19;
    }
    while (v19 < (v18 - (unsigned char *)v17) >> 3);
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v20 = *(void *)(a1 + 360);
    unint64_t v21 = (unsigned int *)(v20 + 512);
    if (*(char *)(v20 + 535) < 0) {
      unint64_t v21 = *(unsigned int **)v21;
    }
    loggableUnicode(v21, __p);
    if (v28 >= 0) {
      unint64_t v26 = __p;
    }
    else {
      unint64_t v26 = (void **)__p[0];
    }
    tknPrintf("%s: UTT_BOUNDARY\n", v22, v23, v24, v25, v26);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = v29;
  }
  *(void *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136) = v14;
  if (v17)
  {
    uint64_t v30 = v17;
    operator delete(v17);
  }
}

void sub_21402C690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  *(void *)(v18 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136) = v19;
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void TCompounder::apply(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(a1 + 360) + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136) = a4;
  if (*(void *)(a3[32] + 8) != *(void *)(*(void *)(a1 + 16) + 8))
  {
    tknPrintf("Error: The lattice lexicon handle does not match the lattice processor's lexicon handle.\n", (uint64_t)a2, (uint64_t)a3, a4, a5);
    std::string::basic_string[abi:ne180100]<0>(v166, &byte_2140B33BB);
    *(void *)uint64_t v155 = byte_26C4DF190;
    if (SHIBYTE(v167) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v155[8], (const std::string::value_type *)v166[0], (std::string::size_type)v166[1]);
    }
    else
    {
      *(_OWORD *)&v155[8] = *(_OWORD *)v166;
      uint64_t v156 = v167;
    }
    *(void *)uint64_t v155 = &unk_26C4E0710;
    if (v156 >= 0) {
      uint64_t v141 = &v155[8];
    }
    else {
      uint64_t v141 = *(const char **)&v155[8];
    }
    conditionalAssert(v141, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/compounder/compounder.cpp", 2091, v139, v140);
    *(void *)uint64_t v155 = byte_26C4DF190;
    if (SHIBYTE(v156) < 0) {
      operator delete(*(void **)&v155[8]);
    }
    if (SHIBYTE(v167) < 0) {
      operator delete(v166[0]);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v155, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v143 = (std::string *)(exception + 1);
    if ((v155[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v143, *(const std::string::value_type **)v155, *(std::string::size_type *)&v155[8]);
    }
    else
    {
      long long v144 = *(_OWORD *)v155;
      exception[3] = *(void *)&v155[16];
      *(_OWORD *)&v143->__r_.__value_.__l.__data_ = v144;
    }
    void *exception = &unk_26C4E0710;
  }
  int64_t v5 = a3;
  uint64_t v7 = a3[15];
  uint64_t v154 = a3[8];
  uint64_t v180 = 0;
  char v181 = 0;
  v182[0] = 0;
  uint64_t v8 = *a2;
  if (a2[1] == *a2)
  {
    uint64_t v145 = 0;
    uint64_t v147 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t Word = TLexicon::findWord(*(void **)(a1 + 16), *(__int32 **)(v8 + 8 * v9));
      if (!Word) {
        uint64_t Word = TLexicon::addTempWord(*(void *)(a1 + 16), *(int **)(*a2 + 8 * v9), 0, 0, 0);
      }
      uint64_t v11 = v181;
      if ((unint64_t)v181 >= v182[0])
      {
        uint64_t v13 = ((char *)v181 - (char *)v180) >> 4;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v182[0] - (void)v180;
        if ((uint64_t)(v182[0] - (void)v180) >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)v182, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[16 * v13];
        *(void *)uint64_t v18 = Word;
        *((_DWORD *)v18 + 2) = 0;
        uint64_t v20 = v180;
        uint64_t v19 = v181;
        unint64_t v21 = v18;
        if (v181 != v180)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
            v21 -= 16;
            v19 -= 2;
          }
          while (v19 != v20);
          uint64_t v19 = v180;
        }
        uint64_t v12 = (uint64_t *)(v18 + 16);
        uint64_t v180 = (uint64_t *)v21;
        char v181 = v12;
        v182[0] = &v17[16 * v16];
        if (v19)
        {
          uint64_t v22 = v12;
          operator delete(v19);
          uint64_t v12 = v22;
        }
      }
      else
      {
        *char v181 = Word;
        *((_DWORD *)v11 + 2) = 0;
        uint64_t v12 = v11 + 2;
      }
      char v181 = v12;
      ++v9;
      uint64_t v8 = *a2;
    }
    while (v9 < (a2[1] - *a2) >> 3);
    uint64_t v147 = v12;
    uint64_t v145 = v180;
    int64_t v5 = a3;
  }
  unint64_t v177 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  TFsa::topologicalSort(v5 + 3, &v177);
  uint64_t v24 = v177;
  uint64_t v23 = v178;
  uint64_t v27 = v5 + 16;
  uint64_t v26 = v5[16];
  uint64_t v25 = v27[1];
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  uint64_t v176 = 0;
  std::vector<unsigned long>::vector(&v173, ((v178 - v177) >> 3) + 1);
  std::vector<TCompoundPath>::vector(&v172, (v23 - v24) >> 3);
  unint64_t v148 = (v23 - v24) >> 3;
  std::vector<unsigned long>::vector(&v171, v148);
  std::vector<std::pair<std::pair<TWord const*,unsigned int>,BOOL>>::vector(&v170, (v25 - v26) >> 3);
  memset(&v169[3], 0, 24);
  *(void *)uint64_t v155 = -1;
  std::vector<unsigned long>::vector(v169, v148, v155);
  unint64_t v168 = 0;
  TAllocator::TAllocator((TAllocator *)v166, 2048);
  uint64_t v153 = v7 + 1;
  if (v23 != v24)
  {
    uint64_t v28 = 0;
    uint64_t v29 = (v23 - v24) >> 3;
    if (v148 <= 1) {
      uint64_t v29 = 1;
    }
    uint64_t v149 = v29;
    while (1)
    {
      uint64_t v30 = *(void **)&v177[8 * v28];
      *(void *)(v171 + 8 * *v3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v28;
      *(void *)(v173 + 8 * v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v175 - v174;
      uint64_t v31 = v30[2];
      uint64_t v151 = v28;
      if (v31) {
        break;
      }
LABEL_99:
      if (++v28 == v149) {
        goto LABEL_100;
      }
    }
    while (1)
    {
      unint64_t v32 = *(void **)v31;
      if (**(void **)v31 == 2)
      {
        uint64_t v34 = (__int32 *)v32[1];
        uint64_t v33 = (TWord *)TLexicon::findWord(*(void **)(a1 + 16), v34);
        if (!v33) {
          uint64_t v33 = (TWord *)TLexicon::addTempWord(*(void *)(a1 + 16), v34, 0, 0, 0);
        }
        if ((v32[2] & 1) == 0)
        {
          int v35 = *(unsigned __int8 *)TWord::getOptionalTagBits(v33) >> 7;
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      int v35 = 0;
LABEL_37:
      uint64_t v36 = *(void *)(v171 + 8 * **(void **)(v31 + 24));
      uint64_t v37 = *(void *)(v31 + 8);
      uint64_t v38 = v172;
      uint64_t v39 = *(void *)(v172 + 24 * v36 + 16);
      if (v39 == -1) {
        uint64_t v39 = 0;
      }
      unint64_t v40 = v39 + v32[5];
      int v41 = *((_DWORD *)v32 + 4);
      uint64_t v42 = v170 + 24 * v37;
      *(void *)uint64_t v42 = v33;
      *(_DWORD *)(v42 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v41;
      *(unsigned char *)(v42 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v35;
      uint64_t v43 = v38 + 24 * v28;
      unint64_t v45 = *(void *)(v43 + 16);
      uint64_t v44 = (unint64_t *)(v43 + 16);
      if (v40 < v45)
      {
        uint64_t v46 = (void *)(v38 + 24 * v28);
        *uint64_t v46 = v36;
        v46[1] = v37;
        *uint64_t v44 = v40;
      }
      uint64_t v47 = (unint64_t *)(v173 + 8 * v36);
      unint64_t v48 = *v47;
      unint64_t v49 = v47[1];
      BOOL v50 = *v47 == v49;
      if (*v47 < v49)
      {
        do
        {
          uint64_t v51 = v174[v48];
          if (*(unsigned char *)(v51 + 16))
          {
            uint64_t v52 = TAllocator::allocate((TAllocator *)v166, 24);
            *(unsigned char *)(v52 + 17) = 0;
            *(void *)uint64_t v52 = v51;
            *(void *)(v52 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v37;
            *(unsigned char *)(v52 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v35;
            uint64_t v53 = v175;
            if (v175 >= (uint64_t *)v176)
            {
              uint64_t v54 = v175 - v174;
              if ((unint64_t)(v54 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v55 = (v176 - (char *)v174) >> 2;
              if (v55 <= v54 + 1) {
                unint64_t v55 = v54 + 1;
              }
              if ((unint64_t)(v176 - (char *)v174) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v55;
              }
              if (v56) {
                uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v176, v56);
              }
              else {
                uint64_t v57 = 0;
              }
              uint64_t v59 = (uint64_t *)&v57[8 * v54];
              *uint64_t v59 = v52;
              uint64_t v58 = v59 + 1;
              unint64_t v61 = v174;
              uint64_t v60 = v175;
              if (v175 != v174)
              {
                do
                {
                  uint64_t v62 = *--v60;
                  *--uint64_t v59 = v62;
                }
                while (v60 != v61);
                goto LABEL_73;
              }
              goto LABEL_74;
            }
          }
          else
          {
            if (!v35)
            {
              if (v153 != v154 && !*(unsigned char *)(v51 + 17)) {
                createTransitionForProduction((uint64_t)a3, v174[v48], (uint64_t)&v170, (uint64_t *)v169, &v168);
              }
              BOOL v50 = 1;
              goto LABEL_77;
            }
            uint64_t v52 = TAllocator::allocate((TAllocator *)v166, 24);
            *(void *)uint64_t v52 = v51;
            *(void *)(v52 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v37;
            *(_WORD *)(v52 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
            uint64_t v53 = v175;
            if (v175 >= (uint64_t *)v176)
            {
              uint64_t v63 = v175 - v174;
              if ((unint64_t)(v63 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v64 = (v176 - (char *)v174) >> 2;
              if (v64 <= v63 + 1) {
                unint64_t v64 = v63 + 1;
              }
              if ((unint64_t)(v176 - (char *)v174) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v64;
              }
              if (v56) {
                uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v176, v56);
              }
              else {
                uint64_t v57 = 0;
              }
              uint64_t v59 = (uint64_t *)&v57[8 * v63];
              *uint64_t v59 = v52;
              uint64_t v58 = v59 + 1;
              uint64_t v65 = v174;
              uint64_t v60 = v175;
              if (v175 != v174)
              {
                do
                {
                  uint64_t v66 = *--v60;
                  *--uint64_t v59 = v66;
                }
                while (v60 != v65);
LABEL_73:
                uint64_t v60 = v174;
              }
LABEL_74:
              uint64_t v174 = v59;
              uint64_t v175 = v58;
              uint64_t v176 = &v57[8 * v56];
              if (v60) {
                operator delete(v60);
              }
              goto LABEL_76;
            }
          }
          *uint64_t v53 = v52;
          uint64_t v58 = v53 + 1;
LABEL_76:
          uint64_t v175 = v58;
LABEL_77:
          ++v48;
        }
        while (v48 != v49);
      }
      if (v50)
      {
        uint64_t v67 = TAllocator::allocate((TAllocator *)v166, 24);
        uint64_t v68 = v67;
        *(unsigned char *)(v67 + 17) = 0;
        *(void *)uint64_t v67 = 0;
        *(void *)(v67 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v37;
        *(unsigned char *)(v67 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v35;
        uint64_t v69 = v175;
        if (v175 >= (uint64_t *)v176)
        {
          uint64_t v71 = v175 - v174;
          if ((unint64_t)(v71 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v72 = (v176 - (char *)v174) >> 2;
          if (v72 <= v71 + 1) {
            unint64_t v72 = v71 + 1;
          }
          if ((unint64_t)(v176 - (char *)v174) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v72;
          }
          if (v73) {
            uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v176, v73);
          }
          else {
            uint64_t v74 = 0;
          }
          unint64_t v75 = (uint64_t *)&v74[8 * v71];
          *unint64_t v75 = v68;
          uint64_t v70 = v75 + 1;
          uint64_t v77 = v174;
          int64_t v76 = v175;
          if (v175 != v174)
          {
            do
            {
              uint64_t v78 = *--v76;
              *--unint64_t v75 = v78;
            }
            while (v76 != v77);
            int64_t v76 = v174;
          }
          uint64_t v174 = v75;
          uint64_t v175 = v70;
          uint64_t v176 = &v74[8 * v73];
          if (v76) {
            operator delete(v76);
          }
        }
        else
        {
          *uint64_t v175 = v67;
          uint64_t v70 = v69 + 1;
        }
        uint64_t v175 = v70;
      }
      uint64_t v31 = *(void *)(v31 + 32);
      uint64_t v28 = v151;
      if (!v31) {
        goto LABEL_99;
      }
    }
  }
LABEL_100:
  *(void *)(v173 + 8 * v14DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v175 - v174;
  uint64_t v80 = (void *)a3[25];
  unint64_t v79 = (void *)a3[26];
  if (v80 == v79)
  {
    uint64_t v81 = v147;
  }
  else
  {
    uint64_t v81 = v147;
    while (!*v80)
    {
      if (++v80 == v79) {
        goto LABEL_149;
      }
    }
  }
  if (v80 == v79)
  {
LABEL_149:
    BOOL v163 = 0;
    uint64_t v164 = 0;
    uint64_t v165 = 0;
  }
  else
  {
    unint64_t v82 = -1;
    uint64_t v83 = -1;
    do
    {
      uint64_t v84 = *(void *)(v171 + 8 * *(void *)*v80);
      if (*(void *)(v172 + 24 * v84 + 16) < v82)
      {
        uint64_t v83 = *(void *)(v171 + 8 * *(void *)*v80);
        unint64_t v82 = *(void *)(v172 + 24 * v84 + 16);
      }
      if (v153 != v154)
      {
        uint64_t v85 = (unint64_t *)(v173 + 8 * v84);
        unint64_t v86 = *v85;
        unint64_t v87 = v85[1];
        if (*v85 < v87)
        {
          do
          {
            uint64_t v88 = v174[v86];
            if (!*(unsigned char *)(v88 + 17) && !*(unsigned char *)(v88 + 16)) {
              createTransitionForProduction((uint64_t)a3, v88, (uint64_t)&v170, (uint64_t *)v169, &v168);
            }
            ++v86;
          }
          while (v86 != v87);
        }
      }
      unint64_t v89 = v80 + 1;
      while (v89 != v79)
      {
        if (*v89++)
        {
          uint64_t v80 = v89 - 1;
          goto LABEL_121;
        }
      }
      uint64_t v80 = (void *)a3[26];
LABEL_121:
      ;
    }
    while (v80 != (void *)a3[26]);
    BOOL v163 = 0;
    uint64_t v164 = 0;
    uint64_t v165 = 0;
    if (v83 != -1)
    {
      uint64_t v91 = v172;
      if (*(void *)(v172 + 24 * v83) != -1)
      {
        uint64_t v92 = 0;
        do
        {
          uint64_t v93 = (void *)(v91 + 24 * v83 + 8);
          if (v92 >= v165)
          {
            char v94 = (char *)v163;
            uint64_t v95 = (v92 - (unsigned char *)v163) >> 3;
            unint64_t v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v97 = v165 - (unsigned char *)v163;
            if ((v165 - (unsigned char *)v163) >> 2 > v96) {
              unint64_t v96 = v97 >> 2;
            }
            if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v98 = v96;
            }
            if (v98)
            {
              unint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v165, v98);
              char v94 = (char *)v163;
              uint64_t v92 = v164;
            }
            else
            {
              unint64_t v99 = 0;
            }
            long long v100 = &v99[8 * v95];
            *(void *)long long v100 = *v93;
            uint64_t v101 = v100 + 8;
            while (v92 != v94)
            {
              uint64_t v102 = *((void *)v92 - 1);
              v92 -= 8;
              *((void *)v100 - 1) = v102;
              v100 -= 8;
            }
            BOOL v163 = v100;
            uint64_t v164 = v101;
            uint64_t v165 = &v99[8 * v98];
            if (v94) {
              operator delete(v94);
            }
            uint64_t v92 = v101;
          }
          else
          {
            *(void *)uint64_t v92 = *v93;
            v92 += 8;
          }
          uint64_t v164 = v92;
          uint64_t v91 = v172;
          uint64_t v83 = *(void *)(v172 + 24 * v83);
        }
        while (*(void *)(v172 + 24 * v83) != -1);
        if (v163 != v92)
        {
          uint64_t v103 = v92 - 8;
          if (v92 - 8 > v163)
          {
            long long v104 = (char *)v163 + 8;
            do
            {
              uint64_t v105 = *((void *)v104 - 1);
              *((void *)v104 - 1) = *(void *)v103;
              *(void *)uint64_t v103 = v105;
              v103 -= 8;
              BOOL v106 = v104 >= v103;
              v104 += 8;
            }
            while (!v106);
          }
        }
      }
    }
    uint64_t v81 = v147;
  }
  unint64_t v107 = ((char *)v81 - (char *)v145) >> 4;
  *(void *)uint64_t v155 = 0;
  *(void *)&v155[8] = 0;
  std::vector<std::pair<TWord const*,unsigned long>>::vector(&v160, v107, v155);
  unint64_t v109 = (char *)v163;
  char v108 = v164;
  if (v164 != v163)
  {
    unint64_t v110 = 0;
    do
    {
      uint64_t v111 = v170 + 24 * *(void *)&v109[8 * v110];
      if (*(unsigned char *)(v111 + 16))
      {
        unint64_t v112 = (v161 - (unsigned char *)v160) >> 4;
        if (v112 > v107)
        {
          uint64_t v113 = (char *)v160 + 16 * v112;
          uint64_t v114 = *((void *)v113 - 1) + 1;
          *((void *)v113 - 2) = *(void *)v111;
          *((void *)v113 - 1) = v114;
        }
      }
      else
      {
        unint64_t v115 = v181;
        if ((unint64_t)v181 >= v182[0])
        {
          uint64_t v117 = ((char *)v181 - (char *)v180) >> 4;
          unint64_t v118 = v117 + 1;
          if ((unint64_t)(v117 + 1) >> 60) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v119 = v182[0] - (void)v180;
          if ((uint64_t)(v182[0] - (void)v180) >> 3 > v118) {
            unint64_t v118 = v119 >> 3;
          }
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v120 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v120 = v118;
          }
          if (v120) {
            long long v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)v182, v120);
          }
          else {
            long long v121 = 0;
          }
          char v122 = &v121[16 * v117];
          *(_OWORD *)char v122 = *(_OWORD *)v111;
          uint64_t v124 = v180;
          uint64_t v123 = v181;
          uint64_t v125 = (uint64_t *)v122;
          if (v181 != v180)
          {
            do
            {
              *((_OWORD *)v125 - 1) = *((_OWORD *)v123 - 1);
              v125 -= 2;
              v123 -= 2;
            }
            while (v123 != v124);
            uint64_t v123 = v180;
          }
          uint64_t v116 = (uint64_t *)(v122 + 16);
          uint64_t v180 = v125;
          char v181 = (uint64_t *)(v122 + 16);
          v182[0] = &v121[16 * v120];
          if (v123) {
            operator delete(v123);
          }
        }
        else
        {
          *(_OWORD *)char v181 = *(_OWORD *)v111;
          uint64_t v116 = v115 + 2;
        }
        char v181 = v116;
        uint64_t v126 = v161;
        if (v161 >= v162)
        {
          uint64_t v128 = (v161 - (unsigned char *)v160) >> 4;
          unint64_t v129 = v128 + 1;
          if ((unint64_t)(v128 + 1) >> 60) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v130 = v162 - (unsigned char *)v160;
          if ((v162 - (unsigned char *)v160) >> 3 > v129) {
            unint64_t v129 = v130 >> 3;
          }
          if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v131 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v131 = v129;
          }
          if (v131) {
            uint64_t v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v162, v131);
          }
          else {
            uint64_t v132 = 0;
          }
          uint64_t v133 = &v132[16 * v128];
          *(void *)uint64_t v133 = 0;
          *((void *)v133 + 1) = 0;
          uint64_t v135 = (char *)v160;
          char v134 = v161;
          uint64_t v136 = v133;
          if (v161 != v160)
          {
            do
            {
              *((_OWORD *)v136 - 1) = *((_OWORD *)v134 - 1);
              v136 -= 16;
              v134 -= 16;
            }
            while (v134 != v135);
            char v134 = (char *)v160;
          }
          uint64_t v127 = v133 + 16;
          uint64_t v160 = v136;
          uint64_t v161 = v133 + 16;
          uint64_t v162 = &v132[16 * v131];
          if (v134) {
            operator delete(v134);
          }
        }
        else
        {
          uint64_t v127 = v161 + 16;
          *(void *)uint64_t v161 = 0;
          *((void *)v126 + 1) = 0;
        }
        uint64_t v161 = v127;
        unint64_t v109 = (char *)v163;
        char v108 = v164;
      }
      ++v110;
    }
    while (v110 < (v108 - v109) >> 3);
  }
  uint64_t v157 = 0;
  BOOL v158 = 0;
  uint64_t v159 = 0;
  TCompounder::apply(a1, &v180, v107, ((char *)v181 - (char *)v180) >> 4, a4, &v160, &v157);
  if (v158 == v157)
  {
    uint64_t v137 = v168;
    if (v168 <= 1) {
      uint64_t v137 = 1;
    }
  }
  else
  {
    if (v153 != v154 && (v158 - (unsigned char *)v157) >> 4 >= (((char *)v181 - (char *)v180) >> 4) - v107) {
LABEL_204:
    }
      operator new();
    if (v164 != v163) {
      operator new();
    }
    if (v153 == v154) {
      unint64_t v138 = v168 + 1;
    }
    else {
      unint64_t v138 = v168 - 1;
    }
    uint64_t v137 = v138 + ((v158 - (unsigned char *)v157) >> 4);
  }
  unint64_t v168 = v137;
  goto LABEL_204;
}

void sub_21402DAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      *(void *)(a13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136) = a12;
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

void createTransitionForProduction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  int64_t v5 = a4;
  *(unsigned char *)(a2 + 17) = 1;
  unint64_t v6 = *(void **)a2;
  uint64_t v7 = *(uint64_t **)(*(void *)(a1 + 128) + 8 * *(void *)(a2 + 8));
  uint64_t v8 = *(void *)v7[3];
  uint64_t v21 = *(void *)v7[2];
  uint64_t v9 = *v7;
  uint64_t v10 = *(void *)(v9 + 40);
  long long v11 = *(_OWORD *)(v9 + 64);
  v22[0] = *(_OWORD *)(v9 + 48);
  v22[1] = v11;
  long long v12 = *(_OWORD *)(v9 + 128);
  long long v13 = *(_OWORD *)(v9 + 80);
  long long v14 = *(_OWORD *)(v9 + 96);
  v22[4] = *(_OWORD *)(v9 + 112);
  v22[5] = v12;
  _OWORD v22[2] = v13;
  v22[3] = v14;
  if (v6)
  {
    uint64_t v19 = a5;
    do
    {
      unint64_t v16 = *(void ***)(*(void *)(a1 + 128) + 8 * v6[1]);
      uint64_t v8 = *v16[3];
      uint64_t v17 = (*v16)[5];
      if (*(unsigned char *)(a1 + 248)) {
        TLatticeProcessor::combineMrecData((uint64_t)v22, (uint64_t)(*v16 + 6), 0);
      }
      v10 += v17;
      unint64_t v6 = (void *)*v6;
    }
    while (v6);
    a5 = v19;
    int64_t v5 = a4;
  }
  uint64_t v18 = *v5;
  if (*(void *)(*v5 + 8 * v8) == -1) {
    *(void *)(v18 + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = (*a5)++;
  }
  if (*(void *)(v18 + 8 * v21) == -1) {
    *(void *)(v18 + 8 * v21) = (*a5)++;
  }
  operator new();
}

uint64_t TCompounder::takesFugenS(uint64_t a1, __int32 *a2, _DWORD *a3)
{
  if (*a3 != 83 || a3[8] == 50 || a3[7] == 71) {
    return 0;
  }
  size_t v8 = wcslen(a2);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  if ((v30 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v30 & 0x80u) == 0) {
    unint64_t v10 = v30;
  }
  else {
    unint64_t v10 = (unint64_t)__p[1];
  }
  long long v11 = (char *)v9 + 4 * v10 - 4;
  if (v10) {
    BOOL v12 = v11 > (char *)v9;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    long long v13 = (char *)v9 + 4;
    do
    {
      int v14 = *((_DWORD *)v13 - 1);
      *((_DWORD *)v13 - 1) = *(_DWORD *)v11;
      *(_DWORD *)long long v11 = v14;
      v11 -= 4;
      BOOL v15 = v13 >= v11;
      v13 += 4;
    }
    while (!v15);
  }
  if (v8 < 4 || wcschr(dword_2140AABB0, a2[v8 - 1]) || !wcscmp(a2, dword_2140AABC0) || !wcscmp(a2, dword_2140AABDC)) {
    goto LABEL_22;
  }
  unint64_t v16 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncasecmp(v16, dword_2140AABFC, 2uLL)) {
    goto LABEL_22;
  }
  uint64_t v17 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncasecmp(v17, dword_2140AAC08, 3uLL)) {
    goto LABEL_22;
  }
  uint64_t v18 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncmp(v18, dword_2140AAC18, 3uLL)) {
    goto LABEL_22;
  }
  uint64_t v19 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncmp(v19, dword_2140AAC28, 3uLL)) {
    goto LABEL_22;
  }
  uint64_t v20 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
  if (!wcsncmp(v20, dword_2140AAC38, 3uLL)) {
    goto LABEL_22;
  }
  if (*(void *)(a1 + 320))
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    do
    {
      uint64_t v23 = (v30 & 0x80u) == 0 ? (const __int32 *)__p : (const __int32 *)__p[0];
      uint64_t v24 = *(void *)(a1 + 328) + v21;
      if (*(char *)(v24 + 23) < 0)
      {
        uint64_t v26 = *(const __int32 **)v24;
        size_t v25 = *(void *)(v24 + 8);
      }
      else
      {
        size_t v25 = *(unsigned __int8 *)(v24 + 23);
        uint64_t v26 = (const __int32 *)(*(void *)(a1 + 328) + v21);
      }
      if (!wcsncmp(v23, v26, v25)) {
        goto LABEL_66;
      }
      ++v22;
      v21 += 24;
    }
    while (v22 < *(void *)(a1 + 320));
  }
  if (v8 < 5) {
    goto LABEL_22;
  }
  if (wcsncasecmp(a2, dword_2140AAC48, 2uLL)) {
    goto LABEL_22;
  }
  int v27 = a3[7];
  if (v27 != 66 && (v27 != 76 || a3[4] != 70)) {
    goto LABEL_22;
  }
  uint64_t v28 = __p;
  if ((v30 & 0x80u) != 0) {
    uint64_t v28 = (void **)__p[0];
  }
  if (*(_DWORD *)v28 == 101 || wcschr(dword_2140AAC54, a2[2]))
  {
LABEL_22:
    uint64_t v4 = 0;
    goto LABEL_23;
  }
LABEL_66:
  uint64_t v4 = 1;
LABEL_23:
  if ((char)v30 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_21402E20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCompounder::getParamManager(TCompounder *this)
{
  return *((void *)this + 45);
}

uint64_t TCompounder::getType(TCompounder *this)
{
  return 1;
}

void TCompounderParamManager::~TCompounderParamManager(void **this)
{
  TCompounderParamManager::~TCompounderParamManager(this);

  JUMPOUT(0x216698730);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *this = &unk_26C4E3530;
  TParam::~TParam(this + 186);
  unint64_t v2 = 0;
  this[155] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v2 + 185]) < 0) {
      operator delete(this[v2 + 183]);
    }
    v2 -= 3;
  }
  while (v2 != -6);
  TParam::~TParam(this + 155);
  uint64_t v3 = 0;
  this[124] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v3 + 154]) < 0) {
      operator delete(this[v3 + 152]);
    }
    v3 -= 3;
  }
  while (v3 != -6);
  TParam::~TParam(this + 124);
  uint64_t v4 = 0;
  this[93] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v4 + 123]) < 0) {
      operator delete(this[v4 + 121]);
    }
    v4 -= 3;
  }
  while (v4 != -6);
  TParam::~TParam(this + 93);
  int64_t v5 = 0;
  this[62] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v5 + 92]) < 0) {
      operator delete(this[v5 + 90]);
    }
    v5 -= 3;
  }
  while (v5 != -6);
  TParam::~TParam(this + 62);
  *this = &unk_26C4E3090;
  TParam::~TParam(this + 18);

  TParamManager::~TParamManager((TParamManager *)this);
}

uint64_t TMbrEntry::TMbrEntry(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(void *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(double *)a1 = a3;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0xC12E848000000000;
  if (a1 + 32 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 32), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  *(int64x2_t *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = vdupq_n_s64(0xC12E848000000000);
  return a1;
}

void sub_21402E2E8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCRFModel::TCRFModel(uint64_t a1, int a2, int a3, double a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
  *(double *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a3;
  *(_DWORD *)(a1 + 44) = a2;
  MEMORY[0x216698480]();
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_21402E344(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    BOOL v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  BOOL v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  uint64_t *v12 = &v9[v17];
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
  *(void *)(a4 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (int i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v5;
  *(void *)(a4 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21402E6D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, 4 * v15);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  uint64_t *v12 = &v9[v17];
  return result;
}

void *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::find<std::vector<int>>(uint64_t a1, int **a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t result = std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__lower_bound<std::vector<int>>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 != result)
  {
    uint64_t v6 = result[4];
    uint64_t v5 = result[5];
    if (v6 == v5) {
      return result;
    }
    uint64_t v7 = *a2;
    uint64_t v8 = v6 + 4;
    while (v7 != a2[1])
    {
      int v9 = *v7;
      int v10 = *(_DWORD *)(v8 - 4);
      if (*v7 < v10) {
        break;
      }
      ++v7;
      BOOL v11 = v10 < v9 || v8 == v5;
      v8 += 4;
      if (v11) {
        return result;
      }
    }
  }
  return v3;
}

void *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__lower_bound<std::vector<int>>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    uint64_t v5 = a2[1];
    do
    {
      if (*a2 == v5)
      {
LABEL_12:
        uint64_t result = a3;
      }
      else
      {
        uint64_t v6 = (int *)a3[4];
        uint64_t v7 = *a2 + 4;
        while (v6 != (int *)a3[5])
        {
          int v8 = *v6;
          int v9 = *(_DWORD *)(v7 - 4);
          if (*v6 < v9) {
            break;
          }
          ++v6;
          BOOL v10 = v9 < v8 || v7 == v5;
          v7 += 4;
          if (v10) {
            goto LABEL_12;
          }
        }
        ++a3;
      }
      a3 = (void *)*a3;
    }
    while (a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t **a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__find_equal<std::vector<int>>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__find_equal<std::vector<int>>(uint64_t a1, void *a2, int **a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = a3[1];
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        int v8 = (int *)v4[4];
        uint64_t v9 = (int *)v7[5];
        if (v8 != v9) {
          break;
        }
LABEL_12:
        if (*a3 != v6)
        {
          uint64_t v15 = (uint64_t)(*a3 + 1);
          while (v8 != v9)
          {
            int v16 = *v8;
            int v17 = *(_DWORD *)(v15 - 4);
            if (*v8 < v17) {
              break;
            }
            ++v8;
            BOOL v18 = v17 < v16 || v15 == (void)v6;
            v15 += 4;
            if (v18) {
              goto LABEL_27;
            }
          }
          uint64_t result = v7 + 1;
          unint64_t v4 = (void *)v7[1];
          if (v4) {
            continue;
          }
        }
        goto LABEL_27;
      }
      BOOL v10 = v8 + 1;
      BOOL v11 = *a3;
      while (v11 != v6)
      {
        int v12 = *v11;
        int v13 = *(v10 - 1);
        if (*v11 < v13) {
          break;
        }
        ++v11;
        if (v13 < v12 || v10++ == v9) {
          goto LABEL_12;
        }
      }
      unint64_t v4 = (void *)*v7;
      uint64_t result = v7;
    }
    while (*v7);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_27:
  *a2 = v7;
  return result;
}

void *std::__tree<std::__value_type<std::vector<int> const,double>,std::__map_value_compare<std::vector<int> const,std::__value_type<std::vector<int> const,double>,std::less<std::vector<int> const>,true>,std::allocator<std::__value_type<std::vector<int> const,double>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
  uint64_t v7 = *a2;
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6 + 4, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 2);
  v6[7] = 0;
  *(unsigned char *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 1;
  return result;
}

void sub_21402EB18(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<int> const,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<int> const,double>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::vector<std::pair<TWord const*,unsigned int>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(_DWORD **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = &v7[4 * a2];
      do
      {
        *(void *)uint64_t v7 = 0;
        v7[2] = 0;
        v7 += 4;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v15 = &v13[16 * v10];
    int v16 = &v15[16 * a2];
    int v17 = v15;
    do
    {
      *(void *)int v17 = 0;
      *((_DWORD *)v17 + 2) = 0;
      v17 += 16;
    }
    while (v17 != v16);
    BOOL v18 = &v13[16 * v12];
    uint64_t v20 = (char *)*a1;
    int v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      int v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

void *std::vector<TCompoundPath>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::wstring>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    memset(v4, 255, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21402ED4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<std::pair<TWord const*,unsigned int>,BOOL>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::wstring>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      *(unsigned char *)(v4 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_21402EDCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<TWord const*,unsigned long>>::vector(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<TWord const*,unsigned int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_OWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_21402EE50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::wstring const,TLmScore const*>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,TLmScore const*>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,TLmScore const*>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__find_equal<std::wstring>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::wstring const,TLmScore const*>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,TLmScore const*>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,TLmScore const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::wstring const,TLmScore const*>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,TLmScore const*>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,TLmScore const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
  uint64_t v7 = (std::wstring *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(v7, *(const std::wstring::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 1;
}

void sub_21402EF90(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__find_equal<std::wstring>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::__map_value_compare<std::wstring const,std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>,std::less<std::wstring const>,true>,std::allocator<std::__value_type<std::wstring const,std::pair<TRegExp const*,TRegExp const*>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::wstring const&&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
  uint64_t v7 = (std::wstring *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(v7, *(const std::wstring::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 1;
}

void sub_21402F0D0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void EnvMgr::EnvMgr(EnvMgr *this, int a2)
{
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v3 = (char *)this + 56;
  *(_OWORD *)((char *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0u;
  uint64_t v4 = (char *)this + 72;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 31) = 0;
  *((void *)this + 3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((_WORD *)this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
  *(_OWORD *)((char *)this + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0u;
  *((void *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = StringIdCollSearchCmpFromStringId;
  *((void *)this + 19) = this;
  *((void *)this + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((unsigned char *)this + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
  *(_DWORD *)((char *)this + 9MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 131070;
  *(_DWORD *)this = 0;
  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, 1, 0);
  unsigned int v5 = *((_DWORD *)this + 16);
  if (v5 == *((_DWORD *)this + 17))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v3, 1, 1);
    unsigned int v5 = *((_DWORD *)this + 16);
  }
  uint64_t v6 = (void *)(*((void *)this + 7) + 16 * v5);
  void *v6 = 0;
  v6[1] = 0;
  ++*((_DWORD *)this + 16);
  int v7 = *((_DWORD *)this + 21);
  if (!v7)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v4, 1, 0);
    int v7 = *((_DWORD *)this + 21);
  }
  unsigned int v8 = *((_DWORD *)this + 20);
  if (v8 == v7)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v4, 1, 1);
    unsigned int v8 = *((_DWORD *)this + 20);
  }
  long long v9 = (void *)(*((void *)this + 9) + 16 * v8);
  *long long v9 = 0;
  v9[1] = 0;
  ++*((_DWORD *)this + 20);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 1;
  *((_DWORD *)this + 65) = a2;
  *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 1;
}

void sub_21402F438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v12);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(v19);
  DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll(v16);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v14);
  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::releaseAll(v13);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  _Unwind_Resume(a1);
}

void EnvMgr::~EnvMgr(EnvMgr *this)
{
}

uint64_t EnvMgr::findStringIdIndex(EnvMgr *this, EnvMgr *a2)
{
  v10[0] = a2;
  v10[1] = this;
  void v10[2] = 0;
  __int16 v11 = -2;
  char v12 = 0;
  if (*((unsigned char *)this + 88) && *((__int16 *)this + 45) == -2) {
    unint64_t v2 = (char *)this + 96;
  }
  else {
    unint64_t v2 = *(char **)(*((void *)this + 14) + 524272);
  }
  int v3 = *((_DWORD *)v2 + 2);
  int v4 = v3 - 1;
  if (v3 < 1) {
    return 0xFFFFFFFFLL;
  }
  int v5 = 0;
  while (1)
  {
    int v6 = v5 + v4;
    if (v5 + v4 < 0 != __OFADD__(v5, v4)) {
      ++v6;
    }
    uint64_t v7 = (v6 >> 1);
    int v8 = StringIdCollSearchCmp((unsigned __int16 *)(*(void *)v2 + 2 * v7), v10);
    if (!v8) {
      break;
    }
    if (v8 >= 0) {
      int v4 = v7 - 1;
    }
    else {
      int v5 = v7 + 1;
    }
    if (v5 > v4) {
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

uint64_t EnvMgr::findStringId(EnvMgr *this, EnvMgr *a2)
{
  unsigned int StringIdIndex = EnvMgr::findStringIdIndex(this, a2);
  if (StringIdIndex == -1) {
    return 0xFFFFLL;
  }
  if (*((unsigned char *)this + 88) && *((__int16 *)this + 45) == -2) {
    int v4 = (void *)((char *)this + 96);
  }
  else {
    int v4 = *(void **)(*((void *)this + 14) + 524272);
  }
  return *(unsigned __int16 *)(*v4 + 2 * StringIdIndex);
}

uint64_t EnvMgr::addString(EnvMgr *this, const char *a2)
{
  int v4 = *((_DWORD *)this + 56);
  if (v4)
  {
    unsigned int v5 = v4 - 1;
    uint64_t v6 = *(unsigned __int16 *)(*((void *)this + 27) + 2 * v5);
    *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = v5;
    *(_DWORD *)(*((void *)this + 25) + 4 * v6) = 1;
    *(_WORD *)(*((void *)this + 23) + 2 * v6) = *((_DWORD *)this + 44);
  }
  else
  {
    uint64_t v6 = *((unsigned __int16 *)this + 116);
    *((_WORD *)this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v6 + 1;
    unsigned int v7 = *((_DWORD *)this + 52);
    if (v7 == *((_DWORD *)this + 53))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 200, 1, 1);
      unsigned int v7 = *((_DWORD *)this + 52);
    }
    *(_DWORD *)(*((void *)this + 25) + 4 * v7) = 1;
    ++*((_DWORD *)this + 52);
    int v8 = *((_DWORD *)this + 44);
    unsigned int v9 = *((_DWORD *)this + 48);
    if (v9 == *((_DWORD *)this + 49))
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 184, 1, 1);
      unsigned int v9 = *((_DWORD *)this + 48);
    }
    *(_WORD *)(*((void *)this + 23) + 2 * v9) = v8;
    *((_DWORD *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9 + 1;
  }
  LOBYTE(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *a2;
  if (*a2)
  {
    unsigned int v11 = *((_DWORD *)this + 44);
    int v12 = 1;
    do
    {
      if (v11 == *((_DWORD *)this + 45))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 168, 1, 1);
        unsigned int v11 = *((_DWORD *)this + 44);
      }
      *(unsigned char *)(*((void *)this + 21) + v11) = v10;
      unsigned int v11 = *((_DWORD *)this + 44) + 1;
      *((_DWORD *)this + 44) = v11;
      int v10 = a2[v12++];
    }
    while (v10);
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 44);
  }
  if (v11 == *((_DWORD *)this + 45))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 168, 1, 1);
    unsigned int v11 = *((_DWORD *)this + 44);
  }
  *(unsigned char *)(*((void *)this + 21) + v11) = 0;
  unsigned int v13 = *((_DWORD *)this + 44) + 1;
  *((_DWORD *)this + 44) = v13;
  if (v13 > 0xFFFE)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    if (*((_DWORD *)this + 48))
    {
      unint64_t v14 = 0;
      do
      {
        if (*(_DWORD *)(*((void *)this + 25) + 4 * v14))
        {
          LOWORD(v15) = v29;
          unsigned int v16 = v27;
          unsigned int v17 = v29;
          if (v27 == HIDWORD(v27))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v26, 1, 1);
            unsigned int v16 = v27;
            unsigned int v17 = v29;
          }
          *(_WORD *)(v26 + 2 * vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v15;
          LODWORD(v27) = v16 + 1;
          uint64_t v18 = (unsigned char *)(*((void *)this + 21) + *(unsigned __int16 *)(*((void *)this + 23) + 2 * v14));
          LOBYTE(v15) = *v18;
          if (*v18)
          {
            unsigned int v19 = 1;
            do
            {
              if (v17 == HIDWORD(v29))
              {
                DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
                unsigned int v17 = v29;
              }
              *(unsigned char *)(v28 + v17) = v15;
              unsigned int v17 = v29 + 1;
              LODWORD(v29) = v29 + 1;
              int v15 = v18[v19++];
            }
            while (v15);
          }
          if (v17 == HIDWORD(v29))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
            unsigned int v17 = v29;
          }
          *(unsigned char *)(v28 + v17) = 0;
          unsigned int v20 = v29;
          int v21 = &v29;
        }
        else
        {
          unsigned int v20 = v27;
          if (v27 == HIDWORD(v27))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v26, 1, 1);
            unsigned int v20 = v27;
          }
          *(_WORD *)(v26 + 2 * v2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = -1;
          int v21 = &v27;
        }
        *(_DWORD *)int v21 = v20 + 1;
        ++v14;
      }
      while (v14 < *((unsigned int *)this + 48));
      unsigned int v22 = v29;
    }
    else
    {
      unsigned int v22 = 0;
    }
    DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 168, &v28, 0, v22);
    DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 184, &v26, 0, v27);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
    if (*((_DWORD *)this + 44) >= 0xFFFFu) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 165, (uint64_t)"fileutil/envmgr", 1, (uint64_t)"%u %u", v23, v24, *((_DWORD *)this + 44));
    }
  }
  DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::add((uint64_t)this + 88, v6);
  return v6;
}

void sub_21402F9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::add(uint64_t result, __int16 a2)
{
  uint64_t v3 = result;
  int v4 = (uint64_t *)(result + 8);
  if (*(unsigned char *)result)
  {
    unsigned __int16 v5 = *(_WORD *)(result + 2);
    __int16 v23 = a2;
    long long v24 = *(_OWORD *)(result + 64);
    unsigned __int16 v25 = v5;
    char v26 = 0;
    uint64_t result = DgnPrimArray<unsigned short>::searchLastOrBefore((void *)(result + 8), 0, *(_DWORD *)(result + 16), (uint64_t)&v23, *(uint64_t (**)(uint64_t, uint64_t))(result + 56));
    unsigned int v6 = result + 1;
    unsigned int v7 = *(_DWORD *)(v3 + 16);
    if (v7 == *(_DWORD *)(v3 + 20))
    {
      uint64_t result = DgnPrimArray<short>::reallocElts((uint64_t)v4, 1, 1);
      unsigned int v7 = *(_DWORD *)(v3 + 16);
    }
    uint64_t v8 = *v4;
    if (v7 > v6)
    {
      uint64_t v9 = 2 * v7;
      uint64_t v10 = 2 * (v7 - 1);
      unsigned int v11 = v7;
      do
      {
        *(_WORD *)(v8 + v9) = *(_WORD *)(v8 + v10);
        v9 -= 2;
        v10 -= 2;
        --v11;
      }
      while (v6 < v11);
    }
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(result + 16);
    if (v6 == *(_DWORD *)(result + 20))
    {
      uint64_t result = DgnPrimArray<short>::reallocElts(result + 8, 1, 1);
      unsigned int v6 = *(_DWORD *)(v3 + 16);
    }
    uint64_t v8 = *v4;
    unsigned int v7 = v6;
  }
  *(_WORD *)(v8 + 2 * v6) = a2;
  *(_DWORD *)(v3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v7 + 1;
  unsigned int v12 = *(_DWORD *)(v3 + 32);
  if (v12)
  {
    for (unsigned __int16 i = 0; i < v12; ++i)
    {
      uint64_t result = *(void *)(*(void *)(v3 + 24) + 8 * i);
      if (result)
      {
        __int16 v23 = a2;
        long long v24 = *(_OWORD *)(v3 + 64);
        unsigned __int16 v25 = i;
        char v26 = 0;
        uint64_t result = DgnPrimArray<unsigned short>::searchLastOrBefore((void *)result, 0, *(_DWORD *)(result + 8), (uint64_t)&v23, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56));
        int v14 = result;
        int v15 = *(uint64_t **)(*(void *)(v3 + 24) + 8 * i);
        unsigned int v16 = *((_DWORD *)v15 + 2);
        if (v16 == *((_DWORD *)v15 + 3))
        {
          uint64_t result = DgnPrimArray<short>::reallocElts(*(void *)(*(void *)(v3 + 24) + 8 * i), 1, 1);
          unsigned int v16 = *((_DWORD *)v15 + 2);
        }
        unsigned int v17 = v14 + 1;
        uint64_t v18 = *v15;
        if (v16 > v14 + 1)
        {
          unsigned int v19 = (_WORD *)(v18 + 2 * v16);
          unsigned int v20 = (__int16 *)(v18 + 2 * (v16 - 1));
          unsigned int v21 = v16;
          do
          {
            __int16 v22 = *v20--;
            *v19-- = v22;
            --v21;
          }
          while (v17 < v21);
        }
        *(_WORD *)(v18 + 2 * v17) = a2;
        *((_DWORD *)v15 + 2) = v16 + 1;
        unsigned int v12 = *(_DWORD *)(v3 + 32);
      }
    }
  }
  return result;
}

uint64_t EnvMgr::releaseString(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(void *)(this + 200);
  int v3 = *(_DWORD *)(v2 + 4 * a2) - 1;
  *(_DWORD *)(v2 + 4 * a2) = v3;
  if (!v3)
  {
    __int16 v4 = a2;
    uint64_t v5 = this;
    uint64_t v6 = a2;
    this = DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::remove(this + 88, a2);
    unsigned int v7 = *(_DWORD *)(v5 + 224);
    if (v7 == *(_DWORD *)(v5 + 228))
    {
      this = DgnPrimArray<short>::reallocElts(v5 + 216, 1, 1);
      unsigned int v7 = *(_DWORD *)(v5 + 224);
    }
    *(_WORD *)(*(void *)(v5 + 216) + 2 * v7) = v4;
    *(_DWORD *)(v5 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = v7 + 1;
    *(_WORD *)(*(void *)(v5 + 184) + 2 * v6) = -1;
  }
  return this;
}

uint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::remove(uint64_t result, int a2)
{
  uint64_t v2 = *(unsigned int *)(result + 16);
  if (*(unsigned char *)result)
  {
    if (v2)
    {
      uint64_t v3 = 0;
      __int16 v4 = (_WORD *)(*(void *)(result + 8) + 2);
      uint64_t v5 = (v2 - 1);
      while ((unsigned __int16)*(v4 - 1) != a2)
      {
        ++v3;
        ++v4;
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      unsigned int v6 = v2 - 1;
      if (v6 > v3)
      {
        uint64_t v9 = v5 - v3;
        do
        {
          *(v4 - 1) = *v4;
          ++v4;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
LABEL_6:
      unsigned int v6 = v2 - 1;
    }
  }
  else
  {
    if (!v2) {
      goto LABEL_18;
    }
    uint64_t v7 = *(unsigned int *)(result + 16);
    uint64_t v8 = *(_WORD **)(result + 8);
    while ((unsigned __int16)*v8 != a2)
    {
      ++v8;
      if (!--v7) {
        goto LABEL_18;
      }
    }
    unsigned int v6 = v2 - 1;
    *uint64_t v8 = *(_WORD *)(*(void *)(result + 8) + 2 * v6);
  }
  *(_DWORD *)(result + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v6;
LABEL_18:
  unsigned int v10 = *(_DWORD *)(result + 32);
  if (v10)
  {
    unsigned __int16 v11 = 0;
    uint64_t v12 = *(void *)(result + 24);
    do
    {
      unsigned int v13 = *(unsigned int **)(v12 + 8 * v11);
      if (v13)
      {
        uint64_t v14 = v13[2];
        if (v14)
        {
          uint64_t v15 = 0;
          unsigned int v16 = (_WORD *)(*(void *)v13 + 2);
          uint64_t v17 = (v14 - 1);
          while (*(unsigned __int16 *)(*(void *)v13 + 2 * v15) != a2)
          {
            ++v15;
            ++v16;
            --v17;
            if (v14 == v15) {
              goto LABEL_25;
            }
          }
          unsigned int v18 = v14 - 1;
          if (v18 > v15)
          {
            do
            {
              *(v16 - 1) = *v16;
              ++v16;
              --v17;
            }
            while (v17);
          }
        }
        else
        {
LABEL_25:
          unsigned int v18 = v14 - 1;
        }
        v13[2] = v18;
      }
      ++v11;
    }
    while (v10 > v11);
  }
  return result;
}

uint64_t EnvMgr::getName(EnvMgr *this, unsigned int a2)
{
  return *((void *)this + 21) + *(unsigned __int16 *)(*((void *)this + 23) + 2 * a2);
}

uint64_t EnvMgr::setSemanticType(uint64_t this, int a2)
{
  *(_DWORD *)(this + 26MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a2;
  return this;
}

uint64_t EnvMgr::loadEnvMgrFromStream(EnvMgr *this, DFile *a2, DgnStream *a3, unsigned int *a4, int a5)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v20);
  unsigned int v10 = (DFile *)*((unsigned int *)this + 65);
  if (a5)
  {
    uint64_t v19 = 0;
    readMrecHeader((uint64_t)a3, (uint64_t)a2, 0x16u, "MRENV!? ", (_DWORD *)&v19 + 1, &v19);
    if (*((_DWORD *)a2 + 6)) {
      unsigned __int16 v11 = (char *)*((void *)a2 + 2);
    }
    else {
      unsigned __int16 v11 = (char *)&unk_2140AAE08;
    }
    MrecHeaderCheckVersions(v11, "MRENV!? ", HIDWORD(v19), v19, 0x11u, 0xEu);
    MrecHeaderCheckLatestVersionIfShared(a2, "MRENV!? ", SHIDWORD(v19), v19, 17, 14, v13, v14);
    unsigned int v21 = 0;
    (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(void *)a3 + 72))(a3, &v21, 4, 1);
    uint64_t v12 = v21;
  }
  else
  {
    uint64_t v12 = 0;
  }
  unsigned int v21 = 0;
  readObject((uint64_t)a3, this, &v21);
  readObject<unsigned int>(a3, (uint64_t)this + 8, &v21);
  readObject<DgnPrimArray<unsigned int>>(a3, (uint64_t)this + 24, &v21);
  readObject<DgnPrimArray<unsigned short>>(a3, (uint64_t)this + 56, &v21);
  readObject<DgnArray<DgnPrimFixArray<unsigned char>>>(a3, (uint64_t)this + 72, &v21);
  DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::readObject((uint64_t)this + 88, a3, &v21);
  readObject<char>(a3, (uint64_t)this + 168, &v21);
  readObject<unsigned short>(a3, (uint64_t)this + 184, &v21);
  readObject<unsigned int>(a3, (uint64_t)this + 200, &v21);
  readObject<unsigned short>(a3, (uint64_t)this + 216, &v21);
  readObject((uint64_t)a3, (unsigned __int16 *)this + 116, &v21);
  readObject<unsigned int>(a3, (uint64_t)this + 240, &v21);
  readObject((uint64_t)a3, (_DWORD *)this + 64, &v21);
  readObject((uint64_t)a3, (_DWORD *)this + 65, &v21);
  *((void *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = StringIdCollSearchCmpFromStringId;
  *((void *)this + 19) = this;
  *((void *)this + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  uint64_t v15 = (DFile *)*((unsigned int *)this + 65);
  if (v15 != v10)
  {
    DFile::getNameForSemanticType(v15);
    DFile::getNameForSemanticType(v10);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 273, (uint64_t)"fileutil/envmgr", 5, (uint64_t)"%d %.500s %d %.500s", v16, v17, (char)v15);
  }
  readObjectChecksumAndVerify(a3, v21);
  *a4 ^= v21;
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v20);
  return v12;
}

void sub_214030024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, char a15, char a16)
{
}

void readObject<DgnArray<DgnPrimFixArray<unsigned char>>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v14 = 0;
  readObject((uint64_t)a1, &v14, a3);
  uint64_t v6 = v14;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v14 > v7) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v14 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      uint64_t v9 = v6 - v8;
      uint64_t v10 = 16 * v8;
      do
      {
        unsigned __int16 v11 = (void *)(*(void *)a2 + v10);
        *unsigned __int16 v11 = 0;
        v11[1] = 0;
        v10 += 16;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::destructAt((void *)a2, v6, v8 - v6);
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  if (v6)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      readObject<DgnPrimFixArray<unsigned char>>(a1, *(void *)a2 + v12, a3);
      ++v13;
      v12 += 16;
    }
    while (v13 < *(unsigned int *)(a2 + 8));
  }
}

void EnvMgr::loadEnvMgrFromText(EnvMgr *this, DFile *a2)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v55);
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v54);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v54, (uint64_t)a2, 0x15u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v54, "ENS");
  v53[0] = 0;
  v53[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v54, sENS_Versions, (uint64_t)v53, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v54, (unsigned int *)v53, v9, v10, v11, v12, v13, v14);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v54, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v54, (uint64_t)&v51);
  unint64_t v49 = 0;
  uint64_t v50 = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v54, (unint64_t)&v49);
  if (v52 != 2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 312, (uint64_t)"fileutil/envmgr", 7, (uint64_t)&errStr_fileutil_envmgr_E_ENS_NOT_TWO_FIELD_SPECS, v22, v23, v52);
  }
  uint64_t v24 = v51;
  if (*(_DWORD *)(v51 + 8)) {
    unsigned __int16 v25 = *(const char **)v51;
  }
  else {
    unsigned __int16 v25 = (const char *)&unk_2140AAE08;
  }
  if (strcmp(v25, "VariableName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 314, (uint64_t)"fileutil/envmgr", 8, (uint64_t)"%.500s %.500s", v26, v27, (char)"VariableName");
    uint64_t v24 = v51;
  }
  if (*v49)
  {
    if (*(_DWORD *)(v24 + 8)) {
      uint64_t v28 = *(void **)v24;
    }
    else {
      uint64_t v28 = &unk_2140AAE08;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 316, (uint64_t)"fileutil/envmgr", 15, (uint64_t)"%.500s %.500s", v26, v27, (char)v28);
    uint64_t v24 = v51;
  }
  if (*(_DWORD *)(v24 + 24)) {
    uint64_t v29 = *(const char **)(v24 + 16);
  }
  else {
    uint64_t v29 = (const char *)&unk_2140AAE08;
  }
  if (strcmp(v29, "VariableValue")) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 318, (uint64_t)"fileutil/envmgr", 8, (uint64_t)"%.500s %.500s", v30, v31, (char)"VariableValue");
  }
  if (*v49)
  {
    if (*(_DWORD *)(v51 + 8)) {
      unint64_t v32 = *(const char **)v51;
    }
    else {
      unint64_t v32 = (const char *)&unk_2140AAE08;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 320, (uint64_t)"fileutil/envmgr", 15, (uint64_t)"%.500s %.500s", v30, v31, (char)v32);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
  DgnArray<DgnString>::releaseAll((uint64_t)&v51);
  DgnString::DgnString((DgnString *)&v51);
  DgnString::DgnString((DgnString *)&v49);
  v48[0] = 0;
  v48[1] = 0;
  DgnString::DgnString((DgnString *)v47);
  unint64_t v45 = 0;
  unsigned int v46 = 0;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v54))
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v54, 0);
    DgnString::operator=((DgnString *)&v51, LineFieldString);
    uint64_t v34 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v54, 1u);
    DgnString::operator=((DgnString *)&v49, v34);
    if (v52 <= 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 333, (uint64_t)"fileutil/envmgr", 12, (uint64_t)"%s", v40, v41, (char)&unk_2140AAE08);
    }
    if (v50 <= 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 334, (uint64_t)"fileutil/envmgr", 13, (uint64_t)"%s", v40, v41, (char)&errStr_fileutil_envmgr_E_EMPTY_VARIABLE_VALUE);
    }
    if (!*(_DWORD *)this) {
      *(_DWORD *)this = EnvMgr::newEnv(this, v35, v36, v37, v38, v39, v40, v41);
    }
    DgnTextFile::convertFromEnvValueFormat((uint64_t)&v49, (uint64_t **)&v45);
    if (v52) {
      uint64_t v44 = (EnvMgr *)v51;
    }
    else {
      uint64_t v44 = (EnvMgr *)&unk_2140AAE08;
    }
    EnvMgr::setData(this, *(_DWORD *)this, v44, v45, v46, 1, v42, v43);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v45);
  DgnString::~DgnString((DgnString *)v47);
  DgnArray<DgnString>::releaseAll((uint64_t)v48);
  DgnString::~DgnString((DgnString *)&v49);
  DgnString::~DgnString((DgnString *)&v51);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v53);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v54);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v55);
}

void sub_214030514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va4, a7);
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v18 = va_arg(va4, void);
  uint64_t v20 = va_arg(va4, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va3);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va4);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v7 - 65));
  _Unwind_Resume(a1);
}

uint64_t EnvMgr::newEnv(EnvMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  int v9 = *((_DWORD *)this + 62);
  if (v9)
  {
    unsigned int v10 = v9 - 1;
    uint64_t result = *(unsigned int *)(*((void *)this + 30) + 4 * v10);
    *((_DWORD *)this + 62) = v10;
  }
  else
  {
    if (*((_DWORD *)this + 64) >= 0x3FFFFFu) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 643, (uint64_t)"fileutil/envmgr", 3, (uint64_t)"%s", a7, a8, (char)&errStr_fileutil_envmgr_E_TOO_MANY);
    }
    unsigned int v12 = *((_DWORD *)this + 16);
    if (v12 == *((_DWORD *)this + 17))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, 1, 1);
      unsigned int v12 = *((_DWORD *)this + 16);
    }
    uint64_t v13 = (void *)(*((void *)this + 7) + 16 * v12);
    *uint64_t v13 = 0;
    v13[1] = 0;
    ++*((_DWORD *)this + 16);
    unsigned int v14 = *((_DWORD *)this + 20);
    if (v14 == *((_DWORD *)this + 21))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 72, 1, 1);
      unsigned int v14 = *((_DWORD *)this + 20);
    }
    uint64_t v15 = (void *)(*((void *)this + 9) + 16 * v14);
    void *v15 = 0;
    v15[1] = 0;
    ++*((_DWORD *)this + 20);
    uint64_t result = *((unsigned int *)this + 64);
    *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = result + 1;
  }
  return result;
}

void *EnvMgr::setData(EnvMgr *this, unsigned int a2, EnvMgr *a3, const unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  unsigned int v9 = a5;
  EnvMgr::verifyEnvId(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v8 && EnvMgr::getData(this, a2, a3, v14, v15, v16, v17, v18)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 817, (uint64_t)"fileutil/envmgr", 14, (uint64_t)"%.500s", v19, v20, (char)a3);
  }
  *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  uint64_t result = (void *)EnvMgr::findStringId(this, a3);
  if (result == 0xFFFF
    || (unsigned int v22 = result, !*(_DWORD *)(*((void *)this + 25) + 4 * result)))
  {
    if (!v9) {
      return result;
    }
    uint64_t result = (void *)EnvMgr::addString(this, (const char *)a3);
    unsigned int v22 = result;
    char v23 = 1;
  }
  else
  {
    char v23 = 0;
  }
  uint64_t v24 = *((void *)this + 7);
  uint64_t v25 = a2;
  uint64_t v26 = v24 + 16 * a2;
  uint64_t v27 = (unsigned int *)(v26 + 8);
  uint64_t v28 = *(unsigned int *)(v26 + 8);
  if (!v28) {
    goto LABEL_17;
  }
  uint64_t v29 = 0;
  uint64_t v30 = *(void *)v26;
  uint64_t v31 = (v28 - 1);
  uint64_t v32 = -2;
  uint64_t v33 = 24;
  while (*(unsigned __int16 *)(v30 + 2 * v29) != v22)
  {
    ++v29;
    v33 += 16;
    v32 -= 2;
    if (v28 == v29) {
      goto LABEL_17;
    }
  }
  if (v29 == -1)
  {
LABEL_17:
    if (!v9) {
      return result;
    }
    unsigned int v34 = *(_DWORD *)(v26 + 8);
    if (v28 == *(_DWORD *)(v24 + 16 * v25 + 12))
    {
      char v35 = v23;
      DgnPrimArray<short>::reallocElts(v26, 1, 1);
      char v23 = v35;
      unsigned int v34 = *v27;
    }
    *(_WORD *)(*(void *)v26 + 2 * v34) = v22;
    unsigned int *v27 = v34 + 1;
    uint64_t v36 = *((void *)this + 9) + 16 * v25;
    uint64_t v38 = (unsigned int *)(v36 + 8);
    unsigned int v37 = *(_DWORD *)(v36 + 8);
    if (v37 == *(_DWORD *)(v36 + 12))
    {
      char v39 = v23;
      DgnArray<DgnPrimArray<double>>::reallocElts(*((void *)this + 9) + 16 * v25, 1, 1);
      char v23 = v39;
      unsigned int v37 = *v38;
    }
    uint64_t v40 = *(void *)v36 + 16 * v37;
    *(void *)uint64_t v40 = 0;
    *(_DWORD *)(v40 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    unsigned int *v38 = v37 + 1;
    if ((v23 & 1) == 0) {
      ++*(_DWORD *)(*((void *)this + 25) + 4 * v22);
    }
    goto LABEL_24;
  }
  if (v9)
  {
    LODWORD(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v29;
LABEL_24:
    uint64_t v41 = 16 * v25;
    uint64_t v42 = *(void *)(*((void *)this + 9) + 16 * v25);
    uint64_t v43 = (void **)(v42 + 16 * v28);
    if (*v43)
    {
      MemChunkFree(*v43, 0);
      *uint64_t v43 = 0;
      uint64_t v44 = *(void *)(*((void *)this + 9) + v41);
    }
    else
    {
      uint64_t v44 = v42;
    }
    *(_DWORD *)(v42 + 16 * v28 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    uint64_t v45 = v44 + 16 * v28;
    int v47 = *(_DWORD *)(v45 + 8);
    unsigned int v46 = (unsigned int *)(v45 + 8);
    if (!v47)
    {
      *(void *)(v44 + 16 * v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = MemChunkAlloc(v9, 0);
      *unsigned int v46 = v9;
      uint64_t v44 = *(void *)(*((void *)this + 9) + v41);
    }
    unint64_t v48 = *(void **)(v44 + 16 * v28);
    return memcpy(v48, a4, v9);
  }
  if (v31 > v29)
  {
    uint64_t v49 = v31 - v29;
    uint64_t v50 = (_WORD *)(v30 - v32);
    do
    {
      *(v50 - 1) = *v50;
      ++v50;
      --v49;
    }
    while (v49);
  }
  unsigned int *v27 = v31;
  uint64_t v51 = *((void *)this + 9);
  uint64_t v52 = v51 + 16 * v25;
  uint64_t v54 = (unsigned int *)(v52 + 8);
  unsigned int v53 = *(_DWORD *)(v52 + 8);
  if ((int)v29 + 1 < v53)
  {
    do
    {
      uint64_t v55 = *(void *)v52;
      unint64_t v56 = (void **)(v55 + 16 * v29);
      if (*v56)
      {
        MemChunkFree(*v56, 0);
        *unint64_t v56 = 0;
        uint64_t v51 = *((void *)this + 9);
      }
      *(_DWORD *)(v55 + 16 * v29 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      DgnPrimFixArray<unsigned char>::copyArraySlice((uint64_t *)(*(void *)(v51 + 16 * v25) + 16 * v29), (void *)(*(void *)(v51 + 16 * v25) + v33 - 8), 0, *(_DWORD *)(*(void *)(v51 + 16 * v25) + v33));
      uint64_t v51 = *((void *)this + 9);
      uint64_t v52 = v51 + 16 * v25;
      uint64_t v54 = (unsigned int *)(v52 + 8);
      unsigned int v53 = *(_DWORD *)(v52 + 8);
      unint64_t v57 = v29 + 2;
      ++v29;
      v33 += 16;
    }
    while (v57 < v53);
  }
  uint64_t v58 = v53 - 1;
  unsigned int v59 = *(_DWORD *)(v51 + 16 * v25 + 12);
  if (v58 > v59)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v52, v58 - v59, 0);
    unsigned int v53 = *v54;
  }
  if (v53 <= v58)
  {
    if (v53 < v58)
    {
      uint64_t v62 = v58 - v53;
      uint64_t v63 = (_DWORD *)(*(void *)v52 + 16 * v53 + 8);
      do
      {
        *((void *)v63 - 1) = 0;
        *uint64_t v63 = 0;
        v63 += 4;
        --v62;
      }
      while (v62);
    }
  }
  else if ((int)v53 > (int)v58)
  {
    uint64_t v60 = (int)v53;
    uint64_t v61 = 16 * (int)v53 - 16;
    do
    {
      --v60;
      DgnPrimFixArray<double>::~DgnPrimFixArray(*(void *)v52 + v61);
      v61 -= 16;
    }
    while (v60 > (int)v58);
  }
  *uint64_t v54 = v58;

  return (void *)EnvMgr::releaseString((uint64_t)this, v22);
}

void EnvMgr::loadEnvMgr(EnvMgr *this, DFile *a2, DFileChecksums *a3)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v9);
  if (DFile::subFileExists((uint64_t)a2, 0x16u))
  {
    uint64_t v6 = (DgnStream *)DFile::openSubFile((uint64_t)a2, 0x16u, 3, 0);
    unsigned int v8 = 0;
    EnvMgr::loadEnvMgrFromStream(this, a2, v6, &v8, 1);
    DgnDelete<DgnStream>((void (***)(void))v6);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x16u, v8);
    *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  }
  else if (DFile::subFileExists((uint64_t)a2, 0x15u))
  {
    EnvMgr::loadEnvMgrFromText(this, a2);
    *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 1;
  }
  EnvMgr::compact(this);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v9);
}

void sub_214030BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t EnvMgr::compact(EnvMgr *this)
{
  v38[0] = 0;
  v38[1] = 0;
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = *((unsigned int *)this + 4);
  int v4 = v3 + 1;
  uint64_t v5 = 4 * v3 - 4;
  while (v5 != -4)
  {
    int v6 = *(_DWORD *)(*v2 + v5);
    --v4;
    v5 -= 4;
    if (v6) {
      goto LABEL_6;
    }
  }
  int v4 = 0;
LABEL_6:
  *((_DWORD *)this + 4) = v4;
  DgnPrimArray<unsigned int>::compact((unint64_t)v2);
  if (*((_DWORD *)this + 8))
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = *((void *)this + 3) + 16 * v7;
      unsigned int v9 = *(_DWORD *)(v8 + 8);
      unsigned int v10 = v9 + 1;
      uint64_t v11 = 4 * v9 - 4;
      while (v11 != -4)
      {
        int v12 = *(_DWORD *)(*(void *)v8 + v11);
        --v10;
        v11 -= 4;
        if (v12) {
          goto LABEL_13;
        }
      }
      unsigned int v10 = 0;
LABEL_13:
      *(_DWORD *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10;
      DgnPrimArray<unsigned int>::compact(v8);
      ++v7;
    }
    while (v7 < *((unsigned int *)this + 8));
  }
  DgnArray<DgnPrimArray<unsigned int>>::compactRemoveMatchingSuffix((unint64_t)this + 24, (uint64_t)v38);
  uint64_t v13 = (void *)((char *)this + 40);
  if (*((_DWORD *)this + 12))
  {
    unint64_t v14 = 0;
    do
    {
      unint64_t v15 = *v13 + 16 * v14;
      if (*(_DWORD *)(v15 + 8))
      {
        unint64_t v16 = 0;
        do
        {
          unint64_t v17 = *(void *)v15 + 16 * v16;
          uint64_t v18 = *(unsigned int *)(v17 + 8);
          int v19 = v18 + 1;
          uint64_t v20 = 4 * v18 - 4;
          while (v20 != -4)
          {
            int v21 = *(_DWORD *)(*(void *)v17 + v20);
            --v19;
            v20 -= 4;
            if (v21) {
              goto LABEL_23;
            }
          }
          int v19 = 0;
LABEL_23:
          *(_DWORD *)(v17 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v19;
          DgnPrimArray<unsigned int>::compact(v17);
          ++v16;
          unint64_t v15 = *v13 + 16 * v14;
        }
        while (v16 < *(unsigned int *)(v15 + 8));
      }
      DgnArray<DgnPrimArray<unsigned int>>::compactRemoveMatchingSuffix(v15, (uint64_t)v38);
      ++v14;
    }
    while (v14 < *((unsigned int *)this + 12));
  }
  DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::compactRemoveMatchingSuffix((unint64_t)this + 40, v37);
  if (!*(_DWORD *)this && !*((_DWORD *)this + 4) && !*((_DWORD *)this + 8) && !*((_DWORD *)this + 12))
  {
    uint64_t v22 = *((unsigned int *)this + 16);
    if ((int)v22 >= 1)
    {
      uint64_t v23 = 16 * v22 - 16;
      do
      {
        DgnPrimArray<unsigned int>::~DgnPrimArray(*((void *)this + 7) + v23);
        v23 -= 16;
      }
      while (v23 != -16);
    }
    *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
    int v24 = *((_DWORD *)this + 17);
    if (v24)
    {
      unsigned int v25 = 0;
    }
    else
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, 1, 0);
      unsigned int v25 = *((_DWORD *)this + 16);
      int v24 = *((_DWORD *)this + 17);
    }
    if (v25 == v24)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 56, 1, 1);
      unsigned int v25 = *((_DWORD *)this + 16);
    }
    uint64_t v26 = (void *)(*((void *)this + 7) + 16 * v25);
    *uint64_t v26 = 0;
    v26[1] = 0;
    ++*((_DWORD *)this + 16);
    DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::destructAt((void *)this + 9, 0, *((_DWORD *)this + 20));
    *((_DWORD *)this + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
    int v27 = *((_DWORD *)this + 21);
    if (v27)
    {
      unsigned int v28 = 0;
    }
    else
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 72, 1, 0);
      unsigned int v28 = *((_DWORD *)this + 20);
      int v27 = *((_DWORD *)this + 21);
    }
    if (v28 == v27)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 72, 1, 1);
      unsigned int v28 = *((_DWORD *)this + 20);
    }
    uint64_t v29 = (void *)(*((void *)this + 9) + 16 * v28);
    void *v29 = 0;
    v29[1] = 0;
    ++*((_DWORD *)this + 20);
    *((_DWORD *)this + 26) = 0;
    uint64_t v30 = *((unsigned int *)this + 30);
    if (v30)
    {
      uint64_t v31 = *((void *)this + 14);
      do
      {
        if (*(void *)v31) {
          *(_DWORD *)(*(void *)v31 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
        }
        v31 += 8;
        --v30;
      }
      while (v30);
    }
    *((_DWORD *)this + 44) = 0;
    *((_DWORD *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    *((_DWORD *)this + 52) = 0;
    *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0;
    *((_WORD *)this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0;
    *((_DWORD *)this + 62) = 0;
    *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 1;
  }
  if (*((_DWORD *)this + 16))
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    do
    {
      DgnPrimArray<unsigned short>::compact(*((void *)this + 7) + v32);
      ++v33;
      v32 += 16;
    }
    while (v33 < *((unsigned int *)this + 16));
  }
  DgnArray<DgnPrimArray<unsigned short>>::compact((unint64_t)this + 56);
  if (*((_DWORD *)this + 20))
  {
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    do
    {
      DgnArray<DgnPrimArray<unsigned short>>::compact(*((void *)this + 9) + v34);
      ++v35;
      v34 += 16;
    }
    while (v35 < *((unsigned int *)this + 20));
  }
  DgnArray<DgnPrimArray<unsigned short>>::compact((unint64_t)this + 72);
  DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::compact((uint64_t)this + 88);
  DgnPrimArray<unsigned char>::compact((void **)this + 21);
  DgnPrimArray<unsigned short>::compact((unint64_t)this + 184);
  DgnPrimArray<unsigned int>::compact((unint64_t)this + 200);
  DgnPrimArray<unsigned short>::compact((unint64_t)this + 216);
  DgnPrimArray<unsigned int>::compact((unint64_t)this + 240);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v37);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v38);
}

void sub_214030F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void EnvMgr::saveEnvMgrToStream(EnvMgr *this, DgnStream *a2, unsigned int *a3, int a4, int a5)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v13);
  if (a5)
  {
    writeMrecHeader(a2, "MRENV!? ", 17, 14, a4 ^ 1);
    uint64_t v10 = (*(uint64_t (**)(DgnStream *))(*(void *)a2 + 40))(a2);
    int v14 = 0;
    (*(void (**)(DgnStream *, int *, uint64_t))(*(void *)a2 + 80))(a2, &v14, 4);
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v12 = 0;
  writeObject((uint64_t)a2, (int *)this, &v12);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 8, &v12);
  writeObject<DgnPrimArray<unsigned int>>((uint64_t)a2, (uint64_t)this + 24, &v12);
  writeObject<DgnPrimArray<unsigned short>>((uint64_t)a2, (uint64_t)this + 56, &v12);
  writeObject<DgnArray<DgnPrimArray<unsigned char>>>((uint64_t)a2, (uint64_t)this + 72, &v12);
  DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::writeObject((unsigned __int8 *)this + 88, (uint64_t)a2, &v12);
  writeObject<char>((uint64_t)a2, (uint64_t)this + 168, &v12);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 184, &v12);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 200, &v12);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 216, &v12);
  writeObject((uint64_t)a2, (unsigned __int16 *)this + 116, &v12);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 240, &v12);
  writeObject((uint64_t)a2, (int *)this + 64, &v12);
  writeObject((uint64_t)a2, (int *)this + 65, &v12);
  writeObjectChecksum((uint64_t)a2, &v12);
  *a3 ^= v12;
  if (a5 && (a4 & 1) == 0)
  {
    unsigned int v11 = (*(uint64_t (**)(DgnStream *))(*(void *)a2 + 48))(a2);
    (*(void (**)(DgnStream *, uint64_t))(*(void *)a2 + 24))(a2, v10);
    unsigned int v15 = v11;
    (*(void (**)(DgnStream *, unsigned int *, uint64_t))(*(void *)a2 + 80))(a2, &v15, 4);
    (*(void (**)(DgnStream *, void))(*(void *)a2 + 24))(a2, v11);
  }
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v13);
}

void sub_214031268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

void EnvMgr::saveEnvMgrToText(EnvMgr *this, DFile *a2, int a3)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v32);
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v31);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v31, (uint64_t)a2, 0x15u, a3);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v31, sENS_Versions, (uint64_t)&v29, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v31, "ENS", (void *)(v29 + 8 * (v30 - 1)));
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  DgnString::DgnString((DgnString *)&v23, "VariableName");
  unsigned int v11 = v26;
  if (v26 == HIDWORD(v26))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v25, 1, 1);
    unsigned int v11 = v26;
  }
  DgnString::DgnString((DgnString *)(v25 + 16 * v11), (const DgnString *)&v23);
  LODWORD(v26) = v26 + 1;
  DgnString::~DgnString((DgnString *)&v23);
  unsigned int v12 = v28;
  if (v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    unsigned int v12 = v28;
  }
  *(_DWORD *)(v27 + 4 * v12) = 0;
  LODWORD(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12 + 1;
  DgnString::DgnString((DgnString *)&v23, "VariableValue");
  unsigned int v13 = v26;
  if (v26 == HIDWORD(v26))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v25, 1, 1);
    unsigned int v13 = v26;
  }
  DgnString::DgnString((DgnString *)(v25 + 16 * v13), (const DgnString *)&v23);
  LODWORD(v26) = v26 + 1;
  DgnString::~DgnString((DgnString *)&v23);
  unsigned int v14 = v28;
  if (v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    unsigned int v14 = v28;
  }
  *(_DWORD *)(v27 + 4 * v14) = 0;
  LODWORD(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v31, (uint64_t)&v27, (uint64_t)&v25);
  uint64_t v15 = *(unsigned int *)this;
  uint64_t v16 = *((void *)this + 7);
  uint64_t v17 = *((void *)this + 9);
  DgnString::DgnString((DgnString *)&v23);
  uint64_t v18 = v16 + 16 * v15;
  if (*(_DWORD *)(v18 + 8))
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    int v21 = (void *)(v17 + 16 * v15);
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v31, 0, (char *)(*((void *)this + 21)+ *(unsigned __int16 *)(*((void *)this + 23) + 2 * *(unsigned __int16 *)(*(void *)v18 + 2 * v20))));
      DgnTextFile::convertToEnvValueFormat(*v21 + v19, (DgnString *)&v23);
      if (v24) {
        uint64_t v22 = v23;
      }
      else {
        uint64_t v22 = (char *)&unk_2140AAE08;
      }
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v31, 1u, v22);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v31);
      ++v20;
      v19 += 16;
    }
    while (v20 < *(unsigned int *)(v18 + 8));
  }
  DgnString::~DgnString((DgnString *)&v23);
  DgnArray<DgnString>::releaseAll((uint64_t)&v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v29);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v31);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v32);
}

void sub_214031520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v3 - 65));
  _Unwind_Resume(a1);
}

void EnvMgr::saveEnvMgr(EnvMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v14);
  if (*(_DWORD *)this)
  {
    if (a4)
    {
      EnvMgr::saveEnvMgrToText(this, a2, a5);
    }
    else
    {
      if (a5) {
        uint64_t v10 = 5;
      }
      else {
        uint64_t v10 = 1;
      }
      uint64_t v11 = (DgnStream *)DFile::openSubFile((uint64_t)a2, 0x16u, v10, 0);
      unsigned int v13 = 0;
      EnvMgr::saveEnvMgrToStream(this, v11, &v13, 1, 1);
      DgnDelete<DgnStream>((void (***)(void))v11);
      uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
      DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x16u, v13);
    }
  }
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v14);
}

void sub_214031670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void EnvMgr::printSize(EnvMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 556, (DgnString *)&v155);
  if (v156) {
    uint64_t v16 = v155;
  }
  else {
    uint64_t v16 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140AAE08, a3, &unk_2140AAE08, v16);
  DgnString::~DgnString((DgnString *)&v155);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140AAE08);
  uint64_t v21 = (a3 + 1);
  uint64_t v154 = a3;
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    uint64_t v27 = v155;
  }
  else {
    uint64_t v27 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_2140AAE08, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v28 = 12;
  }
  else {
    uint64_t v28 = 16;
  }
  uint64_t v29 = *((unsigned int *)this + 4);
  unsigned int v30 = *((_DWORD *)this + 5);
  if (v30 >= v29)
  {
    uint64_t v31 = 0;
    if ((int)v29 > 0) {
      v28 += 4 * (v29 - 1) + 4;
    }
    uint64_t v32 = v28 + 4 * (v30 - v29);
  }
  else
  {
    uint64_t v31 = 4 * v29;
    uint64_t v32 = v28;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    unsigned int v37 = v155;
  }
  else {
    unsigned int v37 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v21, &unk_2140AAE08, v22, v22, v37, v32, v28, v31);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v32;
  *a5 += v28;
  *a6 += v31;
  uint64_t v38 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 24, 0);
  uint64_t v39 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 24, 1);
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v155);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    uint64_t v44 = v155;
  }
  else {
    uint64_t v44 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v21, &unk_2140AAE08, v22, v22, v44, v38, v39, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v38;
  *a5 += v39;
  uint64_t v45 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 40, 0);
  uint64_t v46 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 40, 1);
  uint64_t v47 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    uint64_t v52 = v155;
  }
  else {
    uint64_t v52 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_2140AAE08, v22, v22, v52, v45, v46, v47);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v45;
  *a5 += v46;
  *a6 += v47;
  uint64_t v53 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 56, 0);
  uint64_t v54 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 56, 1);
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v155);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    unsigned int v59 = v155;
  }
  else {
    unsigned int v59 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v21, &unk_2140AAE08, v22, v22, v59, v53, v54, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v53;
  *a5 += v54;
  uint64_t fixed = sizeObject<DgnArray<DgnPrimFixArray<unsigned char>>>((uint64_t)this + 72, 0);
  uint64_t v61 = sizeObject<DgnArray<DgnPrimFixArray<unsigned char>>>((uint64_t)this + 72, 1);
  uint64_t v62 = sizeObject<DgnArray<DgnPrimFixArray<unsigned char>>>((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    uint64_t v67 = v155;
  }
  else {
    uint64_t v67 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &unk_2140AAE08, v22, v22, v67, fixed, v61, v62);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += fixed;
  *a5 += v61;
  *a6 += v62;
  uint64_t v68 = DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::sizeObject((uint64_t)this + 88, 0);
  uint64_t v69 = DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::sizeObject((uint64_t)this + 88, 1);
  uint64_t v70 = DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::sizeObject((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    unint64_t v75 = v155;
  }
  else {
    unint64_t v75 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v21, &unk_2140AAE08, v22, v22, v75, v68, v69, v70);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v68;
  *a5 += v69;
  *a6 += v70;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v76 = 12;
  }
  else {
    uint64_t v76 = 16;
  }
  int v77 = *((_DWORD *)this + 44);
  unsigned int v78 = *((_DWORD *)this + 45);
  BOOL v79 = v78 >= v77;
  uint64_t v80 = v78 - v77;
  if (v79)
  {
    uint64_t v82 = v77 & ~(v77 >> 31);
    int v77 = 0;
    uint64_t v81 = v76 + v82;
    v76 += v82 + v80;
  }
  else
  {
    uint64_t v81 = v76;
  }
  uint64_t v83 = v77;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    uint64_t v88 = v155;
  }
  else {
    uint64_t v88 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v21, &unk_2140AAE08, v22, v22, v88, v76, v81, v83);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v76;
  *a5 += v81;
  *a6 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v89 = 12;
  }
  else {
    uint64_t v89 = 16;
  }
  uint64_t v90 = *((unsigned int *)this + 48);
  unsigned int v91 = *((_DWORD *)this + 49);
  if (v91 >= v90)
  {
    uint64_t v92 = 0;
    if ((int)v90 > 0) {
      uint64_t v89 = (v89 | 2) + 2 * (v90 - 1);
    }
    uint64_t v93 = v89 + 2 * (v91 - v90);
  }
  else
  {
    uint64_t v92 = 2 * v90;
    uint64_t v93 = v89;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    unint64_t v98 = v155;
  }
  else {
    unint64_t v98 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v21, &unk_2140AAE08, v22, v22, v98, v93, v89, v92);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v93;
  *a5 += v89;
  *a6 += v92;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v99 = 12;
  }
  else {
    uint64_t v99 = 16;
  }
  uint64_t v100 = *((unsigned int *)this + 52);
  unsigned int v101 = *((_DWORD *)this + 53);
  if (v101 >= v100)
  {
    uint64_t v102 = 0;
    if ((int)v100 > 0) {
      v99 += 4 * (v100 - 1) + 4;
    }
    uint64_t v103 = v99 + 4 * (v101 - v100);
  }
  else
  {
    uint64_t v102 = 4 * v100;
    uint64_t v103 = v99;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    char v108 = v155;
  }
  else {
    char v108 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v21, &unk_2140AAE08, v22, v22, v108, v103, v99, v102);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v103;
  *a5 += v99;
  *a6 += v102;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v109 = 12;
  }
  else {
    uint64_t v109 = 16;
  }
  uint64_t v110 = *((unsigned int *)this + 56);
  unsigned int v111 = *((_DWORD *)this + 57);
  if (v111 >= v110)
  {
    uint64_t v112 = 0;
    if ((int)v110 > 0) {
      uint64_t v109 = (v109 | 2) + 2 * (v110 - 1);
    }
    uint64_t v113 = v109 + 2 * (v111 - v110);
  }
  else
  {
    uint64_t v112 = 2 * v110;
    uint64_t v113 = v109;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    unint64_t v118 = v155;
  }
  else {
    unint64_t v118 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v21, &unk_2140AAE08, v22, v22, v118, v113, v109, v112);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v113;
  *a5 += v109;
  *a6 += v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    uint64_t v123 = v155;
  }
  else {
    uint64_t v123 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v21, &unk_2140AAE08, v22, v22, v123, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v124 = 12;
  }
  else {
    uint64_t v124 = 16;
  }
  uint64_t v125 = *((unsigned int *)this + 62);
  unsigned int v126 = *((_DWORD *)this + 63);
  if (v126 >= v125)
  {
    uint64_t v127 = 0;
    if ((int)v125 > 0) {
      v124 += 4 * (v125 - 1) + 4;
    }
    uint64_t v128 = v124 + 4 * (v126 - v125);
  }
  else
  {
    uint64_t v127 = 4 * v125;
    uint64_t v128 = v124;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    uint64_t v133 = v155;
  }
  else {
    uint64_t v133 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v21, &unk_2140AAE08, v22, v22, v133, v128, v124, v127);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += v128;
  *a5 += v124;
  *a6 += v127;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    unint64_t v138 = v155;
  }
  else {
    unint64_t v138 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v21, &unk_2140AAE08, v22, v22, v138, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    uint64_t v143 = v155;
  }
  else {
    uint64_t v143 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v21, &unk_2140AAE08, v22, v22, v143, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v155);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 558, (DgnString *)&v155);
  if (v156) {
    unint64_t v148 = v155;
  }
  else {
    unint64_t v148 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v21, &unk_2140AAE08, v22, v22, v148, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v155);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 559, (DgnString *)&v155);
  if (v156) {
    uint64_t v153 = v155;
  }
  else {
    uint64_t v153 = &unk_2140AAE08;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v154, &unk_2140AAE08, (35 - v154), (35 - v154), v153, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v155);
}

void sub_214032140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnArray<DgnPrimFixArray<unsigned char>>>(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    unsigned int v4 = 12;
  }
  else {
    unsigned int v4 = 16;
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v10);
  uint64_t v5 = 0;
  if (a2 != 3)
  {
    uint64_t v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        unint64_t v7 = v6 + 1;
        do
          v5 += sizeObject<DgnPrimFixArray<unsigned char>>(*(void *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2) {
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnArray<DgnVector>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_214032284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t DgnArray<DgnPrimArray<unsigned int>>::compactRemoveMatchingSuffix(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = (int)v3;
    uint64_t v5 = *(void *)a1;
    unsigned int v6 = *(_DWORD *)(a1 + 8);
    do
    {
      uint64_t v7 = v6 - 1;
      uint64_t v8 = (void *)(v5 + 16 * v7);
      if (v8 != (void *)a2)
      {
        if (*(_DWORD *)(v5 + 16 * v7 + 8) != *(_DWORD *)(a2 + 8)) {
          goto LABEL_11;
        }
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        while ((int)v9 >= 1)
        {
          uint64_t v10 = *v8 + 4 * v9;
          int v11 = *(_DWORD *)(*(void *)a2 - 4 + 4 * v9--);
          if (*(_DWORD *)(v10 - 4) != v11) {
            goto LABEL_11;
          }
        }
      }
      --v6;
    }
    while (v7);
    unsigned int v6 = 0;
LABEL_11:
    if (v3 <= v6)
    {
      if (v3 < v6)
      {
        uint64_t v13 = v6 - v3;
        uint64_t v14 = 16 * v3;
        do
        {
          uint64_t v15 = (void *)(*(void *)a1 + v14);
          void *v15 = 0;
          v15[1] = 0;
          v14 += 16;
          --v13;
        }
        while (v13);
      }
    }
    else if ((int)v3 > (int)v6)
    {
      uint64_t v12 = 16 * (int)v3 - 16;
      do
      {
        --v4;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a1 + v12);
        v12 -= 16;
      }
      while (v4 > (int)v6);
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;

  return DgnArray<DgnPrimArray<unsigned short>>::compact(a1);
}

unint64_t DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::compactRemoveMatchingSuffix(unint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unsigned int v5 = v4 + 1;
  uint64_t v6 = 16 * v4 - 16;
  while (v6 != -16)
  {
    char v7 = DgnArray<DgnPrimArray<unsigned int>>::operator==((uint64_t *)(*(void *)a1 + v6), a2);
    --v5;
    v6 -= 16;
    if ((v7 & 1) == 0) {
      goto LABEL_6;
    }
  }
  unsigned int v5 = 0;
LABEL_6:
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v8 <= v5)
  {
    if (v8 < v5)
    {
      uint64_t v9 = v5 - v8;
      uint64_t v10 = 16 * v8;
      do
      {
        int v11 = (void *)(*(void *)a1 + v10);
        *int v11 = 0;
        v11[1] = 0;
        v10 += 16;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    DgnArray<DgnArray<DgnPrimArray<unsigned int>>>::destructAt((void *)a1, v5, v8 - v5);
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v5;

  return DgnArray<DgnPrimArray<unsigned short>>::compact(a1);
}

unint64_t DgnArray<DgnPrimArray<unsigned short>>::compact(unint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  uint64_t v2 = *(unsigned int *)(result + 12);
  if (v1 != v2)
  {
    unint64_t v3 = result;
    if (v1)
    {
      uint64_t v4 = 0;
      uint64_t result = realloc_array(*(void **)result, &v4, 16 * v1, 16 * v1, 16 * v2, 0);
      *(_DWORD *)(v3 + 12) = result >> 4;
      *(void *)unint64_t v3 = v4;
    }
    else
    {
      uint64_t result = *(void *)result;
      if (*(void *)v3) {
        uint64_t result = MemChunkFree((void *)result, 0);
      }
      *(void *)unint64_t v3 = 0;
      *(_DWORD *)(v3 + 12) = 0;
    }
  }
  return result;
}

unint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::compact(uint64_t a1)
{
  DgnPrimArray<unsigned short>::compact(a1 + 8);
  unint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      unint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8 * i);
      if (v4)
      {
        DgnPrimArray<unsigned short>::compact(v4);
        unint64_t v2 = *(unsigned int *)(a1 + 32);
      }
    }
  }

  return DgnPrimArray<unsigned short>::compact(a1 + 40);
}

void EnvMgr::verifyEnvId(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 64) <= a2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 630, (uint64_t)"fileutil/envmgr", 11, (uint64_t)"%u", a7, a8, a2);
  }
  uint64_t v10 = *((unsigned int *)this + 62);
  if (v10)
  {
    int v11 = (int *)*((void *)this + 30);
    for (uint64_t i = 0xFFFFFFFFLL; ; --i)
    {
      int v13 = *v11++;
      if (v13 == a2) {
        break;
      }
      if (!--v10) {
        return;
      }
    }
    if (i) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envmgr.cpp", 631, (uint64_t)"fileutil/envmgr", 11, (uint64_t)"%u", a7, a8, a2);
    }
  }
}

uint64_t EnvMgr::killEnv(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  EnvMgr::verifyEnvId(this, a2, a3, a4, a5, a6, a7, a8);
  *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  uint64_t v10 = *((void *)this + 7);
  uint64_t v11 = v10 + 16 * a2;
  uint64_t v12 = (_DWORD *)(v11 + 8);
  if (*(_DWORD *)(v11 + 8))
  {
    unint64_t v13 = 0;
    do
    {
      EnvMgr::releaseString((uint64_t)this, *(unsigned __int16 *)(*(void *)v11 + 2 * v13++));
      uint64_t v10 = *((void *)this + 7);
      uint64_t v11 = v10 + 16 * a2;
      uint64_t v12 = (_DWORD *)(v11 + 8);
    }
    while (v13 < *(unsigned int *)(v11 + 8));
  }
  if (*(void *)v11)
  {
    MemChunkFree(*(void **)v11, 0);
    *(void *)uint64_t v11 = 0;
  }
  _DWORD *v12 = 0;
  *(_DWORD *)(v10 + 16 * a2 + 12) = 0;
  uint64_t result = (uint64_t)DgnArray<DgnVector>::releaseAll(*((void *)this + 9) + 16 * a2);
  unsigned int v15 = *((_DWORD *)this + 62);
  if (v15 == *((_DWORD *)this + 63))
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 240, 1, 1);
    unsigned int v15 = *((_DWORD *)this + 62);
  }
  *(_DWORD *)(*((void *)this + 30) + 4 * v15) = a2;
  ++*((_DWORD *)this + 62);
  return result;
}

uint64_t EnvMgr::getTopEnvId(EnvMgr *this)
{
  return *(unsigned int *)this;
}

uint64_t EnvMgr::getTopEnvIdMaybeNew(EnvMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)this;
  if (a2 && !v8)
  {
    uint64_t v8 = EnvMgr::newEnv(this, a2, a3, a4, a5, a6, a7, a8);
    EnvMgr::verifyEnvId(this, v8, v10, v11, v12, v13, v14, v15);
    *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
    *(_DWORD *)this = v8;
  }
  return v8;
}

void EnvMgr::setTopEnvId(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(_DWORD *)this = a2;
}

uint64_t EnvMgr::getItemEnvId(EnvMgr *this, unsigned int a2)
{
  if (*((_DWORD *)this + 4) <= a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(*((void *)this + 1) + 4 * a2);
  }
}

uint64_t EnvMgr::getItemEnvIdMaybeNew(EnvMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  if (a3
    && (*((_DWORD *)this + 4) <= a2 || !*(_DWORD *)(*((void *)this + 1) + 4 * a2)))
  {
    unsigned int v10 = EnvMgr::newEnv(this, a2, a3, a4, a5, a6, a7, a8);
    EnvMgr::verifyEnvId(this, v10, v11, v12, v13, v14, v15, v16);
    *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
    SetEnvIdInArray((uint64_t)this + 8, v8, v10);
  }
  if (*((_DWORD *)this + 4) <= v8) {
    return 0;
  }
  else {
    return *(unsigned int *)(*((void *)this + 1) + 4 * v8);
  }
}

void EnvMgr::setItemEnvId(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  EnvMgr::verifyEnvId(this, a3, a3, a4, a5, a6, a7, a8);
  *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;

  SetEnvIdInArray((uint64_t)this + 8, a2, v8);
}

void SetEnvIdInArray(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (a2 >= v6)
  {
    unsigned int v8 = a2 + 1;
    unsigned int v9 = *(_DWORD *)(a1 + 12);
    unsigned int v10 = v8;
    uint64_t v11 = a2 + 1 - v9;
    if (v8 > v9)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1, v11, 1);
      unsigned int v10 = v8 - v6 + *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10;
    uint64_t v7 = *(void *)a1;
    if (v8 > v6) {
      bzero((void *)(v7 + 4 * v6), 4 * (a2 - v6) + 4);
    }
  }
  else
  {
    uint64_t v7 = *(void *)a1;
  }
  *(_DWORD *)(v7 + 4 * a2) = a3;
}

unint64_t EnvMgr::getItemsWithEnv(unint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  unint64_t v2 = *(unsigned int *)(result + 16);
  if (v2)
  {
    uint64_t v4 = result;
    unsigned int v5 = 0;
    for (unint64_t i = 0; i < v2; ++i)
    {
      if (*(_DWORD *)(*(void *)(v4 + 8) + 4 * i))
      {
        if (v5 == *(_DWORD *)(a2 + 12))
        {
          uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
          unsigned int v5 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(void *)a2 + 4 * v5) = i;
        unsigned int v5 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v5;
        unint64_t v2 = *(unsigned int *)(v4 + 16);
      }
    }
  }
  return result;
}

uint64_t EnvMgr::getItemPairEnvId(EnvMgr *this, unsigned int a2, unsigned int a3)
{
  if (*((_DWORD *)this + 8) <= a2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 3);
  if (*(_DWORD *)(v3 + 16 * a2 + 8) <= a3) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(v3 + 16 * a2) + 4 * a3);
  }
}

uint64_t EnvMgr::getItemPairEnvIdMaybeNew(EnvMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  if (a4)
  {
    if (*((_DWORD *)this + 8) <= a2
      || (uint64_t v11 = *((void *)this + 3), *(_DWORD *)(v11 + 16 * a2 + 8) <= a3)
      || !*(_DWORD *)(*(void *)(v11 + 16 * a2) + 4 * a3))
    {
      uint64_t v12 = EnvMgr::newEnv(this, a2, a3, a4, a5, a6, a7, a8);
      EnvMgr::setItemPairEnvId(this, v9, a3, v12, v13, v14, v15, v16);
    }
  }
  if (*((_DWORD *)this + 8) <= v9) {
    return 0;
  }
  uint64_t v17 = *((void *)this + 3);
  if (*(_DWORD *)(v17 + 16 * v9 + 8) <= a3) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(v17 + 16 * v9) + 4 * a3);
  }
}

void EnvMgr::setItemPairEnvId(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  unsigned int v9 = a3;
  EnvMgr::verifyEnvId(this, a4, a3, a4, a5, a6, a7, a8);
  *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  uint64_t v12 = (void *)((char *)this + 24);
  unsigned int v13 = *((_DWORD *)this + 8);
  if (v13 <= a2)
  {
    uint64_t v14 = a2 + 1;
    unsigned int v15 = *((_DWORD *)this + 9);
    if (v14 > v15)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 24, v14 - v15, 0);
      unsigned int v13 = *((_DWORD *)this + 8);
    }
    if (v13 <= v14)
    {
      if (v13 < v14)
      {
        uint64_t v18 = 16 * v13;
        uint64_t v19 = v14 - v13;
        do
        {
          uint64_t v20 = (void *)(*v12 + v18);
          void *v20 = 0;
          v20[1] = 0;
          v18 += 16;
          --v19;
        }
        while (v19);
      }
    }
    else if ((int)v13 > (int)v14)
    {
      uint64_t v16 = (int)v13;
      uint64_t v17 = 16 * (int)v13 - 16;
      do
      {
        --v16;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v12 + v17);
        v17 -= 16;
      }
      while (v16 > (int)v14);
    }
    *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
  }
  uint64_t v21 = *v12 + 16 * a2;

  SetEnvIdInArray(v21, v9, v8);
}

unint64_t EnvMgr::getItemPairsWithEnv(unint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  unint64_t v3 = *(unsigned int *)(result + 32);
  if (v3)
  {
    unint64_t v6 = result;
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 24);
    do
    {
      if (*(_DWORD *)(v8 + 16 * v7 + 8))
      {
        unint64_t v9 = 0;
        do
        {
          if (*(_DWORD *)(*(void *)(v8 + 16 * v7) + 4 * v9))
          {
            uint64_t v10 = *(unsigned int *)(a2 + 8);
            if (v10 == *(_DWORD *)(a2 + 12))
            {
              uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
              uint64_t v10 = *(unsigned int *)(a2 + 8);
            }
            *(_DWORD *)(*(void *)a2 + 4 * v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v7;
            ++*(_DWORD *)(a2 + 8);
            uint64_t v11 = *(unsigned int *)(a3 + 8);
            if (v11 == *(_DWORD *)(a3 + 12))
            {
              uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v11 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)a3 + 4 * v11) = v9;
            ++*(_DWORD *)(a3 + 8);
            uint64_t v8 = *(void *)(v6 + 24);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(v8 + 16 * v7 + 8));
        unint64_t v3 = *(unsigned int *)(v6 + 32);
      }
      ++v7;
    }
    while (v7 < v3);
  }
  return result;
}

uint64_t EnvMgr::getData(EnvMgr *this, unsigned int a2, EnvMgr *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  EnvMgr::verifyEnvId(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  unsigned int StringId = EnvMgr::findStringId(this, a3);
  if (StringId == 0xFFFF) {
    return 0;
  }
  if (!*(_DWORD *)(*((void *)this + 25) + 4 * StringId)) {
    return 0;
  }
  uint64_t v12 = *((void *)this + 7);
  uint64_t v13 = *(unsigned int *)(v12 + 16 * a2 + 8);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = 0;
  unsigned int v15 = *(unsigned __int16 **)(v12 + 16 * a2);
  uint64_t v16 = 16 * v13;
  while (1)
  {
    int v17 = *v15++;
    if (v17 == StringId) {
      break;
    }
    v14 += 16;
    if (v16 == v14) {
      return 0;
    }
  }
  if (v14 != 0xFFFFFFFF0) {
    return *(void *)(*((void *)this + 9) + 16 * a2) + v14;
  }
  else {
    return 0;
  }
}

uint64_t EnvMgr::getNameIds(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *((void *)this + 7) + 16 * a2;
}

uint64_t EnvMgr::getValues(EnvMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *((void *)this + 9) + 16 * a2;
}

void *DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll(uint64_t a1)
{
  DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void *DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::destructAt(void *result, int a2, int a3)
{
  unint64_t v3 = result;
  uint64_t v4 = a3 + a2;
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 1;
  for (uint64_t i = 16 * v4 - 16; --v6 > v5; uint64_t i = v8)
  {
    uint64_t v8 = i - 16;
    uint64_t result = DgnArray<DgnVector>::releaseAll(*v3 + i);
  }
  return result;
}

uint64_t DgnPrimArray<unsigned short>::searchLastOrBefore(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  int v5 = a2;
  LODWORD(v6) = a2;
  if (a3 > (int)a2)
  {
    int v10 = a3 - 1;
    uint64_t v11 = a2;
    do
    {
      int v12 = v10 + v11;
      if (v10 + (int)v11 < 0 != __OFADD__(v10, v11)) {
        ++v12;
      }
      unsigned int v13 = v12 >> 1;
      if (v11 == v10 - 1) {
        uint64_t v6 = v10;
      }
      else {
        uint64_t v6 = v13;
      }
      int v14 = a5(*a1 + 2 * v6, a4);
      if (v14)
      {
        if (v14 < 0)
        {
          uint64_t v6 = (v6 + 1);
        }
        else
        {
          int v10 = v6 - 1;
          uint64_t v6 = v11;
        }
      }
      else if (v10 == v11)
      {
        return v6;
      }
      uint64_t v11 = v6;
    }
    while ((int)v6 <= v10);
  }
  if (v6 == v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v6 - 1);
  }
}

void readObject<DgnPrimFixArray<unsigned char>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v15 = 0;
  readObject((uint64_t)a1, &v15, a3);
  uint64_t v6 = v15;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v15 > v7) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v15 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      uint64_t v11 = v6 - v8;
      int v12 = (_DWORD *)(*(void *)a2 + 16 * v8 + 8);
      do
      {
        *((void *)v12 - 1) = 0;
        _DWORD *v12 = 0;
        v12 += 4;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    uint64_t v9 = (int)v8;
    uint64_t v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimFixArray<double>::~DgnPrimFixArray(*(void *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  if (v6)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      readObject<unsigned char>(a1, *(void *)a2 + v13, a3);
      ++v14;
      v13 += 16;
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
}

void DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::readObject(uint64_t a1, DgnStream *a2, unsigned int *a3)
{
  readObject<unsigned short>(a2, a1 + 8, a3);
  readObject<unsigned short>(a2, a1 + 40, a3);
  uint64_t v15 = 0;
  readObject((uint64_t)a2, &v15, a3);
  readObject((uint64_t)a2, &v15, a3);
  *(unsigned char *)a1 = v15 != 0;
  readObject((uint64_t)a2, (_DWORD *)&v15 + 1, a3);
  *(_WORD *)(a1 + 2) = WORD2(v15);
  readObject((uint64_t)a2, &v15, a3);
  *(unsigned char *)(a1 + 4) = v15 != 0;
  readObject((uint64_t)a2, &v15, a3);
  *(unsigned char *)(a1 + 5) = v15 != 0;
  unsigned int v14 = 0;
  readObject((uint64_t)a2, &v14, a3);
  LODWORD(v6) = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    unint64_t v7 = 0;
    do
    {
      DgnDelete<DgnPrimArray<unsigned int>>(*(void *)(*(void *)(a1 + 24) + 8 * v7));
      *(void *)(*(void *)(a1 + 24) + 8 * v7++) = 0;
      unint64_t v6 = *(unsigned int *)(a1 + 32);
    }
    while (v7 < v6);
  }
  uint64_t v8 = (void *)(a1 + 24);
  uint64_t v9 = v14;
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  if (v14 > v10)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 24, v14 - v10, 0);
    LODWORD(v6) = *(_DWORD *)(a1 + 32);
  }
  if (v6 <= v9)
  {
    if (v6 < v9)
    {
      unint64_t v6 = v6;
      do
        *(void *)(*v8 + 8 * v6++) = 0;
      while (v9 != v6);
    }
  }
  else
  {
    DgnIOwnArray<DgnPrimArray<unsigned int> *>::destructAt(a1 + 24, v9, v6 - v9);
  }
  *(_DWORD *)(a1 + 32) = v9;
  if (v9)
  {
    unint64_t v11 = 0;
    do
    {
      int v13 = 0;
      readObject((uint64_t)a2, &v13, a3);
      *(void *)(*v8 + 8 * v11) = 0;
      if (v13)
      {
        int v12 = MemChunkAlloc(0x10uLL, 0);
        uint64_t *v12 = 0;
        v12[1] = 0;
        *(void *)(*v8 + 8 * v11) = v12;
        readObject<unsigned short>(a2, *(void *)(*v8 + 8 * v11), a3);
      }
      ++v11;
    }
    while (v11 < *(unsigned int *)(a1 + 32));
  }
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(void *)(a1 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0;
}

uint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::writeObject(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  writeObject<unsigned short>(a2, (uint64_t)(a1 + 8), a3);
  writeObject<unsigned short>(a2, (uint64_t)(a1 + 40), a3);
  int v13 = 0;
  writeObject(a2, &v13, a3);
  int v12 = *a1;
  writeObject(a2, &v12, a3);
  int v11 = *((unsigned __int16 *)a1 + 1);
  writeObject(a2, &v11, a3);
  int v10 = a1[4];
  writeObject(a2, &v10, a3);
  int v9 = a1[5];
  writeObject(a2, &v9, a3);
  int v8 = *((_DWORD *)a1 + 8);
  uint64_t result = writeObject(a2, &v8, a3);
  if (*((_DWORD *)a1 + 8))
  {
    unint64_t v7 = 0;
    do
    {
      int v8 = *(void *)(*((void *)a1 + 3) + 8 * v7) != 0;
      uint64_t result = writeObject(a2, &v8, a3);
      if (v8) {
        uint64_t result = writeObject<unsigned short>(a2, *(void *)(*((void *)a1 + 3) + 8 * v7), a3);
      }
      ++v7;
    }
    while (v7 < *((unsigned int *)a1 + 8));
  }
  return result;
}

uint64_t sizeObject<DgnPrimFixArray<unsigned char>>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v3 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  if (a2 != 3)
  {
    uint64_t v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v4 = *(unsigned int *)(a1 + 8);
      if ((int)v4 >= 1)
      {
        unint64_t v5 = v4 + 1;
        do
        {
          int v6 = *(_DWORD *)(*(void *)a1 + 16 * (v5 - 2) + 8);
          v2 += v3 + (v6 & ~(v6 >> 31));
          --v5;
        }
        while (v5 > 1);
      }
      if (!a2) {
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - v4);
      }
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v8);
  return v2;
}

uint64_t DgnCollArray<unsigned short,StringIdCollCmpWithTemp>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<unsigned short>(a1 + 8, a2);
  uint64_t v5 = sizeObject<DgnPrimArray<unsigned short> *>(a1 + 24, a2);
  uint64_t v6 = sizeObject<unsigned short>(a1 + 40, a2);
  uint64_t v7 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v7 = 8;
  }
  if (a2 == 3) {
    uint64_t v7 = 0;
  }
  return ((a2 != 3) | (2 * (a2 != 3))) + 2 * (a2 != 3) + v4 + v5 + v6 + v7 + 2 * v7;
}

uint64_t sizeObject<DgnPrimArray<unsigned short> *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<unsigned short>(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t DgnArray<DgnPrimArray<unsigned int>>::operator==(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2 != *((_DWORD *)a2 + 2)) {
    return 0;
  }
  if ((int)v2 < 1) {
    return 1;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t result = 1;
  do
  {
    unsigned int v6 = v2 - 1;
    if (v3 != v4)
    {
      uint64_t v7 = *(unsigned int *)(v3 + 16 * (v2 - 1) + 8);
      if (v7 != *(_DWORD *)(v4 + 16 * (v2 - 1) + 8)) {
        return 0;
      }
      while ((int)v7 >= 1)
      {
        uint64_t v8 = *(void *)(v3 + 16 * v6) + 4 * v7;
        int v9 = *(_DWORD *)(*(void *)(v4 + 16 * v6) - 4 + 4 * v7--);
        if (*(_DWORD *)(v8 - 4) != v9) {
          return 0;
        }
      }
    }
  }
  while (v2-- > 1);
  return result;
}

void PronCollMgr::~PronCollMgr(PronCollMgr *this)
{
}

void PronCollMgr::checkSimple(PronCollMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *((_DWORD *)this + 4);
  if (v8)
  {
    char v10 = 0;
    for (i = 0; i < v8; char v10 = ++i)
    {
      uint64_t v12 = *((void *)this + 1);
      uint64_t v13 = *(unsigned __int16 *)(v12 + 2 * i);
      BOOL v14 = v13 == i || v13 == 0xFFFF;
      if (!v14 && *(unsigned __int16 *)(v12 + 2 * v13) != v13)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 112, (uint64_t)"word/pcollmgr", 7, (uint64_t)"%u %u %u", a7, a8, v10);
        unsigned int v8 = *((_DWORD *)this + 4);
      }
    }
  }
}

void PronCollMgr::loadPronCollMgrFromText(unsigned int **this, DFile *a2)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v70);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v70, (uint64_t)a2, 0x3Au, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v70, "PronCollation");
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v70, sPCT_Versions, (uint64_t)&v68, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v70, (unsigned int *)&v68, v9, v10, v11, v12, v13, v14);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v70, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v70, (uint64_t)&v66);
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v70, (unint64_t)&v64);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v70, 2, v22, v23, v24, v25, v26, v27);
  uint64_t v28 = v66;
  if (*((_DWORD *)v66 + 2)) {
    uint64_t v29 = *(const char **)v66;
  }
  else {
    uint64_t v29 = (const char *)&unk_2140AAE54;
  }
  if (strcmp(v29, "HumanReadable"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 146, (uint64_t)"word/pcollmgr", 1, (uint64_t)"%.500s %.500s", v30, v31, (char)"HumanReadable");
    uint64_t v28 = v66;
  }
  if (*(_DWORD *)v64)
  {
    if (*((_DWORD *)v28 + 2)) {
      uint64_t v32 = *(void **)v28;
    }
    else {
      uint64_t v32 = &unk_2140AAE54;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 149, (uint64_t)"word/pcollmgr", 2, (uint64_t)"%.500s %.500s", v30, v31, (char)v32);
    uint64_t v28 = v66;
  }
  if (*((_DWORD *)v28 + 6)) {
    uint64_t v33 = (const char *)*((void *)v28 + 2);
  }
  else {
    uint64_t v33 = (const char *)&unk_2140AAE54;
  }
  if (strcmp(v33, "CollatedHumanReadable")) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 154, (uint64_t)"word/pcollmgr", 1, (uint64_t)"%.500s %.500s", v34, v35, (char)"CollatedHumanReadable");
  }
  if (*((_DWORD *)v64 + 1))
  {
    if (*((_DWORD *)v66 + 6)) {
      uint64_t v36 = (void *)*((void *)v66 + 2);
    }
    else {
      uint64_t v36 = &unk_2140AAE54;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 158, (uint64_t)"word/pcollmgr", 2, (uint64_t)"%.500s %.500s", v34, v35, (char)v36);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v64);
  DgnArray<DgnString>::releaseAll((uint64_t)&v66);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v68);
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  PhnMgr::getPublicPhnIndexArray(*this, (uint64_t)&v68);
  int v37 = v69;
  LODWORD(v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v69;
  if (HIDWORD(v67) < v69)
  {
    uint64_t v64 = 0;
    HIDWORD(v67) = realloc_array(v66, &v64, v69, v67, v67, 1);
    uint64_t v66 = v64;
    LODWORD(v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v69;
  }
  LODWORD(v67) = v37;
  unsigned int v39 = 0;
  if (v38)
  {
    uint64_t v40 = v66;
    uint64_t v41 = v68;
    uint64_t v38 = v38;
    do
    {
      *v40++ = 0;
      unsigned int v43 = *v41++;
      unsigned int v42 = v43;
      if (v43 <= (unsigned __int16)v39) {
        unsigned int v39 = (unsigned __int16)v39;
      }
      else {
        unsigned int v39 = v42;
      }
      --v38;
    }
    while (v38);
  }
  unsigned int v44 = v39 + 1;
  unsigned int v45 = *((_DWORD *)this + 5);
  if (v45 <= v39) {
    DgnPrimArray<short>::reallocElts((uint64_t)(this + 1), v44 - v45, 0);
  }
  uint64_t v46 = 0;
  *((_DWORD *)this + 4) = v44;
  uint64_t v47 = this[1];
  if ((v44 & 0xFFFE) != 0) {
    uint64_t v48 = (unsigned __int16)v44;
  }
  else {
    uint64_t v48 = 1;
  }
  do
  {
    *((_WORD *)v47 + v46) = v46;
    ++v46;
  }
  while (v48 != v46);
  DgnString::DgnString((DgnString *)&v64);
  DgnString::DgnString((DgnString *)&v62);
  while ((DgnTextFileParser::parseNextLine((DgnTextFileParser *)v70) & 1) != 0)
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v70, 0);
    DgnString::operator=((DgnString *)&v64, LineFieldString);
    if (v65) {
      uint64_t v52 = (const char *)v64;
    }
    else {
      uint64_t v52 = (const char *)&unk_2140AAE54;
    }
    unsigned int PhnIndex = PhnMgr::getPhnIndex((PhnMgr *)*this, v52);
    unsigned int v54 = PhnIndex;
    if (v69)
    {
      uint64_t v55 = 0;
      while (v68[v55] != PhnIndex)
      {
        if (v69 == ++v55) {
          goto LABEL_44;
        }
      }
    }
    else
    {
LABEL_44:
      LODWORD(v55) = -1;
    }
    *((unsigned char *)v66 + v55) = 1;
    uint64_t v56 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v70, 1u);
    DgnString::operator=((DgnString *)&v62, v56);
    if (v63 >= 2) {
      __int16 v57 = PhnMgr::getPhnIndex((PhnMgr *)*this, v62);
    }
    else {
      __int16 v57 = -1;
    }
    *((_WORD *)this[1] + v54) = v57;
  }
  unint64_t v58 = v67;
  if (v67)
  {
    unint64_t v59 = 0;
    do
    {
      if (!*((unsigned char *)v66 + v59))
      {
        uint64_t v60 = *((void *)*this + 1) + 16 * v68[v59];
        if (*(_DWORD *)(v60 + 8)) {
          uint64_t v61 = *(void **)v60;
        }
        else {
          uint64_t v61 = &unk_2140AAE54;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 202, (uint64_t)"word/pcollmgr", 6, (uint64_t)"%.500s", v49, v50, (char)v61);
        unint64_t v58 = v67;
      }
      ++v59;
    }
    while (v59 < v58);
  }
  DgnString::~DgnString((DgnString *)&v62);
  DgnString::~DgnString((DgnString *)&v64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v66);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v68);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v70);
}

void sub_214033C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va3);
  _Unwind_Resume(a1);
}

void PronCollMgr::loadPronCollMgr(unsigned int **this, char **a2, DFileChecksums *a3, int a4)
{
  if (DFile::subFileExists((uint64_t)a2, 0x3Au))
  {
    if ((a4 & 1) == 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 215, (uint64_t)"word/pcollmgr", 3, (uint64_t)"%s", v8, v9, (char)&unk_2140AAE54);
    }
    PronCollMgr::loadPronCollMgrFromText(this, (DFile *)a2);
    PronCollMgr::checkSimple((PronCollMgr *)this, v10, v11, v12, v13, v14, v15, v16);
  }
  else if (DFile::subFileExists((uint64_t)a2, 0x38u))
  {
    if (a4) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 222, (uint64_t)"word/pcollmgr", 5, (uint64_t)"%s", v17, v18, (char)&errStr_word_pcollmgr_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    }
    v34[0] = 0;
    unsigned int v37 = 0;
    uint64_t v19 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x38u, 1, "MRPCOL!?", v34, &v37);
    if (*((_DWORD *)a2 + 6)) {
      uint64_t v20 = a2[2];
    }
    else {
      uint64_t v20 = (char *)&unk_2140AAE54;
    }
    MrecHeaderCheckVersions(v20, "MRPCOL!?", v34[0], v37, 0x13u, 3u);
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRPCOL!?", v34[0], v37, 19, 3, v26, v27);
    unsigned int v36 = 0;
    readObject<unsigned short>(v19, (uint64_t)(this + 1), &v36);
    readObjectChecksumAndVerify(v19, v36);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x38u, v36);
    DgnDelete<DgnStream>((void (***)(void))v19);
  }
  else
  {
    *(void *)uint64_t v34 = 0;
    uint64_t v35 = 0;
    PhnMgr::getPublicPhnIndexArray(*this, (uint64_t)v34);
    uint64_t v21 = v35;
    if (v35)
    {
      LOWORD(v22) = 0;
      uint64_t v23 = *(unsigned __int16 **)v34;
      do
      {
        unsigned int v25 = *v23++;
        unsigned int v24 = v25;
        if (v25 <= (unsigned __int16)v22) {
          unsigned int v22 = (unsigned __int16)v22;
        }
        else {
          unsigned int v22 = v24;
        }
        --v21;
      }
      while (v21);
    }
    else
    {
      unsigned int v22 = 0;
    }
    unsigned int v29 = v22 + 1;
    unsigned int v30 = *((_DWORD *)this + 5);
    if (v30 <= v22) {
      DgnPrimArray<short>::reallocElts((uint64_t)(this + 1), v29 - v30, 0);
    }
    uint64_t v31 = 0;
    *((_DWORD *)this + 4) = v29;
    uint64_t v32 = this[1];
    if ((v29 & 0xFFFE) != 0) {
      uint64_t v33 = (unsigned __int16)v29;
    }
    else {
      uint64_t v33 = 1;
    }
    do
    {
      *((_WORD *)v32 + v31) = v31;
      ++v31;
    }
    while (v33 != v31);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v34);
  }
}

void sub_214033F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void PronCollMgr::savePronCollMgrToText(PronCollMgr *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v30);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v30, (uint64_t)a2, 0x3Au, a3);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v30, sPCT_Versions, (uint64_t)&v28, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v30, "PronCollation", (void *)(v28 + 8 * (v29 - 1)));
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  DgnString::DgnString((DgnString *)v23, "HumanReadable");
  unsigned int v11 = v25;
  if (v25 == HIDWORD(v25))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v24, 1, 1);
    unsigned int v11 = v25;
  }
  DgnString::DgnString((DgnString *)(v24 + 16 * v11), (const DgnString *)v23);
  LODWORD(v25) = v25 + 1;
  DgnString::~DgnString((DgnString *)v23);
  unsigned int v12 = v27;
  if (v27 == HIDWORD(v27))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v26, 1, 1);
    unsigned int v12 = v27;
  }
  *(_DWORD *)(v26 + 4 * v12) = 0;
  LODWORD(v27) = v12 + 1;
  DgnString::DgnString((DgnString *)v23, "CollatedHumanReadable");
  unsigned int v13 = v25;
  if (v25 == HIDWORD(v25))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v24, 1, 1);
    unsigned int v13 = v25;
  }
  DgnString::DgnString((DgnString *)(v24 + 16 * v13), (const DgnString *)v23);
  LODWORD(v25) = v25 + 1;
  DgnString::~DgnString((DgnString *)v23);
  unsigned int v14 = v27;
  if (v27 == HIDWORD(v27))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v26, 1, 1);
    unsigned int v14 = v27;
  }
  *(_DWORD *)(v26 + 4 * v14) = 0;
  LODWORD(v27) = v14 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v30, (uint64_t)&v26, (uint64_t)&v24);
  unsigned int v15 = *((_DWORD *)this + 4);
  if (v15)
  {
    for (unsigned __int16 i = 0; i < v15; ++i)
    {
      if (i)
      {
        uint64_t v17 = *(void *)this;
        if (*(unsigned __int16 *)(*(void *)this + 60) != i
          && *(unsigned __int16 *)(v17 + 56) != i
          && *(unsigned __int16 *)(v17 + 58) != i)
        {
          uint64_t v18 = *(void *)(v17 + 8) + 16 * i;
          if (*(_DWORD *)(v18 + 8)) {
            uint64_t v19 = *(char **)v18;
          }
          else {
            uint64_t v19 = (char *)&unk_2140AAE54;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v30, 0, v19);
          uint64_t v20 = *(unsigned __int16 *)(*((void *)this + 1) + 2 * i);
          if (v20 == 0xFFFF || (uint64_t v21 = *(void *)(*(void *)this + 8) + 16 * v20, !*(_DWORD *)(v21 + 8))) {
            unsigned int v22 = (char *)&unk_2140AAE54;
          }
          else {
            unsigned int v22 = *(char **)v21;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v30, 1u, v22);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v30);
          unsigned int v15 = *((_DWORD *)this + 4);
        }
      }
    }
  }
  DgnArray<DgnString>::releaseAll((uint64_t)&v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v28);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v30);
}

void sub_214034220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void PronCollMgr::savePronCollMgr(PronCollMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    PronCollMgr::savePronCollMgrToText(this, a2, a5);
  }
  else
  {
    uint64_t v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x38u, a5, "MRPCOL!?", 19, 3);
    int v10 = 0;
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 8, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x38u, v10);
    DgnDelete<DgnStream>((void (***)(void))v8);
  }
}

void PronCollMgr::printSize(PronCollMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 338, (DgnString *)&v42);
  if (v43) {
    uint64_t v16 = v42;
  }
  else {
    uint64_t v16 = &unk_2140AAE54;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140AAE54, a3, &unk_2140AAE54, v16);
  DgnString::~DgnString((DgnString *)&v42);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140AAE54);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 339, (DgnString *)&v42);
  if (v43) {
    uint64_t v26 = v42;
  }
  else {
    uint64_t v26 = &unk_2140AAE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_2140AAE54, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v42);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v27 = 12;
  }
  else {
    uint64_t v27 = 16;
  }
  uint64_t v28 = *((unsigned int *)this + 4);
  unsigned int v29 = *((_DWORD *)this + 5);
  if (v29 >= v28)
  {
    uint64_t v30 = 0;
    if ((int)v28 > 0) {
      uint64_t v27 = (v27 | 2) + 2 * (v28 - 1);
    }
    uint64_t v31 = v27 + 2 * (v29 - v28);
  }
  else
  {
    uint64_t v30 = 2 * v28;
    uint64_t v31 = v27;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 341, (DgnString *)&v42);
  if (v43) {
    unsigned int v36 = v42;
  }
  else {
    unsigned int v36 = &unk_2140AAE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_2140AAE54, (34 - a3), (34 - a3), v36, v31, v27, v30);
  DgnString::~DgnString((DgnString *)&v42);
  *a4 += v31;
  *a5 += v27;
  *a6 += v30;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/pcollmgr.cpp", 343, (DgnString *)&v42);
  if (v43) {
    uint64_t v41 = v42;
  }
  else {
    uint64_t v41 = &unk_2140AAE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, a3, &unk_2140AAE54, (35 - a3), (35 - a3), v41, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v42);
}

void sub_2140345D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t PronCollMgr::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  do
  {
    BOOL v3 = (int)v2 < 1;
    if ((int)v2 < 1) {
      break;
    }
    uint64_t v4 = *(void *)(a1 + 8) + 2 * v2;
    int v5 = *(unsigned __int16 *)(*(void *)(a2 + 8) - 2 + 2 * v2--);
  }
  while (*(unsigned __int16 *)(v4 - 2) == v5);
  return v3;
}

void MrecInitModule_paramspec_mrecutil(void)
{
  if (!gParDebugShowParamSetRefCounting)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowParamSetRefCounting", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugShowParamSetRefCounting = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugShowParamSetRefCounting);
  }
}

void ParamSpec::getDescription(ParamSpec *this, DgnString *a2)
{
  *((_DWORD *)a2 + 2) = 0;
  if (**((unsigned char **)this + 3))
  {
    DgnString::DgnString((DgnString *)v5);
    FileSpec::getRelativeSourceFileName(*((FileSpec **)this + 3), (DgnString *)v5, v4);
    DgnString::operator+=(a2, "[");
    DgnString::operator+=(a2, (uint64_t)v5);
    DgnString::operator+=(a2, "] ");
    DgnString::operator+=(a2, *((char **)this + 2));
    DgnString::~DgnString((DgnString *)v5);
  }
}

void sub_21403477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ParamSpecMgr::ParamSpecMgr(ParamSpecMgr *this)
{
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = (char *)this + 16;
  *(_OWORD *)this = 0u;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this, 256, 0);
  unsigned int v3 = *((_DWORD *)this + 7);
  if (v3 <= 0xFF) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v2, 256 - v3, 0);
  }
}

void sub_2140347F8(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnIOwnArray<ParamSpec *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void ParamSpecMgr::startupParamSpecMgrs(ParamSpecMgr *this)
{
  uint64_t v1 = 1u;
  do
  {
    uint64_t v2 = MemChunkAlloc(0x20uLL, 0);
    ParamSpecMgr::ParamSpecMgr((ParamSpecMgr *)v2);
    ParamSpecMgr::smpParamSpecMgrArray[v1++] = v3;
  }
  while (v1 != 13);
}

void ParamSpecMgr::printSize(ParamSpecMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 229, (DgnString *)&v43);
  if (v44) {
    uint64_t v16 = v43;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v43);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v21 = sizeObject<ParamSpec *>((uint64_t)this, 0);
    uint64_t v22 = sizeObject<ParamSpec *>((uint64_t)this, 1);
    getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 238, (DgnString *)&v43);
    if (v44) {
      uint64_t v27 = v43;
    }
    else {
      uint64_t v27 = &byte_2140B33BB;
    }
    xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v27, v21, v22, 0);
    DgnString::~DgnString((DgnString *)&v43);
    *a4 += v21;
    *a5 += v22;
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v28 = 12;
    }
    else {
      uint64_t v28 = 16;
    }
    uint64_t v29 = *((unsigned int *)this + 6);
    unsigned int v30 = *((_DWORD *)this + 7);
    if (v30 >= v29)
    {
      uint64_t v31 = 0;
      if ((int)v29 > 0) {
        v28 += 4 * (v29 - 1) + 4;
      }
      uint64_t v32 = v28 + 4 * (v30 - v29);
    }
    else
    {
      uint64_t v31 = 4 * v29;
      uint64_t v32 = v28;
    }
    getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 240, (DgnString *)&v43);
    if (v44) {
      uint64_t v37 = v43;
    }
    else {
      uint64_t v37 = &byte_2140B33BB;
    }
    xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v37, v32, v28, v31);
    DgnString::~DgnString((DgnString *)&v43);
    *a4 += v32;
    *a5 += v28;
    *a6 += v31;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 242, (DgnString *)&v43);
  if (v44) {
    unsigned int v42 = v43;
  }
  else {
    unsigned int v42 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v42, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v43);
}

void sub_214034B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<ParamSpec *>(uint64_t a1, uint64_t a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t ParamSpecMgr::getParamId(unsigned int a1, const char *a2)
{
  return ParamSpecMgr::getParamIdByParamName(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + a1), a2);
}

uint64_t ParamSpecMgr::getParamIdByParamName(ParamSpecMgr *this, const char *__s2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *((unsigned int *)this + 2);
  while (v5 != v4)
  {
    if (!strcmp(*(const char **)(*(void *)(*(void *)this + 8 * v4++) + 8), __s2)) {
      return (unsigned __int16)v4;
    }
  }
  LOWORD(v4) = -1;
  return (unsigned __int16)v4;
}

unint64_t ParamSpecMgr::addParam(unint64_t this, ParamSpec *a2)
{
  unint64_t v3 = this;
  unsigned int v4 = *(_DWORD *)(this + 8);
  if (v4 == *(_DWORD *)(this + 12))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this, 1, 1);
    unsigned int v4 = *(_DWORD *)(v3 + 8);
  }
  *(void *)(*(void *)v3 + 8 * v4) = a2;
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4 + 1;
  return this;
}

uint64_t ParamSpecMgr::sortParams(ParamSpecMgr *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 6) = 0;
  if (*((_DWORD *)this + 2))
  {
    LODWORD(v3) = 0;
    unsigned int v4 = 0;
    do
    {
      if (v3 == *((_DWORD *)this + 7))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)v2, 1, 1);
        LODWORD(v3) = *((_DWORD *)this + 6);
      }
      uint64_t v5 = *((void *)this + 2);
      *(_DWORD *)(v5 + 4 * v3) = v4;
      unint64_t v3 = (*((_DWORD *)this + 6) + 1);
      *((_DWORD *)this + 6) = v3;
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 2));
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v5 = *v2;
  }

  return mrec_qsort_r<ParamSpecMgr>(v5, v3, (const char *)4, this);
}

uint64_t mrec_qsort_r<ParamSpecMgr>(uint64_t result, unint64_t a2, const char *a3, void *a4)
{
  unint64_t v5 = a2;
  unint64_t v6 = result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != (const char *)8;
  }
  BOOL v111 = ((result | a3) & 7) == 0;
  int v112 = v8;
  if (a2 < 7)
  {
LABEL_120:
    if ((uint64_t)(v5 * (void)a3) > (uint64_t)a3)
    {
      uint64_t v82 = (const char *)(v6 + v5 * (void)a3);
      uint64_t v83 = &a3[v6];
      unint64_t v84 = v6;
      do
      {
        if ((unint64_t)v83 > v6)
        {
          unint64_t v85 = v84;
          uint64_t v86 = (char *)v83;
          do
          {
            uint64_t v87 = v86;
            v86 += v7;
            uint64_t result = DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *(unsigned int *)v86) + 8), *(const char **)(*(void *)(*a4 + 8 * *(unsigned int *)v87) + 8), a3);
            if ((int)result < 1) {
              break;
            }
            if (v112)
            {
              if (v111)
              {
                uint64_t v88 = 0;
                uint64_t v89 = &a3[v85];
                do
                {
                  uint64_t v90 = *(void *)&v89[8 * v88];
                  *(void *)&v89[8 * v88] = *(void *)(v85 + 8 * v88);
                  *(void *)(v85 + 8 * v88++) = v90;
                }
                while ((unint64_t)a3 >> 3 != v88);
              }
              else
              {
                uint64_t v92 = 0;
                uint64_t v93 = &a3[v85];
                do
                {
                  char v94 = v92[(void)v93];
                  v92[(void)v93] = v92[v85];
                  (v92++)[v85] = v94;
                }
                while (a3 != v92);
              }
            }
            else
            {
              uint64_t v91 = *(void *)v87;
              *(void *)uint64_t v87 = *(void *)v86;
              *(void *)uint64_t v86 = v91;
            }
            v85 += v7;
          }
          while ((unint64_t)v86 > v6);
        }
        uint64_t v83 = &a3[(void)v83];
        v84 += (unint64_t)a3;
      }
      while (v83 < v82);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = (unint64_t)a3 >> 3;
  BOOL v107 = a3 != (const char *)8;
  while (1)
  {
    char v11 = (uint64_t *)(v6 + (v5 >> 1) * (void)a3);
    unint64_t v109 = v5;
    if (v5 == 7) {
      goto LABEL_47;
    }
    uint64_t v12 = (unsigned int *)(v6 + (v5 - 1) * (void)a3);
    if (v5 < 0x29)
    {
      uint64_t v16 = (unsigned int *)v6;
      goto LABEL_38;
    }
    char v108 = (unsigned int *)(v6 + (v5 - 1) * (void)a3);
    unint64_t v13 = v5 >> 3;
    uint64_t v14 = v9;
    unint64_t v15 = v13 * (void)a3;
    uint64_t v16 = (unsigned int *)(v6 + v13 * (void)a3);
    uint64_t v17 = (unsigned int *)(v6 + 2 * v13 * (void)a3);
    int v18 = DgnString::compareNoCase(*(DgnString **)(*(void *)(*v14 + 8 * *(unsigned int *)v6) + 8), *(const char **)(*(void *)(*v14 + 8 * *v16) + 8), a3);
    int v20 = DgnString::compareNoCase(*(DgnString **)(*(void *)(*v14 + 8 * *v16) + 8), *(const char **)(*(void *)(*v14 + 8 * *v17) + 8), v19);
    if (v18 < 0)
    {
      if ((v20 & 0x80000000) == 0)
      {
        if ((int)DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *(unsigned int *)v6) + 8), *(const char **)(*(void *)(*a4 + 8 * *v17) + 8), v21) >= 0)uint64_t v16 = (unsigned int *)v6; {
        else
        }
          uint64_t v16 = (unsigned int *)(v6 + 2 * v15);
      }
    }
    else if (v20 <= 0)
    {
      if ((int)DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *(unsigned int *)v6) + 8), *(const char **)(*(void *)(*a4 + 8 * *v17) + 8), v21) >= 0)uint64_t v16 = (unsigned int *)(v6 + 2 * v15); {
      else
      }
        uint64_t v16 = (unsigned int *)v6;
    }
    uint64_t v22 = (unsigned int *)((char *)v11 - v15);
    uint64_t v23 = (unsigned int *)((char *)v11 + v15);
    int v24 = DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *(unsigned int *)((char *)v11 - v15)) + 8), *(const char **)(*(void *)(*a4 + 8 * *(unsigned int *)v11) + 8), v21);
    int v26 = DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *(unsigned int *)v11) + 8), *(const char **)(*(void *)(*a4 + 8 * *(unsigned int *)((char *)v11 + v15)) + 8), v25);
    if (v24 < 0)
    {
      if ((v26 & 0x80000000) == 0)
      {
        if ((int)DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *v22) + 8), *(const char **)(*(void *)(*a4 + 8 * *v23) + 8), v27) >= 0)char v11 = (uint64_t *)((char *)v11 - v15); {
        else
        }
          char v11 = (uint64_t *)((char *)v11 + v15);
      }
    }
    else if (v26 <= 0)
    {
      if ((int)DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *v22) + 8), *(const char **)(*(void *)(*a4 + 8 * *v23) + 8), v27) >= 0)char v11 = (uint64_t *)((char *)v11 + v15); {
      else
      }
        char v11 = (uint64_t *)((char *)v11 - v15);
    }
    uint64_t v28 = -(uint64_t)v15;
    uint64_t v29 = (unsigned int *)((char *)v108 - 2 * v15);
    uint64_t v12 = (unsigned int *)((char *)v108 + v28);
    int v30 = DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *v29) + 8), *(const char **)(*(void *)(*a4 + 8 * *(unsigned int *)((char *)v108 + v28)) + 8), v27);
    int v32 = DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *v12) + 8), *(const char **)(*(void *)(*a4 + 8 * *v108) + 8), v31);
    if (v30 < 0)
    {
      if (v32 < 0)
      {
LABEL_36:
        uint64_t v9 = a4;
        goto LABEL_37;
      }
      uint64_t v33 = a4;
      uint64_t v12 = v108;
      if ((int)DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *v29) + 8), *(const char **)(*(void *)(*a4 + 8 * *v108) + 8), a3) >= 0)uint64_t v12 = v29; {
    }
      }
    else
    {
      if (v32 > 0) {
        goto LABEL_36;
      }
      uint64_t v33 = a4;
      uint64_t v12 = v108;
      if ((int)DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *v29) + 8), *(const char **)(*(void *)(*a4 + 8 * *v108) + 8), a3) < 0)uint64_t v12 = v29; {
    }
      }
    uint64_t v9 = v33;
LABEL_37:
    unint64_t v5 = v109;
LABEL_38:
    int v34 = DgnString::compareNoCase(*(DgnString **)(*(void *)(*v9 + 8 * *v16) + 8), *(const char **)(*(void *)(*v9 + 8 * *(unsigned int *)v11) + 8), a3);
    uint64_t result = DgnString::compareNoCase(*(DgnString **)(*(void *)(*v9 + 8 * *(unsigned int *)v11) + 8), *(const char **)(*(void *)(*v9 + 8 * *v12) + 8), v35);
    if (v34 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = DgnString::compareNoCase(*(DgnString **)(*(void *)(*v9 + 8 * *v16) + 8), *(const char **)(*(void *)(*v9 + 8 * *v12) + 8), a3);
        if ((int)result >= 0) {
          char v11 = (uint64_t *)v16;
        }
        else {
          char v11 = (uint64_t *)v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = DgnString::compareNoCase(*(DgnString **)(*(void *)(*v9 + 8 * *v16) + 8), *(const char **)(*(void *)(*v9 + 8 * *v12) + 8), a3);
      if ((int)result >= 0) {
        char v11 = (uint64_t *)v12;
      }
      else {
        char v11 = (uint64_t *)v16;
      }
    }
LABEL_47:
    if (v112)
    {
      if (v111)
      {
        uint64_t v36 = (uint64_t *)v6;
        unint64_t v37 = (unint64_t)a3 >> 3;
        do
        {
          uint64_t v38 = *v36;
          *v36++ = *v11;
          *v11++ = v38;
          --v37;
        }
        while (v37);
      }
      else
      {
        uint64_t v40 = a3;
        uint64_t v41 = (char *)v6;
        do
        {
          char v42 = *v41;
          *v41++ = *(unsigned char *)v11;
          *(unsigned char *)char v11 = v42;
          char v11 = (uint64_t *)((char *)v11 + 1);
          --v40;
        }
        while (v40);
      }
    }
    else
    {
      uint64_t v39 = *(void *)v6;
      *(void *)unint64_t v6 = *v11;
      *char v11 = v39;
    }
    int v43 = 0;
    int v44 = (char *)&a3[v6];
    unsigned int v45 = (char *)(v6 + (v5 - 1) * (void)a3);
    uint64_t v46 = v45;
    uint64_t v47 = (char *)&a3[v6];
LABEL_56:
    while (v47 <= v46)
    {
      uint64_t result = DgnString::compareNoCase(*(DgnString **)(*(void *)(*v9 + 8 * *(unsigned int *)v47) + 8), *(const char **)(*(void *)(*v9 + 8 * *(unsigned int *)v6) + 8), a3);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v112)
        {
          if (v111)
          {
            uint64_t v48 = 0;
            do
            {
              uint64_t v49 = *(void *)&v44[8 * v48];
              *(void *)&v44[8 * v48] = *(void *)&v47[8 * v48];
              *(void *)&v47[8 * v48++] = v49;
            }
            while (v10 != v48);
          }
          else
          {
            unint64_t v58 = 0;
            do
            {
              char v59 = v58[(void)v44];
              v58[(void)v44] = v58[(void)v47];
              (v58++)[(void)v47] = v59;
            }
            while (a3 != v58);
          }
        }
        else
        {
          uint64_t v57 = *(void *)v44;
          *(void *)int v44 = *(void *)v47;
          *(void *)uint64_t v47 = v57;
        }
        int v44 = (char *)&a3[(void)v44];
        int v43 = 1;
      }
      uint64_t v47 = (char *)&a3[(void)v47];
    }
    while (v47 <= v46)
    {
      uint64_t result = DgnString::compareNoCase(*(DgnString **)(*(void *)(*v9 + 8 * *(unsigned int *)v46) + 8), *(const char **)(*(void *)(*v9 + 8 * *(unsigned int *)v6) + 8), a3);
      if ((result & 0x80000000) != 0)
      {
        if (v112)
        {
          if (v111)
          {
            uint64_t v55 = 0;
            do
            {
              uint64_t v56 = *(void *)&v47[8 * v55];
              *(void *)&v47[8 * v55] = *(void *)&v46[8 * v55];
              *(void *)&v46[8 * v55++] = v56;
            }
            while (v10 != v55);
          }
          else
          {
            uint64_t v61 = 0;
            do
            {
              char v62 = v61[(void)v47];
              v61[(void)v47] = v61[(void)v46];
              (v61++)[(void)v46] = v62;
            }
            while (a3 != v61);
          }
        }
        else
        {
          uint64_t v60 = *(void *)v47;
          *(void *)uint64_t v47 = *(void *)v46;
          *(void *)uint64_t v46 = v60;
        }
        uint64_t v47 = (char *)&a3[(void)v47];
        v46 += v7;
        int v43 = 1;
        goto LABEL_56;
      }
      if (!result)
      {
        if (v112)
        {
          if (v111)
          {
            uint64_t v50 = 0;
            do
            {
              uint64_t v51 = *(void *)&v46[8 * v50];
              *(void *)&v46[8 * v50] = *(void *)&v45[8 * v50];
              *(void *)&v45[8 * v50++] = v51;
            }
            while (v10 != v50);
          }
          else
          {
            uint64_t v53 = 0;
            do
            {
              char v54 = v53[(void)v46];
              v53[(void)v46] = v53[(void)v45];
              (v53++)[(void)v45] = v54;
            }
            while (a3 != v53);
          }
        }
        else
        {
          uint64_t v52 = *(void *)v46;
          *(void *)uint64_t v46 = *(void *)v45;
          *(void *)unsigned int v45 = v52;
        }
        v45 += v7;
        int v43 = 1;
      }
      v46 += v7;
    }
    unsigned int v63 = (const char *)(v6 + v109 * (void)a3);
    if (!v43) {
      break;
    }
    int64_t v64 = v47 - v44;
    if ((uint64_t)&v44[-v6] >= v47 - v44) {
      unint64_t v65 = v47 - v44;
    }
    else {
      unint64_t v65 = (unint64_t)&v44[-v6];
    }
    if (v65)
    {
      if (v111)
      {
        uint64_t v66 = &v47[-v65];
        unint64_t v67 = v65 >> 3;
        uint64_t v68 = (uint64_t *)v6;
        do
        {
          uint64_t v69 = *v68;
          *v68++ = *(void *)v66;
          *(void *)uint64_t v66 = v69;
          v66 += 8;
          --v67;
        }
        while (v67);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v65;
        uint64_t v71 = (char *)v6;
        do
        {
          char v72 = *v71;
          *v71++ = v47[v70];
          v47[v70] = v72;
          BOOL v73 = __CFADD__(v70++, 1);
        }
        while (!v73);
      }
    }
    int64_t v74 = v45 - v46;
    if (v45 - v46 >= v63 - &a3[(void)v45]) {
      unint64_t v75 = v63 - &a3[(void)v45];
    }
    else {
      unint64_t v75 = v45 - v46;
    }
    if (v75)
    {
      if (v111)
      {
        uint64_t v76 = (char *)&v63[-v75];
        unint64_t v77 = v75 >> 3;
        do
        {
          uint64_t v78 = *(void *)v47;
          *(void *)uint64_t v47 = *(void *)v76;
          v47 += 8;
          *(void *)uint64_t v76 = v78;
          v76 += 8;
          --v77;
        }
        while (v77);
      }
      else
      {
        uint64_t v79 = -(uint64_t)v75;
        do
        {
          char v80 = *v47;
          *v47++ = v63[v79];
          v63[v79] = v80;
          BOOL v73 = __CFADD__(v79++, 1);
        }
        while (!v73);
      }
    }
    if (v64 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<ParamSpecMgr>(v6, v64 / (unint64_t)a3, a3, a4);
    }
    if (v74 <= (uint64_t)a3) {
      return result;
    }
    unint64_t v6 = (unint64_t)&v63[-v74];
    unint64_t v5 = v74 / (unint64_t)a3;
    int v81 = v107;
    if ((((v63 - v74) | a3) & 7) != 0) {
      int v81 = 2;
    }
    BOOL v111 = (((v63 - v74) | a3) & 7) == 0;
    int v112 = v81;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_120;
    }
  }
  uint64_t v95 = &a3[v6];
  if ((uint64_t)(v109 * (void)a3) > (uint64_t)a3)
  {
    unint64_t v96 = v6;
    do
    {
      if ((unint64_t)v95 > v6)
      {
        unint64_t v97 = v96;
        unint64_t v98 = (char *)v95;
        do
        {
          uint64_t v99 = v98;
          v98 += v7;
          uint64_t result = DgnString::compareNoCase(*(DgnString **)(*(void *)(*a4 + 8 * *(unsigned int *)v98) + 8), *(const char **)(*(void *)(*a4 + 8 * *(unsigned int *)v99) + 8), a3);
          if ((int)result < 1) {
            break;
          }
          if (v112)
          {
            if (v111)
            {
              uint64_t v100 = 0;
              unsigned int v101 = &a3[v97];
              do
              {
                uint64_t v102 = *(void *)&v101[8 * v100];
                *(void *)&v101[8 * v100] = *(void *)(v97 + 8 * v100);
                *(void *)(v97 + 8 * v100++) = v102;
              }
              while (v10 != v100);
            }
            else
            {
              uint64_t v104 = 0;
              uint64_t v105 = &a3[v97];
              do
              {
                char v106 = v104[(void)v105];
                v104[(void)v105] = v104[v97];
                (v104++)[v97] = v106;
              }
              while (a3 != v104);
            }
          }
          else
          {
            uint64_t v103 = *(void *)v99;
            *(void *)uint64_t v99 = *(void *)v98;
            *(void *)unint64_t v98 = v103;
          }
          v97 += v7;
        }
        while ((unint64_t)v98 > v6);
      }
      uint64_t v95 = &a3[(void)v95];
      v96 += (unint64_t)a3;
    }
    while (v95 < v63);
  }
  return result;
}

uint64_t ParamSpecMgr::getParamByParamId(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2 - 1;
  if ((a2 - 1) >= *((_DWORD *)this + 2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 289, (uint64_t)"mrecutil/paramspec", 3, (uint64_t)"%d", a7, a8, a2);
  }
  return *(void *)(*(void *)this + 8 * v9);
}

unint64_t ParamSpecMgr::getAllParamIdsSortedByName(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  unsigned int v8 = *(_DWORD *)(result + 24);
  unsigned int v9 = *(_DWORD *)(a2 + 12);
  if (v8 > v9)
  {
    uint64_t result = DgnPrimArray<short>::reallocElts(a2, v8 - v9, 0);
    unsigned int v8 = *(_DWORD *)(v7 + 24);
  }
  if (v8)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(unsigned int *)(*(void *)(v7 + 16) + 4 * v10);
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)v7 + 8 * v11) + 32))(*(void *)(*(void *)v7 + 8 * v11), a3, a4);
      if (result)
      {
        unsigned int v12 = *(_DWORD *)(a2 + 8);
        if (v12 == *(_DWORD *)(a2 + 12))
        {
          uint64_t result = DgnPrimArray<short>::reallocElts(a2, 1, 1);
          unsigned int v12 = *(_DWORD *)(a2 + 8);
        }
        *(_WORD *)(*(void *)a2 + 2 * v12) = v11 + 1;
        *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12 + 1;
      }
      ++v10;
    }
    while (v10 < *(unsigned int *)(v7 + 24));
  }
  return result;
}

uint64_t ParamSpecMgr::getNumParamIds(ParamSpecMgr *this)
{
  return (unsigned __int16)(*((_WORD *)this + 12) + 1);
}

uint64_t ParamSpecMgr::ParamGetDefault_BOOL(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  char v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    uint64_t v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 359, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v12, v13, v10);
    uint64_t v17 = 0;
  }

  return BoolParamSpec::getDefault(v17, v9, v8);
}

uint64_t BoolParamSpec::getDefault(BoolParamSpec *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 5);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[3 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[3 * v4];
        ++v6;
        if (v5 < a2) {
          return BYTE1(v3[3 * v4 + 2]);
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return BYTE1(v3[3 * v4 + 2]);
}

uint64_t ParamSpecMgr::ParamGetDefault_int(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  char v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    uint64_t v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 367, (uint64_t)"mrecutil/paramspec", 3, (uint64_t)"%d", v12, v13, v10);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 368, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v18, v19, v10);
    uint64_t v17 = 0;
  }

  return IntParamSpec::getDefault(v17, v9, v8);
}

uint64_t IntParamSpec::getDefault(IntParamSpec *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[6 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[6 * v4];
        ++v6;
        if (v5 < a2) {
          return v3[6 * v4 + 3];
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return v3[6 * v4 + 3];
}

uint64_t ParamSpecMgr::ParamGetDefault_string(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  char v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    uint64_t v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 377, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v12, v13, v10);
    uint64_t v17 = 0;
  }

  return StringParamSpec::getDefault(v17, v9, v8);
}

uint64_t StringParamSpec::getDefault(StringParamSpec *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 6);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[6 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[6 * v4];
        ++v6;
        if (v5 < a2) {
          return *(void *)&v3[6 * v4 + 4];
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return *(void *)&v3[6 * v4 + 4];
}

uint64_t ParamSpecMgr::ParamGetDefault_enum(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    uint64_t v12 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 388, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v10, v11, v8);
    uint64_t v15 = 0;
  }

  return EnumParamSpec::getDefault(v15);
}

char *ParamSpecMgr::ParamGetDefault_enumAsString(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  char v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    uint64_t v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 401, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v12, v13, v10);
    uint64_t v17 = 0;
  }

  return EnumParamSpec::getDefaultAsString(v17, v9, v8);
}

char *EnumParamSpec::getDefaultAsString(EnumParamSpec *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[84 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[84 * v4];
        ++v6;
        if (v5 < a2) {
          goto LABEL_10;
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
LABEL_10:
  uint64_t result = *(char **)&v3[84 * v4 + 6];
  if (!*result) {
    return &byte_2140B33BB;
  }
  if (!LOBYTE(v3[84 * v4 + 4]))
  {
    unsigned int v8 = 1;
    uint64_t result = &byte_2140B33BB;
    while (1)
    {
      unsigned int v9 = *(unsigned char **)&v3[84 * v4 + 6 + 8 * v8];
      if (!*v9) {
        break;
      }
      if (LOBYTE(v3[84 * v4 + 4 + 8 * v8++])) {
        return v9;
      }
    }
  }
  return result;
}

double ParamSpecMgr::ParamGetDefault_double(ParamSpecMgr *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  char v10 = a2;
  ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(this, a2, a3, a4, a5, a6, a7, a8);
  if (ParamByParamId)
  {
    uint64_t v14 = ParamByParamId;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 412, (uint64_t)"mrecutil/paramspec", 4, (uint64_t)"%d", v12, v13, v10);
    uint64_t v17 = 0;
  }

  return DoubleParamSpec::getDefault(v17, v9, v8);
}

double DoubleParamSpec::getDefault(DoubleParamSpec *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[10 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[10 * v4];
        ++v6;
        if (v5 < a2) {
          return *(double *)&v3[10 * v4 + 4];
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return *(double *)&v3[10 * v4 + 4];
}

void *IntParamSpec::IntParamSpec(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[2] = a4;
  result[3] = a3;
  *uint64_t result = &unk_26C4DFA70;
  result[1] = a2;
  result[4] = a5;
  return result;
}

void IntParamSpec::~IntParamSpec(IntParamSpec *this)
{
}

uint64_t IntParamSpec::sizeObject(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 32)) {
    BOOL v2 = (a2 & 0xFFFFFFFE) == 2;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = 20;
  if (v2) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 24;
  }
  if (a2 == 3) {
    uint64_t v4 = 0;
  }
  return v4 + v3;
}

uint64_t IntParamSpec::getDescription(IntParamSpec *this, DgnString *a2)
{
  ParamSpec::getDescription(this, a2);
  return DgnString::printfAppend(a2, " ==> Range %d to %d", v4, v5, v6, *(unsigned int *)(*((void *)this + 4) + 16), *(unsigned int *)(*((void *)this + 4) + 20));
}

void IntParamSpec::validateValue(IntParamSpec *this, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = (unsigned int *)*((void *)this + 4);
  LODWORD(v9) = a4 | a3;
  if (a4 | a3)
  {
    unsigned int v10 = *v8;
    if (*v8 >= a3)
    {
      uint64_t v9 = 0;
      int v11 = 0;
      while (v10 != a3 || v8[6 * v9 + 1] > a4)
      {
        uint64_t v9 = (v11 + 1);
        unsigned int v10 = v8[6 * v9];
        ++v11;
        if (v10 < a3) {
          goto LABEL_10;
        }
      }
      LODWORD(v9) = v11;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
LABEL_10:
  if (v8[6 * v9 + 3] != a2
    && ((int)v8[6 * v9 + 4] > a2 || (int)v8[6 * v9 + 5] < a2))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 480, (uint64_t)"mrecutil/paramspec", 1, (uint64_t)"%.500s", a7, a8, *((void *)this + 1));
  }
}

void *EnumParamSpec::EnumParamSpec(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[2] = a4;
  result[3] = a3;
  *uint64_t result = &unk_26C4DFF58;
  result[1] = a2;
  result[4] = a5;
  return result;
}

void EnumParamSpec::~EnumParamSpec(EnumParamSpec *this)
{
}

uint64_t EnumParamSpec::sizeObject(uint64_t a1, int a2)
{
  int v3 = gShadowDiagnosticShowIdealizedObjectSizes;
  uint64_t v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 8;
  }
  if (a2 == 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  if (a2 != 2)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      v5 += sizeObject(v6, a2);
    }
  }
  uint64_t v7 = 8;
  if (!v3) {
    uint64_t v7 = 16;
  }
  if (a2 == 3) {
    uint64_t v7 = 0;
  }
  return v5 + v7;
}

DgnString *EnumParamSpec::getDescription(EnumParamSpec *this, DgnString *a2)
{
  ParamSpec::getDescription(this, a2);
  uint64_t result = DgnString::operator+=(a2, " ==> LegalVals: ");
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *(char **)(v5 + 24);
  if (*v6)
  {
    uint64_t v7 = (char **)(v5 + 40);
    do
    {
      DgnString::operator+=(a2, v6);
      uint64_t result = DgnString::operator+=(a2, " ");
      if (*v7)
      {
        if (**v7)
        {
          DgnString::operator+=(a2, "[");
          DgnString::operator+=(a2, *v7);
          uint64_t result = DgnString::operator+=(a2, "] ");
        }
      }
      uint64_t v6 = v7[2];
      v7 += 4;
    }
    while (*v6);
  }
  return result;
}

void EnumParamSpec::validateValue(EnumParamSpec *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 4);
  int v9 = **(unsigned __int8 **)(v8 + 24);
  if (**(unsigned char **)(v8 + 24))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v9 = 0;
    int v12 = 0;
    while (1)
    {
      if (*(unsigned char *)(v8 + v10 + 16)) {
        int v12 = *(_DWORD *)(v8 + v10 + 32);
      }
      if (v10)
      {
        int v13 = *(_DWORD *)(v8 + v10 + 32);
        if (v9 >= v13) {
          int v9 = *(_DWORD *)(v8 + v10 + 32);
        }
        if (v11 >= v13) {
          goto LABEL_12;
        }
      }
      else
      {
        int v13 = *(_DWORD *)(v8 + 32);
        int v9 = v13;
      }
      int v11 = v13;
LABEL_12:
      int v14 = **(unsigned __int8 **)(v8 + v10 + 56);
      v10 += 32;
      if (!v14) {
        goto LABEL_15;
      }
    }
  }
  int v12 = 0;
  int v11 = 0;
LABEL_15:
  if (v12 != a2 && (v9 > a2 || v11 < a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 646, (uint64_t)"mrecutil/paramspec", 1, (uint64_t)"%.500s", a7, a8, *((void *)this + 1));
  }
}

uint64_t EnumParamSpec::convertEnumStringToInt(EnumParamSpec *this, const char *__s1, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *((void *)this + 4);
  int v11 = *(const char **)(v10 + 24);
  if (*v11)
  {
    int v12 = (void *)(v10 + 32);
    while (strcmp(__s1, v11))
    {
      int v11 = (const char *)v12[3];
      v12 += 4;
      if (!*v11) {
        goto LABEL_5;
      }
    }
    return *(unsigned int *)v12;
  }
  else
  {
LABEL_5:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 661, (uint64_t)"mrecutil/paramspec", 2, (uint64_t)"%.500s %.500s", a7, a8, *((void *)this + 1));
    return 0;
  }
}

uint64_t EnumParamSpec::checkStringEnumValue(EnumParamSpec *this, char *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6 = (unsigned int *)*((void *)this + 4);
  LODWORD(v7) = a4 | a3;
  if (a4 | a3)
  {
    unsigned int v8 = *v6;
    if (*v6 >= a3)
    {
      uint64_t v7 = 0;
      int v9 = 0;
      while (v8 != a3 || v6[84 * v7 + 1] > a4)
      {
        uint64_t v7 = (v9 + 1);
        unsigned int v8 = v6[84 * v7];
        ++v9;
        if (v8 < a3) {
          goto LABEL_10;
        }
      }
      LODWORD(v7) = v9;
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
LABEL_10:
  uint64_t v10 = *(unsigned char **)&v6[84 * v7 + 6];
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = 336 * v7 + 56;
    do
    {
      int v13 = ustrcmp(v10, (unsigned __int8 *)a2);
      uint64_t v11 = v13 == 0;
      if (!v13) {
        break;
      }
      uint64_t v10 = *(unsigned char **)(*((void *)this + 4) + v12);
      v12 += 32;
    }
    while (*v10);
  }
  return v11;
}

void *BoolParamSpec::BoolParamSpec(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[2] = a4;
  result[3] = a3;
  *uint64_t result = &unk_26C4DFE98;
  result[1] = a2;
  result[5] = a5;
  return result;
}

void BoolParamSpec::~BoolParamSpec(BoolParamSpec *this)
{
}

uint64_t BoolParamSpec::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 16;
  }
  if (a2 == 3)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  return v2 | v3;
}

void *DoubleParamSpec::DoubleParamSpec(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result[2] = a4;
  result[3] = a3;
  *uint64_t result = &unk_26C4E0B38;
  result[1] = a2;
  result[4] = a5;
  return result;
}

void DoubleParamSpec::~DoubleParamSpec(DoubleParamSpec *this)
{
}

uint64_t DoubleParamSpec::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 16;
  }
  if (a2 == 3) {
    return 0;
  }
  else {
    return v2;
  }
}

void DoubleParamSpec::getDescription(DoubleParamSpec *this, DgnString *a2)
{
  ParamSpec::getDescription(this, a2);
  DgnString::operator+=(a2, " ==> Range ");
  DgnString::formatFloat((DgnString *)0xE, *(double *)(*((void *)this + 4) + 24), (DgnString *)v4);
  DgnString::operator+=(a2, (uint64_t)v4);
  DgnString::~DgnString((DgnString *)v4);
  DgnString::operator+=(a2, " to ");
  DgnString::formatFloat((DgnString *)0xE, *(double *)(*((void *)this + 4) + 32), (DgnString *)v4);
  DgnString::operator+=(a2, (uint64_t)v4);
  DgnString::~DgnString((DgnString *)v4);
}

void sub_214036AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DoubleParamSpec::validateValue(DoubleParamSpec *this, double a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = (unsigned int *)*((void *)this + 4);
  LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a4 | a3;
  if (a4 | a3)
  {
    unsigned int v11 = *v9;
    if (*v9 >= a3)
    {
      uint64_t v10 = 0;
      int v12 = 0;
      while (v11 != a3 || v9[10 * v10 + 1] > a4)
      {
        uint64_t v10 = (v12 + 1);
        unsigned int v11 = v9[10 * v10];
        ++v12;
        if (v11 < a3) {
          goto LABEL_10;
        }
      }
      LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v12;
    }
    else
    {
      LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
    }
  }
LABEL_10:
  if (*(double *)&v9[10 * v10 + 4] != a2
    && (*(double *)&v9[10 * v10 + 6] > a2 || *(double *)&v9[10 * v10 + 8] < a2))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/paramspec.cpp", 808, (uint64_t)"mrecutil/paramspec", 1, (uint64_t)"%.500s", a8, a9, *((void *)this + 1));
  }
}

void *StringParamSpec::StringParamSpec(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[2] = a4;
  a1[3] = a3;
  *a1 = &unk_26C4E0ED0;
  a1[1] = a2;
  DgnString::DgnString((DgnString *)(a1 + 4));
  a1[6] = a5;
  return a1;
}

void StringParamSpec::~StringParamSpec(StringParamSpec *this)
{
  *(void *)this = &unk_26C4E0ED0;
  DgnString::~DgnString((StringParamSpec *)((char *)this + 32));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E0ED0;
  DgnString::~DgnString((StringParamSpec *)((char *)this + 32));

  JUMPOUT(0x216698730);
}

uint64_t StringParamSpec::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 16;
  }
  if (a2 == 3) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  return v3 + sizeObject(a1 + 32);
}

uint64_t IntParamSpec::getType(IntParamSpec *this)
{
  return 2;
}

uint64_t IntParamSpec::isPresent(IntParamSpec *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[6 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[6 * v4];
        ++v6;
        if (v5 < a2) {
          return LOBYTE(v3[6 * v4 + 2]);
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[6 * v4 + 2]);
}

uint64_t EnumParamSpec::getType(EnumParamSpec *this)
{
  return 5;
}

uint64_t EnumParamSpec::isPresent(EnumParamSpec *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[84 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[84 * v4];
        ++v6;
        if (v5 < a2) {
          return LOBYTE(v3[84 * v4 + 2]);
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[84 * v4 + 2]);
}

uint64_t BoolParamSpec::getType(BoolParamSpec *this)
{
  return 1;
}

uint64_t BoolParamSpec::isPresent(BoolParamSpec *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[3 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[3 * v4];
        ++v6;
        if (v5 < a2) {
          return LOBYTE(v3[3 * v4 + 2]);
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[3 * v4 + 2]);
}

uint64_t DoubleParamSpec::getType(DoubleParamSpec *this)
{
  return 3;
}

uint64_t DoubleParamSpec::isPresent(DoubleParamSpec *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[10 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[10 * v4];
        ++v6;
        if (v5 < a2) {
          return LOBYTE(v3[10 * v4 + 2]);
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[10 * v4 + 2]);
}

uint64_t StringParamSpec::getType(StringParamSpec *this)
{
  return 4;
}

uint64_t StringParamSpec::isPresent(StringParamSpec *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 6);
  LODWORD(v4) = a3 | a2;
  if (a3 | a2)
  {
    unsigned int v5 = *v3;
    if (*v3 >= a2)
    {
      uint64_t v4 = 0;
      int v6 = 0;
      while (v5 != a2 || v3[6 * v4 + 1] > a3)
      {
        uint64_t v4 = (v6 + 1);
        unsigned int v5 = v3[6 * v4];
        ++v6;
        if (v5 < a2) {
          return LOBYTE(v3[6 * v4 + 2]);
        }
      }
      LODWORD(v4) = v6;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  return LOBYTE(v3[6 * v4 + 2]);
}

void *DgnIOwnArray<ParamSpec *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<ParamSpec>(*(void (****)(void))(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void (***DgnDelete<ParamSpec>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

void MrecInitModule_recentb_lm(void)
{
  if (!gParDebugShowRecentBufferOnLoad)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowRecentBufferOnLoad", byte_2140AAEE8, byte_2140AAEE8, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugShowRecentBufferOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowRecentBufferOnLoad);
  }
  if (!gParDebugRecentBufferScoring)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugRecentBufferScoring", byte_2140AAEE8, byte_2140AAEE8, 0, 0, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDebugRecentBufferScoring = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugRecentBufferScoring);
  }
  if (!gParDebugRecentBufferAddDelete)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugRecentBufferAddDelete", byte_2140AAEE8, byte_2140AAEE8, 0, 0, 0);
    void *v5 = &unk_26C4E0858;
    gParDebugRecentBufferAddDelete = (uint64_t)v5;
    int v6 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v6, (GlobalParam **)&gParDebugRecentBufferAddDelete);
  }
}

void RecentBuffer::RecentBuffer(RecentBuffer *this, int a2, const WordList *a3, LanguageModel *a4, LanguageModel *a5)
{
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash((uint64_t)this + 80, 0, 16);
  DgnString::DgnString((RecentBuffer *)((char *)this + 192));
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::Hash((uint64_t)this + 304, 0, 16);
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 11MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((void *)this + 54) = 0;
  *((_OWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 29) = 0u;
  DgnString::DgnString((RecentBuffer *)((char *)this + 496));
  *((_OWORD *)this + 32) = 0u;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = a5;
  *((void *)this + 1) = a3;
  *(_DWORD *)this = a2;
  unint64_t v10 = (*(uint64_t (**)(LanguageModel *))(*(void *)a5 + 528))(a5);
  *((void *)this + 4) = v10;
  WordLanguageModel::registerRecentBuffer(v10, this);
  *((_DWORD *)this + 7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((void *)this + 3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((void *)this + 31) = 0;
  *(void *)((char *)this + 254) = 0;
  LODWORD(v11) = *(_DWORD *)this;
  CombineTable::initCombineTable((uint64_t)this + 432, (double)v11);
  unsigned int v13 = (40 * *(_DWORD *)this) | 1;
  unsigned int v14 = *((_DWORD *)this + 115);
  if (v13 > v14) {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 448, v13 - v14, 0);
  }
  unint64_t v15 = 0;
  *((_DWORD *)this + 114) = v13;
  do
  {
    LODWORD(v12) = *(_DWORD *)this;
    *(long double *)(*((void *)this + 56) + 8 * v15) = DgnExp(-(double)v15 / (double)v12);
    ++v15;
  }
  while (v15 < *((unsigned int *)this + 114));
  *((_DWORD *)this + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((void *)this + 6) = 0;
  *((unsigned char *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0x3FF0000000000000;
  *((unsigned char *)this + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0;
  *((_WORD *)this + 37) = 20000;
  int16x4_t v16 = vdup_n_s16(0x4E20u);
  *((int16x4_t *)this + 6MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v16;
  *((unsigned char *)this + 48DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((int16x4_t *)this + 66) = v16;
}

void sub_2140373B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, BitArray *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18 + 512);
  BitArray::~BitArray(v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18 + 464);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a13);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a14);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v18 + 416);
  Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash(a10);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v15);
  BitArray::~BitArray(a11);
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(a12);
  _Unwind_Resume(a1);
}

unint64_t WordLanguageModel::registerRecentBuffer(unint64_t this, RecentBuffer *a2)
{
  uint64_t v3 = this;
  unsigned int v4 = *(_DWORD *)(this + 216);
  if (v4 == *(_DWORD *)(this + 220))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 208, 1, 1);
    unsigned int v4 = *(_DWORD *)(v3 + 216);
  }
  *(void *)(*(void *)(v3 + 208) + 8 * v4) = a2;
  *(_DWORD *)(v3 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v4 + 1;
  return this;
}

void RecentBuffer::~RecentBuffer(RecentBuffer *this)
{
  uint64_t v2 = *((void *)this + 4);
  int v3 = *(_DWORD *)(v2 + 216);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v2 + 216);
    unsigned int v5 = *(RecentBuffer ***)(v2 + 208);
    while (*v5 != this)
    {
      ++v5;
      if (!--v4) {
        goto LABEL_7;
      }
    }
    unsigned int v6 = v3 - 1;
    void *v5 = *(RecentBuffer **)(*(void *)(v2 + 208) + 8 * v6);
    *(_DWORD *)(v2 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v6;
  }
LABEL_7:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 512);
  BitArray::~BitArray((RecentBuffer *)((char *)this + 496));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 464);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 448);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 432);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 416);
  Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash((uint64_t)this + 304);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  BitArray::~BitArray((RecentBuffer *)((char *)this + 192));
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash((uint64_t)this + 80);
}

void RecentBuffer::printSize(RecentBuffer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 428, (DgnString *)&v308);
  if (v309) {
    uint64_t v15 = v308;
  }
  else {
    uint64_t v15 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_2140AAEE8, a3, &unk_2140AAEE8, v15);
  DgnString::~DgnString((DgnString *)&v308);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_2140AAEE8);
  uint64_t v20 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 430, (DgnString *)&v308);
  if (v309) {
    uint64_t v25 = v308;
  }
  else {
    uint64_t v25 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v26 = 4;
  }
  else {
    uint64_t v26 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 432, (DgnString *)&v308);
  if (v309) {
    uint64_t v31 = v308;
  }
  else {
    uint64_t v31 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v31, v26, v26, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v26;
  *a5 += v26;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v32 = 4;
  }
  else {
    uint64_t v32 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 433, (DgnString *)&v308);
  if (v309) {
    unint64_t v37 = v308;
  }
  else {
    unint64_t v37 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v37, v32, v32, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v32;
  *a5 += v32;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 4;
  }
  else {
    uint64_t v38 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 434, (DgnString *)&v308);
  if (v309) {
    int v43 = v308;
  }
  else {
    int v43 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v43, v38, v38, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v38;
  *a5 += v38;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v44 = 4;
  }
  else {
    uint64_t v44 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 435, (DgnString *)&v308);
  if (v309) {
    uint64_t v49 = v308;
  }
  else {
    uint64_t v49 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v49, v44, v44, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v44;
  *a5 += v44;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 438, (DgnString *)&v308);
  if (v309) {
    char v54 = v308;
  }
  else {
    char v54 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v54, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 440, (DgnString *)&v308);
  if (v309) {
    char v59 = v308;
  }
  else {
    char v59 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v59, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 442, (DgnString *)&v308);
  if (v309) {
    int64_t v64 = v308;
  }
  else {
    int64_t v64 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v64, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v308);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 444, (DgnString *)&v308);
  if (v309) {
    uint64_t v69 = v308;
  }
  else {
    uint64_t v69 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v69, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 446, (DgnString *)&v308);
  if (v309) {
    int64_t v74 = v308;
  }
  else {
    int64_t v74 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, (a3 + 1), &unk_2140AAEE8, (34 - a3), (34 - a3), v74, 1, 1, 0);
  uint64_t v304 = a3;
  uint64_t v305 = a6;
  DgnString::~DgnString((DgnString *)&v308);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 448, (DgnString *)&v308);
  if (v309) {
    uint64_t v79 = v308;
  }
  else {
    uint64_t v79 = &unk_2140AAEE8;
  }
  uint64_t v306 = (a3 + 1);
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v306, &unk_2140AAEE8, (34 - a3), (34 - a3), v79, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  char v80 = (char *)this + 104;
  uint64_t v81 = sizeObject((char *)this + 104);
  uint64_t v82 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v82 = 8;
    char v83 = 2;
  }
  else
  {
    char v83 = 3;
  }
  unint64_t v84 = (unint64_t)*((unsigned int *)this + 42) << v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v85 = 8;
  }
  else {
    uint64_t v85 = 16;
  }
  uint64_t v86 = v81 + v85 + v82 + v84 + 13;
  uint64_t v87 = sizeObject(v80);
  uint64_t v88 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v88 = 8;
    char v89 = 2;
  }
  else
  {
    char v89 = 3;
  }
  unint64_t v90 = (unint64_t)*((unsigned int *)this + 42) << v89;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v91 = 8;
  }
  else {
    uint64_t v91 = 16;
  }
  uint64_t v92 = v87 + v91 + v88 + v90 + 13;
  uint64_t v93 = sizeObject(v80);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 451, (DgnString *)&v308);
  if (v309) {
    unint64_t v98 = v308;
  }
  else {
    unint64_t v98 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v306, &unk_2140AAEE8, v20, v20, v98, v86, v92, v93);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v86;
  *a5 += v92;
  *a6 += v93;
  uint64_t v99 = BitArray::sizeObject((uint64_t)this + 192, 0);
  uint64_t v100 = BitArray::sizeObject((uint64_t)this + 192, 1);
  uint64_t v101 = BitArray::sizeObject((uint64_t)this + 192, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 453, (DgnString *)&v308);
  if (v309) {
    char v106 = v308;
  }
  else {
    char v106 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v306, &unk_2140AAEE8, v20, v20, v106, v99, v100, v101);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v99;
  *a5 += v100;
  *a6 += v101;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v107 = 12;
  }
  else {
    uint64_t v107 = 16;
  }
  uint64_t v108 = *((unsigned int *)this + 54);
  unsigned int v109 = *((_DWORD *)this + 55);
  if (v109 >= v108)
  {
    uint64_t v110 = 0;
    if ((int)v108 > 0) {
      v107 += 4 * (v108 - 1) + 4;
    }
    uint64_t v111 = v107 + 4 * (v109 - v108);
  }
  else
  {
    uint64_t v110 = 4 * v108;
    uint64_t v111 = v107;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 455, (DgnString *)&v308);
  if (v309) {
    uint64_t v116 = v308;
  }
  else {
    uint64_t v116 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v306, &unk_2140AAEE8, v20, v20, v116, v111, v107, v110);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v111;
  *a5 += v107;
  *a6 += v110;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v117 = 12;
  }
  else {
    uint64_t v117 = 16;
  }
  uint64_t v118 = *((unsigned int *)this + 58);
  unsigned int v119 = *((_DWORD *)this + 59);
  if (v119 >= v118)
  {
    uint64_t v120 = 0;
    if ((int)v118 > 0) {
      v117 += 4 * (v118 - 1) + 4;
    }
    uint64_t v121 = v117 + 4 * (v119 - v118);
  }
  else
  {
    uint64_t v120 = 4 * v118;
    uint64_t v121 = v117;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 457, (DgnString *)&v308);
  if (v309) {
    unsigned int v126 = v308;
  }
  else {
    unsigned int v126 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, v306, &unk_2140AAEE8, v20, v20, v126, v121, v117, v120);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v121;
  *a5 += v117;
  *a6 += v120;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 459, (DgnString *)&v308);
  if (v309) {
    uint64_t v131 = v308;
  }
  else {
    uint64_t v131 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, v306, &unk_2140AAEE8, v20, v20, v131, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 461, (DgnString *)&v308);
  if (v309) {
    uint64_t v136 = v308;
  }
  else {
    uint64_t v136 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v306, &unk_2140AAEE8, v20, v20, v136, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 464, (DgnString *)&v308);
  if (v309) {
    uint64_t v141 = v308;
  }
  else {
    uint64_t v141 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v306, &unk_2140AAEE8, v20, v20, v141, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 466, (DgnString *)&v308);
  if (v309) {
    uint64_t v146 = v308;
  }
  else {
    uint64_t v146 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, v306, &unk_2140AAEE8, v20, v20, v146, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 468, (DgnString *)&v308);
  if (v309) {
    uint64_t v151 = v308;
  }
  else {
    uint64_t v151 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, v306, &unk_2140AAEE8, v20, v20, v151, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 470, (DgnString *)&v308);
  if (v309) {
    uint64_t v156 = v308;
  }
  else {
    uint64_t v156 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v306, &unk_2140AAEE8, v20, v20, v156, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v157 = 12;
  }
  else {
    uint64_t v157 = 16;
  }
  uint64_t v158 = *((unsigned int *)this + 68);
  unsigned int v159 = *((_DWORD *)this + 69);
  if (v159 >= v158)
  {
    uint64_t v160 = 0;
    if ((int)v158 > 0) {
      uint64_t v157 = (v157 | 2) + 2 * (v158 - 1);
    }
    uint64_t v161 = v157 + 2 * (v159 - v158);
  }
  else
  {
    uint64_t v160 = 2 * v158;
    uint64_t v161 = v157;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 472, (DgnString *)&v308);
  if (v309) {
    uint64_t v166 = v308;
  }
  else {
    uint64_t v166 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v162, v163, v164, v165, v306, &unk_2140AAEE8, v20, v20, v166, v161, v157, v160);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v161;
  *a5 += v157;
  *a6 += v160;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 474, (DgnString *)&v308);
  if (v309) {
    uint64_t v171 = v308;
  }
  else {
    uint64_t v171 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v167, v168, v169, v170, v306, &unk_2140AAEE8, v20, v20, v171, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v172 = 12;
  }
  else {
    uint64_t v172 = 16;
  }
  uint64_t v173 = *((unsigned int *)this + 74);
  unsigned int v174 = *((_DWORD *)this + 75);
  if (v174 >= v173)
  {
    uint64_t v175 = 0;
    if ((int)v173 > 0) {
      uint64_t v172 = (v172 | 2) + 2 * (v173 - 1);
    }
    uint64_t v176 = v172 + 2 * (v174 - v173);
  }
  else
  {
    uint64_t v175 = 2 * v173;
    uint64_t v176 = v172;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 476, (DgnString *)&v308);
  if (v309) {
    char v181 = v308;
  }
  else {
    char v181 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v306, &unk_2140AAEE8, v20, v20, v181, v176, v172, v175);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v176;
  *a5 += v172;
  *a6 += v175;
  uint64_t v182 = (char *)this + 328;
  uint64_t v183 = sizeObject((char *)this + 328);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v184 = 8;
  }
  else {
    uint64_t v184 = 12;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    char v185 = 2;
  }
  else {
    char v185 = 3;
  }
  unint64_t v186 = (unint64_t)*((unsigned int *)this + 98) << v185;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v187 = 8;
  }
  else {
    uint64_t v187 = 16;
  }
  uint64_t v188 = v183 + v187 + v184 + v186 + 13;
  uint64_t v189 = sizeObject(v182);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v190 = 8;
  }
  else {
    uint64_t v190 = 12;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    char v191 = 2;
  }
  else {
    char v191 = 3;
  }
  unint64_t v192 = (unint64_t)*((unsigned int *)this + 98) << v191;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v193 = 8;
  }
  else {
    uint64_t v193 = 16;
  }
  uint64_t v194 = v189 + v193 + v190 + v192 + 13;
  uint64_t v195 = sizeObject(v182);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 478, (DgnString *)&v308);
  if (v309) {
    std::vector<int> v200 = v308;
  }
  else {
    std::vector<int> v200 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v196, v197, v198, v199, v306, &unk_2140AAEE8, v20, v20, v200, v188, v194, v195);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v188;
  *a5 += v194;
  *a6 += v195;
  uint64_t v201 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 416, 0);
  uint64_t v202 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 416, 1);
  uint64_t v308 = 0;
  uint64_t v309 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v308);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 481, (DgnString *)&v308);
  if (v309) {
    uint64_t v207 = v308;
  }
  else {
    uint64_t v207 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v306, &unk_2140AAEE8, v20, v20, v207, v201, v202, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v201;
  *a5 += v202;
  uint64_t v208 = CombineTable::sizeObject((uint64_t)this + 432, 0);
  uint64_t v209 = CombineTable::sizeObject((uint64_t)this + 432, 1);
  uint64_t v210 = CombineTable::sizeObject((uint64_t)this + 432, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 483, (DgnString *)&v308);
  if (v309) {
    unint64_t v215 = v308;
  }
  else {
    unint64_t v215 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v211, v212, v213, v214, v306, &unk_2140AAEE8, v20, v20, v215, v208, v209, v210);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v208;
  *a5 += v209;
  *a6 += v210;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v216 = 12;
  }
  else {
    uint64_t v216 = 16;
  }
  uint64_t v217 = *((unsigned int *)this + 114);
  unsigned int v218 = *((_DWORD *)this + 115);
  if (v218 >= v217)
  {
    uint64_t v219 = 0;
    if ((int)v217 > 0) {
      v216 += 8 * (v217 - 1) + 8;
    }
    uint64_t v220 = v216 + 8 * (v218 - v217);
  }
  else
  {
    uint64_t v219 = 8 * v217;
    uint64_t v220 = v216;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 485, (DgnString *)&v308);
  if (v309) {
    long long v225 = v308;
  }
  else {
    long long v225 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v221, v222, v223, v224, v306, &unk_2140AAEE8, v20, v20, v225, v220, v216, v219);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v220;
  *a5 += v216;
  *a6 += v219;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v226 = 12;
  }
  else {
    uint64_t v226 = 16;
  }
  uint64_t v227 = *((unsigned int *)this + 118);
  unsigned int v228 = *((_DWORD *)this + 119);
  if (v228 >= v227)
  {
    uint64_t v229 = 0;
    if ((int)v227 > 0) {
      uint64_t v226 = (v226 | 2) + 2 * (v227 - 1);
    }
    uint64_t v230 = v226 + 2 * (v228 - v227);
  }
  else
  {
    uint64_t v229 = 2 * v227;
    uint64_t v230 = v226;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 487, (DgnString *)&v308);
  if (v309) {
    uint64_t v235 = v308;
  }
  else {
    uint64_t v235 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v231, v232, v233, v234, v306, &unk_2140AAEE8, v20, v20, v235, v230, v226, v229);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v230;
  *a5 += v226;
  *a6 += v229;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 489, (DgnString *)&v308);
  if (v309) {
    uint64_t v240 = v308;
  }
  else {
    uint64_t v240 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v236, v237, v238, v239, v306, &unk_2140AAEE8, v20, v20, v240, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 491, (DgnString *)&v308);
  if (v309) {
    long long v245 = v308;
  }
  else {
    long long v245 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v241, v242, v243, v244, v306, &unk_2140AAEE8, v20, v20, v245, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 493, (DgnString *)&v308);
  if (v309) {
    uint64_t v250 = v308;
  }
  else {
    uint64_t v250 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v246, v247, v248, v249, v306, &unk_2140AAEE8, v20, v20, v250, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 495, (DgnString *)&v308);
  if (v309) {
    char v255 = v308;
  }
  else {
    char v255 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v251, v252, v253, v254, v306, &unk_2140AAEE8, v20, v20, v255, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 498, (DgnString *)&v308);
  if (v309) {
    uint64_t v260 = v308;
  }
  else {
    uint64_t v260 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v256, v257, v258, v259, v306, &unk_2140AAEE8, v20, v20, v260, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v308);
  ++*a4;
  ++*a5;
  uint64_t v261 = BitArray::sizeObject((uint64_t)this + 496, 0);
  uint64_t v262 = BitArray::sizeObject((uint64_t)this + 496, 1);
  uint64_t v263 = BitArray::sizeObject((uint64_t)this + 496, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 500, (DgnString *)&v308);
  if (v309) {
    uint64_t v268 = v308;
  }
  else {
    uint64_t v268 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v264, v265, v266, v267, v306, &unk_2140AAEE8, v20, v20, v268, v261, v262, v263);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v261;
  *a5 += v262;
  *a6 += v263;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v269 = 12;
  }
  else {
    uint64_t v269 = 16;
  }
  uint64_t v270 = *((unsigned int *)this + 130);
  unsigned int v271 = *((_DWORD *)this + 131);
  if (v271 >= v270)
  {
    uint64_t v272 = 0;
    if ((int)v270 > 0) {
      v269 += 4 * (v270 - 1) + 4;
    }
    uint64_t v273 = v269 + 4 * (v271 - v270);
  }
  else
  {
    uint64_t v272 = 4 * v270;
    uint64_t v273 = v269;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 502, (DgnString *)&v308);
  if (v309) {
    uint64_t v278 = v308;
  }
  else {
    uint64_t v278 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v274, v275, v276, v277, v306, &unk_2140AAEE8, v20, v20, v278, v273, v269, v272);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += v273;
  *a5 += v269;
  *v305 += v272;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 505, (DgnString *)&v308);
  if (v309) {
    uint64_t v283 = v308;
  }
  else {
    uint64_t v283 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v279, v280, v281, v282, v306, &unk_2140AAEE8, v20, v20, v283, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 507, (DgnString *)&v308);
  if (v309) {
    uint64_t v288 = v308;
  }
  else {
    uint64_t v288 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v284, v285, v286, v287, v306, &unk_2140AAEE8, v20, v20, v288, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 509, (DgnString *)&v308);
  if (v309) {
    int v293 = v308;
  }
  else {
    int v293 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v289, v290, v291, v292, v306, &unk_2140AAEE8, v20, v20, v293, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 511, (DgnString *)&v308);
  if (v309) {
    uint64_t v298 = v308;
  }
  else {
    uint64_t v298 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v294, v295, v296, v297, v306, &unk_2140AAEE8, v20, v20, v298, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v308);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 513, (DgnString *)&v308);
  if (v309) {
    uint64_t v303 = v308;
  }
  else {
    uint64_t v303 = &unk_2140AAEE8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v299, v300, v301, v302, v304, &unk_2140AAEE8, (35 - v304), (35 - v304), v303, *a4, *a5, *v305);
  DgnString::~DgnString((DgnString *)&v308);
}

void sub_214038BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void RecentBuffer::computeAppearancesToScores(RecentBuffer *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v4 = *((void *)this + 52);
    uint64_t v5 = v4 + 16 * a2;
    unsigned int v6 = (_DWORD *)(v5 + 8);
    uint64_t v7 = a2 + 1;
    if (*(_DWORD *)(v5 + 8) != v7)
    {
      unsigned int v8 = *(_DWORD *)(v4 + 16 * a2 + 12);
      if (v7 <= v8)
      {
        _DWORD *v6 = v7;
        if (a2 == -1) {
          return;
        }
      }
      else
      {
        DgnPrimArray<short>::reallocElts(v5, v7 - v8, 0);
        _DWORD *v6 = v7;
      }
      uint64_t v9 = 0;
      double v10 = 1.0 / (double)a2;
      uint64_t v11 = 16 * a2;
      do
      {
        int v12 = *(_DWORD *)this;
        double v13 = -20.0;
        if (v10 * (double)v9 > 0.0)
        {
          double v13 = DgnLog(v10 * (double)v9);
          if (v13 < -20.0) {
            double v13 = -20.0;
          }
        }
        *(_WORD *)(*(void *)(*((void *)this + 52) + v11) + 2 * v9++) = (int)((double)-v12 * v13 + 0.5);
      }
      while (v7 != v9);
    }
  }
}

uint64_t RecentBuffer::addWordCountUni(uint64_t this, unsigned int a2, int a3)
{
  if (a2 == 16777213)
  {
    if (*(unsigned char *)(this + 488))
    {
      int v5 = *(_DWORD *)(this + 256);
      if (a3) {
        int v6 = v5 + 1;
      }
      else {
        int v6 = v5 - 1;
      }
      *(_DWORD *)(this + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = v6;
    }
    else
    {
      __int16 v12 = *(_WORD *)(this + 260);
      if (a3) {
        __int16 v13 = v12 + 1;
      }
      else {
        __int16 v13 = v12 - 1;
      }
      *(_WORD *)(this + 26MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v13;
    }
  }
  else if (a2 == 0xFFFFFF)
  {
    int v3 = *(_DWORD *)(this + 248);
    if (a3) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = v3 - 1;
    }
    *(_DWORD *)(this + 24DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4;
  }
  else if (*(_DWORD *)(this + 504) > a2 && ((*(_DWORD *)(*(void *)(this + 496) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    int v7 = *(_DWORD *)(this + 252);
    if (a3) {
      int v8 = v7 + 1;
    }
    else {
      int v8 = v7 - 1;
    }
    *(_DWORD *)(this + 252) = v8;
  }
  else
  {
    uint64_t v9 = *(void *)(this + 264);
    __int16 v10 = *(_WORD *)(v9 + 2 * a2);
    if (a3) {
      __int16 v11 = v10 + 1;
    }
    else {
      __int16 v11 = v10 - 1;
    }
    *(_WORD *)(v9 + 2 * a2) = v11;
  }
  return this;
}

void RecentBuffer::addWordCountBi(RecentBuffer *this, int a2, unsigned int a3, int a4)
{
  if (a2 != 0xFFFFFF && (a3 & 0xFFFFFFFE) != 0xFFFFFE)
  {
    v15[0] = a2;
    v15[1] = a3;
    int v7 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)this + 304, v15);
    if (v7)
    {
      int v8 = *((_DWORD *)v7 + 5);
      if (a4)
      {
        *((_DWORD *)v7 + 5) = v8 + 1;
LABEL_11:
        uint64_t v11 = *((void *)this + 36);
        unsigned __int16 v12 = *(_WORD *)(v11 + 2 * a3) + 1;
LABEL_15:
        *(_WORD *)(v11 + 2 * a3) = v12;
        RecentBuffer::computeAppearancesToScores(this, v12);
        return;
      }
      int v13 = v8 - 1;
      *((_DWORD *)v7 + 5) = v13;
      if (!v13) {
        Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::remove((uint64_t)this + 304, v15);
      }
    }
    else
    {
      int v14 = 1;
      Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::add((uint64_t)this + 304, v15, &v14);
      if (a4) {
        goto LABEL_11;
      }
    }
    uint64_t v11 = *((void *)this + 36);
    unsigned __int16 v12 = *(_WORD *)(v11 + 2 * a3) - 1;
    goto LABEL_15;
  }
  int v9 = *((_DWORD *)this + 70);
  if (a4) {
    int v10 = v9 + 1;
  }
  else {
    int v10 = v9 - 1;
  }
  *((_DWORD *)this + 7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10;
}

uint64_t **Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::remove(uint64_t a1, _DWORD *a2)
{
  uint64_t result = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(a1, a2);
  if (*result)
  {
    return (uint64_t **)Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::removeBucket(a1, (char **)result);
  }
  return result;
}

void RecentBuffer::addToRecentInternal(RecentBuffer *this, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    unsigned int v5 = *((_DWORD *)this + 10);
    if (v5)
    {
      unint64_t v6 = v3 >= v5 ? v3 - v5 : 0;
      if (v6 < v3)
      {
        int v9 = *((_DWORD *)this + 60);
        do
        {
          int v10 = *((_DWORD *)this + 61);
          if (v10 + 1 == v5) {
            LODWORD(v11) = 0;
          }
          else {
            LODWORD(v11) = v10 + 1;
          }
          *((_DWORD *)this + 61) = v11;
          if (v9 == v5)
          {
            RecentBuffer::addWordCountUni((uint64_t)this, *(_DWORD *)(*((void *)this + 26) + 4 * v11), 0);
            uint64_t v11 = *((unsigned int *)this + 61);
            if (*((unsigned char *)this + 56))
            {
              RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((void *)this + 26) + 4 * v11), *(_DWORD *)(*((void *)this + 28) + 4 * v11), 0);
              LODWORD(v11) = *((_DWORD *)this + 61);
            }
          }
          uint64_t v12 = *((void *)this + 26);
          *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)(*(void *)a2 + 4 * v6);
          RecentBuffer::addWordCountUni((uint64_t)this, *(_DWORD *)(v12 + 4 * *((unsigned int *)this + 61)), 1);
          if (*((unsigned char *)this + 56))
          {
            int v13 = a3;
            if (v6) {
              int v13 = *(_DWORD *)(*(void *)a2 + 4 * v6 - 4);
            }
            uint64_t v14 = *((void *)this + 28);
            *(_DWORD *)(v14 + 4 * *((unsigned int *)this + 61)) = v13;
            RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((void *)this + 26) + 4 * *((unsigned int *)this + 61)), *(_DWORD *)(v14 + 4 * *((unsigned int *)this + 61)), 1);
          }
          unsigned int v5 = *((_DWORD *)this + 10);
          int v15 = *((_DWORD *)this + 60);
          if (v5 >= v15 + 1) {
            int v9 = v15 + 1;
          }
          else {
            int v9 = *((_DWORD *)this + 10);
          }
          *((_DWORD *)this + 6MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v9;
          ++v6;
        }
        while (v6 < *(unsigned int *)(a2 + 8));
      }
    }
  }
}

uint64_t RecentBuffer::getRecentScore(RecentBuffer *this, uint64_t a2, int a3, const LMContextData *a4)
{
  unsigned int v30 = a2;
  if (a2 == 0xFFFFFF) {
    return (__int16)a3;
  }
  unsigned int v6 = a2;
  if (a2 == 16777213)
  {
    int v8 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 80, (int *)&v30);
    if (!v8)
    {
      if (((*(uint64_t (**)(void))(**((void **)this + 4) + 696))(*((void *)this + 4)) & 1) == 0) {
        return (__int16)a3;
      }
      goto LABEL_9;
    }
LABEL_8:
    unsigned int v30 = *((_DWORD *)v8 + 4);
    goto LABEL_9;
  }
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)this + 2) + 112))(*((void *)this + 2), a2)) {
    return (__int16)a3;
  }
  unsigned int v30 = *(_DWORD *)(*(void *)(*((void *)this + 1) + 256) + 4 * v6);
  int v8 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 80, (int *)&v30);
  if (v8) {
    goto LABEL_8;
  }
LABEL_9:
  int v9 = *((_DWORD *)this + 60);
  if (!v9) {
    return (__int16)a3;
  }
  uint64_t v10 = *((unsigned int *)a4 + 2);
  if (v30 == 16777213 && *((unsigned char *)this + 488)
    || *((_DWORD *)this + 126) > v30
    && ((*(_DWORD *)(*((void *)this + 62) + (((unint64_t)v30 >> 3) & 0x1FFFFFFC)) >> v30) & 1) != 0
    || ((int v11 = *((_DWORD *)this + 63) + *((_DWORD *)this + 62) + *((_DWORD *)this + 64), v30 != 16777213)
      ? (uint64_t v12 = (unsigned __int16 *)(*((void *)this + 33) + 2 * v30))
      : (uint64_t v12 = (unsigned __int16 *)((char *)this + 260)),
        v9 == v11))
  {
    int v13 = a3;
LABEL_19:
    if (*((unsigned char *)this + 56) && v10 <= 0xFFFFF3 && v9 != *((_DWORD *)this + 70))
    {
      uint64_t v14 = *(unsigned __int16 *)(*((void *)this + 36) + 2 * v10);
      v29[0] = v30;
      v29[1] = v10;
      int v15 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)this + 304, v29);
      if (v15) {
        int v15 = (uint64_t *)*((unsigned int *)v15 + 5);
      }
      if (v14)
      {
        int v16 = *(__int16 *)(*(void *)(*((void *)this + 52) + 16 * v14) + 2 * (void)v15);
        if (v16 != 20000)
        {
          int v17 = v13 + *((unsigned __int16 *)this + 264);
          int v18 = *((__int16 *)this + 265) + v16;
          unsigned int v20 = v18 - v17;
          BOOL v19 = v18 - v17 < 0;
          if (v18 >= v17) {
            int v18 = v13 + *((unsigned __int16 *)this + 264);
          }
          if (v19) {
            unsigned int v21 = -v20;
          }
          else {
            unsigned int v21 = v20;
          }
          if (v21 < *((_DWORD *)this + 110)) {
            v18 -= *(_DWORD *)(*((void *)this + 54) + 4 * v21);
          }
          int v13 = v18 & ~(v18 >> 31);
        }
      }
    }
    goto LABEL_43;
  }
  int v13 = *(__int16 *)(*(void *)(*((void *)this + 52) + 16 * (v9 - v11)) + 2 * *v12);
  if (!*((unsigned char *)this + 72)) {
    goto LABEL_19;
  }
  if (v10 < 0xFFFFF4)
  {
    v13 += *(unsigned __int16 *)(*((void *)this + 58) + 2 * v10);
    goto LABEL_19;
  }
  if (v10 == 16777214)
  {
    __int16 v22 = *((_WORD *)this + 241);
  }
  else if (v10 == 0xFFFFFF)
  {
    __int16 v22 = *((_WORD *)this + 240);
  }
  else
  {
    __int16 v22 = *((_WORD *)this + 242);
  }
  LOWORD(v13) = v22 + v13;
LABEL_43:
  if ((__int16)v13 != a3)
  {
    int v23 = *((__int16 *)this + 266) + a3;
    int v24 = (__int16)v13 + *((__int16 *)this + 267);
    unsigned int v26 = v24 - v23;
    BOOL v25 = v24 - v23 < 0;
    if (v24 >= v23) {
      int v24 = *((__int16 *)this + 266) + a3;
    }
    if (v25) {
      unsigned int v27 = -v26;
    }
    else {
      unsigned int v27 = v26;
    }
    if (v27 < *((_DWORD *)this + 110)) {
      v24 -= *(_DWORD *)(*((void *)this + 54) + 4 * v27);
    }
    a3 = v24 & ~(v24 >> 31);
  }
  return (__int16)a3;
}

uint64_t **RecentBuffer::setContext(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 8))
  {
    int v4 = result;
    unsigned int v5 = (int *)(a4 + 8);
    *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = **(_DWORD **)a2;
    uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t *))(*result[2] + 112))(result[2]);
    if (!result) {
      goto LABEL_9;
    }
    uint64_t v6 = *v5;
    if (v6 <= 0xFFFFF3) {
      int *v5 = *(_DWORD *)(v4[1][32] + 4 * v6);
    }
    uint64_t result = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(v4 + 10), v5);
    if (*result)
    {
      int v7 = *((_DWORD *)*result + 4);
LABEL_10:
      int *v5 = v7;
      return result;
    }
    if (*v5 == 16777214 && *((_DWORD *)v4[4] + 28) == -1)
    {
LABEL_9:
      int v7 = 0xFFFFFF;
      goto LABEL_10;
    }
  }
  return result;
}

void RecentBuffer::unsetContext(RecentBuffer *this, LMContextData *a2)
{
  *((_DWORD *)a2 + 2) = 16777212;
}

double RecentBuffer::initRecentBuffer(RecentBuffer *this)
{
  unsigned int v2 = *(_DWORD *)(*((void *)this + 1) + 388);
  unsigned int v3 = *((_DWORD *)this + 10);
  unsigned int v4 = *((_DWORD *)this + 55);
  if (v3 > v4) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 208, v3 - v4, 0);
  }
  *((_DWORD *)this + 54) = v3;
  if (v2)
  {
    unsigned int v5 = *((_DWORD *)this + 69);
    if (v2 > v5) {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 264, v2 - v5, 0);
    }
    *((_DWORD *)this + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v2;
  }
  if (*((unsigned char *)this + 56))
  {
    unsigned int v6 = *((_DWORD *)this + 10);
    unsigned int v7 = *((_DWORD *)this + 59);
    if (v6 > v7) {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 224, v6 - v7, 0);
    }
    *((_DWORD *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
    if (v2)
    {
      unsigned int v8 = *((_DWORD *)this + 75);
      if (v2 > v8) {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 288, v2 - v8, 0);
      }
      *((_DWORD *)this + 74) = v2;
    }
  }
  int v9 = (void *)((char *)this + 416);
  uint64_t v10 = (*((_DWORD *)this + 10) + 1);
  unsigned int v11 = *((_DWORD *)this + 107);
  if (v10 > v11) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 416, v10 - v11, 0);
  }
  uint64_t v12 = *((unsigned int *)this + 106);
  if (v12 <= v10)
  {
    if (v12 < v10)
    {
      uint64_t v15 = v10 - v12;
      uint64_t v16 = 16 * v12;
      do
      {
        int v17 = (void *)(*v9 + v16);
        *int v17 = 0;
        v17[1] = 0;
        v16 += 16;
        --v15;
      }
      while (v15);
    }
  }
  else if ((int)v12 > (int)v10)
  {
    uint64_t v13 = (int)v12;
    uint64_t v14 = 16 * (int)v12 - 16;
    do
    {
      --v13;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v9 + v14);
      v14 -= 16;
    }
    while (v13 > (int)v10);
  }
  *((_DWORD *)this + 106) = v10;
  RecentBuffer::clearRecent(this);

  return RecentBuffer::setWeights(this);
}

void RecentBuffer::clearRecent(RecentBuffer *this)
{
  uint64_t v2 = *((unsigned int *)this + 68);
  if (v2) {
    bzero(*((void **)this + 33), 2 * v2);
  }
  *((_DWORD *)this + 6MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *((void *)this + 31) = 0;
  *(void *)((char *)this + 254) = 0;
  if (*((_DWORD *)this + 10))
  {
    unint64_t v3 = 0;
    uint64_t v4 = *((void *)this + 26);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0xFFFFFF;
    while (v3 < *((unsigned int *)this + 10));
  }
  *((_DWORD *)this + 61) = 0;
  if (*((unsigned char *)this + 56))
  {
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll((uint64_t)this + 304);
    uint64_t v5 = *((unsigned int *)this + 74);
    if (v5) {
      bzero(*((void **)this + 36), 2 * v5);
    }
    *((_DWORD *)this + 7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
    if (*((_DWORD *)this + 10))
    {
      unint64_t v6 = 0;
      uint64_t v7 = *((void *)this + 28);
      do
        *(_DWORD *)(v7 + 4 * v6++) = 0xFFFFFF;
      while (v6 < *((unsigned int *)this + 10));
    }
  }
}

double RecentBuffer::setWeights(RecentBuffer *this)
{
  long double v2 = *((double *)this + 8);
  double v3 = 1.0 - v2;
  int v4 = *(_DWORD *)this;
  double v5 = -20.0;
  double v6 = -20.0;
  if (v2 > 0.0)
  {
    double v7 = DgnLog(v2);
    double v6 = -20.0;
    if (v7 >= -20.0) {
      double v6 = v7;
    }
  }
  *((_WORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = (int)((double)-v4 * v6 + 0.5);
  int v8 = *(_DWORD *)this;
  if (v3 > 0.0)
  {
    double v9 = DgnLog(v3);
    if (v9 < -20.0) {
      double v5 = -20.0;
    }
    else {
      double v5 = v9;
    }
  }
  *((_WORD *)this + 265) = (int)((double)-v8 * v5 + 0.5);
  unsigned int v10 = *((_DWORD *)this + 10);
  if (v10) {
    double v11 = (double)(*((_DWORD *)this + 60) - *((_DWORD *)this + 62)) / (double)v10;
  }
  else {
    double v11 = 0.0;
  }
  double v12 = v11 * *((double *)this + 6);
  int v13 = *(_DWORD *)this;
  double v14 = -20.0;
  double v15 = -20.0;
  if (1.0 - v12 > 0.0)
  {
    double v15 = DgnLog(1.0 - v12);
    if (v15 < -20.0) {
      double v15 = -20.0;
    }
  }
  *((_WORD *)this + 266) = (int)((double)-v13 * v15 + 0.5);
  int v16 = *(_DWORD *)this;
  if (v12 > 0.0)
  {
    double v17 = DgnLog(v12);
    if (v17 < -20.0) {
      double v14 = -20.0;
    }
    else {
      double v14 = v17;
    }
  }
  double result = (double)-v16 * v14 + 0.5;
  *((_WORD *)this + 267) = (int)result;
  return result;
}

uint64_t RecentBuffer::initHeadClonesAndCommonWords(RecentBuffer *this)
{
  v14[0] = 0;
  v14[1] = 0;
  v13[0] = 0;
  v13[1] = 0;
  WordLanguageModel::constructLmIdToWordIdMapping(*((void *)this + 4), (uint64_t)v14, (uint64_t)v13);
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll((uint64_t)this + 80);
  BitArray::setSizeNoGrow((RecentBuffer *)((char *)this + 192), 0);
  unsigned int v12 = 0;
  uint64_t v2 = *((void *)this + 1);
  if (*(_DWORD *)(v2 + 388))
  {
    unsigned int v3 = 0;
    do
    {
      if (*(unsigned char *)(*(void *)(v2 + 104) + v3))
      {
        if (*(_DWORD *)(*(void *)(v2 + 256) + 4 * v3) == v3
          && ((*(_DWORD *)(*(void *)(v2 + 624) + 4 * (v3 >> 5)) >> v3) & 1) != 0)
        {
          int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 112))(*((void *)this + 2));
          unsigned int v3 = v12;
          if (v4)
          {
            unsigned int LmId = WordLanguageModel::getLmId(*((WordLanguageModel **)this + 4), v12);
            unsigned int v11 = 0;
            unsigned int v3 = *(_DWORD *)(v14[0] + 4 * LmId);
            unsigned int v11 = v3;
            if (v3 != v12)
            {
              Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)this + 80, (int *)&v12, &v11);
              unsigned int v6 = *((_DWORD *)this + 50);
              unsigned int v7 = v11;
              BOOL v8 = v11 >= v6;
              unsigned int v9 = v11 - v6;
              if (v8)
              {
                BitArray::addSize((RecentBuffer *)((char *)this + 192), v9 + 1);
                unsigned int v7 = v11;
              }
              *(_DWORD *)(*((void *)this + 24) + 4 * (v7 >> 5)) |= 1 << v7;
              unsigned int v3 = v12;
            }
          }
        }
      }
      unsigned int v12 = ++v3;
      uint64_t v2 = *((void *)this + 1);
    }
    while (v3 < *(_DWORD *)(v2 + 388));
  }
  if (*((unsigned char *)this + 72)) {
    RecentBuffer::setCommonWords((uint64_t)this, (uint64_t)v14);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v13);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v14);
}

void sub_2140399A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t RecentBuffer::setCommonWords(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 52MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  uint64_t v4 = (BitArray *)(a1 + 496);
  BitArray::setSizeNoGrow((BitArray *)(a1 + 496), 0);
  *(unsigned char *)(a1 + 48DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  v27[0] = 0;
  v27[1] = 0;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  LMStats::resetStats((LMStats *)v20);
  long long v17 = xmmword_2140A2670;
  int v18 = 1;
  char v19 = 1;
  double v5 = (void (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 464))(*(void *)(a1 + 32));
  (*(void (**)(void, void *, void, unsigned char *, long long *, void (***)(void)))(**(void **)(a1 + 32) + 472))(*(void *)(a1 + 32), v27, 0, v20, &v17, v5);
  unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 104);
  if (v6 >= 2)
  {
    for (unsigned int i = 1; i != v6; ++i)
    {
      unint64_t WordIdWithMapping = WordLanguageModel::getWordIdWithMapping(*(void *)(a1 + 32), i, 0, a2, 0);
      unsigned int v9 = WordIdWithMapping;
      uint64_t v10 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v10 + 388) > WordIdWithMapping
        && *(unsigned char *)(*(void *)(v10 + 104) + WordIdWithMapping)
        && *(_DWORD *)(*(void *)(v10 + 256) + 4 * WordIdWithMapping) == WordIdWithMapping
        || WordIdWithMapping == 16777213)
      {
        char v16 = 0;
        if ((*(int (**)(void, unint64_t, uint64_t, unsigned char *, void (***)(void), void, void, void, char *))(**(void **)(a1 + 32) + 504))(*(void *)(a1 + 32), WordIdWithMapping, 0xFFFFLL, v20, v5, 0, 0, 0, &v16) < *(__int16 *)(a1 + 74))
        {
          uint64_t v11 = *(unsigned int *)(a1 + 520);
          if (v11 == *(_DWORD *)(a1 + 524))
          {
            DgnPrimArray<unsigned int>::reallocElts(a1 + 512, 1, 1);
            uint64_t v11 = *(unsigned int *)(a1 + 520);
          }
          *(_DWORD *)(*(void *)(a1 + 512) + 4 * v11) = v9;
          ++*(_DWORD *)(a1 + 520);
          if (v9 == 16777213)
          {
            *(unsigned char *)(a1 + 48DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
          }
          else
          {
            unsigned int v12 = *(_DWORD *)(a1 + 504);
            if (v12 <= v9) {
              BitArray::addSize(v4, v9 - v12 + 1);
            }
            *(_DWORD *)(*(void *)v4 + 4 * (v9 >> 5)) |= 1 << v9;
          }
        }
      }
    }
  }
  DgnDelete<LMContextData>(v5);
  DgnPrimArray<unsigned int>::compact(a1 + 512);
  unsigned int v13 = *(_DWORD *)(a1 + 504) + 1;
  while (1)
  {
    unsigned int v14 = v13 - 2;
    if ((int)(v13 - 2) < 0) {
      break;
    }
    --v13;
    if ((*(_DWORD *)(*(void *)v4 + 4 * (v14 >> 5)) >> v14)) {
      goto LABEL_21;
    }
  }
  unsigned int v13 = 0;
LABEL_21:
  BitArray::setSize(v4, v13);
  BitArray::compact(v4);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v27);
}

void sub_214039CBC(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t RecentBuffer::computeRemainderScore(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  v6.n128_f64[0] = LMStats::resetStats((LMStats *)v14);
  (*(void (**)(__n128))(**((void **)a1 + 4) + 472))(v6);
  if (a1[130])
  {
    unint64_t v7 = 0;
    double v8 = 1.0;
    do
    {
      uint64_t v9 = *(unsigned int *)(*((void *)a1 + 64) + 4 * v7);
      char v13 = 0;
      double v8 = v8
         - *(double *)(*((void *)a1 + 56)
                     + 8
                     * (*(unsigned int (**)(void, uint64_t, uint64_t, unsigned char *, uint64_t, void, void, void, char *))(**((void **)a1 + 4) + 504))(*((void *)a1 + 4), v9, 0xFFFFLL, v14, a4, 0, 0, 0, &v13));
      ++v7;
    }
    while (v7 < a1[130]);
  }
  else
  {
    double v8 = 1.0;
  }
  (*(void (**)(void, uint64_t))(**((void **)a1 + 4) + 480))(*((void *)a1 + 4), a4);
  int v10 = *a1;
  double v11 = -20.0;
  if (v8 > 0.0)
  {
    double v11 = DgnLog(v8);
    if (v11 < -20.0) {
      double v11 = -20.0;
    }
  }
  return (int)((double)-v10 * v11 + 0.5);
}

uint64_t RecentBuffer::computeRemainderScores(RecentBuffer *this)
{
  unsigned int v2 = *(_DWORD *)(*((void *)this + 1) + 388);
  unsigned int v3 = (void *)((char *)this + 464);
  unsigned int v4 = *((_DWORD *)this + 119);
  if (v2 > v4) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 464, v2 - v4, 0);
  }
  *((_DWORD *)this + 11DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v2;
  v21[0] = 0;
  unint64_t v5 = realloc_array(0, v21, 4uLL, 0, 0, 1);
  long long v24 = v21[0];
  int v25 = 1;
  int v26 = v5 >> 2;
  *(_OWORD *)long long v21 = xmmword_2140AAED0;
  int v22 = 3;
  char v23 = 1;
  __n128 v6 = (void (***)(void))(*(uint64_t (**)(void))(**((void **)this + 3) + 464))();
  unint64_t v7 = (void (***)(void))(*(uint64_t (**)(void))(**((void **)this + 4) + 464))(*((void *)this + 4));
  LODWORD(v20[0]) = 0;
  if (v2)
  {
    for (unsigned int i = 0; i < v2; LODWORD(v20[0]) = ++i)
    {
      uint64_t v9 = *((void *)this + 1);
      if (*(_DWORD *)(v9 + 388) > i
        && *(unsigned char *)(*(void *)(v9 + 104) + i)
        && *(_DWORD *)(*(void *)(v9 + 256) + 4 * i) == i)
      {
        if ((*(uint64_t (**)(void))(**((void **)this + 2) + 112))(*((void *)this + 2)))
        {
          if (*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 80, (int *)v20))
          {
            unsigned int i = v20[0];
            *(_WORD *)(*v3 + 2 * LODWORD(v20[0])) = 20000;
          }
          else
          {
            (*(void (**)(void, void, void (***)(void)))(**((void **)this + 3) + 408))(*((void *)this + 3), 0, v6);
            _DWORD *v24 = v20[0];
            __int16 v10 = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v24, (uint64_t)v21, (uint64_t)v7);
            *(_WORD *)(*((void *)this + 58) + 2 * LODWORD(v20[0])) = v10;
            (*(void (**)(void, void, void (***)(void)))(**((void **)this + 3) + 424))(*((void *)this + 3), 0, v6);
            (*(void (**)(void, void))(**((void **)this + 3) + 432))(*((void *)this + 3), 0);
            unsigned int i = v20[0];
          }
          continue;
        }
        unsigned int i = v20[0];
      }
      *(_WORD *)(*v3 + 2 * i) = 20000;
    }
  }
  (*(void (**)(void, void, void (***)(void)))(**((void **)this + 3) + 408))(*((void *)this + 3), 0, v6);
  v20[0] = 0;
  v20[1] = 0;
  *((_WORD *)this + 242) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)v20, (uint64_t)v21, (uint64_t)v7);
  unsigned int v14 = 0;
  unint64_t v11 = realloc_array(0, (void **)&v14, 4uLL, 0, 0, 1);
  long long v17 = v14;
  int v18 = 1;
  int v19 = v11 >> 2;
  *unsigned int v14 = 0xFFFFFF;
  *((_WORD *)this + 24MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v17, (uint64_t)v21, (uint64_t)v7);
  unsigned int v27 = 0;
  unint64_t v12 = realloc_array(0, &v27, 4uLL, 0, 0, 1);
  unsigned int v14 = v27;
  int v15 = 1;
  int v16 = v12 >> 2;
  *(_DWORD *)unsigned int v27 = 16777214;
  *((_WORD *)this + 241) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v14, (uint64_t)v21, (uint64_t)v7);
  *((_WORD *)this + 243) = 20000;
  (*(void (**)(void, uint64_t, void (***)(void)))(**((void **)this + 3) + 424))(*((void *)this + 3), 1, v6);
  (*(void (**)(void, void))(**((void **)this + 3) + 432))(*((void *)this + 3), 0);
  DgnDelete<LMContextData>(v7);
  DgnDelete<LMContextData>(v6);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
}

void sub_21403A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void RecentBuffer::loadRecentBufferText(RecentBuffer *this, DFile *a2)
{
  if (!DFile::subFileExists((uint64_t)a2, 0x4Bu)) {
    return;
  }
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v237);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v237, (uint64_t)a2, 0x4Bu, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v237, "RecentBufferText");
  v236[0] = 0;
  v236[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v237, sRBT_Versions, (uint64_t)v236, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v237, (unsigned int *)v236, v9, v10, v11, v12, v13, v14);
  FileVersiouint64_t n = DgnTextFile::getFileVersion((DgnTextFile *)v237);
  uint64_t v221 = this;
  if (FileVersion != 0x200000013)
  {
    v233[0] = 0;
    DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v237, "Depth", v233, 1, 1u, 2u);
    int v18 = *((unsigned char *)this + 56) ? 2 : 1;
    if (v233[0] != v18) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1384, (uint64_t)"lm/recentb", 16, (uint64_t)"%s", v16, v17, (char)&unk_2140AAEE8);
    }
  }
  unsigned int v235 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v237, "RecentBufferLength", &v235, 1, 0, 0x7FFFFFFFu);
  if (v235 != *((_DWORD *)this + 10)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1392, (uint64_t)"lm/recentb", 10, (uint64_t)"%s", v24, v25, (char)&errStr_lm_recentb_E_RBT_BAD_RECENTBUFFERLENGTH);
  }
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v237, v19, v20, v21, v22, v23, v24, v25);
  *(void *)uint64_t v233 = 0;
  uint64_t v234 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v237, (uint64_t)v233);
  v232[0] = 0;
  v232[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v237, (unint64_t)v232);
  uint64_t v230 = 0;
  uint64_t v231 = 0;
  uint64_t v228 = 0;
  uint64_t v229 = 0;
  if (FileVersion != 0x200000013)
  {
    int NumLineFields = DgnTextFile::getNumLineFields((DgnTextFile *)v237);
    if (*((unsigned char *)this + 56))
    {
      if (DgnTextFile::getNumLineFields((DgnTextFile *)v237) == 3) {
        goto LABEL_24;
      }
    }
    else if (NumLineFields == 2)
    {
LABEL_24:
      uint64_t v40 = *(const char ***)v233;
      if (*(_DWORD *)(*(void *)v233 + 8)) {
        uint64_t v41 = **(const char ***)v233;
      }
      else {
        uint64_t v41 = (const char *)&unk_2140AAEE8;
      }
      if (strcmp(v41, "EntryIndex"))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1554, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v42, v43, (char)"EntryIndex");
        uint64_t v40 = *(const char ***)v233;
      }
      if (*(_DWORD *)v232[0] != 3)
      {
        if (*((_DWORD *)v40 + 2)) {
          uint64_t v44 = *v40;
        }
        else {
          uint64_t v44 = (const char *)&unk_2140AAEE8;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1558, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v42, v43, (char)v44);
        uint64_t v40 = *(const char ***)v233;
      }
      if (*((_DWORD *)v40 + 6)) {
        uint64_t v49 = v40[2];
      }
      else {
        uint64_t v49 = (const char *)&unk_2140AAEE8;
      }
      this = v221;
      if (strcmp(v49, "EntryValue1")) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1563, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v50, v51, (char)"EntryValue1");
      }
      if (*(_DWORD *)(v232[0] + 4) != 1)
      {
        if (*(_DWORD *)(*(void *)v233 + 24)) {
          uint64_t v52 = *(void **)(*(void *)v233 + 16);
        }
        else {
          uint64_t v52 = &unk_2140AAEE8;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1567, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v50, v51, (char)v52);
      }
      if (*((unsigned char *)v221 + 56))
      {
        if (*(_DWORD *)(*(void *)v233 + 40)) {
          uint64_t v57 = *(const char **)(*(void *)v233 + 32);
        }
        else {
          uint64_t v57 = (const char *)&unk_2140AAEE8;
        }
        if (strcmp(v57, "EntryValue2")) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1574, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v58, v59, (char)"EntryValue2");
        }
        if (*(_DWORD *)(v232[0] + 8) != 1)
        {
          if (*(_DWORD *)(*(void *)v233 + 40)) {
            uint64_t v60 = *(void **)(*(void *)v233 + 32);
          }
          else {
            uint64_t v60 = &unk_2140AAEE8;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1578, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v58, v59, (char)v60);
        }
      }
      int v161 = 0;
      while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v237))
      {
        unsigned int LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v237, 0, v162, v163, v164, v165, v166, v167);
        unsigned int LineFieldInteger = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v237, 1u, v169, v170, v171, v172, v173, v174);
        if (v161 != LineFieldUnsigned)
        {
          uint64_t CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          if (*(_DWORD *)(CurrentLine + 8)) {
            char v185 = *(void **)CurrentLine;
          }
          else {
            char v185 = &unk_2140AAEE8;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1591, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v183, v184, (char)v185);
        }
        if (LineFieldUnsigned >= *((_DWORD *)v221 + 10))
        {
          uint64_t v186 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          if (*(_DWORD *)(v186 + 8)) {
            uint64_t v189 = *(void **)v186;
          }
          else {
            uint64_t v189 = &unk_2140AAEE8;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1594, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v187, v188, (char)v189);
        }
        if (*((unsigned char *)v221 + 56))
        {
          unsigned int v190 = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v237, 2u, v175, v176, v177, v178, v179, v180);
          if (LineFieldInteger >= 0xFFFFF4)
          {
            if (LineFieldInteger == -2)
            {
              unsigned int LineFieldInteger = 16777214;
            }
            else
            {
              if (LineFieldInteger != -1)
              {
                uint64_t v191 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
                if (*(_DWORD *)(v191 + 8)) {
                  uint64_t v194 = *(void **)v191;
                }
                else {
                  uint64_t v194 = &unk_2140AAEE8;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v192, v193, (char)v194);
              }
              unsigned int LineFieldInteger = 0xFFFFFF;
            }
          }
          if (v190 >= 0xFFFFF4)
          {
            if (v190 == -3)
            {
              unsigned int v190 = 16777213;
            }
            else
            {
              if (v190 != -1)
              {
                uint64_t v204 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
                if (*(_DWORD *)(v204 + 8)) {
                  uint64_t v207 = *(void **)v204;
                }
                else {
                  uint64_t v207 = &unk_2140AAEE8;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v205, v206, (char)v207);
              }
              unsigned int v190 = 0xFFFFFF;
            }
          }
          if (LineFieldInteger < 0xFFFFF4)
          {
            uint64_t v208 = *((void *)v221 + 1);
            if (*(_DWORD *)(v208 + 388) <= LineFieldInteger || !*(unsigned char *)(*(void *)(v208 + 104) + LineFieldInteger))
            {
              uint64_t v209 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
              if (*(_DWORD *)(v209 + 8)) {
                uint64_t v212 = *(void **)v209;
              }
              else {
                uint64_t v212 = &unk_2140AAEE8;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1619, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v210, v211, (char)v212);
            }
          }
          if (v190 < 0xFFFFF4)
          {
            uint64_t v213 = *((void *)v221 + 1);
            if (*(_DWORD *)(v213 + 388) <= v190 || !*(unsigned char *)(*(void *)(v213 + 104) + v190))
            {
              uint64_t v214 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
              if (*(_DWORD *)(v214 + 8)) {
                uint64_t v217 = *(void **)v214;
              }
              else {
                uint64_t v217 = &unk_2140AAEE8;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1623, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v215, v216, (char)v217);
            }
          }
          uint64_t v218 = v229;
          if (v229 == (unint64_t)HIDWORD(v229))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v228, 1, 1);
            uint64_t v218 = v229;
          }
          *(_DWORD *)(v228 + 4 * v21DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = LineFieldInteger;
          LODWORD(v229) = v229 + 1;
          uint64_t v219 = v231;
          if (v231 == (unint64_t)HIDWORD(v231))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v230, 1, 1);
            uint64_t v219 = v231;
          }
          unsigned int LineFieldInteger = v190;
        }
        else
        {
          if (LineFieldInteger >= 0xFFFFF4)
          {
            if (LineFieldInteger == -3)
            {
              unsigned int LineFieldInteger = 16777213;
            }
            else
            {
              if (LineFieldInteger != -1)
              {
                uint64_t v200 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
                if (*(_DWORD *)(v200 + 8)) {
                  uint64_t v203 = *(void **)v200;
                }
                else {
                  uint64_t v203 = &unk_2140AAEE8;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v201, v202, (char)v203);
              }
              unsigned int LineFieldInteger = 0xFFFFFF;
            }
          }
          else
          {
            uint64_t v195 = *((void *)v221 + 1);
            if (*(_DWORD *)(v195 + 388) <= LineFieldInteger || !*(unsigned char *)(*(void *)(v195 + 104) + LineFieldInteger))
            {
              uint64_t v196 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
              if (*(_DWORD *)(v196 + 8)) {
                uint64_t v199 = *(void **)v196;
              }
              else {
                uint64_t v199 = &unk_2140AAEE8;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1603, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v197, v198, (char)v199);
            }
          }
          uint64_t v220 = v229;
          if (v229 == (unint64_t)HIDWORD(v229))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v228, 1, 1);
            uint64_t v220 = v229;
          }
          *(_DWORD *)(v228 + 4 * v22MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0xFFFFFF;
          LODWORD(v229) = v229 + 1;
          uint64_t v219 = v231;
          if (v231 == (unint64_t)HIDWORD(v231))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v230, 1, 1);
            uint64_t v219 = v231;
          }
        }
        *(_DWORD *)(v230 + 4 * v219) = LineFieldInteger;
        LODWORD(v231) = v231 + 1;
        ++v161;
      }
      goto LABEL_198;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1545, (uint64_t)"lm/recentb", 17, (uint64_t)"%s", v38, v39, (char)&errStr_lm_recentb_E_RBT_BAD_NUMFIELDS);
    goto LABEL_24;
  }
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v237, 4, v26, v27, v28, v29, v30, v31);
  uint64_t v32 = *(const char ***)v233;
  if (*(_DWORD *)(*(void *)v233 + 8)) {
    uint64_t v33 = **(const char ***)v233;
  }
  else {
    uint64_t v33 = (const char *)&unk_2140AAEE8;
  }
  if (strcmp(v33, "TableName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1414, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v34, v35, (char)"TableName");
    uint64_t v32 = *(const char ***)v233;
  }
  if (*(_DWORD *)v232[0])
  {
    if (*((_DWORD *)v32 + 2)) {
      uint64_t v36 = *v32;
    }
    else {
      uint64_t v36 = (const char *)&unk_2140AAEE8;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1418, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v34, v35, (char)v36);
    uint64_t v32 = *(const char ***)v233;
  }
  if (*((_DWORD *)v32 + 6)) {
    uint64_t v45 = v32[2];
  }
  else {
    uint64_t v45 = (const char *)&unk_2140AAEE8;
  }
  if (strcmp(v45, "EntryIndex"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1422, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v46, v47, (char)"EntryIndex");
    uint64_t v32 = *(const char ***)v233;
  }
  if (*(_DWORD *)(v232[0] + 4) != 3)
  {
    if (*((_DWORD *)v32 + 6)) {
      uint64_t v48 = v32[2];
    }
    else {
      uint64_t v48 = (const char *)&unk_2140AAEE8;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1426, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v46, v47, (char)v48);
    uint64_t v32 = *(const char ***)v233;
  }
  if (*((_DWORD *)v32 + 10)) {
    uint64_t v53 = v32[4];
  }
  else {
    uint64_t v53 = (const char *)&unk_2140AAEE8;
  }
  if (strcmp(v53, "EntryValue1"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1430, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v54, v55, (char)"EntryValue1");
    uint64_t v32 = *(const char ***)v233;
  }
  if (*(_DWORD *)(v232[0] + 8) != 1)
  {
    if (*((_DWORD *)v32 + 10)) {
      uint64_t v56 = v32[4];
    }
    else {
      uint64_t v56 = (const char *)&unk_2140AAEE8;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1434, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v54, v55, (char)v56);
    uint64_t v32 = *(const char ***)v233;
  }
  if (*((_DWORD *)v32 + 14)) {
    uint64_t v61 = v32[6];
  }
  else {
    uint64_t v61 = (const char *)&unk_2140AAEE8;
  }
  if (strcmp(v61, "EntryValue2")) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1438, (uint64_t)"lm/recentb", 7, (uint64_t)"%.500s %.500s", v62, v63, (char)"EntryValue2");
  }
  if (*(_DWORD *)(v232[0] + 12) != 1)
  {
    if (*(_DWORD *)(*(void *)v233 + 56)) {
      int64_t v64 = *(void **)(*(void *)v233 + 48);
    }
    else {
      int64_t v64 = &unk_2140AAEE8;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1442, (uint64_t)"lm/recentb", 8, (uint64_t)"%.500s %.500s", v62, v63, (char)v64);
  }
  uint64_t v226 = 0;
  uint64_t v227 = 0;
  DgnString::DgnString((DgnString *)&v224);
  int v65 = 0;
  char v66 = 1;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v237))
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v237, 0);
    DgnString::DgnString((DgnString *)&v222, LineFieldString);
    unsigned int v76 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v237, 1u, v70, v71, v72, v73, v74, v75);
    unsigned int v83 = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v237, 2u, v77, v78, v79, v80, v81, v82);
    unsigned int v90 = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v237, 3u, v84, v85, v86, v87, v88, v89);
    if (v66) {
      DgnString::operator=((DgnString *)&v224, (DgnString *)&v222);
    }
    int v91 = v223;
    uint64_t v92 = v222;
    if (v223) {
      uint64_t v93 = v222;
    }
    else {
      uint64_t v93 = (const char *)&unk_2140AAEE8;
    }
    if (strcmp(v93, "UnigramRecentBuffer") && strcmp(v93, "BigramRecentBuffer"))
    {
      uint64_t v94 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      uint64_t v97 = &unk_2140AAEE8;
      if (*(_DWORD *)(v94 + 8)) {
        uint64_t v97 = *(void **)v94;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1468, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v95, v96, (char)v97);
      int v91 = v223;
      uint64_t v92 = v222;
    }
    if (v91) {
      unint64_t v98 = v92;
    }
    else {
      unint64_t v98 = (const char *)&unk_2140AAEE8;
    }
    int v99 = v225;
    uint64_t v100 = (const char *)v224;
    if (v225) {
      uint64_t v101 = (const char *)v224;
    }
    else {
      uint64_t v101 = (const char *)&unk_2140AAEE8;
    }
    if (strcmp(v98, v101) && strcmp(v98, "BigramRecentBuffer"))
    {
      uint64_t v102 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      uint64_t v105 = &unk_2140AAEE8;
      if (*(_DWORD *)(v102 + 8)) {
        uint64_t v105 = *(void **)v102;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1472, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v103, v104, (char)v105);
      int v91 = v223;
      uint64_t v92 = v222;
      int v99 = v225;
      uint64_t v100 = (const char *)v224;
    }
    if (v91) {
      char v106 = v92;
    }
    else {
      char v106 = (const char *)&unk_2140AAEE8;
    }
    if (v99) {
      uint64_t v107 = v100;
    }
    else {
      uint64_t v107 = (const char *)&unk_2140AAEE8;
    }
    this = v221;
    if (strcmp(v106, v107))
    {
      DgnString::operator=((DgnString *)&v224, (DgnString *)&v222);
      int v65 = 0;
    }
    if (v76 != v65)
    {
      uint64_t v108 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      uint64_t v111 = &unk_2140AAEE8;
      if (*(_DWORD *)(v108 + 8)) {
        uint64_t v111 = *(void **)v108;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1482, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v109, v110, (char)v111);
    }
    if (v76 >= *((_DWORD *)v221 + 10))
    {
      uint64_t v112 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      uint64_t v115 = &unk_2140AAEE8;
      if (*(_DWORD *)(v112 + 8)) {
        uint64_t v115 = *(void **)v112;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1485, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v113, v114, (char)v115);
    }
    if (v223) {
      uint64_t v116 = v222;
    }
    else {
      uint64_t v116 = (const char *)&unk_2140AAEE8;
    }
    if (strcmp(v116, "UnigramRecentBuffer"))
    {
      if (!*((unsigned char *)v221 + 56))
      {
        uint64_t v117 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
        uint64_t v120 = &unk_2140AAEE8;
        if (*(_DWORD *)(v117 + 8)) {
          uint64_t v120 = *(void **)v117;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1509, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v118, v119, (char)v120);
      }
      if (v83 >= 0xFFFFF4)
      {
        if (v83 == -2)
        {
          unsigned int v83 = 16777214;
        }
        else
        {
          if (v83 != -1)
          {
            uint64_t v121 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
            uint64_t v124 = &unk_2140AAEE8;
            if (*(_DWORD *)(v121 + 8)) {
              uint64_t v124 = *(void **)v121;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v122, v123, (char)v124);
          }
          unsigned int v83 = 0xFFFFFF;
        }
      }
      if (v90 >= 0xFFFFF4)
      {
        if (v90 == -3)
        {
          unsigned int v90 = 16777213;
        }
        else
        {
          if (v90 != -1)
          {
            uint64_t v138 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
            uint64_t v141 = &unk_2140AAEE8;
            if (*(_DWORD *)(v138 + 8)) {
              uint64_t v141 = *(void **)v138;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v139, v140, (char)v141);
          }
          unsigned int v90 = 0xFFFFFF;
        }
      }
      if (v83 < 0xFFFFF4)
      {
        uint64_t v142 = *((void *)v221 + 1);
        if (*(_DWORD *)(v142 + 388) <= v83 || !*(unsigned char *)(*(void *)(v142 + 104) + v83))
        {
          uint64_t v143 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          uint64_t v146 = &unk_2140AAEE8;
          if (*(_DWORD *)(v143 + 8)) {
            uint64_t v146 = *(void **)v143;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1518, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v144, v145, (char)v146);
        }
      }
      if (v90 < 0xFFFFF4)
      {
        uint64_t v147 = *((void *)v221 + 1);
        if (*(_DWORD *)(v147 + 388) <= v90 || !*(unsigned char *)(*(void *)(v147 + 104) + v90))
        {
          uint64_t v148 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          uint64_t v151 = &unk_2140AAEE8;
          if (*(_DWORD *)(v148 + 8)) {
            uint64_t v151 = *(void **)v148;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1522, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v149, v150, (char)v151);
        }
      }
      uint64_t v152 = v229;
      if (v229 == (unint64_t)HIDWORD(v229))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v228, 1, 1);
        uint64_t v152 = v229;
      }
      *(_DWORD *)(v228 + 4 * v152) = v83;
      LODWORD(v229) = v229 + 1;
      uint64_t v153 = v231;
      if (v231 == (unint64_t)HIDWORD(v231))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v230, 1, 1);
        uint64_t v153 = v231;
      }
      unsigned int v83 = v90;
LABEL_181:
      *(_DWORD *)(v230 + 4 * v153) = v83;
      LODWORD(v231) = v231 + 1;
      goto LABEL_186;
    }
    if (v90 != -1)
    {
      uint64_t v125 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
      uint64_t v128 = &unk_2140AAEE8;
      if (*(_DWORD *)(v125 + 8)) {
        uint64_t v128 = *(void **)v125;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1491, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v126, v127, (char)v128);
    }
    if (v83 >= 0xFFFFF4)
    {
      if (v83 == -3)
      {
        unsigned int v83 = 16777213;
      }
      else
      {
        if (v83 != -1)
        {
          uint64_t v134 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
          uint64_t v137 = &unk_2140AAEE8;
          if (*(_DWORD *)(v134 + 8)) {
            uint64_t v137 = *(void **)v134;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 321, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v135, v136, (char)v137);
        }
        unsigned int v83 = 0xFFFFFF;
      }
    }
    else
    {
      uint64_t v129 = *((void *)v221 + 1);
      if (*(_DWORD *)(v129 + 388) <= v83 || !*(unsigned char *)(*(void *)(v129 + 104) + v83))
      {
        uint64_t v130 = DgnTextFile::getCurrentLine((DgnTextFile *)v237);
        uint64_t v133 = &unk_2140AAEE8;
        if (*(_DWORD *)(v130 + 8)) {
          uint64_t v133 = *(void **)v130;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1497, (uint64_t)"lm/recentb", 9, (uint64_t)"%.500s", v131, v132, (char)v133);
      }
    }
    uint64_t v154 = v227;
    if (v227 == (unint64_t)HIDWORD(v227))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v226, 1, 1);
      uint64_t v154 = v227;
    }
    v226[v154] = v83;
    LODWORD(v227) = v227 + 1;
    if (!*((unsigned char *)v221 + 56))
    {
      uint64_t v155 = v229;
      if (v229 == (unint64_t)HIDWORD(v229))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v228, 1, 1);
        uint64_t v155 = v229;
      }
      *(_DWORD *)(v228 + 4 * v155) = 0xFFFFFF;
      LODWORD(v229) = v229 + 1;
      uint64_t v153 = v231;
      if (v231 == (unint64_t)HIDWORD(v231))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v230, 1, 1);
        uint64_t v153 = v231;
      }
      goto LABEL_181;
    }
LABEL_186:
    ++v65;
    DgnString::~DgnString((DgnString *)&v222);
    char v66 = 0;
  }
  uint64_t v156 = v227;
  if (v227 && *((unsigned char *)this + 56))
  {
    if (v227 == v231)
    {
      while ((int)v156 >= 1)
      {
        int v157 = v226[v156 - 1];
        int v158 = *(_DWORD *)(v230 - 4 + 4 * v156--);
        if (v157 != v158) {
          goto LABEL_196;
        }
      }
    }
    else
    {
LABEL_196:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1534, (uint64_t)"lm/recentb", 13, (uint64_t)"%s", v67, v68, (char)&errStr_lm_recentb_E_UNI_BI_MISMATCH);
    }
  }
  DgnString::~DgnString((DgnString *)&v224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v226);
LABEL_198:
  RecentBuffer::initRecentBuffer(this);
  RecentBuffer::initHeadClonesAndCommonWords(this);
  if (*((unsigned char *)this + 72)) {
    RecentBuffer::computeRemainderScores(this);
  }
  uint64_t v224 = 0;
  unint64_t v159 = realloc_array(0, &v224, 4uLL, 0, 0, 1);
  uint64_t v226 = v224;
  LODWORD(v227) = 1;
  HIDWORD(v227) = v159 >> 2;
  if (v231)
  {
    unint64_t v160 = 0;
    do
    {
      *uint64_t v226 = *(_DWORD *)(v230 + 4 * v160);
      RecentBuffer::addToRecentInternal(v221, (uint64_t)&v226, *(_DWORD *)(v228 + 4 * v160++));
    }
    while (v160 < v231);
  }
  RecentBuffer::computeAppearancesToScores(v221, *((_DWORD *)v221 + 60) - *((_DWORD *)v221 + 64) - (*((_DWORD *)v221 + 62) + *((_DWORD *)v221 + 63)));
  RecentBuffer::setWeights(v221);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v226);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v228);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v230);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v232);
  DgnArray<DgnString>::releaseAll((uint64_t)v233);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v236);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v237);
}

void sub_21403B71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
}

void (***RecentBuffer::loadRecentBufferBinary(RecentBuffer *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v6 = a2;
  uint64_t v76 = 0;
  uint64_t v10 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x49u, 1, "RCNTBUFB", (_DWORD *)&v76 + 1, &v76);
  BOOL v11 = HIDWORD(v76) == 18 && v76 == 7;
  int v12 = v11;
  if (!v11 && (HIDWORD(v76) != 22 || v76 != 8))
  {
    uint64_t v62 = a3;
    if (*((_DWORD *)v6 + 6)) {
      uint64_t v14 = (char *)*((void *)v6 + 2);
    }
    else {
      uint64_t v14 = (char *)&unk_2140AAEE8;
    }
    MrecHeaderCheckVersions(v14, "RCNTBUFB", HIDWORD(v76), v76, 0x18u, 9u);
    uint64_t v61 = v6;
    MrecHeaderCheckLatestVersionIfShared(v6, "RCNTBUFB", SHIDWORD(v76), v76, 24, 9, v37, v38);
    unsigned int v75 = 0;
    uint64_t v39 = (_DWORD *)((char *)this + 40);
    readObject((uint64_t)v10, (_DWORD *)this + 10, &v75);
    readObject(v10, (double *)this + 6, &v75);
    readObject((uint64_t)v10, (BOOL *)this + 56, &v75);
    readObject(v10, (double *)this + 8, &v75);
    readObject((uint64_t)v10, (BOOL *)this + 72, &v75);
    readObject((uint64_t)v10, (_WORD *)this + 37, &v75);
    readObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)v10, (uint64_t)this + 80, &v75);
    readObject(v10, (RecentBuffer *)((char *)this + 192), &v75);
    readObject<unsigned int>(v10, (uint64_t)this + 208, &v75);
    readObject<unsigned int>(v10, (uint64_t)this + 224, &v75);
    uint64_t v40 = (unsigned int *)((char *)this + 240);
    readObject((uint64_t)v10, (_DWORD *)this + 60, &v75);
    readObject((uint64_t)v10, (_DWORD *)this + 61, &v75);
    readObject<unsigned short>(v10, (uint64_t)this + 464, &v75);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 240, &v75);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 241, &v75);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 242, &v75);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 243, &v75);
    readObject((uint64_t)v10, (BOOL *)this + 488, &v75);
    readObject(v10, (RecentBuffer *)((char *)this + 496), &v75);
    readObject<unsigned int>(v10, (uint64_t)this + 512, &v75);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 264, &v75);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 265, &v75);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 266, &v75);
    readObject((uint64_t)v10, (unsigned __int16 *)this + 267, &v75);
    uint64_t v41 = *(unsigned int *)(*((void *)this + 1) + 388);
    unsigned int v42 = *((_DWORD *)this + 69);
    if (v41 <= v42)
    {
      *((_DWORD *)this + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v41;
      if (!v41)
      {
        char v43 = 1;
        goto LABEL_63;
      }
    }
    else
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 264, v41 - v42, 0);
      *((_DWORD *)this + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v41;
    }
    bzero(*((void **)this + 33), 2 * v41);
    char v43 = 0;
LABEL_63:
    *(void *)((char *)this + 254) = 0;
    *((void *)this + 31) = 0;
    if (*((unsigned char *)this + 56))
    {
      unsigned int v44 = *((_DWORD *)this + 75);
      if (v41 > v44) {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 288, v41 - v44, 0);
      }
      *((_DWORD *)this + 74) = v41;
      if ((v43 & 1) == 0) {
        bzero(*((void **)this + 36), 2 * v41);
      }
      *((_DWORD *)this + 7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
    }
    uint64_t v45 = (void *)((char *)this + 416);
    uint64_t v46 = (*((_DWORD *)this + 10) + 1);
    unsigned int v47 = *((_DWORD *)this + 107);
    if (v46 > v47) {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 416, v46 - v47, 0);
    }
    uint64_t v48 = *((unsigned int *)this + 106);
    if (v48 <= v46)
    {
      if (v48 < v46)
      {
        uint64_t v51 = v46 - v48;
        uint64_t v52 = 16 * v48;
        do
        {
          uint64_t v53 = (void *)(*v45 + v52);
          *uint64_t v53 = 0;
          v53[1] = 0;
          v52 += 16;
          --v51;
        }
        while (v51);
      }
    }
    else if ((int)v48 > (int)v46)
    {
      uint64_t v49 = (int)v48;
      uint64_t v50 = 16 * (int)v48 - 16;
      do
      {
        --v49;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v45 + v50);
        v50 -= 16;
      }
      while (v49 > (int)v46);
    }
    *((_DWORD *)this + 106) = v46;
    if (*((unsigned char *)this + 72)) {
      BOOL v54 = a4 == 0;
    }
    else {
      BOOL v54 = 1;
    }
    if (!v54) {
      RecentBuffer::computeRemainderScores(this);
    }
    uint64_t v6 = v61;
    a3 = v62;
    if (*v40)
    {
      unsigned int v55 = 0;
      unsigned int v56 = (*((_DWORD *)this + 61) + *v39 - *v40 + 1) % *v39;
      do
      {
        uint64_t v57 = v56;
        RecentBuffer::addWordCountUni((uint64_t)this, *(_DWORD *)(*((void *)this + 26) + 4 * v56), 1);
        if (*((unsigned char *)this + 56)) {
          RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((void *)this + 26) + 4 * v57), *(_DWORD *)(*((void *)this + 28) + 4 * v57), 1);
        }
        if (v57 + 1 == *v39) {
          unsigned int v56 = 0;
        }
        else {
          unsigned int v56 = v57 + 1;
        }
        ++v55;
        unsigned int v58 = *v40;
      }
      while (v55 < *v40);
    }
    else
    {
      unsigned int v58 = 0;
    }
    RecentBuffer::computeAppearancesToScores(this, v58 - *((_DWORD *)this + 64) - (*((_DWORD *)this + 62) + *((_DWORD *)this + 63)));
    RecentBuffer::setWeights(this);
    goto LABEL_95;
  }
  MrecHeaderCheckLatestVersionIfShared(v6, "RCNTBUFB", SHIDWORD(v76), v76, 24, 9, v8, v9);
  unsigned int v75 = 0;
  readObject((uint64_t)v10, (_DWORD *)this + 10, &v75);
  readObject(v10, (double *)this + 6, &v75);
  int v15 = (char *)this + 56;
  readObject((uint64_t)v10, (BOOL *)this + 56, &v75);
  readObject(v10, (double *)this + 8, &v75);
  readObject((uint64_t)v10, (BOOL *)this + 72, &v75);
  readObject((uint64_t)v10, (_WORD *)this + 37, &v75);
  int v74 = 0;
  readObject((uint64_t)v10, &v74, &v75);
  *((_WORD *)this + 24MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v74;
  int v73 = 0;
  readObject((uint64_t)v10, &v73, &v75);
  *((_WORD *)this + 242) = v73;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  v70[0] = 0;
  v70[1] = 0;
  readObject<int>(v10, (uint64_t)&v71, &v75);
  if (v12)
  {
    v63[0] = 0;
    v63[1] = 0;
    readObject<int>(v10, (uint64_t)v63, &v75);
    if (*v15)
    {
      uint64_t v18 = v72;
      if (v72 == LODWORD(v63[1]))
      {
        while ((int)v18 >= 1)
        {
          int v19 = *(_DWORD *)(v71 - 4 + 4 * v18);
          int v20 = *((_DWORD *)v63[0] + --v18);
          if (v19 != v20) {
            goto LABEL_19;
          }
        }
      }
      else
      {
LABEL_19:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 1718, (uint64_t)"lm/recentb", 13, (uint64_t)"%s", v16, v17, (char)&errStr_lm_recentb_E_UNI_BI_MISMATCH);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v63);
  }
  readObject<int>(v10, (uint64_t)v70, &v75);
  v69[0] = 0;
  v69[1] = 0;
  readObject<int>(v10, (uint64_t)v69, &v75);
  RecentBuffer::initRecentBuffer(this);
  RecentBuffer::initHeadClonesAndCommonWords(this);
  if (*((unsigned char *)this + 72) && a4) {
    RecentBuffer::computeRemainderScores(this);
  }
  if ((a4 & 1) == 0)
  {
    unsigned int v21 = *(_DWORD *)(*((void *)this + 1) + 388);
    unsigned int v22 = *((_DWORD *)this + 119);
    if (v21 <= v22)
    {
      *((_DWORD *)this + 11DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
      LODWORD(v63[0]) = 0;
      if (!v21)
      {
LABEL_40:
        v63[0] = 0;
        unint64_t v27 = realloc_array(0, v63, 4uLL, 0, 0, 1);
        char v66 = v63[0];
        int v67 = 1;
        int v68 = v27 >> 2;
        *(_DWORD *)v63[0] = 16777214;
        *(_OWORD *)uint64_t v63 = xmmword_2140A2670;
        int v64 = 1;
        char v65 = 1;
        uint64_t v28 = (void (***)(void))(*(uint64_t (**)(void))(**((void **)this + 3) + 464))();
        uint64_t v29 = (void (***)(void))(*(uint64_t (**)(void))(**((void **)this + 4) + 464))(*((void *)this + 4));
        (*(void (**)(void, void, void (***)(void)))(**((void **)this + 3) + 408))(*((void *)this + 3), 0, v28);
        *((_WORD *)this + 241) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v66, (uint64_t)v63, (uint64_t)v29);
        (*(void (**)(void, uint64_t, void (***)(void)))(**((void **)this + 3) + 424))(*((void *)this + 3), 1, v28);
        (*(void (**)(void, void))(**((void **)this + 3) + 432))(*((void *)this + 3), 0);
        DgnDelete<LMContextData>(v29);
        DgnDelete<LMContextData>(v28);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v66);
        goto LABEL_41;
      }
    }
    else
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 464, v21 - v22, 0);
      *((_DWORD *)this + 11DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
      LODWORD(v63[0]) = 0;
    }
    unsigned int v23 = 0;
    do
    {
      uint64_t v24 = *((void *)this + 1);
      if (*(_DWORD *)(v24 + 388) > v23
        && *(unsigned char *)(*(void *)(v24 + 104) + v23)
        && *(_DWORD *)(*(void *)(v24 + 256) + 4 * v23) == v23)
      {
        if (((*(uint64_t (**)(void))(**((void **)this + 2) + 112))(*((void *)this + 2)) & 1) != 0
          && !*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 80, (int *)v63))
        {
          MaybeContextunsigned int LmId = WordLanguageModel::getMaybeContextLmId(*((WordLanguageModel **)this + 4), v63[0]);
          int v25 = *(_DWORD *)(v69[0] + 4 * MaybeContextLmId);
        }
        else
        {
          LOWORD(v25) = 20000;
        }
        unsigned int v23 = v63[0];
      }
      else
      {
        LOWORD(v25) = 20000;
      }
      *(_WORD *)(*((void *)this + 58) + 2 * v23++) = v25;
      LODWORD(v63[0]) = v23;
    }
    while (v23 < v21);
    goto LABEL_40;
  }
LABEL_41:
  if (!*v15) {
    DgnPrimArray<int>::copyArraySlice((unint64_t)v70, &v71, 0, v72);
  }
  char v66 = 0;
  unint64_t v30 = realloc_array(0, &v66, 4uLL, 0, 0, 1);
  v63[0] = v66;
  LODWORD(v63[1]) = 1;
  HIDWORD(v63[1]) = v30 >> 2;
  if (v72)
  {
    unint64_t v31 = 0;
    do
    {
      unsigned int v32 = *(_DWORD *)(v71 + 4 * v31);
      if (v32 == -3) {
        int v33 = 16777213;
      }
      else {
        int v33 = 0xFFFFFF;
      }
      if (v32 >= 0xFFFFF4) {
        unsigned int v32 = v33;
      }
      *(_DWORD *)v63[0] = v32;
      unsigned int v34 = *(_DWORD *)(v70[0] + 4 * v31);
      if (v34 == -2) {
        int v35 = 16777214;
      }
      else {
        int v35 = 0xFFFFFF;
      }
      if (v34 >= 0xFFFFF4) {
        int v36 = v35;
      }
      else {
        int v36 = *(_DWORD *)(v70[0] + 4 * v31);
      }
      RecentBuffer::addToRecentInternal(this, (uint64_t)v63, v36);
      ++v31;
    }
    while (v31 < v72);
  }
  RecentBuffer::computeAppearancesToScores(this, *((_DWORD *)this + 60) - *((_DWORD *)this + 64) - (*((_DWORD *)this + 62) + *((_DWORD *)this + 63)));
  RecentBuffer::setWeights(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v69);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v70);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v71);
LABEL_95:
  readObjectChecksumAndVerify(v10, v75);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(v6);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x49u, v75);
  return DgnDelete<DgnStream>((void (***)(void))v10);
}

void sub_21403C208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t RecentBuffer::saveRecentBufferText(RecentBuffer *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v54);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v54, (uint64_t)a2, 0x4Au, a3);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v54, sRBS_Versions, (uint64_t)&v52, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v54, "RecentBufferSpec", &v52[(v53 - 1)]);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v54, (uint64_t)&v50, (uint64_t)&v48);
  if (*((unsigned char *)this + 56)) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 1;
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v54, "Depth", v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v54, "RecentBufferLength", *((unsigned int *)this + 10));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v54, "RecentBufferWeight", *((double *)this + 6));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v54, "RecentBufferUnigramWeight", *((double *)this + 8));
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v54, "UseRecentBufferCommonWordsFix", *((unsigned __int8 *)this + 72));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v54, "RecentBufferCommonWordScore", *((__int16 *)this + 37));
  DgnArray<DgnString>::releaseAll((uint64_t)&v48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v52);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v54);
  uint64_t v12 = *((unsigned int *)this + 60);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  if (v12)
  {
    v54[0] = 0;
    HIDWORD(v53) = realloc_array(0, v54, 4 * v12, 0, 0, 1) >> 2;
    uint64_t v52 = v54[0];
  }
  LODWORD(v53) = v12;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v13 = *((unsigned int *)this + 60);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    if (!v13) {
      goto LABEL_34;
    }
    v54[0] = 0;
    HIDWORD(v51) = realloc_array(0, v54, 4 * v13, 0, 0, 1) >> 2;
    uint64_t v14 = (unsigned int *)v54[0];
    uint64_t v50 = v54[0];
  }
  else
  {
    uint64_t v14 = 0;
    LODWORD(v13) = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  int v15 = *((_DWORD *)this + 60);
  LODWORD(v51) = v13;
  if (!v15)
  {
    LODWORD(v22) = 0;
    if (!v13) {
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  unint64_t v16 = 0;
  unsigned int v17 = (*((_DWORD *)this + 61) + *((_DWORD *)this + 10) - v15 + 1) % *((_DWORD *)this + 10);
  uint64_t v18 = *((void *)this + 26);
  int v19 = v52;
  do
  {
    unsigned int v20 = *(_DWORD *)(v18 + 4 * v17);
    if (v20 == 16777213) {
      int v21 = -3;
    }
    else {
      int v21 = -1;
    }
    if (v20 >= 0xFFFFF4) {
      unsigned int v20 = v21;
    }
    *((_DWORD *)v19 + vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v20;
    if (v17 + 1 == *((_DWORD *)this + 10)) {
      unsigned int v17 = 0;
    }
    else {
      ++v17;
    }
    ++v16;
    unint64_t v22 = *((unsigned int *)this + 60);
  }
  while (v16 < v22);
  if (v13)
  {
LABEL_24:
    unsigned int v23 = (*((_DWORD *)this + 61) - v22 + *((_DWORD *)this + 10) + 1) % *((_DWORD *)this + 10);
    uint64_t v24 = *((void *)this + 28);
    uint64_t v25 = v13;
    do
    {
      unsigned int v26 = *(_DWORD *)(v24 + 4 * v23);
      if (v26 == 16777214) {
        int v27 = -2;
      }
      else {
        int v27 = -1;
      }
      if (v26 >= 0xFFFFF4) {
        unsigned int v26 = v27;
      }
      *v14++ = v26;
      if (v23 + 1 == *((_DWORD *)this + 10)) {
        unsigned int v23 = 0;
      }
      else {
        ++v23;
      }
      --v25;
    }
    while (v25);
  }
LABEL_34:
  if (v53)
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v54);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v54, (uint64_t)a2, 0x4Bu, 1);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v54, sRBT_Versions, (uint64_t)&v48, v28, v29, v30, v31, v32);
    DgnTextFileWriter::setFileType((uint64_t)v54, "RecentBufferText", (void *)(v48 + 8 * (v49 - 1)));
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    DgnString::DgnString((DgnString *)v43, "EntryIndex");
    unsigned int v33 = v45;
    if (v45 == HIDWORD(v45))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v44, 1, 1);
      unsigned int v33 = v45;
    }
    DgnString::DgnString((DgnString *)(v44 + 16 * v33), (const DgnString *)v43);
    LODWORD(v45) = v45 + 1;
    DgnString::~DgnString((DgnString *)v43);
    unsigned int v34 = v47;
    if (v47 == HIDWORD(v47))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
      unsigned int v34 = v47;
    }
    *(_DWORD *)(v46 + 4 * v34) = 3;
    LODWORD(v47) = v34 + 1;
    DgnString::DgnString((DgnString *)v43, "EntryValue1");
    unsigned int v35 = v45;
    if (v45 == HIDWORD(v45))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v44, 1, 1);
      unsigned int v35 = v45;
    }
    DgnString::DgnString((DgnString *)(v44 + 16 * v35), (const DgnString *)v43);
    LODWORD(v45) = v45 + 1;
    DgnString::~DgnString((DgnString *)v43);
    unsigned int v36 = v47;
    if (v47 == HIDWORD(v47))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
      unsigned int v36 = v47;
    }
    *(_DWORD *)(v46 + 4 * v36) = 1;
    LODWORD(v47) = v36 + 1;
    if (*((unsigned char *)this + 56))
    {
      DgnString::DgnString((DgnString *)v43, "EntryValue2");
      unsigned int v37 = v45;
      if (v45 == HIDWORD(v45))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v44, 1, 1);
        unsigned int v37 = v45;
      }
      DgnString::DgnString((DgnString *)(v44 + 16 * v37), (const DgnString *)v43);
      LODWORD(v45) = v45 + 1;
      DgnString::~DgnString((DgnString *)v43);
      unsigned int v38 = v47;
      if (v47 == HIDWORD(v47))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
        unsigned int v38 = v47;
      }
      *(_DWORD *)(v46 + 4 * v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
      LODWORD(v47) = v38 + 1;
    }
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v54, (uint64_t)&v46, (uint64_t)&v44);
    if (*((unsigned char *)this + 56)) {
      uint64_t v39 = 2;
    }
    else {
      uint64_t v39 = 1;
    }
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v54, "Depth", v39);
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v54, "RecentBufferLength", *((unsigned int *)this + 10));
    if (*((unsigned char *)this + 56))
    {
      if (v51)
      {
        unint64_t v40 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v54, 0, v40);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v54, 1u, v50[v40]);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v54, 2u, *((_DWORD *)v52 + v40));
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v54);
          ++v40;
        }
        while (v40 < v51);
      }
    }
    else if (v53)
    {
      unint64_t v41 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v54, 0, v41);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v54, 1u, *((_DWORD *)v52 + v41));
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v54);
        ++v41;
      }
      while (v41 < v53);
    }
    DgnArray<DgnString>::releaseAll((uint64_t)&v44);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v46);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v48);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v54);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v52);
}

void sub_21403C868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va5, a4);
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v14 = va_arg(va4, void);
  uint64_t v16 = va_arg(va4, void);
  va_copy(va5, va4);
  uint64_t v17 = va_arg(va5, void);
  uint64_t v19 = va_arg(va5, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va4);
  _Unwind_Resume(a1);
}

void (***RecentBuffer::saveRecentBufferBinary(RecentBuffer *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x49u, a4, "RCNTBUFB", 24, 9);
  unsigned int v20 = 0;
  writeObject((uint64_t)v7, (int *)this + 10, &v20);
  writeObject(v7, (const double *)this + 6, &v20, v8, v9, v10, v11, v12);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 56, &v20);
  writeObject(v7, (const double *)this + 8, &v20, v13, v14, v15, v16, v17);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 72, &v20);
  writeObject((uint64_t)v7, (__int16 *)this + 37, &v20);
  writeObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)v7, (uint64_t)this + 80, &v20);
  writeObject((uint64_t)v7, (uint64_t)this + 192, &v20);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 208, &v20);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 224, &v20);
  writeObject((uint64_t)v7, (int *)this + 60, &v20);
  writeObject((uint64_t)v7, (int *)this + 61, &v20);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 464, &v20);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 240, &v20);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 241, &v20);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 242, &v20);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 243, &v20);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 488, &v20);
  writeObject((uint64_t)v7, (uint64_t)this + 496, &v20);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 512, &v20);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 264, &v20);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 265, &v20);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 266, &v20);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 267, &v20);
  writeObjectChecksum((uint64_t)v7, (int *)&v20);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x49u, v20);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

void RecentBuffer::loadRecentBuffer(RecentBuffer *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (DFile::subFileExists((uint64_t)a2, 0x49u))
  {
    if (a4) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2042, (uint64_t)"lm/recentb", 11, (uint64_t)"%s", v10, v11, (char)&errStr_lm_recentb_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    }
    if (DFile::subFileExists((uint64_t)a2, 0x4Au)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2044, (uint64_t)"lm/recentb", 15, (uint64_t)"%s", v12, v13, (char)&errStr_lm_recentb_E_RBS_RBB_MISMATCH);
    }
    if (DFile::subFileExists((uint64_t)a2, 0x4Bu)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2046, (uint64_t)"lm/recentb", 6, (uint64_t)"%s", v14, v15, (char)&errStr_lm_recentb_E_RBT_WITH_BINARY_RB_FILE);
    }
    RecentBuffer::loadRecentBufferBinary(this, a2, a3, a5);
  }
  else
  {
    if ((a4 & 1) == 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2055, (uint64_t)"lm/recentb", 12, (uint64_t)"%s", v10, v11, (char)&errStr_lm_recentb_E_CANT_LOAD_TEXT_RECENT_BUFFER);
    }
    DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v53);
    DgnTextFileParser::openDgnTextFileParser((uint64_t)v53, (uint64_t)a2, 0x4Au, 1);
    DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v53, "RecentBufferSpec");
    v52[0] = 0;
    v52[1] = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v53, sRBS_Versions, (uint64_t)v52, v16, v17, v18, v19, v20);
    DgnTextFileParser::verifyFileVersionInRange((uint64_t)v53, (unsigned int *)v52, v21, v22, v23, v24, v25, v26);
    unsigned int v51 = 0;
    double v50 = 0.0;
    BOOL v49 = 0;
    double v48 = 1.0;
    BOOL v47 = 0;
    if (DgnTextFile::getFileVersion((DgnTextFile *)v53) == 0x100000013)
    {
      DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v53, "RecentBufferLength", &v51, 1, 0, 0x7FFFFFFFu);
      DgnTextFile::getHeaderFieldReal((DgnTextFile *)v53, "RecentBufferWeight", &v50, 1, 0.0, 0.99);
      DgnTextFile::getHeaderFieldBool((DgnTextFile *)v53, "UseBigramRecentBuffer", &v49, 1);
    }
    else
    {
      unsigned int v46 = 0;
      DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v53, "Depth", &v46, 1, 1u, 2u);
      BOOL v49 = v46 == 2;
      DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v53, "RecentBufferLength", &v51, 1, 0, 0x7FFFFFFFu);
      DgnTextFile::getHeaderFieldReal((DgnTextFile *)v53, "RecentBufferWeight", &v50, 1, 0.0, 0.99);
    }
    DgnTextFile::getHeaderFieldReal((DgnTextFile *)v53, "RecentBufferUnigramWeight", &v48, 1, 0.0, 1.0);
    DgnTextFile::getHeaderFieldBool((DgnTextFile *)v53, "UseRecentBufferCommonWordsFix", &v47, 1);
    unsigned int v46 = 0;
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v53, "RecentBufferCommonWordScore", (int *)&v46, 1, 0, 20000);
    __int16 v27 = v46;
    DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v53, v28, v29, v30, v31, v32, v33, v34);
    DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v53, 0, v35, v36, v37, v38, v39, v40);
    DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v53);
    if (v50 < 0.0 || v50 > 1.0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2117, (uint64_t)"lm/recentb", 2, (uint64_t)"%.500s %f", v41, v42, (char)"weight");
    }
    double v43 = v48;
    if (v48 < 0.0 || v48 > 1.0)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2121, (uint64_t)"lm/recentb", 2, (uint64_t)"%.500s %f", v41, v42, (char)"unigram weight");
      double v43 = v48;
    }
    BOOL v44 = v49;
    if (v49 == (v43 == 1.0))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2127, (uint64_t)"lm/recentb", 1, (uint64_t)"%f", v41, v42, SLOBYTE(v43));
      BOOL v44 = v49;
    }
    BOOL v45 = v47;
    if (!v44 && v47)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/recentb.cpp", 2129, (uint64_t)"lm/recentb", 14, (uint64_t)"%s", v41, v42, (char)&errStr_lm_recentb_E_COMMON_WORDS_FIX_CONFLICT);
      LOBYTE(v44) = v49;
      BOOL v45 = v47;
    }
    *((_DWORD *)this + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v51;
    *((double *)this + 6) = v50;
    *((unsigned char *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = v44;
    *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v48;
    *((unsigned char *)this + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = v45;
    *((_WORD *)this + 37) = v27;
    if (DFile::subFileExists((uint64_t)a2, 0x4Bu))
    {
      RecentBuffer::loadRecentBufferText(this, a2);
    }
    else
    {
      RecentBuffer::initRecentBuffer(this);
      RecentBuffer::initHeadClonesAndCommonWords(this);
      if (*((unsigned char *)this + 72)) {
        RecentBuffer::computeRemainderScores(this);
      }
    }
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)v52);
    DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v53);
  }
}

void sub_21403D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va1);
  _Unwind_Resume(a1);
}

void (***RecentBuffer::saveRecentBuffer(RecentBuffer *this, DFile *a2, DFileChecksums *a3, int a4, DFileChecksums *a5))(void)
{
  if (a4) {
    return (void (***)(void))RecentBuffer::saveRecentBufferText(this, a2, (int)a5);
  }
  else {
    return RecentBuffer::saveRecentBufferBinary(this, a2, a3, (int)a5);
  }
}

void RecentBuffer::addWordId(RecentBuffer *this, unsigned int a2)
{
  uint64_t v4 = *((unsigned int *)this + 68);
  if (a2 >= v4)
  {
    uint64_t v5 = (void *)((char *)this + 264);
    unsigned int v6 = a2 + 1;
    unsigned int v7 = *((_DWORD *)this + 69);
    uint64_t v8 = a2 + 1 - v7;
    if (v6 > v7) {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 264, v8, 0);
    }
    *((_DWORD *)this + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
    if (v4 < v6) {
      bzero((void *)(*v5 + 2 * v4), 2 * (a2 - v4) + 2);
    }
  }
  if (*((unsigned char *)this + 56))
  {
    uint64_t v9 = *((unsigned int *)this + 74);
    if (a2 >= v9)
    {
      unsigned int v10 = a2 + 1;
      unsigned int v11 = *((_DWORD *)this + 75);
      if (a2 + 1 > v11) {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 288, a2 + 1 - v11, 0);
      }
      *((_DWORD *)this + 74) = v10;
      if (v9 < v10) {
        bzero((void *)(*((void *)this + 36) + 2 * v9), 2 * (a2 - v9) + 2);
      }
    }
  }
  if (*((unsigned char *)this + 72))
  {
    uint64_t v12 = (void *)((char *)this + 464);
    uint64_t v13 = *((unsigned int *)this + 118);
    if (a2 >= v13)
    {
      unsigned int v14 = a2 + 1;
      unsigned int v15 = *((_DWORD *)this + 119);
      if (a2 + 1 > v15) {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 464, a2 + 1 - v15, 0);
      }
      *((_DWORD *)this + 11DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
      if (v13 < v14) {
        memset_pattern16((void *)(*v12 + 2 * v13), &unk_2140A1DB0, 2 * (a2 - v13) + 2);
      }
    }
    int v16 = *((unsigned __int16 *)this + 243);
    if (v16 == 20000)
    {
      *(void *)&long long v21 = 0;
      unint64_t v17 = realloc_array(0, (void **)&v21, 4uLL, 0, 0, 1);
      uint64_t v24 = v21;
      int v25 = 1;
      int v26 = v17 >> 2;
      *(_DWORD *)long long v21 = a2;
      long long v21 = xmmword_2140A2670;
      int v22 = 1;
      char v23 = 1;
      uint64_t v20 = (void (***)(void))(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 4)
                                                                                               + 464))(*((void *)this + 4), v18, v19);
      *((_WORD *)this + 243) = RecentBuffer::computeRemainderScore((int *)this, (uint64_t)&v24, (uint64_t)&v21, (uint64_t)v20);
      DgnDelete<LMContextData>(v20);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
      LOWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = *((_WORD *)this + 243);
    }
    *(_WORD *)(*v12 + 2 * a2) = v16;
  }
}

void sub_21403D2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void RecentBuffer::deleteWordId(RecentBuffer *this, unsigned int a2, BOOL *a3, BOOL *a4)
{
  unsigned int v18 = a2;
  if (!Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeIfPresent((uint64_t)this + 80, (int *)&v18))
  {
    unsigned int v7 = v18;
    if (*(_WORD *)(*((void *)this + 33) + 2 * v18)
      || *((_DWORD *)this + 126) > v18
      && ((*(_DWORD *)(*((void *)this + 62) + (((unint64_t)v18 >> 3) & 0x1FFFFFFC)) >> v18) & 1) != 0)
    {
      if (*((_DWORD *)this + 54))
      {
        unint64_t v8 = 0;
        do
        {
          unsigned int v9 = *(_DWORD *)(*((void *)this + 26) + 4 * v8);
          if (v9 == v18)
          {
            RecentBuffer::addWordCountUni((uint64_t)this, v9, 0);
            *(_DWORD *)(*((void *)this + 26) + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0xFFFFFF;
            RecentBuffer::addWordCountUni((uint64_t)this, 0xFFFFFFu, 1);
            if (*((unsigned char *)this + 56))
            {
              RecentBuffer::addWordCountBi(this, v18, *(_DWORD *)(*((void *)this + 28) + 4 * v8), 0);
              RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((void *)this + 26) + 4 * v8), *(_DWORD *)(*((void *)this + 28) + 4 * v8), 1);
            }
          }
          ++v8;
        }
        while (v8 < *((unsigned int *)this + 54));
      }
      RecentBuffer::computeAppearancesToScores(this, *((_DWORD *)this + 60) - *((_DWORD *)this + 64) - (*((_DWORD *)this + 62) + *((_DWORD *)this + 63)));
      unsigned int v7 = v18;
    }
    if (*((unsigned char *)this + 56))
    {
      if (*(_WORD *)(*((void *)this + 36) + 2 * v7))
      {
        unint64_t v10 = *((unsigned int *)this + 58);
        if (v10)
        {
          for (unint64_t i = 0; i < v10; ++i)
          {
            unsigned int v12 = *(_DWORD *)(*((void *)this + 28) + 4 * i);
            if (v12 == v18)
            {
              RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((void *)this + 26) + 4 * i), v12, 0);
              *(_DWORD *)(*((void *)this + 28) + 4 * i) = 0xFFFFFF;
              RecentBuffer::addWordCountBi(this, *(_DWORD *)(*((void *)this + 26) + 4 * i), 0xFFFFFFu, 1);
              unint64_t v10 = *((unsigned int *)this + 58);
            }
          }
          unsigned int v7 = v18;
        }
      }
    }
    int v13 = *((unsigned __int8 *)this + 72);
    if (*((unsigned char *)this + 72)) {
      *(_WORD *)(*((void *)this + 58) + 2 * v7) = 20000;
    }
    if (*((_DWORD *)this + 50) > v7 && ((*(_DWORD *)(*((void *)this + 24) + 4 * (v7 >> 5)) >> v7) & 1) != 0)
    {
      *a3 = 1;
LABEL_29:
      *a4 = 1;
      return;
    }
    if (v13)
    {
      if (*((_DWORD *)this + 126) > v7)
      {
        uint64_t v14 = *((void *)this + 62);
        uint64_t v15 = v7 >> 5;
        int v16 = *(_DWORD *)(v14 + 4 * v15);
        int v17 = 1 << v7;
        if ((v16 & v17) != 0)
        {
          *(_DWORD *)(v14 + 4 * v15) = v16 & ~v17;
          DgnPrimArray<unsigned int>::removeKeepOrder((uint64_t *)this + 64, v18);
          goto LABEL_29;
        }
      }
    }
  }
}

uint64_t RecentBuffer::addToRecent(WordLanguageModel **this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int v16 = a3;
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (v6)
  {
    int v17 = 0;
    HIDWORD(v15) = realloc_array(0, &v17, 4 * v6, 0, 0, 1) >> 2;
    uint64_t v14 = (char *)v17;
    uint64_t v3 = v16;
  }
  LODWORD(v15) = v6;
  if (v3 != 0xFFFFFF)
  {
    if (v3 == 16777214)
    {
      unsigned int v7 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(this + 10), (int *)&v16);
      if (!v7)
      {
LABEL_11:
        if (WordLanguageModel::getMaybeContextLmId(this[4], v16) == -1) {
          LODWORD(v3) = 0xFFFFFF;
        }
        else {
          LODWORD(v3) = v16;
        }
        goto LABEL_14;
      }
    }
    else
    {
      if (!(*(unsigned int (**)(WordLanguageModel *, uint64_t))(*(void *)this[2] + 112))(this[2], v3))
      {
        LODWORD(v3) = 0xFFFFFF;
        goto LABEL_14;
      }
      unsigned int v7 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(this + 10), (int *)&v16);
      if (!v7) {
        goto LABEL_11;
      }
    }
    LODWORD(v3) = *((_DWORD *)v7 + 4);
  }
LABEL_14:
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      int v10 = *(_DWORD *)(*(void *)a2 + v8);
      if (v10 != 0xFFFFFF) {
        break;
      }
LABEL_28:
      *(_DWORD *)&v14[v8] = v10;
      ++v9;
      v8 += 4;
      if (v9 >= *(unsigned int *)(a2 + 8)) {
        goto LABEL_29;
      }
    }
    if (v10 == 16777213)
    {
      unsigned int v11 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(this + 10), (int *)(*(void *)a2 + v8));
      if (!v11)
      {
        if (WordLanguageModel::getLmId(this[4], *(_DWORD *)(*(void *)a2 + v8)) == -1) {
          goto LABEL_27;
        }
        unsigned int v12 = (int *)(*(void *)a2 + v8);
        goto LABEL_24;
      }
    }
    else
    {
      if (!(*(unsigned int (**)(WordLanguageModel *))(*(void *)this[2] + 112))(this[2])) {
        goto LABEL_27;
      }
      unsigned int v11 = *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)(this + 10), (int *)(*(void *)a2 + v8));
      if (!v11)
      {
        if (WordLanguageModel::getLmId(this[4], *(_DWORD *)(*(void *)a2 + v8)) == -1)
        {
LABEL_27:
          int v10 = 0xFFFFFF;
          goto LABEL_28;
        }
        unsigned int v12 = (int *)(*(void *)a2 + 4 * v9);
        goto LABEL_24;
      }
    }
    unsigned int v12 = (int *)(v11 + 2);
LABEL_24:
    int v10 = *v12;
    goto LABEL_28;
  }
LABEL_29:
  RecentBuffer::addToRecentInternal((RecentBuffer *)this, (uint64_t)&v14, v3);
  RecentBuffer::computeAppearancesToScores((RecentBuffer *)this, *((_DWORD *)this + 60) - *((_DWORD *)this + 64) - (*((_DWORD *)this + 62) + *((_DWORD *)this + 63)));
  RecentBuffer::setWeights((RecentBuffer *)this);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
}

void sub_21403D79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E44E8;
  *(_OWORD *)(v5 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v5 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0;
  *(void *)(v5 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(_DWORD *)(v5 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 20;
  }
  else {
    int v7 = 24;
  }
  *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 32;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0;
  return a1;
}

void sub_21403D880(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash(uint64_t a1)
{
  Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E44E8;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<WordIdPair,WordIdPair,WordIdPair,unsigned int>::removeBucket(uint64_t result, char **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  *a2 = *(char **)*a2;
  uint64_t v4 = *(uint64_t (**)(char *))(result + 96);
  if (v4) {
    double result = v4(v3 + 12);
  }
  uint64_t v5 = *(uint64_t (**)(char *))(v2 + 104);
  if (v5) {
    double result = v5(v3 + 20);
  }
  *(void *)uint64_t v3 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = v3;
  --*(_DWORD *)(v2 + 8);
  return result;
}

void VarClassMgr::printSize(VarClassMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 76, (DgnString *)&v80);
  if (v81) {
    unsigned int v16 = v80;
  }
  else {
    unsigned int v16 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140AAF8C, a3, &unk_2140AAF8C, v16);
  DgnString::~DgnString((DgnString *)&v80);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140AAF8C);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81) {
    __int16 v27 = v80;
  }
  else {
    __int16 v27 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140AAF8C, (34 - a3), (34 - a3), v27, 4, 4, 0);
  uint64_t v79 = a3;
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81) {
    uint64_t v32 = v80;
  }
  else {
    uint64_t v32 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140AAF8C, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += 4;
  *a5 += 4;
  uint64_t v33 = sizeObject((uint64_t)this + 12, 0);
  uint64_t v34 = sizeObject((uint64_t)this + 12, 1);
  uint64_t v35 = sizeObject((uint64_t)this + 12, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81) {
    uint64_t v40 = v80;
  }
  else {
    uint64_t v40 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, v21, &unk_2140AAF8C, v22, v22, v40, v33, v34, v35);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v33;
  *a5 += v34;
  *a6 += v35;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81) {
    BOOL v45 = v80;
  }
  else {
    BOOL v45 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, v21, &unk_2140AAF8C, v22, v22, v45, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += 4;
  *a5 += 4;
  uint64_t v46 = sizeObject<LinearTransform>((uint64_t)this + 16, 0);
  uint64_t v47 = sizeObject<LinearTransform>((uint64_t)this + 16, 1);
  uint64_t v48 = sizeObject<LinearTransform>((uint64_t)this + 16, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81) {
    uint64_t v53 = v80;
  }
  else {
    uint64_t v53 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, v21, &unk_2140AAF8C, v22, v22, v53, v46, v47, v48);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v46;
  *a5 += v47;
  *a6 += v48;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v54 = 12;
  }
  else {
    uint64_t v54 = 16;
  }
  uint64_t v55 = *((unsigned int *)this + 10);
  unsigned int v56 = *((_DWORD *)this + 11);
  if (v56 >= v55)
  {
    uint64_t v57 = 0;
    if ((int)v55 > 0) {
      v54 += 4 * (v55 - 1) + 4;
    }
    uint64_t v58 = v54 + 4 * (v56 - v55);
  }
  else
  {
    uint64_t v57 = 4 * v55;
    uint64_t v58 = v54;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81) {
    uint64_t v63 = v80;
  }
  else {
    uint64_t v63 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v21, &unk_2140AAF8C, v22, v22, v63, v58, v54, v57);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v58;
  *a5 += v54;
  *a6 += v57;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 12;
  }
  else {
    uint64_t v64 = 16;
  }
  uint64_t v65 = *((unsigned int *)this + 14);
  unsigned int v66 = *((_DWORD *)this + 15);
  if (v66 >= v65)
  {
    uint64_t v67 = 0;
    if ((int)v65 > 0) {
      uint64_t v64 = (v64 | 2) + 2 * (v65 - 1);
    }
    uint64_t v68 = v64 + 2 * (v66 - v65);
  }
  else
  {
    uint64_t v67 = 2 * v65;
    uint64_t v68 = v64;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 78, (DgnString *)&v80);
  if (v81) {
    int v73 = v80;
  }
  else {
    int v73 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, v21, &unk_2140AAF8C, v22, v22, v73, v68, v64, v67);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v68;
  *a5 += v64;
  *a6 += v67;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/varclass.cpp", 79, (DgnString *)&v80);
  if (v81) {
    uint64_t v78 = v80;
  }
  else {
    uint64_t v78 = &unk_2140AAF8C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v79, &unk_2140AAF8C, (35 - v79), (35 - v79), v78, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v80);
}

void sub_21403DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void VarClassMgr::saveVarClassMgr(VarClassMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    VarClassMgr::saveTransforms(this, a2, a5);
    VarClassMgr::saveMap(this, a2, a5);
  }
  else
  {
    unint64_t v9 = OpenAndWriteMrecHeader((uint64_t)a2, 0x50u, a5, "MRSCB!?", 24, 4);
    int v11 = 0;
    writeObject((uint64_t)v9, (int *)this + 1, &v11);
    writeObject((uint64_t)v9, (int *)this + 2, &v11);
    writeObject((uint64_t)v9, (int *)this + 3, &v11);
    writeObject((uint64_t)v9, (int *)this, &v11);
    writeObject<LinearTransform>(v9, (uint64_t)this + 16, (unsigned int *)&v11);
    writeObject<unsigned int>((uint64_t)v9, (uint64_t)this + 32, &v11);
    writeObject<unsigned short>((uint64_t)v9, (uint64_t)this + 48, &v11);
    writeObjectChecksum((uint64_t)v9, &v11);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x50u, v11);
    DgnDelete<DgnStream>((void (***)(void))v9);
  }
}

void VarClassMgr::saveTransforms(VarClassMgr *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v32);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v32, (uint64_t)a2, 0x55u, a3);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v32, sSCT_Versions, (uint64_t)&v30, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v32, "SemitiedCovarianceClassTransforms", (void *)(v30 + 8 * (v31 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v32, "NumberOfCovarianceClasses", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v32, "NumberOfOutputFeatures", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v32, "NumberOfInputFeatures", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v32, "SCTIntScale", 1 << *((_DWORD *)this + 3));
  DgnArray<DgnString>::DgnArray(v29, 5);
  v25[0] = 0;
  unint64_t v11 = realloc_array(0, v25, 0x14uLL, 0, 0, 1);
  uint64_t v26 = v25[0];
  int v27 = 5;
  int v28 = v11 >> 2;
  DgnString::operator=(*(DgnString **)v29, "Type");
  *uint64_t v26 = 0;
  DgnString::operator=((DgnString *)(*(void *)v29 + 16), "VarId");
  v26[1] = 3;
  DgnString::operator=((DgnString *)(*(void *)v29 + 32), "RowNum");
  v26[2] = 3;
  DgnString::operator=((DgnString *)(*(void *)v29 + 48), "ColNum");
  v26[3] = 3;
  DgnString::operator=((DgnString *)(*(void *)v29 + 64), "Value");
  void v26[4] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v32, (uint64_t)&v26, (uint64_t)v29);
  unint64_t v12 = *(unsigned int *)this;
  if (v12)
  {
    unint64_t v13 = 0;
    unint64_t v14 = *((unsigned int *)this + 2);
    unint64_t v15 = v14;
    do
    {
      if (v15)
      {
        unint64_t v16 = 0;
        uint64_t v17 = (void *)(*((void *)this + 2) + 72 * v13 + 24);
        LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((_DWORD *)this + 1);
        do
        {
          if (v18)
          {
            for (unint64_t i = 0; i < v18; ++i)
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v32, 0, "SCTMatrix");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 1u, v13);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 2u, v16);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 3u, i);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v32, 4u, *(_DWORD *)(*(void *)(*v17 + 16 * v16) + 4 * i));
              DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v32);
              unint64_t v18 = *((unsigned int *)this + 1);
            }
            unint64_t v14 = *((unsigned int *)this + 2);
          }
          ++v16;
        }
        while (v16 < v14);
        unint64_t v12 = *(unsigned int *)this;
        unint64_t v15 = v14;
      }
      ++v13;
    }
    while (v13 < v12);
    if (v12)
    {
      unint64_t v20 = 0;
      do
      {
        uint64_t v21 = *((void *)this + 2) + 72 * v20;
        v25[0] = 0;
        v25[1] = 0;
        DgnPrimArray<int>::copyArraySlice((unint64_t)v25, (uint64_t *)(v21 + 8), 0, *(_DWORD *)(v21 + 16));
        if (*((_DWORD *)this + 2))
        {
          unint64_t v22 = 0;
          do
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v32, 0, "SCTOffset");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 1u, v20);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 2u, v22);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 3u, 0);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v32, 4u, *((_DWORD *)v25[0] + v22));
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v32);
            ++v22;
          }
          while (v22 < *((unsigned int *)this + 2));
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v20;
        unint64_t v23 = *(unsigned int *)this;
      }
      while (v20 < v23);
      if (v23)
      {
        unint64_t v24 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v32, 0, "SCTLogDeterminant");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 1u, v24);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 2u, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v32, 3u, 0);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v32, 4u, *(_DWORD *)(*((void *)this + 4) + 4 * v24));
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v32);
          ++v24;
        }
        while (v24 < *(unsigned int *)this);
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  DgnArray<DgnString>::releaseAll((uint64_t)v29);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v30);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v32);
}

void sub_21403E47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

void VarClassMgr::saveMap(VarClassMgr *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v20);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v20, (uint64_t)a2, 0x53u, a3);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v20, sSCM_Versions, (uint64_t)&v18, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v20, "SemitiedCovarianceClassMap", (void *)(v18 + 8 * (v19 - 1)));
  uint64_t v11 = *((unsigned int *)this + 14);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v20, "NumberOfGenones", v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v20, "NumberOfCovarianceClasses", *(unsigned int *)this);
  DgnArray<DgnString>::DgnArray(v17, 2);
  uint64_t v21 = 0;
  unint64_t v12 = realloc_array(0, &v21, 8uLL, 0, 0, 1);
  unint64_t v14 = v21;
  int v15 = 2;
  int v16 = v12 >> 2;
  DgnString::operator=(*(DgnString **)v17, "GenId");
  *unint64_t v14 = 3;
  DgnString::operator=((DgnString *)(*(void *)v17 + 16), "VarId");
  v14[1] = 3;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v20, (uint64_t)&v14, (uint64_t)v17);
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v20, 0, i);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v20, 1u, *(unsigned __int16 *)(*((void *)this + 6) + 2 * i));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v20);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
  DgnArray<DgnString>::releaseAll((uint64_t)v17);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v18);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v20);
}

void sub_21403E688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

uint64_t SDParamSetHolder_NewFromFile(FileSpec *a1)
{
  uint64_t v2 = SdapiInsurance::SdapiInsurance(v23, "SDParamSetHolder_NewFromFile", 1, 1, 187);
  if (v23[97])
  {
    if (!a1) {
      throwBadStringPointer(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    LOBYTE(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0;
    if (gbShowCalls | gbShowCallsWithFileSpecArgs)
    {
      DgnString::DgnString((DgnString *)&v21);
      DgnString::DgnString((DgnString *)&v24);
      FileSpec::getDiagnosticMaskedName(a1, (DgnString *)&v24, v10);
      DgnString::preAllocate((unint64_t)&v21, 96);
      if (v25) {
        uint64_t v11 = v24;
      }
      else {
        uint64_t v11 = (char *)&unk_2140AAFC0;
      }
      DgnString::formatStringInPlace((DgnString *)&v21, v11);
      DgnString::~DgnString((DgnString *)&v24);
      if (v22) {
        int v16 = v21;
      }
      else {
        int v16 = &unk_2140AAFC0;
      }
      xlprintf("Entering sdapi call %.500s(%.500s)\n", v12, v13, v14, v15, "SDParamSetHolder_NewFromFile", v16);
      DgnString::~DgnString((DgnString *)&v21);
    }
    FileSpec::FileSpec((FileSpec *)&v24, (const char *)a1);
    DFileOwner::DFileOwner((DFileOwner *)&v21);
    uint64_t v17 = DFile::openDFile((uint64_t)&v24, 0, 13, (uint64_t)&v21);
    uint64_t ParamSetHolder = ParamSetHolderMgr::loadParamSetHolder((ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr, (char **)v17);
    DFileOwner::~DFileOwner((DFileOwner *)&v21, v19);
    FileSpec::~FileSpec((FileSpec *)&v24);
  }
  else
  {
    uint64_t ParamSetHolder = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v23);
  return ParamSetHolder;
}

void sub_21403E8D4()
{
}

void SDParamSetHolder_Delete(unint64_t a1)
{
  SdapiInsurance::SdapiInsurance(v10, "SDParamSetHolder_Delete", 1, 1, 189);
  if (v10[97])
  {
    if (gbShowCalls) {
      xlprintf("Entering sdapi call %.500s(<SDh %lld>)\n", v2, v3, v4, v5, "SDParamSetHolder_Delete", a1);
    }
    uint64_t v9 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
    if (HIDWORD(a1)) {
      throwBadSdapiArgument("SDhParamSetHolder", a1, v3, v4, v5, v6, v7, v8);
    }
    if ((a1 + 1) <= 1) {
      throwBadSdapiArgument("SDhParamSetHolder", a1, v3, v4, v5, v6, v7, v8);
    }
    ParamSetHolderMgr::deleteParamSetHolder(v9, a1, v3, v4, v5, v6, v7, v8);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v10);
}

void MrecInitModule_wordlat_kernel(void)
{
  if (!gParDebugLatticeNBestGeneration)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugLatticeNBestGeneration", (const char *)&unk_2140AAFE0, (const char *)&unk_2140AAFE0, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugLatticeNBestGeneratiouint64_t n = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeNBestGeneration);
  }
  if (!gParDebugLatticeLMRescoring)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugLatticeLMRescoring", (const char *)&unk_2140AAFE0, (const char *)&unk_2140AAFE0, 0, 0, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDebugLatticeLMRescoring = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeLMRescoring);
  }
  if (!gParDebugLatticeBestAlignment)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugLatticeBestAlignment", (const char *)&unk_2140AAFE0, (const char *)&unk_2140AAFE0, 0, 0, 0);
    void *v5 = &unk_26C4E0858;
    gParDebugLatticeBestAlignment = (uint64_t)v5;
    uint64_t v6 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v6, (GlobalParam **)&gParDebugLatticeBestAlignment);
  }
}

uint64_t LatticeStats::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 96;
  }
  uint64_t v5 = LMStats::sizeObject(a1 + 48, a2) + v4;
  return v5 + LMStats::sizeObject(a1 + 256, a2);
}

double LatticeStats::resetStats(LatticeStats *this)
{
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  LMStats::resetStats((LatticeStats *)((char *)this + 48));

  return LMStats::resetStats((LatticeStats *)((char *)this + 256));
}

double LatticeStats::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 20MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(void *)(a2 + 200);
  *(_DWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 24DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(void *)(a2 + 248);
  LMStats::operator=(a1 + 48, a2 + 48);

  *(void *)&double result = LMStats::operator=(a1 + 256, a2 + 256).n128_u64[0];
  return result;
}

void BaseWordLatticeLC::~BaseWordLatticeLC(BaseWordLatticeLC *this)
{
}

double WordLatticeLC::WordLatticeLC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = -16;
  *(_OWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 1879048192;
  *(_DWORD *)(a1 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0;
  *(void *)(a1 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = -1;
  *(void *)a1 = &unk_26C4E0568;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 94) = 0;
  *(_DWORD *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 94);
  double result = NAN;
  *(_OWORD *)(a1 + 96) = xmmword_2140866D0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(a2 + 108);
  *(_WORD *)(a1 + 92) = 0x3FFF;
  if (a7) {
    *(_WORD *)(a1 + 94) = 0;
  }
  if (a3) {
    *(_DWORD *)(a1 + 96) = 0;
  }
  int v9 = *(_DWORD *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 20);
  int v11 = *(_DWORD *)(a2 + 24);
  if (a4)
  {
    int v9 = -64;
    int v10 = -4;
    int v11 = -4;
  }
  *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v9;
  *(_DWORD *)(a1 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10;
  *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = v11;
  if (a5)
  {
    *(void *)(a1 + 36) = 0;
    *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(void *)(a1 + 44) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(a2 + 28);
    double result = *(double *)(a2 + 44);
    *(double *)(a1 + 44) = result;
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  }
  int v12 = *(_DWORD *)(a2 + 68);
  int v13 = *(_DWORD *)(a2 + 72);
  if (a6)
  {
    int v12 = 0;
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12;
  *(_DWORD *)(a1 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  if (a8) {
    uint64_t v14 = -1;
  }
  *(void *)(a1 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v14;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0xBFF0000000000000;
  if ((a4 & 1) == 0 && (a5 & 1) == 0)
  {
    double result = *(double *)(a2 + 56);
    *(double *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = result;
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = *(_DWORD *)(a2 + 64);
  }
  return result;
}

void WordLatticeLC::~WordLatticeLC(WordLatticeLC *this)
{
}

uint64_t WordLatticeLC::cmp(WordLatticeLC *this, const WordLatticeLC *a2, const WordLatticeLC *a3)
{
  uint64_t result = CWIDAC::cmp((uint64_t)this + 88, (uint64_t)a2 + 88);
  if (!result)
  {
    uint64_t result = ItemizedScores::cmp((int *)this + 7, (int *)a2 + 7);
    if (!result)
    {
      int v6 = *((_DWORD *)this + 4);
      if (v6 == -64) {
        goto LABEL_4;
      }
      int v16 = *((_DWORD *)a2 + 4);
      uint64_t result = v6 < v16 ? 0xFFFFFFFFLL : 1;
      if (v6 == v16)
      {
        unsigned int v17 = *((_DWORD *)this + 6);
        unsigned int v18 = v17 + *((_DWORD *)this + 5);
        unsigned int v19 = *((_DWORD *)a2 + 6);
        unsigned int v20 = v19 + *((_DWORD *)a2 + 5);
        uint64_t result = v18 < v20 ? 0xFFFFFFFFLL : 1;
        if (v18 == v20)
        {
          uint64_t result = v17 < v19 ? 0xFFFFFFFFLL : 1;
          if (v17 == v19)
          {
LABEL_4:
            unsigned int v7 = *((_DWORD *)this + 17);
            unsigned int v8 = *((_DWORD *)a2 + 17);
            BOOL v9 = v7 >= v8;
            if (v7 == v8 && (unsigned int v10 = *((_DWORD *)this + 18), v11 = *((_DWORD *)a2 + 18), v9 = v10 >= v11, v10 == v11))
            {
              unint64_t v12 = *((void *)this + 10);
              unint64_t v13 = *((void *)a2 + 10);
              BOOL v14 = v12 == v13;
              if (v12 < v13) {
                unsigned int v15 = -1;
              }
              else {
                unsigned int v15 = 1;
              }
              if (v14) {
                return 0;
              }
              else {
                return v15;
              }
            }
            else if (v9)
            {
              return 1;
            }
            else
            {
              return 0xFFFFFFFFLL;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ItemizedScores::cmp(int *a1, int *a2)
{
  int v3 = *a1;
  int v2 = a1[1];
  int v4 = a1[2];
  int v5 = a1[3];
  int v6 = a1[4];
  int v7 = a1[5];
  int v8 = a1[6];
  int v9 = v2 + *a1 + v4 + v5 + v6 + v7 + v8;
  int v11 = *a2;
  int v10 = a2[1];
  int v12 = a2[2];
  int v13 = a2[3];
  int v15 = a2[4];
  int v14 = a2[5];
  int v16 = a2[6];
  int v17 = v10 + v11 + v12 + v13 + v15 + v14 + v16;
  BOOL v19 = __OFSUB__(v9, v17);
  BOOL v18 = v9 - v17 < 0;
  if (v9 == v17
    && (BOOL v19 = __OFSUB__(v3, v11), v18 = v3 - v11 < 0, v3 == v11)
    && (BOOL v19 = __OFSUB__(v2, v10), v18 = v2 - v10 < 0, v2 == v10))
  {
    if (v8 < v16) {
      int v20 = -1;
    }
    else {
      int v20 = 1;
    }
    if (v8 == v16) {
      int v20 = 0;
    }
    BOOL v21 = v7 == v14;
    if (v7 < v14) {
      int v22 = -1;
    }
    else {
      int v22 = 1;
    }
    if (v21) {
      int v22 = v20;
    }
    BOOL v23 = v6 == v15;
    if (v6 < v15) {
      int v24 = -1;
    }
    else {
      int v24 = 1;
    }
    if (v23) {
      int v24 = v22;
    }
    BOOL v25 = v5 == v13;
    if (v5 < v13) {
      unsigned int v26 = -1;
    }
    else {
      unsigned int v26 = 1;
    }
    if (v25) {
      unsigned int v26 = v24;
    }
    BOOL v27 = v4 == v12;
    if (v4 < v12) {
      unsigned int v28 = -1;
    }
    else {
      unsigned int v28 = 1;
    }
    if (v27) {
      return v26;
    }
    else {
      return v28;
    }
  }
  else if (v18 != v19)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

uint64_t WordLatticeLC::cmpForDuplicateCheck(WordLatticeLC *this, const WordLatticeLC *a2, const WordLatticeLC *a3)
{
  uint64_t result = CWIDAC::cmp((uint64_t)this + 88, (uint64_t)a2 + 88);
  if (!result)
  {
    unsigned int v6 = *((_DWORD *)this + 17);
    unsigned int v7 = *((_DWORD *)a2 + 17);
    BOOL v8 = v6 >= v7;
    if (v6 == v7 && (v9 = *((_DWORD *)this + 18), unsigned int v10 = *((_DWORD *)a2 + 18), v8 = v9 >= v10, v9 == v10))
    {
      unint64_t v11 = *((void *)this + 10);
      unint64_t v12 = *((void *)a2 + 10);
      BOOL v13 = v11 == v12;
      if (v11 < v12) {
        unsigned int v14 = -1;
      }
      else {
        unsigned int v14 = 1;
      }
      if (v13) {
        return 0;
      }
      else {
        return v14;
      }
    }
    else if (v8)
    {
      return 1;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t WordLatticeLC::cmpForSameLinkWithDifferentScoresCheck(WordLatticeLC *this, const WordLatticeLC *a2, const WordLatticeLC *a3)
{
  int v3 = vaddvq_s32(*(int32x4_t *)((char *)this + 28))
     + *((_DWORD *)this + 11)
     + *((_DWORD *)this + 12)
     + *((_DWORD *)this + 13);
  int v4 = vaddvq_s32(*(int32x4_t *)((char *)a2 + 28)) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 12) + *((_DWORD *)a2 + 13);
  BOOL v5 = v3 <= v4;
  BOOL v6 = v3 < v4;
  if (v5) {
    return v6;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t WordLatticeLC::cmpForMultiLinkCheck(WordLatticeLC *this, const WordLatticeLC *a2, const WordLatticeLC *a3)
{
  if (CWIDAC::cmp((uint64_t)this + 88, (uint64_t)a2 + 88)
    || *((_DWORD *)this + 17) != *((_DWORD *)a2 + 17)
    || *((_DWORD *)this + 18) != *((_DWORD *)a2 + 18))
  {
    return 0;
  }
  if (vaddvq_s32(*(int32x4_t *)((char *)this + 28))
     + *((_DWORD *)this + 11)
     + *((_DWORD *)this + 12)
     + *((_DWORD *)this + 13) > vaddvq_s32(*(int32x4_t *)((char *)a2 + 28))
                              + *((_DWORD *)a2 + 11)
                              + *((_DWORD *)a2 + 12)
                              + *((_DWORD *)a2 + 13))
    return 0xFFFFFFFFLL;
  return 1;
}

void InputLatticeLC::~InputLatticeLC(InputLatticeLC *this)
{
}

uint64_t writeObject(DgnStream *a1, const InputLatticeLC *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  writeObject(a1, (const double *)a2 + 1, a3, a4, a5, a6, a7, a8);
  int v11 = *((_DWORD *)a2 + 4);
  if (v11 == -64) {
    int v11 = -1;
  }
  int v25 = v11;
  writeObject((uint64_t)a1, &v25, a3);
  int v12 = *((_DWORD *)a2 + 5);
  if (v12 == -4) {
    int v12 = -1;
  }
  int v24 = v12;
  writeObject((uint64_t)a1, &v24, a3);
  int v13 = *((_DWORD *)a2 + 6);
  if (v13 == -4) {
    int v13 = -1;
  }
  int v23 = v13;
  writeObject((uint64_t)a1, &v23, a3);
  int v22 = *((_DWORD *)a2 + 7);
  writeObject((uint64_t)a1, &v22, a3);
  int v21 = *((_DWORD *)a2 + 8);
  writeObject((uint64_t)a1, &v21, a3);
  int v20 = *((_DWORD *)a2 + 9);
  writeObject((uint64_t)a1, &v20, a3);
  int v19 = *((_DWORD *)a2 + 10);
  writeObject((uint64_t)a1, &v19, a3);
  int v18 = *((_DWORD *)a2 + 11);
  writeObject((uint64_t)a1, &v18, a3);
  int v17 = *((_DWORD *)a2 + 12);
  writeObject((uint64_t)a1, &v17, a3);
  int v16 = *((_DWORD *)a2 + 13);
  writeObject((uint64_t)a1, &v16, a3);
  int v15 = *((_DWORD *)a2 + 16);
  writeObject((uint64_t)a1, &v15, a3);
  writeObject((uint64_t)a1, (int *)a2 + 14, a3);
  writeObject((uint64_t)a1, (int *)a2 + 15, a3);
  writeObject((uint64_t)a1, (int *)a2 + 17, a3);
  writeObject((uint64_t)a1, (int *)a2 + 18, a3);
  writeObject((uint64_t)a1, (uint64_t *)a2 + 10, a3);
  writeObject((uint64_t)a1, (int *)a2 + 22, a3);
  writeObject((uint64_t)a1, (int *)a2 + 23, a3);
  return writeObject((uint64_t)a1, (int *)a2 + 24, a3);
}

uint64_t writeObject(DgnStream *a1, int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  writeObject(a1, (const InputLatticeLC *)a2, a3, a4, a5, a6, a7, a8);
  writeObject((uint64_t)a1, a2 + 26, a3);

  return writeObject((uint64_t)a1, a2 + 27, a3);
}

uint64_t LinkSegIds::findOrAddLinkSegSeqIdFromLinkSegIds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 > 1)
  {
    uint64_t v6 = 0;
    unsigned int v7 = *(uint64_t **)a2;
    for (uint64_t i = 1; i != v5; ++i)
    {
      unint64_t v9 = v7[i];
      unint64_t v10 = i - 1;
      if (v9 < v7[i - 1])
      {
        uint64_t v11 = v6;
        while (v11 != -1)
        {
          unint64_t v12 = v7[v11--];
          if (v12 <= v9)
          {
            unsigned int v13 = v11 + 2;
            goto LABEL_9;
          }
        }
        unsigned int v13 = 0;
LABEL_9:
        if (v10 >= v13)
        {
          do
          {
            v7[(v10 + 1)] = v7[v10];
            LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v10 - 1;
          }
          while (v10 >= v13);
        }
        v7[v13] = v9;
      }
      ++v6;
    }
  }
  uint64_t v14 = *(unsigned int *)(a1 + 8) | (unint64_t)(v5 << 32);
  uint64_t v15 = HashProbeKEV<unsigned long long,DgnPrimArray<unsigned long long>,LinkSegIds>::insert(a3, v14, a2);
  if (v15 == v14)
  {
    unsigned int v16 = *(_DWORD *)(a2 + 8);
    unsigned int v17 = *(_DWORD *)(a1 + 8);
    unsigned int v18 = *(_DWORD *)(a1 + 12);
    if (v17 + v16 > v18)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1, v17 + v16 - v18, 1);
      unsigned int v16 = *(_DWORD *)(a2 + 8);
      unsigned int v17 = *(_DWORD *)(a1 + 8);
    }
    if (v16)
    {
      int v19 = *(uint64_t **)a2;
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = v16;
      unsigned int v22 = v17;
      do
      {
        uint64_t v23 = *v19++;
        *(void *)(v20 + 8 * v22++) = v23;
        --v21;
      }
      while (v21);
    }
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v16 + v17;
  }
  return v15;
}

uint64_t HashProbeKEV<unsigned long long,DgnPrimArray<unsigned long long>,LinkSegIds>::insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 >= v6 >> 1) {
    HashProbeKEV<unsigned long long,DgnPrimArray<unsigned long long>,LinkSegIds>::upSize(a1, 2 * v6);
  }
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  if (v7)
  {
    int v8 = 0;
    unint64_t v9 = *(uint64_t **)a3;
    do
    {
      uint64_t v10 = *v9++;
      HIDWORD(v11) = v8;
      LODWORD(v11) = v8;
      HIDWORD(v11) = (v11 >> 19) + HIDWORD(v10);
      LODWORD(v11) = HIDWORD(v11);
      int v8 = (v11 >> 19) + v10;
      --v7;
    }
    while (v7);
    LODWORD(v7) = -1640531527 * v8;
  }
  int v12 = *(_DWORD *)(a1 + 8);
  unsigned int v13 = v7 >> -(char)v12;
  if (v12) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  unint64_t v16 = *(void *)(v15 + 8 * v14);
  if (v16 == -1)
  {
LABEL_18:
    *(void *)(v15 + 8 * v14) = a2;
    ++*(_DWORD *)a1;
    return a2;
  }
  if (!LinkSegIds::equalKeys(*(void **)(a1 + 32), v16, a3))
  {
    while (1)
    {
      uint64_t v14 = v14 + 1 == *(_DWORD *)(a1 + 4) ? 0 : (v14 + 1);
      uint64_t v15 = *(void *)(a1 + 16);
      unint64_t v17 = *(void *)(v15 + 8 * v14);
      if (v17 == -1) {
        break;
      }
      if (LinkSegIds::equalKeys(*(void **)(a1 + 32), v17, a3)) {
        return *(void *)(*(void *)(a1 + 16) + 8 * v14);
      }
    }
    goto LABEL_18;
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * v14);
}

BOOL LatticePath::isRootPath(LatticePath *this)
{
  return *(_DWORD *)this == -1
      && *((_DWORD *)this + 1) == -1
      && !*((_DWORD *)this + 2)
      && !*((_DWORD *)this + 3)
      && *((_WORD *)this + 8) == 127
      && *((_DWORD *)this + 5) == 0;
}

BOOL LatticePath::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void WordLattice::WordLattice(WordLattice *this, int a2, int a3, int a4, __int16 a5, char a6, char a7, char a8, BOOL a9)
{
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_OWORD *)((char *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 6MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0u;
  *(_OWORD *)((char *)this + 14MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_OWORD *)((char *)this + 1DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0u;
  *((_DWORD *)this + 47) = 0;
  *((_DWORD *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  *(void *)this = &unk_26C4DF878;
  *((_DWORD *)this + 49) = a3;
  *((_DWORD *)this + 5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a4;
  *((_WORD *)this + 102) = a5;
  *((unsigned char *)this + 206) = a6;
  *((unsigned char *)this + 207) = 1;
  *((unsigned char *)this + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a7;
  *(_WORD *)((char *)this + 209) = 0;
  *((unsigned char *)this + 211) = a8;
  *((unsigned char *)this + 212) = 0;
  *(_DWORD *)((char *)this + 213) = 16843009;
  *((unsigned char *)this + 217) = 0;
  *((unsigned char *)this + 21DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a9;
  *(_WORD *)((char *)this + 219) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0u;
  DgnString::DgnString((WordLattice *)((char *)this + 272));
}

{
  WordLattice::WordLattice(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_21403F8B8(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 32));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(v1 + 30));
  DgnIArray<Utterance *>::~DgnIArray(v2);
  Lattice<WordLatticeLC>::~Lattice(v1);
  _Unwind_Resume(a1);
}

void WordLattice::WordLattice(WordLattice *this, const WordLattice *a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, uint8x8_t a10)
{
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_OWORD *)((char *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 6MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0u;
  *(_OWORD *)((char *)this + 14MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_OWORD *)((char *)this + 1DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0u;
  *((_DWORD *)this + 47) = 0;
  *(void *)this = &unk_26C4DF878;
  *((void *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = *((void *)a2 + 24);
  *((_DWORD *)this + 5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *((_DWORD *)a2 + 50);
  *((_WORD *)this + 102) = *((_WORD *)a2 + 102);
  *(_DWORD *)((char *)this + 206) = *(_DWORD *)((char *)a2 + 206);
  *((_WORD *)this + 105) = *((_WORD *)a2 + 105);
  v12.i16[0] = a3;
  v12.i16[1] = a6;
  v12.i16[2] = a4;
  v12.i16[3] = a5;
  *((unsigned char *)this + 212) = *((unsigned char *)a2 + 212);
  a10.i32[0] = *(_DWORD *)((char *)a2 + 213);
  int16x4_t v14 = (int16x4_t)vmovl_u8(a10).u64[0];
  *(_DWORD *)((char *)this + 213) = vmovn_s16((int16x8_t)*(unint64_t *)&vand_s8(vbic_s8((int8x8_t)vtst_s16(v14, v14), v12), (int8x8_t)0x1000100010001)).u32[0];
  *((unsigned char *)this + 217) = 0;
  *((_WORD *)this + 109) = *((_WORD *)a2 + 109);
  char v16 = a8 ^ 1;
  if (!*((unsigned char *)a2 + 220)) {
    char v16 = 0;
  }
  *((unsigned char *)this + 22MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v16;
  *((void *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((void *)this + 29) = 0;
  if (!a6) {
    DgnArray<ParseToken>::copyArraySlice((unint64_t)this + 224, (uint64_t *)a2 + 28, 0, *((_DWORD *)a2 + 58));
  }
  unsigned int v18 = (_OWORD *)((char *)this + 240);
  if (a8)
  {
    _OWORD *v18 = 0u;
    *((_OWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = 0u;
  }
  else
  {
    *(void *)unsigned int v18 = 0;
    *((void *)this + 31) = 0;
    DgnArray<LinkSegment>::copyArraySlice((unint64_t)this + 240, (void *)a2 + 30, 0, *((_DWORD *)a2 + 62));
    *((void *)this + 32) = 0;
    *((void *)this + 33) = 0;
    DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)this + 256, (uint64_t *)a2 + 32, 0, *((_DWORD *)a2 + 66));
  }
  DgnString::DgnString((WordLattice *)((char *)this + 272), (const WordLattice *)((char *)a2 + 272));
  if ((a4 & 1) != 0 || a5) {
    *((unsigned char *)this + 219) = 0;
  }
  uint64_t v19 = *((unsigned int *)a2 + 6);
  uint64_t v20 = *((unsigned int *)a2 + 26);
  unsigned int v21 = *((_DWORD *)this + 7);
  if (v19 > v21) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 16, v19 - v21, 0);
  }
  unsigned int v22 = *((_DWORD *)this + 27);
  if (v20 > v22) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 96, v20 - v22, 0);
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (!v19)
  {
    LODWORD(v33) = 0;
    if (!v20) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  v31[0] = 0;
  unint64_t v23 = realloc_array(0, v31, 4 * v19, 0, 0, 1);
  uint64_t v24 = 0;
  uint64_t v32 = v31[0];
  LODWORD(v33) = v19;
  HIDWORD(v33) = v23 >> 2;
  do
  {
    int Node = Lattice<WordLatticeLC>::createNode((uint64_t)this);
    v32[v24++] = Node;
  }
  while (v19 != v24);
  if (v20)
  {
LABEL_21:
    uint64_t v26 = 0;
    do
    {
      uint64_t v27 = *((void *)a2 + 16) + 136 * *(unsigned int *)(*((void *)a2 + 12) + v26);
      WordLatticeLC::WordLatticeLC((uint64_t)v31, v27, a3, a4, a5, a6, a7, a8);
      Lattice<WordLatticeLC>::maybeCreateAndConnectLink2((uint64_t *)this, v32[*(unsigned int *)(*((void *)a2 + 10) + 24 * *(unsigned int *)(v27 + 116))], (const WordLatticeLC *)v32[*(unsigned int *)(*((void *)a2 + 10)+ 24 * *(unsigned int *)(v27 + 120))], (WordLatticeLC *)v31);
      v26 += 4;
    }
    while (4 * v20 != v26);
  }
LABEL_23:
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  Lattice<WordLatticeLC>::minimize((uint64_t)this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
}

void sub_21403FC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DgnString *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  DgnIArray<Utterance *>::~DgnIArray(a12);
  DgnIArray<Utterance *>::~DgnIArray(a13);
  Lattice<WordLatticeLC>::~Lattice(v13);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::maybeCreateAndConnectLink2(uint64_t *a1, unsigned int a2, const WordLatticeLC *a3, WordLatticeLC *a4)
{
  int v5 = (int)a3;
  uint64_t v8 = *(unsigned int *)(a1[10] + 24 * a2 + 20);
  if (v8 != -2)
  {
    uint64_t v9 = a1[16];
    do
    {
      if (*(_DWORD *)(v9 + 136 * v8 + 120) == v5)
      {
        uint64_t result = WordLatticeLC::cmp(a4, (const WordLatticeLC *)(v9 + 136 * v8), a3);
        if (!result) {
          return result;
        }
        uint64_t v9 = a1[16];
      }
      uint64_t v8 = *(unsigned int *)(v9 + 136 * v8 + 128);
    }
    while (v8 != -2);
  }
  Linuint64_t k = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink((uint64_t)a1, a2, v5, a4);
  Lattice<WordLatticeLC>::connectInLink(a1, Link);
  Lattice<WordLatticeLC>::connectOutLink(a1, Link);
  return 1;
}

uint64_t Lattice<WordLatticeLC>::cmpNodesByInLinks(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = Lattice<WordLatticeLC>::cmpNodesByInLinksIgnoreNodes(a1, a2, a3);
  if (!result)
  {
    if (a2 == a3)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * a2 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * a3 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t Lattice<WordLatticeLC>::cmpNodesByOutLinks(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = Lattice<WordLatticeLC>::cmpNodesByOutLinksIgnoreNodes(a1, a2, a3);
  if (!result)
  {
    if (a2 == a3)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * a2 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * a3 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t WordLattice::SortInLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<InLinkICmp>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<InLinkICmp>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v103 = ((result | a3) & 7) == 0;
  int v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      int v73 = (unsigned int *)((char *)v6 + v5 * a3);
      uint64_t v74 = (unsigned int *)((char *)v6 + a3);
      uint64_t v75 = v6;
      do
      {
        if (v74 > v6)
        {
          uint64_t v76 = v75;
          uint64_t v77 = v74;
          do
          {
            uint64_t v78 = v77;
            uint64_t v77 = (unsigned int *)((char *)v77 + v7);
            uint64_t result = Lattice<WordLatticeLC>::cmpInLink(a4, *v77, (const WordLatticeLC *)*v78);
            if ((int)result < 1) {
              break;
            }
            if (v104)
            {
              if (v103)
              {
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v76 + a3;
                do
                {
                  uint64_t v81 = *(void *)(v80 + 8 * v79);
                  *(void *)(v80 + 8 * v79) = *(void *)&v76[2 * v79];
                  *(void *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                uint64_t v83 = 0;
                uint64_t v84 = (uint64_t)v76 + a3;
                do
                {
                  char v85 = *(unsigned char *)(v84 + v83);
                  *(unsigned char *)(v84 + v83) = *((unsigned char *)v76 + v83);
                  *((unsigned char *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              uint64_t v82 = *(void *)v78;
              *(void *)uint64_t v78 = *(void *)v77;
              *(void *)uint64_t v77 = v82;
            }
            uint64_t v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        uint64_t v74 = (unsigned int *)((char *)v74 + a3);
        uint64_t v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a3 >> 3;
  BOOL v99 = a3 != 8;
  while (1)
  {
    unint64_t v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v101 = v5;
    if (v5 == 7) {
      goto LABEL_46;
    }
    int8x8_t v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      unint64_t v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v13 = (v5 >> 3) * a3;
      int16x4_t v14 = (unsigned int *)((char *)v6 + 2 * v13);
      int v15 = Lattice<WordLatticeLC>::cmpInLink(a4, *v6, (const WordLatticeLC *)*(unsigned int *)((char *)v6 + v13));
      uint64_t v100 = (unsigned int *)((char *)v6 + v13);
      int v16 = Lattice<WordLatticeLC>::cmpInLink(a4, *(unsigned int *)((char *)v6 + v13), (const WordLatticeLC *)*v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v6, (const WordLatticeLC *)*v14) >= 0) {
            unint64_t v17 = v6;
          }
          else {
            unint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
          }
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v6, (const WordLatticeLC *)*v14) >= 0) {
          unint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
        }
        else {
          unint64_t v17 = v6;
        }
LABEL_18:
        uint64_t v100 = v17;
      }
      uint64_t v19 = (unsigned int *)((char *)v11 - v13);
      uint64_t v20 = (unsigned int *)((char *)v11 + v13);
      int v21 = Lattice<WordLatticeLC>::cmpInLink(a4, *(unsigned int *)((char *)v11 - v13), (const WordLatticeLC *)*v11);
      int v22 = Lattice<WordLatticeLC>::cmpInLink(a4, *v11, (const WordLatticeLC *)*(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v19, (const WordLatticeLC *)*v20) >= 0) {
            unint64_t v11 = (unsigned int *)((char *)v11 - v13);
          }
          else {
            unint64_t v11 = (unsigned int *)((char *)v11 + v13);
          }
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v19, (const WordLatticeLC *)*v20) >= 0) {
          unint64_t v11 = (unsigned int *)((char *)v11 + v13);
        }
        else {
          unint64_t v11 = (unsigned int *)((char *)v11 - v13);
        }
      }
      unint64_t v23 = (unsigned int *)((char *)v98 - 2 * v13);
      int8x8_t v12 = (unsigned int *)((char *)v98 - v13);
      int v24 = Lattice<WordLatticeLC>::cmpInLink(a4, *v23, (const WordLatticeLC *)*v12);
      int v25 = Lattice<WordLatticeLC>::cmpInLink(a4, *v12, (const WordLatticeLC *)*v98);
      if (v24 < 0)
      {
        unsigned int v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          int8x8_t v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v23, (const WordLatticeLC *)*v98) >= 0) {
            int8x8_t v12 = v23;
          }
        }
      }
      else
      {
        unsigned int v18 = v100;
        if (v25 <= 0)
        {
          int8x8_t v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpInLink(a4, *v23, (const WordLatticeLC *)*v98) < 0) {
            int8x8_t v12 = v23;
          }
        }
      }
      unint64_t v5 = v101;
      goto LABEL_37;
    }
    unsigned int v18 = v6;
LABEL_37:
    uint64_t v9 = a4;
    int v26 = Lattice<WordLatticeLC>::cmpInLink(a4, *v18, (const WordLatticeLC *)*v11);
    uint64_t result = Lattice<WordLatticeLC>::cmpInLink(a4, *v11, (const WordLatticeLC *)*v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = Lattice<WordLatticeLC>::cmpInLink(a4, *v18, (const WordLatticeLC *)*v12);
        if ((int)result >= 0) {
          unint64_t v11 = v18;
        }
        else {
          unint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpInLink(a4, *v18, (const WordLatticeLC *)*v12);
      if ((int)result >= 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = v18;
      }
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        uint64_t v27 = v6;
        unint64_t v28 = a3 >> 3;
        do
        {
          uint64_t v29 = *(void *)v27;
          *(void *)uint64_t v27 = *(void *)v11;
          v27 += 2;
          *(void *)unint64_t v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        unint64_t v31 = a3;
        uint64_t v32 = v6;
        do
        {
          char v33 = *(unsigned char *)v32;
          *(unsigned char *)uint64_t v32 = *(unsigned char *)v11;
          uint64_t v32 = (unsigned int *)((char *)v32 + 1);
          *(unsigned char *)unint64_t v11 = v33;
          unint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      uint64_t v30 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v11;
      *(void *)unint64_t v11 = v30;
    }
    int v34 = 0;
    uint64_t v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    uint64_t v36 = v35;
    uint64_t v37 = (unsigned int *)((char *)v6 + a3);
    uint64_t v38 = (void *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpInLink(v9, *v37, (const WordLatticeLC *)*v6);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v38[v39];
              v38[v39] = *(void *)&v37[2 * v39];
              *(void *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v38 + v49);
              *((unsigned char *)v38 + v49) = *((unsigned char *)v37 + v49);
              *((unsigned char *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *v38;
          void *v38 = *(void *)v37;
          *(void *)uint64_t v37 = v48;
        }
        uint64_t v38 = (void *)((char *)v38 + a3);
        int v34 = 1;
      }
      uint64_t v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpInLink(v9, *v36, (const WordLatticeLC *)*v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v37[2 * v46];
              *(void *)&v37[2 * v46] = *(void *)&v36[2 * v46];
              *(void *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            uint64_t v52 = 0;
            do
            {
              char v53 = *((unsigned char *)v37 + v52);
              *((unsigned char *)v37 + v52) = *((unsigned char *)v36 + v52);
              *((unsigned char *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v36;
          *(void *)uint64_t v36 = v51;
        }
        uint64_t v37 = (unsigned int *)((char *)v37 + a3);
        uint64_t v36 = (unsigned int *)((char *)v36 + v7);
        int v34 = 1;
        goto LABEL_55;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)&v36[2 * v41];
              *(void *)&v36[2 * v41] = *(void *)&v35[2 * v41];
              *(void *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              char v45 = *((unsigned char *)v36 + v44);
              *((unsigned char *)v36 + v44) = *((unsigned char *)v35 + v44);
              *((unsigned char *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          uint64_t v43 = *(void *)v36;
          *(void *)uint64_t v36 = *(void *)v35;
          *(void *)uint64_t v35 = v43;
        }
        uint64_t v35 = (unsigned int *)((char *)v35 + v7);
        int v34 = 1;
      }
      uint64_t v36 = (unsigned int *)((char *)v36 + v7);
    }
    uint64_t v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34) {
      break;
    }
    int64_t v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38) {
      unint64_t v56 = (char *)v37 - (char *)v38;
    }
    else {
      unint64_t v56 = (char *)v38 - (char *)v6;
    }
    if (v56)
    {
      if (v103)
      {
        uint64_t v57 = (void *)((char *)v37 - v56);
        unint64_t v58 = v56 >> 3;
        uint64_t v59 = v6;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)uint64_t v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        uint64_t v61 = -(uint64_t)v56;
        uint64_t v62 = v6;
        do
        {
          char v63 = *(unsigned char *)v62;
          *(unsigned char *)uint64_t v62 = *((unsigned char *)v37 + v61);
          uint64_t v62 = (unsigned int *)((char *)v62 + 1);
          *((unsigned char *)v37 + v61) = v63;
          BOOL v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    int64_t v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3)) {
      unint64_t v66 = (char *)v54 - ((char *)v35 + a3);
    }
    else {
      unint64_t v66 = (char *)v35 - (char *)v36;
    }
    if (v66)
    {
      if (v103)
      {
        uint64_t v67 = (char *)v54 - v66;
        unint64_t v68 = v66 >> 3;
        do
        {
          uint64_t v69 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v67;
          v37 += 2;
          *(void *)uint64_t v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v66;
        do
        {
          char v71 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *((unsigned char *)v54 + v70);
          uint64_t v37 = (unsigned int *)((char *)v37 + 1);
          *((unsigned char *)v54 + v7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v71;
          BOOL v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<InLinkICmp>(v6, v55 / a3, a3, a4);
    }
    if (v65 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = (unsigned int *)((char *)v54 - v65);
    unint64_t v5 = v65 / a3;
    int v72 = v99;
    if ((((v54 - v65) | a3) & 7) != 0) {
      int v72 = 2;
    }
    BOOL v103 = (((v54 - v65) | a3) & 7) == 0;
    int v104 = v72;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_119;
    }
  }
  uint64_t v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    uint64_t v87 = v6;
    do
    {
      if (v86 > v6)
      {
        uint64_t v88 = v87;
        uint64_t v89 = v86;
        do
        {
          unsigned int v90 = v89;
          uint64_t v89 = (unsigned int *)((char *)v89 + v7);
          uint64_t result = Lattice<WordLatticeLC>::cmpInLink(a4, *v89, (const WordLatticeLC *)*v90);
          if ((int)result < 1) {
            break;
          }
          if (v104)
          {
            if (v103)
            {
              uint64_t v91 = 0;
              uint64_t v92 = (uint64_t)v88 + a3;
              do
              {
                uint64_t v93 = *(void *)(v92 + 8 * v91);
                *(void *)(v92 + 8 * v91) = *(void *)&v88[2 * v91];
                *(void *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              uint64_t v95 = 0;
              uint64_t v96 = (uint64_t)v88 + a3;
              do
              {
                char v97 = *(unsigned char *)(v96 + v95);
                *(unsigned char *)(v96 + v95) = *((unsigned char *)v88 + v95);
                *((unsigned char *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            uint64_t v94 = *(void *)v90;
            *(void *)unsigned int v90 = *(void *)v89;
            *(void *)uint64_t v89 = v94;
          }
          uint64_t v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      uint64_t v86 = (unsigned int *)((char *)v86 + a3);
      uint64_t v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

uint64_t WordLattice::SortOutLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<OutLinkICmp>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<OutLinkICmp>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v103 = ((result | a3) & 7) == 0;
  int v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      int v73 = (unsigned int *)((char *)v6 + v5 * a3);
      uint64_t v74 = (unsigned int *)((char *)v6 + a3);
      uint64_t v75 = v6;
      do
      {
        if (v74 > v6)
        {
          uint64_t v76 = v75;
          uint64_t v77 = v74;
          do
          {
            uint64_t v78 = v77;
            uint64_t v77 = (unsigned int *)((char *)v77 + v7);
            uint64_t result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v77, (const WordLatticeLC *)*v78);
            if ((int)result < 1) {
              break;
            }
            if (v104)
            {
              if (v103)
              {
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v76 + a3;
                do
                {
                  uint64_t v81 = *(void *)(v80 + 8 * v79);
                  *(void *)(v80 + 8 * v79) = *(void *)&v76[2 * v79];
                  *(void *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                uint64_t v83 = 0;
                uint64_t v84 = (uint64_t)v76 + a3;
                do
                {
                  char v85 = *(unsigned char *)(v84 + v83);
                  *(unsigned char *)(v84 + v83) = *((unsigned char *)v76 + v83);
                  *((unsigned char *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              uint64_t v82 = *(void *)v78;
              *(void *)uint64_t v78 = *(void *)v77;
              *(void *)uint64_t v77 = v82;
            }
            uint64_t v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        uint64_t v74 = (unsigned int *)((char *)v74 + a3);
        uint64_t v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a3 >> 3;
  BOOL v99 = a3 != 8;
  while (1)
  {
    unint64_t v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v101 = v5;
    if (v5 == 7) {
      goto LABEL_46;
    }
    int8x8_t v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      unint64_t v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v13 = (v5 >> 3) * a3;
      int16x4_t v14 = (unsigned int *)((char *)v6 + 2 * v13);
      int v15 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v6, (const WordLatticeLC *)*(unsigned int *)((char *)v6 + v13));
      uint64_t v100 = (unsigned int *)((char *)v6 + v13);
      int v16 = Lattice<WordLatticeLC>::cmpOutLink(a4, *(unsigned int *)((char *)v6 + v13), (const WordLatticeLC *)*v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v6, (const WordLatticeLC *)*v14) >= 0) {
            unint64_t v17 = v6;
          }
          else {
            unint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
          }
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v6, (const WordLatticeLC *)*v14) >= 0) {
          unint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
        }
        else {
          unint64_t v17 = v6;
        }
LABEL_18:
        uint64_t v100 = v17;
      }
      uint64_t v19 = (unsigned int *)((char *)v11 - v13);
      uint64_t v20 = (unsigned int *)((char *)v11 + v13);
      int v21 = Lattice<WordLatticeLC>::cmpOutLink(a4, *(unsigned int *)((char *)v11 - v13), (const WordLatticeLC *)*v11);
      int v22 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v11, (const WordLatticeLC *)*(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v19, (const WordLatticeLC *)*v20) >= 0) {
            unint64_t v11 = (unsigned int *)((char *)v11 - v13);
          }
          else {
            unint64_t v11 = (unsigned int *)((char *)v11 + v13);
          }
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v19, (const WordLatticeLC *)*v20) >= 0) {
          unint64_t v11 = (unsigned int *)((char *)v11 + v13);
        }
        else {
          unint64_t v11 = (unsigned int *)((char *)v11 - v13);
        }
      }
      unint64_t v23 = (unsigned int *)((char *)v98 - 2 * v13);
      int8x8_t v12 = (unsigned int *)((char *)v98 - v13);
      int v24 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v23, (const WordLatticeLC *)*v12);
      int v25 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v12, (const WordLatticeLC *)*v98);
      if (v24 < 0)
      {
        unsigned int v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          int8x8_t v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v23, (const WordLatticeLC *)*v98) >= 0) {
            int8x8_t v12 = v23;
          }
        }
      }
      else
      {
        unsigned int v18 = v100;
        if (v25 <= 0)
        {
          int8x8_t v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpOutLink(a4, *v23, (const WordLatticeLC *)*v98) < 0) {
            int8x8_t v12 = v23;
          }
        }
      }
      unint64_t v5 = v101;
      goto LABEL_37;
    }
    unsigned int v18 = v6;
LABEL_37:
    uint64_t v9 = a4;
    int v26 = Lattice<WordLatticeLC>::cmpOutLink(a4, *v18, (const WordLatticeLC *)*v11);
    uint64_t result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v11, (const WordLatticeLC *)*v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v18, (const WordLatticeLC *)*v12);
        if ((int)result >= 0) {
          unint64_t v11 = v18;
        }
        else {
          unint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v18, (const WordLatticeLC *)*v12);
      if ((int)result >= 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = v18;
      }
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        uint64_t v27 = v6;
        unint64_t v28 = a3 >> 3;
        do
        {
          uint64_t v29 = *(void *)v27;
          *(void *)uint64_t v27 = *(void *)v11;
          v27 += 2;
          *(void *)unint64_t v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        unint64_t v31 = a3;
        uint64_t v32 = v6;
        do
        {
          char v33 = *(unsigned char *)v32;
          *(unsigned char *)uint64_t v32 = *(unsigned char *)v11;
          uint64_t v32 = (unsigned int *)((char *)v32 + 1);
          *(unsigned char *)unint64_t v11 = v33;
          unint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      uint64_t v30 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v11;
      *(void *)unint64_t v11 = v30;
    }
    int v34 = 0;
    uint64_t v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    uint64_t v36 = v35;
    uint64_t v37 = (unsigned int *)((char *)v6 + a3);
    uint64_t v38 = (void *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpOutLink(v9, *v37, (const WordLatticeLC *)*v6);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v38[v39];
              v38[v39] = *(void *)&v37[2 * v39];
              *(void *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v38 + v49);
              *((unsigned char *)v38 + v49) = *((unsigned char *)v37 + v49);
              *((unsigned char *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *v38;
          void *v38 = *(void *)v37;
          *(void *)uint64_t v37 = v48;
        }
        uint64_t v38 = (void *)((char *)v38 + a3);
        int v34 = 1;
      }
      uint64_t v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpOutLink(v9, *v36, (const WordLatticeLC *)*v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v37[2 * v46];
              *(void *)&v37[2 * v46] = *(void *)&v36[2 * v46];
              *(void *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            uint64_t v52 = 0;
            do
            {
              char v53 = *((unsigned char *)v37 + v52);
              *((unsigned char *)v37 + v52) = *((unsigned char *)v36 + v52);
              *((unsigned char *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v36;
          *(void *)uint64_t v36 = v51;
        }
        uint64_t v37 = (unsigned int *)((char *)v37 + a3);
        uint64_t v36 = (unsigned int *)((char *)v36 + v7);
        int v34 = 1;
        goto LABEL_55;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)&v36[2 * v41];
              *(void *)&v36[2 * v41] = *(void *)&v35[2 * v41];
              *(void *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              char v45 = *((unsigned char *)v36 + v44);
              *((unsigned char *)v36 + v44) = *((unsigned char *)v35 + v44);
              *((unsigned char *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          uint64_t v43 = *(void *)v36;
          *(void *)uint64_t v36 = *(void *)v35;
          *(void *)uint64_t v35 = v43;
        }
        uint64_t v35 = (unsigned int *)((char *)v35 + v7);
        int v34 = 1;
      }
      uint64_t v36 = (unsigned int *)((char *)v36 + v7);
    }
    uint64_t v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34) {
      break;
    }
    int64_t v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38) {
      unint64_t v56 = (char *)v37 - (char *)v38;
    }
    else {
      unint64_t v56 = (char *)v38 - (char *)v6;
    }
    if (v56)
    {
      if (v103)
      {
        uint64_t v57 = (void *)((char *)v37 - v56);
        unint64_t v58 = v56 >> 3;
        uint64_t v59 = v6;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)uint64_t v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        uint64_t v61 = -(uint64_t)v56;
        uint64_t v62 = v6;
        do
        {
          char v63 = *(unsigned char *)v62;
          *(unsigned char *)uint64_t v62 = *((unsigned char *)v37 + v61);
          uint64_t v62 = (unsigned int *)((char *)v62 + 1);
          *((unsigned char *)v37 + v61) = v63;
          BOOL v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    int64_t v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3)) {
      unint64_t v66 = (char *)v54 - ((char *)v35 + a3);
    }
    else {
      unint64_t v66 = (char *)v35 - (char *)v36;
    }
    if (v66)
    {
      if (v103)
      {
        uint64_t v67 = (char *)v54 - v66;
        unint64_t v68 = v66 >> 3;
        do
        {
          uint64_t v69 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v67;
          v37 += 2;
          *(void *)uint64_t v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v66;
        do
        {
          char v71 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *((unsigned char *)v54 + v70);
          uint64_t v37 = (unsigned int *)((char *)v37 + 1);
          *((unsigned char *)v54 + v7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v71;
          BOOL v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<OutLinkICmp>(v6, v55 / a3, a3, a4);
    }
    if (v65 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = (unsigned int *)((char *)v54 - v65);
    unint64_t v5 = v65 / a3;
    int v72 = v99;
    if ((((v54 - v65) | a3) & 7) != 0) {
      int v72 = 2;
    }
    BOOL v103 = (((v54 - v65) | a3) & 7) == 0;
    int v104 = v72;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_119;
    }
  }
  uint64_t v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    uint64_t v87 = v6;
    do
    {
      if (v86 > v6)
      {
        uint64_t v88 = v87;
        uint64_t v89 = v86;
        do
        {
          unsigned int v90 = v89;
          uint64_t v89 = (unsigned int *)((char *)v89 + v7);
          uint64_t result = Lattice<WordLatticeLC>::cmpOutLink(a4, *v89, (const WordLatticeLC *)*v90);
          if ((int)result < 1) {
            break;
          }
          if (v104)
          {
            if (v103)
            {
              uint64_t v91 = 0;
              uint64_t v92 = (uint64_t)v88 + a3;
              do
              {
                uint64_t v93 = *(void *)(v92 + 8 * v91);
                *(void *)(v92 + 8 * v91) = *(void *)&v88[2 * v91];
                *(void *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              uint64_t v95 = 0;
              uint64_t v96 = (uint64_t)v88 + a3;
              do
              {
                char v97 = *(unsigned char *)(v96 + v95);
                *(unsigned char *)(v96 + v95) = *((unsigned char *)v88 + v95);
                *((unsigned char *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            uint64_t v94 = *(void *)v90;
            *(void *)unsigned int v90 = *(void *)v89;
            *(void *)uint64_t v89 = v94;
          }
          uint64_t v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      uint64_t v86 = (unsigned int *)((char *)v86 + a3);
      uint64_t v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

char *WordLattice::SortNodes(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeICmp1>(*(char **)a2, *(unsigned int *)(a2 + 8), 4, a1);
}

char *WordLattice::SortNodesCount(uint64_t a1, char **a2, unsigned int a3)
{
  return mrec_qsort_r<NodeICmp1>(*a2, a3, 4, a1);
}

uint64_t WordLattice::SortNodesByInLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeByInLinksICmp>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<NodeByInLinksICmp>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v103 = ((result | a3) & 7) == 0;
  int v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      int v73 = (unsigned int *)((char *)v6 + v5 * a3);
      uint64_t v74 = (unsigned int *)((char *)v6 + a3);
      uint64_t v75 = v6;
      do
      {
        if (v74 > v6)
        {
          uint64_t v76 = v75;
          uint64_t v77 = v74;
          do
          {
            uint64_t v78 = v77;
            uint64_t v77 = (unsigned int *)((char *)v77 + v7);
            uint64_t result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v77, *v78);
            if ((int)result < 1) {
              break;
            }
            if (v104)
            {
              if (v103)
              {
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v76 + a3;
                do
                {
                  uint64_t v81 = *(void *)(v80 + 8 * v79);
                  *(void *)(v80 + 8 * v79) = *(void *)&v76[2 * v79];
                  *(void *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                uint64_t v83 = 0;
                uint64_t v84 = (uint64_t)v76 + a3;
                do
                {
                  char v85 = *(unsigned char *)(v84 + v83);
                  *(unsigned char *)(v84 + v83) = *((unsigned char *)v76 + v83);
                  *((unsigned char *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              uint64_t v82 = *(void *)v78;
              *(void *)uint64_t v78 = *(void *)v77;
              *(void *)uint64_t v77 = v82;
            }
            uint64_t v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        uint64_t v74 = (unsigned int *)((char *)v74 + a3);
        uint64_t v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a3 >> 3;
  BOOL v99 = a3 != 8;
  while (1)
  {
    unint64_t v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v101 = v5;
    if (v5 == 7) {
      goto LABEL_46;
    }
    int8x8_t v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      unint64_t v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v13 = (v5 >> 3) * a3;
      int16x4_t v14 = (unsigned int *)((char *)v6 + 2 * v13);
      int v15 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      uint64_t v100 = (unsigned int *)((char *)v6 + v13);
      int v16 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v6, *v14) >= 0) {
            unint64_t v17 = v6;
          }
          else {
            unint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
          }
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v6, *v14) >= 0) {
          unint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
        }
        else {
          unint64_t v17 = v6;
        }
LABEL_18:
        uint64_t v100 = v17;
      }
      uint64_t v19 = (unsigned int *)((char *)v11 - v13);
      uint64_t v20 = (unsigned int *)((char *)v11 + v13);
      int v21 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      int v22 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v19, *v20) >= 0) {
            unint64_t v11 = (unsigned int *)((char *)v11 - v13);
          }
          else {
            unint64_t v11 = (unsigned int *)((char *)v11 + v13);
          }
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v19, *v20) >= 0) {
          unint64_t v11 = (unsigned int *)((char *)v11 + v13);
        }
        else {
          unint64_t v11 = (unsigned int *)((char *)v11 - v13);
        }
      }
      unint64_t v23 = (unsigned int *)((char *)v98 - 2 * v13);
      int8x8_t v12 = (unsigned int *)((char *)v98 - v13);
      int v24 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v23, *v12);
      int v25 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v12, *v98);
      if (v24 < 0)
      {
        unsigned int v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          int8x8_t v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v23, *v98) >= 0) {
            int8x8_t v12 = v23;
          }
        }
      }
      else
      {
        unsigned int v18 = v100;
        if (v25 <= 0)
        {
          int8x8_t v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v23, *v98) < 0) {
            int8x8_t v12 = v23;
          }
        }
      }
      unint64_t v5 = v101;
      goto LABEL_37;
    }
    unsigned int v18 = v6;
LABEL_37:
    uint64_t v9 = a4;
    int v26 = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v18, *v11);
    uint64_t result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v18, *v12);
        if ((int)result >= 0) {
          unint64_t v11 = v18;
        }
        else {
          unint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v18, *v12);
      if ((int)result >= 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = v18;
      }
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        uint64_t v27 = v6;
        unint64_t v28 = a3 >> 3;
        do
        {
          uint64_t v29 = *(void *)v27;
          *(void *)uint64_t v27 = *(void *)v11;
          v27 += 2;
          *(void *)unint64_t v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        unint64_t v31 = a3;
        uint64_t v32 = v6;
        do
        {
          char v33 = *(unsigned char *)v32;
          *(unsigned char *)uint64_t v32 = *(unsigned char *)v11;
          uint64_t v32 = (unsigned int *)((char *)v32 + 1);
          *(unsigned char *)unint64_t v11 = v33;
          unint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      uint64_t v30 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v11;
      *(void *)unint64_t v11 = v30;
    }
    int v34 = 0;
    uint64_t v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    uint64_t v36 = v35;
    uint64_t v37 = (unsigned int *)((char *)v6 + a3);
    uint64_t v38 = (void *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpNodesByInLinks(v9, *v37, *v6);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v38[v39];
              v38[v39] = *(void *)&v37[2 * v39];
              *(void *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v38 + v49);
              *((unsigned char *)v38 + v49) = *((unsigned char *)v37 + v49);
              *((unsigned char *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *v38;
          void *v38 = *(void *)v37;
          *(void *)uint64_t v37 = v48;
        }
        uint64_t v38 = (void *)((char *)v38 + a3);
        int v34 = 1;
      }
      uint64_t v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpNodesByInLinks(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v37[2 * v46];
              *(void *)&v37[2 * v46] = *(void *)&v36[2 * v46];
              *(void *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            uint64_t v52 = 0;
            do
            {
              char v53 = *((unsigned char *)v37 + v52);
              *((unsigned char *)v37 + v52) = *((unsigned char *)v36 + v52);
              *((unsigned char *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v36;
          *(void *)uint64_t v36 = v51;
        }
        uint64_t v37 = (unsigned int *)((char *)v37 + a3);
        uint64_t v36 = (unsigned int *)((char *)v36 + v7);
        int v34 = 1;
        goto LABEL_55;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)&v36[2 * v41];
              *(void *)&v36[2 * v41] = *(void *)&v35[2 * v41];
              *(void *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              char v45 = *((unsigned char *)v36 + v44);
              *((unsigned char *)v36 + v44) = *((unsigned char *)v35 + v44);
              *((unsigned char *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          uint64_t v43 = *(void *)v36;
          *(void *)uint64_t v36 = *(void *)v35;
          *(void *)uint64_t v35 = v43;
        }
        uint64_t v35 = (unsigned int *)((char *)v35 + v7);
        int v34 = 1;
      }
      uint64_t v36 = (unsigned int *)((char *)v36 + v7);
    }
    uint64_t v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34) {
      break;
    }
    int64_t v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38) {
      unint64_t v56 = (char *)v37 - (char *)v38;
    }
    else {
      unint64_t v56 = (char *)v38 - (char *)v6;
    }
    if (v56)
    {
      if (v103)
      {
        uint64_t v57 = (void *)((char *)v37 - v56);
        unint64_t v58 = v56 >> 3;
        uint64_t v59 = v6;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)uint64_t v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        uint64_t v61 = -(uint64_t)v56;
        uint64_t v62 = v6;
        do
        {
          char v63 = *(unsigned char *)v62;
          *(unsigned char *)uint64_t v62 = *((unsigned char *)v37 + v61);
          uint64_t v62 = (unsigned int *)((char *)v62 + 1);
          *((unsigned char *)v37 + v61) = v63;
          BOOL v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    int64_t v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3)) {
      unint64_t v66 = (char *)v54 - ((char *)v35 + a3);
    }
    else {
      unint64_t v66 = (char *)v35 - (char *)v36;
    }
    if (v66)
    {
      if (v103)
      {
        uint64_t v67 = (char *)v54 - v66;
        unint64_t v68 = v66 >> 3;
        do
        {
          uint64_t v69 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v67;
          v37 += 2;
          *(void *)uint64_t v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v66;
        do
        {
          char v71 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *((unsigned char *)v54 + v70);
          uint64_t v37 = (unsigned int *)((char *)v37 + 1);
          *((unsigned char *)v54 + v7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v71;
          BOOL v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<NodeByInLinksICmp>(v6, v55 / a3, a3, a4);
    }
    if (v65 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = (unsigned int *)((char *)v54 - v65);
    unint64_t v5 = v65 / a3;
    int v72 = v99;
    if ((((v54 - v65) | a3) & 7) != 0) {
      int v72 = 2;
    }
    BOOL v103 = (((v54 - v65) | a3) & 7) == 0;
    int v104 = v72;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_119;
    }
  }
  uint64_t v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    uint64_t v87 = v6;
    do
    {
      if (v86 > v6)
      {
        uint64_t v88 = v87;
        uint64_t v89 = v86;
        do
        {
          unsigned int v90 = v89;
          uint64_t v89 = (unsigned int *)((char *)v89 + v7);
          uint64_t result = Lattice<WordLatticeLC>::cmpNodesByInLinks(a4, *v89, *v90);
          if ((int)result < 1) {
            break;
          }
          if (v104)
          {
            if (v103)
            {
              uint64_t v91 = 0;
              uint64_t v92 = (uint64_t)v88 + a3;
              do
              {
                uint64_t v93 = *(void *)(v92 + 8 * v91);
                *(void *)(v92 + 8 * v91) = *(void *)&v88[2 * v91];
                *(void *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              uint64_t v95 = 0;
              uint64_t v96 = (uint64_t)v88 + a3;
              do
              {
                char v97 = *(unsigned char *)(v96 + v95);
                *(unsigned char *)(v96 + v95) = *((unsigned char *)v88 + v95);
                *((unsigned char *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            uint64_t v94 = *(void *)v90;
            *(void *)unsigned int v90 = *(void *)v89;
            *(void *)uint64_t v89 = v94;
          }
          uint64_t v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      uint64_t v86 = (unsigned int *)((char *)v86 + a3);
      uint64_t v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

uint64_t WordLattice::SortNodesByOutLinks(uint64_t a1, uint64_t a2)
{
  return mrec_qsort_r<NodeByOutLinksICmp>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, a1);
}

uint64_t mrec_qsort_r<NodeByOutLinksICmp>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v103 = ((result | a3) & 7) == 0;
  int v104 = v8;
  if (a2 < 7)
  {
LABEL_119:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      int v73 = (unsigned int *)((char *)v6 + v5 * a3);
      uint64_t v74 = (unsigned int *)((char *)v6 + a3);
      uint64_t v75 = v6;
      do
      {
        if (v74 > v6)
        {
          uint64_t v76 = v75;
          uint64_t v77 = v74;
          do
          {
            uint64_t v78 = v77;
            uint64_t v77 = (unsigned int *)((char *)v77 + v7);
            uint64_t result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v77, *v78);
            if ((int)result < 1) {
              break;
            }
            if (v104)
            {
              if (v103)
              {
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v76 + a3;
                do
                {
                  uint64_t v81 = *(void *)(v80 + 8 * v79);
                  *(void *)(v80 + 8 * v79) = *(void *)&v76[2 * v79];
                  *(void *)&v76[2 * v79++] = v81;
                }
                while (a3 >> 3 != v79);
              }
              else
              {
                uint64_t v83 = 0;
                uint64_t v84 = (uint64_t)v76 + a3;
                do
                {
                  char v85 = *(unsigned char *)(v84 + v83);
                  *(unsigned char *)(v84 + v83) = *((unsigned char *)v76 + v83);
                  *((unsigned char *)v76 + v83++) = v85;
                }
                while (a3 != v83);
              }
            }
            else
            {
              uint64_t v82 = *(void *)v78;
              *(void *)uint64_t v78 = *(void *)v77;
              *(void *)uint64_t v77 = v82;
            }
            uint64_t v76 = (unsigned int *)((char *)v76 + v7);
          }
          while (v77 > v6);
        }
        uint64_t v74 = (unsigned int *)((char *)v74 + a3);
        uint64_t v75 = (unsigned int *)((char *)v75 + a3);
      }
      while (v74 < v73);
    }
    return result;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a3 >> 3;
  BOOL v99 = a3 != 8;
  while (1)
  {
    unint64_t v11 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v101 = v5;
    if (v5 == 7) {
      goto LABEL_46;
    }
    int8x8_t v12 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      unint64_t v98 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v13 = (v5 >> 3) * a3;
      int16x4_t v14 = (unsigned int *)((char *)v6 + 2 * v13);
      int v15 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v6, *(unsigned int *)((char *)v6 + v13));
      uint64_t v100 = (unsigned int *)((char *)v6 + v13);
      int v16 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *(unsigned int *)((char *)v6 + v13), *v14);
      if (v15 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v6, *v14) >= 0) {
            unint64_t v17 = v6;
          }
          else {
            unint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
          }
          goto LABEL_18;
        }
      }
      else if (v16 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v6, *v14) >= 0) {
          unint64_t v17 = (unsigned int *)((char *)v6 + 2 * v13);
        }
        else {
          unint64_t v17 = v6;
        }
LABEL_18:
        uint64_t v100 = v17;
      }
      uint64_t v19 = (unsigned int *)((char *)v11 - v13);
      uint64_t v20 = (unsigned int *)((char *)v11 + v13);
      int v21 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *(unsigned int *)((char *)v11 - v13), *v11);
      int v22 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v11, *(unsigned int *)((char *)v11 + v13));
      if (v21 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v19, *v20) >= 0) {
            unint64_t v11 = (unsigned int *)((char *)v11 - v13);
          }
          else {
            unint64_t v11 = (unsigned int *)((char *)v11 + v13);
          }
        }
      }
      else if (v22 <= 0)
      {
        if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v19, *v20) >= 0) {
          unint64_t v11 = (unsigned int *)((char *)v11 + v13);
        }
        else {
          unint64_t v11 = (unsigned int *)((char *)v11 - v13);
        }
      }
      unint64_t v23 = (unsigned int *)((char *)v98 - 2 * v13);
      int8x8_t v12 = (unsigned int *)((char *)v98 - v13);
      int v24 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v12);
      int v25 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v12, *v98);
      if (v24 < 0)
      {
        unsigned int v18 = v100;
        if ((v25 & 0x80000000) == 0)
        {
          int8x8_t v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v98) >= 0) {
            int8x8_t v12 = v23;
          }
        }
      }
      else
      {
        unsigned int v18 = v100;
        if (v25 <= 0)
        {
          int8x8_t v12 = v98;
          if ((int)Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v23, *v98) < 0) {
            int8x8_t v12 = v23;
          }
        }
      }
      unint64_t v5 = v101;
      goto LABEL_37;
    }
    unsigned int v18 = v6;
LABEL_37:
    uint64_t v9 = a4;
    int v26 = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v11);
    uint64_t result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v11, *v12);
    if (v26 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v12);
        if ((int)result >= 0) {
          unint64_t v11 = v18;
        }
        else {
          unint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v18, *v12);
      if ((int)result >= 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = v18;
      }
    }
LABEL_46:
    if (v104)
    {
      if (v103)
      {
        uint64_t v27 = v6;
        unint64_t v28 = a3 >> 3;
        do
        {
          uint64_t v29 = *(void *)v27;
          *(void *)uint64_t v27 = *(void *)v11;
          v27 += 2;
          *(void *)unint64_t v11 = v29;
          v11 += 2;
          --v28;
        }
        while (v28);
      }
      else
      {
        unint64_t v31 = a3;
        uint64_t v32 = v6;
        do
        {
          char v33 = *(unsigned char *)v32;
          *(unsigned char *)uint64_t v32 = *(unsigned char *)v11;
          uint64_t v32 = (unsigned int *)((char *)v32 + 1);
          *(unsigned char *)unint64_t v11 = v33;
          unint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v31;
        }
        while (v31);
      }
    }
    else
    {
      uint64_t v30 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v11;
      *(void *)unint64_t v11 = v30;
    }
    int v34 = 0;
    uint64_t v35 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    uint64_t v36 = v35;
    uint64_t v37 = (unsigned int *)((char *)v6 + a3);
    uint64_t v38 = (void *)((char *)v6 + a3);
LABEL_55:
    while (v37 <= v36)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(v9, *v37, *v6);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v38[v39];
              v38[v39] = *(void *)&v37[2 * v39];
              *(void *)&v37[2 * v39++] = v40;
            }
            while (v10 != v39);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v38 + v49);
              *((unsigned char *)v38 + v49) = *((unsigned char *)v37 + v49);
              *((unsigned char *)v37 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *v38;
          void *v38 = *(void *)v37;
          *(void *)uint64_t v37 = v48;
        }
        uint64_t v38 = (void *)((char *)v38 + a3);
        int v34 = 1;
      }
      uint64_t v37 = (unsigned int *)((char *)v37 + a3);
    }
    while (v37 <= v36)
    {
      uint64_t result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(v9, *v36, *v6);
      if ((result & 0x80000000) != 0)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v37[2 * v46];
              *(void *)&v37[2 * v46] = *(void *)&v36[2 * v46];
              *(void *)&v36[2 * v46++] = v47;
            }
            while (v10 != v46);
          }
          else
          {
            uint64_t v52 = 0;
            do
            {
              char v53 = *((unsigned char *)v37 + v52);
              *((unsigned char *)v37 + v52) = *((unsigned char *)v36 + v52);
              *((unsigned char *)v36 + v52++) = v53;
            }
            while (a3 != v52);
          }
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v36;
          *(void *)uint64_t v36 = v51;
        }
        uint64_t v37 = (unsigned int *)((char *)v37 + a3);
        uint64_t v36 = (unsigned int *)((char *)v36 + v7);
        int v34 = 1;
        goto LABEL_55;
      }
      if (!result)
      {
        if (v104)
        {
          if (v103)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(void *)&v36[2 * v41];
              *(void *)&v36[2 * v41] = *(void *)&v35[2 * v41];
              *(void *)&v35[2 * v41++] = v42;
            }
            while (v10 != v41);
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              char v45 = *((unsigned char *)v36 + v44);
              *((unsigned char *)v36 + v44) = *((unsigned char *)v35 + v44);
              *((unsigned char *)v35 + v44++) = v45;
            }
            while (a3 != v44);
          }
        }
        else
        {
          uint64_t v43 = *(void *)v36;
          *(void *)uint64_t v36 = *(void *)v35;
          *(void *)uint64_t v35 = v43;
        }
        uint64_t v35 = (unsigned int *)((char *)v35 + v7);
        int v34 = 1;
      }
      uint64_t v36 = (unsigned int *)((char *)v36 + v7);
    }
    uint64_t v54 = (unsigned int *)((char *)v6 + v101 * a3);
    if (!v34) {
      break;
    }
    int64_t v55 = (char *)v37 - (char *)v38;
    if ((char *)v38 - (char *)v6 >= (char *)v37 - (char *)v38) {
      unint64_t v56 = (char *)v37 - (char *)v38;
    }
    else {
      unint64_t v56 = (char *)v38 - (char *)v6;
    }
    if (v56)
    {
      if (v103)
      {
        uint64_t v57 = (void *)((char *)v37 - v56);
        unint64_t v58 = v56 >> 3;
        uint64_t v59 = v6;
        do
        {
          uint64_t v60 = *(void *)v59;
          *(void *)uint64_t v59 = *v57;
          v59 += 2;
          *v57++ = v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        uint64_t v61 = -(uint64_t)v56;
        uint64_t v62 = v6;
        do
        {
          char v63 = *(unsigned char *)v62;
          *(unsigned char *)uint64_t v62 = *((unsigned char *)v37 + v61);
          uint64_t v62 = (unsigned int *)((char *)v62 + 1);
          *((unsigned char *)v37 + v61) = v63;
          BOOL v64 = __CFADD__(v61++, 1);
        }
        while (!v64);
      }
    }
    int64_t v65 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= (char *)v54 - ((char *)v35 + a3)) {
      unint64_t v66 = (char *)v54 - ((char *)v35 + a3);
    }
    else {
      unint64_t v66 = (char *)v35 - (char *)v36;
    }
    if (v66)
    {
      if (v103)
      {
        uint64_t v67 = (char *)v54 - v66;
        unint64_t v68 = v66 >> 3;
        do
        {
          uint64_t v69 = *(void *)v37;
          *(void *)uint64_t v37 = *(void *)v67;
          v37 += 2;
          *(void *)uint64_t v67 = v69;
          v67 += 8;
          --v68;
        }
        while (v68);
      }
      else
      {
        uint64_t v70 = -(uint64_t)v66;
        do
        {
          char v71 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *((unsigned char *)v54 + v70);
          uint64_t v37 = (unsigned int *)((char *)v37 + 1);
          *((unsigned char *)v54 + v7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v71;
          BOOL v64 = __CFADD__(v70++, 1);
        }
        while (!v64);
      }
    }
    if (v55 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<NodeByOutLinksICmp>(v6, v55 / a3, a3, a4);
    }
    if (v65 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = (unsigned int *)((char *)v54 - v65);
    unint64_t v5 = v65 / a3;
    int v72 = v99;
    if ((((v54 - v65) | a3) & 7) != 0) {
      int v72 = 2;
    }
    BOOL v103 = (((v54 - v65) | a3) & 7) == 0;
    int v104 = v72;
    uint64_t v9 = a4;
    if (v5 < 7) {
      goto LABEL_119;
    }
  }
  uint64_t v86 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v101 * a3) > (uint64_t)a3)
  {
    uint64_t v87 = v6;
    do
    {
      if (v86 > v6)
      {
        uint64_t v88 = v87;
        uint64_t v89 = v86;
        do
        {
          unsigned int v90 = v89;
          uint64_t v89 = (unsigned int *)((char *)v89 + v7);
          uint64_t result = Lattice<WordLatticeLC>::cmpNodesByOutLinks(a4, *v89, *v90);
          if ((int)result < 1) {
            break;
          }
          if (v104)
          {
            if (v103)
            {
              uint64_t v91 = 0;
              uint64_t v92 = (uint64_t)v88 + a3;
              do
              {
                uint64_t v93 = *(void *)(v92 + 8 * v91);
                *(void *)(v92 + 8 * v91) = *(void *)&v88[2 * v91];
                *(void *)&v88[2 * v91++] = v93;
              }
              while (v10 != v91);
            }
            else
            {
              uint64_t v95 = 0;
              uint64_t v96 = (uint64_t)v88 + a3;
              do
              {
                char v97 = *(unsigned char *)(v96 + v95);
                *(unsigned char *)(v96 + v95) = *((unsigned char *)v88 + v95);
                *((unsigned char *)v88 + v95++) = v97;
              }
              while (a3 != v95);
            }
          }
          else
          {
            uint64_t v94 = *(void *)v90;
            *(void *)unsigned int v90 = *(void *)v89;
            *(void *)uint64_t v89 = v94;
          }
          uint64_t v88 = (unsigned int *)((char *)v88 + v7);
        }
        while (v89 > v6);
      }
      uint64_t v86 = (unsigned int *)((char *)v86 + a3);
      uint64_t v87 = (unsigned int *)((char *)v87 + a3);
    }
    while (v86 < v54);
  }
  return result;
}

BOOL WordLattice::hasCollapsedWords(WordLattice *this)
{
  unint64_t v1 = *((unsigned int *)this + 26);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned int *)*((void *)this + 12);
  uint64_t v3 = *((void *)this + 16);
  if ((*(_DWORD *)(v3 + 136 * *v2 + 88) & 0xFFFFFF) == 0xFFFFFB) {
    return 1;
  }
  uint64_t v5 = 1;
  do
  {
    unint64_t v6 = v5;
    if (v1 == v5) {
      break;
    }
    int v7 = *(_DWORD *)(v3 + 136 * v2[v5++] + 88) & 0xFFFFFF;
  }
  while (v7 != 16777211);
  return v6 < v1;
}

uint64_t WordLattice::findOrAddLinkSegId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(unsigned int *)(a1 + 248) | ((unint64_t)*(unsigned int *)(a2 + 8) << 32);
  uint64_t v6 = HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::insert(a3, v5, a2);
  if (v6 == v5)
  {
    int v7 = *(_DWORD *)(a2 + 8);
    unsigned int v8 = *(_DWORD *)(a1 + 252);
    unsigned int v9 = *(_DWORD *)(a1 + 248) + v7;
    if (v9 > v8)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a1 + 240, v9 - v8, 1);
      int v7 = *(_DWORD *)(a2 + 8);
    }
    if (v7)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        int8x8_t v12 = (uint64_t *)(*(void *)a2 + v10);
        uint64_t v13 = *(void *)(a1 + 240) + 28 * (v11 + *(_DWORD *)(a1 + 248));
        uint64_t v14 = *v12;
        *(_WORD *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((_WORD *)v12 + 4);
        *(void *)uint64_t v13 = v14;
        *(unsigned char *)(v13 + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *((unsigned char *)v12 + 10);
        *(unsigned char *)(v13 + 11) = *((unsigned char *)v12 + 11);
        *(_DWORD *)(v13 + 12) = *((_DWORD *)v12 + 3);
        *(_DWORD *)(v13 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = *((_DWORD *)v12 + 4);
        *(void *)(v13 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(uint64_t *)((char *)v12 + 20);
        ++v11;
        unint64_t v15 = *(unsigned int *)(a2 + 8);
        v10 += 28;
      }
      while (v11 < v15);
    }
    else
    {
      LODWORD(v15) = 0;
    }
    *(_DWORD *)(a1 + 248) += v15;
  }
  return v6;
}

uint64_t HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 >= v6 >> 1) {
    HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::upSize(a1, 2 * v6);
  }
  int v7 = WordLattice::computeHash(a3);
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8) {
    uint64_t v9 = (-1640531527 * v7) >> -(char)v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(v10 + 8 * v9);
  if (v11 == -1)
  {
LABEL_14:
    *(void *)(v10 + 8 * v9) = a2;
    ++*(_DWORD *)a1;
    return a2;
  }
  if ((WordLattice::equalKeys(*(void *)(a1 + 32), v11, a3) & 1) == 0)
  {
    while (1)
    {
      uint64_t v9 = v9 + 1 == *(_DWORD *)(a1 + 4) ? 0 : (v9 + 1);
      uint64_t v10 = *(void *)(a1 + 16);
      unint64_t v12 = *(void *)(v10 + 8 * v9);
      if (v12 == -1) {
        break;
      }
      if (WordLattice::equalKeys(*(void *)(a1 + 32), v12, a3)) {
        return *(void *)(*(void *)(a1 + 16) + 8 * v9);
      }
    }
    goto LABEL_14;
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * v9);
}

unint64_t WordLattice::findOrAddLinkSegSeqId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WordLattice::findOrAddLinkSegId(a1, a2, a3) | 0x8000000000000000;
}

void WordLattice::printSize(WordLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1664, (DgnString *)&v162);
  if (v163) {
    int v16 = v162;
  }
  else {
    int v16 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140AAFE0, a3, &unk_2140AAFE0, v16);
  DgnString::~DgnString((DgnString *)&v162);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140AAFE0);
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v21 = (a3 + 1);
  uint64_t v160 = 0;
  Lattice<WordLatticeLC>::printSize((unsigned int *)this, 0xFFFFFFFFLL, v21, &v162, &v161, &v160);
  *a4 += (unint64_t)v162;
  *a5 += v161;
  *a6 += v160;
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1668, (DgnString *)&v162);
  if (v163) {
    uint64_t v27 = v162;
  }
  else {
    uint64_t v27 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1670, (DgnString *)&v162);
  if (v163) {
    uint64_t v32 = v162;
  }
  else {
    uint64_t v32 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1672, (DgnString *)&v162);
  if (v163) {
    uint64_t v37 = v162;
  }
  else {
    uint64_t v37 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1674, (DgnString *)&v162);
  if (v163) {
    uint64_t v42 = v162;
  }
  else {
    uint64_t v42 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v42, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1676, (DgnString *)&v162);
  if (v163) {
    uint64_t v47 = v162;
  }
  else {
    uint64_t v47 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v47, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1678, (DgnString *)&v162);
  if (v163) {
    uint64_t v52 = v162;
  }
  else {
    uint64_t v52 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v52, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1680, (DgnString *)&v162);
  if (v163) {
    uint64_t v57 = v162;
  }
  else {
    uint64_t v57 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v57, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1682, (DgnString *)&v162);
  if (v163) {
    uint64_t v62 = v162;
  }
  else {
    uint64_t v62 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v62, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1684, (DgnString *)&v162);
  if (v163) {
    uint64_t v67 = v162;
  }
  else {
    uint64_t v67 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v67, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1686, (DgnString *)&v162);
  if (v163) {
    int v72 = v162;
  }
  else {
    int v72 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v72, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1688, (DgnString *)&v162);
  if (v163) {
    uint64_t v77 = v162;
  }
  else {
    uint64_t v77 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v77, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1690, (DgnString *)&v162);
  if (v163) {
    uint64_t v82 = v162;
  }
  else {
    uint64_t v82 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v82, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1692, (DgnString *)&v162);
  if (v163) {
    uint64_t v87 = v162;
  }
  else {
    uint64_t v87 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v87, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1694, (DgnString *)&v162);
  if (v163) {
    uint64_t v92 = v162;
  }
  else {
    uint64_t v92 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v92, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1696, (DgnString *)&v162);
  if (v163) {
    char v97 = v162;
  }
  else {
    char v97 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v97, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1698, (DgnString *)&v162);
  if (v163) {
    uint64_t v102 = v162;
  }
  else {
    uint64_t v102 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v102, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1700, (DgnString *)&v162);
  if (v163) {
    uint64_t v107 = v162;
  }
  else {
    uint64_t v107 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v107, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1702, (DgnString *)&v162);
  if (v163) {
    uint64_t v112 = v162;
  }
  else {
    uint64_t v112 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v112, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1704, (DgnString *)&v162);
  if (v163) {
    uint64_t v117 = v162;
  }
  else {
    uint64_t v117 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v117, 1, 1, 0);
  uint64_t v159 = a3;
  DgnString::~DgnString((DgnString *)&v162);
  ++*a4;
  ++*a5;
  uint64_t v118 = sizeObject<ParseToken>((uint64_t)this + 224, 0);
  uint64_t v119 = sizeObject<ParseToken>((uint64_t)this + 224, 1);
  sizeObject((uint64_t)&v162, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1706, (DgnString *)&v162);
  if (v163) {
    uint64_t v124 = v162;
  }
  else {
    uint64_t v124 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v124, v118, v119, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += v118;
  *a5 += v119;
  uint64_t v125 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v125 = 16;
  }
  uint64_t v126 = *((unsigned int *)this + 62);
  uint64_t v127 = 28 * v126;
  if ((int)v126 <= 0) {
    uint64_t v127 = 0;
  }
  uint64_t v128 = v127 + v125;
  uint64_t v129 = v127 + v125 + 28 * (*((_DWORD *)this + 63) - v126);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1708, (DgnString *)&v162);
  if (v163) {
    uint64_t v134 = v162;
  }
  else {
    uint64_t v134 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_2140AAFE0, v22, v22, v134, v129, v128, 0);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += v129;
  *a5 += v128;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v135 = 12;
  }
  else {
    uint64_t v135 = 16;
  }
  uint64_t v136 = *((unsigned int *)this + 66);
  unsigned int v137 = *((_DWORD *)this + 67);
  if (v137 >= v136)
  {
    uint64_t v138 = 0;
    if ((int)v136 > 0) {
      v135 += 8 * (v136 - 1) + 8;
    }
    uint64_t v139 = v135 + 8 * (v137 - v136);
  }
  else
  {
    uint64_t v138 = 8 * v136;
    uint64_t v139 = v135;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1710, (DgnString *)&v162);
  if (v163) {
    uint64_t v144 = v162;
  }
  else {
    uint64_t v144 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v21, &unk_2140AAFE0, v22, v22, v144, v139, v135, v138);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += v139;
  *a5 += v135;
  *a6 += v138;
  uint64_t v145 = (char *)this + 272;
  uint64_t v146 = sizeObject((char *)this + 272);
  uint64_t v147 = sizeObject(v145);
  uint64_t v148 = sizeObject(v145);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1712, (DgnString *)&v162);
  if (v163) {
    uint64_t v153 = v162;
  }
  else {
    uint64_t v153 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v21, &unk_2140AAFE0, v22, v22, v153, v146, v147, v148);
  DgnString::~DgnString((DgnString *)&v162);
  *a4 += v146;
  *a5 += v147;
  *a6 += v148;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/wordlat.cpp", 1713, (DgnString *)&v162);
  if (v163) {
    int v158 = v162;
  }
  else {
    int v158 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v159, &unk_2140AAFE0, (35 - v159), (35 - v159), v158, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v162);
}

void sub_214042B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void Lattice<WordLatticeLC>::printSize(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 898, (DgnString *)&v147);
  if (v148) {
    int v16 = v147;
  }
  else {
    int v16 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140AAFE0, a3, &unk_2140AAFE0, v16);
  DgnString::~DgnString((DgnString *)&v147);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140AAFE0);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v27 = v147;
  }
  else {
    uint64_t v27 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v27, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v147);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v32 = v147;
  }
  else {
    uint64_t v32 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140AAFE0, (34 - a3), (34 - a3), v32, 4, 4, 0);
  uint64_t v146 = a3;
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v33 = 12;
  }
  else {
    uint64_t v33 = 16;
  }
  uint64_t v34 = a1[6];
  unsigned int v35 = a1[7];
  if (v35 >= v34)
  {
    uint64_t v36 = 0;
    if ((int)v34 > 0) {
      v33 += 4 * (v34 - 1) + 4;
    }
    uint64_t v37 = v33 + 4 * (v35 - v34);
  }
  else
  {
    uint64_t v36 = 4 * v34;
    uint64_t v37 = v33;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v42 = v147;
  }
  else {
    uint64_t v42 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v21, &unk_2140AAFE0, v22, v22, v42, v37, v33, v36);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v37;
  *a5 += v33;
  *a6 += v36;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 12;
  }
  else {
    uint64_t v43 = 16;
  }
  uint64_t v44 = a1[10];
  unsigned int v45 = a1[11];
  if (v45 >= v44)
  {
    uint64_t v46 = 0;
    if ((int)v44 > 0) {
      v43 += 4 * (v44 - 1) + 4;
    }
    uint64_t v47 = v43 + 4 * (v45 - v44);
  }
  else
  {
    uint64_t v46 = 4 * v44;
    uint64_t v47 = v43;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v52 = v147;
  }
  else {
    uint64_t v52 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_2140AAFE0, v22, v22, v52, v47, v43, v46);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v47;
  *a5 += v43;
  *a6 += v46;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 12;
  }
  else {
    uint64_t v53 = 16;
  }
  uint64_t v54 = a1[14];
  unsigned int v55 = a1[15];
  if (v55 >= v54)
  {
    uint64_t v56 = 0;
    if ((int)v54 > 0) {
      v53 += 4 * (v54 - 1) + 4;
    }
    uint64_t v57 = v53 + 4 * (v55 - v54);
  }
  else
  {
    uint64_t v56 = 4 * v54;
    uint64_t v57 = v53;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v62 = v147;
  }
  else {
    uint64_t v62 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_2140AAFE0, v22, v22, v62, v57, v53, v56);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v57;
  *a5 += v53;
  *a6 += v56;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 12;
  }
  else {
    uint64_t v63 = 16;
  }
  uint64_t v64 = a1[18];
  unsigned int v65 = a1[19];
  if (v65 >= v64)
  {
    uint64_t v66 = 0;
    if ((int)v64 > 0) {
      v63 += 4 * (v64 - 1) + 4;
    }
    uint64_t v67 = v63 + 4 * (v65 - v64);
  }
  else
  {
    uint64_t v66 = 4 * v64;
    uint64_t v67 = v63;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    int v72 = v147;
  }
  else {
    int v72 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_2140AAFE0, v22, v22, v72, v67, v63, v66);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v67;
  *a5 += v63;
  *a6 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  uint64_t v74 = a1[22];
  uint64_t v75 = 24 * v74;
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 24 * (a1[23] - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v82 = v147;
  }
  else {
    uint64_t v82 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_2140AAFE0, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v77;
  *a5 += v76;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v83 = 12;
  }
  else {
    uint64_t v83 = 16;
  }
  uint64_t v84 = a1[26];
  unsigned int v85 = a1[27];
  if (v85 >= v84)
  {
    uint64_t v86 = 0;
    if ((int)v84 > 0) {
      v83 += 4 * (v84 - 1) + 4;
    }
    uint64_t v87 = v83 + 4 * (v85 - v84);
  }
  else
  {
    uint64_t v86 = 4 * v84;
    uint64_t v87 = v83;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v92 = v147;
  }
  else {
    uint64_t v92 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_2140AAFE0, v22, v22, v92, v87, v83, v86);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v87;
  *a5 += v83;
  *a6 += v86;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v93 = 12;
  }
  else {
    uint64_t v93 = 16;
  }
  uint64_t v94 = a1[30];
  unsigned int v95 = a1[31];
  if (v95 >= v94)
  {
    uint64_t v96 = 0;
    if ((int)v94 > 0) {
      v93 += 4 * (v94 - 1) + 4;
    }
    uint64_t v97 = v93 + 4 * (v95 - v94);
  }
  else
  {
    uint64_t v96 = 4 * v94;
    uint64_t v97 = v93;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v102 = v147;
  }
  else {
    uint64_t v102 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v21, &unk_2140AAFE0, v22, v22, v102, v97, v93, v96);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v97;
  *a5 += v93;
  *a6 += v96;
  uint64_t v103 = sizeObject<LatticeLink<WordLatticeLC>>((uint64_t)(a1 + 32), 0);
  uint64_t v104 = sizeObject<LatticeLink<WordLatticeLC>>((uint64_t)(a1 + 32), 1);
  uint64_t v105 = sizeObject<LatticeLink<WordLatticeLC>>((uint64_t)(a1 + 32), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v110 = v147;
  }
  else {
    uint64_t v110 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v21, &unk_2140AAFE0, v22, v22, v110, v103, v104, v105);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v103;
  *a5 += v104;
  *a6 += v105;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v111 = 12;
  }
  else {
    uint64_t v111 = 16;
  }
  uint64_t v112 = a1[38];
  unsigned int v113 = a1[39];
  if (v113 >= v112)
  {
    uint64_t v114 = 0;
    if ((int)v112 > 0) {
      v111 += 4 * (v112 - 1) + 4;
    }
    uint64_t v115 = v111 + 4 * (v113 - v112);
  }
  else
  {
    uint64_t v114 = 4 * v112;
    uint64_t v115 = v111;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v120 = v147;
  }
  else {
    uint64_t v120 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v116, v117, v118, v119, v21, &unk_2140AAFE0, v22, v22, v120, v115, v111, v114);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v115;
  *a5 += v111;
  *a6 += v114;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v121 = 12;
  }
  else {
    uint64_t v121 = 16;
  }
  uint64_t v122 = a1[42];
  unsigned int v123 = a1[43];
  if (v123 >= v122)
  {
    uint64_t v124 = 0;
    if ((int)v122 > 0) {
      v121 += 4 * (v122 - 1) + 4;
    }
    uint64_t v125 = v121 + 4 * (v123 - v122);
  }
  else
  {
    uint64_t v124 = 4 * v122;
    uint64_t v125 = v121;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v130 = v147;
  }
  else {
    uint64_t v130 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v126, v127, v128, v129, v21, &unk_2140AAFE0, v22, v22, v130, v125, v121, v124);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v125;
  *a5 += v121;
  *a6 += v124;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v131 = 12;
  }
  else {
    uint64_t v131 = 16;
  }
  uint64_t v132 = a1[46];
  unsigned int v133 = a1[47];
  if (v133 >= v132)
  {
    uint64_t v134 = 0;
    if ((int)v132 > 0) {
      v131 += 4 * (v132 - 1) + 4;
    }
    uint64_t v135 = v131 + 4 * (v133 - v132);
  }
  else
  {
    uint64_t v134 = 4 * v132;
    uint64_t v135 = v131;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 900, (DgnString *)&v147);
  if (v148) {
    uint64_t v140 = v147;
  }
  else {
    uint64_t v140 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v21, &unk_2140AAFE0, v22, v22, v140, v135, v131, v134);
  DgnString::~DgnString((DgnString *)&v147);
  *a4 += v135;
  *a5 += v131;
  *a6 += v134;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/lattice.h", 908, (DgnString *)&v147);
  if (v148) {
    uint64_t v145 = v147;
  }
  else {
    uint64_t v145 = &unk_2140AAFE0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v146, &unk_2140AAFE0, (35 - v146), (35 - v146), v145, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v147);
}

void sub_214043600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t writeObject(DgnStream *a1, const LatticeData *a2, unsigned int *a3)
{
  writeObject((uint64_t)a1, (int *)a2, a3);
  writeObject((uint64_t)a1, (int *)a2 + 1, a3);
  writeObject((uint64_t)a1, (int *)a2 + 2, a3);
  writeObject((uint64_t)a1, (int *)a2 + 3, a3);
  int v16 = *((_DWORD *)a2 + 6);
  writeObject((uint64_t)a1, &v16, a3);
  if (*((_DWORD *)a2 + 6))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      writeObject(a1, (int *)(*((void *)a2 + 2) + v11), a3, v6, v7, v8, v9, v10);
      ++v12;
      v11 += 112;
    }
    while (v12 < *((unsigned int *)a2 + 6));
  }
  int v13 = *((_DWORD *)a2 + 20);
  if (v13 == -64) {
    int v13 = -1;
  }
  int v15 = v13;
  writeObject((uint64_t)a1, &v15, a3);
  writeObject((uint64_t)a1, (int *)a2 + 21, a3);
  writeObject((uint64_t)a1, (int *)a2 + 22, a3);
  writeObject((uint64_t)a1, (int *)a2 + 23, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 96, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 97, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 98, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 99, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 100, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 101, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 102, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 103, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 104, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 105, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 106, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 107, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 108, a3);
  writeObject((uint64_t)a1, (unsigned __int8 *)a2 + 109, a3);
  writeObject<ParseToken>((uint64_t)a1, (uint64_t)a2 + 112, a3);
  writeObject<LinkSegment>((uint64_t)a1, (uint64_t)a2 + 128, a3);
  writeObject<unsigned long long>((uint64_t)a1, (uint64_t)a2 + 144, a3);
  return writeObject((uint64_t)a1, (uint64_t)a2 + 160, a3);
}

uint64_t writeObject<LinkSegment>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 28;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

DgnString *WordLattice::fillLatticeData(WordLattice *this, LatticeData *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  VocOrThrow = (void *)VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *((unsigned __int16 *)this + 102), a3, a4, a5, a6, a7, a8);
  *(void *)a2 = *(void *)(VocOrThrow[6] + 376);
  *((_DWORD *)a2 + 2) = *(_DWORD *)(VocOrThrow[7] + 732);
  *((_DWORD *)a2 + 3) = *(_DWORD *)(VocOrThrow[8] + 44);
  if (*((_DWORD *)this + 26))
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *((void *)this + 16) + 136 * *(unsigned int *)(*((void *)this + 12) + 4 * v11);
      uint64_t v13 = *((void *)this + 10);
      LODWORD(v5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v13 + 24 * *(unsigned int *)(v12 + 116));
      HIDWORD(v5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v13 + 24 * *(unsigned int *)(v12 + 120));
      int v14 = *(_DWORD *)(v12 + 88);
      int v15 = *(_DWORD *)(v12 + 108);
      int v16 = *(_DWORD *)(v12 + 96);
      int v17 = *(_DWORD *)(v12 + 16);
      int v18 = *(_DWORD *)(v12 + 20);
      int v19 = *(_DWORD *)(v12 + 24);
      int v20 = *(_DWORD *)(v12 + 28);
      int v21 = *(_DWORD *)(v12 + 32);
      int v22 = *(_DWORD *)(v12 + 36);
      int v23 = *(_DWORD *)(v12 + 40);
      int v24 = *(_DWORD *)(v12 + 44);
      int v25 = *(_DWORD *)(v12 + 48);
      int v42 = v17;
      int v43 = v18;
      int v44 = v19;
      int v45 = v20;
      int v46 = v21;
      int v47 = v22;
      int v48 = v23;
      int v49 = v24;
      int v50 = v25;
      int v26 = *(_DWORD *)(v12 + 60);
      uint64_t v27 = *(void *)(v12 + 52);
      int v28 = *(_DWORD *)(v12 + 64);
      *(void *)&long long v29 = v27;
      *((void *)&v29 + 1) = *(void *)(v12 + 60);
      long long v51 = v29;
      int v55 = v14;
      int v56 = v15;
      int v57 = v16;
      int v30 = *(_DWORD *)(v12 + 68);
      int v31 = *(_DWORD *)(v12 + 72);
      int v52 = v30;
      int v53 = v31;
      uint64_t v32 = *(void *)(v12 + 8);
      uint64_t v41 = v32;
      uint64_t v33 = *(void *)(v12 + 80);
      uint64_t v54 = v33;
      uint64_t v34 = *((unsigned int *)a2 + 6);
      if (v34 == *((_DWORD *)a2 + 7))
      {
        DgnArray<WordLatticeLC>::reallocElts((uint64_t)a2 + 16, 1, 1);
        LODWORD(v34) = *((_DWORD *)a2 + 6);
        uint64_t v32 = v41;
        int v17 = v42;
        int v18 = v43;
        int v19 = v44;
        int v20 = v45;
        int v21 = v46;
        int v22 = v47;
        int v23 = v48;
        int v24 = v49;
        int v25 = v50;
        int v35 = v51;
        int v36 = DWORD1(v51);
        int v26 = DWORD2(v51);
        int v28 = HIDWORD(v51);
        int v30 = v52;
        int v31 = v53;
        uint64_t v33 = v54;
        int v14 = v55;
        int v15 = v56;
        int v16 = v57;
      }
      else
      {
        int v35 = v27;
        int v36 = HIDWORD(v27);
      }
      uint64_t v37 = *((void *)a2 + 2) + 112 * v34;
      *(void *)(v37 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v32;
      *(_DWORD *)(v37 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 16) = v17;
      *(_DWORD *)(v37 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v18;
      *(_DWORD *)(v37 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = v19;
      *(_DWORD *)(v37 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v20;
      *(_DWORD *)(v37 + 32) = v21;
      *(_DWORD *)(v37 + 36) = v22;
      *(_DWORD *)(v37 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v23;
      *(_DWORD *)(v37 + 44) = v24;
      *(_DWORD *)(v37 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v25;
      *(_DWORD *)(v37 + 52) = v35;
      *(_DWORD *)(v37 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = v36;
      *(_DWORD *)(v37 + 6MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v26;
      *(_DWORD *)(v37 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v28;
      *(_DWORD *)(v37 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v30;
      *(_DWORD *)(v37 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = v31;
      *(void *)(v37 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v33;
      *(void *)uint64_t v37 = &unk_26C4E05A8;
      *(_DWORD *)(v37 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
      *(_DWORD *)(v37 + 92) = v15;
      *(_DWORD *)(v37 + 96) = v16;
      *(void *)(v37 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 104) = v58;
      ++*((_DWORD *)a2 + 6);
      ++v11;
    }
    while (v11 < *((unsigned int *)this + 26));
  }
  *((void *)a2 + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *((void *)this + 24);
  *((_DWORD *)a2 + 22) = *((_DWORD *)this + 50);
  *((_DWORD *)a2 + 23) = *((_DWORD *)this + 6);
  *((_WORD *)a2 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((_WORD *)this + 103);
  v38.i32[0] = *((_DWORD *)this + 52);
  v38.i32[1] = *(_DWORD *)((char *)this + 213);
  *(uint8x8_t *)((char *)a2 + 9DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v38;
  v38.i32[0] = *(_DWORD *)((char *)this + 217);
  int16x8_t v39 = (int16x8_t)vmovl_u8(v38);
  *(int16x4_t *)v39.i8 = vuzp2_s16((int16x4_t)vext_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)v39.i8, 2uLL), *(int16x4_t *)v39.i8);
  *(_DWORD *)((char *)a2 + 106) = vmovn_s16(v39).u32[0];
  DgnArray<ParseToken>::copyArraySlice((unint64_t)a2 + 112, (uint64_t *)this + 28, 0, *((_DWORD *)this + 58));
  DgnArray<LinkSegment>::copyArraySlice((unint64_t)a2 + 128, (void *)this + 30, 0, *((_DWORD *)this + 62));
  DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)a2 + 144, (uint64_t *)this + 32, 0, *((_DWORD *)this + 66));
  return DgnString::operator=((LatticeData *)((char *)a2 + 160), (WordLattice *)((char *)this + 272));
}

uint64_t WordLattice::computeConfidencePredictorsForLinks(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 **a4)
{
  *(unsigned char *)(a1 + 219) = 1;
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v32 = 0;
  unint64_t v9 = realloc_array(0, &v32, 4 * (v8 + 1), 0, 0, 1);
  uint64_t v10 = (char *)v32;
  uint64_t v34 = v32;
  LODWORD(v35) = v8 + 1;
  HIDWORD(v35) = v9 >> 2;
  *(_DWORD *)uint64_t v32 = 0;
  if (v8)
  {
    int v11 = 0;
    uint64_t v12 = *(int **)a2;
    uint64_t v13 = v10 + 4;
    do
    {
      int v14 = *v12++;
      v11 += v14;
      *v13++ = v11;
      --v8;
    }
    while (v8);
  }
  uint64_t v15 = *((unsigned int *)a4 + 2);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v36 = 0;
  unint64_t v16 = realloc_array(0, &v36, 4 * (v15 + 1), 0, 0, 1);
  int v17 = v36;
  uint64_t v32 = v36;
  LODWORD(v33) = v15 + 1;
  HIDWORD(v33) = v16 >> 2;
  *(_DWORD *)int v36 = 0;
  if (v15)
  {
    int v18 = 0;
    int v19 = *a4;
    int v20 = v17 + 1;
    do
    {
      int v21 = *v19++;
      v18 += v21;
      *v20++ = v18;
      --v15;
    }
    while (v15);
  }
  uint64_t v22 = *(unsigned int *)(a1 + 104);
  if (v22)
  {
    int v23 = *(unsigned int **)(a1 + 96);
    uint64_t v24 = *(void *)(a1 + 128);
    int v25 = v34;
    uint64_t v26 = *a3;
    do
    {
      unsigned int v27 = *v23++;
      int v28 = (unsigned int *)(v24 + 136 * v27);
      uint64_t v29 = v28[4];
      int v30 = v28[5] + v29;
      unsigned char v28[16] = v17[v30] - v17[v29];
      v28[14] = v25[v30] - v25[v29];
      v28[15] = *(_DWORD *)(v26 + 4 * (v30 - 1));
      --v22;
    }
    while (v22);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v34);
}

void sub_214043DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void WordLattice::saveLattice(WordLattice *a1, uint64_t a2, _DWORD *a3)
{
  DFileOwner::DFileOwner((DFileOwner *)v25);
  *a3 = 1;
  uint64_t v6 = DFile::openDFile(a2, (const FileSpec *)1, 14, (uint64_t)v25);
  *a3 = 2;
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)v6, 0x1Eu, 0, "MRLAB!? ", 24, 10);
  unsigned int v24 = 0;
  v19[0] = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  DgnString::DgnString((DgnString *)v23);
  WordLattice::fillLatticeData(a1, (LatticeData *)v15, v8, v9, v10, v11, v12, v13);
  writeObject(v7, (const LatticeData *)v15, &v24);
  writeObjectChecksum((uint64_t)v7, (int *)&v24);
  DgnDelete<DgnStream>((void (***)(void))v7);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v25, 0);
  *a3 = 0;
  DgnString::~DgnString((DgnString *)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v21);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v16);
  DFileOwner::~DFileOwner((DFileOwner *)v25, v14);
}

void sub_214043F10(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 144);
  DgnIArray<Utterance *>::~DgnIArray(v3 + 128);
  DgnIArray<Utterance *>::~DgnIArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 32);
  DgnIArray<Utterance *>::~DgnIArray(v1);
  DFileOwner::~DFileOwner((DFileOwner *)(v4 - 80), v6);
  _Unwind_Resume(a1);
}

void LatticeData::~LatticeData(LatticeData *this)
{
}

uint64_t WordLattice::fixStateIds(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(this + 104);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = this;
    unint64_t v10 = v8 + 1;
    do
    {
      unsigned int v11 = *(_DWORD *)(*(void *)(v9 + 96) + 4 * (v10 - 2));
      uint64_t v12 = *(void *)(v9 + 128);
      uint64_t v13 = v12 + 136 * v11;
      unsigned int v16 = *(_DWORD *)(v13 + 96);
      int v14 = (_DWORD *)(v13 + 96);
      uint64_t v15 = v16;
      if (v16)
      {
        this = VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *(_DWORD *)(v12 + 136 * v11 + 88) >> 25, a3, a4, a5, a6, a7, a8);
        uint64_t v17 = *(void *)(this + 56);
        if (*(_WORD *)(*(void *)(v17 + 48) + 2 * v15)) {
          *int v14 = *(_DWORD *)(*(void *)(v17 + 64) + 4 * v15);
        }
      }
      --v10;
    }
    while (v10 > 1);
  }
  return this;
}

uint64_t WordLattice::extendPath@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v9 = *(_DWORD *)(a2 + 12);
  unint64_t v10 = (_DWORD *)(*(void *)(a1 + 128) + 136 * *(unsigned int *)(*(void *)(a1 + 96) + 4 * a3));
  uint64_t result = (uint64_t)(v10 + 22);
  unsigned int v12 = v10[22];
  if ((v12 & 0xFFFFFF) == 0xFFFFFB)
  {
    unsigned int v13 = v12 >> 25;
    uint64_t v14 = v10[24];
    if (*(_WORD *)(a2 + 16) != v12 >> 25 || *(_DWORD *)(a2 + 20) != v14)
    {
      uint64_t result = CWIDAC::computeHash(result);
      HIDWORD(vDgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v9;
      LODWORD(vDgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v9;
      int v9 = result + (v16 >> 19);
      int v17 = v10[18];
      if (v17)
      {
        HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
        LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
        HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10[17] + (v18 >> 19);
        LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = HIDWORD(v18);
        int v9 = (v18 >> 19) + v17;
      }
    }
  }
  else
  {
    uint64_t result = CWIDAC::computeHash(result);
    HIDWORD(v19) = v9;
    LODWORD(v19) = v9;
    int v9 = result + (v19 >> 19);
    int v20 = v10[18];
    uint64_t v14 = 0;
    if (v20)
    {
      HIDWORD(v21) = v9;
      LODWORD(v21) = v9;
      HIDWORD(v21) = v10[17] + (v21 >> 19);
      LODWORD(v21) = HIDWORD(v21);
      int v9 = (v21 >> 19) + v20;
    }
    unsigned int v13 = 127;
  }
  int v22 = v10[7] + *(_DWORD *)(a2 + 8) + v10[8] + v10[9] + v10[10] + v10[11] + v10[12] + v10[13];
  *(_DWORD *)a5 = a3;
  *(_DWORD *)(a5 + 4) = a4;
  *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v22;
  *(_DWORD *)(a5 + 12) = v9;
  *(void *)(a5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v13 | (unint64_t)(v14 << 32);
  return result;
}

void WordLattice::makeMinimumSpanningTree(uint64_t a1, unsigned int *a2, uint64_t a3, void **a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unsigned int v9 = a2[3];
  if (v8 > v9) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, v8 - v9, 0);
  }
  uint64_t v10 = a2[2];
  if (v10 <= v8)
  {
    if (v10 < v8)
    {
      uint64_t v13 = v8 - v10;
      uint64_t v14 = 16 * v10;
      do
      {
        uint64_t v15 = (void *)(*(void *)a2 + v14);
        void *v15 = 0;
        v15[1] = 0;
        v14 += 16;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)v10 > (int)v8)
  {
    uint64_t v11 = (int)v10;
    uint64_t v12 = 16 * (int)v10 - 16;
    do
    {
      --v11;
      DgnIArray<Utterance *>::~DgnIArray(*(void *)a2 + v12);
      v12 -= 16;
    }
    while (v11 > (int)v8);
  }
  a2[2] = v8;
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)(a3 + 12);
  if (v16 > v17) {
    DgnPrimArray<unsigned long long>::reallocElts(a3, v16 - v17, 0);
  }
  uint64_t v18 = *(unsigned int *)(a3 + 8);
  if (v18 <= v16)
  {
    if (v18 < v16)
    {
      do
        *(void *)(*(void *)a3 + 8 * v18++) = 0;
      while (v16 != v18);
    }
  }
  else
  {
    DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::destructAt(a3, v16, v18 - v16);
  }
  *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v16;
  unint64_t v19 = *(unsigned int *)(a1 + 24);
  if (*((_DWORD *)a4 + 3) >= v19)
  {
    *((_DWORD *)a4 + 2) = v19;
    if (!v19) {
      goto LABEL_21;
    }
  }
  else
  {
    v35[0] = 0;
    int v20 = realloc_array(*a4, v35, v19, *((unsigned int *)a4 + 2), *((unsigned int *)a4 + 2), 1);
    *a4 = v35[0];
    *((_DWORD *)a4 + 2) = v19;
    *((_DWORD *)a4 + 3) = v20;
  }
  bzero(*a4, v19);
LABEL_21:
  uint64_t v21 = *(void *)a2;
  unsigned int v22 = *(_DWORD *)(*(void *)a2 + 8);
  if (v22 == *(_DWORD *)(*(void *)a2 + 12))
  {
    DgnArray<CWIDAC>::reallocElts(*(void *)a2, 1, 1);
    unsigned int v22 = *(_DWORD *)(v21 + 8);
  }
  uint64_t v23 = *(void *)v21 + 24 * v22;
  *(_OWORD *)uint64_t v23 = xmmword_214085BE0;
  *(_WORD *)(v23 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = 127;
  *(_DWORD *)(v23 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  ++*(_DWORD *)(v21 + 8);
  *(unsigned char *)*a4 = 1;
  unint64_t v24 = *(unsigned int *)(a1 + 24);
  if (v24)
  {
    for (unint64_t i = 0; i < v24; ++i)
    {
      uint64_t v26 = *(unsigned int *)(*(void *)(a1 + 80) + 24 * *(unsigned int *)(*(void *)(a1 + 16) + 4 * i) + 20);
      if (v26 != -2)
      {
        uint64_t v27 = *(void *)(*(void *)a2 + 16 * i);
        uint64_t v28 = *(void *)(a1 + 128);
        do
        {
          WordLattice::extendPath(a1, v27, *(_DWORD *)(v28 + 136 * v26 + 112), 0, (uint64_t)v35);
          uint64_t v29 = (unsigned int *)(*(void *)a2
                               + 16
                               * *(unsigned int *)(*(void *)(a1 + 80)
                                                 + 24 * *(unsigned int *)(*(void *)(a1 + 128) + 136 * v26 + 120)));
          int v30 = v29 + 2;
          if (v29[2])
          {
            int v31 = (int)v35[1];
            uint64_t v32 = *(void *)v29;
            if (SLODWORD(v35[1]) < *(_DWORD *)(*(void *)v29 + 8))
            {
              *(void **)uint64_t v32 = v35[0];
              *(_DWORD *)(v32 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v31;
              *(_DWORD *)(v32 + 12) = HIDWORD(v35[1]);
              *(void *)(v32 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v36;
            }
          }
          else
          {
            if (v29[3])
            {
              unsigned int v33 = 0;
            }
            else
            {
              DgnArray<CWIDAC>::reallocElts(*(void *)a2+ 16* *(unsigned int *)(*(void *)(a1 + 80)+ 24 * *(unsigned int *)(*(void *)(a1 + 128) + 136 * v26 + 120)), 1, 1);
              unsigned int v33 = *v30;
            }
            uint64_t v34 = *(void *)v29 + 24 * v33;
            *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
            *(void *)(v34 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v36;
            ++*v30;
          }
          uint64_t v28 = *(void *)(a1 + 128);
          uint64_t v26 = *(unsigned int *)(v28 + 136 * v26 + 128);
        }
        while (v26 != -2);
        unint64_t v24 = *(unsigned int *)(a1 + 24);
      }
    }
  }
}

uint64_t WordLattice::initializeEndNodeHeap(void *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t v8 = *(unsigned int *)(a1[10] + 24 * *(unsigned int *)(a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * a2) + 120));
  uint64_t result = (uint64_t)MemChunkAlloc(0x48uLL, 0);
  *(_OWORD *)(result + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = 0u;
  *(_OWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  *(void *)(result + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0;
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(void *)uint64_t result = 0x1800000020;
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(result + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(*a4 + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = result;
  uint64_t v10 = *(unsigned int *)(a1[10] + 24 * *(unsigned int *)(a1[2] + 4 * v8) + 16);
  if (v10 != -2)
  {
    uint64_t v11 = a1[16];
    do
    {
      unsigned int v12 = *(_DWORD *)(v11 + 136 * v10 + 112);
      if (v12 != a2)
      {
        uint64_t v13 = *(DgnPool **)(*a4 + 8 * v8);
        WordLattice::extendPath((uint64_t)a1, *(void *)(*a3 + 16 * *(unsigned int *)(a1[10] + 24 * *(unsigned int *)(v11 + 136 * v10 + 116))), v12, 0, (uint64_t)&v14);
        uint64_t result = DgnPriorityQueue<LatticePath>::push(v13, &v14);
        uint64_t v11 = a1[16];
      }
      uint64_t v10 = *(unsigned int *)(v11 + 136 * v10 + 124);
    }
    while (v10 != -2);
  }
  return result;
}

uint64_t DgnPriorityQueue<LatticePath>::push(DgnPool *this, long long *a2)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  if (!v4)
  {
    DgnPool::addChunk(this);
    uint64_t v4 = (void *)*((void *)this + 1);
  }
  *((void *)this + 1) = *v4;
  long long v5 = *a2;
  v4[2] = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;

  return DgnHeap<LatticePath>::insert((uint64_t)this + 56, (uint64_t)v4);
}

double WordLattice::nextBestPath@<D0>(void *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = *a2;
  uint64_t v11 = *(unsigned int *)(a1[10] + 24 * *(unsigned int *)(a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * v10) + 120));
  uint64_t v12 = *a4;
  if (!*(void *)(*a4 + 8 * v11))
  {
    WordLattice::initializeEndNodeHeap(a1, v10, a3, a4);
    uint64_t v12 = *a4;
  }
  uint64_t v40 = a5;
  long long v47 = *(_OWORD *)a2;
  unint64_t v48 = *((void *)a2 + 2);
  unsigned int v14 = v47;
  unsigned int v13 = DWORD1(v47);
  while (1)
  {
    uint64_t v15 = a1[10];
    uint64_t v16 = *(unsigned int *)(v15 + 24 * *(unsigned int *)(a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * v14) + 120));
    uint64_t v17 = *(unsigned int *)(v15 + 24 * *(unsigned int *)(a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * v14) + 116));
    long long v45 = xmmword_2140AAFD0;
    LOWORD(v46) = 127;
    HIDWORD(v46) = 0;
    uint64_t v18 = *a3 + 16 * v17;
    if (v13 + 1 >= *(_DWORD *)(v18 + 8))
    {
      if (*(unsigned char *)(*v40 + v17))
      {
        LODWORD(v25) = 0;
        unsigned int v22 = 0;
        int v20 = -2;
        int v23 = 1879048192;
        int v24 = 127;
        int v21 = -2;
      }
      else
      {
        uint64_t v26 = *(void *)v18 + 24 * v13;
        long long v43 = *(_OWORD *)v26;
        uint64_t v44 = *(void *)(v26 + 16);
        WordLattice::nextBestPath(&v41, a1, &v43, a3, a4);
        int v21 = v41;
        int v20 = DWORD1(v41);
        long long v45 = v41;
        int v23 = DWORD2(v41);
        unsigned int v22 = HIDWORD(v41);
        unint64_t v46 = v42;
        int v24 = (unsigned __int16)v42;
        unint64_t v25 = HIDWORD(v42);
      }
    }
    else
    {
      uint64_t v19 = *(void *)v18 + 24 * (v13 + 1);
      int v21 = *(_DWORD *)v19;
      int v20 = *(_DWORD *)(v19 + 4);
      LODWORD(v45) = *(_DWORD *)v19;
      DWORD1(v45) = v20;
      int v23 = *(_DWORD *)(v19 + 8);
      unsigned int v22 = *(_DWORD *)(v19 + 12);
      *((void *)&v45 + 1) = __PAIR64__(v22, v23);
      unint64_t v46 = *(void *)(v19 + 16);
      int v24 = (unsigned __int16)v46;
      unint64_t v25 = HIDWORD(v46);
    }
    uint64_t v27 = *(void *)(v12 + 8 * v11);
    if (v21 != -2 || v20 != -2 || v23 != 1879048192 || v22 || v24 != 127 || v25)
    {
      WordLattice::extendPath((uint64_t)a1, (uint64_t)&v45, v14, v13 + 1, (uint64_t)&v43);
      DgnPriorityQueue<LatticePath>::push((DgnPool *)v27, &v43);
      uint64_t v27 = *(void *)(v12 + 8 * v11);
    }
    if (*(_DWORD *)(v27 + 64))
    {
      Miuint64_t n = DgnHeap<LatticePath>::extractMin(v27 + 56);
      unsigned int v14 = *(_DWORD *)Min;
      unsigned int v13 = *(_DWORD *)(Min + 4);
      int v30 = *(_DWORD *)(Min + 8);
      unsigned int v29 = *(_DWORD *)(Min + 12);
      unint64_t v31 = *(void *)(Min + 16);
      *(void *)Miuint64_t n = *(void *)(v27 + 8);
      *(void *)(v27 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = Min;
    }
    else
    {
      *(unsigned char *)(*v40 + vDgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = 1;
      DgnDelete<DgnPriorityQueue<LatticePath>>(v27);
      unsigned int v29 = 0;
      *(void *)(v12 + 8 * v11) = 0;
      unint64_t v31 = v39 & 0xFFFF0000 | 0x7FLL;
      unsigned int v13 = -2;
      int v30 = 1879048192;
      unsigned int v14 = -2;
      unsigned int v39 = v39 & 0xFFFF0000 | 0x7F;
    }
    *(void *)&long long v47 = __PAIR64__(v13, v14);
    *((void *)&v47 + 1) = __PAIR64__(v29, v30);
    unint64_t v48 = v31;
    if (v14 == -2 && v13 == -2 && v30 == 1879048192 && !v29 && (unsigned __int16)v31 == 127 && !HIDWORD(v31)) {
      break;
    }
    if ((WordLattice::wordSeqPresent(a1, (LatticePath *)&v47, v11, a3) & 1) == 0)
    {
      uint64_t v32 = *a3 + 16 * v11;
      uint64_t v34 = (unsigned int *)(v32 + 8);
      unsigned int v33 = *(_DWORD *)(v32 + 8);
      if (v33 == *(_DWORD *)(v32 + 12))
      {
        DgnArray<CWIDAC>::reallocElts(*a3 + 16 * v11, 1, 1);
        unsigned int v33 = *v34;
      }
      uint64_t v35 = *(void *)v32 + 24 * v33;
      *(_OWORD *)uint64_t v35 = v47;
      *(void *)(v35 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v48;
      ++*v34;
      break;
    }
  }
  double result = *(double *)&v47;
  *(_OWORD *)a6 = v47;
  *(void *)(a6 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v48;
  return result;
}

uint64_t DgnDelete<DgnPriorityQueue<LatticePath>>(uint64_t result)
{
  if (result)
  {
    DgnPriorityQueue<LatticePath>::~DgnPriorityQueue(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t WordLattice::wordSeqPresent(void *a1, LatticePath *this, unsigned int a3, void *a4)
{
  uint64_t v4 = *(unsigned int *)(*a4 + 16 * a3 + 8);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v6 = (unsigned int *)this;
  uint64_t v8 = 16 * a3;
  uint64_t v19 = v8;
  while (1)
  {
    uint64_t v9 = *(void *)(*a4 + v8);
    if (v6[3] == *(_DWORD *)(v9 + 24 * (v4 - 1) + 12))
    {
      uint64_t v10 = (unsigned int *)(v9 + 24 * (v4 - 1));
      while (!LatticePath::isRootPath((LatticePath *)v6))
      {
        if (LatticePath::isRootPath((LatticePath *)v10)) {
          break;
        }
        uint64_t v13 = a1[12];
        unsigned int v14 = *(_DWORD *)(v13 + 4 * *v6);
        unsigned int v15 = *(_DWORD *)(v13 + 4 * *v10);
        if (!CWIDAC::operator==(a1[16] + 136 * v14 + 88, a1[16] + 136 * v15 + 88)) {
          break;
        }
        uint64_t v16 = a1[16];
        if ((*(_DWORD *)(v16 + 136 * v14 + 88) & 0xFFFFFF) == 0xFFFFFB)
        {
          uint64_t v22 = 0;
          uint64_t v6 = WordLattice::skipToNextPathWithDifferentWord(a1, v6, a4, &v22);
          uint64_t v21 = 0;
          uint64_t v10 = WordLattice::skipToNextPathWithDifferentWord(a1, v10, a4, &v21);
          if (*(_DWORD *)(v22 + 68) != *(_DWORD *)(v21 + 68) || *(_DWORD *)(v22 + 72) != *(_DWORD *)(v21 + 72)) {
            break;
          }
        }
        else
        {
          uint64_t v17 = a1[10];
          uint64_t v6 = (unsigned int *)(*(void *)(*a4
                                          + 16
                                          * *(unsigned int *)(v17 + 24 * *(unsigned int *)(v16 + 136 * v14 + 116)))
                              + 24 * v6[1]);
          uint64_t v10 = (unsigned int *)(*(void *)(*a4
                                           + 16
                                           * *(unsigned int *)(v17 + 24 * *(unsigned int *)(v16 + 136 * v15 + 116)))
                               + 24 * v10[1]);
        }
      }
      BOOL v11 = LatticePath::operator==((uint64_t)v6, (uint64_t)v10);
      uint64_t v8 = v19;
      uint64_t v6 = (unsigned int *)this;
      if (v11) {
        return 1;
      }
    }
    if (v4-- <= 1) {
      return 0;
    }
  }
}

void *WordLattice::getNBestListMaybePrune(uint64_t a1, unsigned int a2, unint64_t a3, void **a4)
{
  v75[0] = 0;
  v75[1] = 0;
  v74[0] = 0;
  v74[1] = 0;
  v73[0] = 0;
  v73[1] = 0;
  WordLattice::makeMinimumSpanningTree(a1, (unsigned int *)v75, (uint64_t)v74, v73);
  uint64_t v7 = *(long long **)(v75[0] + 16 * *(unsigned int *)(*(void *)(a1 + 80) + 24 * **(unsigned int **)(a1 + 48)));
  unint64_t v8 = *(unsigned int *)(a1 + 104);
  if (*((_DWORD *)a4 + 3) >= v8)
  {
    *((_DWORD *)a4 + 2) = v8;
    if (!v8) {
      goto LABEL_5;
    }
  }
  else
  {
    *(void *)&long long v55 = 0;
    int v9 = realloc_array(*a4, (void **)&v55, v8, *((unsigned int *)a4 + 2), *((unsigned int *)a4 + 2), 1);
    *a4 = (void *)v55;
    *((_DWORD *)a4 + 2) = v8;
    *((_DWORD *)a4 + 3) = v9;
  }
  bzero(*a4, v8);
LABEL_5:
  long long v71 = *v7;
  unint64_t v10 = *((void *)v7 + 2);
  unint64_t v72 = v10;
  if (a2 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a2;
  }
  unsigned __int32 v12 = v71;
  unsigned __int32 v13 = DWORD1(v71);
  int v14 = DWORD2(v71);
  BOOL v15 = HIDWORD(v71) == 0;
  if (v71 != -2
    || *(void *)((char *)&v71 + 4) != 0x70000000FFFFFFFELL
    || HIDWORD(v71)
    || ((unsigned __int16)v10 == 127 ? (BOOL v16 = HIDWORD(v72) == 0) : (BOOL v16 = 0), !v16))
  {
    int v17 = 0;
    int v49 = v11 - 1;
    do
    {
      int v51 = v17;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      int32x4_t v66 = 0uLL;
      int v68 = 0;
      int32x2_t v67 = 0;
      if (v12 != -1
        || v13 != -1
        || v14
        || !v15
        || ((unsigned __int16)v72 == 127 ? (BOOL v18 = HIDWORD(v72) == 0) : (BOOL v18 = 0), !v18))
      {
        uint64_t v19 = 0;
        unsigned int v20 = 0;
        do
        {
          *((unsigned char *)*a4 + v12) = 1;
          unsigned int v21 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * v12);
          uint64_t v22 = *(void *)(a1 + 128);
          if (v20 == HIDWORD(v70))
          {
            DgnArray<WordLatticeLC>::reallocElts((uint64_t)&v69, 1, 1);
            unsigned int v20 = v70;
            uint64_t v19 = v69;
          }
          int v23 = (const WordLatticeLC *)(v22 + 136 * v21);
          WordLatticeLC::WordLatticeLC((WordLatticeLC *)(v19 + 112 * v20), v23);
          LODWORD(v7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v70 + 1;
          uint64_t v24 = *(void *)(a1 + 128);
          uint64_t v25 = *(void *)(v75[0]
                          + 16
                          * *(unsigned int *)(*(void *)(a1 + 80) + 24 * *(unsigned int *)(v24 + 136 * v21 + 116)))
              + 24 * v13;
          int32x4_t v26 = *(int32x4_t *)v25;
          uint64_t v27 = *(void *)(v25 + 16);
          int v29 = *((_DWORD *)v23 + 22);
          uint64_t v28 = (uint64_t)v23 + 88;
          if ((v29 & 0xFFFFFF) == 0xFFFFFB)
          {
            uint64_t v30 = v24 + 136 * *(unsigned int *)(*(void *)(a1 + 96) + 4 * v26.u32[0]);
            int32x4_t v52 = *(int32x4_t *)v25;
            if (CWIDAC::operator==(v30 + 88, v28))
            {
              int32x2_t v31 = vrev64_s32(*(int32x2_t *)v52.i8);
              do
              {
                unsigned __int32 v53 = v31.i32[0];
                unsigned __int32 v32 = v31.u32[1];
                *((unsigned char *)*a4 + v31.u32[1]) = 1;
                ItemizedScores::operator+=(v69 + 112 * (v70 - 1) + 28, v30 + 28);
                int v33 = *(_DWORD *)(v30 + 24) + *(_DWORD *)(v30 + 20);
                uint64_t v34 = v69 + 112 * (v70 - 1);
                int v35 = *(_DWORD *)(v34 + 16) - v33;
                int v36 = *(_DWORD *)(v34 + 20) + v33;
                *(_DWORD *)(v34 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v35;
                *(_DWORD *)(v34 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v36;
                *(void *)(v34 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(void *)(v30 + 68);
                uint64_t v37 = *(void *)(a1 + 96);
                uint64_t v38 = *(void *)(a1 + 128);
                uint64_t v39 = *(void *)(v75[0]
                                + 16
                                * *(unsigned int *)(*(void *)(a1 + 80)
                                                  + 24
                                                  * *(unsigned int *)(v38
                                                                    + 136 * *(unsigned int *)(v37 + 4 * v32)
                                                                    + 116)))
                    + 24 * v53;
                int32x4_t v54 = *(int32x4_t *)v39;
                uint64_t v27 = *(void *)(v39 + 16);
                uint64_t v30 = v38 + 136 * *(unsigned int *)(v37 + 4 * *(_OWORD *)v39);
                BOOL v40 = CWIDAC::operator==(v30 + 88, v28);
                int32x4_t v26 = v54;
                int32x2_t v31 = vrev64_s32(*(int32x2_t *)v54.i8);
              }
              while (v40);
            }
            else
            {
              int32x4_t v26 = v52;
            }
          }
          unsigned int v20 = v70;
          uint64_t v19 = v69;
          uint64_t v41 = v69 + 112 * (v70 - 1);
          int32x4_t v66 = vaddq_s32(v66, *(int32x4_t *)(v41 + 28));
          int32x2_t v67 = vadd_s32(v67, *(int32x2_t *)(v41 + 44));
          v68 += *(_DWORD *)(v41 + 52);
          unsigned __int32 v12 = v26.i32[0];
          unsigned __int32 v13 = v26.u32[1];
        }
        while ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v26, (int32x4_t)xmmword_214085BE0)))) & 1) != 0|| (v27 & 0xFFFFFFFF0000FFFFLL) != 0x7F);
        if (v70 >= 2)
        {
          uint64_t v42 = 112 * ((v70 - 1) >> 1) + 112;
          unint64_t v43 = ((unint64_t)v70 >> 1) + 1;
          do
          {
            WordLatticeLC::WordLatticeLC((WordLatticeLC *)&v55, (const WordLatticeLC *)(v19 + 112 * (v43 - 2)));
            uint64_t v44 = v69 + v42;
            uint64_t v45 = v69 + 112 * (v43 - 2);
            BaseWordLatticeLC::operator=(v45, v69 + v42);
            *(_DWORD *)(v45 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v44 + 88);
            *(_DWORD *)(v45 + 92) = *(_DWORD *)(v44 + 92);
            *(_OWORD *)(v45 + 96) = *(_OWORD *)(v44 + 96);
            uint64_t v19 = v69;
            uint64_t v46 = v69 + v42;
            *(void *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((void *)&v55 + 1);
            *(_OWORD *)(v46 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v56;
            *(_OWORD *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v57;
            *(_OWORD *)(v46 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v58;
            *(void *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v59;
            *(_DWORD *)(v46 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = v60;
            *(void *)(v46 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v61;
            *(_DWORD *)(v46 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v62;
            *(_WORD *)(v46 + 92) = v63;
            *(_WORD *)(v46 + 94) = v64;
            *(_OWORD *)(v46 + 96) = v65;
            v42 += 112;
            --v43;
          }
          while (v43 > 1);
        }
      }
      if (a3)
      {
        long long v47 = MemChunkAlloc(0x40uLL, 0);
        NBestChoice::NBestChoice(v47, &v69, &v66);
        ParamSpecMgr::addParam(a3, (ParamSpec *)v47);
      }
      DgnArray<WordLatticeLC>::releaseAll((uint64_t)&v69);
      if (v51 == v49) {
        break;
      }
      WordLattice::nextBestPath((void *)a1, (unsigned int *)&v71, v75, v74, v73, (uint64_t)&v55);
      int v17 = v51 + 1;
      unsigned __int32 v12 = v55;
      unsigned __int32 v13 = DWORD1(v55);
      long long v71 = v55;
      int v14 = DWORD2(v55);
      unint64_t v72 = v56;
      BOOL v15 = HIDWORD(v55) == 0;
    }
    while (v55 != -2
         || *(void *)((char *)&v55 + 4) != 0x70000000FFFFFFFELL
         || HIDWORD(v55)
         || (unsigned __int16)v56 != 127
         || DWORD1(v56));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
  DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::releaseAll((uint64_t)v74);
  return DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)v75);
}

void sub_214045158(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 136);
  DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::releaseAll(v1 - 120);
  DgnArray<DgnArray<ParseToken>>::releaseAll(v1 - 104);
  _Unwind_Resume(a1);
}

int32x2_t ItemizedScores::operator+=(uint64_t a1, uint64_t a2)
{
  *(int32x4_t *)a1 = vaddq_s32(*(int32x4_t *)a1, *(int32x4_t *)a2);
  int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 16), *(int32x2_t *)(a2 + 16));
  *(int32x2_t *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = result;
  *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t WordLattice::maybePruneToNumUniquePaths(uint64_t this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    long long v5 = 0;
    uint64_t v6 = 0;
    WordLattice::getNBestListMaybePrune(this, a2, 0, (void **)&v5);
    if ((int)v6 >= 1)
    {
      unint64_t v3 = v6 + 1;
      do
      {
        uint64_t v4 = (v3 - 2);
        if (!v5[v4])
        {
          Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, *(_DWORD *)(*(void *)(v2 + 96) + 4 * v4));
          *(unsigned char *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
        }
        --v3;
      }
      while (v3 > 1);
    }
    Lattice<WordLatticeLC>::minimize(v2);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v5);
  }
  return this;
}

void sub_214045274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *WordLattice::getNBestList(WordLattice *this, unsigned int a2)
{
  uint64_t v4 = MemChunkAlloc(0x20uLL, 0);
  uint64_t v5 = *(void *)((char *)this + 196);
  uint64_t *v4 = 0;
  v4[1] = 0;
  v4[2] = v5;
  v4[3] = 0;
  v7[0] = 0;
  v7[1] = 0;
  WordLattice::getNBestListMaybePrune((uint64_t)this, a2, (unint64_t)v4, v7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v7);
  return v4;
}

void sub_214045304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned int *WordLattice::skipToNextPathWithDifferentWord(void *a1, unsigned int *a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[16] + 136 * *(unsigned int *)(a1[12] + 4 * *a2);
  uint64_t v9 = v8 + 88;
  do
  {
    uint64_t v10 = a1[12];
    uint64_t v11 = v8;
    uint64_t v12 = a1[16];
    uint64_t v6 = (unsigned int *)(*(void *)(*a3
                                    + 16
                                    * *(unsigned int *)(a1[10]
                                                      + 24
                                                      * *(unsigned int *)(v12
                                                                        + 136 * *(unsigned int *)(v10 + 4 * *v6)
                                                                        + 116)))
                        + 24 * v6[1]);
    uint64_t v8 = v12 + 136 * *(unsigned int *)(v10 + 4 * *v6);
  }
  while (CWIDAC::operator==(v8 + 88, v9) && !LatticePath::isRootPath((LatticePath *)v6));
  *a4 = v11;
  return v6;
}

uint64_t WordLattice::getLatticeStats(uint64_t this, unsigned int *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5)
{
  int v5 = *(_DWORD *)(this + 24);
  if (v5)
  {
    uint64_t v6 = *(unsigned int **)(this + 16);
    uint64_t v7 = *(void *)(this + 80);
    uint64_t v8 = *(unsigned int *)(this + 24);
    do
    {
      unsigned int v9 = *v6++;
      uint64_t v10 = v7 + 24 * v9;
      int v11 = *(_DWORD *)(v10 + 8);
      LODWORD(v1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_DWORD *)(v10 + 12);
      *a4 += (v11 * v11);
      *a5 += (v10 * v10);
      --v8;
    }
    while (v8);
  }
  *a2 += v5;
  *a3 += *(_DWORD *)(this + 104);
  return this;
}

uint64_t WordLattice::resortLatticeLinks(WordLattice *this)
{
  ForwardLatticeNodeIterator<WordLatticeLC>::ForwardLatticeNodeIterator((uint64_t)&v3, (uint64_t)this);
  while (v7)
  {
    Lattice<WordLatticeLC>::resortLinks((uint64_t)this, *(_DWORD *)(*(void *)(v3 + 16) + 4 * *(unsigned int *)(v5 + 4 * v6)));
    ForwardLatticeNodeIterator<WordLatticeLC>::next(&v3);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v5);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v4);
}

void sub_2140454DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::resortLinks(uint64_t result, unsigned int a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 80);
  unsigned int v5 = *(_DWORD *)(v3 + 24 * a2 + 12);
  if (v5 >= 2)
  {
    unsigned int v6 = (void *)(result + 144);
    unsigned int v7 = *(_DWORD *)(result + 156);
    if (v5 > v7)
    {
      DgnPrimArray<unsigned int>::reallocElts(result + 144, v5 - v7, 0);
      uint64_t v3 = *(void *)(v2 + 80);
    }
    *(_DWORD *)(v2 + 152) = 0;
    uint64_t v8 = *(unsigned int *)(v3 + 24 * a2 + 20);
    if (v8 != -2)
    {
      unsigned int v9 = 0;
      uint64_t v10 = *(void *)(v2 + 144);
      uint64_t v11 = *(void *)(v2 + 128);
      do
      {
        *(_DWORD *)(v10 + 4 * v9) = v8;
        unsigned int v9 = *(_DWORD *)(v2 + 152) + 1;
        *(_DWORD *)(v2 + 152) = v9;
        uint64_t v8 = *(unsigned int *)(v11 + 136 * v8 + 128);
      }
      while (v8 != -2);
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v2 + 8))(v2, v2 + 144);
    uint64_t v12 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v13 = v5 - 1;
    do
    {
      int v14 = (unsigned int *)(*(void *)(v2 + 144) + 4 * v12);
      *(_DWORD *)(*(void *)(v2 + 128) + 136 * *v14 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14[1];
      if (!Lattice<WordLatticeLC>::cmpOutLink(v2, *v14, (const WordLatticeLC *)v14[1]))
      {
        int v15 = *(_DWORD *)(*v6 + 4 * v12 + 4);
        uint64_t v16 = v33;
        if (v33 == (unint64_t)HIDWORD(v33))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
          uint64_t v16 = v33;
        }
        *(_DWORD *)(v32 + 4 * vDgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v15;
        LODWORD(v33) = v33 + 1;
      }
      ++v12;
    }
    while (v13 != v12);
    int v17 = *(_DWORD **)(v2 + 144);
    *(_DWORD *)(*(void *)(v2 + 128) + 136 * v17[v13] + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -2;
    *(_DWORD *)(*(void *)(v2 + 80) + 24 * a2 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *v17;
    while (v33)
    {
      unsigned int v18 = *(_DWORD *)(v32 + 4 * (v33 - 1));
      LODWORD(v33) = v33 - 1;
      Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, v18);
    }
    int32x2_t result = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
    uint64_t v3 = *(void *)(v2 + 80);
  }
  unsigned int v19 = *(_DWORD *)(v3 + 24 * a2 + 8);
  if (v19 >= 2)
  {
    unsigned int v20 = *(_DWORD *)(v2 + 156);
    if (v19 > v20)
    {
      DgnPrimArray<unsigned int>::reallocElts(v2 + 144, v19 - v20, 0);
      uint64_t v3 = *(void *)(v2 + 80);
    }
    *(_DWORD *)(v2 + 152) = 0;
    uint64_t v21 = *(unsigned int *)(v3 + 24 * a2 + 16);
    if (v21 != -2)
    {
      unsigned int v22 = 0;
      uint64_t v23 = *(void *)(v2 + 144);
      uint64_t v24 = *(void *)(v2 + 128);
      do
      {
        *(_DWORD *)(v23 + 4 * v22) = v21;
        unsigned int v22 = *(_DWORD *)(v2 + 152) + 1;
        *(_DWORD *)(v2 + 152) = v22;
        uint64_t v21 = *(unsigned int *)(v24 + 136 * v21 + 124);
      }
      while (v21 != -2);
    }
    (**(void (***)(unint64_t, uint64_t))v2)(v2, v2 + 144);
    uint64_t v25 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v26 = v19 - 1;
    do
    {
      uint64_t v27 = (unsigned int *)(*(void *)(v2 + 144) + 4 * v25);
      *(_DWORD *)(*(void *)(v2 + 128) + 136 * *v27 + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = v27[1];
      if (!Lattice<WordLatticeLC>::cmpInLink(v2, *v27, (const WordLatticeLC *)v27[1]))
      {
        int v28 = *(_DWORD *)(*(void *)(v2 + 144) + 4 * v25 + 4);
        uint64_t v29 = v33;
        if (v33 == (unint64_t)HIDWORD(v33))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
          uint64_t v29 = v33;
        }
        *(_DWORD *)(v32 + 4 * v29) = v28;
        LODWORD(v33) = v33 + 1;
      }
      ++v25;
    }
    while (v26 != v25);
    uint64_t v30 = *(_DWORD **)(v2 + 144);
    *(_DWORD *)(*(void *)(v2 + 128) + 136 * v30[v26] + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = -2;
    *(_DWORD *)(*(void *)(v2 + 80) + 24 * a2 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = *v30;
    while (v33)
    {
      unsigned int v31 = *(_DWORD *)(v32 + 4 * (v33 - 1));
      LODWORD(v33) = v33 - 1;
      Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, v31);
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  }
  return result;
}

void sub_214045858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WordLattice::addSegmentations(WordLattice *this, const Active *a2, const PhnMgr *a3, const PicMgr *a4)
{
  MrecInitModule_sdpres_sdapi();
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v59, 0, 128);
  v60[2] = this;
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v57, 0, 128);
  v58[2] = (char *)this + 256;
  __int16 v7 = *((_WORD *)a3 + 28);
  long long v55 = 0;
  uint64_t v56 = 0;
  unsigned __int32 v53 = 0;
  uint64_t v54 = 0;
  if (!*((_DWORD *)this + 26)) {
    goto LABEL_59;
  }
  unint64_t v8 = 0;
  uint64_t v9 = *((void *)this + 16);
  __int16 v46 = v7;
  do
  {
    unsigned int v10 = *(_DWORD *)(*((void *)this + 12) + 4 * v8);
    uint64_t v11 = v9 + 136 * v10;
    unsigned int v13 = *(_DWORD *)(v11 + 88);
    uint64_t v12 = v11 + 88;
    int v14 = *(_DWORD *)(v12 - 72);
    int v15 = *(_DWORD *)(v12 - 68);
    int v16 = *(_DWORD *)(v12 - 64);
    if (v13 >> 25 == 126)
    {
      int v17 = (char *)v55;
      if (HIDWORD(v56))
      {
        if (v56)
        {
LABEL_6:
          LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 1;
          *(void *)(v17 + 12) = 0;
          *(_WORD *)int v17 = v7;
          *((_WORD *)v17 + 1) = v7;
          *((_WORD *)v17 + 2) = 0;
          *((_WORD *)v17 + 3) = v7;
          *((_WORD *)v17 + 4) = v7;
          *((_WORD *)v17 + 5) = 0;
          unsigned int v18 = v55;
          *((_DWORD *)v55 + 5) = v14;
          v18[6] = v16 + v15;
          uint64_t v19 = WordLattice::findOrAddLinkSegId((uint64_t)this, (uint64_t)&v55, (uint64_t)v59);
LABEL_14:
          unint64_t v23 = v19 | 0x8000000000000000;
          goto LABEL_15;
        }
      }
      else
      {
        int v51 = 0;
        HIDWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = realloc_array(v55, &v51, 0x1CuLL, 28 * v56, 28 * v56, 1) / 0x1C;
        int v17 = (char *)v51;
        long long v55 = v51;
        if (v56) {
          goto LABEL_6;
        }
      }
      *((_DWORD *)v17 + 2) = 0xFFFF;
      *(void *)int v17 = -1;
      *((_DWORD *)v17 + 5) = -16;
      int v17 = (char *)v55;
      goto LABEL_6;
    }
    Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket((uint64_t)a2 + 303024, v12);
    int v48 = v14;
    if (*Bucket) {
      uint64_t v21 = *(ActiveWord **)(*Bucket + 40);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = *((void *)this + 16);
    if (*(_DWORD *)(v22 + 136 * v10 + 24))
    {
      getPortSegments((uint64_t)v21, **(void **)(*((void *)v21 + 1) + 72), (uint64_t)&v55, v14, v15, v16, (uint64_t)a4);
      uint64_t v19 = WordLattice::findOrAddLinkSegId((uint64_t)this, (uint64_t)&v55, (uint64_t)v59);
      goto LABEL_14;
    }
    LODWORD(v54) = 0;
    int v51 = 0;
    uint64_t v52 = 0;
    uint64_t v24 = *(unsigned int *)(*((void *)this + 10) + 24 * *(unsigned int *)(v22 + 136 * v10 + 120) + 20);
    if (v24 == -2)
    {
      int v49 = 0;
      uint64_t v50 = 0;
      goto LABEL_55;
    }
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = (void **)VocMgr::smpVocMgr;
    do
    {
      unint64_t v28 = *(unsigned int *)(v22 + 136 * v24 + 88);
      if (v28 >> 25 == 126)
      {
        int v29 = 0;
        if (!v26) {
          goto LABEL_29;
        }
      }
      else
      {
        int v29 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**v27 + ((v28 >> 22) & 0x3F8)) + 48) + 592)
                                  + 2 * (v28 & 0xFFFFFF));
        if (!v26) {
          goto LABEL_29;
        }
      }
      uint64_t v30 = 0;
      while ((unsigned __int16)v25[v30] != v29)
      {
        if (v26 == ++v30) {
          goto LABEL_29;
        }
      }
      if (v30 == 0xFFFFFFFFLL)
      {
LABEL_29:
        if (v26 == HIDWORD(v52))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v51, 1, 1);
          int v26 = v52;
          uint64_t v25 = v51;
          uint64_t v22 = *((void *)this + 16);
        }
        v25[v26++] = v29;
        LODWORD(v52) = v26;
      }
      uint64_t v24 = *(unsigned int *)(v22 + 136 * v24 + 128);
    }
    while (v24 != -2);
    int v49 = 0;
    uint64_t v50 = 0;
    if (v26)
    {
      unint64_t v31 = 0;
      do
      {
        uint64_t NonSilOutPort = ActiveWord::maybeGetNonSilOutPort(v21, *((unsigned __int16 *)v51 + v31));
        uint64_t v33 = NonSilOutPort;
        if (NonSilOutPort)
        {
          int v34 = v50;
          if (!v50) {
            goto LABEL_42;
          }
          int v35 = v49;
          uint64_t v36 = v50;
          uint64_t v37 = 0xFFFFFFFFLL;
          while (*v35 != NonSilOutPort)
          {
            --v37;
            ++v35;
            if (!--v36) {
              goto LABEL_42;
            }
          }
          if (!v37)
          {
LABEL_42:
            if (v50 == HIDWORD(v50))
            {
              DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v49, 1, 1);
              int v34 = v50;
            }
            v49[v34] = v33;
            LODWORD(v5MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v34 + 1;
            if ((*(unsigned int (**)(void, uint64_t, void))(**((void **)v21 + 1) + 48))(*((void *)v21 + 1), v33, (v16 + v15 + v48 - 1)))
            {
              getPortSegments((uint64_t)v21, v33, (uint64_t)&v55, v48, v15, v16, (uint64_t)a4);
              uint64_t v38 = WordLattice::findOrAddLinkSegId((uint64_t)this, (uint64_t)&v55, (uint64_t)v59);
              uint64_t v39 = v38;
              int v40 = v54;
              if (!v54) {
                goto LABEL_51;
              }
              uint64_t v41 = v53;
              uint64_t v42 = v54;
              uint64_t v43 = 0xFFFFFFFFLL;
              while (1)
              {
                uint64_t v44 = *v41++;
                if (v44 == v38) {
                  break;
                }
                --v43;
                if (!--v42) {
                  goto LABEL_51;
                }
              }
              if (!v43)
              {
LABEL_51:
                if (v54 == HIDWORD(v54))
                {
                  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v53, 1, 1);
                  int v40 = v54;
                }
                v53[v40] = v39;
                LODWORD(v54) = v40 + 1;
              }
            }
          }
        }
        ++v31;
      }
      while (v31 < v52);
    }
LABEL_55:
    if (v54 == 1)
    {
      unint64_t v23 = *v53 | 0x8000000000000000;
      __int16 v7 = v46;
    }
    else
    {
      __int16 v7 = v46;
      unint64_t v23 = LinkSegIds::findOrAddLinkSegSeqIdFromLinkSegIds((uint64_t)this + 256, (uint64_t)&v53, (uint64_t)v57);
    }
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v49);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
LABEL_15:
    uint64_t v9 = *((void *)this + 16);
    *(void *)(v9 + 136 * v10 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v23;
    ++v8;
  }
  while (v8 < *((unsigned int *)this + 26));
LABEL_59:
  *((unsigned char *)this + 22MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 1;
  WordLattice::resortLatticeLinks(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v55);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v58);
  MrecInitModule_sdpres_sdapi();
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v60);
  return MrecInitModule_sdpres_sdapi();
}

void sub_214045DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  MrecInitModule_sdpres_sdapi();
  DgnPrimArray<unsigned int>::~DgnPrimArray(v10 - 112);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void *getPortSegments(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if ((*(unsigned int (**)(void, uint64_t, void, uint64_t *))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), a2, (a4 - 1 + a5 + a6), &v25) == a4 - 1)
  {
    __int16 v9 = *(_WORD *)(**(void **)(*(void *)(a1 + 16) + 302976) + 56);
    uint64_t v10 = v26;
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    unsigned int v11 = *(_DWORD *)(a3 + 12);
    if ((int)v10 + 1 > v11) {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a3, v10 + 1 - v11, 0);
    }
    if (v10)
    {
      int v12 = 0;
      int v13 = 0;
      uint64_t v14 = (v10 - 1);
      do
      {
        uint64_t v15 = *(void *)(v25 + 8 * v14);
        uint64_t v16 = *(void *)a3 + 28 * *(unsigned int *)(a3 + 8);
        *(void *)uint64_t v16 = -1;
        *(_DWORD *)(v16 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0xFFFF;
        *(_DWORD *)(v16 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = -16;
        unsigned int v17 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v17 + 1;
        uint64_t v18 = *(void *)a3;
        uint64_t v19 = *(void *)a3 + 28 * v17;
        *(_DWORD *)(v19 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_DWORD *)v15;
        *(_DWORD *)(v19 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = *(_DWORD *)(v15 + 8);
        LODWORD(vDgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = *(unsigned __int16 *)(v15 + 4);
        *(_WORD *)(v19 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v16;
        *(_DWORD *)(v19 + 12) = *(_DWORD *)(v15 + 12);
        uint64_t v20 = *(unsigned __int16 *)(v15 + 20);
        *(_WORD *)uint64_t v19 = v9;
        *(_WORD *)(v19 + 2) = v9;
        *(_WORD *)(v19 + 4) = v20;
        *(_WORD *)(v19 + 6) = v9;
        *(_WORD *)(v19 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
        *(_WORD *)(v19 + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
        if (v16) {
          unsigned __int16 v21 = PicMgr::getPicNode(a7, v12, (unsigned __int16 *)v19)[1];
        }
        else {
          unsigned __int16 v21 = 0;
        }
        *(_WORD *)(v18 + 28 * v17 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
        if (!v13) {
          int v13 = *(unsigned __int8 *)(*(void *)(a7 + 16) + v20);
        }
        if (v14) {
          BOOL v22 = v12 + 1 == v13;
        }
        else {
          BOOL v22 = 1;
        }
        if (v22)
        {
          int v13 = 0;
          int v12 = 0;
        }
        else
        {
          ++v12;
        }
        --v14;
        --v10;
      }
      while (v10);
    }
  }
  DgnIOwnArray<PelSegment *>::releaseAll((uint64_t)&v25);
  return DgnIOwnArray<PelSegment *>::releaseAll((uint64_t)&v25);
}

void sub_214046008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnIOwnArray<PelSegment *>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

void BackwardLatticeNodeIterator<WordLatticeLC>::next(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  unsigned int v3 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::dequeue((uint64_t)(a1 + 3));
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*(void *)(*a1 + 80) + 24 * *(unsigned int *)(*(void *)(*a1 + 16) + 4 * v3) + 16);
  if (v5 != -2)
  {
    uint64_t v6 = *(void *)(v4 + 128);
    do
    {
      uint64_t v7 = *(unsigned int *)(*(void *)(v4 + 80) + 24 * *(unsigned int *)(v6 + 136 * v5 + 116));
      uint64_t v8 = a1[1];
      int v9 = *(_DWORD *)(v8 + 4 * v7) - 1;
      *(_DWORD *)(v8 + 4 * v7) = v9;
      if (!v9)
      {
        DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v2, v7);
        uint64_t v4 = *a1;
        uint64_t v6 = *(void *)(*a1 + 128);
      }
      uint64_t v5 = *(unsigned int *)(v6 + 136 * v5 + 124);
    }
    while (v5 != -2);
  }
}

uint64_t WordLattice::computeBackwardScores(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 24);
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v4 > v5)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v4 - v5, 0);
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4;
    uint64_t v6 = (unsigned int *)(a2 + 8);
    goto LABEL_4;
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4;
  uint64_t v6 = (unsigned int *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)a2;
    do
      *(_DWORD *)(v8 + 4 * v7++) = 1879048192;
    while (v7 < *v6);
  }
  BackwardLatticeNodeIterator<WordLatticeLC>::BackwardLatticeNodeIterator((uint64_t)&v20, a1);
  while (v24)
  {
    unsigned int v9 = *(_DWORD *)(*(void *)(v20 + 16) + 4 * *(unsigned int *)(v22 + 4 * v23));
    uint64_t v10 = *(void *)(a1 + 80);
    unsigned int v11 = (unsigned int *)(v10 + 24 * v9);
    uint64_t v12 = *v11;
    if (v11[3])
    {
      uint64_t v13 = *(unsigned int *)(v10 + 24 * v9 + 20);
      if (v13 != -2)
      {
        uint64_t v14 = *(void *)(a1 + 128);
        uint64_t v15 = *(void *)a2;
        int v16 = *(_DWORD *)(*(void *)a2 + 4 * v12);
        do
        {
          uint64_t v17 = v14 + 136 * v13;
          int v18 = vaddvq_s32(*(int32x4_t *)(v17 + 28))
              + *(_DWORD *)(v17 + 44)
              + *(_DWORD *)(v17 + 48)
              + *(_DWORD *)(v17 + 52)
              + *(_DWORD *)(v15 + 4 * *(unsigned int *)(v10 + 24 * *(unsigned int *)(v17 + 120)));
          if (v16 > v18)
          {
            *(_DWORD *)(v15 + 4 * v12) = v18;
            int v16 = v18;
          }
          uint64_t v13 = *(unsigned int *)(v14 + 136 * v13 + 128);
        }
        while (v13 != -2);
      }
    }
    else
    {
      *(_DWORD *)(*(void *)a2 + 4 * v12) = 0;
    }
    BackwardLatticeNodeIterator<WordLatticeLC>::next(&v20);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v21);
  return *(unsigned int *)(*(void *)a2
                         + 4 * *(unsigned int *)(*(void *)(a1 + 80) + 24 * **(unsigned int **)(a1 + 32)));
}

void sub_214046284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::expandLMContext(WordLattice *a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  v26[0] = 0;
  v26[1] = 0;
  if (a2 >= 2)
  {
    int v7 = 0;
    unsigned int v11 = (_DWORD *)(a5 + 208);
    unsigned int v23 = (void *)(a5 + 216);
    int v24 = (_DWORD *)(a5 + 204);
    uint64_t v12 = (void *)(a5 + 224);
    uint64_t v13 = (void *)(a5 + 232);
    uint64_t v14 = (void *)(a5 + 240);
    int v15 = 2;
    while (1)
    {
      NodesToSplitForExpansiouint64_t n = WordLattice::getNodesToSplitForExpansion(a1, (uint64_t)v26, v15, a3, v24, v11);
      if (a4 >= 1 && NodesToSplitForExpansion + v7 >= a4) {
        break;
      }
      int v17 = WordLattice::splitNodes((uint64_t *)a1, (uint64_t)v26, v23, v12, v13, v14);
      Lattice<WordLatticeLC>::gc(a1);
      Lattice<WordLatticeLC>::topSortInternal((uint64_t)a1, 0);
      v7 += v17;
      if (++v15 > a2) {
        goto LABEL_7;
      }
    }
    *(_DWORD *)(a5 + 200) += v7;
    uint64_t v18 = 1;
    *a6 = 1;
    *a7 = NodesToSplitForExpansion + v7;
  }
  else
  {
    int v7 = 0;
LABEL_7:
    uint64_t v18 = 0;
    *(_DWORD *)(a5 + 200) += v7;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v26);
  return v18;
}

void sub_2140463F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::getNodesToSplitForExpansion(WordLattice *a1, uint64_t a2, int a3, unsigned int a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  v26[0] = 0;
  v26[1] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24[0] = 0;
  v24[1] = 0;
  v23[0] = 0;
  v23[1] = 0;
  BackwardLatticeNodeIterator<WordLatticeLC>::BackwardLatticeNodeIterator((uint64_t)&v18, (uint64_t)a1);
  uint64_t v12 = 0;
  while (v22)
  {
    unsigned int v13 = *(_DWORD *)(*(void *)(v18 + 16) + 4 * *(unsigned int *)(v20 + 4 * v21));
    uint64_t v14 = *((void *)a1 + 10);
    if (*(_DWORD *)(v14 + 24 * v13 + 8) >= 2u && *(_DWORD *)(v14 + 24 * v13 + 12))
    {
      if (a3 == 2
         ? WordLattice::needToSplitNodeForBigramExpansion(a1, *(_DWORD *)(*(void *)(v18 + 16) + 4 * *(unsigned int *)(v20 + 4 * v21)), a4): WordLattice::needToSplitNodeForExpansion((uint64_t)a1, v13, a3, a4, (uint64_t)v26, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23, a5, a6))
      {
        uint64_t v16 = *(unsigned int *)(a2 + 8);
        if (v16 == *(_DWORD *)(a2 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
          uint64_t v16 = *(unsigned int *)(a2 + 8);
        }
        *(_DWORD *)(*(void *)a2 + 4 * vDgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v13;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v12 = (*(_DWORD *)(*((void *)a1 + 10) + 24 * v13 + 8) + v12);
      }
    }
    BackwardLatticeNodeIterator<WordLatticeLC>::next(&v18);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v26);
  return v12;
}

void sub_2140465A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 96);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::splitNodes(uint64_t *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  if (!*(_DWORD *)(a2 + 8)) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v23 = a2;
  do
  {
    uint64_t v11 = (const WordLatticeLC *)*(unsigned int *)(a1[10] + 24 * *(unsigned int *)(*(void *)a2 + 4 * v9) + 16);
    uint64_t v24 = v9;
    unsigned int v27 = *(_DWORD *)(*(void *)a2 + 4 * v9);
    if (v11 != -2)
    {
      do
      {
        uint64_t v12 = (const WordLatticeLC *)*(unsigned int *)(a1[16] + 136 * v11 + 124);
        int Node = (const WordLatticeLC *)Lattice<WordLatticeLC>::createNode((uint64_t)a1);
        uint64_t v10 = (v10 + 1);
        uint64_t v14 = a5;
        uint64_t v15 = a6;
        unsigned int v16 = *(_DWORD *)(a1[16] + 136 * v11 + 116);
        uint64_t v17 = a1[10];
        *a3 += *(unsigned int *)(v17 + 24 * v27 + 8);
        *a4 += *(unsigned int *)(v17 + 24 * v16 + 12);
        Lattice<WordLatticeLC>::disconnectInLink((unint64_t)a1, v11);
        Lattice<WordLatticeLC>::disconnectOutLink((unint64_t)a1, v11);
        uint64_t v18 = a1[16] + 136 * v11;
        *(_DWORD *)(v18 + 1DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v16;
        *(_DWORD *)(v18 + 12MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = Node;
        a6 = v15;
        a5 = v14;
        Lattice<WordLatticeLC>::connectInLink(a1, v11);
        Lattice<WordLatticeLC>::connectOutLink(a1, v11);
        Lattice<WordLatticeLC>::copyOutLinks((uint64_t)a1, v27, Node);
        uint64_t v19 = a1[10] + 24 * Node;
        uint64_t v21 = *(unsigned int *)(v19 + 8);
        uint64_t v20 = *(unsigned int *)(v19 + 12);
        *v14 += v21;
        *a6 += v20;
        uint64_t v11 = v12;
      }
      while (v12 != -2);
    }
    Lattice<WordLatticeLC>::destroyAllLinks((unint64_t)a1, v27);
    Lattice<WordLatticeLC>::destroyNode((unint64_t)a1, v27);
    a2 = v23;
    uint64_t v9 = v24 + 1;
  }
  while (v24 + 1 < (unint64_t)*(unsigned int *)(v23 + 8));
  return v10;
}

uint64_t WordLattice::needToSplitNodeForBigramExpansion(WordLattice *this, unsigned int a2, int a3)
{
  uint64_t v3 = *((void *)this + 10);
  if (*(_DWORD *)(v3 + 24 * a2 + 8))
  {
    uint64_t v4 = *(unsigned int *)(v3 + 24 * a2 + 16);
    if (v4 != -2)
    {
      int v7 = (VocMgr *)VocMgr::smpVocMgr;
      uint64_t v8 = *((void *)this + 16);
      int v9 = -83886084;
      int v10 = -83886084;
      do
      {
        int Root = VocMgr::getRoot(v7, *(unsigned int *)(v8 + 136 * v4 + 88));
        uint64_t v8 = *((void *)this + 16);
        if (Root == -50331650) {
          int v12 = a3;
        }
        else {
          int v12 = Root;
        }
        if (v10 == -83886084)
        {
          int v10 = v12;
          int v9 = *(_DWORD *)(v8 + 136 * v4 + 108);
        }
        else if (v10 != v12 || v9 != *(_DWORD *)(v8 + 136 * v4 + 108))
        {
          return 1;
        }
        uint64_t v4 = *(unsigned int *)(v8 + 136 * v4 + 124);
      }
      while (v4 != -2);
    }
  }
  return 0;
}

uint64_t WordLattice::needToSplitNodeForExpansion(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v17 = *(unsigned int *)(v16 + 24 * a2 + 20);
  uint64_t v18 = *(void *)(a1 + 128);
  int v19 = *(_DWORD *)(v18 + 136 * v17 + 88) >> 25;
  if (v17 != -2)
  {
    while (v19 == *(_DWORD *)(v18 + 136 * v17 + 88) >> 25)
    {
      uint64_t v17 = *(unsigned int *)(v18 + 136 * v17 + 128);
      if (v17 == -2) {
        goto LABEL_6;
      }
    }
    int v19 = *(_DWORD *)(v18 + 136 * *(unsigned int *)(v16 + 24 * a2 + 16) + 88) >> 25;
  }
LABEL_6:
  *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  if (*(_DWORD *)(a5 + 12))
  {
    uint64_t v20 = 0;
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
    uint64_t v20 = *(unsigned int *)(a5 + 8);
  }
  unsigned int v21 = 0;
  *(_DWORD *)(*(void *)a5 + 4 * v2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a2;
  ++*(_DWORD *)(a5 + 8);
  *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  if (!*(_DWORD *)(a6 + 12))
  {
    DgnPrimArray<char>::reallocElts(a6, 1, 1);
    unsigned int v21 = *(_DWORD *)(a6 + 8);
  }
  unint64_t v63 = a5;
  *(unsigned char *)(*(void *)a6 + v21) = 0;
  long long v65 = (void *)a6;
  *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21 + 1;
  uint64_t v76 = (VocMgr *)VocMgr::smpVocMgr;
  int v22 = a3;
  if (a3 == 2)
  {
    int v74 = -83886084;
    unsigned int v75 = -83886081;
    int v64 = -83886084;
LABEL_48:
    unint64_t v45 = *(unsigned int *)(v63 + 8);
    if (v45)
    {
      unsigned int v69 = v19;
      unint64_t v46 = 0;
      HasDistinctuint64_t Score = 0;
      BOOL v48 = v22 != 4;
      BOOL v49 = v64 != -83886084 || v22 != 4;
      if (v74 != -83886084) {
        BOOL v49 = 1;
      }
      BOOL v73 = v49;
      int v50 = -83886084;
      int v51 = -83886084;
      do
      {
        unsigned int v52 = *(_DWORD *)(*(void *)v63 + 4 * v46);
        uint64_t v53 = *(void *)(a1 + 80);
        if (*(_DWORD *)(v53 + 24 * v52 + 8))
        {
          uint64_t v54 = *(unsigned int *)(v53 + 24 * v52 + 16);
          if (v54 != -2)
          {
            uint64_t v55 = *(void *)(a1 + 128);
            while (1)
            {
              ++*a10;
              int Root = (WordLattice *)VocMgr::getRoot(v76, *(unsigned int *)(v55 + 136 * v54 + 88));
              BOOL v57 = Root == -50331650 && a3 == 4;
              int v58 = *(_DWORD *)(*(void *)(a1 + 128) + 136 * v54 + 108);
              if (v57) {
                unsigned int v59 = a4;
              }
              else {
                unsigned int v59 = Root;
              }
              if (v51 == -83886084)
              {
                if (a3 == 4) {
                  int v51 = v59;
                }
                else {
                  int v51 = (int)Root;
                }
                if (v73)
                {
                  HasDistinctScore |= a3 == 4;
                }
                else
                {
                  HasDistinctuint64_t Score = WordLattice::maybePred3Pred2HasDistinctScore(Root, v69, v59, v75, *(unsigned __int8 *)(*v65 + v46));
                  int v51 = v59;
                }
                int v50 = v58;
              }
              else if (v51 != v59 || v50 != v58)
              {
                uint64_t result = 1;
                if (((v48 | HasDistinctScore) & 1) != 0 || v64 != -83886084 || v74 != -83886084) {
                  return result;
                }
                if (WordLattice::maybePred3Pred2HasDistinctScore((WordLattice *)1, v69, v59, v75, *(unsigned __int8 *)(*v65 + v46)))return 1; {
                HasDistinctuint64_t Score = 0;
                }
              }
              uint64_t v55 = *(void *)(a1 + 128);
              uint64_t v54 = *(unsigned int *)(v55 + 136 * v54 + 124);
              if (v54 == -2)
              {
                unint64_t v45 = *(unsigned int *)(v63 + 8);
                break;
              }
            }
          }
        }
        ++v46;
      }
      while (v46 < v45);
    }
  }
  else
  {
    int v72 = 0;
    char v66 = 0;
    int v74 = -83886084;
    unsigned int v75 = -83886081;
    int v64 = -83886084;
    unsigned int v68 = -83886081;
    unint64_t v23 = a5;
    while (1)
    {
      *(_DWORD *)(a7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      *(_DWORD *)(a8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      unint64_t v24 = *(unsigned int *)(v23 + 8);
      if (v24) {
        break;
      }
      unsigned int v42 = 0;
LABEL_41:
      unint64_t v23 = v63;
      DgnPrimArray<int>::copyArraySlice(v63, (uint64_t *)a7, 0, v42);
      DgnPrimArray<BOOL>::copyArraySlice((unint64_t)v65, (uint64_t *)a8, 0, *(_DWORD *)(a8 + 8));
      ++v72;
      int v22 = a3;
      if (v72 == a3 - 2)
      {
        if (v19 == 126 && v68 != -83886081)
        {
          uint64_t v43 = *(void *)(*(void *)(**(void **)v76 + 8 * (v68 >> 25)) + 72);
          int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 696))(v43);
          int v22 = a3;
          if (v44) {
            int v19 = v68 >> 25;
          }
          else {
            int v19 = 126;
          }
        }
        goto LABEL_48;
      }
    }
    uint64_t v25 = 0;
    while (1)
    {
      unsigned int v26 = *(_DWORD *)(*(void *)v63 + 4 * v25);
      uint64_t v27 = *(void *)(a1 + 80);
      if (!*(_DWORD *)(v27 + 24 * v26 + 8)) {
        break;
      }
      uint64_t v62 = v25;
      uint64_t v28 = *(unsigned int *)(v27 + 24 * v26 + 16);
      if (v28 != -2)
      {
        char v67 = *(unsigned char *)(*v65 + v25);
        uint64_t v29 = *(void *)(a1 + 128);
        while (1)
        {
          ++*a9;
          unsigned int v30 = VocMgr::getRoot(v76, *(unsigned int *)(v29 + 136 * v28 + 88));
          uint64_t v31 = *(void *)(a1 + 128);
          int v32 = *(_DWORD *)(v31 + 136 * v28 + 108);
          unsigned int v33 = v30 >> 25;
          if (v19 != 126 && v33 != v19) {
            return 0;
          }
          int v34 = *(_DWORD *)(v31 + 136 * v28 + 116);
          uint64_t v35 = *(unsigned int *)(a7 + 8);
          if (v35 == *(_DWORD *)(a7 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a7, 1, 1);
            uint64_t v35 = *(unsigned int *)(a7 + 8);
          }
          *(_DWORD *)(*(void *)a7 + 4 * v35) = v34;
          ++*(_DWORD *)(a7 + 8);
          if (v72)
          {
            if (v75 == -83886081) {
              unsigned int v36 = v30;
            }
            else {
              unsigned int v36 = v75;
            }
            int v37 = v74;
            if (v75 == -83886081) {
              int v37 = v32;
            }
            int v74 = v37;
            unsigned int v75 = v36;
            unsigned int v38 = *(_DWORD *)(a8 + 8);
            if (v38 == *(_DWORD *)(a8 + 12))
            {
              DgnPrimArray<char>::reallocElts(a8, 1, 1);
              unsigned int v38 = *(_DWORD *)(a8 + 8);
            }
            char v39 = v67;
          }
          else
          {
            unsigned int v40 = v68;
            if (v68 == -83886081)
            {
              uint64_t v41 = *(void *)(*(void *)(**(void **)v76 + 8 * v33) + 72);
              char v66 = (*(uint64_t (**)(uint64_t, void))(*(void *)v41 + 488))(v41, v30 & 0xFFFFFF);
              unsigned int v40 = v30;
              int v64 = v32;
            }
            unsigned int v68 = v40;
            unsigned int v38 = *(_DWORD *)(a8 + 8);
            if (v38 == *(_DWORD *)(a8 + 12))
            {
              DgnPrimArray<char>::reallocElts(a8, 1, 1);
              unsigned int v38 = *(_DWORD *)(a8 + 8);
            }
            char v39 = v66 & 1;
          }
          *(unsigned char *)(*(void *)a8 + v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v39;
          *(_DWORD *)(a8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v38 + 1;
          uint64_t v29 = *(void *)(a1 + 128);
          uint64_t v28 = *(unsigned int *)(v29 + 136 * v28 + 124);
          if (v28 == -2)
          {
            unint64_t v24 = *(unsigned int *)(v63 + 8);
            break;
          }
        }
      }
      uint64_t v25 = v62 + 1;
      if (v62 + 1 >= v24)
      {
        unsigned int v42 = *(_DWORD *)(a7 + 8);
        goto LABEL_41;
      }
    }
  }
  return 0;
}

uint64_t WordLattice::maybePred3Pred2HasDistinctScore(WordLattice *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a3 >> 27 != 31 && a2 != a3 >> 25 || a4 >> 27 != 31 && a4 >> 25 != a2) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * a2) + 72);
  uint64_t v7 = a3 & 0xFFFFFF;
  uint64_t v8 = a4 & 0xFFFFFF;
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 488))(v6, v7);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 488))(v6, v8);
  if (a5)
  {
    if (v10) {
      return v9 ^ 1u;
    }
LABEL_9:
    if ((v9 & 1) == 0)
    {
      int v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 440);
      return v12(v6, v7);
    }
    return 0;
  }
  if (v10) {
    goto LABEL_9;
  }
  if (v9) {
    return 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 456);

  return v13(v6, v7, v8);
}

uint64_t WordLattice::rescoreLatticeLM(WordLattice *this, SearchLMScorer *a2, LatticeStats *a3, char a4)
{
  SearchLMScorer::beginSearchLMScorerLMRescoring((uint64_t)a2, a4);
  uint64_t v6 = *((void *)a2 + 16);
  uint64_t v7 = *((unsigned int *)this + 6);
  DgnArray<CWIDAC>::DgnArray(v69, v7);
  char v67 = 0;
  uint64_t v68 = 0;
  if (v7)
  {
    int v60 = 0;
    unint64_t v8 = realloc_array(0, &v60, 4 * v7, 0, 0, 1);
    char v67 = v60;
    LODWORD(v6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
    HIDWORD(v6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8 >> 2;
    int v60 = 0;
    unint64_t v9 = realloc_array(0, &v60, 4 * v7, 0, 0, 1);
    int v10 = v60;
    long long v65 = v60;
    LODWORD(v66) = v7;
    HIDWORD(v66) = v9 >> 2;
    uint64_t v11 = v67;
    do
    {
      *v11++ = -83886081;
      *v10++ = -83886084;
      --v7;
    }
    while (v7);
  }
  else
  {
    long long v65 = 0;
    uint64_t v66 = 0;
  }
  uint64_t v57 = v6;
  ForwardLatticeNodeIterator<WordLatticeLC>::ForwardLatticeNodeIterator((uint64_t)&v60, (uint64_t)this);
  int v12 = (LatticeStats *)((char *)a3 + 256);
  while (v64)
  {
    unsigned int v13 = *(_DWORD *)(*((void *)v60 + 2) + 4 * *(unsigned int *)(v62 + 4 * v63));
    uint64_t v14 = *((void *)this + 10);
    if (!*(_DWORD *)(v14 + 24 * v13 + 8))
    {
      uint64_t v25 = 24 * v13;
      v67[*(unsigned int *)(v14 + v25)] = -83886084;
      uint64_t v26 = v69[0] + 24 * *(unsigned int *)(v14 + v25);
      *(_DWORD *)uint64_t v26 = -50331650;
      *(_DWORD *)(v26 + 4) = 0x3FFF;
      *(_OWORD *)(v26 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = xmmword_2140866D0;
      goto LABEL_37;
    }
    if (!*(_DWORD *)(v14 + 24 * v13 + 12)) {
      goto LABEL_37;
    }
    uint64_t v15 = (unsigned int *)(v14 + 24 * v13);
    uint64_t v16 = *((void *)this + 16) + 136 * v15[4];
    unsigned int v17 = *(_DWORD *)(v16 + 116);
    uint64_t v18 = 24 * v17;
    uint64_t v19 = v69[0];
    v67[*v15] = *(_DWORD *)(v69[0] + 24 * *(unsigned int *)(v14 + v18) + 16);
    v65[*v15] = *(_DWORD *)(v19 + 24 * *(unsigned int *)(v14 + v18) + 20);
    uint64_t v20 = v19 + 24 * *v15;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)(v16 + 88);
    *(_WORD *)(v20 + 4) = *(_WORD *)(v16 + 92);
    *(_WORD *)(v20 + 6) = *(_WORD *)(v16 + 94);
    *(_OWORD *)(v20 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(v16 + 96);
    if ((*(_DWORD *)(v57 + 68) & 0xFFFFFFFD) == 0)
    {
      BOOL isLMAllowedForState = Constraint::isLMAllowedForState(v57, (unsigned int *)v20);
      uint64_t v14 = *((void *)this + 10);
      if (!isLMAllowedForState) {
        goto LABEL_14;
      }
      uint64_t v19 = v69[0];
    }
    *(_DWORD *)(v20 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = *(_DWORD *)(v19 + 24 * *(unsigned int *)(v14 + 24 * v17));
LABEL_14:
    int v22 = *(_DWORD *)(v14 + 24 * v13 + 12);
    if (v22)
    {
      uint64_t v23 = v69[0];
      if ((*(_DWORD *)(v57 + 68) & 0xFFFFFFFD) != 0)
      {
        uint64_t SeededWeights = 0;
      }
      else
      {
        uint64_t SeededWeights = Constraint::getSeededWeights(v57, (unsigned int *)(v69[0] + 24 * *(unsigned int *)(v14 + 24 * v13)), *(_DWORD *)(*((void *)this + 16) + 136 * *(unsigned int *)(v14 + 24 * v13 + 20) + 16));
        uint64_t v14 = *((void *)this + 10);
        int v22 = *(_DWORD *)(v14 + 24 * v13 + 12);
        uint64_t v23 = v69[0];
      }
      int v27 = *((_DWORD *)a3 + 63);
      ++*((_DWORD *)a3 + 62);
      *((_DWORD *)a3 + 63) = v27 + v22;
      uint64_t v28 = *(unsigned int *)(v14 + 24 * v13);
      uint64_t v29 = v67[v28];
      unsigned int v30 = v65[v28];
      int v58 = a2;
      char v59 = 1;
      SearchLMScorer::setContext((uint64_t)a2, v29, (unsigned int *)(v23 + 24 * v28), 0, 1, SeededWeights, v12, 0, 0xFAFFFFFC, v30);
      uint64_t v31 = *(unsigned int *)(*((void *)this + 10) + 24 * v13 + 20);
      if (v31 != -2)
      {
        uint64_t v32 = *((void *)this + 16);
        do
        {
          uint64_t v33 = v32 + 136 * v31;
          int v36 = *(_DWORD *)(v33 + 88);
          int v34 = (unsigned int *)(v33 + 88);
          int v35 = v36;
          if (v36 != -50331650)
          {
            if (v35 == -50331651)
            {
              int v37 = SearchLMScorer::lmScoreFinalSilence(a2, v12);
            }
            else
            {
              uint64_t v38 = v32 + 136 * v31;
              unsigned int v41 = *(_DWORD *)(v38 + 108);
              unsigned int v40 = (unsigned int *)(v38 + 108);
              unsigned int v39 = v41;
              if (v41 != -83886084)
              {
                if ((*(_DWORD *)(v57 + 68) & 0xFFFFFFFD) != 0)
                {
                  uint64_t WeightsForState = 0xFFFFLL;
                }
                else
                {
                  uint64_t WeightsForState = Constraint::getWeightsForState(v57, v34);
                  unsigned int v39 = *v40;
                }
                int v43 = SearchLMScorer::lmScoreNonAcousticWord(a2, v39, WeightsForState, v12);
                uint64_t v32 = *((void *)this + 16);
                *(_DWORD *)(v32 + 136 * v31 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v43;
                goto LABEL_31;
              }
              int v37 = SearchLMScorer::lmScoreNonSilCwidac((uint64_t)a2, v34, v12);
            }
            uint64_t v32 = *((void *)this + 16);
            *(_DWORD *)(v32 + 136 * v31 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v37;
          }
LABEL_31:
          uint64_t v31 = *(unsigned int *)(v32 + 136 * v31 + 128);
        }
        while (v31 != -2);
      }
      SearchLMContext::~SearchLMContext((SearchLMContext *)&v58);
      uint64_t v44 = *(unsigned int *)(*((void *)this + 10) + 24 * v13 + 20);
      if (v44 != -2)
      {
        uint64_t v45 = *((void *)this + 16);
        do
        {
          uint64_t v46 = v45 + 136 * v44;
          unsigned int v47 = *(_DWORD *)(v46 + 108);
          if (v47 != -83886084)
          {
            uint64_t v48 = *(unsigned int *)(*((void *)this + 10) + 24 * v13);
            uint64_t v49 = v67[v48];
            int v50 = (unsigned int *)(v69[0] + 24 * v48);
            LODWORD(v4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v65[v48];
            int v58 = a2;
            char v59 = 1;
            SearchLMScorer::setContext((uint64_t)a2, v49, v50, 0, 1, SeededWeights, v12, 1, v47, v48);
            *(_DWORD *)(*((void *)this + 16) + 136 * v44 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = SearchLMScorer::lmScoreNonSilCwidac((uint64_t)a2, (unsigned int *)(v46 + 88), v12);
            SearchLMContext::~SearchLMContext((SearchLMContext *)&v58);
            uint64_t v45 = *((void *)this + 16);
          }
          uint64_t v44 = *(unsigned int *)(v45 + 136 * v44 + 128);
        }
        while (v44 != -2);
      }
    }
LABEL_37:
    ForwardLatticeNodeIterator<WordLatticeLC>::next(&v60);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v62);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v61);
  SearchLMScorer::endSearchLMScorerLMRescoring((uint64_t)a2);
  uint64_t v51 = *((unsigned int *)this + 26);
  if ((int)v51 >= 1)
  {
    uint64_t v52 = *((void *)this + 12);
    uint64_t v53 = *((void *)this + 16);
    unint64_t v54 = v51 + 1;
    do
      *(void *)(v53 + 136 * *(unsigned int *)(v52 + 4 * (v54-- - 2)) + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0xBFF0000000000000;
    while (v54 > 1);
  }
  *((unsigned char *)this + 217) = 0;
  WordLattice::resortLatticeLinks(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v65);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v67);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v69);
}

void sub_214047618(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  DgnIArray<Utterance *>::~DgnIArray(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::computeParseTokens(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::Hash((uint64_t)v81, 0, 128);
  unint64_t v4 = *(unsigned int *)(a1 + 24);
  if (!v4) {
    return Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash((uint64_t)v81);
  }
  unint64_t v5 = 0;
  char v76 = 0;
  uint64_t v77 = (uint64_t *)(a1 + 224);
  do
  {
    unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 4 * v5);
    uint64_t v7 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v7 + 24 * v6 + 12)) {
      goto LABEL_55;
    }
    uint64_t v8 = *(unsigned int *)(v7 + 24 * v6 + 16);
    if (v8 != -2)
    {
      BOOL v10 = 0;
      char v11 = 0;
      unsigned int v9 = 0;
      uint64_t v12 = *(void *)(a1 + 128);
      while (1)
      {
        unsigned int v13 = (_DWORD *)(v12 + 136 * v8);
        if (v13[22] >> 25 == 126)
        {
          unsigned int v14 = 0;
          if ((v11 & 1) == 0) {
            goto LABEL_11;
          }
        }
        else
        {
          unsigned int v14 = v13[24];
          if ((v11 & 1) == 0)
          {
LABEL_11:
            if (v13[5]) {
              BOOL v10 = 0;
            }
            else {
              BOOL v10 = v13[6] == 0;
            }
            unsigned int v9 = v14;
          }
        }
        uint64_t v8 = *(unsigned int *)(v12 + 136 * v8 + 124);
        char v11 = 1;
        if (v8 == -2) {
          goto LABEL_16;
        }
      }
    }
    unsigned int v9 = 0;
    BOOL v10 = 0;
LABEL_16:
    uint64_t v15 = *(unsigned int *)(v7 + 24 * v6 + 20);
    if (v15 == -2) {
      goto LABEL_55;
    }
    unint64_t v75 = v5;
    uint64_t v80 = (void **)VocMgr::smpVocMgr;
    uint64_t v16 = *(void *)(a1 + 128);
    unsigned int v78 = v9;
    BOOL v79 = v10;
    do
    {
      uint64_t v17 = v16 + 136 * v15;
      unint64_t v18 = *(unsigned int *)(v17 + 88);
      if (v18 >> 25 == 126 || v10) {
        goto LABEL_47;
      }
      uint64_t v19 = *(unsigned int *)(v17 + 96);
      if (!*(_WORD *)(*(void *)(*(void *)(*(void *)(**v80 + ((v18 >> 22) & 0x3F8)) + 56) + 48) + 2 * v19)) {
        goto LABEL_47;
      }
      uint64_t v20 = *(unsigned __int16 *)(a1 + 204);
      v83[0] = v9;
      v83[1] = v19;
      Bucket = Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::findBucket((uint64_t)v81, v83);
      if (*Bucket)
      {
        *(void *)(v17 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(uint64_t *)((char *)*Bucket + 20);
        goto LABEL_22;
      }
      int v27 = (void **)VocMgr::smpVocMgr;
      if (!v9)
      {
        uint64_t v46 = *(unsigned int *)(a2 + 8);
        if (!v46) {
          goto LABEL_46;
        }
        uint64_t v47 = 0;
        uint64_t v48 = *(unsigned int **)a2;
        uint64_t v49 = 16 * v46;
        while (1)
        {
          unsigned int v51 = *v48++;
          uint64_t v50 = v51;
          if (v19)
          {
            if (v50 == v19) {
              goto LABEL_49;
            }
          }
          else if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v20) + 56) {
                                         + 32)
          }
                             + v50))
          {
LABEL_49:
            uint64_t v62 = *a3;
            uint64_t v63 = *a3 + v47;
            int v64 = *(_DWORD *)(v63 + 8);
            if (!v64) {
              goto LABEL_46;
            }
            unsigned int v66 = *(_DWORD *)(a1 + 232);
            unsigned int v65 = *(_DWORD *)(a1 + 236);
            unsigned int v67 = v66;
            if (v66 + v64 <= v65
              || (DgnPrimArray<unsigned int>::reallocElts((uint64_t)v77, v66 + v64 - v65, 1),
                  int v64 = *(_DWORD *)(v63 + 8),
                  unsigned int v67 = *(_DWORD *)(a1 + 232),
                  v64))
            {
              uint64_t v68 = 0;
              uint64_t v69 = *v77;
              uint64_t v70 = *(void *)(v62 + v47) + 2;
              do
              {
                *(_DWORD *)(v69 + 4 * (v67 + v68++)) = *(_DWORD *)(v70 - 2);
                v70 += 4;
              }
              while (v64 != v68);
            }
            *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v67 + v64;
            unsigned int v71 = *(_DWORD *)(*a3 + v47 + 8);
            *(_DWORD *)(v17 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v66;
            *(_DWORD *)(v17 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = v71;
            unint64_t v82 = __PAIR64__(v71, v66);
            Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::add((uint64_t)v81, v83, &v82);
            MrecInitModule_sdpres_sdapi();
LABEL_22:
            char v76 = 1;
            goto LABEL_46;
          }
          v47 += 16;
          if (v49 == v47) {
            goto LABEL_46;
          }
        }
      }
      uint64_t v28 = *(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v20) + 56);
      StateTransitiouint64_t n = StateMgr::getStateTransition(v28, v9, 0, v22, v23, v24, v25, v26);
      StateTransitionNumParseTokens = (uint64_t *)StateMgr::getStateTransitionNumParseTokens(v28, v9, 0, v30, v31, v32, v33, v34);
      uint64_t StateTransitionParseTokens = StateMgr::getStateTransitionParseTokens(v28, v9, 0, v36, v37, v38, v39, v40);
      uint64_t v42 = *(unsigned int *)(StateTransition + 8);
      if (!v42) {
        goto LABEL_46;
      }
      int v43 = (uint64_t *)StateTransitionParseTokens;
      uint64_t v44 = 0;
      int v45 = 0;
      while (v19)
      {
        if (*(_DWORD *)(*(void *)StateTransition + 4 * v44) == v19) {
          goto LABEL_40;
        }
LABEL_30:
        v45 += *(unsigned __int16 *)(*StateTransitionNumParseTokens + 2 * v44++);
        if (v42 == v44) {
          goto LABEL_46;
        }
      }
      if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(**v27 + 8 * v20) + 56) + 32)
                     + *(unsigned int *)(*(void *)StateTransition + 4 * v44)))
        goto LABEL_30;
LABEL_40:
      uint64_t v52 = *StateTransitionNumParseTokens;
      if (*(_WORD *)(*StateTransitionNumParseTokens + 2 * v44))
      {
        unint64_t v53 = 0;
        unsigned int v54 = *(_DWORD *)(a1 + 232);
        int v55 = v45;
        unsigned int v56 = v54;
        do
        {
          uint64_t v57 = *v43;
          if (v56 == *(_DWORD *)(a1 + 236))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)v77, 1, 1);
            unsigned int v56 = *(_DWORD *)(a1 + 232);
            uint64_t v52 = *StateTransitionNumParseTokens;
          }
          uint64_t v58 = (v55 + v53);
          uint64_t v59 = *(void *)(a1 + 224) + 4 * v56;
          *(unsigned char *)uint64_t v59 = *(unsigned char *)(v57 + 4 * v58);
          uint64_t v60 = v57 + 4 * v58;
          *(unsigned char *)(v59 + 1) = *(unsigned char *)(v60 + 1);
          *(_WORD *)(v59 + 2) = *(_WORD *)(v60 + 2);
          *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = ++v56;
          ++v53;
          unint64_t v61 = *(unsigned __int16 *)(v52 + 2 * v44);
        }
        while (v53 < v61);
        *(_DWORD *)(v17 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v54;
        *(_DWORD *)(v17 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = v61;
        unint64_t v82 = __PAIR64__(v61, v54);
        Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::add((uint64_t)v81, v83, &v82);
        MrecInitModule_sdpres_sdapi();
        char v76 = 1;
      }
LABEL_46:
      MrecInitModule_sdpres_sdapi();
      uint64_t v16 = *(void *)(a1 + 128);
      unsigned int v9 = v78;
      BOOL v10 = v79;
LABEL_47:
      uint64_t v15 = *(unsigned int *)(v16 + 136 * v15 + 128);
    }
    while (v15 != -2);
    unint64_t v4 = *(unsigned int *)(a1 + 24);
    unint64_t v5 = v75;
LABEL_55:
    ++v5;
  }
  while (v5 < v4);
  if (v76) {
    WordLattice::resortLatticeLinks((WordLattice *)a1);
  }
  return Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash((uint64_t)v81);
}

void sub_214047B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::add(uint64_t a1, _DWORD *a2, void *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  }
  uint64_t result = StateIdPair::computeHash(a2);
  int v8 = result;
  int v9 = *(_DWORD *)(a1 + 16);
  if (v9) {
    unsigned int v10 = (-1640531527 * result) >> -(char)v9;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    uint64_t v12 = *(void *)(a1 + 32);
  }
  unsigned int v13 = (void *)(v11 + 8 * v10);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)v12;
  *(_DWORD *)(v12 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)&long long v14 = *(void *)a2;
  *((void *)&v14 + 1) = *a3;
  *(_OWORD *)(v12 + 12) = v14;
  *(_DWORD *)(v12 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 20))
  {
    *(void *)uint64_t v12 = *v13;
  }
  else
  {
    *(void *)uint64_t v12 = 0;
    uint64_t v15 = (void *)*v13;
    if (*v13)
    {
      do
      {
        unsigned int v13 = v15;
        uint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
  }
  *unsigned int v13 = v12;
  return result;
}

uint64_t **Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v4 = StateIdPair::computeHash(a2);
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5) {
    unsigned int v6 = (-1640531527 * v4) >> -(char)v5;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = (uint64_t **)(*(void *)(a1 + 80) + 8 * v6);
  int v8 = *v7;
  if (*v7)
  {
    do
    {
      int v9 = (uint64_t **)v8;
      if (*((_DWORD *)v8 + 2) == v4 && *((_DWORD *)v8 + 3) == *a2 && *((_DWORD *)v8 + 4) == a2[1]) {
        break;
      }
      int v8 = (uint64_t *)*v8;
      uint64_t v7 = v9;
    }
    while (*v9);
  }
  return v7;
}

uint64_t HashProbeKEV<unsigned long long,DgnPrimArray<unsigned long long>,LinkSegIds>::upSize(uint64_t a1, int a2)
{
  unsigned int v25 = 0;
  RoundUpToPowerOf2(a2, &v25);
  int v4 = (uint64_t *)(a1 + 16);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)&v23, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  int v5 = *(void **)(a1 + 16);
  if (v5)
  {
    MemChunkFree(v5, 0);
    uint64_t *v4 = 0;
  }
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0;
  unsigned int v6 = v25;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::initBuckets((unsigned int *)a1);
  uint64_t v7 = v24;
  if (v24)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v23;
    unsigned int v10 = v25;
    char v11 = 32 - v25;
    do
    {
      uint64_t v12 = *(void *)(v9 + 8 * v8);
      if (v12 != -1)
      {
        unsigned int v13 = (HIDWORD(v12) & 0xFFFFFFF) + v12;
        if (v13 <= v12)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          unint64_t v15 = *(void *)(v9 + 8 * v8) - (unint64_t)v13;
          uint64_t v16 = (uint64_t *)(**(void **)(a1 + 32) + 8 * v12);
          do
          {
            uint64_t v17 = *v16++;
            HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
            LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
            HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = (v18 >> 19) + HIDWORD(v17);
            LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = HIDWORD(v18);
            int v14 = (v18 >> 19) + v17;
          }
          while (!__CFADD__(v15++, 1));
        }
        LODWORD(v2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = (-1640531527 * v14) >> v11;
        if (v10) {
          uint64_t v20 = v20;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = *v4;
        while (*(void *)(v21 + 8 * v20) != -1)
        {
          if (v20 + 1 == *(_DWORD *)(a1 + 4)) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = (v20 + 1);
          }
        }
        *(void *)(v21 + 8 * v2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v12;
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
}

void sub_214047EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL LinkSegIds::equalKeys(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = HIDWORD(a2) & 0xFFFFFFF;
  if (v3 != *(_DWORD *)(a3 + 8)) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  if (*(void *)(*a1 + 8 * a2) != **(void **)a3) {
    return 0;
  }
  uint64_t v4 = 1;
  do
  {
    unint64_t v5 = v4;
    if (v3 == v4) {
      break;
    }
    uint64_t v6 = *(void *)(*a1 + 8 * (a2 + v4));
    uint64_t v7 = *(void *)(*(void *)a3 + 8 * v4++);
  }
  while (v6 == v7);
  return v5 >= v3;
}

uint64_t HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::upSize(uint64_t a1, int a2)
{
  unsigned int v16 = 0;
  RoundUpToPowerOf2(a2, &v16);
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)&v14, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  unint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    MemChunkFree(v5, 0);
    uint64_t *v4 = 0;
  }
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0;
  unsigned int v6 = v16;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::initBuckets((unsigned int *)a1);
  unint64_t v7 = v15;
  if (v15)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v14 + 8 * v8);
      if (v9 != -1)
      {
        int v10 = WordLattice::computeHash(*(WordLattice **)(a1 + 32), *(void *)(v14 + 8 * v8));
        if (v16) {
          uint64_t v11 = (-1640531527 * v10) >> -(char)v16;
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = *v4;
        while (*(void *)(v12 + 8 * v11) != -1)
        {
          if (v11 + 1 == *(_DWORD *)(a1 + 4)) {
            uint64_t v11 = 0;
          }
          else {
            uint64_t v11 = (v11 + 1);
          }
        }
        *(void *)(v12 + 8 * v11) = v9;
        unint64_t v7 = v15;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
}

void sub_214048048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLattice::computeHash(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 8)) {
    return 0;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  LODWORD(v4) = 0;
  do
  {
    HIDWORD(v5) = v4;
    LODWORD(v5) = v4;
    uint64_t v4 = LinkSegment::computeHash((unsigned __int16 *)(*(void *)a1 + v2)) + (v5 >> 19);
    ++v3;
    v2 += 28;
  }
  while (v3 < *(unsigned int *)(a1 + 8));
  return v4;
}

uint64_t WordLattice::equalKeys(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = HIDWORD(a2);
  if (*(_DWORD *)(a3 + 8) != HIDWORD(a2)) {
    return 0;
  }
  if (!HIDWORD(a2)) {
    return 1;
  }
  int v5 = a2;
  uint64_t result = LinkSegment::operator==(*(void *)(a1 + 240) + 28 * a2, *(void *)a3);
  if (result)
  {
    unint64_t v8 = 0;
    do
      ++v8;
    while (v8 != v3
         && LinkSegment::operator==(*(void *)(a1 + 240) + 28 * (v8 + v5), *(void *)a3 + 28 * v8));
    return v8 >= v3;
  }
  return result;
}

uint64_t WordLattice::computeHash(WordLattice *this, unint64_t a2)
{
  unint64_t v2 = HIDWORD(a2);
  if (HIDWORD(a2) + (int)a2 <= a2) {
    return 0;
  }
  LODWORD(v4) = 0;
  uint64_t v5 = 28 * a2;
  do
  {
    HIDWORD(v6) = v4;
    LODWORD(v6) = v4;
    uint64_t v4 = LinkSegment::computeHash((unsigned __int16 *)(*((void *)this + 30) + v5))
       + (v6 >> 19);
    v5 += 28;
    LODWORD(v2) = v2 - 1;
  }
  while (v2);
  return v4;
}

uint64_t LinkSegment::computeHash(unsigned __int16 *a1)
{
  HIDWORD(v1) = a1[4] + (*a1 << 13);
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + *((unsigned __int8 *)a1 + 10);
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + *((unsigned __int8 *)a1 + 11);
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[1];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[2];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[3];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + *((_DWORD *)a1 + 3);
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[8];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + a1[9];
  LODWORD(v1) = HIDWORD(v1);
  HIDWORD(v1) = (v1 >> 19) + *((_DWORD *)a1 + 5);
  LODWORD(v1) = HIDWORD(v1);
  return (v1 >> 19) + *((_DWORD *)a1 + 6);
}

BOOL LinkSegment::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
    && *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    uint64_t v2 = 0;
    while (*(unsigned __int16 *)(a1 + v2) == *(unsigned __int16 *)(a2 + v2))
    {
      v2 += 2;
      if (v2 == 10)
      {
        if (*(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10)) {
          return 0;
        }
        return *(unsigned __int8 *)(a1 + 11) == *(unsigned __int8 *)(a2 + 11);
      }
    }
  }
  return 0;
}

uint64_t sizeObject<LatticeLink<WordLatticeLC>>(uint64_t a1, int a2)
{
  memset(v11, 0, sizeof(v11));
  uint64_t v12 = 1879048192;
  int v13 = 0;
  uint64_t v14 = -1;
  v15[1] = 0x3FFF;
  long long v16 = xmmword_2140866D0;
  uint64_t v4 = sizeObject((uint64_t)v15, 2);
  uint64_t v5 = sizeObject((uint64_t)&v11[8], 2);
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v6 = 12;
  }
  else {
    uint64_t v6 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v7 = v5;
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    if ((int)v8 >= 1)
    {
      unint64_t v9 = v8 + 1;
      do
        v6 += sizeObject(*(void *)a1 + 136 * (v9-- - 2), a2) + 20;
      while (v9 > 1);
    }
    if (!a2) {
      v6 += (v4 + v7 + 56) * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  return v6;
}

unint64_t DgnArray<LinkSegment>::copyArraySlice(unint64_t result, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7 = result;
  *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(result, a4 - v8, 0);
    unsigned int v9 = *(_DWORD *)(v7 + 8);
  }
  unsigned int v11 = a4;
  unsigned int v10 = v9;
  do
  {
    uint64_t v12 = *a2 + 28 * a3;
    uint64_t v13 = *(void *)v7 + 28 * v10;
    uint64_t v14 = *(void *)v12;
    *(_WORD *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_WORD *)(v12 + 8);
    *(void *)uint64_t v13 = v14;
    *(unsigned char *)(v13 + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(unsigned char *)(v12 + 10);
    *(unsigned char *)(v13 + 11) = *(unsigned char *)(v12 + 11);
    *(_DWORD *)(v13 + 12) = *(_DWORD *)(v12 + 12);
    *(_DWORD *)(v13 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = *(_DWORD *)(v12 + 16);
    *(void *)(v13 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(void *)(v12 + 20);
    unsigned int v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    unint64_t v15 = a4 - (unint64_t)v10;
    uint64_t v16 = 28 * v10;
    do
    {
      uint64_t v17 = *(void *)v7 + v16;
      *(void *)uint64_t v17 = -1;
      *(_DWORD *)(v17 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0xFFFF;
      *(_DWORD *)(v17 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = -16;
      v16 += 28;
      --v15;
    }
    while (v15);
  }
  *(_DWORD *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a4;
  return result;
}

uint64_t DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::destructAt(uint64_t result, int a2, int a3)
{
  if (a3 + a2 > a2)
  {
    unint64_t v3 = (void *)result;
    uint64_t v4 = a2;
    uint64_t v5 = a3 + a2 - 1;
    do
    {
      uint64_t result = DgnDelete<DgnPriorityQueue<LatticePath>>(*(void *)(*v3 + 8 * v5));
      *(void *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

uint64_t DgnHeap<LatticePath>::insert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unsigned int v5 = v4;
  if (v4 == *(_DWORD *)(a1 + 12))
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
    unsigned int v5 = *(_DWORD *)(a1 + 8);
  }
  *(void *)(*(void *)a1 + 8 * v5) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v5 + 1;
  *(void *)(*(void *)a1 + 8 * v4) = a2;

  return DgnHeap<LatticePath>::heapifyUp((uint64_t *)a1, v4);
}

uint64_t DgnHeap<LatticePath>::heapifyUp(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8 * a2);
  if ((int)a2 < 1)
  {
LABEL_9:
    uint64_t v5 = a2;
  }
  else
  {
    int v4 = *(_DWORD *)(v3 + 8);
    uint64_t v5 = a2;
    do
    {
      a2 = v5;
      uint64_t v5 = ((((int)v5 + 1) >> 1) - 1);
      uint64_t v2 = *a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v5);
      int v7 = *(_DWORD *)(v6 + 8);
      if (v4 == v7)
      {
        if (*(void *)v3 >= *(void *)v6) {
          goto LABEL_9;
        }
      }
      else if (v4 >= v7)
      {
        goto LABEL_9;
      }
      *(void *)(v2 + 8 * a2) = v6;
    }
    while ((int)a2 > 2);
    uint64_t v2 = *a1;
    a2 = v5;
  }
  *(void *)(v2 + 8 * v5) = v3;
  return a2;
}

void DgnPriorityQueue<LatticePath>::~DgnPriorityQueue(uint64_t a1)
{
  for (; *(_DWORD *)(a1 + 64); *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = Min)
  {
    Miuint64_t n = (void *)DgnHeap<LatticePath>::extractMin(a1 + 56);
    *Miuint64_t n = *(void *)(a1 + 8);
  }
  DgnIArray<Utterance *>::~DgnIArray(a1 + 56);

  DgnPool::~DgnPool((DgnPool *)a1);
}

uint64_t DgnHeap<LatticePath>::extractMin(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 1;
  uint64_t v2 = **(void **)a1;
  if (v1 < 1)
  {
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  }
  else
  {
    **(void **)a1 = *(void *)(*(void *)a1 + 8 * v1);
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v1;
    DgnHeap<LatticePath>::heapifyDown(a1, 0);
  }
  return v2;
}

uint64_t DgnHeap<LatticePath>::heapifyDown(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = (2 * a2) | 1u;
    if ((int)v3 >= v2) {
      goto LABEL_7;
    }
    uint64_t v4 = *(void *)(*(void *)a1 + 8 * v3);
    uint64_t v5 = *(void *)(*(void *)a1 + 8 * a2);
    int v6 = *(_DWORD *)(v4 + 8);
    int v7 = *(_DWORD *)(v5 + 8);
    if (v6 != v7)
    {
      if (v6 < v7) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t v3 = a2;
      goto LABEL_8;
    }
    if (*(void *)v4 >= *(void *)v5) {
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v8 = (2 * a2 + 2);
    if ((int)v8 >= v2) {
      goto LABEL_13;
    }
    uint64_t v9 = *(void *)(*(void *)a1 + 8 * v8);
    uint64_t v10 = *(void *)(*(void *)a1 + 8 * v3);
    int v11 = *(_DWORD *)(v9 + 8);
    int v12 = *(_DWORD *)(v10 + 8);
    if (v11 != v12)
    {
      if (v11 < v12) {
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v8 = v3;
      goto LABEL_14;
    }
    if (*(void *)v9 >= *(void *)v10) {
      goto LABEL_13;
    }
LABEL_14:
    if (v8 == a2) {
      return a2;
    }
    uint64_t v13 = *(void *)(*(void *)a1 + 8 * a2);
    *(void *)(*(void *)a1 + 8 * a2) = *(void *)(*(void *)a1 + 8 * v8);
    *(void *)(*(void *)a1 + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
    a2 = v8;
  }
}

void *DgnIOwnArray<DgnPriorityQueue<LatticePath> *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnPriorityQueue<LatticePath>>(*(void *)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

uint64_t BackwardLatticeNodeIterator<WordLatticeLC>::BackwardLatticeNodeIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(void *)(a1 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v4)
  {
    unint64_t v5 = 0;
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = MemChunkAlloc(4 * v4, 0);
    *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = v4;
    do
    {
      uint64_t v6 = *(void *)(*(void *)a1 + 16);
      uint64_t v7 = *(void *)(*(void *)a1 + 80);
      int v8 = *(_DWORD *)(v7 + 24 * *(unsigned int *)(v6 + 4 * v5) + 12);
      *(_DWORD *)(*(void *)(a1 + 8) + 4 * v5) = v8;
      if (!v8) {
        DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v3, *(_DWORD *)(v7 + 24 * *(unsigned int *)(v6 + 4 * v5)));
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
  return a1;
}

void sub_2140489C0(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

void *DgnArray<CWIDAC>::DgnArray(void *a1, uint64_t a2)
{
  unsigned int v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)a1, a2, 0);
    unsigned int v4 = *((_DWORD *)a1 + 2);
  }
  else
  {
    unsigned int v4 = 0;
  }
  if (v4 < v2)
  {
    unint64_t v5 = v2 - (unint64_t)v4;
    uint64_t v6 = (_OWORD *)(*a1 + 24 * v4 + 8);
    do
    {
      *((_DWORD *)v6 - 1) = 0x3FFF;
      _OWORD *v6 = xmmword_2140866D0;
      uint64_t v6 = (_OWORD *)((char *)v6 + 24);
      --v5;
    }
    while (v5);
  }
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

uint64_t Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4560;
  *(_OWORD *)(v5 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v5 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0;
  *(void *)(v5 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(_DWORD *)(v5 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 104) = 0;
  int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  int v8 = sizeObject((uint64_t)&v12, 2);
  int v9 = sizeObject((uint64_t)&v13, 2);
  if (v7) {
    int v10 = 8;
  }
  else {
    int v10 = 12;
  }
  *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 32;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10 + v8 + v9;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0;
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return a1;
}

void sub_214048B84(_Unwind_Exception *a1)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash(uint64_t a1)
{
  Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4560;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<StateIdPair,StateIdPair,StateIdPair,ParseTokenRange>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = *(char **)v5;
          int v7 = *(void (**)(char *))(v1 + 96);
          if (v7) {
            v7(v5 + 12);
          }
          int v8 = *(void (**)(char *))(v1 + 104);
          if (v8) {
            v8(v5 + 20);
          }
          MrecInitModule_sdpres_sdapi();
          uint64_t result = MrecInitModule_sdpres_sdapi();
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

__n128 HmmNet::HmmNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  *(void *)a1 = &unk_26C4E49D8;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = *(_DWORD *)(a3 + 4);
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = result;
  *(_DWORD *)(a1 + 4MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a4;
  *(_DWORD *)(a1 + 44) = a5;
  *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a6;
  *(_DWORD *)(a1 + 52) = 2;
  *(void *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 104) = 0x4E204E2000000000;
  *(_DWORD *)(a1 + 8MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(void *)(a1 + DgnArray<DgnArray<DgnPrimFixArray<unsigned char>>>::releaseAll((uint64_t)this + 72) = 0;
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 56) = 0;
  *(unsigned char *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 112) = 0;
  *(unsigned char *)(a1 + 114) = 0;
  return result;
}

uint64_t HmmNet::sizeofOutPorts(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t result = 8;
  }
  else {
    uint64_t result = 12;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 80);
    char v5 = 2;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      char v5 = 3;
    }
    result += v4 << v5;
  }
  return result;
}

uint64_t HmmNet::sizeObject(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = sizeObject((uint64_t)(a1 + 4), a2);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = 8;
  }
  uint64_t active = sizeObject<ActiveWord *>((uint64_t)(a1 + 14), a2);
  uint64_t v7 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)a1 + 288))(a1, a2);
  if (a2 == 3)
  {
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v9 = 12;
    }
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v8 = 24;
    }
    else
    {
      uint64_t v10 = a1[24];
      BOOL v11 = (int)v10 < 1;
      uint64_t v12 = v9 + v10;
      uint64_t v8 = 24;
      if (v11) {
        uint64_t v8 = 24;
      }
      else {
        uint64_t v9 = v12;
      }
    }
  }
  return ((a2 != 3) | (2 * (a2 != 3))) + v4 + active + v5 + v9 + v8 + v7;
}

uint64_t HmmNet::appendCalculatedSegments()
{
  return 0;
}

uint64_t HmmNet::hasSegments()
{
  return 0;
}

uint64_t HmmNet::wasEnding()
{
  return 0;
}

uint64_t HmmNet::hasSilSeedTime(HmmNet *this)
{
  return 0;
}

uint64_t HmmNet::getSilSeedTime(HmmNet *this)
{
  return 4294967280;
}

uint64_t HmmNet::unpackEndSilence(HmmNet *this)
{
  return 0;
}

uint64_t HmmNet::unpackEnd()
{
  return 0;
}

uint64_t HmmNet::unpackNonAcoustic(HmmNet *this)
{
  (*(void (**)(HmmNet *, uint64_t))(*(void *)this + 136))(this, 1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  (*(void (**)(HmmNet *, uint64_t *, uint64_t *))(*(void *)this + 240))(this, &v6, &v5);
  uint64_t v2 = HmmNet::newInPort(this);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(void *)this + 160))(this, v2, v6);
  uint64_t v3 = (void *)*((void *)this + 9);
  if (*((_DWORD *)this + 13)) {
    *uint64_t v3 = v5;
  }
  else {
    PredStruct::addPred(*v3 + 16, v5);
  }
  return v2;
}

uint64_t HmmNet::unpackEmbeddedFst(HmmNet *this)
{
  (*(void (**)(HmmNet *, uint64_t))(*(void *)this + 136))(this, 1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  (*(void (**)(HmmNet *, uint64_t *, uint64_t *))(*(void *)this + 248))(this, &v6, &v5);
  uint64_t v2 = HmmNet::newInPort(this);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(void *)this + 160))(this, v2, v6);
  uint64_t v3 = (void *)*((void *)this + 9);
  if (*((_DWORD *)this + 13)) {
    *uint64_t v3 = v5;
  }
  else {
    PredStruct::addPred(*v3 + 16, v5);
  }
  return v2;
}

uint64_t HmmNet::unpackSilence(HmmNet *this)
{
  (*(void (**)(HmmNet *, uint64_t))(*(void *)this + 136))(this, 1);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = 16842752;
  uint64_t v5 = 0;
  (*(void (**)(HmmNet *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)this + 208))(this, &v7, 1, &v6, &v5, 2);
  uint64_t v2 = HmmNet::newInPort(this);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(void *)this + 160))(this, v2, v6);
  uint64_t v3 = (void *)*((void *)this + 9);
  if (*((_DWORD *)this + 13)) {
    *uint64_t v3 = v5;
  }
  else {
    PredStruct::addPred(*v3 + 16, v5);
  }
  return v2;
}

uint64_t HmmNet::unpackNoCoart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, 2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 208))(a1, a2, a3, &v11, &v10, 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v10, v6);
  uint64_t v7 = HmmNet::newInPort((HmmNet *)a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 160))(a1, v7, v11);
  uint64_t v8 = *(void *)(a1 + 72);
  if (*(_DWORD *)(a1 + 52)) {
    *(void *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10;
  }
  else {
    PredStruct::addPred(*(void *)(v8 + 8) + 16, v10);
  }
  return v7;
}

uint64_t HmmNet::unpackInPort(HmmNet *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(HmmNet *, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 208))(a1, a2, 1, &v8, &v7, 3);
  uint64_t v5 = HmmNet::newInPort(a1);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(void *)a1 + 160))(a1, v5, v8);
  (*(void (**)(HmmNet *, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v7, a3);
  return v5;
}

uint64_t HmmNet::passScoresToOutPorts1(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(unsigned int *)(this + 80);
  if ((int)v2 < 1)
  {
    int v4 = 20000;
  }
  else
  {
    unint64_t v3 = v2 + 1;
    int v4 = 20000;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 72) + 8 * (v3 - 2));
      this = PredStruct::getBestPred((PredStruct *)(v5 + 16));
      int v6 = *(__int16 *)(this + 8);
      *(_WORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_WORD *)(this + 8);
      *(_DWORD *)uint64_t v5 = *(_DWORD *)this;
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(this + 4);
      if (v4 >= v6) {
        int v4 = v6;
      }
      --v3;
    }
    while (v3 > 1);
  }
  *(_WORD *)(v1 + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4;
  uint64_t v7 = *(void *)(v1 + 8);
  if (v4 < *(__int16 *)(v7 + 246)) {
    *(_WORD *)(v7 + 246) = v4;
  }
  return this;
}

void HmmNet::~HmmNet(HmmNet *this)
{
  *(void *)this = &unk_26C4E49D8;
  if (!*((_DWORD *)this + 11)) {
    HmmNet::deleteInPorts((uint64_t)this);
  }
  if (!*((_DWORD *)this + 13)) {
    HmmNet::deleteOutPorts(this);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 56);
}

uint64_t HmmNet::deleteInPorts(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 64);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = this;
    unint64_t v3 = v1 + 1;
    do
    {
      uint64_t v4 = (v3 - 2);
      uint64_t v5 = *(void *)(v2 + 56);
      this = *(void *)(v5 + 8 * v4);
      if (this)
      {
        this = MemChunkFree((void *)this, 0);
        uint64_t v5 = *(void *)(v2 + 56);
      }
      *(void *)(v5 + 8 * v4) = 0;
      --v3;
    }
    while (v3 > 1);
  }
  return this;
}

void *HmmNet::deleteOutPorts(HmmNet *this)
{
  *((_DWORD *)this + 13) = 2;
  uint64_t v2 = *((unsigned int *)this + 20);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = v2 + 1;
    do
      PredStruct::~PredStruct((PredStruct *)(*(void *)(*((void *)this + 9) + 8 * (v3-- - 2)) + 16));
    while (v3 > 1);
  }
  uint64_t result = (void *)**((void **)this + 9);
  if (result) {
    uint64_t result = (void *)MemChunkFree(result, 0);
  }
  uint64_t v5 = *((unsigned int *)this + 20);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = v5 + 1;
    do
      *(void *)(*((void *)this + 9) + 8 * (v6-- - 2)) = 0;
    while (v6 > 1);
  }
  return result;
}

uint64_t HmmNet::addEpsilonNode(HmmNet *this)
{
  return 0;
}

void *HmmNet::initEndIndices(HmmNet *this)
{
  unsigned int v2 = *((_DWORD *)this + 10);
  if (v2 < 2)
  {
    unsigned int v3 = 1;
  }
  else if (v2 - 3 >= 2)
  {
    if (v2 != 2)
    {
      unsigned int v3 = 0;
      uint64_t v4 = (void **)((char *)this + 88);
      goto LABEL_11;
    }
    unsigned int v3 = 2;
  }
  else
  {
    unsigned int v3 = ***(_DWORD ***)(*((void *)this + 1) + 16) - 2;
  }
  uint64_t v4 = (void **)((char *)this + 88);
  if (v3 && !*((_DWORD *)this + 24))
  {
    *((void *)this + 11) = MemChunkAlloc(v3, 0);
    *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = v3;
  }
LABEL_11:
  uint64_t v5 = *v4;

  return memset(v5, 255, v3);
}

void *HmmNet::configureOutPortsInternal(HmmNet *this, unsigned int a2)
{
  uint64_t result = HmmNet::initEndIndices(this);
  *((_DWORD *)this + 13) = 1;
  int v5 = *((_DWORD *)this + 20);
  if (a2 && !v5)
  {
    uint64_t result = MemChunkAlloc(8 * a2, 0);
    *((void *)this + 9) = result;
    *((_DWORD *)this + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a2;
    int v5 = a2;
  }
  if (v5 >= 1)
  {
    unint64_t v6 = v5 + 1;
    do
      *(void *)(*((void *)this + 9) + 8 * (v6-- - 2)) = 0;
    while (v6 > 1);
  }
  return result;
}

uint64_t *HmmNet::configureOutPortsExternal(HmmNet *this, unsigned int a2)
{
  HmmNet::initEndIndices(this);
  *((_DWORD *)this + 13) = 0;
  if (a2 && !*((_DWORD *)this + 20))
  {
    *((void *)this + 9) = MemChunkAlloc(8 * a2, 0);
    *((_DWORD *)this + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a2;
  }
  uint64_t result = MemChunkAlloc(32 * a2, 0);
  if ((int)a2 >= 1)
  {
    unint64_t v5 = a2 + 1;
    do
    {
      uint64_t v6 = (v5 - 2);
      uint64_t v7 = &result[4 * v6];
      *uint64_t v7 = 0x100000001;
      *((_DWORD *)v7 + 2) = 1310740000;
      v7[2] = 0;
      *((_WORD *)v7 + 12) = 0;
      *(void *)(*((void *)this + 9) + 8 * v6) = v7;
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

uint64_t VocGroupInfo::loadVocGroupInfo(VocGroupInfo *this, char **a2)
{
  uint64_t v4 = DFile::subFileExists((uint64_t)a2, 0x69u);
  if (v4)
  {
    uint64_t v25 = 0;
    uint64_t v7 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x69u, 0, "MRVGI!? ", (_DWORD *)&v25 + 1, &v25);
    unsigned int v24 = 0;
    if (HIDWORD(v25) == 19 && v25 == 8)
    {
      MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRVGI!? ", 19, 8, 24, 9, v5, v6);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      readObject<unsigned short>(v7, (uint64_t)&v22, &v24);
      readObject<DgnString>(v7, (uint64_t)&v20, &v24);
      readObject<unsigned short>(v7, (uint64_t)&v18, &v24);
      readObject<DFileChecksums>(v7, (uint64_t)&v16, &v24);
      DgnString::DgnString((DgnString *)v15);
      readObject(v7, (DgnString *)v15, &v24);
      if (v23 >= 2) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vgroupi.cpp", 106, (uint64_t)"voc/vgroupi", 1, (uint64_t)"%u %u", v10, v11, v23);
      }
      DFileChecksums::operator=((uint64_t)this, v16 + 24 * *v22);
      DgnString::~DgnString((DgnString *)v15);
    }
    else
    {
      if (*((_DWORD *)a2 + 6)) {
        uint64_t v9 = a2[2];
      }
      else {
        uint64_t v9 = &byte_2140B33BB;
      }
      MrecHeaderCheckVersions(v9, "MRVGI!? ", HIDWORD(v25), v25, 0x18u, 9u);
      MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRVGI!? ", SHIDWORD(v25), v25, 24, 9, v12, v13);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      readObject(v7, this, &v24);
    }
    readObjectChecksumAndVerify(v7, v24);
    DgnDelete<DgnStream>((void (***)(void))v7);
    DgnArray<DFileChecksums>::releaseAll((uint64_t)&v16);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
    DgnArray<DgnString>::releaseAll((uint64_t)&v20);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  }
  return v4;
}

void sub_214049A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  DgnArray<DFileChecksums>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

void readObject<DFileChecksums>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v15 = 0;
  readObject((uint64_t)a1, &v15, a3);
  int v6 = v15;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v15 > v7) {
    DgnArray<CWIDAC>::reallocElts(a2, v15 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  uint64_t v9 = (int)v8;
  if (v6 >= v8)
  {
    if (v6 > v8)
    {
      int v11 = v6 - v8;
      uint64_t v12 = 24 * v8;
      do
      {
        DFileChecksums::DFileChecksums((DFileChecksums *)(*(void *)a2 + v12));
        v12 += 24;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > v6)
  {
    uint64_t v10 = 24 * (int)v8 - 24;
    do
    {
      --v9;
      DFileChecksums::~DFileChecksums((DFileChecksums *)(*(void *)a2 + v10));
      v10 -= 24;
    }
    while (v9 > v6);
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  if (v6)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      readObject(a1, (DFileChecksums *)(*(void *)a2 + v13), a3);
      ++v14;
      v13 += 24;
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
}

void (***VocGroupInfo::saveVocGroupInfo(VocGroupInfo *this, DFile *a2))(void)
{
  unsigned int v3 = OpenAndWriteMrecHeader((uint64_t)a2, 0x69u, 0, "MRVGI!? ", 24, 9);
  int v5 = 0;
  writeObject((uint64_t)v3, (uint64_t)this, &v5);
  writeObjectChecksum((uint64_t)v3, &v5);
  return DgnDelete<DgnStream>((void (***)(void))v3);
}

void *DgnArray<DFileChecksums>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 24 * v2 - 24;
    do
    {
      DFileChecksums::~DFileChecksums((DFileChecksums *)(*(void *)a1 + v3));
      v3 -= 24;
    }
    while (v3 != -24);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

uint64_t MrecInitLibrary_voc(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_rulemgr_voc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_trgrm_voc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_voc_voc();
  MrecInitModule_sdpres_sdapi();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughVoc(void)
{
  MrecInitLibrarySet_throughLm();

  return MrecInitLibrary_voc();
}

void NodeNet::~NodeNet(NodeNet *this)
{
  *(void *)this = &unk_26C4E4DA8;
  DgnIOwnArray<NodeNetNode *>::releaseAll((uint64_t)this + 176);
  DgnIOwnArray<NodeNetNode *>::releaseAll((uint64_t)this + 160);

  AcousticNet::~AcousticNet(this);
}

{
  uint64_t vars8;

  NodeNet::~NodeNet(this);

  JUMPOUT(0x216698730);
}

uint64_t NodeNet::sizeObject(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = HmmNet::sizeObject(a1, a2);
  uint64_t v5 = sizeObject<NodeNetNode *>((uint64_t)(a1 + 40), a2) + v4;
  return v5 + sizeObject<NodeNetNode *>((uint64_t)(a1 + 44), a2);
}

uint64_t sizeObject<NodeNetNode *>(uint64_t a1, uint64_t a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t NodeNet::getBestScore(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 168);
  if ((int)v2 < 1) {
    return 20000;
  }
  unint64_t v3 = v2 + 1;
  uint64_t v4 = 20000;
  do
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 160) + 8 * (v3 - 2));
    uint64_t v6 = *(__int16 *)(v5 + 18);
    if ((int)v4 > (int)v6)
    {
      *a2 = v5 + 8;
      uint64_t v4 = v6;
    }
    --v3;
  }
  while (v3 > 1);
  return v4;
}

uint64_t NodeNet::addNodesIndirect(NodeNet *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  if (a2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (char *)this + 160;
    unsigned int v6 = a2 + 1;
    do
    {
      uint64_t v7 = (*(uint64_t (**)(NodeNet *, void))(*(void *)this + 336))(this, 0);
      unsigned int v8 = *((_DWORD *)this + 42);
      if (v8 == *((_DWORD *)this + 43))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v5, 1, 1);
        unsigned int v8 = *((_DWORD *)this + 42);
      }
      *(void *)(*((void *)this + 20) + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
      *((_DWORD *)this + 42) = v8 + 1;
      if (v4)
      {
        if (v7) {
          uint64_t v9 = v7 + 8;
        }
        else {
          uint64_t v9 = 0;
        }
        (*(void (**)(NodeNet *, uint64_t, uint64_t))(*(void *)this + 120))(this, v9, v4);
      }
      if (v7) {
        uint64_t v4 = v7 + 8;
      }
      else {
        uint64_t v4 = 0;
      }
      --v6;
    }
    while (v6 > 1);
  }
  return v2;
}

uint64_t NodeNet::preallocEndSequences(uint64_t this, unsigned int a2, int a3)
{
  unint64_t v3 = (_DWORD *)this;
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(this + 8) + 16) + 16) + a2) * a3;
  unsigned int v5 = *(_DWORD *)(this + 172);
  unsigned int v6 = v4 + *(_DWORD *)(this + 168);
  if (v6 > v5) {
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 160, v6 - v5, 0);
  }
  if (v3[12]) {
    int v7 = v4;
  }
  else {
    int v7 = 0;
  }
  unsigned int v8 = v3[47];
  unsigned int v9 = v3[46] + v7 + 1;
  if (v9 > v8)
  {
    return DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v3 + 44), v9 - v8, 0);
  }
  return this;
}

uint64_t NodeNet::fillEpsilonNode(NodeNet *this, NodeNetNode *a2, NodeNetNode *a3)
{
  return NodeNetNode::fillAsEpsilon(a2, a3);
}

uint64_t NodeNet::unpackEpsilonNodes(NodeNet *this, unsigned int a2, int a3)
{
  unsigned int v5 = a3 - 1;
  if (a3 >= 1)
  {
    unsigned int v6 = a3 + 1;
    do
    {
      (*(void (**)(NodeNet *))(*(void *)this + 128))(this);
      --v6;
    }
    while (v6 > 1);
  }
  int v7 = *((_DWORD *)this + 46);
  unsigned int v8 = v7 - 1;
  uint64_t v9 = *(void *)(*((void *)this + 22) + 8 * (v7 - 1));
  if (v9) {
    uint64_t v10 = v9 + 8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(*((void *)this + 20) + 8 * a2);
  if (v11) {
    uint64_t v12 = v11 + 8;
  }
  else {
    uint64_t v12 = 0;
  }
  (*(void (**)(NodeNet *, uint64_t, uint64_t))(*(void *)this + 120))(this, v10, v12);
  uint64_t v13 = *(void *)(*((void *)this + 22) + 8 * v8);
  *(void *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0x100000001;
  *(_DWORD *)(v13 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = 1310740000;
  *(_WORD *)(v13 + 3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = -1;
  *(void *)(v13 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(_WORD *)(v13 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  unsigned int v14 = v7 - 2;
  (*(void (**)(NodeNet *, void, void))(*(void *)this + 328))(this, *(void *)(*((void *)this + 22) + 8 * (v7 - 2)), *(void *)(*((void *)this + 20) + 8 * a2));
  uint64_t v15 = *(void *)(*((void *)this + 22) + 8 * (v7 - 2));
  if (v15) {
    uint64_t v16 = v15 + 8;
  }
  else {
    uint64_t v16 = 0;
  }
  unsigned int v17 = a2 - 1;
  uint64_t v18 = *(void *)(*((void *)this + 20) + 8 * (a2 - 1));
  if (v18) {
    uint64_t v19 = v18 + 8;
  }
  else {
    uint64_t v19 = 0;
  }
  (*(void (**)(NodeNet *, uint64_t, uint64_t))(*(void *)this + 120))(this, v16, v19);
  uint64_t v20 = *((void *)this + 22);
  uint64_t v21 = *(void *)(v20 + 8 * v8);
  if (v21) {
    uint64_t v22 = v21 + 8;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void *)(v20 + 8 * v14);
  if (v23) {
    uint64_t v24 = v23 + 8;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t result = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t))(*(void *)this + 120))(this, v22, v24);
  if (v5 >= 2)
  {
    uint64_t v26 = 0;
    int v27 = *((_DWORD *)this + 12);
    unsigned int v28 = a2 - 2;
    unsigned int v29 = a2;
    int v30 = v7 - 3;
    uint64_t v31 = 1 - v5;
    do
    {
      uint64_t v32 = *(void *)(*((void *)this + 22) + 8 * (v30 + v26));
      (*(void (**)(NodeNet *, uint64_t, void))(*(void *)this + 328))(this, v32, *(void *)(*((void *)this + 20) + 8 * (v17 + v26)));
      uint64_t v33 = *(void *)(*((void *)this + 20) + 8 * (v29 + v26));
      if (v33) {
        uint64_t v34 = v33 + 8;
      }
      else {
        uint64_t v34 = 0;
      }
      if (v32) {
        uint64_t v35 = v32 + 8;
      }
      else {
        uint64_t v35 = 0;
      }
      (*(void (**)(NodeNet *, uint64_t, uint64_t))(*(void *)this + 120))(this, v34, v35);
      uint64_t v36 = *(void *)(*((void *)this + 20) + 8 * (v28 + v26));
      if (v36) {
        uint64_t v37 = v36 + 8;
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t result = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t))(*(void *)this + 120))(this, v35, v37);
      if (v27 == 2)
      {
        uint64_t v38 = *(void *)(*((void *)this + 22) + 8 * (v14 + v26));
        if (v38) {
          uint64_t v39 = v38 + 8;
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t result = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t))(*(void *)this + 120))(this, v39, v35);
      }
      --v26;
    }
    while (v31 != v26);
  }
  return result;
}

uint64_t NodeNet::fillTraceNodes(uint64_t result, int a2, int a3, uint64_t a4, int a5, __int16 a6)
{
  if (a5 >= 1)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 8);
    int v10 = *(_DWORD *)(v9 + 4);
    int v11 = a3 - 1;
    if (v10 == 1) {
      int v11 = 0;
    }
    uint64_t v21 = *(void *)(v9 + 16);
    uint64_t v12 = a5;
    do
    {
      uint64_t v13 = a4 + 12 * v8;
      uint64_t v14 = *(unsigned __int16 *)(v13 + 4);
      uint64_t v15 = *(void *)(v21 + 16);
      int v16 = *(unsigned __int8 *)(v15 + v14);
      if (*(unsigned char *)(v15 + v14))
      {
        int v17 = 0;
        int v18 = -v11;
        do
        {
          uint64_t v19 = *(void *)(*(void *)(v7 + 160) + 8 * (a2 + v18));
          uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)v19 + 32))(v19, (unsigned __int16)(a6 + 4 * v8), v13, (__int16)v17++);
          v18 -= v10;
        }
        while (v16 > (__int16)v17);
        int v11 = -v18;
      }
      ++v8;
    }
    while (v8 != v12);
  }
  return result;
}

uint64_t NodeNet::unpackSequence(NodeNet *this, uint64_t a2, int a3, void *a4, void *a5, __int16 a6)
{
  uint64_t v9 = *((void *)this + 1);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = a3;
  if (a3 < 1)
  {
    unsigned int v12 = 0;
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t v13 = (unsigned __int16 *)(a2 + 4);
    uint64_t v14 = a3;
    do
    {
      unsigned int v15 = *v13;
      v13 += 6;
      v12 += *(unsigned __int8 *)(*(void *)(v10 + 16) + v15);
      --v14;
    }
    while (v14);
  }
  int v16 = *(_DWORD *)(v9 + 4);
  NodeNet::addNodesIndirect(this, v12);
  int v17 = *((_DWORD *)this + 42);
  uint64_t v18 = *((void *)this + 1);
  uint64_t v19 = (unsigned int *)(v18 + 302832);
  unsigned int v20 = *(_DWORD *)(v18 + 302836);
  if (v12 <= v20)
  {
    *uint64_t v19 = v12;
    if (!v12)
    {
      int v22 = -1;
      goto LABEL_16;
    }
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(v18 + 302824, v12 - v20, 0);
    *uint64_t v19 = v12;
  }
  uint64_t v21 = 0;
  int v22 = v12 - 1;
  if (v16 == 1) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = v12 - 1;
  }
  unsigned int v24 = ~v23 + v17;
  do
  {
    *(void *)(*(void *)(*((void *)this + 1) + 302824) + 8 * v21++) = *(void *)(*((void *)this + 20)
                                                                                       + 8 * v24)
                                                                           + 20;
    v24 -= v16;
  }
  while (v12 != v21);
LABEL_16:
  unsigned int v25 = v17 - 1;
  uint64_t v26 = *((void *)this + 1);
  int v27 = *(uint64_t **)(v26 + 302824);
  uint64_t v42 = 0;
  if (a3 < 1)
  {
    uint64_t v29 = 0;
    int v30 = 0;
  }
  else
  {
    unsigned int v28 = (unsigned __int16 *)a2;
    do
    {
      PicMgr::getNodeDataPtrs((unsigned __int16 *)v10, v27, *(void **)(*((void *)this + 1) + 32), v28, (_DWORD *)&v42 + 1, &v42);
      v27 += *(unsigned __int8 *)(*(void *)(v10 + 16) + v28[2]);
      v28 += 6;
      --v11;
    }
    while (v11);
    uint64_t v29 = v42;
    int v30 = HIDWORD(v42);
    uint64_t v26 = *((void *)this + 1);
  }
  uint64_t v31 = v26 + 302668;
  *(_DWORD *)v31 += v30;
  *(void *)(v31 + 4) += v29;
  uint64_t result = (*(uint64_t (**)(NodeNet *))(*(void *)this + 40))(this);
  if (result) {
    uint64_t result = NodeNet::fillTraceNodes((uint64_t)this, v25, v12, a2, a3, a6);
  }
  if (v12 >= 2 && *((_DWORD *)this + 12))
  {
    uint64_t result = NodeNet::unpackEpsilonNodes(this, v25, v12);
    uint64_t v33 = (char *)this + 176;
    unsigned int v34 = *((_DWORD *)this + 46) - 1;
  }
  else
  {
    uint64_t v33 = (char *)this + 160;
    unsigned int v34 = v25;
  }
  uint64_t v35 = *(void *)(*(void *)v33 + 8 * v34);
  if (v35) {
    uint64_t v36 = v35 + 8;
  }
  else {
    uint64_t v36 = 0;
  }
  *a4 = v36;
  uint64_t v37 = *(void *)(*((void *)this + 20) + 8 * (v25 - v22));
  if (v37) {
    uint64_t v38 = v37 + 8;
  }
  else {
    uint64_t v38 = 0;
  }
  *a5 = v38;
  return result;
}

uint64_t NodeNet::unpackEndSilence(uint64_t **this)
{
  NodeNet::addNodesIndirect((NodeNet *)this, 1);
  uint64_t v2 = this[20][*((_DWORD *)this + 42) - 1];
  *(void *)(v2 + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  *(_DWORD *)(v2 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  if (((unsigned int (*)(uint64_t **))(*this)[5])(this)) {
    NodeNet::fillTraceNodes((uint64_t)this, *((_DWORD *)this + 42) - 1, 1, (uint64_t)(this[1] + 37848), 1, 0);
  }
  uint64_t v3 = (*((_DWORD *)this + 42) - 1);
  uint64_t v4 = this[20][v3];
  if (v4) {
    uint64_t v5 = v4 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  unsigned int v6 = this[9];
  if (*((_DWORD *)this + 13))
  {
    uint64_t *v6 = v5;
  }
  else
  {
    PredStruct::addPred(*v6 + 16, v5);
    uint64_t v3 = (*((_DWORD *)this + 42) - 1);
  }
  uint64_t v7 = this[20];
  uint64_t v8 = v7[v3];
  if (v8) {
    uint64_t v9 = (uint64_t *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  this[18] = v9;
  uint64_t v10 = v7[v3];
  if (v10) {
    return v10 + 8;
  }
  else {
    return 0;
  }
}

uint64_t NodeNet::unpackOne(uint64_t a1, unsigned __int16 *a2, void *a3, void *a4, __int16 a5)
{
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(v9 + 16);
  int v11 = *(_DWORD *)(v9 + 4);
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(v10 + 16) + a2[2]);
  NodeNet::addNodesIndirect((NodeNet *)a1, v12);
  int v13 = *(_DWORD *)(a1 + 168);
  uint64_t v14 = *(void *)(a1 + 8);
  unsigned int v15 = (_DWORD *)(v14 + 302832);
  unsigned int v16 = *(_DWORD *)(v14 + 302836);
  if (v12 > v16) {
    DgnPrimArray<unsigned long long>::reallocElts(v14 + 302824, v12 - v16, 0);
  }
  _DWORD *v15 = v12;
  if (v12)
  {
    uint64_t v17 = 0;
    if (v11 == 1) {
      int v18 = 0;
    }
    else {
      int v18 = v12 - 1;
    }
    unsigned int v19 = ~v18 + v13;
    do
    {
      *(void *)(*(void *)(*(void *)(a1 + 8) + 302824) + v17) = *(void *)(*(void *)(a1 + 160) + 8 * v19)
                                                                     + 20;
      v17 += 8;
      v19 -= v11;
    }
    while (8 * v12 != v17);
  }
  uint64_t v30 = 0;
  PicMgr::getNodeDataPtrs((unsigned __int16 *)v10, *(uint64_t **)(*(void *)(a1 + 8) + 302824), *(void **)(*(void *)(a1 + 8) + 32), a2, (_DWORD *)&v30 + 1, &v30);
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void *)(a1 + 8) + 302668;
  *(_DWORD *)v21 += HIDWORD(v30);
  *(void *)(v21 + 4) += v30;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v20 + 40))(a1);
  if (result) {
    uint64_t result = NodeNet::fillTraceNodes(a1, v13 - 1, v12, (uint64_t)a2, 1, a5);
  }
  if (v12 >= 2 && *(_DWORD *)(a1 + 48))
  {
    uint64_t result = NodeNet::unpackEpsilonNodes((NodeNet *)a1, v13 - 1, v12);
    unsigned int v23 = (void *)(a1 + 176);
    unsigned int v24 = *(_DWORD *)(a1 + 184) - 1;
  }
  else
  {
    unsigned int v23 = (void *)(a1 + 160);
    unsigned int v24 = v13 - 1;
  }
  uint64_t v25 = *(void *)(*v23 + 8 * v24);
  if (v25) {
    uint64_t v26 = v25 + 8;
  }
  else {
    uint64_t v26 = 0;
  }
  *a3 = v26;
  uint64_t v27 = *(void *)(*(void *)(a1 + 160) + 8 * (v13 - v12));
  if (v27) {
    uint64_t v28 = v27 + 8;
  }
  else {
    uint64_t v28 = 0;
  }
  *a4 = v28;
  return result;
}

uint64_t NodeNet::unpackOneFromPicNodes(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void *a5, void *a6, __int16 a7)
{
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(v12 + 16);
  int v14 = *(_DWORD *)(v12 + 4);
  NodeNet::addNodesIndirect((NodeNet *)a1, a3);
  int v15 = *(_DWORD *)(a1 + 168);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = (unsigned int *)(v16 + 302832);
  unsigned int v18 = *(_DWORD *)(v16 + 302836);
  if (a3 <= v18)
  {
    *uint64_t v17 = a3;
    if (!a3)
    {
      int v20 = -1;
      goto LABEL_11;
    }
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(v16 + 302824, a3 - v18, 0);
    *uint64_t v17 = a3;
  }
  uint64_t v19 = 0;
  int v20 = a3 - 1;
  if (v14 == 1) {
    unsigned int v21 = 0;
  }
  else {
    unsigned int v21 = a3 - 1;
  }
  unsigned int v22 = ~v21 + v15;
  do
  {
    *(void *)(*(void *)(*(void *)(a1 + 8) + 302824) + 8 * v19++) = *(void *)(*(void *)(a1 + 160) + 8 * v22)
                                                                         + 20;
    v22 -= v14;
  }
  while (a3 != v19);
LABEL_11:
  PicMgr::getNodeDataPtrsFromPicNodes(v13, *(uint64_t **)(*(void *)(a1 + 8) + 302824), *(void **)(*(void *)(a1 + 8) + 32), a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (result) {
    uint64_t result = NodeNet::fillTraceNodes(a1, v15 - 1, a3, a4, 1, a7);
  }
  if (a3 >= 2 && *(_DWORD *)(a1 + 48))
  {
    uint64_t result = NodeNet::unpackEpsilonNodes((NodeNet *)a1, v15 - 1, a3);
    unsigned int v24 = (void *)(a1 + 176);
    unsigned int v25 = *(_DWORD *)(a1 + 184) - 1;
  }
  else
  {
    unsigned int v24 = (void *)(a1 + 160);
    unsigned int v25 = v15 - 1;
  }
  uint64_t v26 = *(void *)(*v24 + 8 * v25);
  if (v26) {
    uint64_t v27 = v26 + 8;
  }
  else {
    uint64_t v27 = 0;
  }
  *a5 = v27;
  uint64_t v28 = *(void *)(*(void *)(a1 + 160) + 8 * (v15 - 1 - v20));
  if (v28) {
    uint64_t v29 = v28 + 8;
  }
  else {
    uint64_t v29 = 0;
  }
  *a6 = v29;
  return result;
}

uint64_t NodeNet::addArc(NodeNet *this, const Node *a2, Node *a3)
{
  uint64_t v3 = (char *)a3 - 8;
  if (!a3) {
    uint64_t v3 = 0;
  }
  if (!a2) {
    a2 = 0;
  }
  return PredStruct::addPred((uint64_t)(v3 + 32), (uint64_t)a2);
}

uint64_t NodeNet::addEpsilonNode(NodeNet *this)
{
  uint64_t v2 = (*(uint64_t (**)(NodeNet *, uint64_t))(*(void *)this + 336))(this, 1);
  unsigned int v3 = *((_DWORD *)this + 46);
  if (v3 == *((_DWORD *)this + 47))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 176, 1, 1);
    unsigned int v3 = *((_DWORD *)this + 46);
  }
  *(void *)(*((void *)this + 22) + 8 * v3) = v2;
  *((_DWORD *)this + 46) = v3 + 1;
  if (v2) {
    return v2 + 8;
  }
  else {
    return 0;
  }
}

uint64_t NodeNet::attachInPort(NodeNet *this, unsigned int a2, Node *a3)
{
  unsigned int v3 = (char *)a3 - 8;
  if (!a3) {
    unsigned int v3 = 0;
  }
  return PredStruct::addPred((uint64_t)(v3 + 32), *(void *)(*((void *)this + 7) + 8 * a2));
}

uint64_t TraceNodeNet::attachInPort(TraceNodeNet *this, unsigned int a2, Node *a3)
{
  unsigned int v3 = (char *)a3 - 8;
  *((unsigned char *)a3 + 74) = 1;
  if (!a3) {
    unsigned int v3 = 0;
  }
  return PredStruct::addPred((uint64_t)(v3 + 32), *(void *)(*((void *)this + 7) + 8 * a2));
}

uint64_t NodeNet::seedEpsilonNodes(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 184);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = this;
    for (unint64_t i = v1 + 1; i > 1; --i)
    {
      uint64_t v4 = *(void *)(*(void *)(v2 + 176) + 8 * (i - 2));
      this = PredStruct::getBestPred((PredStruct *)(v4 + 32));
      int v5 = *(__int16 *)(this + 8);
      if (v5 == 20000)
      {
        uint64_t v6 = v4 + 8;
      }
      else
      {
        if (*(__int16 *)(v4 + 30) != -1 && *(unsigned char *)(v4 + 42))
        {
          int v7 = *(__int16 *)(v4 + 24);
          if (v7 < 0) {
            int v8 = *(char *)(v4 + 29) + v7;
          }
          else {
            int v8 = *(char *)(v4 + 29);
          }
          v5 += v8 + *(_DWORD *)(v2 + 116);
        }
        uint64_t v6 = v4 + 8;
        if (v5 != 20000)
        {
          *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)this;
          int v9 = v5 + (*(_DWORD *)(v4 + 20) >> 8);
          *(_DWORD *)(v4 + 12) = *(_DWORD *)(this + 4) + *(__int16 *)(v4 + 26);
          goto LABEL_14;
        }
      }
      LOWORD(v9) = 20000;
      *(_WORD *)(v4 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 20000;
LABEL_14:
      *(_WORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
    }
  }
  return this;
}

uint64_t NodeNet::scoreNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, unsigned char *a8, HmmNet *a9, _DWORD *a10, HmmNet *a11)
{
  return Node::scoreNodeOneBest(a2 + 8, a3, *(unsigned __int16 *)(a3 + 8) != 20000, a4, a5, a6, a8, *(PelScoreCache ***)(a1 + 8), a9, a10, a11);
}

uint64_t NodeNet::scoreNetInternal(NodeNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = 0;
  int v30 = 0;
  uint64_t v13 = *((unsigned int *)this + 42);
  if (v12)
  {
    if (v13)
    {
      uint64_t v14 = 0;
      do
      {
        *((_DWORD *)this + 26) += Node::thresholdNode((Node *)(*(void *)(*((void *)this + 20) + v14) + 8), a3);
        v14 += 8;
      }
      while (8 * v13 != v14);
    }
  }
  else if (v13)
  {
    int v15 = (uint64_t *)*((void *)this + 20);
    uint64_t v16 = *((unsigned int *)this + 42);
    do
    {
      uint64_t v17 = *v15++;
      *(_DWORD *)(v17 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = 1310740000;
      --v16;
    }
    while (v16);
  }
  if (*((_DWORD *)this + 10) == 1)
  {
    unsigned int v18 = 0;
    int v19 = 20000;
  }
  else
  {
    (*(void (**)(NodeNet *, uint64_t))(*(void *)this + 344))(this, a2);
    uint64_t v20 = **((void **)this + 20);
    uint64_t BestPred = PredStruct::getBestPred((PredStruct *)(v20 + 32));
    *((unsigned char *)this + 113) = 0;
    LODWORD(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    HIDWORD(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a6;
    int v19 = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, int *, NodeNet *))(*(void *)this + 352))(this, v20, BestPred, a3, a4, a5, a2, (char *)this + 113, v28, &v30, this);
    unsigned int v18 = 1;
  }
  if (v18 < v13)
  {
    uint64_t v22 = v18;
    do
    {
      uint64_t v23 = *(void *)(*((void *)this + 20) + 8 * v22);
      uint64_t v24 = PredStruct::getBestPred((PredStruct *)(v23 + 32));
      char v29 = 0;
      if (*((_DWORD *)this + 10) == 1) {
        unsigned int v25 = this;
      }
      else {
        unsigned int v25 = 0;
      }
      int v26 = (*(uint64_t (**)(NodeNet *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, void, int *, NodeNet *))(*(void *)this + 352))(this, v23, v24, a3, a4, a5, a2, &v29, *((unsigned int *)this + 29), &v30, v25);
      if (v26 < v19) {
        int v19 = v26;
      }
      ++v22;
    }
    while (v13 != v22);
  }
  *((_WORD *)this + 55) = v19;
  return HmmNet::passScoresToOutPorts1((uint64_t)this);
}

uint64_t NodeNet::thresholdNetInternal(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v4 = this;
  *(_DWORD *)(this + 152) = *(__int16 *)(**(void **)(this + 160) + 18) <= a3;
  if (*(_DWORD *)(this + 40) != 1) {
    this = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)this + 320))(this, *(unsigned __int8 *)(this + 113), a2);
  }
  if (*(__int16 *)(v4 + 110) <= a3)
  {
    int v5 = 1;
  }
  else
  {
    int v5 = 0;
    *(_WORD *)(v4 + 11MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 20000;
  }
  *(_DWORD *)(v4 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 104) = v5;
  return this;
}

uint64_t NodeNet::calcNumActiveNodes(NodeNet *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 8 * v2;
  do
  {
    uint64_t v6 = Node::thresholdNode((Node *)(*(void *)(*((void *)this + 20) + v5) + 8), a2)
       + v6;
    v5 += 8;
  }
  while (v7 != v5);
  return v6;
}

void TraceNodeNet::thresholdNetInternal(TraceNodeNet *this, uint64_t a2, int a3)
{
  signed int v4 = a2;
  NodeNet::thresholdNetInternal((uint64_t)this, a2, a3);
  uint64_t v6 = *((unsigned int *)this + 42);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      TraceNode::maybeSeedNode(*(void *)(*((void *)this + 20) + v7), a3, v4);
      v7 += 8;
    }
    while (v8 != v7);
  }

  TraceNodeNet::passScoresToOutPorts2(this, a3, v4);
}

void TraceNodeNet::passScoresToOutPorts2(TraceNodeNet *this, int a2, signed int a3)
{
  uint64_t v3 = *((unsigned int *)this + 20);
  if ((int)v3 >= 1)
  {
    unint64_t v7 = v3 + 1;
    do
      TraceExternalOutPort::seedOutPortForTraceBack2(*(TraceExternalOutPort **)(*((void *)this + 9) + 8 * (v7-- - 2)), a2, a3, *((NetMgr **)this + 1));
    while (v7 > 1);
  }
}

unint64_t TraceNodeNet::seedEpsilonNodes(unint64_t this, signed int a2)
{
  uint64_t v2 = *(unsigned int *)(this + 184);
  if ((int)v2 >= 1)
  {
    unint64_t v4 = this;
    for (unint64_t i = v2 + 1; i > 1; --i)
    {
      uint64_t v6 = *(void *)(*(void *)(v4 + 176) + 8 * (i - 2));
      this = PredStruct::getBestPred((PredStruct *)(v6 + 32));
      int v7 = *(__int16 *)(this + 8);
      if (v7 == 20000)
      {
        uint64_t v8 = v6 + 8;
      }
      else
      {
        int v9 = (_DWORD *)this;
        this = SeederStruct::updateSeederList(v6 + 64, a2, this);
        if (*(__int16 *)(v6 + 30) != -1 && *(unsigned char *)(v6 + 42))
        {
          int v10 = *(__int16 *)(v6 + 24);
          if (v10 < 0) {
            int v11 = *(char *)(v6 + 29) + v10;
          }
          else {
            int v11 = *(char *)(v6 + 29);
          }
          v7 += v11 + *(_DWORD *)(v4 + 116);
        }
        uint64_t v8 = v6 + 8;
        if (v7 != 20000)
        {
          *(_DWORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *v9;
          int v12 = v7 + (*(_DWORD *)(v6 + 20) >> 8);
          *(_DWORD *)(v6 + 12) = v9[1] + *(__int16 *)(v6 + 26);
          goto LABEL_14;
        }
      }
      LOWORD(v12) = 20000;
      *(_WORD *)(v6 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 20000;
LABEL_14:
      *(_WORD *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12;
    }
  }
  return this;
}

uint64_t TraceNodeNet::scoreNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, unsigned char *a8, int a9, int a10, _DWORD *a11, HmmNet *a12)
{
  return TraceNode::scoreNode(a2, a3, a4, a5, a6, a7, a8, *(PelScoreCache ***)(a1 + 8), a9, a10, a11, a12);
}

void NodeNet::newNode(NodeNet *this, char a2)
{
  uint64_t v3 = MemChunkAlloc(0x30uLL, 0);

  NodeNetNode::NodeNetNode((NodeNetNode *)v3, a2);
}

uint64_t NodeNet::estimateActivePelsThisFrame(NodeNet *this, BitArray *a2)
{
  uint64_t result = AcousticNet::estimateActivePelsThisFrame((uint64_t)this, a2);
  uint64_t v5 = *((unsigned int *)this + 46);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *((void *)this + 22);
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = v5 + 1;
    do
    {
      unint64_t v9 = *(unsigned __int16 *)(*(void *)(v6 + 8 * (v8 - 2)) + 30);
      *(_DWORD *)(v7 + ((v9 >> 3) & 0x1FFC)) |= 1 << v9;
      --v8;
    }
    while (v8 > 1);
  }
  uint64_t v10 = *((unsigned int *)this + 42);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = *((void *)this + 20);
    uint64_t v12 = *(void *)a2;
    unint64_t v13 = v10 + 1;
    do
    {
      unint64_t v14 = *(unsigned __int16 *)(*(void *)(v11 + 8 * (v13 - 2)) + 30);
      *(_DWORD *)(v12 + ((v14 >> 3) & 0x1FFC)) |= 1 << v14;
      --v13;
    }
    while (v13 > 1);
  }
  return result;
}

void TraceNodeNet::~TraceNodeNet(TraceNodeNet *this)
{
  *(void *)this = &unk_26C4DFD20;
  TraceNodeNet::deleteOutPorts(this);

  NodeNet::~NodeNet(this);
}

{
  uint64_t vars8;

  TraceNodeNet::~TraceNodeNet(this);

  JUMPOUT(0x216698730);
}

void *TraceNodeNet::deleteOutPorts(TraceNodeNet *this)
{
  *((_DWORD *)this + 13) = 2;
  uint64_t v2 = *((unsigned int *)this + 20);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = v2 + 1;
    do
    {
      uint64_t v4 = *(void *)(*((void *)this + 9) + 8 * (v3 - 2));
      BitArray::~BitArray((BitArray *)(v4 + 48));
      DgnIArray<Utterance *>::~DgnIArray(v4 + 32);
      PredStruct::~PredStruct((PredStruct *)(v4 + 16));
      --v3;
    }
    while (v3 > 1);
  }
  uint64_t result = (void *)**((void **)this + 9);
  if (result) {
    uint64_t result = (void *)MemChunkFree(result, 0);
  }
  uint64_t v6 = *((unsigned int *)this + 20);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = v6 + 1;
    do
      *(void *)(*((void *)this + 9) + 8 * (v7-- - 2)) = 0;
    while (v7 > 1);
  }
  return result;
}

void TraceNodeNet::newNode(TraceNodeNet *this, char a2)
{
  unint64_t v3 = MemChunkAlloc(0x60uLL, 0);

  TraceNode::TraceNode((TraceNode *)v3, a2);
}

void TraceNodeNet::configureOutPorts(TraceNodeNet *this, int a2)
{
  HmmNet::initEndIndices(this);
  if (a2 && !*((_DWORD *)this + 20))
  {
    *((void *)this + 9) = MemChunkAlloc(8 * a2, 0);
    *((_DWORD *)this + 2MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = a2;
  }
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = MemChunkAlloc((uint64_t)a2 << 6, 0);
  if (a2 >= 1)
  {
    uint64_t v5 = v4;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = (unint64_t)a2 << 6;
    do
    {
      unint64_t v9 = &v5[v7 / 8];
      *unint64_t v9 = 0x100000001;
      *((_DWORD *)v9 + 2) = 1310740000;
      void v9[2] = 0;
      *((_WORD *)v9 + 12) = 0;
      SeederStruct::SeederStruct((SeederStruct *)&v5[v7 / 8 + 4]);
      DgnString::DgnString((DgnString *)&v5[v7 / 8 + 6]);
      *(void *)(*((void *)this + 9) + v6) = &v5[v7 / 8];
      v7 += 64;
      v6 += 8;
    }
    while (v8 != v7);
  }
}

void sub_21404B850(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v1 + v2 + 32);
  PredStruct::~PredStruct((PredStruct *)(v1 + v2 + 16));
  _Unwind_Resume(a1);
}

uint64_t TraceNodeNet::sizeofOutPorts(uint64_t a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v4 = 8;
    }
    else {
      uint64_t v4 = 12;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      char v5 = 2;
      if (!gShadowDiagnosticShowIdealizedObjectSizes) {
        char v5 = 3;
      }
      v4 += (unint64_t)*(unsigned int *)(a1 + 80) << v5;
    }
  }
  if (!*(_DWORD *)(a1 + 52) && *(_DWORD *)(a1 + 80))
  {
    unint64_t v6 = 0;
    do
      v4 += sizeObject(*(void *)(*(void *)(a1 + 72) + 8 * v6++), a2);
    while (v6 < *(unsigned int *)(a1 + 80));
  }
  return v4;
}

BOOL TraceNodeNet::hasSegments(int a1, uint64_t a2, int a3)
{
  return (int)SeederStruct::findSeederIndex((SeederStruct *)(a2 + 32), a3) >= 0;
}

uint64_t TraceNodeNet::wasEnding(int a1, TraceExternalOutPort *this, int a3)
{
  return TraceExternalOutPort::wasEnding(this, a3);
}

uint64_t TraceExternalOutPort::wasEnding(TraceExternalOutPort *this, int a2)
{
  int v2 = *((_DWORD *)this + 10);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 4);
  int v4 = *(_DWORD *)(v3 + 8);
  int v5 = *(_DWORD *)(v3 + 16 * (v2 - 1) + 12);
  if (v4 != a2 && v5 == v4) {
    return 0;
  }
  unsigned int v7 = v5 >= v4 ? a2 - v4 : v4 - a2;
  if (v7 >= *((_DWORD *)this + 14)) {
    return 0;
  }
  else {
    return (*(_DWORD *)(*((void *)this + 6) + 4 * (v7 >> 5)) >> v7) & 1;
  }
}

uint64_t TraceNodeNet::appendCalculatedSegments(int a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a2 + 32)
                 + 16 * SeederStruct::findSeederIndex((SeederStruct *)(a2 + 32), a3));
  int v7 = a3 + 1;
  do
  {
    if (*(__int16 *)(v6 + 30) != -1)
    {
      if (*(unsigned char *)(v6 + 42))
      {
        int v8 = 0;
      }
      else
      {
        int v8 = 0;
        do
        {
          ++v8;
          --v7;
        }
        while (*(void *)(*(void *)(v6 + 64)
                          + 16 * SeederStruct::findSeederIndex((SeederStruct *)(v6 + 64), v7)) == v6);
      }
      unint64_t v9 = MemChunkAlloc(0x28uLL, 0);
      uint64_t v10 = v9;
      int v11 = *(__int16 *)(v6 + 80);
      *(_DWORD *)unint64_t v9 = v7;
      *((_WORD *)v9 + 2) = *(_WORD *)(v6 + 30);
      *((_DWORD *)v9 + 2) = v8;
      *((_DWORD *)v9 + 3) = v11;
      uint64_t v12 = *(void *)(v6 + 44);
      *((_WORD *)v9 + 12) = *(_WORD *)(v6 + 52);
      void v9[2] = v12;
      *((unsigned char *)v9 + 26) = *(unsigned char *)(v6 + 54);
      *((unsigned char *)v9 + 27) = *(unsigned char *)(v6 + 55);
      *((_WORD *)v9 + 14) = *(unsigned __int8 *)(v6 + 28);
      int v13 = *(__int16 *)(v6 + 24);
      if (v13 < 0) {
        int v14 = *(char *)(v6 + 29) + v13;
      }
      else {
        int v14 = *(char *)(v6 + 29);
      }
      *((_DWORD *)v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
      *((_WORD *)v9 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
      unsigned int v15 = *(_DWORD *)(a4 + 8);
      if (v15 == *(_DWORD *)(a4 + 12))
      {
        DgnPrimArray<unsigned long long>::reallocElts(a4, 1, 1);
        unsigned int v15 = *(_DWORD *)(a4 + 8);
      }
      *(void *)(*(void *)a4 + 8 * v15) = v10;
      *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v15 + 1;
    }
    unsigned int SeederIndex = SeederStruct::findSeederIndex((SeederStruct *)(v6 + 64), v7);
    if (*(unsigned char *)(v6 + 82)) {
      BOOL v17 = *(void *)(*(void *)(v6 + 64) + 16 * SeederIndex) == v6;
    }
    else {
      BOOL v17 = 1;
    }
    uint64_t v6 = *(void *)(*(void *)(v6 + 64) + 16 * SeederIndex);
  }
  while (v17);
  return (v7 - 1);
}

uint64_t TraceNodeNet::isTraceNet(TraceNodeNet *this)
{
  return 1;
}

void TraceNode::TraceNode(TraceNode *this, char a2)
{
  NodeNetNode::NodeNetNode(this, a2);
  *(void *)uint64_t v3 = &unk_26C4E5A68;
  *(void *)(v3 + 44) = -1;
  *(_WORD *)(v3 + 52) = -1;
  *(_DWORD *)(v3 + 54) = -65536;
  SeederStruct::SeederStruct((SeederStruct *)(v3 + 64));
  *((unsigned char *)this + 82) = 0;
}

void sub_21404BBA4(_Unwind_Exception *a1)
{
  NodeNetNode::~NodeNetNode(v1);
  _Unwind_Resume(a1);
}

void SeederStruct::SeederStruct(SeederStruct *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this, 1, 0);
}

void sub_21404BBEC(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

uint64_t SeederStruct::findSeederIndex(SeederStruct *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  for (unint64_t i = (int *)(*(void *)this + 12); ; i += 4)
  {
    int v6 = *(i - 1);
    if (v6 == a2) {
      break;
    }
    int v7 = *i;
    if (*i == a2) {
      break;
    }
    if (v6 < a2 && v7 > a2) {
      break;
    }
    if (v6 > a2 && v7 < a2) {
      break;
    }
    if (v2 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void *DgnIOwnArray<NodeNetNode *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<NodeNetNode>(*(void (****)(void))(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

void (***DgnDelete<NodeNetNode>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t MrecInitLibrary_user(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_picmgr_user();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_user_user();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughUser(void)
{
  MrecInitLibrarySet_throughPel();
  MrecInitLibrarySet_throughPhoneme();

  return MrecInitLibrary_user();
}

uint64_t MrecInitLibrary_sigproc(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_ltf_sigproc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_spdebug_sigproc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sputtdet_sigproc();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_wavepac_sigproc();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughSigproc(void)
{
  MrecInitLibrarySet_throughFrame();

  return MrecInitLibrary_sigproc();
}

void MrecInitModule_pelsc_pel(void)
{
  if (!gParDebugShowShortListBitVector)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowShortListBitVector", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugShowShortListBitVector = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowShortListBitVector);
  }
  if (!gParDiagnosticPackedIntPelScoring)
  {
    uint64_t v2 = (__n128 *)MemChunkAlloc(0x40uLL, 0);
    EnumParamRange::EnumParamRange((uint64_t)&v15, (uint64_t)&sDiagnosticPackedIntPelScoringEnum);
    EnumGlobalParamBase::EnumGlobalParamBase(v2, (unint64_t)"DiagnosticPackedIntPelScoring", (unint64_t)&byte_2140B33BB, (unint64_t)&byte_2140B33BB, 0, (__n128 *)&v15, 0);
    v2->n128_u64[0] = (unint64_t)&unk_26C4E0B78;
    gParDiagnosticPackedIntPelScoring = (uint64_t)v2;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPackedIntPelScoring);
  }
  if (!gParDebugAcousticReferencePackedIntScoring)
  {
    uint64_t v3 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v3, "DebugAcousticReferencePackedIntScoring", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v4 = &unk_26C4E0858;
    gParDebugAcousticReferencePackedIntScoring = (uint64_t)v4;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAcousticReferencePackedIntScoring);
  }
  if (!gParDebugAcousticFloatScoring)
  {
    int v5 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v5, "DebugAcousticFloatScoring", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v6 = &unk_26C4E0858;
    gParDebugAcousticFloatScoring = (uint64_t)v6;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAcousticFloatScoring);
  }
  if (!gParDebugAcousticMicReferenceScoring)
  {
    int v7 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v7, "DebugAcousticMicReferenceScoring", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *int v8 = &unk_26C4E0858;
    gParDebugAcousticMicReferenceScoring = (uint64_t)v8;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAcousticMicReferenceScoring);
  }
  if (!gParDebugQuantPerDimPelScoring)
  {
    unint64_t v9 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v9, "DebugQuantPerDimPelScoring", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v10 = &unk_26C4E0858;
    gParDebugQuantPerDimPelScoring = (uint64_t)v10;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugQuantPerDimPelScoring);
  }
  if (!gParDebugShowTransformedFeatures)
  {
    int v11 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v11, "DebugShowTransformedFeatures", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v12 = &unk_26C4E0858;
    gParDebugShowTransformedFeatures = (uint64_t)v12;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowTransformedFeatures);
  }
  if (!gParDiagnosticAttilaAcousticScoreScale)
  {
    int v13 = MemChunkAlloc(0x48uLL, 0);
    long long v15 = xmmword_2140AB080;
    int v14 = (void *)DoubleGlobalParamBase::DoubleGlobalParamBase((uint64_t)v13, (uint64_t)"DiagnosticAttilaAcousticScoreScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, &v15, 0, 0.0);
    *int v14 = &unk_26C4E1508;
    gParDiagnosticAttilaAcousticScoreScale = (uint64_t)v14;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticAttilaAcousticScoreScale);
  }
}

void PelScorer::PelScorer(PelScorer *this, const PelMgr *a2, const GenoneClassTree *a3, const VarClassMgr *a4, const FmpeMgr *a5, const NeuralNet *a6, const Imelda *a7, int a8, double a9, double a10, BOOL a11)
{
  *(void *)this = &unk_26C4E57A8;
  if (MemChunkRegion::smTlsID != -1)
  {
    uint64_t v20 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v20)
    {
      unsigned int v21 = *v20;
      if (*v20) {
        goto LABEL_6;
      }
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
  }
  unsigned int v21 = &gGlobalMemChunkRegion;
LABEL_6:
  *((void *)this + 1) = v21;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = a3;
  *((void *)this + 6) = a4;
  *((void *)this + 7) = a5;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a6;
  *((void *)this + 9) = a7;
  uint64_t v22 = *(void *)a2;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = 0;
  uint64_t v23 = *((void *)a2 + 62);
  int v24 = *((_DWORD *)a2 + 38);
  *((void *)this + 15) = 0;
  *((void *)this + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v22;
  *((void *)this + 13) = v23;
  *((_DWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((_DWORD *)this + 29) = v24;
  *(_DWORD *)((char *)this + 127) = 0;
  *((unsigned char *)this + 131) = a11;
  *((double *)this + 17) = a9;
  *((double *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a10;
  *((_DWORD *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -16;
  *((_OWORD *)this + 1MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *((void *)this + 34) = 0;
  *((_OWORD *)this + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 11) = 0u;
  if (a4) {
    int v25 = *(_DWORD *)a4;
  }
  else {
    int v25 = 0;
  }
  *((_DWORD *)this + 7MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = v25;
  *(void *)((char *)this + 284) = 0;
  *(_OWORD *)((char *)this + 296) = 0uLL;
  *(_OWORD *)((char *)this + 312) = 0uLL;
  AlignedArray<short>::AlignedArray((uint64_t)this + 328, *((_DWORD *)a2 + 56));
  *((_OWORD *)this + 3MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *(_OWORD *)((char *)this + 50DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_WORD *)this + 32MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0) = 0;
  int v26 = MemChunkAlloc(0x1F0uLL, 0);
  PelScoreCache::PelScoreCache((uint64_t)v26, (uint64_t)this, *((void *)this + 2) + 376, *((void *)this + 2) + 288);
  *((void *)this + 15) = v27;
  if (a5)
  {
    uint64_t v28 = MemChunkAlloc(0x298uLL, 0);
    *((void *)this + 11) = OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)v28, *(const PelMgr **)(*((void *)this + 7) + 112), 0, 0, 0, a6, 0, 0, *((double *)this + 17), *((unsigned char *)this + 131), a10);
  }
  if (a8)
  {
    char v29 = MemChunkAlloc(0x298uLL, 0);
    *((void *)this + 12) = OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)v29, a2, 0, 0, 0, a6, a7, 0, *((double *)this + 17), *((unsigned char *)this + 131), a10);
  }
}

void sub_21404C500(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  _Unwind_Resume(a1);
}

void OnDemandPelScorer::OnDemandPelScorer(OnDemandPelScorer *this, const PelMgr *a2, const GenoneClassTree *a3, const VarClassMgr *a4, const FmpeMgr *a5, const NeuralNet *a6, const Imelda *a7, int a8, double a9, double a10, BOOL a11)
{
}

{
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;

  PelScorer::PelScorer(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  *int v13 = &unk_26C4E1610;
  int v14 = v13 + 81;
  *(_OWORD *)(v13 + 81) = 0u;
  if (*((_DWORD *)a2 + 3) == 3)
  {
    long long v15 = *((void *)a2 + 6);
    uint64_t v16 = *((void *)a2 + 10);
    BOOL v17 = *((unsigned int *)a2 + 33);
    if (32 * v17)
    {
      int v25 = 0;
      *((_DWORD *)this + 165) = realloc_array(0, &v25, (32 * v17), 0, 0, 1);
      *((void *)this + 81) = v25;
    }
    *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 32 * v17;
    if (v17)
    {
      unsigned int v18 = 0;
      int v19 = 0;
      do
      {
        uint64_t v20 = 0;
        unsigned int v21 = (16 * v18);
        uint64_t v22 = v16 + v21;
        uint64_t v23 = v15 + v21;
        do
        {
          *(unsigned char *)(*v14 + (v19 + v20)) = *(unsigned char *)(v23 + v20);
          ++v20;
        }
        while (v20 != 16);
        for (unint64_t i = 0; i != 16; ++i)
          *(unsigned char *)(*v14 + (v19 + 16 + i)) = *(unsigned char *)(v22 + i);
        ++v18;
        v19 += 32;
      }
      while (v18 != v17);
    }
  }
}

void PelScorer::~PelScorer(PelScorer *this)
{
  *(void *)this = &unk_26C4E57A8;
  DgnDelete<PelScoreCache>(*((PelScoreCache **)this + 15));
  *((void *)this + 15) = 0;
  DgnDelete<PelScorer>(*((void *)this + 11));
  *((void *)this + 11) = 0;
  DgnDelete<PelScorer>(*((void *)this + 12));
  *((void *)this + 12) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 624);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 584);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 568);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 552);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 536);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 504);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 488);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 448);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 432);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 416);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 384);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 368);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 352);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
}

PelScoreCache *DgnDelete<PelScoreCache>(PelScoreCache *result)
{
  if (result)
  {
    PelScoreCache::~PelScoreCache(result);
    return (PelScoreCache *)MemChunkFree(v1, 0);
  }
  return result;
}

void PelScorer::printSize(PelScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 448, (DgnString *)&v496);
  if (v497) {
    uint64_t v16 = (char *)v496;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v496);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v22 = (a3 + 1);
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 449, (DgnString *)&v496);
  if (v497) {
    uint64_t v28 = (char *)v496;
  }
  else {
    uint64_t v28 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v29 = 4;
  }
  else {
    uint64_t v29 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 450, (DgnString *)&v496);
  if (v497) {
    unsigned int v34 = (char *)v496;
  }
  else {
    unsigned int v34 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v29;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v35 = 4;
  }
  else {
    uint64_t v35 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 451, (DgnString *)&v496);
  if (v497) {
    uint64_t v40 = (char *)v496;
  }
  else {
    uint64_t v40 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v35;
  *a5 += v35;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v41 = 4;
  }
  else {
    uint64_t v41 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 452, (DgnString *)&v496);
  if (v497) {
    uint64_t v46 = (char *)v496;
  }
  else {
    uint64_t v46 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v46, v41, v41, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v41;
  *a5 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v47 = 4;
  }
  else {
    uint64_t v47 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 453, (DgnString *)&v496);
  if (v497) {
    uint64_t v52 = (char *)v496;
  }
  else {
    uint64_t v52 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v47;
  *a5 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 454, (DgnString *)&v496);
  if (v497) {
    uint64_t v58 = (char *)v496;
  }
  else {
    uint64_t v58 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v53;
  *a5 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 4;
  }
  else {
    uint64_t v59 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 455, (DgnString *)&v496);
  if (v497) {
    int v64 = (char *)v496;
  }
  else {
    int v64 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v59;
  *a5 += v59;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v65 = 4;
  }
  else {
    uint64_t v65 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 456, (DgnString *)&v496);
  if (v497) {
    uint64_t v70 = (char *)v496;
  }
  else {
    uint64_t v70 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v70, v65, v65, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v65;
  *a5 += v65;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v71 = 4;
  }
  else {
    uint64_t v71 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 457, (DgnString *)&v496);
  if (v497) {
    char v76 = (char *)v496;
  }
  else {
    char v76 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v76, v71, v71, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v71;
  *a5 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v77 = 4;
  }
  else {
    uint64_t v77 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 458, (DgnString *)&v496);
  if (v497) {
    unint64_t v82 = (char *)v496;
  }
  else {
    unint64_t v82 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v82, v77, v77, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v77;
  *a5 += v77;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v83 = 4;
  }
  else {
    uint64_t v83 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 459, (DgnString *)&v496);
  if (v497) {
    uint64_t v88 = (char *)v496;
  }
  else {
    uint64_t v88 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v88, v83, v83, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v83;
  *a5 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v89 = 4;
  }
  else {
    uint64_t v89 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 460, (DgnString *)&v496);
  if (v497) {
    uint64_t v94 = (char *)v496;
  }
  else {
    uint64_t v94 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v94, v89, v89, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v89;
  *a5 += v89;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 461, (DgnString *)&v496);
  if (v497) {
    uint64_t v99 = (char *)v496;
  }
  else {
    uint64_t v99 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v99, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 462, (DgnString *)&v496);
  if (v497) {
    uint64_t v104 = (char *)v496;
  }
  else {
    uint64_t v104 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v104, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 464, (DgnString *)&v496);
  if (v497) {
    uint64_t v109 = (char *)v496;
  }
  else {
    uint64_t v109 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v109, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  uint64_t v110 = (PelScoreCache *)*((void *)this + 15);
  if (v110)
  {
    unint64_t v495 = 0;
    unint64_t v496 = 0;
    unint64_t v494 = 0;
    PelScoreCache::printSize(v110, 0xFFFFFFFFLL, (a3 + 1), &v496, &v495, &v494);
    *a4 += v496;
    *a5 += v495;
    *a6 += v494;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v111 = 4;
  }
  else {
    uint64_t v111 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 466, (DgnString *)&v496);
  if (v497) {
    uint64_t v116 = (char *)v496;
  }
  else {
    uint64_t v116 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v116, v111, v111, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v111;
  *a5 += v111;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 477, (DgnString *)&v496);
  if (v497) {
    uint64_t v121 = (char *)v496;
  }
  else {
    uint64_t v121 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v121, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v496);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 479, (DgnString *)&v496);
  if (v497) {
    uint64_t v126 = (char *)v496;
  }
  else {
    uint64_t v126 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v126, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v496);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 481, (DgnString *)&v496);
  if (v497) {
    uint64_t v131 = (char *)v496;
  }
  else {
    uint64_t v131 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v131, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v496);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 483, (DgnString *)&v496);
  if (v497) {
    uint64_t v136 = (char *)v496;
  }
  else {
    uint64_t v136 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v136, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v496);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 485, (DgnString *)&v496);
  if (v497) {
    uint64_t v141 = (char *)v496;
  }
  else {
    uint64_t v141 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v141, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 487, (DgnString *)&v496);
  if (v497) {
    uint64_t v146 = (char *)v496;
  }
  else {
    uint64_t v146 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v146, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 488, (DgnString *)&v496);
  if (v497) {
    uint64_t v151 = (char *)v496;
  }
  else {
    uint64_t v151 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v151, 4, 4, 0);
  uint64_t v493 = a3;
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v152 = 12;
  }
  else {
    uint64_t v152 = 16;
  }
  int v153 = *((_DWORD *)this + 42);
  unsigned int v154 = *((_DWORD *)this + 43);
  BOOL v155 = v154 >= v153;
  uint64_t v156 = v154 - v153;
  if (v155)
  {
    uint64_t v158 = v153 & ~(v153 >> 31);
    int v153 = 0;
    uint64_t v157 = v152 + v158;
    v152 += v158 + v156;
  }
  else
  {
    uint64_t v157 = v152;
  }
  uint64_t v159 = v153;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 489, (DgnString *)&v496);
  if (v497) {
    uint64_t v164 = (char *)v496;
  }
  else {
    uint64_t v164 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v22, &byte_2140B33BB, v23, v23, v164, v152, v157, v159);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v152;
  *a5 += v157;
  *a6 += v159;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v165 = 12;
  }
  else {
    uint64_t v165 = 16;
  }
  int v166 = *((_DWORD *)this + 46);
  unsigned int v167 = *((_DWORD *)this + 47);
  BOOL v155 = v167 >= v166;
  uint64_t v168 = v167 - v166;
  if (v155)
  {
    uint64_t v170 = v166 & ~(v166 >> 31);
    int v166 = 0;
    uint64_t v169 = v165 + v170;
    v165 += v170 + v168;
  }
  else
  {
    uint64_t v169 = v165;
  }
  uint64_t v171 = v166;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 491, (DgnString *)&v496);
  if (v497) {
    uint64_t v176 = (char *)v496;
  }
  else {
    uint64_t v176 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v22, &byte_2140B33BB, v23, v23, v176, v165, v169, v171);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v165;
  *a5 += v169;
  *a6 += v171;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v177 = 4;
  }
  else {
    uint64_t v177 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 493, (DgnString *)&v496);
  if (v497) {
    uint64_t v182 = (char *)v496;
  }
  else {
    uint64_t v182 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v22, &byte_2140B33BB, v23, v23, v182, v177, v177, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v177;
  *a5 += v177;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v183 = 12;
  }
  else {
    uint64_t v183 = 16;
  }
  int v184 = *((_DWORD *)this + 52);
  unsigned int v185 = *((_DWORD *)this + 53);
  BOOL v155 = v185 >= v184;
  uint64_t v186 = v185 - v184;
  if (v155)
  {
    uint64_t v188 = v184 & ~(v184 >> 31);
    int v184 = 0;
    uint64_t v187 = v183 + v188;
    v183 += v188 + v186;
  }
  else
  {
    uint64_t v187 = v183;
  }
  uint64_t v189 = v184;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 495, (DgnString *)&v496);
  if (v497) {
    uint64_t v194 = (char *)v496;
  }
  else {
    uint64_t v194 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v22, &byte_2140B33BB, v23, v23, v194, v183, v187, v189);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v183;
  *a5 += v187;
  *a6 += v189;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v195 = 12;
  }
  else {
    uint64_t v195 = 16;
  }
  int v196 = *((_DWORD *)this + 56);
  unsigned int v197 = *((_DWORD *)this + 57);
  BOOL v155 = v197 >= v196;
  uint64_t v198 = v197 - v196;
  if (v155)
  {
    uint64_t v200 = v196 & ~(v196 >> 31);
    int v196 = 0;
    uint64_t v199 = v195 + v200;
    v195 += v200 + v198;
  }
  else
  {
    uint64_t v199 = v195;
  }
  uint64_t v201 = v196;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 497, (DgnString *)&v496);
  if (v497) {
    uint64_t v206 = (char *)v496;
  }
  else {
    uint64_t v206 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v202, v203, v204, v205, v22, &byte_2140B33BB, v23, v23, v206, v195, v199, v201);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v195;
  *a5 += v199;
  *a6 += v201;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v207 = 12;
  }
  else {
    uint64_t v207 = 16;
  }
  uint64_t v208 = *((unsigned int *)this + 60);
  unsigned int v209 = *((_DWORD *)this + 61);
  if (v209 >= v208)
  {
    uint64_t v210 = 0;
    if ((int)v208 > 0) {
      uint64_t v207 = (v207 | 2) + 2 * (v208 - 1);
    }
    uint64_t v211 = v207 + 2 * (v209 - v208);
  }
  else
  {
    uint64_t v210 = 2 * v208;
    uint64_t v211 = v207;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 498, (DgnString *)&v496);
  if (v497) {
    uint64_t v216 = (char *)v496;
  }
  else {
    uint64_t v216 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v212, v213, v214, v215, v22, &byte_2140B33BB, v23, v23, v216, v211, v207, v210);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v211;
  *a5 += v207;
  *a6 += v210;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v217 = 12;
  }
  else {
    uint64_t v217 = 16;
  }
  uint64_t v218 = *((unsigned int *)this + 64);
  unsigned int v219 = *((_DWORD *)this + 65);
  if (v219 >= v218)
  {
    uint64_t v220 = 0;
    if ((int)v218 > 0) {
      uint64_t v217 = (v217 | 2) + 2 * (v218 - 1);
    }
    uint64_t v221 = v217 + 2 * (v219 - v218);
  }
  else
  {
    uint64_t v220 = 2 * v218;
    uint64_t v221 = v217;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 500, (DgnString *)&v496);
  if (v497) {
    uint64_t v226 = (char *)v496;
  }
  else {
    uint64_t v226 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v222, v223, v224, v225, v22, &byte_2140B33BB, v23, v23, v226, v221, v217, v220);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v221;
  *a5 += v217;
  *a6 += v220;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 502, (DgnString *)&v496);
  if (v497) {
    uint64_t v231 = (char *)v496;
  }
  else {
    uint64_t v231 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v227, v228, v229, v230, v22, &byte_2140B33BB, v23, v23, v231, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 504, (DgnString *)&v496);
  if (v497) {
    uint64_t v236 = (char *)v496;
  }
  else {
    uint64_t v236 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v22, &byte_2140B33BB, v23, v23, v236, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 505, (DgnString *)&v496);
  if (v497) {
    uint64_t v241 = (char *)v496;
  }
  else {
    uint64_t v241 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v237, v238, v239, v240, v22, &byte_2140B33BB, v23, v23, v241, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 506, (DgnString *)&v496);
  if (v497) {
    uint64_t v246 = (char *)v496;
  }
  else {
    uint64_t v246 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v22, &byte_2140B33BB, v23, v23, v246, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 507, (DgnString *)&v496);
  if (v497) {
    uint64_t v251 = (char *)v496;
  }
  else {
    uint64_t v251 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v247, v248, v249, v250, v22, &byte_2140B33BB, v23, v23, v251, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 509, (DgnString *)&v496);
  if (v497) {
    uint64_t v256 = (char *)v496;
  }
  else {
    uint64_t v256 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v22, &byte_2140B33BB, v23, v23, v256, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 511, (DgnString *)&v496);
  if (v497) {
    uint64_t v261 = (char *)v496;
  }
  else {
    uint64_t v261 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v257, v258, v259, v260, v22, &byte_2140B33BB, v23, v23, v261, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v262 = 12;
  }
  else {
    uint64_t v262 = 16;
  }
  uint64_t v263 = *((unsigned int *)this + 76);
  unsigned int v264 = *((_DWORD *)this + 77);
  if (v264 >= v263)
  {
    uint64_t v265 = 0;
    if ((int)v263 > 0) {
      v262 += 4 * (v263 - 1) + 4;
    }
    uint64_t v266 = v262 + 4 * (v264 - v263);
  }
  else
  {
    uint64_t v265 = 4 * v263;
    uint64_t v266 = v262;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 513, (DgnString *)&v496);
  if (v497) {
    unsigned int v271 = (char *)v496;
  }
  else {
    unsigned int v271 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v267, v268, v269, v270, v22, &byte_2140B33BB, v23, v23, v271, v266, v262, v265);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v266;
  *a5 += v262;
  *a6 += v265;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v272 = 12;
  }
  else {
    uint64_t v272 = 16;
  }
  uint64_t v273 = *((unsigned int *)this + 80);
  unsigned int v274 = *((_DWORD *)this + 81);
  if (v274 >= v273)
  {
    uint64_t v275 = 0;
    if ((int)v273 > 0) {
      v272 += 4 * (v273 - 1) + 4;
    }
    uint64_t v276 = v272 + 4 * (v274 - v273);
  }
  else
  {
    uint64_t v275 = 4 * v273;
    uint64_t v276 = v272;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 515, (DgnString *)&v496);
  if (v497) {
    uint64_t v281 = (char *)v496;
  }
  else {
    uint64_t v281 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v277, v278, v279, v280, v22, &byte_2140B33BB, v23, v23, v281, v276, v272, v275);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v276;
  *a5 += v272;
  *a6 += v275;
  uint64_t v282 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v282 = 16;
  }
  uint64_t v283 = *((unsigned int *)this + 84);
  unsigned int v284 = *((_DWORD *)this + 85);
  if (v284 >= v283)
  {
    uint64_t v285 = 0;
    if ((int)v283 > 0) {
      uint64_t v282 = (v282 | 2) + 2 * (v283 - 1);
    }
    uint64_t v286 = v282 + 2 * (v284 - v283);
  }
  else
  {
    uint64_t v285 = 2 * v283;
    uint64_t v286 = v282;
  }
  uint64_t v287 = v286 + 4;
  uint64_t v288 = v282 + 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 517, (DgnString *)&v496);
  if (v497) {
    int v293 = (char *)v496;
  }
  else {
    int v293 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v289, v290, v291, v292, v22, &byte_2140B33BB, v23, v23, v293, v287, v288, v285);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v287;
  *a5 += v288;
  *a6 += v285;
  uint64_t v294 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 352, 0);
  uint64_t v295 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 352, 1);
  unint64_t v496 = 0;
  uint64_t v497 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v496);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 519, (DgnString *)&v496);
  if (v497) {
    uint64_t v300 = (char *)v496;
  }
  else {
    uint64_t v300 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v296, v297, v298, v299, v22, &byte_2140B33BB, v23, v23, v300, v294, v295, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v294;
  *a5 += v295;
  uint64_t v301 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 368, 0);
  uint64_t v302 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 368, 1);
  unint64_t v496 = 0;
  uint64_t v497 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v496);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 521, (DgnString *)&v496);
  if (v497) {
    uint64_t v307 = (char *)v496;
  }
  else {
    uint64_t v307 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v303, v304, v305, v306, v22, &byte_2140B33BB, v23, v23, v307, v301, v302, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v301;
  *a5 += v302;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v308 = 12;
  }
  else {
    uint64_t v308 = 16;
  }
  uint64_t v309 = *((unsigned int *)this + 98);
  unsigned int v310 = *((_DWORD *)this + 99);
  if (v310 >= v309)
  {
    uint64_t v311 = 0;
    if ((int)v309 > 0) {
      v308 += 4 * (v309 - 1) + 4;
    }
    uint64_t v312 = v308 + 4 * (v310 - v309);
  }
  else
  {
    uint64_t v311 = 4 * v309;
    uint64_t v312 = v308;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 523, (DgnString *)&v496);
  if (v497) {
    uint64_t v317 = (char *)v496;
  }
  else {
    uint64_t v317 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v22, &byte_2140B33BB, v23, v23, v317, v312, v308, v311);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v312;
  *a5 += v308;
  *a6 += v311;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v318 = 12;
  }
  else {
    uint64_t v318 = 16;
  }
  int v319 = *((_DWORD *)this + 102);
  unsigned int v320 = *((_DWORD *)this + 103);
  BOOL v155 = v320 >= v319;
  uint64_t v321 = v320 - v319;
  if (v155)
  {
    uint64_t v323 = v319 & ~(v319 >> 31);
    int v319 = 0;
    uint64_t v322 = v318 + v323;
    v318 += v323 + v321;
  }
  else
  {
    uint64_t v322 = v318;
  }
  uint64_t v324 = v319;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 525, (DgnString *)&v496);
  if (v497) {
    uint64_t v329 = (char *)v496;
  }
  else {
    uint64_t v329 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v325, v326, v327, v328, v22, &byte_2140B33BB, v23, v23, v329, v318, v322, v324);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v318;
  *a5 += v322;
  *a6 += v324;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v330 = 12;
  }
  else {
    uint64_t v330 = 16;
  }
  uint64_t v331 = *((unsigned int *)this + 106);
  unsigned int v332 = *((_DWORD *)this + 107);
  if (v332 >= v331)
  {
    uint64_t v333 = 0;
    if ((int)v331 > 0) {
      v330 += 8 * (v331 - 1) + 8;
    }
    uint64_t v334 = v330 + 8 * (v332 - v331);
  }
  else
  {
    uint64_t v333 = 8 * v331;
    uint64_t v334 = v330;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 527, (DgnString *)&v496);
  if (v497) {
    uint64_t v339 = (char *)v496;
  }
  else {
    uint64_t v339 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v335, v336, v337, v338, v22, &byte_2140B33BB, v23, v23, v339, v334, v330, v333);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v334;
  *a5 += v330;
  *a6 += v333;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v340 = 12;
  }
  else {
    uint64_t v340 = 16;
  }
  uint64_t v341 = *((unsigned int *)this + 110);
  unsigned int v342 = *((_DWORD *)this + 111);
  if (v342 >= v341)
  {
    uint64_t v343 = 0;
    if ((int)v341 > 0) {
      v340 += 8 * (v341 - 1) + 8;
    }
    uint64_t v344 = v340 + 8 * (v342 - v341);
  }
  else
  {
    uint64_t v343 = 8 * v341;
    uint64_t v344 = v340;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 529, (DgnString *)&v496);
  if (v497) {
    v349 = (char *)v496;
  }
  else {
    v349 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v345, v346, v347, v348, v22, &byte_2140B33BB, v23, v23, v349, v344, v340, v343);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v344;
  *a5 += v340;
  *a6 += v343;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v350 = 12;
  }
  else {
    uint64_t v350 = 16;
  }
  uint64_t v351 = *((unsigned int *)this + 114);
  unsigned int v352 = *((_DWORD *)this + 115);
  if (v352 >= v351)
  {
    uint64_t v353 = 0;
    if ((int)v351 > 0) {
      v350 += 8 * (v351 - 1) + 8;
    }
    uint64_t v354 = v350 + 8 * (v352 - v351);
  }
  else
  {
    uint64_t v353 = 8 * v351;
    uint64_t v354 = v350;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 531, (DgnString *)&v496);
  if (v497) {
    uint64_t v359 = (char *)v496;
  }
  else {
    uint64_t v359 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v355, v356, v357, v358, v22, &byte_2140B33BB, v23, v23, v359, v354, v350, v353);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v354;
  *a5 += v350;
  *a6 += v353;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 533, (DgnString *)&v496);
  if (v497) {
    uint64_t v364 = (char *)v496;
  }
  else {
    uint64_t v364 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v360, v361, v362, v363, v22, &byte_2140B33BB, v23, v23, v364, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 535, (DgnString *)&v496);
  if (v497) {
    uint64_t v369 = (char *)v496;
  }
  else {
    uint64_t v369 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v365, v366, v367, v368, v22, &byte_2140B33BB, v23, v23, v369, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 8;
  *a5 += 8;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v370 = 4;
  }
  else {
    uint64_t v370 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 536, (DgnString *)&v496);
  if (v497) {
    uint64_t v375 = (char *)v496;
  }
  else {
    uint64_t v375 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v371, v372, v373, v374, v22, &byte_2140B33BB, v23, v23, v375, v370, v370, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v370;
  *a5 += v370;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v376 = 12;
  }
  else {
    uint64_t v376 = 16;
  }
  uint64_t v377 = *((unsigned int *)this + 124);
  unsigned int v378 = *((_DWORD *)this + 125);
  if (v378 >= v377)
  {
    uint64_t v379 = 0;
    if ((int)v377 > 0) {
      v376 += 4 * (v377 - 1) + 4;
    }
    uint64_t v380 = v376 + 4 * (v378 - v377);
  }
  else
  {
    uint64_t v379 = 4 * v377;
    uint64_t v380 = v376;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 538, (DgnString *)&v496);
  if (v497) {
    uint64_t v385 = (char *)v496;
  }
  else {
    uint64_t v385 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v381, v382, v383, v384, v22, &byte_2140B33BB, v23, v23, v385, v380, v376, v379);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v380;
  *a5 += v376;
  *a6 += v379;
  uint64_t v386 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v386 = 16;
  }
  uint64_t v387 = *((unsigned int *)this + 128);
  char v388 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v388 = 3;
  }
  uint64_t v389 = (((*((_DWORD *)this + 129) - v387) + v387) << v388) + v386;
  uint64_t v390 = (v387 << v388) + v386;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 540, (DgnString *)&v496);
  if (v497) {
    uint64_t v395 = (char *)v496;
  }
  else {
    uint64_t v395 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v391, v392, v393, v394, v22, &byte_2140B33BB, v23, v23, v395, v389, v390, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v389;
  *a5 += v390;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 542, (DgnString *)&v496);
  if (v497) {
    uint64_t v400 = (char *)v496;
  }
  else {
    uint64_t v400 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v396, v397, v398, v399, v22, &byte_2140B33BB, v23, v23, v400, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v401 = 4;
  }
  else {
    uint64_t v401 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 544, (DgnString *)&v496);
  if (v497) {
    uint64_t v406 = (char *)v496;
  }
  else {
    uint64_t v406 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v402, v403, v404, v405, v22, &byte_2140B33BB, v23, v23, v406, v401, v401, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v401;
  *a5 += v401;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v407 = 12;
  }
  else {
    uint64_t v407 = 16;
  }
  uint64_t v408 = *((unsigned int *)this + 136);
  unsigned int v409 = *((_DWORD *)this + 137);
  if (v409 >= v408)
  {
    uint64_t v410 = 0;
    if ((int)v408 > 0) {
      v407 += 4 * (v408 - 1) + 4;
    }
    uint64_t v411 = v407 + 4 * (v409 - v408);
  }
  else
  {
    uint64_t v410 = 4 * v408;
    uint64_t v411 = v407;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 546, (DgnString *)&v496);
  if (v497) {
    v416 = (char *)v496;
  }
  else {
    v416 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v412, v413, v414, v415, v22, &byte_2140B33BB, v23, v23, v416, v411, v407, v410);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v411;
  *a5 += v407;
  *a6 += v410;
  uint64_t v417 = sizeObject<BinaryIntScale>((uint64_t)this + 552, 0);
  uint64_t v418 = sizeObject<BinaryIntScale>((uint64_t)this + 552, 1);
  LODWORD(v496) = 0;
  sizeObject((uint64_t)&v496, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 548, (DgnString *)&v496);
  if (v497) {
    uint64_t v423 = (char *)v496;
  }
  else {
    uint64_t v423 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v419, v420, v421, v422, v22, &byte_2140B33BB, v23, v23, v423, v417, v418, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v417;
  *a5 += v418;
  uint64_t v424 = sizeObject<BinaryIntScale>((uint64_t)this + 568, 0);
  uint64_t v425 = sizeObject<BinaryIntScale>((uint64_t)this + 568, 1);
  LODWORD(v496) = 0;
  sizeObject((uint64_t)&v496, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 550, (DgnString *)&v496);
  if (v497) {
    uint64_t v430 = (char *)v496;
  }
  else {
    uint64_t v430 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v426, v427, v428, v429, v22, &byte_2140B33BB, v23, v23, v430, v424, v425, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v424;
  *a5 += v425;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v431 = 12;
  }
  else {
    uint64_t v431 = 16;
  }
  uint64_t v432 = *((unsigned int *)this + 148);
  unsigned int v433 = *((_DWORD *)this + 149);
  if (v433 >= v432)
  {
    uint64_t v434 = 0;
    if ((int)v432 > 0) {
      uint64_t v431 = (v431 | 2) + 2 * (v432 - 1);
    }
    uint64_t v435 = v431 + 2 * (v433 - v432);
  }
  else
  {
    uint64_t v434 = 2 * v432;
    uint64_t v435 = v431;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 552, (DgnString *)&v496);
  if (v497) {
    uint64_t v440 = (char *)v496;
  }
  else {
    uint64_t v440 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v436, v437, v438, v439, v22, &byte_2140B33BB, v23, v23, v440, v435, v431, v434);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v435;
  *a5 += v431;
  *a6 += v434;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 554, (DgnString *)&v496);
  if (v497) {
    v445 = (char *)v496;
  }
  else {
    v445 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v441, v442, v443, v444, v22, &byte_2140B33BB, v23, v23, v445, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 556, (DgnString *)&v496);
  if (v497) {
    v450 = (char *)v496;
  }
  else {
    v450 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v446, v447, v448, v449, v22, &byte_2140B33BB, v23, v23, v450, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 4;
  *a5 += 4;
  uint64_t v451 = sizeObject((uint64_t)this + 608, 0);
  uint64_t v452 = sizeObject((uint64_t)this + 608, 1);
  uint64_t v453 = sizeObject((uint64_t)this + 608, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 558, (DgnString *)&v496);
  if (v497) {
    unsigned int v458 = (char *)v496;
  }
  else {
    unsigned int v458 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v454, v455, v456, v457, v22, &byte_2140B33BB, v23, v23, v458, v451, v452, v453);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v451;
  *a5 += v452;
  *a6 += v453;
  uint64_t v459 = sizeObject((uint64_t)this + 612, 0);
  uint64_t v460 = sizeObject((uint64_t)this + 612, 1);
  uint64_t v461 = sizeObject((uint64_t)this + 612, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 560, (DgnString *)&v496);
  if (v497) {
    uint64_t v466 = (char *)v496;
  }
  else {
    uint64_t v466 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v462, v463, v464, v465, v22, &byte_2140B33BB, v23, v23, v466, v459, v460, v461);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v459;
  *a5 += v460;
  *a6 += v461;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v467 = 4;
  }
  else {
    uint64_t v467 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 562, (DgnString *)&v496);
  if (v497) {
    v472 = (char *)v496;
  }
  else {
    v472 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v468, v469, v470, v471, v22, &byte_2140B33BB, v23, v23, v472, v467, v467, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v467;
  *a5 += v467;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v473 = 12;
  }
  else {
    uint64_t v473 = 16;
  }
  uint64_t v474 = *((unsigned int *)this + 158);
  unsigned int v475 = *((_DWORD *)this + 159);
  if (v475 >= v474)
  {
    uint64_t v476 = 0;
    if ((int)v474 > 0) {
      uint64_t v473 = (v473 | 2) + 2 * (v474 - 1);
    }
    uint64_t v477 = v473 + 2 * (v475 - v474);
  }
  else
  {
    uint64_t v476 = 2 * v474;
    uint64_t v477 = v473;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 564, (DgnString *)&v496);
  if (v497) {
    uint64_t v482 = (char *)v496;
  }
  else {
    uint64_t v482 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v478, v479, v480, v481, v22, &byte_2140B33BB, v23, v23, v482, v477, v473, v476);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += v477;
  *a5 += v473;
  *a6 += v476;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 566, (DgnString *)&v496);
  if (v497) {
    v487 = (char *)v496;
  }
  else {
    v487 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v483, v484, v485, v486, v22, &byte_2140B33BB, v23, v23, v487, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v496);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pelsc.cpp", 567, (DgnString *)&v496);
  if (v497) {
    uint64_t v492 = (char *)v496;
  }
  else {
    uint64_t v492 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v488, v489, v490, v491, v493, &byte_2140B33BB, (35 - v493), (35 - v493), v492, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v496);
}