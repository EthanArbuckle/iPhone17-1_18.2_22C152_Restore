uint64_t PrefiltererWordIdPronCollArray::removeAll(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t PrefiltererWordIdPronCollArray::mergeLargeSortedArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  int v5 = *((_DWORD *)a2 + 2);
  v39 = 0;
  uint64_t v40 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v39, (uint64_t *)a1, 0, v4);
  int v6 = *((_DWORD *)a2 + 2);
  if ((v40 + v6) > HIDWORD(v40))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v39, (v40 + v6 - HIDWORD(v40)), 1);
    int v6 = *((_DWORD *)a2 + 2);
  }
  unsigned int v7 = v5 + v4;
  if (v6)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *a2;
    v10 = v39;
    do
    {
      v10[(v8 + v40)] = *(_DWORD *)(v9 + 4 * v8);
      ++v8;
      unint64_t v11 = *((unsigned int *)a2 + 2);
    }
    while (v8 < v11);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  LODWORD(v40) = v40 + v11;
  unsigned int v12 = *(_DWORD *)(a1 + 12);
  if (v7 > v12) {
    DgnPrimArray<unsigned int>::reallocElts(a1, v7 - v12, 0);
  }
  *(_DWORD *)(a1 + 8) = v7;
  v13 = v39;
  unint64_t v14 = (unint64_t)&v39[v4];
  unint64_t v15 = (unint64_t)&v39[v7];
  v16 = *(unsigned int **)a1;
  uint64_t v17 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v17 + 292) || *(_DWORD *)(v17 + 296))
  {
    if (v4 && v4 < v7)
    {
      v18 = &v39[v4];
      do
      {
        unsigned int v19 = *v13;
        unsigned int v20 = *v18;
        int v21 = PrefPicModelIdPronCmp(*v13, *v18, *(const Voc **)(a1 + 16));
        int v22 = v19 - v20;
        if (v21) {
          int v22 = v21;
        }
        BOOL v23 = v22 > 0;
        BOOL v24 = v22 < 1;
        BOOL v25 = v22 < 1;
        if (v24) {
          v26 = v13;
        }
        else {
          v26 = v18;
        }
        v13 += v25;
        v18 += v23;
        *v16++ = *v26;
      }
      while ((unint64_t)v13 < v14 && (unint64_t)v18 < v15);
      goto LABEL_42;
    }
LABEL_40:
    v18 = &v39[v4];
    goto LABEL_42;
  }
  if (!v4 || v4 >= v7) {
    goto LABEL_40;
  }
  v18 = &v39[v4];
  do
  {
    unsigned int v28 = *v13;
    unsigned int v29 = *v18;
    int v30 = PrefPronCmp(*v13, *v18, *(const Voc **)(a1 + 16));
    int v31 = v28 - v29;
    if (v30) {
      int v31 = -v30;
    }
    BOOL v32 = v31 > 0;
    BOOL v24 = v31 < 1;
    BOOL v33 = v31 < 1;
    if (v24) {
      v34 = v13;
    }
    else {
      v34 = v18;
    }
    v13 += v33;
    v18 += v32;
    *v16++ = *v34;
  }
  while ((unint64_t)v13 < v14 && (unint64_t)v18 < v15);
LABEL_42:
  while ((unint64_t)v13 < v14)
  {
    unsigned int v36 = *v13++;
    *v16++ = v36;
  }
  while ((unint64_t)v18 < v15)
  {
    unsigned int v37 = *v18++;
    *v16++ = v37;
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
}

void sub_213EDCDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t PrefiltererWordIdPronCollArray::mergeSmallSortedArray(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = *((unsigned int *)a2 + 2);
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  if (v5 + v4)
  {
    int v21 = 0;
    HIDWORD(v20) = realloc_array(0, &v21, 4 * (v5 + v4), 0, 0, 1) >> 2;
    int v6 = v21;
    unsigned int v19 = v21;
  }
  else
  {
    int v6 = 0;
  }
  LODWORD(v20) = v5 + v4;
  uint64_t v7 = *(void *)a1;
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *a2;
    do
    {
      uint64_t InsertIndex = PrefiltererWordIdPronCollArray::getInsertIndex((PrefiltererWordIdPronCollArray *)a1, *(_DWORD *)(v10 + 4 * v8), v9);
      if (v9 < InsertIndex)
      {
        unsigned int v12 = (int *)(v7 + 4 * v9);
        unint64_t v13 = InsertIndex - (unint64_t)v9;
        do
        {
          int v14 = *v12++;
          *v6++ = v14;
          --v13;
        }
        while (v13);
      }
      *v6++ = *(_DWORD *)(v10 + 4 * v8++);
      uint64_t v9 = InsertIndex;
    }
    while (v8 != v5);
  }
  else
  {
    LODWORD(InsertIndex) = 0;
  }
  if (InsertIndex < v4)
  {
    unint64_t v15 = (int *)(v7 + 4 * InsertIndex);
    uint64_t v16 = v4 - InsertIndex;
    do
    {
      int v17 = *v15++;
      *v6++ = v17;
      --v16;
    }
    while (v16);
  }
  if (*(void *)a1)
  {
    MemChunkFree(*(void **)a1, 0);
    *(void *)a1 = 0;
  }
  *(void *)a1 = v19;
  *((void *)a1 + 1) = v20;
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v19);
}

void sub_213EDCF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererWordIdPronCollArray::removeSortedArray(uint64_t a1, int **a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = *(void *)(a1 + 16);
  int v18 = **a2;
  uint64_t v19 = v6;
  if (*(_DWORD *)(v6 + 292)
    || (uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))PrefWordIdPronSearchCmpFunc, *(_DWORD *)(v6 + 296)))
  {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))PrefWordIdPicModelIdPronSearchCmpFunc;
  }
  unsigned int v8 = v4 - v5;
  unsigned int Equal = DgnPrimArray<unsigned int>::searchFirstEqual((void *)a1, 0, v4, (uint64_t)&v18, v7);
  v17[0] = 0;
  v17[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v17, (uint64_t *)a1, 0, *(_DWORD *)(a1 + 8));
  if (Equal < v4)
  {
    int v10 = 0;
    unint64_t v11 = v17[0] + 4 * v4;
    unsigned int v12 = (_DWORD *)(v17[0] + 4 * Equal);
    unint64_t v13 = (_DWORD *)(*(void *)a1 + 4 * Equal);
    int v14 = *a2;
    do
    {
      if (*v12 == v14[v10])
      {
        if ((v10 + 1) < *((_DWORD *)a2 + 2)) {
          ++v10;
        }
      }
      else
      {
        *v13++ = *v12;
      }
      ++v12;
    }
    while ((unint64_t)v12 < v11);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v8 > v15) {
    DgnPrimArray<unsigned int>::reallocElts(a1, v8 - v15, 0);
  }
  *(_DWORD *)(a1 + 8) = v8;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
}

void sub_213EDD068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned int *PrefiltererWordIdPronCollArray::addArray(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    uint64_t v4 = result;
    unsigned int v5 = result[3];
    unsigned int v6 = result[2] + v2;
    if (v6 > v5)
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)result, v6 - v5, 0);
      unsigned int v2 = *(_DWORD *)(a2 + 8);
    }
    v9[0] = 0;
    v9[1] = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)v9, (uint64_t *)a2, 0, v2);
    PrefiltererWordIdPronCollArray::sortArray((uint64_t)v4, (uint64_t)v9);
    unsigned int v7 = v4[2];
    if (v7 && (int v8 = *(_DWORD *)(a2 + 8), onePlusHighestSet32(v7) * v8 <= v4[2])) {
      PrefiltererWordIdPronCollArray::mergeSmallSortedArray(v4, v9);
    }
    else {
      PrefiltererWordIdPronCollArray::mergeLargeSortedArray((uint64_t)v4, v9);
    }
    return (unsigned int *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  }
  return result;
}

void sub_213EDD134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t PrefiltererWordIdPronCollArray::removeArray(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = result;
    v4[0] = 0;
    v4[1] = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)v4, (uint64_t *)a2, 0, v2);
    PrefiltererWordIdPronCollArray::sortArray(v3, (uint64_t)v4);
    PrefiltererWordIdPronCollArray::removeSortedArray(v3, v4);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v4);
  }
  return result;
}

void sub_213EDD1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t PrefiltererWordIdPronCollArray::writeObject(PrefiltererWordIdPronCollArray *this, DgnStream *a2, unsigned int *a3)
{
  return writeObject<unsigned int>((uint64_t)a2, (uint64_t)this, a3);
}

void PrefiltererWordIdPronCollArray::readObject(PrefiltererWordIdPronCollArray *this, DgnStream *a2, unsigned int *a3)
{
}

uint64_t PrefiltererWordIdPronCollArray::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3 = sizeObject<unsigned int>(a1, a2);
  uint64_t v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 8;
  }
  if (a2 == 3) {
    uint64_t v4 = 0;
  }
  return v4 + v3;
}

void TRegExpCompiler::TRegExpCompiler(TRegExpCompiler *this, const TLocaleInfo *a2)
{
  *(void *)this = &unk_26C4E0FF0;
  uint64_t v4 = (TRegExpCompiler *)((char *)this + 232);
  unsigned int v5 = (TRegExpCompiler *)((char *)this + 8);
  TFsa::TFsa((TRegExpCompiler *)((char *)this + 8));
  TAllocator::TAllocator(v4, 2048);
  *((void *)this + 34) = a2;
  unsigned int v6 = TFsa::newState(v5, 0);
  TFsa::addExtremity((uint64_t)v5, (uint64_t)v6, 0);
}

void sub_213EDD2B0(_Unwind_Exception *a1)
{
  TFsa::~TFsa(v1);
  _Unwind_Resume(a1);
}

void TRegExpCompiler::~TRegExpCompiler(TRegExpCompiler *this)
{
  *(void *)this = &unk_26C4E0FF0;
  TAllocator::clear((TRegExpCompiler *)((char *)this + 232));
  TFsa::~TFsa((TRegExpCompiler *)((char *)this + 8));
}

{
  uint64_t vars8;

  TRegExpCompiler::~TRegExpCompiler(this);

  JUMPOUT(0x216698730);
}

void *TRegExpCompiler::mergeStateData(uint64_t a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  unsigned int v2 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    unsigned int v6 = (void *)v2[4];
    if (v6) {
      v5 += *v6;
    }
    unsigned int v7 = (void *)v2[1];
    if (v7)
    {
      do
      {
        int v8 = v7;
        unsigned int v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int v8 = (void *)v2[2];
        BOOL v9 = *v8 == (void)v2;
        unsigned int v2 = v8;
      }
      while (!v9);
    }
    unsigned int v2 = v8;
  }
  while (v8 != v3);
  if (!v5) {
    return 0;
  }
  if ((unint64_t)(v5 + 1) >> 61) {
    uint64_t v10 = -1;
  }
  else {
    uint64_t v10 = 8 * (v5 + 1);
  }
  result = (void *)TAllocator::allocate((TAllocator *)(a1 + 232), v10);
  void *result = v5;
  unsigned int v12 = (void *)*a2;
  if ((void *)*a2 != v3)
  {
    uint64_t v13 = 1;
    do
    {
      int v14 = (unint64_t *)v12[4];
      if (v14 && *v14)
      {
        unint64_t v15 = 0;
        do
        {
          unint64_t v16 = v15 + 1;
          result[v13 + v15] = v14[v15 + 1];
          unint64_t v15 = v16;
        }
        while (v16 < *v14);
        v13 += v16;
      }
      int v17 = (void *)v12[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          int v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          int v18 = (void *)v12[2];
          BOOL v9 = *v18 == (void)v12;
          unsigned int v12 = v18;
        }
        while (!v9);
      }
      unsigned int v12 = v18;
    }
    while (v18 != v3);
  }
  return result;
}

uint64_t TRegExpCompiler::compileCharacter(uint64_t a1, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a2;
  uint64_t v11 = **a2;
  if (v11 != 92) {
    goto LABEL_12;
  }
  __int32 v13 = v10[1];
  __int32 v12 = v13;
  *a2 = v10 + 1;
  if (!v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "search pattern not terminated");
    *(void *)__p = &unk_26C4DF190;
    if (SHIBYTE(v30) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v29[0], (std::string::size_type)v29[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v29;
      uint64_t v32 = v30;
    }
    *(void *)__p = &unk_26C4E13E0;
    if (v32 >= 0) {
      BOOL v25 = &__p[8];
    }
    else {
      BOOL v25 = *(const char **)&__p[8];
    }
    conditionalAssert(v25, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 336, v23, v24);
    *(void *)__p = &unk_26C4DF190;
    if (SHIBYTE(v32) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v29[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
    void *exception = &unk_26C4DF190;
    v27 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v28 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
    }
    void *exception = &unk_26C4E13E0;
  }
  if (wcschr((__int32 *)"a", v12))
  {
    int v14 = (TAllocator *)(a1 + 8);
    unint64_t v15 = TFsa::newState(v14, 0);
    TFsa::newTrans(v14, a4, (uint64_t)v15, 0xFFFFLL);
    if (**a2) {
      uint64_t v16 = **a2;
    }
    else {
      uint64_t v16 = -1;
    }
    int v17 = v14;
    uint64_t v18 = (uint64_t)v15;
LABEL_22:
    uint64_t v19 = a5;
    goto LABEL_23;
  }
  uint64_t v11 = **a2;
  if (v11 == 116)
  {
    int v17 = (TAllocator *)(a1 + 8);
    uint64_t v18 = a4;
    uint64_t v19 = a5;
    uint64_t v16 = 9;
    goto LABEL_23;
  }
  if (v11 == 114)
  {
    int v17 = (TAllocator *)(a1 + 8);
    uint64_t v18 = a4;
    uint64_t v19 = a5;
    uint64_t v16 = 13;
    goto LABEL_23;
  }
  if (v11 != 110)
  {
LABEL_12:
    uint64_t v20 = *(void *)(a1 + 272);
    if (a3 == 2)
    {
      uint64_t v21 = *(void *)(v20 + 32);
      if (v21 && (unint64_t)(int)v11 < 0x10000) {
        LODWORD(v11) = *(_DWORD *)(v21 + 4 * (int)v11);
      }
    }
    else if (a3 == 1)
    {
      LODWORD(v11) = TLocaleInfo::toLower(v20, v11);
    }
    if (v11) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = -1;
    }
    int v17 = (TAllocator *)(a1 + 8);
    uint64_t v18 = a4;
    goto LABEL_22;
  }
  int v17 = (TAllocator *)(a1 + 8);
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v16 = 10;
LABEL_23:
  uint64_t result = TFsa::newTrans(v17, v18, v19, v16);
  ++*a2;
  return result;
}

void sub_213EDD784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TRegExpCompiler::compileRange(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v12 = *(void *)(a1 + 272);
  if (a4 == 2)
  {
    uint64_t v15 = *(void *)(v12 + 32);
    int v13 = a2;
    int v14 = a3;
    if (v15)
    {
      int v13 = a2;
      if ((unint64_t)(int)a2 < 0x10000) {
        int v13 = *(_DWORD *)(v15 + 4 * (int)a2);
      }
      if ((unint64_t)(int)a3 >= 0x10000) {
        int v14 = a3;
      }
      else {
        int v14 = *(_DWORD *)(v15 + 4 * (int)a3);
      }
    }
  }
  else
  {
    int v13 = a2;
    int v14 = a3;
    if (a4 == 1)
    {
      int v13 = TLocaleInfo::toLower(v12, a2);
      int v14 = TLocaleInfo::toLower(*(void *)(a1 + 272), v9);
    }
  }
  if (v13 > v14)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"invalid [", 9);
    long long v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",", 1);
    unsigned int v29 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] range", 7);
    std::stringbuf::str();
    if (SHIBYTE(v37) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v36[0], (std::string::size_type)v36[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v36;
      uint64_t v39 = v37;
    }
    if (v39 >= 0) {
      uint64_t v32 = &__p[8];
    }
    else {
      uint64_t v32 = *(const char **)&__p[8];
    }
    conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 386, v30, v31);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v39) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(v36[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::stringbuf::str();
    void *exception = byte_26C4DF190;
    v34 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v34, byte_26C4DF190, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v35 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
    }
    void *exception = &unk_26C4E13E0;
  }
  uint64_t v16 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans((TAllocator *)(a1 + 8), a5, (uint64_t)v16, 0xFFFFLL);
  int v17 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v16, (uint64_t)v17, 114);
  uint64_t v18 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  uint64_t v19 = *(void *)(a1 + 272);
  if (a4 == 2)
  {
    uint64_t v22 = *(void *)(v19 + 32);
    if (v22 && (unint64_t)(int)v10 < 0x10000) {
      LODWORD(v10) = *(_DWORD *)(v22 + 4 * (int)v10);
    }
    if (v10) {
      uint64_t v23 = v10;
    }
    else {
      uint64_t v23 = -1;
    }
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v23);
    uint64_t v24 = *(void *)(*(void *)(a1 + 272) + 32);
    if (v24 && (unint64_t)(int)v9 < 0x10000) {
      LODWORD(v9) = *(_DWORD *)(v24 + 4 * (int)v9);
    }
  }
  else if (a4 == 1)
  {
    unsigned int v20 = TLocaleInfo::toLower(v19, v10);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = -1;
    }
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v21);
    LODWORD(v9) = TLocaleInfo::toLower(*(void *)(a1 + 272), v9);
  }
  else
  {
    if (v10) {
      uint64_t v25 = v10;
    }
    else {
      uint64_t v25 = -1;
    }
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v25);
  }
  if (v9) {
    uint64_t v26 = v9;
  }
  else {
    uint64_t v26 = -1;
  }

  return TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v18, a6, v26);
}

void sub_213EDDBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TRegExpCompiler::compileNegatedSet(uint64_t a1, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (TAllocator *)(a1 + 8);
  uint64_t v11 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans(v10, a4, (uint64_t)v11, 0xFFFFLL);
  uint64_t v12 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v11, (uint64_t)v12, 110);
  int v13 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v13, a5, 110);
  int v14 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v14, (uint64_t)v13, 0xFFFFLL);
  uint64_t v15 = *a2;
  uint64_t v16 = *a2;
  while (*v16 != 93)
  {
    if (!*v16) {
      goto LABEL_10;
    }
LABEL_6:
    int v17 = TFsa::newState(v10, 0);
    uint64_t v18 = *a2;
    if ((*a2)[1] == 45 && (uint64_t v19 = v18[2], v19 != 93))
    {
      TRegExpCompiler::compileRange(a1, *v18, v19, a3, (uint64_t)v12, (uint64_t)v17);
      uint64_t v16 = *a2 + 3;
      *a2 = v16;
      uint64_t v12 = v17;
    }
    else
    {
      TRegExpCompiler::compileCharacter(a1, a2, a3, (uint64_t)v12, (uint64_t)v17);
      uint64_t v16 = *a2;
      uint64_t v12 = v17;
    }
  }
  if (v16 == v15) {
    goto LABEL_6;
  }
LABEL_10:

  return TFsa::newTrans(v10, (uint64_t)v12, (uint64_t)v14, -1);
}

uint64_t TRegExpCompiler::compileSet(uint64_t result, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v10 = *a2;
  uint64_t v11 = *a2;
  while (1)
  {
    uint64_t v12 = *v11;
    if (v12 == 93) {
      break;
    }
    if (!v12) {
      return result;
    }
LABEL_6:
    if (v11[1] == 45 && (uint64_t v13 = v11[2], v13 != 93))
    {
      uint64_t result = TRegExpCompiler::compileRange(v9, v12, v13, a3, a4, a5);
      uint64_t v11 = *a2 + 3;
      *a2 = v11;
    }
    else
    {
      uint64_t result = TRegExpCompiler::compileCharacter(v9, a2, a3, a4, a5);
      uint64_t v11 = *a2;
    }
  }
  if (v11 == v10) {
    goto LABEL_6;
  }
  return result;
}

uint64_t TRegExpCompiler::compile(uint64_t a1, __int32 **a2, unsigned int a3, void *a4, uint64_t a5)
{
  if (wcschr((__int32 *)"*", **a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "*+?{ follows nothing");
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v70;
      v67[0] = v71;
    }
    *(void *)__p = &unk_26C4E13E0;
    if (v67[0] >= 0) {
      v54 = &__p[8];
    }
    else {
      v54 = *(const char **)&__p[8];
    }
    conditionalAssert(v54, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 468, v52, v53);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v67[0]) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v71) < 0) {
      operator delete((void *)v70);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "*+?{ follows nothing");
    void *exception = byte_26C4DF190;
    v56 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v60 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v60;
    }
    void *exception = &unk_26C4E13E0;
  }
  int v8 = (TAllocator *)(a1 + 8);
  v63 = (TAllocator *)(a1 + 232);
  uint64_t v61 = (uint64_t)a4;
  uint64_t v64 = a1;
  while (1)
  {
    uint64_t v9 = (uint64_t)a4;
    uint64_t v10 = *a2;
    __int32 v11 = **a2;
    if (!v11 || v11 == 41) {
      return TFsa::newTrans(v8, (uint64_t)a4, a5, -1);
    }
    uint64_t v12 = TFsa::newState(v8, 0);
    TFsa::newTrans(v8, (uint64_t)a4, (uint64_t)v12, -1);
    a4 = TFsa::newState(v8, 0);
    uint64_t v13 = *a2;
    __int32 v14 = **a2;
    if (v14 == 91)
    {
      __int32 v16 = v13[1];
      *a2 = v13 + 1;
      if (v16 == 94)
      {
        *a2 = v13 + 2;
        TRegExpCompiler::compileNegatedSet(a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      }
      else
      {
        TRegExpCompiler::compileSet(a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      }
      uint64_t v15 = *a2;
      if (**a2 != 93)
      {
        std::string::basic_string[abi:ne180100]<0>(&v70, "unmatched []");
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v71) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
        }
        else
        {
          *(_OWORD *)&__p[8] = v70;
          v67[0] = v71;
        }
        *(void *)__p = &unk_26C4E13E0;
        if (v67[0] >= 0) {
          v49 = &__p[8];
        }
        else {
          v49 = *(const char **)&__p[8];
        }
        conditionalAssert(v49, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 509, v41, v42);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v67[0]) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v71) < 0) {
          operator delete((void *)v70);
        }
        v50 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "unmatched []");
        void *v50 = byte_26C4DF190;
        v51 = (std::string *)(v50 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v59 = *(_OWORD *)__p;
          v50[3] = *(void *)&__p[16];
          *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v59;
        }
        void *v50 = &unk_26C4E13E0;
      }
      goto LABEL_22;
    }
    if (v14 == 40)
    {
      *a2 = v13 + 1;
      TRegExpCompiler::compile(a1, a2, a3, v12, a4);
      uint64_t v15 = *a2;
      if (**a2 != 41)
      {
        std::string::basic_string[abi:ne180100]<0>(&v70, "unmatched ()");
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v71) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
        }
        else
        {
          *(_OWORD *)&__p[8] = v70;
          v67[0] = v71;
        }
        *(void *)__p = &unk_26C4E13E0;
        if (v67[0] >= 0) {
          v46 = &__p[8];
        }
        else {
          v46 = *(const char **)&__p[8];
        }
        conditionalAssert(v46, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 489, v39, v40);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v67[0]) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v71) < 0) {
          operator delete((void *)v70);
        }
        v47 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "unmatched ()");
        void *v47 = byte_26C4DF190;
        v48 = (std::string *)(v47 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v58 = *(_OWORD *)__p;
          v47[3] = *(void *)&__p[16];
          *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v58;
        }
        void *v47 = &unk_26C4E13E0;
      }
      goto LABEL_22;
    }
    if (wcschr((__int32 *)"*", v14))
    {
      std::string::basic_string[abi:ne180100]<0>(&v70, "nested *+?{");
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v71) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
      }
      else
      {
        *(_OWORD *)&__p[8] = v70;
        v67[0] = v71;
      }
      *(void *)__p = &unk_26C4E13E0;
      if (v67[0] >= 0) {
        v43 = &__p[8];
      }
      else {
        v43 = *(const char **)&__p[8];
      }
      conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 516, v37, v38);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v67[0]) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (SHIBYTE(v71) < 0) {
        operator delete((void *)v70);
      }
      v44 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "nested *+?{");
      void *v44 = byte_26C4DF190;
      v45 = (std::string *)(v44 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v57 = *(_OWORD *)__p;
        v44[3] = *(void *)&__p[16];
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v57;
      }
      void *v44 = &unk_26C4E13E0;
    }
    __int32 v17 = **a2;
    if (v17 == 124)
    {
      TFsa::newTrans(v8, v9, a5, -1);
      a4 = TFsa::newState(v8, 0);
      TFsa::newTrans(v8, v61, (uint64_t)a4, -1);
      ++*a2;
    }
    else
    {
      if (wcschr((__int32 *)"^", v17))
      {
        uint64_t v18 = TFsa::newState(v8, 0);
        TFsa::newTrans(v8, (uint64_t)v12, (uint64_t)v18, 0xFFFFLL);
        if (**a2) {
          uint64_t v19 = **a2;
        }
        else {
          uint64_t v19 = -1;
        }
        a1 = v64;
        TFsa::newTrans(v8, (uint64_t)v18, (uint64_t)a4, v19);
        uint64_t v15 = *a2;
LABEL_22:
        unsigned int v20 = v15 + 1;
        *a2 = v15 + 1;
        goto LABEL_23;
      }
      TRegExpCompiler::compileCharacter(a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      unsigned int v20 = *a2;
LABEL_23:
      __int32 v21 = *v20;
      if (*v20 == 123)
      {
        *a2 = v20 + 1;
        unint64_t v69 = 0;
        *(void *)&long long v70 = 0;
        parseRepetition((unsigned int **)a2, &v70, &v69);
        *(void *)__p = v67;
        *(_OWORD *)&__p[8] = xmmword_214085190;
        char v68 = 1;
        unint64_t v22 = v70;
        if ((unint64_t)v70 >= 2)
        {
          uint64_t v23 = v70 - 1;
          do
          {
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v10, v20 - v10);
            --v23;
          }
          while (v23);
        }
        unint64_t v24 = v69;
        if (v69 == -1)
        {
          unint64_t v27 = *(void *)&__p[16];
          if (v22)
          {
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v10, v20 - v10);
            unint64_t v27 = *(void *)&__p[16];
          }
          v72[0] = 42;
          TBuffer<wchar_t>::insert((uint64_t)__p, v27, v72, 1uLL);
        }
        else if (v69 > v22)
        {
          if (!v22)
          {
            v72[0] = 63;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v72, 1uLL);
            *(void *)&long long v70 = 1;
            unint64_t v22 = 1;
          }
          unint64_t v25 = v24 - v22;
          if (v25)
          {
            unint64_t v26 = v20 - v10;
            do
            {
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v10, v26);
              v72[0] = 63;
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v72, 1uLL);
              --v25;
            }
            while (v25);
          }
        }
        uint64_t v28 = 0;
        unsigned int v29 = *a2;
        while (v29[v28++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v29, v28 - 1);
        if ((unint64_t)(*(void *)&__p[16] + 1) >> 62) {
          uint64_t v31 = -1;
        }
        else {
          uint64_t v31 = 4 * (*(void *)&__p[16] + 1);
        }
        a1 = v64;
        unsigned int v20 = (__int32 *)TAllocator::allocate(v63, v31);
        if (*(void *)&__p[16] >= *(void *)&__p[8])
        {
          if (v68)
          {
            v72[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v72, 1uLL);
            uint64_t v32 = *(const __int32 **)__p;
            --*(void *)&__p[16];
          }
          else
          {
            uint64_t v32 = *(const __int32 **)__p;
            if (*(void *)&__p[8]) {
              *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
            }
          }
        }
        else
        {
          uint64_t v32 = *(const __int32 **)__p;
          *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
        }
        wcscpy(v20, v32);
        *a2 = v20;
        if (v68 && *(void **)__p != v67 && *(void *)__p)
        {
          MEMORY[0x216698730]();
          unsigned int v20 = *a2;
        }
        __int32 v21 = *v20;
      }
      switch(v21)
      {
        case '?':
          *a2 = v20 + 1;
          goto LABEL_60;
        case '+':
          *a2 = v20 + 1;
          BOOL v33 = v8;
          uint64_t v34 = (uint64_t)a4;
          uint64_t v35 = (uint64_t)v12;
          goto LABEL_61;
        case '*':
          *a2 = v20 + 1;
          TFsa::newTrans(v8, (uint64_t)a4, (uint64_t)v12, -1);
LABEL_60:
          BOOL v33 = v8;
          uint64_t v34 = v9;
          uint64_t v35 = (uint64_t)a4;
LABEL_61:
          TFsa::newTrans(v33, v34, v35, -1);
          break;
      }
    }
  }
}

void sub_213EDE9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

uint64_t parseRepetition(unsigned int **a1, void *a2, void *a3)
{
  *a2 = 0;
  *a3 = 0;
  unsigned int v6 = **a1;
  {
    operator new();
  }
  if ((int)v6 < 48
    || v6 >= 0x3A
    && (v6 < 0x660
     || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6) == -1))
  {
    std::string::basic_string[abi:ne180100]<0>(v61, "expected a digit after {");
    *(void *)__p = byte_26C4DF190;
    if ((v61[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v61, *(std::string::size_type *)&v61[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v61;
      uint64_t v64 = *(void *)&v61[16];
    }
    *(void *)__p = &unk_26C4E13E0;
    if (v64 >= 0) {
      __int32 v16 = &__p[8];
    }
    else {
      __int32 v16 = *(const char **)&__p[8];
    }
    conditionalAssert(v16, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 264, v14, v15);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v64) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if ((v61[23] & 0x80000000) != 0) {
      operator delete(*(void **)v61);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "expected a digit after {");
    void *exception = byte_26C4DF190;
    uint64_t v18 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v43 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v43;
    }
    void *exception = &unk_26C4E13E0;
  }
  unsigned int v7 = *a1;
  {
    operator new();
  }
  uint64_t result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, a1);
  *a2 = result;
  uint64_t v9 = *a1;
  unsigned int v10 = **a1;
  if (v10 != 44)
  {
    if (v10 != 125)
    {
      if (!v10)
      {
        std::string::basic_string[abi:ne180100]<0>(v61, "search pattern not terminated");
        *(void *)__p = byte_26C4DF190;
        if ((v61[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v61, *(std::string::size_type *)&v61[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v61;
          uint64_t v64 = *(void *)&v61[16];
        }
        *(void *)__p = &unk_26C4E13E0;
        if (v64 >= 0) {
          uint64_t v28 = &__p[8];
        }
        else {
          uint64_t v28 = *(const char **)&__p[8];
        }
        conditionalAssert(v28, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 270, v19, v20);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v64) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if ((v61[23] & 0x80000000) != 0) {
          operator delete(*(void **)v61);
        }
        unsigned int v29 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
        *unsigned int v29 = byte_26C4DF190;
        uint64_t v30 = (std::string *)(v29 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v47 = *(_OWORD *)__p;
          v29[3] = *(void *)&__p[16];
          *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v47;
        }
        *unsigned int v29 = &unk_26C4E13E0;
      }
      std::string::basic_string[abi:ne180100]<0>(v61, "invalid {} range");
      *(void *)__p = byte_26C4DF190;
      if ((v61[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v61, *(std::string::size_type *)&v61[8]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v61;
        uint64_t v64 = *(void *)&v61[16];
      }
      *(void *)__p = &unk_26C4E13E0;
      if (v64 >= 0) {
        uint64_t v31 = &__p[8];
      }
      else {
        uint64_t v31 = *(const char **)&__p[8];
      }
      conditionalAssert(v31, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 285, v21, v22);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v64) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if ((v61[23] & 0x80000000) != 0) {
        operator delete(*(void **)v61);
      }
      uint64_t v32 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "invalid {} range");
      *uint64_t v32 = byte_26C4DF190;
      BOOL v33 = (std::string *)(v32 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v48 = *(_OWORD *)__p;
        v32[3] = *(void *)&__p[16];
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v48;
      }
      *uint64_t v32 = &unk_26C4E13E0;
    }
    if (!result)
    {
      std::string::basic_string[abi:ne180100]<0>(v61, "invalid {0} range");
      *(void *)__p = byte_26C4DF190;
      if ((v61[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v61, *(std::string::size_type *)&v61[8]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v61;
        uint64_t v64 = *(void *)&v61[16];
      }
      *(void *)__p = &unk_26C4E13E0;
      if (v64 >= 0) {
        uint64_t v34 = &__p[8];
      }
      else {
        uint64_t v34 = *(const char **)&__p[8];
      }
      conditionalAssert(v34, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 276, v23, v24);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v64) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if ((v61[23] & 0x80000000) != 0) {
        operator delete(*(void **)v61);
      }
      uint64_t v35 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "invalid {0} range");
      *uint64_t v35 = byte_26C4DF190;
      unsigned int v36 = (std::string *)(v35 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v49 = *(_OWORD *)__p;
        v35[3] = *(void *)&__p[16];
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v49;
      }
      *uint64_t v35 = &unk_26C4E13E0;
    }
    *a3 = result;
LABEL_21:
    uint64_t v12 = v9 + 1;
    goto LABEL_22;
  }
  unsigned int v11 = v9[1];
  *a1 = v9 + 1;
  if (v11 != 125)
  {
    {
      operator new();
    }
    if ((int)v11 < 48
      || v11 >= 0x3A
      && (v11 < 0x660
       || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11) == -1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"expected a digit after {", 24);
      int v25 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)",", 1);
      std::stringbuf::str();
      *(void *)uint64_t v61 = byte_26C4DF190;
      if (SHIBYTE(v60) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v61[8], (const std::string::value_type *)v59[0], (std::string::size_type)v59[1]);
      }
      else
      {
        *(_OWORD *)&v61[8] = *(_OWORD *)v59;
        uint64_t v62 = v60;
      }
      *(void *)uint64_t v61 = &unk_26C4E13E0;
      if (v62 >= 0) {
        v51 = &v61[8];
      }
      else {
        v51 = *(const char **)&v61[8];
      }
      conditionalAssert(v51, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 300, v26, v27);
      *(void *)uint64_t v61 = byte_26C4DF190;
      if (SHIBYTE(v62) < 0) {
        operator delete(*(void **)&v61[8]);
      }
      if (SHIBYTE(v60) < 0) {
        operator delete(v59[0]);
      }
      uint64_t v52 = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      *uint64_t v52 = byte_26C4DF190;
      uint64_t v53 = (std::string *)(v52 + 1);
      if ((v61[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)v61, *(std::string::size_type *)&v61[8]);
      }
      else
      {
        long long v54 = *(_OWORD *)v61;
        v52[3] = *(void *)&v61[16];
        *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
      }
      *uint64_t v52 = &unk_26C4E13E0;
    }
    uint64_t v13 = *a1;
    {
      operator new();
    }
    uint64_t result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13, a1);
    *a3 = result;
    uint64_t v9 = *a1;
    if (**a1 != 125)
    {
      std::string::basic_string[abi:ne180100]<0>(v61, "search pattern not terminated");
      *(void *)__p = byte_26C4DF190;
      if ((v61[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v61, *(std::string::size_type *)&v61[8]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v61;
        uint64_t v64 = *(void *)&v61[16];
      }
      *(void *)__p = &unk_26C4E13E0;
      if (v64 >= 0) {
        v44 = &__p[8];
      }
      else {
        v44 = *(const char **)&__p[8];
      }
      conditionalAssert(v44, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 306, v37, v38);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v64) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if ((v61[23] & 0x80000000) != 0) {
        operator delete(*(void **)v61);
      }
      v45 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
      void *v45 = byte_26C4DF190;
      v46 = (std::string *)(v45 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v50 = *(_OWORD *)__p;
        v45[3] = *(void *)&__p[16];
        *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v50;
      }
      void *v45 = &unk_26C4E13E0;
    }
    if (*a2 > (unint64_t)result)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid {", 9);
      uint64_t v39 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)",", 1);
      uint64_t v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"} range", 7);
      std::stringbuf::str();
      *(void *)uint64_t v61 = byte_26C4DF190;
      if (SHIBYTE(v60) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v61[8], (const std::string::value_type *)v59[0], (std::string::size_type)v59[1]);
      }
      else
      {
        *(_OWORD *)&v61[8] = *(_OWORD *)v59;
        uint64_t v62 = v60;
      }
      *(void *)uint64_t v61 = &unk_26C4E13E0;
      if (v62 >= 0) {
        v55 = &v61[8];
      }
      else {
        v55 = *(const char **)&v61[8];
      }
      conditionalAssert(v55, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 313, v41, v42);
      *(void *)uint64_t v61 = byte_26C4DF190;
      if (SHIBYTE(v62) < 0) {
        operator delete(*(void **)&v61[8]);
      }
      if (SHIBYTE(v60) < 0) {
        operator delete(v59[0]);
      }
      v56 = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      void *v56 = byte_26C4DF190;
      long long v57 = (std::string *)(v56 + 1);
      if ((v61[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)v61, *(std::string::size_type *)&v61[8]);
      }
      else
      {
        long long v58 = *(_OWORD *)v61;
        v56[3] = *(void *)&v61[16];
        *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
      }
      void *v56 = &unk_26C4E13E0;
    }
    goto LABEL_21;
  }
  *a3 = -1;
  uint64_t v12 = v9 + 2;
LABEL_22:
  *a1 = v12;
  return result;
}

void sub_213EDF78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,void *a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x216698730](v34, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

unint64_t TRegExpCompiler::compileFlags(uint64_t a1, __int32 **a2, uint64_t a3, uint64_t *a4, int *a5)
{
  *a4 = a3;
  unint64_t result = (unint64_t)wcschr(*a2, 58);
  if (result)
  {
    unint64_t v10 = result;
    unsigned int v11 = *a2;
    if ((__int32 *)result == *a2 || *(_DWORD *)(result - 4) != 92)
    {
      if ((unint64_t)v11 < result)
      {
        uint64_t v12 = (TAllocator *)(a1 + 8);
        do
        {
          uint64_t v13 = *v11;
          switch(v13)
          {
            case 'z':
              int v14 = 0;
              break;
            case 'i':
              int v14 = 1;
              break;
            case 'c':
              int v14 = 2;
              break;
            default:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"invalid flag '", 14);
              __int32 v17 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
              std::stringbuf::str();
              if (SHIBYTE(v25) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v24[0], (std::string::size_type)v24[1]);
              }
              else
              {
                *(_OWORD *)&__p[8] = *(_OWORD *)v24;
                uint64_t v27 = v25;
              }
              if (v27 >= 0) {
                uint64_t v20 = &__p[8];
              }
              else {
                uint64_t v20 = *(const char **)&__p[8];
              }
              conditionalAssert(v20, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 663, v18, v19);
              *(void *)__p = byte_26C4DF190;
              if (SHIBYTE(v27) < 0) {
                operator delete(*(void **)&__p[8]);
              }
              if (SHIBYTE(v25) < 0) {
                operator delete(v24[0]);
              }
              exception = __cxa_allocate_exception(0x20uLL);
              std::stringbuf::str();
              void *exception = byte_26C4DF190;
              uint64_t v22 = (std::string *)(exception + 1);
              if ((__p[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v22, byte_26C4DF190, *(std::string::size_type *)&__p[8]);
              }
              else
              {
                long long v23 = *(_OWORD *)__p;
                exception[3] = *(void *)&__p[16];
                *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
              }
              void *exception = &unk_26C4E13E0;
          }
          *a5 = v14;
          uint64_t v15 = TFsa::newState(v12, 0);
          TFsa::newTrans(v12, *a4, (uint64_t)v15, 0xFFFFLL);
          *a4 = (uint64_t)v15;
          __int32 v16 = TFsa::newState(v12, 0);
          unint64_t result = TFsa::newTrans(v12, *a4, (uint64_t)v16, v13);
          *a4 = (uint64_t)v16;
          unsigned int v11 = *a2 + 1;
          *a2 = v11;
        }
        while ((unint64_t)v11 < v10);
      }
      *a2 = v11 + 1;
    }
  }
  return result;
}

void sub_213EDFBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void TRegExpCompiler::add(void *a1, __int32 *a2, uint64_t a3)
{
  unsigned int v21 = 0;
  v15[0] = 0;
  uint64_t v20 = a2;
  uint64_t v5 = (uint64_t *)a1[20];
  unsigned int v6 = (uint64_t *)a1[21];
  if (v5 != v6)
  {
    while (!*v5)
    {
      if (++v5 == v6)
      {
        uint64_t v5 = (uint64_t *)a1[21];
        break;
      }
    }
  }
  TRegExpCompiler::compileFlags((uint64_t)a1, &v20, *v5, v15, (int *)&v21);
  unsigned int v7 = TFsa::newState((TAllocator *)(a1 + 1), 0);
  TRegExpCompiler::compile((uint64_t)a1, &v20, v21, (void *)v15[0], (uint64_t)v7);
  if (*v20)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "unmatched ()");
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v16;
      uint64_t v19 = v17;
    }
    *(void *)__p = &unk_26C4E13E0;
    if (v19 >= 0) {
      unsigned int v11 = &__p[8];
    }
    else {
      unsigned int v11 = *(const char **)&__p[8];
    }
    conditionalAssert(v11, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/regexp.cpp", 697, v9, v10);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v19) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "unmatched ()");
    void *exception = byte_26C4DF190;
    uint64_t v13 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v14 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    void *exception = &unk_26C4E13E0;
  }
  int v8 = (void *)TAllocator::allocate((TAllocator *)(a1 + 29), 16);
  *int v8 = 1;
  v8[1] = a3;
  v7[1] = v8;
  TFsa::addExtremity((uint64_t)(a1 + 1), (uint64_t)v7, 1u);
}

void sub_213EDFEB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *__p,void *a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
}

void sub_213EE0168(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v25)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a25);
    __cxa_end_catch();
    JUMPOUT(0x213EE0204);
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t TRegExpCompiler::compressDfaRec(uint64_t result, uint64_t *a2, void **a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = *a2;
  if (!*(void *)(*a6 + 8 * *a2))
  {
    uint64_t v12 = result;
    uint64_t v13 = *a3;
    long long v14 = (void *)*a5;
    void *v13 = *a4;
    v13[1] = v14;
    uint64_t v15 = *a3;
    *a3 += 2;
    *(void *)(*a6 + 8 * v6) = v15;
    __int32 v16 = (unint64_t *)a2[1];
    if (v16 && *v16)
    {
      unint64_t v17 = 0;
      uint64_t v18 = (void *)*a5;
      do
        *v18++ = v16[++v17];
      while (v17 < *v16);
      *a5 = v18;
    }
    uint64_t v19 = *a4;
    unint64_t result = TState::getTransCount((uint64_t)a2, 1u);
    *a4 += 16 * result;
    for (i = (void *)a2[3]; i; v19 += 16)
    {
      unsigned int v21 = (void *)i[2];
      unint64_t result = TRegExpCompiler::compressDfaRec(v12, v21, a3, a4, a5, a6);
      uint64_t v22 = *(void *)(*a6 + 8 * *v21);
      *(_DWORD *)uint64_t v19 = *i;
      *(void *)(v19 + 8) = v22;
      i = (void *)i[5];
    }
  }
  return result;
}

void TRegExpCompiler::compressDfa(TRegExpCompiler *this, const TFsa *a2)
{
  unsigned int v2 = (void *)*((void *)a2 + 6);
  uint64_t v3 = (void *)*((void *)a2 + 7);
  if (v2 != v3)
  {
    while (!*v2)
    {
      if (++v2 == v3) {
        goto LABEL_13;
      }
    }
  }
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void **)(*v2 + 8);
      if (v5) {
        v4 += *v5;
      }
      uint64_t v6 = v2 + 1;
      do
      {
        if (v6 == v3) {
          goto LABEL_13;
        }
      }
      while (!*v6++);
      unsigned int v2 = v6 - 1;
    }
  }
LABEL_13:
  operator new[]();
}

void sub_213EE0538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TRegExpCompiler::compile(TRegExpCompiler *this)
{
  TFsa::TFsa((TFsa *)v2);
  TFsa::nfaToDfa((uint64_t)this + 8, (TFsa *)v2, (uint64_t)this);
  TRegExpCompiler::compressDfa(this, (const TFsa *)v2);
}

void sub_213EE05D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TRegExpSearch::searchNegatedRange(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = *a1;
  signed int v9 = *a3;
  if (a4 == 2)
  {
    uint64_t v10 = *(void *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000) {
      signed int v9 = *(_DWORD *)(v10 + 4 * v9);
    }
  }
  else if (a4 == 1)
  {
    uint64_t result = TLocaleInfo::toLower(result, *a3);
    signed int v9 = result;
  }
  unint64_t v11 = *a2;
  unint64_t v12 = a2[2];
  while (v11 < v12)
  {
    uint64_t v13 = *(unint64_t **)(v11 + 8);
    unint64_t v14 = *v13;
    unint64_t v15 = v13[2];
    if (*v13 < v15)
    {
      do
      {
        if (v9 < *(_DWORD *)v11 || v9 > *(_DWORD *)v14)
        {
          uint64_t result = TRegExpSearch::searchNegated(a1, *(void *)(v14 + 8), a3, a4);
          unint64_t v15 = v13[2];
        }
        v14 += 16;
      }
      while (v14 < v15);
      unint64_t v12 = a2[2];
    }
    v11 += 16;
  }
  return result;
}

uint64_t TRegExpSearch::searchNegated(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = *a1;
  signed int v9 = *a3;
  if (a4 == 2)
  {
    uint64_t v10 = *(void *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000) {
      signed int v9 = *(_DWORD *)(v10 + 4 * v9);
    }
  }
  else if (a4 == 1)
  {
    uint64_t result = TLocaleInfo::toLower(result, *a3);
    signed int v9 = result;
  }
  for (unint64_t i = *a2; i < a2[2]; i += 16)
  {
    if (*(_DWORD *)i == 0xFFFF)
    {
      uint64_t result = TRegExpSearch::searchNegatedCommand((uint64_t)a1, *(unint64_t **)(i + 8), a3, a4);
    }
    else if (v9 != *(_DWORD *)i)
    {
      uint64_t result = TRegExpSearch::searchNegated(a1, *(void *)(i + 8), a3, a4);
    }
  }
  return result;
}

uint64_t TRegExpSearch::searchNegatedCommand(uint64_t result, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4 = *a2;
  if (*a2 < a2[2])
  {
    int v8 = (uint64_t *)result;
    signed int v9 = a3 + 1;
    do
    {
      int v10 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 == 114)
      {
        uint64_t result = TRegExpSearch::searchNegatedRange(v8, *(unint64_t **)(v4 + 8), a3, a4);
      }
      else if (v10 == 110)
      {
        uint64_t result = TRegExpSearch::search(v8, *(void *)(v4 + 8), v9, a4);
      }
      else
      {
        uint64_t result = testCharClass(v10, *a3);
        if ((result & 1) == 0) {
          uint64_t result = TRegExpSearch::searchNegated(v8, *(void *)(v4 + 8), a3, a4);
        }
      }
      v4 += 16;
    }
    while (v4 < a2[2]);
  }
  return result;
}

void TRegExpSearch::search(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int a4)
{
  while (1)
  {
    if ((*(unsigned char *)(a1 + 44) & 1) == 0 || !*a3)
    {
      for (unint64_t i = (uint64_t *)a2[1]; (unint64_t)i < a2[3]; ++i)
      {
        *(unsigned char *)(a1 + 41) = 1;
        unint64_t v12 = *(void ***)(a1 + 16);
        if (v12)
        {
          unint64_t v14 = (char *)*v12;
          uint64_t v13 = v12[1];
          uint64_t v15 = *i;
          unint64_t v16 = ((char *)v13 - (unsigned char *)*v12) / 24;
          if (v13 == *v12)
          {
LABEL_18:
            uint64_t v19 = *(void *)(a1 + 32);
            unint64_t v20 = (unint64_t)v12[2];
            if ((unint64_t)v13 >= v20)
            {
              unint64_t v22 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v14) >> 3);
              if (2 * v23 > v22) {
                unint64_t v22 = 2 * v23;
              }
              if (v23 >= 0x555555555555555) {
                unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24) {
                int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)(v12 + 2), v24);
              }
              else {
                int v25 = 0;
              }
              int v26 = &v25[24 * v16];
              *(void *)int v26 = v19;
              *((void *)v26 + 1) = a3;
              *((void *)v26 + 2) = v15;
              uint64_t v28 = (char *)*v12;
              uint64_t v27 = (char *)v12[1];
              unsigned int v29 = v26;
              if (v27 != *v12)
              {
                do
                {
                  long long v30 = *(_OWORD *)(v27 - 24);
                  *((void *)v29 - 1) = *((void *)v27 - 1);
                  *(_OWORD *)(v29 - 24) = v30;
                  v29 -= 24;
                  v27 -= 24;
                }
                while (v27 != v28);
                uint64_t v27 = (char *)*v12;
              }
              unsigned int v21 = v26 + 24;
              *unint64_t v12 = v29;
              v12[1] = v26 + 24;
              v12[2] = &v25[24 * v24];
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              void *v13 = v19;
              v13[1] = a3;
              unsigned int v21 = v13 + 3;
              v13[2] = v15;
            }
            v12[1] = v21;
          }
          else
          {
            if (v16 <= 1) {
              uint64_t v17 = 1;
            }
            else {
              uint64_t v17 = ((char *)v13 - (unsigned char *)*v12) / 24;
            }
            uint64_t v18 = v14 + 16;
            while (*v18 != v15 || *(v18 - 2) != *(void *)(a1 + 32) || *(v18 - 1) >= (unint64_t)a3)
            {
              v18 += 3;
              if (!--v17) {
                goto LABEL_18;
              }
            }
            *(v18 - 1) = a3;
            void *v18 = v15;
          }
        }
      }
    }
    uint64_t v7 = a2[2];
    uint64_t v8 = *a2;
    uint64_t v9 = v7 - *a2;
    if (v7 == *a2) {
      break;
    }
    if (*(_DWORD *)v8 == 0xFFFF)
    {
      TRegExpSearch::searchCommand(a1, *(unsigned int ***)(v8 + 8), a3, a4);
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v31 = v9 >> 4;
    uint64_t v32 = *a3;
    if (!v32 && v10 < v31)
    {
      *(unsigned char *)(a1 + 40) = 1;
      return;
    }
    uint64_t v33 = *(void *)a1;
    if (a4 == 2)
    {
      uint64_t v34 = *(void *)(v33 + 32);
      if (v34) {
        BOOL v35 = (unint64_t)(int)v32 < 0x10000;
      }
      else {
        BOOL v35 = 0;
      }
      if (v35) {
        LODWORD(v32) = *(_DWORD *)(v34 + 4 * (int)v32);
      }
    }
    else if (a4 == 1)
    {
      LODWORD(v32) = TLocaleInfo::toLower(v33, v32);
    }
    uint64_t v36 = v31 - 1;
    if (v10 < v31)
    {
      uint64_t v37 = *a2;
      do
      {
        uint64_t v38 = (v36 + v10) >> 1;
        int v39 = *(_DWORD *)(v37 + 16 * v38);
        if (v32 == v39) {
          break;
        }
        if ((int)v32 > v39) {
          uint64_t v36 = v38 - 1;
        }
        else {
          uint64_t v10 = v38 + 1;
        }
      }
      while (v10 <= v36);
      uint64_t v8 = v37 + 16 * v38;
    }
    if (v10 > v36) {
      return;
    }
    a2 = *(uint64_t **)(v8 + 8);
    ++a3;
  }
}

uint64_t testCharClass(int a1, int a2)
{
  uint64_t result = 0;
  if (a1 <= 96)
  {
    switch(a1)
    {
      case 'L':
        {
            operator new();
        }
        int isLower = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_61;
      case 'M':
      case 'N':
      case 'O':
      case 'Q':
      case 'R':
      case 'T':
      case 'V':
        return result;
      case 'P':
        {
          operator new();
        }
        int isLower = TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_61;
      case 'S':
        {
          operator new();
        }
        uint64_t result = 0;
        if (a2 > 159)
        {
          if (a2 >= 12288)
          {
            if (a2 == 12288) {
              return result;
            }
            int v15 = 65279;
          }
          else
          {
            if (a2 == 160) {
              return result;
            }
            int v15 = 8203;
          }
          if (a2 == v15) {
            return result;
          }
        }
        else if (a2 <= 0x20 && ((1 << a2) & 0x100002600) != 0)
        {
          return result;
        }
        return 1;
      case 'U':
        {
          operator new();
        }
        int isLower = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_61;
      case 'W':
        {
          operator new();
        }
        uint64_t v11 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
        if (a2 >= 48
          && (a2 < 0x3A
           || a2 >= 0x660
           && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2) != -1))
        {
          return 0;
        }
        uint64_t v12 = v11;
        goto LABEL_60;
      default:
        if (a1 != 65)
        {
          if (a1 != 68) {
            return result;
          }
          {
            operator new();
          }
          int DigitExtended = a2 - 48;
          if (a2 >= 48)
          {
            if (a2 <= 0x39) {
              return DigitExtended == -1;
            }
            if (a2 >= 0x660)
            {
              int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
              return DigitExtended == -1;
            }
          }
          int DigitExtended = -1;
          return DigitExtended == -1;
        }
        {
          operator new();
        }
        uint64_t v12 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
LABEL_60:
        int isLower = TLocaleInfo::isAlpha(v12, a2);
LABEL_61:
        uint64_t result = isLower ^ 1u;
        break;
    }
    return result;
  }
  switch(a1)
  {
    case 'l':
      {
        operator new();
      }
      uint64_t v6 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      return TLocaleInfo::isLower(v6, a2);
    case 'm':
    case 'n':
    case 'o':
    case 'q':
    case 'r':
    case 't':
    case 'v':
      return result;
    case 'p':
      {
        operator new();
      }
      uint64_t v10 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      return TLocaleInfo::isPunct(v10, a2);
    case 's':
      {
        operator new();
      }
      uint64_t result = 1;
      if (a2 <= 159)
      {
        if (a2 <= 0x20 && ((1 << a2) & 0x100002600) != 0) {
          return result;
        }
        return 0;
      }
      if (a2 >= 12288)
      {
        if (a2 == 12288) {
          return result;
        }
        int v16 = 65279;
      }
      else
      {
        if (a2 == 160) {
          return result;
        }
        int v16 = 8203;
      }
      if (a2 != v16) {
        return 0;
      }
      return result;
    case 'u':
      {
        operator new();
      }
      uint64_t v9 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      return TLocaleInfo::isUpper(v9, a2);
    case 'w':
      {
        operator new();
      }
      uint64_t v13 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      if (a2 < 48
        || a2 >= 0x3A
        && (a2 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2) == -1))
      {
        uint64_t v8 = v13;
        goto LABEL_55;
      }
      return 1;
    default:
      if (a1 != 100)
      {
        if (a1 == 97)
        {
          {
            operator new();
          }
          uint64_t v8 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
LABEL_55:
          return TLocaleInfo::isAlpha(v8, a2);
        }
        return result;
      }
      {
        operator new();
      }
      int v14 = a2 - 48;
      if (a2 < 48) {
        goto LABEL_70;
      }
      if (a2 > 0x39)
      {
        if (a2 < 0x660) {
LABEL_70:
        }
          int v14 = -1;
        else {
          int v14 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        }
      }
      return v14 != -1;
  }
}

void sub_213EE13D4(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TRegExpSearch::searchRange(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = *a1;
  int v9 = *a3;
  if (a4 == 2)
  {
    uint64_t v10 = *(void *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000) {
      int v9 = *(_DWORD *)(v10 + 4 * v9);
    }
  }
  else if (a4 == 1)
  {
    uint64_t result = TLocaleInfo::toLower(result, *a3);
    int v9 = result;
  }
  unint64_t v11 = *a2;
  unint64_t v12 = a2[2];
  if (*a2 < v12)
  {
    uint64_t v13 = a3 + 1;
    do
    {
      if (v9 >= *(_DWORD *)v11)
      {
        int v14 = *(unint64_t **)(v11 + 8);
        unint64_t v15 = *v14;
        unint64_t v16 = v14[2];
        if (*v14 < v16)
        {
          do
          {
            if (v9 <= *(_DWORD *)v15)
            {
              uint64_t result = TRegExpSearch::search(a1, *(void *)(v15 + 8), v13, a4);
              unint64_t v16 = v14[2];
            }
            v15 += 16;
          }
          while (v15 < v16);
          unint64_t v12 = a2[2];
        }
      }
      v11 += 16;
    }
    while (v11 < v12);
  }
  return result;
}

uint64_t TRegExpSearch::searchCommand(uint64_t result, unsigned int **a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4 = *a2;
  if (*a2 < a2[2])
  {
    uint64_t v8 = result;
    int v9 = a3 + 1;
    while (1)
    {
      uint64_t result = *v4;
      if ((int)result > 98) {
        break;
      }
      if (result == 36)
      {
        if (!*a3) {
          goto LABEL_15;
        }
      }
      else
      {
        if (result != 94) {
          goto LABEL_16;
        }
        if (*(unsigned int **)(v8 + 24) == a3)
        {
LABEL_15:
          uint64_t v10 = *((void *)v4 + 1);
          uint64_t v11 = v8;
          unint64_t v12 = a3;
          goto LABEL_22;
        }
      }
LABEL_24:
      v4 += 4;
      if (v4 >= a2[2]) {
        return result;
      }
    }
    switch(result)
    {
      case 'c':
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = v8;
        unint64_t v12 = a3;
        uint64_t v13 = 2;
        break;
      case 'i':
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = v8;
        unint64_t v12 = a3;
        uint64_t v13 = 1;
        break;
      case 'z':
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = v8;
        unint64_t v12 = a3;
        uint64_t v13 = 0;
        break;
      default:
LABEL_16:
        if (!*a3)
        {
          *(unsigned char *)(v8 + 40) = 1;
          goto LABEL_24;
        }
        if (result == 114)
        {
          uint64_t result = TRegExpSearch::searchRange((uint64_t *)v8, *((unint64_t **)v4 + 1), a3, a4);
          goto LABEL_24;
        }
        if (result == 110)
        {
          uint64_t result = TRegExpSearch::searchNegated((uint64_t *)v8, *((unint64_t **)v4 + 1), a3, a4);
          goto LABEL_24;
        }
        if (result != 46)
        {
          uint64_t result = testCharClass(result, *a3);
          if (!result) {
            goto LABEL_24;
          }
        }
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = v8;
        unint64_t v12 = v9;
LABEL_22:
        uint64_t v13 = a4;
        break;
    }
    uint64_t result = TRegExpSearch::search(v11, v10, v12, v13);
    goto LABEL_24;
  }
  return result;
}

BOOL TRegExpSearch::operator()(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  char v4 = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(void *)(a1 + 32) = a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v5 = a2;
  do
  {
    TRegExpSearch::search(a1, **(uint64_t ***)(a1 + 8), v5, 0);
    if ((v4 & 2) != 0) {
      break;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(_DWORD *)(v7 + 4);
    uint64_t v5 = (unsigned int *)(v7 + 4);
    *(void *)(a1 + 32) = v5;
  }
  while (v8);
  return *(unsigned char *)(a1 + 40) != 0;
}

BOOL TRegExpSearch::operator()(uint64_t a1, unsigned int *a2, int a3)
{
  char v3 = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(void *)(a1 + 32) = a2;
  if (!*a2) {
    return 0;
  }
  char v4 = a2;
  do
  {
    TRegExpSearch::search(a1, **(uint64_t ***)(a1 + 8), v4, 0);
    int v6 = *(unsigned __int8 *)(a1 + 41);
    if (v3 & 2 | v6) {
      break;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(_DWORD *)(v7 + 4);
    char v4 = (unsigned int *)(v7 + 4);
    *(void *)(a1 + 32) = v4;
  }
  while (v8);
  return v6 != 0;
}

void *TRegExp::TRegExp(void *result, uint64_t a2)
{
  result[1] = 0;
  result[2] = 0;
  void *result = a2;
  return result;
}

void TRegExp::add(uint64_t a1, __int32 *a2, uint64_t a3)
{
  char v3 = *(void **)(a1 + 8);
  if (!v3) {
    operator new();
  }

  TRegExpCompiler::add(v3, a2, a3);
}

void sub_213EE18E4(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x10F1C406FA3447ALL);
  _Unwind_Resume(a1);
}

TRegExpCompiler *TRegExp::doneAdding(TRegExp *this)
{
  uint64_t result = (TRegExpCompiler *)*((void *)this + 1);
  if (result) {
    TRegExpCompiler::compile(result);
  }
  return result;
}

TRegExp *TRegExp::TRegExp(TRegExp *a1, __int32 *a2, uint64_t a3)
{
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = a3;
  TRegExp::add((uint64_t)a1, a2, 0);
  TRegExp::doneAdding(a1);
  return a1;
}

void TRegExp::~TRegExp(TRegExp *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v3 = (TRegExpGraph *)*((void *)this + 2);
  if (v3)
  {
    TRegExpGraph::~TRegExpGraph(v3);
    MEMORY[0x216698730]();
  }
}

BOOL TRegExp::match(void *a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v4 = a1[2];
  if (!v4) {
    return 0;
  }
  v6[0] = *a1;
  v6[1] = v4;
  return TRegExpSearch::operator()((uint64_t)v6, a2, a3, a4);
}

BOOL TRegExp::match(void *a1, unsigned int *a2, int a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return 0;
  }
  v5[0] = *a1;
  v5[1] = v3;
  return TRegExpSearch::operator()((uint64_t)v5, a2, a3);
}

uint64_t TRegExp::stringToRegExp(uint64_t result, uint64_t a2, int a3, char a4)
{
  int v6 = (__int32 *)result;
  if (a3 == 1)
  {
    uint64_t v7 = "i";
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_6;
    }
    uint64_t v7 = "c";
  }
  uint64_t result = TBuffer<wchar_t>::assign(a2, (int *)v7);
LABEL_6:
  if ((a4 & 2) != 0)
  {
    int v11 = 94;
    uint64_t result = TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), &v11, 1uLL);
  }
  __int32 v8 = *v6;
  if (*v6)
  {
    int v9 = v6 + 1;
    do
    {
      if (wcschr((__int32 *)"?", v8))
      {
        int v11 = 92;
        TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), &v11, 1uLL);
      }
      int v11 = *(v9 - 1);
      uint64_t result = TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), &v11, 1uLL);
      __int32 v10 = *v9++;
      __int32 v8 = v10;
    }
    while (v10);
  }
  if (a4)
  {
    int v11 = 36;
    return TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), &v11, 1uLL);
  }
  return result;
}

void TRegExpGraph::~TRegExpGraph(TRegExpGraph *this)
{
  if (*(void *)this) {
    MEMORY[0x216698710](*(void *)this - 16, 0x70C80105F9A77);
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x216698710](v2 - 16, 0x1060C807B16006ELL);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x216698710](v3, 0x1000C8000313F17);
  }
}

uint64_t callBackParam(int a1, int a2, void *lpsrc, uint64_t *a4, TAllocator *a5)
{
  if (a4) {
    uint64_t v7 = *a4;
  }
  else {
    uint64_t v7 = 1;
  }
  if (*((_DWORD *)lpsrc + 2))
  {
    int v14 = (__int32 *)v16;
    long long v15 = xmmword_214085190;
    char v17 = 1;
    (*(void (**)(void *, uint64_t, __int32 **))(*(void *)lpsrc + 16))(lpsrc, v7, &v14);
    if (*((_DWORD *)lpsrc + 2) == 4)
    {
      TStringParam::getGrammarValue(v8, v7, (uint64_t)&v14);
    }
    else
    {
      (*(void (**)(void *, uint64_t, __int32 **))(*(void *)lpsrc + 16))(lpsrc, v7, &v14);
    }
    if ((unint64_t)(*((void *)&v15 + 1) + 1) >> 62) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 4 * (*((void *)&v15 + 1) + 1);
    }
    int v11 = (__int32 *)TAllocator::allocate(a5, v10);
    if (*((void *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        int v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v18, 1uLL);
        unint64_t v12 = v14;
        --*((void *)&v15 + 1);
      }
      else
      {
        unint64_t v12 = v14;
        if ((void)v15) {
          v14[(void)v15 - 1] = 0;
        }
      }
    }
    else
    {
      unint64_t v12 = v14;
      v14[*((void *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    if (v17 && v14 != (__int32 *)v16 && v14) {
      MEMORY[0x216698730]();
    }
  }
  else
  {
    TParam::getValidConfig(v9, v7);
  }
  return 1;
}

void sub_213EE1E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *(void *)a1 > 1uLL) {
    return 0;
  }
  int v11 = (__int32 *)v13;
  long long v12 = xmmword_214085190;
  char v14 = 1;
  size_t v7 = wcslen(*(const __int32 **)(a1 + 8));
  {
    operator new();
  }
  TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, (uint64_t)&v11, 0);
  if ((unint64_t)(*((void *)&v12 + 1) + 1) >> 62) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = 4 * (*((void *)&v12 + 1) + 1);
  }
  int v9 = (__int32 *)TAllocator::allocate(a5, v8);
  if (*((void *)&v12 + 1) >= (unint64_t)v12)
  {
    if (v14)
    {
      int v15 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v11, *((unint64_t *)&v12 + 1), &v15, 1uLL);
      uint64_t v10 = v11;
      --*((void *)&v12 + 1);
    }
    else
    {
      uint64_t v10 = v11;
      if ((void)v12) {
        v11[(void)v12 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v10 = v11;
    v11[*((void *)&v12 + 1)] = 0;
  }
  wcscpy(v9, v10);
  if (v14 && v11 != (__int32 *)v13)
  {
    if (v11) {
      MEMORY[0x216698730]();
    }
  }
  return 1;
}

void sub_213EE2058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x216698730](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackRomanToDigit(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  uint64_t v5 = (__int32 *)a1[1];
  if (*v5)
  {
    unint64_t v16 = 0;
    if (romanToArabic(v5, &v16)) {
      return 0;
    }
    long long v12 = (__int32 *)v14;
    long long v13 = xmmword_214085190;
    char v15 = 1;
    unint64_t v8 = v16;
    {
      operator new();
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (uint64_t)&v12, 0);
    if ((unint64_t)(*((void *)&v13 + 1) + 1) >> 62) {
      uint64_t v9 = -1;
    }
    else {
      uint64_t v9 = 4 * (*((void *)&v13 + 1) + 1);
    }
    uint64_t v10 = (__int32 *)TAllocator::allocate(a5, v9);
    if (*((void *)&v13 + 1) >= (unint64_t)v13)
    {
      if (v15)
      {
        int v17 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), &v17, 1uLL);
        uint64_t v11 = v12;
        --*((void *)&v13 + 1);
      }
      else
      {
        uint64_t v11 = v12;
        if ((void)v13) {
          v12[(void)v13 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v11 = v12;
      v12[*((void *)&v13 + 1)] = 0;
    }
    wcscpy(v10, v11);
    if (v15 && v12 != (__int32 *)v14)
    {
      if (v12) {
        MEMORY[0x216698730]();
      }
    }
  }
  return 1;
}

void sub_213EE2290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x216698730](v9, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x418]) && a9 != v10)
  {
    if (a9) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackDigitToRoman(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  size_t v7 = (unsigned int *)a1[1];
  if (!*v7) {
    return 1;
  }
  BOOL v17 = 0;
  {
    operator new();
  }
  unsigned int v9 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, &v17);
  uint64_t v5 = 1;
  if (!v17)
  {
    long long v13 = (__int32 *)v15;
    long long v14 = xmmword_214085190;
    char v16 = 1;
    if (arabicToRoman(v9, (uint64_t)&v13))
    {
      uint64_t v5 = 0;
    }
    else
    {
      if ((unint64_t)(*((void *)&v14 + 1) + 1) >> 62) {
        uint64_t v10 = -1;
      }
      else {
        uint64_t v10 = 4 * (*((void *)&v14 + 1) + 1);
      }
      uint64_t v11 = (__int32 *)TAllocator::allocate(a5, v10);
      if (*((void *)&v14 + 1) >= (unint64_t)v14)
      {
        if (v16)
        {
          int v18 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v13, *((unint64_t *)&v14 + 1), &v18, 1uLL);
          long long v12 = v13;
          --*((void *)&v14 + 1);
        }
        else
        {
          long long v12 = v13;
          if ((void)v14) {
            v13[(void)v14 - 1] = 0;
          }
        }
      }
      else
      {
        long long v12 = v13;
        v13[*((void *)&v14 + 1)] = 0;
      }
      wcscpy(v11, v12);
      uint64_t v5 = 1;
    }
    if (v16 && v13 != (__int32 *)v15 && v13) {
      MEMORY[0x216698730]();
    }
  }
  return v5;
}

void sub_213EE24E8(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t callBackAllCaps(uint64_t a1, uint64_t a2, uint64_t a3, int a4, TAllocator *this)
{
  if (a2 != 1 || *(void *)a1 > 1uLL) {
    return 0;
  }
  int v25 = (__int32 *)v27;
  long long v26 = xmmword_214085190;
  char v28 = 1;
  unint64_t v8 = *(const __int32 **)(a1 + 8);
  if (*v8)
  {
    char v9 = 0;
    uint64_t v10 = a3 + 240;
    do
    {
      while (1)
      {
        int v11 = wcsncmp(v8, (const __int32 *)&unk_2140A2180, 1uLL);
        uint64_t v12 = *(unsigned int *)v8;
        if (v11) {
          break;
        }
        if (v12)
        {
          while (wcsncmp(v8, (const __int32 *)&unk_2140A2188, 1uLL))
          {
            LODWORD(__p[0]) = *v8;
            TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
            unsigned int v14 = v8[1];
            ++v8;
            if (!v14) {
              goto LABEL_16;
            }
          }
          char v9 = 1;
          if (*v8) {
            continue;
          }
        }
        goto LABEL_16;
      }
      LODWORD(__p[0]) = TLocaleInfo::toUpper(v10, v12);
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
      unsigned int v13 = v8[1];
      ++v8;
    }
    while (v13);
    if ((v9 & 1) == 0) {
      goto LABEL_21;
    }
LABEL_16:
    loggableUnicode(*(unsigned int **)(a1 + 8), __p);
    if (v24 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    tknPrintf("Warning: '%s' : Performing AllCaps string function on a tagged value.\n", v15, v16, v17, v18, v19);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_21:
  if ((unint64_t)(*((void *)&v26 + 1) + 1) >> 62) {
    uint64_t v20 = -1;
  }
  else {
    uint64_t v20 = 4 * (*((void *)&v26 + 1) + 1);
  }
  unsigned int v21 = (__int32 *)TAllocator::allocate(this, v20);
  if (*((void *)&v26 + 1) >= (unint64_t)v26)
  {
    if (v28)
    {
      LODWORD(__p[0]) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
      unint64_t v22 = v25;
      --*((void *)&v26 + 1);
    }
    else
    {
      unint64_t v22 = v25;
      if ((void)v26) {
        v25[(void)v26 - 1] = 0;
      }
    }
  }
  else
  {
    unint64_t v22 = v25;
    v25[*((void *)&v26 + 1)] = 0;
  }
  wcscpy(v21, v22);
  if (v28 && v25 != (__int32 *)v27)
  {
    if (v25) {
      MEMORY[0x216698730]();
    }
  }
  return 1;
}

void sub_213EE2794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x438]))
  {
    if (a16 != v16 && a16 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackNoCaps(uint64_t a1, uint64_t a2, uint64_t a3, int a4, TAllocator *this)
{
  if (a2 != 1 || *(void *)a1 > 1uLL) {
    return 0;
  }
  int v25 = (__int32 *)v27;
  long long v26 = xmmword_214085190;
  char v28 = 1;
  unint64_t v8 = *(const __int32 **)(a1 + 8);
  if (*v8)
  {
    char v9 = 0;
    uint64_t v10 = a3 + 240;
    do
    {
      while (1)
      {
        int v11 = wcsncmp(v8, (const __int32 *)&unk_2140A2180, 1uLL);
        uint64_t v12 = *(unsigned int *)v8;
        if (v11) {
          break;
        }
        if (v12)
        {
          while (wcsncmp(v8, (const __int32 *)&unk_2140A2188, 1uLL))
          {
            LODWORD(__p[0]) = *v8;
            TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
            unsigned int v14 = v8[1];
            ++v8;
            if (!v14) {
              goto LABEL_16;
            }
          }
          char v9 = 1;
          if (*v8) {
            continue;
          }
        }
        goto LABEL_16;
      }
      LODWORD(__p[0]) = TLocaleInfo::toLower(v10, v12);
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
      unsigned int v13 = v8[1];
      ++v8;
    }
    while (v13);
    if ((v9 & 1) == 0) {
      goto LABEL_21;
    }
LABEL_16:
    loggableUnicode(*(unsigned int **)(a1 + 8), __p);
    if (v24 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    tknPrintf("Warning: '%s' : Performing NoCaps string function on a tagged value.\n", v15, v16, v17, v18, v19);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_21:
  if ((unint64_t)(*((void *)&v26 + 1) + 1) >> 62) {
    uint64_t v20 = -1;
  }
  else {
    uint64_t v20 = 4 * (*((void *)&v26 + 1) + 1);
  }
  unsigned int v21 = (__int32 *)TAllocator::allocate(this, v20);
  if (*((void *)&v26 + 1) >= (unint64_t)v26)
  {
    if (v28)
    {
      LODWORD(__p[0]) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), (int *)__p, 1uLL);
      unint64_t v22 = v25;
      --*((void *)&v26 + 1);
    }
    else
    {
      unint64_t v22 = v25;
      if ((void)v26) {
        v25[(void)v26 - 1] = 0;
      }
    }
  }
  else
  {
    unint64_t v22 = v25;
    v25[*((void *)&v26 + 1)] = 0;
  }
  wcscpy(v21, v22);
  if (v28 && v25 != (__int32 *)v27)
  {
    if (v25) {
      MEMORY[0x216698730]();
    }
  }
  return 1;
}

void sub_213EE2A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x438]))
  {
    if (a16 != v16 && a16 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackCapitalize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  unint64_t v8 = (const __int32 *)a1[1];
  size_t v9 = wcslen(v8);
  if ((v9 + 1) >> 62) {
    uint64_t v10 = -1;
  }
  else {
    uint64_t v10 = 4 * (v9 + 1);
  }
  int v11 = (__int32 *)TAllocator::allocate(a5, v10);
  wcscpy(v11, v8);
  uint64_t v12 = *v11;
  if (v12) {
    *int v11 = TLocaleInfo::toUpper(a3 + 240, v12);
  }
  return 1;
}

uint64_t callBackRemoveDiacritics(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  uint64_t v15 = (__int32 *)v17;
  long long v16 = xmmword_214085190;
  char v18 = 1;
  size_t v7 = (unsigned int *)a1[1];
  uint64_t v8 = *v7;
  if (v8)
  {
    uint64_t v9 = a3 + 240;
    uint64_t v10 = v7 + 1;
    do
    {
      int v19 = TLocaleInfo::removeDiacritics(v9, v8);
      TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v19, 1uLL);
      unsigned int v11 = *v10++;
      uint64_t v8 = v11;
    }
    while (v11);
    if ((unint64_t)(*((void *)&v16 + 1) + 1) >> 62) {
      uint64_t v12 = -1;
    }
    else {
      uint64_t v12 = 4 * (*((void *)&v16 + 1) + 1);
    }
  }
  else
  {
    uint64_t v12 = 4;
  }
  unsigned int v13 = (__int32 *)TAllocator::allocate(a5, v12);
  if (*((void *)&v16 + 1) >= (unint64_t)v16)
  {
    if (v18)
    {
      int v19 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v19, 1uLL);
      unsigned int v14 = v15;
      --*((void *)&v16 + 1);
    }
    else
    {
      unsigned int v14 = v15;
      if ((void)v16) {
        v15[(void)v16 - 1] = 0;
      }
    }
  }
  else
  {
    unsigned int v14 = v15;
    v15[*((void *)&v16 + 1)] = 0;
  }
  wcscpy(v13, v14);
  if (v18 && v15 != (__int32 *)v17)
  {
    if (v15) {
      MEMORY[0x216698730]();
    }
  }
  return 1;
}

void sub_213EE2C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackFormat(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 <= 1 && *a1 > 1uLL) {
    return 0;
  }
  int v25 = (__int32 *)v27;
  long long v26 = xmmword_214085190;
  char v28 = 1;
  size_t v7 = (int *)a1[1];
  int v8 = *v7;
  if (*v7)
  {
    unint64_t v23 = a5;
    char v24 = (const __int32 **)(a1 + 3);
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v7;
        {
          operator new();
        }
        if (v8 > 159) {
          break;
        }
        if (v8 > 0x20 || ((1 << v8) & 0x100002600) == 0) {
          goto LABEL_19;
        }
LABEL_17:
        int v10 = v7[1];
        int v8 = v10;
        ++v7;
        if (!v10) {
          goto LABEL_49;
        }
      }
      if (v8 >= 12288)
      {
        if (v8 == 65279 || v8 == 12288) {
          goto LABEL_17;
        }
      }
      else if (v8 == 160 || v8 == 8203)
      {
        goto LABEL_17;
      }
LABEL_19:
      int v11 = *v7;
      if (!*v7) {
        goto LABEL_49;
      }
      while (1)
      {
        {
          operator new();
        }
        if (v11 <= 159)
        {
          if (v11 <= 0x20 && ((1 << v11) & 0x100002600) != 0) {
            goto LABEL_35;
          }
          goto LABEL_31;
        }
        if (v11 >= 12288) {
          break;
        }
        if (v11 == 160 || v11 == 8203) {
          goto LABEL_35;
        }
LABEL_31:
        int v12 = v7[1];
        ++v7;
        int v11 = v12;
        if (!v12) {
          goto LABEL_35;
        }
      }
      if (v11 != 12288 && v11 != 65279) {
        goto LABEL_31;
      }
LABEL_35:
      if (a2 >= 3)
      {
        unint64_t v13 = 2;
        unsigned int v14 = v24;
        while (1)
        {
          if ((unint64_t)*(v14 - 1) > 1)
          {
            uint64_t v6 = 0;
            goto LABEL_62;
          }
          if (v7 - v9 == (int)wcslen(*v14) && !wcsncmp(v9, *v14, v7 - v9)) {
            break;
          }
          v14 += 4;
          v13 += 2;
          if (v13 >= a2) {
            goto LABEL_45;
          }
        }
        uint64_t v15 = 0;
        long long v16 = (int *)v14[2];
        while (v16[v15++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), v16, v15 - 1);
      }
LABEL_45:
      int v8 = *v7;
      if (!*v7)
      {
LABEL_49:
        if ((unint64_t)(*((void *)&v26 + 1) + 1) >> 62) {
          uint64_t v18 = -1;
        }
        else {
          uint64_t v18 = 4 * (*((void *)&v26 + 1) + 1);
        }
        a5 = v23;
        goto LABEL_54;
      }
    }
  }
  uint64_t v18 = 4;
LABEL_54:
  int v19 = (__int32 *)TAllocator::allocate(a5, v18);
  if (*((void *)&v26 + 1) >= (unint64_t)v26)
  {
    if (v28)
    {
      v29[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), v29, 1uLL);
      uint64_t v20 = v25;
      --*((void *)&v26 + 1);
    }
    else
    {
      uint64_t v20 = v25;
      if ((void)v26) {
        v25[(void)v26 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v20 = v25;
    v25[*((void *)&v26 + 1)] = 0;
  }
  wcscpy(v19, v20);
  uint64_t v6 = 1;
LABEL_62:
  if (v28)
  {
    if (v25 != (__int32 *)v27 && v25 != 0) {
      MEMORY[0x216698730]();
    }
  }
  return v6;
}

void sub_213EE3064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  MEMORY[0x216698730](v13, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x438]) && a13 != a12)
  {
    if (a13) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetCategoryTag(void *a1, uint64_t a2, void *a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  uint64_t v6 = (__int32 *)a1[1];
  if (!*v6) {
    return 1;
  }
  uint64_t HeadClone = TLexicon::findHeadClone(a3, v6);
  uint64_t result = 1;
  if (HeadClone)
  {
    int v12 = (__int32 *)v14;
    long long v13 = xmmword_214085190;
    char v15 = 1;
    TWord::getCategoryTag(HeadClone, &v12);
    if ((unint64_t)(*((void *)&v13 + 1) + 1) >> 62) {
      uint64_t v9 = -1;
    }
    else {
      uint64_t v9 = 4 * (*((void *)&v13 + 1) + 1);
    }
    int v10 = (__int32 *)TAllocator::allocate(a5, v9);
    if (*((void *)&v13 + 1) >= (unint64_t)v13)
    {
      if (v15)
      {
        int v16 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), &v16, 1uLL);
        int v11 = v12;
        --*((void *)&v13 + 1);
      }
      else
      {
        int v11 = v12;
        if ((void)v13) {
          v12[(void)v13 - 1] = 0;
        }
      }
    }
    else
    {
      int v11 = v12;
      v12[*((void *)&v13 + 1)] = 0;
    }
    wcscpy(v10, v11);
    if (v15 && v12 != (__int32 *)v14)
    {
      if (v12) {
        MEMORY[0x216698730]();
      }
    }
    return 1;
  }
  return result;
}

void sub_213EE324C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetWrittenForm(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  uint64_t v6 = (unsigned int *)a1[1];
  if (*v6)
  {
    int v8 = a3;
    if (TLexicon::checkName(a3, (int *)v6, 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableUnicode(v6, &__p);
      if (v18 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      tknPrintf("Error: '%s' : Written form requested for an invalid word name.\n", v9, v10, v11, v12, p_p);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p);
      }
      return 0;
    }
    __p = v19;
    long long v18 = xmmword_214085190;
    char v20 = 1;
    TLexicon::getWrittenForm(v8, (__int32 *)v6, (uint64_t)&__p);
    if ((unint64_t)(*((void *)&v18 + 1) + 1) >> 62) {
      uint64_t v14 = -1;
    }
    else {
      uint64_t v14 = 4 * (*((void *)&v18 + 1) + 1);
    }
    char v15 = (__int32 *)TAllocator::allocate(a5, v14);
    if (*((void *)&v18 + 1) >= (unint64_t)v18)
    {
      if (v20)
      {
        int v21 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v18 + 1), &v21, 1uLL);
        int v16 = (const __int32 *)__p;
        --*((void *)&v18 + 1);
      }
      else
      {
        int v16 = (const __int32 *)__p;
        if ((void)v18) {
          *((_DWORD *)__p + v18 - 1) = 0;
        }
      }
    }
    else
    {
      int v16 = (const __int32 *)__p;
      *((_DWORD *)__p + *((void *)&v18 + 1)) = 0;
    }
    wcscpy(v15, v16);
    if (v20 && __p != v19 && __p) {
      MEMORY[0x216698730]();
    }
  }
  return 1;
}

void sub_213EE3440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  if (LOBYTE(STACK[0x420]) && __p != v10)
  {
    if (__p) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackFind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 2 || *(void *)a1 > 1uLL || *(void *)(a1 + 16) > 1uLL) {
    return 0;
  }
  int v8 = wcsstr(*(__int32 **)(a1 + 8), *(const __int32 **)(a1 + 24));
  uint64_t result = 1;
  if (v8)
  {
    long long v13 = (__int32 *)v15;
    long long v14 = xmmword_214085190;
    char v16 = 1;
    uint64_t v9 = *(void *)(a1 + 8);
    {
      operator new();
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, ((uint64_t)v8 - v9) >> 2, (uint64_t)&v13, 0);
    if ((unint64_t)(*((void *)&v14 + 1) + 1) >> 62) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 4 * (*((void *)&v14 + 1) + 1);
    }
    uint64_t v11 = (__int32 *)TAllocator::allocate(a5, v10);
    if (*((void *)&v14 + 1) >= (unint64_t)v14)
    {
      if (v16)
      {
        int v17 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v13, *((unint64_t *)&v14 + 1), &v17, 1uLL);
        uint64_t v12 = v13;
        --*((void *)&v14 + 1);
      }
      else
      {
        uint64_t v12 = v13;
        if ((void)v14) {
          v13[(void)v14 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v12 = v13;
      v13[*((void *)&v14 + 1)] = 0;
    }
    wcscpy(v11, v12);
    if (v16 && v13 != (__int32 *)v15)
    {
      if (v13) {
        MEMORY[0x216698730]();
      }
    }
    return 1;
  }
  return result;
}

void sub_213EE3670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x216698730](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackCopy(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 2 || *a1 > 1uLL || a1[2] > 1uLL || a2 == 3 && a1[4] > 1uLL) {
    return 0;
  }
  int v8 = (const __int32 *)a1[1];
  BOOL v23 = 0;
  uint64_t v9 = (unsigned int *)a1[3];
  {
    operator new();
  }
  int v10 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9, &v23);
  if (v23) {
    return 0;
  }
  unint64_t v12 = v10;
  long long v13 = (TLocaleInfo *)wcslen(v8);
  long long v14 = (char *)v13 - v12;
  if ((unint64_t)v13 >= v12)
  {
    char v15 = v13;
    size_t v16 = (size_t)v13;
    if (a2 == 3)
    {
      int v17 = (unsigned int *)a1[5];
      uint64_t GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo(v13);
      unsigned int v19 = TLocaleInfo::stringToUInt(GlobalLocaleInfo, v17, &v23);
      if (v23) {
        return 0;
      }
      size_t v16 = v19;
    }
    if (v16 + v12 <= (unint64_t)v15) {
      size_t v20 = v16;
    }
    else {
      size_t v20 = (size_t)v14;
    }
    if ((v20 + 1) >> 62) {
      uint64_t v21 = -1;
    }
    else {
      uint64_t v21 = 4 * (v20 + 1);
    }
    unint64_t v22 = (__int32 *)TAllocator::allocate(a5, v21);
    wcsncpy(v22, &v8[v12], v20);
    v22[v20] = 0;
  }
  return 1;
}

void sub_213EE3878(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t BasisAccum::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v4 = 12;
    }
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v2 = 16;
      uint64_t v3 = v4;
    }
    else
    {
      uint64_t v5 = *(unsigned int *)(a1 + 24);
      if ((int)v5 <= 0) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = 8 * v5;
      }
      uint64_t v3 = v6 + v4;
      uint64_t v7 = *(unsigned int *)(a1 + 40);
      if ((int)v7 >= 1) {
        v4 += 8 * v7;
      }
      uint64_t v2 = 16;
    }
  }
  return v3 + v2 + v4;
}

uint64_t WeightAccum::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v2 = 8;
    uint64_t v3 = 12;
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v3 = 8;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v4 = *(unsigned int *)(a1 + 16);
      if ((int)v4 >= 1) {
        v3 += 8 * v4;
      }
      uint64_t v2 = 8;
    }
  }
  return v3 + v2;
}

uint64_t DurAccum::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<unsigned long long>(a1 + 8, a2) + 4 * (a2 != 3);
  return v4 + sizeObject<unsigned long long>(a1 + 24, a2);
}

uint64_t anyTagsMatch(void *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a2[1];
  unint64_t v5 = v4 - *a2;
  BOOL v6 = v4 == *a2 && v2 == *a1;
  unint64_t v7 = v2 - v3;
  if (v2 != v3 && v4 != *a2)
  {
    if (v7 <= v5) {
      uint64_t v9 = *a1;
    }
    else {
      uint64_t v9 = *a2;
    }
    if (v7 <= v5) {
      int v10 = a1;
    }
    else {
      int v10 = a2;
    }
    uint64_t v11 = v10[1];
    uint64_t v12 = v11 - v9;
    if (v11 == v9)
    {
      return 0;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      unint64_t v15 = v12 >> 3;
      if (v7 > v5)
      {
        size_t v16 = a1;
      }
      else
      {
        uint64_t v3 = *a2;
        size_t v16 = a2;
      }
      unint64_t v17 = ((v16[1] - v3) >> 3) - 1;
      if (v15 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v15;
      }
      while (v14 > v17)
      {
LABEL_29:
        if (++v13 == v18) {
          return 0;
        }
      }
      unint64_t v19 = *(void *)(v9 + 8 * v13);
      unint64_t v20 = v17;
      while (1)
      {
        unint64_t v21 = (v20 + v14) >> 1;
        unint64_t v22 = *(void *)(v3 + 8 * v21);
        if (v22 == v19) {
          return 1;
        }
        if (v22 > v19)
        {
          if (v20 + v14 < 2) {
            goto LABEL_29;
          }
          unint64_t v20 = v21 - 1;
        }
        else
        {
          unint64_t v14 = v21 + 1;
        }
        if (v14 > v20) {
          goto LABEL_29;
        }
      }
    }
  }
  return v6;
}

void TTag::TTag(TTag *this, const TFileObject *a2, const TTagManager *a3)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
  BOOL v6 = (char *)this + 48;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  v56 = dword_2140A2190;
  long long v57 = xmmword_214085120;
  uint64_t v58 = -1;
  long long v59 = dword_2140A21A4;
  long long v60 = xmmword_214085120;
  uint64_t v61 = -1;
  uint64_t v62 = dword_2140A21D4;
  long long v63 = xmmword_214085140;
  uint64_t v64 = -1;
  v65 = dword_2140A2200;
  long long v66 = xmmword_214085140;
  uint64_t v67 = -1;
  v51 = (char *)this + 48;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v56, 4uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v52, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v53) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v52[0], (std::string::size_type)v52[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v52;
      uint64_t v55 = v53;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v55 >= 0) {
      uint64_t v40 = &__p[8];
    }
    else {
      uint64_t v40 = *(const char **)&__p[8];
    }
    conditionalAssert(v40, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 127, v31, v32);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v55) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v53) < 0) {
      operator delete(v52[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v42 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v49 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v49;
    }
    void *exception = &unk_26C4E0710;
  }
  *((void *)this + 4) = -1;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 9) = 0;
  for (uint64_t i = *((void *)a2 + 3); i; uint64_t i = *(void *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_2140A2190))
    {
      if (TFileObject::verify((TFileObject *)i, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v52, &byte_2140B33BB);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v53) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v52[0], (std::string::size_type)v52[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v52;
          uint64_t v55 = v53;
        }
        *(void *)__p = &unk_26C4E0710;
        if (v55 >= 0) {
          BOOL v23 = &__p[8];
        }
        else {
          BOOL v23 = *(const char **)&__p[8];
        }
        conditionalAssert(v23, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 137, v10, v11);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v55) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v53) < 0) {
          operator delete(v52[0]);
        }
        char v24 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *char v24 = byte_26C4DF190;
        int v25 = (std::string *)(v24 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v39 = *(_OWORD *)__p;
          v24[3] = *(void *)&__p[16];
          *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v39;
        }
        *char v24 = &unk_26C4E0710;
      }
      MEMORY[0x216698480](this, *(void *)(i + 24));
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_2140A21A4))
    {
      if (TFileObject::verify((TFileObject *)i, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v52, &byte_2140B33BB);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v53) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v52[0], (std::string::size_type)v52[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v52;
          uint64_t v55 = v53;
        }
        *(void *)__p = &unk_26C4E0710;
        if (v55 >= 0) {
          char v28 = &__p[8];
        }
        else {
          char v28 = *(const char **)&__p[8];
        }
        conditionalAssert(v28, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 142, v12, v13);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v55) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v53) < 0) {
          operator delete(v52[0]);
        }
        unsigned int v29 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *unsigned int v29 = byte_26C4DF190;
        long long v30 = (std::string *)(v29 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v43 = *(_OWORD *)__p;
          int v29[3] = *(void *)&__p[16];
          *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v43;
        }
        *unsigned int v29 = &unk_26C4E0710;
      }
      MEMORY[0x216698480](v6, *(void *)(i + 24));
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_2140A2200))
    {
      if (TFileObject::verify((TFileObject *)i, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v52, &byte_2140B33BB);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v53) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v52[0], (std::string::size_type)v52[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v52;
          uint64_t v55 = v53;
        }
        *(void *)__p = &unk_26C4E0710;
        if (v55 >= 0) {
          uint64_t v33 = &__p[8];
        }
        else {
          uint64_t v33 = *(const char **)&__p[8];
        }
        conditionalAssert(v33, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 147, v21, v22);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v55) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v53) < 0) {
          operator delete(v52[0]);
        }
        uint64_t v34 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        void *v34 = byte_26C4DF190;
        BOOL v35 = (std::string *)(v34 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v47 = *(_OWORD *)__p;
          v34[3] = *(void *)&__p[16];
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v47;
        }
        void *v34 = &unk_26C4E0710;
      }
      uint64_t v9 = (*(uint64_t (**)(const TTagManager *, void))(*(void *)a3 + 16))(a3, *(void *)(i + 24));
      *((void *)this + 4) = v9;
      if (v9 == -1)
      {
        loggableUnicode(*(unsigned int **)(i + 24), __p);
        if (__p[23] >= 0) {
          uint64_t v18 = __p;
        }
        else {
          uint64_t v18 = *(unsigned char **)__p;
        }
        tknPrintf("Error: %sTag hasn't been defined.\n", v14, v15, v16, v17, v18);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(v52, &byte_2140B33BB);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v53) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v52[0], (std::string::size_type)v52[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v52;
          uint64_t v55 = v53;
        }
        *(void *)__p = &unk_26C4E0710;
        if (v55 >= 0) {
          v44 = &__p[8];
        }
        else {
          v44 = *(const char **)&__p[8];
        }
        conditionalAssert(v44, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 153, v19, v20);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v55) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v53) < 0) {
          operator delete(v52[0]);
        }
        v45 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        void *v45 = byte_26C4DF190;
        v46 = (std::string *)(v45 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v50 = *(_OWORD *)__p;
          v45[3] = *(void *)&__p[16];
          *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v50;
        }
        void *v45 = &unk_26C4E0710;
      }
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_2140A21D4))
    {
      if (TFileObject::verify((TFileObject *)i, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(v52, &byte_2140B33BB);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v53) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v52[0], (std::string::size_type)v52[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v52;
          uint64_t v55 = v53;
        }
        *(void *)__p = &unk_26C4E0710;
        if (v55 >= 0) {
          uint64_t v36 = &__p[8];
        }
        else {
          uint64_t v36 = *(const char **)&__p[8];
        }
        conditionalAssert(v36, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 158, v26, v27);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v55) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v53) < 0) {
          operator delete(v52[0]);
        }
        uint64_t v37 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *uint64_t v37 = byte_26C4DF190;
        uint64_t v38 = (std::string *)(v37 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v48 = *(_OWORD *)__p;
          v37[3] = *(void *)&__p[16];
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v48;
        }
        *uint64_t v37 = &unk_26C4E0710;
      }
      __p[0] = 0;
      int v8 = *(unsigned int **)(i + 24);
      {
          operator new();
      }
      *((_DWORD *)this + 10) = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, __p);
      BOOL v6 = v51;
    }
  }
}

void sub_213EE4624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  MEMORY[0x216698730](a10, 0x1070C40ADD13FEBLL);
  if (*(char *)(v27 + 71) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v27 + 23) < 0) {
    operator delete(*(void **)v27);
  }
  _Unwind_Resume(a1);
}

uint64_t TTag::TTag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = a3;
  MEMORY[0x216698480]();
  return a1;
}

void sub_213EE47C8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  TTag::TTag(v1);
  _Unwind_Resume(a1);
}

void TTagManager::TTagManager(TTagManager *this, TInputStream *a2, TLexiconParamManager *a3, TItnParamManager *a4)
{
  *(void *)this = &unk_26C4DF820;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 66) = 1;
  *((void *)this + 4) = &unk_26C4E5328;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = a4;
  int v8 = (TItnParamManager *)((char *)a4 + 5768);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TItnParamManager *)((char *)a4 + 5768));
  if (*((unsigned char *)a4 + TParam::getValidConfig(v8, ActiveConfigHandle) + 5920))
  {
    *(void *)__p = &v83;
    *(_OWORD *)&__p[8] = xmmword_214085190;
    char v84 = 1;
    TParamManager::begin((uint64_t)a4, v80);
    while (1)
    {
      TParamManager::end((uint64_t)a4, v78);
      if (*(void *)v80 == *(void *)v78) {
        break;
      }
      uint64_t v10 = *(void *)(*(void *)v80 + 40);
      if (v10 && (unint64_t v11 = v10 - 1, v12 = *((void *)a4 + 3), v11 < (*((void *)a4 + 4) - v12) >> 3)) {
        uint64_t v13 = *(void *)(v12 + 8 * v11);
      }
      else {
        uint64_t v13 = 0;
      }
      if (*(char *)(v13 + 111) < 0)
      {
        if (*(void *)(v13 + 96)) {
          goto LABEL_50;
        }
      }
      else if (*(unsigned char *)(v13 + 111))
      {
        goto LABEL_50;
      }
      int v14 = *(_DWORD *)(v13 + 8);
      if (v14 == 4)
      {
        if (v19[164] != v19[163])
        {
          uint64_t v20 = v19;
          TBuffer<wchar_t>::assign((uint64_t)__p, dword_2140A222C);
          uint64_t v21 = (int *)(v13 + 16);
          if (*(char *)(v13 + 39) < 0) {
            uint64_t v21 = *(int **)v21;
          }
          uint64_t v22 = 0;
          while (v21[v22++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v21, v22 - 1);
          *(_DWORD *)v78 = 61;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v78, 1uLL);
          uint64_t v24 = v20[163];
          if (v20[164] != v24)
          {
            unint64_t v25 = 0;
            unint64_t v26 = *(void *)&__p[16];
            do
            {
              uint64_t v27 = (uint64_t *)(v24 + 24 * v25);
              if (*((char *)v27 + 23) < 0) {
                uint64_t v27 = (uint64_t *)*v27;
              }
              uint64_t v28 = 0;
              while (*((_DWORD *)v27 + v28++))
                ;
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v27, v28 - 1);
              if (*(void *)&__p[16] >= *(void *)&__p[8])
              {
                if (v84)
                {
                  *(_DWORD *)v78 = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v78, 1uLL);
                  --*(void *)&__p[16];
                }
                else if (*(void *)&__p[8])
                {
                  *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
                }
              }
              else
              {
                *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
              }
              TTagManager::addParamTag((uint64_t)this);
              TBuffer<wchar_t>::resize((uint64_t)__p, v26);
              ++v25;
              uint64_t v24 = v20[163];
            }
            while (v25 < 0xAAAAAAAAAAAAAAABLL * ((v20[164] - v24) >> 3));
          }
        }
      }
      else if (!v14)
      {
        TBuffer<wchar_t>::assign((uint64_t)__p, dword_2140A2210);
        uint64_t v15 = (int *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0) {
          uint64_t v15 = *(int **)v15;
        }
        uint64_t v16 = 0;
        while (v15[v16++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v15, v16 - 1);
        *(_DWORD *)v78 = 61;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v78, 1uLL);
        unint64_t v18 = *(void *)&__p[16];
        *(_DWORD *)v78 = 48;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v78, 1uLL);
        if (*(void *)&__p[16] >= *(void *)&__p[8])
        {
          if (v84)
          {
            *(_DWORD *)v78 = 0;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v78, 1uLL);
            --*(void *)&__p[16];
          }
          else if (*(void *)&__p[8])
          {
            *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
          }
        }
        else
        {
          *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
        }
        TTagManager::addParamTag((uint64_t)this);
        TBuffer<wchar_t>::resize((uint64_t)__p, v18);
        *(_DWORD *)v78 = 49;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v78, 1uLL);
        if (*(void *)&__p[16] >= *(void *)&__p[8])
        {
          if (v84)
          {
            *(_DWORD *)v78 = 0;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v78, 1uLL);
            --*(void *)&__p[16];
          }
          else if (*(void *)&__p[8])
          {
            *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
          }
        }
        else
        {
          *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
        }
        TTagManager::addParamTag((uint64_t)this);
      }
LABEL_50:
      long long v30 = *(void **)v80;
      uint64_t v31 = *(void **)(*(void *)v80 + 8);
      if (v31)
      {
        do
        {
          uint64_t v32 = v31;
          uint64_t v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (void *)v30[2];
          BOOL v33 = *v32 == (void)v30;
          long long v30 = v32;
        }
        while (!v33);
      }
      *(void *)v80 = v32;
    }
    TParamManager::begin((uint64_t)a3, v80);
    while (1)
    {
      TParamManager::end((uint64_t)a3, v78);
      if (*(void *)v80 == *(void *)v78) {
        TTagManager::addTag((uint64_t)this, dword_2140A2248);
      }
      uint64_t v34 = *(void *)(*(void *)v80 + 40);
      if (v34 && (v35 = v34 - 1, uint64_t v36 = *((void *)a3 + 3), v35 < (*((void *)a3 + 4) - v36) >> 3)) {
        uint64_t v37 = *(void *)(v36 + 8 * v35);
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t v38 = (int *)(v37 + 16);
      long long v39 = (const __int32 *)(v37 + 16);
      if (*(char *)(v37 + 39) < 0) {
        long long v39 = *(const __int32 **)v38;
      }
      TParamManager::find((uint64_t)a4, v39, (uint64_t *)v78);
      TParamManager::end((uint64_t)a4, v76);
      if (*(void **)v78 != v76[0])
      {
        uint64_t v40 = *(void *)(*(void *)v78 + 40);
        if (v40)
        {
          unint64_t v41 = v40 - 1;
          uint64_t v42 = *((void *)a4 + 3);
          if (v41 >= (*((void *)a4 + 4) - v42) >> 3) {
            uint64_t v40 = 0;
          }
          else {
            uint64_t v40 = *(void *)(v42 + 8 * v41);
          }
        }
        if (*(char *)(v40 + 111) < 0)
        {
          if (!*(void *)(v40 + 96)) {
            goto LABEL_111;
          }
        }
        else if (!*(unsigned char *)(v40 + 111))
        {
          goto LABEL_111;
        }
      }
      int v43 = *(_DWORD *)(v37 + 8);
      if (v43 == 4)
      {
        if (v47[164] != v47[163])
        {
          long long v48 = v47;
          TBuffer<wchar_t>::assign((uint64_t)__p, dword_2140A222C);
          if (*(char *)(v37 + 39) < 0) {
            uint64_t v38 = *(int **)v38;
          }
          uint64_t v49 = 0;
          while (v38[v49++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v38, v49 - 1);
          LODWORD(v76[0]) = 61;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v76, 1uLL);
          uint64_t v51 = v48[163];
          if (v48[164] != v51)
          {
            unint64_t v52 = 0;
            unint64_t v53 = *(void *)&__p[16];
            do
            {
              long long v54 = (uint64_t *)(v51 + 24 * v52);
              if (*((char *)v54 + 23) < 0) {
                long long v54 = (uint64_t *)*v54;
              }
              uint64_t v55 = 0;
              while (*((_DWORD *)v54 + v55++))
                ;
              TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v54, v55 - 1);
              if (*(void *)&__p[16] >= *(void *)&__p[8])
              {
                if (v84)
                {
                  LODWORD(v76[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v76, 1uLL);
                  --*(void *)&__p[16];
                }
                else if (*(void *)&__p[8])
                {
                  *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
                }
              }
              else
              {
                *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
              }
              TTagManager::addParamTag((uint64_t)this);
              TBuffer<wchar_t>::resize((uint64_t)__p, v53);
              ++v52;
              uint64_t v51 = v48[163];
            }
            while (v52 < 0xAAAAAAAAAAAAAAABLL * ((v48[164] - v51) >> 3));
          }
        }
      }
      else if (!v43)
      {
        TBuffer<wchar_t>::assign((uint64_t)__p, dword_2140A2210);
        if (*(char *)(v37 + 39) < 0) {
          uint64_t v38 = *(int **)v38;
        }
        uint64_t v44 = 0;
        while (v38[v44++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], v38, v44 - 1);
        LODWORD(v76[0]) = 61;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v76, 1uLL);
        unint64_t v46 = *(void *)&__p[16];
        LODWORD(v76[0]) = 48;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v76, 1uLL);
        if (*(void *)&__p[16] >= *(void *)&__p[8])
        {
          if (v84)
          {
            LODWORD(v76[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v76, 1uLL);
            --*(void *)&__p[16];
          }
          else if (*(void *)&__p[8])
          {
            *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
          }
        }
        else
        {
          *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
        }
        TTagManager::addParamTag((uint64_t)this);
        TBuffer<wchar_t>::resize((uint64_t)__p, v46);
        LODWORD(v76[0]) = 49;
        TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v76, 1uLL);
        if (*(void *)&__p[16] >= *(void *)&__p[8])
        {
          if (v84)
          {
            LODWORD(v76[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)v76, 1uLL);
            --*(void *)&__p[16];
          }
          else if (*(void *)&__p[8])
          {
            *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
          }
        }
        else
        {
          *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
        }
        TTagManager::addParamTag((uint64_t)this);
      }
LABEL_111:
      long long v57 = *(void **)v80;
      uint64_t v58 = *(void **)(*(void *)v80 + 8);
      if (v58)
      {
        do
        {
          long long v59 = v58;
          uint64_t v58 = (void *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          long long v59 = (void *)v57[2];
          BOOL v33 = *v59 == (void)v57;
          long long v57 = v59;
        }
        while (!v33);
      }
      *(void *)v80 = v59;
    }
  }
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v60 = *(void *)getItnTagVersion();
    ItnTagVersion = (void *)getItnTagVersion();
    if (TInputStream::verifyHeader((uint64_t)a2, "ItnTag", v60, (uint64_t)(ItnTagVersion[1] - *ItnTagVersion) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v80, &byte_2140B33BB);
      *(void *)__p = byte_26C4DF190;
      if ((v80[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v80, *(std::string::size_type *)&v80[8]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v80;
        uint64_t v83 = *(void *)&v80[16];
      }
      *(void *)__p = &unk_26C4E0710;
      if (v83 >= 0) {
        uint64_t v68 = &__p[8];
      }
      else {
        uint64_t v68 = *(const char **)&__p[8];
      }
      conditionalAssert(v68, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 286, v64, v65);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v83) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if ((v80[23] & 0x80000000) != 0) {
        operator delete(*(void **)v80);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      void *exception = byte_26C4DF190;
      long long v70 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v70, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v74 = *(_OWORD *)__p;
        exception[3] = *(void *)&__p[16];
        *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v74;
      }
      void *exception = &unk_26C4E0710;
    }
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)__p, a2);
    uint64_t v62 = *(void *)__p;
    *(void *)v80 = &unk_2140A2538;
    *(_OWORD *)&v80[8] = xmmword_214085170;
    uint64_t v81 = -1;
    if (TFileObject::verify(*(uint64_t *)__p, (uint64_t)v80, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(v76, &byte_2140B33BB);
      *(void *)v78 = byte_26C4DF190;
      if (SHIBYTE(v77) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v78[8], (const std::string::value_type *)v76[0], (std::string::size_type)v76[1]);
      }
      else
      {
        *(_OWORD *)&v78[8] = *(_OWORD *)v76;
        uint64_t v79 = v77;
      }
      *(void *)v78 = &unk_26C4E0710;
      if (v79 >= 0) {
        uint64_t v71 = &v78[8];
      }
      else {
        uint64_t v71 = *(const char **)&v78[8];
      }
      conditionalAssert(v71, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 298, v66, v67);
      *(void *)v78 = byte_26C4DF190;
      if (SHIBYTE(v79) < 0) {
        operator delete(*(void **)&v78[8]);
      }
      if (SHIBYTE(v77) < 0) {
        operator delete(v76[0]);
      }
      v72 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v78, &byte_2140B33BB);
      void *v72 = byte_26C4DF190;
      v73 = (std::string *)(v72 + 1);
      if ((v78[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v73, *(const std::string::value_type **)v78, *(std::string::size_type *)&v78[8]);
      }
      else
      {
        long long v75 = *(_OWORD *)v78;
        int v72[3] = *(void *)&v78[16];
        *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v75;
      }
      void *v72 = &unk_26C4E0710;
    }
    long long v63 = *(const TFileObject **)(v62 + 24);
    if (v63) {
      TTagManager::addTag(this, v63);
    }
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)__p);
  }
}

void sub_213EE572C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,void *a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45)
{
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v45);
  JUMPOUT(0x213EE5848);
}

void sub_213EE5840()
{
}

void sub_213EE5870(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(v4);
  uint64_t v3 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_213EE58B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a11 && a24 != 0) {
      MEMORY[0x216698730]();
    }
  }
  ((void (*)())THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase)();
  uint64_t v27 = *v28;
  if (*v28)
  {
    *(void *)(v24 + 16) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t TTagManager::addParamTag(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result == -1) {
    operator new();
  }
  return result;
}

void sub_213EE59BC(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1092C40905D918ALL);
  _Unwind_Resume(a1);
}

void TTagManager::addTag(uint64_t a1, unsigned int *a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) == -1) {
    operator new();
  }
  loggableUnicode(a2, __p);
  if (__p[23] >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = *(unsigned char **)__p;
  }
  tknPrintf("Error: Tag name already defined: '%s'\n", v3, v4, v5, v6, v7);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, &byte_2140B33BB);
  *(void *)__p = byte_26C4DF190;
  if (SHIBYTE(v15) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v14[0], (std::string::size_type)v14[1]);
  }
  else
  {
    *(_OWORD *)&__p[8] = *(_OWORD *)v14;
    uint64_t v17 = v15;
  }
  *(void *)__p = &unk_26C4E0710;
  if (v17 >= 0) {
    uint64_t v10 = &__p[8];
  }
  else {
    uint64_t v10 = *(const char **)&__p[8];
  }
  conditionalAssert(v10, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/tagmgr.cpp", 364, v8, v9);
  *(void *)__p = byte_26C4DF190;
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)&__p[8]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
  void *exception = byte_26C4DF190;
  uint64_t v12 = (std::string *)(exception + 1);
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
  }
  else
  {
    long long v13 = *(_OWORD *)__p;
    exception[3] = *(void *)&__p[16];
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  void *exception = &unk_26C4E0710;
}

void sub_213EE5C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t getItnTagVersion(void)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  {
    operator new();
  }
  return getItnTagVersion(void)::pItnTagVersion;
}

void sub_213EE5DA0(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void TTagManager::addTag(TTagManager *this, const TFileObject *a2)
{
}

void sub_213EE6054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void *TTagManager::freeMemory(TTagManager *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void ***)(v3 + 8 * v4);
      if (v5)
      {
        TTag::~TTag(v5);
        MEMORY[0x216698730]();
        uint64_t v3 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }

  return THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::clear((void *)this + 4);
}

void TTagManager::~TTagManager(TTagManager *this)
{
  *(void *)this = &unk_26C4DF820;
  TTagManager::freeMemory(this);
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase((void *)this + 4);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  TTagManager::~TTagManager(this);

  JUMPOUT(0x216698730);
}

void *THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::clear(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = result[2];
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = v1[1];
      uint64_t result = *(void **)(v4 + 8 * i);
      if (result)
      {
        do
        {
          uint64_t v5 = (void *)*result;
          MEMORY[0x216698730]();
          uint64_t result = v5;
        }
        while (v5);
        uint64_t v4 = v1[1];
        unint64_t v2 = v1[2];
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  v1[3] = 0;
  return result;
}

uint64_t TTagManager::storeTag(TTagManager *this, TTag *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void **)((char *)this + 8);
  uint64_t v7 = *((void *)this + 1);
  uint64_t v9 = (void *)*((void *)this + 2);
  uint64_t v10 = ((uint64_t)v9 - v7) >> 3;
  unint64_t v11 = v10 + 1;
  *((void *)a2 + 3) = v10 + 1;
  unint64_t v14 = *((void *)this + 3);
  uint64_t v12 = (char *)this + 24;
  unint64_t v13 = v14;
  if ((unint64_t)v9 >= v14)
  {
    if (v11 >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v13 - v7;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= v11) {
      uint64_t v17 = v10 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v12, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v10];
    uint64_t v21 = &v19[8 * v18];
    *(void *)uint64_t v20 = a2;
    uint64_t v15 = v20 + 8;
    BOOL v23 = (char *)*((void *)this + 1);
    uint64_t v22 = (char *)*((void *)this + 2);
    if (v22 != v23)
    {
      do
      {
        uint64_t v24 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      uint64_t v22 = (char *)*v8;
    }
    *((void *)this + 1) = v20;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *uint64_t v9 = a2;
    uint64_t v15 = v9 + 1;
  }
  *((void *)this + 2) = v15;
  unint64_t v25 = (const __int32 *)a2;
  if (*((char *)a2 + 23) < 0) {
    unint64_t v25 = *(const __int32 **)a2;
  }
  v28[0] = v25;
  v28[1] = (const __int32 *)a2;
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::insert((uint64_t)this + 32, v28, a3, a4, a5, (uint64_t)&v27);
  return v10 + 1;
}

uint64_t TTagManager::addWordRuleTag(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result == -1) {
    operator new();
  }
  return result;
}

void sub_213EE644C(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1092C40905D918ALL);
  _Unwind_Resume(a1);
}

uint64_t THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::insert@<X0>(uint64_t a1@<X0>, const __int32 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9 == *(void *)(a1 + 16))
  {
    if (v9)
    {
      if (*(unsigned char *)(a1 + 34))
      {
        tknPrintf("Warning: hashtable resizing, size was %llu\n", (uint64_t)a2, a3, a4, a5, *(void *)(a1 + 24));
        uint64_t v9 = *(void *)(a1 + 16);
      }
      uint64_t v10 = 2 * v9;
    }
    else
    {
      uint64_t v10 = 10781;
    }
    THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(a1, v10);
  }
  unint64_t v11 = *a2;
  size_t v12 = wcslen(*a2);
  unint64_t v13 = 0;
  uint64_t v14 = 4 * v12;
  if (4 * v12)
  {
    do
    {
      uint64_t v15 = *(char *)v11;
      unint64_t v11 = (const __int32 *)((char *)v11 + 1);
      unint64_t v13 = 33 * v13 + v15;
      --v14;
    }
    while (v14);
  }
  unint64_t v16 = v13 % *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 8) + 8 * v16;
  do
  {
    uint64_t v17 = *(void *)v17;
    if (!v17) {
      operator new();
    }
    uint64_t result = wcscmp(*(const __int32 **)(v17 + 8), *a2);
  }
  while (result);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v19 + 8 * v16;
  uint64_t v21 = v19 + 8 * *(void *)(a1 + 16);
  *(void *)a6 = v20;
  *(void *)(a6 + 8) = v21;
  *(void *)(a6 + 16) = v17;
  *(unsigned char *)(a6 + 24) = 0;
  return result;
}

uint64_t TTagManager::getAllTags(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16) != *(void *)(result + 8))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = ++v4;
      uint64_t result = TBuffer<TPItnRuleHandle_fake **>::insert(a2, *(void *)(a2 + 16), (uint64_t *)&v5, 1uLL);
    }
    while (v4 < (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 3);
  }
  return result;
}

uint64_t TTagManager::getTag(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2 - 1 >= (unint64_t)((*(void *)(a1 + 16) - v2) >> 3)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * (a2 - 1));
  }
}

uint64_t TTagManager::getTag(uint64_t a1, const __int32 *a2)
{
  v3[0] = a2;
  v3[1] = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 32, v3, &v4);
  if (v5) {
    return *(void *)(*(void *)(v5 + 16) + 24);
  }
  else {
    return -1;
  }
}

uint64_t TTagManager::getTagName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (a2 - 1 >= (unint64_t)((*(void *)(a1 + 16) - v3) >> 3)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(int **)(v3 + 8 * (a2 - 1));
  }
  if (*((char *)v4 + 23) < 0) {
    uint64_t v4 = *(int **)v4;
  }
  return TBuffer<wchar_t>::assign(a3, v4);
}

uint64_t TTagManager::getTagDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8 * a2 - 8);
  uint64_t v4 = (int *)(v3 + 48);
  if (*(char *)(v3 + 71) < 0) {
    uint64_t v4 = *(int **)v4;
  }
  return TBuffer<wchar_t>::assign(a3, v4);
}

uint64_t TTagManager::getTagClientData(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 8 * a2 - 8) + 40);
}

uint64_t TTagManager::setTagClientData(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 8) + 8 * a2 - 8) + 40) = a3;
  return result;
}

BOOL TTagManager::isValidTag(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  return a2 - 1 < (unint64_t)((*(void *)(a1 + 16) - v2) >> 3) && *(void *)(v2 + 8 * (a2 - 1)) != 0;
}

void *std::vector<TFileVersionDescriptor>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<TFileVersionDescriptor>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 32 * a3);
    a1[1] = &v6[32 * a3];
  }
  return a1;
}

void sub_213EE6798(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TFileVersionDescriptor>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  *a1 = &unk_26C4E59E8;
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::clear(a1);
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x216698710](v2, 0x20C8093837F09);
  }
  return a1;
}

void THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

void TTag::~TTag(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void THashMap<wchar_t const*,TTag const*,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(void *a1)
{
  THashBase<std::pair<wchar_t const* const,TTag const*>,THashMapCompare<std::pair<wchar_t const* const,TTag const*>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TTag const*>,THash<wchar_t const*>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

const char *GetMrecName(void)
{
  return "MREC";
}

const char *GetMrecVersion(void)
{
  return "v1.24.000.15488";
}

const char *GetMrecVersionNumberString(void)
{
  return "1.24.000.15488";
}

DgnString *GetFullMrecDescription(DgnString *a1)
{
  DgnString::operator=(a1, "MREC");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "v1.24.000.15488");
  DgnString::operator+=(a1, " - The modular recognizer\n");
  DgnString::operator+=(a1, "MREC");
  DgnString::operator+=(a1, " Build ");
  DgnString::operator+=(a1, "imgls");
  DgnString::operator+=(a1, " (");
  DgnString::operator+=(a1, "ARM");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "MacOS");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "GNU_C/C++");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "4.2.1");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "Large");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "\"Ship\"");
  DgnString::operator+=(a1, ")\n");
  DgnString::operator+=(a1, "MREC");
  DgnString::operator+=(a1, " Compiled ");
  MrecTime::MrecTime((MrecTime *)v3);
  MrecTime::setToPreprocessorStyleDateAndTime((MrecTime *)v3, "Nov 10 2024", "02:15:00");
  MrecTime::formatAndAppendToString((MrecTime *)v3, a1);
  DgnString::operator+=(a1, "\n");
  DgnString::operator+=(a1, "MREC");
  DgnString::operator+=(a1, " ");
  DgnString::operator+=(a1, "Copyright (c) -  All rights reserved.");
  return DgnString::operator+=(a1, "\n");
}

uint64_t InternalCompareMrecVersions(const char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  ParseMrecVersion((uint64_t)a1, (uint64_t)&v25, a3, a4, a5, a6, a7, a8);
  v24[0] = 0;
  v24[1] = 0;
  ParseMrecVersion((uint64_t)a2, (uint64_t)v24, v9, v10, v11, v12, v13, v14);
  uint64_t v15 = v26;
  if (v26)
  {
    unint64_t v16 = v25;
    uint64_t v17 = (unsigned int *)v24[0];
    while (1)
    {
      unsigned int v19 = *v16++;
      unsigned int v18 = v19;
      unsigned int v20 = *v17++;
      BOOL v21 = v18 >= v20;
      if (v18 > v20) {
        break;
      }
      if (!v21)
      {
        uint64_t v22 = 0xFFFFFFFFLL;
        goto LABEL_9;
      }
      if (!--v15) {
        goto LABEL_7;
      }
    }
    uint64_t v22 = 1;
  }
  else
  {
LABEL_7:
    uint64_t v22 = 0;
  }
LABEL_9:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
  return v22;
}

void sub_213EE6BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ParseMrecVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v9) = 0;
  uint64_t v10 = MEMORY[0x263EF8318];
  *(_DWORD *)(a2 + 8) = 0;
  do
  {
    while (1)
    {
      unsigned int v11 = 0;
      uint64_t v12 = *(unsigned __int8 *)(a1 + v9);
      do
      {
        if ((v12 & 0x80) != 0 || (*(_DWORD *)(v10 + 4 * v12 + 60) & 0x400) == 0)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/mrecver.cpp", 215, (uint64_t)"mrecutil/mrecver", 1, (uint64_t)"%.500s", a7, a8, a1);
          LOBYTE(v12) = *(unsigned char *)(a1 + v9);
        }
        int v13 = v12 - 48;
        if ((~((_BYTE)v12 - 48) | 0xFFFFFF01) / 0xA < v11) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/mrecver.cpp", 219, (uint64_t)"mrecutil/mrecver", 1, (uint64_t)"%.500s", a7, a8, a1);
        }
        unsigned int v11 = v13 + 10 * v11;
        uint64_t v9 = (v9 + 1);
        uint64_t v12 = *(unsigned __int8 *)(a1 + v9);
      }
      while (v12 != 46 && v12 != 0);
      uint64_t v15 = *(unsigned int *)(a2 + 8);
      if (v15 == *(_DWORD *)(a2 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v15 = *(unsigned int *)(a2 + 8);
      }
      uint64_t v16 = *(void *)a2;
      *(_DWORD *)(*(void *)a2 + 4 * v15) = v11;
      int v17 = *(_DWORD *)(a2 + 8);
      int v18 = v17 + 1;
      *(_DWORD *)(a2 + 8) = v17 + 1;
      if (*(unsigned char *)(a1 + v9) != 46) {
        break;
      }
      LODWORD(v9) = v9 + 1;
    }
  }
  while (*(unsigned char *)(a1 + v9));
  if (v17 == 3)
  {
    if (v18 == *(_DWORD *)(a2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      uint64_t v16 = *(void *)a2;
    }
    else
    {
      uint64_t v21 = 4;
    }
    *(_DWORD *)(v16 + 4 * v21) = 0;
  }
  else
  {
    if (v17 != 2) {
      goto LABEL_34;
    }
    int v19 = *(_DWORD *)(v16 + 8);
    if (v18 == *(_DWORD *)(a2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
      uint64_t v20 = *(unsigned int *)(a2 + 8);
      uint64_t v16 = *(void *)a2;
    }
    else
    {
      uint64_t v20 = 3;
    }
    *(_DWORD *)(v16 + 4 * v20) = v19;
    ++*(_DWORD *)(a2 + 8);
    *(_DWORD *)(v16 + 8) = 0;
    unsigned int v22 = *(_DWORD *)(a2 + 8);
    if (v22 == *(_DWORD *)(a2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
      unsigned int v22 = *(_DWORD *)(a2 + 8);
      uint64_t v16 = *(void *)a2;
    }
    *(_DWORD *)(v16 + 4 * v22) = 0;
  }
  int v23 = *(_DWORD *)(a2 + 12);
  unsigned int v24 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v24;
  if (v24 == v23)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
    unsigned int v24 = *(_DWORD *)(a2 + 8);
    uint64_t v16 = *(void *)a2;
  }
  *(_DWORD *)(v16 + 4 * v24) = 0;
  int v18 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v18;
LABEL_34:
  if (v18 != 6) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/mrecver.cpp", 247, (uint64_t)"mrecutil/mrecver", 1, (uint64_t)"%.500s", a7, a8, a1);
  }
}

uint64_t InternalCompareMrecForkVersions(const char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v23[0] = 0;
  v23[1] = 0;
  ParseMrecVersion((uint64_t)a1, (uint64_t)v23, a3, a4, a5, a6, a7, a8);
  v22[0] = 0;
  v22[1] = 0;
  ParseMrecVersion((uint64_t)a2, (uint64_t)v22, v9, v10, v11, v12, v13, v14);
  char v15 = 0;
  uint64_t v16 = 0;
  do
  {
    unsigned int v17 = *(_DWORD *)(v23[0] + 4 * v16);
    unsigned int v18 = *(_DWORD *)(v22[0] + 4 * v16);
    if (v17 > v18)
    {
      uint64_t v20 = 1;
      goto LABEL_8;
    }
    unsigned __int8 v19 = v15 ^ 1;
    char v15 = 1;
    uint64_t v16 = 1;
  }
  while (((v17 >= v18) & v19) != 0);
  if (v17 >= v18) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = 0xFFFFFFFFLL;
  }
LABEL_8:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
  return v20;
}

void sub_213EE6F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void MrecInitModule_fmpe_pel(void)
{
  if (!gParDebugFmpe)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFmpe", (const char *)&unk_2140A2630, (const char *)&unk_2140A2630, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugFmpe = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugFmpe);
  }
}

void FmpeMgr::~FmpeMgr(PelMgr **this)
{
}

void FmpeMgr::printSize(FmpeMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 231, (DgnString *)&v143);
  if (v144) {
    uint64_t v16 = (void *)v143;
  }
  else {
    uint64_t v16 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A2630, a3, &unk_2140A2630, v16);
  DgnString::~DgnString((DgnString *)&v143);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A2630);
  uint64_t v21 = (PelMgr *)*((void *)this + 14);
  if (v21)
  {
    unint64_t v142 = 0;
    unint64_t v143 = 0;
    uint64_t v22 = (a3 + 1);
    unint64_t v141 = 0;
    PelMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v143, &v142, &v141);
    *a4 += v143;
    *a5 += v142;
    *a6 += v141;
  }
  else
  {
    uint64_t v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = 8;
  }
  uint64_t v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 233, (DgnString *)&v143);
  if (v144) {
    unsigned int v29 = (void *)v143;
  }
  else {
    unsigned int v29 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v22, &unk_2140A2630, (34 - a3), (34 - a3), v29, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v23;
  *a5 += v23;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    uint64_t v34 = (void *)v143;
  }
  else {
    uint64_t v34 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, v22, &unk_2140A2630, (34 - a3), (34 - a3), v34, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    long long v39 = (void *)v143;
  }
  else {
    long long v39 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, v22, &unk_2140A2630, (34 - a3), (34 - a3), v39, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    uint64_t v44 = (void *)v143;
  }
  else {
    uint64_t v44 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v22, &unk_2140A2630, (34 - a3), (34 - a3), v44, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    uint64_t v49 = (void *)v143;
  }
  else {
    uint64_t v49 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v22, &unk_2140A2630, (34 - a3), (34 - a3), v49, 4, 4, 0);
  uint64_t v140 = a3;
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    long long v54 = (void *)v143;
  }
  else {
    long long v54 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v22, &unk_2140A2630, (34 - a3), (34 - a3), v54, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  uint64_t v55 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 88, 0);
  uint64_t v56 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 88, 1);
  unint64_t v143 = 0;
  uint64_t v144 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v143);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    uint64_t v61 = (void *)v143;
  }
  else {
    uint64_t v61 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v22, &unk_2140A2630, v24, v24, v61, v55, v56, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v55;
  *a5 += v56;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    uint64_t v66 = (void *)v143;
  }
  else {
    uint64_t v66 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v22, &unk_2140A2630, v24, v24, v66, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    uint64_t v71 = (void *)v143;
  }
  else {
    uint64_t v71 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v22, &unk_2140A2630, v24, v24, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 12;
  }
  else {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 10);
  unsigned int v74 = *((_DWORD *)this + 11);
  if (v74 >= v73)
  {
    uint64_t v75 = 0;
    if ((int)v73 > 0) {
      uint64_t v72 = (v72 | 2) + 2 * (v73 - 1);
    }
    uint64_t v76 = v72 + 2 * (v74 - v73);
  }
  else
  {
    uint64_t v75 = 2 * v73;
    uint64_t v76 = v72;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    uint64_t v81 = (void *)v143;
  }
  else {
    uint64_t v81 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v22, &unk_2140A2630, v24, v24, v81, v76, v72, v75);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v76;
  *a5 += v72;
  *a6 += v75;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 12;
  }
  else {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 18);
  unsigned int v84 = *((_DWORD *)this + 19);
  if (v84 >= v83)
  {
    uint64_t v85 = 0;
    if ((int)v83 > 0) {
      uint64_t v82 = (v82 | 2) + 2 * (v83 - 1);
    }
    uint64_t v86 = v82 + 2 * (v84 - v83);
  }
  else
  {
    uint64_t v85 = 2 * v83;
    uint64_t v86 = v82;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    v91 = (void *)v143;
  }
  else {
    v91 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v22, &unk_2140A2630, v24, v24, v91, v86, v82, v85);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v86;
  *a5 += v82;
  *a6 += v85;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v92 = 12;
  }
  else {
    uint64_t v92 = 16;
  }
  uint64_t v93 = *((unsigned int *)this + 14);
  unsigned int v94 = *((_DWORD *)this + 15);
  if (v94 >= v93)
  {
    uint64_t v95 = 0;
    if ((int)v93 > 0) {
      v92 += 4 * (v93 - 1) + 4;
    }
    uint64_t v96 = v92 + 4 * (v94 - v93);
  }
  else
  {
    uint64_t v95 = 4 * v93;
    uint64_t v96 = v92;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    v101 = (void *)v143;
  }
  else {
    v101 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v22, &unk_2140A2630, v24, v24, v101, v96, v92, v95);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v96;
  *a5 += v92;
  *a6 += v95;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    v106 = (void *)v143;
  }
  else {
    v106 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v22, &unk_2140A2630, v24, v24, v106, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    v111 = (void *)v143;
  }
  else {
    v111 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v22, &unk_2140A2630, v24, v24, v111, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  uint64_t v112 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v112 = 12;
  }
  uint64_t v113 = *((unsigned int *)this + 32);
  if ((int)v113 <= 0) {
    uint64_t v114 = 0;
  }
  else {
    uint64_t v114 = 8 * v113;
  }
  uint64_t v115 = v114 + v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    v120 = (void *)v143;
  }
  else {
    v120 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v116, v117, v118, v119, v22, &unk_2140A2630, v24, v24, v120, v115, v115, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v115;
  *a5 += v115;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    v125 = (void *)v143;
  }
  else {
    v125 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v22, &unk_2140A2630, v24, v24, v125, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += 4;
  *a5 += 4;
  uint64_t v126 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v126 = 12;
  }
  uint64_t v127 = *((unsigned int *)this + 38);
  if ((int)v127 <= 0) {
    uint64_t v128 = 0;
  }
  else {
    uint64_t v128 = 8 * v127;
  }
  uint64_t v129 = v128 + v126;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 235, (DgnString *)&v143);
  if (v144) {
    v134 = (void *)v143;
  }
  else {
    v134 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v22, &unk_2140A2630, v24, v24, v134, v129, v129, 0);
  DgnString::~DgnString((DgnString *)&v143);
  *a4 += v129;
  *a5 += v129;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/fmpe.cpp", 236, (DgnString *)&v143);
  if (v144) {
    v139 = (void *)v143;
  }
  else {
    v139 = &unk_2140A2630;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v140, &unk_2140A2630, (35 - v140), (35 - v140), v139, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v143);
}

void sub_213EE7A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

char *writeSharedObject<short>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  int v18 = *(_DWORD *)(a2 + 8);
  uint64_t result = (char *)writeObject((uint64_t)a1, &v18, a3);
  if (v18)
  {
    int v12 = 2 * v18;
    uint64_t result = (char *)DgnSharedMemStream::writeSharedBytes(a1, *(const char **)a2, (2 * v18), v7, v8, v9, v10, v11);
    if (result)
    {
      uint64_t v13 = result;
      int v14 = v18;
      if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
      {
        uint64_t result = *(char **)a2;
        if (*(void *)a2) {
          uint64_t result = (char *)MemChunkFree(result, 0);
        }
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)a2 = v13;
    }
    else
    {
      uint64_t v13 = *(const char **)a2;
    }
    if ((v12 + 3) >= 4)
    {
      int v15 = 0;
      uint64_t v16 = (v12 + 3) >> 2;
      do
      {
        int v17 = *(_DWORD *)v13;
        v13 += 4;
        v15 ^= v17;
        --v16;
      }
      while (v16);
    }
    else
    {
      int v15 = 0;
    }
    *a3 ^= v15;
  }
  return result;
}

char *writeSharedObject<unsigned int>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  int v18 = *(_DWORD *)(a2 + 8);
  uint64_t result = (char *)writeObject((uint64_t)a1, &v18, a3);
  int v12 = v18;
  if (v18)
  {
    uint64_t result = (char *)DgnSharedMemStream::writeSharedBytes(a1, *(const char **)a2, (4 * v18), v7, v8, v9, v10, v11);
    if (result)
    {
      uint64_t v13 = result;
      int v14 = v18;
      if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
      {
        uint64_t result = *(char **)a2;
        if (*(void *)a2) {
          uint64_t result = (char *)MemChunkFree(result, 0);
        }
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)a2 = v13;
    }
    else
    {
      uint64_t v13 = *(const char **)a2;
    }
    int v15 = 0;
    uint64_t v16 = v12 & 0x3FFFFFFF;
    if ((v12 & 0x3FFFFFFF) != 0)
    {
      do
      {
        int v17 = *(_DWORD *)v13;
        v13 += 4;
        v15 ^= v17;
        --v16;
      }
      while (v16);
    }
    *a3 ^= v15;
  }
  return result;
}

int *readSharedObject<short>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  int v19 = 0;
  uint64_t result = (int *)readObject((uint64_t)a1, &v19, a3);
  if (v19)
  {
    int v13 = 2 * v19;
    uint64_t result = (int *)DgnSharedMemStream::readSharedBytes(a1, 2 * v19, v7, v8, v9, v10, v11, v12);
    int v14 = result;
    int v15 = v19;
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      uint64_t result = *(int **)a2;
      if (*(void *)a2) {
        uint64_t result = (int *)MemChunkFree(result, 0);
      }
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = v15;
    *(void *)a2 = v14;
    if ((v13 + 3) >= 4)
    {
      int v16 = 0;
      uint64_t v17 = (v13 + 3) >> 2;
      do
      {
        int v18 = *v14++;
        v16 ^= v18;
        --v17;
      }
      while (v17);
    }
    else
    {
      int v16 = 0;
    }
    *a3 ^= v16;
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      uint64_t result = *(int **)a2;
      if (*(void *)a2) {
        uint64_t result = (int *)MemChunkFree(result, 0);
      }
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)a2 = 0;
  }
  return result;
}

int *readSharedObject<unsigned int>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  int v19 = 0;
  uint64_t result = (int *)readObject((uint64_t)a1, &v19, a3);
  int v13 = v19;
  if (v19)
  {
    uint64_t result = (int *)DgnSharedMemStream::readSharedBytes(a1, 4 * v19, v7, v8, v9, v10, v11, v12);
    int v14 = result;
    int v15 = v19;
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      uint64_t result = *(int **)a2;
      if (*(void *)a2) {
        uint64_t result = (int *)MemChunkFree(result, 0);
      }
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = v15;
    *(void *)a2 = v14;
    int v16 = 0;
    uint64_t v17 = v13 & 0x3FFFFFFF;
    if ((v13 & 0x3FFFFFFF) != 0)
    {
      do
      {
        int v18 = *v14++;
        v16 ^= v18;
        --v17;
      }
      while (v17);
    }
    *a3 ^= v16;
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      uint64_t result = *(int **)a2;
      if (*(void *)a2) {
        uint64_t result = (int *)MemChunkFree(result, 0);
      }
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)a2 = 0;
  }
  return result;
}

uint64_t FmpeMgr::saveFmpeModel(FmpeMgr *this, DFile *a2, DFileChecksums *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  unint64_t v23 = 0xFFFFFFFF00000003;
  DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v23, (uint64_t)a3, a4, a5, a6, a7, a8);
  PelMgr::savePelMgr(*((PelMgr **)this + 14), a2, a3, v9, v8, v13);
  if (v9)
  {
    FmpeMgr::saveProjectionMatrix(this, a2, v8);
  }
  else
  {
    int v14 = OpenAndWriteMrecHeader((uint64_t)a2, 0x17u, v8, "MRFPB!?", 24, 7);
    unsigned int v22 = 0;
    writeObject((uint64_t)v14, (int *)this, &v22);
    writeObject((uint64_t)v14, (int *)this + 1, &v22);
    writeObject((uint64_t)v14, (int *)this + 2, &v22);
    writeObject((uint64_t)v14, (int *)this + 3, &v22);
    writeObject((uint64_t)v14, (int *)this + 5, &v22);
    writeObject<DgnPrimArray<long long>>((uint64_t)v14, (uint64_t)this + 88, &v22);
    writeObject((uint64_t)v14, (int *)this + 4, &v22);
    writeObject((uint64_t)v14, (int *)this + 6, &v22);
    writeObject<short>((uint64_t)v14, (uint64_t)this + 32, &v22);
    writeObject<short>((uint64_t)v14, (uint64_t)this + 64, &v22);
    writeObject<unsigned int>((uint64_t)v14, (uint64_t)this + 48, &v22);
    writeObject(v14, (const double *)this + 10, &v22, v15, v16, v17, v18, v19);
    writeObject((uint64_t)v14, (int *)this + 26, &v22);
    writeObjectChecksum((uint64_t)v14, (int *)&v22);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x17u, v22);
    DgnDelete<DgnStream>((void (***)(void))v14);
  }
  return DFile::popCurrentSubDirComponent((uint64_t)a2);
}

void FmpeMgr::saveProjectionMatrix(FmpeMgr *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v52);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v52, (uint64_t)a2, 0x18u, a3);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v52, sFPT_Versions, (uint64_t)&v50, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v52, "FMPEProjectionMatrixText", (void *)(v50 + 8 * (v51 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "NumberOfMatrixMixtureComponents", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "NumberOfFeatures", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "InputContextWindowSize", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "OutputContextWindowSize", *((unsigned int *)this + 3));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "ProjectionMatrixIntScale", *((unsigned int *)this + 4));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "TimeAveragingMatrixIntScale", *((unsigned int *)this + 5));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v52, "ProjectionMatrixQuantLevels", *((unsigned int *)this + 6));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v52, "ProjectionMatrixPostScale", *((double *)this + 10));
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  DgnString::DgnString((DgnString *)v45, "TableName");
  unsigned int v11 = v49;
  if (v49 == HIDWORD(v49))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v48, 1, 1);
    unsigned int v11 = v49;
  }
  DgnString::DgnString((DgnString *)(v48 + 16 * v11), (const DgnString *)v45);
  LODWORD(v49) = v49 + 1;
  DgnString::~DgnString((DgnString *)v45);
  unsigned int v12 = v47;
  if (v47 == HIDWORD(v47))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
    unsigned int v12 = v47;
  }
  *(_DWORD *)(v46 + 4 * v12) = 0;
  LODWORD(v47) = v12 + 1;
  unsigned int v44 = v49;
  DgnString::DgnString((DgnString *)v45, "RowNum");
  unsigned int v13 = v49;
  if (v49 == HIDWORD(v49))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v48, 1, 1);
    unsigned int v13 = v49;
  }
  DgnString::DgnString((DgnString *)(v48 + 16 * v13), (const DgnString *)v45);
  LODWORD(v49) = v49 + 1;
  DgnString::~DgnString((DgnString *)v45);
  unsigned int v14 = v47;
  if (v47 == HIDWORD(v47))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
    unsigned int v14 = v47;
  }
  *(_DWORD *)(v46 + 4 * v14) = 3;
  LODWORD(v47) = v14 + 1;
  unsigned int v15 = v49;
  DgnString::DgnString((DgnString *)v45, "ColNum");
  unsigned int v16 = v49;
  if (v49 == HIDWORD(v49))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v48, 1, 1);
    unsigned int v16 = v49;
  }
  DgnString::DgnString((DgnString *)(v48 + 16 * v16), (const DgnString *)v45);
  LODWORD(v49) = v49 + 1;
  DgnString::~DgnString((DgnString *)v45);
  unsigned int v17 = v47;
  if (v47 == HIDWORD(v47))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
    unsigned int v17 = v47;
  }
  *(_DWORD *)(v46 + 4 * v17) = 3;
  LODWORD(v47) = v17 + 1;
  unsigned int v18 = v49;
  DgnString::DgnString((DgnString *)v45, "Value");
  unsigned int v19 = v49;
  if (v49 == HIDWORD(v49))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v48, 1, 1);
    unsigned int v19 = v49;
  }
  DgnString::DgnString((DgnString *)(v48 + 16 * v19), (const DgnString *)v45);
  LODWORD(v49) = v49 + 1;
  DgnString::~DgnString((DgnString *)v45);
  unsigned int v20 = v47;
  if (v47 == HIDWORD(v47))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v46, 1, 1);
    unsigned int v20 = v47;
  }
  *(_DWORD *)(v46 + 4 * v20) = 1;
  LODWORD(v47) = v20 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v52, (uint64_t)&v46, (uint64_t)&v48);
  unsigned int v21 = *((_DWORD *)this + 1);
  int v22 = *(_DWORD *)this + *(_DWORD *)this * v21;
  uint64_t v42 = *((_DWORD *)this + 3) * v21;
  if (*((_DWORD *)this + 6))
  {
    if (v21)
    {
      unsigned int v23 = 0;
      unsigned int v24 = 1;
      do
      {
        if (v24)
        {
          for (unsigned int i = 0; i < v24; ++i)
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v52, 0, "ProjectionMatrixQuant");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v44, v23);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v15, i);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v52, v18, *(__int16 *)(*((void *)this + 4) + 2 * (i + v23 * *((_DWORD *)this + 6))));
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v52);
            unsigned int v24 = *((_DWORD *)this + 6);
          }
          unsigned int v21 = *((_DWORD *)this + 1);
        }
        ++v23;
      }
      while (v23 < v21);
    }
    int v41 = v22;
    if (v22)
    {
      int v26 = 0;
      int v27 = 0;
      int v28 = 0;
      uint64_t v29 = **((unsigned int **)this + 6);
      do
      {
        if (v42)
        {
          int v30 = 0;
          do
          {
            if (v27 == *((_DWORD *)this + 26))
            {
              int v27 = 0;
              LODWORD(v29) = *(_DWORD *)(*((void *)this + 6) + 4 * ++v28);
            }
            unsigned int v31 = *((_DWORD *)this + 6);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v52, 0, "ProjectionMatrix");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v44, v26);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v15, v30);
            uint64_t v32 = v29 / v31;
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v52, v18, v29 % v31);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v52);
            ++v27;
            ++v30;
            LODWORD(v29) = v29 / v31;
          }
          while (v42 != v30);
        }
        else
        {
          uint64_t v32 = v29;
        }
        ++v26;
        uint64_t v29 = v32;
      }
      while (v26 != v41);
    }
  }
  else if (v22)
  {
    int v33 = 0;
    for (int j = 0; j != v22; ++j)
    {
      if (v42)
      {
        for (uint64_t k = 0; k != v42; ++k)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v52, 0, "ProjectionMatrix");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v44, j);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v15, k);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v52, v18, *(__int16 *)(*((void *)this + 8) + 2 * (v33 + k)));
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v52);
        }
      }
      v33 += v42;
    }
  }
  uint64_t v43 = *((unsigned int *)this + 24);
  if (v43)
  {
    uint64_t v36 = 0;
    uint64_t v37 = (*((_DWORD *)this + 3) * *((_DWORD *)this + 1));
    do
    {
      if (v37)
      {
        for (uint64_t m = 0; m != v37; ++m)
        {
          int v39 = *((_DWORD *)this + 3);
          unsigned int v40 = *((_DWORD *)this + 1);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v52, 0, "TimeAveragingMatrix");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v44, m / v40 + v39 * v36);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v52, v15, m % v40);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v52, v18, *(void *)(*(void *)(*((void *)this + 11) + 16 * v36) + 8 * m));
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v52);
        }
      }
      ++v36;
    }
    while (v36 != v43);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v46);
  DgnArray<DgnString>::releaseAll((uint64_t)&v48);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v50);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v52);
}

void sub_213EE8684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

uint64_t FmpeMgr::getSelectedComponentsWithProbabilities(uint64_t a1, int a2, unsigned __int8 **a3, ReproData *this, unsigned __int16 *a5, uint64_t a6, uint64_t a7)
{
  ReproData::setOptionalPronStateId((uint64_t)this, a2);
  PelScorer::setFrameStaticsNoMic((uint64_t)this, 0, a3, 0, 0);
  int v44 = 0;
  uint64_t v43 = 0;
  int v42 = 0;
  uint64_t v41 = 0;
  *a5 = 0;
  if (*(_DWORD *)(*(void *)(a1 + 112) + 140) == 1)
  {
    PelScorer::getComponentProbs(this, 0, (uint64_t)&v43, 0x10000);
    uint64_t v13 = *(void *)(a1 + 112);
    uint64_t v14 = *a5;
    int v16 = *(_DWORD *)(*(void *)(v13 + 456) + 4 * v14);
    int v15 = *(_DWORD *)(*(void *)(v13 + 456) + 4 * v14 + 4);
    uint64_t v17 = (v15 - v16);
    if (v15 == v16) {
      goto LABEL_33;
    }
    unsigned int v18 = v43;
    double v19 = 0.0;
    do
    {
      double v20 = *v18++;
      double v21 = v20;
      if (v20 > v19) {
        double v19 = v21;
      }
      --v17;
    }
    while (v17);
    goto LABEL_20;
  }
  PelScorer::getComponentProbs(this, 0, (uint64_t)&v41, 0x10000);
  uint64_t v22 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 112) + 456) + 4 * *a5 + 4)
                     - *(_DWORD *)(*(void *)(*(void *)(a1 + 112) + 456) + 4 * *a5));
  if (v22)
  {
    uint64_t v24 = 0;
    __int16 v25 = 0;
    double v26 = 0.0;
    do
    {
      if (*(double *)(v41 + 8 * v24) > v26)
      {
        __int16 v25 = v24;
        double v26 = *(double *)(v41 + 8 * v24);
      }
      ++v24;
    }
    while (v22 != v24);
    unsigned __int16 v23 = v25 + 1;
  }
  else
  {
    unsigned __int16 v23 = 1;
  }
  *a5 = v23;
  PelScorer::getComponentProbs(this, v23, (uint64_t)&v43, 0x10000);
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v14 = *a5;
  int v16 = *(_DWORD *)(*(void *)(v13 + 456) + 4 * v14);
  int v15 = *(_DWORD *)(*(void *)(v13 + 456) + 4 * v14 + 4);
  uint64_t v27 = (v15 - v16);
  if (v15 != v16)
  {
    int v28 = v43;
    double v19 = 0.0;
    do
    {
      double v29 = *v28++;
      double v30 = v29;
      if (v29 > v19) {
        double v19 = v30;
      }
      --v27;
    }
    while (v27);
LABEL_20:
    if (v19 != 0.0)
    {
      double v31 = 0.0;
      if (v15 != v16)
      {
        unint64_t v32 = 0;
        double v33 = v19 * *((double *)this + 18);
        do
        {
          double v34 = v43[v32];
          if (v34 > v33)
          {
            uint64_t v35 = *(unsigned int *)(a6 + 8);
            if (v35 == *(_DWORD *)(a6 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
              uint64_t v35 = *(unsigned int *)(a6 + 8);
              uint64_t v13 = *(void *)(a1 + 112);
              uint64_t v14 = *a5;
            }
            double v31 = v31 + v34;
            *(_DWORD *)(*(void *)a6 + 4 * v35) = v32;
            ++*(_DWORD *)(a6 + 8);
          }
          ++v32;
        }
        while (v32 < (*(_DWORD *)(*(void *)(v13 + 456) + 4 * v14 + 4)
                                   - *(_DWORD *)(*(void *)(v13 + 456) + 4 * v14)));
      }
      unint64_t v36 = *(unsigned int *)(a6 + 8);
      if (v36)
      {
        unint64_t v37 = 0;
        unsigned int v38 = *(_DWORD *)(a7 + 8);
        do
        {
          double v39 = v43[*(unsigned int *)(*(void *)a6 + 4 * v37)];
          if (v38 == *(_DWORD *)(a7 + 12))
          {
            DgnPrimArray<unsigned long long>::reallocElts(a7, 1, 1);
            unsigned int v38 = *(_DWORD *)(a7 + 8);
            unint64_t v36 = *(unsigned int *)(a6 + 8);
          }
          *(double *)(*(void *)a7 + 8 * v38++) = v39 / v31;
          *(_DWORD *)(a7 + 8) = v38;
          ++v37;
        }
        while (v37 < v36);
      }
    }
  }
LABEL_33:
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v41);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v43);
}

void sub_213EE89B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t FmpeMgr::fmpeStage1(uint64_t a1, int a2, unsigned __int8 **a3, void **a4, ReproData *this)
{
  uint64_t v9 = (*(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
  if (v9) {
    bzero(*a4, 8 * (*(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12)));
  }
  unsigned __int16 v69 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  v66[0] = 0;
  v66[1] = 0;
  FmpeMgr::getSelectedComponentsWithProbabilities(a1, a2, a3, this, &v69, (uint64_t)&v67, (uint64_t)v66);
  if (v68)
  {
    unint64_t v11 = 0;
    uint64_t v12 = v69;
    do
    {
      unint64_t v13 = *(void *)(a1 + 112);
      uint64_t v14 = *(_DWORD **)(v13 + 272);
      if (v12) {
        int v15 = *v14 - v14[1];
      }
      else {
        int v15 = 0;
      }
      int v16 = *(_DWORD *)(v67 + 4 * v11);
      uint64_t v17 = *(void *)(v13 + 288);
      int v18 = v14[*(unsigned __int16 *)(v17 + 2 * v12)];
      double v19 = *(double *)(v66[0] + 8 * v11);
      double v20 = *(double *)(a1 + 80);
      v65[0] = 0;
      v65[1] = 0;
      v64[0] = 0;
      v64[1] = 0;
      PelMgr::unpackGenoneComponent(v13, *(unsigned __int16 *)(v17 + 2 * v12), v16, (uint64_t)v65, (uint64_t)v64, v10);
      double v22 = v19 * 6.38307649;
      double v23 = v19 * v20;
      unint64_t v24 = *(unsigned int *)(a1 + 4);
      LODWORD(v25) = v24 + 1;
      unsigned int v26 = (v15 + v16 + v18) * v9 * (v24 + 1);
      unsigned int v27 = *(_DWORD *)(a1 + 24);
      if (v27)
      {
        unsigned int v28 = *(_DWORD *)(a1 + 104);
        int v29 = v26 / v28;
        unsigned int v30 = v26 % v28;
        unsigned int v31 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * (v26 / v28));
        if (v26 % v28)
        {
          unsigned int v32 = 0;
          do
          {
            ++v32;
            v31 /= v27;
          }
          while (v32 < v30);
        }
        uint64_t v33 = *(unsigned int *)(a1 + 40);
        double v34 = *(double **)(a1 + 144);
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        if (v33)
        {
          uint64_t v70 = 0;
          HIDWORD(v63) = realloc_array(0, &v70, 8 * v33, 0, 0, 1) >> 3;
          uint64_t v35 = (double *)v70;
          uint64_t v62 = v70;
          LODWORD(v24) = *(_DWORD *)(a1 + 4);
          LODWORD(v25) = v24 + 1;
        }
        else
        {
          uint64_t v35 = 0;
        }
        unint64_t v45 = 0;
        LODWORD(v63) = v33;
        uint64_t v46 = *a3;
        uint64_t v47 = v65[0];
        uint64_t v48 = v64[0];
        if (v25 <= 1) {
          uint64_t v25 = 1;
        }
        else {
          uint64_t v25 = v25;
        }
        do
        {
          double v49 = v23;
          if (v45 < v24)
          {
            LODWORD(v21) = *(_DWORD *)(v48 + 4 * v45);
            double v21 = (double)*(unint64_t *)&v21;
            double v49 = v22 * (double)(v46[v45] - *(_DWORD *)(v47 + 4 * v45)) / v21;
          }
          uint64_t v50 = v33;
          uint64_t v51 = v35;
          uint64_t v52 = v34;
          if (v33)
          {
            do
            {
              double v53 = *v52++;
              double v21 = v49 * v53;
              *v51++ = v49 * v53;
              --v50;
            }
            while (v50);
          }
          if (v9)
          {
            int v54 = 0;
            int v55 = *(_DWORD *)(a1 + 104);
            uint64_t v56 = (double *)*a4;
            uint64_t v57 = v9;
            int v58 = *(_DWORD *)(a1 + 24);
            do
            {
              if (v30 == v55)
              {
                unsigned int v30 = 0;
                unsigned int v31 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * ++v29);
              }
              ++v30;
              int v59 = v31 & 3;
              v31 >>= 2;
              if (v54 == v33) {
                int v54 = 0;
              }
              double v21 = *v56;
              double *v56 = v35[v59 + v54] + *v56;
              ++v56;
              v54 += v58;
              --v57;
            }
            while (v57);
          }
          ++v45;
        }
        while (v45 != v25);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v62);
      }
      else
      {
        unint64_t v36 = 0;
        unint64_t v37 = *a3;
        uint64_t v38 = v65[0];
        uint64_t v39 = v64[0];
        if (v25 <= 1) {
          uint64_t v25 = 1;
        }
        else {
          uint64_t v25 = v25;
        }
        do
        {
          double v40 = v23;
          if (v36 < v24)
          {
            LODWORD(v21) = *(_DWORD *)(v39 + 4 * v36);
            double v21 = (double)*(unint64_t *)&v21;
            double v40 = v22 * (double)(v37[v36] - *(_DWORD *)(v38 + 4 * v36)) / v21;
          }
          if (v9)
          {
            uint64_t v41 = *(void *)(a1 + 64);
            int v42 = (double *)*a4;
            uint64_t v43 = v9;
            unsigned int v44 = v26;
            do
            {
              double v21 = *v42 + v40 * (double)*(__int16 *)(v41 + 2 * v44);
              *v42++ = v21;
              ++v44;
              --v43;
            }
            while (v43);
          }
          ++v36;
          v26 += v9;
        }
        while (v36 != v25);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v64);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v65);
      ++v11;
    }
    while (v11 < v68);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v66);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v67);
}

void sub_213EE8D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t FmpeMgr::fmpeStage2(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 112) + 132);
  uint64_t v12 = (v11 * *(_DWORD *)(a1 + 12));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (v12)
  {
    unint64_t v37 = 0;
    unint64_t v13 = realloc_array(0, &v37, 8 * v12, 0, 0, 1);
    uint64_t v14 = (double *)v37;
    uint64_t v35 = v37;
    LODWORD(v36) = v12;
    HIDWORD(v36) = v13 >> 3;
    bzero(v37, 8 * v12);
    if (!v10) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v14 = 0;
    LODWORD(v36) = 0;
    if (!v10) {
      goto LABEL_12;
    }
  }
  uint64_t v15 = 0;
  unsigned int v16 = a2 - (v10 >> 1);
  unsigned int v17 = *((_DWORD *)a4 + 4) - 1;
  unsigned int v18 = *((_DWORD *)a4 + 2);
  uint64_t v19 = *a4;
  do
  {
    unsigned int v20 = v16 + v15;
    if ((int)(v16 + v15) >= 0 && v20 <= v17 && v12)
    {
      double v21 = *(double **)(v19 + 16 * (v20 % v18));
      double v22 = *(uint64_t **)(*(void *)(a1 + 88) + 16 * v15);
      uint64_t v23 = v12;
      unint64_t v24 = v14;
      do
      {
        uint64_t v25 = *v22++;
        uint64_t v26 = v25;
        double v27 = *v21++;
        *unint64_t v24 = *v24 + (double)v26 * v27;
        ++v24;
        --v23;
      }
      while (v23);
    }
    ++v15;
  }
  while (v15 != v10);
LABEL_12:
  if (v11 < v12)
  {
    uint64_t v28 = v11;
    do
    {
      v14[v28 % v11] = v14[v28] + v14[v28 % v11];
      ++v28;
    }
    while (v12 != v28);
  }
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      double v30 = v14[i];
      double v31 = v30 / (double)(*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20));
      v14[i] = v31;
      LOBYTE(v30) = *(unsigned char *)(*(void *)(*(void *)a3 + 16 * (a2 % *(_DWORD *)(a3 + 8))) + i);
      double v32 = v31 + (double)*(unint64_t *)&v30;
      if (v32 + 0.5 <= 255.0)
      {
        if (v32 + 0.5 >= 0.0) {
          int v33 = (int)v32;
        }
        else {
          LOBYTE(v33) = 0;
        }
      }
      else
      {
        LOBYTE(v33) = -1;
      }
      *(unsigned char *)(*a5 + i) = v33;
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v35);
}

void SDLm_LmScore(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t *a4, unsigned int a5, uint64_t *a6, unsigned int a7, uint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, void *a12, unsigned int a13, unsigned int *a14, void **a15, unsigned int *a16, void (*a17)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *), unint64_t a18)
{
  SdapiInsurance::SdapiInsurance(v143, "SDLm_LmScore", 1, 1, 131);
  if (v143[97])
  {
    unsigned int v118 = a3;
    if (gbShowCalls)
    {
      int v29 = "SD_TRUE";
      if (a1) {
        double v30 = "SD_TRUE";
      }
      else {
        double v30 = "SD_FALSE";
      }
      if (a2) {
        double v31 = "SD_TRUE";
      }
      else {
        double v31 = "SD_FALSE";
      }
      uint64_t v32 = a8;
      if (!a3) {
        int v29 = "SD_FALSE";
      }
      if (gbShowCallPointerArguments) {
        int v33 = a4;
      }
      else {
        int v33 = 0;
      }
      if (gbShowCallPointerArguments) {
        double v34 = a6;
      }
      else {
        double v34 = 0;
      }
      if (!gbShowCallPointerArguments) {
        uint64_t v32 = 0;
      }
      uint64_t v35 = a10;
      if (!gbShowCallPointerArguments) {
        uint64_t v35 = 0;
      }
      unint64_t v37 = a12;
      uint64_t v36 = (uint64_t)a16;
      if (gbShowCallPointerArguments)
      {
        uint64_t v38 = a14;
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v38 = 0;
      }
      if (gbShowCallPointerArguments) {
        uint64_t v39 = (uint64_t)a15;
      }
      else {
        uint64_t v39 = 0;
      }
      if (!gbShowCallPointerArguments) {
        uint64_t v36 = 0;
      }
      uint64_t v40 = (uint64_t)a17;
      uint64_t v41 = a18;
      if (!gbShowCallPointerArguments)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 0;
      }
      xlprintf("Entering sdapi call %.500s(%.500s, %.500s, %.500s, Masked:0x%016llx, %llu, Masked:0x%016llx, %llu, Masked:0x%016llx, %llu, Masked:0x%016llx, %llu, Masked:0x%016llx, %llu, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx)\n", v39, v36, v40, v41, "SDLm_LmScore", v30, v31, v29, v33, a5, v34, a7, v32, a9, v35, a11,
        v37,
        a13,
        v38,
        v39,
        v36,
        v40,
        v41);
    }
    if (!a4 && a5) {
      throwBadLengthForNullPointer(a5, "DgnVerifyReadPtr", v23, v24, v25, v26, v27, v28);
    }
    LOBYTE(v126[0]) = 0;
    if (!a6 && a7) {
      throwBadLengthForNullPointer(a7, "DgnVerifyReadPtr", v23, v24, v25, v26, v27, v28);
    }
    LOBYTE(v126[0]) = 0;
    if (!a8 && a9) {
      throwBadLengthForNullPointer(a9, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
    }
    if (a3 >= 2)
    {
      throwBadSdapiArgument("SDBool", (int)a3, v23, v24, v25, v26, v27, v28);
    }
    else if (a3 == 1)
    {
      if (!a10 && a11) {
        throwBadLengthForNullPointer(a11, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      }
      if (!a12 && a13) {
        throwBadLengthForNullPointer(a13, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      }
      if (!a14) {
        throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      }
      if (!a15) {
        throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      }
      if (!a16) {
        throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v23, v24, v25, v26, v27, v28);
      }
      if (a11 != a9)
      {
        uint64_t v113 = a9;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 212, (uint64_t)"sdapi/sdlm", 21, (uint64_t)"%u %u", v27, v28, a11);
      }
      int v116 = 1;
      goto LABEL_75;
    }
    if (a10) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 216, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_2140A268F);
    }
    if (a11) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 217, (uint64_t)"sdapi/sdlm", 23, (uint64_t)"%s", v27, v28, (char)&errStr_sdapi_sdlm_E_INVALID_COUNT_ARG);
    }
    if (a12) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 218, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_2140A268F);
    }
    if (a13) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 219, (uint64_t)"sdapi/sdlm", 23, (uint64_t)"%s", v27, v28, (char)&errStr_sdapi_sdlm_E_INVALID_COUNT_ARG);
    }
    if (a14) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 220, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_2140A268F);
    }
    if (a15) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 221, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_2140A268F);
    }
    if (a16) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 222, (uint64_t)"sdapi/sdlm", 22, (uint64_t)"%s", v27, v28, (char)&unk_2140A268F);
    }
    int v116 = 0;
LABEL_75:
    if (a7 != a9)
    {
      uint64_t v113 = a9;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 226, (uint64_t)"sdapi/sdlm", 14, (uint64_t)"%u %u", v27, v28, a7);
    }
    if (!a7) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 227, (uint64_t)"sdapi/sdlm", 5, (uint64_t)"%s", v27, v28, (char)&errStr_sdapi_sdlm_E_EMPTY_TRANSCRIPTION);
    }
    unint64_t v141 = 0;
    uint64_t v142 = 0;
    sdUtilConvertSDWordSpecsToCwids(a4, a5, (uint64_t)&v141, 1, 0, 0, 1, v28);
    v140[1] = 0;
    v140[0] = 0;
    sdUtilConvertSDWordSpecsToCwids(a6, a7, (uint64_t)v140, 0, 1, 0, 1, v42);
    uint64_t v139 = 0;
    uint64_t v138 = 0;
    uint64_t v49 = *(unsigned int *)(*(void *)VocMgr::smpVocMgr + 8);
    if (v49)
    {
      v126[0] = 0;
      HIDWORD(v139) = realloc_array(0, v126, 8 * v49, 0, 0, 1) >> 3;
      uint64_t v138 = (void (****)(void))v126[0];
      LODWORD(v50) = v139;
      if (v139 > v49)
      {
        if ((int)v139 > (int)v49)
        {
          uint64_t v51 = (int)v139 - 1;
          do
          {
            DgnDelete<LMContextData>(v138[v51]);
            v138[v51] = 0;
          }
          while (v51-- > (int)v49);
        }
        goto LABEL_90;
      }
    }
    else
    {
      LODWORD(v50) = 0;
    }
    if (v50 < v49)
    {
      uint64_t v50 = v50;
      do
        v138[v50++] = 0;
      while (v49 != v50);
    }
LABEL_90:
    LODWORD(v139) = v49;
    double v53 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (v142)
    {
      unsigned int v54 = v142 - 1;
      do
      {
        unsigned int v55 = *((_DWORD *)v141 + v54);
        if (v55 >> 27 != 31 && *(void *)(ModelMgr::getVocOrThrow(v53, v55 >> 25, v43, v44, v45, v46, v47, v48) + 136)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 253, (uint64_t)"sdapi/sdlm", 24, (uint64_t)"%s", v47, v48, (char)&errStr_sdapi_sdlm_E_VOC_UNLOADEDLM);
        }
      }
      while ((unint64_t)v54--);
    }
    long long v136 = 0u;
    long long v137 = 0u;
    *(_OWORD *)uint64_t v135 = 0u;
    uint64_t v134 = 0;
    uint64_t v133 = 0;
    if (a7)
    {
      for (uint64_t i = 0; i != a7; ++i)
      {
        unint64_t v58 = v142;
        unsigned int v59 = *(_DWORD *)(v140[0] + 4 * i);
        if (v59 == -50331651)
        {
          LODWORD(v60) = 16777213;
          if (!v142) {
            goto LABEL_109;
          }
          uint64_t v61 = 4 * v142 - 4;
          do
          {
            unsigned int v62 = *(_DWORD *)((char *)v141 + v61);
            BOOL v63 = v62 >> 27 != 31 || v61 == 0;
            v61 -= 4;
          }
          while (!v63);
          LODWORD(v60) = 16777213;
          if (v62 >> 27 == 31) {
            goto LABEL_109;
          }
          unsigned int v59 = v62 & 0xFE000000 | 0xFFFFFD;
          *(_DWORD *)(v140[0] + 4 * i) = v59;
        }
        uint64_t v60 = v59 & 0xFFFFFF;
        if (v59 >> 27 != 31)
        {
          uint64_t v64 = v59 >> 25;
          if (*(void *)(ModelMgr::getVocOrThrow(v53, v59 >> 25, v43, v44, v45, v46, v47, v48) + 136)) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 300, (uint64_t)"sdapi/sdlm", 24, (uint64_t)"%s", v69, v70, (char)&errStr_sdapi_sdlm_E_VOC_UNLOADEDLM);
          }
          if (v58 >= 3) {
            int v71 = 3;
          }
          else {
            int v71 = v58;
          }
          LODWORD(v134) = 0;
          if (v71)
          {
            unsigned int v72 = 0;
            unsigned int v73 = v58 - 1;
            if (v58 >= 3) {
              unint64_t v58 = 3;
            }
            do
            {
              unsigned int v74 = *((_DWORD *)v141 + v73);
              if (v74 >> 25 != v64 && (v74 >> 25) - 125 >= 2) {
                break;
              }
              if (v72 == HIDWORD(v134))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v133, 1, 1);
                unsigned int v72 = v134;
              }
              *(_DWORD *)(v133 + 4 * v72) = v74 & 0xFFFFFF;
              unsigned int v72 = v134 + 1;
              LODWORD(v134) = v134 + 1;
              --v73;
              --v58;
            }
            while (v58);
          }
          uint64_t v76 = *(void *)(ModelMgr::getVocOrThrow(v53, v64, v65, v66, v67, v68, v69, v70) + 72);
          long long v131 = 0u;
          long long v132 = 0u;
          long long v129 = 0u;
          long long v130 = 0u;
          long long v127 = 0u;
          long long v128 = 0u;
          LMStats::resetStats((LMStats *)v126);
          long long v123 = xmmword_2140A2670;
          int v124 = 1;
          char v125 = 1;
          uint64_t v77 = v138[v64];
          if (!v77)
          {
            uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 464))(v76);
            v138[v64] = (void (***)(void))v78;
            uint64_t v77 = v138[v64];
          }
          (*(void (**)(uint64_t, uint64_t *, void, void **, long long *, void (***)(void)))(*(void *)v76 + 472))(v76, &v133, 0, v126, &v123, v77);
          char v122 = 0;
          long long v120 = 0u;
          long long v121 = 0u;
          long long v119 = 0u;
          if (a1 >= 2) {
            throwBadSdapiArgument("SDBool", (int)a1, v79, v80, v81, v82, v83, v84);
          }
          if (a2 >= 2) {
            throwBadSdapiArgument("SDBool", (int)a2, v79, v80, v81, v82, v83, v84);
          }
          int v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, void (***)(void), long long *, BOOL, BOOL, char *, uint64_t))(*(void *)v76 + 504))(v76, v60, 0xFFFFLL, v126, v77, &v119, a1 == 1, a2 == 1, &v122, v113);
          (*(void (**)(uint64_t, void (***)(void)))(*(void *)v76 + 480))(v76, v77);
          *(_DWORD *)(a8 + 4 * i) = v85;
          if (v118 >= 2) {
            throwBadSdapiArgument("SDBool", (int)v118, v86, v87, v88, v89, v90, v91);
          }
          if (v116)
          {
            *(_DWORD *)(a10 + 4 * i) = DWORD2(v119);
            LMScoreDetails::appendDetails((unint64_t)v135, (const LMScoreDetails *)&v119);
          }
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v121);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v120);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v119);
          goto LABEL_139;
        }
LABEL_109:
        *(_DWORD *)(a8 + 4 * i) = 0;
        if (v118 >= 2) {
          throwBadSdapiArgument("SDBool", (int)v118, v43, v44, v45, v46, v47, v48);
        }
        if (v116) {
          *(_DWORD *)(a10 + 4 * i) = 0;
        }
LABEL_139:
        if (v60 == 16777213)
        {
          uint64_t v92 = v141;
          if (!HIDWORD(v142))
          {
            v126[0] = 0;
            HIDWORD(v142) = realloc_array(v141, v126, 4uLL, 4 * v142, 4 * v142, 1) >> 2;
            uint64_t v92 = v126[0];
            unint64_t v141 = v126[0];
          }
          LODWORD(v142) = 1;
          *uint64_t v92 = -50331650;
        }
        else
        {
          int v93 = *(_DWORD *)(v140[0] + 4 * i);
          uint64_t v94 = v142;
          if (v142 == (unint64_t)HIDWORD(v142))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v141, 1, 1);
            uint64_t v94 = v142;
          }
          *((_DWORD *)v141 + v94) = v93;
          LODWORD(v142) = v142 + 1;
        }
      }
    }
    if (v118 >= 2) {
      throwBadSdapiArgument("SDBool", (int)v118, v43, v44, v45, v46, v47, v48);
    }
    if (!v116) {
      goto LABEL_168;
    }
    unsigned int v95 = v135[2];
    if (v135[2] <= a13)
    {
      *a15 = a12;
      *a16 = a13;
      unsigned int v102 = v95;
      if (!v95)
      {
LABEL_167:
        *a14 = v95;
LABEL_168:
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v133);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v137);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v136);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v135);
        DgnIOwnArray<LMContextData *>::releaseAll((uint64_t)&v138);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v140);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v141);
        goto LABEL_169;
      }
    }
    else
    {
      ApiState::callReallocateArrayCallback((ApiState *)ApiState::smpApiState, a17, a18, 16, v135[2], a12, a13, a15, a16);
      if (!*a15 && *a16) {
        throwBadLengthForNullPointer(*a16, "DgnVerifyWritePtr", v96, v97, v98, v99, v100, v101);
      }
      unsigned int v102 = v135[2];
      if (!v135[2]) {
        goto LABEL_167;
      }
    }
    uint64_t v103 = 0;
    uint64_t v104 = (int *)v136;
    uint64_t v105 = *(__int16 **)v135;
    uint64_t v106 = 16 * v102;
    uint64_t v107 = (int *)v137;
    do
    {
      int v108 = *v104++;
      uint64_t v109 = 1;
      switch(v108)
      {
        case 0:
          break;
        case 1:
          uint64_t v109 = 2;
          break;
        case 2:
          uint64_t v109 = 3;
          break;
        case 3:
          uint64_t v109 = 4;
          break;
        case 4:
          uint64_t v109 = 5;
          break;
        case 5:
          uint64_t v109 = 6;
          break;
        case 6:
          uint64_t v109 = 7;
          break;
        default:
          uint64_t v109 = 8;
          break;
      }
      *(void *)((char *)*a15 + v103) = v109;
      int v110 = *v105++;
      v111 = (char *)*a15 + v103;
      *((_DWORD *)v111 + 2) = v110;
      int v112 = *v107++;
      *((_DWORD *)v111 + 3) = v112;
      v103 += 16;
    }
    while (v106 != v103);
    goto LABEL_167;
  }
LABEL_169:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v143);
}

void sub_213EE9C30(_Unwind_Exception *a1, int a2)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x230]);
  LMScoreDetails::~LMScoreDetails((LMScoreDetails *)&STACK[0x240]);
  DgnIOwnArray<LMContextData *>::releaseAll((uint64_t)&STACK[0x278]);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x288]);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 - 248);
  if (a2 == 2)
  {
    uint64_t v5 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v5, v6);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)(v2 - 232));
      _Unwind_Resume(a1);
    }
    uint64_t v7 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v7);
  }
  __cxa_end_catch();
  JUMPOUT(0x213EE9C08);
}

unint64_t LMScoreDetails::appendDetails(unint64_t this, const LMScoreDetails *a2)
{
  if (*((_DWORD *)a2 + 2))
  {
    uint64_t v3 = this;
    unint64_t v4 = 0;
    uint64_t v5 = this + 16;
    uint64_t v6 = this + 32;
    do
    {
      __int16 v7 = *(_WORD *)(*(void *)a2 + 2 * v4);
      unsigned int v8 = *(_DWORD *)(v3 + 8);
      if (v8 == *(_DWORD *)(v3 + 12))
      {
        this = DgnPrimArray<short>::reallocElts(v3, 1, 1);
        unsigned int v8 = *(_DWORD *)(v3 + 8);
      }
      *(_WORD *)(*(void *)v3 + 2 * v8) = v7;
      *(_DWORD *)(v3 + 8) = v8 + 1;
      int v9 = *(_DWORD *)(*((void *)a2 + 2) + 4 * v4);
      unsigned int v10 = *(_DWORD *)(v3 + 24);
      if (v10 == *(_DWORD *)(v3 + 28))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(v5, 1, 1);
        unsigned int v10 = *(_DWORD *)(v3 + 24);
      }
      *(_DWORD *)(*(void *)(v3 + 16) + 4 * v10) = v9;
      *(_DWORD *)(v3 + 24) = v10 + 1;
      int v11 = *(_DWORD *)(*((void *)a2 + 4) + 4 * v4);
      uint64_t v12 = *(unsigned int *)(v3 + 40);
      if (v12 == *(_DWORD *)(v3 + 44))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(v6, 1, 1);
        uint64_t v12 = *(unsigned int *)(v3 + 40);
      }
      *(_DWORD *)(*(void *)(v3 + 32) + 4 * v12) = v11;
      ++*(_DWORD *)(v3 + 40);
      ++v4;
    }
    while (v4 < *((unsigned int *)a2 + 2));
  }
  return this;
}

void LMScoreDetails::~LMScoreDetails(LMScoreDetails *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this);
}

void SDLm_ClearLoadedData(unint64_t a1, unint64_t a2)
{
  SdapiInsurance::SdapiInsurance(v20, "SDLm_ClearLoadedData", 1, 0, 164);
  if (v20[97])
  {
    if (gbShowCalls) {
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>)\n", v4, v5, v6, v7, "SDLm_ClearLoadedData", a1, a2);
    }
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v5, v6, v7, v8, v9, v10);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v5, v6, v7, v8, v9, v10);
    }
    uint64_t VocOrThrow = ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v5, v6, v7, v8, v9, v10);
    if (*(void *)(VocOrThrow + 136)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdlm.cpp", 1369, (uint64_t)"sdapi/sdlm", 24, (uint64_t)"%s", v15, v16, (char)&errStr_sdapi_sdlm_E_VOC_UNLOADEDLM);
    }
    uint64_t v18 = *(void *)(VocOrThrow + 72);
    unint64_t v19 = a2 - 1;
    if (a2 - 1 >= 4)
    {
      throwBadSdapiArgument("SDLmClearLoadedType", a2, v11, v12, v13, v14, v15, v16);
      unint64_t v19 = 0;
    }
    (*(void (**)(uint64_t, unint64_t))(*(void *)v18 + 432))(v18, v19);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v20);
}

void sub_213EE9FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 2)
  {
    uint64_t v14 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v14, v15);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a13);
      _Unwind_Resume(a1);
    }
    uint64_t v16 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v16);
  }
  __cxa_end_catch();
  JUMPOUT(0x213EE9FDCLL);
}

void MrecInitModule_dthread_mrecutil(void)
{
  if (!gParDiagnosticChecksumMemChunkRegionsOnSyncThread)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticChecksumMemChunkRegionsOnSyncThread", (const char *)&unk_2140A26C6, (const char *)&unk_2140A26C6, 0, SetShadowDiagnosticChecksumMemChunkRegionsOnSyncThread, 0);
    void *v1 = &unk_26C4E0858;
    gParDiagnosticChecksumMemChunkRegionsOnSyncThread = (uint64_t)v1;
    gShadowDiagnosticChecksumMemChunkRegionsOnSyncThread = 0;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDiagnosticChecksumMemChunkRegionsOnSyncThread);
  }
}

void DgnEvent::~DgnEvent(DgnEvent *this)
{
}

uint64_t DgnEvent::signal(DgnEvent *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  *((unsigned char *)this + 112) = 1;
  pthread_cond_signal((pthread_cond_t *)this);

  return pthread_mutex_unlock(v2);
}

uint64_t DgnEvent::wait(pthread_cond_t *this)
{
  uint64_t v2 = (pthread_mutex_t *)&this[1];
  pthread_mutex_lock((pthread_mutex_t *)&this[1]);
  if (!this[2].__opaque[8]) {
    pthread_cond_wait(this, v2);
  }
  this[2].__opaque[8] = 0;

  return pthread_mutex_unlock(v2);
}

BOOL DgnEvent::timedWait(DgnEvent *this, int a2)
{
  unint64_t v3 = ClockTimer::getPlatformAbsoluteTime(this) + (1000 * a2);
  v12.tv_sec = v3 / 0xF4240;
  v12.tv_nsec = 1000 * (v3 % 0xF4240);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (*((unsigned char *)this + 112))
  {
    int v4 = 0;
    BOOL v5 = 1;
  }
  else
  {
    int v4 = pthread_cond_timedwait((pthread_cond_t *)this, (pthread_mutex_t *)((char *)this + 48), &v12);
    BOOL v5 = v4 == 0;
  }
  *((unsigned char *)this + 112) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 48));
  if (!v5 && v4 != 60)
  {
    uint64_t v6 = __error();
    uint64_t v7 = strerror(*v6);
    DgnString::DgnString((DgnString *)&v11, v7);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 318, (uint64_t)"mrecutil/dthread", 10, (uint64_t)"%.500s %.500s %.500s %.500s %d %.500s", v8, v9, (char)"acquire a DgnEvent lock");
    DgnString::~DgnString((DgnString *)&v11);
  }
  return v5;
}

void sub_213EEA330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t recursive_mutex_init(_opaque_pthread_mutex_t *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  uint64_t v2 = pthread_mutex_init(a1, &v4);
  pthread_mutexattr_destroy(&v4);
  return v2;
}

void DgnLock::~DgnLock(pthread_mutex_t *this)
{
  while (LODWORD(this[1].__sig))
  {
    uint64_t v2 = *(_opaque_pthread_t **)this[1].__opaque;
    if (v2 != pthread_self()) {
      break;
    }
    int v3 = LODWORD(this[1].__sig) - 1;
    LODWORD(this[1].__sig) = v3;
    if (!v3) {
      *(void *)this[1].__opaque = 0;
    }
    pthread_mutex_unlock(this);
  }
  pthread_mutex_destroy(this);
}

void DgnReadWriteLock::DgnReadWriteLock(DgnReadWriteLock *this)
{
}

void DgnReadWriteLock::~DgnReadWriteLock(pthread_rwlock_t *this)
{
}

void DgnSharedLock::create(DgnSharedLock *this, const char *a2)
{
  int v3 = sem_open(a2, 512, 384, 1);
  *(void *)this = v3;
  if (v3 == (sem_t *)-1)
  {
    __error();
    pthread_mutexattr_t v4 = __error();
    uint64_t v5 = strerror(*v4);
    DgnString::DgnString((DgnString *)&v8, v5);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 606, (uint64_t)"mrecutil/dthread", 10, (uint64_t)"%.500s %.500s %.500s %.500s %d %.500s", v6, v7, (char)"create the global shared lock");
    DgnString::~DgnString((DgnString *)&v8);
  }
}

void sub_213EEA600(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 32));
  _Unwind_Resume(a1);
}

BOOL DgnSharedLock::acquire(sem_t **this, unsigned int a2)
{
  if (a2 >= 0x7D0) {
    unsigned int v2 = a2 >> 1;
  }
  else {
    unsigned int v2 = 1000;
  }
  timespec __rqtp = (timespec)xmmword_2140A2690;
  if (!v2) {
    return 1;
  }
  if (sem_trywait(*this))
  {
    unsigned int v4 = 0;
    while (1)
    {
      if (*__error() != 35)
      {
        __error();
        uint64_t v5 = __error();
        uint64_t v6 = strerror(*v5);
        DgnString::DgnString((DgnString *)&v11, v6);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 647, (uint64_t)"mrecutil/dthread", 10, (uint64_t)"%.500s %.500s %.500s %.500s %d %.500s", v7, v8, (char)"acquire the global shared lock");
        DgnString::~DgnString((DgnString *)&v11);
      }
      nanosleep(&__rqtp, 0);
      if (v2 - 1 == v4) {
        return 1;
      }
      ++v4;
      if (!sem_trywait(*this))
      {
        BOOL v9 = v4 >= v2;
        goto LABEL_14;
      }
    }
  }
  BOOL v9 = 0;
LABEL_14:
  this[1] = (sem_t *)pthread_self();
  return v9;
}

void sub_213EEA780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnThreadTrace::DgnThreadTrace(DgnThreadTrace *this, const DgnThreadTrace *a2, MemChunkRegion *a3)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v5 = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v6 = (char *)this + 48;
  *((_OWORD *)this + 4) = 0u;
  uint64_t v7 = (char *)this + 64;
  *((_OWORD *)this + 5) = 0u;
  uint64_t v8 = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  BOOL v9 = (char *)this + 96;
  *((void *)this + 1) = a3;
  *(_WORD *)this = *(_WORD *)a2;
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 16, (void *)a2 + 2, 0, *((_DWORD *)a2 + 6));
  DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)v5, (uint64_t *)a2 + 4, 0, *((_DWORD *)a2 + 10));
  DgnPrimArray<int>::copyArraySlice((unint64_t)v6, (uint64_t *)a2 + 6, 0, *((_DWORD *)a2 + 14));
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 1);
  if (*(unsigned char *)this)
  {
    DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)v7, (uint64_t *)a2 + 8, 0, *((_DWORD *)a2 + 18));
    DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)v8, (uint64_t *)a2 + 10, 0, *((_DWORD *)a2 + 22));
  }
  if (*((unsigned char *)this + 1)) {
    DgnPrimArray<unsigned long long>::copyArraySlice((unint64_t)v9, (uint64_t *)a2 + 12, 0, *((_DWORD *)a2 + 26));
  }
}

void sub_213EEA950(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v6);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void DgnThreadTrace::~DgnThreadTrace(DgnThreadTrace *this)
{
}

uint64_t CurryDgnThreadMain(unsigned int *a1)
{
  int v18 = 0;
  pthread_setcancelstate(1, &v18);
  pthread_setcanceltype(0, &v18);
  *((unsigned char *)a1 + 12) = 1;
  uint64_t v2 = DgnThreadMgr::smpThreadMgr;
  uint64_t v3 = a1[4];
  DgnThreadMgr::validateDgnThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, a1[4], v4, v5, v6, v7, v8, v9);
  pthread_setspecific(DgnThreadMgr::smTlsID, *(const void **)(*(void *)(*(void *)(v2 + 8) + 8 * v3) + 32));
  uint64_t v10 = *((void *)a1 + 5);
  if (MemChunkRegion::smTlsID == -1)
  {
    timespec v12 = &gGlobalMemChunkRegion;
    goto LABEL_7;
  }
  uint64_t v11 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!v11) {
    goto LABEL_5;
  }
  timespec v12 = *v11;
  if (!*v11)
  {
    pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_5:
    timespec v12 = &gGlobalMemChunkRegion;
  }
LABEL_7:
  if (v12 != (void *)v10 && (v10 || v12 != &gGlobalMemChunkRegion))
  {
    if (!v10 || (_UNKNOWN *)v10 == &gGlobalMemChunkRegion)
    {
      pthread_key_t v14 = MemChunkRegion::smTlsID;
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = (const void *)(v10 + 1288);
      *(void *)(v10 + 1288) = v10;
      pthread_key_t v14 = MemChunkRegion::smTlsID;
    }
    pthread_setspecific(v14, v13);
  }
  unsigned int v15 = DgnThreadWorker::main((DgnThreadWorker *)a1);
  if (MemChunkRegion::smTlsID != -1)
  {
    uint64_t v16 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v16)
    {
      if (*v16 != &gGlobalMemChunkRegion) {
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
      }
    }
  }
  pthread_setspecific(DgnThreadMgr::smTlsID, 0);
  *((unsigned char *)a1 + 12) = 0;
  DgnEvent::signal((DgnEvent *)(*((void *)a1 + 6) + 1312));
  return v15;
}

uint64_t DgnThreadWorker::main(DgnThreadWorker *this)
{
  if (*((unsigned char *)this + 136)) {
    DgnThreadTrace::add((uint64_t)this + 144, -1, 2);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 1;
  uint64_t v2 = MemChunkAlloc(0x20D8uLL, 0);
  DgnPrinter::DgnPrinter((DgnPrinter *)v2);
  *((void *)this + 7) = v3;
  DgnPrinterMgr::setAsCurrentPrinter(v3, v4);
  uint64_t v5 = (DgnPrinter *)*((void *)this + 7);
  DgnString::makeStringPrintf((DgnString *)"DThread %u: ", v6, v7, v8, v9, *((unsigned int *)this + 4));
  if (v27) {
    uint64_t v10 = v26;
  }
  else {
    uint64_t v10 = (const char *)&unk_2140A26C6;
  }
  DgnPrinter::setInstancePrefix(v5, v10);
  DgnString::~DgnString((DgnString *)&v26);
  (*(void (**)(DgnThreadWorker *))(*(void *)this + 72))(this);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 2;
  DgnEvent::signal((DgnEvent *)(*((void *)this + 6) + 320));
  while (1)
  {
    *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 2;
    if (*((unsigned char *)this + 136)) {
      DgnThreadTrace::add((uint64_t)this + 144, -1, 7);
    }
    DgnEvent::wait((pthread_cond_t *)(*((void *)this + 6) + 72));
    if (*((unsigned char *)this + 136)) {
      DgnThreadTrace::add((uint64_t)this + 144, -1, 6);
    }
    uint64_t v14 = *((void *)this + 6);
    if (*(unsigned char *)(v14 + 1564)) {
      break;
    }
    uint64_t v15 = *(void *)(v14 + 56);
    if (v15)
    {
      if (*(unsigned char *)(v15 + 68)) {
        break;
      }
    }
    uint64_t v16 = *(unsigned int *)(v14 + 1560);
    if ((v16 - 2) >= 3)
    {
      if (v16 == 6)
      {
        *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 5;
        (*(void (**)(DgnThreadWorker *))(*(void *)this + 88))(this);
        DgnEvent::signal((DgnEvent *)(*((void *)this + 6) + 568));
        uint64_t v24 = 0;
        goto LABEL_40;
      }
    }
    else
    {
      *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 3;
      (*(void (**)(DgnThreadWorker *))(*(void *)this + 80))(this);
      DgnEvent::signal((DgnEvent *)(*((void *)this + 6) + 568));
      if (*((unsigned char *)this + 88) && *((_DWORD *)this + 2) == 1)
      {
        if (*((unsigned char *)this + 136)) {
          DgnThreadTrace::add((uint64_t)this + 144, -1, 8);
        }
        DgnEvent::wait((pthread_cond_t *)(*((void *)this + 6) + 72));
        RegionChecksuuint64_t m = GetRegionChecksum((MemChunkRegion *)&gGlobalMemChunkRegion);
        if (*((unsigned char *)this + 136)) {
          DgnThreadTrace::add((uint64_t)this + 144, -1, 6);
        }
      }
      else
      {
        RegionChecksuuint64_t m = 0;
      }
      int v18 = (*(uint64_t (**)(DgnThreadWorker *, uint64_t))(*(void *)this + 96))(this, v16);
      if (*((unsigned char *)this + 88) && *((_DWORD *)this + 2) == 1)
      {
        if (*((unsigned char *)this + 136)) {
          DgnThreadTrace::add((uint64_t)this + 144, -1, 8);
        }
        if (RegionChecksum != GetRegionChecksum((MemChunkRegion *)&gGlobalMemChunkRegion)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1829, (uint64_t)"mrecutil/dthread", 8, (uint64_t)"%u %u %u", v19, v20, *((_DWORD *)this + 4));
        }
        if (*((unsigned char *)this + 136)) {
          DgnThreadTrace::add((uint64_t)this + 144, -1, 6);
        }
      }
      if (v18 == 1)
      {
        *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 5;
        (*(void (**)(DgnThreadWorker *))(*(void *)this + 88))(this);
        uint64_t v24 = 0;
        DgnEvent::signal((DgnEvent *)(*((void *)this + 6) + 568));
        goto LABEL_40;
      }
      if (v18 == 2) {
        break;
      }
      *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 4;
      if (*((unsigned char *)this + 136)) {
        DgnThreadTrace::add((uint64_t)this + 144, -1, 4);
      }
      DgnEvent::signal((DgnEvent *)(*((void *)this + 6) + 320));
      DgnEvent::wait((pthread_cond_t *)(*((void *)this + 6) + 816));
    }
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 7;
  uint64_t v24 = 1;
  DgnThreadWorker::reportErrorAsWarning(this, 1, v11, v12, v13);
LABEL_40:
  uint64_t result = *((unsigned int *)this + 18);
  if (result != 2 && !*((void *)this + 10) {
    || (*((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 7,
  }
        *((unsigned char *)this + 68) = 1,
        DgnThreadWorker::reportErrorAsWarning(this, v24, v21, v22, v23),
        DgnEvent::signal((DgnEvent *)(*((void *)this + 6) + 320)),
        DgnEvent::signal((DgnEvent *)(*((void *)this + 6) + 568)),
        uint64_t result = *((unsigned int *)this + 18),
        result != 2))
  {
    if (!*((void *)this + 10))
    {
      if (*((unsigned char *)this + 136)) {
        DgnThreadTrace::add((uint64_t)this + 144, -1, 3);
      }
      return 0;
    }
  }
  return result;
}

void sub_213EEAFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 3)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    int v15 = 1;
  }
  else if (a2 == 2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    int v15 = 0;
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    __cxa_begin_catch(exception_object);
    uint64_t v14 = 0;
    int v15 = 2;
  }
  *(void *)(v13 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v14;
  *(_DWORD *)(v13 + 72) = v15;
  __cxa_end_catch();
  JUMPOUT(0x213EEAF5CLL);
}

uint64_t DgnThreadClient::DgnThreadClient(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  *(void *)a1 = &unk_26C4E0A80;
  *(_DWORD *)(a1 + 12) = a2;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a3;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = -1;
  uint64_t v7 = a1 + 28;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  uint64_t v8 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0u;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = -1;
  pthread_cond_init((pthread_cond_t *)(a1 + 72), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 120), 0);
  *(unsigned char *)(a1 + 184) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 320), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 368), 0);
  *(unsigned char *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 568), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 616), 0);
  *(unsigned char *)(a1 + 68pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 816), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 864), 0);
  *(unsigned char *)(a1 + 928) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 1064), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1112), 0);
  *(unsigned char *)(a1 + 1176) = 0;
  pthread_cond_init((pthread_cond_t *)(a1 + 1312), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1360), 0);
  *(unsigned char *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1568) = 0;
  *(_WORD *)(a1 + 1572) = 0;
  *(_DWORD *)(a1 + 156pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(a1 + 1563) = 0;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v21, (uint64_t)&gGlobalMemChunkRegion);
  *uint64_t v8 = v7;
  uint64_t v9 = DgnThreadMgr::smpThreadMgr;
  uint64_t NewThreadId = DgnThreadMgr::getNewThreadId((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr);
  char v15 = *(unsigned char *)(v9 + 76);
  *(_DWORD *)(a1 + 28) = NewThreadId;
  *(unsigned char *)(a1 + 1572) = v15;
  *(unsigned char *)(a1 + 1573) = v15;
  *(void *)(*(void *)(v9 + 8) + 8 * NewThreadId) = a1;
  ++*(_DWORD *)v9;
  if (!a3)
  {
    DgnString::makeStringPrintf((DgnString *)"Region for DThread %u", v11, v12, v13, v14, NewThreadId);
    if (a4)
    {
      DgnString::operator+=((DgnString *)&v19, ", ");
      DgnString::operator+=((DgnString *)&v19, a4);
    }
    if (v20) {
      unsigned int v17 = v19;
    }
    else {
      unsigned int v17 = (MemChunkRegion *)&unk_2140A26C6;
    }
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = MemChunkRegion::newMemChunkRegion(v17, v16);
    *(unsigned char *)(a1 + 24) = 1;
    DgnString::~DgnString((DgnString *)&v19);
  }
  *(unsigned char *)(a1 + 1566) = gShadowDiagnosticChecksumMemChunkRegionsOnSyncThread;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v21);
  return a1;
}

void sub_213EEB314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, DgnEvent *a11, char a12, uint64_t a13, char a14)
{
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&a14);
  DgnEvent::~DgnEvent(v18);
  DgnEvent::~DgnEvent(v17);
  DgnEvent::~DgnEvent(v16);
  DgnEvent::~DgnEvent(v15);
  DgnEvent::~DgnEvent(v14);
  DgnEvent::~DgnEvent(a11);
  _Unwind_Resume(a1);
}

void sub_213EEB394()
{
}

void sub_213EEB39C()
{
}

void DgnThreadClient::~DgnThreadClient(DgnThreadClient *this)
{
  *(void *)this = &unk_26C4E0A80;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v15, (uint64_t)&gGlobalMemChunkRegion);
  unsigned int v2 = *((_DWORD *)this + 7);
  DgnThreadMgr::removeThread((DgnThreadMgr *)DgnThreadMgr::smpThreadMgr, v2, v3, v4, v5, v6, v7, v8);
  *((void *)this + 4) = 0;
  uint64_t v10 = *((void *)this + 7);
  if (*((unsigned char *)this + 1564))
  {
    if (!v10 || !*(unsigned char *)(v10 + 12)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (!v10) {
      goto LABEL_15;
    }
    BOOL v11 = *(unsigned char *)(v10 + 68) != 0;
    if (!*(unsigned char *)(v10 + 12)) {
      goto LABEL_12;
    }
    if (!*(unsigned char *)(v10 + 68))
    {
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 952, "mrecutil/dthread", 4, "%u %.500s", v2, "Notifying worker of potential error");
      if (DgnThreadClient::isPlaying(this)) {
        DgnThreadClient::error((uint64_t)this);
      }
      BOOL v11 = 0;
      goto LABEL_9;
    }
  }
  BOOL v11 = 1;
LABEL_9:
  pthread_yield_np();
  ClockTimer::useFreeTimeVoid((ClockTimer *)&ClockTimer::smClockTimer);
  uint64_t v12 = *((void *)this + 7);
  if (v12 && *(unsigned char *)(v12 + 12))
  {
    pthread_yield_np();
    *((_DWORD *)this + 7) = v2;
    (*(void (**)(DgnThreadClient *))(*(void *)this + 32))(this);
    *((_DWORD *)this + 7) = -1;
  }
LABEL_12:
  if (!v11 && *((void *)this + 7))
  {
    pthread_yield_np();
    Latch<MemChunkRegion,LatchAdapter>::Latch(&v14, *((void *)this + 2));
    DgnDelete<DgnThreadWorker>(*((void *)this + 7));
    *((void *)this + 7) = 0;
    Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v14);
  }
LABEL_15:
  if (*((void *)this + 6)) {
    *((void *)this + 6) = 0;
  }
  if (*((unsigned char *)this + 24))
  {
    uint64_t v13 = (MemChunkRegion *)*((void *)this + 2);
    if (v13)
    {
      MemChunkRegion::deleteMemChunkRegion(v13, v9);
      *((void *)this + 2) = 0;
    }
  }
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v15);
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 1312));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 1064));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 816));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 568));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 320));
  DgnEvent::~DgnEvent((DgnThreadClient *)((char *)this + 72));
}

{
  uint64_t vars8;

  DgnThreadClient::~DgnThreadClient(this);

  JUMPOUT(0x216698730);
}

uint64_t DgnThreadMgr::removeThread(DgnThreadMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DgnThreadMgr::validateDgnThreadId(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *((void *)this + 1);
  uint64_t v11 = *(void *)(v10 + 8 * a2);
  *(void *)(v10 + 8 * a2) = 0;
  if (*(unsigned char *)(v11 + 1573))
  {
    uint64_t v12 = MemChunkAlloc(0x70uLL, 0);
    DgnThreadTrace::DgnThreadTrace((DgnThreadTrace *)v12, (const DgnThreadTrace *)(*(void *)(v11 + 56) + 144), (MemChunkRegion *)&gGlobalMemChunkRegion);
    unsigned int v13 = *((_DWORD *)this + 50);
    if (v13 == *((_DWORD *)this + 51))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 192, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 50);
    }
    *(void *)(*((void *)this + 24) + 8 * v13) = v12;
    *((_DWORD *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v13 + 1;
  }
  *(_DWORD *)(v11 + 28) = -1;
  IdMgr<unsigned int>::recycleId((unsigned int *)this + 6, a2);
  --*(_DWORD *)this;
  return v11;
}

BOOL DgnThreadClient::hasErrored(DgnThreadClient *this)
{
  if (*((unsigned char *)this + 1564)) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 7);
  return v2 && *(unsigned char *)(v2 + 68) != 0;
}

BOOL DgnThreadClient::isLive(DgnThreadClient *this)
{
  uint64_t v1 = *((void *)this + 7);
  return v1 && *(unsigned char *)(v1 + 12) != 0;
}

BOOL DgnThreadClient::isPlaying(DgnThreadClient *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (!v1 || !*(unsigned char *)(v1 + 12) || *((unsigned char *)this + 1564) || *(unsigned char *)(v1 + 68)) {
    return 0;
  }
  int v3 = *(_DWORD *)(v1 + 64);
  return !*((_DWORD *)this + 390) && v3 == 3;
}

uint64_t DgnThreadClient::error(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(unsigned char *)(this + 1564))
  {
    *(unsigned char *)(this + 15DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 1;
    int v2 = *(_DWORD *)(*(void *)(this + 56) + 64);
    int v3 = *(_DWORD *)(this + 1560);
    *(_DWORD *)(this + 156pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 6;
    DgnEvent::signal((DgnEvent *)(this + 72));
    if (v3) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v2 == 2;
    }
    if (v4)
    {
      this = DgnEvent::signal((DgnEvent *)(v1 + 1064));
    }
    else
    {
      DgnEvent::signal((DgnEvent *)(v1 + 816));
      DgnEvent::signal((DgnEvent *)(v1 + 568));
      DgnEvent::signal((DgnEvent *)(v1 + 320));
      this = DgnEvent::signal((DgnEvent *)(v1 + 1064));
      *(_DWORD *)(v1 + 156pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 6;
    }
  }
  *(unsigned char *)(v1 + 15DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 1;
  return this;
}

uint64_t DgnDelete<DgnThreadWorker>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    (*(void (**)(uint64_t))(*(void *)result + 48))(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

void DgnThreadClient::printSize(DgnThreadClient *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1019, (DgnString *)&v149);
  if (v150) {
    uint64_t v16 = v149;
  }
  else {
    uint64_t v16 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A26C6, a3, &unk_2140A26C6, v16);
  DgnString::~DgnString((DgnString *)&v149);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A26C6);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1021, (DgnString *)&v149);
  if (v150) {
    uint64_t v25 = v149;
  }
  else {
    uint64_t v25 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1022, (DgnString *)&v149);
  if (v150) {
    double v30 = v149;
  }
  else {
    double v30 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v30, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v31 = 4;
  }
  else {
    uint64_t v31 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1023, (DgnString *)&v149);
  if (v150) {
    uint64_t v36 = v149;
  }
  else {
    uint64_t v36 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v31;
  *a5 += v31;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1024, (DgnString *)&v149);
  if (v150) {
    uint64_t v41 = v149;
  }
  else {
    uint64_t v41 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v41, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1025, (DgnString *)&v149);
  if (v150) {
    uint64_t v46 = v149;
  }
  else {
    uint64_t v46 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v46, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v47 = 4;
  }
  else {
    uint64_t v47 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1026, (DgnString *)&v149);
  if (v150) {
    uint64_t v52 = v149;
  }
  else {
    uint64_t v52 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v47;
  *a5 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1027, (DgnString *)&v149);
  if (v150) {
    unint64_t v58 = v149;
  }
  else {
    unint64_t v58 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v53;
  *a5 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 4;
  }
  else {
    uint64_t v59 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1028, (DgnString *)&v149);
  if (v150) {
    uint64_t v64 = v149;
  }
  else {
    uint64_t v64 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v59;
  *a5 += v59;
  uint64_t v65 = (unsigned char *)*((void *)this + 7);
  if (v65)
  {
    if (v65[12] && DgnThreadClient::isPlaying(this))
    {
      if (gShadowDiagnosticShowIdealizedObjectSizes) {
        uint64_t v66 = 4;
      }
      else {
        uint64_t v66 = 8;
      }
      getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1031, (DgnString *)&v149);
      if (v150) {
        int v71 = v149;
      }
      else {
        int v71 = &unk_2140A26C6;
      }
      xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v71, v66, v66, 0);
      goto LABEL_60;
    }
    uint64_t v148 = 0;
    v149 = 0;
    uint64_t v147 = 0;
    (*(void (**)(unsigned char *, uint64_t, void, void **, uint64_t *, uint64_t *))(*(void *)v65 + 104))(v65, 0xFFFFFFFFLL, (a3 + 1), &v149, &v148, &v147);
    *a4 += (unint64_t)v149;
    *a5 += v148;
    *a6 += v147;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v66 = 4;
  }
  else {
    uint64_t v66 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1036, (DgnString *)&v149);
  if (v150) {
    uint64_t v76 = v149;
  }
  else {
    uint64_t v76 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v76, v66, v66, 0);
LABEL_60:
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v66;
  *a5 += v66;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v77 = 4;
  }
  else {
    uint64_t v77 = 113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1039, (DgnString *)&v149);
  if (v150) {
    uint64_t v82 = v149;
  }
  else {
    uint64_t v82 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v82, v77, v77, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v77;
  *a5 += v77;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v83 = 4;
  }
  else {
    uint64_t v83 = 113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1040, (DgnString *)&v149);
  if (v150) {
    uint64_t v88 = v149;
  }
  else {
    uint64_t v88 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v88, v83, v83, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v83;
  *a5 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v89 = 4;
  }
  else {
    uint64_t v89 = 113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1041, (DgnString *)&v149);
  if (v150) {
    uint64_t v94 = v149;
  }
  else {
    uint64_t v94 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v94, v89, v89, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v89;
  *a5 += v89;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v95 = 4;
  }
  else {
    uint64_t v95 = 113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1042, (DgnString *)&v149);
  if (v150) {
    uint64_t v100 = v149;
  }
  else {
    uint64_t v100 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v100, v95, v95, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v95;
  *a5 += v95;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v101 = 4;
  }
  else {
    uint64_t v101 = 113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1044, (DgnString *)&v149);
  if (v150) {
    uint64_t v106 = v149;
  }
  else {
    uint64_t v106 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v106, v101, v101, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += v101;
  *a5 += v101;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1045, (DgnString *)&v149);
  if (v150) {
    v111 = v149;
  }
  else {
    v111 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v111, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1047, (DgnString *)&v149);
  if (v150) {
    int v116 = v149;
  }
  else {
    int v116 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v116, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1049, (DgnString *)&v149);
  if (v150) {
    long long v121 = v149;
  }
  else {
    long long v121 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v121, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1051, (DgnString *)&v149);
  if (v150) {
    uint64_t v126 = v149;
  }
  else {
    uint64_t v126 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v126, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1053, (DgnString *)&v149);
  if (v150) {
    long long v131 = v149;
  }
  else {
    long long v131 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v131, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v149);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1056, (DgnString *)&v149);
  if (v150) {
    long long v136 = v149;
  }
  else {
    long long v136 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v136, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1058, (DgnString *)&v149);
  if (v150) {
    unint64_t v141 = v149;
  }
  else {
    unint64_t v141 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v141, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v149);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1060, (DgnString *)&v149);
  if (v150) {
    v146 = v149;
  }
  else {
    v146 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, a3, &unk_2140A26C6, (35 - a3), (35 - a3), v146, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v149);
}

void sub_213EEC324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnThreadMgr::recordTraceEvent(uint64_t result, unsigned int a2, int a3, char a4)
{
  if (*(unsigned char *)(result + 76))
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 77))
    {
      *(unsigned char *)(result + 77) = 1;
      if (a2 == -1)
      {
        uint64_t v7 = result + 80;
        if (a3 == -1) {
          uint64_t result = DgnThreadTrace::addInRegion(v7, -1, a4);
        }
        else {
          uint64_t result = DgnThreadTrace::add(v7, a3, a4);
        }
      }
      else
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(result + 8) + 8 * a2) + 56) + 144;
        if (a2 == a3) {
          int v6 = -1;
        }
        else {
          int v6 = a3;
        }
        uint64_t result = DgnThreadTrace::add(v5, v6, a4);
      }
      *(unsigned char *)(v4 + 77) = 0;
    }
  }
  return result;
}

void sub_213EEC424(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 77) = 0;
  _Unwind_Resume(a1);
}

uint64_t DgnThreadClient::startup(DgnThreadClient *this)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v10, (uint64_t)&gGlobalMemChunkRegion);
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 2);
  }
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1;
  pthread_create((pthread_t *)this + 6, 0, (void *(__cdecl *)(void *))CurryDgnThreadMain, *((void **)this + 7));
  *((void *)this + 5) = *((void *)this + 6);
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  }
  DgnEvent::wait((pthread_cond_t *)((char *)this + 320));
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
  }
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  DgnThreadClient::checkForWorkerError(this, v2, v3, v4, v5, v6, v7, v8);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v10);
}

void sub_213EEC510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void DgnThreadClient::checkForWorkerError(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *((void *)this + 7);
  if (!v9 || *(_DWORD *)(v9 + 64) == 6)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1455, (uint64_t)"mrecutil/dthread", 9, (uint64_t)"%u", a7, a8, *((_DWORD *)this + 7));
    uint64_t v9 = *((void *)this + 7);
  }
  if (*(unsigned char *)(v9 + 68))
  {
    uint64_t v10 = *(unsigned int *)(v9 + 72);
    if (v10 == 2) {
      DgnThreadClient::handleMemoryException(this);
    }
    uint64_t v11 = *(void *)(v9 + 80);
    DgnThreadClient::handleException((uint64_t)this, v11, v10);
  }
}

void DgnThreadClient::shutdown(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 3);
  }
  DgnThreadClient::checkForWorkerError(this, a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 6;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
  DgnEvent::signal((DgnThreadClient *)((char *)this + 1064));
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  }
  DgnThreadClient::waitForThreadDoneOrTerminate(this, 30000, v9, v10, v11);
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 3);
  }
  DgnThreadClient::checkForWorkerError(this, v12, v13, v14, v15, v16, v17, v18);
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
}

uint64_t DgnThreadClient::waitForThreadDoneOrTerminate(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](this, a2, a3, a4, a5);
  v8[1027] = *(void **)MEMORY[0x263EF8340];
  if (DgnEvent::timedWait((DgnEvent *)(v5 + 1312), v6))
  {
    v8[0] = 0;
    if (!pthread_join(*(pthread_t *)(v5 + 48), v8)) {
      return 1;
    }
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1156, "mrecutil/dthread", 10, "%u", *(_DWORD *)(v5 + 28));
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  return 0;
}

void sub_213EEC8FC()
{
}

void DgnThreadClient::play(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DgnThreadClient::checkForWorkerError(this, a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 2;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
  DgnEvent::signal((DgnThreadClient *)((char *)this + 1064));
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  }
  DgnEvent::wait((pthread_cond_t *)((char *)this + 568));
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
  }
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  DgnThreadClient::checkForWorkerError(this, v9, v10, v11, v12, v13, v14, v15);
  if (*((_DWORD *)this + 3) == 1)
  {
    if (*((unsigned char *)this + 1572)) {
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 7);
    }
    if (*((unsigned char *)this + 1566)) {
      DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
    }
    DgnEvent::wait((pthread_cond_t *)((char *)this + 320));
    if (*((unsigned char *)this + 1572)) {
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
    }
    DgnEvent::signal((DgnThreadClient *)((char *)this + 320));
    if (*((unsigned char *)this + 1566))
    {
      if (*((unsigned char *)this + 1572)) {
        DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 8);
      }
      *((_DWORD *)this + 392) = GetRegionChecksum(*((MemChunkRegion **)this + 2));
      if (*((unsigned char *)this + 1572))
      {
        uint64_t v16 = DgnThreadMgr::smpThreadMgr;
        unsigned int v17 = *((_DWORD *)this + 16);
        int v18 = *((_DWORD *)this + 7);
        DgnThreadMgr::recordTraceEvent(v16, v17, v18, 6);
      }
    }
  }
}

void DgnThreadClient::playAllUntilWorkerPauses(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DgnThreadClient::checkForWorkerError(this, a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 4;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
  DgnEvent::signal((DgnThreadClient *)((char *)this + 1064));
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  }
  DgnEvent::wait((pthread_cond_t *)((char *)this + 568));
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
  }
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  DgnThreadClient::checkForWorkerError(this, v9, v10, v11, v12, v13, v14, v15);
  if (*((_DWORD *)this + 3) == 1)
  {
    if (*((unsigned char *)this + 1572)) {
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 7);
    }
    if (*((unsigned char *)this + 1566)) {
      DgnEvent::signal((DgnThreadClient *)((char *)this + 72));
    }
    DgnEvent::wait((pthread_cond_t *)((char *)this + 320));
    if (*((unsigned char *)this + 1572)) {
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
    }
    DgnEvent::signal((DgnThreadClient *)((char *)this + 320));
    if (*((unsigned char *)this + 1566))
    {
      if (*((unsigned char *)this + 1572)) {
        DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 8);
      }
      *((_DWORD *)this + 392) = GetRegionChecksum(*((MemChunkRegion **)this + 2));
      if (*((unsigned char *)this + 1572))
      {
        uint64_t v16 = DgnThreadMgr::smpThreadMgr;
        unsigned int v17 = *((_DWORD *)this + 16);
        int v18 = *((_DWORD *)this + 7);
        DgnThreadMgr::recordTraceEvent(v16, v17, v18, 6);
      }
    }
  }
}

void DgnThreadClient::pause(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DgnThreadClient::checkForWorkerError(this, a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 5;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 1064));
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 4);
  }
  DgnEvent::wait((pthread_cond_t *)((char *)this + 320));
  if (*((unsigned char *)this + 1566) && *((_DWORD *)this + 3) == 1)
  {
    if (*((unsigned char *)this + 1572)) {
      DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 8);
    }
    if (GetRegionChecksum(*((MemChunkRegion **)this + 2)) != *((_DWORD *)this + 392)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1326, (uint64_t)"mrecutil/dthread", 7, (uint64_t)"%u %u %u", v9, v10, *((_DWORD *)this + 7));
    }
  }
  if (*((unsigned char *)this + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 6);
  }
  *((_DWORD *)this + 39pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(*((void *)this + 7) + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 2;
  DgnEvent::signal((DgnThreadClient *)((char *)this + 816));

  DgnThreadClient::checkForWorkerError(this, v11, v12, v13, v14, v15, v16, v17);
}

BOOL DgnThreadClient::isPaused(DgnThreadClient *this)
{
  return !*((_DWORD *)this + 390) && *(_DWORD *)(*((void *)this + 7) + 64) == 2;
}

uint64_t DgnThreadClient::terminate(DgnThreadClient *this)
{
  errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1379, "mrecutil/dthread", 5, "%u", *((_DWORD *)this + 7));
  uint64_t result = pthread_kill(*((pthread_t *)this + 6), 20);
  uint64_t v3 = *((void *)this + 7);
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 6;
  *(unsigned char *)(v3 + 12) = 0;
  return result;
}

uint64_t DgnThreadClient::getThreadState(DgnThreadClient *this)
{
  return *(unsigned int *)(*((void *)this + 7) + 64);
}

uint64_t DgnThreadClient::newWorker(DgnThreadClient *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

void DgnThreadClient::handleMemoryException(DgnThreadClient *this)
{
  uint64_t v1 = this;
  if (*((unsigned char *)this + 1572)) {
    this = (DgnThreadClient *)DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *((_DWORD *)this + 16), *((_DWORD *)this + 7), 16);
  }
  if (!*((unsigned char *)v1 + 1565))
  {
    *((unsigned char *)v1 + 1565) = 1;
    if (DgnThreadMgr::getCurrentThreadId(this) == -1) {
      snprintf(DgnThreadClient::handleMemoryException::buffer, 0x190uLL, "Memory allocation in worker thread %u failed: rethrowing memory exception in global thread.\n");
    }
    else {
      snprintf(DgnThreadClient::handleMemoryException::buffer, 0x190uLL, "Memory allocation in worker thread %u failed: rethrowing memory exception in client thread %u.\n");
    }
    xprintString(DgnThreadClient::handleMemoryException::buffer);
    MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0);
  }
  ThrowMemoryException((uint64_t)v1 + 8);
}

uint64_t DgnThreadClient::handleException(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1572)) {
    DgnThreadMgr::recordTraceEvent(DgnThreadMgr::smpThreadMgr, *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 28), 15);
  }

  return errCopyAndThrowException(a3, a2);
}

double DgnThreadWorker::DgnThreadWorker(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_26C4E0AB8;
  *(_DWORD *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(void *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a4;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = a3;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(unsigned char *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a3 + 1572);
  *(_WORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = a5;
  *(void *)(a1 + 152) = a4;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a3 + 1566);
  *(_OWORD *)(a1 + 12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void DgnThreadWorker::~DgnThreadWorker(DgnThreadWorker *this)
{
  *(void *)this = &unk_26C4E0AB8;
  uint64_t v2 = (DgnPrinter *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 7) = 0;
    DgnPrinter::~DgnPrinter(v2);
    MemChunkFree(v3, 0);
  }
  DgnThreadTrace::~DgnThreadTrace((DgnThreadWorker *)((char *)this + 144));
}

{
  uint64_t vars8;

  DgnThreadWorker::~DgnThreadWorker(this);

  JUMPOUT(0x216698730);
}

void DgnThreadWorker::printSize(DgnThreadWorker *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1598, (DgnString *)&v123);
  if (v124) {
    uint64_t v15 = v123;
  }
  else {
    uint64_t v15 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_2140A26C6, a3, &unk_2140A26C6, v15);
  DgnString::~DgnString((DgnString *)&v123);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_2140A26C6);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1599, (DgnString *)&v123);
  if (v124) {
    uint64_t v24 = v123;
  }
  else {
    uint64_t v24 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v20, v21, v22, v23, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v24, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1600, (DgnString *)&v123);
  if (v124) {
    uint64_t v29 = v123;
  }
  else {
    uint64_t v29 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v29, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v123);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1601, (DgnString *)&v123);
  if (v124) {
    uint64_t v34 = v123;
  }
  else {
    uint64_t v34 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v34, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v35 = 4;
  }
  else {
    uint64_t v35 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1602, (DgnString *)&v123);
  if (v124) {
    uint64_t v40 = v123;
  }
  else {
    uint64_t v40 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v35;
  *a5 += v35;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v41 = 4;
  }
  else {
    uint64_t v41 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1603, (DgnString *)&v123);
  if (v124) {
    uint64_t v46 = v123;
  }
  else {
    uint64_t v46 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v46, v41, v41, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v41;
  *a5 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v47 = 4;
  }
  else {
    uint64_t v47 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1605, (DgnString *)&v123);
  if (v124) {
    uint64_t v52 = v123;
  }
  else {
    uint64_t v52 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v47;
  *a5 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1606, (DgnString *)&v123);
  if (v124) {
    unint64_t v58 = v123;
  }
  else {
    unint64_t v58 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v53;
  *a5 += v53;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1610, (DgnString *)&v123);
  if (v124) {
    uint64_t v63 = v123;
  }
  else {
    uint64_t v63 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v63, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1612, (DgnString *)&v123);
  if (v124) {
    uint64_t v68 = v123;
  }
  else {
    uint64_t v68 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v68, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v123);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1614, (DgnString *)&v123);
  if (v124) {
    uint64_t v73 = v123;
  }
  else {
    uint64_t v73 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v73, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v74 = 4;
  }
  else {
    uint64_t v74 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1615, (DgnString *)&v123);
  if (v124) {
    uint64_t v79 = v123;
  }
  else {
    uint64_t v79 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v79, v74, v74, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v74;
  *a5 += v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1617, (DgnString *)&v123);
  if (v124) {
    uint64_t v84 = v123;
  }
  else {
    uint64_t v84 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v84, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v123);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1620, (DgnString *)&v123);
  if (v124) {
    uint64_t v89 = v123;
  }
  else {
    uint64_t v89 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1622, (DgnString *)&v123);
  if (v124) {
    uint64_t v94 = v123;
  }
  else {
    uint64_t v94 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v94, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += 4;
  *a5 += 4;
  uint64_t v95 = SnapTime::sizeObject((uint64_t)this + 104, 0);
  uint64_t v96 = SnapTime::sizeObject((uint64_t)this + 104, 1);
  uint64_t v97 = SnapTime::sizeObject((uint64_t)this + 104, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1624, (DgnString *)&v123);
  if (v124) {
    uint64_t v102 = v123;
  }
  else {
    uint64_t v102 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v102, v95, v96, v97);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v95;
  *a5 += v96;
  *a6 += v97;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1626, (DgnString *)&v123);
  if (v124) {
    uint64_t v107 = v123;
  }
  else {
    uint64_t v107 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v107, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v123);
  ++*a4;
  ++*a5;
  uint64_t v108 = (char *)this + 144;
  uint64_t v109 = sizeObject((uint64_t)this + 144, 0);
  uint64_t v110 = sizeObject((uint64_t)v108, 1);
  uint64_t v111 = sizeObject((uint64_t)v108, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1627, (DgnString *)&v123);
  if (v124) {
    int v116 = v123;
  }
  else {
    int v116 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, (a3 + 1), &unk_2140A26C6, (34 - a3), (34 - a3), v116, v109, v110, v111);
  DgnString::~DgnString((DgnString *)&v123);
  *a4 += v109;
  *a5 += v110;
  *a6 += v111;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1629, (DgnString *)&v123);
  if (v124) {
    long long v121 = v123;
  }
  else {
    long long v121 = &unk_2140A26C6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, a3, &unk_2140A26C6, (35 - a3), (35 - a3), v121, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v123);
}

void sub_213EED910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnThreadWorker::reportErrorAsWarning(DgnThreadWorker *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](this, a2, a3, a4, a5);
  uint64_t v7 = v5;
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned int v8 = *(_DWORD *)(v5 + 72);
  if (v8 == 2)
  {
    if (v6)
    {
      strcpy((char *)DgnThreadWorker::reportErrorAsWarning(BOOL)::buffer, "Memory allocation in client thread failed.\n");
      xprintString((const char *)DgnThreadWorker::reportErrorAsWarning(BOOL)::buffer);
      MemStatsDisplayFromRef(0, 1, 1, 0, 0, 0, 0);
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1643, "mrecutil/dthread", 8, "%u");
    }
    else
    {
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1648, "mrecutil/dthread", 9, "%u %u");
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v5 + 80);
    if (v9) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v6 == 0;
    }
    if (v10)
    {
      if (v8 > 1 || v9 == 0)
      {
        errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1659, "mrecutil/dthread", 2, "%u %u");
      }
      else
      {
        DgnString::DgnString((DgnString *)&v18);
        v15[0] = 0;
        int v16 = 0x2000;
        char v17 = 0;
        uint64_t v12 = (const char *)&unk_2140A26C6;
        MessageFormatPrefix((DgnThreadMgr *)v15, 0, 1, *(_DWORD *)(v9 + 72));
        if (v19) {
          uint64_t v13 = v18;
        }
        else {
          uint64_t v13 = (const char *)&unk_2140A26C6;
        }
        if (v17) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = v15;
        }
        if (*(_DWORD *)(v9 + 64)) {
          uint64_t v12 = *(const char **)(v9 + 56);
        }
        errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1673, "mrecutil/dthread", 3, "%u %u %.500s %.500s", *(_DWORD *)(v7 + 16), *(_DWORD *)(v7 + 64), v14, v12);
        DgnString::~DgnString((DgnString *)&v18);
      }
    }
    else
    {
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 1653, "mrecutil/dthread", 1, "%u");
    }
  }
}

void sub_213EEDC04(_Unwind_Exception *exception_object)
{
}

uint64_t DgnThreadWorker::play(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  if (!*(unsigned char *)(v5 + 1564))
  {
    int v7 = v4;
    do
    {
      uint64_t v8 = *(void *)(v5 + 56);
      if (v8) {
        LOBYTE(v8) = *(unsigned char *)(v8 + 68) != 0;
      }
      uint64_t result = 2;
      if ((v8 & 1) != 0 || v7 == 6) {
        return result;
      }
      int v9 = *(_DWORD *)(v5 + 1560);
      if (v9 == 6 || v7 == 5) {
        return 1;
      }
      uint64_t result = 0;
      if (a2 == 3 || v7 == 4) {
        return result;
      }
      if (v9 == 5)
      {
        if (!v7) {
          goto LABEL_40;
        }
      }
      else if (*(_DWORD *)(a1 + 8) != 1 || !v7)
      {
        goto LABEL_22;
      }
      if (a2 != 4 && v7 != 2) {
        return 0;
      }
LABEL_22:
      if ((v7 & 0xFFFFFFFE) != 2) {
        goto LABEL_40;
      }
      int64x2_t v20 = 0u;
      int64x2_t v21 = 0u;
      int64x2_t v18 = 0u;
      int64x2_t v19 = 0u;
      if (*(unsigned char *)(a1 + 136)) {
        DgnThreadTrace::add(a1 + 144, -1, 5);
      }
      SnapTime::recordTime((SnapTime *)&v20, 1, 0, 0, 0);
      int v11 = *(_DWORD *)(a1 + 96);
      uint64_t v12 = (DgnEvent *)(*(void *)(a1 + 48) + 1064);
      if (v11) {
        DgnEvent::timedWait(v12, v11);
      }
      else {
        DgnEvent::wait((pthread_cond_t *)v12);
      }
      SnapTime::recordTime((SnapTime *)&v18, 1, 0, 0, 0);
      if (*(unsigned char *)(a1 + 136)) {
        DgnThreadTrace::add(a1 + 144, -1, 6);
      }
      int64x2_t v13 = v21;
      int64x2_t v14 = v19;
      *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), vsubq_s64(v18, v20));
      *(int64x2_t *)(a1 + 12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = vaddq_s64(*(int64x2_t *)(a1 + 120), vsubq_s64(v14, v13));
      uint64_t v15 = *(void *)(a1 + 48);
      if (*(unsigned char *)(v15 + 1564)) {
        return 2;
      }
      uint64_t v16 = *(void *)(v15 + 56);
      if (v16)
      {
        if (*(unsigned char *)(v16 + 68)) {
          return 2;
        }
      }
      int v17 = *(_DWORD *)(v15 + 1560);
      if (v17 == 5)
      {
        if (a2 == 4) {
          goto LABEL_40;
        }
      }
      else
      {
        if (v17 == 6) {
          return 1;
        }
        if (a2 == 4 || *(_DWORD *)(a1 + 8) != 1) {
          goto LABEL_40;
        }
      }
      if (v7 == 3) {
        return 0;
      }
LABEL_40:
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      uint64_t v5 = *(void *)(a1 + 48);
    }
    while (!*(unsigned char *)(v5 + 1564));
  }
  return 2;
}

uint64_t DgnThreadWorker::playOne(DgnThreadWorker *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 6;
}

uint64_t DgnThreadWorker::notification(uint64_t a1)
{
  return DgnEvent::signal((DgnEvent *)(*(void *)(a1 + 48) + 1064));
}

void DgnThreadMgr::DgnThreadMgr(DgnThreadMgr *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0x10000001DLL;
  *((_DWORD *)this + 8) = 1;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *((_WORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_DWORD *)((char *)this + 75) = 0;
  *((_DWORD *)this + 21) = -1;
  *((void *)this + 11) = &gGlobalMemChunkRegion;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 8, 1, 1);
  uint64_t v2 = *((unsigned int *)this + 4);
  *(void *)(*((void *)this + 1) + 8 * v2) = 0;
  *((_DWORD *)this + 4) = v2 + 1;
}

void sub_213EEDF9C(_Unwind_Exception *a1)
{
  DgnIOwnArray<DgnThreadTrace *>::releaseAll(v2 + 192);
  DgnThreadTrace::~DgnThreadTrace(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

void DgnThreadMgr::startupThreadMgr(DgnThreadMgr *this)
{
  pthread_key_t v5 = 0;
  int v1 = pthread_key_create(&v5, 0);
  pthread_key_t v2 = v5;
  if (v1) {
    pthread_key_t v2 = -1;
  }
  DgnThreadMgr::smTlsID = v2;
  uint64_t v3 = MemChunkAlloc(0xD0uLL, 0);
  DgnThreadMgr::DgnThreadMgr((DgnThreadMgr *)v3);
  DgnThreadMgr::smpThreadMgr = v4;
}

void DgnThreadMgr::throwBadDgnThreadId(DgnThreadMgr *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t DgnThreadMgr::getNewThreadId(DgnThreadMgr *this)
{
  uint64_t NextId = IdMgr<unsigned int>::getNextId((_DWORD *)this + 6);
  for (unsigned int i = *((_DWORD *)this + 4); i <= NextId; *((_DWORD *)this + 4) = i)
  {
    if (i == *((_DWORD *)this + 5))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 8, 1, 1);
      unsigned int i = *((_DWORD *)this + 4);
    }
    *(void *)(*((void *)this + 1) + 8 * i++) = 0;
  }
  return NextId;
}

void DgnThreadMgr::validateDgnThreadId(DgnThreadMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 4) <= a2 || !*(void *)(*((void *)this + 1) + 8 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dthread.cpp", 2045, (uint64_t)"mrecutil/dthread", 1, (uint64_t)"%u", a7, a8, a2);
  }
}

void DgnThreadMgr::broadcastError(DgnThreadMgr *this)
{
  if (DgnThreadMgr::smpThreadMgr)
  {
    *(unsigned char *)(DgnThreadMgr::smpThreadMgr + 4) = 1;
    pthread_yield_np();
    uint64_t v1 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) >= 2u)
    {
      unint64_t v2 = 1;
      do
      {
        uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
        if (v3)
        {
          DgnThreadClient::error(v3);
          uint64_t v1 = DgnThreadMgr::smpThreadMgr;
        }
        ++v2;
      }
      while (v2 < *(unsigned int *)(v1 + 16));
    }
    pthread_yield_np();
    uint64_t v7 = DgnThreadMgr::smpThreadMgr;
    if (*(_DWORD *)(DgnThreadMgr::smpThreadMgr + 16) >= 2u)
    {
      unint64_t v8 = 1;
      do
      {
        int v9 = *(DgnThreadClient **)(*(void *)(v7 + 8) + 8 * v8);
        if (v9)
        {
          DgnThreadClient::waitForThreadDoneOrTerminate(v9, 1000, v4, v5, v6);
          uint64_t v7 = DgnThreadMgr::smpThreadMgr;
        }
        ++v8;
      }
      while (v8 < *(unsigned int *)(v7 + 16));
    }
  }
}

DgnThreadMgr *DgnThreadMgr::startClientCallbackEvent(DgnThreadMgr *this)
{
  if (DgnThreadMgr::smpThreadMgr && *(unsigned char *)(DgnThreadMgr::smpThreadMgr + 76))
  {
    int v1 = (int)this;
    unsigned int CurrentThreadId = DgnThreadMgr::getCurrentThreadId(this);
    uint64_t v3 = DgnThreadMgr::smpThreadMgr;
    if (v1) {
      char v4 = 12;
    }
    else {
      char v4 = 11;
    }
    return (DgnThreadMgr *)DgnThreadMgr::recordTraceEvent(v3, CurrentThreadId, CurrentThreadId, v4);
  }
  return this;
}

DgnThreadMgr *DgnThreadMgr::endClientCallbackEvent(DgnThreadMgr *this)
{
  if (DgnThreadMgr::smpThreadMgr && *(unsigned char *)(DgnThreadMgr::smpThreadMgr + 76))
  {
    unsigned int CurrentThreadId = DgnThreadMgr::getCurrentThreadId(this);
    uint64_t v2 = DgnThreadMgr::smpThreadMgr;
    return (DgnThreadMgr *)DgnThreadMgr::recordTraceEvent(v2, CurrentThreadId, CurrentThreadId, 6);
  }
  return this;
}

uint64_t DgnThreadMgr::beginFileLoadOrSave(DgnThreadMgr *this)
{
  FileLoadOrSaveCounter = (_DWORD *)DgnThreadMgr::getFileLoadOrSaveCounter(this);
  uint64_t v2 = (*FileLoadOrSaveCounter + 1);
  _DWORD *FileLoadOrSaveCounter = v2;
  return v2;
}

uint64_t DgnThreadMgr::getFileLoadOrSaveCounter(DgnThreadMgr *this)
{
  unsigned int CurrentThreadId = DgnThreadMgr::getCurrentThreadId(this);
  if (CurrentThreadId == -1) {
    return (uint64_t)this + 72;
  }
  unsigned int v9 = CurrentThreadId;
  DgnThreadMgr::validateDgnThreadId(this, CurrentThreadId, v3, v4, v5, v6, v7, v8);
  return *(void *)(*(void *)(*((void *)this + 1) + 8 * v9) + 56) + 92;
}

uint64_t DgnThreadMgr::endFileLoadOrSave(DgnThreadMgr *this)
{
  FileLoadOrSaveCounter = (_DWORD *)DgnThreadMgr::getFileLoadOrSaveCounter(this);
  if (!*FileLoadOrSaveCounter) {
    return 0;
  }
  uint64_t v2 = FileLoadOrSaveCounter;
  uint64_t result = (*FileLoadOrSaveCounter - 1);
  *uint64_t v2 = result;
  return result;
}

void SetShadowDiagnosticChecksumMemChunkRegionsOnSyncThread(void)
{
  gShadowDiagnosticChecksumMemChunkRegionsOnSyncThread = *(unsigned char *)(gParDiagnosticChecksumMemChunkRegionsOnSyncThread
                                                                  + 41);
}

uint64_t DgnThreadTrace::addInRegion(uint64_t a1, int a2, char a3)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v7, *(void *)(a1 + 8));
  DgnThreadTrace::add(a1, a2, a3);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v7);
}

void sub_213EEE3EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t DgnPrimArray<unsigned long long>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    *(_DWORD *)(result + 8) = a4;
    if (!a4) {
      return result;
    }
  }
  else
  {
    uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
    *(_DWORD *)(v7 + 8) = a4;
  }
  uint64_t v9 = *a2;
  BOOL v10 = *(void **)v7;
  uint64_t v11 = a4;
  do
  {
    *v10++ = *(void *)(v9 + 8 * a3++);
    --v11;
  }
  while (v11);
  return result;
}

void *DgnIOwnArray<DgnThreadTrace *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnThreadTrace>(*(DgnThreadTrace **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

DgnThreadTrace *DgnDelete<DgnThreadTrace>(DgnThreadTrace *result)
{
  if (result)
  {
    DgnThreadTrace::~DgnThreadTrace(result);
    return (DgnThreadTrace *)MemChunkFree(v1, 0);
  }
  return result;
}

void TNewWords::TNewWords(TNewWords *this, TTokenizerParamManager *a2)
{
  *((void *)this + 4) = a2;
  *((void *)this + 5) = 0;
}

uint64_t *TNewWords::findAndAddWords(uint64_t a1, int *a2, uint64_t a3, char *a4, char a5)
{
  if (TLexicon::checkName(*(void *)(a1 + 24), a2, 0, 0xFFFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  __p = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v11 = *(void **)(a1 + 24);
  uint64_t v12 = TStringParam::get((TStringParam *)(*(void *)(a1 + 32) + 10744));
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v13 + 16464));
  size_t v15 = *(int *)(v13 + 4 * TParam::getValidConfig((TParam *)(v13 + 16464), ActiveConfigHandle) + 16624);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = TParam::getActiveConfigHandle((TParam *)(v16 + 16112));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v16 + 16112), v17);
  TLexicon::findHeadClonesCollated(v11, (unsigned int *)a2, v12, v15, *(int *)(v16 + 4 * ValidConfig + 16272), &__p);
  int64x2_t v19 = __p;
  int64x2_t v20 = v31;
  if (v31 == __p)
  {
    BOOL v10 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    BOOL v10 = 0;
    do
    {
      if ((v19[v21 + 16] & 0xC0) == 0)
      {
        if (!v10)
        {
          BOOL v10 = (uint64_t *)TGraph::addVertex(*(TGraph **)(a1 + 8), a4);
          int64x2_t v19 = __p;
        }
        uint64_t v23 = &v19[v21];
        v23[24] += a5;
        uint64_t v24 = *(void **)(a1 + 8);
        uint64_t v25 = *(void *)v23;
        int v27 = 1;
        uint64_t v28 = v25;
        long long v29 = *((_OWORD *)v23 + 1);
        TGraph::addEdge(v24, a3, v10, (uint64_t)&v27);
        int64x2_t v19 = __p;
        int64x2_t v20 = v31;
      }
      ++v22;
      v21 += 32;
    }
    while (v22 < (v20 - v19) >> 5);
  }
  std::vector<TLexiconMatch>::resize((uint64_t)&__p, 0);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_213EEE6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL TNewWords::addAlphanumWord(TNewWords *this)
{
  uint64_t v2 = (TParam *)(*((void *)this + 4) + 1880);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((unsigned char *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152)) {
    return 0;
  }
  uint64_t v4 = *(char **)(*(void *)this + 16);
  uint64_t v28 = (int *)v30;
  long long v29 = xmmword_214085190;
  char v31 = 1;
  if (!*v4)
  {
    BOOL v12 = 0;
LABEL_36:
    if (v28 != (int *)v30 && v28 != 0) {
      MEMORY[0x216698730]();
    }
    return v12;
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t Segment = TSegmenter::getSegment(*((TSegmenter **)this + 2), v4);
    uint64_t v7 = Segment;
    int v8 = *(_DWORD *)(Segment + 24);
    if (v8 != 1 && (!v5 || v8 != 2)) {
      break;
    }
    uint64_t v9 = 0;
    BOOL v10 = *(int **)Segment;
    while (v10[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), v10, v9 - 1);
    ++v5;
    uint64_t v4 = *(char **)(v7 + 8);
  }
  while (*v4);
  BOOL v12 = v5 > 1;
  if (v5 >= 2)
  {
    if (*((void *)&v29 + 1) >= (unint64_t)v29)
    {
      if (v31)
      {
        int v24 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
        uint64_t v13 = v28;
        --*((void *)&v29 + 1);
      }
      else
      {
        uint64_t v13 = v28;
        if ((void)v29) {
          v28[(void)v29 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v13 = v28;
      v28[*((void *)&v29 + 1)] = 0;
    }
    if (!TNewWords::findAndAddWords((uint64_t)this, v13, *(void *)this, v4, 0))
    {
      uint64_t v14 = *((void *)this + 3);
      if (*((void *)&v29 + 1) >= (unint64_t)v29)
      {
        if (v31)
        {
          int v24 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
          size_t v15 = v28;
          --*((void *)&v29 + 1);
        }
        else
        {
          size_t v15 = v28;
          if ((void)v29) {
            v28[(void)v29 - 1] = 0;
          }
        }
      }
      else
      {
        size_t v15 = v28;
        v28[*((void *)&v29 + 1)] = 0;
      }
      if (!TLexicon::checkName(v14, v15, 0, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v16 = (uint64_t *)TGraph::addVertex(*((TGraph **)this + 1), v4);
        uint64_t v17 = *((void *)this + 3);
        if (*((void *)&v29 + 1) >= (unint64_t)v29)
        {
          if (v31)
          {
            int v24 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
            int64x2_t v18 = v28;
            --*((void *)&v29 + 1);
          }
          else
          {
            int64x2_t v18 = v28;
            if ((void)v29) {
              v28[(void)v29 - 1] = 0;
            }
          }
        }
        else
        {
          int64x2_t v18 = v28;
          v28[*((void *)&v29 + 1)] = 0;
        }
        uint64_t v19 = TLexicon::addTempWord(v17, v18, 0, 0, 0);
        uint64_t v20 = *(void *)this;
        uint64_t v21 = (void *)*((void *)this + 1);
        int v24 = 4;
        uint64_t v25 = v19;
        uint64_t v26 = 0;
        char v27 = 0;
        TGraph::addEdge(v21, v20, v16, (uint64_t)&v24);
      }
    }
    *((void *)this + 5) = v4;
  }
  if (v31) {
    goto LABEL_36;
  }
  return v12;
}

void sub_213EEE9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (LOBYTE(STACK[0x438]))
  {
    if (a13 != v13 && a13 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addHyphenatedWord(TSegmenter **this)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  int v1 = (char *)*((void *)*this + 2);
  if (!*v1) {
    return 0;
  }
  memset(v71, 0, sizeof(v71));
  uint64_t Segment = TSegmenter::getSegment(this[2], v1);
  if (*(_DWORD *)(Segment + 24) == 1)
  {
    char v4 = 0;
    char v5 = 0;
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = v6;
      uint64_t v8 = *(void *)Segment;
      int v1 = *(char **)(Segment + 8);
      *((void *)v71 + v7) = *(void *)Segment;
      v4 |= *(_DWORD *)(v8 + 4) == 0;
      uint64_t v9 = (const __int32 **)TSegmenter::getSegment(this[2], v1);
      if (!v9) {
        break;
      }
      BOOL v10 = v9;
      if (wcscmp(*v9, (const __int32 *)"-")) {
        break;
      }
      uint64_t v11 = TSegmenter::getSegment(this[2], (char *)v10[1]);
      if (!v11) {
        break;
      }
      uint64_t v12 = v11;
      if (*(_DWORD *)(v11 + 24) == 5) {
        break;
      }
      int v13 = **(_DWORD **)v11;
      {
        operator new();
      }
      BOOL v14 = v13 == 10 || v13 == 13;
      BOOL v15 = v14;
      v5 |= v15;
      uint64_t v16 = v14 ? (const __int32 **)v12 : v10;
      uint64_t v17 = (char *)v16[1];
      if (!*v17 || v7 >= 0xF) {
        break;
      }
      uint64_t Segment = TSegmenter::getSegment(this[2], v17);
      unint64_t v6 = v7 + 1;
    }
    while (*(_DWORD *)(Segment + 24) == 1);
    unint64_t v19 = v7 + 1;
  }
  else
  {
    char v5 = 0;
    char v4 = 0;
    unint64_t v19 = 0;
  }
  if (v19 < 2) {
    return 0;
  }
  uint64_t v67 = (int *)v69;
  long long v68 = xmmword_214085190;
  char v70 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&v67, *(int **)&v71[0]);
  for (uint64_t i = 1; i != v19; ++i)
  {
    int v63 = 45;
    TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), &v63, 1uLL);
    uint64_t v23 = 0;
    int v24 = (int *)*((void *)v71 + i);
    while (v24[v23++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v24, v23 - 1);
  }
  if (*((void *)&v68 + 1) >= (unint64_t)v68)
  {
    if (v70)
    {
      int v63 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), &v63, 1uLL);
      uint64_t v26 = v67;
      --*((void *)&v68 + 1);
    }
    else
    {
      uint64_t v26 = v67;
      if ((void)v68) {
        v67[(void)v68 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v26 = v67;
    v67[*((void *)&v68 + 1)] = 0;
  }
  if (TNewWords::findAndAddWords((uint64_t)this, v26, (uint64_t)*this, v1, 0)) {
    goto LABEL_42;
  }
  if (v4) {
    goto LABEL_44;
  }
  if ((v5 & 1) != 0
    || (uint64_t v38 = this[4],
        uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TSegmenter *)((char *)v38 + 1384)),
        *((unsigned char *)v38 + TParam::getValidConfig((TSegmenter *)((char *)v38 + 1384), ActiveConfigHandle) + 1536)))
  {
    TBuffer<wchar_t>::assign((uint64_t)&v67, *(int **)&v71[0]);
    for (uint64_t j = 1; j != v19; ++j)
    {
      uint64_t v41 = 0;
      uint64_t v42 = (int *)*((void *)v71 + j);
      while (v42[v41++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v42, v41 - 1);
    }
    if (*((void *)&v68 + 1) >= (unint64_t)v68)
    {
      if (v70)
      {
        int v63 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), &v63, 1uLL);
        uint64_t v44 = v67;
        --*((void *)&v68 + 1);
      }
      else
      {
        uint64_t v44 = v67;
        if ((void)v68) {
          v67[(void)v68 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v44 = v67;
      v67[*((void *)&v68 + 1)] = 0;
    }
    if (TNewWords::findAndAddWords((uint64_t)this, v44, (uint64_t)*this, v1, 1)) {
      goto LABEL_42;
    }
  }
  uint64_t v51 = this[4];
  uint64_t v52 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v51 + 1632));
  if (!*((unsigned char *)v51 + TParam::getValidConfig((TSegmenter *)((char *)v51 + 1632), v52) + 1784))
  {
LABEL_44:
    int v27 = 4;
  }
  else
  {
    char v53 = 0;
    uint64_t v54 = *this;
    unint64_t v55 = v19 - 1;
    unint64_t v56 = v19;
    uint64_t v57 = (int **)v71;
    do
    {
      if (v55) {
        unint64_t v58 = 0;
      }
      else {
        unint64_t v58 = v1;
      }
      uint64_t v59 = TNewWords::findAndAddWords((uint64_t)this, *v57, (uint64_t)v54, v58, 1);
      if (!v59)
      {
        uint64_t v60 = *v57;
        if (TLexicon::checkName((uint64_t)this[3], *v57, 0, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v59 = 0;
        }
        else
        {
          uint64_t v61 = TLexicon::addTempWord((uint64_t)this[3], v60, 0, 0, 0);
          uint64_t v59 = (uint64_t *)TGraph::addVertex(this[1], v58);
          uint64_t v62 = this[1];
          int v63 = 0;
          uint64_t v64 = v61;
          uint64_t v65 = 0;
          char v66 = 0;
          TGraph::addEdge(v62, (uint64_t)v54, v59, (uint64_t)&v63);
          char v53 = 1;
        }
      }
      ++v57;
      --v55;
      uint64_t v54 = (TSegmenter *)v59;
      --v56;
    }
    while (v56);
    int v27 = 0;
    uint64_t v20 = 0;
    if ((v53 & 1) == 0) {
      goto LABEL_53;
    }
  }
  uint64_t v28 = this[4];
  uint64_t v29 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v28 + 1880));
  if (!*((unsigned char *)v28 + TParam::getValidConfig((TSegmenter *)((char *)v28 + 1880), v29) + 2032)) {
    goto LABEL_52;
  }
  uint64_t v30 = this[4];
  uint64_t v31 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v30 + 1136));
  if (!*((unsigned char *)v30 + TParam::getValidConfig((TSegmenter *)((char *)v30 + 1136), v31) + 1288)) {
    goto LABEL_52;
  }
  TBuffer<wchar_t>::assign((uint64_t)&v67, *(int **)&v71[0]);
  for (uint64_t k = 1; k != v19; ++k)
  {
    int v63 = 45;
    TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), &v63, 1uLL);
    uint64_t v33 = 0;
    uint64_t v34 = (int *)*((void *)v71 + k);
    while (v34[v33++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v34, v33 - 1);
  }
  uint64_t v36 = (uint64_t)this[3];
  uint64_t v37 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v67);
  if (TLexicon::checkName(v36, v37, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_52:
    uint64_t v20 = 0;
    goto LABEL_53;
  }
  uint64_t v45 = (uint64_t)this[3];
  uint64_t v46 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v67);
  uint64_t v47 = TLexicon::addTempWord(v45, v46, 0, 0, 0);
  uint64_t v49 = *this;
  uint64_t v48 = this[1];
  uint64_t v50 = (uint64_t *)TGraph::addVertex(v48, v1);
  int v63 = v27;
  uint64_t v64 = v47;
  uint64_t v65 = 0;
  char v66 = 0;
  TGraph::addEdge(v48, (uint64_t)v49, v50, (uint64_t)&v63);
LABEL_42:
  this[5] = (TSegmenter *)v1;
  uint64_t v20 = 1;
LABEL_53:
  if (v70 && v67 != (int *)v69 && v67) {
    MEMORY[0x216698730]();
  }
  return v20;
}

void sub_213EEF080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t TNewWords::addContractionWord(TNewWords *this)
{
  uint64_t v2 = (TParam *)(*((void *)this + 4) + 1880);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((unsigned char *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152)) {
    return 0;
  }
  char v4 = TStringParam::get((TStringParam *)(*((void *)this + 4) + 2376));
  if (!*(_DWORD *)v4) {
    return 0;
  }
  char v5 = (__int32 *)v4;
  uint64_t Segment = (__int32 **)TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(*(void *)this + 16));
  if ((*Segment)[1]) {
    return 0;
  }
  uint64_t v9 = Segment;
  BOOL v10 = wcschr(v5, **Segment);
  if (!v10) {
    return 0;
  }
  if (*(void *)(*(void *)this + 16) != *(void *)(*(void *)this + 24)) {
    return 0;
  }
  uint64_t v11 = v10;
  uint64_t Vertex = TGraph::getVertex(*((TGraph **)this + 1), (const char *)v9[1]);
  if (!Vertex) {
    return 0;
  }
  uint64_t v13 = Vertex;
  if (*(void *)(Vertex + 16) != *(void *)(Vertex + 24)) {
    return 0;
  }
  uint64_t OutEdge = TVertex::getOutEdge(*(void *)this);
  if (OutEdge)
  {
    if (*(void *)(OutEdge + 24) != v13) {
      return 0;
    }
    while (1)
    {
      uint64_t OutEdge = *(void *)(OutEdge + 8);
      if (!OutEdge) {
        break;
      }
      if (!*(unsigned char *)(OutEdge + 32))
      {
        uint64_t PrevVertex = 0;
        if (*(void *)(OutEdge + 24) != v13) {
          return PrevVertex;
        }
      }
    }
  }
  uint64_t v15 = TVertex::getInEdge(v13);
  uint64_t v16 = *(void *)this;
  if (!v15) {
    goto LABEL_22;
  }
  if (*(void *)(v15 + 16) != v16) {
    return 0;
  }
  while (1)
  {
    uint64_t v15 = *(void *)v15;
    if (!v15) {
      break;
    }
    if (!*(unsigned char *)(v15 + 32))
    {
      uint64_t PrevVertex = 0;
      if (*(void *)(v15 + 16) != v16) {
        return PrevVertex;
      }
    }
  }
LABEL_22:
  uint64_t PrevVertex = TGraph::getPrevVertex(*((TGraph **)this + 1), *(void *)(v16 + 24) - 1);
  if (!PrevVertex) {
    return PrevVertex;
  }
  uint64_t v17 = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(PrevVertex + 16));
  if (!v17 || *(_DWORD *)(v17 + 24) != 1 || *(void *)(v17 + 8) != *(void *)(*(void *)this + 24)) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t v38 = v40;
  long long v39 = xmmword_214085190;
  char v41 = 1;
  unint64_t v19 = *(int **)v17;
  while (v19[v18++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v38, 0, v19, v18 - 1);
  int v34 = *v11;
  TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), &v34, 1uLL);
  uint64_t v21 = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(v13 + 16));
  uint64_t v22 = v21;
  if (!v21 || *(_DWORD *)(v21 + 24) != 1) {
    goto LABEL_35;
  }
  uint64_t v23 = 0;
  int v24 = *(int **)v21;
  while (v24[v23++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), v24, v23 - 1);
  uint64_t v26 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  if (TNewWords::findAndAddWords((uint64_t)this, v26, PrevVertex, *(char **)(v22 + 8), 0)) {
    goto LABEL_33;
  }
  uint64_t v27 = *((void *)this + 3);
  uint64_t v28 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  if (TLexicon::checkName(v27, v28, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_35:
    uint64_t PrevVertex = 0;
    goto LABEL_36;
  }
  uint64_t v29 = *((void *)this + 3);
  uint64_t v30 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  uint64_t v31 = TLexicon::addTempWord(v29, v30, 0, 0, 0);
  uint64_t v32 = (TGraph *)*((void *)this + 1);
  uint64_t v33 = (uint64_t *)TGraph::addVertex(v32, *(char **)(v22 + 8));
  int v34 = 4;
  uint64_t v35 = v31;
  uint64_t v36 = 0;
  char v37 = 0;
  TGraph::addEdge(v32, PrevVertex, v33, (uint64_t)&v34);
LABEL_33:
  *((void *)this + 5) = *(void *)(v22 + 8);
  uint64_t PrevVertex = 1;
LABEL_36:
  if (v41 && v38 != v40 && v38) {
    MEMORY[0x216698730]();
  }
  return PrevVertex;
}

void sub_213EEF454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (LOBYTE(STACK[0x438]) && a13 != v13)
  {
    if (a13) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

BOOL TNewWords::addAcronymWord(TSegmenter **this)
{
  int v1 = (char *)*((void *)*this + 2);
  long long v39 = (int *)v41;
  long long v40 = xmmword_214085190;
  char v42 = 1;
  if (!*v1)
  {
    BOOL v17 = 0;
LABEL_62:
    if (v39 != (int *)v41 && v39 != 0) {
      MEMORY[0x216698730]();
    }
    return v17;
  }
  char v3 = 1;
  do
  {
    uint64_t Segment = TSegmenter::getSegment(this[2], v1);
    uint64_t v5 = Segment;
    if (*(_DWORD *)(Segment + 24) != 1) {
      break;
    }
    unint64_t v6 = *(int **)Segment;
    if (wcslen(*(const __int32 **)Segment) != 1) {
      break;
    }
    int v7 = *v6;
    {
      operator new();
    }
    char isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7);
    uint64_t v9 = 0;
    BOOL v10 = *(int **)v5;
    while (v10[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), v10, v9 - 1);
    int v1 = *(char **)(v5 + 8);
    uint64_t v12 = (const __int32 **)TSegmenter::getSegment(this[2], v1);
    uint64_t v13 = v12;
    v3 &= isUpper;
    if (!v12) {
      break;
    }
    if (wcscmp(*v12, (const __int32 *)".")) {
      break;
    }
    uint64_t v14 = 0;
    uint64_t v15 = (int *)*v13;
    while (v15[v14++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), v15, v14 - 1);
    int v1 = (char *)v13[1];
  }
  while (*v1);
  BOOL v17 = *((void *)&v40 + 1) > 3uLL;
  if (*((void *)&v40 + 1) >= 4uLL)
  {
    if ((v3 & 1) == 0) {
      goto LABEL_38;
    }
    unint64_t v18 = 0;
    uint64_t v35 = (int *)v37;
    long long v36 = xmmword_214085190;
    char v38 = 1;
    do
    {
      signed int v19 = v39[v18];
      {
        operator new();
      }
      if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19))
      {
        v43[0] = v39[v18];
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v43, 1uLL);
      }
      ++v18;
    }
    while (v18 < *((void *)&v40 + 1));
    if (*((void *)&v36 + 1) >= (unint64_t)v36)
    {
      if (v38)
      {
        v43[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v43, 1uLL);
        uint64_t v20 = v35;
        --*((void *)&v36 + 1);
      }
      else
      {
        uint64_t v20 = v35;
        if ((void)v36) {
          v35[(void)v36 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v20 = v35;
      v35[*((void *)&v36 + 1)] = 0;
    }
    uint64_t v21 = TNewWords::findAndAddWords((uint64_t)this, v20, (uint64_t)*this, v1, 1);
    if (v38 && v35 != (int *)v37 && v35) {
      MEMORY[0x216698730]();
    }
    if (!v21)
    {
LABEL_38:
      uint64_t v22 = this[4];
      uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TSegmenter *)((char *)v22 + 1880));
      if (*((unsigned char *)v22 + TParam::getValidConfig((TSegmenter *)((char *)v22 + 1880), ActiveConfigHandle) + 2032))
      {
        if (*((void *)&v40 + 1) >= (unint64_t)v40)
        {
          if (v42)
          {
            LODWORD(v35) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), (int *)&v35, 1uLL);
            int v24 = v39;
            --*((void *)&v40 + 1);
          }
          else
          {
            int v24 = v39;
            if ((void)v40) {
              v39[(void)v40 - 1] = 0;
            }
          }
        }
        else
        {
          int v24 = v39;
          v39[*((void *)&v40 + 1)] = 0;
        }
        if (!TNewWords::findAndAddWords((uint64_t)this, v24, (uint64_t)*this, v1, 0))
        {
          uint64_t v25 = (uint64_t)this[3];
          if (*((void *)&v40 + 1) >= (unint64_t)v40)
          {
            if (v42)
            {
              LODWORD(v35) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), (int *)&v35, 1uLL);
              uint64_t v26 = v39;
              --*((void *)&v40 + 1);
            }
            else
            {
              uint64_t v26 = v39;
              if ((void)v40) {
                v39[(void)v40 - 1] = 0;
              }
            }
          }
          else
          {
            uint64_t v26 = v39;
            v39[*((void *)&v40 + 1)] = 0;
          }
          if (!TLexicon::checkName(v25, v26, 0, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v27 = (uint64_t *)TGraph::addVertex(this[1], v1);
            uint64_t v28 = (uint64_t)this[3];
            if (*((void *)&v40 + 1) >= (unint64_t)v40)
            {
              if (v42)
              {
                LODWORD(v35) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), (int *)&v35, 1uLL);
                uint64_t v29 = v39;
                --*((void *)&v40 + 1);
              }
              else
              {
                uint64_t v29 = v39;
                if ((void)v40) {
                  v39[(void)v40 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v29 = v39;
              v39[*((void *)&v40 + 1)] = 0;
            }
            uint64_t v30 = TLexicon::addTempWord(v28, v29, 0, 0, 0);
            uint64_t v31 = *this;
            uint64_t v32 = this[1];
            LODWORD(v35) = 4;
            long long v36 = (unint64_t)v30;
            v37[0] = 0;
            TGraph::addEdge(v32, (uint64_t)v31, v27, (uint64_t)&v35);
          }
        }
      }
    }
    this[5] = (TSegmenter *)v1;
  }
  if (v42) {
    goto LABEL_62;
  }
  return v17;
}

void sub_213EEF9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  MEMORY[0x216698730](v11, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x428]) && a11 != v13 && a11) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x848]))
  {
    if (STACK[0x430] != v12 && STACK[0x430] != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addAbbreviationWord(TNewWords *this)
{
  uint64_t v2 = (TParam *)(*((void *)this + 4) + 1880);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((unsigned char *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152)) {
    return 0;
  }
  uint64_t result = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(*(void *)this + 16));
  if (!result) {
    return result;
  }
  uint64_t v5 = (int **)result;
  unint64_t v6 = *(char **)(result + 8);
  unint64_t v7 = (unint64_t)&v6[-*(void *)(*(void *)this + 16)];
  BOOL v8 = *(_DWORD *)(result + 24) == 1 && v7 >= 2;
  if (!v8 || v7 > 5) {
    return 0;
  }
  uint64_t result = TSegmenter::getSegment(*((TSegmenter **)this + 2), v6);
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  if (wcscmp(*(const __int32 **)result, (const __int32 *)".")) {
    return 0;
  }
  uint64_t v11 = *(char **)(v10 + 8);
  if (!*v11) {
    return 0;
  }
  uint64_t OutEdge = TVertex::getOutEdge(*(void *)this);
  if (OutEdge)
  {
    uint64_t v13 = OutEdge;
    if ((*(unsigned char *)(OutEdge + 64) & 0xC0) == 0) {
      return 0;
    }
    while (1)
    {
      uint64_t v13 = *(void *)(v13 + 8);
      if (!v13) {
        break;
      }
      if (!*(unsigned char *)(v13 + 32))
      {
        uint64_t result = 0;
        if ((*(unsigned char *)(v13 + 64) & 0xC0) == 0) {
          return result;
        }
      }
    }
  }
  if (!memchr(";:,!?", *v11, 6uLL))
  {
    uint64_t result = TSegmenter::getSegment(*((TSegmenter **)this + 2), v11);
    if (!result) {
      return result;
    }
    uint64_t Segment = result;
    if (*(_DWORD *)(result + 24)) {
      return 0;
    }
    while (1)
    {
      int v27 = *(_DWORD *)(Segment + 24);
      int v28 = **(_DWORD **)Segment;
      uint64_t GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)result);
      if (v27) {
        break;
      }
      uint64_t result = 0;
      if (v28 <= 8202)
      {
        if (v28 != 32 && v28 != 160) {
          return result;
        }
      }
      else
      {
        BOOL v30 = v28 == 8203 || v28 == 65279;
        if (!v30 && v28 != 12288) {
          return result;
        }
      }
      uint64_t Segment = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(Segment + 8));
      uint64_t result = 0;
      if (!Segment) {
        return result;
      }
    }
    if (TLocaleInfo::isUpper(GlobalLocaleInfo, v28)) {
      return 0;
    }
  }
  uint64_t v35 = v37;
  long long v36 = xmmword_214085190;
  char v38 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&v35, *v5);
  uint64_t v14 = 0;
  uint64_t v15 = *(int **)v10;
  while (v15[v14++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v15, v14 - 1);
  BOOL v17 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
  if (!TNewWords::findAndAddWords((uint64_t)this, v17, *(void *)this, *(char **)(v10 + 8), 0))
  {
    uint64_t v18 = *((void *)this + 3);
    signed int v19 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
    if (!TLexicon::checkName(v18, v19, 0, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v20 = (uint64_t *)TGraph::addVertex(*((TGraph **)this + 1), *(char **)(v10 + 8));
      uint64_t v21 = *((void *)this + 3);
      uint64_t v22 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
      uint64_t v23 = TLexicon::addTempWord(v21, v22, 0, 0, 0);
      uint64_t v24 = *(void *)this;
      uint64_t v25 = (void *)*((void *)this + 1);
      int v31 = 4;
      uint64_t v32 = v23;
      uint64_t v33 = 0;
      char v34 = 0;
      TGraph::addEdge(v25, v24, v20, (uint64_t)&v31);
    }
  }
  *((void *)this + 5) = *(void *)(v10 + 8);
  if (v38 && v35 != v37 && v35) {
    MEMORY[0x216698730]();
  }
  return 1;
}

void sub_213EEFD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (LOBYTE(STACK[0x438]) && a13 != v13)
  {
    if (a13) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addWords(uint64_t this, TVertex *a2, TGraph *a3, TSegmenter *a4, TLexicon *a5)
{
  *(void *)this = a2;
  *(void *)(this + 8) = a3;
  *(void *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a4;
  *(void *)(this + 24) = a5;
  if (*((void *)a2 + 2) >= *(void *)(this + 40))
  {
    uint64_t v5 = (TSegmenter **)this;
    this = TNewWords::addAlphanumWord((TNewWords *)this);
    if ((this & 1) == 0)
    {
      this = TNewWords::addHyphenatedWord(v5);
      if ((this & 1) == 0)
      {
        this = TNewWords::addContractionWord((TNewWords *)v5);
        if ((this & 1) == 0)
        {
          this = TNewWords::addAcronymWord(v5);
          if ((this & 1) == 0)
          {
            return TNewWords::addAbbreviationWord((TNewWords *)v5);
          }
        }
      }
    }
  }
  return this;
}

void MrecInitModule_virtmap_fst(void)
{
  if (!gParDebugVirtMapShowContent)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugVirtMapShowContent", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugVirtMapShowContent = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugVirtMapShowContent);
  }
  if (!gParDebugVirtMapShowStats)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugVirtMapShowStats", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *char v3 = &unk_26C4E0858;
    gParDebugVirtMapShowStats = (uint64_t)v3;
    char v4 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v4, (GlobalParam **)&gParDebugVirtMapShowStats);
  }
}

void VirtMap::printSize(VirtMap *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 122, (DgnString *)&v74);
  if (v75) {
    uint64_t v16 = v74;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  uint64_t v73 = a6;
  DgnString::~DgnString((DgnString *)&v74);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t fixed = sizeObject<DgnPrimFixArray<unsigned int>>((uint64_t)this, 0);
  uint64_t v22 = sizeObject<DgnPrimFixArray<unsigned int>>((uint64_t)this, 1);
  uint64_t v74 = 0;
  int v75 = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 123, (DgnString *)&v74);
  if (v75) {
    int v27 = v74;
  }
  else {
    int v27 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v27, fixed, v22, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += fixed;
  *a5 += v22;
  uint64_t v28 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v28 = 16;
  }
  char v29 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v29 = 3;
  }
  uint64_t v30 = *((unsigned int *)this + 6);
  uint64_t v31 = (((*((_DWORD *)this + 7) - v30) + v30) << v29) + v28;
  uint64_t v32 = (v30 << v29) + v28;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 124, (DgnString *)&v74);
  if (v75) {
    char v37 = v74;
  }
  else {
    char v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v37, v31, v32, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v31;
  *a5 += v32;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 12;
  }
  else {
    uint64_t v38 = 16;
  }
  uint64_t v39 = *((unsigned int *)this + 10);
  unsigned int v40 = *((_DWORD *)this + 11);
  if (v40 >= v39)
  {
    uint64_t v41 = 0;
    if ((int)v39 > 0) {
      v38 += 4 * (v39 - 1) + 4;
    }
    uint64_t v42 = v38 + 4 * (v40 - v39);
  }
  else
  {
    uint64_t v41 = 4 * v39;
    uint64_t v42 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 125, (DgnString *)&v74);
  if (v75) {
    uint64_t v47 = v74;
  }
  else {
    uint64_t v47 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v47, v42, v38, v41);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v42;
  *a5 += v38;
  *v73 += v41;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 126, (DgnString *)&v74);
  if (v75) {
    uint64_t v52 = v74;
  }
  else {
    uint64_t v52 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v52, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 127, (DgnString *)&v74);
  if (v75) {
    uint64_t v57 = v74;
  }
  else {
    uint64_t v57 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v57, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 128, (DgnString *)&v74);
  if (v75) {
    uint64_t v62 = v74;
  }
  else {
    uint64_t v62 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v62, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 138, (DgnString *)&v74);
  if (v75) {
    uint64_t v67 = v74;
  }
  else {
    uint64_t v67 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v67, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v74);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/virtmap.cpp", 139, (DgnString *)&v74);
  if (v75) {
    uint64_t v72 = v74;
  }
  else {
    uint64_t v72 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v72, *a4, *a5, *v73);
  DgnString::~DgnString((DgnString *)&v74);
}

void sub_213EF042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnPrimFixArray<unsigned int>>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v3 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  if (a2 != 3)
  {
    uint64_t v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v4 = *(unsigned int *)(a1 + 8);
      if ((int)v4 >= 1)
      {
        unint64_t v5 = v4 + 1;
        do
        {
          uint64_t v6 = *(unsigned int *)(*(void *)a1 + 16 * (v5 - 2) + 8);
          if ((int)v6 <= 0) {
            uint64_t v7 = 0;
          }
          else {
            uint64_t v7 = 4 * v6;
          }
          v2 += v3 + v7;
          --v5;
        }
        while (v5 > 1);
      }
      if (!a2) {
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - v4);
      }
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v9);
  return v2;
}

void VirtMap::VirtMap(VirtMap *this)
{
  *(_OWORD *)((char *)this + 45) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

uint64_t VirtMap::setEmpty(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 40);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 4 * v1;
    do
    {
      *(void *)(*(void *)(this + 16) + 8 * *(unsigned int *)(*(void *)(this + 32) + v2)) = 0;
      v2 += 4;
    }
    while (v3 != v2);
  }
  *(_DWORD *)(this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  return this;
}

void VirtMap::~VirtMap(VirtMap *this)
{
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16);
  DgnArray<DgnVector>::releaseAll((uint64_t)this);
}

void MrecInitModule_pel_pel(void)
{
  if (!gParDebugShowPelInfoOnLoad)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPelInfoOnLoad", byte_2140A2798, byte_2140A2798, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugShowPelInfoOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPelInfoOnLoad);
  }
  if (!gParDebugAcousticMicPacking)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugAcousticMicPacking", byte_2140A2798, byte_2140A2798, 0, 0, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDebugAcousticMicPacking = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAcousticMicPacking);
  }
  if (!gParDebugShowShortListFrameClassification)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowShortListFrameClassification", byte_2140A2798, byte_2140A2798, 0, 0, 0);
    *unint64_t v5 = &unk_26C4E0858;
    gParDebugShowShortListFrameClassification = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowShortListFrameClassification);
  }
  if (!gParDiagnosticPelHierarchyCreationUseReference)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DiagnosticPelHierarchyCreationUseReference", byte_2140A2798, byte_2140A2798, 0, 0, 0);
    *uint64_t v7 = &unk_26C4E0858;
    gParDiagnosticPelHierarchyCreationUseReference = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPelHierarchyCreationUseReference);
  }
  if (!gParDebugShowShortListSetId)
  {
    BOOL v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugShowShortListSetId", byte_2140A2798, byte_2140A2798, 0, 0, 0);
    *uint64_t v9 = &unk_26C4E0858;
    gParDebugShowShortListSetId = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowShortListSetId);
  }
  if (!gParDiagnosticPelHierarchyUpdate)
  {
    int v10 = MemChunkAlloc(0x38uLL, 0);
    uint64_t v14 = 0x200000000;
    uint64_t v11 = (void *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v10, (uint64_t)"DiagnosticPelHierarchyUpdate", (uint64_t)byte_2140A2798, (uint64_t)byte_2140A2798, 0, &v14, 0);
    *uint64_t v11 = &unk_26C4E05C8;
    gParDiagnosticPelHierarchyUpdate = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPelHierarchyUpdate);
  }
  if (!gParDebugExciseUnneededPelsGenonesComps)
  {
    uint64_t v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "DebugExciseUnneededPelsGenonesComps", byte_2140A2798, byte_2140A2798, 0, 0, 0);
    void *v13 = &unk_26C4E0858;
    gParDebugExciseUnneededPelsGenonesComps = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugExciseUnneededPelsGenonesComps);
  }
}

uint64_t sizeObject<FrameDecisionTreeHyperplane>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  else {
    uint64_t v3 = 16;
  }
  v9[0] = 0;
  v9[1] = 0;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v2 = v3;
      goto LABEL_11;
    }
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 < 1)
    {
      uint64_t v2 = v3;
      if (a2) {
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v7 = v6 + 1;
      uint64_t v2 = v3;
      do
        v2 += sizeObject<unsigned int>(*(void *)a1 + 24 * (v7-- - 2) + 8, a2) + 4;
      while (v7 > 1);
      if (a2) {
        goto LABEL_11;
      }
    }
    v2 += (v3 + 4) * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
LABEL_11:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_213EF0A18(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

uint64_t FrameDecisionTree::classifyFrame(unsigned __int16 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = **a1;
  if (**a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((unsigned __int16 *)a1 + 16);
    uint64_t v6 = *a2;
    unint64_t v7 = a1[2];
    do
    {
      int v8 = 0;
      if (v5)
      {
        uint64_t v9 = *(int **)&v7[12 * (unsigned __int16)v2[3 * v4 + 2] + 4];
        uint64_t v10 = v5;
        uint64_t v11 = v6;
        do
        {
          int v13 = *v11++;
          int v12 = v13;
          int v14 = *v9++;
          v8 += v14 * v12;
          --v10;
        }
        while (v10);
      }
      if (*(_DWORD *)&v7[12 * (unsigned __int16)v2[3 * v4 + 2]] + v8 >= 0) {
        unsigned int v3 = (unsigned __int16)v2[3 * v4 + 1];
      }
      uint64_t v4 = v3;
      unsigned int v3 = (unsigned __int16)v2[3 * v3];
    }
    while (v3);
  }
  else
  {
    LODWORD(v4) = 0;
  }
  return (unsigned __int16)v2[3 * v4 + 2];
}

uint64_t FrameDecisionTree::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int16 v19 = *(_DWORD *)(a1 + 8);
  writeObject(a2, &v19, a3);
  unsigned __int16 v18 = *(_DWORD *)(a1 + 24);
  writeObject(a2, &v18, a3);
  uint64_t result = writeObject(a2, (unsigned __int16 *)(a1 + 32), a3);
  if (v18)
  {
    uint64_t v7 = 0;
    for (unint64_t i = 0; i < v18; ++i)
    {
      int v17 = 0;
      int v17 = *(_DWORD *)(*(void *)(a1 + 16) + v7);
      uint64_t result = writeObject(a2, &v17, a3);
      unsigned __int16 v9 = v18;
      v7 += 24;
    }
    if (v18)
    {
      unint64_t v10 = 0;
      LODWORD(v11) = *(unsigned __int16 *)(a1 + 32);
      do
      {
        if (v11)
        {
          unint64_t v12 = 0;
          do
          {
            int v17 = 0;
            int v17 = *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 24 * v10 + 8) + 4 * v12);
            uint64_t result = writeObject(a2, &v17, a3);
            ++v12;
            unint64_t v11 = *(unsigned __int16 *)(a1 + 32);
          }
          while (v12 < v11);
          unsigned __int16 v9 = v18;
        }
        ++v10;
      }
      while (v10 < v9);
    }
  }
  if (v19)
  {
    uint64_t v13 = 0;
    for (unint64_t j = 0; j < v19; ++j)
    {
      LOWORD(v17) = 0;
      LOWORD(v17) = *(_WORD *)(*(void *)a1 + v13);
      writeObject(a2, (unsigned __int16 *)&v17, a3);
      unsigned __int16 v16 = 0;
      unsigned __int16 v16 = *(_WORD *)(*(void *)a1 + v13 + 2);
      writeObject(a2, &v16, a3);
      unsigned __int16 v15 = 0;
      unsigned __int16 v15 = *(_WORD *)(*(void *)a1 + v13 + 4);
      uint64_t result = writeObject(a2, &v15, a3);
      v13 += 6;
    }
  }
  return result;
}

void PackingPars::printSize(PackingPars *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 852, (DgnString *)&v81);
  if (v82) {
    unsigned __int16 v16 = v81;
  }
  else {
    unsigned __int16 v16 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, byte_2140A2798, a3, byte_2140A2798, v16);
  DgnString::~DgnString((DgnString *)&v81);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, byte_2140A2798);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 853, (DgnString *)&v81);
  if (v82) {
    int v27 = v81;
  }
  else {
    int v27 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v27, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 854, (DgnString *)&v81);
  if (v82) {
    uint64_t v32 = v81;
  }
  else {
    uint64_t v32 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v32, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 855, (DgnString *)&v81);
  if (v82) {
    char v37 = v81;
  }
  else {
    char v37 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v37, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 856, (DgnString *)&v81);
  if (v82) {
    uint64_t v42 = v81;
  }
  else {
    uint64_t v42 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v42, 8, 8, 0);
  uint64_t v80 = a3;
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 857, (DgnString *)&v81);
  if (v82) {
    uint64_t v47 = v81;
  }
  else {
    uint64_t v47 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v47, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v48 = 12;
  }
  else {
    uint64_t v48 = 16;
  }
  uint64_t v49 = *((unsigned int *)this + 12);
  unsigned int v50 = *((_DWORD *)this + 13);
  uint64_t v51 = this;
  if (v50 >= v49)
  {
    uint64_t v52 = 0;
    if ((int)v49 > 0) {
      uint64_t v48 = (v48 | 2) + 2 * (v49 - 1);
    }
    uint64_t v53 = v48 + 2 * (v50 - v49);
  }
  else
  {
    uint64_t v52 = 2 * v49;
    uint64_t v53 = v48;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 858, (DgnString *)&v81);
  if (v82) {
    uint64_t v58 = v81;
  }
  else {
    uint64_t v58 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, byte_2140A2798, v22, v22, v58, v53, v48, v52);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v53;
  *a5 += v48;
  *a6 += v52;
  uint64_t v59 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 12;
  }
  uint64_t v60 = *((unsigned int *)v51 + 16);
  if ((int)v60 <= 0) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = 8 * v60;
  }
  uint64_t v62 = v61 + v59;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 859, (DgnString *)&v81);
  if (v82) {
    uint64_t v67 = v81;
  }
  else {
    uint64_t v67 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, byte_2140A2798, v22, v22, v67, v62, v62, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v62;
  *a5 += v62;
  uint64_t v68 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v68 = 12;
  }
  uint64_t v69 = v68 + (*((_DWORD *)v51 + 20) & ~(*((int *)v51 + 20) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 860, (DgnString *)&v81);
  if (v82) {
    uint64_t v74 = v81;
  }
  else {
    uint64_t v74 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, byte_2140A2798, v22, v22, v74, v69, v69, 0);
  DgnString::~DgnString((DgnString *)&v81);
  *a4 += v69;
  *a5 += v69;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 861, (DgnString *)&v81);
  if (v82) {
    uint64_t v79 = v81;
  }
  else {
    uint64_t v79 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v80, byte_2140A2798, (35 - v80), (35 - v80), v79, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v81);
}

void sub_213EF118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void PelMgr::~PelMgr(PelMgr *this)
{
  *((void *)this + 61) = 0;
  *(void *)this = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 720);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 704);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 688);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 672);
  DgnArray<AlignedArray<unsigned char>>::releaseAll((uint64_t)this + 656);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 640);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 624);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 600);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 584);
  BitArray::~BitArray((PelMgr *)((char *)this + 568));
  FrameDecisionTree::~FrameDecisionTree((PelMgr *)((char *)this + 528));
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 504);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 456);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 432);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 416);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 320);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 304);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 288);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 256);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnArray<AlignedArray<unsigned char>>::releaseAll((uint64_t)this + 200);
  DgnArray<DgnArray<DgnPrimArray<int>>>::releaseAll((uint64_t)this + 184);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
}

uint64_t DgnDelete<PackingPars>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    DgnPrimFixArray<double>::~DgnPrimFixArray(result + 72);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(v1 + 7));
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 5));
    return MemChunkFree(v1, 0);
  }
  return result;
}

void PelMgr::printSize(PelMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 955, (DgnString *)&v437);
  if (v438) {
    unsigned __int16 v16 = (char *)v437;
  }
  else {
    unsigned __int16 v16 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, byte_2140A2798, a3, byte_2140A2798, v16);
  DgnString::~DgnString((DgnString *)&v437);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, byte_2140A2798);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v22 = (a3 + 1);
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 956, (DgnString *)&v437);
  if (v438) {
    uint64_t v28 = (char *)v437;
  }
  else {
    uint64_t v28 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 958, (DgnString *)&v437);
  if (v438) {
    uint64_t v33 = (char *)v437;
  }
  else {
    uint64_t v33 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v33, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 960, (DgnString *)&v437);
  if (v438) {
    uint64_t v38 = (char *)v437;
  }
  else {
    uint64_t v38 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v38, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 962, (DgnString *)&v437);
  if (v438) {
    uint64_t v43 = (char *)v437;
  }
  else {
    uint64_t v43 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v43, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 963, (DgnString *)&v437);
  if (v438) {
    uint64_t v48 = (char *)v437;
  }
  else {
    uint64_t v48 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v48, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 964, (DgnString *)&v437);
  if (v438) {
    uint64_t v53 = (char *)v437;
  }
  else {
    uint64_t v53 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v53, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 965, (DgnString *)&v437);
  if (v438) {
    uint64_t v58 = (char *)v437;
  }
  else {
    uint64_t v58 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v58, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 966, (DgnString *)&v437);
  if (v438) {
    uint64_t v63 = (char *)v437;
  }
  else {
    uint64_t v63 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v63, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 967, (DgnString *)&v437);
  if (v438) {
    uint64_t v68 = (char *)v437;
  }
  else {
    uint64_t v68 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v68, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 968, (DgnString *)&v437);
  if (v438) {
    uint64_t v73 = (char *)v437;
  }
  else {
    uint64_t v73 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v73, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 970, (DgnString *)&v437);
  if (v438) {
    uint64_t v78 = (char *)v437;
  }
  else {
    uint64_t v78 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v78, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 972, (DgnString *)&v437);
  if (v438) {
    uint64_t v83 = (char *)v437;
  }
  else {
    uint64_t v83 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v83, 4, 4, 0);
  uint64_t v433 = a3;
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 974, (DgnString *)&v437);
  if (v438) {
    uint64_t v88 = (char *)v437;
  }
  else {
    uint64_t v88 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, (a3 + 1), byte_2140A2798, (34 - a3), (34 - a3), v88, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  uint64_t v89 = this;
  uint64_t v90 = (char *)this + 160;
  uint64_t v91 = sizeObject((uint64_t)this + 160, 0);
  uint64_t v92 = sizeObject((uint64_t)this + 160, 1);
  uint64_t v93 = sizeObject((uint64_t)v90, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 976, (DgnString *)&v437);
  if (v438) {
    uint64_t v98 = (char *)v437;
  }
  else {
    uint64_t v98 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v22, byte_2140A2798, v23, v23, v98, v91, v92, v93);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v91;
  *a5 += v92;
  *a6 += v93;
  uint64_t v99 = sizeObject((uint64_t)v89 + 164, 0);
  uint64_t v100 = sizeObject((uint64_t)v89 + 164, 1);
  uint64_t v101 = sizeObject((uint64_t)v89 + 164, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 978, (DgnString *)&v437);
  if (v438) {
    uint64_t v106 = (char *)v437;
  }
  else {
    uint64_t v106 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v22, byte_2140A2798, v23, v23, v106, v99, v100, v101);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v99;
  *a5 += v100;
  *a6 += v101;
  uint64_t v107 = sizeObject<BinaryIntScale>((uint64_t)v89 + 168, 0);
  uint64_t v108 = sizeObject<BinaryIntScale>((uint64_t)v89 + 168, 1);
  LODWORD(v437) = 0;
  sizeObject((uint64_t)&v437, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 980, (DgnString *)&v437);
  if (v438) {
    uint64_t v113 = (char *)v437;
  }
  else {
    uint64_t v113 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v22, byte_2140A2798, v23, v23, v113, v107, v108, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v107;
  *a5 += v108;
  uint64_t v114 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)v89 + 184, 0);
  uint64_t v115 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)v89 + 184, 1);
  uint64_t v116 = sizeObject<DgnArray<DgnPrimArray<unsigned int>>>((uint64_t)v89 + 184, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 982, (DgnString *)&v437);
  if (v438) {
    long long v121 = (char *)v437;
  }
  else {
    long long v121 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, v22, byte_2140A2798, v23, v23, v121, v114, v115, v116);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v114;
  *a5 += v115;
  *a6 += v116;
  uint64_t v122 = sizeObject<AlignedArray<short>>((uint64_t)v89 + 200, 0);
  uint64_t v123 = sizeObject<AlignedArray<short>>((uint64_t)v89 + 200, 1);
  unint64_t v437 = 0;
  uint64_t v438 = 0;
  LODWORD(v439) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 984, (DgnString *)&v437);
  if (v438) {
    uint64_t v128 = (char *)v437;
  }
  else {
    uint64_t v128 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v22, byte_2140A2798, v23, v23, v128, v122, v123, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v122;
  *a5 += v123;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v129 = 12;
  }
  else {
    uint64_t v129 = 16;
  }
  int v130 = *((_DWORD *)v89 + 56);
  unsigned int v131 = *((_DWORD *)v89 + 57);
  BOOL v132 = v131 >= v130;
  uint64_t v133 = v131 - v130;
  v434 = (unsigned int *)v89;
  if (v132)
  {
    uint64_t v135 = v130 & ~(v130 >> 31);
    int v130 = 0;
    uint64_t v134 = v129 + v135;
    v129 += v135 + v133;
  }
  else
  {
    uint64_t v134 = v129;
  }
  uint64_t v136 = v130;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 986, (DgnString *)&v437);
  if (v438) {
    unint64_t v141 = (char *)v437;
  }
  else {
    unint64_t v141 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v22, byte_2140A2798, v23, v23, v141, v129, v134, v136);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v129;
  *a5 += v134;
  *a6 += v136;
  uint64_t v142 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v142 = 12;
  }
  int v143 = *((_DWORD *)v89 + 60);
  unsigned int v144 = *((_DWORD *)v89 + 61);
  uint64_t v145 = v144 - v143;
  if (v144 >= v143)
  {
    uint64_t v147 = v143 & ~(v143 >> 31);
    int v143 = 0;
    uint64_t v146 = v142 + v147;
    uint64_t v142 = v146 + v145;
  }
  else
  {
    uint64_t v146 = v142;
  }
  uint64_t v148 = v142 + 4;
  uint64_t v149 = v146 + 4;
  uint64_t v150 = v143;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 994, (DgnString *)&v437);
  if (v438) {
    v155 = (char *)v437;
  }
  else {
    v155 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v22, byte_2140A2798, v23, v23, v155, v148, v149, v150);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v148;
  *a5 += v149;
  *a6 += v150;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v156 = 12;
  }
  else {
    uint64_t v156 = 16;
  }
  uint64_t v157 = *((unsigned int *)v89 + 66);
  unsigned int v158 = *((_DWORD *)v89 + 67);
  if (v158 >= v157)
  {
    uint64_t v159 = 0;
    if ((int)v157 > 0) {
      v156 += 4 * (v157 - 1) + 4;
    }
    uint64_t v160 = v156 + 4 * (v158 - v157);
  }
  else
  {
    uint64_t v159 = 4 * v157;
    uint64_t v160 = v156;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 996, (DgnString *)&v437);
  if (v438) {
    v165 = (char *)v437;
  }
  else {
    v165 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v161, v162, v163, v164, v22, byte_2140A2798, v23, v23, v165, v160, v156, v159);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v160;
  *a5 += v156;
  *a6 += v159;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v166 = 12;
  }
  else {
    uint64_t v166 = 16;
  }
  uint64_t v167 = *((unsigned int *)v89 + 70);
  unsigned int v168 = *((_DWORD *)v89 + 71);
  if (v168 >= v167)
  {
    uint64_t v169 = 0;
    if ((int)v167 > 0) {
      v166 += 4 * (v167 - 1) + 4;
    }
    uint64_t v170 = v166 + 4 * (v168 - v167);
  }
  else
  {
    uint64_t v169 = 4 * v167;
    uint64_t v170 = v166;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 998, (DgnString *)&v437);
  if (v438) {
    v175 = (char *)v437;
  }
  else {
    v175 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v171, v172, v173, v174, v22, byte_2140A2798, v23, v23, v175, v170, v166, v169);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v170;
  *a5 += v166;
  *a6 += v169;
  uint64_t v176 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v176 = 12;
  }
  uint64_t v177 = *((unsigned int *)v89 + 74);
  if ((int)v177 <= 0) {
    uint64_t v178 = 0;
  }
  else {
    uint64_t v178 = 2 * v177;
  }
  uint64_t v179 = v178 + v176;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 999, (DgnString *)&v437);
  if (v438) {
    v184 = (char *)v437;
  }
  else {
    v184 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v22, byte_2140A2798, v23, v23, v184, v179, v179, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v179;
  *a5 += v179;
  uint64_t v185 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v185 = 12;
  }
  uint64_t v186 = *((unsigned int *)v89 + 78);
  if ((int)v186 <= 0) {
    uint64_t v187 = 0;
  }
  else {
    uint64_t v187 = 2 * v186;
  }
  uint64_t v188 = v187 + v185;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1000, (DgnString *)&v437);
  if (v438) {
    v193 = (char *)v437;
  }
  else {
    v193 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v189, v190, v191, v192, v22, byte_2140A2798, v23, v23, v193, v188, v188, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v188;
  *a5 += v188;
  uint64_t v194 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v194 = 12;
  }
  uint64_t v195 = *((unsigned int *)v89 + 82);
  if ((int)v195 <= 0) {
    uint64_t v196 = 0;
  }
  else {
    uint64_t v196 = 2 * v195;
  }
  uint64_t v197 = v196 + v194;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1002, (DgnString *)&v437);
  if (v438) {
    v202 = (char *)v437;
  }
  else {
    v202 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v22, byte_2140A2798, v23, v23, v202, v197, v197, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v197;
  *a5 += v197;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1004, (DgnString *)&v437);
  if (v438) {
    v207 = (char *)v437;
  }
  else {
    v207 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v22, byte_2140A2798, v23, v23, v207, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v208 = 12;
  }
  else {
    uint64_t v208 = 16;
  }
  int v209 = *((_DWORD *)v89 + 88);
  unsigned int v210 = *((_DWORD *)v89 + 89);
  BOOL v132 = v210 >= v209;
  uint64_t v211 = v210 - v209;
  if (v132)
  {
    uint64_t v213 = v209 & ~(v209 >> 31);
    int v209 = 0;
    uint64_t v212 = v208 + v213;
    v208 += v213 + v211;
  }
  else
  {
    uint64_t v212 = v208;
  }
  uint64_t v214 = v209;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1005, (DgnString *)&v437);
  if (v438) {
    v219 = (char *)v437;
  }
  else {
    v219 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v22, byte_2140A2798, v23, v23, v219, v208, v212, v214);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v208;
  *a5 += v212;
  *a6 += v214;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v220 = 12;
  }
  else {
    uint64_t v220 = 16;
  }
  uint64_t v221 = *((unsigned int *)v89 + 92);
  unsigned int v222 = *((_DWORD *)v89 + 93);
  if (v222 >= v221)
  {
    uint64_t v223 = 0;
    if ((int)v221 > 0) {
      v220 += 4 * (v221 - 1) + 4;
    }
    uint64_t v224 = v220 + 4 * (v222 - v221);
  }
  else
  {
    uint64_t v223 = 4 * v221;
    uint64_t v224 = v220;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1006, (DgnString *)&v437);
  if (v438) {
    v229 = (char *)v437;
  }
  else {
    v229 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v225, v226, v227, v228, v22, byte_2140A2798, v23, v23, v229, v224, v220, v223);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v224;
  *a5 += v220;
  *a6 += v223;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v230 = 12;
  }
  else {
    uint64_t v230 = 16;
  }
  uint64_t v231 = *((unsigned int *)v89 + 96);
  unsigned int v232 = *((_DWORD *)v89 + 97);
  if (v232 >= v231)
  {
    uint64_t v233 = 0;
    if ((int)v231 > 0) {
      uint64_t v230 = (v230 | 2) + 2 * (v231 - 1);
    }
    uint64_t v234 = v230 + 2 * (v232 - v231);
  }
  else
  {
    uint64_t v233 = 2 * v231;
    uint64_t v234 = v230;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1008, (DgnString *)&v437);
  if (v438) {
    v239 = (char *)v437;
  }
  else {
    v239 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v235, v236, v237, v238, v22, byte_2140A2798, v23, v23, v239, v234, v230, v233);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v234;
  *a5 += v230;
  *a6 += v233;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1010, (DgnString *)&v437);
  if (v438) {
    v244 = (char *)v437;
  }
  else {
    v244 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v22, byte_2140A2798, v23, v23, v244, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v437);
  ++*a4;
  ++*a5;
  uint64_t v245 = sizeObject<DgnString>((uint64_t)v89 + 400, 0);
  uint64_t v246 = sizeObject<DgnString>((uint64_t)v89 + 400, 1);
  uint64_t v247 = sizeObject<DgnString>((uint64_t)v89 + 400, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1012, (DgnString *)&v437);
  if (v438) {
    v252 = (char *)v437;
  }
  else {
    v252 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v248, v249, v250, v251, v22, byte_2140A2798, v23, v23, v252, v245, v246, v247);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v245;
  *a5 += v246;
  *a6 += v247;
  uint64_t v253 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v253 = 12;
  }
  uint64_t v254 = *((unsigned int *)v89 + 106);
  if ((int)v254 <= 0) {
    uint64_t v255 = 0;
  }
  else {
    uint64_t v255 = 4 * v254;
  }
  uint64_t v256 = v255 + v253;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1014, (DgnString *)&v437);
  if (v438) {
    v261 = (char *)v437;
  }
  else {
    v261 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v257, v258, v259, v260, v22, byte_2140A2798, v23, v23, v261, v256, v256, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v256;
  *a5 += v256;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v262 = 12;
  }
  else {
    uint64_t v262 = 16;
  }
  uint64_t v263 = *((unsigned int *)v89 + 110);
  unsigned int v264 = *((_DWORD *)v89 + 111);
  if (v264 >= v263)
  {
    uint64_t v265 = 0;
    if ((int)v263 > 0) {
      uint64_t v262 = (v262 | 2) + 2 * (v263 - 1);
    }
    uint64_t v266 = v262 + 2 * (v264 - v263);
  }
  else
  {
    uint64_t v265 = 2 * v263;
    uint64_t v266 = v262;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1016, (DgnString *)&v437);
  if (v438) {
    v271 = (char *)v437;
  }
  else {
    v271 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v267, v268, v269, v270, v22, byte_2140A2798, v23, v23, v271, v266, v262, v265);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v266;
  *a5 += v262;
  *a6 += v265;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1018, (DgnString *)&v437);
  if (v438) {
    v276 = (char *)v437;
  }
  else {
    v276 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v272, v273, v274, v275, v22, byte_2140A2798, v23, v23, v276, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v277 = 12;
  }
  else {
    uint64_t v277 = 16;
  }
  uint64_t v278 = *((unsigned int *)v89 + 116);
  unsigned int v279 = *((_DWORD *)v89 + 117);
  if (v279 >= v278)
  {
    uint64_t v280 = 0;
    if ((int)v278 > 0) {
      v277 += 4 * (v278 - 1) + 4;
    }
    uint64_t v281 = v277 + 4 * (v279 - v278);
  }
  else
  {
    uint64_t v280 = 4 * v278;
    uint64_t v281 = v277;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1020, (DgnString *)&v437);
  if (v438) {
    v286 = (char *)v437;
  }
  else {
    v286 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v22, byte_2140A2798, v23, v23, v286, v281, v277, v280);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v281;
  *a5 += v277;
  *a6 += v280;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v287 = 12;
  }
  else {
    uint64_t v287 = 16;
  }
  uint64_t v288 = *((unsigned int *)v89 + 120);
  unsigned int v289 = *((_DWORD *)v89 + 121);
  if (v289 >= v288)
  {
    uint64_t v290 = 0;
    if ((int)v288 > 0) {
      v287 += 8 * (v288 - 1) + 8;
    }
    uint64_t v291 = v287 + 8 * (v289 - v288);
  }
  else
  {
    uint64_t v290 = 8 * v288;
    uint64_t v291 = v287;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1022, (DgnString *)&v437);
  if (v438) {
    v296 = (char *)v437;
  }
  else {
    v296 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v292, v293, v294, v295, v22, byte_2140A2798, v23, v23, v296, v291, v287, v290);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v291;
  *a5 += v287;
  *a6 += v290;
  v297 = (PackingPars *)*((void *)v89 + 61);
  if (v297)
  {
    unint64_t v437 = 0;
    unint64_t v435 = 0;
    unint64_t v436 = 0;
    PackingPars::printSize(v297, 0xFFFFFFFFLL, v22, &v437, &v436, &v435);
    *a4 += v437;
    *a5 += v436;
    *a6 += v435;
  }
  v432 = a6;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v298 = 4;
  }
  else {
    uint64_t v298 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1024, (DgnString *)&v437);
  if (v438) {
    v303 = (char *)v437;
  }
  else {
    v303 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v299, v300, v301, v302, v22, byte_2140A2798, v23, v23, v303, v298, v298, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v298;
  *a5 += v298;
  uint64_t v304 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v305 = 12;
  }
  else {
    uint64_t v305 = 16;
  }
  uint64_t v306 = v434[134];
  if ((int)v306 <= 0) {
    uint64_t v307 = 0;
  }
  else {
    uint64_t v307 = 6 * v306;
  }
  unsigned int v308 = v434[135] - v306;
  uint64_t v309 = sizeObject<FrameDecisionTreeHyperplane>((uint64_t)(v434 + 136), 0) + v307 + v305 + 6 * v308;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v304 = 12;
  }
  uint64_t v310 = v434[134];
  if ((int)v310 <= 0) {
    uint64_t v311 = 0;
  }
  else {
    uint64_t v311 = 6 * v310;
  }
  uint64_t v312 = sizeObject<FrameDecisionTreeHyperplane>((uint64_t)(v434 + 136), 1) + v311 + v304;
  uint64_t v438 = 0;
  uint64_t v439 = 0;
  LODWORD(v437) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v438);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1026, (DgnString *)&v437);
  if (v438) {
    v317 = (char *)v437;
  }
  else {
    v317 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v22, byte_2140A2798, v23, v23, v317, v309, v312, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v309;
  *a5 += v312;
  uint64_t v318 = BitArray::sizeObject((uint64_t)(v434 + 142), 0);
  uint64_t v319 = BitArray::sizeObject((uint64_t)(v434 + 142), 1);
  uint64_t v320 = BitArray::sizeObject((uint64_t)(v434 + 142), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1028, (DgnString *)&v437);
  if (v438) {
    v325 = (char *)v437;
  }
  else {
    v325 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v321, v322, v323, v324, v22, byte_2140A2798, v23, v23, v325, v318, v319, v320);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v318;
  *a5 += v319;
  *v432 += v320;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v326 = 12;
  }
  else {
    uint64_t v326 = 16;
  }
  uint64_t v327 = v434[148];
  unsigned int v328 = v434[149];
  if (v328 >= v327)
  {
    uint64_t v329 = 0;
    if ((int)v327 > 0) {
      v326 += 4 * (v327 - 1) + 4;
    }
    uint64_t v330 = v326 + 4 * (v328 - v327);
  }
  else
  {
    uint64_t v329 = 4 * v327;
    uint64_t v330 = v326;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1031, (DgnString *)&v437);
  if (v438) {
    v335 = (char *)v437;
  }
  else {
    v335 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v331, v332, v333, v334, v22, byte_2140A2798, v23, v23, v335, v330, v326, v329);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v330;
  *a5 += v326;
  *v432 += v329;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v336 = 12;
  }
  else {
    uint64_t v336 = 16;
  }
  uint64_t v337 = v434[152];
  unsigned int v338 = v434[153];
  if (v338 >= v337)
  {
    uint64_t v339 = 0;
    if ((int)v337 > 0) {
      uint64_t v336 = (v336 | 2) + 2 * (v337 - 1);
    }
    uint64_t v340 = v336 + 2 * (v338 - v337);
  }
  else
  {
    uint64_t v339 = 2 * v337;
    uint64_t v340 = v336;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1034, (DgnString *)&v437);
  if (v438) {
    v345 = (char *)v437;
  }
  else {
    v345 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v341, v342, v343, v344, v22, byte_2140A2798, v23, v23, v345, v340, v336, v339);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v340;
  *a5 += v336;
  *v432 += v339;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1035, (DgnString *)&v437);
  if (v438) {
    v350 = (char *)v437;
  }
  else {
    v350 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v346, v347, v348, v349, v22, byte_2140A2798, v23, v23, v350, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 8;
  *a5 += 8;
  uint64_t v351 = CombineTable::sizeObject((uint64_t)(v434 + 126), 0);
  uint64_t v352 = CombineTable::sizeObject((uint64_t)(v434 + 126), 1);
  uint64_t v353 = CombineTable::sizeObject((uint64_t)(v434 + 126), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1037, (DgnString *)&v437);
  if (v438) {
    v358 = (char *)v437;
  }
  else {
    v358 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v354, v355, v356, v357, v22, byte_2140A2798, v23, v23, v358, v351, v352, v353);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v351;
  *a5 += v352;
  *v432 += v353;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1039, (DgnString *)&v437);
  if (v438) {
    v363 = (char *)v437;
  }
  else {
    v363 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v359, v360, v361, v362, v22, byte_2140A2798, v23, v23, v363, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v437);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1040, (DgnString *)&v437);
  if (v438) {
    v368 = (char *)v437;
  }
  else {
    v368 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v364, v365, v366, v367, v22, byte_2140A2798, v23, v23, v368, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  uint64_t v369 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 156), 0);
  uint64_t v370 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 156), 1);
  unint64_t v437 = 0;
  uint64_t v438 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1041, (DgnString *)&v437);
  if (v438) {
    v375 = (char *)v437;
  }
  else {
    v375 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v371, v372, v373, v374, v22, byte_2140A2798, v23, v23, v375, v369, v370, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v369;
  *a5 += v370;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v376 = 12;
  }
  else {
    uint64_t v376 = 16;
  }
  uint64_t v377 = v434[162];
  unsigned int v378 = v434[163];
  if (v378 >= v377)
  {
    uint64_t v379 = 0;
    if ((int)v377 > 0) {
      v376 += 4 * (v377 - 1) + 4;
    }
    uint64_t v380 = v376 + 4 * (v378 - v377);
  }
  else
  {
    uint64_t v379 = 4 * v377;
    uint64_t v380 = v376;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1043, (DgnString *)&v437);
  if (v438) {
    v385 = (char *)v437;
  }
  else {
    v385 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v381, v382, v383, v384, v22, byte_2140A2798, v23, v23, v385, v380, v376, v379);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v380;
  *a5 += v376;
  *v432 += v379;
  uint64_t v386 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 172), 0);
  uint64_t v387 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 172), 1);
  unint64_t v437 = 0;
  uint64_t v438 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1044, (DgnString *)&v437);
  if (v438) {
    v392 = (char *)v437;
  }
  else {
    v392 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v388, v389, v390, v391, v22, byte_2140A2798, v23, v23, v392, v386, v387, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v386;
  *a5 += v387;
  uint64_t v393 = sizeObject<AlignedArray<unsigned char>>((uint64_t)(v434 + 164), 0);
  uint64_t v394 = sizeObject<AlignedArray<unsigned char>>((uint64_t)(v434 + 164), 1);
  unint64_t v437 = 0;
  uint64_t v438 = 0;
  LODWORD(v439) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1046, (DgnString *)&v437);
  if (v438) {
    v399 = (char *)v437;
  }
  else {
    v399 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v395, v396, v397, v398, v22, byte_2140A2798, v23, v23, v399, v393, v394, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v393;
  *a5 += v394;
  uint64_t v400 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 168), 0);
  uint64_t v401 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v434 + 168), 1);
  unint64_t v437 = 0;
  uint64_t v438 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v437);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1047, (DgnString *)&v437);
  if (v438) {
    v406 = (char *)v437;
  }
  else {
    v406 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v402, v403, v404, v405, v22, byte_2140A2798, v23, v23, v406, v400, v401, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v400;
  *a5 += v401;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1048, (DgnString *)&v437);
  if (v438) {
    v411 = (char *)v437;
  }
  else {
    v411 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v407, v408, v409, v410, v22, byte_2140A2798, v23, v23, v411, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v412 = 12;
  }
  else {
    uint64_t v412 = 16;
  }
  uint64_t v413 = v434[178];
  unsigned int v414 = v434[179];
  if (v414 >= v413)
  {
    uint64_t v415 = 0;
    if ((int)v413 > 0) {
      uint64_t v412 = (v412 | 2) + 2 * (v413 - 1);
    }
    uint64_t v416 = v412 + 2 * (v414 - v413);
  }
  else
  {
    uint64_t v415 = 2 * v413;
    uint64_t v416 = v412;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1050, (DgnString *)&v437);
  if (v438) {
    v421 = (char *)v437;
  }
  else {
    v421 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v417, v418, v419, v420, v22, byte_2140A2798, v23, v23, v421, v416, v412, v415);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += v416;
  *a5 += v412;
  *v432 += v415;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1052, (DgnString *)&v437);
  if (v438) {
    v426 = (char *)v437;
  }
  else {
    v426 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v422, v423, v424, v425, v22, byte_2140A2798, v23, v23, v426, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v437);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 1053, (DgnString *)&v437);
  if (v438) {
    v431 = (char *)v437;
  }
  else {
    v431 = byte_2140A2798;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v427, v428, v429, v430, v433, byte_2140A2798, (35 - v433), (35 - v433), v431, *a4, *a5, *v432);
  DgnString::~DgnString((DgnString *)&v437);
}

void sub_213EF32FC(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t sizeObject<BinaryIntScale>(uint64_t a1, int a2)
{
  int v10 = 0;
  uint64_t v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 12;
  }
  else {
    uint64_t v5 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      unint64_t v8 = v7 + 1;
      do
        v5 += sizeObject(*(void *)a1 + 4 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2) {
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  return v5;
}

uint64_t sizeObject<AlignedArray<short>>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  int v10 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  else {
    uint64_t v3 = 16;
  }
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v2 = v3;
      goto LABEL_11;
    }
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 < 1)
    {
      uint64_t v2 = v3;
      if (a2) {
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v7 = v6 + 1;
      uint64_t v2 = v3;
      do
        v2 += sizeObject<unsigned short>(*(void *)a1 + 24 * (v7-- - 2), a2) + 4;
      while (v7 > 1);
      if (a2) {
        goto LABEL_11;
      }
    }
    v2 += (v3 + 4) * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
LABEL_11:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_213EF35A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<AlignedArray<unsigned char>>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  int v10 = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  else {
    uint64_t v3 = 16;
  }
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v2 = v3;
      goto LABEL_11;
    }
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 < 1)
    {
      uint64_t v2 = v3;
      if (a2) {
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v7 = v6 + 1;
      uint64_t v2 = v3;
      do
        v2 += sizeObject<unsigned char>(*(void *)a1 + 24 * (v7-- - 2), a2) + 4;
      while (v7 > 1);
      if (a2) {
        goto LABEL_11;
      }
    }
    v2 += (v3 + 4) * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
  }
LABEL_11:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_213EF36A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PelMgr::getModelData(PelMgr *this, unsigned int a2)
{
  return *((void *)this + 29) + *((unsigned int *)this + 62) + *(unsigned int *)(*((void *)this + 32) + 4 * a2);
}

int *readSharedObject<unsigned char>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v19 = 0;
  uint64_t result = (int *)readObject((uint64_t)a1, &v19, a3);
  unsigned int v13 = v19;
  if (v19)
  {
    uint64_t result = (int *)DgnSharedMemStream::readSharedBytes(a1, v19, v7, v8, v9, v10, v11, v12);
    uint64_t v14 = result;
    unsigned int v15 = v19;
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      uint64_t result = *(int **)a2;
      if (*(void *)a2) {
        uint64_t result = (int *)MemChunkFree(result, 0);
      }
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = v15;
    *(void *)a2 = v14;
    if (v13 + 3 >= 4)
    {
      int v16 = 0;
      uint64_t v17 = (v13 + 3) >> 2;
      do
      {
        int v18 = *v14++;
        v16 ^= v18;
        --v17;
      }
      while (v17);
    }
    else
    {
      int v16 = 0;
    }
    *a3 ^= v16;
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
    {
      uint64_t result = *(int **)a2;
      if (*(void *)a2) {
        uint64_t result = (int *)MemChunkFree(result, 0);
      }
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)a2 = 0;
  }
  return result;
}

void PelMgr::packRawMixtureComponent(uint64_t result, uint64_t a2, void *a3, void *a4, double a5)
{
  switch(*(_DWORD *)(result + 12))
  {
    case 0:
      PelMgr::packMulTableRawMixtureComponent(result, a2, a3, a4);
      break;
    case 1:
      PelMgr::packPackedIntRawMixtureComponent(result, a2, (int **)a3, (unsigned int **)a4);
      break;
    case 2:
      PelMgr::packFloatRawMixtureComponent(result, a2, a3, a4, a5);
      break;
    case 3:
      PelMgr::packQuantPerDimRawMixtureComponent(result, (unsigned char *)a2, (int **)a3, (int **)a4);
      break;
    default:
      return;
  }
}

uint64_t PelMgr::packRawMixtureComponent(uint64_t a1, float *a2, char a3, unsigned int **a4, int **a5, char a6, double a7, double a8, double a9, double a10)
{
  int v10 = *(_DWORD *)(a1 + 12);
  if (v10 == 1) {
    return PelMgr::packPackedIntRawMixtureComponent(a1, (uint64_t)a2, a3, (uint64_t *)a4, a5, a6);
  }
  if (v10 == 2) {
    return PelMgr::packFloatRawMixtureComponent(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return a1;
}

BOOL PelMgr::getComponentByIndex(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned int v6 = *(_DWORD *)(a1 + 136);
  if (v6 > a2)
  {
    uint64_t v7 = *(unsigned __int16 *)(*(void *)(a1 + 432) + 2 * a2);
    PelMgr::unpackRawMixtureComponent(a1, *(void *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(void *)(a1 + 256) + 4 * v7)+ *(_DWORD *)(a1 + 148) * (a2 - *(_DWORD *)(*(void *)(a1 + 272) + 4 * v7)), a3, a4, a5);
  }
  return v6 > a2;
}

BOOL PelMgr::getComponentByIndex(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = *(_DWORD *)(a1 + 136);
  if (v5 > a2)
  {
    uint64_t v6 = *(unsigned __int16 *)(*(void *)(a1 + 432) + 2 * a2);
    PelMgr::unpackRawMixtureComponent(a1, (float *)(*(void *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(void *)(a1 + 256) + 4 * v6)+ *(_DWORD *)(a1 + 148) * (a2 - *(_DWORD *)(*(void *)(a1 + 272) + 4 * v6))), a3, a4);
  }
  return v5 > a2;
}

void PelMgr::unpackRawMixtureComponent(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  switch(*(_DWORD *)(result + 12))
  {
    case 0:
      PelMgr::unpackMulTableRawMixtureComponent(result, a2, a3, a4);
      break;
    case 1:
      PelMgr::unpackPackedIntRawMixtureComponent(result, a2, a3, a4);
      break;
    case 2:
      PelMgr::unpackFloatRawMixtureComponent(result, a2, a3, a4, a5);
      break;
    case 3:
      PelMgr::unpackQuantPerDimRawMixtureComponent(result, a2, a3, a4);
      break;
    default:
      return;
  }
}

unint64_t PelMgr::unpackRawMixtureComponent(unint64_t result, float *a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(result + 12);
  if (v4 == 1) {
    return PelMgr::unpackPackedIntRawMixtureComponent(result, (unsigned __int8 *)a2, a3, a4);
  }
  if (v4 == 2) {
    return PelMgr::unpackFloatRawMixtureComponent(result, a2, a3, a4);
  }
  return result;
}

void PelMgr::unpackGenoneComponent(unint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
}

unint64_t PelMgr::unpackGenoneComponent(unint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  return PelMgr::unpackRawMixtureComponent(a1, (float *)(*(void *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(void *)(a1 + 256) + 4 * a2)+ (*(_DWORD *)(a1 + 148) * a3)), a4, a5);
}

void PelMgr::packGenoneComponent(uint64_t a1, unsigned int a2, int a3, void *a4, void *a5, double a6)
{
}

uint64_t PelMgr::packGenoneComponent(uint64_t a1, unsigned int a2, int a3, unsigned int **a4, int **a5, char a6, double a7, double a8, double a9, double a10)
{
  return PelMgr::packRawMixtureComponent(a1, (float *)(*(void *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ *(unsigned int *)(*(void *)(a1 + 256) + 4 * a2)+ (*(_DWORD *)(a1 + 148) * a3)), a3, a4, a5, a6, a7, a8, a9, a10);
}

void PelMgr::unpackPelMixtureComponent(unint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
}

unint64_t PelMgr::unpackPelMixtureComponent(unint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  return PelMgr::unpackRawMixtureComponent(a1, (float *)(*(void *)(a1 + 232)+ *(unsigned int *)(a1 + 248)+ (*(_DWORD *)(a1 + 148) * a3)+ *(unsigned int *)(*(void *)(a1 + 256)+ 4 * *(unsigned __int16 *)(*(void *)(a1 + 288) + 2 * a2))), a4, a5);
}

void (***PelMgr::savePelMgrBinary(PelMgr *this, DFile *a2, DFileChecksums *a3, int a4, DgnSharedMemStream *a5))(void)
{
  uint64_t v8 = a5;
  if (a2) {
    uint64_t v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x2Au, a4, "MRMPB!? ", 24, 24);
  }
  unsigned int v32 = 0;
  writeObject((uint64_t)v8, (int *)this + 2, &v32);
  int v9 = 1;
  if (*((_DWORD *)this + 4) == 1) {
    int v10 = 2;
  }
  else {
    int v10 = 1;
  }
  int v31 = v10;
  writeObject((uint64_t)v8, &v31, &v32);
  uint64_t v11 = *((int *)this + 3);
  if (v11 <= 3) {
    int v9 = dword_2140A2860[v11];
  }
  int v30 = v9;
  writeObject((uint64_t)v8, &v30, &v32);
  writeObject((uint64_t)v8, (int *)this + 5, &v32);
  writeObject((uint64_t)v8, (int *)this + 32, &v32);
  uint64_t v12 = (int *)((char *)this + 132);
  int v16 = (char *)this + 272;
  uint64_t v17 = (char *)this + 288;
  int v18 = (char *)this + 344;
  unsigned int v19 = (char *)this + 360;
  uint64_t v20 = (char *)this + 376;
  uint64_t v21 = (unsigned __int8 *)this + 392;
  uint64_t v22 = (char *)this + 400;
  uint64_t v23 = (char *)this + 416;
  uint64_t v24 = (int *)((char *)this + 152);
  uint64_t v25 = (int *)((char *)this + 160);
  uint64_t v26 = (char *)this + 184;
  uint64_t v27 = (int *)((char *)this + 164);
  uint64_t v28 = (char *)this + 168;
  uint64_t v29 = (int *)((char *)this + 156);
  if (a2)
  {
    writeObject((uint64_t)v8, v12, &v32);
    writeObject((uint64_t)v8, (int *)this + 34, &v32);
    writeObject((uint64_t)v8, (int *)this + 35, &v32);
    writeObject((uint64_t)v8, (int *)this + 36, &v32);
    writeObject((uint64_t)v8, (int *)this + 37, &v32);
    AlignedArray<unsigned char>::writeObject((uint64_t)this + 232, (uint64_t)v8, &v32);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 256, &v32);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)v16, &v32);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)v17, &v32);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)v18, &v32);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)v19, &v32);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)v20, &v32);
    writeObject((uint64_t)v8, v21, &v32);
    writeObject<DgnString>((uint64_t)v8, (uint64_t)v22, &v32);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)v23, &v32);
    writeObject((uint64_t)v8, v24, &v32);
    writeObject((uint64_t)v8, v25, &v32);
    writeObject<DgnArray<DgnPrimArray<int>>>((uint64_t)v8, (uint64_t)v26, &v32);
    writeObject((uint64_t)v8, v27, &v32);
    writeObject<BinaryIntScale>((uint64_t)v8, (uint64_t)v28, &v32);
    writeObject((uint64_t)v8, v29, &v32);
    writeObject<AlignedArray<short>>((uint64_t)v8, (uint64_t)this + 200, &v32);
    FrameDecisionTree::writeObject((uint64_t)this + 528, (uint64_t)v8, &v32);
    writeObject((uint64_t)v8, (uint64_t)this + 568, &v32);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 584, &v32);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 600, &v32);
    writeObject((uint64_t)v8, (int *)this + 155, &v32);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 624, &v32);
    writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 640, &v32);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 688, &v32);
    writeObject<AlignedArray<unsigned char>>((uint64_t)v8, (uint64_t)this + 656, &v32);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 672, &v32);
    writeObject((uint64_t)v8, (int *)this + 6, &v32);
    writeObject((uint64_t)v8, (int *)this + 7, &v32);
    writeObject((uint64_t)v8, (int *)this + 8, &v32);
    writeObject((uint64_t)v8, (int *)this + 9, &v32);
    writeObject((uint64_t)v8, (int *)this + 10, &v32);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 48, &v32);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 64, &v32);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 80, &v32);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 96, &v32);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 112, &v32);
    writeObjectChecksum((uint64_t)v8, (int *)&v32);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x2Au, v32);
    return DgnDelete<DgnStream>((void (***)(void))v8);
  }
  else
  {
    writeObject((uint64_t)a5, v12, &v32);
    writeObject((uint64_t)a5, (int *)this + 34, &v32);
    writeObject((uint64_t)a5, (int *)this + 35, &v32);
    writeObject((uint64_t)a5, (int *)this + 36, &v32);
    writeObject((uint64_t)a5, (int *)this + 37, &v32);
    AlignedArray<unsigned char>::writeSharedObject((uint64_t)this + 232, a5, &v32);
    writeSharedObject<unsigned int>(a5, (uint64_t)this + 256, &v32);
    writeSharedObject<unsigned int>(a5, (uint64_t)v16, &v32);
    writeObject<unsigned short>((uint64_t)a5, (uint64_t)v17, &v32);
    writeSharedObject<unsigned char>(a5, (uint64_t)v18, &v32);
    writeSharedObject<unsigned int>(a5, (uint64_t)v19, &v32);
    writeSharedObject<short>(a5, (uint64_t)v20, &v32);
    writeObject((uint64_t)a5, v21, &v32);
    writeObject<DgnString>((uint64_t)a5, (uint64_t)v22, &v32);
    writeObject<unsigned int>((uint64_t)a5, (uint64_t)v23, &v32);
    writeObject((uint64_t)a5, v24, &v32);
    writeObject((uint64_t)a5, v25, &v32);
    writeObject<DgnArray<DgnPrimArray<int>>>((uint64_t)a5, (uint64_t)v26, &v32);
    writeObject((uint64_t)a5, v27, &v32);
    writeObject<BinaryIntScale>((uint64_t)a5, (uint64_t)v28, &v32);
    writeObject((uint64_t)a5, v29, &v32);
    writeObject<AlignedArray<short>>((uint64_t)a5, (uint64_t)this + 200, &v32);
    FrameDecisionTree::writeObject((uint64_t)this + 528, (uint64_t)a5, &v32);
    writeSharedObject(a5, (PelMgr *)((char *)this + 568), &v32);
    writeSharedObject<unsigned int>(a5, (uint64_t)this + 584, &v32);
    writeSharedObject<short>(a5, (uint64_t)this + 600, &v32);
    writeObject((uint64_t)a5, (int *)this + 155, &v32);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)a5, (uint64_t)this + 624, &v32);
    writeObject<unsigned int>((uint64_t)a5, (uint64_t)this + 640, &v32);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)a5, (uint64_t)this + 688, &v32);
    writeObject<AlignedArray<unsigned char>>((uint64_t)a5, (uint64_t)this + 656, &v32);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)a5, (uint64_t)this + 672, &v32);
    writeObject((uint64_t)a5, (int *)this + 6, &v32);
    writeObject((uint64_t)a5, (int *)this + 7, &v32);
    writeObject((uint64_t)a5, (int *)this + 8, &v32);
    writeObject((uint64_t)a5, (int *)this + 9, &v32);
    writeObject((uint64_t)a5, (int *)this + 10, &v32);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 48, &v32);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 64, &v32);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 80, &v32);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 96, &v32);
    writeSharedObject<unsigned char>(a5, (uint64_t)this + 112, &v32);
    writeObject((uint64_t)v8, (int *)this + 184, &v32);
    return (void (***)(void))writeObjectChecksum((uint64_t)v8, (int *)&v32);
  }
}

uint64_t writeObject<DgnArray<DgnPrimArray<int>>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<DgnPrimArray<unsigned int>>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<BinaryIntScale>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject(a1, (int *)(*(void *)a2 + v7), a3);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<AlignedArray<short>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = AlignedArray<short>::writeObject(*(void *)a2 + v7, a1, a3);
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<AlignedArray<unsigned char>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = AlignedArray<unsigned char>::writeObject(*(void *)a2 + v7, a1, a3);
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

char *writeSharedObject<unsigned char>(DgnSharedMemStream *a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v18 = *(_DWORD *)(a2 + 8);
  uint64_t result = (char *)writeObject((uint64_t)a1, (int *)&v18, a3);
  unsigned int v12 = v18;
  if (v18)
  {
    uint64_t result = (char *)DgnSharedMemStream::writeSharedBytes(a1, *(const char **)a2, v18, v7, v8, v9, v10, v11);
    if (result)
    {
      unsigned int v13 = result;
      unsigned int v14 = v18;
      if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
      {
        uint64_t result = *(char **)a2;
        if (*(void *)a2) {
          uint64_t result = (char *)MemChunkFree(result, 0);
        }
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)a2 = v13;
    }
    else
    {
      unsigned int v13 = *(const char **)a2;
    }
    if (v12 + 3 >= 4)
    {
      int v15 = 0;
      uint64_t v16 = (v12 + 3) >> 2;
      do
      {
        int v17 = *(_DWORD *)v13;
        v13 += 4;
        v15 ^= v17;
        --v16;
      }
      while (v16);
    }
    else
    {
      int v15 = 0;
    }
    *a3 ^= v15;
  }
  return result;
}

uint64_t PelMgr::savePelMgrText(PelMgr *this, DFile *a2, int a3, double a4)
{
  uint64_t v7 = *((unsigned int *)this + 33);
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  if (v7)
  {
    v170[0] = 0;
    HIDWORD(v18pthread_rwlock_init((pthread_rwlock_t *)this, 0) = realloc_array(0, v170, 4 * v7, 0, 0, 1) >> 2;
    uint64_t v179 = v170[0];
  }
  LODWORD(v18pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v7;
  int v8 = *((_DWORD *)this + 4);
  if (v8)
  {
    LODWORD(v9) = 0;
    uint64_t v177 = 0;
    uint64_t v178 = 0;
  }
  else
  {
    uint64_t v9 = *((unsigned int *)this + 33);
    uint64_t v177 = 0;
    uint64_t v178 = 0;
    if (!v9)
    {
      int v8 = 0;
      LODWORD(v178) = 0;
      goto LABEL_12;
    }
    v170[0] = 0;
    HIDWORD(v178) = realloc_array(0, v170, 4 * v9, 0, 0, 1) >> 2;
    uint64_t v177 = v170[0];
    int v8 = *((_DWORD *)this + 4);
  }
  LODWORD(v178) = v9;
  if (v8 != 1)
  {
LABEL_12:
    LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
    v175 = 0;
    uint64_t v176 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = *((unsigned int *)this + 38);
  v175 = 0;
  uint64_t v176 = 0;
  if (!v10)
  {
    uint64_t v173 = 0;
    uint64_t v174 = 0;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
LABEL_14:
    int v12 = *((_DWORD *)this + 33);
    int v11 = *((_DWORD *)this + 34);
    int v13 = v12 * v11;
    if (v12 * v11)
    {
      v170[0] = 0;
      HIDWORD(v174) = realloc_array(0, v170, (v12 * v11), 0, 0, 1);
      uint64_t v173 = v170[0];
      int v11 = *((_DWORD *)this + 34);
      unsigned int v14 = HIDWORD(v172);
    }
    else
    {
      unsigned int v14 = 0;
    }
    LODWORD(v174) = v13;
    unsigned int v17 = *((_DWORD *)this + 38) * v11;
    if (v14 < v17)
    {
      v170[0] = 0;
      HIDWORD(v172) = realloc_array(v171, v170, 4 * v17, 4 * v172, 4 * v172, 1) >> 2;
      uint64_t v171 = v170[0];
    }
    LODWORD(v172) = v17;
    goto LABEL_23;
  }
  v170[0] = 0;
  HIDWORD(v176) = realloc_array(0, v170, 4 * v10, 0, 0, 1) >> 2;
  v175 = v170[0];
  int v8 = *((_DWORD *)this + 4);
LABEL_13:
  LODWORD(v176) = v10;
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  if (v8) {
    goto LABEL_14;
  }
  int v15 = *((_DWORD *)this + 34) * *((_DWORD *)this + 33);
  int v16 = 2 * v15;
  if (2 * v15)
  {
    v170[0] = 0;
    HIDWORD(v174) = realloc_array(0, v170, (2 * v15), 0, 0, 1);
    uint64_t v173 = v170[0];
  }
  LODWORD(v174) = v16;
LABEL_23:
  unsigned int v18 = *((_DWORD *)this + 35);
  if (v18)
  {
    int v19 = 0;
    int v20 = 0;
    for (unsigned int i = 0; i < v18; ++i)
    {
      int v22 = *(_DWORD *)(*((void *)this + 34) + 4 * (unsigned __int16)i);
      int v23 = *(_DWORD *)(*((void *)this + 34) + 4 * (unsigned __int16)i + 4);
      int v24 = v23 - v22;
      if (v23 != v22)
      {
        int v25 = 0;
        uint64_t v26 = *((void *)this + 29)
            + *((unsigned int *)this + 62)
            + *(unsigned int *)(*((void *)this + 32) + 4 * (unsigned __int16)i);
        int v27 = *((_DWORD *)this + 4);
        do
        {
          uint64_t v28 = (float *)(v26 + (*((_DWORD *)this + 37) * v25));
          if (v27) {
            PelMgr::unpackRawMixtureComponent((unint64_t)this, v28, (uint64_t)&v179, (uint64_t)&v175);
          }
          else {
            PelMgr::unpackRawMixtureComponent((unint64_t)this, (uint64_t)v28, (uint64_t)&v179, (uint64_t)&v177, a4);
          }
          if (*((_DWORD *)this + 33))
          {
            unint64_t v29 = 0;
            int v30 = v19;
            do
            {
              int v19 = v30 + 1;
              v173[v30] = v179[v29];
              if (!*((_DWORD *)this + 4))
              {
                v173[v19] = v177[v29];
                int v19 = v30 + 2;
              }
              ++v29;
              int v30 = v19;
            }
            while (v29 < *((unsigned int *)this + 33));
          }
          int v27 = *((_DWORD *)this + 4);
          if (v27 == 1 && *((_DWORD *)this + 38))
          {
            unint64_t v31 = 0;
            unsigned int v32 = v175;
            uint64_t v33 = v171;
            do
            {
              *((_DWORD *)v33 + (v20 + v31)) = v32[v31];
              ++v31;
            }
            while (v31 < *((unsigned int *)this + 38));
            v20 += v31;
          }
          ++v25;
        }
        while (v25 != v24);
        unsigned int v18 = *((_DWORD *)this + 35);
      }
    }
  }
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 0x26u, 0);
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v170, sMCT_Versions, (uint64_t)&v168, v34, v35, v36, v37, v38);
  DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureComponentText", (void *)(v168 + 8 * (v169 - 1)));
  int v39 = *((_DWORD *)this + 4);
  if (v39)
  {
    if (v39 != 1) {
      goto LABEL_48;
    }
    uint64_t v40 = "MixtureOfInverseCovarianceMatrices";
  }
  else
  {
    uint64_t v40 = "DiagonalCovarianceMatrix";
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v170, "PrecisionModelingType", v40);
LABEL_48:
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "ModelDimension", *((unsigned int *)this + 33));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfMixtureComponents", *((unsigned int *)this + 34));
  uint64_t v41 = *((int *)this + 3);
  if (v41 <= 3) {
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v170, "ComponentScoringType", off_2641F2620[v41]);
  }
  if (!*((_DWORD *)this + 4)) {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "MinimumScaledDev", *((unsigned int *)this + 32));
  }
  if (*((_DWORD *)this + 3) == 3)
  {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumMeanValueQuantLevels", *((unsigned int *)this + 6));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumDevValueQuantLevels", *((unsigned int *)this + 7));
  }
  DgnArray<DgnString>::DgnArray(v165, 4);
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  uint64_t v161 = 0;
  unint64_t v42 = realloc_array(0, &v161, 0x10uLL, 0, 0, 1);
  uint64_t v163 = v161;
  LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 4;
  HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v42 >> 2;
  DgnString::operator=(*(DgnString **)v165, "TableName");
  *uint64_t v163 = 0;
  DgnString::operator=((DgnString *)(*(void *)v165 + 16), "Index1");
  v163[1] = 3;
  DgnString::operator=((DgnString *)(*(void *)v165 + 32), "Index2");
  v163[2] = 3;
  DgnString::operator=((DgnString *)(*(void *)v165 + 48), "Value1");
  v163[3] = 3;
  if (*((_DWORD *)this + 4))
  {
    unsigned int v43 = -1;
  }
  else
  {
    DgnString::DgnString((DgnString *)&v161, "Value2");
    unsigned int v44 = v166;
    if (v166 == v167)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v165, 1, 1);
      unsigned int v44 = v166;
    }
    DgnString::DgnString((DgnString *)(*(void *)v165 + 16 * v44), (const DgnString *)&v161);
    ++v166;
    DgnString::~DgnString((DgnString *)&v161);
    int v45 = v164;
    if (v164 == HIDWORD(v164))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v163, 1, 1);
      int v45 = v164;
    }
    v163[v45] = 3;
    LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v45 + 1;
    unsigned int v43 = 4;
  }
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
  if (*((_DWORD *)this + 3) == 3)
  {
    PelMgr::saveQuantPerDimTableText((uint64_t)this, (DgnTextFileWriter *)v170, 0, 1u, 2u, 3u, v43, "MeanQuantTable", *((_DWORD *)this + 6), (void *)this + 6);
    PelMgr::saveQuantPerDimTableText((uint64_t)this, (DgnTextFileWriter *)v170, 0, 1u, 2u, 3u, v43, "DevQuantTable", *((_DWORD *)this + 7), (void *)this + 8);
  }
  unsigned int v46 = *((_DWORD *)this + 34);
  if (v46)
  {
    int v47 = 0;
    unsigned int v48 = 0;
    unsigned int v49 = *((_DWORD *)this + 33);
    do
    {
      if (v49)
      {
        for (unsigned int j = 0; j < v49; ++j)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "Component");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v48);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, j);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 3u, v173[v47]);
          if (*((_DWORD *)this + 4))
          {
            ++v47;
          }
          else
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, v43, v173[v47 + 1]);
            v47 += 2;
          }
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
          unsigned int v49 = *((_DWORD *)this + 33);
        }
        unsigned int v46 = *((_DWORD *)this + 34);
      }
      ++v48;
    }
    while (v48 < v46);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
  DgnArray<DgnString>::releaseAll((uint64_t)v165);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  if (*((_DWORD *)this + 4) == 1)
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 5u, a3);
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v170, sBMT_Versions, (uint64_t)&v168, v51, v52, v53, v54, v55);
    DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureComponentBasisMatrixText", (void *)(v168 + 8 * (v169 - 1)));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "ModelDimension", *((unsigned int *)this + 33));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfBasisMatrices", *((unsigned int *)this + 38));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "BMTIntScale", 1 << *((_DWORD *)this + 40));
    DgnArray<DgnString>::DgnArray(v165, 4);
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    uint64_t v161 = 0;
    unint64_t v56 = realloc_array(0, &v161, 0x10uLL, 0, 0, 1);
    uint64_t v163 = v161;
    LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 4;
    HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v56 >> 2;
    DgnString::operator=(*(DgnString **)v165, "BasisMatrixIndex");
    *uint64_t v163 = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 16), "RowIndex");
    v163[1] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 32), "ColumnIndex");
    v163[2] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 48), "Value");
    v163[3] = 1;
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
    unint64_t v57 = *((unsigned int *)this + 38);
    if (v57)
    {
      unint64_t v58 = 0;
      unint64_t v59 = *((unsigned int *)this + 33);
      unint64_t v60 = v59;
      do
      {
        if (v60)
        {
          unint64_t v61 = 0;
          do
          {
            if (v59)
            {
              for (unint64_t k = 0; k < v59; ++k)
              {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 0, v58);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v61);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, k);
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, *(_DWORD *)(*(void *)(*(void *)(*((void *)this + 23) + 16 * v58) + 16 * v61) + 4 * k));
                DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
                unint64_t v59 = *((unsigned int *)this + 33);
              }
            }
            ++v61;
          }
          while (v61 < v59);
          unint64_t v57 = *((unsigned int *)this + 38);
          unint64_t v60 = v59;
        }
        ++v58;
      }
      while (v58 < v57);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
    DgnArray<DgnString>::releaseAll((uint64_t)v165);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 2u, 0);
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v170, sBCT_Versions, (uint64_t)&v168, v63, v64, v65, v66, v67);
    DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureComponentBasisCoefficientText", (void *)(v168 + 8 * (v169 - 1)));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "ModelDimension", *((unsigned int *)this + 33));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfMixtureComponents", *((unsigned int *)this + 34));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfBasisMatrices", *((unsigned int *)this + 38));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "BCTIntScale", 1 << *((_DWORD *)this + 41));
    DgnArray<DgnString>::DgnArray(v165, 3);
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    uint64_t v161 = 0;
    unint64_t v68 = realloc_array(0, &v161, 0xCuLL, 0, 0, 1);
    uint64_t v163 = v161;
    LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 3;
    HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v68 >> 2;
    DgnString::operator=(*(DgnString **)v165, "ComponentIndex");
    *uint64_t v163 = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 16), "BasisMatrixIndex");
    v163[1] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 32), "BasisCoefficient");
    v163[2] = 1;
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
    unsigned int v69 = *((_DWORD *)this + 34);
    if (v69)
    {
      unsigned int v70 = 0;
      unsigned int v71 = *((_DWORD *)this + 38);
      unsigned int v72 = v71;
      do
      {
        if (v72)
        {
          unsigned int v73 = 0;
          do
          {
            if (*((_DWORD *)v171 + v73 + v70 * v72))
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 0, v70);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v73);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, *((_DWORD *)v171 + v73 + v70 * *((_DWORD *)this + 38)));
              DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
              unsigned int v71 = *((_DWORD *)this + 38);
            }
            ++v73;
            unsigned int v72 = v71;
          }
          while (v73 < v71);
          unsigned int v69 = *((_DWORD *)this + 34);
          unsigned int v72 = v71;
        }
        ++v70;
      }
      while (v70 < v69);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
    DgnArray<DgnString>::releaseAll((uint64_t)v165);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  }
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 0x27u, a3);
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v170, sMGT_Versions, (uint64_t)&v168, v74, v75, v76, v77, v78);
  DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureGenoneText", (void *)(v168 + 8 * (v169 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfMixtureComponents", *((unsigned int *)this + 34));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfGenones", *((unsigned int *)this + 35));
  DgnArray<DgnString>::DgnArray(v165, 3);
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  uint64_t v161 = 0;
  unint64_t v79 = realloc_array(0, &v161, 0xCuLL, 0, 0, 1);
  uint64_t v163 = v161;
  LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 3;
  HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v79 >> 2;
  DgnString::operator=(*(DgnString **)v165, "GenId");
  *uint64_t v163 = 3;
  DgnString::operator=((DgnString *)(*(void *)v165 + 16), "StartComponentIndex");
  v163[1] = 3;
  DgnString::operator=((DgnString *)(*(void *)v165 + 32), "NumberOfComponents");
  v163[2] = 3;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
  if (*((_DWORD *)this + 35))
  {
    unint64_t v80 = 0;
    do
    {
      uint64_t v81 = (int *)(*((void *)this + 34) + 4 * (unsigned __int16)v80);
      int v83 = *v81;
      int v82 = v81[1];
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 0, v80);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, *(_DWORD *)(*((void *)this + 34) + 4 * v80));
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, v82 - v83);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
      ++v80;
    }
    while (v80 < *((unsigned int *)this + 35));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
  DgnArray<DgnString>::releaseAll((uint64_t)v165);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)a2, 0x2Bu, a3);
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v170, sMPT_Versions, (uint64_t)&v168, v84, v85, v86, v87, v88);
  DgnTextFileWriter::setFileType((uint64_t)v170, "MixturePelText", (void *)(v168 + 8 * (v169 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfGenones", *((unsigned int *)this + 35));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfPels", *((unsigned int *)this + 36));
  if (*((unsigned char *)this + 392)) {
    unsigned int v89 = 0;
  }
  else {
    unsigned int v89 = *((_DWORD *)this + 102);
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfPelStatClasses", v89);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "AdaptationAccumulatorScale", *((unsigned int *)this + 5));
  DgnArray<DgnString>::DgnArray(v165, 5);
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  uint64_t v161 = 0;
  unint64_t v90 = realloc_array(0, &v161, 0x14uLL, 0, 0, 1);
  int v157 = a3;
  unsigned int v158 = a2;
  uint64_t v163 = v161;
  LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 5;
  HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v90 >> 2;
  DgnString::operator=(*(DgnString **)v165, "PelId");
  *uint64_t v163 = 3;
  DgnString::operator=((DgnString *)(*(void *)v165 + 16), "GenId");
  v163[1] = 3;
  DgnString::operator=((DgnString *)(*(void *)v165 + 32), "GenoneComponentIndex");
  v163[2] = 3;
  DgnString::operator=((DgnString *)(*(void *)v165 + 48), "MixtureWeight");
  v163[3] = 3;
  DgnString::operator=((DgnString *)(*(void *)v165 + 64), "BackoffPelId");
  v163[4] = 1;
  if (*((unsigned char *)this + 392))
  {
    unsigned int v91 = -1;
  }
  else
  {
    DgnString::DgnString((DgnString *)&v161, "StatClassName");
    unsigned int v92 = v166;
    if (v166 == v167)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v165, 1, 1);
      unsigned int v92 = v166;
    }
    DgnString::DgnString((DgnString *)(*(void *)v165 + 16 * v92), (const DgnString *)&v161);
    ++v166;
    DgnString::~DgnString((DgnString *)&v161);
    int v93 = v164;
    if (v164 == HIDWORD(v164))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v163, 1, 1);
      int v93 = v164;
    }
    v163[v93] = 0;
    LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v93 + 1;
    unsigned int v91 = 5;
  }
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
  unsigned int v94 = *((_DWORD *)this + 36);
  if (v94)
  {
    unsigned int v95 = 0;
    unsigned __int16 v96 = 0;
    do
    {
      uint64_t v97 = v96;
      uint64_t v100 = (unsigned int *)(*((void *)this + 57) + 4 * v96);
      uint64_t v98 = *v100;
      unsigned int v99 = v100[1];
      uint64_t v101 = v99 - v98;
      if (v99 != v98)
      {
        uint64_t v102 = 0;
        int v103 = *(unsigned __int16 *)(*((void *)this + 36) + 2 * v97);
        uint64_t v104 = *((void *)this + 43) + v98;
        do
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 0, v95);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v103);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, v102);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 3u, *(unsigned __int8 *)(v104 + v102));
          if (*(unsigned __int16 *)(*((void *)this + 47) + 2 * v97) == 0xFFFF) {
            int v105 = -1;
          }
          else {
            int v105 = *(unsigned __int16 *)(*((void *)this + 47) + 2 * v97);
          }
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 4u, v105);
          if (!*((unsigned char *)this + 392))
          {
            uint64_t v106 = *((void *)this + 50) + 16 * *(unsigned int *)(*((void *)this + 52) + 4 * v97);
            if (*(_DWORD *)(v106 + 8)) {
              uint64_t v107 = *(char **)v106;
            }
            else {
              uint64_t v107 = byte_2140A2798;
            }
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, v91, v107);
          }
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
          ++v102;
        }
        while (v101 != v102);
        unsigned int v94 = *((_DWORD *)this + 36);
      }
      unsigned __int16 v96 = v97 + 1;
      unsigned int v95 = (unsigned __int16)(v97 + 1);
    }
    while (v94 > v95);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
  DgnArray<DgnString>::releaseAll((uint64_t)v165);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  uint64_t v108 = (uint64_t)v158;
  if (*((_WORD *)this + 268))
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, (uint64_t)v158, 0x2Cu, v157);
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v170, sMST_Versions, (uint64_t)&v168, v109, v110, v111, v112, v113);
    DgnTextFileWriter::setFileType((uint64_t)v170, "MixtureShortListText", (void *)(v168 + 8 * (v169 - 1)));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfGenones", *((unsigned int *)this + 35));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfTreeNodes", *((unsigned __int16 *)this + 268));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "ModelDimension", *((unsigned int *)this + 33));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumberOfHyperplanes", *((unsigned __int16 *)this + 276));
    DgnArray<DgnString>::DgnArray(v165, 6);
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    uint64_t v161 = 0;
    unint64_t v114 = realloc_array(0, &v161, 0x18uLL, 0, 0, 1);
    uint64_t v163 = v161;
    LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 6;
    HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v114 >> 2;
    DgnString::operator=(*(DgnString **)v165, "TableName");
    *uint64_t v163 = 0;
    DgnString::operator=((DgnString *)(*(void *)v165 + 16), "UnsValue1");
    v163[1] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 32), "IntValue1");
    v163[2] = 1;
    DgnString::operator=((DgnString *)(*(void *)v165 + 48), "IntValue2");
    v163[3] = 1;
    DgnString::operator=((DgnString *)(*(void *)v165 + 64), "UnsValue2");
    v163[4] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 80), "StrValue1");
    v163[5] = 0;
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
    if (*((_WORD *)this + 276))
    {
      uint64_t v115 = 0;
      unint64_t v116 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "HyperplaneConstant");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v116);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, *(_DWORD *)(*((void *)this + 68) + v115));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, -1);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 5u, byte_2140A2798);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
        ++v116;
        unint64_t v117 = *((unsigned __int16 *)this + 276);
        v115 += 24;
      }
      while (v116 < v117);
      if (*((_WORD *)this + 276))
      {
        unint64_t v118 = 0;
        unsigned int v119 = *((_DWORD *)this + 33);
        do
        {
          if (v119)
          {
            int v120 = 0;
            int v121 = 0;
            do
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "HyperplaneCoefficient");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v118);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, v120);
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, *(_DWORD *)(*(void *)(*((void *)this + 68) + 24 * v118 + 8) + 4 * (unsigned __int16)v121));
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 5u, byte_2140A2798);
              DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
              int v120 = (unsigned __int16)++v121;
              unsigned int v119 = *((_DWORD *)this + 33);
            }
            while (v119 > (unsigned __int16)v121);
            LOWORD(v117) = *((_WORD *)this + 276);
          }
          ++v118;
        }
        while (v118 < (unsigned __int16)v117);
      }
    }
    if (*((_WORD *)this + 268))
    {
      uint64_t v122 = 0;
      unint64_t v123 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "FrameDecisionTree");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v123);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, *(unsigned __int16 *)(*((void *)this + 66) + v122));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, *(unsigned __int16 *)(*((void *)this + 66) + v122 + 2));
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, *(unsigned __int16 *)(*((void *)this + 66) + v122 + 4));
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 5u, byte_2140A2798);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
        ++v123;
        v122 += 6;
      }
      while (v123 < *((unsigned __int16 *)this + 268));
    }
    unsigned int v124 = *((_DWORD *)this + 35);
    if (v124)
    {
      unsigned int v125 = 0;
      unsigned __int16 v126 = 0;
      do
      {
        uint64_t v127 = v126;
        if (*((_WORD *)this + 268))
        {
          uint64_t v128 = 0;
          int v129 = *(_DWORD *)(*((void *)this + 34) + 4 * v126 + 4) - *(_DWORD *)(*((void *)this + 34) + 4 * v126);
          unint64_t v130 = ((unint64_t)*((unsigned __int16 *)this + 268) + 1) >> 1;
          do
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "ShortList");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v125);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 2u, v128);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, v129);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
            DgnString::DgnString((DgnString *)&v161, 48, v129);
            uint64_t v131 = v130 * v125;
            unsigned int v132 = *(_DWORD *)(*((void *)this + 73) + 4 * v127)
                 + v129 * *(unsigned __int16 *)(*((void *)this + 75) + 2 * (v128 + v131));
            unsigned int v133 = v132 + v129;
            if (v132 + v129 == -1) {
              unsigned int v133 = *((_DWORD *)this + 144);
            }
            if (v132 < v133)
            {
              unsigned int v134 = *(_DWORD *)(*((void *)this + 73) + 4 * v127)
                   + v129 * *(unsigned __int16 *)(*((void *)this + 75) + 2 * (v128 + v131));
              while (((*(_DWORD *)(*((void *)this + 71) + 4 * (v134 >> 5)) >> v134) & 1) == 0)
              {
                if (++v134 >= v133) {
                  goto LABEL_153;
                }
              }
LABEL_148:
              unsigned int v135 = v134;
              goto LABEL_149;
            }
            unsigned int v134 = *(_DWORD *)(*((void *)this + 73) + 4 * v127)
                 + v129 * *(unsigned __int16 *)(*((void *)this + 75) + 2 * (v128 + v131));
            while (1)
            {
              unsigned int v135 = v133;
LABEL_149:
              if (v134 >= v133) {
                break;
              }
              *((unsigned char *)v161 + v135 - v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 49;
              if (++v134 < v133)
              {
                while (((*(_DWORD *)(*((void *)this + 71) + 4 * (v134 >> 5)) >> v134) & 1) == 0)
                {
                  if (v133 == ++v134) {
                    goto LABEL_153;
                  }
                }
                goto LABEL_148;
              }
            }
LABEL_153:
            if (v162) {
              uint64_t v136 = (char *)v161;
            }
            else {
              uint64_t v136 = byte_2140A2798;
            }
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 5u, v136);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
            DgnString::~DgnString((DgnString *)&v161);
            ++v128;
          }
          while (v128 != v130);
          unsigned int v124 = *((_DWORD *)this + 35);
        }
        unsigned __int16 v126 = v127 + 1;
        unsigned int v125 = (unsigned __int16)(v127 + 1);
      }
      while (v124 > v125);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
    DgnArray<DgnString>::releaseAll((uint64_t)v165);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
    uint64_t v108 = (uint64_t)v158;
  }
  if (*((_DWORD *)this + 155))
  {
    DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v170);
    DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v170, v108, 0x1Cu, 0);
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    DgnTextFile::legalDgnTextFileVersions((int)v170, sHST_Versions, (uint64_t)&v168, v137, v138, v139, v140, v141);
    DgnTextFileWriter::setFileType((uint64_t)v170, "HierarchicalScorerText", (void *)(v168 + 8 * (v169 - 1)));
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v170, "NumHSLevels", *((unsigned int *)this + 155));
    DgnArray<DgnString>::DgnArray(v165, 7);
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    uint64_t v161 = 0;
    unint64_t v142 = realloc_array(0, &v161, 0x1CuLL, 0, 0, 1);
    uint64_t v163 = v161;
    LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 7;
    HIDWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v142 >> 2;
    DgnString::operator=(*(DgnString **)v165, "Type");
    *uint64_t v163 = 0;
    DgnString::operator=((DgnString *)(*(void *)v165 + 16), "Level");
    v163[1] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 32), "Component");
    v163[2] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 48), "Parent");
    v163[3] = 1;
    DgnString::operator=((DgnString *)(*(void *)v165 + 64), "DimensionIndex");
    v163[4] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 80), "Mean");
    v163[5] = 3;
    DgnString::operator=((DgnString *)(*(void *)v165 + 96), "ScaledDev");
    v163[6] = 3;
    DgnTextFileWriter::setLineFieldFormat((uint64_t)v170, (uint64_t)&v163, (uint64_t)v165);
    if (*((_DWORD *)this + 155) != -1)
    {
      unint64_t v144 = 0;
      do
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "NumHSComponents");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v144);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, *(_DWORD *)(*((void *)this + 80) + 4 * v144));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 5u, 0);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 6u, 0);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
        ++v144;
      }
      while (v144 < (*((_DWORD *)this + 155) + 1));
    }
    uint64_t v145 = *((unsigned int *)this + 33);
    uint64_t v161 = 0;
    uint64_t v162 = 0;
    if (v145)
    {
      uint64_t v159 = 0;
      unint64_t v146 = realloc_array(0, &v159, 4 * v145, 0, 0, 1);
      uint64_t v160 = 0;
      uint64_t v161 = v159;
      uint64_t v147 = *((unsigned int *)this + 33);
      LODWORD(v162) = v145;
      HIDWORD(v162) = v146 >> 2;
      uint64_t v159 = 0;
      if (v147)
      {
        uint64_t v181 = 0;
        HIDWORD(v16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = realloc_array(0, &v181, 4 * v147, 0, 0, 1) >> 2;
        uint64_t v159 = v181;
      }
    }
    else
    {
      LODWORD(v147) = 0;
      uint64_t v159 = 0;
      uint64_t v160 = 0;
    }
    LODWORD(v16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v147;
    unsigned int v148 = *((_DWORD *)this + 155);
    if (v148 != -1)
    {
      unint64_t v149 = 0;
      uint64_t v150 = 0;
      do
      {
        if (v149 >= v148)
        {
          uint64_t v151 = 1;
        }
        else
        {
          uint64_t v150 = *(void *)(*((void *)this + 82) + 24 * v149)
               + *(unsigned int *)(*((void *)this + 82) + 24 * v149 + 16);
          uint64_t v151 = *((unsigned int *)this + 33);
        }
        if (*(_DWORD *)(*((void *)this + 80) + 4 * v149))
        {
          unint64_t v152 = 0;
          do
          {
            if (v149 < *((unsigned int *)this + 155))
            {
              PelMgr::unpackRawMixtureComponent((unint64_t)this, v150, (uint64_t)&v161, (uint64_t)&v159, v143);
              v150 += *((unsigned int *)this + 37);
            }
            if (v151)
            {
              for (uint64_t m = 0; m != v151; ++m)
              {
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v170, 0, "HSComponentDefs");
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 1u, v149);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 2u, v152);
                if (v149) {
                  int v154 = *(_DWORD *)(*(void *)(*((void *)this + 78) + 16 * (v149 - 1)) + 4 * v152);
                }
                else {
                  int v154 = -1;
                }
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v170, 3u, v154);
                if (v149 >= *((unsigned int *)this + 155))
                {
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, 0);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 5u, 0);
                  int v155 = 0;
                }
                else
                {
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 4u, m);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 5u, *((_DWORD *)v161 + m));
                  int v155 = *((_DWORD *)v159 + m);
                }
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v170, 6u, v155);
                DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v170);
              }
            }
            ++v152;
          }
          while (v152 < *(unsigned int *)(*((void *)this + 80) + 4 * v149));
          unsigned int v148 = *((_DWORD *)this + 155);
        }
        ++v149;
      }
      while (v149 < v148 + 1);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v159);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v161);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v163);
    DgnArray<DgnString>::releaseAll((uint64_t)v165);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v168);
    DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v170);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v171);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v173);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v175);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v177);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v179);
}

void sub_213EF5F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va4, a8);
  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v19 = va_arg(va4, void);
  uint64_t v21 = va_arg(va4, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va3);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v8 - 112);
  _Unwind_Resume(a1);
}

void PelMgr::saveQuantPerDimTableText(uint64_t a1, DgnTextFileWriter *this, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, char *a8, int a9, void *a10)
{
  unsigned int v10 = *(_DWORD *)(a1 + 132);
  if (v10)
  {
    int v15 = 0;
    for (unsigned int i = 0; i < v10; ++i)
    {
      if (a9)
      {
        for (int j = 0; j != a9; ++j)
        {
          DgnTextFileWriter::setLineFieldValue(this, a3, a8);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, a4, i);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, a5, j);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, a6, *(unsigned __int8 *)(*a10 + (v15 + j)));
          if (!*(_DWORD *)(a1 + 16)) {
            DgnTextFileWriter::setLineFieldUnsignedValue(this, a7, 0);
          }
          DgnTextFileWriter::writeNextLine(this);
        }
        unsigned int v10 = *(_DWORD *)(a1 + 132);
        v15 += j;
      }
    }
  }
}

void (***PelMgr::savePelMgr(PelMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5, double a6))(void)
{
  if (a4) {
    return (void (***)(void))PelMgr::savePelMgrText(this, a2, a5, a6);
  }
  else {
    return PelMgr::savePelMgrBinary(this, a2, a3, a5, 0);
  }
}

void PelMgr::verifyFeatureDimension(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, NeuralNet *a6, uint64_t a7, uint64_t a8)
{
  int v12 = a4;
  int v15 = *(_DWORD *)(a1 + 132);
  if (a2)
  {
    if (v15 != *(_DWORD *)(a2 + 4)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3730, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"VarClass");
    }
    if (v15 != *(_DWORD *)(a2 + 8)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3732, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"VarClass");
    }
  }
  int v17 = a3[2];
  if (v17 == *a3 && v15 != v17)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3738, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"SpeakerTransAcc");
    if (v15 != a3[2]) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3740, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"SpeakerTransAcc");
    }
  }
  int v19 = a3[3];
  if (v19 == *a3 && v15 != v19)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3746, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"ChannelTransAcc");
    if (v15 != a3[3]) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3748, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"ChannelTransAcc");
    }
  }
  unsigned int OutputSize = *(_DWORD *)(a1 + 8);
  if (v12 && OutputSize != v12) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3754, (uint64_t)"pel/pel", 16, (uint64_t)"%.500s", a7, a8, (char)"utterance");
  }
  if (a5)
  {
    if (OutputSize != *(_DWORD *)(a5 + 8)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3759, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"BandwidthTransform");
    }
    unsigned int OutputSize = *(_DWORD *)(a5 + 12);
    if (OutputSize < *(_DWORD *)(a1 + 132)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3762, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"BandwidthTransform");
    }
  }
  if (a6)
  {
    if (NeuralNet::isOutTypeBF(a6, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8))
    {
      if (OutputSize != NeuralNet::getFrameSize(a6, v22, v23, v24, v25, v26, v27, v28)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3770, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", v34, v35, (char)"DBNBottleneckFeature");
      }
      unsigned int OutputSize = NeuralNet::getOutputSize(a6, v29, v30, v31, v32, v33, v34, v35);
      if (OutputSize < *(_DWORD *)(a1 + 132)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3773, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"DBNBottleneckFeature");
      }
    }
    else if (NeuralNet::isOutTypeConcatenatedBF(a6, v22, v23, v24, v25, v26, v27, v28))
    {
      if (OutputSize != NeuralNet::getFrameSize(a6, v36, v37, v38, v39, v40, a7, a8)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3779, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", v46, v47, (char)"DBNConcatenatedBottleneckFeature");
      }
      OutputSize += NeuralNet::getOutputSize(a6, v41, v42, v43, v44, v45, v46, v47);
      if (OutputSize < *(_DWORD *)(a1 + 132)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3782, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"DBNConcatenatedBottleneckFeature");
      }
    }
  }
  if (a7)
  {
    if (OutputSize != *(_DWORD *)(a7 + 8)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3789, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"Imelda");
    }
    unsigned int OutputSize = *(_DWORD *)(a7 + 12);
    if (OutputSize < *(_DWORD *)(a1 + 132)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3792, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"Imelda");
    }
  }
  if (a8)
  {
    if (OutputSize != *(_DWORD *)(*(void *)(a8 + 112) + 132)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3798, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"DFC");
    }
    if (OutputSize < *(_DWORD *)(a1 + 132)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 3800, (uint64_t)"pel/pel", 17, (uint64_t)"%.500s %.500s", a7, a8, (char)"DFC");
    }
  }
}

float PelMgr::packFloatRawMixtureComponent(uint64_t a1, uint64_t a2, void *a3, void *a4, double a5)
{
  uint64_t v7 = *(unsigned int *)(a1 + 132);
  if (v7)
  {
    uint64_t v10 = 0;
    LODWORD(v11) = 0;
    LODWORD(a5) = *(_DWORD *)(a1 + 128);
    double v12 = (double)*(unint64_t *)&a5;
    double v13 = v12 * 0.125;
    uint64_t v14 = 4 * v7;
    double v15 = 0.0;
    do
    {
      LODWORD(v12) = *(_DWORD *)(*a4 + v10);
      double v16 = (double)*(unint64_t *)&v12 * 0.125;
      if (v16 <= 31.875) {
        double v17 = v16;
      }
      else {
        double v17 = 31.875;
      }
      if (v16 >= v13) {
        double v18 = v17;
      }
      else {
        double v18 = v13;
      }
      unsigned int v19 = v11 + 1;
      double v20 = *(double *)(a1 + 496);
      *(float *)(a2 + 4 * v11) = (float)*(unsigned int *)(*a3 + v10);
      float v21 = v20 / (v18 * (v18 * 3.14159265));
      uint64_t v11 = (v11 + 2);
      *(float *)(a2 + 4 * v19) = v21;
      double v12 = DgnLog(v18 * 0.25);
      double v15 = v15 + v12;
      v10 += 4;
    }
    while (v14 != v10);
  }
  else
  {
    uint64_t v11 = 0;
    double v15 = 0.0;
  }
  float result = v15 * *(double *)(a1 + 496);
  *(float *)(a2 + 4 * v11) = result;
  return result;
}

uint64_t PelMgr::packMulTableRawMixtureComponent(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = *(unsigned int *)(result + 132);
  if (v4)
  {
    uint64_t v8 = result;
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v10 = *(void *)v8;
      unsigned int v11 = *(_DWORD *)(*a4 + 4 * i);
      if (v11 >= 0xFF) {
        int v12 = 255;
      }
      else {
        int v12 = *(_DWORD *)(*a4 + 4 * i);
      }
      if (*(_DWORD *)(v8 + 128) <= v11) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = *(_DWORD *)(v8 + 128);
      }
      if (*(_DWORD *)(v10 + 4) - 1 < v13) {
        unsigned int v13 = *(_DWORD *)(v10 + 4) - 1;
      }
      float result = MulTable::permute((MulTable *)v10, (unsigned __int16)((*(unsigned __int8 *)(*(void *)(v10 + 72) + v13) << 9)- *(_DWORD *)(*a3 + 4 * i)- 256));
      *(_WORD *)(a2 + 2 * i) = result;
    }
  }
  return result;
}

uint64_t PelMgr::packPackedIntRawMixtureComponent(uint64_t result, uint64_t a2, int **a3, unsigned int **a4)
{
  uint64_t v4 = *(unsigned int *)(result + 132);
  unsigned int v5 = (v4 + 7) & 0xFFFFFFF8;
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a4;
    uint64_t v9 = *(void *)(*(void *)(result + 488) + 72);
    do
    {
      int v10 = *v7++;
      *(unsigned char *)(a2 + v6) = v10;
      unsigned int v11 = *v8++;
      *(unsigned char *)(a2 + (v6 + 1)) = *(unsigned char *)(v9 + v11);
      v6 += 2;
    }
    while (2 * v4 != v6);
  }
  if (v4 < v5)
  {
    unsigned int v12 = 2 * v4;
    uint64_t v13 = v4 - v5;
    do
    {
      *(unsigned char *)(a2 + v12) = 0;
      *(unsigned char *)(a2 + v12 + 1) = 0;
      v12 += 2;
    }
    while (!__CFADD__(v13++, 1));
  }
  return result;
}

void PelMgr::packQuantPerDimRawMixtureComponent(uint64_t a1, unsigned char *a2, int **a3, int **a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 132);
  unsigned int v5 = (v4 + 7) & 0xFFFFFFF8;
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a4;
    uint64_t v9 = *(void *)(a1 + 96);
    int v10 = a2;
    uint64_t v11 = *(void *)(a1 + 112);
    do
    {
      int v12 = *v7++;
      char v13 = *(unsigned char *)(v9 + (v6 + v12));
      int v14 = *v8++;
      *v10++ = *(unsigned char *)(v11 + (v6 + v14)) + 16 * v13;
      v6 += 256;
    }
    while (v4 << 8 != v6);
  }
  if (v4 < v5) {
    bzero(&a2[v4], v5 + ~v4 + 1);
  }
}

uint64_t PelMgr::packFloatRawMixtureComponent(uint64_t a1, float *a2, char a3, unsigned int **a4, int **a5, char a6, double a7, double a8, double a9, double a10)
{
  uint64_t v15 = *(unsigned int *)(a1 + 132);
  uint64_t v16 = *(unsigned int *)(a1 + 152);
  if (v15)
  {
    double v17 = *a4;
    uint64_t v18 = *(unsigned int *)(a1 + 132);
    unsigned int v19 = a2;
    do
    {
      unsigned int v20 = *v17++;
      *v19++ = (float)v20;
      --v18;
    }
    while (v18);
  }
  int v22 = *(_DWORD *)(a1 + 160);
  int v21 = *(_DWORD *)(a1 + 164);
  unint64_t v58 = 0;
  unint64_t v59 = 0;
  int v60 = 0;
  if ((a6 & 1) == 0)
  {
    LODWORD(v58) = v15;
    HIDWORD(v58) = v15;
    if (v15 * v15)
    {
      unint64_t v59 = MemChunkAlloc(8 * (v15 * v15), 0);
      int v60 = v15 * v15;
    }
  }
  double v23 = 0.0;
  if (!v15)
  {
    int v42 = 0;
    double v27 = 0.0;
    if (a6) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v24 = 0;
  uint64_t v25 = *(unsigned int *)(a1 + 152);
  uint64_t v26 = *a4;
  double v27 = 0.0;
  int v28 = v15;
  do
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a5;
    int v31 = (int)v58;
    double v32 = 0.0;
    uint64_t v33 = v59;
    do
    {
      if (v25)
      {
        uint64_t v34 = *(uint64_t **)(a1 + 184);
        double v35 = 0.0;
        uint64_t v36 = v25;
        uint64_t v37 = v30;
        do
        {
          int v38 = *v37++;
          a10 = (double)v38;
          uint64_t v39 = *v34;
          v34 += 2;
          double v35 = v35 + a10 * (double)*(int *)(*(void *)(v39 + 16 * v24) + 4 * v29);
          --v36;
        }
        while (v36);
      }
      else
      {
        double v35 = 0.0;
      }
      double v40 = 1.0 / (double)(1 << (v22 + v21)) * v35;
      if ((a6 & 1) == 0) {
        *(double *)&v33[(v24 + v31 * v29)] = v40;
      }
      LODWORD(a1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v26[v29];
      a10 = (double)*(unint64_t *)&a10;
      double v32 = v32 + v40 * a10;
      ++v29;
    }
    while (v29 != v15);
    double v41 = -(v32 * *(double *)(a1 + 496));
    *(float *)&double v41 = v41;
    a2[v28] = *(float *)&v41;
    LODWORD(v41) = v26[v24];
    int v42 = v28 + 1;
    double v27 = v27 + v32 * (double)*(unint64_t *)&v41;
    ++v24;
    ++v28;
  }
  while (v24 != v15);
  if ((a6 & 1) == 0)
  {
LABEL_22:
    double v45 = DgnMatrix::determinant(&v58);
    double v23 = v45;
    if (v45 <= 0.0)
    {
      double v23 = -v45;
      if (v45 == 0.0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 4146, (uint64_t)"pel/pel", 68, (uint64_t)"%u", v43, v44, a3);
      }
    }
  }
LABEL_25:
  double v46 = *(double *)(a1 + 496);
  if (v16)
  {
    double v47 = v46 * 0.5 / (double)(1 << *(_DWORD *)(a1 + 164));
    unsigned int v48 = *a5;
    do
    {
      int v49 = *v48++;
      float v50 = v47 * (double)v49;
      int v51 = v42 + 1;
      a2[v42++] = v50;
      --v16;
    }
    while (v16);
  }
  else
  {
    int v51 = v42;
  }
  uint64_t v52 = (double *)&a2[v51 + 1];
  if (a6)
  {
    double v53 = *v52;
  }
  else
  {
    double v54 = DgnLog(v23);
    double v53 = eround(v54, 10);
    double v46 = *(double *)(a1 + 496);
  }
  float v55 = v46 * 0.5 * (v27 - (double)v15 * DgnLog(25.1327412) - v53);
  a2[v51] = v55;
  if ((a6 & 1) == 0) {
    *uint64_t v52 = v53;
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v59);
}

void sub_213EF6E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PelMgr::packPackedIntRawMixtureComponent(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, int **a5, char a6)
{
  uint64_t v12 = *(unsigned int *)(a1 + 132);
  unsigned int v13 = (v12 + 1) & 0xFFFFFFFE;
  uint64_t v14 = *(unsigned int *)(a1 + 152);
  if (v12)
  {
    for (uint64_t i = 0; i != v12; ++i)
      *(unsigned char *)(a2 + i) = *(_DWORD *)(*a4 + 4 * i);
  }
  unsigned int v16 = v12;
  if (v12 < v13)
  {
    unsigned int v17 = v12;
    do
      *(unsigned char *)(a2 + v17++) = 0;
    while (v13 != v17);
    unsigned int v16 = (v12 + 1) & 0xFFFFFFFE;
  }
  unsigned int v77 = v16;
  int v78 = *(_DWORD *)(a1 + 164);
  int v79 = *(_DWORD *)(a1 + 160);
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  if (v14)
  {
    unint64_t v80 = 0;
    unint64_t v18 = realloc_array(0, &v80, 4 * v14, 0, 0, 1);
    unsigned int v19 = 0;
    uint64_t v85 = v80;
    LODWORD(v86) = v14;
    HIDWORD(v86) = v18 >> 2;
    unsigned int v20 = *a5;
    uint64_t v21 = v14;
    do
    {
      int v23 = *v20++;
      unsigned int v22 = v23;
      if (v23 < 0) {
        unsigned int v22 = -v22;
      }
      if (v19 <= v22) {
        unsigned int v19 = v22;
      }
      --v21;
    }
    while (v21);
  }
  else
  {
    unsigned int v19 = 0;
    LODWORD(v86) = 0;
  }
  int Bits = BinaryIntScale::getBits(v19);
  if (Bits >= 15)
  {
    int v25 = BinaryIntScale::getBits((1 << (Bits - 15)) + v19) - 14;
    if (!v14) {
      goto LABEL_25;
    }
  }
  else
  {
    int v25 = 0;
    if (!v14) {
      goto LABEL_25;
    }
  }
  uint64_t v26 = *a5;
  uint64_t v27 = 1 << (v25 - 1);
  if (!v25) {
    LODWORD(v27) = 0;
  }
  int v28 = v85;
  uint64_t v29 = v14;
  do
  {
    int v30 = *v26++;
    *v28++ = (__int16)((v30 + (int)v27) >> v25);
    --v29;
  }
  while (v29);
LABEL_25:
  int v83 = 0;
  uint64_t v84 = 0;
  if (v12)
  {
    unint64_t v80 = 0;
    HIDWORD(v84) = realloc_array(0, &v80, 8 * v12, 0, 0, 1) >> 3;
    int v83 = v80;
  }
  char v76 = a3;
  LODWORD(v84) = v12;
  unint64_t v80 = 0;
  uint64_t v81 = 0;
  int v82 = 0;
  if ((a6 & 1) == 0)
  {
    LODWORD(v8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v12;
    HIDWORD(v8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v12;
    if (v12 * v12)
    {
      uint64_t v81 = MemChunkAlloc(8 * (v12 * v12), 0);
      int v82 = v12 * v12;
    }
  }
  double v31 = 0.0;
  if (v12)
  {
    uint64_t v32 = 0;
    int64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = *a4;
    uint64_t v36 = v83;
    while (1)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = v85;
      int v40 = (int)v80;
      double v41 = v81;
      do
      {
        uint64_t v42 = 0;
        if (v14)
        {
          uint64_t v43 = *(void **)(a1 + 184);
          uint64_t v44 = *a5;
          double v45 = 0.0;
          uint64_t v46 = v14;
          double v47 = v39;
          do
          {
            int v48 = *(_DWORD *)(*(void *)(*v43 + 16 * v32) + 4 * v37);
            if ((a6 & 1) == 0) {
              double v45 = v45 + (double)*v44 * (double)v48;
            }
            int v49 = *v47++;
            v42 += v48 * (uint64_t)v49;
            v43 += 2;
            ++v44;
            --v46;
          }
          while (v46);
          if ((a6 & 1) == 0) {
LABEL_39:
          }
            *(double *)&v41[(v32 + v40 * v37)] = 1.0
                                                             / (double)(1 << (v79
                                                                              + v78))
                                                             * v45;
        }
        else
        {
          double v45 = 0.0;
          if ((a6 & 1) == 0) {
            goto LABEL_39;
          }
        }
        v38 += v42 * *(unsigned int *)(v35 + 4 * v37++);
      }
      while (v37 != v12);
      if (v38 >= 0) {
        int64_t v50 = v38;
      }
      else {
        int64_t v50 = -v38;
      }
      v36[v32] = -v38;
      if (v33 <= v50) {
        int64_t v33 = v50;
      }
      v34 += v38 * *(unsigned int *)(v35 + 4 * v32++);
      if (v32 == v12)
      {
        double v51 = (double)v34;
        if (a6) {
          goto LABEL_56;
        }
        goto LABEL_53;
      }
    }
  }
  int64_t v33 = 0;
  double v51 = 0.0;
  if (a6) {
    goto LABEL_56;
  }
LABEL_53:
  double v54 = DgnMatrix::determinant((double **)&v80);
  double v31 = v54;
  if (v54 <= 0.0)
  {
    double v31 = -v54;
    if (v54 == 0.0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/pel.cpp", 4492, (uint64_t)"pel/pel", 68, (uint64_t)"%u", v52, v53, v76);
    }
  }
LABEL_56:
  int v55 = BinaryIntScale::getBits(v33);
  unint64_t v56 = (_WORD *)(a2 + v77);
  __int16 v57 = v78 - v25;
  if (v55 <= 15) {
    int v58 = 0;
  }
  else {
    int v58 = v55 - 15;
  }
  char v59 = v57 + v79;
  _WORD *v56 = v57 + v79 - v58;
  bzero(v56 + 1, ((v13 + 17) & 0xFFFFFFF0) - v13 - 2);
  unsigned int v60 = (((v13 + 17) & 0xFFFFFFF0) - v13 - 2) >> 1;
  if (v12)
  {
    unint64_t v61 = v83;
    uint64_t v62 = 1 << (v58 - 1);
    if (!v58) {
      uint64_t v62 = 0;
    }
    uint64_t v63 = v12;
    do
    {
      uint64_t v64 = *v61++;
      v56[++v60] = (v64 + v62) >> v58;
      --v63;
    }
    while (v63);
  }
  unsigned int v65 = v60 + 2;
  v56[v60 + 1] = v57;
  unsigned int v66 = ((2 * v12 + 17) & 0xFFFFFFF0) - 2 * v12 - 2;
  bzero(&v56[v60 + 2], v66);
  unsigned int v67 = v65 + (v66 >> 1);
  if (v14)
  {
    unint64_t v68 = v85;
    uint64_t v69 = v14;
    do
    {
      int v70 = *v68++;
      unsigned int v71 = v67 + 1;
      v56[v67++] = v70;
      --v69;
    }
    while (v69);
  }
  else
  {
    unsigned int v71 = v65 + (v66 >> 1);
  }
  bzero(&v56[v71], ((2 * v14 + 27) & 0xFFFFFFF0) - 2 * v14 - 12);
  unsigned int v72 = &v56[v71 + ((((2 * v14 + 27) & 0xFFFFFFF0) - 2 * v14 - 12) >> 1)];
  if (a6)
  {
    double v73 = *(double *)(v72 + 2);
  }
  else
  {
    double v74 = DgnLog(v31);
    double v73 = eround(v74, 10);
  }
  *(_DWORD *)unsigned int v72 = (int)((1.0 / (double)(1 << v59) * v51 - DgnLog(25.1327412) * (double)v12 - v73) * 0.5
                       + 0.5);
  if ((a6 & 1) == 0) {
    *(double *)(v72 + 2) = v73;
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v81);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v83);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v85);
}

void sub_213EF7348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t PelMgr::unpackFloatRawMixtureComponent(unint64_t result, float *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 132);
  uint64_t v9 = *(unsigned int *)(result + 152);
  unsigned int v10 = *(_DWORD *)(a3 + 12);
  if (v8 > v10) {
    float result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v10, 0);
  }
  *(_DWORD *)(a3 + 8) = v8;
  unsigned int v11 = *(_DWORD *)(a4 + 12);
  if (v9 > v11) {
    float result = DgnPrimArray<unsigned int>::reallocElts(a4, v9 - v11, 0);
  }
  *(_DWORD *)(a4 + 8) = v9;
  if (v8)
  {
    uint64_t v12 = *(_DWORD **)a3;
    uint64_t v13 = v8;
    uint64_t v14 = a2;
    do
    {
      float v15 = *v14++;
      *v12++ = (v15 + 0.5);
      --v13;
    }
    while (v13);
  }
  if (v9)
  {
    double v16 = 2.0 / *(double *)(v7 + 496) * (double)(1 << *(_DWORD *)(v7 + 164));
    int v17 = 2 * v8;
    unint64_t v18 = *(_DWORD **)a4;
    do
    {
      float v19 = a2[v17++];
      double v20 = v16 * v19;
      if (v20 < 0.0) {
        double v21 = -0.5;
      }
      else {
        double v21 = 0.5;
      }
      *v18++ = (int)(v20 + v21);
      --v9;
    }
    while (v9);
  }
  return result;
}

unint64_t PelMgr::unpackPackedIntRawMixtureComponent(unint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 132);
  uint64_t v9 = *(unsigned int *)(result + 152);
  unsigned int v10 = *(_DWORD *)(a3 + 12);
  if (v8 > v10) {
    float result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v10, 0);
  }
  *(_DWORD *)(a3 + 8) = v8;
  unsigned int v11 = *(_DWORD *)(a4 + 12);
  if (v9 > v11) {
    float result = DgnPrimArray<unsigned int>::reallocElts(a4, v9 - v11, 0);
  }
  *(_DWORD *)(a4 + 8) = v9;
  if (v8)
  {
    uint64_t v12 = *(_DWORD **)a3;
    uint64_t v13 = v8;
    uint64_t v14 = a2;
    do
    {
      int v15 = *v14++;
      *v12++ = v15;
      --v13;
    }
    while (v13);
  }
  if (v9)
  {
    double v16 = &a2[2 * v8
            + 2
            + 2 * ((((((v8 + 1) & 0xFFFFFFFE) + 17) & 0xFFFFFFF0) - ((v8 + 1) & 0xFFFFFFFE) - 2) >> 1)
            + ((v8 + 1) & 0xFFFFFFFE)];
    int v18 = *(__int16 *)v16;
    int v17 = (__int16 *)(v16 + 2);
    int v19 = *(_DWORD *)(v7 + 164) - v18;
    unsigned int v20 = (((2 * v8 + 17) & 0xFFFFFFF0) - 2 * v8 - 2) >> 1;
    double v21 = *(_DWORD **)a4;
    do
    {
      *v21++ = v17[v20++] << v19;
      --v9;
    }
    while (v9);
  }
  return result;
}

void PelMgr::unpackFloatRawMixtureComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 132);
  unsigned int v10 = *(_DWORD *)(a3 + 12);
  if (v9 > v10) {
    DgnPrimArray<unsigned int>::reallocElts(a3, v9 - v10, 0);
  }
  *(_DWORD *)(a3 + 8) = v9;
  unsigned int v11 = *(_DWORD *)(a4 + 12);
  if (v9 <= v11)
  {
    *(_DWORD *)(a4 + 8) = v9;
    if (!v9) {
      return;
    }
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a4, v9 - v11, 0);
    *(_DWORD *)(a4 + 8) = v9;
  }
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  LODWORD(a5) = *(_DWORD *)(a1 + 128);
  double v14 = (double)*(unint64_t *)&a5 * 0.125;
  do
  {
    unsigned int v15 = v13 + 1;
    double v16 = *(float *)(a2 + 4 * v13);
    v13 += 2;
    double v17 = DgnSqrt(*(double *)(a1 + 496) / (*(float *)(a2 + 4 * v15) * 3.14159265));
    if (v17 <= 31.875) {
      double v18 = v17;
    }
    else {
      double v18 = 31.875;
    }
    if (v17 >= v14) {
      double v19 = v18;
    }
    else {
      double v19 = v14;
    }
    *(_DWORD *)(*(void *)a3 + 4 * v12) = (v16 + 0.5);
    *(_DWORD *)(*(void *)a4 + 4 * v12++) = (v19 * 8.0 + 0.5);
  }
  while (v9 != v12);
}

unint64_t PelMgr::unpackMulTableRawMixtureComponent(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 132);
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  if (v8 > v9) {
    float result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v9, 0);
  }
  *(_DWORD *)(a3 + 8) = v8;
  unsigned int v10 = *(_DWORD *)(a4 + 12);
  if (v8 <= v10)
  {
    *(_DWORD *)(a4 + 8) = v8;
    if (!v8) {
      return result;
    }
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a4, v8 - v10, 0);
    *(_DWORD *)(a4 + 8) = v8;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)a4;
  do
  {
    unsigned int v13 = *(MulTable **)v7;
    uint64_t v14 = *(void *)a3;
    float result = MulTable::unpermute(*(MulTable **)v7, *(_WORD *)(a2 + 2 * v11));
    *(_DWORD *)(v14 + 4 * v11) = -(char)result;
    *(_DWORD *)(v12 + 4 * v11) = *(unsigned __int16 *)(*((void *)v13 + 11) + 2 * (result >> 9));
    uint64_t v12 = *(void *)a4;
    unsigned int v15 = *(_DWORD *)(*(void *)a4 + 4 * v11);
    if (v15 >= 0xFF) {
      int v16 = 255;
    }
    else {
      int v16 = *(_DWORD *)(*(void *)a4 + 4 * v11);
    }
    if (*(_DWORD *)(v7 + 128) <= v15) {
      int v17 = v16;
    }
    else {
      int v17 = *(_DWORD *)(v7 + 128);
    }
    *(_DWORD *)(v12 + 4 * v11++) = v17;
  }
  while (v8 != v11);
  return result;
}

unint64_t PelMgr::unpackPackedIntRawMixtureComponent(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 132);
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  if (v8 > v9) {
    float result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v9, 0);
  }
  *(_DWORD *)(a3 + 8) = v8;
  unsigned int v10 = *(_DWORD *)(a4 + 12);
  if (v8 <= v10)
  {
    *(_DWORD *)(a4 + 8) = v8;
    if (!v8) {
      return result;
    }
  }
  else
  {
    float result = DgnPrimArray<unsigned int>::reallocElts(a4, v8 - v10, 0);
    *(_DWORD *)(a4 + 8) = v8;
  }
  uint64_t v11 = *(_DWORD **)a3;
  uint64_t v12 = *(_DWORD **)a4;
  uint64_t v13 = *(void *)(*(void *)(v7 + 488) + 40);
  unsigned int v14 = 1;
  do
  {
    *v11++ = *(unsigned __int8 *)(a2 + v14 - 1);
    *v12++ = *(unsigned __int16 *)(v13 + 2 * *(unsigned __int8 *)(a2 + v14));
    v14 += 2;
    --v8;
  }
  while (v8);
  return result;
}

unint64_t PelMgr::unpackQuantPerDimRawMixtureComponent(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 132);
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  if (v8 > v9) {
    float result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v9, 0);
  }
  *(_DWORD *)(a3 + 8) = v8;
  unsigned int v10 = *(_DWORD *)(a4 + 12);
  if (v8 <= v10)
  {
    *(_DWORD *)(a4 + 8) = v8;
    if (!v8) {
      return result;
    }
  }
  else
  {
    float result = DgnPrimArray<unsigned int>::reallocElts(a4, v8 - v10, 0);
    *(_DWORD *)(a4 + 8) = v8;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)a3;
  uint64_t v13 = *(void *)a4;
  uint64_t v14 = *(void *)(v7 + 48);
  uint64_t v15 = *(void *)(v7 + 64);
  do
  {
    unsigned int v16 = *(unsigned __int8 *)(a2 + v11);
    *(_DWORD *)(v12 + 4 * v11) = *(unsigned __int8 *)(v14
                                                    + (v11 << *(_DWORD *)(v7 + 32))
                                                    + (v16 >> *(_DWORD *)(v7 + 36)));
    *(_DWORD *)(v13 + 4 * v11) = *(unsigned __int8 *)(v15
                                                    + (v11 << *(_DWORD *)(v7 + 36))
                                                    + (*(_DWORD *)(v7 + 40) & v16));
    ++v11;
  }
  while (v8 != v11);
  return result;
}

void *DgnArray<AlignedArray<unsigned char>>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 24 * v2 - 24;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a1 + v3);
      v3 -= 24;
    }
    while (v3 != -24);
  }
  float result = *(void **)a1;
  if (*(void *)a1)
  {
    float result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnArray<FrameDecisionTreeHyperplane>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 24 * v2 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a1 + v3);
      v3 -= 24;
    }
    while (v3 != -16);
  }
  float result = *(void **)a1;
  if (*(void *)a1)
  {
    float result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void FrameDecisionTree::~FrameDecisionTree(FrameDecisionTree *this)
{
  DgnArray<FrameDecisionTreeHyperplane>::releaseAll((uint64_t)this + 16);

  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this);
}

uint64_t AlignedArray<unsigned char>::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6 <= *(_DWORD *)(a1 + 12)) {
    v6 -= 15;
  }
  unsigned int v10 = v6;
  writeObject(a2, (int *)&v10, a3);
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= *(_DWORD *)(a1 + 12)) {
    uint64_t v8 = v7 - 15;
  }
  else {
    uint64_t v8 = v7;
  }
  return writeObjectArray(a2, (char *)(*(void *)a1 + *(unsigned int *)(a1 + 16)), v8, a3);
}

uint64_t AlignedArray<short>::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6 <= *(_DWORD *)(a1 + 12)) {
    v6 -= 7;
  }
  unsigned int v10 = v6;
  writeObject(a2, (int *)&v10, a3);
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= *(_DWORD *)(a1 + 12)) {
    unsigned int v8 = v7 - 7;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  return writeObjectArray(a2, (__int16 *)(*(void *)a1 + 2 * *(unsigned int *)(a1 + 16)), v8, a3);
}

void *AlignedArray<unsigned char>::writeSharedObject(uint64_t a1, DgnSharedMemStream *a2, _DWORD *a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 <= *(_DWORD *)(a1 + 12)) {
    v5 -= 15;
  }
  unsigned int v14 = v5;
  float result = (void *)writeObject((uint64_t)a2, (int *)&v14, a3);
  if (v14)
  {
    float result = (void *)DgnSharedMemStream::writeSharedBytes(a2, (const char *)(*(void *)a1 + *(unsigned int *)(a1 + 16)), v14, v7, v8, v9, v10, v11);
    if (result)
    {
      uint64_t v12 = result;
      float result = *(void **)a1;
      if (*(void *)a1) {
        float result = (void *)MemChunkFree(result, 0);
      }
      unsigned int v13 = v14;
      *(_DWORD *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
      *(_DWORD *)(a1 + 8) = v13;
      *(void *)a1 = v12;
    }
  }
  return result;
}

uint64_t Node::updateNodeOneBest1(Node *this, int a2, int a3, int a4, PelScoreCache **a5, HmmNet *a6)
{
  uint64_t ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(a5[3], *((unsigned __int16 *)this + 11), a2, a4);
  if ((int)ScoreAllowBackoff_updateNodeInSequence <= a3)
  {
    uint64_t v11 = ScoreAllowBackoff_updateNodeInSequence;
    Node::updateScore<false>((uint64_t)this, ScoreAllowBackoff_updateNodeInSequence);
    if (*((_DWORD *)a5 + 56) >= (int)v11) {
      BestData::newOrTiedBestNode((uint64_t)(a5 + 24), v11, this, a6);
    }
    uint64_t v12 = (char *)a5 + 4 * (v11 + 5000);
    ++*((_DWORD *)v12 + 37848);
    ++*((_DWORD *)a5 + 75617);
    ++*((_DWORD *)v12 + 80);
    ++*((_DWORD *)a5 + 75616);
  }
  else
  {
    *((_DWORD *)this + 2) = 1310740000;
    return 20000;
  }
  return v11;
}

uint64_t Node::updateScore<false>(uint64_t result, __int16 a2)
{
  int v2 = *(_DWORD *)(result + 12);
  int v3 = *(unsigned __int8 *)(result + 20);
  int v4 = ((v2 >> 8) - v3) << 8;
  int v5 = v4 | v3;
  int v6 = v4 - ((v4 >> 31) & (v4 >> 8));
  if (v2 < 256) {
    int v6 = v5;
  }
  *(_DWORD *)(result + 4) += 2 * *(_DWORD *)(result + 12) - v3;
  *(_DWORD *)(result + 12) = v6;
  if (v2 >= 256) {
    __int16 v7 = (v2 >> 8) + a2;
  }
  else {
    __int16 v7 = a2;
  }
  *(_WORD *)(result + 8) = v7;
  *(_WORD *)(result + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a2;
  return result;
}

uint64_t Node::thresholdNode(Node *this, int a2)
{
  if (*((__int16 *)this + 5) <= a2)
  {
    if (*((__int16 *)this + 4) > a2) {
      *((_WORD *)this + 4) = 20000;
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *((_DWORD *)this + 2) = 1310740000;
  }
  return result;
}

uint64_t Node::scoreNodeActiveCurrActiveSeed(uint64_t a1, uint64_t a2, int a3, int a4, unsigned char *a5, PelScoreCache **a6, int a7, int a8, HmmNet *a9)
{
  int v9 = *(unsigned __int8 *)(a1 + 12) + *(__int16 *)(a1 + 10);
  int v10 = a8 + a7 + *(__int16 *)(a2 + 8) + *(char *)(a1 + 21);
  if (v10 < v9)
  {
    int v11 = *(__int16 *)(a1 + 16);
    if (v11 >= 0) {
      int v12 = v11 << 8;
    }
    else {
      int v12 = 255 * v11;
    }
    *(_DWORD *)(a1 + 12) = v12;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4) + *(__int16 *)(a1 + 18);
    *a5 = 1;
    int v9 = v10;
  }
  return Node::updateNodeOneBest1((Node *)a1, v9, a3, a4, a6, a9);
}

uint64_t Node::scoreNodeOneBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, unsigned char *a7, PelScoreCache **a8, HmmNet *a9, _DWORD *a10, HmmNet *a11)
{
  int v11 = *(__int16 *)(a1 + 10);
  if (v11 <= a4)
  {
    ++*a10;
    if (a3) {
      return Node::scoreNodeActiveCurrActiveSeed(a1, a2, a5, a6, a7, a8, (int)a9, SHIDWORD(a9), a11);
    }
    else {
      return Node::updateNodeOneBest1((Node *)a1, *(unsigned __int8 *)(a1 + 12) + v11, a5, a6, a8, a11);
    }
  }
  else
  {
    *a7 = a3;
    if (a3)
    {
      ++*a10;
      return Node::scoreNodeInactiveCurrActiveSeed(a1, a2, a5, a6, a8, (int)a9, SHIDWORD(a9), a11);
    }
    else
    {
      return 20000;
    }
  }
}

uint64_t Node::scoreNodeSuccessors(const Node *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  int v13 = a4;
  unsigned int v14 = a1;
  uint64_t v39 = (_DWORD *)(a8 + 302464);
  int v15 = *(__int16 *)(a2 + 8);
  if (v15 == 20000) {
    int v16 = -2;
  }
  else {
    int v16 = *(_DWORD *)a2;
  }
  if (a7 >= 1)
  {
    int v17 = 0;
    int v18 = 0;
    if (a3)
    {
      int v19 = 32;
    }
    else
    {
      int v15 = 20000;
      int v19 = 0;
    }
    int v20 = *(_DWORD *)(a2 + 4);
    unsigned int v21 = a7 + 1;
    uint64_t v22 = (uint64_t)a1;
    int v23 = a1;
    uint64_t v24 = 20000;
    while (1)
    {
      int v25 = *(__int16 *)(v22 + 10);
      if (v25 <= v13)
      {
        if (*(__int16 *)(v22 + 8) <= v13)
        {
          __int16 v26 = *(_WORD *)(v22 + 8);
          int v27 = 17;
        }
        else
        {
          __int16 v26 = 20000;
          *(_WORD *)(v22 + 8) = 20000;
          int v27 = 1;
        }
        ++v17;
        v19 |= v27;
      }
      else
      {
        *(_DWORD *)(v22 + 8) = 1310740000;
        __int16 v26 = 20000;
        int v25 = 20000;
      }
      if ((v19 & 0x61) != 0)
      {
        uint64_t v42 = v23;
        int v43 = *(_DWORD *)v22;
        int v44 = *(_DWORD *)(v22 + 4);
        int v28 = *(unsigned __int8 *)(v22 + 12) + v25;
        int v29 = a10 + a9 + v15 + *(char *)(v22 + 21);
        if (v29 < v28)
        {
          int v30 = v20 + *(__int16 *)(v22 + 18);
          *(_DWORD *)uint64_t v22 = v16;
          *(_DWORD *)(v22 + 4) = v30;
          int v31 = *(__int16 *)(v22 + 16);
          if (v31 >= 0) {
            int v32 = v31 << 8;
          }
          else {
            int v32 = 255 * v31;
          }
          *(_DWORD *)(v22 + 12) = v32;
          int v28 = v29;
        }
        uint64_t ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(a8 + 24), *(unsigned __int16 *)(v22 + 22), v28, a6);
        if ((int)ScoreAllowBackoff_updateNodeInSequence <= a5)
        {
          uint64_t v34 = ScoreAllowBackoff_updateNodeInSequence;
          ++*(_DWORD *)(a8 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
          ++v39[1];
          Node::updateScore<false>(v22, ScoreAllowBackoff_updateNodeInSequence);
          if ((int)v34 <= (int)v24)
          {
            unsigned int v14 = (const Node *)v22;
            int v13 = a4;
            if ((int)v34 >= (int)v24)
            {
              unsigned int v35 = *(unsigned __int16 *)(v22 + 22);
              unsigned int v36 = *((unsigned __int16 *)v42 + 11);
              if (v35 < v36) {
                uint64_t v34 = v34;
              }
              else {
                uint64_t v34 = v24;
              }
              if (v35 < v36) {
                unsigned int v14 = (const Node *)v22;
              }
              else {
                unsigned int v14 = v42;
              }
            }
          }
          else
          {
            uint64_t v34 = v24;
            unsigned int v14 = v42;
            int v13 = a4;
          }
        }
        else
        {
          *(_DWORD *)(v22 + 8) = 1310740000;
          uint64_t v34 = v24;
          unsigned int v14 = v42;
        }
        ++v18;
        if (v21 == 2) {
          goto LABEL_38;
        }
        int v15 = v26;
        int v16 = v43;
        int v20 = v44;
        int v23 = v14;
        uint64_t v24 = v34;
        int v19 = (2 * v19) & 0x22;
      }
      else
      {
        uint64_t v34 = v24;
        unsigned int v14 = v23;
      }
      --v21;
      v22 += 24;
      if (v21 <= 1) {
        goto LABEL_38;
      }
    }
  }
  int v18 = 0;
  int v17 = 0;
  uint64_t v34 = 20000;
LABEL_38:
  *a11 += v18;
  *a12 += v17;
  if (v34 != 20000)
  {
    if (*(_DWORD *)(a8 + 224) >= (int)v34) {
      BestData::newOrTiedBestNode(a8 + 192, v34, v14, 0);
    }
    ++*(_DWORD *)(a8 + 4 * (v34 + 5000) + 320);
    ++*v39;
  }
  return v34;
}

uint64_t Node::scoreNodeSuccessorsSkipOne(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v12 = a8;
  uint64_t v39 = a1;
  int v40 = (_DWORD *)(a8 + 302464);
  if (*(_WORD *)(a2 + 8) == 20000) {
    int v13 = -2;
  }
  else {
    int v13 = *(_DWORD *)a2;
  }
  if (a7 < 1)
  {
    int v14 = 0;
    int v46 = 0;
    int v41 = 20000;
    goto LABEL_43;
  }
  int v46 = 0;
  int v14 = 0;
  uint64_t v15 = (a10 + a9);
  if (a3) {
    int v16 = 32;
  }
  else {
    int v16 = 0;
  }
  if (a3) {
    int v17 = *(__int16 *)(a2 + 8);
  }
  else {
    int v17 = 20000;
  }
  int v18 = *(_DWORD *)(a2 + 4);
  unsigned int v19 = a7 + 1;
  uint64_t v20 = (uint64_t)a1;
  int v41 = 20000;
  int v42 = a4;
  int v21 = v18;
  int v22 = v13;
  int v23 = v17;
  while (1)
  {
    int v24 = *(__int16 *)(v20 + 10);
    if (v24 <= a4)
    {
      if (*(__int16 *)(v20 + 8) <= a4)
      {
        __int16 v25 = *(_WORD *)(v20 + 8);
        int v26 = 17;
      }
      else
      {
        __int16 v25 = 20000;
        *(_WORD *)(v20 + 8) = 20000;
        int v26 = 1;
      }
      ++v46;
      v16 |= v26;
    }
    else
    {
      *(_DWORD *)(v20 + 8) = 1310740000;
      __int16 v25 = 20000;
      int v24 = 20000;
    }
    if ((v16 & 0x61) != 0) {
      break;
    }
LABEL_37:
    --v19;
    v20 += 24;
    if (v19 <= 1) {
      goto LABEL_43;
    }
  }
  int v47 = v18;
  int v48 = v17;
  int v49 = v13;
  int v13 = *(_DWORD *)v20;
  int v18 = *(_DWORD *)(v20 + 4);
  int v27 = *(__int16 *)(v20 + 18);
  int v28 = *(unsigned __int8 *)(v20 + 12) + v24;
  uint64_t v29 = v15;
  int v30 = v23 + v15 + *(char *)(v20 + 21);
  if (v30 < v28)
  {
    *(_DWORD *)uint64_t v20 = v22;
    *(_DWORD *)(v20 + 4) = v21 + v27;
    int v31 = *(__int16 *)(v20 + 16);
    if (v31 >= 0) {
      int v32 = v31 << 8;
    }
    else {
      int v32 = 255 * v31;
    }
    *(_DWORD *)(v20 + 12) = v32;
    int v28 = v30;
  }
  int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(v12 + 24), *(unsigned __int16 *)(v20 + 22), v28, a6);
  if (ScoreAllowBackoff_updateNodeInSequence > a5)
  {
    *(_DWORD *)(v20 + 8) = 1310740000;
LABEL_29:
    uint64_t v15 = v29;
    goto LABEL_30;
  }
  uint64_t v34 = v12;
  int v35 = ScoreAllowBackoff_updateNodeInSequence;
  ++*(_DWORD *)(v34 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
  ++v40[1];
  Node::updateScore<false>(v20, ScoreAllowBackoff_updateNodeInSequence);
  if (v35 > v41) {
    goto LABEL_29;
  }
  if (v35 < v41)
  {
    int v41 = v35;
    uint64_t v39 = (unsigned __int16 *)v20;
    goto LABEL_29;
  }
  uint64_t v15 = v29;
  if (*(unsigned __int16 *)(v20 + 22) < v39[11])
  {
    int v41 = v35;
    uint64_t v39 = (unsigned __int16 *)v20;
  }
LABEL_30:
  ++v14;
  if (v19 != 2)
  {
    int v36 = v48 + v15 + v27;
    int v21 = v47 + v27;
    BOOL v37 = v36 < v25;
    if (v36 >= v25) {
      int v23 = v25;
    }
    else {
      int v23 = v48 + v15 + v27;
    }
    int v22 = v49;
    if (!v37)
    {
      int v22 = v13;
      int v21 = v18;
    }
    int v16 = (2 * v16) & 0x66;
    int v17 = v25;
    uint64_t v12 = a8;
    a4 = v42;
    goto LABEL_37;
  }
  uint64_t v12 = a8;
LABEL_43:
  *a11 += v14;
  *a12 += v46;
  if (v41 != 20000)
  {
    if (*(_DWORD *)(v12 + 224) >= v41) {
      BestData::newOrTiedBestNode(v12 + 192, v41, (const Node *)v39, 0);
    }
    ++*(_DWORD *)(v12 + 4 * (v41 + 5000) + 320);
    ++*v40;
  }
  return v41;
}

uint64_t Node::scoreNodeWithPattern(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7, int a8, unsigned char *a9, HmmNet *a10)
{
  int v14 = *(unsigned __int8 *)(a1 + 12) + *(__int16 *)(a1 + 10);
  if (a3 != 1)
  {
    int v15 = a8 + a7 + *(__int16 *)(a2 + 8) + *(char *)(a1 + 21);
    if (a3 == 32 || v15 < v14)
    {
      int v16 = *(__int16 *)(a1 + 16);
      if (v16 >= 0) {
        int v17 = v16 << 8;
      }
      else {
        int v17 = 255 * v16;
      }
      *(_DWORD *)(a1 + 12) = v17;
      int v18 = *(_DWORD *)(a2 + 4) + *(__int16 *)(a1 + 18);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = v18;
      *a9 = 1;
      int v14 = v15;
    }
  }
  uint64_t ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(a6 + 24), *(unsigned __int16 *)(a1 + 22), v14, a5);
  if ((int)ScoreAllowBackoff_updateNodeInSequence <= a4)
  {
    uint64_t v20 = ScoreAllowBackoff_updateNodeInSequence;
    Node::updateScore<false>(a1, ScoreAllowBackoff_updateNodeInSequence);
    if (*(_DWORD *)(a6 + 224) >= (int)v20) {
      BestData::newOrTiedBestNode(a6 + 192, v20, (const Node *)a1, a10);
    }
    uint64_t v21 = a6 + 4 * (v20 + 5000);
    ++*(_DWORD *)(v21 + 151392);
    ++*(_DWORD *)(a6 + 302468);
    ++*(_DWORD *)(v21 + 320);
    ++*(_DWORD *)(a6 + 302464);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 1310740000;
    return 20000;
  }
  return v20;
}

uint64_t Node::scoreNodeSuccessorsSkipMany(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v12 = a8;
  int v36 = a1;
  BOOL v37 = (_DWORD *)(a8 + 302464);
  if (*(_WORD *)(a2 + 8) == 20000) {
    int v13 = -2;
  }
  else {
    int v13 = *(_DWORD *)a2;
  }
  if (a7 < 1)
  {
    int v14 = 0;
    int v43 = 0;
    int v38 = 20000;
    goto LABEL_44;
  }
  int v43 = 0;
  int v14 = 0;
  uint64_t v15 = (a10 + a9);
  if (a3) {
    int v16 = 32;
  }
  else {
    int v16 = 0;
  }
  if (a3) {
    int v17 = *(__int16 *)(a2 + 8);
  }
  else {
    int v17 = 20000;
  }
  int v18 = *(_DWORD *)(a2 + 4);
  unsigned int v19 = a7 + 1;
  uint64_t v20 = (uint64_t)a1;
  int v38 = 20000;
  int v39 = a4;
  while (1)
  {
    int v21 = *(__int16 *)(v20 + 10);
    if (v21 <= a4)
    {
      if (*(__int16 *)(v20 + 8) <= a4)
      {
        __int16 v22 = *(_WORD *)(v20 + 8);
        int v23 = 17;
      }
      else
      {
        __int16 v22 = 20000;
        *(_WORD *)(v20 + 8) = 20000;
        int v23 = 1;
      }
      ++v43;
      v16 |= v23;
    }
    else
    {
      *(_DWORD *)(v20 + 8) = 1310740000;
      __int16 v22 = 20000;
      int v21 = 20000;
    }
    if ((v16 & 0x61) == 0) {
      goto LABEL_38;
    }
    int v44 = *(_DWORD *)v20;
    int v45 = *(_DWORD *)(v20 + 4);
    __int16 v46 = v22;
    int v24 = *(__int16 *)(v20 + 18);
    int v25 = *(unsigned __int8 *)(v20 + 12) + v21;
    uint64_t v26 = v15;
    int v27 = v17;
    int v28 = v17 + v15 + *(char *)(v20 + 21);
    if (v28 < v25)
    {
      *(_DWORD *)uint64_t v20 = v13;
      *(_DWORD *)(v20 + 4) = v18 + v24;
      int v29 = *(__int16 *)(v20 + 16);
      if (v29 >= 0) {
        int v30 = v29 << 8;
      }
      else {
        int v30 = 255 * v29;
      }
      *(_DWORD *)(v20 + 12) = v30;
      int v25 = v28;
    }
    int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(v12 + 24), *(unsigned __int16 *)(v20 + 22), v25, a6);
    if (ScoreAllowBackoff_updateNodeInSequence > a5)
    {
      *(_DWORD *)(v20 + 8) = 1310740000;
LABEL_29:
      uint64_t v15 = v26;
      goto LABEL_30;
    }
    uint64_t v32 = v12;
    int v33 = ScoreAllowBackoff_updateNodeInSequence;
    ++*(_DWORD *)(v32 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
    ++v37[1];
    Node::updateScore<false>(v20, ScoreAllowBackoff_updateNodeInSequence);
    if (v33 > v38) {
      goto LABEL_29;
    }
    if (v33 < v38)
    {
      int v38 = v33;
      int v36 = (unsigned __int16 *)v20;
      goto LABEL_29;
    }
    uint64_t v15 = v26;
    if (*(unsigned __int16 *)(v20 + 22) < v36[11])
    {
      int v38 = v33;
      int v36 = (unsigned __int16 *)v20;
    }
LABEL_30:
    ++v14;
    if (v19 == 2) {
      break;
    }
    int v34 = v27 + v15 + v24;
    if (v34 >= v46) {
      int v17 = v46;
    }
    else {
      int v17 = v27 + v15 + v24;
    }
    if (v34 < v46)
    {
      v18 += v24;
    }
    else
    {
      int v13 = v44;
      int v18 = v45;
    }
    int v16 = (2 * v16) & 0x66 | v16 & 0x40;
    uint64_t v12 = a8;
    a4 = v39;
LABEL_38:
    --v19;
    v20 += 24;
    if (v19 <= 1) {
      goto LABEL_44;
    }
  }
  uint64_t v12 = a8;
LABEL_44:
  *a11 += v14;
  *a12 += v43;
  if (v38 != 20000)
  {
    if (*(_DWORD *)(v12 + 224) >= v38) {
      BestData::newOrTiedBestNode(v12 + 192, v38, (const Node *)v36, 0);
    }
    ++*(_DWORD *)(v12 + 4 * (v38 + 5000) + 320);
    ++*v37;
  }
  return v38;
}

uint64_t Node::scoreNodeSuccessorsNBest(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v12 = a8;
  int v47 = a1;
  int v48 = (_DWORD *)(a8 + 302464);
  int v13 = *(__int16 *)(a2 + 8);
  if (v13 == 20000) {
    int v14 = -2;
  }
  else {
    int v14 = *(_DWORD *)a2;
  }
  if (a7 >= 1)
  {
    int v55 = 0;
    int v15 = 0;
    int v50 = a4;
    if (a3)
    {
      int v16 = 32;
    }
    else
    {
      int v13 = 20000;
      int v16 = 0;
    }
    int v17 = *(_DWORD *)(a2 + 4);
    uint64_t v45 = a8 + 302936;
    unsigned int v18 = a7 + 1;
    unsigned int v19 = a1;
    int v49 = 20000;
    while (1)
    {
      int v20 = (__int16)v19[5];
      if (v20 <= a4)
      {
        if ((__int16)v19[4] <= a4)
        {
          __int16 v21 = v19[4];
          int v22 = 17;
        }
        else
        {
          __int16 v21 = 20000;
          v19[4] = 20000;
          int v22 = 1;
        }
        ++v55;
        v16 |= v22;
      }
      else
      {
        *((_DWORD *)v19 + 2) = 1310740000;
        __int16 v21 = 20000;
        int v20 = 20000;
      }
      if ((v16 & 0x61) != 0)
      {
        int v23 = *(_DWORD *)v19;
        int v24 = *((_DWORD *)v19 + 1);
        int v25 = *((unsigned __int8 *)v19 + 12) + v20;
        int v26 = a10 + a9 + v13 + *((char *)v19 + 21);
        int v27 = v26 - v25;
        if (v26 - v25 < 0)
        {
          int v27 = v25 - v26;
          *(_DWORD *)unsigned int v19 = v14;
          *((_DWORD *)v19 + 1) = v17;
          int v28 = (__int16)v19[8];
          if (v28 >= 0) {
            int v29 = v28 << 8;
          }
          else {
            int v29 = 255 * v28;
          }
          *((_DWORD *)v19 + 3) = v29;
          int v25 = v26;
          int v53 = v24;
          int v54 = v23;
        }
        else
        {
          int v53 = v17;
          int v54 = v14;
        }
        int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(v12 + 24), v19[11], v25, a6);
        if (a5 >= ScoreAllowBackoff_updateNodeInSequence)
        {
          int v31 = ScoreAllowBackoff_updateNodeInSequence;
          ++*(_DWORD *)(v12 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
          ++v48[1];
          int v32 = *((_DWORD *)v19 + 3);
          int v33 = *((unsigned __int8 *)v19 + 20);
          int v34 = ((v32 >> 8) - v33) << 8;
          int v35 = v34 | v33;
          int v36 = v34 - ((v34 >> 31) & (v34 >> 8));
          int v37 = (v32 >> 8) + ScoreAllowBackoff_updateNodeInSequence;
          BOOL v38 = v32 < 256;
          if (v32 >= 256) {
            int v39 = v36;
          }
          else {
            int v39 = v35;
          }
          *((_DWORD *)v19 + 3) = v39;
          if (v38) {
            unsigned __int16 v40 = ScoreAllowBackoff_updateNodeInSequence;
          }
          else {
            unsigned __int16 v40 = v37;
          }
          v19[4] = v40;
          v19[5] = ScoreAllowBackoff_updateNodeInSequence;
          if (v27 <= a5 - ScoreAllowBackoff_updateNodeInSequence)
          {
            int v41 = *((_DWORD *)v19 + 1);
            uint64_t v56 = 0;
            int v42 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v45, &v56);
            uint64_t v43 = v56;
            *(_DWORD *)(v56 + 4) = v41;
            *(_DWORD *)(v43 + 8) = v53;
            uint64_t v12 = a8;
            *(_DWORD *)uint64_t v43 = v54;
            *(_WORD *)(v43 + 12) = v27;
            *((_DWORD *)v19 + 1) = v42;
          }
          if (v31 <= v49 && (v31 < v49 || v19[11] < v47[11]))
          {
            int v49 = v31;
            int v47 = v19;
          }
        }
        else
        {
          *((_DWORD *)v19 + 2) = 1310740000;
        }
        ++v15;
        if (v18 == 2) {
          goto LABEL_41;
        }
        int v13 = v21;
        int v17 = v24;
        int v14 = v23;
        int v16 = (2 * v16) & 0x22;
        a4 = v50;
      }
      --v18;
      v19 += 12;
      if (v18 <= 1) {
        goto LABEL_41;
      }
    }
  }
  int v15 = 0;
  int v55 = 0;
  int v49 = 20000;
LABEL_41:
  *a11 += v15;
  *a12 += v55;
  if (v49 != 20000)
  {
    if (*(_DWORD *)(v12 + 224) >= v49) {
      BestData::newOrTiedBestNode(v12 + 192, v49, (const Node *)v47, 0);
    }
    ++*(_DWORD *)(v12 + 4 * (v49 + 5000) + 320);
    ++*v48;
  }
  return v49;
}

uint64_t Node::scoreNodeSuccessorsSkipOneNBest(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  int v12 = a4;
  int v47 = a1;
  int v48 = (_DWORD *)(a8 + 302464);
  if (*(_WORD *)(a2 + 8) == 20000) {
    int v13 = -2;
  }
  else {
    int v13 = *(_DWORD *)a2;
  }
  if (a7 >= 1)
  {
    int v55 = 0;
    int v14 = 0;
    int v59 = v13;
    int v60 = a10 + a9;
    if (a3) {
      int v15 = *(__int16 *)(a2 + 8);
    }
    else {
      int v15 = 20000;
    }
    if (a3) {
      int v16 = 32;
    }
    else {
      int v16 = 0;
    }
    int v17 = *(_DWORD *)(a2 + 4);
    uint64_t v49 = a8 + 302936;
    unsigned int v18 = a7 + 1;
    unsigned int v19 = a1;
    int v50 = 20000;
    int v20 = v15;
    int v21 = v17;
    while (1)
    {
      int v22 = (__int16)v19[5];
      if (v22 <= v12)
      {
        if ((__int16)v19[4] <= v12)
        {
          __int16 v23 = v19[4];
          int v24 = 17;
        }
        else
        {
          __int16 v23 = 20000;
          v19[4] = 20000;
          int v24 = 1;
        }
        ++v55;
        v16 |= v24;
      }
      else
      {
        *((_DWORD *)v19 + 2) = 1310740000;
        __int16 v23 = 20000;
        int v22 = 20000;
      }
      if ((v16 & 0x61) != 0) {
        break;
      }
LABEL_43:
      --v18;
      v19 += 12;
      if (v18 <= 1) {
        goto LABEL_48;
      }
    }
    int v26 = *(_DWORD *)v19;
    int v25 = *((_DWORD *)v19 + 1);
    int v27 = *((unsigned __int8 *)v19 + 12) + v22;
    int v28 = v15 + v60 + *((char *)v19 + 21);
    int v29 = v28 - v27;
    int v62 = v13;
    int v57 = v16;
    int v58 = v20;
    int v61 = v17;
    if (v28 - v27 < 0)
    {
      int v29 = v27 - v28;
      *(_DWORD *)unsigned int v19 = v59;
      *((_DWORD *)v19 + 1) = v21;
      int v30 = (__int16)v19[8];
      if (v30 >= 0) {
        int v31 = v30 << 8;
      }
      else {
        int v31 = 255 * v30;
      }
      *((_DWORD *)v19 + 3) = v31;
      int v27 = v28;
      int v59 = v26;
      int v54 = v25;
    }
    else
    {
      int v54 = v21;
    }
    int v32 = (__int16)v19[9];
    int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(a8 + 24), v19[11], v27, a6);
    if (a5 >= ScoreAllowBackoff_updateNodeInSequence)
    {
      int v34 = ScoreAllowBackoff_updateNodeInSequence;
      ++*(_DWORD *)(a8 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
      ++v48[1];
      int v35 = *((_DWORD *)v19 + 3);
      int v36 = *((unsigned __int8 *)v19 + 20);
      int v37 = ((v35 >> 8) - v36) << 8;
      if (v35 < 256)
      {
        int v38 = v37 | v36;
        unsigned __int16 v39 = ScoreAllowBackoff_updateNodeInSequence;
      }
      else
      {
        int v38 = v37 - ((v37 >> 31) & (v37 >> 8));
        unsigned __int16 v39 = (v35 >> 8) + ScoreAllowBackoff_updateNodeInSequence;
      }
      *((_DWORD *)v19 + 3) = v38;
      v19[4] = v39;
      v19[5] = ScoreAllowBackoff_updateNodeInSequence;
      if (v29 <= a5 - ScoreAllowBackoff_updateNodeInSequence)
      {
        int v40 = *((_DWORD *)v19 + 1);
        uint64_t v63 = 0;
        int v41 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v49, &v63);
        uint64_t v42 = v63;
        *(_DWORD *)(v63 + 4) = v40;
        *(_DWORD *)(v42 + 8) = v54;
        *(_DWORD *)uint64_t v42 = v59;
        *(_WORD *)(v42 + 12) = v29;
        *((_DWORD *)v19 + 1) = v41;
      }
      if (v34 <= v50)
      {
        if (v34 >= v50)
        {
          int v12 = a4;
          if (v19[11] < v47[11])
          {
            int v50 = v34;
            int v47 = v19;
          }
          goto LABEL_36;
        }
        int v50 = v34;
        int v47 = v19;
      }
    }
    else
    {
      *((_DWORD *)v19 + 2) = 1310740000;
    }
    int v12 = a4;
LABEL_36:
    ++v14;
    if (v18 == 2) {
      goto LABEL_48;
    }
    int v15 = v58 + v60 + v32;
    int v43 = v15 - v23;
    if (v43 < 0)
    {
      int v43 = v23 - v15;
      int v59 = v62;
      int v21 = v61;
      int v62 = v26;
      int v61 = v25;
    }
    else
    {
      int v59 = v26;
      int v21 = v25;
      int v15 = v23;
    }
    if (v15 + v43 <= v12)
    {
      uint64_t v63 = 0;
      int v44 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v49, &v63);
      uint64_t v45 = v63;
      *(_DWORD *)(v63 + 4) = v21;
      *(_DWORD *)(v45 + 8) = v61;
      *(_DWORD *)uint64_t v45 = v62;
      *(_WORD *)(v45 + 12) = v43;
      int v21 = v44;
    }
    int v17 = v25;
    int v13 = v26;
    int v20 = v23;
    int v16 = (2 * v57) & 0x66;
    goto LABEL_43;
  }
  int v14 = 0;
  int v55 = 0;
  int v50 = 20000;
LABEL_48:
  *a11 += v14;
  *a12 += v55;
  if (v50 != 20000)
  {
    if (*(_DWORD *)(a8 + 224) >= v50) {
      BestData::newOrTiedBestNode(a8 + 192, v50, (const Node *)v47, 0);
    }
    ++*(_DWORD *)(a8 + 4 * (v50 + 5000) + 320);
    ++*v48;
  }
  return v50;
}

uint64_t Node::scoreNodeWithPatternNBest(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, int a9, unsigned char *a10, HmmNet *a11)
{
  if (a2) {
    int v16 = *(_DWORD *)a2;
  }
  else {
    int v16 = -2;
  }
  int v17 = *(unsigned __int8 *)(a1 + 12) + *(__int16 *)(a1 + 10);
  if (a4 == 1)
  {
    int v18 = -1;
  }
  else
  {
    int v19 = a9 + a8 + *(__int16 *)(a2 + 8) + *(char *)(a1 + 21);
    int v18 = v19 - v17;
    if (a4 == 32) {
      int v20 = -1;
    }
    else {
      int v20 = v19 - v17;
    }
    if (v20 < 0)
    {
      int v21 = *(__int16 *)(a1 + 16);
      if (v21 >= 0) {
        int v22 = v21 << 8;
      }
      else {
        int v22 = 255 * v21;
      }
      *(_DWORD *)(a1 + 12) = v22;
      int v16 = *(_DWORD *)a1;
      int v23 = *(_DWORD *)(a1 + 4);
      int v18 = -v20;
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = a3;
      *a10 = 1;
      int v17 = v19;
      a3 = v23;
    }
  }
  uint64_t ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(a7 + 24), *(unsigned __int16 *)(a1 + 22), v17, a6);
  if ((int)ScoreAllowBackoff_updateNodeInSequence <= a5)
  {
    uint64_t v25 = ScoreAllowBackoff_updateNodeInSequence;
    int v26 = *(_DWORD *)(a1 + 12);
    int v27 = *(unsigned __int8 *)(a1 + 20);
    int v28 = ((v26 >> 8) - v27) << 8;
    int v29 = v28 | v27;
    int v30 = v28 - ((v28 >> 31) & (v28 >> 8));
    int v31 = (v26 >> 8) + ScoreAllowBackoff_updateNodeInSequence;
    BOOL v32 = v26 < 256;
    if (v26 >= 256) {
      int v33 = v30;
    }
    else {
      int v33 = v29;
    }
    *(_DWORD *)(a1 + 12) = v33;
    if (v32) {
      __int16 v34 = ScoreAllowBackoff_updateNodeInSequence;
    }
    else {
      __int16 v34 = v31;
    }
    *(_WORD *)(a1 + 8) = v34;
    *(_WORD *)(a1 + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ScoreAllowBackoff_updateNodeInSequence;
    if (a4 == 33 && (int)ScoreAllowBackoff_updateNodeInSequence + v18 <= a5)
    {
      int v35 = *(_DWORD *)(a1 + 4);
      uint64_t v40 = 0;
      int v36 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(a7 + 302936, &v40);
      uint64_t v37 = v40;
      *(_DWORD *)(v40 + 4) = v35;
      *(_DWORD *)(v37 + 8) = a3;
      *(_DWORD *)uint64_t v37 = v16;
      *(_WORD *)(v37 + 12) = v18;
      *(_DWORD *)(a1 + 4) = v36;
    }
    if (*(_DWORD *)(a7 + 224) >= (int)v25) {
      BestData::newOrTiedBestNode(a7 + 192, v25, (const Node *)a1, a11);
    }
    uint64_t v38 = a7 + 4 * (v25 + 5000);
    ++*(_DWORD *)(v38 + 151392);
    ++*(_DWORD *)(a7 + 302468);
    ++*(_DWORD *)(v38 + 320);
    ++*(_DWORD *)(a7 + 302464);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 1310740000;
    return 20000;
  }
  return v25;
}

uint64_t Node::scoreNodeSuccessorsSkipManyNBest(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v12 = a8;
  int v13 = a4;
  uint64_t v52 = a1;
  int v53 = (_DWORD *)(a8 + 302464);
  int v14 = *(__int16 *)(a2 + 8);
  if (v14 == 20000) {
    int v15 = -2;
  }
  else {
    int v15 = *(_DWORD *)a2;
  }
  if (a7 < 1)
  {
    int v16 = 0;
    int v61 = 0;
    int v55 = 20000;
    goto LABEL_55;
  }
  int v61 = 0;
  int v16 = 0;
  int v65 = a10 + a9;
  if (!a3) {
    int v14 = 20000;
  }
  int v66 = v14;
  if (a3) {
    int v17 = 32;
  }
  else {
    int v17 = 0;
  }
  int v18 = *(_DWORD *)(a2 + 4);
  uint64_t v54 = a8 + 302936;
  unsigned int v19 = a7 + 1;
  int v20 = a1;
  int v55 = 20000;
  int v64 = v18;
  int v21 = v15;
  while (1)
  {
    int v22 = (__int16)v20[5];
    if (v22 <= v13)
    {
      if ((__int16)v20[4] <= v13)
      {
        __int16 v23 = v20[4];
        int v24 = 17;
      }
      else
      {
        __int16 v23 = 20000;
        v20[4] = 20000;
        int v24 = 1;
      }
      ++v61;
      v17 |= v24;
    }
    else
    {
      *((_DWORD *)v20 + 2) = 1310740000;
      __int16 v23 = 20000;
      int v22 = 20000;
    }
    if ((v17 & 0x61) != 0) {
      break;
    }
LABEL_51:
    --v19;
    v20 += 12;
    if (v19 <= 1) {
      goto LABEL_55;
    }
  }
  int v62 = v18;
  int v63 = v15;
  int v25 = *(_DWORD *)v20;
  int v26 = *((_DWORD *)v20 + 1);
  int v27 = *((unsigned __int8 *)v20 + 12) + v22;
  int v28 = v66 + v65 + *((char *)v20 + 21);
  int v29 = v28 - v27;
  if (v28 - v27 < 0)
  {
    int v29 = v27 - v28;
    *(_DWORD *)int v20 = v21;
    *((_DWORD *)v20 + 1) = v64;
    int v30 = (__int16)v20[8];
    if (v30 >= 0) {
      int v31 = v30 << 8;
    }
    else {
      int v31 = 255 * v30;
    }
    *((_DWORD *)v20 + 3) = v31;
    int v27 = v28;
    int v60 = v25;
    int v64 = v26;
  }
  else
  {
    int v60 = v21;
  }
  int v32 = (__int16)v20[9];
  int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*(PelScoreCache **)(v12 + 24), v20[11], v27, a6);
  if (a5 >= ScoreAllowBackoff_updateNodeInSequence)
  {
    uint64_t v34 = v12;
    int v35 = ScoreAllowBackoff_updateNodeInSequence;
    ++*(_DWORD *)(v34 + 4 * (ScoreAllowBackoff_updateNodeInSequence + 5000) + 151392);
    ++v53[1];
    int v36 = *((_DWORD *)v20 + 3);
    int v37 = *((unsigned __int8 *)v20 + 20);
    int v38 = ((v36 >> 8) - v37) << 8;
    if (v36 < 256)
    {
      int v39 = v38 | v37;
      unsigned __int16 v40 = ScoreAllowBackoff_updateNodeInSequence;
    }
    else
    {
      int v39 = v38 - ((v38 >> 31) & (v38 >> 8));
      unsigned __int16 v40 = (v36 >> 8) + ScoreAllowBackoff_updateNodeInSequence;
    }
    *((_DWORD *)v20 + 3) = v39;
    v20[4] = v40;
    v20[5] = ScoreAllowBackoff_updateNodeInSequence;
    if (v29 <= a5 - ScoreAllowBackoff_updateNodeInSequence)
    {
      int v51 = *((_DWORD *)v20 + 1);
      uint64_t v67 = 0;
      int v41 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v54, &v67);
      uint64_t v42 = v67;
      *(_DWORD *)(v67 + 4) = v51;
      *(_DWORD *)(v42 + 8) = v64;
      *(_DWORD *)uint64_t v42 = v60;
      *(_WORD *)(v42 + 12) = v29;
      *((_DWORD *)v20 + 1) = v41;
    }
    if (v35 <= v55 && (v35 < v55 || v20[11] < v52[11]))
    {
      int v55 = v35;
      uint64_t v52 = v20;
    }
  }
  else
  {
    *((_DWORD *)v20 + 2) = 1310740000;
  }
  ++v16;
  if (v19 != 2)
  {
    int v43 = v23;
    int v44 = v66 + v65 + v32;
    if (v23 <= v44)
    {
      int v21 = v25;
    }
    else
    {
      int v43 = v66 + v65 + v32;
      int v21 = v63;
    }
    if (v23 <= v44) {
      int v45 = v26;
    }
    else {
      int v45 = v62;
    }
    if (v23 > v44)
    {
      int v46 = v26;
    }
    else
    {
      int v25 = v63;
      int v46 = v62;
    }
    if (v23 > v44) {
      int v47 = v23 - v44;
    }
    else {
      int v47 = v44 - v23;
    }
    int v66 = v43;
    int v13 = a4;
    if (v47 + v43 <= a4)
    {
      uint64_t v67 = 0;
      int v48 = v21;
      DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(v54, &v67);
      int v21 = v48;
      uint64_t v49 = v67;
      *(_DWORD *)(v67 + 4) = v45;
      *(_DWORD *)(v49 + 8) = v46;
      *(_DWORD *)uint64_t v49 = v25;
      *(_WORD *)(v49 + 12) = v47;
    }
    int v17 = (2 * v17) & 0x66 | v17 & 0x40;
    int v15 = v21;
    int v64 = v45;
    int v18 = v45;
    uint64_t v12 = a8;
    goto LABEL_51;
  }
  uint64_t v12 = a8;
LABEL_55:
  *a11 += v16;
  *a12 += v61;
  if (v55 != 20000)
  {
    if (*(_DWORD *)(v12 + 224) >= v55) {
      BestData::newOrTiedBestNode(v12 + 192, v55, (const Node *)v52, 0);
    }
    ++*(_DWORD *)(v12 + 4 * (v55 + 5000) + 320);
    ++*v53;
  }
  return v55;
}

void NodeNetNode::NodeNetNode(NodeNetNode *this, char a2)
{
  *((void *)this + 1) = 0x100000001;
  *((_DWORD *)this + 4) = 1310740000;
  *(void *)((char *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *((_DWORD *)this + 7) = -65536;
  *((void *)this + 4) = 0;
  *((_WORD *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(void *)this = &unk_26C4DF640;
  *((unsigned char *)this + 42) = a2;
}

void NodeNetNode::~NodeNetNode(NodeNetNode *this)
{
}

{
  PredStruct::~PredStruct((NodeNetNode *)((char *)this + 32));
}

{
  uint64_t vars8;

  PredStruct::~PredStruct((NodeNetNode *)((char *)this + 32));

  JUMPOUT(0x216698730);
}

void PredStruct::~PredStruct(PredStruct *this)
{
  if (*((unsigned __int16 *)this + 4) >= 2u)
  {
    int v2 = *(void **)this;
    if (*(void *)this) {
      MemChunkFree(v2, 0);
    }
  }
}

uint64_t NodeNetNode::sizeObject(uint64_t a1, int a2)
{
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    if (a2 == 3) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 12;
    }
    uint64_t v5 = sizeObject(a1 + 20, a2) + v4;
  }
  else
  {
    uint64_t v5 = 24;
    if (a2 == 3) {
      uint64_t v5 = 0;
    }
  }
  if (a2 == 3)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(unsigned __int16 *)(a1 + 40);
    if (v7 <= 1) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 8 * v7;
    }
    uint64_t v9 = v8 + 16;
    uint64_t v6 = v8 + 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v6 = v9;
    }
  }
  return v6 + v5;
}

uint64_t NodeNetNode::fill(uint64_t this, const NodeNetNode *a2)
{
  int v2 = (char *)a2 + 8;
  if (!a2) {
    int v2 = 0;
  }
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *((_DWORD *)v2 + 2);
  *(_DWORD *)(this + 8) = *(_DWORD *)v2;
  *(_DWORD *)(this + 12) = *((_DWORD *)v2 + 1);
  uint64_t v3 = *(void *)(v2 + 12);
  *(_DWORD *)(this + 28) = *((_DWORD *)v2 + 5);
  *(void *)(this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v3;
  return this;
}

uint64_t NodeNetNode::fillAsEpsilon(NodeNetNode *this, const NodeNetNode *a2)
{
  uint64_t result = (*(uint64_t (**)(NodeNetNode *, const NodeNetNode *))(*(void *)this + 24))(this, a2);
  int v4 = *((unsigned __int8 *)this + 28);
  int v5 = v4 + *((__int16 *)this + 12);
  int v6 = v5 << 8;
  if (v5 < 0)
  {
    char v7 = (v5 + v4 < 0) ^ __OFADD__(v5, v4) | (v5 + v4 == 0);
    int v8 = 255 * v5;
    v6 |= v4;
    if (!v7) {
      int v6 = v8;
    }
  }
  *((_DWORD *)this + 5) = v6;
  return result;
}

uint64_t NodeNetNode::scoreNodeBWBack(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, int a5, int a6, HmmNet *a7)
{
  int v8 = *(_DWORD *)(a1 + 20);
  int v9 = *(unsigned __int8 *)(a1 + 28);
  int v10 = (v8 >> 8) - v9;
  if (v8 <= 255) {
    int v11 = *(unsigned __int8 *)(a1 + 28) | (v10 << 8);
  }
  else {
    int v11 = 255 * v10;
  }
  if (v10 >= 0) {
    int v12 = v10 << 8;
  }
  else {
    int v12 = v11;
  }
  *(_DWORD *)(a1 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v12;
  int v13 = *(__int16 *)(a2 + 8);
  int v14 = *(__int16 *)(a1 + 18);
  uint64_t v15 = 20000;
  if (v13 == 20000)
  {
    if (v14 == 20000) {
      return v15;
    }
  }
  else
  {
    int v16 = *(__int16 *)(a1 + 24);
    if (v16 < 0) {
      int v17 = *(char *)(a1 + 29) + v16;
    }
    else {
      int v17 = *(char *)(a1 + 29);
    }
    LODWORD(v15) = a6 + a5 + v17 + v13;
  }
  int v18 = v12 >> 8;
  if (v18 <= -v9) {
    int v19 = -v9;
  }
  else {
    int v19 = v18;
  }
  if (v19 >= 0 || v14 == 20000) {
    int v21 = 0;
  }
  else {
    int v21 = v19;
  }
  int v22 = v14 - v21;
  if ((int)v15 >= v22)
  {
    LODWORD(v15) = v22;
  }
  else
  {
    int v23 = *(__int16 *)(a1 + 24);
    if (v23 >= 0) {
      int v24 = v23 << 8;
    }
    else {
      int v24 = 255 * v23;
    }
    *(_DWORD *)(a1 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v24;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 4) + *(__int16 *)(a1 + 26);
    int v19 = v24 >> 8;
    *a3 = 1;
  }
  *(_WORD *)(a1 + 18) = v15;
  __int16 v25 = v15;
  if (*(_DWORD *)(a4 + 224) >= (int)v15)
  {
    BestData::newOrTiedBestNode(a4 + 192, v15, (const Node *)(a1 + 8), a7);
    __int16 v25 = *(_WORD *)(a1 + 18);
  }
  *(_WORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v15 + (v19 & ~(unsigned __int16)(v19 >> 31));
  return v25;
}

uint64_t NodeNetNode::addAcousticsToScores(NodeNetNode *this, int a2, PelScoreCache **a3)
{
  uint64_t result = PelScoreCache::getScoreNoBackoff(a3[3], *((unsigned __int16 *)this + 15));
  __int16 v6 = result;
  int v7 = result + *((__int16 *)this + 9);
  *((_WORD *)this + 9) += result;
  if (*((_DWORD *)a3 + 56) >= v7) {
    uint64_t result = BestData::newOrTiedBestNode((uint64_t)(a3 + 24), v7, (NodeNetNode *)((char *)this + 8), 0);
  }
  int v8 = *((unsigned __int16 *)this + 8);
  if (v8 != 20000) {
    *((_WORD *)this + 8) = v8 + v6;
  }
  return result;
}

uint64_t *PredStruct::getBestPredWithTrace(unsigned __int16 *a1, _DWORD *a2, uint64_t a3, int a4)
{
  int v4 = a1[4];
  int v5 = *(uint64_t **)a1;
  int v6 = v4 - 1;
  if (v4 == 1)
  {
    *a2 = *((_DWORD *)v5 + 1);
    return *(uint64_t **)a1;
  }
  else
  {
    uint64_t v12 = *v5;
    int v11 = v5 + 1;
    int v10 = (_DWORD *)v12;
    int v13 = *(__int16 *)(v12 + 8);
    uint64_t v14 = *(unsigned int *)(v12 + 4);
    do
    {
      int v15 = *(__int16 *)(*v11 + 8) - v13;
      if (v15 < 0)
      {
        int v15 = v13 - *(__int16 *)(*v11 + 8);
        int v7 = (_DWORD *)*v11;
        int v13 = *(__int16 *)(*v11 + 8);
        uint64_t v16 = *(unsigned int *)(*v11 + 4);
      }
      else
      {
        int v7 = v10;
        uint64_t v16 = v14;
        int v10 = (_DWORD *)*v11;
        LODWORD(v14) = *(_DWORD *)(*v11 + 4);
      }
      if (v15 + v13 <= a4)
      {
        int v17 = *v10;
        uint64_t v22 = 0;
        uint64_t v18 = DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(a3, &v22);
        uint64_t v19 = v22;
        *(_DWORD *)(v22 + 4) = v16;
        *(_DWORD *)(v19 + 8) = v14;
        *(_DWORD *)uint64_t v19 = v17;
        *(_WORD *)(v19 + 12) = v15;
        uint64_t v14 = v18;
      }
      else
      {
        uint64_t v14 = v16;
      }
      ++v11;
      int v10 = v7;
      --v6;
    }
    while (v6);
    *a2 = v14;
  }
  return (uint64_t *)v7;
}

void TraceNode::~TraceNode(TraceNode *this)
{
  *(void *)this = &unk_26C4E5A68;
  uint64_t v1 = (TraceNode *)((char *)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  PredStruct::~PredStruct(v1);
}

{
  PredStruct *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C4E5A68;
  uint64_t v1 = (TraceNode *)((char *)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  PredStruct::~PredStruct(v1);

  JUMPOUT(0x216698730);
}

uint64_t TraceNode::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = NodeNetNode::sizeObject(a1, a2);
  uint64_t v5 = sizeObject<SeederBlock>(a1 + 64, a2);
  uint64_t v6 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v6 = 8;
  }
  uint64_t v7 = 12;
  if (a2 == 3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 12;
  }
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  if (*(void *)(a1 + 88)) {
    BOOL v9 = (a2 & 0xFFFFFFFE) == 2;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    uint64_t v7 = 0;
  }
  return (v8 | (a2 != 3)) + 4 * (a2 != 3) + v4 + v5 + v7 + v6;
}

uint64_t TraceNode::fillTraceNode(uint64_t result, __int16 a2, uint64_t *a3, __int16 a4)
{
  uint64_t v4 = *a3;
  *(_DWORD *)(result + 52) = *((_DWORD *)a3 + 2);
  *(void *)(result + 44) = v4;
  *(_WORD *)(result + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a4;
  *(_WORD *)(result + 56) = a2;
  return result;
}

uint64_t TraceNode::fill(uint64_t this, const NodeNetNode *a2)
{
  int v2 = (char *)a2 + 8;
  if (!a2) {
    int v2 = 0;
  }
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *((_DWORD *)v2 + 2);
  *(_DWORD *)(this + 8) = *(_DWORD *)v2;
  *(_DWORD *)(this + 12) = *((_DWORD *)v2 + 1);
  uint64_t v3 = *(void *)(v2 + 12);
  *(_DWORD *)(this + 28) = *((_DWORD *)v2 + 5);
  *(void *)(this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v3;
  *(_WORD *)(this + 56) = *((_WORD *)a2 + 28);
  uint64_t v4 = *(void *)((char *)a2 + 44);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *(void *)(this + 44) = v4;
  *(_WORD *)(this + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *((_WORD *)a2 + 40);
  return this;
}

unint64_t SeederStruct::updateSeederList(unint64_t result, signed int a2, uint64_t a3)
{
  unint64_t v4 = result;
  int32x2_t v5 = (int32x2_t)(a3 - 8);
  unsigned int v6 = *(_DWORD *)(result + 8);
  if (!v6)
  {
    int v17 = *(int32x2_t **)result;
    *int v17 = v5;
    v17[1].i32[0] = a2;
    v17[1].i32[1] = a2;
    int v16 = 1;
LABEL_13:
    *(_DWORD *)(v4 + 8) = v16;
    return result;
  }
  uint64_t v7 = v6 - 1;
  uint64_t v8 = *(int32x2_t **)result;
  uint64_t v9 = *(void *)result + 16 * v7;
  signed int v12 = *(_DWORD *)(v9 + 12);
  int v10 = (signed int *)(v9 + 12);
  signed int v11 = v12;
  int v13 = v12 - 1;
  if (v12 < a2) {
    int v14 = v11 + 1;
  }
  else {
    int v14 = v13;
  }
  if (v14 != a2 || *(void *)&v8[2 * v7] != *(void *)&v5)
  {
    if (*(_DWORD *)(result + 12) == v6 && v6 >> 1 != -1 && v6 + (v6 >> 1) + 1 >= v6)
    {
      uint64_t result = DgnArray<DgnPrimArray<double>>::reallocElts(result, (v6 >> 1) + 1, 0);
      uint64_t v8 = *(int32x2_t **)v4;
      unsigned int v6 = *(_DWORD *)(v4 + 8);
    }
    int v15 = &v8[2 * v6];
    *int v15 = v5;
    v15[1] = vdup_n_s32(a2);
    int v16 = v6 + 1;
    goto LABEL_13;
  }
  signed int *v10 = a2;
  return result;
}

uint64_t TraceNode::scoreNode(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, unsigned char *a7, PelScoreCache **a8, int a9, int a10, _DWORD *a11, HmmNet *a12)
{
  *a7 = 0;
  uint64_t v14 = a1 + 8;
  int v15 = *(__int16 *)(a1 + 18);
  if (*(_WORD *)(a2 + 8) == 20000)
  {
    *(void *)(a1 + 88) = v14;
    if (v15 == 20000)
    {
      return 20000;
    }
    else
    {
      ++*a11;
      int v19 = *(unsigned __int8 *)(a1 + 20) + v15;
      int v20 = (Node *)(a1 + 8);
      return Node::updateNodeOneBest1(v20, v19, a4, a5, a8, a12);
    }
  }
  else
  {
    ++*a11;
    if (v15 == 20000)
    {
      *a7 = 1;
      *(void *)(a1 + 88) = a2;
      uint64_t v18 = a1 + 8;
      return Node::scoreNodeInactiveCurrActiveSeed(v18, a2, a4, a5, a8, a9, a10, a12);
    }
    else
    {
      uint64_t result = Node::scoreNodeActiveCurrActiveSeed(a1 + 8, a2, a4, a5, a7, a8, a9, a10, a12);
      if (*a7) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = v14;
      }
      *(void *)(a1 + 88) = v21;
    }
  }
  return result;
}

uint64_t Node::scoreNodeInactiveCurrActiveSeed(uint64_t a1, uint64_t a2, int a3, int a4, PelScoreCache **a5, int a6, int a7, HmmNet *a8)
{
  int v8 = a7 + a6 + *(__int16 *)(a2 + 8) + *(char *)(a1 + 21);
  int v9 = *(__int16 *)(a1 + 16);
  if (v9 >= 0) {
    int v10 = v9 << 8;
  }
  else {
    int v10 = 255 * v9;
  }
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4) + *(__int16 *)(a1 + 18);
  return Node::updateNodeOneBest1((Node *)a1, v8, a3, a4, a5, a8);
}

unint64_t TraceNode::maybeSeedNode(unint64_t this, int a2, signed int a3)
{
  if (*(__int16 *)(this + 18) <= a2) {
    return SeederStruct::updateSeederList(this + 64, a3, *(void *)(this + 88));
  }
  return this;
}

void TraceExternalOutPort::seedOutPortForTraceBack2(TraceExternalOutPort *this, int a2, signed int a3, NetMgr *a4)
{
  int v4 = *((__int16 *)this + 4);
  if (v4 <= a2)
  {
    uint64_t BestPred = PredStruct::getBestPred((TraceExternalOutPort *)((char *)this + 16));
    int v9 = (char *)this + 32;
    SeederStruct::updateSeederList((unint64_t)this + 32, a3, BestPred);
    int v10 = *((_DWORD *)this + 10);
    if (!v10
      || ((int v11 = *(_DWORD *)(*(void *)v9 + 8),
           int v12 = *(_DWORD *)(*(void *)v9 + 16 * (v10 - 1) + 12),
           v11 != a3)
        ? (BOOL v13 = v12 == v11)
        : (BOOL v13 = 0),
          v13))
    {
      unsigned int v14 = -1;
    }
    else if (v12 >= v11)
    {
      unsigned int v14 = a3 - v11;
    }
    else
    {
      unsigned int v14 = v11 - a3;
    }
    int v15 = *((__int16 *)a4 + 124);
    while (*((_DWORD *)this + 14) < v14)
      BitArray::add((TraceExternalOutPort *)((char *)this + 48), 0);
    BitArray::add((TraceExternalOutPort *)((char *)this + 48), v4 <= v15);
  }
}

__n128 NodeData::maskedCwidac@<Q0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *a1;
  *(_DWORD *)a2 = *a1;
  if (v2 >> 25 == 126)
  {
    result.n128_u64[0] = *(void *)(a1 + 3);
    *(void *)(a2 + 12) = result.n128_u64[0];
    *(_DWORD *)(a2 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a1[5];
    *(void *)(a2 + 4) = 0x3FFFLL;
  }
  else
  {
    *(_DWORD *)(a2 + 4) = a1[1];
    __n128 result = *(__n128 *)(a1 + 2);
    *(__n128 *)(a2 + 8) = result;
  }
  return result;
}

uint64_t NodeData::NodeData(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, __int16 a5, __int16 a6)
{
  uint64_t v10 = *a4;
  *(_WORD *)(a1 + 8) = *((_WORD *)a4 + 4);
  *(void *)a1 = v10;
  *(unsigned char *)(a1 + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *((unsigned char *)a4 + 10);
  *(unsigned char *)(a1 + 11) = *((unsigned char *)a4 + 11);
  NodeData::maskedCwidac(a3, a1 + 12);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 22);
  *(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 10);
  *(_WORD *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a5;
  *(_WORD *)(a1 + 42) = a6;
  int v11 = *(int *)(a2 + 12) >> 8;
  int v12 = *(unsigned __int8 *)(a2 + 20);
  if (v11 <= -v12) {
    int v11 = -v12;
  }
  *(_WORD *)(a1 + 44) = v11;
  return a1;
}

uint64_t sizeObject<SeederBlock>(uint64_t a1, int a2)
{
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t result = 12;
  }
  else {
    uint64_t result = 16;
  }
  if (a2 == 3) {
    return 0;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    uint64_t v5 = 1;
    if ((int)v4 > 0) {
      uint64_t v5 = v4 + 1;
    }
    if (a2) {
      result *= v5;
    }
    else {
      result *= v5 + (*(_DWORD *)(a1 + 12) - v4);
    }
  }
  return result;
}

uint64_t DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::createRawData(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 32);
    do
    {
      if (v5 == *(_DWORD *)(a1 + 8))
      {
        DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::addChunk(a1);
        unsigned int v5 = *(_DWORD *)(a1 + 32);
      }
      uint64_t v4 = *(void *)(*(void *)a1 + 8 * v5++);
      *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v5;
      *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v4;
    }
    while (!v4);
  }
  uint64_t result = *(unsigned int *)(v4 + 8);
  *a2 = v4;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = **(void **)(a1 + 16);
  return result;
}

unint64_t DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::addChunk(uint64_t a1)
{
  unint64_t result = (unint64_t)MemChunkAlloc(*(unsigned int *)(a1 + 24), 0);
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  int v5 = v4 << 16;
  if (v4 == *(_DWORD *)(a1 + 12))
  {
    unint64_t result = DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
    unsigned int v4 = *(_DWORD *)(a1 + 8);
  }
  *(void *)(*(void *)a1 + 8 * v4) = v3;
  *(_DWORD *)(a1 + 8) = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 28);
  if (v6 < 2)
  {
    int v8 = v5;
    unint64_t v9 = v3;
  }
  else
  {
    unsigned int v7 = v6 + 1;
    do
    {
      int v8 = v5 + 1;
      *(_DWORD *)(v3 + 8) = v5;
      unint64_t v9 = v3 + 16;
      *(void *)unint64_t v3 = v3 + 16;
      --v7;
      v3 += 16;
      ++v5;
    }
    while (v7 > 2);
  }
  *(_DWORD *)(v9 + 8) = v8;
  *(void *)unint64_t v9 = 0;
  return result;
}

void errorBadCollationId(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t TLattice::TLattice(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = (uint64_t)a1;
  *a1 = &unk_26C4E5368;
  a1[1] = -1;
  int v16 = (TAllocator *)(a1 + 3);
  TFsa::TFsa((TFsa *)(a1 + 3));
  int v17 = (TAllocator *)(v15 + 264);
  TAllocator::TAllocator((TAllocator *)(v15 + 264), 2048);
  *(void *)(v15 + 256) = a9;
  *(void *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a8;
  *(unsigned char *)(v15 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = a7;
  std::vector<TState *>::vector(v104, a4);
  uint64_t v97 = a6;
  if (a3)
  {
    uint64_t v96 = v15;
    uint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = TAllocator::allocate(v17, 144);
      uint64_t v24 = *(void *)(*a2 + 8 * v22);
      uint64_t v25 = *(void *)v24;
      int v26 = *(__int32 **)(v24 + 8);
      int v27 = *(_DWORD *)(v24 + 16);
      uint64_t v28 = *(void *)(v24 + 40);
      uint64_t v29 = *(void *)(v24 + 48);
      uint64_t v30 = *(void *)(v24 + 56);
      long long v31 = *(_OWORD *)(v24 + 112);
      v103[2] = *(_OWORD *)(v24 + 96);
      v103[3] = v31;
      long long v32 = *(_OWORD *)(v24 + 144);
      v103[4] = *(_OWORD *)(v24 + 128);
      v103[5] = v32;
      long long v33 = *(_OWORD *)(v24 + 80);
      v103[0] = *(_OWORD *)(v24 + 64);
      v103[1] = v33;
      TLatticeTransData::TLatticeTransData(v23, v17, v25, v26, v27, v28, v29, v30, v103);
      uint64_t v38 = *(void *)(*a2 + 8 * v22);
      unint64_t v39 = *(void *)(v38 + 24);
      if (v39 >= a4)
      {
        tknPrintf("Error: The source index (%llu) is larger than the given state count (%llu)\n", v34, v35, v36, v37, *(void *)(v38 + 24), a4);
        std::string::basic_string[abi:ne180100]<0>(v99, &byte_2140B33BB);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v100) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v99;
          uint64_t v102 = v100;
        }
        *(void *)__p = &unk_26C4E0710;
        if (v102 >= 0) {
          int v66 = &__p[8];
        }
        else {
          int v66 = *(const char **)&__p[8];
        }
        conditionalAssert(v66, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 58, v58, v59);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v102) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v100) < 0) {
          operator delete(v99[0]);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        void *exception = byte_26C4DF190;
        unint64_t v68 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v68, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v77 = *(_OWORD *)__p;
          exception[3] = *(void *)&__p[16];
          *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v77;
        }
        void *exception = &unk_26C4E0710;
      }
      unint64_t v40 = *(void *)(v38 + 32);
      if (v40 >= a4)
      {
        tknPrintf("Error: The target index (%llu) is larger than the given state count (%llu)\n", v34, v35, v36, v37, v40, a4);
        std::string::basic_string[abi:ne180100]<0>(v99, &byte_2140B33BB);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v100) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v99;
          uint64_t v102 = v100;
        }
        *(void *)__p = &unk_26C4E0710;
        if (v102 >= 0) {
          int v63 = &__p[8];
        }
        else {
          int v63 = *(const char **)&__p[8];
        }
        conditionalAssert(v63, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 65, v56, v57);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v102) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v100) < 0) {
          operator delete(v99[0]);
        }
        int v64 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *int v64 = byte_26C4DF190;
        int v65 = (std::string *)(v64 + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v76 = *(_OWORD *)__p;
          v64[3] = *(void *)&__p[16];
          *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v76;
        }
        *int v64 = &unk_26C4E0710;
      }
      int v41 = (void *)*((void *)v104[0] + v39);
      uint64_t v42 = (void *)*((void *)v104[0] + v40);
      if (v41)
      {
        if (!v42) {
          goto LABEL_9;
        }
      }
      else
      {
        int v41 = TFsa::newState(v16, 0);
        *((void *)v104[0] + *(void *)(*(void *)(*a2 + 8 * v22) + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4)) = v41;
        if (!v42)
        {
LABEL_9:
          uint64_t v42 = TFsa::newState(v16, 0);
          *((void *)v104[0] + *(void *)(*(void *)(*a2 + 8 * v22) + PredStruct::~PredStruct((NodeNetNode *)((char *)this + 32)) = v42;
        }
      }
      TFsa::newTrans(v16, (uint64_t)v41, (uint64_t)v42, v23);
      if (a3 == ++v22)
      {
        uint64_t v15 = v96;
        goto LABEL_14;
      }
    }
  }
  if (!a4)
  {
    tknPrintf("Error: Lattice needs at least one state\n", v18, v19, v20, v21);
    std::string::basic_string[abi:ne180100]<0>(v99, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v100) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v99;
      uint64_t v102 = v100;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v102 >= 0) {
      unsigned int v89 = &__p[8];
    }
    else {
      unsigned int v89 = *(const char **)&__p[8];
    }
    conditionalAssert(v89, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 92, v78, v79);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v102) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(v99[0]);
    }
    unint64_t v90 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    *unint64_t v90 = byte_26C4DF190;
    unsigned int v91 = (std::string *)(v90 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v91, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v95 = *(_OWORD *)__p;
      v90[3] = *(void *)&__p[16];
      *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v95;
    }
    *unint64_t v90 = &unk_26C4E0710;
  }
  int v47 = TFsa::newState(v16, 0);
  *(void *)v104[0] = v47;
LABEL_14:
  uint64_t v48 = 0;
  do
  {
    uint64_t v49 = *((void *)v104[0] + v48);
    if (!v49)
    {
      tknPrintf("Error: State was not set properly while creating lattice\n", v43, v44, v45, v46);
      std::string::basic_string[abi:ne180100]<0>(v99, &byte_2140B33BB);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v100) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v99;
        uint64_t v102 = v100;
      }
      *(void *)__p = &unk_26C4E0710;
      if (v102 >= 0) {
        int v60 = &__p[8];
      }
      else {
        int v60 = *(const char **)&__p[8];
      }
      conditionalAssert(v60, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 109, v54, v55);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v102) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (SHIBYTE(v100) < 0) {
        operator delete(v99[0]);
      }
      int v61 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      *int v61 = byte_26C4DF190;
      int v62 = (std::string *)(v61 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v75 = *(_OWORD *)__p;
        v61[3] = *(void *)&__p[16];
        *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v75;
      }
      *int v61 = &unk_26C4E0710;
    }
    if (!*(void *)(v49 + 16)) {
      TFsa::addExtremity((uint64_t)v16, v49, 0);
    }
    if (!*(void *)(v49 + 24)) {
      TFsa::addExtremity((uint64_t)v16, v49, 1u);
    }
    ++v48;
  }
  while (a4 != v48);
  if (*(void *)(v15 + 64) != a4)
  {
    tknPrintf("Error: Expected state count to be %llu not %llu\n", v43, v44, v45, v46, *(void *)(v15 + 64), a4);
    std::string::basic_string[abi:ne180100]<0>(v99, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v100) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v99;
      uint64_t v102 = v100;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v102 >= 0) {
      unint64_t v80 = &__p[8];
    }
    else {
      unint64_t v80 = *(const char **)&__p[8];
    }
    conditionalAssert(v80, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 117, v69, v70);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v102) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(v99[0]);
    }
    uint64_t v81 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    *uint64_t v81 = byte_26C4DF190;
    int v82 = (std::string *)(v81 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v92 = *(_OWORD *)__p;
      v81[3] = *(void *)&__p[16];
      *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v92;
    }
    *uint64_t v81 = &unk_26C4E0710;
  }
  uint64_t v50 = *(void *)(v15 + 224);
  if (v50 != a5)
  {
    tknPrintf("Error: Expected starting state count to be %llu not %llu\n", v43, v44, v45, v46, a5, v50);
    std::string::basic_string[abi:ne180100]<0>(v99, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v100) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v99;
      uint64_t v102 = v100;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v102 >= 0) {
      int v83 = &__p[8];
    }
    else {
      int v83 = *(const char **)&__p[8];
    }
    conditionalAssert(v83, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 124, v71, v72);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v102) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(v99[0]);
    }
    uint64_t v84 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    *uint64_t v84 = byte_26C4DF190;
    uint64_t v85 = (std::string *)(v84 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v85, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v93 = *(_OWORD *)__p;
      v84[3] = *(void *)&__p[16];
      *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v93;
    }
    *uint64_t v84 = &unk_26C4E0710;
  }
  uint64_t v51 = *(void *)(v15 + 232);
  if (v51 != v97)
  {
    tknPrintf("Error: Expected accepting state count to be %llu not %llu\n", v43, v44, v45, v46, v97, v51);
    std::string::basic_string[abi:ne180100]<0>(v99, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v100) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v99[0], (std::string::size_type)v99[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v99;
      uint64_t v102 = v100;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v102 >= 0) {
      uint64_t v86 = &__p[8];
    }
    else {
      uint64_t v86 = *(const char **)&__p[8];
    }
    conditionalAssert(v86, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lattice.cpp", 131, v73, v74);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v102) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(v99[0]);
    }
    uint64_t v87 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    *uint64_t v87 = byte_26C4DF190;
    uint64_t v88 = (std::string *)(v87 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v94 = *(_OWORD *)__p;
      v87[3] = *(void *)&__p[16];
      *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v94;
    }
    *uint64_t v87 = &unk_26C4E0710;
  }
  Registry = (void *)TRegisterable<TLattice>::getRegistry();
  *(void *)(v15 + 8) = TBaseRegistry<TLatticeProcessor *>::registerInstance(Registry, v15);
  if (v104[0])
  {
    v104[1] = v104[0];
    operator delete(v104[0]);
  }
  return v15;
}

{
  return TLattice::TLattice(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_213EFB26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      uint64_t v35 = *(void **)(v33 - 112);
      if (v35)
      {
        *(void *)(v33 - 104) = v35;
        operator delete(v35);
      }
      TAllocator::clear(v31);
      TFsa::~TFsa(v30);
      TRegisterable<TLattice>::~TRegisterable(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void *TRegisterable<TLattice>::~TRegisterable(void *a1)
{
  *a1 = &unk_26C4E0500;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TLattice>::getRegistry();
    uint64_t v3 = *Registry;
    *(void *)(Registry[1] + 8 * a1[1] - 8) = 0;
    uint64_t *Registry = v3 - 1;
  }
  return a1;
}

void TLattice::~TLattice(TLattice *this)
{
  *(void *)this = &unk_26C4E5368;
  unsigned int v2 = (TLattice *)((char *)this + 264);
  TAllocator::clear((TLattice *)((char *)this + 264));
  TAllocator::clear(v2);
  TFsa::~TFsa((TLattice *)((char *)this + 24));

  TRegisterable<TLattice>::~TRegisterable(this);
}

{
  uint64_t vars8;

  TLattice::~TLattice(this);

  JUMPOUT(0x216698730);
}

void TLatticeTransData::TLatticeTransData(uint64_t a1, TLatticeTransData *this, uint64_t a3, __int32 *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  *(void *)a1 = a3;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a5;
  *(void *)(a1 + 24) = a6;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a7;
  *(void *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a8;
  long long v11 = a9[1];
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *a9;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v11;
  long long v12 = a9[2];
  long long v13 = a9[3];
  long long v14 = a9[5];
  *(_OWORD *)(a1 + 112) = a9[4];
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v12;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v13;
  if (a3 == 3)
  {
    *(_DWORD *)(a1 + 8) = a4;
  }
  else if (a3 == 2)
  {
    size_t v16 = wcslen(a4);
    if ((v16 + 1) >> 62) {
      uint64_t v17 = -1;
    }
    else {
      uint64_t v17 = 4 * (v16 + 1);
    }
    uint64_t v18 = (__int32 *)TAllocator::allocate(this, v17);
    wcscpy(v18, a4);
    *(void *)(a1 + 8) = v18;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v19 = (char *)TAllocator::allocate(this, 8);
    strcpy(v19, "?");
    *(void *)(a1 + 8) = v19;
  }
}

void TRegisterable<TLattice>::~TRegisterable(void *a1)
{
  TRegisterable<TLattice>::~TRegisterable(a1);

  JUMPOUT(0x216698730);
}

uint64_t TRegisterable<TLattice>::getRegistry()
{
  {
    operator new();
  }
  return TRegisterable<TLattice>::getRegistry(void)::s_registry;
}

void sub_213EFB678(_Unwind_Exception *a1)
{
}

void *std::vector<TState *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    unsigned int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_213EFB6EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void WaveDecoder::saveWaveDecoder(WaveDecoder *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    WaveDecoder::saveWaveDecoderText(this, a2, a5);
  }
  else
  {
    int v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x6Cu, a5, "MRWDB!?", 18, 1);
    int v10 = 0;
    writeObject<short>((uint64_t)v8, (uint64_t)this, &v10);
    writeObject<short>((uint64_t)v8, (uint64_t)this + 16, &v10);
    writeObject<short>((uint64_t)v8, (uint64_t)this + 32, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Cu, v10);
    DgnDelete<DgnStream>((void (***)(void))v8);
  }
}

void WaveDecoder::saveWaveDecoderText(WaveDecoder *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v21);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v21, (uint64_t)a2, 0x6Eu, a3);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v21, sWDT_Versions, (uint64_t)&v19, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v21, "WaveDataDecodeTableText", (void *)(v19 + 8 * (v20 - 1)));
  v15[0] = 0;
  unint64_t v11 = realloc_array(0, v15, 0xCuLL, 0, 0, 1);
  size_t v16 = v15[0];
  int v17 = 3;
  int v18 = v11 >> 2;
  DgnArray<DgnString>::DgnArray(v15, 3);
  DgnString::operator=((DgnString *)v15[0], "Type");
  _DWORD *v16 = 0;
  DgnString::operator=((DgnString *)((char *)v15[0] + 16), "OneByteFeature");
  v16[1] = 3;
  DgnString::operator=((DgnString *)((char *)v15[0] + 32), "TwoByteFeature");
  v16[2] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v21, (uint64_t)&v16, (uint64_t)v15);
  if (*((_DWORD *)this + 2))
  {
    unint64_t v12 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v21, 0, "Linear");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v21, 1u, v12);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v21, 2u, *(__int16 *)(*(void *)this + 2 * v12));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v21);
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 2));
  }
  if (*((_DWORD *)this + 6))
  {
    unint64_t v13 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v21, 0, "Mu_Law");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v21, 1u, v13);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v21, 2u, *(__int16 *)(*((void *)this + 2) + 2 * v13));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v21);
      ++v13;
    }
    while (v13 < *((unsigned int *)this + 6));
  }
  if (*((_DWORD *)this + 10))
  {
    unint64_t v14 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v21, 0, "A_Law");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v21, 1u, v14);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v21, 2u, *(__int16 *)(*((void *)this + 4) + 2 * v14));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v21);
      ++v14;
    }
    while (v14 < *((unsigned int *)this + 10));
  }
  DgnArray<DgnString>::releaseAll((uint64_t)v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v16);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v19);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v21);
}

void sub_213EFBA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

uint64_t WaveDecoder::sizeObject(unsigned int *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 8;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v3 = 12;
    }
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v2 = 16;
      if (!gShadowDiagnosticShowIdealizedObjectSizes) {
        uint64_t v2 = 24;
      }
    }
    else
    {
      uint64_t v4 = a1[2];
      if ((int)v4 <= 0) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = 2 * v4;
      }
      uint64_t v6 = a1[6];
      if ((int)v6 <= 0) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 2 * v6;
      }
      uint64_t v2 = v5 + 2 * v3 + v7;
      uint64_t v8 = a1[10];
      if ((int)v8 >= 1) {
        v3 += 2 * v8;
      }
    }
  }
  return v3 + v2;
}

void createFormatter(const TDataManager *a1, TDataManager *a2, TLexicon *a3, TTokenizer *a4)
{
}

void sub_213EFBBCC(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x10B1C40A822F00CLL);
  _Unwind_Resume(a1);
}

void TFormatter::TFormatter(TFormatter *this, const TDataManager *a2, TDataManager *a3, TLexicon *a4, TTokenizer *a5)
{
  *((void *)this + 1) = -1;
  *((void *)this + 2) = a5;
  *((void *)this + 3) = a3;
  *((void *)this + 4) = a4;
  *(void *)this = &unk_26C4DF1B0;
  *((void *)this + 5) = &unk_26C4DF2A0;
  TAllocator::TAllocator((TFormatter *)((char *)this + 64), 2048);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 17) = 0;
  *(_OWORD *)((char *)this + 12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  operator new();
}

void sub_213EFCEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, TAllocator *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,void *a42,int a43,__int16 a44,char a45,char a46,int a47,__int16 a48,char a49,char a50)
{
  if (a46 < 0)
  {
    operator delete(__p);
    if ((v51 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        TFormatter::freeMemory(v50);
        __cxa_rethrow();
      }
      *(void *)(v52 + 136) = a14;
      if (*(char *)(v54 - 89) < 0) {
        operator delete(*(void **)(v54 - 112));
      }
      TAllocator::clear(a13);
      TRegisterable<TIFormatter>::~TRegisterable(v50);
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v53);
  goto LABEL_6;
}

void sub_213EFD148()
{
}

uint64_t TFormatter::freeMemory(TFormatter *this)
{
  --*(_DWORD *)(*((void *)this + 4) + 360);
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    --*(_DWORD *)(v2 + 120);
  }
  uint64_t v3 = *((void *)this + 19);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 18);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 20);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 15);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (TGrammarManager2 *)*((void *)this + 13);
  if (v7)
  {
    TGrammarManager2::~TGrammarManager2(v7);
    MEMORY[0x216698730]();
  }
  uint64_t v8 = (TGrammarManager2 *)*((void *)this + 14);
  if (v8)
  {
    TGrammarManager2::~TGrammarManager2(v8);
    MEMORY[0x216698730]();
  }
  uint64_t v9 = *((void *)this + 17);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 16);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  unint64_t v11 = (TDataSaver *)*((void *)this + 7);
  if (v11)
  {
    TDataSaver::~TDataSaver(v11);
    MEMORY[0x216698730]();
  }
  uint64_t v12 = *((void *)this + 6);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    unint64_t v14 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v14();
  }
  return result;
}

void TFormatter::~TFormatter(TFormatter *this)
{
  *(void *)this = &unk_26C4DF1B0;
  *((void *)this + 5) = &unk_26C4DF2A0;
  TFormatter::freeMemory(this);
  TAllocator::clear((TFormatter *)((char *)this + 64));

  TRegisterable<TIFormatter>::~TRegisterable(this);
}

{
  uint64_t vars8;

  TFormatter::~TFormatter(this);

  JUMPOUT(0x216698730);
}

void non-virtual thunk to'TFormatter::~TFormatter(TFormatter *this)
{
}

{
  uint64_t vars8;

  TFormatter::~TFormatter((TFormatter *)((char *)this - 40));

  JUMPOUT(0x216698730);
}

uint64_t TFormatter::save(TFormatter *this, TDataManager *a2, TDataManager *a3)
{
  v47[19] = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  TOutputModel::TOutputModel((TOutputModel *)v37, a2, a3, v7, *((const TDataManager **)this + 3));
  if (a2)
  {
    TDataManager::setIntVar(a2, "ItnVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
    TOutputStream::TOutputStream(v36, &v39, (uint64_t)"ItnParam", *((void *)this + 4) + 240);
    TParamManager::save(*((void **)this + 6), v36, 0);
    std::stringbuf::str();
    if (v32 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v32 >= 0) {
      uint64_t v9 = HIBYTE(v32);
    }
    else {
      uint64_t v9 = v31;
    }
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a2 + 48))(a2, "ItnParam", p_p, v9);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    uint64_t v10 = MEMORY[0x263F8C2C8];
    if (v38 == 1 || TItnRuleManager::isCustomized(*((TItnRuleManager **)this + 15)))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      TOutputStream::TOutputStream(v29, &__p, (uint64_t)"ItnRule", *((void *)this + 4) + 240);
      TItnRuleManager::save(*((void *)this + 15), v29, 0);
      std::stringbuf::str();
      if ((v28 & 0x80u) == 0) {
        unint64_t v11 = &v26;
      }
      else {
        unint64_t v11 = v26;
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v12 = v28;
      }
      else {
        uint64_t v12 = v27;
      }
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a2 + 48))(a2, "ItnRule", v11, v12);
      if ((char)v28 < 0) {
        operator delete(v26);
      }
      __p = *(void **)v10;
      *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(v10 + 24);
      uint64_t v31 = MEMORY[0x263F8C318] + 16;
      if (v34 < 0) {
        operator delete(v33);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166986E0](v35);
    }
    if (v38 == 1)
    {
      unint64_t v13 = (void *)*((void *)this + 7);
      if (v13) {
        TDataSaver::save(v13, a2);
      }
    }
    unint64_t v39 = *(const char **)v10;
    *(const char **)((char *)&v39 + *((void *)v39 - 3)) = *(const char **)(v10 + 24);
    unint64_t v40 = (const char *)(MEMORY[0x263F8C318] + 16);
    if (v46 < 0) {
      operator delete(v45);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166986E0](v47);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "ItnVersion");
    if (v38 >= 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
      TOutputStream::TOutputStream(v36, &v39, (uint64_t)"ItnParam", *((void *)this + 4) + 240);
      TParamManager::save(*((void **)this + 6), v36, 1);
      std::stringbuf::str();
      if (v32 >= 0) {
        unint64_t v14 = &__p;
      }
      else {
        unint64_t v14 = __p;
      }
      if (v32 >= 0) {
        uint64_t v15 = HIBYTE(v32);
      }
      else {
        uint64_t v15 = v31;
      }
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a3 + 48))(a3, "ItnParam", v14, v15);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      TOutputStream::TOutputStream(v29, &__p, (uint64_t)"ItnRule", *((void *)this + 4) + 240);
      TItnRuleManager::save(*((void *)this + 15), v29, 1);
      std::stringbuf::str();
      if ((v28 & 0x80u) == 0) {
        size_t v16 = &v26;
      }
      else {
        size_t v16 = v26;
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = v27;
      }
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a3 + 48))(a3, "ItnRule", v16, v17);
      if ((char)v28 < 0) {
        operator delete(v26);
      }
      int v18 = (void *)*((void *)this + 7);
      if (v18) {
        TDataSaver::save(v18, a3);
      }
      __p = (void *)*MEMORY[0x263F8C2C8];
      uint64_t v19 = (const char *)__p;
      uint64_t v20 = *(void **)(MEMORY[0x263F8C2C8] + 24);
      *(void **)((char *)&__p + *((void *)__p - 3)) = v20;
      uint64_t v31 = MEMORY[0x263F8C318] + 16;
      if (v34 < 0) {
        operator delete(v33);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166986E0](v35);
      unint64_t v39 = v19;
      *(const char **)((char *)&v39 + *((void *)v19 - 3)) = (const char *)v20;
      unint64_t v40 = (const char *)(MEMORY[0x263F8C318] + 16);
      if (v46 < 0) {
        operator delete(v45);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166986E0](v47);
    }
    if (!*((void *)this + 7))
    {
      uint64_t v21 = 0;
      __p = 0;
      uint64_t v31 = 0;
      unint64_t v39 = "ItnTag";
      unint64_t v40 = "ItnGrammar";
      int v41 = "ItnGrammar2";
      uint64_t v42 = "ItnCompounderFeatureConfig";
      uint64_t v43 = "ItnCompounderWordFlag";
      uint64_t v44 = "ItnCompounderRules";
      uint64_t v32 = 0;
      do
      {
        uint64_t v22 = (&v39)[v21];
        if ((*(uint64_t (**)(void, const char *, void, void))(**((void **)this + 3) + 40))(*((void *)this + 3), v22, 0, 0))
        {
          TDataManager::getStringVar(*((void *)this + 3));
          if (v32 >= 0) {
            uint64_t v23 = &__p;
          }
          else {
            uint64_t v23 = __p;
          }
          if (v32 >= 0) {
            uint64_t v24 = HIBYTE(v32);
          }
          else {
            uint64_t v24 = v31;
          }
          (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a3 + 48))(a3, v22, v23, v24);
        }
        ++v21;
      }
      while (v21 != 6);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p);
      }
    }
  }
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_213EFDCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  std::ostringstream::~ostringstream((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void TFormatter::importChanges(TFormatter *this, const TDataManager *a2, TLexicon *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](this, a2, a3, a4, a5);
  uint64_t v8 = v7;
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v27 = 0;
  int v26 = 0;
  uint64_t v28 = 0;
  if (!v7) {
    uint64_t v8 = *(void *)(v5 + 32);
  }
  uint64_t v9 = (const char *)(v8 + 72);
  if (*(char *)(v8 + 95) < 0) {
    uint64_t v9 = *(const char **)v9;
  }
  TInputModel::TInputModel((TInputModel *)&v21, v6, 0, 1, v9);
  int IntVar = TInputModel::getIntVar(&v21, "ItnVersion", 1);
  if ((IntVar - 5) > 0xFFFFFFFB) {
    operator new();
  }
  tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v11, v12, v13, v14, IntVar, "ItnVersion", 1, 4);
  std::string::basic_string[abi:ne180100]<0>(&__s, &byte_2140B33BB);
  *(void *)uint64_t v24 = byte_26C4DF190;
  if (SHIBYTE(v23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v24[8], (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
  }
  else
  {
    *(_OWORD *)&v24[8] = __s;
    uint64_t v25 = v23;
  }
  *(void *)uint64_t v24 = &unk_26C4E0710;
  if (SHIBYTE(v25) >= 0) {
    uint64_t v17 = &v24[8];
  }
  else {
    uint64_t v17 = *(const char **)&v24[8];
  }
  conditionalAssert(v17, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/formatter.cpp", 742, v15, v16);
  *(void *)uint64_t v24 = byte_26C4DF190;
  if (SHIBYTE(v25) < 0) {
    operator delete(*(void **)&v24[8]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__s);
  }
  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v24, &byte_2140B33BB);
  void *exception = byte_26C4DF190;
  uint64_t v19 = (std::string *)(exception + 1);
  if ((v24[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v24, *(std::string::size_type *)&v24[8]);
  }
  else
  {
    long long v20 = *(_OWORD *)v24;
    exception[3] = *(void *)&v24[16];
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  void *exception = &unk_26C4E0710;
}

void sub_213EFE99C()
{
}

void sub_213EFEB0C()
{
}

void sub_213EFEB18(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x213EFEBCCLL);
}

void sub_213EFEB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (LOBYTE(STACK[0x470])) {
    TSegmenter::findSegmentEnd((uint64_t *)va, v11);
  }
  JUMPOUT(0x213EFEB5CLL);
}

void sub_213EFEB50()
{
}

void sub_213EFEB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0x890]))
  {
    if (STACK[0x478] != a14 && STACK[0x478] != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0xCB0]))
  {
    unint64_t v17 = STACK[0x898];
    if (STACK[0x898] != a15)
    {
      if (v17) {
        MEMORY[0x216698730](v17, 0x1000C4052888210);
      }
    }
  }
  if (SLOBYTE(STACK[0xCDF]) < 0) {
    operator delete((void *)STACK[0xCC8]);
  }
  _Unwind_Resume(a1);
}

uint64_t **TBuffer<wchar_t>::~TBuffer(uint64_t **a1)
{
  if (*((unsigned char *)a1 + 1048))
  {
    uint64_t v2 = *a1;
    if (*a1 != (uint64_t *)(a1 + 3) && v2 != 0) {
      MEMORY[0x216698730]();
    }
  }
  return a1;
}

void TFormatter::makeBlockForWord(TFormatter *this, const TWord *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](this, a2, a3, a4, a5);
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  uint64_t v19 = v21;
  long long v20 = xmmword_214085190;
  v21[1024] = 1;
  TWord::getWrittenForm(v6, (uint64_t)&v19);
  uint64_t v16 = v18;
  long long v17 = xmmword_214085190;
  v18[1024] = 1;
  TWord::getSpokenForm(v7, (uint64_t)&v16);
  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v9 + 3792));
  if (*(unsigned char *)(v9 + TParam::getValidConfig((TParam *)(v9 + 3792), ActiveConfigHandle) + 3944)) {
    BOOL v11 = *((void *)&v20 + 1) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v12 = v14;
    long long v13 = xmmword_214085190;
    char v15 = 1;
    (*(void (**)(void, __int32 *, void, unsigned char **))(**(void **)(v8 + 120) + 48))(*(void *)(v8 + 120), *v7, 0, &v12);
    if (v15)
    {
      if (v12 != v14)
      {
        if (v12) {
          MEMORY[0x216698730]();
        }
      }
    }
  }
  operator new();
}

void sub_213EFEF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (LOBYTE(STACK[0x828])) {
    TFormatter::makeBlockForWord((uint64_t *)va, v3);
  }
  if (LOBYTE(STACK[0xC48]))
  {
    unint64_t v8 = STACK[0x830];
    if (STACK[0x830] != v6)
    {
      if (v8) {
        MEMORY[0x216698730](v8, 0x1000C4052888210);
      }
    }
  }
  if (*(unsigned char *)(v5 + 1048))
  {
    if (STACK[0xC50] != v4 && STACK[0xC50] != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void TFormatter::splitPattern(uint64_t *a1, __int32 *a2, void *a3, void *a4)
{
  if (*a2)
  {
    *a3 = 0;
    *a4 = 0;
    if (wcsncmp(a2, (const __int32 *)&unk_2140A28F4, 1uLL))
    {
      uint64_t v6 = wcsstr(a2, (const __int32 *)&unk_2140A28F4);
      if (!v6) {
        uint64_t v6 = &a2[wcslen(a2)];
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__str, a2);
      std::wstring::basic_string(&v24, &__str, 0, v6 - a2, (std::allocator<wchar_t> *)&v22);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      operator new();
    }
    uint64_t v7 = a2 + 1;
    unint64_t v8 = wcsstr(a2 + 1, (const __int32 *)&unk_2140A28FC);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__str, v7);
    std::wstring::basic_string(&v24, &__str, 0, v8 - v7, (std::allocator<wchar_t> *)&v22);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = v8 + 1;
    uint64_t v11 = 1;
    do
    {
      if (!*v10) {
        break;
      }
      if (!wcsncmp(v10, (const __int32 *)&unk_2140A28F4, 1uLL)) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = !wcsncmp(v10, (const __int32 *)&unk_2140A2904, 1uLL) ? -1 : 0;
      }
      ++v10;
      v11 += v12;
    }
    while (v11);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v22, v9);
    std::wstring::basic_string(&__str, &v22, 0, ((char *)v10 - (char *)v9 - 4) >> 2, (std::allocator<wchar_t> *)&v21);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v13 = &v24;
    }
    else {
      long long v13 = (std::wstring *)v24.__r_.__value_.__r.__words[0];
    }
    if (wcscmp((const __int32 *)v13, dword_2140A290C))
    {
      uint64_t v21 = 0;
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v24;
      }
      else {
        uint64_t v14 = (std::wstring *)v24.__r_.__value_.__r.__words[0];
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::wstring *))(*(void *)a1[17] + 16))(a1[17], v14);
      v22.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v22.__r_.__value_.__l.__size_;
      for (*(_OWORD *)&v22.__r_.__value_.__r.__words[1] = 0uLL;
            v21 != -1;
            uint64_t v21 = *(void *)(TTagManager::getTag(a1[17], v21) + 32))
      {
        std::__tree<TState const*>::__emplace_unique_key_args<TState const*,TState const*>((uint64_t **)&v22, (unint64_t *)&v21, &v21);
      }
      operator new();
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::wstring *)__str.__r_.__value_.__r.__words[0];
    }
    uint64_t HeadClone = (const TWord *)TLexicon::findHeadClone((void *)a1[4], (__int32 *)p_str);
    if (!HeadClone)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v20 = &__str;
      }
      else {
        long long v20 = (std::wstring *)__str.__r_.__value_.__r.__words[0];
      }
      uint64_t HeadClone = (const TWord *)TLexicon::addTempWord(a1[4], (int *)v20, 0, 0, 0);
    }
    TFormatter::makeBlockForWord((TFormatter *)a1, HeadClone, v17, v18, v19);
  }
  operator new();
}

void sub_213EFF3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  MEMORY[0x216698730](v27, 0x10F2C405D5B575ELL);
  _Unwind_Resume(a1);
}

void TFormatter::assignWordRules(uint64_t a1, uint64_t a2, void *a3)
{
  int v120 = 0;
  int v121 = 0;
  v122[0] = 0;
  unint64_t v117 = 0;
  unint64_t v118 = 0;
  uint64_t v119 = 0;
  v116[2] = &v117;
  v116[3] = &v117;
  v116[4] = 0;
  v116[0] = 0;
  v116[1] = 0;
  uint64_t v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v122, 1uLL);
  uint64_t v7 = &v5[8 * v6];
  *(void *)uint64_t v5 = v116;
  unint64_t v8 = v5 + 8;
  uint64_t v10 = v120;
  uint64_t v9 = v121;
  if (v121 != v120)
  {
    do
    {
      uint64_t v11 = *((void *)v9 - 1);
      v9 -= 8;
      *((void *)v5 - 1) = v11;
      v5 -= 8;
    }
    while (v9 != v10);
    uint64_t v9 = v120;
  }
  int v120 = v5;
  int v121 = v8;
  v122[0] = v7;
  if (v9) {
    operator delete(v9);
  }
  int v121 = v8;
  if (a2)
  {
    unint64_t v12 = 0;
    uint64_t v109 = (TAllocator *)(a1 + 64);
    uint64_t v101 = (TBlock *)a2;
    uint64_t v13 = a2;
    uint64_t v102 = a1;
    while (1)
    {
      unint64_t v14 = v12;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = (uint64_t *)(v15 + 136);
      uint64_t v17 = *(void *)(v13 + 8);
      if (v17 == -1) {
        goto LABEL_17;
      }
      uint64_t v18 = *a3 + 112 * v17;
      uint64_t v19 = *(void *)(v18 + 80);
      uint64_t v20 = *(void *)(v18 + 48);
      if (v19 != -1) {
        uint64_t v20 = v19;
      }
      if (v20 != 9)
      {
        if (v20 == 8)
        {
          uint64_t v21 = 27280;
          goto LABEL_16;
        }
        if (v20 != 7) {
          goto LABEL_17;
        }
      }
      uint64_t v21 = 27272;
LABEL_16:
      uint64_t v16 = (uint64_t *)(v15 + v21);
LABEL_17:
      if (!*(void *)(v13 + 144))
      {
        BOOL v23 = 1;
        goto LABEL_21;
      }
      uint64_t v22 = *(void *)(v13 + 16);
      if (v22 != -1)
      {
        BOOL v23 = *(unsigned __int8 *)(*a3 + 112 * v22 + 32) != 0;
LABEL_21:
        BOOL v110 = v23;
        goto LABEL_23;
      }
      BOOL v110 = 0;
LABEL_23:
      BOOL v24 = v17 != -1 && *(unsigned __int8 *)(*a3 + 112 * v17 + 32) != 0;
      uint64_t v25 = *v16;
      unint64_t v12 = (v121 - v120) >> 3;
      unint64_t v111 = v12;
      uint64_t v112 = v114;
      long long v113 = xmmword_214085190;
      char v115 = 1;
      int v26 = *(uint64_t **)(v13 + 40);
      if (!v26) {
        goto LABEL_97;
      }
      if (*((char *)v26 + 23) < 0) {
        int v26 = (uint64_t *)*v26;
      }
      (*(void (**)(void, uint64_t *, void, char **))(**(void **)(a1 + 120) + 48))(*(void *)(a1 + 120), v26, 0, &v112);
      if (!*((void *)&v113 + 1))
      {
LABEL_97:
        if (v14 >= v12) {
          goto LABEL_136;
        }
        while (2)
        {
          int v60 = *(void **)&v120[8 * v14];
          int v61 = (void *)v60[3];
          if (v61[1] == *v61 || (anyTagsMatch(v61, (void *)(v13 + 120)) & 1) != 0)
          {
            if (*(char *)(v13 + 71) < 0)
            {
              if (!*(void *)(v13 + 56)) {
                goto LABEL_104;
              }
LABEL_102:
              int v62 = &v117;
              int v63 = (void *)(v13 + 120);
            }
            else
            {
              if (*(unsigned char *)(v13 + 71)) {
                goto LABEL_102;
              }
LABEL_104:
              int v63 = (void *)v60[2];
              int v62 = (void **)v60[3];
            }
            if (!v110 || *v62 == v62[1])
            {
              int v64 = v120;
              if (v12 >= (v121 - v120) >> 3)
              {
LABEL_113:
                uint64_t v67 = (void *)TAllocator::allocate(v109, 40);
                unint64_t v68 = v67;
                uint64_t v69 = v60[4] + 6;
                v67[2] = v63;
                v67[3] = v62;
                *uint64_t v67 = 0;
                v67[1] = v60;
                v67[4] = v69;
                uint64_t v70 = v121;
                if ((unint64_t)v121 >= v122[0])
                {
                  uint64_t v72 = (v121 - v120) >> 3;
                  if ((unint64_t)(v72 + 1) >> 61) {
                    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v73 = (uint64_t)(v122[0] - (void)v120) >> 2;
                  if (v73 <= v72 + 1) {
                    unint64_t v73 = v72 + 1;
                  }
                  if (v122[0] - (void)v120 >= 0x7FFFFFFFFFFFFFF8uLL) {
                    unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v74 = v73;
                  }
                  if (v74) {
                    long long v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v122, v74);
                  }
                  else {
                    long long v75 = 0;
                  }
                  long long v76 = &v75[8 * v72];
                  *(void *)long long v76 = v68;
                  uint64_t v71 = v76 + 8;
                  uint64_t v78 = v120;
                  long long v77 = v121;
                  if (v121 == v120)
                  {
                    unint64_t v12 = v111;
                  }
                  else
                  {
                    unint64_t v12 = v111;
                    do
                    {
                      uint64_t v79 = *((void *)v77 - 1);
                      v77 -= 8;
                      *((void *)v76 - 1) = v79;
                      v76 -= 8;
                    }
                    while (v77 != v78);
                    long long v77 = v120;
                  }
                  int v120 = v76;
                  int v121 = v71;
                  v122[0] = &v75[8 * v74];
                  if (v77) {
                    operator delete(v77);
                  }
                }
                else
                {
                  *(void *)int v121 = v67;
                  uint64_t v71 = v70 + 8;
                  unint64_t v12 = v111;
                }
                int v121 = v71;
              }
              else
              {
                unint64_t v65 = v111;
                while (1)
                {
                  uint64_t v66 = *(void *)&v64[8 * v65];
                  if (!*(void *)v66
                    && anyTagsMatch(*(void **)(v66 + 16), v63)
                    && anyTagsMatch(*(void **)(v66 + 24), v62))
                  {
                    break;
                  }
                  ++v65;
                  int v64 = v120;
                  if (v65 >= (v121 - v120) >> 3) {
                    goto LABEL_113;
                  }
                }
                unint64_t v80 = v60[4] + 6;
                unint64_t v12 = v111;
                if (*(void *)(v66 + 32) > v80)
                {
                  *(void *)(v66 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v80;
                  *(void *)(v66 + 8) = v60;
                }
              }
            }
          }
          if (++v14 == v12) {
            goto LABEL_136;
          }
          continue;
        }
      }
      unint64_t v27 = 0;
      uint64_t v108 = (void *)(v13 + 120);
      int v28 = 1;
      uint64_t v105 = v13;
      BOOL v104 = v24;
      uint64_t v103 = v25;
      do
      {
        unint64_t v29 = *(void *)&v112[8 * v27];
        if (v29
          && (uint64_t v30 = *(void *)(*(void *)(a1 + 120) + 32),
              v29 <= (*(void *)(*(void *)(a1 + 120) + 40) - v30) >> 3))
        {
          uint64_t v31 = *(void *)(v30 + 8 * v29 - 8);
        }
        else
        {
          uint64_t v31 = 0;
        }
        if (!*(unsigned char *)(v31 + 217))
        {
          uint64_t v32 = *(void *)(v31 + 192);
          if (v32 == -1 {
            || (!v32
          }
             || (unint64_t v33 = v32 - 1,
                 uint64_t v34 = *(void *)(*(void *)(a1 + 48) + 24),
                 v33 >= (*(void *)(*(void *)(a1 + 48) + 32) - v34) >> 3)
             || (uint64_t v35 = *(const void **)(v34 + 8 * v33)) == 0
              ? (uint64_t v36 = 0)
          {
            if (*(void *)(v31 + 56) == *(void *)(v31 + 48))
            {
              int v28 = v28 & (*(void *)(v31 + 32) != *(void *)(v31 + 24));
              if (!v24) {
                goto LABEL_51;
              }
            }
            else
            {
              if (v110) {
                goto LABEL_36;
              }
              if (!v24) {
                goto LABEL_51;
              }
            }
            if (*(void *)(v31 + 32) != *(void *)(v31 + 24)) {
              goto LABEL_36;
            }
LABEL_51:
            if (v14 >= v12) {
              goto LABEL_36;
            }
            int v107 = v28;
            unint64_t v38 = v14;
            while (2)
            {
              unint64_t v39 = *(void **)&v120[8 * v38];
              if (*(void *)(v31 + 32) == *(void *)(v31 + 24)
                || (anyTagsMatch((void *)(v31 + 24), (void *)v39[2]) & 1) != 0)
              {
                if (*(unsigned char *)(v31 + 145)) {
                  goto LABEL_59;
                }
                if ((anyTagsMatch((void *)v39[3], v108) & 1) != 0 || *(void *)(v39[3] + 8) == *(void *)v39[3])
                {
                  unint64_t v40 = v108;
                  int v41 = (void *)(v31 + 48);
                  if (*(unsigned char *)(v31 + 145))
                  {
LABEL_59:
                    uint64_t v42 = (void *)v39[3];
                    int v41 = (void *)(v31 + 48);
                    if (v42[1] != *v42)
                    {
                      if (*(void *)(v31 + 56) == *(void *)(v31 + 48))
                      {
                        int v41 = (void *)v39[3];
                      }
                      else
                      {
                        int v41 = (void *)(v31 + 48);
                        if (!anyTagsMatch(v42, (void *)(v31 + 48))) {
                          goto LABEL_92;
                        }
                      }
                    }
                    unint64_t v40 = (void *)v39[2];
                  }
                  if (!v110 || *v41 == v41[1])
                  {
                    uint64_t v43 = v120;
                    if (v12 >= (v121 - v120) >> 3)
                    {
LABEL_73:
                      char v46 = (void *)TAllocator::allocate(v109, 40);
                      int v47 = v46;
                      uint64_t v48 = *(void *)(v31 + 208) + v39[4];
                      v46[2] = v40;
                      v46[3] = v41;
                      void *v46 = v31;
                      v46[1] = v39;
                      v46[4] = v48;
                      uint64_t v49 = v121;
                      if ((unint64_t)v121 >= v122[0])
                      {
                        uint64_t v51 = (v121 - v120) >> 3;
                        if ((unint64_t)(v51 + 1) >> 61) {
                          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v52 = (uint64_t)(v122[0] - (void)v120) >> 2;
                        if (v52 <= v51 + 1) {
                          unint64_t v52 = v51 + 1;
                        }
                        if (v122[0] - (void)v120 >= 0x7FFFFFFFFFFFFFF8uLL) {
                          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v53 = v52;
                        }
                        if (v53) {
                          uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v122, v53);
                        }
                        else {
                          uint64_t v54 = 0;
                        }
                        uint64_t v55 = &v54[8 * v51];
                        *(void *)uint64_t v55 = v47;
                        uint64_t v50 = v55 + 8;
                        uint64_t v57 = v120;
                        uint64_t v56 = v121;
                        if (v121 == v120)
                        {
                          unint64_t v12 = v111;
                        }
                        else
                        {
                          unint64_t v12 = v111;
                          do
                          {
                            uint64_t v58 = *((void *)v56 - 1);
                            v56 -= 8;
                            *((void *)v55 - 1) = v58;
                            v55 -= 8;
                          }
                          while (v56 != v57);
                          uint64_t v56 = v120;
                        }
                        int v120 = v55;
                        int v121 = v50;
                        v122[0] = &v54[8 * v53];
                        if (v56) {
                          operator delete(v56);
                        }
                      }
                      else
                      {
                        *(void *)int v121 = v46;
                        uint64_t v50 = v49 + 8;
                        unint64_t v12 = v111;
                      }
                      int v121 = v50;
                    }
                    else
                    {
                      unint64_t v44 = v111;
                      while (1)
                      {
                        uint64_t v45 = *(void *)&v43[8 * v44];
                        if (v31 == *(void *)v45
                          && anyTagsMatch(*(void **)(v45 + 16), v40)
                          && anyTagsMatch(*(void **)(v45 + 24), v41))
                        {
                          break;
                        }
                        ++v44;
                        uint64_t v43 = v120;
                        if (v44 >= (v121 - v120) >> 3) {
                          goto LABEL_73;
                        }
                      }
                      unint64_t v59 = *(void *)(v31 + 208) + v39[4];
                      unint64_t v12 = v111;
                      if (*(void *)(v45 + 32) > v59)
                      {
                        *(void *)(v45 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v59;
                        *(void *)(v45 + 8) = v39;
                      }
                    }
                  }
                }
              }
LABEL_92:
              if (++v38 >= v12)
              {
                a1 = v102;
                uint64_t v25 = v103;
                uint64_t v13 = v105;
                BOOL v24 = v104;
                int v28 = v107;
                break;
              }
              continue;
            }
          }
        }
LABEL_36:
        ++v27;
      }
      while (v27 < *((void *)&v113 + 1));
      if (v28) {
        goto LABEL_97;
      }
LABEL_136:
      if (v115 && v112 != v114 && v112) {
        MEMORY[0x216698730]();
      }
      uint64_t v13 = *(void *)(v13 + 144);
      if (!v13)
      {
        unint64_t v81 = v12;
        unint64_t v8 = v121;
        a2 = (uint64_t)v101;
        goto LABEL_143;
      }
    }
  }
  unint64_t v81 = 0;
LABEL_143:
  unint64_t v82 = (v8 - v120) >> 3;
  BOOL v83 = v82 > v81;
  unint64_t v84 = v82 - v81;
  if (v83)
  {
    uint64_t v85 = 0;
    uint64_t v86 = (uint64_t *)&v120[8 * v81];
    do
    {
      uint64_t v87 = *v86;
      if ((!v85 || *(void *)(v87 + 32) < *(void *)(v85 + 32))
        && *(void *)(*(void *)(v87 + 24) + 8) == **(void **)(v87 + 24))
      {
        uint64_t v85 = *v86;
      }
      ++v86;
      --v84;
    }
    while (v84);
    uint64_t v112 = 0;
    long long v113 = 0uLL;
    if (v85)
    {
      uint64_t v97 = 0;
      do
      {
        if ((unint64_t)v97 >= *((void *)&v113 + 1))
        {
          uint64_t v88 = (v97 - v112) >> 3;
          if ((unint64_t)(v88 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v89 = (uint64_t)(*((void *)&v113 + 1) - (void)v112) >> 2;
          if (v89 <= v88 + 1) {
            unint64_t v89 = v88 + 1;
          }
          if (*((void *)&v113 + 1) - (void)v112 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v90 = v89;
          }
          if (v90) {
            unsigned int v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v113 + 8, v90);
          }
          else {
            unsigned int v91 = 0;
          }
          long long v92 = &v91[8 * v88];
          *(void *)long long v92 = v85;
          uint64_t v97 = v92 + 8;
          long long v94 = v112;
          long long v93 = (char *)v113;
          if ((char *)v113 != v112)
          {
            do
            {
              uint64_t v95 = *((void *)v93 - 1);
              v93 -= 8;
              *((void *)v92 - 1) = v95;
              v92 -= 8;
            }
            while (v93 != v94);
            long long v93 = v112;
          }
          uint64_t v112 = v92;
          *(void *)&long long v113 = v97;
          *((void *)&v113 + 1) = &v91[8 * v90];
          if (v93) {
            operator delete(v93);
          }
        }
        else
        {
          *(void *)uint64_t v97 = v85;
          v97 += 8;
        }
        *(void *)&long long v113 = v97;
        uint64_t v85 = *(void *)(v85 + 8);
      }
      while (v85);
      uint64_t v96 = v112;
    }
    else
    {
      uint64_t v96 = 0;
      uint64_t v97 = 0;
    }
  }
  else
  {
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v112 = 0;
    long long v113 = 0uLL;
  }
  if ((unint64_t)(v97 - v96) >= 9)
  {
    unint64_t v98 = (v97 - v96) >> 3;
    uint64_t v99 = -2;
    unint64_t v100 = 1;
    do
    {
      TBlock::setRule(a2, **(const TItnRule ***)&v96[8 * v98 + 8 * v99]);
      a2 = *(void *)(a2 + 144);
      ++v100;
      uint64_t v96 = v112;
      unint64_t v98 = (uint64_t)(v113 - (void)v112) >> 3;
      --v99;
    }
    while (v100 < v98);
  }
  if (v96)
  {
    *(void *)&long long v113 = v96;
    operator delete(v96);
  }
  if (v117)
  {
    unint64_t v118 = v117;
    operator delete(v117);
  }
  if (v120)
  {
    int v121 = v120;
    operator delete(v120);
  }
}

void sub_213EFFE90(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(void *)(v1 - 128) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t TFormatter::stateToParamConfig(TFormatter *this, const TItnControlState *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2 == -1) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (v2 != 9)
  {
    if (v2 == 8)
    {
      uint64_t v3 = *((void *)this + 6);
      uint64_t v4 = 27280;
      goto LABEL_8;
    }
    if (v2 != 7)
    {
      uint64_t v5 = *((void *)this + 6) + 136;
      return *(void *)v5;
    }
  }
  uint64_t v3 = *((void *)this + 6);
  uint64_t v4 = 27272;
LABEL_8:
  uint64_t v5 = v3 + v4;
  return *(void *)v5;
}

double TFormatter::makeUttState@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, _OWORD *a7@<X8>)
{
  unint64_t v7 = a4;
  uint64_t v8 = a2;
  *(void *)&long long v11 = -1;
  *((void *)&v11 + 1) = -1;
  long long v71 = v11;
  long long v72 = v11;
  long long v69 = v11;
  long long v70 = v11;
  if ((a6 & 4) == 0)
  {
    if (!a4)
    {
LABEL_17:
      a7[2] = v11;
      a7[3] = v11;
      *a7 = v11;
      a7[1] = v11;
      return *(double *)&v11;
    }
    unint64_t v12 = (void *)TResultManager::getResult(*(void *)(a1 + 128), *(void *)(a2 + 8 * a4 - 8));
    uint64_t v13 = v12[7];
    unint64_t v14 = (v12[8] - v13) >> 6;
    if (v14 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[5] - v12[4]) >> 3))
    {
      uint64_t v15 = v13 + (v14 << 6);
      long long v16 = *(_OWORD *)(v15 - 48);
      *a7 = *(_OWORD *)(v15 - 64);
      a7[1] = v16;
      long long v11 = *(_OWORD *)(v15 - 32);
      long long v17 = *(_OWORD *)(v15 - 16);
      a7[2] = v11;
      a7[3] = v17;
      return *(double *)&v11;
    }
LABEL_16:
    *(void *)&long long v11 = -1;
    *((void *)&v11 + 1) = -1;
    goto LABEL_17;
  }
  if (a5) {
    a3 = a5 + a4;
  }
  if (a3 <= a4) {
    goto LABEL_16;
  }
  unint64_t v19 = a4;
  while (1)
  {
    uint64_t v20 = (void *)TResultManager::getResult(*(void *)(a1 + 128), *(void *)(v8 + 8 * v19));
    uint64_t v21 = v20[13];
    uint64_t v22 = v20[14];
    uint64_t v23 = v22 - v21;
    if (v22 != v21) {
      break;
    }
LABEL_15:
    if (++v19 >= a3) {
      goto LABEL_16;
    }
  }
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = v23 >> 3;
  while (!*(void *)(v21 + 8 * v24) || !*(void *)(v21 + 8 * v24 + 8))
  {
    v25 += *(void *)(v21 + 8 * v24 + 8);
    v24 += 2;
    if (v24 >= v26) {
      goto LABEL_15;
    }
  }
  unint64_t v59 = a7;
  unint64_t v27 = (_OWORD *)(v20[7] + (v25 << 6));
  long long v28 = v27[1];
  v68[0] = *v27;
  v68[1] = v28;
  long long v29 = v27[3];
  v68[2] = v27[2];
  v68[3] = v29;
  *(void *)&long long v30 = -1;
  *((void *)&v30 + 1) = -1;
  long long v66 = v30;
  long long v67 = v30;
  long long v64 = v30;
  long long v65 = v30;
  if (!v7) {
    goto LABEL_60;
  }
  uint64_t v31 = 0;
  uint64_t v60 = v8;
  unint64_t v61 = v7;
  do
  {
    while (1)
    {
      uint64_t v32 = TResultManager::getResult(*(void *)(a1 + 128), *(void *)(v8 + 8 * (~v31 + v7)));
      uint64_t v33 = *(void *)(v32 + 104);
      uint64_t v34 = *(void *)(v32 + 112) - v33;
      if (v34) {
        break;
      }
      if (++v31 >= v7) {
        goto LABEL_60;
      }
    }
    uint64_t v35 = (void *)v32;
    uint64_t v62 = v31;
    uint64_t v36 = v34 >> 3;
    uint64_t v37 = 0;
    size_t v38 = *(void *)(v32 + 16) + strlen(*(const char **)(v32 + 16));
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35[5] - v35[4]) >> 3);
    do
    {
      uint64_t v40 = *(void *)(v33 + 8 * (v36 - v37) - 16);
      size_t v41 = v38 - v40;
      if (-v40 < 0)
      {
        char v43 = 1;
        unint64_t v44 = (unsigned __int8 *)(v38 - v40);
        while (1)
        {
          int v63 = 0;
          int v45 = TLocaleInfo::multiByteToUnicode(*(void *)(a1 + 32) + 240, v44, &v63);
          if (v45 == -1)
          {
LABEL_44:
            unint64_t v49 = v35[7] + (v39 << 6);
            long long v50 = *(_OWORD *)(v49 - 48);
            long long v64 = *(_OWORD *)(v49 - 64);
            long long v65 = v50;
            long long v51 = *(_OWORD *)(v49 - 16);
            long long v66 = *(_OWORD *)(v49 - 32);
            long long v67 = v51;
            int v42 = 1;
            goto LABEL_45;
          }
          int v46 = v45;
          if ((v43 & 1) == 0) {
            goto LABEL_38;
          }
          int v47 = v63;
          {
            operator new();
          }
          char v43 = 1;
          if (v47 <= 159)
          {
            if (v47 <= 0x20 && ((1 << v47) & 0x100002600) != 0) {
              goto LABEL_39;
            }
LABEL_38:
            char v43 = 0;
            goto LABEL_39;
          }
          if (v47 >= 12288)
          {
            if (v47 == 12288) {
              goto LABEL_39;
            }
            int v48 = 65279;
          }
          else
          {
            if (v47 == 160) {
              goto LABEL_39;
            }
            int v48 = 8203;
          }
          if (v47 != v48) {
            goto LABEL_38;
          }
LABEL_39:
          v44 += v46;
          if ((unint64_t)v44 >= v38)
          {
            if (v43) {
              break;
            }
            goto LABEL_44;
          }
        }
      }
      int v42 = 0;
LABEL_45:
      uint64_t v33 = v35[13];
      uint64_t v52 = v35[14] - v33;
      if (v37 + 2 >= (unint64_t)(v52 >> 3)) {
        break;
      }
      uint64_t v36 = v52 >> 3;
      v39 -= *(void *)(v33 + 8 * (~v37 + (v52 >> 3)));
      v37 += 2;
      size_t v38 = v41;
    }
    while ((v42 & 1) == 0);
    unint64_t v7 = v61;
    uint64_t v31 = v62 + 1;
    if (v62 + 1 >= v61) {
      char v53 = 1;
    }
    else {
      char v53 = v42;
    }
    uint64_t v8 = v60;
  }
  while ((v53 & 1) == 0);
  if (v42)
  {
    for (uint64_t i = 0; i != 32; i += 8)
    {
      uint64_t v55 = *(void *)((char *)&v64 + i);
      if (v55 != -1 && v55 == *(void *)((char *)v68 + i))
      {
        *((void *)&v71 + getItnControlCategory(*(void *)((char *)&v64 + i))) = -1;
        *((void *)&v69 + getItnControlCategory(v55)) = v55;
      }
    }
  }
LABEL_60:
  long long v56 = v70;
  *unint64_t v59 = v69;
  v59[1] = v56;
  *(void *)&long long v11 = v71;
  long long v57 = v72;
  v59[2] = v71;
  v59[3] = v57;
  return *(double *)&v11;
}

void sub_213F00368(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x216698730](v2, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TFormatter::addWords(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  std::vector<TItnWordData>::reserve(a4, 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a4[1] - (unsigned char *)*a4) >> 4) + ((a2[1] - *a2) >> 3));
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t Word = TLexicon::findWord(*(void **)(a1 + 32), *(__int32 **)(v8 + 8 * v9));
      if (!Word) {
        uint64_t Word = TLexicon::addTempWord(*(void *)(a1 + 32), *(int **)(*a2 + 8 * v9), 0, 0, 0);
      }
      if (a3 && v9 != ((a2[1] - *a2) >> 3) - 1) {
        uint64_t v11 = *(unsigned int *)(a3 + 4 * v9);
      }
      else {
        uint64_t v11 = 0;
      }
      *(void *)&long long v12 = -1;
      *((void *)&v12 + 1) = -1;
      *(_OWORD *)&v31[38] = v12;
      *(_OWORD *)&v31[54] = v12;
      *(_OWORD *)&v31[6] = v12;
      *(_OWORD *)&v31[22] = v12;
      uint64_t v13 = (char *)a4[1];
      unint64_t v14 = (char *)a4[2];
      if (v13 >= v14)
      {
        uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v13 - (unsigned char *)*a4) >> 4);
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x249249249249249) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((v14 - (unsigned char *)*a4) >> 4);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x124924924924924) {
          unint64_t v19 = 0x249249249249249;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19) {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>((uint64_t)(a4 + 2), v19);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = &v20[112 * v16];
        *((void *)v21 + 12) = *(void *)&v31[62];
        *(_OWORD *)(v21 + 34) = *(_OWORD *)v31;
        *(_OWORD *)(v21 + 82) = *(_OWORD *)&v31[48];
        *(_OWORD *)(v21 + 66) = *(_OWORD *)&v31[32];
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 2) = Word;
        *((void *)v21 + 3) = v11;
        *((_WORD *)v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
        *(_OWORD *)(v21 + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)&v31[16];
        *((_WORD *)v21 + 52) = 256;
        uint64_t v23 = (char *)*a4;
        uint64_t v22 = (char *)a4[1];
        unint64_t v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            long long v25 = *((_OWORD *)v22 - 7);
            long long v26 = *((_OWORD *)v22 - 5);
            *((_OWORD *)v24 - 6) = *((_OWORD *)v22 - 6);
            *((_OWORD *)v24 - 5) = v26;
            *((_OWORD *)v24 - 7) = v25;
            long long v27 = *((_OWORD *)v22 - 4);
            long long v28 = *((_OWORD *)v22 - 3);
            long long v29 = *((_OWORD *)v22 - 2);
            *(_OWORD *)(v24 - 22) = *(_OWORD *)(v22 - 22);
            *((_OWORD *)v24 - 3) = v28;
            *((_OWORD *)v24 - 2) = v29;
            *((_OWORD *)v24 - 4) = v27;
            v24 -= 112;
            v22 -= 112;
          }
          while (v22 != v23);
          uint64_t v22 = (char *)*a4;
        }
        uint64_t v15 = v21 + 112;
        *a4 = v24;
        a4[1] = v21 + 112;
        a4[2] = &v20[112 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)(v13 + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)&v31[16];
        *(_OWORD *)(v13 + 66) = *(_OWORD *)&v31[32];
        *(_OWORD *)(v13 + 82) = *(_OWORD *)&v31[48];
        *(void *)uint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = Word;
        *((void *)v13 + 3) = v11;
        *((_WORD *)v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
        *((void *)v13 + 12) = -1;
        *(_OWORD *)(v13 + 34) = *(_OWORD *)v31;
        uint64_t v15 = v13 + 112;
        *((_WORD *)v13 + 52) = 256;
      }
      a4[1] = v15;
      ++v9;
      uint64_t v8 = *a2;
      uint64_t v30 = a2[1];
    }
    while (v9 < (v30 - *a2) >> 3);
    if (v8 != v30) {
      *((void *)a4[1] - 11) = 1000;
    }
  }
}

void std::vector<TItnWordData>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(v3, a2);
    unint64_t v7 = &v6[v5];
    unint64_t v9 = &v6[112 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 7);
        long long v14 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v14;
        *((_OWORD *)v12 - 7) = v13;
        long long v15 = *((_OWORD *)v10 - 4);
        long long v16 = *((_OWORD *)v10 - 3);
        long long v17 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 22) = *(_OWORD *)(v10 - 22);
        *((_OWORD *)v12 - 3) = v16;
        *((_OWORD *)v12 - 2) = v17;
        *((_OWORD *)v12 - 4) = v15;
        v12 -= 112;
        v10 -= 112;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

BOOL TFormatter::addWords(uint64_t a1, uint64_t *a2, unint64_t a3, char a4, void **a5)
{
  if ((unint64_t)a2 >= a3) {
    return 0;
  }
  int64_t v5 = a5;
  uint64_t v6 = a2;
  LOBYTE(v8) = 0;
  char v51 = a4 ^ 1;
  uint64_t v50 = (uint64_t)(a5 + 2);
  do
  {
    uint64_t v9 = TResultManager::getResult(*(void *)(a1 + 128), *v6);
    uint64_t v10 = v9;
    BOOL v11 = *(unsigned char *)(v9 + 1) != 0;
    char v12 = v51;
    if (*(unsigned char *)(v9 + 1)) {
      char v12 = 1;
    }
    if ((v12 & 1) == 0) {
      BOOL v11 = *(unsigned char *)v9 != 0;
    }
    BOOL v52 = v8 || v11;
    std::vector<TItnWordData>::reserve(v5, 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v5[1] - (unsigned char *)*v5) >> 4)- 0x5555555555555555 * ((uint64_t)(*(void *)(v9 + 40) - *(void *)(v9 + 32)) >> 3));
    uint64_t v13 = *(void *)(v10 + 104);
    uint64_t v14 = *(void *)(v10 + 112);
    if (v14 != v13)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v53 = v10;
      do
      {
        uint64_t v55 = v15 | 1;
        if (*(void *)(v13 + 8 * (v15 | 1)))
        {
          unint64_t v17 = 0;
          unint64_t v56 = v15;
          BOOL v54 = *(void *)(v13 + 8 * v15) == 0;
          do
          {
            uint64_t v18 = *(void *)(v10 + 32) + 24 * v16;
            if (*(char *)(v18 + 23) < 0) {
              uint64_t v18 = *(void *)v18;
            }
            uint64_t Word = TLexicon::findWord(*(void **)(a1 + 32), (__int32 *)v18);
            if (!Word)
            {
              uint64_t v20 = *(void *)(v10 + 32) + 24 * v16;
              if (*(char *)(v20 + 23) < 0) {
                uint64_t v20 = *(void *)v20;
              }
              uint64_t Word = TLexicon::addTempWord(*(void *)(a1 + 32), (int *)v20, 0, 0, 0);
            }
            uint64_t v21 = *(void *)(*(void *)(v10 + 80) + 8 * v16);
            BOOL v22 = v17 == 0;
            uint64_t v23 = (_OWORD *)(*(void *)(v10 + 56) + (v16 << 6));
            *(_OWORD *)&v57[6] = *v23;
            *(_OWORD *)&v57[22] = v23[1];
            *(_OWORD *)&v57[38] = v23[2];
            *(_OWORD *)&v57[54] = v23[3];
            if (v16)
            {
              BOOL v24 = 0;
            }
            else
            {
              BOOL v25 = *(unsigned char *)(v10 + 1) != 0;
              char v26 = v51;
              if (*(unsigned char *)(v10 + 1)) {
                char v26 = 1;
              }
              if ((v26 & 1) == 0) {
                BOOL v25 = *(unsigned char *)v10 != 0;
              }
              BOOL v24 = v52;
              BOOL v52 = v25;
            }
            long long v27 = (char *)v5[1];
            long long v28 = (char *)v5[2];
            if (v27 >= v28)
            {
              uint64_t v30 = a1;
              uint64_t v31 = v6;
              uint64_t v32 = 0x6DB6DB6DB6DB6DB7 * ((v27 - (unsigned char *)*v5) >> 4);
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) > 0x249249249249249) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v34 = 0x6DB6DB6DB6DB6DB7 * ((v28 - (unsigned char *)*v5) >> 4);
              if (2 * v34 > v33) {
                unint64_t v33 = 2 * v34;
              }
              if (v34 >= 0x124924924924924) {
                unint64_t v35 = 0x249249249249249;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                uint64_t v36 = v5;
                uint64_t v37 = v21;
                size_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(v50, v35);
                uint64_t v21 = v37;
                int64_t v5 = v36;
                BOOL v22 = v17 == 0;
              }
              else
              {
                size_t v38 = 0;
              }
              unint64_t v39 = &v38[112 * v32];
              *((void *)v39 + 12) = *(void *)&v57[62];
              *(_OWORD *)(v39 + 34) = *(_OWORD *)v57;
              *(_OWORD *)(v39 + 82) = *(_OWORD *)&v57[48];
              *(_OWORD *)(v39 + 66) = *(_OWORD *)&v57[32];
              uint64_t v6 = v31;
              *(void *)unint64_t v39 = v31;
              *((void *)v39 + 1) = v56;
              *((void *)v39 + 2) = Word;
              *((void *)v39 + 3) = v21;
              v39[32] = v24;
              v39[33] = v54;
              *(_OWORD *)(v39 + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)&v57[16];
              v39[104] = 1;
              v39[105] = v22;
              size_t v41 = (char *)*v5;
              uint64_t v40 = (char *)v5[1];
              int v42 = v39;
              if (v40 != *v5)
              {
                do
                {
                  long long v43 = *((_OWORD *)v40 - 7);
                  long long v44 = *((_OWORD *)v40 - 5);
                  *((_OWORD *)v42 - 6) = *((_OWORD *)v40 - 6);
                  *((_OWORD *)v42 - 5) = v44;
                  *((_OWORD *)v42 - 7) = v43;
                  long long v45 = *((_OWORD *)v40 - 4);
                  long long v46 = *((_OWORD *)v40 - 3);
                  long long v47 = *((_OWORD *)v40 - 2);
                  *(_OWORD *)(v42 - 22) = *(_OWORD *)(v40 - 22);
                  *((_OWORD *)v42 - 3) = v46;
                  *((_OWORD *)v42 - 2) = v47;
                  *((_OWORD *)v42 - 4) = v45;
                  v42 -= 112;
                  v40 -= 112;
                }
                while (v40 != v41);
                uint64_t v40 = (char *)*v5;
              }
              a1 = v30;
              uint64_t v10 = v53;
              long long v29 = v39 + 112;
              *int64_t v5 = v42;
              v5[1] = v39 + 112;
              v5[2] = &v38[112 * v35];
              if (v40) {
                operator delete(v40);
              }
            }
            else
            {
              *(_OWORD *)(v27 + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)&v57[16];
              *(_OWORD *)(v27 + 66) = *(_OWORD *)&v57[32];
              *(_OWORD *)(v27 + 82) = *(_OWORD *)&v57[48];
              *(void *)long long v27 = v6;
              *((void *)v27 + 1) = v56;
              *((void *)v27 + 2) = Word;
              *((void *)v27 + 3) = v21;
              v27[32] = v24;
              v27[33] = v54;
              *((void *)v27 + 12) = *(void *)&v57[62];
              *(_OWORD *)(v27 + 34) = *(_OWORD *)v57;
              v27[104] = 1;
              long long v29 = v27 + 112;
              v27[105] = v22;
              uint64_t v10 = v53;
            }
            v5[1] = v29;
            ++v16;
            ++v17;
            uint64_t v13 = *(void *)(v10 + 104);
          }
          while (v17 < *(void *)(v13 + 8 * v55));
          uint64_t v14 = *(void *)(v10 + 112);
          unint64_t v15 = v56;
        }
        v15 += 2;
      }
      while (v15 < (v14 - v13) >> 3);
    }
    ++v6;
    BOOL v8 = v52;
  }
  while ((unint64_t)v6 < a3);
  return v8;
}

void *TFormatter::addLeftContext(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, BOOL *a5)
{
  uint64_t v10 = (TParam *)(*(void *)(a1 + 48) + 1520);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v10);
  unint64_t v12 = 0;
  unint64_t v13 = *((int *)v10 + TParam::getValidConfig(v10, ActiveConfigHandle) + 40);
  uint64_t v14 = (uint64_t *)a3;
  do
  {
    if (v14 <= a2) {
      break;
    }
    uint64_t v15 = *--v14;
    uint64_t v16 = TResultManager::getResult(*(void *)(a1 + 128), v15);
    v12 -= 0x5555555555555555 * ((uint64_t)(*(void *)(v16 + 40) - *(void *)(v16 + 32)) >> 3);
  }
  while (v12 < v13);
  unint64_t v17 = (TParam *)(*(void *)(a1 + 48) + 2472);
  uint64_t v18 = TParam::getActiveConfigHandle(v17);
  char v19 = *((unsigned char *)v17 + TParam::getValidConfig(v17, v18) + 152) == 0;
  uint64_t result = (void *)TFormatter::addWords(a1, v14, a3, v19, (void **)a4);
  a5[1] = (char)result;
  *a5 = v14 == a2;
  if (v12 > v13)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    BOOL v24 = *(char **)a4;
    uint64_t v23 = *(char **)(a4 + 8);
    uint64_t v25 = (uint64_t)&v23[-*(void *)a4];
    uint64_t v26 = 0x6DB6DB6DB6DB6DB7 * (v25 >> 4);
    uint64_t v27 = v25 - 7;
    while (1)
    {
      unint64_t v28 = v21 + 1;
      if (v24[v27])
      {
        uint64_t v22 = v21 + 1;
        if (v28 >= v13) {
          break;
        }
      }
      v27 -= 112;
      ++v21;
      if (v12 == v28) {
        goto LABEL_11;
      }
    }
    uint64_t v22 = v21 + 1;
LABEL_11:
    if (v22 != v26)
    {
      *a5 = 0;
      long long v29 = &v23[-112 * v22];
      if (v24 != v29)
      {
        uint64_t v30 = 112 * v22;
        if (v23 != v29) {
          uint64_t result = memmove(v24, v29, v30 - 6);
        }
        *(void *)(a4 + 8) = &v24[v30];
      }
    }
  }
  return result;
}

void TFormatter::addRightContext(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, BOOL *a5)
{
  if (a2 >= a3)
  {
    uint64_t v10 = 0;
    BOOL v11 = a2;
  }
  else
  {
    uint64_t v10 = 0;
    BOOL v11 = a2;
    do
    {
      uint64_t Result = TResultManager::getResult(*(void *)(a1 + 128), *v11);
      uint64_t v13 = *(void *)(Result + 104);
      uint64_t v14 = *(void *)(Result + 112);
      uint64_t v15 = v14 - v13;
      if (v14 != v13)
      {
        unint64_t v16 = 0;
        unint64_t v17 = v15 >> 3;
        do
        {
          uint64_t v15 = *(void *)(v13 + 8 * v16);
          if (v15) {
            LOBYTE(v15) = *(void *)(v13 + 8 * v16 + 8) != 0;
          }
          v10 += *(void *)(v13 + 8 * v16 + 8);
          v16 += 2;
        }
        while (v16 < v17 && (v15 & 1) == 0);
      }
      ++v11;
    }
    while (v11 < a3 && (v15 & 1) == 0);
  }
  uint64_t v18 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4;
  char v19 = (TParam *)(*(void *)(a1 + 48) + 2472);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v19);
  char v21 = *((unsigned char *)v19 + TParam::getValidConfig(v19, ActiveConfigHandle) + 152) == 0;
  a5[1] = TFormatter::addWords(a1, a2, (unint64_t)v11, v21, (void **)a4);
  unint64_t v22 = v10 + 0x6DB6DB6DB6DB6DB7 * v18;
  BOOL v23 = v11 == a3 && v22 == 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
  *a5 = v23;

  std::vector<TItnWordData>::resize(a4, v22);
}

void std::vector<TItnWordData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<TItnWordData>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 112 * a2;
  }
}

uint64_t TFormatter::segment(TFormatter *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  int64_t v5 = a2;
  std::vector<TItnStateData>::vector(v271, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) + 1);
  *(void *)v271[0] = 0;
  uint64_t v7 = *((void *)a1 + 6);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v7 + 18008));
  char v9 = *(unsigned char *)(v7 + TParam::getValidConfig((TParam *)(v7 + 18008), ActiveConfigHandle) + 18160);
  uint64_t v10 = (unsigned char *)*((void *)a1 + 13);
  v10[8] = v9;
  (*(void (**)(unsigned char *))(*(void *)v10 + 16))(v10);
  uint64_t v11 = *((void *)a1 + 6);
  uint64_t v12 = TParam::getActiveConfigHandle((TParam *)(v11 + 17760));
  char v13 = *(unsigned char *)(v11 + TParam::getValidConfig((TParam *)(v11 + 17760), v12) + 17912);
  uint64_t v14 = *((void *)a1 + 13);
  uint64_t v15 = *(void *)(v14 + 16);
  *(unsigned char *)(v14 + 24) = v13;
  (*(void (**)(void))(v15 + 16))();
  uint64_t v16 = *((void *)a1 + 6);
  uint64_t v17 = TParam::getActiveConfigHandle((TParam *)(v16 + 2720));
  double v18 = *(double *)(v16 + 8 * TParam::getValidConfig((TParam *)(v16 + 2720), v17) + 2872);
  uint64_t v19 = *((void *)a1 + 6);
  uint64_t v20 = TParam::getActiveConfigHandle((TParam *)(v19 + 3256));
  double v21 = *(double *)(v19 + 8 * TParam::getValidConfig((TParam *)(v19 + 3256), v20) + 3408);
  if (*((void *)a1 + 18)
    && (uint64_t v22 = *((void *)a1 + 6),
        uint64_t v23 = TParam::getActiveConfigHandle((TParam *)(v22 + 9264)),
        *(unsigned char *)(v22 + TParam::getValidConfig((TParam *)(v22 + 9264), v23) + 9416)))
  {
    uint64_t v24 = *((void *)a1 + 6);
    uint64_t v25 = TParam::getActiveConfigHandle((TParam *)(v24 + 3792));
    BOOL v245 = *(unsigned char *)(v24 + TParam::getValidConfig((TParam *)(v24 + 3792), v25) + 3944) == 0;
  }
  else
  {
    BOOL v245 = 0;
  }
  if (*((void *)a1 + 19)
    && (uint64_t v26 = *((void *)a1 + 6),
        uint64_t v27 = TParam::getActiveConfigHandle((TParam *)(v26 + 9512)),
        *(unsigned char *)(v26 + TParam::getValidConfig((TParam *)(v26 + 9512), v27) + 9664)))
  {
    uint64_t v28 = *((void *)a1 + 6);
    uint64_t v29 = TParam::getActiveConfigHandle((TParam *)(v28 + 3792));
    BOOL v249 = *(unsigned char *)(v28 + TParam::getValidConfig((TParam *)(v28 + 3792), v29) + 3944) == 0;
  }
  else
  {
    BOOL v249 = 0;
  }
  uint64_t v246 = a1;
  if (*((void *)a1 + 20)
    && (uint64_t v30 = *((void *)a1 + 6),
        uint64_t v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 7640)),
        *(unsigned char *)(v30 + TParam::getValidConfig((TParam *)(v30 + 7640), v31) + 7792)))
  {
    uint64_t v32 = *((void *)a1 + 6);
    uint64_t v33 = TParam::getActiveConfigHandle((TParam *)(v32 + 3792));
    BOOL v248 = *(unsigned char *)(v32 + TParam::getValidConfig((TParam *)(v32 + 3792), v33) + 3944) == 0;
  }
  else
  {
    BOOL v248 = 0;
  }
  uint64_t v268 = 0;
  uint64_t v269 = 0;
  uint64_t v270 = 0;
  uint64_t v265 = 0;
  uint64_t v266 = 0;
  uint64_t v267 = 0;
  if (v245)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)uint64_t v260 = 0;
    uint64_t v34 = *v5;
    if (v5[1] != *v5)
    {
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      do
      {
        uint64_t v37 = *(void *)(v34 + 112 * v36 + 16);
        if ((unint64_t)v35 >= *(void *)v260)
        {
          uint64_t v38 = (v35 - (char *)__p[0]) >> 3;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v39 = (uint64_t)(*(void *)v260 - (unint64_t)__p[0]) >> 2;
          if (v39 <= v38 + 1) {
            unint64_t v39 = v38 + 1;
          }
          if (*(void *)v260 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40) {
            size_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v260, v40);
          }
          else {
            size_t v41 = 0;
          }
          int v42 = &v41[8 * v38];
          *(void *)int v42 = v37;
          unint64_t v35 = v42 + 8;
          long long v44 = (char *)__p[0];
          long long v43 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              uint64_t v45 = *((void *)v43 - 1);
              v43 -= 8;
              *((void *)v42 - 1) = v45;
              v42 -= 8;
            }
            while (v43 != v44);
            long long v43 = (char *)__p[0];
          }
          __p[0] = v42;
          __p[1] = v35;
          *(void *)uint64_t v260 = &v41[8 * v40];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(void *)unint64_t v35 = v37;
          v35 += 8;
        }
        __p[1] = v35;
        ++v36;
        uint64_t v34 = *v5;
      }
      while (v36 < 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
    }
    long long v46 = v246;
    TCompounder::apply(*((void *)v246 + 18), (uint64_t *)__p, a3, a4, 1, (void **)&v268);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v46 = a1;
    if (v249)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)uint64_t v260 = 0;
      uint64_t v47 = *v5;
      if (v5[1] != *v5)
      {
        int v48 = 0;
        unint64_t v49 = 0;
        do
        {
          uint64_t v50 = *(void *)(v47 + 112 * v49 + 16);
          if ((unint64_t)v48 >= *(void *)v260)
          {
            uint64_t v51 = (v48 - (char *)__p[0]) >> 3;
            if ((unint64_t)(v51 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v52 = (uint64_t)(*(void *)v260 - (unint64_t)__p[0]) >> 2;
            if (v52 <= v51 + 1) {
              unint64_t v52 = v51 + 1;
            }
            if (*(void *)v260 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v52;
            }
            if (v53) {
              BOOL v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v260, v53);
            }
            else {
              BOOL v54 = 0;
            }
            uint64_t v55 = &v54[8 * v51];
            *(void *)uint64_t v55 = v50;
            int v48 = v55 + 8;
            long long v57 = (char *)__p[0];
            unint64_t v56 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                uint64_t v58 = *((void *)v56 - 1);
                v56 -= 8;
                *((void *)v55 - 1) = v58;
                v55 -= 8;
              }
              while (v56 != v57);
              unint64_t v56 = (char *)__p[0];
            }
            __p[0] = v55;
            __p[1] = v48;
            *(void *)uint64_t v260 = &v54[8 * v53];
            if (v56) {
              operator delete(v56);
            }
          }
          else
          {
            *(void *)int v48 = v50;
            v48 += 8;
          }
          __p[1] = v48;
          ++v49;
          uint64_t v47 = *v5;
        }
        while (v49 < 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
      }
      TRne::apply(*((void *)v246 + 19), __p, a3, a4, 1);
    }
  }
  if (v248)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)uint64_t v260 = 0;
    uint64_t v59 = *v5;
    if (v5[1] != *v5)
    {
      uint64_t v60 = 0;
      unint64_t v61 = 0;
      do
      {
        uint64_t v62 = *(void *)(v59 + 112 * v61 + 16);
        if ((unint64_t)v60 >= *(void *)v260)
        {
          uint64_t v63 = (v60 - (char *)__p[0]) >> 3;
          if ((unint64_t)(v63 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v64 = (uint64_t)(*(void *)v260 - (unint64_t)__p[0]) >> 2;
          if (v64 <= v63 + 1) {
            unint64_t v64 = v63 + 1;
          }
          if (*(void *)v260 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v64;
          }
          if (v65) {
            long long v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v260, v65);
          }
          else {
            long long v66 = 0;
          }
          long long v67 = &v66[8 * v63];
          *(void *)long long v67 = v62;
          uint64_t v60 = v67 + 8;
          long long v69 = (char *)__p[0];
          unint64_t v68 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              uint64_t v70 = *((void *)v68 - 1);
              v68 -= 8;
              *((void *)v67 - 1) = v70;
              v67 -= 8;
            }
            while (v68 != v69);
            unint64_t v68 = (char *)__p[0];
          }
          __p[0] = v67;
          __p[1] = v60;
          *(void *)uint64_t v260 = &v66[8 * v65];
          if (v68) {
            operator delete(v68);
          }
        }
        else
        {
          *(void *)uint64_t v60 = v62;
          v60 += 8;
        }
        __p[1] = v60;
        ++v61;
        uint64_t v59 = *v5;
      }
      while (v61 < 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
    }
    TCliticsProc::apply(*((void *)v246 + 20), __p, a3, a4, 1);
  }
  v252 = v5;
  uint64_t v71 = *((void *)v46 + 6);
  uint64_t v72 = TParam::getActiveConfigHandle((TParam *)(v71 + 19000));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v71 + 19000), v72);
  int v253 = *(unsigned __int8 *)(v71 + ValidConfig + 19152);
  if (*(unsigned char *)(v71 + ValidConfig + 19152))
  {
    uint64_t v74 = *v5;
    if (v5[1] != *v5)
    {
      uint64_t v75 = 0;
      unint64_t v76 = 0;
      do
      {
        loggableUnicode(**(unsigned int ***)(v74 + v75 + 16), __p);
        if (v76 >= a4) {
          unint64_t v81 = "RC";
        }
        else {
          unint64_t v81 = "Utt";
        }
        if (v76 < a3) {
          unint64_t v81 = "LC";
        }
        if (v260[7] >= 0) {
          unint64_t v82 = __p;
        }
        else {
          unint64_t v82 = (void **)__p[0];
        }
        tknPrintf("DebugSegmentation: Word %llu: Position=%s, Name=%s PauseDurationAfter=%llu CrossUttBreakBefore=%d\n FirstWordInBlock=%d\n", v77, v78, v79, v80, v76, v81, v82, *(void *)(*v5 + v75 + 24), *(unsigned __int8 *)(*v5 + v75 + 32), *(unsigned __int8 *)(*v5 + v75 + 105));
        if ((v260[7] & 0x80000000) != 0) {
          operator delete(__p[0]);
        }
        ++v76;
        uint64_t v74 = *v5;
        v75 += 112;
      }
      while (v76 < 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
    }
  }
  TAllocator::TAllocator((TAllocator *)v264, 2048);
  std::vector<std::vector<TItnGrammarStateData const*>>::vector(v263, 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4));
  uint64_t v87 = v246;
  unint64_t v88 = 0;
  unint64_t v89 = 0;
  int v247 = v245 || v249;
  double v90 = v18 + v21;
  while (1)
  {
    uint64_t v91 = *v5;
    if (v89 >= 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4)) {
      break;
    }
    if (*(unsigned char *)(v91 + 112 * v89 + 33))
    {
      unint64_t v92 = v89 + 1;
      uint64_t v93 = v271[0];
      uint64_t v94 = v271[0] + 72 * v89;
      double v95 = *(double *)v94;
      uint64_t v96 = (void *)(*(void *)(v91 + 112 * v89 + 24) + *(void *)(v94 + 8));
      if (v253)
      {
        tknPrintf("DebugSegmentation: EdgeType=Epsilon WordRange=[%llu,%llu) Penalty=0 CumulatedPenalty=%f CumulatedPauseAtTarget=%llu\n", v83, v84, v85, v86, v89, v89 + 1, *(void *)&v95, v96);
        uint64_t v93 = v271[0];
      }
      double v97 = *(double *)(v93 + 72 * v92);
      if (v95 < v97 || v95 == v97 && (unint64_t)v96 > *(void *)(v93 + 72 * v92 + 8))
      {
        __p[0] = *(void **)&v95;
        __p[1] = v96;
        *(_OWORD *)uint64_t v260 = v89;
        *(_OWORD *)&v260[16] = 0uLL;
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v261, &dword_2140A2924);
        uint64_t v98 = v271[0] + 72 * v92;
        long long v99 = *(_OWORD *)&v260[16];
        long long v100 = *(_OWORD *)__p;
        *(_OWORD *)(v98 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_OWORD *)v260;
        *(_OWORD *)(v98 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v99;
        *(_OWORD *)uint64_t v98 = v100;
        uint64_t v101 = v98 + 48;
        if (*(char *)(v98 + 71) < 0) {
          operator delete(*(void **)v101);
        }
        long long v102 = v261;
        *(void *)(v101 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v262;
        *(_OWORD *)uint64_t v101 = v102;
      }
    }
    int v103 = v247;
    if (a3 != v89) {
      int v103 = 0;
    }
    if (v103 == 1 && v88 < (v269 - v268) >> 4)
    {
      unint64_t v104 = v88;
      uint64_t v105 = &v268[16 * v88];
      uint64_t v106 = *((void *)v105 + 1);
      if (v106 != 1)
      {
        uint64_t v107 = v106 + a3;
        uint64_t v108 = v271[0] + 72 * a3;
        double v109 = v18 + *(double *)v108;
        unint64_t v110 = *(void *)(*v5 + 112 * v107 - 88) + *(void *)(v108 + 8);
        if (v253)
        {
          if (v245)
          {
            loggableUnicode(**(unsigned int ***)v105, __p);
            char v115 = __p;
            if (v260[7] < 0) {
              char v115 = (void **)__p[0];
            }
            tknPrintf("DebugSegmentation: EdgeType=Compounder WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu Replacement=%s\n", v111, v112, v113, v114, a3, v107, *(void *)&v18, *(void *)&v109, v110, v115);
          }
          else
          {
            loggableUnicode(**(unsigned int ***)v105, __p);
            int v120 = __p;
            if (v260[7] < 0) {
              int v120 = (void **)__p[0];
            }
            tknPrintf("DebugSegmentation: EdgeType=RNE WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu Replacement=%s\n", v116, v117, v118, v119, a3, v107, *(void *)&v18, *(void *)&v109, v110, v120);
          }
          if ((v260[7] & 0x80000000) != 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v121 = v271[0];
        uint64_t v122 = v271[0] + 72 * v107;
        if (v109 < *(double *)v122 || v109 == *(double *)v122 && v110 > *(void *)(v271[0] + 72 * v107 + 8))
        {
          uint64_t v123 = *(void *)&v268[16 * v104];
          *(double *)uint64_t v122 = v109;
          *(void *)(v122 + 8) = v110;
          *(void *)(v122 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a3;
          *(void *)(v122 + 24) = 0;
          *(void *)(v122 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
          *(void *)(v122 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v123;
          uint64_t v124 = v121 + 72 * v107 + 48;
          if (*(char *)(v122 + 71) < 0) {
            operator delete(*(void **)v124);
          }
          *(void *)uint64_t v124 = 0;
          *(void *)(v124 + 8) = 0;
          *(void *)(v124 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
        }
      }
      a3 += *(void *)&v268[16 * v104 + 8];
      unint64_t v88 = v104 + 1;
    }
    unint64_t v250 = v88;
    uint64_t v125 = *((void *)v87 + 6);
    uint64_t v126 = TParam::getActiveConfigHandle((TParam *)(v125 + 3792));
    if (!*(unsigned char *)(v125 + TParam::getValidConfig((TParam *)(v125 + 3792), v126) + 3944))
    {
      uint64_t v131 = *(void *)(v263[0] + 24 * v89);
      if (*(void *)(v263[0] + 24 * v89 + 8) != v131)
      {
        unint64_t v132 = 0;
        do
        {
          uint64_t v133 = *(void *)(v131 + 8 * v132);
          uint64_t v134 = *(void *)(v133 + 8);
          uint64_t v135 = v271[0];
          uint64_t v136 = v271[0] + 72 * v89;
          double v137 = *(double *)v133;
          double v138 = *(double *)v136 + *(double *)v133;
          uint64_t v139 = (void *)(*(void *)(*v5 + 112 * v134 - 88) + *(void *)(v136 + 8));
          if (v253)
          {
            uint64_t v140 = *(void *)(v133 + 16);
            loggableUnicode(*(unsigned int **)(v133 + 32), __p);
            uint64_t v145 = __p;
            if (v260[7] < 0) {
              uint64_t v145 = (void **)__p[0];
            }
            tknPrintf("DebugSegmentation: EdgeType=Grammar WordRange=[%llu,%llu) LC=%llu Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu Replacement=%s\n", v141, v142, v143, v144, v89, v134, v140, *(void *)&v137, *(void *)&v138, v139, v145);
            if ((v260[7] & 0x80000000) != 0) {
              operator delete(__p[0]);
            }
            uint64_t v135 = v271[0];
          }
          double v146 = *(double *)(v135 + 72 * v134);
          if (v138 < v146
            || v138 == v146
            && ((uint64_t v147 = *(void **)(v135 + 72 * v134 + 8), v139 > v147)
             || v139 == v147
             && *(void *)(*(void *)(*(void *)(v263[0] + 24 * v89) + 8 * v132) + 16) > *(void *)(v135 + 72 * v134 + 24)))
          {
            uint64_t v148 = *(void *)(*(void *)(v263[0] + 24 * v89) + 8 * v132);
            unint64_t v149 = *(__int32 **)(v148 + 32);
            __p[0] = *(void **)&v138;
            __p[1] = v139;
            *(void *)uint64_t v260 = v89;
            *(_OWORD *)&v260[8] = *(_OWORD *)(v148 + 16);
            *(void *)&v260[24] = 0;
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v261, v149);
            uint64_t v150 = v271[0] + 72 * v134;
            long long v151 = *(_OWORD *)&v260[16];
            long long v152 = *(_OWORD *)__p;
            *(_OWORD *)(v150 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_OWORD *)v260;
            *(_OWORD *)(v150 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v151;
            *(_OWORD *)uint64_t v150 = v152;
            uint64_t v153 = v150 + 48;
            if (*(char *)(v150 + 71) < 0) {
              operator delete(*(void **)v153);
            }
            long long v154 = v261;
            *(void *)(v153 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v262;
            *(_OWORD *)uint64_t v153 = v154;
          }
          ++v132;
          uint64_t v131 = *(void *)(v263[0] + 24 * v89);
        }
        while (v132 < (*(void *)(v263[0] + 24 * v89 + 8) - v131) >> 3);
      }
      uint64_t v155 = *((void *)v87 + 6);
      uint64_t v156 = TParam::getActiveConfigHandle((TParam *)(v155 + 1872));
      uint64_t v157 = TParam::getValidConfig((TParam *)(v155 + 1872), v156);
      uint64_t v158 = *v5;
      if (0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4) >= v89 + *(int *)(v155 + 4 * v157 + 2032)) {
        uint64_t v159 = v89 + *(int *)(v155 + 4 * v157 + 2032);
      }
      else {
        uint64_t v159 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 4);
      }
      uint64_t v256 = 0;
      uint64_t v257 = 0;
      uint64_t v258 = 0;
      unint64_t v160 = v158 + 112 * v89;
      uint64_t v161 = *(void *)(v160 + 80);
      uint64_t v162 = *(void *)(v160 + 48);
      if (v161 != -1) {
        uint64_t v162 = v161;
      }
      switch(v162)
      {
        case 9:
LABEL_153:
          uint64_t v163 = *((void *)v87 + 6);
          uint64_t v164 = 27272;
          break;
        case 8:
          uint64_t v163 = *((void *)v87 + 6);
          uint64_t v164 = 27280;
          break;
        case 7:
          goto LABEL_153;
        default:
          v165 = (uint64_t *)(*((void *)v87 + 6) + 136);
LABEL_157:
          uint64_t v166 = *v165;
          TGrammarManager::search(*((void **)v87 + 13), v5, v89, v159, *v165, (uint64_t *)&v256);
          if (*((void *)v87 + 14))
          {
            uint64_t v167 = *((void *)v87 + 6);
            uint64_t v168 = TParam::getActiveConfigHandle((TParam *)(v167 + 19248));
            if (*(unsigned char *)(v167 + TParam::getValidConfig((TParam *)(v167 + 19248), v168) + 19400))
            {
              __p[0] = 0;
              __p[1] = 0;
              *(void *)uint64_t v260 = 0;
              TGrammarManager2::search(*((void **)v87 + 14), v5, v89, v159, v166, (uint64_t *)__p);
              uint64_t v169 = (char *)__p[0];
              if (__p[1] != __p[0])
              {
                unint64_t v170 = 0;
                uint64_t v171 = 8;
                do
                {
                  loggableUnicode(*(unsigned int **)&v169[v171], v254);
                  if (v255 >= 0) {
                    uint64_t v176 = v254;
                  }
                  else {
                    uint64_t v176 = (void **)v254[0];
                  }
                  tknPrintf("Adaptation Result[%llx]: \"%s\"\n", v172, v173, v174, v175, v170, v176);
                  if (v255 < 0) {
                    operator delete(v254[0]);
                  }
                  ++v170;
                  uint64_t v169 = (char *)__p[0];
                  v171 += 56;
                }
                while (v170 < 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3));
              }
              TGrammarManager2::clearResult(*((TGrammarManager2 **)v87 + 14));
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
          }
          uint64_t v177 = (const __int32 **)v256;
          if (v257 != v256)
          {
            unint64_t v178 = 0;
            do
            {
              if (v177[7 * v178 + 3])
              {
                size_t v179 = wcslen(v177[7 * v178 + 1]);
                if ((v179 + 1) >> 62) {
                  uint64_t v180 = -1;
                }
                else {
                  uint64_t v180 = 4 * (v179 + 1);
                }
                uint64_t v181 = (__int32 *)TAllocator::allocate((TAllocator *)v264, v180);
                wcscpy(v181, *((const __int32 **)v256 + 7 * v178 + 1));
                uint64_t v182 = *((void *)v256 + 7 * v178 + 3);
                uint64_t v183 = v263[0];
                uint64_t v184 = TAllocator::allocate((TAllocator *)v264, 40);
                uint64_t v185 = v184;
                uint64_t v186 = v182 + v89;
                uint64_t v187 = (double *)((char *)v256 + 56 * v178);
                double v188 = v18 + v187[5];
                uint64_t v189 = *((void *)v187 + 3);
                unint64_t v190 = *((void *)v187 + 2) + v89;
                uint64_t v191 = *((void *)v187 + 4);
                *(double *)uint64_t v184 = v188;
                *(void *)(v184 + 8) = v190 - v191;
                *(void *)(v184 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v189;
                *(void *)(v184 + 24) = v191;
                *(void *)(v184 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v181;
                uint64_t v192 = v183 + 24 * (v182 + v89);
                uint64_t v195 = *(uint64_t **)(v192 + 8);
                uint64_t v194 = (void **)(v192 + 8);
                v193 = v195;
                unint64_t v196 = (unint64_t)v194[1];
                if ((unint64_t)v195 >= v196)
                {
                  unsigned int v210 = (void **)(v183 + 24 * v186);
                  uint64_t v211 = ((char *)v193 - (unsigned char *)*v210) >> 3;
                  if ((unint64_t)(v211 + 1) >> 61) {
                    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v212 = v196 - (void)*v210;
                  uint64_t v213 = v212 >> 2;
                  if (v212 >> 2 <= (unint64_t)(v211 + 1)) {
                    uint64_t v213 = v211 + 1;
                  }
                  if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v214 = v213;
                  }
                  if (v214) {
                    uint64_t v215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v194 + 1), v214);
                  }
                  else {
                    uint64_t v215 = 0;
                  }
                  uint64_t v225 = (uint64_t *)&v215[8 * v211];
                  *uint64_t v225 = v185;
                  uint64_t v197 = v225 + 1;
                  uint64_t v226 = (char *)*v194;
                  uint64_t v227 = (char *)*v210;
                  int64_t v5 = v252;
                  if (*v194 != *v210)
                  {
                    do
                    {
                      uint64_t v228 = *((void *)v226 - 1);
                      v226 -= 8;
                      *--uint64_t v225 = v228;
                    }
                    while (v226 != v227);
                    uint64_t v226 = (char *)*v210;
                  }
                  *unsigned int v210 = v225;
                  *uint64_t v194 = v197;
                  v194[1] = &v215[8 * v214];
                  if (v226) {
                    operator delete(v226);
                  }
                }
                else
                {
                  uint64_t *v193 = v184;
                  uint64_t v197 = v193 + 1;
                  int64_t v5 = v252;
                }
                *uint64_t v194 = v197;
              }
              else
              {
                uint64_t v198 = &v177[7 * v178];
                unint64_t v199 = (char *)v198[2] + v89 - (char *)v198[4];
                uint64_t v200 = v271[0];
                uint64_t v201 = v271[0] + 72 * v89;
                double v202 = *((double *)v198 + 5);
                double v203 = v18 + *(double *)v201 + v202;
                uint64_t v204 = (void *)(*(void *)(*v5 + 112 * v199 - 88) + *(void *)(v201 + 8));
                if (v253)
                {
                  loggableUnicode((unsigned int *)v177[7 * v178 + 1], __p);
                  int v209 = __p;
                  if (v260[7] < 0) {
                    int v209 = (void **)__p[0];
                  }
                  tknPrintf("DebugSegmentation: EdgeType=Grammar WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu Replacement=%s\n", v205, v206, v207, v208, v89, v199, v18 + v202, *(void *)&v203, v204, v209);
                  if ((v260[7] & 0x80000000) != 0) {
                    operator delete(__p[0]);
                  }
                  uint64_t v200 = v271[0];
                }
                double v216 = *(double *)(v200 + 72 * v199);
                if (v203 < v216 || v203 == v216 && (unint64_t)v204 > *(void *)(v200 + 72 * v199 + 8))
                {
                  uint64_t v217 = (char *)v256 + 56 * v178;
                  uint64_t v218 = (__int32 *)*((void *)v217 + 1);
                  unint64_t v219 = *((void *)v217 + 4);
                  __p[0] = *(void **)&v203;
                  __p[1] = v204;
                  *(_OWORD *)uint64_t v260 = v89;
                  *(_OWORD *)&v260[16] = v219;
                  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v261, v218);
                  uint64_t v220 = v271[0] + 72 * v199;
                  long long v221 = *(_OWORD *)&v260[16];
                  long long v222 = *(_OWORD *)__p;
                  *(_OWORD *)(v220 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_OWORD *)v260;
                  *(_OWORD *)(v220 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v221;
                  *(_OWORD *)uint64_t v220 = v222;
                  uint64_t v223 = v220 + 48;
                  if (*(char *)(v220 + 71) < 0) {
                    operator delete(*(void **)v223);
                  }
                  long long v224 = v261;
                  *(void *)(v223 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v262;
                  *(_OWORD *)uint64_t v223 = v224;
                }
              }
              ++v178;
              uint64_t v177 = (const __int32 **)v256;
            }
            while (v178 < 0x6DB6DB6DB6DB6DB7 * ((v257 - (unsigned char *)v256) >> 3));
          }
          uint64_t v87 = v246;
          TGrammarManager2::clearResult(*((TGrammarManager2 **)v246 + 13));
          if (v256)
          {
            uint64_t v257 = v256;
            operator delete(v256);
          }
          goto LABEL_207;
      }
      v165 = (uint64_t *)(v163 + v164);
      goto LABEL_157;
    }
LABEL_207:
    unint64_t v229 = v89 + 1;
    uint64_t v230 = v271[0];
    uint64_t v231 = v271[0] + 72 * v89;
    double v232 = v90 + *(double *)v231;
    unint64_t v233 = *(void *)(*v5 + 112 * v89 + 24) + *(void *)(v231 + 8);
    if (v253)
    {
      tknPrintf("DebugSegmentation: EdgeType=Default WordRange=[%llu,%llu) Penalty=%f CumulatedPenalty=%f CumulatedPauseAtTarget=%llu\n", v127, v128, v129, v130, v89, v89 + 1, *(void *)&v90, *(void *)&v232, v233);
      uint64_t v230 = v271[0];
    }
    uint64_t v234 = v230 + 72 * v229;
    if (v232 < *(double *)v234 || v232 == *(double *)v234 && v233 > *(void *)(v230 + 72 * v229 + 8))
    {
      uint64_t v235 = *(void *)(*v5 + 112 * v89 + 16);
      *(double *)uint64_t v234 = v232;
      *(void *)(v234 + 8) = v233;
      *(void *)(v234 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v89;
      *(void *)(v234 + 24) = 0;
      *(void *)(v234 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
      *(void *)(v234 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v235;
      uint64_t v236 = v230 + 72 * v229 + 48;
      if (*(char *)(v234 + 71) < 0) {
        operator delete(*(void **)v236);
      }
      *(void *)uint64_t v236 = 0;
      *(void *)(v236 + 8) = 0;
      *(void *)(v236 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    }
    uint64_t v237 = *((void *)v87 + 13);
    uint64_t v238 = *(void *)(v237 + 16);
    *(unsigned char *)(v237 + 24) = 0;
    (*(void (**)(void))(v238 + 16))();
    v239 = (unsigned char *)*((void *)v87 + 13);
    v239[8] = 0;
    (*(void (**)(unsigned char *))(*(void *)v239 + 16))(v239);
    ++v89;
    unint64_t v88 = v250;
  }
  unint64_t v240 = 0x8E38E38E38E38E39 * ((uint64_t)(v271[1] - v271[0]) >> 3) - 1;
  if (*(void *)(v271[0] + 72 * v240 + 16) != -1)
  {
    __p[0] = 0;
    uint64_t v256 = 0;
    uint64_t v241 = *(const TWord **)(v271[0] + 72 * v240 + 40);
    if (v241) {
      TFormatter::makeBlockForWord(v87, v241, v84, v85, v86);
    }
    uint64_t v242 = v271[0] + 72 * v240;
    uint64_t v243 = (__int32 *)(v242 + 48);
    if (*(char *)(v242 + 71) < 0) {
      uint64_t v243 = *(__int32 **)v243;
    }
    TFormatter::splitPattern((uint64_t *)v87, v243, __p, &v256);
  }
  __p[0] = v263;
  std::vector<std::vector<TItnGrammarStateData const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  TAllocator::clear((TAllocator *)v264);
  if (v265)
  {
    uint64_t v266 = v265;
    operator delete(v265);
  }
  if (v268)
  {
    uint64_t v269 = v268;
    operator delete(v268);
  }
  __p[0] = v271;
  std::vector<TItnStateData>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return 0;
}

void sub_213F02438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  unint64_t v49 = *(void **)(v47 - 192);
  if (v49)
  {
    *(void *)(v47 - 184) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *(void **)(v47 - 168);
  if (v50)
  {
    *(void *)(v47 - 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v50;
    operator delete(v50);
  }
  __p = (void *)(v47 - 144);
  std::vector<TItnStateData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::wstring *TFormatter::applyControls(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v228 = 0;
  unint64_t v229 = 0;
  v230[0] = 0;
  std::vector<TItnControl>::__init_with_size[abi:ne180100]<TItnControl*,TItnControl*>(&v228, *(const void **)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  uint64_t v225 = 0;
  uint64_t v226 = 0;
  uint64_t v227 = 0;
  std::vector<TItnControl>::__init_with_size[abi:ne180100]<TItnControl*,TItnControl*>(&v225, v228, (uint64_t)v229, 0xAAAAAAAAAAAAAAABLL * (v229 - v228));
  long long v222 = 0;
  uint64_t v223 = 0;
  uint64_t v224 = 0;
  *(void *)&long long v9 = -1;
  *((void *)&v9 + 1) = -1;
  v221[2] = v9;
  v221[3] = v9;
  v221[0] = v9;
  v221[1] = v9;
  if (!a2)
  {
    uint64_t v192 = 0;
    goto LABEL_338;
  }
  char v10 = 0;
  uint64_t v11 = -1;
  uint64_t v197 = (char **)a7;
  uint64_t v195 = (TBlock *)a2;
  do
  {
    if (v10) {
      goto LABEL_6;
    }
    if (*(void *)(a2 + 8) == a5)
    {
      std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>((char *)&v222, (char *)v228, (uint64_t)v229, 0xAAAAAAAAAAAAAAABLL * (v229 - v228));
LABEL_6:
      char v12 = 1;
      goto LABEL_8;
    }
    char v12 = 0;
LABEL_8:
    if (*(char *)(a2 + 71) < 0) {
      uint64_t v13 = *(void *)(a2 + 56);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 71);
    }
    char v199 = v12;
    if (v13 && !*(unsigned char *)a2) {
      std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>((char *)&v225, (char *)v228, (uint64_t)v229, 0xAAAAAAAAAAAAAAABLL * (v229 - v228));
    }
    uint64_t v14 = *(void *)(a2 + 8);
    __p = 0;
    __dst = 0;
    unint64_t v220 = 0;
    std::vector<TItnControl>::__init_with_size[abi:ne180100]<TItnControl*,TItnControl*>(&__p, v228, (uint64_t)v229, 0xAAAAAAAAAAAAAAABLL * (v229 - v228));
    uint64_t v202 = a2;
    if (v14 != -1)
    {
      uint64_t v15 = *a3;
      if (*(unsigned char *)(*a3 + 112 * v14 + 32))
      {
        uint64_t v16 = (char *)__p;
        if (__dst == __p)
        {
          unint64_t v19 = 0;
        }
        else
        {
          uint64_t v17 = 0;
          unint64_t v18 = 0;
          unint64_t v19 = 0;
          do
          {
            if (getItnControlCategory(*(void *)&v16[v17]) != 1)
            {
              uint64_t v20 = (char *)__p + 24 * v19++;
              long long v21 = *(_OWORD *)((char *)__p + v17);
              *((void *)v20 + 2) = *(void *)((char *)__p + v17 + 16);
              *(_OWORD *)uint64_t v20 = v21;
            }
            ++v18;
            uint64_t v16 = (char *)__p;
            v17 += 24;
          }
          while (v18 < 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - (unsigned char *)__p) >> 3));
        }
        std::vector<TItnControl>::resize((uint64_t)&__p, v19);
        uint64_t v15 = *a3;
      }
      if (*(unsigned char *)(v15 + 112 * v14 + 104))
      {
        uint64_t v22 = 0;
        if (v11 == -1) {
          uint64_t v23 = v221;
        }
        else {
          uint64_t v23 = (_OWORD *)(v15 + 112 * v11 + 40);
        }
        uint64_t v24 = v15 + 112 * v14 + 40;
        do
        {
          uint64_t v25 = *(void *)(v24 + 8 * v22);
          if (*((void *)v23 + v22) != v25)
          {
            if (v25 == -1) {
              uint64_t v26 = *((void *)v23 + v22);
            }
            else {
              uint64_t v26 = *(void *)(v24 + 8 * v22);
            }
            if (v25 == -1) {
              uint64_t v27 = 2;
            }
            else {
              uint64_t v27 = 1;
            }
            uint64_t v28 = __dst;
            if ((unint64_t)__dst >= v220)
            {
              unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - (unsigned char *)__p) >> 3);
              unint64_t v31 = v30 + 1;
              if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_350:
              }
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v220 - (void)__p) >> 3) > v31) {
                unint64_t v31 = 0x5555555555555556 * ((uint64_t)(v220 - (void)__p) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v220 - (void)__p) >> 3) >= 0x555555555555555) {
                unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v32 = v31;
              }
              if (v32) {
                uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v220, v32);
              }
              else {
                uint64_t v33 = 0;
              }
              uint64_t v34 = &v33[24 * v30];
              *(void *)uint64_t v34 = v26;
              *((void *)v34 + 1) = v27;
              *((void *)v34 + 2) = 2;
              unint64_t v36 = (char *)__p;
              unint64_t v35 = (char *)__dst;
              uint64_t v37 = v34;
              if (__dst == __p)
              {
                a2 = v202;
              }
              else
              {
                a2 = v202;
                do
                {
                  long long v38 = *(_OWORD *)(v35 - 24);
                  *((void *)v37 - 1) = *((void *)v35 - 1);
                  *(_OWORD *)(v37 - 24) = v38;
                  v37 -= 24;
                  v35 -= 24;
                }
                while (v35 != v36);
                unint64_t v35 = (char *)__p;
              }
              uint64_t v29 = v34 + 24;
              __p = v37;
              __dst = v34 + 24;
              unint64_t v220 = (unint64_t)&v33[24 * v32];
              if (v35) {
                operator delete(v35);
              }
            }
            else
            {
              *(void *)__dst = v26;
              v28[1] = v27;
              uint64_t v29 = v28 + 3;
              v28[2] = 2;
            }
            __dst = v29;
          }
          ++v22;
        }
        while (v22 != 4);
        for (uint64_t i = 0; i != 4; ++i)
        {
          uint64_t v40 = *(void *)(v15 + 112 * v14 + 8 * i + 72);
          if (v40 != -1)
          {
            size_t v41 = __dst;
            if ((unint64_t)__dst >= v220)
            {
              unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - (unsigned char *)__p) >> 3);
              unint64_t v44 = v43 + 1;
              if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_350;
              }
              if (0x5555555555555556 * ((uint64_t)(v220 - (void)__p) >> 3) > v44) {
                unint64_t v44 = 0x5555555555555556 * ((uint64_t)(v220 - (void)__p) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v220 - (void)__p) >> 3) >= 0x555555555555555) {
                unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v45 = v44;
              }
              if (v45) {
                long long v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v220, v45);
              }
              else {
                long long v46 = 0;
              }
              uint64_t v47 = &v46[24 * v43];
              *(void *)uint64_t v47 = v40;
              *((void *)v47 + 1) = 3;
              *((void *)v47 + 2) = 2;
              unint64_t v49 = (char *)__p;
              int v48 = (char *)__dst;
              uint64_t v50 = v47;
              if (__dst == __p)
              {
                a2 = v202;
              }
              else
              {
                a2 = v202;
                do
                {
                  long long v51 = *(_OWORD *)(v48 - 24);
                  *((void *)v50 - 1) = *((void *)v48 - 1);
                  *(_OWORD *)(v50 - 24) = v51;
                  v50 -= 24;
                  v48 -= 24;
                }
                while (v48 != v49);
                int v48 = (char *)__p;
              }
              int v42 = v47 + 24;
              __p = v50;
              __dst = v47 + 24;
              unint64_t v220 = (unint64_t)&v46[24 * v45];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *(void *)__dst = v40;
              v41[1] = 3;
              int v42 = v41 + 3;
              v41[2] = 2;
            }
            __dst = v42;
          }
        }
        uint64_t v11 = v14;
      }
    }
    collectControls(&__p, a2, 2, 0);
    collectControls(&__p, a2, 1, 0);
    collectControls(&__p, a2, 3, -1);
    collectControls(&__p, a2, 6, 1);
    collectControls(&__p, a2, 5, 0);
    uint64_t v52 = *(void *)(a2 + 144);
    if (v52)
    {
      int v53 = 0;
      do
      {
        uint64_t v54 = *(void *)(v52 + 8);
        BOOL v55 = v54 != -1 && *(unsigned __int8 *)(*a3 + 112 * v54 + 32) != 0;
        collectControls(&__p, v52, 6, -1);
        collectControls(&__p, v52, 4, -1);
        v53 |= v55;
        if ((v53 & 1) == 0) {
          collectControls(&__p, v52, 4, 1);
        }
        if (*(char *)(v52 + 71) < 0)
        {
          if (*(void *)(v52 + 56)) {
            goto LABEL_92;
          }
        }
        else if (*(unsigned char *)(v52 + 71))
        {
          goto LABEL_92;
        }
        collectControls(&__p, v52, 2, -1);
        uint64_t v52 = *(void *)(v52 + 144);
      }
      while (v52);
    }
    std::vector<TItnControl>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnControl const*>,std::__wrap_iter<TItnControl const*>>((uint64_t)&__p, (uint64_t)__dst, *v197, v197[1], 0xAAAAAAAAAAAAAAABLL * ((v197[1] - *v197) >> 3));
LABEL_92:
    uint64_t v215 = 0;
    double v216 = 0;
    uint64_t v217 = 0;
    unint64_t v56 = (int *)(a2 + 48);
    if (*(char *)(a2 + 71) < 0) {
      unint64_t v56 = *(int **)(a2 + 48);
    }
    uint64_t v198 = v11;
    int v57 = *v56;
    if (*v56)
    {
      uint64_t v58 = v56 + 1;
      char v59 = 1;
      while (1)
      {
        {
          operator new();
        }
        if (v57 > 159)
        {
          if (v57 >= 12288)
          {
            if (v57 == 12288) {
              goto LABEL_109;
            }
            int v60 = 65279;
          }
          else
          {
            if (v57 == 160) {
              goto LABEL_109;
            }
            int v60 = 8203;
          }
          if (v57 != v60) {
            goto LABEL_107;
          }
        }
        else if (v57 > 0x20 || ((1 << v57) & 0x100002600) == 0)
        {
LABEL_107:
          unsigned int v61 = *(v58 - 1);
          {
            operator new();
          }
          char v59 = 0;
          char v62 = 0;
          int v63 = 0;
          if (!TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v61)) {
            goto LABEL_116;
          }
        }
LABEL_109:
        int v64 = *v58++;
        int v57 = v64;
        if (!v64)
        {
          int v63 = 1;
          char v62 = v59;
          goto LABEL_116;
        }
      }
    }
    char v62 = 0;
    int v63 = 0;
LABEL_116:
    std::vector<TItnControl>::resize((uint64_t)&v215, 0);
    std::vector<TItnControl>::resize((uint64_t)&v228, 0);
    unint64_t v65 = (char *)__p;
    long long v66 = (char *)__dst;
    if (__dst != __p)
    {
      uint64_t v67 = 0;
      unint64_t v68 = 0;
      while (1)
      {
        long long v69 = &v65[24 * v68];
        switch(*((void *)v69 + 1))
        {
          case 1:
            if (v66 == v65) {
              goto LABEL_127;
            }
            uint64_t v70 = 0;
            unint64_t v71 = 0;
            long long v66 = v65;
            do
            {
              if ((unint64_t)(*(void *)&v66[v70 + 8] - 1) <= 1)
              {
                int ItnControlCategory = getItnControlCategory(*(void *)&v66[v70]);
                int v73 = getItnControlCategory(*((void *)__p + 3 * v68));
                long long v66 = (char *)__p;
                if (ItnControlCategory == v73)
                {
                  unint64_t v74 = *(void *)((char *)__p + v70 + 16);
                  unint64_t v75 = *((void *)__p + 3 * v68 + 2);
                  if (v74 > v75 || v71 > v68 && v74 == v75) {
                    goto LABEL_213;
                  }
                }
              }
              ++v71;
              v70 += 24;
            }
            while (v71 < 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - v66) >> 3));
LABEL_127:
            unint64_t v76 = &v66[24 * v68];
            uint64_t v77 = v229;
            if ((unint64_t)v229 >= v230[0])
            {
              unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * (v229 - v228);
              unint64_t v94 = v93 + 1;
              if (v93 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_351;
              }
              if (0x5555555555555556 * ((uint64_t)(v230[0] - (void)v228) >> 3) > v94) {
                unint64_t v94 = 0x5555555555555556 * ((uint64_t)(v230[0] - (void)v228) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230[0] - (void)v228) >> 3) >= 0x555555555555555) {
                unint64_t v95 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v95 = v94;
              }
              if (v95) {
                uint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v230, v95);
              }
              else {
                uint64_t v96 = 0;
              }
              uint64_t v129 = &v96[24 * v93];
              long long v130 = *(_OWORD *)v76;
              *((void *)v129 + 2) = *((void *)v76 + 2);
              *(_OWORD *)uint64_t v129 = v130;
              unint64_t v132 = v228;
              uint64_t v131 = v229;
              uint64_t v133 = v129;
              if (v229 != v228)
              {
                do
                {
                  long long v134 = *(_OWORD *)(v131 - 3);
                  *((void *)v133 - 1) = *(v131 - 1);
                  *(_OWORD *)(v133 - 24) = v134;
                  v133 -= 24;
                  v131 -= 3;
                }
                while (v131 != v132);
                uint64_t v131 = v228;
              }
              uint64_t v79 = v129 + 24;
              uint64_t v228 = v133;
              unint64_t v229 = v129 + 24;
              v230[0] = &v96[24 * v95];
              if (v131) {
                operator delete(v131);
              }
            }
            else
            {
              long long v78 = *(_OWORD *)v76;
              v229[2] = *((void *)v76 + 2);
              *uint64_t v77 = v78;
              uint64_t v79 = (void *)v77 + 3;
            }
            unint64_t v229 = v79;
            long long v66 = (char *)__p;
LABEL_213:
            if (__dst == v66)
            {
LABEL_220:
              double v137 = &v66[24 * v68];
              uint64_t v84 = v216;
              if (v216 >= v217)
              {
                unint64_t v139 = 0xAAAAAAAAAAAAAAABLL * ((v216 - (unsigned char *)v215) >> 3);
                unint64_t v140 = v139 + 1;
                if (v139 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_351;
                }
                if (0x5555555555555556 * ((v217 - (unsigned char *)v215) >> 3) > v140) {
                  unint64_t v140 = 0x5555555555555556 * ((v217 - (unsigned char *)v215) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v217 - (unsigned char *)v215) >> 3) >= 0x555555555555555) {
                  unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v87 = v140;
                }
                if (v87) {
                  unint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v217, v87);
                }
                else {
                  unint64_t v88 = 0;
                }
                int v120 = &v88[24 * v139];
                long long v141 = *(_OWORD *)v137;
                *((void *)v120 + 2) = *((void *)v137 + 2);
                *(_OWORD *)int v120 = v141;
                uint64_t v142 = (char *)v215;
                uint64_t v122 = v216;
                uint64_t v124 = v120;
                if (v216 != v215)
                {
                  do
                  {
                    long long v143 = *(_OWORD *)(v122 - 24);
                    *((void *)v124 - 1) = *((void *)v122 - 1);
                    *(_OWORD *)(v124 - 24) = v143;
                    v124 -= 24;
                    v122 -= 24;
                  }
                  while (v122 != v142);
LABEL_234:
                  uint64_t v122 = (char *)v215;
                }
LABEL_235:
                double v138 = v120 + 24;
                uint64_t v215 = v124;
                double v216 = v120 + 24;
                uint64_t v217 = &v88[24 * v87];
                if (v122) {
                  operator delete(v122);
                }
              }
              else
              {
                long long v89 = *(_OWORD *)v137;
                uint64_t v90 = *((void *)v137 + 2);
LABEL_222:
                *((void *)v84 + 2) = v90;
                *(_OWORD *)uint64_t v84 = v89;
                double v138 = v84 + 24;
              }
              double v216 = v138;
            }
            else
            {
              unint64_t v135 = ((unsigned char *)__dst - v66) / 24;
              if (v135 <= 1) {
                unint64_t v135 = 1;
              }
              uint64_t v136 = v66 + 8;
              while (*v136 != 5 || *(v136 - 1) != *(void *)&v66[24 * v68])
              {
                v136 += 3;
                if (!--v135) {
                  goto LABEL_220;
                }
              }
            }
            goto LABEL_238;
          case 2:
            uint64_t v84 = v216;
            if (v216 < v217) {
              goto LABEL_147;
            }
            unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v216 - (unsigned char *)v215) >> 3);
            unint64_t v92 = v91 + 1;
            if (v91 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_351;
            }
            if (0x5555555555555556 * ((v217 - (unsigned char *)v215) >> 3) > v92) {
              unint64_t v92 = 0x5555555555555556 * ((v217 - (unsigned char *)v215) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v217 - (unsigned char *)v215) >> 3) >= 0x555555555555555) {
              unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v87 = v92;
            }
            if (v87) {
              unint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v217, v87);
            }
            else {
              unint64_t v88 = 0;
            }
            int v120 = &v88[24 * v91];
            long long v126 = *(_OWORD *)v69;
            *((void *)v120 + 2) = *((void *)v69 + 2);
            *(_OWORD *)int v120 = v126;
            uint64_t v127 = (char *)v215;
            uint64_t v122 = v216;
            uint64_t v124 = v120;
            if (v216 == v215) {
              goto LABEL_235;
            }
            do
            {
              long long v128 = *(_OWORD *)(v122 - 24);
              *((void *)v124 - 1) = *((void *)v122 - 1);
              *(_OWORD *)(v124 - 24) = v128;
              v124 -= 24;
              v122 -= 24;
            }
            while (v122 != v127);
            goto LABEL_234;
          case 3:
            uint64_t v80 = v67;
            unint64_t v81 = v68;
            if (v68 >= 0xAAAAAAAAAAAAAAABLL * ((v66 - v65) >> 3)) {
              goto LABEL_134;
            }
            do
            {
              if (*(void *)&v65[v80 + 8] == 2)
              {
                int v82 = getItnControlCategory(*(void *)&v65[v80]);
                int v83 = getItnControlCategory(*((void *)__p + 3 * v68));
                unint64_t v65 = (char *)__p;
                if (v82 == v83 && *(void *)((char *)__p + v80 + 16) == *((void *)__p + 3 * v68 + 2)) {
                  goto LABEL_173;
                }
              }
              ++v81;
              v80 += 24;
            }
            while (v81 < 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - v65) >> 3));
LABEL_134:
            if (*(char *)(a2 + 71) < 0)
            {
              if (!*(void *)(a2 + 56)) {
                goto LABEL_170;
              }
            }
            else if (!*(unsigned char *)(a2 + 71))
            {
              goto LABEL_170;
            }
            if ((v62 & 1) != 0 && (v97 = getItnControlCategory(*(void *)&v65[24 * v68]), unint64_t v65 = (char *)__p, v97 != 2)
              || v63
              && (v98 = getItnControlCategory(*(void *)&v65[24 * v68]), unint64_t v65 = (char *)__p, !v98)
              && *((void *)__p + 3 * v68 + 2) == 1)
            {
LABEL_170:
              long long v99 = &v65[24 * v68];
              long long v100 = v229;
              if ((unint64_t)v229 < v230[0])
              {
                long long v101 = *(_OWORD *)v99;
                uint64_t v102 = *((void *)v99 + 2);
                goto LABEL_172;
              }
              unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * (v229 - v228);
              unint64_t v113 = v112 + 1;
              if (v112 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_351;
              }
              if (0x5555555555555556 * ((uint64_t)(v230[0] - (void)v228) >> 3) > v113) {
                unint64_t v113 = 0x5555555555555556 * ((uint64_t)(v230[0] - (void)v228) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230[0] - (void)v228) >> 3) >= 0x555555555555555) {
                unint64_t v114 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v114 = v113;
              }
              if (v114) {
                char v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v230, v114);
              }
              else {
                char v115 = 0;
              }
              uint64_t v144 = &v115[24 * v112];
              long long v145 = *(_OWORD *)v99;
              *((void *)v144 + 2) = *((void *)v99 + 2);
              *(_OWORD *)uint64_t v144 = v145;
              uint64_t v147 = v228;
              double v146 = v229;
              uint64_t v148 = v144;
              if (v229 != v228)
              {
                do
                {
                  long long v149 = *(_OWORD *)(v146 - 3);
                  *((void *)v148 - 1) = *(v146 - 1);
                  *(_OWORD *)(v148 - 24) = v149;
                  v148 -= 24;
                  v146 -= 3;
                }
                while (v146 != v147);
                goto LABEL_243;
              }
              goto LABEL_244;
            }
LABEL_173:
            if (__dst == v65)
            {
LABEL_180:
              uint64_t v108 = &v65[24 * v68];
              double v109 = v216;
              if (v216 >= v217)
              {
                unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((v216 - (unsigned char *)v215) >> 3);
                unint64_t v117 = v116 + 1;
                if (v116 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_351;
                }
                if (0x5555555555555556 * ((v217 - (unsigned char *)v215) >> 3) > v117) {
                  unint64_t v117 = 0x5555555555555556 * ((v217 - (unsigned char *)v215) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v217 - (unsigned char *)v215) >> 3) >= 0x555555555555555) {
                  unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v118 = v117;
                }
                if (v118) {
                  uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v217, v118);
                }
                else {
                  uint64_t v119 = 0;
                }
                uint64_t v150 = &v119[24 * v116];
                long long v151 = *(_OWORD *)v108;
                *((void *)v150 + 2) = *((void *)v108 + 2);
                *(_OWORD *)uint64_t v150 = v151;
                uint64_t v153 = (char *)v215;
                long long v152 = v216;
                long long v154 = v150;
                if (v216 != v215)
                {
                  do
                  {
                    long long v155 = *(_OWORD *)(v152 - 24);
                    *((void *)v154 - 1) = *((void *)v152 - 1);
                    *(_OWORD *)(v154 - 24) = v155;
                    v154 -= 24;
                    v152 -= 24;
                  }
                  while (v152 != v153);
                  long long v152 = (char *)v215;
                }
                uint64_t v111 = v150 + 24;
                uint64_t v215 = v154;
                double v216 = v150 + 24;
                uint64_t v217 = &v119[24 * v118];
                if (v152) {
                  operator delete(v152);
                }
              }
              else
              {
                long long v110 = *(_OWORD *)v108;
                *((void *)v216 + 2) = *((void *)v108 + 2);
                *(_OWORD *)double v109 = v110;
                uint64_t v111 = v109 + 24;
              }
              double v216 = v111;
              unint64_t v65 = (char *)__p;
            }
            else
            {
              uint64_t v104 = 0;
              unint64_t v105 = 0;
              while (1)
              {
                if (*(void *)&v65[v104 + 8] == 1)
                {
                  int v106 = getItnControlCategory(*(void *)&v65[v104]);
                  int v107 = getItnControlCategory(*((void *)__p + 3 * v68));
                  unint64_t v65 = (char *)__p;
                  if (v106 == v107
                    && *(void *)((char *)__p + v104 + 16) == 3
                    && *((void *)__p + 3 * v68 + 2) == 2)
                  {
                    break;
                  }
                }
                ++v105;
                v104 += 24;
                if (v105 >= 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - v65) >> 3)) {
                  goto LABEL_180;
                }
              }
            }
            if (__dst != v65)
            {
              unint64_t v156 = ((unsigned char *)__dst - v65) / 24;
              uint64_t v157 = &v65[24 * v68];
              if (v156 <= 1) {
                unint64_t v156 = 1;
              }
              uint64_t v158 = v65 + 8;
              while (*v158 != 6 || *(v158 - 1) != *(void *)v157)
              {
                v158 += 3;
                if (!--v156) {
                  goto LABEL_238;
                }
              }
              long long v100 = v229;
              if ((unint64_t)v229 >= v230[0])
              {
                unint64_t v159 = 0xAAAAAAAAAAAAAAABLL * (v229 - v228);
                unint64_t v160 = v159 + 1;
                if (v159 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_351:
                }
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v230[0] - (void)v228) >> 3) > v160) {
                  unint64_t v160 = 0x5555555555555556 * ((uint64_t)(v230[0] - (void)v228) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230[0] - (void)v228) >> 3) >= 0x555555555555555) {
                  unint64_t v114 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v114 = v160;
                }
                if (v114) {
                  char v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)v230, v114);
                }
                else {
                  char v115 = 0;
                }
                uint64_t v144 = &v115[24 * v159];
                long long v161 = *(_OWORD *)v157;
                *((void *)v144 + 2) = *((void *)v157 + 2);
                *(_OWORD *)uint64_t v144 = v161;
                uint64_t v162 = v228;
                double v146 = v229;
                uint64_t v148 = v144;
                if (v229 != v228)
                {
                  do
                  {
                    long long v163 = *(_OWORD *)(v146 - 3);
                    *((void *)v148 - 1) = *(v146 - 1);
                    *(_OWORD *)(v148 - 24) = v163;
                    v148 -= 24;
                    v146 -= 3;
                  }
                  while (v146 != v162);
LABEL_243:
                  double v146 = v228;
                }
LABEL_244:
                int v103 = v144 + 24;
                uint64_t v228 = v148;
                unint64_t v229 = v144 + 24;
                v230[0] = &v115[24 * v114];
                if (v146) {
                  operator delete(v146);
                }
              }
              else
              {
                long long v101 = *(_OWORD *)v157;
                uint64_t v102 = *((void *)v157 + 2);
LABEL_172:
                v100[2] = v102;
                *(_OWORD *)long long v100 = v101;
                int v103 = v100 + 3;
              }
              unint64_t v229 = v103;
            }
LABEL_238:
            ++v68;
            unint64_t v65 = (char *)__p;
            long long v66 = (char *)__dst;
            v67 += 24;
            if (v68 >= 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - (unsigned char *)__p) >> 3)) {
              goto LABEL_276;
            }
            break;
          case 4:
            uint64_t v84 = v216;
            if (v216 < v217)
            {
LABEL_147:
              long long v89 = *(_OWORD *)v69;
              uint64_t v90 = *((void *)v69 + 2);
              goto LABEL_222;
            }
            unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((v216 - (unsigned char *)v215) >> 3);
            unint64_t v86 = v85 + 1;
            if (v85 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_351;
            }
            if (0x5555555555555556 * ((v217 - (unsigned char *)v215) >> 3) > v86) {
              unint64_t v86 = 0x5555555555555556 * ((v217 - (unsigned char *)v215) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v217 - (unsigned char *)v215) >> 3) >= 0x555555555555555) {
              unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v87 = v86;
            }
            if (v87) {
              unint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v217, v87);
            }
            else {
              unint64_t v88 = 0;
            }
            int v120 = &v88[24 * v85];
            long long v121 = *(_OWORD *)v69;
            *((void *)v120 + 2) = *((void *)v69 + 2);
            *(_OWORD *)int v120 = v121;
            uint64_t v123 = (char *)v215;
            uint64_t v122 = v216;
            uint64_t v124 = v120;
            if (v216 == v215) {
              goto LABEL_235;
            }
            do
            {
              long long v125 = *(_OWORD *)(v122 - 24);
              *((void *)v124 - 1) = *((void *)v122 - 1);
              *(_OWORD *)(v124 - 24) = v125;
              v124 -= 24;
              v122 -= 24;
            }
            while (v122 != v123);
            goto LABEL_234;
          default:
            goto LABEL_238;
        }
      }
    }
LABEL_276:
    if (*(unsigned char *)a2)
    {
      if (*(void *)(a2 + 16) == -1 || *(void *)(a2 + 8) == -1) {
        goto LABEL_325;
      }
      *(void *)&long long v164 = -1;
      *((void *)&v164 + 1) = -1;
      long long v213 = v164;
      long long v214 = v164;
      long long v211 = v164;
      long long v212 = v164;
      TItnControlState::set(&v211, (uint64_t *)&v215, 1, 1, 1, 1uLL);
      uint64_t v165 = *((void *)&v213 + 1);
      if (*((void *)&v213 + 1) == -1) {
        uint64_t v165 = *((void *)&v211 + 1);
      }
      switch(v165)
      {
        case 9:
LABEL_284:
          uint64_t v166 = *(void *)(a1 + 48);
          uint64_t v167 = 27272;
          break;
        case 8:
          uint64_t v166 = *(void *)(a1 + 48);
          uint64_t v167 = 27280;
          break;
        case 7:
          goto LABEL_284;
        default:
          uint64_t v166 = *(void *)(a1 + 48);
          uint64_t v171 = (uint64_t *)(v166 + 136);
LABEL_294:
          uint64_t v172 = *a3 + 112 * *(void *)(a2 + 8);
          uint64_t v173 = *(void *)(v172 + 80);
          uint64_t v174 = *(void *)(v172 + 48);
          if (v173 != -1) {
            uint64_t v174 = v173;
          }
          switch(v174)
          {
            case 9:
LABEL_299:
              uint64_t v175 = 27272;
              break;
            case 8:
              uint64_t v175 = 27280;
              break;
            case 7:
              goto LABEL_299;
            default:
              uint64_t v176 = (void *)(v166 + 136);
LABEL_303:
              uint64_t v177 = *v171;
              if (*v176 != *v171)
              {
                int v209 = 0;
                uint64_t v210 = 0;
                uint64_t v208 = 0;
                TGrammarManager::search(*(void **)(a1 + 104), a3, *(void *)(a2 + 8) - *(void *)(a2 + 24), *(void *)(a2 + 32) + *(void *)(a2 + 16), v177, (uint64_t *)&v208);
                if (*(void *)(a1 + 112))
                {
                  uint64_t v178 = *(void *)(a1 + 48);
                  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v178 + 19248));
                  if (*(unsigned char *)(v178 + TParam::getValidConfig((TParam *)(v178 + 19248), ActiveConfigHandle) + 19400))
                  {
                    uint64_t v206 = 0;
                    uint64_t v207 = 0;
                    uint64_t v205 = 0;
                    TGrammarManager2::search(*(void **)(a1 + 112), a3, *(void *)(a2 + 8) - *(void *)(a2 + 24), *(void *)(a2 + 32) + *(void *)(a2 + 16), v177, (uint64_t *)&v205);
                    if (v205 != v206)
                    {
                      uint64_t v180 = *((void *)v205 + 3);
                      if (v180 == *(void *)(a2 + 24))
                      {
                        uint64_t v181 = *((void *)v205 + 4);
                        if (v181 == *(void *)(a2 + 32)
                          && *((void *)v205 + 2) - (v181 + v180) == *(void *)(a2 + 16) - *(void *)(a2 + 8))
                        {
                          loggableUnicode(*((unsigned int **)v205 + 1), v203);
                          uint64_t v186 = v203;
                          if (v204 < 0) {
                            uint64_t v186 = (void **)v203[0];
                          }
                          tknPrintf("Adaptation Result: %s\n", v182, v183, v184, v185, v186);
                          if (v204 < 0) {
                            operator delete(v203[0]);
                          }
                        }
                      }
                    }
                    TGrammarManager2::clearResult(*(TGrammarManager2 **)(a1 + 112));
                    if (v205)
                    {
                      uint64_t v206 = v205;
                      operator delete(v205);
                    }
                  }
                }
                if (v209 != v208)
                {
                  uint64_t v187 = 0;
                  unint64_t v188 = 0;
                  do
                  {
                    uint64_t v189 = *(void *)((char *)v208 + v187 + 24);
                    uint64_t v190 = *(void *)((char *)v208 + v187 + 32);
                    if (*(void *)((char *)v208 + v187 + 16) - (v189 + v190) == *(void *)(a2 + 16)
                                                                                - *(void *)(a2 + 8)
                      && v189 == *(void *)(a2 + 24)
                      && v190 == *(void *)(a2 + 32))
                    {
                      uint64_t v205 = 0;
                      v203[0] = 0;
                      TFormatter::splitPattern((uint64_t *)a1, *(__int32 **)((char *)v208 + v187 + 8), &v205, v203);
                    }
                    ++v188;
                    v187 += 56;
                  }
                  while (v188 < 0x6DB6DB6DB6DB6DB7 * ((v209 - (unsigned char *)v208) >> 3));
                }
                TGrammarManager2::clearResult(*(TGrammarManager2 **)(a1 + 104));
                if (v208)
                {
                  int v209 = v208;
                  operator delete(v208);
                }
              }
LABEL_325:
              *(void *)&long long v211 = 0;
              uint64_t v208 = 0;
              uint64_t v191 = (__int32 *)(a2 + 48);
              if (*(char *)(a2 + 71) < 0) {
                uint64_t v191 = *(__int32 **)(a2 + 48);
              }
              TFormatter::splitPattern((uint64_t *)a1, v191, &v211, &v208);
          }
          uint64_t v176 = (void *)(v166 + v175);
          goto LABEL_303;
      }
      uint64_t v171 = (uint64_t *)(v166 + v167);
      goto LABEL_294;
    }
    if ((*(char *)(a2 + 71) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(a2 + 71)) {
        goto LABEL_290;
      }
LABEL_289:
      TBlock::applyControls(a2, (uint64_t *)&v215, *(void *)(a1 + 48), *(void *)(*(void *)(a1 + 32) + 336));
      *(void *)&long long v168 = -1;
      *((void *)&v168 + 1) = -1;
      long long v213 = v168;
      long long v214 = v168;
      long long v211 = v168;
      long long v212 = v168;
      TItnControlState::set(&v211, (uint64_t *)&__p, 0, 1, 1, 2uLL);
      long long v169 = v212;
      *(_OWORD *)(a2 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v211;
      *(_OWORD *)(a2 + 176) = v169;
      long long v170 = v214;
      *(_OWORD *)(a2 + 192) = v213;
      *(_OWORD *)(a2 + 208) = v170;
      goto LABEL_290;
    }
    if (*(void *)(a2 + 56)) {
      goto LABEL_289;
    }
LABEL_290:
    collectControls((void **)&v228, a2, 3, 1);
    a2 = *(void *)(a2 + 144);
    uint64_t v11 = v198;
    if (v215)
    {
      double v216 = (char *)v215;
      operator delete(v215);
    }
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
    char v10 = v199;
  }
  while (a2);
  if (v199)
  {
    uint64_t v192 = (std::wstring *)v195;
    if (&v222 != v197) {
      std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>((char *)v197, v222, (uint64_t)v223, 0xAAAAAAAAAAAAAAABLL * ((v223 - v222) >> 3));
    }
    goto LABEL_340;
  }
  a7 = (char *)v197;
  uint64_t v192 = (std::wstring *)v195;
LABEL_338:
  if (&v228 != (void **)a7) {
    std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>(a7, (char *)v228, (uint64_t)v229, 0xAAAAAAAAAAAAAAABLL * (v229 - v228));
  }
LABEL_340:
  if (v192)
  {
    data = v192;
    do
    {
      TBlock::adjustResult(data);
      data = (std::wstring *)data[6].__r_.__value_.__l.__data_;
    }
    while (data);
  }
  if (v222)
  {
    uint64_t v223 = v222;
    operator delete(v222);
  }
  if (v225)
  {
    uint64_t v226 = v225;
    operator delete(v225);
  }
  if (v228)
  {
    unint64_t v229 = v228;
    operator delete(v228);
  }
  return v192;
}

void sub_213F03D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  MEMORY[0x216698730](v48, 0x1070C40ADD13FEBLL);
  if (__p) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }
  long long v51 = *(void **)(v49 - 168);
  if (v51)
  {
    *(void *)(v49 - 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v51;
    operator delete(v51);
  }
  uint64_t v52 = *(void **)(v49 - 144);
  if (v52)
  {
    *(void *)(v49 - 136) = v52;
    operator delete(v52);
  }
  int v53 = *(void **)(v49 - 120);
  if (v53)
  {
    *(void *)(v49 - 112) = v53;
    operator delete(v53);
  }
  _Unwind_Resume(a1);
}

void collectControls(void **a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v8 = (const __int32 *)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    BOOL v8 = *(const __int32 **)v8;
  }
  int v9 = *v8;
  if (*v8)
  {
    char v10 = (int *)(v8 + 1);
    while (1)
    {
      {
        operator new();
      }
      uint64_t v11 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      if (v9 >= 48
        && (v9 < 0x3A
         || v9 >= 0x660
         && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9) != -1))
      {
        break;
      }
      if (TLocaleInfo::isAlpha(v11, v9)) {
        break;
      }
      int v12 = *v10++;
      int v9 = v12;
      if (!v12)
      {
        int v9 = 1;
        goto LABEL_16;
      }
    }
    int v9 = 0;
  }
LABEL_16:
  if (a4 != 1)
  {
    int v13 = *v8;
    if (*v8)
    {
      if (a3 == 3)
      {
        int v27 = v8[wcslen(v8) - 1];
        {
          operator new();
        }
        if (v27 > 159)
        {
          if (v27 >= 12288)
          {
            if (v27 != 65279 && v27 != 12288) {
              goto LABEL_76;
            }
          }
          else if (v27 != 160 && v27 != 8203)
          {
            goto LABEL_76;
          }
        }
        else if (v27 > 0x20 || ((1 << v27) & 0x100002600) == 0)
        {
          goto LABEL_76;
        }
        unint64_t v29 = (unint64_t)a1[2];
        uint64_t v15 = a1[1];
        if ((unint64_t)v15 >= v29)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (unsigned char *)*a1) >> 3);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 <= 0xAAAAAAAAAAAAAAALL)
          {
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)*a1) >> 3);
            if (2 * v32 > v31) {
              unint64_t v31 = 2 * v32;
            }
            if (v32 >= 0x555555555555555) {
              unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33) {
              uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)(a1 + 2), v33);
            }
            else {
              uint64_t v34 = 0;
            }
            long long v21 = &v34[24 * v30];
            uint64_t v22 = &v34[24 * v33];
            *(void *)long long v21 = 1;
            *((void *)v21 + 1) = a3;
            *((void *)v21 + 2) = 1;
            uint64_t v23 = v21 + 24;
            unint64_t v35 = (char *)*a1;
            uint64_t v24 = (char *)a1[1];
            if (v24 == *a1) {
              goto LABEL_73;
            }
            do
            {
              long long v36 = *(_OWORD *)(v24 - 24);
              *((void *)v21 - 1) = *((void *)v24 - 1);
              *(_OWORD *)(v21 - 24) = v36;
              v21 -= 24;
              v24 -= 24;
            }
            while (v24 != v35);
            goto LABEL_72;
          }
LABEL_131:
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
LABEL_60:
        *uint64_t v15 = 1;
        v15[1] = a3;
        v15[2] = 1;
        uint64_t v23 = v15 + 3;
LABEL_75:
        a1[1] = v23;
        goto LABEL_76;
      }
      if (a3 != 4) {
        goto LABEL_76;
      }
      {
        operator new();
      }
      if (v13 <= 159)
      {
        if (v13 > 0x20 || ((1 << v13) & 0x100002600) == 0) {
          goto LABEL_76;
        }
LABEL_31:
        unint64_t v14 = (unint64_t)a1[2];
        uint64_t v15 = a1[1];
        if ((unint64_t)v15 >= v14)
        {
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (unsigned char *)*a1) >> 3);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 <= 0xAAAAAAAAAAAAAAALL)
          {
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a1) >> 3);
            if (2 * v18 > v17) {
              unint64_t v17 = 2 * v18;
            }
            if (v18 >= 0x555555555555555) {
              unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19) {
              uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)(a1 + 2), v19);
            }
            else {
              uint64_t v20 = 0;
            }
            long long v21 = &v20[24 * v16];
            uint64_t v22 = &v20[24 * v19];
            *(void *)long long v21 = 1;
            *((void *)v21 + 1) = 4;
            *((void *)v21 + 2) = 1;
            uint64_t v23 = v21 + 24;
            uint64_t v25 = (char *)*a1;
            uint64_t v24 = (char *)a1[1];
            if (v24 == *a1) {
              goto LABEL_73;
            }
            do
            {
              long long v26 = *(_OWORD *)(v24 - 24);
              *((void *)v21 - 1) = *((void *)v24 - 1);
              *(_OWORD *)(v21 - 24) = v26;
              v21 -= 24;
              v24 -= 24;
            }
            while (v24 != v25);
LABEL_72:
            uint64_t v24 = (char *)*a1;
LABEL_73:
            *a1 = v21;
            a1[1] = v23;
            a1[2] = v22;
            if (v24) {
              operator delete(v24);
            }
            goto LABEL_75;
          }
          goto LABEL_131;
        }
        goto LABEL_60;
      }
      if (v13 >= 12288)
      {
        if (v13 == 65279 || v13 == 12288) {
          goto LABEL_31;
        }
      }
      else if (v13 == 160 || v13 == 8203)
      {
        goto LABEL_31;
      }
    }
  }
LABEL_76:
  uint64_t v37 = *(void *)(a2 + 40);
  if (v37)
  {
    uint64_t v38 = *(void *)(v37 + 152);
    if (*(void *)(v37 + 160) != v38)
    {
      unint64_t v39 = 0;
      if (a3 != 6 || a4 != -1) {
        int v9 = 0;
      }
      uint64_t v67 = (uint64_t)(a1 + 2);
      while (1)
      {
        size_t v41 = (uint64_t *)(v38 + 24 * v39);
        uint64_t v42 = v41[1];
        if (v42 != a3) {
          break;
        }
        if (a4 != -1)
        {
          if (a4 && (a4 != 1 || getItnControlCategory(*v41) == 2)) {
            goto LABEL_129;
          }
LABEL_108:
          uint64_t v54 = a1[1];
          int v53 = a1[2];
          if (v54 < (void *)v53)
          {
            long long v55 = *(_OWORD *)v41;
            v54[2] = v41[2];
            *(_OWORD *)uint64_t v54 = v55;
            uint64_t v47 = v54 + 3;
            goto LABEL_128;
          }
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (unsigned char *)*a1) >> 3);
          unint64_t v57 = v56 + 1;
          if (v56 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_131;
          }
          unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((v53 - (unsigned char *)*a1) >> 3);
          if (2 * v58 > v57) {
            unint64_t v57 = 2 * v58;
          }
          if (v58 >= 0x555555555555555) {
            unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v51 = v57;
          }
          if (v51) {
            uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v67, v51);
          }
          else {
            uint64_t v52 = 0;
          }
          char v59 = &v52[24 * v56];
          long long v64 = *(_OWORD *)v41;
          *((void *)v59 + 2) = v41[2];
          *(_OWORD *)char v59 = v64;
          unint64_t v65 = (char *)*a1;
          int v60 = (char *)a1[1];
          char v62 = v59;
          if (v60 != *a1)
          {
            do
            {
              long long v66 = *(_OWORD *)(v60 - 24);
              *((void *)v62 - 1) = *((void *)v60 - 1);
              *(_OWORD *)(v62 - 24) = v66;
              v62 -= 24;
              v60 -= 24;
            }
            while (v60 != v65);
LABEL_125:
            int v60 = (char *)*a1;
          }
LABEL_126:
          uint64_t v47 = v59 + 24;
          *a1 = v62;
          a1[1] = v59 + 24;
          a1[2] = &v52[24 * v51];
          if (v60) {
            operator delete(v60);
          }
          goto LABEL_128;
        }
        if (getItnControlCategory(*v41) == 2) {
          goto LABEL_108;
        }
LABEL_129:
        ++v39;
        uint64_t v38 = *(void *)(v37 + 152);
        if (v39 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v37 + 160) - v38) >> 3)) {
          return;
        }
      }
      if (*v41 == 1) {
        int v43 = v9;
      }
      else {
        int v43 = 0;
      }
      if (v42 != 4 || v43 == 0) {
        goto LABEL_129;
      }
      long long v46 = a1[1];
      unint64_t v45 = (unint64_t)a1[2];
      if ((unint64_t)v46 < v45)
      {
        void *v46 = 3;
        v46[1] = 6;
        uint64_t v47 = v46 + 3;
        v46[2] = 1;
LABEL_128:
        a1[1] = v47;
        goto LABEL_129;
      }
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (unsigned char *)*a1) >> 3);
      unint64_t v49 = v48 + 1;
      if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_131;
      }
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (void)*a1) >> 3);
      if (2 * v50 > v49) {
        unint64_t v49 = 2 * v50;
      }
      if (v50 >= 0x555555555555555) {
        unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51) {
        uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v67, v51);
      }
      else {
        uint64_t v52 = 0;
      }
      char v59 = &v52[24 * v48];
      *(void *)char v59 = 3;
      *((void *)v59 + 1) = 6;
      *((void *)v59 + 2) = 1;
      unsigned int v61 = (char *)*a1;
      int v60 = (char *)a1[1];
      char v62 = v59;
      if (v60 != *a1)
      {
        do
        {
          long long v63 = *(_OWORD *)(v60 - 24);
          *((void *)v62 - 1) = *((void *)v60 - 1);
          *(_OWORD *)(v62 - 24) = v63;
          v62 -= 24;
          v60 -= 24;
        }
        while (v60 != v61);
        goto LABEL_125;
      }
      goto LABEL_126;
    }
  }
}

void sub_213F045CC(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TFormatter::countRightContextSpaces(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 == a3) {
    return 0;
  }
  unint64_t v4 = a2;
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = TResultManager::getResult(*(void *)(a1 + 128), *v4);
    uint64_t v8 = *(void *)(v7 + 104);
    uint64_t v9 = *(void *)(v7 + 112);
    uint64_t v10 = v9 - v8;
    if (v9 != v8) {
      break;
    }
LABEL_8:
    if (++v4 == a3) {
      return v6;
    }
  }
  unint64_t v11 = 0;
  unint64_t v12 = v10 >> 3;
  while (1)
  {
    uint64_t v13 = *(void *)(v8 + 8 * v11);
    if (v13)
    {
      if (*(void *)(v8 + 8 * v11 + 8)) {
        return v6;
      }
    }
    v6 += v13;
    v11 += 2;
    if (v11 >= v12) {
      goto LABEL_8;
    }
  }
}

uint64_t TFormatter::countLeftContextSpaces(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8) = a3;
  *(void *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a4;
  *(unsigned char *)(a5 + 24) = 0;
  *(void *)a5 = 0;
  if (!a3) {
    return result;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  if (a3 < a2)
  {
LABEL_3:
    uint64_t v8 = 0;
    goto LABEL_20;
  }
  uint64_t v9 = a4;
  uint64_t v10 = result;
  while (1)
  {
    while (1)
    {
      while (!v9)
      {
        --v6;
        uint64_t v9 = -1;
        if (v6 < v7) {
          goto LABEL_3;
        }
      }
      uint64_t result = TResultManager::getResult(*(void *)(v10 + 128), *v6);
      if (v9 != -1) {
        break;
      }
      uint64_t v11 = *(void *)(result + 104);
      uint64_t v12 = *(void *)(result + 112) - v11;
      if (v12)
      {
        uint64_t v9 = v12 >> 3;
        goto LABEL_10;
      }
      uint64_t v9 = 0;
    }
    uint64_t v11 = *(void *)(result + 104);
LABEL_10:
    uint64_t v13 = *(void *)(v11 + 8 * v9 - 8);
    uint64_t v14 = *(void *)(v11 + 8 * (v9 - 2));
    if (v13)
    {
      if (v14) {
        break;
      }
    }
    *(void *)a5 += v14;
    *(unsigned char *)(a5 + 24) |= *(unsigned char *)result;
    v9 -= 2;
  }
  uint64_t result = TResultManager::getResult(*(void *)(v10 + 128), *v6);
  uint64_t v15 = *(void *)(result + 112) - *(void *)(result + 104);
  BOOL v16 = v9 == v15 >> 3;
  if (v9 == v15 >> 3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v9;
  }
  uint64_t v7 = &v6[v16];
LABEL_20:
  *(void *)(a5 + 8) = v7;
  *(void *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v8;
  return result;
}

void TFormatter::formatInternal(TFormatter *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t *a5, char **a6, char a7, int a8, uint64_t a9, uint64_t **a10)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  *a10 = (uint64_t *)a3;
  long long v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  TFormatter::addLeftContext((uint64_t)a1, a2, a3, (uint64_t)&v128, v127);
  unint64_t v113 = a2;
  unint64_t v17 = v128;
  uint64_t v16 = v129;
  std::vector<TItnWordData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnWordData const*>,std::__wrap_iter<TItnWordData const*>>((uint64_t)&v128, v129, *a6, a6[1], 0x6DB6DB6DB6DB6DB7 * ((a6[1] - *a6) >> 4));
  unint64_t v19 = v128;
  uint64_t v18 = v129;
  TFormatter::addRightContext((uint64_t)a1, a4, a5, (uint64_t)&v128, &v126);
  unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v16 - (uint64_t)v17) >> 4);
  uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((v18 - (uint64_t)v19) >> 4);
  uint64_t v22 = v128;
  if (v21 != v20)
  {
    BOOL v23 = 1;
    if (a8)
    {
      uint64_t v24 = v128;
      if (!v127[1])
      {
        uint64_t v25 = *((void *)a1 + 6);
        uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v25 + 3792));
        BOOL v23 = *(unsigned char *)(v25 + TParam::getValidConfig((TParam *)(v25 + 3792), ActiveConfigHandle) + 3944) != 0;
        uint64_t v24 = v128;
      }
    }
    else
    {
      uint64_t v24 = v128;
    }
    v22[112 * v20 + 32] = v23;
    uint64_t v22 = v24;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((v129 - (uint64_t)v22) >> 4) != v21) {
    v22[112 * v21 + 32] = 1;
  }
  uint64_t v27 = TFormatter::segment(a1, (uint64_t *)&v128, v20, v21);
  TFormatter::assignWordRules((uint64_t)a1, v27, &v128);
  __p = 0;
  uint64_t v124 = 0;
  unint64_t v125 = 0;
  BOOL v28 = (a7 & 1) == 0 || !v127[0];
  char v29 = v28;
  if (!v28)
  {
    uint64_t v30 = *((void *)a1 + 6);
    uint64_t v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 3792));
    if (!*(unsigned char *)(v30 + TParam::getValidConfig((TParam *)(v30 + 3792), v31) + 3944))
    {
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v124 - (unsigned char *)__p) >> 3) + 1;
      if (v32 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v125 - (void)__p) >> 3) > v32) {
        unint64_t v32 = 0x5555555555555556 * ((uint64_t)(v125 - (void)__p) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v125 - (void)__p) >> 3) >= 0x555555555555555) {
        unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33) {
        uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v125, v33);
      }
      else {
        uint64_t v34 = 0;
      }
      unint64_t v35 = &v34[8 * ((v124 - (unsigned char *)__p) >> 3)];
      long long v36 = &v34[24 * v33];
      *(void *)unint64_t v35 = 6;
      *((void *)v35 + 1) = 3;
      *((void *)v35 + 2) = 1;
      uint64_t v37 = v35 + 24;
      unint64_t v39 = (char *)__p;
      uint64_t v38 = v124;
      if (v124 != __p)
      {
        do
        {
          long long v40 = *(_OWORD *)(v38 - 24);
          *((void *)v35 - 1) = *((void *)v38 - 1);
          *(_OWORD *)(v35 - 24) = v40;
          v35 -= 24;
          v38 -= 24;
        }
        while (v38 != v39);
        uint64_t v38 = (char *)__p;
      }
      __p = v35;
      uint64_t v124 = v37;
      unint64_t v125 = (unint64_t)v36;
      if (v38) {
        operator delete(v38);
      }
      uint64_t v124 = v37;
    }
  }
  int v120 = 0;
  long long v121 = 0;
  unint64_t v122 = 0;
  size_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v122, 1uLL);
  unint64_t v44 = &v41[24 * v43];
  *(void *)size_t v41 = 1;
  *((void *)v41 + 1) = 4;
  *((void *)v41 + 2) = 1;
  unint64_t v45 = v41 + 24;
  uint64_t v47 = (char *)v120;
  long long v46 = v121;
  if (v121 != v120)
  {
    do
    {
      long long v48 = *(_OWORD *)(v46 - 24);
      *((void *)v41 - 1) = *((void *)v46 - 1);
      *(_OWORD *)(v41 - 24) = v48;
      v41 -= 24;
      v46 -= 24;
    }
    while (v46 != v47);
    long long v46 = (char *)v120;
  }
  int v120 = v41;
  long long v121 = v45;
  unint64_t v122 = (unint64_t)v44;
  if (v46) {
    operator delete(v46);
  }
  long long v121 = v45;
  unint64_t v114 = TFormatter::applyControls((uint64_t)a1, v27, (uint64_t *)&v128, v42, v21, (uint64_t)&__p, (char *)&v120);
  *(void *)&long long v49 = -1;
  *((void *)&v49 + 1) = -1;
  v119[2] = v49;
  v119[3] = v49;
  v119[0] = v49;
  v119[1] = v49;
  TItnControlState::set(v119, (uint64_t *)&v120, 0, 1, 1, 2uLL);
  unint64_t v50 = (std::wstring::__raw *)v114;
  if (!v114) {
    goto LABEL_126;
  }
  unint64_t v51 = v114;
  do
  {
    unint64_t v52 = v50->__words[1];
    if (v52 <= v20 && v128[112 * v52 + 32]) {
      unint64_t v51 = (std::wstring *)v50;
    }
    BOOL v53 = v52 != -1 && v52 >= v20;
    if (v53) {
      break;
    }
    unint64_t v50 = (std::wstring::__raw *)v50[6].__words[0];
  }
  while (v50);
  if (v51 != (std::wstring *)v50)
  {
    unint64_t v116 = 0;
    uint64_t v117 = 0;
    char v115 = 0;
    std::vector<TItnWordData>::__init_with_size[abi:ne180100]<std::__wrap_iter<TItnWordData*>,std::__wrap_iter<TItnWordData*>>(&v115, v128, (uint64_t)&v128[112 * v20], v20);
    uint64_t v54 = TFormatter::segment(a1, (uint64_t *)&v115, 0x6DB6DB6DB6DB6DB7 * (((char *)v116 - (unsigned char *)v115) >> 4), 0x6DB6DB6DB6DB6DB7 * (((char *)v116 - (unsigned char *)v115) >> 4));
    TFormatter::assignWordRules((uint64_t)a1, v54, &v115);
    std::vector<TItnControl>::resize((uint64_t)&__p, 0);
    if ((v29 & 1) == 0)
    {
      long long v55 = v124;
      if ((unint64_t)v124 >= v125)
      {
        unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((v124 - (unsigned char *)__p) >> 3);
        unint64_t v58 = v57 + 1;
        if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v125 - (void)__p) >> 3) > v58) {
          unint64_t v58 = 0x5555555555555556 * ((uint64_t)(v125 - (void)__p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v125 - (void)__p) >> 3) >= 0x555555555555555) {
          unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59) {
          int v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v125, v59);
        }
        else {
          int v60 = 0;
        }
        unsigned int v61 = &v60[24 * v57];
        char v62 = &v60[24 * v59];
        *(void *)unsigned int v61 = 6;
        *((void *)v61 + 1) = 3;
        *((void *)v61 + 2) = 1;
        unint64_t v56 = v61 + 24;
        long long v64 = (char *)__p;
        long long v63 = v124;
        if (v124 != __p)
        {
          do
          {
            long long v65 = *(_OWORD *)(v63 - 24);
            *((void *)v61 - 1) = *((void *)v63 - 1);
            *(_OWORD *)(v61 - 24) = v65;
            v61 -= 24;
            v63 -= 24;
          }
          while (v63 != v64);
          long long v63 = (char *)__p;
        }
        __p = v61;
        uint64_t v124 = v56;
        unint64_t v125 = (unint64_t)v62;
        if (v63) {
          operator delete(v63);
        }
      }
      else
      {
        *(void *)uint64_t v124 = 6;
        *((void *)v55 + 1) = 3;
        *((void *)v55 + 2) = 1;
        unint64_t v56 = v55 + 24;
      }
      uint64_t v124 = v56;
    }
    std::vector<TItnControl>::resize((uint64_t)&v120, 0);
    uint64_t v67 = v121;
    if ((unint64_t)v121 >= v122)
    {
      unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((v121 - (unsigned char *)v120) >> 3);
      unint64_t v70 = v69 + 1;
      if (v69 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v122 - (void)v120) >> 3) > v70) {
        unint64_t v70 = 0x5555555555555556 * ((uint64_t)(v122 - (void)v120) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - (void)v120) >> 3) >= 0x555555555555555) {
        unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v71 = v70;
      }
      if (v71) {
        uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v122, v71);
      }
      else {
        uint64_t v72 = 0;
      }
      int v73 = &v72[24 * v69];
      unint64_t v74 = &v72[24 * v71];
      *(void *)int v73 = 1;
      *((void *)v73 + 1) = 4;
      *((void *)v73 + 2) = 1;
      unint64_t v68 = v73 + 24;
      unint64_t v76 = (char *)v120;
      unint64_t v75 = v121;
      if (v121 != v120)
      {
        do
        {
          long long v77 = *(_OWORD *)(v75 - 24);
          *((void *)v73 - 1) = *((void *)v75 - 1);
          *(_OWORD *)(v73 - 24) = v77;
          v73 -= 24;
          v75 -= 24;
        }
        while (v75 != v76);
        unint64_t v75 = (char *)v120;
      }
      int v120 = v73;
      long long v121 = v68;
      unint64_t v122 = (unint64_t)v74;
      if (v75) {
        operator delete(v75);
      }
    }
    else
    {
      *(void *)long long v121 = 1;
      *((void *)v67 + 1) = 4;
      *((void *)v67 + 2) = 1;
      unint64_t v68 = v67 + 24;
    }
    long long v121 = v68;
    long long v78 = TFormatter::applyControls((uint64_t)a1, v54, (uint64_t *)&v115, v66, 0x6DB6DB6DB6DB6DB7 * (((char *)v116 - (unsigned char *)v115) >> 4), (uint64_t)&__p, (char *)&v120);
    uint64_t v79 = (uint64_t)v78;
    if (v78)
    {
      data = v78;
      while (data->__r_.__value_.__l.__size_ != v51->__r_.__value_.__l.__size_)
      {
        data = (std::wstring *)data[6].__r_.__value_.__l.__data_;
        if (!data) {
          goto LABEL_107;
        }
      }
      if (!v51) {
        goto LABEL_107;
      }
      do
      {
        if (data->__r_.__value_.__l.__size_ != v51->__r_.__value_.__l.__size_
          || data->__r_.__value_.__r.__words[2] != v51->__r_.__value_.__r.__words[2])
        {
          goto LABEL_105;
        }
        unint64_t v81 = (const __int32 *)&data[3];
        if (SHIBYTE(data[3].__r_.__value_.__r.__words[2]) < 0) {
          unint64_t v81 = *(const __int32 **)v81;
        }
        int v82 = (const __int32 *)&v51[3];
        if (SHIBYTE(v51[3].__r_.__value_.__r.__words[2]) < 0) {
          int v82 = *(const __int32 **)v82;
        }
        if (wcscmp(v81, v82))
        {
LABEL_105:
          freeBlocks(v79);
LABEL_108:
          unint64_t v50 = (std::wstring::__raw *)v51;
          do
          {
            std::wstring::size_type v84 = v50->__words[1];
            if (v84 != -1 && v128[112 * v84 + 105]) {
              break;
            }
            unint64_t v50 = (std::wstring::__raw *)v50[6].__words[1];
          }
          while (v50);
          goto LABEL_114;
        }
        std::wstring::pointer v83 = data[6].__r_.__value_.__l.__data_;
        if (!v83)
        {
          unint64_t v51 = (std::wstring *)v51[6].__r_.__value_.__l.__data_;
          break;
        }
        while (1)
        {
          if ((*((char *)v83 + 71) & 0x80000000) == 0)
          {
            if (*((unsigned char *)v83 + 71)) {
              break;
            }
            goto LABEL_100;
          }
          if (*((void *)v83 + 7)) {
            break;
          }
LABEL_100:
          std::wstring::pointer v83 = (std::wstring::pointer)*((void *)v83 + 18);
          if (!v83) {
            goto LABEL_103;
          }
        }
        if (data[9].__r_.__value_.__l.__size_ != v51[9].__r_.__value_.__l.__size_) {
          goto LABEL_105;
        }
LABEL_103:
        unint64_t v51 = (std::wstring *)v51[6].__r_.__value_.__l.__data_;
        data = (std::wstring *)data[6].__r_.__value_.__l.__data_;
      }
      while (v51);
    }
LABEL_107:
    freeBlocks(v79);
    if (v51) {
      goto LABEL_108;
    }
    unint64_t v50 = 0;
LABEL_114:
    if (v115)
    {
      unint64_t v116 = (uint64_t *)v115;
      operator delete(v115);
    }
  }
  if (v50)
  {
    int v85 = 0;
    unint64_t v86 = v50;
    do
    {
      std::wstring::size_type v87 = v86->__words[1];
      BOOL v88 = v87 == v21;
      if (v87 == v21) {
        break;
      }
      long long v89 = v86 + 3;
      if (SHIBYTE(v86[3].__words[2]) < 0) {
        long long v89 = (std::wstring::__raw *)v89->__words[0];
      }
      BOOL v90 = LODWORD(v89->__words[0]) || v86[9].__words[1] != 0;
      v85 |= v90;
      unint64_t v86 = (std::wstring::__raw *)v86[6].__words[0];
    }
    while (v86);
  }
  else
  {
LABEL_126:
    int v85 = 0;
    unint64_t v86 = 0;
    BOOL v88 = 0;
  }
  unint64_t v91 = TFormatter::countRightContextSpaces((uint64_t)a1, a4, a5);
  unint64_t v92 = v91;
  if ((v85 & v88) == 1)
  {
    unint64_t v93 = v86;
    do
    {
      unint64_t v93 = (std::wstring::__raw *)v93[6].__words[1];
      unint64_t v94 = v93 + 3;
      if (SHIBYTE(v93[3].__words[2]) < 0) {
        unint64_t v94 = (std::wstring::__raw *)v94->__words[0];
      }
      int v95 = v94->__words[0];
      unint64_t v96 = v93[9].__words[1];
      if (v95) {
        BOOL v97 = 0;
      }
      else {
        BOOL v97 = v96 == 0;
      }
    }
    while (v97);
    BOOL v53 = v96 >= v91;
    unint64_t v98 = v96 - v91;
    if (!v53) {
      unint64_t v98 = 0;
    }
    v93[9].__words[1] = v98;
  }
  if (v50 && (unint64_t v99 = v50->__words[1], v99 < v20))
  {
    long long v100 = (uint64_t **)&v128[112 * v99];
    *a10 = *v100;
    uint64_t v101 = (uint64_t)v100[1];
  }
  else
  {
    uint64_t v101 = 0;
  }
  TFormatter::countLeftContextSpaces((uint64_t)a1, v113, *a10, v101, (uint64_t)&v115);
  if (v50)
  {
    uint64_t v102 = v50;
    do
    {
      uint64_t v102 = (std::wstring::__raw *)v102[6].__words[1];
      if (!v102)
      {
        uint64_t v104 = &v115;
        goto LABEL_151;
      }
      int v103 = v102 + 3;
      if (SHIBYTE(v102[3].__words[2]) < 0) {
        int v103 = (std::wstring::__raw *)v103->__words[0];
      }
    }
    while (!LODWORD(v103->__words[0]) && !v102[9].__words[1]);
    uint64_t v104 = (void **)&v102[9].__words[1];
LABEL_151:
    if (v85) {
      unint64_t v105 = 0;
    }
    else {
      unint64_t v105 = v92;
    }
    if (*v104 < (char *)v115 + v105 && (!v128[112 * v50->__words[1] + 32] || ((a8 ^ 1 | v85) & 1) == 0))
    {
      if (!v118
        || (uint64_t v110 = *((void *)a1 + 6),
            uint64_t v111 = TParam::getActiveConfigHandle((TParam *)(v110 + 2472)),
            *(unsigned char *)(v110 + TParam::getValidConfig((TParam *)(v110 + 2472), v111) + 2624)))
      {
        *a10 = v116;
      }
    }
  }
  uint64_t v106 = *((void *)a1 + 6);
  uint64_t v107 = TParam::getActiveConfigHandle((TParam *)(v106 + 3792));
  TParam::getValidConfig((TParam *)(v106 + 3792), v107);
  uint64_t v108 = *((void *)a1 + 6);
  uint64_t v109 = TParam::getActiveConfigHandle((TParam *)(v108 + 16912));
  TParam::getValidConfig((TParam *)(v108 + 16912), v109);
  TResultManager::create();
}

void sub_213F05314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(void *)(v29 - 128) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t freeBlocks(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    do
    {
      uint64_t v2 = *(void *)(v1 + 144);
      BOOL v3 = *(void **)(v1 + 120);
      if (v3)
      {
        *(void *)(v1 + 128) = v3;
        operator delete(v3);
      }
      if (*(char *)(v1 + 119) < 0) {
        operator delete(*(void **)(v1 + 96));
      }
      if (*(char *)(v1 + 95) < 0) {
        operator delete(*(void **)(v1 + 72));
      }
      if (*(char *)(v1 + 71) < 0) {
        operator delete(*(void **)(v1 + 48));
      }
      uint64_t result = MEMORY[0x216698730](v1, 0x10F2C405D5B575ELL);
      uint64_t v1 = v2;
    }
    while (v2);
  }
  return result;
}

void TFormatter::wordSequenceToResult(TFormatter *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, char a8, uint64_t **a9, uint64_t **a10)
{
  memset(__p, 0, sizeof(__p));
  if (*a6 != a6[1])
  {
    TFormatter::addWords((uint64_t)a1, a6, a7, __p);
    TFormatter::makeUttState((uint64_t)a1, (uint64_t)a2, a5 - a2, (uint64_t)(a3 - (void)a2) >> 3, (uint64_t)((uint64_t)a4 - a3) >> 3, a8, v22);
    uint64_t v16 = (char *)__p[0];
    long long v17 = v22[1];
    *(_OWORD *)((char *)__p[0] + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v22[0];
    *(_OWORD *)(v16 + 56) = v17;
    long long v18 = v22[3];
    *(_OWORD *)(v16 + 72) = v22[2];
    *(_OWORD *)(v16 + 88) = v18;
    v16[104] = 1;
  }
  *(void *)&v22[0] = -1;
  *a10 = a4;
  uint64_t v19 = *((void *)a1 + 6);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v19 + 2224));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v19 + 2224), ActiveConfigHandle);
  TFormatter::formatInternal(a1, a2, a3, a4, a5, (char **)__p, a8, *(unsigned __int8 *)(v19 + ValidConfig + 2376), (uint64_t)v22, a9);
}

void sub_213F05590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TFormatter::wordSequenceToResult(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, char a8, uint64_t **a9, uint64_t **a10)
{
}

void TFormatter::textToResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void non-virtual thunk to'TFormatter::textToResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void TFormatter::generateResultAlternatives(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v7 = (void *)v6;
  unsigned int v9 = v8;
  int v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  long long v17 = v16;
  uint64_t v205 = v5;
  TBuffer<TPItnRuleHandle_fake **>::resize(v6, 0);
  if (v13)
  {
    unsigned int v18 = *v13;
    if (*v13 == v13[1]) {
      return;
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
  TResultRelativePosition::TResultRelativePosition(&v245, *(void *)(v205 + 128), v17, v15, v18);
  if (v246) {
    return;
  }
  uint64_t v19 = v13 ? v13[1] : -1;
  TResultRelativePosition::TResultRelativePosition(v244, *(void *)(v205 + 128), v17, v15, v19);
  if (v244[2]) {
    return;
  }
  unint64_t v20 = (TParam *)(*(void *)(v205 + 48) + 9760);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v20);
  unsigned int v22 = *((_DWORD *)v20 + TParam::getValidConfig(v20, ActiveConfigHandle) + 40);
  uint64_t v241 = 0;
  uint64_t v242 = 0;
  uint64_t v243 = 0;
  if (!v22) {
    return;
  }
  int v203 = v11;
  BOOL v23 = 0;
  int v24 = 1;
  do
  {
    if ((v22 & 1) == 0) {
      goto LABEL_60;
    }
    if (v24 > 127)
    {
      if (v24 <= 1023)
      {
        switch(v24)
        {
          case 128:
            uint64_t v49 = *(void *)(v205 + 48);
            uint64_t v50 = TParam::getActiveConfigHandle((TParam *)(v49 + 12576));
            uint64_t v27 = v49 + 4 * TParam::getValidConfig((TParam *)(v49 + 12576), v50);
            uint64_t v28 = 12736;
            break;
          case 256:
            uint64_t v53 = *(void *)(v205 + 48);
            uint64_t v54 = TParam::getActiveConfigHandle((TParam *)(v53 + 12928));
            uint64_t v27 = v53 + 4 * TParam::getValidConfig((TParam *)(v53 + 12928), v54);
            uint64_t v28 = 13088;
            break;
          case 512:
            uint64_t v33 = *(void *)(v205 + 48);
            uint64_t v34 = TParam::getActiveConfigHandle((TParam *)(v33 + 13280));
            uint64_t v27 = v33 + 4 * TParam::getValidConfig((TParam *)(v33 + 13280), v34);
            uint64_t v28 = 13440;
            break;
          default:
            goto LABEL_60;
        }
      }
      else if (v24 > 4095)
      {
        if (v24 == 4096)
        {
          uint64_t v45 = *(void *)(v205 + 48);
          uint64_t v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 14336));
          uint64_t v27 = v45 + 4 * TParam::getValidConfig((TParam *)(v45 + 14336), v46);
          uint64_t v28 = 14496;
        }
        else
        {
          if (v24 != 0x10000) {
            goto LABEL_60;
          }
          uint64_t v35 = *(void *)(v205 + 48);
          uint64_t v36 = TParam::getActiveConfigHandle((TParam *)(v35 + 14688));
          uint64_t v27 = v35 + 4 * TParam::getValidConfig((TParam *)(v35 + 14688), v36);
          uint64_t v28 = 14848;
        }
      }
      else if (v24 == 1024)
      {
        uint64_t v43 = *(void *)(v205 + 48);
        uint64_t v44 = TParam::getActiveConfigHandle((TParam *)(v43 + 13632));
        uint64_t v27 = v43 + 4 * TParam::getValidConfig((TParam *)(v43 + 13632), v44);
        uint64_t v28 = 13792;
      }
      else
      {
        if (v24 != 2048) {
          goto LABEL_60;
        }
        uint64_t v29 = *(void *)(v205 + 48);
        uint64_t v30 = TParam::getActiveConfigHandle((TParam *)(v29 + 13984));
        uint64_t v27 = v29 + 4 * TParam::getValidConfig((TParam *)(v29 + 13984), v30);
        uint64_t v28 = 14144;
      }
      goto LABEL_43;
    }
    if (v24 > 15)
    {
      switch(v24)
      {
        case 16:
          uint64_t v47 = *(void *)(v205 + 48);
          uint64_t v48 = TParam::getActiveConfigHandle((TParam *)(v47 + 11520));
          uint64_t v27 = v47 + 4 * TParam::getValidConfig((TParam *)(v47 + 11520), v48);
          uint64_t v28 = 11680;
          break;
        case 32:
          uint64_t v51 = *(void *)(v205 + 48);
          uint64_t v52 = TParam::getActiveConfigHandle((TParam *)(v51 + 11872));
          uint64_t v27 = v51 + 4 * TParam::getValidConfig((TParam *)(v51 + 11872), v52);
          uint64_t v28 = 12032;
          break;
        case 64:
          uint64_t v31 = *(void *)(v205 + 48);
          uint64_t v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 12224));
          uint64_t v27 = v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 12224), v32);
          uint64_t v28 = 12384;
          break;
        default:
          goto LABEL_60;
      }
LABEL_43:
      uint64_t v55 = *(unsigned int *)(v27 + v28);
      unint64_t v56 = v242;
      if (v242 >= v243)
      {
        uint64_t v57 = (v242 - v241) >> 3;
        if ((unint64_t)(v57 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v58 = (v243 - v241) >> 2;
        if (v58 <= v57 + 1) {
          unint64_t v58 = v57 + 1;
        }
        if ((unint64_t)(v243 - v241) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59) {
          int v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v243, v59);
        }
        else {
          int v60 = 0;
        }
        unsigned int v61 = &v60[8 * v57];
        *(void *)unsigned int v61 = v24 | (unint64_t)(v55 << 32);
        BOOL v23 = v61 + 8;
        uint64_t v63 = (uint64_t)v241;
        char v62 = v242;
        if (v242 != v241)
        {
          do
          {
            uint64_t v64 = *((void *)v62 - 1);
            v62 -= 8;
            *((void *)v61 - 1) = v64;
            v61 -= 8;
          }
          while (v62 != (char *)v63);
          char v62 = v241;
        }
        uint64_t v241 = v61;
        uint64_t v242 = v23;
        uint64_t v243 = &v60[8 * v59];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        *(void *)uint64_t v242 = v24 | (unint64_t)(v55 << 32);
        BOOL v23 = v56 + 8;
      }
      uint64_t v242 = v23;
      goto LABEL_60;
    }
    switch(v24)
    {
      case 1:
        uint64_t v25 = *(void *)(v205 + 48);
        uint64_t v26 = TParam::getActiveConfigHandle((TParam *)(v25 + 10112));
        uint64_t v27 = v25 + 4 * TParam::getValidConfig((TParam *)(v25 + 10112), v26);
        uint64_t v28 = 10272;
        goto LABEL_43;
      case 2:
        uint64_t v37 = *(void *)(v205 + 48);
        uint64_t v38 = TParam::getActiveConfigHandle((TParam *)(v37 + 10464));
        uint64_t v27 = v37 + 4 * TParam::getValidConfig((TParam *)(v37 + 10464), v38);
        uint64_t v28 = 10624;
        goto LABEL_43;
      case 4:
        uint64_t v39 = *(void *)(v205 + 48);
        uint64_t v40 = TParam::getActiveConfigHandle((TParam *)(v39 + 10816));
        uint64_t v27 = v39 + 4 * TParam::getValidConfig((TParam *)(v39 + 10816), v40);
        uint64_t v28 = 10976;
        goto LABEL_43;
      case 8:
        uint64_t v41 = *(void *)(v205 + 48);
        uint64_t v42 = TParam::getActiveConfigHandle((TParam *)(v41 + 11168));
        uint64_t v27 = v41 + 4 * TParam::getValidConfig((TParam *)(v41 + 11168), v42);
        uint64_t v28 = 11328;
        goto LABEL_43;
      default:
        break;
    }
LABEL_60:
    v24 *= 2;
    BOOL v148 = v22 >= 2;
    v22 >>= 1;
  }
  while (v148);
  if (v241 != v23)
  {
    uint64_t v227 = priorityCompare;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,false>((uint64_t)v241, v23, (uint64_t (**)(uint64_t, uint64_t))&v227, 126 - 2 * __clz((v23 - v241) >> 3), 1);
    uint64_t v238 = 0;
    v239 = 0;
    uint64_t v240 = 0;
    uint64_t v235 = 0;
    uint64_t v236 = 0;
    uint64_t v237 = 0;
    std::vector<TPItnTagHandle_fake **>::__assign_with_size[abi:ne180100]<TPItnTagHandle_fake ** const*,TPItnTagHandle_fake ** const*>((char *)&v238, v17, (uint64_t)&v17[8 * v245], v245);
    if (*((void *)&v245 + 1)) {
      TResultManager::copyAlignRange();
    }
    uint64_t v66 = v238;
    long long v65 = v239;
    if ((void)v245 == v244[0]) {
      TResultManager::copyAlignRange();
    }
    std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v238, (uint64_t)v239, &v17[8 * v245], &v17[8 * v244[0]], (8 * v244[0] - 8 * (uint64_t)v245) >> 3);
    if (v244[1])
    {
      uint64_t v227 = 0;
      TResultManager::copyAlignRange();
    }
    uint64_t v67 = v238;
    unint64_t v68 = v239;
    unsigned int v201 = v9;
    std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&v238, (uint64_t)v239, &v17[8 * v244[0]], v15, (v15 - &v17[8 * v244[0]]) >> 3);
    unint64_t v69 = (v68 - (unsigned char *)v67) >> 3;
    BOOL v70 = v245 == 0;
    double v232 = 0;
    unint64_t v233 = 0;
    unint64_t v234 = 0;
    memset(&__s1, 0, sizeof(__s1));
    unint64_t v199 = (v65 - (unsigned char *)v66) >> 3;
    unint64_t v200 = v69;
    if (v199 < v69)
    {
      uint64_t v71 = (v65 - (unsigned char *)v66) >> 3;
      do
      {
        uint64_t Result = TResultManager::getResult(*(void *)(v205 + 128), v238[v71]);
        std::string::append(&__s1, *(const std::string::value_type **)(Result + 16));
        uint64_t v73 = *(void *)(Result + 32);
        if (*(void *)(Result + 40) != v73)
        {
          unint64_t v74 = 0;
          do
          {
            unint64_t v75 = (__int32 *)(v73 + 24 * v74);
            if (*((char *)v75 + 23) < 0) {
              unint64_t v75 = *(__int32 **)v75;
            }
            unint64_t v76 = v233;
            if ((unint64_t)v233 >= v234)
            {
              uint64_t v78 = v233 - v232;
              if ((unint64_t)(v78 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v79 = (uint64_t)(v234 - (void)v232) >> 2;
              if (v79 <= v78 + 1) {
                unint64_t v79 = v78 + 1;
              }
              if (v234 - (unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v79;
              }
              if (v80) {
                unint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v234, v80);
              }
              else {
                unint64_t v81 = 0;
              }
              int v82 = &v81[8 * v78];
              *(void *)int v82 = v75;
              long long v77 = (__int32 **)(v82 + 8);
              std::wstring::size_type v84 = v232;
              std::wstring::pointer v83 = v233;
              if (v233 != v232)
              {
                do
                {
                  uint64_t v85 = (uint64_t)*--v83;
                  *((void *)v82 - 1) = v85;
                  v82 -= 8;
                }
                while (v83 != v84);
                std::wstring::pointer v83 = v232;
              }
              double v232 = (__int32 **)v82;
              unint64_t v233 = v77;
              unint64_t v234 = (unint64_t)&v81[8 * v80];
              if (v83) {
                operator delete(v83);
              }
            }
            else
            {
              *unint64_t v233 = v75;
              long long v77 = v76 + 1;
            }
            unint64_t v233 = v77;
            ++v74;
            uint64_t v73 = *(void *)(Result + 32);
          }
          while (v74 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(Result + 40) - v73) >> 3));
        }
        ++v71;
      }
      while (v71 != v200);
    }
    uint64_t v227 = (BOOL (*)(uint64_t, uint64_t))v229;
    long long v228 = xmmword_214085190;
    char v230 = 1;
    uint64_t v86 = (uint64_t)v241;
    if (v242 != v241)
    {
      unsigned int v198 = v203 & v70;
      unint64_t v204 = v201;
      for (unint64_t i = 0; i < (v242 - v241) >> 3; ++i)
      {
        if (v7[2] >= v204) {
          break;
        }
        int v87 = *(_DWORD *)(v86 + 8 * i);
        if (v87 == 0x10000)
        {
          if (v232 != v233)
          {
            TParamSetter::TParamSetter(&v225, *(void *)(v205 + 48) + 2224, (uint64_t)&unk_2140A2928, *(void *)(*(void *)(v205 + 48) + 136));
            TParamSetter::TParamSetter(&v218, *(void *)(v205 + 48) + 2472, (uint64_t)&unk_2140A2928, *(void *)(*(void *)(v205 + 48) + 136));
            long long v214 = v216;
            long long v215 = xmmword_214085190;
            char v217 = 1;
            uint64_t v209 = 0;
            uint64_t v210 = v212;
            long long v211 = xmmword_214085190;
            char v213 = 1;
            uint64_t v223 = 0;
            long long v222 = 0;
            uint64_t v224 = 0;
            __p = 0;
            uint64_t v208 = 0;
            std::vector<wchar_t const*>::__init_with_size[abi:ne180100]<wchar_t const**,wchar_t const**>(&__p, v232, (uint64_t)v233, v233 - v232);
            uint64_t v110 = v232;
            if (v233 == v232 || v7[2] >= v204)
            {
LABEL_229:
              if (__p)
              {
                uint64_t v208 = __p;
                operator delete(__p);
              }
              if (v222)
              {
                uint64_t v223 = v222;
                operator delete(v222);
              }
              if (v213 && v210 != v212 && v210) {
                MEMORY[0x216698730]();
              }
              if (v217 && v214 != v216 && v214) {
                MEMORY[0x216698730]();
              }
              TParamSetter::~TParamSetter((TParamSetter *)&v218);
              TParamSetter::~TParamSetter((TParamSetter *)&v225);
              goto LABEL_333;
            }
            uint64_t v111 = 0;
            while (2)
            {
              uint64_t v202 = v111;
              (*(void (**)(void, __int32 *, void, unsigned char **))(**(void **)(v205 + 120) + 48))(*(void *)(v205 + 120), v110[v111], 0, &v214);
              if (*((void *)&v215 + 1))
              {
                TLexicon::getWrittenForm(*(void *)(v205 + 32), v232[v202], (uint64_t)&v210);
                if (*((void *)&v211 + 1))
                {
                  TBuffer<wchar_t>::insert((uint64_t)&v210, *((unint64_t *)&v211 + 1), dword_2140A2940, 0xBuLL);
                  uint64_t v112 = *(void *)(v205 + 32);
                  if (*((void *)&v211 + 1) >= (unint64_t)v211)
                  {
                    if (v213)
                    {
                      LODWORD(v247[0]) = 0;
                      TBuffer<wchar_t>::insert((uint64_t)&v210, *((unint64_t *)&v211 + 1), (int *)v247, 1uLL);
                      unint64_t v113 = (int *)v210;
                      --*((void *)&v211 + 1);
                    }
                    else
                    {
                      unint64_t v113 = (int *)v210;
                      if ((void)v211) {
                        *((_DWORD *)v210 + v211 - 1) = 0;
                      }
                    }
                  }
                  else
                  {
                    unint64_t v113 = (int *)v210;
                    *((_DWORD *)v210 + *((void *)&v211 + 1)) = 0;
                  }
                  TLexicon::addTempWord(v112, v113, 0, 0, 0);
                  if (*((void *)&v211 + 1) < (unint64_t)v211)
                  {
                    unint64_t v114 = v210;
                    *((_DWORD *)v210 + *((void *)&v211 + 1)) = 0;
                    goto LABEL_137;
                  }
                  if (v213)
                  {
                    LODWORD(v247[0]) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&v210, *((unint64_t *)&v211 + 1), (int *)v247, 1uLL);
                    unint64_t v114 = v210;
                    --*((void *)&v211 + 1);
LABEL_137:
                    uint64_t v115 = v202;
                  }
                  else
                  {
                    unint64_t v114 = v210;
                    uint64_t v115 = v202;
                    if ((void)v211) {
                      *((_DWORD *)v210 + v211 - 1) = 0;
                    }
                  }
                  *((void *)__p + v115) = v114;
                  uint64_t v221 = 0;
                  uint64_t v206 = 0;
                  unint64_t v116 = v7[2];
                  if (*((void *)&v215 + 1) && v116 < v204)
                  {
                    uint64_t v117 = 0;
                    BOOL v197 = 0;
                    while (1)
                    {
                      unint64_t v118 = *(void *)&v214[8 * v117];
                      if (v118
                        && (uint64_t v119 = *(void *)(*(void *)(v205 + 120) + 32),
                            v118 <= (*(void *)(*(void *)(v205 + 120) + 40) - v119) >> 3))
                      {
                        uint64_t v120 = *(void *)(v119 + 8 * v118 - 8);
                      }
                      else
                      {
                        uint64_t v120 = 0;
                      }
                      if (!*(unsigned char *)(v120 + 145))
                      {
                        std::vector<TPItnRuleControl>::resize((uint64_t)&v222, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v120 + 160) - *(void *)(v120 + 152)) >> 3));
                        uint64_t v122 = *(void *)(v120 + 152);
                        uint64_t v121 = *(void *)(v120 + 160);
                        if (v121 != v122)
                        {
                          unint64_t v123 = (v121 - v122) / 24;
                          uint64_t v124 = v222;
                          if (v123 <= 1) {
                            unint64_t v123 = 1;
                          }
                          unint64_t v125 = *(long long **)(v120 + 152);
                          do
                          {
                            long long v126 = *v125;
                            unint64_t v125 = (long long *)((char *)v125 + 24);
                            *v124++ = v126;
                            --v123;
                          }
                          while (v123);
                        }
                        uint64_t v127 = (void *)(v120 + 120);
                        if (*(char *)(v120 + 143) < 0) {
                          uint64_t v127 = (void *)*v127;
                        }
                        long long v128 = v121 == v122 ? 0 : v222;
                        unint64_t v116 = v7[2];
                        if (v116 < v204) {
                          break;
                        }
                      }
LABEL_192:
                      BOOL v148 = (unint64_t)++v117 >= *((void *)&v215 + 1) || v116 >= v204;
                      if (v148) {
                        goto LABEL_199;
                      }
                    }
                    char v129 = 0;
                    char v130 = 1;
                    while (2)
                    {
                      if ((v130 & 1) == 0)
                      {
                        if (!*(_DWORD *)v127) {
                          goto LABEL_192;
                        }
                        goto LABEL_164;
                      }
                      if (!*(unsigned char *)(v120 + 144))
                      {
                        if (v197)
                        {
                          BOOL v131 = 1;
                          goto LABEL_162;
                        }
                        if (*(void *)(v120 + 32) == *(void *)(v120 + 24)
                          && *(void *)(v120 + 56) == *(void *)(v120 + 48))
                        {
                          BOOL v131 = *(void *)(v120 + 192) == -1;
LABEL_162:
                          BOOL v197 = v131;
                        }
                        else
                        {
                          BOOL v197 = 0;
                        }
LABEL_164:
                        LOBYTE(v195) = 0;
                        uint64_t v132 = (*(uint64_t (**)(void, void, void *, void, void, void, void, void, void *, uint64_t, uint64_t, int))(**(void **)(v205 + 120) + 16))(*(void *)(v205 + 120), *((void *)__p + v202), v127, v129 & 1, 0, 0, 0, 0, v128, (uint64_t)v128- 0x5555555555555550 * ((*(void *)(v120 + 160) - *(void *)(v120 + 152)) >> 3), -1, v195);
                        uint64_t v133 = (*(uint64_t (**)(uint64_t, void *, void *, void *, unsigned char *, void **, void, void, uint64_t *, uint64_t *))(*(void *)v205 + 96))(v205, v238, &v238[v199], &v238[v200], v239, &__p, 0, v198, &v221, &v206);
                        long long v134 = *(const char **)(TResultManager::getResult(*(void *)(v205 + 128), v133) + 16);
                        size_t v135 = strlen(v134);
                        size_t v136 = v135;
                        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                        {
                          if (v135 != __s1.__r_.__value_.__l.__size_) {
                            goto LABEL_172;
                          }
                          if (v135 == -1) {
LABEL_354:
                          }
                            std::wstring::__throw_out_of_range[abi:ne180100]();
                          p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_171:
                          BOOL v138 = memcmp(p_s1, v134, v136) == 0;
                        }
                        else
                        {
                          if (v135 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
                          {
                            if (v135 == -1) {
                              goto LABEL_354;
                            }
                            p_s1 = &__s1;
                            goto LABEL_171;
                          }
LABEL_172:
                          BOOL v138 = 0;
                        }
                        if (v7[2] && !v138)
                        {
                          unint64_t v139 = v128;
                          unint64_t v140 = v127;
                          uint64_t v141 = 0;
                          do
                          {
                            uint64_t v142 = TResultManager::getResult(*(void *)(v205 + 128), *(void *)(*v7 + 8 * v141));
                            int v143 = strcmp(*(const char **)(v142 + 16), v134);
                            BOOL v138 = v143 == 0;
                          }
                          while ((unint64_t)++v141 < v7[2] && v143 != 0);
                          uint64_t v127 = v140;
                          long long v128 = v139;
                        }
                        long long v145 = *(TResult **)(v205 + 128);
                        if (v138)
                        {
                          TResultManager::destroy(v145, v133);
                        }
                        else
                        {
                          uint64_t v146 = TResultManager::getResult((uint64_t)v145, v133);
                          MEMORY[0x216698480](*(void *)(v146 + 32) + 24 * v202, v232[v202]);
                          v247[0] = v133;
                          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)v7, v7[2], v247, 1uLL);
                        }
                        (*(void (**)(void, uint64_t))(**(void **)(v205 + 120) + 24))(*(void *)(v205 + 120), v132);
                        unint64_t v116 = v7[2];
                      }
                      char v147 = v130 & (v116 < v204);
                      char v129 = 1;
                      char v130 = 0;
                      if ((v147 & 1) == 0) {
                        goto LABEL_192;
                      }
                      continue;
                    }
                  }
                  BOOL v197 = 0;
LABEL_199:
                  if (!v197 && v116 < v204)
                  {
                    uint64_t v149 = (*(uint64_t (**)(uint64_t, void *, void *, void *, unsigned char *, void **, void, void, uint64_t *, uint64_t *))(*(void *)v205 + 96))(v205, v238, &v238[v199], &v238[v200], v239, &__p, 0, v198, &v221, &v206);
                    uint64_t v150 = *(const char **)(TResultManager::getResult(*(void *)(v205 + 128), v149) + 16);
                    size_t v151 = strlen(v150);
                    size_t v152 = v151;
                    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    {
                      if (v151 != __s1.__r_.__value_.__l.__size_) {
                        goto LABEL_211;
                      }
                      if (v151 == -1) {
LABEL_359:
                      }
                        std::wstring::__throw_out_of_range[abi:ne180100]();
                      uint64_t v153 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_210:
                      BOOL v154 = memcmp(v153, v150, v152) == 0;
                    }
                    else
                    {
                      if (v151 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
                      {
                        if (v151 == -1) {
                          goto LABEL_359;
                        }
                        uint64_t v153 = &__s1;
                        goto LABEL_210;
                      }
LABEL_211:
                      BOOL v154 = 0;
                    }
                    if (v7[2] && !v154)
                    {
                      uint64_t v155 = 0;
                      do
                      {
                        uint64_t v156 = TResultManager::getResult(*(void *)(v205 + 128), *(void *)(*v7 + 8 * v155));
                        int v157 = strcmp(*(const char **)(v156 + 16), v150);
                        BOOL v154 = v157 == 0;
                      }
                      while ((unint64_t)++v155 < v7[2] && v157 != 0);
                    }
                    unint64_t v159 = *(TResult **)(v205 + 128);
                    if (v154)
                    {
                      TResultManager::destroy(v159, v149);
                    }
                    else
                    {
                      uint64_t v160 = TResultManager::getResult((uint64_t)v159, v149);
                      MEMORY[0x216698480](*(void *)(v160 + 32) + 24 * v202, v232[v202]);
                      v247[0] = v149;
                      TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)v7, v7[2], v247, 1uLL);
                    }
                  }
                  *((void *)__p + v202) = v232[v202];
                }
              }
              uint64_t v111 = v202 + 1;
              uint64_t v110 = v232;
              if (v202 + 1 >= (unint64_t)(v233 - v232) || v7[2] >= v204) {
                goto LABEL_229;
              }
              continue;
            }
          }
        }
        else if (v87 == 1)
        {
          if ((char *)v233 - (char *)v232 == 8)
          {
            uint64_t v88 = *(void *)(v205 + 48);
            uint64_t v89 = TParam::getActiveConfigHandle((TParam *)(v88 + 16416));
            if (!*(unsigned char *)(v88 + TParam::getValidConfig((TParam *)(v88 + 16416), v89) + 16568)
              || TLexicon::getPronCount(*(void **)(v205 + 32), *v232) == 1)
            {
              unint64_t v219 = 0;
              uint64_t v218 = 0;
              uint64_t v220 = 0;
              BOOL v90 = *(void **)(v205 + 32);
              unint64_t v91 = *v232;
              unint64_t v92 = TStringParam::get((TStringParam *)(*(void *)(v205 + 48) + 15040));
              TLexicon::getHomophones(v90, v91, v92, &v218);
              unint64_t v93 = v218;
              if (v218 != v219)
              {
                uint64_t v210 = 0;
                long long v211 = 0uLL;
                std::vector<std::pair<TWord const*,unsigned int>>::reserve(&v210, (v219 - (unsigned char *)v218) >> 3);
                unint64_t v94 = (TWord **)v218;
                if (v219 == v218)
                {
                  long long v100 = (int *)v211;
                }
                else
                {
                  unint64_t v95 = 0;
                  do
                  {
                    unsigned int UnigramScore = TWord::getUnigramScore(v94[v95]);
                    uint64_t v97 = *((void *)v218 + v95);
                    uint64_t v98 = UnigramScore;
                    uint64_t v99 = v211;
                    if ((unint64_t)v211 >= *((void *)&v211 + 1))
                    {
                      uint64_t v101 = (uint64_t)(v211 - (void)v210) >> 4;
                      unint64_t v102 = v101 + 1;
                      if ((unint64_t)(v101 + 1) >> 60) {
                        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v103 = *((void *)&v211 + 1) - (void)v210;
                      if ((uint64_t)(*((void *)&v211 + 1) - (void)v210) >> 3 > v102) {
                        unint64_t v102 = v103 >> 3;
                      }
                      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v104 = v102;
                      }
                      if (v104) {
                        unint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)&v211 + 8, v104);
                      }
                      else {
                        unint64_t v105 = 0;
                      }
                      uint64_t v106 = &v105[16 * v101];
                      *(void *)uint64_t v106 = v98;
                      *((void *)v106 + 1) = v97;
                      uint64_t v108 = (char *)v210;
                      uint64_t v107 = (char *)v211;
                      uint64_t v109 = v106;
                      if ((void *)v211 != v210)
                      {
                        do
                        {
                          *((_OWORD *)v109 - 1) = *((_OWORD *)v107 - 1);
                          v109 -= 16;
                          v107 -= 16;
                        }
                        while (v107 != v108);
                        uint64_t v107 = (char *)v210;
                      }
                      long long v100 = (int *)(v106 + 16);
                      uint64_t v210 = v109;
                      *(void *)&long long v211 = v106 + 16;
                      *((void *)&v211 + 1) = &v105[16 * v104];
                      if (v107) {
                        operator delete(v107);
                      }
                    }
                    else
                    {
                      *(void *)long long v211 = UnigramScore;
                      *(void *)(v99 + 8) = v97;
                      long long v100 = (int *)(v99 + 16);
                    }
                    *(void *)&long long v211 = v100;
                    ++v95;
                    unint64_t v94 = (TWord **)v218;
                  }
                  while (v95 < (v219 - (unsigned char *)v218) >> 3);
                }
                unint64_t v163 = 126 - 2 * __clz(((char *)v100 - (unsigned char *)v210) >> 4);
                if (v100 == v210) {
                  uint64_t v164 = 0;
                }
                else {
                  uint64_t v164 = v163;
                }
                std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,false>((uint64_t)v210, v100, (uint64_t)&v214, v164, 1);
                TParamSetter::TParamSetter(&v214, *(void *)(v205 + 48) + 2224, (uint64_t)&unk_2140A2928, *(void *)(*(void *)(v205 + 48) + 136));
                TParamSetter::TParamSetter(&v225, *(void *)(v205 + 48) + 2472, (uint64_t)&unk_2140A2928, *(void *)(*(void *)(v205 + 48) + 136));
                std::vector<wchar_t const*>::vector(&v222, 1uLL);
                uint64_t v165 = (void **)v210;
                if ((void *)v211 != v210 && v7[2] < v204)
                {
                  for (unint64_t j = 0; j < (uint64_t)(v211 - (void)v210) >> 4 && v7[2] < v204; ++j)
                  {
                    v247[0] = 0;
                    uint64_t v221 = 0;
                    *(void *)long long v222 = *v165[2 * j + 1];
                    uint64_t v167 = (void *)(*(uint64_t (**)(uint64_t, void *, void *, void *, unsigned char *, void **, void, void, uint64_t *, uint64_t *))(*(void *)v205 + 96))(v205, v238, &v238[v199], &v238[v200], v239, &v222, 0, v198, v247, &v221);
                    long long v168 = *(const char **)(TResultManager::getResult(*(void *)(v205 + 128), (uint64_t)v167) + 16);
                    size_t v169 = strlen(v168);
                    size_t v170 = v169;
                    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    {
                      if (v169 == __s1.__r_.__value_.__l.__size_)
                      {
                        if (v169 == -1) {
LABEL_358:
                        }
                          std::wstring::__throw_out_of_range[abi:ne180100]();
                        uint64_t v171 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                        goto LABEL_276;
                      }
                    }
                    else if (v169 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
                    {
                      if (v169 == -1) {
                        goto LABEL_358;
                      }
                      uint64_t v171 = &__s1;
LABEL_276:
                      BOOL v172 = memcmp(v171, v168, v170) == 0;
                      goto LABEL_278;
                    }
                    BOOL v172 = 0;
LABEL_278:
                    unint64_t v173 = v7[2];
                    if (v173 && !v172)
                    {
                      unint64_t v174 = 0;
                      do
                      {
                        uint64_t v175 = TResultManager::getResult(*(void *)(v205 + 128), *(void *)(*v7 + 8 * v174));
                        int v176 = strcmp(*(const char **)(v175 + 16), v168);
                        BOOL v172 = v176 == 0;
                        ++v174;
                        unint64_t v173 = v7[2];
                      }
                      while (v174 < v173 && v176 != 0);
                    }
                    if (v172)
                    {
                      TResultManager::destroy(*(TResult **)(v205 + 128), (uint64_t)v167);
                    }
                    else
                    {
                      __p = v167;
                      TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)v7, v173, (uint64_t *)&__p, 1uLL);
                    }
                    uint64_t v165 = (void **)v210;
                  }
                }
                if (v222)
                {
                  uint64_t v223 = v222;
                  operator delete(v222);
                }
                TParamSetter::~TParamSetter((TParamSetter *)&v225);
                TParamSetter::~TParamSetter((TParamSetter *)&v214);
                if (v210)
                {
                  *(void *)&long long v211 = v210;
                  operator delete(v210);
                }
                unint64_t v93 = v218;
              }
              if (v93)
              {
                unint64_t v219 = v93;
                operator delete(v93);
              }
            }
          }
        }
        else if (v87 <= 0x1000)
        {
          if (v87 > 127)
          {
            if (v87 > 1023)
            {
              switch(v87)
              {
                case 1024:
                  uint64_t v162 = 10;
                  break;
                case 2048:
                  uint64_t v162 = 11;
                  break;
                case 4096:
                  uint64_t v162 = 12;
                  break;
                default:
                  goto LABEL_333;
              }
            }
            else
            {
              switch(v87)
              {
                case 128:
                  uint64_t v162 = 7;
                  break;
                case 256:
                  uint64_t v162 = 8;
                  break;
                case 512:
                  uint64_t v162 = 9;
                  break;
                default:
                  goto LABEL_333;
              }
            }
          }
          else if (v87 > 15)
          {
            switch(v87)
            {
              case 16:
                uint64_t v162 = 4;
                break;
              case 32:
                uint64_t v162 = 5;
                break;
              case 64:
                uint64_t v162 = 6;
                break;
              default:
                goto LABEL_333;
            }
          }
          else
          {
            switch(v87)
            {
              case 2:
                uint64_t v162 = 1;
                break;
              case 4:
                uint64_t v162 = 2;
                break;
              case 8:
                uint64_t v162 = 3;
                break;
              default:
                goto LABEL_333;
            }
          }
          uint64_t v225 = v162;
          TBuffer<TPItnRuleHandle_fake **>::resize((uint64_t)&v227, 0);
          (*(void (**)(uint64_t, void *, void *, void *, unsigned char *, uint64_t *, uint64_t *, void, BOOL (**)(uint64_t, uint64_t)))(*(void *)v205 + 120))(v205, v238, &v238[v199], &v238[v200], v239, &v225, &v226, v198, &v227);
          if (*((void *)&v228 + 1))
          {
            if (v200 <= v199 + 1)
            {
              uint64_t v180 = *(void *)v227;
            }
            else
            {
              uint64_t v178 = *(void *)(v205 + 128);
              size_t v179 = (void *)TBuffer<TPItnResultHandle_fake **>::data((uint64_t)&v227);
              uint64_t v180 = TResultManager::merge(v178, v179, *((uint64_t *)&v228 + 1));
              if (*((void *)&v228 + 1))
              {
                unint64_t v181 = 0;
                do
                  TResultManager::destroy(*(TResult **)(v205 + 128), *((void *)v227 + v181++));
                while (v181 < *((void *)&v228 + 1));
              }
            }
            uint64_t v182 = *(const char **)(TResultManager::getResult(*(void *)(v205 + 128), v180) + 16);
            size_t v183 = strlen(v182);
            size_t v184 = v183;
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v183 != __s1.__r_.__value_.__l.__size_) {
                goto LABEL_321;
              }
              if (v183 == -1) {
LABEL_360:
              }
                std::wstring::__throw_out_of_range[abi:ne180100]();
              uint64_t v185 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_320:
              BOOL v186 = memcmp(v185, v182, v184) == 0;
            }
            else
            {
              if (v183 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
              {
                if (v183 == -1) {
                  goto LABEL_360;
                }
                uint64_t v185 = &__s1;
                goto LABEL_320;
              }
LABEL_321:
              BOOL v186 = 0;
            }
            unint64_t v187 = v7[2];
            if (v187 && !v186)
            {
              unint64_t v188 = 0;
              do
              {
                uint64_t v189 = TResultManager::getResult(*(void *)(v205 + 128), *(void *)(*v7 + 8 * v188));
                int v190 = strcmp(*(const char **)(v189 + 16), v182);
                BOOL v186 = v190 == 0;
                ++v188;
                unint64_t v187 = v7[2];
              }
              while (v188 < v187 && v190 != 0);
            }
            if (v186)
            {
              TResultManager::destroy(*(TResult **)(v205 + 128), v180);
            }
            else
            {
              long long v214 = (unsigned char *)v180;
              TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)v7, v187, (uint64_t *)&v214, 1uLL);
            }
          }
        }
LABEL_333:
        uint64_t v86 = (uint64_t)v241;
      }
    }
    uint64_t v192 = v235;
    if (v236 != (unsigned char *)v235)
    {
      unint64_t v193 = 0;
      do
      {
        TResultManager::destroy(*(TResult **)(v205 + 128), v192[v193++]);
        uint64_t v192 = v235;
      }
      while (v193 < (v236 - (unsigned char *)v235) >> 3);
    }
    if (v230)
    {
      if ((char *)v227 != v229 && v227 != 0) {
        MEMORY[0x216698730]();
      }
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    if (v232)
    {
      unint64_t v233 = v232;
      operator delete(v232);
    }
    if (v235)
    {
      uint64_t v236 = v235;
      operator delete(v235);
    }
    if (v238)
    {
      v239 = v238;
      operator delete(v238);
    }
    BOOL v23 = v241;
  }
  if (v23)
  {
    uint64_t v242 = v23;
    operator delete(v23);
  }
}

void sub_213F07488(_Unwind_Exception *a1)
{
  BOOL v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(void *)(v1 - 208) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(v1 - 192);
  if (v4)
  {
    *(void *)(v1 - 184) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 - 168);
  if (v5)
  {
    *(void *)(v1 - 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

BOOL priorityCompare(uint64_t a1, uint64_t a2)
{
  return HIDWORD(a1) < HIDWORD(a2);
}

void std::vector<TPItnResultHandle_fake **>::push_back[abi:ne180100](void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    unsigned int v8 = v14 + 8;
    long long v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    unsigned int v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t TBuffer<TPItnResultHandle_fake **>::data(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(unsigned char *)(a1 + 2072))
    {
      uint64_t v5 = 0;
      TBuffer<TPItnRuleHandle_fake **>::insert(a1, v2, &v5, 1uLL);
      --*(void *)(a1 + 16);
    }
    else if (v3)
    {
      *(void *)(*(void *)a1 + 8 * v3 - 8) = 0;
    }
  }
  else
  {
    *(void *)(*(void *)a1 + 8 * v2) = 0;
  }
  return *(void *)a1;
}

void non-virtual thunk to'TFormatter::generateResultAlternatives(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

TFormatter *TFormatter::reformatResults(TFormatter *result, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, char a8, uint64_t a9)
{
  if (a4 != a3)
  {
    uint64_t v9 = (uint64_t)result;
    uint64_t v10 = (uint64_t)(a3 - (void)a2) >> 3;
    uint64_t v38 = (a5 - (uint64_t)a2) >> 3;
    unint64_t v11 = a7 - a6;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    unint64_t v46 = v11;
    uint64_t v41 = &a2[v10];
    uint64_t v48 = v41 + 1;
    unint64_t v49 = (uint64_t)(a4 - a3) >> 3;
    uint64_t v37 = v10 + 1;
    unint64_t v36 = a3 + 8;
    uint64_t v12 = 0;
    uint64_t v40 = result;
    int v50 = *(unsigned __int8 *)(TResultManager::getResult(*((void *)result + 16), a2[(uint64_t)(a3 - (void)a2) >> 3])
                             + 1);
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v12;
      uint64_t v15 = v13;
      if (++v12 >= v49) {
        break;
      }
      uint64_t v16 = v13;
      uint64_t v17 = TResultManager::getResult(*(void *)(v9 + 128), v48[v14]);
      uint64_t v15 = v16;
      uint64_t v13 = v16 - 8;
    }
    while ((v50 != 0) == (*(unsigned char *)(v17 + 1) != 0));
    uint64_t v44 = v14;
    uint64_t v45 = v15;
    unint64_t v58 = 0;
    unint64_t v59 = 0;
    uint64_t v60 = 0;
    TFormatter::addWords(v9, v41, (unint64_t)v48 - v15, 0, (void **)&v58);
    uint64_t v18 = v58;
    uint64_t v19 = v59;
    unint64_t v20 = a6;
    if (v59 != v58)
    {
      unint64_t v21 = 0;
      do
      {
        if (a7 == v20)
        {
          unint64_t v22 = v21 + 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          unint64_t v23 = v46;
          do
          {
            int v24 = &v18[112 * v21];
            long long v25 = *(_OWORD *)(v24 + 40);
            long long v26 = *(_OWORD *)(v24 + 56);
            long long v27 = *(_OWORD *)(v24 + 88);
            long long v56 = *(_OWORD *)(v24 + 72);
            long long v57 = v27;
            long long v54 = v25;
            long long v55 = v26;
            if (getItnControlCategory(*v20) == 2)
            {
              if (v22 != 0x6DB6DB6DB6DB6DB7 * ((v59 - v58) >> 4))
              {
                uint64_t v28 = *v20;
                *((void *)&v56 + getItnControlCategory(*v20)) = -1;
                *((void *)&v54 + getItnControlCategory(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 8)) = v28;
              }
            }
            else
            {
              uint64_t v29 = *v20;
              *((void *)&v56 + getItnControlCategory(*v20)) = -1;
              unsigned int ItnControlCategory = getItnControlCategory(v29);
              uint64_t v31 = *(void *)(a9 + 16);
              *((void *)&v54 + ItnControlCategory) = v29;
              if (!(v21 | v31))
              {
                uint64_t v32 = *v20;
                *((void *)&v56 + getItnControlCategory(*v20)) = v32;
              }
            }
            uint64_t v18 = v58;
            uint64_t v33 = &v58[112 * v21];
            *(_OWORD *)(v33 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v54;
            *(_OWORD *)(v33 + 56) = v55;
            *(_OWORD *)(v33 + 72) = v56;
            *(_OWORD *)(v33 + 88) = v57;
            v33[104] = 1;
            ++v20;
            --v23;
          }
          while (v23);
          uint64_t v19 = v59;
          unint64_t v20 = a6;
        }
        unint64_t v21 = v22;
      }
      while (v22 < 0x6DB6DB6DB6DB6DB7 * ((v19 - v18) >> 4));
    }
    if (v50) {
      uint64_t v34 = &unk_2140A2970;
    }
    else {
      uint64_t v34 = &unk_2140A2978;
    }
    TParamSetter::TParamSetter(&v54, *((void *)v40 + 6) + 3792, (uint64_t)v34, *(void *)(*((void *)v40 + 6) + 136));
    uint64_t v35 = v37 + v44;
    if (v49 - 1 == v44) {
      uint64_t v35 = v38;
    }
    uint64_t v52 = -1;
    uint64_t v53 = 0;
    TFormatter::formatInternal(v40, a2, a3, (uint64_t *)(v36 - v45), &a2[v35], &v58, a8, 0, (uint64_t)&v52, &v53);
  }
  return result;
}

void sub_213F07C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v35 = *(void **)(v33 - 120);
  if (v35)
  {
    *(void *)(v33 - 112) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

TFormatter *non-virtual thunk to'TFormatter::reformatResults(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, char a8, uint64_t a9)
{
  return TFormatter::reformatResults((TFormatter *)(a1 - 40), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t TFormatter::splitResult(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4)
{
  return TResultManager::split(*(void *)(a1 + 128), a2, a3, a4);
}

uint64_t non-virtual thunk to'TFormatter::splitResult(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4)
{
  return TResultManager::split(*(void *)(a1 + 88), a2, a3, a4);
}

uint64_t TFormatter::mergeResults(uint64_t a1, void *a2, uint64_t a3)
{
  return TResultManager::merge(*(void *)(a1 + 128), a2, (a3 - (uint64_t)a2) >> 3);
}

uint64_t non-virtual thunk to'TFormatter::mergeResults(uint64_t a1, void *a2, uint64_t a3)
{
  return TResultManager::merge(*(void *)(a1 + 88), a2, (a3 - (uint64_t)a2) >> 3);
}

TResult *TFormatter::deleteResult(uint64_t a1, uint64_t a2)
{
  return TResultManager::destroy(*(TResult **)(a1 + 128), a2);
}

TResult *non-virtual thunk to'TFormatter::deleteResult(uint64_t a1, uint64_t a2)
{
  return TResultManager::destroy(*(TResult **)(a1 + 88), a2);
}

uint64_t TFormatter::copyResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v4 = a2;
  return TResultManager::merge(v2, &v4, 1);
}

uint64_t non-virtual thunk to'TFormatter::copyResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v4 = a2;
  return TResultManager::merge(v2, &v4, 1);
}

void TFormatter::deserializeResult(TResultManager **this, const char *a2)
{
}

void non-virtual thunk to'TFormatter::deserializeResult(TResultManager **this, const char *a2)
{
}

void TFormatter::alignResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void non-virtual thunk to'TFormatter::alignResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t TFormatter::getResultText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(char **)(TResultManager::getResult(*(void *)(a1 + 128), a2) + 16);

  return TBuffer<char>::assign(a3, v4);
}

uint64_t non-virtual thunk to'TFormatter::getResultText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(char **)(TResultManager::getResult(*(void *)(a1 + 88), a2) + 16);

  return TBuffer<char>::assign(a3, v4);
}

uint64_t TFormatter::serializeResultTokenSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TBuffer<char>::resize(a3, 0);
  uint64_t v6 = TResultManager::getResult(*(void *)(a1 + 128), a2);
  uint64_t v7 = *(void *)(v6 + 32);
  if (*(void *)(v6 + 40) != v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = (unsigned int *)(v7 + v9);
      if (*(char *)(v7 + v9 + 23) < 0) {
        unint64_t v11 = *(unsigned int **)v11;
      }
      TLocaleInfo::unicodeToMultiByte(*(void *)(a1 + 32) + 240, v11, a3);
      char v14 = 0;
      TBuffer<char>::insert(a3, *(void *)(a3 + 16), &v14, 1uLL);
      ++v10;
      uint64_t v7 = *(void *)(v8 + 32);
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v8 + 40) - v7) >> 3));
  }
  char v13 = 0;
  return TBuffer<char>::insert(a3, *(void *)(a3 + 16), &v13, 1uLL);
}

uint64_t non-virtual thunk to'TFormatter::serializeResultTokenSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TFormatter::serializeResultTokenSequence(a1 - 40, a2, a3);
}

unint64_t TFormatter::serializeResult(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v7 = (unsigned __int8 *)TResultManager::getResult(*(void *)(a1 + 128), a2);
  uint64_t v8 = *(void *)(a1 + 32);

  return TResult::serialize(v7, a3, a4, v8);
}

unint64_t non-virtual thunk to'TFormatter::serializeResult(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v7 = (unsigned __int8 *)TResultManager::getResult(*(void *)(a1 + 88), a2);
  uint64_t v8 = *(void *)(a1 - 8);

  return TResult::serialize(v7, a3, a4, v8);
}

void TFormatter::getResultAlignment(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Result = TResultManager::getResult(*(void *)(a1 + 128), a2);
  TBuffer<unsigned long>::resize((uint64_t)a3, (uint64_t)(*(void *)(Result + 112) - *(void *)(Result + 104)) >> 3);
  if (a3[2])
  {
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(Result + 104);
    uint64_t v7 = *a3;
    do
    {
      *(void *)(v7 + 8 * v5) = *(void *)(v6 + 8 * v5);
      ++v5;
    }
    while (v5 < a3[2]);
  }
}

void TBuffer<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 2072) && *(void *)(a1 + 8) < a2)
  {
    *(void *)(a1 + 8) = a2 + 1;
    operator new[]();
  }
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 < a2)
  {
    unint64_t v5 = a2;
    if (*(unsigned char *)(a1 + 2072)
      || ((v6 = *(void *)(a1 + 8), v6 >= a2) ? (unint64_t v5 = a2) : (unint64_t v5 = *(void *)(a1 + 8)),
          v4 < v6 ? (BOOL v7 = v5 == v4) : (BOOL v7 = 1),
          !v7))
    {
      bzero((void *)(*(void *)a1 + 8 * v4), 8 * (v5 - v4));
    }
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a2;
}

void non-virtual thunk to'TFormatter::getResultAlignment(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

BOOL TFormatter::isValidResult(uint64_t a1, uint64_t a2)
{
  return TResultManager::getResult(*(void *)(a1 + 128), a2) != 0;
}

BOOL non-virtual thunk to'TFormatter::isValidResult(uint64_t a1, uint64_t a2)
{
  return TResultManager::getResult(*(void *)(a1 + 88), a2) != 0;
}

uint64_t TFormatter::isResultTokenized(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)TResultManager::getResult(*(void *)(a1 + 128), a2);
}

uint64_t non-virtual thunk to'TFormatter::isResultTokenized(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)TResultManager::getResult(*(void *)(a1 + 88), a2);
}

uint64_t TFormatter::getParamManager(TFormatter *this)
{
  return *((void *)this + 6);
}

uint64_t TFormatter::getTagManagerInterface(TFormatter *this)
{
  return *((void *)this + 17);
}

uint64_t TFormatter::getRuleManagerInterface(TFormatter *this)
{
  return *((void *)this + 15);
}

uint64_t TFormatter::getHintManagerInterface(TFormatter *this)
{
  return *((void *)this + 16);
}

TItnRuleManager *TFormatter::isCustomized(TFormatter *this)
{
  uint64_t result = (TItnRuleManager *)*((void *)this + 15);
  if (result) {
    return (TItnRuleManager *)TItnRuleManager::isCustomized(result);
  }
  return result;
}

BOOL TFormatter::isModified(TFormatter *this)
{
  uint64_t v1 = *((void *)this + 15);
  return v1 && *(unsigned char *)(v1 + 80) != 0;
}

uint64_t TFormatter::getAdaptationInterface(TFormatter *this)
{
  return 0;
}

uint64_t TFormatter::getResultManagerInterface(TFormatter *this)
{
  return (uint64_t)this + 40;
}

void TRegisterable<TIFormatter>::~TRegisterable(void *a1)
{
  TRegisterable<TIFormatter>::~TRegisterable(a1);

  JUMPOUT(0x216698730);
}

void *TRegisterable<TIFormatter>::~TRegisterable(void *a1)
{
  *a1 = &unk_26C4E04A0;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TIFormatter>::getRegistry();
    uint64_t v3 = *Registry;
    *(void *)(Registry[1] + 8 * a1[1] - 8) = 0;
    uint64_t *Registry = v3 - 1;
  }
  return a1;
}

uint64_t TRegisterable<TIFormatter>::getRegistry()
{
  {
    operator new();
  }
  return TRegisterable<TIFormatter>::getRegistry(void)::s_registry;
}

void sub_213F08300(_Unwind_Exception *a1)
{
}

char *std::vector<TItnControl>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnControl const*>,std::__wrap_iter<TItnControl const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  BOOL v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    char v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v37 = v9;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v9, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v28 = &v19[24 * v15];
    __p = v19;
    uint64_t v34 = v28;
    unint64_t v36 = &v19[24 * v18];
    uint64_t v29 = &v28[24 * a5];
    uint64_t v30 = 24 * a5;
    do
    {
      long long v31 = *(_OWORD *)v7;
      *((void *)v28 + 2) = *((void *)v7 + 2);
      *(_OWORD *)uint64_t v28 = v31;
      v28 += 24;
      v7 += 24;
      v30 -= 24;
    }
    while (v30);
    uint64_t v35 = v29;
    unint64_t v5 = (char *)std::vector<TItnControl>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      uint64_t v35 = &v34[(v35 - v34 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    unint64_t v21 = &__src[24 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[24 * a5];
    long long v25 = &v23[-24 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *((void *)v26 + 2) = *((void *)v25 + 2);
        *(_OWORD *)long long v26 = v27;
        v26 += 24;
        v25 += 24;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[24 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_213F08568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TItnControl>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(void **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  BOOL v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 24);
      BOOL v7 = (void *)(v9 - 24);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    BOOL v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  unint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v15;
  unint64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *TParamSetter::TParamSetter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a1 + 4;
  *((_OWORD *)a1 + 1) = xmmword_214085190;
  *((unsigned char *)a1 + 1056) = 1;
  a1[133] = a4;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 16))(a2, a4, a1 + 1);
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 32))(*a1, a4, a3);
  return a1;
}

void sub_213F08750(_Unwind_Exception *a1)
{
  TBuffer<wchar_t>::~TBuffer(v1);
  _Unwind_Resume(a1);
}

void TParamSetter::~TParamSetter(TParamSetter *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 133);
  unint64_t v4 = (void *)((char *)this + 8);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v5 = *((void *)this + 3);
  if (v5 >= v6)
  {
    if (*((unsigned char *)this + 1056))
    {
      int v9 = 0;
      TBuffer<wchar_t>::insert((uint64_t)v4, v5, &v9, 1uLL);
      --*((void *)this + 3);
    }
    else if (v6)
    {
      *(_DWORD *)(*v4 + 4 * v6 - 4) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*v4 + 4 * v5) = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3);
  if (*((unsigned char *)this + 1056))
  {
    BOOL v7 = (TParamSetter *)*((void *)this + 1);
    if (v7 != (TParamSetter *)((char *)this + 32) && v7 != 0) {
      MEMORY[0x216698730]();
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(112 * a2);
}

void std::vector<TItnWordData>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v6[-v7] >> 4) >= a2)
  {
    if (a2)
    {
      int64_t v13 = (void *)(v7 + 112 * a2);
      uint64_t v14 = 112 * a2;
      uint64_t v15 = v7 + 105;
      *(void *)&long long v16 = -1;
      *((void *)&v16 + 1) = -1;
      do
      {
        *(_OWORD *)(v15 - 17) = v16;
        *(_OWORD *)(v15 - 33) = v16;
        *(_OWORD *)(v15 - 49) = v16;
        *(_OWORD *)(v15 - 65) = v16;
        *(_OWORD *)(v15 - 105) = 0uLL;
        *(_OWORD *)(v15 - 89) = 0uLL;
        *(_WORD *)(v15 - 73) = 256;
        *(_WORD *)(v15 - 1) = 256;
        v15 += 112;
        v14 -= 112;
      }
      while (v14);
    }
    else
    {
      int64_t v13 = *(void **)(v4 - 8);
    }
    a1[1] = v13;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (uint64_t)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x249249249249249) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v17 = &v12[112 * v8];
    uint64_t v18 = 112 * a2;
    uint64_t v19 = &v17[112 * a2];
    uint64_t v20 = v17 + 105;
    *(void *)&long long v21 = -1;
    *((void *)&v21 + 1) = -1;
    do
    {
      *(_OWORD *)(v20 - 17) = v21;
      *(_OWORD *)(v20 - 33) = v21;
      *(_OWORD *)(v20 - 49) = v21;
      *(_OWORD *)(v20 - 65) = v21;
      *(_OWORD *)(v20 - 105) = 0uLL;
      *(_OWORD *)(v20 - 89) = 0uLL;
      *(_WORD *)(v20 - 73) = 256;
      *(_WORD *)(v20 - 1) = 256;
      v20 += 112;
      v18 -= 112;
    }
    while (v18);
    int64_t v22 = &v12[112 * v11];
    int v24 = (char *)*a1;
    unint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        long long v25 = *((_OWORD *)v23 - 7);
        long long v26 = *((_OWORD *)v23 - 5);
        *((_OWORD *)v17 - 6) = *((_OWORD *)v23 - 6);
        *((_OWORD *)v17 - 5) = v26;
        *((_OWORD *)v17 - 7) = v25;
        long long v27 = *((_OWORD *)v23 - 4);
        long long v28 = *((_OWORD *)v23 - 3);
        long long v29 = *((_OWORD *)v23 - 2);
        *(_OWORD *)(v17 - 22) = *(_OWORD *)(v23 - 22);
        *((_OWORD *)v17 - 3) = v28;
        *((_OWORD *)v17 - 2) = v29;
        *((_OWORD *)v17 - 4) = v27;
        v17 -= 112;
        v23 -= 112;
      }
      while (v23 != v24);
      unint64_t v23 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::vector<TItnStateData>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TEdgeStat>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 72 * a2;
    do
    {
      *(void *)uint64_t v4 = 0x7FF0000000000000;
      *(_OWORD *)(v4 + 8) = xmmword_2140992D0;
      *(_OWORD *)(v4 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0uLL;
      *(_OWORD *)(v4 + 56) = 0uLL;
      v4 += 72;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_213F08B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<TItnStateData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<TItnStateData>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<TItnStateData>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *std::vector<std::vector<TItnGrammarStateData const*>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::wstring>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_213F08C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<TItnGrammarStateData const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<TItnGrammarStateData const*>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<TItnGrammarStateData const*>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::vector<TItnControl>::__init_with_size[abi:ne180100]<TItnControl*,TItnControl*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::wstring>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_213F08D90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TItnControl>::__assign_with_size[abi:ne180100]<TItnControl*,TItnControl*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<std::wstring>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    int64_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v13 = &v9[v17];
  return result;
}

char *std::vector<TItnWordData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnWordData const*>,std::__wrap_iter<TItnWordData const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 4) < a5)
  {
    int64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 > 0x249249249249249) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((__dst - (uint64_t)v13) >> 4);
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v13) >> 4);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x124924924924924) {
      unint64_t v18 = 0x249249249249249;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v45 = v9;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>(v9, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v32 = &v19[112 * v15];
    __p = v19;
    uint64_t v42 = v32;
    uint64_t v44 = &v19[112 * v18];
    uint64_t v33 = 112 * a5;
    uint64_t v34 = &v32[112 * a5];
    do
    {
      long long v35 = *(_OWORD *)v7;
      long long v36 = *((_OWORD *)v7 + 2);
      *((_OWORD *)v32 + 1) = *((_OWORD *)v7 + 1);
      *((_OWORD *)v32 + 2) = v36;
      *(_OWORD *)uint64_t v32 = v35;
      long long v37 = *((_OWORD *)v7 + 3);
      long long v38 = *((_OWORD *)v7 + 4);
      long long v39 = *((_OWORD *)v7 + 6);
      *((_OWORD *)v32 + 5) = *((_OWORD *)v7 + 5);
      *((_OWORD *)v32 + 6) = v39;
      *((_OWORD *)v32 + 3) = v37;
      *((_OWORD *)v32 + 4) = v38;
      v32 += 112;
      v7 += 112;
      v33 -= 112;
    }
    while (v33);
    uint64_t v43 = v34;
    size_t v5 = (char *)std::vector<TItnWordData>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v43 != v42) {
      v43 += -112
    }
           - 112 * ((((unint64_t)(v43 - v42 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64);
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - __dst) >> 4) >= a5)
  {
    long long v21 = &__src[112 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[112 * a5];
    long long v25 = &v23[-112 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 1) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v26 + 2) = v28;
        *(_OWORD *)long long v26 = v27;
        long long v29 = *((_OWORD *)v25 + 3);
        long long v30 = *((_OWORD *)v25 + 4);
        long long v31 = *((_OWORD *)v25 + 6);
        *((_OWORD *)v26 + 5) = *((_OWORD *)v25 + 5);
        *((_OWORD *)v26 + 6) = v31;
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 4) = v30;
        v25 += 112;
        v26 += 112;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(v24, v5, v23 - v24 - 6);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7 - 6);
    }
    return v5;
  }
  long long v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], v22 - 6);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_213F0919C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TItnWordData>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  size_t v5 = *(void **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 7);
      long long v11 = *((_OWORD *)v8 - 5);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *((_OWORD *)v8 - 6);
      *(_OWORD *)(v9 - 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v11;
      *(_OWORD *)(v9 - 112) = v10;
      long long v12 = *((_OWORD *)v8 - 4);
      long long v13 = *((_OWORD *)v8 - 3);
      long long v14 = *((_OWORD *)v8 - 2);
      uint64_t v7 = (void *)(v9 - 112);
      *(_OWORD *)(v9 - 22) = *(_OWORD *)(v8 - 22);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v13;
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v14;
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v12;
      v8 -= 112;
      v9 -= 112;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v15 = a1[1];
  uint64_t v16 = *(void *)(a2 + 16);
  int64_t v17 = v15 - __src;
  if (v15 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v17 - 6);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v16 + v17;
  unint64_t v18 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v18;
  uint64_t v19 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v19;
  uint64_t v20 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v20;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::vector<TItnWordData>::__init_with_size[abi:ne180100]<std::__wrap_iter<TItnWordData*>,std::__wrap_iter<TItnWordData*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<TItnWordData>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 6);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_213F0934C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TItnWordData>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnWordData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,false>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  long long v10 = (char *)result;
LABEL_2:
  long long v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    long long v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            int v22 = *(_DWORD *)v11;
            *(_DWORD *)long long v11 = *((_DWORD *)a2 - 2);
            *((_DWORD *)a2 - 2) = v22;
            int v23 = *((_DWORD *)v11 + 1);
            *((_DWORD *)v11 + 1) = *((_DWORD *)a2 - 1);
            *((_DWORD *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v11, (void *)v11 + 1, (void *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v11, (void *)v11 + 1, (void *)v11 + 2, (uint64_t)(a2 - 8), a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v11, (void *)v11 + 1, (void *)v11 + 2, (uint64_t)(v11 + 24), (uint64_t)(a2 - 8), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((void *)v17 - 1, v17, &v11[8 * v16 + 8], a3);
      uint64_t v18 = *(void *)v11;
      *(void *)long long v11 = *(void *)v17;
      *(void *)int64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>)>((unint64_t)v11, a2, a3);
      long long v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>)>((uint64_t *)v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v11, v19, a3);
    long long v11 = (char *)(v19 + 1);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(v19 + 1, (uint64_t *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,false>(v10, v19, a3, -v13, a5 & 1);
      long long v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)v11, (uint64_t *)a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (_DWORD *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*a3)(v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          unint64_t v12 = HIDWORD(*v8);
          uint64_t v13 = v7;
          while (1)
          {
            uint64_t v14 = (char *)v4 + v13;
            int v15 = *(_DWORD *)((char *)v4 + v13 + 4);
            *((_DWORD *)v14 + 2) = *(_DWORD *)((char *)v4 + v13);
            *((_DWORD *)v14 + 3) = v15;
            if (!v13) {
              break;
            }
            uint64_t result = (*a3)(v11, *((void *)v14 - 1));
            v13 -= 8;
            if ((result & 1) == 0)
            {
              unint64_t v16 = (_DWORD *)((char *)v4 + v13 + 8);
              goto LABEL_10;
            }
          }
          unint64_t v16 = v4;
LABEL_10:
          _DWORD *v16 = v11;
          v16[1] = v12;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (uint64_t *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = result + 12;
      do
      {
        uint64_t v9 = *v4;
        uint64_t v8 = v4[1];
        uint64_t v4 = v5;
        uint64_t result = (*a3)(v8, v9);
        if (result)
        {
          uint64_t v10 = *v4;
          uint64_t v11 = (_DWORD *)v7;
          do
          {
            unint64_t v12 = v11;
            *(v11 - 1) = *(v11 - 3);
            int v13 = *(v11 - 2);
            v11 -= 2;
            *unint64_t v12 = v13;
            uint64_t result = (*a3)(v10, *(void *)(v12 - 5));
          }
          while ((result & 1) != 0);
          *(void *)(v11 - 1) = v10;
        }
        char v5 = v4 + 1;
        v7 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(void *a1, void *a2, void *a3, uint64_t (**a4)(void, void))
{
  char v8 = (*a4)(*a2, *a1);
  uint64_t result = (*a4)(*a3, *a2);
  if (v8)
  {
    int v10 = *(_DWORD *)a1;
    if (result)
    {
      *(_DWORD *)a1 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v10;
      uint64_t v11 = (int *)a3 + 1;
      uint64_t result = 1;
      unint64_t v12 = (int *)a1 + 1;
LABEL_9:
      int v15 = v11;
      goto LABEL_10;
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v10;
    int v17 = *((_DWORD *)a1 + 1);
    *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 1) = v17;
    if ((*a4)(*a3, *a2))
    {
      int v18 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v18;
      uint64_t v11 = (int *)a3 + 1;
      uint64_t result = 2;
      unint64_t v12 = (int *)a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    int v13 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v13;
    int v15 = (int *)a2 + 1;
    int v14 = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 1) = *((_DWORD *)a3 + 1);
    *((_DWORD *)a3 + 1) = v14;
    if ((*a4)(*a2, *a1))
    {
      int v16 = *(_DWORD *)a1;
      *(_DWORD *)a1 = *(_DWORD *)a2;
      unint64_t v12 = (int *)a1 + 1;
      *(_DWORD *)a2 = v16;
      uint64_t result = 2;
LABEL_10:
      int v19 = *v12;
      *unint64_t v12 = *v15;
      *int v15 = v19;
      return result;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>)>(unint64_t a1, _DWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)a1;
  if ((*a3)(*(void *)a1, *((void *)a2 - 1)))
  {
    unint64_t v7 = a1;
    do
    {
      uint64_t v8 = *(void *)(v7 + 8);
      v7 += 8;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    unint64_t v9 = a1 + 8;
    do
    {
      unint64_t v7 = v9;
      if (v9 >= (unint64_t)v4) {
        break;
      }
      v9 += 8;
    }
    while (!(*a3)(v6, *(void *)v7));
  }
  if (v7 < (unint64_t)v4)
  {
    do
    {
      uint64_t v10 = *((void *)v4 - 1);
      v4 -= 2;
    }
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < (unint64_t)v4)
  {
    int v11 = *(_DWORD *)v7;
    *(_DWORD *)unint64_t v7 = *v4;
    *uint64_t v4 = v11;
    int v12 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(v7 + 4) = v4[1];
    v4[1] = v12;
    do
    {
      uint64_t v13 = *(void *)(v7 + 8);
      v7 += 8;
    }
    while (!(*a3)(v6, v13));
    do
    {
      uint64_t v14 = *((void *)v4 - 1);
      v4 -= 2;
    }
    while (((*a3)(v6, v14) & 1) != 0);
  }
  if (v7 - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v7 - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v7 - 4);
  }
  *(void *)(v7 - 8) = v6;
  return v7;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>)>(uint64_t *a1, _DWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  unint64_t v9 = (unint64_t)&a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= (unint64_t)a2) {
        break;
      }
      uint64_t v11 = *((void *)a2 - 1);
      a2 -= 2;
    }
    while (((*a3)(v11, v7) & 1) == 0);
  }
  else
  {
    do
    {
      uint64_t v10 = *((void *)a2 - 1);
      a2 -= 2;
    }
    while (!(*a3)(v10, v7));
  }
  unint64_t v12 = (unint64_t)&a1[v6];
  if (v9 < (unint64_t)a2)
  {
    uint64_t v13 = a2;
    do
    {
      int v14 = *(_DWORD *)v12;
      *(_DWORD *)unint64_t v12 = *v13;
      _DWORD *v13 = v14;
      int v15 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)(v12 + 4) = v13[1];
      v13[1] = v15;
      do
      {
        uint64_t v16 = *(void *)(v12 + 8);
        v12 += 8;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
      {
        uint64_t v17 = *((void *)v13 - 1);
        v13 -= 2;
      }
      while (!(*a3)(v17, v7));
    }
    while (v12 < (unint64_t)v13);
  }
  unint64_t result = v12 - 8;
  if ((uint64_t *)(v12 - 8) != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v12 - 8);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(v12 - 4);
  }
  *(void *)(v12 - 8) = v7;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(void *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(*(a2 - 1), *a1))
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
        int v9 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a1 + 1, a1 + 2, (uint64_t)(a2 - 1), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a1 + 1, a1 + 2, (uint64_t)(a1 + 3), (uint64_t)(a2 - 1), a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*v11, *v10))
    {
      uint64_t v14 = *v11;
      unint64_t v15 = HIDWORD(*v11);
      uint64_t v16 = v12;
      while (1)
      {
        uint64_t v17 = (char *)a1 + v16;
        int v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        *((_DWORD *)v17 + 6) = *(_DWORD *)((char *)a1 + v16 + 16);
        *((_DWORD *)v17 + 7) = v18;
        if (v16 == -16) {
          break;
        }
        v16 -= 8;
        if (((*a3)(v14, *((void *)v17 + 1)) & 1) == 0)
        {
          int v19 = (_DWORD *)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      int v19 = a1;
LABEL_12:
      *int v19 = v14;
      v19[1] = v15;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(void *a1, void *a2, void *a3, uint64_t a4, uint64_t (**a5)(void, void))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(*(void *)a4, *a3);
  if (result)
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    int v12 = *((_DWORD *)a3 + 1);
    *((_DWORD *)a3 + 1) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v12;
    uint64_t result = (*a5)(*a3, *a2);
    if (result)
    {
      int v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      int v14 = *((_DWORD *)a2 + 1);
      *((_DWORD *)a2 + 1) = *((_DWORD *)a3 + 1);
      *((_DWORD *)a3 + 1) = v14;
      uint64_t result = (*a5)(*a2, *a1);
      if (result)
      {
        int v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        int v16 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
        *((_DWORD *)a2 + 1) = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(void, void))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(*(void *)a5, *(void *)a4);
  if (result)
  {
    int v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    int v14 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v14;
    uint64_t result = (*a6)(*(void *)a4, *a3);
    if (result)
    {
      int v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      int v16 = *((_DWORD *)a3 + 1);
      *((_DWORD *)a3 + 1) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v16;
      uint64_t result = (*a6)(*a3, *a2);
      if (result)
      {
        int v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        int v18 = *((_DWORD *)a2 + 1);
        *((_DWORD *)a2 + 1) = *((_DWORD *)a3 + 1);
        *((_DWORD *)a3 + 1) = v18;
        uint64_t result = (*a6)(*a2, *a1);
        if (result)
        {
          int v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          int v20 = *((_DWORD *)a1 + 1);
          *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v20;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(char *a1, char *a2, char *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if ((*a4)(*(void *)v14, *(void *)a1))
        {
          int v15 = *(_DWORD *)v14;
          *(_DWORD *)int v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v15;
          int v16 = *((_DWORD *)v14 + 1);
          *((_DWORD *)v14 + 1) = *((_DWORD *)a1 + 1);
          *((_DWORD *)a1 + 1) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      int v18 = a2 - 8;
      do
      {
        int v20 = *(_DWORD *)a1;
        int v19 = *((_DWORD *)a1 + 1);
        BOOL v21 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(a1, (unsigned int (**)(void, void))a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)BOOL v21 = v20;
          *((_DWORD *)v21 + 1) = v19;
        }
        else
        {
          *(_DWORD *)BOOL v21 = *(_DWORD *)v18;
          *((_DWORD *)v21 + 1) = *((_DWORD *)v18 + 1);
          *(_DWORD *)int v18 = v20;
          *((_DWORD *)v18 + 1) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>((uint64_t)a1, (uint64_t)(v21 + 8), a4, (v21 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      int v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        uint64_t v18 = HIDWORD(*v5);
        do
        {
          int v15 = v5;
          char v5 = v12;
          *int v15 = *(_DWORD *)v12;
          v15[1] = *((_DWORD *)v12 + 1);
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          int v12 = (void *)(v6 + 8 * v16);
          uint64_t v17 = 2 * v11 + 2;
          if (v17 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = v17;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          uint64_t v11 = v16;
        }
        while (!result);
        *(_DWORD *)char v5 = v14;
        *((_DWORD *)v5 + 1) = v18;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(_DWORD *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[2 * v6 + 2];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(*(void *)&a1[2 * v6 + 2], *(void *)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1[1] = v9[1];
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int>),std::pair<unsigned int,unsigned int>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(void, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *(void *)v9;
      uint64_t v11 = HIDWORD(*(void *)v9);
      do
      {
        int v12 = v9;
        uint64_t v9 = v8;
        *int v12 = *(_DWORD *)v8;
        v12[1] = *((_DWORD *)v8 + 1);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (void *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
      }
      while ((result & 1) != 0);
      *uint64_t v9 = v10;
      v9[1] = v11;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v24 = *(a2 - 4);
          int v25 = *(_DWORD *)v11;
          if (v24 >= *(_DWORD *)v11)
          {
            if (v25 < v24) {
              return result;
            }
            unint64_t v27 = *((void *)a2 - 1);
            unint64_t v26 = *(void *)(v11 + 8);
            if (v27 >= v26) {
              return result;
            }
          }
          else
          {
            unint64_t v26 = *(void *)(v11 + 8);
            unint64_t v27 = *((void *)a2 - 1);
          }
          *(_DWORD *)uint64_t v11 = v24;
          *(a2 - 4) = v25;
          *(void *)(v11 + 8) = v27;
          *((void *)a2 - 1) = v26;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)v11, (int *)(v11 + 16), a2 - 4);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 4));
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(v11, v11 + 16, v11 + 32, v11 + 48, a2 - 4);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,std::pair<int,TWord const*> *>(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)v11, (int *)(v11 + 16 * (v15 >> 1)), a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)(v11 + 16), (int *)(v17 - 16), a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)(v11 + 32), (int *)(v11 + 16 + 16 * v16), a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)(v17 - 16), (int *)v17, (int *)(v11 + 16 + 16 * v16));
      int v18 = *(_DWORD *)v11;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v17;
      *(_DWORD *)unint64_t v17 = v18;
      uint64_t v19 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = *(void *)(v17 + 8);
      *(void *)(v17 + 8) = v19;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)(v11 + 16 * (v15 >> 1)), (int *)v11, a2 - 4);
      if (a5) {
        goto LABEL_16;
      }
    }
    int v20 = *(_DWORD *)(v11 - 16);
    if (v20 >= *(_DWORD *)v11 && (*(_DWORD *)v11 < v20 || *(void *)(v11 - 8) >= *(void *)(v11 + 8)))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,TWord const*> *,std::__less<void,void> &>((int *)v11, a2);
      uint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,TWord const*> *,std::__less<void,void> &>((int *)v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(v11, v21);
    uint64_t v11 = v21 + 16;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(v21 + 16, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (int *)v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,false>(v10, v21, a3, -v13, a5 & 1);
      uint64_t v11 = v21 + 16;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)v11, a2);
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(int *result, int *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 4;
  if (result + 4 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  unint64_t v4 = result;
  do
  {
    char v5 = v4;
    unint64_t v4 = v2;
    int v6 = v5[4];
    int v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      unint64_t v8 = *((void *)v5 + 3);
      unint64_t v9 = *((void *)v5 + 1);
      if (v8 >= v9) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v8 = *((void *)v5 + 3);
      unint64_t v9 = *((void *)v5 + 1);
    }
    v5[4] = v7;
    *((void *)v4 + 1) = v9;
    uint64_t v10 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v11 = v3;
    while (1)
    {
      int v12 = *(int *)((char *)result + v11 - 16);
      if (v6 >= v12) {
        break;
      }
      unint64_t v13 = *(void *)((char *)result + v11 - 8);
LABEL_12:
      v5 -= 4;
      uint64_t v14 = (uint64_t)result + v11;
      *(_DWORD *)uint64_t v14 = v12;
      *(void *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        uint64_t v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      uint64_t v10 = (int *)((char *)result + v11);
      unint64_t v13 = *(void *)((char *)result + v11 - 8);
      if (v8 >= v13) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    uint64_t v10 = v5;
LABEL_18:
    int *v10 = v6;
    *((void *)v10 + 1) = v8;
LABEL_19:
    uint64_t v2 = v4 + 4;
    v3 += 16;
  }
  while (v4 + 4 != a2);
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(int *result, int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 4;
    if (result + 4 != a2)
    {
      for (uint64_t i = result + 2; ; i += 4)
      {
        unint64_t v4 = result;
        uint64_t result = v2;
        int v5 = v4[4];
        int v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v6 >= v5)
        {
          unint64_t v7 = *((void *)v4 + 3);
          if (v7 < *((void *)v4 + 1)) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 4;
        if (result + 4 == a2) {
          return result;
        }
      }
      unint64_t v7 = *((void *)v4 + 3);
LABEL_6:
      for (unint64_t j = i; ; j -= 4)
      {
        j[2] = v6;
        *((void *)j + 2) = *(void *)j;
        int v6 = *(j - 6);
        if (v5 >= v6 && (v6 < v5 || v7 >= *((void *)j - 2))) {
          break;
        }
      }
      *(j - 2) = v5;
      *(void *)unint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || *((void *)a2 + 1) >= *((void *)a1 + 1)))
  {
    int v9 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v9) {
        return 0;
      }
      unint64_t v11 = *((void *)a3 + 1);
      unint64_t v10 = *((void *)a2 + 1);
      if (v11 >= v10) {
        return 0;
      }
    }
    else
    {
      unint64_t v10 = *((void *)a2 + 1);
      unint64_t v11 = *((void *)a3 + 1);
    }
    *a2 = v9;
    *a3 = v3;
    *((void *)a2 + 1) = v11;
    *((void *)a3 + 1) = v10;
    int v12 = *a2;
    int v13 = *a1;
    if (*a2 >= *a1)
    {
      if (v13 < v12) {
        return 1;
      }
      unint64_t v15 = *((void *)a2 + 1);
      unint64_t v14 = *((void *)a1 + 1);
      if (v15 >= v14) {
        return 1;
      }
    }
    else
    {
      unint64_t v14 = *((void *)a1 + 1);
      unint64_t v15 = *((void *)a2 + 1);
    }
    *a1 = v12;
    *a2 = v13;
    *((void *)a1 + 1) = v15;
    uint64_t result = 2;
    *((void *)a2 + 1) = v14;
  }
  else
  {
    int v5 = *a3;
    if (*a3 < v3)
    {
      unint64_t v6 = *((void *)a3 + 1);
LABEL_6:
      *a1 = v5;
      *a3 = v4;
      uint64_t v7 = *((void *)a1 + 1);
      *((void *)a1 + 1) = v6;
      *((void *)a3 + 1) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      unint64_t v6 = *((void *)a3 + 1);
      unint64_t v16 = *((void *)a2 + 1);
      if (v6 < v16) {
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v16 = *((void *)a2 + 1);
    }
    *a1 = v3;
    *a2 = v4;
    unint64_t v17 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v16;
    *((void *)a2 + 1) = v17;
    int v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      unint64_t v19 = *((void *)a3 + 1);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      unint64_t v19 = *((void *)a3 + 1);
    }
    *a2 = v18;
    *a3 = v4;
    *((void *)a2 + 1) = v19;
    uint64_t result = 2;
    *((void *)a3 + 1) = v17;
  }
  return result;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,TWord const*> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2 = *a1;
  unint64_t v3 = *((void *)a1 + 1);
  int v4 = *(a2 - 4);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((void *)a2 - 1)))
  {
    for (uint64_t i = a1 + 4; i < a2 && v2 >= *i && (*i < v2 || v3 >= *((void *)i + 1)); i += 4)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      int v7 = i[4];
      i += 4;
      int v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((void *)i + 1)));
  }
  if (i < a2)
  {
    for (a2 -= 4; v2 < v4 || v4 >= v2 && v3 < *((void *)a2 + 1); a2 -= 4)
    {
      int v8 = *(a2 - 4);
      int v4 = v8;
    }
  }
  if (i < a2)
  {
    int v9 = *i;
    int v10 = *a2;
    do
    {
      int *i = v10;
      *a2 = v9;
      int v11 = i[4];
      i += 4;
      int v9 = v11;
      uint64_t v12 = *((void *)i - 1);
      *((void *)i - 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((void *)i + 1)))
      {
        int v13 = i[4];
        i += 4;
        int v9 = v13;
      }
      do
      {
        do
        {
          int v14 = *(a2 - 4);
          a2 -= 4;
          int v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((void *)a2 + 1));
    }
    while (i < a2);
  }
  if (i - 4 != a1)
  {
    *a1 = *(i - 4);
    *((void *)a1 + 1) = *((void *)i - 1);
  }
  *(i - 4) = v2;
  *((void *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,TWord const*> *,std::__less<void,void> &>(int *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  unint64_t v4 = *((void *)a1 + 1);
  while (1)
  {
    int v5 = a1[v2 + 4];
    if (v5 >= v3 && (v3 < v5 || *(void *)&a1[v2 + 6] >= v4)) {
      break;
    }
    v2 += 4;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 4];
  if (v2 * 4)
  {
    do
    {
      int v8 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
      int v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(void *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        int v10 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(void *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = v6;
  }
  else
  {
    int v12 = *(_DWORD *)a2;
    unint64_t v13 = v6;
    unint64_t v14 = a2;
    do
    {
      *(_DWORD *)unint64_t v13 = v12;
      *(_DWORD *)unint64_t v14 = v5;
      uint64_t v15 = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      *(void *)(v14 + 8) = v15;
      do
      {
        do
        {
          int v16 = *(_DWORD *)(v13 + 16);
          v13 += 16;
          int v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(void *)(v13 + 8) < v4);
      do
      {
        int v17 = *(_DWORD *)(v14 - 16);
        v14 -= 16;
        int v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(void *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if ((int *)(v13 - 16) != a1)
  {
    *a1 = *(_DWORD *)(v13 - 16);
    *((void *)a1 + 1) = *(void *)(v13 - 8);
  }
  *(_DWORD *)(v13 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v3;
  *(void *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(_DWORD *)(a2 - 16);
      int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        unint64_t v8 = *(void *)(a1 + 8);
        unint64_t v9 = *(void *)(a2 - 8);
LABEL_30:
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v7;
        *(void *)(a1 + 8) = v9;
        *(void *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        unint64_t v9 = *(void *)(a2 - 8);
        unint64_t v8 = *(void *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a1 + 16, a1 + 32, a1 + 48, (int *)(a2 - 16));
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  int v14 = *(_DWORD *)v11;
  int v15 = *(_DWORD *)v10;
  if (*(_DWORD *)v11 >= *(_DWORD *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
  }
  *(_DWORD *)uint64_t v11 = v15;
  *(void *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    int v21 = *(_DWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      unint64_t v22 = *(void *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 32;
LABEL_20:
        *(_DWORD *)uint64_t v18 = v14;
        *(void *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v22 = *(void *)(v20 + 24);
    }
    v10 -= 16;
    *(_DWORD *)(v20 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v21;
    *(void *)(a1 + v19 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>((int *)a1, (int *)a2, (int *)a3);
  int v9 = *(_DWORD *)a4;
  int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    unint64_t v12 = *(void *)(a4 + 8);
    unint64_t v11 = *(void *)(a3 + 8);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = *(void *)(a3 + 8);
    unint64_t v12 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v9;
  *(_DWORD *)a4 = v10;
  *(void *)(a3 + 8) = v12;
  *(void *)(a4 + 8) = v11;
  int v13 = *(_DWORD *)a3;
  int v14 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    unint64_t v16 = *(void *)(a3 + 8);
    unint64_t v15 = *(void *)(a2 + 8);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    unint64_t v15 = *(void *)(a2 + 8);
    unint64_t v16 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v13;
  *(_DWORD *)a3 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a3 + 8) = v15;
  int v17 = *(_DWORD *)a2;
  int v18 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unint64_t v19 = *(void *)(a1 + 8);
    unint64_t v20 = *(void *)(a2 + 8);
LABEL_15:
    *(_DWORD *)a1 = v17;
    *(_DWORD *)a2 = v18;
    *(void *)(a1 + 8) = v20;
    *(void *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    unint64_t v20 = *(void *)(a2 + 8);
    unint64_t v19 = *(void *)(a1 + 8);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a2, a3, a4);
  int v11 = *a5;
  int v12 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    unint64_t v14 = *((void *)a5 + 1);
    unint64_t v13 = *(void *)(a4 + 8);
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a4 + 8);
    unint64_t v14 = *((void *)a5 + 1);
  }
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  *(void *)(a4 + 8) = v14;
  *((void *)a5 + 1) = v13;
  int v15 = *(_DWORD *)a4;
  int v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v16 < v15) {
      return result;
    }
    unint64_t v18 = *(void *)(a4 + 8);
    unint64_t v17 = *(void *)(a3 + 8);
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    unint64_t v17 = *(void *)(a3 + 8);
    unint64_t v18 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v15;
  *(_DWORD *)a4 = v16;
  *(void *)(a3 + 8) = v18;
  *(void *)(a4 + 8) = v17;
  int v19 = *(_DWORD *)a3;
  int v20 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v20 < v19) {
      return result;
    }
    unint64_t v22 = *(void *)(a3 + 8);
    unint64_t v21 = *(void *)(a2 + 8);
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(a2 + 8);
    unint64_t v22 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v19;
  *(_DWORD *)a3 = v20;
  *(void *)(a2 + 8) = v22;
  *(void *)(a3 + 8) = v21;
  int v23 = *(_DWORD *)a2;
  int v24 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unint64_t v25 = *(void *)(a1 + 8);
    unint64_t v26 = *(void *)(a2 + 8);
LABEL_9:
    *(_DWORD *)a1 = v23;
    *(_DWORD *)a2 = v24;
    *(void *)(a1 + 8) = v26;
    *(void *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    unint64_t v26 = *(void *)(a2 + 8);
    unint64_t v25 = *(void *)(a1 + 8);
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *,std::pair<int,TWord const*> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (int *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        int v15 = *(_DWORD *)v14;
        int v16 = *(_DWORD *)a1;
        if (*(_DWORD *)v14 >= *(_DWORD *)a1)
        {
          if (v16 < v15) {
            goto LABEL_12;
          }
          unint64_t v17 = *(void *)(v14 + 8);
          unint64_t v18 = *(void *)(a1 + 8);
          if (v17 >= v18) {
            goto LABEL_12;
          }
        }
        else
        {
          unint64_t v17 = *(void *)(v14 + 8);
          unint64_t v18 = *(void *)(a1 + 8);
        }
        *(_DWORD *)uint64_t v14 = v16;
        *(_DWORD *)a1 = v15;
        *(void *)(v14 + 8) = v18;
        *(void *)(a1 + 8) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a4, v9, (int *)a1);
LABEL_12:
        v14 += 16;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      uint64_t v19 = (unint64_t)v8 >> 4;
      uint64_t v20 = a2 - 16;
      do
      {
        int v21 = *(_DWORD *)a1;
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *(_DWORD *)uint64_t v23 = v21;
          *(void *)(v23 + 8) = v22;
        }
        else
        {
          *(_DWORD *)uint64_t v23 = *(_DWORD *)v20;
          *(void *)(v23 + 8) = *(void *)(v20 + 8);
          *(_DWORD *)uint64_t v20 = v21;
          *(void *)(v20 + 8) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v20 -= 16;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (int *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[4];
        if (*v8 < v10 || v10 >= *v8 && *(void *)(result + 16 * v7 + 8) < *((void *)v8 + 3))
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }
      int v11 = *v8;
      int v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          unint64_t v14 = *((void *)v8 + 1);
          unint64_t v13 = *((void *)a4 + 1);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          unint64_t v13 = *((void *)a4 + 1);
          unint64_t v14 = *((void *)v8 + 1);
        }
        *a4 = v11;
        *((void *)a4 + 1) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            int v15 = (int *)(result + 16 * v7);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              int v18 = v15[4];
              if (*v15 < v18 || v18 >= *v15 && *(void *)(result + 16 * v7 + 8) < *((void *)v15 + 3))
              {
                v15 += 4;
                uint64_t v7 = v17;
              }
            }
            int v19 = *v15;
            if (*v15 < v12) {
              break;
            }
            unint64_t v20 = *((void *)v15 + 1);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            *uint64_t v8 = v19;
            *((void *)v8 + 1) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        int v15 = v8;
LABEL_14:
        *int v15 = v12;
        *((void *)v15 + 1) = v13;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 16 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      int v10 = *(_DWORD *)(result + 16);
      if (*(_DWORD *)result < v10
        || v10 >= *(_DWORD *)result && *(void *)(v6 + 16 * v7 + 8) < *(void *)(result + 24))
      {
        result += 16;
        uint64_t v3 = v9;
      }
    }
    *(_DWORD *)uint64_t v6 = *(_DWORD *)result;
    *(void *)(v6 + 8) = *(void *)(result + 8);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,TWord const*> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (int *)(result + 16 * (v4 >> 1));
    int v7 = *v6;
    int v8 = *(_DWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      unint64_t v10 = *(void *)(result + 16 * v5 + 8);
      unint64_t v9 = *(void *)(a2 - 8);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *(void *)(a2 - 8);
      unint64_t v10 = *((void *)v6 + 1);
    }
    *(_DWORD *)(a2 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v7;
    *(void *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        int v11 = (int *)(result + 16 * v5);
        int v13 = *v11;
        if (*v11 >= v8)
        {
          if (v8 < v13) {
            break;
          }
          unint64_t v14 = *(void *)(result + 16 * v5 + 8);
          if (v14 >= v9) {
            break;
          }
        }
        else
        {
          unint64_t v14 = *((void *)v11 + 1);
        }
        *uint64_t v6 = v13;
        *((void *)v6 + 1) = v14;
        uint64_t v6 = (int *)(result + 16 * v5);
        if (v12 <= 1) {
          goto LABEL_13;
        }
      }
    }
    int v11 = v6;
LABEL_13:
    *int v11 = v8;
    *((void *)v11 + 1) = v9;
  }
  return result;
}

void *std::vector<wchar_t const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_213F0B730(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<wchar_t const*>::__init_with_size[abi:ne180100]<wchar_t const**,wchar_t const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_213F0B7AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t StartupSearchParamSpecMgr(void)
{
  uint64_t v127 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v127, (uint64_t)"SearchPelScoreScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPelScoreScaleDoubleHistory);
  long long v126 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v126, (uint64_t)"SearchPelScoreUseBestCompScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPelScoreUseBestCompScoreBoolHistory);
  unint64_t v118 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v118, (uint64_t)"SearchDecimationType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchDecimationTypeEnumHistory);
  uint64_t v117 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v117, (uint64_t)"SearchEnableGenoneScoreCacheThresh", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchEnableGenoneScoreCacheThreshDoubleHistory);
  unint64_t v116 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v116, (uint64_t)"SearchFrameTransformerThreadingType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchFrameTransformerThreadingTypeEnumHistory);
  uint64_t v115 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v115, (uint64_t)"SearchThreadingType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchThreadingTypeEnumHistory);
  unint64_t v125 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v125, (uint64_t)"SearchTruncatePackedIntComponentScores", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchTruncatePackedIntComponentScoresBoolHistory);
  unint64_t v114 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v114, (uint64_t)"SearchFmpeMinimumPosteriorProbability", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchFmpeMinimumPosteriorProbabilityDoubleHistory);
  char v129 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v129, (uint64_t)"SearchFmpeWindowTruncateUnavailableFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchFmpeWindowTruncateUnavailableFramesBoolHistory);
  uint64_t v124 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v124, (uint64_t)"SearchUseWordEndThreshWhenSeedingFinalSilence", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchUseWordEndThreshWhenSeedingFinalSilenceBoolHistory);
  unint64_t v123 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v123, (uint64_t)"SearchTraceThreshScoreIncrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchTraceThreshScoreIncrementIntHistory);
  unint64_t v105 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v105, (uint64_t)"SearchActiveWordSpreadSeedScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveWordSpreadSeedScoreIntHistory);
  uint64_t v121 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v121, (uint64_t)"SearchPelBackoffThreshScoreDecrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPelBackoffThreshScoreDecrementIntHistory);
  long long v128 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v128, (uint64_t)"SearchAdjustThreshScoreType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchAdjustThreshScoreTypeEnumHistory);
  uint64_t v109 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v109, (uint64_t)"SearchInterWordSilencePenalty", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchInterWordSilencePenaltyIntHistory);
  uint64_t v119 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v119, (uint64_t)"SearchNodeSkippingType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchNodeSkippingTypeEnumHistory);
  uint64_t v120 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v120, (uint64_t)"SearchRemoveInactiveWordsIntervalFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchRemoveInactiveWordsIntervalFramesIntHistory);
  uint64_t v98 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v98, (uint64_t)"SearchAbortOnNumHistories", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchAbortOnNumHistoriesIntHistory);
  uint64_t v97 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v97, (uint64_t)"SearchAbortOnAllocBytes", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchAbortOnAllocBytesIntHistory);
  unint64_t v96 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v96, (uint64_t)"SearchAbortOnAverageWordsEndingPerFrame", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchAbortOnAverageWordsEndingPerFrameIntHistory);
  unint64_t v95 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v95, (uint64_t)"SearchAbortOnNumRecognizedFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchAbortOnNumRecognizedFramesIntHistory);
  unint64_t v91 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v91, (uint64_t)"SearchLatticeLMRescoringAbortOnTotalNewNodes", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeLMRescoringAbortOnTotalNewNodesIntHistory);
  uint64_t v122 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v122, (uint64_t)"SearchLatticeSilentWordsUseCoarticulation", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeSilentWordsUseCoarticulationBoolHistory);
  unint64_t v104 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v104, (uint64_t)"SearchLatticeAbortOnNumNodes", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeAbortOnNumNodesIntHistory);
  unint64_t v102 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v102, (uint64_t)"SearchLatticeAbortOnNumLinks", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeAbortOnNumLinksIntHistory);
  uint64_t v101 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v101, (uint64_t)"SearchLatticeAbortOnScaledAverageNodesPerFrame", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeAbortOnScaledAverageNodesPerFrameIntHistory);
  long long v100 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v100, (uint64_t)"SearchLatticeAbortOnScaledAverageLinksPerFrame", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeAbortOnScaledAverageLinksPerFrameIntHistory);
  unint64_t v113 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v113, (uint64_t)"SearchTraceLatticeNormalizedThreshFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchTraceLatticeNormalizedThreshFactorDoubleHistory);
  uint64_t v112 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v112, (uint64_t)"SearchTraceLatticeThreshScoreIncrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchTraceLatticeThreshScoreIncrementIntHistory);
  uint64_t v99 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v99, (uint64_t)"SearchLatticeAllowZeroDurationFinalSilence", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeAllowZeroDurationFinalSilenceBoolHistory);
  uint64_t v103 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v103, (uint64_t)"SearchPerWordPenalty", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPerWordPenaltyIntHistory);
  uint64_t v111 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v111, (uint64_t)"SearchWordSeedThreshScoreDecrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchWordSeedThreshScoreDecrementIntHistory);
  uint64_t v110 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v110, (uint64_t)"SearchWordSeedFinalSilenceThreshScoreDecrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchWordSeedFinalSilenceThreshScoreDecrementIntHistory);
  uint64_t v108 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v108, (uint64_t)"SearchWordSeedScoreIncludePrefiltererScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchWordSeedScoreIncludePrefiltererScoreBoolHistory);
  uint64_t v107 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v107, (uint64_t)"SearchWordSeedUnprefilteredUseThreshScoreDecrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchWordSeedUnprefilteredUseThreshScoreDecrementBoolHistory);
  uint64_t v106 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v106, (uint64_t)"SearchEstimateAndPreScoreActivePels", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchEstimateAndPreScoreActivePelsBoolHistory);
  unint64_t v81 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v81, (uint64_t)"SearchActiveWordHasPredecessorPhonemeContext", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveWordHasPredecessorPhonemeContextBoolHistory);
  uint64_t v78 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v78, (uint64_t)"SearchActiveWordHasPredecessorWordContext", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveWordHasPredecessorWordContextBoolHistory);
  unint64_t v76 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v76, (uint64_t)"SearchActiveWordHasMergedGrammarState", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveWordHasMergedGrammarStateBoolHistory);
  unint64_t v75 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v75, (uint64_t)"SearchActiveWordHasMergedLatticeLinkId", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveWordHasMergedLatticeLinkIdBoolHistory);
  unint64_t v74 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v74, (uint64_t)"SearchLatticeTimeConstraintDistanceMaxFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeTimeConstraintDistanceMaxFramesIntHistory);
  unint64_t v69 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v69, (uint64_t)"SearchLatticeTimeConstraintSeedThreshScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeTimeConstraintSeedThreshScoreIntHistory);
  uint64_t v86 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v86, (uint64_t)"SearchLMLimit", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLMLimitEnumHistory);
  uint64_t v85 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v85, (uint64_t)"SearchLMRescoreWithCorrective", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLMRescoreWithCorrectiveBoolHistory);
  unint64_t v79 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v79, (uint64_t)"SearchLMDisallowedLMScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLMDisallowedLMScoreIntHistory);
  unint64_t v80 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v80, (uint64_t)"SearchLMDynamicReadCacheBlocksPerChunk", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLMDynamicReadCacheBlocksPerChunkIntHistory);
  long long v77 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v77, (uint64_t)"SearchLMDynamicReadCacheMaxBlocks", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLMDynamicReadCacheMaxBlocksIntHistory);
  BOOL v70 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v70, (uint64_t)"SearchLMDynamicBigramReadCacheMaxChunksPerRead", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLMDynamicBigramReadCacheMaxChunksPerReadIntHistory);
  uint64_t v72 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v72, (uint64_t)"SearchLMDynamicTrigramReadCacheMaxChunksPerRead", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLMDynamicTrigramReadCacheMaxChunksPerReadIntHistory);
  uint64_t v67 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v67, (uint64_t)"SearchLMDynamicQuadgramReadCacheMaxChunksPerRead", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLMDynamicQuadgramReadCacheMaxChunksPerReadIntHistory);
  uint64_t v64 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v64, (uint64_t)"SearchInitialSilenceToFinalSilenceLMScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchInitialSilenceToFinalSilenceLMScoreIntHistory);
  uint64_t v60 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v60, (uint64_t)"SearchLatticePruneKeepUniquePathsMaxSize", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticePruneKeepUniquePathsMaxSizeIntHistory);
  unint64_t v58 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v58, (uint64_t)"SearchLatticeNodeCreationUseRightWord", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeNodeCreationUseRightWordBoolHistory);
  long long v56 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v56, (uint64_t)"SearchLatticeUseCoarticulation", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeUseCoarticulationBoolHistory);
  unint64_t v93 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v93, (uint64_t)"SearchLatticeUseThresholding", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeUseThresholdingBoolHistory);
  BOOL v90 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v90, (uint64_t)"SearchLatticePreserveAlternateProns", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticePreserveAlternatePronsBoolHistory);
  std::wstring::size_type v84 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v84, (uint64_t)"SearchRecognitionContinuationInterval", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchRecognitionContinuationIntervalIntHistory);
  std::wstring::pointer v83 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v83, (uint64_t)"SearchRecognitionBatchProcessing", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchRecognitionBatchProcessingBoolHistory);
  uint64_t v71 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v71, (uint64_t)"SearchNonAcousticWordLMThreshScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchNonAcousticWordLMThreshScoreIntHistory);
  unint64_t v68 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v68, (uint64_t)"SearchNonAcousticWordEndThreshScoreIncrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchNonAcousticWordEndThreshScoreIncrementIntHistory);
  long long v65 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v65, (uint64_t)"SearchNonAcousticWordAndSuccessorLMThreshScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchNonAcousticWordAndSuccessorLMThreshScoreIntHistory);
  uint64_t v66 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v66, (uint64_t)"SearchNonAcousticWordSeedThreshScoreIncrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchNonAcousticWordSeedThreshScoreIncrementIntHistory);
  unint64_t v94 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v94, (uint64_t)"SearchGenerateConstraintLattice", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchGenerateConstraintLatticeBoolHistory);
  unint64_t v92 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v92, (uint64_t)"SearchConstraintLatticePreserveTimes", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConstraintLatticePreserveTimesBoolHistory);
  uint64_t v89 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v89, (uint64_t)"SearchConstraintLatticeMaxSyntheticSilenceFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConstraintLatticeMaxSyntheticSilenceFramesIntHistory);
  uint64_t v88 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v88, (uint64_t)"SearchConstraintLatticeMergeNodeMaxFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConstraintLatticeMergeNodeMaxFramesIntHistory);
  unsigned int v61 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v61, (uint64_t)"SearchLatticeComputeOnlyBestPath", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeComputeOnlyBestPathBoolHistory);
  uint64_t v63 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v63, (uint64_t)"SearchThreshScoreWhenSilenceBest", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchThreshScoreWhenSilenceBestIntHistory);
  char v62 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v62, (uint64_t)"SearchThreshScoreIncrementWhenNonSilenceBest", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchThreshScoreIncrementWhenNonSilenceBestIntHistory);
  long long v54 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v54, (uint64_t)"SearchFinalSilenceThreshScoreIncrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchFinalSilenceThreshScoreIncrementIntHistory);
  int v87 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v87, (uint64_t)"SearchActiveCountLimitScoreCompareWithBeam", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveCountLimitScoreCompareWithBeamBoolHistory);
  uint64_t v52 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v52, (uint64_t)"SearchActiveNodeCountLimit", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveNodeCountLimitIntHistory);
  uint64_t v51 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v51, (uint64_t)"SearchActiveNodePreserveMultipleHistories", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveNodePreserveMultipleHistoriesBoolHistory);
  int v50 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v50, (uint64_t)"SearchActiveSequenceCountLimit", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchActiveSequenceCountLimitIntHistory);
  long long v55 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v55, (uint64_t)"SearchWordEndThreshScoreDecrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchWordEndThreshScoreDecrementIntHistory);
  uint64_t v53 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v53, (uint64_t)"SearchWordEndAgainstBestWordEndThreshScoreDecrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchWordEndAgainstBestWordEndThreshScoreDecrementIntHistory);
  int v82 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v82, (uint64_t)"SearchWordEndAgainstPrevBestNodeThreshScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchWordEndAgainstPrevBestNodeThreshScoreIntHistory);
  unint64_t v49 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v49, (uint64_t)"SearchLatticeNormalizedThreshFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeNormalizedThreshFactorDoubleHistory);
  uint64_t v48 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v48, (uint64_t)"SearchLatticeThreshScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeThreshScoreIntHistory);
  uint64_t v73 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v73, (uint64_t)"SearchLatticeLinksPerSecondLimit", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeLinksPerSecondLimitIntHistory);
  uint64_t v45 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v45, (uint64_t)"SearchLatticePruneLinksPerSecondLimit", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticePruneLinksPerSecondLimitIntHistory);
  long long v38 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v38, (uint64_t)"SearchLatticeBestCrumbDistanceMaxFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeBestCrumbDistanceMaxFramesIntHistory);
  long long v36 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v36, (uint64_t)"SearchLatticeBestCrumbThreshScoreIncrement", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeBestCrumbThreshScoreIncrementIntHistory);
  v0 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v0, (uint64_t)"SearchLatticeComputeOnlyBestTimes", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchLatticeComputeOnlyBestTimesBoolHistory);
  uint64_t v40 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v40, (uint64_t)"SearchStateUsePrefiltererMinNumWords", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchStateUsePrefiltererMinNumWordsIntHistory);
  int v21 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v21, (uint64_t)"SearchConTransAccStartFrame", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConTransAccStartFrameIntHistory);
  int v18 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v18, (uint64_t)"SearchConTransAccRampFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConTransAccRampFramesIntHistory);
  int v15 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v15, (uint64_t)"SearchConTransAccMaxSilenceFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConTransAccMaxSilenceFramesIntHistory);
  int v11 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v11, (uint64_t)"SearchConTransAccFactorList", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConTransAccFactorListStringHistory);
  uint64_t v1 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v1, (uint64_t)"SearchConTransAccDecayFrequency", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConTransAccDecayFrequencyIntHistory);
  uint64_t v2 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v2, (uint64_t)"SearchConTransAccDecayFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchConTransAccDecayFactorDoubleHistory);
  long long v35 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v35, (uint64_t)"SearchPrefilterResultUseCrumbBank", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPrefilterResultUseCrumbBankBoolHistory);
  uint64_t v34 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v34, (uint64_t)"SearchPrefilterResultUseCrumbBankDistanceMaxFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPrefilterResultUseCrumbBankDistanceMaxFramesIntHistory);
  uint64_t v33 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v33, (uint64_t)"SearchSegmentAllNets", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchSegmentAllNetsBoolHistory);
  uint64_t v42 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v42, (uint64_t)"SearchHierScorerBeamList", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchHierScorerBeamListStringHistory);
  long long v57 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v57, (uint64_t)"SearchHierScorerCutoffList", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchHierScorerCutoffListStringHistory);
  uint64_t v47 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v47, (uint64_t)"SearchHierScorerCutoffRatioList", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchHierScorerCutoffRatioListStringHistory);
  long long v37 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v37, (uint64_t)"SearchHierInactiveComponentScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchHierInactiveComponentScoreIntHistory);
  unint64_t v59 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v59, (uint64_t)"SearchUsesFst", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchUsesFstBoolHistory);
  uint64_t v32 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v32, (uint64_t)"FstCoreBeam", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreBeamDoubleHistory);
  long long v31 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v31, (uint64_t)"FstCoreLatticeBeam", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreLatticeBeamDoubleHistory);
  uint64_t v43 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v43, (uint64_t)"FstCoreLateLatticeArcFingerSuckPenalty", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreLateLatticeArcFingerSuckPenaltyDoubleHistory);
  long long v29 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v29, (uint64_t)"FstCoreMaxActive", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreMaxActiveIntHistory);
  unint64_t v27 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v27, (uint64_t)"FstCoreNBest", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreNBestIntHistory);
  unint64_t v26 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v26, (uint64_t)"FstCoreHashPropagateBestTokensFirst", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreHashPropagateBestTokensFirstIntHistory);
  unint64_t v25 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v25, (uint64_t)"FstCoreRepeatFrame", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreRepeatFrameBoolHistory);
  unint64_t v46 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v46, (uint64_t)"FstCoreSearchType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreSearchTypeEnumHistory);
  long long v28 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v28, (uint64_t)"FstCoreLatticeGeneration", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreLatticeGenerationEnumHistory);
  uint64_t v44 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v44, (uint64_t)"FstCorePelScoreScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCorePelScoreScaleDoubleHistory);
  uint64_t v23 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v23, (uint64_t)"FstCoreGenerateLeafLattice", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreGenerateLeafLatticeBoolHistory);
  long long v39 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v39, (uint64_t)"FstCoreAttilaLatticeOutputFileNamePrefix", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreAttilaLatticeOutputFileNamePrefixStringHistory);
  uint64_t v41 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v41, (uint64_t)"FstCorePerWordPenalty", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCorePerWordPenaltyIntHistory);
  uint64_t v22 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v22, (uint64_t)"SearchDisableHierarchicalScorer", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchDisableHierarchicalScorerBoolHistory);
  unint64_t v20 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v20, (uint64_t)"SearchDisableGPUScorer", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchDisableGPUScorerBoolHistory);
  int v19 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v19, (uint64_t)"FstCoreUseDurationModel", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreUseDurationModelBoolHistory);
  long long v30 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v30, (uint64_t)"FstCoreGenerateLattice", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreGenerateLatticeBoolHistory);
  uint64_t v17 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v17, (uint64_t)"FstCoreHashTokens", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreHashTokensBoolHistory);
  uint64_t v16 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v16, (uint64_t)"FstCoreUseFwdBwdAlgorithm", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreUseFwdBwdAlgorithmBoolHistory);
  unint64_t v14 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v14, (uint64_t)"FstCoreLockPelScoreCache", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreLockPelScoreCacheBoolHistory);
  int v13 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v13, (uint64_t)"FstCoreCollectTracesPeriod", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreCollectTracesPeriodIntHistory);
  unint64_t v12 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v12, (uint64_t)"FstCoreBackoffThreshScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sFstCoreBackoffThreshScoreIntHistory);
  int v24 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v24, (uint64_t)"SearchPartialExtendWithPrefilterer", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPartialExtendWithPrefiltererBoolHistory);
  uint64_t v3 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v3, (uint64_t)"SearchPartialIncludePrefiltererResult", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPartialIncludePrefiltererResultEnumHistory);
  unint64_t v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"SearchPartialIncompleteMaxWords", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPartialIncompleteMaxWordsIntHistory);
  unint64_t v5 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v5, (uint64_t)"SearchPartialIncompleteMinListFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPartialIncompleteMinListFramesIntHistory);
  uint64_t v6 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v6, (uint64_t)"SearchPartialIncompleteMinWordFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPartialIncompleteMinWordFramesIntHistory);
  uint64_t v7 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v7, (uint64_t)"SearchPartialCompleteMinWordFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPartialCompleteMinWordFramesIntHistory);
  size_t v8 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v8, (uint64_t)"SearchPartialRegularMinWordFrames", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sSearchPartialRegularMinWordFramesIntHistory);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v91);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v60);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v58);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v56);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v97);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v96);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v98);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v95);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v81);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v78);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v76);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v75);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v69);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v74);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v105);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v118);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v117);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v114);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v116);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v115);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v64);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v109);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v79);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v70);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v67);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v80);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v77);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v72);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v86);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v85);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v52);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v51);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v50);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v54);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v38);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v36);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v61);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v100);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v101);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v102);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v104);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v45);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v49);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v48);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v99);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v40);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v62);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v63);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v53);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v55);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v119);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v65);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v68);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v71);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v66);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v121);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v127);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v126);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v103);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v35);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v34);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v33);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v83);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v84);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v120);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v113);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v112);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v123);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v125);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v124);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v110);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v108);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v111);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v107);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v106);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v42);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v37);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v32);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v31);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v29);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v27);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v26);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v25);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v23);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v90);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v122);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v93);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v22);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v47);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v28);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v43);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v87);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v128);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v89);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v88);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v92);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v94);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v57);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v73);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v82);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v39);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v46);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v30);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v44);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v129);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v41);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v24);
  ParamSpecMgr::addParam(qword_26AB82A90, (ParamSpec *)v59);
  unint64_t v9 = (ParamSpecMgr *)qword_26AB82A90;

  return ParamSpecMgr::sortParams(v9);
}

_DWORD *SearchParamSet::SearchParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(void *)a1 = &unk_26C4E0690;
  DgnString::DgnString((DgnString *)(a1 + 26));
  DgnString::DgnString((DgnString *)(a1 + 98));
  DgnString::DgnString((DgnString *)(a1 + 114));
  (*(void (**)(_DWORD *))(*(void *)a1 + 16))(a1);
  return a1;
}

void sub_213F0D50C(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  DgnString::~DgnString(v7);
  DgnString::~DgnString(v5);
  DgnString::~DgnString(v4);
  void *v1 = v2;
  DgnString::~DgnString(v3);
  _Unwind_Resume(a1);
}

uint64_t SearchParamSet::SearchParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)a1 = &unk_26C4E0690;
  DgnString::DgnString((DgnString *)(a1 + 104));
  DgnString::DgnString((DgnString *)(a1 + 392));
  DgnString::DgnString((DgnString *)(a1 + 456));
  *(unsigned char *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 76) = *(void *)(a2 + 76);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(_DWORD *)(a2 + 96);
  DgnString::operator=((DgnString *)(a1 + 104), (DgnString *)(a2 + 104));
  *(_OWORD *)(a1 + 12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(unsigned char *)(a2 + 196);
  *(_DWORD *)(a1 + 20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 204) = *(unsigned char *)(a2 + 204);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(void *)(a2 + 248);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(unsigned char *)(a1 + 26pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(unsigned char *)(a2 + 260);
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 28pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)(a2 + 280);
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(void *)(a2 + 296);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 32pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(unsigned char *)(a2 + 320);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(_DWORD *)(a1 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(_DWORD *)(a2 + 332);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(unsigned char *)(a1 + 337) = *(unsigned char *)(a2 + 337);
  *(_DWORD *)(a1 + 34pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  uint64_t v11 = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 36pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v11;
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(unsigned char *)(a1 + 369) = *(unsigned char *)(a2 + 369);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(_DWORD *)(a1 + 38pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(a2 + 380);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(unsigned char *)(a1 + 385) = *(unsigned char *)(a2 + 385);
  DgnString::operator=((DgnString *)(a1 + 392), (DgnString *)(a2 + 392));
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)(a2 + 432);
  *(_DWORD *)(a1 + 44pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a2 + 444);
  *(_WORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_WORD *)(a2 + 448);
  *(unsigned char *)(a1 + 45pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(unsigned char *)(a2 + 450);
  DgnString::operator=((DgnString *)(a1 + 456), (DgnString *)(a2 + 456));
  *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
  *(_DWORD *)(a1 + 476) = *(_DWORD *)(a2 + 476);
  *(unsigned char *)(a1 + 48pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(unsigned char *)(a2 + 480);
  *(_WORD *)(a1 + 481) = *(_WORD *)(a2 + 481);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(_OWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  return a1;
}

void sub_213F0D834(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v5);
  DgnString::~DgnString(v4);
  void *v1 = v2;
  DgnString::~DgnString(v3);
  _Unwind_Resume(a1);
}

uint64_t SearchParamSet::setDefaults(SearchParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 2, 0, 0, v9, v10, v11, v12);
  *((_DWORD *)this + 12) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 3, 0, 0, v13, v14, v15, v16);
  *((unsigned char *)this + 52) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 4, 0, 0, v17, v18, v19, v20);
  *((unsigned char *)this + 53) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 14) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 6, 0, 0, v25, v26, v27, v28);
  *((_DWORD *)this + 15) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 7, 0, 0, v29, v30, v31, v32);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 8, 0, 0, v33, v34, v35, v36);
  *((_DWORD *)this + 17) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 9, 0, 0, v37, v38, v39, v40);
  *((unsigned char *)this + 72) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 10, 0, 0, v41, v42, v43, v44);
  *((unsigned char *)this + 73) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 11, 0, 0, v45, v46, v47, v48);
  *((unsigned char *)this + 74) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 12, 0, 0, v49, v50, v51, v52);
  *((unsigned char *)this + 75) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 13, 0, 0, v53, v54, v55, v56);
  *((_DWORD *)this + 19) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 14, 0, 0, v57, v58, v59, v60);
  *((_DWORD *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 15, 0, 0, v61, v62, v63, v64);
  *((_DWORD *)this + 21) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 16, 0, 0, v65, v66, v67, v68);
  *((double *)this + 11) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 17, 0, 0, v69, v70, v71, v72);
  *((_DWORD *)this + 24) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 18, 0, 0, v73, v74, v75, v76);
  Default_string = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_26AB82A90, 19, 0, 0, v77, v78, v79, v80);
  DgnString::operator=((SearchParamSet *)((char *)this + 104), Default_string);
  *((_DWORD *)this + 3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 20, 0, 0, v82, v83, v84, v85);
  *((_DWORD *)this + 31) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 21, 0, 0, v86, v87, v88, v89);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 22, 0, 0, v90, v91, v92, v93);
  *((_DWORD *)this + 33) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A90, 23, v94, v95, v96, v97, v98, v99);
  *((double *)this + 17) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 24, 0, 0, v100, v101, v102, v103);
  *((double *)this + 18) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 25, 0, 0, v104, v105, v106, v107);
  *((_DWORD *)this + 38) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A90, 26, v108, v109, v110, v111, v112, v113);
  *((_DWORD *)this + 39) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A90, 27, v114, v115, v116, v117, v118, v119);
  *((_DWORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 28, 0, 0, v120, v121, v122, v123);
  *((_DWORD *)this + 41) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 29, 0, 0, v124, v125, v126, v127);
  *((_DWORD *)this + 42) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 30, 0, 0, v128, v129, v130, v131);
  *((_DWORD *)this + 43) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 31, 0, 0, v132, v133, v134, v135);
  *((_DWORD *)this + 44) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 32, 0, 0, v136, v137, v138, v139);
  *((_DWORD *)this + 45) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 33, 0, 0, v140, v141, v142, v143);
  *((_DWORD *)this + 46) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 34, 0, 0, v144, v145, v146, v147);
  *((_DWORD *)this + 47) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 35, 0, 0, v148, v149, v150, v151);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A90, 36, v152, v153, v154, v155, v156, v157);
  *((unsigned char *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 37, 0, 0, v158, v159, v160, v161);
  *((_DWORD *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 38, 0, 0, v162, v163, v164, v165);
  *((unsigned char *)this + 204) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 39, 0, 0, v166, v167, v168, v169);
  *((_DWORD *)this + 52) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 40, 0, 0, v170, v171, v172, v173);
  *((_DWORD *)this + 53) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 41, 0, 0, v174, v175, v176, v177);
  *((_DWORD *)this + 54) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 42, 0, 0, v178, v179, v180, v181);
  *((_DWORD *)this + 55) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 43, 0, 0, v182, v183, v184, v185);
  *((unsigned char *)this + 224) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 44, 0, 0, v186, v187, v188, v189);
  *((_DWORD *)this + 57) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 45, 0, 0, v190, v191, v192, v193);
  *((_DWORD *)this + 58) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 46, 0, 0, v194, v195, v196, v197);
  *((_DWORD *)this + 59) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 47, 0, 0, v198, v199, v200, v201);
  *((_DWORD *)this + 6pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 48, 0, 0, v202, v203, v204, v205);
  *((_DWORD *)this + 61) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 49, 0, 0, v206, v207, v208, v209);
  *((double *)this + 31) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 50, 0, 0, v210, v211, v212, v213);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 51, 0, 0, v214, v215, v216, v217);
  *((unsigned char *)this + 26pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 52, 0, 0, v218, v219, v220, v221);
  *((_DWORD *)this + 66) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 53, 0, 0, v222, v223, v224, v225);
  *((_DWORD *)this + 67) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 54, 0, 0, v226, v227, v228, v229);
  *((_DWORD *)this + 68) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 55, 0, 0, v230, v231, v232, v233);
  *((_DWORD *)this + 69) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 56, 0, 0, v234, v235, v236, v237);
  *((_DWORD *)this + 7pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 57, 0, 0, v238, v239, v240, v241);
  *((_DWORD *)this + 71) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A90, 58, v242, v243, v244, v245, v246, v247);
  *((_DWORD *)this + 72) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 59, 0, 0, v248, v249, v250, v251);
  *((_DWORD *)this + 73) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 60, 0, 0, v252, v253, v254, v255);
  *((_DWORD *)this + 74) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 61, 0, 0, v256, v257, v258, v259);
  *((_DWORD *)this + 75) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 62, 0, 0, v260, v261, v262, v263);
  *((_DWORD *)this + 76) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 63, 0, 0, v264, v265, v266, v267);
  *((double *)this + 39) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 64, 0, 0, v268, v269, v270, v271);
  *((unsigned char *)this + 32pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 65, 0, 0, v272, v273, v274, v275);
  *((_DWORD *)this + 81) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 66, 0, 0, v276, v277, v278, v279);
  *((unsigned char *)this + 328) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 67, 0, 0, v280, v281, v282, v283);
  *((_DWORD *)this + 83) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 68, 0, 0, v284, v285, v286, v287);
  *((unsigned char *)this + 336) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 69, 0, 0, v288, v289, v290, v291);
  *((unsigned char *)this + 337) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 70, 0, 0, v292, v293, v294, v295);
  *((_DWORD *)this + 85) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 71, 0, 0, v296, v297, v298, v299);
  *((_DWORD *)this + 86) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 72, 0, 0, v300, v301, v302, v303);
  *((double *)this + 44) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 73, 0, 0, v304, v305, v306, v307);
  *((_DWORD *)this + 9pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 74, 0, 0, v308, v309, v310, v311);
  *((_DWORD *)this + 91) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 75, 0, 0, v312, v313, v314, v315);
  *((unsigned char *)this + 368) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 76, 0, 0, v316, v317, v318, v319);
  *((unsigned char *)this + 369) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 77, 0, 0, v320, v321, v322, v323);
  *((_DWORD *)this + 93) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 78, 0, 0, v324, v325, v326, v327);
  *((unsigned char *)this + 376) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 79, 0, 0, v328, v329, v330, v331);
  *((_DWORD *)this + 95) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 80, 0, 0, v332, v333, v334, v335);
  *((unsigned char *)this + 384) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 81, 0, 0, v336, v337, v338, v339);
  *((unsigned char *)this + 385) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 82, 0, 0, v340, v341, v342, v343);
  uint64_t v348 = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_26AB82A90, 83, 0, 0, v344, v345, v346, v347);
  DgnString::operator=((SearchParamSet *)((char *)this + 392), v348);
  *((_DWORD *)this + 102) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 84, 0, 0, v349, v350, v351, v352);
  *((double *)this + 52) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 85, 0, 0, v353, v354, v355, v356);
  *((double *)this + 53) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 86, 0, 0, v357, v358, v359, v360);
  *((_DWORD *)this + 108) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 87, 0, 0, v361, v362, v363, v364);
  *((_DWORD *)this + 109) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 88, 0, 0, v365, v366, v367, v368);
  *((_DWORD *)this + 11pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 89, 0, 0, v369, v370, v371, v372);
  *((unsigned char *)this + 444) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 90, 0, 0, v373, v374, v375, v376);
  *((unsigned char *)this + 445) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 91, 0, 0, v377, v378, v379, v380);
  *((unsigned char *)this + 446) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 92, 0, 0, v381, v382, v383, v384);
  *((unsigned char *)this + 447) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 93, 0, 0, v385, v386, v387, v388);
  *((unsigned char *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 94, 0, 0, v389, v390, v391, v392);
  *((unsigned char *)this + 449) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 95, 0, 0, v393, v394, v395, v396);
  *((unsigned char *)this + 45pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 96, 0, 0, v397, v398, v399, v400);
  uint64_t v405 = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_26AB82A90, 97, 0, 0, v401, v402, v403, v404);
  DgnString::operator=((SearchParamSet *)((char *)this + 456), v405);
  *((unsigned char *)this + 472) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 98, 0, 0, v406, v407, v408, v409);
  *((_DWORD *)this + 119) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A90, 99, v410, v411, v412, v413, v414, v415);
  *((unsigned char *)this + 48pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 100, 0, 0, v416, v417, v418, v419);
  *((unsigned char *)this + 481) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 101, 0, 0, v420, v421, v422, v423);
  *((unsigned char *)this + 482) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A90, 102, 0, 0, v424, v425, v426, v427);
  *((double *)this + 61) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A90, 103, 0, 0, v428, v429, v430, v431);
  *((_DWORD *)this + 124) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 104, 0, 0, v432, v433, v434, v435);
  *((_DWORD *)this + 125) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 105, 0, 0, v436, v437, v438, v439);
  *((_DWORD *)this + 126) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A90, 106, v440, v441, v442, v443, v444, v445);
  *((_DWORD *)this + 127) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 107, 0, 0, v446, v447, v448, v449);
  *((_DWORD *)this + 128) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 108, 0, 0, v450, v451, v452, v453);
  *((_DWORD *)this + 129) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 109, 0, 0, v454, v455, v456, v457);
  *((_DWORD *)this + 13pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 110, 0, 0, v458, v459, v460, v461);
  uint64_t result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A90, 111, 0, 0, v462, v463, v464, v465);
  *((_DWORD *)this + 131) = result;
  return result;
}

uint64_t SearchParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v5 = sizeObject(a1 + 104);
    uint64_t v6 = sizeObject(a1 + 392);
    uint64_t v7 = sizeObject(a1 + 456);
    uint64_t v8 = 11;
    if (a2 == 3) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = 20;
    if (a2 == 3) {
      uint64_t v9 = 0;
    }
    v4 += v9 + 40 * (a2 != 3) + v8 + 56 * (a2 != 3) + 248 * (a2 != 3) + v5 + v6 + v7;
  }
  return v4;
}

void SearchParamSet::setParamSetSearchConTransAccFactorList(SearchParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9)) {
    throwParamSetSetFailed("SearchConTransAccFactorList", "string", a3, a4, a5, a6, a7, a8);
  }
  else {
    DgnString::operator=((SearchParamSet *)((char *)this + 104), a2);
  }
}

void SearchParamSet::setParamSetSearchHierScorerBeamList(SearchParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9)) {
    throwParamSetSetFailed("SearchHierScorerBeamList", "string", a3, a4, a5, a6, a7, a8);
  }
  else {
    DgnString::operator=((SearchParamSet *)((char *)this + 392), a2);
  }
}

void SearchParamSet::setParamSetSearchHierScorerCutoffRatioList(SearchParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9)) {
    throwParamSetSetFailed("SearchHierScorerCutoffRatioList", "string", a3, a4, a5, a6, a7, a8);
  }
  else {
    DgnString::operator=((SearchParamSet *)((char *)this + 456), a2);
  }
}

BOOL SearchParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 1;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[40];
      return v8 != 0;
    case 2:
      uint64_t v9 = "int";
      char v10 = 2;
      goto LABEL_173;
    case 3:
      uint64_t v9 = "int";
      char v10 = 3;
      goto LABEL_173;
    case 4:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 4;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[52];
      return v8 != 0;
    case 5:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 5;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[53];
      return v8 != 0;
    case 6:
      uint64_t v9 = "int";
      char v10 = 6;
      goto LABEL_173;
    case 7:
      uint64_t v9 = "int";
      char v10 = 7;
      goto LABEL_173;
    case 8:
      uint64_t v9 = "int";
      char v10 = 8;
      goto LABEL_173;
    case 9:
      uint64_t v9 = "int";
      char v10 = 9;
      goto LABEL_173;
    case 10:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 10;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[72];
      return v8 != 0;
    case 11:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 11;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[73];
      return v8 != 0;
    case 12:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 12;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[74];
      return v8 != 0;
    case 13:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 13;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[75];
      return v8 != 0;
    case 14:
      uint64_t v9 = "int";
      char v10 = 14;
      goto LABEL_173;
    case 15:
      uint64_t v9 = "int";
      char v10 = 15;
      goto LABEL_173;
    case 16:
      uint64_t v9 = "int";
      char v10 = 16;
      goto LABEL_173;
    case 17:
      uint64_t v9 = "double";
      char v10 = 17;
      goto LABEL_173;
    case 18:
      uint64_t v9 = "int";
      char v10 = 18;
      goto LABEL_173;
    case 19:
      uint64_t v9 = "string";
      char v10 = 19;
      goto LABEL_173;
    case 20:
      uint64_t v9 = "int";
      char v10 = 20;
      goto LABEL_173;
    case 21:
      uint64_t v9 = "int";
      char v10 = 21;
      goto LABEL_173;
    case 22:
      uint64_t v9 = "int";
      char v10 = 22;
      goto LABEL_173;
    case 23:
      uint64_t v9 = "enum";
      char v10 = 23;
      goto LABEL_173;
    case 24:
      uint64_t v9 = "double";
      char v10 = 24;
      goto LABEL_173;
    case 25:
      uint64_t v9 = "double";
      char v10 = 25;
      goto LABEL_173;
    case 26:
      uint64_t v9 = "enum";
      char v10 = 26;
      goto LABEL_173;
    case 27:
      uint64_t v9 = "enum";
      char v10 = 27;
      goto LABEL_173;
    case 28:
      uint64_t v9 = "int";
      char v10 = 28;
      goto LABEL_173;
    case 29:
      uint64_t v9 = "int";
      char v10 = 29;
      goto LABEL_173;
    case 30:
      uint64_t v9 = "int";
      char v10 = 30;
      goto LABEL_173;
    case 31:
      uint64_t v9 = "int";
      char v10 = 31;
      goto LABEL_173;
    case 32:
      uint64_t v9 = "int";
      char v10 = 32;
      goto LABEL_173;
    case 33:
      uint64_t v9 = "int";
      char v10 = 33;
      goto LABEL_173;
    case 34:
      uint64_t v9 = "int";
      char v10 = 34;
      goto LABEL_173;
    case 35:
      uint64_t v9 = "int";
      char v10 = 35;
      goto LABEL_173;
    case 36:
      uint64_t v9 = "enum";
      char v10 = 36;
      goto LABEL_173;
    case 37:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 37;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[196];
      return v8 != 0;
    case 38:
      uint64_t v9 = "int";
      char v10 = 38;
      goto LABEL_173;
    case 39:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 39;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[204];
      return v8 != 0;
    case 40:
      uint64_t v9 = "int";
      char v10 = 40;
      goto LABEL_173;
    case 41:
      uint64_t v9 = "int";
      char v10 = 41;
      goto LABEL_173;
    case 42:
      uint64_t v9 = "int";
      char v10 = 42;
      goto LABEL_173;
    case 43:
      uint64_t v9 = "int";
      char v10 = 43;
      goto LABEL_173;
    case 44:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 44;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[224];
      return v8 != 0;
    case 45:
      uint64_t v9 = "int";
      char v10 = 45;
      goto LABEL_173;
    case 46:
      uint64_t v9 = "int";
      char v10 = 46;
      goto LABEL_173;
    case 47:
      uint64_t v9 = "int";
      char v10 = 47;
      goto LABEL_173;
    case 48:
      uint64_t v9 = "int";
      char v10 = 48;
      goto LABEL_173;
    case 49:
      uint64_t v9 = "int";
      char v10 = 49;
      goto LABEL_173;
    case 50:
      uint64_t v9 = "double";
      char v10 = 50;
      goto LABEL_173;
    case 51:
      uint64_t v9 = "int";
      char v10 = 51;
      goto LABEL_173;
    case 52:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 52;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[260];
      return v8 != 0;
    case 53:
      uint64_t v9 = "int";
      char v10 = 53;
      goto LABEL_173;
    case 54:
      uint64_t v9 = "int";
      char v10 = 54;
      goto LABEL_173;
    case 55:
      uint64_t v9 = "int";
      char v10 = 55;
      goto LABEL_173;
    case 56:
      uint64_t v9 = "int";
      char v10 = 56;
      goto LABEL_173;
    case 57:
      uint64_t v9 = "int";
      char v10 = 57;
      goto LABEL_173;
    case 58:
      uint64_t v9 = "enum";
      char v10 = 58;
      goto LABEL_173;
    case 59:
      uint64_t v9 = "int";
      char v10 = 59;
      goto LABEL_173;
    case 60:
      uint64_t v9 = "int";
      char v10 = 60;
      goto LABEL_173;
    case 61:
      uint64_t v9 = "int";
      char v10 = 61;
      goto LABEL_173;
    case 62:
      uint64_t v9 = "int";
      char v10 = 62;
      goto LABEL_173;
    case 63:
      uint64_t v9 = "int";
      char v10 = 63;
      goto LABEL_173;
    case 64:
      uint64_t v9 = "double";
      char v10 = 64;
      goto LABEL_173;
    case 65:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 65;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[320];
      return v8 != 0;
    case 66:
      uint64_t v9 = "int";
      char v10 = 66;
      goto LABEL_173;
    case 67:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 67;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[328];
      return v8 != 0;
    case 68:
      uint64_t v9 = "int";
      char v10 = 68;
      goto LABEL_173;
    case 69:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 69;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[336];
      return v8 != 0;
    case 70:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 70;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[337];
      return v8 != 0;
    case 71:
      uint64_t v9 = "int";
      char v10 = 71;
      goto LABEL_173;
    case 72:
      uint64_t v9 = "int";
      char v10 = 72;
      goto LABEL_173;
    case 73:
      uint64_t v9 = "double";
      char v10 = 73;
      goto LABEL_173;
    case 74:
      uint64_t v9 = "int";
      char v10 = 74;
      goto LABEL_173;
    case 75:
      uint64_t v9 = "int";
      char v10 = 75;
      goto LABEL_173;
    case 76:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 76;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[368];
      return v8 != 0;
    case 77:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 77;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[369];
      return v8 != 0;
    case 78:
      uint64_t v9 = "int";
      char v10 = 78;
      goto LABEL_173;
    case 79:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 79;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[376];
      return v8 != 0;
    case 80:
      uint64_t v9 = "int";
      char v10 = 80;
      goto LABEL_173;
    case 81:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 81;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[384];
      return v8 != 0;
    case 82:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 82;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[385];
      return v8 != 0;
    case 83:
      uint64_t v9 = "string";
      char v10 = 83;
      goto LABEL_173;
    case 84:
      uint64_t v9 = "int";
      char v10 = 84;
      goto LABEL_173;
    case 85:
      uint64_t v9 = "double";
      char v10 = 85;
      goto LABEL_173;
    case 86:
      uint64_t v9 = "double";
      char v10 = 86;
      goto LABEL_173;
    case 87:
      uint64_t v9 = "int";
      char v10 = 87;
      goto LABEL_173;
    case 88:
      uint64_t v9 = "int";
      char v10 = 88;
      goto LABEL_173;
    case 89:
      uint64_t v9 = "int";
      char v10 = 89;
      goto LABEL_173;
    case 90:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 90;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[444];
      return v8 != 0;
    case 91:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 91;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[445];
      return v8 != 0;
    case 92:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 92;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[446];
      return v8 != 0;
    case 93:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 93;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[447];
      return v8 != 0;
    case 94:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 94;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[448];
      return v8 != 0;
    case 95:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 95;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[449];
      return v8 != 0;
    case 96:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 96;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[450];
      return v8 != 0;
    case 97:
      uint64_t v9 = "string";
      char v10 = 97;
      goto LABEL_173;
    case 98:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 98;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[472];
      return v8 != 0;
    case 99:
      uint64_t v9 = "enum";
      char v10 = 99;
      goto LABEL_173;
    case 100:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 100;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[480];
      return v8 != 0;
    case 101:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 101;
        goto LABEL_211;
      }
      if (a3) {
        goto LABEL_179;
      }
      int v8 = a1[481];
      return v8 != 0;
    case 102:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A90;
        int v13 = 102;
LABEL_211:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!a3)
      {
        int v8 = a1[482];
        return v8 != 0;
      }
LABEL_179:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 103:
      uint64_t v9 = "double";
      char v10 = 103;
      goto LABEL_173;
    case 104:
      uint64_t v9 = "int";
      char v10 = 104;
      goto LABEL_173;
    case 105:
      uint64_t v9 = "int";
      char v10 = 105;
      goto LABEL_173;
    case 106:
      uint64_t v9 = "enum";
      char v10 = 106;
      goto LABEL_173;
    case 107:
      uint64_t v9 = "int";
      char v10 = 107;
      goto LABEL_173;
    case 108:
      uint64_t v9 = "int";
      char v10 = 108;
      goto LABEL_173;
    case 109:
      uint64_t v9 = "int";
      char v10 = 109;
      goto LABEL_173;
    case 110:
      uint64_t v9 = "int";
      char v10 = 110;
      goto LABEL_173;
    case 111:
      uint64_t v9 = "int";
      char v10 = 111;
LABEL_173:
      throwWrongTypeForParamId(v10, v9, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t SearchParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_171;
    case 2:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[11];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 2;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 2;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 2;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 3:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[12];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 3;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 3;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 3;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 4:
      int v8 = "BOOL";
      char v9 = 4;
      goto LABEL_171;
    case 5:
      int v8 = "BOOL";
      char v9 = 5;
      goto LABEL_171;
    case 6:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[14];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 6;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 6;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 6;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 7:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[15];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 7;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 7;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 7;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 8:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[16];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 8;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 8;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 8;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 9:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[17];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 9;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 9;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 9;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 10:
      int v8 = "BOOL";
      char v9 = 10;
      goto LABEL_171;
    case 11:
      int v8 = "BOOL";
      char v9 = 11;
      goto LABEL_171;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_171;
    case 13:
      int v8 = "BOOL";
      char v9 = 13;
      goto LABEL_171;
    case 14:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[19];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 14;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 14;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 14;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 15:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[20];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 15;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 15;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 15;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 16:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[21];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 16;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 16;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 16;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 17:
      int v8 = "double";
      char v9 = 17;
      goto LABEL_171;
    case 18:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[24];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 18;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 18;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 18;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 19:
      int v8 = "string";
      char v9 = 19;
      goto LABEL_171;
    case 20:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[30];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 20;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 20;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 20;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 21:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[31];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 21;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 21;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 21;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 22:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[32];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 22;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 22;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 22;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 23:
      int v8 = "enum";
      char v9 = 23;
      goto LABEL_171;
    case 24:
      int v8 = "double";
      char v9 = 24;
      goto LABEL_171;
    case 25:
      int v8 = "double";
      char v9 = 25;
      goto LABEL_171;
    case 26:
      int v8 = "enum";
      char v9 = 26;
      goto LABEL_171;
    case 27:
      int v8 = "enum";
      char v9 = 27;
      goto LABEL_171;
    case 28:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[40];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 28;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 28;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 28;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 29:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[41];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 29;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 29;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 29;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 30:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[42];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 30;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 30;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 30;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 31:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[43];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 31;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 31;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 31;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 32:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[44];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 32;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 32;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 32;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 33:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[45];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 33;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 33;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 33;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 34:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[46];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 34;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 34;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 34;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 35:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[47];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 35;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 35;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 35;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 36:
      int v8 = "enum";
      char v9 = 36;
      goto LABEL_171;
    case 37:
      int v8 = "BOOL";
      char v9 = 37;
      goto LABEL_171;
    case 38:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[50];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 38;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 38;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 38;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 39:
      int v8 = "BOOL";
      char v9 = 39;
      goto LABEL_171;
    case 40:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[52];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 40;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 40;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 40;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 41:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[53];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 41;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 41;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 41;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 42:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[54];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 42;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 42;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 42;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 43:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[55];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 43;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 43;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 43;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 44:
      int v8 = "BOOL";
      char v9 = 44;
      goto LABEL_171;
    case 45:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[57];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 45;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 45;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 45;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 46:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[58];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 46;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 46;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 46;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 47:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[59];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 47;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 47;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 47;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 48:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[60];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 48;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 48;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 48;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 49:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[61];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 49;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 49;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 49;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 50:
      int v8 = "double";
      char v9 = 50;
      goto LABEL_171;
    case 51:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[64];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 51;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 51;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 51;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 52:
      int v8 = "BOOL";
      char v9 = 52;
      goto LABEL_171;
    case 53:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[66];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 53;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 53;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 53;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 54:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[67];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 54;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 54;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 54;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 55:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[68];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 55;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 55;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 55;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 56:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[69];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 56;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 56;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 56;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 57:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[70];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 57;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 57;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 57;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 58:
      int v8 = "enum";
      char v9 = 58;
      goto LABEL_171;
    case 59:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[72];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 59;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 59;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 59;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 60:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[73];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 60;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 60;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 60;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 61:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[74];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 61;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 61;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 61;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 62:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[75];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 62;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 62;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 62;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 63:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[76];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 63;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 63;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 63;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 64:
      int v8 = "double";
      char v9 = 64;
      goto LABEL_171;
    case 65:
      int v8 = "BOOL";
      char v9 = 65;
      goto LABEL_171;
    case 66:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[81];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 66;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 66;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 66;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 67:
      int v8 = "BOOL";
      char v9 = 67;
      goto LABEL_171;
    case 68:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[83];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 68;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 68;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 68;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 69:
      int v8 = "BOOL";
      char v9 = 69;
      goto LABEL_171;
    case 70:
      int v8 = "BOOL";
      char v9 = 70;
      goto LABEL_171;
    case 71:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[85];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 71;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 71;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 71;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 72:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[86];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 72;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 72;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 72;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 73:
      int v8 = "double";
      char v9 = 73;
      goto LABEL_171;
    case 74:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[90];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 74;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 74;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 74;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 75:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[91];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 75;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 75;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 75;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 76:
      int v8 = "BOOL";
      char v9 = 76;
      goto LABEL_171;
    case 77:
      int v8 = "BOOL";
      char v9 = 77;
      goto LABEL_171;
    case 78:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[93];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 78;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 78;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 78;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 79:
      int v8 = "BOOL";
      char v9 = 79;
      goto LABEL_171;
    case 80:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[95];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 80;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 80;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 80;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 81:
      int v8 = "BOOL";
      char v9 = 81;
      goto LABEL_171;
    case 82:
      int v8 = "BOOL";
      char v9 = 82;
      goto LABEL_171;
    case 83:
      int v8 = "string";
      char v9 = 83;
      goto LABEL_171;
    case 84:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[102];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 84;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 84;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 84;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 85:
      int v8 = "double";
      char v9 = 85;
      goto LABEL_171;
    case 86:
      int v8 = "double";
      char v9 = 86;
      goto LABEL_171;
    case 87:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[108];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 87;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 87;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 87;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 88:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[109];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 88;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 88;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 88;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 89:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[110];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 89;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 89;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 89;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 90:
      int v8 = "BOOL";
      char v9 = 90;
      goto LABEL_171;
    case 91:
      int v8 = "BOOL";
      char v9 = 91;
      goto LABEL_171;
    case 92:
      int v8 = "BOOL";
      char v9 = 92;
      goto LABEL_171;
    case 93:
      int v8 = "BOOL";
      char v9 = 93;
      goto LABEL_171;
    case 94:
      int v8 = "BOOL";
      char v9 = 94;
      goto LABEL_171;
    case 95:
      int v8 = "BOOL";
      char v9 = 95;
      goto LABEL_171;
    case 96:
      int v8 = "BOOL";
      char v9 = 96;
      goto LABEL_171;
    case 97:
      int v8 = "string";
      char v9 = 97;
      goto LABEL_171;
    case 98:
      int v8 = "BOOL";
      char v9 = 98;
      goto LABEL_171;
    case 99:
      int v8 = "enum";
      char v9 = 99;
      goto LABEL_171;
    case 100:
      int v8 = "BOOL";
      char v9 = 100;
      goto LABEL_171;
    case 101:
      int v8 = "BOOL";
      char v9 = 101;
      goto LABEL_171;
    case 102:
      int v8 = "BOOL";
      char v9 = 102;
      goto LABEL_171;
    case 103:
      int v8 = "double";
      char v9 = 103;
      goto LABEL_171;
    case 104:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[124];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 104;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 104;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 104;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 105:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[125];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 105;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 105;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 105;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 106:
      int v8 = "enum";
      char v9 = 106;
LABEL_171:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      return 0;
    case 107:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[127];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 107;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 107;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 107;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 108:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[128];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 108;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 108;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 108;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 109:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[129];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 109;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 109;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 109;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 110:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[130];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 110;
          goto LABEL_364;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 110;
          goto LABEL_360;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 110;
          goto LABEL_362;
        default:
          goto LABEL_178;
      }
      return result;
    case 111:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[131];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 111;
LABEL_364:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 111;
LABEL_360:
          uint64_t v17 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 111;
LABEL_362:
          uint64_t v18 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_178:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

double SearchParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_124;
    case 2:
      int v8 = "int";
      char v9 = 2;
      goto LABEL_124;
    case 3:
      int v8 = "int";
      char v9 = 3;
      goto LABEL_124;
    case 4:
      int v8 = "BOOL";
      char v9 = 4;
      goto LABEL_124;
    case 5:
      int v8 = "BOOL";
      char v9 = 5;
      goto LABEL_124;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_124;
    case 7:
      int v8 = "int";
      char v9 = 7;
      goto LABEL_124;
    case 8:
      int v8 = "int";
      char v9 = 8;
      goto LABEL_124;
    case 9:
      int v8 = "int";
      char v9 = 9;
      goto LABEL_124;
    case 10:
      int v8 = "BOOL";
      char v9 = 10;
      goto LABEL_124;
    case 11:
      int v8 = "BOOL";
      char v9 = 11;
      goto LABEL_124;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_124;
    case 13:
      int v8 = "BOOL";
      char v9 = 13;
      goto LABEL_124;
    case 14:
      int v8 = "int";
      char v9 = 14;
      goto LABEL_124;
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_124;
    case 16:
      int v8 = "int";
      char v9 = 16;
      goto LABEL_124;
    case 17:
      switch((int)a3)
      {
        case 0:
          double result = a1[11];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 17;
          goto LABEL_152;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 17;
          goto LABEL_154;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 17;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 18:
      int v8 = "int";
      char v9 = 18;
      goto LABEL_124;
    case 19:
      int v8 = "string";
      char v9 = 19;
      goto LABEL_124;
    case 20:
      int v8 = "int";
      char v9 = 20;
      goto LABEL_124;
    case 21:
      int v8 = "int";
      char v9 = 21;
      goto LABEL_124;
    case 22:
      int v8 = "int";
      char v9 = 22;
      goto LABEL_124;
    case 23:
      int v8 = "enum";
      char v9 = 23;
      goto LABEL_124;
    case 24:
      switch((int)a3)
      {
        case 0:
          double result = a1[17];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 24;
          goto LABEL_152;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 24;
          goto LABEL_154;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 24;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 25:
      switch((int)a3)
      {
        case 0:
          double result = a1[18];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 25;
          goto LABEL_152;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 25;
          goto LABEL_154;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 25;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 26:
      int v8 = "enum";
      char v9 = 26;
      goto LABEL_124;
    case 27:
      int v8 = "enum";
      char v9 = 27;
      goto LABEL_124;
    case 28:
      int v8 = "int";
      char v9 = 28;
      goto LABEL_124;
    case 29:
      int v8 = "int";
      char v9 = 29;
      goto LABEL_124;
    case 30:
      int v8 = "int";
      char v9 = 30;
      goto LABEL_124;
    case 31:
      int v8 = "int";
      char v9 = 31;
      goto LABEL_124;
    case 32:
      int v8 = "int";
      char v9 = 32;
      goto LABEL_124;
    case 33:
      int v8 = "int";
      char v9 = 33;
      goto LABEL_124;
    case 34:
      int v8 = "int";
      char v9 = 34;
      goto LABEL_124;
    case 35:
      int v8 = "int";
      char v9 = 35;
      goto LABEL_124;
    case 36:
      int v8 = "enum";
      char v9 = 36;
      goto LABEL_124;
    case 37:
      int v8 = "BOOL";
      char v9 = 37;
      goto LABEL_124;
    case 38:
      int v8 = "int";
      char v9 = 38;
      goto LABEL_124;
    case 39:
      int v8 = "BOOL";
      char v9 = 39;
      goto LABEL_124;
    case 40:
      int v8 = "int";
      char v9 = 40;
      goto LABEL_124;
    case 41:
      int v8 = "int";
      char v9 = 41;
      goto LABEL_124;
    case 42:
      int v8 = "int";
      char v9 = 42;
      goto LABEL_124;
    case 43:
      int v8 = "int";
      char v9 = 43;
      goto LABEL_124;
    case 44:
      int v8 = "BOOL";
      char v9 = 44;
      goto LABEL_124;
    case 45:
      int v8 = "int";
      char v9 = 45;
      goto LABEL_124;
    case 46:
      int v8 = "int";
      char v9 = 46;
      goto LABEL_124;
    case 47:
      int v8 = "int";
      char v9 = 47;
      goto LABEL_124;
    case 48:
      int v8 = "int";
      char v9 = 48;
      goto LABEL_124;
    case 49:
      int v8 = "int";
      char v9 = 49;
      goto LABEL_124;
    case 50:
      switch((int)a3)
      {
        case 0:
          double result = a1[31];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 50;
          goto LABEL_152;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 50;
          goto LABEL_154;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 50;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 51:
      int v8 = "int";
      char v9 = 51;
      goto LABEL_124;
    case 52:
      int v8 = "BOOL";
      char v9 = 52;
      goto LABEL_124;
    case 53:
      int v8 = "int";
      char v9 = 53;
      goto LABEL_124;
    case 54:
      int v8 = "int";
      char v9 = 54;
      goto LABEL_124;
    case 55:
      int v8 = "int";
      char v9 = 55;
      goto LABEL_124;
    case 56:
      int v8 = "int";
      char v9 = 56;
      goto LABEL_124;
    case 57:
      int v8 = "int";
      char v9 = 57;
      goto LABEL_124;
    case 58:
      int v8 = "enum";
      char v9 = 58;
      goto LABEL_124;
    case 59:
      int v8 = "int";
      char v9 = 59;
      goto LABEL_124;
    case 60:
      int v8 = "int";
      char v9 = 60;
      goto LABEL_124;
    case 61:
      int v8 = "int";
      char v9 = 61;
      goto LABEL_124;
    case 62:
      int v8 = "int";
      char v9 = 62;
      goto LABEL_124;
    case 63:
      int v8 = "int";
      char v9 = 63;
      goto LABEL_124;
    case 64:
      switch((int)a3)
      {
        case 0:
          double result = a1[39];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 64;
          goto LABEL_152;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 64;
          goto LABEL_154;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 64;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 65:
      int v8 = "BOOL";
      char v9 = 65;
      goto LABEL_124;
    case 66:
      int v8 = "int";
      char v9 = 66;
      goto LABEL_124;
    case 67:
      int v8 = "BOOL";
      char v9 = 67;
      goto LABEL_124;
    case 68:
      int v8 = "int";
      char v9 = 68;
      goto LABEL_124;
    case 69:
      int v8 = "BOOL";
      char v9 = 69;
      goto LABEL_124;
    case 70:
      int v8 = "BOOL";
      char v9 = 70;
      goto LABEL_124;
    case 71:
      int v8 = "int";
      char v9 = 71;
      goto LABEL_124;
    case 72:
      int v8 = "int";
      char v9 = 72;
      goto LABEL_124;
    case 73:
      switch((int)a3)
      {
        case 0:
          double result = a1[44];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 73;
          goto LABEL_152;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 73;
          goto LABEL_154;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 73;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 74:
      int v8 = "int";
      char v9 = 74;
      goto LABEL_124;
    case 75:
      int v8 = "int";
      char v9 = 75;
      goto LABEL_124;
    case 76:
      int v8 = "BOOL";
      char v9 = 76;
      goto LABEL_124;
    case 77:
      int v8 = "BOOL";
      char v9 = 77;
      goto LABEL_124;
    case 78:
      int v8 = "int";
      char v9 = 78;
      goto LABEL_124;
    case 79:
      int v8 = "BOOL";
      char v9 = 79;
      goto LABEL_124;
    case 80:
      int v8 = "int";
      char v9 = 80;
      goto LABEL_124;
    case 81:
      int v8 = "BOOL";
      char v9 = 81;
      goto LABEL_124;
    case 82:
      int v8 = "BOOL";
      char v9 = 82;
      goto LABEL_124;
    case 83:
      int v8 = "string";
      char v9 = 83;
      goto LABEL_124;
    case 84:
      int v8 = "int";
      char v9 = 84;
      goto LABEL_124;
    case 85:
      switch((int)a3)
      {
        case 0:
          double result = a1[52];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 85;
          goto LABEL_152;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 85;
          goto LABEL_154;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 85;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 86:
      switch((int)a3)
      {
        case 0:
          double result = a1[53];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 86;
          goto LABEL_152;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 86;
          goto LABEL_154;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 86;
          goto LABEL_156;
        default:
          goto LABEL_110;
      }
      return result;
    case 87:
      int v8 = "int";
      char v9 = 87;
      goto LABEL_124;
    case 88:
      int v8 = "int";
      char v9 = 88;
      goto LABEL_124;
    case 89:
      int v8 = "int";
      char v9 = 89;
      goto LABEL_124;
    case 90:
      int v8 = "BOOL";
      char v9 = 90;
      goto LABEL_124;
    case 91:
      int v8 = "BOOL";
      char v9 = 91;
      goto LABEL_124;
    case 92:
      int v8 = "BOOL";
      char v9 = 92;
      goto LABEL_124;
    case 93:
      int v8 = "BOOL";
      char v9 = 93;
      goto LABEL_124;
    case 94:
      int v8 = "BOOL";
      char v9 = 94;
      goto LABEL_124;
    case 95:
      int v8 = "BOOL";
      char v9 = 95;
      goto LABEL_124;
    case 96:
      int v8 = "BOOL";
      char v9 = 96;
      goto LABEL_124;
    case 97:
      int v8 = "string";
      char v9 = 97;
      goto LABEL_124;
    case 98:
      int v8 = "BOOL";
      char v9 = 98;
      goto LABEL_124;
    case 99:
      int v8 = "enum";
      char v9 = 99;
      goto LABEL_124;
    case 100:
      int v8 = "BOOL";
      char v9 = 100;
      goto LABEL_124;
    case 101:
      int v8 = "BOOL";
      char v9 = 101;
      goto LABEL_124;
    case 102:
      int v8 = "BOOL";
      char v9 = 102;
      goto LABEL_124;
    case 103:
      switch((int)a3)
      {
        case 0:
          double result = a1[61];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 103;
LABEL_152:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 103;
LABEL_154:
          uint64_t v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 103;
LABEL_156:
          uint64_t v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_110:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 104:
      int v8 = "int";
      char v9 = 104;
      goto LABEL_124;
    case 105:
      int v8 = "int";
      char v9 = 105;
      goto LABEL_124;
    case 106:
      int v8 = "enum";
      char v9 = 106;
      goto LABEL_124;
    case 107:
      int v8 = "int";
      char v9 = 107;
      goto LABEL_124;
    case 108:
      int v8 = "int";
      char v9 = 108;
      goto LABEL_124;
    case 109:
      int v8 = "int";
      char v9 = 109;
      goto LABEL_124;
    case 110:
      int v8 = "int";
      char v9 = 110;
      goto LABEL_124;
    case 111:
      int v8 = "int";
      char v9 = 111;
LABEL_124:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

char *SearchParamSet::getStringParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_124;
    case 2:
      int v8 = "int";
      char v9 = 2;
      goto LABEL_124;
    case 3:
      int v8 = "int";
      char v9 = 3;
      goto LABEL_124;
    case 4:
      int v8 = "BOOL";
      char v9 = 4;
      goto LABEL_124;
    case 5:
      int v8 = "BOOL";
      char v9 = 5;
      goto LABEL_124;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_124;
    case 7:
      int v8 = "int";
      char v9 = 7;
      goto LABEL_124;
    case 8:
      int v8 = "int";
      char v9 = 8;
      goto LABEL_124;
    case 9:
      int v8 = "int";
      char v9 = 9;
      goto LABEL_124;
    case 10:
      int v8 = "BOOL";
      char v9 = 10;
      goto LABEL_124;
    case 11:
      int v8 = "BOOL";
      char v9 = 11;
      goto LABEL_124;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_124;
    case 13:
      int v8 = "BOOL";
      char v9 = 13;
      goto LABEL_124;
    case 14:
      int v8 = "int";
      char v9 = 14;
      goto LABEL_124;
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_124;
    case 16:
      int v8 = "int";
      char v9 = 16;
      goto LABEL_124;
    case 17:
      int v8 = "double";
      char v9 = 17;
      goto LABEL_124;
    case 18:
      int v8 = "int";
      char v9 = 18;
      goto LABEL_124;
    case 19:
      if (a3 == 1)
      {
        int v13 = (ParamSpecMgr *)qword_26AB82A90;
        int v14 = 19;
        goto LABEL_130;
      }
      if (a3) {
        goto LABEL_79;
      }
      int v10 = *(_DWORD *)(a1 + 112);
      uint64_t v11 = *(void *)(a1 + 104);
      goto LABEL_76;
    case 20:
      int v8 = "int";
      char v9 = 20;
      goto LABEL_124;
    case 21:
      int v8 = "int";
      char v9 = 21;
      goto LABEL_124;
    case 22:
      int v8 = "int";
      char v9 = 22;
      goto LABEL_124;
    case 23:
      int v8 = "enum";
      char v9 = 23;
      goto LABEL_124;
    case 24:
      int v8 = "double";
      char v9 = 24;
      goto LABEL_124;
    case 25:
      int v8 = "double";
      char v9 = 25;
      goto LABEL_124;
    case 26:
      int v8 = "enum";
      char v9 = 26;
      goto LABEL_124;
    case 27:
      int v8 = "enum";
      char v9 = 27;
      goto LABEL_124;
    case 28:
      int v8 = "int";
      char v9 = 28;
      goto LABEL_124;
    case 29:
      int v8 = "int";
      char v9 = 29;
      goto LABEL_124;
    case 30:
      int v8 = "int";
      char v9 = 30;
      goto LABEL_124;
    case 31:
      int v8 = "int";
      char v9 = 31;
      goto LABEL_124;
    case 32:
      int v8 = "int";
      char v9 = 32;
      goto LABEL_124;
    case 33:
      int v8 = "int";
      char v9 = 33;
      goto LABEL_124;
    case 34:
      int v8 = "int";
      char v9 = 34;
      goto LABEL_124;
    case 35:
      int v8 = "int";
      char v9 = 35;
      goto LABEL_124;
    case 36:
      int v8 = "enum";
      char v9 = 36;
      goto LABEL_124;
    case 37:
      int v8 = "BOOL";
      char v9 = 37;
      goto LABEL_124;
    case 38:
      int v8 = "int";
      char v9 = 38;
      goto LABEL_124;
    case 39:
      int v8 = "BOOL";
      char v9 = 39;
      goto LABEL_124;
    case 40:
      int v8 = "int";
      char v9 = 40;
      goto LABEL_124;
    case 41:
      int v8 = "int";
      char v9 = 41;
      goto LABEL_124;
    case 42:
      int v8 = "int";
      char v9 = 42;
      goto LABEL_124;
    case 43:
      int v8 = "int";
      char v9 = 43;
      goto LABEL_124;
    case 44:
      int v8 = "BOOL";
      char v9 = 44;
      goto LABEL_124;
    case 45:
      int v8 = "int";
      char v9 = 45;
      goto LABEL_124;
    case 46:
      int v8 = "int";
      char v9 = 46;
      goto LABEL_124;
    case 47:
      int v8 = "int";
      char v9 = 47;
      goto LABEL_124;
    case 48:
      int v8 = "int";
      char v9 = 48;
      goto LABEL_124;
    case 49:
      int v8 = "int";
      char v9 = 49;
      goto LABEL_124;
    case 50:
      int v8 = "double";
      char v9 = 50;
      goto LABEL_124;
    case 51:
      int v8 = "int";
      char v9 = 51;
      goto LABEL_124;
    case 52:
      int v8 = "BOOL";
      char v9 = 52;
      goto LABEL_124;
    case 53:
      int v8 = "int";
      char v9 = 53;
      goto LABEL_124;
    case 54:
      int v8 = "int";
      char v9 = 54;
      goto LABEL_124;
    case 55:
      int v8 = "int";
      char v9 = 55;
      goto LABEL_124;
    case 56:
      int v8 = "int";
      char v9 = 56;
      goto LABEL_124;
    case 57:
      int v8 = "int";
      char v9 = 57;
      goto LABEL_124;
    case 58:
      int v8 = "enum";
      char v9 = 58;
      goto LABEL_124;
    case 59:
      int v8 = "int";
      char v9 = 59;
      goto LABEL_124;
    case 60:
      int v8 = "int";
      char v9 = 60;
      goto LABEL_124;
    case 61:
      int v8 = "int";
      char v9 = 61;
      goto LABEL_124;
    case 62:
      int v8 = "int";
      char v9 = 62;
      goto LABEL_124;
    case 63:
      int v8 = "int";
      char v9 = 63;
      goto LABEL_124;
    case 64:
      int v8 = "double";
      char v9 = 64;
      goto LABEL_124;
    case 65:
      int v8 = "BOOL";
      char v9 = 65;
      goto LABEL_124;
    case 66:
      int v8 = "int";
      char v9 = 66;
      goto LABEL_124;
    case 67:
      int v8 = "BOOL";
      char v9 = 67;
      goto LABEL_124;
    case 68:
      int v8 = "int";
      char v9 = 68;
      goto LABEL_124;
    case 69:
      int v8 = "BOOL";
      char v9 = 69;
      goto LABEL_124;
    case 70:
      int v8 = "BOOL";
      char v9 = 70;
      goto LABEL_124;
    case 71:
      int v8 = "int";
      char v9 = 71;
      goto LABEL_124;
    case 72:
      int v8 = "int";
      char v9 = 72;
      goto LABEL_124;
    case 73:
      int v8 = "double";
      char v9 = 73;
      goto LABEL_124;
    case 74:
      int v8 = "int";
      char v9 = 74;
      goto LABEL_124;
    case 75:
      int v8 = "int";
      char v9 = 75;
      goto LABEL_124;
    case 76:
      int v8 = "BOOL";
      char v9 = 76;
      goto LABEL_124;
    case 77:
      int v8 = "BOOL";
      char v9 = 77;
      goto LABEL_124;
    case 78:
      int v8 = "int";
      char v9 = 78;
      goto LABEL_124;
    case 79:
      int v8 = "BOOL";
      char v9 = 79;
      goto LABEL_124;
    case 80:
      int v8 = "int";
      char v9 = 80;
      goto LABEL_124;
    case 81:
      int v8 = "BOOL";
      char v9 = 81;
      goto LABEL_124;
    case 82:
      int v8 = "BOOL";
      char v9 = 82;
      goto LABEL_124;
    case 83:
      if (a3 == 1)
      {
        int v13 = (ParamSpecMgr *)qword_26AB82A90;
        int v14 = 83;
        goto LABEL_130;
      }
      if (a3) {
        goto LABEL_79;
      }
      int v10 = *(_DWORD *)(a1 + 400);
      uint64_t v11 = *(void *)(a1 + 392);
      goto LABEL_76;
    case 84:
      int v8 = "int";
      char v9 = 84;
      goto LABEL_124;
    case 85:
      int v8 = "double";
      char v9 = 85;
      goto LABEL_124;
    case 86:
      int v8 = "double";
      char v9 = 86;
      goto LABEL_124;
    case 87:
      int v8 = "int";
      char v9 = 87;
      goto LABEL_124;
    case 88:
      int v8 = "int";
      char v9 = 88;
      goto LABEL_124;
    case 89:
      int v8 = "int";
      char v9 = 89;
      goto LABEL_124;
    case 90:
      int v8 = "BOOL";
      char v9 = 90;
      goto LABEL_124;
    case 91:
      int v8 = "BOOL";
      char v9 = 91;
      goto LABEL_124;
    case 92:
      int v8 = "BOOL";
      char v9 = 92;
      goto LABEL_124;
    case 93:
      int v8 = "BOOL";
      char v9 = 93;
      goto LABEL_124;
    case 94:
      int v8 = "BOOL";
      char v9 = 94;
      goto LABEL_124;
    case 95:
      int v8 = "BOOL";
      char v9 = 95;
      goto LABEL_124;
    case 96:
      int v8 = "BOOL";
      char v9 = 96;
      goto LABEL_124;
    case 97:
      if (a3 == 1)
      {
        int v13 = (ParamSpecMgr *)qword_26AB82A90;
        int v14 = 97;
LABEL_130:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
      }
      else if (a3)
      {
LABEL_79:
        throwWrongQueryMode(a3, (uint64_t)"string", a3, a4, a5, a6, a7, a8);
        return 0;
      }
      else
      {
        int v10 = *(_DWORD *)(a1 + 464);
        uint64_t v11 = *(void *)(a1 + 456);
LABEL_76:
        if (v10) {
          return (char *)v11;
        }
        else {
          return &byte_2140B33BB;
        }
      }
    case 98:
      int v8 = "BOOL";
      char v9 = 98;
      goto LABEL_124;
    case 99:
      int v8 = "enum";
      char v9 = 99;
      goto LABEL_124;
    case 100:
      int v8 = "BOOL";
      char v9 = 100;
      goto LABEL_124;
    case 101:
      int v8 = "BOOL";
      char v9 = 101;
      goto LABEL_124;
    case 102:
      int v8 = "BOOL";
      char v9 = 102;
      goto LABEL_124;
    case 103:
      int v8 = "double";
      char v9 = 103;
      goto LABEL_124;
    case 104:
      int v8 = "int";
      char v9 = 104;
      goto LABEL_124;
    case 105:
      int v8 = "int";
      char v9 = 105;
      goto LABEL_124;
    case 106:
      int v8 = "enum";
      char v9 = 106;
      goto LABEL_124;
    case 107:
      int v8 = "int";
      char v9 = 107;
      goto LABEL_124;
    case 108:
      int v8 = "int";
      char v9 = 108;
      goto LABEL_124;
    case 109:
      int v8 = "int";
      char v9 = 109;
      goto LABEL_124;
    case 110:
      int v8 = "int";
      char v9 = 110;
      goto LABEL_124;
    case 111:
      int v8 = "int";
      char v9 = 111;
LABEL_124:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t SearchParamSet::getEnumParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_120;
    case 2:
      int v8 = "int";
      char v9 = 2;
      goto LABEL_120;
    case 3:
      int v8 = "int";
      char v9 = 3;
      goto LABEL_120;
    case 4:
      int v8 = "BOOL";
      char v9 = 4;
      goto LABEL_120;
    case 5:
      int v8 = "BOOL";
      char v9 = 5;
      goto LABEL_120;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_120;
    case 7:
      int v8 = "int";
      char v9 = 7;
      goto LABEL_120;
    case 8:
      int v8 = "int";
      char v9 = 8;
      goto LABEL_120;
    case 9:
      int v8 = "int";
      char v9 = 9;
      goto LABEL_120;
    case 10:
      int v8 = "BOOL";
      char v9 = 10;
      goto LABEL_120;
    case 11:
      int v8 = "BOOL";
      char v9 = 11;
      goto LABEL_120;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_120;
    case 13:
      int v8 = "BOOL";
      char v9 = 13;
      goto LABEL_120;
    case 14:
      int v8 = "int";
      char v9 = 14;
      goto LABEL_120;
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_120;
    case 16:
      int v8 = "int";
      char v9 = 16;
      goto LABEL_120;
    case 17:
      int v8 = "double";
      char v9 = 17;
      goto LABEL_120;
    case 18:
      int v8 = "int";
      char v9 = 18;
      goto LABEL_120;
    case 19:
      int v8 = "string";
      char v9 = 19;
      goto LABEL_120;
    case 20:
      int v8 = "int";
      char v9 = 20;
      goto LABEL_120;
    case 21:
      int v8 = "int";
      char v9 = 21;
      goto LABEL_120;
    case 22:
      int v8 = "int";
      char v9 = 22;
      goto LABEL_120;
    case 23:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[33];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 23;
          goto LABEL_144;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 23;
          goto LABEL_150;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 23;
          goto LABEL_156;
        default:
          goto LABEL_100;
      }
      return result;
    case 24:
      int v8 = "double";
      char v9 = 24;
      goto LABEL_120;
    case 25:
      int v8 = "double";
      char v9 = 25;
      goto LABEL_120;
    case 26:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[38];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 26;
          goto LABEL_144;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 26;
          goto LABEL_150;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 26;
          goto LABEL_156;
        default:
          goto LABEL_100;
      }
      return result;
    case 27:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[39];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 27;
          goto LABEL_144;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 27;
          goto LABEL_150;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 27;
          goto LABEL_156;
        default:
          goto LABEL_100;
      }
      return result;
    case 28:
      int v8 = "int";
      char v9 = 28;
      goto LABEL_120;
    case 29:
      int v8 = "int";
      char v9 = 29;
      goto LABEL_120;
    case 30:
      int v8 = "int";
      char v9 = 30;
      goto LABEL_120;
    case 31:
      int v8 = "int";
      char v9 = 31;
      goto LABEL_120;
    case 32:
      int v8 = "int";
      char v9 = 32;
      goto LABEL_120;
    case 33:
      int v8 = "int";
      char v9 = 33;
      goto LABEL_120;
    case 34:
      int v8 = "int";
      char v9 = 34;
      goto LABEL_120;
    case 35:
      int v8 = "int";
      char v9 = 35;
      goto LABEL_120;
    case 36:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[48];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 36;
          goto LABEL_144;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 36;
          goto LABEL_150;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 36;
          goto LABEL_156;
        default:
          goto LABEL_100;
      }
      return result;
    case 37:
      int v8 = "BOOL";
      char v9 = 37;
      goto LABEL_120;
    case 38:
      int v8 = "int";
      char v9 = 38;
      goto LABEL_120;
    case 39:
      int v8 = "BOOL";
      char v9 = 39;
      goto LABEL_120;
    case 40:
      int v8 = "int";
      char v9 = 40;
      goto LABEL_120;
    case 41:
      int v8 = "int";
      char v9 = 41;
      goto LABEL_120;
    case 42:
      int v8 = "int";
      char v9 = 42;
      goto LABEL_120;
    case 43:
      int v8 = "int";
      char v9 = 43;
      goto LABEL_120;
    case 44:
      int v8 = "BOOL";
      char v9 = 44;
      goto LABEL_120;
    case 45:
      int v8 = "int";
      char v9 = 45;
      goto LABEL_120;
    case 46:
      int v8 = "int";
      char v9 = 46;
      goto LABEL_120;
    case 47:
      int v8 = "int";
      char v9 = 47;
      goto LABEL_120;
    case 48:
      int v8 = "int";
      char v9 = 48;
      goto LABEL_120;
    case 49:
      int v8 = "int";
      char v9 = 49;
      goto LABEL_120;
    case 50:
      int v8 = "double";
      char v9 = 50;
      goto LABEL_120;
    case 51:
      int v8 = "int";
      char v9 = 51;
      goto LABEL_120;
    case 52:
      int v8 = "BOOL";
      char v9 = 52;
      goto LABEL_120;
    case 53:
      int v8 = "int";
      char v9 = 53;
      goto LABEL_120;
    case 54:
      int v8 = "int";
      char v9 = 54;
      goto LABEL_120;
    case 55:
      int v8 = "int";
      char v9 = 55;
      goto LABEL_120;
    case 56:
      int v8 = "int";
      char v9 = 56;
      goto LABEL_120;
    case 57:
      int v8 = "int";
      char v9 = 57;
      goto LABEL_120;
    case 58:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[71];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 58;
          goto LABEL_144;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 58;
          goto LABEL_150;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 58;
          goto LABEL_156;
        default:
          goto LABEL_100;
      }
      return result;
    case 59:
      int v8 = "int";
      char v9 = 59;
      goto LABEL_120;
    case 60:
      int v8 = "int";
      char v9 = 60;
      goto LABEL_120;
    case 61:
      int v8 = "int";
      char v9 = 61;
      goto LABEL_120;
    case 62:
      int v8 = "int";
      char v9 = 62;
      goto LABEL_120;
    case 63:
      int v8 = "int";
      char v9 = 63;
      goto LABEL_120;
    case 64:
      int v8 = "double";
      char v9 = 64;
      goto LABEL_120;
    case 65:
      int v8 = "BOOL";
      char v9 = 65;
      goto LABEL_120;
    case 66:
      int v8 = "int";
      char v9 = 66;
      goto LABEL_120;
    case 67:
      int v8 = "BOOL";
      char v9 = 67;
      goto LABEL_120;
    case 68:
      int v8 = "int";
      char v9 = 68;
      goto LABEL_120;
    case 69:
      int v8 = "BOOL";
      char v9 = 69;
      goto LABEL_120;
    case 70:
      int v8 = "BOOL";
      char v9 = 70;
      goto LABEL_120;
    case 71:
      int v8 = "int";
      char v9 = 71;
      goto LABEL_120;
    case 72:
      int v8 = "int";
      char v9 = 72;
      goto LABEL_120;
    case 73:
      int v8 = "double";
      char v9 = 73;
      goto LABEL_120;
    case 74:
      int v8 = "int";
      char v9 = 74;
      goto LABEL_120;
    case 75:
      int v8 = "int";
      char v9 = 75;
      goto LABEL_120;
    case 76:
      int v8 = "BOOL";
      char v9 = 76;
      goto LABEL_120;
    case 77:
      int v8 = "BOOL";
      char v9 = 77;
      goto LABEL_120;
    case 78:
      int v8 = "int";
      char v9 = 78;
      goto LABEL_120;
    case 79:
      int v8 = "BOOL";
      char v9 = 79;
      goto LABEL_120;
    case 80:
      int v8 = "int";
      char v9 = 80;
      goto LABEL_120;
    case 81:
      int v8 = "BOOL";
      char v9 = 81;
      goto LABEL_120;
    case 82:
      int v8 = "BOOL";
      char v9 = 82;
      goto LABEL_120;
    case 83:
      int v8 = "string";
      char v9 = 83;
      goto LABEL_120;
    case 84:
      int v8 = "int";
      char v9 = 84;
      goto LABEL_120;
    case 85:
      int v8 = "double";
      char v9 = 85;
      goto LABEL_120;
    case 86:
      int v8 = "double";
      char v9 = 86;
      goto LABEL_120;
    case 87:
      int v8 = "int";
      char v9 = 87;
      goto LABEL_120;
    case 88:
      int v8 = "int";
      char v9 = 88;
      goto LABEL_120;
    case 89:
      int v8 = "int";
      char v9 = 89;
      goto LABEL_120;
    case 90:
      int v8 = "BOOL";
      char v9 = 90;
      goto LABEL_120;
    case 91:
      int v8 = "BOOL";
      char v9 = 91;
      goto LABEL_120;
    case 92:
      int v8 = "BOOL";
      char v9 = 92;
      goto LABEL_120;
    case 93:
      int v8 = "BOOL";
      char v9 = 93;
      goto LABEL_120;
    case 94:
      int v8 = "BOOL";
      char v9 = 94;
      goto LABEL_120;
    case 95:
      int v8 = "BOOL";
      char v9 = 95;
      goto LABEL_120;
    case 96:
      int v8 = "BOOL";
      char v9 = 96;
      goto LABEL_120;
    case 97:
      int v8 = "string";
      char v9 = 97;
      goto LABEL_120;
    case 98:
      int v8 = "BOOL";
      char v9 = 98;
      goto LABEL_120;
    case 99:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[119];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 99;
          goto LABEL_144;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 99;
          goto LABEL_150;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 99;
          goto LABEL_156;
        default:
          goto LABEL_100;
      }
      return result;
    case 100:
      int v8 = "BOOL";
      char v9 = 100;
      goto LABEL_120;
    case 101:
      int v8 = "BOOL";
      char v9 = 101;
      goto LABEL_120;
    case 102:
      int v8 = "BOOL";
      char v9 = 102;
      goto LABEL_120;
    case 103:
      int v8 = "double";
      char v9 = 103;
      goto LABEL_120;
    case 104:
      int v8 = "int";
      char v9 = 104;
      goto LABEL_120;
    case 105:
      int v8 = "int";
      char v9 = 105;
      goto LABEL_120;
    case 106:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[126];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A90;
          int v12 = 106;
LABEL_144:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId) {
          uint64_t result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          }
          break;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A90;
          int v14 = 106;
LABEL_150:
          uint64_t v18 = (void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          if (v18) {
          uint64_t result = EnumParamSpec::getMinVal((EnumParamSpec *)v18);
          }
          break;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A90;
          int v16 = 106;
LABEL_156:
          uint64_t v19 = (void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          if (v19) {
          uint64_t result = EnumParamSpec::getMaxVal((EnumParamSpec *)v19);
          }
          break;
        default:
LABEL_100:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 107:
      int v8 = "int";
      char v9 = 107;
      goto LABEL_120;
    case 108:
      int v8 = "int";
      char v9 = 108;
      goto LABEL_120;
    case 109:
      int v8 = "int";
      char v9 = 109;
      goto LABEL_120;
    case 110:
      int v8 = "int";
      char v9 = 110;
      goto LABEL_120;
    case 111:
      int v8 = "int";
      char v9 = 111;
LABEL_120:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void SearchParamSet::setBoolParameter(SearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  char v9 = a3;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLatticeComputeOnlyBestTimes";
        goto LABEL_120;
      }
      *((unsigned char *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a3;
      return;
    case 2:
      throwWrongTypeForParamId(2, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 3:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 4:
LABEL_6:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLatticeNodeCreationUseRightWord";
        goto LABEL_120;
      }
      *((unsigned char *)this + 52) = v9;
      return;
    case 5:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLatticeUseCoarticulation";
        goto LABEL_120;
      }
      *((unsigned char *)this + 53) = a3;
      return;
    case 6:
      throwWrongTypeForParamId(6, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 7:
LABEL_12:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 8:
LABEL_13:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 9:
LABEL_14:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 10:
LABEL_15:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchActiveWordHasPredecessorPhonemeContext";
        goto LABEL_120;
      }
      *((unsigned char *)this + 72) = v9;
      return;
    case 11:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchActiveWordHasPredecessorWordContext";
        goto LABEL_120;
      }
      *((unsigned char *)this + 73) = a3;
      return;
    case 12:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchActiveWordHasMergedGrammarState";
        goto LABEL_120;
      }
      *((unsigned char *)this + 74) = a3;
      return;
    case 13:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchActiveWordHasMergedLatticeLinkId";
        goto LABEL_120;
      }
      *((unsigned char *)this + 75) = a3;
      return;
    case 14:
      throwWrongTypeForParamId(14, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 15:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 16:
LABEL_26:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 17:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 18:
LABEL_28:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 19:
LABEL_29:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 20:
LABEL_30:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 21:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 22:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 23:
LABEL_33:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 24:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 25:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 26:
LABEL_36:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 27:
LABEL_37:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 28:
LABEL_38:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 29:
LABEL_39:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 30:
LABEL_40:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 31:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 32:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 33:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 34:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 35:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 36:
LABEL_46:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 37:
LABEL_47:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLMRescoreWithCorrective";
        goto LABEL_120;
      }
      *((unsigned char *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v9;
      return;
    case 38:
      throwWrongTypeForParamId(38, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 39:
LABEL_51:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchActiveNodePreserveMultipleHistories";
        goto LABEL_120;
      }
      *((unsigned char *)this + 204) = v9;
      return;
    case 40:
      throwWrongTypeForParamId(40, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 41:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 42:
LABEL_55:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 43:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 44:
LABEL_57:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLatticeComputeOnlyBestPath";
        goto LABEL_120;
      }
      *((unsigned char *)this + 224) = v9;
      return;
    case 45:
      throwWrongTypeForParamId(45, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 46:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 47:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 48:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 49:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 50:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 51:
LABEL_66:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 52:
LABEL_67:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLatticeAllowZeroDurationFinalSilence";
        goto LABEL_120;
      }
      *((unsigned char *)this + 26pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 53:
      throwWrongTypeForParamId(53, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 54:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 55:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 56:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 57:
LABEL_74:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 58:
LABEL_75:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 59:
LABEL_76:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_77;
    case 60:
LABEL_77:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_78;
    case 61:
LABEL_78:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_79;
    case 62:
LABEL_79:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_80;
    case 63:
LABEL_80:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_81;
    case 64:
LABEL_81:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_82;
    case 65:
LABEL_82:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchPelScoreUseBestCompScore";
        goto LABEL_120;
      }
      *((unsigned char *)this + 32pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 66:
      throwWrongTypeForParamId(66, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_86;
    case 67:
LABEL_86:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchPrefilterResultUseCrumbBank";
        goto LABEL_120;
      }
      *((unsigned char *)this + 328) = v9;
      return;
    case 68:
      throwWrongTypeForParamId(68, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_89;
    case 69:
LABEL_89:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchSegmentAllNets";
        goto LABEL_120;
      }
      *((unsigned char *)this + 336) = v9;
      return;
    case 70:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchRecognitionBatchProcessing";
        goto LABEL_120;
      }
      *((unsigned char *)this + 337) = a3;
      return;
    case 71:
      throwWrongTypeForParamId(71, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_94;
    case 72:
LABEL_94:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_95;
    case 73:
LABEL_95:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_96;
    case 74:
LABEL_96:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_97;
    case 75:
LABEL_97:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_98;
    case 76:
LABEL_98:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchTruncatePackedIntComponentScores";
        goto LABEL_120;
      }
      *((unsigned char *)this + 368) = v9;
      return;
    case 77:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchUseWordEndThreshWhenSeedingFinalSilence";
        goto LABEL_120;
      }
      *((unsigned char *)this + 369) = a3;
      return;
    case 78:
      throwWrongTypeForParamId(78, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_104;
    case 79:
LABEL_104:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchWordSeedScoreIncludePrefiltererScore";
        goto LABEL_120;
      }
      *((unsigned char *)this + 376) = v9;
      return;
    case 80:
      throwWrongTypeForParamId(80, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_107;
    case 81:
LABEL_107:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchWordSeedUnprefilteredUseThreshScoreDecrement";
        goto LABEL_120;
      }
      *((unsigned char *)this + 384) = v9;
      return;
    case 82:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchEstimateAndPreScoreActivePels";
        goto LABEL_120;
      }
      *((unsigned char *)this + 385) = a3;
      return;
    case 83:
      throwWrongTypeForParamId(83, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_112;
    case 84:
LABEL_112:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_113;
    case 85:
LABEL_113:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_114;
    case 86:
LABEL_114:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_115;
    case 87:
LABEL_115:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_116;
    case 88:
LABEL_116:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_117;
    case 89:
LABEL_117:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_118;
    case 90:
LABEL_118:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "FstCoreRepeatFrame";
        goto LABEL_120;
      }
      *((unsigned char *)this + 444) = v9;
      return;
    case 91:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "FstCoreGenerateLeafLattice";
        goto LABEL_120;
      }
      *((unsigned char *)this + 445) = a3;
      return;
    case 92:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLatticePreserveAlternateProns";
        goto LABEL_120;
      }
      *((unsigned char *)this + 446) = a3;
      return;
    case 93:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLatticeSilentWordsUseCoarticulation";
        goto LABEL_120;
      }
      *((unsigned char *)this + 447) = a3;
      return;
    case 94:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchLatticeUseThresholding";
        goto LABEL_120;
      }
      *((unsigned char *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = a3;
      return;
    case 95:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchDisableHierarchicalScorer";
        goto LABEL_120;
      }
      *((unsigned char *)this + 449) = a3;
      return;
    case 96:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "SearchDisableGPUScorer";
        goto LABEL_120;
      }
      *((unsigned char *)this + 45pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a3;
      return;
    case 97:
      throwWrongTypeForParamId(97, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_137;
    case 98:
LABEL_137:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "FstCoreUseDurationModel";
        goto LABEL_120;
      }
      *((unsigned char *)this + 472) = v9;
      return;
    case 99:
      throwWrongTypeForParamId(99, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_140;
    case 100:
LABEL_140:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "FstCoreHashTokens";
        goto LABEL_120;
      }
      *((unsigned char *)this + 48pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 101:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "FstCoreUseFwdBwdAlgorithm";
        goto LABEL_120;
      }
      *((unsigned char *)this + 481) = a3;
      break;
    case 102:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "FstCoreLockPelScoreCache";
LABEL_120:
        throwParamSetSetFailed(v11, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((unsigned char *)this + 482) = a3;
      }
      break;
    case 103:
      throwWrongTypeForParamId(103, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_147;
    case 104:
LABEL_147:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_148;
    case 105:
LABEL_148:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_149;
    case 106:
LABEL_149:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_150;
    case 107:
LABEL_150:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_151;
    case 108:
LABEL_151:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_152;
    case 109:
LABEL_152:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_153;
    case 110:
LABEL_153:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_154;
    case 111:
LABEL_154:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_155;
    default:
LABEL_155:
      throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void SearchParamSet::setIntParameter(SearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  int v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 2, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId) {
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeLMRescoringAbortOnTotalNewNodes";
        goto LABEL_283;
      }
      *((_DWORD *)this + 11) = v9;
      return;
    case 3:
      uint64_t v23 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 3, a3, a4, a5, a6, a7, a8);
      if (v23) {
      IntParamSpec::validateValue((IntParamSpec *)v23, v9, 0, 0, v24, v25, v26, v27);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticePruneKeepUniquePathsMaxSize";
        goto LABEL_283;
      }
      *((_DWORD *)this + 12) = v9;
      return;
    case 4:
      throwWrongTypeForParamId(4, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 5:
LABEL_15:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 6:
LABEL_16:
      uint64_t v28 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 6, a3, a4, a5, a6, a7, a8);
      if (v28) {
      IntParamSpec::validateValue((IntParamSpec *)v28, v9, 0, 0, v29, v30, v31, v32);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchAbortOnAllocBytes";
        goto LABEL_283;
      }
      *((_DWORD *)this + 14) = v9;
      return;
    case 7:
      uint64_t v33 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 7, a3, a4, a5, a6, a7, a8);
      if (v33) {
      IntParamSpec::validateValue((IntParamSpec *)v33, v9, 0, 0, v34, v35, v36, v37);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchAbortOnAverageWordsEndingPerFrame";
        goto LABEL_283;
      }
      *((_DWORD *)this + 15) = v9;
      return;
    case 8:
      uint64_t v38 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 8, a3, a4, a5, a6, a7, a8);
      if (v38) {
      IntParamSpec::validateValue((IntParamSpec *)v38, v9, 0, 0, v39, v40, v41, v42);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchAbortOnNumHistories";
        goto LABEL_283;
      }
      *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v9;
      return;
    case 9:
      uint64_t v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 9, a3, a4, a5, a6, a7, a8);
      if (v43) {
      IntParamSpec::validateValue((IntParamSpec *)v43, v9, 0, 0, v44, v45, v46, v47);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchAbortOnNumRecognizedFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 17) = v9;
      return;
    case 10:
      throwWrongTypeForParamId(10, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 11:
LABEL_34:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 12:
LABEL_35:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 13:
LABEL_36:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 14:
LABEL_37:
      uint64_t v48 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 14, a3, a4, a5, a6, a7, a8);
      if (v48) {
      IntParamSpec::validateValue((IntParamSpec *)v48, v9, 0, 0, v49, v50, v51, v52);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeTimeConstraintSeedThreshScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + 19) = v9;
      return;
    case 15:
      uint64_t v53 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 15, a3, a4, a5, a6, a7, a8);
      if (v53) {
      IntParamSpec::validateValue((IntParamSpec *)v53, v9, 0, 0, v54, v55, v56, v57);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeTimeConstraintDistanceMaxFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 16:
      uint64_t v58 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 16, a3, a4, a5, a6, a7, a8);
      if (v58) {
      IntParamSpec::validateValue((IntParamSpec *)v58, v9, 0, 0, v59, v60, v61, v62);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchActiveWordSpreadSeedScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + 21) = v9;
      return;
    case 17:
      throwWrongTypeForParamId(17, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 18:
LABEL_51:
      uint64_t v63 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 18, a3, a4, a5, a6, a7, a8);
      if (v63) {
      IntParamSpec::validateValue((IntParamSpec *)v63, v9, 0, 0, v64, v65, v66, v67);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchConTransAccDecayFrequency";
        goto LABEL_283;
      }
      *((_DWORD *)this + 24) = v9;
      return;
    case 19:
      throwWrongTypeForParamId(19, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 20:
LABEL_56:
      uint64_t v68 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 20, a3, a4, a5, a6, a7, a8);
      if (v68) {
      IntParamSpec::validateValue((IntParamSpec *)v68, v9, 0, 0, v69, v70, v71, v72);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchConTransAccMaxSilenceFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 21:
      uint64_t v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 21, a3, a4, a5, a6, a7, a8);
      if (v73) {
      IntParamSpec::validateValue((IntParamSpec *)v73, v9, 0, 0, v74, v75, v76, v77);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchConTransAccRampFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 31) = v9;
      return;
    case 22:
      uint64_t v78 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 22, a3, a4, a5, a6, a7, a8);
      if (v78) {
      IntParamSpec::validateValue((IntParamSpec *)v78, v9, 0, 0, v79, v80, v81, v82);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchConTransAccStartFrame";
        goto LABEL_283;
      }
      *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v9;
      return;
    case 23:
      throwWrongTypeForParamId(23, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 24:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 25:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 26:
LABEL_71:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 27:
LABEL_72:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 28:
LABEL_73:
      uint64_t v83 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 28, a3, a4, a5, a6, a7, a8);
      if (v83) {
      IntParamSpec::validateValue((IntParamSpec *)v83, v9, 0, 0, v84, v85, v86, v87);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchInitialSilenceToFinalSilenceLMScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 29:
      uint64_t v88 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 29, a3, a4, a5, a6, a7, a8);
      if (v88) {
      IntParamSpec::validateValue((IntParamSpec *)v88, v9, 0, 0, v89, v90, v91, v92);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchInterWordSilencePenalty";
        goto LABEL_283;
      }
      *((_DWORD *)this + 41) = v9;
      return;
    case 30:
      uint64_t v93 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 30, a3, a4, a5, a6, a7, a8);
      if (v93) {
      IntParamSpec::validateValue((IntParamSpec *)v93, v9, 0, 0, v94, v95, v96, v97);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLMDisallowedLMScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + 42) = v9;
      return;
    case 31:
      uint64_t v98 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 31, a3, a4, a5, a6, a7, a8);
      if (v98) {
      IntParamSpec::validateValue((IntParamSpec *)v98, v9, 0, 0, v99, v100, v101, v102);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLMDynamicBigramReadCacheMaxChunksPerRead";
        goto LABEL_283;
      }
      *((_DWORD *)this + 43) = v9;
      return;
    case 32:
      uint64_t v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 32, a3, a4, a5, a6, a7, a8);
      if (v103) {
      IntParamSpec::validateValue((IntParamSpec *)v103, v9, 0, 0, v104, v105, v106, v107);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLMDynamicQuadgramReadCacheMaxChunksPerRead";
        goto LABEL_283;
      }
      *((_DWORD *)this + 44) = v9;
      return;
    case 33:
      uint64_t v108 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 33, a3, a4, a5, a6, a7, a8);
      if (v108) {
      IntParamSpec::validateValue((IntParamSpec *)v108, v9, 0, 0, v109, v110, v111, v112);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLMDynamicReadCacheBlocksPerChunk";
        goto LABEL_283;
      }
      *((_DWORD *)this + 45) = v9;
      return;
    case 34:
      uint64_t v113 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 34, a3, a4, a5, a6, a7, a8);
      if (v113) {
      IntParamSpec::validateValue((IntParamSpec *)v113, v9, 0, 0, v114, v115, v116, v117);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLMDynamicReadCacheMaxBlocks";
        goto LABEL_283;
      }
      *((_DWORD *)this + 46) = v9;
      return;
    case 35:
      uint64_t v118 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 35, a3, a4, a5, a6, a7, a8);
      if (v118) {
      IntParamSpec::validateValue((IntParamSpec *)v118, v9, 0, 0, v119, v120, v121, v122);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLMDynamicTrigramReadCacheMaxChunksPerRead";
        goto LABEL_283;
      }
      *((_DWORD *)this + 47) = v9;
      return;
    case 36:
      throwWrongTypeForParamId(36, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_107;
    case 37:
LABEL_107:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_108;
    case 38:
LABEL_108:
      uint64_t v123 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 38, a3, a4, a5, a6, a7, a8);
      if (v123) {
      IntParamSpec::validateValue((IntParamSpec *)v123, v9, 0, 0, v124, v125, v126, v127);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchActiveNodeCountLimit";
        goto LABEL_283;
      }
      *((_DWORD *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 39:
      throwWrongTypeForParamId(39, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_114;
    case 40:
LABEL_114:
      uint64_t v128 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 40, a3, a4, a5, a6, a7, a8);
      if (v128) {
      IntParamSpec::validateValue((IntParamSpec *)v128, v9, 0, 0, v129, v130, v131, v132);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchActiveSequenceCountLimit";
        goto LABEL_283;
      }
      *((_DWORD *)this + 52) = v9;
      return;
    case 41:
      uint64_t v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 41, a3, a4, a5, a6, a7, a8);
      if (v133) {
      IntParamSpec::validateValue((IntParamSpec *)v133, v9, 0, 0, v134, v135, v136, v137);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchFinalSilenceThreshScoreIncrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 53) = v9;
      return;
    case 42:
      uint64_t v138 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 42, a3, a4, a5, a6, a7, a8);
      if (v138) {
      IntParamSpec::validateValue((IntParamSpec *)v138, v9, 0, 0, v139, v140, v141, v142);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeBestCrumbDistanceMaxFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 54) = v9;
      return;
    case 43:
      uint64_t v143 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 43, a3, a4, a5, a6, a7, a8);
      if (v143) {
      IntParamSpec::validateValue((IntParamSpec *)v143, v9, 0, 0, v144, v145, v146, v147);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeBestCrumbThreshScoreIncrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 55) = v9;
      return;
    case 44:
      throwWrongTypeForParamId(44, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_131;
    case 45:
LABEL_131:
      uint64_t v148 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 45, a3, a4, a5, a6, a7, a8);
      if (v148) {
      IntParamSpec::validateValue((IntParamSpec *)v148, v9, 0, 0, v149, v150, v151, v152);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeAbortOnScaledAverageLinksPerFrame";
        goto LABEL_283;
      }
      *((_DWORD *)this + 57) = v9;
      return;
    case 46:
      uint64_t v153 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 46, a3, a4, a5, a6, a7, a8);
      if (v153) {
      IntParamSpec::validateValue((IntParamSpec *)v153, v9, 0, 0, v154, v155, v156, v157);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeAbortOnScaledAverageNodesPerFrame";
        goto LABEL_283;
      }
      *((_DWORD *)this + 58) = v9;
      return;
    case 47:
      uint64_t v158 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 47, a3, a4, a5, a6, a7, a8);
      if (v158) {
      IntParamSpec::validateValue((IntParamSpec *)v158, v9, 0, 0, v159, v160, v161, v162);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeAbortOnNumLinks";
        goto LABEL_283;
      }
      *((_DWORD *)this + 59) = v9;
      return;
    case 48:
      uint64_t v163 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 48, a3, a4, a5, a6, a7, a8);
      if (v163) {
      IntParamSpec::validateValue((IntParamSpec *)v163, v9, 0, 0, v164, v165, v166, v167);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeAbortOnNumNodes";
        goto LABEL_283;
      }
      *((_DWORD *)this + 6pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 49:
      uint64_t v168 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 49, a3, a4, a5, a6, a7, a8);
      if (v168) {
      IntParamSpec::validateValue((IntParamSpec *)v168, v9, 0, 0, v169, v170, v171, v172);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticePruneLinksPerSecondLimit";
        goto LABEL_283;
      }
      *((_DWORD *)this + 61) = v9;
      return;
    case 50:
      throwWrongTypeForParamId(50, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_152;
    case 51:
LABEL_152:
      uint64_t v173 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 51, a3, a4, a5, a6, a7, a8);
      if (v173) {
      IntParamSpec::validateValue((IntParamSpec *)v173, v9, 0, 0, v174, v175, v176, v177);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchLatticeThreshScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v9;
      return;
    case 52:
      throwWrongTypeForParamId(52, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_157;
    case 53:
LABEL_157:
      uint64_t v178 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 53, a3, a4, a5, a6, a7, a8);
      if (v178) {
      IntParamSpec::validateValue((IntParamSpec *)v178, v9, 0, 0, v179, v180, v181, v182);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchStateUsePrefiltererMinNumWords";
        goto LABEL_283;
      }
      *((_DWORD *)this + 66) = v9;
      return;
    case 54:
      uint64_t v183 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 54, a3, a4, a5, a6, a7, a8);
      if (v183) {
      IntParamSpec::validateValue((IntParamSpec *)v183, v9, 0, 0, v184, v185, v186, v187);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchThreshScoreIncrementWhenNonSilenceBest";
        goto LABEL_283;
      }
      *((_DWORD *)this + 67) = v9;
      return;
    case 55:
      uint64_t v188 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 55, a3, a4, a5, a6, a7, a8);
      if (v188) {
      IntParamSpec::validateValue((IntParamSpec *)v188, v9, 0, 0, v189, v190, v191, v192);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchThreshScoreWhenSilenceBest";
        goto LABEL_283;
      }
      *((_DWORD *)this + 68) = v9;
      return;
    case 56:
      uint64_t v193 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 56, a3, a4, a5, a6, a7, a8);
      if (v193) {
      IntParamSpec::validateValue((IntParamSpec *)v193, v9, 0, 0, v194, v195, v196, v197);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchWordEndAgainstBestWordEndThreshScoreDecrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 69) = v9;
      return;
    case 57:
      uint64_t v198 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 57, a3, a4, a5, a6, a7, a8);
      if (v198) {
      IntParamSpec::validateValue((IntParamSpec *)v198, v9, 0, 0, v199, v200, v201, v202);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchWordEndThreshScoreDecrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 7pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 58:
      throwWrongTypeForParamId(58, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_178;
    case 59:
LABEL_178:
      uint64_t v203 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 59, a3, a4, a5, a6, a7, a8);
      if (v203) {
      IntParamSpec::validateValue((IntParamSpec *)v203, v9, 0, 0, v204, v205, v206, v207);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchNonAcousticWordAndSuccessorLMThreshScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + 72) = v9;
      return;
    case 60:
      uint64_t v208 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 60, a3, a4, a5, a6, a7, a8);
      if (v208) {
      IntParamSpec::validateValue((IntParamSpec *)v208, v9, 0, 0, v209, v210, v211, v212);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchNonAcousticWordEndThreshScoreIncrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 73) = v9;
      return;
    case 61:
      uint64_t v213 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 61, a3, a4, a5, a6, a7, a8);
      if (v213) {
      IntParamSpec::validateValue((IntParamSpec *)v213, v9, 0, 0, v214, v215, v216, v217);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchNonAcousticWordLMThreshScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + 74) = v9;
      return;
    case 62:
      uint64_t v218 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 62, a3, a4, a5, a6, a7, a8);
      if (v218) {
      IntParamSpec::validateValue((IntParamSpec *)v218, v9, 0, 0, v219, v220, v221, v222);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchNonAcousticWordSeedThreshScoreIncrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 75) = v9;
      return;
    case 63:
      uint64_t v223 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 63, a3, a4, a5, a6, a7, a8);
      if (v223) {
      IntParamSpec::validateValue((IntParamSpec *)v223, v9, 0, 0, v224, v225, v226, v227);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchPelBackoffThreshScoreDecrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 76) = v9;
      return;
    case 64:
      throwWrongTypeForParamId(64, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_199;
    case 65:
LABEL_199:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_200;
    case 66:
LABEL_200:
      uint64_t v228 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 66, a3, a4, a5, a6, a7, a8);
      if (v228) {
      IntParamSpec::validateValue((IntParamSpec *)v228, v9, 0, 0, v229, v230, v231, v232);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchPerWordPenalty";
        goto LABEL_283;
      }
      *((_DWORD *)this + 81) = v9;
      return;
    case 67:
      throwWrongTypeForParamId(67, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_206;
    case 68:
LABEL_206:
      uint64_t v233 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 68, a3, a4, a5, a6, a7, a8);
      if (v233) {
      IntParamSpec::validateValue((IntParamSpec *)v233, v9, 0, 0, v234, v235, v236, v237);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchPrefilterResultUseCrumbBankDistanceMaxFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 83) = v9;
      return;
    case 69:
      throwWrongTypeForParamId(69, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_211;
    case 70:
LABEL_211:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_212;
    case 71:
LABEL_212:
      uint64_t v238 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 71, a3, a4, a5, a6, a7, a8);
      if (v238) {
      IntParamSpec::validateValue((IntParamSpec *)v238, v9, 0, 0, v239, v240, v241, v242);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchRecognitionContinuationInterval";
        goto LABEL_283;
      }
      *((_DWORD *)this + 85) = v9;
      return;
    case 72:
      uint64_t v243 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 72, a3, a4, a5, a6, a7, a8);
      if (v243) {
      IntParamSpec::validateValue((IntParamSpec *)v243, v9, 0, 0, v244, v245, v246, v247);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchRemoveInactiveWordsIntervalFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 86) = v9;
      return;
    case 73:
      throwWrongTypeForParamId(73, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_222;
    case 74:
LABEL_222:
      uint64_t v248 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 74, a3, a4, a5, a6, a7, a8);
      if (v248) {
      IntParamSpec::validateValue((IntParamSpec *)v248, v9, 0, 0, v249, v250, v251, v252);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchTraceLatticeThreshScoreIncrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 9pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 75:
      uint64_t v253 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 75, a3, a4, a5, a6, a7, a8);
      if (v253) {
      IntParamSpec::validateValue((IntParamSpec *)v253, v9, 0, 0, v254, v255, v256, v257);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchTraceThreshScoreIncrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 91) = v9;
      return;
    case 76:
      throwWrongTypeForParamId(76, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_231;
    case 77:
LABEL_231:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_232;
    case 78:
LABEL_232:
      uint64_t v258 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 78, a3, a4, a5, a6, a7, a8);
      if (v258) {
      IntParamSpec::validateValue((IntParamSpec *)v258, v9, 0, 0, v259, v260, v261, v262);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchWordSeedFinalSilenceThreshScoreDecrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 93) = v9;
      return;
    case 79:
      throwWrongTypeForParamId(79, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_238;
    case 80:
LABEL_238:
      uint64_t v263 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 80, a3, a4, a5, a6, a7, a8);
      if (v263) {
      IntParamSpec::validateValue((IntParamSpec *)v263, v9, 0, 0, v264, v265, v266, v267);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchWordSeedThreshScoreDecrement";
        goto LABEL_283;
      }
      *((_DWORD *)this + 95) = v9;
      return;
    case 81:
      throwWrongTypeForParamId(81, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_243;
    case 82:
LABEL_243:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_244;
    case 83:
LABEL_244:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_245;
    case 84:
LABEL_245:
      uint64_t v268 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 84, a3, a4, a5, a6, a7, a8);
      if (v268) {
      IntParamSpec::validateValue((IntParamSpec *)v268, v9, 0, 0, v269, v270, v271, v272);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchHierInactiveComponentScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + 102) = v9;
      return;
    case 85:
      throwWrongTypeForParamId(85, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_251;
    case 86:
LABEL_251:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_252;
    case 87:
LABEL_252:
      uint64_t v273 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 87, a3, a4, a5, a6, a7, a8);
      if (v273) {
      IntParamSpec::validateValue((IntParamSpec *)v273, v9, 0, 0, v274, v275, v276, v277);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "FstCoreMaxActive";
        goto LABEL_283;
      }
      *((_DWORD *)this + 108) = v9;
      return;
    case 88:
      uint64_t v278 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 88, a3, a4, a5, a6, a7, a8);
      if (v278) {
      IntParamSpec::validateValue((IntParamSpec *)v278, v9, 0, 0, v279, v280, v281, v282);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "FstCoreNBest";
        goto LABEL_283;
      }
      *((_DWORD *)this + 109) = v9;
      return;
    case 89:
      uint64_t v283 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 89, a3, a4, a5, a6, a7, a8);
      if (v283) {
      IntParamSpec::validateValue((IntParamSpec *)v283, v9, 0, 0, v284, v285, v286, v287);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "FstCoreHashPropagateBestTokensFirst";
        goto LABEL_283;
      }
      *((_DWORD *)this + 11pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 90:
      throwWrongTypeForParamId(90, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_266;
    case 91:
LABEL_266:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_267;
    case 92:
LABEL_267:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_268;
    case 93:
LABEL_268:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_269;
    case 94:
LABEL_269:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_270;
    case 95:
LABEL_270:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_271;
    case 96:
LABEL_271:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_272;
    case 97:
LABEL_272:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_273;
    case 98:
LABEL_273:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_274;
    case 99:
LABEL_274:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_275;
    case 100:
LABEL_275:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_276;
    case 101:
LABEL_276:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_277;
    case 102:
LABEL_277:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_278;
    case 103:
LABEL_278:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_279;
    case 104:
LABEL_279:
      uint64_t v288 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 104, a3, a4, a5, a6, a7, a8);
      if (v288) {
      IntParamSpec::validateValue((IntParamSpec *)v288, v9, 0, 0, v289, v290, v291, v292);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "FstCoreCollectTracesPeriod";
        goto LABEL_283;
      }
      *((_DWORD *)this + 124) = v9;
      return;
    case 105:
      uint64_t v293 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 105, a3, a4, a5, a6, a7, a8);
      if (v293) {
      IntParamSpec::validateValue((IntParamSpec *)v293, v9, 0, 0, v294, v295, v296, v297);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "FstCoreBackoffThreshScore";
        goto LABEL_283;
      }
      *((_DWORD *)this + 125) = v9;
      return;
    case 106:
      throwWrongTypeForParamId(106, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_292;
    case 107:
LABEL_292:
      uint64_t v298 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 107, a3, a4, a5, a6, a7, a8);
      if (v298) {
      IntParamSpec::validateValue((IntParamSpec *)v298, v9, 0, 0, v299, v300, v301, v302);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchPartialIncompleteMaxWords";
        goto LABEL_283;
      }
      *((_DWORD *)this + 127) = v9;
      return;
    case 108:
      uint64_t v303 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 108, a3, a4, a5, a6, a7, a8);
      if (v303) {
      IntParamSpec::validateValue((IntParamSpec *)v303, v9, 0, 0, v304, v305, v306, v307);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchPartialIncompleteMinListFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 128) = v9;
      return;
    case 109:
      uint64_t v308 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 109, a3, a4, a5, a6, a7, a8);
      if (v308) {
      IntParamSpec::validateValue((IntParamSpec *)v308, v9, 0, 0, v309, v310, v311, v312);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchPartialIncompleteMinWordFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 129) = v9;
      return;
    case 110:
      uint64_t v313 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 110, a3, a4, a5, a6, a7, a8);
      if (v313) {
      IntParamSpec::validateValue((IntParamSpec *)v313, v9, 0, 0, v314, v315, v316, v317);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchPartialCompleteMinWordFrames";
        goto LABEL_283;
      }
      *((_DWORD *)this + 13pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      break;
    case 111:
      uint64_t v318 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 111, a3, a4, a5, a6, a7, a8);
      if (v318) {
      IntParamSpec::validateValue((IntParamSpec *)v318, v9, 0, 0, v319, v320, v321, v322);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "SearchPartialRegularMinWordFrames";
LABEL_283:
        throwParamSetSetFailed(v22, "int", v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *((_DWORD *)this + 131) = v9;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void SearchParamSet::setDoubleParameter(SearchParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_18;
    case 17:
LABEL_18:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 17, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchConTransAccDecayFactor";
        goto LABEL_138;
      }
      *((double *)this + 11) = a3;
      return;
    case 18:
      throwWrongTypeForParamId(18, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_24;
    case 19:
LABEL_24:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_25;
    case 20:
LABEL_25:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_26;
    case 21:
LABEL_26:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_27;
    case 22:
LABEL_27:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_28;
    case 23:
LABEL_28:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_29;
    case 24:
LABEL_29:
      uint64_t v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 24, a4, a5, a6, a7, a8, a9);
      if (v25) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchEnableGenoneScoreCacheThresh";
        goto LABEL_138;
      }
      *((double *)this + 17) = a3;
      return;
    case 25:
      uint64_t v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 25, a4, a5, a6, a7, a8, a9);
      if (v31) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchFmpeMinimumPosteriorProbability";
        goto LABEL_138;
      }
      *((double *)this + 18) = a3;
      return;
    case 26:
      throwWrongTypeForParamId(26, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_39;
    case 27:
LABEL_39:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_40;
    case 28:
LABEL_40:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_41;
    case 29:
LABEL_41:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_42;
    case 30:
LABEL_42:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_43;
    case 31:
LABEL_43:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_44;
    case 32:
LABEL_44:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_45;
    case 33:
LABEL_45:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_46;
    case 34:
LABEL_46:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_47;
    case 35:
LABEL_47:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_48;
    case 36:
LABEL_48:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_49;
    case 37:
LABEL_49:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_50;
    case 38:
LABEL_50:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_51;
    case 39:
LABEL_51:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_52;
    case 40:
LABEL_52:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_53;
    case 41:
LABEL_53:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_54;
    case 42:
LABEL_54:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_55;
    case 43:
LABEL_55:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_56;
    case 44:
LABEL_56:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_57;
    case 45:
LABEL_57:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_58;
    case 46:
LABEL_58:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_59;
    case 47:
LABEL_59:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_60;
    case 48:
LABEL_60:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_61;
    case 49:
LABEL_61:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_62;
    case 50:
LABEL_62:
      uint64_t v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 50, a4, a5, a6, a7, a8, a9);
      if (v37) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v37, a3, 0, 0, v38, v39, v40, v41, v42);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchLatticeNormalizedThreshFactor";
        goto LABEL_138;
      }
      *((double *)this + 31) = a3;
      return;
    case 51:
      throwWrongTypeForParamId(51, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_68;
    case 52:
LABEL_68:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_69;
    case 53:
LABEL_69:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_70;
    case 54:
LABEL_70:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_71;
    case 55:
LABEL_71:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_72;
    case 56:
LABEL_72:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_73;
    case 57:
LABEL_73:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_74;
    case 58:
LABEL_74:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_75;
    case 59:
LABEL_75:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_76;
    case 60:
LABEL_76:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_77;
    case 61:
LABEL_77:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_78;
    case 62:
LABEL_78:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_79;
    case 63:
LABEL_79:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_80;
    case 64:
LABEL_80:
      uint64_t v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 64, a4, a5, a6, a7, a8, a9);
      if (v43) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v43, a3, 0, 0, v44, v45, v46, v47, v48);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchPelScoreScale";
        goto LABEL_138;
      }
      *((double *)this + 39) = a3;
      return;
    case 65:
      throwWrongTypeForParamId(65, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_86;
    case 66:
LABEL_86:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_87;
    case 67:
LABEL_87:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_88;
    case 68:
LABEL_88:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_89;
    case 69:
LABEL_89:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_90;
    case 70:
LABEL_90:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_91;
    case 71:
LABEL_91:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_92;
    case 72:
LABEL_92:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_93;
    case 73:
LABEL_93:
      uint64_t v49 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 73, a4, a5, a6, a7, a8, a9);
      if (v49) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v49, a3, 0, 0, v50, v51, v52, v53, v54);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchTraceLatticeNormalizedThreshFactor";
        goto LABEL_138;
      }
      *((double *)this + 44) = a3;
      return;
    case 74:
      throwWrongTypeForParamId(74, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_99;
    case 75:
LABEL_99:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_100;
    case 76:
LABEL_100:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_101;
    case 77:
LABEL_101:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_102;
    case 78:
LABEL_102:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_103;
    case 79:
LABEL_103:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_104;
    case 80:
LABEL_104:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_105;
    case 81:
LABEL_105:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_106;
    case 82:
LABEL_106:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_107;
    case 83:
LABEL_107:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_108;
    case 84:
LABEL_108:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_109;
    case 85:
LABEL_109:
      uint64_t v55 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 85, a4, a5, a6, a7, a8, a9);
      if (v55) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v55, a3, 0, 0, v56, v57, v58, v59, v60);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "FstCoreBeam";
        goto LABEL_138;
      }
      *((double *)this + 52) = a3;
      return;
    case 86:
      uint64_t v61 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 86, a4, a5, a6, a7, a8, a9);
      if (v61) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v61, a3, 0, 0, v62, v63, v64, v65, v66);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "FstCoreLatticeBeam";
        goto LABEL_138;
      }
      *((double *)this + 53) = a3;
      break;
    case 87:
      throwWrongTypeForParamId(87, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_119;
    case 88:
LABEL_119:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_120;
    case 89:
LABEL_120:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_121;
    case 90:
LABEL_121:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_122;
    case 91:
LABEL_122:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_123;
    case 92:
LABEL_123:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_124;
    case 93:
LABEL_124:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_125;
    case 94:
LABEL_125:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_126;
    case 95:
LABEL_126:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_127;
    case 96:
LABEL_127:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_128;
    case 97:
LABEL_128:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_129;
    case 98:
LABEL_129:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_130;
    case 99:
LABEL_130:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_131;
    case 100:
LABEL_131:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_132;
    case 101:
LABEL_132:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_133;
    case 102:
LABEL_133:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_134;
    case 103:
LABEL_134:
      uint64_t v67 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 103, a4, a5, a6, a7, a8, a9);
      if (v67) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v67, a3, 0, 0, v68, v69, v70, v71, v72);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "FstCoreLateLatticeArcFingerSuckPenalty";
LABEL_138:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 61) = a3;
      }
      break;
    case 104:
      throwWrongTypeForParamId(104, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_143;
    case 105:
LABEL_143:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_144;
    case 106:
LABEL_144:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_145;
    case 107:
LABEL_145:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_146;
    case 108:
LABEL_146:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_147;
    case 109:
LABEL_147:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_148;
    case 110:
LABEL_148:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_149;
    case 111:
LABEL_149:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_150;
    default:
LABEL_150:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void SearchParamSet::setStringParameter(SearchParamSet *this, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      SearchParamSet::setParamSetSearchConTransAccFactorList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 20:
      throwWrongTypeForParamId(20, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 21:
LABEL_24:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 22:
LABEL_25:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 23:
LABEL_26:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 24:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 25:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 26:
LABEL_29:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 27:
LABEL_30:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 28:
LABEL_31:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 29:
LABEL_32:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 30:
LABEL_33:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 31:
LABEL_34:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 32:
LABEL_35:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 33:
LABEL_36:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 34:
LABEL_37:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 35:
LABEL_38:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 36:
LABEL_39:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 37:
LABEL_40:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 38:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 39:
LABEL_42:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 40:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 41:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 42:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 43:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 44:
LABEL_47:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 45:
LABEL_48:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 46:
LABEL_49:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 47:
LABEL_50:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 48:
LABEL_51:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 49:
LABEL_52:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 50:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 51:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 52:
LABEL_55:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 53:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 54:
LABEL_57:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 55:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 56:
LABEL_59:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 57:
LABEL_60:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 58:
LABEL_61:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 59:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 60:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 61:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 62:
LABEL_65:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 63:
LABEL_66:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 64:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 65:
LABEL_68:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 66:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 67:
LABEL_70:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 68:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 69:
LABEL_72:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 70:
LABEL_73:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 71:
LABEL_74:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 72:
LABEL_75:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 73:
LABEL_76:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_77;
    case 74:
LABEL_77:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_78;
    case 75:
LABEL_78:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_79;
    case 76:
LABEL_79:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_80;
    case 77:
LABEL_80:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_81;
    case 78:
LABEL_81:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_82;
    case 79:
LABEL_82:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_83;
    case 80:
LABEL_83:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_84;
    case 81:
LABEL_84:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_85;
    case 82:
LABEL_85:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_86;
    case 83:
LABEL_86:
      SearchParamSet::setParamSetSearchHierScorerBeamList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 84:
      throwWrongTypeForParamId(84, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_90;
    case 85:
LABEL_90:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_91;
    case 86:
LABEL_91:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_92;
    case 87:
LABEL_92:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_93;
    case 88:
LABEL_93:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_94;
    case 89:
LABEL_94:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_95;
    case 90:
LABEL_95:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_96;
    case 91:
LABEL_96:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_97;
    case 92:
LABEL_97:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_98;
    case 93:
LABEL_98:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_99;
    case 94:
LABEL_99:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_100;
    case 95:
LABEL_100:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_101;
    case 96:
LABEL_101:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_102;
    case 97:
LABEL_102:
      SearchParamSet::setParamSetSearchHierScorerCutoffRatioList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 98:
      throwWrongTypeForParamId(98, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_106;
    case 99:
LABEL_106:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_107;
    case 100:
LABEL_107:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_108;
    case 101:
LABEL_108:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_109;
    case 102:
LABEL_109:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_110;
    case 103:
LABEL_110:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_111;
    case 104:
LABEL_111:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_112;
    case 105:
LABEL_112:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_113;
    case 106:
LABEL_113:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_114;
    case 107:
LABEL_114:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_115;
    case 108:
LABEL_115:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_116;
    case 109:
LABEL_116:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_117;
    case 110:
LABEL_117:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_118;
    case 111:
LABEL_118:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void SearchParamSet::setEnumParameter(SearchParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  int v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 23, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId) {
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchDecimationType";
        goto LABEL_123;
      }
      *((_DWORD *)this + 33) = v9;
      return;
    case 24:
      throwWrongTypeForParamId(24, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 25:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 26:
LABEL_31:
      uint64_t v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 26, a3, a4, a5, a6, a7, a8);
      if (v25) {
      EnumParamSpec::validateValue((EnumParamSpec *)v25, v9, v26, v27, v28, v29, v30, v31);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchFrameTransformerThreadingType";
        goto LABEL_123;
      }
      *((_DWORD *)this + 38) = v9;
      return;
    case 27:
      uint64_t v32 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 27, a3, a4, a5, a6, a7, a8);
      if (v32) {
      EnumParamSpec::validateValue((EnumParamSpec *)v32, v9, v33, v34, v35, v36, v37, v38);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchThreadingType";
        goto LABEL_123;
      }
      *((_DWORD *)this + 39) = v9;
      return;
    case 28:
      throwWrongTypeForParamId(28, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 29:
LABEL_41:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 30:
LABEL_42:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 31:
LABEL_43:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 32:
LABEL_44:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 33:
LABEL_45:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 34:
LABEL_46:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 35:
LABEL_47:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 36:
LABEL_48:
      uint64_t v39 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 36, a3, a4, a5, a6, a7, a8);
      if (v39) {
      EnumParamSpec::validateValue((EnumParamSpec *)v39, v9, v40, v41, v42, v43, v44, v45);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchLMLimit";
        goto LABEL_123;
      }
      *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v9;
      return;
    case 37:
      throwWrongTypeForParamId(37, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 38:
LABEL_54:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 39:
LABEL_55:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 40:
LABEL_56:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 41:
LABEL_57:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 42:
LABEL_58:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 43:
LABEL_59:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 44:
LABEL_60:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 45:
LABEL_61:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 46:
LABEL_62:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 47:
LABEL_63:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 48:
LABEL_64:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 49:
LABEL_65:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 50:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 51:
LABEL_67:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 52:
LABEL_68:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 53:
LABEL_69:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 54:
LABEL_70:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 55:
LABEL_71:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 56:
LABEL_72:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 57:
LABEL_73:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 58:
LABEL_74:
      uint64_t v46 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 58, a3, a4, a5, a6, a7, a8);
      if (v46) {
      EnumParamSpec::validateValue((EnumParamSpec *)v46, v9, v47, v48, v49, v50, v51, v52);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchNodeSkippingType";
        goto LABEL_123;
      }
      *((_DWORD *)this + 71) = v9;
      return;
    case 59:
      throwWrongTypeForParamId(59, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_80;
    case 60:
LABEL_80:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_81;
    case 61:
LABEL_81:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_82;
    case 62:
LABEL_82:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_83;
    case 63:
LABEL_83:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_84;
    case 64:
LABEL_84:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_85;
    case 65:
LABEL_85:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_86;
    case 66:
LABEL_86:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_87;
    case 67:
LABEL_87:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_88;
    case 68:
LABEL_88:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_89;
    case 69:
LABEL_89:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_90;
    case 70:
LABEL_90:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_91;
    case 71:
LABEL_91:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_92;
    case 72:
LABEL_92:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_93;
    case 73:
LABEL_93:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_94;
    case 74:
LABEL_94:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_95;
    case 75:
LABEL_95:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_96;
    case 76:
LABEL_96:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_97;
    case 77:
LABEL_97:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_98;
    case 78:
LABEL_98:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_99;
    case 79:
LABEL_99:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_100;
    case 80:
LABEL_100:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_101;
    case 81:
LABEL_101:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_102;
    case 82:
LABEL_102:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_103;
    case 83:
LABEL_103:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_104;
    case 84:
LABEL_104:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_105;
    case 85:
LABEL_105:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_106;
    case 86:
LABEL_106:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_107;
    case 87:
LABEL_107:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_108;
    case 88:
LABEL_108:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_109;
    case 89:
LABEL_109:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_110;
    case 90:
LABEL_110:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_111;
    case 91:
LABEL_111:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_112;
    case 92:
LABEL_112:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_113;
    case 93:
LABEL_113:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_114;
    case 94:
LABEL_114:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_115;
    case 95:
LABEL_115:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_116;
    case 96:
LABEL_116:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_117;
    case 97:
LABEL_117:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_118;
    case 98:
LABEL_118:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_119;
    case 99:
LABEL_119:
      uint64_t v53 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 99, a3, a4, a5, a6, a7, a8);
      if (v53) {
      EnumParamSpec::validateValue((EnumParamSpec *)v53, v9, v54, v55, v56, v57, v58, v59);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "FstCoreLatticeGeneration";
        goto LABEL_123;
      }
      *((_DWORD *)this + 119) = v9;
      break;
    case 100:
      throwWrongTypeForParamId(100, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_128;
    case 101:
LABEL_128:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_129;
    case 102:
LABEL_129:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_130;
    case 103:
LABEL_130:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_131;
    case 104:
LABEL_131:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_132;
    case 105:
LABEL_132:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_133;
    case 106:
LABEL_133:
      uint64_t v60 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A90, 106, a3, a4, a5, a6, a7, a8);
      if (v60) {
      EnumParamSpec::validateValue((EnumParamSpec *)v60, v9, v61, v62, v63, v64, v65, v66);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "SearchPartialIncludePrefiltererResult";
LABEL_123:
        throwParamSetSetFailed(v24, "enum", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((_DWORD *)this + 126) = v9;
      }
      break;
    case 107:
      throwWrongTypeForParamId(107, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_139;
    case 108:
LABEL_139:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_140;
    case 109:
LABEL_140:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_141;
    case 110:
LABEL_141:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_142;
    case 111:
LABEL_142:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_143;
    default:
LABEL_143:
      throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void SearchParamSet::~SearchParamSet(SearchParamSet *this)
{
  SearchParamSet::~SearchParamSet(this);

  JUMPOUT(0x216698730);
}

{
  DgnString *v2;

  *(void *)this = &unk_26C4E0690;
  uint64_t v2 = (SearchParamSet *)((char *)this + 104);
  DgnString::~DgnString((SearchParamSet *)((char *)this + 456));
  DgnString::~DgnString((SearchParamSet *)((char *)this + 392));
  DgnString::~DgnString(v2);
  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((SearchParamSet *)((char *)this + 8));
}

uint64_t SDWord_New(unint64_t a1, char *a2)
{
  uint64_t v4 = SdapiInsurance::SdapiInsurance(v15, "SDWord_New", 1, 0, 393);
  if (v15[97])
  {
    if (!a2) {
      throwBadStringPointer(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    v15[151] = 0;
    if (gbShowCalls) {
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, '%.500s')\n", v5, v6, v7, v8, "SDWord_New", a1, a2);
    }
    uint64_t v12 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v6, v7, v8, v9, v10, v11);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v6, v7, v8, v9, v10, v11);
    }
    uint64_t v13 = (ModelMgr::createWord(v12, (unsigned __int16)a1, a2, 0xFFFFFFLL, "New", v9, v10, v11) & 0xFFFFFF)
        + 1;
  }
  else
  {
    uint64_t v13 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v15);
  return v13;
}

void sub_213F1A970()
{
}

void SDWord_DeleteList(unint64_t a1, uint64_t a2, unsigned int a3)
{
  SdapiInsurance::SdapiInsurance(v38, "SDWord_DeleteList", 1, 0, 398);
  if (v38[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx, %llu)\n", v6, v7, v8, v9, "SDWord_DeleteList", a1, v13, a3);
    }
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    }
    uint64_t v14 = ModelMgr::smpModelMgr;
    uint64_t VocOrThrow = ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12);
    uint64_t v22 = *(WordList **)(VocOrThrow + 48);
    if (!a2 && a3) {
      throwBadLengthForNullPointer(a3, "DgnVerifyReadPtr", v15, v16, v17, v18, v19, v20);
    }
    LOBYTE(v36) = 0;
    if ((*(unsigned int (**)(void))(**(void **)(VocOrThrow + 72) + 192))(*(void *)(VocOrThrow + 72))) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 257, (uint64_t)"sdapi/sdword", 2, (uint64_t)"%u", v23, v24, a1);
    }
    uint64_t v35 = v14;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    if (a3)
    {
      uint64_t v39 = 0;
      unint64_t v25 = realloc_array(0, &v39, 4 * a3, 0, 0, 1);
      uint64_t v32 = 0;
      uint64_t v36 = v39;
      LODWORD(v37) = a3;
      HIDWORD(v37) = v25 >> 2;
      do
      {
        unint64_t v33 = *(void *)(a2 + 8 * v32);
        unsigned int v34 = v33 - 1;
        if ((v33 - 1) >> 32) {
          throwBadSdapiArgument("SDhWord", *(void *)(a2 + 8 * v32), v26, v27, v28, v29, v30, v31);
        }
        if (v34 >= 0xFFFFF4) {
          throwBadSdapiArgument("SDhWord", v33, v26, v27, v28, v29, v30, v31);
        }
        v36[v32] = v34;
        WordList::verifyVisible(v22, v33 - 1, v26, v27, v28, v29, v30, v31);
        if ((*(_DWORD *)(*((void *)v22 + 78) + 4 * (v34 >> 5)) >> v34)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 269, (uint64_t)"sdapi/sdword", 13, (uint64_t)"%u %u", v30, v31, v32);
        }
        ++v32;
      }
      while (a3 != v32);
    }
    else
    {
      LODWORD(v37) = 0;
    }
    ModelMgr::deleteWordFamilyFromWordList(v35, (unsigned __int16)a1, (uint64_t)&v36);
    ModelMgr::rebuildAllStalePrefilterers(v35);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v36);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v38);
}

void sub_213F1AC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a2 == 2)
  {
    uint64_t v18 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v18, v19);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a17);
      _Unwind_Resume(a1);
    }
    uint64_t v20 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v20);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F1AC14);
}

uint64_t SDWord_GetHandle(unint64_t a1, const char *a2)
{
  uint64_t v4 = SdapiInsurance::SdapiInsurance(v17, "SDWord_GetHandle", 1, 1, 399);
  if (v17[97])
  {
    if (!a2) {
      throwBadStringPointer(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    v17[151] = 0;
    if (gbShowCalls) {
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, '%.500s')\n", v5, v6, v7, v8, "SDWord_GetHandle", a1, a2);
    }
    uint64_t v12 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v6, v7, v8, v9, v10, v11);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v6, v7, v8, v9, v10, v11);
    }
    uint64_t VocOrThrow = ModelMgr::getVocOrThrow(v12, (unsigned __int16)a1, v6, v7, v8, v9, v10, v11);
    if (a2 && *a2 && (unsigned int v14 = WordList::lookupWord(*(WordList **)(VocOrThrow + 48), a2), v14 != 0xFFFFFF)) {
      uint64_t v15 = v14 + 1;
    }
    else {
      uint64_t v15 = -1;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v17);
  return v15;
}

void sub_213F1AE2C()
{
}

uint64_t SDWord_GetName(unint64_t a1, unint64_t a2, char *a3, unsigned int a4)
{
  SdapiInsurance::SdapiInsurance(v27, "SDWord_GetName", 1, 1, 400);
  if (v27[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v15 = a3;
      }
      else {
        uint64_t v15 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDWord_GetName", a1, a2, v15, a4);
    }
    if (!a3 && a4) {
      throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v9, v10, v11, v12, v13, v14);
    }
    uint64_t v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    uint64_t v23 = *(WordList **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 48);
    unsigned int v24 = a2 - 1;
    if ((a2 - 1) >> 32) {
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    }
    if (v24 >= 0xFFFFF4) {
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    }
    WordList::verifyVisible(v23, a2 - 1, v17, v18, v19, v20, v21, v22);
    uint64_t v25 = sdUtilStrMove(a3, a4, (const char *)(*((void *)v23 + 28) + *(unsigned int *)(*((void *)v23 + 25) + 4 * v24)));
  }
  else
  {
    uint64_t v25 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v27);
  return v25;
}

void sub_213F1B024()
{
}

void SDWord_GetInfo(unint64_t a1, unint64_t a2, uint64_t a3)
{
  SdapiInsurance::SdapiInsurance(v27, "SDWord_GetInfo", 1, 1, 402);
  if (v27[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v13 = a3;
      }
      else {
        uint64_t v13 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx)\n", v6, v7, v8, v9, "SDWord_GetInfo", a1, a2, v13);
    }
    if (!a3) {
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v7, v8, v9, v10, v11, v12);
    }
    uint64_t v14 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    }
    uint64_t v21 = *(void *)(ModelMgr::getVocOrThrow(v14, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12) + 48);
    unsigned int v22 = a2 - 1;
    if ((a2 - 1) >> 32) {
      throwBadSdapiArgument("SDhWord", a2, v15, v16, v17, v18, v19, v20);
    }
    if (v22 >= 0xFFFFF4) {
      throwBadSdapiArgument("SDhWord", a2, v15, v16, v17, v18, v19, v20);
    }
    WordList::verifyVisible((WordList *)v21, a2 - 1, v15, v16, v17, v18, v19, v20);
    *(void *)uint64_t v26 = 0;
    WordList::getNumProns((uint64_t *)v21, a2 - 1, &v26[1], v26);
    unsigned int v23 = v26[0];
    *(_DWORD *)a3 = v26[1];
    *(_DWORD *)(a3 + 4) = v23;
    uint64_t v24 = 1;
    if (((*(_DWORD *)(*(void *)(v21 + 624) + 4 * (v22 >> 5)) >> v22) & 1) == 0) {
      uint64_t v24 = 2;
    }
    *(void *)(a3 + 8) = v24;
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = WordList::getIncludingStateRefCount((WordList *)v21, (int)a2 - 1);
    *(_DWORD *)(a3 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = WordList::getIncludingRuleRefCount((WordList *)v21, (int)a2 - 1);
    *(_DWORD *)(a3 + 24) = WordList::getIncludingLatticeRefCount((WordList *)v21, (int)a2 - 1);
    *(_DWORD *)(a3 + 28) = 0;
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = WordList::getIncludingPrefilterResultRefCount((WordList *)v21, (int)a2 - 1);
    *(_DWORD *)(a3 + 36) = WordList::getIncludingSausageRefCount((WordList *)v21, (int)a2 - 1);
    int v25 = *(_DWORD *)(v21 + 516);
    if (v25) {
      int v25 = *(_DWORD *)(v21 + 528) > v22 && *(_DWORD *)(*(void *)(v21 + 520) + 4 * v22) != -1;
    }
    *(_DWORD *)(a3 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v25;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v27);
}

void sub_213F1B258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 2)
  {
    uint64_t v16 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v16, v17);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a15);
      _Unwind_Resume(a1);
    }
    uint64_t v18 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v18);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F1B23CLL);
}

void SDWord_GetTagBits(unint64_t a1, unint64_t a2, unint64_t a3, void *a4, unsigned int a5)
{
  SdapiInsurance::SdapiInsurance(v33, "SDWord_GetTagBits", 1, 1, 403);
  if (!v33[97]) {
    goto LABEL_37;
  }
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments) {
      uint64_t v17 = a4;
    }
    else {
      uint64_t v17 = 0;
    }
    xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v10, v11, v12, v13, "SDWord_GetTagBits", a1, a2, a3, v17, a5);
  }
  if (!a4 && a5) {
    throwBadLengthForNullPointer(a5, "DgnVerifyWritePtr", v11, v12, v13, v14, v15, v16);
  }
  if (a3 - 1 >= 2) {
    throwBadSdapiArgument("SDVocTagSetType", a3, v11, v12, v13, v14, v15, v16);
  }
  if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
    throwBadSdapiArgument("SDhVoc", a1, v11, v12, v13, v14, v15, v16);
  }
  if ((unsigned __int16)a1 - 1 >= 0x7B) {
    throwBadSdapiArgument("SDhVoc", a1, v11, v12, v13, v14, v15, v16);
  }
  uint64_t v24 = *(void *)(ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v11, v12, v13, v14, v15, v16)+ 48);
  unsigned int v25 = a2 - 1;
  if ((a2 - 1) >> 32) {
    throwBadSdapiArgument("SDhWord", a2, v18, v19, v20, v21, v22, v23);
  }
  if (v25 >= 0xFFFFF4) {
    throwBadSdapiArgument("SDhWord", a2, v18, v19, v20, v21, v22, v23);
  }
  WordList::verifyVisible((WordList *)v24, a2 - 1, v18, v19, v20, v21, v22, v23);
  if (a3 == 1)
  {
    if (!*(_DWORD *)(v24 + 552))
    {
      uint64_t v28 = &errStr_sdapi_sdword_E_REQUIREDTAGS;
      uint64_t v29 = 12;
      uint64_t v30 = 399;
      goto LABEL_26;
    }
  }
  else if (!*(_DWORD *)(v24 + 516))
  {
    uint64_t v28 = &errStr_sdapi_sdword_E_OPTIONALTAGS;
    uint64_t v29 = 3;
    uint64_t v30 = 401;
LABEL_26:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", v30, (uint64_t)"sdapi/sdword", v29, (uint64_t)"%s", v26, v27, (char)v28);
  }
  uint64_t v31 = 516;
  if (a3 == 1) {
    uint64_t v31 = 552;
  }
  unsigned int v32 = (*(_DWORD *)(v24 + v31) + 7) >> 3;
  if (v32 != a5) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 403, (uint64_t)"sdapi/sdword", 4, (uint64_t)"%u %u", v26, v27, v32);
  }
  if (a3 != 1 && (*(_DWORD *)(v24 + 528) <= v25 || *(_DWORD *)(*(void *)(v24 + 520) + 4 * v25) == -1))
  {
    if (a5) {
      bzero(a4, a5);
    }
  }
  else
  {
    WordList::getTagBitsAsBytes((void *)v24, a2 - 1, a3 == 1, (unsigned __int8 *)a4, a5);
  }
LABEL_37:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v33);
}

void sub_213F1B550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 2)
  {
    uint64_t v16 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v16, v17);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a15);
      _Unwind_Resume(a1);
    }
    uint64_t v18 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v18);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F1B52CLL);
}

void *WordList::getTagBitsAsBytes(void *this, unsigned int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (a3) {
    return BitArray::getBitsFromRangeAsBytes(this + 72, a4, a5, *((_DWORD *)this + 138) * a2, *((_DWORD *)this + 138) * a2 + *((_DWORD *)this + 138));
  }
  if (a5)
  {
    unsigned int v5 = *(_DWORD *)(this[65] + 4 * a2);
    uint64_t v6 = a5;
    do
    {
      *a4++ = *(unsigned char *)(this[67] + v5++);
      --v6;
    }
    while (v6);
  }
  return this;
}

uint64_t SDWord_WordsHaveCommonPron(unint64_t *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  SdapiInsurance::SdapiInsurance(v85, "SDWord_WordsHaveCommonPron", 1, 1, 408);
  if (!v85[97])
  {
    uint64_t hasCommonProns = 0;
    goto LABEL_81;
  }
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = a3;
    if (!gbShowCallPointerArguments) {
      uint64_t v15 = 0;
    }
    xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, %llu, Masked:0x%016llx, %llu)\n", v7, v8, v9, v10, "SDWord_WordsHaveCommonPron", v14, a2, v15, a4);
  }
  if (!a1 && a2) {
    throwBadLengthForNullPointer(a2, "DgnVerifyReadPtr", v8, v9, v10, v11, v12, v13);
  }
  LOBYTE(v83) = 0;
  if (!a3 && a4) {
    throwBadLengthForNullPointer(a4, "DgnVerifyReadPtr", v8, v9, v10, v11, v12, v13);
  }
  LOBYTE(v83) = 0;
  if (a2 && a4)
  {
    uint64_t v83 = 0;
    uint64_t v84 = 0;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 533, (uint64_t)"sdapi/sdword", 8, (uint64_t)"%s", v12, v13, (char)&errStr_sdapi_sdword_E_ZERO_WORDS);
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    if (!a2) {
      goto LABEL_20;
    }
  }
  uint64_t v81 = 0;
  HIDWORD(v84) = realloc_array(0, &v81, 4 * a2, 0, 0, 1) >> 2;
  uint64_t v83 = v81;
LABEL_20:
  LODWORD(v84) = a2;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  if (a4)
  {
    uint64_t v78 = 0;
    HIDWORD(v82) = realloc_array(0, &v78, 4 * a4, 0, 0, 1) >> 2;
    uint64_t v81 = v78;
  }
  LODWORD(v82) = a4;
  v80[1] = 0;
  v80[0] = 0;
  uint64_t v22 = (ModelMgr *)ModelMgr::smpModelMgr;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v23 = *a1;
  if (HIDWORD(*a1) || (v23 & 0xFFFF0000) != 0) {
    throwBadSdapiArgument("SDhVoc", *a1, v16, v17, v18, v19, v20, v21);
  }
  if ((unsigned __int16)v23 - 1 >= 0x7B) {
    throwBadSdapiArgument("SDhVoc", v23, v16, v17, v18, v19, v20, v21);
  }
  unsigned int v24 = v79;
  if (v79 == HIDWORD(v79))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
    unsigned int v24 = v79;
  }
  unsigned int v76 = a4;
  unsigned int v25 = (unsigned __int16 *)v78;
  *((_WORD *)v78 + v24) = v23;
  LODWORD(v79) = v24 + 1;
  uint64_t VocOrThrow = (Voc *)ModelMgr::getVocOrThrow(v22, *v25, v16, v17, v18, v19, v20, v21);
  if (a2)
  {
    uint64_t v33 = 0;
    do
    {
      unsigned int v34 = &a1[2 * v33];
      unint64_t v35 = *v34;
      unint64_t v36 = v34[1];
      uint64_t v37 = *v34 & 0xFFFF0000;
      if (HIDWORD(v35)) {
        BOOL v38 = 0;
      }
      else {
        BOOL v38 = v37 == 0;
      }
      if (!v38) {
        throwBadSdapiArgument("SDhVoc", v35, v26, v27, v28, v29, v30, v31);
      }
      if ((unsigned __int16)v35 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v35, v26, v27, v28, v29, v30, v31);
      }
      uint64_t v45 = (const Voc *)ModelMgr::getVocOrThrow(v22, (unsigned __int16)v35, v26, v27, v28, v29, v30, v31);
      uint64_t v46 = v79;
      if (!v79) {
        goto LABEL_44;
      }
      uint64_t v47 = (unsigned __int16 *)v78;
      uint64_t v48 = 0xFFFFFFFFLL;
      while (1)
      {
        int v49 = *v47++;
        if (v49 == (unsigned __int16)v35) {
          break;
        }
        --v48;
        if (!--v46) {
          goto LABEL_44;
        }
      }
      if (!v48)
      {
LABEL_44:
        Voc::isPhonemeSetCompatibleWithVoc(VocOrThrow, v45, 1);
        unsigned int v50 = v79;
        if (v79 == HIDWORD(v79))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
          unsigned int v50 = v79;
        }
        *((_WORD *)v78 + v5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v35;
        LODWORD(v79) = v50 + 1;
      }
      unsigned int v51 = v36 - 1;
      if ((v36 - 1) >> 32) {
        throwBadSdapiArgument("SDhWord", v36, v39, v40, v41, v42, v43, v44);
      }
      if (v51 >= 0xFFFFF4) {
        throwBadSdapiArgument("SDhWord", v36, v39, v40, v41, v42, v43, v44);
      }
      uint64_t v52 = (WordList *)*((void *)v45 + 6);
      WordList::verifyVisible(v52, v51, v39, v40, v41, v42, v43, v44);
      *(void *)uint64_t v80 = 0;
      WordList::getNumProns((uint64_t *)v52, v51, &v80[1], v80);
      if (!(v80[1] + v80[0])) {
        goto LABEL_78;
      }
      v83[v33++] = v51 & 0xFFFFFF | (v35 << 25);
    }
    while (v33 != a2);
  }
  if (v76)
  {
    uint64_t v53 = 0;
    while (1)
    {
      uint64_t v54 = (unint64_t *)(a3 + 16 * v53);
      unint64_t v55 = *v54;
      unint64_t v56 = v54[1];
      uint64_t v57 = *v54 & 0xFFFF0000;
      if (HIDWORD(v55)) {
        BOOL v58 = 0;
      }
      else {
        BOOL v58 = v57 == 0;
      }
      if (!v58) {
        throwBadSdapiArgument("SDhVoc", v55, v26, v27, v28, v29, v30, v31);
      }
      if ((unsigned __int16)v55 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v55, v26, v27, v28, v29, v30, v31);
      }
      uint64_t v65 = (const Voc *)ModelMgr::getVocOrThrow(v22, (unsigned __int16)v55, v26, v27, v28, v29, v30, v31);
      uint64_t v66 = v79;
      if (!v79) {
        goto LABEL_68;
      }
      uint64_t v67 = (unsigned __int16 *)v78;
      uint64_t v68 = 0xFFFFFFFFLL;
      while (1)
      {
        int v69 = *v67++;
        if (v69 == (unsigned __int16)v55) {
          break;
        }
        --v68;
        if (!--v66) {
          goto LABEL_68;
        }
      }
      if (!v68)
      {
LABEL_68:
        Voc::isPhonemeSetCompatibleWithVoc(VocOrThrow, v65, 1);
        unsigned int v70 = v79;
        if (v79 == HIDWORD(v79))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
          unsigned int v70 = v79;
        }
        *((_WORD *)v78 + v7pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v55;
        LODWORD(v79) = v70 + 1;
      }
      unsigned int v71 = v56 - 1;
      if ((v56 - 1) >> 32) {
        throwBadSdapiArgument("SDhWord", v56, v59, v60, v61, v62, v63, v64);
      }
      if (v71 >= 0xFFFFF4) {
        throwBadSdapiArgument("SDhWord", v56, v59, v60, v61, v62, v63, v64);
      }
      uint64_t v72 = (WordList *)*((void *)v65 + 6);
      WordList::verifyVisible(v72, v71, v59, v60, v61, v62, v63, v64);
      *(void *)uint64_t v80 = 0;
      WordList::getNumProns((uint64_t *)v72, v71, &v80[1], v80);
      if (!(v80[1] + v80[0])) {
        break;
      }
      *((_DWORD *)v81 + v53++) = v71 & 0xFFFFFF | (v55 << 25);
      if (v53 == v76) {
        goto LABEL_77;
      }
    }
LABEL_78:
    uint64_t hasCommonProns = 0;
    goto LABEL_79;
  }
LABEL_77:
  uint64_t v73 = MemChunkAlloc(0xC0uLL, 0);
  PhonemeLattice::PhonemeLattice(v73, &v83);
  uint64_t hasCommonProns = PhonemeLattice::hasCommonProns((unint64_t)v73, (uint64_t *)&v81, 0);
  DgnDelete<PhonemeLattice>((uint64_t)v73);
LABEL_79:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v78);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v81);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v83);
LABEL_81:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v85);
  return hasCommonProns;
}

void sub_213F1BC4C()
{
}

uint64_t DgnDelete<PhonemeLattice>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    (*(void (**)(uint64_t))(*(void *)result + 48))(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t SDWord_WordsHavePrefixPron(unint64_t *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  SdapiInsurance::SdapiInsurance(v85, "SDWord_WordsHavePrefixPron", 1, 1, 409);
  if (!v85[97])
  {
    uint64_t hasCommonProns = 0;
    goto LABEL_81;
  }
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = a3;
    if (!gbShowCallPointerArguments) {
      uint64_t v15 = 0;
    }
    xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, %llu, Masked:0x%016llx, %llu)\n", v7, v8, v9, v10, "SDWord_WordsHavePrefixPron", v14, a2, v15, a4);
  }
  if (!a1 && a2) {
    throwBadLengthForNullPointer(a2, "DgnVerifyReadPtr", v8, v9, v10, v11, v12, v13);
  }
  LOBYTE(v83) = 0;
  if (!a3 && a4) {
    throwBadLengthForNullPointer(a4, "DgnVerifyReadPtr", v8, v9, v10, v11, v12, v13);
  }
  LOBYTE(v83) = 0;
  if (a2 && a4)
  {
    uint64_t v83 = 0;
    uint64_t v84 = 0;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdword.cpp", 619, (uint64_t)"sdapi/sdword", 8, (uint64_t)"%s", v12, v13, (char)&errStr_sdapi_sdword_E_ZERO_WORDS);
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    if (!a2) {
      goto LABEL_20;
    }
  }
  uint64_t v81 = 0;
  HIDWORD(v84) = realloc_array(0, &v81, 4 * a2, 0, 0, 1) >> 2;
  uint64_t v83 = v81;
LABEL_20:
  LODWORD(v84) = a2;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  if (a4)
  {
    uint64_t v78 = 0;
    HIDWORD(v82) = realloc_array(0, &v78, 4 * a4, 0, 0, 1) >> 2;
    uint64_t v81 = v78;
  }
  LODWORD(v82) = a4;
  v80[1] = 0;
  v80[0] = 0;
  uint64_t v22 = (ModelMgr *)ModelMgr::smpModelMgr;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v23 = *a1;
  if (HIDWORD(*a1) || (v23 & 0xFFFF0000) != 0) {
    throwBadSdapiArgument("SDhVoc", *a1, v16, v17, v18, v19, v20, v21);
  }
  if ((unsigned __int16)v23 - 1 >= 0x7B) {
    throwBadSdapiArgument("SDhVoc", v23, v16, v17, v18, v19, v20, v21);
  }
  unsigned int v24 = v79;
  if (v79 == HIDWORD(v79))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
    unsigned int v24 = v79;
  }
  unsigned int v76 = a4;
  unsigned int v25 = (unsigned __int16 *)v78;
  *((_WORD *)v78 + v24) = v23;
  LODWORD(v79) = v24 + 1;
  uint64_t VocOrThrow = (Voc *)ModelMgr::getVocOrThrow(v22, *v25, v16, v17, v18, v19, v20, v21);
  if (a2)
  {
    uint64_t v33 = 0;
    do
    {
      unsigned int v34 = &a1[2 * v33];
      unint64_t v35 = *v34;
      unint64_t v36 = v34[1];
      uint64_t v37 = *v34 & 0xFFFF0000;
      if (HIDWORD(v35)) {
        BOOL v38 = 0;
      }
      else {
        BOOL v38 = v37 == 0;
      }
      if (!v38) {
        throwBadSdapiArgument("SDhVoc", v35, v26, v27, v28, v29, v30, v31);
      }
      if ((unsigned __int16)v35 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v35, v26, v27, v28, v29, v30, v31);
      }
      uint64_t v45 = (const Voc *)ModelMgr::getVocOrThrow(v22, (unsigned __int16)v35, v26, v27, v28, v29, v30, v31);
      uint64_t v46 = v79;
      if (!v79) {
        goto LABEL_44;
      }
      uint64_t v47 = (unsigned __int16 *)v78;
      uint64_t v48 = 0xFFFFFFFFLL;
      while (1)
      {
        int v49 = *v47++;
        if (v49 == (unsigned __int16)v35) {
          break;
        }
        --v48;
        if (!--v46) {
          goto LABEL_44;
        }
      }
      if (!v48)
      {
LABEL_44:
        Voc::isPhonemeSetCompatibleWithVoc(VocOrThrow, v45, 1);
        unsigned int v50 = v79;
        if (v79 == HIDWORD(v79))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
          unsigned int v50 = v79;
        }
        *((_WORD *)v78 + v5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v35;
        LODWORD(v79) = v50 + 1;
      }
      unsigned int v51 = v36 - 1;
      if ((v36 - 1) >> 32) {
        throwBadSdapiArgument("SDhWord", v36, v39, v40, v41, v42, v43, v44);
      }
      if (v51 >= 0xFFFFF4) {
        throwBadSdapiArgument("SDhWord", v36, v39, v40, v41, v42, v43, v44);
      }
      uint64_t v52 = (WordList *)*((void *)v45 + 6);
      WordList::verifyVisible(v52, v51, v39, v40, v41, v42, v43, v44);
      *(void *)uint64_t v80 = 0;
      WordList::getNumProns((uint64_t *)v52, v51, &v80[1], v80);
      if (!(v80[1] + v80[0])) {
        goto LABEL_78;
      }
      v83[v33++] = v51 & 0xFFFFFF | (v35 << 25);
    }
    while (v33 != a2);
  }
  if (v76)
  {
    uint64_t v53 = 0;
    while (1)
    {
      uint64_t v54 = (unint64_t *)(a3 + 16 * v53);
      unint64_t v55 = *v54;
      unint64_t v56 = v54[1];
      uint64_t v57 = *v54 & 0xFFFF0000;
      if (HIDWORD(v55)) {
        BOOL v58 = 0;
      }
      else {
        BOOL v58 = v57 == 0;
      }
      if (!v58) {
        throwBadSdapiArgument("SDhVoc", v55, v26, v27, v28, v29, v30, v31);
      }
      if ((unsigned __int16)v55 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v55, v26, v27, v28, v29, v30, v31);
      }
      uint64_t v65 = (const Voc *)ModelMgr::getVocOrThrow(v22, (unsigned __int16)v55, v26, v27, v28, v29, v30, v31);
      uint64_t v66 = v79;
      if (!v79) {
        goto LABEL_68;
      }
      uint64_t v67 = (unsigned __int16 *)v78;
      uint64_t v68 = 0xFFFFFFFFLL;
      while (1)
      {
        int v69 = *v67++;
        if (v69 == (unsigned __int16)v55) {
          break;
        }
        --v68;
        if (!--v66) {
          goto LABEL_68;
        }
      }
      if (!v68)
      {
LABEL_68:
        Voc::isPhonemeSetCompatibleWithVoc(VocOrThrow, v65, 1);
        unsigned int v70 = v79;
        if (v79 == HIDWORD(v79))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v78, 1, 1);
          unsigned int v70 = v79;
        }
        *((_WORD *)v78 + v7pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v55;
        LODWORD(v79) = v70 + 1;
      }
      unsigned int v71 = v56 - 1;
      if ((v56 - 1) >> 32) {
        throwBadSdapiArgument("SDhWord", v56, v59, v60, v61, v62, v63, v64);
      }
      if (v71 >= 0xFFFFF4) {
        throwBadSdapiArgument("SDhWord", v56, v59, v60, v61, v62, v63, v64);
      }
      uint64_t v72 = (WordList *)*((void *)v65 + 6);
      WordList::verifyVisible(v72, v71, v59, v60, v61, v62, v63, v64);
      *(void *)uint64_t v80 = 0;
      WordList::getNumProns((uint64_t *)v72, v71, &v80[1], v80);
      if (!(v80[1] + v80[0])) {
        break;
      }
      *((_DWORD *)v81 + v53++) = v71 & 0xFFFFFF | (v55 << 25);
      if (v53 == v76) {
        goto LABEL_77;
      }
    }
LABEL_78:
    uint64_t hasCommonProns = 0;
    goto LABEL_79;
  }
LABEL_77:
  uint64_t v73 = MemChunkAlloc(0xC0uLL, 0);
  PhonemeLattice::PhonemeLattice(v73, &v83);
  uint64_t hasCommonProns = PhonemeLattice::hasCommonProns((unint64_t)v73, (uint64_t *)&v81, 1);
  DgnDelete<PhonemeLattice>((uint64_t)v73);
LABEL_79:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v78);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v81);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v83);
LABEL_81:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v85);
  return hasCommonProns;
}

void sub_213F1C30C()
{
}

uint64_t SDWord_GetWordsWithCommonPron(unint64_t a1, unint64_t a2, void *a3, unsigned int a4)
{
  SdapiInsurance::SdapiInsurance(v36, "SDWord_GetWordsWithCommonPron", 1, 1, 410);
  if (v36[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v15 = a3;
      }
      else {
        uint64_t v15 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDWord_GetWordsWithCommonPron", a1, a2, v15, a4);
    }
    if (!a3 && a4) {
      throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v9, v10, v11, v12, v13, v14);
    }
    uint64_t v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    unint64_t v23 = *(WordList **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 48);
    if ((a2 - 1) >> 32) {
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    }
    if ((a2 - 1) >= 0xFFFFF4) {
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    }
    WordList::verifyVisible(v23, a2 - 1, v17, v18, v19, v20, v21, v22);
    *(void *)unint64_t v35 = 0;
    WordList::getNumProns((uint64_t *)v23, a2 - 1, &v35[1], v35);
    if (v35[1] + v35[0])
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      WordList::getWordsWithCommonPron((uint64_t)v23, a2 - 1, (uint64_t)&v33);
      uint64_t v31 = 0;
      *(void *)unsigned int v32 = 0;
      if (v34)
      {
        uint64_t v37 = 0;
        v32[1] = realloc_array(0, &v37, 8 * v34, 0, 0, 1) >> 3;
        unsigned int v25 = v37;
        uint64_t v31 = v37;
        unint64_t v26 = v34;
        if (v34)
        {
          unint64_t v27 = 0;
          LODWORD(v28) = v32[0];
          do
          {
            uint64_t v29 = *(unsigned int *)(v33 + 4 * v27);
            if (v28 == v32[1])
            {
              DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v31, 1, 1);
              LODWORD(v28) = v32[0];
              unint64_t v26 = v34;
            }
            v31[v28] = v29 + 1;
            uint64_t v28 = (v28 + 1);
            v32[0] = v28;
            ++v27;
          }
          while (v27 < v26);
          unsigned int v25 = v31;
          goto LABEL_30;
        }
      }
      else
      {
        unsigned int v25 = 0;
      }
      uint64_t v28 = v32[0];
LABEL_30:
      uint64_t v24 = sdUtilItemMove(8, v25, v28, a3, a4);
      DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v31);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
      goto LABEL_31;
    }
  }
  uint64_t v24 = 0;
LABEL_31:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v36);
  return v24;
}

void sub_213F1C5A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  if (a2 == 2)
  {
    uint64_t v12 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v12, v13);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)va1);
      _Unwind_Resume(a1);
    }
    uint64_t v14 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v14);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F1C49CLL);
}

uint64_t SDWord_GetHumanReadableProns(unint64_t a1, unint64_t a2, void *a3, unsigned int a4)
{
  SdapiInsurance::SdapiInsurance(v34, "SDWord_GetHumanReadableProns", 1, 1, 416);
  if (v34[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v15 = a3;
      }
      else {
        uint64_t v15 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDWord_GetHumanReadableProns", a1, a2, v15, a4);
    }
    uint64_t v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    unint64_t v23 = *(WordList **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 48);
    if ((a2 - 1) >> 32) {
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    }
    if ((a2 - 1) >= 0xFFFFF4) {
      throwBadSdapiArgument("SDhWord", a2, v17, v18, v19, v20, v21, v22);
    }
    WordList::verifyVisible(v23, a2 - 1, v17, v18, v19, v20, v21, v22);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    WordList::lookupAll((uint64_t *)v23, a2 - 1, (uint64_t)&v32);
    DgnString::DgnString((DgnString *)&v30);
    if (v33)
    {
      unint64_t v24 = 0;
      do
      {
        DgnString::DgnString((DgnString *)v29);
        WordList::getHumanReadablePron(v23, *(_DWORD *)(v32 + 4 * v24), (DgnString *)v29);
        DgnString::operator+=(&v30, (uint64_t)v29);
        DgnString::operator+=(&v30, 0);
        DgnString::~DgnString((DgnString *)v29);
        ++v24;
      }
      while (v24 < v33);
    }
    DgnString::operator+=(&v30, 0);
    if (v31) {
      unsigned int v25 = v30;
    }
    else {
      unsigned int v25 = &unk_2140A3E4B;
    }
    if (v31) {
      uint64_t v26 = (v31 - 1);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = sdUtilItemMove(1, v25, v26, a3, a4);
    DgnString::~DgnString((DgnString *)&v30);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  }
  else
  {
    uint64_t v27 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v34);
  return v27;
}

void sub_213F1C8EC()
{
}

uint64_t loggableFileObject(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (const char *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0) {
      uint64_t v3 = *(const char **)v3;
    }
  }
  else
  {
    uint64_t v3 = "[dynamic object]";
  }
  size_t v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (", 2);
  unsigned int v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") : ", 4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" attribute '", 12);
  uint64_t v7 = (unsigned int *)a1[1];
  uint64_t v8 = __p;
  loggableUnicode(v7, __p);
  if (v13 < 0) {
    uint64_t v8 = (void **)__p[0];
  }
  size_t v9 = strlen((const char *)v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"' : ", 4);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v14 + *(void *)(v14[0] - 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v14[1] = MEMORY[0x263F8C318] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166986E0](&v16);
}

void sub_213F1CB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t TFileObject::verify(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a1 + 40))
  {
    loggableFileObject((uint64_t *)a1);
    if (v59 >= 0) {
      size_t v9 = __p;
    }
    else {
      size_t v9 = (void **)__p[0];
    }
    tknPrintf("Error: %sBad attribute declaration, expected an object\n", v5, v6, v7, v8, v9);
    if (v59 < 0) {
      operator delete(__p[0]);
    }
    char v10 = 1;
    return v10 & 1;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (v13) {
    a4 = 1;
  }
  if ((a4 & 1) == 0)
  {
    loggableFileObject((uint64_t *)a1);
    uint64_t v19 = v59 >= 0 ? __p : (void **)__p[0];
    tknPrintf("Error: %sObject has no attributes\n", v15, v16, v17, v18, v19);
    if (v59 < 0) {
      operator delete(__p[0]);
    }
  }
  char v10 = a4 ^ 1;
  LOBYTE(v56[0]) = 0;
  std::vector<BOOL>::vector(__p, a3, (unsigned __int8 *)v56);
  if (*(void *)a1) {
    unint64_t v20 = *(void *)(*(void *)a1 + 72);
  }
  else {
    unint64_t v20 = 0;
  }
  if (v13)
  {
    while (1)
    {
      unint64_t v21 = 0;
      if (a3) {
        break;
      }
LABEL_44:
      if (v21 == a3)
      {
LABEL_45:
        loggableFileObject((uint64_t *)v13);
        uint64_t v42 = v56;
        if (v57 < 0) {
          uint64_t v42 = (void **)v56[0];
        }
        tknPrintf("Error: %sInvalid attribute\n", v38, v39, v40, v41, v42);
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        char v10 = 1;
      }
      uint64_t v13 = *(void *)(v13 + 16);
      if (!v13) {
        goto LABEL_51;
      }
    }
    uint64_t v22 = (unint64_t *)(a2 + 24);
    while (wcscmp(*(const __int32 **)(v13 + 8), (const __int32 *)*(v22 - 3)))
    {
      ++v21;
      v22 += 4;
      if (a3 == v21) {
        goto LABEL_45;
      }
    }
    if ((*((void *)__p[0] + (v21 >> 6)) & (1 << v21)) != 0 && (*(unsigned char *)(v22 - 2) & 1) == 0)
    {
      loggableFileObject((uint64_t *)v13);
      uint64_t v27 = v56;
      if (v57 < 0) {
        uint64_t v27 = (void **)v56[0];
      }
      tknPrintf("Error: %sRedefinition\n", v23, v24, v25, v26, v27);
LABEL_40:
      if (v57 < 0) {
        operator delete(v56[0]);
      }
      char v10 = 1;
      goto LABEL_43;
    }
    if (v20)
    {
      if (v20 < *(v22 - 1))
      {
        loggableFileObject((uint64_t *)v13);
        uint64_t v32 = v56;
        if (v57 < 0) {
          uint64_t v32 = (void **)v56[0];
        }
        tknPrintf("Error: %sAttribute not supported in file version %lld; file version must be at least %lld\n",
          v28,
          v29,
          v30,
          v31,
          v32,
          v20,
          *(v22 - 1));
        goto LABEL_40;
      }
      if (v20 > *v22)
      {
        loggableFileObject((uint64_t *)v13);
        uint64_t v37 = v56;
        if (v57 < 0) {
          uint64_t v37 = (void **)v56[0];
        }
        tknPrintf("Error: %sAttribute not supported in file version %lld; file version may not be greater than %lld\n",
          v33,
          v34,
          v35,
          v36,
          v37,
          v20,
          *v22);
        goto LABEL_40;
      }
    }
LABEL_43:
    *((void *)__p[0] + (v21 >> 6)) |= 1 << v21;
    goto LABEL_44;
  }
LABEL_51:
  if (a3)
  {
    unint64_t v43 = 0;
    uint64_t v44 = (unint64_t *)(a2 + 16);
    do
    {
      if (((*(void *)((char *)__p[0] + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v43) & 1) == 0
        && (*(unsigned char *)(v44 - 1) & 2) == 0
        && (!v20 || v20 >= *v44 && v20 <= v44[1]))
      {
        loggableFileObject((uint64_t *)a1);
        int v45 = v57;
        uint64_t v46 = (void **)v56[0];
        loggableUnicode((unsigned int *)*(v44 - 2), v54);
        if (v45 >= 0) {
          unsigned int v51 = v56;
        }
        else {
          unsigned int v51 = v46;
        }
        if (v55 >= 0) {
          uint64_t v52 = v54;
        }
        else {
          uint64_t v52 = (void **)v54[0];
        }
        tknPrintf("Error: %sMissing declaration of '%s'\n", v47, v48, v49, v50, v51, v52);
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        char v10 = 1;
      }
      ++v43;
      v44 += 4;
    }
    while (a3 != v43);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v10 & 1;
}

void sub_213F1CED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFileObject::verify(TFileObject *this, char a2, char a3)
{
  int v3 = *((_DWORD *)this + 10);
  if (v3)
  {
    if (v3 != 2 || (a2 & 1) != 0)
    {
      uint64_t v14 = 0;
      if (**((_DWORD **)this + 3) || (a3 & 1) != 0) {
        return v14;
      }
      loggableFileObject((uint64_t *)this);
      if (v22 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      tknPrintf("Error: %sEmpty string not allowed here\n", v15, v16, v17, v18, v19);
    }
    else
    {
      loggableFileObject((uint64_t *)this);
      if (v22 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      tknPrintf("Error: %sRegExp not supported here\n", v4, v5, v6, v7, v8);
    }
  }
  else
  {
    loggableFileObject((uint64_t *)this);
    if (v22 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    tknPrintf("Error: %sBad attribute declaration, expected a string\n", v9, v10, v11, v12, v13);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_213F1D04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFileObject::getAttribute(uint64_t a1, __int32 *a2)
{
  for (uint64_t i = *(void *)(a1 + 24); i; uint64_t i = *(void *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), a2)) {
      break;
    }
  }
  return i;
}

void TFileObject::collectAttributes(uint64_t a1, __int32 *a2, void **a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v6 = (uint64_t)(a3 + 2);
    do
    {
      if (!wcscmp(*(const __int32 **)(v3 + 8), a2))
      {
        uint64_t v8 = a3[1];
        unint64_t v7 = (unint64_t)a3[2];
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v10 = ((char *)v8 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v11 = v7 - (void)*a3;
          uint64_t v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
            uint64_t v12 = v10 + 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v6, v13);
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = &v14[8 * v10];
          *(void *)uint64_t v15 = v3;
          uint64_t v9 = v15 + 8;
          uint64_t v17 = (char *)*a3;
          uint64_t v16 = (char *)a3[1];
          if (v16 != *a3)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            uint64_t v16 = (char *)*a3;
          }
          *a3 = v15;
          a3[1] = v9;
          a3[2] = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *uint64_t v8 = v3;
          uint64_t v9 = v8 + 1;
        }
        a3[1] = v9;
      }
      uint64_t v3 = *(void *)(v3 + 16);
    }
    while (v3);
  }
}

void TFileObjectParser::TFileObjectParser(TFileObjectParser *this, const TLocaleInfo **a2)
{
  uint64_t v4 = (TFileObjectParser *)((char *)this + 8);
  TAllocator::TAllocator((TFileObjectParser *)((char *)this + 8), 2048);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(void *)this = 0;
  if (TInputStream::verifyVersion((TInputStream *)a2, "ObjectFormatVersion", 1uLL, 1uLL, 1uLL))
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v21) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v20;
      uint64_t v19 = v21;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v19 >= 0) {
      uint64_t v14 = &__p[8];
    }
    else {
      uint64_t v14 = *(const char **)&__p[8];
    }
    conditionalAssert(v14, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 247, v12, v13);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v19) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)v20);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v16 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v17 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    void *exception = &unk_26C4E0710;
  }
  uint64_t v5 = (char **)TLexerLexicon::TLexerLexicon((TLexerLexicon *)&v20, a2[22]);
  initLexicon(v5);
  TLexer::TLexer((TLexer *)__p, (TInputStream *)a2, 1uLL, (const TLexerLexicon *)&v20, 0);
  if (*((char *)a2 + 39) >= 0) {
    uint64_t v6 = (const TLocaleInfo *)(a2 + 2);
  }
  else {
    uint64_t v6 = a2[2];
  }
  MEMORY[0x216698410]((char *)this + 48, v6);
  *((void *)this + 9) = a2[12];
  Objects = TFileObjectParser::loadObjects(this, (TLexer *)__p, v7, v8, v9);
  uint64_t v11 = TAllocator::allocate(v4, 48);
  *(_DWORD *)(v11 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(void *)(v11 + 24) = Objects;
  *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(void *)uint64_t v11 = this;
  *(void *)(v11 + 8) = &unk_2140A3E4C;
  *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)this = v11;
  TLexer::~TLexer((TLexer *)__p);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)&v20);
}

void sub_213F1D444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v19 + 71) < 0) {
        operator delete(*v21);
      }
      TAllocator::clear(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

TRegExpCompiler *initLexicon(char **a1)
{
  TLexerLexicon::addLiteral(a1, (uint64_t)"=", 5);
  TLexerLexicon::addLiteral(a1, (uint64_t)"{", 6);
  TLexerLexicon::addLiteral(a1, (uint64_t)"}", 7);
  TLexerLexicon::addLiteral(a1, (uint64_t)"(", 8);
  TLexerLexicon::addLiteral(a1, (uint64_t)")", 9);
  TLexerLexicon::addString(a1, 39, 3, 2);
  TLexerLexicon::addString(a1, 96, 4, 0);
  TLexerLexicon::addString(a1, 34, 2, 1);
  TLexerLexicon::addRegExp(a1, (__int32 *)"[", 1);

  return TLexerLexicon::doneAdding((TRegExp **)a1);
}

const TFileObject *TFileObjectParser::loadObjects(TFileObjectParser *this, TLexer *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*((void *)a2 + 3) < (unint64_t)((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3))
  {
    uint64_t v7 = 0;
    uint64_t i = 0;
    while (1)
    {
      Object = TFileObjectParser::makeObject((uint64_t)this, a2, (uint64_t)&unk_2140A3E4C, a4, a5);
      if (i)
      {
        *((void *)v7 + 2) = Object;
        uint64_t v10 = Object;
        Object = v7;
        if (v10) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v10 = (const TFileObject *)*((void *)Object + 2);
        for (i = Object; v10; uint64_t v10 = (const TFileObject *)*((void *)v10 + 2))
LABEL_5:
          Object = v10;
      }
      uint64_t v7 = Object;
      if (*((void *)a2 + 3) >= (unint64_t)((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3)) {
        return i;
      }
    }
  }
  return 0;
}

uint64_t *TFileObjectParser::TFileObjectParser(uint64_t *a1, uint64_t a2, uint64_t a3, const TLocaleInfo *a4)
{
  uint64_t v7 = (TAllocator *)(a1 + 1);
  TAllocator::TAllocator((TAllocator *)(a1 + 1), 2048);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *a1 = 0;
  uint64_t v8 = (char **)TLexerLexicon::TLexerLexicon((TLexerLexicon *)v16, a4);
  initLexicon(v8);
  TLexer::TLexer(v15, a2, 1, v16, 0);
  MEMORY[0x216698410](a1 + 6, "[dynamic text object]");
  a1[9] = 1;
  Objects = TFileObjectParser::loadObjects((TFileObjectParser *)a1, (TLexer *)v15, v9, v10, v11);
  uint64_t v13 = TAllocator::allocate(v7, 48);
  *(_DWORD *)(v13 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(void *)(v13 + 24) = Objects;
  *(void *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(void *)uint64_t v13 = a1;
  *(void *)(v13 + 8) = &unk_2140A3E4C;
  *(void *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *a1 = v13;
  TLexer::~TLexer((TLexer *)v15);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)v16);
  return a1;
}

void sub_213F1D794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TLexer::~TLexer((TLexer *)va);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)(v5 - 104));
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v4);
  }
  TAllocator::clear(v3);
  _Unwind_Resume(a1);
}

void TFileObjectParser::~TFileObjectParser(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  TAllocator::clear((TAllocator *)(this + 1));
}

__n128 TFileObjectParser::instantiateObject(TFileObjectParser *this, const TFileObject *a2, const TFileObject *a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  int v6 = *((_DWORD *)a2 + 10);
  if (!v6)
  {
    uint64_t v23 = *((void *)a2 + 3);
    if (!v23)
    {
      uint64_t v7 = 0;
LABEL_58:
      uint64_t v34 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
      uint64_t v36 = *((void *)a2 + 4);
      *(_DWORD *)(v34 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
      *(void *)(v34 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v36;
      goto LABEL_59;
    }
    uint64_t i = 0;
    uint64_t v7 = 0;
    int v25 = 0;
    while (!wcscmp(*(const __int32 **)(v23 + 8), (const __int32 *)"I"))
    {
LABEL_49:
      uint64_t v23 = *(void *)(v23 + 16);
      if (!v23) {
        goto LABEL_58;
      }
    }
    uint64_t v26 = TFileObjectParser::instantiateObject(this, (const TFileObject *)v23, a3);
    if (v7)
    {
      *(void *)(i + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v26;
      uint64_t v28 = v26;
      if (v26) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v28 = *(void *)(v26 + 16);
      uint64_t v7 = v26;
      for (i = v26; v28; uint64_t v28 = *(void *)(v28 + 16))
LABEL_47:
        uint64_t i = v28;
    }
    v25 |= v27 & 1;
    goto LABEL_49;
  }
  if (v6 != 3)
  {
    uint64_t v29 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
    *(_DWORD *)(v29 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *((_DWORD *)a2 + 10);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)uint64_t v29 = *(_OWORD *)a2;
    *(void *)(v29 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *((void *)a2 + 4);
    *(void *)(v29 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *((void *)a2 + 2);
    uint64_t v31 = *((void *)a2 + 3);
    *(void *)(v29 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    *(void *)(v29 + 24) = v31;
    return result;
  }
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = *((void *)a3 + 3);
  if (v8)
  {
    uint64_t v9 = 0;
    do
    {
      char v55 = __s2;
      long long v56 = xmmword_214085190;
      char v58 = 0;
      TBuffer<wchar_t>::assign((uint64_t)&v55, (int *)"$");
      uint64_t v10 = 0;
      uint64_t v11 = *(int **)(v8 + 8);
      while (v11[v10++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v55, *((unint64_t *)&v56 + 1), v11, v10 - 1);
      *(_DWORD *)unsigned int v51 = 41;
      TBuffer<wchar_t>::insert((uint64_t)&v55, *((unint64_t *)&v56 + 1), (int *)v51, 1uLL);
      if (*((void *)&v56 + 1) >= (unint64_t)v56)
      {
        if (v58)
        {
          *(_DWORD *)unsigned int v51 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v55, *((unint64_t *)&v56 + 1), (int *)v51, 1uLL);
          --*((void *)&v56 + 1);
        }
        else if ((void)v56)
        {
          v55[(void)v56 - 1] = 0;
        }
      }
      else
      {
        v55[*((void *)&v56 + 1)] = 0;
      }
      if (!*(_DWORD *)(v8 + 40) && !wcscmp(__s2, (const __int32 *)v7))
      {
        uint64_t v7 = *(void *)(v8 + 24);
        if (v7)
        {
          uint64_t v19 = 0;
          uint64_t v9 = 0;
          do
          {
            uint64_t v20 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
            *(_DWORD *)(v20 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(v7 + 40);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v7;
            *(void *)(v20 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)(v7 + 32);
            *(void *)(v20 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(void *)(v7 + 16);
            uint64_t v21 = *(void *)(v7 + 24);
            *(void *)(v20 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
            *(void *)(v20 + 24) = v21;
            if (v9)
            {
              *(void *)(v19 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v20;
              do
              {
                uint64_t v22 = v20;
                uint64_t v20 = *(void *)(v20 + 16);
              }
              while (v20);
              uint64_t v20 = v22;
            }
            else
            {
              uint64_t v9 = v20;
            }
            uint64_t v7 = *(void *)(v7 + 16);
            uint64_t v19 = v20;
          }
          while (v7);
        }
        else
        {
          uint64_t v9 = 0;
        }
        int v17 = 0;
      }
      else
      {
        uint64_t v13 = wcsstr((__int32 *)v7, __s2);
        if (v13)
        {
          if (!*(_DWORD *)(v8 + 40))
          {
            loggableFileObject((uint64_t *)a2);
            int v37 = v51[23];
            uint64_t v38 = *(unsigned char **)v51;
            loggableFileObject((uint64_t *)v8);
            unint64_t v43 = v51;
            if (v37 < 0) {
              unint64_t v43 = v38;
            }
            if (v54 >= 0) {
              uint64_t v44 = __p;
            }
            else {
              uint64_t v44 = (void **)__p[0];
            }
            tknPrintf("Error: %s%sCannot instantiate\n", v39, v40, v41, v42, v43, v44);
            if (SHIBYTE(v54) < 0) {
              operator delete(__p[0]);
            }
            if ((v51[23] & 0x80000000) != 0) {
              operator delete(*(void **)v51);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
            *(void *)unsigned int v51 = byte_26C4DF190;
            if (SHIBYTE(v54) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v51[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v51[8] = *(_OWORD *)__p;
              uint64_t v52 = v54;
            }
            *(void *)unsigned int v51 = &unk_26C4E2478;
            if (v52 >= 0) {
              uint64_t v47 = &v51[8];
            }
            else {
              uint64_t v47 = *(const char **)&v51[8];
            }
            conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 366, v45, v46);
            *(void *)unsigned int v51 = byte_26C4DF190;
            if (SHIBYTE(v52) < 0) {
              operator delete(*(void **)&v51[8]);
            }
            if (SHIBYTE(v54) < 0) {
              operator delete(__p[0]);
            }
            exception = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v51, &byte_2140B33BB);
            void *exception = byte_26C4DF190;
            uint64_t v49 = (std::string *)(exception + 1);
            if ((v51[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v51, *(std::string::size_type *)&v51[8]);
            }
            else
            {
              long long v50 = *(_OWORD *)v51;
              exception[3] = *(void *)&v51[16];
              *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
            }
            void *exception = &unk_26C4E2478;
          }
          size_t v14 = wcslen(__s2);
          wcscpy(__s2, (const __int32 *)v7);
          wcscpy((__int32 *)((char *)__s2 + (void)v13 - v7), *(const __int32 **)(v8 + 24));
          wcscat(__s2, &v13[v14]);
          size_t v15 = wcslen(__s2);
          if ((v15 + 1) >> 62) {
            uint64_t v16 = -1;
          }
          else {
            uint64_t v16 = 4 * (v15 + 1);
          }
          uint64_t v7 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), v16);
          wcscpy((__int32 *)v7, __s2);
        }
        int v17 = 1;
      }
      if (v58)
      {
        if (v55 != (__int32 *)&v57 && v55 != 0) {
          MEMORY[0x216698730]();
        }
      }
      if (!v17) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 16);
    }
    while (v8);
    if (v9)
    {
      uint64_t v32 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
      uint64_t v33 = *((void *)a2 + 4);
      *(_DWORD *)(v32 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
      *(void *)(v32 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v33;
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)uint64_t v32 = *(_OWORD *)a2;
      *(void *)(v32 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
      *(void *)(v32 + 24) = v9;
      return result;
    }
  }
  uint64_t v34 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
  uint64_t v35 = *((void *)a2 + 4);
  *(_DWORD *)(v34 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *((_DWORD *)a2 + 10);
  *(void *)(v34 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v35;
LABEL_59:
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)uint64_t v34 = *(_OWORD *)a2;
  *(void *)(v34 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(v34 + 24) = v7;
  return result;
}

void sub_213F1DE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x488]))
      {
        if (a26 != a12 && a26 != 0) {
          MEMORY[0x216698730]();
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

const TFileObject *TFileObjectParser::instantiateObject(TFileObjectParser *this, const TFileObject *a2)
{
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  TFileObject::collectAttributes((uint64_t)a2, (__int32 *)"I", (void **)&v27);
  uint64_t v4 = v27;
  if (v27 != v28)
  {
    unint64_t v5 = 0;
    uint64_t i = 0;
    uint64_t v7 = 0;
    while (1)
    {
      TFileObjectParser::instantiateObject(this, a2, v4[v5]);
      if ((v9 & 1) == 0)
      {
        loggableFileObject((uint64_t *)a2);
        if (__p[23] >= 0) {
          uint64_t v16 = __p;
        }
        else {
          uint64_t v16 = *(unsigned char **)__p;
        }
        tknPrintf("Error: %sNothing to instantiate\n", v12, v13, v14, v15, v16);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(v23, &byte_2140B33BB);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v24) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v23[0], (std::string::size_type)v23[1]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)v23;
          uint64_t v26 = v24;
        }
        *(void *)__p = &unk_26C4E2478;
        if (v26 >= 0) {
          uint64_t v19 = &__p[8];
        }
        else {
          uint64_t v19 = *(const char **)&__p[8];
        }
        conditionalAssert(v19, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 441, v17, v18);
        *(void *)__p = byte_26C4DF190;
        if (SHIBYTE(v26) < 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (SHIBYTE(v24) < 0) {
          operator delete(v23[0]);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        void *exception = byte_26C4DF190;
        uint64_t v21 = (std::string *)(exception + 1);
        if ((__p[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        }
        else
        {
          long long v22 = *(_OWORD *)__p;
          exception[3] = *(void *)&__p[16];
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        }
        void *exception = &unk_26C4E2478;
      }
      if (v7)
      {
        *((void *)i + 2) = v8;
        uint64_t v10 = v8;
        if (v8) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v10 = (const TFileObject *)*((void *)v8 + 2);
        uint64_t v7 = v8;
        for (i = v8; v10; uint64_t v10 = (const TFileObject *)*((void *)v10 + 2))
LABEL_6:
          uint64_t i = v10;
      }
      ++v5;
      uint64_t v4 = v27;
      if (v5 >= v28 - v27) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v7 = a2;
LABEL_12:
  if (v4)
  {
    uint64_t v28 = v4;
    operator delete(v4);
  }
  return v7;
}

void sub_213F1E19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a27) {
        operator delete(a27);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

const TFileObject *TFileObjectParser::makeObject(uint64_t a1, TLexer *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (__int32 *)a3;
  uint64_t Token = nextToken(a2, (uint64_t)a2, a3, a4, a5);
  uint64_t v13 = Token;
  uint64_t v14 = *(void *)Token;
  if (*(void *)Token == 1)
  {
    size_t v15 = wcslen(*(const __int32 **)(Token + 8));
    if ((v15 + 1) >> 62) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = 4 * (v15 + 1);
    }
    unint64_t v5 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v16);
    wcscpy(v5, *(const __int32 **)(v13 + 8));
    if (*(void *)nextToken(a2, v17, v18, v19, v20) != 5)
    {
      loggableToken((uint64_t)a2);
      if (v110[23] >= 0) {
        uint64_t v78 = v110;
      }
      else {
        uint64_t v78 = *(unsigned char **)v110;
      }
      tknPrintf("Error: %sSyntax error, missing '='\n", v74, v75, v76, v77, v78);
      if ((v110[23] & 0x80000000) != 0) {
        operator delete(*(void **)v110);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      *(void *)uint64_t v110 = byte_26C4DF190;
      if (SHIBYTE(v109) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v110[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v110[8] = *(_OWORD *)__p;
        uint64_t v111 = v109;
      }
      *(void *)uint64_t v110 = &unk_26C4E13E0;
      if (v111 >= 0) {
        uint64_t v96 = &v110[8];
      }
      else {
        uint64_t v96 = *(const char **)&v110[8];
      }
      conditionalAssert(v96, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 488, v79, v80);
      *(void *)uint64_t v110 = byte_26C4DF190;
      if (SHIBYTE(v111) < 0) {
        operator delete(*(void **)&v110[8]);
      }
      if (SHIBYTE(v109) < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v110, &byte_2140B33BB);
      void *exception = byte_26C4DF190;
      uint64_t v98 = (std::string *)(exception + 1);
      if ((v110[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v98, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
      }
      else
      {
        long long v105 = *(_OWORD *)v110;
        exception[3] = *(void *)&v110[16];
        *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v105;
      }
      void *exception = &unk_26C4E13E0;
    }
    uint64_t v13 = nextToken(a2, v21, v22, v23, v24);
    uint64_t v14 = *(void *)v13;
  }
  switch(v14)
  {
    case 2:
      size_t v25 = wcslen(*(const __int32 **)(v13 + 8));
      if ((v25 + 1) >> 62) {
        uint64_t v26 = -1;
      }
      else {
        uint64_t v26 = 4 * (v25 + 1);
      }
      int v27 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v26);
      wcscpy(v27, *(const __int32 **)(v13 + 8));
      uint64_t v28 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      uint64_t j = v28;
      uint64_t v30 = *(void *)(v13 + 16);
      int v31 = 3;
      goto LABEL_33;
    case 3:
      size_t v47 = wcslen(*(const __int32 **)(v13 + 8));
      if ((v47 + 1) >> 62) {
        uint64_t v48 = -1;
      }
      else {
        uint64_t v48 = 4 * (v47 + 1);
      }
      int v27 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v48);
      wcscpy(v27, *(const __int32 **)(v13 + 8));
      uint64_t v28 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      uint64_t j = v28;
      uint64_t v30 = *(void *)(v13 + 16);
      int v31 = 1;
      goto LABEL_33;
    case 4:
      size_t v42 = wcslen(*(const __int32 **)(v13 + 8));
      if ((v42 + 1) >> 62) {
        uint64_t v43 = -1;
      }
      else {
        uint64_t v43 = 4 * (v42 + 1);
      }
      int v27 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v43);
      wcscpy(v27, *(const __int32 **)(v13 + 8));
      uint64_t v28 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      uint64_t j = v28;
      uint64_t v30 = *(void *)(v13 + 16);
      int v31 = 2;
LABEL_33:
      *(_DWORD *)(v28 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v31;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v30;
      *(void *)uint64_t v28 = a1;
      *(void *)(v28 + 8) = v5;
      *(void *)(v28 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
      return (const TFileObject *)j;
    case 6:
      uint64_t v44 = (void *)nextToken(a2, v9, v10, v11, v12);
      if (*v44 == 7)
      {
        uint64_t v45 = v44;
        uint64_t i = 0;
        goto LABEL_48;
      }
      uint64_t v50 = 0;
      uint64_t i = 0;
      while (1)
      {
        uint64_t v51 = *((void *)a2 + 3);
        if (v51) {
          *((void *)a2 + 3) = v51 - 1;
        }
        uint64_t Object = TFileObjectParser::makeObject(a1, a2, &unk_2140A3E4C);
        uint64_t v57 = Object;
        if (i)
        {
          *(void *)(v50 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = Object;
          uint64_t v58 = Object;
          uint64_t v57 = v50;
          if (Object) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v58 = *(void *)(Object + 16);
          for (i = Object; v58; uint64_t v58 = *(void *)(v58 + 16))
LABEL_43:
            uint64_t v57 = v58;
        }
        char v59 = (void *)nextToken(a2, v53, v54, v55, v56);
        uint64_t v50 = v57;
        if (*v59 == 7)
        {
          uint64_t v45 = v59;
LABEL_48:
          uint64_t j = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
          uint64_t v60 = v45[2];
          *(_DWORD *)(j + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
          *(void *)(j + 24) = i;
          *(void *)(j + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v60;
          *(void *)uint64_t j = a1;
          *(void *)(j + 8) = v5;
          *(void *)(j + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
LABEL_49:
          return TFileObjectParser::instantiateObject((TFileObjectParser *)a1, (const TFileObject *)j);
        }
      }
    case 8:
      uint64_t v32 = nextToken(a2, v9, v10, v11, v12);
      uint64_t j = 0;
      uint64_t v33 = 0;
      while (2)
      {
        if (*(void *)v32 != 9)
        {
          if (*(void *)v32 == 1)
          {
            loggableToken((uint64_t)a2);
            int v61 = v110[23];
            uint64_t v62 = *(unsigned char **)v110;
            loggableUnicode(*(unsigned int **)(v32 + 8), __p);
            if (v61 >= 0) {
              uint64_t v67 = v110;
            }
            else {
              uint64_t v67 = v62;
            }
            if (v109 >= 0) {
              uint64_t v68 = __p;
            }
            else {
              uint64_t v68 = (void **)__p[0];
            }
            tknPrintf("Error: %sUnexpected attribute name '%s' in assignment list\n", v63, v64, v65, v66, v67, v68);
            if (SHIBYTE(v109) < 0) {
              operator delete(__p[0]);
            }
            if ((v110[23] & 0x80000000) != 0) {
              operator delete(*(void **)v110);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
            *(void *)uint64_t v110 = byte_26C4DF190;
            if (SHIBYTE(v109) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v110[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v110[8] = *(_OWORD *)__p;
              uint64_t v111 = v109;
            }
            *(void *)uint64_t v110 = &unk_26C4E13E0;
            if (v111 >= 0) {
              unsigned int v71 = &v110[8];
            }
            else {
              unsigned int v71 = *(const char **)&v110[8];
            }
            conditionalAssert(v71, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 524, v69, v70);
            *(void *)uint64_t v110 = byte_26C4DF190;
            if (SHIBYTE(v111) < 0) {
              operator delete(*(void **)&v110[8]);
            }
            if (SHIBYTE(v109) < 0) {
              operator delete(__p[0]);
            }
            uint64_t v72 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v110, &byte_2140B33BB);
            void *v72 = byte_26C4DF190;
            uint64_t v73 = (std::string *)(v72 + 1);
            if ((v110[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v73, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
            }
            else
            {
              long long v95 = *(_OWORD *)v110;
              int v72[3] = *(void *)&v110[16];
              *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v95;
            }
            void *v72 = &unk_26C4E13E0;
          }
          uint64_t v34 = *((void *)a2 + 3);
          if (v34) {
            *((void *)a2 + 3) = v34 - 1;
          }
          uint64_t v35 = TFileObjectParser::makeObject(a1, a2, v5);
          uint64_t v40 = v35;
          if (j)
          {
            *(void *)(v33 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v35;
            uint64_t v41 = v35;
            uint64_t v40 = v33;
            if (v35) {
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v41 = *(void *)(v35 + 16);
            for (j = v35; v41; uint64_t v41 = *(void *)(v41 + 16))
LABEL_19:
              uint64_t v40 = v41;
          }
          uint64_t v32 = nextToken(a2, v36, v37, v38, v39);
          uint64_t v33 = v40;
          continue;
        }
        break;
      }
      if (!j)
      {
        loggableToken((uint64_t)a2);
        if (v110[23] >= 0) {
          uint64_t v85 = v110;
        }
        else {
          uint64_t v85 = *(unsigned char **)v110;
        }
        tknPrintf("Error: %sAssignment list is empty\n", v81, v82, v83, v84, v85);
        if ((v110[23] & 0x80000000) != 0) {
          operator delete(*(void **)v110);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
        *(void *)uint64_t v110 = byte_26C4DF190;
        if (SHIBYTE(v109) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v110[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v110[8] = *(_OWORD *)__p;
          uint64_t v111 = v109;
        }
        *(void *)uint64_t v110 = &unk_26C4E13E0;
        if (v111 >= 0) {
          uint64_t v99 = &v110[8];
        }
        else {
          uint64_t v99 = *(const char **)&v110[8];
        }
        conditionalAssert(v99, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 536, v86, v87);
        *(void *)uint64_t v110 = byte_26C4DF190;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[8]);
        }
        if (SHIBYTE(v109) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v100 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v110, &byte_2140B33BB);
        *uint64_t v100 = byte_26C4DF190;
        uint64_t v101 = (std::string *)(v100 + 1);
        if ((v110[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v101, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
        }
        else
        {
          long long v106 = *(_OWORD *)v110;
          v100[3] = *(void *)&v110[16];
          *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v106;
        }
        *uint64_t v100 = &unk_26C4E13E0;
      }
      if (!*(_DWORD *)(j + 40)) {
        goto LABEL_49;
      }
      return (const TFileObject *)j;
    default:
      loggableToken((uint64_t)a2);
      if (v110[23] >= 0) {
        uint64_t v92 = v110;
      }
      else {
        uint64_t v92 = *(unsigned char **)v110;
      }
      tknPrintf("Error: %sSyntax error\n", v88, v89, v90, v91, v92);
      if ((v110[23] & 0x80000000) != 0) {
        operator delete(*(void **)v110);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      *(void *)uint64_t v110 = byte_26C4DF190;
      if (SHIBYTE(v109) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v110[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v110[8] = *(_OWORD *)__p;
        uint64_t v111 = v109;
      }
      *(void *)uint64_t v110 = &unk_26C4E13E0;
      if (v111 >= 0) {
        uint64_t v102 = &v110[8];
      }
      else {
        uint64_t v102 = *(const char **)&v110[8];
      }
      conditionalAssert(v102, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/objectparser.cpp", 571, v93, v94);
      *(void *)uint64_t v110 = byte_26C4DF190;
      if (SHIBYTE(v111) < 0) {
        operator delete(*(void **)&v110[8]);
      }
      if (SHIBYTE(v109) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v103 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v110, &byte_2140B33BB);
      *uint64_t v103 = byte_26C4DF190;
      uint64_t v104 = (std::string *)(v103 + 1);
      if ((v110[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v104, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
      }
      else
      {
        long long v107 = *(_OWORD *)v110;
        v103[3] = *(void *)&v110[16];
        *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v107;
      }
      *uint64_t v103 = &unk_26C4E13E0;
  }
}

void sub_213F1ECAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_213F1F170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void TProp<BOOL>::~TProp()
{
}

void MrecInitModule_gpuscsm_pel(void)
{
  if (!gParDiagnosticGPUMaxFramesInBatch)
  {
    v0 = MemChunkAlloc(0x38uLL, 0);
    uint64_t v2 = 0x8000000001;
    uint64_t v1 = (void *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v0, (uint64_t)"DiagnosticGPUMaxFramesInBatch", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, 32, &v2, 0);
    void *v1 = &unk_26C4E05C8;
    gParDiagnosticGPUMaxFramesInBatch = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticGPUMaxFramesInBatch);
  }
}

void ChannelStats::~ChannelStats(ChannelStats *this)
{
}

void ChannelStats::printSize(ChannelStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 162, (DgnString *)&v169);
  if (v170) {
    uint64_t v16 = v169;
  }
  else {
    uint64_t v16 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A3EF0, a3, &unk_2140A3EF0, v16);
  DgnString::~DgnString((DgnString *)&v169);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A3EF0);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v22 = (a3 + 1);
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 163, (DgnString *)&v169);
  if (v170) {
    int v28 = v169;
  }
  else {
    int v28 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_2140A3EF0, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v21;
  *a5 += v21;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v33 = v169;
  }
  else {
    uint64_t v33 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), &unk_2140A3EF0, (34 - a3), (34 - a3), v33, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v38 = v169;
  }
  else {
    uint64_t v38 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_2140A3EF0, (34 - a3), (34 - a3), v38, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v43 = v169;
  }
  else {
    uint64_t v43 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, (a3 + 1), &unk_2140A3EF0, (34 - a3), (34 - a3), v43, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v48 = v169;
  }
  else {
    uint64_t v48 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, (a3 + 1), &unk_2140A3EF0, (34 - a3), (34 - a3), v48, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v53 = v169;
  }
  else {
    uint64_t v53 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, (a3 + 1), &unk_2140A3EF0, (34 - a3), (34 - a3), v53, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v58 = v169;
  }
  else {
    uint64_t v58 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_2140A3EF0, (34 - a3), (34 - a3), v58, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v63 = v169;
  }
  else {
    uint64_t v63 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &unk_2140A3EF0, (34 - a3), (34 - a3), v63, 4, 4, 0);
  uint64_t v168 = a3;
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 12;
  }
  else {
    uint64_t v64 = 16;
  }
  int v65 = *((_DWORD *)this + 10);
  unsigned int v66 = *((_DWORD *)this + 11);
  BOOL v67 = v66 >= v65;
  uint64_t v68 = v66 - v65;
  if (v67)
  {
    uint64_t v70 = v65 & ~(v65 >> 31);
    int v65 = 0;
    uint64_t v69 = v64 + v70;
    v64 += v70 + v68;
  }
  else
  {
    uint64_t v69 = v64;
  }
  uint64_t v71 = v65;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v76 = v169;
  }
  else {
    uint64_t v76 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v22, &unk_2140A3EF0, v23, v23, v76, v64, v69, v71);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v64;
  *a5 += v69;
  *a6 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v77 = 12;
  }
  else {
    uint64_t v77 = 16;
  }
  int v78 = *((_DWORD *)this + 14);
  unsigned int v79 = *((_DWORD *)this + 15);
  BOOL v67 = v79 >= v78;
  uint64_t v80 = v79 - v78;
  if (v67)
  {
    uint64_t v82 = v78 & ~(v78 >> 31);
    int v78 = 0;
    uint64_t v81 = v77 + v82;
    v77 += v82 + v80;
  }
  else
  {
    uint64_t v81 = v77;
  }
  uint64_t v83 = v78;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v88 = v169;
  }
  else {
    uint64_t v88 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v22, &unk_2140A3EF0, v23, v23, v88, v77, v81, v83);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v77;
  *a5 += v81;
  *a6 += v83;
  uint64_t v89 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 64, 0);
  uint64_t v90 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 64, 1);
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v169);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    long long v95 = v169;
  }
  else {
    long long v95 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v22, &unk_2140A3EF0, v23, v23, v95, v89, v90, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v89;
  *a5 += v90;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v100 = v169;
  }
  else {
    uint64_t v100 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v22, &unk_2140A3EF0, v23, v23, v100, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    long long v105 = v169;
  }
  else {
    long long v105 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v22, &unk_2140A3EF0, v23, v23, v105, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v110 = v169;
  }
  else {
    uint64_t v110 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v22, &unk_2140A3EF0, v23, v23, v110, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v111 = 12;
  }
  else {
    uint64_t v111 = 16;
  }
  int v112 = *((_DWORD *)this + 24);
  unsigned int v113 = *((_DWORD *)this + 25);
  BOOL v67 = v113 >= v112;
  uint64_t v114 = v113 - v112;
  if (v67)
  {
    uint64_t v116 = v112 & ~(v112 >> 31);
    int v112 = 0;
    uint64_t v115 = v111 + v116;
    v111 += v116 + v114;
  }
  else
  {
    uint64_t v115 = v111;
  }
  uint64_t v117 = v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v122 = v169;
  }
  else {
    uint64_t v122 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v22, &unk_2140A3EF0, v23, v23, v122, v111, v115, v117);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v111;
  *a5 += v115;
  *a6 += v117;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v123 = 12;
  }
  else {
    uint64_t v123 = 16;
  }
  int v124 = *((_DWORD *)this + 28);
  unsigned int v125 = *((_DWORD *)this + 29);
  BOOL v67 = v125 >= v124;
  uint64_t v126 = v125 - v124;
  if (v67)
  {
    uint64_t v128 = v124 & ~(v124 >> 31);
    int v124 = 0;
    uint64_t v127 = v123 + v128;
    v123 += v128 + v126;
  }
  else
  {
    uint64_t v127 = v123;
  }
  uint64_t v129 = v124;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v134 = v169;
  }
  else {
    uint64_t v134 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v22, &unk_2140A3EF0, v23, v23, v134, v123, v127, v129);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v123;
  *a5 += v127;
  *a6 += v129;
  uint64_t v135 = (char *)this + 120;
  uint64_t v136 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 120, 0);
  uint64_t v137 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)v135, 1);
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v169);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v142 = v169;
  }
  else {
    uint64_t v142 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v22, &unk_2140A3EF0, v23, v23, v142, v136, v137, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += v136;
  *a5 += v137;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v147 = v169;
  }
  else {
    uint64_t v147 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v143, v144, v145, v146, v22, &unk_2140A3EF0, v23, v23, v147, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v152 = v169;
  }
  else {
    uint64_t v152 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v22, &unk_2140A3EF0, v23, v23, v152, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v157 = v169;
  }
  else {
    uint64_t v157 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v22, &unk_2140A3EF0, v23, v23, v157, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 165, (DgnString *)&v169);
  if (v170) {
    uint64_t v162 = v169;
  }
  else {
    uint64_t v162 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v22, &unk_2140A3EF0, v23, v23, v162, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v169);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/chanstat.cpp", 166, (DgnString *)&v169);
  if (v170) {
    uint64_t v167 = v169;
  }
  else {
    uint64_t v167 = &unk_2140A3EF0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v168, &unk_2140A3EF0, (35 - v168), (35 - v168), v167, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v169);
}

void sub_213F1FE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ChannelStats::saveChannelStats(ChannelStats *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    ChannelStats::saveCST(this, a2, a5);
  }
  else
  {
    uint64_t v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x10u, a5, "MRCST!?", 19, 4);
    int v10 = 0;
    writeObject((uint64_t)v8, (int *)this + 2, &v10);
    writeObject((uint64_t)v8, (int *)this + 3, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 8, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 9, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 10, &v10);
    writeObject((uint64_t)v8, (int *)this + 6, &v10);
    writeObject((uint64_t)v8, (int *)this + 7, &v10);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 32, &v10);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 48, &v10);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 64, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 40, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 41, &v10);
    writeObject((uint64_t)v8, (unsigned __int16 *)this + 42, &v10);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 88, &v10);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 104, &v10);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v8, (uint64_t)this + 120, &v10);
    writeObject((uint64_t)v8, (__int16 *)this + 68, &v10);
    writeObject((uint64_t)v8, (__int16 *)this + 69, &v10);
    writeObject((uint64_t)v8, (__int16 *)this + 70, &v10);
    writeObject((uint64_t)v8, (int *)this + 36, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x10u, v10);
    DgnDelete<DgnStream>((void (***)(void))v8);
  }
}

void ChannelStats::saveCST(ChannelStats *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v38);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v38, (uint64_t)a2, 0x11u, a3);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v38, sCST_Versions, (uint64_t)&v36, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v38, "ChannelStatisticsText", (void *)(v36 + 8 * (v37 - 1)));
  int v11 = *((_DWORD *)this + 7);
  if (*((_DWORD *)this + 24) != v11
    && *((_DWORD *)this + 28) != v11
    && *((__int16 *)this + 68) == -1
    && *((_DWORD *)this + 32) != v11
    && *((__int16 *)this + 69) == -1
    && *((__int16 *)this + 70) == -1
    && *((_DWORD *)this + 36) == -1)
  {
    unsigned int v13 = 0;
    uint64_t v12 = 4;
  }
  else
  {
    uint64_t v12 = 5;
    unsigned int v13 = 1;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  v33[0] = 0;
  unint64_t v14 = realloc_array(0, v33, (4 * v12), 0, 0, 1);
  uint64_t v34 = v33[0];
  LODWORD(v35) = v12;
  HIDWORD(v35) = v14 >> 2;
  DgnArray<DgnString>::DgnArray(v33, v12);
  _DWORD *v34 = 0;
  DgnString::operator=((DgnString *)v33[0], "TableName");
  v34[1] = 3;
  DgnString::operator=((DgnString *)((char *)v33[0] + 16), "RowIndex");
  v34[2] = 3;
  DgnString::operator=((DgnString *)((char *)v33[0] + 32), "ColumnIndex");
  v34[3] = 1;
  DgnString::operator=((DgnString *)((char *)v33[0] + 48), "TableEntry");
  if (v13)
  {
    v34[4] = 1;
    DgnString::operator=((DgnString *)((char *)v33[0] + 64), "BackupTableEntry");
  }
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v38, (uint64_t)&v34, (uint64_t)v33);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v38, "NumberOfSpectralWarpChoices", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v38, "ChannelNormalizationFeatureDim", *((unsigned int *)this + 7));
  DgnString::DgnString((DgnString *)&v31);
  if (*((_WORD *)this + 8) == 1) {
    uint64_t v15 = "NoMeansNorm";
  }
  else {
    uint64_t v15 = "ChannelMeansSubtraction";
  }
  DgnString::operator=((DgnString *)&v31, v15);
  if (v32) {
    uint64_t v16 = v31;
  }
  else {
    uint64_t v16 = (const char *)&unk_2140A3EF0;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v38, "ChannelMeansNormalizationType", v16);
  if (*((_WORD *)this + 9) == 1) {
    uint64_t v17 = "NoVarianceNorm";
  }
  else {
    uint64_t v17 = "ChannelVarianceNorm";
  }
  DgnString::operator=((DgnString *)&v31, v17);
  if (v32) {
    uint64_t v18 = v31;
  }
  else {
    uint64_t v18 = (const char *)&unk_2140A3EF0;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v38, "ChannelVarianceNormalizationType", v18);
  int v19 = *((unsigned __int16 *)this + 10);
  uint64_t v20 = "InterpolatedCDFNorm";
  if (v19 == 2) {
    uint64_t v20 = "SmoothedCDFNorm";
  }
  if (v19 == 1) {
    uint64_t v21 = "NoCDFNorm";
  }
  else {
    uint64_t v21 = (char *)v20;
  }
  DgnString::operator=((DgnString *)&v31, v21);
  if (v32) {
    uint64_t v22 = v31;
  }
  else {
    uint64_t v22 = (const char *)&unk_2140A3EF0;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v38, "CDFNormalizationType", v22);
  if (*((_WORD *)this + 10) != 1) {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v38, "CDFNormalizationSum", *((unsigned int *)this + 6));
  }
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v38, "HasBackupChannelStatistics", v13);
  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "UttDetBackgroundLevel");
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *((unsigned __int16 *)this + 41));
  if (v13) {
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, *((__int16 *)this + 69));
  }
  DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v38);
  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "UttDetSpeechLevel");
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *((unsigned __int16 *)this + 42));
  if (v13) {
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, *((__int16 *)this + 70));
  }
  DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v38);
  if (*((_DWORD *)this + 2))
  {
    DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "ChosenSpectralWarpIndex");
    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, 0);
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *((_DWORD *)this + 3));
    if (v13) {
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, *((_DWORD *)this + 36));
    }
    DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v38);
  }
  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "ChannelSilenceLevel");
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *((unsigned __int16 *)this + 40));
  if (v13)
  {
    if (*((__int16 *)this + 69) == -1) {
      int v23 = -1;
    }
    else {
      int v23 = *((__int16 *)this + 68);
    }
    DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, v23);
  }
  DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v38);
  if (*((_WORD *)this + 8) == 2 && *((_DWORD *)this + 7))
  {
    unint64_t v24 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "ChannelMeans");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, v24);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *(unsigned __int8 *)(*((void *)this + 4) + v24));
      if (v13)
      {
        if (*((_DWORD *)this + 24) == *((_DWORD *)this + 7)) {
          int v25 = *(unsigned __int8 *)(*((void *)this + 11) + v24);
        }
        else {
          int v25 = -1;
        }
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, v25);
      }
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v38);
      ++v24;
    }
    while (v24 < *((unsigned int *)this + 7));
  }
  if (*((_WORD *)this + 9) == 2 && *((_DWORD *)this + 7))
  {
    unint64_t v26 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "ChannelVariance");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, v26);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 3u, *(unsigned __int8 *)(*((void *)this + 6) + v26));
      if (v13)
      {
        if (*((_DWORD *)this + 28) == *((_DWORD *)this + 7)) {
          int v27 = *(unsigned __int8 *)(*((void *)this + 13) + v26);
        }
        else {
          int v27 = -1;
        }
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, v27);
      }
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v38);
      ++v26;
    }
    while (v26 < *((unsigned int *)this + 7));
  }
  if (*((_WORD *)this + 10) != 1 && *((_DWORD *)this + 7))
  {
    unint64_t v28 = 0;
    do
    {
      for (uint64_t i = 0; i != 256; ++i)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v38, 0, "CDFNormalizationHistogram");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 1u, v28);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 2u, i);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v38, 3u, *(_DWORD *)(*(void *)(*((void *)this + 8) + 16 * v28) + 4 * i));
        if (v13)
        {
          if (*((_DWORD *)this + 32) == *((_DWORD *)this + 7)) {
            int v30 = *(_DWORD *)(*(void *)(*((void *)this + 15) + 16 * v28) + 4 * i);
          }
          else {
            int v30 = -1;
          }
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v38, 4u, v30);
        }
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v38);
      }
      ++v28;
    }
    while (v28 < *((unsigned int *)this + 7));
  }
  DgnString::~DgnString((DgnString *)&v31);
  DgnArray<DgnString>::releaseAll((uint64_t)v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v34);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v36);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v38);
}

void sub_213F207E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

uint64_t FstHmmNet::attachInPort(uint64_t this, unsigned int a2, Node *a3)
{
  *(void *)(*(void *)(this + 56) + 8 * a2) = this + 144;
  return this;
}

uint64_t FstHmmNet::getExitContext(FstHmmNet *this)
{
  return (uint64_t)this + 120;
}

uint64_t FstHmmNet::getExitContextPtr(FstHmmNet *this)
{
  return 0;
}

uint64_t FstHmmNet::scoreNetInternal(FstCore **this, int a2, int a3, uint64_t a4)
{
  FstCore::doFrameEmbedded(this[17], a4, 0);
  *((_DWORD *)this + 26) = FstCore::getNActiveStates(this[17]);
  __int16 BestExitScore = FstCore::getBestExitScore(this[17]);
  *((_WORD *)this + 54) = BestExitScore;
  if (BestExitScore != 20000)
  {
    uint64_t v6 = *(void *)this[9];
    *(_WORD *)(v6 + 8) = BestExitScore;
    *(void *)uint64_t v6 = **(unsigned int **)this[7];
  }
  uint64_t result = FstCore::getBestScoreMaybeUpdateFstNode((uint64_t)this[17]);
  if (result != 20000)
  {
    uint64_t v8 = this[1];
    if (*((_DWORD *)v8 + 56) >= (int)result)
    {
      return BestData::newOrTiedBestNode((uint64_t)v8 + 192, result, (const Node *)((char *)this + 156), 0);
    }
  }
  return result;
}

uint64_t FstHmmNet::getBestScore()
{
  return 0;
}

uint64_t FstHmmNet::calcNumActiveNodes(FstHmmNet *this)
{
  return 0;
}

uint64_t FstHmmNet::FstHmmNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t *a8, unsigned int a9, __int16 a10, PelScorer *a11, unsigned int a12, long long *a13, uint64_t a14, unsigned __int16 a15)
{
  HmmNet::HmmNet(a1, a2, a3, a4, a5, a6);
  void *v18 = &unk_26C4E5508;
  DgnString::DgnString((DgnString *)(v18 + 15));
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0x100000001;
  *(_DWORD *)(a1 + 152) = 1310740000;
  *(void *)(a1 + 156) = 0x100000001;
  *(_DWORD *)(a1 + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 1310740000;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = -65536;
  *(unsigned char *)(a1 + 18pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  *(unsigned char *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88) = 0;
  ArcGraphOrThrow = (const ArcGraph *)ArcGraphMgr::getArcGraphOrThrow((ArcGraphMgr *)ArcGraphMgr::smpArcGraphMgr, a15, v19, v20, v21, v22, v23, v24);
  Recognizer = (FstCore *)FstCore::makeRecognizer(a13, a10, a14, a7, ArcGraphOrThrow);
  *(void *)(a1 + 136) = Recognizer;
  if (!a8)
  {
    unsigned int RequiredVirtMapSize = FstCore::getRequiredVirtMapSize(Recognizer);
    if (RequiredVirtMapSize)
    {
      a8 = MemChunkAlloc(0x40uLL, 0);
      VirtMap::VirtMap((VirtMap *)a8);
      unsigned int v28 = RequiredVirtMapSize >> 6;
      unsigned int v29 = *((_DWORD *)a8 + 14);
      if (RequiredVirtMapSize >> 6 >= v29)
      {
        uint64_t v30 = v28 + 1;
        *((_DWORD *)a8 + 14) = v30;
        unsigned int v31 = *((_DWORD *)a8 + 3);
        if (v31 <= v28) {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a8, v30 - v31, 0);
        }
        uint64_t v32 = *((unsigned int *)a8 + 2);
        if (v32 <= v30)
        {
          if (v32 <= v28)
          {
            unint64_t v35 = ((unint64_t)RequiredVirtMapSize >> 6) - v32 + 1;
            uint64_t v36 = (_DWORD *)(*a8 + 16 * v32 + 8);
            do
            {
              *((void *)v36 - 1) = 0;
              *uint64_t v36 = 0;
              v36 += 4;
              --v35;
            }
            while (v35);
          }
        }
        else if ((int)v32 > (int)v30)
        {
          uint64_t v33 = (int)v32;
          uint64_t v34 = 16 * (int)v32 - 16;
          do
          {
            --v33;
            DgnPrimFixArray<double>::~DgnPrimFixArray(*a8 + v34);
            v34 -= 16;
          }
          while (v33 > v30);
        }
        *((_DWORD *)a8 + 2) = v30;
        unsigned int v37 = *((_DWORD *)a8 + 14);
        unsigned int v38 = *((_DWORD *)a8 + 7);
        unsigned int v29 = v37;
        if (v37 > v38)
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(a8 + 2), v37 - v38, 0);
          unsigned int v29 = *((_DWORD *)a8 + 14);
        }
        *((_DWORD *)a8 + 6) = v37;
        *((_DWORD *)a8 + 13) = 0;
      }
      bzero((void *)a8[2], 8 * v29);
      *((unsigned char *)a8 + 6pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1;
      *(unsigned char *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88) = 1;
    }
    else
    {
      a8 = 0;
    }
  }
  FstCore::beginTopRecSyncRecog(*(void *)(a1 + 136), a7, (uint64_t)a8);
  FstCore::beginTopRecPassSyncRecogEmbedded(*(FstCore **)(a1 + 136), a9, 4294967280, a11, a12, v39, v40, v41);
  return a1;
}

{
  return FstHmmNet::FstHmmNet(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_213F20B8C(_Unwind_Exception *a1)
{
  BitArray::~BitArray(v2);
  HmmNet::~HmmNet(v1);
  _Unwind_Resume(a1);
}

void FstHmmNet::~FstHmmNet(FstCore **this)
{
  *this = (FstCore *)&unk_26C4E5508;
  FstCore::endTopRecPassSyncRecogEmbedded(this[17]);
  FstCore::endTopRecSyncRecog(this[17]);
  if (*((unsigned char *)this + 188)) {
    DgnDelete<VirtMap>(v2);
  }
  DgnDelete<FstCore>(this[17]);
  this[17] = 0;
  BitArray::~BitArray((BitArray *)(this + 15));

  HmmNet::~HmmNet((HmmNet *)this);
}

{
  uint64_t vars8;

  FstHmmNet::~FstHmmNet(this);

  JUMPOUT(0x216698730);
}

FstCore *DgnDelete<FstCore>(FstCore *result)
{
  if (result)
  {
    FstCore::~FstCore(result);
    return (FstCore *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t FstHmmNet::unpackFstSequence(uint64_t this, Node **a2, Node **a3)
{
  *(_DWORD *)(this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 1310740000;
  *(void *)(this + 168) = 0;
  *(_DWORD *)(this + 176) = -65536;
  *(unsigned char *)(this + 18pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1;
  *a3 = (Node *)(this + 156);
  *a2 = (Node *)(this + 156);
  return this;
}

uint64_t FstHmmNet::seedInPortFst(uint64_t this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(this + 56) + 8 * a2);
  if (*(__int16 *)(v4 + 8) > (int)a3)
  {
    uint64_t v5 = this;
    int v6 = *(unsigned __int8 *)(this + 114);
    *(_WORD *)(v4 + 8) = a3;
    *(_DWORD *)uint64_t v4 = a4;
    if (!v6) {
      *(_DWORD *)(v4 + 4) = 0;
    }
    *(_DWORD *)(this + 156) = a4;
    *(_DWORD *)(this + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(v4 + 4);
    this = FstCore::seedTheory(*(FstCore **)(this + 136), a3, *(unsigned int *)(this + 184), a4);
    *(unsigned char *)(v5 + 112) = 1;
  }
  return this;
}

uint64_t FstHmmNet::setEmbeddedFstSeedingTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 184) = a2;
  return this;
}

uint64_t FstHmmNet::expandEmbFstHistory(uint64_t a1)
{
  return FstCore::expandEmbFstHistory(*(void *)(a1 + 136));
}

uint64_t HmmNet::nActiveSilNodes(HmmNet *this)
{
  return 0;
}

uint64_t FstHmmNet::isAcoustic(FstHmmNet *this)
{
  return 1;
}

uint64_t HmmNet::canCallBack(HmmNet *this)
{
  return 0;
}

uint64_t HmmNet::getRemainder(HmmNet *this)
{
  return 0;
}

uint64_t mrecHeapValid(void)
{
  return 1;
}

void MrecInitModule_wavepac_sigproc(void)
{
  if (!gParDebugWavePacketLossDetection)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugWavePacketLossDetection", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugWavePacketLossDetection = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugWavePacketLossDetection);
  }
}

void MulTable::~MulTable(MulTable *this)
{
}

uint64_t MulTable::permute(MulTable *this, unsigned int a2)
{
  return (unsigned __int16)(a2 + 24 * (a2 >> 9));
}

uint64_t MulTable::unpermute(MulTable *this, unsigned __int16 a2)
{
  return (unsigned __int16)(a2 - 24 * (a2 / 0x218u));
}

void MulTable::printSize(MulTable *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 135, (DgnString *)&v91);
  if (v92) {
    uint64_t v16 = v91;
  }
  else {
    uint64_t v16 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A3F18, a3, &unk_2140A3F18, v16);
  DgnString::~DgnString((DgnString *)&v91);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A3F18);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92) {
    int v25 = v91;
  }
  else {
    int v25 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92) {
    uint64_t v30 = v91;
  }
  else {
    uint64_t v30 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v30, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92) {
    unint64_t v35 = v91;
  }
  else {
    unint64_t v35 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v35, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += 4;
  *a5 += 4;
  uint64_t v36 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v36 = 12;
  }
  uint64_t v37 = *((unsigned int *)this + 8);
  if ((int)v37 <= 0) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = 2 * v37;
  }
  uint64_t v39 = v38 + v36;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92) {
    uint64_t v44 = v91;
  }
  else {
    uint64_t v44 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v44, v39, v39, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v39;
  *a5 += v39;
  uint64_t v45 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 12;
  }
  uint64_t v46 = v45 + (*((_DWORD *)this + 20) & ~(*((int *)this + 20) >> 31));
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92) {
    uint64_t v51 = v91;
  }
  else {
    uint64_t v51 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v51, v46, v46, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v46;
  *a5 += v46;
  uint64_t v52 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 12;
  }
  uint64_t v53 = *((unsigned int *)this + 24);
  if ((int)v53 <= 0) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = 2 * v53;
  }
  uint64_t v55 = v54 + v52;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 137, (DgnString *)&v91);
  if (v92) {
    uint64_t v60 = v91;
  }
  else {
    uint64_t v60 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v60, v55, v55, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v55;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v61 = 4;
  }
  else {
    uint64_t v61 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 138, (DgnString *)&v91);
  if (v92) {
    unsigned int v66 = v91;
  }
  else {
    unsigned int v66 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v66, v61, v61, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v61;
  *a5 += v61;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 140, (DgnString *)&v91);
  if (v92) {
    uint64_t v71 = v91;
  }
  else {
    uint64_t v71 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += 4;
  *a5 += 4;
  uint64_t v72 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 12;
  }
  uint64_t v73 = *((unsigned int *)this + 12);
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  else {
    uint64_t v74 = 2 * v73;
  }
  uint64_t v75 = v74 + v72;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 142, (DgnString *)&v91);
  if (v92) {
    uint64_t v80 = v91;
  }
  else {
    uint64_t v80 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v80, v75, v75, 0);
  DgnString::~DgnString((DgnString *)&v91);
  *a4 += v75;
  *a5 += v75;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 144, (DgnString *)&v91);
  if (v92) {
    uint64_t v85 = v91;
  }
  else {
    uint64_t v85 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, (a3 + 1), &unk_2140A3F18, (34 - a3), (34 - a3), v85, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v91);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/multable.cpp", 145, (DgnString *)&v91);
  if (v92) {
    uint64_t v90 = v91;
  }
  else {
    uint64_t v90 = &unk_2140A3F18;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, a3, &unk_2140A3F18, (35 - a3), (35 - a3), v90, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v91);
}

void sub_213F2149C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MulTable::saveMulTable(MulTable *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    MulTable::saveMulTableText(this, a2, a5);
  }
  else
  {
    uint64_t v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x2Du, a5, "MRMULT!?", 14, 1);
    unsigned int v15 = 0;
    writeObject((uint64_t)v8, (int *)this, &v15);
    writeObject(v8, (const double *)this + 13, &v15, v9, v10, v11, v12, v13);
    writeObject((uint64_t)v8, (int *)this + 1, &v15);
    writeObject<short>((uint64_t)v8, (uint64_t)this + 24, &v15);
    writeObject<unsigned char>((uint64_t)v8, (uint64_t)this + 72, &v15);
    writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 88, &v15);
    writeObjectChecksum((uint64_t)v8, (int *)&v15);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x2Du, v15);
    DgnDelete<DgnStream>((void (***)(void))v8);
  }
}

void MulTable::saveMulTableText(MulTable *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v24);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v24, (uint64_t)a2, 0x2Eu, a3);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v24, sMTT_Versions, (uint64_t)&v22, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v24, "MulTableText", (void *)(v22 + 8 * (v23 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "NumberOfMulTables", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v24, "MulScale", *((double *)this + 13));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "MaxScaledDev", *((unsigned int *)this + 1));
  DgnArray<DgnString>::DgnArray(v21, 4);
  int v25 = 0;
  unint64_t v11 = realloc_array(0, &v25, 0x10uLL, 0, 0, 1);
  uint64_t v18 = v25;
  int v19 = 4;
  int v20 = v11 >> 2;
  DgnString::operator=(*(DgnString **)v21, "Type");
  _DWORD *v18 = 0;
  DgnString::operator=((DgnString *)(*(void *)v21 + 16), "UnsVal1");
  v18[1] = 3;
  DgnString::operator=((DgnString *)(*(void *)v21 + 32), "IntVal1");
  v18[2] = 1;
  DgnString::operator=((DgnString *)(*(void *)v21 + 48), "IntVal2");
  v18[3] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v24, (uint64_t)&v18, (uint64_t)v21);
  if (*(_DWORD *)this)
  {
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    do
    {
      uint64_t v14 = 2 * v13 + 2;
      v13 += 512;
      for (int i = 255; i != -256; --i)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "MulTable");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, v12);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 2u, i);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(__int16 *)(*((void *)this + 3) + v14));
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v24);
        v14 += 2;
      }
      ++v12;
    }
    while (v12 < *(_DWORD *)this);
  }
  if (*((_DWORD *)this + 1))
  {
    unsigned int v16 = 1;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "ScaledDevToMulTableMap");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, v16);
      unsigned int v17 = *(unsigned __int8 *)(*((void *)this + 9) + v16 - 1) - 1;
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 2u, v17);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(unsigned __int16 *)(*((void *)this + 11) + 2 * v17));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v24);
      ++v16;
    }
    while (v16 <= *((_DWORD *)this + 1));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
  DgnArray<DgnString>::releaseAll((uint64_t)v21);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v22);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v24);
}

void sub_213F21958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

uint64_t *DgnPrimFixArray<unsigned char>::copyArraySlice(uint64_t *result, void *a2, int a3, unsigned int a4)
{
  uint64_t v7 = result;
  if (!a4 || *((_DWORD *)result + 2))
  {
    if (!a4) {
      return result;
    }
  }
  else
  {
    uint64_t result = MemChunkAlloc(a4, 0);
    *uint64_t v7 = (uint64_t)result;
    *((_DWORD *)v7 + 2) = a4;
  }
  uint64_t v8 = 0;
  do
  {
    *(unsigned char *)(*v7 + v8) = *(unsigned char *)(*a2 + (a3 + v8));
    ++v8;
  }
  while (a4 != v8);
  return result;
}

uint64_t tknLogString(uint64_t result)
{
  if (s_logCallBack) {
    return s_logCallBack(result);
  }
  return result;
}

uint64_t makeDataManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    verifyStringArgument(*(unsigned char **)(a1 + 8), 0, 0, "Bad data spec file-or-dir pointer", a5);
    if (*(void *)a1 != 3) {
      operator new();
    }
    operator new();
  }
  return 0;
}

void sub_213F21B18(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

uint64_t handleException(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*a1) {
    tknPrintf("Error: %s\n", a2, a3, a4, a5, a1);
  }
  tknPrintf("Error: Caught exception in %s, TPError = %llu\n", a2, a3, a4, a5, a2, a3);
  return a3;
}

void partial apply()
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v8, "TPApi_Initialize");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v7);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    SDApi_CheckVersion(0x18u, 0x197u, (uint64_t)&sSDInitCheckSizesInternal);
    operator new();
  }
  conditionalAssert("Already initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpmisc.cpp", 130, v0, v1);
  exception = __cxa_allocate_exception(0x28uLL);
  std::string::basic_string[abi:ne180100]<0>(&v5, "Already initialized");
  void *exception = byte_26C4DF190;
  uint64_t v3 = (std::string *)(exception + 1);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v5, *((std::string::size_type *)&v5 + 1));
  }
  else
  {
    long long v4 = v5;
    exception[3] = v6;
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  void *exception = &unk_26C4E0430;
  exception[4] = 5;
}

void sub_213F21D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  MEMORY[0x216698730](v21, 0x1070C40ADD13FEBLL);
  MEMORY[0x216698730](v20, 0x10F3C403D9D550DLL);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(&a20);
  TReentrancyHandler::ms_bIn = 0;
  switch(a2)
  {
    case 7:
      uint64_t v26 = (char *)__cxa_begin_catch(a1);
      uint64_t v27 = v26 + 8;
      if (v26[31] < 0) {
        uint64_t v27 = *(unsigned char **)v27;
      }
      handleException(v27, (uint64_t)"TPApi_Initialize", *((void *)v26 + 4), v24, v25);
      __cxa_end_catch();
      goto LABEL_27;
    case 6:
      uint64_t v30 = (char *)__cxa_begin_catch(a1);
      uint64_t v31 = v30 + 8;
      if (v30[31] < 0) {
        uint64_t v31 = *(unsigned char **)v31;
      }
      handleException(v31, (uint64_t)"TPApi_Initialize", 6, v28, v29);
      __cxa_end_catch();
      goto LABEL_27;
    case 5:
      uint64_t v34 = (char *)__cxa_begin_catch(a1);
      unint64_t v35 = v34 + 8;
      if (v34[31] < 0) {
        unint64_t v35 = *(unsigned char **)v35;
      }
      break;
    case 4:
      uint64_t v38 = (char *)__cxa_begin_catch(a1);
      uint64_t v39 = v38 + 8;
      if (v38[31] < 0) {
        uint64_t v39 = *(unsigned char **)v39;
      }
      handleException(v39, (uint64_t)"TPApi_Initialize", 11, v36, v37);
      __cxa_end_catch();
LABEL_27:
      JUMPOUT(0x213F21C68);
    case 3:
      uint64_t v40 = (char *)__cxa_begin_catch(a1);
      unint64_t v35 = v40 + 8;
      if (v40[31] < 0) {
        unint64_t v35 = *(unsigned char **)v35;
      }
      break;
    case 2:
      uint64_t v41 = __cxa_begin_catch(a1);
      uint64_t v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
      handleException(v42, (uint64_t)"TPApi_Initialize", 1, v43, v44);
      __cxa_end_catch();
      goto LABEL_27;
    default:
      if (a2 != 1) {
        _Unwind_Resume(a1);
      }
      uint64_t v45 = __cxa_begin_catch(a1);
      uint64_t v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
      handleException(v46, (uint64_t)"TPApi_Initialize", 2, v47, v48);
LABEL_13:
      __cxa_end_catch();
      goto LABEL_27;
  }
  handleException(v35, (uint64_t)"TPApi_Initialize", 2, v32, v33);
  goto LABEL_13;
}

void MrecInitModule_ngram2fsm_lm(void)
{
  if (!gParDebugWordLMToTransducerGrammar)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugWordLMToTransducerGrammar", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugWordLMToTransducerGrammar = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMToTransducerGrammar);
  }
  if (!gParDebugWordLMToTransducerGrammarDetails)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugWordLMToTransducerGrammarDetails", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDebugWordLMToTransducerGrammarDetails = (uint64_t)v3;
    long long v4 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v4, (GlobalParam **)&gParDebugWordLMToTransducerGrammarDetails);
  }
}

void (***WordLanguageModel::getWordIdToTrGrmLmIdArray(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6))(void)
{
  uint64_t v10 = *(unsigned int *)(a1 + 104);
  unsigned int v11 = *(_DWORD *)(a3 + 12);
  if (v10 > v11) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a3, v10 - v11, 0);
  }
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  if (v12 <= v10)
  {
    if (v12 < v10)
    {
      uint64_t v15 = v10 - v12;
      uint64_t v16 = 16 * v12;
      do
      {
        unsigned int v17 = (void *)(*(void *)a3 + v16);
        *unsigned int v17 = 0;
        v17[1] = 0;
        v16 += 16;
        --v15;
      }
      while (v15);
    }
  }
  else if ((int)v12 > (int)v10)
  {
    uint64_t v13 = (int)v12;
    uint64_t v14 = 16 * (int)v12 - 16;
    do
    {
      --v13;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a3 + v14);
      v14 -= 16;
    }
    while (v13 > (int)v10);
  }
  *(_DWORD *)(a3 + 8) = v10;
  unsigned int v18 = *(_DWORD *)(a4 + 12);
  if (v10 > v18) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a4, v10 - v18, 0);
  }
  uint64_t v19 = *(unsigned int *)(a4 + 8);
  if (v19 <= v10)
  {
    if (v19 < v10)
    {
      uint64_t v22 = v10 - v19;
      uint64_t v23 = 16 * v19;
      do
      {
        uint64_t v24 = (void *)(*(void *)a4 + v23);
        *uint64_t v24 = 0;
        v24[1] = 0;
        v23 += 16;
        --v22;
      }
      while (v22);
    }
  }
  else if ((int)v19 > (int)v10)
  {
    uint64_t v20 = (int)v19;
    uint64_t v21 = 16 * (int)v19 - 16;
    do
    {
      --v20;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a4 + v21);
      v21 -= 16;
    }
    while (v20 > (int)v10);
  }
  *(_DWORD *)(a4 + 8) = v10;
  *a5 = 0;
  unsigned int v25 = a2[3];
  if (v25 <= 4) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, 5 - v25, 0);
  }
  unint64_t v26 = a2[2];
  if (v26 <= 5)
  {
    if (v26 != 5)
    {
      uint64_t v28 = 16 * v26;
      do
      {
        uint64_t v29 = (void *)(*(void *)a2 + v28);
        *uint64_t v29 = 0;
        v29[1] = 0;
        v28 += 16;
      }
      while (v28 != 80);
    }
  }
  else if ((int)v26 >= 6)
  {
    uint64_t v27 = 16 * v26 - 16;
    do
    {
      --v26;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a2 + v27);
      v27 -= 16;
    }
    while (v26 > 5);
  }
  a2[2] = 5;
  uint64_t v30 = *(void *)a2;
  unsigned int v31 = *(_DWORD *)(*(void *)a2 + 24);
  uint64_t v32 = *(void *)a2;
  if (v31 == *(_DWORD *)(*(void *)a2 + 28))
  {
    DgnPrimArray<unsigned int>::reallocElts(v30 + 16, 1, 1);
    unsigned int v31 = *(_DWORD *)(v30 + 24);
    uint64_t v32 = *(void *)a2;
  }
  *(_DWORD *)(*(void *)(v30 + 16) + 4 * v31) = 16777214;
  ++*(_DWORD *)(v30 + 24);
  unsigned int v33 = *(_DWORD *)(v32 + 40);
  uint64_t v34 = v32;
  if (v33 == *(_DWORD *)(v32 + 44))
  {
    DgnPrimArray<unsigned int>::reallocElts(v32 + 32, 1, 1);
    unsigned int v33 = *(_DWORD *)(v32 + 40);
    uint64_t v34 = *(void *)a2;
  }
  *(_DWORD *)(*(void *)(v32 + 32) + 4 * v33) = 16777213;
  ++*(_DWORD *)(v32 + 40);
  unsigned int v35 = *(_DWORD *)(v34 + 56);
  uint64_t v36 = v34;
  if (v35 == *(_DWORD *)(v34 + 60))
  {
    DgnPrimArray<unsigned int>::reallocElts(v34 + 48, 1, 1);
    unsigned int v35 = *(_DWORD *)(v34 + 56);
    uint64_t v36 = *(void *)a2;
  }
  uint64_t v90 = (void *)a4;
  *(_DWORD *)(*(void *)(v34 + 48) + 4 * v35) = 16777210;
  ++*(_DWORD *)(v34 + 56);
  unsigned int v37 = *(_DWORD *)(v36 + 72);
  if (v37 == *(_DWORD *)(v36 + 76))
  {
    DgnPrimArray<unsigned int>::reallocElts(v36 + 64, 1, 1);
    unsigned int v37 = *(_DWORD *)(v36 + 72);
  }
  *(_DWORD *)(*(void *)(v36 + 64) + 4 * v37) = 16777212;
  ++*(_DWORD *)(v36 + 72);
  *a5 = 5;
  uint64_t v91 = MemChunkAlloc(0x70uLL, 0);
  Hash<Int32Pair,Int32Pair,Int32PairScope,int>::Hash((uint64_t)v91, 0, 16);
  unsigned int v38 = *(_DWORD *)(a1 + 128);
  if (v38 || (unsigned int v38 = *(_DWORD *)(a1 + 144)) != 0 || (unsigned int v38 = *(_DWORD *)(a1 + 160)) != 0)
  {
    unint64_t v39 = 0;
    uint64_t v40 = v38;
    while (1)
    {
      uint64_t v41 = *(void *)(a1 + 16);
      uint64_t v42 = *(unsigned int *)(*(void *)(v41 + 256) + 4 * v39);
      if (v39 == v42) {
        break;
      }
      if (v39 < *(unsigned int *)(v41 + 388))
      {
        if (*(unsigned char *)(*(void *)(v41 + 104) + v39))
        {
          int LmId = WordLanguageModel::getLmId((WordLanguageModel *)a1, v42);
          int v50 = WordLanguageModel::getLmId((WordLanguageModel *)a1, v39);
          uint64_t v41 = *(void *)(a1 + 16);
          if (LmId != v50)
          {
            WordLanguageModel::getLmId((WordLanguageModel *)a1, *(_DWORD *)(*(void *)(v41 + 256) + 4 * v39));
            WordLanguageModel::getLmId((WordLanguageModel *)a1, v39);
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/ngram2fsm.cpp", 403, (uint64_t)"lm/ngram2fsm", 2, (uint64_t)"%u %u %u %u", v51, v52, v39);
            uint64_t v41 = *(void *)(a1 + 16);
          }
        }
      }
      if (v39 < *(unsigned int *)(v41 + 388))
      {
        if (*(unsigned char *)(*(void *)(v41 + 104) + v39))
        {
          MaybeContextint LmId = WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, *(_DWORD *)(*(void *)(v41 + 256) + 4 * v39));
          if (MaybeContextLmId != WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, v39))
          {
            WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 256) + 4 * v39));
            WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, v39);
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/ngram2fsm.cpp", 411, (uint64_t)"lm/ngram2fsm", 2, (uint64_t)"%u %u %u %u", v54, v55, v39);
          }
        }
      }
LABEL_105:
      if (++v39 == v40) {
        return DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>((void (***)(void))v91);
      }
    }
    if (!*(_WORD *)(*(void *)(v41 + 32) + 2 * v39))
    {
      uint64_t v56 = *(unsigned int *)(a6 + 8);
      if (!v56) {
        goto LABEL_105;
      }
      uint64_t v57 = *(int **)a6;
      uint64_t v58 = 0xFFFFFFFFLL;
      while (1)
      {
        int v59 = *v57++;
        if (v39 == v59) {
          break;
        }
        --v58;
        if (!--v56) {
          goto LABEL_105;
        }
      }
      if (!v58) {
        goto LABEL_105;
      }
    }
    unsigned int v43 = WordLanguageModel::getLmId((WordLanguageModel *)a1, v39);
    unsigned int v44 = WordLanguageModel::getMaybeContextLmId((WordLanguageModel *)a1, v39);
    int v46 = *(_DWORD *)(a1 + 112);
    int v45 = *(_DWORD *)(a1 + 116);
    v93[0] = v43;
    v93[1] = v44;
    uint64_t v47 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)v91, v93);
    if (v47)
    {
      uint64_t v48 = (int *)v47 + 5;
      goto LABEL_69;
    }
    if (v46 == v43)
    {
      if (WordLanguageModel::getWordId((WordLanguageModel *)a1, v43, 0) == 16777214)
      {
        int v60 = 1;
LABEL_66:
        int v92 = v60;
LABEL_68:
        uint64_t v48 = &v92;
        Hash<Int32Pair,Int32Pair,Int32PairScope,int>::add((uint64_t)v91, v93, &v92);
LABEL_69:
        uint64_t v61 = *v48;
        uint64_t v62 = *(void *)a3 + 16 * v43;
        uint64_t v64 = (_DWORD *)(v62 + 8);
        uint64_t v63 = *(unsigned int *)(v62 + 8);
        if (!*(_DWORD *)(v62 + 8)) {
          goto LABEL_75;
        }
        uint64_t v65 = *(int **)v62;
        uint64_t v66 = *(unsigned int *)(v62 + 8);
        uint64_t v67 = 0xFFFFFFFFLL;
        while (1)
        {
          int v68 = *v65++;
          if (v68 == v61) {
            break;
          }
          --v67;
          if (!--v66) {
            goto LABEL_75;
          }
        }
        if (!v67)
        {
LABEL_75:
          if (v63 == *(_DWORD *)(*(void *)a3 + 16 * v43 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*(void *)a3 + 16 * v43, 1, 1);
            uint64_t v63 = *v64;
          }
          *(_DWORD *)(*(void *)v62 + 4 * v63) = v61;
          ++*v64;
        }
        uint64_t v69 = *v90 + 16 * v44;
        uint64_t v71 = (_DWORD *)(v69 + 8);
        uint64_t v70 = *(unsigned int *)(v69 + 8);
        if (!*(_DWORD *)(v69 + 8)) {
          goto LABEL_84;
        }
        uint64_t v72 = *(int **)v69;
        uint64_t v73 = *(unsigned int *)(v69 + 8);
        uint64_t v74 = 0xFFFFFFFFLL;
        while (1)
        {
          int v75 = *v72++;
          if (v75 == v61) {
            break;
          }
          --v74;
          if (!--v73) {
            goto LABEL_84;
          }
        }
        if (!v74)
        {
LABEL_84:
          if (v70 == *(_DWORD *)(*v90 + 16 * v44 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*v90 + 16 * v44, 1, 1);
            uint64_t v70 = *v71;
          }
          *(_DWORD *)(*(void *)v69 + 4 * v7pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v61;
          ++*v71;
        }
        if ((v61 - 3) <= 0xFFFFFFFD)
        {
          unsigned int v76 = a2[2];
          if (v76 <= v61)
          {
            uint64_t v77 = (v61 + 1);
            unsigned int v78 = a2[3];
            if (v77 > v78)
            {
              DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, v77 - v78, 0);
              unsigned int v76 = a2[2];
            }
            if (v76 <= v77)
            {
              if (v76 < v77)
              {
                uint64_t v81 = 16 * v76;
                uint64_t v82 = v77 - v76;
                do
                {
                  uint64_t v83 = (void *)(*(void *)a2 + v81);
                  *uint64_t v83 = 0;
                  v83[1] = 0;
                  v81 += 16;
                  --v82;
                }
                while (v82);
              }
            }
            else if ((int)v76 > (int)v77)
            {
              uint64_t v79 = (int)v76;
              uint64_t v80 = 16 * (int)v76 - 16;
              do
              {
                --v79;
                DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a2 + v80);
                v80 -= 16;
              }
              while (v79 > (int)v77);
            }
            a2[2] = v77;
          }
          uint64_t v84 = *(void *)a2 + 16 * v61;
          uint64_t v86 = (_DWORD *)(v84 + 8);
          uint64_t v85 = *(unsigned int *)(v84 + 8);
          if (v85 == *(_DWORD *)(v84 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(*(void *)a2 + 16 * v61, 1, 1);
            uint64_t v85 = *v86;
          }
          *(_DWORD *)(*(void *)v84 + 4 * v85) = v39;
          ++*v86;
        }
        goto LABEL_105;
      }
    }
    else if (v45 == v43 && WordLanguageModel::getWordId((WordLanguageModel *)a1, v43, 0) == 16777213)
    {
      int v60 = 2;
      goto LABEL_66;
    }
    int v92 = *a5;
    *a5 = v92 + 1;
    goto LABEL_68;
  }
  return DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>((void (***)(void))v91);
}

uint64_t WordLanguageModel::getLmId(WordLanguageModel *this, unsigned int a2)
{
  if (a2 == 16777214) {
    return *((unsigned int *)this + 28);
  }
  if (a2 == 16777213) {
    return *((unsigned int *)this + 29);
  }
  unsigned int v3 = *((_DWORD *)this + 32);
  if (v3)
  {
    if (v3 > a2) {
      return *(unsigned int *)(*((void *)this + 15) + 4 * a2);
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = *((_DWORD *)this + 36);
  if (v4)
  {
    if (v4 > a2)
    {
      unsigned int v5 = *(unsigned __int16 *)(*((void *)this + 17) + 2 * a2);
      BOOL v6 = v5 == 0xFFFF;
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
  if (*((_DWORD *)this + 40) <= a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = *(unsigned __int8 *)(*((void *)this + 19) + a2);
  BOOL v6 = v5 == 255;
LABEL_13:
  if (v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v5;
  }
}

uint64_t WordLanguageModel::getMaybeContextLmId(WordLanguageModel *this, unsigned int a2)
{
  if (a2 == 16777212) {
    return 4294967294;
  }
  if (a2 == 16777214) {
    return *((unsigned int *)this + 28);
  }
  unsigned int v3 = *((_DWORD *)this + 32);
  unsigned int v4 = v3;
  if (!v3)
  {
    unsigned int v4 = *((_DWORD *)this + 36);
    if (!v4) {
      unsigned int v4 = *((_DWORD *)this + 40);
    }
  }
  if (v4 <= a2) {
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned char *)this + 276))
  {
    if (*((_DWORD *)this + 72))
    {
      uint64_t v5 = *((void *)this + 35);
      return *(unsigned int *)(v5 + 4 * a2);
    }
    uint64_t v6 = a2;
    if (*((_DWORD *)this + 76))
    {
      uint64_t v7 = *((void *)this + 37);
LABEL_20:
      unsigned int v8 = *(unsigned __int16 *)(v7 + 2 * v6);
      BOOL v9 = v8 == 0xFFFF;
      goto LABEL_24;
    }
    uint64_t v10 = *((void *)this + 39);
  }
  else
  {
    if (v3)
    {
      uint64_t v5 = *((void *)this + 15);
      return *(unsigned int *)(v5 + 4 * a2);
    }
    uint64_t v6 = a2;
    if (*((_DWORD *)this + 36))
    {
      uint64_t v7 = *((void *)this + 17);
      goto LABEL_20;
    }
    uint64_t v10 = *((void *)this + 19);
  }
  unsigned int v8 = *(unsigned __int8 *)(v10 + v6);
  BOOL v9 = v8 == 255;
LABEL_24:
  if (v9) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v8;
  }
}

void *WordLanguageModel::getWordTransducer(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int a5, __int16 a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/ngram2fsm.cpp", 459, (uint64_t)"lm/ngram2fsm", 1, (uint64_t)"%u", a7, a8, **(_WORD **)a2);
  }
  uint64_t v356 = 2;
  v355[0] = 0;
  v355[1] = 0;
  v354[0] = 0;
  v354[1] = 0;
  WordLanguageModel::getWordIdToTrGrmLmIdArray(a1, a4, (uint64_t)v355, (uint64_t)v354, (int *)&v356 + 1, a7);
  int v13 = v356;
  LODWORD(v356) = v356 + 1;
  int v353 = v13;
  uint64_t v320 = (WordLanguageModel *)a1;
  uint64_t v14 = *(unsigned int *)(a1 + 112);
  if (v14 != -1)
  {
    uint64_t v15 = v355[0] + 16 * v14;
    unsigned int v17 = (unsigned int *)(v15 + 8);
    unsigned int v16 = *(_DWORD *)(v15 + 8);
    if (!v16) {
      goto LABEL_10;
    }
    unsigned int v18 = *(int **)v15;
    uint64_t v19 = 0xFFFFFFFFLL;
    uint64_t v20 = *(unsigned int *)(v15 + 8);
    while (1)
    {
      int v21 = *v18++;
      if (v21 == 1) {
        break;
      }
      --v19;
      if (!--v20) {
        goto LABEL_10;
      }
    }
    if (!v19)
    {
LABEL_10:
      if (v16 == *(_DWORD *)(v15 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(v15, 1, 1);
        unsigned int v16 = *v17;
      }
      *(_DWORD *)(*(void *)v15 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 1;
      ++*v17;
      uint64_t v14 = *(unsigned int *)(a1 + 112);
    }
    uint64_t v22 = v354[0] + 16 * v14;
    uint64_t v24 = (unsigned int *)(v22 + 8);
    unsigned int v23 = *(_DWORD *)(v22 + 8);
    if (!v23) {
      goto LABEL_19;
    }
    unsigned int v25 = *(int **)v22;
    uint64_t v26 = 0xFFFFFFFFLL;
    uint64_t v27 = *(unsigned int *)(v22 + 8);
    while (1)
    {
      int v28 = *v25++;
      if (v28 == 1) {
        break;
      }
      --v26;
      if (!--v27) {
        goto LABEL_19;
      }
    }
    if (!v26)
    {
LABEL_19:
      if (v23 == *(_DWORD *)(v22 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(v22, 1, 1);
        unsigned int v23 = *v24;
      }
      *(_DWORD *)(*(void *)v22 + 4 * v23) = 1;
      ++*v24;
    }
  }
  uint64_t v29 = *(unsigned int *)(a1 + 116);
  if (v29 != -1)
  {
    uint64_t v30 = v355[0] + 16 * v29;
    uint64_t v32 = (unsigned int *)(v30 + 8);
    unsigned int v31 = *(_DWORD *)(v30 + 8);
    if (!v31) {
      goto LABEL_29;
    }
    unsigned int v33 = *(int **)v30;
    uint64_t v34 = 0xFFFFFFFFLL;
    uint64_t v35 = *(unsigned int *)(v30 + 8);
    while (1)
    {
      int v36 = *v33++;
      if (v36 == 2) {
        break;
      }
      --v34;
      if (!--v35) {
        goto LABEL_29;
      }
    }
    if (!v34)
    {
LABEL_29:
      if (v31 == *(_DWORD *)(v30 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(v30, 1, 1);
        unsigned int v31 = *v32;
      }
      *(_DWORD *)(*(void *)v30 + 4 * v31) = 2;
      ++*v32;
      uint64_t v29 = *(unsigned int *)(a1 + 116);
    }
    uint64_t v37 = v354[0] + 16 * v29;
    unint64_t v39 = (_DWORD *)(v37 + 8);
    uint64_t v38 = *(unsigned int *)(v37 + 8);
    if (*(_DWORD *)(v37 + 8))
    {
      uint64_t v40 = 0;
      uint64_t v41 = *(void *)v37;
      while (*(_DWORD *)(v41 + v40) != 2)
      {
        v40 += 4;
        if (4 * v38 == v40) {
          goto LABEL_41;
        }
      }
      if (v40 != 0x3FFFFFFFCLL)
      {
        if (v38 == *(_DWORD *)(v354[0] + 16 * v29 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(v37, 1, 1);
          uint64_t v38 = *v39;
          uint64_t v41 = *(void *)v37;
        }
        *(_DWORD *)(v41 + 4 * v38) = 2;
        ++*v39;
      }
    }
  }
LABEL_41:
  uint64_t v42 = HIDWORD(v356);
  uint64_t v351 = 0;
  uint64_t v352 = 0;
  if (HIDWORD(v356))
  {
    __b = 0;
    unint64_t v43 = 4 * HIDWORD(v356);
    unint64_t v44 = realloc_array(0, &__b, v43, 0, 0, 1);
    unint64_t v45 = 0;
    int v46 = __b;
    uint64_t v351 = __b;
    LODWORD(v352) = v42;
    HIDWORD(v352) = v44 >> 2;
    do
    {
      v46[v45 / 4] = v13;
      v45 += 4;
    }
    while (v43 != v45);
  }
  else
  {
    int v46 = 0;
    LODWORD(v352) = 0;
  }
  int v47 = v13;
  if (*(_DWORD *)(a1 + 112) != -1)
  {
    int v47 = v13;
    if (*(_DWORD *)(a1 + 64) != 1)
    {
      int v47 = v356;
      LODWORD(v356) = v356 + 1;
    }
  }
  v46[1] = v47;
  unsigned int v48 = *(_DWORD *)(a3 + 8);
  if (v48 == *(_DWORD *)(a3 + 12))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a3, 1, 1);
    unsigned int v48 = *(_DWORD *)(a3 + 8);
  }
  uint64_t v49 = *(void *)a3 + 16 * v48;
  *(_DWORD *)uint64_t v49 = 0;
  *(_DWORD *)(v49 + 4) = v47;
  *(void *)(v49 + 8) = 1;
  unsigned int v50 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v50;
  if (*(_DWORD *)(a1 + 116) == -1)
  {
    if (v50 == *(_DWORD *)(a3 + 12))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a3, 1, 1);
      unsigned int v50 = *(_DWORD *)(a3 + 8);
    }
    uint64_t v51 = *(void *)a3 + 16 * v50;
    *(_DWORD *)uint64_t v51 = v13;
    *(void *)(v51 + 4) = 0x200000001;
    *(_DWORD *)(v51 + 12) = 0;
    ++*(_DWORD *)(a3 + 8);
  }
  v351[2] = 1;
  if (a5 == 0xFFFFFF)
  {
    unsigned int v52 = -1;
    uint64_t v53 = a1;
  }
  else
  {
    uint64_t v53 = a1;
    if (*(_DWORD *)(a1 + 128))
    {
      unsigned int v52 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * a5);
    }
    else
    {
      if (*(_DWORD *)(a1 + 144))
      {
        unsigned int v54 = *(unsigned __int16 *)(*(void *)(a1 + 136) + 2 * a5);
        BOOL v55 = v54 == 0xFFFF;
      }
      else
      {
        unsigned int v54 = *(unsigned __int8 *)(*(void *)(a1 + 152) + a5);
        BOOL v55 = v54 == 255;
      }
      if (v55) {
        unsigned int v52 = -1;
      }
      else {
        unsigned int v52 = v54;
      }
    }
  }
  unsigned int v56 = *(_DWORD *)(v53 + 64);
  uint64_t v338 = a3;
  if (v56 >= 2)
  {
    *(void *)uint64_t v333 = v42;
    NGramIterator::NGramIterator((NGramIterator *)&__b, (const WordLanguageModel *)a1, 2, 1);
    while (NGramIterator::next((NGramIterator *)&__b, v57, v58, v59, v60, v61, v62, v63))
    {
      uint64_t v64 = v354[0] + 16 * *(unsigned int *)v348[0];
      unint64_t v65 = *(unsigned int *)(v64 + 8);
      if (*(_DWORD *)(v64 + 8))
      {
        unint64_t v66 = 0;
        do
        {
          uint64_t v67 = *(unsigned int *)(*(void *)v64 + 4 * v66);
          if (v67 != 2)
          {
            int v68 = v351[v67];
            if (v68 == v13)
            {
              int v68 = v356;
              LODWORD(v356) = v356 + 1;
              v351[v67] = v68;
            }
            __int16 v69 = v350;
            uint64_t v70 = *(unsigned int *)(v338 + 8);
            if (v70 == *(_DWORD *)(v338 + 12))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
              uint64_t v70 = *(unsigned int *)(v338 + 8);
            }
            uint64_t v71 = *(void *)v338 + 16 * v70;
            *(_DWORD *)uint64_t v71 = v68;
            *(_DWORD *)(v71 + 4) = v13;
            *(_DWORD *)(v71 + 8) = 3;
            *(_WORD *)(v71 + 12) = v69;
            *(_WORD *)(v71 + 14) = 0;
            ++*(_DWORD *)(v338 + 8);
            unint64_t v65 = *(unsigned int *)(v64 + 8);
            a3 = v338;
          }
          ++v66;
        }
        while (v66 < v65);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    unsigned int v56 = *(_DWORD *)(a1 + 64);
    uint64_t v42 = *(void *)v333;
  }
  if (v56)
  {
    uint64_t v344 = 0;
    uint64_t v345 = 0;
    if (v42)
    {
      __b = 0;
      unint64_t v72 = realloc_array(0, &__b, 2 * v42, 0, 0, 1);
      uint64_t v344 = __b;
      LODWORD(v345) = v42;
      HIDWORD(v345) = v72 >> 1;
      memset_pattern16(__b, &unk_2140A1DB0, 2 * v42);
    }
    else
    {
      LODWORD(v345) = 0;
    }
    NGramIterator::NGramIterator((NGramIterator *)&__b, (const WordLanguageModel *)a1, 1, 0);
    char v80 = 0;
    while (NGramIterator::next((NGramIterator *)&__b, v73, v74, v75, v76, v77, v78, v79))
    {
      uint64_t v81 = *(unsigned int *)v348[0];
      uint64_t v82 = *(unsigned int *)(v355[0] + 16 * v81 + 8);
      if (v82)
      {
        uint64_t v83 = *(unsigned int **)(v355[0] + 16 * v81);
        uint64_t v84 = *(void *)a4;
        uint64_t v85 = v344;
        do
        {
          unsigned int v87 = *v83++;
          uint64_t v86 = v87;
          if (*(_DWORD *)(v84 + 16 * v87 + 8))
          {
            if (v81 == v52)
            {
              v85[v86] = a6;
              char v80 = 1;
            }
            else
            {
              if (*(_DWORD *)(a1 + 64) == 1) {
                __int16 v88 = v349;
              }
              else {
                __int16 v88 = v350;
              }
              v85[v86] = v88;
            }
          }
          --v82;
        }
        while (v82);
      }
    }
    if (v42)
    {
      for (uint64_t i = 0; i != v42; ++i)
      {
        if (i != 1)
        {
          int v90 = *((unsigned __int16 *)v344 + i);
          if (v90 != 20000)
          {
            uint64_t v91 = a3;
            int v92 = v351[i];
            uint64_t v93 = *(unsigned int *)(v91 + 8);
            if (v93 == *(_DWORD *)(v91 + 12))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts(v91, 1, 1);
              uint64_t v93 = *(unsigned int *)(v91 + 8);
            }
            uint64_t v94 = *(void *)v91 + 16 * v93;
            *(_DWORD *)uint64_t v94 = v13;
            *(_DWORD *)(v94 + 4) = v92;
            *(_DWORD *)(v94 + 8) = i;
            *(_WORD *)(v94 + 12) = v90;
            *(_WORD *)(v94 + 14) = 0;
            ++*(_DWORD *)(v91 + 8);
            a3 = v91;
          }
        }
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v344);
    LOBYTE(v56) = v80 & 1;
  }
  if (v52 != -1 && (v56 & 1) == 0)
  {
    int v95 = **(_DWORD **)(v355[0] + 16 * v52);
    unsigned int v96 = *(_DWORD *)(a3 + 8);
    if (v96 == *(_DWORD *)(a3 + 12))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a3, 1, 1);
      unsigned int v96 = *(_DWORD *)(a3 + 8);
    }
    uint64_t v97 = *(void *)a3 + 16 * v96;
    *(_DWORD *)uint64_t v97 = v13;
    *(_DWORD *)(v97 + 4) = v13;
    *(_DWORD *)(v97 + 8) = v95;
    *(_WORD *)(v97 + 12) = a6;
    *(_WORD *)(v97 + 14) = 0;
    ++*(_DWORD *)(a3 + 8);
  }
  uint64_t v98 = MemChunkAlloc(0x70uLL, 0);
  uint64_t v337 = (void (***)(void))Hash<Int32Pair,Int32Pair,Int32PairScope,int>::Hash((uint64_t)v98, 0, 16);
  uint64_t v99 = v320;
  unsigned int v100 = *((_DWORD *)v320 + 16);
  if (v100 >= 3)
  {
    NGramIterator::NGramIterator((NGramIterator *)&__b, v320, 3, 1);
    while (NGramIterator::next((NGramIterator *)&__b, v101, v102, v103, v104, v105, v106, v107))
    {
      uint64_t v108 = v354[0] + 16 * *(unsigned int *)v348[0];
      unint64_t v109 = *(unsigned int *)(v108 + 8);
      uint64_t v334 = (unsigned int *)(v108 + 8);
      if (*(_DWORD *)(v108 + 8))
      {
        unint64_t v110 = 0;
        uint64_t v111 = (void *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 4));
        int v112 = (unsigned int *)(v111 + 1);
        uint64_t v328 = v354[0] + 16 * *(unsigned int *)v348[0];
        do
        {
          uint64_t v113 = *(unsigned int *)(*(void *)v108 + 4 * v110);
          if (v113 != 2 && *(_DWORD *)(*(void *)a4 + 16 * v113 + 8) != 0)
          {
            unint64_t v115 = *v112;
            if (v115)
            {
              for (unint64_t j = 0; j < v115; ++j)
              {
                uint64_t v117 = *(unsigned int *)(*v111 + 4 * j);
                if ((v117 - 1) >= 2 && *(_DWORD *)(*(void *)a4 + 16 * v117 + 8) != 0)
                {
                  uint64_t v340 = (void *)__PAIR64__(v117, v113);
                  uint64_t v344 = 0;
                  uint64_t v342 = &v356;
                  if (Hash<Int32Pair,Int32Pair,Int32PairScope,int>::insert((uint64_t)v337, &v340, &v344, (_DWORD **)&v342))LODWORD(v356) = v356 + 1; {
                  int v119 = *(_DWORD *)v342;
                  }
                  int v120 = v351[v117];
                  __int16 v121 = v350;
                  uint64_t v122 = *(unsigned int *)(v338 + 8);
                  if (v122 == *(_DWORD *)(v338 + 12))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                    uint64_t v122 = *(unsigned int *)(v338 + 8);
                  }
                  uint64_t v123 = *(void *)v338 + 16 * v122;
                  *(_DWORD *)uint64_t v123 = v119;
                  *(_DWORD *)(v123 + 4) = v120;
                  *(_DWORD *)(v123 + 8) = 3;
                  *(_WORD *)(v123 + 12) = v121;
                  *(_WORD *)(v123 + 14) = 0;
                  ++*(_DWORD *)(v338 + 8);
                  unint64_t v115 = *v112;
                }
              }
              uint64_t v108 = v328;
              unint64_t v109 = *v334;
              uint64_t v99 = v320;
            }
          }
          ++v110;
        }
        while (v110 < v109);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    unsigned int v100 = *((_DWORD *)v99 + 16);
    a3 = v338;
  }
  if (v100 >= 2)
  {
    NGramIterator::NGramIterator((NGramIterator *)&__b, v99, 2, 0);
    while (NGramIterator::next((NGramIterator *)&__b, v124, v125, v126, v127, v128, v129, v130))
    {
      uint64_t v131 = v354[0] + 16 * *(unsigned int *)v348[0];
      unint64_t v132 = *(unsigned int *)(v131 + 8);
      uint64_t v335 = (unsigned int *)(v131 + 8);
      if (*(_DWORD *)(v131 + 8))
      {
        unint64_t v133 = 0;
        uint64_t v134 = (void *)(v355[0] + 16 * *(unsigned int *)(v348[0] + 4));
        uint64_t v135 = (unsigned int *)(v134 + 1);
        uint64_t v329 = v354[0] + 16 * *(unsigned int *)v348[0];
        do
        {
          uint64_t v136 = *(unsigned int *)(*(void *)v131 + 4 * v133);
          if (v136 != 2 && *(_DWORD *)(*(void *)a4 + 16 * v136 + 8) != 0)
          {
            unint64_t v138 = *v135;
            if (v138)
            {
              for (unint64_t k = 0; k < v138; ++k)
              {
                uint64_t v140 = *(unsigned int *)(*v134 + 4 * k);
                if (v140 != 1 && *(_DWORD *)(*(void *)a4 + 16 * v140 + 8) != 0)
                {
                  uint64_t v344 = (void *)__PAIR64__(v140, v136);
                  Bucket = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)v337, &v344);
                  if (*Bucket) {
                    uint64_t v143 = (int *)*Bucket + 5;
                  }
                  else {
                    uint64_t v143 = &v351[v140];
                  }
                  int v144 = *v143;
                  int v145 = v351[v136];
                  __int16 v146 = v349;
                  uint64_t v147 = *(unsigned int *)(v338 + 8);
                  if (v147 == *(_DWORD *)(v338 + 12))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                    uint64_t v147 = *(unsigned int *)(v338 + 8);
                  }
                  uint64_t v148 = *(void *)v338 + 16 * v147;
                  *(_DWORD *)uint64_t v148 = v145;
                  *(_DWORD *)(v148 + 4) = v144;
                  *(_DWORD *)(v148 + 8) = v140;
                  *(_WORD *)(v148 + 12) = v146;
                  *(_WORD *)(v148 + 14) = 0;
                  ++*(_DWORD *)(v338 + 8);
                  unint64_t v138 = *v135;
                }
              }
              uint64_t v131 = v329;
              unint64_t v132 = *v335;
            }
          }
          ++v133;
        }
        while (v133 < v132);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    a3 = v338;
    uint64_t v99 = v320;
  }
  uint64_t v149 = MemChunkAlloc(0x70uLL, 0);
  uint64_t v336 = (void (***)(void))Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::Hash((uint64_t)v149, 0, 16);
  unsigned int v150 = *((_DWORD *)v99 + 16);
  if (v150 >= 4)
  {
    NGramIterator::NGramIterator((NGramIterator *)&__b, v99, 4, 1);
    uint64_t v158 = a4;
    uint64_t v159 = (uint64_t)v337;
    while (NGramIterator::next((NGramIterator *)&__b, v151, v152, v153, v154, v155, v156, v157))
    {
      uint64_t v160 = v354[0] + 16 * *(unsigned int *)v348[0];
      unint64_t v161 = *(unsigned int *)(v160 + 8);
      uint64_t v317 = (unsigned int *)(v160 + 8);
      if (*(_DWORD *)(v160 + 8))
      {
        unint64_t v162 = 0;
        uint64_t v163 = (void *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 4));
        uint64_t v164 = (void *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 8));
        uint64_t v325 = v163;
        uint64_t v330 = (unsigned int *)(v163 + 1);
        uint64_t v165 = (unsigned int *)(v164 + 1);
        uint64_t v314 = v354[0] + 16 * *(unsigned int *)v348[0];
        do
        {
          uint64_t v166 = *(unsigned int *)(*(void *)v160 + 4 * v162);
          if (v166 != 2 && *(_DWORD *)(*(void *)v158 + 16 * v166 + 8) != 0)
          {
            unint64_t v168 = *v330;
            if (v168)
            {
              unint64_t v322 = v162;
              for (unint64_t m = 0; m < v168; ++m)
              {
                uint64_t v170 = *(unsigned int *)(*v163 + 4 * m);
                if ((v170 - 1) >= 2 && *(_DWORD *)(*(void *)v158 + 16 * v170 + 8) != 0)
                {
                  unint64_t v172 = *v165;
                  if (v172)
                  {
                    for (unint64_t n = 0; n < v172; ++n)
                    {
                      uint64_t v174 = *(unsigned int *)(*v164 + 4 * n);
                      if (v174 != 1 && *(_DWORD *)(*(void *)v158 + 16 * v174 + 8) != 0)
                      {
                        uint64_t v344 = (void *)__PAIR64__(v170, v166);
                        LODWORD(v345) = v174;
                        uint64_t v342 = 0;
                        uint64_t v340 = &v356;
                        if (Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::insert((uint64_t)v336, &v344, &v342, (_DWORD **)&v340))LODWORD(v356) = v356 + 1; {
                        int v176 = *(_DWORD *)v340;
                        }
                        uint64_t v342 = (void *)__PAIR64__(v174, v170);
                        uint64_t v177 = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v159, &v342);
                        if (*v177) {
                          uint64_t v178 = (int *)*v177 + 5;
                        }
                        else {
                          uint64_t v178 = &v351[v174];
                        }
                        int v179 = *v178;
                        __int16 v180 = v350;
                        uint64_t v181 = *(unsigned int *)(v338 + 8);
                        if (v181 == *(_DWORD *)(v338 + 12))
                        {
                          DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                          uint64_t v181 = *(unsigned int *)(v338 + 8);
                        }
                        uint64_t v182 = *(void *)v338 + 16 * v181;
                        *(_DWORD *)uint64_t v182 = v176;
                        *(_DWORD *)(v182 + 4) = v179;
                        *(_DWORD *)(v182 + 8) = 3;
                        *(_WORD *)(v182 + 12) = v180;
                        *(_WORD *)(v182 + 14) = 0;
                        ++*(_DWORD *)(v338 + 8);
                        unint64_t v172 = *v165;
                        uint64_t v158 = a4;
                        uint64_t v159 = (uint64_t)v337;
                      }
                    }
                    uint64_t v163 = v325;
                    unint64_t v168 = *v330;
                  }
                }
              }
              uint64_t v160 = v314;
              unint64_t v161 = *v317;
              unint64_t v162 = v322;
            }
          }
          ++v162;
        }
        while (v162 < v161);
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    uint64_t v99 = v320;
    unsigned int v150 = *((_DWORD *)v320 + 16);
    a3 = v338;
  }
  if (v150 >= 3)
  {
    NGramIterator::NGramIterator((NGramIterator *)&__b, v99, 3, 0);
    uint64_t v190 = a4;
    uint64_t v191 = (uint64_t)v337;
LABEL_199:
    while (NGramIterator::next((NGramIterator *)&__b, v183, v184, v185, v186, v187, v188, v189))
    {
      uint64_t v192 = v354[0] + 16 * *(unsigned int *)v348[0];
      unint64_t v193 = *(unsigned int *)(v192 + 8);
      uint64_t v315 = (unsigned int *)(v192 + 8);
      if (*(_DWORD *)(v192 + 8))
      {
        uint64_t v194 = 0;
        uint64_t v195 = (void *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 4));
        uint64_t v196 = (void *)(v355[0] + 16 * *(unsigned int *)(v348[0] + 8));
        uint64_t v326 = (unsigned int *)(v195 + 1);
        uint64_t v331 = (unsigned int *)(v196 + 1);
        uint64_t v312 = v354[0] + 16 * *(unsigned int *)v348[0];
        uint64_t v323 = v195;
        while (1)
        {
          uint64_t v197 = *(unsigned int *)(*(void *)v192 + 4 * v194);
          if (v197 != 2 && *(_DWORD *)(*(void *)v190 + 16 * v197 + 8) != 0)
          {
            unint64_t v199 = *v326;
            if (v199) {
              break;
            }
          }
LABEL_235:
          if (++v194 >= v193) {
            goto LABEL_199;
          }
        }
        uint64_t v318 = v194;
        uint64_t v200 = 0;
        while (1)
        {
          uint64_t v201 = *(unsigned int *)(*v195 + 4 * v200);
          if ((v201 - 1) >= 2 && *(_DWORD *)(*(void *)v190 + 16 * v201 + 8) != 0)
          {
            unint64_t v203 = *v331;
            if (v203) {
              break;
            }
          }
LABEL_233:
          if (++v200 >= v199)
          {
            uint64_t v192 = v312;
            unint64_t v193 = *v315;
            uint64_t v194 = v318;
            goto LABEL_235;
          }
        }
        uint64_t v204 = 0;
        while (2)
        {
          uint64_t v205 = *(unsigned int *)(*v196 + 4 * v204);
          if (v205 != 1 && *(_DWORD *)(*(void *)v190 + 16 * v205 + 8) != 0)
          {
            uint64_t v342 = (void *)__PAIR64__(v201, v197);
            uint64_t v207 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v191, &v342);
            if (v207)
            {
              uint64_t v208 = (int *)v207 + 5;
              goto LABEL_222;
            }
            if (v197 == 1)
            {
              uint64_t v208 = &v351[v201];
LABEL_222:
              uint64_t v344 = (void *)__PAIR64__(v201, v197);
              LODWORD(v345) = v205;
              uint64_t v209 = *Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::findBucket((uint64_t)v336, &v344);
              if (v209)
              {
                uint64_t v210 = (int *)(v209 + 24);
              }
              else
              {
                uint64_t v340 = (void *)__PAIR64__(v205, v201);
                uint64_t v211 = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v191, &v340);
                if (*v211) {
                  uint64_t v210 = (int *)*v211 + 5;
                }
                else {
                  uint64_t v210 = &v351[v205];
                }
              }
              int v212 = *v208;
              int v213 = *v210;
              __int16 v214 = v349;
              uint64_t v215 = *(unsigned int *)(v338 + 8);
              if (v215 == *(_DWORD *)(v338 + 12))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                uint64_t v215 = *(unsigned int *)(v338 + 8);
              }
              uint64_t v216 = *(void *)v338 + 16 * v215;
              *(_DWORD *)uint64_t v216 = v212;
              *(_DWORD *)(v216 + 4) = v213;
              *(_DWORD *)(v216 + 8) = v205;
              *(_WORD *)(v216 + 12) = v214;
              *(_WORD *)(v216 + 14) = 0;
              ++*(_DWORD *)(v338 + 8);
              uint64_t v190 = a4;
              uint64_t v191 = (uint64_t)v337;
            }
            unint64_t v203 = *v331;
          }
          if (++v204 >= v203)
          {
            uint64_t v195 = v323;
            unint64_t v199 = *v326;
            goto LABEL_233;
          }
          continue;
        }
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
    a3 = v338;
    if (*((_DWORD *)v320 + 16) >= 4u)
    {
      NGramIterator::NGramIterator((NGramIterator *)&__b, v320, 4, 0);
      uint64_t v224 = a4;
      uint64_t v226 = (uint64_t)v336;
      uint64_t v225 = (uint64_t)v337;
LABEL_239:
      while (NGramIterator::next((NGramIterator *)&__b, v217, v218, v219, v220, v221, v222, v223))
      {
        uint64_t v227 = v354[0] + 16 * *(unsigned int *)v348[0];
        unint64_t v228 = *(unsigned int *)(v227 + 8);
        uint64_t v310 = (unsigned int *)(v227 + 8);
        if (*(_DWORD *)(v227 + 8))
        {
          uint64_t v229 = 0;
          uint64_t v230 = (void *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 4));
          uint64_t v231 = (unsigned int *)(v354[0] + 16 * *(unsigned int *)(v348[0] + 8));
          uint64_t v232 = (void *)(v355[0] + 16 * *(unsigned int *)(v348[0] + 12));
          uint64_t v313 = v230;
          uint64_t v316 = (unsigned int *)(v230 + 1);
          uint64_t v324 = v231 + 2;
          uint64_t v327 = v232;
          uint64_t v332 = (unsigned int *)(v232 + 1);
          uint64_t v309 = v354[0] + 16 * *(unsigned int *)v348[0];
          uint64_t v321 = (WordLanguageModel *)v231;
          while (1)
          {
            uint64_t v233 = *(unsigned int *)(*(void *)v227 + 4 * v229);
            if (*(_DWORD *)(*(void *)v224 + 16 * v233 + 8))
            {
              unint64_t v234 = *v316;
              if (v234) {
                break;
              }
            }
LABEL_283:
            if (++v229 >= v228) {
              goto LABEL_239;
            }
          }
          uint64_t v311 = v229;
          uint64_t v235 = 0;
          while (1)
          {
            uint64_t v236 = *(unsigned int *)(*v230 + 4 * v235);
            if ((v236 - 1) >= 2 && *(_DWORD *)(*(void *)v224 + 16 * v236 + 8) != 0)
            {
              unint64_t v238 = *v324;
              if (v238) {
                break;
              }
            }
LABEL_281:
            if (++v235 >= v234)
            {
              uint64_t v227 = v309;
              unint64_t v228 = *v310;
              uint64_t v229 = v311;
              goto LABEL_283;
            }
          }
          uint64_t v319 = v235;
          uint64_t v239 = 0;
          while (1)
          {
            uint64_t v240 = *(unsigned int *)(*(void *)v231 + 4 * v239);
            if ((v240 - 1) >= 2 && *(_DWORD *)(*(void *)v224 + 16 * v240 + 8) != 0)
            {
              unint64_t v242 = *v332;
              if (v242) {
                break;
              }
            }
LABEL_279:
            if (++v239 >= v238)
            {
              uint64_t v230 = v313;
              unint64_t v234 = *v316;
              uint64_t v235 = v319;
              goto LABEL_281;
            }
          }
          uint64_t v243 = 0;
          while (2)
          {
            uint64_t v244 = *(unsigned int *)(*v232 + 4 * v243);
            if (v244 != 1 && *(_DWORD *)(*(void *)v224 + 16 * v244 + 8) != 0)
            {
              uint64_t v344 = (void *)__PAIR64__(v236, v233);
              LODWORD(v345) = v240;
              uint64_t v246 = *Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::findBucket(v226, &v344);
              if (v233 != 1 || v246)
              {
                if (v246)
                {
                  uint64_t v248 = (int *)(v246 + 24);
LABEL_267:
                  uint64_t v342 = (void *)__PAIR64__(v240, v236);
                  LODWORD(v343) = v244;
                  uint64_t v249 = *Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::findBucket(v226, &v342);
                  if (v249)
                  {
                    uint64_t v250 = (int *)(v249 + 24);
                  }
                  else
                  {
                    uint64_t v340 = (void *)__PAIR64__(v244, v240);
                    uint64_t v251 = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v225, &v340);
                    if (*v251)
                    {
                      uint64_t v250 = (int *)*v251 + 5;
                    }
                    else
                    {
                      uint64_t v250 = &v351[v244];
                      if (*v250 == -1) {
                        uint64_t v250 = &v353;
                      }
                    }
                  }
                  int v252 = *v248;
                  int v253 = *v250;
                  __int16 v254 = v349;
                  uint64_t v255 = *(unsigned int *)(v338 + 8);
                  if (v255 == *(_DWORD *)(v338 + 12))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts(v338, 1, 1);
                    uint64_t v255 = *(unsigned int *)(v338 + 8);
                  }
                  uint64_t v256 = *(void *)v338 + 16 * v255;
                  *(_DWORD *)uint64_t v256 = v252;
                  *(_DWORD *)(v256 + 4) = v253;
                  *(_DWORD *)(v256 + 8) = v244;
                  *(_WORD *)(v256 + 12) = v254;
                  *(_WORD *)(v256 + 14) = 0;
                  ++*(_DWORD *)(v338 + 8);
                  uint64_t v224 = a4;
                  uint64_t v226 = (uint64_t)v336;
                  uint64_t v225 = (uint64_t)v337;
                  uint64_t v232 = v327;
                }
              }
              else
              {
                uint64_t v342 = (void *)__PAIR64__(v240, v236);
                uint64_t v247 = *Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(v225, &v342);
                if (v247)
                {
                  uint64_t v248 = (int *)v247 + 5;
                  goto LABEL_267;
                }
              }
              unint64_t v242 = *v332;
            }
            if (++v243 >= v242)
            {
              uint64_t v231 = (unsigned int *)v321;
              unint64_t v238 = *v324;
              goto LABEL_279;
            }
            continue;
          }
        }
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
      a3 = v338;
    }
  }
  DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>(v336);
  DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>(v337);
  unsigned int v257 = v356;
  int v258 = v356 - 1;
  uint64_t v259 = *(unsigned int *)(a3 + 8);
  if (!v259) {
    goto LABEL_296;
  }
  uint64_t v260 = (int *)(*(void *)a3 + 4);
  do
  {
    int v261 = v257 - 1;
    if (*v260 != 1)
    {
      if (*v260 != v258) {
        goto LABEL_292;
      }
      int v261 = 1;
    }
    *uint64_t v260 = v261;
LABEL_292:
    if (*(v260 - 1) == v258) {
      *(v260 - 1) = 1;
    }
    v260 += 4;
    --v259;
  }
  while (v259);
  unsigned int v257 = v356;
LABEL_296:
  __b = 0;
  uint64_t v347 = 0;
  if (!v257)
  {
    uint64_t v344 = 0;
    uint64_t v345 = 0;
    goto LABEL_304;
  }
  uint64_t v344 = 0;
  unint64_t v262 = realloc_array(0, &v344, 4 * v257, 0, 0, 1);
  uint64_t v345 = 0;
  __b = v344;
  int v263 = v356;
  LODWORD(v347) = v257;
  HIDWORD(v347) = v262 >> 2;
  uint64_t v344 = 0;
  if (!v356)
  {
LABEL_304:
    LODWORD(v345) = 0;
    uint64_t v342 = 0;
    uint64_t v343 = 0;
    goto LABEL_305;
  }
  uint64_t v342 = 0;
  unint64_t v264 = realloc_array(0, &v342, 4 * v356, 0, 0, 1);
  uint64_t v343 = 0;
  uint64_t v344 = v342;
  int v265 = v356;
  LODWORD(v345) = v263;
  HIDWORD(v345) = v264 >> 2;
  uint64_t v342 = 0;
  if (!v356)
  {
LABEL_305:
    int v268 = 0;
    LODWORD(v343) = 0;
    goto LABEL_306;
  }
  uint64_t v340 = 0;
  unint64_t v266 = realloc_array(0, &v340, 4 * v356, 0, 0, 1);
  uint64_t v267 = v340;
  uint64_t v342 = v340;
  int v268 = v356;
  LODWORD(v343) = v265;
  HIDWORD(v343) = v266 >> 2;
  uint64_t v269 = __b;
  if ((int)v356 >= 1)
  {
    uint64_t v270 = 0;
    do
    {
      v269[v270] = 0;
      v267[v270++] = 0;
      int v268 = v356;
    }
    while (v270 < (int)v356);
LABEL_306:
    uint64_t v269 = __b;
  }
  unint64_t v271 = *(unsigned int *)(a3 + 8);
  if (v271)
  {
    unint64_t v272 = 0;
    uint64_t v273 = *(unsigned int **)a3;
    uint64_t v274 = v342;
    do
    {
      if (v273[2] == 3)
      {
        uint64_t v275 = *v273;
        if (!v274[v275])
        {
          v274[v275] = v272;
          v269[*v273] = 1;
          unint64_t v271 = *(unsigned int *)(a3 + 8);
        }
      }
      ++v272;
      v273 += 4;
    }
    while (v272 < v271);
    int v268 = v356;
  }
  uint64_t v276 = v344;
  if (v268 >= 1)
  {
    uint64_t v277 = 0;
    do
    {
      v269[v277] = 0;
      v276[v277++] = 0;
    }
    while (v277 < (int)v356);
  }
  *uint64_t v269 = 1;
  v276[v258] = 1;
  unint64_t v278 = *(unsigned int *)(a3 + 8);
  uint64_t v279 = *(void *)a3 + 4;
  do
  {
    if (!v278) {
      break;
    }
    unint64_t v280 = 0;
    char v281 = 0;
    uint64_t v282 = (unsigned int *)v279;
    do
    {
      if (v269[*(v282 - 1)] == 1)
      {
        uint64_t v283 = *v282;
        if (!v269[v283])
        {
          char v281 = 1;
          v269[v283] = 1;
          unint64_t v278 = *(unsigned int *)(a3 + 8);
        }
      }
      v282 += 4;
      ++v280;
    }
    while (v280 < v278);
  }
  while ((v281 & 1) != 0);
  uint64_t v284 = *(void *)a3 + 4;
  do
  {
    int v285 = *(_DWORD *)(a3 + 8);
    if (v285 - 1 < 0) {
      break;
    }
    char v286 = 0;
    uint64_t v287 = (_DWORD *)(v284 + 16 * (v285 - 1));
    uint64_t v288 = v287;
    do
    {
      int v289 = *v288;
      v288 -= 4;
      if (v276[v289] == 1)
      {
        uint64_t v290 = *(v287 - 1);
        if (!v276[v290])
        {
          char v286 = 1;
          v276[v290] = 1;
        }
      }
      --v285;
      uint64_t v287 = v288;
    }
    while (v285 > 0);
  }
  while ((v286 & 1) != 0);
  int v291 = v356;
  uint64_t v340 = 0;
  uint64_t v341 = 0;
  if (v356)
  {
    uint64_t v357 = 0;
    unint64_t v292 = realloc_array(0, &v357, 4 * v356, 0, 0, 1);
    uint64_t v293 = v357;
    uint64_t v340 = v357;
    int v294 = v356;
    LODWORD(v341) = v291;
    HIDWORD(v341) = v292 >> 2;
    if ((int)v356 >= 1)
    {
      uint64_t v295 = 0;
      int v296 = 0;
      uint64_t v297 = __b;
      uint64_t v298 = v344;
      do
      {
        if (v297[v295] == 1 && v298[v295] == 1)
        {
          v293[v295] = v296++;
          int v294 = v356;
        }
        ++v295;
      }
      while (v295 < v294);
    }
  }
  else
  {
    uint64_t v293 = 0;
    LODWORD(v341) = 0;
  }
  unint64_t v299 = *(unsigned int *)(a3 + 8);
  if (v299)
  {
    uint64_t v300 = 0;
    unint64_t v301 = 0;
    unsigned int v302 = 0;
    do
    {
      uint64_t v303 = *(void *)a3;
      uint64_t v304 = (unsigned int *)(*(void *)a3 + v300);
      uint64_t v305 = *v304;
      if (*((_DWORD *)__b + v305))
      {
        uint64_t v306 = v304[1];
        if (*((_DWORD *)v344 + v306))
        {
          *uint64_t v304 = v293[v305];
          v304[1] = v293[v306];
          if (v301 != v302)
          {
            *(_OWORD *)(v303 + 16 * v302) = *(_OWORD *)v304;
            unint64_t v299 = *(unsigned int *)(a3 + 8);
          }
          ++v302;
        }
      }
      ++v301;
      v300 += 16;
    }
    while (v301 < v299);
    unsigned int v307 = *(_DWORD *)(a3 + 12);
    if (v302 > v307) {
      DgnArray<DgnPrimArray<double>>::reallocElts(a3, v302 - v307, 0);
    }
  }
  else
  {
    unsigned int v302 = 0;
  }
  *(_DWORD *)(a3 + 8) = v302;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v340);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v342);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v351);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v354);
  return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v355);
}

void sub_213F24094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 160);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v31 - 136);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v31 - 120);
  _Unwind_Resume(a1);
}

uint64_t Hash<Int32Pair,Int32Pair,Int32PairScope,int>::add(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    uint64_t result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  }
  HIDWORD(v7) = *a2;
  LODWORD(v7) = *a2;
  int v8 = (v7 >> 19) + a2[1];
  int v9 = *(_DWORD *)(v5 + 16);
  if (v9) {
    unsigned int v10 = (-1640531527 * v8) >> -(char)v9;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)(v5 + 80);
  uint64_t v12 = *(void *)(v5 + 32);
  if (!v12)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v12 = *(void *)(v5 + 32);
  }
  int v13 = (void *)(v11 + 8 * v10);
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)v12;
  *(_DWORD *)(v12 + 8) = 0;
  *(void *)(v12 + 12) = *(void *)a2;
  *(_DWORD *)(v12 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *a3;
  *(_DWORD *)(v12 + 8) = v8;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v12 = *v13;
  }
  else
  {
    *(void *)uint64_t v12 = 0;
    uint64_t v14 = (void *)*v13;
    if (*v13)
    {
      do
      {
        int v13 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
  }
  void *v13 = v12;
  return result;
}

uint64_t Hash<Int32Pair,Int32Pair,Int32PairScope,int>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E46F0;
  *(_OWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 20;
  }
  else {
    int v7 = 24;
  }
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F243A4(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<Int32Pair,Int32Pair,Int32PairScope,int>::~Hash(uint64_t a1)
{
  Hash<Int32Pair,Int32Pair,Int32PairScope,int>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<Int32Pair,Int32Pair,Int32PairScope,int>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E46F0;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<Int32Pair,Int32Pair,Int32PairScope,int>::insert(uint64_t a1, _DWORD *a2, void *a3, _DWORD **a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v8 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v8);
  }
  int v9 = a2[1];
  HIDWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *a2;
  LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *a2;
  int v11 = (v10 >> 19) + v9;
  int v12 = *(_DWORD *)(a1 + 16);
  if (v12) {
    uint64_t v13 = (-1640531527 * v11) >> -(char)v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(uint64_t **)(v14 + 8 * v13);
  if (!v15)
  {
LABEL_13:
    uint64_t v17 = *(void *)(a1 + 32);
    if (!v17)
    {
      DgnPool::addChunk((DgnPool *)(a1 + 24));
      uint64_t v17 = *(void *)(a1 + 32);
    }
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)v17;
    unsigned int v18 = *a4;
    *(_DWORD *)(v17 + 8) = 0;
    *(void *)(v17 + 12) = *(void *)a2;
    *(_DWORD *)(v17 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *v18;
    *a4 = (_DWORD *)(v17 + 20);
    *a3 = v17 + 12;
    *(_DWORD *)(v17 + 8) = v11;
    ++*(_DWORD *)(a1 + 8);
    if (*(unsigned char *)(a1 + 20))
    {
      *(void *)uint64_t v17 = *(void *)(v14 + 8 * v13);
    }
    else
    {
      *(void *)uint64_t v17 = 0;
      uint64_t v19 = *(void **)(v14 + 8 * v13);
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
        *uint64_t v20 = v17;
        return 1;
      }
    }
    *(void *)(v14 + 8 * v13) = v17;
    return 1;
  }
  while (*((_DWORD *)v15 + 2) != v11 || *((_DWORD *)v15 + 3) != *a2 || *((_DWORD *)v15 + 4) != v9)
  {
    uint64_t v15 = (uint64_t *)*v15;
    if (!v15) {
      goto LABEL_13;
    }
  }
  uint64_t result = 0;
  *a3 = (char *)v15 + 12;
  *a4 = (_DWORD *)v15 + 5;
  return result;
}

uint64_t Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4538;
  *(_OWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 24;
  }
  else {
    int v7 = 28;
  }
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F24690(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::~Hash(uint64_t a1)
{
  Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4538;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = *(char **)v5;
          int v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7) {
            uint64_t result = v7(v5 + 12);
          }
          unsigned int v8 = *(uint64_t (**)(void *))(v1 + 104);
          if (v8) {
            uint64_t result = v8((void *)v5 + 3);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::insert(uint64_t a1, _DWORD *a2, void *a3, _DWORD **a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v8 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v8);
  }
  int v9 = a2[1];
  HIDWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *a2;
  LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *a2;
  HIDWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = (v10 >> 19) + v9;
  LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = HIDWORD(v10);
  int v11 = a2[2];
  int v12 = (v10 >> 19) + v11;
  int v13 = *(_DWORD *)(a1 + 16);
  if (v13) {
    uint64_t v14 = (-1640531527 * v12) >> -(char)v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 80);
  unsigned int v16 = *(uint64_t **)(v15 + 8 * v14);
  if (!v16)
  {
LABEL_12:
    uint64_t v17 = *(void *)(a1 + 32);
    if (!v17)
    {
      DgnPool::addChunk((DgnPool *)(a1 + 24));
      uint64_t v17 = *(void *)(a1 + 32);
    }
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)v17;
    unsigned int v18 = *a4;
    *(_DWORD *)(v17 + 8) = 0;
    int v19 = a2[2];
    *(void *)(v17 + 12) = *(void *)a2;
    *(_DWORD *)(v17 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v19;
    *(_DWORD *)(v17 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = *v18;
    *a4 = (_DWORD *)(v17 + 24);
    *a3 = v17 + 12;
    *(_DWORD *)(v17 + 8) = v12;
    ++*(_DWORD *)(a1 + 8);
    if (*(unsigned char *)(a1 + 20))
    {
      *(void *)uint64_t v17 = *(void *)(v15 + 8 * v14);
    }
    else
    {
      *(void *)uint64_t v17 = 0;
      uint64_t v20 = *(void **)(v15 + 8 * v14);
      if (v20)
      {
        do
        {
          int v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
        *int v21 = v17;
        return 1;
      }
    }
    *(void *)(v15 + 8 * v14) = v17;
    return 1;
  }
  while (*((_DWORD *)v16 + 2) != v12
       || *((_DWORD *)v16 + 3) != *a2
       || *((_DWORD *)v16 + 4) != v9
       || *((_DWORD *)v16 + 5) != v11)
  {
    unsigned int v16 = (uint64_t *)*v16;
    if (!v16) {
      goto LABEL_12;
    }
  }
  uint64_t result = 0;
  *a3 = (char *)v16 + 12;
  *a4 = v16 + 3;
  return result;
}

void *Hash<Int32Triple,Int32Triple,Int32TripleScope,int>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[1];
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  HIDWORD(v3) = (v3 >> 19) + v2;
  LODWORD(v3) = HIDWORD(v3);
  int v4 = a2[2];
  int v5 = (v3 >> 19) + v4;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    unsigned int v7 = (-1640531527 * v5) >> -(char)v6;
  }
  else {
    unsigned int v7 = 0;
  }
  unsigned int v8 = (void *)(*(void *)(a1 + 80) + 8 * v7);
  int v9 = (uint64_t *)*v8;
  if (!*v8) {
    return v8;
  }
  do
  {
    uint64_t result = v8;
    unsigned int v8 = v9;
    if (*((_DWORD *)v9 + 2) == v5
      && *((_DWORD *)v9 + 3) == *a2
      && *((_DWORD *)v9 + 4) == v2
      && *((_DWORD *)v9 + 5) == v4)
    {
      break;
    }
    int v9 = (uint64_t *)*v9;
    uint64_t result = v8;
  }
  while (*v8);
  return result;
}

void MrecInitModule_dcuda_mrecutil(void)
{
  if (!gParDebugCUDAHelpers1)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugCUDAHelpers1", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugCUDAHelpers1 = (uint64_t)v1;
    int v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugCUDAHelpers1);
  }
}

void EnvHolder::EnvHolder(EnvHolder *this, int a2)
{
  FileHistory::FileHistory((EnvHolder *)((char *)this + 16), 0x64u, 0x64u);
  *((_DWORD *)this + 2) = a2;
  int v4 = MemChunkAlloc(0x110uLL, 0);
  *(void *)this = EnvMgr::EnvMgr((EnvMgr *)v4, 6u);
  *((void *)this + 1) = 0xFFFFFFFFLL;
}

void sub_213F24B18(_Unwind_Exception *a1)
{
  FileHistory::~FileHistory(v1);
  _Unwind_Resume(a1);
}

void EnvHolder::~EnvHolder(EnvMgr **this)
{
}

void verifySubFileExistsAtMostOneOfDouble(uint64_t a1, unsigned int a2, unsigned int a3, char a4)
{
  int v8 = DFile::subFileExists(a1, a2);
  if (DFile::subFileExists(a1, a3))
  {
    if (v8)
    {
      GetSubFileExtensionString(a2);
      GetSubFileExtensionString(a3);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 94, (uint64_t)"fileutil/envhold", 6, (uint64_t)"%.500s %.500s %.500s %.500s", v9, v10, a4);
    }
  }
}

uint64_t EnvHolder::errorIfFileObviouslyIsNotOfTypeUser(EnvHolder *this, DFile *a2)
{
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x15u, 0x16u, (char)"User");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x3Eu, 0x3Du, (char)"User");
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v15, 1, 1);
  uint64_t v3 = v15;
  int v5 = v16;
  int v4 = HIDWORD(v16);
  *(_DWORD *)(v15 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 38;
  unsigned int v6 = v5 + 1;
  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v6;
  if (v6 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v15, 1, 1);
    uint64_t v3 = v15;
    unsigned int v6 = v16;
    int v4 = HIDWORD(v16);
  }
  *(_DWORD *)(v3 + 4 * v6) = 39;
  unsigned int v7 = v6 + 1;
  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v7;
  if (v7 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v15, 1, 1);
    unsigned int v7 = v16;
    uint64_t v3 = v15;
  }
  *(_DWORD *)(v3 + 4 * v7) = 43;
  unsigned int v8 = v7 + 1;
  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v7 + 1;
  unsigned int v9 = v14;
  if (v14 == HIDWORD(v14))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v13, 1, 1);
    unsigned int v9 = v14;
    unsigned int v8 = v16;
  }
  *(_DWORD *)(v13 + 4 * v9) = 42;
  LODWORD(v14) = v9 + 1;
  v12[0] = 0;
  v12[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v12, &v15, 0, v8);
  v11[0] = 0;
  v11[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v11, &v13, 0, v14);
  verifySubFileSetExistsOneOfDouble((uint64_t)this, (uint64_t)v12, (uint64_t)v11, (char)"User");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12);
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x47u, 0x46u, (char)"User");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x57u, 0x56u, (char)"User");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x20u, 0x1Fu, (char)"User");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x53u, 0x50u, (char)"User");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x55u, 0x50u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x53u, 0x55u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x55u, 0x53u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x2Du, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x2Au, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x3Du, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x1Fu, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x50u, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x17u, 0x63u, (char)"User");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x3Fu, 0x63u, (char)"User");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213F24EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v13 - 32);
  _Unwind_Resume(a1);
}

void verifySubFileExistsOneOfDouble(uint64_t a1, unsigned int a2, unsigned int a3, char a4)
{
  int v8 = DFile::subFileExists(a1, a2);
  int v9 = DFile::subFileExists(a1, a3);
  if (v8) {
    int v10 = 2;
  }
  else {
    int v10 = 1;
  }
  if (!v9) {
    int v10 = v8;
  }
  if (v10 != 1)
  {
    if (v10)
    {
      GetSubFileExtensionString(a2);
      GetSubFileExtensionString(a3);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 121, (uint64_t)"fileutil/envhold", 6, (uint64_t)"%.500s %.500s %.500s %.500s", v13, v14, a4);
    }
    else
    {
      GetSubFileExtensionString(a2);
      GetSubFileExtensionString(a3);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 116, (uint64_t)"fileutil/envhold", 5, (uint64_t)"%.500s %.500s %.500s %.500s", v11, v12, a4);
    }
  }
}

void verifySubFileSetExistsOneOfDouble(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v8 = 0;
    while (!DFile::subFileExists(a1, *(_DWORD *)(*(void *)a2 + 4 * v8)))
    {
      if (++v8 >= (unint64_t)*(unsigned int *)(a2 + 8)) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = a3;
    a3 = a2;
  }
  else
  {
LABEL_5:
    uint64_t v9 = a2;
  }
  if (*(_DWORD *)(a3 + 8))
  {
    unint64_t v10 = 0;
    do
      verifySubFileExists(a1, *(_DWORD *)(*(void *)a3 + 4 * v10++), a4);
    while (v10 < *(unsigned int *)(a3 + 8));
  }
  if (*(_DWORD *)(v9 + 8))
  {
    unint64_t v11 = 0;
    do
    {
      unsigned int v12 = *(_DWORD *)(*(void *)v9 + 4 * v11);
      if (DFile::subFileExists(a1, v12))
      {
        GetSubFileExtensionString(v12);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 62, (uint64_t)"fileutil/envhold", 4, (uint64_t)"%.500s %.500s %.500s", v13, v14, a4);
      }
      ++v11;
    }
    while (v11 < *(unsigned int *)(v9 + 8));
  }
}

void verifySubFile1ImpliesSubFile2(uint64_t a1, unsigned int a2, unsigned int a3, char a4)
{
  if (DFile::subFileExists(a1, a2))
  {
    if ((DFile::subFileExists(a1, a3) & 1) == 0)
    {
      GetSubFileExtensionString(a2);
      GetSubFileExtensionString(a3);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 163, (uint64_t)"fileutil/envhold", 2, (uint64_t)"%.500s %.500s %.500s %.500s", v8, v9, a4);
    }
  }
}

void EnvHolder::errorIfFileObviouslyIsNotOfTypeSigProc(EnvHolder *this, DFile *a2)
{
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x15u, 0x16u, (char)"SigProc");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x57u, 0x56u, (char)"SigProc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x6Eu, 0x6Cu, (char)"SigProc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x11u, 0x10u, (char)"SigProc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x24u, 0x23u, (char)"SigProc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x56u, 0x52u, (char)"SigProc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x10u, 0x52u, (char)"SigProc");

  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x23u, 0x52u, (char)"SigProc");
}

void EnvHolder::errorIfFileObviouslyIsNotOfTypeVoc(EnvHolder *this, DFile *a2)
{
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x15u, 0x16u, (char)"Voc");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x3Eu, 0x3Du, (char)"Voc");
  verifySubFileExistsOneOfDouble((uint64_t)this, 0x62u, 0x2Fu, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x61u, 0x59u, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x61u, 0x4Eu, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x5Bu, 0xEu, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x5Au, 0xAu, (char)"Voc");
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x3Au, 0x38u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x2Fu, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x4Eu, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x59u, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x16u, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0xAu, 0x69u, (char)"Voc");
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0xEu, 0x69u, (char)"Voc");

  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x38u, 0x69u, (char)"Voc");
}

void verifySubFileExists(uint64_t a1, unsigned int a2, char a3)
{
  if ((DFile::subFileExists(a1, a2) & 1) == 0)
  {
    GetSubFileExtensionString(a2);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 73, (uint64_t)"fileutil/envhold", 3, (uint64_t)"%.500s %.500s %.500s", v5, v6, a3);
  }
}

uint64_t EnvHolder::errorIfFileObviouslyIsNotOfTypeParamSetHolder(EnvHolder *this, DFile *a2)
{
  verifySubFileExistsAtMostOneOfDouble((uint64_t)this, 0x15u, 0x16u, (char)"ParamSetHolder");
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
  uint64_t v3 = v23;
  int v5 = v24;
  int v4 = HIDWORD(v24);
  *(_DWORD *)(v23 + 4 * vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  unsigned int v6 = v5 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v6;
  if (v6 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v6 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v6) = 11;
  unsigned int v7 = v6 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v7;
  if (v7 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v7 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v7) = 15;
  unsigned int v8 = v7 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v8;
  if (v8 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v8 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v8) = 33;
  unsigned int v9 = v8 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v9;
  if (v9 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v9 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v9) = 34;
  unsigned int v10 = v9 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v10;
  if (v10 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v10 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 55;
  unsigned int v11 = v10 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v11;
  if (v11 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v11 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v11) = 69;
  unsigned int v12 = v11 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v12;
  if (v12 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v12 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v12) = 60;
  unsigned int v13 = v12 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v13;
  if (v13 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v13 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v13) = 79;
  unsigned int v14 = v13 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v14;
  if (v14 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    uint64_t v3 = v23;
    unsigned int v14 = v24;
    int v4 = HIDWORD(v24);
  }
  *(_DWORD *)(v3 + 4 * v14) = 88;
  unsigned int v15 = v14 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v15;
  if (v15 == v4)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
    unsigned int v15 = v24;
    uint64_t v3 = v23;
  }
  *(_DWORD *)(v3 + 4 * v15) = 84;
  unsigned int v16 = v15 + 1;
  LODWORD(vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v15 + 1;
  unsigned int v17 = v22;
  if (v22 == HIDWORD(v22))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
    unsigned int v17 = v22;
    unsigned int v16 = v24;
  }
  *(_DWORD *)(v21 + 4 * v17) = 68;
  LODWORD(v22) = v17 + 1;
  v20[0] = 0;
  v20[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v20, &v23, 0, v16);
  v19[0] = 0;
  v19[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v19, &v21, 0, v22);
  verifySubFileSetExistsOneOfDouble((uint64_t)this, (uint64_t)v20, (uint64_t)v19, (char)"ParamSetHolder");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  verifySubFile1ImpliesSubFile2((uint64_t)this, 0x44u, 0x39u, (char)"ParamSetHolder");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
}

void sub_213F2581C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v13 - 32);
  _Unwind_Resume(a1);
}

void EnvHolder::loadEnvHolder(uint64_t a1, EnvHolder *a2, int a3)
{
  int64x2_t v15 = 0u;
  int64x2_t v16 = 0u;
  SnapTime::recordTime((SnapTime *)&v15, 1, 1, 1, 1);
  *(_DWORD *)(a1 + 12) = a3;
  switch(a3)
  {
    case 0:
      verifySubFileExistsAtMostOneOfDouble((uint64_t)a2, 0x15u, 0x16u, (char)"EnvHolder");
      unsigned int v7 = 6;
      break;
    case 1:
      EnvHolder::errorIfFileObviouslyIsNotOfTypeUser(a2, v6);
      unsigned int v7 = 3;
      break;
    case 2:
      EnvHolder::errorIfFileObviouslyIsNotOfTypeSigProc(a2, v6);
      unsigned int v7 = 4;
      break;
    case 3:
      EnvHolder::errorIfFileObviouslyIsNotOfTypeVoc(a2, v6);
      unsigned int v7 = 2;
      break;
    case 4:
      EnvHolder::errorIfFileObviouslyIsNotOfTypeParamSetHolder(a2, v6);
      unsigned int v7 = 13;
      break;
    default:
      unsigned int v7 = 0;
      break;
  }
  DFileChecksums::DFileChecksums((DFileChecksums *)v14);
  DgnDelete<EnvMgr>(*(EnvMgr **)a1);
  unsigned int v8 = MemChunkAlloc(0x110uLL, 0);
  unsigned int v9 = EnvMgr::EnvMgr((EnvMgr *)v8, v7);
  *(void *)a1 = v9;
  EnvMgr::loadEnvMgr(v9, a2, (DFileChecksums *)v14);
  EnvMgr::setSemanticType(*(void *)a1, 6);
  unsigned int v11 = *(EnvMgr **)a1;
  unsigned int v10 = (FileHistory *)(a1 + 16);
  FileHistory::loadFileHistory(v10, a2, *((unsigned __int8 *)v11 + 264));
  int64x2_t v12 = 0u;
  int64x2_t v13 = 0u;
  SnapTime::recordTime((SnapTime *)&v12, 1, 1, 1, 1);
  int64x2_t v12 = vsubq_s64(v12, v15);
  int64x2_t v13 = vsubq_s64(v13, v16);
  FileHistory::addEntryWithElapsedTime(v10, " loadEnvHolder time: ", (const SnapTime *)&v12);
  if (!a3) {
    (*(void (**)(EnvHolder *, const char *))(*(void *)a2 + 80))(a2, "EnvHolder");
  }
  DFileChecksums::~DFileChecksums((DFileChecksums *)v14);
}

void sub_213F25A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  DFileChecksums::~DFileChecksums((DFileChecksums *)va);
  _Unwind_Resume(a1);
}

void EnvHolder::saveEnvHolder(EnvMgr **a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  int64x2_t v18 = 0u;
  int64x2_t v19 = 0u;
  SnapTime::recordTime((SnapTime *)&v18, 1, 1, 1, 1);
  if (a4) {
    BOOL v10 = a4 != 2;
  }
  else {
    BOOL v10 = *((unsigned char *)*a1 + 264) != 0;
  }
  DFileOwner::DFileOwner((DFileOwner *)v17);
  *a3 = 1;
  unsigned int v11 = DFile::openDFile(a2, (const FileSpec *)1, 6, (uint64_t)v17);
  *a3 = 2;
  DFileChecksums::DFileChecksums((DFileChecksums *)v16);
  EnvMgr::saveEnvMgr(*a1, (DFile *)v11, (DFileChecksums *)v16, v10, a5);
  int64x2_t v14 = 0u;
  int64x2_t v15 = 0u;
  SnapTime::recordTime((SnapTime *)&v14, 1, 1, 1, 1);
  int64x2_t v14 = vsubq_s64(v14, v18);
  int64x2_t v15 = vsubq_s64(v15, v19);
  int64x2_t v12 = (FileHistory *)(a1 + 2);
  FileHistory::addEntryWithElapsedTime(v12, " saveEnvHolder time: ", (const SnapTime *)&v14);
  FileHistory::saveFileHistory(v12, (DFile *)v11, v10);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v17, 0);
  *a3 = 0;
  DFileChecksums::~DFileChecksums((DFileChecksums *)v16);
  DFileOwner::~DFileOwner((DFileOwner *)v17, v13);
}

void sub_213F25BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  DFileChecksums::~DFileChecksums((DFileChecksums *)va);
  DFileOwner::~DFileOwner((DFileOwner *)va1, v7);
  _Unwind_Resume(a1);
}

void EnvHolder::printSize(EnvHolder *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 451, (DgnString *)&v45);
  if (v46) {
    int64x2_t v16 = (char *)v45;
  }
  else {
    int64x2_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v45);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = *(EnvMgr **)this;
  if (*(void *)this)
  {
    unint64_t v44 = 0;
    unint64_t v45 = 0;
    uint64_t v22 = (a3 + 1);
    unint64_t v43 = 0;
    EnvMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v45, &v44, &v43);
    *a4 += v45;
    *a5 += v44;
    *a6 += v43;
  }
  else
  {
    uint64_t v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 452, (DgnString *)&v45);
  if (v46) {
    int v28 = (char *)v45;
  }
  else {
    int v28 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &byte_2140B33BB, (34 - a3), (34 - a3), v28, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v45);
  *a4 += v23;
  *a5 += v23;
  uint64_t v29 = (char *)this + 16;
  uint64_t v30 = sizeObject((uint64_t)this + 16, 0);
  uint64_t v31 = sizeObject((uint64_t)v29, 1);
  uint64_t v32 = sizeObject((uint64_t)v29, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 453, (DgnString *)&v45);
  if (v46) {
    uint64_t v37 = (char *)v45;
  }
  else {
    uint64_t v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v22, &byte_2140B33BB, (34 - a3), (34 - a3), v37, v30, v31, v32);
  DgnString::~DgnString((DgnString *)&v45);
  *a4 += v30;
  *a5 += v31;
  *a6 += v32;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 454, (DgnString *)&v45);
  if (v46) {
    uint64_t v42 = (char *)v45;
  }
  else {
    uint64_t v42 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v42, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v45);
}

void sub_213F25E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

double EnvHolderMgr::startupEnvHolderMgr(EnvHolderMgr *this)
{
  uint64_t v1 = MemChunkAlloc(0x40uLL, 0);
  uint64_t *v1 = 0;
  v1[1] = 0;
  *(void *)&double result = 0x10000001DLL;
  v1[2] = 0x10000001DLL;
  *((_DWORD *)v1 + 6) = 1;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
  *((_DWORD *)v1 + 14) = 0;
  EnvHolderMgr::smpEnvHolderMgr = (uint64_t)v1;
  return result;
}

uint64_t EnvHolderMgr::getEnvHolder(EnvHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 2) <= a2 || (uint64_t result = *(void *)(*(void *)this + 8 * a2)) == 0)
  {
    uint64_t v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 500, (uint64_t)"fileutil/envhold", 1, (uint64_t)"%u", a7, a8, a2);
    return *(void *)(*(void *)this + 8 * v10);
  }
  return result;
}

uint64_t EnvHolderMgr::newEnvHolder(EnvHolderMgr *this)
{
  uint64_t NextId = IdMgr<unsigned int>::getNextId((_DWORD *)this + 4);
  for (unsigned int i = *((_DWORD *)this + 2); i <= NextId; *((_DWORD *)this + 2) = i)
  {
    if (i == *((_DWORD *)this + 3))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this, 1, 1);
      unsigned int i = *((_DWORD *)this + 2);
    }
    *(void *)(*(void *)this + 8 * i++) = 0;
  }
  int v4 = MemChunkAlloc(0x28uLL, 0);
  EnvHolder::EnvHolder((EnvHolder *)v4, NextId);
  *(void *)(*(void *)this + 8 * NextId) = v5;
  return NextId;
}

void EnvHolderMgr::deleteEnvHolder(EnvHolderMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  EnvHolder = (EnvMgr **)EnvHolderMgr::getEnvHolder(this, a2, a3, a4, a5, a6, a7, a8);
  DgnDelete<EnvHolder>(EnvHolder);
  *(void *)(*(void *)this + 8 * a2) = 0;

  IdMgr<unsigned int>::recycleId((unsigned int *)this + 4, a2);
}

EnvMgr **DgnDelete<EnvHolder>(EnvMgr **result)
{
  if (result)
  {
    EnvHolder::~EnvHolder(result);
    return (EnvMgr **)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t EnvHolderMgr::loadEnvHolder(uint64_t a1, EnvHolder *a2, int a3)
{
  uint64_t NextId = IdMgr<unsigned int>::getNextId((_DWORD *)(a1 + 16));
  for (unsigned int i = *(_DWORD *)(a1 + 8); i <= NextId; *(_DWORD *)(a1 + 8) = i)
  {
    if (i == *(_DWORD *)(a1 + 12))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
      unsigned int i = *(_DWORD *)(a1 + 8);
    }
    *(void *)(*(void *)a1 + 8 * i++) = 0;
  }
  uint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  EnvHolder::EnvHolder((EnvHolder *)v8, NextId);
  EnvHolder::loadEnvHolder(v9, a2, a3);
  *(void *)(*(void *)a1 + 8 * NextId) = v8;
  return NextId;
}

void EnvHolderMgr::saveEnvHolder(EnvHolderMgr *a1, unsigned int a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  int v9 = a5;
  EnvHolder = (EnvMgr **)EnvHolderMgr::getEnvHolder(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);

  EnvHolder::saveEnvHolder(EnvHolder, a3, a4, v9, v8);
}

void EnvHolderMgr::printSize(EnvHolderMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 557, (DgnString *)&v71);
  if (v72) {
    int64x2_t v16 = (char *)v71;
  }
  else {
    int64x2_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v71);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 558, (DgnString *)&v71);
  if (v72) {
    uint64_t v25 = (char *)v71;
  }
  else {
    uint64_t v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (a3 + 1), &byte_2140B33BB, v25);
  uint64_t v67 = a5;
  int v68 = a6;
  DgnString::~DgnString((DgnString *)&v71);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v26, v27, v28, v29, (a3 + 1), &byte_2140B33BB);
  unint64_t v30 = *((unsigned int *)this + 2);
  if (v30)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    do
    {
      uint64_t v35 = *(EnvHolder **)(*(void *)this + 8 * v31);
      if (v35)
      {
        unint64_t v70 = 0;
        unint64_t v71 = 0;
        unint64_t v69 = 0;
        EnvHolder::printSize(v35, v31, (a3 + 2), &v71, &v70, &v69);
        v34 += v71;
        v33 += v70;
        v32 += v69;
        unint64_t v30 = *((unsigned int *)this + 2);
      }
      ++v31;
    }
    while (v31 < v30);
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v33 = 0;
    uint64_t v32 = 0;
    unint64_t v30 = 0;
  }
  uint64_t v36 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v36 = 16;
  }
  uint64_t v37 = v36 + v34;
  uint64_t v38 = v36 + v33;
  char v39 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v39 = 3;
  }
  uint64_t v40 = v37 + ((unint64_t)*((unsigned int *)this + 3) << v39);
  uint64_t v41 = v38 + (v30 << v39);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 558, (DgnString *)&v71);
  if (v72) {
    int v46 = (char *)v71;
  }
  else {
    int v46 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v46, v40, v41, v32);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v40;
  *v67 += v41;
  *v68 += v32;
  uint64_t v47 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v47 = 16;
  }
  int v48 = *((_DWORD *)this + 10);
  unsigned int v49 = *((_DWORD *)this + 11);
  uint64_t v50 = v47 + 4 * (v48 - 1) + 4;
  if (v48 <= 0) {
    uint64_t v50 = v47;
  }
  BOOL v51 = v49 >= v48;
  uint64_t v52 = v50 + 4 * (v49 - v48);
  if (v51) {
    uint64_t v47 = v52;
  }
  uint64_t v53 = v47 + 24;
  uint64_t v54 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 8, 1u) + 12;
  uint64_t v55 = *((unsigned int *)this + 10);
  if (v55 <= *((_DWORD *)this + 11)) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = 4 * v55;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 560, (DgnString *)&v71);
  if (v72) {
    uint64_t v61 = (char *)v71;
  }
  else {
    uint64_t v61 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v61, v53, v54, v56);
  DgnString::~DgnString((DgnString *)&v71);
  *a4 += v53;
  *v67 += v54;
  *v68 += v56;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fileutil/envhold.cpp", 561, (DgnString *)&v71);
  if (v72) {
    unint64_t v66 = (char *)v71;
  }
  else {
    unint64_t v66 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v66, *a4, *v67, *v68);
  DgnString::~DgnString((DgnString *)&v71);
}

void sub_213F2653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void TGrammarManager2::TGrammarManager2(TGrammarManager2 *this, TInputStream *a2, const TTagManager *a3, TLexicon *a4, TItnParamManager *a5)
{
  *(void *)this = &unk_26C4E48B8;
  *((void *)this + 2) = &unk_26C4E48B8;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  *((void *)this + 8) = -1;
  *((void *)this + 7) = a5;
  *((void *)this + 4) = a4;
  operator new();
}

void sub_213F27114()
{
}

void sub_213F27294()
{
}

uint64_t callBackThousandSeparator(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 - 5 < 0xFFFFFFFFFFFFFFFELL
    || *(void *)a1 > 1uLL
    || *(void *)(a1 + 16) > 1uLL
    || *(void *)(a1 + 32) > 1uLL
    || a2 == 4 && *(void *)(a1 + 48) > 1uLL)
  {
    return 0;
  }
  int v9 = *(const __int32 **)(a1 + 8);
  uint64_t v10 = *(const __int32 **)(a1 + 24);
  uint64_t v11 = *(unsigned int **)(a1 + 40);
  size_t v12 = wcslen(v9);
  BOOL v49 = 0;
  {
    operator new();
  }
  unsigned int v13 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v49);
  if (v49) {
    return 0;
  }
  unsigned int v16 = v13;
  uint64_t v45 = v47;
  long long v46 = xmmword_214085190;
  char v48 = 1;
  if (a2 < 4) {
    GrammarValue = (TLocaleInfo *)TStringParam::getGrammarValue((TParam *)(*(void *)(a3 + 336) + 15664), 1, (uint64_t)&v45);
  }
  else {
    GrammarValue = (TLocaleInfo *)TBuffer<wchar_t>::assign((uint64_t)&v45, *(int **)(a1 + 56));
  }
  if (*((void *)&v46 + 1) != 1)
  {
    uint64_t v29 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v45);
    loggableUnicode(v29, __p);
    if (v44 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    goto LABEL_42;
  }
  unsigned int v18 = *(_DWORD *)v45;
  uint64_t GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(GrammarValue);
  if ((int)v18 >= 48)
  {
    if (v18 < 0x3A
      || v18 >= 0x660
      && (uint64_t GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getDigitExtended((uint64_t)GlobalLocaleInfo, v18),
          GlobalLocaleInfo != -1))
    {
      unsigned int v20 = *(_DWORD *)v45;
      uint64_t v21 = TLocaleInfo::getGlobalLocaleInfo(GlobalLocaleInfo);
      unsigned int DigitExtended = v20 - 48;
      if ((int)v20 >= 48)
      {
        if (v20 <= 0x39)
        {
LABEL_23:
          if (DigitExtended <= 1)
          {
            uint64_t v23 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v45);
            loggableUnicode(v23, __p);
            if (v44 >= 0) {
              uint64_t v28 = __p;
            }
            else {
              uint64_t v28 = (void **)__p[0];
            }
LABEL_42:
            tknPrintf("Error: <%s> : The digitGrouping argument passed to $AddThousandSeparator() must be a single digit greater than 1 or the letter 'I'.\n", v24, v25, v26, v27, v28);
            if (v44 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v14 = 0;
            goto LABEL_45;
          }
          unint64_t v31 = (int)DigitExtended;
LABEL_53:
          uint64_t v14 = 1;
          if (*v10 && v12 > v16)
          {
            unint64_t v32 = v12 / v31;
            if (v12 % v31) {
              uint64_t v30 = v12 % v31;
            }
            else {
              uint64_t v30 = v31;
            }
            char v34 = 1;
LABEL_61:
            size_t v37 = v12 + wcslen(v10) * v32 + 1;
            if (v37 >> 62) {
              uint64_t v38 = -1;
            }
            else {
              uint64_t v38 = 4 * v37;
            }
            uint64_t v39 = TAllocator::allocate(a5, v38);
            uint64_t v40 = (__int32 *)v39;
            if (*v9)
            {
              uint64_t v41 = 0;
              uint64_t v40 = (__int32 *)v39;
              do
              {
                if (v30 == (v41 * 4) >> 2)
                {
                  wcscpy(v40, v10);
                  v40 += wcslen(v40);
                  if (v34)
                  {
                    v30 += v31;
                  }
                  else if ((v12 - v30) % v31 == 3)
                  {
                    v30 += 3;
                  }
                  else
                  {
                    v30 += 2;
                  }
                }
                *v40++ = v9[v41];
              }
              while (v9[++v41]);
            }
            *uint64_t v40 = 0;
            uint64_t v14 = 1;
            goto LABEL_45;
          }
          goto LABEL_45;
        }
        if (v20 >= 0x660)
        {
          unsigned int DigitExtended = TLocaleInfo::getDigitExtended(v21, v20);
          goto LABEL_23;
        }
      }
      unint64_t v31 = -1;
      goto LABEL_53;
    }
  }
  if (*(_DWORD *)v45 != 73)
  {
    uint64_t v35 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v45);
    loggableUnicode(v35, __p);
    if (v44 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    goto LABEL_42;
  }
  uint64_t v14 = 1;
  if (*v10 && v12 > v16)
  {
    uint64_t v30 = 2;
    unint64_t v31 = 7;
    unint64_t v32 = 3 * (v12 / 7) + v12 % 7 / 3;
    if (v12 % 7)
    {
      if (((v12 % 7) & 5) == 4) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = v12 % 7;
      }
      char v34 = 0;
      if (v12 % 7 != 5)
      {
        unint64_t v31 = 7;
        uint64_t v30 = v33;
      }
    }
    else
    {
      char v34 = 0;
    }
    goto LABEL_61;
  }
LABEL_45:
  if (v48)
  {
    if (v45 != v47 && v45 != 0) {
      MEMORY[0x216698730]();
    }
  }
  return v14;
}

{
  const __int32 *v9;
  const __int32 *v10;
  unsigned int *v11;
  size_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  TLocaleInfo *GrammarValue;
  unsigned int v18;
  TLocaleInfo *GlobalLocaleInfo;
  unsigned int v20;
  uint64_t v21;
  unsigned int DigitExtended;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unsigned int *v35;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  __int32 *v40;
  uint64_t v41;
  void *__p[2];
  char v44;
  unsigned char *v45;
  long long v46;
  unsigned char v47[1024];
  char v48;
  BOOL v49;

  if (a2 - 5 < 0xFFFFFFFFFFFFFFFELL
    || *(void *)a1 > 1uLL
    || *(void *)(a1 + 16) > 1uLL
    || *(void *)(a1 + 32) > 1uLL
    || a2 == 4 && *(void *)(a1 + 48) > 1uLL)
  {
    return 0;
  }
  int v9 = *(const __int32 **)(a1 + 8);
  uint64_t v10 = *(const __int32 **)(a1 + 24);
  uint64_t v11 = *(unsigned int **)(a1 + 40);
  size_t v12 = wcslen(v9);
  BOOL v49 = 0;
  {
    operator new();
  }
  unsigned int v13 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v49);
  if (v49) {
    return 0;
  }
  unsigned int v16 = v13;
  uint64_t v45 = v47;
  long long v46 = xmmword_214085190;
  char v48 = 1;
  if (a2 < 4) {
    GrammarValue = (TLocaleInfo *)TStringParam::getGrammarValue((TParam *)(*(void *)(a3 + 336) + 15664), 1, (uint64_t)&v45);
  }
  else {
    GrammarValue = (TLocaleInfo *)TBuffer<wchar_t>::assign((uint64_t)&v45, *(int **)(a1 + 56));
  }
  if (*((void *)&v46 + 1) != 1)
  {
    uint64_t v29 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v45);
    loggableUnicode(v29, __p);
    if (v44 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    goto LABEL_42;
  }
  unsigned int v18 = *(_DWORD *)v45;
  uint64_t GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(GrammarValue);
  if ((int)v18 >= 48)
  {
    if (v18 < 0x3A
      || v18 >= 0x660
      && (uint64_t GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getDigitExtended((uint64_t)GlobalLocaleInfo, v18),
          GlobalLocaleInfo != -1))
    {
      unsigned int v20 = *(_DWORD *)v45;
      uint64_t v21 = TLocaleInfo::getGlobalLocaleInfo(GlobalLocaleInfo);
      unsigned int DigitExtended = v20 - 48;
      if ((int)v20 >= 48)
      {
        if (v20 <= 0x39)
        {
LABEL_23:
          if (DigitExtended <= 1)
          {
            uint64_t v23 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v45);
            loggableUnicode(v23, __p);
            if (v44 >= 0) {
              uint64_t v28 = __p;
            }
            else {
              uint64_t v28 = (void **)__p[0];
            }
LABEL_42:
            tknPrintf("Error: <%s> : The digitGrouping argument passed to $AddThousandSeparator() must be a single digit greater than 1 or the letter 'I'.\n", v24, v25, v26, v27, v28);
            if (v44 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v14 = 0;
            goto LABEL_45;
          }
          unint64_t v31 = (int)DigitExtended;
LABEL_53:
          uint64_t v14 = 1;
          if (*v10 && v12 > v16)
          {
            unint64_t v32 = v12 / v31;
            if (v12 % v31) {
              uint64_t v30 = v12 % v31;
            }
            else {
              uint64_t v30 = v31;
            }
            char v34 = 1;
LABEL_61:
            size_t v37 = v12 + wcslen(v10) * v32 + 1;
            if (v37 >> 62) {
              uint64_t v38 = -1;
            }
            else {
              uint64_t v38 = 4 * v37;
            }
            uint64_t v39 = TAllocator::allocate(a5, v38);
            uint64_t v40 = (__int32 *)v39;
            if (*v9)
            {
              uint64_t v41 = 0;
              uint64_t v40 = (__int32 *)v39;
              do
              {
                if (v30 == (v41 * 4) >> 2)
                {
                  wcscpy(v40, v10);
                  v40 += wcslen(v40);
                  if (v34)
                  {
                    v30 += v31;
                  }
                  else if ((v12 - v30) % v31 == 3)
                  {
                    v30 += 3;
                  }
                  else
                  {
                    v30 += 2;
                  }
                }
                *v40++ = v9[v41];
              }
              while (v9[++v41]);
            }
            *uint64_t v40 = 0;
            uint64_t v14 = 1;
            goto LABEL_45;
          }
          goto LABEL_45;
        }
        if (v20 >= 0x660)
        {
          unsigned int DigitExtended = TLocaleInfo::getDigitExtended(v21, v20);
          goto LABEL_23;
        }
      }
      unint64_t v31 = -1;
      goto LABEL_53;
    }
  }
  if (*(_DWORD *)v45 != 73)
  {
    uint64_t v35 = (unsigned int *)TBuffer<wchar_t>::c_str((uint64_t)&v45);
    loggableUnicode(v35, __p);
    if (v44 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    goto LABEL_42;
  }
  uint64_t v14 = 1;
  if (*v10 && v12 > v16)
  {
    uint64_t v30 = 2;
    unint64_t v31 = 7;
    unint64_t v32 = 3 * (v12 / 7) + v12 % 7 / 3;
    if (v12 % 7)
    {
      if (((v12 % 7) & 5) == 4) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = v12 % 7;
      }
      char v34 = 0;
      if (v12 % 7 != 5)
      {
        unint64_t v31 = 7;
        uint64_t v30 = v33;
      }
    }
    else
    {
      char v34 = 0;
    }
    goto LABEL_61;
  }
LABEL_45:
  if (v48)
  {
    if (v45 != v47 && v45 != 0) {
      MEMORY[0x216698730]();
    }
  }
  return v14;
}

void sub_213F27724(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t callBackToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *(void *)a1 > 1uLL) {
    return 0;
  }
  int v9 = *(__int32 **)(a1 + 8);
  size_t v10 = wcslen(v9);
  if (v10)
  {
    size_t v11 = v10;
    if (TLexicon::checkName(a3, v9, 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableUnicode(*(unsigned int **)(a1 + 8), &__p);
      if (v23 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      tknPrintf("Warning: $Token('%s') : The formatter adaptation grammar constructed an invalid token.\n", v12, v13, v14, v15, p_p);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p);
      }
      return 0;
    }
    if ((v11 + 9) >> 62) {
      uint64_t v17 = -1;
    }
    else {
      uint64_t v17 = 4 * (v11 + 9);
    }
    __p = (void *)TAllocator::allocate(a5, v17);
    unint64_t v22 = v11 + 9;
    int64_t v23 = 0;
    char v25 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&__p, dword_2140A42B4);
    uint64_t v18 = 0;
    uint64_t v19 = *(int **)(a1 + 8);
    while (v19[v18++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, v23, v19, v18 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&__p, v23, (int *)&unk_2140A42D4, 1uLL);
    if (v23 < v22)
    {
      *((_DWORD *)__p + v23) = 0;
LABEL_23:
      if (v25 && __p != &v24 && __p) {
        MEMORY[0x216698730]();
      }
      return 1;
    }
    if (v25)
    {
      int v26 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, v23--, &v26, 1uLL);
      goto LABEL_23;
    }
    if (v22)
    {
      *((_DWORD *)__p + v22 - 1) = 0;
      goto LABEL_23;
    }
  }
  return 1;
}

void sub_213F279A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t callBackAlt(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (!a2 || *a1 > 1uLL) {
    return 0;
  }
  if (a2 != 1)
  {
    uint64_t v19 = (__int32 *)v21;
    long long v20 = xmmword_214085190;
    char v22 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v19, dword_2140A438C);
    uint64_t v9 = 0;
    size_t v10 = (int *)a1[1];
    while (v10[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), v10, v9 - 1);
    if (a2 >= 2)
    {
      uint64_t v12 = 1;
      do
      {
        TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), dword_2140A43A4, 5uLL);
        uint64_t v13 = 0;
        uint64_t v14 = (int *)a1[2 * v12 + 1];
        while (v14[v13++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), v14, v13 - 1);
        ++v12;
      }
      while (v12 != a2);
    }
    TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), dword_2140A43BC, 6uLL);
    if ((unint64_t)(*((void *)&v20 + 1) + 1) >> 62) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = 4 * (*((void *)&v20 + 1) + 1);
    }
    uint64_t v17 = (__int32 *)TAllocator::allocate(a5, v16);
    if (*((void *)&v20 + 1) >= (unint64_t)v20)
    {
      if (v22)
      {
        int v23 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v19, *((unint64_t *)&v20 + 1), &v23, 1uLL);
        uint64_t v18 = v19;
        --*((void *)&v20 + 1);
      }
      else
      {
        uint64_t v18 = v19;
        if ((void)v20) {
          v19[(void)v20 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v18 = v19;
      v19[*((void *)&v20 + 1)] = 0;
    }
    wcscpy(v17, v18);
    if (v22 && v19 != (__int32 *)v21)
    {
      if (v19) {
        MEMORY[0x216698730]();
      }
    }
  }
  return 1;
}

void sub_213F27BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackTag(uint64_t a1, uint64_t a2, __int32 *a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *(void *)a1 > 1uLL) {
    return 0;
  }
  size_t v9 = wcslen(*(const __int32 **)(a1 + 8));
  if (v9)
  {
    size_t v10 = v9;
    size_t v11 = a3;
    if (*((char *)a3 + 23) < 0) {
      size_t v11 = *(const __int32 **)a3;
    }
    size_t v12 = v10 + wcslen(v11) + 4;
    if (v12 >> 62) {
      uint64_t v13 = -1;
    }
    else {
      uint64_t v13 = 4 * v12;
    }
    uint64_t v19 = (uint64_t *)TAllocator::allocate(a5, v13);
    unint64_t v20 = v12;
    unint64_t v21 = 0;
    char v23 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&v19, (int *)&unk_2140A43D8);
    if (*((char *)a3 + 23) < 0) {
      a3 = *(__int32 **)a3;
    }
    uint64_t v14 = 0;
    while (a3[v14++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, a3, v14 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, (int *)&unk_2140A43E0, 1uLL);
    uint64_t v16 = 0;
    uint64_t v17 = *(int **)(a1 + 8);
    while (v17[v16++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, v17, v16 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, (int *)&unk_2140A42D4, 1uLL);
    if (v21 < v20)
    {
      *((_DWORD *)v19 + v21) = 0;
LABEL_23:
      if (v23 && v19 != &v22)
      {
        if (v19) {
          MEMORY[0x216698730]();
        }
      }
      return 1;
    }
    if (v23)
    {
      int v24 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v19, v21--, &v24, 1uLL);
      goto LABEL_23;
    }
    if (v20)
    {
      *((_DWORD *)v19 + v20 - 1) = 0;
      goto LABEL_23;
    }
  }
  return 1;
}

{
  size_t v9;
  size_t v10;
  const __int32 *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int *v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  int v24;

  if (a2 != 1 || *(void *)a1 > 1uLL) {
    return 0;
  }
  size_t v9 = wcslen(*(const __int32 **)(a1 + 8));
  if (v9)
  {
    size_t v10 = v9;
    size_t v11 = a3;
    if (*((char *)a3 + 23) < 0) {
      size_t v11 = *(const __int32 **)a3;
    }
    size_t v12 = v10 + wcslen(v11) + 4;
    if (v12 >> 62) {
      uint64_t v13 = -1;
    }
    else {
      uint64_t v13 = 4 * v12;
    }
    uint64_t v19 = (uint64_t *)TAllocator::allocate(a5, v13);
    unint64_t v20 = v12;
    unint64_t v21 = 0;
    char v23 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&v19, (int *)&unk_2140A98E0);
    if (*((char *)a3 + 23) < 0) {
      a3 = *(__int32 **)a3;
    }
    uint64_t v14 = 0;
    while (a3[v14++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, a3, v14 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, (int *)&unk_2140A98E8, 1uLL);
    uint64_t v16 = 0;
    uint64_t v17 = *(int **)(a1 + 8);
    while (v17[v16++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, v17, v16 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&v19, v21, (int *)&unk_2140A9828, 1uLL);
    if (v21 < v20)
    {
      *((_DWORD *)v19 + v21) = 0;
LABEL_23:
      if (v23 && v19 != &v22)
      {
        if (v19) {
          MEMORY[0x216698730]();
        }
      }
      return 1;
    }
    if (v23)
    {
      int v24 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v19, v21--, &v24, 1uLL);
      goto LABEL_23;
    }
    if (v20)
    {
      *((_DWORD *)v19 + v20 - 1) = 0;
      goto LABEL_23;
    }
  }
  return 1;
}

void sub_213F27DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x420])) {
    callBackSync(va);
  }
  _Unwind_Resume(a1);
}

uint64_t callBackParam2(uint64_t a1, unint64_t a2, unsigned int *lpsrc, uint64_t *a4, TAllocator *a5)
{
  if (!a2) {
    return callBackParam(a1, 0, lpsrc, a4, a5);
  }
  unsigned int v9 = lpsrc[2];
  if (v9)
  {
    if (v9 == 4)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[164] - v10[163]) >> 3);
      if ((a2 & 1) == 0) {
        goto LABEL_5;
      }
LABEL_43:
      unint64_t v33 = lpsrc + 4;
      if (*((char *)lpsrc + 39) < 0) {
        unint64_t v33 = *(unsigned int **)v33;
      }
      loggableUnicode(v33, &__p);
      if (v80 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      tknPrintf("Error: $Param%s() must have an even number of arguments.\n", v34, v35, v36, v37, p_p);
      if (SHIBYTE(v80) < 0) {
        operator delete(__p);
      }
      return 0;
    }
    size_t v10 = 0;
    unint64_t v11 = 0;
    if (a2) {
      goto LABEL_43;
    }
  }
  else
  {
    size_t v10 = 0;
    unint64_t v11 = 2;
    if (a2) {
      goto LABEL_43;
    }
  }
LABEL_5:
  unint64_t v71 = a5;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v83, v11, (unsigned __int8 *)&__p);
  __p = v81;
  long long v80 = xmmword_214085190;
  char v82 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__p, dword_2140A438C);
  unint64_t v12 = 0;
  if (v10) {
    int v13 = 83;
  }
  else {
    int v13 = 66;
  }
  int v73 = v13;
  uint64_t v14 = (int **)(lpsrc + 4);
  int v72 = (unsigned int **)(lpsrc + 4);
  do
  {
    if (*(void *)(a1 + 16 * v12) > 1uLL || *(void *)(a1 + 16 * (v12 | 1)) > 1uLL) {
      goto LABEL_93;
    }
    if (v12) {
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), dword_2140A43A4, 5uLL);
    }
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), dword_2140A43E8, 7uLL);
    LODWORD(v77[0]) = v73;
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), (int *)v77, 1uLL);
    uint64_t v15 = (int *)v14;
    if (*((char *)lpsrc + 39) < 0) {
      uint64_t v15 = *v14;
    }
    uint64_t v16 = 0;
    while (v15[v16++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), v15, v16 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), (int *)&unk_2140A43E0, 1uLL);
    uint64_t v18 = *(__int32 **)(a1 + 16 * v12 + 8);
    if (v10)
    {
      uint64_t v19 = v10[164];
      if (v19 == v10[163])
      {
        unint64_t v21 = 0;
        uint64_t v24 = v10[164];
      }
      else
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v19 = v10[163];
        do
        {
          uint64_t v22 = (const __int32 *)(v19 + v20);
          if (*(char *)(v19 + v20 + 23) < 0) {
            uint64_t v22 = *(const __int32 **)v22;
          }
          int v23 = wcscmp(v18, v22);
          uint64_t v24 = v10[164];
          uint64_t v19 = v10[163];
          if (!v23) {
            break;
          }
          ++v21;
          v20 += 24;
        }
        while (v21 < 0xAAAAAAAAAAAAAAABLL * ((v24 - v19) >> 3));
      }
      if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((v24 - v19) >> 3))
      {
        if (*((char *)lpsrc + 39) < 0) {
          BOOL v51 = *v72;
        }
        else {
          BOOL v51 = lpsrc + 4;
        }
        loggableUnicode(v51, v77);
        int v53 = v78;
        uint64_t v54 = (void **)v77[0];
        loggableUnicode((unsigned int *)v18, v75);
        uint64_t v59 = v77;
        if (v53 < 0) {
          uint64_t v59 = v54;
        }
        if (v76 >= 0) {
          uint64_t v60 = v75;
        }
        else {
          uint64_t v60 = (void **)v75[0];
        }
        tknPrintf("Error: $Param%s(): Value is invalid, was '%s', expected an allowable string.\n", v55, v56, v57, v58, v59, v60, v71);
        goto LABEL_89;
      }
    }
    else
    {
      BOOL v74 = 0;
      {
        operator new();
      }
      unsigned int v25 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)v18, &v74);
      if (v74)
      {
        if (*((char *)lpsrc + 39) < 0) {
          uint64_t v52 = *v72;
        }
        else {
          uint64_t v52 = lpsrc + 4;
        }
        loggableUnicode(v52, v77);
        int v61 = v78;
        uint64_t v62 = (void **)v77[0];
        loggableUnicode((unsigned int *)v18, v75);
        uint64_t v67 = v77;
        if (v61 < 0) {
          uint64_t v67 = v62;
        }
        if (v76 >= 0) {
          int v68 = v75;
        }
        else {
          int v68 = (void **)v75[0];
        }
        tknPrintf("Error: $Param%s(): Value is invalid, was '%s', expected a BOOLean.\n", v63, v64, v65, v66, v67, v68, v71);
        goto LABEL_89;
      }
      unint64_t v21 = v25;
      if (v25) {
        uint64_t v18 = (__int32 *)&unk_2140A4408;
      }
      else {
        uint64_t v18 = (__int32 *)&unk_2140A4410;
      }
    }
    uint64_t v26 = v83[v21 >> 6];
    if ((v26 & (1 << v21)) != 0)
    {
      uint64_t v39 = lpsrc + 4;
      if (*((char *)lpsrc + 39) < 0) {
        uint64_t v39 = *v72;
      }
      loggableUnicode(v39, v77);
      int v40 = v78;
      uint64_t v41 = (void **)v77[0];
      loggableUnicode((unsigned int *)v18, v75);
      long long v46 = v77;
      if (v40 < 0) {
        long long v46 = v41;
      }
      if (v76 >= 0) {
        uint64_t v47 = v75;
      }
      else {
        uint64_t v47 = (void **)v75[0];
      }
      tknPrintf("Error: $Param%s(): Value '%s' has already been specified.\n", v42, v43, v44, v45, v46, v47, v71);
LABEL_89:
      if (v76 < 0) {
        operator delete(v75[0]);
      }
      if (v78 < 0) {
        operator delete(v77[0]);
      }
LABEL_93:
      uint64_t v32 = 0;
      goto LABEL_94;
    }
    uint64_t v27 = 0;
    v83[v21 >> 6] = v26 | (1 << v21);
    uint64_t v14 = (int **)(lpsrc + 4);
    while (v18[v27++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), v18, v27 - 1);
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), (int *)&unk_2140A42D4, 1uLL);
    uint64_t v29 = 0;
    uint64_t v30 = *(int **)(a1 + 16 * (v12 | 1) + 8);
    while (v30[v29++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), v30, v29 - 1);
    v12 += 2;
  }
  while (v12 < a2);
  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), dword_2140A43BC, 6uLL);
  if ((unint64_t)(*((void *)&v80 + 1) + 1) >> 62) {
    uint64_t v48 = -1;
  }
  else {
    uint64_t v48 = 4 * (*((void *)&v80 + 1) + 1);
  }
  BOOL v49 = (__int32 *)TAllocator::allocate(v71, v48);
  if (*((void *)&v80 + 1) >= (unint64_t)v80)
  {
    if (v82)
    {
      LODWORD(v77[0]) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v80 + 1), (int *)v77, 1uLL);
      uint64_t v50 = (const __int32 *)__p;
      --*((void *)&v80 + 1);
    }
    else
    {
      uint64_t v50 = (const __int32 *)__p;
      if ((void)v80) {
        *((_DWORD *)__p + v80 - 1) = 0;
      }
    }
  }
  else
  {
    uint64_t v50 = (const __int32 *)__p;
    *((_DWORD *)__p + *((void *)&v80 + 1)) = 0;
  }
  wcscpy(v49, v50);
  uint64_t v32 = 1;
LABEL_94:
  if (v82)
  {
    if (__p != v81 && __p != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (v83) {
    operator delete(v83);
  }
  return v32;
}

void sub_213F28498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  MEMORY[0x216698730](v21, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x478]) && a21 != a12 && a21) {
    MEMORY[0x216698730]();
  }
  uint64_t v24 = *(void **)(v22 - 112);
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t TGrammarManager2::freeMemory(TGrammarManager2 *this)
{
  int v2 = (TParser *)*((void *)this + 6);
  if (v2)
  {
    TParser::~TParser(v2);
    MEMORY[0x216698730]();
  }
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    int v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

void TGrammarManager2::~TGrammarManager2(TGrammarManager2 *this)
{
}

TAllocator *TGrammarManager2::clearResult(TGrammarManager2 *this)
{
  uint64_t v1 = *((void *)this + 6);
  unint64_t v3 = *(void *)(v1 + 48);
  uint64_t result = (TAllocator *)(v1 + 48);
  if (v3 >= 0x801) {
    return (TAllocator *)TAllocator::clear(result);
  }
  return result;
}

void TWideChartSeeder2::makeTerminals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, TAllocator *a6)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void *)(a1 + 16) + a2;
  if (v6 < *(void *)(a1 + 24))
  {
    uint64_t v8 = **(void **)(a1 + 8);
    if (v6 < 0x6DB6DB6DB6DB6DB7 * ((*(void *)(*(void *)(a1 + 8) + 8) - v8) >> 4)
      && (!a2 || !*(unsigned char *)(v8 + 112 * v6 + 32)))
    {
      uint64_t v54 = (__int32 *)v56;
      long long v55 = xmmword_214085190;
      char v57 = 1;
      TWord::getTokenName(*(__int32 ***)(v8 + 112 * v6 + 16), (uint64_t)&v54);
      uint64_t v15 = *(char **)a3;
      uint64_t v14 = *(void *)(a3 + 8);
      uint64_t v16 = *(void *)(a1 + 32);
      if (*((void *)&v55 + 1) >= (unint64_t)v55)
      {
        if (v57)
        {
          LODWORD(v5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), (int *)&v50, 1uLL);
          uint64_t v17 = v54;
          --*((void *)&v55 + 1);
        }
        else
        {
          uint64_t v17 = v54;
          if ((void)v55) {
            v54[(void)v55 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v17 = v54;
        v54[*((void *)&v55 + 1)] = 0;
      }
      TGrammar::getTerminals(v16, (unsigned int *)v17, (char **)a3);
      unint64_t v18 = (v14 - (uint64_t)v15) >> 3;
      if (v18 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)
      {
        if ((unint64_t)(*((void *)&v55 + 1) + 1) >> 62) {
          uint64_t v19 = -1;
        }
        else {
          uint64_t v19 = 4 * (*((void *)&v55 + 1) + 1);
        }
        uint64_t v20 = (__int32 *)TAllocator::allocate(a6, v19);
        if (*((void *)&v55 + 1) >= (unint64_t)v55)
        {
          if (v57)
          {
            LODWORD(v5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v54, *((unint64_t *)&v55 + 1), (int *)&v50, 1uLL);
            uint64_t v21 = v54;
            --*((void *)&v55 + 1);
          }
          else
          {
            uint64_t v21 = v54;
            if ((void)v55) {
              v54[(void)v55 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v21 = v54;
          v54[*((void *)&v55 + 1)] = 0;
        }
        wcscpy(v20, v21);
        uint64_t v50 = (__int32 *)v52;
        long long v51 = xmmword_214085190;
        char v53 = 1;
        TWord::getOptionalTagBits(*(void *)(**(void **)(a1 + 8) + 112 * (*(void *)(a1 + 16) + a2) + 16), (uint64_t)&v50);
        if ((unint64_t)(*((void *)&v51 + 1) + 1) >> 62) {
          uint64_t v22 = -1;
        }
        else {
          uint64_t v22 = 4 * (*((void *)&v51 + 1) + 1);
        }
        int v23 = (__int32 *)TAllocator::allocate(a6, v22);
        if (*((void *)&v51 + 1) >= (unint64_t)v51)
        {
          if (v53)
          {
            LODWORD(v59) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), (int *)&v59, 1uLL);
            uint64_t v24 = v50;
            --*((void *)&v51 + 1);
          }
          else
          {
            uint64_t v24 = v50;
            if ((void)v51) {
              v50[(void)v51 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v24 = v50;
          v50[*((void *)&v51 + 1)] = 0;
        }
        wcscpy(v23, v24);
        *(void *)&long long v59 = 1;
        *((void *)&v59 + 1) = v20;
        uint64_t v60 = 1;
        int v61 = v23;
        for (long long i = xmmword_2641F4F60; v18 < (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3; ++v18)
        {
          uint64_t ClientData = TGrammarCompiler::makeClientData((uint64_t *)&i, &v59, 2, a6);
          uint64_t v26 = ClientData;
          uint64_t v28 = (uint64_t *)a5[1];
          unint64_t v27 = (unint64_t)a5[2];
          if ((unint64_t)v28 >= v27)
          {
            uint64_t v30 = ((char *)v28 - (unsigned char *)*a5) >> 3;
            if ((unint64_t)(v30 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = v27 - (void)*a5;
            uint64_t v32 = v31 >> 2;
            if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
              uint64_t v32 = v30 + 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            if (v33) {
              uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a5 + 2), v33);
            }
            else {
              uint64_t v34 = 0;
            }
            uint64_t v35 = (uint64_t *)&v34[8 * v30];
            *uint64_t v35 = v26;
            uint64_t v29 = v35 + 1;
            uint64_t v37 = (char *)*a5;
            uint64_t v36 = (char *)a5[1];
            if (v36 != *a5)
            {
              do
              {
                uint64_t v38 = *((void *)v36 - 1);
                v36 -= 8;
                *--uint64_t v35 = v38;
              }
              while (v36 != v37);
              uint64_t v36 = (char *)*a5;
            }
            *a5 = v35;
            a5[1] = v29;
            a5[2] = &v34[8 * v33];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *uint64_t v28 = ClientData;
            uint64_t v29 = v28 + 1;
          }
          a5[1] = v29;
          int v40 = *(void **)(a4 + 8);
          unint64_t v39 = *(void *)(a4 + 16);
          if ((unint64_t)v40 >= v39)
          {
            uint64_t v42 = *(void **)a4;
            uint64_t v43 = ((uint64_t)v40 - *(void *)a4) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a4 + 16, v46);
              uint64_t v42 = *(void **)a4;
              int v40 = *(void **)(a4 + 8);
            }
            else
            {
              uint64_t v47 = 0;
            }
            uint64_t v48 = &v47[8 * v43];
            *(void *)uint64_t v48 = 1;
            uint64_t v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *--v40;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            *(void *)a4 = v48;
            *(void *)(a4 + 8) = v41;
            *(void *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = &v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *int v40 = 1;
            uint64_t v41 = v40 + 1;
          }
          *(void *)(a4 + 8) = v41;
        }
        if (v53 && v50 != (__int32 *)v52 && v50) {
          MEMORY[0x216698730]();
        }
      }
      if (v57 && v54 != (__int32 *)v56)
      {
        if (v54) {
          MEMORY[0x216698730]();
        }
      }
    }
  }
}

void sub_213F28B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0x448]))
  {
    if (a15 != a10 && a15 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0x868]))
  {
    unint64_t v17 = STACK[0x450];
    if (STACK[0x450] != a11)
    {
      if (v17) {
        MEMORY[0x216698730](v17, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TGrammarManager2::getLMScore(uint64_t a1, __int32 *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v9 = a4;
  if (a4)
  {
    uint64_t v10 = a4 - 1;
    if (a4 == 1
      || TWord::getWordSpec(*(TWord **)(*a3 + 112 * (a4 - 2) + 16)) == -1
      || TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16)) == -1)
    {
      if (TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16)) == -1)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t WordSpec = TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16));
        uint64_t v42 = v13;
        uint64_t v9 = 1;
      }
    }
    else
    {
      uint64_t WordSpec = TWord::getWordSpec(*(TWord **)(*a3 + 112 * (a4 - 2) + 16));
      uint64_t v42 = v11;
      uint64_t v43 = TWord::getWordSpec(*(TWord **)(*a3 + 112 * v10 + 16));
      uint64_t v44 = v12;
      uint64_t v9 = 2;
    }
  }
  uint64_t v36 = (__int32 *)v38;
  long long v37 = xmmword_214085190;
  char v39 = 1;
  if (*a2)
  {
    uint64_t v14 = &WordSpec + 2 * v9 + 1;
    while (!wcsncmp(a2, dword_2140A42B4, 7uLL))
    {
      uint64_t v15 = a2 + 7;
      uint64_t v16 = wcsstr(a2 + 7, (const __int32 *)&unk_2140A42D4);
      TBuffer<wchar_t>::resize((uint64_t)&v36, 0);
      TBuffer<wchar_t>::insert((uint64_t)&v36, 0, v15, v16 - v15);
      unint64_t v17 = *(void **)(a1 + 32);
      if (*((void *)&v37 + 1) >= (unint64_t)v37)
      {
        if (v39)
        {
          v40[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v36, *((unint64_t *)&v37 + 1), v40, 1uLL);
          unint64_t v18 = v36;
          --*((void *)&v37 + 1);
        }
        else
        {
          unint64_t v18 = v36;
          if ((void)v37) {
            v36[(void)v37 - 1] = 0;
          }
        }
      }
      else
      {
        unint64_t v18 = v36;
        v36[*((void *)&v37 + 1)] = 0;
      }
      uint64_t HeadClone = (TWord *)TLexicon::findHeadClone(v17, v18);
      if (!HeadClone) {
        break;
      }
      ++v9;
      *(v14 - 1) = TWord::getWordSpec(HeadClone);
      *uint64_t v14 = v20;
      __int32 v21 = v16[1];
      a2 = v16 + 1;
      v14 += 2;
      if (!v21) {
        goto LABEL_20;
      }
    }
    uint64_t v30 = 0;
  }
  else
  {
LABEL_20:
    uint64_t v22 = a5 + a4;
    uint64_t v23 = *a3;
    if (a5 + a4 < (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4)))
    {
      uint64_t v24 = 112 * v22 + 16;
      unsigned int v25 = &WordSpec + 2 * v9 + 1;
      unint64_t v26 = v22 + 1;
      char v27 = 1;
      do
      {
        if (TWord::getWordSpec(*(TWord **)(v23 + v24)) == -1) {
          break;
        }
        *(v25 - 1) = TWord::getWordSpec(*(TWord **)(*a3 + v24));
        *unsigned int v25 = v28;
        uint64_t v23 = *a3;
        char v29 = (v26 < 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4)) & v27;
        ++v9;
        v24 += 112;
        v25 += 2;
        ++v26;
        char v27 = 0;
      }
      while ((v29 & 1) != 0);
    }
    SDLm_LmScore(0, 0, 0, 0, 0, &WordSpec, v9, (uint64_t)v40, v9, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    uint64_t v30 = 0;
    if (v9)
    {
      uint64_t v31 = v40;
      do
      {
        int v32 = *v31++;
        uint64_t v30 = (v32 + v30);
        --v9;
      }
      while (v9);
    }
  }
  if (v39)
  {
    if (v36 != (__int32 *)v38 && v36 != 0) {
      MEMORY[0x216698730]();
    }
  }
  return v30;
}

void sub_213F28FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (LOBYTE(STACK[0x470]))
  {
    if (a20 != v20 && a20 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void *TGrammarManager2::search(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = (uint64_t)a1;
  a1[8] = a5;
  uint64_t v9 = *(void *)(a1[5] + 56);
  v113[0] = &unk_26C4E1948;
  v113[1] = a2;
  v113[2] = a3;
  v113[3] = a4;
  v113[4] = v9;
  uint64_t v10 = (TParam *)(a1[7] + 18256);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v10);
  char v12 = *((unsigned char *)v10 + TParam::getValidConfig(v10, ActiveConfigHandle) + 152);
  uint64_t v13 = *(unsigned char **)(v8 + 48);
  v13[8] = v12;
  (*(void (**)(unsigned char *))(*(void *)v13 + 16))(v13);
  uint64_t v14 = (TParam *)(*(void *)(v8 + 56) + 4040);
  uint64_t v15 = TParam::getActiveConfigHandle(v14);
  uint64_t v16 = *((int *)v14 + TParam::getValidConfig(v14, v15) + 40);
  uint64_t v17 = *(void *)(v8 + 48);
  uint64_t v18 = *(void *)(v17 + 16);
  *(void *)(v17 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v16;
  (*(void (**)(void))(v18 + 16))();
  AllProductions = (void *)TParser::getAllProductions(*(void **)(v8 + 48), (uint64_t)v113);
  TAllocator::TAllocator((TAllocator *)v112, 2048);
  if (AllProductions)
  {
    int v102 = 0;
    uint64_t v100 = v8;
    unint64_t v26 = 0x26AB82000uLL;
    while (1)
    {
      if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_2140A42DC, (TAllocator *)v112, 0) > 1)goto LABEL_60; {
      char v27 = (__int32 *)v20;
      }
      if (*(_DWORD *)v20)
      {
        LOBYTE(v103[0]) = 0;
        {
          operator new();
        }
        double v28 = TLocaleInfo::stringToFloat(*(void *)(v26 + 2288), v27, (BOOL *)v103);
        if (LOBYTE(v103[0]))
        {
          loggableUnicode((unsigned int *)v27, &__p);
          p_p = &__p;
          if (v107 < 0) {
            p_p = __p;
          }
          tknPrintf("Error: 'priority' was '%s'. Expected a double-precision value.\n", v29, v30, v31, v32, p_p);
          goto LABEL_10;
        }
        double v34 = v28;
      }
      else
      {
        double v34 = 0.0;
      }
      if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_2140A4300, (TAllocator *)v112, 0) > 1)goto LABEL_60; {
      uint64_t v35 = (__int32 *)v20;
      }
      if (!*(_DWORD *)v20)
      {
        tknPrintString("Error: 'result' was ''. Ignored production.\n");
        goto LABEL_60;
      }
      unint64_t v36 = AllProductions[2];
      LOBYTE(v103[0]) = 0;
      unint64_t AttributeValue = TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_2140A431C, (TAllocator *)v112, v103);
      unint64_t v39 = 0;
      if (!LOBYTE(v103[0]) || AttributeValue > 1) {
        goto LABEL_25;
      }
      int v40 = v38;
      BOOL v111 = 0;
      {
        operator new();
      }
      unsigned int v41 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v40, &v111);
      if (!v111)
      {
        unint64_t v39 = v41;
        if (v36 <= v41)
        {
          loggableUnicode(v40, &__p);
          unint64_t v71 = &__p;
          if (v107 < 0) {
            unint64_t v71 = __p;
          }
          tknPrintf("Error: 'resultStart' was '%s'. Expected an integer value in the range [0,%lld).\n", v67, v68, v69, v70, v71, v36);
          int v72 = v107;
          goto LABEL_59;
        }
LABEL_25:
        LOBYTE(v103[0]) = 0;
        unint64_t v47 = TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_2140A434C, (TAllocator *)v112, v103);
        unint64_t v49 = 0;
        if (!LOBYTE(v103[0]) || v47 > 1)
        {
LABEL_34:
          int LMScore = TGrammarManager2::getLMScore(v8, v35, a2, v39 + a3, v36 - (v39 + v49));
          int v58 = LMScore;
          int v59 = v102;
          if (v102 <= LMScore) {
            int v59 = LMScore;
          }
          int v102 = v59;
          unint64_t v60 = a6[1];
          unint64_t v61 = a6[2];
          if (v60 >= v61)
          {
            uint64_t v63 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v60 - *a6) >> 3);
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) > 0x492492492492492) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v65 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v61 - *a6) >> 3);
            if (2 * v65 > v64) {
              unint64_t v64 = 2 * v65;
            }
            if (v65 >= 0x249249249249249) {
              unint64_t v20 = 0x492492492492492;
            }
            else {
              unint64_t v20 = v64;
            }
            if (v20) {
              uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarManager2Result>>((uint64_t)(a6 + 2), v20);
            }
            else {
              uint64_t v66 = 0;
            }
            int v73 = &v66[56 * v63];
            *(void *)int v73 = AllProductions;
            *((void *)v73 + 1) = v35;
            *((void *)v73 + 2) = v36;
            *((void *)v73 + 3) = v39;
            *((void *)v73 + 4) = v49;
            *((double *)v73 + 5) = v34;
            *((_DWORD *)v73 + 12) = v58;
            uint64_t v75 = (char *)*a6;
            BOOL v74 = (char *)a6[1];
            char v76 = v73;
            unint64_t v26 = 0x26AB82000;
            if (v74 != (char *)*a6)
            {
              do
              {
                __n128 v24 = *(__n128 *)(v74 - 56);
                long long v25 = *(_OWORD *)(v74 - 40);
                long long v77 = *(_OWORD *)(v74 - 24);
                *((_DWORD *)v76 - 2) = *((_DWORD *)v74 - 2);
                *(_OWORD *)(v76 - DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v77;
                *(_OWORD *)(v76 - 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v25;
                *(__n128 *)(v76 - 56) = v24;
                v76 -= 56;
                v74 -= 56;
              }
              while (v74 != v75);
              BOOL v74 = (char *)*a6;
            }
            uint64_t v62 = v73 + 56;
            *a6 = (uint64_t)v76;
            a6[1] = (uint64_t)(v73 + 56);
            a6[2] = (uint64_t)&v66[56 * v20];
            if (v74) {
              operator delete(v74);
            }
          }
          else
          {
            *(void *)unint64_t v60 = AllProductions;
            *(void *)(v60 + 8) = v35;
            *(void *)(v60 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v36;
            *(void *)(v60 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v39;
            *(void *)(v60 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v49;
            *(double *)(v60 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v34;
            uint64_t v62 = (char *)(v60 + 56);
            *(_DWORD *)(v60 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = LMScore;
            unint64_t v26 = 0x26AB82000;
          }
          a6[1] = (uint64_t)v62;
          uint64_t v8 = v100;
          goto LABEL_60;
        }
        uint64_t v50 = v48;
        BOOL v111 = 0;
        {
          operator new();
        }
        unsigned int v51 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v50, &v111);
        if (!v111)
        {
          if (v39 < v51)
          {
            unint64_t v49 = v36 - v51;
            if (v36 >= v51) {
              goto LABEL_34;
            }
          }
          loggableUnicode(v50, &__p);
          char v82 = &__p;
          if (v107 < 0) {
            char v82 = __p;
          }
          tknPrintf("Error: 'resultEnd' was '%s'. Expected an integer value in the range (%lld,%lld).\n", v78, v79, v80, v81, v82, v39, v36);
          int v72 = v107;
LABEL_59:
          unint64_t v26 = 0x26AB82000;
          if ((v72 & 0x80000000) == 0) {
            goto LABEL_60;
          }
LABEL_11:
          operator delete(__p);
          goto LABEL_60;
        }
        loggableUnicode(v50, &__p);
        uint64_t v56 = &__p;
        if (v107 < 0) {
          uint64_t v56 = __p;
        }
        tknPrintf("Error: 'resultEnd' was '%s'. Expected an integer value.\n", v52, v53, v54, v55, v56);
        unint64_t v26 = 0x26AB82000;
        goto LABEL_10;
      }
      loggableUnicode(v40, &__p);
      unint64_t v46 = &__p;
      if (v107 < 0) {
        unint64_t v46 = __p;
      }
      tknPrintf("Error: 'resultStart' was '%s'. Expected an integer value.\n", v42, v43, v44, v45, v46);
      unint64_t v26 = 0x26AB82000;
LABEL_10:
      if (v107 < 0) {
        goto LABEL_11;
      }
LABEL_60:
      AllProductions = (void *)*AllProductions;
      if (!AllProductions) {
        goto LABEL_69;
      }
    }
  }
  int v102 = 0;
LABEL_69:
  uint64_t v83 = MEMORY[0x263F8C2C8];
  if (*(unsigned char *)(v8 + 24))
  {
    tknPrintf("Parse chart at index %llu:\n", v20, v21, v22, v23, a3);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    TParser::logChart(*(uint64_t **)(v8 + 48), &__p);
    std::stringbuf::str();
    if (v104 >= 0) {
      uint64_t v84 = v103;
    }
    else {
      uint64_t v84 = (void **)v103[0];
    }
    tknPrintString((const char *)v84);
    if (v104 < 0) {
      operator delete(v103[0]);
    }
    __p = *(void **)v83;
    *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(v83 + 24);
    uint64_t v106 = MEMORY[0x263F8C318] + 16;
    if (v109 < 0) {
      operator delete(v108);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166986E0](v110);
  }
  uint64_t v85 = *a6;
  uint64_t v86 = (__n128 *)a6[1];
  if ((__n128 *)*a6 != v86)
  {
    unint64_t v87 = ((uint64_t)v86 - v85) / 56;
    v24.n128_f64[0] = (double)(v102 + 1);
    uint64_t v88 = v87 <= 1 ? 1 : ((uint64_t)v86 - v85) / 56;
    uint64_t v89 = v85 + 40;
    do
    {
      LODWORD(v25) = *(_DWORD *)(v89 + 8);
      *(double *)&long long v25 = *(double *)v89 + (double)(unint64_t)v25 / v24.n128_f64[0];
      *(void *)uint64_t v89 = v25;
      v89 += 56;
      --v88;
    }
    while (v88);
    __p = sortResult;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,false>(v85, v86, (uint64_t (**)(long long *, long long *))&__p, 126 - 2 * __clz(v87), 1, v24);
    if (*(unsigned char *)(v8 + 8))
    {
      tknPrintString("Parse tree for word sequence:");
      if (*(void *)(*a6 + 16))
      {
        unint64_t v90 = 0;
        uint64_t v91 = 112 * a3 + 16;
        do
        {
          tknPrintString(" ");
          loggableUnicode(**(unsigned int ***)(*a2 + v91), &__p);
          if (v107 >= 0) {
            int v92 = (const char *)&__p;
          }
          else {
            int v92 = (const char *)__p;
          }
          tknPrintString(v92);
          if (v107 < 0) {
            operator delete(__p);
          }
          ++v90;
          v91 += 112;
        }
        while (v90 < *(void *)(*a6 + 16));
      }
      tknPrintString("\n");
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      uint64_t v94 = *a6;
      uint64_t v93 = a6[1];
      if (v93 != *a6)
      {
        uint64_t v95 = 0;
        unint64_t v96 = 0;
        do
        {
          uint64_t v97 = v94 + v95;
          if (*(void *)(v94 + 16) != *(void *)(v94 + v95 + 16) || *(double *)(v94 + 40) != *(double *)(v97 + 40)) {
            break;
          }
          if (*(void *)(v94 + 24) == *(void *)(v94 + v95 + 24)
            && *(void *)(v94 + 32) == *(void *)(v94 + v95 + 32))
          {
            TParser::logTree(*(void *)(v8 + 48), *(void **)v97, &__p);
            std::stringbuf::str();
            if (v104 >= 0) {
              uint64_t v98 = v103;
            }
            else {
              uint64_t v98 = (void **)v103[0];
            }
            tknPrintString((const char *)v98);
            if (v104 < 0) {
              operator delete(v103[0]);
            }
            uint64_t v94 = *a6;
            uint64_t v93 = a6[1];
          }
          ++v96;
          v95 += 56;
        }
        while (v96 < 0x6DB6DB6DB6DB6DB7 * ((v93 - v94) >> 3));
      }
      __p = *(void **)v83;
      *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(v83 + 24);
      uint64_t v106 = MEMORY[0x263F8C318] + 16;
      if (v109 < 0) {
        operator delete(v108);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166986E0](v110);
    }
  }
  return TAllocator::clear((TAllocator *)v112);
}

void sub_213F29B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  MEMORY[0x216698730](v28, 0x1070C40ADD13FEBLL);
  TAllocator::clear((TAllocator *)(v29 - 184));
  _Unwind_Resume(a1);
}

BOOL sortResult(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a2 + 16);
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return *(double *)(a1 + 40) < *(double *)(a2 + 40);
  }
  else {
    return v5;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a2 + 16);
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return *(double *)(a1 + 40) < *(double *)(a2 + 40);
  }
  else {
    return v5;
  }
}

void TWideChartSeeder2::~TWideChartSeeder2(TWideChartSeeder2 *this)
{
}

void TWordVerifier::~TWordVerifier(TWordVerifier *this)
{
}

BOOL TWordVerifier::verifyTerminal(uint64_t a1, int *a2, char a3, std::string *a4)
{
  MEMORY[0x216698410](a4, &byte_2140B33BB);
  if (a3) {
    return 0;
  }
  int v9 = TLexicon::checkName(*(void *)(a1 + 8), a2, 1, 0xFFFFFFFFFFFFFFFFLL);
  BOOL v8 = v9 != 0;
  if (v9)
  {
    loggableUnicode((unsigned int *)a2, __p);
    if (v15 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    MEMORY[0x216698410](a4, v10);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = " is an invalid token name.";
LABEL_10:
    std::string::append(a4, v11);
    return v8;
  }
  if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(*(void **)(a1 + 8), a2))
  {
    loggableUnicode((unsigned int *)a2, __p);
    if (v15 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    MEMORY[0x216698410](a4, v13);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = " isn't lexicalized.";
    goto LABEL_10;
  }
  return 0;
}

void sub_213F29DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarManager2Result>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,false>(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v22 = v3;
    uint64_t v23 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 56;
    if (result + 56 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v12 = *(_OWORD *)(v10 + 16);
          long long v18 = *(_OWORD *)v10;
          long long v19 = v12;
          long long v20 = *(_OWORD *)(v10 + 32);
          uint64_t v21 = *(void *)(v10 + 48);
          uint64_t v13 = v9;
          while (1)
          {
            uint64_t v14 = v6 + v13;
            long long v15 = *(_OWORD *)(v6 + v13 + 16);
            *(_OWORD *)(v14 + 56) = *(_OWORD *)(v6 + v13);
            *(_OWORD *)(v14 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = v15;
            *(_OWORD *)(v14 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = *(_OWORD *)(v6 + v13 + 32);
            *(_DWORD *)(v14 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = *(_DWORD *)(v6 + v13 + 48);
            if (!v13) {
              break;
            }
            v13 -= 56;
            uint64_t result = (*a3)((uint64_t)&v18, v13 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v16 = v6 + v13 + 56;
              goto LABEL_10;
            }
          }
          uint64_t v16 = v6;
LABEL_10:
          long long v17 = v19;
          *(_OWORD *)uint64_t v16 = v18;
          *(_OWORD *)(v16 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v17;
          *(_OWORD *)(v16 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v20;
          *(_DWORD *)(v16 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v21;
        }
        uint64_t v7 = v10 + 56;
        v9 += 56;
      }
      while (v10 + 56 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 56;
    if (result + 56 != a2)
    {
      uint64_t v9 = result - 56;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v11 = *(_OWORD *)(v6 + 16);
          long long v15 = *(_OWORD *)v6;
          long long v16 = v11;
          long long v17 = *(_OWORD *)(v6 + 32);
          uint64_t v18 = *(void *)(v6 + 48);
          uint64_t v12 = v9;
          do
          {
            long long v13 = *(_OWORD *)(v12 + 72);
            *(_OWORD *)(v12 + 112) = *(_OWORD *)(v12 + 56);
            *(_OWORD *)(v12 + 128) = v13;
            *(_OWORD *)(v12 + 144) = *(_OWORD *)(v12 + 88);
            *(_DWORD *)(v12 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(v12 + 104);
            uint64_t result = (*a3)((uint64_t)&v15, v12);
            v12 -= 56;
          }
          while ((result & 1) != 0);
          long long v14 = v16;
          *(_OWORD *)(v12 + 112) = v15;
          *(_OWORD *)(v12 + 128) = v14;
          *(_OWORD *)(v12 + 144) = v17;
          *(_DWORD *)(v12 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v18;
        }
        uint64_t v7 = v6 + 56;
        v9 += 56;
      }
      while (v6 + 56 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v11 = a1[1];
      long long v10 = a1[2];
      long long v12 = *a1;
      uint64_t v13 = *((void *)a1 + 6);
      long long v15 = a3[1];
      long long v14 = a3[2];
      long long v16 = *a3;
      *((_DWORD *)a1 + 12) = *((_DWORD *)a3 + 12);
      a1[1] = v15;
      a1[2] = v14;
      *a1 = v16;
      *((_DWORD *)a3 + 12) = v13;
      *a3 = v12;
      a3[1] = v11;
      uint64_t result = 1;
LABEL_9:
      a3[2] = v10;
      return result;
    }
    long long v32 = a1[1];
    long long v31 = a1[2];
    long long v33 = *a1;
    uint64_t v34 = *((void *)a1 + 6);
    long long v36 = a2[1];
    long long v35 = a2[2];
    long long v37 = *a2;
    *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
    a1[1] = v36;
    a1[2] = v35;
    *a1 = v37;
    *((_DWORD *)a2 + 12) = v34;
    *a2 = v33;
    a2[1] = v32;
    a2[2] = v31;
    if ((*a4)(a3, a2))
    {
      long long v38 = a2[1];
      long long v10 = a2[2];
      long long v39 = *a2;
      uint64_t v40 = *((void *)a2 + 6);
      long long v42 = a3[1];
      long long v41 = a3[2];
      long long v43 = *a3;
      *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
      a2[1] = v42;
      a2[2] = v41;
      *a2 = v43;
      *((_DWORD *)a3 + 12) = v40;
      *a3 = v39;
      a3[1] = v38;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    long long v18 = a2[1];
    long long v17 = a2[2];
    long long v19 = *a2;
    uint64_t v20 = *((void *)a2 + 6);
    long long v22 = a3[1];
    long long v21 = a3[2];
    long long v23 = *a3;
    *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
    a2[1] = v22;
    a2[2] = v21;
    *a2 = v23;
    *((_DWORD *)a3 + 12) = v20;
    *a3 = v19;
    a3[1] = v18;
    a3[2] = v17;
    if ((*a4)(a2, a1))
    {
      long long v25 = a1[1];
      long long v24 = a1[2];
      long long v26 = *a1;
      uint64_t v27 = *((void *)a1 + 6);
      long long v29 = a2[1];
      long long v28 = a2[2];
      long long v30 = *a2;
      *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
      a1[1] = v29;
      a1[2] = v28;
      *a1 = v30;
      *((_DWORD *)a2 + 12) = v27;
      *a2 = v26;
      a2[1] = v25;
      uint64_t result = 2;
      a2[2] = v24;
      return result;
    }
  }
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TGrammarManager2Result *,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v6 = a1[1];
  long long v27 = *a1;
  long long v28 = v6;
  long long v29 = a1[2];
  uint64_t v30 = *((void *)a1 + 6);
  if ((*a3)(&v27, (long long *)((char *)a2 - 56)))
  {
    uint64_t v7 = a1;
    do
      uint64_t v7 = (long long *)((char *)v7 + 56);
    while (((*a3)(&v27, v7) & 1) == 0);
  }
  else
  {
    char v8 = (long long *)((char *)a1 + 56);
    do
    {
      uint64_t v7 = v8;
      if (v8 >= v4) {
        break;
      }
      int v9 = (*a3)(&v27, v8);
      char v8 = (long long *)((char *)v7 + 56);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      uint64_t v4 = (long long *)((char *)v4 - 56);
    while (((*a3)(&v27, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    long long v10 = *v7;
    long long v11 = v7[1];
    long long v12 = v7[2];
    uint64_t v34 = *((void *)v7 + 6);
    long long v32 = v11;
    long long v33 = v12;
    long long v31 = v10;
    long long v13 = *v4;
    long long v14 = v4[1];
    long long v15 = v4[2];
    *((_DWORD *)v7 + 12) = *((_DWORD *)v4 + 12);
    v7[1] = v14;
    v7[2] = v15;
    *uint64_t v7 = v13;
    long long v16 = v31;
    long long v17 = v32;
    long long v18 = v33;
    *((_DWORD *)v4 + 12) = v34;
    v4[1] = v17;
    v4[2] = v18;
    *uint64_t v4 = v16;
    do
      uint64_t v7 = (long long *)((char *)v7 + 56);
    while (!(*a3)(&v27, v7));
    do
      uint64_t v4 = (long long *)((char *)v4 - 56);
    while (((*a3)(&v27, v4) & 1) != 0);
  }
  long long v19 = (long long *)((char *)v7 - 56);
  if ((long long *)((char *)v7 - 56) != a1)
  {
    long long v20 = *v19;
    long long v21 = *(long long *)((char *)v7 - 40);
    long long v22 = *(long long *)((char *)v7 - 24);
    *((_DWORD *)a1 + 12) = *((_DWORD *)v7 - 2);
    a1[1] = v21;
    a1[2] = v22;
    *a1 = v20;
  }
  long long v23 = v27;
  long long v24 = v28;
  long long v25 = v29;
  *((_DWORD *)v7 - 2) = v30;
  *(long long *)((char *)v7 - 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v24;
  *(long long *)((char *)v7 - DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v25;
  *long long v19 = v23;
  return v7;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TGrammarManager2Result *,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&)>(long long *a1, unint64_t a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v26 = *a1;
  long long v27 = v7;
  long long v28 = a1[2];
  uint64_t v29 = *((void *)a1 + 6);
  do
    v6 += 56;
  while (((*a3)((char *)a1 + v6, &v26) & 1) != 0);
  unint64_t v8 = (unint64_t)a1 + v6;
  uint64_t v9 = (uint64_t)a1 + v6 - 56;
  if (v6 == 56)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      a2 -= 56;
    }
    while (((*a3)((char *)a2, &v26) & 1) == 0);
  }
  else
  {
    do
      a2 -= 56;
    while (!(*a3)((char *)a2, &v26));
  }
  if (v8 < a2)
  {
    long long v10 = (long long *)((char *)a1 + v6);
    unint64_t v11 = a2;
    do
    {
      long long v13 = v10[1];
      long long v30 = *v10;
      long long v12 = v30;
      long long v31 = v13;
      long long v32 = v10[2];
      long long v14 = v32;
      uint64_t v33 = *((void *)v10 + 6);
      int v15 = v33;
      int v16 = *(_DWORD *)(v11 + 48);
      long long v18 = *(_OWORD *)(v11 + 16);
      long long v17 = *(_OWORD *)(v11 + 32);
      long long *v10 = *(_OWORD *)v11;
      v10[1] = v18;
      v10[2] = v17;
      *((_DWORD *)v10 + 12) = v16;
      *(_OWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v13;
      *(_OWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v14;
      *(_DWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v15;
      *(_OWORD *)unint64_t v11 = v12;
      do
        long long v10 = (long long *)((char *)v10 + 56);
      while (((*a3)((char *)v10, &v26) & 1) != 0);
      do
        v11 -= 56;
      while (!(*a3)((char *)v11, &v26));
    }
    while ((unint64_t)v10 < v11);
    uint64_t v9 = (uint64_t)v10 - 56;
  }
  if ((long long *)v9 != a1)
  {
    long long v19 = *(_OWORD *)v9;
    long long v20 = *(_OWORD *)(v9 + 16);
    long long v21 = *(_OWORD *)(v9 + 32);
    *((_DWORD *)a1 + 12) = *(_DWORD *)(v9 + 48);
    a1[1] = v20;
    a1[2] = v21;
    *a1 = v19;
  }
  long long v22 = v26;
  long long v23 = v27;
  long long v24 = v28;
  *(_DWORD *)(v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v29;
  *(_OWORD *)(v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v23;
  *(_OWORD *)(v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v24;
  *(_OWORD *)uint64_t v9 = v22;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v8 = (long long *)(a2 - 56);
      if (!(*a3)((long long *)(a2 - 56), (long long *)a1)) {
        return 1;
      }
      long long v10 = *(_OWORD *)(a1 + 16);
      long long v9 = *(_OWORD *)(a1 + 32);
      long long v11 = *(_OWORD *)a1;
      uint64_t v12 = *(void *)(a1 + 48);
      long long v14 = *(_OWORD *)(a2 - 40);
      long long v13 = *(_OWORD *)(a2 - 24);
      long long v15 = *v8;
      *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a2 - 8);
      *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v14;
      *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v13;
      *(_OWORD *)a1 = v15;
      *(_DWORD *)(a2 - 8) = v12;
      *unint64_t v8 = v11;
      *(_OWORD *)(a2 - 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v10;
      BOOL result = 1;
      *(_OWORD *)(a2 - DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v9;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((long long *)a1, (long long *)(a1 + 56), (long long *)(a2 - 56), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a1 + 56, a1 + 112, a1 + 168, (long long *)(a2 - 56), a3);
      return 1;
    default:
      int v16 = (long long *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((long long *)a1, (long long *)(a1 + 56), (long long *)(a1 + 112), a3);
      uint64_t v17 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v17, v16))
    {
      long long v20 = *(_OWORD *)(v17 + 16);
      long long v26 = *(_OWORD *)v17;
      long long v27 = v20;
      long long v28 = *(_OWORD *)(v17 + 32);
      uint64_t v29 = *(void *)(v17 + 48);
      uint64_t v21 = v18;
      while (1)
      {
        uint64_t v22 = a1 + v21;
        long long v23 = *(_OWORD *)(a1 + v21 + 128);
        *(_OWORD *)(v22 + 168) = *(_OWORD *)(a1 + v21 + 112);
        *(_OWORD *)(v22 + 184) = v23;
        *(_OWORD *)(v22 + 20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)(a1 + v21 + 144);
        *(_DWORD *)(v22 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_DWORD *)(a1 + v21 + 160);
        if (v21 == -112) {
          break;
        }
        v21 -= 56;
        if (((*a3)(&v26, (long long *)(v22 + 56)) & 1) == 0)
        {
          uint64_t v24 = a1 + v21 + 168;
          goto LABEL_12;
        }
      }
      uint64_t v24 = a1;
LABEL_12:
      long long v25 = v27;
      *(_OWORD *)uint64_t v24 = v26;
      *(_OWORD *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v25;
      *(_OWORD *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v28;
      *(_DWORD *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v29;
      if (++v19 == 8) {
        return v17 + 56 == a2;
      }
    }
    int v16 = (long long *)v17;
    v18 += 56;
    v17 += 56;
    if (v17 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    long long v12 = *(_OWORD *)(a3 + 16);
    long long v11 = *(_OWORD *)(a3 + 32);
    long long v13 = *(_OWORD *)a3;
    uint64_t v14 = *(void *)(a3 + 48);
    long long v16 = *(_OWORD *)(a4 + 16);
    long long v15 = *(_OWORD *)(a4 + 32);
    long long v17 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a4 + 48);
    *(_OWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v16;
    *(_OWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v15;
    *(_OWORD *)a3 = v17;
    *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v14;
    *(_OWORD *)a4 = v13;
    *(_OWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v12;
    *(_OWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v18 = *(_OWORD *)(a2 + 32);
      long long v20 = *(_OWORD *)a2;
      uint64_t v21 = *(void *)(a2 + 48);
      long long v23 = *(_OWORD *)(a3 + 16);
      long long v22 = *(_OWORD *)(a3 + 32);
      long long v24 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v23;
      *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v22;
      *(_OWORD *)a2 = v24;
      *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v21;
      *(_OWORD *)a3 = v20;
      *(_OWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v19;
      *(_OWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v18;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        long long v25 = *(_OWORD *)(a1 + 16);
        __n128 result = *(__n128 *)(a1 + 32);
        long long v26 = *(_OWORD *)a1;
        uint64_t v27 = *(void *)(a1 + 48);
        long long v29 = *(_OWORD *)(a2 + 16);
        long long v28 = *(_OWORD *)(a2 + 32);
        long long v30 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a2 + 48);
        *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v29;
        *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v28;
        *(_OWORD *)a1 = v30;
        *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v27;
        *(_OWORD *)a2 = v26;
        *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v25;
        *(__n128 *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(long long *, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    long long v15 = *(_OWORD *)(a4 + 16);
    long long v14 = *(_OWORD *)(a4 + 32);
    long long v16 = *(_OWORD *)a4;
    uint64_t v17 = *(void *)(a4 + 48);
    long long v19 = a5[1];
    long long v18 = a5[2];
    long long v20 = *a5;
    *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *((_DWORD *)a5 + 12);
    *(_OWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v19;
    *(_OWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v18;
    *(_OWORD *)a4 = v20;
    *((_DWORD *)a5 + 12) = v17;
    *a5 = v16;
    a5[1] = v15;
    a5[2] = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      long long v22 = *(_OWORD *)(a3 + 16);
      long long v21 = *(_OWORD *)(a3 + 32);
      long long v23 = *(_OWORD *)a3;
      uint64_t v24 = *(void *)(a3 + 48);
      long long v26 = *(_OWORD *)(a4 + 16);
      long long v25 = *(_OWORD *)(a4 + 32);
      long long v27 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a4 + 48);
      *(_OWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v26;
      *(_OWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v25;
      *(_OWORD *)a3 = v27;
      *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v24;
      *(_OWORD *)a4 = v23;
      *(_OWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v22;
      *(_OWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v21;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        long long v29 = *(_OWORD *)(a2 + 16);
        long long v28 = *(_OWORD *)(a2 + 32);
        long long v30 = *(_OWORD *)a2;
        uint64_t v31 = *(void *)(a2 + 48);
        long long v33 = *(_OWORD *)(a3 + 16);
        long long v32 = *(_OWORD *)(a3 + 32);
        long long v34 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a3 + 48);
        *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v33;
        *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v32;
        *(_OWORD *)a2 = v34;
        *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v31;
        *(_OWORD *)a3 = v30;
        *(_OWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v29;
        *(_OWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v28;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          long long v35 = *(_OWORD *)(a1 + 16);
          __n128 result = *(__n128 *)(a1 + 32);
          long long v36 = *(_OWORD *)a1;
          uint64_t v37 = *(void *)(a1 + 48);
          long long v39 = *(_OWORD *)(a2 + 16);
          long long v38 = *(_OWORD *)(a2 + 32);
          long long v40 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a2 + 48);
          *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v39;
          *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v38;
          *(_OWORD *)a1 = v40;
          *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v37;
          *(_OWORD *)a2 = v36;
          *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v35;
          *(__n128 *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = result;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*,TGrammarManager2Result*>(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    long long v7 = a2;
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) / 56;
    if ((uint64_t)a2 - a1 >= 57)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = (__n128 *)(a1 + 56 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a4, v10, v13);
        long long v13 = (__n128 *)((char *)v13 - 56);
        --v12;
      }
      while (v12);
    }
    long long v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          __n128 v17 = v15[1];
          __n128 v16 = v15[2];
          __n128 v18 = *v15;
          unint64_t v19 = v15[3].n128_u64[0];
          __n128 v21 = *(__n128 *)(a1 + 16);
          __n128 v20 = *(__n128 *)(a1 + 32);
          __n128 v22 = *(__n128 *)a1;
          v15[3].n128_u32[0] = *(_DWORD *)(a1 + 48);
          v15[1] = v21;
          v15[2] = v20;
          *long long v15 = v22;
          *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v19;
          *(__n128 *)a1 = v18;
          *(__n128 *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v17;
          *(__n128 *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, a4, v10, (__n128 *)a1);
        }
        long long v15 = (__n128 *)((char *)v15 + 56);
      }
      while (v15 != a3);
      long long v14 = a3;
    }
    if (v9 < 57)
    {
      return v14;
    }
    else
    {
      uint64_t v37 = v14;
      int64_t v23 = v9 / 0x38uLL;
      do
      {
        long long v38 = v7;
        uint64_t v24 = 0;
        __n128 v39 = *(__n128 *)a1;
        __n128 v40 = *(__n128 *)(a1 + 16);
        __n128 v41 = *(__n128 *)(a1 + 32);
        uint64_t v42 = *(void *)(a1 + 48);
        uint64_t v25 = a1;
        do
        {
          uint64_t v26 = v25 + 56 * v24 + 56;
          uint64_t v27 = (2 * v24) | 1;
          uint64_t v28 = 2 * v24 + 2;
          if (v28 < v23 && (*a4)(v25 + 56 * v24 + 56, v25 + 56 * v24 + 112))
          {
            v26 += 56;
            uint64_t v27 = v28;
          }
          long long v29 = *(_OWORD *)v26;
          long long v30 = *(_OWORD *)(v26 + 16);
          long long v31 = *(_OWORD *)(v26 + 32);
          *(_DWORD *)(v25 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(v26 + 48);
          *(_OWORD *)(v25 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v30;
          *(_OWORD *)(v25 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v31;
          *(_OWORD *)uint64_t v25 = v29;
          uint64_t v25 = v26;
          uint64_t v24 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
        long long v7 = (__n128 *)((char *)v38 - 56);
        if ((__int8 *)v26 == &v38[-4].n128_i8[8])
        {
          *(_DWORD *)(v26 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v42;
          *(__n128 *)(v26 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v40;
          *(__n128 *)(v26 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v41;
          *(__n128 *)uint64_t v26 = v39;
        }
        else
        {
          __n128 v32 = *v7;
          long long v33 = *(long long *)((char *)&v38[-3] + 8);
          long long v34 = *(long long *)((char *)&v38[-2] + 8);
          *(_DWORD *)(v26 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v38[-1].n128_u32[2];
          *(_OWORD *)(v26 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v33;
          *(_OWORD *)(v26 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v34;
          *(__n128 *)uint64_t v26 = v32;
          *long long v7 = v39;
          *(__n128 *)((char *)v38 - 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v40;
          *(__n128 *)((char *)v38 - DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v41;
          v38[-1].n128_u32[2] = v42;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(a1, v26 + 56, (uint64_t (**)(long long *, long long *))a4, 0x6DB6DB6DB6DB6DB7 * ((v26 + 56 - a1) >> 3));
        }
      }
      while (v23-- > 2);
      return v37;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 3))
    {
      int64_t v12 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      long long v13 = (long long *)(a1 + 56 * v12);
      int64_t v14 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 56 * v12, (uint64_t)v13 + 56))
      {
        long long v13 = (long long *)((char *)v13 + 56);
        int64_t v12 = v14;
      }
      if ((((uint64_t (*)(long long *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v16 = v7[1];
        __n128 v25 = *v7;
        __n128 v26 = v16;
        __n128 v27 = v7[2];
        uint64_t v28 = v7[3].n128_i64[0];
        do
        {
          __n128 v17 = (__n128 *)v13;
          __n128 v18 = (__n128)*v13;
          long long v19 = v13[1];
          long long v20 = v13[2];
          v7[3].n128_u32[0] = *((_DWORD *)v13 + 12);
          v7[1] = (__n128)v19;
          v7[2] = (__n128)v20;
          *long long v7 = v18;
          if (v9 < v12) {
            break;
          }
          uint64_t v21 = (2 * v12) | 1;
          long long v13 = (long long *)(a1 + 56 * v21);
          uint64_t v22 = 2 * v12 + 2;
          if (v22 < a3)
          {
            if ((*a2)(a1 + 56 * v21, (uint64_t)v13 + 56))
            {
              long long v13 = (long long *)((char *)v13 + 56);
              uint64_t v21 = v22;
            }
          }
          long long v7 = v17;
          int64_t v12 = v21;
        }
        while (!(*a2)((int64_t)v13, (uint64_t)&v25));
        __n128 result = v25;
        __n128 v23 = v26;
        __n128 v24 = v27;
        v17[3].n128_u32[0] = v28;
        v17[1] = v23;
        void v17[2] = v24;
        *__n128 v17 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TGrammarManager2Result const&,TGrammarManager2Result const&),TGrammarManager2Result*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v23 = v4;
    uint64_t v24 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 56 * (v6 >> 1));
    unint64_t v11 = (long long *)(a2 - 56);
    if ((*a3)(v10, (long long *)(a2 - 56)))
    {
      long long v13 = v11[1];
      long long v19 = *v11;
      long long v20 = v13;
      long long v21 = v11[2];
      uint64_t v22 = *((void *)v11 + 6);
      do
      {
        int64_t v14 = v10;
        long long v15 = *v10;
        long long v16 = v10[1];
        long long v17 = v10[2];
        *((_DWORD *)v11 + 12) = *((_DWORD *)v10 + 12);
        v11[1] = v16;
        void v11[2] = v17;
        *unint64_t v11 = v15;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 56 * v9);
        unint64_t v11 = v14;
      }
      while (((*a3)(v10, &v19) & 1) != 0);
      long long v18 = v20;
      *int64_t v14 = v19;
      v14[1] = v18;
      double result = *(double *)&v21;
      v14[2] = v21;
      *((_DWORD *)v14 + 12) = v22;
    }
  }
  return result;
}

uint64_t StartupLatticePostProbParamSpecMgr(void)
{
  uint64_t v0 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v0, (uint64_t)"LatticePostProbDenominator", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sLatticePostProbDenominatorIntHistory);
  uint64_t v1 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v1, (uint64_t)"LatticePostProbAcousticScoreScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sLatticePostProbAcousticScoreScaleIntHistory);
  unint64_t v2 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v2, (uint64_t)"LatticePostProbWordDurationScoreScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sLatticePostProbWordDurationScoreScaleIntHistory);
  uint64_t v3 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v3, (uint64_t)"LatticePostProbLMScoreScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sLatticePostProbLMScoreScaleIntHistory);
  uint64_t v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"LatticePostProbStateWordPenaltyScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sLatticePostProbStateWordPenaltyScaleIntHistory);
  uint64_t v5 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v5, (uint64_t)"LatticePostProbPerWordPenaltyScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sLatticePostProbPerWordPenaltyScaleIntHistory);
  unint64_t v6 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v6, (uint64_t)"LatticePostProbInterWordSilencePenaltyScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sLatticePostProbInterWordSilencePenaltyScaleIntHistory);
  ParamSpecMgr::addParam(qword_26AB82A68, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_26AB82A68, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_26AB82A68, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_26AB82A68, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_26AB82A68, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_26AB82A68, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_26AB82A68, (ParamSpec *)v2);
  long long v7 = (ParamSpecMgr *)qword_26AB82A68;

  return ParamSpecMgr::sortParams(v7);
}

_DWORD *LatticePostProbParamSet::LatticePostProbParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(void *)a1 = &unk_26C4E3430;
  LatticePostProbParamSet::setDefaults((LatticePostProbParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_213F2B594(_Unwind_Exception *a1)
{
  void *v1 = v2;
  DgnString::~DgnString(v3);
  _Unwind_Resume(a1);
}

uint64_t LatticePostProbParamSet::LatticePostProbParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)a1 = &unk_26C4E3430;
  *(_OWORD *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t LatticePostProbParamSet::setDefaults(LatticePostProbParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_DWORD *)this + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A68, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A68, 2, 0, 0, v9, v10, v11, v12);
  *((_DWORD *)this + 12) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A68, 3, 0, 0, v13, v14, v15, v16);
  *((_DWORD *)this + 13) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A68, 4, 0, 0, v17, v18, v19, v20);
  *((_DWORD *)this + 14) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A68, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 15) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A68, 6, 0, 0, v25, v26, v27, v28);
  uint64_t result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A68, 7, 0, 0, v29, v30, v31, v32);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = result;
  return result;
}

uint64_t LatticePostProbParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3 = sizeObject(a1 + 8) + 16 * (a2 != 3);
  uint64_t v4 = 28;
  if (a2 == 3) {
    uint64_t v4 = 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  return v3 + v5;
}

uint64_t LatticePostProbParamSet::getBoolParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      char v8 = 1;
      goto LABEL_10;
    case 2:
      char v8 = 2;
      goto LABEL_10;
    case 3:
      char v8 = 3;
      goto LABEL_10;
    case 4:
      char v8 = 4;
      goto LABEL_10;
    case 5:
      char v8 = 5;
      goto LABEL_10;
    case 6:
      char v8 = 6;
      goto LABEL_10;
    case 7:
      char v8 = 7;
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t LatticePostProbParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[10];
          break;
        case 1:
          uint64_t v9 = (ParamSpecMgr *)qword_26AB82A68;
          int v10 = 1;
          goto LABEL_38;
        case 2:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A68;
          int v12 = 1;
          goto LABEL_40;
        case 3:
          uint64_t v13 = (ParamSpecMgr *)qword_26AB82A68;
          int v14 = 1;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 2:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[11];
          break;
        case 1:
          uint64_t v9 = (ParamSpecMgr *)qword_26AB82A68;
          int v10 = 2;
          goto LABEL_38;
        case 2:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A68;
          int v12 = 2;
          goto LABEL_40;
        case 3:
          uint64_t v13 = (ParamSpecMgr *)qword_26AB82A68;
          int v14 = 2;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 3:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[12];
          break;
        case 1:
          uint64_t v9 = (ParamSpecMgr *)qword_26AB82A68;
          int v10 = 3;
          goto LABEL_38;
        case 2:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A68;
          int v12 = 3;
          goto LABEL_40;
        case 3:
          uint64_t v13 = (ParamSpecMgr *)qword_26AB82A68;
          int v14 = 3;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 4:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[13];
          break;
        case 1:
          uint64_t v9 = (ParamSpecMgr *)qword_26AB82A68;
          int v10 = 4;
          goto LABEL_38;
        case 2:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A68;
          int v12 = 4;
          goto LABEL_40;
        case 3:
          uint64_t v13 = (ParamSpecMgr *)qword_26AB82A68;
          int v14 = 4;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 5:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[14];
          break;
        case 1:
          uint64_t v9 = (ParamSpecMgr *)qword_26AB82A68;
          int v10 = 5;
          goto LABEL_38;
        case 2:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A68;
          int v12 = 5;
          goto LABEL_40;
        case 3:
          uint64_t v13 = (ParamSpecMgr *)qword_26AB82A68;
          int v14 = 5;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 6:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[15];
          break;
        case 1:
          uint64_t v9 = (ParamSpecMgr *)qword_26AB82A68;
          int v10 = 6;
          goto LABEL_38;
        case 2:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A68;
          int v12 = 6;
          goto LABEL_40;
        case 3:
          uint64_t v13 = (ParamSpecMgr *)qword_26AB82A68;
          int v14 = 6;
          goto LABEL_42;
        default:
          goto LABEL_17;
      }
      break;
    case 7:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[16];
          break;
        case 1:
          uint64_t v9 = (ParamSpecMgr *)qword_26AB82A68;
          int v10 = 7;
LABEL_38:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v9, v10, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A68;
          int v12 = 7;
LABEL_40:
          uint64_t v16 = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          uint64_t v13 = (ParamSpecMgr *)qword_26AB82A68;
          int v14 = 7;
LABEL_42:
          uint64_t v17 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_17:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          goto LABEL_18;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
LABEL_18:
      uint64_t result = 0;
      break;
  }
  return result;
}

double LatticePostProbParamSet::getDoubleParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      char v8 = 1;
      goto LABEL_10;
    case 2:
      char v8 = 2;
      goto LABEL_10;
    case 3:
      char v8 = 3;
      goto LABEL_10;
    case 4:
      char v8 = 4;
      goto LABEL_10;
    case 5:
      char v8 = 5;
      goto LABEL_10;
    case 6:
      char v8 = 6;
      goto LABEL_10;
    case 7:
      char v8 = 7;
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

uint64_t LatticePostProbParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      char v8 = 1;
      goto LABEL_10;
    case 2:
      char v8 = 2;
      goto LABEL_10;
    case 3:
      char v8 = 3;
      goto LABEL_10;
    case 4:
      char v8 = 4;
      goto LABEL_10;
    case 5:
      char v8 = 5;
      goto LABEL_10;
    case 6:
      char v8 = 6;
      goto LABEL_10;
    case 7:
      char v8 = 7;
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t LatticePostProbParamSet::getEnumParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      char v8 = 1;
      goto LABEL_10;
    case 2:
      char v8 = 2;
      goto LABEL_10;
    case 3:
      char v8 = 3;
      goto LABEL_10;
    case 4:
      char v8 = 4;
      goto LABEL_10;
    case 5:
      char v8 = 5;
      goto LABEL_10;
    case 6:
      char v8 = 6;
      goto LABEL_10;
    case 7:
      char v8 = 7;
LABEL_10:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void LatticePostProbParamSet::setBoolParameter(LatticePostProbParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
}

void LatticePostProbParamSet::setIntParameter(LatticePostProbParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  switch(a2)
  {
    case 1:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A68, 1, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId) {
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v8, 0, 0, v11, v12, v13, v14);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v21 = "LatticePostProbAcousticScoreScale";
        goto LABEL_33;
      }
      *((_DWORD *)this + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v8;
      break;
    case 2:
      uint64_t v22 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A68, 2, a3, a4, a5, a6, a7, a8);
      if (v22) {
      IntParamSpec::validateValue((IntParamSpec *)v22, v8, 0, 0, v23, v24, v25, v26);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v21 = "LatticePostProbDenominator";
        goto LABEL_33;
      }
      *((_DWORD *)this + 11) = v8;
      break;
    case 3:
      uint64_t v27 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A68, 3, a3, a4, a5, a6, a7, a8);
      if (v27) {
      IntParamSpec::validateValue((IntParamSpec *)v27, v8, 0, 0, v28, v29, v30, v31);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v21 = "LatticePostProbInterWordSilencePenaltyScale";
        goto LABEL_33;
      }
      *((_DWORD *)this + 12) = v8;
      break;
    case 4:
      uint64_t v32 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A68, 4, a3, a4, a5, a6, a7, a8);
      if (v32) {
      IntParamSpec::validateValue((IntParamSpec *)v32, v8, 0, 0, v33, v34, v35, v36);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v21 = "LatticePostProbLMScoreScale";
        goto LABEL_33;
      }
      *((_DWORD *)this + 13) = v8;
      break;
    case 5:
      uint64_t v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A68, 5, a3, a4, a5, a6, a7, a8);
      if (v37) {
      IntParamSpec::validateValue((IntParamSpec *)v37, v8, 0, 0, v38, v39, v40, v41);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v21 = "LatticePostProbPerWordPenaltyScale";
        goto LABEL_33;
      }
      *((_DWORD *)this + 14) = v8;
      break;
    case 6:
      uint64_t v42 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A68, 6, a3, a4, a5, a6, a7, a8);
      if (v42) {
      IntParamSpec::validateValue((IntParamSpec *)v42, v8, 0, 0, v43, v44, v45, v46);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v21 = "LatticePostProbStateWordPenaltyScale";
        goto LABEL_33;
      }
      *((_DWORD *)this + 15) = v8;
      break;
    case 7:
      unint64_t v47 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A68, 7, a3, a4, a5, a6, a7, a8);
      if (v47) {
      IntParamSpec::validateValue((IntParamSpec *)v47, v8, 0, 0, v48, v49, v50, v51);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v21 = "LatticePostProbWordDurationScoreScale";
LABEL_33:
        throwParamSetSetFailed(v21, "int", v15, v16, v17, v18, v19, v20);
      }
      else
      {
        *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v8;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      break;
  }
}

void LatticePostProbParamSet::setDoubleParameter(LatticePostProbParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
}

void LatticePostProbParamSet::setStringParameter(LatticePostProbParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void LatticePostProbParamSet::setEnumParameter(LatticePostProbParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void LatticePostProbParamSet::~LatticePostProbParamSet(LatticePostProbParamSet *this)
{
  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((LatticePostProbParamSet *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((LatticePostProbParamSet *)((char *)this + 8));

  JUMPOUT(0x216698730);
}

uint64_t getPropCheckTokenExistence(void)
{
  {
    operator new();
  }
  return getPropCheckTokenExistence(void)::p;
}

void sub_213F2CB20(_Unwind_Exception *a1)
{
}

void TGlobalParamManager::TGlobalParamManager(TGlobalParamManager *this, TLocaleInfo *a2)
{
  TParamManager::TParamManager(this, 0, a2);
  *uint64_t v3 = &unk_26C4E26D0;
  uint64_t v4 = (TParam *)(v3 + 18);
  TBoolParam::TBoolParam((uint64_t)(v3 + 18), (uint64_t)"C", (uint64_t)"A", 0, 0, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TBoolParam::TBoolParam((uint64_t)this + 392, (uint64_t)"C", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TBoolParam::TBoolParam((uint64_t)this + 640, (uint64_t)"C", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TBoolParam::TBoolParam((uint64_t)this + 888, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TBoolParam::TBoolParam((uint64_t)this + 1136, (uint64_t)"C", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TBoolParam::TBoolParam((uint64_t)this + 1384, (uint64_t)"D", (uint64_t)"D", 32, 1, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TBoolParam::TBoolParam((uint64_t)this + 1632, (uint64_t)"D", (uint64_t)"D", 288, 1, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TStringParam::TStringParam((char *)this + 1880, "D", "D", 32, &dword_2140A46B0, "1", &dword_2140A46B0);
  TStringParam::TStringParam((char *)this + 3256, "D", "D", 288, &dword_2140A46B0, "1", &dword_2140A46B0);
  TIntParam::TIntParam((TGlobalParamManager *)((char *)this + 4632), (uint64_t)"D", (uint64_t)"D", 32, -1, 10, 5, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TIntParam::TIntParam((TGlobalParamManager *)((char *)this + 4984), (uint64_t)"D", (uint64_t)"D", 288, -1, 10, 5, (uint64_t)"1", (uint64_t)&dword_2140A46B0);
  TStringParam::TStringParam((char *)this + 5336, "D");
  TStringParam::TStringParam((char *)this + 6712, "D");
  TFloatParam::TFloatParam((uint64_t)this + 8088, (uint64_t)"D", (uint64_t)"D", 32, (uint64_t)"1", (uint64_t)&dword_2140A46B0, 0.0);
  TFloatParam::TFloatParam((uint64_t)this + 8624, (uint64_t)"D", (uint64_t)"D", 288, (uint64_t)"1", (uint64_t)&dword_2140A46B0, 0.0);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 392));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 640));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 888));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 1136));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 1384));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 1632));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 1880));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 3256));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 4632));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 4984));
  MEMORY[0x216698480]((char *)this + 5376, "D");
  MEMORY[0x216698480]((char *)this + 5400, "1");
  MEMORY[0x216698480]((char *)this + 5424, &dword_2140A46B0);
  *((void *)this + 681) |= 0x20uLL;
  std::vector<std::wstring>::vector(&v16, 4uLL);
  std::vector<std::wstring>::vector(&v15, 4uLL);
  uint64_t v5 = 0;
  unint64_t v6 = (const __int32 *)"a";
  do
  {
    MEMORY[0x216698480](&v16.__begin_[v5], v6);
    v6 += wcslen(v6) + 1;
    ++v5;
  }
  while (v5 != 4);
  TStringParam::setAllowables((uint64_t)this + 5336, (uint64_t)&v16, 0, 0);
  TStringParam::setOriginal((void *)this + 667, 0, &dword_2140A46B0);
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 5336));
  uint64_t v17 = &v15;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  v15.__begin_ = (std::vector<std::wstring>::pointer)&v16;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  MEMORY[0x216698480]((char *)this + 6752, "D");
  MEMORY[0x216698480]((char *)this + 6776, "1");
  MEMORY[0x216698480]((char *)this + 6800, &dword_2140A46B0);
  *((void *)this + 853) |= 0x120uLL;
  std::vector<std::wstring>::vector(&v16, 4uLL);
  std::vector<std::wstring>::vector(&v15, 4uLL);
  uint64_t v7 = 0;
  char v8 = (const __int32 *)"a";
  do
  {
    MEMORY[0x216698480](&v16.__begin_[v7], v8);
    v8 += wcslen(v8) + 1;
    ++v7;
  }
  while (v7 != 4);
  TStringParam::setAllowables((uint64_t)this + 6712, (uint64_t)&v16, 0, 0);
  TStringParam::setOriginal((void *)this + 839, 0, &dword_2140A46B0);
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 6712));
  uint64_t v17 = &v15;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  v15.__begin_ = (std::vector<std::wstring>::pointer)&v16;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 8088));
  TParamManager::add(this, (TGlobalParamManager *)((char *)this + 8624));
  *((void *)this + 17) = 1;
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v4);
  g_bCrashOnError = *((unsigned char *)this + TParam::getValidConfig(v4, ActiveConfigHandle) + 296);
  uint64_t v10 = TParam::getActiveConfigHandle((TGlobalParamManager *)((char *)this + 392));
  g_bCheckVocCompatibility = *((unsigned char *)this
                             + TParam::getValidConfig((TGlobalParamManager *)((char *)this + 392), v10)
                             + 544);
  uint64_t v11 = TParam::getActiveConfigHandle((TGlobalParamManager *)((char *)this + 888));
  g_bLogMemoryLeaks = *((unsigned char *)this + TParam::getValidConfig((TGlobalParamManager *)((char *)this + 888), v11) + 1040);
  uint64_t v12 = TParam::getActiveConfigHandle((TGlobalParamManager *)((char *)this + 1136));
  g_bCheckLexicounint64_t n = *((unsigned char *)this + TParam::getValidConfig((TGlobalParamManager *)((char *)this + 1136), v12) + 1288);
  uint64_t v13 = (unsigned char *)getPropCheckTokenExistence();
  uint64_t v14 = TParam::getActiveConfigHandle((TGlobalParamManager *)((char *)this + 640));
  v13[8] = *((unsigned char *)this + TParam::getValidConfig((TGlobalParamManager *)((char *)this + 640), v14) + 792);
  (*(void (**)(unsigned char *))(*(void *)v13 + 16))(v13);
}

void sub_213F2D20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, char *a18, uint64_t a19, uint64_t a20,char a21)
{
  a18 = &a21;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  TParam::~TParam(a10);
  TParam::~TParam(a11);
  TStringParam::~TStringParam(v28);
  TStringParam::~TStringParam(v27);
  TParam::~TParam(a12);
  TParam::~TParam(a13);
  TStringParam::~TStringParam(a14);
  TStringParam::~TStringParam(a15);
  TBoolParam::~TBoolParam(a16);
  TBoolParam::~TBoolParam(a17);
  TBoolParam::~TBoolParam(v26);
  TBoolParam::~TBoolParam(v25);
  TBoolParam::~TBoolParam(v24);
  TBoolParam::~TBoolParam(v23);
  TBoolParam::~TBoolParam(v22);
  TParamManager::~TParamManager(v21);
  _Unwind_Resume(a1);
}

uint64_t TGlobalParamManager::notifyChange(uint64_t this, const TParam *a2)
{
  uint64_t v3 = this;
  if ((const TParam *)(this + 144) == a2)
  {
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(a2);
    this = TParam::getValidConfig(a2, ActiveConfigHandle);
    char v8 = *(unsigned char *)(v3 + this + 296);
    char v9 = &g_bCrashOnError;
LABEL_13:
    *char v9 = v8;
    return this;
  }
  if ((const TParam *)(this + 392) == a2)
  {
    uint64_t v10 = TParam::getActiveConfigHandle(a2);
    this = TParam::getValidConfig(a2, v10);
    char v8 = *(unsigned char *)(v3 + this + 544);
    char v9 = &g_bCheckVocCompatibility;
    goto LABEL_13;
  }
  if ((const TParam *)(this + 888) == a2)
  {
    uint64_t v11 = TParam::getActiveConfigHandle(a2);
    this = TParam::getValidConfig(a2, v11);
    char v8 = *(unsigned char *)(v3 + this + 1040);
    char v9 = &g_bLogMemoryLeaks;
    goto LABEL_13;
  }
  if ((const TParam *)(this + 1136) == a2)
  {
    uint64_t v12 = TParam::getActiveConfigHandle(a2);
    this = TParam::getValidConfig(a2, v12);
    char v8 = *(unsigned char *)(v3 + this + 1288);
    char v9 = &g_bCheckLexicon;
    goto LABEL_13;
  }
  if ((const TParam *)(this + 640) == a2)
  {
    uint64_t v4 = (unsigned char *)getPropCheckTokenExistence();
    uint64_t v5 = TParam::getActiveConfigHandle(a2);
    v4[8] = *(unsigned char *)(v3 + TParam::getValidConfig(a2, v5) + 792);
    unint64_t v6 = *(uint64_t (**)(unsigned char *))(*(void *)v4 + 16);
    return v6(v4);
  }
  return this;
}

void TGlobalParamManager::~TGlobalParamManager(void **this)
{
  TGlobalParamManager::~TGlobalParamManager(this);

  JUMPOUT(0x216698730);
}

{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  *this = &unk_26C4E26D0;
  TParam::~TParam(this + 1078);
  TParam::~TParam(this + 1011);
  this[839] = &unk_26C4DFCE0;
  uint64_t v13 = this + 1008;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = this + 1005;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = this + 1002;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (long long i = 0; i != -144; i -= 3)
  {
    if (SHIBYTE(this[i + 1001]) < 0) {
      operator delete(this[i + 999]);
    }
  }
  TParam::~TParam(this + 839);
  this[667] = &unk_26C4DFCE0;
  uint64_t v13 = this + 836;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = this + 833;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = this + 830;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (unint64_t j = 0; j != -144; j -= 3)
  {
    if (SHIBYTE(this[j + 829]) < 0) {
      operator delete(this[j + 827]);
    }
  }
  TParam::~TParam(this + 667);
  TParam::~TParam(this + 623);
  TParam::~TParam(this + 579);
  this[407] = &unk_26C4DFCE0;
  uint64_t v13 = this + 576;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = this + 573;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = this + 570;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (unint64_t k = 0; k != -144; k -= 3)
  {
    if (SHIBYTE(this[k + 569]) < 0) {
      operator delete(this[k + 567]);
    }
  }
  TParam::~TParam(this + 407);
  this[235] = &unk_26C4DFCE0;
  uint64_t v13 = this + 404;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = this + 401;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = this + 398;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (unint64_t m = 0; m != -144; m -= 3)
  {
    if (SHIBYTE(this[m + 397]) < 0) {
      operator delete(this[m + 395]);
    }
  }
  TParam::~TParam(this + 235);
  unint64_t v6 = 0;
  this[204] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v6 + 234]) < 0) {
      operator delete(this[v6 + 232]);
    }
    v6 -= 3;
  }
  while (v6 != -6);
  TParam::~TParam(this + 204);
  uint64_t v7 = 0;
  this[173] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v7 + 203]) < 0) {
      operator delete(this[v7 + 201]);
    }
    v7 -= 3;
  }
  while (v7 != -6);
  TParam::~TParam(this + 173);
  char v8 = 0;
  this[142] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v8 + 172]) < 0) {
      operator delete(this[v8 + 170]);
    }
    v8 -= 3;
  }
  while (v8 != -6);
  TParam::~TParam(this + 142);
  char v9 = 0;
  this[111] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v9 + 141]) < 0) {
      operator delete(this[v9 + 139]);
    }
    v9 -= 3;
  }
  while (v9 != -6);
  TParam::~TParam(this + 111);
  uint64_t v10 = 0;
  this[80] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v10 + 110]) < 0) {
      operator delete(this[v10 + 108]);
    }
    v10 -= 3;
  }
  while (v10 != -6);
  TParam::~TParam(this + 80);
  uint64_t v11 = 0;
  this[49] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v11 + 79]) < 0) {
      operator delete(this[v11 + 77]);
    }
    v11 -= 3;
  }
  while (v11 != -6);
  TParam::~TParam(this + 49);
  uint64_t v12 = 0;
  this[18] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v12 + 48]) < 0) {
      operator delete(this[v12 + 46]);
    }
    v12 -= 3;
  }
  while (v12 != -6);
  TParam::~TParam(this + 18);
  TParamManager::~TParamManager((TParamManager *)this);
}

uint64_t TChartInfo::TChartInfo(uint64_t result, void *a2, uint64_t a3)
{
  *(void *)uint64_t result = 0;
  *(unsigned char *)(result + 4DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  uint64_t v3 = a2[3];
  *(void *)(result + 408) = v3;
  *(void *)(result + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a3;
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 != 1)
  {
    uint64_t v5 = result - 8;
    do
    {
      if (*(unsigned char *)(*(void *)(*(void *)(result + 408) + 24) + v4 - 2))
      {
        *(void *)(v5 + 8 * v4) = 0;
      }
      else
      {
        *(void *)(v5 + 8 * v4) = a2[7];
        a2 = (void *)a2[6];
      }
      --v4;
    }
    while (v4 != 1);
  }
  return result;
}

uint64_t TParser::TParser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C4E48B8;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = &unk_26C4E48E0;
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  uint64_t v7 = (TAllocator *)(a1 + 48);
  TAllocator::TAllocator((TAllocator *)(a1 + 48), 2048);
  *(_OWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0u;
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0u;
  *(_OWORD *)(a1 + 12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 10;
  (*(void (**)(uint64_t))(*(void *)(a1 + 16) + 16))(v6);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a2;
  *(void *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a3;
  if (*(void *)(a1 + 48) >= 0x801uLL) {
    TAllocator::clear(v7);
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  return a1;
}

void sub_213F2DB5C(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[20];
  if (v5)
  {
    v1[21] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)v1[17];
  if (v6)
  {
    v1[18] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)v1[14];
  if (v7)
  {
    v1[15] = v7;
    operator delete(v7);
  }
  char v8 = *v3;
  if (*v3)
  {
    v1[12] = v8;
    operator delete(v8);
  }
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

void TParser::~TParser(TParser *this)
{
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  TAllocator::clear((TParser *)((char *)this + 48));
}

void *TParser::getCell(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = a1 + 88;
  if (a3 >= (*(void *)(a1 + 96) - v6) >> 3)
  {
    std::vector<TPItnTagHandle_fake **>::reserve((void **)(a1 + 88), 2 * (a3 + 1));
    uint64_t v10 = 0;
    std::vector<TSegment const*>::resize(v7, a3 + 1, &v10);
    goto LABEL_7;
  }
  uint64_t result = *(void **)(v6 + 8 * a3);
  if (!result)
  {
LABEL_7:
    uint64_t result = (void *)TAllocator::allocate((TAllocator *)(a1 + 48), 32);
    uint64_t v9 = *(void *)(*(void *)(a1 + 88) + 8 * a3);
    void *result = a2;
    result[1] = 0;
    result[2] = 0;
    result[3] = v9;
    *(void *)(*(void *)(a1 + 88) + 8 * a3) = result;
    return result;
  }
  while (*result != a2)
  {
    uint64_t result = (void *)result[3];
    if (!result) {
      goto LABEL_7;
    }
  }
  return result;
}

void *TParser::addOpenProduction(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  if (v3) {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 16) + 8 * a2[4]);
  }
  else {
    uint64_t v4 = a2 + 6;
  }
  uint64_t result = TParser::getCell(a1, *v4, a2[2] + a2[1]);
  *a2 = result[1];
  result[1] = a2;
  return result;
}

void TParser::addClosedProduction(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40) && *(void *)(a2 + 24))
  {
    TChartInfo::TChartInfo((uint64_t)__p, (void *)a2, a1 + 48);
    (*(void (**)(void, void **))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), __p);
    if (v36) {
      return;
    }
    *(void **)(a2 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = __p[0];
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    uint64_t v5 = (uint64_t *)(*(void *)(v4 + 16) + 8 * *(void *)(a2 + 32));
  }
  else {
    uint64_t v5 = (uint64_t *)(a2 + 48);
  }
  Cell = TParser::getCell(a1, *v5, *(void *)(a2 + 8));
  uint64_t v7 = (uint64_t *)Cell[2];
  if (v7)
  {
    char v8 = 0;
    unint64_t v9 = 0;
    do
    {
      unint64_t v10 = v7[2];
      unint64_t v11 = *(void *)(a2 + 16);
      if (v10 < v11) {
        break;
      }
      if (v10 <= v11)
      {
        if (v7[5] == *(void *)(a2 + 40)
          || (uint64_t v12 = *(void *)(a1 + 40)) != 0
          && ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v12 + 32))(v12, v7, a2) & 1) != 0)
        {
          if (!*(unsigned char *)(a1 + 8)) {
            return;
          }
          uint64_t v20 = *(void *)(a2 + 8);
          uint64_t v21 = *(void *)(a2 + 16);
          uint64_t v22 = *(void *)(a2 + 24);
          if (v22) {
            uint64_t v23 = *(void *)(v22 + 16) + 8 * *(void *)(a2 + 32);
          }
          else {
            uint64_t v23 = a2 + 48;
          }
          loggableUnicode(*(unsigned int **)(*(void *)v23 + 16), __p);
          if (v35 >= 0) {
            uint64_t v33 = __p;
          }
          else {
            uint64_t v33 = (void **)__p[0];
          }
          tknPrintf("Warning: ignoring duplicate parse for token range [%llu,%llu] with symbol %s (rules %llu and %llu)\n", v29, v30, v31, v32, v20, v21, v33, **(void **)(a2 + 24), *(void *)v7[3]);
          goto LABEL_46;
        }
        ++v9;
      }
      else
      {
        char v8 = v7;
      }
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
    if (v9 > *(void *)(a1 + 24))
    {
      if (!*(unsigned char *)(a1 + 8)) {
        return;
      }
      uint64_t v13 = *(void *)(a2 + 24);
      if (v13) {
        uint64_t v14 = *(void *)(v13 + 16) + 8 * *(void *)(a2 + 32);
      }
      else {
        uint64_t v14 = a2 + 48;
      }
      loggableUnicode(*(unsigned int **)(*(void *)v14 + 16), __p);
      if (v35 >= 0) {
        uint64_t v28 = __p;
      }
      else {
        uint64_t v28 = (void **)__p[0];
      }
      tknPrintf("Warning: grammar over-generating symbol %s for token range [%llu,%llu]. Ignoring parse. (rule %llu)\n", v24, v25, v26, v27, v28, *(void *)(a2 + 8), *(void *)(a2 + 16), **(void **)(a2 + 24));
LABEL_46:
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      return;
    }
    if (v8) {
      goto LABEL_24;
    }
  }
  char v8 = Cell + 2;
LABEL_24:
  *(void *)a2 = *v8;
  *char v8 = a2;
  for (long long i = (void *)Cell[1]; i; long long i = (void *)*i)
  {
    std::vector<std::wstring> v16 = (void *)TAllocator::allocate((TAllocator *)(a1 + 48), 64);
    uint64_t v17 = i[3];
    v16[3] = v17;
    uint64_t v18 = i[4] + 1;
    while (*(unsigned __int8 *)(*(void *)(v17 + 24) + v18++))
      ;
    v16[4] = v18 - 1;
    void *v16 = 0;
    v16[1] = i[1];
    v16[2] = *(void *)(a2 + 16) + i[2];
    v16[6] = i;
    v16[7] = a2;
    v16[5] = 0;
    ++*(void *)(a1 + 184);
    if (v17 && *(void *)(v17 + 8) != v18) {
      TParser::addOpenProduction(a1, v16);
    }
    else {
      TParser::addClosedProduction(a1, v16);
    }
  }
  TParser::startNewProductions((void *)a1, (void *)a2);
}

void sub_213F2E05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *TParser::startNewProductions(void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[3];
  if (v4) {
    uint64_t v5 = (void **)(*(void *)(v4 + 16) + 8 * a2[4]);
  }
  else {
    uint64_t v5 = (void **)(a2 + 6);
  }
  uint64_t v6 = (void *)**v5;
  if (!v6) {
    return result;
  }
  do
  {
    uint64_t v7 = *(uint64_t **)(v3[11] + 8 * a2[1]);
    if (!v7) {
      goto LABEL_20;
    }
    while (1)
    {
      uint64_t v8 = *v7;
      if (v7[1])
      {
        unint64_t v9 = (void *)v3[4];
        if ((*(unsigned char *)(v8 + 8) & 4) == 0) {
          break;
        }
      }
      else
      {
        unint64_t v9 = (void *)v3[4];
      }
      if (v8 == v9[1]) {
        break;
      }
LABEL_12:
      uint64_t v7 = (uint64_t *)v7[3];
      if (!v7) {
        goto LABEL_20;
      }
    }
    unint64_t v10 = *(void *)(v8 + 24) + v9[8] * *(void *)(*(void *)(v6[2] + 8 * v6[1] - 8) + 24);
    if (((*(void *)(v9[15] + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v11 = TAllocator::allocate((TAllocator *)(v3 + 6), 64);
    uint64_t v12 = 0;
    *(void *)(v11 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v6;
    uint64_t v13 = v6[3];
    uint64_t v14 = 1;
    do
    {
      uint64_t v15 = v14;
      int v16 = *(unsigned __int8 *)(v13 + v12++);
      ++v14;
    }
    while (v16);
    while (*(unsigned __int8 *)(v13 + v15++))
      ;
    *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v15 - 1;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 1);
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
    *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
    *(void *)(v11 + 56) = a2;
    ++v3[23];
    if (v6[1] == v15) {
      uint64_t result = (void *)TParser::addClosedProduction(v3, v11);
    }
    else {
      uint64_t result = TParser::addOpenProduction((uint64_t)v3, (void *)v11);
    }
LABEL_20:
    uint64_t v6 = (void *)v6[4];
  }
  while (v6);
  return result;
}

uint64_t TParser::getAllProductions(void *a1, uint64_t a2)
{
  ++a1[25];
  std::vector<TItnRule *>::resize((uint64_t)(a1 + 11), 0);
  Cell = TParser::getCell((uint64_t)a1, *(void *)(a1[4] + 8), 0);
  uint64_t v5 = a1[11];
  if (a1[12] != v5)
  {
    unint64_t v6 = 0;
    do
    {
      if (*(void *)(v5 + 8 * v6))
      {
        std::vector<TItnRule *>::resize((uint64_t)(a1 + 14), 0);
        std::vector<unsigned long>::resize((uint64_t)(a1 + 17), 0);
        std::vector<TItnRule *>::resize((uint64_t)(a1 + 20), 0);
        (*(void (**)(uint64_t, unint64_t, void *, void *, void *, void *))(*(void *)a2 + 16))(a2, v6, a1 + 14, a1 + 17, a1 + 20, a1 + 6);
        if (a1[14] != a1[15])
        {
          unint64_t v7 = 0;
          do
          {
            uint64_t v8 = (void *)TAllocator::allocate((TAllocator *)(a1 + 6), 64);
            uint64_t v9 = *(void *)(a1[14] + 8 * v7);
            v8[2] = *(void *)(a1[17] + 8 * v7);
            v8[3] = 0;
            v8[4] = 0;
            v8[5] = 0;
            *uint64_t v8 = 0;
            v8[1] = v6;
            v8[6] = v9;
            v8[7] = 0;
            v8[5] = *(void *)(a1[20] + 8 * v7);
            ++a1[23];
            TParser::addClosedProduction((uint64_t)a1, (uint64_t)v8);
            ++v7;
            uint64_t v10 = a1[15] - a1[14];
          }
          while (v7 < v10 >> 3);
          a1[24] += v10 >> 3;
        }
      }
      ++v6;
      uint64_t v5 = a1[11];
    }
    while (v6 < (a1[12] - v5) >> 3);
  }
  return Cell[2];
}

uint64_t *TParser::logChart(uint64_t *result, void *a2)
{
  if (result[12] != result[11])
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": terminals\n", 12);
      for (long long i = *(void **)(v3[11] + 8 * v4); i; long long i = (void *)i[3])
      {
        if ((*(unsigned char *)(*i + 8) & 4) != 0)
        {
          for (unint64_t j = (void *)i[2]; j; unint64_t j = (void *)*j)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
            TProduction::log((uint64_t)j, v3[5], a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": closed productions\n", 21);
      for (unint64_t k = *(void **)(v3[11] + 8 * v4); k; unint64_t k = (void *)k[3])
      {
        if ((*(unsigned char *)(*k + 8) & 4) == 0)
        {
          for (unint64_t m = (void *)k[2]; m; unint64_t m = (void *)*m)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
            TProduction::log((uint64_t)m, v3[5], a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": open productions\n", 19);
      for (uint64_t n = *(void *)(v3[11] + 8 * v4); n; uint64_t n = *(void *)(n + 24))
      {
        for (ilong long i = *(void **)(n + 8); ii; ilong long i = (void *)*ii)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
          TProduction::log((uint64_t)ii, v3[5], a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        }
      }
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"----\n", 5);
      ++v4;
    }
    while (v4 < (v3[12] - v3[11]) >> 3);
  }
  return result;
}

void *TProduction::log(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"span ", 5);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    unint64_t v7 = operator<<(a3, *(unsigned int **)(*(void *)(*(void *)(*(void *)(a1 + 24) + 16)+ 8 * *(void *)(*(void *)(a1 + 24) + 8)- 8)+ 16));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" =", 2);
    if (*(void *)(*(void *)(a1 + 24) + 8) != 1)
    {
      unint64_t v8 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" ", 1);
        if (v8 == *(void *)(a1 + 32)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)". ", 2);
        }
        uint64_t v9 = *(void *)(a1 + 24);
        if (*(unsigned char *)(*(void *)(v9 + 24) + v8))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"[", 1);
          uint64_t v9 = *(void *)(a1 + 24);
        }
        uint64_t v10 = *(void *)(*(void *)(v9 + 16) + 8 * v8);
        if ((*(unsigned char *)(v10 + 8) & 4) != 0)
        {
          char v23 = 34;
          uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)&v23, 1);
          uint64_t v12 = operator<<(v11, *(unsigned int **)(*(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 8 * v8) + 16));
          char v24 = 34;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v24, 1);
        }
        else
        {
          operator<<(a3, *(unsigned int **)(v10 + 16));
        }
        uint64_t v13 = *(void *)(a1 + 24);
        if (*(unsigned char *)(*(void *)(v13 + 24) + v8))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"]", 1);
          uint64_t v13 = *(void *)(a1 + 24);
        }
        ++v8;
      }
      while (v8 < *(void *)(v13 + 8) - 1);
    }
    BOOL v14 = 1;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" ", 1);
    uint64_t v15 = *(void *)(a1 + 24);
    if (v15) {
      BOOL v14 = *(void *)(a1 + 32) + 1 == *(void *)(v15 + 8);
    }
    if (a2)
    {
      if (v14) {
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 24))(a2, a1, a3);
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" // line ", 9);
    return (void *)std::ostream::operator<<();
  }
  else
  {
    char v21 = 96;
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)&v21, 1);
    uint64_t v18 = *(void *)(a1 + 24);
    if (v18) {
      uint64_t v19 = *(void *)(v18 + 16) + 8 * *(void *)(a1 + 32);
    }
    else {
      uint64_t v19 = a1 + 48;
    }
    uint64_t v20 = operator<<(v17, *(unsigned int **)(*(void *)v19 + 16));
    char v22 = 96;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v22, 1);
  }
}

void TParser::logTree(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(void *)(a4 + 8)) {
      goto LABEL_9;
    }
    uint64_t v12 = *(const char **)a4;
  }
  else
  {
    uint64_t v12 = (const char *)a4;
    if (!*(unsigned char *)(a4 + 23)) {
      goto LABEL_9;
    }
  }
  size_t v13 = strlen(v12);
  BOOL v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"|\n", 2);
  uint64_t v15 = (const char *)a4;
  if (*(char *)(a4 + 23) < 0) {
    uint64_t v15 = *(const char **)a4;
  }
  size_t v16 = strlen(v15);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"|", 1);
LABEL_9:
  if ((*(unsigned char *)(a3 + 8) & 4) != 0)
  {
    uint64_t v29 = operator<<(v28, *(unsigned int **)(a3 + 16));
    if (a2) {
      goto LABEL_11;
    }
  }
  else
  {
    operator<<(a6, *(unsigned int **)(a3 + 16));
    if (a2)
    {
LABEL_11:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)" ", 1);
      uint64_t v18 = *(void *)(a1 + 40);
      if (v18) {
        (*(void (**)(uint64_t, void *, void *))(*(void *)v18 + 24))(v18, a2, a6);
      }
      if (a2[3])
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)" // line ", 9);
        std::ostream::operator<<();
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"\n", 1);
      uint64_t v19 = (void *)a2[3];
      if (v19)
      {
        memset(v32, 0, sizeof(v32));
        uint64_t v20 = v19[1];
        unint64_t v21 = v20 - 1;
        if (v20 == 1)
        {
          if (a5) {
            uint64_t v30 = "|  ";
          }
          else {
            uint64_t v30 = "   ";
          }
          std::string::append((std::string *)a4, v30);
        }
        else
        {
          uint64_t v22 = v19[3];
          uint64_t v23 = v20 - 2;
          do
          {
            *((void *)v32 + v23) = 0;
            if (!*(unsigned char *)(v22 + v23))
            {
              *((void *)v32 + v23) = a2[7];
              a2 = (void *)a2[6];
            }
            --v23;
          }
          while (v23 != -1);
          if (a5) {
            char v24 = "|  ";
          }
          else {
            char v24 = "   ";
          }
          std::string::append((std::string *)a4, v24);
          uint64_t v25 = 0;
          do
          {
            uint64_t v26 = *((void *)v32 + v25);
            uint64_t v27 = *(void *)(v19[2] + 8 * v25);
            if (*(char *)(a4 + 23) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
            }
            else {
              std::string __p = *(std::string *)a4;
            }
            TParser::logTree(a1, v26, v27, &__p, ++v25 < v21, a6);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          while (v21 != v25);
        }
      }
      return;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"? // skipped", 12);

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"\n", 1);
}

void sub_213F2EB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void TParser::logTree(uint64_t a1, void *a2, void *a3)
{
  if (a2)
  {
    uint64_t v6 = a2[3];
    if (v6) {
      unint64_t v7 = (uint64_t *)(*(void *)(v6 + 16) + 8 * a2[4]);
    }
    else {
      unint64_t v7 = a2 + 6;
    }
    uint64_t v8 = *v7;
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    TParser::logTree(a1, a2, v8, (uint64_t)__p, 0, a3);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_213F2EC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MrecInitModule_netmgr_net(void)
{
  if (!gParDebugBest)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugBest", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugBest = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugBest);
  }
  if (!gParDebugTrueBestPelThreshScore)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugTrueBestPelThreshScore", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDebugTrueBestPelThreshScore = (uint64_t)v3;
    unint64_t v4 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v4, (GlobalParam **)&gParDebugTrueBestPelThreshScore);
  }
}

uint64_t BestData::newOrTiedBestNode(uint64_t this, int a2, const Node *a3, HmmNet *a4)
{
  if (*(_DWORD *)(this + 32) != a2 || *((unsigned __int16 *)a3 + 11) < *(unsigned __int16 *)(this + 22))
  {
    *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a2;
    uint64_t v4 = *(void *)a3;
    *(_DWORD *)(this + 8) = *((_DWORD *)a3 + 2);
    *(void *)this = v4;
    uint64_t v5 = *(void *)((char *)a3 + 12);
    *(_DWORD *)(this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *((_DWORD *)a3 + 5);
    *(void *)(this + 12) = v5;
    *(void *)(this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = a4;
  }
  return this;
}

uint64_t NetStats::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  else {
    return 100;
  }
}

double NetStats::resetStats(NetStats *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  return result;
}

double NetStats::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = *(_OWORD *)(a2 + 72);
  double result = *(double *)(a2 + 88);
  *(double *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = result;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(void *)(a2 + 96);
  return result;
}

int32x2_t NetStats::operator-=(uint64_t a1, uint64_t a2)
{
  *(int32x2_t *)a1 = vsub_s32(*(int32x2_t *)a1, *(int32x2_t *)a2);
  *(_DWORD *)(a1 + 8) -= *(_DWORD *)(a2 + 8);
  *(int64x2_t *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = vsubq_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a2 + 16));
  *(void *)(a1 + 32) -= *(void *)(a2 + 32);
  *(int32x4_t *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = vsubq_s32(*(int32x4_t *)(a1 + 40), *(int32x4_t *)(a2 + 40));
  *(int32x4_t *)(a1 + 56) = vsubq_s32(*(int32x4_t *)(a1 + 56), *(int32x4_t *)(a2 + 56));
  *(int32x4_t *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = vsubq_s32(*(int32x4_t *)(a1 + 72), *(int32x4_t *)(a2 + 72));
  int32x2_t result = vsub_s32(*(int32x2_t *)(a1 + 88), *(int32x2_t *)(a2 + 88));
  *(int32x2_t *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = result;
  *(void *)(a1 + 96) -= *(void *)(a2 + 96);
  return result;
}

uint64_t NetMgr::NetMgr(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  *(_DWORD *)(a1 + 4) = *a4;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)(a1 + 40), 0);
  int v7 = *a4;
  HistoryMgr::HistoryMgr(a1 + 56, &v7);
  *(void *)(a1 + 192) = 0x100000001;
  *(_DWORD *)(a1 + 20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1310740000;
  *(void *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 212) = -65536;
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(_WORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 20000;
  *(_OWORD *)(a1 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = xmmword_2140A58E0;
  *(void *)(a1 + 24pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 5629499534213140000;
  *(void *)(a1 + 256) = 0x100000001;
  *(_DWORD *)(a1 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 1310740000;
  *(_DWORD *)(a1 + 276) = -65536;
  *(void *)(a1 + 268) = 0;
  *(void *)(a1 + 28pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_WORD *)(a1 + 312) = 20000;
  *(_OWORD *)(a1 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = xmmword_2140A58E0;
  *(void *)(a1 + 304) = 5629499534213140000;
  *(_OWORD *)(a1 + 3025DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 302544) = 0u;
  *(_OWORD *)(a1 + 30256pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 302512) = 0u;
  *(_OWORD *)(a1 + 302528) = 0u;
  *(_OWORD *)(a1 + 30248pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 3024DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  *(_DWORD *)(a1 + 3026DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0;
  *(_OWORD *)(a1 + 302656) = 0u;
  *(_OWORD *)(a1 + 3026DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 3026DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 30264pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 302592) = 0u;
  *(_OWORD *)(a1 + 302608) = 0u;
  *(_OWORD *)(a1 + 3026DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  *(_OWORD *)(a1 + 302712) = 0u;
  *(_OWORD *)(a1 + 302728) = 0u;
  *(_OWORD *)(a1 + 302744) = 0u;
  *(_OWORD *)(a1 + 30276pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 302776) = 0u;
  *(_WORD *)(a1 + 302792) = 0;
  *(_WORD *)(a1 + 302794) = 257;
  *(void *)(a1 + 3027DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0x100000001;
  *(_DWORD *)(a1 + 302804) = 1310740000;
  *(_WORD *)(a1 + 302818) = -1;
  *(_WORD *)(a1 + 3028DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + 302808) = 0;
  *(_OWORD *)(a1 + 302904) = 0u;
  *(_OWORD *)(a1 + 30292pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 3028DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 3028DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0u;
  *(_OWORD *)(a1 + 30284pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 302856) = 0u;
  *(_OWORD *)(a1 + 3028DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::DgnIdFactory(a1 + 302936);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  return a1;
}

void sub_213F2F068(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302920);
  DgnIArray<Utterance *>::~DgnIArray(v3 + 302904);
  DgnIArray<Utterance *>::~DgnIArray(v3 + 302888);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302872);
  DgnIArray<Utterance *>::~DgnIArray(v3 + 302856);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302840);
  DgnIArray<Utterance *>::~DgnIArray(v7);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302560);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302544);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302528);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302512);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3 + 302496);
  DgnIArray<Utterance *>::~DgnIArray(v4);
  HistoryMgr::~HistoryMgr(v2);
  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

void NetMgr::~NetMgr(NetMgr *this)
{
}

void NetMgr::printSize(NetMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 534, (DgnString *)&v282);
  if (v283) {
    size_t v16 = (char *)v282;
  }
  else {
    size_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v282);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 535, (DgnString *)&v282);
  if (v283) {
    uint64_t v26 = (char *)v282;
  }
  else {
    uint64_t v26 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 536, (DgnString *)&v282);
  if (v283) {
    uint64_t v31 = (char *)v282;
  }
  else {
    uint64_t v31 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v32 = 4;
  }
  else {
    uint64_t v32 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 537, (DgnString *)&v282);
  if (v283) {
    uint64_t v37 = (char *)v282;
  }
  else {
    uint64_t v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v37, v32, v32, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v32;
  *a5 += v32;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 4;
  }
  else {
    uint64_t v38 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 538, (DgnString *)&v282);
  if (v283) {
    uint64_t v43 = (char *)v282;
  }
  else {
    uint64_t v43 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v43, v38, v38, 0);
  uint64_t v278 = a3;
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v38;
  *a5 += v38;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v44 = 4;
  }
  else {
    uint64_t v44 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 539, (DgnString *)&v282);
  if (v283) {
    uint64_t v49 = (char *)v282;
  }
  else {
    uint64_t v49 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v49, v44, v44, 0);
  uint64_t v279 = (a3 + 1);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v44;
  *a5 += v44;
  uint64_t v50 = (unsigned int *)this;
  uint64_t v51 = (char *)this + 40;
  uint64_t v52 = PhnIndexSet::sizeObject(v51, 0);
  uint64_t v53 = PhnIndexSet::sizeObject(v51, 1);
  uint64_t v54 = PhnIndexSet::sizeObject(v51, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 541, (DgnString *)&v282);
  if (v283) {
    int v59 = (char *)v282;
  }
  else {
    int v59 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v279, &byte_2140B33BB, v21, v21, v59, v52, v53, v54);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v52;
  *a5 += v53;
  *a6 += v54;
  unint64_t v282 = 0;
  unint64_t v280 = 0;
  unint64_t v281 = 0;
  HistoryMgr::printSize((HistoryMgr *)(v50 + 14), 0xFFFFFFFFLL, v279, &v282, &v281, &v280);
  *a4 += v282;
  *a5 += v281;
  *a6 += v280;
  uint64_t v60 = sizeObject((uint64_t)(v50 + 48), 0);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v61 = 4;
  }
  else {
    uint64_t v61 = 8;
  }
  uint64_t v62 = v60 + v61 + 26;
  uint64_t v63 = sizeObject((uint64_t)(v50 + 48), 1);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 4;
  }
  else {
    uint64_t v64 = 8;
  }
  uint64_t v65 = v63 + v64 + 26;
  uint64_t v66 = sizeObject((uint64_t)(v50 + 48), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 543, (DgnString *)&v282);
  if (v283) {
    unint64_t v71 = (char *)v282;
  }
  else {
    unint64_t v71 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v279, &byte_2140B33BB, v21, v21, v71, v62, v65, v66);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v62;
  *a5 += v65;
  *a6 += v66;
  uint64_t v72 = sizeObject((uint64_t)(v50 + 64), 0);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 4;
  }
  else {
    uint64_t v73 = 8;
  }
  uint64_t v74 = v72 + v73 + 26;
  uint64_t v75 = sizeObject((uint64_t)(v50 + 64), 1);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v76 = 4;
  }
  else {
    uint64_t v76 = 8;
  }
  uint64_t v77 = v75 + v76 + 26;
  uint64_t v78 = sizeObject((uint64_t)(v50 + 64), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 545, (DgnString *)&v282);
  if (v283) {
    uint64_t v83 = (char *)v282;
  }
  else {
    uint64_t v83 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v279, &byte_2140B33BB, v21, v21, v83, v74, v77, v78);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v74;
  *a5 += v77;
  *a6 += v78;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 547, (DgnString *)&v282);
  if (v283) {
    uint64_t v88 = (char *)v282;
  }
  else {
    uint64_t v88 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v279, &byte_2140B33BB, v21, v21, v88, 151072, 151072, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 151072;
  *a5 += 151072;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 549, (DgnString *)&v282);
  if (v283) {
    uint64_t v93 = (char *)v282;
  }
  else {
    uint64_t v93 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v279, &byte_2140B33BB, v21, v21, v93, 151072, 151072, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 151072;
  *a5 += 151072;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 551, (DgnString *)&v282);
  if (v283) {
    uint64_t v98 = (char *)v282;
  }
  else {
    uint64_t v98 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v279, &byte_2140B33BB, v21, v21, v98, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 553, (DgnString *)&v282);
  if (v283) {
    uint64_t v103 = (char *)v282;
  }
  else {
    uint64_t v103 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v279, &byte_2140B33BB, v21, v21, v103, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 555, (DgnString *)&v282);
  if (v283) {
    uint64_t v108 = (char *)v282;
  }
  else {
    uint64_t v108 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v279, &byte_2140B33BB, v21, v21, v108, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 557, (DgnString *)&v282);
  if (v283) {
    uint64_t v113 = (char *)v282;
  }
  else {
    uint64_t v113 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v279, &byte_2140B33BB, v21, v21, v113, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 4;
  *a5 += 4;
  uint64_t v114 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v114 = 16;
  }
  char v115 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v115 = 3;
  }
  uint64_t v116 = v50[75622];
  uint64_t v117 = ((v50[75623] - v116 + v116) << v115) + v114;
  uint64_t v118 = (v116 << v115) + v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 559, (DgnString *)&v282);
  if (v283) {
    uint64_t v123 = (char *)v282;
  }
  else {
    uint64_t v123 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v279, &byte_2140B33BB, v21, v21, v123, v117, v118, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v117;
  *a5 += v118;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v124 = 12;
  }
  else {
    uint64_t v124 = 16;
  }
  uint64_t v125 = v50[75626];
  unsigned int v126 = v50[75627];
  if (v126 >= v125)
  {
    uint64_t v127 = 0;
    if ((int)v125 > 0) {
      v124 += 4 * (v125 - 1) + 4;
    }
    uint64_t v128 = v124 + 4 * (v126 - v125);
  }
  else
  {
    uint64_t v127 = 4 * v125;
    uint64_t v128 = v124;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 561, (DgnString *)&v282);
  if (v283) {
    unint64_t v133 = (char *)v282;
  }
  else {
    unint64_t v133 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v279, &byte_2140B33BB, v21, v21, v133, v128, v124, v127);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v128;
  *a5 += v124;
  *a6 += v127;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v134 = 12;
  }
  else {
    uint64_t v134 = 16;
  }
  uint64_t v135 = v50[75630];
  unsigned int v136 = v50[75631];
  if (v136 >= v135)
  {
    uint64_t v137 = 0;
    if ((int)v135 > 0) {
      v134 += 4 * (v135 - 1) + 4;
    }
    uint64_t v138 = v134 + 4 * (v136 - v135);
  }
  else
  {
    uint64_t v137 = 4 * v135;
    uint64_t v138 = v134;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 563, (DgnString *)&v282);
  if (v283) {
    uint64_t v143 = (char *)v282;
  }
  else {
    uint64_t v143 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v279, &byte_2140B33BB, v21, v21, v143, v138, v134, v137);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v138;
  *a5 += v134;
  *a6 += v137;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v144 = 12;
  }
  else {
    uint64_t v144 = 16;
  }
  int v145 = v50[75634];
  unsigned int v146 = v50[75635];
  BOOL v147 = v146 >= v145;
  uint64_t v148 = v146 - v145;
  if (v147)
  {
    uint64_t v150 = v145 & ~(v145 >> 31);
    int v145 = 0;
    uint64_t v149 = v144 + v150;
    v144 += v150 + v148;
  }
  else
  {
    uint64_t v149 = v144;
  }
  uint64_t v151 = v145;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 565, (DgnString *)&v282);
  if (v283) {
    uint64_t v156 = (char *)v282;
  }
  else {
    uint64_t v156 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v279, &byte_2140B33BB, v21, v21, v156, v144, v149, v151);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v144;
  *a5 += v149;
  *a6 += v151;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v157 = 12;
  }
  else {
    uint64_t v157 = 16;
  }
  uint64_t v158 = v50[75638];
  unsigned int v159 = v50[75639];
  if (v159 >= v158)
  {
    uint64_t v160 = 0;
    if ((int)v158 > 0) {
      uint64_t v157 = (v157 | 2) + 2 * (v158 - 1);
    }
    uint64_t v161 = v157 + 2 * (v159 - v158);
  }
  else
  {
    uint64_t v160 = 2 * v158;
    uint64_t v161 = v157;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 567, (DgnString *)&v282);
  if (v283) {
    uint64_t v166 = (char *)v282;
  }
  else {
    uint64_t v166 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v162, v163, v164, v165, v279, &byte_2140B33BB, v21, v21, v166, v161, v157, v160);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v161;
  *a5 += v157;
  *a6 += v160;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v167 = 12;
  }
  else {
    uint64_t v167 = 16;
  }
  uint64_t v168 = v50[75642];
  unsigned int v169 = v50[75643];
  if (v169 >= v168)
  {
    uint64_t v170 = 0;
    if ((int)v168 > 0) {
      v167 += 4 * (v168 - 1) + 4;
    }
    uint64_t v171 = v167 + 4 * (v169 - v168);
  }
  else
  {
    uint64_t v170 = 4 * v168;
    uint64_t v171 = v167;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 568, (DgnString *)&v282);
  if (v283) {
    int v176 = (char *)v282;
  }
  else {
    int v176 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v279, &byte_2140B33BB, v21, v21, v176, v171, v167, v170);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v171;
  *a5 += v167;
  *a6 += v170;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 587, (DgnString *)&v282);
  if (v283) {
    uint64_t v181 = (char *)v282;
  }
  else {
    uint64_t v181 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v279, &byte_2140B33BB, v21, v21, v181, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 589, (DgnString *)&v282);
  if (v283) {
    uint64_t v186 = (char *)v282;
  }
  else {
    uint64_t v186 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v182, v183, v184, v185, v279, &byte_2140B33BB, v21, v21, v186, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 590, (DgnString *)&v282);
  if (v283) {
    uint64_t v191 = (char *)v282;
  }
  else {
    uint64_t v191 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v279, &byte_2140B33BB, v21, v21, v191, 12, 12, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += 12;
  *a5 += 12;
  uint64_t v192 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v192 = 16;
  }
  uint64_t v193 = v50[75708];
  char v194 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v194 = 3;
  }
  uint64_t v195 = ((v50[75709] - v193 + v193) << v194) + v192;
  uint64_t v196 = (v193 << v194) + v192;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 592, (DgnString *)&v282);
  if (v283) {
    uint64_t v201 = (char *)v282;
  }
  else {
    uint64_t v201 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v197, v198, v199, v200, v279, &byte_2140B33BB, v21, v21, v201, v195, v196, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v195;
  *a5 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v202 = 12;
  }
  else {
    uint64_t v202 = 16;
  }
  uint64_t v203 = v50[75712];
  unsigned int v204 = v50[75713];
  if (v204 >= v203)
  {
    uint64_t v205 = 0;
    if ((int)v203 > 0) {
      v202 += 4 * (v203 - 1) + 4;
    }
    uint64_t v206 = v202 + 4 * (v204 - v203);
  }
  else
  {
    uint64_t v205 = 4 * v203;
    uint64_t v206 = v202;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 594, (DgnString *)&v282);
  if (v283) {
    uint64_t v211 = (char *)v282;
  }
  else {
    uint64_t v211 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v207, v208, v209, v210, v279, &byte_2140B33BB, v21, v21, v211, v206, v202, v205);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v206;
  *a5 += v202;
  *a6 += v205;
  uint64_t v212 = sizeObject<FrameTypeInfo>((uint64_t)(v50 + 75714), 0);
  uint64_t v213 = sizeObject<FrameTypeInfo>((uint64_t)(v50 + 75714), 1);
  sizeObject((uint64_t)&v282, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 595, (DgnString *)&v282);
  if (v283) {
    uint64_t v218 = (char *)v282;
  }
  else {
    uint64_t v218 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v214, v215, v216, v217, v279, &byte_2140B33BB, v21, v21, v218, v212, v213, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v212;
  *a5 += v213;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v219 = 12;
  }
  else {
    uint64_t v219 = 16;
  }
  uint64_t v220 = v50[75720];
  unsigned int v221 = v50[75721];
  if (v221 >= v220)
  {
    uint64_t v222 = 0;
    if ((int)v220 > 0) {
      v219 += 4 * (v220 - 1) + 4;
    }
    uint64_t v223 = v219 + 4 * (v221 - v220);
  }
  else
  {
    uint64_t v222 = 4 * v220;
    uint64_t v223 = v219;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 596, (DgnString *)&v282);
  if (v283) {
    unint64_t v228 = (char *)v282;
  }
  else {
    unint64_t v228 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v224, v225, v226, v227, v279, &byte_2140B33BB, v21, v21, v228, v223, v219, v222);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v223;
  *a5 += v219;
  *a6 += v222;
  uint64_t v229 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v229 = 16;
  }
  uint64_t v230 = v50[75724];
  char v231 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v231 = 3;
  }
  uint64_t v232 = ((v50[75725] - v230 + v230) << v231) + v229;
  uint64_t v233 = (v230 << v231) + v229;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 597, (DgnString *)&v282);
  if (v283) {
    unint64_t v238 = (char *)v282;
  }
  else {
    unint64_t v238 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v234, v235, v236, v237, v279, &byte_2140B33BB, v21, v21, v238, v232, v233, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v232;
  *a5 += v233;
  uint64_t v239 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v239 = 16;
  }
  uint64_t v240 = v50[75728];
  char v241 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v241 = 3;
  }
  uint64_t v242 = ((v50[75729] - v240 + v240) << v241) + v239;
  uint64_t v243 = (v240 << v241) + v239;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 598, (DgnString *)&v282);
  if (v283) {
    uint64_t v248 = (char *)v282;
  }
  else {
    uint64_t v248 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v244, v245, v246, v247, v279, &byte_2140B33BB, v21, v21, v248, v242, v243, 0);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v242;
  *a5 += v243;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v249 = 12;
  }
  else {
    uint64_t v249 = 16;
  }
  uint64_t v250 = v50[75732];
  unsigned int v251 = v50[75733];
  if (v251 >= v250)
  {
    uint64_t v252 = 0;
    if ((int)v250 > 0) {
      v249 += 4 * (v250 - 1) + 4;
    }
    uint64_t v253 = v249 + 4 * (v251 - v250);
  }
  else
  {
    uint64_t v252 = 4 * v250;
    uint64_t v253 = v249;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 599, (DgnString *)&v282);
  if (v283) {
    int v258 = (char *)v282;
  }
  else {
    int v258 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v254, v255, v256, v257, v279, &byte_2140B33BB, v21, v21, v258, v253, v249, v252);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v253;
  *a5 += v249;
  *a6 += v252;
  uint64_t v259 = v50[75736];
  char v260 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v260 = 3;
  }
  uint64_t v261 = v259 << v260;
  uint64_t v262 = (v50[75737] - v259 + v259) << v260;
  uint64_t v263 = v50[75740] * v259;
  uint64_t v264 = 28;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v264 = 36;
  }
  uint64_t v265 = v264 + v263;
  uint64_t v266 = v265 + v262;
  uint64_t v267 = v265 + v261;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 601, (DgnString *)&v282);
  if (v283) {
    unint64_t v272 = (char *)v282;
  }
  else {
    unint64_t v272 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v268, v269, v270, v271, v279, &byte_2140B33BB, v21, v21, v272, v266, v267, v263);
  DgnString::~DgnString((DgnString *)&v282);
  *a4 += v266;
  *a5 += v267;
  *a6 += v263;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/net/netmgr.cpp", 602, (DgnString *)&v282);
  if (v283) {
    uint64_t v277 = (char *)v282;
  }
  else {
    uint64_t v277 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v273, v274, v275, v276, v278, &byte_2140B33BB, (35 - v278), (35 - v278), v277, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v282);
}

void sub_213F305DC(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

double NetMgr::addEmptyNet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MemChunkAlloc(0xA0uLL, 0);

  return EmptyNet::EmptyNet((uint64_t)v4, a1, a2);
}

uint64_t NetMgr::addSilNet(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
      uint64_t v4 = MemChunkAlloc(0xC0uLL, 0);
      uint64_t result = AcousticNet::AcousticNet((uint64_t)v4, a1, a2, 1, 0, 0, 0, 0);
      *(void *)uint64_t result = &unk_26C4E4DA8;
      *(_OWORD *)(result + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      return result;
    case 1:
      uint64_t v6 = MemChunkAlloc(0xC0uLL, 0);
      uint64_t result = AcousticNet::AcousticNet((uint64_t)v6, a1, a2, 1, 0, 0, 0, 0);
      *(_OWORD *)(result + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      uint64_t v7 = &unk_26C4DFD20;
      goto LABEL_7;
    case 2:
      uint64_t v8 = MemChunkAlloc(0xC0uLL, 0);
      uint64_t result = AcousticNet::AcousticNet((uint64_t)v8, a1, a2, 1, 0, 0, 0, 0);
      *(_OWORD *)(result + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      uint64_t v7 = &unk_26C4DF8D0;
      goto LABEL_7;
    case 3:
      uint64_t v9 = MemChunkAlloc(0xC0uLL, 0);
      uint64_t result = AcousticNet::AcousticNet((uint64_t)v9, a1, a2, 1, 0, 0, 0, 0);
      *(_OWORD *)(result + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      uint64_t v7 = &unk_26C4E24E0;
LABEL_7:
      *(void *)uint64_t result = v7;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

int32x2_t NetMgr::addNonSilNet(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v9 = a7;
  if (a5 == 1) {
    int v13 = 4;
  }
  else {
    int v13 = 3;
  }
  if (a3) {
    int v14 = v13;
  }
  else {
    int v14 = 2;
  }
  if (a6)
  {
    int v15 = a7 / a6;
    int v9 = a7 % a6;
  }
  else
  {
    int v15 = 0;
  }
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
      int v16 = *(_DWORD *)(a1 + 12);
      if (v16)
      {
        if (v16 == 1)
        {
          if (v14 == 4)
          {
            uint64_t v26 = MemChunkAlloc(0x120uLL, 0);
            uint64_t v20 = BaseSyncNet::BaseSyncNet((uint64_t)v26, a1, a2, 4, 1, v15, v9, a4, a8);
            uint64_t v21 = &unk_26C4E1698;
            goto LABEL_20;
          }
          if (v14 == 3)
          {
            uint64_t v27 = MemChunkAlloc(0x170uLL, 0);
            return SyncNet::SyncNet((uint64_t)v27, a1, a2, 3, v15, v9, a4, a8);
          }
          else
          {
            uint64_t v17 = MemChunkAlloc(0x130uLL, 0);
            NonCoartSyncNet::NonCoartSyncNet((uint64_t)v17, a1, a2, 2, v15, v9, a4, a8);
          }
        }
      }
      else
      {
        uint64_t v24 = MemChunkAlloc(0xC0uLL, 0);
        uint64_t v25 = AcousticNet::AcousticNet((uint64_t)v24, a1, a2, v14, 0, v15, v9, a8);
        *(void *)uint64_t v25 = &unk_26C4E4DA8;
        int32x2_t result = 0;
        *(_OWORD *)(v25 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
        *(_OWORD *)(v25 + 176) = 0u;
      }
      return result;
    case 1:
      uint64_t v22 = MemChunkAlloc(0xC0uLL, 0);
      uint64_t v20 = AcousticNet::AcousticNet((uint64_t)v22, a1, a2, v14, 0, v15, v9, a8);
      int32x2_t result = 0;
      *(_OWORD *)(v20 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
      *(_OWORD *)(v20 + 176) = 0u;
      uint64_t v21 = &unk_26C4DFD20;
      goto LABEL_20;
    case 2:
      uint64_t v19 = MemChunkAlloc(0xC0uLL, 0);
      uint64_t v20 = AcousticNet::AcousticNet((uint64_t)v19, a1, a2, v14, 0, 0, 0, a8);
      int32x2_t result = 0;
      *(_OWORD *)(v20 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
      *(_OWORD *)(v20 + 176) = 0u;
      uint64_t v21 = &unk_26C4DF8D0;
      goto LABEL_20;
    case 3:
      uint64_t v23 = MemChunkAlloc(0xC0uLL, 0);
      uint64_t v20 = AcousticNet::AcousticNet((uint64_t)v23, a1, a2, v14, 0, 0, 0, a8);
      int32x2_t result = 0;
      *(_OWORD *)(v20 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
      *(_OWORD *)(v20 + 176) = 0u;
      uint64_t v21 = &unk_26C4E24E0;
LABEL_20:
      *(void *)uint64_t v20 = v21;
      break;
    default:
      return result;
  }
  return result;
}

void (***NetMgr::removeNet(NetMgr *this, HmmNet *a2))(void)
{
  return DgnDelete<HmmNet>((void (***)(void))a2);
}

void (***DgnDelete<HmmNet>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

void NetMgr::beginNetMgrSyncRecog(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = a1 + 302472;
  HistoryMgr::beginHistoryMgrSyncRecog((HistoryMgr *)(a1 + 56));
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = a4;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a3;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a2;
  *(void *)(v12 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0;
  *(_DWORD *)(v12 + 112) = 0;
  *(_OWORD *)(a1 + 3026DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  *(_OWORD *)(a1 + 302712) = 0u;
  *(_OWORD *)(a1 + 302728) = 0u;
  *(_OWORD *)(a1 + 302744) = 0u;
  *(_OWORD *)(a1 + 30276pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(void *)(a1 + 302776) = 0;
  *(_OWORD *)(a1 + 302592) = 0u;
  *(_OWORD *)(a1 + 302608) = 0u;
  *(_OWORD *)(a1 + 3026DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 30264pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 302656) = 0u;
  *(_OWORD *)(a1 + 3026DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0u;
  *(_DWORD *)(a1 + 3026DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0;
  if (a2) {
    unsigned int v13 = **a2;
  }
  else {
    unsigned int v13 = 1;
  }
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v16, v13);
  uint64_t v14 = v16[0];
  *(_DWORD *)v16[0] |= 1u;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15) {
    *(_DWORD *)(v14 + (((unint64_t)*(unsigned __int16 *)(*(void *)v15 + 56) >> 3) & 0x1FFC)) |= 1 << *(_WORD *)(*(void *)v15 + 56);
  }
  BitArray::operator=((int **)(a1 + 40), (uint64_t)v16);
  *(_WORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = xmmword_2140A58E0;
  *(_DWORD *)(a1 + 24pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 20000;
  *(void *)(a1 + 256) = 0x100000001;
  *(_DWORD *)(a1 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 1310740000;
  *(_DWORD *)(a1 + 276) = -65536;
  *(void *)(a1 + 268) = 0;
  *(void *)(a1 + 28pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_WORD *)(a1 + 312) = 20000;
  *(_OWORD *)(a1 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = xmmword_2140A58E0;
  *(void *)(a1 + 304) = 5629499534213140000;
  bzero((void *)(a1 + 320), 0x49C48uLL);
  *(_DWORD *)uint64_t v12 = a6;
  *(_DWORD *)(v12 + 4) = a5;
  *(void *)(a1 + 192) = 0x100000001;
  *(_DWORD *)(a1 + 20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1310740000;
  *(void *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 212) = -65536;
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(_DWORD *)(a1 + 246) = 1310740000;
  BitArray::~BitArray((BitArray *)v16);
}

void sub_213F30D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *NetMgr::endNetMgrSyncRecog(NetMgr *this)
{
  *((void *)this + 37822) = 0;
  *((_DWORD *)this + 75646) = 0;
  *(_OWORD *)((char *)this + 3026DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  *(_OWORD *)((char *)this + 302712) = 0u;
  *(_OWORD *)((char *)this + 302728) = 0u;
  *(_OWORD *)((char *)this + 302744) = 0u;
  *(_OWORD *)((char *)this + 30276pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *((void *)this + 37847) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((_OWORD *)this + 18912) = 0u;
  *((_OWORD *)this + 18913) = 0u;
  *((_OWORD *)this + 18914) = 0u;
  *((_OWORD *)this + 18915) = 0u;
  *((_OWORD *)this + 189DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *((_OWORD *)this + 18917) = 0u;
  *((_DWORD *)this + 756DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  return HistoryMgr::beginHistoryMgrSyncRecog((NetMgr *)((char *)this + 56));
}

int32x2_t NetMgr::beginNetMgrFrame(NetMgr *this, int a2)
{
  int v2 = *((_DWORD *)this + 58);
  if (v2 != a2)
  {
    *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *((void *)this + 24);
    *((_DWORD *)this + 66) = *((_DWORD *)this + 50);
    *(void *)((char *)this + 268) = *(void *)((char *)this + 204);
    *((_DWORD *)this + 69) = *((_DWORD *)this + 53);
    *((void *)this + 35) = *((void *)this + 27);
    *((_DWORD *)this + 77) = *((_DWORD *)this + 61);
    *((_WORD *)this + 156) = *((_WORD *)this + 124);
    *((_DWORD *)this + 74) = v2;
    *((void *)this + 36) = *((void *)this + 28);
    *(void *)((char *)this + 30pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(void *)((char *)this + 236);
    *((void *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0x100000001;
    *((_DWORD *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1310740000;
    *((_DWORD *)this + 53) = -65536;
    *(void *)((char *)this + 204) = 0;
    *((void *)this + 27) = 0;
    *((_DWORD *)this + 61) = 1310720000;
    *((_WORD *)this + 1DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 20000;
    *((void *)this + 28) = 20000;
    int32x2_t result = vdup_n_s32(0x4E20u);
    *(int32x2_t *)((char *)this + 236) = result;
    *((_DWORD *)this + 58) = a2;
  }
  return result;
}

uint64_t NetMgr::normalizeBestAndComputeEstimatedThresh(NetMgr *this, int a2, int a3, int *a4)
{
  *((void *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0x100000001;
  *((_DWORD *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1310740000;
  *(void *)((char *)this + 204) = 0;
  *((_DWORD *)this + 53) = -65536;
  *((void *)this + 27) = 0;
  *((_DWORD *)this + 56) = 20000;
  *(int32x2_t *)((char *)this + 236) = vdup_n_s32(0x4E20u);
  *((_DWORD *)this + 61) = 1310720000;
  if (a2 == -16)
  {
    LOWORD(v8) = 0;
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    *((_DWORD *)this + 57) = 0;
    uint64_t v12 = 0xFFFFLL;
    int v13 = 20000;
  }
  else
  {
    int v13 = *((_DWORD *)this + 72);
    if (v13 == 20000)
    {
      int v10 = 0;
      int v11 = 0;
      uint64_t v12 = 0xFFFFLL;
    }
    else
    {
      uint64_t v12 = *((unsigned __int16 *)this + 139);
      int v10 = *((int *)this + 67) >> 8;
      int v11 = *((unsigned __int8 *)this + 276);
    }
    int v20 = 0;
    uint64_t BestDataMaybeShadow = NetMgr::getBestDataMaybeShadow(this, 0, &v20, &v19, &v18);
    int v9 = *((_DWORD *)this + 73);
    *((_DWORD *)this + 57) = v9;
    int v15 = *(_DWORD *)(BestDataMaybeShadow + 32);
    if (v15 == 20000)
    {
      LOWORD(v8) = 0;
    }
    else
    {
      int v8 = v15 - v9 + v20 + *(_DWORD *)(BestDataMaybeShadow + 36);
      *((_WORD *)this + 122) = v8;
      v9 += (__int16)v8;
      *((_DWORD *)this + 57) = v9;
    }
  }
  *a4 = v9;
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    *(_DWORD *)(v16 + 256) = (__int16)v8;
    a3 = NetMgr::computeEstimatedThreshThisFrame(this, a2, v12, v10, v11, v13, a3);
  }
  if (a3 >= 5000) {
    return 5000;
  }
  else {
    return a3;
  }
}

uint64_t NetMgr::getBestDataMaybeShadow(NetMgr *this, int a2, int *a3, int *a4, BOOL *a5)
{
  uint64_t v5 = (char *)this + 302480;
  uint64_t v6 = 256;
  if (a2) {
    uint64_t v6 = 192;
  }
  uint64_t result = (uint64_t)this + v6;
  uint64_t v8 = *((unsigned int *)v5 + 2);
  if (v8)
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v13 = *((void *)v5 + 2);
    do
    {
      int v14 = *(_DWORD *)(v13 + 4 * v9);
      if (v14 != 20000)
      {
        if (a2) {
          uint64_t v15 = 192;
        }
        else {
          uint64_t v15 = 256;
        }
        uint64_t v16 = *(void *)(*(void *)v5 + 8 * v9) + v15;
        int v17 = *(_DWORD *)(v16 + 32);
        if (v17 != 20000)
        {
          int v18 = *(_DWORD *)(result + 32);
          if (v18 == 20000 || v17 + v14 + *(_DWORD *)(v16 + 36) < v18 + v12 + *(_DWORD *)(result + 36))
          {
            int v11 = *(_DWORD *)(*((void *)v5 + 4) + 4 * v9);
            BOOL v10 = *(unsigned char *)(*((void *)v5 + 6) + v9) != 0;
            int v12 = *(_DWORD *)(v13 + 4 * v9);
            uint64_t result = v16;
          }
        }
      }
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    int v12 = 0;
    int v11 = 0;
    BOOL v10 = 0;
  }
  *a3 = v12;
  *a4 = v11;
  *a5 = v10;
  return result;
}

uint64_t NetMgr::computeEstimatedThreshThisFrame(NetMgr *this, int a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a2 == -16)
  {
    uint64_t v8 = (PelScoreCache *)*((void *)this + 3);
LABEL_4:
    int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(v8, 0);
    return (ScoreNoBackoff + a7);
  }
  uint64_t v8 = (PelScoreCache *)*((void *)this + 3);
  if (a6 == 20000) {
    goto LABEL_4;
  }
  int v12 = PelScoreCache::getScoreNoBackoff(v8, a3) + a6;
  if (-a5 > a4) {
    int v13 = -a5;
  }
  else {
    int v13 = a4;
  }
  int v14 = v12 - v13;
  if (a4 < 0) {
    int ScoreNoBackoff = v14;
  }
  else {
    int ScoreNoBackoff = v12;
  }
  return (ScoreNoBackoff + a7);
}

uint64_t NetMgr::computeThreshScore(NetMgr *this, int a2, int a3, __int16 a4, int a5, unsigned int *a6, unint64_t *a7)
{
  int v12 = (char *)this + 302464;
  if (*((_DWORD *)this + 75618))
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    BOOL v15 = 0;
    int v16 = 0;
    while (2)
    {
      uint64_t v17 = 37768 - v13;
      int v18 = v13 - 5000;
      int v19 = (_DWORD *)((char *)this + 4 * v13++ + 320);
      while (*v19)
      {
        v14 += *v19;
        *int v19 = 0;
        if (!v15)
        {
          BOOL v15 = v14 >= *((_DWORD *)v12 + 2);
          if (v14 >= *((_DWORD *)v12 + 2)) {
            int v16 = v18;
          }
          break;
        }
        ++v13;
        ++v18;
        ++v19;
        BOOL v15 = 1;
        if (!--v17) {
          goto LABEL_12;
        }
      }
      if (v17 != 1) {
        continue;
      }
      break;
    }
    if (v15) {
LABEL_12:
    }
      *((_DWORD *)this + 59) = v16;
  }
  if (*((_DWORD *)v12 + 3))
  {
    uint64_t v20 = 0;
    BOOL v21 = 0;
    int v22 = 0;
    unsigned int v23 = 0;
    while (2)
    {
      uint64_t v24 = 37768 - v20;
      int v25 = v20 - 5000;
      uint64_t v26 = (_DWORD *)((char *)this + 4 * v20++ + 151392);
      while (*v26)
      {
        v23 += *v26;
        _DWORD *v26 = 0;
        if (!v21)
        {
          BOOL v21 = v23 >= *((_DWORD *)v12 + 3);
          if (v23 >= *((_DWORD *)v12 + 3)) {
            int v22 = v25;
          }
          break;
        }
        ++v20;
        ++v25;
        ++v26;
        BOOL v21 = 1;
        if (!--v24) {
          goto LABEL_24;
        }
      }
      if (v24 != 1) {
        continue;
      }
      break;
    }
    if (v21) {
LABEL_24:
    }
      *((_DWORD *)this + 6pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v22;
  }
  if (a6)
  {
    unsigned int v27 = *a6;
    if (*a6 <= *((_DWORD *)v12 + 1)) {
      unsigned int v27 = *((_DWORD *)v12 + 1);
    }
    *a6 = v27;
  }
  if (a7) {
    *a7 += *((unsigned int *)v12 + 1);
  }
  *(void *)int v12 = 0;
  *(void *)uint64_t v43 = 0;
  BOOL v42 = 0;
  uint64_t BestDataMaybeShadow = NetMgr::getBestDataMaybeShadow(this, 1, &v43[1], v43, &v42);
  int v29 = *(_DWORD *)(BestDataMaybeShadow + 32);
  if (v29 == 20000)
  {
    v43[0] = 0;
    int v30 = a3 + a2;
    int v31 = a3 + a2;
LABEL_37:
    int v33 = v30 - a3;
    goto LABEL_38;
  }
  int v31 = a3 + a2;
  int v30 = v29 + a3 + a2 + v43[1];
  if (v42) {
    int v32 = *(unsigned __int16 *)(BestDataMaybeShadow + 22);
  }
  else {
    int v32 = *((unsigned __int16 *)this + 107);
  }
  int v33 = v29 + v31 + v43[1];
  if (!v32) {
    goto LABEL_37;
  }
LABEL_38:
  int v34 = *((_DWORD *)this + 59);
  int v35 = *((_DWORD *)this + 60);
  if (v34 < v33 && v34 != 20000) {
    int v33 = *((_DWORD *)this + 59);
  }
  if (v35 < v33 && v35 != 20000) {
    int v33 = *((_DWORD *)this + 60);
  }
  if (v43[0] == 20000) {
    int v38 = 5000;
  }
  else {
    int v38 = (__int16)(v30 - a4 + LOWORD(v43[0]));
  }
  if (v33 < v38) {
    LOWORD(v38) = v33;
  }
  *((_WORD *)this + 1DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v38;
  if (v29 != 20000)
  {
    int v39 = *((__int16 *)this + 123);
    if (v39 != 20000)
    {
      int v40 = v31 - a5 + v39;
      if ((__int16)v38 < v40) {
        LOWORD(v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v38;
      }
      *((_WORD *)this + 1DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v40;
    }
  }
  if (v33 >= 5000) {
    return 5000;
  }
  else {
    return v33;
  }
}

int32x2_t NetMgr::adjustBestForBWBack(NetMgr *this, int a2, int a3, int *a4)
{
  *((void *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0x100000001;
  *((_DWORD *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1310740000;
  *(void *)((char *)this + 204) = 0;
  uint64_t v4 = (void *)((char *)this + 204);
  *((_DWORD *)this + 53) = -65536;
  *((void *)this + 27) = 0;
  int32x2_t result = vdup_n_s32(0x4E20u);
  *(int32x2_t *)((char *)this + 236) = result;
  *((_DWORD *)this + 61) = 1310720000;
  if (a3 == -16)
  {
    int v6 = 0;
    int v7 = 0;
    *((_DWORD *)this + 57) = 0;
  }
  else
  {
    int v7 = *((_DWORD *)this + 73);
    *((_DWORD *)this + 57) = v7;
    int v8 = *((_DWORD *)this + 72);
    if (v8 == 20000)
    {
      int v6 = 0;
    }
    else
    {
      *((_WORD *)this + 122) = v8;
      *((_DWORD *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *((_DWORD *)this + 66);
      int v6 = (__int16)v8;
      v7 += (__int16)v8;
      *((void *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = *((void *)this + 32);
      *((_DWORD *)this + 53) = *((_DWORD *)this + 69);
      *uint64_t v4 = *(void *)((char *)this + 268);
      *((void *)this + 27) = *((void *)this + 35);
      *((_WORD *)this + 101) = 20000;
      *((_DWORD *)this + 56) = 20000;
      *((_DWORD *)this + 57) = v7;
    }
  }
  *a4 = v7;
  uint64_t v9 = *((void *)this + 3);
  if (v9) {
    *(_DWORD *)(v9 + 256) = v6;
  }
  if (a2)
  {
    int32x2_t result = (int32x2_t)0x100000001;
    *((void *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0x100000001;
    *((_DWORD *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1310740000;
    *((_WORD *)this + 107) = -1;
    *uint64_t v4 = 0;
    *((_WORD *)this + 106) = 0;
    *((void *)this + 27) = 0;
    *((_WORD *)this + 123) = 20000;
  }
  return result;
}

unint64_t NetMgr::shadowBest(unint64_t this, NetMgr *a2, int a3, int a4, char a5)
{
  unint64_t v9 = this + 302480;
  uint64_t v10 = *(unsigned int *)(this + 302488);
  if (!v10) {
    goto LABEL_7;
  }
  uint64_t v11 = 0;
  while (*(NetMgr **)(*(void *)v9 + 8 * v11) != a2)
  {
    if (v10 == ++v11) {
      goto LABEL_7;
    }
  }
  *(_DWORD *)(*(void *)(this + 302496) + 4 * v11) = a3;
  *(_DWORD *)(*(void *)(this + 302512) + 4 * v11) = a4;
  *(unsigned char *)(*(void *)(this + 302528) + v11) = a5;
  LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(this + 302488);
  if (v10 == v11)
  {
LABEL_7:
    if (v10 == *(_DWORD *)(this + 302492))
    {
      this = DgnPrimArray<unsigned long long>::reallocElts(this + 302480, 1, 1);
      LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(v9 + 8);
    }
    *(void *)(*(void *)v9 + 8 * v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a2;
    *(_DWORD *)(v9 + 8) = v10 + 1;
    unsigned int v12 = *(_DWORD *)(v9 + 24);
    if (v12 == *(_DWORD *)(v9 + 28))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(v9 + 16, 1, 1);
      unsigned int v12 = *(_DWORD *)(v9 + 24);
    }
    *(_DWORD *)(*(void *)(v9 + 16) + 4 * v12) = a3;
    ++*(_DWORD *)(v9 + 24);
    unsigned int v13 = *(_DWORD *)(v9 + 40);
    if (v13 == *(_DWORD *)(v9 + 44))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(v9 + 32, 1, 1);
      unsigned int v13 = *(_DWORD *)(v9 + 40);
    }
    *(_DWORD *)(*(void *)(v9 + 32) + 4 * v13) = a4;
    ++*(_DWORD *)(v9 + 40);
    unsigned int v14 = *(_DWORD *)(v9 + 56);
    if (v14 == *(_DWORD *)(v9 + 60))
    {
      this = DgnPrimArray<char>::reallocElts(v9 + 48, 1, 1);
      unsigned int v14 = *(_DWORD *)(v9 + 56);
    }
    *(unsigned char *)(*(void *)(v9 + 48) + v14) = a5;
    *(_DWORD *)(v9 + 56) = v14 + 1;
  }
  return this;
}

uint64_t NetMgr::estimateActivePelsPrevFrame(uint64_t this, BitArray *a2)
{
  int v2 = *(_DWORD **)a2;
  **(_DWORD **)a2 |= 1u;
  unint64_t v3 = *(unsigned __int16 *)(this + 278);
  if (v3 != 0xFFFF) {
    *(_DWORD *)((char *)v2 + ((v3 >> 3) & 0x1FFC)) |= 1 << v3;
  }
  unint64_t v4 = *(unsigned __int16 *)(this + 214);
  if (v4 != 0xFFFF) {
    *(_DWORD *)((char *)v2 + ((v4 >> 3) & 0x1FFC)) |= 1 << v4;
  }
  return this;
}

double EmptyNet::EmptyNet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  HmmNet::HmmNet(a1, a2, a3, 0, 1, 0);
  *(void *)&double result = 0x100000001;
  *(void *)(v4 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0x100000001;
  *(_DWORD *)(v4 + 1DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 1310740000;
  *(void *)uint64_t v4 = &unk_26C4E5088;
  *(void *)(v4 + 128) = 0x100000001;
  *(_DWORD *)(v4 + 136) = 1310740000;
  *(void *)(v4 + 14pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(v4 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = -65536;
  *(unsigned char *)(v4 + 152) = 0;
  return result;
}

uint64_t NonCoartSyncNet::NonCoartSyncNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v9 = BaseSyncNet::BaseSyncNet(a1, a2, a3, a4, 1, a5, a6, a7, a8);
  *(void *)(v9 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0x100000001;
  *(_DWORD *)(v9 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 1310740000;
  *(void *)uint64_t v9 = &unk_26C4E0BB0;
  if (!*(_DWORD *)(v9 + 228)) {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 216, 1, 0);
  }
  return a1;
}

void sub_213F31784(_Unwind_Exception *a1, Sequence *a2)
{
  BaseSyncNet::~BaseSyncNet(v2, a2);
  _Unwind_Resume(a1);
}

int32x2_t SyncNet::SyncNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8 = BaseSyncNet::BaseSyncNet(a1, a2, a3, a4, 0, a5, a6, a7, a8);
  *(void *)uint64_t v8 = &unk_26C4E4F20;
  *(void *)(v8 + 312) = 0;
  *(void *)(v8 + 32pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(void *)(v8 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(v8 + 304) = 0;
  *(void *)(v8 + 328) = 0x100000001;
  *(_DWORD *)(v8 + 336) = 1310740000;
  *(void *)(v8 + 34pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  int32x2_t result = vdup_n_s32(0x4E20u);
  *(_DWORD *)(v8 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = -65536;
  *(int32x2_t *)(v8 + 352) = result;
  *(_DWORD *)(v8 + 36pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(void *)(v8 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0;
  return result;
}

uint64_t DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::DgnIdFactory(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v2 = MemChunkSuggestAllocExtraItems(0xFFC00uLL, 0x10uLL, 0);
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 16 * (v2 + 65472);
  *(void *)(a1 + 28) = (v2 + 65472);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  return a1;
}

void sub_213F3187C(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v1);
  _Unwind_Resume(a1);
}

uint64_t DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::~DgnIdFactory(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = v2 + 1;
    do
    {
      uint64_t v4 = *(void **)(*(void *)a1 + 8 * (v3 - 2));
      if (v4) {
        MemChunkFree(v4, 0);
      }
      --v3;
    }
    while (v3 > 1);
  }

  return DgnIArray<Utterance *>::~DgnIArray(a1);
}

void MrecInitModule_nbchoice_kernel(void)
{
  if (!gParDebugShowConfidence)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowConfidence", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugShowConfidence = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugShowConfidence);
  }
}

uint64_t NBestChoice::NBestChoice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 6pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_OWORD *)(a1 + 36) = *(_OWORD *)a3;
  *(void *)(a1 + 52) = *(void *)(a3 + 16);
  *(_DWORD *)(a1 + 6pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(a3 + 24);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = -1;
  DgnArray<WordLatticeLC>::copyArraySlice(a1, (void *)a2, 0, *(_DWORD *)(a2 + 8));
  return a1;
}

void sub_213F31A00(_Unwind_Exception *a1)
{
  DgnArray<WordLatticeLC>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void NBestChoice::~NBestChoice(NBestChoice *this)
{
}

void NBestChoiceList::printSize(NBestChoiceList *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1085, (DgnString *)&v51);
  if (v52) {
    int v16 = v51;
  }
  else {
    int v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v51);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = sizeObject<NBestChoice *>((uint64_t)this, 0);
  uint64_t v22 = sizeObject<NBestChoice *>((uint64_t)this, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1086, (DgnString *)&v51);
  if (v52) {
    unsigned int v27 = v51;
  }
  else {
    unsigned int v27 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v27, v21, v22, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v21;
  *a5 += v22;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1088, (DgnString *)&v51);
  if (v52) {
    int v32 = v51;
  }
  else {
    int v32 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1090, (DgnString *)&v51);
  if (v52) {
    uint64_t v37 = v51;
  }
  else {
    uint64_t v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += 4;
  *a5 += 4;
  uint64_t v38 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 8;
  }
  uint64_t v39 = 248;
  if (!*((void *)this + 3)) {
    uint64_t v39 = 0;
  }
  uint64_t v40 = v39 + v38;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1092, (DgnString *)&v51);
  if (v52) {
    uint64_t v45 = v51;
  }
  else {
    uint64_t v45 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v45, v40, v40, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v40;
  *a5 += v40;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/nbchoice.cpp", 1093, (DgnString *)&v51);
  if (v52) {
    uint64_t v50 = v51;
  }
  else {
    uint64_t v50 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v50, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v51);
}

void sub_213F31D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<NBestChoice *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t sizeObject<WordLatticeLC>(uint64_t a1, int a2)
{
  int v11 = -16;
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = 1879048192;
  int v15 = 0;
  uint64_t v16 = -1;
  v10[0] = &unk_26C4E0568;
  v10[1] = 0xBFF0000000000000;
  int v17 = 0x3FFF;
  long long v18 = xmmword_2140866D0;
  uint64_t v4 = sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v5 = 12;
    }
    else {
      uint64_t v5 = 16;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        unint64_t v8 = v7 + 1;
        do
          v5 += sizeObject(*(void *)a1 + 112 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2) {
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v10);
  return v5;
}

void sub_213F320B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t DgnArray<WordConfidenceInfo>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  unint64_t v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 696 * v6, 696 * v5, 696 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x2B8;
  *(void *)a1 = v8;
  return result;
}

void *DgnArray<WordLatticeLC>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 112 * v2 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a1 + v3))(*(void *)a1 + v3);
      v3 -= 112;
    }
    while (v3 != -112);
  }
  unint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    unint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void DgnArray<WordLatticeLC>::copyArraySlice(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a1 + v9))(*(void *)a1 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<WordLatticeLC>::reallocElts(a1, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a1 + 112 * v12), (const WordLatticeLC *)(*a2 + 112 * (a3 + v13)));
    unsigned int v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v14 = (int)v12;
      uint64_t v15 = 112 * (int)v12 - 112;
      do
      {
        --v14;
        (**(void (***)(uint64_t))(*(void *)a1 + v15))(*(void *)a1 + v15);
        v15 -= 112;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    unint64_t v16 = a4 - (unint64_t)v12;
    uint64_t v17 = 112 * v12 + 96;
    do
    {
      long long v18 = (_OWORD *)(*(void *)a1 + v17);
      *((_DWORD *)v18 - 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = -16;
      *(_OWORD *)((char *)v18 - 76) = 0uLL;
      *(_OWORD *)((char *)v18 - 6pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0uLL;
      *(v18 - 3) = 0uLL;
      *((void *)v18 - 4) = 1879048192;
      *((_DWORD *)v18 - 6) = 0;
      *((void *)v18 - 2) = -1;
      *((void *)v18 - 12) = &unk_26C4E0568;
      *((void *)v18 - 11) = 0xBFF0000000000000;
      *((_DWORD *)v18 - 1) = 0x3FFF;
      _OWORD *v18 = xmmword_2140866D0;
      v17 += 112;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

void DgnArray<WordConfidenceInfo>::copyArraySlice(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  if (a4 <= v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    DgnArray<WordConfidenceInfo>::reallocElts(a1, a4 - v8, 0);
    unsigned int v9 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v11 = a4;
  unsigned int v10 = v9;
  do
  {
    memcpy((void *)(*(void *)a1 + 696 * v10), (const void *)(*a2 + 696 * a3), 0x2B8uLL);
    unsigned int v10 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    unint64_t v12 = a4 - (unint64_t)v10;
    uint64_t v13 = 696 * v10;
    do
    {
      bzero((void *)(*(void *)a1 + v13), 0x2B8uLL);
      v13 += 696;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 8) = a4;
}

uint64_t sizeObject<WordConfidenceInfo>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  uint64_t v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    int v3 = *(_DWORD *)(a1 + 8);
    uint64_t v4 = 680 * v3;
    if (v3 <= 0) {
      uint64_t v4 = 0;
    }
    v2 += v4;
    if (!a2) {
      v2 += 680 * (*(_DWORD *)(a1 + 12) - v3);
    }
  }
  return v2;
}

void MrecInitModule_multilm_lm(void)
{
  if (!gParDebugLMInterpolationWeights)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugLMInterpolationWeights", (const char *)&unk_2140A5940, (const char *)&unk_2140A5940, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugLMInterpolationWeights = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugLMInterpolationWeights);
  }
}

void MultiLanguageModel::MultiLanguageModel(MultiLanguageModel *this, int a2, const WordList *a3)
{
  LanguageModel::LanguageModel(this, a2, a3);
  *(void *)uint64_t v4 = &unk_26C4E21A0;
  *(_OWORD *)(v4 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_DWORD *)(v4 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)((char *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0u;
  *(_OWORD *)((char *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0u;
  *(_OWORD *)((char *)this + 99) = 0u;
  DgnString::DgnString((DgnString *)(v4 + 120));
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((unsigned char *)this + 152) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *((void *)this + 29) = 0x10000001DLL;
  *((_DWORD *)this + 6pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 68) = 0;
  *((void *)this + 35) = -1;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_DWORD *)this + 14pthread_rwlock_init((pthread_rwlock_t *)this, 0) = -1;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 60pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *((void *)this + 79) = 0xFFFFFFFFFFFFLL;
  *((void *)this + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *((void *)this + 82) = 0;
  *((void *)this + 81) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *(_OWORD *)((char *)this + 70pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
}

void sub_213F326E4(_Unwind_Exception *a1)
{
  DgnArray<DgnString>::releaseAll((uint64_t)(v1 + 12));
  DgnArray<DgnString>::releaseAll(v4);
  DgnIArray<Utterance *>::~DgnIArray(v3);
  DgnIOwnArray<LanguageModel *>::releaseAll(v2);
  LanguageModel::~LanguageModel(v1);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::~MultiLanguageModel(RecentBuffer **this)
{
  *this = (RecentBuffer *)&unk_26C4E21A0;
  DgnDelete<RecentBuffer>(this[1]);
  this[1] = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(this + 88));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 86));
  DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::releaseAll((uint64_t)(this + 84));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 80));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 75));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 73));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 71));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 68));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 66));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 64));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 62));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 60));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 58));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 56));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 54));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 52));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 50));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 48));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 46));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 44));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 42));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 40));
  DgnIOwnArray<PelSegment *>::releaseAll((uint64_t)(this + 38));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 36));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 31));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 27));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 25));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 23));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 21));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 17));
  DgnString::~DgnString((DgnString *)(this + 15));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 12));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 10));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 8));
  DgnIOwnArray<LanguageModel *>::releaseAll((uint64_t)(this + 5));

  LanguageModel::~LanguageModel(this);
}

{
  uint64_t vars8;

  MultiLanguageModel::~MultiLanguageModel(this);

  JUMPOUT(0x216698730);
}

RecentBuffer *DgnDelete<RecentBuffer>(RecentBuffer *result)
{
  if (result)
  {
    RecentBuffer::~RecentBuffer(result);
    return (RecentBuffer *)MemChunkFree(v1, 0);
  }
  return result;
}

void MultiLanguageModel::printSize(MultiLanguageModel *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 542, (DgnString *)&v410);
  if (v411) {
    unint64_t v16 = (void *)v410;
  }
  else {
    unint64_t v16 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A5940, a3, &unk_2140A5940, v16);
  DgnString::~DgnString((DgnString *)&v410);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A5940);
  unint64_t v410 = 0;
  unint64_t v408 = 0;
  unint64_t v409 = 0;
  LanguageModel::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v410, &v409, &v408);
  *a4 += v410;
  *a5 += v409;
  *a6 += v408;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 546, (DgnString *)&v410);
  if (v411) {
    uint64_t v25 = (void *)v410;
  }
  else {
    uint64_t v25 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &unk_2140A5940, (a3 + 1), &unk_2140A5940, v25);
  uint64_t v26 = a3;
  DgnString::~DgnString((DgnString *)&v410);
  uint64_t v407 = (a3 + 1);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v27, v28, v29, v30, v407, &unk_2140A5940);
  unint64_t v31 = *((unsigned int *)this + 12);
  if (v31)
  {
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    do
    {
      uint64_t v36 = *((void *)this + 5);
      if (*(void *)(v36 + 8 * v32))
      {
        unint64_t v410 = 0;
        unint64_t v408 = 0;
        unint64_t v409 = 0;
        (*(void (**)(void, unint64_t, void, unint64_t *, unint64_t *, unint64_t *))(**(void **)(v36 + 8 * v32) + 16))(*(void *)(v36 + 8 * v32), v32, (v26 + 2), &v410, &v409, &v408);
        v35 += v410;
        v34 += v409;
        v33 += v408;
        unint64_t v31 = *((unsigned int *)this + 12);
      }
      ++v32;
    }
    while (v32 < v31);
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v34 = 0;
    uint64_t v33 = 0;
    unint64_t v31 = 0;
  }
  uint64_t v37 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v37 = 16;
  }
  uint64_t v38 = v37 + v35;
  uint64_t v39 = v37 + v34;
  char v40 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v40 = 3;
  }
  uint64_t v41 = v38 + ((unint64_t)*((unsigned int *)this + 13) << v40);
  uint64_t v42 = v39 + (v31 << v40);
  uint64_t v43 = (34 - v26);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 546, (DgnString *)&v410);
  if (v411) {
    uint64_t v48 = (void *)v410;
  }
  else {
    uint64_t v48 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v407, &unk_2140A5940, v43, v43, v48, v41, v42, v33);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v41;
  *a5 += v42;
  *a6 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v49 = 4;
  }
  else {
    uint64_t v49 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 548, (DgnString *)&v410);
  if (v411) {
    uint64_t v54 = (void *)v410;
  }
  else {
    uint64_t v54 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v407, &unk_2140A5940, v43, v43, v54, v49, v49, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v49;
  *a5 += v49;
  uint64_t v55 = sizeObject<DgnString>((uint64_t)this + 80, 0);
  uint64_t v56 = sizeObject<DgnString>((uint64_t)this + 80, 1);
  uint64_t v57 = sizeObject<DgnString>((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 550, (DgnString *)&v410);
  if (v411) {
    uint64_t v62 = (void *)v410;
  }
  else {
    uint64_t v62 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v407, &unk_2140A5940, v43, v43, v62, v55, v56, v57);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v55;
  *a5 += v56;
  *a6 += v57;
  uint64_t v63 = sizeObject<DgnString>((uint64_t)this + 96, 0);
  uint64_t v64 = sizeObject<DgnString>((uint64_t)this + 96, 1);
  uint64_t v65 = sizeObject<DgnString>((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 552, (DgnString *)&v410);
  if (v411) {
    uint64_t v70 = (void *)v410;
  }
  else {
    uint64_t v70 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v407, &unk_2140A5940, v43, v43, v70, v63, v64, v65);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v63;
  *a5 += v64;
  *a6 += v65;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v71 = 12;
  }
  else {
    uint64_t v71 = 16;
  }
  uint64_t v72 = *((unsigned int *)this + 36);
  unsigned int v73 = *((_DWORD *)this + 37);
  if (v73 >= v72)
  {
    uint64_t v74 = 0;
    if ((int)v72 > 0) {
      v71 += 4 * (v72 - 1) + 4;
    }
    uint64_t v75 = v71 + 4 * (v73 - v72);
  }
  else
  {
    uint64_t v74 = 4 * v72;
    uint64_t v75 = v71;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 554, (DgnString *)&v410);
  if (v411) {
    uint64_t v80 = (void *)v410;
  }
  else {
    uint64_t v80 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v407, &unk_2140A5940, v43, v43, v80, v75, v71, v74);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v75;
  *a5 += v71;
  *a6 += v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v85 = (void *)v410;
  }
  else {
    uint64_t v85 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v407, &unk_2140A5940, v43, v43, v85, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v90 = (void *)v410;
  }
  else {
    uint64_t v90 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v407, &unk_2140A5940, v43, v43, v90, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v410);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v95 = (void *)v410;
  }
  else {
    uint64_t v95 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v407, &unk_2140A5940, v43, v43, v95, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v410);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v100 = (void *)v410;
  }
  else {
    uint64_t v100 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v407, &unk_2140A5940, v43, v43, v100, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v410);
  ++*a4;
  ++*a5;
  uint64_t v101 = sizeObject((char *)this + 120);
  uint64_t v102 = sizeObject((char *)this + 120);
  uint64_t v103 = sizeObject((char *)this + 120);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v108 = (void *)v410;
  }
  else {
    uint64_t v108 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v407, &unk_2140A5940, v43, v43, v108, v101, v102, v103);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v101;
  *a5 += v102;
  *a6 += v103;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v113 = (void *)v410;
  }
  else {
    uint64_t v113 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v407, &unk_2140A5940, v43, v43, v113, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v410);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v118 = (void *)v410;
  }
  else {
    uint64_t v118 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v407, &unk_2140A5940, v43, v43, v118, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v123 = (void *)v410;
  }
  else {
    uint64_t v123 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v407, &unk_2140A5940, v43, v43, v123, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  uint64_t v124 = sizeObject<DgnString>((uint64_t)this + 168, 0);
  uint64_t v125 = sizeObject<DgnString>((uint64_t)this + 168, 1);
  uint64_t v126 = sizeObject<DgnString>((uint64_t)this + 168, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v131 = (void *)v410;
  }
  else {
    uint64_t v131 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, v407, &unk_2140A5940, v43, v43, v131, v124, v125, v126);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v124;
  *a5 += v125;
  *a6 += v126;
  uint64_t v132 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 184, 0);
  uint64_t v133 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 184, 1);
  unint64_t v410 = 0;
  uint64_t v411 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v410);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v138 = (void *)v410;
  }
  else {
    uint64_t v138 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v407, &unk_2140A5940, v43, v43, v138, v132, v133, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v132;
  *a5 += v133;
  uint64_t v139 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 200, 0);
  uint64_t v140 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 200, 1);
  unint64_t v410 = 0;
  uint64_t v411 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v410);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    int v145 = (void *)v410;
  }
  else {
    int v145 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v407, &unk_2140A5940, v43, v43, v145, v139, v140, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v139;
  *a5 += v140;
  uint64_t v146 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 216, 0);
  uint64_t v147 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 216, 1);
  unint64_t v410 = 0;
  uint64_t v411 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v410);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v152 = (void *)v410;
  }
  else {
    uint64_t v152 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v407, &unk_2140A5940, v43, v43, v152, v146, v147, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v146;
  *a5 += v147;
  uint64_t v153 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v153 = 16;
  }
  int v154 = *((_DWORD *)this + 64);
  unsigned int v155 = *((_DWORD *)this + 65);
  BOOL v156 = v155 >= v154;
  unsigned int v157 = v155 - v154;
  if (v156)
  {
    if (v154 > 0) {
      v153 += 4 * (v154 - 1) + 4;
    }
    v153 += 4 * v157;
  }
  uint64_t v158 = v153 + 24;
  uint64_t v159 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 62, 1u) + 12;
  uint64_t v160 = *((unsigned int *)this + 64);
  if (v160 <= *((_DWORD *)this + 65)) {
    uint64_t v161 = 0;
  }
  else {
    uint64_t v161 = 4 * v160;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v166 = (void *)v410;
  }
  else {
    uint64_t v166 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v162, v163, v164, v165, v407, &unk_2140A5940, v43, v43, v166, v158, v159, v161);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v158;
  *a5 += v159;
  *a6 += v161;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v171 = (void *)v410;
  }
  else {
    uint64_t v171 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v167, v168, v169, v170, v407, &unk_2140A5940, v43, v43, v171, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    int v176 = (void *)v410;
  }
  else {
    int v176 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v407, &unk_2140A5940, v43, v43, v176, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  uint64_t v177 = sizeObject<DgnString>((uint64_t)this + 352, 0);
  uint64_t v178 = sizeObject<DgnString>((uint64_t)this + 352, 1);
  uint64_t v179 = sizeObject<DgnString>((uint64_t)this + 352, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v184 = (void *)v410;
  }
  else {
    uint64_t v184 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v407, &unk_2140A5940, v43, v43, v184, v177, v178, v179);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v177;
  *a5 += v178;
  *a6 += v179;
  uint64_t v185 = sizeObject<DgnString>((uint64_t)this + 320, 0);
  uint64_t v186 = sizeObject<DgnString>((uint64_t)this + 320, 1);
  uint64_t v187 = sizeObject<DgnString>((uint64_t)this + 320, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v192 = (void *)v410;
  }
  else {
    uint64_t v192 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v188, v189, v190, v191, v407, &unk_2140A5940, v43, v43, v192, v185, v186, v187);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v185;
  *a5 += v186;
  *a6 += v187;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v193 = 12;
  }
  else {
    uint64_t v193 = 16;
  }
  uint64_t v194 = *((unsigned int *)this + 98);
  unsigned int v195 = *((_DWORD *)this + 99);
  if (v195 >= v194)
  {
    uint64_t v196 = 0;
    if ((int)v194 > 0) {
      v193 += 8 * (v194 - 1) + 8;
    }
    uint64_t v197 = v193 + 8 * (v195 - v194);
  }
  else
  {
    uint64_t v196 = 8 * v194;
    uint64_t v197 = v193;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v202 = (void *)v410;
  }
  else {
    uint64_t v202 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v407, &unk_2140A5940, v43, v43, v202, v197, v193, v196);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v197;
  *a5 += v193;
  *a6 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v203 = 12;
  }
  else {
    uint64_t v203 = 16;
  }
  uint64_t v204 = *((unsigned int *)this + 102);
  unsigned int v205 = *((_DWORD *)this + 103);
  if (v205 >= v204)
  {
    uint64_t v206 = 0;
    if ((int)v204 > 0) {
      v203 += 8 * (v204 - 1) + 8;
    }
    uint64_t v207 = v203 + 8 * (v205 - v204);
  }
  else
  {
    uint64_t v206 = 8 * v204;
    uint64_t v207 = v203;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v212 = (void *)v410;
  }
  else {
    uint64_t v212 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v407, &unk_2140A5940, v43, v43, v212, v207, v203, v206);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v207;
  *a5 += v203;
  *a6 += v206;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v213 = 12;
  }
  else {
    uint64_t v213 = 16;
  }
  uint64_t v214 = *((unsigned int *)this + 106);
  unsigned int v215 = *((_DWORD *)this + 107);
  if (v215 >= v214)
  {
    uint64_t v216 = 0;
    if ((int)v214 > 0) {
      v213 += 8 * (v214 - 1) + 8;
    }
    uint64_t v217 = v213 + 8 * (v215 - v214);
  }
  else
  {
    uint64_t v216 = 8 * v214;
    uint64_t v217 = v213;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v222 = (void *)v410;
  }
  else {
    uint64_t v222 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v218, v219, v220, v221, v407, &unk_2140A5940, v43, v43, v222, v217, v213, v216);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v217;
  *a5 += v213;
  *a6 += v216;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v223 = 12;
  }
  else {
    uint64_t v223 = 16;
  }
  uint64_t v224 = *((unsigned int *)this + 110);
  unsigned int v225 = *((_DWORD *)this + 111);
  if (v225 >= v224)
  {
    uint64_t v226 = 0;
    if ((int)v224 > 0) {
      v223 += 8 * (v224 - 1) + 8;
    }
    uint64_t v227 = v223 + 8 * (v225 - v224);
  }
  else
  {
    uint64_t v226 = 8 * v224;
    uint64_t v227 = v223;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v232 = (void *)v410;
  }
  else {
    uint64_t v232 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v228, v229, v230, v231, v407, &unk_2140A5940, v43, v43, v232, v227, v223, v226);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v227;
  *a5 += v223;
  *a6 += v226;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v233 = 12;
  }
  else {
    uint64_t v233 = 16;
  }
  uint64_t v234 = *((unsigned int *)this + 114);
  unsigned int v235 = *((_DWORD *)this + 115);
  if (v235 >= v234)
  {
    uint64_t v236 = 0;
    if ((int)v234 > 0) {
      v233 += 8 * (v234 - 1) + 8;
    }
    uint64_t v237 = v233 + 8 * (v235 - v234);
  }
  else
  {
    uint64_t v236 = 8 * v234;
    uint64_t v237 = v233;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v242 = (void *)v410;
  }
  else {
    uint64_t v242 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v238, v239, v240, v241, v407, &unk_2140A5940, v43, v43, v242, v237, v233, v236);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v237;
  *a5 += v233;
  *a6 += v236;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v243 = 12;
  }
  else {
    uint64_t v243 = 16;
  }
  uint64_t v244 = *((unsigned int *)this + 118);
  unsigned int v245 = *((_DWORD *)this + 119);
  if (v245 >= v244)
  {
    uint64_t v246 = 0;
    if ((int)v244 > 0) {
      uint64_t v243 = (v243 | 2) + 2 * (v244 - 1);
    }
    uint64_t v247 = v243 + 2 * (v245 - v244);
  }
  else
  {
    uint64_t v246 = 2 * v244;
    uint64_t v247 = v243;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v252 = (void *)v410;
  }
  else {
    uint64_t v252 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v248, v249, v250, v251, v407, &unk_2140A5940, v43, v43, v252, v247, v243, v246);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v247;
  *a5 += v243;
  *a6 += v246;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v253 = 12;
  }
  else {
    uint64_t v253 = 16;
  }
  uint64_t v254 = *((unsigned int *)this + 122);
  unsigned int v255 = *((_DWORD *)this + 123);
  if (v255 >= v254)
  {
    uint64_t v256 = 0;
    if ((int)v254 > 0) {
      uint64_t v253 = (v253 | 2) + 2 * (v254 - 1);
    }
    uint64_t v257 = v253 + 2 * (v255 - v254);
  }
  else
  {
    uint64_t v256 = 2 * v254;
    uint64_t v257 = v253;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v262 = (void *)v410;
  }
  else {
    uint64_t v262 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v258, v259, v260, v261, v407, &unk_2140A5940, v43, v43, v262, v257, v253, v256);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v257;
  *a5 += v253;
  *a6 += v256;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v263 = 12;
  }
  else {
    uint64_t v263 = 16;
  }
  uint64_t v264 = *((unsigned int *)this + 126);
  unsigned int v265 = *((_DWORD *)this + 127);
  if (v265 >= v264)
  {
    uint64_t v266 = 0;
    if ((int)v264 > 0) {
      v263 += 8 * (v264 - 1) + 8;
    }
    uint64_t v267 = v263 + 8 * (v265 - v264);
  }
  else
  {
    uint64_t v266 = 8 * v264;
    uint64_t v267 = v263;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    unint64_t v272 = (void *)v410;
  }
  else {
    unint64_t v272 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v268, v269, v270, v271, v407, &unk_2140A5940, v43, v43, v272, v267, v263, v266);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v267;
  *a5 += v263;
  *a6 += v266;
  uint64_t v273 = sizeObject<DgnString>((uint64_t)this + 512, 0);
  uint64_t v274 = sizeObject<DgnString>((uint64_t)this + 512, 1);
  uint64_t v275 = sizeObject<DgnString>((uint64_t)this + 512, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    unint64_t v280 = (void *)v410;
  }
  else {
    unint64_t v280 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v276, v277, v278, v279, v407, &unk_2140A5940, v43, v43, v280, v273, v274, v275);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v273;
  *a5 += v274;
  *a6 += v275;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v281 = 12;
  }
  else {
    uint64_t v281 = 16;
  }
  uint64_t v282 = *((unsigned int *)this + 134);
  unsigned int v283 = *((_DWORD *)this + 135);
  if (v283 >= v282)
  {
    uint64_t v284 = 0;
    if ((int)v282 > 0) {
      v281 += 4 * (v282 - 1) + 4;
    }
    uint64_t v285 = v281 + 4 * (v283 - v282);
  }
  else
  {
    uint64_t v284 = 4 * v282;
    uint64_t v285 = v281;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v290 = (void *)v410;
  }
  else {
    uint64_t v290 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v286, v287, v288, v289, v407, &unk_2140A5940, v43, v43, v290, v285, v281, v284);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v285;
  *a5 += v281;
  *a6 += v284;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v291 = 12;
  }
  else {
    uint64_t v291 = 16;
  }
  int v292 = *((_DWORD *)this + 138);
  unsigned int v293 = *((_DWORD *)this + 139);
  BOOL v156 = v293 >= v292;
  uint64_t v294 = v293 - v292;
  if (v156)
  {
    uint64_t v296 = v292 & ~(v292 >> 31);
    int v292 = 0;
    uint64_t v295 = v291 + v296;
    v291 += v296 + v294;
  }
  else
  {
    uint64_t v295 = v291;
  }
  uint64_t v297 = v292;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    unsigned int v302 = (void *)v410;
  }
  else {
    unsigned int v302 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v298, v299, v300, v301, v407, &unk_2140A5940, v43, v43, v302, v291, v295, v297);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v291;
  *a5 += v295;
  *a6 += v297;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    unsigned int v307 = (void *)v410;
  }
  else {
    unsigned int v307 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v303, v304, v305, v306, v407, &unk_2140A5940, v43, v43, v307, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v308 = 12;
  }
  else {
    uint64_t v308 = 16;
  }
  uint64_t v309 = *((unsigned int *)this + 144);
  unsigned int v310 = *((_DWORD *)this + 145);
  if (v310 >= v309)
  {
    uint64_t v311 = 0;
    if ((int)v309 > 0) {
      v308 += 4 * (v309 - 1) + 4;
    }
    uint64_t v312 = v308 + 4 * (v310 - v309);
  }
  else
  {
    uint64_t v311 = 4 * v309;
    uint64_t v312 = v308;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v317 = (void *)v410;
  }
  else {
    uint64_t v317 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v407, &unk_2140A5940, v43, v43, v317, v312, v308, v311);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v312;
  *a5 += v308;
  *a6 += v311;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v318 = 12;
  }
  else {
    uint64_t v318 = 16;
  }
  uint64_t v319 = *((unsigned int *)this + 148);
  unsigned int v320 = *((_DWORD *)this + 149);
  if (v320 >= v319)
  {
    uint64_t v321 = 0;
    if ((int)v319 > 0) {
      v318 += 4 * (v319 - 1) + 4;
    }
    uint64_t v322 = v318 + 4 * (v320 - v319);
  }
  else
  {
    uint64_t v321 = 4 * v319;
    uint64_t v322 = v318;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v327 = (void *)v410;
  }
  else {
    uint64_t v327 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v323, v324, v325, v326, v407, &unk_2140A5940, v43, v43, v327, v322, v318, v321);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v322;
  *a5 += v318;
  *a6 += v321;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v328 = 12;
  }
  else {
    uint64_t v328 = 16;
  }
  uint64_t v329 = *((unsigned int *)this + 152);
  unsigned int v330 = *((_DWORD *)this + 153);
  if (v330 >= v329)
  {
    uint64_t v331 = 0;
    if ((int)v329 > 0) {
      v328 += 4 * (v329 - 1) + 4;
    }
    uint64_t v332 = v328 + 4 * (v330 - v329);
  }
  else
  {
    uint64_t v331 = 4 * v329;
    uint64_t v332 = v328;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 557, (DgnString *)&v410);
  if (v411) {
    uint64_t v337 = (void *)v410;
  }
  else {
    uint64_t v337 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v333, v334, v335, v336, v407, &unk_2140A5940, v43, v43, v337, v332, v328, v331);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v332;
  *a5 += v328;
  *a6 += v331;
  uint64_t v338 = *((void *)this + 77);
  if (v338)
  {
    unint64_t v410 = 0;
    unint64_t v408 = 0;
    unint64_t v409 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(void *)v338 + 16))(v338, 0xFFFFFFFFLL, v407, &v410, &v409, &v408);
    *a4 += v410;
    *a5 += v409;
    *a6 += v408;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v339 = 4;
  }
  else {
    uint64_t v339 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 560, (DgnString *)&v410);
  if (v411) {
    uint64_t v344 = (void *)v410;
  }
  else {
    uint64_t v344 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v340, v341, v342, v343, v407, &unk_2140A5940, v43, v43, v344, v339, v339, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v339;
  *a5 += v339;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v345 = 4;
  }
  else {
    uint64_t v345 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 562, (DgnString *)&v410);
  if (v411) {
    __int16 v350 = (void *)v410;
  }
  else {
    __int16 v350 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v346, v347, v348, v349, v407, &unk_2140A5940, v43, v43, v350, v345, v345, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v345;
  *a5 += v345;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 564, (DgnString *)&v410);
  if (v411) {
    uint64_t v355 = (void *)v410;
  }
  else {
    uint64_t v355 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v351, v352, v353, v354, v407, &unk_2140A5940, v43, v43, v355, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 566, (DgnString *)&v410);
  if (v411) {
    uint64_t v360 = (void *)v410;
  }
  else {
    uint64_t v360 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v356, v357, v358, v359, v407, &unk_2140A5940, v43, v43, v360, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v361 = 12;
  }
  else {
    uint64_t v361 = 16;
  }
  uint64_t v362 = *((unsigned int *)this + 162);
  unsigned int v363 = *((_DWORD *)this + 163);
  if (v363 >= v362)
  {
    uint64_t v364 = 0;
    if ((int)v362 > 0) {
      v361 += 8 * (v362 - 1) + 8;
    }
    uint64_t v365 = v361 + 8 * (v363 - v362);
  }
  else
  {
    uint64_t v364 = 8 * v362;
    uint64_t v365 = v361;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 568, (DgnString *)&v410);
  if (v411) {
    uint64_t v370 = (void *)v410;
  }
  else {
    uint64_t v370 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v366, v367, v368, v369, v407, &unk_2140A5940, v43, v43, v370, v365, v361, v364);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v365;
  *a5 += v361;
  *a6 += v364;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 570, (DgnString *)&v410);
  if (v411) {
    uint64_t v375 = (void *)v410;
  }
  else {
    uint64_t v375 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v371, v372, v373, v374, v407, &unk_2140A5940, v43, v43, v375, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += 8;
  *a5 += 8;
  uint64_t v376 = sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>((uint64_t)this + 672, 0);
  uint64_t v377 = sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>((uint64_t)this + 672, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 571, (DgnString *)&v410);
  if (v411) {
    uint64_t v382 = (void *)v410;
  }
  else {
    uint64_t v382 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v378, v379, v380, v381, v407, &unk_2140A5940, v43, v43, v382, v376, v377, 0);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v376;
  *a5 += v377;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v383 = 12;
  }
  else {
    uint64_t v383 = 16;
  }
  uint64_t v384 = *((unsigned int *)this + 174);
  unsigned int v385 = *((_DWORD *)this + 175);
  if (v385 >= v384)
  {
    uint64_t v386 = 0;
    if ((int)v384 > 0) {
      uint64_t v383 = (v383 | 2) + 2 * (v384 - 1);
    }
    uint64_t v387 = v383 + 2 * (v385 - v384);
  }
  else
  {
    uint64_t v386 = 2 * v384;
    uint64_t v387 = v383;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 574, (DgnString *)&v410);
  if (v411) {
    uint64_t v392 = (void *)v410;
  }
  else {
    uint64_t v392 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v388, v389, v390, v391, v407, &unk_2140A5940, v43, v43, v392, v387, v383, v386);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v387;
  *a5 += v383;
  *a6 += v386;
  uint64_t v393 = (char *)this + 704;
  uint64_t v394 = CombineTable::sizeObject((uint64_t)this + 704, 0);
  uint64_t v395 = CombineTable::sizeObject((uint64_t)v393, 1);
  uint64_t v396 = CombineTable::sizeObject((uint64_t)v393, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 576, (DgnString *)&v410);
  if (v411) {
    uint64_t v401 = (void *)v410;
  }
  else {
    uint64_t v401 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v397, v398, v399, v400, v407, &unk_2140A5940, v43, v43, v401, v394, v395, v396);
  DgnString::~DgnString((DgnString *)&v410);
  *a4 += v394;
  *a5 += v395;
  *a6 += v396;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 578, (DgnString *)&v410);
  if (v411) {
    uint64_t v406 = (void *)v410;
  }
  else {
    uint64_t v406 = &unk_2140A5940;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v402, v403, v404, v405, v26, &unk_2140A5940, (35 - v26), (35 - v26), v406, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v410);
}

void sub_213F347DC(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

unsigned int *MultiLanguageModel::checkWordIdLmIdValidityAgreement(unsigned int *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = this[29];
  if (v3)
  {
    uint64_t v6 = this;
    for (unint64_t i = 0; i < v3; ++i)
    {
      this = *(unsigned int **)(*((void *)v6 + 5) + 8 * i);
      if (this)
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(void *)this + 208))(this, a2, a3);
        unint64_t v3 = v6[29];
      }
    }
  }
  return this;
}

uint64_t MultiLanguageModel::dumpWordLM(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((_DWORD *)a2 + 2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 654, (uint64_t)"lm/multilm", 121, (uint64_t)"%s", a7, a8, (char)&unk_2140A5940);
  }
  uint64_t v13 = **a2;
  if (*(_DWORD *)(a1 + 116) <= v13) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 657, (uint64_t)"lm/multilm", 122, (uint64_t)"%u %u", a7, a8, **a2);
  }
  if (!*(void *)(*(void *)(a1 + 40) + 8 * v13)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 658, (uint64_t)"lm/multilm", 123, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_MULTI_LM_DUMP_NULL);
  }
  int v14 = *((_DWORD *)a2 + 2);
  unsigned int v15 = v14 - 1;
  if (v14 != 1) {
    memmove(*a2, *a2 + 1, 2 * (v14 - 1));
  }
  *((_DWORD *)a2 + 2) = v15;
  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8 * v13);
  v18[0] = 0;
  v18[1] = 0;
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v18, (uint64_t *)a2, 0, v15);
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 224))(v16, v18, a3, a4, a5);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
}

void sub_213F34BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getWordTransducer(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((_DWORD *)a2 + 2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 672, (uint64_t)"lm/multilm", 121, (uint64_t)"%s", a7, a8, (char)&unk_2140A5940);
  }
  uint64_t v15 = **a2;
  if (*(_DWORD *)(a1 + 116) <= v15) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 675, (uint64_t)"lm/multilm", 122, (uint64_t)"%u %u", a7, a8, **a2);
  }
  if (!*(void *)(*(void *)(a1 + 40) + 8 * v15)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 676, (uint64_t)"lm/multilm", 123, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_MULTI_LM_DUMP_NULL);
  }
  int v16 = *((_DWORD *)a2 + 2);
  unsigned int v17 = v16 - 1;
  if (v16 != 1) {
    memmove(*a2, *a2 + 1, 2 * (v16 - 1));
  }
  *((_DWORD *)a2 + 2) = v17;
  uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8 * v15);
  v20[0] = 0;
  v20[1] = 0;
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v20, (uint64_t *)a2, 0, v17);
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 232))(v18, v20, a3, a4, a5, a6, a7);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
}

void sub_213F34D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::verifyLM(MultiLanguageModel *this, int a2, const char *a3)
{
  if (a2)
  {
    uint64_t v5 = *(unsigned int *)(*((void *)this + 2) + 388);
    if (v5)
    {
      for (unint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = *((void *)this + 2);
        BOOL v8 = i < *(unsigned int *)(v7 + 388) && *(unsigned __int8 *)(*(void *)(v7 + 104) + i) != 0;
        if (*((unsigned char *)this + 112))
        {
          unint64_t v9 = *((unsigned int *)this + 29);
          if (v9)
          {
            uint64_t v10 = 0;
            while (i < *(unsigned int *)(*((void *)this + 71) + 4 * v10)
                 || i > *(unsigned int *)(*((void *)this + 73) + 4 * v10))
            {
              if (v9 == ++v10) {
                goto LABEL_13;
              }
            }
            uint64_t v11 = v10;
            if (!*((_DWORD *)this + 29)) {
              continue;
            }
LABEL_17:
            unint64_t v12 = 0;
            do
            {
              uint64_t v13 = *(void *)(*((void *)this + 5) + 8 * v12);
              if (v13)
              {
                BOOL v14 = v11 == v12 && v8;
                (*(void (**)(uint64_t, unint64_t, BOOL))(*(void *)v13 + 208))(v13, i, v14);
                unint64_t v9 = *((unsigned int *)this + 29);
              }
              ++v12;
            }
            while (v12 < v9);
            continue;
          }
LABEL_13:
          uint64_t v11 = *((unsigned int *)this + 140);
          if (*((_DWORD *)this + 29)) {
            goto LABEL_17;
          }
        }
        else
        {
          (*(void (**)(MultiLanguageModel *, unint64_t, BOOL))(*(void *)this + 208))(this, i, v8);
        }
      }
    }
  }
  unint64_t v15 = *((unsigned int *)this + 29);
  if (v15)
  {
    for (unint64_t j = 0; j < v15; ++j)
    {
      uint64_t v17 = *(void *)(*((void *)this + 5) + 8 * j);
      if (v17)
      {
        (*(void (**)(uint64_t, void, const char *))(*(void *)v17 + 216))(v17, 0, a3);
        unint64_t v15 = *((unsigned int *)this + 29);
      }
    }
  }
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    return MrecInitModule_sdpres_sdapi();
  }
  return result;
}

unsigned int *MultiLanguageModel::beginLMSyncRecog(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result[29];
  if (v3)
  {
    uint64_t v6 = result;
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t result = *(unsigned int **)(*((void *)v6 + 5) + 8 * i);
      if (result
        && (*((unsigned char *)v6 + 112)
         || *((unsigned char *)v6 + 113)
         && *(unsigned char *)(*((void *)v6 + 68) + i)
         && *(double *)(*((void *)v6 + 62) + 8 * i) != 0.0
         || *((unsigned char *)v6 + 114)))
      {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, void))(*(void *)result + 408))(result, a2, *(void *)(*(void *)(a3 + 16) + 8 * i));
        unint64_t v3 = v6[29];
      }
    }
  }
  return result;
}

unsigned int *MultiLanguageModel::beginRescoringInLMSyncRecog(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[29];
  if (v2)
  {
    int v4 = result;
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t result = *(unsigned int **)(*((void *)v4 + 5) + 8 * i);
      if (result
        && (*((unsigned char *)v4 + 112)
         || *((unsigned char *)v4 + 113)
         && *(unsigned char *)(*((void *)v4 + 68) + i)
         && *(double *)(*((void *)v4 + 62) + 8 * i) != 0.0
         || *((unsigned char *)v4 + 114)))
      {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void))(*(void *)result + 416))(result, *(void *)(*(void *)(a2 + 16) + 8 * i));
        unint64_t v2 = v4[29];
      }
    }
  }
  return result;
}

unsigned int *MultiLanguageModel::endLMSyncRecog(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result[29];
  if (v3)
  {
    uint64_t v6 = result;
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t result = *(unsigned int **)(*((void *)v6 + 5) + 8 * i);
      if (result
        && (*((unsigned char *)v6 + 112)
         || *((unsigned char *)v6 + 113)
         && *(unsigned char *)(*((void *)v6 + 68) + i)
         && *(double *)(*((void *)v6 + 62) + 8 * i) != 0.0
         || *((unsigned char *)v6 + 114)))
      {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, void))(*(void *)result + 424))(result, a2, *(void *)(*(void *)(a3 + 16) + 8 * i));
        unint64_t v3 = v6[29];
      }
    }
  }
  return result;
}

unsigned int *MultiLanguageModel::clearLoadedData(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[29];
  if (v2)
  {
    int v4 = result;
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t result = *(unsigned int **)(*((void *)v4 + 5) + 8 * i);
      if (result)
      {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 432))(result, a2);
        unint64_t v2 = v4[29];
      }
    }
  }
  return result;
}

uint64_t MultiLanguageModel::isFinalSilenceScoredVerify(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 29))
  {
    unint64_t v9 = 0;
    int v10 = 0;
    char v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(*((void *)this + 5) + 8 * v9);
      if (*((unsigned char *)this + 112))
      {
        int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 696))(v12);
        int isFinalSilenceScoredVerify = v13;
        if (v9 != *((_DWORD *)this + 140) && v13 != 0)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 856, (uint64_t)"lm/multilm", 32, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NON_DEFAULT_DISPATCH_SCORING_FINAL_SILENCE);
          int isFinalSilenceScoredVerify = 1;
        }
      }
      else
      {
        if (v12) {
          int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 696))(v12);
        }
        else {
          int v16 = 1;
        }
        uint64_t v17 = *(void *)(*((void *)this + 42) + 8 * v9);
        if (v17) {
          int isFinalSilenceScoredVerify = 0;
        }
        else {
          int isFinalSilenceScoredVerify = v16;
        }
        if (v17) {
          BOOL v18 = v16 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18) {
          int isFinalSilenceScoredVerify = WordNgramTemplate::isFinalSilenceScoredVerify(*(WordNgramTemplate **)(*((void *)this + 42) + 8 * v9));
        }
      }
      if (v11)
      {
        if (*((unsigned char *)this + 114) && ((v10 ^ isFinalSilenceScoredVerify) & 1) != 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 868, (uint64_t)"lm/multilm", 1, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_ENDLMID_DISAGREEMENT);
        }
        isFinalSilenceScoredVerify |= v10;
      }
      ++v9;
      char v11 = 1;
      int v10 = isFinalSilenceScoredVerify;
    }
    while (v9 < *((unsigned int *)this + 29));
  }
  else
  {
    LOBYTE(isFinalSilenceScoredVerify) = 0;
  }
  return isFinalSilenceScoredVerify & 1;
}

uint64_t MultiLanguageModel::hasAnyQuadgrams(MultiLanguageModel *this)
{
  unint64_t v1 = *((unsigned int *)this + 29);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * v3);
    if (!v4
      || !*((unsigned char *)this + 112)
      && (!*((unsigned char *)this + 113)
       || !*(unsigned char *)(*((void *)this + 68) + v3)
       || *(double *)(*((void *)this + 62) + 8 * v3) == 0.0)
      && !*((unsigned char *)this + 114))
    {
      goto LABEL_11;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 448))(v4)) {
      return 1;
    }
    unint64_t v1 = *((unsigned int *)this + 29);
LABEL_11:
    if (++v3 >= v1) {
      return 0;
    }
  }
}

uint64_t MultiLanguageModel::tri1HasTrigrams(MultiLanguageModel *this, uint64_t a2)
{
  if (*((unsigned char *)this + 112))
  {
    unint64_t v4 = *((unsigned int *)this + 29);
    if (a2 < 0xFFFFF4)
    {
      if (*((_DWORD *)this + 29))
      {
        uint64_t v10 = 0;
        while (*(_DWORD *)(*((void *)this + 71) + 4 * v10) > a2
             || *(_DWORD *)(*((void *)this + 73) + 4 * v10) < a2)
        {
          if (v4 == ++v10) {
            goto LABEL_26;
          }
        }
      }
      else
      {
LABEL_26:
        LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *((_DWORD *)this + 140);
      }
      uint64_t v11 = *(void *)(*((void *)this + 5) + 8 * v10);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 440))(v11, a2)) {
        return 1;
      }
    }
    else if (*((_DWORD *)this + 29))
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(*((void *)this + 5) + 8 * v5);
        if (v6)
        {
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 440))(v6, a2)) {
            return 1;
          }
          unint64_t v4 = *((unsigned int *)this + 29);
        }
        ++v5;
      }
      while (v5 < v4);
    }
  }
  else
  {
    unint64_t v7 = *((unsigned int *)this + 29);
    if (v7)
    {
      for (unint64_t i = 0; i < v7; ++i)
      {
        uint64_t v9 = *(void *)(*((void *)this + 5) + 8 * i);
        if (v9
          && (*((unsigned char *)this + 113)
           && *(unsigned char *)(*((void *)this + 68) + i)
           && *(double *)(*((void *)this + 62) + 8 * i) != 0.0
           || *((unsigned char *)this + 114)))
        {
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 440))(v9, a2)) {
            return 1;
          }
          unint64_t v7 = *((unsigned int *)this + 29);
        }
      }
    }
  }
  return 0;
}

BOOL MultiLanguageModel::quad1quad2HasQuadgrams(MultiLanguageModel *this, uint64_t a2, uint64_t a3)
{
  if (!*((unsigned char *)this + 112))
  {
    unint64_t v9 = *((unsigned int *)this + 29);
    if (v9)
    {
      for (unint64_t i = 0; i < v9; ++i)
      {
        uint64_t v11 = *(void *)(*((void *)this + 5) + 8 * i);
        if (v11
          && (*((unsigned char *)this + 113)
           && *(unsigned char *)(*((void *)this + 68) + i)
           && *(double *)(*((void *)this + 62) + 8 * i) != 0.0
           || *((unsigned char *)this + 114)))
        {
          if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 456))(v11, a2, a3)) {
            return 1;
          }
          unint64_t v9 = *((unsigned int *)this + 29);
        }
      }
    }
    return 0;
  }
  unint64_t v6 = *((unsigned int *)this + 29);
  if (a2 > 0xFFFFF3)
  {
    if (a3 > 0xFFFFF3)
    {
      if (*((_DWORD *)this + 29))
      {
        unint64_t v7 = 0;
        do
        {
          uint64_t v8 = *(void *)(*((void *)this + 5) + 8 * v7);
          if (v8)
          {
            if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 456))(v8, a2, a3)) {
              return 1;
            }
            unint64_t v6 = *((unsigned int *)this + 29);
          }
          ++v7;
        }
        while (v7 < v6);
      }
      return 0;
    }
    if (*((_DWORD *)this + 29))
    {
      uint64_t v12 = 0;
      while (*(_DWORD *)(*((void *)this + 71) + 4 * v12) > a3
           || *(_DWORD *)(*((void *)this + 73) + 4 * v12) < a3)
      {
        if (v6 == ++v12) {
          goto LABEL_34;
        }
      }
      goto LABEL_48;
    }
LABEL_34:
    LODWORD(v12) = *((_DWORD *)this + 140);
    goto LABEL_48;
  }
  if (a3 <= 0xFFFFF3)
  {
    if (*((_DWORD *)this + 29))
    {
      uint64_t v12 = 0;
      while (*(_DWORD *)(*((void *)this + 71) + 4 * v12) > a2
           || *(_DWORD *)(*((void *)this + 73) + 4 * v12) < a2)
      {
        if (v6 == ++v12) {
          goto LABEL_40;
        }
      }
    }
    else
    {
LABEL_40:
      LODWORD(v12) = *((_DWORD *)this + 140);
    }
    if (*((_DWORD *)this + 29))
    {
      uint64_t v13 = 0;
      while (*(_DWORD *)(*((void *)this + 71) + 4 * v13) > a3
           || *(_DWORD *)(*((void *)this + 73) + 4 * v13) < a3)
      {
        if (v6 == ++v13) {
          goto LABEL_46;
        }
      }
    }
    else
    {
LABEL_46:
      LODWORD(v13) = *((_DWORD *)this + 140);
    }
    if (v12 != v13) {
      return 0;
    }
    goto LABEL_48;
  }
  if (!*((_DWORD *)this + 29)) {
    goto LABEL_34;
  }
  uint64_t v12 = 0;
  while (*(_DWORD *)(*((void *)this + 71) + 4 * v12) > a2
       || *(_DWORD *)(*((void *)this + 73) + 4 * v12) < a2)
  {
    if (v6 == ++v12) {
      goto LABEL_34;
    }
  }
LABEL_48:
  uint64_t v14 = *(void *)(*((void *)this + 5) + 8 * v12);
  return ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 456))(v14, a2, a3) & 1) != 0;
}

uint64_t *MultiLanguageModel::createContextData(MultiLanguageModel *this)
{
  unint64_t v2 = MemChunkAlloc(0x20uLL, 0);
  MultiLMContextData::MultiLMContextData((MultiLMContextData *)v2, *((unsigned int *)this + 29));
  uint64_t v3 = *((unsigned int *)this + 29);
  if ((int)v3 >= 1)
  {
    unint64_t v4 = v3 + 1;
    do
    {
      uint64_t v5 = (v4 - 2);
      uint64_t v6 = *(void *)(*((void *)this + 5) + 8 * v5);
      if (v6) {
        *(void *)(v2[2] + 8 * v5) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 464))(v6);
      }
      --v4;
    }
    while (v4 > 1);
  }
  return v2;
}

uint64_t MultiLanguageModel::setContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(a1 + 116))
  {
    for (unint64_t i = 0; i < *(unsigned int *)(a1 + 116); ++i)
    {
      if (*(unsigned char *)(a1 + 112))
      {
        uint64_t v13 = *(unsigned int *)(a2 + 8);
        unint64_t v32 = 0;
        uint64_t v33 = 0;
        if (v13)
        {
          uint64_t v34 = 0;
          unint64_t v14 = realloc_array(0, &v34, 4 * v13, 0, 0, 1);
          unint64_t v15 = v34;
          unint64_t v32 = v34;
          int v16 = *(_DWORD *)(a2 + 8);
          LODWORD(v33) = v13;
          HIDWORD(v33) = v14 >> 2;
          if (v16)
          {
            unint64_t v17 = 0;
            uint64_t v18 = *(void *)a2;
            do
            {
              unsigned int v19 = *(_DWORD *)(v18 + 4 * v17);
              if (v19 <= 0xFFFFF3)
              {
                uint64_t v20 = *(unsigned int *)(a1 + 116);
                if (v20)
                {
                  uint64_t v21 = 0;
                  while (*(_DWORD *)(*(void *)(a1 + 568) + 4 * v21) > v19
                       || *(_DWORD *)(*(void *)(a1 + 584) + 4 * v21) < v19)
                  {
                    if (v20 == ++v21) {
                      goto LABEL_13;
                    }
                  }
                  uint64_t v22 = v21;
                }
                else
                {
LABEL_13:
                  uint64_t v22 = *(unsigned int *)(a1 + 560);
                }
                if (i != v22) {
                  unsigned int v19 = 0xFFFFFF;
                }
              }
              v15[v17++] = v19;
            }
            while (v17 < *(unsigned int *)(a2 + 8));
          }
        }
        else
        {
          LODWORD(v33) = 0;
        }
        if (i == *(_DWORD *)(a1 + 560)) {
          uint64_t v30 = a3;
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8 * i);
        (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, void))(*(void *)v29 + 472))(v29, &v32, v30, a4, a5, *(void *)(*(void *)(a6 + 16) + 8 * i));
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
        continue;
      }
      uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8 * i);
      if (v23)
      {
        if (*(unsigned char *)(a1 + 113)
          && *(unsigned char *)(*(void *)(a1 + 544) + i)
          && *(double *)(*(void *)(a1 + 496) + 8 * i) != 0.0)
        {
          goto LABEL_42;
        }
        if (*(unsigned char *)(a1 + 114))
        {
          if (a3)
          {
            unint64_t v24 = *(unsigned int *)(a3 + 8);
            if (v24)
            {
              uint64_t v25 = 0;
              BOOL v26 = 1;
              do
              {
                int v27 = *(_DWORD *)(*(void *)a3 + 4 * v25);
                if (v27 == 0xFFFF) {
                  uint64_t v28 = *(void *)(a1 + 384);
                }
                else {
                  uint64_t v28 = *(void *)(*(void *)(a1 + 200) + 16 * (v27 - 1));
                }
                if (*(double *)(v28 + 8 * i) != 0.0) {
                  break;
                }
                BOOL v26 = ++v25 < v24;
              }
              while (v24 != v25);
              if (!v26) {
                continue;
              }
LABEL_42:
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v23 + 472))(v23, a2, a3, a4, a5, *(void *)(*(void *)(a6 + 16) + 8 * i));
              continue;
            }
          }
          if (*(double *)(*(void *)(a1 + 384) + 8 * i) != 0.0) {
            goto LABEL_42;
          }
        }
      }
    }
  }
  return LanguageModel::setContext(a1, a2, a3, a4, a5, a6);
}

void sub_213F35C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::unsetContext(MultiLanguageModel *this, LMContextData *a2)
{
  unint64_t v4 = *((unsigned int *)this + 29);
  if (v4)
  {
    for (unint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v6
        && (*((unsigned char *)this + 112)
         || *((unsigned char *)this + 113)
         && *(unsigned char *)(*((void *)this + 68) + i)
         && *(double *)(*((void *)this + 62) + 8 * i) != 0.0
         || *((unsigned char *)this + 114)))
      {
        (*(void (**)(uint64_t, void))(*(void *)v6 + 480))(v6, *(void *)(*((void *)a2 + 2) + 8 * i));
        unint64_t v4 = *((unsigned int *)this + 29);
      }
    }
  }

  LanguageModel::unsetContext(this, a2);
}

uint64_t MultiLanguageModel::mayWordBeIgnoredInContext(MultiLanguageModel *this, uint64_t a2)
{
  unint64_t v4 = *((unsigned int *)this + 29);
  if (!*((unsigned char *)this + 112))
  {
    if (!*((_DWORD *)this + 29)) {
      return 0;
    }
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(*((void *)this + 5) + 8 * v8);
      if (v9
        && (*((unsigned char *)this + 113)
         && *(unsigned char *)(*((void *)this + 68) + v8)
         && *(double *)(*((void *)this + 62) + 8 * v8) != 0.0
         || *((unsigned char *)this + 114)))
      {
        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 488))(v9, a2)) {
          return 1;
        }
        unint64_t v4 = *((unsigned int *)this + 29);
      }
      if (++v8 >= v4) {
        return 0;
      }
    }
  }
  if (*((_DWORD *)this + 29))
  {
    uint64_t v5 = 0;
    while (*(_DWORD *)(*((void *)this + 71) + 4 * v5) > a2
         || *(_DWORD *)(*((void *)this + 73) + 4 * v5) < a2)
    {
      if (v4 == ++v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    LODWORD(v5) = *((_DWORD *)this + 140);
  }
  uint64_t v6 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 8 * v5) + 488);

  return v6();
}

uint64_t MultiLanguageModel::getNumLoadedBigramBytes(MultiLanguageModel *this)
{
  unint64_t v1 = *((unsigned int *)this + 29);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(void *)v5 + 240))(v5);
      unint64_t v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

uint64_t MultiLanguageModel::getNumLoadedTrigramBytes(MultiLanguageModel *this)
{
  unint64_t v1 = *((unsigned int *)this + 29);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(void *)v5 + 248))(v5);
      unint64_t v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

uint64_t MultiLanguageModel::getNumLoadedQuadgramBytes(MultiLanguageModel *this)
{
  unint64_t v1 = *((unsigned int *)this + 29);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(void *)v5 + 256))(v5);
      unint64_t v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

uint64_t MultiLanguageModel::getDefaultRestrictRange(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  if (*(unsigned char *)(this + 112) && *(_DWORD *)(this + 576) >= 2u)
  {
    *a2 = *(_DWORD *)(*(void *)(this + 568) + 4);
    unsigned int v3 = *(_DWORD *)(*(void *)(this + 584) + 4 * (*(_DWORD *)(this + 592) - 1));
  }
  else
  {
    unsigned int v3 = 0xFFFFFF;
    *a2 = 0xFFFFFF;
  }
  *a3 = v3;
  return this;
}

uint64_t MultiLanguageModel::getValidTopicLmSlots(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 104);
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 12);
    if (v2 <= v4)
    {
      *(_DWORD *)(a2 + 8) = v2;
      if (!v2) {
        return v2;
      }
    }
    else
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, v2 - v4, 0);
      *(_DWORD *)(a2 + 8) = v2;
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)a2;
    do
    {
      *(_DWORD *)(v6 + 4 * v5) = v5 + 1;
      ++v5;
    }
    while (v2 != v5);
  }
  return v2;
}

DgnString *MultiLanguageModel::getTopicLmSlotNames(DgnString *result, unsigned int *a2)
{
  if (*((_DWORD *)result + 29))
  {
    unsigned int v3 = result;
    uint64_t v4 = 0;
    for (unint64_t i = 0; i < *((unsigned int *)v3 + 29); ++i)
    {
      int v6 = *(_DWORD *)(*((void *)v3 + 17) + 4 * i);
      if (v6 == 1)
      {
        int v7 = DgnArray<DgnString>::find(a2, *((void *)v3 + 44) + v4);
        if (v7 != -1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1319, (uint64_t)"lm/multilm", 93, (uint64_t)"%u %u %.500s", v8, v9, v7);
        }
        uint64_t v12 = *((void *)v3 + 44);
        uint64_t v13 = a2[2];
        if (v13 == a2[3])
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, 1, 1);
          uint64_t v13 = a2[2];
        }
        uint64_t result = DgnString::DgnString((DgnString *)(*(void *)a2 + 16 * v13), (const DgnString *)(v12 + v4));
        ++a2[2];
      }
      else if (*((unsigned char *)v3 + 112))
      {
        if (v6 == 3 && i == *((_DWORD *)v3 + 140))
        {
LABEL_13:
          uint64_t v11 = *(void **)(*((void *)v3 + 5) + 8 * i);
          if (v11) {
          uint64_t result = (DgnString *)MultiLanguageModel::getTopicLmSlotNames(v11, a2);
          }
        }
      }
      else if (v6 == 3)
      {
        goto LABEL_13;
      }
      v4 += 16;
    }
  }
  return result;
}

uint64_t MultiLanguageModel::getTopicLmSlotId(MultiLanguageModel *this, const DgnString *a2)
{
  int v2 = DgnArray<DgnString>::find((unsigned int *)this + 24, (uint64_t)a2);
  if (v2 == -1) {
    return 0xFFFFLL;
  }
  else {
    return (v2 + 1);
  }
}

DgnString *MultiLanguageModel::setTopicLmSlotName(MultiLanguageModel *this, int a2, const char **a3)
{
  if (*((_DWORD *)a3 + 2)) {
    int v6 = *a3;
  }
  else {
    int v6 = (const char *)&unk_2140A5940;
  }
  if ((isValidName(v6) & 1) == 0)
  {
    if (*((_DWORD *)a3 + 2)) {
      uint64_t v9 = *a3;
    }
    else {
      uint64_t v9 = (const char *)&unk_2140A5940;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1357, (uint64_t)"lm/multilm", 92, (uint64_t)"%.500s", v7, v8, (char)v9);
  }
  uint64_t v10 = (a2 - 1);
  if (v10 >= *((_DWORD *)this + 26)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1365, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v7, v8, a2);
  }
  uint64_t v11 = *((void *)this + 12) + 16 * v10;
  if (*(void *)v11)
  {
    MemChunkFree(*(void **)v11, 0);
    *(void *)uint64_t v11 = 0;
  }
  *(void *)(v11 + 8) = 0;
  int v12 = DgnArray<DgnString>::find((unsigned int *)this + 24, (uint64_t)a3);
  if (v12 != -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1370, (uint64_t)"lm/multilm", 93, (uint64_t)"%u %u %.500s", v13, v14, v12);
  }
  int v15 = DgnArray<DgnString>::find((unsigned int *)this + 20, (uint64_t)a3);
  if (v15 != -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1374, (uint64_t)"lm/multilm", 94, (uint64_t)"%u %u %.500s", v16, v17, v15);
  }
  DgnString::operator=((DgnString *)(*((void *)this + 12) + 16 * v10), (DgnString *)a3);
  unsigned int v24 = 0;
  unsigned int v25 = a2 - 1;
  BOOL v26 = 0;
  MultiLanguageModel::getInternalTopicLmSlot((uint64_t)this, &v25, &v26, &v24);
  uint64_t v20 = v26;
  uint64_t v21 = v24;
  if (v24 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1384, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v18, v19, a2);
  }
  uint64_t v22 = (DgnString *)(*((void *)v20 + 44) + 16 * v21);

  return DgnString::operator=(v22, (DgnString *)a3);
}

uint64_t MultiLanguageModel::getTopicLmSlotName(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2 - 1;
  if ((a2 - 1) >= *((_DWORD *)this + 26)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1400, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", a7, a8, a2);
  }
  return *((void *)this + 12) + 16 * v9;
}

BOOL MultiLanguageModel::hasTopicLM(MultiLanguageModel *this, int a2)
{
  char v2 = a2;
  unsigned int v9 = a2 - 1;
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  MultiLanguageModel::getInternalTopicLmSlot((uint64_t)this, &v9, &v8, &v7);
  uint64_t v5 = v7;
  if (v7 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1414, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v3, v4, v2);
  }
  return *(void *)(*((void *)v8 + 5) + 8 * v5) != 0;
}

uint64_t MultiLanguageModel::getInternalTopicLmSlot(uint64_t this, unsigned int *a2, const MultiLanguageModel **a3, unsigned int *a4)
{
  *a3 = 0;
  *a4 = -1;
  if (*(_DWORD *)(this + 116))
  {
    uint64_t v7 = this;
    for (unint64_t i = 0; i < *(unsigned int *)(v7 + 116); ++i)
    {
      int v9 = *(_DWORD *)(*(void *)(v7 + 136) + 4 * i);
      if (v9 == 1)
      {
        if (!*a2)
        {
          *a3 = (const MultiLanguageModel *)v7;
          *a4 = i;
          return this;
        }
        --*a2;
      }
      else
      {
        if (*(unsigned char *)(v7 + 112))
        {
          if (v9 != 3 || i != *(_DWORD *)(v7 + 560)) {
            continue;
          }
        }
        else if (v9 != 3)
        {
          continue;
        }
        uint64_t v11 = *(void **)(*(void *)(v7 + 40) + 8 * i);
        if (v11) {
        this = MultiLanguageModel::getInternalTopicLmSlot((MultiLanguageModel *)v11, a2, a3, a4);
        }
        if (*a4 != -1) {
          return this;
        }
      }
    }
  }
  return this;
}

uint64_t MultiLanguageModel::deleteTopicLMs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 616)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1424, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"deleteTopicLMs");
  }
  size_t v10 = *(unsigned int *)(a1 + 104);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v21, *(_DWORD *)(a1 + 104));
  if (v10) {
    bzero(v21[0], v10);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = (*(_DWORD *)(*(void *)a2 + 4 * v16) - 1);
      if (v17 >= v10) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1439, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v14, v15, *(_DWORD *)(*(void *)a2 + 4 * v16));
      }
      uint64_t v18 = v21[0];
      if (*((unsigned char *)v21[0] + v17))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1442, (uint64_t)"lm/multilm", 96, (uint64_t)"%u", v14, v15, *(_DWORD *)(*(void *)a2 + 4 * v16));
        uint64_t v18 = v21[0];
      }
      v18[v17] = 1;
      ++v16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  int v20 = 0;
  MultiLanguageModel::deleteTopicLMsInternal(a1, (uint64_t)v21, &v20, v11, v12, v13, v14, v15);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
}

void sub_213F3687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::deleteTopicLMsInternal(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v26[0] = 0;
  v26[1] = 0;
  if (*(unsigned char *)(a1 + 114)) {
    DgnPrimArray<double>::copyArraySlice((uint64_t)v26, (uint64_t *)(a1 + 384), 0, *(_DWORD *)(a1 + 392));
  }
  if (*(_DWORD *)(a1 + 116))
  {
    uint64_t v11 = 0;
    char v12 = 0;
    while (1)
    {
      uint64_t v13 = *a3;
      if (v13 >= *(_DWORD *)(a2 + 8))
      {
LABEL_25:
        if (*(unsigned char *)(a1 + 114) && (v12 & 1) != 0)
        {
          (*(void (**)(uint64_t, void *))(*(void *)a1 + 496))(a1, v26);
          MultiLanguageModel::adjustNamedWeightsSets(a1, v18, v19, v20, v21, v22, v23, v24);
        }
        return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v26);
      }
      int v14 = *(_DWORD *)(*(void *)(a1 + 136) + 4 * v11);
      if (v14 == 1)
      {
        if (*(unsigned char *)(*(void *)a2 + v13))
        {
          uint64_t v15 = *(void (****)(void))(*(void *)(a1 + 40) + 8 * v11);
          if (!v15)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1474, (uint64_t)"lm/multilm", 22, (uint64_t)"%u", a7, a8, *a3);
            uint64_t v15 = *(void (****)(void))(*(void *)(a1 + 40) + 8 * v11);
          }
          DgnDelete<LanguageModel>(v15);
          *(void *)(*(void *)(a1 + 40) + 8 * v11) = 0;
          if (*(unsigned char *)(a1 + 114)) {
            *(void *)(v26[0] + 8 * v11) = 0;
          }
          char v12 = 1;
        }
        ++*a3;
      }
      else if (*(unsigned char *)(a1 + 112))
      {
        if (v14 == 3 && v11 == *(_DWORD *)(a1 + 560))
        {
LABEL_21:
          uint64_t v17 = *(void **)(*(void *)(a1 + 40) + 8 * v11);
          if (v17) {
          MultiLanguageModel::deleteTopicLMsInternal(v17, a2, a3);
          }
        }
      }
      else if (v14 == 3)
      {
        goto LABEL_21;
      }
      if (++v11 >= (unint64_t)*(unsigned int *)(a1 + 116)) {
        goto LABEL_25;
      }
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v26);
}

void sub_213F36A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::adjustNamedWeightsSets(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(unsigned int *)(this + 176);
  if (v8)
  {
    uint64_t v9 = this;
    unint64_t v10 = 0;
    uint64_t v11 = 8;
    do
    {
      if (*(_DWORD *)(*(void *)(v9 + 168) + v11) >= 2u)
      {
        this = MultiLanguageModel::adjustNamedWeightsSet((MultiLanguageModel *)v9, v10, a3, a4, a5, a6, a7, a8);
        unint64_t v8 = *(unsigned int *)(v9 + 176);
      }
      ++v10;
      v11 += 16;
    }
    while (v10 < v8);
  }
  return this;
}

uint64_t MultiLanguageModel::getValidFactoryCorrectiveLms(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 12);
    if (v2 <= v4)
    {
      *(_DWORD *)(a2 + 8) = v2;
      if (!v2) {
        return v2;
      }
    }
    else
    {
      DgnPrimArray<unsigned int>::reallocElts(a2, v2 - v4, 0);
      *(_DWORD *)(a2 + 8) = v2;
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)a2;
    do
    {
      *(_DWORD *)(v6 + 4 * v5) = v5 + 1;
      ++v5;
    }
    while (v2 != v5);
  }
  return v2;
}

DgnString *MultiLanguageModel::getFactoryCorrectiveLmNames(DgnString *result, unsigned int *a2)
{
  if (*((_DWORD *)result + 29))
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    for (unint64_t i = 0; i < *((unsigned int *)v3 + 29); ++i)
    {
      int v6 = *(_DWORD *)(*((void *)v3 + 17) + 4 * i);
      if (v6 == 2)
      {
        int v7 = DgnArray<DgnString>::find(a2, *((void *)v3 + 64) + v4);
        if (v7 != -1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1539, (uint64_t)"lm/multilm", 88, (uint64_t)"%u %u %.500s", v8, v9, v7);
        }
        uint64_t v12 = *((void *)v3 + 64);
        uint64_t v13 = a2[2];
        if (v13 == a2[3])
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, 1, 1);
          uint64_t v13 = a2[2];
        }
        uint64_t result = DgnString::DgnString((DgnString *)(*(void *)a2 + 16 * v13), (const DgnString *)(v12 + v4));
        ++a2[2];
      }
      else if (*((unsigned char *)v3 + 112))
      {
        if (v6 == 3 && i == *((_DWORD *)v3 + 140))
        {
LABEL_13:
          uint64_t v11 = *(void **)(*((void *)v3 + 5) + 8 * i);
          if (v11) {
          uint64_t result = (DgnString *)MultiLanguageModel::getFactoryCorrectiveLmNames(v11, a2);
          }
        }
      }
      else if (v6 == 3)
      {
        goto LABEL_13;
      }
      v4 += 16;
    }
  }
  return result;
}

uint64_t MultiLanguageModel::getFactoryCorrectiveLmId(MultiLanguageModel *this, const DgnString *a2)
{
  int v2 = DgnArray<DgnString>::find((unsigned int *)this + 20, (uint64_t)a2);
  if (v2 == -1) {
    return 0xFFFFLL;
  }
  else {
    return (v2 + 1);
  }
}

DgnString *MultiLanguageModel::setFactoryCorrectiveLmName(MultiLanguageModel *this, int a2, const char **a3)
{
  if (*((_DWORD *)a3 + 2)) {
    int v6 = *a3;
  }
  else {
    int v6 = (const char *)&unk_2140A5940;
  }
  if ((isValidName(v6) & 1) == 0)
  {
    if (*((_DWORD *)a3 + 2)) {
      uint64_t v9 = *a3;
    }
    else {
      uint64_t v9 = (const char *)&unk_2140A5940;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1579, (uint64_t)"lm/multilm", 99, (uint64_t)"%.500s", v7, v8, (char)v9);
  }
  uint64_t v10 = (a2 - 1);
  if (v10 >= *((_DWORD *)this + 22)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1587, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", v7, v8, a2);
  }
  uint64_t v11 = *((void *)this + 10) + 16 * v10;
  if (*(void *)v11)
  {
    MemChunkFree(*(void **)v11, 0);
    *(void *)uint64_t v11 = 0;
  }
  *(void *)(v11 + 8) = 0;
  int v12 = DgnArray<DgnString>::find((unsigned int *)this + 20, (uint64_t)a3);
  if (v12 != -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1592, (uint64_t)"lm/multilm", 88, (uint64_t)"%u %u %.500s", v13, v14, v12);
  }
  if (DgnArray<DgnString>::find((unsigned int *)this + 24, (uint64_t)a3) != -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1596, (uint64_t)"lm/multilm", 94, (uint64_t)"%u %u %.500s", v15, v16, a2 - 1);
  }
  DgnString::operator=((DgnString *)(*((void *)this + 10) + 16 * v10), (DgnString *)a3);
  unsigned int v24 = a2 - 1;
  uint64_t v23 = 0;
  unsigned int v22 = 0;
  MultiLanguageModel::getInternalFactoryCorrectiveLm((uint64_t)this, &v24, &v23, &v22);
  uint64_t v19 = v22;
  if (v22 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1607, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", v17, v18, a2);
  }
  uint64_t v20 = (DgnString *)(*((void *)v23 + 64) + 16 * v19);

  return DgnString::operator=(v20, (DgnString *)a3);
}

uint64_t MultiLanguageModel::getInternalFactoryCorrectiveLm(uint64_t this, unsigned int *a2, MultiLanguageModel **a3, unsigned int *a4)
{
  *a3 = 0;
  *a4 = -1;
  if (*(_DWORD *)(this + 116))
  {
    uint64_t v7 = this;
    for (unint64_t i = 0; i < *(unsigned int *)(v7 + 116); ++i)
    {
      int v9 = *(_DWORD *)(*(void *)(v7 + 136) + 4 * i);
      if (v9 == 2)
      {
        if (!*a2)
        {
          *a3 = (MultiLanguageModel *)v7;
          *a4 = i;
          return this;
        }
        --*a2;
      }
      else if (*(unsigned char *)(v7 + 112))
      {
        if (v9 == 3 && i == *(_DWORD *)(v7 + 560))
        {
LABEL_13:
          this = MultiLanguageModel::getInternalFactoryCorrectiveLm(*(MultiLanguageModel **)(*(void *)(v7 + 40) + 8 * i), a2, a3, a4);
          if (*a4 != -1) {
            return this;
          }
        }
      }
      else if (v9 == 3)
      {
        goto LABEL_13;
      }
    }
  }
  return this;
}

uint64_t MultiLanguageModel::getFactoryCorrectiveLmName(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2 - 1;
  if ((a2 - 1) >= *((_DWORD *)this + 22)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1660, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", a7, a8, a2);
  }
  return *((void *)this + 10) + 16 * v9;
}

uint64_t MultiLanguageModel::getActiveFactoryCorrectiveLms(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 616)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1671, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"getActiveFactoryCorrectiveLms");
  }
  size_t v11 = *(unsigned int *)(a1 + 88);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v20, *(_DWORD *)(a1 + 88));
  int v19 = 0;
  (*(void (**)(uint64_t, void *, int *))(*(void *)a1 + 704))(a1, v20, &v19);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v18, v11);
  if (v11) {
    bzero(v18[0], v11);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = (*(_DWORD *)(*(void *)a2 + 4 * v14) - 1);
      if (v15 >= v11) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1693, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", v12, v13, *(_DWORD *)(*(void *)a2 + 4 * v14));
      }
      uint64_t v16 = v18[0];
      if (*((unsigned char *)v18[0] + v15))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1696, (uint64_t)"lm/multilm", 90, (uint64_t)"%u", v12, v13, *(_DWORD *)(*(void *)a2 + 4 * v14));
        uint64_t v16 = v18[0];
      }
      v16[v15] = 1;
      *(unsigned char *)(*a3 + v14++) = *(unsigned char *)(v20[0] + v15);
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
}

void sub_213F372B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getActiveFactoryCorrectiveLmsInternal(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)(result + 116))
  {
    uint64_t v5 = result;
    for (unint64_t i = 0; i < *(unsigned int *)(v5 + 116); ++i)
    {
      uint64_t v7 = *a3;
      if (v7 >= *(_DWORD *)(a2 + 8)) {
        return result;
      }
      int v8 = *(_DWORD *)(*(void *)(v5 + 136) + 4 * i);
      if (v8 == 2)
      {
        *(unsigned char *)(*(void *)a2 + v7) = *(unsigned char *)(*(void *)(v5 + 544) + i);
        *a3 = v7 + 1;
      }
      else
      {
        if (*(unsigned char *)(v5 + 112))
        {
          if (v8 != 3 || i != *(_DWORD *)(v5 + 560)) {
            continue;
          }
LABEL_13:
          uint64_t v10 = *(void **)(*(void *)(v5 + 40) + 8 * i);
          if (v10) {
          uint64_t result = (*(uint64_t (**)(void *, uint64_t, _DWORD *))(*(void *)v10 + 704))(v10, a2, a3);
          }
          continue;
        }
        if (v8 == 3) {
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

uint64_t MultiLanguageModel::setActiveFactoryCorrectiveLms(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 616)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1736, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"setActiveFactoryCorrectiveLms");
  }
  uint64_t v11 = *(unsigned int *)(a1 + 88);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = a1;
  if (v11)
  {
    __b = 0;
    unint64_t v12 = realloc_array(0, &__b, 4 * v11, 0, 0, 1);
    uint64_t v13 = __b;
    uint64_t v18 = __b;
    LODWORD(v19) = v11;
    HIDWORD(v19) = v12 >> 2;
    memset(__b, 255, 4 * v11);
  }
  else
  {
    uint64_t v13 = 0;
    LODWORD(v19) = 0;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = (*(_DWORD *)(*(void *)a2 + 4 * v14) - 1);
      if (v15 >= v11)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1752, (uint64_t)"lm/multilm", 89, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(void *)a2 + 4 * v14));
        uint64_t v13 = v18;
      }
      if (v13[v15] != -1)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1755, (uint64_t)"lm/multilm", 90, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(void *)a2 + 4 * v14));
        uint64_t v13 = v18;
      }
      v13[v15] = *(unsigned __int8 *)(*a3 + v14++);
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  LODWORD(__b) = 0;
  MultiLanguageModel::setActiveFactoryCorrectiveLmsInternal(v17, &v18, &__b);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
}

void sub_213F375DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::setActiveFactoryCorrectiveLmsInternal(uint64_t result, void *a2, _DWORD *a3)
{
  if (*(_DWORD *)(result + 116))
  {
    uint64_t v5 = result;
    for (unint64_t i = 0; i < *(unsigned int *)(v5 + 116); ++i)
    {
      int v7 = *(_DWORD *)(*(void *)(v5 + 136) + 4 * i);
      if (v7 == 2)
      {
        uint64_t v8 = *a3;
        int v9 = *(_DWORD *)(*a2 + 4 * v8);
        if (v9 != -1) {
          *(unsigned char *)(*(void *)(v5 + 544) + i) = v9 != 0;
        }
        *a3 = v8 + 1;
      }
      else if (*(unsigned char *)(v5 + 112))
      {
        if (v7 == 3 && i == *(_DWORD *)(v5 + 560))
        {
LABEL_14:
          uint64_t v11 = *(void **)(*(void *)(v5 + 40) + 8 * i);
          if (v11) {
          uint64_t result = MultiLanguageModel::setActiveFactoryCorrectiveLmsInternal(v11, a2, a3);
          }
        }
      }
      else if (v7 == 3)
      {
        goto LABEL_14;
      }
    }
  }
  return result;
}

WordNgramTemplate **MultiLanguageModel::addWord(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 112))
  {
    unsigned int v11 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 256) + 4 * a2);
    if (v11 != a2)
    {
      uint64_t v12 = *((unsigned int *)this + 29);
      if (v12)
      {
        uint64_t v13 = 0;
        while (*(_DWORD *)(*((void *)this + 71) + 4 * v13) > v11
             || *(_DWORD *)(*((void *)this + 73) + 4 * v13) < v11)
        {
          if (v12 == ++v13) {
            goto LABEL_11;
          }
        }
        if (*((_DWORD *)this + 140) != v13) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1803, (uint64_t)"lm/multilm", 116, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(void *)(*((void *)this + 2) + 256) + 4 * a2));
        }
      }
    }
LABEL_11:
    if (a3 != 0xFFFFFF)
    {
      uint64_t v14 = *((unsigned int *)this + 29);
      if (v14)
      {
        uint64_t v15 = 0;
        while (*(_DWORD *)(*((void *)this + 71) + 4 * v15) > a3
             || *(_DWORD *)(*((void *)this + 73) + 4 * v15) < a3)
        {
          if (v14 == ++v15) {
            goto LABEL_20;
          }
        }
        if (*((_DWORD *)this + 140) != v15) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1808, (uint64_t)"lm/multilm", 38, (uint64_t)"%u", a7, a8, a3);
        }
      }
    }
  }
LABEL_20:
  if (*((_DWORD *)this + 29))
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(void *)(*((void *)this + 5) + 8 * v16);
      if (v17)
      {
        if (*((unsigned char *)this + 112) && v16 != *((_DWORD *)this + 140)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 368))(v17, a2);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 360))(v17, a2, a3);
        }
      }
      ++v16;
    }
    while (v16 < *((unsigned int *)this + 29));
  }
  uint64_t result = (WordNgramTemplate **)*((void *)this + 77);
  if (result)
  {
    return (WordNgramTemplate **)WordLanguageModel::addWordDuringBuild(result, a2);
  }
  return result;
}

unsigned int *MultiLanguageModel::addUnmappedWord(unsigned int *this, uint64_t a2)
{
  unint64_t v2 = this[29];
  if (v2)
  {
    uint64_t v4 = this;
    for (unint64_t i = 0; i < v2; ++i)
    {
      this = *(unsigned int **)(*((void *)v4 + 5) + 8 * i);
      if (this)
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)this + 368))(this, a2);
        unint64_t v2 = v4[29];
      }
    }
  }
  return this;
}

void MultiLanguageModel::deleteWord(MultiLanguageModel *this, uint64_t a2, BOOL *a3, BOOL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 112))
  {
    uint64_t v12 = *((unsigned int *)this + 29);
    if (v12)
    {
      uint64_t v13 = 0;
      while (*(_DWORD *)(*((void *)this + 71) + 4 * v13) > a2
           || *(_DWORD *)(*((void *)this + 73) + 4 * v13) < a2)
      {
        if (v12 == ++v13) {
          goto LABEL_10;
        }
      }
      if (*((_DWORD *)this + 140) != v13) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1856, (uint64_t)"lm/multilm", 39, (uint64_t)"%u", a7, a8, a2);
      }
    }
LABEL_10:
    unsigned int v14 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 256) + 4 * a2);
    if (v14 != a2)
    {
      uint64_t v15 = *((unsigned int *)this + 29);
      if (v15)
      {
        uint64_t v16 = 0;
        while (*(_DWORD *)(*((void *)this + 71) + 4 * v16) > v14
             || *(_DWORD *)(*((void *)this + 73) + 4 * v16) < v14)
        {
          if (v15 == ++v16) {
            goto LABEL_19;
          }
        }
        if (*((_DWORD *)this + 140) != v16) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1861, (uint64_t)"lm/multilm", 40, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(void *)(*((void *)this + 2) + 256) + 4 * a2));
        }
      }
    }
  }
LABEL_19:
  unint64_t v17 = *((unsigned int *)this + 29);
  if (v17)
  {
    for (unint64_t i = 0; i < v17; ++i)
    {
      uint64_t v19 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v19 && (!*((unsigned char *)this + 112) || i == *((_DWORD *)this + 140)))
      {
        (*(void (**)(uint64_t, uint64_t, BOOL *, BOOL *))(*(void *)v19 + 376))(v19, a2, a3, a4);
        unint64_t v17 = *((unsigned int *)this + 29);
      }
    }
  }
}

unsigned int *MultiLanguageModel::recomputeRecentBufferHeadClonesAndCommonWords(unsigned int *this)
{
  unint64_t v1 = this[29];
  if (v1)
  {
    unint64_t v2 = this;
    for (unint64_t i = 0; i < v1; ++i)
    {
      this = *(unsigned int **)(*((void *)v2 + 5) + 8 * i);
      if (this && (!*((unsigned char *)v2 + 112) || i == v2[140]))
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)this + 384))(this);
        unint64_t v1 = v2[29];
      }
    }
  }
  return this;
}

unsigned int *MultiLanguageModel::recomputeRecentBufferRemainders(unsigned int *this)
{
  unint64_t v1 = this[29];
  if (v1)
  {
    unint64_t v2 = this;
    for (unint64_t i = 0; i < v1; ++i)
    {
      this = *(unsigned int **)(*((void *)v2 + 5) + 8 * i);
      if (this && (!*((unsigned char *)v2 + 112) || i == v2[140]))
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)this + 392))(this);
        unint64_t v1 = v2[29];
      }
    }
  }
  return this;
}

unsigned int *MultiLanguageModel::notifyEmptiedWordList(unsigned int *this)
{
  unint64_t v1 = this[29];
  if (v1)
  {
    unint64_t v2 = this;
    for (unint64_t i = 0; i < v1; ++i)
    {
      this = *(unsigned int **)(*((void *)v2 + 5) + 8 * i);
      if (this)
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)this + 400))(this);
        unint64_t v1 = v2[29];
      }
    }
  }
  return this;
}

void MultiLanguageModel::loadUnsTable(uint64_t a1, uint64_t a2, const char *a3, int a4, unsigned int a5, unsigned int a6, DgnTextFileParser *this, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13)
{
  if (*((_DWORD *)this + 10)) {
    uint64_t v16 = (void *)*((void *)this + 4);
  }
  else {
    uint64_t v16 = &unk_2140A5940;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 116);
  unsigned int v18 = *(_DWORD *)(a2 + 12);
  unsigned int v19 = v17;
  if (v17 > v18)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v17 - v18, 0);
    unsigned int v19 = *(_DWORD *)(a1 + 116);
  }
  *(_DWORD *)(a2 + 8) = v17;
  if (v19)
  {
    unint64_t v20 = 0;
    do
    {
      if ((DgnTextFileParser::parseNextLine(this) & 1) == 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1953, (uint64_t)"lm/multilm", 65, (uint64_t)"%.500s", v21, v22, (char)v16);
      }
      LineFieldString = DgnTextFileParser::getLineFieldString(this, a8);
      if (strcmp(LineFieldString, a3)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1959, (uint64_t)"lm/multilm", 68, (uint64_t)"%.500s %u %.500s %.500s", v24, v25, (char)v16);
      }
      if (*DgnTextFileParser::getLineFieldString(this, a9)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1965, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v26, v27, (char)v16);
      }
      uint64_t v28 = DgnTextFileParser::getLineFieldString(this, a10);
      DgnString::DgnString((DgnString *)&v51);
      v50[0] = 1;
      v50[1] = v20;
      SubDirExtension::appendToString((DgnString *)v50, (DgnString *)&v51);
      if (v52) {
        uint64_t v29 = v51;
      }
      else {
        uint64_t v29 = (const char *)&unk_2140A5940;
      }
      if (strcmp(v29, v28)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1973, (uint64_t)"lm/multilm", 70, (uint64_t)"%.500s %u %.500s %.500s", v34, v35, (char)v16);
      }
      unsigned int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(this, a11, v30, v31, v32, v33, v34, v35);
      if ((LineFieldInteger & 0x80000000) != 0)
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1979, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v39, v40, (char)v16);
      }
      if (LineFieldInteger != a4 && (LineFieldInteger < a5 || LineFieldInteger > a6)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1984, (uint64_t)"lm/multilm", 71, (uint64_t)"%.500s %.500s %u %u", v36, v37, (char)v16);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = LineFieldInteger;
      if (DgnTextFileParser::getLineFieldReal(this, a12) != 0.0)
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1991, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v41, v42, (char)v16);
      }
      if (*DgnTextFileParser::getLineFieldString(this, a13))
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 1996, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v43, v44, (char)v16);
      }
      DgnString::~DgnString((DgnString *)&v51);
      ++v20;
    }
    while (v20 < *(unsigned int *)(a1 + 116));
  }
}

void sub_213F38060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

DgnString *SubDirExtension::appendToString(DgnString *this, DgnString *a2)
{
  unsigned int v2 = *(_DWORD *)this - 1;
  if (v2 <= 3)
  {
    uint64_t v4 = this;
    this = DgnString::operator+=(a2, off_2641F4F80[v2]);
    if (*((_DWORD *)v4 + 1) != -1) {
      return (DgnString *)DgnString::printfAppend(a2, "%d", v5, v6, v7, *((unsigned int *)v4 + 1));
    }
  }
  return this;
}

void MultiLanguageModel::loadIntTable(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5, int a6, DgnTextFileParser *this, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13)
{
  uint64_t v15 = (void *)a2;
  if (*((_DWORD *)this + 10)) {
    uint64_t v16 = (void *)*((void *)this + 4);
  }
  else {
    uint64_t v16 = &unk_2140A5940;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 116);
  unsigned int v18 = *(_DWORD *)(a2 + 12);
  unsigned int v19 = v17;
  if (v17 > v18)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v17 - v18, 0);
    unsigned int v19 = *(_DWORD *)(a1 + 116);
  }
  *((_DWORD *)v15 + 2) = v17;
  if (v19)
  {
    unint64_t v20 = 0;
    do
    {
      if ((DgnTextFileParser::parseNextLine(this) & 1) == 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2023, (uint64_t)"lm/multilm", 65, (uint64_t)"%.500s", v21, v22, (char)v16);
      }
      LineFieldString = DgnTextFileParser::getLineFieldString(this, a8);
      if (strcmp(LineFieldString, a3)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2029, (uint64_t)"lm/multilm", 68, (uint64_t)"%.500s %u %.500s %.500s", v24, v25, (char)v16);
      }
      if (*DgnTextFileParser::getLineFieldString(this, a9)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2035, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v26, v27, (char)v16);
      }
      uint64_t v28 = v15;
      uint64_t v29 = DgnTextFileParser::getLineFieldString(this, a10);
      DgnString::DgnString((DgnString *)&v51);
      v50[0] = 1;
      v50[1] = v20;
      SubDirExtension::appendToString((DgnString *)v50, (DgnString *)&v51);
      if (v52) {
        uint64_t v30 = v51;
      }
      else {
        uint64_t v30 = (const char *)&unk_2140A5940;
      }
      if (strcmp(v30, v29)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2043, (uint64_t)"lm/multilm", 70, (uint64_t)"%.500s %u %.500s %.500s", v35, v36, (char)v16);
      }
      int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(this, a11, v31, v32, v33, v34, v35, v36);
      int v40 = LineFieldInteger;
      if (LineFieldInteger != a4 && (LineFieldInteger < a5 || LineFieldInteger > a6)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2050, (uint64_t)"lm/multilm", 72, (uint64_t)"%.500s %.500s %u %d", v38, v39, (char)v16);
      }
      uint64_t v15 = v28;
      *(_DWORD *)(*v28 + 4 * v2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v40;
      if (DgnTextFileParser::getLineFieldReal(this, a12) != 0.0)
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2057, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v41, v42, (char)v16);
      }
      if (*DgnTextFileParser::getLineFieldString(this, a13))
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2062, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v43, v44, (char)v16);
      }
      DgnString::~DgnString((DgnString *)&v51);
      ++v20;
    }
    while (v20 < *(unsigned int *)(a1 + 116));
  }
}

void sub_213F38434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadRealTable(uint64_t a1, uint64_t a2, DgnString *a3, const char *a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, double a10, double a11, unsigned int a12, unsigned int a13, unsigned int a14)
{
  if (*(_DWORD *)(a5 + 40)) {
    unint64_t v20 = *(void **)(a5 + 32);
  }
  else {
    unint64_t v20 = &unk_2140A5940;
  }
  DgnString::DgnString((DgnString *)&v61);
  unsigned int v21 = *(_DWORD *)(a1 + 116);
  unsigned int v22 = *(_DWORD *)(a2 + 12);
  unsigned int v23 = v21;
  if (v21 > v22)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a2, v21 - v22, 0);
    unsigned int v23 = *(_DWORD *)(a1 + 116);
  }
  *(_DWORD *)(a2 + 8) = v21;
  if (v23)
  {
    unint64_t v24 = 0;
    do
    {
      if ((DgnTextFileParser::parseNextLine((DgnTextFileParser *)a5) & 1) == 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2091, (uint64_t)"lm/multilm", 65, (uint64_t)"%.500s", v25, v26, (char)v20);
      }
      LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)a5, a6);
      if (strcmp(LineFieldString, a4)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2097, (uint64_t)"lm/multilm", 68, (uint64_t)"%.500s %u %.500s %.500s", v28, v29, (char)v20);
      }
      uint64_t v30 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)a5, a7);
      uint64_t v31 = v30;
      if (!a3 || v24)
      {
        if (v62) {
          uint64_t v34 = v61;
        }
        else {
          uint64_t v34 = (const char *)&unk_2140A5940;
        }
        if (strcmp(v34, v31)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2121, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v35, v36, (char)v20);
        }
      }
      else
      {
        if ((isValidName(v30) & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2106, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v32, v33, (char)v20);
        }
        DgnString::operator=(a3, v31);
        DgnString::operator=((DgnString *)&v61, v31);
      }
      uint64_t v37 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)a5, a8);
      DgnString::DgnString((DgnString *)&v59);
      v58[0] = 1;
      v58[1] = v24;
      SubDirExtension::appendToString((DgnString *)v58, (DgnString *)&v59);
      if (v60) {
        uint64_t v38 = v59;
      }
      else {
        uint64_t v38 = (const char *)&unk_2140A5940;
      }
      if (strcmp(v38, v37)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2130, (uint64_t)"lm/multilm", 70, (uint64_t)"%.500s %u %.500s %.500s", v43, v44, (char)v20);
      }
      if (DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)a5, a12, v39, v40, v41, v42, v43, v44))
      {
        DgnTextFile::getCurrentLine((DgnTextFile *)a5);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2135, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v45, v46, (char)v20);
      }
      double LineFieldReal = DgnTextFileParser::getLineFieldReal((DgnTextFileParser *)a5, a13);
      double v50 = LineFieldReal;
      if (LineFieldReal != a9 && (LineFieldReal < a10 || LineFieldReal > a11)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2143, (uint64_t)"lm/multilm", 73, (uint64_t)"%.500s %.500s %.500s %u %f", v47, v48, (char)v20);
      }
      *(double *)(*(void *)a2 + 8 * vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v50;
      if (*DgnTextFileParser::getLineFieldString((DgnTextFileParser *)a5, a14))
      {
        DgnTextFile::getCurrentLine((DgnTextFile *)a5);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2150, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v51, v52, (char)v20);
      }
      DgnString::~DgnString((DgnString *)&v59);
      ++v24;
    }
    while (v24 < *(unsigned int *)(a1 + 116));
  }
  DgnString::~DgnString((DgnString *)&v61);
}

void sub_213F38824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadStringTable(uint64_t a1, uint64_t a2, const char *a3, DgnTextFileParser *this, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  uint64_t v13 = &unk_2140A5940;
  if (*((_DWORD *)this + 10)) {
    uint64_t v13 = (void *)*((void *)this + 4);
  }
  unsigned int v14 = *(_DWORD *)(a1 + 116);
  unsigned int v15 = *(_DWORD *)(a2 + 12);
  if (v14 > v15) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v14 - v15, 0);
  }
  uint64_t v16 = *(unsigned int *)(a2 + 8);
  uint64_t v17 = (int)v16;
  if (v14 >= v16)
  {
    if (v14 > v16)
    {
      int v19 = v14 - v16;
      uint64_t v20 = 16 * v16;
      do
      {
        DgnString::DgnString((DgnString *)(*(void *)a2 + v20));
        v20 += 16;
        --v19;
      }
      while (v19);
    }
  }
  else if ((int)v16 > (int)v14)
  {
    uint64_t v18 = 16 * (int)v16 - 16;
    do
    {
      --v17;
      DgnString::~DgnString((DgnString *)(*(void *)a2 + v18));
      v18 -= 16;
    }
    while (v17 > (int)v14);
  }
  *(_DWORD *)(a2 + 8) = v14;
  unsigned int v21 = (const char *)&unk_2140A5940;
  if (*(_DWORD *)(a1 + 116))
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      if ((DgnTextFileParser::parseNextLine(this) & 1) == 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2174, (uint64_t)"lm/multilm", 65, (uint64_t)"%.500s", v24, v25, (char)v13);
      }
      LineFieldString = DgnTextFileParser::getLineFieldString(this, a5);
      if (strcmp(LineFieldString, a3)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2180, (uint64_t)"lm/multilm", 68, (uint64_t)"%.500s %u %.500s %.500s", v27, v28, (char)v13);
      }
      if (*DgnTextFileParser::getLineFieldString(this, a6)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2186, (uint64_t)"lm/multilm", 69, (uint64_t)"%.500s %u %.500s", v29, v30, (char)v13);
      }
      uint64_t v31 = DgnTextFileParser::getLineFieldString(this, a7);
      DgnString::DgnString((DgnString *)&v49);
      v48[0] = 1;
      v48[1] = v23;
      SubDirExtension::appendToString((DgnString *)v48, (DgnString *)&v49);
      if (v50) {
        unsigned int v21 = v49;
      }
      if (strcmp(v21, v31)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2194, (uint64_t)"lm/multilm", 70, (uint64_t)"%.500s %u %.500s %.500s", v36, v37, (char)v13);
      }
      unsigned int v21 = (const char *)&unk_2140A5940;
      if (DgnTextFileParser::getLineFieldInteger(this, a8, v32, v33, v34, v35, v36, v37))
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2199, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v38, v39, (char)v13);
      }
      if (DgnTextFileParser::getLineFieldReal(this, a9) != 0.0)
      {
        DgnTextFile::getCurrentLine(this);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2204, (uint64_t)"lm/multilm", 7, (uint64_t)"%.500s %.500s", v40, v41, (char)v13);
      }
      uint64_t v42 = DgnTextFileParser::getLineFieldString(this, a10);
      DgnString::operator=((DgnString *)(*(void *)a2 + v22), v42);
      DgnString::~DgnString((DgnString *)&v49);
      ++v23;
      v22 += 16;
    }
    while (v23 < *(unsigned int *)(a1 + 116));
  }
}

void sub_213F38BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadLM(MultiLanguageModel *this, DFile *a2, DFile *a3, DFileChecksums *a4, DgnSharedMemStream *a5, uint64_t a6, uint64_t a7, BOOL a8, unsigned int a9, unsigned int a10, __int16 a11, BOOL *a12, BOOL *a13, double *a14)
{
  if (a7
    && ((DFile::subFileExists((uint64_t)a2, 0x4Au) & 1) != 0 || DFile::subFileExists((uint64_t)a2, 0x49u)))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2236, (uint64_t)"lm/multilm", 118, (uint64_t)"%s", v19, v20, (char)&errStr_lm_multilm_E_RECENT_BUFFER_WITH_FIXED_SCORING);
  }
  BOOL v54 = 0;
  if (DFile::subFileExists((uint64_t)a2, 0x28u))
  {
    if (a6) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2242, (uint64_t)"lm/multilm", 98, (uint64_t)"%s", v21, v22, (char)&errStr_lm_multilm_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    }
    MultiLanguageModel::loadMultiBinary(this, a2, a4, &v54);
    BOOL v56 = v54;
    MultiLanguageModel::loadComponentLMSubFiles(this, 1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, v56);
  }
  else if (DFile::subFileExists((uint64_t)a2, 0x29u))
  {
    if (*((unsigned char *)this + 24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2262, (uint64_t)"lm/multilm", 119, (uint64_t)"%.500s", v23, v24, (char)"found mls text file");
    }
    v53[0] = 0;
    v53[1] = 0;
    MultiLanguageModel::loadMultiText((uint64_t)this, (uint64_t)a2, a7, (uint64_t)v53, &v54);
    MultiLanguageModel::loadComponentLMSubFiles(this, 0, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, v54);
    if (*(_WORD *)((char *)this + 113))
    {
      (*(void (**)(MultiLanguageModel *, void *))(*(void *)this + 496))(this, v53);
      if (*((unsigned char *)this + 114))
      {
        if ((a7 & 1) == 0)
        {
          uint64_t v31 = (void *)((char *)this + 200);
          uint64_t v32 = *((unsigned int *)this + 44);
          unsigned int v33 = *((_DWORD *)this + 53);
          if (v32 > v33) {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 200, v32 - v33, 0);
          }
          uint64_t v34 = *((unsigned int *)this + 52);
          if (v34 <= v32)
          {
            if (v34 < v32)
            {
              uint64_t v37 = v32 - v34;
              uint64_t v38 = 16 * v34;
              do
              {
                uint64_t v39 = (void *)(*v31 + v38);
                void *v39 = 0;
                v39[1] = 0;
                v38 += 16;
                --v37;
              }
              while (v37);
            }
          }
          else if ((int)v34 > (int)v32)
          {
            uint64_t v35 = (int)v34;
            uint64_t v36 = 16 * (int)v34 - 16;
            do
            {
              --v35;
              DgnPrimArray<unsigned int>::~DgnPrimArray(*v31 + v36);
              v36 -= 16;
            }
            while (v35 > (int)v32);
          }
          *((_DWORD *)this + 52) = v32;
          uint64_t v40 = (void *)((char *)this + 216);
          uint64_t v41 = *((unsigned int *)this + 44);
          unsigned int v42 = *((_DWORD *)this + 57);
          uint64_t v43 = v41 - v42;
          if (v41 > v42) {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 216, v43, 0);
          }
          uint64_t v44 = *((unsigned int *)this + 56);
          if (v44 <= v41)
          {
            if (v44 < v41)
            {
              uint64_t v47 = v41 - v44;
              uint64_t v48 = 16 * v44;
              do
              {
                uint64_t v49 = (void *)(*v40 + v48);
                void *v49 = 0;
                v49[1] = 0;
                v48 += 16;
                --v47;
              }
              while (v47);
            }
          }
          else if ((int)v44 > (int)v41)
          {
            uint64_t v45 = (int)v44;
            uint64_t v46 = 16 * (int)v44 - 16;
            do
            {
              --v45;
              DgnPrimArray<unsigned int>::~DgnPrimArray(*v40 + v46);
              v46 -= 16;
            }
            while (v45 > (int)v41);
          }
          *((_DWORD *)this + 56) = v41;
          MultiLanguageModel::adjustNamedWeightsSets((uint64_t)this, v43, v25, v26, v27, v28, v29, v30);
        }
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v53);
  }
}

void sub_213F38F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadMultiBinary(MultiLanguageModel *this, DFile *a2, DFileChecksums *a3, BOOL *a4)
{
  uint64_t v25 = 0;
  uint64_t v8 = OpenAndReadMrecHeader((uint64_t)a2, 0x28u, 1, "LMMULBIN", (_DWORD *)&v25 + 1, &v25);
  DgnString::DgnString((DgnString *)v24);
  if (*(_DWORD *)(v8 + 24)) {
    int v9 = *(char **)(v8 + 16);
  }
  else {
    int v9 = (char *)&unk_2140A5940;
  }
  DgnString::operator=((DgnString *)v24, v9);
  DgnString::operator+=((DgnString *)v24, " subfile of ");
  if (*((_DWORD *)a2 + 6)) {
    uint64_t v10 = (char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v10 = (char *)&unk_2140A5940;
  }
  DgnString::operator+=((DgnString *)v24, v10);
  *a4 = 0;
  int v13 = v25;
  if (v25 == 0x1300000005)
  {
    *a4 = 1;
    int v14 = 19;
  }
  else
  {
    if (*((_DWORD *)a2 + 6)) {
      unsigned int v15 = (char *)*((void *)a2 + 2);
    }
    else {
      unsigned int v15 = (char *)&unk_2140A5940;
    }
    MrecHeaderCheckVersions(v15, "LMMULBIN", HIDWORD(v25), v25, 0x18u, 6u);
    int v13 = v25;
    int v14 = HIDWORD(v25);
  }
  MrecHeaderCheckLatestVersionIfShared(a2, "LMMULBIN", v14, v13, 24, 6, v11, v12);
  *(void *)uint64_t v23 = 0;
  readObject(v8, v23, &v23[1]);
  unsigned int v16 = v23[0];
  unsigned int v17 = *((_DWORD *)this + 37);
  unsigned int v18 = v23[0];
  if (v23[0] > v17)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 136, v23[0] - v17, 0);
    unsigned int v18 = v23[0];
  }
  *((_DWORD *)this + 36) = v16;
  if (v18)
  {
    unint64_t v19 = 0;
    do
    {
      int v22 = 0;
      readObject(v8, &v22, &v23[1]);
      int v20 = v22 - 1;
      if ((v22 - 2) >= 4) {
        int v20 = 0;
      }
      *(_DWORD *)(*((void *)this + 17) + 4 * v19++) = v20;
    }
    while (v19 < v23[0]);
  }
  readObject(v8, (_DWORD *)this + 29, &v23[1]);
  readObject(v8, (BOOL *)this + 112, &v23[1]);
  readObject(v8, (BOOL *)this + 113, &v23[1]);
  readObject(v8, (BOOL *)this + 114, &v23[1]);
  readObject((DgnStream *)v8, (MultiLanguageModel *)((char *)this + 120), &v23[1]);
  readObject(v8, (BOOL *)this + 152, &v23[1]);
  readObject(v8, (_DWORD *)this + 39, &v23[1]);
  readObject(v8, (_DWORD *)this + 40, &v23[1]);
  readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 168, &v23[1]);
  readObject<DgnPrimArray<double>>((DgnStream *)v8, (uint64_t)this + 184, &v23[1]);
  readObject<DgnPrimArray<double>>((DgnStream *)v8, (uint64_t)this + 200, &v23[1]);
  readObject<DgnPrimArray<short>>((DgnStream *)v8, (uint64_t)this + 216, &v23[1]);
  readObject<unsigned int>((DgnStream *)v8, (uint64_t)this + 232, &v23[1]);
  readObject(v8, (_DWORD *)this + 70, &v23[1]);
  readObject(v8, (_DWORD *)this + 71, &v23[1]);
  if (*a4) {
    readObject<WordDummySpec>((DgnStream *)v8, (uint64_t)this + 288, &v23[1]);
  }
  readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 352, &v23[1]);
  if (!*a4 || (readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 368, &v23[1]), !*a4)) {
    readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 320, &v23[1]);
  }
  readObject<double>((DgnStream *)v8, (uint64_t)this + 384, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 400, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 416, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 432, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 448, &v23[1]);
  readObject<short>((DgnStream *)v8, (uint64_t)this + 464, &v23[1]);
  readObject<short>((DgnStream *)v8, (uint64_t)this + 480, &v23[1]);
  readObject<double>((DgnStream *)v8, (uint64_t)this + 496, &v23[1]);
  readObject<DgnString>((DgnStream *)v8, (uint64_t)this + 512, &v23[1]);
  readObject<int>((DgnStream *)v8, (uint64_t)this + 528, &v23[1]);
  readObject<BOOL>((DgnStream *)v8, (uint64_t)this + 544, &v23[1]);
  readObject(v8, (_DWORD *)this + 140, &v23[1]);
  readObject<unsigned int>((DgnStream *)v8, (uint64_t)this + 568, &v23[1]);
  readObject<unsigned int>((DgnStream *)v8, (uint64_t)this + 584, &v23[1]);
  readObject<unsigned int>((DgnStream *)v8, (uint64_t)this + 600, &v23[1]);
  readObjectChecksumAndVerify((DgnStream *)v8, v23[1]);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x28u, v23[1]);
  DgnDelete<DgnStream>((void (***)(void))v8);
  DgnString::~DgnString((DgnString *)v24);
}

void sub_213F393E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::loadComponentLMSubFiles(MultiLanguageModel *this, int a2, DFile *a3, DFile *a4, DFileChecksums *a5, DgnSharedMemStream *a6, uint64_t a7, uint64_t a8, BOOL a9, unsigned int a10, unsigned int a11, __int16 a12, BOOL *a13, BOOL *a14, BOOL a15)
{
  unsigned int v92 = a7;
  int v15 = a2;
  if (*((_DWORD *)this + 29))
  {
    unsigned int v17 = a8;
    uint64_t v20 = 0;
    char v21 = 0;
    int v22 = a15;
    int v86 = a2 ^ 1;
    uint64_t v87 = (MultiLanguageModel *)((char *)this + 704);
    uint64_t v85 = (char *)this + 168;
    uint64_t v83 = (_DWORD *)((char *)this + 232);
    int v91 = a2 & a15;
    uint64_t v89 = (char *)this + 40;
    uint64_t v84 = (char *)this + 304;
    unsigned int v88 = a8;
    while (1)
    {
      v97[0] = 1;
      v97[1] = v20;
      DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)v97, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
      if (a4) {
        DFile::pushCurrentSubDirComponent(a4, (const SubDirExtension *)v97, v23, v24, v25, v26, v27, v28);
      }
      MultiLanguageModel::verifySubdirContents(this, a3, v20, v15, v22);
      if ((DFile::subFileExists((uint64_t)a3, 0x6Du) & 1) == 0
        && (DFile::subFileExists((uint64_t)a3, 0x6Bu) & 1) == 0
        && !DFile::subFileExists((uint64_t)a3, 0x6Au))
      {
        goto LABEL_16;
      }
      if ((v21 & 1) == 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3081, (uint64_t)"lm/multilm", 34, (uint64_t)"%s", v29, v30, (char)&errStr_lm_multilm_E_FIRST_LM_WORDNGRAMBUILDSPEC);
      }
      if (!v22) {
        break;
      }
      uint64_t v31 = MemChunkAlloc(0x20uLL, 0);
      WordDummySpec::WordDummySpec((WordDummySpec *)v31);
      if (DFile::subFileExists((uint64_t)a3, 0x6Du)) {
        WordNgramBuildSpec::loadWordDummySpecText((WordNgramBuildSpec *)v31, a3);
      }
LABEL_17:
      if (*((unsigned char *)this + 112))
      {
        int v33 = 1;
        goto LABEL_25;
      }
      if ((DFile::subFileExists((uint64_t)a3, 0x73u) & 1) != 0
        || (DFile::subFileExists((uint64_t)a3, 0x6Fu) & 1) != 0
        || (DFile::subFileExists((uint64_t)a3, 0x70u) & 1) != 0
        || (DFile::subFileExists((uint64_t)a3, 0x29u) & 1) != 0
        || DFile::subFileExists((uint64_t)a3, 0x28u))
      {
        int v33 = *((unsigned __int8 *)this + 112);
        if (*((unsigned char *)this + 112))
        {
LABEL_25:
          if (*((_DWORD *)this + 144) >= 2u)
          {
            uint64_t v34 = *((void *)this + 71);
            if (v20)
            {
              uint64_t v35 = (unsigned int *)(v34 + 4 * v20);
              uint64_t v36 = (unsigned int *)(*((void *)this + 73) + 4 * v20);
              BOOL v37 = 1;
            }
            else
            {
              BOOL v37 = 0;
              uint64_t v35 = (unsigned int *)(v34 + 4);
              uint64_t v36 = (unsigned int *)(*((void *)this + 73) + 4 * (*((_DWORD *)this + 148) - 1));
            }
            unsigned int v38 = *v35;
            unsigned int v39 = *v36;
            goto LABEL_31;
          }
        }
        BOOL v37 = a9;
        unsigned int v38 = a10;
        unsigned int v39 = a11;
LABEL_31:
        unsigned int v40 = *(_DWORD *)(*((void *)this + 17) + 4 * v20);
        if (v40 > 3 || v40 == 1)
        {
          unsigned int v42 = 0;
          BOOL v41 = 0;
          double v96 = -1.0;
        }
        else
        {
          double v96 = -1.0;
          BOOL v41 = *((unsigned char *)this + 24) != 0;
          unsigned int v42 = a6;
        }
        unsigned int v43 = v17;
        if (v33)
        {
          unsigned int v43 = v17;
          if ((v17 & 1) == 0) {
            unsigned int v43 = v20 != *((_DWORD *)this + 140);
          }
        }
        uint64_t v44 = LanguageModel::CreateAndLoadLanguageModel(a3, a4, a5, v42, (DgnSharedMemStream *)v41, v92, v33 != 0, v43, *((_DWORD *)this + 8), v82, *((const WordList **)this + 2), v37, v38, v39, a12, a13, a14, &v96);
        uint64_t v45 = v44;
        if (!v20)
        {
          unsigned int v46 = *((_DWORD *)v44 + 8);
          *((_DWORD *)this + 8) = v46;
          CombineTable::initCombineTable((uint64_t)v87, (double)v46);
          if ((v15 & 1) == 0) {
            goto LABEL_44;
          }
LABEL_40:
          if (v31 && v22) {
            *uint64_t v31 = *(void *)&v96;
          }
          goto LABEL_71;
        }
        if (v15) {
          goto LABEL_40;
        }
LABEL_44:
        if ((*(unsigned int (**)(uint64_t *))(*v45 + 608))(v45))
        {
          v94[0].n128_u64[0] = 0;
          uint64_t v95 = 0;
          (*(void (**)(uint64_t *, __n128 *, char *, uint64_t *))(*v45 + 616))(v45, v94, (char *)&v95 + 4, &v95);
          if (*((unsigned char *)this + 152))
          {
            if (!DgnArray<DgnString>::operator==((uint64_t)v85, (uint64_t *)v94[0].n128_u64[0])
              || __PAIR64__(*((_DWORD *)this + 39), *((_DWORD *)this + 40)) != v95)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3188, (uint64_t)"lm/multilm", 51, (uint64_t)"%s", v47, v48, (char)&errStr_lm_multilm_E_NAMED_WEIGHTS_MISMATCH);
            }
          }
          else
          {
            *((unsigned char *)this + 152) = 1;
            DgnArray<DgnString>::copyArraySlice((uint64_t)v85, v94[0].n128_u64[0], 0, *(_DWORD *)(v94[0].n128_u64[0] + 8));
            int v49 = v95;
            *((_DWORD *)this + 39) = HIDWORD(v95);
            *((_DWORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v49;
            if (*((_DWORD *)this + 44))
            {
              unsigned int v50 = 0;
              do
              {
                IdMgr<unsigned int>::getNextId(v83);
                ++v50;
              }
              while (v50 < *((_DWORD *)this + 44));
            }
          }
        }
        {
          unsigned int v58 = *(_DWORD *)(*((void *)this + 17) + 4 * v20);
          if (v58 >= 3)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3204, (uint64_t)"lm/multilm", 21, (uint64_t)"%u", v55, v56, v20);
            unsigned int v58 = *(_DWORD *)(*((void *)this + 17) + 4 * v20);
          }
          if (v58 == 1)
          {
            int v22 = a15;
            if (a15)
            {
              (*(void (**)(WordLanguageModel *))(*(void *)v57 + 704))(v57);
              WordDummySpec::WordDummySpec((WordDummySpec *)v94);
              WordLanguageModel::fillInWordDummySpec(v57, v94);
              uint64_t v31 = MemChunkAlloc(0x20uLL, 0);
              WordNgramBuildSpec::WordNgramBuildSpec((WordNgramBuildSpec *)v31, (const WordDummySpec *)v94);
              *uint64_t v59 = v96;
            }
            else
            {
              WordLanguageModel::verifyConsistentWithWordNgramBuildSpec(v57, (const WordNgramBuildSpec *)v31, v51, v52, v53, v54, v55, v56);
            }
LABEL_70:
            unsigned int v17 = v88;
LABEL_71:
            char v21 = 1;
            goto LABEL_72;
          }
        }
        {
          if (*(_DWORD *)(*((void *)this + 17) + 4 * v20) != 3) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3232, (uint64_t)"lm/multilm", 21, (uint64_t)"%u", v60, v61, v20);
          }
          if (*((unsigned char *)this + 112))
          {
            int v22 = a15;
            if (v20 == *((_DWORD *)this + 140)) {
              goto LABEL_70;
            }
            unsigned int v17 = v88;
            if (v62[114]) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3242, (uint64_t)"lm/multilm", 97, (uint64_t)"%s", v60, v61, (char)&errStr_lm_multilm_E_NO_INTERPOLATED_IN_NON_DEFAULT_DISPATCH);
            }
            goto LABEL_71;
          }
        }
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3248, (uint64_t)"lm/multilm", 21, (uint64_t)"%u", v63, v64, v20);
        }
        int v22 = a15;
        goto LABEL_70;
      }
      uint64_t v45 = 0;
LABEL_72:
      if (v91 && *(_DWORD *)(*((void *)this + 17) + 4 * v20) == 1)
      {
        uint64_t v31 = MemChunkAlloc(0x20uLL, 0);
        WordNgramBuildSpec::WordNgramBuildSpec((WordNgramBuildSpec *)v31, (const WordDummySpec *)(*((void *)this + 36) + 32 * v20));
      }
      unsigned int v65 = *((_DWORD *)this + 12);
      if (v65 == *((_DWORD *)this + 13))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v89, 1, 1);
        unsigned int v65 = *((_DWORD *)this + 12);
      }
      *(void *)(*((void *)this + 5) + 8 * v65) = v45;
      *((_DWORD *)this + 12) = v65 + 1;
      if (!*((unsigned char *)this + 112))
      {
        unsigned int v66 = *((_DWORD *)this + 78);
        if (v66 == *((_DWORD *)this + 79))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v84, 1, 1);
          unsigned int v66 = *((_DWORD *)this + 78);
        }
        *(void *)(*((void *)this + 38) + 8 * v66) = v31;
        *((_DWORD *)this + 78) = v66 + 1;
      }
      DFile::popCurrentSubDirComponent((uint64_t)a3);
      if (a4) {
        DFile::popCurrentSubDirComponent((uint64_t)a4);
      }
      if (++v20 >= (unint64_t)*((unsigned int *)this + 29)) {
        goto LABEL_87;
      }
    }
    if ((DFile::subFileExists((uint64_t)a3, 0x6Bu) & 1) != 0 || DFile::subFileExists((uint64_t)a3, 0x6Au))
    {
      uint64_t v31 = MemChunkAlloc(0x20uLL, 0);
      WordDummySpec::WordDummySpec((WordDummySpec *)v31);
      WordNgramBuildSpec::loadWordNgramBuildSpec(v32, a3, a5, v86);
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v31 = 0;
    goto LABEL_17;
  }
  char v21 = 0;
LABEL_87:
  uint64_t v67 = (void *)*((void *)this + 36);
  if (v67)
  {
    MemChunkFree(v67, 0);
    *((void *)this + 36) = 0;
  }
  *((void *)this + 37) = 0;
  if ((v21 & 1) == 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3286, (uint64_t)"lm/multilm", 31, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NO_SUB_LANGUAGE_MODELS);
  }
  if (!*((unsigned char *)this + 112) && *((_DWORD *)this + 29))
  {
    unint64_t v68 = 0;
    char v69 = v15;
    do
    {
      if ((v15 & 1) == 0)
      {
        if (*((unsigned char *)this + 113))
        {
          unsigned int v70 = *((_DWORD *)this + 126);
          if (v70 == *((_DWORD *)this + 127))
          {
            DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 496, 1, 1);
            unsigned int v70 = *((_DWORD *)this + 126);
          }
          *(void *)(*((void *)this + 62) + 8 * v7pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
          uint64_t v71 = (char *)this + 504;
        }
        else
        {
          unsigned int v72 = *((_DWORD *)this + 98);
          if (v72 == *((_DWORD *)this + 99))
          {
            DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 384, 1, 1);
            unsigned int v72 = *((_DWORD *)this + 98);
          }
          *(void *)(*((void *)this + 48) + 8 * vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
          *((_DWORD *)this + 98) = v72 + 1;
          unsigned int v73 = *((_DWORD *)this + 118);
          if (v73 == *((_DWORD *)this + 119))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)this + 464, 1, 1);
            unsigned int v73 = *((_DWORD *)this + 118);
          }
          *(_WORD *)(*((void *)this + 58) + 2 * v73) = 2000;
          *((_DWORD *)this + 118) = v73 + 1;
          long double v74 = *(double *)(*((void *)this + 54) + 8 * v68);
          if (v74 == -1.0)
          {
            LOWORD(v15) = 20000;
          }
          else if (v74 == 0.0)
          {
            LOWORD(v15) = 2000;
          }
          else
          {
            long double v75 = DgnLog(v74);
            LODWORD(v76) = *((_DWORD *)this + 8);
            int v15 = (int)(0.5 - v75 * (double)v76);
          }
          unsigned int v70 = *((_DWORD *)this + 122);
          if (v70 == *((_DWORD *)this + 123))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)this + 480, 1, 1);
            unsigned int v70 = *((_DWORD *)this + 122);
          }
          *(_WORD *)(*((void *)this + 60) + 2 * v7pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v15;
          uint64_t v71 = (char *)this + 488;
          LOBYTE(v15) = v69;
        }
        *(_DWORD *)uint64_t v71 = v70 + 1;
      }
      ++v68;
    }
    while (v68 < *((unsigned int *)this + 29));
  }
  if (!*((_DWORD *)this + 7))
  {
    if (*((unsigned char *)this + 152)) {
      (*(void (**)(MultiLanguageModel *))(*(void *)this + 624))(this);
    }
    MultiLanguageModel::getFactoryCorrectiveLmNames(this, (unsigned int *)this + 20);
    MultiLanguageModel::getTopicLmSlotNames(this, (unsigned int *)this + 24);
    if (*((_DWORD *)this + 26))
    {
      uint64_t v77 = 0;
      unint64_t v78 = 0;
      do
      {
        int v79 = DgnArray<DgnString>::find((unsigned int *)this + 20, *((void *)this + 12) + v77);
        if (v79 != -1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3337, (uint64_t)"lm/multilm", 94, (uint64_t)"%u %u %.500s", v80, v81, v79);
        }
        ++v78;
        v77 += 16;
      }
      while (v78 < *((unsigned int *)this + 26));
    }
  }
}

void MultiLanguageModel::loadMultiText(uint64_t a1, uint64_t a2, int a3, uint64_t a4, BOOL *a5)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v208);
  uint64_t v193 = (DFile *)a2;
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v208, a2, 0x29u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v208, "MultiLanguageModelSpec");
  uint64_t v206 = 0;
  uint64_t v207 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v208, sMLS_Versions, (uint64_t)&v206, v8, v9, v10, v11, v12);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v208, (unsigned int *)&v206, v13, v14, v15, v16, v17, v18);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v206);
  FileVersiouint64_t n = DgnTextFile::getFileVersion((DgnTextFile *)v208);
  uint64_t v185 = a4;
  if (v209) {
    LOBYTE(v2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v208[32];
  }
  else {
    uint64_t v20 = &unk_2140A5940;
  }
  char v196 = (char)v20;
  DgnString::DgnString((DgnString *)&v206);
  DgnTextFile::getHeaderField((DgnTextFile *)v208, "MultiLMType", (DgnString *)&v206, 1);
  if (v207) {
    char v21 = (const char *)v206;
  }
  else {
    char v21 = (const char *)&unk_2140A5940;
  }
  int v22 = strcmp(v21, "Dispatch");
  *(unsigned char *)(a1 + 112) = v22 == 0;
  int v23 = strcmp(v21, "LogLinear");
  *(unsigned char *)(a1 + 113) = v23 == 0;
  int v24 = strcmp(v21, "InterpolatedLinear");
  *(unsigned char *)(a1 + 114) = v24 == 0;
  if (v22 && v23 && v24) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2416, (uint64_t)"lm/multilm", 66, (uint64_t)"%.500s %.500s", v25, v26, v196);
  }
  DgnString::~DgnString((DgnString *)&v206);
  if (*(unsigned char *)(a1 + 112) && *(_DWORD *)(a1 + 28)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2420, (uint64_t)"lm/multilm", 67, (uint64_t)"%.500s", v27, v28, v196);
  }
  char v29 = a3 ^ 1;
  if (!*(unsigned char *)(a1 + 114)) {
    char v29 = 0;
  }
  *(unsigned char *)(a1 + 152) = v29;
  if (FileVersion == 19)
  {
    BOOL v30 = HIDWORD(FileVersion) == 5;
    BOOL v31 = HIDWORD(FileVersion) == 5;
  }
  else
  {
    BOOL v30 = 0;
    BOOL v31 = FileVersion == 22 && HIDWORD(FileVersion) == 6;
  }
  *a5 = v31;
  uint64_t v194 = (unsigned int *)(a1 + 116);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v208, "NumberOfSubDirectories", (unsigned int *)(a1 + 116), 1, 1u, 0x3E8u);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v208, "NumberOfFactoryWeightsNames", (unsigned int *)(a1 + 156), 1, 0, 0x3E8u);
  unsigned int v205 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v208, "NumberOfClientWeightsNames", &v205, 1, 0, 0x3E8u);
  unsigned int v34 = v205 + *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a1 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v34;
  if (a3 && v34) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2441, (uint64_t)"lm/multilm", 76, (uint64_t)"%.500s", v32, v33, v196);
  }
  int HeaderField = DgnTextFile::getHeaderField((DgnTextFile *)v208, "RecentBufferLMPath", (DgnString *)(a1 + 120), 0);
  if (!DFile::subFileExists((uint64_t)v193, 0x4Au))
  {
    if (HeaderField == DFile::subFileExists((uint64_t)v193, 0x49u)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if ((HeaderField & 1) == 0) {
LABEL_28:
  }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2451, (uint64_t)"lm/multilm", 54, (uint64_t)"%s", v41, v42, (char)&errStr_lm_multilm_E_RECENT_BUFFER_MISMATCH);
LABEL_29:
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v208, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v206 = 0;
  uint64_t v207 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v208, (uint64_t)&v206);
  BOOL v191 = v30;
  v204[0] = 0;
  v204[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v208, (unint64_t)v204);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v208, 6, v43, v44, v45, v46, v47, v48);
  uint64_t v49 = v206;
  if (*(_DWORD *)(v206 + 8)) {
    unsigned int v50 = *(const char **)v206;
  }
  else {
    unsigned int v50 = (const char *)&unk_2140A5940;
  }
  if (strcmp(v50, "TableName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2481, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v51, v52, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)v204[0])
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2484, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v51, v52, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v49 + 24)) {
    uint64_t v53 = *(const char **)(v49 + 16);
  }
  else {
    uint64_t v53 = (const char *)&unk_2140A5940;
  }
  if (strcmp(v53, "WeightsName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2489, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v54, v55, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v204[0] + 4))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2492, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v54, v55, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v49 + 40)) {
    uint64_t v56 = *(const char **)(v49 + 32);
  }
  else {
    uint64_t v56 = (const char *)&unk_2140A5940;
  }
  if (strcmp(v56, "SubDirectory"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2497, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v57, v58, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v204[0] + 8))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2500, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v57, v58, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v49 + 56)) {
    uint64_t v59 = *(const char **)(v49 + 48);
  }
  else {
    uint64_t v59 = (const char *)&unk_2140A5940;
  }
  if (strcmp(v59, "IntValue"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2505, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v60, v61, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v204[0] + 12) != 1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2508, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v60, v61, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v49 + 72)) {
    int v62 = *(const char **)(v49 + 64);
  }
  else {
    int v62 = (const char *)&unk_2140A5940;
  }
  if (strcmp(v62, "RealValue"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2513, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v63, v64, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v204[0] + 16) != 2)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2516, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v63, v64, v196);
    uint64_t v49 = v206;
  }
  if (*(_DWORD *)(v49 + 88)) {
    unsigned int v65 = *(const char **)(v49 + 80);
  }
  else {
    unsigned int v65 = (const char *)&unk_2140A5940;
  }
  if (strcmp(v65, "StrValue")) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2521, (uint64_t)"lm/multilm", 5, (uint64_t)"%.500s %.500s %.500s", v66, v67, v196);
  }
  if (*(_DWORD *)(v204[0] + 20)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2524, (uint64_t)"lm/multilm", 6, (uint64_t)"%.500s %.500s %.500s", v66, v67, v196);
  }
  v203[0] = 0;
  v203[1] = 0;
  MultiLanguageModel::loadStringTable(a1, (uint64_t)v203, "SlotType", (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
  if (*(unsigned char *)(a1 + 113))
  {
    MultiLanguageModel::loadStringTable(a1, a1 + 512, "CorrectiveName", (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    if (*v194)
    {
      uint64_t v70 = 0;
      for (unint64_t i = 0; i < *v194; ++i)
      {
        if (*(_DWORD *)(v203[0] + v70 + 8)) {
          unsigned int v72 = *(const char **)(v203[0] + v70);
        }
        else {
          unsigned int v72 = (const char *)&unk_2140A5940;
        }
        int v73 = strcmp(v72, "FactoryCorrectiveWord");
        uint64_t v74 = *(void *)(a1 + 512);
        if (v73)
        {
          if (*(_DWORD *)(v74 + v70 + 8) < 2u) {
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v75 = v74 + v70;
          if (*(_DWORD *)(v75 + 8)) {
            unint64_t v76 = *(const char **)v75;
          }
          else {
            unint64_t v76 = (const char *)&unk_2140A5940;
          }
          if (isValidName(v76)) {
            goto LABEL_85;
          }
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2558, (uint64_t)"lm/multilm", 87, (uint64_t)"%.500s %u %.500s", v68, v69, v196);
LABEL_85:
        v70 += 16;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 112))
  {
    MultiLanguageModel::loadStringTable(a1, a1 + 352, "TopicName", (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    if (*v194)
    {
      uint64_t v77 = 0;
      for (unint64_t j = 0; j < *v194; ++j)
      {
        if (*(_DWORD *)(v203[0] + v77 + 8)) {
          int v79 = *(const char **)(v203[0] + v77);
        }
        else {
          int v79 = (const char *)&unk_2140A5940;
        }
        int v80 = strcmp(v79, "TopicWord");
        uint64_t v81 = *(void *)(a1 + 352);
        if (v80)
        {
          if (*(_DWORD *)(v81 + v77 + 8) < 2u) {
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v82 = v81 + v77;
          if (*(_DWORD *)(v82 + 8)) {
            uint64_t v83 = *(const char **)v82;
          }
          else {
            uint64_t v83 = (const char *)&unk_2140A5940;
          }
          if (isValidName(v83)) {
            goto LABEL_100;
          }
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2580, (uint64_t)"lm/multilm", 91, (uint64_t)"%.500s %u %.500s", v68, v69, v196);
LABEL_100:
        v77 += 16;
      }
    }
    if (!*(unsigned char *)(a1 + 112))
    {
      if (*a5) {
        uint64_t v84 = a1 + 368;
      }
      else {
        uint64_t v84 = a1 + 320;
      }
      if (*a5) {
        uint64_t v85 = "TemplateLMPath";
      }
      else {
        uint64_t v85 = "TemplatePath";
      }
      MultiLanguageModel::loadStringTable(a1, v84, v85, (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    }
  }
  uint64_t v201 = 0;
  uint64_t v202 = 0;
  if (*(unsigned char *)(a1 + 114))
  {
    MultiLanguageModel::loadRealTable(a1, a1 + 400, 0, "WeightFloor", (uint64_t)v208, 0, 1u, 2u, 0.0, 0.0, 1.0, 3u, 4u, 5u);
    MultiLanguageModel::loadRealTable(a1, a1 + 416, 0, "WeightCeiling", (uint64_t)v208, 0, 1u, 2u, 0.0, 0.0, 1.0, 3u, 4u, 5u);
    MultiLanguageModel::loadRealTable(a1, a1 + 432, 0, "PrefiltererFixedWeight", (uint64_t)v208, 0, 1u, 2u, -1.0, 0.0, 1.0, 3u, 4u, 5u);
    MultiLanguageModel::loadRealTable(a1, (uint64_t)&v201, 0, "CurrentWeight", (uint64_t)v208, 0, 1u, 2u, 0.0, 0.0, 1.0, 3u, 4u, 5u);
    if (*(unsigned char *)(a1 + 114)) {
      MultiLanguageModel::loadRealTable(a1, a1 + 448, 0, "DefaultTopicWeight", (uint64_t)v208, 0, 1u, 2u, 0.0, 0.0, 1.0, 3u, 4u, 5u);
    }
  }
  unsigned int v195 = (void *)(a1 + 168);
  unsigned int v86 = *(_DWORD *)(a1 + 160);
  unsigned int v87 = *(_DWORD *)(a1 + 180);
  if (v86 > v87) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v195, v86 - v87, 0);
  }
  uint64_t v88 = *(unsigned int *)(a1 + 176);
  uint64_t v89 = (int)v88;
  if (v86 >= v88)
  {
    int v91 = (void *)(a1 + 168);
    if (v86 > v88)
    {
      int v92 = v86 - v88;
      uint64_t v93 = 16 * v88;
      do
      {
        DgnString::DgnString((DgnString *)(*v91 + v93));
        v93 += 16;
        --v92;
        int v91 = (void *)(a1 + 168);
      }
      while (v92);
    }
  }
  else if ((int)v88 > (int)v86)
  {
    uint64_t v90 = 16 * (int)v88 - 16;
    do
    {
      --v89;
      DgnString::~DgnString((DgnString *)(*v195 + v90));
      v90 -= 16;
    }
    while (v89 > (int)v86);
  }
  *(_DWORD *)(a1 + 176) = v86;
  uint64_t v94 = (void *)(a1 + 184);
  uint64_t v95 = *(unsigned int *)(a1 + 160);
  unsigned int v96 = *(_DWORD *)(a1 + 196);
  if (v95 > v96) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 184, v95 - v96, 0);
  }
  uint64_t v97 = *(unsigned int *)(a1 + 192);
  if (v97 <= v95)
  {
    if (v97 < v95)
    {
      uint64_t v100 = v95 - v97;
      uint64_t v101 = 16 * v97;
      do
      {
        uint64_t v102 = (void *)(*v94 + v101);
        *uint64_t v102 = 0;
        v102[1] = 0;
        v101 += 16;
        --v100;
      }
      while (v100);
    }
  }
  else if ((int)v97 > (int)v95)
  {
    uint64_t v98 = (int)v97;
    uint64_t v99 = 16 * (int)v97 - 16;
    do
    {
      --v98;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v94 + v99);
      v99 -= 16;
    }
    while (v98 > (int)v95);
  }
  *(_DWORD *)(a1 + 192) = v95;
  if (*(_DWORD *)(a1 + 176))
  {
    uint64_t v103 = 0;
    unint64_t v104 = 0;
    do
    {
      IdMgr<unsigned int>::getNextId((_DWORD *)(a1 + 232));
      if (v104 >= *(unsigned int *)(a1 + 156)) {
        uint64_t v105 = "ClientWeight";
      }
      else {
        uint64_t v105 = "FactoryWeight";
      }
      MultiLanguageModel::loadRealTable(a1, *(void *)(a1 + 184) + v103, (DgnString *)(*(void *)(a1 + 168) + v103), v105, (uint64_t)v208, 0, 1u, 2u, -1.0, 0.0, 1.0, 3u, 4u, 5u);
      if (DgnArray<DgnString>::findBelow(v195, *v195 + v103, v104) != -1) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2663, (uint64_t)"lm/multilm", 75, (uint64_t)"%.500s %u %u %.500s", v68, v69, v196);
      }
      ++v104;
      v103 += 16;
    }
    while (v104 < *(unsigned int *)(a1 + 176));
  }
  if (*(unsigned char *)(a1 + 113))
  {
    MultiLanguageModel::loadRealTable(a1, (uint64_t)&v201, 0, "LogLinearWeight", (uint64_t)v208, 0, 1u, 2u, 0.0, -100.0, 100.0, 3u, 4u, 5u);
    MultiLanguageModel::loadIntTable(a1, a1 + 528, "LogLinearOffset", 0, -20 * *(_DWORD *)(a1 + 32), 20 * *(_DWORD *)(a1 + 32), (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    uint64_t v199 = 0;
    uint64_t v200 = 0;
    MultiLanguageModel::loadUnsTable(a1, (uint64_t)&v199, "IsActive", 0, 0, 1u, (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    unint64_t v106 = *(unsigned int *)(a1 + 116);
    LODWORD(v107) = v106;
    if (*(_DWORD *)(a1 + 556) < v106)
    {
      uint64_t v197 = 0;
      *(_DWORD *)(a1 + 556) = realloc_array(*(void **)(a1 + 544), &v197, v106, *(unsigned int *)(a1 + 552), *(unsigned int *)(a1 + 552), 1);
      *(void *)(a1 + 544) = v197;
      LODWORD(v107) = *(_DWORD *)(a1 + 116);
    }
    *(_DWORD *)(a1 + 552) = v106;
    if (v107)
    {
      uint64_t v108 = v199;
      uint64_t v109 = *(BOOL **)(a1 + 544);
      uint64_t v107 = v107;
      do
      {
        int v110 = *v108++;
        *v109++ = v110 != 0;
        --v107;
      }
      while (v107);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v199);
  }
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v199 = 0;
    uint64_t v200 = 0;
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    MultiLanguageModel::loadIntTable(a1, (uint64_t)&v199, "MinWordId", -1, 0, *(_DWORD *)(*(void *)(a1 + 16) + 388), (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::loadIntTable(a1, (uint64_t)&v197, "MaxWordId", -1, 0, *(_DWORD *)(*(void *)(a1 + 16) + 388), (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    uint64_t v113 = (uint64_t *)(a1 + 568);
    unsigned int v114 = *(_DWORD *)(a1 + 116);
    unsigned int v115 = *(_DWORD *)(a1 + 580);
    unsigned int v116 = v114;
    if (v114 > v115)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 568, v114 - v115, 0);
      unsigned int v116 = *v194;
    }
    *(_DWORD *)(a1 + 576) = v114;
    uint64_t v117 = (uint64_t *)(a1 + 584);
    unsigned int v118 = *(_DWORD *)(a1 + 596);
    unsigned int v119 = v116;
    if (v116 > v118)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 584, v116 - v118, 0);
      unsigned int v119 = *v194;
    }
    *(_DWORD *)(a1 + 592) = v116;
    if (v119)
    {
      unint64_t v120 = 0;
      do
      {
        if (v120)
        {
          int v121 = v199[v120];
          if (v121 == -1 || (uint64_t v122 = v197, v123 = *((_DWORD *)v197 + v120), v123 == -1))
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2738, (uint64_t)"lm/multilm", 100, (uint64_t)"%.500s %u %.500s", v111, v112, v196);
            int v121 = v199[v120];
            uint64_t v122 = v197;
            int v123 = *((_DWORD *)v197 + v120);
          }
          if (v121 > v123)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2741, (uint64_t)"lm/multilm", 101, (uint64_t)"%.500s %u", v111, v112, v196);
            int v121 = v199[v120];
            uint64_t v122 = v197;
          }
          uint64_t v124 = *v113;
          *(_DWORD *)(*v113 + 4 * v12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v121;
          unsigned int v125 = v122[v120];
          uint64_t v126 = *v117;
          *(_DWORD *)(*v117 + 4 * v12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v125;
          if (v120 >= 2 && *(_DWORD *)(v124 + 4 * v120) != *(_DWORD *)(v126 + 4 * v120 - 4) + 1)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2752, (uint64_t)"lm/multilm", 102, (uint64_t)"%.500s %u", v111, v112, v196);
            uint64_t v124 = *v113;
            unsigned int v125 = *(_DWORD *)(*v117 + 4 * v120);
          }
          for (unsigned int k = *(_DWORD *)(v124 + 4 * v120); k <= v125; ++k)
          {
            uint64_t v128 = *(void *)(a1 + 16);
            if (*(_DWORD *)(v128 + 388) <= k
              || !*(unsigned char *)(*(void *)(v128 + 104) + k)
              || ((*(_DWORD *)(*(void *)(v128 + 640) + 4 * (k >> 5)) >> k) & 1) == 0)
            {
              DgnTextFile::getCurrentLine((DgnTextFile *)v208);
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2763, (uint64_t)"lm/multilm", 63, (uint64_t)"%u %.500s %.500s", v129, v130, k);
              uint64_t v128 = *(void *)(a1 + 16);
            }
            unsigned int v131 = *(_DWORD *)(*(void *)(v128 + 256) + 4 * k);
            if (v131 >= *(_DWORD *)(*v113 + 4 * v120))
            {
              unsigned int v125 = *(_DWORD *)(*v117 + 4 * v120);
              if (v131 <= v125) {
                continue;
              }
            }
            DgnTextFile::getCurrentLine((DgnTextFile *)v208);
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2770, (uint64_t)"lm/multilm", 64, (uint64_t)"%u %u %.500s %.500s", v132, v133, k);
            unsigned int v125 = *(_DWORD *)(*v117 + 4 * v120);
          }
        }
        else
        {
          if (*v199 != -1 || *(_DWORD *)v197 != -1) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2722, (uint64_t)"lm/multilm", 100, (uint64_t)"%.500s %u %.500s", v111, v112, v196);
          }
          **(_DWORD **)(a1 + 568) = 0xFFFFFF;
          **(_DWORD **)(a1 + 584) = 0xFFFFFF;
          *(_DWORD *)(a1 + 56pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
        }
        ++v120;
      }
      while (v120 < *v194);
    }
    if (v191) {
      uint64_t v134 = "TreeLMPerWordPenalty";
    }
    else {
      uint64_t v134 = "PrefiltererPerWordPenalty";
    }
    MultiLanguageModel::loadUnsTable(a1, a1 + 600, v134, 0, 0, 0x3E8u, (DgnTextFileParser *)v208, 0, 1u, 2u, 3u, 4u, 5u);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v197);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v199);
  }
  uint64_t v135 = *(unsigned int *)(a1 + 176);
  uint64_t v199 = 0;
  uint64_t v200 = 0;
  if (v135)
  {
    uint64_t v197 = 0;
    unint64_t v136 = realloc_array(0, &v197, 8 * v135, 0, 0, 1);
    uint64_t v198 = 0;
    uint64_t v199 = (int *)v197;
    uint64_t v137 = *(unsigned int *)(a1 + 176);
    LODWORD(v20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v135;
    HIDWORD(v20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v136 >> 3;
    uint64_t v197 = 0;
    if (v137)
    {
      v210[0] = 0;
      unint64_t v138 = realloc_array(0, v210, 8 * v137, 0, 0, 1);
      uint64_t v139 = v210[0];
      uint64_t v197 = v210[0];
      uint64_t v140 = *(unsigned int *)(a1 + 176);
      LODWORD(v198) = v137;
      HIDWORD(v198) = v138 >> 3;
      if (v140)
      {
        uint64_t v141 = v199;
        do
        {
          *(void *)uint64_t v141 = 0;
          v141 += 2;
          *v139++ = 0;
          --v140;
        }
        while (v140);
      }
      goto LABEL_190;
    }
  }
  else
  {
    uint64_t v197 = 0;
    uint64_t v198 = 0;
  }
  LODWORD(v198) = 0;
LABEL_190:
  unsigned int v142 = *(_DWORD *)(a1 + 116);
  unsigned int v143 = *(_DWORD *)(a1 + 148);
  unsigned int v144 = v142;
  if (v142 > v143)
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 136, v142 - v143, 0);
    unsigned int v144 = *v194;
  }
  *(_DWORD *)(a1 + 144) = v142;
  if (!v144)
  {
    double v147 = 0.0;
    double v182 = 0.0;
    double v146 = 0.0;
    double v181 = 0.0;
    if (!*(unsigned char *)(a1 + 114)) {
      goto LABEL_308;
    }
    goto LABEL_292;
  }
  unint64_t v145 = 0;
  double v192 = 0.0;
  double v146 = 0.0;
  double v187 = 0.0;
  double v188 = 0.0;
  double v147 = 0.0;
  double v186 = 0.0;
  double v148 = 0.0;
  do
  {
    char v149 = 1;
    LODWORD(v210[0]) = 1;
    HIDWORD(v210[0]) = v145;
    uint64_t v150 = v203[0] + 16 * v145;
    int v151 = *(_DWORD *)(v150 + 8);
    uint64_t v152 = *(const char **)v150;
    if (v151) {
      uint64_t v153 = v152;
    }
    else {
      uint64_t v153 = (const char *)&unk_2140A5940;
    }
    if (!strcmp(v153, "FactoryWord")) {
      goto LABEL_207;
    }
    if (a3) {
      goto LABEL_203;
    }
    if (*(unsigned char *)(a1 + 112) || strcmp(v153, "TopicWord"))
    {
      if (*(unsigned char *)(a1 + 113) && !strcmp(v153, "FactoryCorrectiveWord"))
      {
        int v158 = 0;
        char v149 = 0;
        int v159 = 2;
      }
      else
      {
LABEL_203:
        if (!strcmp(v153, "Multi"))
        {
          int v158 = 0;
          int v159 = 3;
        }
        else if (*(unsigned char *)(a1 + 112) && !strcmp(v153, "Dummy"))
        {
          int v158 = 0;
          int v159 = 4;
        }
        else
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2857, (uint64_t)"lm/multilm", 103, (uint64_t)"%.500s %u", v68, v69, v196);
LABEL_207:
          int v158 = 0;
          int v159 = 0;
        }
      }
      int v160 = 1;
      goto LABEL_212;
    }
    int v160 = 0;
    int v158 = 1;
    int v159 = 1;
LABEL_212:
    *(_DWORD *)(*(void *)(a1 + 136) + 4 * v145) = v159;
    if (*(unsigned char *)(a1 + 112)) {
      goto LABEL_222;
    }
    if (*a5)
    {
      unsigned int v161 = *(_DWORD *)(*(void *)(a1 + 368) + 16 * v145 + 8);
      if (!v158)
      {
        if (v161 > 1) {
          goto LABEL_221;
        }
        goto LABEL_222;
      }
    }
    else
    {
      unsigned int v161 = *(_DWORD *)(*(void *)(a1 + 320) + 16 * v145 + 8);
      if (!v158)
      {
        if (v161 < 2) {
          goto LABEL_222;
        }
LABEL_221:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2883, (uint64_t)"lm/multilm", 104, (uint64_t)"%.500s %u", v68, v69, v196);
        goto LABEL_222;
      }
    }
    if (v161 < 2) {
      goto LABEL_221;
    }
LABEL_222:
    if (!*(unsigned char *)(a1 + 114)) {
      goto LABEL_276;
    }
    double v162 = *(double *)(*(void *)(a1 + 400) + 8 * v145);
    if (v158)
    {
      double v186 = v186 + v162;
      double v163 = *(double *)(v201 + 8 * v145);
      double v164 = *(double *)(*(void *)(a1 + 416) + 8 * v145);
    }
    else
    {
      double v164 = *(double *)(*(void *)(a1 + 416) + 8 * v145);
      double v163 = *(double *)(v201 + 8 * v145);
      double v187 = v187 + v164;
      double v188 = v188 + v163;
    }
    double v165 = *(double *)(*(void *)(a1 + 432) + 8 * v145);
    if (v165 == -1.0) {
      double v166 = -0.0;
    }
    else {
      double v166 = *(double *)(*(void *)(a1 + 432) + 8 * v145);
    }
    double v167 = *(double *)(*(void *)(a1 + 448) + 8 * v145);
    if (v162 > v164)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2907, (uint64_t)"lm/multilm", 105, (uint64_t)"%.500s %u", v68, v69, v196);
      double v165 = *(double *)(*(void *)(a1 + 432) + 8 * v145);
    }
    if (v165 != -1.0
      && v165 != 0.0
      && (v165 < *(double *)(*(void *)(a1 + 400) + 8 * v145) || v165 > *(double *)(*(void *)(a1 + 416) + 8 * v145)))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2913, (uint64_t)"lm/multilm", 106, (uint64_t)"%.500s %u", v68, v69, v196);
    }
    double v168 = *(double *)(v201 + 8 * v145);
    if (v168 != 0.0
      || v168 < *(double *)(*(void *)(a1 + 400) + 8 * v145)
      || v168 > *(double *)(*(void *)(a1 + 416) + 8 * v145))
    {
      DFile::pushCurrentSubDirComponent(v193, (const SubDirExtension *)v210, v154, v155, v156, v157, v68, v69);
      if (*a5)
      {
        int v169 = DFile::subFileExists((uint64_t)v193, 0x6Du);
      }
      else if (DFile::subFileExists((uint64_t)v193, 0x6Bu))
      {
        int v169 = DFile::subFileExists((uint64_t)v193, 0x73u) ^ 1;
      }
      else
      {
        int v169 = 0;
      }
      DFile::popCurrentSubDirComponent((uint64_t)v193);
      double v170 = *(double *)(v201 + 8 * v145);
      if (v169)
      {
        if (v170 == 0.0) {
          goto LABEL_252;
        }
        uint64_t v171 = 107;
        uint64_t v172 = 2939;
        uint64_t v173 = "%.500s %u";
        goto LABEL_251;
      }
      if (v170 != 0.0
        && (v170 < *(double *)(*(void *)(a1 + 400) + 8 * v145) || v170 > *(double *)(*(void *)(a1 + 416) + 8 * v145)))
      {
        uint64_t v171 = 108;
        uint64_t v172 = 2945;
        uint64_t v173 = "%.500s %u";
LABEL_251:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", v172, (uint64_t)"lm/multilm", v171, (uint64_t)v173, v68, v69, v196);
      }
    }
LABEL_252:
    double v174 = *(double *)(*(void *)(a1 + 448) + 8 * v145);
    if (v158)
    {
      char v175 = v149;
      if (v174 == 0.0
        || v174 >= *(double *)(*(void *)(a1 + 400) + 8 * v145)
        && v174 <= *(double *)(*(void *)(a1 + 416) + 8 * v145))
      {
        goto LABEL_259;
      }
LABEL_258:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2960, (uint64_t)"lm/multilm", 109, (uint64_t)"%.500s %u", v68, v69, v196);
      goto LABEL_259;
    }
    char v175 = v149;
    if (v174 != 0.0) {
      goto LABEL_258;
    }
LABEL_259:
    double v148 = v148 + v162;
    double v147 = v147 + v166;
    double v146 = v146 + v163;
    double v192 = v192 + v167;
    if (*(_DWORD *)(a1 + 176))
    {
      uint64_t v176 = 0;
      unint64_t v177 = 0;
      do
      {
        double v178 = *(double *)(*(void *)(*v94 + v176) + 8 * v145);
        char v179 = v160 ^ 1;
        if (v178 != -1.0) {
          char v179 = 1;
        }
        if ((v179 & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2969, (uint64_t)"lm/multilm", 110, (uint64_t)"%.500s %.500s %u", v68, v69, v196);
        }
        if (v178 != -1.0
          && v178 != 0.0
          && (v178 < *(double *)(*(void *)(a1 + 400) + 8 * v145)
           || v178 > *(double *)(*(void *)(a1 + 416) + 8 * v145)))
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2975, (uint64_t)"lm/multilm", 111, (uint64_t)"%.500s %.500s %u", v68, v69, v196);
        }
        if (v178 != -1.0) {
          *(double *)&v199[2 * v177] = v178 + *(double *)&v199[2 * v177];
        }
        if (v160) {
          *((double *)v197 + v177) = v178 + *((double *)v197 + v177);
        }
        ++v177;
        v176 += 16;
      }
      while (v177 < *(unsigned int *)(a1 + 176));
    }
    char v149 = v175;
LABEL_276:
    char v180 = v149 ^ 1;
    if (!*(unsigned char *)(a1 + 113)) {
      char v180 = 1;
    }
    if ((v180 & 1) == 0 && !*(unsigned char *)(*(void *)(a1 + 544) + v145)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 2993, (uint64_t)"lm/multilm", 112, (uint64_t)"%.500s %u", v68, v69, v196);
    }
    ++v145;
  }
  while (v145 < *v194);
  double v181 = v192;
  double v182 = v188;
  if (!*(unsigned char *)(a1 + 114)) {
    goto LABEL_308;
  }
  if (v148 > 1.0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3001, (uint64_t)"lm/multilm", 13, (uint64_t)"%.500s %f", v68, v69, v196);
  }
  if (v186 >= 1.0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3004, (uint64_t)"lm/multilm", 117, (uint64_t)"%.500s %f", v68, v69, v196);
  }
  if (v187 < 1.0) {
LABEL_292:
  }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3007, (uint64_t)"lm/multilm", 14, (uint64_t)"%.500s %f", v68, v69, v196);
  if (v147 >= 1.0001) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3011, (uint64_t)"lm/multilm", 29, (uint64_t)"%.500s %f", v68, v69, v196);
  }
  if (v182 == 0.0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3014, (uint64_t)"lm/multilm", 78, (uint64_t)"%.500s", v68, v69, v196);
  }
  if (fabs(v146 + -1.0) >= 0.0001) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3017, (uint64_t)"lm/multilm", 49, (uint64_t)"%.500s %f", v68, v69, v196);
  }
  if (v181 >= 1.0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3020, (uint64_t)"lm/multilm", 77, (uint64_t)"%.500s %f", v68, v69, v196);
  }
  if (*(_DWORD *)(a1 + 176))
  {
    uint64_t v183 = 0;
    unint64_t v184 = 0;
    do
    {
      if (fabs(*(double *)&v199[2 * v184] + -1.0) >= 0.0001) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3027, (uint64_t)"lm/multilm", 50, (uint64_t)"%.500s %.500s %f", v68, v69, v196);
      }
      if (*((double *)v197 + v184) == 0.0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3030, (uint64_t)"lm/multilm", 79, (uint64_t)"%.500s %.500s", v68, v69, v196);
      }
      ++v184;
      v183 += 16;
    }
    while (v184 < *(unsigned int *)(a1 + 176));
  }
LABEL_308:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v197);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v199);
  DgnPrimArray<double>::copyArraySlice(v185, &v201, 0, v202);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v201);
  DgnArray<DgnString>::releaseAll((uint64_t)v203);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v204);
  DgnArray<DgnString>::releaseAll((uint64_t)&v206);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v208);
}

void sub_213F3BE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
}

void readObject<DgnPrimArray<double>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  uint64_t v6 = v16;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v16 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      uint64_t v11 = v6 - v8;
      uint64_t v12 = 16 * v8;
      do
      {
        uint64_t v13 = (void *)(*(void *)a2 + v12);
        void *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    uint64_t v9 = (int)v8;
    uint64_t v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      readObject<double>(a1, *(void *)a2 + v14, a3);
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

uint64_t readObject<unsigned int>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v15 = 0;
  int v13 = 0;
  int v14 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  readObject((uint64_t)a1, &v15, a3);
  readObject((uint64_t)a1, &v14, a3);
  readObject((uint64_t)a1, &v13, a3);
  readObject<unsigned int,DgnPrimArray<unsigned int>>(a1, (uint64_t)&v9, a3);
  int v7 = v13;
  int v6 = v14;
  *(_DWORD *)a2 = v15;
  *(_DWORD *)(a2 + 4) = v6;
  *(_DWORD *)(a2 + 8) = v7;
  DgnPrimArray<int>::copyArraySlice(a2 + 16, &v9, 0, v10);
  *(_DWORD *)(a2 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v12;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v11;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v9);
}

void sub_213F3C100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void readObject<WordDummySpec>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v13 = 0;
  readObject((uint64_t)a1, &v13, a3);
  unsigned int v6 = v13;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v13 > v7) {
    DgnArray<PrefilterResultFrame>::reallocElts(a2, v13 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v6 > v8)
  {
    int v9 = v6 - v8;
    uint64_t v10 = 32 * v8;
    do
    {
      WordDummySpec::WordDummySpec((WordDummySpec *)(*(void *)a2 + v10));
      v10 += 32;
      --v9;
    }
    while (v9);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      WordDummySpec::readObject((WordDummySpec *)(*(void *)a2 + v11), a1, a3);
      ++v12;
      v11 += 32;
    }
    while (v12 < *(unsigned int *)(a2 + 8));
  }
}

void (***MultiLanguageModel::saveMultiBinary(MultiLanguageModel *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  unsigned int v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x28u, a4, "LMMULBIN", 24, 6);
  unsigned int v14 = *((_DWORD *)this + 36);
  int v15 = 0;
  writeObject((uint64_t)v7, (int *)&v14, &v15);
  if (v14)
  {
    for (unint64_t i = 0; i < v14; ++i)
    {
      int v13 = 0;
      int v9 = *(_DWORD *)(*((void *)this + 17) + 4 * i);
      if ((v9 - 1) < 4) {
        int v10 = v9 + 1;
      }
      else {
        int v10 = 1;
      }
      int v13 = v10;
      writeObject((uint64_t)v7, &v13, &v15);
    }
  }
  writeObject((uint64_t)v7, (int *)this + 29, &v15);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 112, &v15);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 113, &v15);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 114, &v15);
  writeObject((uint64_t)v7, (uint64_t)this + 120, &v15);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 152, &v15);
  writeObject((uint64_t)v7, (int *)this + 39, &v15);
  writeObject((uint64_t)v7, (int *)this + 40, &v15);
  writeObject<DgnString>((uint64_t)v7, (uint64_t)this + 168, &v15);
  writeObject<DgnPrimArray<double>>(v7, (uint64_t)this + 184, (unsigned int *)&v15);
  writeObject<DgnPrimArray<double>>(v7, (uint64_t)this + 200, (unsigned int *)&v15);
  writeObject<DgnPrimArray<short>>((uint64_t)v7, (uint64_t)this + 216, &v15);
  writeObject<unsigned int>((uint64_t)v7, (int *)this + 58, &v15);
  writeObject((uint64_t)v7, (int *)this + 70, &v15);
  writeObject((uint64_t)v7, (int *)this + 71, &v15);
  writeObject<DgnString>((uint64_t)v7, (uint64_t)this + 352, &v15);
  writeObject<DgnString>((uint64_t)v7, (uint64_t)this + 320, &v15);
  writeObject<double>(v7, (uint64_t)this + 384, (unsigned int *)&v15);
  writeObject<double>(v7, (uint64_t)this + 400, (unsigned int *)&v15);
  writeObject<double>(v7, (uint64_t)this + 416, (unsigned int *)&v15);
  writeObject<double>(v7, (uint64_t)this + 432, (unsigned int *)&v15);
  writeObject<double>(v7, (uint64_t)this + 448, (unsigned int *)&v15);
  writeObject<short>((uint64_t)v7, (uint64_t)this + 464, &v15);
  writeObject<short>((uint64_t)v7, (uint64_t)this + 480, &v15);
  writeObject<double>(v7, (uint64_t)this + 496, (unsigned int *)&v15);
  writeObject<DgnString>((uint64_t)v7, (uint64_t)this + 512, &v15);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 528, &v15);
  writeObject<BOOL>(v7, (uint64_t)this + 544, (unsigned int *)&v15);
  writeObject((uint64_t)v7, (int *)this + 140, &v15);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 568, &v15);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 584, &v15);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 600, &v15);
  writeObjectChecksum((uint64_t)v7, &v15);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x28u, v15);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

uint64_t writeObject<DgnPrimArray<double>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<double>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnPrimArray<short>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<short>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<unsigned int>(uint64_t a1, int *a2, _DWORD *a3)
{
  int v9 = *a2;
  writeObject(a1, &v9, a3);
  int v8 = a2[1];
  writeObject(a1, &v8, a3);
  int v7 = a2[2];
  writeObject(a1, &v7, a3);
  return writeObject<unsigned int,DgnPrimArray<unsigned int>>(a1, (uint64_t)(a2 + 4), a3);
}

uint64_t DgnArray<DgnString>::findBelow(void *a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 0;
  if (*(_DWORD *)(a2 + 8)) {
    uint64_t v4 = *(const char **)a2;
  }
  else {
    uint64_t v4 = (const char *)&unk_2140A5940;
  }
  uint64_t v5 = a3;
  for (unint64_t i = (_DWORD *)(*a1 + 8); ; i += 4)
  {
    int v7 = *i ? (const char *)*((void *)i - 1) : (const char *)&unk_2140A5940;
    if (!strcmp(v7, v4)) {
      break;
    }
    if (v5 == ++v3) {
      return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

void MultiLanguageModel::verifySubdirContents(MultiLanguageModel *this, const DFile *a2, unsigned int a3, int a4, int a5)
{
  if (!a5)
  {
    if (a4)
    {
      if (DFile::subFileExists((uint64_t)a2, 0x73u)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3478, (uint64_t)"lm/multilm", 128, (uint64_t)"%.500s %u", v10, v11, (char)".wns");
      }
      if (DFile::subFileExists((uint64_t)a2, 0x29u)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3482, (uint64_t)"lm/multilm", 128, (uint64_t)"%.500s %u", v12, v13, (char)".mls");
      }
      int v14 = *(_DWORD *)(*((void *)this + 17) + 4 * a3);
      if (v14 == 4) {
        return;
      }
      if (v14 == 1)
      {
        if ((DFile::subFileExists((uint64_t)a2, 0x6Au) & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3488, (uint64_t)"lm/multilm", 126, (uint64_t)"%u", v15, v16, a3);
        }
        int v17 = DFile::subFileExists((uint64_t)a2, 0x6Fu);
        if (DFile::subFileExists((uint64_t)a2, 0x70u) + v17 >= 2) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3497, (uint64_t)"lm/multilm", 130, (uint64_t)"%u", v18, v19, a3);
        }
        if (!DFile::subFileExists((uint64_t)a2, 0x28u)) {
          return;
        }
        char v44 = a3;
        int v22 = "%u";
        uint64_t v23 = 3502;
LABEL_30:
        uint64_t v33 = 131;
LABEL_49:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", v23, (uint64_t)"lm/multilm", v33, (uint64_t)v22, v20, v21, v44);
        return;
      }
      int v39 = DFile::subFileExists((uint64_t)a2, 0x28u);
      int v40 = DFile::subFileExists((uint64_t)a2, 0x6Fu) + v39;
      int v41 = v40 + DFile::subFileExists((uint64_t)a2, 0x70u);
      if (DFile::subFileExists((uint64_t)a2, 0x6Au)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3514, (uint64_t)"lm/multilm", 15, (uint64_t)"%u", v20, v21, a3);
      }
      if (v41 == 1) {
        return;
      }
      char v44 = a3;
      int v22 = "%u";
      uint64_t v23 = 3516;
    }
    else
    {
      if (DFile::subFileExists((uint64_t)a2, 0x6Fu)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3525, (uint64_t)"lm/multilm", 127, (uint64_t)"%.500s %u", v24, v25, (char)".wnb");
      }
      if (DFile::subFileExists((uint64_t)a2, 0x70u)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3529, (uint64_t)"lm/multilm", 127, (uint64_t)"%.500s %u", v26, v27, (char)".wnd");
      }
      if (DFile::subFileExists((uint64_t)a2, 0x28u)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3533, (uint64_t)"lm/multilm", 127, (uint64_t)"%.500s %u", v28, v29, (char)".mlb");
      }
      int v30 = *(_DWORD *)(*((void *)this + 17) + 4 * a3);
      if (v30 == 4) {
        return;
      }
      if (v30 == 1)
      {
        if ((DFile::subFileExists((uint64_t)a2, 0x6Bu) & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3538, (uint64_t)"lm/multilm", 126, (uint64_t)"%u", v31, v32, a3);
        }
        if (!DFile::subFileExists((uint64_t)a2, 0x29u)) {
          return;
        }
        char v44 = a3;
        int v22 = "%u";
        uint64_t v23 = 3543;
        goto LABEL_30;
      }
      int v42 = DFile::subFileExists((uint64_t)a2, 0x29u);
      int v43 = DFile::subFileExists((uint64_t)a2, 0x73u) + v42;
      if (DFile::subFileExists((uint64_t)a2, 0x6Bu)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3554, (uint64_t)"lm/multilm", 15, (uint64_t)"%u", v20, v21, a3);
      }
      if (v43 == 1) {
        return;
      }
      char v44 = a3;
      int v22 = "%u";
      uint64_t v23 = 3556;
    }
    uint64_t v33 = 129;
    goto LABEL_49;
  }
  if (DFile::subFileExists((uint64_t)a2, 0x73u) & 1) != 0 || (DFile::subFileExists((uint64_t)a2, 0x6Fu)) {
    int v8 = 1;
  }
  else {
    int v8 = DFile::subFileExists((uint64_t)a2, 0x70u);
  }
  int v34 = v8 + DFile::subFileExists((uint64_t)a2, 0x29u);
  int v35 = DFile::subFileExists((uint64_t)a2, 0x28u);
  unsigned int v38 = v34 + v35 + DFile::subFileExists((uint64_t)a2, 0x6Du);
  if (!*((unsigned char *)this + 112))
  {
    if (a4)
    {
      if (v38 <= 1) {
        return;
      }
    }
    else if (v38 == 1)
    {
      return;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3466, (uint64_t)"lm/multilm", 9, (uint64_t)"%s", v36, v37, (char)&errStr_lm_multilm_E_BAD_NUM_SPEC_SUBFILES);
    if (!*((unsigned char *)this + 112)) {
      return;
    }
  }
  if (v38 >= 2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3468, (uint64_t)"lm/multilm", 42, (uint64_t)"%s", v36, v37, (char)&errStr_lm_multilm_E_MULTIPLE_SPEC_SUBFILES);
  }
}

uint64_t MultiLanguageModel::getTotalPreloadableBytes(MultiLanguageModel *this)
{
  unint64_t v1 = *((unsigned int *)this + 29);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
      unint64_t v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

uint64_t MultiLanguageModel::computeTotalPreloadableBytes(MultiLanguageModel *this)
{
  unint64_t v1 = *((unsigned int *)this + 29);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * v3);
    if (v5)
    {
      v4 += (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
      unint64_t v1 = *((unsigned int *)this + 29);
    }
    ++v3;
  }
  while (v3 < v1);
  return v4;
}

void MultiLanguageModel::finalizeLM(uint64_t a1, LanguageModel *a2, DFile *a3, DFileChecksums *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14)
{
  unsigned int v34 = a6;
  unint64_t v18 = *(unsigned int *)(a1 + 116);
  if (v18)
  {
    uint64_t v19 = 0;
    for (unint64_t i = 0; i < v18; ++i)
    {
      if (*(void *)(*(void *)(a1 + 40) + 8 * i))
      {
        uint64_t v21 = a7;
        uint64_t v22 = a8;
        unsigned int v23 = a9;
        if (*(unsigned char *)(a1 + 112))
        {
          uint64_t v21 = a7;
          uint64_t v22 = a8;
          unsigned int v23 = a9;
          if (*(_DWORD *)(a1 + 576) >= 2u)
          {
            uint64_t v24 = *(void *)(a1 + 568);
            if (i)
            {
              uint64_t v25 = (unsigned int *)(v24 + v19);
              uint64_t v26 = (unsigned int *)(*(void *)(a1 + 584) + v19);
              uint64_t v21 = 1;
            }
            else
            {
              uint64_t v21 = 0;
              uint64_t v25 = (unsigned int *)(v24 + 4);
              uint64_t v26 = (unsigned int *)(*(void *)(a1 + 584) + 4 * (*(_DWORD *)(a1 + 592) - 1));
            }
            uint64_t v22 = *v25;
            unsigned int v23 = *v26;
          }
        }
        v36[0] = 1;
        v36[1] = i;
        DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)v36, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8 * i);
        LOBYTE(v31) = a12;
        BYTE4(v3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a10;
        LODWORD(v3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v23;
        (*(void (**)(uint64_t, LanguageModel *, DFile *, DFileChecksums *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, uint64_t))(*(void *)v27 + 48))(v27, a2, a3, a4, a5, v34, v21, v22, v30, a11, v31, a13, a14);
        DFile::popCurrentSubDirComponent((uint64_t)a3);
        unint64_t v18 = *(unsigned int *)(a1 + 116);
      }
      v19 += 4;
    }
  }
  if (!*(unsigned char *)(a1 + 112))
  {
    BOOL v28 = MultiLanguageModel::maybeUpgradeToWordNgramTemplates(a1, a2, a3, a8, a9, a10, a11, a8);
    MultiLanguageModel::setWordNgramTemplates(a1, a11, v28);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 696))(a1);
  if ((DFile::subFileExists((uint64_t)a3, 0x4Au) & 1) != 0 || DFile::subFileExists((uint64_t)a3, 0x49u))
  {
    if (*(_DWORD *)(a1 + 128) > 1u) {
      LMForDirPathVerify = MultiLanguageModel::getLMForDirPathVerify((MultiLanguageModel *)a1, "RecentBufferLMPath", (unsigned __int8 **)(a1 + 120), 0, a3, 0);
    }
    else {
      LMForDirPathVerify = (MultiLanguageModel *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a1 + 120);
    }
    *(void *)(a1 + 56) = LMForDirPathVerify;
  }
  BYTE4(v3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a10;
  LODWORD(v3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a9;
  LanguageModel::finalizeLM(a1, a2, a3, a4, a5, v34, a7, a8, v30, a11, a12);
}

BOOL MultiLanguageModel::maybeUpgradeToWordNgramTemplates(uint64_t a1, LanguageModel *a2, DFile *a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 376);
  if (v8)
  {
    int v27 = *(_DWORD *)(a1 + 376);
    if (a6) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3891, (uint64_t)"lm/multilm", 132, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_TOPICLMPATHS_WITH_WORDNGRAMTEMPLATES);
    }
    uint64_t v13 = (uint64_t *)(a1 + 368);
    if (*(_DWORD *)(a1 + 116))
    {
      unint64_t v14 = 0;
      do
      {
        if (*(_DWORD *)(*(void *)(a1 + 136) + 4 * v14) == 1)
        {
          uint64_t v15 = *v13;
          if (*(_DWORD *)(*v13 + 16 * v14 + 8) <= 1u)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3901, (uint64_t)"lm/multilm", 120, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NO_LEGACY_PATH);
            uint64_t v15 = *v13;
          }
          LMForDirPathVerify = MultiLanguageModel::getLMForDirPathVerify((MultiLanguageModel *)a1, "TemplateLMPath", (unsigned __int8 **)(v15 + 16 * v14), a2, a3, 1);
          int v17 = LMForDirPathVerify;
          unsigned int v18 = 0;
          int v19 = -1;
          while (*(_DWORD *)(a7 + 8) != v18)
          {
            uint64_t v20 = *(void *)(*(void *)a7 + 8 * v18);
            uint64_t v21 = *(MultiLanguageModel **)(v20 + 168);
            if (v21 == LMForDirPathVerify) {
              int v19 = v18;
            }
            ++v18;
            if (v21 == LMForDirPathVerify && v20 != 0)
            {
              DgnString::DgnString((DgnString *)v31);
LABEL_22:
              v30[0] = 4;
              v30[1] = v19;
              SubDirExtension::appendToString((DgnString *)v30, (DgnString *)v31);
              goto LABEL_23;
            }
          }
          unsigned int v23 = MemChunkAlloc(0xB0uLL, 0);
          WordNgramTemplate::WordNgramTemplate((WordNgramTemplate *)v23, *(const WordList **)(a1 + 16), a4, a5, v17);
          int v19 = *(_DWORD *)(a7 + 8);
          unsigned int v24 = v19;
          if (v19 == *(_DWORD *)(a7 + 12))
          {
            DgnPrimArray<unsigned long long>::reallocElts(a7, 1, 1);
            unsigned int v24 = *(_DWORD *)(a7 + 8);
          }
          *(void *)(*(void *)a7 + 8 * vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v23;
          *(_DWORD *)(a7 + 8) = v24 + 1;
          DgnString::DgnString((DgnString *)v31);
          if (v23) {
            goto LABEL_22;
          }
        }
        else
        {
          DgnString::DgnString((DgnString *)v31);
        }
LABEL_23:
        uint64_t v25 = *(unsigned int *)(a1 + 328);
        if (v25 == *(_DWORD *)(a1 + 332))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 320, 1, 1);
          uint64_t v25 = *(unsigned int *)(a1 + 328);
        }
        DgnString::DgnString((DgnString *)(*(void *)(a1 + 320) + 16 * v25), (const DgnString *)v31);
        ++*(_DWORD *)(a1 + 328);
        DgnString::~DgnString((DgnString *)v31);
        ++v14;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
    DgnArray<DgnString>::releaseAll(a1 + 368);
    int v8 = v27;
  }
  return v8 != 0;
}

void sub_213F3D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::setWordNgramTemplates(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a1 + 116))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = a1 + 336;
    while (*(_DWORD *)(*(void *)(a1 + 320) + v6 + 8) < 2u)
    {
      unsigned int v9 = *(_DWORD *)(a1 + 344);
      if (v9 == *(_DWORD *)(a1 + 348))
      {
        DgnPrimArray<unsigned long long>::reallocElts(v8, 1, 1);
        unsigned int v9 = *(_DWORD *)(a1 + 344);
      }
      *(void *)(*(void *)(a1 + 336) + 8 * v9) = 0;
      *(_DWORD *)(a1 + 344) = v9 + 1;
LABEL_36:
      ++v7;
      v6 += 16;
      if (v7 >= *(unsigned int *)(a1 + 116)) {
        return;
      }
    }
    unsigned int v30 = 0;
    DgnString::DgnString((DgnString *)&v28);
    unint64_t v27 = 0xFFFFFFFF00000004;
    SubDirExtension::appendToString((DgnString *)&v27, (DgnString *)&v28);
    DgnString::operator+=((DgnString *)&v28, "%u");
    if (v29) {
      uint64_t v10 = v28;
    }
    else {
      uint64_t v10 = (const char *)&unk_2140A5940;
    }
    uint64_t v11 = fmtcheck(v10, "%u");
    uint64_t v12 = *(void *)(a1 + 320) + v6;
    if (*(_DWORD *)(v12 + 8)) {
      uint64_t v13 = *(const char **)v12;
    }
    else {
      uint64_t v13 = (const char *)&unk_2140A5940;
    }
    if (sscanf(v13, v11, &v30, v26) != 1)
    {
      uint64_t v16 = *(void *)(a1 + 320) + v6;
      if (*(_DWORD *)(v16 + 8)) {
        int v17 = *(void **)v16;
      }
      else {
        int v17 = &unk_2140A5940;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3977, (uint64_t)"lm/multilm", 124, (uint64_t)"%.500s", v14, v15, (char)v17);
    }
    uint64_t v18 = v30;
    if (*(unsigned int *)(a2 + 8) <= (unint64_t)v30)
    {
      uint64_t v19 = *(void *)(a1 + 320) + v6;
      if (*(_DWORD *)(v19 + 8)) {
        uint64_t v20 = *(void **)v19;
      }
      else {
        uint64_t v20 = &unk_2140A5940;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3980, (uint64_t)"lm/multilm", 125, (uint64_t)"%.500s", v14, v15, (char)v20);
      uint64_t v18 = v30;
    }
    uint64_t v21 = *(void *)(*(void *)a2 + 8 * v18);
    uint64_t v22 = *(void *)(*(void *)(a1 + 304) + 8 * v7);
    if (a3)
    {
      if (!*(unsigned char *)(v22 + 13))
      {
LABEL_33:
        unsigned int v25 = *(_DWORD *)(a1 + 344);
        if (v25 == *(_DWORD *)(a1 + 348))
        {
          DgnPrimArray<unsigned long long>::reallocElts(v8, 1, 1);
          unsigned int v25 = *(_DWORD *)(a1 + 344);
        }
        *(void *)(*(void *)(a1 + 336) + 8 * v25) = v21;
        *(_DWORD *)(a1 + 344) = v25 + 1;
        DgnString::~DgnString((DgnString *)&v28);
        goto LABEL_36;
      }
      if (*(_DWORD *)(v21 + 12) == 16777212)
      {
        *(unsigned char *)(v22 + 13) = 0;
        goto LABEL_33;
      }
    }
    else if (!*(unsigned char *)(v22 + 13))
    {
      goto LABEL_33;
    }
    if (*(_DWORD *)(v21 + 12) == 16777212)
    {
      uint64_t v23 = *(void *)(a1 + 320) + v6;
      if (*(_DWORD *)(v23 + 8)) {
        unsigned int v24 = *(void **)v23;
      }
      else {
        unsigned int v24 = &unk_2140A5940;
      }
      uint64_t v26 = v24;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3999, (uint64_t)"lm/multilm", 44, (uint64_t)"%u %.500s", v14, v15, v7);
    }
    goto LABEL_33;
  }
}

void sub_213F3D578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

MultiLanguageModel *MultiLanguageModel::getLMForDirPathVerify(MultiLanguageModel *this, const char *a2, unsigned __int8 **a3, LanguageModel *a4, DFile *a5, int a6)
{
  char v9 = (char)a2;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (*((_DWORD *)a3 + 2)) {
    uint64_t v11 = *a3;
  }
  else {
    uint64_t v11 = (unsigned __int8 *)&unk_2140A5940;
  }
  DgnSplitStringIntoTokens(v11, "/", (uint64_t)&v38, 0);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a5);
  DgnString::DgnString((DgnString *)&v35);
  DFile::makeSubFileName(CurrentSubDirComponents, (char *)&unk_2140A5940, (DgnString *)&v35);
  if (*(_DWORD *)(v38 + 8)) {
    uint64_t v13 = *(const char **)v38;
  }
  else {
    uint64_t v13 = (const char *)&unk_2140A5940;
  }
  if (!strcmp(v13, ".."))
  {
    this = a4;
    if (*(_DWORD *)(CurrentSubDirComponents + 8))
    {
      unint64_t v16 = 0;
      unsigned int v17 = v37;
      uint64_t v18 = 4;
      do
      {
        int v19 = *(_DWORD *)(*(void *)CurrentSubDirComponents + v18);
        if (v17 == HIDWORD(v37))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
          unsigned int v17 = v37;
        }
        *(_DWORD *)(v36 + 4 * v17) = v19;
        unsigned int v17 = v37 + 1;
        LODWORD(v37) = v37 + 1;
        ++v16;
        v18 += 8;
      }
      while (v16 < *(unsigned int *)(CurrentSubDirComponents + 8));
      this = a4;
    }
  }
  if (v39)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    int v22 = 0;
    do
    {
      if (*(_DWORD *)(v38 + v20 + 8)) {
        uint64_t v23 = *(const char **)(v38 + v20);
      }
      else {
        uint64_t v23 = (const char *)&unk_2140A5940;
      }
      if (!strcmp(v23, ".."))
      {
        if ((a6 ^ 1 | v22)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3805, (uint64_t)"lm/multilm", 55, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        }
        int v26 = v37;
        if (!v37)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3809, (uint64_t)"lm/multilm", 56, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
          int v26 = v37;
        }
        LODWORD(v37) = v26 - 1;
        if (v26 == 1 {
          && a4
        }
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3816, (uint64_t)"lm/multilm", 57, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        }
      }
      else
      {
        int IndexForLMSubDirExtensionString = GetIndexForLMSubDirExtensionString(v23);
        uint64_t v25 = v37;
        if (v37 == (unint64_t)HIDWORD(v37))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v36, 1, 1);
          uint64_t v25 = v37;
        }
        *(_DWORD *)(v36 + 4 * v25) = IndexForLMSubDirExtensionString;
        LODWORD(v37) = v37 + 1;
        int v22 = 1;
      }
      ++v21;
      v20 += 16;
    }
    while (v21 < v39);
  }
  if (v37)
  {
    unint64_t v27 = 0;
    do
    {
      uint64_t v28 = *(unsigned int *)(v36 + 4 * v27);
      if (this
      {
        unsigned int v30 = v29;
        if (v29[112] && v28 != *((_DWORD *)v29 + 140)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3841, (uint64_t)"lm/multilm", 58, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        }
        if (v28 > *((_DWORD *)v30 + 29) - 1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3845, (uint64_t)"lm/multilm", 59, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        }
        int v31 = *(_DWORD *)(*((void *)v30 + 17) + 4 * v28);
        if (v31) {
          BOOL v32 = v31 == 3;
        }
        else {
          BOOL v32 = 1;
        }
        if (!v32) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3851, (uint64_t)"lm/multilm", 60, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        }
        uint64_t v33 = (MultiLanguageModel **)(*((void *)v30 + 5) + 8 * v28);
      }
      else
      {
        if (v28 || !*((void *)this + 29)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3862, (uint64_t)"lm/multilm", 61, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
        }
        uint64_t v33 = (MultiLanguageModel **)((char *)this + 232);
      }
      this = *v33;
      ++v27;
    }
    while (v27 < v37);
  }
  if (!this
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3869, (uint64_t)"lm/multilm", 62, (uint64_t)"%.500s %.500s %.500s", v14, v15, v9);
  }
  DgnString::~DgnString((DgnString *)&v35);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v36);
  DgnArray<DgnString>::releaseAll((uint64_t)&v38);
  return this;
}

void sub_213F3DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnString::~DgnString((DgnString *)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getLMWithLegacyPath(MultiLanguageModel *this, DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((unsigned char *)this + 112)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 3746, (uint64_t)"lm/multilm", 120, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NO_LEGACY_PATH);
  }
  uint64_t v10 = *((unsigned int *)this + 140);
  if (*((_DWORD *)a2 + 2) >= 2u) {
    DgnString::operator+=(a2, "/");
  }
  DgnString::DgnString((DgnString *)v15);
  v14[0] = 1;
  v14[1] = v10;
  SubDirExtension::appendToString((DgnString *)v14, a2);
  uint64_t v11 = *(void *)(*((void *)this + 5) + 8 * v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, DgnString *))(*(void *)v11 + 56))(v11, a2);
  DgnString::~DgnString((DgnString *)v15);
  return v12;
}

void sub_213F3DD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::canSaveAsText(MultiLanguageModel *this)
{
  unint64_t v1 = *((unsigned int *)this + 29);
  if (v1)
  {
    for (unint64_t i = 0; i < v1; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
        if (!result) {
          return result;
        }
        unint64_t v1 = *((unsigned int *)this + 29);
      }
    }
  }
  return 1;
}

void MultiLanguageModel::saveUnsTable(uint64_t a1, void *a2, char *a3, DgnTextFileWriter *this, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  if (*(_DWORD *)(a1 + 116))
  {
    unint64_t v16 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, a5, a3);
      DgnTextFileWriter::setLineFieldValue(this, a6, (char *)&unk_2140A5940);
      DgnString::DgnString((DgnString *)&v21);
      v20[0] = 1;
      v20[1] = v16;
      SubDirExtension::appendToString((DgnString *)v20, (DgnString *)&v21);
      if (v22) {
        unsigned int v17 = v21;
      }
      else {
        unsigned int v17 = (char *)&unk_2140A5940;
      }
      DgnTextFileWriter::setLineFieldValue(this, a7, v17);
      DgnTextFileWriter::setLineFieldIntegerValue(this, a8, *(_DWORD *)(*a2 + 4 * v16));
      DgnTextFileWriter::setLineFieldRealValue(this, a9, 0.0);
      DgnTextFileWriter::setLineFieldValue(this, a10, (char *)&unk_2140A5940);
      DgnTextFileWriter::writeNextLine(this);
      DgnString::~DgnString((DgnString *)&v21);
      ++v16;
    }
    while (v16 < *(unsigned int *)(a1 + 116));
  }
}

void sub_213F3DF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveIntTable(uint64_t a1, void *a2, char *a3, DgnTextFileWriter *this, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  if (*(_DWORD *)(a1 + 116))
  {
    unint64_t v16 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, a5, a3);
      DgnTextFileWriter::setLineFieldValue(this, a6, (char *)&unk_2140A5940);
      DgnString::DgnString((DgnString *)&v21);
      v20[0] = 1;
      v20[1] = v16;
      SubDirExtension::appendToString((DgnString *)v20, (DgnString *)&v21);
      if (v22) {
        unsigned int v17 = v21;
      }
      else {
        unsigned int v17 = (char *)&unk_2140A5940;
      }
      DgnTextFileWriter::setLineFieldValue(this, a7, v17);
      DgnTextFileWriter::setLineFieldIntegerValue(this, a8, *(_DWORD *)(*a2 + 4 * v16));
      DgnTextFileWriter::setLineFieldRealValue(this, a9, 0.0);
      DgnTextFileWriter::setLineFieldValue(this, a10, (char *)&unk_2140A5940);
      DgnTextFileWriter::writeNextLine(this);
      DgnString::~DgnString((DgnString *)&v21);
      ++v16;
    }
    while (v16 < *(unsigned int *)(a1 + 116));
  }
}

void sub_213F3E06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveRealTable(uint64_t a1, void *a2, uint64_t a3, char *a4, DgnTextFileWriter *this, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  if (*(_DWORD *)(a1 + 116))
  {
    unint64_t v16 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, a6, a4);
      if (*(_DWORD *)(a3 + 8)) {
        unsigned int v17 = *(char **)a3;
      }
      else {
        unsigned int v17 = (char *)&unk_2140A5940;
      }
      DgnTextFileWriter::setLineFieldValue(this, a7, v17);
      DgnString::DgnString((DgnString *)&v23);
      v22[0] = 1;
      v22[1] = v16;
      SubDirExtension::appendToString((DgnString *)v22, (DgnString *)&v23);
      if (v24) {
        uint64_t v18 = v23;
      }
      else {
        uint64_t v18 = (char *)&unk_2140A5940;
      }
      DgnTextFileWriter::setLineFieldValue(this, a8, v18);
      DgnTextFileWriter::setLineFieldIntegerValue(this, a9, 0);
      DgnTextFileWriter::setLineFieldRealValue(this, a10, *(double *)(*a2 + 8 * v16));
      DgnTextFileWriter::setLineFieldValue(this, a11, (char *)&unk_2140A5940);
      DgnTextFileWriter::writeNextLine(this);
      DgnString::~DgnString((DgnString *)&v23);
      ++v16;
    }
    while (v16 < *(unsigned int *)(a1 + 116));
  }
}

void sub_213F3E1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveStringTable(uint64_t a1, void *a2, char *a3, DgnTextFileWriter *this, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  if (*(_DWORD *)(a1 + 116))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, a5, a3);
      DgnTextFileWriter::setLineFieldValue(this, a6, (char *)&unk_2140A5940);
      DgnString::DgnString((DgnString *)&v24);
      v23[0] = 1;
      v23[1] = v16;
      SubDirExtension::appendToString((DgnString *)v23, (DgnString *)&v24);
      if (v25) {
        unsigned int v17 = v24;
      }
      else {
        unsigned int v17 = (char *)&unk_2140A5940;
      }
      DgnTextFileWriter::setLineFieldValue(this, a7, v17);
      DgnTextFileWriter::setLineFieldIntegerValue(this, a8, 0);
      DgnTextFileWriter::setLineFieldRealValue(this, a9, 0.0);
      uint64_t v18 = *a2 + v15;
      if (*(_DWORD *)(v18 + 8)) {
        int v19 = *(char **)v18;
      }
      else {
        int v19 = (char *)&unk_2140A5940;
      }
      DgnTextFileWriter::setLineFieldValue(this, a10, v19);
      DgnTextFileWriter::writeNextLine(this);
      DgnString::~DgnString((DgnString *)&v24);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a1 + 116));
  }
}

void sub_213F3E310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::saveMultiText(MultiLanguageModel *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v64);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v64, (uint64_t)a2, 0x29u, a3);
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v64, sMLS_Versions, (uint64_t)&v62, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v64, "MultiLanguageModelSpec", (void *)(v62 + 8 * (v63 - 1)));
  if (*((unsigned char *)this + 112))
  {
    uint64_t v11 = "Dispatch";
  }
  else if (*((unsigned char *)this + 113))
  {
    uint64_t v11 = "LogLinear";
  }
  else
  {
    uint64_t v11 = "InterpolatedLinear";
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v64, "MultiLMType", v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v64, "NumberOfSubDirectories", *((unsigned int *)this + 29));
  unsigned int v12 = *((unsigned __int8 *)this + 114);
  if (*((unsigned char *)this + 114))
  {
    unsigned int v12 = *((_DWORD *)this + 39);
    unsigned int v13 = *((_DWORD *)this + 40) - v12;
  }
  else
  {
    unsigned int v13 = 0;
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v64, "NumberOfFactoryWeightsNames", v12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v64, "NumberOfClientWeightsNames", v13);
  if (*((_DWORD *)this + 32) >= 2u) {
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v64, "RecentBufferLMPath", *((const char **)this + 15));
  }
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  DgnString::DgnString((DgnString *)v57, "TableName");
  unsigned int v14 = v59;
  if (v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    unsigned int v14 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v14), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  unsigned int v15 = v61;
  if (v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    unsigned int v15 = v61;
  }
  *(_DWORD *)(v60 + 4 * v15) = 0;
  LODWORD(v61) = v15 + 1;
  DgnString::DgnString((DgnString *)v57, "WeightsName");
  unsigned int v16 = v59;
  if (v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    unsigned int v16 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v16), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  unsigned int v17 = v61;
  if (v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    unsigned int v17 = v61;
  }
  *(_DWORD *)(v60 + 4 * v17) = 0;
  LODWORD(v61) = v17 + 1;
  DgnString::DgnString((DgnString *)v57, "SubDirectory");
  unsigned int v18 = v59;
  if (v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    unsigned int v18 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v18), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  unsigned int v19 = v61;
  if (v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    unsigned int v19 = v61;
  }
  *(_DWORD *)(v60 + 4 * v19) = 0;
  LODWORD(v61) = v19 + 1;
  DgnString::DgnString((DgnString *)v57, "IntValue");
  unsigned int v20 = v59;
  if (v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    unsigned int v20 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v20), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  unsigned int v21 = v61;
  if (v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    unsigned int v21 = v61;
  }
  *(_DWORD *)(v60 + 4 * v21) = 1;
  LODWORD(v61) = v21 + 1;
  DgnString::DgnString((DgnString *)v57, "RealValue");
  unsigned int v22 = v59;
  if (v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    unsigned int v22 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v22), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  unsigned int v23 = v61;
  if (v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    unsigned int v23 = v61;
  }
  *(_DWORD *)(v60 + 4 * v23) = 2;
  LODWORD(v61) = v23 + 1;
  DgnString::DgnString((DgnString *)v57, "StrValue");
  unsigned int v24 = v59;
  if (v59 == HIDWORD(v59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v58, 1, 1);
    unsigned int v24 = v59;
  }
  DgnString::DgnString((DgnString *)(v58 + 16 * v24), (const DgnString *)v57);
  LODWORD(v59) = v59 + 1;
  DgnString::~DgnString((DgnString *)v57);
  unsigned int v25 = v61;
  if (v61 == HIDWORD(v61))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v60, 1, 1);
    unsigned int v25 = v61;
  }
  *(_DWORD *)(v60 + 4 * v25) = 0;
  LODWORD(v61) = v25 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v64, (uint64_t)&v60, (uint64_t)&v58);
  DgnArray<DgnString>::DgnArray(v57, *((unsigned int *)this + 29));
  if (*((_DWORD *)this + 29))
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      uint64_t v28 = *(int *)(*((void *)this + 17) + 4 * v27);
      if (v28 >= 5) {
        int v29 = 0;
      }
      else {
        int v29 = off_2641F4FA0[v28];
      }
      DgnString::operator=((DgnString *)(v57[0] + v26), v29);
      ++v27;
      v26 += 16;
    }
    while (v27 < *((unsigned int *)this + 29));
  }
  MultiLanguageModel::saveStringTable((uint64_t)this, v57, "SlotType", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
  if (*((unsigned char *)this + 113)) {
    MultiLanguageModel::saveStringTable((uint64_t)this, (void *)this + 64, "CorrectiveName", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
  }
  if (!*((unsigned char *)this + 112))
  {
    MultiLanguageModel::saveStringTable((uint64_t)this, (void *)this + 44, "TopicName", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveStringTable((uint64_t)this, (void *)this + 40, "TemplatePath", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
  }
  if (*((unsigned char *)this + 114))
  {
    DgnString::DgnString((DgnString *)&v55);
    MultiLanguageModel::saveRealTable((uint64_t)this, (void *)this + 50, (uint64_t)&v55, "WeightFloor", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveRealTable((uint64_t)this, (void *)this + 52, (uint64_t)&v55, "WeightCeiling", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveRealTable((uint64_t)this, (void *)this + 54, (uint64_t)&v55, "PrefiltererFixedWeight", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveRealTable((uint64_t)this, (void *)this + 48, (uint64_t)&v55, "CurrentWeight", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveRealTable((uint64_t)this, (void *)this + 56, (uint64_t)&v55, "DefaultTopicWeight", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    DgnString::~DgnString((DgnString *)&v55);
    if (*((unsigned char *)this + 114))
    {
      unint64_t v30 = *((unsigned int *)this + 44);
      if (v30)
      {
        uint64_t v31 = 0;
        for (unint64_t i = 0; i < v30; ++i)
        {
          uint64_t v33 = *((void *)this + 21) + v31;
          if (*(_DWORD *)(v33 + 8) >= 2u)
          {
            if (i >= *((unsigned int *)this + 39)) {
              unsigned int v34 = "ClientWeight";
            }
            else {
              unsigned int v34 = "FactoryWeight";
            }
            MultiLanguageModel::saveRealTable((uint64_t)this, (void *)(*((void *)this + 23) + v31), v33, v34, (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
            unint64_t v30 = *((unsigned int *)this + 44);
          }
          v31 += 16;
        }
      }
    }
  }
  if (*((unsigned char *)this + 113))
  {
    DgnString::DgnString((DgnString *)&v55);
    MultiLanguageModel::saveRealTable((uint64_t)this, (void *)this + 62, (uint64_t)&v55, "LogLinearWeight", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveIntTable((uint64_t)this, (void *)this + 66, "LogLinearOffset", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    uint64_t v35 = *((unsigned int *)this + 29);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    if (v35)
    {
      unsigned int v65 = 0;
      unint64_t v36 = realloc_array(0, &v65, 4 * v35, 0, 0, 1);
      uint64_t v37 = v65;
      uint64_t v53 = v65;
      int v38 = *((_DWORD *)this + 29);
      LODWORD(v54) = v35;
      HIDWORD(v54) = v36 >> 2;
      if (v38)
      {
        unint64_t v39 = 0;
        uint64_t v40 = *((void *)this + 68);
        do
        {
          v37[v39] = *(unsigned __int8 *)(v40 + v39);
          ++v39;
        }
        while (v39 < *((unsigned int *)this + 29));
      }
    }
    else
    {
      LODWORD(v54) = 0;
    }
    MultiLanguageModel::saveUnsTable((uint64_t)this, &v53, "IsActive", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
    DgnString::~DgnString((DgnString *)&v55);
  }
  if (*((unsigned char *)this + 112))
  {
    uint64_t v41 = *((unsigned int *)this + 29);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    if (v41)
    {
      uint64_t v53 = 0;
      unint64_t v42 = realloc_array(0, &v53, 4 * v41, 0, 0, 1);
      uint64_t v54 = 0;
      uint64_t v55 = v53;
      uint64_t v43 = *((unsigned int *)this + 29);
      LODWORD(v56) = v41;
      HIDWORD(v56) = v42 >> 2;
      uint64_t v53 = 0;
      if (v43)
      {
        unsigned int v65 = 0;
        unint64_t v44 = realloc_array(0, &v65, 4 * v43, 0, 0, 1);
        uint64_t v45 = v65;
        uint64_t v53 = v65;
        int v46 = *((_DWORD *)this + 29);
        LODWORD(v54) = v43;
        HIDWORD(v54) = v44 >> 2;
        if (v46)
        {
          unint64_t v47 = 0;
          uint64_t v48 = *((void *)this + 71);
          uint64_t v49 = v55;
          uint64_t v50 = *((void *)this + 73);
          do
          {
            int v51 = *(_DWORD *)(v48 + 4 * v47);
            if (v51 == 0xFFFFFF) {
              int v51 = -1;
            }
            v49[v47] = v51;
            int v52 = *(_DWORD *)(v50 + 4 * v47);
            if (v52 == 0xFFFFFF) {
              int v52 = -1;
            }
            v45[v47++] = v52;
          }
          while (v47 < *((unsigned int *)this + 29));
        }
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v53 = 0;
      uint64_t v54 = 0;
    }
    LODWORD(v54) = 0;
LABEL_76:
    MultiLanguageModel::saveIntTable((uint64_t)this, &v55, "MinWordId", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveIntTable((uint64_t)this, &v53, "MaxWordId", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    MultiLanguageModel::saveUnsTable((uint64_t)this, (void *)this + 75, "PrefiltererPerWordPenalty", (DgnTextFileWriter *)v64, 0, 1u, 2u, 3u, 4u, 5u);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
  }
  DgnArray<DgnString>::releaseAll((uint64_t)v57);
  DgnArray<DgnString>::releaseAll((uint64_t)&v58);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v60);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v62);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v64);
}

void sub_213F3ED6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va5, a5);
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v15 = va_arg(va4, void);
  uint64_t v17 = va_arg(va4, void);
  va_copy(va5, va4);
  uint64_t v18 = va_arg(va5, void);
  uint64_t v20 = va_arg(va5, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va4);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va5);
  _Unwind_Resume(a1);
}

RecentBuffer *MultiLanguageModel::saveLM(RecentBuffer **this, DFile *a2, DFileChecksums *a3, uint64_t a4, DFileChecksums *a5)
{
  if (a4) {
    MultiLanguageModel::saveMultiText((MultiLanguageModel *)this, a2, (int)a5);
  }
  else {
    MultiLanguageModel::saveMultiBinary((MultiLanguageModel *)this, a2, a3, (int)a5);
  }
  if (*((_DWORD *)this + 29))
  {
    unint64_t v16 = 0;
    do
    {
      v20[0] = 1;
      v20[1] = v16;
      DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)v20, v10, v11, v12, v13, v14, v15);
      uint64_t v17 = *((void *)this[5] + v16);
      if (v17) {
        (*(void (**)(uint64_t, DFile *, DFileChecksums *, uint64_t, DFileChecksums *))(*(void *)v17 + 72))(v17, a2, a3, a4, a5);
      }
      if (!*((unsigned char *)this + 112))
      {
        uint64_t v18 = (WordNgramBuildSpec *)*((void *)this[38] + v16);
        if (v18) {
          WordNgramBuildSpec::saveWordNgramBuildSpec(v18, a2, a3, a4, a5);
        }
      }
      DFile::popCurrentSubDirComponent((uint64_t)a2);
      ++v16;
    }
    while (v16 < *((unsigned int *)this + 29));
  }
  uint64_t result = this[1];
  if (result) {
    return (RecentBuffer *)RecentBuffer::saveRecentBuffer(result, a2, a3, a4, a5);
  }
  return result;
}

unsigned int *MultiLanguageModel::saveLMShared(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result[29];
  if (v3)
  {
    uint64_t v6 = result;
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t result = *(unsigned int **)(*((void *)v6 + 5) + 8 * i);
      if (result)
      {
        unsigned int v8 = *(_DWORD *)(*((void *)v6 + 17) + 4 * i);
        if (v8 <= 3 && v8 != 1)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(void *)result + 80))(result, a2, a3);
          unint64_t v3 = v6[29];
        }
      }
    }
  }
  return result;
}

unsigned int *MultiLanguageModel::reloadLMShared(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result[29];
  if (v3)
  {
    uint64_t v6 = result;
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t result = *(unsigned int **)(*((void *)v6 + 5) + 8 * i);
      if (result)
      {
        unsigned int v8 = *(_DWORD *)(*((void *)v6 + 17) + 4 * i);
        if (v8 <= 3 && v8 != 1)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(void *)result + 88))(result, a2, a3);
          unint64_t v3 = v6[29];
        }
      }
    }
  }
  return result;
}

RecentBuffer *MultiLanguageModel::saveVocAndSvc(uint64_t a1, DFile *a2, DFile *a3, DFileChecksums *a4, int a5, DFileChecksums *a6, int a7, int a8, int a9, int a10)
{
  MultiLanguageModel::saveMultiBinary((MultiLanguageModel *)a1, a2, a4, (int)a6);
  if (*(_DWORD *)(a1 + 116))
  {
    unint64_t v21 = 0;
    do
    {
      int v32 = 1;
      int v33 = v21;
      DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v32, v15, v16, v17, v18, v19, v20);
      int v32 = 1;
      int v33 = v21;
      DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)&v32, v22, v23, v24, v25, v26, v27);
      uint64_t v28 = *(uint64_t **)(*(void *)(a1 + 40) + 8 * v21);
      if (v28)
      {
        uint64_t v29 = *v28;
        if (*(_DWORD *)(*(void *)(a1 + 136) + 4 * v21) == 1) {
          (*(void (**)(void))(v29 + 72))();
        }
        else {
          (*(void (**)(uint64_t *))(v29 + 96))(v28);
        }
      }
      if (!*(unsigned char *)(a1 + 112))
      {
        unint64_t v30 = *(WordNgramBuildSpec **)(*(void *)(a1 + 304) + 8 * v21);
        if (v30) {
          WordNgramBuildSpec::saveWordNgramBuildSpec(v30, a2, a4, 0, a6);
        }
      }
      DFile::popCurrentSubDirComponent((uint64_t)a2);
      DFile::popCurrentSubDirComponent((uint64_t)a3);
      ++v21;
    }
    while (v21 < *(unsigned int *)(a1 + 116));
  }
  uint64_t result = *(RecentBuffer **)(a1 + 8);
  if (result) {
    return (RecentBuffer *)RecentBuffer::saveRecentBuffer(result, a2, a4, 0, a6);
  }
  return result;
}

uint64_t MultiLanguageModel::setLMScale(MultiLanguageModel *this, uint64_t a2)
{
  unint64_t v4 = *((unsigned int *)this + 29);
  if (v4)
  {
    for (unint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, a2);
        unint64_t v4 = *((unsigned int *)this + 29);
      }
    }
  }
  *((_DWORD *)this + 8) = a2;

  return CombineTable::initCombineTable((uint64_t)this + 704, (double)a2);
}

BOOL MultiLanguageModel::recentBufferUsesWord(MultiLanguageModel *this, unsigned int a2)
{
  if (a2 > 0xFFFFF3 || *((unsigned char *)this + 112) == 0) {
    return 1;
  }
  uint64_t v4 = *((unsigned int *)this + 29);
  if (v4)
  {
    uint64_t v5 = 0;
    while (*(_DWORD *)(*((void *)this + 71) + 4 * v5) > a2 || *(_DWORD *)(*((void *)this + 73) + 4 * v5) < a2)
    {
      if (v4 == ++v5) {
        goto LABEL_12;
      }
    }
    int v6 = *((_DWORD *)this + 140);
  }
  else
  {
LABEL_12:
    int v6 = *((_DWORD *)this + 140);
    LODWORD(v5) = v6;
  }
  return v5 == v6;
}

BOOL MultiLanguageModel::hasRecentBuffer(MultiLanguageModel *this)
{
  unint64_t v2 = *((unsigned int *)this + 29);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 120))(v4)) {
          return 1;
        }
        unint64_t v2 = *((unsigned int *)this + 29);
      }
    }
  }

  return LanguageModel::hasRecentBuffer(this);
}

uint64_t MultiLanguageModel::getRecentBufferLength(MultiLanguageModel *this)
{
  unint64_t v2 = *((unsigned int *)this + 29);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * v3);
      if (v5)
      {
        unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 128))(v5);
        if (v4 <= v6) {
          unsigned int v4 = v6;
        }
        unint64_t v2 = *((unsigned int *)this + 29);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  else
  {
    unsigned int v4 = 0;
  }
  LODWORD(result) = LanguageModel::getRecentBufferLength(this);
  if (v4 <= result) {
    return result;
  }
  else {
    return v4;
  }
}

WordLanguageModel ***MultiLanguageModel::addToRecent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *(unsigned int *)(a1 + 116);
  if (v6)
  {
    for (unint64_t i = 0; i < v6; ++i)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8 * i);
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v8 + 136))(v8, a2, a3);
        unint64_t v6 = *(unsigned int *)(a1 + 116);
      }
    }
  }

  return LanguageModel::addToRecent((WordLanguageModel ***)a1, a2, a3);
}

void MultiLanguageModel::clearRecent(MultiLanguageModel *this)
{
  unint64_t v2 = *((unsigned int *)this + 29);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 144))(v4);
        unint64_t v2 = *((unsigned int *)this + 29);
      }
    }
  }

  LanguageModel::clearRecent(this);
}

uint64_t MultiLanguageModel::setWeights(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = *(_DWORD *)(a2 + 8);
  if (v10 != *(_DWORD *)(a1 + 116))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4634, (uint64_t)"lm/multilm", 3, (uint64_t)"%d %d", a7, a8, *(_DWORD *)(a2 + 8));
    unsigned int v10 = *(_DWORD *)(a2 + 8);
  }
  v34[0] = 0;
  v34[1] = 0;
  DgnPrimArray<double>::copyArraySlice((uint64_t)v34, (uint64_t *)a2, 0, v10);
  uint64_t v13 = *(unsigned int *)(a1 + 116);
  if (!v13) {
    goto LABEL_10;
  }
  uint64_t v14 = 0;
  int v15 = *(unsigned __int8 *)(a1 + 114);
  uint64_t v16 = v34[0];
  uint64_t v17 = 8 * v13;
  char v18 = 1;
  do
  {
    if (v15 && !*(void *)(*(void *)(a1 + 40) + v14)) {
      *(void *)(v16 + v14) = 0;
    }
    v18 &= *(double *)(v16 + v14) == 0.0;
    v14 += 8;
  }
  while (v17 != v14);
  if (v18) {
LABEL_10:
  }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4650, (uint64_t)"lm/multilm", 45, (uint64_t)"%s", v11, v12, (char)&errStr_lm_multilm_E_ALL_WEIGHTS_ZERO);
  if (*(unsigned char *)(a1 + 113))
  {
    unsigned int v19 = *(_DWORD *)(a1 + 116);
    unsigned int v20 = *(_DWORD *)(a1 + 508);
    LODWORD(v21) = v19;
    if (v19 > v20)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 496, v19 - v20, 0);
      LODWORD(v21) = *(_DWORD *)(a1 + 116);
    }
    *(_DWORD *)(a1 + 504) = v19;
    if (v21)
    {
      uint64_t v22 = (uint64_t *)v34[0];
      uint64_t v23 = *(void **)(a1 + 496);
      uint64_t v21 = v21;
      do
      {
        uint64_t v24 = *v22++;
        *v23++ = v24;
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    MultiLanguageModel::fitWeightsToFloorAndCeiling(a1, (uint64_t)v34, (uint64_t)&v32);
    if (v33) {
      DgnPrimArray<double>::copyArraySlice(a1 + 384, &v32, 0, v33);
    }
    else {
      MultiLanguageModel::failsafeFitWeightsToFloorAndCeiling(a1, v34, a1 + 384);
    }
    unint64_t v25 = *(unsigned int *)(a1 + 116);
    if (v25)
    {
      for (unint64_t i = 0; i < v25; ++i)
      {
        long double v27 = *(double *)(*(void *)(a1 + 384) + 8 * i);
        if (v27 == 0.0)
        {
          LOWORD(v28) = 2000;
        }
        else
        {
          long double v29 = DgnLog(v27);
          LODWORD(v3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(a1 + 32);
          int v28 = (int)(0.5 - v29 * (double)v30);
          unint64_t v25 = *(unsigned int *)(a1 + 116);
        }
        *(_WORD *)(*(void *)(a1 + 464) + 2 * i) = v28;
      }
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v34);
}

void sub_213F3F7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::fitWeightsToFloorAndCeiling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  DgnPrimArray<double>::copyArraySlice((uint64_t)&v68, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
  uint64_t v5 = *(unsigned int *)(a1 + 116);
  if (v5)
  {
    double v6 = 0.0;
    uint64_t v7 = v68;
    uint64_t v8 = *(unsigned int *)(a1 + 116);
    do
    {
      double v9 = *v7++;
      double v6 = v6 + v9;
      --v8;
    }
    while (v8);
    unsigned int v10 = v68;
    uint64_t v11 = *(unsigned int *)(a1 + 116);
    double v12 = 1.0 / v6;
    do
    {
      double *v10 = v12 * *v10;
      ++v10;
      --v11;
    }
    while (v11);
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v64 = 0;
    unint64_t v13 = realloc_array(0, &v64, 4 * v5, 0, 0, 1);
    uint64_t v14 = v64;
    uint64_t v66 = v64;
    int v15 = *(_DWORD *)(a1 + 116);
    LODWORD(v67) = v5;
    HIDWORD(v67) = v13 >> 2;
    if (v15)
    {
      unint64_t v16 = 0;
      do
        v14[v16++] = 0;
      while (v16 < *(unsigned int *)(a1 + 116));
    }
  }
  else
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
  }
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  DgnPrimArray<double>::copyArraySlice((uint64_t)&v64, (uint64_t *)&v68, 0, v69);
  unsigned int v17 = 0;
  v63[0] = 0;
  v63[1] = 0;
  char v18 = 1;
  uint64_t v19 = 0xFFFFFFFFLL;
  double v20 = 1.0;
  do
  {
    unsigned int v21 = v17;
    DgnPrimArray<double>::copyArraySlice((uint64_t)v63, (uint64_t *)&v64, 0, v65);
    uint64_t v22 = *(unsigned int *)(a1 + 116);
    if (!v22)
    {
      double v26 = v20;
      goto LABEL_49;
    }
    uint64_t v23 = 0;
    double v24 = 0.0;
    double v25 = 1.79769313e308;
    double v26 = v20;
    double v27 = 0.0;
    double v28 = 0.0;
    uint64_t v29 = v19;
    do
    {
      double v30 = v68[v23];
      if (v30 == 0.0) {
        goto LABEL_15;
      }
      double v32 = *(double *)(*(void *)(a1 + 400) + 8 * v23);
      if (v20 * v30 >= v32 || v19 == v23)
      {
        double v32 = *(double *)(*(void *)(a1 + 416) + 8 * v23);
        if (v20 * v30 <= v32 || v19 == v23)
        {
          double v27 = v27 + v30;
LABEL_15:
          double v31 = v25;
          goto LABEL_16;
        }
        double v24 = v24 + v32;
        if (v30 <= 0.0) {
          goto LABEL_15;
        }
        double v31 = -(v32 - v20 * v30);
        if (v31 >= v25) {
          goto LABEL_15;
        }
        if (v32 <= 0.0 || (v66[v23] & 0x10) != 0) {
          goto LABEL_15;
        }
        char v18 = 0;
        uint64_t v29 = v23;
      }
      else
      {
        double v28 = v28 + v32;
        if (v30 <= 0.0) {
          goto LABEL_15;
        }
        double v31 = v32 + -v20 * v30;
        if (v31 >= v25 || (v66[v23] & 1) != 0) {
          goto LABEL_15;
        }
        uint64_t v29 = v23;
        char v18 = 1;
      }
      double v26 = v32 / v30;
LABEL_16:
      ++v23;
      double v25 = v31;
    }
    while (v22 != v23);
    if (v27 > 0.0 && v28 + v24 <= 1.0)
    {
      double v26 = (1.0 - v28 - v24) / v27;
      uint64_t v19 = 0xFFFFFFFFLL;
      goto LABEL_54;
    }
    uint64_t v19 = v29;
LABEL_49:
    if (v20 == v26)
    {
LABEL_80:
      *(_DWORD *)(a3 + 8) = 0;
      goto LABEL_93;
    }
    if (v18) {
      int v37 = 1;
    }
    else {
      int v37 = 16;
    }
    v66[v19] |= v37;
LABEL_54:
    double v38 = fabs((v26 - v20) / v20);
    double v39 = 1.79769313e308;
    if (v26 == 0.0) {
      double v39 = 0.0;
    }
    if (v20 == 0.0) {
      double v38 = v39;
    }
    uint64_t v40 = *(unsigned int *)(a1 + 116);
    if (v40)
    {
      uint64_t v41 = 0;
      uint64_t v42 = (uint64_t)v68;
      uint64_t v43 = v64;
      uint64_t v44 = v63[0];
      do
      {
        double v45 = *(double *)(v42 + v41 * 8);
        if (v45 == 0.0)
        {
          v43[v41] = 0;
        }
        else
        {
          if (v19 == v41)
          {
            if (v18) {
              uint64_t v46 = *(void *)(a1 + 400);
            }
            else {
              uint64_t v46 = *(void *)(a1 + 416);
            }
            v43[v19] = *(void *)(v46 + 8 * v19);
          }
          else
          {
            double v47 = *(double *)(*(void *)(a1 + 400) + v41 * 8);
            double v48 = *(double *)(*(void *)(a1 + 416) + v41 * 8);
            double v49 = v26 * v45;
            if (v48 <= v49)
            {
              if (v47 <= v48) {
                double v47 = *(double *)(*(void *)(a1 + 416) + v41 * 8);
              }
            }
            else if (v47 <= v49)
            {
              double v47 = v49;
            }
            *(double *)&v43[v41] = v47;
          }
          double v50 = *(double *)(v44 + v41 * 8);
          if (v50 > 0.0)
          {
            double v51 = fabs((*(double *)&v43[v41] - v50) / v50);
            if (v38 <= v51) {
              double v38 = v51;
            }
          }
        }
        ++v41;
      }
      while (v40 != v41);
    }
    if (v38 <= 0.0001) {
      break;
    }
    unsigned int v17 = v21 + 1;
    double v20 = v26;
  }
  while (v21 < 0x3E8);
  if (v21 > 0x3E7) {
    goto LABEL_80;
  }
  if (v40)
  {
    double v52 = 0.0;
    uint64_t v53 = (double *)v64;
    uint64_t v54 = v40;
    do
    {
      double v55 = *v53++;
      double v52 = v52 + v55;
      --v54;
    }
    while (v54);
    uint64_t v56 = (double *)v64;
    uint64_t v57 = v40;
    double v58 = 1.0 / v52;
    do
    {
      double *v56 = v58 * *v56;
      ++v56;
      --v57;
    }
    while (v57);
    uint64_t v59 = 0;
    uint64_t v60 = 8 * v40;
    do
    {
      if (*(void *)(*(void *)(a1 + 40) + v59))
      {
        double v61 = *(double *)((char *)v64 + v59);
        if (v61 != 0.0
          && (v61 + 0.0001 < *(double *)(*(void *)(a1 + 400) + v59)
           || v61 + -0.0001 > *(double *)(*(void *)(a1 + 416) + v59)))
        {
          goto LABEL_80;
        }
      }
      v59 += 8;
    }
    while (v60 != v59);
  }
  DgnPrimArray<double>::copyArraySlice(a3, (uint64_t *)&v64, 0, v65);
LABEL_93:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v66);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v68);
}

void sub_213F3FC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
}

uint64_t MultiLanguageModel::failsafeFitWeightsToFloorAndCeiling(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 116);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (v4)
  {
    double v24 = 0;
    unint64_t v7 = realloc_array(0, &v24, 8 * v4, 0, 0, 1);
    uint64_t v8 = (char *)v24;
    uint64_t v22 = v24;
    uint64_t v9 = *(unsigned int *)(a1 + 116);
    LODWORD(v23) = v4;
    HIDWORD(v23) = v7 >> 3;
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *a2;
      uint64_t v12 = 8 * v9;
      double v13 = 0.0;
      do
      {
        double v14 = *(double *)(v11 + v10);
        if (v14 == 0.0)
        {
          *(void *)&v8[v10] = 0;
        }
        else
        {
          double v15 = *(double *)(*(void *)(a1 + 400) + v10);
          if (v14 >= v15 && (double v15 = *(double *)(*(void *)(a1 + 416) + v10), v14 <= v15))
          {
            *(double *)&v8[v10] = v14;
            double v15 = v14;
          }
          else
          {
            *(double *)&v8[v10] = v15;
          }
          double v13 = v13 + v15;
        }
        v10 += 8;
      }
      while (v12 != v10);
      for (uint64_t i = 0; v12 != i; i += 8)
      {
        double v17 = *(double *)&v8[i];
        if (v17 != 0.0)
        {
          if (v13 <= 1.0)
          {
            double v18 = *(double *)(*(void *)(a1 + 416) + i) - v17;
            if (v18 <= 0.0) {
              continue;
            }
            double v19 = 1.0 - v13;
            if (1.0 - v13 <= v18) {
              double v18 = 1.0 - v13;
            }
            double v20 = v17 + v18;
          }
          else
          {
            double v18 = v17 - *(double *)(*(void *)(a1 + 400) + i);
            if (v18 <= 0.0) {
              continue;
            }
            double v19 = v13 + -1.0;
            if (v13 + -1.0 <= v18) {
              double v18 = v13 + -1.0;
            }
            double v20 = v17 - v18;
          }
          *(double *)&v8[i] = v20;
          if (v20 == 0.0)
          {
            *(void *)&v8[i] = 0x3EE4F8B588E368F1;
            double v18 = v18 + -0.00001;
          }
          if (v18 == v19) {
            break;
          }
          if (v13 > 1.0) {
            double v18 = -v18;
          }
          double v13 = v13 + v18;
        }
      }
    }
  }
  else
  {
    LODWORD(v23) = 0;
  }
  DgnPrimArray<double>::copyArraySlice(a3, (uint64_t *)&v22, 0, v4);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
}

void sub_213F3FE88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getNumDispatchComponents(MultiLanguageModel *this)
{
  if (*((unsigned char *)this + 112)) {
    return *((unsigned int *)this + 29);
  }
  else {
    return 0;
  }
}

void MultiLanguageModel::setDispatchPrefiltererPerWordPenalty(MultiLanguageModel *this, unsigned int a2, unsigned int a3)
{
  if ((*(unsigned int (**)(MultiLanguageModel *))(*(void *)this + 544))(this) <= a2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4720, (uint64_t)"lm/multilm", 133, (uint64_t)"%u %u", v6, v7, a2);
  }
  if (a3 >= 0x3E9) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4722, (uint64_t)"lm/multilm", 134, (uint64_t)"%u", v6, v7, a3);
  }
  *(_DWORD *)(*((void *)this + 75) + 4 * a2) = a3;
}

uint64_t MultiLanguageModel::getDispatchPrefiltererPerWordPenalty(MultiLanguageModel *this, unsigned int a2)
{
  if ((*(unsigned int (**)(MultiLanguageModel *))(*(void *)this + 544))(this) <= a2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4734, (uint64_t)"lm/multilm", 133, (uint64_t)"%u %u", v4, v5, a2);
  }
  return *(unsigned int *)(*((void *)this + 75) + 4 * a2);
}

uint64_t MultiLanguageModel::getNumInterpolatedLms(MultiLanguageModel *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 114);
  unint64_t v2 = *((unsigned int *)this + 29);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v5)
      {
        uint64_t v1 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 568))(v5) + v1;
        unint64_t v2 = *((unsigned int *)this + 29);
      }
    }
  }
  return v1;
}

uint64_t MultiLanguageModel::setInterpolatedLmWeights(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(unsigned char *)(a1 + 114))
  {
    if (!*a3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 496))(a1, a2);
      return 1;
    }
    --*a3;
  }
  unint64_t v6 = *(unsigned int *)(a1 + 116);
  if (v6)
  {
    for (unint64_t i = 0; i < v6; ++i)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8 * i);
      if (v8)
      {
        if ((*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v8 + 576))(v8, a2, a3)) {
          return 1;
        }
        unint64_t v6 = *(unsigned int *)(a1 + 116);
      }
    }
  }
  return 0;
}

uint64_t MultiLanguageModel::getInterpolatedLmWeights(MultiLanguageModel *this, unsigned int *a2)
{
  if (*((unsigned char *)this + 114))
  {
    if (!*a2) {
      return (uint64_t)this + 384;
    }
    --*a2;
  }
  unint64_t v4 = *((unsigned int *)this + 29);
  if (v4)
  {
    for (unint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v6)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v6 + 584))(v6, a2);
        if (result) {
          return result;
        }
        unint64_t v4 = *((unsigned int *)this + 29);
      }
    }
  }
  return 0;
}

uint64_t MultiLanguageModel::getActiveTopicLmSlots(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 616)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4833, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"getActiveTopicLmSlots");
  }
  size_t v11 = *(unsigned int *)(a1 + 104);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v20, *(_DWORD *)(a1 + 104));
  int v19 = 0;
  MultiLanguageModel::getActiveTopicLmSlotsInternal(a1, (uint64_t)v20, &v19);
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v18, v11);
  if (v11) {
    bzero(v18[0], v11);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = (*(_DWORD *)(*(void *)a2 + 4 * v14) - 1);
      if (v15 >= v11) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4854, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v12, v13, *(_DWORD *)(*(void *)a2 + 4 * v14));
      }
      unint64_t v16 = v18[0];
      if (*((unsigned char *)v18[0] + v15))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4857, (uint64_t)"lm/multilm", 96, (uint64_t)"%u", v12, v13, *(_DWORD *)(*(void *)a2 + 4 * v14));
        unint64_t v16 = v18[0];
      }
      v16[v15] = 1;
      *(unsigned char *)(*a3 + v14++) = *(unsigned char *)(v20[0] + v15);
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
}

void sub_213F403D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::getActiveTopicLmSlotsInternal(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)(result + 116))
  {
    uint64_t v5 = result;
    for (unint64_t i = 0; i < *(unsigned int *)(v5 + 116); ++i)
    {
      uint64_t v7 = *a3;
      if (v7 >= *(_DWORD *)(a2 + 8)) {
        return result;
      }
      int v8 = *(_DWORD *)(*(void *)(v5 + 136) + 4 * i);
      if (v8 == 1)
      {
        uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 8 * i);
        if (v9)
        {
          if (*(unsigned char *)(v5 + 113)) {
            uint64_t v9 = 496;
          }
          else {
            uint64_t v9 = 384;
          }
          LOBYTE(v9) = *(double *)(*(void *)(v5 + v9) + 8 * i) != 0.0;
        }
        *(unsigned char *)(*(void *)a2 + v7) = v9;
        *a3 = v7 + 1;
      }
      else if (*(unsigned char *)(v5 + 112))
      {
        if (v8 == 3 && i == *(_DWORD *)(v5 + 560))
        {
LABEL_18:
          size_t v11 = *(void **)(*(void *)(v5 + 40) + 8 * i);
          if (v11) {
          uint64_t result = MultiLanguageModel::getActiveTopicLmSlotsInternal(v11, a2, a3);
          }
        }
      }
      else if (v8 == 3)
      {
        goto LABEL_18;
      }
    }
  }
  return result;
}

uint64_t MultiLanguageModel::setTopicLmSlotWeights(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 616)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4903, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"setTopicLmSlotWeights");
  }
  uint64_t v11 = *(unsigned int *)(a1 + 104);
  double v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = a1;
  if (v11)
  {
    __b = 0;
    unint64_t v12 = realloc_array(0, &__b, 8 * v11, 0, 0, 1);
    uint64_t v13 = (double *)__b;
    double v18 = (double *)__b;
    LODWORD(v19) = v11;
    HIDWORD(v19) = v12 >> 3;
    memset_pattern16(__b, &unk_2140A5930, 8 * v11);
  }
  else
  {
    uint64_t v13 = 0;
    LODWORD(v19) = 0;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = (*(_DWORD *)(*(void *)a2 + 4 * v14) - 1);
      if (v15 >= v11)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4919, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(void *)a2 + 4 * v14));
        uint64_t v13 = v18;
      }
      if (v13[v15] != -2.0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4922, (uint64_t)"lm/multilm", 96, (uint64_t)"%u", a7, a8, *(_DWORD *)(*(void *)a2 + 4 * v14));
        uint64_t v13 = v18;
      }
      v13[v15] = *(double *)(*a3 + 8 * v14++);
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  LODWORD(__b) = 0;
  MultiLanguageModel::setTopicLmSlotWeightsInternal(v17, (uint64_t)&v18, (unsigned int *)&__b);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
}

void sub_213F4070C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::setTopicLmSlotWeightsInternal(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  v30[0] = 0;
  v30[1] = 0;
  if (*(unsigned char *)(a1 + 114)) {
    DgnPrimArray<double>::copyArraySlice((uint64_t)v30, (uint64_t *)(a1 + 384), 0, *(_DWORD *)(a1 + 392));
  }
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v29, *(_DWORD *)(a1 + 116));
  int v6 = *(_DWORD *)(a1 + 116);
  if (!v6)
  {
    if (!*(unsigned char *)(a1 + 114)) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  bzero(v29[0], *(unsigned int *)(a1 + 116));
  unsigned int v9 = *a3;
  if (*a3 < *(_DWORD *)(a2 + 8))
  {
    unint64_t v10 = 0;
    double v11 = 0.0;
    while (1)
    {
      int v12 = *(_DWORD *)(*(void *)(a1 + 136) + 4 * v10);
      if (v12 == 1)
      {
        if (*(unsigned char *)(a1 + 114))
        {
          double v13 = *(double *)(*(void *)a2 + 8 * v9);
          if (v13 != -2.0)
          {
            if (v13 == -1.0) {
              double v13 = *(double *)(*(void *)(a1 + 448) + 8 * v10);
            }
            if (!*(void *)(*(void *)(a1 + 40) + 8 * v10)) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 4970, (uint64_t)"lm/multilm", 80, (uint64_t)"%u", v7, v8, v9);
            }
            if (v13 == 0.0 || (double v14 = *(double *)(*(void *)(a1 + 400) + 8 * v10), v13 >= v14))
            {
              double v14 = v13;
              if (v13 > *(double *)(*(void *)(a1 + 416) + 8 * v10)) {
                double v14 = *(double *)(*(void *)(a1 + 416) + 8 * v10);
              }
            }
            double v11 = v11 + v14;
            *(double *)(v30[0] + 8 * v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v14;
            *((unsigned char *)v29[0] + v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 1;
            unsigned int v9 = *a3;
          }
        }
        *a3 = v9 + 1;
      }
      else if (*(unsigned char *)(a1 + 112))
      {
        if (v12 == 3 && v10 == *(_DWORD *)(a1 + 560))
        {
LABEL_26:
          unint64_t v16 = *(void **)(*(void *)(a1 + 40) + 8 * v10);
          if (v16) {
          MultiLanguageModel::setTopicLmSlotWeightsInternal(v16, a2, a3);
          }
        }
      }
      else if (v12 == 3)
      {
        goto LABEL_26;
      }
      ++v10;
      unint64_t v17 = *(unsigned int *)(a1 + 116);
      if (v10 < v17)
      {
        unsigned int v9 = *a3;
        if (*a3 < *(_DWORD *)(a2 + 8)) {
          continue;
        }
      }
      goto LABEL_35;
    }
  }
  double v11 = 0.0;
  LODWORD(v17) = v6;
LABEL_35:
  if (*(unsigned char *)(a1 + 114))
  {
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v17;
      double v20 = 0.0;
      do
      {
        if (!*((unsigned char *)v29[0] + v18)) {
          double v20 = v20 + *(double *)(*(void *)(a1 + 384) + 8 * v18);
        }
        ++v18;
      }
      while (v17 != v18);
      double v21 = 0.9999 / v11;
      double v22 = 1.0;
      if (v11 <= 0.9999) {
        double v21 = 1.0;
      }
      if (v20 != 0.0)
      {
        double v23 = 1.0 - v11;
        if (v11 > 0.9999) {
          double v23 = 0.0001;
        }
        double v22 = v23 / v20;
      }
      double v24 = (unsigned __int8 *)v29[0];
      double v25 = (double *)v30[0];
      do
      {
        if (*v24++) {
          double v27 = v21;
        }
        else {
          double v27 = v22;
        }
        *double v25 = *v25 * v27;
        ++v25;
        --v19;
      }
      while (v19);
    }
LABEL_52:
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 496))(a1, v30);
  }
LABEL_53:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v29);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v30);
}

void sub_213F40A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::hasWeights(MultiLanguageModel *this)
{
  return *((unsigned __int8 *)this + 152);
}

uint64_t MultiLanguageModel::getWeightsData(uint64_t result, void *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = result + 168;
  *a3 = *(_DWORD *)(result + 156);
  *a4 = *(_DWORD *)(result + 160);
  return result;
}

uint64_t MultiLanguageModel::cleanupWeightsData(uint64_t this)
{
  if (*(unsigned char *)(this + 152))
  {
    uint64_t v1 = this;
    if (!*(unsigned char *)(this + 114) && *(_DWORD *)(this + 28))
    {
      DgnArray<DgnString>::releaseAll(this + 168);
      *(_DWORD *)(v1 + 156) = 0;
      *(_DWORD *)(v1 + 16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
      *(_DWORD *)(v1 + 24pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_DWORD *)(v1 + 236);
      this = *(void *)(v1 + 248);
      if (this)
      {
        this = MemChunkFree((void *)this, 0);
        *(void *)(v1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
      }
      *(void *)(v1 + 256) = 0;
      *(void *)(v1 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0;
      *(_DWORD *)(v1 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
    }
    unint64_t v2 = *(unsigned int *)(v1 + 116);
    if (v2)
    {
      for (unint64_t i = 0; i < v2; ++i)
      {
        if ((!*(unsigned char *)(v1 + 112) || i == *(_DWORD *)(v1 + 560)) && *(_DWORD *)(*(void *)(v1 + 136) + 4 * i) == 3)
        {
          uint64_t v4 = *(void *)(*(void *)(v1 + 40) + 8 * i);
          this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 624))(v4);
          unint64_t v2 = *(unsigned int *)(v1 + 116);
        }
      }
    }
  }
  return this;
}

uint64_t MultiLanguageModel::makeNewWeights(MultiLanguageModel *this, const char **a2)
{
  if (*((unsigned char *)this + 114) || !*((_DWORD *)this + 7))
  {
    if (*((_DWORD *)a2 + 2)) {
      uint64_t v4 = *a2;
    }
    else {
      uint64_t v4 = (const char *)&unk_2140A5940;
    }
    if ((isValidName(v4) & 1) == 0)
    {
      if (*((_DWORD *)a2 + 2)) {
        uint64_t v7 = *a2;
      }
      else {
        uint64_t v7 = (const char *)&unk_2140A5940;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5137, (uint64_t)"lm/multilm", 81, (uint64_t)"%.500s", v5, v6, (char)v7);
    }
    uint64_t NextId = IdMgr<unsigned int>::getNextId((_DWORD *)this + 58);
    if (NextId >= 0xFFFF) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5141, (uint64_t)"lm/multilm", 83, (uint64_t)"%s", v8, v9, (char)&errStr_lm_multilm_E_TOO_MANY_WEIGHTSIDS);
    }
    int v11 = *((_DWORD *)this + 40);
    if (v11 - *((_DWORD *)this + 39) == 1000)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5146, (uint64_t)"lm/multilm", 84, (uint64_t)"%u", v8, v9, 232);
      int v11 = *((_DWORD *)this + 40);
    }
    *((_DWORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v11 + 1;
    int v12 = (void *)((char *)this + 168);
    if (DgnArray<DgnString>::find((unsigned int *)this + 42, (uint64_t)a2) != -1)
    {
      if (*((_DWORD *)a2 + 2)) {
        uint64_t v15 = *a2;
      }
      else {
        uint64_t v15 = (const char *)&unk_2140A5940;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5153, (uint64_t)"lm/multilm", 82, (uint64_t)"%.500s %u", v13, v14, (char)v15);
    }
    uint64_t v16 = (NextId - 1);
    unsigned int v17 = *((_DWORD *)this + 44);
    if (NextId > v17)
    {
      unsigned int v18 = *((_DWORD *)this + 45);
      if (NextId > v18)
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 168, NextId - v18, 0);
        unsigned int v17 = *((_DWORD *)this + 44);
      }
      int v19 = NextId - v17;
      if (NextId >= v17)
      {
        if (NextId > v17)
        {
          uint64_t v22 = 16 * v17;
          do
          {
            DgnString::DgnString((DgnString *)(*v12 + v22));
            v22 += 16;
            --v19;
          }
          while (v19);
        }
      }
      else if ((int)NextId < (int)v17)
      {
        uint64_t v20 = (int)v17;
        uint64_t v21 = 16 * (int)v17 - 16;
        do
        {
          --v20;
          DgnString::~DgnString((DgnString *)(*v12 + v21));
          v21 -= 16;
        }
        while (v20 > (int)NextId);
      }
      *((_DWORD *)this + 44) = NextId;
    }
    DgnString::operator=((DgnString *)(*((void *)this + 21) + 16 * v16), (DgnString *)a2);
    if (*((unsigned char *)this + 114))
    {
      unsigned int v29 = *((_DWORD *)this + 48);
      if (NextId > v29)
      {
        double v30 = (void *)((char *)this + 184);
        unsigned int v31 = *((_DWORD *)this + 49);
        if (NextId > v31)
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 184, NextId - v31, 0);
          unsigned int v29 = *((_DWORD *)this + 48);
        }
        if (v29 <= NextId)
        {
          if (v29 < NextId)
          {
            unint64_t v34 = NextId - (unint64_t)v29;
            uint64_t v35 = 16 * v29;
            do
            {
              unint64_t v36 = (void *)(*v30 + v35);
              *unint64_t v36 = 0;
              v36[1] = 0;
              v35 += 16;
              --v34;
            }
            while (v34);
          }
        }
        else if ((int)v29 > (int)NextId)
        {
          uint64_t v32 = (int)v29;
          uint64_t v33 = 16 * (int)v29 - 16;
          do
          {
            --v32;
            DgnPrimArray<unsigned int>::~DgnPrimArray(*v30 + v33);
            v33 -= 16;
          }
          while (v32 > (int)NextId);
        }
        *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = NextId;
        int v37 = (void *)((char *)this + 200);
        unsigned int v38 = *((_DWORD *)this + 53);
        if (NextId > v38) {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 200, NextId - v38, 0);
        }
        uint64_t v39 = *((unsigned int *)this + 52);
        if (v39 <= NextId)
        {
          if (v39 < NextId)
          {
            uint64_t v42 = NextId - v39;
            uint64_t v43 = 16 * v39;
            do
            {
              uint64_t v44 = (void *)(*v37 + v43);
              void *v44 = 0;
              v44[1] = 0;
              v43 += 16;
              --v42;
            }
            while (v42);
          }
        }
        else if ((int)v39 > (int)NextId)
        {
          uint64_t v40 = (int)v39;
          uint64_t v41 = 16 * (int)v39 - 16;
          do
          {
            --v40;
            DgnPrimArray<unsigned int>::~DgnPrimArray(*v37 + v41);
            v41 -= 16;
          }
          while (v40 > (int)NextId);
        }
        *((_DWORD *)this + 52) = NextId;
        double v45 = (void *)((char *)this + 216);
        unsigned int v46 = *((_DWORD *)this + 57);
        if (NextId > v46) {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 216, NextId - v46, 0);
        }
        uint64_t v47 = *((unsigned int *)this + 56);
        if (v47 <= NextId)
        {
          if (v47 < NextId)
          {
            uint64_t v50 = NextId - v47;
            uint64_t v51 = 16 * v47;
            do
            {
              double v52 = (void *)(*v45 + v51);
              *double v52 = 0;
              v52[1] = 0;
              v51 += 16;
              --v50;
            }
            while (v50);
          }
        }
        else if ((int)v47 > (int)NextId)
        {
          uint64_t v48 = (int)v47;
          uint64_t v49 = 16 * (int)v47 - 16;
          do
          {
            --v48;
            DgnPrimArray<unsigned int>::~DgnPrimArray(*v45 + v49);
            v49 -= 16;
          }
          while (v48 > (int)NextId);
        }
        *((_DWORD *)this + 56) = NextId;
      }
      unsigned int v53 = *((_DWORD *)this + 29);
      uint64_t v54 = *((void *)this + 23) + 16 * v16;
      unsigned int v55 = *(_DWORD *)(v54 + 12);
      unsigned int v56 = v53;
      if (v53 > v55)
      {
        DgnPrimArray<unsigned long long>::reallocElts(*((void *)this + 23) + 16 * v16, v53 - v55, 0);
        unsigned int v56 = *((_DWORD *)this + 29);
      }
      *(_DWORD *)(v54 + 8) = v53;
      if (v56)
      {
        uint64_t v57 = 0;
        uint64_t v58 = *((void *)this + 5);
        uint64_t v59 = *(void *)(*((void *)this + 23) + 16 * v16);
        uint64_t v60 = 8 * v56;
        do
        {
          if (*(void *)(v58 + v57)) {
            double v61 = *(double *)(*((void *)this + 48) + v57);
          }
          else {
            double v61 = -1.0;
          }
          *(double *)(v59 + v57) = v61;
          v57 += 8;
        }
        while (v60 != v57);
      }
      MultiLanguageModel::adjustNamedWeightsSet(this, NextId - 1, v23, v24, v25, v26, v27, v28);
    }
  }
  else
  {
    uint64_t NextId = 0xFFFFLL;
  }
  if (*((_DWORD *)this + 29))
  {
    unint64_t v62 = 0;
    do
    {
      if ((!*((unsigned char *)this + 112) || v62 == *((_DWORD *)this + 140))
        && *(_DWORD *)(*((void *)this + 17) + 4 * v62) == 3)
      {
        uint64_t v63 = *(void *)(*((void *)this + 5) + 8 * v62);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 608))(v63))
        {
          uint64_t v64 = *(void *)(*((void *)this + 5) + 8 * v62);
          unsigned int v65 = (*(uint64_t (**)(uint64_t, const char **))(*(void *)v64 + 632))(v64, a2);
          if (NextId == 0xFFFF) {
            uint64_t NextId = v65;
          }
          else {
            uint64_t NextId = NextId;
          }
        }
      }
      ++v62;
    }
    while (v62 < *((unsigned int *)this + 29));
  }
  return NextId;
}

uint64_t MultiLanguageModel::adjustNamedWeightsSet(MultiLanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *((unsigned int *)this + 29);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (!v10)
  {
    LODWORD(v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
    goto LABEL_22;
  }
  int v37 = 0;
  unint64_t v11 = realloc_array(0, &v37, 8 * v10, 0, 0, 1);
  int v12 = (double *)v37;
  uint64_t v39 = v37;
  uint64_t v13 = *((unsigned int *)this + 29);
  LODWORD(v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v10;
  HIDWORD(v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v11 >> 3;
  if (!v13)
  {
LABEL_22:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5489, (uint64_t)"lm/multilm", 45, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_ALL_WEIGHTS_ZERO);
    goto LABEL_23;
  }
  unint64_t v14 = 0;
  uint64_t v15 = *((void *)this + 5);
  uint64_t v16 = 8 * v13;
  double v17 = 0.0;
  double v18 = 0.0;
  do
  {
    if (*(void *)(v15 + v14))
    {
      double v19 = *(double *)(*(void *)(*((void *)this + 23) + 16 * a2) + v14);
      if (v19 == -1.0)
      {
        uint64_t v20 = *((void *)this + 56);
        v12[v14 / 8] = *(double *)(v20 + v14);
        double v17 = v17 + *(double *)(v20 + v14);
      }
      else
      {
        v12[v14 / 8] = v19;
        double v18 = v18 + v19;
      }
    }
    else
    {
      v12[v14 / 8] = 0.0;
    }
    v14 += 8;
  }
  while (v16 != v14);
  if (v18 != 0.0 && v17 != 0.0)
  {
    unint64_t v21 = 0;
    uint64_t v22 = *((void *)this + 5);
    double v23 = (1.0 - v17) / v18;
    do
    {
      if (*(void *)(v22 + v21) && *(double *)(*(void *)(*((void *)this + 23) + 16 * a2) + v21) != -1.0) {
        v12[v21 / 8] = v23 * v12[v21 / 8];
      }
      v21 += 8;
    }
    while (v16 != v21);
  }
  while (*v12 == 0.0)
  {
    ++v12;
    if (!--v13) {
      goto LABEL_22;
    }
  }
LABEL_23:
  int v37 = 0;
  uint64_t v38 = 0;
  MultiLanguageModel::fitWeightsToFloorAndCeiling((uint64_t)this, (uint64_t)&v39, (uint64_t)&v37);
  uint64_t v24 = *((void *)this + 25);
  if (v38) {
    DgnPrimArray<double>::copyArraySlice(v24 + 16 * a2, (uint64_t *)&v37, 0, v38);
  }
  else {
    MultiLanguageModel::failsafeFitWeightsToFloorAndCeiling((uint64_t)this, (uint64_t *)&v39, v24 + 16 * a2);
  }
  uint64_t v25 = a2;
  unsigned int v26 = *((_DWORD *)this + 29);
  uint64_t v27 = *((void *)this + 27) + 16 * a2;
  unsigned int v28 = *(_DWORD *)(v27 + 12);
  unsigned int v29 = v26;
  if (v26 > v28)
  {
    DgnPrimArray<short>::reallocElts(v27, v26 - v28, 0);
    unsigned int v29 = *((_DWORD *)this + 29);
  }
  *(_DWORD *)(v27 + 8) = v26;
  if (v29)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 16 * v25;
    do
    {
      long double v32 = *(double *)(*(void *)(*((void *)this + 25) + v31) + 8 * v30);
      if (v32 == 0.0)
      {
        LOWORD(v33) = 2000;
      }
      else
      {
        long double v34 = DgnLog(v32);
        LODWORD(v35) = *((_DWORD *)this + 8);
        int v33 = (int)(0.5 - v34 * (double)v35);
        unsigned int v29 = *((_DWORD *)this + 29);
      }
      *(_WORD *)(*(void *)(*((void *)this + 27) + v31) + 2 * v30++) = v33;
    }
    while (v30 < v29);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
}

void sub_213F41354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void MultiLanguageModel::deleteWeights(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 114) || !*((_DWORD *)this + 7))
  {
    uint64_t v10 = (a2 - 1);
    if (v10 >= *((_DWORD *)this + 44)
      || *(_DWORD *)(*((void *)this + 21) + 16 * v10 + 8) <= 1u)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5250, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
    }
    if (v10 < *((_DWORD *)this + 39)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5252, (uint64_t)"lm/multilm", 86, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_CANT_DELETE_FACTORY_WEIGHTS);
    }
    uint64_t v11 = *((void *)this + 21) + 16 * v10;
    if (*(void *)v11)
    {
      MemChunkFree(*(void **)v11, 0);
      *(void *)uint64_t v11 = 0;
    }
    *(void *)(v11 + 8) = 0;
    --*((_DWORD *)this + 40);
    IdMgr<unsigned int>::recycleId((unsigned int *)this + 58, a2);
    if (*((unsigned char *)this + 114))
    {
      uint64_t v12 = *((void *)this + 23) + 16 * v10;
      if (*(void *)v12)
      {
        MemChunkFree(*(void **)v12, 0);
        *(void *)uint64_t v12 = 0;
      }
      *(void *)(v12 + 8) = 0;
      uint64_t v13 = *((void *)this + 25) + 16 * v10;
      if (*(void *)v13)
      {
        MemChunkFree(*(void **)v13, 0);
        *(void *)uint64_t v13 = 0;
      }
      *(void *)(v13 + 8) = 0;
      uint64_t v14 = *((void *)this + 27) + 16 * v10;
      if (*(void *)v14)
      {
        MemChunkFree(*(void **)v14, 0);
        *(void *)uint64_t v14 = 0;
      }
      *(void *)(v14 + 8) = 0;
    }
  }
  if (*((_DWORD *)this + 29))
  {
    unint64_t v15 = 0;
    do
    {
      if ((!*((unsigned char *)this + 112) || v15 == *((_DWORD *)this + 140))
        && *(_DWORD *)(*((void *)this + 17) + 4 * v15) == 3)
      {
        uint64_t v16 = *(void *)(*((void *)this + 5) + 8 * v15);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 608))(v16))
        {
          uint64_t v17 = *(void *)(*((void *)this + 5) + 8 * v15);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 640))(v17, a2);
        }
      }
      ++v15;
    }
    while (v15 < *((unsigned int *)this + 29));
  }
}

void MultiLanguageModel::applyWeights(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *((unsigned __int8 *)this + 114);
  if (*((unsigned char *)this + 114) || !*((_DWORD *)this + 7))
  {
    unsigned int v11 = a2 - 1;
    if ((a2 - 1) >= *((_DWORD *)this + 44) || *(_DWORD *)(*((void *)this + 21) + 16 * v11 + 8) <= 1u)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5294, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
      int v10 = *((unsigned __int8 *)this + 114);
    }
    if (v10)
    {
      uint64_t v12 = *((void *)this + 25) + 16 * v11;
      DgnPrimArray<double>::copyArraySlice((uint64_t)this + 384, (uint64_t *)v12, 0, *(_DWORD *)(v12 + 8));
      uint64_t v13 = *((void *)this + 27) + 16 * v11;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 464, (uint64_t *)v13, 0, *(_DWORD *)(v13 + 8));
    }
  }
  if (*((_DWORD *)this + 29))
  {
    unint64_t v14 = 0;
    do
    {
      if ((!*((unsigned char *)this + 112) || v14 == *((_DWORD *)this + 140))
        && *(_DWORD *)(*((void *)this + 17) + 4 * v14) == 3)
      {
        uint64_t v15 = *(void *)(*((void *)this + 5) + 8 * v14);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 608))(v15))
        {
          uint64_t v16 = *(void *)(*((void *)this + 5) + 8 * v14);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 648))(v16, a2);
        }
      }
      ++v14;
    }
    while (v14 < *((unsigned int *)this + 29));
  }
}

uint64_t MultiLanguageModel::getValidWeightsIds(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 8) = 0;
    unsigned int v4 = *(_DWORD *)(a1 + 160);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 > v5) {
      DgnPrimArray<unsigned int>::reallocElts(a2, v4 - v5, 0);
    }
    unint64_t v6 = *(unsigned int *)(a1 + 176);
    if (v6)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 8;
      do
      {
        if (*(_DWORD *)(*(void *)(a1 + 168) + v8) >= 2u)
        {
          uint64_t v9 = *(unsigned int *)(a2 + 8);
          if (v9 == *(_DWORD *)(a2 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
            uint64_t v9 = *(unsigned int *)(a2 + 8);
          }
          *(_DWORD *)(*(void *)a2 + 4 * v9) = v7 + 1;
          ++*(_DWORD *)(a2 + 8);
          unint64_t v6 = *(unsigned int *)(a1 + 176);
        }
        ++v7;
        v8 += 16;
      }
      while (v7 < v6);
    }
  }
  return *(unsigned int *)(a1 + 160);
}

uint64_t MultiLanguageModel::getWeightsId(MultiLanguageModel *this, const DgnString *a2)
{
  int v2 = DgnArray<DgnString>::find((unsigned int *)this + 42, (uint64_t)a2);
  if (v2 == -1) {
    return 0xFFFFLL;
  }
  else {
    return (v2 + 1);
  }
}

uint64_t MultiLanguageModel::getWeightsName(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (a2 - 1);
  if (v9 >= *((_DWORD *)this + 44)
    || (uint64_t v10 = *((void *)this + 21), *(_DWORD *)(v10 + 16 * v9 + 8) <= 1u))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5388, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
    uint64_t v10 = *((void *)this + 21);
  }
  return v10 + 16 * v9;
}

BOOL MultiLanguageModel::isFactoryWeights(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2 - 1;
  if ((a2 - 1) >= *((_DWORD *)this + 44) || *(_DWORD *)(*((void *)this + 21) + 16 * v9 + 8) <= 1u) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5404, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
  }
  return v9 < *((_DWORD *)this + 39);
}

void MultiLanguageModel::checkWeightsId(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 - 1) >= *((_DWORD *)this + 44)
    || *(_DWORD *)(*((void *)this + 21) + 16 * (a2 - 1) + 8) <= 1u)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 5420, (uint64_t)"lm/multilm", 85, (uint64_t)"%u", a7, a8, a2 - 1);
  }
}

uint64_t MultiLanguageModel::languageScore(MultiLanguageModel *this, uint64_t a2, uint64_t a3, LMStats *a4, LMContextData *a5, LMScoreDetails *a6, LMContextData *a7, uint64_t a8, BOOL *a9)
{
  uint64_t v10 = a7;
  ++*((_DWORD *)a4 + 1);
  unsigned int v52 = a3;
  if (a7 && a6 && *((void *)this + 1))
  {
    unsigned int v16 = *((_DWORD *)a6 + 2);
    LMScoreDetails::addDetails((unint64_t)a6, 0, 6, 1);
LABEL_6:
    uint64_t v17 = *((unsigned int *)a6 + 2);
    LMScoreDetails::addDetails((unint64_t)a6, 0, 5, 0);
    char v18 = 0;
    a3 = v52;
    goto LABEL_8;
  }
  unsigned int v16 = 0;
  if (a6) {
    goto LABEL_6;
  }
  uint64_t v17 = 0;
  char v18 = 1;
LABEL_8:
  char v50 = v18;
  unsigned int v51 = v16;
  uint64_t v48 = v17;
  if (!*((unsigned char *)this + 112))
  {
    if (*((unsigned char *)this + 113))
    {
      uint64_t v22 = v10;
      uint64_t v10 = a5;
      *a9 = 0;
      unint64_t v23 = *((unsigned int *)this + 29);
      if (v23)
      {
        unint64_t v24 = 0;
        int v25 = 0;
        double v26 = 0.0;
        do
        {
          uint64_t v27 = *(void *)(*((void *)this + 5) + 8 * v24);
          if (v27 && *(unsigned char *)(*((void *)this + 68) + v24))
          {
            BOOL v28 = *(_DWORD *)(*((void *)this + 17) + 4 * v24) == 2 && a8 == 0;
            if (!v28 && *(double *)(*((void *)this + 62) + 8 * v24) != 0.0)
            {
              char v53 = 0;
              int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, void, LMScoreDetails *, LMContextData *, uint64_t, char *))(*(void *)v27 + 504))(v27, a2, a3, a4, *(void *)(*((void *)v10 + 2) + 8 * v24), a6, v22, a8, &v53);
              if (v53)
              {
                double v26 = v26
                    + (double)v29 * *(double *)(*((void *)this + 62) + 8 * v24)
                    + (double)*(int *)(*((void *)this + 66) + 4 * v24);
                *a9 = 1;
              }
              ++v25;
              unint64_t v23 = *((unsigned int *)this + 29);
              a3 = v52;
            }
          }
          ++v24;
        }
        while (v24 < v23);
      }
      else
      {
        int v25 = 0;
        double v26 = 0.0;
      }
      double v33 = (double)(40 * *((_DWORD *)this + 8));
      if (v26 <= v33) {
        double v33 = v26;
      }
      if (v33 >= 0.0) {
        double v34 = v33 + 0.5;
      }
      else {
        double v34 = 0.5;
      }
      int v32 = (int)v34;
      a5 = v10;
      LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v22;
      goto LABEL_62;
    }
    uint64_t v47 = a5;
    int v46 = (int)v10;
    if (a3 == 0xFFFF)
    {
      uint64_t v49 = (void *)((char *)this + 384);
      unint64_t v30 = (char *)this + 464;
    }
    else
    {
      uint64_t v49 = (void *)(*((void *)this + 25) + 16 * (a3 - 1));
      unint64_t v30 = (char *)(*((void *)this + 27) + 16 * (a3 - 1));
    }
    double v45 = v30;
    *a9 = 0;
    unint64_t v35 = *((unsigned int *)this + 29);
    if (v35)
    {
      unint64_t v36 = 0;
      char v37 = 0;
      LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
      int v25 = 0;
      char v38 = 1;
      do
      {
        uint64_t v39 = *(void *)(*((void *)this + 5) + 8 * v36);
        if (v39 && *(double *)(*v49 + 8 * v36) != 0.0)
        {
          int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v39 + 504))(v39, a2);
          LOWORD(v41) = *(_WORD *)(*v45 + 2 * v36) + v40;
          if (v37)
          {
            int v41 = (__int16)v41;
            int v42 = (__int16)v41 - (__int16)v32;
            if (v42 < 0)
            {
              unsigned int v43 = (__int16)v32 - (__int16)v41;
            }
            else
            {
              int v41 = (__int16)v32;
              unsigned int v43 = v42;
            }
            if (v43 < *((_DWORD *)this + 178)) {
              v41 -= *(_DWORD *)(*((void *)this + 88) + 4 * v43);
            }
            v41 &= ~(v41 >> 31);
          }
          ++v25;
          v38 &= v40 == 0;
          unint64_t v35 = *((unsigned int *)this + 29);
          char v37 = 1;
          LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v41;
        }
        ++v36;
      }
      while (v36 < v35);
      a5 = v47;
      LODWORD(v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v46;
      if ((v38 & 1) == 0) {
        goto LABEL_62;
      }
    }
    else
    {
      int v25 = 0;
    }
    LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
    goto LABEL_62;
  }
  uint64_t v19 = *((unsigned int *)this + 29);
  if (v19)
  {
    uint64_t v20 = 0;
    while (*(_DWORD *)(*((void *)this + 71) + 4 * v20) > a2
         || *(_DWORD *)(*((void *)this + 73) + 4 * v20) < a2)
    {
      if (v19 == ++v20) {
        goto LABEL_14;
      }
    }
    int v21 = *((_DWORD *)this + 140);
  }
  else
  {
LABEL_14:
    int v21 = *((_DWORD *)this + 140);
    LODWORD(v2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v21;
  }
  if (v20 == v21) {
    a3 = a3;
  }
  else {
    a3 = 0xFFFFLL;
  }
  uint64_t v31 = *(void *)(*((void *)this + 5) + 8 * v20);
  LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, void, LMScoreDetails *, LMContextData *, uint64_t, BOOL *))(*(void *)v31 + 504))(v31, a2, a3, a4, *(void *)(*((void *)a5 + 2) + 8 * v20), a6, v10, a8, a9);
  int v25 = 0;
LABEL_62:
  if ((v50 & 1) == 0)
  {
    *(_WORD *)(*(void *)a6 + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v32;
    *(_DWORD *)(*((void *)a6 + 4) + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v25;
  }
  return LanguageModel::languageScoreFinish(this, a2, (__int16)v32, a6, (int)v10, v51, a5);
}

unint64_t LMScoreDetails::addDetails(unint64_t result, __int16 a2, int a3, int a4)
{
  unint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(result + 8);
  if (v8 == *(_DWORD *)(result + 12))
  {
    uint64_t result = DgnPrimArray<short>::reallocElts(result, 1, 1);
    unsigned int v8 = *(_DWORD *)(v7 + 8);
  }
  *(_WORD *)(*(void *)v7 + 2 * v8) = a2;
  *(_DWORD *)(v7 + 8) = v8 + 1;
  unsigned int v9 = *(_DWORD *)(v7 + 24);
  if (v9 == *(_DWORD *)(v7 + 28))
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(v7 + 16, 1, 1);
    unsigned int v9 = *(_DWORD *)(v7 + 24);
  }
  *(_DWORD *)(*(void *)(v7 + 16) + 4 * v9) = a3;
  *(_DWORD *)(v7 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v9 + 1;
  unsigned int v10 = *(_DWORD *)(v7 + 40);
  if (v10 == *(_DWORD *)(v7 + 44))
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(v7 + 32, 1, 1);
    unsigned int v10 = *(_DWORD *)(v7 + 40);
  }
  *(_DWORD *)(*(void *)(v7 + 32) + 4 * v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a4;
  ++*(_DWORD *)(v7 + 40);
  return result;
}

uint64_t MultiLanguageModel::languageScoreForSearch(MultiLanguageModel *this, uint64_t a2, uint64_t a3, LMStats *a4, LMContextData *a5, uint64_t a6, BOOL *a7)
{
  uint64_t v11 = a3;
  ++*((_DWORD *)a4 + 1);
  if (*((unsigned char *)this + 112))
  {
    uint64_t v14 = *((unsigned int *)this + 29);
    if (v14)
    {
      uint64_t v15 = 0;
      while (*(_DWORD *)(*((void *)this + 71) + 4 * v15) > a2
           || *(_DWORD *)(*((void *)this + 73) + 4 * v15) < a2)
      {
        if (v14 == ++v15) {
          goto LABEL_7;
        }
      }
      int v16 = *((_DWORD *)this + 140);
    }
    else
    {
LABEL_7:
      int v16 = *((_DWORD *)this + 140);
      LODWORD(v15) = v16;
    }
    if (v15 == v16) {
      a3 = a3;
    }
    else {
      a3 = 0xFFFFLL;
    }
    uint64_t v25 = *(void *)(*((void *)this + 5) + 8 * v15);
    LOWORD(v26) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, void, uint64_t, BOOL *))(*(void *)v25 + 512))(v25, a2, a3, a4, *(void *)(*((void *)a5 + 2) + 8 * v15), a6, a7);
  }
  else if (*((unsigned char *)this + 113))
  {
    *a7 = 0;
    unint64_t v17 = *((unsigned int *)this + 29);
    if (v17)
    {
      unint64_t v18 = 0;
      double v19 = 0.0;
      do
      {
        uint64_t v20 = *(void *)(*((void *)this + 5) + 8 * v18);
        if (v20 && *(unsigned char *)(*((void *)this + 68) + v18))
        {
          BOOL v21 = *(_DWORD *)(*((void *)this + 17) + 4 * v18) == 2 && a6 == 0;
          if (!v21 && *(double *)(*((void *)this + 62) + 8 * v18) != 0.0)
          {
            char v43 = 0;
            int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, void, uint64_t, char *))(*(void *)v20 + 512))(v20, a2, v11, a4, *(void *)(*((void *)a5 + 2) + 8 * v18), a6, &v43);
            if (v43)
            {
              double v19 = v19
                  + (double)v22 * *(double *)(*((void *)this + 62) + 8 * v18)
                  + (double)*(int *)(*((void *)this + 66) + 4 * v18);
              *a7 = 1;
            }
            unint64_t v17 = *((unsigned int *)this + 29);
          }
        }
        ++v18;
      }
      while (v18 < v17);
    }
    else
    {
      double v19 = 0.0;
    }
    double v27 = (double)(40 * *((_DWORD *)this + 8));
    if (v19 <= v27) {
      double v27 = v19;
    }
    if (v27 >= 0.0) {
      double v28 = v27 + 0.5;
    }
    else {
      double v28 = 0.5;
    }
    int v26 = (int)v28;
  }
  else
  {
    if (a3 == 0xFFFF)
    {
      unint64_t v23 = (void *)((char *)this + 384);
      unint64_t v24 = (char *)this + 464;
    }
    else
    {
      unint64_t v23 = (void *)(*((void *)this + 25) + 16 * (a3 - 1));
      unint64_t v24 = (char *)(*((void *)this + 27) + 16 * (a3 - 1));
    }
    int v41 = v24;
    *a7 = 0;
    unint64_t v29 = *((unsigned int *)this + 29);
    if (!v29) {
      goto LABEL_54;
    }
    unsigned int v40 = a3;
    unint64_t v30 = 0;
    char v31 = 0;
    LOWORD(v26) = 0;
    char v32 = 1;
    do
    {
      uint64_t v33 = *(void *)(*((void *)this + 5) + 8 * v30);
      if (v33 && *(double *)(*v23 + 8 * v30) != 0.0)
      {
        char v42 = 0;
        int v34 = (*(uint64_t (**)(uint64_t, uint64_t, void, LMStats *, void, uint64_t, char *))(*(void *)v33 + 512))(v33, a2, v40, a4, *(void *)(*((void *)a5 + 2) + 8 * v30), a6, &v42);
        if (v42) {
          *a7 = 1;
        }
        LOWORD(v35) = *(_WORD *)(*v41 + 2 * v30) + v34;
        if (v31)
        {
          int v35 = (__int16)v35;
          int v36 = (__int16)v35 - (__int16)v26;
          if (v36 < 0)
          {
            unsigned int v37 = (__int16)v26 - (__int16)v35;
          }
          else
          {
            int v35 = (__int16)v26;
            unsigned int v37 = v36;
          }
          if (v37 < *((_DWORD *)this + 178)) {
            v35 -= *(_DWORD *)(*((void *)this + 88) + 4 * v37);
          }
          v35 &= ~(v35 >> 31);
        }
        v32 &= v34 == 0;
        unint64_t v29 = *((unsigned int *)this + 29);
        char v31 = 1;
        LOWORD(v26) = v35;
      }
      ++v30;
    }
    while (v30 < v29);
    if (v32) {
LABEL_54:
    }
      LOWORD(v26) = 0;
  }
  return LanguageModel::languageScoreFinishForSearch(this, a2, (__int16)v26, a5);
}

uint64_t MultiLanguageModel::languageScoreForPrefilterer(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6 = 40 * *(_DWORD *)(a1 + 32);
  if (*(unsigned char *)(a1 + 112))
  {
    unsigned int v7 = *(_DWORD *)(a2 + 8);
    unsigned int v8 = *(_DWORD *)(a3 + 12);
    if (v7 > v8)
    {
      DgnPrimArray<short>::reallocElts(a3, v7 - v8, 0);
      unsigned int v7 = *(_DWORD *)(a2 + 8);
    }
    __b = 0;
    unint64_t v118 = 0;
    if (v7)
    {
      LODWORD(v9) = 0;
      do
      {
        unsigned int v10 = *(_DWORD *)(*(void *)a2 + 4 * v9);
        uint64_t v11 = *(unsigned int *)(a1 + 116);
        if (v11)
        {
          uint64_t v12 = 0;
          while (*(_DWORD *)(*(void *)(a1 + 568) + 4 * v12) > v10
               || *(_DWORD *)(*(void *)(a1 + 584) + 4 * v12) < v10)
          {
            if (v11 == ++v12) {
              goto LABEL_11;
            }
          }
          uint64_t v13 = v12;
        }
        else
        {
LABEL_11:
          uint64_t v13 = *(unsigned int *)(a1 + 560);
        }
        uint64_t v14 = v118;
        if (v118 == (unint64_t)HIDWORD(v118))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&__b, 1, 1);
          uint64_t v14 = v118;
        }
        uint64_t v15 = __b;
        *((_DWORD *)__b + v14) = v10;
        int v16 = v118 + 1;
        LODWORD(v118) = v118 + 1;
        unint64_t v9 = (v9 + 1);
        if (v9 < *(_DWORD *)(a2 + 8))
        {
          do
          {
            unsigned int v17 = *(_DWORD *)(*(void *)a2 + 4 * v9);
            uint64_t v18 = *(unsigned int *)(a1 + 116);
            if (v18)
            {
              uint64_t v19 = 0;
              while (*(_DWORD *)(*(void *)(a1 + 568) + 4 * v19) > v17
                   || *(_DWORD *)(*(void *)(a1 + 584) + 4 * v19) < v17)
              {
                if (v18 == ++v19) {
                  goto LABEL_21;
                }
              }
              uint64_t v20 = v19;
            }
            else
            {
LABEL_21:
              uint64_t v20 = *(unsigned int *)(a1 + 560);
            }
            if (v20 != v13) {
              break;
            }
            if (v16 == HIDWORD(v118))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&__b, 1, 1);
              int v16 = v118;
              uint64_t v15 = __b;
            }
            v15[v16] = v17;
            int v16 = v118 + 1;
            LODWORD(v118) = v118 + 1;
            ++v9;
          }
          while (v9 < *(unsigned int *)(a2 + 8));
        }
        unsigned int v115 = 0;
        uint64_t v116 = 0;
        (*(void (**)(void))(**(void **)(*(void *)(a1 + 40) + 8 * v13) + 520))();
        unsigned int v21 = v116;
        if (*(_DWORD *)(*(void *)(a1 + 600) + 4 * v13))
        {
          if (v116)
          {
            unint64_t v22 = 0;
            unsigned int v23 = *(_DWORD *)(a3 + 8);
            do
            {
              if (*(_DWORD *)(*(void *)(a1 + 600) + 4 * v13) + *((__int16 *)v115 + v22) >= v6) {
                __int16 v24 = v6;
              }
              else {
                __int16 v24 = *(_WORD *)(*(void *)(a1 + 600) + 4 * v13) + *((_WORD *)v115 + v22);
              }
              if (v23 == *(_DWORD *)(a3 + 12))
              {
                DgnPrimArray<short>::reallocElts(a3, 1, 1);
                unsigned int v23 = *(_DWORD *)(a3 + 8);
                unsigned int v21 = v116;
              }
              *(_WORD *)(*(void *)a3 + 2 * v23++) = v24;
              *(_DWORD *)(a3 + 8) = v23;
              ++v22;
            }
            while (v22 < v21);
          }
        }
        else
        {
          int v25 = *(_DWORD *)(a3 + 8);
          unsigned int v26 = *(_DWORD *)(a3 + 12);
          if (v25 + (int)v116 > v26)
          {
            DgnPrimArray<short>::reallocElts(a3, v25 + v116 - v26, 1);
            unsigned int v21 = v116;
            int v25 = *(_DWORD *)(a3 + 8);
          }
          if (v21)
          {
            double v27 = (__int16 *)v115;
            double v28 = *(__int16 **)a3;
            uint64_t v29 = v21;
            int v30 = v25;
            do
            {
              __int16 v31 = *v27++;
              v28[v30++] = v31;
              --v29;
            }
            while (v29);
          }
          *(_DWORD *)(a3 + 8) = v21 + v25;
        }
        LODWORD(v118) = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v115);
      }
      while (v9 < *(_DWORD *)(a2 + 8));
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  }
  if (*(unsigned char *)(a1 + 113))
  {
    uint64_t v33 = *(unsigned int *)(a2 + 8);
    __b = 0;
    unint64_t v118 = 0;
    if (v33)
    {
      unsigned int v115 = 0;
      unint64_t v34 = realloc_array(0, &v115, 8 * v33, 0, 0, 1) >> 3;
      __b = v115;
      uint64_t v35 = *(unsigned int *)(a2 + 8);
      unint64_t v118 = __PAIR64__(v34, v33);
      if (v35) {
        bzero(v115, 8 * v35);
      }
    }
    else
    {
      LODWORD(v35) = 0;
      LODWORD(v118) = 0;
    }
    unint64_t v76 = *(unsigned int *)(a1 + 116);
    if (v76)
    {
      for (unint64_t i = 0; i < v76; ++i)
      {
        uint64_t v78 = *(void *)(a1 + 40);
        if (*(void *)(v78 + 8 * i)
          && *(unsigned char *)(*(void *)(a1 + 544) + i)
          && *(_DWORD *)(*(void *)(a1 + 136) + 4 * i) != 2
          && *(double *)(*(void *)(a1 + 496) + 8 * i) != 0.0)
        {
          unsigned int v115 = 0;
          uint64_t v116 = 0;
          (*(void (**)(void, uint64_t, void **))(**(void **)(v78 + 8 * i) + 520))(*(void *)(v78 + 8 * i), a2, &v115);
          uint64_t v79 = *(unsigned int *)(a2 + 8);
          if (v79)
          {
            int v80 = (__int16 *)v115;
            uint64_t v81 = *(void *)(a1 + 496);
            uint64_t v82 = (double *)__b;
            double v83 = (double)*(int *)(*(void *)(a1 + 528) + 4 * i);
            do
            {
              int v84 = *v80++;
              *uint64_t v82 = *v82 + (double)v84 * *(double *)(v81 + 8 * i) + v83;
              ++v82;
              --v79;
            }
            while (v79);
          }
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v115);
          unint64_t v76 = *(unsigned int *)(a1 + 116);
        }
      }
      LODWORD(v35) = *(_DWORD *)(a2 + 8);
    }
    unsigned int v85 = *(_DWORD *)(a3 + 12);
    LODWORD(v86) = v35;
    if (v35 > v85)
    {
      DgnPrimArray<short>::reallocElts(a3, v35 - v85, 0);
      LODWORD(v86) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a3 + 8) = v35;
    if (v86)
    {
      unsigned int v87 = (double *)__b;
      uint64_t v86 = v86;
      uint64_t v88 = *(__int16 **)a3;
      do
      {
        double v89 = *v87;
        LOWORD(v9pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v6;
        if (*v87 <= (double)v6)
        {
          if (v89 >= 0.0) {
            int v90 = (int)(v89 + 0.5);
          }
          else {
            LOWORD(v9pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
          }
        }
        *v88++ = v90;
        ++v87;
        --v86;
      }
      while (v86);
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  }
  unsigned int v36 = *(_DWORD *)(a2 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  unsigned int v38 = v36;
  BOOL v39 = v36 >= v37;
  uint64_t v40 = v36 - v37;
  if (v40 != 0 && v39)
  {
    DgnPrimArray<short>::reallocElts(a3, v40, 0);
    unsigned int v38 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a3 + 8) = v36;
  DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&__b, v38);
  unsigned int v115 = 0;
  uint64_t v116 = 0;
  size_t v41 = *(unsigned int *)(a2 + 8);
  if (v41) {
    memset(__b, 1, v41);
  }
  if (!*(_DWORD *)(a1 + 116)) {
    goto LABEL_123;
  }
  unint64_t v42 = 0;
  char v43 = 0;
  char v44 = 0;
  double v45 = 0.0;
  do
  {
    uint64_t v46 = *(void *)(a1 + 40);
    if (*(void *)(v46 + 8 * v42))
    {
      double v47 = *(double *)(*(void *)(a1 + 432) + 8 * v42);
      if (v47 == -1.0)
      {
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        (*(void (**)(void, uint64_t, __int16 **))(**(void **)(v46 + 8 * v42) + 520))(*(void *)(v46 + 8 * v42), a2, &v113);
        uint64_t v63 = v114;
        if (v43)
        {
          if (v114)
          {
            uint64_t v64 = (__int16 *)v115;
            unsigned int v65 = v113;
            do
            {
              int v67 = *v65++;
              __int16 v66 = v67;
              if (*v64 < v67) {
                __int16 v66 = *v64;
              }
              *v64++ = v66;
              --v63;
            }
            while (v63);
          }
        }
        else
        {
          DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v115, (uint64_t *)&v113, 0, v114);
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v113);
        char v43 = 1;
      }
      else if (v47 != 0.0)
      {
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        (*(void (**)(void, uint64_t, __int16 **))(**(void **)(v46 + 8 * v42) + 520))(*(void *)(v46 + 8 * v42), a2, &v113);
        uint64_t v48 = v118;
        if (v118)
        {
          uint64_t v49 = (char *)__b;
          char v50 = v113;
          do
          {
            char v51 = *v49;
            if (*v49) {
              char v51 = *v50 == 0;
            }
            *v49++ = v51;
            ++v50;
            --v48;
          }
          while (v48);
        }
        uint64_t v52 = v114;
        if (v44)
        {
          if (v114)
          {
            char v53 = *(__int16 **)a3;
            uint64_t v54 = v113;
            uint64_t v55 = *(void *)(a1 + 480);
            unsigned int v56 = *(_DWORD *)(a1 + 712);
            do
            {
              int v57 = *v53;
              __int16 v58 = *v54++;
              int v59 = (__int16)(*(_WORD *)(v55 + 2 * v42) + v58);
              unsigned int v61 = v59 - v57;
              BOOL v60 = v59 - v57 < 0;
              if (v59 < v57) {
                int v57 = v59;
              }
              if (v60) {
                unsigned int v62 = -v61;
              }
              else {
                unsigned int v62 = v61;
              }
              if (v62 < v56) {
                v57 -= *(_DWORD *)(*(void *)(a1 + 704) + 4 * v62);
              }
              *v53++ = v57 & ~(unsigned __int16)(v57 >> 31);
              --v52;
            }
            while (v52);
          }
        }
        else if (v114)
        {
          uint64_t v68 = v113;
          uint64_t v69 = *(void *)(a1 + 480);
          uint64_t v70 = *(__int16 **)a3;
          do
          {
            __int16 v71 = *v68++;
            *v70++ = *(_WORD *)(v69 + 2 * v42) + v71;
            --v52;
          }
          while (v52);
        }
        double v45 = v45 + v47;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v113);
        char v44 = 1;
      }
    }
    ++v42;
  }
  while (v42 < *(unsigned int *)(a1 + 116));
  if ((v44 & 1) == 0)
  {
    if (v43)
    {
      DgnPrimArray<unsigned short>::copyArraySlice(a3, (uint64_t *)&v115, 0, v116);
      goto LABEL_151;
    }
LABEL_123:
    uint64_t v91 = *(unsigned int *)(a3 + 8);
    if (v91) {
      bzero(*(void **)a3, 2 * v91);
    }
    goto LABEL_151;
  }
  if (v45 <= 1.0) {
    double v72 = v45;
  }
  else {
    double v72 = 1.0;
  }
  double v73 = fabs(v72 + -1.0);
  if (v73 < 0.0001)
  {
    int v92 = *(_DWORD *)(a3 + 8);
    goto LABEL_144;
  }
  if ((v43 & 1) == 0)
  {
    if (v72 == 0.0)
    {
      LOWORD(v93) = 2000;
    }
    else
    {
      long double v106 = DgnLog(v72);
      LODWORD(v107) = *(_DWORD *)(a1 + 32);
      int v93 = (int)(0.5 - v106 * (double)v107);
    }
    int v92 = *(_DWORD *)(a3 + 8);
    if (!v92) {
      goto LABEL_151;
    }
    uint64_t v108 = *(__int16 **)a3;
    uint64_t v109 = *(unsigned int *)(a3 + 8);
    do
    {
      *v108++ -= v93;
      --v109;
    }
    while (v109);
LABEL_144:
    if (v92)
    {
      uint64_t v110 = 0;
      uint64_t v111 = __b;
      uint64_t v112 = v115;
      do
      {
        if (v111[v110] && (((v73 >= 0.0001) & v43) == 0 || !v112[v110])) {
          *(_WORD *)(*(void *)a3 + 2 * v11pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
        }
        ++v110;
      }
      while (v92 != v110);
    }
    goto LABEL_151;
  }
  double v74 = 1.0 - v72;
  if (v74 == 0.0)
  {
    LOWORD(v75) = 2000;
  }
  else
  {
    long double v94 = DgnLog(v74);
    LODWORD(v95) = *(_DWORD *)(a1 + 32);
    int v75 = (int)(0.5 - v94 * (double)v95);
  }
  int v92 = *(_DWORD *)(a3 + 8);
  if (v92)
  {
    unsigned int v96 = (__int16 *)v115;
    uint64_t v97 = *(__int16 **)a3;
    uint64_t v98 = *(unsigned int *)(a3 + 8);
    unsigned int v99 = *(_DWORD *)(a1 + 712);
    do
    {
      __int16 v100 = *v96++;
      int v101 = *v97;
      int v102 = (__int16)(v100 + v75);
      unsigned int v104 = v102 - v101;
      BOOL v103 = v102 - v101 < 0;
      if (v102 >= v101) {
        int v102 = *v97;
      }
      if (v103) {
        unsigned int v105 = -v104;
      }
      else {
        unsigned int v105 = v104;
      }
      if (v105 < v99) {
        v102 -= *(_DWORD *)(*(void *)(a1 + 704) + 4 * v105);
      }
      *v97++ = v102 & ~(unsigned __int16)(v102 >> 31);
      --v98;
    }
    while (v98);
    goto LABEL_144;
  }
LABEL_151:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v115);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
}

void sub_213F42B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *MultiLanguageModel::adaptLMFromTranscripts(void *result, uint64_t *a2, uint64_t *a3, void *a4, uint64_t a5, unsigned int a6)
{
  if (!*((unsigned char *)result + 152)) {
    return result;
  }
  uint64_t v10 = (uint64_t)result;
  if (*((_DWORD *)result + 29))
  {
    unint64_t v11 = 0;
    do
    {
      if (*(unsigned char *)(v10 + 112))
      {
        if (v11 == *(_DWORD *)(v10 + 560) && *(_DWORD *)(*(void *)(v10 + 136) + 4 * v11) == 3)
        {
          uint64_t v12 = a5;
          DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v131, *((unsigned int *)a2 + 2));
          DgnArray<DgnPrimArray<unsigned int>>::DgnArray(&v128, *((unsigned int *)a3 + 2));
          if (*((_DWORD *)a2 + 2))
          {
            unint64_t v13 = 0;
            do
            {
              uint64_t v14 = *a2;
              unsigned int v15 = *(_DWORD *)(*a2 + 16 * v13 + 8);
              uint64_t v16 = v131[0] + 16 * v13;
              unsigned int v17 = *(_DWORD *)(v16 + 12);
              if (v15 > v17)
              {
                DgnPrimArray<unsigned int>::reallocElts(v131[0] + 16 * v13, v15 - v17, 0);
                uint64_t v14 = *a2;
              }
              *(_DWORD *)(v16 + 8) = v15;
              uint64_t v18 = v14 + 16 * v13;
              int v20 = *(_DWORD *)(v18 + 8);
              uint64_t v19 = (unsigned int *)(v18 + 8);
              if (v20)
              {
                unint64_t v21 = 0;
                uint64_t v22 = *(void *)(v14 + 16 * v13);
                uint64_t v23 = *(void *)(v131[0] + 16 * v13);
                do
                {
                  unsigned int v24 = *(_DWORD *)(v22 + 4 * v21);
                  if (v24 <= 0xFFFFF3)
                  {
                    uint64_t v25 = *(unsigned int *)(v10 + 116);
                    if (v25)
                    {
                      uint64_t v26 = 0;
                      while (*(_DWORD *)(*(void *)(v10 + 568) + 4 * v26) > v24
                           || *(_DWORD *)(*(void *)(v10 + 584) + 4 * v26) < v24)
                      {
                        if (v25 == ++v26) {
                          goto LABEL_19;
                        }
                      }
                      uint64_t v27 = v26;
                    }
                    else
                    {
LABEL_19:
                      uint64_t v27 = *(unsigned int *)(v10 + 560);
                    }
                    if (v11 != v27) {
                      unsigned int v24 = 0xFFFFFF;
                    }
                  }
                  *(_DWORD *)(v23 + 4 * v21++) = v24;
                }
                while (v21 < *v19);
              }
              uint64_t v28 = *a3;
              unsigned int v29 = *(_DWORD *)(*a3 + 16 * v13 + 8);
              uint64_t v30 = v128 + 16 * v13;
              unsigned int v31 = *(_DWORD *)(v30 + 12);
              if (v29 > v31)
              {
                DgnPrimArray<unsigned int>::reallocElts(v128 + 16 * v13, v29 - v31, 0);
                uint64_t v28 = *a3;
              }
              *(_DWORD *)(v30 + 8) = v29;
              uint64_t v32 = v28 + 16 * v13;
              int v34 = *(_DWORD *)(v32 + 8);
              uint64_t v33 = (unsigned int *)(v32 + 8);
              if (v34)
              {
                unint64_t v35 = 0;
                uint64_t v36 = *(void *)(v28 + 16 * v13);
                uint64_t v37 = *(void *)(v128 + 16 * v13);
                do
                {
                  unsigned int v38 = *(_DWORD *)(v36 + 4 * v35);
                  if (v38 <= 0xFFFFF3)
                  {
                    uint64_t v39 = *(unsigned int *)(v10 + 116);
                    if (v39)
                    {
                      uint64_t v40 = 0;
                      while (*(_DWORD *)(*(void *)(v10 + 568) + 4 * v40) > v38
                           || *(_DWORD *)(*(void *)(v10 + 584) + 4 * v40) < v38)
                      {
                        if (v39 == ++v40) {
                          goto LABEL_34;
                        }
                      }
                      uint64_t v41 = v40;
                    }
                    else
                    {
LABEL_34:
                      uint64_t v41 = *(unsigned int *)(v10 + 560);
                    }
                    if (v11 != v41) {
                      unsigned int v38 = 0xFFFFFF;
                    }
                  }
                  *(_DWORD *)(v37 + 4 * v35++) = v38;
                }
                while (v35 < *v33);
              }
              ++v13;
            }
            while (v13 < *((unsigned int *)a2 + 2));
          }
          uint64_t v42 = *(void *)(*(void *)(v10 + 40) + 8 * v11);
          a5 = v12;
          (*(void (**)(uint64_t, void *, long long *, void *, uint64_t, void))(*(void *)v42 + 536))(v42, v131, &v128, a4, v12, a6);
          DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v128);
          uint64_t result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v131);
        }
      }
      else if (*(_DWORD *)(*(void *)(v10 + 136) + 4 * v11) == 3)
      {
        uint64_t v43 = *(void *)(*(void *)(v10 + 40) + 8 * v11);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, void *, uint64_t, void))(*(void *)v43 + 536))(v43, a2, a3, a4, a5, a6);
      }
      ++v11;
      unint64_t v44 = *(unsigned int *)(v10 + 116);
    }
    while (v11 < v44);
  }
  else
  {
    unint64_t v44 = 0;
  }
  if (!*(unsigned char *)(v10 + 114)) {
    return result;
  }
  DgnArray<DgnArray<ScoreArray>>::DgnArray(v138, v44);
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  LMStats::resetStats((LMStats *)v131);
  int v114 = a5;
  long long v128 = xmmword_2140A2670;
  int v129 = 1;
  char v130 = 1;
  uint64_t v118 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 464))(v10);
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  if (*(_DWORD *)(v10 + 116))
  {
    uint64_t v45 = 0;
    uint64_t v116 = a3;
    while (1)
    {
      uint64_t v46 = v138[0] + 16 * v45;
      uint64_t v47 = *((unsigned int *)a2 + 2);
      unsigned int v48 = *(_DWORD *)(v46 + 12);
      if (v47 > v48) {
        DgnArray<DgnPrimArray<double>>::reallocElts(v138[0] + 16 * v45, v47 - v48, 0);
      }
      uint64_t v49 = *(unsigned int *)(v46 + 8);
      if (v49 <= v47)
      {
        if (v49 < v47)
        {
          uint64_t v52 = v47 - v49;
          uint64_t v53 = 16 * v49;
          do
          {
            uint64_t v54 = (void *)(*(void *)v46 + v53);
            void *v54 = 0;
            v54[1] = 0;
            v53 += 16;
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v49 > (int)v47)
      {
        uint64_t v50 = (int)v49;
        uint64_t v51 = 16 * (int)v49 - 16;
        do
        {
          --v50;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)v46 + v51);
          v51 -= 16;
        }
        while (v50 > (int)v47);
      }
      *(_DWORD *)(v46 + 8) = v47;
      if (*(void *)(*(void *)(v10 + 40) + 8 * v45))
      {
        if (*(double *)(*(void *)(v10 + 384) + 8 * v45) != 0.0 && *((_DWORD *)a2 + 2) != 0) {
          break;
        }
      }
LABEL_93:
      if (++v45 >= (unint64_t)*(unsigned int *)(v10 + 116)) {
        goto LABEL_94;
      }
    }
    unint64_t v56 = 0;
    while (1)
    {
      unsigned int v57 = *(_DWORD *)(*a3 + 16 * v56 + 8);
      if (v57 >= 3) {
        uint64_t v58 = 3;
      }
      else {
        uint64_t v58 = v57;
      }
      if (HIDWORD(v127) >= v58)
      {
        LODWORD(v127) = v58;
        if (!v58) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v124 = 0;
        unint64_t v59 = realloc_array(v126, &v124, (4 * v58), 4 * v127, 4 * v127, 1);
        uint64_t v126 = v124;
        LODWORD(v127) = v58;
        HIDWORD(v127) = v59 >> 2;
      }
      BOOL v60 = (void *)(*a3 + 16 * v56);
      uint64_t v63 = *v60;
      unsigned int v61 = v60 + 1;
      uint64_t v62 = v63;
      uint64_t v64 = v126;
      int v65 = -1;
      do
      {
        *v64++ = *(_DWORD *)(v62 + 4 * (v65 + *v61));
        --v65;
        --v58;
      }
      while (v58);
LABEL_73:
      uint64_t v66 = *(unsigned int *)(*a2 + 16 * v56 + 8);
      uint64_t v67 = *(void *)(v138[0] + 16 * v45) + 16 * v56;
      unsigned int v68 = *(_DWORD *)(v67 + 12);
      if (v66 > v68)
      {
        DgnPrimArray<short>::reallocElts(*(void *)(v138[0] + 16 * v45) + 16 * v56, v66 - v68, 0);
        *(_DWORD *)(v67 + 8) = v66;
LABEL_76:
        uint64_t v69 = 0;
        while (2)
        {
          uint64_t v70 = *(unsigned int *)(*(void *)(*a2 + 16 * v56) + 4 * v69);
          if (v70 == 0xFFFFFF)
          {
            *(_WORD *)(*(void *)(*(void *)(v138[0] + 16 * v45) + 16 * v56) + 2 * v69) = 0;
            goto LABEL_83;
          }
          uint64_t v71 = *(void *)(*(void *)(v118 + 16) + 8 * v45);
          uint64_t v72 = *(void *)(*(void *)(v10 + 40) + 8 * v45);
          (*(void (**)(uint64_t, void **, void, void *, long long *, uint64_t))(*(void *)v72 + 472))(v72, &v126, 0, v131, &v128, v71);
          LOBYTE(v1DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
          uint64_t v73 = *(void *)(*(void *)(v10 + 40) + 8 * v45);
          __int16 v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, void, void, void, void **))(*(void *)v73 + 504))(v73, v70, 0xFFFFLL, v131, v71, 0, 0, 0, &v124);
          *(_WORD *)(*(void *)(*(void *)(v138[0] + 16 * v45) + 16 * v56) + 2 * v69) = v74;
          (*(void (**)(void))(**(void **)(*(void *)(v10 + 40) + 8 * v45) + 480))();
          if (v70 == 16777213)
          {
            int v75 = v126;
            if (!HIDWORD(v127))
            {
              uint64_t v124 = 0;
              HIDWORD(v127) = realloc_array(v126, &v124, 4uLL, 4 * v127, 4 * v127, 1) >> 2;
              int v75 = v124;
              uint64_t v126 = v124;
            }
            LODWORD(v127) = 1;
            *int v75 = 16777214;
          }
          else
          {
LABEL_83:
            int v76 = v127;
            if (v127 <= 2)
            {
              if (v127 == HIDWORD(v127))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v126, 1, 1);
                int v76 = v127;
              }
              LODWORD(v127) = ++v76;
            }
            uint64_t v77 = v126;
            uint64_t v78 = (v76 - 1);
            if (v76 != 1)
            {
              int v79 = v76 - 2;
              do
                v77[v78--] = v77[v79--];
              while (v78);
            }
            *uint64_t v77 = v70;
          }
          if (++v69 == v66) {
            goto LABEL_92;
          }
          continue;
        }
      }
      *(_DWORD *)(v67 + 8) = v66;
      if (v66) {
        goto LABEL_76;
      }
LABEL_92:
      ++v56;
      a3 = v116;
      if (v56 >= *((unsigned int *)a2 + 2)) {
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  DgnDelete<LMContextData>((void (***)(void))v118);
  LODWORD(v6) = *(_DWORD *)(v10 + 32);
  uint64_t v80 = *(unsigned int *)(v10 + 116);
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  if (v80)
  {
    uint64_t v122 = 0;
    unint64_t v81 = realloc_array(0, &v122, 8 * v80, 0, 0, 1);
    uint64_t v123 = 0;
    uint64_t v124 = v122;
    uint64_t v82 = *(unsigned int *)(v10 + 116);
    LODWORD(v125) = v80;
    HIDWORD(v125) = v81 >> 3;
    uint64_t v122 = 0;
    if (v82)
    {
      unint64_t v120 = 0;
      HIDWORD(v123) = realloc_array(0, &v120, 8 * v82, 0, 0, 1) >> 3;
      uint64_t v122 = v120;
    }
  }
  else
  {
    LODWORD(v82) = 0;
    uint64_t v122 = 0;
    uint64_t v123 = 0;
  }
  LODWORD(v123) = v82;
  double v83 = (void *)(v10 + 384);
  unint64_t v120 = 0;
  uint64_t v121 = 0;
  DgnPrimArray<double>::copyArraySlice((uint64_t)&v120, (uint64_t *)(v10 + 384), 0, *(_DWORD *)(v10 + 392));
  unsigned int v119 = 0;
  double v84 = (double)v6;
  while (2)
  {
    unint64_t v85 = *(unsigned int *)(v10 + 116);
    if (v85) {
      bzero(v124, 8 * v85);
    }
    unint64_t v86 = *((unsigned int *)a2 + 2);
    if (!v86) {
      break;
    }
    unint64_t v87 = 0;
    unsigned int v88 = 0;
    uint64_t v89 = *a2;
    unint64_t v90 = v85;
    do
    {
      if (!*(_DWORD *)(v89 + 16 * v87 + 8)) {
        goto LABEL_122;
      }
      unint64_t v91 = 0;
      do
      {
        if (!v90) {
          goto LABEL_119;
        }
        uint64_t v92 = 0;
        unint64_t v93 = 0;
        double v94 = 0.0;
        do
        {
          if (!*(void *)(*(void *)(v10 + 40) + 8 * v93) || *((double *)v120 + v93) == 0.0)
          {
            *((void *)v122 + v93) = 0;
          }
          else
          {
            int v95 = *(__int16 *)(*(void *)(*(void *)(v138[0] + v92) + 16 * v87) + 2 * v91);
            if (v84 * 50.0 + -1.0 < (double)v95) {
              int v95 = (int)(v84 * 50.0) - 1;
            }
            long double v96 = DgnExp((double)-v95 / v84);
            long double v97 = v96 * *((double *)v120 + v93);
            *((long double *)v122 + v93) = v97;
            double v94 = v94 + v97;
            unint64_t v85 = *(unsigned int *)(v10 + 116);
          }
          ++v93;
          v92 += 16;
        }
        while (v93 < v85);
        if (v94 == 0.0) {
          goto LABEL_118;
        }
        unsigned int v98 = *(_DWORD *)(*a4 + 4 * v87);
        v88 += v98;
        if (v85)
        {
          unsigned int v99 = (double *)v122;
          double v100 = (double)v98;
          unint64_t v101 = v85;
          int v102 = (double *)v124;
          do
          {
            double v103 = *v99++;
            *int v102 = *v102 + v103 / v94 * v100;
            ++v102;
            --v101;
          }
          while (v101);
LABEL_118:
          unint64_t v90 = v85;
          goto LABEL_119;
        }
        unint64_t v90 = 0;
LABEL_119:
        ++v91;
        uint64_t v89 = *a2;
      }
      while (v91 < *(unsigned int *)(*a2 + 16 * v87 + 8));
      unint64_t v86 = *((unsigned int *)a2 + 2);
LABEL_122:
      ++v87;
    }
    while (v87 < v86);
    if (v88)
    {
      double v104 = (double)v88;
      if (v85)
      {
        unint64_t v105 = 0;
        double v106 = 1.0 / v104;
        do
        {
          if (*(void *)(*(void *)(v10 + 40) + 8 * v105) && *(double *)(*v83 + 8 * v105) != 0.0)
          {
            BOOL v107 = fround(v106 * *((double *)v124 + v105), 15) <= 1.0e-17;
            double v108 = 1.0e-17;
            if (!v107) {
              double v108 = fround(v106 * *((double *)v124 + v105), 15);
            }
            *((double *)v124 + v105) = v108;
            unint64_t v85 = *(unsigned int *)(v10 + 116);
          }
          ++v105;
        }
        while (v105 < v85);
      }
      MultiLanguageModel::fitWeightsToFloorAndCeiling(v10, (uint64_t)&v124, (uint64_t)&v120);
      if (v121)
      {
        if (a6)
        {
          BOOL v107 = v119++ > 0x12;
          if (!v107) {
            continue;
          }
        }
        uint64_t v109 = *(unsigned int *)(v10 + 116);
        if (v109)
        {
          uint64_t v110 = 0;
          uint64_t v111 = *(void *)(v10 + 40);
          uint64_t v112 = (char *)v120;
          uint64_t v113 = 8 * v109;
          do
          {
            if (*(void *)(v111 + v110)) {
              *(double *)&v112[v110] = (*(double *)&v112[v110] * v104 + (double)v114 * *(double *)(*v83 + v110))
            }
                                     / (double)(v88 + v114);
            else {
              *(void *)&v112[v110] = 0;
            }
            v110 += 8;
          }
          while (v113 != v110);
        }
        (*(void (**)(uint64_t, void **))(*(void *)v10 + 496))(v10, &v120);
      }
    }
    break;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v122);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v124);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v126);
  return DgnArray<DgnArray<ScoreArray>>::releaseAll((uint64_t)v138);
}

void sub_213F436C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnArray<DgnArray<ScoreArray>>::releaseAll(v7 - 160);
  _Unwind_Resume(a1);
}

uint64_t MultiLanguageModel::setWeightsForNewTopicLM(MultiLanguageModel *this, unsigned int a2)
{
  uint64_t v3 = *((unsigned int *)this + 29);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    double v6 = 0.0;
    do
    {
      if (*(void *)(*((void *)this + 5) + v4)) {
        double v6 = v6 + *(double *)(*((void *)this + 48) + v4);
      }
      v4 += 8;
    }
    while (v5 != v4);
  }
  else
  {
    double v6 = 0.0;
  }
  uint64_t v7 = a2;
  double v8 = *(double *)(*((void *)this + 56) + 8 * a2);
  v22[0] = 0;
  v22[1] = 0;
  v9.n128_f64[0] = DgnPrimArray<double>::copyArraySlice((uint64_t)v22, (uint64_t *)this + 48, 0, *((_DWORD *)this + 98));
  uint64_t v10 = *((unsigned int *)this + 29);
  uint64_t v11 = v22[0];
  if (v10)
  {
    uint64_t v12 = (void *)*((void *)this + 5);
    unint64_t v13 = (double *)v22[0];
    v9.n128_f64[0] = (1.0 - v8) / v6;
    do
    {
      if (*v12) {
        double *v13 = v9.n128_f64[0] * *v13;
      }
      ++v12;
      ++v13;
      --v10;
    }
    while (v10);
  }
  *(double *)(v11 + 8 * v7) = v8;
  (*(void (**)(MultiLanguageModel *, void *, __n128))(*(void *)this + 496))(this, v22, v9);
  MultiLanguageModel::adjustNamedWeightsSets((uint64_t)this, v14, v15, v16, v17, v18, v19, v20);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
}

void sub_213F438A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MultiLanguageModel::startBuildingTopicLM(MultiLanguageModel *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((void *)this + 77)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6904, (uint64_t)"lm/multilm", 20, (uint64_t)"%.500s", a7, a8, (char)"startBuildingTopicLM");
  }
  unsigned int v21 = 0;
  unsigned int v22 = a2 - 1;
  uint64_t v23 = 0;
  MultiLanguageModel::getInternalTopicLmSlot((uint64_t)this, &v22, &v23, &v21);
  uint64_t v12 = v23;
  uint64_t v13 = v21;
  if (v21 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6914, (uint64_t)"lm/multilm", 95, (uint64_t)"%u", v10, v11, a2);
  }
  if (*(void *)(*((void *)v12 + 5) + 8 * v13)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6918, (uint64_t)"lm/multilm", 12, (uint64_t)"%s", v10, v11, (char)&errStr_lm_multilm_E_BAD_INPLACE_BUILD);
  }
  uint64_t v14 = *(const WordNgramBuildSpec **)(*((void *)v12 + 38) + 8 * v13);
  uint64_t v15 = *(const WordNgramTemplate **)(*((void *)v12 + 42) + 8 * v13);
  *((void *)this + 78) = v12;
  *((_DWORD *)this + 158) = v13;
  *((_DWORD *)this + 159) = a2;
  uint64_t v16 = MemChunkAlloc(0x728uLL, 0);
  uint64_t v17 = WordLanguageModel::WordLanguageModel((WordLanguageModel *)v16, *((_DWORD *)this + 8), *((const WordList **)this + 2));
  *((void *)this + 77) = v17;
  WordLanguageModel::initForBuild(v17, v14, v15, v18, v19);
  uint64_t v20 = *((void *)this + 77);

  WordLanguageModel::startBuildingNgramLM(v20, (uint64_t)this + 640, (void *)this + 82, (void *)this + 83, (uint64_t)this + 672);
}

uint64_t MultiLanguageModel::addBuildTopicLM(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(a1 + 616);
  if (!v12)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6944, (uint64_t)"lm/multilm", 19, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NOTBUILDINGLM);
    uint64_t v12 = *(void *)(a1 + 616);
  }

  return WordLanguageModel::addBuildNgramLM(v12, a2, a3, a4);
}

void *MultiLanguageModel::endBuildingTopicLM(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(WordLanguageModel **)(a1 + 616);
  if (!v13)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 6959, (uint64_t)"lm/multilm", 19, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NOTBUILDINGLM);
    uint64_t v13 = *(WordLanguageModel **)(a1 + 616);
  }
  BOOL v14 = WordLanguageModel::endBuildingNgramLM(v13);
  uint64_t v15 = *(void (****)(void))(a1 + 616);
  if (!v14)
  {
    DgnDelete<LanguageModel>(v15);
    goto LABEL_9;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 632);
  *(void *)(*(void *)(*(void *)(a1 + 624) + 40) + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v15;
  *(void *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  uint64_t v17 = *(MultiLanguageModel **)(a1 + 624);
  if (*((unsigned char *)v17 + 114)) {
    MultiLanguageModel::setWeightsForNewTopicLM(v17, v16);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    (*(void (**)(uint64_t, uint64_t, void *, void *, uint64_t, uint64_t))(*(void *)a1 + 536))(a1, a2, a3, a4, a5, 1);
    DgnDelete<LanguageModel>(*(void (****)(void))(*(void *)(*(void *)(a1 + 624) + 40)
                                                             + 8 * *(unsigned int *)(a1 + 632)));
    uint64_t v18 = *(unsigned int *)(a1 + 632);
    *(void *)(*(void *)(*(void *)(a1 + 624) + 40) + 8 * v18) = 0;
    uint64_t v19 = *(void *)(a1 + 624);
    uint64_t v20 = *(const WordNgramTemplate **)(*(void *)(v19 + 336) + 8 * v18);
    unsigned int v21 = *(const WordNgramBuildSpec **)(*(void *)(v19 + 304) + 8 * v18);
    unsigned int v22 = MemChunkAlloc(0x728uLL, 0);
    uint64_t v23 = WordLanguageModel::WordLanguageModel((WordLanguageModel *)v22, *(_DWORD *)(a1 + 32), *(const WordList **)(a1 + 16));
    *(void *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v23;
    WordLanguageModel::initForBuild(v23, v21, v20, v24, v25);
    WordLanguageModel::startBuildingNgramLM(*(void *)(a1 + 616), a1 + 640, (void *)(a1 + 656), (void *)(a1 + 664), a1 + 672);
    WordLanguageModel::addBuildNgramLM(*(void *)(a1 + 616), a2, a3, a4);
    WordLanguageModel::endBuildingNgramLM(*(WordLanguageModel **)(a1 + 616));
    *(void *)(*(void *)(*(void *)(a1 + 624) + 40) + 8 * *(unsigned int *)(a1 + 6PredStruct::~PredStruct((NodeNetNode *)((char *)this + 32)) = *(void *)(a1 + 616);
LABEL_9:
    *(void *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  }
  *(void *)(a1 + 6DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  *(void *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0xFFFFFFFFFFFFLL;
  uint64_t v26 = *(void **)(a1 + 640);
  if (v26)
  {
    MemChunkFree(v26, 0);
    *(void *)(a1 + 64pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  }
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  *(void *)(a1 + 6DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0;

  return DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::releaseAll(a1 + 672);
}

void *MultiLanguageModel::abortBuildingTopicLM(MultiLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 v9 = (char *)this + 616;
  uint64_t v10 = (void (***)(void))*((void *)this + 77);
  if (!v10)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/multilm.cpp", 7035, (uint64_t)"lm/multilm", 19, (uint64_t)"%s", a7, a8, (char)&errStr_lm_multilm_E_NOTBUILDINGLM);
    uint64_t v10 = *(void (****)(void))v9;
  }
  DgnDelete<LanguageModel>(v10);
  *(void *)__n128 v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)this + 79) = 0xFFFFFFFFFFFFLL;
  uint64_t v11 = (void *)*((void *)this + 80);
  if (v11)
  {
    MemChunkFree(v11, 0);
    *((void *)this + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  }
  *((void *)this + 82) = 0;
  *((void *)this + 81) = 0;

  return DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::releaseAll((uint64_t)this + 672);
}

BOOL MultiLanguageModel::isBuildingTopicLM(MultiLanguageModel *this)
{
  return *((void *)this + 77) != 0;
}

uint64_t MultiLanguageModel::getBuildExternalTopicLmSlot(MultiLanguageModel *this)
{
  return *((unsigned int *)this + 159);
}

uint64_t MultiLanguageModel::getRecentBufferLanguageModel(MultiLanguageModel *this)
{
  return *((void *)this + 7);
}

void MultiLMContextData::MultiLMContextData(MultiLMContextData *this, uint64_t a2)
{
  unsigned int v2 = a2;
  *((_DWORD *)this + 2) = 16777212;
  *(void *)this = &unk_26C4E2178;
  *((void *)this + 2) = 0;
  uint64_t v4 = (void (***)(void))((char *)this + 16);
  *((void *)this + 3) = 0;
  if (a2)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 16, a2, 0);
    LODWORD(v5) = *((_DWORD *)this + 6);
    if (v5 > v2)
    {
      DgnIOwnArray<LMContextData *>::destructAt(v4, v2, v5 - v2);
      goto LABEL_8;
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v5 < v2)
  {
    uint64_t v5 = v5;
    do
      (*v4)[v5++] = 0;
    while (v2 != v5);
  }
LABEL_8:
  *((_DWORD *)this + 6) = v2;
}

void sub_213F43E44(_Unwind_Exception *a1)
{
  DgnIOwnArray<LMContextData *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void MultiLMContextData::~MultiLMContextData(MultiLMContextData *this)
{
  *(void *)this = &unk_26C4E2178;
  DgnIOwnArray<LMContextData *>::releaseAll((uint64_t)this + 16);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E2178;
  DgnIOwnArray<LMContextData *>::releaseAll((uint64_t)this + 16);

  JUMPOUT(0x216698730);
}

uint64_t MultiLMContextData::sizeObject(uint64_t a1, uint64_t a2)
{
  return sizeObject<LMContextData *>(a1 + 16, a2) + 4 * (a2 != 3);
}

void *DgnIOwnArray<LanguageModel *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<LanguageModel>(*(void (****)(void))(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t readObject<unsigned int,DgnPrimArray<unsigned int>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  readObject<unsigned int>(a1, (uint64_t)&v6, a3);
  if (*(void *)a2)
  {
    MemChunkFree(*(void **)a2, 0);
    *(void *)a2 = 0;
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(_DWORD *)(a2 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  if (v7)
  {
    unint64_t v4 = 0;
    do
      DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(a2, *(_DWORD *)(v6 + 4 * v4++));
    while (v4 < v7);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v6);
}

void sub_213F4402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t writeObject<unsigned int,DgnPrimArray<unsigned int>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 20);
  unsigned int v7 = *(_DWORD *)(a2 + 24);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (v7)
  {
    __n128 v9 = 0;
    unsigned int v7 = 0;
    do
    {
      int v10 = *(_DWORD *)(*(void *)a2 + 4 * v5);
      if (v7 == HIDWORD(v13))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v12, 1, 1);
        unsigned int v7 = v13;
        __n128 v9 = v12;
      }
      v9[v7] = v10;
      unsigned int v7 = v13 + 1;
      LODWORD(v13) = v13 + 1;
      if (v5 + 1 == *(_DWORD *)(a2 + 8)) {
        unsigned int v5 = 0;
      }
      else {
        ++v5;
      }
    }
    while (v5 != v6);
  }
  unsigned int v14 = v7;
  writeObject(a1, (int *)&v14, a3);
  writeObjectArray(a1, v12, v13, a3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v12);
}

void sub_213F44120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void *DgnArray<DgnArray<ScoreArray>>::DgnArray(void *a1, uint64_t a2)
{
  unsigned int v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a1, a2, 0);
    unsigned int v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      DgnArray<DgnArray<ScoreArray>>::destructAt(a1, v2, v4 - v2);
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  if (v4 < v2)
  {
    unint64_t v5 = v2 - (unint64_t)v4;
    uint64_t v6 = 16 * v4;
    do
    {
      unsigned int v7 = (void *)(*a1 + v6);
      *unsigned int v7 = 0;
      v7[1] = 0;
      v6 += 16;
      --v5;
    }
    while (v5);
  }
LABEL_8:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

void *DgnArray<DgnArray<ScoreArray>>::destructAt(void *result, int a2, int a3)
{
  uint64_t v3 = result;
  uint64_t v4 = a3 + a2;
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 1;
  for (uint64_t i = 16 * v4 - 16; --v6 > v5; uint64_t i = v8)
  {
    uint64_t v8 = i - 16;
    uint64_t result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

void *DgnArray<DgnArray<ScoreArray>>::releaseAll(uint64_t a1)
{
  DgnArray<DgnArray<ScoreArray>>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void MergedStateTransition::updateMergedStateTransition(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6 == -1)
  {
LABEL_12:
    unsigned int v11 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v11;
    if (v11 == v12)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1, 1, 1);
      unsigned int v11 = *(_DWORD *)(a1 + 8);
    }
    *(void *)(*(void *)a1 + 8 * v11) = *(void *)a3;
    ++*(_DWORD *)(a1 + 8);
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)a1;
  if (*(_DWORD *)a3 == *(_DWORD *)(*(void *)a1 + 8 * v6) && *(_DWORD *)(a3 + 4) == *(_DWORD *)(v7 + 8 * v6 + 4)) {
    goto LABEL_15;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1)
  {
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v8 - 1;
    if (v8) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  __n128 v9 = (_DWORD *)(v7 + 8 * v8 - 4);
  while (*(v9 - 1) != *(_DWORD *)a3 || *v9 != *(_DWORD *)(a3 + 4))
  {
    v9 -= 2;
    BOOL v10 = __OFSUB__(v8, 1);
    LODWORD(v8) = v8 - 1;
    if (((int)v8 < 0) ^ v10 | (v8 == 0)) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v8 - 1;
LABEL_15:
  unsigned int v13 = DgnArray<PredState>::reverseFind(a1 + 24, a2);
  if (v13 == -1)
  {
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    unsigned int v14 = v13;
    if (v13 == *(_DWORD *)(a1 + 36))
    {
      DgnArray<RuleDesc>::reallocElts(a1 + 24, 1, 1);
      unsigned int v14 = *(_DWORD *)(a1 + 32);
    }
    uint64_t v15 = *(void *)(a1 + 24) + 12 * v14;
    uint64_t v16 = *(void *)a2;
    *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v15 = v16;
    ++*(_DWORD *)(a1 + 32);
    unsigned int v17 = *(_DWORD *)(a1 + 48);
    if (v17 == *(_DWORD *)(a1 + 52))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 40, 1, 1);
      unsigned int v17 = *(_DWORD *)(a1 + 48);
    }
    DgnString::DgnString((DgnString *)(*(void *)(a1 + 40) + 16 * v17));
    ++*(_DWORD *)(a1 + 48);
  }
  uint64_t v18 = *(void *)(a1 + 40) + 16 * v13;
  unsigned int v19 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 8) <= v19)
  {
    BitArray::setSize((BitArray *)(*(void *)(a1 + 40) + 16 * v13), v19 + 1);
    unsigned int v19 = *(_DWORD *)(a1 + 16);
  }
  *(_DWORD *)(*(void *)v18 + 4 * (v19 >> 5)) |= 1 << v19;
}

uint64_t DgnArray<PredState>::reverseFind(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t result = (v3 - 1);
  if (v3 >= 1)
  {
    for (uint64_t i = (_DWORD *)(*(void *)a1 + 12 * v3 - 4);
          *((unsigned __int16 *)i - 4) != *a2 || *(i - 1) != *((_DWORD *)a2 + 1) || *i != *((_DWORD *)a2 + 2);
          i -= 3)
    {
      BOOL v6 = __OFSUB__(v3--, 1);
      if ((v3 < 0) ^ v6 | (v3 == 0)) {
        return 0xFFFFFFFFLL;
      }
    }
    return (v3 - 1);
  }
  return result;
}

uint64_t sizeObject<BitArray>(uint64_t a1, int a2)
{
  DgnString::DgnString((DgnString *)v10);
  uint64_t v4 = BitArray::sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v5 = 12;
    }
    else {
      uint64_t v5 = 16;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        unint64_t v8 = v7 + 1;
        do
          v5 += BitArray::sizeObject(*(void *)a1 + 16 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2) {
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  BitArray::~BitArray((BitArray *)v10);
  return v5;
}

void sub_213F445F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SeedMergedActiveWord::processMergedWord(SeedMergedActiveWord *this, ActiveWord *a2, const HistoryMgr *a3, const PhnIndexSet *a4, int a5)
{
  *((void *)this + 1) = a2;
  uint64_t v9 = *((void *)a2 + 1);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_DWORD *)(v9 + 16);
  *((_DWORD *)this + 17) = *(_DWORD *)(v9 + 20);
  *(_OWORD *)((char *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = *(_OWORD *)(v9 + 24);
  uint64_t v10 = *((void *)a2 + 3);
  uint64_t v11 = *(unsigned int *)(v10 + 8);
  signed int v12 = *((_DWORD *)a4 + 2);
  unsigned int v13 = (SeedMergedActiveWord *)((char *)this + 32);
  BitArray::setSizeNoGrow((SeedMergedActiveWord *)((char *)this + 32), 0);
  BitArray::setSize(v13, v11);
  unsigned int v14 = *((_DWORD *)this + 7);
  if (v11 > v14) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 16, v11 - v14, 0);
  }
  *((_DWORD *)this + 6) = v11;
  if ((int)v11 >= 1) {
    memset_pattern16(*((void **)this + 2), &unk_2140A1DB0, 2 * v11);
  }
  uint64_t v15 = (void *)((char *)this + 48);
  unsigned int v16 = *((_DWORD *)this + 14);
  if (v16 >= v11)
  {
    if (!v11) {
      goto LABEL_13;
    }
  }
  else
  {
    do
    {
      if (v16 == *((_DWORD *)this + 15))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 48, 1, 1);
        unsigned int v16 = *((_DWORD *)this + 14);
      }
      DgnString::DgnString((DgnString *)(*((void *)this + 6) + 16 * v16));
      unsigned int v16 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v16;
    }
    while (v16 < v11);
  }
  uint64_t v17 = 0;
  do
  {
    BitArray::setSizeNoGrow((BitArray *)(*v15 + v17), 0);
    BitArray::setSize((BitArray *)(*v15 + v17), v12);
    v17 += 16;
    --v11;
  }
  while (v11);
LABEL_13:
  uint64_t result = SeedMergedActiveWord::processOnePredStateForPort<true>((uint64_t)this, v10, (uint64_t)a3, a5);
  if (v12 >= 1)
  {
    unsigned int v19 = v12 + 1;
    do
    {
      if ((*(_DWORD *)(*(void *)a4 + 4 * ((unsigned __int16)(v19 - 2) >> 5)) >> (v19 - 2))) {
        uint64_t result = SeedMergedActiveWord::processOnePredStateForPort<false>((uint64_t)this, v10, (uint64_t)a3, a5, (unsigned __int16)(v19 - 2));
      }
      --v19;
    }
    while (v19 > 1);
  }
  *((_DWORD *)this + 22) = -1;
  return result;
}

uint64_t SeedMergedActiveWord::processOnePredStateForPort<true>(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = **(void **)(*(void *)(*(void *)(result + 8) + 8) + 72);
  int v5 = *(__int16 *)(v4 + 8);
  if (v5 <= a4)
  {
    uint64_t v7 = result;
    unsigned int v8 = v5 == 20000 ? -2 : *(_DWORD *)v4;
    uint64_t v9 = (unsigned int *)(*(void *)(a3 + 8) + 36 * v8);
    unint64_t v15 = ((unint64_t)*v9 >> 25) | ((unint64_t)v9[2] << 32);
    unsigned int v16 = v9[3];
    uint64_t result = DgnArray<PredState>::find((unsigned int *)(a2 + 24), (unsigned __int16 *)&v15);
    uint64_t v10 = *(void *)(a2 + 40);
    uint64_t v11 = *(unsigned int *)(v10 + 16 * result + 8);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = *(void *)(v10 + 16 * result);
      do
      {
        uint64_t v13 = --v11 >> 5;
        if ((*(_DWORD *)(v12 + 4 * v13) & (1 << v11)) != 0)
        {
          *(_DWORD *)(*(void *)(v7 + 32) + 4 * v13) |= 1 << v11;
          uint64_t v14 = *(void *)(v7 + 16);
          if (v5 < *(__int16 *)(v14 + 2 * v11)) {
            *(_WORD *)(v14 + 2 * v11) = v5;
          }
        }
      }
      while ((unint64_t)(v11 + 1) > 1);
    }
  }
  return result;
}

uint64_t SeedMergedActiveWord::processOnePredStateForPort<false>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t result = ActiveWord::maybeGetNonSilOutPort(*(ActiveWord **)(a1 + 8), a5);
  int v11 = *(__int16 *)(result + 8);
  if (v11 <= a4)
  {
    unsigned int v12 = v11 == 20000 ? -2 : *(_DWORD *)result;
    uint64_t v13 = (unsigned int *)(*(void *)(a3 + 8) + 36 * v12);
    unint64_t v19 = ((unint64_t)*v13 >> 25) | ((unint64_t)v13[2] << 32);
    unsigned int v20 = v13[3];
    uint64_t result = DgnArray<PredState>::find((unsigned int *)(a2 + 24), (unsigned __int16 *)&v19);
    uint64_t v14 = *(void *)(a2 + 40);
    uint64_t v15 = *(unsigned int *)(v14 + 16 * result + 8);
    if ((int)v15 >= 1)
    {
      uint64_t v16 = *(void *)(v14 + 16 * result);
      do
      {
        --v15;
        if ((*(_DWORD *)(v16 + 4 * (v15 >> 5)) >> v15))
        {
          uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 16 * v15);
          *(_DWORD *)(v17 + 4 * (a5 >> 5)) |= 1 << a5;
          uint64_t v18 = *(void *)(a1 + 16);
          if (v11 < *(__int16 *)(v18 + 2 * v15)) {
            *(_WORD *)(v18 + 2 * v15) = v11;
          }
        }
      }
      while ((unint64_t)(v15 + 1) > 1);
    }
  }
  return result;
}

uint64_t sizeObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sizeObject(a1 + 64, a2);
  uint64_t v5 = sizeObject<PhnIndexSet>(a1 + 48, a2);
  uint64_t v6 = BitArray::sizeObject(a1 + 32, a2);
  uint64_t v7 = sizeObject<unsigned short>(a1 + 16, a2);
  uint64_t v8 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v8 = 8;
  }
  if (a2 == 3) {
    uint64_t v8 = 0;
  }
  return v4 + 4 * (a2 != 3) + v5 + v6 + v7 + v8;
}

{
  uint64_t active;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  active = sizeObject<ActiveWord *>(a1 + 8, a2);
  uint64_t v5 = sizeObject(a1 + 32, a2);
  uint64_t v6 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v6 = 8;
  }
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 6;
  if (a2 == 3) {
    uint64_t v7 = 0;
  }
  return v7 + active + v5 + v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v4 = sizeObject(a1, a2);
  uint64_t v5 = sizeObject<FeatureFilterSpec>(a1 + 80, a2);
  uint64_t v6 = sizeObject(a1 + 96, a2);
  uint64_t v7 = sizeObject<FeatureFilterSpec>(a1 + 104, a2);
  uint64_t v8 = sizeObject(a1 + 120, a2);
  uint64_t v9 = sizeObject(a1 + 144, a2);
  uint64_t v10 = sizeObject(a1 + 184, a2);
  int v11 = 12;
  if (a2 == 3) {
    int v11 = 0;
  }
  return v11 + v4 + v5 + v6 + v7 + v8 + v9 + v10;
}

uint64_t MergedActive::initMergedActive(uint64_t result, uint64_t a2, char a3, char a4)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 128) = a3;
  *(unsigned char *)(result + 129) = a4;
  return result;
}

uint64_t sizeObject<ActiveWord *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t result = 12;
  }
  else {
    uint64_t result = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    char v5 = 2;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      char v5 = 3;
    }
    if (a2) {
      uint64_t v6 = v4 << v5;
    }
    else {
      uint64_t v6 = (v4 + (*(_DWORD *)(a1 + 12) - v4)) << v5;
    }
    result += v6;
  }
  return result;
}

uint64_t DgnArray<PredState>::find(unsigned int *a1, unsigned __int16 *a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  for (uint64_t i = (_DWORD *)(*(void *)a1 + 4);
        *((unsigned __int16 *)i - 2) != *a2 || *i != *((_DWORD *)a2 + 1) || i[1] != *((_DWORD *)a2 + 2);
        i += 3)
  {
    if (v2 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t ActiveWord::maybeGetNonSilOutPort(ActiveWord *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  unsigned int v3 = *(_DWORD *)(v2 + 40);
  if (v3 < 2)
  {
    unsigned int v4 = 0;
    return *(void *)(*(void *)(v2 + 72) + 8 * v4);
  }
  if (v3 - 3 < 2)
  {
    unsigned int v4 = *(unsigned __int8 *)(*(void *)(v2 + 88) + a2);
    if (v4 == 255) {
      return 0;
    }
    return *(void *)(*(void *)(v2 + 72) + 8 * v4);
  }
  if (v3 == 2)
  {
    unsigned int v4 = 1;
    return *(void *)(*(void *)(v2 + 72) + 8 * v4);
  }
  return 0;
}

uint64_t StartupPrefiltererBuildParamSpecMgr(void)
{
  unsigned int v21 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v21, (uint64_t)"PrefiltererBuildAllowMultiPhonemeSequences", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildAllowMultiPhonemeSequencesBoolHistory);
  unsigned int v20 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v20, (uint64_t)"PrefiltererBuildDurationScoreScale", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildDurationScoreScaleDoubleHistory);
  uint64_t v18 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v18, (uint64_t)"PrefiltererBuildBestScoreAdditionalPhonemeStartDepth", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildBestScoreAdditionalPhonemeStartDepthIntHistory);
  unint64_t v19 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v19, (uint64_t)"PrefiltererBuildMaxPronLength", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildMaxPronLengthIntHistory);
  uint64_t v17 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v17, (uint64_t)"PrefiltererBuildMaxWordEndScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildMaxWordEndScoreIntHistory);
  uint64_t v15 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v15, (uint64_t)"PrefiltererBuildEnableGenoneScoreCacheThresh", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildEnableGenoneScoreCacheThreshDoubleHistory);
  uint64_t v16 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v16, (uint64_t)"PrefiltererBuildTruncatePackedIntComponentScores", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildTruncatePackedIntComponentScoresBoolHistory);
  uint64_t v13 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v13, (uint64_t)"PrefiltererBuildFmpeMinimumPosteriorProbability", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildFmpeMinimumPosteriorProbabilityDoubleHistory);
  uint64_t v14 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v14, (uint64_t)"PrefiltererBuildLookaheadScoringType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildLookaheadScoringTypeEnumHistory);
  unsigned int v12 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v12, (uint64_t)"PrefiltererBuildLookaheadThreadingType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildLookaheadThreadingTypeEnumHistory);
  uint64_t v0 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v0, (uint64_t)"PrefiltererBuildThreadingType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildThreadingTypeEnumHistory);
  uint64_t v1 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v1, (uint64_t)"PrefiltererBuildUseGPU", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildUseGPUBoolHistory);
  uint64_t v2 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v2, (uint64_t)"PrefiltererBuildHierScorerBeamList", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildHierScorerBeamListStringHistory);
  int v11 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v11, (uint64_t)"PrefiltererBuildHierScorerCutoffList", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildHierScorerCutoffListStringHistory);
  unsigned int v3 = MemChunkAlloc(0x38uLL, 0);
  StringParamSpec::StringParamSpec(v3, (uint64_t)"PrefiltererBuildHierScorerCutoffRatioList", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildHierScorerCutoffRatioListStringHistory);
  unsigned int v4 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v4, (uint64_t)"PrefiltererBuildHierInactiveComponentScore", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildHierInactiveComponentScoreIntHistory);
  char v5 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v5, (uint64_t)"PrefiltererBuildDisableHierarchicalScorer", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildDisableHierarchicalScorerBoolHistory);
  uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v6, (uint64_t)"PrefiltererBuildDisableGPUScorer", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildDisableGPUScorerBoolHistory);
  uint64_t v7 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v7, (uint64_t)"PrefiltererBuildContextType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildContextTypeEnumHistory);
  uint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  EnumParamSpec::EnumParamSpec(v8, (uint64_t)"PrefiltererBuildWordBoundaryType", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sPrefiltererBuildWordBoundaryTypeEnumHistory);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_26AB82A70, (ParamSpec *)v11);
  uint64_t v9 = (ParamSpecMgr *)qword_26AB82A70;

  return ParamSpecMgr::sortParams(v9);
}

_DWORD *PrefiltererBuildParamSet::PrefiltererBuildParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(void *)a1 = &unk_26C4E3A30;
  DgnString::DgnString((DgnString *)(a1 + 26));
  DgnString::DgnString((DgnString *)(a1 + 30));
  (*(void (**)(_DWORD *))(*(void *)a1 + 16))(a1);
  return a1;
}

void sub_213F451F4(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  DgnString::~DgnString(v6);
  DgnString::~DgnString(v4);
  void *v1 = v2;
  DgnString::~DgnString(v3);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererBuildParamSet::PrefiltererBuildParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)a1 = &unk_26C4E3A30;
  DgnString::DgnString((DgnString *)(a1 + 104));
  DgnString::DgnString((DgnString *)(a1 + 120));
  *(unsigned char *)(a1 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = v11;
  *(unsigned char *)(a1 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(unsigned char *)(a2 + 96);
  DgnString::operator=((DgnString *)(a1 + 104), (DgnString *)(a2 + 104));
  DgnString::operator=((DgnString *)(a1 + 120), (DgnString *)(a2 + 120));
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_WORD *)(a1 + 14pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(_WORD *)(a2 + 140);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

void sub_213F4535C(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v4);
  void *v1 = v2;
  DgnString::~DgnString(v3);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererBuildParamSet::setDefaults(PrefiltererBuildParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A70, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 11) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A70, 2, 0, 0, v9, v10, v11, v12);
  *((double *)this + 6) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A70, 3, 0, 0, v13, v14, v15, v16);
  *((double *)this + 7) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A70, 4, 0, 0, v17, v18, v19, v20);
  *((double *)this + 8) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A70, 5, 0, 0, v21, v22, v23, v24);
  *((_DWORD *)this + 18) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A70, 6, 0, 0, v25, v26, v27, v28);
  *((_DWORD *)this + 19) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A70, 7, 0, 0, v29, v30, v31, v32);
  *((unsigned char *)this + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A70, 8, 0, 0, v33, v34, v35, v36);
  *((_DWORD *)this + 21) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A70, 9, v37, v38, v39, v40, v41, v42);
  *((_DWORD *)this + 22) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A70, 10, v43, v44, v45, v46, v47, v48);
  *((_DWORD *)this + 23) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A70, 11, v49, v50, v51, v52, v53, v54);
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A70, 12, 0, 0, v55, v56, v57, v58);
  Default_string = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_26AB82A70, 13, 0, 0, v59, v60, v61, v62);
  DgnString::operator=((PrefiltererBuildParamSet *)((char *)this + 104), Default_string);
  unsigned int v68 = (char *)ParamSpecMgr::ParamGetDefault_string((ParamSpecMgr *)qword_26AB82A70, 14, 0, 0, v64, v65, v66, v67);
  DgnString::operator=((PrefiltererBuildParamSet *)((char *)this + 120), v68);
  *((_DWORD *)this + 34) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A70, 15, 0, 0, v69, v70, v71, v72);
  *((unsigned char *)this + 14pthread_rwlock_init((pthread_rwlock_t *)this, 0) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A70, 16, 0, 0, v73, v74, v75, v76);
  *((unsigned char *)this + 141) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A70, 17, 0, 0, v77, v78, v79, v80);
  *((_DWORD *)this + 36) = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A70, 18, v81, v82, v83, v84, v85, v86);
  uint64_t result = ParamSpecMgr::ParamGetDefault_enum((ParamSpecMgr *)qword_26AB82A70, 19, v87, v88, v89, v90, v91, v92);
  *((_DWORD *)this + 37) = result;
  return result;
}

uint64_t PrefiltererBuildParamSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject(a1 + 8) + 16 * (a2 != 3);
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v6 = sizeObject(a1 + 104);
    BOOL v5 = a2 != 3;
    v4 += (8 * v5 || 2 * v5) + 2 * (8 * v5 + 12 * v5) + v6 + sizeObject(a1 + 120) + (v5 || 4 * v5 || 2 * (v5 || 4 * v5));
  }
  return v4;
}

void PrefiltererBuildParamSet::setParamSetPrefiltererBuildHierScorerBeamList(PrefiltererBuildParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9)) {
    throwParamSetSetFailed("PrefiltererBuildHierScorerBeamList", "string", a3, a4, a5, a6, a7, a8);
  }
  else {
    DgnString::operator=((PrefiltererBuildParamSet *)((char *)this + 104), a2);
  }
}

void PrefiltererBuildParamSet::setParamSetPrefiltererBuildHierScorerCutoffRatioList(PrefiltererBuildParamSet *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 9)) {
    throwParamSetSetFailed("PrefiltererBuildHierScorerCutoffRatioList", "string", a3, a4, a5, a6, a7, a8);
  }
  else {
    DgnString::operator=((PrefiltererBuildParamSet *)((char *)this + 120), a2);
  }
}

BOOL PrefiltererBuildParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A70;
        int v13 = 1;
        goto LABEL_41;
      }
      if (a3) {
        goto LABEL_30;
      }
      int v8 = a1[40];
      return v8 != 0;
    case 2:
      uint64_t v9 = "int";
      char v10 = 2;
      goto LABEL_33;
    case 3:
      uint64_t v9 = "double";
      char v10 = 3;
      goto LABEL_33;
    case 4:
      uint64_t v9 = "double";
      char v10 = 4;
      goto LABEL_33;
    case 5:
      uint64_t v9 = "double";
      char v10 = 5;
      goto LABEL_33;
    case 6:
      uint64_t v9 = "int";
      char v10 = 6;
      goto LABEL_33;
    case 7:
      uint64_t v9 = "int";
      char v10 = 7;
      goto LABEL_33;
    case 8:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A70;
        int v13 = 8;
        goto LABEL_41;
      }
      if (a3) {
        goto LABEL_30;
      }
      int v8 = a1[80];
      return v8 != 0;
    case 9:
      uint64_t v9 = "enum";
      char v10 = 9;
      goto LABEL_33;
    case 10:
      uint64_t v9 = "enum";
      char v10 = 10;
      goto LABEL_33;
    case 11:
      uint64_t v9 = "enum";
      char v10 = 11;
      goto LABEL_33;
    case 12:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A70;
        int v13 = 12;
        goto LABEL_41;
      }
      if (a3) {
        goto LABEL_30;
      }
      int v8 = a1[96];
      return v8 != 0;
    case 13:
      uint64_t v9 = "string";
      char v10 = 13;
      goto LABEL_33;
    case 14:
      uint64_t v9 = "string";
      char v10 = 14;
      goto LABEL_33;
    case 15:
      uint64_t v9 = "int";
      char v10 = 15;
      goto LABEL_33;
    case 16:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A70;
        int v13 = 16;
        goto LABEL_41;
      }
      if (a3) {
        goto LABEL_30;
      }
      int v8 = a1[140];
      return v8 != 0;
    case 17:
      if (a3 == 1)
      {
        uint64_t v12 = (ParamSpecMgr *)qword_26AB82A70;
        int v13 = 17;
LABEL_41:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!a3)
      {
        int v8 = a1[141];
        return v8 != 0;
      }
LABEL_30:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 18:
      uint64_t v9 = "enum";
      char v10 = 18;
      goto LABEL_33;
    case 19:
      uint64_t v9 = "enum";
      char v10 = 19;
LABEL_33:
      throwWrongTypeForParamId(v10, v9, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t PrefiltererBuildParamSet::getIntParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_26;
    case 2:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[11];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 2;
          goto LABEL_40;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 2;
          goto LABEL_42;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 2;
          goto LABEL_44;
        default:
          goto LABEL_29;
      }
      return result;
    case 3:
      int v8 = "double";
      char v9 = 3;
      goto LABEL_26;
    case 4:
      int v8 = "double";
      char v9 = 4;
      goto LABEL_26;
    case 5:
      int v8 = "double";
      char v9 = 5;
      goto LABEL_26;
    case 6:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[18];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 6;
          goto LABEL_40;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 6;
          goto LABEL_42;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 6;
          goto LABEL_44;
        default:
          goto LABEL_29;
      }
      return result;
    case 7:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[19];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 7;
          goto LABEL_40;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 7;
          goto LABEL_42;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 7;
          goto LABEL_44;
        default:
          goto LABEL_29;
      }
      return result;
    case 8:
      int v8 = "BOOL";
      char v9 = 8;
      goto LABEL_26;
    case 9:
      int v8 = "enum";
      char v9 = 9;
      goto LABEL_26;
    case 10:
      int v8 = "enum";
      char v9 = 10;
      goto LABEL_26;
    case 11:
      int v8 = "enum";
      char v9 = 11;
      goto LABEL_26;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_26;
    case 13:
      int v8 = "string";
      char v9 = 13;
      goto LABEL_26;
    case 14:
      int v8 = "string";
      char v9 = 14;
      goto LABEL_26;
    case 15:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[34];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 15;
LABEL_40:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 15;
LABEL_42:
          uint64_t v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 15;
LABEL_44:
          uint64_t v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_29:
          throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    case 16:
      int v8 = "BOOL";
      char v9 = 16;
      goto LABEL_26;
    case 17:
      int v8 = "BOOL";
      char v9 = 17;
      goto LABEL_26;
    case 18:
      int v8 = "enum";
      char v9 = 18;
      goto LABEL_26;
    case 19:
      int v8 = "enum";
      char v9 = 19;
LABEL_26:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

double PrefiltererBuildParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_25;
    case 2:
      int v8 = "int";
      char v9 = 2;
      goto LABEL_25;
    case 3:
      switch((int)a3)
      {
        case 0:
          double result = a1[6];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 3;
          goto LABEL_36;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 3;
          goto LABEL_38;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 3;
          goto LABEL_40;
        default:
          goto LABEL_28;
      }
      return result;
    case 4:
      switch((int)a3)
      {
        case 0:
          double result = a1[7];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 4;
          goto LABEL_36;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 4;
          goto LABEL_38;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 4;
          goto LABEL_40;
        default:
          goto LABEL_28;
      }
      return result;
    case 5:
      switch((int)a3)
      {
        case 0:
          double result = a1[8];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 5;
LABEL_36:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 5;
LABEL_38:
          uint64_t v18 = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 5;
LABEL_40:
          uint64_t v19 = (const void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_28:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_25;
    case 7:
      int v8 = "int";
      char v9 = 7;
      goto LABEL_25;
    case 8:
      int v8 = "BOOL";
      char v9 = 8;
      goto LABEL_25;
    case 9:
      int v8 = "enum";
      char v9 = 9;
      goto LABEL_25;
    case 10:
      int v8 = "enum";
      char v9 = 10;
      goto LABEL_25;
    case 11:
      int v8 = "enum";
      char v9 = 11;
      goto LABEL_25;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_25;
    case 13:
      int v8 = "string";
      char v9 = 13;
      goto LABEL_25;
    case 14:
      int v8 = "string";
      char v9 = 14;
      goto LABEL_25;
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_25;
    case 16:
      int v8 = "BOOL";
      char v9 = 16;
      goto LABEL_25;
    case 17:
      int v8 = "BOOL";
      char v9 = 17;
      goto LABEL_25;
    case 18:
      int v8 = "enum";
      char v9 = 18;
      goto LABEL_25;
    case 19:
      int v8 = "enum";
      char v9 = 19;
LABEL_25:
      throwWrongTypeForParamId(v9, v8, "double", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0.0;
}

char *PrefiltererBuildParamSet::getStringParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_29;
    case 2:
      int v8 = "int";
      char v9 = 2;
      goto LABEL_29;
    case 3:
      int v8 = "double";
      char v9 = 3;
      goto LABEL_29;
    case 4:
      int v8 = "double";
      char v9 = 4;
      goto LABEL_29;
    case 5:
      int v8 = "double";
      char v9 = 5;
      goto LABEL_29;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_29;
    case 7:
      int v8 = "int";
      char v9 = 7;
      goto LABEL_29;
    case 8:
      int v8 = "BOOL";
      char v9 = 8;
      goto LABEL_29;
    case 9:
      int v8 = "enum";
      char v9 = 9;
      goto LABEL_29;
    case 10:
      int v8 = "enum";
      char v9 = 10;
      goto LABEL_29;
    case 11:
      int v8 = "enum";
      char v9 = 11;
      goto LABEL_29;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_29;
    case 13:
      if (a3 == 1)
      {
        int v13 = (ParamSpecMgr *)qword_26AB82A70;
        int v14 = 13;
        goto LABEL_35;
      }
      if (a3) {
        goto LABEL_32;
      }
      int v10 = *(_DWORD *)(a1 + 112);
      uint64_t v11 = *(void *)(a1 + 104);
      goto LABEL_24;
    case 14:
      if (a3 == 1)
      {
        int v13 = (ParamSpecMgr *)qword_26AB82A70;
        int v14 = 14;
LABEL_35:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
      }
      else if (a3)
      {
LABEL_32:
        throwWrongQueryMode(a3, (uint64_t)"string", a3, a4, a5, a6, a7, a8);
        return 0;
      }
      else
      {
        int v10 = *(_DWORD *)(a1 + 128);
        uint64_t v11 = *(void *)(a1 + 120);
LABEL_24:
        if (v10) {
          return (char *)v11;
        }
        else {
          return &byte_2140B33BB;
        }
      }
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_29;
    case 16:
      int v8 = "BOOL";
      char v9 = 16;
      goto LABEL_29;
    case 17:
      int v8 = "BOOL";
      char v9 = 17;
      goto LABEL_29;
    case 18:
      int v8 = "enum";
      char v9 = 18;
      goto LABEL_29;
    case 19:
      int v8 = "enum";
      char v9 = 19;
LABEL_29:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t PrefiltererBuildParamSet::getEnumParameter(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_15;
    case 2:
      int v8 = "int";
      char v9 = 2;
      goto LABEL_15;
    case 3:
      int v8 = "double";
      char v9 = 3;
      goto LABEL_15;
    case 4:
      int v8 = "double";
      char v9 = 4;
      goto LABEL_15;
    case 5:
      int v8 = "double";
      char v9 = 5;
      goto LABEL_15;
    case 6:
      int v8 = "int";
      char v9 = 6;
      goto LABEL_15;
    case 7:
      int v8 = "int";
      char v9 = 7;
      goto LABEL_15;
    case 8:
      int v8 = "BOOL";
      char v9 = 8;
      goto LABEL_15;
    case 9:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[21];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 9;
          goto LABEL_44;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 9;
          goto LABEL_50;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 9;
          goto LABEL_56;
        default:
          goto LABEL_30;
      }
      return result;
    case 10:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[22];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 10;
          goto LABEL_44;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 10;
          goto LABEL_50;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 10;
          goto LABEL_56;
        default:
          goto LABEL_30;
      }
      return result;
    case 11:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[23];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 11;
          goto LABEL_44;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 11;
          goto LABEL_50;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 11;
          goto LABEL_56;
        default:
          goto LABEL_30;
      }
      return result;
    case 12:
      int v8 = "BOOL";
      char v9 = 12;
      goto LABEL_15;
    case 13:
      int v8 = "string";
      char v9 = 13;
      goto LABEL_15;
    case 14:
      int v8 = "string";
      char v9 = 14;
      goto LABEL_15;
    case 15:
      int v8 = "int";
      char v9 = 15;
      goto LABEL_15;
    case 16:
      int v8 = "BOOL";
      char v9 = 16;
      goto LABEL_15;
    case 17:
      int v8 = "BOOL";
      char v9 = 17;
LABEL_15:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      return 0;
    case 18:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[36];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 18;
          goto LABEL_44;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 18;
          goto LABEL_50;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 18;
          goto LABEL_56;
        default:
          goto LABEL_30;
      }
      return result;
    case 19:
      switch((int)a3)
      {
        case 0:
          uint64_t result = a1[37];
          break;
        case 1:
          uint64_t v11 = (ParamSpecMgr *)qword_26AB82A70;
          int v12 = 19;
LABEL_44:
          ParamByParamId = (void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
          if (ParamByParamId) {
          uint64_t result = EnumParamSpec::getDefault((EnumParamSpec *)ParamByParamId);
          }
          break;
        case 2:
          int v13 = (ParamSpecMgr *)qword_26AB82A70;
          int v14 = 19;
LABEL_50:
          uint64_t v18 = (void *)ParamSpecMgr::getParamByParamId(v13, v14, a3, a4, a5, a6, a7, a8);
          if (v18) {
          uint64_t result = EnumParamSpec::getMinVal((EnumParamSpec *)v18);
          }
          break;
        case 3:
          uint64_t v15 = (ParamSpecMgr *)qword_26AB82A70;
          int v16 = 19;
LABEL_56:
          uint64_t v19 = (void *)ParamSpecMgr::getParamByParamId(v15, v16, a3, a4, a5, a6, a7, a8);
          if (v19) {
          uint64_t result = EnumParamSpec::getMaxVal((EnumParamSpec *)v19);
          }
          break;
        default:
LABEL_30:
          throwWrongQueryMode(a3, (uint64_t)"enum", a3, a4, a5, a6, a7, a8);
          return 0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

void PrefiltererBuildParamSet::setBoolParameter(PrefiltererBuildParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  char v9 = a3;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "PrefiltererBuildAllowMultiPhonemeSequences";
        goto LABEL_27;
      }
      *((unsigned char *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = a3;
      return;
    case 2:
      throwWrongTypeForParamId(2, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 3:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 4:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 5:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 6:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 7:
LABEL_9:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 8:
LABEL_10:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "PrefiltererBuildTruncatePackedIntComponentScores";
        goto LABEL_27;
      }
      *((unsigned char *)this + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      return;
    case 9:
      throwWrongTypeForParamId(9, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 10:
LABEL_14:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 11:
LABEL_15:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 12:
LABEL_16:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "PrefiltererBuildUseGPU";
        goto LABEL_27;
      }
      *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v9;
      return;
    case 13:
      throwWrongTypeForParamId(13, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 14:
LABEL_20:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 15:
LABEL_21:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 16:
LABEL_22:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "PrefiltererBuildDisableHierarchicalScorer";
        goto LABEL_27;
      }
      *((unsigned char *)this + 14pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v9;
      break;
    case 17:
      if (*((_DWORD *)this + 9))
      {
        uint64_t v11 = "PrefiltererBuildDisableGPUScorer";
LABEL_27:
        throwParamSetSetFailed(v11, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((unsigned char *)this + 141) = a3;
      }
      break;
    case 18:
      throwWrongTypeForParamId(18, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 19:
LABEL_31:
      throwWrongTypeForParamId(v8, "enum", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    default:
LABEL_32:
      throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererBuildParamSet::setIntParameter(PrefiltererBuildParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  int v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 2, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId) {
      IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v9, 0, 0, v12, v13, v14, v15);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "PrefiltererBuildBestScoreAdditionalPhonemeStartDepth";
        goto LABEL_30;
      }
      *((_DWORD *)this + 11) = v9;
      return;
    case 3:
      throwWrongTypeForParamId(3, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 4:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 5:
LABEL_9:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 6:
LABEL_10:
      uint64_t v23 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 6, a3, a4, a5, a6, a7, a8);
      if (v23) {
      IntParamSpec::validateValue((IntParamSpec *)v23, v9, 0, 0, v24, v25, v26, v27);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "PrefiltererBuildMaxPronLength";
        goto LABEL_30;
      }
      *((_DWORD *)this + 18) = v9;
      return;
    case 7:
      uint64_t v28 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 7, a3, a4, a5, a6, a7, a8);
      if (v28) {
      IntParamSpec::validateValue((IntParamSpec *)v28, v9, 0, 0, v29, v30, v31, v32);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "PrefiltererBuildMaxWordEndScore";
        goto LABEL_30;
      }
      *((_DWORD *)this + 19) = v9;
      break;
    case 8:
      throwWrongTypeForParamId(8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 9:
LABEL_20:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 10:
LABEL_21:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 11:
LABEL_22:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 12:
LABEL_23:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 13:
LABEL_24:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 14:
LABEL_25:
      throwWrongTypeForParamId(v8, "string", "int", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 15:
LABEL_26:
      uint64_t v33 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 15, a3, a4, a5, a6, a7, a8);
      if (v33) {
      IntParamSpec::validateValue((IntParamSpec *)v33, v9, 0, 0, v34, v35, v36, v37);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v22 = "PrefiltererBuildHierInactiveComponentScore";
LABEL_30:
        throwParamSetSetFailed(v22, "int", v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *((_DWORD *)this + 34) = v9;
      }
      break;
    case 16:
      throwWrongTypeForParamId(16, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 17:
LABEL_35:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 18:
LABEL_36:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 19:
LABEL_37:
      throwWrongTypeForParamId(v8, "enum", "int", a4, a5, a6, a7, a8);
      goto LABEL_38;
    default:
LABEL_38:
      throwWrongParamIdValue(v8, "int", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererBuildParamSet::setDoubleParameter(PrefiltererBuildParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 3, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "PrefiltererBuildDurationScoreScale";
        goto LABEL_17;
      }
      *((double *)this + 6) = a3;
      return;
    case 4:
      uint64_t v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 4, a4, a5, a6, a7, a8, a9);
      if (v25) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "PrefiltererBuildEnableGenoneScoreCacheThresh";
        goto LABEL_17;
      }
      *((double *)this + 7) = a3;
      break;
    case 5:
      uint64_t v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 5, a4, a5, a6, a7, a8, a9);
      if (v31) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "PrefiltererBuildFmpeMinimumPosteriorProbability";
LABEL_17:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 8) = a3;
      }
      break;
    case 6:
      throwWrongTypeForParamId(6, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_21;
    case 7:
LABEL_21:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_22;
    case 8:
LABEL_22:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_23;
    case 9:
LABEL_23:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_24;
    case 10:
LABEL_24:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_25;
    case 11:
LABEL_25:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_26;
    case 12:
LABEL_26:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_27;
    case 13:
LABEL_27:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_28;
    case 14:
LABEL_28:
      throwWrongTypeForParamId(v9, "string", "double", a5, a6, a7, a8, a9);
      goto LABEL_29;
    case 15:
LABEL_29:
      throwWrongTypeForParamId(v9, "int", "double", a5, a6, a7, a8, a9);
      goto LABEL_30;
    case 16:
LABEL_30:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_31;
    case 17:
LABEL_31:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_32;
    case 18:
LABEL_32:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_33;
    case 19:
LABEL_33:
      throwWrongTypeForParamId(v9, "enum", "double", a5, a6, a7, a8, a9);
      goto LABEL_34;
    default:
LABEL_34:
      throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void PrefiltererBuildParamSet::setStringParameter(PrefiltererBuildParamSet *this, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      PrefiltererBuildParamSet::setParamSetPrefiltererBuildHierScorerBeamList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 14:
      PrefiltererBuildParamSet::setParamSetPrefiltererBuildHierScorerCutoffRatioList(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 15:
      throwWrongTypeForParamId(15, "int", "string", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 16:
LABEL_21:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 17:
LABEL_22:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 18:
LABEL_23:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 19:
LABEL_24:
      throwWrongTypeForParamId(v8, "enum", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void PrefiltererBuildParamSet::setEnumParameter(PrefiltererBuildParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  int v9 = a3;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 9, a3, a4, a5, a6, a7, a8);
      if (ParamByParamId) {
      EnumParamSpec::validateValue((EnumParamSpec *)ParamByParamId, v9, v12, v13, v14, v15, v16, v17);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "PrefiltererBuildLookaheadScoringType";
        goto LABEL_36;
      }
      *((_DWORD *)this + 21) = v9;
      return;
    case 10:
      uint64_t v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 10, a3, a4, a5, a6, a7, a8);
      if (v25) {
      EnumParamSpec::validateValue((EnumParamSpec *)v25, v9, v26, v27, v28, v29, v30, v31);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "PrefiltererBuildLookaheadThreadingType";
        goto LABEL_36;
      }
      *((_DWORD *)this + 22) = v9;
      return;
    case 11:
      uint64_t v32 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 11, a3, a4, a5, a6, a7, a8);
      if (v32) {
      EnumParamSpec::validateValue((EnumParamSpec *)v32, v9, v33, v34, v35, v36, v37, v38);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "PrefiltererBuildThreadingType";
        goto LABEL_36;
      }
      *((_DWORD *)this + 23) = v9;
      return;
    case 12:
      throwWrongTypeForParamId(12, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 13:
LABEL_27:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 14:
LABEL_28:
      throwWrongTypeForParamId(v8, "string", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 15:
LABEL_29:
      throwWrongTypeForParamId(v8, "int", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 16:
LABEL_30:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 17:
LABEL_31:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 18:
LABEL_32:
      uint64_t v39 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 18, a3, a4, a5, a6, a7, a8);
      if (v39) {
      EnumParamSpec::validateValue((EnumParamSpec *)v39, v9, v40, v41, v42, v43, v44, v45);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "PrefiltererBuildContextType";
        goto LABEL_36;
      }
      *((_DWORD *)this + 36) = v9;
      break;
    case 19:
      uint64_t v46 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A70, 19, a3, a4, a5, a6, a7, a8);
      if (v46) {
      EnumParamSpec::validateValue((EnumParamSpec *)v46, v9, v47, v48, v49, v50, v51, v52);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "PrefiltererBuildWordBoundaryType";
LABEL_36:
        throwParamSetSetFailed(v24, "enum", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((_DWORD *)this + 37) = v9;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      return;
  }
}

void PrefiltererBuildParamSet::~PrefiltererBuildParamSet(PrefiltererBuildParamSet *this)
{
  PrefiltererBuildParamSet::~PrefiltererBuildParamSet(this);

  JUMPOUT(0x216698730);
}

{
  DgnString *v2;

  *(void *)this = &unk_26C4E3A30;
  uint64_t v2 = (PrefiltererBuildParamSet *)((char *)this + 104);
  DgnString::~DgnString((PrefiltererBuildParamSet *)((char *)this + 120));
  DgnString::~DgnString(v2);
  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((PrefiltererBuildParamSet *)((char *)this + 8));
}

void MrecInitModule_wordlist_word(void)
{
  if (!gParDebugShowWordListOnLoad)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowWordListOnLoad", (const char *)&unk_2140A60F6, (const char *)&unk_2140A60F6, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugShowWordListOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowWordListOnLoad);
  }
  if (!gParDebugWordListAddDelete)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugWordListAddDelete", (const char *)&unk_2140A60F6, (const char *)&unk_2140A60F6, 0, 0, 0);
    *unsigned int v3 = &unk_26C4E0858;
    gParDebugWordListAddDelete = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordListAddDelete);
  }
  if (!gParDebugWordListSetAllPronsAsClient)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugWordListSetAllPronsAsClient", (const char *)&unk_2140A60F6, (const char *)&unk_2140A60F6, 0, 0, 0);
    *BOOL v5 = &unk_26C4E0858;
    gParDebugWordListSetAllPronsAsClient = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordListSetAllPronsAsClient);
  }
  if (!gParDebugWordListSetAsFactory)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugWordListSetAsFactory", (const char *)&unk_2140A60F6, (const char *)&unk_2140A60F6, 0, 0, 0);
    *uint64_t v7 = &unk_26C4E0858;
    gParDebugWordListSetAsFactory = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordListSetAsFactory);
  }
  if (!gParDebugWordListSetPron)
  {
    char v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugWordListSetPron", (const char *)&unk_2140A60F6, (const char *)&unk_2140A60F6, 0, 0, 0);
    *int v9 = &unk_26C4E0858;
    gParDebugWordListSetProuint64_t n = (uint64_t)v9;
    int v10 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v10, (GlobalParam **)&gParDebugWordListSetPron);
  }
}

uint64_t WordIdCollSearchCmp(unsigned int *a1, CharInfo **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2[2];
  int v10 = *a2;
  uint64_t v11 = (CharInfo *)(*((void *)a2[1] + 28) + *(unsigned int *)(*((void *)a2[1] + 25) + 4 * *a1));
  LODWORD(a1) = *((unsigned __int8 *)a2 + 26);
  unsigned int v12 = *((unsigned __int16 *)a2 + 12);
  if (a1) {
    return CollMgr::collPrefixcmpUns8(v9, v12, v11, v10, a5, a6, a7, a8);
  }
  else {
    return CollMgr::collStrcmpUns8(v9, v12, v11, v10, a5, a6, a7, a8);
  }
}

uint64_t WordIdCollSearchCmpFromWordId(unsigned int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(unsigned int *)a2;
  __int16 v11 = *((_WORD *)a2 + 12);
  long long v20 = *(_OWORD *)(a2 + 8);
  uint64_t v12 = v20;
  char v13 = a2[26];
  uint64_t v19 = (CharInfo *)(*(void *)(v20 + 224) + *(unsigned int *)(*(void *)(v20 + 200) + 4 * v10));
  __int16 v21 = v11;
  char v22 = v13;
  uint64_t result = WordIdCollSearchCmp(a1, &v19, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    if (a2[26])
    {
      return 0;
    }
    else
    {
      uint64_t v15 = *a1;
      uint64_t v16 = *(unsigned int *)a2;
      if (*((unsigned __int16 *)a2 + 12) >= 0xFFFEu) {
        return *(unsigned __int8 *)(*(void *)(v12 + 104) + v15)
      }
             - *(unsigned __int8 *)(*(void *)(v12 + 104) + v16);
      uint64_t v17 = *(void *)(v12 + 256);
      int v18 = *(_DWORD *)(v17 + 4 * v15);
      LODWORD(v17) = *(_DWORD *)(v17 + 4 * v16);
      uint64_t result = (v18 - v17);
      if (v18 == v17) {
        return *(unsigned __int8 *)(*(void *)(v12 + 104) + v15)
      }
             - *(unsigned __int8 *)(*(void *)(v12 + 104) + v16);
    }
  }
  return result;
}

void *TagBitsAndStrings::reInit(TagBitsAndStrings *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((void *)this + 1) = 0;
  }
  *((void *)this + 2) = 0;
  uint64_t result = (void *)*((void *)this + 3);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 3) = 0;
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t TagBitsAndStrings::compact(TagBitsAndStrings *this)
{
  int v2 = *((_DWORD *)this + 1);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v3 = *((unsigned int *)this + 4);
  if (v3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = (v2 + 7) >> 3;
    unsigned int v6 = v5 + 1;
    uint64_t v7 = *((void *)this + 1);
    do
    {
      unsigned int v8 = *(_DWORD *)(v7 + 4 * v4);
      if (v8 != -1)
      {
        int v9 = strlen((const char *)(*((void *)this + 3) + v8 + v5));
        unsigned int v10 = v18;
        unint64_t v11 = v6 + v18 + v9;
        if (HIDWORD(v18) < v11)
        {
          uint64_t v19 = 0;
          HIDWORD(v18) = realloc_array(v17, &v19, v11, v18, v18, 1);
          uint64_t v17 = v19;
        }
        LODWORD(v18) = v6 + v18 + v9;
        uint64_t v12 = v6 + v9;
        if (v6 + v9)
        {
          unsigned int v13 = v10;
          do
          {
            *((unsigned char *)v17 + v13++) = *(unsigned char *)(*((void *)this + 3) + v8++);
            --v12;
          }
          while (v12);
        }
        uint64_t v7 = *((void *)this + 1);
        *(_DWORD *)(v7 + 4 * v4) = v10;
        unint64_t v3 = *((unsigned int *)this + 4);
      }
      ++v4;
    }
    while (v4 < v3);
    unsigned int v14 = v18;
  }
  else
  {
    unsigned int v14 = 0;
  }
  uint64_t v15 = (void **)((char *)this + 24);
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v15, &v17, 0, v14);
  DgnPrimArray<unsigned char>::compact(v15);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
}

void sub_213F483DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t TagBitsAndStrings::setTagBits(TagBitsAndStrings *this, unsigned int a2, const BitArray *a3)
{
  size_t result = TagBitsAndStrings::createIndex(this, a2, 0);
  int v6 = *((_DWORD *)this + 1);
  int v7 = v6 + 7;
  unsigned int v8 = (v6 + 7) >> 3;
  if ((v6 + 7) >= 8)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    if (v8 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v8;
    }
    do
    {
      *(unsigned char *)(*((void *)this + 3) + (result + v10)) = *(_DWORD *)(*(void *)a3
                                                                                   + (v10 & 0xFFFFFFFC)) >> (v9 & 0x18);
      ++v10;
      v9 += 8;
    }
    while (v11 != v10);
    int v6 = *((_DWORD *)this + 1);
  }
  int v12 = (v7 & 0xFFFFFFF8) - v6;
  if (v12) {
    *(unsigned char *)(*((void *)this + 3) + result + v8 - 1) &= ~(~(-1 << v12) << (8 - v12));
  }
  return result;
}

size_t TagBitsAndStrings::createIndex(TagBitsAndStrings *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = *((_DWORD *)this + 1) + 7;
  unsigned int v7 = v6 >> 3;
  unsigned int v8 = (uint64_t *)((char *)this + 8);
  unsigned int v9 = *((_DWORD *)this + 4);
  if (v9 <= a2
    || (size_t v10 = *(unsigned int *)(*v8 + 4 * a2), v10 == -1)
    || (unsigned int v11 = strlen((const char *)(*((void *)this + 3) + v10 + v7)), v11 < a3))
  {
    uint64_t v12 = a3 + v7 + 1;
    size_t v10 = *((unsigned int *)this + 8);
    if (*((_DWORD *)this + 9) < (v10 + v12))
    {
      uint64_t v18 = 0;
      *((_DWORD *)this + 9) = realloc_array(*((void **)this + 3), &v18, (v10 + v12), v10, v10, 1);
      *((void *)this + 3) = v18;
      unsigned int v9 = *((_DWORD *)this + 4);
    }
    *((_DWORD *)this + 8) = v10 + v12;
    if (v9 <= a2)
    {
      do
      {
        if (v9 == *((_DWORD *)this + 5))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v8, 1, 1);
          unsigned int v9 = *((_DWORD *)this + 4);
        }
        uint64_t v13 = *((void *)this + 1);
        *(_DWORD *)(v13 + 4 * v9) = -1;
        unsigned int v9 = *((_DWORD *)this + 4) + 1;
        *((_DWORD *)this + 4) = v9;
      }
      while (v9 <= a2);
    }
    else
    {
      uint64_t v13 = *v8;
      if (*(_DWORD *)(*v8 + 4 * a2) != -1)
      {
        if (v6 >= 8)
        {
          uint64_t v16 = 0;
          if (v7 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v7;
          }
          do
          {
            *(unsigned char *)(*((void *)this + 3) + (v10 + v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6)) = *(unsigned char *)(*((void *)this + 3)
                                                                                     + (v16 + *(_DWORD *)(*((void *)this + 1) + 4 * a2)));
            ++v16;
          }
          while (v14 != v16);
          uint64_t v13 = *v8;
        }
        else
        {
          LODWORD(v14) = 0;
        }
        uint64_t v15 = (_DWORD *)(v13 + 4 * a2);
        goto LABEL_22;
      }
    }
    LODWORD(v14) = 0;
    uint64_t v15 = (_DWORD *)(v13 + 4 * a2);
LABEL_22:
    *uint64_t v15 = v10;
    if (v14 < v12)
    {
      uint64_t v14 = v14;
      do
        *(unsigned char *)(*((void *)this + 3) + (v10 + v14++)) = 0;
      while (v12 != v14);
    }
    return v10;
  }
  if (v11 > a3) {
    *(unsigned char *)this = 1;
  }
  return v10;
}

void TagBitsAndStrings::getTagBits(TagBitsAndStrings *this, unsigned int a2, BitArray *a3)
{
  int v5 = *(_DWORD *)(*((void *)this + 1) + 4 * a2);
  unsigned int v6 = *((_DWORD *)this + 1);
  BitArray::setSizeNoGrow(a3, 0);
  BitArray::setSize(a3, v6);
  if (v6 + 7 >= 8)
  {
    int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *((void *)this + 3);
    uint64_t v10 = *(void *)a3;
    do
    {
      *(_DWORD *)(v10 + (v8 & 0xFFFFFFFC)) |= *(unsigned __int8 *)(v9 + (v5 + v8)) << (v7 & 0x18);
      ++v8;
      v7 += 8;
    }
    while ((v6 + 7) >> 3 != v8);
  }
}

size_t TagBitsAndStrings::setTagString(TagBitsAndStrings *this, unsigned int a2, const char *__s)
{
  unint64_t v3 = __s;
  unsigned int v6 = strlen(__s);
  size_t result = TagBitsAndStrings::createIndex(this, a2, v6);
  if (v6 + 1 > 1) {
    uint64_t v8 = v6 + 1;
  }
  else {
    uint64_t v8 = 1;
  }
  unsigned int v9 = result + ((*((_DWORD *)this + 1) + 7) >> 3);
  do
  {
    char v10 = *v3++;
    *(unsigned char *)(*((void *)this + 3) + v9++) = v10;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t writeObject(DgnStream *a1, const TagBitsAndStrings *a2, unsigned int *a3)
{
  int v7 = *((_DWORD *)a2 + 1);
  writeObject((uint64_t)a1, &v7, a3);
  writeObject<unsigned int>((uint64_t)a1, (uint64_t)a2 + 8, a3);
  return writeObject<unsigned char>((uint64_t)a1, (uint64_t)a2 + 24, a3);
}

void readObject(DgnStream *a1, TagBitsAndStrings *a2, unsigned int *a3)
{
  int v18 = 0;
  readObject((uint64_t)a1, &v18, a3);
  *((_DWORD *)a2 + 1) = v18;
  if (!*((unsigned char *)a1 + 32))
  {
    readObject<unsigned int>(a1, (uint64_t)a2 + 8, a3);
    goto LABEL_27;
  }
  HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::HashNCHV((uint64_t)v15, 0, 1);
  readObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)a1, (uint64_t)v15, a3);
  if (!v16)
  {
    unsigned int v6 = 0;
    goto LABEL_10;
  }
  unsigned int v6 = *v17;
  if (*v17)
  {
LABEL_10:
    LODWORD(v7) = 0;
    goto LABEL_11;
  }
  uint64_t v7 = 0;
  do
  {
    if (v16 - 1 == v7) {
      goto LABEL_26;
    }
    unsigned int v6 = v17[++v7];
  }
  while (!v6);
LABEL_11:
  if (v7 >= v16) {
    goto LABEL_26;
  }
  while (1)
  {
    unsigned int v8 = *((_DWORD *)a2 + 4);
    unsigned int v9 = *((_DWORD *)v6 + 2);
    if (v8 <= v9)
    {
      do
      {
        if (v8 == *((_DWORD *)a2 + 5))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)a2 + 8, 1, 1);
          unsigned int v8 = *((_DWORD *)a2 + 4);
        }
        uint64_t v10 = *((void *)a2 + 1);
        *(_DWORD *)(v10 + 4 * v8) = -1;
        unsigned int v8 = *((_DWORD *)a2 + 4) + 1;
        *((_DWORD *)a2 + 4) = v8;
        unsigned int v9 = *((_DWORD *)v6 + 2);
      }
      while (v8 <= v9);
    }
    else
    {
      uint64_t v10 = *((void *)a2 + 1);
    }
    *(_DWORD *)(v10 + 4 * v9) = *((_DWORD *)v6 + 3);
    unsigned int v11 = (uint64_t *)*v6;
    if (*v6) {
      goto LABEL_25;
    }
    uint64_t v7 = (v7 + 1);
    if (v7 >= v16)
    {
      unsigned int v11 = v6;
      goto LABEL_25;
    }
    unsigned int v11 = v17[v7];
    if (!v11) {
      break;
    }
LABEL_25:
    unsigned int v6 = v11;
    if (v7 >= v16) {
      goto LABEL_26;
    }
  }
  uint64_t v12 = (uint64_t *)&v17[v7 + 1];
  uint64_t v13 = ~v7 + v16;
  while (v13)
  {
    uint64_t v14 = (uint64_t *)*v12++;
    unsigned int v11 = v14;
    LODWORD(v7) = v7 + 1;
    --v13;
    if (v14) {
      goto LABEL_25;
    }
  }
LABEL_26:
  HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV((uint64_t)v15);
LABEL_27:
  readObject<unsigned char>(a1, (uint64_t)a2 + 24, a3);
}

void sub_213F489D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t readObject<unsigned int,unsigned int,WordIdScope,unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v12 = 0;
  readObject(a1, &v12, a3);
  int v11 = 0;
  readObject(a1, &v11, a3);
  if (*(unsigned char *)(a1 + 34))
  {
    int v10 = 0;
    readObject(a1, &v10, a3);
  }
  int v10 = 0;
  readObject(a1, &v10, a3);
  uint64_t result = (uint64_t)HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::reInit(a2, v11);
  *(unsigned char *)(a2 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  if (v12)
  {
    for (unsigned int i = 0; i < v12; ++i)
    {
      int v9 = 0;
      readObject(a1, &v9, a3);
      int v8 = 0;
      readObject(a1, &v8, a3);
      uint64_t result = HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::add(a2, &v9, &v8);
    }
  }
  *(unsigned char *)(a2 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v10 != 0;
  return result;
}

{
  uint64_t result;
  unsigned int i;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;

  unsigned int v12 = 0;
  readObject(a1, &v12, a3);
  int v11 = 0;
  readObject(a1, &v11, a3);
  if (*(unsigned char *)(a1 + 34))
  {
    int v10 = 0;
    readObject(a1, &v10, a3);
  }
  int v10 = 0;
  readObject(a1, &v10, a3);
  uint64_t result = (uint64_t)Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::reInit(a2, v11);
  *(unsigned char *)(a2 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  if (v12)
  {
    for (unsigned int i = 0; i < v12; ++i)
    {
      int v9 = 0;
      readObject(a1, &v9, a3);
      int v8 = 0;
      readObject(a1, &v8, a3);
      uint64_t result = Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add(a2, &v9, &v8);
    }
  }
  *(unsigned char *)(a2 + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v10 != 0;
  return result;
}

void WordList::WordList(WordList *this, CollMgr *a2, const PronCollMgr *a3, const PhnMgr *a4)
{
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *((_OWORD *)this + 3) = 0u;
  DgnString::DgnString((WordList *)((char *)this + 88));
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *((unsigned char *)this + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  *(_DWORD *)((char *)this + 274) = 0;
  *(_OWORD *)((char *)this + 28pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  MrecTime::MrecTime((WordList *)((char *)this + 352));
  *((void *)this + 5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *((void *)this + 51) = 0;
  *(_OWORD *)((char *)this + 4DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)((char *)this + 44pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  DgnString::DgnString((WordList *)((char *)this + 464));
  DgnString::DgnString((WordList *)((char *)this + 480));
  DgnString::DgnString((WordList *)((char *)this + 496));
  *((unsigned char *)this + 512) = 0;
  *((_DWORD *)this + 137) = 0;
  *(_OWORD *)((char *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *(_OWORD *)((char *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  DgnString::DgnString((WordList *)((char *)this + 560));
  DgnString::DgnString((WordList *)((char *)this + 576));
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  DgnString::DgnString((WordList *)((char *)this + 624));
  DgnString::DgnString((WordList *)((char *)this + 640));
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  int v8 = MemChunkAlloc(0x110uLL, 0);
  *((void *)this + 3) = EnvMgr::EnvMgr((EnvMgr *)v8, 2u);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *((_DWORD *)this + 54) = 0;
  *((void *)this + 57) = 0;
  *((_DWORD *)this + 138) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 46) = this;
  *((void *)this + 47) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0;
  *((unsigned char *)this + 42pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  uint64_t v9 = *(void *)this;
  *((void *)this + 41) = WordIdCollSearchCmpFromWordId;
  *((void *)this + 42) = this;
  *((void *)this + 43) = v9;
  *((unsigned char *)this + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 1;
  *(_DWORD *)((char *)this + 274) = 131070;
}

void sub_213F48D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DgnString *a10, DgnString *a11, DgnString *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,BitArray *a23)
{
  BitArray::~BitArray(v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 608);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 592);
  BitArray::~BitArray(v28);
  BitArray::~BitArray(v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 536);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 520);
  DgnString::~DgnString(a10);
  DgnString::~DgnString(a12);
  DgnString::~DgnString(*(DgnString **)(v29 - 104));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 440);
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)(v29 - 88));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v23 + 400);
  DgnString::~DgnString(a11);
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a21);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26);
  BitArray::~BitArray(a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)(v29 - 96));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v24);
  _Unwind_Resume(a1);
}

void WordList::~WordList(EnvMgr **this)
{
  this[3] = 0;
  BitArray::~BitArray((BitArray *)(this + 80));
  BitArray::~BitArray((BitArray *)(this + 78));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 76));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 74));
  BitArray::~BitArray((BitArray *)(this + 72));
  BitArray::~BitArray((BitArray *)(this + 70));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 67));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 65));
  DgnString::~DgnString((DgnString *)(this + 62));
  DgnString::~DgnString((DgnString *)(this + 60));
  DgnString::~DgnString((DgnString *)(this + 58));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 55));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 53));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 50));
  DgnString::~DgnString((DgnString *)(this + 44));
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)(this + 34));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 32));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 30));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 28));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 25));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 23));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 21));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 19));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 17));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 15));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 13));
  BitArray::~BitArray((BitArray *)(this + 11));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 9));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4));
}

uLong WordList::computeWordIdNameChecksum(WordList *this, unsigned int a2)
{
  unsigned int v9 = a2;
  uLong v4 = computeCRC32(0, 0, 0);
  int v5 = (const char *)(*((void *)this + 28) + *(unsigned int *)(*((void *)this + 25) + 4 * a2));
  uInt v6 = strlen(v5);
  unsigned int v7 = computeCRC32(v4, (const unsigned __int8 *)v5, v6);
  return computeCRC32(v7, &v9, 1u);
}

uLong WordList::computeWordIdPronChecksum(WordList *this, unsigned int a2)
{
  unsigned int v7 = a2;
  LODWORD(v4) = computeCRC32(0, 0, 0);
  uint64_t v5 = *((void *)this + 4);
  if (*(_WORD *)(v5 + 2 * a2))
  {
    uLong v4 = computeCRC32(v4, (const unsigned __int16 *)(*((void *)this + 9) + 2 * *(unsigned int *)(*((void *)this + 6) + 4 * a2)), *(unsigned __int16 *)(v5 + 2 * a2));
    if (*((_DWORD *)this + 98) >= 2u) {
      uLong v4 = computeCRC32(v4, (const unsigned __int8 *)(*((void *)this + 53) + a2), 1u);
    }
    if (*((_DWORD *)this + 99) >= 2u) {
      LODWORD(v4) = computeCRC32(v4, (const unsigned __int8 *)(*((void *)this + 55) + a2), 1u);
    }
  }
  return computeCRC32(v4, &v7, 1u);
}

uLong WordList::computeWordChecksums(uLong this)
{
  uint64_t v1 = (WordList *)this;
  *(_DWORD *)(this + 376) = 0;
  if (*(unsigned char *)(this + 272) && *(__int16 *)(this + 274) == -2) {
    uLong v2 = this + 280;
  }
  else {
    uLong v2 = *(void *)(*(void *)(this + 296) + 524272);
  }
  if (*(_DWORD *)(v2 + 8))
  {
    unint64_t v3 = 0;
    do
    {
      this = WordList::computeWordIdNameChecksum(v1, *(_DWORD *)(*(void *)v2 + 4 * v3));
      *((_DWORD *)v1 + 94) ^= this;
      ++v3;
      unint64_t v4 = *(unsigned int *)(v2 + 8);
    }
    while (v3 < v4);
    *((_DWORD *)v1 + 95) = 0;
    if (v4)
    {
      unint64_t v5 = 0;
      do
      {
        this = WordList::computeWordIdPronChecksum(v1, *(_DWORD *)(*(void *)v2 + 4 * v5));
        *((_DWORD *)v1 + 95) ^= this;
        ++v5;
      }
      while (v5 < *(unsigned int *)(v2 + 8));
    }
  }
  else
  {
    *(_DWORD *)(this + 38pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  }
  return this;
}

void WordList::loadTwl(WordList *this, DFile *a2)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v388);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v388, (uint64_t)a2, 0x62u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v388, "TextWordList");
  v387[0] = 0;
  v387[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v388, sTWL_Versions, (uint64_t)v387, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v388, (unsigned int *)v387, v9, v10, v11, v12, v13, v14);
  FileVersiouint64_t n = DgnTextFile::getFileVersion((DgnTextFile *)v388);
  *(void *)uint64_t v386 = 0;
  unsigned int v385 = 0;
  uint64_t v383 = 0;
  uint64_t v384 = 0;
  uint64_t v381 = 0;
  uint64_t v382 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfWords", &v386[1], 1, 0, 0xF42400u);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfPronlessWords", v386, 1, 0, 0xF42400u);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfPronIds", &v385, 1, 0, 0xF42400u);
  unsigned int v380 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfFreePronIds", &v380, 1, 0, 0xF42400u);
  unsigned int v338 = v380 + v385;
  if (v385 > 0xFFFFF2 || v380 > 0xFFFFF2 || v338 > 0xFFFFF2 || v386[1] > v385 || v386[0] > v386[1]) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1050, (uint64_t)"word/wordlist", 24, (uint64_t)"%u %u %u %u", v16, v17, v385);
  }
  unsigned int v379 = 0;
  *(void *)uint64_t v377 = 0;
  *(void *)uint64_t v378 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfPronPredecessorSeedCategories", &v379, 1, 1u, 0xFAu);
  *((_DWORD *)this + 98) = v379;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "NumberOfPronSuccessorSeedCategories", &v378[1], 1, 1u, 0xFAu);
  *((_DWORD *)this + 99) = v378[1];
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "StartOfUtterancePredecessorSeedCategory", v377, 1, 0, v379);
  *((unsigned char *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v377[0];
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "EndOfUtteranceSuccessorSeedCategory", v377, 1, 0, v378[1]);
  *((unsigned char *)this + 417) = v377[0];
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "RootDeterminesPronPredecessorSeedCategory", v377, 1, 0, 1u);
  *((unsigned char *)this + 421) = v377[0] == 1;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "RootDeterminesPronSuccessorSeedCategory", v377, 1, 0, 1u);
  *((unsigned char *)this + 422) = v377[0] == 1;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "DefaultClientPronPredecessorSeedCategory", v378, 1, 0, v379 - 1);
  *((unsigned char *)this + 419) = v378[0];
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v388, "DefaultClientPronSuccessorSeedCategory", &v377[1], 1, 0, v378[1] - 1);
  int v18 = FileVersion;
  unint64_t v19 = HIDWORD(FileVersion);
  *((unsigned char *)this + 42pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v377[1];
  if (FileVersion != 19)
  {
    if (FileVersion != 20 || (HIDWORD(FileVersion) - 18) <= 0xFFFFFFFD) {
      goto LABEL_13;
    }
LABEL_12:
    v375[0] = 0;
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v388, "WordTagsVersion", v375, 1, -16000000, 16000000);
    int v20 = v375[0];
    *((_DWORD *)this + 114) = v375[0];
    *((_DWORD *)this + 115) = v20;
    goto LABEL_14;
  }
  if (HIDWORD(FileVersion) == 15) {
    goto LABEL_12;
  }
LABEL_13:
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v388, "RequiredWordTagsVersion", (int *)this + 114, 1, -16000000, 16000000);
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v388, "OptionalWordTagsVersion", (int *)this + 115, 1, -16000000, 16000000);
LABEL_14:
  DgnTextFile::getHeaderField((DgnTextFile *)v388, "RequiredTags", (WordList *)((char *)this + 464), 1);
  splitTagsString((uint64_t)this + 464, (uint64_t)&v383);
  *((_DWORD *)this + 138) = v384;
  DgnTextFile::getHeaderField((DgnTextFile *)v388, "OptionalTags", (WordList *)((char *)this + 480), 1);
  splitTagsString((uint64_t)this + 480, (uint64_t)&v381);
  if (v382) {
    *((_DWORD *)this + 129) = v382;
  }
  DgnTextFile::getHeaderField((DgnTextFile *)v388, "NewWordTag", (WordList *)((char *)this + 496), 1);
  int v23 = *((_DWORD *)this + 138);
  if ((v23 != 0) == *((_DWORD *)this + 126) < 2u)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1142, (uint64_t)"word/wordlist", 58, (uint64_t)"%s", v21, v22, (char)&unk_2140A60F6);
    int v23 = *((_DWORD *)this + 138);
  }
  if (v23) {
    tagStringToTagBits((uint64_t)this + 496, (unsigned int *)&v383, (WordList *)((char *)this + 560));
  }
  DgnString::DgnString((DgnString *)v375);
  DgnTextFile::getHeaderField((DgnTextFile *)v388, "AllowedCollations", (DgnString *)v375, 1);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v388, v24, v25, v26, v27, v28, v29, v30);
  WordList::setSizeForWordListLoad(this, v338, *((_DWORD *)this + 98), *((_DWORD *)this + 99));
  uint64_t v373 = 0;
  uint64_t v374 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v388, (uint64_t)&v373);
  v372[0] = 0;
  v372[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v388, (unint64_t)v372);
  uint64_t v346 = this;
  if (!v374)
  {
    unsigned int v340 = -1;
    unsigned int v341 = -1;
    unsigned int v342 = -1;
    unsigned int v343 = -1;
    unsigned int v344 = -1;
    unsigned int v345 = -1;
LABEL_58:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1237, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"Type");
    unsigned int v347 = -1;
    goto LABEL_59;
  }
  unint64_t v33 = HIDWORD(FileVersion);
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  unsigned int v340 = -1;
  unsigned int v341 = -1;
  unsigned int v342 = -1;
  unsigned int v343 = -1;
  unsigned int v344 = -1;
  unsigned int v345 = -1;
  unsigned int v347 = -1;
  do
  {
    if (*(_DWORD *)(v373 + v34 + 8)) {
      uint64_t v36 = *(const char **)(v373 + v34);
    }
    else {
      uint64_t v36 = (const char *)&unk_2140A60F6;
    }
    if (!strcmp(v36, "Type"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1182, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      }
      unsigned int v347 = v35;
    }
    else if (!strcmp(v36, "WordName"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1190, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      }
      unsigned int v345 = v35;
    }
    else if (!strcmp(v36, "UnsValue1"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35) != 3) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1198, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      }
      unsigned int v344 = v35;
    }
    else if (!strcmp(v36, "UnsValue2"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35) != 3) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1206, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      }
      unsigned int v343 = v35;
    }
    else if (!strcmp(v36, "UnsValue3"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35) != 3) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1214, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      }
      unsigned int v342 = v35;
    }
    else if (!strcmp(v36, "StrValue1"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1222, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      }
      unsigned int v341 = v35;
    }
    else if (!strcmp(v36, "StrValue2"))
    {
      if (*(_DWORD *)(v372[0] + 4 * v35)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1230, (uint64_t)"word/wordlist", 59, (uint64_t)"%.500s %.500s", v31, v32, (char)v36);
      }
      unsigned int v340 = v35;
    }
    else
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1235, (uint64_t)"word/wordlist", 12, (uint64_t)"%.500s %u %u", v31, v32, (char)v36);
    }
    ++v35;
    v34 += 16;
  }
  while (v35 < v374);
  LODWORD(v19) = v33;
  if (v347 == -1) {
    goto LABEL_58;
  }
LABEL_59:
  if (v345 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1238, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"WordName");
  }
  if (v344 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1239, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"UnsValue1");
  }
  if (v343 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1240, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"UnsValue2");
  }
  if (v342 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1241, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"UnsValue3");
  }
  if (v341 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1242, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"StrValue1");
  }
  if (v340 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1243, (uint64_t)"word/wordlist", 15, (uint64_t)"%.500s", v31, v32, (char)"StrValue2");
  }
  if (!DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388)) {
    goto LABEL_278;
  }
  LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
  int v334 = v19;
  int v335 = v18;
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) != 0 || strcmp(LineFieldString, "SeedTable")) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1251, (uint64_t)"word/wordlist", 43, (uint64_t)"%u %.500s", v38, v39, v389);
  }
  uint64_t v40 = (void *)((char *)this + 400);
  uint64_t v41 = *((unsigned int *)this + 98);
  unsigned int v42 = *((_DWORD *)this + 103);
  if (v41 > v42) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 400, v41 - v42, 0);
  }
  uint64_t v43 = *((unsigned int *)this + 102);
  if (v43 <= v41)
  {
    if (v43 < v41)
    {
      uint64_t v46 = v41 - v43;
      uint64_t v47 = 16 * v43;
      do
      {
        uint64_t v48 = (void *)(*v40 + v47);
        void *v48 = 0;
        v48[1] = 0;
        v47 += 16;
        --v46;
      }
      while (v46);
    }
  }
  else if ((int)v43 > (int)v41)
  {
    uint64_t v44 = (int)v43;
    uint64_t v45 = 16 * (int)v43 - 16;
    do
    {
      --v44;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v40 + v45);
      v45 -= 16;
    }
    while (v44 > (int)v41);
  }
  *((_DWORD *)this + 102) = v41;
  unsigned int v49 = *((_DWORD *)this + 98);
  if (!v49) {
    goto LABEL_113;
  }
  uint64_t v50 = 0;
  for (unint64_t i = 0; i < v49; ++i)
  {
    uint64_t v52 = *((void *)this + 50) + v50;
    unint64_t v53 = *((unsigned int *)this + 99);
    if (*(_DWORD *)(v52 + 12) < v53)
    {
      uint64_t v370 = 0;
      *(_DWORD *)(v52 + 12) = realloc_array(*(void **)v52, &v370, v53, *(unsigned int *)(v52 + 8), *(unsigned int *)(v52 + 8), 1);
      *(void *)uint64_t v52 = v370;
      unsigned int v49 = *((_DWORD *)this + 98);
    }
    *(_DWORD *)(v52 + 8) = v53;
    v50 += 16;
  }
  if (!v49)
  {
LABEL_113:
    char v55 = 0;
LABEL_114:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1289, (uint64_t)"word/wordlist", 60, (uint64_t)"%s", v38, v39, (char)&errStr_word_wordlist_E_SEED_TABLE_NOSEED);
    goto LABEL_115;
  }
  unsigned int v54 = 0;
  char v55 = 0;
  char v56 = 0;
  unsigned int v57 = *((_DWORD *)this + 99);
  do
  {
    if (v57)
    {
      for (unsigned int j = 0; j < v57; ++j)
      {
        uint64_t v59 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
        if (strcmp(v59, "SeedTable")) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1266, (uint64_t)"word/wordlist", 61, (uint64_t)"%s", v60, v61, (char)&errStr_word_wordlist_E_INCOMPLETE_SEEDTABLE);
        }
        DgnString::DgnString((DgnString *)&v370);
        DgnString::DgnString((DgnString *)&v368);
        DgnString::DgnString((DgnString *)&v366);
        DgnString::DgnString((DgnString *)&v364);
        uint64_t v62 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
        DgnString::operator=((DgnString *)&v370, v62);
        uint64_t v63 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
        DgnString::operator=((DgnString *)&v368, v63);
        unsigned int LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v64, v65, v66, v67, v68, v69);
        unsigned int v77 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v71, v72, v73, v74, v75, v76);
        unsigned int v84 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v78, v79, v80, v81, v82, v83);
        uint64_t v85 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
        DgnString::operator=((DgnString *)&v366, v85);
        uint64_t v86 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
        DgnString::operator=((DgnString *)&v364, v86);
        char v89 = v389;
        if (v369 >= 2) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1270, (uint64_t)"word/wordlist", 44, (uint64_t)"%u", v87, v88, v389);
        }
        if (LineFieldUnsigned != v54) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1272, (uint64_t)"word/wordlist", 62, (uint64_t)"%u", v87, v88, v89);
        }
        if (j != v77) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1274, (uint64_t)"word/wordlist", 63, (uint64_t)"%u", v87, v88, v89);
        }
        if (v84 >= 2) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1276, (uint64_t)"word/wordlist", 48, (uint64_t)"%u", v87, v88, v89);
        }
        if (v367 >= 2) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1278, (uint64_t)"word/wordlist", 49, (uint64_t)"%u", v87, v88, v89);
        }
        if (v365 >= 2) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1280, (uint64_t)"word/wordlist", 50, (uint64_t)"%u", v87, v88, v89);
        }
        *(unsigned char *)(*(void *)(*((void *)this + 50) + 16 * LineFieldUnsigned) + v77) = v84 == 1;
        DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388);
        v55 |= v84 == 0;
        v56 |= v84 == 1;
        DgnString::~DgnString((DgnString *)&v364);
        DgnString::~DgnString((DgnString *)&v366);
        DgnString::~DgnString((DgnString *)&v368);
        DgnString::~DgnString((DgnString *)&v370);
        unsigned int v57 = *((_DWORD *)this + 99);
      }
      unsigned int v49 = *((_DWORD *)this + 98);
    }
    ++v54;
  }
  while (v54 < v49);
  if ((v56 & 1) == 0) {
    goto LABEL_114;
  }
LABEL_115:
  *((unsigned char *)this + 418) = v55 & 1;
  DgnString::DgnString((DgnString *)&v370);
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) == 0)
  {
    int v92 = 0;
    int v337 = 0;
    BOOL v336 = 0;
    unsigned int v339 = 0xFFFFFF;
    int v93 = 1;
    while (1)
    {
      DgnString::DgnString((DgnString *)&v368);
      DgnString::DgnString((DgnString *)&v366);
      DgnString::DgnString((DgnString *)&v364);
      DgnString::DgnString((DgnString *)&v362);
      double v94 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::operator=((DgnString *)&v368, v94);
      int v95 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
      DgnString::operator=((DgnString *)&v366, v95);
      uint64_t v102 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v96, v97, v98, v99, v100, v101);
      unsigned int v109 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v103, v104, v105, v106, v107, v108);
      unsigned int v116 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v110, v111, v112, v113, v114, v115);
      uint64_t v117 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
      DgnString::operator=((DgnString *)&v364, v117);
      uint64_t v118 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
      DgnString::operator=((DgnString *)&v362, v118);
      char v121 = v389;
      if (v109 >= *((_DWORD *)v346 + 98)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1310, (uint64_t)"word/wordlist", 64, (uint64_t)"%u %u", v119, v120, v109);
      }
      if (v116 >= *((_DWORD *)v346 + 99)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1313, (uint64_t)"word/wordlist", 65, (uint64_t)"%u %u", v119, v120, v109);
      }
      unsigned int v122 = v365;
      uint64_t v123 = v364;
      if (v365) {
        uint64_t v124 = v364;
      }
      else {
        uint64_t v124 = (const char *)&unk_2140A60F6;
      }
      if (strcmp(v124, "F") && strcmp(v124, "U"))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1320, (uint64_t)"word/wordlist", 66, (uint64_t)"%u %.500s", v125, v126, v121);
        unsigned int v122 = v365;
        uint64_t v123 = v364;
      }
      if (v122) {
        uint64_t v127 = v123;
      }
      else {
        uint64_t v127 = (const char *)&unk_2140A60F6;
      }
      int v130 = strcmp(v127, "F");
      if (v367 <= 1) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1331, (uint64_t)"word/wordlist", 55, (uint64_t)"%d", v128, v129, v121);
      }
      if (v102 >= v338) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1336, (uint64_t)"word/wordlist", 5, (uint64_t)"%d %.500s %u", v128, v129, v121);
      }
      if (*((_DWORD *)v346 + 97) > v102 && *(unsigned char *)(*((void *)v346 + 13) + v102)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1341, (uint64_t)"word/wordlist", 25, (uint64_t)"%d %.500s %u", v128, v129, v121);
      }
      DgnString::DgnString((DgnString *)&v360, (const DgnString *)&v362);
      uint64_t v358 = 0;
      uint64_t v359 = 0;
      if (v361) {
        unsigned int v131 = v360;
      }
      else {
        unsigned int v131 = (char *)&unk_2140A60F6;
      }
      WordList::strToPhonemes((uint64_t)v346, v131, (uint64_t)&v358);
      WordList::checkNewTwlWordBoundaryPhonemes((uint64_t)v346, (uint64_t)&v358, v121, (uint64_t)&v366, (uint64_t)&v360, v132, v133, v134);
      if (v359 >= 0x4000) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1355, (uint64_t)"word/wordlist", 7, (uint64_t)"%d %.500s %d", v135, v136, v121);
      }
      if (v367) {
        long long v137 = v366;
      }
      else {
        long long v137 = (const char *)&unk_2140A60F6;
      }
      if (v371) {
        unint64_t v138 = (const char *)v370;
      }
      else {
        unint64_t v138 = (const char *)&unk_2140A60F6;
      }
      if (!strcmp(v137, v138))
      {
        if (++v93 >= 0xFF) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1379, (uint64_t)"word/wordlist", 32, (uint64_t)"%d %.500s %d", v139, v140, v121);
        }
        int v141 = v359;
        if (v336 || v359 == 0)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1382, (uint64_t)"word/wordlist", 17, (uint64_t)"%d %.500s", v139, v140, v121);
          int v141 = v359;
          if (!v359) {
            goto LABEL_167;
          }
        }
        else
        {
          BOOL v336 = 0;
        }
      }
      else
      {
        DgnString::operator=((DgnString *)&v370, (DgnString *)&v366);
        int v141 = v359;
        BOOL v336 = v359 == 0;
        if (v359) {
          int v142 = v337;
        }
        else {
          int v142 = v337 + 1;
        }
        int v337 = v142;
        int v93 = 1;
        unsigned int v339 = v102;
        if (!v359) {
          goto LABEL_167;
        }
      }
      if (*v358)
      {
        int v143 = v141 - 1;
        if (!v358[v143] && v143) {
LABEL_166:
        }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1394, (uint64_t)"word/wordlist", 37, (uint64_t)"%u", v139, v140, v102);
      }
      else if (v141 != 1)
      {
        goto LABEL_166;
      }
LABEL_167:
      if (v93 == 1)
      {
        uint64_t v144 = 0xFFFFFFFFLL;
        unint64_t v145 = v346;
        double v146 = (unsigned int *)v339;
      }
      else
      {
        unint64_t v145 = v346;
        double v146 = (unsigned int *)v339;
        uint64_t v144 = *(unsigned int *)(*((void *)v346 + 25) + 4 * v339);
      }
      if (v367) {
        double v147 = (CharInfo *)v366;
      }
      else {
        double v147 = (CharInfo *)&unk_2140A60F6;
      }
      unsigned int v148 = WordList::addWordInternal((uint64_t)v145, 0, v102, v146, v144, v147, v93, (uint64_t)&v358, 0, 0);
      this = v145;
      WordList::setPronPredecessorSeedCategory(v145, v148, v109, v149, v150, v151, v152, v153);
      WordList::setPronSuccessorSeedCategory(v145, v148, v116, v154, v155, v156, v157, v158);
      int v159 = 1 << v148;
      unsigned int v160 = v148 >> 5;
      uint64_t v161 = *((void *)v145 + 80);
      if (v130) {
        int v162 = *(_DWORD *)(v161 + 4 * v160) & ~v159;
      }
      else {
        int v162 = *(_DWORD *)(v161 + 4 * v160) | v159;
      }
      *(_DWORD *)(v161 + 4 * v16pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v162;
      if (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388))
      {
        double v163 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
        DgnString::DgnString((DgnString *)&v356, v163);
        if (v357) {
          double v164 = v356;
        }
        else {
          double v164 = (char *)&unk_2140A60F6;
        }
        BOOL v165 = strcmp(v164, "Pron") != 0;
        DgnString::~DgnString((DgnString *)&v356);
      }
      else
      {
        BOOL v165 = 1;
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v358);
      DgnString::~DgnString((DgnString *)&v360);
      DgnString::~DgnString((DgnString *)&v362);
      DgnString::~DgnString((DgnString *)&v364);
      DgnString::~DgnString((DgnString *)&v366);
      DgnString::~DgnString((DgnString *)&v368);
      ++v92;
      if (v165) {
        goto LABEL_183;
      }
    }
  }
  int v337 = 0;
  int v92 = 0;
LABEL_183:
  if (v92 != v385) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1429, (uint64_t)"word/wordlist", 1, (uint64_t)"%d %d", v90, v91, v385);
  }
  if (v335 != 19)
  {
    if (v335 == 20 && v334 == 16) {
      goto LABEL_192;
    }
LABEL_190:
    if (v337 != v386[0]) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1434, (uint64_t)"word/wordlist", 29, (uint64_t)"%u %u", v90, v91, v386[0]);
    }
    goto LABEL_192;
  }
  if (v334 != 15) {
    goto LABEL_190;
  }
LABEL_192:
  WordList::setupWordIdsForWordListLoad((uint64_t)this);
  BitArray::BitArray((BitArray *)&v368, *((_DWORD *)this + 97));
  DgnString::DgnString((DgnString *)&v366);
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) == 0)
  {
    while (1)
    {
      DgnString::DgnString((DgnString *)&v364);
      DgnString::DgnString((DgnString *)&v362);
      DgnString::DgnString((DgnString *)&v360);
      DgnString::DgnString((DgnString *)&v358);
      double v168 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::operator=((DgnString *)&v364, v168);
      int v169 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
      DgnString::operator=((DgnString *)&v362, v169);
      int v176 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v170, v171, v172, v173, v174, v175);
      int v183 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v177, v178, v179, v180, v181, v182);
      int v190 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v184, v185, v186, v187, v188, v189);
      BOOL v191 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
      DgnString::operator=((DgnString *)&v360, v191);
      double v192 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
      DgnString::operator=((DgnString *)&v358, v192);
      if (v183) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1443, (uint64_t)"word/wordlist", 46, (uint64_t)"%u", v193, v194, v389);
      }
      if (v190) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1445, (uint64_t)"word/wordlist", 47, (uint64_t)"%u", v193, v194, v389);
      }
      char v195 = v389;
      if (v363 > 1
        || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1449, (uint64_t)"word/wordlist", 55, (uint64_t)"%d", v193, v194, v389), v363))
      {
        char v196 = v362;
      }
      else
      {
        char v196 = (char *)&unk_2140A60F6;
      }
      unsigned int v199 = WordList::lookupWord(v346, v196);
      if (v199 == 0xFFFFFF) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1452, (uint64_t)"word/wordlist", 52, (uint64_t)"%d %.500s", v197, v198, v195);
      }
      uint64_t v200 = v368;
      uint64_t v201 = v199 >> 5;
      int v202 = *(_DWORD *)(v368 + 4 * v201);
      int v203 = 1 << v199;
      if ((v202 & (1 << v199)) != 0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1454, (uint64_t)"word/wordlist", 53, (uint64_t)"%d %.500s %.500s", v197, v198, v195);
        uint64_t v200 = v368;
        int v202 = *(_DWORD *)(v368 + 4 * v201);
      }
      *(_DWORD *)(v200 + 4 * v201) = v202 | v203;
      if (v176) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1458, (uint64_t)"word/wordlist", 45, (uint64_t)"%u", v197, v198, v195);
      }
      uint64_t v204 = v361 ? v360 : (const char *)&unk_2140A60F6;
      if (!strcmp(v204, "F"))
      {
        uint64_t v207 = *((void *)v346 + 78);
        int v208 = *(_DWORD *)(v207 + 4 * v201) | v203;
      }
      else
      {
        if (strcmp(v204, "U")) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1467, (uint64_t)"word/wordlist", 67, (uint64_t)"%u %.500s", v205, v206, v195);
        }
        uint64_t v207 = *((void *)v346 + 78);
        int v208 = *(_DWORD *)(v207 + 4 * v201) & ~v203;
      }
      *(_DWORD *)(v207 + 4 * v201) = v208;
      DgnString::DgnString((DgnString *)&v356, (const DgnString *)&v358);
      int v211 = *((_DWORD *)v346 + 138);
      if ((v211 != 0) == v357 < 2)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1474, (uint64_t)"word/wordlist", 21, (uint64_t)"%d %.500s", v209, v210, v195);
        int v211 = *((_DWORD *)v346 + 138);
      }
      if (v211)
      {
        tagStringToTagBits((uint64_t)&v356, (unsigned int *)&v383, (BitArray *)&v366);
        BitArray::setBitsInRange((void *)v346 + 72, (const BitArray *)&v366, *((_DWORD *)v346 + 138) * v199, *((_DWORD *)v346 + 138) * v199 + *((_DWORD *)v346 + 138));
      }
      if (!DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388)) {
        break;
      }
      uint64_t v212 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::DgnString((DgnString *)&v354, v212);
      if (v355) {
        uint64_t v213 = v354;
      }
      else {
        uint64_t v213 = (const char *)&unk_2140A60F6;
      }
      int v214 = strcmp(v213, "ReqTags");
      DgnString::~DgnString((DgnString *)&v354);
      DgnString::~DgnString((DgnString *)&v356);
      DgnString::~DgnString((DgnString *)&v358);
      DgnString::~DgnString((DgnString *)&v360);
      DgnString::~DgnString((DgnString *)&v362);
      DgnString::~DgnString((DgnString *)&v364);
      if (v214) {
        goto LABEL_226;
      }
    }
    DgnString::~DgnString((DgnString *)&v356);
    DgnString::~DgnString((DgnString *)&v358);
    DgnString::~DgnString((DgnString *)&v360);
    DgnString::~DgnString((DgnString *)&v362);
    DgnString::~DgnString((DgnString *)&v364);
  }
LABEL_226:
  unsigned int v215 = *((_DWORD *)v346 + 97);
  if (v215)
  {
    for (unint64_t k = 0; k < v215; ++k)
    {
      if (*(unsigned char *)(*((void *)v346 + 13) + k)
        && k == *(_DWORD *)(*((void *)v346 + 32) + 4 * k)
        && ((*(_DWORD *)(v368 + 4 * (k >> 5)) >> k) & 1) == 0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1504, (uint64_t)"word/wordlist", 54, (uint64_t)"%d %.500s %.500s", v166, v167, v389);
        unsigned int v215 = *((_DWORD *)v346 + 97);
      }
    }
  }
  BitArray::BitArray((BitArray *)&v364, v215);
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) == 0)
  {
    uint64_t v217 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
    if (!strcmp(v217, "OptTags"))
    {
      int v292 = (WordList *)((char *)v346 + 512);
      do
      {
        DgnString::DgnString((DgnString *)&v362);
        DgnString::DgnString((DgnString *)&v360);
        DgnString::DgnString((DgnString *)&v358);
        DgnString::DgnString((DgnString *)&v356);
        unsigned int v293 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
        DgnString::operator=((DgnString *)&v362, v293);
        uint64_t v294 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
        DgnString::operator=((DgnString *)&v360, v294);
        int v301 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v295, v296, v297, v298, v299, v300);
        int v308 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v302, v303, v304, v305, v306, v307);
        int v315 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v309, v310, v311, v312, v313, v314);
        uint64_t v316 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
        DgnString::operator=((DgnString *)&v358, v316);
        uint64_t v317 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
        DgnString::operator=((DgnString *)&v356, v317);
        if (v301) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1514, (uint64_t)"word/wordlist", 45, (uint64_t)"%u", v318, v319, v389);
        }
        if (v308) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1516, (uint64_t)"word/wordlist", 46, (uint64_t)"%u", v318, v319, v389);
        }
        if (v315) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1518, (uint64_t)"word/wordlist", 47, (uint64_t)"%u", v318, v319, v389);
        }
        char v320 = v389;
        if (v361 > 1
          || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1521, (uint64_t)"word/wordlist", 55, (uint64_t)"%d", v318, v319, v389), v361))
        {
          uint64_t v321 = v360;
        }
        else
        {
          uint64_t v321 = (char *)&unk_2140A60F6;
        }
        unsigned int v324 = WordList::lookupWord(v346, v321);
        if (v324 == 0xFFFFFF) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1524, (uint64_t)"word/wordlist", 52, (uint64_t)"%d %.500s", v322, v323, v320);
        }
        uint64_t v325 = v364;
        uint64_t v326 = v324 >> 5;
        int v327 = *(_DWORD *)&v364[4 * v326];
        if ((v327 & (1 << v324)) != 0)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1526, (uint64_t)"word/wordlist", 53, (uint64_t)"%d %.500s %.500s", v322, v323, v320);
          uint64_t v325 = v364;
          int v327 = *(_DWORD *)&v364[4 * v326];
        }
        *(_DWORD *)&v325[4 * v326] = v327 | (1 << v324);
        DgnString::DgnString((DgnString *)&v354, (const DgnString *)&v358);
        DgnString::DgnString((DgnString *)&__s, (const DgnString *)&v356);
        unsigned int v330 = v355;
        if (!*((_DWORD *)v346 + 129) && v355 >= 2)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1532, (uint64_t)"word/wordlist", 6, (uint64_t)"%d %.500s", v328, v329, v320);
          unsigned int v330 = v355;
        }
        if (v330 <= 1 && v353 >= 2)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1535, (uint64_t)"word/wordlist", 30, (uint64_t)"%d %.500s", v328, v329, v320);
          unsigned int v330 = v355;
        }
        if (*((_DWORD *)v346 + 129))
        {
          if (v330 >= 2)
          {
            tagStringToTagBits((uint64_t)&v354, (unsigned int *)&v381, (BitArray *)&v366);
            TagBitsAndStrings::setTagBits(v292, v324, (const BitArray *)&v366);
            if (v353 >= 2) {
              TagBitsAndStrings::setTagString(v292, v324, __s);
            }
          }
        }
        if (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388))
        {
          uint64_t v331 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
          DgnString::DgnString((DgnString *)&v350, v331);
          if (v351) {
            uint64_t v332 = v350;
          }
          else {
            uint64_t v332 = (unsigned __int8 *)&unk_2140A60F6;
          }
          BOOL v333 = strcmp((const char *)v332, "OptTags") != 0;
          DgnString::~DgnString((DgnString *)&v350);
        }
        else
        {
          BOOL v333 = 1;
        }
        DgnString::~DgnString((DgnString *)&__s);
        DgnString::~DgnString((DgnString *)&v354);
        DgnString::~DgnString((DgnString *)&v356);
        DgnString::~DgnString((DgnString *)&v358);
        DgnString::~DgnString((DgnString *)&v360);
        DgnString::~DgnString((DgnString *)&v362);
      }
      while (!v333);
    }
  }
  BitArray::BitArray((BitArray *)&v362, *((_DWORD *)v346 + 97));
  if (DgnTextFileParser::atEof((DgnTextFileParser *)v388))
  {
    BOOL v218 = 1;
  }
  else
  {
    uint64_t v219 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
    BOOL v218 = strcmp(v219, "Env") != 0;
  }
  DgnString::DgnString((DgnString *)&v360);
  if (!v218)
  {
    uint64_t v220 = (EnvMgr *)*((void *)v346 + 3);
    while (1)
    {
      DgnString::DgnString((DgnString *)&v358);
      DgnString::DgnString((DgnString *)&v356);
      DgnString::DgnString((DgnString *)&v354);
      DgnString::DgnString((DgnString *)&__s);
      uint64_t v221 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::operator=((DgnString *)&v358, v221);
      uint64_t v222 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v345);
      DgnString::operator=((DgnString *)&v356, v222);
      int v229 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v344, v223, v224, v225, v226, v227, v228);
      int v236 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v343, v230, v231, v232, v233, v234, v235);
      int v243 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v388, v342, v237, v238, v239, v240, v241, v242);
      uint64_t v244 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v341);
      DgnString::operator=((DgnString *)&v354, v244);
      unsigned int v245 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v340);
      DgnString::operator=((DgnString *)&__s, v245);
      if (v229) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1570, (uint64_t)"word/wordlist", 45, (uint64_t)"%u", v246, v247, v389);
      }
      if (v236) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1572, (uint64_t)"word/wordlist", 46, (uint64_t)"%u", v246, v247, v389);
      }
      if (v243) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1574, (uint64_t)"word/wordlist", 47, (uint64_t)"%u", v246, v247, v389);
      }
      char v248 = v389;
      if (v357 > 1
        || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1577, (uint64_t)"word/wordlist", 55, (uint64_t)"%d", v246, v247, v389), v357))
      {
        uint64_t v249 = v356;
      }
      else
      {
        uint64_t v249 = (char *)&unk_2140A60F6;
      }
      uint64_t v252 = WordList::lookupWord(v346, v249);
      if (v252 == 0xFFFFFF) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1580, (uint64_t)"word/wordlist", 52, (uint64_t)"%d %.500s", v250, v251, v248);
      }
      uint64_t v253 = v362;
      uint64_t v254 = v252 >> 5;
      int v255 = *(_DWORD *)&v362[4 * v254];
      if ((v255 & (1 << v252)) != 0)
      {
        uint64_t v256 = v357 ? v356 : (const char *)&unk_2140A60F6;
        uint64_t v257 = v361 ? v360 : (const char *)&unk_2140A60F6;
        if (strcmp(v256, v257))
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1583, (uint64_t)"word/wordlist", 53, (uint64_t)"%d %.500s %.500s", v258, v259, v248);
          uint64_t v253 = v362;
          int v255 = *(_DWORD *)&v362[4 * v254];
        }
      }
      *(_DWORD *)&v253[4 * v254] = v255 | (1 << v252);
      DgnString::operator=((DgnString *)&v360, (DgnString *)&v356);
      unsigned int ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v220, v252, 1, v260, v261, v262, v263, v264);
      if (v355 <= 1) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1590, (uint64_t)"word/wordlist", 56, (uint64_t)"%u", v265, v266, v389);
      }
      if (v353 <= 1) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1592, (uint64_t)"word/wordlist", 57, (uint64_t)"%u", v265, v266, v389);
      }
      __int16 v350 = 0;
      unsigned int v351 = 0;
      DgnTextFile::convertFromEnvValueFormat((uint64_t)&__s, (uint64_t **)&v350);
      uint64_t v270 = v355 ? (EnvMgr *)v354 : (EnvMgr *)&unk_2140A60F6;
      EnvMgr::setData(v220, ItemEnvIdMaybeNew, v270, v350, v351, 1, v268, v269);
      if (!DgnTextFileParser::parseNextLine((DgnTextFileParser *)v388)) {
        break;
      }
      uint64_t v271 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v388, v347);
      DgnString::DgnString((DgnString *)&v348, v271);
      if (v349) {
        unint64_t v272 = v348;
      }
      else {
        unint64_t v272 = (const char *)&unk_2140A60F6;
      }
      int v273 = strcmp(v272, "Env");
      DgnString::~DgnString((DgnString *)&v348);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v350);
      DgnString::~DgnString((DgnString *)&__s);
      DgnString::~DgnString((DgnString *)&v354);
      DgnString::~DgnString((DgnString *)&v356);
      DgnString::~DgnString((DgnString *)&v358);
      if (v273) {
        goto LABEL_275;
      }
    }
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v350);
    DgnString::~DgnString((DgnString *)&__s);
    DgnString::~DgnString((DgnString *)&v354);
    DgnString::~DgnString((DgnString *)&v356);
    DgnString::~DgnString((DgnString *)&v358);
  }
LABEL_275:
  if ((DgnTextFileParser::atEof((DgnTextFileParser *)v388) & 1) == 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1609, (uint64_t)"word/wordlist", 51, (uint64_t)"%u", v274, v275, v389);
  }
  DgnString::~DgnString((DgnString *)&v360);
  BitArray::~BitArray((BitArray *)&v362);
  BitArray::~BitArray((BitArray *)&v364);
  BitArray::~BitArray((BitArray *)&v366);
  BitArray::~BitArray((BitArray *)&v368);
  DgnString::~DgnString((DgnString *)&v370);
  this = v346;
LABEL_278:
  PrefiltererWordIdPronCollArray::removeAll((uint64_t)this + 352);
  WordIdPronCollArray::addArray((uint64_t)this + 352, (uint64_t)this + 280);
  uint64_t v370 = 0;
  uint64_t v371 = 0;
  if (v376) {
    uint64_t v276 = *(unsigned __int8 **)v375;
  }
  else {
    uint64_t v276 = (unsigned __int8 *)&unk_2140A60F6;
  }
  DgnSplitStringIntoTokens(v276, ",", (uint64_t)&v370, 0);
  uint64_t v368 = 0;
  uint64_t v369 = 0;
  if (v371)
  {
    uint64_t v277 = 0;
    unint64_t v278 = 0;
    do
    {
      if (*(_DWORD *)((char *)v370 + v277 + 8)) {
        uint64_t v279 = *(const char **)((char *)v370 + v277);
      }
      else {
        uint64_t v279 = (const char *)&unk_2140A60F6;
      }
      if (!strcmp(v279, "_IDENTITY"))
      {
        __int16 v289 = -2;
      }
      else
      {
        int v286 = CollMgr::lookupCollation(*(CollMgr **)this, v279, v280, v281, v282, v283, v284, v285);
        __int16 v289 = v286;
        if (!v286)
        {
          if (*(_DWORD *)((char *)v370 + v277 + 8)) {
            uint64_t v290 = *(void **)((char *)v370 + v277);
          }
          else {
            uint64_t v290 = &unk_2140A60F6;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1626, (uint64_t)"word/wordlist", 36, (uint64_t)"%.500s", v287, v288, (char)v290);
          __int16 v289 = 0;
        }
      }
      unsigned int v291 = v369;
      if (v369 == HIDWORD(v369))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v368, 1, 1);
        unsigned int v291 = v369;
      }
      *(_WORD *)(v368 + 2 * v291) = v289;
      LODWORD(v369) = v291 + 1;
      ++v278;
      v277 += 16;
    }
    while (v278 < v371);
  }
  DgnCollArray<unsigned int,WordList>::setColls((uint64_t)this + 272, (uint64_t)&v368);
  WordList::computeWordChecksums((uLong)this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v368);
  DgnArray<DgnString>::releaseAll((uint64_t)&v370);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v372);
  DgnArray<DgnString>::releaseAll((uint64_t)&v373);
  DgnString::~DgnString((DgnString *)v375);
  DgnArray<DgnString>::releaseAll((uint64_t)&v381);
  DgnArray<DgnString>::releaseAll((uint64_t)&v383);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v387);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v388);
}

void sub_213F4B6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  BitArray::~BitArray((BitArray *)&a38);
  BitArray::~BitArray((BitArray *)&a40);
  BitArray::~BitArray((BitArray *)&a42);
  BitArray::~BitArray((BitArray *)&a44);
  DgnString::~DgnString((DgnString *)&a46);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a48);
  DgnArray<DgnString>::releaseAll((uint64_t)&a50);
  DgnString::~DgnString((DgnString *)&a52);
  DgnArray<DgnString>::releaseAll((uint64_t)&a57);
  DgnArray<DgnString>::releaseAll((uint64_t)&a59);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a63);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)&a65);
  _Unwind_Resume(a1);
}

void splitTagsString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 16 * v4 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(void *)a2 + v5));
      v5 -= 16;
    }
    while (v5 != -16);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = 0;
  }
  if (v6 >= 2 && strcmp(*(const char **)a1, "0"))
  {
    DgnString::DgnString((DgnString *)&v18);
    unint64_t v10 = 0;
    do
    {
      int v11 = *(char *)(*(void *)a1 + v10);
      if ((v11 - 65) < 0x1A) {
        goto LABEL_35;
      }
      if (v11 == 95 || (v11 - 97) < 0x1Au) {
        goto LABEL_35;
      }
      if (v10) {
        BOOL v13 = (v11 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 1;
      }
      char v14 = !v13;
      if (v11 != 44 && (v14 & 1) == 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 376, (uint64_t)"word/wordlist", 18, (uint64_t)"%c %.500s", v8, v9, *(unsigned char *)(*(void *)a1 + v10));
      }
      if (v11 == 44)
      {
        ++v10;
        if (v19 < 2 || v10 == v7)
        {
          if (*(_DWORD *)(a1 + 8)) {
            uint64_t v15 = *(void **)a1;
          }
          else {
            uint64_t v15 = &unk_2140A60F6;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 382, (uint64_t)"word/wordlist", 19, (uint64_t)"%.500s", v8, v9, (char)v15);
        }
        uint64_t v16 = *(unsigned int *)(a2 + 8);
        if (v16 == *(_DWORD *)(a2 + 12))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(a2, 1, 1);
          uint64_t v16 = *(unsigned int *)(a2 + 8);
        }
        DgnString::DgnString((DgnString *)(*(void *)a2 + 16 * v16), (const DgnString *)&v18);
        ++*(_DWORD *)(a2 + 8);
        unsigned int v19 = 0;
      }
      else
      {
LABEL_35:
        DgnString::operator+=(&v18, v11);
        ++v10;
      }
    }
    while (v10 < v7);
    unsigned int v17 = *(_DWORD *)(a2 + 8);
    if (v17 == *(_DWORD *)(a2 + 12))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts(a2, 1, 1);
      unsigned int v17 = *(_DWORD *)(a2 + 8);
    }
    DgnString::DgnString((DgnString *)(*(void *)a2 + 16 * v17), (const DgnString *)&v18);
    ++*(_DWORD *)(a2 + 8);
    DgnString::~DgnString((DgnString *)&v18);
  }
}

void sub_213F4BC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void *tagStringToTagBits(uint64_t a1, unsigned int *a2, BitArray *a3)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  splitTagsString(a1, (uint64_t)&v25);
  unint64_t v6 = a2[2];
  BitArray::setSize(a3, a2[2]);
  if (v6) {
    BOOL v7 = v26 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = v25;
    int v11 = (_DWORD *)(*(void *)a2 + 8);
    do
    {
      uint64_t v12 = v10 + 16 * v9;
      if (*v11) {
        BOOL v13 = (const char *)*((void *)v11 - 1);
      }
      else {
        BOOL v13 = (const char *)&unk_2140A60F6;
      }
      int v14 = *(_DWORD *)(v12 + 8);
      uint64_t v15 = *(const char **)v12;
      if (v14) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = (const char *)&unk_2140A60F6;
      }
      int v17 = strcmp(v13, v16);
      int v20 = 1 << v8;
      uint64_t v21 = v8 >> 5;
      if (v17)
      {
        *(_DWORD *)(*(void *)a3 + 4 * v21) &= ~v20;
      }
      else
      {
        *(_DWORD *)(*(void *)a3 + 4 * v21) |= v20;
        ++v9;
      }
      if (++v8 >= v6) {
        break;
      }
      v11 += 4;
    }
    while (v9 < v26);
    if (v8 && v9 < v26)
    {
      if (*(_DWORD *)(a1 + 8)) {
        uint64_t v22 = *(void **)a1;
      }
      else {
        uint64_t v22 = &unk_2140A60F6;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 428, (uint64_t)"word/wordlist", 20, (uint64_t)"%.500s", v18, v19, (char)v22);
    }
  }
  if (v8 < v6)
  {
    uint64_t v23 = *(void *)a3;
    do
    {
      *(_DWORD *)(v23 + 4 * (v8 >> 5)) &= ~(1 << v8);
      LODWORD(v8) = v8 + 1;
    }
    while (v6 != v8);
  }
  return DgnArray<DgnString>::releaseAll((uint64_t)&v25);
}

void sub_213F4BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

void WordList::setSizeForWordListLoad(WordList *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  *((_DWORD *)this + 97) = a2;
  unsigned int v8 = *((_DWORD *)this + 67);
  unsigned int v9 = a2;
  BOOL v10 = a2 >= v8;
  uint64_t v11 = a2 - v8;
  if (v11 != 0 && v10)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 256, v11, 0);
    unsigned int v9 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 66) = a2;
  unsigned int v12 = v9;
  if (*((_DWORD *)this + 29) < v9)
  {
    uint64_t v38 = 0;
    *((_DWORD *)this + 29) = realloc_array(*((void **)this + 13), &v38, v9, *((unsigned int *)this + 28), *((unsigned int *)this + 28), 1);
    *((void *)this + 13) = v38;
    unsigned int v12 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 28) = v9;
  unsigned int v13 = *((_DWORD *)this + 53);
  unsigned int v14 = v12;
  if (v12 > v13)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 200, v12 - v13, 0);
    unsigned int v14 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 52) = v12;
  unsigned int v15 = *((_DWORD *)this + 15);
  unsigned int v16 = v14;
  if (v14 > v15)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 48, v14 - v15, 0);
    unsigned int v16 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 14) = v14;
  unsigned int v17 = *((_DWORD *)this + 11);
  unsigned int v18 = v16;
  if (v16 > v17)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 32, v16 - v17, 0);
    unsigned int v18 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v16;
  if (a3 >= 2)
  {
    unsigned int v19 = v18;
    if (*((_DWORD *)this + 109) < v18)
    {
      uint64_t v38 = 0;
      *((_DWORD *)this + 109) = realloc_array(*((void **)this + 53), &v38, v18, *((unsigned int *)this + 108), *((unsigned int *)this + 108), 1);
      *((void *)this + 53) = v38;
      unsigned int v19 = *((_DWORD *)this + 97);
    }
    *((_DWORD *)this + 108) = v18;
    unsigned int v18 = v19;
  }
  if (a4 >= 2)
  {
    unsigned int v20 = v18;
    if (*((_DWORD *)this + 113) < v18)
    {
      uint64_t v38 = 0;
      *((_DWORD *)this + 113) = realloc_array(*((void **)this + 55), &v38, v18, *((unsigned int *)this + 112), *((unsigned int *)this + 112), 1);
      *((void *)this + 55) = v38;
      unsigned int v20 = *((_DWORD *)this + 97);
    }
    *((_DWORD *)this + 112) = v18;
    unsigned int v18 = v20;
  }
  BitArray::setSize((WordList *)((char *)this + 624), v18);
  BitArray::setSize((WordList *)((char *)this + 640), *((_DWORD *)this + 97));
  BitArray::clearRange((WordList *)((char *)this + 624), 0, *((_DWORD *)this + 158));
  BitArray::clearRange((WordList *)((char *)this + 640), 0, *((_DWORD *)this + 162));
  int v21 = *((_DWORD *)this + 138);
  if (v21)
  {
    BitArray::setSize((WordList *)((char *)this + 576), *((_DWORD *)this + 97) * v21);
    BitArray::clearRange((WordList *)((char *)this + 576), 0, *((_DWORD *)this + 146));
  }
  unsigned int v22 = *((_DWORD *)this + 97);
  unsigned int v23 = *((_DWORD *)this + 33);
  unsigned int v24 = v22;
  if (v22 > v23)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 120, v22 - v23, 0);
    unsigned int v24 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v22;
  unsigned int v25 = *((_DWORD *)this + 37);
  unsigned int v26 = v24;
  if (v24 > v25)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 136, v24 - v25, 0);
    unsigned int v26 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 36) = v24;
  unsigned int v27 = *((_DWORD *)this + 151);
  unsigned int v28 = v26;
  if (v26 > v27)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 592, v26 - v27, 0);
    unsigned int v28 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 15pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v26;
  unsigned int v29 = *((_DWORD *)this + 155);
  unsigned int v30 = v28;
  if (v28 > v29)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 608, v28 - v29, 0);
    unsigned int v30 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 154) = v28;
  unsigned int v31 = *((_DWORD *)this + 41);
  unsigned int v32 = v30;
  if (v30 > v31)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 152, v30 - v31, 0);
    unsigned int v32 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v30;
  unsigned int v33 = *((_DWORD *)this + 45);
  unsigned int v34 = v32;
  if (v32 > v33)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 168, v32 - v33, 0);
    unsigned int v34 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 44) = v32;
  unsigned int v35 = *((_DWORD *)this + 49);
  int v36 = v34;
  if (v34 > v35)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 184, v34 - v35, 0);
    int v36 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v34;
  if (v36 >= 1)
  {
    unsigned int v37 = v36 + 1;
    do
    {
      WordList::invalidateId(this, v37 - 2);
      --v37;
    }
    while (v37 > 1);
  }
}

void WordList::strToPhonemes(uint64_t a1, const char *a2, uint64_t a3)
{
  DgnString::DgnString((DgnString *)&v13, a2);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (v14) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (unsigned __int8 *)&unk_2140A60F6;
  }
  DgnSplitStringIntoTokens(v5, ".", (uint64_t)&v11, 0);
  if (v12)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if (*(_DWORD *)(v11 + v6 + 8)) {
        unsigned int v8 = *(const char **)(v11 + v6);
      }
      else {
        unsigned int v8 = (const char *)&unk_2140A60F6;
      }
      __int16 PhnIndex = PhnMgr::getPhnIndex(*(PhnMgr **)(a1 + 16), v8);
      unsigned int v10 = *(_DWORD *)(a3 + 8);
      if (v10 == *(_DWORD *)(a3 + 12))
      {
        DgnPrimArray<short>::reallocElts(a3, 1, 1);
        unsigned int v10 = *(_DWORD *)(a3 + 8);
      }
      *(_WORD *)(*(void *)a3 + 2 * v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = PhnIndex;
      *(_DWORD *)(a3 + 8) = v10 + 1;
      ++v7;
      v6 += 16;
    }
    while (v7 < v12);
  }
  DgnArray<DgnString>::releaseAll((uint64_t)&v11);
  DgnString::~DgnString((DgnString *)&v13);
}

void sub_213F4C26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void WordList::checkNewTwlWordBoundaryPhonemes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  if (v8)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      int v14 = *(unsigned __int16 *)(*(void *)a2 + 2 * v12);
      int v15 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 60);
      BOOL v16 = v14 == v15;
      if (v14 == v15 && (!v12 || ((v12 != v8 - 1) & ~v13) == 0))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 5052, (uint64_t)"word/wordlist", 71, (uint64_t)"%d %.500s %.500s", a7, a8, a3);
        unsigned int v8 = *(_DWORD *)(a2 + 8);
      }
      ++v12;
      int v13 = v16;
    }
    while (v12 < v8);
  }
}

uint64_t WordList::addWordInternal(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4, uint64_t a5, CharInfo *this, uint64_t a7, uint64_t a8, char a9, char a10)
{
  int v11 = a7;
  unsigned int v13 = a5;
  unsigned int v14 = a4;
  uint64_t FreeId = a3;
  int v16 = (int)a2;
  if (***(_DWORD ***)a1) {
    CharInfo::validateEncodedCharString(this, a2, a3, a4, a5, (uint64_t)this, a7, a8);
  }
  unsigned int v22 = strlen((const char *)this);
  if (v16)
  {
    uint64_t FreeId = WordList::getFreeId((WordList *)a1);
    if (v14 == 0xFFFFFF && (unsigned int v14 = WordList::lookupWord((WordList *)a1, (const char *)this), v14 == 0xFFFFFF)) {
      unsigned int v14 = FreeId;
    }
    else {
      unsigned int v13 = *(_DWORD *)(*(void *)(a1 + 200) + 4 * v14);
    }
  }
  if (FreeId >= 0xFFFFF4) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 3010, (uint64_t)"word/wordlist", 10, (uint64_t)"%u %.500s", v20, v21, FreeId);
  }
  if (*(_DWORD *)(a8 + 8)) {
    PhnMgr::verifyPhonemePron(*(void *)(a1 + 16), a8, (uint64_t)this, 0, v18, v19, v20, v21);
  }
  int v49 = v16;
  if (v11 == 255) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 3019, (uint64_t)"word/wordlist", 9, (uint64_t)"%u %.500s", v20, v21, FreeId);
  }
  if (v13 == -1)
  {
    unsigned int v23 = v14;
    unsigned int v24 = 0;
    unsigned int v13 = *(_DWORD *)(a1 + 232);
    unsigned int v25 = v13;
    do
    {
      char v26 = *((unsigned char *)this + v24);
      if (v25 == *(_DWORD *)(a1 + 236))
      {
        DgnPrimArray<char>::reallocElts(a1 + 224, 1, 1);
        unsigned int v25 = *(_DWORD *)(a1 + 232);
      }
      *(unsigned char *)(*(void *)(a1 + 224) + v25) = v26;
      unsigned int v25 = *(_DWORD *)(a1 + 232) + 1;
      *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v25;
      ++v24;
    }
    while (v24 <= v22);
    unsigned int v14 = v23;
  }
  *(_DWORD *)(*(void *)(a1 + 200) + 4 * FreeId) = v13;
  *(unsigned char *)(*(void *)(a1 + 104) + FreeId) = v11;
  unsigned int v50 = v14;
  *(_DWORD *)(*(void *)(a1 + 256) + 4 * FreeId) = v14;
  *(_WORD *)(*(void *)(a1 + 32) + 2 * FreeId) = *(_DWORD *)(a8 + 8);
  *(_DWORD *)(*(void *)(a1 + 48) + 4 * FreeId) = *(_DWORD *)(a1 + 80);
  if (*(_DWORD *)(a8 + 8))
  {
    unint64_t v27 = 0;
    int v28 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 60);
    do
    {
      int v29 = *(unsigned __int16 *)(*(void *)a8 + 2 * v27);
      if (v29 == v28)
      {
        --*(_WORD *)(*(void *)(a1 + 32) + 2 * FreeId);
        *(_DWORD *)(*(void *)(a1 + 88) + 4 * ((*(_DWORD *)(a1 + 80) - 1) >> 5)) |= 1 << (*(unsigned char *)(a1 + 80) - 1);
      }
      else
      {
        unsigned int v30 = *(_DWORD *)(a1 + 80);
        if (v30 == *(_DWORD *)(a1 + 84))
        {
          DgnPrimArray<short>::reallocElts(a1 + 72, 1, 1);
          unsigned int v30 = *(_DWORD *)(a1 + 80);
        }
        *(_WORD *)(*(void *)(a1 + 72) + 2 * v3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v29;
        *(_DWORD *)(a1 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v30 + 1;
        BitArray::add((BitArray *)(a1 + 88), 0);
      }
      ++v27;
    }
    while (v27 < *(unsigned int *)(a8 + 8));
  }
  WordList::setEndPhonesInfo((void *)a1, FreeId);
  if (v49)
  {
    unsigned int v36 = v50;
    if (FreeId == v50) {
      *(_DWORD *)(*(void *)(a1 + 624) + 4 * (v50 >> 5)) &= ~(1 << v50);
    }
    uint64_t v37 = *(void *)(a1 + 640);
    unsigned int v38 = FreeId >> 5;
    int v39 = *(_DWORD *)(v37 + 4 * (FreeId >> 5)) & ~(1 << FreeId);
  }
  else
  {
    unsigned int v36 = v50;
    if (FreeId == v50) {
      *(_DWORD *)(*(void *)(a1 + 624) + 4 * (v50 >> 5)) |= 1 << v50;
    }
    uint64_t v37 = *(void *)(a1 + 640);
    unsigned int v38 = FreeId >> 5;
    int v39 = *(_DWORD *)(v37 + 4 * (FreeId >> 5)) | (1 << FreeId);
  }
  *(_DWORD *)(v37 + 4 * v38) = v39;
  int v40 = *(_DWORD *)(a1 + 552);
  if (v40 && FreeId == v36) {
    BitArray::setBitsInRange((void *)(a1 + 576), (const BitArray *)(a1 + 560), v40 * v36, v40 * v36 + v40);
  }
  if (v11 == 1) {
    ++*(_DWORD *)(a1 + 384);
  }
  if (v49)
  {
    unsigned int v41 = *(unsigned __int8 *)(a1 + 419);
    if (*(unsigned char *)(a1 + 421) && FreeId != v36)
    {
      if (*(_DWORD *)(a1 + 392) < 2u) {
        unsigned int v41 = 0;
      }
      else {
        unsigned int v41 = *(unsigned __int8 *)(*(void *)(a1 + 424) + v36);
      }
    }
    unsigned int v42 = *(unsigned __int8 *)(a1 + 420);
    if (*(unsigned char *)(a1 + 422) && FreeId != v36)
    {
      if (*(_DWORD *)(a1 + 396) < 2u) {
        unsigned int v42 = 0;
      }
      else {
        unsigned int v42 = *(unsigned __int8 *)(*(void *)(a1 + 440) + v36);
      }
    }
    WordList::setPronPredecessorSeedCategory((WordList *)a1, FreeId, v41, v31, v32, v33, v34, v35);
    WordList::setPronSuccessorSeedCategory((WordList *)a1, FreeId, v42, v43, v44, v45, v46, v47);
    if (a10) {
      DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::add(a1 + 272, FreeId);
    }
    if (a9) {
      WordIdPronCollArray::add((WordIdPronCollArray *)(a1 + 352), FreeId);
    }
  }
  *(_DWORD *)(a1 + 376) ^= WordList::computeWordIdNameChecksum((WordList *)a1, FreeId);
  *(_DWORD *)(a1 + 380) ^= WordList::computeWordIdPronChecksum((WordList *)a1, FreeId);
  return FreeId;
}

void WordList::setPronPredecessorSeedCategory(WordList *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a3;
  unsigned int v11 = *((_DWORD *)this + 98);
  if (v11 < a3)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 4794, (uint64_t)"word/wordlist", 64, (uint64_t)"%u %u", a7, a8, a3);
    unsigned int v11 = *((_DWORD *)this + 98);
  }
  if (v11 >= 2) {
    *(unsigned char *)(*((void *)this + 53) + a2) = v8;
  }
}

void WordList::setPronSuccessorSeedCategory(WordList *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a3;
  unsigned int v11 = *((_DWORD *)this + 99);
  if (v11 < a3)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 4814, (uint64_t)"word/wordlist", 65, (uint64_t)"%u %u", a7, a8, a3);
    unsigned int v11 = *((_DWORD *)this + 99);
  }
  if (v11 >= 2) {
    *(unsigned char *)(*((void *)this + 55) + a2) = v8;
  }
}

uint64_t WordList::setupWordIdsForWordListLoad(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 388);
  if (v1)
  {
    uint64_t v2 = this;
    v11[0] = 0;
    unint64_t v12 = 0;
    v11[1] = realloc_array(0, &v12, 4 * v1, 0, 0, 1) >> 2;
    unsigned int v10 = v12;
    if (*(_DWORD *)(v2 + 388))
    {
      uint64_t v3 = 0;
      while (!*(unsigned char *)(*(void *)(v2 + 104) + v3))
      {
        uint64_t v6 = *(unsigned int *)(v2 + 248);
        uint64_t v4 = (void **)(v2 + 240);
        uint64_t v5 = (_DWORD *)(v2 + 248);
        if (v6 == *(_DWORD *)(v2 + 252))
        {
          DgnPrimArray<unsigned int>::reallocElts(v2 + 240, 1, 1);
          uint64_t v5 = (_DWORD *)(v2 + 248);
          uint64_t v4 = (void **)(v2 + 240);
          goto LABEL_8;
        }
LABEL_9:
        *((_DWORD *)*v4 + v6) = v3;
        ++*v5;
        if (++v3 >= (unint64_t)*(unsigned int *)(v2 + 388)) {
          goto LABEL_10;
        }
      }
      uint64_t v4 = &v10;
      uint64_t v5 = v11;
LABEL_8:
      uint64_t v6 = *v5;
      goto LABEL_9;
    }
LABEL_10:
    DgnCollArray<unsigned int,WordList>::addArray(v2 + 272, (uint64_t)&v10);
    if (*(_DWORD *)(v2 + 388))
    {
      unint64_t v7 = 0;
      do
      {
        if (*(unsigned char *)(*(void *)(v2 + 104) + v7)
          && v7 != WordList::lookupWord((WordList *)v2, (const char *)(*(void *)(v2 + 224)+ *(unsigned int *)(*(void *)(v2 + 200) + 4 * v7)))&& *(unsigned char *)(*(void *)(v2 + 104) + v7) == 1)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2768, (uint64_t)"word/wordlist", 3, (uint64_t)"%.500s", v8, v9, *(void *)(v2 + 224) + *(unsigned char *)(*(void *)(v2 + 200) + 4 * v7));
        }
        ++v7;
      }
      while (v7 < *(unsigned int *)(v2 + 388));
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v10);
  }
  return this;
}

void sub_213F4CAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordList::lookupWord(WordList *this, const char *a2)
{
  uint64_t v2 = *(void *)this;
  v6[0] = a2;
  v6[1] = this;
  v6[2] = v2;
  __int16 v7 = -2;
  char v8 = 0;
  if (*((unsigned char *)this + 272) && *((__int16 *)this + 137) == -2) {
    uint64_t v3 = (char *)this + 280;
  }
  else {
    uint64_t v3 = *(char **)(*((void *)this + 37) + 524272);
  }
  unsigned int Equal = DgnPrimArray<unsigned int>::searchFirstEqual(v3, 0, *((_DWORD *)v3 + 2), (uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
  if (Equal == -1) {
    return 0xFFFFFFLL;
  }
  else {
    return *(unsigned int *)(*(void *)v3 + 4 * Equal);
  }
}

uint64_t WordList::setColls(uint64_t a1, uint64_t a2)
{
  return DgnCollArray<unsigned int,WordList>::setColls(a1 + 272, a2);
}

unint64_t copyBadPredecessorSeedCategoryArray(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *(unsigned int *)(result + 8);
  int v5 = v4;
  if (*(_DWORD *)(a2 + 12) < v4)
  {
    __int16 v7 = 0;
    uint64_t result = realloc_array(*(void **)a2, &v7, v4, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 8), 1);
    *(_DWORD *)(a2 + 12) = result;
    *(void *)a2 = v7;
    int v5 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(a2 + 8) = v4;
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v6) = *(unsigned char *)(*(void *)v3 + v6);
      ++v6;
    }
    while (v6 < *(unsigned int *)(v3 + 8));
  }
  return result;
}

uint64_t WordList::loadBinary(WordList *this, DFile *a2, DFileChecksums *a3)
{
  uint64_t v55 = 0;
  uint64_t v6 = OpenAndReadMrecHeader((uint64_t)a2, 0x2Fu, 1, "MRWORD!?", (_DWORD *)&v55 + 1, &v55);
  uint64_t v9 = (DgnStream *)v6;
  *(unsigned char *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(unsigned char *)(v6 + 34) = 0;
  int v10 = v55;
  switch(v55)
  {
    case 0x1300000025:
      int v11 = 0;
      int v12 = 0;
      *(unsigned char *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
      char v45 = 1;
      *(unsigned char *)(v6 + 34) = 1;
      int v13 = 19;
LABEL_5:
      int v14 = 1;
      goto LABEL_6;
    case 0x1400000026:
      int v11 = 0;
      int v12 = 0;
      *(unsigned char *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
      char v45 = 1;
      *(unsigned char *)(v6 + 34) = 1;
      int v13 = 20;
      goto LABEL_5;
    case 0x1400000027:
      char v45 = 0;
      int v11 = 0;
      int v12 = 0;
      int v14 = 1;
      *(unsigned char *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
      *(unsigned char *)(v6 + 34) = 1;
      int v13 = 20;
      goto LABEL_6;
    case 0x1600000028:
      char v45 = 0;
      int v14 = 0;
      int v11 = 0;
      int v12 = 0;
      *(unsigned char *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
      *(unsigned char *)(v6 + 34) = 1;
LABEL_57:
      int v13 = 22;
      goto LABEL_6;
    case 0x1600000029:
      char v45 = 0;
      int v14 = 0;
      int v11 = 0;
      int v12 = 0;
      goto LABEL_57;
    case 0x160000002ALL:
      char v45 = 0;
      int v14 = 0;
      int v12 = 0;
      int v11 = 1;
      goto LABEL_57;
  }
  if (*((_DWORD *)a2 + 6)) {
    uint64_t v43 = (char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v43 = (char *)&unk_2140A60F6;
  }
  MrecHeaderCheckVersions(v43, "MRWORD!?", HIDWORD(v55), v55, 0x18u, 0x2Bu);
  char v45 = 0;
  int v14 = 0;
  int v10 = v55;
  int v13 = HIDWORD(v55);
  int v11 = 1;
  int v12 = 1;
LABEL_6:
  MrecHeaderCheckLatestVersionIfShared(a2, "MRWORD!?", v13, v10, 24, 43, v7, v8);
  v54[0] = 0;
  v54[1] = 0;
  v53[0] = 0;
  v53[1] = 0;
  *(void *)uint64_t v52 = 0;
  readObject<unsigned short>(v9, (uint64_t)this + 32, v52);
  readObject<unsigned int>(v9, (uint64_t)this + 48, v52);
  readObject<unsigned short>(v9, (uint64_t)this + 72, v52);
  readObject(v9, (WordList *)((char *)this + 88), v52);
  readObject<unsigned char>(v9, (uint64_t)this + 104, v52);
  readObject<unsigned short>(v9, (uint64_t)this + 120, v52);
  readObject<unsigned short>(v9, (uint64_t)this + 136, v52);
  readObject<unsigned int>(v9, (uint64_t)this + 200, v52);
  readObject<char>(v9, (uint64_t)this + 224, v52);
  readObject<unsigned int>(v9, (uint64_t)this + 240, v52);
  readObject<unsigned int>(v9, (uint64_t)this + 256, v52);
  DgnCollArray<unsigned int,WordList>::readObject((uint64_t)this + 272, v9, v52);
  uint64_t v44 = (WordList *)((char *)this + 352);
  PrefiltererWordIdPronCollArray::readObject((WordList *)((char *)this + 352), v9, v52);
  if (v11)
  {
    readObject((uint64_t)v9, (_DWORD *)this + 94, v52);
    readObject((uint64_t)v9, (_DWORD *)this + 95, v52);
  }
  readObject((uint64_t)v9, (_DWORD *)this + 96, v52);
  uint64_t v48 = (unsigned int *)((char *)this + 388);
  readObject((uint64_t)v9, (_DWORD *)this + 97, v52);
  readObject((uint64_t)v9, (_DWORD *)this + 98, v52);
  readObject((uint64_t)v9, (_DWORD *)this + 99, v52);
  readObject<DgnPrimArray<BOOL>>(v9, (uint64_t)this + 400, v52);
  readObject((uint64_t)v9, (unsigned __int8 *)this + 416, v52);
  readObject((uint64_t)v9, (unsigned __int8 *)this + 417, v52);
  readObject((uint64_t)v9, (BOOL *)this + 418, v52);
  readObject((uint64_t)v9, (unsigned __int8 *)this + 419, v52);
  readObject((uint64_t)v9, (unsigned __int8 *)this + 420, v52);
  readObject((uint64_t)v9, (BOOL *)this + 421, v52);
  readObject((uint64_t)v9, (BOOL *)this + 422, v52);
  if (v14)
  {
    readObject<BadPredecessorSeedCategory>((uint64_t)v9, (uint64_t)v54, v52);
    readObject<BadPredecessorSeedCategory>((uint64_t)v9, (uint64_t)v53, v52);
  }
  else
  {
    readObject<unsigned char>(v9, (uint64_t)this + 424, v52);
    readObject<unsigned char>(v9, (uint64_t)this + 440, v52);
  }
  readObject(v9, (WordList *)((char *)this + 624), v52);
  readObject(v9, (WordList *)((char *)this + 640), v52);
  if (v12)
  {
    readObject((uint64_t)v9, (_DWORD *)this + 114, v52);
    int v15 = (unsigned int *)((char *)this + 460);
  }
  else
  {
    int v15 = &v52[1];
  }
  readObject((uint64_t)v9, v15, v52);
  readObject(v9, (WordList *)((char *)this + 464), v52);
  readObject(v9, (WordList *)((char *)this + 480), v52);
  readObject(v9, (WordList *)((char *)this + 496), v52);
  readObject(v9, (WordList *)((char *)this + 576), v52);
  readObject(v9, (WordList *)((char *)this + 512), v52);
  if (v14)
  {
    copyBadPredecessorSeedCategoryArray((unint64_t)v54, (uint64_t)this + 424);
    copyBadPredecessorSeedCategoryArray((unint64_t)v53, (uint64_t)this + 440);
  }
  if ((v12 & 1) == 0)
  {
    unsigned int v16 = v52[1];
    *((_DWORD *)this + 114) = v52[1];
    *((_DWORD *)this + 115) = v16;
  }
  EnvMgr::loadEnvMgrFromStream(*((EnvMgr **)this + 3), a2, v9, v52, 0);
  readObjectChecksumAndVerify(v9, v52[0]);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x2Fu, v52[0]);
  DgnDelete<DgnStream>((void (***)(void))v9);
  uint64_t v18 = *(void *)this;
  *((void *)this + 41) = WordIdCollSearchCmpFromWordId;
  *((void *)this + 42) = this;
  *((void *)this + 43) = v18;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  splitTagsString((uint64_t)this + 464, (uint64_t)&v50);
  int v19 = v51;
  *((_DWORD *)this + 138) = v51;
  if (v19) {
    tagStringToTagBits((uint64_t)this + 496, (unsigned int *)&v50, (WordList *)((char *)this + 560));
  }
  uint64_t v47 = (void *)((char *)this + 592);
  unsigned int v20 = *((_DWORD *)this + 97);
  unsigned int v21 = *((_DWORD *)this + 151);
  unsigned int v22 = v20;
  if (v20 > v21)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)v47, v20 - v21, 0);
    unsigned int v22 = *v48;
  }
  *((_DWORD *)this + 15pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v20;
  uint64_t v46 = (void *)((char *)this + 608);
  unsigned int v23 = *((_DWORD *)this + 155);
  unsigned int v24 = v22;
  if (v22 > v23)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)v46, v22 - v23, 0);
    unsigned int v24 = *v48;
  }
  *((_DWORD *)this + 154) = v22;
  unsigned int v25 = *((_DWORD *)this + 41);
  unsigned int v26 = v24;
  if (v24 > v25)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 152, v24 - v25, 0);
    unsigned int v26 = *v48;
  }
  *((_DWORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v24;
  unsigned int v27 = *((_DWORD *)this + 45);
  unsigned int v28 = v26;
  if (v26 > v27)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 168, v26 - v27, 0);
    unsigned int v28 = *v48;
  }
  *((_DWORD *)this + 44) = v26;
  unsigned int v29 = *((_DWORD *)this + 49);
  unsigned int v30 = v28;
  BOOL v31 = v28 >= v29;
  uint64_t v32 = v28 - v29;
  if (v32 != 0 && v31)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 184, v32, 0);
    unsigned int v30 = *v48;
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v28;
  BitArray::BitArray((BitArray *)v49, v30);
  uint64_t v35 = *((unsigned int *)this + 62);
  if ((int)v35 >= 1)
  {
    uint64_t v36 = *((void *)this + 30);
    uint64_t v37 = v49[0];
    unint64_t v38 = v35 + 1;
    do
    {
      unint64_t v39 = *(unsigned int *)(v36 + 4 * (v38 - 2));
      *(_DWORD *)(v37 + ((v39 >> 3) & 0x1FFFFFFC)) |= 1 << v39;
      --v38;
    }
    while (v38 > 1);
  }
  if (*v48)
  {
    unint64_t v40 = 0;
    do
    {
      *(_WORD *)(*((void *)this + 19) + 2 * v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
      *(_WORD *)(*((void *)this + 21) + 2 * v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
      *(_WORD *)(*((void *)this + 23) + 2 * v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
      int v41 = *(_DWORD *)(v49[0] + 4 * (v40 >> 5)) & (1 << v40);
      if (*(unsigned char *)(*((void *)this + 13) + v40))
      {
        if (v41) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1850, (uint64_t)"word/wordlist", 27, (uint64_t)"%u", v33, v34, v40);
        }
        WordList::setEndPhonesInfo(this, v40);
      }
      else
      {
        if (!v41) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 1855, (uint64_t)"word/wordlist", 28, (uint64_t)"%u", v33, v34, v40);
        }
        *(_WORD *)(*v47 + 2 * v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = -1;
        *(_WORD *)(*v46 + 2 * v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = -1;
      }
      ++v40;
    }
    while (v40 < *v48);
  }
  if (v45)
  {
    PrefiltererWordIdPronCollArray::removeAll((uint64_t)v44);
    WordIdPronCollArray::addArray((uint64_t)v44, (uint64_t)this + 280);
  }
  if ((v11 & 1) == 0) {
    WordList::computeWordChecksums((uLong)this);
  }
  BitArray::~BitArray((BitArray *)v49);
  DgnArray<DgnString>::releaseAll((uint64_t)&v50);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v53);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v54);
}

void sub_213F4D414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray(v11 - 104);
  _Unwind_Resume(a1);
}

unint64_t readObject<DgnPrimArray<BOOL>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v17 = 0;
  unint64_t result = readObject((uint64_t)a1, &v17, a3);
  uint64_t v7 = v17;
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8) {
    unint64_t result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  }
  uint64_t v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      uint64_t v12 = v7 - v9;
      uint64_t v13 = 16 * v9;
      do
      {
        int v14 = (void *)(*(void *)a2 + v13);
        *int v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    uint64_t v10 = (int)v9;
    uint64_t v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      unint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if (v7)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      unint64_t result = readObject<BOOL>(a1, *(void *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t readObject<BadPredecessorSeedCategory>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  v10[0] = 0;
  uint64_t result = readObject(a1, v10, a3);
  int v7 = v10[0];
  if (*(_DWORD *)(a2 + 12) >= v10[0])
  {
    *(_DWORD *)(a2 + 8) = v10[0];
    if (!v7) {
      return result;
    }
  }
  else
  {
    *(void *)&v10[1] = 0;
    int v8 = realloc_array(*(void **)a2, (void **)&v10[1], v10[0], *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 8), 1);
    *(void *)a2 = *(void *)&v10[1];
    *(_DWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 12) = v8;
  }
  unint64_t v9 = 0;
  do
    uint64_t result = readObject(a1, (unsigned __int8 *)(*(void *)a2 + v9++), a3);
  while (v9 < *(unsigned int *)(a2 + 8));
  return result;
}

void *WordList::setEndPhonesInfo(void *this, unsigned int a2)
{
  if (*(_WORD *)(this[4] + 2 * a2))
  {
    uint64_t v2 = (_WORD *)(this[9] + 2 * *(unsigned int *)(this[6] + 4 * a2));
    __int16 v3 = v2[*(unsigned __int16 *)(this[4] + 2 * a2) - 1];
    *(_WORD *)(this[74] + 2 * a2) = *v2;
    unint64_t v4 = this + 76;
  }
  else
  {
    __int16 v3 = *(_WORD *)(this[2] + 58);
    *(_WORD *)(this[76] + 2 * a2) = v3;
    unint64_t v4 = this + 74;
  }
  *(_WORD *)(*v4 + 2 * a2) = v3;
  return this;
}

uint64_t WordList::willLoadWordListInTextFormat(WordList *this, DFile *a2)
{
  return DFile::subFileExists((uint64_t)this, 0x62u);
}

uint64_t WordList::loadWordList(WordList *this, DFile *a2, DFileChecksums *a3)
{
  if (DFile::subFileExists((uint64_t)a2, 0x62u)) {
    WordList::loadTwl(this, a2);
  }
  else {
    WordList::loadBinary(this, a2, a3);
  }
  WordList::compact((uint64_t)this);

  return TagBitsAndStrings::compact((WordList *)((char *)this + 512));
}

uint64_t WordList::compact(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(unsigned int *)(this + 388);
  if (!v2)
  {
    if (!*(_DWORD *)(this + 80))
    {
      unsigned int v5 = 0;
      goto LABEL_31;
    }
    unsigned int v5 = 0;
    unsigned int v4 = 0;
    unsigned int v42 = 0;
    uint64_t v43 = 0;
    goto LABEL_11;
  }
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = *(void *)(this + 104);
  do
  {
    if (*(unsigned char *)(v6 + v3))
    {
      v4 += *(unsigned __int16 *)(*(void *)(v1 + 32) + 2 * v3);
      if (v3 == *(_DWORD *)(*(void *)(v1 + 256) + 4 * v3))
      {
        this = strlen((const char *)(*(void *)(v1 + 224) + *(unsigned int *)(*(void *)(v1 + 200) + 4 * v3)));
        v5 += this + 1;
      }
    }
    ++v3;
  }
  while (v2 != v3);
  if (*(_DWORD *)(v1 + 80) != v4)
  {
    unsigned int v42 = 0;
    uint64_t v43 = 0;
    unint64_t v40 = 0;
    HIDWORD(v43) = realloc_array(0, &v40, 4 * v2, 0, 0, 1) >> 2;
    unsigned int v42 = v40;
LABEL_11:
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    DgnString::DgnString((DgnString *)&v38);
    if (HIDWORD(v41) < v4)
    {
      uint64_t v44 = 0;
      HIDWORD(v41) = realloc_array(v40, &v44, 2 * v4, 2 * v41, 2 * v41, 1) >> 1;
      unint64_t v40 = v44;
    }
    BitArray::preAllocate((BitArray *)&v38, v4);
    if (*(_DWORD *)(v1 + 388))
    {
      unint64_t v7 = 0;
      uint64_t v8 = *(void *)(v1 + 104);
      unint64_t v9 = v42;
      uint64_t v10 = v40;
      do
      {
        if (*(unsigned char *)(v8 + v7))
        {
          v9[v43] = v41;
          LODWORD(v43) = v43 + 1;
          uint64_t v11 = *(unsigned __int16 *)(*(void *)(v1 + 32) + 2 * v7);
          if (*(_WORD *)(*(void *)(v1 + 32) + 2 * v7))
          {
            unsigned int v12 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * v7);
            uint64_t v13 = *(void *)(v1 + 72);
            uint64_t v14 = *(void *)(v1 + 88);
            uint64_t v15 = v38;
            do
            {
              int v16 = v41;
              v10[v41] = *(_WORD *)(v13 + 2 * v12);
              LODWORD(v41) = v16 + 1;
              unsigned int v17 = *(_DWORD *)(v14 + 4 * (v12 >> 5));
              unint64_t v18 = v39++;
              int v19 = 1 << v18;
              if ((v17 >> v12)) {
                *(_DWORD *)((char *)v15 + ((v18 >> 3) & 0x1FFFFFFC)) |= v19;
              }
              else {
                v15[v18 >> 5] &= ~v19;
              }
              ++v12;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          v9[v43] = 0;
          LODWORD(v43) = v43 + 1;
        }
        ++v7;
      }
      while (v7 < *(unsigned int *)(v1 + 388));
    }
    unsigned int v20 = *(void **)(v1 + 48);
    if (v20)
    {
      MemChunkFree(v20, 0);
      *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
    }
    *(void *)(v1 + 56) = 0;
    DgnPrimArray<int>::copyArraySlice(v1 + 48, (uint64_t *)&v42, 0, v43);
    *(_DWORD *)(v1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0;
    unsigned int v21 = *(void **)(v1 + 72);
    if (v21)
    {
      MemChunkFree(v21, 0);
      *(void *)(v1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
    }
    *(void *)(v1 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
    DgnPrimArray<unsigned short>::copyArraySlice(v1 + 72, (uint64_t *)&v40, 0, v41);
    BitArray::releaseAll(v1 + 88);
    BitArray::operator=((int **)(v1 + 88), (uint64_t)&v38);
    BitArray::~BitArray((BitArray *)&v38);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v40);
    this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v42);
  }
LABEL_31:
  if (*(_DWORD *)(v1 + 232) != v5)
  {
    unsigned int v42 = 0;
    uint64_t v43 = 0;
    uint64_t v22 = *(unsigned int *)(v1 + 388);
    if (v22)
    {
      unint64_t v40 = 0;
      HIDWORD(v43) = realloc_array(0, &v40, 4 * v22, 0, 0, 1) >> 2;
      unsigned int v42 = v40;
    }
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    if (v5)
    {
      unint64_t v38 = 0;
      HIDWORD(v41) = realloc_array(0, &v38, v5, 0, 0, 1);
      unint64_t v40 = v38;
    }
    if (*(_DWORD *)(v1 + 388))
    {
      unint64_t v23 = 0;
      while (1)
      {
        if (*(unsigned char *)(*(void *)(v1 + 104) + v23))
        {
          unsigned int v24 = v42;
          uint64_t v25 = v43;
          if (v23 == *(_DWORD *)(*(void *)(v1 + 256) + 4 * v23))
          {
            v42[v43] = v41;
            LODWORD(v43) = v43 + 1;
            unsigned int v26 = (unsigned char *)(*(void *)(v1 + 224) + *(unsigned int *)(*(void *)(v1 + 200) + 4 * v23));
            LOBYTE(v27) = *v26;
            unsigned int v28 = v41;
            if (*v26)
            {
              unsigned int v29 = 1;
              do
              {
                *((unsigned char *)v40 + v28) = v27;
                unsigned int v28 = v41 + 1;
                LODWORD(v41) = v41 + 1;
                int v27 = v26[v29++];
              }
              while (v27);
            }
            *((unsigned char *)v40 + v28) = 0;
            unsigned int v30 = &v41;
            goto LABEL_46;
          }
        }
        else
        {
          unsigned int v24 = v42;
          uint64_t v25 = v43;
        }
        v24[v25] = 0;
        unsigned int v30 = &v43;
LABEL_46:
        ++*(_DWORD *)v30;
        ++v23;
        unint64_t v31 = *(unsigned int *)(v1 + 388);
        if (v23 >= v31)
        {
          if (*(_DWORD *)(v1 + 388))
          {
            unint64_t v32 = 0;
            uint64_t v33 = *(void *)(v1 + 104);
            uint64_t v34 = v42;
            do
            {
              if (*(unsigned char *)(v33 + v32))
              {
                uint64_t v35 = *(unsigned int *)(*(void *)(v1 + 256) + 4 * v32);
                if (v32 != v35)
                {
                  v34[v32] = v34[v35];
                  unint64_t v31 = *(unsigned int *)(v1 + 388);
                }
              }
              ++v32;
            }
            while (v32 < v31);
          }
          break;
        }
      }
    }
    uint64_t v36 = *(void **)(v1 + 200);
    if (v36)
    {
      MemChunkFree(v36, 0);
      *(void *)(v1 + 20pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
    }
    *(void *)(v1 + 208) = 0;
    DgnPrimArray<int>::copyArraySlice(v1 + 200, (uint64_t *)&v42, 0, v43);
    *(_DWORD *)(v1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    uint64_t v37 = *(void **)(v1 + 224);
    if (v37)
    {
      MemChunkFree(v37, 0);
      *(void *)(v1 + 2DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
    }
    *(void *)(v1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
    DgnPrimArray<unsigned char>::copyArraySlice(v1 + 224, &v40, 0, v41);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v40);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v42);
  }
  return this;
}

void sub_213F4DBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void WordList::saveTwl(WordList *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v120);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v120, (uint64_t)a2, 0x62u, a3);
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v120, sTWL_Versions, (uint64_t)&v118, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v120, "TextWordList", (void *)(v118 + 8 * (v119 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfWords", *((unsigned int *)this + 96));
  uint64_t v11 = *((unsigned int *)this + 90);
  if (v11)
  {
    uint64_t v12 = 0;
    while (!*(_WORD *)(*((void *)this + 4) + 2 * *(unsigned int *)(*((void *)this + 44) + 4 * v12)))
    {
      if (v11 == ++v12)
      {
        LODWORD(v12) = *((_DWORD *)this + 90);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfPronlessWords", v12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfPronIds", *((unsigned int *)this + 72));
  int v13 = *((_DWORD *)this + 97);
  if (v13 >= 1)
  {
    uint64_t v14 = *((unsigned int *)this + 97);
    while (1)
    {
      uint64_t v15 = v14 - 1;
      if (v13 > (v14 - 1))
      {
        if (*(unsigned char *)(*((void *)this + 13) + v15)) {
          break;
        }
      }
      --v14;
      if ((unint64_t)(v15 + 1) <= 1)
      {
        int v13 = 0;
        goto LABEL_17;
      }
    }
    int v13 = v14;
LABEL_17:
    int v16 = *((_DWORD *)this + 72);
    goto LABEL_18;
  }
  int v16 = *((_DWORD *)this + 72);
  if (v13 != -1)
  {
LABEL_18:
    uint64_t v17 = (v13 - v16);
    goto LABEL_19;
  }
  if (v16)
  {
    int v13 = -1;
    goto LABEL_18;
  }
  uint64_t v17 = 0;
LABEL_19:
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfFreePronIds", v17);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfPronPredecessorSeedCategories", *((unsigned int *)this + 98));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "NumberOfPronSuccessorSeedCategories", *((unsigned int *)this + 99));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "StartOfUtterancePredecessorSeedCategory", *((unsigned __int8 *)this + 416));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "EndOfUtteranceSuccessorSeedCategory", *((unsigned __int8 *)this + 417));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "RootDeterminesPronPredecessorSeedCategory", *((unsigned __int8 *)this + 421));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "RootDeterminesPronSuccessorSeedCategory", *((unsigned __int8 *)this + 422));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "DefaultClientPronPredecessorSeedCategory", *((unsigned __int8 *)this + 419));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v120, "DefaultClientPronSuccessorSeedCategory", *((unsigned __int8 *)this + 420));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v120, "RequiredWordTagsVersion", *((_DWORD *)this + 114));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v120, "OptionalWordTagsVersion", *((_DWORD *)this + 115));
  if (*((_DWORD *)this + 118)) {
    unint64_t v18 = (const char *)*((void *)this + 58);
  }
  else {
    unint64_t v18 = (const char *)&unk_2140A60F6;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v120, "RequiredTags", v18);
  if (*((_DWORD *)this + 122)) {
    int v19 = (const char *)*((void *)this + 60);
  }
  else {
    int v19 = (const char *)&unk_2140A60F6;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v120, "OptionalTags", v19);
  unsigned int v20 = (char *)&unk_2140A60F6;
  if (*((_DWORD *)this + 126)) {
    unsigned int v21 = (const char *)*((void *)this + 62);
  }
  else {
    unsigned int v21 = (const char *)&unk_2140A60F6;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v120, "NewWordTag", v21);
  DgnString::DgnString((DgnString *)&v116);
  if (*((_DWORD *)this + 80))
  {
    unint64_t v27 = 0;
    do
    {
      if (v27) {
        DgnString::operator+=((DgnString *)&v116, ",");
      }
      unsigned int v28 = *(unsigned __int16 *)(*((void *)this + 39) + 2 * v27);
      CollationName = "_IDENTITY";
      if (v28 != 65534) {
        CollationName = (char *)CollMgr::getCollationName(*(CollMgr **)this, v28, (uint64_t)"_IDENTITY", v22, v23, v24, v25, v26);
      }
      DgnString::operator+=((DgnString *)&v116, CollationName);
      ++v27;
    }
    while (v27 < *((unsigned int *)this + 80));
  }
  if (v117) {
    unsigned int v30 = v116;
  }
  else {
    unsigned int v30 = (const char *)&unk_2140A60F6;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v120, "AllowedCollations", v30);
  DgnString::~DgnString((DgnString *)&v116);
  unsigned int v116 = 0;
  uint64_t v117 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  DgnString::DgnString((DgnString *)&v112, "Type");
  int v31 = v117;
  if (v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    int v31 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v31], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  unsigned int v32 = v115;
  if (v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    unsigned int v32 = v115;
  }
  *(_DWORD *)(v114 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  LODWORD(v115) = v32 + 1;
  unsigned int v103 = v117;
  DgnString::DgnString((DgnString *)&v112, "WordName");
  int v33 = v117;
  if (v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    int v33 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v33], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  unsigned int v34 = v115;
  if (v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    unsigned int v34 = v115;
  }
  *(_DWORD *)(v114 + 4 * v34) = 0;
  LODWORD(v115) = v34 + 1;
  unsigned int v102 = v117;
  DgnString::DgnString((DgnString *)&v112, "UnsValue1");
  int v35 = v117;
  if (v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    int v35 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v35], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  unsigned int v36 = v115;
  if (v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    unsigned int v36 = v115;
  }
  *(_DWORD *)(v114 + 4 * v36) = 3;
  LODWORD(v115) = v36 + 1;
  unsigned int v101 = v117;
  DgnString::DgnString((DgnString *)&v112, "UnsValue2");
  int v37 = v117;
  if (v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    int v37 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v37], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  unsigned int v38 = v115;
  if (v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    unsigned int v38 = v115;
  }
  *(_DWORD *)(v114 + 4 * v38) = 3;
  LODWORD(v115) = v38 + 1;
  unsigned int v100 = v117;
  DgnString::DgnString((DgnString *)&v112, "UnsValue3");
  int v39 = v117;
  if (v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    int v39 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v39], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  unsigned int v40 = v115;
  if (v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    unsigned int v40 = v115;
  }
  *(_DWORD *)(v114 + 4 * v4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 3;
  LODWORD(v115) = v40 + 1;
  unsigned int v99 = v117;
  DgnString::DgnString((DgnString *)&v112, "StrValue1");
  int v41 = v117;
  if (v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    int v41 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v41], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  unsigned int v42 = v115;
  if (v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    unsigned int v42 = v115;
  }
  *(_DWORD *)(v114 + 4 * v42) = 0;
  LODWORD(v115) = v42 + 1;
  unsigned int v98 = v117;
  DgnString::DgnString((DgnString *)&v112, "StrValue2");
  int v43 = v117;
  if (v117 == HIDWORD(v117))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v116, 1, 1);
    int v43 = v117;
  }
  DgnString::DgnString((DgnString *)&v116[16 * v43], (const DgnString *)&v112);
  LODWORD(v117) = v117 + 1;
  DgnString::~DgnString((DgnString *)&v112);
  unsigned int v44 = v115;
  if (v115 == HIDWORD(v115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v114, 1, 1);
    unsigned int v44 = v115;
  }
  *(_DWORD *)(v114 + 4 * v44) = 0;
  LODWORD(v115) = v44 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v120, (uint64_t)&v114, (uint64_t)&v116);
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  splitTagsString((uint64_t)this + 464, (uint64_t)&v112);
  splitTagsString((uint64_t)this + 480, (uint64_t)&v110);
  int v45 = v113;
  int v46 = v111;
  unint64_t v47 = *((unsigned int *)this + 98);
  if (v47)
  {
    unint64_t v48 = 0;
    LODWORD(v49) = *((_DWORD *)this + 99);
    do
    {
      if (v49)
      {
        unint64_t v50 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "SeedTable");
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)&unk_2140A60F6);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, v48);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, v50);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, *(unsigned __int8 *)(*(void *)(*((void *)this + 50) + 16 * v48) + v50));
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, (char *)&unk_2140A60F6);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, (char *)&unk_2140A60F6);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v120);
          ++v50;
          unint64_t v49 = *((unsigned int *)this + 99);
        }
        while (v50 < v49);
        unint64_t v47 = *((unsigned int *)this + 98);
      }
      ++v48;
    }
    while (v48 < v47);
  }
  DgnString::DgnString((DgnString *)&v108);
  int v96 = v46;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  WordList::getAllByRootId((uint64_t)this, (uint64_t)&v106);
  unint64_t v51 = *((unsigned int *)this + 97);
  int v52 = v45;
  if (v51)
  {
    for (unint64_t i = 0; i < v51; ++i)
    {
      if (*(unsigned char *)(*((void *)this + 13) + i))
      {
        if (i == *(_DWORD *)(*((void *)this + 32) + 4 * i))
        {
          unsigned int v54 = &v106[16 * i];
          if (*((_DWORD *)v54 + 2))
          {
            unint64_t v55 = 0;
            do
            {
              unint64_t v56 = *(unsigned int *)(*(void *)v54 + 4 * v55);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "Pron");
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)(*((void *)this + 28) + *(unsigned int *)(*((void *)this + 25) + 4 * v56)));
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, v56);
              if (*((_DWORD *)this + 98) < 2u) {
                int v57 = 0;
              }
              else {
                int v57 = *(unsigned __int8 *)(*((void *)this + 53) + v56);
              }
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, v57);
              if (*((_DWORD *)this + 99) < 2u) {
                int v58 = 0;
              }
              else {
                int v58 = *(unsigned __int8 *)(*((void *)this + 55) + v56);
              }
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, v58);
              DgnString::DgnString((DgnString *)&v104);
              if ((*(_DWORD *)(*((void *)this + 80) + ((v56 >> 3) & 0x1FFFFFFC)) >> v56)) {
                uint64_t v59 = "F";
              }
              else {
                uint64_t v59 = "U";
              }
              DgnString::operator=((DgnString *)&v104, v59);
              if (v105) {
                uint64_t v60 = v104;
              }
              else {
                uint64_t v60 = (char *)&unk_2140A60F6;
              }
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, v60);
              WordList::getHumanReadablePron(this, v56, (DgnString *)&v108);
              if (v109) {
                uint64_t v61 = v108;
              }
              else {
                uint64_t v61 = (char *)&unk_2140A60F6;
              }
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, v61);
              DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v120);
              DgnString::~DgnString((DgnString *)&v104);
              ++v55;
            }
            while (v55 < *((unsigned int *)v54 + 2));
            unint64_t v51 = *((unsigned int *)this + 97);
            int v52 = v45;
          }
        }
      }
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v106);
  DgnString::~DgnString((DgnString *)&v108);
  DgnString::DgnString((DgnString *)&v108);
  DgnString::DgnString((DgnString *)&v106);
  unint64_t v62 = *((unsigned int *)this + 97);
  if (v62)
  {
    unsigned int v63 = 0;
    unint64_t v64 = 0;
    while (1)
    {
      if (!*(unsigned char *)(*((void *)this + 13) + v64) || v64 != *(_DWORD *)(*((void *)this + 32) + 4 * v64)) {
        goto LABEL_113;
      }
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "ReqTags");
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)(*((void *)this + 28) + *(unsigned int *)(*((void *)this + 25) + 4 * v64)));
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, 0);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, 0);
      uint64_t v65 = ((*(_DWORD *)(*((void *)this + 78) + 4 * (v64 >> 5)) >> v64) & 1) != 0 ? "F" : "U";
      DgnString::DgnString((DgnString *)&v104, v65);
      uint64_t v66 = v105 ? v104 : (char *)&unk_2140A60F6;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, v66);
      if (!v52) {
        break;
      }
      BitArray::getBitsFromRange((WordList *)((char *)this + 576), (BitArray *)&v106, v63, v52 + v63);
      tagBitsToTagString((uint64_t)&v106, &v112, (DgnString *)&v108);
      if (!v109) {
        goto LABEL_111;
      }
      uint64_t v67 = v108;
LABEL_112:
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, v67);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v120);
      DgnString::~DgnString((DgnString *)&v104);
      unint64_t v62 = *((unsigned int *)this + 97);
LABEL_113:
      ++v64;
      v63 += v52;
      if (v64 >= v62) {
        goto LABEL_114;
      }
    }
    LODWORD(v109) = 0;
LABEL_111:
    uint64_t v67 = (char *)&unk_2140A60F6;
    goto LABEL_112;
  }
LABEL_114:
  BitArray::~BitArray((BitArray *)&v106);
  DgnString::~DgnString((DgnString *)&v108);
  if (v96)
  {
    DgnString::DgnString((DgnString *)&v108);
    DgnString::DgnString((DgnString *)&v106);
    DgnString::DgnString((DgnString *)&v104);
    unint64_t v68 = *((unsigned int *)this + 97);
    if (v68)
    {
      for (unint64_t j = 0; j < v68; ++j)
      {
        if (*(unsigned char *)(*((void *)this + 13) + j)
          && j == *(_DWORD *)(*((void *)this + 32) + 4 * j)
          && j < *((unsigned int *)this + 132)
          && *(_DWORD *)(*((void *)this + 65) + 4 * j) != -1)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "OptTags");
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)(*((void *)this + 28) + *(unsigned int *)(*((void *)this + 25) + 4 * j)));
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, 0);
          TagBitsAndStrings::getTagBits((WordList *)((char *)this + 512), j, (BitArray *)&v106);
          tagBitsToTagString((uint64_t)&v106, &v110, (DgnString *)&v108);
          if (v109) {
            uint64_t v70 = v108;
          }
          else {
            uint64_t v70 = (char *)&unk_2140A60F6;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, v70);
          DgnString::operator=((DgnString *)&v104, (char *)(*((void *)this + 67)+ *(_DWORD *)(*((void *)this + 65) + 4 * j)+ ((*((_DWORD *)this + 129) + 7) >> 3)));
          if (v105) {
            uint64_t v71 = v104;
          }
          else {
            uint64_t v71 = (char *)&unk_2140A60F6;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, v71);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v120);
          unint64_t v68 = *((unsigned int *)this + 97);
        }
      }
    }
    DgnString::~DgnString((DgnString *)&v104);
    BitArray::~BitArray((BitArray *)&v106);
    DgnString::~DgnString((DgnString *)&v108);
  }
  uint64_t v72 = (EnvMgr *)*((void *)this + 3);
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  EnvMgr::getItemsWithEnv((unint64_t)v72, (uint64_t)&v108);
  DgnString::DgnString((DgnString *)&v106);
  if (v109)
  {
    uint64_t v73 = 0;
    do
    {
      uint64_t v74 = *(unsigned int *)&v108[4 * v73];
      unsigned int ItemEnvId = EnvMgr::getItemEnvId(v72, *(_DWORD *)&v108[4 * v73]);
      uint64_t NameIds = EnvMgr::getNameIds(v72, ItemEnvId, v76, v77, v78, v79, v80, v81);
      uint64_t v97 = v73;
      uint64_t v83 = v20;
      uint64_t Values = EnvMgr::getValues(v72, ItemEnvId, v84, v85, v86, v87, v88, v89);
      if (*(_DWORD *)(NameIds + 8))
      {
        uint64_t v91 = (void *)Values;
        uint64_t v92 = 0;
        unint64_t v93 = 0;
        do
        {
          Name = (char *)EnvMgr::getName(v72, *(unsigned __int16 *)(*(void *)NameIds + 2 * v93));
          DgnTextFile::convertToEnvValueFormat(*v91 + v92, (DgnString *)&v106);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, 0, "Env");
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v103, (char *)(*((void *)this + 28) + *(unsigned int *)(*((void *)this + 25) + 4 * v74)));
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v102, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v101, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v120, v100, 0);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v99, Name);
          if (v107) {
            int v95 = v106;
          }
          else {
            int v95 = v83;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v120, v98, v95);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v120);
          ++v93;
          v92 += 16;
        }
        while (v93 < *(unsigned int *)(NameIds + 8));
      }
      uint64_t v73 = v97 + 1;
      unsigned int v20 = v83;
    }
    while (v97 + 1 < (unint64_t)v109);
  }
  DgnString::~DgnString((DgnString *)&v106);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v108);
  DgnArray<DgnString>::releaseAll((uint64_t)&v110);
  DgnArray<DgnString>::releaseAll((uint64_t)&v112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v114);
  DgnArray<DgnString>::releaseAll((uint64_t)&v116);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v118);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v120);
}

void sub_213F4EAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
}

uint64_t WordList::getValidIdCount(WordList *this)
{
  return *((unsigned int *)this + 72);
}

uint64_t WordList::getAllByRootId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 16 * v4 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a2 + v5);
      v5 -= 16;
    }
    while (v5 != -16);
  }
  unsigned int v6 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v7 = *(unsigned int *)(a1 + 388);
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  if (v7 <= v8
    || (DgnArray<DgnPrimArray<double>>::reallocElts(a2, v7 - v8, 0),
        unsigned int v6 = *(_DWORD *)(a2 + 8),
        v6 <= v7))
  {
    if (v6 < v7)
    {
      uint64_t v11 = v7 - v6;
      uint64_t v12 = 16 * v6;
      do
      {
        int v13 = (void *)(*(void *)a2 + v12);
        void *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v6 > (int)v7)
  {
    uint64_t v9 = (int)v6;
    uint64_t v10 = 16 * (int)v6 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if (*(unsigned char *)(a1 + 272) && *(__int16 *)(a1 + 274) == -2) {
    uint64_t v14 = a1 + 280;
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(a1 + 296) + 524272);
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (*(_DWORD *)(v14 + 8))
  {
    unsigned int v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 0xFFFFFFLL;
    do
    {
      uint64_t v18 = *(unsigned int *)(*(void *)v14 + 4 * v16);
      uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 256) + 4 * v18);
      if (v19 != v17 && v15)
      {
        DgnPrimArray<int>::copyArraySlice(*(void *)a2 + 16 * v17, &v21, 0, v15);
        unsigned int v15 = 0;
        LODWORD(v22) = 0;
      }
      if (v15 == HIDWORD(v22))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
        unsigned int v15 = v22;
      }
      *(_DWORD *)(v21 + 4 * v15) = v18;
      unsigned int v15 = v22 + 1;
      LODWORD(v22) = v22 + 1;
      ++v16;
      uint64_t v17 = v19;
    }
    while (v16 < *(unsigned int *)(v14 + 8));
    if (v15) {
      DgnPrimArray<int>::copyArraySlice(*(void *)a2 + 16 * v19, &v21, 0, v15);
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
}

void sub_213F4EE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WordList::getPronPredecessorSeedCategory(WordList *this, unsigned int a2)
{
  if (*((_DWORD *)this + 98) < 2u) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(*((void *)this + 53) + a2);
  }
}

uint64_t WordList::getPronSuccessorSeedCategory(WordList *this, unsigned int a2)
{
  if (*((_DWORD *)this + 99) < 2u) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(*((void *)this + 55) + a2);
  }
}

uint64_t WordList::getHumanReadablePron(WordList *this, unsigned int a2, DgnString *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  WordList::getPronWithWB(this, a2, (uint64_t)&v6);
  *((_DWORD *)a3 + 2) = 0;
  if (v7) {
    WordList::phonemesToStr(this, (uint64_t)&v6, a3);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v6);
}

void sub_213F4EEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

DgnString *tagBitsToTagString(uint64_t a1, void *a2, DgnString *a3)
{
  *((_DWORD *)a3 + 2) = 0;
  uint64_t v10 = a1;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = 0;
  uint64_t result = (DgnString *)BitArrayIterator::scanForNextSetBitOrStop((BitArrayIterator *)&v8);
  if (HIDWORD(v8) < v9)
  {
    unsigned int v6 = result;
    uint64_t v7 = (char *)&unk_2140A60F6;
    do
    {
      DgnString::operator+=(a3, v7);
      DgnString::operator+=(a3, *a2 + 16 * v6);
      ++HIDWORD(v8);
      uint64_t result = (DgnString *)BitArrayIterator::scanForNextSetBitOrStop((BitArrayIterator *)&v8);
      unsigned int v6 = result;
      uint64_t v7 = ",";
    }
    while (HIDWORD(v8) < v9);
  }
  if (*((_DWORD *)a3 + 2) <= 1u) {
    return DgnString::operator=(a3, "0");
  }
  return result;
}

void (***WordList::saveBinary(WordList *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x2Fu, a4, "MRWORD!?", 24, 43);
  unsigned int v10 = 0;
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 32, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 48, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 72, &v10);
  writeObject((uint64_t)v7, (uint64_t)this + 88, &v10);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 104, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 120, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 136, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 200, &v10);
  writeObject<char>((uint64_t)v7, (uint64_t)this + 224, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 240, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 256, &v10);
  DgnCollArray<unsigned int,WordList>::writeObject((unsigned __int8 *)this + 272, (uint64_t)v7, &v10);
  PrefiltererWordIdPronCollArray::writeObject((WordList *)((char *)this + 352), v7, &v10);
  writeObject((uint64_t)v7, (int *)this + 94, &v10);
  writeObject((uint64_t)v7, (int *)this + 95, &v10);
  writeObject((uint64_t)v7, (int *)this + 96, &v10);
  writeObject((uint64_t)v7, (int *)this + 97, &v10);
  writeObject((uint64_t)v7, (int *)this + 98, &v10);
  writeObject((uint64_t)v7, (int *)this + 99, &v10);
  writeObject<DgnPrimArray<BOOL>>(v7, (uint64_t)this + 400, &v10);
  writeObject((uint64_t)v7, (char *)this + 416, &v10);
  writeObject((uint64_t)v7, (char *)this + 417, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 418, &v10);
  writeObject((uint64_t)v7, (char *)this + 419, &v10);
  writeObject((uint64_t)v7, (char *)this + 420, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 421, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 422, &v10);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 424, &v10);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 440, &v10);
  writeObject((uint64_t)v7, (uint64_t)this + 624, &v10);
  writeObject((uint64_t)v7, (uint64_t)this + 640, &v10);
  writeObject((uint64_t)v7, (int *)this + 114, &v10);
  writeObject((uint64_t)v7, (int *)this + 115, &v10);
  writeObject((uint64_t)v7, (uint64_t)this + 464, &v10);
  writeObject((uint64_t)v7, (uint64_t)this + 480, &v10);
  writeObject((uint64_t)v7, (uint64_t)this + 496, &v10);
  writeObject((uint64_t)v7, (uint64_t)this + 576, &v10);
  writeObject(v7, (WordList *)((char *)this + 512), &v10);
  EnvMgr::saveEnvMgrToStream(*((EnvMgr **)this + 3), v7, &v10, 1, 0);
  writeObjectChecksum((uint64_t)v7, (int *)&v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x2Fu, v10);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

uint64_t writeObject<DgnPrimArray<BOOL>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<BOOL>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void WordList::saveWordList(WordList *this, DFile *a2, DFileChecksums *a3, int a4, DFileChecksums *a5)
{
  if (a4) {
    WordList::saveTwl(this, a2, (int)a5);
  }
  else {
    WordList::saveBinary(this, a2, a3, (int)a5);
  }
}

void WordList::printSize(WordList *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2279, (DgnString *)&v435);
  if (v436) {
    unint64_t v16 = (void *)v435;
  }
  else {
    unint64_t v16 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A60F6, a3, &unk_2140A60F6, v16);
  DgnString::~DgnString((DgnString *)&v435);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A60F6);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v22 = (a3 + 1);
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2280, (DgnString *)&v435);
  if (v436) {
    unsigned int v28 = (void *)v435;
  }
  else {
    unsigned int v28 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_2140A60F6, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v29 = 4;
  }
  else {
    uint64_t v29 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2281, (DgnString *)&v435);
  if (v436) {
    unsigned int v34 = (void *)v435;
  }
  else {
    unsigned int v34 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_2140A60F6, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v29;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v35 = 4;
  }
  else {
    uint64_t v35 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2282, (DgnString *)&v435);
  if (v436) {
    unsigned int v40 = (void *)v435;
  }
  else {
    unsigned int v40 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &unk_2140A60F6, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v35;
  *a5 += v35;
  int v41 = (EnvMgr *)*((void *)this + 3);
  if (v41)
  {
    unint64_t v434 = 0;
    unint64_t v435 = 0;
    unint64_t v433 = 0;
    EnvMgr::printSize(v41, 0xFFFFFFFFLL, (a3 + 1), &v435, &v434, &v433);
    *a4 += v435;
    *a5 += v434;
    *a6 += v433;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 4;
  }
  else {
    uint64_t v42 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2284, (DgnString *)&v435);
  if (v436) {
    unint64_t v47 = (void *)v435;
  }
  else {
    unint64_t v47 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &unk_2140A60F6, (34 - a3), (34 - a3), v47, v42, v42, 0);
  uint64_t v432 = a3;
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v42;
  *a5 += v42;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v48 = 12;
  }
  else {
    uint64_t v48 = 16;
  }
  uint64_t v49 = *((unsigned int *)this + 10);
  unsigned int v50 = *((_DWORD *)this + 11);
  if (v50 >= v49)
  {
    uint64_t v51 = 0;
    if ((int)v49 > 0) {
      uint64_t v48 = (v48 | 2) + 2 * (v49 - 1);
    }
    uint64_t v52 = v48 + 2 * (v50 - v49);
  }
  else
  {
    uint64_t v51 = 2 * v49;
    uint64_t v52 = v48;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    int v57 = (void *)v435;
  }
  else {
    int v57 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v22, &unk_2140A60F6, v23, v23, v57, v52, v48, v51);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v52;
  *a5 += v48;
  *a6 += v51;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v58 = 12;
  }
  else {
    uint64_t v58 = 16;
  }
  uint64_t v59 = *((unsigned int *)this + 14);
  unsigned int v60 = *((_DWORD *)this + 15);
  if (v60 >= v59)
  {
    uint64_t v61 = 0;
    if ((int)v59 > 0) {
      v58 += 4 * (v59 - 1) + 4;
    }
    uint64_t v62 = v58 + 4 * (v60 - v59);
  }
  else
  {
    uint64_t v61 = 4 * v59;
    uint64_t v62 = v58;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v67 = (void *)v435;
  }
  else {
    uint64_t v67 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v22, &unk_2140A60F6, v23, v23, v67, v62, v58, v61);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v62;
  *a5 += v58;
  *a6 += v61;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v72 = (void *)v435;
  }
  else {
    uint64_t v72 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v22, &unk_2140A60F6, v23, v23, v72, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 12;
  }
  else {
    uint64_t v73 = 16;
  }
  uint64_t v74 = *((unsigned int *)this + 20);
  unsigned int v75 = *((_DWORD *)this + 21);
  if (v75 >= v74)
  {
    uint64_t v76 = 0;
    if ((int)v74 > 0) {
      uint64_t v73 = (v73 | 2) + 2 * (v74 - 1);
    }
    uint64_t v77 = v73 + 2 * (v75 - v74);
  }
  else
  {
    uint64_t v76 = 2 * v74;
    uint64_t v77 = v73;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v82 = (void *)v435;
  }
  else {
    uint64_t v82 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v22, &unk_2140A60F6, v23, v23, v82, v77, v73, v76);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v77;
  *a5 += v73;
  *a6 += v76;
  uint64_t v83 = BitArray::sizeObject((uint64_t)this + 88, 0);
  uint64_t v84 = BitArray::sizeObject((uint64_t)this + 88, 1);
  uint64_t v85 = BitArray::sizeObject((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v90 = (void *)v435;
  }
  else {
    uint64_t v90 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v22, &unk_2140A60F6, v23, v23, v90, v83, v84, v85);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v83;
  *a5 += v84;
  *a6 += v85;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v91 = 12;
  }
  else {
    uint64_t v91 = 16;
  }
  int v92 = *((_DWORD *)this + 28);
  unsigned int v93 = *((_DWORD *)this + 29);
  BOOL v94 = v93 >= v92;
  uint64_t v95 = v93 - v92;
  if (v94)
  {
    uint64_t v97 = v92 & ~(v92 >> 31);
    int v92 = 0;
    uint64_t v96 = v91 + v97;
    v91 += v97 + v95;
  }
  else
  {
    uint64_t v96 = v91;
  }
  uint64_t v98 = v92;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    unsigned int v103 = (void *)v435;
  }
  else {
    unsigned int v103 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v22, &unk_2140A60F6, v23, v23, v103, v91, v96, v98);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v91;
  *a5 += v96;
  *a6 += v98;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v104 = 12;
  }
  else {
    uint64_t v104 = 16;
  }
  uint64_t v105 = *((unsigned int *)this + 32);
  unsigned int v106 = *((_DWORD *)this + 33);
  if (v106 >= v105)
  {
    uint64_t v107 = 0;
    if ((int)v105 > 0) {
      uint64_t v104 = (v104 | 2) + 2 * (v105 - 1);
    }
    uint64_t v108 = v104 + 2 * (v106 - v105);
  }
  else
  {
    uint64_t v107 = 2 * v105;
    uint64_t v108 = v104;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v113 = (void *)v435;
  }
  else {
    uint64_t v113 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v22, &unk_2140A60F6, v23, v23, v113, v108, v104, v107);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v108;
  *a5 += v104;
  *a6 += v107;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v114 = 12;
  }
  else {
    uint64_t v114 = 16;
  }
  uint64_t v115 = *((unsigned int *)this + 36);
  unsigned int v116 = *((_DWORD *)this + 37);
  if (v116 >= v115)
  {
    uint64_t v117 = 0;
    if ((int)v115 > 0) {
      uint64_t v114 = (v114 | 2) + 2 * (v115 - 1);
    }
    uint64_t v118 = v114 + 2 * (v116 - v115);
  }
  else
  {
    uint64_t v117 = 2 * v115;
    uint64_t v118 = v114;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v123 = (void *)v435;
  }
  else {
    uint64_t v123 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v22, &unk_2140A60F6, v23, v23, v123, v118, v114, v117);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v118;
  *a5 += v114;
  *a6 += v117;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v124 = 12;
  }
  else {
    uint64_t v124 = 16;
  }
  uint64_t v125 = *((unsigned int *)this + 40);
  unsigned int v126 = *((_DWORD *)this + 41);
  if (v126 >= v125)
  {
    uint64_t v127 = 0;
    if ((int)v125 > 0) {
      uint64_t v124 = (v124 | 2) + 2 * (v125 - 1);
    }
    uint64_t v128 = v124 + 2 * (v126 - v125);
  }
  else
  {
    uint64_t v127 = 2 * v125;
    uint64_t v128 = v124;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v133 = (void *)v435;
  }
  else {
    uint64_t v133 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v22, &unk_2140A60F6, v23, v23, v133, v128, v124, v127);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v128;
  *a5 += v124;
  *a6 += v127;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v134 = 12;
  }
  else {
    uint64_t v134 = 16;
  }
  uint64_t v135 = *((unsigned int *)this + 44);
  unsigned int v136 = *((_DWORD *)this + 45);
  if (v136 >= v135)
  {
    uint64_t v137 = 0;
    if ((int)v135 > 0) {
      uint64_t v134 = (v134 | 2) + 2 * (v135 - 1);
    }
    uint64_t v138 = v134 + 2 * (v136 - v135);
  }
  else
  {
    uint64_t v137 = 2 * v135;
    uint64_t v138 = v134;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    int v143 = (void *)v435;
  }
  else {
    int v143 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v22, &unk_2140A60F6, v23, v23, v143, v138, v134, v137);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v138;
  *a5 += v134;
  *a6 += v137;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v144 = 12;
  }
  else {
    uint64_t v144 = 16;
  }
  uint64_t v145 = *((unsigned int *)this + 48);
  unsigned int v146 = *((_DWORD *)this + 49);
  if (v146 >= v145)
  {
    uint64_t v147 = 0;
    if ((int)v145 > 0) {
      uint64_t v144 = (v144 | 2) + 2 * (v145 - 1);
    }
    uint64_t v148 = v144 + 2 * (v146 - v145);
  }
  else
  {
    uint64_t v147 = 2 * v145;
    uint64_t v148 = v144;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v153 = (void *)v435;
  }
  else {
    uint64_t v153 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v22, &unk_2140A60F6, v23, v23, v153, v148, v144, v147);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v148;
  *a5 += v144;
  *a6 += v147;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v154 = 12;
  }
  else {
    uint64_t v154 = 16;
  }
  uint64_t v155 = *((unsigned int *)this + 52);
  unsigned int v156 = *((_DWORD *)this + 53);
  if (v156 >= v155)
  {
    uint64_t v157 = 0;
    if ((int)v155 > 0) {
      v154 += 4 * (v155 - 1) + 4;
    }
    uint64_t v158 = v154 + 4 * (v156 - v155);
  }
  else
  {
    uint64_t v157 = 4 * v155;
    uint64_t v158 = v154;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    double v163 = (void *)v435;
  }
  else {
    double v163 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v159, v160, v161, v162, v22, &unk_2140A60F6, v23, v23, v163, v158, v154, v157);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v158;
  *a5 += v154;
  *a6 += v157;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    double v168 = (void *)v435;
  }
  else {
    double v168 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v164, v165, v166, v167, v22, &unk_2140A60F6, v23, v23, v168, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v169 = 12;
  }
  else {
    uint64_t v169 = 16;
  }
  int v170 = *((_DWORD *)this + 58);
  unsigned int v171 = *((_DWORD *)this + 59);
  BOOL v94 = v171 >= v170;
  uint64_t v172 = v171 - v170;
  if (v94)
  {
    uint64_t v174 = v170 & ~(v170 >> 31);
    int v170 = 0;
    uint64_t v173 = v169 + v174;
    v169 += v174 + v172;
  }
  else
  {
    uint64_t v173 = v169;
  }
  uint64_t v175 = v170;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v180 = (void *)v435;
  }
  else {
    uint64_t v180 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v22, &unk_2140A60F6, v23, v23, v180, v169, v173, v175);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v169;
  *a5 += v173;
  *a6 += v175;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v181 = 12;
  }
  else {
    uint64_t v181 = 16;
  }
  uint64_t v182 = *((unsigned int *)this + 62);
  unsigned int v183 = *((_DWORD *)this + 63);
  if (v183 >= v182)
  {
    uint64_t v184 = 0;
    if ((int)v182 > 0) {
      v181 += 4 * (v182 - 1) + 4;
    }
    uint64_t v185 = v181 + 4 * (v183 - v182);
  }
  else
  {
    uint64_t v184 = 4 * v182;
    uint64_t v185 = v181;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    int v190 = (void *)v435;
  }
  else {
    int v190 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v22, &unk_2140A60F6, v23, v23, v190, v185, v181, v184);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v185;
  *a5 += v181;
  *a6 += v184;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v191 = 12;
  }
  else {
    uint64_t v191 = 16;
  }
  uint64_t v192 = *((unsigned int *)this + 66);
  unsigned int v193 = *((_DWORD *)this + 67);
  if (v193 >= v192)
  {
    uint64_t v194 = 0;
    if ((int)v192 > 0) {
      v191 += 4 * (v192 - 1) + 4;
    }
    uint64_t v195 = v191 + 4 * (v193 - v192);
  }
  else
  {
    uint64_t v194 = 4 * v192;
    uint64_t v195 = v191;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v200 = (void *)v435;
  }
  else {
    uint64_t v200 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v196, v197, v198, v199, v22, &unk_2140A60F6, v23, v23, v200, v195, v191, v194);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v195;
  *a5 += v191;
  *a6 += v194;
  uint64_t v201 = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + 272, 0);
  uint64_t v202 = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + 272, 1);
  uint64_t v203 = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject((uint64_t)this + 272, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    int v208 = (void *)v435;
  }
  else {
    int v208 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v204, v205, v206, v207, v22, &unk_2140A60F6, v23, v23, v208, v201, v202, v203);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v201;
  *a5 += v202;
  *a6 += v203;
  uint64_t v209 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 352, 0);
  uint64_t v210 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 352, 1);
  uint64_t v211 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 352, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v216 = (void *)v435;
  }
  else {
    uint64_t v216 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v212, v213, v214, v215, v22, &unk_2140A60F6, v23, v23, v216, v209, v210, v211);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v209;
  *a5 += v210;
  *a6 += v211;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v221 = (void *)v435;
  }
  else {
    uint64_t v221 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v217, v218, v219, v220, v22, &unk_2140A60F6, v23, v23, v221, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v226 = (void *)v435;
  }
  else {
    uint64_t v226 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v222, v223, v224, v225, v22, &unk_2140A60F6, v23, v23, v226, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v231 = (void *)v435;
  }
  else {
    uint64_t v231 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v227, v228, v229, v230, v22, &unk_2140A60F6, v23, v23, v231, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    int v236 = (void *)v435;
  }
  else {
    int v236 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v22, &unk_2140A60F6, v23, v23, v236, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v237 = 12;
  }
  else {
    uint64_t v237 = 16;
  }
  uint64_t v238 = *((unsigned int *)this + 150);
  unsigned int v239 = *((_DWORD *)this + 151);
  if (v239 >= v238)
  {
    uint64_t v240 = 0;
    if ((int)v238 > 0) {
      uint64_t v237 = (v237 | 2) + 2 * (v238 - 1);
    }
    uint64_t v241 = v237 + 2 * (v239 - v238);
  }
  else
  {
    uint64_t v240 = 2 * v238;
    uint64_t v241 = v237;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v246 = (void *)v435;
  }
  else {
    uint64_t v246 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v22, &unk_2140A60F6, v23, v23, v246, v241, v237, v240);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v241;
  *a5 += v237;
  *a6 += v240;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v247 = 12;
  }
  else {
    uint64_t v247 = 16;
  }
  uint64_t v248 = *((unsigned int *)this + 154);
  unsigned int v249 = *((_DWORD *)this + 155);
  if (v249 >= v248)
  {
    uint64_t v250 = 0;
    if ((int)v248 > 0) {
      uint64_t v247 = (v247 | 2) + 2 * (v248 - 1);
    }
    uint64_t v251 = v247 + 2 * (v249 - v248);
  }
  else
  {
    uint64_t v250 = 2 * v248;
    uint64_t v251 = v247;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v256 = (void *)v435;
  }
  else {
    uint64_t v256 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v22, &unk_2140A60F6, v23, v23, v256, v251, v247, v250);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v251;
  *a5 += v247;
  *a6 += v250;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v261 = (void *)v435;
  }
  else {
    uint64_t v261 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v257, v258, v259, v260, v22, &unk_2140A60F6, v23, v23, v261, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v266 = (void *)v435;
  }
  else {
    uint64_t v266 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v262, v263, v264, v265, v22, &unk_2140A60F6, v23, v23, v266, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  uint64_t v267 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 400, 0);
  uint64_t v268 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 400, 1);
  unint64_t v435 = 0;
  uint64_t v436 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v435);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    int v273 = (void *)v435;
  }
  else {
    int v273 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v269, v270, v271, v272, v22, &unk_2140A60F6, v23, v23, v273, v267, v268, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v267;
  *a5 += v268;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    unint64_t v278 = (void *)v435;
  }
  else {
    unint64_t v278 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v274, v275, v276, v277, v22, &unk_2140A60F6, v23, v23, v278, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v283 = (void *)v435;
  }
  else {
    uint64_t v283 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v279, v280, v281, v282, v22, &unk_2140A60F6, v23, v23, v283, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v288 = (void *)v435;
  }
  else {
    uint64_t v288 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v284, v285, v286, v287, v22, &unk_2140A60F6, v23, v23, v288, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    unsigned int v293 = (void *)v435;
  }
  else {
    unsigned int v293 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v289, v290, v291, v292, v22, &unk_2140A60F6, v23, v23, v293, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v298 = (void *)v435;
  }
  else {
    uint64_t v298 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v294, v295, v296, v297, v22, &unk_2140A60F6, v23, v23, v298, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v303 = (void *)v435;
  }
  else {
    uint64_t v303 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v299, v300, v301, v302, v22, &unk_2140A60F6, v23, v23, v303, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    int v308 = (void *)v435;
  }
  else {
    int v308 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v304, v305, v306, v307, v22, &unk_2140A60F6, v23, v23, v308, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v435);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v309 = 12;
  }
  else {
    uint64_t v309 = 16;
  }
  int v310 = *((_DWORD *)this + 108);
  unsigned int v311 = *((_DWORD *)this + 109);
  BOOL v94 = v311 >= v310;
  uint64_t v312 = v311 - v310;
  if (v94)
  {
    uint64_t v314 = v310 & ~(v310 >> 31);
    int v310 = 0;
    uint64_t v313 = v309 + v314;
    v309 += v314 + v312;
  }
  else
  {
    uint64_t v313 = v309;
  }
  uint64_t v315 = v310;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    char v320 = (void *)v435;
  }
  else {
    char v320 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v316, v317, v318, v319, v22, &unk_2140A60F6, v23, v23, v320, v309, v313, v315);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v309;
  *a5 += v313;
  *a6 += v315;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v321 = 12;
  }
  else {
    uint64_t v321 = 16;
  }
  int v322 = *((_DWORD *)this + 112);
  unsigned int v323 = *((_DWORD *)this + 113);
  BOOL v94 = v323 >= v322;
  uint64_t v324 = v323 - v322;
  if (v94)
  {
    uint64_t v326 = v322 & ~(v322 >> 31);
    int v322 = 0;
    uint64_t v325 = v321 + v326;
    v321 += v326 + v324;
  }
  else
  {
    uint64_t v325 = v321;
  }
  uint64_t v327 = v322;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v332 = (void *)v435;
  }
  else {
    uint64_t v332 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v328, v329, v330, v331, v22, &unk_2140A60F6, v23, v23, v332, v321, v325, v327);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v321;
  *a5 += v325;
  *a6 += v327;
  uint64_t v333 = BitArray::sizeObject((uint64_t)this + 624, 0);
  uint64_t v334 = BitArray::sizeObject((uint64_t)this + 624, 1);
  uint64_t v335 = BitArray::sizeObject((uint64_t)this + 624, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    unsigned int v340 = (void *)v435;
  }
  else {
    unsigned int v340 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v336, v337, v338, v339, v22, &unk_2140A60F6, v23, v23, v340, v333, v334, v335);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v333;
  *a5 += v334;
  *a6 += v335;
  uint64_t v341 = BitArray::sizeObject((uint64_t)this + 640, 0);
  uint64_t v342 = BitArray::sizeObject((uint64_t)this + 640, 1);
  uint64_t v343 = BitArray::sizeObject((uint64_t)this + 640, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v348 = (void *)v435;
  }
  else {
    uint64_t v348 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v344, v345, v346, v347, v22, &unk_2140A60F6, v23, v23, v348, v341, v342, v343);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v341;
  *a5 += v342;
  *a6 += v343;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    unsigned int v353 = (void *)v435;
  }
  else {
    unsigned int v353 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v349, v350, v351, v352, v22, &unk_2140A60F6, v23, v23, v353, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v358 = (void *)v435;
  }
  else {
    uint64_t v358 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v354, v355, v356, v357, v22, &unk_2140A60F6, v23, v23, v358, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  uint64_t v359 = sizeObject((char *)this + 464);
  uint64_t v360 = sizeObject((char *)this + 464);
  uint64_t v361 = sizeObject((char *)this + 464);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v366 = (void *)v435;
  }
  else {
    uint64_t v366 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v362, v363, v364, v365, v22, &unk_2140A60F6, v23, v23, v366, v359, v360, v361);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v359;
  *a5 += v360;
  *a6 += v361;
  uint64_t v367 = sizeObject((char *)this + 480);
  uint64_t v368 = sizeObject((char *)this + 480);
  uint64_t v369 = sizeObject((char *)this + 480);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v374 = (void *)v435;
  }
  else {
    uint64_t v374 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v370, v371, v372, v373, v22, &unk_2140A60F6, v23, v23, v374, v367, v368, v369);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v367;
  *a5 += v368;
  *a6 += v369;
  uint64_t v375 = sizeObject((char *)this + 496);
  uint64_t v376 = sizeObject((char *)this + 496);
  uint64_t v377 = sizeObject((char *)this + 496);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v382 = (void *)v435;
  }
  else {
    uint64_t v382 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v378, v379, v380, v381, v22, &unk_2140A60F6, v23, v23, v382, v375, v376, v377);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v375;
  *a5 += v376;
  *a6 += v377;
  uint64_t v383 = BitArray::sizeObject((uint64_t)this + 576, 0);
  uint64_t v384 = BitArray::sizeObject((uint64_t)this + 576, 1);
  uint64_t v385 = BitArray::sizeObject((uint64_t)this + 576, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v390 = (void *)v435;
  }
  else {
    uint64_t v390 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v386, v387, v388, v389, v22, &unk_2140A60F6, v23, v23, v390, v383, v384, v385);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v383;
  *a5 += v384;
  *a6 += v385;
  uint64_t v391 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v391 = 16;
  }
  uint64_t v392 = *((unsigned int *)this + 132);
  unsigned int v393 = *((_DWORD *)this + 133);
  uint64_t v394 = v391;
  if (v393 >= v392)
  {
    uint64_t v395 = v391 + 4 * (v392 - 1) + 4;
    if ((int)v392 <= 0) {
      uint64_t v395 = v391;
    }
    uint64_t v394 = v395 + 4 * (v393 - v392);
  }
  uint64_t v396 = v394 + 4;
  unsigned int v397 = *((_DWORD *)this + 136);
  unsigned int v398 = *((_DWORD *)this + 137);
  uint64_t v399 = v397 & ~((int)v397 >> 31);
  uint64_t v400 = v391;
  if (v398 >= v397) {
    uint64_t v400 = v391 + v399 + v398 - v397;
  }
  uint64_t v401 = v396 + v400;
  if (v393 >= v392)
  {
    uint64_t v402 = v391 + 4;
    if ((int)v392 > 0) {
      v391 += 4 + 4 * (v392 - 1);
    }
  }
  else
  {
    uint64_t v402 = v391 + 4;
  }
  if (v393 >= v392) {
    uint64_t v403 = 0;
  }
  else {
    uint64_t v403 = 4 * v392;
  }
  if (v398 >= v397) {
    uint64_t v404 = v399;
  }
  else {
    uint64_t v404 = 0;
  }
  uint64_t v405 = v402 + v404 + v391;
  if (v398 >= v397) {
    uint64_t v406 = 0;
  }
  else {
    uint64_t v406 = v397;
  }
  uint64_t v407 = v403 + v406;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v412 = (void *)v435;
  }
  else {
    uint64_t v412 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v408, v409, v410, v411, v22, &unk_2140A60F6, v23, v23, v412, v401, v405, v407);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v401;
  *a5 += v405;
  *a6 += v407;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v417 = (void *)v435;
  }
  else {
    uint64_t v417 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v413, v414, v415, v416, v22, &unk_2140A60F6, v23, v23, v417, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += 4;
  *a5 += 4;
  uint64_t v418 = (char *)this + 560;
  uint64_t v419 = BitArray::sizeObject((uint64_t)this + 560, 0);
  uint64_t v420 = BitArray::sizeObject((uint64_t)v418, 1);
  uint64_t v421 = BitArray::sizeObject((uint64_t)v418, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2286, (DgnString *)&v435);
  if (v436) {
    uint64_t v426 = (void *)v435;
  }
  else {
    uint64_t v426 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v422, v423, v424, v425, v22, &unk_2140A60F6, v23, v23, v426, v419, v420, v421);
  DgnString::~DgnString((DgnString *)&v435);
  *a4 += v419;
  *a5 += v420;
  *a6 += v421;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2287, (DgnString *)&v435);
  if (v436) {
    uint64_t v431 = (void *)v435;
  }
  else {
    uint64_t v431 = &unk_2140A60F6;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v427, v428, v429, v430, v432, &unk_2140A60F6, (35 - v432), (35 - v432), v431, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v435);
}

void sub_213F51288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t WordList::lookupAll(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t v9 = *a1;
  v18[0] = a2;
  v18[1] = a1;
  void v18[2] = v9;
  __int16 v19 = -2;
  char v20 = 0;
  if (*((unsigned char *)a1 + 272) && *((__int16 *)a1 + 137) == -2) {
    unsigned int v10 = a1 + 35;
  }
  else {
    unsigned int v10 = *(uint64_t **)(a1[37] + 524272);
  }
  unint64_t result = DgnPrimArray<unsigned int>::searchFirstEqual(v10, 0, *((_DWORD *)v10 + 2), (uint64_t)v18, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
  if (result == -1 || result >= *((_DWORD *)v10 + 2))
  {
    int v13 = 0;
    int v12 = 0;
  }
  else
  {
    int v12 = 0;
    int v13 = 0;
    unint64_t v14 = result;
    uint64_t v15 = *(unsigned int *)(*v10 + 4 * result);
    do
    {
      unint64_t v16 = *(unsigned int *)(*v10 + 4 * v14);
      if (*((_DWORD *)a1 + 97) <= v16
        || !*(unsigned char *)(a1[13] + v16)
        || *(_DWORD *)(a1[25] + 4 * v16) != *(_DWORD *)(a1[25] + 4 * v15))
      {
        break;
      }
      uint64_t v17 = *(unsigned int *)(a3 + 8);
      if (v17 == *(_DWORD *)(a3 + 12))
      {
        unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v17 = *(unsigned int *)(a3 + 8);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v17) = v16;
      ++*(_DWORD *)(a3 + 8);
      if ((*(_DWORD *)(a1[80] + ((v16 >> 3) & 0x1FFFFFFC)) & (1 << v16)) != 0) {
        ++v13;
      }
      else {
        ++v12;
      }
      ++v14;
    }
    while (v14 < *((unsigned int *)v10 + 2));
  }
  if (a4) {
    *a4 = v13;
  }
  if (a5) {
    *a5 = v12;
  }
  return result;
}

uint64_t WordList::lookupAllClientAddedProns(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  WordList::lookupAll(a1, a2, (uint64_t)&v10, 0, 0);
  unint64_t v5 = v11;
  if (v11)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = *(unsigned int *)(v10 + 4 * v6);
      if (((*(_DWORD *)(a1[80] + ((v7 >> 3) & 0x1FFFFFFC)) >> v7) & 1) == 0)
      {
        uint64_t v8 = *(unsigned int *)(a3 + 8);
        if (v8 == *(_DWORD *)(a3 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
          uint64_t v8 = *(unsigned int *)(a3 + 8);
        }
        *(_DWORD *)(*(void *)a3 + 4 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
        unint64_t v5 = v11;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v10);
}

void sub_213F515CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t WordList::lookupAll(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  return WordList::lookupAll(a1, a1[28] + *(unsigned int *)(a1[25] + 4 * *(unsigned int *)(a1[32] + 4 * a2)), a3, 0, 0);
}

unint64_t WordList::getAllGuessedWordsByOptionalTag(unint64_t this, uint64_t a2)
{
  uint64_t v3 = this;
  *(_DWORD *)(a2 + 8) = 0;
  if (*(unsigned char *)(this + 272) && *(__int16 *)(this + 274) == -2) {
    unint64_t v4 = this + 280;
  }
  else {
    unint64_t v4 = *(void *)(*(void *)(this + 296) + 524272);
  }
  if (*(_DWORD *)(v4 + 8))
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(unsigned int *)(*(void *)v4 + 4 * v5);
      if (*(_DWORD *)(v3 + 528) > v6 && *(_DWORD *)(*(void *)(v3 + 520) + 4 * v6) != -1)
      {
        this = WordList::isGuessedWordByOptionalTag((WordList *)v3, *(_DWORD *)(*(void *)v4 + 4 * v5));
        if (this)
        {
          uint64_t v7 = *(unsigned int *)(a2 + 8);
          if (v7 == *(_DWORD *)(a2 + 12))
          {
            this = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
            uint64_t v7 = *(unsigned int *)(a2 + 8);
          }
          *(_DWORD *)(*(void *)a2 + 4 * v7) = v6;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(v4 + 8));
  }
  return this;
}

uint64_t WordList::numAltProns(WordList *this, const char *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  WordList::lookupAll((uint64_t *)this, (uint64_t)a2, (uint64_t)&v4, 0, 0);
  uint64_t v2 = v5;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v4);
  return v2;
}

void sub_213F51734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WordList::getColls(WordList *this)
{
  return (uint64_t)this + 312;
}

void WordList::getWordsWithPrefix(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14 = (unsigned char *)(a1 + 272);
  if (a2 != 65534
    && (DgnCollArray<unsigned int,WordList>::checkCollIdExposed(a1 + 272, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8),
        a2 == 0xFFFF)
    || *v14 && *(unsigned __int16 *)(a1 + 274) == a2)
  {
    uint64_t v15 = a1 + 280;
  }
  else
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 296) + 8 * a2);
  }

  WordList::getWordsWithPrefix(a1, v15, a2, a3, a4, a5, a6, a8);
}

void WordList::getWordsWithPrefix(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (unsigned char *)a7;
  if (!*a4)
  {
    if (*a5) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2538, (uint64_t)"word/wordlist", 75, (uint64_t)"%s", a7, a8, (char)&errStr_word_wordlist_E_EMPTY_PREFIX1_WITH_NONEMPTY_PREFIX2);
    }
    unint64_t v38 = *(unsigned int *)(a2 + 8);
    if (v38)
    {
      for (unint64_t i = 0; i < v38; ++i)
      {
        uint64_t v40 = *(unsigned int *)(*(void *)a2 + 4 * i);
        if (*(_DWORD *)(*(void *)(a1 + 256) + 4 * v40) == v40)
        {
          uint64_t v41 = *(unsigned int *)(a6 + 8);
          if (v41 == *(_DWORD *)(a6 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
            uint64_t v41 = *(unsigned int *)(a6 + 8);
          }
          *(_DWORD *)(*(void *)a6 + 4 * v41) = v40;
          ++*(_DWORD *)(a6 + 8);
          unint64_t v38 = *(unsigned int *)(a2 + 8);
        }
      }
    }
    goto LABEL_47;
  }
  unsigned int v14 = a3;
  if ((CollMgr::collationCanGetWordsWithPrefix(*(CollMgr **)a1, a3, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8) & 1) == 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2552, (uint64_t)"word/wordlist", 13, (uint64_t)"%s", v15, v16, (char)&errStr_word_wordlist_E_BAD_COLLATION);
  }
  uint64_t v17 = *(CollMgr **)a1;
  v57[0] = a4;
  v57[1] = a1;
  void v57[2] = v17;
  __int16 v58 = v14;
  char v59 = 1;
  uint64_t v56 = 0;
  uint64_t EqualWithLastEqualBounds = DgnPrimArray<unsigned int>::searchFirstEqualWithLastEqualBounds((void *)a2, 0, *(_DWORD *)(a2 + 8), (uint64_t)v57, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp, (_DWORD *)&v56 + 1, (int *)&v56);
  if (EqualWithLastEqualBounds == -1)
  {
LABEL_47:
    *uint64_t v8 = 0;
    return;
  }
  unsigned int v19 = EqualWithLastEqualBounds;
  if (!*a5)
  {
    unsigned int Equal = DgnPrimArray<unsigned int>::searchLastEqual((void *)a2, HIDWORD(v56), v56, (uint64_t)v57, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
    if (v19 <= Equal)
    {
      unsigned int v43 = Equal;
      do
      {
        uint64_t v44 = *(unsigned int *)(*(void *)a2 + 4 * v19);
        if (*(_DWORD *)(*(void *)(a1 + 256) + 4 * v44) == v44)
        {
          uint64_t v45 = *(unsigned int *)(a6 + 8);
          if (v45 == *(_DWORD *)(a6 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
            uint64_t v45 = *(unsigned int *)(a6 + 8);
          }
          *(_DWORD *)(*(void *)a6 + 4 * v45) = v44;
          ++*(_DWORD *)(a6 + 8);
        }
        ++v19;
      }
      while (v19 <= v43);
    }
    goto LABEL_47;
  }
  char v20 = *(CollMgr **)a1;
  v53[0] = a4;
  v53[1] = a1;
  void v53[2] = v20;
  __int16 v54 = v14;
  char v55 = 0;
  unsigned int v21 = DgnPrimArray<unsigned int>::searchLastEqual((void *)a2, EqualWithLastEqualBounds, v56, (uint64_t)v53, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
  if (v21 != -1)
  {
    while (v19 <= v21)
    {
      uint64_t v22 = *(unsigned int *)(*(void *)a2 + 4 * v19);
      if (*(_DWORD *)(*(void *)(a1 + 256) + 4 * v22) == v22)
      {
        uint64_t v23 = *(unsigned int *)(a6 + 8);
        if (v23 == *(_DWORD *)(a6 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
          uint64_t v23 = *(unsigned int *)(a6 + 8);
        }
        *(_DWORD *)(*(void *)a6 + 4 * v23) = v22;
        ++*(_DWORD *)(a6 + 8);
      }
      ++v19;
    }
  }
  DgnString::DgnString((DgnString *)&v51, a4);
  DgnString::operator+=((DgnString *)&v51, a5);
  if (v52) {
    uint64_t v24 = v51;
  }
  else {
    uint64_t v24 = &unk_2140A60F6;
  }
  uint64_t v25 = *(CollMgr **)a1;
  v48[0] = v24;
  v48[1] = a1;
  _DWORD v48[2] = v25;
  __int16 v49 = v14;
  char v50 = 1;
  uint64_t v47 = 0;
  unsigned int v26 = DgnPrimArray<unsigned int>::searchFirstEqualWithLastEqualBounds((void *)a2, v19, v56, (uint64_t)v48, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp, (_DWORD *)&v47 + 1, (int *)&v47);
  unsigned int v31 = v26;
  if (v21 == -1) {
    unsigned int v32 = v19;
  }
  else {
    unsigned int v32 = v21 + 1;
  }
  if (v26 == -1) {
    goto LABEL_49;
  }
  uint64_t v46 = v8;
  unsigned int v33 = DgnPrimArray<unsigned int>::searchLastEqual((void *)a2, HIDWORD(v47), v47, (uint64_t)v48, (uint64_t (*)(uint64_t, uint64_t))WordIdCollSearchCmp);
  if (v31 <= v33)
  {
    unsigned int v34 = v31;
    do
    {
      uint64_t v35 = *(unsigned int *)(*(void *)a2 + 4 * v34);
      if (*(_DWORD *)(*(void *)(a1 + 256) + 4 * v35) == v35)
      {
        uint64_t v36 = *(unsigned int *)(a6 + 8);
        if (v36 == *(_DWORD *)(a6 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
          uint64_t v36 = *(unsigned int *)(a6 + 8);
        }
        *(_DWORD *)(*(void *)a6 + 4 * v36) = v35;
        ++*(_DWORD *)(a6 + 8);
      }
      ++v34;
    }
    while (v34 <= v33);
  }
  if (v31 <= v32)
  {
    unsigned int v32 = v33 + 1;
    uint64_t v8 = v46;
LABEL_49:
    BOOL v37 = v32 < *(_DWORD *)(a2 + 8)
       && CollMgr::collPrefixcmpUns8(*(CollMgr **)a1, v14, (CharInfo *)(*(void *)(a1 + 224)+ *(unsigned int *)(*(void *)(a1 + 200)+ 4 * *(unsigned int *)(*(void *)a2 + 4 * v32))), (CharInfo *)a4, v27, v28, v29, v30) == 0;
    goto LABEL_52;
  }
  BOOL v37 = 1;
  uint64_t v8 = v46;
LABEL_52:
  *uint64_t v8 = v37;
  DgnString::~DgnString((DgnString *)&v51);
}

void sub_213F51C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnPrimArray<unsigned int>::searchFirstEqualWithLastEqualBounds(void *a1, int a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), _DWORD *a6, int *a7)
{
  uint64_t v7 = 0xFFFFFFFFLL;
  if (a3)
  {
    int v10 = a2;
    *a6 = -1;
    *a7 = a3;
    if (a3 > a2)
    {
      uint64_t v14 = (a3 - 1);
      do
      {
        int v15 = v14 + v10;
        if ((int)v14 + v10 < 0 != __OFADD__(v14, v10)) {
          ++v15;
        }
        uint64_t v7 = (v15 >> 1);
        int v16 = a5(*a1 + 4 * v7, a4);
        if (v16)
        {
          if (v16 < 0)
          {
            int v10 = v7 + 1;
            uint64_t v7 = v14;
          }
          else
          {
            *a7 = v7;
            uint64_t v7 = (v7 - 1);
          }
        }
        else
        {
          if ((int)v7 > *a6) {
            *a6 = v7;
          }
          if (v14 == v10) {
            return v7;
          }
        }
        uint64_t v14 = v7;
      }
      while (v10 <= (int)v7);
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

uint64_t DgnPrimArray<unsigned int>::searchLastEqual(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = 0xFFFFFFFFLL;
  if (a3)
  {
    uint64_t v6 = a2;
    if (a3 > (int)a2)
    {
      int v10 = a3 - 1;
      do
      {
        int v11 = v10 + v6;
        if (v10 + (int)v6 < 0 != __OFADD__(v10, v6)) {
          ++v11;
        }
        unsigned int v12 = v11 >> 1;
        if (v6 == v10 - 1) {
          uint64_t v5 = v10;
        }
        else {
          uint64_t v5 = v12;
        }
        int v13 = a5(*a1 + 4 * v5, a4);
        if (v13)
        {
          if (v13 < 0)
          {
            uint64_t v5 = (v5 + 1);
          }
          else
          {
            int v10 = v5 - 1;
            uint64_t v5 = v6;
          }
        }
        else if (v10 == v6)
        {
          return v5;
        }
        uint64_t v6 = v5;
      }
      while ((int)v5 <= v10);
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t WordList::getWordsWithCommonPron(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return WordIdPronCollArray::getWordsWithCommonPron((uint64_t *)(a1 + 352), a2, a3);
}

void WordList::verifyValid(WordList *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 97) <= a2 || !*(unsigned char *)(*((void *)this + 13) + a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2699, (uint64_t)"word/wordlist", 2, (uint64_t)"%d", a7, a8, a2);
  }
}

void WordList::verifyVisible(WordList *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 97) <= a2
    || !*(unsigned char *)(*((void *)this + 13) + a2)
    || *(_DWORD *)(*((void *)this + 32) + 4 * a2) != a2)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2704, (uint64_t)"word/wordlist", 2, (uint64_t)"%d", a7, a8, a2);
  }
}

void WordList::verifyModifiable(WordList *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  if (*(_WORD *)(*((void *)this + 19) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2711, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"modify");
  }
  if (*(_WORD *)(*((void *)this + 21) + 2 * v9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2713, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"modify");
  }
  if (*(_WORD *)(*((void *)this + 23) + 2 * v9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2715, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"modify");
  }
}

void WordList::verifyDeletable(WordList *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  if (*(_WORD *)(*((void *)this + 15) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2721, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  }
  if (*(_WORD *)(*((void *)this + 17) + 2 * v9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2723, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  }
  if (*(_WORD *)(*((void *)this + 19) + 2 * v9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2725, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  }
  if (*(_WORD *)(*((void *)this + 21) + 2 * v9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2727, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  }
  if (*(_WORD *)(*((void *)this + 23) + 2 * v9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 2729, (uint64_t)"word/wordlist", 4, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete");
  }
}

uint64_t WordList::addWord(WordList *this, CharInfo *a2, uint64_t a3, char a4, char a5, const char *a6)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v6 = WordList::addWordInternal((uint64_t)this, (const unsigned __int8 *)1, 0xFFFFFFLL, (unsigned int *)0xFFFFFF, 0xFFFFFFFFLL, a2, a3, (uint64_t)v8, a4, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v8);
  return v6;
}

void sub_213F52200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordList::getFreeId(WordList *this)
{
  int v2 = *((_DWORD *)this + 62);
  if (v2)
  {
    unsigned int v3 = v2 - 1;
    uint64_t v4 = *(unsigned int *)(*((void *)this + 30) + 4 * v3);
    *((_DWORD *)this + 62) = v3;
    unsigned int v5 = *((_DWORD *)this + 97);
    if (v4 != v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v4 = *((unsigned int *)this + 97);
    unsigned int v5 = *((_DWORD *)this + 97);
  }
  *((_DWORD *)this + 97) = v5 + 1;
  int v6 = *((_DWORD *)this + 66);
  if (v6 == *((_DWORD *)this + 67))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 256, 1, 1);
    int v6 = *((_DWORD *)this + 66);
  }
  *((_DWORD *)this + 66) = v6 + 1;
  int v7 = *((_DWORD *)this + 28);
  if (v7 == *((_DWORD *)this + 29))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 104, 1, 1);
    int v7 = *((_DWORD *)this + 28);
  }
  *((_DWORD *)this + 28) = v7 + 1;
  int v8 = *((_DWORD *)this + 52);
  if (v8 == *((_DWORD *)this + 53))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 200, 1, 1);
    int v8 = *((_DWORD *)this + 52);
  }
  *((_DWORD *)this + 52) = v8 + 1;
  int v9 = *((_DWORD *)this + 14);
  if (v9 == *((_DWORD *)this + 15))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 48, 1, 1);
    int v9 = *((_DWORD *)this + 14);
  }
  *((_DWORD *)this + 14) = v9 + 1;
  int v10 = *((_DWORD *)this + 10);
  if (v10 == *((_DWORD *)this + 11))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 32, 1, 1);
    int v10 = *((_DWORD *)this + 10);
  }
  *((_DWORD *)this + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v10 + 1;
  BitArray::add((WordList *)((char *)this + 624), 0);
  BitArray::add((WordList *)((char *)this + 640), 0);
  if (*((_DWORD *)this + 98) >= 2u)
  {
    unsigned int v11 = *((_DWORD *)this + 108);
    if (v11 == *((_DWORD *)this + 109))
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 424, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 108);
    }
    *(unsigned char *)(*((void *)this + 53) + v11) = -2;
    ++*((_DWORD *)this + 108);
  }
  if (*((_DWORD *)this + 99) >= 2u)
  {
    unsigned int v12 = *((_DWORD *)this + 112);
    if (v12 == *((_DWORD *)this + 113))
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 440, 1, 1);
      unsigned int v12 = *((_DWORD *)this + 112);
    }
    *(unsigned char *)(*((void *)this + 55) + v12) = -2;
    ++*((_DWORD *)this + 112);
  }
  int v13 = *((_DWORD *)this + 138);
  if (v13) {
    BitArray::addSize((WordList *)((char *)this + 576), v13);
  }
  int v14 = *((_DWORD *)this + 32);
  if (v14 == *((_DWORD *)this + 33))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 120, 1, 1);
    int v14 = *((_DWORD *)this + 32);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v14 + 1;
  int v15 = *((_DWORD *)this + 36);
  if (v15 == *((_DWORD *)this + 37))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 136, 1, 1);
    int v15 = *((_DWORD *)this + 36);
  }
  *((_DWORD *)this + 36) = v15 + 1;
  int v16 = *((_DWORD *)this + 150);
  if (v16 == *((_DWORD *)this + 151))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 592, 1, 1);
    int v16 = *((_DWORD *)this + 150);
  }
  *((_DWORD *)this + 15pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v16 + 1;
  int v17 = *((_DWORD *)this + 154);
  if (v17 == *((_DWORD *)this + 155))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 608, 1, 1);
    int v17 = *((_DWORD *)this + 154);
  }
  *((_DWORD *)this + 154) = v17 + 1;
  int v18 = *((_DWORD *)this + 40);
  if (v18 == *((_DWORD *)this + 41))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 152, 1, 1);
    int v18 = *((_DWORD *)this + 40);
  }
  *((_DWORD *)this + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v18 + 1;
  int v19 = *((_DWORD *)this + 44);
  if (v19 == *((_DWORD *)this + 45))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 168, 1, 1);
    int v19 = *((_DWORD *)this + 44);
  }
  *((_DWORD *)this + 44) = v19 + 1;
  int v20 = *((_DWORD *)this + 48);
  if (v20 == *((_DWORD *)this + 49))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 184, 1, 1);
    int v20 = *((_DWORD *)this + 48);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v20 + 1;
  WordList::invalidateId(this, v5);
  return v4;
}

void WordList::getTagBits(WordList *this, unsigned int a2, int a3, BitArray *a4)
{
  if (a3) {
    BitArray::getBitsFromRange((WordList *)((char *)this + 576), a4, *((_DWORD *)this + 138) * a2, *((_DWORD *)this + 138) * a2 + *((_DWORD *)this + 138));
  }
  else {
    TagBitsAndStrings::getTagBits((WordList *)((char *)this + 512), a2, a4);
  }
}

uLong WordList::setPron(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7)
{
  *(_DWORD *)(a1 + 380) ^= WordList::computeWordIdPronChecksum((WordList *)a1, a2);
  uint64_t v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= 0x3FFF) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 3447, (uint64_t)"word/wordlist", 8, (uint64_t)"%u %u", v16, v17, a2);
  }
  unsigned int v36 = a4;
  unsigned int v37 = a5;
  if (a7)
  {
    if (v18 <= 1) {
      goto LABEL_10;
    }
  }
  else if (!v18)
  {
    goto LABEL_10;
  }
  if (!**(_WORD **)a3 || !*(_WORD *)(*(void *)a3 + 2 * (v18 - 1))) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/word/wordlist.cpp", 3454, (uint64_t)"word/wordlist", 37, (uint64_t)"%u", v16, v17, a2);
  }
LABEL_10:
  uint64_t v19 = a2;
  PhnMgr::verifyPhonemePron2(*(void *)(a1 + 16), a3, *(void *)(a1 + 224) + *(unsigned int *)(*(void *)(a1 + 200) + 4 * a2), 0, v14, v15, v16, v17);
  if (a6) {
    WordIdPronCollArray::remove((uint64_t *)(a1 + 352), a2);
  }
  unsigned int v38 = a2;
  *(_DWORD *)(*(void *)(a1 + 48) + 4 * a2) = *(_DWORD *)(a1 + 80);
  *(_WORD *)(*(void *)(a1 + 32) + 2 * a2) = v18;
  if (v18)
  {
    uint64_t v20 = 0;
    int v21 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 60);
    uint64_t v22 = 2 * v18;
    do
    {
      int v23 = *(unsigned __int16 *)(*(void *)a3 + v20);
      if (v23 == v21)
      {
        --*(_WORD *)(*(void *)(a1 + 32) + 2 * v19);
        *(_DWORD *)(*(void *)(a1 + 88) + 4 * ((*(_DWORD *)(a1 + 80) - 1) >> 5)) |= 1 << (*(unsigned char *)(a1 + 80) - 1);
      }
      else
      {
        unsigned int v24 = *(_DWORD *)(a1 + 80);
        if (v24 == *(_DWORD *)(a1 + 84))
        {
          DgnPrimArray<short>::reallocElts(a1 + 72, 1, 1);
          unsigned int v24 = *(_DWORD *)(a1 + 80);
        }
        *(_WORD *)(*(void *)(a1 + 72) + 2 * vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v23;
        *(_DWORD *)(a1 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v24 + 1;
        BitArray::add((BitArray *)(a1 + 88), 0);
      }
      v20 += 2;
    }
    while (v22 != v20);
  }
  WordList::setEndPhonesInfo((void *)a1, v38);
  if (a6) {
    WordIdPronCollArray::add((WordIdPronCollArray *)(a1 + 352), v38);
  }
  WordList::setPronPredecessorSeedCategory((WordList *)a1, v38, v36, v25, v26, v27, v28, v29);
  WordList::setPronSuccessorSeedCategory((WordList *)a1, v38, v37, v30, v31, v32, v33, v34);
  uLong result = WordList::computeWordIdPronChecksum((WordList *)a1, v38);
  *(_DWORD *)(a1 + 380) ^= result;
  return result;
}

uint64_t WordList::addClientPronsAvoidDuplicates(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, void *a7, int a8, uint64_t a9, uint64_t a10)
{
  int v13 = a2;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  WordList::lookupAll(a1, a1[28] + *(unsigned int *)(a1[25] + 4 * *(unsigned int *)(a1[32] + 4 * a2)), (uint64_t)&v53, 0, 0);
  uint64_t v15 = *(unsigned int *)(a1[25] + 4 * v13);
  uint64_t v16 = a1[28];
  int v46 = v54;
  v52[0] = 0;
  v52[1] = 0;
  int v17 = *(unsigned __int16 *)(a1[4] + 2 * v13);
  v51[0] = 0;
  v51[1] = 0;
  if (*((_DWORD *)a5 + 2))
  {
    unint64_t v18 = 0;
    int v19 = 0;
    uint64_t v20 = a10;
    uint64_t v41 = (CharInfo *)(v16 + v15);
    int v44 = ~(1 << (char)v13);
    uint64_t v43 = v13 >> 5;
    int v42 = v17;
    do
    {
      uint64_t v21 = *a5;
      uint64_t v22 = (uint64_t *)(*a5 + 16 * v18);
      if (v17 || v18)
      {
        if (v19 == a8 || v19 + v46 == 254) {
          break;
        }
        uint64_t v25 = a3;
        uint64_t v26 = a5;
        uint64_t v27 = v13;
        uint64_t v28 = a4;
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        if (v54)
        {
          uint64_t v29 = 0;
          uint64_t v30 = (_DWORD *)(v21 + 16 * v18 + 8);
          while (1)
          {
            WordList::getPronWithWB(a1, *(_DWORD *)(v53 + 4 * v29), (uint64_t)&v49);
            if (&v49 == v22) {
              break;
            }
            uint64_t v31 = v50;
            if (v50 == *v30)
            {
              while ((int)v31 >= 1)
              {
                int v32 = *(unsigned __int16 *)(v49 - 2 + 2 * v31);
                int v33 = *(unsigned __int16 *)(*v22 - 2 + 2 * v31--);
                if (v32 != v33) {
                  goto LABEL_20;
                }
              }
              break;
            }
LABEL_20:
            if (++v29 >= (unint64_t)v54) {
              goto LABEL_21;
            }
          }
          a4 = v28;
          int v13 = v27;
          a5 = v26;
          a3 = v25;
          int v17 = v42;
        }
        else
        {
LABEL_21:
          a4 = v28;
          int v13 = v27;
          a5 = v26;
          a3 = v25;
          int v17 = v42;
          if (a10)
          {
            uint64_t v34 = *(unsigned int *)(a10 + 8);
            if (v34 == *(_DWORD *)(a10 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a10, 1, 1);
              uint64_t v34 = *(unsigned int *)(a10 + 8);
            }
            *(_DWORD *)(*(void *)a10 + 4 * v34) = v18;
            ++*(_DWORD *)(a10 + 8);
          }
          int v35 = v19 + 1;
          if (v42) {
            char v36 = v19 + 1;
          }
          else {
            char v36 = v19;
          }
          unsigned int v37 = WordList::addWordInternal((uint64_t)a1, (const unsigned __int8 *)1, 0xFFFFFFLL, v13, 0xFFFFFFFFLL, v41, (v36 + v46), (uint64_t)v51, 1, 1);
          uint64_t v38 = *(unsigned int *)(a4 + 8);
          if (v38 == *(_DWORD *)(a4 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a4, 1, 1);
            uint64_t v38 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(void *)a4 + 4 * v38) = v37;
          ++*(_DWORD *)(a4 + 8);
          uint64_t v39 = v54;
          if (v54 == (unint64_t)HIDWORD(v54))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v53, 1, 1);
            uint64_t v39 = v54;
          }
          *(_DWORD *)(v53 + 4 * v39) = v37;
          LODWORD(v54) = v54 + 1;
          WordList::setPron((uint64_t)a1, v37, (uint64_t)v22, *(unsigned __int8 *)(*a6 + v18), *(unsigned __int8 *)(*a7 + v18), 1, 1);
          int v19 = v35;
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
        uint64_t v20 = a10;
      }
      else
      {
        if (v20)
        {
          uint64_t v23 = *(unsigned int *)(v20 + 8);
          if (v23 == *(_DWORD *)(v20 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(v20, 1, 1);
            uint64_t v23 = *(unsigned int *)(v20 + 8);
          }
          *(_DWORD *)(*(void *)v20 + 4 * v23) = 0;
          ++*(_DWORD *)(v20 + 8);
        }
        uint64_t v24 = *(unsigned int *)(a3 + 8);
        if (v24 == *(_DWORD *)(a3 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
          uint64_t v24 = *(unsigned int *)(a3 + 8);
        }
        *(_DWORD *)(*(void *)a3 + 4 * vDgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = v13;
        ++*(_DWORD *)(a3 + 8);
        WordList::setPron((uint64_t)a1, v13, (uint64_t)v22, *(unsigned __int8 *)*a6, *(unsigned __int8 *)*a7, 1, 1);
        ++v19;
        *(_DWORD *)(a1[80] + 4 * v43) &= v44;
      }
      ++v18;
    }
    while (v18 < *((unsigned int *)a5 + 2));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v51);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v52);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
}

void sub_213F52BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 96);
  _Unwind_Resume(a1);
}

void *WordList::getPronWithWB(void *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int16 *)(result[4] + 2 * a2);
  *(_DWORD *)(a3 + 8) = 0;
  if (v3)
  {
    unsigned int v5 = result;
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = a2;
    uint64_t v9 = result[9] + 2 * *(unsigned int *)(result[6] + 4 * a2);
    do
    {
      __int16 v10 = *(_WORD *)(v9 + 2 * v7);
      if (v6 == *(_DWORD *)(a3 + 12))
      {
        uLong result = (void *)DgnPrimArray<short>::reallocElts(a3, 1, 1);
        unsigned int v6 = *(_DWORD *)(a3 + 8);
      }
      uint64_t v11 = *(void *)a3;
      *(_WORD *)(*(void *)a3 + 2 * v6++) = v10;
      *(_DWORD *)(a3 + 8) = v6;
      unsigned int v12 = v7 + *(_DWORD *)(v5[6] + 4 * v8);
      if ((*(_DWORD *)(v5[11] + 4 * (v12 >> 5)) >> v12))
      {
        __int16 v13 = *(_WORD *)(v5[2] + 60);
        if (v6 == *(_DWORD *)(a3 + 12))
        {
          uLong result = (void *)DgnPrimArray<short>::reallocElts(a3, 1, 1);
          unsigned int v6 = *(_DWORD *)(a3 + 8);
          uint64_t v11 = *(void *)a3;
        }
        *(_WORD *)(v11 + 2 * v6++) = v13;
        *(_DWORD *)(a3 + 8) = v6;
      }
      ++v7;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t WordList::getNumClientProns(WordList *this, unsigned int a2)
{
  if (!*(_WORD *)(*((void *)this + 4) + 2 * a2)) {
    return 0;
  }
  unsigned int v5 = 0;
  v4[0] = 0;
  v4[1] = 0;
  WordList::lookupAll((uint64_t *)this, *((void *)this + 28) + *(unsigned int *)(*((void *)this + 25) + 4 * a2), (uint64_t)v4, 0, &v5);
  uint64_t v2 = v5;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v4);
  return v2;
}

void sub_213F52D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordList::deleteWordClientProns(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(void *)(a1 + 224) + *(unsigned int *)(*(void *)(a1 + 200) + 4 * a2);
  WordList::verifyModifiable((WordList *)a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v27, (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
  unsigned int v14 = v28;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  WordList::lookupAll((uint64_t *)a1, v13, (uint64_t)&v25, 0, 0);
  if (v26 == v14)
  {
    if (v14 >= 2)
    {
      unsigned int v15 = *(_DWORD *)(a5 + 8);
      unsigned int v16 = v14 - 1;
      do
      {
        int v17 = *((_DWORD *)v25 + v16);
        if (v15 == *(_DWORD *)(a5 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
          unsigned int v15 = *(_DWORD *)(a5 + 8);
        }
        *(_DWORD *)(*(void *)a5 + 4 * v15) = v17;
        unsigned int v15 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v15;
      }
      while ((unint64_t)(v16-- & 0xFFFFFFFE));
      if (!HIDWORD(v26))
      {
        v24[0] = 0;
        HIDWORD(v26) = realloc_array(v25, v24, 4uLL, 4 * v26, 4 * v26, 1) >> 2;
        uint64_t v25 = v24[0];
      }
      unsigned int v14 = 1;
      LODWORD(v26) = 1;
    }
    DgnPrimArray<int>::copyArraySlice(a4, (uint64_t *)&v25, 0, v14);
    v24[0] = 0;
    v24[1] = 0;
    WordList::setPron(a1, a2, (uint64_t)v24, *(unsigned __int8 *)(a1 + 419), *(unsigned __int8 *)(a1 + 420), 1, 1);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  }
  else if (v14)
  {
    unsigned int v19 = *(_DWORD *)(a5 + 8);
    unsigned int v20 = v14 - 1;
    do
    {
      int v21 = *(_DWORD *)(v27 + 4 * v20);
      if (v19 == *(_DWORD *)(a5 + 12))
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        unsigned int v19 = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v19) = v21;
      unsigned int v19 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v19;
    }
    while ((unint64_t)v20--);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
}

void sub_213F52F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void WordList::invalidateId(WordList *this, unsigned int a2)
{
  *(_DWORD *)(*((void *)this + 32) + 4 * a2) = 0xFFFFFF;
  *(unsigned char *)(*((void *)this + 13) + a2) = 0;
  *(_DWORD *)(*((void *)this + 25) + 4 * a2) = 0;
  *(_DWORD *)(*((void *)this + 6) + 4 * a2) = 0;
  uint64_t v4 = a2;
  *(_WORD *)(*((void *)this + 4) + 2 * a2) = 0;
  if (*((_DWORD *)this + 98) >= 2u) {
    *(unsigned char *)(*((void *)this + 53) + a2) = *((unsigned char *)this + 419);
  }
  if (*((_DWORD *)this + 99) >= 2u) {
    *(unsigned char *)(*((void *)this + 55) + a2) = *((unsigned char *)this + 420);
  }
  unsigned int v5 = a2 >> 5;
  *(_DWORD *)(*((void *)this + 78) + 4 * v5) &= ~(1 << a2);
  *(_DWORD *)(*((void *)this + 80) + 4 * v5) &= ~(1 << a2);
  int v6 = *((_DWORD *)this + 138);
  if (v6) {
    BitArray::clearRange((WordList *)((char *)this + 576), v6 * a2, v6 * a2 + v6);
  }
  if (*((_DWORD *)this + 132) > a2)
  {
    uint64_t v7 = *((void *)this + 65);
    if (*(_DWORD *)(v7 + 4 * v4) != -1)
    {
      *(_DWORD *)(v7 + 4 * v4) = -1;
      *((unsigned char *)this + 512) = 1;
    }
  }
  *(_WORD *)(*((void *)this + 15) + 2 * v4) = 0;
  *(_WORD *)(*((void *)this + 17) + 2 * v4) = 0;
  *(_WORD *)(*((void *)this + 74) + 2 * v4) = -1;
  *(_WORD *)(*((void *)this + 76) + 2 * v4) = -1;
  *(_WORD *)(*((void *)this + 19) + 2 * v4) = 0;
  *(_WORD *)(*((void *)this + 21) + 2 * v4) = 0;
  *(_WORD *)(*((void *)this + 23) + 2 * v4) = 0;
}

uint64_t WordList::resetWordList(WordList *this)
{
  *((void *)this + 47) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  }
  *((void *)this + 33) = 0;
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((void *)this + 13) = 0;
  }
  *((void *)this + 14) = 0;
  uint64_t v4 = (void *)*((void *)this + 25);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((void *)this + 25) = 0;
  }
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  unsigned int v5 = (void *)*((void *)this + 28);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((void *)this + 28) = 0;
  }
  *((void *)this + 29) = 0;
  int v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((void *)this + 4) = 0;
  }
  *((void *)this + 5) = 0;
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    MemChunkFree(v7, 0);
    *((void *)this + 6) = 0;
  }
  *((void *)this + 7) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  uint64_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    MemChunkFree(v8, 0);
    *((void *)this + 9) = 0;
  }
  *((void *)this + 1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  BitArray::releaseAll((uint64_t)this + 88);
  uint64_t v9 = (void *)*((void *)this + 74);
  if (v9)
  {
    MemChunkFree(v9, 0);
    *((void *)this + 74) = 0;
  }
  *((void *)this + 75) = 0;
  __int16 v10 = (void *)*((void *)this + 76);
  if (v10)
  {
    MemChunkFree(v10, 0);
    *((void *)this + 76) = 0;
  }
  *((void *)this + 77) = 0;
  BitArray::releaseAll((uint64_t)this + 576);
  TagBitsAndStrings::reInit((WordList *)((char *)this + 512));
  uint64_t v11 = (void *)*((void *)this + 15);
  if (v11)
  {
    MemChunkFree(v11, 0);
    *((void *)this + 15) = 0;
  }
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  unsigned int v12 = (void *)*((void *)this + 17);
  if (v12)
  {
    MemChunkFree(v12, 0);
    *((void *)this + 17) = 0;
  }
  *((void *)this + 18) = 0;
  uint64_t v13 = (void *)*((void *)this + 19);
  if (v13)
  {
    MemChunkFree(v13, 0);
    *((void *)this + 19) = 0;
  }
  *((void *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  unsigned int v14 = (void *)*((void *)this + 21);
  if (v14)
  {
    MemChunkFree(v14, 0);
    *((void *)this + 21) = 0;
  }
  *((void *)this + 22) = 0;
  unsigned int v15 = (void *)*((void *)this + 23);
  if (v15)
  {
    MemChunkFree(v15, 0);
    *((void *)this + 23) = 0;
  }
  *((void *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0;
  unsigned int v16 = (void *)*((void *)this + 30);
  if (v16)
  {
    MemChunkFree(v16, 0);
    *((void *)this + 3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  }
  *((void *)this + 31) = 0;

  return PrefiltererWordIdPronCollArray::removeAll((uint64_t)this + 352);
}

void WordList::deleteWords(EnvMgr **this, uint64_t a2, BOOL *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v11 = 0;
    do
    {
      unsigned int v12 = *(_DWORD *)(*(void *)a2 + 4 * v11);
      WordList::verifyValid((WordList *)this, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
      unsigned int ItemEnvId = EnvMgr::getItemEnvId(this[3], v12);
      if (ItemEnvId)
      {
        EnvMgr::killEnv(this[3], ItemEnvId, v14, v15, v16, v17, v18, v19);
        EnvMgr::setItemEnvId(this[3], v12, 0, v20, v21, v22, v23, v24);
      }
      *((_DWORD *)this + 94) ^= WordList::computeWordIdNameChecksum((WordList *)this, v12);
      *((_DWORD *)this + 95) ^= WordList::computeWordIdPronChecksum((WordList *)this, v12);
      ++v11;
    }
    while (v11 < *(unsigned int *)(a2 + 8));
  }
  WordIdPronCollArray::removeArray((uint64_t)(this + 44), a2);
  DgnCollArray<unsigned int,WordList>::removeArray((uint64_t)(this + 34), a2);
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v25 = 0;
    do
    {
      uint64_t v26 = *(unsigned int *)(*(void *)a2 + 4 * v25);
      *((_DWORD *)this + 16) += *((unsigned __int16 *)this[4] + v26);
      if (*((_DWORD *)this[32] + v26) == v26)
      {
        --*((_DWORD *)this + 96);
        uint64_t v27 = this[25];
        uint64_t v28 = this[28];
        *((_DWORD *)this + 54) += strlen((const char *)v28 + *((unsigned int *)v27 + v26)) + 1;
        *((unsigned char *)v28 + *((unsigned int *)v27 + v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6)) = 0;
        if (*((_WORD *)this[4] + v26)) {
          *((_WORD *)this[9] + *((unsigned int *)this[6] + v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6)) = *((_WORD *)this[2] + 28);
        }
      }
      WordList::invalidateId((WordList *)this, v26);
      uint64_t v29 = *((unsigned int *)this + 62);
      if (v29 == *((_DWORD *)this + 63))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)(this + 30), 1, 1);
        uint64_t v29 = *((unsigned int *)this + 62);
      }
      *((_DWORD *)this[30] + v29) = v26;
      ++*((_DWORD *)this + 62);
      ++v25;
    }
    while (v25 < *(unsigned int *)(a2 + 8));
  }
  if (*((_WORD *)this + 109) || *((_DWORD *)this + 16) >= 0x10000u)
  {
    WordList::compact((uint64_t)this);
    if (*((unsigned char *)this + 512)) {
      TagBitsAndStrings::compact((TagBitsAndStrings *)(this + 64));
    }
  }
  int v30 = *((_DWORD *)this + 72);
  if (!v30) {
    WordList::resetWordList((WordList *)this);
  }
  *a3 = v30 == 0;
}

uint64_t *WordList::getNumProns(uint64_t *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  if (*(_WORD *)(this[4] + 2 * a2))
  {
    v4[0] = 0;
    v4[1] = 0;
    WordList::lookupAll(this, this[28] + *(unsigned int *)(this[25] + 4 * a2), (uint64_t)v4, a3, a4);
    return (uint64_t *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v4);
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
  }
  return this;
}

void sub_213F53500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t WordList::getPron(unint64_t result, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = result;
  uint64_t v5 = a2;
  uint64_t v6 = *(unsigned __int16 *)(*(void *)(result + 32) + 2 * a2);
  unsigned int v7 = *(_DWORD *)(a3 + 12);
  if (v6 > v7) {
    uLong result = DgnPrimArray<short>::reallocElts(a3, v6 - v7, 0);
  }
  *(_DWORD *)(a3 + 8) = v6;
  if (v6)
  {
    uint64_t v8 = (__int16 *)(*(void *)(v4 + 72) + 2 * *(unsigned int *)(*(void *)(v4 + 48) + 4 * v5));
    uint64_t v9 = *(_WORD **)a3;
    do
    {
      __int16 v10 = *v8++;
      *v9++ = v10;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t WordList::getWordFamilyCollatedSeedableProns(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  WordList::lookupAll((uint64_t *)a1, *(void *)(a1 + 224)+ *(unsigned int *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)(*(void *)(a1 + 256) + 4 * a2)), (uint64_t)&v25, 0, 0);
  unint64_t v9 = v26;
  if (v26)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a4;
    do
    {
      uint64_t v12 = *(unsigned int *)(v25 + 4 * v10);
      if (!a3
        || (*(_DWORD *)(a1 + 392) < 2u ? (uint64_t v13 = 0) : (uint64_t v13 = *(unsigned __int8 *)(*(void *)(a1 + 424) + v12)),
            *(unsigned char *)(*(void *)(*(void *)(a1 + 400) + 16 * v13) + v11)))
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        WordList::getPronWithWB((void *)a1, v12, (uint64_t)&v23);
        uint64_t v14 = *(unsigned int *)(a5 + 8);
        if (v14 == *(_DWORD *)(a5 + 12))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(a5, 1, 1);
          uint64_t v14 = *(unsigned int *)(a5 + 8);
        }
        uint64_t v15 = (void *)(*(void *)a5 + 16 * v14);
        *uint64_t v15 = 0;
        v15[1] = 0;
        ++*(_DWORD *)(a5 + 8);
        unint64_t v16 = v24;
        if (v24)
        {
          unint64_t v17 = 0;
          do
          {
            int v18 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 8) + 8)
                                      + 2 * *(unsigned __int16 *)(v23 + 2 * v17));
            if (v18 != 0xFFFF)
            {
              uint64_t v19 = *(void *)a5 + 16 * (*(_DWORD *)(a5 + 8) - 1);
              uint64_t v21 = (unsigned int *)(v19 + 8);
              unsigned int v20 = *(_DWORD *)(v19 + 8);
              if (v20 == *(_DWORD *)(v19 + 12))
              {
                DgnPrimArray<short>::reallocElts(*(void *)a5 + 16 * (*(_DWORD *)(a5 + 8) - 1), 1, 1);
                unsigned int v20 = *v21;
              }
              *(_WORD *)(*(void *)v19 + 2 * v2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v18;
              *uint64_t v21 = v20 + 1;
              unint64_t v16 = v24;
            }
            ++v17;
          }
          while (v17 < v16);
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
        unint64_t v9 = v26;
      }
      ++v10;
    }
    while (v10 < v9);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
}

void sub_213F53748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordList::getRequiredWordTagsVersion(WordList *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t WordList::getOptionalWordTagsVersion(WordList *this)
{
  return *((unsigned int *)this + 115);
}

uint64_t WordList::addIncludingStateRef(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t WordList::removeIncludingStateRef(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t WordList::getIncludingStateRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((void *)this + 15) + 2 * a2);
}

uint64_t WordList::addIncludingRuleRef(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t WordList::removeIncludingRuleRef(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t WordList::getIncludingRuleRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((void *)this + 17) + 2 * a2);
}

uint64_t WordList::getIncludingLatticeRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((void *)this + 19) + 2 * a2);
}

uint64_t WordList::addIncludingPrefilterResultRef(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t WordList::removeIncludingPrefilterResultRef(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t WordList::getIncludingPrefilterResultRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((void *)this + 21) + 2 * a2);
}

uint64_t WordList::addIncludingSausageRef(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t WordList::removeIncludingSausageRef(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t WordList::getIncludingSausageRefCount(WordList *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((void *)this + 23) + 2 * a2);
}

DgnString *WordList::phonemesToStr(DgnString *result, uint64_t a2, DgnString *this)
{
  *((_DWORD *)this + 2) = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = 0;
    do
    {
      if (v6) {
        DgnString::operator+=(this, ".");
      }
      uint64_t v7 = *(void *)(*(void *)(v5 + 16) + 8) + 16 * *(unsigned __int16 *)(*(void *)a2 + 2 * v6);
      if (*(_DWORD *)(v7 + 8)) {
        uint64_t v8 = *(char **)v7;
      }
      else {
        uint64_t v8 = (char *)&unk_2140A60F6;
      }
      uLong result = DgnString::operator+=(this, v8);
      ++v6;
    }
    while (v6 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t WordList::compareElements(CollMgr **this, unsigned int *a2, unsigned int *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *this;
  unsigned int v9 = *((unsigned __int16 *)this + 8);
  uint64_t v10 = *a2;
  uint64_t v11 = *a3;
  uint64_t result = CollMgr::collStrcmpUns8(this[1], v9, (CharInfo *)(*((void *)*this + 28) + *(unsigned int *)(*((void *)*this + 25) + 4 * v10)), (CharInfo *)(*((void *)*this + 28) + *(unsigned int *)(*((void *)*this + 25) + 4 * v11)), a5, a6, a7, a8);
  if (!result)
  {
    if (v9 > 0xFFFD) {
      return *(unsigned __int8 *)(*((void *)v8 + 13) + v10)
    }
           - *(unsigned __int8 *)(*((void *)v8 + 13) + v11);
    uint64_t v13 = *((void *)v8 + 32);
    int v14 = *(_DWORD *)(v13 + 4 * v10);
    LODWORD(v13) = *(_DWORD *)(v13 + 4 * v11);
    uint64_t result = (v14 - v13);
    if (v14 == v13) {
      return *(unsigned __int8 *)(*((void *)v8 + 13) + v10)
    }
           - *(unsigned __int8 *)(*((void *)v8 + 13) + v11);
  }
  return result;
}

uint64_t HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E5278;
  *(_OWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 12;
  }
  else {
    int v7 = 16;
  }
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F53A48(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV(uint64_t a1)
{
  HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::~HashNCHV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E5278;
  if (*(_DWORD *)(a1 + 8)) {
    HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = *(char **)v5;
          int v7 = *(uint64_t (**)(void *))(v1 + 96);
          if (v7) {
            uint64_t result = v7((void *)v5 + 1);
          }
          uint64_t v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8) {
            uint64_t result = v8(v5 + 12);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t *HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::reInit(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 8)) {
    HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *(void *)(a1 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  }
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0;
  DgnPool::deleteAllWithoutDestroying((DgnPool *)(a1 + 24));
  int v5 = RoundUpToPowerOf2(a2, (unsigned int *)(a1 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t result = HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0;
  return result;
}

uint64_t HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::add(uint64_t result, int *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    uint64_t result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  }
  int v7 = *a2;
  int v8 = *(_DWORD *)(v5 + 16);
  if (v8) {
    unsigned int v9 = (-1640531527 * *a2) >> -(char)v8;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(v5 + 80);
  uint64_t v11 = *(void *)(v5 + 32);
  if (!v11)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v11 = *(void *)(v5 + 32);
    int v7 = *a2;
  }
  uint64_t v12 = (void *)(v10 + 8 * v9);
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)v11;
  *(_DWORD *)(v11 + 8) = v7;
  *(_DWORD *)(v11 + 12) = *a3;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v11 = *v12;
  }
  else
  {
    *(void *)uint64_t v11 = 0;
    uint64_t v13 = (void *)*v12;
    if (*v12)
    {
      do
      {
        uint64_t v12 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
  }
  *uint64_t v12 = v11;
  return result;
}

void DummyLanguageModel::DummyLanguageModel(DummyLanguageModel *this, int a2, const WordList *a3)
{
  LanguageModel::LanguageModel(this, a2, a3);
  *uint64_t v3 = &unk_26C4E1E50;
}

void DummyLanguageModel::printSize(DummyLanguageModel *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/dummylm.cpp", 56, (DgnString *)&v28);
  if (v29) {
    unint64_t v16 = (void *)v28;
  }
  else {
    unint64_t v16 = &unk_2140A617C;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A617C, a3, &unk_2140A617C, v16);
  DgnString::~DgnString((DgnString *)&v28);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A617C);
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  unint64_t v26 = 0;
  LanguageModel::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v28, &v27, &v26);
  *a4 += v28;
  *a5 += v27;
  *a6 += v26;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/dummylm.cpp", 60, (DgnString *)&v28);
  if (v29) {
    uint64_t v25 = (void *)v28;
  }
  else {
    uint64_t v25 = &unk_2140A617C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, a3, &unk_2140A617C, (35 - a3), (35 - a3), v25, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v28);
}

void sub_213F53EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DummyLanguageModel::dumpWordLM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void DummyLanguageModel::getWordTransducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t DummyLanguageModel::languageScore(DummyLanguageModel *this, unsigned int a2, unsigned int a3, LMStats *a4, LMContextData *a5, LMScoreDetails *a6, BOOL a7, BOOL a8, BOOL *a9)
{
  *a9 = 1;
  if (a6) {
    LMScoreDetails::addDetails((unint64_t)a6, 0, 7, 0);
  }
  return 0;
}

uint64_t DummyLanguageModel::languageScoreForSearch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  *a7 = 1;
  return 0;
}

void DummyLanguageModel::languageScoreForPrefilterer(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  unsigned int v6 = *(_DWORD *)(a3 + 12);
  unsigned int v7 = v5;
  if (v5 > v6)
  {
    DgnPrimArray<short>::reallocElts(a3, v5 - v6, 0);
    unsigned int v7 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a3 + 8) = v5;
  if (v7)
  {
    int v8 = *(void **)a3;
    bzero(v8, 2 * v7);
  }
}

uint64_t DummyLanguageModel::isFinalSilenceScoredVerify(DummyLanguageModel *this)
{
  return 0;
}

uint64_t DummyLanguageModel::canSaveAsText(DummyLanguageModel *this)
{
  return 1;
}

uint64_t DummyLanguageModel::setLMScale(uint64_t this, int a2)
{
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a2;
  return this;
}

uint64_t DummyLanguageModel::recentBufferUsesWord(DummyLanguageModel *this)
{
  return 1;
}

void DummyLanguageModel::~DummyLanguageModel(RecentBuffer **this)
{
  LanguageModel::~LanguageModel(this);

  JUMPOUT(0x216698730);
}

uint64_t *LanguageModel::createContextData(LanguageModel *this)
{
  if (!*((void *)this + 1)) {
    return 0;
  }
  uint64_t result = MemChunkAlloc(0x10uLL, 0);
  uint64_t *result = (uint64_t)&unk_26C4E0138;
  *((_DWORD *)result + 2) = 16777212;
  return result;
}

uint64_t DummyLanguageModel::getRecentBufferLanguageModel(DummyLanguageModel *this)
{
  return 0;
}

void LMContextData::~LMContextData(LMContextData *this)
{
}

uint64_t LMContextData::sizeObject(uint64_t a1, int a2)
{
  return 4 * (a2 != 3);
}

void MrecInitModule_osfile_mrecutil(void)
{
  if (!gParDebugOsFile)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugOsFile", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugOsFile = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugOsFile);
  }
  if (!gParDiagnosticShowTestReadFileInfo)
  {
    unint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticShowTestReadFileInfo", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDiagnosticShowTestReadFileInfo = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticShowTestReadFileInfo);
  }
  if (!gParDiagnosticShowTestReadFileDetails)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DiagnosticShowTestReadFileDetails", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *unsigned int v5 = &unk_26C4E0858;
    gParDiagnosticShowTestReadFileDetails = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticShowTestReadFileDetails);
  }
  if (!gParDiagnosticOsFileSimulateReadFailure)
  {
    unsigned int v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DiagnosticOsFileSimulateReadFailure", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *unsigned int v7 = &unk_26C4E0858;
    gParDiagnosticOsFileSimulateReadFailure = (uint64_t)v7;
    int v8 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v8, (GlobalParam **)&gParDiagnosticOsFileSimulateReadFailure);
  }
}

void OsFile::OsFile(OsFile *this, const FileSpec *a2, int a3)
{
  unsigned int v6 = FileSpec::FileSpec(this);
  FileSpec::operator=(v6, a2);
  *((_DWORD *)this + 4) = a3;
  *((void *)this + 3) = 0;
}

void sub_213F54390(_Unwind_Exception *a1)
{
  FileSpec::~FileSpec(v1);
  _Unwind_Resume(a1);
}

void OsFile::~OsFile(OsFile *this)
{
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x80000000) == 0)
  {
    *((_DWORD *)this + 4) = -1;
    if (close(v2))
    {
      __error();
      uint64_t v3 = __error();
      uint64_t v4 = strerror(*v3);
      DgnString::DgnString((DgnString *)&v7, v4);
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 125, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v5, v6, (char)"close");
      DgnString::~DgnString((DgnString *)&v7);
    }
  }
  FileSpec::~FileSpec(this);
}

uint64_t OsFile::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3 = FileSpec::sizeObject(a1);
  uint64_t v4 = 12;
  if (a2 == 3) {
    uint64_t v4 = 0;
  }
  return v4 + v3;
}

BOOL OsFile::deleteFileAndCleanUp(OsFile *this, std::error_code *a2)
{
  int v3 = *((_DWORD *)this + 4);
  if ((v3 & 0x80000000) == 0)
  {
    *((_DWORD *)this + 4) = -1;
    if (close(v3))
    {
      __error();
      uint64_t v4 = __error();
      uint64_t v5 = strerror(*v4);
      DgnString::DgnString((DgnString *)&v10, v5);
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 148, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v6, v7, (char)"close");
      DgnString::~DgnString((DgnString *)&v10);
    }
  }
  if (*((_DWORD *)this + 2)) {
    int v8 = *(const std::__fs::filesystem::path **)this;
  }
  else {
    int v8 = (const std::__fs::filesystem::path *)&byte_2140B33BB;
  }
  return remove(v8, a2);
}

void sub_213F545AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::seekFromBeg(OsFile *this, off_t a2)
{
  if (*((void *)this + 3) != a2)
  {
    if (lseek(*((_DWORD *)this + 4), a2, 0) < 0)
    {
      __error();
      uint64_t v4 = __error();
      uint64_t v5 = strerror(*v4);
      DgnString::DgnString((DgnString *)&v8, v5);
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 173, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v6, v7, (char)"lseek");
      DgnString::~DgnString((DgnString *)&v8);
    }
    *((void *)this + 3) = a2;
  }
}

void sub_213F546AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::seekFromBegGrowWithZeros(OsFile *this, off_t a2)
{
  if (*((void *)this + 3) != a2) {
    OsFile::seekFromBeg(this, a2);
  }
}

void OsFile::seekToEnd(OsFile *this)
{
  if (lseek(*((_DWORD *)this + 4), 0, 2) < 0)
  {
    __error();
    int v2 = __error();
    int v3 = strerror(*v2);
    DgnString::DgnString((DgnString *)&v11, v3);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 221, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v4, v5, (char)"lseek");
    DgnString::~DgnString((DgnString *)&v11);
  }
  off_t v6 = lseek(*((_DWORD *)this + 4), 0, 1);
  if (v6 < 0)
  {
    __error();
    uint64_t v7 = __error();
    uint64_t v8 = strerror(*v7);
    DgnString::DgnString((DgnString *)&v11, v8);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 225, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v9, v10, (char)"tell");
    DgnString::~DgnString((DgnString *)&v11);
  }
  *((void *)this + 3) = v6;
}

void sub_213F54858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t OsFile::tell(OsFile *this)
{
  return *((void *)this + 3);
}

ssize_t OsFile::readBytes(OsFile *this, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10 = a3;
  if (*(unsigned char *)(gParDiagnosticOsFileSimulateReadFailure + 41)) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 257, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", a7, a8, (char)"read");
  }
  ssize_t v11 = read(*((_DWORD *)this + 4), a2, v10);
  if (v11 == -1)
  {
    __error();
    uint64_t v12 = __error();
    uint64_t v13 = strerror(*v12);
    DgnString::DgnString((DgnString *)&v17, v13);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 261, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v14, v15, (char)"read");
    DgnString::~DgnString((DgnString *)&v17);
  }
  *((void *)this + 3) += v11;
  return v11;
}

void sub_213F549E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::writeBytes(OsFile *this, const char *a2, size_t __nbyte)
{
  uint64_t v4 = __nbyte;
  if (write(*((_DWORD *)this + 4), a2, __nbyte) == -1)
  {
    __error();
    uint64_t v5 = __error();
    off_t v6 = strerror(*v5);
    DgnString::DgnString((DgnString *)&v9, v6);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 303, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v7, v8, (char)"write");
    DgnString::~DgnString((DgnString *)&v9);
  }
  *((void *)this + 3) += v4;
}

void sub_213F54AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

off_t OsFile::getFileSize(OsFile *this)
{
  if (fstat(*((_DWORD *)this + 4), &v7))
  {
    __error();
    uint64_t v1 = __error();
    int v2 = strerror(*v1);
    DgnString::DgnString((DgnString *)&v6, v2);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 334, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v3, v4, (char)"fstat");
    DgnString::~DgnString((DgnString *)&v6);
  }
  return v7.st_size;
}

void sub_213F54BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::shrinkSize(OsFile *this, off_t a2)
{
  if (ftruncate(*((_DWORD *)this + 4), a2) < 0)
  {
    __error();
    uint64_t v3 = __error();
    uint64_t v4 = strerror(*v3);
    DgnString::DgnString((DgnString *)&v12, v4);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 345, (uint64_t)"mrecutil/osfile", 2, (uint64_t)"%.500s %.500s %llu %d %.500s", v5, v6, (char)"ftruncate");
    DgnString::~DgnString((DgnString *)&v12);
  }
  off_t v7 = lseek(*((_DWORD *)this + 4), 0, 1);
  if (v7 < 0)
  {
    __error();
    uint64_t v8 = __error();
    uint64_t v9 = strerror(*v8);
    DgnString::DgnString((DgnString *)&v12, v9);
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 362, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v10, v11, (char)"tell");
    DgnString::~DgnString((DgnString *)&v12);
  }
  *((void *)this + 3) = v7;
}

void sub_213F54D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OsFile::openOsFile(const FileSpec *a1, int a2)
{
  if ((a2 - 1) > 3) {
    int v3 = 0;
  }
  else {
    int v3 = dword_2140A61E0[a2 - 1];
  }
  if (*((_DWORD *)a1 + 2)) {
    uint64_t v4 = *(const char **)a1;
  }
  else {
    uint64_t v4 = &byte_2140B33BB;
  }
  unsigned int v5 = open(v4, v3, 438);
  int v8 = v5;
  if (v5 > 2)
  {
    if ((v5 & 0x80000000) != 0) {
      return;
    }
  }
  else
  {
    if (*((_DWORD *)a1 + 2)) {
      uint64_t v9 = *(char **)a1;
    }
    else {
      uint64_t v9 = &byte_2140B33BB;
    }
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 405, (uint64_t)"mrecutil/osfile", 4, (uint64_t)"%.500s %d", v6, v7, (char)v9);
  }
  uint64_t v10 = MemChunkAlloc(0x20uLL, 0);
  OsFile::OsFile((OsFile *)v10, a1, v8);
}

BOOL OsFile::fileExists(OsFile **this, const FileSpec *a2)
{
  if (*((_DWORD *)this + 2)) {
    int v2 = *this;
  }
  else {
    int v2 = (OsFile *)&byte_2140B33BB;
  }
  return OsFile::fileExists(v2, (const char *)a2);
}

BOOL OsFile::fileExists(OsFile *this, const char *a2)
{
  int v2 = access((const char *)this, 0);
  if (v2)
  {
    int v3 = __error();
    if (*v3 > 0x16 || ((1 << *v3) & 0x402004) == 0)
    {
      unsigned int v5 = strerror(*v3);
      DgnString::DgnString((DgnString *)&v9, v5);
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/osfile.cpp", 441, (uint64_t)"mrecutil/osfile", 1, (uint64_t)"%.500s %.500s %d %.500s", v6, v7, (char)"access");
      DgnString::~DgnString((DgnString *)&v9);
    }
  }
  return v2 == 0;
}

void sub_213F54F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

BOOL OsFile::dirExists(OsFile *this, const char *a2)
{
  return !stat((const char *)this, &v4) && (v4.st_mode & 0xF000) == 0x4000;
}

OsFile *DgnDelete<OsFile>(OsFile *result)
{
  if (result)
  {
    OsFile::~OsFile(result);
    return (OsFile *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t OsFile::compareElements(OsFile *this, unsigned int *a2, unsigned int *a3, const void *a4)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)this + 16 * *a2;
  if (*(_DWORD *)(v5 + 8)) {
    uint64_t v6 = *(const char **)v5;
  }
  else {
    uint64_t v6 = &byte_2140B33BB;
  }
  uint64_t v7 = v4 + 16 * *a3;
  if (*(_DWORD *)(v7 + 8)) {
    int v8 = *(const char **)v7;
  }
  else {
    int v8 = &byte_2140B33BB;
  }
  return strcmp(v6, v8);
}

uint64_t FindMatchingFiles(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  if (*(_DWORD *)(a1 + 8)) {
    uint64_t v6 = *(const char **)a1;
  }
  else {
    uint64_t v6 = &byte_2140B33BB;
  }
  uint64_t result = glob(v6, 36, 0, &v32);
  if (result) {
    BOOL v8 = result == -3;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (v32.gl_pathc)
    {
      uint64_t v9 = 0;
      unsigned int v10 = 1;
      do
      {
        uint64_t v11 = a2[2];
        if (v11 == a2[3])
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a2, 1, 1);
          uint64_t v11 = a2[2];
        }
        FileSpec::FileSpec((FileSpec *)(*(void *)a2 + 16 * v11));
        uint64_t v12 = a2[2];
        a2[2] = v12 + 1;
        FileSpec::fillFromName((FileSpec *)(*(void *)a2 + 16 * v12), v32.gl_pathv[v9]);
        if (a3)
        {
          uint64_t v13 = *(void *)a2 + 16 * (a2[2] - 1);
          if (*(_DWORD *)(v13 + 8)) {
            uint64_t v14 = *(const char **)v13;
          }
          else {
            uint64_t v14 = &byte_2140B33BB;
          }
          if (stat(v14, &v31)) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = (v31.st_mode & 0xF000) == 0x4000;
          }
          char v16 = v15;
          unsigned int v17 = *(_DWORD *)(a3 + 8);
          if (v17 == *(_DWORD *)(a3 + 12))
          {
            DgnPrimArray<char>::reallocElts(a3, 1, 1);
            unsigned int v17 = *(_DWORD *)(a3 + 8);
          }
          *(unsigned char *)(*(void *)a3 + v17) = v16;
          *(_DWORD *)(a3 + 8) = v17 + 1;
        }
        uint64_t v9 = v10;
      }
      while (v32.gl_pathc > v10++);
    }
    globfree(&v32);
    if (*(_DWORD *)(a1 + 8)) {
      uint64_t v19 = *(const char **)a1;
    }
    else {
      uint64_t v19 = &byte_2140B33BB;
    }
    unsigned int v20 = strlen(v19);
    if (v20 > 2 && v19[v20 - 3] != 47)
    {
      uint64_t v21 = v20 - 2;
      if (v19[v21] == 46 && v19[v20 - 1] == 42)
      {
        uint64_t v22 = MemChunkAlloc(v20 + 1, 0);
        uint64_t v23 = strcpy((char *)v22, v19);
        v23[v21] = 0;
        if (!stat(v23, &v31))
        {
          DgnArray<FileSpec>::add((uint64_t)a2);
          FileSpec::fillFromName((FileSpec *)(*(void *)a2 + 16 * (a2[2] - 1)), (char *)v22);
          if (a3) {
            DgnPrimArray<BOOL>::add(a3, (v31.st_mode & 0xF000) == 0x4000);
          }
        }
        MemChunkFree(v22, 0);
      }
    }
    uint64_t v24 = a2[2];
    *(void *)&v31.st_dev = 0;
    v31.st_ino = 0;
    if (v24)
    {
      int v35 = 0;
      unint64_t v25 = realloc_array(0, &v35, 4 * v24, 0, 0, 1);
      uint64_t v26 = 0;
      unint64_t v27 = v35;
      *(void *)&v31.st_dev = v35;
      LODWORD(v31.st_ino) = v24;
      HIDWORD(v31.st_ino) = v25 >> 2;
      do
      {
        v27[v26] = v26;
        ++v26;
      }
      while (v24 != v26);
      unint64_t v28 = v24;
    }
    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = 0;
    }
    mrec_qsort_r<OsFile>((uint64_t)v27, v28, 4uLL, (OsFile *)a2);
    DgnArray<FileSpec>::DgnArray(&v35, v24);
    DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)&v33, v24);
    if (v24)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      do
      {
        FileSpec::operator=((DgnString *)((char *)v35 + v29), (DgnString *)(*(void *)a2 + 16 * *(unsigned int *)(*(void *)&v31.st_dev + 4 * v30)));
        if (a3) {
          *(unsigned char *)(v33 + v3pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *(unsigned char *)(*(void *)a3 + *(unsigned int *)(*(void *)&v31.st_dev + 4 * v30));
        }
        ++v30;
        v29 += 16;
      }
      while (v28 != v30);
    }
    DgnArray<FileSpec>::releaseAll((uint64_t)a2);
    DgnArray<FileSpec>::copyArraySlice((uint64_t)a2, &v35, 0, v36);
    if (a3) {
      DgnPrimArray<BOOL>::copyArraySlice(a3, &v33, 0, v34);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
    DgnArray<FileSpec>::releaseAll((uint64_t)&v35);
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  }
  return result;
}

void sub_213F5538C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnArray<FileSpec>::releaseAll(v2 - 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

FileSpec *DgnArray<FileSpec>::add(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 12))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, 1, 1);
    unsigned int v2 = *(_DWORD *)(a1 + 8);
  }
  uint64_t result = FileSpec::FileSpec((FileSpec *)(*(void *)a1 + 16 * v2));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t DgnPrimArray<BOOL>::add(unint64_t result, char a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    uint64_t result = DgnPrimArray<char>::reallocElts(result, 1, 1);
    unsigned int v4 = *(_DWORD *)(v3 + 8);
  }
  *(unsigned char *)(*(void *)v3 + v4) = a2;
  *(_DWORD *)(v3 + 8) = v4 + 1;
  return result;
}

uint64_t mrec_qsort_r<OsFile>(uint64_t result, unint64_t a2, unint64_t a3, OsFile *a4)
{
  unsigned int v4 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = (unsigned int *)result;
  uint64_t v8 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v9 = 2;
  }
  else {
    int v9 = a3 != 8;
  }
  BOOL v113 = ((result | a3) & 7) == 0;
  int v114 = v9;
  if (a2 < 7)
  {
LABEL_117:
    if ((uint64_t)(v6 * a3) > (uint64_t)a3)
    {
      uint64_t v79 = v4;
      uint64_t v111 = (unsigned int *)((char *)v7 + v6 * a3);
      uint64_t v80 = (unsigned int *)((char *)v7 + a3);
      uint64_t v81 = v7;
      do
      {
        if (v80 > v7)
        {
          uint64_t v82 = v81;
          uint64_t v83 = v80;
          do
          {
            uint64_t v84 = v83;
            uint64_t v83 = (unsigned int *)((char *)v83 + v8);
            uint64_t result = OsFile::compareElements(v79, v83, v84, a4);
            if ((int)result < 1) {
              break;
            }
            if (v114)
            {
              if (v113)
              {
                uint64_t v85 = 0;
                uint64_t v86 = (uint64_t)v82 + a3;
                do
                {
                  uint64_t v87 = *(void *)(v86 + 8 * v85);
                  *(void *)(v86 + 8 * v85) = *(void *)&v82[2 * v85];
                  *(void *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                uint64_t v89 = 0;
                uint64_t v90 = (uint64_t)v82 + a3;
                do
                {
                  char v91 = *(unsigned char *)(v90 + v89);
                  *(unsigned char *)(v90 + v89) = *((unsigned char *)v82 + v89);
                  *((unsigned char *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              uint64_t v88 = *(void *)v84;
              *(void *)uint64_t v84 = *(void *)v83;
              *(void *)uint64_t v83 = v88;
            }
            uint64_t v82 = (unsigned int *)((char *)v82 + v8);
          }
          while (v83 > v7);
        }
        uint64_t v80 = (unsigned int *)((char *)v80 + a3);
        uint64_t v81 = (unsigned int *)((char *)v81 + a3);
      }
      while (v80 < v111);
    }
    return result;
  }
  BOOL v107 = a3 != 8;
  unint64_t v10 = a3 >> 3;
  while (1)
  {
    uint64_t v11 = (unsigned int *)((char *)v7 + (v6 >> 1) * a3);
    if (v6 == 7) {
      goto LABEL_44;
    }
    uint64_t v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
    if (v6 >= 0x29)
    {
      uint64_t v108 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
      unint64_t v13 = (v6 >> 3) * a3;
      uint64_t v14 = (unsigned int *)((char *)v7 + v13);
      unint64_t v105 = v13;
      BOOL v15 = (unsigned int *)((char *)v7 + 2 * v13);
      int v16 = OsFile::compareElements(v4, v7, (unsigned int *)((char *)v7 + v13), a4);
      uint64_t v109 = v14;
      int v18 = OsFile::compareElements(v4, v14, v15, v17);
      if (v16 < 0)
      {
        if ((v18 & 0x80000000) == 0)
        {
          if ((int)OsFile::compareElements(v4, v7, v15, v19) >= 0) {
            unsigned int v20 = v7;
          }
          else {
            unsigned int v20 = v15;
          }
          goto LABEL_18;
        }
      }
      else if (v18 <= 0)
      {
        if ((int)OsFile::compareElements(v4, v7, v15, v19) >= 0) {
          unsigned int v20 = v15;
        }
        else {
          unsigned int v20 = v7;
        }
LABEL_18:
        uint64_t v109 = v20;
      }
      unint64_t v22 = (v6 >> 3) * a3;
      uint64_t v23 = (unsigned int *)((char *)v11 + v105);
      uint64_t v104 = (unsigned int *)((char *)v11 - v105);
      int v24 = OsFile::compareElements(v4, (unsigned int *)((char *)v11 - v105), (unsigned int *)((char *)v7 + (v6 >> 1) * a3), v19);
      int v26 = OsFile::compareElements(v4, (unsigned int *)((char *)v7 + (v6 >> 1) * a3), (unsigned int *)((char *)v11 + v105), v25);
      if (v24 < 0)
      {
        if ((v26 & 0x80000000) == 0)
        {
          uint64_t v11 = (unsigned int *)((char *)v11 - v105);
          if ((int)OsFile::compareElements(v4, v104, v23, v27) < 0) {
            uint64_t v11 = v23;
          }
        }
      }
      else if (v26 <= 0)
      {
        uint64_t v11 = (unsigned int *)((char *)v11 - v105);
        if ((int)OsFile::compareElements(v4, v104, v23, v27) >= 0) {
          uint64_t v11 = v23;
        }
      }
      uint64_t v12 = (unsigned int *)((char *)v108 - v105);
      unsigned int v106 = (unsigned int *)((char *)v108 - 2 * v105);
      int v28 = OsFile::compareElements(v4, (unsigned int *)((char *)v108 - 2 * v22), (unsigned int *)((char *)v108 - v22), v27);
      int v30 = OsFile::compareElements(v4, (unsigned int *)((char *)v108 - v22), v108, v29);
      if (v28 < 0)
      {
        uint64_t v21 = v109;
        if ((v30 & 0x80000000) == 0)
        {
          uint64_t v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
          if ((int)OsFile::compareElements(v4, v106, v108, a4) >= 0) {
            uint64_t v12 = v106;
          }
        }
      }
      else
      {
        uint64_t v21 = v109;
        if (v30 <= 0)
        {
          uint64_t v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
          if ((int)OsFile::compareElements(v4, v106, v108, a4) < 0) {
            uint64_t v12 = v106;
          }
        }
      }
      goto LABEL_35;
    }
    uint64_t v21 = v7;
LABEL_35:
    int v31 = OsFile::compareElements(v4, v21, v11, a4);
    uint64_t result = OsFile::compareElements(v4, v11, v12, v32);
    if (v31 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = OsFile::compareElements(v4, v21, v12, a4);
        if ((int)result >= 0) {
          uint64_t v11 = v21;
        }
        else {
          uint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = OsFile::compareElements(v4, v21, v12, a4);
      if ((int)result >= 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = v21;
      }
    }
LABEL_44:
    if (v114)
    {
      if (v113)
      {
        uint64_t v33 = v7;
        unint64_t v34 = a3 >> 3;
        do
        {
          uint64_t v35 = *(void *)v33;
          *(void *)uint64_t v33 = *(void *)v11;
          v33 += 2;
          *(void *)uint64_t v11 = v35;
          v11 += 2;
          --v34;
        }
        while (v34);
      }
      else
      {
        unint64_t v37 = a3;
        uint64_t v38 = v7;
        do
        {
          char v39 = *(unsigned char *)v38;
          *(unsigned char *)uint64_t v38 = *(unsigned char *)v11;
          uint64_t v38 = (unsigned int *)((char *)v38 + 1);
          *(unsigned char *)uint64_t v11 = v39;
          uint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      uint64_t v36 = *(void *)v7;
      *(void *)uint64_t v7 = *(void *)v11;
      *(void *)uint64_t v11 = v36;
    }
    int v40 = 0;
    uint64_t v41 = (void *)((char *)v7 + a3);
    unint64_t v110 = v6;
    int v42 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
    uint64_t v43 = v42;
    int v44 = (unsigned int *)((char *)v7 + a3);
LABEL_53:
    while (v44 <= v43)
    {
      uint64_t result = OsFile::compareElements(v4, v44, v7, a4);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v45 = 0;
            do
            {
              uint64_t v46 = v41[v45];
              v41[v45] = *(void *)&v44[2 * v45];
              *(void *)&v44[2 * v45++] = v46;
            }
            while (v10 != v45);
          }
          else
          {
            uint64_t v55 = 0;
            do
            {
              char v56 = *((unsigned char *)v41 + v55);
              *((unsigned char *)v41 + v55) = *((unsigned char *)v44 + v55);
              *((unsigned char *)v44 + v55++) = v56;
            }
            while (a3 != v55);
          }
        }
        else
        {
          uint64_t v54 = *v41;
          *uint64_t v41 = *(void *)v44;
          *(void *)int v44 = v54;
        }
        uint64_t v41 = (void *)((char *)v41 + a3);
        int v40 = 1;
      }
      int v44 = (unsigned int *)((char *)v44 + a3);
    }
    while (v44 <= v43)
    {
      uint64_t result = OsFile::compareElements(v4, v43, v7, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v52 = 0;
            do
            {
              uint64_t v53 = *(void *)&v44[2 * v52];
              *(void *)&v44[2 * v52] = *(void *)&v43[2 * v52];
              *(void *)&v43[2 * v52++] = v53;
            }
            while (v10 != v52);
          }
          else
          {
            uint64_t v58 = 0;
            do
            {
              char v59 = *((unsigned char *)v44 + v58);
              *((unsigned char *)v44 + v58) = *((unsigned char *)v43 + v58);
              *((unsigned char *)v43 + v58++) = v59;
            }
            while (a3 != v58);
          }
        }
        else
        {
          uint64_t v57 = *(void *)v44;
          *(void *)int v44 = *(void *)v43;
          *(void *)uint64_t v43 = v57;
        }
        int v44 = (unsigned int *)((char *)v44 + a3);
        uint64_t v43 = (unsigned int *)((char *)v43 + v8);
        int v40 = 1;
        goto LABEL_53;
      }
      if (!result)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v47 = 0;
            do
            {
              uint64_t v48 = *(void *)&v43[2 * v47];
              *(void *)&v43[2 * v47] = *(void *)&v42[2 * v47];
              *(void *)&v42[2 * v47++] = v48;
            }
            while (v10 != v47);
          }
          else
          {
            uint64_t v50 = 0;
            do
            {
              char v51 = *((unsigned char *)v43 + v50);
              *((unsigned char *)v43 + v5pthread_rwlock_init((pthread_rwlock_t *)this, 0) = *((unsigned char *)v42 + v50);
              *((unsigned char *)v42 + v50++) = v51;
            }
            while (a3 != v50);
          }
        }
        else
        {
          uint64_t v49 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v42;
          *(void *)int v42 = v49;
        }
        int v42 = (unsigned int *)((char *)v42 + v8);
        int v40 = 1;
      }
      uint64_t v43 = (unsigned int *)((char *)v43 + v8);
    }
    unsigned int v60 = (unsigned int *)((char *)v7 + v110 * a3);
    if (!v40) {
      break;
    }
    int64_t v61 = (char *)v44 - (char *)v41;
    if ((char *)v41 - (char *)v7 >= (char *)v44 - (char *)v41) {
      unint64_t v62 = (char *)v44 - (char *)v41;
    }
    else {
      unint64_t v62 = (char *)v41 - (char *)v7;
    }
    if (v62)
    {
      if (v113)
      {
        uint64_t v63 = (void *)((char *)v44 - v62);
        unint64_t v64 = v62 >> 3;
        uint64_t v65 = v7;
        do
        {
          uint64_t v66 = *(void *)v65;
          *(void *)uint64_t v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        uint64_t v67 = -(uint64_t)v62;
        uint64_t v68 = v7;
        do
        {
          char v69 = *(unsigned char *)v68;
          *(unsigned char *)uint64_t v68 = *((unsigned char *)v44 + v67);
          uint64_t v68 = (unsigned int *)((char *)v68 + 1);
          *((unsigned char *)v44 + v67) = v69;
          BOOL v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    int64_t v71 = (char *)v42 - (char *)v43;
    if ((char *)v42 - (char *)v43 >= (char *)v60 - ((char *)v42 + a3)) {
      unint64_t v72 = (char *)v60 - ((char *)v42 + a3);
    }
    else {
      unint64_t v72 = (char *)v42 - (char *)v43;
    }
    if (v72)
    {
      if (v113)
      {
        uint64_t v73 = (char *)v60 - v72;
        unint64_t v74 = v72 >> 3;
        do
        {
          uint64_t v75 = *(void *)v44;
          *(void *)int v44 = *(void *)v73;
          v44 += 2;
          *(void *)uint64_t v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v76 = -(uint64_t)v72;
        do
        {
          char v77 = *(unsigned char *)v44;
          *(unsigned char *)int v44 = *((unsigned char *)v60 + v76);
          int v44 = (unsigned int *)((char *)v44 + 1);
          *((unsigned char *)v60 + v76) = v77;
          BOOL v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<OsFile>(v7, v61 / a3, a3, a4);
    }
    if (v71 <= (uint64_t)a3) {
      return result;
    }
    uint64_t v7 = (unsigned int *)((char *)v60 - v71);
    unint64_t v6 = v71 / a3;
    int v78 = v107;
    if ((((v60 - v71) | a3) & 7) != 0) {
      int v78 = 2;
    }
    BOOL v113 = (((v60 - v71) | a3) & 7) == 0;
    int v114 = v78;
    unsigned int v4 = a4;
    if (v6 < 7) {
      goto LABEL_117;
    }
  }
  int v92 = (unsigned int *)((char *)v7 + a3);
  if ((uint64_t)(v110 * a3) > (uint64_t)a3)
  {
    unsigned int v93 = v7;
    do
    {
      if (v92 > v7)
      {
        BOOL v94 = v93;
        uint64_t v95 = v92;
        do
        {
          uint64_t v96 = v95;
          uint64_t v95 = (unsigned int *)((char *)v95 + v8);
          uint64_t result = OsFile::compareElements(a4, v95, v96, a4);
          if ((int)result < 1) {
            break;
          }
          if (v114)
          {
            if (v113)
            {
              uint64_t v97 = 0;
              uint64_t v98 = (uint64_t)v94 + a3;
              do
              {
                uint64_t v99 = *(void *)(v98 + 8 * v97);
                *(void *)(v98 + 8 * v97) = *(void *)&v94[2 * v97];
                *(void *)&v94[2 * v97++] = v99;
              }
              while (v10 != v97);
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v94 + a3;
              do
              {
                char v103 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v94 + v101);
                *((unsigned char *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v100 = *(void *)v96;
            *(void *)uint64_t v96 = *(void *)v95;
            *(void *)uint64_t v95 = v100;
          }
          BOOL v94 = (unsigned int *)((char *)v94 + v8);
        }
        while (v95 > v7);
      }
      int v92 = (unsigned int *)((char *)v92 + a3);
      unsigned int v93 = (unsigned int *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

void *DgnArray<FileSpec>::DgnArray(void *a1, uint64_t a2)
{
  unsigned int v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a1, a2, 0);
    unsigned int v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      if ((int)v4 > (int)v2)
      {
        uint64_t v5 = (int)v4;
        uint64_t v6 = 16 * (int)v4 - 16;
        do
        {
          --v5;
          FileSpec::~FileSpec((FileSpec *)(*a1 + v6));
          v6 -= 16;
        }
        while (v5 > (int)v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  unsigned int v7 = v2 - v4;
  if (v2 > v4)
  {
    uint64_t v8 = 16 * v4;
    do
    {
      FileSpec::FileSpec((FileSpec *)(*a1 + v8));
      v8 += 16;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

void DgnArray<FileSpec>::copyArraySlice(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 16 * v8 - 16;
    do
    {
      FileSpec::~FileSpec((FileSpec *)(*(void *)a1 + v9));
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    FileSpec::FileSpec((FileSpec *)(*(void *)a1 + 16 * v12), (const FileSpec *)(*a2 + 16 * (a3 + v13)));
    unsigned int v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v14 = (int)v12;
      uint64_t v15 = 16 * (int)v12 - 16;
      do
      {
        --v14;
        FileSpec::~FileSpec((FileSpec *)(*(void *)a1 + v15));
        v15 -= 16;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  unsigned int v16 = a4 - v12;
  if (a4 > v12)
  {
    uint64_t v17 = 16 * v12;
    do
    {
      FileSpec::FileSpec((FileSpec *)(*(void *)a1 + v17));
      v17 += 16;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

void MrecInitModule_retlist_prefilt(void)
{
  if (!gParDebugShowPrefiltererReturnLists)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPrefiltererReturnLists", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v1 = &unk_26C4E0858;
    gParDebugShowPrefiltererReturnLists = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererReturnLists);
  }
  if (!gParDiagnosticPrefiltererReturnListSortByScore)
  {
    unsigned int v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticPrefiltererReturnListSortByScore", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *unint64_t v3 = &unk_26C4E0858;
    gParDiagnosticPrefiltererReturnListSortByScore = (uint64_t)v3;
    unsigned int v4 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v4, (GlobalParam **)&gParDiagnosticPrefiltererReturnListSortByScore);
  }
}

void ReturnListMgr::ReturnListMgr(ReturnListMgr *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)((char *)this + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0u;
  *(_WORD *)this = 127;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
}

void ReturnListMgr::~ReturnListMgr(ReturnListMgr *this)
{
}

void ReturnListMgr::printSize(ReturnListMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 129, (DgnString *)&v94);
  if (v95) {
    unsigned int v16 = v94;
  }
  else {
    unsigned int v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v94);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 130, (DgnString *)&v94);
  if (v95) {
    unint64_t v27 = v94;
  }
  else {
    unint64_t v27 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v27, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += 2;
  *a5 += 2;
  uint64_t v28 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 8, 0);
  uint64_t v29 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 8, 1);
  BOOL v94 = 0;
  uint64_t v95 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v94);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 132, (DgnString *)&v94);
  if (v95) {
    unint64_t v34 = v94;
  }
  else {
    unint64_t v34 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v34, v28, v29, 0);
  uint64_t v93 = a3;
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v28;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v35 = 12;
  }
  else {
    uint64_t v35 = 16;
  }
  uint64_t v36 = *((unsigned int *)this + 8);
  unsigned int v37 = *((_DWORD *)this + 9);
  if (v37 >= v36)
  {
    uint64_t v38 = 0;
    if ((int)v36 > 0) {
      v35 += 4 * (v36 - 1) + 4;
    }
    uint64_t v39 = v35 + 4 * (v37 - v36);
  }
  else
  {
    uint64_t v38 = 4 * v36;
    uint64_t v39 = v35;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 133, (DgnString *)&v94);
  if (v95) {
    int v44 = v94;
  }
  else {
    int v44 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v21, &byte_2140B33BB, v22, v22, v44, v39, v35, v38);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v39;
  *a5 += v35;
  *a6 += v38;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 4;
  }
  else {
    uint64_t v45 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 135, (DgnString *)&v94);
  if (v95) {
    uint64_t v50 = v94;
  }
  else {
    uint64_t v50 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &byte_2140B33BB, v22, v22, v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v45;
  *a5 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 136, (DgnString *)&v94);
  if (v95) {
    uint64_t v55 = v94;
  }
  else {
    uint64_t v55 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v21, &byte_2140B33BB, v22, v22, v55, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 137, (DgnString *)&v94);
  if (v95) {
    unsigned int v60 = v94;
  }
  else {
    unsigned int v60 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v21, &byte_2140B33BB, v22, v22, v60, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += 4;
  *a5 += 4;
  uint64_t v61 = sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>((uint64_t)this + 56, 0);
  uint64_t v62 = sizeObject<Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int> *>((uint64_t)this + 56, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 139, (DgnString *)&v94);
  if (v95) {
    uint64_t v67 = v94;
  }
  else {
    uint64_t v67 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &byte_2140B33BB, v22, v22, v67, v61, v62, 0);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v61;
  *a5 += v62;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v68 = 12;
  }
  else {
    uint64_t v68 = 16;
  }
  uint64_t v69 = *((unsigned int *)this + 24);
  unsigned int v70 = *((_DWORD *)this + 25);
  if (v70 >= v69)
  {
    uint64_t v71 = 0;
    if ((int)v69 > 0) {
      uint64_t v68 = (v68 | 2) + 2 * (v69 - 1);
    }
    uint64_t v72 = v68 + 2 * (v70 - v69);
  }
  else
  {
    uint64_t v71 = 2 * v69;
    uint64_t v72 = v68;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 141, (DgnString *)&v94);
  if (v95) {
    char v77 = v94;
  }
  else {
    char v77 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v21, &byte_2140B33BB, v22, v22, v77, v72, v68, v71);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v72;
  *a5 += v68;
  *a6 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v78 = 12;
  }
  else {
    uint64_t v78 = 16;
  }
  uint64_t v79 = *((unsigned int *)this + 28);
  unsigned int v80 = *((_DWORD *)this + 29);
  if (v80 >= v79)
  {
    uint64_t v81 = 0;
    if ((int)v79 > 0) {
      uint64_t v78 = (v78 | 2) + 2 * (v79 - 1);
    }
    uint64_t v82 = v78 + 2 * (v80 - v79);
  }
  else
  {
    uint64_t v81 = 2 * v79;
    uint64_t v82 = v78;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 143, (DgnString *)&v94);
  if (v95) {
    uint64_t v87 = v94;
  }
  else {
    uint64_t v87 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &byte_2140B33BB, v22, v22, v87, v82, v78, v81);
  DgnString::~DgnString((DgnString *)&v94);
  *a4 += v82;
  *a5 += v78;
  *a6 += v81;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 144, (DgnString *)&v94);
  if (v95) {
    int v92 = v94;
  }
  else {
    int v92 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v93, &byte_2140B33BB, (35 - v93), (35 - v93), v92, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v94);
}

void sub_213F56608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ReturnListMgr::setReturnScoreAndDuration(uint64_t this, unsigned int a2, int a3, __int16 a4, __int16 a5)
{
  uint64_t v7 = this;
  int v20 = a3;
  unsigned int v8 = *(_DWORD *)(this + 96);
  if (v8 <= a2)
  {
    uint64_t v10 = *(void *)(this + 88);
    uint64_t v9 = *(void *)(this + 104);
    unsigned int v11 = *(_DWORD *)(this + 112);
    do
    {
      *(_WORD *)(v10 + 2 * v8++) = 20000;
      *(_WORD *)(v9 + 2 * v11++) = 20000;
    }
    while (v8 <= a2);
    *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v8;
    *(_DWORD *)(this + 112) = v11;
  }
  else
  {
    uint64_t v9 = *(void *)(this + 104);
  }
  int v12 = a4;
  if (a4 <= *(__int16 *)(v9 + 2 * a2))
  {
    uint64_t v13 = a2;
    uint64_t v14 = *(void *)(*(void *)(this + 56) + 8 * a2);
    int v15 = *(_DWORD *)(v14 + 16);
    if (v15) {
      unsigned int v16 = (-1640531527 * a3) >> -(char)v15;
    }
    else {
      unsigned int v16 = 0;
    }
    uint64_t v17 = *(void *)(v14 + 80) + 8 * v16;
    while (1)
    {
      uint64_t v17 = *(void *)v17;
      if (!v17) {
        break;
      }
      if (*(_DWORD *)(v17 + 8) == a3)
      {
        if (a4 < *(__int16 *)(v17 + 12))
        {
          *(_WORD *)(v17 + 12) = a4;
          *(_WORD *)(v17 + 14) = a5;
        }
        goto LABEL_19;
      }
    }
    if (*(_DWORD *)(v14 + 12) >= *(_DWORD *)(this + 72) && *(_DWORD *)(v14 + 8) >= *(_DWORD *)(this + 76)) {
      *(_WORD *)(*(void *)(this + 104) + 2 * a2) = ReturnListMgr::makeRoomInHash(this, *(void *)(*(void *)(this + 56) + 8 * a2), *(_DWORD *)(this + 80));
    }
    LOWORD(v19) = a4;
    HIWORD(v19) = a5;
    this = HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::add(v14, &v20, &v19);
LABEL_19:
    uint64_t v18 = *(void *)(v7 + 88);
    if (v12 < *(__int16 *)(v18 + 2 * v13)) {
      *(_WORD *)(v18 + 2 * v13) = a4;
    }
  }
  return this;
}

uint64_t ReturnListMgr::makeRoomInHash(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t CutoffScore = ReturnListMgr::getCutoffScore(a1, a2, a3, &v16, &v15);
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void **)(a2 + 80);
    uint64_t v7 = (uint64_t *)*v6;
    if (!*v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v6 + 1;
      while (v5 - 1 != v8)
      {
        uint64_t v7 = (uint64_t *)v9[v8++];
        if (v7) {
          goto LABEL_9;
        }
      }
      return CutoffScore;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
LABEL_9:
  while (v8 < v5)
  {
    int v14 = *((_DWORD *)v7 + 2);
    uint64_t v10 = (uint64_t *)*v7;
    if (!*v7)
    {
      uint64_t v8 = (v8 + 1);
      if (v8 >= v5)
      {
        uint64_t v10 = v7;
      }
      else
      {
        uint64_t v11 = *(void *)(a2 + 80);
        uint64_t v10 = *(uint64_t **)(v11 + 8 * v8);
        if (!v10)
        {
          uint64_t v12 = v8 + 1;
          while (v5 != v12)
          {
            uint64_t v10 = *(uint64_t **)(v11 + 8 * v12);
            LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v8 + 1;
            ++v12;
            if (v10) {
              goto LABEL_18;
            }
          }
          uint64_t v10 = 0;
          LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v5;
        }
      }
    }
LABEL_18:
    if (*((__int16 *)v7 + 6) > (int)CutoffScore)
    {
      HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::remove(a2, &v14);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    uint64_t v7 = v10;
  }
  return CutoffScore;
}

uint64_t ReturnListMgr::compareElements(ReturnListMgr *this, _WORD *a2, _WORD *a3, const void *a4)
{
  __int16 v4 = a2[2];
  unint64_t v5 = *(unsigned int *)a2;
  unsigned int v6 = *((_DWORD *)this + 4);
  if (*(_DWORD *)a2 >> 25 < v6)
  {
    uint64_t v7 = *((void *)this + 1) + 16 * (v5 >> 25);
    if ((v5 & 0xFFFFFF) < *(_DWORD *)(v7 + 8))
    {
      __int16 v8 = *(_WORD *)(*(void *)v7 + 2 * (v5 & 0xFFFFFF));
      if (v8 != 20000) {
        v4 += v8;
      }
    }
  }
  __int16 v9 = a3[2];
  unint64_t v10 = *(unsigned int *)a3;
  if (*(_DWORD *)a3 >> 25 < v6)
  {
    uint64_t v11 = *((void *)this + 1) + 16 * (v10 >> 25);
    if ((v10 & 0xFFFFFF) < *(_DWORD *)(v11 + 8))
    {
      __int16 v12 = *(_WORD *)(*(void *)v11 + 2 * (v10 & 0xFFFFFF));
      if (v12 != 20000) {
        v9 += v12;
      }
    }
  }
  BOOL v13 = v5 >= v10;
  unsigned int v14 = v5 > v10;
  if (!v13) {
    unsigned int v14 = -1;
  }
  if (v4 > v9) {
    unsigned int v14 = 1;
  }
  if (v4 >= v9) {
    return v14;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ReturnListMgr::finishList(uint64_t this, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6 = this;
  if (*(_DWORD *)(this + 64) > a2 && *(void *)(*(void *)(this + 56) + 8 * a2))
  {
    uint64_t v8 = *(unsigned int *)(this + 32);
    if ((int)v8 >= 1)
    {
      unint64_t v9 = v8 + 1;
      do
        ReturnListMgr::setReturnScoreAndDuration(v6, a2, *(_DWORD *)(*(void *)(v6 + 24) + 4 * (v9-- - 2)), *(_WORD *)(*(void *)(v6 + 88) + 2 * a2), -1);
      while (v9 > 1);
    }
    ReturnListMgr::returnGerms(v6, a2, a3, a4);
    this = (uint64_t)DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>(*(void (****)(void))(*(void *)(v6 + 56) + 8 * a2));
    *(void *)(*(void *)(v6 + 56) + 8 * a2) = 0;
  }
  else
  {
    *(_DWORD *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
    unsigned int v10 = *(_DWORD *)(this + 32);
    if (v10)
    {
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = *(unsigned int *)(*(void *)(v6 + 24) + 4 * v11);
        if (v10 == *(_DWORD *)(a3 + 12))
        {
          this = DgnPrimArray<unsigned long long>::reallocElts(a3, 1, 1);
          unsigned int v10 = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v1pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v12;
        unsigned int v10 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v10;
        ++v11;
      }
      while (v11 < *(unsigned int *)(v6 + 32));
    }
    *a4 = v10;
  }
  if (*(unsigned char *)(gParDiagnosticPrefiltererReturnListSortByScore + 41))
  {
    uint64_t v13 = *(void *)a3;
    unint64_t v14 = *(unsigned int *)(a3 + 8);
    return mrec_qsort_r<ReturnListMgr>(v13, v14, 8uLL, (ReturnListMgr *)v6);
  }
  return this;
}

uint64_t ReturnListMgr::returnGerms(uint64_t result, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(*(void *)(result + 56) + 8 * a2);
  uint64_t v8 = *(unsigned int *)(v7 + 8);
  unsigned int v9 = *(_DWORD *)(result + 80);
  if (v8 > v9)
  {
    uint64_t v51 = 0;
    uint64_t result = ReturnListMgr::getCutoffScore(result, v7, v9, (unsigned int *)&v51, (_DWORD *)&v51 + 1);
    int v10 = result;
    uint64_t v11 = v51;
    unsigned int v12 = *(_DWORD *)(a3 + 12);
    if (v51 > v12) {
      uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(a3, v51 - v12, 0);
    }
    uint64_t v13 = *(unsigned int *)(a3 + 8);
    if (v13 < v11)
    {
      uint64_t v14 = v11 - v13;
      uint64_t v15 = *(void *)a3 + 8 * v13 + 6;
      do
      {
        *(void *)(v15 - 6) = 4211081215;
        v15 += 8;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v11;
    uint64_t v16 = *(unsigned int *)(v7 + 12);
    if (v16)
    {
      uint64_t v17 = *(uint64_t ***)(v7 + 80);
      uint64_t v18 = *v17;
      if (*v17)
      {
        LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
      }
      else
      {
        uint64_t v22 = 1;
        while (v16 != v22)
        {
          uint64_t v18 = v17[v22++];
          if (v18)
          {
            LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v22 - 1;
            goto LABEL_24;
          }
        }
        uint64_t v18 = 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
LABEL_24:
    int v24 = 0;
    if (v11)
    {
      unsigned int v25 = 0;
      do
      {
        if (v18) {
          uint64_t v26 = (__int16 *)v18 + 6;
        }
        else {
          uint64_t v26 = 0;
        }
        int v27 = *v26;
        if (v27 <= v10)
        {
          unint64_t v28 = *((unsigned int *)v18 + 2);
          if (*((_DWORD *)v18 + 2) >> 25 < *(_DWORD *)(v6 + 16))
          {
            uint64_t v29 = *(void *)(v6 + 8) + 16 * (v28 >> 25);
            uint64_t result = *(unsigned int *)(v29 + 8);
            if ((v28 & 0xFFFFFF) < result)
            {
              __int16 v30 = *(_WORD *)(*(void *)v29 + 2 * (v28 & 0xFFFFFF));
              if (v30 != 20000) {
                LOWORD(v27) = v27 - v30;
              }
            }
          }
          *(void *)(*(void *)a3 + 8 * v25++) = ((unint64_t)(unsigned __int16)v26[1] << 48) | ((unint64_t)(unsigned __int16)v27 << 32) | v28;
        }
        uint64_t v31 = (uint64_t *)*v18;
        if (!*v18)
        {
          uint64_t v16 = (v16 + 1);
          uint64_t v32 = *(unsigned int *)(v7 + 12);
          if (v16 >= v32)
          {
            uint64_t v31 = v18;
          }
          else
          {
            uint64_t v33 = *(void *)(v7 + 80);
            uint64_t v31 = *(uint64_t **)(v33 + 8 * v16);
            if (!v31)
            {
              uint64_t v34 = v16 + 1;
              while (v32 != v34)
              {
                uint64_t v31 = *(uint64_t **)(v33 + 8 * v34);
                LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v16 + 1;
                ++v34;
                if (v31) {
                  goto LABEL_43;
                }
              }
              uint64_t v31 = 0;
              LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_DWORD *)(v7 + 12);
            }
          }
        }
LABEL_43:
        ++v24;
        uint64_t v18 = v31;
      }
      while (v25 < v11);
    }
    *a4 = v24;
    return result;
  }
  uint64_t v19 = *(unsigned int *)(v7 + 12);
  if (v19)
  {
    int v20 = *(uint64_t ***)(v7 + 80);
    uint64_t v21 = *v20;
    if (*v20)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      uint64_t v23 = 1;
      while (v19 != v23)
      {
        uint64_t v21 = v20[v23++];
        if (v21)
        {
          LODWORD(v19) = v23 - 1;
          goto LABEL_48;
        }
      }
      uint64_t v21 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
LABEL_48:
  unsigned int v35 = *(_DWORD *)(a3 + 12);
  if (v8 > v35) {
    uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(a3, v8 - v35, 0);
  }
  uint64_t v36 = *(unsigned int *)(a3 + 8);
  if (v36 < v8)
  {
    uint64_t v37 = v8 - v36;
    uint64_t v38 = *(void *)a3 + 8 * v36 + 6;
    do
    {
      *(void *)(v38 - 6) = 4211081215;
      v38 += 8;
      --v37;
    }
    while (v37);
  }
  *(_DWORD *)(a3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v8;
  if (v19 >= *(_DWORD *)(v7 + 12)) {
    goto LABEL_72;
  }
  unsigned int v39 = 0;
  while (1)
  {
    unint64_t v40 = *((unsigned int *)v21 + 2);
    if (v21) {
      uint64_t v41 = (unsigned __int16 *)v21 + 6;
    }
    else {
      uint64_t v41 = 0;
    }
    unsigned __int16 v42 = *v41;
    if (*((_DWORD *)v21 + 2) >> 25 < *(_DWORD *)(v6 + 16))
    {
      uint64_t v43 = *(void *)(v6 + 8) + 16 * (v40 >> 25);
      if ((v40 & 0xFFFFFF) < *(_DWORD *)(v43 + 8))
      {
        __int16 v44 = *(_WORD *)(*(void *)v43 + 2 * (v40 & 0xFFFFFF));
        if (v44 != 20000) {
          v42 -= v44;
        }
      }
    }
    *(void *)(*(void *)a3 + 8 * v39) = ((unint64_t)v41[1] << 48) | ((unint64_t)v42 << 32) | v40;
    uint64_t v45 = (uint64_t *)*v21;
    uint64_t v46 = *(unsigned int *)(v7 + 12);
    if (*v21) {
      goto LABEL_70;
    }
    uint64_t v19 = (v19 + 1);
    if (v19 >= v46)
    {
      uint64_t v45 = v21;
      goto LABEL_70;
    }
    uint64_t v47 = *(void *)(v7 + 80);
    uint64_t v45 = *(uint64_t **)(v47 + 8 * v19);
    if (!v45) {
      break;
    }
LABEL_70:
    ++v39;
    uint64_t v21 = v45;
    if (v19 >= v46) {
      goto LABEL_71;
    }
  }
  uint64_t v48 = (uint64_t *)(v47 + 8 * v19 + 8);
  uint64_t v49 = ~v19 + v46;
  while (v49)
  {
    uint64_t v50 = (uint64_t *)*v48++;
    uint64_t v45 = v50;
    LODWORD(v19) = v19 + 1;
    --v49;
    if (v50) {
      goto LABEL_70;
    }
  }
LABEL_71:
  LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = *(_DWORD *)(a3 + 8);
LABEL_72:
  *a4 = v8;
  return result;
}

uint64_t mrec_qsort_r<ReturnListMgr>(uint64_t result, unint64_t a2, unint64_t a3, ReturnListMgr *a4)
{
  __int16 v4 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = (char *)result;
  uint64_t v8 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v9 = 2;
  }
  else {
    int v9 = a3 != 8;
  }
  BOOL v113 = ((result | a3) & 7) == 0;
  int v114 = v9;
  if (a2 < 7)
  {
LABEL_117:
    if ((uint64_t)(v6 * a3) > (uint64_t)a3)
    {
      uint64_t v79 = v4;
      uint64_t v111 = &v7[v6 * a3];
      unsigned int v80 = &v7[a3];
      uint64_t v81 = v7;
      do
      {
        if (v80 > v7)
        {
          uint64_t v82 = v81;
          uint64_t v83 = v80;
          do
          {
            uint64_t v84 = v83;
            uint64_t v83 = (_WORD *)((char *)v83 + v8);
            uint64_t result = ReturnListMgr::compareElements(v79, v83, v84, a4);
            if ((int)result < 1) {
              break;
            }
            if (v114)
            {
              if (v113)
              {
                uint64_t v85 = 0;
                uint64_t v86 = (uint64_t)v82 + a3;
                do
                {
                  uint64_t v87 = *(void *)(v86 + 8 * v85);
                  *(void *)(v86 + 8 * v85) = *(void *)&v82[4 * v85];
                  *(void *)&v82[4 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                uint64_t v89 = 0;
                uint64_t v90 = (uint64_t)v82 + a3;
                do
                {
                  char v91 = *(unsigned char *)(v90 + v89);
                  *(unsigned char *)(v90 + v89) = *((unsigned char *)v82 + v89);
                  *((unsigned char *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              uint64_t v88 = *(void *)v84;
              *(void *)uint64_t v84 = *(void *)v83;
              *(void *)uint64_t v83 = v88;
            }
            uint64_t v82 = (_WORD *)((char *)v82 + v8);
          }
          while (v83 > (_WORD *)v7);
        }
        v80 += a3;
        uint64_t v81 = (_WORD *)((char *)v81 + a3);
      }
      while (v80 < v111);
    }
    return result;
  }
  BOOL v107 = a3 != 8;
  unint64_t v10 = a3 >> 3;
  while (1)
  {
    uint64_t v11 = &v7[(v6 >> 1) * a3];
    if (v6 == 7) {
      goto LABEL_44;
    }
    unsigned int v12 = &v7[(v6 - 1) * a3];
    if (v6 >= 0x29)
    {
      uint64_t v108 = &v7[(v6 - 1) * a3];
      unint64_t v13 = (v6 >> 3) * a3;
      uint64_t v14 = &v7[v13];
      unint64_t v105 = v13;
      uint64_t v15 = &v7[2 * v13];
      int v16 = ReturnListMgr::compareElements(v4, v7, &v7[v13], a4);
      uint64_t v109 = v14;
      int v18 = ReturnListMgr::compareElements(v4, v14, v15, v17);
      if (v16 < 0)
      {
        if ((v18 & 0x80000000) == 0)
        {
          if ((int)ReturnListMgr::compareElements(v4, v7, v15, v19) >= 0) {
            int v20 = v7;
          }
          else {
            int v20 = v15;
          }
          goto LABEL_18;
        }
      }
      else if (v18 <= 0)
      {
        if ((int)ReturnListMgr::compareElements(v4, v7, v15, v19) >= 0) {
          int v20 = v15;
        }
        else {
          int v20 = v7;
        }
LABEL_18:
        uint64_t v109 = v20;
      }
      unint64_t v22 = (v6 >> 3) * a3;
      uint64_t v23 = &v11[v105];
      uint64_t v104 = &v11[-v105];
      int v24 = ReturnListMgr::compareElements(v4, &v11[-v105], &v7[(v6 >> 1) * a3], v19);
      int v26 = ReturnListMgr::compareElements(v4, &v7[(v6 >> 1) * a3], &v11[v105], v25);
      if (v24 < 0)
      {
        if ((v26 & 0x80000000) == 0)
        {
          v11 -= v105;
          if ((int)ReturnListMgr::compareElements(v4, v104, v23, v27) < 0) {
            uint64_t v11 = v23;
          }
        }
      }
      else if (v26 <= 0)
      {
        v11 -= v105;
        if ((int)ReturnListMgr::compareElements(v4, v104, v23, v27) >= 0) {
          uint64_t v11 = v23;
        }
      }
      unsigned int v12 = &v108[-v105];
      unsigned int v106 = &v108[-2 * v105];
      int v28 = ReturnListMgr::compareElements(v4, &v108[-2 * v22], &v108[-v22], v27);
      int v30 = ReturnListMgr::compareElements(v4, &v108[-v22], v108, v29);
      if (v28 < 0)
      {
        uint64_t v21 = v109;
        if ((v30 & 0x80000000) == 0)
        {
          unsigned int v12 = &v7[(v6 - 1) * a3];
          if ((int)ReturnListMgr::compareElements(v4, v106, v108, a4) >= 0) {
            unsigned int v12 = v106;
          }
        }
      }
      else
      {
        uint64_t v21 = v109;
        if (v30 <= 0)
        {
          unsigned int v12 = &v7[(v6 - 1) * a3];
          if ((int)ReturnListMgr::compareElements(v4, v106, v108, a4) < 0) {
            unsigned int v12 = v106;
          }
        }
      }
      goto LABEL_35;
    }
    uint64_t v21 = v7;
LABEL_35:
    int v31 = ReturnListMgr::compareElements(v4, v21, v11, a4);
    uint64_t result = ReturnListMgr::compareElements(v4, v11, v12, v32);
    if (v31 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = ReturnListMgr::compareElements(v4, v21, v12, a4);
        if ((int)result >= 0) {
          uint64_t v11 = v21;
        }
        else {
          uint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = ReturnListMgr::compareElements(v4, v21, v12, a4);
      if ((int)result >= 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = v21;
      }
    }
LABEL_44:
    if (v114)
    {
      if (v113)
      {
        uint64_t v33 = v7;
        unint64_t v34 = a3 >> 3;
        do
        {
          uint64_t v35 = *(void *)v33;
          *(void *)uint64_t v33 = *(void *)v11;
          v33 += 8;
          *(void *)uint64_t v11 = v35;
          v11 += 8;
          --v34;
        }
        while (v34);
      }
      else
      {
        unint64_t v37 = a3;
        uint64_t v38 = v7;
        do
        {
          char v39 = *v38;
          *v38++ = *v11;
          *v11++ = v39;
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      uint64_t v36 = *(void *)v7;
      *(void *)uint64_t v7 = *(void *)v11;
      *(void *)uint64_t v11 = v36;
    }
    int v40 = 0;
    uint64_t v41 = &v7[a3];
    unint64_t v110 = v6;
    unsigned __int16 v42 = &v7[(v6 - 1) * a3];
    uint64_t v43 = v42;
    __int16 v44 = &v7[a3];
LABEL_53:
    while (v44 <= v43)
    {
      uint64_t result = ReturnListMgr::compareElements(v4, v44, v7, a4);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v45 = 0;
            do
            {
              uint64_t v46 = *(void *)&v41[8 * v45];
              *(void *)&v41[8 * v45] = *(void *)&v44[8 * v45];
              *(void *)&v44[8 * v45++] = v46;
            }
            while (v10 != v45);
          }
          else
          {
            uint64_t v55 = 0;
            do
            {
              char v56 = v41[v55];
              v41[v55] = v44[v55];
              v44[v55++] = v56;
            }
            while (a3 != v55);
          }
        }
        else
        {
          uint64_t v54 = *(void *)v41;
          *(void *)uint64_t v41 = *(void *)v44;
          *(void *)__int16 v44 = v54;
        }
        v41 += a3;
        int v40 = 1;
      }
      v44 += a3;
    }
    while (v44 <= v43)
    {
      uint64_t result = ReturnListMgr::compareElements(v4, v43, v7, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v52 = 0;
            do
            {
              uint64_t v53 = *(void *)&v44[8 * v52];
              *(void *)&v44[8 * v52] = *(void *)&v43[8 * v52];
              *(void *)&v43[8 * v52++] = v53;
            }
            while (v10 != v52);
          }
          else
          {
            uint64_t v58 = 0;
            do
            {
              char v59 = v44[v58];
              v44[v58] = v43[v58];
              v43[v58++] = v59;
            }
            while (a3 != v58);
          }
        }
        else
        {
          uint64_t v57 = *(void *)v44;
          *(void *)__int16 v44 = *(void *)v43;
          *(void *)uint64_t v43 = v57;
        }
        v44 += a3;
        v43 += v8;
        int v40 = 1;
        goto LABEL_53;
      }
      if (!result)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v47 = 0;
            do
            {
              uint64_t v48 = *(void *)&v43[8 * v47];
              *(void *)&v43[8 * v47] = *(void *)&v42[8 * v47];
              *(void *)&v42[8 * v47++] = v48;
            }
            while (v10 != v47);
          }
          else
          {
            uint64_t v50 = 0;
            do
            {
              char v51 = v43[v50];
              v43[v50] = v42[v50];
              v42[v50++] = v51;
            }
            while (a3 != v50);
          }
        }
        else
        {
          uint64_t v49 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v42;
          *(void *)unsigned __int16 v42 = v49;
        }
        v42 += v8;
        int v40 = 1;
      }
      v43 += v8;
    }
    unsigned int v60 = &v7[v110 * a3];
    if (!v40) {
      break;
    }
    int64_t v61 = v44 - v41;
    if (v41 - v7 >= v44 - v41) {
      unint64_t v62 = v44 - v41;
    }
    else {
      unint64_t v62 = v41 - v7;
    }
    if (v62)
    {
      if (v113)
      {
        uint64_t v63 = &v44[-v62];
        unint64_t v64 = v62 >> 3;
        uint64_t v65 = v7;
        do
        {
          uint64_t v66 = *(void *)v65;
          *(void *)uint64_t v65 = *(void *)v63;
          v65 += 8;
          *(void *)uint64_t v63 = v66;
          v63 += 8;
          --v64;
        }
        while (v64);
      }
      else
      {
        uint64_t v67 = -(uint64_t)v62;
        uint64_t v68 = v7;
        do
        {
          char v69 = *v68;
          *v68++ = v44[v67];
          v44[v67] = v69;
          BOOL v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    int64_t v71 = v42 - v43;
    if (v42 - v43 >= v60 - &v42[a3]) {
      unint64_t v72 = v60 - &v42[a3];
    }
    else {
      unint64_t v72 = v42 - v43;
    }
    if (v72)
    {
      if (v113)
      {
        uint64_t v73 = &v60[-v72];
        unint64_t v74 = v72 >> 3;
        do
        {
          uint64_t v75 = *(void *)v44;
          *(void *)__int16 v44 = *(void *)v73;
          v44 += 8;
          *(void *)uint64_t v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v76 = -(uint64_t)v72;
        do
        {
          char v77 = *v44;
          *v44++ = v60[v76];
          v60[v76] = v77;
          BOOL v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<ReturnListMgr>(v7, v61 / a3, a3, a4);
    }
    if (v71 <= (uint64_t)a3) {
      return result;
    }
    uint64_t v7 = &v60[-v71];
    unint64_t v6 = v71 / a3;
    int v78 = v107;
    if ((((v60 - v71) | a3) & 7) != 0) {
      int v78 = 2;
    }
    BOOL v113 = (((v60 - v71) | a3) & 7) == 0;
    int v114 = v78;
    __int16 v4 = a4;
    if (v6 < 7) {
      goto LABEL_117;
    }
  }
  int v92 = &v7[a3];
  if ((uint64_t)(v110 * a3) > (uint64_t)a3)
  {
    uint64_t v93 = v7;
    do
    {
      if (v92 > v7)
      {
        BOOL v94 = v93;
        uint64_t v95 = v92;
        do
        {
          uint64_t v96 = v95;
          uint64_t v95 = (_WORD *)((char *)v95 + v8);
          uint64_t result = ReturnListMgr::compareElements(a4, v95, v96, a4);
          if ((int)result < 1) {
            break;
          }
          if (v114)
          {
            if (v113)
            {
              uint64_t v97 = 0;
              uint64_t v98 = (uint64_t)v94 + a3;
              do
              {
                uint64_t v99 = *(void *)(v98 + 8 * v97);
                *(void *)(v98 + 8 * v97) = *(void *)&v94[4 * v97];
                *(void *)&v94[4 * v97++] = v99;
              }
              while (v10 != v97);
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v94 + a3;
              do
              {
                char v103 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v94 + v101);
                *((unsigned char *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v100 = *(void *)v96;
            *(void *)uint64_t v96 = *(void *)v95;
            *(void *)uint64_t v95 = v100;
          }
          BOOL v94 = (_WORD *)((char *)v94 + v8);
        }
        while (v95 > (_WORD *)v7);
      }
      v92 += a3;
      uint64_t v93 = (_WORD *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t ReturnListMgr::getCutoffScore(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  int v31 = 0;
  unint64_t v9 = realloc_array(0, &v31, 4uLL, 0, 0, 1) >> 2;
  unint64_t v10 = v31;
  int v28 = v31;
  unsigned int v29 = 1;
  unsigned int v30 = v9;
  *(_DWORD *)int v31 = 0;
  uint64_t v11 = *(unsigned int *)(a2 + 12);
  if (v11)
  {
    unsigned int v12 = *(void **)(a2 + 80);
    unint64_t v13 = (uint64_t *)*v12;
    if (!*v12)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v12 + 1;
      while (v11 - 1 != v14)
      {
        unint64_t v13 = (uint64_t *)v15[v14++];
        if (v13) {
          goto LABEL_9;
        }
      }
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  LODWORD(v14) = 0;
LABEL_9:
  if (v14 >= v11)
  {
LABEL_28:
    unsigned int v25 = 0;
    goto LABEL_29;
  }
  while (1)
  {
    unsigned int v16 = *((__int16 *)v13 + 6);
    if ((int)v16 < 1)
    {
      int v18 = v10;
    }
    else
    {
      unsigned int v17 = v29;
      if (v29 <= v16)
      {
        if (v30 <= v16)
        {
          int v31 = 0;
          unsigned int v30 = realloc_array(v10, &v31, 4 * (v16 + 1), 4 * v29, 4 * v29, 1) >> 2;
          unint64_t v10 = v31;
          int v28 = v31;
          unsigned int v17 = v29;
        }
        while (v17 <= v16)
        {
          *((_DWORD *)v10 + v17) = 0;
          unsigned int v17 = ++v29;
        }
      }
      int v18 = (_DWORD *)v10 + v16;
    }
    ++*v18;
    uint64_t v19 = (uint64_t *)*v13;
    uint64_t v20 = *(unsigned int *)(a2 + 12);
    if (*v13) {
      goto LABEL_26;
    }
    uint64_t v14 = (v14 + 1);
    if (v14 >= v20)
    {
      uint64_t v19 = v13;
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(a2 + 80);
    uint64_t v19 = *(uint64_t **)(v21 + 8 * v14);
    if (!v19) {
      break;
    }
LABEL_26:
    unint64_t v13 = v19;
    if (v14 >= v20) {
      goto LABEL_27;
    }
  }
  unint64_t v22 = (uint64_t *)(v21 + 8 * v14 + 8);
  uint64_t v23 = ~v14 + v20;
  while (v23)
  {
    int v24 = (uint64_t *)*v22++;
    uint64_t v19 = v24;
    LODWORD(v14) = v14 + 1;
    --v23;
    if (v24) {
      goto LABEL_26;
    }
  }
LABEL_27:
  unsigned int v25 = *(_DWORD *)v10;
LABEL_29:
  *a4 = v25;
  if (v25 >= a3)
  {
    unsigned int v26 = 0;
  }
  else
  {
    unsigned int v26 = 0;
    do
    {
      v25 += *((_DWORD *)v10 + ++v26);
      *a4 = v25;
    }
    while (v25 < a3);
  }
  *a5 = *((_DWORD *)v10 + v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return (__int16)v26;
}

void sub_213F57810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ReturnListMgr::addToReturnList(ReturnListMgr *this, signed int a2, int a3, unsigned int a4, int a5)
{
  __int16 v5 = a5;
  __int16 v8 = a3 - a2;
  int v9 = *((_DWORD *)this + 13);
  int v10 = *((_DWORD *)this + 12) * (__int16)(a3 - a2);
  int v11 = *(_DWORD *)(*((void *)this + 5) + 100);
  int v12 = *(_DWORD *)(*((void *)this + 5) + 104);
  BOOL v13 = v11 < v10 >> 8;
  int v14 = v10 >> 8;
  if (!v13) {
    int v11 = v14;
  }
  if (a5 + v11 * v12 <= v9 || v11 == 0)
  {
    int v16 = v11;
  }
  else
  {
    int v17 = a5 + v12 * (v11 - 1);
    do
    {
      int v16 = v11 - 1;
      if (v17 <= v9) {
        break;
      }
      v17 -= v12;
      --v11;
    }
    while (v11);
  }
  if (a2 >= v16) {
    unsigned int v18 = a2 - v16;
  }
  else {
    unsigned int v18 = 0;
  }
  unsigned int v19 = v16 + a2;
  uint64_t v20 = (void *)((char *)this + 56);
  if ((v16 + a2) >= *((_DWORD *)this + 16))
  {
    unsigned int v21 = v19 + 1;
    unsigned int v22 = *((_DWORD *)this + 17);
    if (v19 + 1 > v22) {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, v19 + 1 - v22, 1);
    }
    unsigned int v23 = *((_DWORD *)this + 25);
    if (v21 > v23) {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 88, v21 - v23, 1);
    }
    unsigned int v24 = *((_DWORD *)this + 29);
    if (v21 > v24) {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 104, v21 - v24, 1);
    }
    unsigned int v25 = *((_DWORD *)this + 16);
    if (v25 <= v19)
    {
      do
        *(void *)(*v20 + 8 * v25++) = 0;
      while (v25 <= v19);
      *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v25;
    }
  }
  uint64_t result = getCwidForIndex(*(unsigned __int16 *)this, a4);
  unsigned int v38 = result;
  signed int v39 = v16 + a2;
  if ((int)v18 <= (int)v19)
  {
    signed int v27 = a2;
    __int16 v28 = v5 + (a2 - v18) * v12;
    int v29 = v16 + a3;
    if (v16 > a2) {
      signed int v27 = v16;
    }
    __int16 v30 = v29 - v27;
    int v31 = (v29 - v27) << 16;
    do
    {
      signed int v32 = v18;
      if (!*(void *)(*v20 + 8 * v18))
      {
        uint64_t v33 = MemChunkAlloc(0x70uLL, 0);
        *(void *)(*v20 + 8 * v1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::HashNCHV((uint64_t)v33, 0, 32);
      }
      BOOL v34 = __OFSUB__(v31, 0x10000);
      v31 -= 0x10000;
      if (v31 < 0 != v34) {
        __int16 v35 = 1;
      }
      else {
        __int16 v35 = v30;
      }
      if (*(unsigned char *)(*((void *)this + 5) + 120)) {
        __int16 v8 = v35;
      }
      uint64_t result = ReturnListMgr::setReturnScoreAndDuration((uint64_t)this, v18, v38, v28, v8);
      if ((int)v18 >= a2) {
        LOWORD(v36) = v12;
      }
      else {
        int v36 = -v12;
      }
      v28 += v36;
      ++v18;
      --v30;
    }
    while (v32 < v39);
  }
  return result;
}

_WORD *ReturnListMgr::initReturnLists(_WORD *this, __int16 a2)
{
  *this = a2;
  return this;
}

unint64_t ReturnListMgr::setInjectCwids(unint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  if (a2)
  {
    uint64_t v17 = *(unsigned int *)(a2 + 8);
    if ((int)v17 >= 1)
    {
      unint64_t v3 = result;
      unsigned int v4 = 0;
      uint64_t v5 = 0;
      unint64_t v6 = (int **)(result + 24);
      do
      {
        uint64_t v7 = *(void *)a2 + 16 * v5;
        uint64_t v8 = *(unsigned int *)(v7 + 8);
        if ((int)v8 >= 1)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            unint64_t v10 = *(unsigned int *)(*(void *)v7 + 4 * i);
            uint64_t v11 = v10 & 0xFFFFFF;
            BOOL v12 = *(_DWORD *)(*(void *)v7 + 4 * i) >> 25 == 125 || v11 > 0xFFFFF3;
            if (!v12
              && *(_WORD *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * (v10 >> 25)) + 48)
                                      + 32)
                          + 2 * v11))
            {
              if (!v4) {
                goto LABEL_17;
              }
              BOOL v13 = *v6;
              uint64_t v14 = v4;
              uint64_t v15 = 0xFFFFFFFFLL;
              while (1)
              {
                int v16 = *v13++;
                if (v16 == v10) {
                  break;
                }
                --v15;
                if (!--v14) {
                  goto LABEL_17;
                }
              }
              if (!v15)
              {
LABEL_17:
                if (v4 == *(_DWORD *)(v3 + 36))
                {
                  uint64_t result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)v6, 1, 1);
                  unsigned int v4 = *(_DWORD *)(v3 + 32);
                }
                *(_DWORD *)(*(void *)(v3 + 24) + 4 * v4) = v10;
                unsigned int v4 = *(_DWORD *)(v3 + 32) + 1;
                *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v4;
              }
            }
          }
        }
        ++v5;
      }
      while (v5 != v17);
    }
  }
  return result;
}

void ReturnListMgr::beginRetListSyncRecog(ReturnListMgr *this, const PrefiltererSearchParamSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((void *)this + 5) = a2;
  int v9 = *((_DWORD *)a2 + 33);
  int v10 = *((_DWORD *)a2 + 34);
  int v11 = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 12) = vcvtd_n_s64_f64(*((double *)a2 + 14), 8uLL);
  *((_DWORD *)this + 13) = v10 + v9 - v11;
  if (v10 + v9 - v11 < 0)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/retlist.cpp", 574, (uint64_t)"prefilt/retlist", 1, (uint64_t)"%d %d %d %d", a7, a8, v10 + v9 - v11);
    a2 = (const PrefiltererSearchParamSet *)*((void *)this + 5);
  }
  int v12 = *((_DWORD *)a2 + 31);
  if (v12 == -1)
  {
    *((_DWORD *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 100000000;
    unsigned int v13 = 500000000;
  }
  else
  {
    *((_DWORD *)this + 2pthread_rwlock_init((pthread_rwlock_t *)this, 0) = v12;
    unsigned int v13 = 5 * v12;
    if (v13 < 4)
    {
      unsigned int v14 = 2;
      goto LABEL_8;
    }
  }
  unsigned int v14 = 2 * RoundUpToPowerOf2(v13 >> 2, 0);
LABEL_8:
  if (v14 <= 0x20) {
    unsigned int v14 = 32;
  }
  *((_DWORD *)this + 1DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v14;
  *((_DWORD *)this + 19) = (v14 >> 1) - 1;
}

_DWORD *ReturnListMgr::endRetListSyncRecog(_DWORD *this)
{
  uint64_t v1 = this;
  this[8] = 0;
  this[24] = 0;
  this[28] = 0;
  uint64_t v2 = this[16];
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      this = DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>(*(void (****)(void))(*((void *)v1 + 7) + v3));
      *(void *)(*((void *)v1 + 7) + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  v1[16] = 0;
  return this;
}

void ReturnListMgr::setEffectiveLmForCwid(ReturnListMgr *this, unsigned int a2, __int16 a3)
{
  uint64_t v4 = a2 >> 25;
  unsigned int v5 = a2 & 0xFFFFFF;
  unint64_t v6 = (void *)((char *)this + 8);
  LODWORD(v7) = *((_DWORD *)this + 4);
  if (v7 <= a2 >> 25)
  {
    unsigned int v9 = v4 + 1;
    unsigned int v10 = *((_DWORD *)this + 5);
    if (v4 >= v10)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 8, v9 - v10, 1);
      unsigned int v9 = v9 - v7 + *((_DWORD *)this + 4);
      LODWORD(v7) = *((_DWORD *)this + 4);
    }
    if (v7 <= v9)
    {
      if (v7 < v9)
      {
        unint64_t v12 = v9 - (unint64_t)v7;
        uint64_t v13 = 16 * v7;
        do
        {
          unsigned int v14 = (void *)(*v6 + v13);
          *unsigned int v14 = 0;
          v14[1] = 0;
          v13 += 16;
          --v12;
        }
        while (v12);
      }
    }
    else if ((int)v7 > (int)v9)
    {
      uint64_t v7 = (int)v7;
      uint64_t v11 = 16 * (int)v7 - 16;
      do
      {
        --v7;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v6 + v11);
        v11 -= 16;
      }
      while (v7 > (int)v9);
    }
    *((_DWORD *)this + 4) = v9;
  }
  uint64_t v15 = *v6 + 16 * v4;
  uint64_t v16 = *(unsigned int *)(v15 + 8);
  if (v5 >= v16)
  {
    unsigned int v18 = v5 + 1;
    unsigned int v19 = *(_DWORD *)(v15 + 12);
    if (v5 >= v19)
    {
      DgnPrimArray<short>::reallocElts(*v6 + 16 * v4, v18 - v19, 1);
      unsigned int v18 = v18 - v16 + *(_DWORD *)(v15 + 8);
    }
    *(_DWORD *)(v15 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v18;
    uint64_t v17 = *(void *)(*v6 + 16 * v4);
    memset_pattern16((void *)(v17 + 2 * v16), &unk_2140A1DB0, 2 * (v5 - v16) + 2);
  }
  else
  {
    uint64_t v17 = *(void *)v15;
  }
  *(_WORD *)(v17 + 2 * v5) = a3;
}

uint64_t HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::remove(uint64_t result, int *a2)
{
  int v2 = *a2;
  int v3 = *(_DWORD *)(result + 16);
  if (v3) {
    unsigned int v4 = (-1640531527 * *a2) >> -(char)v3;
  }
  else {
    unsigned int v4 = 0;
  }
  uint64_t v5 = *(void *)(result + 80) + 8 * v4;
  while (1)
  {
    unint64_t v6 = (char **)v5;
    uint64_t v5 = *(void *)v5;
    if (!v5) {
      break;
    }
    if (*(_DWORD *)(v5 + 8) == v2) {
      return HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::removeBucket(result, v6);
    }
  }
  return result;
}

uint64_t HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E52A0;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + 4pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0u;
  *(_OWORD *)(v5 + DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::releaseAll((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 8pthread_rwlock_init((pthread_rwlock_t *)this, 0) = 0;
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 12;
  }
  else {
    int v7 = 16;
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 16;
  *(_DWORD *)(a1 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F57F44(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::~HashNCHV(uint64_t a1)
{
  HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::~HashNCHV(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::~HashNCHV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E52A0;
  if (*(_DWORD *)(a1 + 8)) {
    HashNCHV<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<unsigned int,unsigned int,WordToScoreAndDurationHashHelper,ScoreAndDuration>::removeBucket(uint64_t result, char **a2)
{
  uint64_t v2 = result;
  int v3 = *a2;
  *a2 = *(char **)*a2;
  unsigned int v4 = *(uint64_t (**)(void *))(result + 96);
  if (v4) {
    uint64_t result = v4((void *)v3 + 1);
  }
  uint64_t v5 = *(uint64_t (**)(char *))(v2 + 104);
  if (v5) {
    uint64_t result = v5(v3 + 12);
  }
  *(void *)int v3 = *(void *)(v2 + 32);
  *(void *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v3;
  --*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t MrecInitLibrary_pel(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_fmpe_pel();
  MrecInitModule_genclass_pel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_pel_pel();
  MrecInitModule_pelsc_pel();
  MrecInitModule_scrcache_pel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_hiersc_pel();
  MrecInitModule_gpuscsm_pel();
  MrecInitModule_pelsrvsm_pel();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughPel(void)
{
  MrecInitLibrarySet_throughSigproc();
  MrecInitLibrarySet_throughNeuralN();

  return MrecInitLibrary_pel();
}

void TPItn_Open(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v46, "TPItn_Open");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v45);
  MrecInitModule_sdpres_sdapi();
  if (g_bInitialized)
  {
    if (a3 != -1)
    {
      if (a1 | a2)
      {
        if (a5 == -1) {
          unsigned int v14 = 0;
        }
        else {
          unsigned int v14 = (TTokenizer *)verifyTokenizerHandle(a5, "Bad input tokenizer handle");
        }
        uint64_t v15 = (TLexicon *)verifyLexiconHandle(a4, "Bad input lexicon handle");
        verifyPointerArgument<TPItnHandle_fake **>(a6, 0, "Bad output ITN handle pointer", v16, v17);
        DataManager = (const TDataManager *)makeDataManager(a1, 1, v18, v19, v20);
        unsigned int v25 = (TDataManager *)makeDataManager(a2, 1, v22, v23, v24);
        if (!v14 || *((TLexicon **)v14 + 5) == v15)
        {
          if (a3 == 1) {
            createFormatter(DataManager, v25, v15, v14);
          }
          if (v25) {
            (*(void (**)(TDataManager *))(*(void *)v25 + 8))(v25);
          }
          conditionalAssert("Bad input formatter tool type", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 106, v26, v27);
          exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
          std::string::basic_string[abi:ne180100]<0>(&v43, "Bad input formatter tool type");
          void *exception = byte_26C4DF190;
          __int16 v35 = (std::string *)(exception + 1);
          if (SHIBYTE(v44) < 0)
          {
            std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
          }
          else
          {
            long long v41 = v43;
            exception[3] = v44;
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v41;
          }
          void *exception = &unk_26C4E0430;
          exception[4] = 3;
        }
        conditionalAssert("Lexicon handle does not match tokenizer lexicon", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 97, v26, v27);
        int v36 = __cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(&v43, "Lexicon handle does not match tokenizer lexicon");
        *int v36 = byte_26C4DF190;
        unint64_t v37 = (std::string *)(v36 + 1);
        if (SHIBYTE(v44) < 0)
        {
          std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
        }
        else
        {
          long long v42 = v43;
          v36[3] = v44;
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v42;
        }
        *int v36 = &unk_26C4E0430;
        v36[4] = 3;
      }
      conditionalAssert("Bad model", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 74, v12, v13);
      signed int v32 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v43, "Bad model");
      *signed int v32 = byte_26C4DF190;
      uint64_t v33 = (std::string *)(v32 + 1);
      if (SHIBYTE(v44) < 0)
      {
        std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
      }
      else
      {
        long long v40 = v43;
        v32[3] = v44;
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v40;
      }
      *signed int v32 = &unk_26C4E0430;
      v32[4] = 3;
    }
    conditionalAssert("Bad input tool type", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 73, v12, v13);
    __int16 v30 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v43, "Bad input tool type");
    *__int16 v30 = byte_26C4DF190;
    int v31 = (std::string *)(v30 + 1);
    if (SHIBYTE(v44) < 0)
    {
      std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
    }
    else
    {
      long long v39 = v43;
      v30[3] = v44;
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v39;
    }
    *__int16 v30 = &unk_26C4E0430;
    v30[4] = 3;
  }
  conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 71, v12, v13);
  __int16 v28 = __cxa_allocate_exception(0x28uLL);
  std::string::basic_string[abi:ne180100]<0>(&v43, "Not initialized");
  *__int16 v28 = byte_26C4DF190;
  int v29 = (std::string *)(v28 + 1);
  if (SHIBYTE(v44) < 0)
  {
    std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
  }
  else
  {
    long long v38 = v43;
    v28[3] = v44;
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v38;
  }
  *__int16 v28 = &unk_26C4E0430;
  v28[4] = 4;
}

void sub_213F5868C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v22)
  {
LABEL_6:
    if (a2 != 3)
    {
      MrecInitModule_sdpres_sdapi();
      TLocaleHandler::~TLocaleHandler(&a20);
      TReentrancyHandler::ms_bIuint64_t n = 0;
      switch(a2)
      {
        case 7:
          uint64_t v27 = (char *)__cxa_begin_catch(a1);
          __int16 v28 = v27 + 8;
          if (v27[31] < 0) {
            __int16 v28 = *(unsigned char **)v28;
          }
          handleException(v28, (uint64_t)"TPItn_Open", *((void *)v27 + 4), v25, v26);
          break;
        case 6:
          int v31 = (char *)__cxa_begin_catch(a1);
          signed int v32 = v31 + 8;
          if (v31[31] < 0) {
            signed int v32 = *(unsigned char **)v32;
          }
          handleException(v32, (uint64_t)"TPItn_Open", 6, v29, v30);
          break;
        case 5:
          __int16 v35 = (char *)__cxa_begin_catch(a1);
          int v36 = v35 + 8;
          if (v35[31] < 0) {
            int v36 = *(unsigned char **)v36;
          }
          handleException(v36, (uint64_t)"TPItn_Open", 2, v33, v34);
          break;
        case 4:
          long long v39 = (char *)__cxa_begin_catch(a1);
          long long v40 = v39 + 8;
          if (v39[31] < 0) {
            long long v40 = *(unsigned char **)v40;
          }
          handleException(v40, (uint64_t)"TPItn_Open", 11, v37, v38);
          break;
        case 2:
          long long v41 = __cxa_begin_catch(a1);
          long long v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
          handleException(v42, (uint64_t)"TPItn_Open", 1, v43, v44);
          break;
        default:
          if (a2 != 1) {
            _Unwind_Resume(a1);
          }
          uint64_t v45 = __cxa_begin_catch(a1);
          char v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
          handleException(v46, (uint64_t)"TPItn_Open", 2, v47, v48);
          break;
      }
      __cxa_end_catch();
      JUMPOUT(0x213F5825CLL);
    }
    __cxa_begin_catch(a1);
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    __cxa_rethrow();
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void sub_213F58978(_Unwind_Exception *a1)
{
}

void sub_213F58984(_Unwind_Exception *a1)
{
}

void sub_213F58990(_Unwind_Exception *a1)
{
}

void sub_213F5899C(_Unwind_Exception *a1)
{
}

void sub_213F589A8(_Unwind_Exception *a1)
{
}

void sub_213F589B4(_Unwind_Exception *a1)
{
}

void sub_213F589C0()
{
}

void sub_213F589D0()
{
}

uint64_t verifyPointerArgument<TPItnHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    int v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213F58ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPItn_Close(unint64_t a1)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v12, "TPItn_Close");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v11);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 129, v2, v3);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "Not initialized");
    void *exception = byte_26C4DF190;
    int v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v4 = verifyFormatterHandle(a1, "Bad input ITN handle");
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v11);
  TReentrancyHandler::ms_bIuint64_t n = 0;
  return 0;
}

void sub_213F58C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIuint64_t n = 0;
    switch(a2)
    {
      case 7:
        uint64_t v26 = (char *)__cxa_begin_catch(a1);
        uint64_t v27 = v26 + 8;
        if (v26[31] < 0) {
          uint64_t v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPItn_Close", *((void *)v26 + 4), v24, v25);
        break;
      case 6:
        uint64_t v30 = (char *)__cxa_begin_catch(a1);
        int v31 = v30 + 8;
        if (v30[31] < 0) {
          int v31 = *(unsigned char **)v31;
        }
        handleException(v31, (uint64_t)"TPItn_Close", 6, v28, v29);
        break;
      case 5:
        uint64_t v34 = (char *)__cxa_begin_catch(a1);
        __int16 v35 = v34 + 8;
        if (v34[31] < 0) {
          __int16 v35 = *(unsigned char **)v35;
        }
LABEL_17:
        handleException(v35, (uint64_t)"TPItn_Close", 2, v32, v33);
        break;
      case 4:
        uint64_t v38 = (char *)__cxa_begin_catch(a1);
        long long v39 = v38 + 8;
        if (v38[31] < 0) {
          long long v39 = *(unsigned char **)v39;
        }
        handleException(v39, (uint64_t)"TPItn_Close", 11, v36, v37);
        break;
      case 3:
        long long v40 = (char *)__cxa_begin_catch(a1);
        __int16 v35 = v40 + 8;
        if (v40[31] < 0) {
          __int16 v35 = *(unsigned char **)v35;
        }
        goto LABEL_17;
      case 2:
        long long v41 = __cxa_begin_catch(a1);
        long long v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPItn_Close", 1, v43, v44);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        uint64_t v45 = __cxa_begin_catch(a1);
        char v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPItn_Close", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213F58BB8);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t verifyFormatterHandle(unint64_t a1, const char *a2)
{
  uint64_t Registry = TRegisterable<TIFormatter>::getRegistry();
  uint64_t v5 = TBaseRegistry<TTokenizer *>::find(Registry, a1);
  if (*(void **)(Registry + 16) == v5)
  {
    conditionalAssert(a2, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 47, v6, v7);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    uint64_t v10 = (char *)a2;
    uint64_t v11 = exception;
    std::string::basic_string[abi:ne180100]<0>(&v14, v10);
    *uint64_t v11 = byte_26C4DF190;
    char v12 = (std::string *)(v11 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v11[3] = v15;
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *uint64_t v11 = &unk_26C4E0430;
    v11[4] = 3;
  }
  return *v5;
}

void sub_213F59040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t verifyStringStreamArgument(uint64_t result, unint64_t a2, char a3, char *a4, uint64_t a5)
{
  if (!result && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 326, (uint64_t)a4, a5);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a4);
    void *exception = byte_26C4DF190;
    uint64_t v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213F59170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_213F59378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TPItn_WordSequenceToResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, _DWORD *a11, const char *a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  unsigned int v105 = v14;
  unsigned int v106 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v104 = v19;
  int v21 = v20;
  unint64_t v23 = v22;
  unint64_t v24 = v12;
  v128[128] = *MEMORY[0x263EF8340];
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v120, "TPItn_WordSequenceToResult");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v119);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 671, v25, v26);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v115, "Not initialized");
    void *exception = byte_26C4DF190;
    uint64_t v95 = (std::string *)(exception + 1);
    if ((v115[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v95, *(const std::string::value_type **)v115, *(std::string::size_type *)&v115[8]);
    }
    else
    {
      long long v99 = *(_OWORD *)v115;
      exception[3] = *(void *)&v115[16];
      *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v99;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  char v103 = v21;
  uint64_t v27 = (TLexicon **)verifyFormatterHandle(v24, "Bad input ITN handle");
  uint64_t v30 = (*((uint64_t (**)(TLexicon **))*v27 + 8))(v27);
  if (!v30)
  {
    conditionalAssert("Results not supported", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 675, v28, v29);
    uint64_t v96 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v115, "Results not supported");
    *uint64_t v96 = byte_26C4DF190;
    uint64_t v97 = (std::string *)(v96 + 1);
    if ((v115[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)v115, *(std::string::size_type *)&v115[8]);
    }
    else
    {
      long long v100 = *(_OWORD *)v115;
      v96[3] = *(void *)&v115[16];
      *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v100;
    }
    *uint64_t v96 = &unk_26C4E0430;
    v96[4] = 13;
  }
  uint64_t v31 = (*((uint64_t (**)(TLexicon **))*v27 + 4))(v27);
  if (!v23 || ((uint64_t)(*(void *)(v31 + 80) - *(void *)(v31 + 72)) >> 5) - 1 < v23)
  {
    conditionalAssert("Bad input parameter configuration handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 678, v32, v33);
    int v92 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v115, "Bad input parameter configuration handle");
    *int v92 = byte_26C4DF190;
    uint64_t v93 = (std::string *)(v92 + 1);
    if ((v115[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v93, *(const std::string::value_type **)v115, *(std::string::size_type *)&v115[8]);
    }
    else
    {
      long long v98 = *(_OWORD *)v115;
      v92[3] = *(void *)&v115[16];
      *(_OWORD *)&v93->__r_.__value_.__l.__data_ = v98;
    }
    *int v92 = &unk_26C4E0430;
    v92[4] = 3;
  }
  uint64_t v34 = (*((uint64_t (**)(TLexicon **))*v27 + 4))(v27);
  uint64_t v101 = *(void *)(v34 + 136);
  uint64_t v102 = v34;
  *(void *)(v34 + 136) = v23;
  verifyPointerArgument<TPItnResultHandle_fake **,unsigned int>((uint64_t)v103, v106, 1, "Bad input result array", v35);
  if (v106)
  {
    uint64_t v37 = v106;
    uint64_t v36 = v103;
    do
    {
      if (((*(uint64_t (**)(uint64_t, void))(*(void *)v30 + 128))(v30, *v36) & 1) == 0)
      {
        conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 685, v38, v39);
        uint64_t v83 = __cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v115, "Bad input result handle");
        *uint64_t v83 = byte_26C4DF190;
        uint64_t v84 = (std::string *)(v83 + 1);
        if ((v115[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v84, *(const std::string::value_type **)v115, *(std::string::size_type *)&v115[8]);
        }
        else
        {
          long long v89 = *(_OWORD *)v115;
          v83[3] = *(void *)&v115[16];
          *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v89;
        }
        *uint64_t v83 = &unk_26C4E0430;
        v83[4] = 3;
      }
      ++v36;
      --v37;
    }
    while (v37);
  }
  verifyRange(v104, 0, v106, 0, "Bad input replaced range");
  verifyStringStreamArgument((uint64_t)v18, v105, 0, "Bad input word stream", v40);
  TAllocator::TAllocator((TAllocator *)v118, 2048);
  *(_OWORD *)&v115[8] = xmmword_214085190;
  char v117 = 1;
  uint64_t v112 = 0;
  BOOL v113 = 0;
  int v114 = 0;
  *(void *)uint64_t v115 = v116;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v112, v105);
  if (v105)
  {
    for (uint64_t i = 0; i != v105; ++i)
    {
      TBuffer<wchar_t>::resize((uint64_t)v115, 0);
      if (TLocaleInfo::multiByteToUnicode((uint64_t)v27[4] + 240, v18, (uint64_t)v115))
      {
        conditionalAssert("Bad input wordname encoding", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 701, v43, v44);
        uint64_t v85 = __cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v108, "Bad input wordname encoding");
        *uint64_t v85 = byte_26C4DF190;
        uint64_t v86 = (std::string *)(v85 + 1);
        if ((v108[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)v108, *(std::string::size_type *)&v108[8]);
        }
        else
        {
          long long v90 = *(_OWORD *)v108;
          v85[3] = *(void *)&v108[16];
          *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v90;
        }
        *uint64_t v85 = &unk_26C4E0430;
        v85[4] = 3;
      }
      uint64_t v45 = (uint64_t)v27[4];
      if (*(void *)&v115[16] >= *(void *)&v115[8])
      {
        if (v117)
        {
          *(_DWORD *)uint64_t v108 = 0;
          TBuffer<wchar_t>::insert((uint64_t)v115, *(unint64_t *)&v115[16], (int *)v108, 1uLL);
          --*(void *)&v115[16];
          char v46 = *(int **)v115;
        }
        else
        {
          char v46 = *(int **)v115;
          if (*(void *)&v115[8]) {
            *(_DWORD *)(*(void *)v115 + 4 * *(void *)&v115[8] - 4) = 0;
          }
        }
      }
      else
      {
        char v46 = *(int **)v115;
        *(_DWORD *)(*(void *)v115 + 4 * *(void *)&v115[16]) = 0;
      }
      if (TLexicon::checkName(v45, v46, 0, 0xFFFFFFFFFFFFFFFFLL))
      {
        conditionalAssert("Bad input wordname format", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 703, v47, v48);
        uint64_t v87 = __cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v108, "Bad input wordname format");
        *uint64_t v87 = byte_26C4DF190;
        uint64_t v88 = (std::string *)(v87 + 1);
        if ((v108[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)v108, *(std::string::size_type *)&v108[8]);
        }
        else
        {
          long long v91 = *(_OWORD *)v108;
          v87[3] = *(void *)&v108[16];
          *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v91;
        }
        *uint64_t v87 = &unk_26C4E0430;
        v87[4] = 3;
      }
      if ((unint64_t)(*(void *)&v115[16] + 1) >> 62) {
        uint64_t v49 = -1;
      }
      else {
        uint64_t v49 = 4 * (*(void *)&v115[16] + 1);
      }
      uint64_t v50 = (__int32 *)TAllocator::allocate((TAllocator *)v118, v49);
      if (*(void *)&v115[16] >= *(void *)&v115[8])
      {
        if (v117)
        {
          *(_DWORD *)uint64_t v108 = 0;
          TBuffer<wchar_t>::insert((uint64_t)v115, *(unint64_t *)&v115[16], (int *)v108, 1uLL);
          --*(void *)&v115[16];
          char v51 = *(const __int32 **)v115;
        }
        else
        {
          char v51 = *(const __int32 **)v115;
          if (*(void *)&v115[8]) {
            *(_DWORD *)(*(void *)v115 + 4 * *(void *)&v115[8] - 4) = 0;
          }
        }
      }
      else
      {
        char v51 = *(const __int32 **)v115;
        *(_DWORD *)(*(void *)v115 + 4 * *(void *)&v115[16]) = 0;
      }
      wcscpy(v50, v51);
      uint64_t v52 = v113;
      if (v113 >= v114)
      {
        uint64_t v54 = ((char *)v113 - v112) >> 3;
        if ((unint64_t)(v54 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v55 = ((char *)v114 - v112) >> 2;
        if (v55 <= v54 + 1) {
          unint64_t v55 = v54 + 1;
        }
        if ((unint64_t)((char *)v114 - v112) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56) {
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v114, v56);
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t v58 = (__int32 **)&v57[8 * v54];
        *uint64_t v58 = v50;
        uint64_t v53 = v58 + 1;
        unsigned int v60 = (__int32 **)v112;
        char v59 = v113;
        if (v113 != (__int32 **)v112)
        {
          do
          {
            int64_t v61 = *--v59;
            *--uint64_t v58 = v61;
          }
          while (v59 != v60);
          char v59 = (__int32 **)v112;
        }
        uint64_t v112 = (char *)v58;
        BOOL v113 = v53;
        int v114 = (__int32 **)&v57[8 * v56];
        if (v59) {
          operator delete(v59);
        }
      }
      else
      {
        *BOOL v113 = v50;
        uint64_t v53 = v52 + 1;
      }
      BOOL v113 = v53;
      v18 += strlen((const char *)v18) + 1;
    }
  }
  if (v16 != 0 && v105 != 0) {
    int v62 = v105 - 1;
  }
  else {
    int v62 = 0;
  }
  verifyPointerArgument<unsigned int,unsigned int>(v16, v62, 1, "Bad input pause duration array", v41);
  uint64_t v63 = (void *)a10;
  verifyPointerArgument<TPItnResultHandle_fake **>(a10, 0, "Bad output result handle pointer", v64, v65);
  verifyPointerArgument<TPRange>((uint64_t)a11, 0, "Bad output real replaced range", v66, v67);
  uint64_t v68 = a9;
  if (a12)
  {
    int DirSep = getDirSep();
    sprintf((char *)v128, "%s%citn.txt", a12, DirSep);
    std::ofstream::basic_ofstream(&v124);
    TOutputStream::TOutputStream(v111, &v124, (uint64_t)v128, (uint64_t)v27[4] + 240);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"NumInResult=", 12);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"NumReplacementStart=", 20);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"NumReplacementLength=", 21);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"NumToken=", 9);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"TokenSequence=", 14);
    *(void *)uint64_t v108 = v109;
    *(_OWORD *)&v108[8] = xmmword_214085190;
    char v110 = 1;
    if (v105)
    {
      for (unint64_t j = 0; j != v105; ++j)
      {
        if (j) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)" ", 1);
        }
        TBuffer<wchar_t>::resize((uint64_t)v108, 0);
        tildeEscape(*(void *)&v112[8 * j], (uint64_t)v108);
        if (*(void *)&v108[16] >= *(void *)&v108[8])
        {
          if (v110)
          {
            LODWORD(v121) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v108, *(unint64_t *)&v108[16], (int *)&v121, 1uLL);
            int64_t v71 = *(unsigned int **)v108;
            --*(void *)&v108[16];
          }
          else
          {
            int64_t v71 = *(unsigned int **)v108;
            if (*(void *)&v108[8]) {
              *(_DWORD *)(*(void *)v108 + 4 * *(void *)&v108[8] - 4) = 0;
            }
          }
        }
        else
        {
          int64_t v71 = *(unsigned int **)v108;
          *(_DWORD *)(*(void *)v108 + 4 * *(void *)&v108[16]) = 0;
        }
        TOutputStream::operator<<((uint64_t)v111, v71);
        if (v16 && j < v105 - 1 && *(_DWORD *)(v16 + 4 * j))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)" [", 2);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"]", 1);
        }
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"\n", 1);
    uint64_t v68 = a9;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"NumFlags=", 9);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111[0], (uint64_t)"\n", 1);
    int v72 = getDirSep();
    sprintf((char *)v128, "%s%citn_d.enh", a12, v72);
    v107[0] = 1;
    v107[1] = v128;
    uint64_t DataManager = makeDataManager((uint64_t)v107, 6, v73, v74, v75);
    (*((void (**)(TLexicon **, uint64_t, void))*v27 + 2))(v27, DataManager, 0);
    if (DataManager) {
      (*(void (**)(uint64_t))(*(void *)DataManager + 8))(DataManager);
    }
    int v77 = getDirSep();
    sprintf(v127, "%s%cgeneral.voc", a12, v77);
    TLexicon::save(v27[4], 0, (FileSpec *)v127);
    int v78 = getDirSep();
    sprintf((char *)v128, "%s%citn.res", a12, v78);
    std::ofstream::basic_ofstream(&v121);
    if (v106)
    {
      (*(void (**)(uint64_t, void, void, void))(*(void *)v30 + 112))(v30, *v103, 0, 0);
      operator new[]();
    }
    uint64_t v121 = *MEMORY[0x263F8C2B0];
    uint64_t v79 = v121;
    uint64_t v80 = *(void *)(MEMORY[0x263F8C2B0] + 24);
    *(uint64_t *)((char *)&v121 + *(void *)(v121 - 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4)) = v80;
    MEMORY[0x2166984F0](&v122);
    std::ostream::~ostream();
    MEMORY[0x2166986E0](&v123);
    if (v110 && *(unsigned char **)v108 != v109 && *(void *)v108) {
      MEMORY[0x216698730]();
    }
    uint64_t v124 = v79;
    *(uint64_t *)((char *)&v124 + *(void *)(v79 - 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4)) = v80;
    MEMORY[0x2166984F0](&v125);
    std::ostream::~ostream();
    MEMORY[0x2166986E0](&v126);
    uint64_t v63 = (void *)a10;
  }
  *(void *)uint64_t v108 = 0;
  v128[0] = 0;
  void *v63 = (*(uint64_t (**)(uint64_t, void *, void *, void *, void *, char **, uint64_t, uint64_t, unsigned char *, void *))(*(void *)v30 + 16))(v30, v103, &v103[*v104], &v103[v104[1]], &v103[v106], &v112, v16, v68, v108, v128);
  uint64_t v81 = (v128[0] - (void)v103) >> 3;
  *a11 = (*(void *)v108 - (void)v103) >> 3;
  a11[1] = v81;
  TLexicon::cleanCache(v27[4]);
  if (v112)
  {
    BOOL v113 = (__int32 **)v112;
    operator delete(v112);
  }
  if (v117 && *(unsigned char **)v115 != v116 && *(void *)v115) {
    MEMORY[0x216698730](*(void *)v115, 0x1000C4052888210);
  }
  TAllocator::clear((TAllocator *)v118);
  *(void *)(v102 + 136) = v101;
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v119);
  TReentrancyHandler::ms_bIuint64_t n = 0;
  return 0;
}

void sub_213F5A458(_Unwind_Exception *a1, int a2)
{
  if (SLOBYTE(STACK[0x50F]) < 0)
  {
    operator delete(*(void **)(v2 + 48));
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (!v4)
  {
LABEL_7:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler((locale_t *)&STACK[0x948]);
    TReentrancyHandler::ms_bIuint64_t n = 0;
    switch(a2)
    {
      case 7:
        long long v9 = (char *)__cxa_begin_catch(a1);
        uint64_t v10 = v9 + 8;
        if (v9[31] < 0) {
          uint64_t v10 = *(unsigned char **)v10;
        }
        handleException(v10, (uint64_t)"TPItn_WordSequenceToResult", *((void *)v9 + 4), v7, v8);
        __cxa_end_catch();
        break;
      case 6:
        unsigned int v13 = (char *)__cxa_begin_catch(a1);
        unsigned int v14 = v13 + 8;
        if (v13[31] < 0) {
          unsigned int v14 = *(unsigned char **)v14;
        }
        handleException(v14, (uint64_t)"TPItn_WordSequenceToResult", 6, v11, v12);
        __cxa_end_catch();
        break;
      case 5:
        uint64_t v17 = (char *)__cxa_begin_catch(a1);
        uint64_t v18 = v17 + 8;
        if (v17[31] < 0) {
          uint64_t v18 = *(unsigned char **)v18;
        }
LABEL_18:
        handleException(v18, (uint64_t)"TPItn_WordSequenceToResult", 2, v15, v16);
        __cxa_end_catch();
        break;
      case 4:
        int v21 = (char *)__cxa_begin_catch(a1);
        unint64_t v22 = v21 + 8;
        if (v21[31] < 0) {
          unint64_t v22 = *(unsigned char **)v22;
        }
        handleException(v22, (uint64_t)"TPItn_WordSequenceToResult", 11, v19, v20);
        __cxa_end_catch();
        break;
      case 3:
        unint64_t v23 = (char *)__cxa_begin_catch(a1);
        uint64_t v18 = v23 + 8;
        if (v23[31] < 0) {
          uint64_t v18 = *(unsigned char **)v18;
        }
        goto LABEL_18;
      case 2:
        unint64_t v24 = __cxa_begin_catch(a1);
        uint64_t v25 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v24 + 16))(v24);
        handleException(v25, (uint64_t)"TPItn_WordSequenceToResult", 1, v26, v27);
        __cxa_end_catch();
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        uint64_t v28 = __cxa_begin_catch(a1);
        uint64_t v29 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        handleException(v29, (uint64_t)"TPItn_WordSequenceToResult", 2, v30, v31);
        __cxa_end_catch();
        break;
    }
    JUMPOUT(0x213F59F58);
  }
  __cxa_free_exception(v3);
  goto LABEL_7;
}

void sub_213F5A4B0(void *a1, int a2)
{
  if (a2 == 3)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x213F5A658);
}

void sub_213F5A4D0()
{
}

void sub_213F5A4F0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x213F5A4F8);
  }
  __clang_call_terminate(a1);
}

void sub_213F5A518()
{
}

void sub_213F5A524()
{
}

void sub_213F5A530()
{
}

void sub_213F5A53C(void *a1, int a2)
{
  if (a2 == 3)
  {
    saveDump(a1, v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x213F5A658);
}

void sub_213F5A560()
{
}

void sub_213F5A580(void *a1, int a2)
{
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler((TLocaleHandler *)&STACK[0x948]);
  TReentrancyHandler::ms_bIuint64_t n = 0;
  switch(a2)
  {
    case 7:
      int v4 = __cxa_begin_catch(a1);
      uint64_t v5 = v4 + 1;
      if (*((char *)v4 + 31) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      handleException(v5, "TPItn_WordSequenceToResult", v4[4]);
      __cxa_end_catch();
      break;
    case 6:
      uint64_t v6 = (char *)__cxa_begin_catch(a1);
      uint64_t v7 = v6 + 8;
      if (v6[31] < 0) {
        uint64_t v7 = (void *)*v7;
      }
      handleException(v7, "TPItn_WordSequenceToResult", 6);
      __cxa_end_catch();
      break;
    case 5:
      uint64_t v8 = (char *)__cxa_begin_catch(a1);
      long long v9 = v8 + 8;
      if (v8[31] < 0) {
        long long v9 = (void *)*v9;
      }
LABEL_12:
      handleException(v9, "TPItn_WordSequenceToResult", 2);
      __cxa_end_catch();
      break;
    case 4:
      uint64_t v10 = (char *)__cxa_begin_catch(a1);
      uint64_t v11 = v10 + 8;
      if (v10[31] < 0) {
        uint64_t v11 = (void *)*v11;
      }
      handleException(v11, "TPItn_WordSequenceToResult", 11);
      __cxa_end_catch();
      break;
    case 3:
      uint64_t v12 = (char *)__cxa_begin_catch(a1);
      long long v9 = v12 + 8;
      if (v12[31] < 0) {
        long long v9 = (void *)*v9;
      }
      goto LABEL_12;
    case 2:
      unsigned int v13 = __cxa_begin_catch(a1);
      uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v13 + 16))(v13);
      handleException(v14, "TPItn_WordSequenceToResult", 1);
      __cxa_end_catch();
      break;
    case 1:
      uint64_t v15 = __cxa_begin_catch(a1);
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
      handleException(v16, "TPItn_WordSequenceToResult", 2);
      __cxa_end_catch();
      break;
    default:
      JUMPOUT(0x213F5A4F8);
  }
  JUMPOUT(0x213F59F58);
}

void sub_213F5A58C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v36)
  {
LABEL_6:
    JUMPOUT(0x213F5A69CLL);
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void sub_213F5A5D0()
{
  if (SLOBYTE(STACK[0x50F]) < 0)
  {
    operator delete(*(void **)(v0 + 48));
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v2)
  {
LABEL_6:
    JUMPOUT(0x213F5A6E4);
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void sub_213F5A60C()
{
}

void sub_213F5A628()
{
}

void sub_213F5A638()
{
}

void sub_213F5A650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (LOBYTE(STACK[0x4C0]) && a30 != a12 && a30) {
    MEMORY[0x216698730]();
  }
  std::ofstream::~ofstream(&STACK[0xB98]);
  uint64_t v31 = (void *)v30[3];
  if (v31)
  {
    v30[4] = v31;
    operator delete(v31);
  }
  if (LOBYTE(STACK[0x910]))
  {
    uint64_t v32 = v30[6];
    if (v32 != a20)
    {
      if (v32) {
        MEMORY[0x216698730](v32, 0x1000C4052888210);
      }
    }
  }
  TAllocator::clear((TAllocator *)&STACK[0x918]);
  *(void *)(a22 + 136) = a21;
  JUMPOUT(0x213F5A6ECLL);
}

void sub_213F5A8E8(_Unwind_Exception *a1)
{
}

void sub_213F5A8F4(_Unwind_Exception *a1)
{
}

void sub_213F5A900(_Unwind_Exception *a1)
{
}

void sub_213F5A90C(_Unwind_Exception *a1)
{
}

void sub_213F5A918(_Unwind_Exception *a1)
{
}

void sub_213F5A924(_Unwind_Exception *a1)
{
}

void sub_213F5A930(_Unwind_Exception *a1)
{
}

void sub_213F5A944(_Unwind_Exception *a1)
{
}

uint64_t verifyPointerArgument<TPItnResultHandle_fake **,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 269, (uint64_t)a4, a5);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    void *exception = byte_26C4DF190;
    uint64_t v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  if (a2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 270, (uint64_t)a4, a5);
    uint64_t v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    void *v10 = byte_26C4DF190;
    uint64_t v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      _DWORD v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    void *v10 = &unk_26C4E0430;
    v10[4] = 3;
  }
  return result;
}

void sub_213F5AB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *verifyRange(unsigned int *result, unsigned int a2, unsigned int a3, uint64_t a4, char *a5)
{
  if (!result && (a4 & 1) == 0)
  {
    conditionalAssert(a5, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 349, a4, (uint64_t)a5);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, a5);
    void *exception = byte_26C4DF190;
    uint64_t v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v20) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
    }
    else
    {
      long long v15 = v19;
      exception[3] = v20;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v15;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  if (result)
  {
    unsigned int v6 = result[1];
    if (*result > v6)
    {
      conditionalAssert(a5, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 352, a4, (uint64_t)a5);
      long long v9 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v19, a5);
      *long long v9 = byte_26C4DF190;
      uint64_t v10 = (std::string *)(v9 + 1);
      if (SHIBYTE(v20) < 0)
      {
        std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
      }
      else
      {
        long long v16 = v19;
        v9[3] = v20;
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v16;
      }
      *long long v9 = &unk_26C4E0430;
      v9[4] = 3;
    }
    if (*result < a2)
    {
      conditionalAssert(a5, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 353, a4, (uint64_t)a5);
      uint64_t v11 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v19, a5);
      *uint64_t v11 = byte_26C4DF190;
      long long v12 = (std::string *)(v11 + 1);
      if (SHIBYTE(v20) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
      }
      else
      {
        long long v17 = v19;
        v11[3] = v20;
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v17;
      }
      *uint64_t v11 = &unk_26C4E0430;
      v11[4] = 3;
    }
    if (v6 > a3)
    {
      conditionalAssert(a5, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 354, a4, (uint64_t)a5);
      long long v13 = __cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(&v19, a5);
      void *v13 = byte_26C4DF190;
      long long v14 = (std::string *)(v13 + 1);
      if (SHIBYTE(v20) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
      }
      else
      {
        long long v18 = v19;
        v13[3] = v20;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
      }
      void *v13 = &unk_26C4E0430;
      v13[4] = 3;
    }
  }
  return result;
}

void sub_213F5AEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<TPItnResultHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    uint64_t v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213F5AFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPRange>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    uint64_t v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213F5B11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPItn_DeleteResult(unint64_t a1, uint64_t a2)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v26, "TPItn_DeleteResult");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v25);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1087, v4, v5);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "Not initialized");
    void *exception = byte_26C4DF190;
    long long v15 = (std::string *)(exception + 1);
    if (SHIBYTE(v24) < 0)
    {
      std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
    }
    else
    {
      long long v20 = v23;
      exception[3] = v24;
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v20;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v6 = verifyFormatterHandle(a1, "Bad input ITN handle");
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
  uint64_t v10 = v7;
  if (!v7)
  {
    conditionalAssert("Results not supported", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1091, v8, v9);
    int v16 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "Results not supported");
    void *v16 = byte_26C4DF190;
    long long v17 = (std::string *)(v16 + 1);
    if (SHIBYTE(v24) < 0)
    {
      std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
    }
    else
    {
      long long v21 = v23;
      v16[3] = v24;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v21;
    }
    void *v16 = &unk_26C4E0430;
    v16[4] = 13;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 128))(v7, a2) & 1) == 0)
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1094, v11, v12);
    long long v18 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "Bad input result handle");
    void *v18 = byte_26C4DF190;
    long long v19 = (std::string *)(v18 + 1);
    if (SHIBYTE(v24) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
    }
    else
    {
      long long v22 = v23;
      void v18[3] = v24;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v22;
    }
    void *v18 = &unk_26C4E0430;
    v18[4] = 3;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 64))(v10, a2);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v25);
  TReentrancyHandler::ms_bIuint64_t n = 0;
  return 0;
}

void sub_213F5B4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIuint64_t n = 0;
    switch(a2)
    {
      case 7:
        char v26 = (char *)__cxa_begin_catch(a1);
        uint64_t v27 = v26 + 8;
        if (v26[31] < 0) {
          uint64_t v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPItn_DeleteResult", *((void *)v26 + 4), v24, v25);
        break;
      case 6:
        uint64_t v30 = (char *)__cxa_begin_catch(a1);
        uint64_t v31 = v30 + 8;
        if (v30[31] < 0) {
          uint64_t v31 = *(unsigned char **)v31;
        }
        handleException(v31, (uint64_t)"TPItn_DeleteResult", 6, v28, v29);
        break;
      case 5:
        uint64_t v34 = (char *)__cxa_begin_catch(a1);
        uint64_t v35 = v34 + 8;
        if (v34[31] < 0) {
          uint64_t v35 = *(unsigned char **)v35;
        }
LABEL_17:
        handleException(v35, (uint64_t)"TPItn_DeleteResult", 2, v32, v33);
        break;
      case 4:
        uint64_t v38 = (char *)__cxa_begin_catch(a1);
        uint64_t v39 = v38 + 8;
        if (v38[31] < 0) {
          uint64_t v39 = *(unsigned char **)v39;
        }
        handleException(v39, (uint64_t)"TPItn_DeleteResult", 11, v36, v37);
        break;
      case 3:
        uint64_t v40 = (char *)__cxa_begin_catch(a1);
        uint64_t v35 = v40 + 8;
        if (v40[31] < 0) {
          uint64_t v35 = *(unsigned char **)v35;
        }
        goto LABEL_17;
      case 2:
        uint64_t v41 = __cxa_begin_catch(a1);
        long long v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPItn_DeleteResult", 1, v43, v44);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        uint64_t v45 = __cxa_begin_catch(a1);
        char v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPItn_DeleteResult", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213F5B25CLL);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TPItn_GetResultText(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v30, "TPItn_GetResultText");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v29);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1143, v10, v11);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v32, "Not initialized");
    void *exception = byte_26C4DF190;
    int v21 = (std::string *)(exception + 1);
    if (SHIBYTE(v33) < 0)
    {
      std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
    }
    else
    {
      long long v26 = v32;
      exception[3] = v33;
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v26;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v12 = verifyFormatterHandle(a1, "Bad input ITN handle");
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v12);
  uint64_t v16 = v13;
  if (!v13)
  {
    conditionalAssert("Results not supported", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1147, v14, v15);
    long long v22 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v32, "Results not supported");
    *long long v22 = byte_26C4DF190;
    long long v23 = (std::string *)(v22 + 1);
    if (SHIBYTE(v33) < 0)
    {
      std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
    }
    else
    {
      long long v27 = v32;
      v22[3] = v33;
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v27;
    }
    *long long v22 = &unk_26C4E0430;
    _OWORD v22[4] = 13;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 128))(v13, a2) & 1) == 0)
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1150, v17, v18);
    uint64_t v24 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v32, "Bad input result handle");
    *uint64_t v24 = byte_26C4DF190;
    uint64_t v25 = (std::string *)(v24 + 1);
    if (SHIBYTE(v33) < 0)
    {
      std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
    }
    else
    {
      long long v28 = v32;
      v24[3] = v33;
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v28;
    }
    *uint64_t v24 = &unk_26C4E0430;
    v24[4] = 3;
  }
  verifyPointerArgument<char,unsigned int>(a3, a4, 1, "Bad output text buffer", v18);
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = a4;
  unint64_t v33 = 0;
  char v35 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v16 + 96))(v16, a2, &v32);
  if (v33 >= *((void *)&v32 + 1))
  {
    if (v35)
    {
      char v31 = 0;
      TBuffer<char>::insert((uint64_t)&v32, v33--, &v31, 1uLL);
    }
    else if (*((void *)&v32 + 1))
    {
      *(unsigned char *)(*((void *)&v32 + 1) + v32 - 1) = 0;
    }
  }
  else
  {
    *(unsigned char *)(v32 + v33) = 0;
  }
  if (a5) {
    *a5 = v33 + 1;
  }
  if (v35 && (uint64_t *)v32 != &v34 && (void)v32) {
    MEMORY[0x216698730]();
  }
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v29);
  TReentrancyHandler::ms_bIuint64_t n = 0;
  return 0;
}

void sub_213F5BBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, locale_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v56 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v56)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a14);
    TReentrancyHandler::ms_bIuint64_t n = 0;
    switch(a2)
    {
      case 7:
        int64_t v61 = (char *)__cxa_begin_catch(a1);
        int v62 = v61 + 8;
        if (v61[31] < 0) {
          int v62 = *(unsigned char **)v62;
        }
        handleException(v62, (uint64_t)"TPItn_GetResultText", *((void *)v61 + 4), v59, v60);
        __cxa_end_catch();
        break;
      case 6:
        uint64_t v65 = (char *)__cxa_begin_catch(a1);
        uint64_t v66 = v65 + 8;
        if (v65[31] < 0) {
          uint64_t v66 = *(unsigned char **)v66;
        }
        handleException(v66, (uint64_t)"TPItn_GetResultText", 6, v63, v64);
        __cxa_end_catch();
        break;
      case 5:
        char v69 = (char *)__cxa_begin_catch(a1);
        BOOL v70 = v69 + 8;
        if (v69[31] < 0) {
          BOOL v70 = *(unsigned char **)v70;
        }
LABEL_17:
        handleException(v70, (uint64_t)"TPItn_GetResultText", 2, v67, v68);
        __cxa_end_catch();
        break;
      case 4:
        uint64_t v73 = (char *)__cxa_begin_catch(a1);
        uint64_t v74 = v73 + 8;
        if (v73[31] < 0) {
          uint64_t v74 = *(unsigned char **)v74;
        }
        handleException(v74, (uint64_t)"TPItn_GetResultText", 11, v71, v72);
        __cxa_end_catch();
        break;
      case 3:
        uint64_t v75 = (char *)__cxa_begin_catch(a1);
        BOOL v70 = v75 + 8;
        if (v75[31] < 0) {
          BOOL v70 = *(unsigned char **)v70;
        }
        goto LABEL_17;
      case 2:
        uint64_t v76 = __cxa_begin_catch(a1);
        int v77 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v76 + 16))(v76);
        handleException(v77, (uint64_t)"TPItn_GetResultText", 1, v78, v79);
        __cxa_end_catch();
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        uint64_t v80 = __cxa_begin_catch(a1);
        uint64_t v81 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v80 + 16))(v80);
        handleException(v81, (uint64_t)"TPItn_GetResultText", 2, v82, v83);
        __cxa_end_catch();
        break;
    }
    JUMPOUT(0x213F5B960);
  }
  __cxa_free_exception(v55);
  goto LABEL_6;
}

uint64_t TPItn_GetResultAlignment(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, _DWORD *a6)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v40, "TPItn_GetResultAlignment");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v39);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1172, v12, v13);
    exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "Not initialized");
    void *exception = byte_26C4DF190;
    long long v28 = (std::string *)(exception + 1);
    if ((v36[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v36, *(std::string::size_type *)&v36[8]);
    }
    else
    {
      long long v33 = *(_OWORD *)v36;
      exception[3] = *(void *)&v36[16];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v33;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v14 = verifyFormatterHandle(a1, "Bad input ITN handle");
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 64))(v14);
  uint64_t v18 = v15;
  if (!v15)
  {
    conditionalAssert("Results not supported", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1176, v16, v17);
    uint64_t v29 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "Results not supported");
    *uint64_t v29 = byte_26C4DF190;
    char v30 = (std::string *)(v29 + 1);
    if ((v36[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)v36, *(std::string::size_type *)&v36[8]);
    }
    else
    {
      long long v34 = *(_OWORD *)v36;
      int v29[3] = *(void *)&v36[16];
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v34;
    }
    *uint64_t v29 = &unk_26C4E0430;
    v29[4] = 13;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 128))(v15, a2) & 1) == 0)
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tpitn.cpp", 1179, v19, v20);
    char v31 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "Bad input result handle");
    *char v31 = byte_26C4DF190;
    long long v32 = (std::string *)(v31 + 1);
    if ((v36[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v36, *(std::string::size_type *)&v36[8]);
    }
    else
    {
      long long v35 = *(_OWORD *)v36;
      v31[3] = *(void *)&v36[16];
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v35;
    }
    *char v31 = &unk_26C4E0430;
    v31[4] = 3;
  }
  verifyPointerArgument<unsigned int,unsigned int>(a3, a5, 1, "Bad output relative-text buffer", v20);
  verifyPointerArgument<unsigned int,unsigned int>(a4, a5, 1, "Bad output relative-word buffer", v21);
  *(void *)uint64_t v36 = v37;
  *(_OWORD *)&v36[8] = xmmword_214085190;
  char v38 = 1;
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v18 + 120))(v18, a2, v36);
  unint64_t v22 = *(void *)&v36[16];
  if (a5 && *(void *)&v36[16])
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    uint64_t v25 = *(void *)v36;
    do
    {
      if (a3) {
        *(_DWORD *)(a3 + 4 * v23) = *(void *)(v25 + 8 * v24);
      }
      if (a4) {
        *(_DWORD *)(a4 + 4 * v23) = *(void *)(v25 + 8 * v24 + 8);
      }
      if (++v23 >= (unint64_t)a5) {
        break;
      }
      v24 += 2;
    }
    while (v24 < v22);
  }
  if (a6) {
    *a6 = v22 >> 1;
  }
  if (v38 && *(unsigned char **)v36 != v37 && *(void *)v36) {
    MEMORY[0x216698730]();
  }
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v39);
  TReentrancyHandler::ms_bIuint64_t n = 0;
  return 0;
}

void sub_213F5C374(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v15)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler((locale_t *)(v16 - 104));
    TReentrancyHandler::ms_bIuint64_t n = 0;
    switch(a2)
    {
      case 7:
        uint64_t v21 = (char *)__cxa_begin_catch(a1);
        unint64_t v22 = v21 + 8;
        if (v21[31] < 0) {
          unint64_t v22 = *(unsigned char **)v22;
        }
        handleException(v22, (uint64_t)"TPItn_GetResultAlignment", *((void *)v21 + 4), v19, v20);
        break;
      case 6:
        uint64_t v25 = (char *)__cxa_begin_catch(a1);
        long long v26 = v25 + 8;
        if (v25[31] < 0) {
          long long v26 = *(unsigned char **)v26;
        }
        handleException(v26, (uint64_t)"TPItn_GetResultAlignment", 6, v23, v24);
        break;
      case 5:
        uint64_t v29 = (char *)__cxa_begin_catch(a1);
        char v30 = v29 + 8;
        if (v29[31] < 0) {
          char v30 = *(unsigned char **)v30;
        }
LABEL_17:
        handleException(v30, (uint64_t)"TPItn_GetResultAlignment", 2, v27, v28);
        break;
      case 4:
        long long v33 = (char *)__cxa_begin_catch(a1);
        long long v34 = v33 + 8;
        if (v33[31] < 0) {
          long long v34 = *(unsigned char **)v34;
        }
        handleException(v34, (uint64_t)"TPItn_GetResultAlignment", 11, v31, v32);
        break;
      case 3:
        long long v35 = (char *)__cxa_begin_catch(a1);
        char v30 = v35 + 8;
        if (v35[31] < 0) {
          char v30 = *(unsigned char **)v30;
        }
        goto LABEL_17;
      case 2:
        uint64_t v36 = __cxa_begin_catch(a1);
        uint64_t v37 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v36 + 16))(v36);
        handleException(v37, (uint64_t)"TPItn_GetResultAlignment", 1, v38, v39);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        char v40 = __cxa_begin_catch(a1);
        uint64_t v41 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v40 + 16))(v40);
        handleException(v41, (uint64_t)"TPItn_GetResultAlignment", 2, v42, v43);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213F5C0F8);
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t OUTLINED_FUNCTION_0_2(uint64_t a1)
{
  return *(void *)a1;
}

void OUTLINED_FUNCTION_3()
{
  JUMPOUT(0x216698730);
}

uint64_t MrecInitLibrary_sdapi(void)
{
  MrecInitModule_apist_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughSdapi(void)
{
  MrecInitLibrarySet_throughRecogctl();
  MrecInitLibrarySet_throughFstgraph();

  return MrecInitLibrary_sdapi();
}

void ParentFirstStateIdIterator::ParentFirstStateIdIterator(ParentFirstStateIdIterator *this, const StateMgr *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue((uint64_t)this + 8, 0);
}